{"id":67856,"title":"23 | 二叉树基础（上）：什么样的二叉树适合用数组来存储？","content":"<p>前面我们讲的都是线性表结构，栈、队列等等。今天我们讲一种非线性表结构，树。树这种数据结构比线性表的数据结构要复杂得多，内容也比较多，所以我会分四节来讲解。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/c9/6ce8707f43e1a3e7e5368167cca6a4c9.jpg?wh=1142*543\" alt=\"\"></p><p>我反复强调过，带着问题学习，是最有效的学习方式之一，所以在正式的内容开始之前，我还是给你出一道思考题：<strong><span class=\"orange\">二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？</span></strong></p><p>带着这些问题，我们就来学习今天的内容，树！</p><h2>树（Tree）</h2><p>我们首先来看，什么是“树”？再完备的定义，都没有图直观。所以我在图中画了几棵“树”。你来看看，这些“树”都有什么特征？</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/29/b7043bf29a253bb36221eaec62b2e129.jpg?wh=1142*731\" alt=\"\"></p><p>你有没有发现，“树”这种数据结构真的很像我们现实生活中的“树”，这里面每个元素我们叫做“节点”；用来连接相邻节点之间的关系，我们叫做“父子关系”。</p><p>比如下面这幅图，A节点就是B节点的<strong>父节点</strong>，B节点是A节点的<strong>子节点</strong>。B、C、D这三个节点的父节点是同一个节点，所以它们之间互称为<strong>兄弟节点</strong>。我们把没有父节点的节点叫做<strong>根节点</strong>，也就是图中的节点E。我们把没有子节点的节点叫做<strong>叶子节点</strong>或者<strong>叶节点</strong>，比如图中的G、H、I、J、K、L都是叶子节点。</p><p><img src=\"https://static001.geekbang.org/resource/image/22/ae/220043e683ea33b9912425ef759556ae.jpg?wh=1142*499\" alt=\"\"></p><p>除此之外，关于“树”，还有三个比较相似的概念：<strong>高度</strong>（Height）、<strong>深度</strong>（Depth）、<strong>层</strong>（Level）。它们的定义是这样的：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/40/1e/4094a733986073fedb6b9d03f877d71e.jpg?wh=1142*565\" alt=\"\"></p><p>这三个概念的定义比较容易混淆，描述起来也比较空洞。我举个例子说明一下，你一看应该就能明白。</p><p><img src=\"https://static001.geekbang.org/resource/image/50/b4/50f89510ad1f7570791dd12f4e9adeb4.jpg?wh=1142*570\" alt=\"\"></p><p>记这几个概念，我还有一个小窍门，就是类比“高度”“深度”“层”这几个名词在生活中的含义。</p><p>在我们的生活中，“高度”这个概念，其实就是从下往上度量，比如我们要度量第10层楼的高度、第13层楼的高度，起点都是地面。所以，树这种数据结构的高度也是一样，从最底层开始计数，并且计数的起点是0。</p><p>“深度”这个概念在生活中是从上往下度量的，比如水中鱼的深度，是从水平面开始度量的。所以，树这种数据结构的深度也是类似的，从根结点开始度量，并且计数起点也是0。</p><p>“层数”跟深度的计算类似，不过，计数起点是1，也就是说根节点位于第1层。</p><h2>二叉树（Binary Tree）</h2><p>树结构多种多样，不过我们最常用还是二叉树。</p><p>二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是<strong>左子节点</strong>和<strong>右子<strong><strong>节</strong></strong>点</strong>。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。我画的这几个都是二叉树。以此类推，你可以想象一下四叉树、八叉树长什么样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/09/2b/09c2972d56eb0cf67e727deda0e9412b.jpg?wh=1142*635\" alt=\"\"></p><p>这个图里面，有两个比较特殊的二叉树，分别是编号2和编号3这两个。</p><p>其中，编号2的二叉树中，叶子节点全都在最底层，除了叶子节点之外，每个节点都有左右两个子节点，这种二叉树就叫做<strong>满二叉树</strong>。</p><p>编号3的二叉树中，叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做<strong>完全二叉树</strong>。</p><p>满二叉树很好理解，也很好识别，但是完全二叉树，有的人可能就分不清了。我画了几个完全二叉树和非完全二叉树的例子，你可以对比着看看。</p><p><img src=\"https://static001.geekbang.org/resource/image/18/60/18413c6597c2850b75367393b401ad60.jpg?wh=1142*787\" alt=\"\"></p><p>你可能会说，满二叉树的特征非常明显，我们把它单独拎出来讲，这个可以理解。但是完全二叉树的特征不怎么明显啊，单从长相上来看，完全二叉树并没有特别特殊的地方啊，更像是“芸芸众树”中的一种。</p><p>那我们为什么还要特意把它拎出来讲呢？为什么偏偏把最后一层的叶子节点靠左排列的叫完全二叉树？如果靠右排列就不能叫完全二叉树了吗？这个定义的由来或者说目的在哪里？</p><p>要理解完全二叉树定义的由来，我们需要先了解，<strong>如何表示（或者存储）一棵二叉树？</strong></p><p>想要存储一棵二叉树，我们有两种方法，一种是基于指针或者引用的二叉链式存储法，一种是基于数组的顺序存储法。</p><p>我们先来看比较简单、直观的<strong>链式存储法</strong>。从图中你应该可以很清楚地看到，每个节点有三个字段，其中一个存储数据，另外两个是指向左右子节点的指针。我们只要拎住根节点，就可以通过左右子节点的指针，把整棵树都串起来。这种存储方式我们比较常用。大部分二叉树代码都是通过这种结构来实现的。</p><p><img src=\"https://static001.geekbang.org/resource/image/12/8e/12cd11b2432ed7c4dfc9a2053cb70b8e.jpg?wh=1142*734\" alt=\"\"></p><p>我们再来看，基于数组的<strong>顺序存储法</strong>。我们把根节点存储在下标i = 1的位置，那左子节点存储在下标2 * i = 2的位置，右子节点存储在2 * i + 1 = 3的位置。以此类推，B节点的左子节点存储在2 * i = 2 * 2 = 4的位置，右子节点存储在2 * i + 1 = 2 * 2 + 1 = 5的位置。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/30/14eaa820cb89a17a7303e8847a412330.jpg?wh=1142*604\" alt=\"\"></p><p>我来总结一下，如果节点X存储在数组中下标为i的位置，下标为2 * i 的位置存储的就是左子节点，下标为2 * i + 1的位置存储的就是右子节点。反过来，下标为i/2的位置存储就是它的父节点。通过这种方式，我们只要知道根节点存储的位置（一般情况下，为了方便计算子节点，根节点会存储在下标为1的位置），这样就可以通过下标计算，把整棵树都串起来。</p><p>不过，我刚刚举的例子是一棵完全二叉树，所以仅仅“浪费”了一个下标为0的存储位置。如果是非完全二叉树，其实会浪费比较多的数组存储空间。你可以看我举的下面这个例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/23/08bd43991561ceeb76679fbb77071223.jpg?wh=1142*585\" alt=\"\"></p><p>所以，如果某棵二叉树是一棵完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针。这也是为什么完全二叉树会单独拎出来的原因，也是为什么完全二叉树要求最后一层的子节点都靠左的原因。</p><p>当我们讲到堆和堆排序的时候，你会发现，堆其实就是一种完全二叉树，最常用的存储方式就是数组。</p><h2>二叉树的遍历</h2><p>前面我讲了二叉树的基本定义和存储方法，现在我们来看二叉树中非常重要的操作，二叉树的遍历。这也是非常常见的面试题。</p><p>如何将所有节点都遍历打印出来呢？经典的方法有三种，<strong>前序遍历</strong>、<strong>中序遍历</strong>和<strong>后序遍历</strong>。其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序。</p><ul>\n<li>\n<p>前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。</p>\n</li>\n<li>\n<p>中序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树。</p>\n</li>\n<li>\n<p>后序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。</p>\n</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/ab/16/ab103822e75b5b15c615b68560cb2416.jpg?wh=1142*582\" alt=\"\"></p><p><strong>实际上，二叉树的前、中、后序遍历就是一个递归的过程</strong>。比如，前序遍历，其实就是先打印根节点，然后再递归地打印左子树，最后递归地打印右子树。</p><p>写递归代码的关键，就是看能不能写出递推公式，而写递推公式的关键就是，如果要解决问题A，就假设子问题B、C已经解决，然后再来看如何利用B、C来解决A。所以，我们可以把前、中、后序遍历的递推公式都写出来。</p><pre><code>前序遍历的递推公式：\npreOrder(r) = print r-&gt;preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)\n\n中序遍历的递推公式：\ninOrder(r) = inOrder(r-&gt;left)-&gt;print r-&gt;inOrder(r-&gt;right)\n\n后序遍历的递推公式：\npostOrder(r) = postOrder(r-&gt;left)-&gt;postOrder(r-&gt;right)-&gt;print r\n</code></pre><p>有了递推公式，代码写起来就简单多了。这三种遍历方式的代码，我都写出来了，你可以看看。</p><pre><code>void preOrder(Node* root) {\n  if (root == null) return;\n  print root // 此处为伪代码，表示打印root节点\n  preOrder(root-&gt;left);\n  preOrder(root-&gt;right);\n}\n\nvoid inOrder(Node* root) {\n  if (root == null) return;\n  inOrder(root-&gt;left);\n  print root // 此处为伪代码，表示打印root节点\n  inOrder(root-&gt;right);\n}\n\nvoid postOrder(Node* root) {\n  if (root == null) return;\n  postOrder(root-&gt;left);\n  postOrder(root-&gt;right);\n  print root // 此处为伪代码，表示打印root节点\n}\n</code></pre><p>二叉树的前、中、后序遍历的递归实现是不是很简单？你知道<strong>二叉树遍历的时间复杂度是多少</strong>吗？我们一起来看看。</p><p>从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多会被访问两次，所以遍历操作的时间复杂度，跟节点的个数n成正比，也就是说二叉树遍历的时间复杂度是O(n)。</p><h2>解答开篇&amp;内容小结</h2><p>今天，我讲了一种非线性表数据结构，树。关于树，有几个比较常用的概念你需要掌握，那就是：根节点、叶子节点、父节点、子节点、兄弟节点，还有节点的高度、深度、层数，以及树的高度。</p><p>我们平时最常用的树就是二叉树。二叉树的每个节点最多有两个子节点，分别是左子节点和右子节点。二叉树中，有两种比较特殊的树，分别是满二叉树和完全二叉树。满二叉树又是完全二叉树的一种特殊情况。</p><p>二叉树既可以用链式存储，也可以用数组顺序存储。数组顺序存储的方式比较适合完全二叉树，其他类型的二叉树用数组存储会比较浪费存储空间。除此之外，二叉树里非常重要的操作就是前、中、后序遍历操作，遍历的时间复杂度是O(n)，你需要理解并能用递归代码来实现。</p><h2>课后思考</h2><ol>\n<li>\n<p>给定一组数据，比如1，3，5，6，9，10。你来算算，可以构建出多少种不同的二叉树？</p>\n</li>\n<li>\n<p>我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？</p>\n</li>\n</ol><p>欢迎留言和我分享，我会第一时间给你反馈。</p>","comments":[{"had_liked":false,"id":40209,"user_name":"meng","can_delete":false,"product_type":"c1","uid":1252478,"ip_address":"","ucode":"0A497CA3B5C67B","user_header":"","comment_is_top":false,"comment_ctime":1542553814,"is_pvip":false,"replies":[{"id":"14684","content":"👍","user_name":"作者回复","comment_id":40209,"uid":"1190123","ip_address":"","utype":1,"ctime":1542679797,"user_name_real":"gg"}],"discussion_count":28,"race_medal":0,"score":"2325119860950","product_id":100017301,"comment_content":"关于问题1，如果是完全二叉树，老师说过可以放在数组里面，那么问题是否 可以简化为数组内的元素有多少种组合方式，这样的话，就是 n!，不知是否可以这样理解 ？","like_count":542,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429425,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542679797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":558604,"discussion_content":"这特么叫多少个完全二叉树，还多少种，我特么语文老师死的太早了，吐了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648394088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":429425,"ip_address":""},"score":558604,"extra":""},{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":558605,"discussion_content":"题面就不能严谨一点吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648394142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":429425,"ip_address":""},"score":558605,"extra":""}]},{"author":{"id":1330056,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","nickname":"毛启圣","note":"","ucode":"233DA95ED28C11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82831,"discussion_content":"插入构建2插数，第一次插入位置 只有一个根位置，选择数字 6个。因为加入一个节点消耗一个空节点，然后又创造2个空节点，之后插入位置变为2个，选择数变为5个；最后插入位置 6个，选择数1个。\n\n1*6 * 2*5 ... 6*1\n\n（n！）*（n！）\n\n","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1576388009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1189727,"avatar":"https://static001.geekbang.org/account/avatar/00/12/27/5f/f9573d8b.jpg","nickname":"Geek_3a5591","note":"","ucode":"1E47569D818F95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330056,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","nickname":"毛启圣","note":"","ucode":"233DA95ED28C11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280707,"discussion_content":"还要保证没有重复的数字才行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591602701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":82831,"ip_address":""},"score":280707,"extra":""}]},{"author":{"id":1786702,"avatar":"","nickname":"yuxaizff","note":"","ucode":"2730118083D135","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87110,"discussion_content":"如果是完全二叉树，不是组合，而是排列，等于n!","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1576643975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2011221,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b0/55/f6676f1e.jpg","nickname":"郑sandwich没有ch","note":"","ucode":"26EBB8AFB6A77B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339562,"discussion_content":"诠释了完全二叉树一个很好的特点","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1609732868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052521,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/51/a9/741b5ad9.jpg","nickname":"FD","note":"","ucode":"ED396BD322489E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294426,"discussion_content":"感觉类似于爬楼梯问题","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1595892298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1751234,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","nickname":"酸辣土豆丝","note":"","ucode":"0E3E4AFB31E1E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295138,"discussion_content":"思路怪癖，完全二叉树完全确实可以这么搞，排列组合数的排列方式","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1596100939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330056,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","nickname":"毛启圣","note":"","ucode":"233DA95ED28C11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82827,"discussion_content":"不是完全二叉树 阶乘的平方","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576387730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330056,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","nickname":"毛启圣","note":"","ucode":"233DA95ED28C11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295431,"discussion_content":"你题目理解错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596195046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":82827,"ip_address":""},"score":295431,"extra":""},{"author":{"id":1810156,"avatar":"","nickname":"poordickey","note":"","ucode":"2A436EC813AF97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330056,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","nickname":"毛启圣","note":"","ucode":"233DA95ED28C11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330687,"discussion_content":"阶乘 乘以 2的n次方吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606666485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":82827,"ip_address":""},"score":330687,"extra":""}]},{"author":{"id":1132312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","nickname":"o0oi1i","note":"","ucode":"D1F6AD4AAEAFBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258185,"discussion_content":"你咋这么优秀的呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588660949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253128,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/08/14642f9e.jpg","nickname":"相望于江湖","note":"","ucode":"9CCB6F89F92C89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229149,"discussion_content":"第一个问题就算是那六个数构建完全二叉树，也没有那么简单，不是n！\n假设一个满二叉树的深度为n，那么一共有2的（n+1）次方减1个节点。\n所以层数为1的满二叉树需要3个节点，层数为2的满二叉树需要7个节点。\n因此，完全二叉树必定是三层，最后一层有三个节点，依据完全二叉树的定义，最后一层的形状有两种可能。\n综上，排列组合6*5*4*3*2*2=1440种。\n\n推广到n个数中，则需要根据公式确定完全二叉树的倒数第二层深度n-1，然后算出最后一层n又多少个节点，根据节点是奇数还是偶数，并且依据n-1层的个数，来排列组合最后一层形状的个数。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586612022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1381733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/15/65/37d05463.jpg","nickname":"pop","note":"","ucode":"9D81F3ED54321C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1253128,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/08/14642f9e.jpg","nickname":"相望于江湖","note":"","ucode":"9CCB6F89F92C89","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272566,"discussion_content":"你错了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590325396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":229149,"ip_address":""},"score":272566,"extra":""},{"author":{"id":1671917,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","nickname":"akka","note":"","ucode":"FCD0964E761172","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1253128,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/08/14642f9e.jpg","nickname":"相望于江湖","note":"","ucode":"9CCB6F89F92C89","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306882,"discussion_content":"最后一层的3个叶子节点，但是根据完全二叉树的定义（靠左放），只有一种情况！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600410413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":229149,"ip_address":""},"score":306882,"extra":""},{"author":{"id":2440496,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3d/30/9e5e5d4d.jpg","nickname":"巴菲特不非","note":"","ucode":"9E2B911ED5BF08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1253128,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/08/14642f9e.jpg","nickname":"相望于江湖","note":"","ucode":"9CCB6F89F92C89","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353092,"discussion_content":"首先，层数就不符合了，层数为1就是只有根节点，就是需要1一个节点就ok","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615001557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":229149,"ip_address":""},"score":353092,"extra":""}]},{"author":{"id":1179622,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/e6/4b0ddfcf.jpg","nickname":"李飞","note":"","ucode":"4B23FF72AA4BA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294291,"discussion_content":"哈哈，思路不错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595850441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46596,"discussion_content":"关于问题2，我先用的先序遍历，过程中把节点映射到数组下标，再顺序遍历数组，是否可以？\nint arr[7] = {0};\nvoid CengFun(Node * pNode, int nCeng = 1)\n{\nif (!pNode)\n{\nreturn;\n}\narr[nCeng] = pNode->nData;\nCengFun(pNode->pSonL, 2 * nCeng);\nCengFun(pNode->pSonR, 2 * nCeng + 1);\n}","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573186174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1899599,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","nickname":"大毛","note":"","ucode":"93B18287F06706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211420,"discussion_content":"层次遍历需要配合队列实现。你这样的方法我不知道行不行，但是看起来这不就是一个谦虚遍历吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584849314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":46596,"ip_address":""},"score":211420,"extra":""}]},{"author":{"id":1139413,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/d5/1f5c5ab6.jpg","nickname":"大大大熊myeh","note":"","ucode":"4832C2E7CEB151","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285692,"discussion_content":"佩服","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592916631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46522,"discussion_content":"同问啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573177596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366505,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d9/e9/eaa1222d.jpg","nickname":"qazwsx","note":"","ucode":"E8F6D7FD26C34F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37979,"discussion_content":"如果不是完全二叉树呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571708320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1366505,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d9/e9/eaa1222d.jpg","nickname":"qazwsx","note":"","ucode":"E8F6D7FD26C34F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50397,"discussion_content":"不是完全二叉树肯定就没有这么简单了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573715964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37979,"ip_address":""},"score":50397,"extra":""},{"author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1366505,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d9/e9/eaa1222d.jpg","nickname":"qazwsx","note":"","ucode":"E8F6D7FD26C34F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246750,"discussion_content":"不是完全二叉树等于 C[6]1*2^0 * C[5]1*2^1 * C[4]1*2^2 * C[3]1*2^3 * C[2]1*2^4 * C[1]1*2^5=n!*(2^0**2^(n-1))","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587776354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37979,"ip_address":""},"score":246750,"extra":""},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1366505,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d9/e9/eaa1222d.jpg","nickname":"qazwsx","note":"","ucode":"E8F6D7FD26C34F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295432,"discussion_content":"第一题的答案应该就是n!，首先不管是基于指针的链式存储法还是基于数组的顺序存储法，区别只在于内存空间的大小不同，与题目的问题没有任何关系，最终二叉树都可以被串成一条线，所以问题就简化为在一条线上对n个数进行排列，答案当然是n!了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596195089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37979,"ip_address":""},"score":295432,"extra":""}]}]},{"had_liked":false,"id":38144,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1541955539,"is_pvip":false,"discussion_count":23,"race_medal":0,"score":"1101053583315","product_id":100017301,"comment_content":"1.是卡特兰数，是C[n,2n] &#47; (n+1)种形状，c是组合数，节点的不同又是一个全排列，一共就是n!*C[n,2n] &#47; (n+1)个二叉树。可以通过数学归纳法推导得出。<br>2.层次遍历需要借助队列这样一个辅助数据结构。（其实也可以不用，这样就要自己手动去处理节点的关系，代码不太好理解，好处就是空间复杂度是o(1)。不过用队列比较好理解，缺点就是空间复杂度是o(n)）。根节点先入队列，然后队列不空，取出对头元素，如果左孩子存在就入列队，否则什么也不做，右孩子同理。直到队列为空，则表示树层次遍历结束。树的层次遍历，其实也是一个广度优先的遍历算法。","like_count":257,"discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78885,"discussion_content":"总有同学说看不懂二叉树怎么层次遍历，这里我只能把代码贴上了\nprivate List<TreeNode> floorLevelTree(TreeNode root){\n        List<TreeNode> result = new ArrayList<>();\n        TreeNode node = root;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(node);\n        while (!queue.isEmpty()){\n            node = queue.poll();\n            result.add(node);\n            if (node.left != null){\n                queue.offer(node.left);\n            }\n            if (node.right != null){\n                queue.offer(node.right);\n            }\n        }\n        return result;\n    }","likes_number":23,"is_delete":false,"is_hidden":false,"ctime":1576029947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1181206,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","nickname":"滴答丶滴","note":"","ucode":"2093C2948B4327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310961,"discussion_content":"感谢，指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602153901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78885,"ip_address":""},"score":310961,"extra":""}]},{"author":{"id":1189727,"avatar":"https://static001.geekbang.org/account/avatar/00/12/27/5f/f9573d8b.jpg","nickname":"Geek_3a5591","note":"","ucode":"1E47569D818F95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280716,"discussion_content":"卡特兰数是给定N个节点能构成多少种二叉搜索树的答案，但是老师的题目只是说是二叉树就行。卡特兰数h(3) = 5\n但是 ，三个节点的时候，光下面这一种结构就已经有了6种了\n   1     |     1       |    2     |    2    |    3    |    3\n2    3  |  3    2   |  1   3   | 3    1  | 1    2  | 2    1\n不知道是不是我对题目的理解有问题😂","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1591604818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1282162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/90/72/e17e7c61.jpg","nickname":"艺比天高","note":"","ucode":"F52AC257F834A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273310,"discussion_content":"队列辅助太好了，队列就是把一个二叉树转换成数组的形式。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590425752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684811,"avatar":"","nickname":"杨帅","note":"","ucode":"0A558B1BA62E44","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375512,"discussion_content":"国际满二叉树是卡特兰数吧，其他不规则的应该还有更多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621697678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2708370,"avatar":"https://static001.geekbang.org/account/avatar/00/29/53/92/21c78176.jpg","nickname":"小黄鸭","note":"","ucode":"2800E3A723AEBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1684811,"avatar":"","nickname":"杨帅","note":"","ucode":"0A558B1BA62E44","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":389689,"discussion_content":"不是，卡特兰数是指可组成二叉树的形状数，数据排列是阶乘，结果就是二者相乘","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629381280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375512,"ip_address":""},"score":389689,"extra":""}]},{"author":{"id":1985408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4b/80/8f83a5a9.jpg","nickname":"俗人。","note":"","ucode":"1DEEC329F04207","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297950,"discussion_content":"朋友，请问O(1)的层次遍历是怎么实现的呢？可以给点思路吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597117455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1985408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4b/80/8f83a5a9.jpg","nickname":"俗人。","note":"","ucode":"1DEEC329F04207","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305622,"discussion_content":"力扣115，116题","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1600041347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297950,"ip_address":""},"score":305622,"extra":""}]},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295424,"discussion_content":"树的层序遍历和BFS都需要借助队列实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596193829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305621,"discussion_content":"力扣上的115，116题就可以不用队列，但是代码很复杂，没有必要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600041334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295424,"ip_address":""},"score":305621,"extra":""}]},{"author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78860,"discussion_content":"老师也是一脸蒙B 估计看你了你的回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576027244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78869,"discussion_content":"你看不懂就去自己实现一遍再来看。争哥一脸懵逼，你是看不起人家吗？","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1576028084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78860,"ip_address":""},"score":78869,"extra":""},{"author":{"id":1798068,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6f/b4/d465acef.jpg","nickname":"啊噗！","note":"","ucode":"C911E772E1E800","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163285,"discussion_content":"你写的非常清晰了 看不懂的是他自己的问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581067004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78869,"ip_address":""},"score":163285,"extra":""},{"author":{"id":1617609,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ae/c9/daf70d22.jpg","nickname":"谜底","note":"","ucode":"39A4A21B7C4CA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182410,"discussion_content":"已经写的很清晰了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582422936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78869,"ip_address":""},"score":182410,"extra":""}]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46675,"discussion_content":"关于问题2，我先用的先序遍历，过程中把节点映射到数组下标，再顺序遍历数组，是否可以？\nint arr[7] = {0};\nvoid CengFun(Node * pNode, int nCeng = 1)\n{\narr[nCeng] = pNode->nData;\nCengFun(pNode->pSonL, 2 * nCeng);\nCengFun(pNode->pSonR, 2 * nCeng + 1);\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573191964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46978,"discussion_content":"你这样时间和空间都没有优势，时间你遍历了两次树，人家只用乐一次，空间人家o(n)，你是o(2^n)","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573231776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":46675,"ip_address":""},"score":46978,"extra":""},{"author":{"id":1274922,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/2a/c66beb00.jpg","nickname":"山子","note":"","ucode":"39289FB65FB834","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252407,"discussion_content":"借用FIFO思想，使用一个队列即可","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588163502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":46675,"ip_address":""},"score":252407,"extra":""}]},{"author":{"id":1260500,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3b/d4/e4bfb25f.jpg","nickname":"ITACHI","note":"","ucode":"4EE419128ED9E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12953,"discussion_content":"请问是怎么推出来是卡特兰数的呢？看数据特征？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568618407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1258401,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/a1/f3835f01.jpg","nickname":"社会猪","note":"","ucode":"CFF5EA7F247373","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":25033,"discussion_content":"？？？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570374166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":14368,"ip_address":""},"score":25033,"extra":""},{"author":{"id":1274922,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/2a/c66beb00.jpg","nickname":"山子","note":"","ucode":"39289FB65FB834","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1260500,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3b/d4/e4bfb25f.jpg","nickname":"ITACHI","note":"","ucode":"4EE419128ED9E8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252408,"discussion_content":"数组，二叉树，应该是n阶乘","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588163505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":12953,"ip_address":""},"score":252408,"extra":""}]}]},{"had_liked":false,"id":40107,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1542504068,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"650082565764","product_id":100017301,"comment_content":"第一题： <br>确定两点：<br>1）n个数，即n个节点，能构造出多少种不同形态的树？<br>2）n个数，有多少种不同的排列？<br>当确定以上两点，将【1)的结果】乘以 【2)的结果】，即为最终的结果。<br>但是有一个注意的点： 如果n中有相等的数，产生的总排列数就不是n！了哟<br><br>通过这一题，我学到了【卡塔兰数】：https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Catalan_number<br><br>第二题：<br>层序遍历，借用队列辅助即可，根节点先入队列，然后循环从队列中pop节点，将pop出来的节点的左子节点先入队列，右节点后入队列，依次循环，直到队列为空，遍历结束。<br><br>leetcode上有个类似的题目，链接为：https:&#47;&#47;leetcode.com&#47;problems&#47;binary-tree-level-order-traversal&#47;<br>Java代码如下：<br>&#47;**<br> * Definition for a binary tree node.<br> * public class TreeNode {<br> *     int val;<br> *     TreeNode left;<br> *     TreeNode right;<br> *     TreeNode(int x) { val = x; }<br> * }<br> *&#47;<br>class Solution {<br>    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {<br>        if (root == null) return new ArrayList&lt;&gt;(0);<br>        <br>        List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();<br>        <br>        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;();<br>        queue.offer(root); <br>        <br>        Queue&lt;TreeNode&gt; curLevelNodes  = new LinkedList&lt;TreeNode&gt;();<br>        <br>        while (!queue.isEmpty()) {<br>            TreeNode node = queue.poll();<br>            curLevelNodes.offer(node);<br>            <br>            if (queue.isEmpty()) {<br>                List&lt;Integer&gt; list = new ArrayList&lt;&gt;(curLevelNodes.size());<br>                while (!curLevelNodes.isEmpty()) {<br>                    TreeNode curNode = curLevelNodes.poll();<br>                    list.add(curNode.val);<br>                    <br>                    if (curNode.left != null) {<br>                        queue.offer(curNode.left);    <br>                    }<br>                    <br>                    if (curNode.right != null) {<br>                        queue.offer(curNode.right);<br>                    }<br>                    <br>                }<br>                result.add(list);<br>            }<br>        }<br>        <br>        <br>        return result;<br>    }<br>    <br>}<br>","like_count":151,"discussions":[{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46701,"discussion_content":"C++代码：\nvector<vector<int>> levelOrder(TreeNode* root) \n    {\n        vector<vector<int>> vecRes;\n        if (!root)\n        {\n            return vecRes;\n        }\n        vector<int> vecTemp;\n        queue<TreeNode *> queueT1;\n        queueT1.push(root);\n        int nQueueSize = queueT1.size();\n        while (nQueueSize > 0)\n        {\n            for (int i = 0; i< nQueueSize; ++i)\n            {\n                TreeNode * pQueue = queueT1.front();\n                vecTemp.push_back(pQueue->val);\n                queueT1.pop();\n                if (pQueue->left)\n                {\n                    queueT1.push(pQueue->left);\n                }\n                if (pQueue->right)\n                {\n                    queueT1.push(pQueue->right);\n                }\n            }\n            nQueueSize = queueT1.size();\n            vecRes.push_back(vecTemp);\n            vecTemp.clear();\n        }\n        return vecRes;\n    }","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573196386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1257205,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erloYzyia2hRy19E3aCtc0pf10MiaGmzEcXw8UZ3jC3LAibD8icWAFVCXGAlAic3mpjBUrHvyreyhAjIFw/132","nickname":"会飞的鱼","note":"","ucode":"BA3FC4E0BF7B39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44321,"discussion_content":"建议有加注释的习惯","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572942571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541592,"discussion_content":"层序遍历可以用 size，不用再定义一个 curLevelNodes","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640478740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1862316,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/6a/ac/b1738d6b.jpg","nickname":"杨振泽","note":"","ucode":"1666FEB0309BB7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388291,"discussion_content":"插眼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628683828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244289,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/81/19d8c63a.jpg","nickname":"曾涤先生","note":"","ucode":"79FA56C7652817","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1722,"discussion_content":"必须顶一顶啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562846700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":41571,"user_name":"言志","can_delete":false,"product_type":"c1","uid":1122185,"ip_address":"","ucode":"4ABEB6ABB3A6CC","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/89/de5b1fab.jpg","comment_is_top":false,"comment_ctime":1542807555,"is_pvip":false,"replies":[{"id":"14966","content":"👍","user_name":"作者回复","comment_id":41571,"uid":"1190123","ip_address":"","utype":1,"ctime":1542851520,"user_name_real":"gg"}],"discussion_count":4,"race_medal":0,"score":"499759013891","product_id":100017301,"comment_content":"1、既然是数组了，说明是完全二叉树，应该有n的阶乘个组合。<br>2、二叉树按层遍历，可以看作以根结点为起点，图的广度优先遍历的问题。","like_count":117,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429846,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542851520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000004,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/44/d3d67640.jpg","nickname":"Hills录","note":"","ucode":"779020947ACABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40032,"discussion_content":"题目说的是一组数据，并没有说是数组","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1572064271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1347740,"avatar":"https://static001.geekbang.org/account/avatar/00/14/90/9c/53d0f906.jpg","nickname":"黄豆豆","note":"","ucode":"5D47A4E3BAD3D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567926,"discussion_content":"还没讲到图，你说这？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651029533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1798979,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/73/43/ae139b1f.jpg","nickname":"博","note":"","ucode":"F7CA69FF5D09BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212782,"discussion_content":"嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585014884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90164,"user_name":"Renext","can_delete":false,"product_type":"c1","uid":1020838,"ip_address":"","ucode":"3C4418F7E86CD6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","comment_is_top":false,"comment_ctime":1556437402,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"413873297818","product_id":100017301,"comment_content":"我看评论有人误解 文章所说的 完全二叉树--“最后一层的叶子节点都靠左排列。”然而图例中 I 节点明明是右节点，怎么就被称作完全二叉树？其实刚开始我也理解错了。这里说的 “最后一层的叶子节点都靠左排列”不是最后一层的子节点是左节点，而是指最后一层的子节点，从 左数到右是连续，中间没有断开，缺少节点（如图例H、I、J是连续的）。结合下文所说的基于数组的顺序存储法，可以知道完全二叉树是不会浪费内存的。其实简单理解，完全是为了省内存而提出这样的概念","like_count":96,"discussions":[{"author":{"id":1710960,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","nickname":"谭方敏","note":"","ucode":"728DC7ECB7C902","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213848,"discussion_content":"数组就是连续性的，所以尽量确保要么左右节点都有，如果少一个，也尽量少右节点，而不是少了左节点，多了右节点，这样存储的时候，就会存在非连续性，利用数组的顺序存储优先就荡然无存了.","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1585127533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1686409,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/89/c080540d.jpg","nickname":"红桃K-","note":"","ucode":"2B6B71EEF1F07F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190657,"discussion_content":"这个点真的太容易误解了，我要是看不到你的评论我能郁闷一天","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1582968560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1133055,"avatar":"https://static001.geekbang.org/account/avatar/00/11/49/ff/34a47dca.jpg","nickname":"4567890","note":"","ucode":"23BC97FD1DADF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1686409,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/89/c080540d.jpg","nickname":"红桃K-","note":"","ucode":"2B6B71EEF1F07F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218141,"discussion_content":"其实按照以前教材上的理解就行了，就是完全二叉树是和满二叉树前n个节点一一对应的~~这个更好理解~~","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1585623657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":190657,"ip_address":""},"score":218141,"extra":""},{"author":{"id":1243025,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f7/91/27401a3f.jpg","nickname":"kd叛逆","note":"","ucode":"F8870FBA8BB131","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1133055,"avatar":"https://static001.geekbang.org/account/avatar/00/11/49/ff/34a47dca.jpg","nickname":"4567890","note":"","ucode":"23BC97FD1DADF0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311116,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602227860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":218141,"ip_address":""},"score":311116,"extra":""},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1133055,"avatar":"https://static001.geekbang.org/account/avatar/00/11/49/ff/34a47dca.jpg","nickname":"4567890","note":"","ucode":"23BC97FD1DADF0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334868,"discussion_content":"何为一一对应，如何把编号为9的节点去掉，应该也是完全二叉树吧，那这里的一一对应从何谈起，中间缺少了编号为9的节点I，直接就到了编号为10的节点J。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608014467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":218141,"ip_address":""},"score":334868,"extra":""}]},{"author":{"id":1421584,"avatar":"https://static001.geekbang.org/account/avatar/00/15/b1/10/0748204e.jpg","nickname":"吃鱼的Simon","note":"","ucode":"8C38441CDE0D28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382640,"discussion_content":"太麻烦了，总结起来就是：1、倒数第二层全满。2、倒数第一层从最左侧节点连续排列。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1625651651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521486,"avatar":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","nickname":"知行合一","note":"","ucode":"2B8E634FC4CFB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370607,"discussion_content":"完全二叉树，除了浪费一个0位置的空间，再多浪费一个都不属于完全二叉树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619484903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365414,"discussion_content":"文中确实没说清楚，例子也不够好，需要另行查找资料","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617797234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334870,"discussion_content":"其实这里面对于&#34;靠左排列”的主要问题是，最后一层的第一个节点一定要是倒数第二层的第一个节点吗？如果不是，还是完全二叉树吗？如果不是这样，也是全部左叶子节点，那还算是完全二叉树吗？主要是这些问题要弄清楚，你们说了半天，还是没有解释清楚这些问题！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608014714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42857,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1543063387,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"276420970331","product_id":100017301,"comment_content":"树，总共包含4节内容。具体如下：<br>1.树、二叉树<br>2.二叉查找树<br>3.平衡二叉树、红黑树<br>4.递归树<br><br>一、树<br>1.树的常用概念<br>根节点、叶子节点、父节点、子节点、兄弟节点，还有节点的高度、深度以及层数，树的高度。<br>2.概念解释<br>节点：树中的每个元素称为节点<br>父子关系：相邻两节点的连线，称为父子关系<br>根节点：没有父节点的节点<br>叶子节点：没有子节点的节点<br>父节点：指向子节点的节点<br>子节点：被父节点指向的节点<br>兄弟节点：具有相同父节点的多个节点称为兄弟节点关系<br>节点的高度：节点到叶子节点的最长路径所包含的边数<br>节点的深度：根节点到节点的路径所包含的边数<br>节点的层数：节点的深度+1（根节点的层数是1）<br>树的高度：等于根节点的高度<br>二、二叉树<br>1.概念<br>①什么是二叉树？<br>每个节点最多只有2个子节点的树，这两个节点分别是左子节点和右子节点。<br>②什么是满二叉树？<br>有一种二叉树，除了叶子节点外，每个节点都有左右两个子节点，这种二叉树叫做满二叉树。<br>③什么是完全二叉树？<br>有一种二叉树，叶子节点都在最底下两层，最后一层叶子节都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做完全二叉树。<br>2.完全二叉树的存储<br>①链式存储<br>每个节点由3个字段，其中一个存储数据，另外两个是指向左右子节点的指针。我们只要拎住根节点，就可以通过左右子节点的指针，把整棵树都串起来。这种存储方式比较常用，大部分二叉树代码都是通过这种方式实现的。<br>②顺序存储<br>用数组来存储，对于完全二叉树，如果节点X存储在数组中的下标为i，那么它的左子节点的存储下标为2*i，右子节点的下标为2*i+1，反过来，下标i&#47;2位置存储的就是该节点的父节点。注意，根节点存储在下标为1的位置。完全二叉树用数组来存储时最省内存的方式。<br>3.二叉树的遍历<br>①前序遍历：对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。<br>②中序遍历：对于树中的任意节点来说，先打印它的左子树，然后再打印它的本身，最后打印它的右子树。<br>③后序遍历：对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印它本身。<br>前序遍历的递推公式：<br>preOrder(r) = print r-&gt;preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)<br>中序遍历的递推公式：<br>inOrder(r) = inOrder(r-&gt;left)-&gt;print r-&gt;inOrder(r-&gt;right)<br>后序遍历的递推公式：<br>postOrder(r) = postOrder(r-&gt;left)-&gt;postOrder(r-&gt;right)-&gt;print r<br>时间复杂度：3种遍历方式中，每个节点最多会被访问2次，所以时间复杂度是O(n)。<br>三、思考<br>1.二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？<br>2.给定一组数据，比如1，3，5，6，9，10.你来算算，可以构建出多少种不同的二叉树？<br>3.我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另一种遍历方式，也就是按层遍历，你知道如何实现吗？<br>4.如何用循环实现二叉树的遍历？","like_count":64,"discussions":[{"author":{"id":1066430,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","nickname":"3W1H","note":"","ucode":"F6B4864128103C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90957,"discussion_content":"这种笔记类的东西 建议还是别发评论了！这么老长 刷屏呢哈","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576804172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1753115,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/c0/1b/319baf9d.jpg","nickname":"ZMH.","note":"","ucode":"D45D6CEDFDF8F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066430,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","nickname":"3W1H","note":"","ucode":"F6B4864128103C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227032,"discussion_content":"你事真多,你不看也就划一下的事..在这找什么存在感","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1586446875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90957,"ip_address":""},"score":227032,"extra":""},{"author":{"id":1020492,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/4c/40783447.jpg","nickname":"何骧","note":"","ucode":"11DCC74CE2F300","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066430,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","nickname":"3W1H","note":"","ucode":"F6B4864128103C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292710,"discussion_content":"我觉得挺好啊，复制下来做成笔记不好吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595313444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90957,"ip_address":""},"score":292710,"extra":""},{"author":{"id":1304564,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f4/482e3413.jpg","nickname":"土豆-gavin               ༽","note":"","ucode":"15D24B71468A2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066430,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","nickname":"3W1H","note":"","ucode":"F6B4864128103C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312769,"discussion_content":"我也觉得这种没必要发出来，抄下来有意思吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602812133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":90957,"ip_address":""},"score":312769,"extra":""}]},{"author":{"id":1119116,"avatar":"https://static001.geekbang.org/account/avatar/00/11/13/8c/c86340ca.jpg","nickname":"巴西","note":"","ucode":"6E68AA02011541","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70193,"discussion_content":"大佬,24讲的笔记你忘写了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575335882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1439568,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","nickname":",","note":"","ucode":"191431A878D7B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296650,"discussion_content":"课代表牛逼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596613989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295482,"discussion_content":"二叉树遍历的非递归实现可以借助栈，可以参考我实现的python代码：https://github.com/lijinze9456yy000/algorithm_practice，里面包含了二叉树前、中、后和层序遍历的递归实现和非递归实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596204888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2828130,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/27/62/81063dc5.jpg","nickname":"Darcy","note":"","ucode":"C97EDC40B62760","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577809,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656345329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2282907,"avatar":"","nickname":"zzzaqqqq","note":"","ucode":"4E188E6AD498D2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384136,"discussion_content":"总结真精髓，码了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626400727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1247951,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBWjSjrBYr4DpMktO8XeRnpXeJFLWP0kpiaKFlsoeOoCN87PUDfbqicjPibuWIH4rdyoa0hE1iannzVKg/132","nickname":"lyh","note":"","ucode":"A35C3AEE94C37E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6627,"discussion_content":"完全二叉树:\n叶子节点都在最底下两层，最后一层叶子节都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做完全二叉树。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567003174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1199969,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4f/61/00083e41.jpg","nickname":"小白","note":"","ucode":"7ACE14C0C4AE61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1247951,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBWjSjrBYr4DpMktO8XeRnpXeJFLWP0kpiaKFlsoeOoCN87PUDfbqicjPibuWIH4rdyoa0hE1iannzVKg/132","nickname":"lyh","note":"","ucode":"A35C3AEE94C37E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287872,"discussion_content":"完全二叉树是和满二叉树前n个节点一一对应的，这句话比最后一层叶子节都靠左排列更好理解，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593574568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6627,"ip_address":""},"score":287872,"extra":""},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1199969,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4f/61/00083e41.jpg","nickname":"小白","note":"","ucode":"7ACE14C0C4AE61","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295426,"discussion_content":"我反而觉得老师的更好理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596194150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287872,"ip_address":""},"score":295426,"extra":""}]}]},{"had_liked":false,"id":44940,"user_name":"Laughing_Lz","can_delete":false,"product_type":"c1","uid":1251342,"ip_address":"","ucode":"7A7445E96F2978","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/0e/39307052.jpg","comment_is_top":false,"comment_ctime":1543515402,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"207701945610","product_id":100017301,"comment_content":"&#47;**<br>\t * 层次遍历二叉树<br>\t * <br>\t * @param root<br>\t *&#47;<br>\tpublic static void levelOrder(Node root) {<br>\t\tif (root == null) {<br>\t\t\treturn;<br>\t\t}<br>\t\tLinkedList&lt;Node&gt; queue = new LinkedList&lt;Node&gt;();<br>\t\tqueue.add(root);<br>\t\twhile (!queue.isEmpty()) {<br>\t\t\tNode currentNode = queue.poll();<br>\t\t\tSystem.out.print(currentNode.getValue() + &quot; &quot;);<br>\t\t\tif (currentNode.getLeft() != null) {<br>\t\t\t\tqueue.add(currentNode.getLeft());<br>\t\t\t}<br>\t\t\tif (currentNode.getRight() != null) {<br>\t\t\t\tqueue.add(currentNode.getRight());<br>\t\t\t}<br>\t\t}<br>\t}","like_count":48,"discussions":[{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5408,"discussion_content":"真jb吊～～～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566232156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2715388,"avatar":"","nickname":"Geek8535","note":"","ucode":"D1919541632C95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530700,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637129952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407933,"discussion_content":"画图秒懂，大佬真厉害。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635153343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117584,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0d/90/d0ef7611.jpg","nickname":"安新亮","note":"","ucode":"E0FB186E06E3A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374081,"discussion_content":"五分钟才理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620992066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030449,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b9/31/636e9007.jpg","nickname":"melo","note":"","ucode":"BF381B18E75867","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297533,"discussion_content":"大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596960946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":62499,"user_name":"天二","can_delete":false,"product_type":"c1","uid":1100092,"ip_address":"","ucode":"F03EF223F2A4AE","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/3c/7d9b3baa.jpg","comment_is_top":false,"comment_ctime":1548073220,"is_pvip":false,"replies":[{"id":"24172","content":"第一次遍历到的时候算一次。递归返回的时候再一次。不过，这些说法都很笼统，你只要知道每个节点都被访问了一次，并且被访问的次数是常数次就可以了。","user_name":"作者回复","comment_id":62499,"uid":"1190123","ip_address":"","utype":1,"ctime":1550479646,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"177641732356","product_id":100017301,"comment_content":"老师 你在计算便利二叉树时间复杂度的时候说，“从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多会被访问两次”， 我想知道都是哪两次呢？ 可否帮忙解惑，从图中没看出来","like_count":41,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437238,"discussion_content":"第一次遍历到的时候算一次。递归返回的时候再一次。不过，这些说法都很笼统，你只要知道每个节点都被访问了一次，并且被访问的次数是常数次就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550479646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":41502,"user_name":"痛改前非","can_delete":false,"product_type":"c1","uid":1005412,"ip_address":"","ucode":"4509CB0BB892EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/64/064dc124.jpg","comment_is_top":false,"comment_ctime":1542795198,"is_pvip":false,"replies":[{"id":"14968","content":"有些人学得慢 或者工作耽搁了。一直追着最新的看的不多","user_name":"作者回复","comment_id":41502,"uid":"1190123","ip_address":"","utype":1,"ctime":1542851952,"user_name_real":"gg"}],"discussion_count":12,"race_medal":0,"score":"147571683262","product_id":100017301,"comment_content":"现在评论的小伙伴少了好多，坚持学习的小伙伴是不是越来越少了？大家的热情呢？💪","like_count":34,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429823,"discussion_content":"有些人学得慢 或者工作耽搁了。一直追着最新的看的不多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542851952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/93/c3fb8566.jpg","nickname":"ProcessIsTheKey","note":"","ucode":"BE02EFD75F7D98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553453,"discussion_content":"你没看错 这条留言来自2022年2月26日","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1645888743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303574,"discussion_content":"呵呵","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599301975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1380312,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0f/d8/9286b272.jpg","nickname":"leetcode","note":"","ucode":"3B8C3668A0DE74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274370,"discussion_content":"你没看错  这条留言来自2020年5月27日      哈哈哈哈哈  ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590575442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1853171,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/46/f3/b2db6171.jpg","nickname":"许康","note":"","ucode":"2E9E241DE2D9BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586940,"discussion_content":"2022-09-08","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662621800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572985,"discussion_content":"啊这","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653115563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1698674,"avatar":"https://static001.geekbang.org/account/avatar/00/19/eb/72/31a62cf4.jpg","nickname":"Z.Y.Li","note":"","ucode":"7A92617E9B9A23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534423,"discussion_content":"打卡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638185592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2636178,"avatar":"https://static001.geekbang.org/account/avatar/00/28/39/92/88ed94f2.jpg","nickname":"YX","note":"","ucode":"CC108CCE845EAE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414780,"discussion_content":"2021-11-14","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636896021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1831099,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/f0/bb/f7025f42.jpg","nickname":"大祭司","note":"","ucode":"06479A180B8DED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387858,"discussion_content":"2021-08-09 打卡\n 还有小伙伴吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628474942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383403,"discussion_content":"你没看错 这条留言来自2021年7月12日 哈哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626079999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1463339,"avatar":"https://static001.geekbang.org/account/avatar/00/16/54/2b/59acbb29.jpg","nickname":".","note":"","ucode":"D9EAB6FF5C430B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340589,"discussion_content":"2021 1 8哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610069091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305523,"discussion_content":"打卡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599982100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76657,"user_name":"涂","can_delete":false,"product_type":"c1","uid":1247775,"ip_address":"","ucode":"DC9F3B99A0B4E5","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/1f/cfeb036d.jpg","comment_is_top":false,"comment_ctime":1552658497,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"130401677377","product_id":100017301,"comment_content":"前、中、后序遍历，主要是针对父节点的打印顺序。父左右为前序，左父右为中序，左右父为后序","like_count":30,"discussions":[{"author":{"id":1195044,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/24/ceac00af.jpg","nickname":"dan","note":"","ucode":"515A904FB55FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55981,"discussion_content":"父在前为前序\n        中    中\n         后   后\n\n\n左始终在右前","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1574419641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1195044,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/24/ceac00af.jpg","nickname":"dan","note":"","ucode":"515A904FB55FFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334873,"discussion_content":"你这个才是正解，不过为什么左节点一点在右节点前面遍历，不知道是怎么定下这个顺序的，难道是按照人正常的习惯，一般不管是正常阅读书籍还是看事物，一般从做看到右，哈哈！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608015449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":55981,"ip_address":""},"score":334873,"extra":""}]},{"author":{"id":1466121,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5f/09/2ec44412.jpg","nickname":"Qfeng","note":"","ucode":"1248E70012BBA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85392,"discussion_content":"哈哈，我也是这么理解的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576544099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2813766,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erX65FTLyn3JMbqLKdFkkv9okdx7qmVIibl1zKB7pnCIbtElSgibULma5cTsSMyS5KGMBy5MRdXtN8g/132","nickname":"小竹子","note":"","ucode":"D20F56114426EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532518,"discussion_content":"我的记忆方式与这个类似，根左右， 左根右，左右根","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637634230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","nickname":"chris","note":"","ucode":"6663E3E09457E3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194046,"discussion_content":"这样比较好记！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583167824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230325,"user_name":"筑梦","can_delete":false,"product_type":"c1","uid":1108832,"ip_address":"","ucode":"702137FB9EF79B","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/60/17f279cc.jpg","comment_is_top":false,"comment_ctime":1593347441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"96082627953","product_id":100017301,"comment_content":"笔试常见练习题<br>leetcode：94、105、106、889","like_count":22},{"had_liked":false,"id":65464,"user_name":"极明","can_delete":false,"product_type":"c1","uid":1239774,"ip_address":"","ucode":"924F8FEE5D5737","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epVZiaZL3Wicq92boVHYcrzCEl7XN1pCeh1nFibt254Kf38P6p4AqbAqnwe1b3cIQpDWCib16A9aF709g/132","comment_is_top":false,"comment_ctime":1549376319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"91743689535","product_id":100017301,"comment_content":"感谢老师让我明白了为什么需要完全二叉树","like_count":21},{"had_liked":false,"id":38405,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1542031405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78851442733","product_id":100017301,"comment_content":"1 递归地理解一下：按住根节点，如果有k个左节点，则有n-k-1个右节点，分步乘法，f(n) = f(k) * f(n - k - 1) ，k可能性从0 到 n - 1 ,分步加法： f(n) = f(0)f(n-1) + ... + f(n-1)f(0) ，怎么计算该递推公式呢？参考Catalon数","like_count":18},{"had_liked":false,"id":50336,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1544954827,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"74559398859","product_id":100017301,"comment_content":"我看很多人计算第一题都按照完全二叉树计算的，实际上并没有说完全二叉树，所以n阶乘肯定不对吧，只要是二叉树按照文中规则肯定可以按照数组存储，六个数字，前面五个数字最多浪费四个位置加上本身存储五个就是九个位置，然后六可以浪费一个，那就是一共十个位置，六个数字，有多少种放法就有多少种二叉树。","like_count":17,"discussions":[{"author":{"id":1583499,"avatar":"https://static001.geekbang.org/account/avatar/00/18/29/8b/3629c0f8.jpg","nickname":"游山行人","note":"","ucode":"E559BD0A3C6484","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220132,"discussion_content":"如果每个节点都是父节点的右节点，实际上浪费的空间很大，这个方法行不通的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585837840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193468,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","nickname":"saber","note":"","ucode":"D02F8D129DB41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5104,"discussion_content":"思路很棒，但是中间很多情况是不行的，我想到的以下两点\n1）四个空位置不能连续在一起，也不能放在最后的位置\n2）空位置放置时，如果数组中 i 为空，那么后面的 2*i 和 2*i + 1 也只能为空\n结合上面两点，计算就比较复杂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565947316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62925,"user_name":"Jamin","can_delete":false,"product_type":"c1","uid":1236792,"ip_address":"","ucode":"0449B773FE4D21","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJhyK1QiaqyNox3wr3GmBibziau9pPDxN5HjYBpYCd7ytDmLNtJ1cKKaq2WYFF3jpRSg6638M8NFDf2w/132","comment_is_top":false,"comment_ctime":1548208020,"is_pvip":false,"replies":[{"id":"22480","content":"那就按照我的来吧：）我觉得我定义的很有道理：）","user_name":"作者回复","comment_id":62925,"uid":"1190123","ip_address":"","utype":1,"ctime":1548405305,"user_name_real":"gg"}],"discussion_count":3,"race_medal":0,"score":"65972717460","product_id":100017301,"comment_content":"关于树的高度和深度 目前没有统一的规范，有的是从0开始计算，有的是从1开始","like_count":15,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437404,"discussion_content":"那就按照我的来吧：）我觉得我定义的很有道理：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1548405305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230233,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c5/99/78374698.jpg","nickname":"老马","note":"","ucode":"12D1AA05135F43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531206,"discussion_content":"怪不得我看二叉树节点数量公式总觉得不对劲，他们说的深度应该是这里的层数吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637247601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","nickname":"o0oi1i","note":"","ucode":"D1F6AD4AAEAFBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258186,"discussion_content":"怎么给作者点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588661032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44049,"user_name":"星君","can_delete":false,"product_type":"c1","uid":1132467,"ip_address":"","ucode":"4DECEC14EF8226","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/b3/4a76fccf.jpg","comment_is_top":false,"comment_ctime":1543366504,"is_pvip":false,"replies":[{"id":"15779","content":"专栏有自己的定位的 太难没啥用的 不怎么会讲的 自己研究吧","user_name":"作者回复","comment_id":44049,"uid":"1190123","ip_address":"","utype":1,"ctime":1543404207,"user_name_real":"gg"}],"discussion_count":3,"race_medal":0,"score":"61672908648","product_id":100017301,"comment_content":"应该讲讲非递归遍历啊，递归遍历太简单，后序非递归遍历才是难点","like_count":14,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430610,"discussion_content":"专栏有自己的定位的 太难没啥用的 不怎么会讲的 自己研究吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543404207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575445,"discussion_content":"同意老师的说法，这是一门对初学者友好的课。如果太难，大家都学不下去，没有意义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654837710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1454534,"avatar":"https://static001.geekbang.org/account/avatar/00/16/31/c6/f08d1ac5.jpg","nickname":"康","note":"","ucode":"4B1D729C903D1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545464,"discussion_content":"可以类比栈的先进后出思想，去研究非递归的遍历，不管是非递归还是递归，思路都是一样的，只不过实现方式不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641969161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104837,"user_name":"虎爷","can_delete":false,"product_type":"c1","uid":1024907,"ip_address":"","ucode":"42E8339F183055","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/8b/e7389cf5.jpg","comment_is_top":false,"comment_ctime":1560851028,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"57395425876","product_id":100017301,"comment_content":"父子兄跟叶<br>高深共几层<br>抬头看天空<br>低头探深坑<br>敢问何处去<br>此处落几层<br><br><br>高度（抬头看天空，站在地平面。所以0开始）<br>深度（低头探深坑，站在地平面。所以0开始）<br>层数（此处落几层，站在这层楼，所以1开始）<br><br>","like_count":13,"discussions":[{"author":{"id":1024907,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/8b/e7389cf5.jpg","nickname":"虎爷","note":"","ucode":"42E8339F183055","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328364,"discussion_content":"感觉还是太多了，我要再精简一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606127497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2708005,"avatar":"https://static001.geekbang.org/account/avatar/00/29/52/25/185763e4.jpg","nickname":"薇尔莉特","note":"","ucode":"1465A6F3005CA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386581,"discussion_content":"好湿！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627651482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1024907,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/8b/e7389cf5.jpg","nickname":"虎爷","note":"","ucode":"42E8339F183055","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2708005,"avatar":"https://static001.geekbang.org/account/avatar/00/29/52/25/185763e4.jpg","nickname":"薇尔莉特","note":"","ucode":"1465A6F3005CA9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390773,"discussion_content":"哈哈，求不黑，顺口溜而已，方便记忆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630039196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386581,"ip_address":""},"score":390773,"extra":""}]}]},{"had_liked":false,"id":43361,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1543219334,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"40197924998","product_id":100017301,"comment_content":"思考题：<br>1. 一组数能构建多少个二叉树？<br>第一时间想到只要排列位置有改变，那么就应该是新的二叉树。组合排列的公式有点忘记了。。。那么用笨方法：<br>当只有1个数的时候，能构建1个二叉树；2个数时是2个二叉树；3个数有6个二叉树；再看下4个数，原来是24个；最后得出n!<br>2. 层序遍历二叉树：<br>数组和链表的方式都一样。先打印本身的数据，然后将左右节点塞到一个队列中；从队列里取第一个节点打印数据，并将其左右节点再塞到队列，以此类推。","like_count":9,"discussions":[{"author":{"id":1064752,"avatar":"","nickname":"码农翻身的小粉丝","note":"","ucode":"1FB018F749CE84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311224,"discussion_content":"两个数的时候不应该是4个二叉树吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602258002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1064752,"avatar":"","nickname":"码农翻身的小粉丝","note":"","ucode":"1FB018F749CE84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334877,"discussion_content":"三个数的时候，也不是6个二叉树，应该是12个二叉树，分以下情况：\n根结点:(3种情况)\n第二层:（2种情况:1个节点(2种情况)和2个节点(2种情况，左右子节点排列组合)）\n第三层:基于第二层只有1个节点的情况继续，1种情况(只剩下1个节点了)\n\n汇总：3 x（ 2x1+ 2 ） = 12\n      ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608016194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":311224,"ip_address":""},"score":334877,"extra":""},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1064752,"avatar":"","nickname":"码农翻身的小粉丝","note":"","ucode":"1FB018F749CE84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334879,"discussion_content":"你说的应该是是否全部用上节点，这里应该是全部节点都用上了，不全部用上，可以分为:\n用一个节点的情况:(2种)\n用两个节点的情况:2个节点，第一层2个当中选择一个节点，剩下一个节点在第二层，排列组合 ：\n2x1=2个二叉树\n汇总:4种情况\n但如果只考虑全部节点都用上的情况，应该就是2个二叉树！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608016516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":311224,"ip_address":""},"score":334879,"extra":""}]}]},{"had_liked":false,"id":91856,"user_name":"talk is cheap！","can_delete":false,"product_type":"c1","uid":1085329,"ip_address":"","ucode":"3EA15D1CA4CF6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/91/e8fda6fe.jpg","comment_is_top":false,"comment_ctime":1557120857,"is_pvip":false,"replies":[{"id":"32881","content":"是的 没错","user_name":"作者回复","comment_id":91856,"uid":"1190123","ip_address":"","utype":1,"ctime":1557186218,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"31621891929","product_id":100017301,"comment_content":"老师，完全二叉树把最底一层去掉，是不是就是一颗满二叉树呢？","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449059,"discussion_content":"是的 没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557186218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179375,"user_name":"二进制之路","can_delete":false,"product_type":"c1","uid":1008395,"ip_address":"","ucode":"67C84B013147B1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/0b/ad56aeb4.jpg","comment_is_top":false,"comment_ctime":1581992736,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27351796512","product_id":100017301,"comment_content":"一篇总结二叉树的4种遍历方式（含迭代和递归模板）。<br>包括3种深度优先搜索（DFS）和1种广度优先搜索（BFS）。<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;0b5OsnFLLg18Td4CuR51_Q","like_count":6,"discussions":[{"author":{"id":1073947,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/1b/83ac7733.jpg","nickname":"忧天小鸡","note":"","ucode":"A1412BDC108FD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374669,"discussion_content":"棒棒哒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621308600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168681,"user_name":"玉皇大亮","can_delete":false,"product_type":"c1","uid":1019849,"ip_address":"","ucode":"5C4FDF1FDCF8A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/c9/833d5060.jpg","comment_is_top":false,"comment_ctime":1578139669,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27347943445","product_id":100017301,"comment_content":"层序遍历有两种写法：<br>1）递归<br>var levelOrder = function(root){<br>    let result = [] <br>    if (!root) return []<br>    function helper(node, level){<br>         if(result.length === level) {<br>              result.push([])<br>         }<br>         result[level].push(node.val)<br>         if(node.left) helper(node.left, level + 1);<br>         if(node.right) helper(node.right, level + 1);<br>    } <br>    helper(root, 0)<br>    return result;<br>}<br>2) 迭代<br>var levelOrder = function(root){<br>    let result = []<br>    if(!root) return []<br>    let queue = [root], level = 0<br>    while(queue.length &gt; 0) {<br>         result.push([])<br>         let len_level = queue.length<br>         for(let i = 0; i &lt; len_level; i++){<br>              let node = queue.shift()<br>              result[level].push(node.val)<br>              if(node.left) queue.push(node.left)<br>              if(node.right) queue.push(node.right)<br>         }<br>         level++<br>    }   <br>    return result<br>}","like_count":6,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293094,"discussion_content":"这个js我看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595430762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100955,"user_name":"朱龙凯","can_delete":false,"product_type":"c1","uid":1554935,"ip_address":"","ucode":"C43E968179521B","user_header":"https://static001.geekbang.org/account/avatar/00/17/b9/f7/43311858.jpg","comment_is_top":false,"comment_ctime":1559695399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23034531879","product_id":100017301,"comment_content":"通过数组存储二叉树，可以从0开始，左右子节点下标分别是2*i+1和2*i+2","like_count":5},{"had_liked":false,"id":38149,"user_name":"nothing","can_delete":false,"product_type":"c1","uid":1250912,"ip_address":"","ucode":"49058C9095281D","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/60/d6024ae8.jpg","comment_is_top":false,"comment_ctime":1541958583,"is_pvip":false,"replies":[{"id":"13702","content":"1 从图上看是两次<br>2 从生活中的理解来说 应该没有第0层之说 但是有深度为0的说法","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541983775,"ip_address":"","comment_id":38149,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23016795063","product_id":100017301,"comment_content":"后序遍历节点不是最多被访问三次嘛， 还有那个深度我们学的深度和层次是一样的哇","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428623,"discussion_content":"1 从图上看是两次\n2 从生活中的理解来说 应该没有第0层之说 但是有深度为0的说法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541983775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109017,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1561949573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18741818757","product_id":100017301,"comment_content":"一个数据结构需要掌握什么？<br>性质 &amp; 存储方式 &amp; CRD操作 &amp; CRD操作的几种时间复杂度 &amp; CRD操作所需的额外空间复杂度 &amp; 稳定性分析 &amp; 适用场景 &amp; 与其他数据结构的对比 &amp; 常用语言的实现<br><br>二叉树的两种存储方式 ： 链式存储法 &amp; 顺序存储法<br>顺序存储法适合完全二叉树的存储，如堆等数据结构","like_count":4},{"had_liked":false,"id":38243,"user_name":"D→_→M","can_delete":false,"product_type":"c1","uid":1184017,"ip_address":"","ucode":"5EFDE9E2ED2C8B","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/11/52a78856.jpg","comment_is_top":false,"comment_ctime":1541999862,"is_pvip":false,"replies":[{"id":"13811","content":"非递归遍历比较复杂 不建议非得给自己制造学习难度 除非是为了面试。其他的二叉树的代码我会放到github上","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542074166,"ip_address":"","comment_id":38243,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18721869046","product_id":100017301,"comment_content":"老师是否可以在您专栏的github上传一下二叉树这几节的相关代码，还有除了递归遍历二叉树，循环遍历是否也可以讲一下，或者在github上上传一下相关代码，自行研究学习。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428651,"discussion_content":"非递归遍历比较复杂 不建议非得给自己制造学习难度 除非是为了面试。其他的二叉树的代码我会放到github上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542074166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38138,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1541953209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18721822393","product_id":100017301,"comment_content":"按照蹭便利使用队列，广度优先搜索","like_count":4},{"had_liked":false,"id":165215,"user_name":"何沛","can_delete":false,"product_type":"c1","uid":1477145,"ip_address":"","ucode":"5673C580982710","user_header":"https://static001.geekbang.org/account/avatar/00/16/8a/19/a54761af.jpg","comment_is_top":false,"comment_ctime":1577180856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462082744","product_id":100017301,"comment_content":"public static void levelOrder(TreeNode root){<br>        if(root==null) return;<br>        Queue&lt;TreeNode&gt; queue=new LinkedList&lt;&gt;();<br>        queue.add( root);<br>        while(!queue.isEmpty()){<br>            TreeNode node=queue.poll();<br>            System.out.print(node.getData());<br>            if(null!=node.getLeft()){<br>                queue.add(node.getLeft());<br>            }<br>            if(null!=node.getRight()){<br>                queue.add(node.getRight());<br>            }<br>        }<br><br>    }","like_count":3},{"had_liked":false,"id":90870,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1556699678,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"14441601566","product_id":100017301,"comment_content":"  public static void leverOrder(Node n) {<br>    Queue&lt;Node&gt; queue = new Queue&lt;&gt;();<br>    queue.enqueue(n);<br>    while (!queue.isEmpty()) {<br>      Node p = queue.dequeue();<br>      StdOut.println(p);<br>      if (p.left != null) {<br>        queue.enqueue(p.left);<br>      }<br>      if (p.right != null) {<br>        queue.enqueue(p.right);<br>      }<br>    }<br>  }","like_count":3,"discussions":[{"author":{"id":1104407,"avatar":"https://static001.geekbang.org/account/avatar/00/10/da/17/69cca649.jpg","nickname":"旗木卡卡","note":"","ucode":"2C05BFE91D6892","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5685,"discussion_content":"广度优先遍历二叉树。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566437302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38432,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1542034769,"is_pvip":false,"replies":[{"id":"13806","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542073506,"ip_address":"","comment_id":38432,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14426936657","product_id":100017301,"comment_content":"刚刚思考了完全二叉树的定义 叶子结点必须要在最后两层 如果不在最后两层的话通过数组顺序存储也会浪费空间吧","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428699,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542073506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159592,"user_name":"元","can_delete":false,"product_type":"c1","uid":1717444,"ip_address":"","ucode":"4576E15018EEA3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/34/c4/08d9f349.jpg","comment_is_top":false,"comment_ctime":1575699113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165633705","product_id":100017301,"comment_content":"如果用数组存储，那么遍历数组不就是按层遍历么","like_count":2},{"had_liked":false,"id":53060,"user_name":"KCN","can_delete":false,"product_type":"c1","uid":1016765,"ip_address":"","ucode":"50AE501877C63F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/MG9rO83S1iaqcKXBugM4jB9bg1UR5waA4nibTFrlg6uLZ5mOZaEEwXNFeu90aCEgSicBLYXicDhVljTzdUIEopIwvQ/132","comment_is_top":false,"comment_ctime":1545577017,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10135511609","product_id":100017301,"comment_content":"根据维基 (https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Binary_tree#Types_of_binary_trees) 里的定义，编号 2 的树应该是一个完美二叉树 (perfect binary tree) 而不是满二叉树 (full binary tree) 吧？还是只是翻译的锅？<br><br>还有完全二叉树的「最后一层靠左排列」我还是不是很理解。是说从左往右满排列，只有最后一个右节点可以缺失呢？还是说<br>            A<br>        &#47;       \\  <br>       B          C  <br>     &#47;  \\        &#47;  \\<br>   D    E     F     G<br> &#47;  \\  &#47;    &#47;<br>H   J K   L<br>这样的也算完全二叉树？","like_count":2,"discussions":[{"author":{"id":1800714,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7a/0a/827f50fc.jpg","nickname":"socketer","note":"","ucode":"80DA82FAE649CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337380,"discussion_content":"结论：不是完全二叉树。原因：E节点没有右子树。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608886211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334885,"discussion_content":"同问，就是最后一层这个节点左排列说的不够具体，是否要严格从最左边第一个节点开始，还是第一个节点可以没有，只要是左排列，这个地方太多歧义了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608018380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543652,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/e4/1137270e.jpg","nickname":"Aaron","note":"","ucode":"7679D1B911FC3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345454,"discussion_content":"最后一层左排列，意思是：最后一层，从第一个节点开始，从左往右连续排列。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611721833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40807,"user_name":"🔥","can_delete":false,"product_type":"c1","uid":1113599,"ip_address":"","ucode":"0B37A9D473C306","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/ff/37543d35.jpg","comment_is_top":false,"comment_ctime":1542678558,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10132613150","product_id":100017301,"comment_content":"老师 我想问一下，数组存储的时候跟节点为啥是在下标为1的位置而不是0","like_count":2,"discussions":[{"author":{"id":1717444,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/34/c4/08d9f349.jpg","nickname":"元","note":"","ucode":"4576E15018EEA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74870,"discussion_content":"没认真学吧。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575699416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122452,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/94/2ab97f05.jpg","nickname":"Just顾","note":"","ucode":"6AFA92D5BF0573","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":946,"discussion_content":"为了方便使用2*i计算左节点位置,如果根节点下标为0,左节点位置2*0=0","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562199502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177430,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f7/56/b82eeac7.jpg","nickname":"champ可口可乐了","note":"","ucode":"EA75C67E9124C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283684,"discussion_content":"都一样，也可以存在0的位置，这时候，左子节点的下标为2*i+1，右子节点的下标为2*i+2,父节点的下标为Math.floor((i-1)/2)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592324825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38145,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1541955567,"is_pvip":false,"replies":[{"id":"13699","content":"树的形态不一样 数字排布不一样 只要两者满足其一就表示不同的二叉树","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541983602,"ip_address":"","comment_id":38145,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10131890159","product_id":100017301,"comment_content":"感觉第一题题目没有描述清楚，比如给的数字是按照层序遍历还是插入二叉树的顺序","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428621,"discussion_content":"树的形态不一样 数字排布不一样 只要两者满足其一就表示不同的二叉树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541983602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285016,"user_name":"Karson","can_delete":false,"product_type":"c1","uid":1008100,"ip_address":"","ucode":"E0286BF6CA7281","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/e4/db3f783b.jpg","comment_is_top":false,"comment_ctime":1616580002,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5911547298","product_id":100017301,"comment_content":"一个N刷客的源码：<br>   &#47;**<br>     * 层序遍历<br>     *&#47;<br>    public void levelOrderTraversal() {<br>        if (root == null) return;<br><br>        Queue&lt;Node&lt;E&gt;&gt; queue = new LinkedList&lt;&gt;();<br>        queue.offer(root);<br><br>        while(!queue.isEmpty()) {<br>            Node&lt;E&gt; node = queue.poll();<br>            System.out.println(node.element);<br>            if (node.left != null) {<br>                queue.offer(node.left);<br>            }<br><br>            if (node.right != null) {<br>                queue.offer(node.right);<br>            }<br>        }<br>    }","like_count":1},{"had_liked":false,"id":268710,"user_name":"杨冬武","can_delete":false,"product_type":"c1","uid":1800054,"ip_address":"","ucode":"87D414D3F90F85","user_header":"https://static001.geekbang.org/account/avatar/00/1b/77/76/739a173e.jpg","comment_is_top":false,"comment_ctime":1608300651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5903267947","product_id":100017301,"comment_content":"二叉树的深度是从0开始，但是看leetcode的104题上求二叉树的最大深度，和老师说的深度不太一样。","like_count":1},{"had_liked":false,"id":232120,"user_name":"Javatar","can_delete":false,"product_type":"c1","uid":2032840,"ip_address":"","ucode":"E216645CDF632C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","comment_is_top":false,"comment_ctime":1593859657,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5888826953","product_id":100017301,"comment_content":"看评论感觉都没达到点儿上，说说我自己的理解<br>1. 给定了6个不同的数，问可以组合成多少种二叉树，并没有说是完全二叉树，假设对于n个不同的数，共有f(n)种，那么第一步先选择根节点，显然根节点有n种选择，在将根节点确定后，剩下n-1个数实际上是一颗有n-1个节点的二叉树，即有f(n-1)种，那么这个子二叉树可以作为根节点的左子树或者右子树，有两种方式，最终可以确定递归公式：f(n)=2*n*f(n-1)，f(1)=1。<br>手动算了下f(1)=1,f(2)=4,f(3)=24，手动画了画，符合公式，应该没问题。<br>题目中有六个数，所以最终f(6)=23040。大家可以考虑一下这种思路对不对，欢迎交流沟通<br><br>2.直接贴代码，具体调用时，根节点作为一个list传入即可<br><br> public static void levelWalk(List&lt;Node&gt; list) {<br>        if (list == null || list.size() == 0) {<br>            return;<br>        }<br>        List&lt;Node&gt; nextLevel = new ArrayList&lt;&gt;();<br>        for (Node node : list) {<br>            if (node == null) {<br>                continue;<br>            }<br>            &#47;&#47;打印当前node，并把子节点添加到新的list中，用于下一层的遍历<br>            System.out.println(node);<br>            nextLevel.add(node.left);<br>            nextLevel.add(node.right);<br>        }<br>        levelWalk(nextLevel);<br>    }<br><br><br>    private static final class Node&lt;T&gt; {<br>        public T val;<br>        public Node&lt;T&gt; left;<br>        public Node&lt;T&gt; right;<br>    }<br><br>","like_count":1,"discussions":[{"author":{"id":1734795,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/78/8b/421cb2c4.jpg","nickname":"成活","note":"","ucode":"F8840EE4DC3969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294218,"discussion_content":"确定根结点后，剩下的n-1个结点也可以分为两棵树，做根结点的左右子结点吧？不知道我想的对不对","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595832102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2032840,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","nickname":"Javatar","note":"","ucode":"E216645CDF632C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1734795,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/78/8b/421cb2c4.jpg","nickname":"成活","note":"","ucode":"F8840EE4DC3969","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294343,"discussion_content":"是的，所以最终f(n)=2*n*f(n-1)，前面有个2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595858553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294218,"ip_address":""},"score":294343,"extra":""}]},{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293114,"discussion_content":"我翻遍了所有评论，只有你有递归层级遍历的java实现，始终还是要额外借助一个list容器去装载每层的节点，这样做增加的空间复杂度，我在想能否不借用这个list容器传递\n另外你把空节点都装入list了，打印前才判空，这么做增加了递归次数，时间复杂度变高，应该装入list前判空比较好一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595433851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228447,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1000417,"ip_address":"","ucode":"8D48F4B9045947","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","comment_is_top":false,"comment_ctime":1592694401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887661697","product_id":100017301,"comment_content":"完全二叉树适合数组存储，其它链式存储较好。","like_count":1},{"had_liked":false,"id":161159,"user_name":"克","can_delete":false,"product_type":"c1","uid":1069206,"ip_address":"","ucode":"6DDFBB05E0F4E9","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/96/18612c89.jpg","comment_is_top":false,"comment_ctime":1576133996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871101292","product_id":100017301,"comment_content":"本节课的 满二叉树 Full Binary Tree 准确地说的应该是 完美二叉树  Perfect Binary Tree 吧。还是现在业界内模糊了这两者的区别呢？","like_count":1},{"had_liked":false,"id":120310,"user_name":"Bayes","can_delete":false,"product_type":"c1","uid":1539608,"ip_address":"","ucode":"2F83B2EFCE6B5D","user_header":"https://static001.geekbang.org/account/avatar/00/17/7e/18/c3ed4650.jpg","comment_is_top":false,"comment_ctime":1564825041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5859792337","product_id":100017301,"comment_content":"按层遍历，可以考虑用队列方式去遍历。<br>队列是先进先出的结构，先把根节点放进去，然后根节点出队，把子节点入队；然后继续把节点从队列中提出，并把该节点的子节点入队；不断去重复这些步骤。","like_count":1},{"had_liked":false,"id":116538,"user_name":"the geek","can_delete":false,"product_type":"c1","uid":1506723,"ip_address":"","ucode":"71DECBC814A539","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLz3icr3mGs5ib8FbSPQZ2ic3ib90mHkd1btQrmGacZjJxfYXrerIdaTxglKyCicFzLcEAb6deC2cWjE5Q/132","comment_is_top":false,"comment_ctime":1563866234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858833530","product_id":100017301,"comment_content":"完全二叉树的概念确实有点难以让人理解，更不知道实际含义，但是一旦把完全二叉树用存放到数组里的方式写出来就会恍然大悟。个人理解完全二叉树就是一颗连续的树，1.当这一层的节点未满时是不允许存在下一层节点的。2.每层节点填充的方式是从左到右。    个人感觉可以从根节点以一笔画三角形(上左右)的方式去画一个个的三角形，最终得出完全二叉树，当然左右这一横线肯定得去掉了。","like_count":1},{"had_liked":false,"id":99625,"user_name":"城西","can_delete":false,"product_type":"c1","uid":1488359,"ip_address":"","ucode":"E6C6B312BE8A9D","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/e7/8400828c.jpg","comment_is_top":false,"comment_ctime":1559268241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854235537","product_id":100017301,"comment_content":"递推公式如下：<br>f(1)=1<br>f(n)=n*f(n-1)<br><br>递推下来，f(n)=n!<br><br>思路是，首先一个数，只能为根节点，所以只有一种可能。当有N个数时，是在N-1的情况下再连入一个节点。我们来详细考虑有多少种连入的位置。<br><br>N-1个节点，每个节点可以有两个子节点，所以一共可以有2*(N-1)个边的位置。N-1个节点的树里面一共有N-2个边。所以，还剩下2*(N-1)-N+2=N个位置。<br>用出度和入度，应该更好理解。","like_count":1},{"had_liked":false,"id":53762,"user_name":"爷爷刘大","can_delete":false,"product_type":"c1","uid":1027494,"ip_address":"","ucode":"40755250FD459D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/a6/afb4acaa.jpg","comment_is_top":false,"comment_ctime":1545721260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840688556","product_id":100017301,"comment_content":"课后思考第二题：我觉得是不是Morris遍历？","like_count":1},{"had_liked":false,"id":38465,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1542041021,"is_pvip":false,"replies":[{"id":"13805","content":"带着问题查资料的过程是最好的学习方法。比单纯填鸭式的学习好多了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542073477,"ip_address":"","comment_id":38465,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837008317","product_id":100017301,"comment_content":"知识点都很好理解。但是两道思考题难到我了，得多查查资料。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428708,"discussion_content":"带着问题查资料的过程是最好的学习方法。比单纯填鸭式的学习好多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542073477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38218,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1541991182,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5836958478","product_id":100017301,"comment_content":"写了下，测试了下，貌似没什么问题<br>1.定义树节点类<br>public class Tree&lt;T&gt; {<br>    public Tree left;<br>    public Tree right;<br>    public T data;<br>    public Tree(T data){<br>        this.data = data;<br>    }<br>}<br>2.测试类<br>public class TestTree {<br>    public static void main(String[] args){<br>        Tree&lt;String&gt; a = new Tree&lt;&gt;(&quot;A&quot;);<br>        Tree&lt;String&gt; b = new Tree&lt;&gt;(&quot;B&quot;);<br>        Tree&lt;String&gt; c = new Tree&lt;&gt;(&quot;C&quot;);<br>        Tree&lt;String&gt; d = new Tree&lt;&gt;(&quot;D&quot;);<br>        Tree&lt;String&gt; e= new Tree&lt;&gt;(&quot;E&quot;);<br>        Tree&lt;String&gt; f = new Tree&lt;&gt;(&quot;F&quot;);<br>        Tree&lt;String&gt; g = new Tree&lt;&gt;(&quot;G&quot;);<br>        a.left = b;<br>        a.right = c;<br>        b.left = d;<br>        b.right = e;<br>        c.left = f;<br>        c.right = g;<br>        order(a);<br>        System.out.println(a.data);<br>    }<br>3.层遍历方法<br>   public static void order(Tree r){<br>        if(r==null){<br>            return;<br>        }<br>        order(r.left);<br>        order(r.right);<br>        if(r.left != null) {<br>            System.out.println(r.left.data);<br>        }<br>        if(r.right != null){<br>           System.out.println(r.right.data);<br>       }<br>    }<br>}","like_count":1,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293083,"discussion_content":"这个不对很有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595428837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358909,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1665019517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665019517","product_id":100017301,"comment_content":"总结：<br>1. 树的相关概念<br><br>1. n!种<br>2. 层序遍历可以使用队列","like_count":0},{"had_liked":false,"id":358784,"user_name":"Geek_b89018","can_delete":false,"product_type":"c1","uid":3189568,"ip_address":"广东","ucode":"2DAF0B0A22C8F1","user_header":"","comment_is_top":false,"comment_ctime":1664768081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664768081","product_id":100017301,"comment_content":"2.广搜","like_count":0},{"had_liked":false,"id":358467,"user_name":"极客柴犬","can_delete":false,"product_type":"c1","uid":2859496,"ip_address":"广东","ucode":"596E2342375017","user_header":"https://static001.geekbang.org/account/avatar/00/2b/a1/e8/6f3d4d15.jpg","comment_is_top":false,"comment_ctime":1664342365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664342365","product_id":100017301,"comment_content":"第一题 感觉是  6！<br>第二题：使用广度优先遍历，函数f(c) 接受一个 队列作为参数 然后函数内循环打印队列元素，同时将队列元素的左、右两侧放入一个新的队列，循环结束后，然后递归调用f(c) 将新队列传入。当队列为空就跳出递归","like_count":0},{"had_liked":false,"id":357593,"user_name":"Erica Wu","can_delete":false,"product_type":"c1","uid":1043537,"ip_address":"加拿大","ucode":"A5CAF47015019B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLNf0JtT0vDq21tgdMg6tu1gMUM90UCkajypGQHNuGGyyMjm7uicmtyuIFHoYYPOIO5IhqW4Owm1uQ/132","comment_is_top":false,"comment_ctime":1663458965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663458965","product_id":100017301,"comment_content":"完全二叉树的英文解释：a complete binary tree is a binary tree in which every level is competed filled, except possibly the bottom level which is filled from left to right.<br>“最后一层节点从左到右排列”","like_count":0},{"had_liked":false,"id":356347,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1662186647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662186647","product_id":100017301,"comment_content":"二叉树<br>- 叶子节点，父节点，叔节点，兄弟节点<br>- 高度(下向上,0开始)，深度(上向下，0开始)，层(上向下，1开始)<br>简单分类<br>- 除了叶子节点所有节点都占满，满二叉树<br>- 没有占满的节点只有左点节，完全二叉树<br>储存法<br>- 链式存储法(data,left,right),浪费空间，对比顺序存储多存储两个字针<br>- 顺序存储法(i,2*i,2*i+1),不是完全二叉树有点浪费空间<br>遍历(O(n))<br>1. 前序遍历<br>- 当前节点，左子树，右子树<br>- preOder(r) = print r-&gt; preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)<br>2. 中序遍历<br>- preOrder(r)= preOrder(r-&gt;left)-&gt; prin r -&gt; preOrder(r-&gt;right)<br>- 左子树，当前节点，右子树<br>3. 后序遍历<br>- 左子树，右子树，当前节点<br>- preOrder(r)= preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)-&gt;print r","like_count":0},{"had_liked":false,"id":352951,"user_name":"1634LM","can_delete":false,"product_type":"c1","uid":1483821,"ip_address":"北京","ucode":"0F5FA57B69788C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0G3cibDykvgIkomb5QrjBGuiaf5rJG2317JN1sePZ589IjUcMTOF4ZMrKVYU4ywfq1qfREqCW9Zww/132","comment_is_top":false,"comment_ctime":1659050973,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1659050973","product_id":100017301,"comment_content":"老师你好，我想问一个关于递归的问题， 比如前序便利， 假设B C已经解决的前提下，如何解决A? 这个 A B C具体指什么？ ","like_count":0},{"had_liked":false,"id":352823,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1149402,"ip_address":"","ucode":"AD6933D125C930","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/da/136cdca6.jpg","comment_is_top":false,"comment_ctime":1658971225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658971225","product_id":100017301,"comment_content":"学习的过程感觉又回到大学时期！","like_count":0},{"had_liked":false,"id":350113,"user_name":"云水禅心🌓","can_delete":false,"product_type":"c1","uid":2915218,"ip_address":"","ucode":"1B0782009BC5B1","user_header":"https://static001.geekbang.org/account/avatar/00/2c/7b/92/ce884691.jpg","comment_is_top":false,"comment_ctime":1656579138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656579138","product_id":100017301,"comment_content":"问题1，题目中如果构建是完全二叉树， 可以简化为数组内的元素有多少种组合方式，这样的话，就是 n!n！表示n的阶乘。n!=n*(n-1)*(n-2)*……*3*2*1例如：5!=5*4*3*2*1","like_count":0},{"had_liked":false,"id":348567,"user_name":"曹明路","can_delete":false,"product_type":"c1","uid":1336804,"ip_address":"","ucode":"BE4328CBB0466F","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/e4/187e539e.jpg","comment_is_top":false,"comment_ctime":1655199695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655199695","product_id":100017301,"comment_content":"额  树的高度，深度和leetcode定义不一样啊？？","like_count":0},{"had_liked":false,"id":347906,"user_name":"许登旺","can_delete":false,"product_type":"c1","uid":2924912,"ip_address":"","ucode":"2E8275C336EA42","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIBKUcF74HD3nS5xrvfQwQCWYUz6zHCNEZ0480TqFxGqNLd3lCr62JZ05JE9jujkWVkGtUFNvvASg/132","comment_is_top":false,"comment_ctime":1654572369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654572369","product_id":100017301,"comment_content":"原来一直不知道为啥前中后遍历是这样的，学了好几遍都没弄明白<br>老师这次让我豁然开朗","like_count":0},{"had_liked":false,"id":347735,"user_name":"Vivion","can_delete":false,"product_type":"c1","uid":1242310,"ip_address":"","ucode":"C62C4F46B8EB4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/c6/aed9e44a.jpg","comment_is_top":false,"comment_ctime":1654361130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654361130","product_id":100017301,"comment_content":"2. 用队列去存储待访问下一层的节点","like_count":0},{"had_liked":false,"id":346332,"user_name":"知行","can_delete":false,"product_type":"c1","uid":1802022,"ip_address":"","ucode":"5AC8CBCC0AD48B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7f/26/c5127e9a.jpg","comment_is_top":false,"comment_ctime":1653030938,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653030938","product_id":100017301,"comment_content":"1、全排列，n！<br>2、使用队列：<br>1）根节点入队<br>2）开始循环（条件队列不对空）：根节点poll（删除）返回<br>3）跟节点的left 、right依次入队<br>4）直到队列为空，结束","like_count":0},{"had_liked":false,"id":345375,"user_name":"Geek_785747","can_delete":false,"product_type":"c1","uid":2571308,"ip_address":"","ucode":"9AEB7CD2C7E6CD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoSMRiaMtAcqQib3U7RcAB6tSjC0ebNu4XKLn41EfkiaTgib3ib1HtMU7k9NknxLhYfN9SG1vhxqJ7Gfow/132","comment_is_top":false,"comment_ctime":1652239668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652239668","product_id":100017301,"comment_content":"这样吗<br>```<br>static int distinctBinTreeCount(int nodeCount){<br>    return structCount(nodeCount)*A(nodeCount);<br>}<br><br>static int structCount(int n){<br>    int[] arr = new int[Math.max(n+1,3)];<br>    arr[0]=1;arr[1]=1;arr[2]=2;<br>    for(int i=3;i&lt;=n;i++){<br>        for(int k=0;k&lt;i;k++){<br>            arr[i]+=arr[k]*arr[i-1-k];<br>        }<br>    }<br>    System.out.println(&quot;struct count: &quot;+arr[n]);<br>    return arr[n];<br>}<br>static int A(int n){<br>    return IntStream.rangeClosed(1,n).reduce((a,b)-&gt;a*b).getAsInt();<br>}<br>```","like_count":0},{"had_liked":false,"id":344628,"user_name":"晨遥","can_delete":false,"product_type":"c1","uid":2971870,"ip_address":"","ucode":"C3972A1FE5E021","user_header":"https://static001.geekbang.org/account/avatar/00/2d/58/de/dad844b1.jpg","comment_is_top":false,"comment_ctime":1651677657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651677657","product_id":100017301,"comment_content":"对于n个数, 根节点不能为空, 有n种。第2层分三种情况, 只有左结点, 只有右结点, 左右结点都有, 分别有n-1种, n-1种, (n-1)*(n-2)种。同样, 将第二层每个节点视为根节点, 其左右结点又分成三种情况...依次类推, 这其实是一个递归问题。<br><br>从上面不难推断出递推公式:<br><br>f(n) = n*(f(n-1) + f(n-1) + (n-1)*f(n-2))<br>&#47;&#47;终止条件, f(1)=1, f(2)=4<br><br>f(6) = 368, 6个不同的数, 有368种情况。","like_count":0},{"had_liked":false,"id":337607,"user_name":"后乐","can_delete":false,"product_type":"c1","uid":1264163,"ip_address":"","ucode":"058A631CA1A56B","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/23/74bf8518.jpg","comment_is_top":false,"comment_ctime":1646913195,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1646913195","product_id":100017301,"comment_content":"是否学习：✅<br>学习时间：2022年3月10日","like_count":0},{"had_liked":false,"id":337154,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1646649561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646649561","product_id":100017301,"comment_content":"本节又学习到了一种非线性表结构，概念内容：<br>·树： 有根，不能出现循环，每条边连接相邻的两个父子节点<br>·树节点： 父节点、子节点、根节点、叶子节点<br>·节点高度：当前节点到叶子节点的最远路径 （边数）<br>·节点深度：从根节点到当前节点的路径<br>·节点层数：深度 + 1<br>·树高度：根节点的高度<br>·二叉树：每个节点最多有二个叉，左子节点 和 右子节点 <br>·满二叉树：正三角形结构，每层节点都是满的，叶子节点全在底层<br>·完全二叉树：最后一层靠左排列<br>·链式存储法：每个结点三字段，两指针<br>·顺序存储法：适合完全二叉树，按每层的节点顺序存储，1起左 2*i 右 2 * i +1<br>·二叉树遍历：前序遍历， 中序遍历，后续遍历 （前中后对应遍历节点的打印顺序），时间复杂度 O(n), 每个结点访问 2 次，使用递归去实现<br><br>思考题：<br><br>1. 完全二叉树，不少于 N!<br>2. 对队列有点印象","like_count":0},{"had_liked":false,"id":333799,"user_name":"骑白马的菜鸟","can_delete":false,"product_type":"c1","uid":1042644,"ip_address":"","ucode":"6BD69C742B3AE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/d4/a0c2569d.jpg","comment_is_top":false,"comment_ctime":1644541825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644541825","product_id":100017301,"comment_content":"为什么完全二叉树最后一层要放左边？没理解","like_count":0},{"had_liked":false,"id":323452,"user_name":"pcm","can_delete":false,"product_type":"c1","uid":2170389,"ip_address":"","ucode":"C5B750F7D74D55","user_header":"https://static001.geekbang.org/account/avatar/00/21/1e/15/b4ccb901.jpg","comment_is_top":false,"comment_ctime":1637909395,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637909395","product_id":100017301,"comment_content":"用js 实现了前序遍历，中序遍历，后序遍历:<br>const data = {<br>    data:&#39;A&#39;,<br>    left:{<br>        data:&#39;B&#39;,<br>        left:{<br>            data:&#39;D&#39;<br>        },<br>        right:{<br>            data:&#39;E&#39;<br>        }<br>    },<br>    right:{<br>        data:&#39;C&#39;,<br>        left:{<br>            data:&#39;F&#39;<br>        },<br>        right:{<br>            data:&#39;G&#39;<br>        }<br>    }<br>}<br>&#47;&#47;前序遍历  A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G print(r)-&gt;print(preL)-&gt;print(preR)<br>preOrder(data);<br>function preOrder(root){<br>    if(!root) return;<br>    console.log(&#39;root&#39;,root.data)<br>    preOrder(root.left);<br>    preOrder(root.right)<br>}<br>&#47;&#47;中序遍历 D-&gt;B-&gt;E-&gt;A-&gt;F-&gt;C-&gt;G  print(preL)-&gt;print(r)-&gt;print(preR)<br>inOrder(data)<br>function inOrder(root){<br>    if(!root) return;<br>    inOrder(root.left)<br>    console.log(&#39;inOrder&#39;,root.data);<br>    inOrder(root.right)<br>}<br>&#47;&#47;后序遍历 D-&gt;E-&gt;B-F-&gt;G-&gt;C-&gt;A print(preL)-&gt;print(preR)-&gt;print(r)<br>postOrder(data)<br>function postOrder(root){<br>    if(!root) return;<br>    postOrder(root.left);<br>    postOrder(root.right);<br>    console.log(&#39;postOrder&#39;,root.data)<br>}","like_count":0},{"had_liked":false,"id":323413,"user_name":"jason","can_delete":false,"product_type":"c1","uid":2680235,"ip_address":"","ucode":"0886E1D88BB7CC","user_header":"https://static001.geekbang.org/account/avatar/00/28/e5/ab/cece3199.jpg","comment_is_top":false,"comment_ctime":1637894156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637894156","product_id":100017301,"comment_content":"第一题按照分步乘法来算，是不是这么多A1&#47;6*A2&#47;5*(C3&#47;4*A3&#47;3)=240种？","like_count":0},{"had_liked":false,"id":319885,"user_name":"Six Days","can_delete":false,"product_type":"c1","uid":1322463,"ip_address":"","ucode":"8587F2EEFFFD11","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/df/4949b250.jpg","comment_is_top":false,"comment_ctime":1635998289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635998289","product_id":100017301,"comment_content":"public static List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {<br>        if (root == null) {<br>            return Collections.emptyList();<br>        }<br>        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();<br>        queue.add(root);<br><br>        List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();<br>        while (!queue.isEmpty()) {<br>            List&lt;Integer&gt; tempList = new ArrayList&lt;&gt;();<br>            for (int i = 0; i &lt; queue.size(); i++) {<br>                TreeNode treeNode = queue.poll();<br>                if (treeNode != null) {<br>                    tempList.add(treeNode.val);<br>                    queue.add(treeNode.left);<br>                    queue.add(treeNode.right);<br>                }<br>            }<br>            result.add(new ArrayList&lt;&gt;(tempList));<br>        }<br>        return result;<br>    }","like_count":0},{"had_liked":false,"id":308374,"user_name":"匠心","can_delete":false,"product_type":"c1","uid":1898691,"ip_address":"","ucode":"1778B6EA6BC82A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f8/c3/64e3c953.jpg","comment_is_top":false,"comment_ctime":1629560563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629560563","product_id":100017301,"comment_content":"我理解的完全二叉树就是任何一个结点的左子树不为空，右子树随便。跟是不是叶子节点没关系。","like_count":0},{"had_liked":false,"id":306873,"user_name":"Benson_Geek","can_delete":false,"product_type":"c1","uid":1519415,"ip_address":"","ucode":"D95B5C2BA09961","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/dr34H3hOMVsibL0XV1iaBWFiaTnYssX8sNjmJDpiaBUVv2X39nFzDjNpe288cKkZfH3P9sVRxZ1lzYZEcRR3vJNYtA/132","comment_is_top":false,"comment_ctime":1628759889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628759889","product_id":100017301,"comment_content":"复一下概念吧：<br>二叉树概念：<br>深度：节点到根节点的距离<br>高度：节点到最远叶子节点的距离<br>层数：节点的深度 + 1<br>节点的度：节点拥有的子树的数量为节点的度<br>用数组表示二叉树，用链式存储表示二叉树，<br>前中后序遍历，层序遍历<br><br>1. 满二叉树：只有度为0和2的二叉树，且所有度为0的节点都在同一层<br><br>2. 完全二叉树：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^h -1  个节点。<br><br>堆就是一棵完全二叉树，同时保证父子节点的顺序关系。<br><br>3. 二叉搜索树：<br>左子树上所有节点的值都小于根节点的值，右子树所有节点的值都大于根节点的值，左右子树自身也是二叉搜索树<br><br>4. 平衡二叉搜索树(平衡二叉树，也叫AVL树)<br>是空树或左右子树的高度差不超过1","like_count":0},{"had_liked":false,"id":299818,"user_name":"晓晓晓","can_delete":false,"product_type":"c1","uid":2582764,"ip_address":"","ucode":"DFEEDC0A7B3DD3","user_header":"https://static001.geekbang.org/account/avatar/00/27/68/ec/ebe8c0a3.jpg","comment_is_top":false,"comment_ctime":1624871051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624871051","product_id":100017301,"comment_content":"&#47;&#47;C# 二叉树层序遍历<br>  public static List&lt;IList&lt;object&gt;&gt; treeNodes = new List&lt;IList&lt;object&gt;&gt;();<br>        public static int level = 0;<br>        public static void 二叉树层序遍历(TreeNode root)<br>        {<br>            if (root == null)<br>            {<br>                return;<br>            }<br>            if (treeNodes.Count &lt;= level)<br>            {<br>                treeNodes.Add(new List&lt;object&gt;());<br>            }<br>            treeNodes[level].Add(root.val);<br><br>            level++;<br>            二叉树层序遍历(root.left);<br>            二叉树层序遍历(root.right);<br>            level--;<br>        }","like_count":0},{"had_liked":false,"id":297720,"user_name":"海崖","can_delete":false,"product_type":"c1","uid":2552745,"ip_address":"","ucode":"9D42E0B0D30A56","user_header":"https://static001.geekbang.org/account/avatar/00/26/f3/a9/bb9d8450.jpg","comment_is_top":false,"comment_ctime":1623746261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623746261","product_id":100017301,"comment_content":"叮~打卡","like_count":0},{"had_liked":false,"id":296710,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1623124204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623124204","product_id":100017301,"comment_content":"课后：1 、卡特兰函数，但是我自己看了，还是没看懂原理 2、层次遍历自己实现了一下。  void levelSearch(Node root) {<br><br>        if (root == null) return;<br>        Queue&lt;Node&gt; queue = new LinkedBlockingDeque();<br>        queue.add(root);<br><br>        while (!queue.isEmpty()) {<br>            Node node = queue.remove();<br>            System.out.println(node.val);<br>            if (node.left != null) {<br>                queue.add(node.left);<br>            }<br><br>            if (node.right != null) {<br>                queue.add(node.right);<br>            }<br>        }<br><br>    }","like_count":0},{"had_liked":false,"id":295699,"user_name":"你也是广door人？？","can_delete":false,"product_type":"c1","uid":2637874,"ip_address":"","ucode":"D4D6B2AEC214A4","user_header":"https://static001.geekbang.org/account/avatar/00/28/40/32/4ed9f2fc.jpg","comment_is_top":false,"comment_ctime":1622549389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622549389","product_id":100017301,"comment_content":"求二叉树的三种遍历各有一种简便的方法，比如如果想要求先序遍历的结果，先假设每个结点的正左边有一个标记，然后从根节点开始逆时针“贴着墙”走，依次遇到的标记的顺序就是先序遍历的结果；同理，中序遍历则假设每个结点的正下边有一个标记，后序遍历则假设每个结点的正右边有一个标记","like_count":0},{"had_liked":false,"id":294085,"user_name":"washfreeid","can_delete":false,"product_type":"c1","uid":1177101,"ip_address":"","ucode":"00114519D4629F","user_header":"","comment_is_top":false,"comment_ctime":1621754079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621754079","product_id":100017301,"comment_content":"https:&#47;&#47;www.baeldung.com&#47;cs&#47;calculate-number-different-bst 這邊有詳細解釋 問題一 若是BST 為catalan number 若是Binary Tree且節點value無重複 為catalan number * n!","like_count":0},{"had_liked":false,"id":290677,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1619684609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619684609","product_id":100017301,"comment_content":"1. 不考虑任何排序的情况下，数组个数的阶乘就时能构建不同二叉树的个数；<br>2. 如果是完全二叉树，可以用数组存储，空出0位置，使用2*i,2*i+1，按层遍历；如果非完全二叉树借助队列，给二叉树做个广度遍历。","like_count":0},{"had_liked":false,"id":290281,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1619485030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619485030","product_id":100017301,"comment_content":"完全二叉树，倒数第二层是满的，倒数第一层上的所有叶子节点全部靠左排列","like_count":0},{"had_liked":false,"id":290112,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1619365940,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1619365940","product_id":100017301,"comment_content":"层次遍历就是先序遍历的改版<br><br>def levelOrder(node: BinaryTreeNode):<br>    if node == None:<br>        return<br><br>    printNode(node.left)<br>    printNode(node.right)<br>    levelOrder(node.left)<br>    levelOrder(node.right)","like_count":0},{"had_liked":false,"id":281298,"user_name":"柯尊铖","can_delete":false,"product_type":"c1","uid":1851031,"ip_address":"","ucode":"8C3E35A76EED61","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ5GIMGQPRu31calIBicDXTNJQFCgTwgaiaQJniaw8jYrPxwpxNd0nAiapYgD6OK1LrSLuSerOuURG1sQ/132","comment_is_top":false,"comment_ctime":1614680614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614680614","product_id":100017301,"comment_content":"第一题可以用递归，build 返回的是给定 num 个节点可以构造的树的种类数。分别分给左子树 x 个节点，右子树 num - x - 1 个节点，两边子树可以构造的树的数量乘积就是这种分配的数量。左子树可以分配节点的范围是 0 到 num - 1，累加起来就可以了。最后再乘以 n!。<br><br>function build(num) {<br>\tif (num &lt;= 1) return 1<br>\tlet leftNodeNum = 0<br>\tlet total = 0<br>\twhile (leftNodeNum &lt;= num - 1) {<br>\t\tconst left = build(leftNodeNum)<br>\t\tconst right = build(num - leftNodeNum - 1)<br>\t\ttotal += left * right<br>\t\tleftNodeNum++<br>\t}<br>\treturn total<br>}","like_count":0},{"had_liked":false,"id":280783,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614386618,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614386618","product_id":100017301,"comment_content":"茶艺师学编程<br><br>思考题<br>2、（用python3实现）<br>class Solution:<br>    def levelOrder(self, root: &#39;Node&#39;) -&gt; List[List[int]]:<br>        def traverse_node(node, level):<br>            if len(result) == level : result.append([])<br>            result[level].append(node.val)<br>            for child in node.children : traverse_node(child, level + 1)<br>        result = []<br>        if root is not None : traverse_node(root, 0)<br>        return result<br>","like_count":0},{"had_liked":false,"id":277848,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1356978,"ip_address":"","ucode":"E78B1F15BC10F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcLjatV3GHdibZXCTIgL1X2A7jpByIeLH3Zyia8KXdT4JRcicmVSgq5ekRHCFCFenMqicsAwaWYibHkTw/132","comment_is_top":false,"comment_ctime":1612620557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612620557","product_id":100017301,"comment_content":"二叉树每个节点最多有两个子节点，特殊的有满二叉树和完全二叉树，这两个都可以使用数组结构存储，好处是不会浪费很多空间。当然，二叉树也可以使用链表结构存储。","like_count":0},{"had_liked":false,"id":272861,"user_name":"LSwolves","can_delete":false,"product_type":"c1","uid":2295470,"ip_address":"","ucode":"3A325735636980","user_header":"https://static001.geekbang.org/account/avatar/00/23/06/ae/e2d636ed.jpg","comment_is_top":false,"comment_ctime":1610335413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610335413","product_id":100017301,"comment_content":"疑问, 完全二叉树  顺序存储  靠左子树存放,  为何就能节省存储占用了","like_count":0},{"had_liked":false,"id":271106,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1609401895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609401895","product_id":100017301,"comment_content":"利用Morris二叉树遍历方法，时间复杂度可以降到O（N），额外空间复杂度为O（1）","like_count":0},{"had_liked":false,"id":271104,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1609401781,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1609401781","product_id":100017301,"comment_content":"  &#47;**<br>     * 非递归方式：前序遍历。<br>     * @param root<br>     * 1.将head放入栈<br>     * 2.然后弹出一个元素cur，打印，然后将cur.right,cur.left先后压入栈。<br>     * 3.重复2，直到stack为空<br>     *&#47;<br>    public static void preOrder1(Node root){<br>        Stack&lt;Node&gt; stack = new Stack&lt;&gt;();<br>        stack.push(root);<br><br>        while(!stack.isEmpty()){<br>            Node cur = stack.pop();<br>            UT.printNodeV(cur);<br>            if(cur.right!=null){<br>                stack.push(cur.right);<br>            }<br>            if(cur.left!=null){<br>                stack.push(cur.left);<br>            }<br>        }<br>    }<br><br><br><br>    &#47;**<br>     * 非递归方式：中序遍历<br>     * @param head<br>     * 思路：先将cur指向root.<br>     *<br>     * 1.将左边界全部压入栈，即循环将cur.left压入栈中，直到cur为null。<br>     * 2.当cur为null时，从栈中弹出一个，然后打印，再将cur指向cur.right，重复1.<br>     *<br>     *&#47;<br>    public static void inOrder1(Node head){<br>        if(head==null)return;<br>        Stack&lt;Node&gt; stack = new Stack&lt;&gt;();<br>        Node cur = head;<br>        while(!stack.empty() || cur!=null){<br>           if(cur!=null){<br>               stack.push(cur);<br>               cur = cur.left;<br>           }else {<br>               Node p = stack.pop();<br>               UT.printNodeV(p);<br>               cur = p.right;<br>           }<br>        }<br>    }<br><br>    &#47;**<br>     * 非递归方式：后序遍历<br>     * @param root<br>     * 用两个栈。s1,s2<br>     * s1中先放入root。<br>     * 然后从s1中弹出一个元素放入s2,在将该元素的左右节点放入s1.循环知道s1为空。<br>     *<br>     *&#47;<br>    public static void postOrder1(Node root){<br>        if(root!=null){<br>            Stack&lt;Node&gt; s1 = new Stack&lt;&gt;();<br>            Stack&lt;Node&gt; s2 = new Stack&lt;&gt;();<br>            s1.push(root);<br>            Node cur = null;<br>            while(!s1.isEmpty()){<br>                cur = s1.pop();<br>                s2.push(cur);<br>                if(cur.left!=null){<br>                    s1.push(cur.left);<br>                }<br>                if(cur.right!=null){<br>                    s1.push(cur.right);<br>                }<br>            }<br><br>            while(!s2.isEmpty()){<br>                UT.printNodeV(s2.pop());<br>            }<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":2207985,"avatar":"https://static001.geekbang.org/account/avatar/00/21/b0/f1/6d225d82.jpg","nickname":"斗斗","note":"","ucode":"1178E2D17EFD19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403577,"discussion_content":"挺好的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634112409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262393,"user_name":"马祖晖","can_delete":false,"product_type":"c1","uid":1593762,"ip_address":"","ucode":"7866916C8EF9DA","user_header":"https://static001.geekbang.org/account/avatar/00/18/51/a2/84e9efe2.jpg","comment_is_top":false,"comment_ctime":1605706211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605706211","product_id":100017301,"comment_content":"俺的层序遍历<br><br>def layer_print(root):<br>        if root is None:<br>            return []<br>        node_arr = [root]<br>        result = [[root.value]]<br>        while node_arr:<br>            new_node_arr = []<br>            cur_result = []<br>            for node in node_arr:<br>                if node.left:<br>                    new_node_arr.append(node.left)<br>                    cur_result.append(node.left.value)<br>                if node.right:<br>                    new_node_arr.append(node.right)<br>                    cur_result.append(node.right.value)<br>            if cur_result:<br>                result.append(cur_result)<br>            node_arr = new_node_arr<br>        return result<br>","like_count":0},{"had_liked":false,"id":262134,"user_name":"笑","can_delete":false,"product_type":"c1","uid":1284647,"ip_address":"","ucode":"C91EAFAB88E5AC","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/27/4b81bce5.jpg","comment_is_top":false,"comment_ctime":1605620741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605620741","product_id":100017301,"comment_content":"层次遍历，完全二叉树直接遍历数组不就行了？","like_count":0},{"had_liked":false,"id":261065,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1605187322,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1605187322","product_id":100017301,"comment_content":"对于 树 这种数据结构而言：<br><br>节点的高度 = 节点到叶子节点的最长路径（边数）<br>节点的深度 =  根节点到这个节点所经历的边的个数<br>节点的层数 = 节点的深度 + 1<br>树的高度 = 根节点的高度<br><br>其中，<br>高度：从最底层开始计数，起点是0。<br>深度：从根结点开始计数，起点是0。<br>层数：从根结点开始计数，起点是1。","like_count":0},{"had_liked":false,"id":260537,"user_name":"monchickey","can_delete":false,"product_type":"c1","uid":1513948,"ip_address":"","ucode":"D7B670444F62B3","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","comment_is_top":false,"comment_ctime":1605057691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605057691","product_id":100017301,"comment_content":"n个不同的数有n!种排列情况，对于每种情况假设有f(n)个不同的构建方式，固定根节点，那么子树可能的组合情况有：<br>    左子树0个元素(没有元素)，右子树n - 1个元素<br>    左子树1个元素，右子树n - 2个元素<br>    ......<br>    左子树n - 2个元素，右子树1个元素<br>    左子树n - 1个元素，右子树0个元素<br>因此一共有上面n种情况，对于每种情况，子树的构成其实又是一个同样的问题，比如n - 1个元素可以构成f(n-1)个二叉树，那么这其实就变成一个递归的形式所以f(n)可以表示为：<br>f(n) = f(0)f(n - 1) + f(1)f(n - 2) + ... + f(n - 2)f(1) + f(n - 1)f(0)<br>这正是卡特兰数的递归表述形式，因此通项公式为：f(n) = (2n)!&#47;(n+1)!n!<br>    最终算上排列数，可以构成: n!f(n) = (2n)!&#47;(n+1)!个不同的二叉树，因此上面6个元素可以构成：12!&#47;7! = 95040个不同的二叉树. ","like_count":0},{"had_liked":false,"id":252168,"user_name":"滴答丶滴","can_delete":false,"product_type":"c1","uid":1181206,"ip_address":"","ucode":"2093C2948B4327","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","comment_is_top":false,"comment_ctime":1602154749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602154749","product_id":100017301,"comment_content":"课后思考第一题：<br>构建出多少种不同的二叉树是什么意思？<br>二叉树的种类：完全二叉树，非完全二叉树这种？？？<br>求指点啊，题目都没看懂的....","like_count":0},{"had_liked":false,"id":251627,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1601735542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601735542","product_id":100017301,"comment_content":"问题1:能够放到数组里边，可以理解为是一颗完全二叉树，可以转化为数组有多少种组合方式，这样就是n!，这道题的答案就是6!=720<br>问题2:需要用到栈，go语言实现如下：<br>&#47;&#47; 二叉树按层遍历<br>func levelRange(root *Node) []byte {<br>\tif root == nil {<br>\t\treturn []byte{}<br>\t}<br>\tarr := make([]byte, 0)<br>\tqueue := list.New()<br>\tqueue.PushBack(root)<br>\tfor queue.Len() &gt; 0 {<br>\t\tfront := queue.Front()<br>\t\tqueue.Remove(front)<br>\t\tn := front.Value.(*Node)<br>\t\tarr = append(arr, n.Value)<br>\t\tif n.Left != nil {<br>\t\t\tqueue.PushBack(n.Left)<br>\t\t}<br>\t\tif n.Right != nil {<br>\t\t\tqueue.PushBack(n.Right)<br>\t\t}<br>\t}<br>\treturn arr<br>}","like_count":0},{"had_liked":false,"id":251250,"user_name":"天敌","can_delete":false,"product_type":"c1","uid":1059944,"ip_address":"","ucode":"CD29A622197197","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","comment_is_top":false,"comment_ctime":1601435815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601435815","product_id":100017301,"comment_content":"&lt;T&gt; void levelOrder(TreeNode&lt;? extends T&gt; root, Consumer&lt;T&gt; consumer) {<br>    Deque&lt;TreeNode&lt;? extends T&gt;&gt; deque = new LinkedList&lt;&gt;();<br>    deque.offer(root);<br>    while (!deque.isEmpty()) {<br>        int size = deque.size();<br>        for (int i = 0;i &lt; size;i++) {<br>            TreeNode&lt;? extends T&gt; p = deque.pollFirst();<br>            if (p != null) {<br>                consumer.accept(p.val);<br>                deque.offer(p.left);<br>                deque.offer(p.right);<br>            }<br>        }<br>    }<br>}","like_count":0},{"had_liked":false,"id":249569,"user_name":"李伟","can_delete":false,"product_type":"c1","uid":1883951,"ip_address":"","ucode":"940A6F79CD39D1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK7OIm3bNZ5X3Hgukib14xfrEmvVVkpdahJ1sicWI6X8vZeqHcCYk5ayeHODsjmUWsfMf7LiaE29wptg/132","comment_is_top":false,"comment_ctime":1600694499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600694499","product_id":100017301,"comment_content":"第一题：<br>n个数和n个节点，还是不一样的。 比如：两个数A\\B,一共四种情况， A是根节点，B是根节点各占两种情况。<br>","like_count":0},{"had_liked":false,"id":248257,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1476862,"ip_address":"","ucode":"037CE3554D8AB9","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","comment_is_top":false,"comment_ctime":1600082958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600082958","product_id":100017301,"comment_content":"按层遍历可以使用队列，前中后序遍历不用递归都写法更难感觉。","like_count":0},{"had_liked":false,"id":247991,"user_name":"王世林","can_delete":false,"product_type":"c1","uid":1076155,"ip_address":"","ucode":"2BB56D0FD71417","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/bb/10aaf123.jpg","comment_is_top":false,"comment_ctime":1599968557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599968557","product_id":100017301,"comment_content":"看评论说第一题数组存储可以构建n!种组合，不是很理解，例如下标1存储数据3，下标2只能存储比数据3小的数据1，而不是随机取非3的数据进行存储","like_count":0},{"had_liked":false,"id":242392,"user_name":"Geek_60c752","can_delete":false,"product_type":"c1","uid":1927920,"ip_address":"","ucode":"9D32A30D5A2087","user_header":"","comment_is_top":false,"comment_ctime":1597711696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597711696","product_id":100017301,"comment_content":"老师，您好，您说的二叉树的高度和深度是从0开始计数，我看网上代码大多都是从1开始计算，有点困惑，还请老师讲解一下，谢谢","like_count":0},{"had_liked":false,"id":238795,"user_name":"Geek_xxf","can_delete":false,"product_type":"c1","uid":2071344,"ip_address":"","ucode":"993671C7C08429","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/oVpXeM8ebKkW6CQz4OicHfCmJ8S96RRBZzaQS96bYykcUxTFPIwuVyZZichrmOFx6NwAdD2eNDYxvjfmbp1b9xLg/132","comment_is_top":false,"comment_ctime":1596300455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596300455","product_id":100017301,"comment_content":"第一题是这么想的，不知道对不对。6个数字排列组合是A66（也就是6！）。接下来就是6个节点到底有多少种二叉树的组合方式。我算了一下：6层二叉树有2种；5层二叉树，可以认为是5个点的5层二叉树挂了1个点，共8种；4层二叉树，可以认为是4个点的4层二叉树挂了2个点，共10种；3层二叉树，由于此时比3层的满二叉树只少一个点，所以一共有4种。因此，共计：6！*（2+8+10+4） = 17280","like_count":0},{"had_liked":false,"id":238254,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1596103277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596103277","product_id":100017301,"comment_content":"第二题，可以用队列的方式来进行层级遍历，先判断该节点是否有孩子，有入队列","like_count":0},{"had_liked":false,"id":238250,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1596102445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596102445","product_id":100017301,"comment_content":"层序遍历使用队列来存储有孩子节点的节点，每个孩子打印完了，就出队列","like_count":0},{"had_liked":false,"id":237462,"user_name":"Geek_cbbee0","can_delete":false,"product_type":"c1","uid":1925119,"ip_address":"","ucode":"E41B27B6F62FA4","user_header":"","comment_is_top":false,"comment_ctime":1595838127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595838127","product_id":100017301,"comment_content":"&#47;&#47;层级遍历，Golang实现<br>type Node struct {<br>\tData  int<br>\tLeft  *Node<br>\tRight *Node<br>}<br><br>func levelOrderTraversal(node *Node) {<br>\tS := make([]*Node, 1)<br>\tS[0] = node<br>\tvar T *Node<br>\tfor len(S) &gt; 0 {<br>\t\tT = S[0]<br>\t\tS = S[1:]<br>\t\tif T != nil {<br>\t\t\tprint(T.Data, &quot; &quot;)<br>\t\t\tS = append(S, T.Left)<br>\t\t\tS = append(S, T.Right)<br>\t\t}<br>\t}<br>}","like_count":0},{"had_liked":false,"id":236744,"user_name":"Merry","can_delete":false,"product_type":"c1","uid":1024036,"ip_address":"","ucode":"E2A114E10814BA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/24/68c679c8.jpg","comment_is_top":false,"comment_ctime":1595515719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595515719","product_id":100017301,"comment_content":"1.共132颗树。对于n个结点有多少种二叉树的问题符合卡特兰数<br>2.层次遍历是按从上到下、从左到右的顺序访问树中结点，可以用队列实现。","like_count":0},{"had_liked":false,"id":236190,"user_name":"无为而立","can_delete":false,"product_type":"c1","uid":2003887,"ip_address":"","ucode":"A74526BF43A077","user_header":"https://static001.geekbang.org/account/avatar/00/1e/93/af/54e2a654.jpg","comment_is_top":false,"comment_ctime":1595341262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595341262","product_id":100017301,"comment_content":"使用队列可以层次的遍历树","like_count":0},{"had_liked":false,"id":236131,"user_name":"阿东","can_delete":false,"product_type":"c1","uid":1500320,"ip_address":"","ucode":"E9393F62B4091D","user_header":"https://static001.geekbang.org/account/avatar/00/16/e4/a0/62a8b07e.jpg","comment_is_top":false,"comment_ctime":1595324024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595324024","product_id":100017301,"comment_content":"用树的异构数量k乘以n!，手动统计出k=132种，和评论里的卡特兰数计算结果一致","like_count":0},{"had_liked":false,"id":235724,"user_name":"吴亦凡","can_delete":false,"product_type":"c1","uid":2019760,"ip_address":"","ucode":"A785AD9C98D657","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d1/b0/f4e91c7b.jpg","comment_is_top":false,"comment_ctime":1595164012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595164012","product_id":100017301,"comment_content":"第一题就有疑问。根据二叉树定义，左子树要小于根节点小于右子树，你这个怎么能用排列组合方式来解呢？<br>我认为不应该是（5！+4！+2*3！）*2=312种才对么？请老师解答","like_count":0},{"had_liked":false,"id":234610,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1594732685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594732685","product_id":100017301,"comment_content":"2.使用两个变量，一个记录当前一层的节点个数，一个记录下一层的节点个数，如果当前一层节点数为零证明遍历完一层，然后将下一层节点个数赋值当前一层的节点个数，继续遍历","like_count":0},{"had_liked":false,"id":234026,"user_name":"gg9096","can_delete":false,"product_type":"c1","uid":1786242,"ip_address":"","ucode":"2D4417A52A39E9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2hXSy0RbzfFp4A4qFGe1DKQ3PibiahWAwAKrwUKQcnAW8l88MwRYTJr9AdChKPeMc1K5lE28GGKjI9BjFJ1M0UbQ/132","comment_is_top":false,"comment_ctime":1594557219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594557219","product_id":100017301,"comment_content":"c++用递归实现了按层遍历<br>leetcode上有个类似的题目，链接为：https:&#47;&#47;leetcode.com&#47;problems&#47;binary-tree-level-order-traversal&#47;<br>vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) <br>\t{<br>\t\tvector&lt;vector&lt;int&gt;&gt; v;<br>\t\t_levelOrder(root, 0, v);<br><br>\t\treturn v;<br>\t}<br><br>\tvoid _levelOrder(TreeNode* root, int level, vector&lt;vector&lt;int&gt;&gt;&amp; v)<br>\t{<br>\t\tif (!root)<br>\t\t{<br>\t\t\treturn;<br>\t\t}<br><br>\t\tif (v.size() &lt;= level)<br>\t\t{<br>\t\t\tv.push_back(vector&lt;int&gt;());<br>\t\t}<br>\t\tv[level].push_back(root-&gt;val);<br><br>\t\t_levelOrder(root-&gt;left, level + 1, v);<br>\t\t_levelOrder(root-&gt;right, level + 1, v);<br>\t}","like_count":0},{"had_liked":false,"id":233467,"user_name":"贱贱的梦想","can_delete":false,"product_type":"c1","uid":1068326,"ip_address":"","ucode":"A3F7AF23D193AF","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/26/44095eba.jpg","comment_is_top":false,"comment_ctime":1594340190,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1594340190","product_id":100017301,"comment_content":"二叉树的前序中序后序遍历（递归实现和非递归实现）https:&#47;&#47;github.com&#47;GongchuangSu&#47;Data_Structures_and_Algorithms&#47;blob&#47;master&#47;%E6%A0%91(Tree)&#47;%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E5%92%8C%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%EF%BC%89&#47;BinaryTree.java","like_count":0},{"had_liked":false,"id":233103,"user_name":"whyly","can_delete":false,"product_type":"c1","uid":1798882,"ip_address":"","ucode":"D34D6B7164C982","user_header":"https://static001.geekbang.org/account/avatar/00/1b/72/e2/95b0543c.jpg","comment_is_top":false,"comment_ctime":1594217601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594217601","product_id":100017301,"comment_content":"我对完全二叉树的理解是，除去最后一层满足是一个满二叉树，最后一层的节点都靠左，满二叉树是一种特殊的完全二叉树","like_count":0},{"had_liked":false,"id":232152,"user_name":"Geek_05af6d","can_delete":false,"product_type":"c1","uid":1529323,"ip_address":"","ucode":"D3D02E745D7BA5","user_header":"","comment_is_top":false,"comment_ctime":1593873950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593873950","product_id":100017301,"comment_content":"老师，空二叉树的高度是多少呢，只有一个节点的二叉树高度是多少呢，看网上说的都乱七八糟的","like_count":0},{"had_liked":false,"id":230368,"user_name":"海棠头场雪","can_delete":false,"product_type":"c1","uid":1880627,"ip_address":"","ucode":"F8FF4C6E55693C","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b2/33/e9c2c1dd.jpg","comment_is_top":false,"comment_ctime":1593355984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593355984","product_id":100017301,"comment_content":"没人说第一个思考题的答案么。。<br><br>不能直接用卡塔兰数，因为还要考虑不同数字的区别。","like_count":0},{"had_liked":false,"id":230099,"user_name":"yudidi","can_delete":false,"product_type":"c1","uid":1202482,"ip_address":"","ucode":"70283DE39D86F5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","comment_is_top":false,"comment_ctime":1593260658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593260658","product_id":100017301,"comment_content":"关于二叉树遍历的时间复杂度分析<br>1. 文中提到 每个节点最多会被访问两次, 访问两次具体是指什么呢?<br>root-&gt;left和root-&gt;right就算对root进行了两次访问吗?<br>2. 另外, 我自己是按照递归树的深度来分析递归函数的时间复杂度，二叉树遍历递归树的深度最坏为n, 所以最坏时间复杂度为O(n), 这样分析可以吗?","like_count":0},{"had_liked":false,"id":229624,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1593076463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593076463","product_id":100017301,"comment_content":"按层从左到右遍历，按之字形遍历","like_count":0},{"had_liked":false,"id":224534,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1591433639,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1591433639","product_id":100017301,"comment_content":"1. 如果是完全二叉树，那么二叉树的结构固定，相当于 6 个数字的排列， 数量为 6！<br>2. 使用队列，每当访问一个节点，就把它的左右子节点放入队列中，然后访问队列中的下一个节点，如此反复知道队列为空，打印出来为按层遍历","like_count":0},{"had_liked":false,"id":219182,"user_name":"Geek_b6e449","can_delete":false,"product_type":"c1","uid":1740368,"ip_address":"","ucode":"8296078ED23637","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhr1LrBZQTnn5PgyuHUtia6j6tiahZyk44BWeB5LQIqMgTDBdibGKVVopbJWbz83ZWvyVPz9fBl69rw/132","comment_is_top":false,"comment_ctime":1589962787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589962787","product_id":100017301,"comment_content":"从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多会被访问两次？？？ 请问为什么是两次呢","like_count":0},{"had_liked":false,"id":216821,"user_name":"mqray","can_delete":false,"product_type":"c1","uid":1336634,"ip_address":"","ucode":"15664507AD7033","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","comment_is_top":false,"comment_ctime":1589350003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589350003","product_id":100017301,"comment_content":"&#39;&#39;&#39;<br>二叉树的层序遍历 队列实现<br>&#39;&#39;&#39;<br>def level_order(root):<br>    result, quene = [], []<br>    if not root:<br>        return result<br>    quene.append(root)#先将队列中的元素取出<br>    while quene:<br>        tmp = quene.pop(0)#取出最先进入队列的元素<br>        result.append(tmp.val)#将该元素的值置入result中<br>        if tmp.left:#如果根节点有左子树，则将其左节点置入队列<br>            quene.append(tmp.left)<br>        if tmp.right:#如果当前节点有右子树，则将右节点置入队列<br>            quene.append(tmp.right)<br>    return result<br>","like_count":0},{"had_liked":false,"id":216813,"user_name":"mqray","can_delete":false,"product_type":"c1","uid":1336634,"ip_address":"","ucode":"15664507AD7033","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","comment_is_top":false,"comment_ctime":1589348897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589348897","product_id":100017301,"comment_content":"&#39;&#39;&#39;<br>非递归的前中后序遍历，都是结合栈实现<br>时间复杂度是O(N)，空间复杂度也是O(N)<br>&#39;&#39;&#39;<br>def preorder(root):#前序遍历根左右<br>    result,stack =[],[]<br>    if not root:<br>        return result<br>    while root or stack:<br>        while root:#如果根节点存在<br>            result.append(root.val)#先将根节点的值存入result中<br>            stack.append(root)#将根节点压入栈中<br>            root = root.left<br>        if stack:#栈中还有元素<br>            tmp = stack.pop()#将栈顶元素出栈<br>            root = tmp.right#判断是否有右节点<br>    return result<br><br><br>def inorder(root):#中序遍历 左根右<br>    result,stack =[],[]<br>    if not root:<br>        return result<br>    while root or stack:<br>        while root:<br>            stack.append(root)#将当前节点入栈，但是不放入result中<br>            root = root.left#根节点指向左节点<br>        if stack:<br>            tmp = stack.pop()#将栈顶元素出栈<br>            result.append(tmp.val)#并且将val值压入栈中<br>            root = tmp.right#检查右节点是否存在<br>    return result<br>def postorder(root):#后序遍历 左右根<br>    result, stack ,tag= [], [],None<br>    if not root:<br>        return result<br>    while root or stack:<br>        while root:<br>            stack.append(root)#根节点入栈<br>            root = root.left<br>        tmp = stack.pop()<br>        if tmp.right == None or tmp.right == tag:#如果右节点为空或者说 上一次已经遍历过这个右节点，那就直接放入结果中就好<br>            result.append(tmp.val)<br>            tag = tmp#用tag记录上一次遍历的右节点以防止某个节点只有右子树，而产生的循环遍历<br>            # root = None#这个可以删掉<br>        else:#如果存在右节点<br>            stack.append(tmp)#将该元素再次压入栈中<br>            root = tmp.right<br>        # if stack:#如果栈顶有元素<br>        #     tmp = stack.pop()  # 检查栈顶元素是否有右节点  这种写法右子树容易循环遍历<br>        #     if tmp.right:#如果有右节点，则将root在入栈一次<br>        #         stack.append(tmp)<br>        #         root = tmp.right<br>        #     else:#如果没有右节点，则将把节点值加入到result中<br>        #         result.append(tmp.val)<br>    return result<br>","like_count":0},{"had_liked":false,"id":216511,"user_name":"Destiny","can_delete":false,"product_type":"c1","uid":1258567,"ip_address":"","ucode":"B9F1AE7CDF5C30","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/47/6d212e42.jpg","comment_is_top":false,"comment_ctime":1589274518,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589274518","product_id":100017301,"comment_content":"从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多会被访问两次.    老师好，这个被访问两次该怎么理解呢？有点不太明白。","like_count":0,"discussions":[{"author":{"id":1422682,"avatar":"https://static001.geekbang.org/account/avatar/00/15/b5/5a/bdb77b87.jpg","nickname":"大脸猫不爱吃鱼","note":"","ucode":"23A7D7F34741A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276423,"discussion_content":"把代码自己debug一遍就明白了 递归的过程中 &#39;递&#39;的时候访问一次,&#39;归&#39;再访问一次.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590860949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215698,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1589079790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589079790","product_id":100017301,"comment_content":"学习笔记：之前接触过，所以学起来容易，写重点<br>1. 三个易混淆的概念：高度、深度、层数。和深度类似，只不过道理上要反过来，并且从0数。层数要从1来数<br>2. 存储方式：基于链表、基于数组(完全二叉树)。<br>3. 遍历：前中后序，层序<br>思考题：<br>1. 可以组成3到6层，不考虑数字顺序的话，有132中可能硬算的。评论中说是卡特兰数，验证了一下，他说的对。加上顺序就是132x6！<br>2. 层序遍历用队列。将头节点放入队列。如果队列不为空，则将队头取出打印，然后将队头的左右节点加入队列。就可以完成层序遍历","like_count":0},{"had_liked":false,"id":214101,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1588658984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588658984","product_id":100017301,"comment_content":"跟着老师学习二叉树的概念，老师总觉得真好！","like_count":0},{"had_liked":false,"id":213547,"user_name":"严丹","can_delete":false,"product_type":"c1","uid":1798204,"ip_address":"","ucode":"96FA634D06C3FD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/70/3c/a002615b.jpg","comment_is_top":false,"comment_ctime":1588471537,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588471537","product_id":100017301,"comment_content":"1.高度、深度、层的讲解很形象；<br>2.完全二叉树单独出来的原因解析的让人信服","like_count":0},{"had_liked":false,"id":213236,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1588338370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588338370","product_id":100017301,"comment_content":"按层遍历，不需要用递归算法，只需要按图的广度优先遍历即可。","like_count":0},{"had_liked":false,"id":212812,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1588214549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588214549","product_id":100017301,"comment_content":"60天攻克算法打卡行动第18天<br><br>学习内容 : 二叉树基础（上）：什么样的二叉树适合用数组来存储？（一）<br><br>二叉树的基础知识非常重要，我们把它划分为4个部分进行学习。今天先来学习第一部分：<br>树和二叉树的核心概念和特征。<br><br>1.如何理解树？<br>高度从到到底；深度从低到高；层次从小到大 开始1<br>2.如何理解二叉树？<br>满二叉树；完全二叉树；<br>两种存储方式：二叉链式存储法；基于数组的顺序存储法<br>完全二叉树用数组存储是最节省内存，不需要像链式存储那样要存储额外的左右子节点的指针。<br>二叉树的前中后序遍历 时间复杂度O（n）<br>n!*C[n,2n] &#47;(n+1)；层次遍历就是父节点左子节点右子节点这样的循环遍历","like_count":0},{"had_liked":false,"id":212362,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1588089321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588089321","product_id":100017301,"comment_content":"问题1：没有思路，老师可以分析一下<br>问题2：借助一个队列结构，访问根结点，打印根结点，将根结点的左、右子结点插入队列，从队首弹出结点，打印该结点，并将该结点的左、右子结点插入队列，重复上诉过程，知道队列为空，按层遍历结束。","like_count":0},{"had_liked":false,"id":212043,"user_name":"Amo,","can_delete":false,"product_type":"c1","uid":1675087,"ip_address":"","ucode":"B77CBE5C61CDEB","user_header":"https://static001.geekbang.org/account/avatar/00/19/8f/4f/d42fdb9c.jpg","comment_is_top":false,"comment_ctime":1588051216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588051216","product_id":100017301,"comment_content":"老师，有个疑问，为什么大话数据结构的深度高度是这里层数的意思。以哪个为准呢","like_count":0},{"had_liked":false,"id":208352,"user_name":"😓","can_delete":false,"product_type":"c1","uid":1876000,"ip_address":"","ucode":"29D87626059623","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a0/20/5ff0697b.jpg","comment_is_top":false,"comment_ctime":1587343978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587343978","product_id":100017301,"comment_content":"给定一组数据，比如 1，3，5，6，9，10。你来算算，可以构建出多少种不同的二叉树？<br>解答：1 ：1， 2：2， 3：6， 4：24 ，n：n! 适用于完全二叉树。非完全二叉树使用卡特兰数，用数学归纳法可以得出推导公式","like_count":0},{"had_liked":false,"id":208205,"user_name":"ciciywg","can_delete":false,"product_type":"c1","uid":1028602,"ip_address":"","ucode":"C8177E168B46DB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/fa/83034863.jpg","comment_is_top":false,"comment_ctime":1587302010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587302010","product_id":100017301,"comment_content":"1.是卡特兰数，示例C6=132，可以构建出132种不同的二叉树","like_count":0},{"had_liked":false,"id":207584,"user_name":"侧耳倾听","can_delete":false,"product_type":"c1","uid":1512642,"ip_address":"","ucode":"5BF2A2440B54F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","comment_is_top":false,"comment_ctime":1587112581,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587112581","product_id":100017301,"comment_content":"层次遍历不就是二叉树用数组存储的形式吗","like_count":0},{"had_liked":false,"id":207348,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1587051808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587051808","product_id":100017301,"comment_content":"1、概念<br>\t* <br>高度：最底层叶子节点为0，节点到叶子节点的最长路径<br>\t* <br>深度：根节点为0，根节点到目标节点经过的路径<br>\t* <br>层：深度+1<br><br><br>2、满二叉树：除叶子节点，每个节点都有左右两个子节点<br>3、完全二叉树：最后一层叶子节点都是左节点，并且除了最后一层，其他层节点个数都为最大；深度=k的树，所有叶子节点都在k层或k-1层<br>4、完全二叉树用数组存储不浪费空间，是最节省内存的方式<br>前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。<br>中序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树。<br>后序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。<br>二叉树遍历的时间复杂度是 O(n)","like_count":0},{"had_liked":false,"id":206728,"user_name":"梅端","can_delete":false,"product_type":"c1","uid":1525335,"ip_address":"","ucode":"FEC08731457770","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_is_top":false,"comment_ctime":1586922399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586922399","product_id":100017301,"comment_content":"终于搞懂了树的所有概念，手动实现一遍还是很有必要的，加油。","like_count":0},{"had_liked":false,"id":204404,"user_name":"Geek_6e023f","can_delete":false,"product_type":"c1","uid":1846808,"ip_address":"","ucode":"B1E9DD4FFD642E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erzR5YjFylzkPw6FYUAZXU6dG9nmVyOHtyoY7vpG72OKKic3yianhU41npicxOLmkrtaqfDZ4uQ58efA/132","comment_is_top":false,"comment_ctime":1586396435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586396435","product_id":100017301,"comment_content":"leetcode中根节点的深度是1😣","like_count":0},{"had_liked":false,"id":204100,"user_name":"周小明","can_delete":false,"product_type":"c1","uid":1187141,"ip_address":"","ucode":"A7BA114A53DD3D","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/45/aaad1f9a.jpg","comment_is_top":false,"comment_ctime":1586332548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586332548","product_id":100017301,"comment_content":"第二题： swift<br>思路，打印当前节点，并将当前节点的左右叶子节点添加到数组，在下一次的时候遍历上一次的叶子节点，打印并记录叶子节点的叶子节点，<br>var arr = [0,1,2,3,4,5,6,7,8,9,10]<br>func levelOrder(trace:Array&lt;Int&gt;,levelArray:Array&lt;Int&gt;){<br>    if levelArray.count == 0 {<br>        return;<br>    }<br>    var levelArray2 = [Int]()<br>    for index in levelArray {<br>        print(trace[index])<br>        if index*2 &gt; trace.count {<br>            continue;<br>        }<br>        levelArray2.append(index*2);<br>        <br>        if index*2+1 &gt;= trace.count {<br>            continue;<br>        }<br>        levelArray2.append(index*2+1);<br>    }<br>    levelOrder(trace: trace, levelArray: levelArray2)<br>}<br><br>levelOrder(trace: arr, levelArray: [1])<br>","like_count":0},{"had_liked":false,"id":202317,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1585967454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585967454","product_id":100017301,"comment_content":"&lt;?php<br>&#47;&#47; 定义某一节点<br>class Node {<br>\tpublic $val; &#47;&#47; 保存值<br>\tpublic $leftChild; &#47;&#47; 左节点<br>\tpublic $rightChild; &#47;&#47; 右节点<br>\t<br>\tpublic function __construct($val)<br>\t{<br>\t\t$this-&gt;val = $val;<br>\t\t$this-&gt;leftChild = null;<br>\t\t$this-&gt;right = null;<br>\t}<br>}<br><br>class Tree {<br>\tpublic $root;&#47;&#47; 根节点<br>\tpublic function __construct($node)<br>\t{<br>\t\t$this-&gt;root = $node;<br>\t}<br>\t<br>\t&#47;&#47; 前序遍历<br>\tpublic function preOrder($node) {<br>\t\tif (empty($node)) {<br>\t\t\treturn;<br>\t\t} else {<br>\t\t\tvar_dump($node-&gt;val);<br>\t\t\techo &quot;&lt;br&gt;&quot;;<br>\t\t\t$this-&gt;preOrder($node-&gt;leftChild);<br>\t\t\t$this-&gt;preOrder($node-&gt;rightChild);<br>\t\t}<br>\t}<br>\t&#47;&#47; 中序遍历<br>\tpublic function inOrder($node) {<br>\t\tif (empty($node)) {<br>\t\t\treturn;<br>\t\t} else {<br>\t\t\t$this-&gt;inOrder($node-&gt;leftChild);<br>\t\t\tvar_dump($node-&gt;val);<br>\t\t\techo &quot;&lt;br&gt;&quot;;<br>\t\t\t$this-&gt;inOrder($node-&gt;rightChild);<br>\t\t}<br>\t}<br>\t&#47;&#47; 后序遍历<br>\tpublic function postOrder($node) {<br>\t\tif (empty($node)) {<br>\t\t\treturn;<br>\t\t} else {<br>\t\t\t$this-&gt;postOrder($node-&gt;leftChild);<br>\t\t\t$this-&gt;postOrder($node-&gt;rightChild);<br>\t\t\tvar_dump($node-&gt;val);<br>\t\t\techo &quot;&lt;br&gt;&quot;;<br>\t\t}<br>\t}<br>}<br><br>$nodeA = new Node(&#39;A&#39;);<br>$nodeB = new Node(&#39;B&#39;);<br>$nodeC = new Node(&#39;C&#39;);<br>$nodeD = new Node(&#39;D&#39;);<br>$nodeE = new Node(&#39;E&#39;);<br>$nodeF = new Node(&#39;F&#39;);<br>$nodeG = new Node(&#39;G&#39;);<br><br>&#47;&#47; A的子节点是B,C<br>$nodeA-&gt;leftChild = $nodeB;<br>$nodeA-&gt;rightChild = $nodeC;<br>$nodeB-&gt;leftChild = $nodeD;<br>$nodeB-&gt;rightChild = $nodeE;<br>$nodeC-&gt;leftChild = $nodeF;<br>$nodeC-&gt;rightChild = $nodeG;<br><br><br>$tree = new Tree($nodeA);<br><br>&#47;&#47; 前序遍历<br>echo &quot;&lt;br&gt;前序遍历&lt;br&gt;&quot;;<br>$tree-&gt;preOrder($tree-&gt;root);<br>echo &quot;&lt;br&gt;-------------------------&lt;br&gt;&quot;;<br>&#47;&#47; 中序遍历<br>echo &quot;&lt;br&gt;中序遍历&lt;br&gt;&quot;;<br>$tree-&gt;inOrder($tree-&gt;root);<br>echo &quot;&lt;br&gt;-------------------------&lt;br&gt;&quot;;<br>&#47;&#47; 后序遍历<br>echo &quot;后序遍历&lt;br&gt;&quot;;<br>$tree-&gt;postOrder($tree-&gt;root);<br>echo &quot;&lt;br&gt;-------------------------&lt;br&gt;&quot;;","like_count":0},{"had_liked":false,"id":200900,"user_name":"古月弓虽1993","can_delete":false,"product_type":"c1","uid":1237500,"ip_address":"","ucode":"86122CC701F02A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3jSpV7VvK6NaUH6X1LNYWGsQdFSTu4SwTZ0nQlSYGTOY2FrDCcMic9qFXnu2ZGR88hBlUQK28Whg/132","comment_is_top":false,"comment_ctime":1585670273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585670273","product_id":100017301,"comment_content":"文中完全二叉树的定义不太准确。感觉维基百科的更准确点:<br>在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树","like_count":0},{"had_liked":false,"id":200830,"user_name":"naku","can_delete":false,"product_type":"c1","uid":1528610,"ip_address":"","ucode":"B49EF5B5B38400","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/22/cce9a2e5.jpg","comment_is_top":false,"comment_ctime":1585657798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585657798","product_id":100017301,"comment_content":"卡特兰数、深度优先搜索？  超纲了把，QAQ，我又要恶补了，嗯加油，我可以的","like_count":0},{"had_liked":false,"id":199023,"user_name":"shadow","can_delete":false,"product_type":"c1","uid":1598637,"ip_address":"","ucode":"B5B8018157DA23","user_header":"https://static001.geekbang.org/account/avatar/00/18/64/ad/467b6471.jpg","comment_is_top":false,"comment_ctime":1585476336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585476336","product_id":100017301,"comment_content":"王争老师讲解真是简单明了！当初这块儿知识看书怎么都看不懂，花了很长时间。","like_count":0},{"had_liked":false,"id":198696,"user_name":"zhimin","can_delete":false,"product_type":"c1","uid":1312130,"ip_address":"","ucode":"DF6DFBEF6FA297","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/82/51cd0a50.jpg","comment_is_top":false,"comment_ctime":1585464392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585464392","product_id":100017301,"comment_content":"2 可以用队列来实现， 首先将根节点插入到队列中， 出队列的时候打印该节点，然后取左右子节点加入队列，一致这样递归，直到队列为空。 ","like_count":0},{"had_liked":false,"id":196637,"user_name":"Geek_112e68","can_delete":false,"product_type":"c1","uid":1644011,"ip_address":"","ucode":"82843584C97F43","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WhoLIb4HZtuwErPetUjHj9JVOYFibDXDAcIic3K0CSzJp4zibe1cemraIq1S8YSN5KSCJcUdicm9f4aKTwZHxFBwTw/132","comment_is_top":false,"comment_ctime":1585299268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585299268","product_id":100017301,"comment_content":"树的深度优先、广度优先搜索","like_count":0},{"had_liked":false,"id":195006,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1585127356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585127356","product_id":100017301,"comment_content":"节点的高度 = 当前节点&lt;-&gt;叶子节点.<br>节点的深度 = 根节点&lt;-&gt;当前节点.<br>节点的层数 = 节点的深度+1.<br>树的高度 = 根节点的高度.<br><br>满二叉树：<br>叶子节点全都在最底层，除了叶子节点之外，每个节点都有左右两个子节点。<br><br>完全二叉树：<br>叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大。<br><br>存储一棵二叉树的方法有：<br>1）基于指针或者引用的二叉链式存储法.<br>2) 基于数组的顺序存储法.<br><br>一般的二叉树都是采用链式存储法的.<br>完全二叉树是用数组法来存储的.<br><br>前(中)后序遍历的通用规则是：<br>1）前，中，后序遍历只跟当前顶点有关，跟当前节点的左右孩子节点无关,前序遍历，就是先访问当前顶点；中序遍历就是中间访问当前节点；后序遍历就是后面访问当前节点。<br>2）不管哪种遍历，都是按照先左后右的顺序开始的.<br><br>二叉树的前中后序遍历是一个递归的过程，也可以借助stack实现非递归(迭代）.<br><br>问题1：<br><br>因为没有限定二叉树高度，所以高度是1-6不等的，这可以用全排列来计算，6!= 6*5*3*2*1 = 180种.<br><br>问题2：<br><br>按层遍历，可以按照广度优先遍历的方法。借助队列，遍历每层的节点.<br><br><br>","like_count":0},{"had_liked":false,"id":191254,"user_name":"叮叮叮","can_delete":false,"product_type":"c1","uid":1914201,"ip_address":"","ucode":"956C42489F25DB","user_header":"https://static001.geekbang.org/account/avatar/00/1d/35/59/3a7219de.jpg","comment_is_top":false,"comment_ctime":1584758495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584758495","product_id":100017301,"comment_content":"1、卡特兰数，可以由递推公式得出：若f(n)表示n个节点可以构成的二叉树个数，则：<br>f(n) = f(0)*f(n-1)*2 + f(1)*f(n-2)*2 +... + f(（n-1）&#47;2)*f(（n-1）&#47;2)  【n为奇数】<br>f(n) = f(0)*f(n-1)*2 + f(1)*f(n-2)*2 +... + f(（n&#47;2）-1)*f(（n&#47;2）-1)*2  【n为偶数】<br>f(0)*f(n-1)*2可以理解为根节点左子树节点为0个右子树节点为（n-1）个以及左子树节点为（n-1）个右子树节点为0个的情况，后面同理。<br>2、层次遍历，通过队列实现","like_count":0},{"had_liked":false,"id":190748,"user_name":"Lion","can_delete":false,"product_type":"c1","uid":1004002,"ip_address":"","ucode":"FBC8B2B574446C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/e2/04a0132b.jpg","comment_is_top":false,"comment_ctime":1584689617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584689617","product_id":100017301,"comment_content":"层数遍历，关键点在，每一层遍历到底遍历多少次，<br>遍历的同时准备好下一层遍历的 size<br><br>","like_count":0},{"had_liked":false,"id":190207,"user_name":"小谢","can_delete":false,"product_type":"c1","uid":1879476,"ip_address":"","ucode":"82D54A61D2FDB9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ad/b4/e4dcd4d7.jpg","comment_is_top":false,"comment_ctime":1584614526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584614526","product_id":100017301,"comment_content":"树的专业术语：<br>         根节点、叶子节点、子结点、父节点、兄弟节点(要求同一个父亲)、深度、高度、层数<br>二叉树<br>完全二叉树<br>满二叉树<br>二叉树的遍历:前序中序后序遍历、层次遍历","like_count":0},{"had_liked":false,"id":188531,"user_name":"俺能学个啥","can_delete":false,"product_type":"c1","uid":1026742,"ip_address":"","ucode":"30740C5B58774C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/b6/46a5bbf3.jpg","comment_is_top":false,"comment_ctime":1584365207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584365207","product_id":100017301,"comment_content":"第二题层序遍历，由于是一层一层遍历，所以当遍历到根结点时，我们需要保留其子结点，用于遍历后的操作，当遍历到各自的子结点时同样也需要保存其各自的子结点，由于是从左到右进行遍历打印，先遍历者在下一层遍历时肯定也是先遍历打印，符合先进先出思想，可以借助队列进行保存，在相应位置打印即可","like_count":0},{"had_liked":false,"id":179520,"user_name":"1yx","can_delete":false,"product_type":"c1","uid":1547582,"ip_address":"","ucode":"190E387E00C12A","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/3e/0b9d0cb6.jpg","comment_is_top":false,"comment_ctime":1582020138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582020138","product_id":100017301,"comment_content":"第二题：假设树的高度为3，按层遍历就是原由数组实现的二叉树 [8,9,10,11,12,13,14,15,16,4,5,6,7,2,3,1]再删掉为空的元素。","like_count":0},{"had_liked":false,"id":166016,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1577362346,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577362346","product_id":100017301,"comment_content":"树：<br>\t节点的高度=节点到叶子节点的最长路径（边数）<br>\t节点的深度=根节点到这个节点所经历的边的个数<br>\t节点的层数=节点的深度 + 1<br>\t树的高度=根节点的高度<br> <br><br>二叉树：<br>\t1，二叉树，每个节点最多有两个叉，即两个子节点，分布是左子节点和右子节点。<br>\t2，二叉树不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。<br><br>\t3，满二叉树：叶子节点全部都在最底层，除了叶子节点之外，每个节点都有左右两个子节点，这种二叉树就叫做满二叉树。<br>\t4，完全二叉树：叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大。<br>\t5，二叉树的表示和储存方式：<br>\t\t①：存储一颗二叉树，有两种方法：<br>基于指针或者引用的二叉链表存储法；<br>基于数组的顺序存储法<br>\t\t②：链式存储法：<br> <br>\t每个节点有三个字段，其中一个存储数据，另两个指向左右子节点的指针。这种存储方式比较常用。<br>\t<br>\t\t③：顺序存储法<br> <br>\t把根节点存储在下标i=1的位置，左子节点存储在下标 2*i=2的位置，右子节点存储在2 * I +1=3的位置。以此类推。<br>\t如果节点X存储在数组中下标为i的位置，下标2*i的位置存储的就是左子节点，下标为2*I +1的位置存储的就是右子节点。<br>\t反之，下标为i&#47;2的位置存储就是他的父节点。通过这种方式，只要知道根节点存储位置，就可以通过下标计算，把整棵树都串起来。<br>\t使用数组储存二叉树，如果是一课完全二叉树，所以仅“浪费”一个下标为0的存储位置。如果是非完全二叉树，会浪费比较多的数组存储空间。<br><br>\t ④：完全二叉树<br>如果某颗二叉树是一课完全二叉树，那用数组存储是最节省内存的一种方式。因为数组存储方式不需要像链式存储法那样，要存储额外的左右子节点的指针。这个是完全二叉树要求最后一层子节点都靠左的原因。<br>堆其实也是一种完全二叉树，最常用的存储方式就是数组。<br><br>\t6：二叉树的遍历<br>二叉树遍历是非常常见的面试题，将所有节点都遍历打印出来的经典方法有三种：前序遍历，中序遍历，后序遍历。其中，前，中，后序，表示的是节点于它的左右子树节点遍历打印的先后顺序。<br><br>①：前序遍历：<br>\t对于树中的任意节点来将，先打印这个节点，然后在打印它的左子树，最后打印它的右子树。<br>②：中序遍历：<br>\t对于树中的任意节点来说，先打印它的左子树，然后在打印它本身，最后打印它的右子树。<br>③：后序遍历：<br>\t对于树中的任意节点来说，先打印它的左子树，然后在打印它的右子树，最后打印这个节点本身。<br><br>实际上，二叉树的前，中，后遍历就是一个递归的过程。<br><br>前序遍历的递推公式：<br>preOrder(r) = print r-&gt;preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)<br><br>中序遍历的递推公式：<br>inOrder(r) = inOrder(r-&gt;left)-&gt;print r-&gt;inOrder(r-&gt;right)<br><br>后序遍历的递推公式：<br>postOrder(r) = postOrder(r-&gt;left)-&gt;postOrder(r-&gt;right)-&gt;print r<br><br>\t7：二叉树遍历的时间复杂度<br>每个节点最多会被访问两次，所以遍历操作的时间复杂度，更节点的个数n成正比，就是说二叉树遍历的时间复杂度是O(n)。<br>","like_count":0},{"had_liked":false,"id":162958,"user_name":"dream","can_delete":false,"product_type":"c1","uid":1117793,"ip_address":"","ucode":"65B33D32FA8BE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/61/ae68f8eb.jpg","comment_is_top":false,"comment_ctime":1576634823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576634823","product_id":100017301,"comment_content":"老师，请问一下，普通树或者二叉树，怎么用链表方式实现一棵树，并进行添加或者删除呢？实现的思想可以理解，但是怎么用代码实现呢？","like_count":0},{"had_liked":false,"id":162953,"user_name":"梨子苹果","can_delete":false,"product_type":"c1","uid":1716067,"ip_address":"","ucode":"3666813FEE31D3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","comment_is_top":false,"comment_ctime":1576634394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576634394","product_id":100017301,"comment_content":"补充下层次遍历的方案，建立一个队列，先入队根节点，出队根节点，如果根节点有左子节点，将左子节点加入，如果有右子节点将其加入队列，开始出队左子节点，如果左子节点有左子节点加入队列，如果左子节点有右子节点，右子入队，依次操作直到队列为空。","like_count":0},{"had_liked":false,"id":162508,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1576546691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576546691","product_id":100017301,"comment_content":"二叉树的层次遍历可以通过队列实现，首先将根节点入队，然后遍历队列，出队，将其左右子节点入队，继续如上操作直至队列为空。","like_count":0},{"had_liked":false,"id":162220,"user_name":"仰望","can_delete":false,"product_type":"c1","uid":1581910,"ip_address":"","ucode":"05FCD021A49CFB","user_header":"https://static001.geekbang.org/account/avatar/00/18/23/56/63c08392.jpg","comment_is_top":false,"comment_ctime":1576479702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576479702","product_id":100017301,"comment_content":"“前、中、后序遍历的顺序图，每个节点最多会被访问两次”<br>能再详细说说吗？没看出来。一个节点怎么就最多被访问两次了？什么什么是一次，什么时候是两次？","like_count":0},{"had_liked":false,"id":161941,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1576410121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576410121","product_id":100017301,"comment_content":"问题二可以借助队列，从根节点入队，队头出队，访问该节点，子节点入队，直到队列为空","like_count":0},{"had_liked":false,"id":161854,"user_name":"毛启圣","can_delete":false,"product_type":"c1","uid":1330056,"ip_address":"","ucode":"233DA95ED28C11","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","comment_is_top":false,"comment_ctime":1576379934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576379934","product_id":100017301,"comment_content":"通过插入去构建二叉树，根元素一个位置，6个数选择；下个节点有2个位置选择，左或者右，5个数选择； 类推<br>加一个节点，相对于用一个空节点 创造 2个空节点位置，位置选择+1；<br><br>6*1 * 5*2 *4*3 * 3*4 * 2*5 * 1*6<br><br>1到n的平方积，不知道对不？<br><br><br>6 *(5* 2) *(4*2) + (3*2) *(2*2)*<br><br>如果二叉数 左&lt;中&lt;右。取任意一个元素作为根节点，然后把这个有序数组拉起来","like_count":0},{"had_liked":false,"id":161061,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1576111744,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1576111744","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":160922,"user_name":"mkii","can_delete":false,"product_type":"c1","uid":1674466,"ip_address":"","ucode":"534914EC7EA304","user_header":"https://static001.geekbang.org/account/avatar/00/19/8c/e2/48f4e4fa.jpg","comment_is_top":false,"comment_ctime":1576060711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576060711","product_id":100017301,"comment_content":"满二叉树：除了叶子节点，其他节点都有两个子节点<br>完全二叉树：最后一层的节点全部靠左<br>平衡二叉树：左右子树高度差不超过1<br>完全二叉树可以实现数组存放，只会浪费第一个位置的空间。<br><br>二叉树遍历：<br>前序：根左右<br>中序：左根右<br>后序：左右根<br>描述的是根的位置，左在右前<br><br>按层遍历：使用一个辅助队列<br>","like_count":0},{"had_liked":false,"id":160567,"user_name":"渴望做梦","can_delete":false,"product_type":"c1","uid":1398219,"ip_address":"","ucode":"9EB47530A69C91","user_header":"https://static001.geekbang.org/account/avatar/00/15/55/cb/1efe460a.jpg","comment_is_top":false,"comment_ctime":1575976307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575976307","product_id":100017301,"comment_content":"所以，如果某棵二叉树是一棵完全二叉树，那用数组存储无疑是最节省内存的一种方式。因为数组的存储方式并不需要像链式存储法那样，要存储额外的左右子节点的指针。这也是为什么完全二叉树会单独拎出来的原因，也是为什么完全二叉树要求最后一层的子节点都靠左的原因。<br><br>老师，恕我愚钝，我看完这段话还是没明白为啥完全二叉树要求最后一层子节点都靠左？","like_count":0},{"had_liked":false,"id":159802,"user_name":"1011001","can_delete":false,"product_type":"c1","uid":1573301,"ip_address":"","ucode":"8658491E9386FB","user_header":"https://static001.geekbang.org/account/avatar/00/18/01/b5/3fd2a38d.jpg","comment_is_top":false,"comment_ctime":1575794298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575794298","product_id":100017301,"comment_content":"bfs版的层次遍历貌似大家都会， 给提供给一个dfs的层次遍历 对应leetcode 102<br>import queue<br><br>class Solution:<br>    def dfs(self, root, level):<br>        if root is None:<br>            return <br>        if len(self.res) &lt; level+1:<br>            res = [root.val]<br>            self.res.append(res)<br>        else:<br>            self.res[level].append(root.val)<br>        <br>        self.dfs(root.left, level+1)<br>        self.dfs(root.right, level+1)<br>        <br>        <br>    def levelOrder(self, root: TreeNode) -&gt; List[List[int]]:<br>        self.res = []<br>        self.dfs(root, 0)<br>        return self.res    ","like_count":0},{"had_liked":false,"id":157379,"user_name":"啸风","can_delete":false,"product_type":"c1","uid":1315934,"ip_address":"","ucode":"6DBCA0EC5D4085","user_header":"https://static001.geekbang.org/account/avatar/00/14/14/5e/25f5f8a8.jpg","comment_is_top":false,"comment_ctime":1575126003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575126003","product_id":100017301,"comment_content":"官方出的地图后序遍历有误，地图中的顺序是 右-左-根<br><br>后序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身。<br>","like_count":0},{"had_liked":false,"id":156212,"user_name":"走过你的风～","can_delete":false,"product_type":"c1","uid":1120992,"ip_address":"","ucode":"FBCBC612A93034","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/e0/12d3deeb.jpg","comment_is_top":false,"comment_ctime":1574837150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574837150","product_id":100017301,"comment_content":"二叉树最多只能拥有两个子节点。二叉树又分为满二叉树，完全二叉树和非完全二叉树。<br><br>满二叉树：每个节点都有两个子节点。<br><br>完全二叉树：最后一层的 节点的子节点都是靠左，而其他层的节点都是满节点。<br><br>完全二叉树比较适合使用数组来存储，因为可以节约空间。而非完全二叉树不太适合用数组存储，因为比较浪费空间。<br><br>遍历二叉树的时间复杂度为O(n)。<br><br>而遍历二叉树分为三种：<br><br>前序遍历：父节点-左边子节点-右边子节点；<br><br>中序遍历：左边子节点-父节点-右边子节点；<br><br>后续遍历：左边子节点-右边子节点-父节点；<br><br>遍历的方式最好使用递归最方便。","like_count":0},{"had_liked":false,"id":155898,"user_name":"Geek_949cc1","can_delete":false,"product_type":"c1","uid":1690476,"ip_address":"","ucode":"F8ACDBF2FA8CC2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKFRiaFrpOTVBuKicMficasBFuF2VY7EnUnLeFcvIn0R5OiaQsOcpJHNM5TusoPHMjIvSfia46c0EWH9mQ/132","comment_is_top":false,"comment_ctime":1574776187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574776187","product_id":100017301,"comment_content":"树的深度：就是从上往下数，经历的边数。<br>树的高度：就是从下往上数，经历的边数。<br>树的层数：就是需要把根节点算作为1，然后在依次往下数<br>满二叉树：就是除了叶子节点以外，每一个父节点都有左右两个子节点<br>完全二叉树：出树的最高一层意外的层数都满足满二叉树的条件。在最后一层从左往右也满足满二叉树的条件（最末可以只含有左子节点）。<br>","like_count":0},{"had_liked":false,"id":155248,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1574671402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574671402","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":155139,"user_name":"握不住手中沙","can_delete":false,"product_type":"c1","uid":1097132,"ip_address":"","ucode":"F194E47C4D42C9","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/ac/49494ed8.jpg","comment_is_top":false,"comment_ctime":1574650291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574650291","product_id":100017301,"comment_content":"思考题：<br>1、总共可以构建出n!种二叉树<br>2、树的层序遍历可借助队列来实现，根节点先入队列，然后循环从队列中pop节点，将pop出来的节点的左子节点先入队列，右节点后入队列，依次循环，直到队列为空，遍历结束","like_count":0},{"had_liked":false,"id":150657,"user_name":"乾坤瞬间","can_delete":false,"product_type":"c1","uid":1683130,"ip_address":"","ucode":"15BDCF29CBF8EB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","comment_is_top":false,"comment_ctime":1573575893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573575893","product_id":100017301,"comment_content":"老师，这个完全二叉树得概念有些模糊，应该更准确的讲，除了去最后一层是满二叉树，最后一层可以有若干个左叶子节点组成的树是完全二叉树，满二叉树是完全二叉树得一种特殊形式","like_count":0},{"had_liked":false,"id":150617,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1573568858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573568858","product_id":100017301,"comment_content":"如果说构建的树是完全二叉树，使用的是数组来存储，那么其实也就是计算出数组中元素有多少种组合的方式<br>","like_count":0},{"had_liked":false,"id":150228,"user_name":"高坤","can_delete":false,"product_type":"c1","uid":1689197,"ip_address":"","ucode":"9BCD93629F7B76","user_header":"https://static001.geekbang.org/account/avatar/00/19/c6/6d/65ec48f1.jpg","comment_is_top":false,"comment_ctime":1573481755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573481755","product_id":100017301,"comment_content":"编号 3 的二叉树中，叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫作完全二叉树。<br>怎么理解“其他层的节点个数都要达到最大”这句话？","like_count":0},{"had_liked":false,"id":150141,"user_name":"飞舞的大虾","can_delete":false,"product_type":"c1","uid":1630776,"ip_address":"","ucode":"FED7EA73A95D44","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqrevaGNic82Prv4dqTXCqoA3vqRCx9FcExK7qRS6CnibAiaOYafPbD4sbhRxZT5WQGtRjPTw948bJIA/132","comment_is_top":false,"comment_ctime":1573468034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573468034","product_id":100017301,"comment_content":"func printLevelOrder(_index int, _arr []int) {<br>\tif _index &gt;= len(_arr) {<br>\t\treturn<br>\t}<br>\tprintLevelOrder(_index*2, _arr)<br>\tprintLevelOrder(_index*2+1, _arr)<br>\tif _index*2 &lt; len(_arr) {<br>\t\tfmt.Println(_arr[_index*2])<br>\t}<br>\tif _index*2+1 &lt; len(_arr) {<br>\t\tfmt.Println(_arr[_index*2+1])<br>\t}<br>\tif _index == 1 {<br>\t\tfmt.Println(_arr[_index])<br>\t}<br>}<br>如果是按层遍历,我这样也可以实现,但是感觉判断跟节点的地方有些生硬,也没有想到更好的方式,希望老师能够指点一下","like_count":0},{"had_liked":false,"id":149304,"user_name":"徐帅","can_delete":false,"product_type":"c1","uid":1448864,"ip_address":"","ucode":"BDF904280E2330","user_header":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","comment_is_top":false,"comment_ctime":1573185948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573185948","product_id":100017301,"comment_content":"关于问题2，先通过先中后其中的任意一种，保存节点内容到数组里，层信息就是数组下标，然后再遍历数组即可，代码更直观：<br>int arr[7] = {0};<br>void CengFun(Node * pNode, int nCeng = 1)<br>{<br>\tif (!pNode)<br>\t{<br>\t\treturn;<br>\t}<br>\tarr[nCeng] = pNode-&gt;nData;<br>\tCengFun(pNode-&gt;pSonL, 2 * nCeng);<br>\tCengFun(pNode-&gt;pSonR, 2 * nCeng + 1);<br>}","like_count":0},{"had_liked":false,"id":148657,"user_name":"技术小生","can_delete":false,"product_type":"c1","uid":1692743,"ip_address":"","ucode":"18B7751498029F","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/47/0deb44d6.jpg","comment_is_top":false,"comment_ctime":1573045344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573045344","product_id":100017301,"comment_content":"二叉树链表存储为什么用左右子节点指针的方式，而不用父节点指针的方式呢","like_count":0},{"had_liked":false,"id":148572,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1573032243,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573032243","product_id":100017301,"comment_content":"第一题：6个节点可以组成132种形态的二叉树，每种形态，6个数的组合有6！个所以总共有6！*132=95040个不同的二叉树。不知理解是否有误？<br>","like_count":0,"discussions":[{"author":{"id":1066430,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","nickname":"3W1H","note":"","ucode":"F6B4864128103C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91180,"discussion_content":"132种形态是怎么算出来了的呢？求指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576816797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145668,"user_name":"killer","can_delete":false,"product_type":"c1","uid":1141036,"ip_address":"","ucode":"22BF63C05CFACE","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/2c/046c7265.jpg","comment_is_top":false,"comment_ctime":1572339963,"is_pvip":false,"replies":[{"id":"56457","content":"多个父节点？好像树不是这么定义的呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572487411,"ip_address":"","comment_id":145668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572339963","product_id":100017301,"comment_content":"如果一个节点有多个父节点可以组成树的结构吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472518,"discussion_content":"多个父节点？好像树不是这么定义的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572487411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142221,"user_name":"西潮","can_delete":false,"product_type":"c1","uid":1630957,"ip_address":"","ucode":"6836029EF7B895","user_header":"https://static001.geekbang.org/account/avatar/00/18/e2/ed/bbd11515.jpg","comment_is_top":false,"comment_ctime":1571314406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571314406","product_id":100017301,"comment_content":"没有人对node的实现有疑问吗。这个left与right的指针&#47;引用定义，会浪费很多的空间","like_count":0},{"had_liked":false,"id":141988,"user_name":"夕林语","can_delete":false,"product_type":"c1","uid":1264180,"ip_address":"","ucode":"B57681D0C73E1B","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/34/1faac99b.jpg","comment_is_top":false,"comment_ctime":1571276287,"is_pvip":false,"replies":[{"id":"54899","content":"对的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571360065,"ip_address":"","comment_id":141988,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1571276287","product_id":100017301,"comment_content":"按层遍历不就是BFS","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470946,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571360065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141162,"user_name":"刘楠","can_delete":false,"product_type":"c1","uid":1120773,"ip_address":"","ucode":"9F19D44CBEE039","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/05/f154d134.jpg","comment_is_top":false,"comment_ctime":1571126171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571126171","product_id":100017301,"comment_content":"按层遍历<br>Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;();<br>    queue.add(root);<br>    while (!queue.isEmpty()) {<br>        root = queue.poll();<br>        System.out.print(root.val+&quot;-&quot;);<br>        if (root.left != null) {<br>            queue.add(root.left);<br>        }<br>        if (root.right != null) {<br>            queue.add(root.right);<br>        }<br>    }","like_count":0},{"had_liked":false,"id":141160,"user_name":"刘楠","can_delete":false,"product_type":"c1","uid":1120773,"ip_address":"","ucode":"9F19D44CBEE039","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/05/f154d134.jpg","comment_is_top":false,"comment_ctime":1571126081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571126081","product_id":100017301,"comment_content":"按层遍历，可以用一个队列，根节点先入队，循环判断队列是否为空，循环中，把节点出队，节点的左，右节点入队，重复这样","like_count":0},{"had_liked":false,"id":136634,"user_name":"别天神","can_delete":false,"product_type":"c1","uid":1107606,"ip_address":"","ucode":"42A08D6EF5C59A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/96/eb143e46.jpg","comment_is_top":false,"comment_ctime":1569486202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569486202","product_id":100017301,"comment_content":"问题1：我怎么感觉n!不对，假设只有2个节点，可以构建 左：1-2，右：1-2，左：2-1，右：2-1这就有4种了","like_count":0},{"had_liked":false,"id":136409,"user_name":"yupf","can_delete":false,"product_type":"c1","uid":1426903,"ip_address":"","ucode":"CED8AF7BCF9377","user_header":"https://static001.geekbang.org/account/avatar/00/15/c5/d7/f7a5775f.jpg","comment_is_top":false,"comment_ctime":1569425147,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1569425147","product_id":100017301,"comment_content":"看不明白顺序存储H不应该是11吗？怎么是13了？","like_count":0,"discussions":[{"author":{"id":1519202,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/62/7a5ace3c.jpg","nickname":"Justin","note":"","ucode":"CBABD8D08A9DB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86317,"discussion_content":"我也发现应该是11吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576593802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134671,"user_name":"zcqshine","can_delete":false,"product_type":"c1","uid":1007000,"ip_address":"","ucode":"9DABA78369344E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/98/98fe8de3.jpg","comment_is_top":false,"comment_ctime":1568889681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568889681","product_id":100017301,"comment_content":"学习了，二叉树的广度遍历。","like_count":0},{"had_liked":false,"id":133592,"user_name":"ITACHI","can_delete":false,"product_type":"c1","uid":1260500,"ip_address":"","ucode":"4EE419128ED9E8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/d4/e4bfb25f.jpg","comment_is_top":false,"comment_ctime":1568616435,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1568616435","product_id":100017301,"comment_content":"问题1根据各位大佬的解答，我的理解是节点个数对应可能的二叉树的形状组成的是卡特兰数：<br>1个节点：1种   2个节点：1种，3个节点：2种，4个节点：5种，5个节点：14种。。。<br>组成的是：1，1，2，5，14，42，132...  这样的卡特兰数。<br>但是有个愚蠢的疑问：是怎么确定是卡特兰数的？推出来的么？求解惑，谢谢！","like_count":0,"discussions":[{"author":{"id":1086413,"avatar":"https://static001.geekbang.org/account/avatar/00/10/93/cd/dbafc7d1.jpg","nickname":"全麦小面包","note":"","ucode":"823C65BF366097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109406,"discussion_content":"2个节点为什么只有1种可能？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577691614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132838,"user_name":"A米fans1111","can_delete":false,"product_type":"c1","uid":1239504,"ip_address":"","ucode":"99BE48333DD919","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/d0/af96c86a.jpg","comment_is_top":false,"comment_ctime":1568249611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568249611","product_id":100017301,"comment_content":"想知道如何算tree3","like_count":0},{"had_liked":false,"id":130979,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1567588290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567588290","product_id":100017301,"comment_content":"遍历二叉树的空间复杂度应为n","like_count":0},{"had_liked":false,"id":127034,"user_name":"LEmily","can_delete":false,"product_type":"c1","uid":1565454,"ip_address":"","ucode":"C0D8D0B789F5F2","user_header":"https://static001.geekbang.org/account/avatar/00/17/e3/0e/7df4ca45.jpg","comment_is_top":false,"comment_ctime":1566540398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566540398","product_id":100017301,"comment_content":"有前端小伙伴么<br>class Node {<br>  constructor (props) {<br>    this.val = props.val;<br>    this.left = props.left || null;<br>    this.right = props.right || null;<br>  }<br>}<br><br>const a = new Node({ val: 1 })<br>const b = new Node({ val: 2 })<br>const c = new Node({ val: 3 })<br>const d = new Node({ val: 4 })<br>const e = new Node({ val: 5 })<br>const f = new Node({ val: 6 })<br>const g = new Node({ val: 7 })<br>const h = new Node({ val: 8 })<br><br>a.left = b;<br>a.right = c;<br>b.left = d;<br>b.right = e;<br>c.left = f;<br>c.right = g;<br>d.left = h;<br><br>const bfs = (mapArr = [a]) =&gt; {<br>  if (mapArr.length === 0) return;<br><br>  const rootNode = mapArr.shift()<br>  console.log(rootNode.val);<br><br>  rootNode.left &amp;&amp; mapArr.push(rootNode.left)<br>  rootNode.right &amp;&amp; mapArr.push(rootNode.right)<br><br>  bfs(mapArr);<br>}<br>","like_count":0},{"had_liked":false,"id":122749,"user_name":"大头","can_delete":false,"product_type":"c1","uid":1011656,"ip_address":"","ucode":"491583C0980A26","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6f/c8/4183a146.jpg","comment_is_top":false,"comment_ctime":1565511449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565511449","product_id":100017301,"comment_content":"Mark ","like_count":0},{"had_liked":false,"id":122120,"user_name":"sTone","can_delete":false,"product_type":"c1","uid":1335643,"ip_address":"","ucode":"2944A230620076","user_header":"https://static001.geekbang.org/account/avatar/00/14/61/5b/9ad27865.jpg","comment_is_top":false,"comment_ctime":1565307584,"is_pvip":false,"replies":[{"id":"45694","content":"二叉树不是链表存储吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565909089,"ip_address":"","comment_id":122120,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1565307584","product_id":100017301,"comment_content":"是不是目前只有两种存储，数组和链表？栈，堆和二叉树等等都是在这两个存储上的算法？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462108,"discussion_content":"二叉树不是链表存储吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565909089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7172,"discussion_content":"数组和链表是物理结构，关于队列，栈，树，图这些是逻辑结构，其实简单理解就是底层是数组或链表构成的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567414380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104407,"avatar":"https://static001.geekbang.org/account/avatar/00/10/da/17/69cca649.jpg","nickname":"旗木卡卡","note":"","ucode":"2C05BFE91D6892","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5684,"discussion_content":"链表是线性表，二叉树存储是非线性表。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566437135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120935,"user_name":"Geek_86533a","can_delete":false,"product_type":"c1","uid":1610333,"ip_address":"","ucode":"6961C429E8953A","user_header":"","comment_is_top":false,"comment_ctime":1565015137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565015137","product_id":100017301,"comment_content":"先序、中序、后序可以看成深度优先，层次遍历可以看成广度优先。","like_count":0},{"had_liked":false,"id":114781,"user_name":"kdb_reboot","can_delete":false,"product_type":"c1","uid":1003594,"ip_address":"","ucode":"4C56FCA563FCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/4a/04fef27f.jpg","comment_is_top":false,"comment_ctime":1563407200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563407200","product_id":100017301,"comment_content":"第二题,  bst 和队列结合","like_count":0},{"had_liked":false,"id":114271,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1563264065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563264065","product_id":100017301,"comment_content":"按层遍历可以通过队列实现","like_count":0},{"had_liked":false,"id":113721,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1563147778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563147778","product_id":100017301,"comment_content":"深度优先搜索和前中后感觉没什么关系？","like_count":0},{"had_liked":false,"id":107612,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1561564940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561564940","product_id":100017301,"comment_content":"思考题1：<br>根据高度计算种类，6个节点二叉树，最大高度为5，最小高度为2，于是有：<br>(1)高度=2的二叉树，种类 = 4<br>(2)高度=3的二叉树，种类=6 * 8 =48<br>(3)高度=4的二叉树，种类=5 * 16 = 80<br>(4)高度=5的二叉树，种类=32<br>因此，6个节点的二叉树总共构建4+48+80+32=164种不同的二叉树<br><br>思考题2：<br>层次遍历算法：<br>(1)利用一个队列来存放遍历过的结点。<br>(2)首先访问根节点，然后根结点入队列。<br>(3)如果队列不为空，则继续以下步骤，否则结束。<br>(4)从队列中取出一个结点<br>(5)访问该节点的左子树的根节点，如果结点不为NULL，则左子树根节点入队列<br>(6)访问该节点的右子树的根节点，如果结点不为NULL，则右子树根节点入队列<br>(7)重复(3)-(6)步，完成按层遍历。","like_count":0},{"had_liked":false,"id":106984,"user_name":"James Scott","can_delete":false,"product_type":"c1","uid":1255048,"ip_address":"","ucode":"E673BD69503693","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/88/e8098480.jpg","comment_is_top":false,"comment_ctime":1561431707,"is_pvip":false,"replies":[{"id":"38955","content":"自己debug一下吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1561598545,"ip_address":"","comment_id":106984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561431707","product_id":100017301,"comment_content":"您好，王老师，我在您GitHub中关于二叉树的代码中，有关于删除节点部分有个问题：该代码为：<br>p.data = minp.data;<br>p = minp;<br>pp = minpp;<br>为什么还要最后一步呢？我感觉第三行代码好像没有用，是多余的","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455312,"discussion_content":"自己debug一下吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561598545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106529,"user_name":"梓航(﹏)","can_delete":false,"product_type":"c1","uid":1027773,"ip_address":"","ucode":"8ECA3C994D697C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/bd/d12f8907.jpg","comment_is_top":false,"comment_ctime":1561339487,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1561339487","product_id":100017301,"comment_content":"请问下这三种遍历都用在哪些场景下呢？","like_count":0},{"had_liked":false,"id":102456,"user_name":"CozyThinker","can_delete":false,"product_type":"c1","uid":1041217,"ip_address":"","ucode":"996D8B8C993C5C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e3/41/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1560224002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560224002","product_id":100017301,"comment_content":"前序遍历，中序遍历，后续遍历可以通过递归完成<br>按层遍历比较麻烦，不可通过递归<br>递归的好处是简洁，只要公式推导出来就比较容易理解<br><br>认真看了一遍此篇教程，学到以下几点<br>1. 树的概念：满二叉树，完全二叉树，非完全二叉树，尤其是对完全二叉树的由来：根据数组存储方式来定义的<br>2. 树的遍历：前，中，后","like_count":0},{"had_liked":false,"id":95286,"user_name":"MarlboroKay","can_delete":false,"product_type":"c1","uid":1099304,"ip_address":"","ucode":"3F6B5861795A61","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/28/d6f49ec2.jpg","comment_is_top":false,"comment_ctime":1558009524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558009524","product_id":100017301,"comment_content":"前序遍历：中左右；<br>中序遍历：左中右；<br>后序遍历：左右中；","like_count":0},{"had_liked":false,"id":93165,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1557411932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557411932","product_id":100017301,"comment_content":"老师,中序遍历和后序遍历和图不一致,图应该反了","like_count":0},{"had_liked":false,"id":93062,"user_name":"Shawn","can_delete":false,"product_type":"c1","uid":1014729,"ip_address":"","ucode":"B95D7B54465DE4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/c9/75c9002e.jpg","comment_is_top":false,"comment_ctime":1557387419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557387419","product_id":100017301,"comment_content":"思考题1，为什么是完全二叉树呀？从哪里推测出来的那？","like_count":0},{"had_liked":false,"id":87890,"user_name":"马源","can_delete":false,"product_type":"c1","uid":1183937,"ip_address":"","ucode":"9B12311D6BA5A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/c1/18b41ced.jpg","comment_is_top":false,"comment_ctime":1555744268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555744268","product_id":100017301,"comment_content":"满二叉树、完全二叉树适用于连续存储<br>将逻辑结构转换成不同的物理结构形式，会得出看待问题的不同角度如:把二叉树转换成连续数组。受教了","like_count":0},{"had_liked":false,"id":83469,"user_name":"Amark","can_delete":false,"product_type":"c1","uid":1121326,"ip_address":"","ucode":"E5F48633654002","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/2e/93812642.jpg","comment_is_top":false,"comment_ctime":1554611387,"is_pvip":false,"replies":[{"id":"30238","content":"是的 不是一回事 二叉树没啥特殊要求","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554680134,"ip_address":"","comment_id":83469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554611387","product_id":100017301,"comment_content":"刚开始把下一节的二叉查找树理解成二叉树，以为二叉树必须是左子树小于结点，右子树大于结点，其实并不是，只要满足这样的结构即可对吧老师，至于二叉树里面的元素的结构顺序，那是另外一回事？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446036,"discussion_content":"是的 不是一回事 二叉树没啥特殊要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554680134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79528,"user_name":"Ben","can_delete":false,"product_type":"c1","uid":1252353,"ip_address":"","ucode":"70351D4FAE47F7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/01/5aaaf5b6.jpg","comment_is_top":false,"comment_ctime":1553505565,"is_pvip":false,"replies":[{"id":"29099","content":"别计较那么多了 本身就不好定义“访问”两个字的意思，不管是三次还是两次，时间复杂度是相同的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553563024,"ip_address":"","comment_id":79528,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553505565","product_id":100017301,"comment_content":"大牛, 遍历的时间复杂度哪里, 按照流程图来看的话, 可能被父节点, 左右子节点各访问一次, 最多就是三次.<br>从代码里理解, 左右子节点分别递归访问一次, 最多也就是两次了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444529,"discussion_content":"别计较那么多了 本身就不好定义“访问”两个字的意思，不管是三次还是两次，时间复杂度是相同的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553563024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78863,"user_name":"邓超🏊","can_delete":false,"product_type":"c1","uid":1396550,"ip_address":"","ucode":"A1E04704368B60","user_header":"https://static001.geekbang.org/account/avatar/00/15/4f/46/85332f6e.jpg","comment_is_top":false,"comment_ctime":1553263060,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1553263060","product_id":100017301,"comment_content":"我一直有个疑问，遍历二叉树，五行代码基本上就能实现，为什么都说很难呢～～～","like_count":0,"discussions":[{"author":{"id":1610333,"avatar":"","nickname":"Geek_86533a","note":"","ucode":"6961C429E8953A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4070,"discussion_content":"递归的比较容易，非递归的稍微难一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565091846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78703,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1553220456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553220456","product_id":100017301,"comment_content":"1 最少3层，最多6层.<br>\t3层: 1+2+3 (4，第三层有4种组合).<br>\t4层: 1+2+2+1 (6*2,第三层有6种组合,第4层有2种组合), 1+1+2+2(6*2 第2层有2种组合，第四层6种组合) .<br>\t5层: 1+2+1+1+1,1+1+2+1+1,1+1+1+2+1.  类似，不推导了<br>\t6层: 1+1+1+1+1+1 (2*2*2*2*2=32 .第2&#47;3&#47;4&#47;5&#47;6都有2种组合)<br><br>2 iter(A)-&gt; if(left)-&gt;iter(brother) else iter(father-&gt;brother.)","like_count":0},{"had_liked":false,"id":78471,"user_name":"白马游","can_delete":false,"product_type":"c1","uid":1437602,"ip_address":"","ucode":"1DFDC67A0D6C26","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Y02NkLTFu18FyhzMCBoY3Ac6ZW3NkYKgicwWkPVybMwbGJz3ibH3XuRqjCR9k0qxMibNXulGn7Xd9y6Pv26AYZBTA/132","comment_is_top":false,"comment_ctime":1553155116,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553155116","product_id":100017301,"comment_content":"面向对象的语言需要先建立一棵树<br>&#47;&#47;定义二叉树的节点<br>class Node{<br>    public $left = null;<br>    public $right = null;<br>    public $data = &#39;&#39;;<br>    public function __construct($data){<br>        $this-&gt;data = $data;<br>    }<br>    &#47;&#47;二叉树的添加<br>    function buildTree(Node $lchild = Null,Node $rchild = Null){<br>        if(!is_null($lchild)){<br>            $this-&gt;left = $lchild;<br>        }<br>        if(!is_null($rchild)){<br>            $this-&gt;right = $rchild;<br>        }<br>    }<br>}","like_count":0},{"had_liked":false,"id":76388,"user_name":"Dwyane","can_delete":false,"product_type":"c1","uid":1110081,"ip_address":"","ucode":"FD5B9DF96A5BDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/41/f6153c7a.jpg","comment_is_top":false,"comment_ctime":1552581604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552581604","product_id":100017301,"comment_content":"重刷","like_count":0},{"had_liked":false,"id":75415,"user_name":"Geek_bb0854","can_delete":false,"product_type":"c1","uid":1326043,"ip_address":"","ucode":"080AD1CF143B4D","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/db/837138ad.jpg","comment_is_top":false,"comment_ctime":1552394054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552394054","product_id":100017301,"comment_content":"课后思考1，是否可以用递归计算：<br>def fun1(x):<br>    if x==1 or x==2:<br>        return x<br>    return 2*fun1(x-1)+fun1(x-2)","like_count":0},{"had_liked":false,"id":74272,"user_name":"Dwyane","can_delete":false,"product_type":"c1","uid":1110081,"ip_address":"","ucode":"FD5B9DF96A5BDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/41/f6153c7a.jpg","comment_is_top":false,"comment_ctime":1552157920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552157920","product_id":100017301,"comment_content":"谢谢老师","like_count":0},{"had_liked":false,"id":72504,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551661587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551661587","product_id":100017301,"comment_content":"开始的时候没理解题目，看了下评论豁然开朗，1.笨办法推导出n的阶乘，但如果有重复元素就不对了，具体看下面评论说是卡特兰数，有点看不懂","like_count":0},{"had_liked":false,"id":70697,"user_name":"Phoenix","can_delete":false,"product_type":"c1","uid":1005368,"ip_address":"","ucode":"C51BE4C948755B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/38/ba6a106f.jpg","comment_is_top":false,"comment_ctime":1551166367,"is_pvip":false,"replies":[{"id":"25401","content":"你可以搜下：DOM Tree","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551232525,"ip_address":"","comment_id":70697,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551166367","product_id":100017301,"comment_content":"本人小白，感觉二叉树前序中序后序遍历偏于理论，老师只说了很重要，具体还是不理解，能否结合具体场景举例，可能更加易于理解","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440781,"discussion_content":"你可以搜下：DOM Tree","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551232525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70209,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1551053218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551053218","product_id":100017301,"comment_content":"完全二叉树最后子节点靠左结合数组就好理解这个结构设计的初衷了","like_count":0},{"had_liked":false,"id":67830,"user_name":"某构称","can_delete":false,"product_type":"c1","uid":1351190,"ip_address":"","ucode":"D2CE99C2CEE380","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epib8yjEIes0JqPoyIvzxEpud79AvsiaXTPPkhYGOsV2VLQycmSJCUl4lss4biaiacmwx4Sicur3nC1Q5w/132","comment_is_top":false,"comment_ctime":1550288578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550288578","product_id":100017301,"comment_content":"在二叉树的顺序存储法中，假如根结点放在i=0，左子节点放在2*（i+1）-1中，右子节点放在2*（i+1）中，则反推根结点为r=i&#47;2-1，但是此时需要做判断r是否小于0，即r=i&#47;2-1&lt;0?0:i&#47;2-1;（根结点的左节点i=1位置反推根结点时，r=-1）。显然，此种方式虽然避免了数组0位置的浪费，但是左右节点存放位置和反推根结点的公式相对计算次数较多，不如将根结点放在i=1位置时，左节点放在2*i，右节点放在2*i+1，反推根结点i&#47;2方便，而代价仅是浪费一个数组0位置。如此，顺序存储法中数组0位置不放数据，是否也算应用哨兵简化程序的一种体现？","like_count":0},{"had_liked":false,"id":64627,"user_name":"且听疯吟","can_delete":false,"product_type":"c1","uid":1159459,"ip_address":"","ucode":"B010B16E5465F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/23/5df1f341.jpg","comment_is_top":false,"comment_ctime":1548837460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548837460","product_id":100017301,"comment_content":"问题1：<br>问题2：BFS，用队列实现即可。","like_count":0},{"had_liked":false,"id":63246,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1548310634,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1548310634","product_id":100017301,"comment_content":"满二叉树，完全二叉树<br>前序，中序，后序遍历","like_count":0},{"had_liked":false,"id":61768,"user_name":"睡痴儿😑","can_delete":false,"product_type":"c1","uid":1187204,"ip_address":"","ucode":"750EF858EF2042","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/84/d0ec0064.jpg","comment_is_top":false,"comment_ctime":1547796751,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1547796751","product_id":100017301,"comment_content":"分两部来考虑。<br>第一步，找出所有的形状。第二步，给所有的形状填上数值。<br>每一个可能有值的点可以视为一个灯。有值，灯就亮了。所以是在6层63个点中选出6个点。<br>以后每一个形状填上数值，就是一个6个数的全排列。最后就能解出答案。<br><br>至于说怎么按照层进行遍历，每次访问根节点以后，将其入队。之后出队，访问其字节点","like_count":0,"discussions":[{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4443,"discussion_content":"每一层如果有点，必须能连起来，不然就不是树了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565425043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58412,"user_name":"Edison","can_delete":false,"product_type":"c1","uid":1135701,"ip_address":"","ucode":"734A561F363720","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/55/613ddc42.jpg","comment_is_top":false,"comment_ctime":1547077809,"is_pvip":false,"replies":[{"id":"21053","content":"可以是可以 这种精准匹配不如用散列表 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547085397,"ip_address":"","comment_id":58412,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547077809","product_id":100017301,"comment_content":"  老师，假如我要实现一个通过拼音便能查询后台数据库中数据表的中文字段，可以通过Trie树来实现吗？还望老师给予指点","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436052,"discussion_content":"可以是可以 这种精准匹配不如用散列表 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547085397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56815,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1546563733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546563733","product_id":100017301,"comment_content":"老师的课程真是通俗易懂啊","like_count":0},{"had_liked":false,"id":55152,"user_name":"Ying","can_delete":false,"product_type":"c1","uid":1307466,"ip_address":"","ucode":"FAE36C852765F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/4a/4874b350.jpg","comment_is_top":false,"comment_ctime":1546052999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546052999","product_id":100017301,"comment_content":"前序遍历 中序遍历 后序遍历 里面的序指的是根节点的序  这样记貌似就比较好记了","like_count":0},{"had_liked":false,"id":55136,"user_name":"Ying","can_delete":false,"product_type":"c1","uid":1307466,"ip_address":"","ucode":"FAE36C852765F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/4a/4874b350.jpg","comment_is_top":false,"comment_ctime":1546050808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546050808","product_id":100017301,"comment_content":"根节点如果为空 深度为0  只有根节点 深度为1 这么理解没有问题吧","like_count":0},{"had_liked":false,"id":54771,"user_name":"微微一笑","can_delete":false,"product_type":"c1","uid":1250327,"ip_address":"","ucode":"CFA7ABE81D0B99","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/17/8763dced.jpg","comment_is_top":false,"comment_ctime":1545961162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545961162","product_id":100017301,"comment_content":"完全二叉树的叶子结点即使都靠左，也会有浪费内存的情况吧，比如只有左结点，无右结点","like_count":0},{"had_liked":false,"id":54663,"user_name":"修缘","can_delete":false,"product_type":"c1","uid":1035476,"ip_address":"","ucode":"72AB60C1DC88C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/d4/f1f84a96.jpg","comment_is_top":false,"comment_ctime":1545926690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545926690","product_id":100017301,"comment_content":"1.完全二叉树，有n的阶乘个组合<br>2.除了前序，中序，后序遍历以外，可以使用广度优先(BSF)和深度优先(DSF)遍历。<br>BSF：声明一个数组用于存储每一层对应的的节点，如:[[1,0],[3,1],[5,1]...]<br>DSF：声明一个二维数组用于存储每个节点,如：[[1,0],[3,1],[5,1]...]<br>BSF是按每一层进行存储，而DSF事先声明一个二维数组，在深扫的过程当中，依次填充二维数组的值","like_count":0},{"had_liked":false,"id":52014,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1333414,"ip_address":"","ucode":"4DB39C6CD5743B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/H8NxrljQXliccaT5fjdXJQYS3ou3Z9ykAuKw6EgicicEA9L4jQLz3h85P0odgDSaK0cA9oTyUKibbiagdNvnHuuV5mQ/132","comment_is_top":false,"comment_ctime":1545294081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545294081","product_id":100017301,"comment_content":"树<br><br>基本概念：节点的高度、节点的深度、节点的层数、树的高度。<br><br>特殊的树：满二叉树、完全二叉树<br><br>表示（存储）一颗二叉树的方法：1、链式存储法。比较常用，每个节点由数据和左右指针构成。2、顺序存储发。由数组来进行存储。完全二叉树比较节省空间，否则会造成空间浪费。<br><br>树的遍历：分三种（前序、中序、后序）。本质上是一种递归，重点在于写出递归公式。遍历的实践复杂度O(n)。<br>","like_count":0},{"had_liked":false,"id":51578,"user_name":"Pitt‮口一你了亲‭","can_delete":false,"product_type":"c1","uid":1320101,"ip_address":"","ucode":"EEEB53923113CE","user_header":"https://static001.geekbang.org/account/avatar/00/14/24/a5/d1d28c4d.jpg","comment_is_top":false,"comment_ctime":1545202888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545202888","product_id":100017301,"comment_content":"Cn=(2n)!&#47;n!(n+1)!","like_count":0},{"had_liked":false,"id":51220,"user_name":"李小草","can_delete":false,"product_type":"c1","uid":1240476,"ip_address":"","ucode":"83DAA0BFDC2068","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/9c/7afa883f.jpg","comment_is_top":false,"comment_ctime":1545138503,"is_pvip":false,"replies":[{"id":"18552","content":"文章里不是讲了嘛","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545184895,"ip_address":"","comment_id":51220,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545138503","product_id":100017301,"comment_content":"怎么把一个完全二叉树存储到数组中啊，请老师指点一下！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433348,"discussion_content":"文章里不是讲了嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545184895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51111,"user_name":"追风者","can_delete":false,"product_type":"c1","uid":1055092,"ip_address":"","ucode":"879BC372A6B605","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRiciax3Wo78c5rVjuWDiaw4ibcCiby8xiaMXJh5ibjU5242vfCGOK4ehibe1IKyxex2A4IX4XSA/132","comment_is_top":false,"comment_ctime":1545115930,"is_pvip":false,"replies":[{"id":"18561","content":"满二叉树是完全二叉树的一种特殊情况","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545185211,"ip_address":"","comment_id":51111,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545115930","product_id":100017301,"comment_content":"除了完全二叉树，满二叉树用数组方式存储也是极好的吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433291,"discussion_content":"满二叉树是完全二叉树的一种特殊情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545185211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51098,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1545113616,"is_pvip":false,"replies":[{"id":"18564","content":"没有误的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545185341,"ip_address":"","comment_id":51098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545113616","product_id":100017301,"comment_content":"我看大话数据结构说   树中结点的最大层次称为树的高度或深度    这个说法是不是有误？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433282,"discussion_content":"没有误的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545185341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50711,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1545033359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545033359","product_id":100017301,"comment_content":"有深度为0的说法？","like_count":0},{"had_liked":false,"id":50710,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1545033328,"is_pvip":false,"replies":[{"id":"18331","content":"你可以查下国外的一下文章 书籍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545097910,"ip_address":"","comment_id":50710,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545033328","product_id":100017301,"comment_content":"老师你好，树的最大层次不就是树的深度吗？有<br>深度为0的说法，我看《大话数据结构》中说，树中结点的最大层次称为树的深度或高度","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433068,"discussion_content":"你可以查下国外的一下文章 书籍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545097910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50330,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1544953541,"is_pvip":false,"replies":[{"id":"18163","content":"你可以看看图呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545010299,"ip_address":"","comment_id":50330,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1544953541","product_id":100017301,"comment_content":"从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多会被访问两次，所以遍历操作的时间复杂度，跟节点的个数 n 成正比，也就是说二叉树遍历的时间复杂度是 O(n)。<br><br><br>请问为什么每个结点最多访问两次？ 怎么分析的？  时间复杂度为什么是Q(n)。。。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432946,"discussion_content":"你可以看看图呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545010299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286682,"discussion_content":"或者这么理解: 最多2次是 比如它那个图上以b为例，a到b找儿子压栈访问一次 b儿子自己遍历完了把b从栈弹出来 又访问一次。\n压入系统栈算1次，弹出系统栈算1次?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593260888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydFhHonicUQibGlAfsAYBibNOfSxpCG5cJNp9oRibTJm3TrxM7Hj4WPPCRE3vluZJb0TGQqpKCaBWLdmra5Su1KF5Q/132","nickname":"yudidi","note":"","ucode":"70283DE39D86F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286679,"discussion_content":"root->left, root->right各算访问了一次吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593260741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49634,"user_name":"HYM","can_delete":false,"product_type":"c1","uid":1054178,"ip_address":"","ucode":"4E82D9A285DAFF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/e2/c21553c4.jpg","comment_is_top":false,"comment_ctime":1544748707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544748707","product_id":100017301,"comment_content":"第一题我想到了用递归分析，但是我觉得答案应该不是132，我的算法如下：假设有n个数，那我可以选个数做根节点，然后左右子树划分剩下n-1个数，这样算下来结果为3万多。。","like_count":0},{"had_liked":false,"id":49324,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1544665230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544665230","product_id":100017301,"comment_content":"二叉树有几种存储方式，什么样的二叉树适合用数组来存储？<br>一种是基于指针或者引用的二叉链式存储；一种是基于数组的顺序存储<br>几个重要的概念：深度、高度、层数<br>完全二叉树是数组存储有效性的这个概率中衍生出来的<br>思考题：1、莫名的就变成了完全二叉树，这里不解，如果是自然n!无疑<br>2、深度优先遍历，具体细节不明<br>基础还是基础，没有动手写的习惯","like_count":0},{"had_liked":false,"id":46564,"user_name":"青舟","can_delete":false,"product_type":"c1","uid":1192732,"ip_address":"","ucode":"2651482AC0DEC6","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/1c/59a4e803.jpg","comment_is_top":false,"comment_ctime":1543936703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543936703","product_id":100017301,"comment_content":"层次遍历：将二叉树使用数组存储，非完全二叉树缺失部分进行标记，然后按数组下标打印即可。","like_count":0},{"had_liked":false,"id":46388,"user_name":"fengruichao","can_delete":false,"product_type":"c1","uid":1060405,"ip_address":"","ucode":"B41431137A585C","user_header":"https://static001.geekbang.org/account/avatar/00/10/2e/35/c12029fd.jpg","comment_is_top":false,"comment_ctime":1543913559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543913559","product_id":100017301,"comment_content":"这个 最后一层的叶子节点都靠左排列 怎么解释？上图完全二叉树的I节点是靠右的呀？","like_count":0},{"had_liked":false,"id":46094,"user_name":"李坤","can_delete":false,"product_type":"c1","uid":1316193,"ip_address":"","ucode":"D05334A45B2B7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/15/61/ebbf6a33.jpg","comment_is_top":false,"comment_ctime":1543845211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543845211","product_id":100017301,"comment_content":"第1题也不一定要当做满二叉树或者完全二叉树来计算。只要是一棵二叉树，就能用数组来存储和表示。这棵二叉树的有效节点数为n，这些节点每种不同的存储方式就表示一棵不同的二叉树，n个节点共有n！种存储方式，所以共有n！种二叉树。","like_count":0},{"had_liked":false,"id":45430,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1543639277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543639277","product_id":100017301,"comment_content":"满二叉树是完全二叉树，完全二叉树未必是满二叉树。<br>完全二叉树用数组存储最省内存，因为完全二叉树的下标是连续的，不会跳过数组的某个内存单元。<br>不是完全二叉树虽然也可以用数组存储，但势必会浪费数组的存储空间，因为下标不连续。<br>问题1，看成一个完全二叉树的数组元素的排列组合，非常巧妙!<br>问题2，按数组的顺序存储法，依次打印出数组元素就是按层遍历了。<br>如有不对，请老师指正~~","like_count":0},{"had_liked":false,"id":43752,"user_name":"Aron","can_delete":false,"product_type":"c1","uid":1236669,"ip_address":"","ucode":"6C07E662DB77C5","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/bd/a2ea7801.jpg","comment_is_top":false,"comment_ctime":1543287600,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543287600","product_id":100017301,"comment_content":"递归出口为什么是root出口","like_count":0},{"had_liked":false,"id":43650,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1543277428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543277428","product_id":100017301,"comment_content":"打卡打卡","like_count":0},{"had_liked":false,"id":42853,"user_name":"广东仔在哈尔滨的春天","can_delete":false,"product_type":"c1","uid":1234231,"ip_address":"","ucode":"F3610BF2062759","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/37/a4916940.jpg","comment_is_top":false,"comment_ctime":1543062518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543062518","product_id":100017301,"comment_content":"第一题，132个方案。<br>第二题，队列。","like_count":0},{"had_liked":false,"id":41568,"user_name":"王子瑞Aliloke有事电联","can_delete":false,"product_type":"c1","uid":1249400,"ip_address":"","ucode":"9ABE8E475E336B","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/78/29bd3f1e.jpg","comment_is_top":false,"comment_ctime":1542807311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542807311","product_id":100017301,"comment_content":"层次遍历可以队列数据结构。<br>根节点先入队列，然后队列不空，取出对头元素，如果左节点存在就入列队，否则什么也不做，右节点同理。直到队列为空，树层次遍历结束。<br>树的层次遍历，也是一个广度优先的遍历算法。","like_count":0},{"had_liked":false,"id":41303,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1239247,"ip_address":"","ucode":"8393C90E565D99","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/cf/0ebb0354.jpg","comment_is_top":false,"comment_ctime":1542764935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542764935","product_id":100017301,"comment_content":"假设n个节点有f(n)种形态的数，而n个节点理论上可以挂满2n个分支（路径），此时已经有n-1个分支了，剩余2n-(n-1)=n+1各分支可以挂载，也就是第n+1个节点存在n+1个位置，所以f(n+1)=f(n)*(n+1),又f(1) = 1，从而得出f(n)=n!，也就是n个节点存在n！种不同形态的树。","like_count":0},{"had_liked":false,"id":41043,"user_name":"ZX","can_delete":false,"product_type":"c1","uid":1235583,"ip_address":"","ucode":"0D2622FE6D1774","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/7f/8069035d.jpg","comment_is_top":false,"comment_ctime":1542718023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542718023","product_id":100017301,"comment_content":"&#47;&#47; 按层查找<br>function byFloor (root) {<br>  const arr = [root]<br>  while (arr.length) {<br>    const first = arr.pop()<br>    console.log(first.value)<br>    if (first.left) arr.push(first.left)<br>    if (first.right) arr.push(first.right)<br>  }<br>}","like_count":0},{"had_liked":false,"id":40137,"user_name":"PhilZhang","can_delete":false,"product_type":"c1","uid":1088010,"ip_address":"","ucode":"383F1A792C7DF9","user_header":"https://static001.geekbang.org/account/avatar/00/10/9a/0a/922615cf.jpg","comment_is_top":false,"comment_ctime":1542520766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542520766","product_id":100017301,"comment_content":"第二个问题就是广度优先，可以创建一个数组，把根节点放入数组第一位，然后遍历它的左右子节点，依次放入数组。指针后移，依此类推，最后输出数组即可","like_count":0},{"had_liked":false,"id":39857,"user_name":"楼兰","can_delete":false,"product_type":"c1","uid":1021702,"ip_address":"","ucode":"98C806E083F827","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/06/ad491e82.jpg","comment_is_top":false,"comment_ctime":1542369151,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1542369151","product_id":100017301,"comment_content":"用Golang实现各种数据结构及算法,还有本人的Leetcode刷题代码,尽可能清晰的写文档说明了解题思路,需要的同学可以参考,https:&#47;&#47;github.com&#47;TomorrowWu&#47;golang-algorithms","like_count":0},{"had_liked":false,"id":39689,"user_name":"hunterlodge","can_delete":false,"product_type":"c1","uid":1069755,"ip_address":"","ucode":"5B83A79E784161","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/bb/225e70a6.jpg","comment_is_top":false,"comment_ctime":1542336109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542336109","product_id":100017301,"comment_content":"第一题，递归思路，具体代码如下<br>static int countTrees(int numKeys) {<br>        if (numKeys &lt;= 1) {<br>            return (1);<br>        } else {<br>            int sum = 0;<br>            int left, right, root;<br>            &#47;&#47; 每次迭代，root节点的左右两颗子树的节点数不同--左子树的节点数从0到numKeys-1，右子树相反<br>            &#47;&#47; 这样迭代结束后，各种情况便都覆盖全了；<br>            for (root = 1; root &lt;= numKeys; root++) {<br>                left = countTrees(root - 1);<br>                right = countTrees(numKeys - root);<br><br>                &#47;&#47; number of possible trees with this root == left*right<br>                sum += left * right;<br>            }<br>            return (sum);<br>        }<br>    }","like_count":0},{"had_liked":false,"id":39268,"user_name":"macro","can_delete":false,"product_type":"c1","uid":1266076,"ip_address":"","ucode":"955060C6D4ED04","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eojw5WJibLrSLJ4TDsFgibzA7ia8iaIibIP0NJbiagBibOhbsFziaKCQs2pibQH9Ad8tX8hvFbzC37P2oDzxwQ/132","comment_is_top":false,"comment_ctime":1542241632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542241632","product_id":100017301,"comment_content":"一颗二叉树,分为根节点,左子树,右子树三种<br>除根节点外,不是左子树,就是右子树,所以,<br>统计左子树的个数<br>1 -- 1*1! = 1<br>2 -- (C1 0 + C1 1)*2! = 4 <br>3 -- (C2 0 + C2 1 + C2 2)*3! = 30 <br>...<br>6 -- (C5 0 + C5 1 + C5 2 + C5 3 + C5 4 + C55)*6! = 3840<br><br>n -- (C(n-1) 0 + C(n-2) 1 + ... + C(n-1) (n-1)) ","like_count":0},{"had_liked":false,"id":39180,"user_name":"距离","can_delete":false,"product_type":"c1","uid":1253869,"ip_address":"","ucode":"6BD2EDD5CCCB69","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8TaSUiaeecVxGob4DGovz0JTXAMd0kTKzfHeHEytP9LrjzxFK8V0kapyaibpk4DfybU1bq1Ba0HkQ/132","comment_is_top":false,"comment_ctime":1542204965,"is_pvip":false,"replies":[{"id":"14113","content":"多谢🙏","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542280396,"ip_address":"","comment_id":39180,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542204965","product_id":100017301,"comment_content":"说的真好，通俗易懂！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428956,"discussion_content":"多谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542280396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38974,"user_name":"飞羽","can_delete":false,"product_type":"c1","uid":1241451,"ip_address":"","ucode":"6779BCE78AA636","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/6b/c95dab3c.jpg","comment_is_top":false,"comment_ctime":1542164541,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542164541","product_id":100017301,"comment_content":"迟到的习题<br>最近js写烦了，用Go实现了一遍。<br>具体做法跟楼上差不多，用一个数组存储每层的节点，并打印，然后将当前层级的下一层节点分别装进新的数组中，之后递归到下一层。<br>下面是代码实现，同时也做了先中后序遍历：<br><br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>)<br><br>type Tree struct {<br>\tleft  *Tree<br>\tright *Tree<br>\tdata  int<br>}<br><br>func find(t *Tree, data int) (*Tree, int) {<br>\tif t.data == data {<br>\t\treturn t, 0<br>\t} else if data &lt; t.data {<br>\t\tif t.left != nil {<br>\t\t\treturn find(t.left, data)<br>\t\t} else {<br>\t\t\treturn t, 1<br>\t\t}<br>\t} else {<br>\t\tif t.right != nil {<br>\t\t\treturn find(t.right, data)<br>\t\t} else {<br>\t\t\treturn t, 2<br>\t\t}<br>\t}<br>}<br><br>func insert(t *Tree, data int) {<br>\tt, driction := find(t, data)<br>\tnt := Tree{nil, nil, data}<br>\tif driction == 1 {<br>\t\tt.left = &amp;nt<br>\t} else if driction == 2 {<br>\t\tt.right = &amp;nt<br>\t}<br>}<br><br>func preEach(t *Tree) {<br>\tfmt.Println(t.data)<br>\tif t.left != nil {<br>\t\tpreEach(t.left)<br>\t}<br>\tif t.right != nil {<br>\t\tpreEach(t.right)<br>\t}<br>}<br><br>func postEach(t *Tree) {<br>\tif t.left != nil {<br>\t\tpostEach(t.left)<br>\t}<br>\tif t.right != nil {<br>\t\tpostEach(t.right)<br>\t}<br>\tfmt.Println(t.data)<br>}<br><br>func midlEach(t *Tree) {<br>\tif t.left != nil {<br>\t\tmidlEach(t.left)<br>\t}<br>\tfmt.Println(t.data)<br>\tif t.right != nil {<br>\t\tmidlEach(t.right)<br>\t}<br>}<br><br>func order(ts []*Tree, l int) int {<br>\tnts := make([]*Tree, 0) &#47;&#47; 此处有优化空间，考虑如何将切片length降到最低<br>\tif len(ts) == 0 {<br>\t\treturn 0<br>\t}<br>\tfor _, t := range ts {<br>\t\tfmt.Println(t.data)<br>\t\tif t.left != nil {<br>\t\t\tnts = append(nts, t.left)<br>\t\t}<br>\t\tif t.right != nil {<br>\t\t\tnts = append(nts, t.right)<br>\t\t}<br>\t}<br>\treturn order(nts, l*2)<br>}<br><br>func main() {<br><br>\tt := Tree{&amp;Tree{nil, nil, 8}, &amp;Tree{nil, &amp;Tree{nil, nil, 15}, 12}, 10}<br><br>\tinsert(&amp;t, 20)<br>\tinsert(&amp;t, 4)<br>\tinsert(&amp;t, 5)<br>\tinsert(&amp;t, 1)<br><br>\tfmt.Println(`先序遍历：`)<br>\tpreEach(&amp;t)<br>\tfmt.Println(`end ----------------------------`)<br><br>\tfmt.Println(`中序遍历：`)<br>\tmidlEach(&amp;t)<br>\tfmt.Println(`end ----------------------------`)<br><br>\tfmt.Println(`后序遍历：`)<br>\tpostEach(&amp;t)<br>\tfmt.Println(`end ----------------------------`)<br><br>\tfmt.Println(`按层遍历：`)<br>\tts := make([]*Tree, 1)<br>\tts[0] = &amp;t<br>\torder(ts, 1)<br>\tfmt.Println(`end ----------------------------`)<br>}<br>","like_count":0},{"had_liked":false,"id":38928,"user_name":"向科","can_delete":false,"product_type":"c1","uid":1294797,"ip_address":"","ucode":"6EFC2C4FB11A24","user_header":"https://static001.geekbang.org/account/avatar/00/13/c1/cd/cdb510ae.jpg","comment_is_top":false,"comment_ctime":1542159989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542159989","product_id":100017301,"comment_content":"老师，我有一个问题:<br>关于这三种遍历二叉树的算法，区别在于第几步访问父节点，在遍历的结果和时间复杂度上没有区别，在实际应用时，我们该如何选择? 他们的这种区别和实际问题有什么关系呢？能举例说明吗？","like_count":0},{"had_liked":false,"id":38600,"user_name":"我是谁","can_delete":false,"product_type":"c1","uid":1073487,"ip_address":"","ucode":"D6C67E29D62EA9","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/4f/e0b71e72.jpg","comment_is_top":false,"comment_ctime":1542081337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542081337","product_id":100017301,"comment_content":"第一个思考题，猜了一下应该是有132种不同的二叉树，但是公式没推出来。。。","like_count":0},{"had_liked":false,"id":38558,"user_name":"太空土豆","can_delete":false,"product_type":"c1","uid":1247622,"ip_address":"","ucode":"636253D0DE1384","user_header":"","comment_is_top":false,"comment_ctime":1542074730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542074730","product_id":100017301,"comment_content":"树的高度和深度的定义，现在没有统一的说法。讲义中从0开始，一般情况下没有问题。当某颗树是空的时候，它的高度是多少?当某棵树只有一个根结点时，它的高度又是多少?所以讲义中这种定义方法不能很好诠释空树的高度。对于这个问题，我比较倾向于叶结点的高度为1，跟节点的深度为1这种定义方式。这样，空树的高度为0，只有一个根结点的树高度为1。其实，这个问题我也纠结过。","like_count":0},{"had_liked":false,"id":38526,"user_name":"我的心里只有工作","can_delete":false,"product_type":"c1","uid":1238185,"ip_address":"","ucode":"488DD6F9590EB8","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/a9/117fe480.jpg","comment_is_top":false,"comment_ctime":1542071312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542071312","product_id":100017301,"comment_content":"我想知道老师什么时候出书，想买本","like_count":0},{"had_liked":false,"id":38466,"user_name":"liangjf","can_delete":false,"product_type":"c1","uid":1058812,"ip_address":"","ucode":"681A6CCF098F55","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/fc/b8d83d56.jpg","comment_is_top":false,"comment_ctime":1542041680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542041680","product_id":100017301,"comment_content":"这个主要理解了遍历那里。我是这样想的。对于同一个结点，前，中，后序遍历其实就是针对当前遍历到的结点来说的。前序遍历，第一次遍历本结点，然后分别左右结点。中序遍历，第一次遍历左结点，然后分别是当前结点和右节点。后序遍历，第一次遍历右节点，然后分别是左结点和当前结点。<br>记住是以当前遍历到的结点为参考就OK","like_count":0},{"had_liked":false,"id":38276,"user_name":"along","can_delete":false,"product_type":"c1","uid":1236054,"ip_address":"","ucode":"6855D571DD71AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/56/1a5b7e9f.jpg","comment_is_top":false,"comment_ctime":1542013495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542013495","product_id":100017301,"comment_content":"按层遍历利用队列实现:<br>&#47;**<br>     * 按层遍历<br>     * @param tree 根节点<br>     *&#47;<br>    public static void levelOrder(BinaryTree tree) {<br>        &#47;&#47; 利用队列FIFO特点来实现按层遍历<br>        LinkedList&lt;BinaryTree&gt; linkedList = new LinkedList&lt;&gt;();<br>        &#47;&#47; 记录当前遍历到哪个结点<br>        BinaryTree currentNode = tree;<br>        &#47;&#47; 根节点入队<br>        linkedList.add(currentNode);<br>        &#47;&#47; 从队列中弹出各结点数据，直到队列为空，遍历完毕<br>        while (linkedList.size()&gt;0){<br>            &#47;&#47; 弹出队首元素(当前结点)，打印其数据，并依次将其左右子节点入队<br>            currentNode = linkedList.poll();<br>            System.out.print(currentNode.data+&quot; -&gt; &quot;);<br>            if (currentNode.left!=null) {<br>                linkedList.add(currentNode.left);<br>            }<br>            if (currentNode.right!=null) {<br>                linkedList.add(currentNode.right);<br>            }<br>        }<br>    }","like_count":0},{"had_liked":false,"id":38213,"user_name":"NeverMore","can_delete":false,"product_type":"c1","uid":1228498,"ip_address":"","ucode":"582698D772810D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d2/3d88cb8e.jpg","comment_is_top":false,"comment_ctime":1541989851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541989851","product_id":100017301,"comment_content":"按层遍历使用队列吧，广度优先搜索。","like_count":0},{"had_liked":false,"id":38201,"user_name":"sky卤代烃","can_delete":false,"product_type":"c1","uid":1002071,"ip_address":"","ucode":"7AED6F3151A412","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/57/ce73d319.jpg","comment_is_top":false,"comment_ctime":1541987091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541987091","product_id":100017301,"comment_content":"我当时记忆遍历顺序的时候默认每个节点访问三次，前序就是第一次访问，中序是第二次访问，后续就是第三次访问，我感觉按这种顺序更容易分清访问顺序","like_count":0},{"had_liked":false,"id":38179,"user_name":"城","can_delete":false,"product_type":"c1","uid":1035315,"ip_address":"","ucode":"32C4FCE1944000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/33/19f150d9.jpg","comment_is_top":false,"comment_ctime":1541983699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541983699","product_id":100017301,"comment_content":"1.我说下我的方法。分别安按照不同的层数来统计。层数最大6，如果不考虑节点的数值，只考虑节点的结构的话，那么层数为6时，有2种构造方式，根+左子树或根+右子树。层数为5时依次类推。","like_count":0},{"had_liked":false,"id":38164,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1541983081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541983081","product_id":100017301,"comment_content":"层序遍历使用队列","like_count":0}]}