{"id":97030,"title":"25 | 用户态内存映射：如何找到正确的会议室？","content":"<p>前面几节，我们既看了虚拟内存空间如何组织的，也看了物理页面如何管理的。现在我们需要一些数据结构，将二者关联起来。</p><h2>mmap的原理</h2><p>在虚拟地址空间那一节，我们知道，每一个进程都有一个列表vm_area_struct，指向虚拟地址空间的不同的内存块，这个变量的名字叫<strong>mmap</strong>。</p><pre><code>struct mm_struct {\n\tstruct vm_area_struct *mmap;\t\t/* list of VMAs */\n......\n}\n\n\nstruct vm_area_struct {\n\t/*\n\t * For areas with an address space and backing store,\n\t * linkage into the address_space-&gt;i_mmap interval tree.\n\t */\n\tstruct {\n\t\tstruct rb_node rb;\n\t\tunsigned long rb_subtree_last;\n\t} shared;\n\n\n\n\n\t/*\n\t * A file's MAP_PRIVATE vma can be in both i_mmap tree and anon_vma\n\t * list, after a COW of one of the file pages.\tA MAP_SHARED vma\n\t * can only be in the i_mmap tree.  An anonymous MAP_PRIVATE, stack\n\t * or brk vma (with NULL file) can only be in an anon_vma list.\n\t */\n\tstruct list_head anon_vma_chain; /* Serialized by mmap_sem &amp;\n\t\t\t\t\t  * page_table_lock */\n\tstruct anon_vma *anon_vma;\t/* Serialized by page_table_lock */\n\n\n\n\n\t/* Function pointers to deal with this struct. */\n\tconst struct vm_operations_struct *vm_ops;\n\t/* Information about our backing store: */\n\tunsigned long vm_pgoff;\t\t/* Offset (within vm_file) in PAGE_SIZE\n\t\t\t\t\t   units */\n\tstruct file * vm_file;\t\t/* File we map to (can be NULL). */\n\tvoid * vm_private_data;\t\t/* was vm_pte (shared mem) */\n</code></pre><p>其实内存映射不仅仅是物理内存和虚拟内存之间的映射，还包括将文件中的内容映射到虚拟内存空间。这个时候，访问内存空间就能够访问到文件里面的数据。而仅有物理内存和虚拟内存的映射，是一种特殊情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/45/f0dcb83fcaa4f185a8e36c9d28f12345.jpg?wh=2869*2473\" alt=\"\"></p><p>前面咱们讲堆的时候讲过，如果我们要申请小块内存，就用brk。brk函数之前已经解析过了，这里就不多说了。如果申请一大块内存，就要用mmap。对于堆的申请来讲，mmap是映射内存空间到物理内存。</p><p>另外，如果一个进程想映射一个文件到自己的虚拟内存空间，也要通过mmap系统调用。这个时候mmap是映射内存空间到物理内存再到文件。可见mmap这个系统调用是核心，我们现在来看mmap这个系统调用。</p><pre><code>SYSCALL_DEFINE6(mmap, unsigned long, addr, unsigned long, len,\n                unsigned long, prot, unsigned long, flags,\n                unsigned long, fd, unsigned long, off)\n{\n......\n        error = sys_mmap_pgoff(addr, len, prot, flags, fd, off &gt;&gt; PAGE_SHIFT);\n......\n}\n\n\nSYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,\n\t\tunsigned long, prot, unsigned long, flags,\n\t\tunsigned long, fd, unsigned long, pgoff)\n{\n\tstruct file *file = NULL;\n......\n\tfile = fget(fd);\n......\n\tretval = vm_mmap_pgoff(file, addr, len, prot, flags, pgoff);\n\treturn retval;\n}\n</code></pre><p>如果要映射到文件，fd会传进来一个文件描述符，并且mmap_pgoff里面通过fget函数，根据文件描述符获得struct file。struct file表示打开的一个文件。</p><!-- [[[read_end]]] --><p>接下来的调用链是vm_mmap_pgoff-&gt;do_mmap_pgoff-&gt;do_mmap。这里面主要干了两件事情：</p><ul>\n<li>\n<p>调用get_unmapped_area找到一个没有映射的区域；</p>\n</li>\n<li>\n<p>调用mmap_region映射这个区域。</p>\n</li>\n</ul><p>我们先来看get_unmapped_area函数。</p><pre><code>unsigned long\nget_unmapped_area(struct file *file, unsigned long addr, unsigned long len,\n\t\tunsigned long pgoff, unsigned long flags)\n{\n\tunsigned long (*get_area)(struct file *, unsigned long,\n\t\t\t\t  unsigned long, unsigned long, unsigned long);\n......\n\tget_area = current-&gt;mm-&gt;get_unmapped_area;\n\tif (file) {\n\t\tif (file-&gt;f_op-&gt;get_unmapped_area)\n\t\t\tget_area = file-&gt;f_op-&gt;get_unmapped_area;\n\t} \n......\n}\n</code></pre><p>这里面如果是匿名映射，则调用mm_struct里面的get_unmapped_area函数。这个函数其实是arch_get_unmapped_area。它会调用find_vma_prev，在表示虚拟内存区域的vm_area_struct红黑树上找到相应的位置。之所以叫prev，是说这个时候虚拟内存区域还没有建立，找到前一个vm_area_struct。</p><p>如果不是匿名映射，而是映射到一个文件，这样在Linux里面，每个打开的文件都有一个struct file结构，里面有一个file_operations，用来表示和这个文件相关的操作。如果是我们熟知的ext4文件系统，调用的是thp_get_unmapped_area。如果我们仔细看这个函数，最终还是调用mm_struct里面的get_unmapped_area函数。殊途同归。</p><pre><code>const struct file_operations ext4_file_operations = {\n......\n        .mmap           = ext4_file_mmap\n        .get_unmapped_area = thp_get_unmapped_area,\n};\n\n\nunsigned long __thp_get_unmapped_area(struct file *filp, unsigned long len,\n                loff_t off, unsigned long flags, unsigned long size)\n{\n        unsigned long addr;\n        loff_t off_end = off + len;\n        loff_t off_align = round_up(off, size);\n        unsigned long len_pad;\n        len_pad = len + size;\n......\n        addr = current-&gt;mm-&gt;get_unmapped_area(filp, 0, len_pad,\n                                              off &gt;&gt; PAGE_SHIFT, flags);\n        addr += (off - addr) &amp; (size - 1);\n        return addr;\n}\n</code></pre><p>我们再来看mmap_region，看它如何映射这个虚拟内存区域。</p><pre><code>unsigned long mmap_region(struct file *file, unsigned long addr,\n\t\tunsigned long len, vm_flags_t vm_flags, unsigned long pgoff,\n\t\tstruct list_head *uf)\n{\n\tstruct mm_struct *mm = current-&gt;mm;\n\tstruct vm_area_struct *vma, *prev;\n\tstruct rb_node **rb_link, *rb_parent;\n\n\n\t/*\n\t * Can we just expand an old mapping?\n\t */\n\tvma = vma_merge(mm, prev, addr, addr + len, vm_flags,\n\t\t\tNULL, file, pgoff, NULL, NULL_VM_UFFD_CTX);\n\tif (vma)\n\t\tgoto out;\n\n\n\t/*\n\t * Determine the object being mapped and call the appropriate\n\t * specific mapper. the address has already been validated, but\n\t * not unmapped, but the maps are removed from the list.\n\t */\n\tvma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);\n\tif (!vma) {\n\t\terror = -ENOMEM;\n\t\tgoto unacct_error;\n\t}\n\n\n\tvma-&gt;vm_mm = mm;\n\tvma-&gt;vm_start = addr;\n\tvma-&gt;vm_end = addr + len;\n\tvma-&gt;vm_flags = vm_flags;\n\tvma-&gt;vm_page_prot = vm_get_page_prot(vm_flags);\n\tvma-&gt;vm_pgoff = pgoff;\n\tINIT_LIST_HEAD(&amp;vma-&gt;anon_vma_chain);\n\n\n\tif (file) {\n\t\tvma-&gt;vm_file = get_file(file);\n\t\terror = call_mmap(file, vma);\n\t\taddr = vma-&gt;vm_start;\n\t\tvm_flags = vma-&gt;vm_flags;\n\t} \n......\n\tvma_link(mm, vma, prev, rb_link, rb_parent);\n\treturn addr;\n.....\n</code></pre><p>还记得咱们刚找到了虚拟内存区域的前一个vm_area_struct，我们首先要看，是否能够基于它进行扩展，也即调用vma_merge，和前一个vm_area_struct合并到一起。</p><p>如果不能，就需要调用kmem_cache_zalloc，在Slub里面创建一个新的vm_area_struct对象，设置起始和结束位置，将它加入队列。如果是映射到文件，则设置vm_file为目标文件，调用call_mmap。其实就是调用file_operations的mmap函数。对于ext4文件系统，调用的是ext4_file_mmap。从这个函数的参数可以看出，这一刻文件和内存开始发生关系了。这里我们将vm_area_struct的内存操作设置为文件系统操作，也就是说，读写内存其实就是读写文件系统。</p><pre><code>static inline int call_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\treturn file-&gt;f_op-&gt;mmap(file, vma);\n}\n\n\nstatic int ext4_file_mmap(struct file *file, struct vm_area_struct *vma)\n{\n......\n      vma-&gt;vm_ops = &amp;ext4_file_vm_ops;\n......\n}\n</code></pre><p>我们再回到mmap_region函数。最终，vma_link函数将新创建的vm_area_struct挂在了mm_struct里面的红黑树上。</p><p>这个时候，从内存到文件的映射关系，至少要在逻辑层面建立起来。那从文件到内存的映射关系呢？vma_link还做了另外一件事情，就是__vma_link_file。这个东西要用于建立这层映射关系。</p><p>对于打开的文件，会有一个结构struct file来表示。它有个成员指向struct address_space结构，这里面有棵变量名为i_mmap的红黑树，vm_area_struct就挂在这棵树上。</p><pre><code>struct address_space {\n\tstruct inode\t\t*host;\t\t/* owner: inode, block_device */\n......\n\tstruct rb_root\t\ti_mmap;\t\t/* tree of private and shared mappings */\n......\n\tconst struct address_space_operations *a_ops;\t/* methods */\n......\n}\n\n\nstatic void __vma_link_file(struct vm_area_struct *vma)\n{\n\tstruct file *file;\n\n\n\tfile = vma-&gt;vm_file;\n\tif (file) {\n\t\tstruct address_space *mapping = file-&gt;f_mapping;\n\t\tvma_interval_tree_insert(vma, &amp;mapping-&gt;i_mmap);\n\t}\n</code></pre><p>到这里，内存映射的内容要告一段落了。你可能会困惑，好像还没和物理内存发生任何关系，还是在虚拟内存里面折腾呀？</p><p>对的，因为到目前为止，我们还没有开始真正访问内存呀！这个时候，内存管理并不直接分配物理内存，因为物理内存相对于虚拟地址空间太宝贵了，只有等你真正用的那一刻才会开始分配。</p><h2>用户态缺页异常</h2><p>一旦开始访问虚拟内存的某个地址，如果我们发现，并没有对应的物理页，那就触发缺页中断，调用do_page_fault。</p><pre><code>dotraplinkage void notrace\ndo_page_fault(struct pt_regs *regs, unsigned long error_code)\n{\n\tunsigned long address = read_cr2(); /* Get the faulting address */\n......\n\t__do_page_fault(regs, error_code, address);\n......\n}\n\n\n/*\n * This routine handles page faults.  It determines the address,\n * and the problem, and then passes it off to one of the appropriate\n * routines.\n */\nstatic noinline void\n__do_page_fault(struct pt_regs *regs, unsigned long error_code,\n\t\tunsigned long address)\n{\n\tstruct vm_area_struct *vma;\n\tstruct task_struct *tsk;\n\tstruct mm_struct *mm;\n\ttsk = current;\n\tmm = tsk-&gt;mm;\n\n\n\tif (unlikely(fault_in_kernel_space(address))) {\n\t\tif (vmalloc_fault(address) &gt;= 0)\n\t\t\treturn;\n\t}\n......\n\tvma = find_vma(mm, address);\n......\n\tfault = handle_mm_fault(vma, address, flags);\n......\n</code></pre><p>在__do_page_fault里面，先要判断缺页中断是否发生在内核。如果发生在内核则调用vmalloc_fault，这就和咱们前面学过的虚拟内存的布局对应上了。在内核里面，vmalloc区域需要内核页表映射到物理页。咱们这里把内核的这部分放放，接着看用户空间的部分。</p><p>接下来在用户空间里面，找到你访问的那个地址所在的区域vm_area_struct，然后调用handle_mm_fault来映射这个区域。</p><pre><code>static int __handle_mm_fault(struct vm_area_struct *vma, unsigned long address,\n\t\tunsigned int flags)\n{\n\tstruct vm_fault vmf = {\n\t\t.vma = vma,\n\t\t.address = address &amp; PAGE_MASK,\n\t\t.flags = flags,\n\t\t.pgoff = linear_page_index(vma, address),\n\t\t.gfp_mask = __get_fault_gfp_mask(vma),\n\t};\n\tstruct mm_struct *mm = vma-&gt;vm_mm;\n\tpgd_t *pgd;\n\tp4d_t *p4d;\n\tint ret;\n\n\n\tpgd = pgd_offset(mm, address);\n\tp4d = p4d_alloc(mm, pgd, address);\n......\n\tvmf.pud = pud_alloc(mm, p4d, address);\n......\n\tvmf.pmd = pmd_alloc(mm, vmf.pud, address);\n......\n\treturn handle_pte_fault(&amp;vmf);\n}\n</code></pre><p>到这里，终于看到了我们熟悉的PGD、P4G、PUD、PMD、PTE，这就是前面讲页表的时候，讲述的四级页表的概念，因为暂且不考虑五级页表，我们暂时忽略P4G。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/f1/9b802943af4e3ae80ce4d0d7f2190af1.jpg?wh=1930*706\" alt=\"\"></p><p>pgd_t 用于全局页目录项，pud_t 用于上层页目录项，pmd_t 用于中间页目录项，pte_t 用于直接页表项。</p><p>每个进程都有独立的地址空间，为了这个进程独立完成映射，每个进程都有独立的进程页表，这个页表的最顶级的pgd存放在task_struct中的mm_struct的pgd变量里面。</p><p>在一个进程新创建的时候，会调用fork，对于内存的部分会调用copy_mm，里面调用dup_mm。</p><pre><code>/*\n * Allocate a new mm structure and copy contents from the\n * mm structure of the passed in task structure.\n */\nstatic struct mm_struct *dup_mm(struct task_struct *tsk)\n{\n\tstruct mm_struct *mm, *oldmm = current-&gt;mm;\n\tmm = allocate_mm();\n\tmemcpy(mm, oldmm, sizeof(*mm));\n\tif (!mm_init(mm, tsk, mm-&gt;user_ns))\n\t\tgoto fail_nomem;\n\terr = dup_mmap(mm, oldmm);\n\treturn mm;\n}\n</code></pre><p>在这里，除了创建一个新的mm_struct，并且通过memcpy将它和父进程的弄成一模一样之外，我们还需要调用mm_init进行初始化。接下来，mm_init调用mm_alloc_pgd，分配全局页目录项，赋值给mm_struct的pgd成员变量。</p><pre><code>static inline int mm_alloc_pgd(struct mm_struct *mm)\n{\n\tmm-&gt;pgd = pgd_alloc(mm);\n\treturn 0;\n}\n</code></pre><p>pgd_alloc里面除了分配PGD之外，还做了很重要的一个事情，就是调用pgd_ctor。</p><pre><code>static void pgd_ctor(struct mm_struct *mm, pgd_t *pgd)\n{\n\t/* If the pgd points to a shared pagetable level (either the\n\t   ptes in non-PAE, or shared PMD in PAE), then just copy the\n\t   references from swapper_pg_dir. */\n\tif (CONFIG_PGTABLE_LEVELS == 2 ||\n\t    (CONFIG_PGTABLE_LEVELS == 3 &amp;&amp; SHARED_KERNEL_PMD) ||\n\t    CONFIG_PGTABLE_LEVELS &gt;= 4) {\n\t\tclone_pgd_range(pgd + KERNEL_PGD_BOUNDARY,\n\t\t\t\tswapper_pg_dir + KERNEL_PGD_BOUNDARY,\n\t\t\t\tKERNEL_PGD_PTRS);\n\t}\n......\n}\n</code></pre><p>pgd_ctor干了什么事情呢？我们注意看里面的注释，它拷贝了对于swapper_pg_dir的引用。swapper_pg_dir是内核页表的最顶级的全局页目录。</p><p>一个进程的虚拟地址空间包含用户态和内核态两部分。为了从虚拟地址空间映射到物理页面，页表也分为用户地址空间的页表和内核页表，这就和上面遇到的vmalloc有关系了。在内核里面，映射靠内核页表，这里内核页表会拷贝一份到进程的页表。至于swapper_pg_dir是什么，怎么初始化的，怎么工作的，我们还是先放一放，放到下一节统一讨论。</p><p>至此，一个进程fork完毕之后，有了内核页表，有了自己顶级的pgd，但是对于用户地址空间来讲，还完全没有映射过。这需要等到这个进程在某个CPU上运行，并且对内存访问的那一刻了。</p><p>当这个进程被调度到某个CPU上运行的时候，咱们在<a href=\"https://time.geekbang.org/column/article/93251\">调度</a>那一节讲过，要调用context_switch进行上下文切换。对于内存方面的切换会调用switch_mm_irqs_off，这里面会调用  load_new_mm_cr3。</p><p>cr3是CPU的一个寄存器，它会指向当前进程的顶级pgd。如果CPU的指令要访问进程的虚拟内存，它就会自动从cr3里面得到pgd在物理内存的地址，然后根据里面的页表解析虚拟内存的地址为物理内存，从而访问真正的物理内存上的数据。</p><p>这里需要注意两点。第一点，cr3里面存放当前进程的顶级pgd，这个是硬件的要求。cr3里面需要存放pgd在物理内存的地址，不能是虚拟地址。因而load_new_mm_cr3里面会使用__pa，将mm_struct里面的成员变量pgd（mm_struct里面存的都是虚拟地址）变为物理地址，才能加载到cr3里面去。</p><p>第二点，用户进程在运行的过程中，访问虚拟内存中的数据，会被cr3里面指向的页表转换为物理地址后，才在物理内存中访问数据，这个过程都是在用户态运行的，地址转换的过程无需进入内核态。</p><p>只有访问虚拟内存的时候，发现没有映射到物理内存，页表也没有创建过，才触发缺页异常。进入内核调用do_page_fault，一直调用到__handle_mm_fault，这才有了上面解析到这个函数的时候，我们看到的代码。既然原来没有创建过页表，那只好补上这一课。于是，__handle_mm_fault调用pud_alloc和pmd_alloc，来创建相应的页目录项，最后调用handle_pte_fault来创建页表项。</p><p>绕了一大圈，终于将页表整个机制的各个部分串了起来。但是咱们的故事还没讲完，物理的内存还没找到。我们还得接着分析handle_pte_fault的实现。</p><pre><code>static int handle_pte_fault(struct vm_fault *vmf)\n{\n\tpte_t entry;\n......\n\tvmf-&gt;pte = pte_offset_map(vmf-&gt;pmd, vmf-&gt;address);\n\tvmf-&gt;orig_pte = *vmf-&gt;pte;\n......\n\tif (!vmf-&gt;pte) {\n\t\tif (vma_is_anonymous(vmf-&gt;vma))\n\t\t\treturn do_anonymous_page(vmf);\n\t\telse\n\t\t\treturn do_fault(vmf);\n\t}\n\n\n\tif (!pte_present(vmf-&gt;orig_pte))\n\t\treturn do_swap_page(vmf);\n......\n}\n</code></pre><p>这里面总的来说分了三种情况。如果PTE，也就是页表项，从来没有出现过，那就是新映射的页。如果是匿名页，就是第一种情况，应该映射到一个物理内存页，在这里调用的是do_anonymous_page。如果是映射到文件，调用的就是do_fault，这是第二种情况。如果PTE原来出现过，说明原来页面在物理内存中，后来换出到硬盘了，现在应该换回来，调用的是do_swap_page。</p><p>我们来看第一种情况，do_anonymous_page。对于匿名页的映射，我们需要先通过pte_alloc分配一个页表项，然后通过alloc_zeroed_user_highpage_movable分配一个页。之后它会调用alloc_pages_vma，并最终调用__alloc_pages_nodemask。</p><p>这个函数你还记得吗？就是咱们伙伴系统的核心函数，专门用来分配物理页面的。do_anonymous_page接下来要调用mk_pte，将页表项指向新分配的物理页，set_pte_at会将页表项塞到页表里面。</p><pre><code>static int do_anonymous_page(struct vm_fault *vmf)\n{\n\tstruct vm_area_struct *vma = vmf-&gt;vma;\n\tstruct mem_cgroup *memcg;\n\tstruct page *page;\n\tint ret = 0;\n\tpte_t entry;\n......\n\tif (pte_alloc(vma-&gt;vm_mm, vmf-&gt;pmd, vmf-&gt;address))\n\t\treturn VM_FAULT_OOM;\n......\n\tpage = alloc_zeroed_user_highpage_movable(vma, vmf-&gt;address);\n......\n\tentry = mk_pte(page, vma-&gt;vm_page_prot);\n\tif (vma-&gt;vm_flags &amp; VM_WRITE)\n\t\tentry = pte_mkwrite(pte_mkdirty(entry));\n\n\n\tvmf-&gt;pte = pte_offset_map_lock(vma-&gt;vm_mm, vmf-&gt;pmd, vmf-&gt;address,\n\t\t\t&amp;vmf-&gt;ptl);\n......\n\tset_pte_at(vma-&gt;vm_mm, vmf-&gt;address, vmf-&gt;pte, entry);\n......\n}\n</code></pre><p>第二种情况映射到文件do_fault，最终我们会调用__do_fault。</p><pre><code>static int __do_fault(struct vm_fault *vmf)\n{\n\tstruct vm_area_struct *vma = vmf-&gt;vma;\n\tint ret;\n......\n\tret = vma-&gt;vm_ops-&gt;fault(vmf);\n......\n\treturn ret;\n}\n\n</code></pre><p>这里调用了struct vm_operations_struct vm_ops的fault函数。还记得咱们上面用mmap映射文件的时候，对于ext4文件系统，vm_ops指向了ext4_file_vm_ops，也就是调用了ext4_filemap_fault。</p><pre><code>static const struct vm_operations_struct ext4_file_vm_ops = {\n\t.fault\t\t= ext4_filemap_fault,\n\t.map_pages\t= filemap_map_pages,\n\t.page_mkwrite   = ext4_page_mkwrite,\n};\n\n\nint ext4_filemap_fault(struct vm_fault *vmf)\n{\n\tstruct inode *inode = file_inode(vmf-&gt;vma-&gt;vm_file);\n......\n\terr = filemap_fault(vmf);\n......\n\treturn err;\n}\n</code></pre><p>ext4_filemap_fault里面的逻辑我们很容易就能读懂。vm_file就是咱们当时mmap的时候映射的那个文件，然后我们需要调用filemap_fault。对于文件映射来说，一般这个文件会在物理内存里面有页面作为它的缓存，find_get_page就是找那个页。如果找到了，就调用do_async_mmap_readahead，预读一些数据到内存里面；如果没有，就跳到no_cached_page。</p><pre><code>int filemap_fault(struct vm_fault *vmf)\n{\n\tint error;\n\tstruct file *file = vmf-&gt;vma-&gt;vm_file;\n\tstruct address_space *mapping = file-&gt;f_mapping;\n\tstruct inode *inode = mapping-&gt;host;\n\tpgoff_t offset = vmf-&gt;pgoff;\n\tstruct page *page;\n\tint ret = 0;\n......\n\tpage = find_get_page(mapping, offset);\n\tif (likely(page) &amp;&amp; !(vmf-&gt;flags &amp; FAULT_FLAG_TRIED)) {\n\t\tdo_async_mmap_readahead(vmf-&gt;vma, ra, file, page, offset);\n\t} else if (!page) {\n\t\tgoto no_cached_page;\n\t}\n......\n\tvmf-&gt;page = page;\n\treturn ret | VM_FAULT_LOCKED;\nno_cached_page:\n\terror = page_cache_read(file, offset, vmf-&gt;gfp_mask);\n......\n}\n</code></pre><p>如果没有物理内存中的缓存页，那我们就调用page_cache_read。在这里显示分配一个缓存页，将这一页加到lru表里面，然后在address_space中调用address_space_operations的readpage函数，将文件内容读到内存中。address_space的作用咱们上面也介绍过了。</p><pre><code>static int page_cache_read(struct file *file, pgoff_t offset, gfp_t gfp_mask)\n{\n\tstruct address_space *mapping = file-&gt;f_mapping;\n\tstruct page *page;\n......\n\tpage = __page_cache_alloc(gfp_mask|__GFP_COLD);\n......\n\tret = add_to_page_cache_lru(page, mapping, offset, gfp_mask &amp; GFP_KERNEL);\n......\n\tret = mapping-&gt;a_ops-&gt;readpage(file, page);\n......\n}\n</code></pre><p>struct address_space_operations对于ext4文件系统的定义如下所示。这么说来，上面的readpage调用的其实是ext4_readpage。因为我们还没讲到文件系统，这里我们不详细介绍ext4_readpage具体干了什么。你只要知道，最后会调用ext4_read_inline_page，这里面有部分逻辑和内存映射有关就行了。</p><pre><code>static const struct address_space_operations ext4_aops = {\n\t.readpage\t\t= ext4_readpage,\n\t.readpages\t\t= ext4_readpages,\n......\n};\n\n\nstatic int ext4_read_inline_page(struct inode *inode, struct page *page)\n{\n\tvoid *kaddr;\n......\n\tkaddr = kmap_atomic(page);\n\tret = ext4_read_inline_data(inode, kaddr, len, &amp;iloc);\n\tflush_dcache_page(page);\n\tkunmap_atomic(kaddr);\n......\n}\n</code></pre><p>在ext4_read_inline_page函数里，我们需要先调用kmap_atomic，将物理内存映射到内核的虚拟地址空间，得到内核中的地址kaddr。 我们在前面提到过kmap_atomic，它是用来做临时内核映射的。本来把物理内存映射到用户虚拟地址空间，不需要在内核里面映射一把。但是，现在因为要从文件里面读取数据并写入这个物理页面，又不能使用物理地址，我们只能使用虚拟地址，这就需要在内核里面临时映射一把。临时映射后，ext4_read_inline_data读取文件到这个虚拟地址。读取完毕后，我们取消这个临时映射kunmap_atomic就行了。</p><p>至于kmap_atomic的具体实现，我们还是放到内核映射部分再讲。</p><p>我们再来看第三种情况，do_swap_page。之前我们讲过物理内存管理，你这里可以回忆一下。如果长时间不用，就要换出到硬盘，也就是swap，现在这部分数据又要访问了，我们还得想办法再次读到内存中来。</p><pre><code>int do_swap_page(struct vm_fault *vmf)\n{\n\tstruct vm_area_struct *vma = vmf-&gt;vma;\n\tstruct page *page, *swapcache;\n\tstruct mem_cgroup *memcg;\n\tswp_entry_t entry;\n\tpte_t pte;\n......\n\tentry = pte_to_swp_entry(vmf-&gt;orig_pte);\n......\n\tpage = lookup_swap_cache(entry);\n\tif (!page) {\n\t\tpage = swapin_readahead(entry, GFP_HIGHUSER_MOVABLE, vma,\n\t\t\t\t\tvmf-&gt;address);\n......\n\t} \n......\n\tswapcache = page;\n......\n\tpte = mk_pte(page, vma-&gt;vm_page_prot);\n......\n\tset_pte_at(vma-&gt;vm_mm, vmf-&gt;address, vmf-&gt;pte, pte);\n\tvmf-&gt;orig_pte = pte;\n......\n\tswap_free(entry);\n......\n}\n</code></pre><p>do_swap_page函数会先查找swap文件有没有缓存页。如果没有，就调用swapin_readahead，将swap文件读到内存中来，形成内存页，并通过mk_pte生成页表项。set_pte_at将页表项插入页表，swap_free将swap文件清理。因为重新加载回内存了，不再需要swap文件了。</p><p>swapin_readahead会最终调用swap_readpage，在这里，我们看到了熟悉的readpage函数，也就是说读取普通文件和读取swap文件，过程是一样的，同样需要用kmap_atomic做临时映射。</p><pre><code>int swap_readpage(struct page *page, bool do_poll)\n{\n\tstruct bio *bio;\n\tint ret = 0;\n\tstruct swap_info_struct *sis = page_swap_info(page);\n\tblk_qc_t qc;\n\tstruct block_device *bdev;\n......\n\tif (sis-&gt;flags &amp; SWP_FILE) {\n\t\tstruct file *swap_file = sis-&gt;swap_file;\n\t\tstruct address_space *mapping = swap_file-&gt;f_mapping;\n\t\tret = mapping-&gt;a_ops-&gt;readpage(swap_file, page);\n\t\treturn ret;\n\t}\n......\n}\n</code></pre><p>通过上面复杂的过程，用户态缺页异常处理完毕了。物理内存中有了页面，页表也建立好了映射。接下来，用户程序在虚拟内存空间里面，可以通过虚拟地址顺利经过页表映射的访问物理页面上的数据了。</p><p>为了加快映射速度，我们不需要每次从虚拟地址到物理地址的转换都走一遍页表。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/b3/94efd92cbeb4d4ff155a645b93d71eb3.jpg?wh=2497*2320\" alt=\"\"></p><p>页表一般都很大，只能存放在内存中。操作系统每次访问内存都要折腾两步，先通过查询页表得到物理地址，然后访问该物理地址读取指令、数据。</p><p>为了提高映射速度，我们引入了<strong>TLB</strong>（Translation Lookaside Buffer），我们经常称为<strong>快表</strong>，专门用来做地址映射的硬件设备。它不在内存中，可存储的数据比较少，但是比内存要快。所以，我们可以想象，TLB就是页表的Cache，其中存储了当前最可能被访问到的页表项，其内容是部分页表项的一个副本。</p><p>有了TLB之后，地址映射的过程就像图中画的。我们先查块表，块表中有映射关系，然后直接转换为物理地址。如果在TLB查不到映射关系时，才会到内存中查询页表。</p><h2>总结时刻</h2><p>用户态的内存映射机制，我们解析的差不多了，我们来总结一下，用户态的内存映射机制包含以下几个部分。</p><ul>\n<li>\n<p>用户态内存映射函数mmap，包括用它来做匿名映射和文件映射。</p>\n</li>\n<li>\n<p>用户态的页表结构，存储位置在mm_struct中。</p>\n</li>\n<li>\n<p>在用户态访问没有映射的内存会引发缺页异常，分配物理页表、补齐页表。如果是匿名映射则分配物理内存；如果是swap，则将swap文件读入；如果是文件映射，则将文件读入。</p>\n</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/78/44/78d351d0105c8e5bf0e49c685a2c1a44.jpg?wh=4954*2891\" alt=\"\"></p><h2>课堂练习</h2><p>你可以试着用mmap系统调用，写一个程序来映射一个文件，并读取文件的内容。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":97804,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1558780779,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"212012178283","product_id":100024701,"comment_content":"- 申请小块内存用 brk; 申请大块内存或文件映射用 mmap<br>- mmap 映射文件, 由 fd 得到 struct file<br>    - 调用 ...-&gt;do_mmap<br>        - 调用 get_unmapped_area 找到一个可以进行映射的 vm_area_struct<br>        - 调用 mmap_region 进行映射<br>    - get_unmapped_area <br>        - 匿名映射: 找到前一个 vm_area_struct <br>        - 文件映射: 调用 file 中 file_operations 文件的相关操作, 最终也会调用到 get_unmapped_area<br>    - mmap_region<br>        - 通过 vm_area_struct 判断, 能否基于现有的块扩展(调用 vma_merge)<br>        - 若不能, 调用 kmem_cache_alloc 在 slub 中得到一个 vm_area_struct 并进行设置<br>        - 若是文件映射: 则调用 file_operations 的 mmap 将 vm_area_struct 的内存操作设置为文件系统对应操作(读写内存就是读写文件系统)<br>        - 通过 vma_link 将 vm_area_struct 插入红黑树<br>        - 若是文件映射, 调用 __vma_link_file 建立文件到内存的反映射<br>- 内存管理不直接分配内存, 在使用时才分配<br>- 用户态缺页异常, 触发缺页中断, 调用 do_page_default<br>- __do_page_fault 判断中断是否发生在内核<br>    - 若发生在内核, 调用 vmalloc_fault, 使用内核页表进行映射<br>    - 若不是, 找到对应 vm_area_struct 调用 handle_mm_fault<br>    - 得到多级页表地址 pgd 等<br>    - pgd 存在 task_struct.mm_struct.pgd 中<br>    - 全局页目录项 pgd 在创建进程 task_struct 时创建并初始化, 会调用 pgd_ctor 拷贝内核页表到进程的页表<br>- 进程被调度运行时, 通过 switch_mm_irqs_off-&gt;load_new_mm_cr3 切换内存上下文<br>- cr3 是 cpu 寄存器, 存储进程 pgd 的物理地址(load_new_mm_cr3 加载时通过直接内存映射进行转换)<br>- cpu 访问进程虚拟内存时, 从 cr3 得到 pgd 页表, 最后得到进程访问的物理地址<br>- 进程地址转换发生在用户态, 缺页时才进入内核态(调用__handle_mm_fault)<br>- __handle_mm_fault 调用 pud_alloc, pmd_alloc, handle_pte_fault 分配页表项<br>    - 若不存在 pte<br>        - 匿名页: 调用 do_anonymous_page 分配物理页 ①<br>        - 文件映射: 调用 do_fault ②<br>    - 若存在 pte, 调用 do_swap_page 换入内存 ③<br>    - ① 为匿名页分配内存<br>        - 调用 pte_alloc 分配 pte 页表项<br>        - 调用 ...-&gt;__alloc_pages_nodemask 分配物理页<br>        - mk_pte 页表项指向物理页; set_pte_at 插入页表项<br>    - ② 为文件映射分配内存 __do_fault<br>        - 以 ext4 为例, 调用 ext4_file_fault-&gt;filemap_fault<br>        - 文件映射一般有物理页作为缓存 find_get_page 找缓存页<br>        - 若有缓存页, 调用函数预读数据到内存<br>        - 若无缓存页, 调用 page_cache_read 分配一个, 加入 lru 队列, 调用 readpage 读数据: 调用 kmap_atomic 将物理内存映射到内核临时映射空间, 由内核读取文件, 再调用 kunmap_atomic 解映射<br>    - ③ do_swap_page<br>        - 先检查对应 swap 有没有缓存页<br>        - 没有, 读入 swap 文件(也是调用 readpage) <br>        - 调用 mk_pte; set_pet_at; swap_free(清理 swap)<br>- 避免每次都需要经过页表(存再内存中)访问内存<br>    - TLB 缓存部分页表项的副本","like_count":50,"discussions":[{"author":{"id":2149133,"avatar":"https://static001.geekbang.org/account/avatar/00/20/cb/0d/11e3e3f6.jpg","nickname":"THE SWORD OF AMBER","note":"","ucode":"BEC2834C1EC165","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566885,"discussion_content":"说实话这一章感觉可以直接看你的总结和最终的图，不然太折磨了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650789425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98899,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1559114417,"is_pvip":false,"replies":[{"id":"49243","content":"是啊是啊，理解万岁","user_name":"作者回复","comment_id":98899,"uid":"1001590","ip_address":"","utype":1,"ctime":1567605495,"user_name_real":"刘超@网易云"}],"discussion_count":3,"race_medal":0,"score":"96048394929","product_id":100024701,"comment_content":"比起《深入浅出计算机组成原理》和《Linux性能优化实战》的篇幅<br>本节花了三天，每天不少于2小时，才把笔记做完，估计老师也花费不少时间<br>day25笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;10916458.html","like_count":22,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451883,"discussion_content":"是啊是啊，理解万岁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567605495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210699,"avatar":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","nickname":"-W.LI-","note":"","ucode":"3556786538664F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13325,"discussion_content":"大佬有基础的推荐么。本来想硬着头皮看。实在看不下去了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568649188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1339820,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/ac/8295e3e7.jpg","nickname":"书忆江南","note":"","ucode":"90776A7CE06D66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1210699,"avatar":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","nickname":"-W.LI-","note":"","ucode":"3556786538664F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":172868,"discussion_content":"推荐看完极客时间的《深入浅出计算机组成原理》和书《操作系统导论》再来看会好些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581814784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":13325,"ip_address":""},"score":172868,"extra":""}]}]},{"had_liked":false,"id":97382,"user_name":"zzuse","can_delete":false,"product_type":"c1","uid":1042555,"ip_address":"","ucode":"4CC849CC70F116","user_header":"","comment_is_top":false,"comment_ctime":1558662592,"is_pvip":false,"replies":[{"id":"34855","content":"忽略调用链，记住重点节点，调用链就是为了证明的确这样过去的","user_name":"作者回复","comment_id":97382,"uid":"1001590","ip_address":"","utype":1,"ctime":1558680740,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"70278139328","product_id":100024701,"comment_content":"我感觉学得很吃力，调用链太长了","like_count":16,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451259,"discussion_content":"忽略调用链，记住重点节点，调用链就是为了证明的确这样过去的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558680740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2293701,"avatar":"","nickname":"Geek_bc2032","note":"","ucode":"0A1C3E4160DC15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350251,"discussion_content":"看总结归纳，我写应用层的连调用链都不怎么看。。大概知道做了什么事就行。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613786466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114701,"user_name":"超超","can_delete":false,"product_type":"c1","uid":1476077,"ip_address":"","ucode":"D0751F29553481","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/ed/905b052f.jpg","comment_is_top":false,"comment_ctime":1563367463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35923105831","product_id":100024701,"comment_content":"#include&lt;unistd.h&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;string.h&gt;<br>#include&lt;sys&#47;types.h&gt;<br>#include&lt;sys&#47;stat.h&gt;<br>#include&lt;sys&#47;time.h&gt;<br>#include&lt;fcntl.h&gt;<br>#include&lt;sys&#47;mman.h&gt;<br><br>#define MAX 10000<br>&#47;&#47;实现把存有10000个整数的文件的每个整数值加1，再写回文件<br>int main()<br>{<br>int i=0;<br>int  fd=0;<br><br>int *array = (int *)malloc( sizeof(int)*MAX );<br>if(!array)<br>{ return -1;}<br><br>&#47;*mmap*&#47;<br>fd = open( &quot;mmap_test&quot;, O_RDWR );<br>array = mmap( NULL, sizeof(int)*MAX, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0 );<br><br>for( i=0; i&lt;MAX; ++i )<br>      ++array[ i ];<br><br>munmap( array, sizeof(int)*MAX );<br>msync( array, sizeof(int)*MAX, MS_SYNC );<br>free( array );<br>close( fd );<br><br>return 0;<br>}","like_count":8},{"had_liked":false,"id":98034,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1558879303,"is_pvip":false,"replies":[{"id":"35410","content":"可以参考一下开源软件的运作模式，要写设计，大牛review，通过后写代码，大牛组成委员会，看够不够资格合并进去，要合并进去就要有相应的测试用例，覆盖率等，有邮件列表，实时对话工具","user_name":"作者回复","comment_id":98034,"uid":"1001590","ip_address":"","utype":1,"ctime":1559109989,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"31623650375","product_id":100024701,"comment_content":"请问老师，内核里面这些复杂的机制的实现，在当初软件开发开始前有详细的设计文档的吗？分布在全球各地的开发者是如何能达成这种复杂设计的共识的呢？这些内核里的函数相互依赖又和底层硬件相关，是如何进行单元测试的呢？","like_count":7,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451526,"discussion_content":"可以参考一下开源软件的运作模式，要写设计，大牛review，通过后写代码，大牛组成委员会，看够不够资格合并进去，要合并进去就要有相应的测试用例，覆盖率等，有邮件列表，实时对话工具","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559109989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131300,"avatar":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","nickname":"zixuan","note":"","ucode":"C72920DD05B074","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589449,"discussion_content":"长期演化的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664956274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271712,"user_name":"趁早","can_delete":false,"product_type":"c1","uid":1031970,"ip_address":"","ucode":"949FB3AA250D80","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/22/26530e66.jpg","comment_is_top":false,"comment_ctime":1609765532,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27379569308","product_id":100024701,"comment_content":"个人感觉可以适当缩减部分流程，用老师理解完了之后的流程抽象出来，提炼才是精华，这些其实操作系统课程上大部分都有，但是进一步提炼出来让大家看完就能记住大概流程是不是更好？","like_count":6,"discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391602,"discussion_content":"提炼自己提炼啊，这相比书上已经很简略了。比如你要提炼成mmap原理、用户态缺页异常两个标题也行，看自己学习的过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630547879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237273,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1595763371,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"27365567147","product_id":100024701,"comment_content":"mmap 创建可以通过文件， 也可以匿名创建，通过文件创建， 如果文件大小和映射区域大小不一致， 超过映射访问边界会触发SIGSEGV, 大于文件边界小于映射区域的访问会触发SIGBUS， 有种特殊情况是·Hole Punching·， SPARSE FILE稀疏文件，映射的时候中间有空洞， 如果访问空洞是不会抛出异常的，进程多了要申请内存大于实际内存的话可以通过 overcommit来调节。 mmap配合dax文件系统，可以绕开文件系统减少swap，提升性能， 笔记https:&#47;&#47;garlicspace.com&#47;2020&#47;07&#47;22&#47;mmap%e7%9b%b8%e5%85%b3api&#47;","like_count":6},{"had_liked":false,"id":115749,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1563717388,"is_pvip":false,"replies":[{"id":"46552","content":"还是要坚持，一遍不行，再来一遍","user_name":"作者回复","comment_id":115749,"uid":"1001590","ip_address":"","utype":1,"ctime":1566356662,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"23038553868","product_id":100024701,"comment_content":"这篇看了四五遍，都是看了一半就没看了，这是第一次全部看完这篇文章，发现后半部分比前面好理解","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459266,"discussion_content":"还是要坚持，一遍不行，再来一遍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566356662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323958,"user_name":"Run","can_delete":false,"product_type":"c1","uid":1371941,"ip_address":"","ucode":"6738D2F36ACFF6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMDBq7lqg9ZasC4f21R0axKJRVCBImPKlQF8yOicLLXIsNgsZxsVyN1mbvFOL6eVPluTNgJofwZeA/132","comment_is_top":false,"comment_ctime":1638240670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14523142558","product_id":100024701,"comment_content":"每过一段时间回来看看都有新的收获啊","like_count":3},{"had_liked":false,"id":219653,"user_name":"mooneal","can_delete":false,"product_type":"c1","uid":1177114,"ip_address":"","ucode":"7E43AD3661BBFD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/1F8TyS4mNfhRib2nHvLZ1azGyYQj2fjr9G1RFkOINo2Mx1JYHLN7FEU9FGg5ibictp1QAQeNUFZlTVLdb8QgkJnow/132","comment_is_top":false,"comment_ctime":1590056179,"is_pvip":false,"replies":[{"id":"83078","content":"对的","user_name":"作者回复","comment_id":219653,"uid":"1001590","ip_address":"","utype":1,"ctime":1591785596,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"10179990771","product_id":100024701,"comment_content":"难道堆中数据也是通过匿名映射来获取具体的物理地址？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495891,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591785596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272047,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","nickname":"Magic","note":"","ucode":"FD9CEDAA419EB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318712,"discussion_content":"没明白？怎么讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603811870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175214,"user_name":"何柄融","can_delete":false,"product_type":"c1","uid":1398884,"ip_address":"","ucode":"A4C165D1EE3726","user_header":"https://static001.geekbang.org/account/avatar/00/15/58/64/b715d45a.jpg","comment_is_top":false,"comment_ctime":1580617521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170552113","product_id":100024701,"comment_content":"这里有个很久以前使用mmap进行文件读取和打印数据的demo（虽然当时是想用来表达进程通信的） 希望对大家有所帮助 https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;57454565","like_count":2},{"had_liked":false,"id":146266,"user_name":"小橙子","can_delete":false,"product_type":"c1","uid":1244724,"ip_address":"","ucode":"7E3DD87C3DE6F9","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/34/67c1ed1e.jpg","comment_is_top":false,"comment_ctime":1572486219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162420811","product_id":100024701,"comment_content":"当时看内存映射有些懵，可能陷入各种调用了，突然间怎么又出来这么一个调用，其实讲的前面已经提到的调用。看完文件与输入输出后 反过来又看了一遍内存映射，嗯，基本都理解了。<br><br>有一个问题，就是比如内核内存管理模块分配物理内存的时候，是要保证并发安全的吧，因为可能多个核上的程序都发生了缺页中断，也要分配物理内存","like_count":2},{"had_liked":false,"id":98413,"user_name":"玉剑冰锋","can_delete":false,"product_type":"c1","uid":1214202,"ip_address":"","ucode":"8EA56A71BA5B22","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/fa/4bcd7365.jpg","comment_is_top":false,"comment_ctime":1559001097,"is_pvip":false,"replies":[{"id":"35381","content":"Page Global Directory,PGD，是的，老是倒","user_name":"作者回复","comment_id":98413,"uid":"1001590","ip_address":"","utype":1,"ctime":1559100410,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5853968393","product_id":100024701,"comment_content":"分配全局页目录项，赋值给mm_struct的pdg成员变量。这里应该是pgd吧老师？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451676,"discussion_content":"Page Global Directory,PGD，是的，老是倒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559100410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97318,"user_name":"一笔一画","can_delete":false,"product_type":"c1","uid":1495254,"ip_address":"","ucode":"2B9BC8ADF97106","user_header":"https://static001.geekbang.org/account/avatar/00/16/d0/d6/f335954b.jpg","comment_is_top":false,"comment_ctime":1558655478,"is_pvip":false,"replies":[{"id":"49253","content":"内核线程没有用户地址空间。<br><br>如果是用户进程，则两者一样。如果是内核线程，没有mm，active_mm指向此时用户态的地址空间。","user_name":"作者回复","comment_id":97318,"uid":"1001590","ip_address":"","utype":1,"ctime":1567607455,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"5853622774","product_id":100024701,"comment_content":"请教下老师，内核线程的task struct上的mm为什么为空？另外看代码还有个active_mm，这个设计上有什么考虑吗？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451223,"discussion_content":"内核线程没有用户地址空间。\n\n如果是用户进程，则两者一样。如果是内核线程，没有mm，active_mm指向此时用户态的地址空间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567607455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1545448,"avatar":"","nickname":"望天","note":"","ucode":"EA82334BCE7564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":131,"discussion_content":"内核线程没有用户上下文","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561130933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97303,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1558650592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853617888","product_id":100024701,"comment_content":"打卡，通俗易懂","like_count":1},{"had_liked":false,"id":353425,"user_name":"涛子","can_delete":false,"product_type":"c1","uid":2647122,"ip_address":"浙江","ucode":"8B9830B2B3C6FD","user_header":"https://static001.geekbang.org/account/avatar/00/28/64/52/e4536e9c.jpg","comment_is_top":false,"comment_ctime":1659430869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659430869","product_id":100024701,"comment_content":"之前还能一天看4课，现在一课都吃力了","like_count":0},{"had_liked":false,"id":353424,"user_name":"涛子","can_delete":false,"product_type":"c1","uid":2647122,"ip_address":"浙江","ucode":"8B9830B2B3C6FD","user_header":"https://static001.geekbang.org/account/avatar/00/28/64/52/e4536e9c.jpg","comment_is_top":false,"comment_ctime":1659430654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659430654","product_id":100024701,"comment_content":"已经吐了。。。被各种调用链搞得找不着北","like_count":0},{"had_liked":false,"id":350927,"user_name":"浅陌","can_delete":false,"product_type":"c1","uid":2031603,"ip_address":"","ucode":"1C80224154E747","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ff/f3/de2233f5.jpg","comment_is_top":false,"comment_ctime":1657354839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657354839","product_id":100024701,"comment_content":"请问物理页最少是分配4k的吗","like_count":0},{"had_liked":false,"id":344904,"user_name":"小鳄鱼","can_delete":false,"product_type":"c1","uid":1178888,"ip_address":"","ucode":"9C30CAFB41A263","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","comment_is_top":false,"comment_ctime":1651846068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651846068","product_id":100024701,"comment_content":"另外一个问题：既然硬件有专门的MMU（内存管理单元，它会使用TLB），那么，这篇文章里面的相关处理是Linux的代码，还是MMU的？Linux的内存管理子系统跟硬件MMU是什么关系？","like_count":0},{"had_liked":false,"id":344898,"user_name":"小鳄鱼","can_delete":false,"product_type":"c1","uid":1178888,"ip_address":"","ucode":"9C30CAFB41A263","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","comment_is_top":false,"comment_ctime":1651843271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651843271","product_id":100024701,"comment_content":"看了第三遍才知道：mmap_region只是把虚拟内存在建立了一个假的物理内存映射（如果是文件，并记录目标文件位置和操作）而已。真正的内存分配要等程序开始访问内存之后，发现并没有实际的物理内存页，触发缺页异常再来处理并分配物理内存。这个时候应该会更新这个假的物理内存地址。这才算完成真正的映射。","like_count":0},{"had_liked":false,"id":344392,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1140494,"ip_address":"","ucode":"8FFC6764ED327B","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/0e/2a51a2df.jpg","comment_is_top":false,"comment_ctime":1651505642,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651505642","product_id":100024701,"comment_content":"第二种情况 虽然申请了物理内存 但是没有和页表项建立映射吧 怎么访问？","like_count":0},{"had_liked":false,"id":340451,"user_name":"开心","can_delete":false,"product_type":"c1","uid":1517457,"ip_address":"","ucode":"C8E08E8724C7CE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkzrezV2dOBAgickt9DLzabz3dNFYyDEVXENMQ5ibrWhFbFqXIOia3ZaR21pozvB7UfoxJx4Ar688sA/132","comment_is_top":false,"comment_ctime":1648819244,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648819244","product_id":100024701,"comment_content":"终于全部理解了，感谢作者","like_count":0},{"had_liked":false,"id":310205,"user_name":"兔嘟嘟","can_delete":false,"product_type":"c1","uid":2028811,"ip_address":"","ucode":"5A9042B4C7670C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","comment_is_top":false,"comment_ctime":1630548055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630548055","product_id":100024701,"comment_content":"这里有个疑问点，在分配物理内存时，如果是映射文件，会去看物理内存有没有缓存，如果有，就预读到内存，这里不理解。既然是物理内存中的，为什么还要读到内存，不是预读到高速缓存之类的吗？","like_count":0},{"had_liked":false,"id":301747,"user_name":"skye","can_delete":false,"product_type":"c1","uid":1027840,"ip_address":"","ucode":"C55C9F52C78A00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","comment_is_top":false,"comment_ctime":1625834184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625834184","product_id":100024701,"comment_content":"为啥需要kmap_atomic临时映射?临时映射把文件内容读到了物理内存，那这部分物理内存如何是和进程的虚拟地址关联起来的呢？","like_count":0},{"had_liked":false,"id":292034,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1620650132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620650132","product_id":100024701,"comment_content":"4 级页表示意图有个地方搞颠倒了：PGDIR_SHIT (39)、PUD_SHIT(30) 位置互换下。","like_count":0},{"had_liked":false,"id":286696,"user_name":"geek","can_delete":false,"product_type":"c1","uid":2401422,"ip_address":"","ucode":"FF0845140D72A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NyFOEueITjaGLpakMEuWAqVQjo1uDIXlpDdpCxXGfaWiaXzibLQ3WgOFCe8D9FvCmyjsGT7jDsLUbkt8jt2aVs9g/132","comment_is_top":false,"comment_ctime":1617507501,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1617507501","product_id":100024701,"comment_content":"好像没看到区分minor pagefault和major pagefault的点？我理解对于匿名映射，只会出现minor pagefault,对文件映射以及涉及swap in的部分，可能既有minor pagefault，又有major pagefault，这种情况下可能会出现io。","like_count":0},{"had_liked":false,"id":283600,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1615854579,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615854579","product_id":100024701,"comment_content":"第二遍过，带着问题看，理解加深了","like_count":0},{"had_liked":false,"id":282982,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1615509600,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615509600","product_id":100024701,"comment_content":"看了隔壁的计算机组成原理，这几张感觉理解来轻松了些","like_count":0},{"had_liked":false,"id":272774,"user_name":"AlexS","can_delete":false,"product_type":"c1","uid":1472051,"ip_address":"","ucode":"3DA81A613CE645","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","comment_is_top":false,"comment_ctime":1610272685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610272685","product_id":100024701,"comment_content":"真不错！！用户态的内存管理和访问可算是穿起来了！！有了一个全局的认识。<br><br>代码上就是得真花时间再磨一磨了。","like_count":0},{"had_liked":false,"id":259930,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604889383,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604889383","product_id":100024701,"comment_content":"看着确实挺吃力的","like_count":0},{"had_liked":false,"id":240661,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1597028832,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1597028832","product_id":100024701,"comment_content":"关于页目录项偏移的图片， PUD_SHIFT和PGDDIR_SHIFT标记反了？","like_count":0},{"had_liked":false,"id":194101,"user_name":"小橙子","can_delete":false,"product_type":"c1","uid":1244724,"ip_address":"","ucode":"7E3DD87C3DE6F9","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/34/67c1ed1e.jpg","comment_is_top":false,"comment_ctime":1585025219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585025219","product_id":100024701,"comment_content":"mmap映射物理页的内存是在page cache里面，如果page cache被强制清空了，那么页表项里面的记录是不是就无效了？ 还是说drop page cache的时候，不能清空已经在页表中映射的页。","like_count":0},{"had_liked":false,"id":193354,"user_name":"Geek_b8928e","can_delete":false,"product_type":"c1","uid":1926597,"ip_address":"","ucode":"96E4ABE3F2F145","user_header":"","comment_is_top":false,"comment_ctime":1584890849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584890849","product_id":100024701,"comment_content":"在用户态访问没有映射的内存会引发缺页异常，分配物理页表、补齐页表。如果是匿名映射则分配物理内存；如果是 swap，则将 swap 文件读入；如果是文件映射，则将文件读入。","like_count":0},{"had_liked":false,"id":177934,"user_name":"南桥畂翊","can_delete":false,"product_type":"c1","uid":1003956,"ip_address":"","ucode":"A97C49A6309A42","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/b4/0d402ae8.jpg","comment_is_top":false,"comment_ctime":1581553682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581553682","product_id":100024701,"comment_content":"这是网上关于mmap千篇一律的写法，总感觉看了老师的文章，感觉他们的描述不是很对。<br><br>他们大致是这么描述的，mmap流程如下：<br>1. 用户进程通过 mmap() 函数向内核发起系统调用，上下文从用户态切换到内核态；<br>2. 将用户空间的缓冲区与内核空间的缓冲区进行映射；<br>3. CPU 给 DMA 控制器下达指令，由 DMA 将数据从磁盘拷贝到内核空间的缓冲区；<br>4. 上下文从内核态切换回用户态，mmap() 系统调用返回；<br>5. 用户进程通过 write() 函数向内核发起系统调用，上下文从用户态切换到内核态；<br>6. CPU 将内核缓冲区的数据拷贝到 Socket 缓冲区中；<br>7. CPU 给 DMA 控制器下达指令，由 DMA 将数据从 Socket 缓冲区拷贝到网卡等设备；<br>8. 上下文从内核态切换回用户态，write() 系统调用返回；<br><br><br>由于这里不能上传图片，所以希望能加我个微信好友 m631521383，或者看我部落的最新一条动态里面有问题更详细的描述。谢谢老师。","like_count":0},{"had_liked":false,"id":146270,"user_name":"小橙子","can_delete":false,"product_type":"c1","uid":1244724,"ip_address":"","ucode":"7E3DD87C3DE6F9","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/34/67c1ed1e.jpg","comment_is_top":false,"comment_ctime":1572486549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572486549","product_id":100024701,"comment_content":"&quot;从文件里面读取数据并写入这个物理页面，又不能使用物理地址，我们只能使用虚拟地址，这就需要在内核里面临时映射一把&quot;<br><br>为何内核读取文件的时候 不能用物理地址，只能用虚拟地址？<br>是不是之前讲过的那个，除了内存管理模块外，其他模块都只能用虚拟地址？","like_count":0},{"had_liked":false,"id":105972,"user_name":"youyui","can_delete":false,"product_type":"c1","uid":1501890,"ip_address":"","ucode":"4CBD130E31CAEA","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/c2/445977ea.jpg","comment_is_top":false,"comment_ctime":1561117487,"is_pvip":false,"replies":[{"id":"38651","content":"内核就不是mmap了","user_name":"作者回复","comment_id":105972,"uid":"1001590","ip_address":"","utype":1,"ctime":1561420267,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1561117487","product_id":100024701,"comment_content":"mmap可以将文件映射到内核态的虚拟内存空间吗？（据说NIO直接内存就是这么实现的）","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454895,"discussion_content":"内核就不是mmap了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561420267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105747,"user_name":"skye","can_delete":false,"product_type":"c1","uid":1027840,"ip_address":"","ucode":"C55C9F52C78A00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","comment_is_top":false,"comment_ctime":1561080573,"is_pvip":false,"replies":[{"id":"48886","content":"大内存是的","user_name":"作者回复","comment_id":105747,"uid":"1001590","ip_address":"","utype":1,"ctime":1567504519,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1561080573","product_id":100024701,"comment_content":"请问老师，malloc调用的也是mmap 吗？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454797,"discussion_content":"大内存是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567504519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99876,"user_name":"Geek_49fbe5","can_delete":false,"product_type":"c1","uid":1451542,"ip_address":"","ucode":"3824BB1AC51268","user_header":"","comment_is_top":false,"comment_ctime":1559351055,"is_pvip":false,"replies":[{"id":"49217","content":"算进去了。","user_name":"作者回复","comment_id":99876,"uid":"1001590","ip_address":"","utype":1,"ctime":1567604058,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1559351055","product_id":100024701,"comment_content":"老师，我们平时说的pss应该是指已经分配给进程的物理页面大小的总和吧？那如果运行中有部分页面被swap到了硬盘，此时的pss还把这部分大小算进去吗？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452304,"discussion_content":"算进去了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567604058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98025,"user_name":"kdb_reboot","can_delete":false,"product_type":"c1","uid":1003594,"ip_address":"","ucode":"4C56FCA563FCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/4a/04fef27f.jpg","comment_is_top":false,"comment_ctime":1558876923,"is_pvip":false,"replies":[{"id":"49249","content":"太多了，最后结束语列出来了","user_name":"作者回复","comment_id":98025,"uid":"1001590","ip_address":"","utype":1,"ctime":1567605907,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1558876923","product_id":100024701,"comment_content":"又开始跟这个专栏了 因为感觉内容还是有料的；一个建议：在讲解每一章的时候 可否列出参考资料 或者推荐资料 或者推荐阅读的章节？有证可查 也可以互相参考","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451523,"discussion_content":"太多了，最后结束语列出来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567605907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98001,"user_name":"微秒","can_delete":false,"product_type":"c1","uid":1249195,"ip_address":"","ucode":"65A2E8B565B191","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","comment_is_top":false,"comment_ctime":1558866818,"is_pvip":false,"replies":[{"id":"35412","content":"在行文中，会强调的","user_name":"作者回复","comment_id":98001,"uid":"1001590","ip_address":"","utype":1,"ctime":1559110254,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1558866818","product_id":100024701,"comment_content":"老师，我觉得你这里说了好多地方出现了没有修饰的内存字眼，麻烦你写具体的物理内存或者虚拟内存，不然看得云里雾里的","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451507,"discussion_content":"在行文中，会强调的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559110254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97608,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1558710493,"is_pvip":false,"replies":[{"id":"35416","content":"有的异常会产生中断，有的异常是应用层的，可以不产生中断","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1559110444,"ip_address":"","comment_id":97608,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558710493","product_id":100024701,"comment_content":"老师，想问一下，中断和异常有什么区别","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451341,"discussion_content":"有的异常会产生中断，有的异常是应用层的，可以不产生中断","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559110444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}