{"id":475253,"title":"11｜标准库：深入理解标准 IO","content":"<p>你好，我是于航。</p><p>输入输出（后面简称 “IO”）是应用程序不可或缺的一种基本能力。为了保持设计上的精简，C 语言并没有在核心语言层面提供对 IO 相关接口的支持，相反，采用了标准库的方式来实现。通过引用名为 stdio.h 的标准库头文件，我们便可以快捷地为 C 程序添加读取用户键盘输入、输出内容到控制台，乃至读写文件等一系列常规的 IO 功能。</p><p>这一讲，我将为你深入介绍 C 语言中的标准 IO 模型，以及它背后的一些原理。</p><h2>快速回顾 IO 接口的使用方法</h2><p>首先，让我们通过下面这段代码来快速回顾，应该如何在 C 语言中使用这些由标准库提供的 IO 接口。对于这些接口用法的更具体说明，你可以参考<a href=\"https://en.cppreference.com/w/c/io\">这个链接</a>。</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; printf(\"Enter some characters:\\n\");\n&nbsp; FILE* fp = fopen(\"./temp.txt\", \"w+\");\n&nbsp; if (fp) {\n&nbsp; &nbsp; char ch;\n&nbsp; &nbsp; while (scanf(\"%c\", &amp;ch)) {\n      if (ch == 'z') break;\n&nbsp; &nbsp; &nbsp; putc(ch, fp);\n&nbsp; &nbsp; }\n&nbsp; } else {\n&nbsp; &nbsp; perror(\"File open failed.\");\n&nbsp; }\n&nbsp; fclose(fp);\n&nbsp; return 0;\n}\n</code></pre><p>这里，在 main 函数内部，我们通过多种不同的方式，让程序与进程预设的 IO 流以及我们自行打开的 IO 流产生了交互。</p><!-- [[[read_end]]] --><p>其中，代码第 3 行，通过 printf 函数，我们可以将指定的文本传送至标准输出流（stdout）中。紧接着，借助代码第 4 行的 fopen 函数，我们得以在当前目录下打开名为 “temp.txt” 的文件，并将其与一个特定的文件 IO 流相关联。而当文件打开失败时，通过代码第 12 行的 perror 函数，我们能够将特定的错误信息传送到标准错误流（stderr）。最后，在代码的第 7 行，scanf 函数的调用可以让我们从标准输入（stdin）流中，读取从外部环境输入的信息。</p><h2>IO 接口的不同级别</h2><p>通常来说，IO 接口可以被分为不同层次。其中，C 语言提供的 IO 接口属于“标准 IO”的范畴。与其相对的，是名为“低级 IO”的另一套编程模型。顾名思义，<strong>低级 IO 会使用与具体操作系统相关的一系列底层接口来提供相应的 IO 能力</strong>，比如常用于 Unix 与类 Unix 操作系统上的 POSIX 接口标准。如果我们将上面的示例程序完全用该标准进行重写，将会得到如下所示的代码：</p><pre><code class=\"language-c++\">#include &lt;unistd.h&gt;\n#include &lt;fcntl.h&gt;\nint main(void) {\n&nbsp; const char str[] = \"Enter some characters:\\n\";\n&nbsp; write(STDOUT_FILENO, str, sizeof(str));\n&nbsp; const int fd = open(\"./temp.txt\", O_RDWR | O_CREAT);\n&nbsp; if (fd &gt; 0) {\n&nbsp; &nbsp; char ch;\n&nbsp; &nbsp; while (read(STDIN_FILENO, &amp;ch, 1)) {\n      if (ch == 'z') break;\n&nbsp; &nbsp; &nbsp; write(fd, &amp;ch, sizeof(ch));&nbsp; &nbsp; \n&nbsp; &nbsp; }\n&nbsp; } else {\n&nbsp; &nbsp; const char errMsg[] = \"File open failed.\";\n&nbsp; &nbsp; write(STDERR_FILENO, errMsg, sizeof(errMsg));\n&nbsp; }\n&nbsp; close(fd);\n&nbsp; return 0;\n}\n</code></pre><p>可以看到，在使用低级 IO 接口进行编程时，我们需要处理与所进行 IO 操作有关的更多细节。比如，在调用 write 接口时，你必须要指定不同的文件描述符（File Descriptor），才能够区分所要进行的操作是“向屏幕上输出字符”，还是“向文件内写入数据”。相反，在高级 IO 的实现中，我们并不需要关注这些细节，接口的名称可以直接反映其具体用途。</p><p>两者之所以会在接口使用粒度上存在差异，是由于“低级 IO 与操作系统实现紧密相关”。对于 POSIX 标准来说，其所在系统会将绝大多数的 IO 相关资源，比如文档、目录、键盘、网络套接字，以及标准输入输出等，以“文件”的形式进行抽象，并使用相对统一的数据结构来表示。而在实际编码过程中，每一个可用的 IO 资源都会对应于一个唯一的整型文件描述符值。该值将被作为“单一可信源（The Single Source of Truth）”，供相关接口使用。</p><p>而标准 IO 在接口设计与使用方式上，却不会与某类特定的操作系统进行“绑定”。相反，它会提供更加统一和通用的接口，来屏蔽底层不同系统的不同实现细节，做到“一次编写，到处编译”。</p><p>除此之外，即使上述两段采用不同级别 IO 接口实现的 C 代码，在实际的可观测执行效果方面基本一致，但它们在程序运行时，资源的背后使用逻辑上却有着较大的差异。</p><h2>带缓冲的标准 IO 模型</h2><p>那么，这两种 IO 模型除了在接口使用方式上有不同外，还有哪些重要差异呢？简单来讲，<strong>与低级 IO 相比，标准 IO 会为我们提供带缓冲的输入与输出操作</strong>。事实上，标准 IO 接口在实现时，会直接使用所在平台提供的低级 IO 接口。而低级 IO 接口在每次调用时，都会通过系统调用来完成相应的 IO 操作。</p><p>关于系统调用的内容，这一讲的后面还会提到。并且，我也会在第 31 讲中再为你深入介绍。在这里你只需要知道，系统调用的过程涉及到进程在用户模式与内核模式之间的转换，其成本较高。为了提升 IO 操作的性能，同时保证开发者所指定的 IO 操作不会在程序运行时产生可观测的差异，标准 IO 接口在实现时通过添加缓冲区的方式，尽可能减少了低级 IO 接口的调用次数。</p><p>让我们再把目光移回到之前的两段示例代码上。不知道你在运行对应的两段程序时，是否有观察到它们之间的差异呢？实际上，使用低级 IO 接口实现的程序，会在用户每次输入新内容到标准输入流中时，同时更新文件 “temp.txt” 中的内容。而使用标准 IO 接口实现的程序，仅会在用户输入的内容达到一定数量或程序退出前，再更新文件中的内容。而在此之前，这些内容将会被存放到缓冲区中。</p><p>当然，C 标准中并未规定标准 IO 接口所使用的缓冲区在默认情况下的大小，对于其选择，将由具体标准库实现自行决定。</p><p>除此之外，标准 IO 还为我们提供了可以自由使用不同缓冲策略的能力。对于简单的场景，我们可以使用名为 fflush 的接口，来在任意时刻将临时存放在缓冲区中的数据立刻“冲刷”到对应的流中。而在相对复杂的场景中，我们甚至可以使用 setvbuf 等接口来精确地指定流的缓冲类型、所使用的缓冲区，以及可以使用的缓冲区大小。</p><p>比如，我们可以在上述标准 IO 实例对应 C 代码的第 4 行后面，插入以下两行代码：</p><pre><code class=\"language-c++\">// ...\nchar buf[1024];\nsetvbuf(fp, buf, _IOFBF, 5);\n// ...\n</code></pre><p>此时，再次编译并运行程序，其执行细节与之前相比会有什么不同？欢迎在评论区告诉我你的发现。</p><h2>用于低级 IO 接口的操作系统调用</h2><p>接下来，让我们再来看一看低级 IO 的相关实现细节。</p><p>在前面的内容中我曾提到过，低级 IO 接口在其内部会通过系统调用来完成相应的 IO 操作。那么，这个过程是怎样发生的呢？</p><p>实际上，你可以简单地将系统调用当作是由操作系统提供的一系列函数。只是相较于程序员在 C 源代码中自定义的“用户函数”来说，系统调用函数的使用方式有所不同。与调用用户函数所使用的 <code>call</code> 指令不同，在 x86-64 平台上，我们需要通过名为 <code>syscall</code> 的指令来执行一个系统调用函数。</p><p>操作系统会为每一个系统调用函数分配一个唯一的整型 ID，这个 ID 将会作为标识符，参与到系统调用函数的调用过程中。比如在 x86-64 平台上的 Linux 操作系统中，open 系统调用对应的 ID 值为 2，你会在接下来的例子中看到它的实际用法。</p><p>同用户函数类似的是，系统调用函数在被调用时，也需要通过相应的寄存器来实现参数传递的过程。而正如我在第 <a href=\"https://time.geekbang.org/column/article/468171\">05 讲</a> 中提到的那样，SysV 调用约定中规定，系统调用将会使用寄存器 rdi、rsi、rdx、r10、r8、r9 来进行实参的传递。当然，除此之外，rax 寄存器将专门用于存放系统调用对应的 ID，并接收系统调用完成后的返回值。</p><p>那么，让我们通过实际代码来看一看，如何在机器指令层面使用系统调用。在下面这段代码中，我们直接使用机器指令调用了 open 系统调用函数。</p><pre><code class=\"language-c++\">#include &lt;unistd.h&gt;\n#include &lt;fcntl.h&gt;\nint main(void) {\n&nbsp; const char str[] = \"Enter some characters:\\n\";\n&nbsp; write(STDOUT_FILENO, str, sizeof(str));\n&nbsp; const char* fileName = \"./temp.txt\";\n  // Call to `open` starts:\n  // const int fd = open(\"./temp.txt\", O_RDWR | O_CREAT);\n&nbsp; volatile int fd;\n&nbsp; asm(\"mov $2, %%rax\\n\\t\"\n&nbsp; &nbsp; &nbsp; \"mov %0, %%rdi\\n\\t\"\n&nbsp; &nbsp; &nbsp; \"mov $66, %%rsi\\n\\t\"  // 2 | 64 -&gt; 66;\n&nbsp; &nbsp; &nbsp; \"syscall\\n\\t\"\n&nbsp; &nbsp; &nbsp; \"mov %%rax, %1\\n\\t\"\n&nbsp; &nbsp; &nbsp; &nbsp;: \"=m\" (fileName)\n&nbsp; &nbsp; &nbsp; &nbsp;: \"m\" (fd));\n  // Call ended.\n&nbsp; if (fd &gt; 0) {\n&nbsp; &nbsp; char ch;\n&nbsp; &nbsp; while (read(STDIN_FILENO, &amp;ch, 1)) {\n      if (ch == 'z') break;\n&nbsp; &nbsp; &nbsp; write(fd, &amp;ch, sizeof(ch));\n&nbsp; &nbsp; }\n&nbsp; } else {\n&nbsp; &nbsp; const char errMsg[] = \"File open failed.\";\n&nbsp; &nbsp; write(STDERR_FILENO, errMsg, sizeof(errMsg));\n&nbsp; }\n&nbsp; close(fd);\n&nbsp; return 0;\n}\n</code></pre><p>可以看到，在上述代码的第 10 行，我们以内联汇编的形式，在程序的执行流中插入了 5 条机器指令。其中，第 1 条指令，我们将系统调用 open 对应的整型 ID 值 2 放入到了寄存器 rax 中；第 2 条指令，我们将存放有目标文件名称的字节数组 fileName 的首地址放到了寄存器 rdi 中，该参数也对应着低级 IO 接口 open 的第一个参数。接下来的一条指令，我们将配置参数对应表达式 <code>O_RDWR | O_CREAT</code> 的计算结果值 66 放入到了寄存器 rsi 中。最后，通过指令 <code>syscall</code>，我们得以调用对应的系统调用函数。</p><p>而当系统调用执行完毕后，其对应的返回值将会被放置在寄存器 rax 中。因此，你可以看到：在代码的第 14 行，我们将该寄存器中的值传送到了变量 fd 在栈内存中的位置。至此，程序对系统调用 open 的使用过程便结束了，是不是非常简单？</p><p>其实，除了低级 IO 接口以外，C 标准库中还有很多其他的功能函数，它们的实际执行也都依赖于所在操作系统提供的系统调用接口。因此，我们可以得到 C 标准库、系统调用，以及应用程序三者之间的依赖关系，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/65/93/65e41f456820119940e87250ed6ac693.jpg?wh=1920x1535\" alt=\"图片\"></p><p>这个关系看起来比较清晰，但隐藏在操作系统背后的系统调用函数实现细节，以及调用细节却非常复杂。与此相关的更多内容，我会在“C 程序运行原理篇”中再向你详细介绍。</p><h2>危险的 gets 函数</h2><p>最后，我们再来聊聊标准 IO 与代码安全的相关话题。</p><p>实际上，C 语言提供的标准 IO 接口并非都是完备的。自 C90 开始，一个名为 gets 的IO 函数被添加进标准库。该函数主要用于从标准输入流中读取一系列字符，并将它们存放到由函数实参指定的字符数组中。例如，你可以这样来使用这个函数：</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\nvoid foo(void) {\n&nbsp; char buffer[16];\n&nbsp; gets(buffer);\n}\nint main(void) {\n&nbsp; foo();\n&nbsp; return 0;&nbsp;\n}\n</code></pre><p>可以看到，函数的使用方式十分简单。在上述代码的第 3 行，我们声明了一个 16 字节大小的字符数组。紧接着，该数组作为实参被传递给了调用的 gets 函数。而此时，所有来自用户的输入都将被存放到这个名为 buffer 数组中。一切看似美好，但问题也随之而来。</p><p>实际上，gets 函数在其内部实现中，并没有对用户的输入内容进行边界检查（Bound Check）。因此，当用户实际输入的字符数量超过数组 buffer 所能承载的最大容量时，超出的内容将会直接覆盖掉栈帧中位于高地址处的其他数据。而当别有用心的攻击者精心设计输入内容时，甚至可以在某些情况下直接“篡改”当前函数栈帧的返回地址，并将其指向另外的，事先准备好的攻击代码。</p><p>正因如此，gets 函数已经在 C99 标准中被弃用，并在 C11 及以后的标准中移除。不仅如此，如今的主流编译器在遇到使用了 gets 函数的代码时，也会给予相应的安全性提示。另外，DEP、ASLR、Canary 等技术也在一定程度上降低了此类安全事故发生的风险。<strong>但无论如何，请不要在代码中使用 gets 函数</strong>。</p><h2>总结</h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>今天我主要介绍了 C 标准库中与标准 IO 相关的内容，包括 IO 接口的不同级别，它们之间的区别，以及背后的实现方式。</p><p>根据对操作系统依赖关系的强弱，IO 接口可以被分为“低级 IO”与“标准 IO”两种不同的层级。其中，低级 IO 的使用依赖于具体的操作系统，而标准 IO 则抽象出了通用的 IO 接口，因此更具可移植性。</p><p>标准 IO 一般会使用所在平台的低级 IO 接口来实现。而低级 IO 则通过调用操作系统内核提供的系统调用函数，来完成相应的 IO 操作。在 x86-64 平台上，系统调用通过 <code>syscall</code> 指令来执行。而在基于该平台的 Unix 与类 Unix 系统上，系统调用函数的执行会使用寄存器 rdi、rsi、rdx、r10、r8、r9 来进行参数的传递，rax 寄存器则用于传递系统调用 ID，以及接收系统调用的返回值。</p><p>最后，由于设计实现原因，标准库中的 gets 函数具有较大的安全风险，因此要避免在程序中使用。</p><h2>思考题</h2><p>最后，我们一起来做个思考题。</p><p>ungetc 函数有什么作用呢？对同一个流，它最多可以被连续调用多少次呢？欢迎在评论区留下你的答案。</p><p>今天的课程到这里就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p>","comments":[{"had_liked":false,"id":329416,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1641344746,"is_pvip":false,"replies":[{"id":"119995","content":"正解！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1641384250,"ip_address":"","comment_id":329416,"utype":1}],"discussion_count":1,"race_medal":0,"score":"36001083114","product_id":100100701,"comment_content":"setvbuf(fp, buf, _IOFBF, 5); <br><br>设置了缓冲区的大小为 5。表示每输入 5 个字符，就会写入文件。_IOFBF 表示 fully buffer。<br><br>而未使用 setvbuf 时，经测试，默认缓冲区大小是 4kb，当在输入 4k 个字符后，才会写入文件。","like_count":8,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544041,"discussion_content":"正解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641384251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329417,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1641346461,"is_pvip":false,"replies":[{"id":"120849","content":"很棒！实践出真知！实际上，标准中对 ungetc 的规定是，一个大小为 1 字节的“回退 buffer”是可以被保证的，但是多于一次的连续回退操作能否成功，则完全取决于具体实现。通常来说在实践中，这个 buffer 的大小最小只有标准规定的 1 字节，最大甚至可以达到 4k 字节大小。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1642339421,"ip_address":"","comment_id":329417,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23116182941","product_id":100100701,"comment_content":"ungetc 用于向流里面放回字符，取出字符的顺序与放回字符的顺序相反。<br><br>比如放回的顺序如下：<br><br>ungetc (&#39;d&#39;, file);<br>ungetc (&#39;c&#39;, file);   <br>ungetc (&#39;b&#39;, file);<br>ungetc (&#39;a&#39;, file);<br><br>那么取出时，依次是 a、b、c、d。<br><br>在网上查资料说，ungetc 不同平台实现可能不一样，有的说调用多次可能会失败，只保证一次的放回。<br><br>我在 unbuntu 64 位 下测试，多次调用是没问题的，貌似可放回的字符数是有个缓冲区大小的。<br><br>请老师解答下~<br><br>","like_count":6,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546554,"discussion_content":"很棒！实践出真知！实际上，标准中对 ungetc 的规定是，一个大小为 1 字节的“回退 buffer”是可以被保证的，但是多于一次的连续回退操作能否成功，则完全取决于具体实现。通常来说在实践中，这个 buffer 的大小最小只有标准规定的 1 字节，最大甚至可以达到 4k 字节大小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642339422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451623,"avatar":"https://static001.geekbang.org/account/avatar/00/16/26/67/c3d90f46.jpg","nickname":"may_huang","note":"","ucode":"EAF989F18FC109","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582586,"discussion_content":"取出的顺序是反过来的吗？我用ungetc 把输入的字符写入fp，查看文件内容，和输入的顺序是一致的？\n\n#include &lt;stdio.h&gt;\nint main(void) {\n  printf(&#34;Enter some characters:\\n&#34;);\n  FILE* fp = fopen(&#34;./temp.txt&#34;, &#34;w+&#34;);\n  if (fp) {\n    char ch;\n    while (scanf(&#34;%c&#34;, &amp;ch)) {\n      if (ch == &#39;z&#39;) break;\n      //putc(ch, fp);\n      ungetc(ch, fp);\n    }\n  } else {\n    perror(&#34;File open failed.&#34;);\n  }\n  fclose(fp);\n  return 0;\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659517863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329859,"user_name":"ZR2021","can_delete":false,"product_type":"c1","uid":1707352,"ip_address":"","ucode":"4F685C7516F057","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","comment_is_top":false,"comment_ctime":1641603288,"is_pvip":false,"replies":[{"id":"120394","content":"感谢认可，都是很好的问题！下面是回答：<br>1. 在 Linux x86-64 系统调用中，有一些是需要结构体对象作为参数的，比如 sys_readv。但传递方式都是通过指针，不会有直接按值传递结构体对象的情况。<br>2. 在 Linux x86-64 系统调用中，是没有需要通过栈来传参的系统调用的。<br>3. 我们在后面的课程中还会用到，但不会有专门的章节介绍哈。实际上对于大部分手写汇编，执行效率都是没有编译器产出的汇编高的，所以在日常的 C 编程中并不常用。并且由于内联汇编也会有兼容性问题，包括 asm 关键字的用法我印象里不同编译器的支持程度都是不同的。当然如果需要使用，主要关注具体汇编指令的用法，以及 asm 关键字的用法就可以。前者可以参考具体平台上的具体 manual，后者以 GCC 为例，可以参考：https:&#47;&#47;gcc.gnu.org&#47;onlinedocs&#47;gcc&#47;Extended-Asm.html","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1641979703,"ip_address":"","comment_id":329859,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14526505176","product_id":100100701,"comment_content":"讲的太好了，尤其是那个内嵌汇编，眼前一亮的感觉！！！不过老师，还是有几个问题想请教下您：<br>1. 系统调用传参使用的是寄存器，不管参数是值还是地址，传地址的话，底层会调用拷贝函数进行拷贝，那如果是结构体类型的值传参要怎么办，还是说不能有这种传参方式的？ <br>2. 系统调用传参就那么几个寄存器传参，传参个数超过了怎么办呢？还是也被规定了不能超过6个参数的，貌似我确实也没见过超过6个参数的系统调用……<br>3.这种汇编内嵌的方式感觉很厉害的样子，之前一直想学下就是学不好，后面有没有相应的课程讲解的，讲下常见的要点什么的……<br>还有，这种内嵌汇编方式的代码效率比c&#47;c++高的吗，如果高的话高在哪里呢？还是只是为了做一些高级语言做不到的事情？<br>期待老师的解惑，可能有些问题比较低级……","like_count":3,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545510,"discussion_content":"感谢认可，都是很好的问题！下面是回答：\n1. 在 Linux x86-64 系统调用中，有一些是需要结构体对象作为参数的，比如 sys_readv。但传递方式都是通过指针，不会有直接按值传递结构体对象的情况。\n2. 在 Linux x86-64 系统调用中，是没有需要通过栈来传参的系统调用的。\n3. 我们在后面的课程中还会用到，但不会有专门的章节介绍哈。实际上对于大部分手写汇编，执行效率都是没有编译器产出的汇编高的，所以在日常的 C 编程中并不常用。并且由于内联汇编也会有兼容性问题，包括 asm 关键字的用法我印象里不同编译器的支持程度都是不同的。当然如果需要使用，主要关注具体汇编指令的用法，以及 asm 关键字的用法就可以。前者可以参考具体平台上的具体 manual，后者以 GCC 为例，可以参考：https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641979703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1707352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","nickname":"ZR2021","note":"","ucode":"4F685C7516F057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":545559,"discussion_content":"谢谢老师，老师辛苦！！！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641995705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545510,"ip_address":""},"score":545559,"extra":""},{"author":{"id":1251067,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/fb/2727d82c.jpg","nickname":"　焚心以火","note":"","ucode":"41AB4C408C96D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":550044,"discussion_content":"上面使用到asm的代码，在mac下运行就不是正常。但是linux下没问题。刚测了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644369671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545510,"ip_address":""},"score":550044,"extra":""}]}]},{"had_liked":false,"id":338017,"user_name":"ppd0705","can_delete":false,"product_type":"c1","uid":1155646,"ip_address":"","ucode":"EB63D4E3FD1E9A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","comment_is_top":false,"comment_ctime":1647238419,"is_pvip":false,"replies":[{"id":"123714","content":"这个是不一定的，比如在标准 IO 里，标准错误输出肯定不是全缓冲的。相应的，对于低级 IO 来说，大多数方法都是无缓冲的，但具体使用之前还是最好看一下 man 文档，以防万一。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1647525623,"ip_address":"","comment_id":338017,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10237173011","product_id":100100701,"comment_content":"我记得 APUE 上说缓冲有三种类型：全缓冲、行缓冲、无缓冲。看来写入普通文件，标准 IO 默认是全缓冲，低级 IO 是行缓冲？","like_count":3,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556828,"discussion_content":"这个是不一定的，比如在标准 IO 里，标准错误输出肯定不是全缓冲的。相应的，对于低级 IO 来说，大多数方法都是无缓冲的，但具体使用之前还是最好看一下 man 文档，以防万一。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647525624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329421,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1641347266,"is_pvip":false,"replies":[{"id":"119993","content":"可以使用 fgets 函数哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1641383858,"ip_address":"","comment_id":329421,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10231281858","product_id":100100701,"comment_content":"老师，有没有啥 gets 的替代品？","like_count":3,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544037,"discussion_content":"可以使用 fgets 函数哈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641383858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1901415,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/03/67/a1d46d25.jpg","nickname":"zhao.shaowei","note":"","ucode":"7263738B085A5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543984,"discussion_content":"char * fgets ( char * str, int num, FILE * stream );","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641373274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338142,"user_name":"ppd0705","can_delete":false,"product_type":"c1","uid":1155646,"ip_address":"","ucode":"EB63D4E3FD1E9A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","comment_is_top":false,"comment_ctime":1647322121,"is_pvip":false,"replies":[{"id":"123706","content":"标准 IO 实际上是特指由 ISO C 标准定义的一系列接口，这些接口被定义在 C 标准中。这里你提到的 fcntl 只能算是 POSIX.1-2001 标准中的接口。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1647522098,"ip_address":"","comment_id":338142,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5942289417","product_id":100100701,"comment_content":"老师，请问 &quot;C 语言提供的 IO 接口属于“标准 IO”的范畴。&quot; 这句话可以理解为 stdid 库提供的接口属于标准 IO 范畴吗？不然 fcntl 不也算 C 语言提供的一个标准库吗？","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556813,"discussion_content":"标准 IO 实际上是特指由 ISO C 标准定义的一系列接口，这些接口被定义在 C 标准中。这里你提到的 fcntl 只能算是 POSIX.1-2001 标准中的接口。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647522098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155646,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","nickname":"ppd0705","note":"","ucode":"EB63D4E3FD1E9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556523,"discussion_content":"typo: stdid --&gt; stdio\n\n才发现 fcntl 好像不属于 C 语言的标准库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647408384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330009,"user_name":"Jack","can_delete":false,"product_type":"c1","uid":1297112,"ip_address":"","ucode":"F3863DAEF449D5","user_header":"https://static001.geekbang.org/account/avatar/00/13/ca/d8/b109ed85.jpg","comment_is_top":false,"comment_ctime":1641727948,"is_pvip":true,"replies":[{"id":"120376","content":"Linux x86-64 可以在这边查哈：https:&#47;&#47;blog.rchapman.org&#47;posts&#47;Linux_System_Call_Table_for_x86_64&#47;","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1641968478,"ip_address":"","comment_id":330009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936695244","product_id":100100701,"comment_content":"系统调用对应的 ID，去哪里找？","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545459,"discussion_content":"Linux x86-64 可以在这边查哈：https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641968478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353510,"user_name":"may_huang","can_delete":false,"product_type":"c1","uid":1451623,"ip_address":"北京","ucode":"EAF989F18FC109","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/67/c3d90f46.jpg","comment_is_top":false,"comment_ctime":1659512334,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1659512334","product_id":100100701,"comment_content":"&gt; cat my_fopen.c                                                                                                                     <br><br>#include &lt;stdio.h&gt;<br>int main(void) {<br>  printf(&quot;Enter some characters:\\n&quot;);<br>  FILE* fp = fopen(&quot;.&#47;temp.txt&quot;, &quot;w+&quot;);<br>  if (fp) {<br>    char ch;<br>    while (scanf(&quot;%c&quot;, &amp;ch)) {<br>      if (ch == &#39;z&#39;) break;<br>      putc(ch, fp);<br>    }<br>  } else {<br>    perror(&quot;File open failed.&quot;);<br>  }<br>  fclose(fp);<br>  return 0;<br>}<br>seroiuts01390&gt; gcc my_fopen.c                                                                                                                     # &#47;workspace&#47;git&#47;ehuamay&#47;test<br>seroiuts01390&gt; .&#47;a.out                                                                                                                            <br>Enter some characters:<br>File open failed.: Permission denied<br>Segmentation fault<br><br>为啥在我的环境里运行会coredump？","like_count":0},{"had_liked":false,"id":333370,"user_name":"Geek__38012c6589d3","can_delete":false,"product_type":"c1","uid":1454933,"ip_address":"","ucode":"85A08CF5E70C73","user_header":"","comment_is_top":false,"comment_ctime":1644312946,"is_pvip":false,"replies":[{"id":"121917","content":"感谢认可！^~^","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1644510553,"ip_address":"","comment_id":333370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644312946","product_id":100100701,"comment_content":"这节讲的真好 于老师牛逼","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550411,"discussion_content":"感谢认可！^~^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644510553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333335,"user_name":"墨","can_delete":false,"product_type":"c1","uid":2616644,"ip_address":"","ucode":"8198903D2029D2","user_header":"https://static001.geekbang.org/account/avatar/00/27/ed/44/4399a41a.jpg","comment_is_top":false,"comment_ctime":1644296480,"is_pvip":false,"replies":[{"id":"121918","content":"有的，可以参考这个文档：https:&#47;&#47;gcc.gnu.org&#47;onlinedocs&#47;gcc&#47;Extended-Asm.html","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1644510603,"ip_address":"","comment_id":333335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644296480","product_id":100100701,"comment_content":"老师，请问这一篇用到的内联汇编的语法，有没有什么文档可以查阅的","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550412,"discussion_content":"有的，可以参考这个文档：https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644510603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329921,"user_name":"=","can_delete":false,"product_type":"c1","uid":2600127,"ip_address":"","ucode":"104232A8292220","user_header":"https://static001.geekbang.org/account/avatar/00/27/ac/bf/f549183e.jpg","comment_is_top":false,"comment_ctime":1641646609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641646609","product_id":100100701,"comment_content":"ungetc函数的作用和getc函数相反，用于将指定内容（一个字符或者上一次的输入）放回输入流中。","like_count":0}]}