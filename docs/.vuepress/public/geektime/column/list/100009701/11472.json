{"id":11472,"title":"09 | 测试环境要多少？从成本与效率说起","content":"<p>在上一篇文章中，我分享了互联网公司测试环境的常见结构，以及对用户来说什么样的测试环境才是好用的。然而对测试环境来说，只是高效好用还不够，还要考虑到成本问题。</p>\n<p>效率和成本永远是一对矛盾体。今天，我就从成本和效率出发，和你聊聊构建测试环境时，还需要考虑的其他维度。</p>\n<h2>测试环境的成本</h2>\n<p>谈到环境成本，你很自然地就会想到云计算，《持续交付：发布可靠软件的系统方法》一书出版时，云计算还是一个时髦的概念，而8年后的今天，云技术已经非常成熟了。</p>\n<p>今天，部分传统企业和互联网企业都在选择混合云架构，而创业公司选择公有云已经有了点模式化的意味。公有云非常好地满足了DevOps的“基础设施即代码”的理念，哪怕你完全不使用公有云，那在环境中整合开源的私有云技术依然能为你带来不少便利。</p>\n<p>然而，云计算并非“银弹”，我们上云后，在成本上，还是有很多值得去思考和做的事情。</p>\n<p>尤其是当环境数量增加时，你很容易就可以想到成本会增加，但是你可能并不明白要增加哪些方面的成本，以及会增加多少的问题。那么，接下来，我就跟你聊聊当环境数量增加时，你需要考虑的成本有哪些呢？</p>\n<p><strong>首先是机器资源成本</strong></p>\n<p>保证环境的独立性，是你构建更多套环境的一个主要原因。但是，一套独立的、拥有完整链路的环境成本是非常高的。</p><!-- [[[read_end]]] -->\n<p>那么，以阿里云的价格为例，我来跟你一起算算这笔账。假设一个只有100个应用的微服务架构环境，选取单应用单机2核4G内存的低配置实例方式进行部署，单实例的年价格在2000元左右，100个实例的话，一年的花费就是20万元左右。</p>\n<p>而这只是最保守的计算，随着服务规模的增加，以及更多环境的需要，整体花费上涨两个数量级也是很正常的。</p>\n<p>这样的问题在开发环境和集成环境的表现是最明显的。为了保证这两套环境的独立性，你必然需要有很高的环境副本数。但无论如何，你都不可能让每一个开发和测试人员都拥有一套完整环境的硬件资源。</p>\n<p>可见，每一套环境的机器资源成本都很大，而且随着需求的增加成比例增长。</p>\n<p><strong>其次是管理成本</strong></p>\n<p>管理成本，包括维护环境的可用性，配置的管理成本，和测试数据的维护成本三个维度。</p>\n<ol>\n<li>\n<p><strong>维护多套环境的第一要点是，维护环境的可用性。</strong><br />\n与云时代之前相比，容器技术已经解决了很多问题。比如，服务器操作系统级别的依赖的标准化更容易了；当出现硬件故障时，迁移和恢复服务也更加方便了。<br />\n但是，容器技术并没有解决故障定位的问题。微服务架构下集群的节点数量多, 调用链复杂，你不再能确定到底是环境问题，还是程序本身的Bug，也就导致定位故障更加困难了。<br />\n所以，更多套环境就意味着更大的集群规模，出现故障的几率会随之增加，而解决故障也会占用你更长的工作时间。</p>\n</li>\n<li>\n<p><strong>维护多套环境的另一大成本是，配置的管理成本。</strong><br />\n配置是环境管理中最核心的内容，创建一套环境时，为了保证它真正的独立可用，不仅要保证应用可以成功运行，还要保证应用在基础设施的配置是正确的。比如集成测试环境下部署了一个应用的多个平行项目，就需要有办法保证测试人员能访问到正确的应用。<br />\n如果是Web应用，你就要考虑把应用绑定到不同的域名，这样就会增加域名管理的成本；如果是一个service应用，你就要考虑到这些service不会被其他项目的、无关环境中的应用调用到，同时也不会调用到其他错误的服务。<br />\n每多一套环境，就会多一套这样的配置，而且这些配置都需要在各类基础设施中生效。</p>\n</li>\n<li>\n<p><strong>维护多套环境的第三大成本是，测试数据的维护成本。</strong><br />\n测试数据也是环境中极为重要的一个组成部分。当并行环境的数量变多后，数据的维护同样是让人头疼的问题。<br />\n为了保证环境的高仿真，哪些环境共用一套数据库，以及测试数据的更新在多套环境中怎么执行等等，都需要非常高的管理成本。</p>\n</li>\n</ol>\n<p><strong>最后是流程成本</strong></p>\n<p>流程成本主要包括沟通成本和测试成本两个方面。</p>\n<ol>\n<li>\n<p>沟通成本<br />\n每增加一套环境，你都需要考虑团队成员如何在新环境上沟通协作。谁在占用，何时退出这些信息，你都需要第一时间告知团队。当环境的数量变得非常多以后，做好这些事的难度就很大了。</p>\n</li>\n<li>\n<p>测试成本<br />\n在开发环境，集成测试环境，验收测试环境，预发布环境，生产环境这样的结构下，核心功能的测试流程就至少会执行五次。每引入一套新的环境，测试流程都会变得更加复杂。</p>\n</li>\n</ol>\n<h2>如何调解效率和成本的矛盾？</h2>\n<p>现在你应该已经意识到，因为增加一套环境带来的成本竟然有那么多。但是为了提高持续交付的效率，隔离的多套环境又是必不可少的。</p>\n<p>那么，你究竟应该怎样去规划和设计环境呢？</p>\n<p><strong>第一，公共与泳道的</strong></p>\n<p><strong>第一个关键点是抽象公共环境，而其中的公共服务基本都属于底层服务，相对比较稳定，这是解耦环境的重中之重。</strong> 比如我们经常会将中间件，框架类服务，底层业务公共（账户，登陆，基本信息）服务部署在这套公共环境下。</p>\n<p><strong>在公共环境的基础上，可以通过泳道的方式隔离相关测试应用</strong>，利用LB和SOA中间件对路由功能的支持，在一个大的公共集成测试环境中隔离出一个个独立的功能测试环境，那么增加的机器成本就仅与被并行的项目多少有关系了。</p>\n<p>为了帮助你理解，我跟你分享一个具体的案例。</p>\n<p>比如，你有一个新的下单流程需要测试。你可以将“下单web 2.0”和“下单service 2.0”抽离出来，如图中的“功能环境1”所示。并保证被剥离出的“下单service 2.0”只能被当前环境内的web服务器调用。而“下单service 2.0”所依赖调用的“支付service 1.0”则放在公共环境中。</p>\n<p>于此同时，如图中所示的“功能环境2”，可以同时支持“下单service 3.0”这个并行版本与一个新版本的“支付service 2.0”进行联调，此环境是不会调用公共环境中的“支付service 1.0”的。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/a4/d0/a4497ca9571f432cf1e82629161872d0.png?wh=813*420\" alt=\"\" /></p>\n<p>通过这种方式，你就可以解决并行开发和并行测试的问题了。</p>\n<p><strong>第二，避免产生多套公共环境</strong></p>\n<p>从原则上讲，集成环境中只要有一套公共环境就足够了。但有时候，你会发现项目的范围特别广，依赖应用或者影响应用特别多，特别是一些底层服务的改动或者重构等。在这种情况下，如果把依赖它的所有服务都部署起来，就很有可能变成第二、第三套公共环境了。</p>\n<p>这种情况下，你可以通过 mock service 来模拟大多数服务，这样就可以达到测试环境的最小集合了。关于mock service 如何做，我会在后续的讲解中，为你详细解释。</p>\n<p><strong>第三，减轻配置的复杂度</strong></p>\n<p>而对于减轻环境配置的复杂度来说，你可以从以下两个方面着手：</p>\n<ol>\n<li>\n<p>制定一套统一配置的解决方案；</p>\n</li>\n<li>\n<p>要让环境自己说话，有效减少配置项。</p>\n</li>\n</ol>\n<p>比如，对于数据库，对于不同的测试需求，我们可能会在公共的数据库和独立的数据库之间进行频繁切换；又比如，我们可以在启动应用时自动配置正确的数据库。那么无论有多少套环境，配置也不是一件难事。</p>\n<p>关于减轻配置的复杂度，我也会在专栏后续的讲解中，给你详细分析如何实现。</p>\n<h2>总结</h2>\n<p>我们究竟需要多少套环境，这个问题的答案应该是这样的：在大环境（开发、集成、验收）的数量上，你要考虑环境的核心用户是谁，环境的核心价值是什么。在环境的核心价值没有冲突时，尽量减少大环境的数量。</p>\n<p>有些公司就通过功能分支直接上线的分支策略，对每个分支， 都创建一整套的功能测试环境，并在分支上线后快速释放。以这样的方式，精简了验收测试环境，即大环境的产生。但其代价是发布过程分支之间必须是串行的，即一个分支的上线会阻塞其他分支的上线。</p>\n<p>而在每个大环境的子环境上（也就是按照测试需求被剥离出来的功能环境），你必须保证它的副本数可以满足用户测试的隔离需求。比如，在集成测试环境，只产生一套公共环境，并通过工具，支持隔离的功能测试环境的快速建立和销毁，让环境可以按需分配。</p>\n<h2>思考题</h2>\n<p>当你需要一套性能测试环境时，是独立出一套大环境还是作为一个子环境依附于某个大环境比较好？</p>\n<p>欢迎你给我留言。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"08 | 测试环境要多少？从现实需求说起","id":11468},"right":{"article_title":"10 | 让环境自己说话，论环境自描述的重要性","id":11961}},"comments":[{"had_liked":false,"id":17040,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c1","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1532394652,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31597165724","product_id":100009701,"comment_content":"性能测试还是一个独立干净的环境更容易达到测试目的。如果和别的测试环境混搭，机器性能指数都不太准确，对测试结果的精确度以及正确性都会有影响，所以尽量使用独立测试环境","like_count":8},{"had_liked":false,"id":17023,"user_name":"李奋斗","can_delete":false,"product_type":"c1","uid":1068509,"ip_address":"","ucode":"0E2E39E733B9BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/dd/912b52ed.jpg","comment_is_top":false,"comment_ctime":1532392109,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18712261293","product_id":100009701,"comment_content":"性能测试可以夜里在验收环境上跑，验收环境在部署与数据上跟生产最相近。","like_count":5,"discussions":[{"author":{"id":1181887,"avatar":"https://static001.geekbang.org/account/avatar/00/12/08/bf/cd6bfc22.jpg","nickname":"自然","note":"","ucode":"EDFC3EFAB0B88E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571098,"discussion_content":"性能测试通常还要关注 系统性能边界 。如果验收环境是按照系统性能边界购买，那还真的可以。（一般系统设计都要一定的前瞻性）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652067795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109369,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1562027410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856994706","product_id":100009701,"comment_content":"前一章的开发，功能测试，验收，预生产，生产环境，和这节课的集成，公共有什么联系？看懵了","like_count":1},{"had_liked":false,"id":130468,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1567471189,"is_pvip":false,"replies":[{"id":"57410","content":"这个讲起来会比较复杂，建议可以学习一下服务治理，服务发现，链路等相关知识","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1573194659,"ip_address":"","comment_id":130468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567471189","product_id":100009701,"comment_content":"老师说的中间件来进行隔离子环境，请问有具体的示范嘛？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465968,"discussion_content":"这个讲起来会比较复杂，建议可以学习一下服务治理，服务发现，链路等相关知识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573194659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109368,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1562027335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562027335","product_id":100009701,"comment_content":"前一章的开发，功能测试，验收，预生产，生产环境，和这节课的集成，公共有什么联系？看懵了","like_count":0},{"had_liked":false,"id":101819,"user_name":"春之绿野","can_delete":false,"product_type":"c1","uid":1057216,"ip_address":"","ucode":"296003F7D2B086","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/c0/38816c31.jpg","comment_is_top":false,"comment_ctime":1559983374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559983374","product_id":100009701,"comment_content":"应该是独立的大环境比较合适吧，作为子环境的话和其他子环境公用一个大环境，性能会受到其他子环境的影响。测试的结果不准确。","like_count":0},{"had_liked":false,"id":92227,"user_name":"一笑","can_delete":false,"product_type":"c1","uid":1213453,"ip_address":"","ucode":"0FB88882D6C85E","user_header":"https://static001.geekbang.org/account/avatar/00/12/84/0d/0d1fece8.jpg","comment_is_top":false,"comment_ctime":1557206544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557206544","product_id":100009701,"comment_content":"性能测试最佳的实践是怎么样的？","like_count":0},{"had_liked":false,"id":55344,"user_name":"童飞帆","can_delete":false,"product_type":"c1","uid":1115956,"ip_address":"","ucode":"6F39A98DFE6BDA","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/34/40cf4ecd.jpg","comment_is_top":false,"comment_ctime":1546140241,"is_pvip":false,"replies":[{"id":"20616","content":"从微服务的方向来说是独立隔离数据库的，但也并不绝对，比如公用的用户数据库等还是可以共用，但可以以数据相隔离，比如使用不同的用户，但这类数据库要保证向前兼容","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1546670615,"ip_address":"","comment_id":55344,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546140241","product_id":100009701,"comment_content":"老师你好，请假一个问题，在创建子环境的时候，启动应用时候是否做了数据库隔离？若数据库未隔离，则子环境间数据难免会互相污染；若数据库隔离，那么是否意味着创建子环境时同时也要新建数据表单同时插入初始化数据？","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434747,"discussion_content":"从微服务的方向来说是独立隔离数据库的，但也并不绝对，比如公用的用户数据库等还是可以共用，但可以以数据相隔离，比如使用不同的用户，但这类数据库要保证向前兼容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546670615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22475,"user_name":"zhf_sy","can_delete":false,"product_type":"c1","uid":1054604,"ip_address":"","ucode":"2BE4592F66CCF1","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/8c/f3ada7dc.jpg","comment_is_top":false,"comment_ctime":1535695852,"is_pvip":false,"replies":[{"id":"8097","content":"这个很难回答啊，任何应用之间，人和人之间都没有可比性的，而且敏捷不是一味追求快速度哦，是找到合适自己团队的节奏<br><br>另外，也没有人说微服务比单体应用慢呢","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1535783115,"ip_address":"","comment_id":22475,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1535695852","product_id":100009701,"comment_content":"请问，spring cloud微服务，敏捷方式：<br>设计，开发，测试，一般时间占比是多少？<br>微服务与传统单体应用会慢多少？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423136,"discussion_content":"这个很难回答啊，任何应用之间，人和人之间都没有可比性的，而且敏捷不是一味追求快速度哦，是找到合适自己团队的节奏\n\n另外，也没有人说微服务比单体应用慢呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535783115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17390,"user_name":"最真实的自己","can_delete":false,"product_type":"c1","uid":1174021,"ip_address":"","ucode":"02EE79BDAB2165","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/05/388371e0.jpg","comment_is_top":false,"comment_ctime":1532609181,"is_pvip":false,"replies":[{"id":"6061","content":"2种方案，一种，公共中保持老版本，独立一个泳道测试新版本；第二种，公共中更新新版本，需要依赖老版本的应用在自己的泳道中部署老版本。当然，实际上肯定是推荐第一种方法的","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1532683937,"ip_address":"","comment_id":17390,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532609181","product_id":100009701,"comment_content":"第一，公共与泳道的<br><br><br>这种方案真能解决并行开发，开行测试的问题么，如果公共环境中的模块正在开发呢？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421136,"discussion_content":"2种方案，一种，公共中保持老版本，独立一个泳道测试新版本；第二种，公共中更新新版本，需要依赖老版本的应用在自己的泳道中部署老版本。当然，实际上肯定是推荐第一种方法的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532683937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}