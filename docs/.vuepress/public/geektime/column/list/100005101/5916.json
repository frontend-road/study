{"id":5916,"title":"20 | 用RNN构建个性化音乐播单","content":"<p>时间是一个客观存在的物理属性，很多数据都有时间属性，只不过大多时候都把它忽略掉了。前面讲到的绝大多数推荐算法，也都没有考虑“用户在产品上作出任何行为”都是有时间先后的。</p>\n<p>正是认识到这一点，有一些矩阵分解算法考虑了时间属性，比如Time-SVD；但是，这种做法只是把时间作为一个独立特征加入到模型中，仍然没有给时间一个正确的名分。</p>\n<h2>时间的重要性</h2>\n<p>时间属性反应在序列的先后上，比如用户在视频网站上观看电视剧会先看第一集再看第二集，股市数据先有昨天的再有今天的，说“我订阅了《推荐系统36式》专栏”这句话时，词语也有先后，这种先后的关系就是时间序列。</p>\n<p>具体到推荐系统领域，时间序列就是用户操作行为的先后。绝大数推荐算法都忽略操作的先后顺序，为什么要采取这样简化的做法呢？因为一方面的确也能取得不错的效果，另一方面是深度学习和推荐系统还迟迟没有相见。</p>\n<p>在深度学习大火之后，对时间序列建模被提上议事日程，业界有很多尝试，今天以Spotify的音乐推荐为例，介绍循环神经网络在推荐系统中的应用。</p>\n<h2>循环神经网络</h2>\n<p>循环神经网络，也常被简称为RNN，是一种特殊的神经网络。再回顾一下神经网络的结构，示意图如下：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/61/c6/61177f813f5f493966f8f9beaa395dc6.png?wh=1064*826\" alt=\"\" /></p>\n<p>普通神经网络有三个部分，输入层x，隐藏层h，输出层o，深度神经网络的区别就是隐藏层数量有很多，具体多少算深，这个可没有定论，有几层的，也有上百层的。</p>\n<p>把输入层和隐藏层之间的关系表示成公式后就是：</p>\n<p>$$h = F(Wx) $$</p>\n<p>就是输入层x经过连接参数线性加权后，再有激活函数F变换成非线性输出给输出层。</p>\n<p>在输出层就是：</p>\n<p>$$O = \\phi(Vh) $$</p>\n<p>隐藏层输出经过输出层的网络连接参数线性加权后，再由输出函数变换成最终输出，比如分类任务就是Softmax函数。</p>\n<p>那循环神经网络和普通神经网络的区别在哪？</p>\n<p>区别就在于：普通神经网络的隐藏层参数只有输入x决定，因为当神经网络在面对一条样本时，这条样本是孤立的，不考虑前一个样本是什么，循环神经网络的隐藏层不只是受输入x影响，还受上一个时刻的隐藏层参数影响。</p>\n<p>我们把这个表示成示意图如下：<br />\n<img src=\"https://static001.geekbang.org/resource/image/28/71/285fdbb62e517ddb2099d3b6c87f8371.png?wh=1920*886\" alt=\"\" /></p>\n<p>解释一下这个示意图。在时刻t，输入是xt，而隐藏层的输出不再是只有输入层xt，还有时刻t-1的隐藏层输出h(t-1)，表示成公式就是：</p>\n<p>$$h_{t} = F(Wx_{t} + Uh_{t-1})$$</p>\n<p>对比这个公式和前面普通神经网络的隐藏层输出，就是在激活函数的输入处多了一个 $Uh_{t-1}$ 。别小看多这一个小东西，它背后的意义非凡。</p>\n<p>我一直在传递一个观点，隐藏层的东西，包括矩阵分解和各种Embedding得到的隐因子，是对很多表面纷繁复杂的现象所做的信息抽取和信息压缩。</p>\n<p>那么上一个时刻得到的隐藏层，就是对时间序列上一个时刻的信息压缩，让它参与到这一个时刻的隐藏层建设上来，物理意义就是认为现在这个时刻的信息不只和现在的输入有关，还和上一个时刻的状态有关。这是时间序列本来的意义，也就是循环神经网络的意义。</p>\n<!-- [[[read_end]]] -->\n<h2>播单生成</h2>\n<p>了解了循环神经网络原理之后，我再和你一起来看下它如何应用在推荐系统中的。</p>\n<p>在网络音乐推荐中，尤其是各类FM类App，提倡的是一直听下去，比如是你在做家务时，你在开车时，一首歌接着一首歌地播下去，就很适合这些场景。</p>\n<p>通常要做到这样的效果，有这么几种做法。</p>\n<ol>\n<li>电台音乐DJ手工编排播单，然后一直播放下去，传统广播电台都是这样的。</li>\n<li>用非时序数据离线计算出推荐集合，然后按照分数顺序逐一输出。</li>\n<li>利用循环神经网络，把音乐播单的生成看成是歌曲时间序列的生成，每一首歌的得到不但受用户当前的特征影响，还受上一首歌影响。</li>\n</ol>\n<p>Spotify采用了第三种办法，下面我就详细讲解这个推荐算法。</p>\n<h3>1.数据</h3>\n<p>个性化的播单生成，不再是推荐一个一个独立的音乐，而是推荐一个序列给用户。所用的数据就是已有播单，或者用户的会话信息。其中用户会话信息的意思就是，当一个用户在App上所做的一系列操作。</p>\n<p>把这些数据，看成一个一个的文档，每一个音乐文件就是一个一个的词。听完什么再听什么，就像是语言中的词和词的关系。</p>\n<h3>2.建模</h3>\n<p>你可以把播单生成看成由若干步骤组成，每一步吐出一个音乐来。这个吐出音乐的动作实际上是一个多分类问题，类别数目就是总共可以选择的音乐数目，如果有100万首歌可以选择，那么就是一个100万分类任务。</p>\n<p>这个分类任务计算输入是当前神经网络的隐藏状态，然后每一首歌都得到一个线性加权值，再由Softmax函数为每一首歌计算得到一个概率。表示如下：</p>\n<p>$$p(o_{ti} | h_{t}) = \\frac{e^{v_{i}h}}{\\sum_{j \\in M}{e^{v_{j}h}}} $$</p>\n<p>假如隐藏层有k个神经元，也就是说h是一个k维向量，输出层有m首歌可选，所以是一个One-hot编码的向量，也就是说一个m维向量，只有真正输出那首歌i是1，其他都是0，那么输出层就有k乘以m个未知参数。</p>\n<p>再往前，计算隐藏层神经元输出时，不但用到输入层的信息，在这里，输入层也是一首歌，也有m首歌可以选择，所以输入向量仍然是一个One-hot编码的向量。</p>\n<p>除此之外，每一个隐藏层神经元还依赖上一个时刻自己的输出值，隐藏层神经元是k个，一个k维向量。</p>\n<p>按照隐藏层计算公式就是下面的样子。</p>\n<p>$$h_{t} = F(Wx_{t} + Uh_{t-1})$$</p>\n<p>W就是一个m乘以k的参数矩阵，U就是一个k乘以k的参数矩阵。</p>\n<p>如此一来，循环神经网络在预测时的计算过程就是：</p>\n<p>当用户听完一首歌，要预测下一首歌该推荐什么时，输入就是一个One-hot编码的m维度向量，用m乘以k形状的输入层参数矩阵，乘以这个m向量，然后用隐藏层之间的k乘k参数矩阵，去乘以上一个隐藏状态向量，两者都得到一个k维向量，相加后经过非线性激活函数，比如ReLU，这样就得到当前时刻的隐藏层输出值。</p>\n<p>再用当前时刻的隐藏层输出值，经过k乘以m形状的输出层参数矩阵，得到一个m维向量，再用Softmax把这个m维向量归一化成概率值，就是对下一首歌的预测，可以挑选最大概率的若干首歌作为输出，或者直接输出概率最高的那首歌直接播放。</p>\n<p>这个计算过程示意图如下：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/79/28/79e67fc2dd3172dd1e331d6ebd5e9a28.png?wh=1920*892\" alt=\"\" /></p>\n<p>一个播单生成模型的参数就是这么三大块。</p>\n<ol>\n<li>连接输入和隐藏之间的矩阵 $W_{m\\times{k}}$；</li>\n<li>连接上一个隐藏状态和当前隐藏状态的矩阵： $U_{k \\times {k}}$；</li>\n<li>连接隐藏层和输出层的矩阵 $V_{k\\times{m}}$。</li>\n</ol>\n<p>得到了这些参数，就得到了播单推荐模型，怎么得到呢？这里就再简要讲一下神经网络的参数如何训练得到。</p>\n<p>你知道一个简单的逻辑回归模型参数如何训练得到吗？大致是这样几步：</p>\n<ol>\n<li>初始化参数；</li>\n<li>用当前的参数预测样本的类别概率；</li>\n<li>用预测的概率计算交叉熵；</li>\n<li>用交叉熵计算参数的梯度；</li>\n<li>用学习步长和梯度更新参数；</li>\n<li>迭代上述过程直到满足设置的条件。</li>\n</ol>\n<p>神经网络的参数学习大致也是这个过程，但略为复杂的地方就是第4步和第5步，因为逻辑回归没有隐藏层，神经网络有隐藏层。那怎么办呢？我不打算讲解具体的做法，我打算给你建立一个直观印象。</p>\n<p>还记得下面这个函数对x求导是怎么计算的吗？</p>\n<p>$$f(x) = g(x)^2;$$</p>\n<p>$$g(x) = e^x$$</p>\n<p>函数f(x)是另一个函数gx的平方，函数g(x)又是一个指数函数。那么要对f(x0求导，就是一个链式规则，先把g(x)看成个一个整体求导，再乘以g(x)的求导结果：</p>\n<p>$$f^{’}(x) = 2g(x)e^{x} = 2e^{x}e^{x} = 2e^{2x}$$</p>\n<p>你就需要记住一点：链式规则，一路求导下去。</p>\n<p>现在回到神经网路的训练，这个方法有个高大上的名字，叫做误差方向传播。</p>\n<p>实际上就是链式求导法则，因为要更新参数，就需要计算参数在当前取值时的梯度，要计算梯度就要求导，要求导就要从交叉熵函数开始，先对输出层参数求导计算梯度，更新输出层参数，接着链式下去，对输入层参数求导计算梯度，更新输入层参数。</p>\n<p>交叉熵是模型的目标函数，训练模型的目的就是要最小化它，也就是“误差反向传播”的“误差”。</p>\n<p>相信聪明如你已经在直观上理解了一个普通神经网络是怎么训练的了，那么一个循环神经网络的参数训练有何不同呢？唯一不同就是多了一个参数矩阵，连接当前隐藏层和上一次隐藏层的参数矩阵U，也是链式求导法则的传播路径，也就是多了一些求导计算，更新参数方式并没有什么不同。</p>\n<h2>总结</h2>\n<p>好了，今天介绍了如何使用循环神经网络推荐音乐播单，播单是一个时间序列，听完上一首歌会影响下一首歌。</p>\n<p>循环神经网络和普通神经网络相比，就是在两个时刻的隐藏状态之间多了网络连接。看上去这个网络连接只与上一个时刻有关，事实上，上一个状态又与上上个状态有关，所以实际上任意一个时刻的状态是与此前所有的状态有关的。</p>\n<p>今天的应用虽然是以播单推荐为例，但其实循环神经网络还可以应用在很多其他地方，你对循环神经网络的应用有任何问题都可以留言给我，我们一起讨论。</p>\n<p>感谢你的收听，我们下期再见。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/10/50/1025014d381c4913aae6eaef553d7750.jpg?wh=3560*2008\" alt=\"\" /></p>\n","neighbors":{"left":{"article_title":"19 | 深度学习在推荐系统中的应用有哪些?","id":5843},"right":{"article_title":"21 | 构建一个科学的排行榜体系","id":5933}},"comments":[{"had_liked":false,"id":5822,"user_name":"哎哎哎","can_delete":false,"product_type":"c1","uid":1074993,"ip_address":"","ucode":"E33B808F79979D","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/31/0fbadaff.jpg","comment_is_top":false,"comment_ctime":1524009901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40178715565","product_id":100005101,"comment_content":"请问一下，能分享一下rnn在业界的应用效果吗？Spotify真的用rnn了吗？相比较线上效果如何呢？如何部署上线呢？老师，希望多来一些业界应用和经验分享啊","like_count":10},{"had_liked":false,"id":8518,"user_name":"异尘","can_delete":false,"product_type":"c1","uid":1059867,"ip_address":"","ucode":"4BB17F4964EB1E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/MdKiauCwb4CJMa3sbQyrjSKceWicHSf81Typ7Hia6ZrArtCQtd3Ezetu8TJnHmianJV2Aq9Lic7YNSdEq2R2F3EH7WQ/132","comment_is_top":false,"comment_ctime":1526293712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18706162896","product_id":100005101,"comment_content":"有个问题请教下老师，我的理解，这个RNN模型考虑了用户的历史播放行为来做预测，应该是针对某个特定用户的，如果我们需要给每个用户做个性化推荐，岂不是需要训练非常多的RNN模型？（每个用户一个）","like_count":4},{"had_liked":false,"id":114552,"user_name":"Jun60","can_delete":false,"product_type":"c1","uid":1602646,"ip_address":"","ucode":"7D1A10E54D27BC","user_header":"https://static001.geekbang.org/account/avatar/00/18/74/56/b26b9772.jpg","comment_is_top":false,"comment_ctime":1563333583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14448235471","product_id":100005101,"comment_content":"感觉这部分说的有点虚，对于的RNN实际应用没有具体的讲解，过于概括","like_count":4},{"had_liked":false,"id":304791,"user_name":"寒玉阳","can_delete":false,"product_type":"c1","uid":1446961,"ip_address":"","ucode":"8E9196960768E6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibXzoEYHwV5Sc79EL58ZeBn8yZIkdVBGniabydtfhFqe76IDNQ95miaiawEm79HlE6icTA/132","comment_is_top":false,"comment_ctime":1627616368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10217550960","product_id":100005101,"comment_content":"哎，我不知道这个东西老师在实际中有无落地，但你说的这些东西很虚，基本就是些rnn的原理和链式求导仅此而已，这课从我这不会在传到其他人手里了<br>","like_count":3},{"had_liked":false,"id":201327,"user_name":"王东","can_delete":false,"product_type":"c1","uid":1638139,"ip_address":"","ucode":"915D343067BC34","user_header":"https://static001.geekbang.org/account/avatar/00/18/fe/fb/e426cf26.jpg","comment_is_top":false,"comment_ctime":1585751951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880719247","product_id":100005101,"comment_content":"我感觉这个很难工程化落地，效果应该也一般吧","like_count":2},{"had_liked":false,"id":91542,"user_name":"shangqiu86","can_delete":false,"product_type":"c1","uid":1514817,"ip_address":"","ucode":"07D376EEC21BE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qRjoqWIGC6tpmKZBGTxjQKC9cbz9XLhw2nF1c74R4icFOYOdVO4iaeQEQDqEvmbicxn6HEc4SU8kpkwVaO5nABMug/132","comment_is_top":false,"comment_ctime":1557051469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852018765","product_id":100005101,"comment_content":"这里是否跟上一张youTube存在一样的问题，分类的类别可能上亿，效率如何？是否可以把歌曲进行分类，把输入歌单也映射成类别，用类别序列预测类别，不过往往用户听歌喜欢听一某个特定类别的序列。<br>老师，训练样本选取以及处理的时候是不是先对每个歌曲进行embedding，然后将用户形成的歌曲列表中每首歌的embedding向量相加，或者取平均，然后塞入模型中？RNN是否换成lstm或者GRU来试下，效果如何？有单独介绍这个实践的文章吗？","like_count":1},{"had_liked":false,"id":5902,"user_name":"风","can_delete":false,"product_type":"c1","uid":1059540,"ip_address":"","ucode":"B15B5DAF7E8EBE","user_header":"https://static001.geekbang.org/account/avatar/00/10/2a/d4/c324a7de.jpg","comment_is_top":false,"comment_ctime":1524108598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5819075894","product_id":100005101,"comment_content":"有实际例子？","like_count":1},{"had_liked":false,"id":5846,"user_name":"zc","can_delete":false,"product_type":"c1","uid":1013406,"ip_address":"","ucode":"A231FA413151DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/9e/dc53669e.jpg","comment_is_top":false,"comment_ctime":1524039759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5819007055","product_id":100005101,"comment_content":"就是输入层 x 经过连接参数线性加权后，再有激活函数 F 变换成非线性输出给输出层。<br><br>看公式，是不是应该 输出给隐藏层？<br>","like_count":1},{"had_liked":false,"id":30732,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1538985238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538985238","product_id":100005101,"comment_content":"这个只是最简单的版本吧，只考虑每个歌单的顺序，并没有结合不同用户的feature之类的。assumption是大家听了这个歌之后都听了下一个歌，那么你一定喜欢下一个歌。现实有点差距啊。 ","like_count":0},{"had_liked":false,"id":5930,"user_name":"林彦","can_delete":false,"product_type":"c1","uid":1032615,"ip_address":"","ucode":"5094CC6ED7B40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/a7/5e66d331.jpg","comment_is_top":false,"comment_ctime":1524144663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1524144663","product_id":100005101,"comment_content":"有些好奇对于无标注或少标注的时间序列数据有没有什么RNN的无监督深度学习变体可以处理，而且有开源或成熟的工具可以落地。我之前遇到过一个被叫作Nonlinear Autoregressive Network(NAN)的算法用来处理时间序列数据，没搜索到这种名字的算法的在时间序列数据上的计算应用细节。","like_count":0}]}