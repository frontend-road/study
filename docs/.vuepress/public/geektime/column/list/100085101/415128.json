{"id":415128,"title":"15 | 测试应该怎么配比？","content":"<p>你好，我是郑晔！</p><p>经过前面内容的讲解，相信你对在实际项目中如何编写单元测试和集成测试已经有了一个基本的认识。无论你是经验丰富的老程序员还是初入职场的新程序员，如果只是单独写几个测试，相信你都可以手到擒来。但真实的项目中我们不是要编写几个测试，而是要大批量地编写测试。</p><p>一旦编写的测试增多，你脑海里必然会出现一个疑问：有一些内容用单元测试覆盖可以，用集成测试覆盖也可以，如果只写单元测试总有些不放心，如果同时用单元测试和集成测试去覆盖，工作量似乎又会增大，不同的测试应该怎样配比呢？这就是我们这一讲要讨论的内容。</p><h2>测试的特点</h2><p>在讨论如何配比测试之前，我们需要先了解各种类型测试的特点，毕竟正是因为它们有着不同的特点，我们才需要对不同的测试按照不同的比例进行配比。</p><p>首先来看<strong>单元测试</strong>。单元测试是针对一个单元的测试，因为涉及面很小，所以单元测试要进行的设置会比较少。单元测试不牵扯到外部组件，一般而言只在内存中执行，执行速度很快。所以谈及单元测试的特点我们一般会说，它成本低、速度快、单个测试的覆盖面小，但整体覆盖面大。</p><p>再来看<strong>集成测试</strong>。相比于单元测试来说，集成测试的涉及面要广一些，设置起来就比较麻烦。有的集成测试还会集成外部组件，这也就意味着设置起来要更麻烦，比如你在上一讲见识过的数据库测试，就要准备各种配置信息。同时，无论是组件多还是集成外部组件，这都意味着执行速度要比单元测试慢。所以相比于单元测试，集成测试成本要高一些、速度要慢一点；单个测试的覆盖面要大一些，但整体覆盖面要小一些。</p><!-- [[[read_end]]] --><p>虽然我们主要讨论的是单元测试和集成测试，但实际上，还有一种测试有的团队也会做，就是<strong>系统测试</strong>（把整个系统集成起来进行测试）。</p><p>系统测试的设置会更加复杂，比如，为了让各种组件配合到一起，要配置各种信息。而执行系统测试，先要把系统启动起来，然后要走完整的执行路径，执行时间会更长。所以，系统测试的特点就是成本高、速度慢，但单个测试覆盖面大，整体覆盖面小。</p><p>顺便说一下，在实际的项目中，有时候我会用系统测试去验证系统组装的过程，保证改了配置或者调整了代码之后，系统依然能够正常启动。</p><p>前面说到的一些特点都是非常容易想到的。其实，如果把测试放到软件开发的生命周期中，我们还会发现一些特点。比如，单个系统测试覆盖面大，反过来看，覆盖面中任何一点出了问题，或是有调整，这个测试都会受到影响，所以，相对来说系统测试是脆弱的。而低层一些的测试因为覆盖面小，只有它覆盖到的代码有变化时它才会受到影响，相对而言，稳定度就要高一些。</p><p>再比如，一旦测试出错，需要定位具体的问题。使用系统测试定位问题就如同大海捞针，难度系数很大，而单元测试因为只有一个单元，定位问题就要容易许多。我把刚刚讨论的内容整合成了一个表格，你可以对照着再复习一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/11/6ae19b91c63bb20ae0b16d5f0db3d411.jpg?wh=1948x641\" alt=\"\"></p><p>好，到这里，你已经对常见的测试特点有了一个了解，接下来，我们就来看看不同的测试配比模型。</p><h2>测试配比模型</h2><p>所谓不同的测试配比，其实就是什么样的测试多写一些。而决定什么样的测试多写一些，主要是不同人的不同出发点。有人认为一个测试应该尽可能覆盖面广一些，所以，要多写系统测试，有人认为测试应该考虑速度和成本，所以，要多写单元测试。</p><p>正是有不同的出发点，行业中有两种典型的测试配比模型，一种是冰淇淋蛋卷模型，一种是测试金字塔模型。</p><p>我们先来看冰淇淋蛋卷模型，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/a1/d869yy1b05c1dc626a928ca63ed2c6a1.jpg?wh=4055x2342\" alt=\"\"></p><p>在这个图里，单元测试在最下面，表示它是底层的；然后层次逐渐升高，系统测试，也就是图上的端到端测试就是高层测试，在最上面。所有自动化测试形成了蛋卷部分，而外面的冰淇淋部分则是手工的测试。</p><p>这里面每一层的宽窄表示了测试数量的多少。从图中我们不难看出，它对测试配比的预期：少量的单元测试，大量的系统测试。</p><p>冰淇淋蛋卷的出发点就是从单个测试的覆盖面考虑的，只要一些系统测试，就足以覆盖系统的大部分情况。当然，对于那些系统测试无法覆盖的场景就需要有低层的测试配合，比如，集成测试和单元测试。在冰淇淋蛋卷模型里，主力就是高层测试，低层测试只是作为高层测试的补充。</p><p>了解了冰淇淋蛋卷模型，我们再来看测试金字塔，下面这张图表示的就是测试金字塔。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/79/5d0b1895d6b9c61ea875d2a8e951a979.jpg?wh=4266x2082\" alt=\"\"></p><p>在表现形式上测试金字塔和冰淇淋蛋卷模型是一致的，都是下面表示低层测试，越往上测试的层次越高，而每一层的宽窄表示了测试数量的多少。</p><p>测试金字塔这个概念是 Mike Cohn 在自己的著作《<a href=\"https://book.douban.com/subject/5334585/\">Succeeding with Agile</a>》中提出，但大多数人都是通过 Martin Fowler 的<a href=\"https://martinfowler.com/bliki/TestPyramid.html\">文章</a>知道的这个概念。从图的整体形状我们不难看出，测试金字塔同冰淇淋蛋卷正相反，它的重点是多写单元测试，而上层的测试数量则逐层递减。</p><p>测试金字塔的出发点是低层测试成本低、速度快、整体覆盖面广，所以要多写。因为低层测试覆盖了几乎所有的情况，高层的测试就可以只做一些大面上的覆盖，保证不同组件之间的协作是没有问题的。在这个模型里，主力是单元测试，而高层的测试则是作为补充。</p><p>好，有了对于测试配比模型的理解，接下来我们要回答的问题就是<strong>怎样使用这两个模型</strong>。</p><p>从行业的最佳实践角度看，测试金字塔已经是行业中的最佳实践。测试金字塔以单元测试为基础，因为成本低、速度快等特点，单元测试可以让我们在开发过程中迅速得到反馈。对于一个想要编写测试的团队而言，测试金字塔模型也是更容易坚持做到的。</p><p>实际上，我们在实战环节中采用的就是测试金字塔模型，也就是以单元测试为主，附以少量的集成测试或系统测试。所以，如果你准备开始一个新项目，最好采用测试金字塔模型，而具体的做法我们在实战环节中已经见识过了，那就是一层一层地写测试。每完成一个功能，代码和测试总是同步写出来的，代码总是得到验证的，这样我们就可以稳步向前。</p><p>既然测试金字塔都成为了行业的最佳实践，那我们为什么还要了解冰淇淋蛋卷模型呢？因为不是所有项目都是新项目。</p><p>因为各种历史原因，很多遗留项目是没有测试的。当项目发展了一段时间之后，团队开始关注产品质量，于是大家开始补测试。</p><p>在这种情况下，补测试是希望能够快速地建立起安全网，那必然是从系统测试入手来得快。只要写上一些高层测试，就能够覆盖到系统的大部分功能，属于“投资少见效快”的做法。这也是很多人喜欢冰淇淋蛋卷模型的重要原因。</p><p>但是，我们必须知道一点，在补测试的情况下，这么做是没问题的。如果我们把它当作开发的常态，那就有问题了。这就像治病和健身的关系一样，虽然去医院能在短时间内快速解决一定问题，但你不能没事就去医院，只有日常多运动，才能减少去医院的次数。</p><p>所以，对于冰淇淋蛋卷模型，我的建议是，<strong>它是遗留项目写测试的起点。在有了一个安全网的底线之后，我们还是要向测试金字塔方向前进，以单元测试作为整体的基础</strong>。新写的代码都是要按照测试金字塔的方式来组织测试，这才是一个可以持续的方向。具体如何在遗留系统上写测试，这是我们下一讲要讨论的主题。</p><h2>总结时刻</h2><p>今天我们讨论了各种不同的测试在项目中应该如何配比，因为从实用的角度上看，我们不太可能用各种类型的测试做所有代码的覆盖，这是一种浪费。</p><p>在决定如何配比各种类型的测试前，你首先要了解各种测试的特点。比如，单元测试速度快成本低，但覆盖面小；集成测试和系统测试覆盖面大，但速度慢成本高。</p><p>行业中目前有两种典型的测试模型：冰淇淋蛋卷和测试金字塔。二者对于测试的配比要求刚好相反，冰淇淋蛋卷要求多写高层测试，而测试金字塔则希望多写低层测试。</p><p>行业中的最佳实践是测试金字塔，这是每个新项目都应该做到的。对于遗留项目，我们可以在一开始的时候，先采用冰淇淋蛋卷建立基础的安全网，在有了最低保障之后，开始向测试金字塔方向努力。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>新项目采用测试金字塔，遗留项目从冰淇淋蛋卷出发</strong>。</p><h2>思考题</h2><p>你的团队写哪种测试比较多呢？你们是怎样考虑的呢？欢迎在留言区分享你的思考。</p>","neighbors":{"left":{"article_title":"14 | 在 Spring 项目如何进行集成测试？","id":414448},"right":{"article_title":"16 | 怎么在遗留系统上写测试？","id":415897}},"comments":[{"had_liked":false,"id":310766,"user_name":"grandgraph","can_delete":false,"product_type":"c1","uid":1016036,"ip_address":"","ucode":"B26060999DAA73","user_header":"","comment_is_top":false,"comment_ctime":1630897812,"is_pvip":false,"replies":[{"id":"112664","content":"哪有什么岁月静好，不过是有人替你负重前行","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1630971297,"ip_address":"","comment_id":310766,"utype":1}],"discussion_count":4,"race_medal":1,"score":"40285603476","product_id":100085101,"comment_content":"开发不愿意写单元测试, 说单元测试没用的, 大部分是不会写. 这变向地给QA增加了很多不必要的工作负担, 本应通过单元测试发现的Bug会逃逸到更高层次的测试中, 导致的现象就是: 研发改一行, QA测一天.","like_count":10,"discussions":[{"author":{"id":1685222,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b6/e6/db12908c.jpg","nickname":"微笑","note":"","ucode":"C5EE55E23D2C57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548077,"discussion_content":"我们公司业务，采用的是一层套一层，所以单侧简单，集成复杂。光一个购物车就200多个文件","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643021329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526344,"discussion_content":"哪有什么岁月静好，不过是有人替你负重前行","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630971297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2286490,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e3/9a/773b26e4.jpg","nickname":"testerxm","note":"","ucode":"672392DB5057E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414923,"discussion_content":"这样不是更有益于划水吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636939303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152240,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKX6QqquojicLT0BYAxUhz2ibwXZ6mc7XD21hwjcKEibFMfiaYz5TBPugmcdLfdHDO8ibLib6uCO4zEeXSw/132","nickname":"赵兰亭","note":"","ucode":"A7146190512709","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398074,"discussion_content":"“逃逸”这个词太形象了T_T","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632730092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311701,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1631414824,"is_pvip":false,"replies":[{"id":"112925","content":"工具虽好，用好需要知道它的来龙去脉。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1631416197,"ip_address":"","comment_id":311701,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14516316712","product_id":100085101,"comment_content":"谢谢老师解答了我的疑惑测试金字塔不是唯一标准","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526708,"discussion_content":"工具虽好，用好需要知道它的来龙去脉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631416197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310814,"user_name":"大碗","can_delete":false,"product_type":"c1","uid":1027207,"ip_address":"","ucode":"F9CDC0C5BE48AC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/87/8ed5880a.jpg","comment_is_top":false,"comment_ctime":1630921221,"is_pvip":false,"replies":[{"id":"112662","content":"这个是每个团队对自己的要求，不同的团队要求不同。如果你前面已经用单元测试进行了 100%的测试覆盖，其它类型的测试就比较灵活了。我自己就曾经在项目中，只有一个系统测试，用来覆盖启动的场景。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1630971182,"ip_address":"","comment_id":310814,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10220855813","product_id":100085101,"comment_content":"单测比集测多，那么单测和集成测试的比例是多少？<br>集成是否只测happyPath就可以呢？","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526365,"discussion_content":"这个是每个团队对自己的要求，不同的团队要求不同。如果你前面已经用单元测试进行了 100%的测试覆盖，其它类型的测试就比较灵活了。我自己就曾经在项目中，只有一个系统测试，用来覆盖启动的场景。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1630971182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312416,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1631792282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5926759578","product_id":100085101,"comment_content":"从单元测试到系统测试的区别，就是逻辑关联越来越多，好处是覆盖面越来越全（越是系统级越靠近用户场景），不足是问题定位也更麻烦（现在的多人合作开发更增加了这个麻烦，如果是单人对系统很了解的话，其实也并没那么难）。<br><br>都知道金字塔好，但现实情况是开发同学都不愿做（没时间没动力）单元测试，最终都是冰淇淋了。<br><br>现在还有一个提法，叫菱形，UT 和 UI 的测试都少做，中间的集成（接口）多做，这样降低了 UI 测试的复杂度，也保证了单元测试接口的覆盖度，不足的还是场景化测试覆盖不够。<br><br>这些都是理论层面，实际落地还是需要和实际情况相结合，适合的才是最好的。","like_count":2},{"had_liked":false,"id":311140,"user_name":"chon","can_delete":false,"product_type":"c1","uid":1068925,"ip_address":"","ucode":"1C32170972F726","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/7d/dd852b04.jpg","comment_is_top":false,"comment_ctime":1631086696,"is_pvip":true,"replies":[{"id":"112759","content":"微服务与单元测试是两个独立维度，该怎么测就怎么测。至于把所有的系统都连起来的测试，那就是系统测试了，做好这种测试的关键是要把基础设施的自动化做好，否则，手工启动这些服务就是无尽的痛苦。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1631102728,"ip_address":"","comment_id":311140,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926053992","product_id":100085101,"comment_content":"现在流行微服务，服务间调用通过dubbo和feign来调用。这种情况单元测试是用mock吗？集成测试和端到端测试呢？怎么处理？","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526490,"discussion_content":"微服务与单元测试是两个独立维度，该怎么测就怎么测。至于把所有的系统都连起来的测试，那就是系统测试了，做好这种测试的关键是要把基础设施的自动化做好，否则，手工启动这些服务就是无尽的痛苦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631102728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348378,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1655034408,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1655034408","product_id":100085101,"comment_content":"前几天和公司里一个技术还行的同事聊天，谈到了写测试和重构，结果他说这样做会让代码变成屎山代码，又说敏捷开发不行，自己以前在日企呆过。&quot;日式&quot;开发模式很好，我问他是什么模式，他就说是&quot;日式&quot;，后来在我一再追问下，他说就是传统模式。说敏捷开发会不停改需求重构。说自己以前也看过敏捷开发，传统开发的书，自己都了解。我当时听了有点激动，就和他争了起来。😂","like_count":1,"discussions":[{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578181,"discussion_content":"不能一概而论，还是有一些软件需求是稳定，描述清晰的，如果已经明确再去试错，就画蛇添足了。不过越往后尤其是互联网服务和应用的时代，软件的需求越难以把握，变动越大，敏捷的方法就更有价值了。\n不是说敏捷开发的方法学会不停的改需求，而是既然需求变了，方法也需要随着变。都是工具，有各自适用范围，根据具体情况来定。琢磨一下加餐课的内建质量话题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656556839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":578194,"discussion_content":"是他说敏捷就是不停改，重构会变屎山代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656562973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":578181,"ip_address":""},"score":578194,"extra":""}]}]},{"had_liked":false,"id":348376,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1655033872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655033872","product_id":100085101,"comment_content":"新项目采用测试金字塔，遗留项目从冰淇淋蛋卷出发--记下来","like_count":0},{"had_liked":false,"id":341835,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1649854042,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649854042","product_id":100085101,"comment_content":"目前在兼顾基本功能的基础上开始补充单元测试，基本满足所说的金字塔模型，但是由于qc的整体测试质量不行，导致开发不得不写很全的功能测试，在打包前全量验证单元与功能测试！","like_count":0},{"had_liked":false,"id":321357,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1636810453,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1636810453","product_id":100085101,"comment_content":"现在的系统使用冰淇淋蛋卷进行测试，因为随便一个接口SkyWalking显示的调用链几十到上千不等","like_count":0,"discussions":[{"author":{"id":1947974,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/b9/46/604b3dcf.jpg","nickname":"蓝色海洋","note":"","ucode":"C1BF85D9E5C881","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580581,"discussion_content":"这么复杂的么？开发得多么累呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658278517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1947974,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/b9/46/604b3dcf.jpg","nickname":"蓝色海洋","note":"","ucode":"C1BF85D9E5C881","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580589,"discussion_content":"所以要改造","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658281189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":580581,"ip_address":""},"score":580589,"extra":""}]}]}]}