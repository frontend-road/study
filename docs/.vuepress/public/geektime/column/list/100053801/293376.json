{"id":293376,"title":"国庆策划 | 快来看看怎么用原生JavaScript实现手势解锁组件","content":"<p>你好，我是月影。前几天，我给你出了一道实操题，不知道你完成得怎么样啦？</p><p>今天，我就给你一个<a href=\"https://github.com/akira-cn/handlock\">参考版本</a>。当然，并不是说这一版就最好，而是说，借助这一版的实现，我们就能知道当遇到这样比较复杂的 UI 需求时，我们应该怎样思考和实现。</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/b2/b1a40490690d3c0418842d86fc81b2b2.jpeg?wh=1920*1080\" alt=\"\"></p><p>首先，组件设计一般来说包括7个步骤，分别是理解需求、技术选型、结构（UI）设计、数据和API设计、流程设计、兼容性和细节优化，以及工具和工程化。</p><p>当然了，并不是每个组件设计的时候都需要进行这些过程，但一个项目总会在其中一些过程里遇到问题需要解决。所以，下面我们来做一个简单的分析。</p><h2>理解需求</h2><p>上节课的题目本身只是说设计一个常见的手势密码的 UI 交互，那我们就可以通过选择验证密码和设置密码来切换两种状态，每种状态有自己的流程。</p><p>如果你就照着需求把整个组件的状态切换和流程封装起来，或者只是提供了一定的 UI 样式配置能力的话，还远远不够。实际上这个组件如果要给用户使用，我们需要将过程节点开放出来。也就是说，<strong>需要由使用者决定设置密码的过程里执行什么操作、验证密码的过程和密码验证成功后执行什么操作</strong>，这些是组件开发者无法代替使用者来决定的。</p><pre><code>var password = '11121323';\n\n\nvar locker = new HandLock.Locker({\n  container: document.querySelector('#handlock'),\n  check: {\n    checked: function(res){\n      if(res.err){\n        console.error(res.err); //密码错误或长度太短\n        [执行操作...]\n      }else{\n        console.log(`正确，密码是：${res.records}`);\n        [执行操作...]\n      }\n    },\n  },\n  update:{\n    beforeRepeat: function(res){\n      if(res.err){\n        console.error(res.err); //密码长度太短\n        [执行操作...]\n      }else{\n        console.log(`密码初次输入完成，等待重复输入`);\n        [执行操作...]\n      }\n    },\n    afterRepeat: function(res){\n      if(res.err){\n        console.error(res.err); //密码长度太短或者两次密码输入不一致\n        [执行操作...]\n      }else{\n        console.log(`密码更新完成，新密码是：${res.records}`);\n        [执行操作...]\n      }\n    },\n  }\n});\n\n\nlocker.check(password)\n</code></pre><h2>技术选型</h2><p>这个问题的 UI 展现的核心是九宫格和选中的小圆点，从技术上来讲，我们有三种可选方案： DOM/Canvas/SVG，三者都是可以实现主体 UI 的。那我们该怎么选择呢？</p><!-- [[[read_end]]] --><p>如果使用 DOM，最简单的方式是使用 flex 布局，这样能够做成响应式的。使用 DOM 的优点是容易实现响应式，事件处理简单，布局也不复杂（但是和 Canvas 比起来略微复杂），但是斜线（demo 里没有画）的长度和斜率需要计算。</p><p>除了使用 DOM 外，使用 Canvas 绘制也很方便。用 Canvas 实现有两个小细节，一是要实现响应式，我们可以用 DOM 构造一个正方形的容器。这里，我们使用 <code>padding-top:100%</code> 撑开容器高度使它等于容器宽度。  代码如下：</p><pre><code>#container {\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  padding-top: 100%;\n  height: 0px;\n  background-color: white;\n}\n\n</code></pre><p>第二个细节是为了在 retina 屏上获得清晰的显示效果，我们将 Canvas 的宽高增加一倍，然后通过 <code>transform: scale(0.5)</code> 来缩小到匹配容器宽高。</p><pre><code>#container canvas{\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%) scale(0.5);\n}\n</code></pre><p>由于 Canvas 的定位是 absolute，它本身的默认宽高并不等于容器的宽高，需要通过 JavaScript 设置。</p><pre><code>let width = 2 * container.getBoundingClientRect().width;\ncanvas.width = canvas.height = width;\n\n</code></pre><p>使用上面的代码，我们就可以通过在 Canvas 上绘制实心圆和连线来实现 UI 了。具体的方法，我下面会详细来讲。</p><p>最后，我们来看一下使用 SVG 的绘制方法。不过，由于 SVG 原生操作的 API 不是很方便，我们可以使用了 <a href=\"http://snapsvg.io/\">Snap.svg 库</a>，实现起来和使用 Canvas 大同小异，我就不详细来说了。但是，SVG 的问题是移动端兼容性不如 DOM 和 Canvas 好，所以综合上面三者的情况，我最终选择使用 Canvas 来实现。</p><h2>结构设计</h2><p>使用 Canvas 实现的话， DOM 结构就比较简单了。为了实现响应式，我们需要实现一个自适应宽度的正方形容器，方法前面已经讲过了，然后我们在容器中创建 Canvas。</p><p>这里需要注意的一点是，我们应当把 Canvas 分层。这是因为 Canvas 的渲染机制里，要更新画布的内容，需要刷新要更新的区域重新绘制。因此我们有必要把频繁变化的内容和基本不变的内容分层管理，这样能显著提升性能。</p><p>在这里我把 UI 分别绘制在 3 个图层里，对应 3 个 Canvas。最上层只有随着手指头移动的那个线段，中间是九个点，最下层是已经绘制好的线。之所以这样分，是因为随手指头移动的那条线需要不断刷新，底下两层都不用频繁更新，但是把连好的线放在最底层是因为我要做出圆点把线的一部分遮挡住的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/93/cf14330f6f0149252afb57ccb991a293.jpeg?wh=1920*1080\" alt=\"\"></p><p>接着，我们确定圆点的位置。</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/bd/f731ffa24422655e218b7f362385f6bd.jpeg?wh=1920*1080\" alt=\"\"></p><p>圆点的位置有两种定位法，第一种是九个九宫格，圆点在小九宫格的中心位置。认真的同学肯定已经发现了，在前面 DOM 方案里，我们就是采用这样的方式。这个时候，圆点的直径为 11.1%。第二种方式是用横竖三条线把宽高四等分，圆点在这些线的交点处。</p><p>在 Canvas 里我们采用第二种方法来确定圆点（代码里的 n = 3）。</p><pre><code>let range = Math.round(width / (n + 1));\n\n\nlet circles = [];\n\n\n//drawCircleCenters\nfor(let i = 1; i &lt;= n; i++){\n  for(let j = 1; j &lt;= n; j++){\n    let y = range * i, x = range * j;\n    drawSolidCircle(circleCtx, fgColor, x, y, innerRadius);\n    let circlePoint = {x, y};\n    circlePoint.pos = [i, j];\n    circles.push(circlePoint);\n  }\n\n</code></pre><p>最后一点严格说不属于结构设计，但因为我们的 UI 是通过触屏操作，所以我们需要考虑 Touch 事件处理和坐标的转换。</p><pre><code>function getCanvasPoint(canvas, x, y){\n  let rect = canvas.getBoundingClientRect();\n  return {\n    x: 2 * (x - rect.left), \n    y: 2 * (y - rect.top),\n  };\n}\n\n</code></pre><p>我们将 Touch 相对于屏幕的坐标转换为 Canvas 相对于画布的坐标。代码里的 2 倍是因为我们前面说了要让 retina 屏下清晰，我们将 Canvas 放大为原来的 2 倍。</p><h2>API 设计</h2><p>接下来我们需要设计给使用者使用的 API 了。在这里，我们将组件功能分解一下，独立出一个单纯记录手势的 Recorder。将组件功能分解为更加底层的组件，是一种简化组件设计的常用模式。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/df/53c4bb35522954095ca736bdf6d86edf.jpeg?wh=1920*1080\" alt=\"\"></p><p>我们抽取出底层的 Recorder，让 Locker 继承 Recorder，Recorder 负责记录，Locker 管理实际的设置和验证密码的过程。</p><p>我们的 Recorder 只负责记录用户行为，由于用户操作是异步操作，我们将它设计为 Promise 规范的 API，它可以以如下方式使用：</p><pre><code>var recorder = new HandLock.Recorder({\n  container: document.querySelector('#main')\n});\n\n\nfunction recorded(res){\n  if(res.err){\n    console.error(res.err);\n    recorder.clearPath();\n    if(res.err.message !== HandLock.Recorder.ERR_USER_CANCELED){\n      recorder.record().then(recorded);\n    }\n  }else{\n    console.log(res.records);\n    recorder.record().then(recorded);\n  }      \n}\n\n\nrecorder.record().then(recorded)\n</code></pre><p>对于输出结果，我们简单用选中圆点的行列坐标拼接起来得到一个唯一的序列。例如 “11121323” 就是如下选择图形：</p><p><img src=\"https://static001.geekbang.org/resource/image/82/b8/82500410b843734363a9c49d6f3b5fb8.jpeg?wh=1920*1080\" alt=\"\"></p><p>为了让 UI 显示具有灵活性，我们还可以将外观配置抽取出来。</p><pre><code>const defaultOptions = {\n  container: null, //创建canvas的容器，如果不填，自动在 body 上创建覆盖全屏的层\n  focusColor: '#e06555',  //当前选中的圆的颜色\n  fgColor: '#d6dae5',     //未选中的圆的颜色\n  bgColor: '#fff',        //canvas背景颜色\n  n: 3, //圆点的数量： n x n\n  innerRadius: 20,  //圆点的内半径\n  outerRadius: 50,  //圆点的外半径，focus 的时候显示\n  touchRadius: 70,  //判定touch事件的圆半径\n  render: true,     //自动渲染\n  customStyle: false, //自定义样式\n  minPoints: 4,     //最小允许的点数\n};\n\n</code></pre><p>这样，我们实现完整的 Recorder 对象，核心代码如下：</p><pre><code>[...] //定义一些私有方法\n\n\nconst defaultOptions = {\n  container: null, //创建canvas的容器，如果不填，自动在 body 上创建覆盖全屏的层\n  focusColor: '#e06555',  //当前选中的圆的颜色\n  fgColor: '#d6dae5',     //未选中的圆的颜色\n  bgColor: '#fff',        //canvas背景颜色\n  n: 3, //圆点的数量： n x n\n  innerRadius: 20,  //圆点的内半径\n  outerRadius: 50,  //圆点的外半径，focus 的时候显示\n  touchRadius: 70,  //判定touch事件的圆半径\n  render: true,     //自动渲染\n  customStyle: false, //自定义样式\n  minPoints: 4,     //最小允许的点数\n};\n\n\nexport default class Recorder{\n  static get ERR_NOT_ENOUGH_POINTS(){\n    return 'not enough points';\n  }\n  static get ERR_USER_CANCELED(){\n    return 'user canceled';\n  }\n  static get ERR_NO_TASK(){\n    return 'no task';\n  }\n  constructor(options){\n    options = Object.assign({}, defaultOptions, options);\n\n\n    this.options = options;\n    this.path = [];\n\n\n    if(options.render){\n      this.render();\n    }\n  }\n  render(){\n    if(this.circleCanvas) return false;\n\n\n    let options = this.options;\n    let container = options.container || document.createElement('div');\n\n\n    if(!options.container &amp;&amp; !options.customStyle){\n      Object.assign(container.style, {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        lineHeight: '100%',\n        overflow: 'hidden',\n        backgroundColor: options.bgColor\n      });\n      document.body.appendChild(container); \n    }\n    this.container = container;\n\n\n    let {width, height} = container.getBoundingClientRect();\n\n\n    //画圆的 canvas，也是最外层监听事件的 canvas\n    let circleCanvas = document.createElement('canvas'); \n\n\n    //2 倍大小，为了支持 retina 屏\n    circleCanvas.width = circleCanvas.height = 2 * Math.min(width, height);\n    if(!options.customStyle){\n      Object.assign(circleCanvas.style, {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%) scale(0.5)', \n      });\n    }\n\n\n    //画固定线条的 canvas\n    let lineCanvas = circleCanvas.cloneNode(true);\n\n\n    //画不固定线条的 canvas\n    let moveCanvas = circleCanvas.cloneNode(true);\n\n\n    container.appendChild(lineCanvas);\n    container.appendChild(moveCanvas);\n    container.appendChild(circleCanvas);\n\n\n    this.lineCanvas = lineCanvas;\n    this.moveCanvas = moveCanvas;\n    this.circleCanvas = circleCanvas;\n\n\n    this.container.addEventListener('touchmove', \n      evt =&gt; evt.preventDefault(), {passive: false});\n\n\n    this.clearPath();\n    return true;\n  }\n  clearPath(){\n    if(!this.circleCanvas) this.render();\n\n\n    let {circleCanvas, lineCanvas, moveCanvas} = this,\n        circleCtx = circleCanvas.getContext('2d'),\n        lineCtx = lineCanvas.getContext('2d'),\n        moveCtx = moveCanvas.getContext('2d'),\n        width = circleCanvas.width,\n        {n, fgColor, innerRadius} = this.options;\n\n\n    circleCtx.clearRect(0, 0, width, width);\n    lineCtx.clearRect(0, 0, width, width);\n    moveCtx.clearRect(0, 0, width, width);\n\n\n    let range = Math.round(width / (n + 1));\n\n\n    let circles = [];\n\n\n    //drawCircleCenters\n    for(let i = 1; i &lt;= n; i++){\n      for(let j = 1; j &lt;= n; j++){\n        let y = range * i, x = range * j;\n        drawSolidCircle(circleCtx, fgColor, x, y, innerRadius);\n        let circlePoint = {x, y};\n        circlePoint.pos = [i, j];\n        circles.push(circlePoint);\n      }\n    }\n\n\n    this.circles = circles;\n  }\n  async cancel(){\n    if(this.recordingTask){\n      return this.recordingTask.cancel();\n    }\n    return Promise.resolve({err: new Error(Recorder.ERR_NO_TASK)});\n  }\n  async record(){\n    if(this.recordingTask) return this.recordingTask.promise;\n\n\n    let {circleCanvas, lineCanvas, moveCanvas, options} = this,\n        circleCtx = circleCanvas.getContext('2d'),\n        lineCtx = lineCanvas.getContext('2d'),\n        moveCtx = moveCanvas.getContext('2d');\n\n\n    circleCanvas.addEventListener('touchstart', ()=&gt;{\n      this.clearPath();\n    });\n\n\n    let records = [];\n\n\n    let handler = evt =&gt; {\n      let {clientX, clientY} = evt.changedTouches[0],\n          {bgColor, focusColor, innerRadius, outerRadius, touchRadius} = options,\n          touchPoint = getCanvasPoint(moveCanvas, clientX, clientY);\n\n\n      for(let i = 0; i &lt; this.circles.length; i++){\n        let point = this.circles[i],\n            x0 = point.x,\n            y0 = point.y;\n\n\n        if(distance(point, touchPoint) &lt; touchRadius){\n          drawSolidCircle(circleCtx, bgColor, x0, y0, outerRadius);\n          drawSolidCircle(circleCtx, focusColor, x0, y0, innerRadius);\n          drawHollowCircle(circleCtx, focusColor, x0, y0, outerRadius);\n\n\n          if(records.length){\n            let p2 = records[records.length - 1],\n                x1 = p2.x,\n                y1 = p2.y;\n\n\n            drawLine(lineCtx, focusColor, x0, y0, x1, y1);\n          }\n\n\n          let circle = this.circles.splice(i, 1);\n          records.push(circle[0]);\n          break;\n        }\n      }\n\n\n      if(records.length){\n        let point = records[records.length - 1],\n            x0 = point.x,\n            y0 = point.y,\n            x1 = touchPoint.x,\n            y1 = touchPoint.y;\n\n\n        moveCtx.clearRect(0, 0, moveCanvas.width, moveCanvas.height);\n        drawLine(moveCtx, focusColor, x0, y0, x1, y1);        \n      }\n    };\n\n\n\n\n    circleCanvas.addEventListener('touchstart', handler);\n    circleCanvas.addEventListener('touchmove', handler);\n\n\n    let recordingTask = {};\n    let promise = new Promise((resolve, reject) =&gt; {\n      recordingTask.cancel = (res = {}) =&gt; {\n        let promise = this.recordingTask.promise;\n\n\n        res.err = res.err || new Error(Recorder.ERR_USER_CANCELED);\n        circleCanvas.removeEventListener('touchstart', handler);\n        circleCanvas.removeEventListener('touchmove', handler);\n        document.removeEventListener('touchend', done);\n        resolve(res);\n        this.recordingTask = null;\n\n\n        return promise;\n      }\n\n\n      let done = evt =&gt; {\n        moveCtx.clearRect(0, 0, moveCanvas.width, moveCanvas.height);\n        if(!records.length) return;\n\n\n        circleCanvas.removeEventListener('touchstart', handler);\n        circleCanvas.removeEventListener('touchmove', handler);\n        document.removeEventListener('touchend', done);\n\n\n        let err = null;\n\n\n        if(records.length &lt; options.minPoints){\n          err = new Error(Recorder.ERR_NOT_ENOUGH_POINTS);\n        }\n\n\n        //这里可以选择一些复杂的编码方式，本例子用最简单的直接把坐标转成字符串\n        let res = {err, records: records.map(o =&gt; o.pos.join('')).join('')};\n\n\n        resolve(res);\n        this.recordingTask = null;\n      };\n      document.addEventListener('touchend', done);\n    });\n\n\n    recordingTask.promise = promise;\n\n\n    this.recordingTask\n\n</code></pre><p>这里有几个公开的方法，分别是ecorder 负责记录绘制结果， clearPath 负责在画布上清除上一次记录的结果，cancel 负责终止记录过程，这是为后续流程准备的。</p><h2>流程设计</h2><p>接下来，我们基于 Recorder 来设计设置和验证密码的流程：</p><p>首先是验证密码的流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/3c/c1e94603bfb1d26a0b354377095b6f3c.jpeg?wh=1920*1080\" alt=\"\"></p><p>其次是设置密码的流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/da/3a/da4509d380c71e30bdd03ec27c000e3a.jpeg?wh=1920*1080\" alt=\"\"></p><p>有了前面异步 Promise API 的 Recorder，我们不难实现上面的两个流程。</p><p><strong>验证密码的内部流程</strong></p><pre><code>async check(password){\n  if(this.mode !== Locker.MODE_CHECK){\n    await this.cancel();\n    this.mode = Locker.MODE_CHECK;\n  }  \n\n\n  let checked = this.options.check.checked;\n\n\n  let res = await this.record();\n\n\n  if(res.err &amp;&amp; res.err.message === Locker.ERR_USER_CANCELED){\n    return Promise.resolve(res);\n  }\n\n\n  if(!res.err &amp;&amp; password !== res.records){\n    res.err = new Error(Locker.ERR_PASSWORD_MISMATCH)\n  }\n\n\n  checked.call(this, res);\n  this.check(password);\n  return Promise.resolve(res\n\n</code></pre><p><strong>设置密码的内部流程</strong></p><pre><code>async update(){\n  if(this.mode !== Locker.MODE_UPDATE){\n    await this.cancel();\n    this.mode = Locker.MODE_UPDATE;\n  }\n\n\n  let beforeRepeat = this.options.update.beforeRepeat, \n      afterRepeat = this.options.update.afterRepeat;\n\n\n  let first = await this.record();\n\n\n  if(first.err &amp;&amp; first.err.message === Locker.ERR_USER_CANCELED){\n    return Promise.resolve(first);\n  }\n\n\n  if(first.err){\n    this.update();\n    beforeRepeat.call(this, first);\n    return Promise.resolve(first);   \n  }\n\n\n  beforeRepeat.call(this, first);\n\n\n  let second = await this.record();      \n\n\n  if(second.err &amp;&amp; second.err.message === Locker.ERR_USER_CANCELED){\n    return Promise.resolve(second);\n  }\n\n\n  if(!second.err &amp;&amp; first.records !== second.records){\n    second.err = new Error(Locker.ERR_PASSWORD_MISMATCH);\n  }\n\n\n  this.update();\n  afterRepeat.call(this, second);\n  return Promise.resolve(se\n</code></pre><p>我们可以看到，有了 Recorder 之后，Locker 的验证和设置密码基本上就是顺着流程用 async/await 写下来就行了。</p><p>另外，我们还要注意一些细节问题。由于实际在手机上触屏时，如果上下拖动，浏览器的默认行为会导致页面上下移动，因此我们需要阻止 touchmove 的默认事件。</p><pre><code>this.container.addEventListener('touchmove', \n      evt =&gt; evt.preventDefault(), {passive: false});\n\n</code></pre><p>touchmove 事件在 Chrome 下默认是一个 <a href=\"https://dom.spec.whatwg.org/#in-passive-listener-flag\">Passive Event</a>，因此，我们addEventListener 的时候需要传参 {passive: false}，否则就不能 preventDefault。</p><p>此外，因为我们的代码使用了 ES6+，所以需要引入 babel 编译，我们的组件也使用 webpack 进行打包，以便于使用者在浏览器中直接引入。</p><h2>要点总结</h2><p>今天，我和你一起完成了前几天留下的“手势密码”实战题。通过解决这几道题，我希望你能记住这三件事：</p><ol>\n<li>在设计 API 的时候思考真正的需求，判断什么该开放、什么该封装</li>\n<li>做好技术调研和核心方案研究，选择合适的方案</li>\n<li>着手优化和解决细节问题，要站在API使用者的角度思考</li>\n</ol><hr><h2><span class=\"reference\">源码</span></h2><p><span class=\"reference\"><a href=\"https://github.com/akira-cn/handlock\">GitHub 工程</a></span></p>","neighbors":{"left":{"article_title":"国庆策划 | 假期别闲着，一起来挑战“手势密码”","id":293197},"right":{"article_title":"加餐1 | 作为一名程序员，数学到底要多好？","id":260319}},"comments":[{"had_liked":false,"id":255045,"user_name":"安东","can_delete":false,"product_type":"c1","uid":1193113,"ip_address":"","ucode":"6CD285786FA88A","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/99/a62a125d.jpg","comment_is_top":false,"comment_ctime":1603257763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898225059","product_id":100053801,"comment_content":"老师真的厉害 我怎么就没想到这样写。 我写的还是太粗糙了","like_count":2}]}