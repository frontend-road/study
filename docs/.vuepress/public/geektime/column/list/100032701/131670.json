{"id":131670,"title":"15 | 怎么老是出现“地址已经被使用”？","content":"<p>你好，我是盛延敏，这里是网络编程实战的第15讲，欢迎回来。</p><p>上一讲我们讲到UDP也可以像TCP一样，使用connect方法，以快速获取异步错误的信息。在今天的内容里，我们将讨论服务器端程序重启时，地址被占用的原因和解决方法。</p><p>我们已经知道，网络编程中，服务器程序需要绑定本地地址和一个端口，然后就监听在这个地址和端口上，等待客户端连接的到来。在实战中，你可能会经常碰到一个问题，当服务器端程序重启之后，总是碰到“Address in use”的报错信息，服务器程序不能很快地重启。那么这个问题是如何产生的？我们又该如何避免呢？</p><p>今天我们就来讲一讲这个“地址已经被使用”的问题。</p><h2>从例子开始</h2><p>为了引入讨论，我们从之前讲过的一个TCP服务器端程序开始说起：</p><pre><code>static int count;\n\nstatic void sig_int(int signo) {\n    printf(&quot;\\nreceived %d datagrams\\n&quot;, count);\n    exit(0);\n}\n\nint main(int argc, char **argv) {\n    int listenfd;\n    listenfd = socket(AF_INET, SOCK_STREAM, 0);\n\n    struct sockaddr_in server_addr;\n    bzero(&amp;server_addr, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n    server_addr.sin_port = htons(SERV_PORT);\n\n    int rt1 = bind(listenfd, (struct sockaddr *) &amp;server_addr, sizeof(server_addr));\n    if (rt1 &lt; 0) {\n        error(1, errno, &quot;bind failed &quot;);\n    }\n\n    int rt2 = listen(listenfd, LISTENQ);\n    if (rt2 &lt; 0) {\n        error(1, errno, &quot;listen failed &quot;);\n    }\n\n    signal(SIGPIPE, SIG_IGN);\n\n    int connfd;\n    struct sockaddr_in client_addr;\n    socklen_t client_len = sizeof(client_addr);\n\n    if ((connfd = accept(listenfd, (struct sockaddr *) &amp;client_addr, &amp;client_len)) &lt; 0) {\n        error(1, errno, &quot;bind failed &quot;);\n    }\n\n    char message[MAXLINE];\n    count = 0;\n\n    for (;;) {\n        int n = read(connfd, message, MAXLINE);\n        if (n &lt; 0) {\n            error(1, errno, &quot;error read&quot;);\n        } else if (n == 0) {\n            error(1, 0, &quot;client closed \\n&quot;);\n        }\n        message[n] = 0;\n        printf(&quot;received %d bytes: %s\\n&quot;, n, message);\n        count++;\n    }\n}\n</code></pre><p>这个服务器端程序绑定到一个本地端口，使用的是通配地址ANY，当连接建立之后，从该连接中读取输入的字符流。</p><p>启动服务器，之后我们使用Telnet登录这个服务器，并在屏幕上输入一些字符，例如：network，good。</p><p>和我们期望的一样，服务器端打印出Telnet客户端的输入。在Telnet端关闭连接之后，服务器端接收到EOF，也顺利地关闭了连接。服务器端也可以很快重启，等待新的连接到来。</p><!-- [[[read_end]]] --><pre><code> $./addressused \n received 9 bytes: network\n received 6 bytes: good\n client closed\n $./addressused\n</code></pre><p>接下来，我们改变一下连接的关闭顺序。和前面的过程一样，先启动服务器，再使用Telnet作为客户端登录到服务器，在屏幕上输入一些字符。注意接下来的不同，我不会在Telnet端关闭连接，而是直接使用Ctrl+C的方式在服务器端关闭连接。</p><pre><code>$telnet 127.0.0.1 9527\nnetwork\nbad\nConnection closed by foreign host.\n</code></pre><p>我们看到，连接已经被关闭，Telnet客户端也感知连接关闭并退出了。接下来，我们尝试重启服务器端程序。你会发现，这个时候服务端程序重启失败，报错信息为：<strong>bind failed: Address already in use</strong>。</p><pre><code> $./addressused \n received 9 bytes: network\n received 6 bytes: good\n client closed\n $./addressused\n bind faied: Address already in use(98)\n</code></pre><h2>复习TIME_WAIT</h2><p>那么，这个错误到底是怎么发生的呢？</p><p>还记得第10篇文章里提到的TIME_WAIT么？当连接的一方主动关闭连接，在接收到对端的FIN报文之后，主动关闭连接的一方会在TIME_WAIT这个状态里停留一段时间，这个时间大约为2MSL。如果你对此有点淡忘，没有关系，我在下面放了一张图，希望会唤起你的记忆。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/5f/945c60ae06d282dcc22ad3b868f1175f.png?wh=856*580\" alt=\"\"><br>\n如果我们此时使用netstat去查看服务器程序所在主机的TIME_WAIT的状态连接，你会发现有一个服务器程序生成的TCP连接，当前正处于TIME_WAIT状态。这里9527是本地监听端口，36650是telnet客户端端口。当然了，Telnet客户端端口每次也会不尽相同。</p><p><img src=\"https://static001.geekbang.org/resource/image/51/e1/5127adf94e564c13d6be86460d3317e1.png?wh=1684*952\" alt=\"\"><br>\n通过服务器端发起的关闭连接操作，引起了一个已有的TCP连接处于TME_WAIT状态，正是这个TIME_WAIT的连接，使得服务器重启时，继续绑定在127.0.0.1地址和9527端口上的操作，返回了<strong>Address already in use</strong>的错误。</p><h2>重用套接字选项</h2><p>我们知道，一个TCP连接是通过四元组（源地址、源端口、目的地址、目的端口）来唯一确定的，如果每次Telnet客户端使用的本地端口都不同，就不会和已有的四元组冲突，也就不会有TIME_WAIT的新旧连接化身冲突的问题。</p><p>事实上，即使在很小的概率下，客户端Telnet使用了相同的端口，从而造成了新连接和旧连接的四元组相同，在现代Linux操作系统下，也不会有什么大的问题，原因是现代Linux操作系统对此进行了一些优化。</p><p>第一种优化是新连接SYN告知的初始序列号，一定比TIME_WAIT老连接的末序列号大，这样通过序列号就可以区别出新老连接。</p><p>第二种优化是开启了tcp_timestamps，使得新连接的时间戳比老连接的时间戳大，这样通过时间戳也可以区别出新老连接。</p><p>在这样的优化之下，一个TIME_WAIT的TCP连接可以忽略掉旧连接，重新被新的连接所使用。</p><p>这就是重用套接字选项，通过给套接字配置可重用属性，告诉操作系统内核，这样的TCP连接完全可以复用TIME_WAIT状态的连接。代码片段已经放在文章中了：</p><pre><code>int on = 1;\nsetsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));\n</code></pre><p>SO_REUSEADDR套接字选项，允许启动绑定在一个端口，即使之前存在一个和该端口一样的连接。前面的例子已经表明，在默认情况下，服务器端历经创建socket、bind和listen重启时，如果试图绑定到一个现有连接上的端口，bind操作会失败，但是如果我们在创建socket和bind之间，使用上面的代码片段设置SO_REUSEADDR套接字选项，情况就会不同。</p><p>下面我们对原来的服务器端代码进行升级，升级的部分主要在11-12行，在bind监听套接字之前，调用setsockopt方法，设置重用套接字选项：</p><pre><code>int main(int argc, char **argv) {\n    int listenfd;\n    listenfd = socket(AF_INET, SOCK_STREAM, 0);\n\n    struct sockaddr_in server_addr;\n    bzero(&amp;server_addr, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n    server_addr.sin_port = htons(SERV_PORT);\n\n    int on = 1;\n    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));\n\n    int rt1 = bind(listenfd, (struct sockaddr *) &amp;server_addr, sizeof(server_addr));\n    if (rt1 &lt; 0) {\n        error(1, errno, &quot;bind failed &quot;);\n    }\n\n    int rt2 = listen(listenfd, LISTENQ);\n    if (rt2 &lt; 0) {\n        error(1, errno, &quot;listen failed &quot;);\n    }\n\n    signal(SIGPIPE, SIG_IGN);\n\n    int connfd;\n    struct sockaddr_in client_addr;\n    socklen_t client_len = sizeof(client_addr);\n\n    if ((connfd = accept(listenfd, (struct sockaddr *) &amp;client_addr, &amp;client_len)) &lt; 0) {\n        error(1, errno, &quot;bind failed &quot;);\n    }\n\n    char message[MAXLINE];\n    count = 0;\n\n    for (;;) {\n        int n = read(connfd, message, MAXLINE);\n        if (n &lt; 0) {\n            error(1, errno, &quot;error read&quot;);\n        } else if (n == 0) {\n            error(1, 0, &quot;client closed \\n&quot;);\n        }\n        message[n] = 0;\n        printf(&quot;received %d bytes: %s\\n&quot;, n, message);\n        count++;\n    }\n}\n</code></pre><p>重新编译过后，重复上面那个例子，先启动服务器，再使用Telnet作为客户端登录到服务器，在屏幕上输入一些字符，使用Ctrl+C的方式在服务器端关闭连接。马上尝试重启服务器，这个时候我们发现，服务器正常启动，没有出现<strong>Address already in use</strong>的错误。这说明我们的修改已经起作用。</p><pre><code> $./addressused2 \n received 9 bytes: network\n received 6 bytes: good\n client closed\n $./addressused2\n</code></pre><p>SO_REUSEADDR套接字选项还有一个作用，那就是本机服务器如果有多个地址，可以在不同地址上使用相同的端口提供服务。</p><p>比如，一台服务器有192.168.1.101和10.10.2.102两个地址，我们可以在这台机器上启动三个不同的HTTP服务，第一个以本地通配地址ANY和端口80启动；第二个以192.168.101和端口80启动；第三个以10.10.2.102和端口80启动。</p><p>这样目的地址为192.168.101，目的端口为80的连接请求会被发往第二个服务；目的地址为10.10.2.102，目的端口为80的连接请求会被发往第三个服务；目的端口为80的所有其他连接请求被发往第一个服务。</p><p>我们必须给这三个服务设置SO_REUSEADDR套接字选项，否则第二个和第三个服务调用bind绑定到80端口时会出错。</p><h2>最佳实践</h2><p>这里的最佳实践可以总结成一句话： 服务器端程序，都应该设置SO_REUSEADDR套接字选项，以便服务端程序可以在极短时间内复用同一个端口启动。</p><p>有些人可能觉得这不是安全的。其实，单独重用一个套接字不会有任何问题。我在前面已经讲过，TCP连接是通过四元组唯一区分的，只要客户端不使用相同的源端口，连接服务器是没有问题的，即使使用了相同的端口，根据序列号或者时间戳，也是可以区分出新旧连接的。</p><p>而且，TCP的机制绝对不允许在相同的地址和端口上绑定不同的服务器，即使我们设置SO_REUSEADDR套接字选项，也不可能在ANY通配符地址下和端口9527上重复启动两个服务器实例。如果我们启动第二个服务器实例，不出所料会得到<strong>Address already in use</strong>的报错，即使当前还没有任何一条有效TCP连接产生。</p><p>比如下面就是第二次运行服务器端程序的报错信息：</p><pre><code> $./addressused2\n bind faied: Address already in use(98)\n</code></pre><p>你可能还记得<a href=\"https://time.geekbang.org/column/article/125806\">第10讲</a>中，我们提到过一个叫做tcp_tw_reuse的内核配置选项，这里又提到了SO_REUSEADDR套接字选择，你会不会觉得两个有点混淆呢？</p><p>其实，这两个东西一点关系也没有。</p><ul>\n<li>tcp_tw_reuse是内核选项，主要用在连接的发起方。TIME_WAIT状态的连接创建时间超过1秒后，新的连接才可以被复用，注意，这里是连接的发起方；</li>\n<li>SO_REUSEADDR是用户态的选项，SO_REUSEADDR选项用来告诉操作系统内核，如果端口已被占用，但是TCP连接状态位于TIME_WAIT ，可以重用端口。如果端口忙，而TCP处于其他状态，重用端口时依旧得到“Address already in use”的错误信息。注意，这里一般都是连接的服务方。</li>\n</ul><h2>总结</h2><p>今天我们分析了“Address already in use”产生的原因和解决方法。你只要记住一句话，<strong>在所有TCP服务器程序中，调用bind之前请设置SO_REUSEADDR套接字选项</strong>。这不会产生危害，相反，它会帮助我们在很快时间内重启服务端程序，而这一点恰恰是很多场景所需要的。</p><h2>思考题</h2><p>跟往常一样，给你布置两道思考题：</p><p>第一道，之前我们看到的例子，都是对TCP套接字设置SO_REUSEADDR套接字选项，你知道吗，我们也可以对UDP设置SO_REUSEADDR套接字选项。那么问题来了，对UDP来说，设置SO_REUSEADDR套接字选项有哪些场景和好处呢？</p><p>第二道，在服务器端程序中，设置SO_REUSEADDR套接字选项时，需要在bind函数之前对监听字进行设置，想一想，为什么不是对已连接的套接字进行设置呢？</p><p>欢迎你在评论区写下你的思考，我会和你一起讨论交流，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"14丨UDP也可以是“已连接”？","id":129807},"right":{"article_title":"16 | 如何理解TCP的“流”？","id":132443}},"comments":[{"had_liked":false,"id":131537,"user_name":"J.M.Liu","can_delete":false,"product_type":"c1","uid":1200037,"ip_address":"","ucode":"B2CB84B8E923A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/a5/71358d7b.jpg","comment_is_top":false,"comment_ctime":1567785910,"is_pvip":false,"replies":[{"id":"50790","content":"总结得不错。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568190214,"ip_address":"","comment_id":131537,"utype":1}],"discussion_count":3,"race_medal":0,"score":"332280267702","product_id":100032701,"comment_content":"关于tcp_tw_reuse和SO_REUSEADDR的区别，可以概括为：tcp_tw_reuse是为了缩短time_wait的时间，避免出现大量的time_wait链接而占用系统资源，解决的是accept后的问题；SO_REUSEADDR是为了解决time_wait状态带来的端口占用问题，以及支持同一个port对应多个ip，解决的是bind时的问题。","like_count":78,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466509,"discussion_content":"总结得不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568190214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1959482,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","nickname":"rongyefeng","note":"","ucode":"9A15D947E9D645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268477,"discussion_content":"什么叫做一针见血？？？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589787089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2622364,"avatar":"https://static001.geekbang.org/account/avatar/00/28/03/9c/5a0b8825.jpg","nickname":"Bin Watson","note":"","ucode":"33E3487896E859","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544201,"discussion_content":"🐮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641439028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172085,"user_name":"xupeng1644","can_delete":false,"product_type":"c1","uid":1596906,"ip_address":"","ucode":"B3110D74266886","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83errIIarFicghpKamvkUaJmGdIV488iaOUyUqcTwbQ6IeRS40ZFfIOfb369fgleydAT8pkucHuj2x45A/132","comment_is_top":false,"comment_ctime":1579085176,"is_pvip":false,"replies":[{"id":"68048","content":"因为SO_REUSEADDR是针对新建立的连接才起作用，对已建立的连接设置是无效的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580626102,"ip_address":"","comment_id":172085,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96068365688","product_id":100032701,"comment_content":"老师 思考题第二题的答案是什么啊","like_count":23,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481614,"discussion_content":"因为SO_REUSEADDR是针对新建立的连接才起作用，对已建立的连接设置是无效的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580626102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140472,"user_name":"G先生","can_delete":false,"product_type":"c1","uid":1200904,"ip_address":"","ucode":"FE482941EC7B2D","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/08/3b078d61.jpg","comment_is_top":false,"comment_ctime":1570954084,"is_pvip":false,"replies":[{"id":"54285","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570968163,"ip_address":"","comment_id":140472,"utype":1}],"discussion_count":2,"race_medal":0,"score":"78880365412","product_id":100032701,"comment_content":"UDP的SO_REUSEADDR使用场景比较多的是组播网络，好处是，如我们在接收组播流的时候，比如用ffmpeg拉取了一个组播流，但是还想用ffmpeg拉取相同的组播流，这个时候就需要地址重用了","like_count":18,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470405,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570968163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046036,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOuSC65kXWdWBAIIs6uXAD41Ed8Wo8tib81LLVOQJ2oK23TgPDy6x0PGmp7rXwLR3BHOicaKx1zib1DyfpCITK3dw/132","nickname":"GeekYanger","note":"","ucode":"E674B7D25261CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408395,"discussion_content":"插眼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635239719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247645,"user_name":"惘 闻","can_delete":false,"product_type":"c1","uid":1181650,"ip_address":"","ucode":"C5909F034BF072","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","comment_is_top":false,"comment_ctime":1599785326,"is_pvip":false,"replies":[{"id":"92046","content":"有几个需要澄清的问题，所谓FIN-ACK这些都是协议栈在帮我们处理，虽然应用服务器已经关闭，这些处理能力还会在内核得以执行的，只不过我们应用程序进程已经退出，没有办法收到内核对这些事件的传递。<br><br>所以，连接关闭发起方，还是会进入TIME_WAIT状态。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601869674,"ip_address":"","comment_id":247645,"utype":1}],"discussion_count":4,"race_medal":0,"score":"48844425582","product_id":100032701,"comment_content":"老师我有个疑问，这里的服务器直接关闭了连接，在关闭连接之前发送了FIN报文，此时就已经关闭了吧？所以就收不到客户端回复的ack以及客户端的fin了，连接关闭发起方还未走到接收对端发送的fin的那一步，此时也会进入timewait阶段吗？","like_count":11,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505458,"discussion_content":"有几个需要澄清的问题，所谓FIN-ACK这些都是协议栈在帮我们处理，虽然应用服务器已经关闭，这些处理能力还会在内核得以执行的，只不过我们应用程序进程已经退出，没有办法收到内核对这些事件的传递。\n\n所以，连接关闭发起方，还是会进入TIME_WAIT状态。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601869674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2948566,"avatar":"","nickname":"Geek_1696dd","note":"","ucode":"DEC1F02116F5F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591033,"discussion_content":"所谓服务器关闭连接 就是服务器进程退出，FIN报文是服务端tcp发出的，这是内核态完成的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666235720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2007786,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/a2/ea/8f913dfa.jpg","nickname":"吃猫的鱼","note":"","ucode":"DC15372C47A0CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387089,"discussion_content":"这是真的细，牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627979218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311190,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602247994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165881,"user_name":"HerofH","can_delete":false,"product_type":"c1","uid":1480252,"ip_address":"","ucode":"84EB3243FAB432","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/86QEF74Mhc6ECbBBMr62hVz0ezOicI2Kbv8QBA7qR7KepeoDib9W6KLxxMPuQ24JGusvjC03NNr8uj8GyK0DxKiaw/132","comment_is_top":false,"comment_ctime":1577339003,"is_pvip":false,"replies":[{"id":"63877","content":"你的理解是对的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577602143,"ip_address":"","comment_id":165881,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31642110075","product_id":100032701,"comment_content":"老师您好，我有个疑问，根据我的理解，TIME_WAIT是主动关闭方才会存在的状态，而服务端很多时候都是被动关闭方，为什么也会有TIME_WAIT状态呢？还是说服务端套接字设置SO_REUSEADDR只是用于服务端主动关闭的情况（比如快速重启）呢？","like_count":7,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479304,"discussion_content":"你的理解是对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577602143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205054,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1586516890,"is_pvip":false,"replies":[{"id":"76801","content":"你如果等也是可以的.......","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586681014,"ip_address":"","comment_id":205054,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27356320666","product_id":100032701,"comment_content":"老师 是不是Address already in use。我最长等待2msl时间后 重启就不会有问题啦？","like_count":7,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491368,"discussion_content":"你如果等也是可以的.......","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586681014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2272177,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ab/b1/b0ae2ec9.jpg","nickname":"czzz","note":"","ucode":"510C19C40883AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321120,"discussion_content":"哈哈，我也这样想过！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604541073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245504,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/40/a203a3b9.jpg","nickname":"爱学习不害怕","note":"","ucode":"BE325C02E4C92F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296910,"discussion_content":"有个静默时间的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596703377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297367,"user_name":"vv_test","can_delete":false,"product_type":"c1","uid":1685884,"ip_address":"","ucode":"1D164B2F034E2B","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/7c/afe6f1eb.jpg","comment_is_top":false,"comment_ctime":1623486476,"is_pvip":false,"replies":[{"id":"108671","content":"不是这样的哦，Nginx在80端口上监听，worker只是开启的内部干活的线程，并不真的监听在80端口上","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1624805014,"ip_address":"","comment_id":297367,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14508388364","product_id":100032701,"comment_content":"TCP 的机制绝对不允许在相同的地址和端口上绑定不同的服务器。<br>老师您好请问一下，Nginx 的master跟woker都是监听80端口，他们都有各自的进程号。那他们这种为什么可以多次绑定的","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521808,"discussion_content":"不是这样的哦，Nginx在80端口上监听，worker只是开启的内部干活的线程，并不真的监听在80端口上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624805014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2740779,"avatar":"https://static001.geekbang.org/account/avatar/00/29/d2/2b/af13fcd6.jpg","nickname":"简简单单就是幸福","note":"","ucode":"A08080E6FD255F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580039,"discussion_content":"nginx中是master进程监听端口后，worker进程fork出来，这样master和worker都监听着80端口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657842465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223819,"user_name":"pc","can_delete":false,"product_type":"c1","uid":1652836,"ip_address":"","ucode":"1AD538B9A900B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","comment_is_top":false,"comment_ctime":1591190306,"is_pvip":false,"replies":[{"id":"84258","content":"1.我觉得是的；<br>2.bind的时候还没有建立TCP连接哦，只有accept成功返回才真正的建立了一个TCP连接，这个时候才有四元组可以描述这个TCP连接。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1592739354,"ip_address":"","comment_id":223819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14476092194","product_id":100032701,"comment_content":"老师  有几个疑问～<br>1、对于客户端理论上也会发生Address already in use 的错误吧？（当没有SO_REUSEADDR、端口也重复了时）是在connect的时候报错吗？<br>2、“一个 TCP 连接是通过四元组(源地址、源端口、目的地址、目的端口)来唯一确定”--这句话不是很理解，对于服务端bind的时候不是没有目的地址吗？难道是在accept的时候报错吗？可是accept时候不是阻塞等待客户端连接吗？没有很理清楚....","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497249,"discussion_content":"1.我觉得是的；\n2.bind的时候还没有建立TCP连接哦，只有accept成功返回才真正的建立了一个TCP连接，这个时候才有四元组可以描述这个TCP连接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592739354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293680,"user_name":"凌空飞起的剪刀腿","can_delete":false,"product_type":"c1","uid":1243680,"ip_address":"","ucode":"16FBBF4A3B54C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","comment_is_top":false,"comment_ctime":1621489632,"is_pvip":false,"replies":[{"id":"106716","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1621778527,"ip_address":"","comment_id":293680,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10211424224","product_id":100032701,"comment_content":"第一道，之前我们看到的例子，都是对 TCP 套接字设置 SO_REUSEADDR 套接字选项，你知道吗，我们也可以对 UDP 设置 SO_REUSEADDR 套接字选项。那么问题来了，对 UDP 来说，设置 SO_REUSEADDR 套接字选项有哪些场景和好处呢？<br>UDP的SO_REUSEADDR使用场景比较多的是组播网络，好处是，如我们在接收组播流的时候，比如用ffmpeg拉取了一个组播流，但是还想用ffmpeg拉取相同的组播流，这个时候就需要地址重用了<br>第二道，在服务器端程序中，设置 SO_REUSEADDR 套接字选项时，需要在 bind 函数之前对监听字进行设置，想一想，为什么不是对已连接的套接字进行设置呢？<br>因为SO_REUSEADDR是针对新建立的连接才起作用，对已建立的连接设置是无效的。","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520316,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621778527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191414,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1584771623,"is_pvip":false,"replies":[{"id":"73533","content":"嗯，反复练习最重要。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1584863360,"ip_address":"","comment_id":191414,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174706215","product_id":100032701,"comment_content":"听完之后，程序也做了调试，但是一周又忘记了，看来还是得反复听，反复练习啊！","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488167,"discussion_content":"嗯，反复练习最重要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584863360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146537,"user_name":"林林","can_delete":false,"product_type":"c1","uid":1613227,"ip_address":"","ucode":"7B6318B971E430","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/ab/6589d91a.jpg","comment_is_top":false,"comment_ctime":1572570270,"is_pvip":false,"replies":[{"id":"56658","content":"这个，给他们提issue吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572575259,"ip_address":"","comment_id":146537,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10162504862","product_id":100032701,"comment_content":"老师，我们项目也存在服务器无法快速重启的问题，然而底层代码不开放，无法加上so_reuseaddr，不知道有没有其他办法可以解决？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472907,"discussion_content":"这个，给他们提issue吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572575259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1041685,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKPIrGvZ9qJOmfwy37ruzpKQXlTxA1WACHiaPWEq59tR3ID6Dp9qo7L7nlbic4TiamCSribxwqV7IKKSg/132","nickname":"Seven","note":"","ucode":"78266D8828B61B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284588,"discussion_content":"捕捉一只 gopher","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592563553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613227,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9d/ab/6589d91a.jpg","nickname":"林林","note":"","ucode":"7B6318B971E430","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42039,"discussion_content":"如果只在生产环境中，有没有一些暴力的方法，把timewait的连接断掉？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572575462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1135707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/54/5b/1a14d829.jpg","nickname":"WhatAKitty","note":"","ucode":"911C089450926B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613227,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9d/ab/6589d91a.jpg","nickname":"林林","note":"","ucode":"7B6318B971E430","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269708,"discussion_content":"在TIMEWAIT那一篇有将如何在操作系统层面减少TIMEWAIT，比如开启tcp_timestamp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589940100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":42039,"ip_address":""},"score":269708,"extra":""}]}]},{"had_liked":false,"id":131021,"user_name":"不动声色满心澎湃","can_delete":false,"product_type":"c1","uid":1621658,"ip_address":"","ucode":"80D8F9E49AF7C2","user_header":"https://static001.geekbang.org/account/avatar/00/18/be/9a/b0b89be3.jpg","comment_is_top":false,"comment_ctime":1567601502,"is_pvip":false,"replies":[{"id":"50827","content":"当然不会，TCP四元组，里面就有你这里提到的server_port。它改变了，四元组就不唯一了呀。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568195379,"ip_address":"","comment_id":131021,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10157536094","product_id":100032701,"comment_content":"老师 有个疑问想问下：如果我的服务器是双网卡。一个192.168.1.220 一个是192.68.1.221  然后我让220和端口8010 处于time_wait状态， 这个时候再用221和8010去启动一个程序，那会报addr in use吗","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466250,"discussion_content":"当然不会，TCP四元组，里面就有你这里提到的server_port。它改变了，四元组就不唯一了呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568195379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130953,"user_name":"nil","can_delete":false,"product_type":"c1","uid":1507193,"ip_address":"","ucode":"0F5D298C1CBB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/79/3b38c9e1.jpg","comment_is_top":false,"comment_ctime":1567583045,"is_pvip":false,"replies":[{"id":"50832","content":"哈哈，好在我们有大把的端口可以使用的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568195751,"ip_address":"","comment_id":130953,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10157517637","product_id":100032701,"comment_content":"学生时代写网络编程作业，调试的时候经常有遇到这个问题，然后通过每次改变端口号绕过这个问题。想想当时遇到问题一知半解，也不知道去寻找根本原因，哈哈哈，估计心思都在完成作业上，而根本不是想要掌握这个技术底层的原理","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466211,"discussion_content":"哈哈，好在我们有大把的端口可以使用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568195751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130890,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1567566065,"is_pvip":false,"replies":[{"id":"50835","content":"UDP用的比较少，实例确实比较难以想到。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568195936,"ip_address":"","comment_id":130890,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10157500657","product_id":100032701,"comment_content":"我竟然是沙发<br>第一问: 百度出来的 针对udp是允许完全的重复的捆绑 就是是udp允许把ip地址绑定到多个套接口上,大概是为了在同一机器上运行多个多播程序的情况下,具体的实例却想不出来<br>2. 因为我觉得bind函数时告诉内核我要监听这个ip地址和端口是在内核层的事情, 如果bind过后再进行设置套接字选项的话虽然是在应用层对套接字进行了修改,但是没告诉内核,这个地址需要避开timewait状态直接重用,大意就是没有影响到内核的处理","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466178,"discussion_content":"UDP用的比较少，实例确实比较难以想到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568195936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241303,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1597242016,"is_pvip":false,"replies":[{"id":"89401","content":"不是哦，2MSL还是一个很重要的值。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1597641132,"ip_address":"","comment_id":241303,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5892209312","product_id":100032701,"comment_content":"所以现在等待2MSL都是没用的了是么？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503708,"discussion_content":"不是哦，2MSL还是一个很重要的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597641132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065849,"avatar":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","nickname":"test","note":"","ucode":"9A4973E591DD12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299281,"discussion_content":"既然现在可以通过timestamp啊序号什么的保证新的连接不被老的fin信号断开，那现在2msl的用处是啥呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597641515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159644,"user_name":"Geek_68d3d2","can_delete":false,"product_type":"c1","uid":1674369,"ip_address":"","ucode":"EBD6D881AA7A74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","comment_is_top":false,"comment_ctime":1575712814,"is_pvip":false,"replies":[{"id":"61023","content":"应该这样说是将原来处于TIME_WAIT状态的连接变成可利用的，而FIN是在TIME_WAIT状态之前已经发送出去了，不会引起对端一直处于等待状态。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575798675,"ip_address":"","comment_id":159644,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5870680110","product_id":100032701,"comment_content":"没明白复用socket，如果复用了socket是不是就是相当于旧有的socket连接没有了time_wait时间了？也就是说对端可能收不到fin而一直处于等待状态？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477130,"discussion_content":"应该这样说是将原来处于TIME_WAIT状态的连接变成可利用的，而FIN是在TIME_WAIT状态之前已经发送出去了，不会引起对端一直处于等待状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575798675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1674369,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","nickname":"Geek_68d3d2","note":"","ucode":"EBD6D881AA7A74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75946,"discussion_content":"fin在timewait前发出去之后可能对端没有收到啊，这时原来的socket连接已经复用为其他的了，这时候对端不是会一直在read哪里等待吗？直到超时。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575799362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1619766,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epx117N0LnncMmd2ysrEOrhp9cQcrLme5MD6nsYXF3ZcWdUmwPsyicwgCP5YHGjYZMAuNiaMfHoD38Q/132","nickname":"不穿秋裤男","note":"","ucode":"466EF0BEAA7F52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":119148,"discussion_content":"这个极端情况我也没有想明白会发生什么，又不知道怎么模拟测试下，苦恼。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578218253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154668,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1574504612,"is_pvip":false,"replies":[{"id":"60388","content":"太暴力了吧","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575189350,"ip_address":"","comment_id":154668,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5869471908","product_id":100032701,"comment_content":"最佳实践：<br>服务器端程序，都应该设置 SO_REUSEADDR 套接字选项，以便服务端程序可以在极短时间内复用同一个端口启动。<br>在所有 TCP 服务器程序中，调用 bind 之前请设置 SO_REUSEADDR 套接字选项。<br><br>实际开发，这个遇到的确实多一点，自己都是找到是谁占用的端口，然后弄死它，再重启应用。<br><br>最早时都不知道怎么找，直接重启机器，再重启应用。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475541,"discussion_content":"太暴力了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575189350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68037,"discussion_content":"老师有什么更加优雅的处理方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575197617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131016,"user_name":"不动声色满心澎湃","can_delete":false,"product_type":"c1","uid":1621658,"ip_address":"","ucode":"80D8F9E49AF7C2","user_header":"https://static001.geekbang.org/account/avatar/00/18/be/9a/b0b89be3.jpg","comment_is_top":false,"comment_ctime":1567599650,"is_pvip":false,"replies":[{"id":"50828","content":"哈哈，我写得很累的说。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568195392,"ip_address":"","comment_id":131016,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862566946","product_id":100032701,"comment_content":"老师， 希望可以多讲一点。 感觉听了很爽  但是觉得不够 哈哈哈","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466247,"discussion_content":"哈哈，我写得很累的说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568195392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353071,"user_name":"dll","can_delete":false,"product_type":"c1","uid":1264401,"ip_address":"北京","ucode":"5773CBC8BFB91F","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/11/d7e08b5b.jpg","comment_is_top":false,"comment_ctime":1659138319,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1659138319","product_id":100032701,"comment_content":"TCP 的机制绝对不允许在相同的地址和端口上绑定不同的服务器，即使我们设置 SO_REUSEADDR 套接字选项，也不可能在 ANY 通配符地址下和端口 9527 上重复启动两个服务器实例。<br>——————————————————<br>什么叫服务器实例？","like_count":0},{"had_liked":false,"id":351502,"user_name":"smiler","can_delete":false,"product_type":"c1","uid":3011086,"ip_address":"","ucode":"D3E73AFB2912FA","user_header":"https://static001.geekbang.org/account/avatar/00/2d/f2/0e/4112b669.jpg","comment_is_top":false,"comment_ctime":1657854170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657854170","product_id":100032701,"comment_content":"老师，我问下问什么客户端主动关闭，就不会出现这样的问题","like_count":0},{"had_liked":false,"id":344093,"user_name":"Frankey","can_delete":false,"product_type":"c1","uid":2776006,"ip_address":"","ucode":"2F09BC2500C9E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5SNsSoiaZw4Qzd2ctH4vtibHQordcLrYsX43oFZFloRTId0op617mcGlrvGx33U8ic2LTgdicoEFPvQ/132","comment_is_top":false,"comment_ctime":1651236396,"is_pvip":false,"replies":[{"id":"125675","content":"哪里错了么？","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1651405644,"ip_address":"","comment_id":344093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651236396","product_id":100032701,"comment_content":"代码中端口是telnet 127.0.0.1 43211","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569317,"discussion_content":"哪里错了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651405644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341533,"user_name":"bianf","can_delete":false,"product_type":"c1","uid":2655951,"ip_address":"","ucode":"E8B0E15356464F","user_header":"https://static001.geekbang.org/account/avatar/00/28/86/cf/3764011f.jpg","comment_is_top":false,"comment_ctime":1649680159,"is_pvip":true,"replies":[{"id":"125343","content":"没看明白你的问题 ：）","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1650713812,"ip_address":"","comment_id":341533,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1649680159","product_id":100032701,"comment_content":"比如，一台服务器有 192.168.1.101 和 10.10.2.102 连个地址，我们可以在这台机器上启动三个不同的 HTTP 服务，第一个以本地通配地址 ANY 和端口 80 启动；第二个以 192.168.101 和端口 80 启动；第三个以 10.10.2.102 和端口 80 启动。<br><br>这一段102后面应该是两吧","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566560,"discussion_content":"没看明白你的问题 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650713812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2655951,"avatar":"https://static001.geekbang.org/account/avatar/00/28/86/cf/3764011f.jpg","nickname":"bianf","note":"","ucode":"E8B0E15356464F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":566565,"discussion_content":"打错字了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650715278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":566560,"ip_address":""},"score":566565,"extra":""}]}]},{"had_liked":false,"id":341529,"user_name":"bianf","can_delete":false,"product_type":"c1","uid":2655951,"ip_address":"","ucode":"E8B0E15356464F","user_header":"https://static001.geekbang.org/account/avatar/00/28/86/cf/3764011f.jpg","comment_is_top":false,"comment_ctime":1649678441,"is_pvip":true,"replies":[{"id":"125342","content":"笔误哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1650713641,"ip_address":"","comment_id":341529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649678441","product_id":100032701,"comment_content":"$telneet 127.0.0.1 9527<br>network<br>bad<br>Connection closed by foreign host.<br><br>这段代码的命令写错了，telnet多了个e","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566559,"discussion_content":"笔误哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650713642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340676,"user_name":"铲铲队","can_delete":false,"product_type":"c1","uid":1132569,"ip_address":"","ucode":"D16372C34B7AE3","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/19/14dd81d9.jpg","comment_is_top":false,"comment_ctime":1649040898,"is_pvip":false,"replies":[{"id":"124771","content":"不要这么简单的理解，要结合讲座中的具体例子来理解，这个例子是说，使用通配符可以绑定到同一个端口，而不至于报错。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1649592484,"ip_address":"","comment_id":340676,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649040898","product_id":100032701,"comment_content":"SO_REUSEADDR 套接字选项还有一个作用，那就是本机服务器如果有多个地址，可以在不同地址上使用相同的端口提供服务<br>----&gt;这个不是SO_REUSEPORT的作用吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561279,"discussion_content":"不要这么简单的理解，要结合讲座中的具体例子来理解，这个例子是说，使用通配符可以绑定到同一个端口，而不至于报错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649592485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310560,"user_name":"Geek_7f1111","can_delete":false,"product_type":"c1","uid":2756292,"ip_address":"","ucode":"71FA4B52286652","user_header":"","comment_is_top":false,"comment_ctime":1630744908,"is_pvip":false,"replies":[{"id":"112550","content":"是的","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1630845197,"ip_address":"","comment_id":310560,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630744908","product_id":100032701,"comment_content":"time_wait这段时间如果绑定了新的服务，老连接再发过来信息是不是会回复rst？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526274,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630845197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247257,"user_name":"木子皿","can_delete":false,"product_type":"c1","uid":1242778,"ip_address":"","ucode":"3FDEAFABB4C427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUzv6S9wroyXaoFIwvC1mdDiav4BVS4BbPTuwtvWibthL5PyMuxFNicY06QJMZicVpib7E88S19nH4I9Q/132","comment_is_top":false,"comment_ctime":1599641964,"is_pvip":false,"replies":[{"id":"92042","content":"这个正是TIME_WAIT设计出来的用意，满足一定的时间使得幻化的包得以在网络中消失。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601869224,"ip_address":"","comment_id":247257,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1599641964","product_id":100032701,"comment_content":"老师，您好！我想请问一下问题：当服务端被ctrl+c终止后，相关的socket资源被释放，而客户端接收到fin包后也退出了，操作系统不会帮我们进行fin包的回复吗?为什么服务器还会处于time_wait状态呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505355,"discussion_content":"这个正是TIME_WAIT设计出来的用意，满足一定的时间使得幻化的包得以在网络中消失。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601869224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103091,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","nickname":"李二木","note":"","ucode":"30E03BB84ADB27","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552837,"discussion_content":"幻化的包的是什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645607978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240452,"user_name":"Geek_a2ed66","can_delete":false,"product_type":"c1","uid":2101997,"ip_address":"","ucode":"B6D817CD906F9B","user_header":"","comment_is_top":false,"comment_ctime":1596936835,"is_pvip":false,"replies":[{"id":"89336","content":"没有办法让客户端连接上那个ANY地址启动的HTTP服务，除非把第二个或第三个中的一个关闭掉。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1597584278,"ip_address":"","comment_id":240452,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1596936835","product_id":100032701,"comment_content":"请问下老师，一台服务器有 192.168.1.101 和 10.10.2.102 连个地址，我们可以在这台机器上启动三个不同的 HTTP 服务，<br>第一个以本地通配地址 ANY 和端口 80 启动；第二个以 192.168.101 和端口 80 启动；第三个以 10.10.2.102 和端口 80 启动。<br>这样目的地址为 192.168.101，目的端口为 80 的连接请求会被发往第二个服务；目的地址为 10.10.2.102，<br>如果我客户端要连接以本地通配地址 ANY启动的连接，客户端应该填什么地址","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503450,"discussion_content":"没有办法让客户端连接上那个ANY地址启动的HTTP服务，除非把第二个或第三个中的一个关闭掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597584278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2069047,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/92/37/49f3982a.jpg","nickname":"Garfield","note":"","ucode":"6F946BB7CA7973","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404294,"discussion_content":"内部测试程序发起127.0.0.1就流向ANY了吧。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634283314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227879,"user_name":"不能用真名字","can_delete":false,"product_type":"c1","uid":1084486,"ip_address":"","ucode":"83464DF743520A","user_header":"https://static001.geekbang.org/account/avatar/00/10/8c/46/7b973ee2.jpg","comment_is_top":false,"comment_ctime":1592503761,"is_pvip":false,"replies":[{"id":"84281","content":"Linux版本？你的操作方法是什么？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1592744344,"ip_address":"","comment_id":227879,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592503761","product_id":100032701,"comment_content":"“比如，一台服务器有 192.168.1.101 和 10.10.2.102 连个地址，我们可以在这台机器上启动三个不同的 HTTP 服务，第一个以本地通配地址 ANY 和端口 80 启动；第二个以 192.168.101 和端口 80 启动；第三个以 10.10.2.102 和端口 80 启动。” 老师，这个确定能行么？实测只要有any，就不能启动更多的服务实例le","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498815,"discussion_content":"Linux版本？你的操作方法是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592744344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215801,"user_name":"super-ck","can_delete":false,"product_type":"c1","uid":1307067,"ip_address":"","ucode":"02F036E53E1130","user_header":"","comment_is_top":false,"comment_ctime":1589105986,"is_pvip":false,"replies":[{"id":"80638","content":"如果是我实现序列号，我会一直让这个序列号循环的变大，直到到达最大上限，再从1开始。现代操作系统都对此作了优化，不会出现复用端口而序列号无法区分报文顺序的情况。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1589705290,"ip_address":"","comment_id":215801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589105986","product_id":100032701,"comment_content":"序列号是用来发送字节流或传送SYN&#47;FIN信息， 请问是否有一个种可能在某序列号下，tcp连接，传送字节流，然后服务器端关闭，此时序列号比原先序列号还小，这时如果复用同一个端口，会不会出现问题，难道用时间戳来判断么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494563,"discussion_content":"如果是我实现序列号，我会一直让这个序列号循环的变大，直到到达最大上限，再从1开始。现代操作系统都对此作了优化，不会出现复用端口而序列号无法区分报文顺序的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589705290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185148,"user_name":"awmthink","can_delete":false,"product_type":"c1","uid":1331202,"ip_address":"","ucode":"742915BBCE7111","user_header":"https://static001.geekbang.org/account/avatar/00/14/50/02/cce1cf67.jpg","comment_is_top":false,"comment_ctime":1583497052,"is_pvip":false,"replies":[{"id":"71664","content":"第二种情况应该是显示的让Server端退出了，我理解你没有使用SO_REUSEADDR选项对吧？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583639495,"ip_address":"","comment_id":185148,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583497052","product_id":100032701,"comment_content":"老师，你好，我用自己的echo客户端测试，发现，如果Control-C把Server强制关闭掉后，客户端如果在阻塞在等待用户输入，这里重启Server就会提示地址已用。<br>但如果这里客户端接收输入，然后收到服务端连接关闭，然后客户端也退出了。这时重启Server，Server是可以正常重启的，这种情况是为什么呢，TIME_WAIT状态没了吗？是不是Client关闭时又有报文给到Server的内核呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486270,"discussion_content":"第二种情况应该是显示的让Server端退出了，我理解你没有使用SO_REUSEADDR选项对吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583639495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184971,"user_name":"Richard","can_delete":false,"product_type":"c1","uid":1316758,"ip_address":"","ucode":"893F958B9DD161","user_header":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","comment_is_top":false,"comment_ctime":1583460405,"is_pvip":false,"replies":[{"id":"71700","content":"我觉得理论上肯定是存在的，不过你想一个32位的seq在短时间内绕回，我认为概率还是比较小的。至于Linux系统有没有在源代码里面有这种容错机制，我没有仔细读过这部分代码，不好判断，我认为在实际状况中没有理论考虑得那么多面面俱到。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583657303,"ip_address":"","comment_id":184971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583460405","product_id":100032701,"comment_content":"老师，我想问一下关于新旧连接化身如何阻止延迟报文的问题。您在文中说现代Linux 对小概率下重用了相同四元组的socket的情况作了很多优化：“第一种优化是新连接 SYN 告知的初始序列号，一定比 TIME_WAIT 老连接的末序列号大，这样通过序列号就可以区别出新老连接。”<br>我刚好深入研究了 TIME_WAIT 一段时间，阅读过相关的RFC以及《TCP&#47;IP协议详解》中相关的内容，大概总结出TCP 字段中 ISN、seq、timestamp都存在回绕重用的情况，其中ISN和seq都是无符号的32位整型，取值在[0, 2**32 – 1]之间，ISN 是通过某种算法随机生成作为seq的初始序列号每4µs加一.，seq为每个字节编号，并在达到最大值时从0开始，所以wrap around time取决于带宽大小和tcp的发送速率。<br>我的问题是：会不会存在一种情况是老连接传输了大量数据极大地推进了seq，此时跳过了TIME_WAIT等待时间快速重用了相同元组的连接，而新连接的 ISN 却比老连接的末序列号小呢？<br>或者说linux是否通过某种方式保证了新化身的ISN一定比老化身末序列号大？<br>毕竟timestamp只能保证出栈连接重用时（主动跳过time_wait）的报文延时问题，对服务端主动断开的情况来说，在与客户端之间的网络存在NAT的情况下，timestamp也无法保证识别出延时报文。<br>写的有点乱，希望已描述清楚~","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486197,"discussion_content":"我觉得理论上肯定是存在的，不过你想一个32位的seq在短时间内绕回，我认为概率还是比较小的。至于Linux系统有没有在源代码里面有这种容错机制，我没有仔细读过这部分代码，不好判断，我认为在实际状况中没有理论考虑得那么多面面俱到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583657303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146142,"user_name":"chs","can_delete":false,"product_type":"c1","uid":1618711,"ip_address":"","ucode":"BE4B6A19317400","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/17/19ea024f.jpg","comment_is_top":false,"comment_ctime":1572439623,"is_pvip":false,"replies":[{"id":"56597","content":"SO_REUSEPORT用在多个不同的socket监听在同一个端口上，这种情况比较罕见，容易出现所谓的&quot;惊群&quot;现象。当然，如果用的好，也可以解决一些特定场景的问题。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572573041,"ip_address":"","comment_id":146142,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1572439623","product_id":100032701,"comment_content":"老师请讲一下SO_REUSEPORT","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472725,"discussion_content":"SO_REUSEPORT用在多个不同的socket监听在同一个端口上，这种情况比较罕见，容易出现所谓的&amp;quot;惊群&amp;quot;现象。当然，如果用的好，也可以解决一些特定场景的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572573041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132569,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/19/14dd81d9.jpg","nickname":"铲铲队","note":"","ucode":"D16372C34B7AE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559884,"discussion_content":"SO_REUSEPORT是解决惊群现象的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649041822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259625,"avatar":"https://static001.geekbang.org/account/avatar/00/13/38/69/864569a4.jpg","nickname":"devil","note":"","ucode":"BB6090411BAA23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":169089,"discussion_content":"SO_REUSEPORT应该是解决惊群现象吧？多个进程绑定同一个port但是有各自的socket，内核通过hash只会选折其中一个socket。在没有SO_REUSEPORT的时候，通过父子进程共享同一个socket当有请求时这个socket唤醒所有的进程才会出现惊群现象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581602983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141045,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1571105975,"is_pvip":false,"replies":[{"id":"55087","content":"不是冲突的，SO_REUSEADDR是直接复用TIME_WAIT状态的连接，上一次连接的旧数据包会被忽略掉。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571453524,"ip_address":"","comment_id":141045,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1571105975","product_id":100032701,"comment_content":"使用SO_REUSEADDR感觉跟前面讲的time_wait状态持续2MSL的原因有冲突呀。服务能立即重启的话，就能收到上一次连接的旧数据包呀","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470656,"discussion_content":"不是冲突的，SO_REUSEADDR是直接复用TIME_WAIT状态的连接，上一次连接的旧数据包会被忽略掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571453524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2224386,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f1/02/96082034.jpg","nickname":"Guchen","note":"","ucode":"9BD34F616F167A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316899,"discussion_content":"我觉得应该这样理解，复用的链接是抽象的链接，之前的连接的状态量缓冲区啥的都会被丢弃，这些东西是不会被继承的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603468704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1036076,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cf/2c/a3c68666.jpg","nickname":"咔咔","note":"","ucode":"3655BA8BDD7419","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53620,"discussion_content":"旧数据包会被丢掉，是因为根据序列号或者时间戳区分出新旧连接吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574179144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131586,"user_name":"石将从","can_delete":false,"product_type":"c1","uid":1375617,"ip_address":"","ucode":"12F43E643D1D58","user_header":"https://static001.geekbang.org/account/avatar/00/14/fd/81/1864f266.jpg","comment_is_top":false,"comment_ctime":1567820211,"is_pvip":false,"replies":[{"id":"50787","content":"$telnet 127.0.0.1 43211<br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568189891,"ip_address":"","comment_id":131586,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567820211","product_id":100032701,"comment_content":"怎么用telnet连接，求老师回答","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466526,"discussion_content":"$telnet 127.0.0.1 43211\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568189891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}