{"id":418283,"title":"02｜Context：请求控制器，让每个请求都在掌控之中","content":"<p>你好，我是轩脉刃。</p><p>上一讲我们使用 net/http 搭建了一个最简单的 HTTP 服务，为了帮你理解服务启动逻辑，我用思维导图梳理了主流程，如果你还有不熟悉，可以再回顾一下。</p><p>今天我将带你进一步丰富我们的框架，添加上下文 Context 为请求设置超时时间。</p><p>从主流程中我们知道（第三层关键结论），HTTP 服务会为每个请求创建一个 Goroutine 进行服务处理。在服务处理的过程中，有可能就在本地执行业务逻辑，也有可能再去下游服务获取数据。如下图，本地处理逻辑 A，下游服务 a/b/c/d， 会形成一个标准的树形逻辑链条。</p><p><img src=\"https://static001.geekbang.org/resource/image/33/71/33361f90298865f98e3038f11f02e671.jpg?wh=1920x1080\" alt=\"\"></p><p>在这个逻辑链条中，每个本地处理逻辑，或者下游服务请求节点，都有可能存在超时问题。<strong>而对于 HTTP 服务而言，超时往往是造成服务不可用、甚至系统瘫痪的罪魁祸首</strong>。</p><p>系统瘫痪也就是我们俗称的雪崩，某个服务的不可用引发了其他服务的不可用。比如上图中，如果服务 d 超时，导致请求处理缓慢甚至不可用，加剧了 Goroutine 堆积，同时也造成了服务 a/b/c 的请求堆积，Goroutine 堆积，瞬时请求数加大，导致 a/b/c 的服务都不可用，整个系统瘫痪，怎么办？</p><p>最有效的方法就是从源头上控制一个请求的“最大处理时长”，所以，对于一个 Web 框架而言，“超时控制”能力是必备的。今天我们就用 Context 为框架增加这个能力。</p><!-- [[[read_end]]] --><h2>context 标准库设计思路</h2><p>如何控制超时，官方是有提供 context 标准库作为解决方案的，但是由于标准库的功能并不够完善，一会我们会基于标准库，来根据需求自定义框架的 Context。所以理解其背后的设计思路就可以了。</p><p>为了防止雪崩，context 标准库的解决思路是：<strong>在整个树形逻辑链条中，用上下文控制器 Context，实现每个节点的信息传递和共享</strong>。</p><p>具体操作是：用 Context 定时器为整个链条设置超时时间，时间一到，结束事件被触发，链条中正在处理的服务逻辑会监听到，从而结束整个逻辑链条，让后续操作不再进行。</p><p>明白操作思路之后，我们深入 context 标准库看看要对应具备哪些功能。</p><p>按照上一讲介绍的了解标准库的方法，我们先通过  <code>go doc context | grep \"^func\"</code> 看提供了哪些库函数（function）：</p><pre><code class=\"language-go\">// 创建退出 Context\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc){}\n// 创建有超时时间的 Context\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc){}\n// 创建有截止时间的 Context\nfunc WithDeadline(parent Context, d time.Time) (Context, CancelFunc){}\n</code></pre><p>其中，WithCancel 直接创建可以操作退出的子节点，WithTimeout 为子节点设置了超时时间（还有多少时间结束），WithDeadline 为子节点设置了结束时间线（在什么时间结束）。</p><p>但是这只是表层功能的不同，其实这三个库函数的<strong>本质是一致的</strong>。怎么理解呢？</p><p>我们先通过  <code>go doc context | grep \"^type\"</code> ，搞清楚 Context 的结构定义和函数句柄，再来解答这个问题。</p><pre><code class=\"language-go\">type Context interface {\n    // 当 Context 被取消或者到了 deadline，返回一个被关闭的 channel\n    Done() &lt;-chan struct{}\n    ...\n}\n\n//函数句柄\ntype CancelFunc func() \n</code></pre><p>这个库虽然不大，但是设计感强，比较抽象，并不是很好理解。所以这里，我把 Context 的其他字段省略了。现在，我们只理解核心的 Done() 方法和 CancelFunc 这两个函数就可以了。</p><p>在树形逻辑链条上，<strong>一个节点其实有两个角色：一是下游树的管理者；二是上游树的被管理者</strong>，那么就对应需要有两个能力：</p><ul>\n<li>一个是能让整个下游树结束的能力，也就是函数句柄 CancelFunc；</li>\n<li>另外一个是在上游树结束的时候被通知的能力，也就是 Done()方法。同时因为通知是需要不断监听的，所以 Done() 方法需要通过 channel 作为返回值让使用方进行监听。</li>\n</ul><p>看<a href=\"https://pkg.go.dev/context@go1.15.5\">官方代码</a>示例：</p><pre><code class=\"language-go\">package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\nconst shortDuration = 1 * time.Millisecond\n\nfunc main() {\n    // 创建截止时间\n\td := time.Now().Add(shortDuration)\n    // 创建有截止时间的 Context\n\tctx, cancel := context.WithDeadline(context.Background(), d)\n\tdefer cancel()\n\n    // 使用 select 监听 1s 和有截止时间的 Context 哪个先结束\n\tselect {\n\tcase &lt;-time.After(1 * time.Second):\n\t\tfmt.Println(\"overslept\")\n\tcase &lt;-ctx.Done():\n\t\tfmt.Println(ctx.Err())\n\t}\n\n}\n</code></pre><p>主线程创建了一个 1 毫秒结束的定时器 Context，在定时器结束的时候，主线程会通过 Done()函数收到事件结束通知，然后主动调用函数句柄 cancelFunc 来通知所有子 Context 结束（这个例子比较简单没有子 Context）。</p><p>我打个更形象的比喻，CancelFunc 和 Done 方法就像是电话的话筒和听筒，话筒 CancelFunc，用来告诉管辖范围内的所有 Context 要进行自我终结，而通过监听听筒 Done 方法，我们就能听到上游父级管理者的终结命令。</p><p>总之，<strong>CancelFunc 是主动让下游结束，而 Done 是被上游通知结束</strong>。</p><p>搞懂了具体实现方法，我们回过头来看这三个库函数 WithCancel / WithDeadline / WithTimeout 就很好理解了。</p><p>它们的本质就是“通过定时器来自动触发终结通知”，WithTimeout 设置若干秒后通知触发终结，WithDeadline 设置未来某个时间点触发终结。</p><p>对应到 Context 代码中，它们的功能就是：<strong>为一个父节点生成一个带有 Done 方法的子节点，并且返回子节点的 CancelFunc 函数句柄</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/90/c5/900361486571bb703261d2cfd56e87c5.jpg?wh=1920x1080\" alt=\"\"><br>\n我们用一张图来辅助解释一下，Context的使用会形成一个树形结构，下游指的是树形结构中的子节点及所有子节点的子树，而上游指的是当前节点的父节点。比如图中圈起来的部分，当WithTimeout调用CancelFunc的时候，所有下游的With系列产生的Context都会从Done中收到消息。</p><h2>Context 是怎么产生的</h2><p>现在我们已经了解标准库 context 的设计思路了，在开始写代码之前，我们还要把 Context 放到 net/http 的主流程逻辑中，其中有两个问题要搞清楚：<strong>Context 在哪里产生？它的上下游逻辑是什么？</strong></p><p>要回答这两个问题，可以用我们在上一讲介绍的思维导图方法，因为主流程已经拎清楚了，现在你只需要把其中 Context 有关的代码再详细过一遍，然后在思维导图上标记出来就可以了。</p><p>这里，我已经把 Context 的关键代码都用蓝色背景做了标记，你可以检查一下自己有没有标漏。</p><p><img src=\"https://static001.geekbang.org/resource/image/79/a4/79a3c7eafc3ccfbe1b162e646902c5a4.png?wh=1413x906\" alt=\"\"></p><p>照旧看图梳理代码流程，来看蓝色部分，从前到后的层级梳理就不再重复讲了，我们看关键位置。</p><p>从图中最后一层的代码 req.ctx = ctx 中看到，每个连接的 Context 最终是放在 request 结构体中的。</p><p>而且这个时候， Context 已经有多层父节点。因为，在代码中，每执行一次 WithCancel、WithValue，就封装了一层 Context，我们通过这一张流程图能清晰看到最终 Context 的生成层次。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/22/ddbca0e4d1c66ed417b9de97c338ae22.jpg?wh=1920x1080\" alt=\"\"></p><p>你发现了吗，<strong>其实每个连接的 Context 都是基于 baseContext 复制来的</strong>。对应到代码中就是，在为某个连接开启 Goroutine 的时候，为当前连接创建了一个 connContext，这个 connContext 是基于 server 中的 Context 而来，而 server 中 Context 的基础就是 baseContext。</p><p>所以，Context 从哪里产生这个问题，我们就解决了，但是如果我们想要对 Context 进行必要的修改，还要从上下游逻辑中，找到它的修改点在哪里。</p><p>生成最终的 Context 的流程中，net/http 设计了<strong>两处可以注入修改</strong>的地方，都在 Server 结构里面，一处是 BaseContext，另一处是 ConnContext。</p><ul>\n<li>BaseContext 是整个 Context 生成的源头，如果我们不希望使用默认的 context.Backgroud()，可以替换这个源头。</li>\n<li>而在每个连接生成自己要使用的 Context 时，会调用 ConnContext ，它的第二个参数是 net.Conn，能让我们对某些特定连接进行设置，比如要针对性设置某个调用 IP。</li>\n</ul><p>这两个函数的定义我写在下面的代码里了，展示一下，你可以看看。</p><pre><code class=\"language-go\">type Server struct {\n\t...\n\n    // BaseContext 用来为整个链条创建初始化 Context\n    // 如果没有设置的话，默认使用 context.Background()\n\tBaseContext func(net.Listener) context.Context{}\n\n    // ConnContext 用来为每个连接封装 Context\n    // 参数中的 context.Context 是从 BaseContext 继承来的\n\tConnContext func(ctx context.Context, c net.Conn) context.Context{}\n    ...\n}\n</code></pre><p>最后，我们回看一下 req.ctx 是否能感知连接异常。<img src=\"https://static001.geekbang.org/resource/image/a1/fc/a1d0ece41997ac873a5292301ee988fc.jpg?wh=1920x1080\" alt=\"\"><br>\n是可以的，因为链条中一个父节点为 CancelContext，其 cancelFunc 存储在代表连接的 conn 结构中，连接异常的时候，会触发这个函数句柄。</p><p>好，讲完 context 库的核心设计思想，以及在 net/http 的主流程逻辑中嵌入 context 库的关键实现，我们现在心中有图了，就可以撸起袖子开始写框架代码了。</p><p>你是不是有点疑惑，为啥要自己先理解一遍 context 标准库的生成流程，咱们直接动手干不是更快？有句老话说得好，磨刀不误砍柴功。</p><p>我们确实是要自定义，不是想直接使用标准库的 Context，因为它完全是标准库 Context 接口的实现，只能控制链条结束，封装性并不够。但是只有先搞清楚了 context 标准库的设计思路，才能精准确定自己能怎么改、改到什么程度合适，下手的时候才不容易懵。</p><p>下面我们就基于刚才讲的设计思路，从封装自己的 Context 开始，写今天的核心逻辑，也就是为单个请求设置超时，最后考虑一些边界场景，并且进行优化。</p><p>我们还是再拉一个分支 <a href=\"https://github.com/gohade/coredemo/tree/geekbang/02\">geekbang/02</a>，接着上一节课的代码结构，在框架文件夹中封装一个自己的Context。</p><h2>封装一个自己的 Context</h2><p>在框架里，我们需要有更强大的 Context，除了可以控制超时之外，常用的功能比如获取请求、返回结果、实现标准库的 Context 接口，也都要有。</p><p><strong>我们首先来设计提供获取请求、返回结果功能</strong>。</p><p>先看一段未封装自定义 Context 的控制器代码：</p><pre><code class=\"language-go\">// 控制器\nfunc Foo1(request *http.Request, response http.ResponseWriter) {\n\tobj := map[string]interface{}{\n\t\t\"data\":&nbsp; &nbsp;nil,\n\t}\n    // 设置控制器 response 的 header 部分\n\tresponse.Header().Set(\"Content-Type\", \"application/json\")\n\n    // 从请求体中获取参数\n\tfoo := request.PostFormValue(\"foo\")\n\tif foo == \"\" {\n\t\tfoo = \"10\"\n\t}\n\tfooInt, err := strconv.Atoi(foo)\n\tif err != nil {\n\t\tresponse.WriteHeader(500)\n\t\treturn\n\t}\n    // 构建返回结构\n\tobj[\"data\"] = fooInt&nbsp;\n\tbyt, err := json.Marshal(obj)\n\tif err != nil {\n\t\tresponse.WriteHeader(500)\n\t\treturn\n\t}\n    // 构建返回状态，输出返回结构\n\tresponse.WriteHeader(200)\n\tresponse.Write(byt)\n\treturn\n}\n</code></pre><p>这段代码重点是操作调用了 http.Request 和 http.ResponseWriter ，实现 WebService 接收和处理协议文本的功能。但这两个结构提供的接口粒度太细了，需要使用者非常熟悉这两个结构的内部字段，比如response里设置Header和设置Body的函数，用起来肯定体验不好。</p><p>如果我们能<strong>将这些内部实现封装起来，对外暴露语义化高的接口函数</strong>，那么我们这个框架的易用性肯定会明显提升。什么是好的封装呢？再看这段有封装的代码：</p><pre><code class=\"language-go\">// 控制器\nfunc Foo2(ctx *framework.Context) error {\n\tobj := map[string]interface{}{\n\t\t\"data\":&nbsp; &nbsp;nil,\n\t}\n    // 从请求体中获取参数\n \tfooInt := ctx.FormInt(\"foo\", 10)\n    // 构建返回结构  \n\tobj[\"data\"] = fooInt\n    // 输出返回结构\n\treturn ctx.Json(http.StatusOK, obj)\n}\n</code></pre><p>你可以明显感受到封装性高的 Foo2 函数，更优雅更易读了。首先它的代码量更少，而且语义性也更好，近似对业务的描述：从请求体中获取 foo 参数，并且封装为 Map，最后 JSON 输出。</p><p>思路清晰了，所以这里可以将 request 和 response 封装到我们自定义的 Context 中，对外提供请求和结果的方法，我们把这个Context结构写在框架文件夹的context.go文件中：</p><pre><code class=\"language-go\">// 自定义 Context\ntype Context struct {\n\trequest&nbsp; &nbsp; &nbsp; &nbsp; *http.Request\n\tresponseWriter http.ResponseWriter\n\t...\n}\n</code></pre><p>对request和response封装的具体实现，我们到第五节课封装的时候再仔细说。</p><p><strong>然后是第二个功能，标准库的 Context 接口</strong>。</p><p>标准库的 Context 通用性非常高，基本现在所有第三方库函数，都会根据官方的建议，将第一个参数设置为标准 Context 接口。所以我们封装的结构只有实现了标准库的 Context，才能方便直接地调用。</p><p>到底有多方便，我们看使用示例：</p><pre><code class=\"language-go\">func Foo3(ctx *framework.Context) error {\n\trdb := redis.NewClient(&amp;redis.Options{\n\t\tAddr:&nbsp; &nbsp; &nbsp;\"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:&nbsp; &nbsp; &nbsp; &nbsp;0,&nbsp; // use default DB\n\t})\n\n\treturn rdb.Set(ctx, \"key\", \"value\", 0).Err()\n}\n\n</code></pre><p>这里使用了 go-redis 库，它每个方法的参数中都有一个标准 Context 接口，这让我们能将自定义的 Context 直接传递给 rdb.Set。</p><p>所以在我们的框架上实现这一步，只需要调用刚才封装的 request 中的 Context 的标准接口就行了，很简单，我们继续在context.go中进行补充：</p><pre><code class=\"language-go\">func (ctx *Context) BaseContext() context.Context {\n\treturn ctx.request.Context()\n}\n\nfunc (ctx *Context) Done() &lt;-chan struct{} {\n\treturn ctx.BaseContext().Done()\n}\n</code></pre><p>这里举例了两个method的实现，其他的都大同小异就不在文稿里展示，你可以先自己写，然后对照我放在<a href=\"https://github.com/gohade/coredemo/blob/geekbang/02/framework/context.go\">GitHub</a>上的完整代码检查一下。</p><p>自己封装的 Context 最终需要提供四类功能函数：</p><ul>\n<li>base 封装基本的函数功能，比如获取 http.Request 结构</li>\n<li>context 实现标准 Context 接口</li>\n<li>request 封装了 http.Request 的对外接口</li>\n<li>response 封装了 http.ResponseWriter 对外接口</li>\n</ul><p>完成之后，使用我们的IDE里面的结构查看器（每个IDE显示都不同），就能查看到如下的函数列表：<img src=\"https://static001.geekbang.org/resource/image/3c/cc/3c0c98741275beb7bdf5d6333b0c91cc.jpg?wh=1248x1456\" alt=\"\"></p><p>有了我们自己封装的 Context 之后，控制器就非常简化了。把框架定义的 ControllerHandler 放在框架目录下的controller.go文件中：</p><pre><code class=\"language-go\">type ControllerHandler func(c *Context) error\n</code></pre><p>把处理业务的控制器放在业务目录下的controller.go文件中：</p><pre><code class=\"language-go\">func FooControllerHandler(ctx *framework.Context) error {\n\treturn ctx.Json(200, map[string]interface{}{\n\t\t\"code\": 0,\n\t})\n}\n</code></pre><p>参数只有一个 framework.Context，是不是清爽很多，这都归功于刚完成的自定义 Context。</p><h2>为单个请求设置超时</h2><p>上面我们封装了自定义的 Context，从设计层面实现了标准库的Context。下面回到我们这节课核心要解决的问题，为单个请求设置超时。</p><p>如何使用自定义 Context 设置超时呢？结合前面分析的标准库思路，我们三步走完成：</p><ol>\n<li>继承 request 的 Context，创建出一个设置超时时间的 Context；</li>\n<li>创建一个新的 Goroutine 来处理具体的业务逻辑；</li>\n<li>设计事件处理顺序，当前 Goroutine 监听超时时间 Contex 的 Done()事件，和具体的业务处理结束事件，哪个先到就先处理哪个。</li>\n</ol><p>理清步骤，我们就可以在业务的controller.go文件中完成业务逻辑了。<strong>第一步生成一个超时的 Context</strong>：</p><pre><code class=\"language-go\">durationCtx, cancel := context.WithTimeout(c.BaseContext(), time.Duration(1*time.Second))\n// 这里记得当所有事情处理结束后调用 cancel，告知 durationCtx 的后续 Context 结束\ndefer cancel()\n</code></pre><p>这里为了最终在浏览器做验证，我设置超时事件为1s，这样最终验证的时候，最长等待1s 就可以知道超时是否生效。</p><p><strong>第二步创建一个新的 Goroutine 来处理业务逻辑</strong>：</p><pre><code class=\"language-go\">finish := make(chan struct{}, 1)\n\ngo func() {\n\t\t...\n\t\t// 这里做具体的业务\n\t\ttime.Sleep(10 * time.Second)\n        c.Json(200, \"ok\")\n        ...\n        // 新的 goroutine 结束的时候通过一个 finish 通道告知父 goroutine\n\t\tfinish &lt;- struct{}{}\n}()\n</code></pre><p>为了最终的验证效果，我们使用time.Sleep将新 Goroutine 的业务逻辑事件人为往后延迟了10s，再输出“ok”，这样最终验证的时候，效果比较明显，因为前面的超时设置会在1s生效了，浏览器就有表现了。</p><p><strong>到这里我们这里先不急着进入第三步，还有错误处理情况没有考虑到位</strong>。这个新创建的Goroutine如果出现未知异常怎么办？需要我们额外捕获吗？</p><p>其实在 Golang 的设计中，每个 Goroutine 都是独立存在的，父 Goroutine 一旦使用 Go 关键字开启了一个子 Goroutine，父子 Goroutine 就是平等存在的，他们互相不能干扰。而在异常面前，所有 Goroutine 的异常都需要自己管理，不会存在父 Goroutine 捕获子 Goroutine 异常的操作。</p><p>所以切记：在 Golang 中，每个 Goroutine 创建的时候，我们要使用 defer 和 recover 关键字为当前 Goroutine 捕获 panic 异常，并进行处理，否则，任意一处 panic 就会导致整个进程崩溃！</p><p>这里你可以标个重点，面试会经常被问到。</p><p>搞清楚这一点，<strong>我们回看第二步，做完具体业务逻辑就结束是不行的，还需要处理 panic</strong>。所以这个 Goroutine 应该要有两个 channel 对外传递事件：</p><pre><code class=\"language-go\">// 这个 channal 负责通知结束\nfinish := make(chan struct{}, 1)\n// 这个 channel 负责通知 panic 异常\npanicChan := make(chan interface{}, 1)\n\ngo func() {\n        // 这里增加异常处理\n\t\tdefer func() {\n\t\t\tif p := recover(); p != nil {\n\t\t\t\tpanicChan &lt;- p\n\t\t\t}\n\t\t}()\n\t\t// 这里做具体的业务\n\t\ttime.Sleep(10 * time.Second)\n        c.Json(200, \"ok\")\n        ...\n        // 新的 goroutine 结束的时候通过一个 finish 通道告知父 goroutine\n\t\tfinish &lt;- struct{}{}\n}(）\n</code></pre><p>现在第二步才算完成了，我们继续写第三步监听。使用 select 关键字来监听三个事件：异常事件、结束事件、超时事件。</p><pre><code class=\"language-go\">  select {\n    // 监听 panic\n\tcase p := &lt;-panicChan:\n\t\t...\n        c.Json(500, \"panic\")\n    // 监听结束事件\n\tcase &lt;-finish:\n\t\t...\n        fmt.Println(\"finish\")\n    // 监听超时事件\n\tcase &lt;-durationCtx.Done():\n\t\t...\n        c.Json(500, \"time out\")\n\t}\n</code></pre><p>接收到结束事件，只需要打印日志，但是，在接收到异常事件和超时事件的时候，我们希望告知浏览器前端“异常或者超时了”，所以会使用 c.Json 来返回一个字符串信息。</p><p>三步走到这里就完成了对某个请求的超时设置，你可以通过 go build、go run 尝试启动下这个服务。如果你在浏览器开启一个请求之后，浏览器不会等候事件处理 10s，而在等待我们设置的超时事件 1s 后，页面显示“time out”就结束这个请求了，就说明我们为某个事件设置的超时生效了。</p><h2>边界场景</h2><p>到这里，我们的超时逻辑设置就结束且生效了。但是，这样的代码逻辑只能算是及格，为什么这么说呢？因为它并没有覆盖所有的场景。</p><p>我们的代码逻辑要再严谨一些，<strong>把边界场景也考虑进来</strong>。这里有两种可能：</p><ol>\n<li>异常事件、超时事件触发时，需要往 responseWriter 中写入信息，这个时候如果有其他 Goroutine 也要操作 responseWriter，会不会导致 responseWriter 中的信息出现乱序？</li>\n<li>超时事件触发结束之后，已经往 responseWriter 中写入信息了，这个时候如果有其他 Goroutine 也要操作 responseWriter， 会不会导致 responseWriter 中的信息重复写入？</li>\n</ol><p>你先分析第一个问题，是很有可能出现的。方案不难想到，我们要保证在事件处理结束之前，不允许任何其他 Goroutine 操作 responseWriter，这里可以使用一个锁（sync.Mutex）对 responseWriter 进行写保护。</p><p>在框架文件夹的context.go中对Context结构进行一些设置：</p><pre><code class=\"language-go\">type Context struct {\n\t// 写保护机制\n\twriterMux&nbsp; *sync.Mutex\n}\n\n// 对外暴露锁\nfunc (ctx *Context) WriterMux() *sync.Mutex {\n\treturn ctx.writerMux\n}\n</code></pre><p>在刚才写的业务文件夹controller.go 中也进行对应的修改：</p><pre><code>func FooControllerHandler(c *framework.Context) error {\n\t...\n    // 请求监听的时候增加锁机制\n\tselect {\n\tcase p := &lt;-panicChan:\n\t\tc.WriterMux().Lock()\n\t\tdefer c.WriterMux().Unlock()\n\t\t...\n\t\tc.Json(500, &quot;panic&quot;)\n\tcase &lt;-finish:\n        ...\n\t\tfmt.Println(&quot;finish&quot;)\n\tcase &lt;-durationCtx.Done():\n\t\tc.WriterMux().Lock()\n\t\tdefer c.WriterMux().Unlock()\n\t\tc.Json(500, &quot;time out&quot;)\n\t\tc.SetTimeout()\n\t}\n\treturn nil\n}\n</code></pre><p>那第二个问题怎么处理，我提供一个方案。我们可以<strong>设计一个标记</strong>，当发生超时的时候，设置标记位为 true，在 Context 提供的 response 输出函数中，先读取标记位；当标记位为 true，表示已经有输出了，不需要再进行任何的 response 设置了。</p><p>同样在框架文件夹中修改context.go：</p><pre><code class=\"language-go\">type Context struct {\n    ...\n\t// 是否超时标记位\n\thasTimeout bool\n\t...\n}\n\nfunc (ctx *Context) SetHasTimeout() {\n\tctx.hasTimeout = true\n}\n\nfunc (ctx *Context) Json(status int, obj interface{}) error {\n\tif ctx.HasTimeout() {\n\t\treturn nil\n\t}\n\t...\n}\n</code></pre><p>在业务文件夹中修改controller.go：</p><pre><code>func FooControllerHandler(c *framework.Context) error {\n\t...\n\tselect {\n\tcase p := &lt;-panicChan:\n\t\t...\n\tcase &lt;-finish:\n\t\tfmt.Println(&quot;finish&quot;)\n\tcase &lt;-durationCtx.Done():\n\t\tc.WriterMux().Lock()\n\t\tdefer c.WriterMux().Unlock()\n\t\tc.Json(500, &quot;time out&quot;)\n        // 这里记得设置标记为\n\t\tc.SetHasTimeout()\n\t}\n\treturn nil\n}\n</code></pre><p>好了，到了这里，我们就完成了请求超时设置，并且考虑了边界场景。</p><p>剩下的验证部分，我们写一个简单的路由函数，将这个控制器路由在业务文件夹中创建一个route.go:</p><pre><code class=\"language-go\">func registerRouter(core *framework.Core) {\n  // 设置控制器\n   core.Get(\"foo\", FooControllerHandler)\n}\n</code></pre><p>并修改main.go：</p><pre><code class=\"language-go\">func main() {\n   ...\n   // 设置路由\n   registerRouter(core)\n   ...\n}\n</code></pre><p>就可以运行了。完整代码照旧放在GitHub的 <a href=\"https://github.com/gohade/coredemo/tree/geekbang/02\">geekbang/02 分支</a>上了。<br>\n<img src=\"https://static001.geekbang.org/resource/image/72/e4/7277357c506bc95b9155d6a35cdee3e4.png?wh=714x656\" alt=\"\"></p><h2>小结</h2><p>今天，我们定义了一个属于自己框架的 Context，它有两个功能：在各个 Goroutine 间传递数据；控制各个 Goroutine，也就是是超时控制。</p><p>这个自定义 Context 结构封装了 net/http 标准库主逻辑流程产生的 Context，与主逻辑流程完美对接。它除了实现了标准库的 Context 接口，还封装了 request 和 response 的请求。你实现好了 Context 之后，就会发现它跟百宝箱一样，在处理具体的业务逻辑的时候，如果需要获取参数、设置返回值等，都可以通过 Context 获取。</p><p>封装后，我们通过三步走为请求设置超时，并且完美地考虑了各种边界场景。</p><p>你是不是觉得我们这一路要思考的点太多了，又是异常，又是边界场景。但是这里我要特别说明，其实真正要衡量框架的优劣，要看什么？就是看细节。</p><p><strong>所有框架的基本原理和基本思路都差不多，但是在细节方面，各个框架思考的程度是不一样的，才导致使用感天差地别</strong>。所以如果你想完成一个真正生产能用得上的框架，这些边界场景、异常分支，都要充分考虑清楚。</p><h2>思考题</h2><p>在context库的官方文档中有这么一句话：</p><blockquote>\n<p>Do not store Contexts inside a struct type;<br>\ninstead, pass a Context explicitly to each function that needs it.<br>\nThe Context should be the first parameter.</p>\n</blockquote><p>大意是说建议我们设计函数的时候，将Context作为函数的第一个参数。你能理解官方为什么如此建议，有哪些好处？可以结合你的工作经验，说说自己的看法。</p><p>欢迎在留言区分享你的思考，畅所欲言。如果你觉得今天的内容有所帮助，也欢迎你分享给你身边的朋友，邀他一起学习。</p>","comments":[{"had_liked":false,"id":312221,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":true,"comment_ctime":1631690675,"is_pvip":true,"replies":[{"id":"113319","content":"context作为第一个参数在实际工作中是非常有用的一个实践。不管我们是设计一个函数，或者设计一个结构体的方法，或者服务的时候，我们一旦养成了将第一个参数作为context的习惯，那么这个context在相互调用的时候，就会传递下去。这里会带来几个好处：<br><br>1 链路通用内容传递。context中是可以通过WithValue方法将某些字段封装在context里面，并且传递的。最常见的字段是traceId, spanId。而在日志中带上这些ID，再将日志收集起来，我们就能进行分析了。这也是我们现在比较流行的全链路分析的原理。<br><br>2 链路统一设置超时。我们在定义一个服务的时候，将第一个参数固定设置为context，则可以通过这个context进行超时设置，而这个超时设置，是由上游调用方进行设置，这样就形成了一个统一的超时设置机制。比如A设置了5s超时，自己使用了1s，传递到下游B服务的时候，设置B的context超时时长为4s。这样全链路超时传递下去，就能保持统一设置了。<br><br>是的，请求控制和请求实现混在一起的情况，后面引入middleware会改掉的。","user_name":"作者回复","user_name_real":"叶剑峰","uid":"1069186","ctime":1632015895,"ip_address":"","comment_id":312221,"utype":1}],"discussion_count":0,"race_medal":0,"score":"9.2233721243858002e+18","product_id":100090601,"comment_content":"“context作为函数的第一个参数”大概有两层意思。一是作为函数的参数传入。这个应该是针对在一个struct的多个方法中共享一个context的情况说的。因为每个方法都有可能需要创建子context，所以不应该共享而是应该显式传递。二是作为第一个参数。这个多半是一种约定。在支持可变长参数的语言中，固定参数只能出现在可变参数的前面。而作为与业务逻辑关系不大的context，出现在第一个的位置也方便也其他参数作区分。<br><br>说到与业务逻辑关系不大，个人以为显式传递context是对业务逻辑的侵入，更别提单元测试的时候还需要适当地mock掉。目前代码里请求控制和请求实现混在一起的情况后面应该会改掉吧？","like_count":20},{"had_liked":false,"id":312529,"user_name":"zhao","can_delete":false,"product_type":"c1","uid":1033023,"ip_address":"","ucode":"2809350DED2289","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/3f/d96c1b97.jpg","comment_is_top":false,"comment_ctime":1631849441,"is_pvip":true,"replies":[{"id":"113320","content":"你好，是的context的封装和gin的代码很像，本质就是通过自己开发对开源的gin会有进一步理解。","user_name":"作者回复","user_name_real":"叶剑峰","uid":"1069186","ctime":1632016015,"ip_address":"","comment_id":312529,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31696620513","product_id":100090601,"comment_content":"代码里面context的封装跟gin的源代码真是像极了，对照来看，对框架的理解又加深了一些。","like_count":7,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527002,"discussion_content":"你好，是的context的封装和gin的代码很像，本质就是通过自己开发对开源的gin会有进一步理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632016015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033023,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/3f/d96c1b97.jpg","nickname":"zhao","note":"","ucode":"2809350DED2289","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394714,"discussion_content":"想多听一些设计上的见解，因为老师更有经验，看到的更多也更深刻些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632016461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335600,"user_name":"ゝ骑着小车去兜风。","can_delete":false,"product_type":"c1","uid":2600957,"ip_address":"","ucode":"35F9E5360DF42C","user_header":"https://static001.geekbang.org/account/avatar/00/27/af/fd/a1708649.jpg","comment_is_top":false,"comment_ctime":1645600951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10235535543","product_id":100090601,"comment_content":"老师这个课程真的全是干货，感觉看了前两章都已经值回票价了","like_count":2},{"had_liked":false,"id":333373,"user_name":"Geek_cbab11","can_delete":false,"product_type":"c1","uid":2218967,"ip_address":"","ucode":"EA8C50D4C71419","user_header":"","comment_is_top":false,"comment_ctime":1644313492,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10234248084","product_id":100090601,"comment_content":"异常事件、超时事件触发时，需要往 responseWriter 中写入信息，这个时候如果有其他 Goroutine 也要操作 responseWriter，会不会导致 responseWriter 中的信息出现乱序？<br>超时事件触发结束之后，已经往 responseWriter 中写入信息了，这个时候如果有其他 Goroutine 也要操作 responseWriter， 会不会导致 responseWriter 中的信息重复写入？<br><br>问题1：这两个问题说的其他goroutine是哪些goroutine？<br>问题2：为什么controller中的goroutine没有进行Lock操作？<br>问题3：在Unlock之前已经进行了调用了Write方法，难道此次请求还没有结束吗？如果结束了为什么还允许继续写入呢？<br><br>还望老师解答一下。感谢！","like_count":2,"discussions":[{"author":{"id":1718011,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/36/fb/b480f2ac.jpg","nickname":"人间理想","note":"","ucode":"0D6A4C402D7CBD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574880,"discussion_content":"问题1我也很困惑，我感觉是不是这种情况：\n主goroutine写responseWriter,子responseWriter处理业务逻辑，也操作了responseWriter，那就会造成信息乱序吧？\n我感觉可以看一下gin框架是如何处理加锁的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654418634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1299673,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d4/d9/c3296187.jpg","nickname":"airmy丶","note":"","ucode":"41959C9F5B4B65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1718011,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/36/fb/b480f2ac.jpg","nickname":"人间理想","note":"","ucode":"0D6A4C402D7CBD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":587735,"discussion_content":"对于问题1，其实不难理解也很容易复线，你把下面的lock去掉，然后把超时时间和等待时间设置成一样的时间，多调用几次路由就会发现有的时候完成和超时会一起出现的。其实其他goroutine也可以是指当前执行FooControllerHandler的协程和FooControllerHandler中通过 go 新起的协程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663244905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":574880,"ip_address":"广东"},"score":587735,"extra":""}]},{"author":{"id":2946200,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/GtVZZZUffeF3icePwpAR84HDReEaF5VzrqUEXdDlb1KtBq8mSe7nicN0k7NpFEPD2kwzSn6RgveVdRPeN3Nc2icjg/132","nickname":"Geek_5cdbc4","note":"","ucode":"63F811AD7639B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569850,"discussion_content":"您有答案了吗，我也有疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651577526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349932,"user_name":"静且慢且远","can_delete":false,"product_type":"c1","uid":2767251,"ip_address":"北京","ucode":"4C07047F052BB4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/93/bcafe00f.jpg","comment_is_top":false,"comment_ctime":1656462242,"is_pvip":true,"replies":[{"id":"128657","content":"感谢","user_name":"作者回复","user_name_real":"编辑","uid":"1069186","ctime":1659912471,"ip_address":"北京","comment_id":349932,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5951429538","product_id":100090601,"comment_content":"真的很好，我读了四遍，才读懂老师代码的强大。","like_count":1,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583071,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659912471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345073,"user_name":"轻剑切重剑","can_delete":false,"product_type":"c1","uid":1598943,"ip_address":"","ucode":"D7B3A8E4EF9F78","user_header":"https://static001.geekbang.org/account/avatar/00/18/65/df/11406608.jpg","comment_is_top":false,"comment_ctime":1652002582,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5946969878","product_id":100090601,"comment_content":"老师好，请教下，为什么在超时之后 case &lt;-durationCtx.Done()，不添加 c.Abort() ？","like_count":1},{"had_liked":false,"id":323437,"user_name":"我在睡觉","can_delete":false,"product_type":"c1","uid":2179383,"ip_address":"","ucode":"6503B611151D3C","user_header":"https://static001.geekbang.org/account/avatar/00/21/41/37/b89f3d67.jpg","comment_is_top":false,"comment_ctime":1637903763,"is_pvip":false,"replies":[{"id":"119259","content":"有例子么？一个请求应该只会运行一次的，有更多信息没","user_name":"作者回复","user_name_real":"编辑","uid":"1069186","ctime":1640223373,"ip_address":"","comment_id":323437,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5932871059","product_id":100090601,"comment_content":"你好老师，这个代码运行之后，一次HTTP请求过来，ServeHTTP函数会被调用两次，请问是为什么？<br>","like_count":1,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540965,"discussion_content":"有例子么？一个请求应该只会运行一次的，有更多信息没","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640223373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2624452,"avatar":"https://static001.geekbang.org/account/avatar/00/28/0b/c4/341c876e.jpg","nickname":"012345","note":"","ucode":"D3788A7CB178DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":541031,"discussion_content":"我刚刚试过了，这个应该是浏览器的问题，用浏览器请求，会先请求/foo，再请求/favicon.ico。检测方案： 可以在/controller中打印出url检查。解决方案：使用postman或者别的客户端发送请求！！","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1640238550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540965,"ip_address":""},"score":541031,"extra":""}]},{"author":{"id":1396135,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/a7/5c6efd4d.jpg","nickname":"就学45分钟","note":"","ucode":"E3A1BDF08046E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536929,"discussion_content":"我也是，有大佬知道为啥，记得告诉我一声~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638893204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534728,"discussion_content":"我也发现了 我刚刚测试了一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638263537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318167,"user_name":"盘胧","can_delete":false,"product_type":"c1","uid":1650748,"ip_address":"","ucode":"5386CC4C92ECC2","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","comment_is_top":false,"comment_ctime":1635168850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5930136146","product_id":100090601,"comment_content":"return rdb.Set(ctx, &quot;key&quot;, &quot;value&quot;, 0).Err()  老师 这个方法报错了欸：<br>源码： func (c *cmdable) Set(key string, value interface{}, expiration time.Duration) *StatusCmd {...}<br>好像多了一个参数啊","like_count":1},{"had_liked":false,"id":313711,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1632627399,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5927594695","product_id":100090601,"comment_content":"不错不错 有深度","like_count":1},{"had_liked":false,"id":313223,"user_name":"2345","can_delete":false,"product_type":"c1","uid":2689945,"ip_address":"","ucode":"C18D251C344A78","user_header":"","comment_is_top":false,"comment_ctime":1632315838,"is_pvip":false,"replies":[{"id":"113479","content":"感谢支持，欢迎继续参与。","user_name":"作者回复","user_name_real":"多少","uid":"2547771","ctime":1632361670,"ip_address":"","comment_id":313223,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5927283134","product_id":100090601,"comment_content":"文章写得很好，赞一个，比较有深度","like_count":1,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527283,"discussion_content":"感谢支持，欢迎继续参与。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632361670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313183,"user_name":"0mfg","can_delete":false,"product_type":"c1","uid":1393948,"ip_address":"","ucode":"D83530DB25D25A","user_header":"","comment_is_top":false,"comment_ctime":1632302947,"is_pvip":false,"replies":[{"id":"113504","content":"https:&#47;&#47;github.com&#47;gohade&#47;coredemo&#47;blob&#47;geekbang&#47;02&#47;route.go 确认下你的目录下有route.go文件么","user_name":"作者回复","user_name_real":"叶剑峰","uid":"1069186","ctime":1632409225,"ip_address":"","comment_id":313183,"utype":1}],"discussion_count":11,"race_medal":0,"score":"5927270243","product_id":100090601,"comment_content":"叶老师您好，把分支2 git下来尝试运行，报错如下，求指教，谢谢<br># command-line-arguments<br>.\\main.go:10:2: undefined: registerRouter<br>","like_count":1,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527264,"discussion_content":"https://github.com/gohade/coredemo/blob/geekbang/02/route.go 确认下你的目录下有route.go文件么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632409225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230508,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c6/ac/347e8913.jpg","nickname":"方新","note":"","ucode":"C96FDEFB70ED96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406536,"discussion_content":"其实主要是包名的问题，在main包下一般只有main.go文件，我们执行go run main.go就是如此，这样会导致main包下的其他文件加载不进来，解决方法最好是创建其他目录存放功能包，比如route.go 存放在 route目录。controller.go 存放在controller目录","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1634786562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2770254,"avatar":"","nickname":"Geek_260922","note":"","ucode":"CC87F6E04F9ED2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1230508,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c6/ac/347e8913.jpg","nickname":"方新","note":"","ucode":"C96FDEFB70ED96","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412252,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636118023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":406536,"ip_address":""},"score":412252,"extra":""},{"author":{"id":1396135,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/a7/5c6efd4d.jpg","nickname":"就学45分钟","note":"","ucode":"E3A1BDF08046E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1230508,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c6/ac/347e8913.jpg","nickname":"方新","note":"","ucode":"C96FDEFB70ED96","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536890,"discussion_content":"我觉得也是，基本每见过 main 包有多个文件的，一般就只有一个 main.go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638888851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":406536,"ip_address":""},"score":536890,"extra":""}]},{"author":{"id":1554590,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b8/9e/4a1749b1.jpg","nickname":"mrc","note":"","ucode":"A92B8FE49D52F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397125,"discussion_content":"go run *.go","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1632567464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1656956,"avatar":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","nickname":"coder","note":"","ucode":"3A0940EBF94577","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1554590,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b8/9e/4a1749b1.jpg","nickname":"mrc","note":"","ucode":"A92B8FE49D52F2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404362,"discussion_content":"秀啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634292923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":397125,"ip_address":""},"score":404362,"extra":""},{"author":{"id":2770254,"avatar":"","nickname":"Geek_260922","note":"","ucode":"CC87F6E04F9ED2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1554590,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b8/9e/4a1749b1.jpg","nickname":"mrc","note":"","ucode":"A92B8FE49D52F2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412248,"discussion_content":"棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636117511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":397125,"ip_address":""},"score":412248,"extra":""}]},{"author":{"id":2559238,"avatar":"https://static001.geekbang.org/account/avatar/00/27/0d/06/970cc957.jpg","nickname":"Charles","note":"","ucode":"8ACBA423B5A505","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556649,"discussion_content":"windows下使用：go run main.go controller.go route.go\nlinux下使用：go run *.go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647436946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2164123,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oOSgaSW8MFRDx6da1bicY40IVg7hoDNjYlSuTeIg93aB3nuKedhbTa2HQhXpBJmN2w0xU9icvkTDZWMzL5NVicrYw/132","nickname":"伪钞","note":"","ucode":"7087364945A6B0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541304,"discussion_content":"windows下使用：go run main.go controller.go route.go\nlinux下使用：go run *.go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640327792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200884,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/f4/d086d90c.jpg","nickname":"Glowworm","note":"","ucode":"E0AC639A86B88E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534303,"discussion_content":"go run main.go controller.go route.go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638157802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2451542,"avatar":"https://static001.geekbang.org/account/avatar/00/25/68/56/6dc13c7b.jpg","nickname":"可爱又迷人的反派海豹","note":"","ucode":"22B185243D907F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399341,"discussion_content":"兄弟你解决了没 我也是这个问题\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632931763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313009,"user_name":"happy learn","can_delete":false,"product_type":"c1","uid":1738493,"ip_address":"","ucode":"BCE08C8E64A23E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qn1PDx7xA7jKFZr4vHibmsvoZ7bwUCzHTg3uywiaESCgFTTMibPpKdZOfrqTXtdQXxUJqFqmLAj5NoIFMJpYibbcOQ/132","comment_is_top":false,"comment_ctime":1632198169,"is_pvip":false,"replies":[{"id":"113509","content":"01梳理思维导图的时候说，接受一个新的请求连接时，会创建一个新结构，开启一个goroutine来服务。所以这两种说法其实是一致的","user_name":"作者回复","user_name_real":"多少","uid":"2547771","ctime":1632415085,"ip_address":"","comment_id":313009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5927165465","product_id":100090601,"comment_content":"到底是一个请求一个goroutine还是一个连接一个goroutine，前后两篇文章说的不一致","like_count":1,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527195,"discussion_content":"01梳理思维导图的时候说，接受一个新的请求连接时，会创建一个新结构，开启一个goroutine来服务。所以这两种说法其实是一致的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632415085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312684,"user_name":"恶魔果实","can_delete":false,"product_type":"c1","uid":1962297,"ip_address":"","ucode":"691CD833C984AC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","comment_is_top":false,"comment_ctime":1631940942,"is_pvip":false,"replies":[{"id":"113371","content":"这个例子举的确实不好。我的本意是如果a请求失败，整个上游可能有重试机制，导致其他的请求连接增加。<br><br>我这里可能换一个方式举例更好，下游超时导致上游连接数增加。已经联系编辑进行更新了。<br><br>谢谢提醒。","user_name":"作者回复","user_name_real":"叶剑峰","uid":"1069186","ctime":1632157036,"ip_address":"","comment_id":312684,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926908238","product_id":100090601,"comment_content":"为什么会导致服务b和服务c的瞬时请求加大？这里不是很理解。<br>a请求失败，但是b，c请求是成功的呀。","like_count":1,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527079,"discussion_content":"这个例子举的确实不好。我的本意是如果a请求失败，整个上游可能有重试机制，导致其他的请求连接增加。\n\n我这里可能换一个方式举例更好，下游超时导致上游连接数增加。已经联系编辑进行更新了。\n\n谢谢提醒。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632157036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360310,"user_name":"二十二桥枫别雨","can_delete":false,"product_type":"c1","uid":2748594,"ip_address":"安徽","ucode":"E70C7E2D943A06","user_header":"https://static001.geekbang.org/account/avatar/00/29/f0/b2/0dd8cfa6.jpg","comment_is_top":false,"comment_ctime":1666421608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666421608","product_id":100090601,"comment_content":"go func() {<br>\t\tdefer func() {<br>\t\t\tif p := recover(); p != nil {<br>\t\t\t\tpanicChan &lt;- p<br>\t\t\t}<br>\t\t}()<br>\t\t&#47;&#47; Do real action<br>\t\ttime.Sleep(10 * time.Second)<br>\t\tc.Json(200, &quot;ok&quot;)<br><br>\t\tfinish &lt;- struct{}{}<br>\t}()<br>这里的nil会报错<br>can not convert  nil to type any","like_count":0},{"had_liked":false,"id":357608,"user_name":"Asleep","can_delete":false,"product_type":"c1","uid":3180775,"ip_address":"广东","ucode":"FA8A4E8B2E6209","user_header":"https://static001.geekbang.org/account/avatar/00/30/88/e7/25ca895b.jpg","comment_is_top":false,"comment_ctime":1663474854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663474854","product_id":100090601,"comment_content":"文章里面解释 Done 的时候可以再清楚一点的，就是读取未关闭的 chan 是阻塞的，读取关闭的 chan 是阻塞的，所以才有了 Done 的设计","like_count":0},{"had_liked":false,"id":345910,"user_name":"Geek_0a631a","can_delete":false,"product_type":"c1","uid":2795211,"ip_address":"","ucode":"1BFC2E4712C6C2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/99U6LEL8nPN8VjibdSDTp5xTqwwHOSKmOvpBo4J8wvsjbHwYhHJGlmnIgNAt3EnIs1VPZVvQ0QxPwmogKD1XbMw/132","comment_is_top":false,"comment_ctime":1652691944,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1652691944","product_id":100090601,"comment_content":"老师，我有点疑惑，既然我们是想实现更好的context，为什么现有的context要包装request和responseWriter呢？","like_count":0,"discussions":[{"author":{"id":3054809,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/9c/d9/2ae42dd4.jpg","nickname":"菜是原罪","note":"","ucode":"CA8943147EB0CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580479,"discussion_content":"个人理解:因为在request中已经有Server创建好的context(附加了WithValue和WithCanlcle上下文,因为我们的ctx要能够处理请求,因此这些信息不可以舍弃,否则无法感知到请求中断或错误等),将其包装在我们自定义的ctx中,一个是我们可以很方便的实现Context接口(返回req中的context即可),另一方面我们可以将对req和response的操作都封装到ctx上来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658203842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340994,"user_name":"coconut","can_delete":false,"product_type":"c1","uid":2344081,"ip_address":"","ucode":"07B95C7A6AC2F7","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/91/a017bf72.jpg","comment_is_top":false,"comment_ctime":1649258721,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1649258721","product_id":100090601,"comment_content":"context不能设计成“全局的协程私有数据”吗？这样就不用作为第一个参数显式传递了。<br><br>我最近在看python的flask框架，它似乎就是这么干的。","like_count":0,"discussions":[{"author":{"id":2661301,"avatar":"https://static001.geekbang.org/account/avatar/00/28/9b/b5/53c56d6b.jpg","nickname":"长夏朔酒","note":"","ucode":"6F9942BAB8E055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585135,"discussion_content":"并不建议这么设计，业务参数还是建议使用外部存储","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661336705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333221,"user_name":"Juniper","can_delete":false,"product_type":"c1","uid":1174794,"ip_address":"","ucode":"1BC24554034BD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/0a/18201290.jpg","comment_is_top":false,"comment_ctime":1644220029,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1644220029","product_id":100090601,"comment_content":"<br>&#47;&#47; #region application&#47;json post<br><br>func (ctx *Context) BindJson(obj interface{}) error {<br>\tif ctx.request != nil {<br>\t\tbody, err := ioutil.ReadAll(ctx.request.Body)<br>\t\tif err != nil {<br>\t\t\treturn err<br>\t\t}<br>\t\tctx.request.Body = ioutil.NopCloser(bytes.NewBuffer(body))<br><br>\t\terr = json.Unmarshal(body, obj)<br>\t\tif err != nil {<br>\t\t\treturn err<br>\t\t}<br>\t} else {<br>\t\treturn errors.New(&quot;ctx.request empty&quot;)<br>\t}<br>\treturn nil<br>}<br><br>&#47;&#47; #endregion<br><br>这段代码中 ctx.request.Body = ioutil.NopCloser(bytes.NewBuffer(body))这行干嘛用的。ctx.request.Body 本身就是个io.ReadCloser类型，为什么读取了值之后，又重新赋值了","like_count":0,"discussions":[{"author":{"id":1362058,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c8/8a/7278c5f7.jpg","nickname":"波罗蜜","note":"","ucode":"A332FE4F2C8B93","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577879,"discussion_content":"ctx.request.Body 读取之后，后面再次读取就读不到了；\n这样重新赋值后，后续可以继续使用 ctx.request.Body","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1656401562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332251,"user_name":"yesterday","can_delete":false,"product_type":"c1","uid":1320293,"ip_address":"","ucode":"681CDE1288BFD6","user_header":"https://static001.geekbang.org/account/avatar/00/14/25/65/f04c6cfa.jpg","comment_is_top":false,"comment_ctime":1643112244,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1643112244","product_id":100090601,"comment_content":"设置路由的函数名为什么是core.Get不是core.Set啊，<br>这一步不是给c.route这个map添加新值吗。","like_count":0,"discussions":[{"author":{"id":1174794,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ed/0a/18201290.jpg","nickname":"Juniper","note":"","ucode":"1BC24554034BD3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549755,"discussion_content":"看了第三讲你就会知道答案了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644227129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323187,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1637756895,"is_pvip":false,"replies":[{"id":"119260","content":"是需要有的，如果你的子goroutine没有监听ctx.Done主动结束自己的逻辑，是无法主动停止的","user_name":"作者回复","user_name_real":"编辑","uid":"1069186","ctime":1640223428,"ip_address":"","comment_id":323187,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1637756895","product_id":100090601,"comment_content":"在发出取消信号的时候，是不是所有子goroutine中都得有监听ctx.Done()并主动结束goroutine的代码逻辑，才能让所有gourutine都结束，还是说，不需要这样的逻辑所有就可以实现呢","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540966,"discussion_content":"是需要有的，如果你的子goroutine没有监听ctx.Done主动结束自己的逻辑，是无法主动停止的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640223428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396135,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/a7/5c6efd4d.jpg","nickname":"就学45分钟","note":"","ucode":"E3A1BDF08046E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536814,"discussion_content":"goroutine 只能自己主动 return 才能退出，所以子 goroutine 必须监听 ctx.Done()","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638874218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320225,"user_name":"Geek_260922","can_delete":false,"product_type":"c1","uid":2770254,"ip_address":"","ucode":"CC87F6E04F9ED2","user_header":"","comment_is_top":false,"comment_ctime":1636160985,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1636160985","product_id":100090601,"comment_content":"framework\\core.go里的<br>func (c *Core) Get(url string, handler ControllerHandler) {<br>\tc.router[url] = handler<br>}<br>方法名是不是改为SET更为贴切。","like_count":0,"discussions":[{"author":{"id":1396135,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/a7/5c6efd4d.jpg","nickname":"就学45分钟","note":"","ucode":"E3A1BDF08046E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536923,"discussion_content":"这个 Get 应该指的是 HTTP GET 方法吧，类似于 gin 中的 r.Get() 方法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638892426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318748,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":1600291,"ip_address":"","ucode":"18AA1D86F7F4CE","user_header":"https://static001.geekbang.org/account/avatar/00/18/6b/23/ddad5282.jpg","comment_is_top":false,"comment_ctime":1635410253,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1635410253","product_id":100090601,"comment_content":"我在写的时候， 有一点不明白，想老师解答一下。<br>这个QueryAll方法：<br>func (ctx *Context) QueryAll() map[string][]string {<br>\tif ctx.request != nil {<br>\t\treturn map[string][]string(ctx.request.URL.Query()) &#47;&#47;就是这里不明白， 为什么返回是【map[string][]string(ctx.request.URL.Query())】 这个写法，这个写法不太明白。我返回的时候，直接返回【c.Request.URL.Query()】， 我试过了， 效果应该是一样的。<br>\t}<br>\treturn map[string][]string{}<br>}<br><br><br><br><br><br><br><br><br><br>","like_count":0,"discussions":[{"author":{"id":1396135,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/a7/5c6efd4d.jpg","nickname":"就学45分钟","note":"","ucode":"E3A1BDF08046E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536928,"discussion_content":"可以不用显示的做类型强制转化的，使用 Goland IDE 阅读代码时，可以看到 map[string][]string 直接是置灰色的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638892843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317568,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":1600291,"ip_address":"","ucode":"18AA1D86F7F4CE","user_header":"https://static001.geekbang.org/account/avatar/00/18/6b/23/ddad5282.jpg","comment_is_top":false,"comment_ctime":1634863506,"is_pvip":true,"replies":[{"id":"115347","content":"感谢回答。是的，现在已经成为约定了。大家都这么做了。<br>","user_name":"作者回复","comment_id":317568,"uid":"1069186","ip_address":"","utype":1,"ctime":1635204137,"user_name_real":"叶剑峰"}],"discussion_count":1,"race_medal":0,"score":"1634863506","product_id":100090601,"comment_content":"我们公司用的是go micro微服务框架，在写所有的功能的时候，都是第一个参数是context，用的也是第三方的版本。平时使用时，会在ctx里流转很多必要的信息，比如认证信息等，都会存储进去。我觉得一是流转数据方便，在一个应该是一种标准约束，第三就是评论区里说的控制超时。","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528870,"discussion_content":"感谢回答。是的，现在已经成为约定了。大家都这么做了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635204137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316661,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1634480396,"is_pvip":true,"replies":[{"id":"114783","content":"是的，通过context来传递数据，比如traceid是context的作用","user_name":"作者回复","comment_id":316661,"uid":"1069186","ip_address":"","utype":1,"ctime":1634687478,"user_name_real":"叶剑峰"}],"discussion_count":1,"race_medal":0,"score":"1634480396","product_id":100090601,"comment_content":"1 通过传值实现数据共享。<br>2 第一个参数也算是一种约定，防止参数错传。","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528453,"discussion_content":"是的，通过context来传递数据，比如traceid是context的作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634687478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316656,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1634478106,"is_pvip":true,"replies":[{"id":"114784","content":"比如代码中的        c.Json(500, &quot;time out&quot;)<br><br>就是往responsewriter中写入信息","user_name":"作者回复","comment_id":316656,"uid":"1069186","ip_address":"","utype":1,"ctime":1634687625,"user_name_real":"叶剑峰"}],"discussion_count":1,"race_medal":0,"score":"1634478106","product_id":100090601,"comment_content":"【超时事件触发结束之后，已经往 responseWriter 中写入信息了，这个时候如果有其他 Goroutine 也要操作 responseWriter， 会不会导致 responseWriter 中的信息重复写入？】这句话不是很理解，为什么说超时事件触发结束后，已写入信息了呢？","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528450,"discussion_content":"比如代码中的        c.Json(500, &amp;quot;time out&amp;quot;)\n\n就是往responsewriter中写入信息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634687625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316655,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1634478003,"is_pvip":true,"replies":[{"id":"114785","content":"这里的意思是超时返回了500，并且写入了字符串timeout，这个时候其实不希望再写入其他内容了。如果有goroutine再往里面写，不是我们希望的","user_name":"作者回复","comment_id":316655,"uid":"1069186","ip_address":"","utype":1,"ctime":1634687868,"user_name_real":"叶剑峰"}],"discussion_count":1,"race_medal":0,"score":"1634478003","product_id":100090601,"comment_content":"你好，『超时事件触发结束之后，已经往 responseWriter 中写入信息了，这个时候如果有其他 Goroutine 也要操作 responseWriter， 会不会导致 responseWriter 中的信息重复写入？』请问为什么会提到重复写入呢？","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528449,"discussion_content":"这里的意思是超时返回了500，并且写入了字符串timeout，这个时候其实不希望再写入其他内容了。如果有goroutine再往里面写，不是我们希望的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634687868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316600,"user_name":"邵年紧时","can_delete":false,"product_type":"c1","uid":1156097,"ip_address":"","ucode":"608A830659EB93","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/01/ed3218c4.jpg","comment_is_top":false,"comment_ctime":1634443629,"is_pvip":false,"replies":[{"id":"114835","content":"durationCtx, cancel := context.WithTimeout(c.BaseContext(), <br><br><br>你是说这个逻辑么，这里是设置超时的context","user_name":"作者回复","comment_id":316600,"uid":"1069186","ip_address":"","utype":1,"ctime":1634691590,"user_name_real":"叶剑峰"}],"discussion_count":2,"race_medal":0,"score":"1634443629","product_id":100090601,"comment_content":"没太明白，这节内容设置超时context为什么要copy自主逻辑流程产生的Context；不用应该也可以啊；从代码上还没看到带来的好处。","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528429,"discussion_content":"durationCtx, cancel := context.WithTimeout(c.BaseContext(), \n\n\n你是说这个逻辑么，这里是设置超时的context","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634691590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315439,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfYfHAvhZmsKiauxPAt9T2D7ntiaZrP8mial07CAdWiaCEJMawZwficjL3PFvZl35WM7D6ibcYf6miaERJQ/132","nickname":"晚枫","note":"","ucode":"B0EF439E28BF35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573644,"discussion_content":"durationCtx, cancel := context.WithTimeout(context.Background(), time.Duration(1*time.Second))\n老师，直接用context.Background()也可以啊，这里Context结构中封装的ctx 感觉没啥用啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653562725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315803,"user_name":"john-jy","can_delete":false,"product_type":"c1","uid":1116514,"ip_address":"","ucode":"6B5884409B52C9","user_header":"","comment_is_top":false,"comment_ctime":1634005025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634005025","product_id":100090601,"comment_content":"老师问一下2个问题：<br>1.func FooControllerHandler(c *framework.Context) error {<br>\tfinish := make(chan struct{}, 1)<br>\tpanicChan := make(chan interface{}, 1)<br><br>\tdurationCtx, cancel := context.WithTimeout(c.BaseContext(), time.Duration(5*time.Second))<br>\tdefer cancel()<br><br>\tfmt.Println(&quot;receive a request from:&quot;, c.GetRequest().RemoteAddr, c.GetRequest().Header)<br>\t&#47;&#47; mu := sync.Mutex{}<br>\tgo func() {<br>\t\tdefer func() {<br>\t\t\tif p := recover(); p != nil {<br>\t\t\t\tpanicChan &lt;- p<br>\t\t\t}<br>\t\t}()<br>\t\t&#47;&#47; Do real action<br>\t\ttime.Sleep(2 * time.Second)<br>\t\tc.Json(200, &quot;ok&quot;)<br><br>\t\tfinish &lt;- struct{}{}<br>\t}()<br>    ...<br>}<br>这儿开启一个携程去处理，是针对长链接这种情况吧？<br>2.问您一下go net&#47;http包中client的问题。<br>func TestClient(t *testing.T)  {<br>\tc := &amp;http.Client{}<br>\treq, err := http.NewRequest(&quot;Get&quot;, &quot;http:&#47;&#47;127.0.0.1:8888&#47;foo&quot;, nil)<br>\tif err != nil {<br>\t\tpanic(err)<br>\t}<br><br>\tfor i := 0; i &lt; 5; i++ {<br>\t\tresp, _ := c.Do(req)<br>\t\tioutil.ReadAll(resp.Body) &#47;&#47; 关键这一行<br>\t}<br>}<br>我创建了一个client, 如果代码里有ioutil.ReadAll(resp.Body)， 则连续5个请求都是同一个连接， 如果把这行注释，则每次请求都是不同的链接， 这是什么原因呢？ 下面是服务端的输出：<br>不注释时的情况，远程端口一样，：<br>receive a request from: 127.0.0.1:58494 map[Accept-Encoding:[gzip] User-Agent:[Go-http-client&#47;1.1]]<br>receive a request from: 127.0.0.1:58494 map[Accept-Encoding:[gzip] User-Agent:[Go-http-client&#47;1.1]]<br>注释时的情况, 发现远程端口不一样：<br>receive a request from: 127.0.0.1:58776 map[Accept-Encoding:[gzip] User-Agent:[Go-http-client&#47;1.1]]<br>receive a request from: 127.0.0.1:58781 map[Accept-Encoding:[gzip] User-Agent:[Go-http-client&#47;1.1]]<br>请问是什么原因呢？<br>","like_count":0},{"had_liked":false,"id":315517,"user_name":"清睿夕","can_delete":false,"product_type":"c1","uid":1857403,"ip_address":"","ucode":"026C9E6337CDCB","user_header":"https://static001.geekbang.org/account/avatar/00/1c/57/7b/b31da1b2.jpg","comment_is_top":false,"comment_ctime":1633914901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633914901","product_id":100090601,"comment_content":"如果要在框架中请求第三方的接口，这种怎么做会比较好点","like_count":0},{"had_liked":false,"id":314390,"user_name":"周寿长","can_delete":false,"product_type":"c1","uid":1203776,"ip_address":"","ucode":"022185DDB6B5D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/40/0716592b.jpg","comment_is_top":false,"comment_ctime":1632994519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632994519","product_id":100090601,"comment_content":"(*Context) FormAll函数有bug吧，会获取不到值。<br><br>&#47;&#47; PostForm contains the parsed form data from PATCH, POST<br>\t&#47;&#47; or PUT body parameters.<br>\t&#47;&#47;<br>\t&#47;&#47; This field is only available after ParseForm is called.<br>\t&#47;&#47; The HTTP client ignores PostForm and uses Body instead.<br>\tPostForm url.Values","like_count":0},{"had_liked":false,"id":313448,"user_name":"Derek","can_delete":false,"product_type":"c1","uid":1146983,"ip_address":"","ucode":"A4D5DED1E00F60","user_header":"https://static001.geekbang.org/account/avatar/00/11/80/67/4e381da5.jpg","comment_is_top":false,"comment_ctime":1632447019,"is_pvip":false,"replies":[{"id":"113603","content":"你好，确实图片有误，谢谢，已提交修改","user_name":"作者回复","comment_id":313448,"uid":"1069186","ip_address":"","utype":1,"ctime":1632619716,"user_name_real":"叶剑峰"}],"discussion_count":1,"race_medal":0,"score":"1632447019","product_id":100090601,"comment_content":"图片Context代码结构中有SetHandler方法，github的demo上没有这个方法","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527356,"discussion_content":"你好，确实图片有误，谢谢，已提交修改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632619716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312530,"user_name":"zhao","can_delete":false,"product_type":"c1","uid":1033023,"ip_address":"","ucode":"2809350DED2289","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/3f/d96c1b97.jpg","comment_is_top":false,"comment_ctime":1631849597,"is_pvip":true,"replies":[{"id":"113223","content":"感谢反馈👍补充文件夹出处的时候把代码块拆开了，估计不小心拆掉了一个","user_name":"编辑回复","comment_id":312530,"uid":"2547771","ip_address":"","utype":2,"ctime":1631854705,"user_name_real":"叶如芊"}],"discussion_count":1,"race_medal":0,"score":"1631849597","product_id":100090601,"comment_content":"搞清楚这一点，我们回看第二步，做完具体业务逻辑就结束是不行的，还需要处理 panic。所以这个 Goroutine 应该要有两个 channel 对外传递事件。<br>-------<br>这行话下面的代码块，go 一个匿名函数的时候少了右括号&#39;)&#39;。","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527003,"discussion_content":"感谢反馈👍补充文件夹出处的时候把代码块拆开了，估计不小心拆掉了一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631854705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312170,"user_name":".","can_delete":false,"product_type":"c1","uid":2305295,"ip_address":"","ucode":"EBF24A1557E74B","user_header":"https://static001.geekbang.org/account/avatar/00/23/2d/0f/3d341419.jpg","comment_is_top":false,"comment_ctime":1631671350,"is_pvip":false,"replies":[{"id":"113129","content":"后面单开一章专门介绍目录怎么设计，现在我们先专注把实现写出来，拉分支放就行，每一章我都把源码放在github项目的对应分支上了，可以先跟着文章敲完代码，再跟着对应分支对一遍。","user_name":"作者回复","comment_id":312170,"uid":"2547771","ip_address":"","utype":1,"ctime":1631682887,"user_name_real":"多少"}],"discussion_count":1,"race_medal":0,"score":"1631671350","product_id":100090601,"comment_content":"叶大可不可以在标注一下每段代码是在哪个文件夹里？从零开始的话不知道项目的目录结构是怎么样的","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526886,"discussion_content":"后面单开一章专门介绍目录怎么设计，现在我们先专注把实现写出来，拉分支放就行，每一章我都把源码放在github项目的对应分支上了，可以先跟着文章敲完代码，再跟着对应分支对一遍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631682887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]}]}