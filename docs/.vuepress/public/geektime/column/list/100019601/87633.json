{"id":87633,"title":"36 | 继承有什么安全缺陷？","content":"<p>有时候，为了解决一个问题，我们需要一个解决办法。可是，这个办法本身还会带来更多的问题。新问题的解决带来更新的问题，就这样周而复始，绵延不绝。</p><p>比如<a href=\"https://time.geekbang.org/column/article/87256\">上一篇文章</a><a href=\"https://time.geekbang.org/column/article/87256\">中</a>，我们说到的敏感信息通过异常信息泄露的问题，就是面向对象设计和实现给我们带来的小困扰。再比如<a href=\"https://time.geekbang.org/column/article/86590\">前面还有</a><a href=\"https://time.geekbang.org/column/article/86590\">一个</a><a href=\"https://time.geekbang.org/column/article/86590\">案例</a>，说到了共享内存或者缓存技术带来的潜在危害和挑战，这些都是成熟技术发展背后需要做出的小妥协。只是有时候，这些小小的妥协如果没有被安排好和处理好，可能就会带来不成比例的代价。</p><h2>评审案例</h2><p>我们一起来看一段节选的java.io.FilePermission类的定义。你知道为什么FilePermission被定义为final类吗？</p><pre><code>package java.io;\n\n// &lt;snipped&gt;\n/**\n * This class represents access to a file or directory.  A\n * FilePermission consists of a pathname and a set of actions\n * valid for that pathname.\n * &lt;snipped&gt;\n */\npublic final class FilePermission\n        extends Permission implements Serializable {\n    /**\n     * Creates a new FilePermission object with the specified actions.\n     * &lt;i&gt;path&lt;/i&gt; is the pathname of a file or directory, and\n     * &lt;i&gt;actions&lt;/i&gt; contains a comma-separated list of the desired\n     * actions granted on the file or directory. Possible actions are\n     * &quot;read&quot;, &quot;write&quot;, &quot;execute&quot;, &quot;delete&quot;, and &quot;readlink&quot;.\n     * &lt;snipped&gt;\n     */\n    public FilePermission(String path, String actions);\n\n    /**\n     * Returns the &quot;canonical string representation&quot; of the actions.\n     * That is, this method always returns present actions in the\n     * following order: read, write, execute, delete, readlink. \n     * &lt;snipped&gt;\n     */\n    @Override\n    public String getActions();\n\n    /**\n     * Checks if this FilePermission object &quot;implies&quot; the \n     * specified permission.\n     * &lt;snipped&gt;\n     * @param p the permission to check against.\n     *\n     * @return &lt;code&gt;true&lt;/code&gt; if the specified permission\n     *         is not &lt;code&gt;null&lt;/code&gt; and is implied by this\n     *         object, &lt;code&gt;false&lt;/code&gt; otherwise.\n     */\n    @Override\n    public boolean implies(Permission p);\n\n    // &lt;snipped&gt;\n}\n</code></pre><p>FilePermission被声明为final，也就意味着该类不能被继承，不能被扩展了。我们都知道，在面向对象的设计中，是否具备可扩展性是一个衡量设计优劣的好指标。如果允许扩展的话，那么想要增加一个“link”的操作就会方便很多，只要扩展FilePermission类就可以了。 但是对于FilePermission这个类，OpenJDK为什么放弃了可扩展性？</p><h2>案例分析</h2><p>如果我们保留FilePermission的可扩展性，你来评审一下下面的代码，可以看出这段代码的问题吗？</p><!-- [[[read_end]]] --><pre><code>package com.example;\n\npublic final class MyFilePermission extends FilePermission {\n    @Override\n    public String getActions() {\n      return &quot;read&quot;;\n    }\n\n    @Override\n    public boolean implies(Permission p) {\n      return true;\n    }  \n}\n</code></pre><p>如果你还没有找出这个问题，可能是因为我还遗漏了对FilePermission常见使用场景的介绍。在Java的安全管理模式下，一个用户通常可能会被授予有限的权限。 比如用户“xuelei”可以读取用户“duke”的文件，但不能更改用户“duke”的文件。</p><p>授权的策咯可能看起来像下面的描述：</p><pre><code>grant Principal com.sun.security.auth.UnixPrincipal &quot;xuelei&quot; {\n    permission com.example.MyFilePermission &quot;/home/duke&quot;, &quot;read&quot;;\n};\n</code></pre><p>这项策略要想起作用，上面的描述就要转换成一个MyFilePermission的实例。然后调用该实例的implies()方法类判断是否可以授权一项操作。</p><pre><code>Permission myPermission = ...  // read &quot;/home/duke&quot;\n\npublic void checkRead() {\n  if (myPermission.implies(New FilePermission(file, &quot;read&quot;))) {\n    // read is allowed.\n  } else {\n    // throw exception, read is not allowed.\n  }\n}\n\npublic void checkWrite() {\n  if (myPermission.implies(New FilePermission(file, &quot;write&quot;))) {\n    // writeis allowed.\n  } else {\n    // throw exception, write is not allowed.\n  }  \n}\n</code></pre><p>这里请注意，MyFilePermission.implies()总是返回“true”， 所以上述的checkRead()和checkWrite()方法总是成功的，不管用户被明确指示授予了什么权限，实际上暗地里他已经被授予了所有权限。这就成功地绕过了Java的安全管理。</p><p>能够绕过Java安全机制的主要原因，在于我们允许了FilePermission的扩展。而扩展类的实现，有可能有意或者无意地改变了FilePermission的规范和运行，从而带来不可预料的行为。</p><p>如果你关注OpenJDK安全组的代码评审邮件组，你可能会注意到，对于面向对象的可扩展性这一便利和诱惑，很多工程师能够保持住克制。</p><p>保持克制，可能会遗漏一两颗看似近在眼前的甜甜的糖果，但可以减轻你对未来长期的担忧。</p><p>一个类或者方法如果使用了final关键字，我们可以稍微放宽心。如果没有使用final关键字，我们可能需要反复揣摩好长时间，仔细权衡可扩展性可能会带来的弊端。</p><p>一个公共类或者方法如果使用了final关键字，将来如果需要扩展性，就可以去掉这个关键字。但是，如果最开始没有使用final关键字，特别是对于公开的接口来说，将来想要加上就可能是一件非常困难的事。</p><p>上面的例子是子类通过改变父类的规范和行为带来的潜在问题。那么父类是不是也可以改变子类的行为呢？ 这听起来有点怪异，但是父类对子类行为的影响，有时候也的确是一个让人非常头疼的问题。</p><h2>麻烦的继承</h2><p>我先总结一下，父类对子类行为的影响大致有三种：</p><ol>\n<li>\n<p>改变未继承方法的实现，或者子类调用的方法的实现（super）；</p>\n</li>\n<li>\n<p>变更父类或者父类方法的规范；</p>\n</li>\n<li>\n<p>为父类添加新方法。</p>\n</li>\n</ol><p>第一种和第三种相对比较容易理解，第二种稍微复杂一点。我们还是通过一个例子来看看其中的问题。</p><p>Hashtable是一个古老的，被广泛使用的类，它最先出现在JDK 1.0中。其中，put()和remove()是两个关键的方法。在JDK 1.2中，又有更多的方法被添加进来，比如entrySet()方法。</p><pre><code>public class Hashtable&lt;K,V&gt; ... {\n    // snipped\n    /**\n     * Returns a {@link Set} view of the mappings contained in\n     （ this map.\n     * The set is backed by the map, so changes to the map are\n     * reflected in the set, and vice-versa.  If the map is modified\n     * while an iteration over the set is in progress (except through\n     * the iterator's own {@code remove} operation, or through the\n     * {@code setValue} operation on a map entry returned by the\n     * iterator) the results of the iteration are undefined.  The set\n     * supports element removal, which removes the corresponding\n     * mapping from the map, via the {@code Iterator.remove},\n     * {@code Set.remove}, {@code removeAll}, {@code retainAll} and\n     * {@code clear} operations.  It does not support the\n     * {@code add} or {@code addAll} operations.\n     *\n     * @since 1.2\n     */\n    public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() {\n        // snipped\n    }\n    // snipped\n}\n</code></pre><p>这就引入了一个难以察觉的潜在的安全漏洞。 你可能会问，添加一个方法不是很常见吗？这能有什么问题呢？</p><p>问题在于继承Hashtable的子类。假设有一个子类，它的Hashtable里要存放敏感数据，数据的添加和删除都需要授权，在JDK 1.2之前，这个子类可以重写put()和remove()方法，加载权限检查的代码。在JDK 1.2中，这个子类可能意识不到Hashtable添加了entrySet()这个新方法，从而也没有意识到要重写覆盖entrySet()方法，然而，通过对entrySet()返回值的直接操作，就可以执行数据的添加和删除的操作，成功地绕过了授权。</p><pre><code>public class MySensitiveData extends Hashtable&lt;Object, Object&gt; {\n    // snipped\n    @Override\n    public synchronized Object put(Object key, Object value) {\n        // check permission and then add the key-value\n        // snipped\n        super.put(key, value)\n    }\n    \n    @Override\n    public synchronized Object remove(Object key) {\n        // check permission and then remove the key-value\n        // snipped\n        return super.remove(key);\n    }\n    // snipped, no override of entrySet()\n}\n</code></pre><pre><code>MySensitiveData sensitiveData = ...   // get the handle of the data\nSet&lt;Map.Entry&lt;Object, Object&gt;&gt; sdSet = sensitiveData.entrySet();\nsdSet.remove(...);    // no permission check\nsdSet.add(...);       // no permission check\n\n// the sensitive data get modified, unwarranted.\n</code></pre><p>现实中，这种问题非常容易发生。一般来说，我们的代码总是依赖一定的类库，有时候需要扩展某些类。这个类库可能是第三方的产品，也可能是一个独立的内部类库。但遗憾的是，类库并不知道我们需要拓展哪些类，也可能没办法知道我们该如何拓展。</p><p>所以，当有一个新方法添加到类库的新版本中时，这个新方法会如何影响扩展类，该类库也没有特别多的想象空间和处理办法。就像Hashtable要增加entrySet()方法时，让Hashtable的维护者意识到有一个特殊的MySensitiveData扩展，是非常困难和不现实的。然而Hashtable增加entrySet()方法，合情又合理，也没有什么值得抱怨的。</p><p>然而，当JDK 1.0/1.1升级到JDK 1.2时，Hashtable增加了entrySet()方法，上述的MySensitiveData的实现就存在严重的安全漏洞。要想修复该安全漏洞，MySensitiveData需要重写覆盖entrySet()方法，植入权限检查的代码。</p><p>可是，我们怎样可能知道MySensitiveData需要修改呢！ 一般来说，如果依赖的类库进行了升级，没有影响应用的正常运营，我们就正常升级了，而不会想到检查依赖类库做了哪些具体的变更，以及评估每个变更潜在的影响。这实在不是软件升级的初衷，也远远超越了大部分组织的能力范围。</p><p>而且，如果MySensitiveData不是直接继承Hashtable，而是经过了中间环节，这个问题就会更加隐晦，更加难以察觉。</p><pre><code>public class IntermediateOne extends Hashtable&lt;Object, Object&gt;;\n\npublic class IntermediateTwo extends IntermediateOne;\n\npublic class Intermediate extends IntermediateTwo;\n\npublic class MySensitiveData extends Intermediate;\n</code></pre><p>糟糕的是，随着语言变得越来越高级，类库越来越丰富，发现这些潜在问题的难度也是节节攀升。我几乎已经不期待肉眼可以发现并防范这类问题了。</p><p>那么，到底有没有办法可以防范此类风险呢？</p><p>主要有两个方法。</p><p><strong>一方面，当我们变更一个可扩展类时，要极其谨慎小心</strong>。一个类如果可以不变更，就尽量不要变更，能在现有框架下解决问题，就尽量不要试图创造新的轮子。有时候，我们的确难以压制想要创造出什么好东西的冲动，这是非常好的品质。只是变更公开类库时，一定要多考虑这么做的潜在影响。你是不是开始思念final关键字的好处了？</p><p><strong>另一方面，当我们扩展一个类时，如果涉及到敏感信息的授权与保护，可以考虑使用代理的模式，而不是继承的模式</strong>。代理模式可以有效地降低可扩展对象的新增方法带来的影响。</p><pre><code>public class MySensitiveData {\n    private final Hashtable hashtable = ...\n\n    public synchronized Object put(Object key, Object value) {\n        // check permission and then add the key-value\n        hashtable.put(key, value)\n    }\n\n    public synchronized Object remove(Object key) {\n        // check permission and then remove the key-value\n        return hashtable.remove(key);\n    }\n}\n</code></pre><p>我们使用了Java语言来讨论继承的问题，其实<strong>这是一个面向对象机制的普遍的问</strong><strong>题，</strong>甚至它也不单单是面向对象语言的问题，比如使用C语言的设计和实现，也存在类似的问题。</p><h2>小结</h2><p>通过对这个案例的讨论，我想和你分享下面两点个人看法。</p><ol>\n<li>\n<p><strong>一个可扩展的类，子类和父类可能会相互影响，从而导致不可预知的行为。</strong></p>\n</li>\n<li>\n<p><strong>涉及敏感信息的类，增加可扩展性不一定是个优先选项，要尽量避免父类或者子类的影响。</strong></p>\n</li>\n</ol><p>学会处理和保护敏感信息，是一个优秀工程师必须迈过的门槛。</p><h2>一起来动手</h2><p>了解语言和各种固定模式的缺陷，是我们打怪升级的一个很好的办法。有时候，我们偏重于学习语言或者设计经验的优点，忽视了它们背后做出小小的妥协，或者缺陷。如果能利用好优点，处理好缺陷，我们就可以更好地掌握这些经验总结。毕竟世上哪有什么完美的东西呢？不完美的东西，用好了，就是好东西。</p><p>我们利用讨论区，来聊聊设计模式这个老掉牙的、备受争议的话题。说起“老掉牙”，科技的进步真是快，设计模式十多年前还是一个时髦的话题，如今已经不太受待见了，虽然我们或多或少，或直接或间接地都受益于设计模式的思想。如果你了解过设计模式，你能够分享某个设计模式的优点和缺陷吗？ 使用设计模式有没有给你带来实际的困扰呢？</p><p>上面的例子中，我们提到了使用代理模式来降低父类对子类的影响。那么你知道代理模式的缺陷吗？</p><p>欢迎你把自己的经验和看法写在留言区，我们一起来学习、思考、精进！</p><p>如果你觉得这篇文章有所帮助，欢迎点击“请朋友读”，把它分享给你的朋友或者同事。</p><p></p>","neighbors":{"left":{"article_title":"35 | 怎么处理敏感信息？","id":87256},"right":{"article_title":"37 | 边界，信任的分水岭","id":88097}},"comments":[{"had_liked":false,"id":129289,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1567080679,"is_pvip":false,"replies":[{"id":"50617","content":"不使用继承，当然就没有了继承的好处，也没有了继承的坏处。 不同场景的不同选择，离开场景，我们就没有办法识别好与坏。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1568091195,"ip_address":"","comment_id":129289,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23041917159","product_id":100019601,"comment_content":"代理模式就完全丧失了继承带来的好处","like_count":5,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465384,"discussion_content":"不使用继承，当然就没有了继承的好处，也没有了继承的坏处。 不同场景的不同选择，离开场景，我们就没有办法识别好与坏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568091195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542703,"discussion_content":"原来缺点是这样的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640828946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80681,"user_name":"天佑","can_delete":false,"product_type":"c1","uid":1367369,"ip_address":"","ucode":"AFE2DBC0F31402","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/49/da7125ef.jpg","comment_is_top":false,"comment_ctime":1553697400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18733566584","product_id":100019601,"comment_content":"嗯，子类会把父类的安全实现改的不安全<br>父类扩展新方法时，会给子类添乱，比如子类费劲心机防绕行，父类却悄悄加了个“后门”。。。","like_count":4},{"had_liked":false,"id":80421,"user_name":"轻歌赋","can_delete":false,"product_type":"c1","uid":1251574,"ip_address":"","ucode":"22F62446208805","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/f6/2ff7bc7a.jpg","comment_is_top":false,"comment_ctime":1553659424,"is_pvip":false,"replies":[{"id":"29279","content":"访问不了对象当然不行。你先找找对象可以访问的场景。 换种场景你可能就熟悉了，比如说浏览器，访问一个页面的用户名密码，怎么不被正在访问的另一个页面窃取？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1553667921,"ip_address":"","comment_id":80421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10143594016","product_id":100019601,"comment_content":"有个问题，案例中hashtable增加了一个entryset后，攻击者如何直接访问对象的entryset呢？<br>以web程序为例的话，我想不出用户如何传入可以执行的代码，能过直接让权限检查的调用对象直接执行entryset，也看不出对方如何能够重写我服务端的代码或者继承并且被jvm加载<br>老师能给个实际的例子吗","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444858,"discussion_content":"访问不了对象当然不行。你先找找对象可以访问的场景。 换种场景你可能就熟悉了，比如说浏览器，访问一个页面的用户名密码，怎么不被正在访问的另一个页面窃取？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553667921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80488,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1553669054,"is_pvip":false,"replies":[{"id":"29369","content":"没太明白这两个问题。<br><br>无法访问，当然就没问题。 公开接口的问题是，公开了，就可以被使用，使用场景什么样的，我们不知道。 有没有场景，漏洞无法被攻击者利用，当然有的。一个场景没问题，不代表另一个场景就没问题。多用户、多应用、多类库的场景，这些用户之间、应用之间、类库之间，彼此可以不信任，可以参考现代编程语言和操作系统的domain的概念，或者虚拟机、云计算、远程调用等的技术架构。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1553728211,"ip_address":"","comment_id":80488,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848636350","product_id":100019601,"comment_content":"如果是web程序的话，攻击者是怎么查看我们内部程序？<br>如果是API接口的话，这些方法我们不是隐藏起来，不公开，它怎么绕过漏洞攻击？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444881,"discussion_content":"没太明白这两个问题。\n\n无法访问，当然就没问题。 公开接口的问题是，公开了，就可以被使用，使用场景什么样的，我们不知道。 有没有场景，漏洞无法被攻击者利用，当然有的。一个场景没问题，不代表另一个场景就没问题。多用户、多应用、多类库的场景，这些用户之间、应用之间、类库之间，彼此可以不信任，可以参考现代编程语言和操作系统的domain的概念，或者虚拟机、云计算、远程调用等的技术架构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553728211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353184,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1659243250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659243250","product_id":100019601,"comment_content":"一方面，当我们变更一个可扩展类时，要极其谨慎小心；另一方面，当我们扩展一个类时，如果涉及到敏感信息的授权与保护，可以考虑使用代理的模式，而不是继承的模式。--记下来","like_count":0},{"had_liked":false,"id":344215,"user_name":"刚毅坚卓","can_delete":false,"product_type":"c1","uid":2976412,"ip_address":"","ucode":"6D16E587400F6F","user_header":"https://static001.geekbang.org/account/avatar/00/2d/6a/9c/de8f9280.jpg","comment_is_top":false,"comment_ctime":1651374302,"is_pvip":false,"replies":[{"id":"125737","content":" 可以看看这个：<br>https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Delegation_(object-oriented_programming)","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1651620014,"ip_address":"","comment_id":344215,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651374302","product_id":100019601,"comment_content":"另一方面，当我们扩展一个类时，如果涉及到敏感信息的授权与保护，可以考虑使用代理的模式，而不是继承的模式<br><br>想问一下什么是代理模式","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569945,"discussion_content":" 可以看看这个：\nhttps://en.wikipedia.org/wiki/Delegation_(object-oriented_programming)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651620015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}