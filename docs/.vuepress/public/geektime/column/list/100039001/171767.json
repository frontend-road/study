{"id":171767,"title":"14 | 实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？","content":"<p>在上一节课中，针对接口鉴权功能的开发，我们讲了如何进行面向对象分析（OOA），也就是需求分析。实际上，需求定义清楚之后，这个问题就已经解决了一大半，这也是为什么我花了那么多篇幅来讲解需求分析。今天，我们再来看一下，针对面向对象分析产出的需求，如何来进行面向对象设计（OOD）和面向对象编程（OOP）。</p><h2>如何进行面向对象设计？</h2><p>我们知道，面向对象分析的产出是详细的需求描述，那面向对象设计的产出就是类。在面向对象设计环节，我们将需求描述转化为具体的类的设计。我们把这一设计环节拆解细化一下，主要包含以下几个部分：</p><ul>\n<li>划分职责进而识别出有哪些类；</li>\n<li>定义类及其属性和方法；</li>\n<li>定义类与类之间的交互关系；</li>\n<li>将类组装起来并提供执行入口。</li>\n</ul><p>实话讲，不管是面向对象分析还是面向对象设计，理论的东西都不多，所以我们还是结合鉴权这个例子，在实战中体会如何做面向对象设计。</p><h3>1.划分职责进而识别出有哪些类</h3><p>在面向对象有关书籍中经常讲到，类是现实世界中事物的一个建模。但是，并不是每个需求都能映射到现实世界，也并不是每个类都与现实世界中的事物一一对应。对于一些抽象的概念，我们是无法通过映射现实世界中的事物的方式来定义类的。</p><p>所以，大多数讲面向对象的书籍中，还会讲到另外一种识别类的方法，那就是把需求描述中的名词罗列出来，作为可能的候选类，然后再进行筛选。对于没有经验的初学者来说，这个方法比较简单、明确，可以直接照着做。</p><!-- [[[read_end]]] --><p>不过，我个人更喜欢另外一种方法，那就是根据需求描述，把其中涉及的功能点，一个一个罗列出来，然后再去看哪些功能点职责相近，操作同样的属性，是否应该归为同一个类。我们来看一下，针对鉴权这个例子，具体该如何来做。</p><p>在上一节课中，我们已经给出了详细的需求描述，为了方便你查看，我把它重新贴在了下面。</p><ul>\n<li>调用方进行接口请求的时候，将URL、AppID、密码、时间戳拼接在一起，通过加密算法生成token，并且将token、AppID、时间戳拼接在URL中，一并发送到微服务端。</li>\n<li>微服务端在接收到调用方的接口请求之后，从请求中拆解出token、AppID、时间戳。</li>\n<li>微服务端首先检查传递过来的时间戳跟当前时间，是否在token失效时间窗口内。如果已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。</li>\n<li>如果token验证没有过期失效，微服务端再从自己的存储中，取出AppID对应的密码，通过同样的token生成算法，生成另外一个token，与调用方传递过来的token进行匹配。如果一致，则鉴权成功，允许接口调用；否则就拒绝接口调用。</li>\n</ul><p>首先，我们要做的是逐句阅读上面的需求描述，拆解成小的功能点，一条一条罗列下来。注意，拆解出来的每个功能点要尽可能的小。每个功能点只负责做一件很小的事情（专业叫法是“单一职责”，后面章节中我们会讲到）。下面是我逐句拆解上述需求描述之后，得到的功能点列表：</p><ol>\n<li>把URL、AppID、密码、时间戳拼接为一个字符串；</li>\n<li>对字符串通过加密算法加密生成token；</li>\n<li>将token、AppID、时间戳拼接到URL中，形成新的URL；</li>\n<li>解析URL，得到token、AppID、时间戳等信息；</li>\n<li>从存储中取出AppID和对应的密码；</li>\n<li>根据时间戳判断token是否过期失效；</li>\n<li>验证两个token是否匹配；</li>\n</ol><p>从上面的功能列表中，我们发现，1、2、6、7都是跟token有关，负责token的生成、验证；3、4都是在处理URL，负责URL的拼接、解析；5是操作AppID和密码，负责从存储中读取AppID和密码。所以，我们可以粗略地得到三个核心的类：AuthToken、Url、CredentialStorage。AuthToken负责实现1、2、6、7这四个操作；Url负责3、4两个操作；CredentialStorage负责5这个操作。</p><p>当然，这是一个初步的类的划分，其他一些不重要的、边边角角的类，我们可能暂时没法一下子想全，但这也没关系，面向对象分析、设计、编程本来就是一个循环迭代、不断优化的过程。根据需求，我们先给出一个粗糙版本的设计方案，然后基于这样一个基础，再去迭代优化，会更加容易一些，思路也会更加清晰一些。</p><p>不过，我还要再强调一点，接口调用鉴权这个开发需求比较简单，所以，需求对应的面向对象设计并不复杂，识别出来的类也并不多。但如果我们面对的是更加大型的软件开发、更加复杂的需求开发，涉及的功能点可能会很多，对应的类也会比较多，像刚刚那样根据需求逐句罗列功能点的方法，最后会得到一个长长的列表，就会有点凌乱、没有规律。针对这种复杂的需求开发，我们首先要做的是进行模块划分，将需求先简单划分成几个小的、独立的功能模块，然后再在模块内部，应用我们刚刚讲的方法，进行面向对象设计。而模块的划分和识别，跟类的划分和识别，是类似的套路。</p><h3>2.定义类及其属性和方法</h3><p>刚刚我们通过分析需求描述，识别出了三个核心的类，它们分别是AuthToken、Url和CredentialStorage。现在我们来看下，每个类都有哪些属性和方法。我们还是从功能点列表中挖掘。</p><p><strong>AuthToken类相关的功能点有四个：</strong></p><ul>\n<li>把URL、AppID、密码、时间戳拼接为一个字符串；</li>\n<li>对字符串通过加密算法加密生成token；</li>\n<li>根据时间戳判断token是否过期失效；</li>\n<li>验证两个token是否匹配。</li>\n</ul><p>对于方法的识别，很多面向对象相关的书籍，一般都是这么讲的，识别出需求描述中的动词，作为候选的方法，再进一步过滤筛选。类比一下方法的识别，我们可以把功能点中涉及的名词，作为候选属性，然后同样进行过滤筛选。</p><p>我们可以借用这个思路，根据功能点描述，识别出来AuthToken类的属性和方法，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/69/9b/69c8954e0db1a4db99a6094ee359fc9b.jpg?wh=2203*1573\" alt=\"\"></p><p>从上面的类图中，我们可以发现这样三个小细节。</p><ul>\n<li>第一个细节：并不是所有出现的名词都被定义为类的属性，比如URL、AppID、密码、时间戳这几个名词，我们把它作为了方法的参数。</li>\n<li>第二个细节：我们还需要挖掘一些没有出现在功能点描述中属性，比如createTime，expireTimeInterval，它们用在isExpired()函数中，用来判定token是否过期。</li>\n<li>第三个细节：我们还给AuthToken类添加了一个功能点描述中没有提到的方法getToken()。</li>\n</ul><p>第一个细节告诉我们，从业务模型上来说，不应该属于这个类的属性和方法，不应该被放到这个类里。比如URL、AppID这些信息，从业务模型上来说，不应该属于AuthToken，所以我们不应该放到这个类中。</p><p>第二、第三个细节告诉我们，在设计类具有哪些属性和方法的时候，不能单纯地依赖当下的需求，还要分析这个类从业务模型上来讲，理应具有哪些属性和方法。这样可以一方面保证类定义的完整性，另一方面不仅为当下的需求还为未来的需求做些准备。</p><p><strong>Url类相关的功能点有两个：</strong></p><ul>\n<li>将token、AppID、时间戳拼接到URL中，形成新的URL；</li>\n<li>解析URL，得到token、AppID、时间戳等信息。</li>\n</ul><p>虽然需求描述中，我们都是以URL来代指接口请求，但是，接口请求并不一定是以URL的形式来表达，还有可能是Dubbo、RPC等其他形式。为了让这个类更加通用，命名更加贴切，我们接下来把它命名为ApiRequest。下面是我根据功能点描述设计的ApiRequest类。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/d6/1cc9b95e511bd49fbc23c00ac5c0fed6.jpg?wh=1663*1534\" alt=\"\"></p><p><strong>CredentialStorage类相关的功能点有一个：</strong></p><ul>\n<li>从存储中取出AppID和对应的密码。</li>\n</ul><p>CredentialStorage类非常简单，类图如下所示。为了做到抽象封装具体的存储方式，我们将CredentialStorage设计成了接口，基于接口而非具体的实现编程。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/85/3b6d2c0cadafa723e26cc032c29c8785.jpg?wh=1243*577\" alt=\"\"></p><h3>3.定义类与类之间的交互关系</h3><p>类与类之间都有哪些交互关系呢？UML统一建模语言中定义了六种类之间的关系。它们分别是：泛化、实现、关联、聚合、组合、依赖。关系比较多，而且有些还比较相近，比如聚合和组合，接下来我就逐一讲解一下。</p><p><strong>泛化</strong>（Generalization）可以简单理解为继承关系。具体到Java代码就是下面这样：</p><pre><code>public class A { ... }\npublic class B extends A { ... }\n</code></pre><p><strong>实现</strong>（Realization）一般是指接口和实现类之间的关系。具体到Java代码就是下面这样：</p><pre><code>public interface A {...}\npublic class B implements A { ... }\n</code></pre><p><strong>聚合</strong>（Aggregation）是一种包含关系，A类对象包含B类对象，B类对象的生命周期可以不依赖A类对象的生命周期，也就是说可以单独销毁A类对象而不影响B对象，比如课程与学生之间的关系。具体到Java代码就是下面这样：</p><pre><code>public class A {\n  private B b;\n  public A(B b) {\n    this.b = b;\n  }\n}\n</code></pre><p><strong>组合</strong>（Composition）也是一种包含关系。A类对象包含B类对象，B类对象的生命周期依赖A类对象的生命周期，B类对象不可单独存在，比如鸟与翅膀之间的关系。具体到Java代码就是下面这样：</p><pre><code>public class A {\n  private B b;\n  public A() {\n    this.b = new B();\n  }\n}\n</code></pre><p><strong>关联</strong>（Association）是一种非常弱的关系，包含聚合、组合两种关系。具体到代码层面，如果B类对象是A类的成员变量，那B类和A类就是关联关系。具体到Java代码就是下面这样：</p><pre><code>public class A {\n  private B b;\n  public A(B b) {\n    this.b = b;\n  }\n}\n或者\npublic class A {\n  private B b;\n  public A() {\n    this.b = new B();\n  }\n}\n</code></pre><p><strong>依赖</strong>（Dependency）是一种比关联关系更加弱的关系，包含关联关系。不管是B类对象是A类对象的成员变量，还是A类的方法使用B类对象作为参数或者返回值、局部变量，只要B类对象和A类对象有任何使用关系，我们都称它们有依赖关系。具体到Java代码就是下面这样：</p><pre><code>public class A {\n  private B b;\n  public A(B b) {\n    this.b = b;\n  }\n}\n或者\npublic class A {\n  private B b;\n  public A() {\n    this.b = new B();\n  }\n}\n或者\npublic class A {\n  public void func(B b) { ... }\n}\n</code></pre><p>看完了UML六种类关系的详细介绍，不知道你有何感受？我个人觉得这样拆分有点太细，增加了学习成本，对于指导编程开发没有太大意义。所以，我从更加贴近编程的角度，对类与类之间的关系做了调整，只保留了四个关系：泛化、实现、组合、依赖，这样你掌握起来会更加容易。</p><p>其中，泛化、实现、依赖的定义不变，组合关系替代UML中组合、聚合、关联三个概念，也就相当于重新命名关联关系为组合关系，并且不再区分UML中的组合和聚合两个概念。之所以这样重新命名，是为了跟我们前面讲的“多用组合少用继承”设计原则中的“组合”统一含义。只要B类对象是A类对象的成员变量，那我们就称，A类跟B类是组合关系。</p><p>理论的东西讲完了，让我们来看一下，刚刚我们定义的类之间都有哪些关系呢？因为目前只有三个核心的类，所以只用到了实现关系，也即CredentialStorage和MysqlCredentialStorage之间的关系。接下来讲到组装类的时候，我们还会用到依赖关系、组合关系，但是泛化关系暂时没有用到。</p><h3>4.将类组装起来并提供执行入口</h3><p>类定义好了，类之间必要的交互关系也设计好了，接下来我们要将所有的类组装在一起，提供一个执行入口。这个入口可能是一个main()函数，也可能是一组给外部用的API接口。通过这个入口，我们能触发整个代码跑起来。</p><p>接口鉴权并不是一个独立运行的系统，而是一个集成在系统上运行的组件，所以，我们封装所有的实现细节，设计了一个最顶层的ApiAuthenticator接口类，暴露一组给外部调用者使用的API接口，作为触发执行鉴权逻辑的入口。具体的类的设计如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/ca/f408ac59caffde117716d11148d010ca.jpg?wh=1953*1479\" alt=\"\"></p><h2>如何进行面向对象编程？</h2><p>面向对象设计完成之后，我们已经定义清晰了类、属性、方法、类之间的交互，并且将所有的类组装起来，提供了统一的执行入口。接下来，面向对象编程的工作，就是将这些设计思路翻译成代码实现。有了前面的类图，这部分工作相对来说就比较简单了。所以，这里我只给出比较复杂的ApiAuthenticator的实现。</p><p>对于AuthToken、ApiRequest、CredentialStorage这三个类，在这里我就不给出具体的代码实现了。给你留一个课后作业，你可以试着把整个鉴权框架自己去实现一遍。</p><pre><code>public interface ApiAuthenticator {\n  void auth(String url);\n  void auth(ApiRequest apiRequest);\n}\n\npublic class DefaultApiAuthenticatorImpl implements ApiAuthenticator {\n  private CredentialStorage credentialStorage;\n  \n  public DefaultApiAuthenticatorImpl() {\n    this.credentialStorage = new MysqlCredentialStorage();\n  }\n  \n  public DefaultApiAuthenticatorImpl(CredentialStorage credentialStorage) {\n    this.credentialStorage = credentialStorage;\n  }\n\n  @Override\n  public void auth(String url) {\n    ApiRequest apiRequest = ApiRequest.buildFromUrl(url);\n    auth(apiRequest);\n  }\n\n  @Override\n  public void auth(ApiRequest apiRequest) {\n    String appId = apiRequest.getAppId();\n    String token = apiRequest.getToken();\n    long timestamp = apiRequest.getTimestamp();\n    String originalUrl = apiRequest.getOriginalUrl();\n\n    AuthToken clientAuthToken = new AuthToken(token, timestamp);\n    if (clientAuthToken.isExpired()) {\n      throw new RuntimeException(&quot;Token is expired.&quot;);\n    }\n\n    String password = credentialStorage.getPasswordByAppId(appId);\n    AuthToken serverAuthToken = AuthToken.generate(originalUrl, appId, password, timestamp);\n    if (!serverAuthToken.match(clientAuthToken)) {\n      throw new RuntimeException(&quot;Token verfication failed.&quot;);\n    }\n  }\n}\n</code></pre><h2>辩证思考与灵活应用</h2><p>在之前的讲解中，面向对象分析、设计、实现，每个环节的界限划分都比较清楚。而且，设计和实现基本上是按照功能点的描述，逐句照着翻译过来的。这样做的好处是先做什么、后做什么，非常清晰、明确，有章可循，即便是没有太多设计经验的初级工程师，都可以按部就班地参照着这个流程来做分析、设计和实现。</p><p>不过，在平时的工作中，大部分程序员往往都是在脑子里或者草纸上完成面向对象分析和设计，然后就开始写代码了，边写边思考边重构，并不会严格地按照刚刚的流程来执行。而且，说实话，即便我们在写代码之前，花很多时间做分析和设计，绘制出完美的类图、UML图，也不可能把每个细节、交互都想得很清楚。在落实到代码的时候，我们还是要反复迭代、重构、打破重写。</p><p>毕竟，整个软件开发本来就是一个迭代、修修补补、遇到问题解决问题的过程，是一个不断重构的过程。我们没法严格地按照顺序执行各个步骤。这就类似你去学驾照，驾校教的都是比较正规的流程，先做什么，后做什么，你只要照着做就能顺利倒车入库，但实际上，等你开熟练了，倒车入库很多时候靠的都是经验和感觉。</p><h2>重点回顾</h2><p>今天的内容到此就讲完了。我们来一块总结回顾一下，你需要掌握的重点内容。</p><p>面向对象分析的产出是详细的需求描述。面向对象设计的产出是类。在面向对象设计这一环节中，我们将需求描述转化为具体的类的设计。这个环节的工作可以拆分为下面四个部分。</p><p><strong>1.划分职责进而识别出有哪些类</strong></p><p>根据需求描述，我们把其中涉及的功能点，一个一个罗列出来，然后再去看哪些功能点职责相近，操作同样的属性，可否归为同一个类。</p><p><strong>2.定义类及其属性和方法</strong></p><p>我们识别出需求描述中的动词，作为候选的方法，再进一步过滤筛选出真正的方法，把功能点中涉及的名词，作为候选属性，然后同样再进行过滤筛选。</p><p><strong>3.定义类与类之间的交互关系</strong></p><p>UML统一建模语言中定义了六种类之间的关系。它们分别是：泛化、实现、关联、聚合、组合、依赖。我们从更加贴近编程的角度，对类与类之间的关系做了调整，保留四个关系：泛化、实现、组合、依赖。</p><p><strong>4.将类组装起来并提供执行入口</strong></p><p>我们要将所有的类组装在一起，提供一个执行入口。这个入口可能是一个main()函数，也可能是一组给外部用的API接口。通过这个入口，我们能触发整个代码跑起来。</p><h2>课堂讨论</h2><p>软件设计的自由度很大，这也是软件的复杂之处。不同的人对类的划分、定义、类之间交互的设计，可能都不大一样。那除了我今天给出的设计思路，你还有没有其他设计思路呢？</p><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"13 | 实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？","id":171760},"right":{"article_title":"15 | 理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？","id":171771}},"comments":[{"had_liked":false,"id":160169,"user_name":"斜杠青年","can_delete":false,"product_type":"c1","uid":1177739,"ip_address":"","ucode":"D7AF02B8588549","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/8b/74d2ab6b.jpg","comment_is_top":true,"comment_ctime":1575884582,"is_pvip":true,"replies":[{"id":"61120","content":"可以的，我就是用的不可逆的","user_name":"作者回复","comment_id":160169,"uid":"1190123","ip_address":"","utype":1,"ctime":1575895594,"user_name_real":"王争"}],"discussion_count":5,"race_medal":1,"score":"9.2233720642004992e+18","product_id":100039001,"comment_content":"生成Token的算法可以用不可逆的Hash算法吗？例如MD5或是SHA?","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477278,"discussion_content":"可以的，我就是用的不可逆的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575895594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1877862,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","nickname":"纵不朽","note":"","ucode":"DB2CA2C46B2EF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":541091,"discussion_content":"刚好发生哈希碰撞，这种咱不考虑了是不？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640251628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":477278,"ip_address":""},"score":541091,"extra":""}]},{"author":{"id":1322366,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/7e/335a9b9d.jpg","nickname":"🐝null","note":"","ucode":"16F5E4965F8D5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313249,"discussion_content":"token最好是可逆的，这样不用查询数据库或缓存就可以获取userid和过期时间等信息，可以参考一下JWT的方案，Java也有第三方jar实现了JWT算法","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1603011828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2772190,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/4c/de/d8b8d9ca.jpg","nickname":"花花世界besos","note":"","ucode":"D574DA13F741DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396655,"discussion_content":"我喜欢用迷惑的方法，我传时间戳，但我不用时间戳，或者改造时间戳加密。哈哈哈哈","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1632471229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383993,"discussion_content":"那就是 一个io成本 or  一个计算成本 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626330730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158604,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1575422030,"is_pvip":true,"discussion_count":20,"race_medal":0,"score":"538446334030","product_id":100039001,"comment_content":"干货满满！争哥拆分需求、组织类和方法的思考过程值得我们学习。<br><br>我想到的实现过程是按照用户发送请求通过鉴权和未通过鉴权的流程写：<br>1、先写接口auth(String url) ，这里先定义好请求的格式，例如“xxx?AppID=123&amp;Token=aaa&amp;TimeStamp=123123”<br>2、ApiRequest类，解析请求<br>3、AuthToken类，判断是否过期、token匹配、校验token<br>4、CredentialStorate类，获取AppID对应的password<br><br>具体实现见：https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;geekbang&#47;designpattern&#47;u014","like_count":126,"discussions":[{"author":{"id":1586169,"avatar":"https://static001.geekbang.org/account/avatar/00/18/33/f9/658f5bd2.jpg","nickname":"torchlight","note":"","ucode":"1E05FD0360BEF3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380155,"discussion_content":"向大佬学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624360842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1586169,"avatar":"https://static001.geekbang.org/account/avatar/00/18/33/f9/658f5bd2.jpg","nickname":"torchlight","note":"","ucode":"1E05FD0360BEF3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":380215,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624375396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":380155,"ip_address":""},"score":380215,"extra":""}]},{"author":{"id":1099525,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","nickname":"微末凡尘","note":"","ucode":"25EDFD0914D0F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288188,"discussion_content":"真的厉害啊，大佬，很好奇大佬以前是做什么的呢，为什么30岁还去考研究生呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593673780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1099525,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","nickname":"微末凡尘","note":"","ucode":"25EDFD0914D0F4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288193,"discussion_content":"以前是学石油的，现在搞it了🤣","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1593674951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288188,"ip_address":""},"score":288193,"extra":""},{"author":{"id":1300285,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d7/3d/a076faf1.jpg","nickname":"蜗牛","note":"","ucode":"A99C9C890F95E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":313790,"discussion_content":"看了 大佬的github 真的厉害，向您学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603092573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288193,"ip_address":""},"score":313790,"extra":""}]},{"author":{"id":1235937,"avatar":"https://static001.geekbang.org/account/avatar/00/12/db/e1/526653ab.jpg","nickname":"秋雨无痕","note":"","ucode":"8BBF69A208B342","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191951,"discussion_content":"厉害啊，必须关注啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583048775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1235937,"avatar":"https://static001.geekbang.org/account/avatar/00/12/db/e1/526653ab.jpg","nickname":"秋雨无痕","note":"","ucode":"8BBF69A208B342","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191998,"discussion_content":"哪里，一起学习！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583053295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":191951,"ip_address":""},"score":191998,"extra":""}]},{"author":{"id":1328354,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/e2/763526e9.jpg","nickname":"程晓擘","note":"","ucode":"96986D5AE2B96C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75073,"discussion_content":"看了你的github，佩服呀，我也要加油喽。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575721337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1328354,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/e2/763526e9.jpg","nickname":"程晓擘","note":"","ucode":"96986D5AE2B96C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75081,"discussion_content":"我比较笨的那种，每天多commit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575721841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":75073,"ip_address":""},"score":75081,"extra":""},{"author":{"id":1328354,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/e2/763526e9.jpg","nickname":"程晓擘","note":"","ucode":"96986D5AE2B96C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":75683,"discussion_content":"谦虚啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575767490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":75081,"ip_address":""},"score":75683,"extra":""}]},{"author":{"id":1048887,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","nickname":"高源","note":"","ucode":"751B41FD38EF7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73078,"discussion_content":"请教一下你算法怎么学的，动态规划我理解不上去，想问问你怎么理解明白的，能够灵活运用，理论知道但是自己动手就不知道怎么做了列不出状态转移方程啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575552113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1048887,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","nickname":"高源","note":"","ucode":"751B41FD38EF7D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73291,"discussion_content":"真是谬赞了😂。我研究生的课题方向就是智能规划，被这个课题搞的几度想退学，好在老师善解人意。我30岁转专业考计算机的研究生，还tm是全日制的，压力有多大？又遇到这么一个研究方向，除了硬着头皮整，就剩退学一条路了。问我咋学，全靠心理建设，咬着牙坚持呗。科研水平不渐长，英文阅读能力与日俱增。我都能整下去，你肯定没问题！加油！","likes_number":37,"is_delete":false,"is_hidden":false,"ctime":1575557089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73078,"ip_address":""},"score":73291,"extra":""},{"author":{"id":1732780,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","nickname":"面向百度编程","note":"","ucode":"8FE04A019D71D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":217382,"discussion_content":"你给了我考研的信心，谢谢哥，30岁都还有考研的想法，很佩服","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585551625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73291,"ip_address":""},"score":217382,"extra":""},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1732780,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","nickname":"面向百度编程","note":"","ucode":"8FE04A019D71D1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217403,"discussion_content":"加油！你可以的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585554806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":217382,"ip_address":""},"score":217403,"extra":""}]},{"author":{"id":1443663,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIang00R9vkklnkFCLhzRysNfocr0sLnCdoZwOT3UkulAPefk5BDvd0PfIeQSODSQg1DjKWUmJOaA/132","nickname":"陈迎春","note":"","ucode":"2870BA6D6E5B1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72924,"discussion_content":"请教大佬一个问题，如何定义一个存储接口，实现类即可以是数据库，也可以是文本？比较通用的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575543454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1443663,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIang00R9vkklnkFCLhzRysNfocr0sLnCdoZwOT3UkulAPefk5BDvd0PfIeQSODSQg1DjKWUmJOaA/132","nickname":"陈迎春","note":"","ucode":"2870BA6D6E5B1E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73234,"discussion_content":"举个例子吧，例如定义一个\nprivate CustomerRepository repository;\n\nCustomerRepository 可以继承或是实现 MySql repository, MangoDB repository 或 File repository 等等，每个repository 实现对应的CURD操作。\n\n这样想使用什么存储方式，就让CustomerRepository继承什么父类或者接口，你看怎么样？\n\n这里参考了Spring access data的部分。附上链接：https://spring.io/guides/gs/accessing-data-mongodb/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575555937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72924,"ip_address":""},"score":73234,"extra":""},{"author":{"id":1443663,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIang00R9vkklnkFCLhzRysNfocr0sLnCdoZwOT3UkulAPefk5BDvd0PfIeQSODSQg1DjKWUmJOaA/132","nickname":"陈迎春","note":"","ucode":"2870BA6D6E5B1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":73766,"discussion_content":"首先非常感谢大佬的回复，你的意思我大致是能理解的，但是其中有一个稍微细节一点的东西，不是很明白，比如FileRespository类，是文本操作，不是CURD操作，接口如何设计才能保证统一性呢？\n\n我用代码示例如下：\n\n目前做法是（python代码）\nclass DataStorageInterface:\n    &#34;&#34;&#34;\n    数据存储接口类，各种不同的存储类实现该接口，并且实现接口方法write, read\n    &#34;&#34;&#34;\n    def write(self, data):\n        pass\n\n    def read(self, data):\n        pass\n\n\nclass SqliteStorage(DataStorageInterface):\n    &#34;&#34;&#34;\n    sqlite存储类,实现DataStorageInterface \n    &#34;&#34;&#34;\n    def write(self, sql_cmd):\n        执行sql cmd，将数据插入数据库\n\n\n    def read(self, sql_cmd):\n        执行sql cmd，读取数据\n\nclass TxtStorage(DataStorageInterface):\n    &#34;&#34;&#34;\n    文本存储类，这里就感觉文本存储类，实现write read方法，就不是很合适\n    &#34;&#34;&#34;\n    def write(self, data):\n       这里cmd其实应该是数据\n\n\n    def read(self, data):\n\n\nSqliteStorage 是可以执行CURD操作的，如果定义其他数据库类（MangoDbStorage），那么应用代码基本不需要修改任何代码，我觉的这种情况习下DataStorageInterface接口类设计应该也是合适的;\n\n但是，如果存储类编程了文本存储类，那么这个接口定义的就感觉不太合适，因为文本存储根本就不是CURD操作，我的问题是，有没有办法让设计的接口类，更加通用，就算由数据库存储方式，换成了其他存储方式，也不需要修改应用代码?\n   ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575595298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73234,"ip_address":""},"score":73766,"extra":""},{"author":{"id":1685995,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b9/eb/6bdab896.jpg","nickname":"Murrre","note":"","ucode":"49644059B512BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1443663,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIang00R9vkklnkFCLhzRysNfocr0sLnCdoZwOT3UkulAPefk5BDvd0PfIeQSODSQg1DjKWUmJOaA/132","nickname":"陈迎春","note":"","ucode":"2870BA6D6E5B1E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73863,"discussion_content":"统一传入数据，数据库的实现就拼装sql，运行，文件的实现就是直接执行输入输出流。不要把参数定义为sql_cmd..不知道能不能解答你的疑问。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575603350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73766,"ip_address":""},"score":73863,"extra":""}]}]},{"had_liked":false,"id":158559,"user_name":"醉比","can_delete":false,"product_type":"c1","uid":1248399,"ip_address":"","ucode":"79E65F62BE7809","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/8f/4ebd303a.jpg","comment_is_top":false,"comment_ctime":1575419080,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"362352671944","product_id":100039001,"comment_content":"前一个项目我也完整的实现了整个鉴权流程，需求分析阶段可以说和小争哥分析的功能点几乎一样，拼接参数，进行加密，验证token，验证时间。可到了编程阶段，我还是按照面向过程的方式，拆了几个方法，把功能就实现了。今天给我了一个深刻的感悟，面向对象编程，听起来并不复杂，但他真正的难点在于我学了这么多，对于下一个功能，是不是能够用面向对象的方式来把功能实现。如何做到学以致用，是我们学会知识后，接下来要考虑的问题。","like_count":85,"discussions":[{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75576,"discussion_content":"求瞻仰大佬代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575733953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1740368,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhr1LrBZQTnn5PgyuHUtia6j6tiahZyk44BWeB5LQIqMgTDBdibGKVVopbJWbz83ZWvyVPz9fBl69rw/132","nickname":"Geek_b6e449","note":"","ucode":"8296078ED23637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286658,"discussion_content":"微信的文档写的很清楚的 自己业务可以做参考的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593256209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":75576,"ip_address":""},"score":286658,"extra":""}]},{"author":{"id":1253287,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/a7/d379ca4f.jpg","nickname":"jon","note":"","ucode":"5768A34E292CAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71587,"discussion_content":"代码分享一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575435561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1740368,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhr1LrBZQTnn5PgyuHUtia6j6tiahZyk44BWeB5LQIqMgTDBdibGKVVopbJWbz83ZWvyVPz9fBl69rw/132","nickname":"Geek_b6e449","note":"","ucode":"8296078ED23637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1253287,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/a7/d379ca4f.jpg","nickname":"jon","note":"","ucode":"5768A34E292CAA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286659,"discussion_content":"微信的文档写的很清楚的 自己业务可以做参考的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593256214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":71587,"ip_address":""},"score":286659,"extra":""}]}]},{"had_liked":false,"id":158679,"user_name":"大大。","can_delete":false,"product_type":"c1","uid":1237399,"ip_address":"","ucode":"A6716E46264AC4","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/97/fec494f2.jpg","comment_is_top":false,"comment_ctime":1575432198,"is_pvip":false,"replies":[{"id":"61149","content":"你说得很好，多谢指出啊，确实没必要搞个接口，ApiRequest的设计也依赖了具体的url实现，所以也不是很通用。","user_name":"作者回复","comment_id":158679,"uid":"1190123","ip_address":"","utype":1,"ctime":1575898125,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"259273469958","product_id":100039001,"comment_content":"争哥：设计了一个最顶层的 ApiAuthencator 接口类，为什么要设计出一个顶层的接口，虽然是面向接口编程，但是写成接口，意味着还会有其他的不同实现吗，如果有其他不同的实现，那么接口中的第二个参数的ApiRequest也不一定会适用不同的那个实现的传参，不知道说明白没有","like_count":60,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476805,"discussion_content":"你说得很好，多谢指出啊，确实没必要搞个接口，ApiRequest的设计也依赖了具体的url实现，所以也不是很通用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575898125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1650785,"avatar":"https://static001.geekbang.org/account/avatar/00/19/30/61/50e24e09.jpg","nickname":"煜","note":"","ucode":"3C5A9A55A65FC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202469,"discussion_content":"说说我对设计成接口的一个想法，设计成接口还有另外一个作用，就是封装实现细节，只提供调用接口和详细的注释给其他系统去调用，让调用者不需要去深入了解代码。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1583922198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004264,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/e8/92a2e66d.jpg","nickname":"第二少","note":"","ucode":"4A09D1E7589F67","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302086,"discussion_content":"从业务功能上来说，确实没必要设计成接口；但从调用api的方式上来说，接口鉴权可以做成一个独立的微服务，由需要鉴权的其他微服务调用，通常采用rpc方式，这时候调用方需要依赖的就只是一个鉴权服务的接口，不需要依赖具体实现，因此鉴权服务就有必要设计成接口加默认实现类了，更进一步，以后实现代码修改了，只要接口不变，，调用方代码也不需要修改","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598783430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182372,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","nickname":"张申傲","note":"","ucode":"22D46BC529BA8A","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340814,"discussion_content":"可以抽象一个 RequestAddr 接口，UrlAddr 和 TargetServiceAddr 分别是针对 api 和 rpc 的请求地址的实现类","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610166282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533874,"discussion_content":"赞同楼上 将Apirequest 也变成一个接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638003183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158552,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1575418323,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"250683521491","product_id":100039001,"comment_content":"打卡✔<br>如果是我的话怕是理清功能后，写一个鉴权util，然后所有的方法都塞进去，典型的面向过程了😩","like_count":59,"discussions":[{"author":{"id":1194009,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/19/c8d72c61.jpg","nickname":"木白","note":"","ucode":"BEC459430B293C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223469,"discussion_content":"之前做了一个和这篇文章几乎一样的功能，翻了下代码，就叫ApiSecurityUtil，然后里面全是静态方法。。。确实该反省一下了，用面向对象语言干面向过程的勾当","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1586227744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101774,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/ce/9261eae7.jpg","nickname":"arvin","note":"","ucode":"1A008122D9E34C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71651,"discussion_content":"我是一般这样过程式的做，然后再拆。因为过程式开发更快，我可以更快的验证业务逻辑，然后就是 “拆-提取方法”。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1575444541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2446024,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/GA9AqKGEdib009iaPw3FSluiaeibCXmen7yFIKicZB8qqEtczZJF2WmwBJ738eExnxDmPREIGjqc4BFVXiamyhuCZASw/132","nickname":"一缕阳光","note":"","ucode":"CA89C1B7CB16C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585389,"discussion_content":"但是我快啊，leader喜欢，老板喜欢，同事觉得我开发速度飞快，觉得我牛逼！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1661505329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/af/2039a26b.jpg","nickname":"invzhi","note":"","ucode":"60749CB1BA434D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276852,"discussion_content":"过于真实了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590941174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233193,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","nickname":"DFighting","note":"","ucode":"F3BA2426FF8582","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132117,"discussion_content":"现在要我写估计也是这个编码思路，脑袋里对面向过程设计都形成了一种固话的思维了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578882414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1518793,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2c/c9/462afe28.jpg","nickname":"小白","note":"","ucode":"11FC209D9ED65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590987,"discussion_content":"点醒我了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666198665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1792698,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5a/ba/596d6ae3.jpg","nickname":"MENGXIANGING","note":"","ucode":"B51414E230D6A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580423,"discussion_content":"跟我想的一模一样，太真实了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658156143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544871,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641741374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064266,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/vkqibkINia6dxVOv5zia2zbkmQbrJUsQw8vDfiauib2DfyvJQ4PDUC7M8p4vqFiaQj70yYwIO8JlHFA450KPmgpsXlsw/132","nickname":"Geek_bing","note":"","ucode":"4000A30EDAF71C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389215,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629181279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377515,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622691296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1300306,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d7/52/69a63216.jpg","nickname":"一头牛逼的粉红豹","note":"","ucode":"A6282FD67B2BB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347205,"discussion_content":"真实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612173135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336183,"discussion_content":"+1.。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608522289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1533352,"avatar":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","nickname":"Kang","note":"","ucode":"6FD3642D6455AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304552,"discussion_content":"太真实了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599613127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274787,"avatar":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","nickname":"Michael","note":"","ucode":"C233DF1D224EC1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78325,"discussion_content":"我和你是一个套路","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575987804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71543,"discussion_content":"如果是我不会拆那么细，生产token的功能可能会封装一个tokenutl类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575431865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159210,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1575561565,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"100359809373","product_id":100039001,"comment_content":"1、token加密采用md5<br>2、执行测试类即可<br>花了一小时完成了课后题，望纠正，一起学习.<br>上代码:   https:&#47;&#47;gitee.com&#47;MondayLiu&#47;geek-design.git","like_count":24,"discussions":[{"author":{"id":2096683,"avatar":"","nickname":"Geek_151295","note":"","ucode":"970A611ECFB457","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575816,"discussion_content":"优秀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655122323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1586169,"avatar":"https://static001.geekbang.org/account/avatar/00/18/33/f9/658f5bd2.jpg","nickname":"torchlight","note":"","ucode":"1E05FD0360BEF3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380154,"discussion_content":"看了大佬的学习时长，真的佩服～！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624360563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158771,"user_name":"bboy孙晨杰","can_delete":false,"product_type":"c1","uid":1178683,"ip_address":"","ucode":"D7389FB3368749","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/3b/c6b5b64f.jpg","comment_is_top":false,"comment_ctime":1575448705,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"61704990849","product_id":100039001,"comment_content":"同样的需求我在代码里实现过，但是看了争哥的思路有种耳目一新的感觉；<br>另外我有一点疑惑：“将 token、AppID、时间戳拼接到 URL 中，形成新的 URL”，这个功能点应该是在客户端完成的吧，服务端只需要在验证的时候解析URL，验证token就可以了吧，虽然也是一个功能点，但实际并不需要服务端考虑。","like_count":14,"discussions":[{"author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","nickname":"z.l","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91445,"discussion_content":"服务端也有可能是其他服务的客户端啊","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1576834160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168960,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d6/40/e1a51ac1.jpg","nickname":"Washington","note":"","ucode":"00F5F36416147D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294994,"discussion_content":"同意，我们做的就只是微服务端的功能。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596060337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1498641,"avatar":"https://static001.geekbang.org/account/avatar/00/16/de/11/72f96304.jpg","nickname":"M.O(∩_∩)O","note":"","ucode":"B245C2BA20DDA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81020,"discussion_content":"作为组件，客户端统一调用处理url ，算法一致，这样比较好吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576213140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1631655,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e5/a7/bf2ca8fc.jpg","nickname":"kyle","note":"","ucode":"53F0E544933798","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79763,"discussion_content":"请老师回答。 按照这样的设计，这个类库是同时分发到客户端和服务端的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576110458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1397298,"avatar":"https://static001.geekbang.org/account/avatar/00/15/52/32/bb570f48.jpg","nickname":"向往的生活","note":"","ucode":"0E8DB45357820F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1631655,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e5/a7/bf2ca8fc.jpg","nickname":"kyle","note":"","ucode":"53F0E544933798","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287875,"discussion_content":"我也有同样的疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593576137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":79763,"ip_address":""},"score":287875,"extra":""}]},{"author":{"id":1748647,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ae/a7/8132305c.jpg","nickname":"曲线J","note":"","ucode":"3E43041EB57A5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332552,"discussion_content":"可能是不同服务之间的相互调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607258934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238993,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e7/d1/9d1c283b.jpg","nickname":"randomx","note":"","ucode":"FC93786244932F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297775,"discussion_content":"我也在疑惑，而且第一点还要接受账号密码作为参数，这不是不安全的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597053518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1246707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/f3/5488276f.jpg","nickname":"心雨鑫晴","note":"","ucode":"37A42C19B98F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1238993,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e7/d1/9d1c283b.jpg","nickname":"randomx","note":"","ucode":"FC93786244932F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304153,"discussion_content":"在客户端，是需要用到appId，以及密码来进行摘要信息(也就是token)生成的，使用的都是MD5类似的摘要信息算法。而密码是不会像appId这些一样明文传输的。所以密码是安全的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599482122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297775,"ip_address":""},"score":304153,"extra":""}]},{"author":{"id":1528931,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/63/3a3f7d4c.jpg","nickname":"Giraffe","note":"","ucode":"2F272FFD6CD0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186658,"discussion_content":"你们说的有道理，貌似直接暴露参数就可以了，这个ApiRequest有点增加调用方负担了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582703615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1342184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7a/e8/0930b207.jpg","nickname":"文文小杰","note":"","ucode":"1D38ED443007AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77874,"discussion_content":"我也有同样的疑惑，为什么还需要关注URL呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575950417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1397298,"avatar":"https://static001.geekbang.org/account/avatar/00/15/52/32/bb570f48.jpg","nickname":"向往的生活","note":"","ucode":"0E8DB45357820F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1342184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7a/e8/0930b207.jpg","nickname":"文文小杰","note":"","ucode":"1D38ED443007AD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287876,"discussion_content":"我也有同样的疑惑呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593576160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":77874,"ip_address":""},"score":287876,"extra":""},{"author":{"id":2206073,"avatar":"","nickname":"大虫灬过大江","note":"","ucode":"FBF248F35A35B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1397298,"avatar":"https://static001.geekbang.org/account/avatar/00/15/52/32/bb570f48.jpg","nickname":"向往的生活","note":"","ucode":"0E8DB45357820F","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":348994,"discussion_content":"应该是因为token的加密不可逆, 后端没办法直接从token中解析出东西, 只能根据URL APPID TIMESTAMP 自己用同样的加密算法, 生成token, 在对比2各token是否一致","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1612836613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287876,"ip_address":""},"score":348994,"extra":""}]}]},{"had_liked":false,"id":158703,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1575436621,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"61704978765","product_id":100039001,"comment_content":"对比一下整个流程，发现现在自己做的还是太草率了。<br><br>我也知道写代码其实是整个开发过程中最简单的一件事情，只要前期准备工作做的好，把该分析的都分析清楚，写代码自然就是水到渠成的事情。<br><br>但是我现在的做法是：<br><br>1. 拿到需求之后，先判断需求是否可以同项目中复用；<br>2. 然后拿一个小笔记本把涉及到的需求先设想下，包括类、DB等设计（用法很粗糙，没老师这么细致）<br>3. 用伪代码先把小流程实现<br>4. 写代码<br><br>这里的薄弱环节就是不知道如何更好的使用设计模式，从第三步直接到了第四步，而不存在软件工程中UML的设计，导致很多时候代码写了很多，也一直是在做面向过程的事情，而不是面向对象。<br><br>课程真的很赞，已经不能再夸了。好好跟着课程学习，收获满满，和同学们一起进步","like_count":14},{"had_liked":false,"id":158655,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1575428324,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48820068580","product_id":100039001,"comment_content":"用这种需求分析需求设计的方式，你告诉我一个方法怎么可能超过五十行？编程规范都说方法单个不超过五十行，八十行的。到头来为什么还是超过？就是因为之前都是面向过程编程，token，url等操作都放到一个类的一个方法里面，要全面相过程编程。争哥的这种需求分析需求设计的方式值得学习和效仿，真的香！","like_count":11,"discussions":[{"author":{"id":1206229,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","nickname":"Gopher","note":"","ucode":"3C1F9012BB486D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300916,"discussion_content":"没有说一定不能超过50行的，只是影响阅读体验。做到面向对象，就等于把指指责划分清楚，自然代码就少了，具体到方法就在分在抽象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598319138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158570,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1575419939,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48820060195","product_id":100039001,"comment_content":"设计模式_14<br>我就是画画草稿图就开始写代码的那个人，画图可以避免复杂度在大脑中“爆炸”。。。<br><br># 感想：<br>在入门阶段，我们会遵照一些方法论来行事，比如<br>“寻找名词作为参数”，<br>“寻找动词作为方法”<br>...<br>这些方法通常都可以直接执行，一顿操作解决问题。<br>时间久了，我们开始思考：<br>- 为什么要这样做？<br>- 这些方法的本身优势是什么？<br><br>这个时候，我们才接近了分析的的本质，我们可能沿用这些方法，亦或找到更好的方法，不管怎样，都变得更通透。","like_count":11,"discussions":[{"author":{"id":1049741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","nickname":"weineel","note":"","ucode":"6DC6EF4F256A53","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71608,"discussion_content":"我也是这样，画图是真的可以防止复杂度在大脑中“爆炸”。复杂点的问题，画个简图，太重要了。\n学再多经验，该踩的坑还是要踩的。亲手做过，然后反思，然后接近本质。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575437865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158561,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1575419208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48820059464","product_id":100039001,"comment_content":"我觉得，鉴权和url解析的类就是充血模型。就是domain,就是领域层","like_count":12},{"had_liked":false,"id":164274,"user_name":"Arthur.Li","can_delete":false,"product_type":"c1","uid":1005824,"ip_address":"","ucode":"EC2436A5136C13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","comment_is_top":false,"comment_ctime":1576921058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44526594018","product_id":100039001,"comment_content":"1. 面向对象分析<br>* 产出是详细的需求描述<br><br>2. 如何进行面向对象设计<br>* 产出是类<br>* 划分职责进而识别出有哪些类<br>    * 根据需求描述拆解小功能点（单一职责），罗列出来<br>    * 找到功能相近、操作同样属性的可能归到一个类<br>    * 复杂的需求需要先拆分模块，然后再用这个方法找类<br><br>* 定义类及其属性和方法<br>    * 需求描述中动词作为候选方法、名次作为候选属性<br>    * 并不是所有名次都被定义为类的属性，不属于这个类的可以通过传参<br><br>* 定义类与类之间的交互关系<br>    1. 泛化（Generalization）<br>    简单理解为继承关系<br>    2. 实现（Realization）<br>    一般是指接口和实现类之间的关系<br>    3. 关联（Association）<br>    一种非常弱的关系，包含聚合、组合两种关系。如果 B 类对象是 A 类的成员变量，那 B 类和 A 类就是关联关系。<br>    4. 聚合（Aggregation）<br>    一种包含关系。A 类对象包含 B 类对象，B 类对象的生命周期可以不依赖 A 类对象的生命周期，比如课程与学生之间的关系。`public class A {  private B b;  public A(B b) {    this.b = b;  }}`<br>    5. 组合（Composition）<br>    一种包含关系。A 类对象包含 B 类对象，B 类对象的生命周期跟依赖 A 类对象的生命周期，B 类对象不可单独存在，比如鸟与翅膀之间的关系`public class A {  private B b;  public A() {    this.b = new B();  }}`<br>    6. 依赖（Dependency）<br>    比关联关系更加弱的关系，包含关联关系。<br>* 将类组装起来并提供执行入口<br>    * 独立系统的话可以是main函数<br>    * 可以是一组给外部调用的API接口<br><br>整体看下来对真正面向对象编程好像有了正确的理解， 不过单独自己去实现的时候，又不不会那么周到，还是文中所说，需要练习和经验。","like_count":10},{"had_liked":false,"id":158864,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1575466517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40230172181","product_id":100039001,"comment_content":"组合关系：强调部分与整体的关系，其中包括两种情况，关联性强（大雁与翅膀）的与关联性弱（学生与班级）的。<br>依赖关系：强调对象与对象的临时关系，人开车。","like_count":9},{"had_liked":false,"id":158535,"user_name":"chanllenge","can_delete":false,"product_type":"c1","uid":1213699,"ip_address":"","ucode":"148FC08C90BC58","user_header":"https://static001.geekbang.org/account/avatar/00/12/85/03/1a7d3dd6.jpg","comment_is_top":false,"comment_ctime":1575414705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31640185777","product_id":100039001,"comment_content":"写的太好了，这一次一定要把设计模式学会","like_count":7},{"had_liked":false,"id":158744,"user_name":"大土豆","can_delete":false,"product_type":"c1","uid":1121636,"ip_address":"","ucode":"67445DC3EC9DB0","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/64/52a5863b.jpg","comment_is_top":false,"comment_ctime":1575445768,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27345249544","product_id":100039001,"comment_content":"把UML的6种关系给省略成4种，这知识太干了。就喜欢老师这种实战派。","like_count":6},{"had_liked":false,"id":169085,"user_name":"杨松","can_delete":false,"product_type":"c1","uid":1512517,"ip_address":"","ucode":"FB3C73BC44C94D","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/45/adf079ae.jpg","comment_is_top":false,"comment_ctime":1578271923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23053108403","product_id":100039001,"comment_content":"看完这篇文章扫盲了好多误区，当初对聚合，组合根本分不清，今儿终于明白了。","like_count":5},{"had_liked":false,"id":159898,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1575820960,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23050657440","product_id":100039001,"comment_content":"采用什么方式，要看做的需求有多复杂。<br>（1）如果是日常的维护和升级，我目前的开发模式是：拿到需求后先理解需求，包括业务用例、整体交互、通过这俩分析出系统用例：大多数情况是对现有系统的改造和升级，因此还需要考虑对现有功能的影响，依次加入回归用例。<br><br>拿到用例之后再进行分析和设计，设计的时候最核心的图是时序图、活动图和状态图，类图反而用得不多，看起来自己目前是TDD下的过程式编程。<br><br>（2）如果是一个完整的项目，或者说是超过两周的迭代，就会再加一层系统设计、模块设计的环节，然后按照前面的流程细化执行<br><br><br>","like_count":5},{"had_liked":false,"id":158702,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1575436145,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23050272625","product_id":100039001,"comment_content":"需求分析过程中，或者分析完，不要直接就想着数据库表结构怎么设计。<br>基本是按照老师说的这个流程分析下来，再对外暴露接口，最后是如何存储，存储的结构视存储方式而定，比如存到DB，Redis，MongoDB等等，还有可能会切换实现。<br>整体就是做好需求分析拆解，根据功能边界模块划分，模块内部还可以分子模块，再做好每个模块内部功能分析实现，以及模块之间的协作。","like_count":5},{"had_liked":false,"id":158592,"user_name":"DigDeeply","can_delete":false,"product_type":"c1","uid":1239008,"ip_address":"","ucode":"113F4D755A1FEC","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/e0/33521e13.jpg","comment_is_top":false,"comment_ctime":1575421296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23050257776","product_id":100039001,"comment_content":"针对以往的贫血模型的开发经验，基本就是通过数据建模来实现的，都是先把需求拆分出实体，针对实体定义数据字段，也就是属性，再梳理出方法。这种思路就很难引导自己去进行抽象。最后出来的代码也就是面向过程了😂","like_count":5},{"had_liked":false,"id":170441,"user_name":"LAMBO","can_delete":false,"product_type":"c1","uid":1214041,"ip_address":"","ucode":"10EDE0FC134FA8","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/59/e8f58a2a.jpg","comment_is_top":false,"comment_ctime":1578616046,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18758485230","product_id":100039001,"comment_content":"这节最大的收获就是，终于弄清楚了类与类之间的关系：泛华（继承）、实现、依赖、关联、聚合、组合。","like_count":4,"discussions":[{"author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372715,"discussion_content":"我也是，虽然设计模式的书上总是会举例子，比如组合会说小鸟和翅膀的关系，但是只有看到了争哥的代码，才明白在代码实现上是这种依赖关系","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620441001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158517,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1514882,"ip_address":"","ucode":"2F1FA3519FAB50","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyiafvkibXnTOpIJxlhndHpSDMsqja9AajKYtYgGEGtFWtBb2Mg8DRVjqlWyIxl1piaT4qpMkwerQUg/132","comment_is_top":false,"comment_ctime":1575391658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18755260842","product_id":100039001,"comment_content":"打卡，需要消化一下今天的课程","like_count":4},{"had_liked":false,"id":244797,"user_name":"ThinkingQuest","can_delete":false,"product_type":"c1","uid":1118560,"ip_address":"","ucode":"597D0C00DAEFE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0SDRac7XoordnKYgDLhz5wxAOtE6xqcsSywsywEtKQAR7xicBZQ6ceYftfZjl4Ivq3a5dzvRhYkn2GcUWiaQK7ZQ/132","comment_is_top":false,"comment_ctime":1598682309,"is_pvip":false,"replies":[{"id":"90133","content":"嗯嗯，你说的也对，那应该用boolean值作为返回值吗？那携带的信息就很少呀，只有true、false，不知道失败的原因。我觉得选择exception就是一种设计上的权衡。","user_name":"作者回复","comment_id":244797,"uid":"1190123","ip_address":"","utype":1,"ctime":1598833871,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"14483584197","product_id":100039001,"comment_content":"ApiAuthenticator接口的两个方法，都声明为返回void， 用Exception来控制token过期或不合法，这样好吗？<br><br>token过期或不合法，在业务上应该是一种正常的，需要程序逻辑分支来处理的情形吧， 用throw runtime exception的方式来处理， 感觉上等于是把exception用于控制执行流程了。 <br><br>关于这个，不知道应该怎么考虑。","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504704,"discussion_content":"嗯嗯，你说的也对，那应该用boolean值作为返回值吗？那携带的信息就很少呀，只有true、false，不知道失败的原因。我觉得选择exception就是一种设计上的权衡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598833871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162288,"user_name":"瑞泉","can_delete":false,"product_type":"c1","uid":1111565,"ip_address":"","ucode":"D38E24A98FDAE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/0d/e16dff4e.jpg","comment_is_top":false,"comment_ctime":1576492747,"is_pvip":false,"replies":[{"id":"62283","content":"是的 还没空整理 稍等一阵子吧","user_name":"作者回复","comment_id":162288,"uid":"1190123","ip_address":"","utype":1,"ctime":1576804139,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"14461394635","product_id":100039001,"comment_content":"王争老师，代码是在这个地址吗？https:&#47;&#47;github.com&#47;wangzheng0822&#47;codedesign，是空的","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478003,"discussion_content":"是的 还没空整理 稍等一阵子吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576804139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381013,"discussion_content":"2021.6.28 还是空的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624866110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336184,"discussion_content":"2020.12.21了，里面还是什么都没有。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608522387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041994,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiaeTzf4V8ib4xKcYjWEIflBSqkjbpkscoaedppgnBAD9ZAibjYSz0DNSJQw8icz7xljEgbNQ5hrzPAA/132","nickname":"liudu_ec","note":"","ucode":"E299071BD1DFA8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302074,"discussion_content":"2020年8月30号了，还是空的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598780384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161209,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1576148317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14461050205","product_id":100039001,"comment_content":"这两天刚好在看许式伟老师的课。<br>其中提到的正交分解，对业务模块，业务流程进行正交分解。<br>原话：业务分解就是最小化的核心系统，加上多个正交分解的周边系统。核心系统一定要最小化，要稳定。坚持不要往核心系统中增加新功能，这样你的业务架构就不可能有臭味。换句话说，怎么做业务分解？业务分解就是最小化的核心系统，加上多个正交分解的周边系统。核心系统一定要最小化，要稳定。坚持不要往核心系统中增加新功能，这样你的业务架构就不可能有臭味。<br>这是我们的信仰。重要的话要说三遍<br>文章链接：https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;173619<br>","like_count":3},{"had_liked":false,"id":237025,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1595659672,"is_pvip":false,"replies":[{"id":"88027","content":"isExpired()只用来判断是否过期，match()用来判断是否错误","user_name":"作者回复","comment_id":237025,"uid":"1190123","ip_address":"","utype":1,"ctime":1596112185,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10185594264","product_id":100039001,"comment_content":"王老师，你好，我有个问题，针对：AuthToken中，isExpired()方法，这里返回的是布尔类型，那么，如果我传的是<br>- 错误的token<br>- 正确的token但是过期<br>这两类都会判断成false，那么我怎么知道我的token是格式问题还是过期问题呢？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502293,"discussion_content":"isExpired()只用来判断是否过期，match()用来判断是否错误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596112185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159632,"user_name":"unreal","can_delete":false,"product_type":"c1","uid":1105905,"ip_address":"","ucode":"43F32FBA2784E7","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/f1/d9081468.jpg","comment_is_top":false,"comment_ctime":1575709233,"is_pvip":false,"replies":[{"id":"61131","content":"多谢建议，你说的没错，ApiRequest确实还是依赖了url","user_name":"作者回复","comment_id":159632,"uid":"1190123","ip_address":"","utype":1,"ctime":1575896622,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"10165643825","product_id":100039001,"comment_content":"有个问题，ApiRequest叫法虽然更加通用，但实际创建接口命名还是依赖实现了吧，都是基于url的，还是我理解问题？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477126,"discussion_content":"多谢建议，你说的没错，ApiRequest确实还是依赖了url","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575896622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205184,"discussion_content":"所以搞个泛型应该更合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584276720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159611,"user_name":"帆大肚子","can_delete":false,"product_type":"c1","uid":1529040,"ip_address":"","ucode":"3DB11DB2FA1802","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/d0/4e1fc664.jpg","comment_is_top":false,"comment_ctime":1575704237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165638829","product_id":100039001,"comment_content":"目前我觉得需要学会的是转化自己的面向过程编程的思想","like_count":2},{"had_liked":false,"id":158533,"user_name":"与雨日肇事的爱","can_delete":false,"product_type":"c1","uid":1288032,"ip_address":"","ucode":"A3B88A1F4AF2D5","user_header":"https://static001.geekbang.org/account/avatar/00/13/a7/60/f175d953.jpg","comment_is_top":false,"comment_ctime":1575412906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165347498","product_id":100039001,"comment_content":"打卡","like_count":2},{"had_liked":false,"id":182368,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1582774748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877742044","product_id":100039001,"comment_content":"老王还是一如既往的让人敬佩,从你数据结构专栏学习,追到这里了,讲课通俗已送,希望老王继续出更过的专栏,帮助我这种搬砖码农提升自己,非常感谢王争老师!","like_count":1},{"had_liked":false,"id":172677,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1579250080,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5874217376","product_id":100039001,"comment_content":"少说废话，直接上代码：https:&#47;&#47;github.com&#47;xuziyang&#47;codedesign&#47;tree&#47;master&#47;auth","like_count":1,"discussions":[{"author":{"id":1940562,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9c/52/dc770378.jpg","nickname":"yang","note":"","ucode":"67C86E09BA6E4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370250,"discussion_content":"哦，这样的作业我就看明白了。多谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619344949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169950,"user_name":"小虫子","can_delete":false,"product_type":"c1","uid":1435887,"ip_address":"","ucode":"3DBCDFB69D3638","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLibibbBhyIQKpSF9JrG7fWxWxQxpicVice1lNj5VtqzgTqhE8PUSBFFh3UxMzgJzU4UKXHZYhmk6wdbQ/132","comment_is_top":false,"comment_ctime":1578481367,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5873448663","product_id":100039001,"comment_content":"interface CredentialStorage{<br>    public function getPasswordByAppId($appId);<br>}<br><br><br>class AuthToken{<br><br>    public  $appId;<br>    private $password;<br>    public  $token;<br>    public  $expireTimeInterval = 60;<br><br>    public function __construct($appId,$password)<br>    {<br>        $this-&gt;appId = $appId;<br>        $this-&gt;password = $password;<br>        $this-&gt;createToken($appId,$password);<br>    }<br><br>    public function createToken($appId,$password){<br>        $str = $appId.$password.time();<br>        $this-&gt;token = md5($str);<br>        return $this-&gt;token;<br>    }<br>    public function isExpired($timestamp){<br>        if(time()-$timestamp&gt;$this-&gt;expireTimeInterval)<br>            return false;<br>        else<br>            return true;<br><br>    }<br>    public function match($token){<br>        if($token==$this-&gt;token)<br>            return true;<br>        else<br>            return false;<br><br>    }<br><br>}<br><br><br>class ApiRequest{<br><br>    private $token;<br>    private $appId;<br>    private $createTime;<br><br>    public function __construct($appId,$token,$createTime)<br>    {<br>        $this-&gt;appId = $appId;<br>        $this-&gt;token = $token;<br>        $this-&gt;createTime = $createTime;<br>    }<br><br>    public function buildFromUrl()<br>    {<br>        $url = &#39;appid=&#39;.$this-&gt;appId.&#39;&amp;ts=&#39;.$this-&gt;createTime.&#39;&amp;token=&#39;.$this-&gt;token;<br>        return $url;<br>    }<br>    public function getToken($url){<br>        $arr = parse_url($url);<br>        return $arr[&#39;token&#39;];<br>    }<br>    public function getAppId($url){<br>        $arr = parse_url($url);<br>        return $arr[&#39;appid&#39;];<br>    }<br>    public function getCreateTime($url){<br>        $arr = parse_url($url);<br>        return $arr[&#39;ts&#39;];<br>    }<br><br><br>}<br><br>class MysqlCredentialStorage implements CredentialStorage{<br>    public function getPasswordByAppId($appId)<br>    {<br>        return &#39;123456&#39;;<br>    }<br>}","like_count":1,"discussions":[{"author":{"id":1298631,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d0/c7/62de0458.jpg","nickname":"谭小谭","note":"","ucode":"C7928BEDFF4EDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375245,"discussion_content":"代码不那么全呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621528393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167410,"user_name":"Kaybee","can_delete":false,"product_type":"c1","uid":1106900,"ip_address":"","ucode":"B94E578F12A365","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/d4/22d48e2a.jpg","comment_is_top":false,"comment_ctime":1577786027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872753323","product_id":100039001,"comment_content":"课后作业：<br>https:&#47;&#47;github.com&#47;LiuKay&#47;design-patterns&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;kay&#47;practice&#47;auth","like_count":1},{"had_liked":false,"id":159450,"user_name":"Jony","can_delete":false,"product_type":"c1","uid":1688362,"ip_address":"","ucode":"07F77487BFBF7F","user_header":"https://static001.geekbang.org/account/avatar/00/19/c3/2a/07ba6663.jpg","comment_is_top":false,"comment_ctime":1575626144,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"5870593440","product_id":100039001,"comment_content":"老师，我有个问题，当客户端跟服务端的时间不同步时，鉴权token不是都检验不通过了吗？怎么才能保证客户端跟服务端时间同步？","like_count":1,"discussions":[{"author":{"id":1631655,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e5/a7/bf2ca8fc.jpg","nickname":"kyle","note":"","ucode":"53F0E544933798","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79712,"discussion_content":"都采用UTC时间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576106092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275580,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/bc/0e8e0ef8.jpg","nickname":"刘洋","note":"","ucode":"9C4DEDDF6CB7DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76086,"discussion_content":"可以用一个时间同步服务器","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575809079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1786752,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/43/80/b1ae32cd.jpg","nickname":"Kenneth。🌞","note":"","ucode":"299ADF236395CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381910,"discussion_content":"使用硬件的时间就可以了，不会偏差很大，对于token 有效期不会说一定要精确到秒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625285422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591810,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4a/02/1db217d5.jpg","nickname":"宇园","note":"","ucode":"7D6E7DBBD20C76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373281,"discussion_content":"用的是客户端传过来的时间戳，先对比是否过时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620690169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591810,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4a/02/1db217d5.jpg","nickname":"宇园","note":"","ucode":"7D6E7DBBD20C76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373280,"discussion_content":"用的是客户端传过来的时间戳，先对比是否过时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620690168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159126,"user_name":"陈迎春","can_delete":false,"product_type":"c1","uid":1443663,"ip_address":"","ucode":"2870BA6D6E5B1E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIang00R9vkklnkFCLhzRysNfocr0sLnCdoZwOT3UkulAPefk5BDvd0PfIeQSODSQg1DjKWUmJOaA/132","comment_is_top":false,"comment_ctime":1575543392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870510688","product_id":100039001,"comment_content":"有关数据存储接口定义，有如下疑问： 数据存储会支持数据库（sqlite, mysql, redis）或者文本，那么我这个接口如何定义呢？我感觉下面的做法有点问题，就是数据库和文本存储方式接口不是很兼容<br><br><br>目前做法是（python代码）<br>class DataStorageInterface:<br>    &quot;&quot;&quot;<br>    数据存储接口类<br>    &quot;&quot;&quot;<br>    def write(self, cmd):<br>        pass<br><br>    def read(self, cmd):<br>        pass<br><br><br>class SqliteStorage(DataStorageInterface):<br>    &quot;&quot;&quot;<br>    sqlite存储类<br>    &quot;&quot;&quot;<br>    def write(self, cmd):<br>        执行cmd，将数据插入数据库<br><br><br>    def read(self, cmd):<br>        执行cmd，读取数据<br><br>class TxtStorage(DataStorageInterface):<br>    &quot;&quot;&quot;<br>    文本存储<br>    &quot;&quot;&quot;<br>    def write(self, cmd):<br>       这里cmd其实应该是数据<br><br><br>    def read(self, cmd):<br>    ","like_count":1},{"had_liked":false,"id":158645,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1575426534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870393830","product_id":100039001,"comment_content":"令狐大侠练独孤九剑，张无忌练太级拳。<br>在实战时都是：忘光了吗？差不多，还记得两成。忘光了吗？是的，不记得了。好，开打，稳赢！","like_count":1},{"had_liked":false,"id":158597,"user_name":"2018","can_delete":false,"product_type":"c1","uid":1107371,"ip_address":"","ucode":"4C2CD47AD70177","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/ab/6fab2492.jpg","comment_is_top":false,"comment_ctime":1575421524,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5870388820","product_id":100039001,"comment_content":"第一遍看完，感觉还没有get到点😞😞","like_count":1},{"had_liked":false,"id":158563,"user_name":"傲慢与偏执，","can_delete":false,"product_type":"c1","uid":1236496,"ip_address":"","ucode":"E9F81223DFAD24","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","comment_is_top":false,"comment_ctime":1575419253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870386549","product_id":100039001,"comment_content":"一遍不好理解 第二遍我再来...","like_count":1},{"had_liked":false,"id":158560,"user_name":"　　","can_delete":false,"product_type":"c1","uid":1560563,"ip_address":"","ucode":"0D736D44A24C56","user_header":"https://static001.geekbang.org/account/avatar/00/17/cf/f3/48fc6781.jpg","comment_is_top":false,"comment_ctime":1575419118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870386414","product_id":100039001,"comment_content":"难度一下子提升了 ……","like_count":1},{"had_liked":false,"id":158536,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1575415731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870383027","product_id":100039001,"comment_content":"对鉴权又有了更深的了解，并且对面向对象设计有了一些理解，的确做开发的时候我几乎没有按照这样设计，都是像后边说的在脑海或者草纸上简单设计下就开始写实现。的确设计的再好在实现的时候也会有想不到的地方。","like_count":1},{"had_liked":false,"id":357763,"user_name":"怀英","can_delete":false,"product_type":"c1","uid":1394143,"ip_address":"江苏","ucode":"E2838AF06FB300","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/df/97a71dc8.jpg","comment_is_top":false,"comment_ctime":1663624497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663624497","product_id":100039001,"comment_content":"我认为，在实际的开发中，除了上述几个方向外，经验还体现在设计的时候有没有预留“口子”。就比如设计URL类的时候，就想到以后传进来的可能不仅仅只是URL，因此要预先留个“口子”。","like_count":0},{"had_liked":false,"id":356952,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662720346,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662720346","product_id":100039001,"comment_content":"老师讲的这个实际上也是一个充血模型方式，实际上很多就是贫血模型方案。先定义bean,然后写repository ,service,controller。repositroy和controller 很简单，没有什么业务，就是service需要填充业务。那充血模型相当于是 再bean中，就把用到的方法直接定义好了。<br><br>老师对接口的抽象很恰到好处啊，这篇适合多次读","like_count":0},{"had_liked":false,"id":356671,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"中国香港","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662482083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662482083","product_id":100039001,"comment_content":"如何进行面向对象设计开发：<br>   1.拿到需求进行功能罗列，进行归类，理清类之间的交互和关系。如果涉及需求多，应该先按模块划分职责，在罗列具体的功能点。<br>  2. 定义具体的类属性和方法。<br>  3.定义类之间的交互关系： 泛化，组合，关联，聚合。<br>  4.将类组装起来并提供入口。","like_count":0},{"had_liked":false,"id":338712,"user_name":"金旭","can_delete":false,"product_type":"c1","uid":1644194,"ip_address":"","ucode":"2FE7B4B8CE4A07","user_header":"https://static001.geekbang.org/account/avatar/00/19/16/a2/789d296e.jpg","comment_is_top":false,"comment_ctime":1647680138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647680138","product_id":100039001,"comment_content":"请问 c++如何实现 类间“实现” 这种关系的？<br>c++中的接口类 是用 抽象类代替吗？<br>那实现类通过继承抽象类来实现的话，那不是这里说的 类间&quot;泛化&quot; 关系吗？？？？","like_count":0},{"had_liked":false,"id":337172,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1646659547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646659547","product_id":100039001,"comment_content":"很认同作者的这几步过程，深有体会。<br>1.划分职责进行识别出有哪些类。<br>2.定义类及其属性和方法。<br>3.定义类与类之间的交互关系。<br>4.将类组装起来，并提供执行入口。main或者API","like_count":0},{"had_liked":false,"id":327724,"user_name":"纵不朽","can_delete":false,"product_type":"c1","uid":1877862,"ip_address":"","ucode":"DB2CA2C46B2EF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","comment_is_top":false,"comment_ctime":1640251548,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640251548","product_id":100039001,"comment_content":"sha加密后相等，就一定代表原数据相等吗","like_count":0},{"had_liked":false,"id":311716,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1631421413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631421413","product_id":100039001,"comment_content":"1、划分职责模块，定义类<br>2、类对应的属性和方法<br>3、梳理类之间的关系，泛化、实现、组合、依赖<br>4、提供程序运行的入口，main或外部访问的接口","like_count":0},{"had_liked":false,"id":310051,"user_name":"Geek_9302c2","can_delete":false,"product_type":"c1","uid":2709278,"ip_address":"","ucode":"42641A1CA55A4F","user_header":"","comment_is_top":false,"comment_ctime":1630470795,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630470795","product_id":100039001,"comment_content":"   AuthToken serverAuthToken = AuthToken.generate(originalUrl, appId, password, timestamp);  <br>  if (!serverAuthToken.match(clientAuthToken)) {      throw new RuntimeException(&quot;Token verfication failed.&quot;);    }<br><br>generate 是自定义方法还是java原生方法呀？<br>match传入的参数是对象，这里是比较两个对象相等吗？为什么不直接传入token值做比较","like_count":0},{"had_liked":false,"id":309969,"user_name":"Geek_386d5a","can_delete":false,"product_type":"c1","uid":2421583,"ip_address":"","ucode":"68C81F878523B8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLcicqTaDNu4lrREC3mDgLfLrsicmkwXlJDRD9muM7vicUWdEv8grsw9ycdm6MIVXK7ydyIon71gLfDw/132","comment_is_top":false,"comment_ctime":1630418722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630418722","product_id":100039001,"comment_content":"老师您好，我有个疑惑为什么要把 CredentialStorage 作为属性在构造方法传入而不是像API request一样在方法中传入呢？","like_count":0},{"had_liked":false,"id":304229,"user_name":"Geek_00e01b","can_delete":false,"product_type":"c1","uid":1597071,"ip_address":"","ucode":"BC76A83B53D0EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe9iavda8ia7vNkbMVEHsCKs43l6U6HGWibiaxxKd9PuiaYu5wRedicC96PLicZ9VIh0ic5Jg8YHPrta3IAQ/132","comment_is_top":false,"comment_ctime":1627298950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627298950","product_id":100039001,"comment_content":"课程中的实战案例比较简单，显示项目中可能会复杂的多，在没有掌握面向对象设计精髓之前，感觉还是比较困难的","like_count":0},{"had_liked":false,"id":302568,"user_name":"Geek_设计模式之美","can_delete":false,"product_type":"c1","uid":2690172,"ip_address":"","ucode":"59263416E65594","user_header":"","comment_is_top":false,"comment_ctime":1626264950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626264950","product_id":100039001,"comment_content":"都没用个https吗?","like_count":0},{"had_liked":false,"id":302280,"user_name":"九尾","can_delete":false,"product_type":"c1","uid":2429969,"ip_address":"","ucode":"3E6BDF7B9C78FC","user_header":"https://static001.geekbang.org/account/avatar/00/25/14/11/f1220081.jpg","comment_is_top":false,"comment_ctime":1626154672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626154672","product_id":100039001,"comment_content":"以前自己也是类似的写法，但总感觉少了点什么，现在看到这个流程，感觉系统性的方法论有了","like_count":0},{"had_liked":false,"id":301595,"user_name":"Geek__126303fc81f7","can_delete":false,"product_type":"c1","uid":1453774,"ip_address":"","ucode":"D256622360E1B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibFY0KibR500NUAibZqsZCqg8Z6XicEaqr23oZTUlFcQaMXAlhETpVBXPAiamJ1IYcc7ibn7ZGdmUycxAicibkhtSc3xYA/132","comment_is_top":false,"comment_ctime":1625755590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625755590","product_id":100039001,"comment_content":"今天记住了一个概念就是类与类之间的关系<br>实现 组合 泛化 依赖","like_count":0},{"had_liked":false,"id":300543,"user_name":"小帅","can_delete":false,"product_type":"c1","uid":1239663,"ip_address":"","ucode":"4129A7E9427FFC","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/6f/09de5f65.jpg","comment_is_top":false,"comment_ctime":1625212864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625212864","product_id":100039001,"comment_content":"按自己的惯性思维做了下实现 应该是妥妥的面向过程了 请指教<br><br>public class UrlAuthImpl implements IUrlAuth{<br>    &#47;&#47;接口注入  查询app对应密码<br>    private IAppInfoService appInfo;<br><br>    @Override<br>    public boolean auth(String url) {<br>        &#47;&#47;1:解析URL<br>        ApiRequest request =UrlUtil.paraseUrl(url);<br>        &#47;&#47;2:解析时间 根据当前时间判断调用时间<br>        Date timsstamp =request.getTimestamp();<br>        if(!UrlUtil.checkTime(timsstamp)){<br>            return false;<br>        }<br>        String appId = request.getAppId();<br>        &#47;&#47;3:根据appId查询密钥 校验token<br>        String password = appInfo.getPassWorld(appId);<br>        if(!UrlUtil.checkToken(request,password)){<br>            return false;<br>        }<br>        return true;<br>    }<br>}","like_count":0},{"had_liked":false,"id":293177,"user_name":"cosz3","can_delete":false,"product_type":"c1","uid":1218665,"ip_address":"","ucode":"B9023D4A088CF2","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/69/5a1c6620.jpg","comment_is_top":false,"comment_ctime":1621255352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621255352","product_id":100039001,"comment_content":"可以使用 client 和 server 来做类的划分么？","like_count":0},{"had_liked":false,"id":292094,"user_name":"宇园","can_delete":false,"product_type":"c1","uid":1591810,"ip_address":"","ucode":"7D6E7DBBD20C76","user_header":"https://static001.geekbang.org/account/avatar/00/18/4a/02/1db217d5.jpg","comment_is_top":false,"comment_ctime":1620690110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620690110","product_id":100039001,"comment_content":"auth 方法是否应该返回 bool 更合适？","like_count":0},{"had_liked":false,"id":291908,"user_name":"栾~龟虽寿！","can_delete":false,"product_type":"c1","uid":1504671,"ip_address":"","ucode":"219B38C08979FE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/9f/1509d389.jpg","comment_is_top":false,"comment_ctime":1620601615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620601615","product_id":100039001,"comment_content":"打卡 ，走过的路，每一步都算数。我只需要对自己负责，才是第一步。","like_count":0},{"had_liked":false,"id":290738,"user_name":"Geek_9dbc25","can_delete":false,"product_type":"c1","uid":2242904,"ip_address":"","ucode":"6CB31893173165","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIHxTg3tYriaCXiccCf7xUl9QHibAhCMBKQ2oCicvgcuHCo4ULSguISXeHzxM9a8fFD7icfy3OgXibvUNxw/132","comment_is_top":false,"comment_ctime":1619711528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619711528","product_id":100039001,"comment_content":"学到了！1.职责划分判断有哪些类 2.定义类的属性和方法 3.找出类与类的交互 4.类组装好，并提供执行入口！","like_count":0},{"had_liked":false,"id":290379,"user_name":"greatD","can_delete":false,"product_type":"c1","uid":2586312,"ip_address":"","ucode":"CB0588F9AB02F5","user_header":"","comment_is_top":false,"comment_ctime":1619519119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619519119","product_id":100039001,"comment_content":"学到了，感谢争哥。","like_count":0},{"had_liked":false,"id":290065,"user_name":"yang","can_delete":false,"product_type":"c1","uid":1940562,"ip_address":"","ucode":"67C86E09BA6E4B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9c/52/dc770378.jpg","comment_is_top":false,"comment_ctime":1619343448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619343448","product_id":100039001,"comment_content":"java写的比较少，请问老师，AuthToken的create函数里的参数Map&lt;String,String&gt;params是什么意思？我没有看懂","like_count":0},{"had_liked":false,"id":285835,"user_name":"发飙的蜗牛","can_delete":false,"product_type":"c1","uid":1800868,"ip_address":"","ucode":"B2D96A2D0B6BA4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7a/a4/79ffe77c.jpg","comment_is_top":false,"comment_ctime":1617027032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617027032","product_id":100039001,"comment_content":"在明确需求以后，也可以考虑使用TDD的方法在反推我们的代码，不过对于类的设计还是要的，哈哈哈！","like_count":0},{"had_liked":false,"id":284192,"user_name":"花轮君","can_delete":false,"product_type":"c1","uid":1044639,"ip_address":"","ucode":"A4F27CC1C38D3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f0/9f/6689d26e.jpg","comment_is_top":false,"comment_ctime":1616118046,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616118046","product_id":100039001,"comment_content":"老师，有一个疑问，组合和依赖感觉没有很大的差异","like_count":0},{"had_liked":false,"id":283538,"user_name":"Graham","can_delete":false,"product_type":"c1","uid":1994570,"ip_address":"","ucode":"C2545DE16EC3DD","user_header":"","comment_is_top":false,"comment_ctime":1615811691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615811691","product_id":100039001,"comment_content":"充血和贫血就在于，贫血就是domain的action都在service层，而充血模式就是domain的action就在它本身，因为本身domain的原因，很好的就进行来业务归类，从大局来讲，会更清晰，也便于他人阅读理解代码。<br><br>而本章将的面向对象设计，总结来讲：把所有需要实现的动作列举出来后，抽出那些有公用domain的行为，然后进行封装设计。而传统的开发，<br>会根据动作设计domain的字段去满足该实现的动作，然后编写实体类，编写具体动作的service 层。<br><br>如果按照充血模式，就是把动作封装到各自强相关的domain里面去。<br><br>挺好","like_count":0},{"had_liked":false,"id":280008,"user_name":"DreamHeng","can_delete":false,"product_type":"c1","uid":1599490,"ip_address":"","ucode":"5562BFD8375138","user_header":"https://static001.geekbang.org/account/avatar/00/18/68/02/2d394d89.jpg","comment_is_top":false,"comment_ctime":1614052309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614052309","product_id":100039001,"comment_content":"其实DDD设计的时候也是可以想到设计的，但是在开发过程中我们总会遇到问题，然后在解决这些问题的时候总是想解决了这个问题就行了，并没有从设计角度分析，这就会导致代码越写越垃圾","like_count":0},{"had_liked":false,"id":279828,"user_name":"naijiz","can_delete":false,"product_type":"c1","uid":1108816,"ip_address":"","ucode":"7EA03F41E3DA33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/50/21cb3c67.jpg","comment_is_top":false,"comment_ctime":1613977326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613977326","product_id":100039001,"comment_content":"这UML图怎么做的，好漂亮","like_count":0},{"had_liked":false,"id":279605,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1613860704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613860704","product_id":100039001,"comment_content":"谢谢老师清晰的思路，一步一步很细致的讲解怎么破一个含糊的需求。我觉得在实践中需要把握一个度，既要考虑到将来扩展的借口，但是也不能overdesign","like_count":0},{"had_liked":false,"id":276349,"user_name":"世杰","can_delete":false,"product_type":"c1","uid":2415102,"ip_address":"","ucode":"6BC305EF6D525B","user_header":"https://static001.geekbang.org/account/avatar/00/24/d9/fe/7b151abf.jpg","comment_is_top":false,"comment_ctime":1611891638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611891638","product_id":100039001,"comment_content":"根据真实项目来进行改造：<br>   1、签名算法，参数经ascii顺序排序后，尾部加上秘钥键值对，进行MD5加密，同时转为大写<br>   2、去除ApiRequest类，将参数转为map，排序后进行加密校验<br>   3、去除URL，只对参数进行加密<br>项目地址：https:&#47;&#47;gitee.com&#47;fengzhili123_admin&#47;design_parttern&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;wangzheng&#47;auth","like_count":0},{"had_liked":false,"id":276331,"user_name":"世杰","can_delete":false,"product_type":"c1","uid":2415102,"ip_address":"","ucode":"6BC305EF6D525B","user_header":"https://static001.geekbang.org/account/avatar/00/24/d9/fe/7b151abf.jpg","comment_is_top":false,"comment_ctime":1611887676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611887676","product_id":100039001,"comment_content":"ApiRequest类做成接口是不是更合适一点","like_count":0},{"had_liked":false,"id":275987,"user_name":"我不是黄蓉我不会武功","can_delete":false,"product_type":"c1","uid":2416157,"ip_address":"","ucode":"E4BE01B01AF1BB","user_header":"https://static001.geekbang.org/account/avatar/00/24/de/1d/c1bd26dc.jpg","comment_is_top":false,"comment_ctime":1611737423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611737423","product_id":100039001,"comment_content":"认真看完了这节课程，有一种醍醐灌顶的感觉，以前的在设计方面确实做的不好，面对需求直接就想到如何实现，几乎是完全省略了分析设计环节，老师的这个面向对象分析和设计的思路让我重新认识了OOA和OOD，接下来就是把老师讲的思路尝试应用到实践工作中","like_count":0},{"had_liked":false,"id":273440,"user_name":"周三岁","can_delete":false,"product_type":"c1","uid":2234342,"ip_address":"","ucode":"155BF30F071F39","user_header":"","comment_is_top":false,"comment_ctime":1610595572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610595572","product_id":100039001,"comment_content":"听君一席话 胜读十年书 ，老师讲的太好了","like_count":0},{"had_liked":false,"id":271294,"user_name":"前人种树","can_delete":false,"product_type":"c1","uid":1307269,"ip_address":"","ucode":"64D1B7F87B03E2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f2/85/7d3ce959.jpg","comment_is_top":false,"comment_ctime":1609515767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609515767","product_id":100039001,"comment_content":"ApiRequest 类的构造方法是 ApiRequest(String BaseUrl, String token, long timestamp, String appId), 还应该有个 获取 拼接完成的url（GetAuthedUrl），或 send的方法吧，毕竟这个动作是客户端操作的，要请求到服务端才会涉及到校验","like_count":0},{"had_liked":false,"id":264807,"user_name":"WolvesLeader","can_delete":false,"product_type":"c1","uid":1103839,"ip_address":"","ucode":"33610E19CA2E96","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/df/fc0a6709.jpg","comment_is_top":false,"comment_ctime":1606657643,"is_pvip":false,"replies":[{"id":"96059","content":"没怎么看懂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700518,"ip_address":"","comment_id":264807,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1606657643","product_id":100039001,"comment_content":"大佬，我想问一下，怎么改成提供token的服务呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510689,"discussion_content":"没怎么看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103839,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d7/df/fc0a6709.jpg","nickname":"WolvesLeader","note":"","ucode":"33610E19CA2E96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331870,"discussion_content":"就是看了您提供的代码，感觉非常棒，但是我不太知道怎么能接入到我们的项目中，谢大佬指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606998013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261126,"user_name":"航哥很帅","can_delete":false,"product_type":"c1","uid":1145270,"ip_address":"","ucode":"23A1CB2A3723AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/b6/faaa95a2.jpg","comment_is_top":false,"comment_ctime":1605224511,"is_pvip":true,"replies":[{"id":"96155","content":"总结的到位","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606701544,"ip_address":"","comment_id":261126,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605224511","product_id":100039001,"comment_content":"面型对象设计主要分为4个步骤：<br><br><br>1.根据需求设计需要的类；<br>2.确定类中的属性和方法，确定属性一般根据需求分析中的名称，确定方法一般根据需求分析中的动词；<br>3.确定类和类之间的关系，这些关系一般包括：泛化（继承）、实现、组合、依赖；<br>4.将类封装起来并提供执行的入口，这个入口就是这段代码运行起来的入口。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509382,"discussion_content":"总结的到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258248,"user_name":"Mao","can_delete":false,"product_type":"c1","uid":1060202,"ip_address":"","ucode":"14CC85BC590A71","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/6a/323163df.jpg","comment_is_top":false,"comment_ctime":1604359534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604359534","product_id":100039001,"comment_content":"列出功能，分解动作，合并属性，筛选方法","like_count":0},{"had_liked":false,"id":245914,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599107945,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599107945","product_id":100039001,"comment_content":"1、找名词、概念、领域，之后合并为模块<br>2、找到共同操作的属性，进行合理关系划分","like_count":0},{"had_liked":false,"id":244987,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1598773752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598773752","product_id":100039001,"comment_content":"基本实现了老师的要求。<br><br>https:&#47;&#47;github.com&#47;kolinkuang&#47;geekbang-homework&#47;tree&#47;master&#47;design-pattern&#47;src&#47;l014","like_count":0},{"had_liked":false,"id":244483,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1598532875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598532875","product_id":100039001,"comment_content":"感觉对于聚合和关联这两个合在一起不用纠结。但是组合和这两个还有有比较大的区分。可以拎出来单独来看。<br>别的分析<br>1：了解需求以及需求的背景，解决了什么问题？（why）<br>2：针对要解决的问题分析产品组合，产生问题空间的模型（领域模型。这里可以使用分词发，这里产出属性和关联关系）<br>3：在针对问题空间模型进行软件对象模型设计（这里大概率是一对一。并添加对象的行为）","like_count":0},{"had_liked":false,"id":244302,"user_name":"这是谁 辣么帅","can_delete":false,"product_type":"c1","uid":1329293,"ip_address":"","ucode":"DD30830BAD20A6","user_header":"https://static001.geekbang.org/account/avatar/00/14/48/8d/7764c5c2.jpg","comment_is_top":false,"comment_ctime":1598453986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598453986","product_id":100039001,"comment_content":"我的方式是通过MD5将URL转换成字符串，因为MD5大家很容易猜想出来所以对MD5编码后的各个字符降位，比如从2的8次方将至2的4次方高位归0，然后通过每个字符的大小（不超过16），从自己的16位密码库（无规律）中取出下标对应的字符将MD5的字符替换掉，请求和鉴权双方使用同一个密码库，这样就能保证token的唯一性及token的安全性，只要源码不外泄应该就能保证安全性，不知道我讲的清不清楚，请老师点评下我的思路","like_count":0},{"had_liked":false,"id":243937,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1598333474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598333474","product_id":100039001,"comment_content":"确实如作者所说，对于日常开发中的分析和设计，在脑子里面过一遍就完事儿了，并没有按照严格的步骤来操作，然后在写代码的过程中边写边重构。<br>为什么我总是倾向于直接上手撸代码呢？我觉得是因为撸代码太容易了，相比起分析和设计，撸代码显然更有成就感。但这明显是在用战术上的勤奋掩盖战略上的懒惰。<br>相比重构时的大动干戈，在纸上写写画画的成本明显要低得多。而且分析和设计是一个越用越好用的技能，最开始很多case都想不到，渐渐地可以覆盖越来越多的case，这是一个值得花时间练习的技能！<br>","like_count":0},{"had_liked":false,"id":243882,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1598319183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598319183","product_id":100039001,"comment_content":"面向过程到面向对象是一个思考方式的改变","like_count":0},{"had_liked":false,"id":243545,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1598178027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598178027","product_id":100039001,"comment_content":"学到了很多，对于课堂作业，我暂时也没有别的设计方法，我的项目积累还很不够，等以后多学点，看有没有新的设计思路。","like_count":0},{"had_liked":false,"id":237643,"user_name":"monsterhxw","can_delete":false,"product_type":"c1","uid":1216801,"ip_address":"","ucode":"D04AD6301AE7AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/91/21/d16b884e.jpg","comment_is_top":false,"comment_ctime":1595908330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595908330","product_id":100039001,"comment_content":"课后作业中的具体实现在：https:&#47;&#47;github.com&#47;monsterhxw&#47;java-basis-practice&#47;tree&#47;master&#47;api-authentication","like_count":0},{"had_liked":false,"id":229931,"user_name":"数学汤家凤","can_delete":false,"product_type":"c1","uid":2029485,"ip_address":"","ucode":"DE84E777C384AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","comment_is_top":false,"comment_ctime":1593215814,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593215814","product_id":100039001,"comment_content":"软件设计正如马哲上写的一样<br>事物的自身发展，经过肯定、否定和新的肯定，即否定之否定的曲折过程，仿佛是向出发点的复归，但实质上是在高级阶段上重复某些低级阶段的特点、特性，是通过曲折的形式而实现的前进运动","like_count":0},{"had_liked":false,"id":229135,"user_name":"Rancood","can_delete":false,"product_type":"c1","uid":1204333,"ip_address":"","ucode":"052BDF2221F480","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/6d/e2576fda.jpg","comment_is_top":false,"comment_ctime":1592904406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592904406","product_id":100039001,"comment_content":"虽然用了实际案例讲解，但最终还是没有设计出一个易扩展的组件来，像文中说的dubbo、rpc等方式接口请求，就没法扩展了，就算扩展，相当于重写一个的工作量了","like_count":0},{"had_liked":false,"id":228837,"user_name":"兔嘟嘟","can_delete":false,"product_type":"c1","uid":2028811,"ip_address":"","ucode":"5A9042B4C7670C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","comment_is_top":false,"comment_ctime":1592820745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592820745","product_id":100039001,"comment_content":"哈哈，刚刚的那条评论，问了下别人，发现是对java不了解导致的，没事了没事了","like_count":0},{"had_liked":false,"id":228835,"user_name":"兔嘟嘟","can_delete":false,"product_type":"c1","uid":2028811,"ip_address":"","ucode":"5A9042B4C7670C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","comment_is_top":false,"comment_ctime":1592820157,"is_pvip":false,"replies":[{"id":"86380","content":"既支持外界生成好token，传递进来，创建AuthToken，比如从客户端传来的token，我们在后端包裹成AuthToken继续处理。也支持直接根据基础数据升成AuthToken,也就是create函数的作用","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594602758,"ip_address":"","comment_id":228835,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592820157","product_id":100039001,"comment_content":"看了几遍还是没懂，AuthToken类为什么构造函数要传入一个token，token不应该是类内生成的吗？以及如果已经通过构造函数获得了一个token，那么create函数又有什么作用？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499208,"discussion_content":"既支持外界生成好token，传递进来，创建AuthToken，比如从客户端传来的token，我们在后端包裹成AuthToken继续处理。也支持直接根据基础数据升成AuthToken,也就是create函数的作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594602758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222790,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590912879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590912879","product_id":100039001,"comment_content":"UML关系：泛化、实现、依赖、关联、组合、聚合。<br>依赖：a类的函数入参是b类。<br>关联、组合、聚合：a类包含b类型的属性。关联是ab对象同级别，ab可以单独存在(在a类外部实例化b)；组合ab对象整体部分关系，b可以单独存在(a类外部实例化b对象)；聚合是ab对象整体部分关系，b对象不能单独存在(a类中实例化b对象)。<br>","like_count":0},{"had_liked":false,"id":220744,"user_name":"朝小树","can_delete":false,"product_type":"c1","uid":1323875,"ip_address":"","ucode":"18DC282DEF16C8","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/63/2d48822a.jpg","comment_is_top":false,"comment_ctime":1590317396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590317396","product_id":100039001,"comment_content":"和大部分同学，第一反应是用面向过程去实现了，感谢讲了面向对象的思路。<br>","like_count":0},{"had_liked":false,"id":218901,"user_name":"董大大","can_delete":false,"product_type":"c1","uid":1334181,"ip_address":"","ucode":"5C7299DCB1DD79","user_header":"https://static001.geekbang.org/account/avatar/00/14/5b/a5/7c079c73.jpg","comment_is_top":false,"comment_ctime":1589895743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589895743","product_id":100039001,"comment_content":"项目中刚好用到这个功能。赞","like_count":0},{"had_liked":false,"id":217221,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589442744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589442744","product_id":100039001,"comment_content":"面向对象分析 面向对象设计  面向对象编程  都是可以实际操作的干货。   面向对象设计和面向对象分析的产出是类。从几个方面去考虑,1.划分职责找出类：罗列出所有功能点，找出功能相似的组合成类。2.定义类的属性和方法：需求描述中的名词当做属性，动词当做方法。然后进一步观察。3.确定类之间的关系：UML 中类的六种关系  实现 泛化 组合 聚合 依赖 关联 4.组织类提供执行入口。<br>学习了方法也要学习思想。通过这些方法达到面向对象的程序设计<br>以后的工作中应该尽量纠正自己的思想，不要在思想上偷懒。","like_count":0},{"had_liked":false,"id":212829,"user_name":"Tobias","can_delete":false,"product_type":"c1","uid":1803858,"ip_address":"","ucode":"F3225639EDA193","user_header":"https://static001.geekbang.org/account/avatar/00/1b/86/52/b92dc111.jpg","comment_is_top":false,"comment_ctime":1588217559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588217559","product_id":100039001,"comment_content":"争争老师 ApiRequest 的设计决定了使用怎样的鉴权解决方案。如果想进一步提高可扩展性，比如支持老系统或者第三方的鉴权方案，这个ApiRequest类还需要进一步抽象，不能包扩具体的属性，可以考虑变为接口IApiReuqest， 将旧的ApiRequest类作为默认实现，大家有怎样的想法呢？","like_count":0},{"had_liked":false,"id":211712,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1587998402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587998402","product_id":100039001,"comment_content":"1泛化继承。2实现接口。3组合 组合在一起 但是生命周期不影响，a和b都有自己独立的生命周期。4 聚合 生成a会在其内部生成b。5关联 4或者5的关系。6依赖 只有在在a里面 不管是属性 成员不还是返回","like_count":0},{"had_liked":false,"id":201650,"user_name":"小马","can_delete":false,"product_type":"c1","uid":1490686,"ip_address":"","ucode":"92B7ECD23BDCB5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoXW5rycAcrNTwgOvib8poPXO0zvIekIPzBZJfsnciaLPIw9Q1t3rsXeH6DR24QndpYQibvibhR1tKHPw/132","comment_is_top":false,"comment_ctime":1585816808,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585816808","product_id":100039001,"comment_content":"老师您好，您上面讲的这种方式适合做身份认证，但是无法保证在请求过程中参数被修改啊，如果请求被拦截了，token不变，但是其他参数被修改了，还是能够通过校验的。","like_count":0,"discussions":[{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258476,"discussion_content":"不行的，服务器会对你的参数按照同样的规则进行生成token 然后比较是否一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588689428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200156,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585551529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585551529","product_id":100039001,"comment_content":"分析，设计，编码，分析和设计的思考越深越细，对于后期编码的工作就越简化。","like_count":0},{"had_liked":false,"id":197476,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585380985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585380985","product_id":100039001,"comment_content":"难度提升了，可能后端看到懂一点，前端还是有点迷惑...<br><br>反思了一下要是前端我写一个需求，可能不会安装面向对象设计和编程，都是直接想到啥就写啥","like_count":0},{"had_liked":false,"id":193299,"user_name":"PCMD","can_delete":false,"product_type":"c1","uid":1842844,"ip_address":"","ucode":"76A1106F42AEAC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/1e/9c/39f5ff2a.jpg","comment_is_top":false,"comment_ctime":1584888813,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584888813","product_id":100039001,"comment_content":"需求拆分的逻辑以及层次，包括对逻辑代码抽象的处理，都是目前需要吸收的一些亮点","like_count":0},{"had_liked":false,"id":189968,"user_name":"洛子墟","can_delete":false,"product_type":"c1","uid":1036273,"ip_address":"","ucode":"CFC500D00F0B9B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f1/bf63fef6.jpg","comment_is_top":false,"comment_ctime":1584586568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584586568","product_id":100039001,"comment_content":"很有用的拆分需求、组织类和方法的思考过程，由上至下，逐步细化，思路清晰。<br>我可能是个行动派，一般都是由下至上的编写代码然后再思考。<br>先把流程转化为代码，然后全部实现在一个类中，然后再更具功能分类汇总，逐步梳理思路。好处是快，坏处是代码相当于会写2遍。","like_count":0},{"had_liked":false,"id":184157,"user_name":"兰芳林","can_delete":false,"product_type":"c1","uid":1754409,"ip_address":"","ucode":"D3C652D22B5D50","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c5/29/4848464f.jpg","comment_is_top":false,"comment_ctime":1583239862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583239862","product_id":100039001,"comment_content":"太棒了","like_count":0},{"had_liked":false,"id":183302,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1582990178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582990178","product_id":100039001,"comment_content":"大概因为平时就是这么做OOA&amp;D的，所以看得波澜不惊。<br>另外，习惯看UML了，老师这图其实就是class diagram了","like_count":0},{"had_liked":false,"id":183218,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582975209,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582975209","product_id":100039001,"comment_content":"【设计模式笔记15】20200229<br>今天偏实战了，整体看下来学到的一个点就是动手写代码前先设计，文章提到的方法是按功能点聚类，然后对照需求设计类之间的交互，最后填充属性和方法。设计的目的是帮助自己思考，真正要解决的问题是什么，具体怎么做，是否有优化的空间。下面说下我的方法，最最重要的一定是理解清楚需求，然后将需求的功能点和流程梳理出来，产出可以是任意形式，最好有流程图和例子。接着是划分模块，按照微服务得视角开发，入参、出参要考虑好，微服务的本质就是自治，只有这些做好后才开始动手写代码。","like_count":0},{"had_liked":false,"id":180299,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582252921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582252921","product_id":100039001,"comment_content":"如果是我的话,我可能会将第四步放在定义类和定义类之间的关系这两步之前去做<br>但是这样我觉着我仍然陷入了面向过程编程的误区了,因为这样的话,仍然是根据需求去实现过程,但是确实我经常去使用的一种编程流程.","like_count":0},{"had_liked":false,"id":177092,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1371891,"ip_address":"","ucode":"8BEFC518F06AC7","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","comment_is_top":false,"comment_ctime":1581265981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581265981","product_id":100039001,"comment_content":"【面向对象开发流程】<br><br>1.面向对象分析<br>首先根据需求，从最基本的开始想，实现功能最简单可以怎样做，就是一个MVP，然后根据最基本的想法，逐层次往下思考，以提问题，回答问题的形式，丰富需求内容，然后把需求内容分步骤的写出来。<br><br>2.面向对象设计<br>1）划分需求职能<br>根据需求分析内容，如果功能比较大，可以先对需求做模块划分，然后在对单独模块进行更次的职能划分，将需求中涉及的功能点一个一个列出。<br><br>2）设计类、属性、方法<br>根据列出的功能（非常细小，职能单一），对功能进行整合，把相近的整合成一个类。<br>然后挑选出功能中的动词，可以作为方法。<br>方法中的名词，作为属性。同时需要把方法中需要用到的属性（隐含的），也定义出来。<br><br>3）设计类之间的交互<br>概括的总结类与类之间的交互关系为：实现（接口）、泛化（继承）、组合（类属性）、依赖（函数参数）。<br><br>4）组装类，提供对外的入口<br>对类封装内部调用细节，抽象统一的历史对外类（接口方法）。<br><br>3.面向对象编程<br>根据前面类的定义、方法、属性的定义，实现具体的方法逻辑。<br><br>4.无框架的引入编程<br>无框架引入下的面向对象编程，根据定义的类、属性、方法，按设计实现。<br><br>5.实际开发贫血模型下的改进，充血模型开发<br>基于传统的集成Spring框架下的MVC贫血模型开发，增加一个domain领域模型，在service层调用封装在领域模型中的属性、方法（逻辑），实现充血模型的DDD开发模式。领域模型不引入任何第三方框架，以便达到解耦，提高复用性。","like_count":0},{"had_liked":false,"id":176233,"user_name":"阿    鲍","can_delete":false,"product_type":"c1","uid":1189884,"ip_address":"","ucode":"7418826B7986E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/fc/2169bf4a.jpg","comment_is_top":false,"comment_ctime":1580996384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580996384","product_id":100039001,"comment_content":"交作业了， https:&#47;&#47;github.com&#47;zjbao123&#47;PatternDesign&#47;tree&#47;master&#47;ApiAuthenticator","like_count":0},{"had_liked":false,"id":175316,"user_name":"三尺寒冰","can_delete":false,"product_type":"c1","uid":1027586,"ip_address":"","ucode":"B10C7C9F955DF5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/02/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1580653099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580653099","product_id":100039001,"comment_content":"如何进行面向对象设计？<br>1. 划分职责进而识别出有哪些类；<br>2. 定义类及其属性和方法；<br>3. 定义类与类之间的交互关系；<br>4. 将类组装起来并提供执行入口；","like_count":0},{"had_liked":false,"id":175122,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1580564438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580564438","product_id":100039001,"comment_content":"这二章干货满满，一般鉴权这样的技术型需求，我们一般不会像业务需求一样进行业务分析，然后映射到对象模型上（业务模型）。这二章其实很好地给我们介绍了面向对象分析、设计的流程、方法。","like_count":0},{"had_liked":false,"id":174116,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1580005995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580005995","product_id":100039001,"comment_content":"干货满满。平时工作中这样的需求很容易就写成面向过程的代码，确实不易懂，不易维护。经过老师的分析、拆解、设计，呈现出这样面向对象的代码，不但代码易懂，而且便于拓展维护。也能够很直观的讲解了面向对象设计，太赞了。","like_count":0},{"had_liked":false,"id":168899,"user_name":"光裕","can_delete":false,"product_type":"c1","uid":1261313,"ip_address":"","ucode":"1CAD27E16B6D96","user_header":"https://static001.geekbang.org/account/avatar/00/13/3f/01/e1f2da41.jpg","comment_is_top":false,"comment_ctime":1578212934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578212934","product_id":100039001,"comment_content":"需求分析：一般都是采用“用例”法，主要分析交互流程、业务规则、特殊需求等内容。<br>设计：根据需求描述，通过画类图、序列图等识别出类及其属性、方法，及类间的关系。<br>老师给出的方法也挺好，后续再实践中试试。","like_count":0},{"had_liked":false,"id":167883,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1577957322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577957322","product_id":100039001,"comment_content":"设计前<br>1. 划分职责进而识别出有哪些类：比如提现有wallet、钱包流水、提现记录。<br>2.看这些类有哪些功能，比如钱包的余额、可提现金额变更。如果有相同的功能，就考虑新建一个公共类来操作。<br>3.定义这些类之间的交互动作(service层就是来处理这些东西的)<br>4.开搞","like_count":0},{"had_liked":false,"id":167610,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1577876340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577876340","product_id":100039001,"comment_content":"先设计数据结构，然后结构映射成类（对象）。对象之间的关系也是通过表关系来对应编写。这个是面向过程的思维方式吗？OOA、OOD的过程跟着思考没问题，自己独立去想有点不知道能不能做到。已经习惯先从数据结构入手了。","like_count":0},{"had_liked":false,"id":166909,"user_name":"睁眼看世界","can_delete":false,"product_type":"c1","uid":1206388,"ip_address":"","ucode":"F94CF34BC5B2AC","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/74/461b202d.jpg","comment_is_top":false,"comment_ctime":1577628831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577628831","product_id":100039001,"comment_content":"打卡，Get到了，鉴权相关的开发自己之前也设计过，现在想想就是贫血模式，面向过程编程，跟着老师好好学习面向对象编程。","like_count":0},{"had_liked":false,"id":164660,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1577067796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577067796","product_id":100039001,"comment_content":"我的总结：<br>2. 从一个很简单的对请求进行有效性验证需求开始，一步步分析，从而得到需要定义哪些类，各个类中需要定义什么属性和方法<br>3. 文中提到的参考需求中提到了哪些名词哪些动词来确定需要定义哪些类和各个类中的方法的方式值得参考<br>4. 很巧的是，我目前做的验签方式和老师文中提到的验签方式是一样的","like_count":0},{"had_liked":false,"id":164545,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1577024995,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1577024995","product_id":100039001,"comment_content":"其实写出来之后反而简单了，难的是一开始的业务抽象化，这个需要比较扎实的基础，尤其是业务的理解，然后归纳的基础，但是恰恰这块是作为开发最容易忽视的部分，所以老师讲的这些，其实真正到实际的开发场景中，都会由于各种各样的原因（工期，技术能力，业务理解等等），会打比较大的折扣。","like_count":0},{"had_liked":false,"id":164357,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1576943873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576943873","product_id":100039001,"comment_content":"但我还是不太明白为何DefaultApiAuthencatorImpl的构造函数是重写ApiAuthencator接口？不应该是写成public DefaultApiAuthencatorImpl(CredentialStorage credentialStorage)吗?","like_count":0},{"had_liked":false,"id":164354,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1576943520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576943520","product_id":100039001,"comment_content":"也就是说，这段代码的运行触发逻辑是，调用DefaultApiAuthencatorImpl.auth(url),然后运行三个类对吧","like_count":0},{"had_liked":false,"id":164351,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1576943027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576943027","product_id":100039001,"comment_content":"代码中所用的关系我想搞清楚一下，这里用到的是实现（ApiAuthencator(A类)与DefaultApiAuthencatorImpl（B类）），还有组合（DefaultApiAuthencatorImpl（A类）与CredentialStorage（B类）），对吗？","like_count":0},{"had_liked":false,"id":164334,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1576939117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576939117","product_id":100039001,"comment_content":"代码中两个构造函数ApiAuthencator直接算是重写了接口ApiAuthencator吗？","like_count":0},{"had_liked":false,"id":161363,"user_name":"J.F.Cheung","can_delete":false,"product_type":"c1","uid":1306986,"ip_address":"","ucode":"EB696F021174CD","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/6a/05fa25d2.jpg","comment_is_top":false,"comment_ctime":1576198414,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576198414","product_id":100039001,"comment_content":"Sha和md5并不是加密算法，这里只是用来做摘要，且不可逆，用来验证token，加密算法是可可以解密的","like_count":0,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91304,"discussion_content":"我一开始和你想的一样, 后来我觉得把散列说成加密也没错, 毕竟这个还是概念问题, 怎么沟通方便怎么来吧.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576825510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161253,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1576157580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576157580","product_id":100039001,"comment_content":"如果只是一个鉴权功能的话，在不考虑项目模块的复用性的前提下，会倾向于先写测试样例，然后根据预设的测试结果去编写需要测试的代码方法，然后一步步完善起来。","like_count":0},{"had_liked":false,"id":161175,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1576137431,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576137431","product_id":100039001,"comment_content":"感觉这次课程最大的学习之处是看到了一种从需求到编码设计的步骤，虽然还很简单，但总归是一种面向对象设计的实践方案。","like_count":0},{"had_liked":false,"id":160862,"user_name":"Varus","can_delete":false,"product_type":"c1","uid":1715988,"ip_address":"","ucode":"B9CB88C248BD93","user_header":"https://static001.geekbang.org/account/avatar/00/1a/2f/14/840d0925.jpg","comment_is_top":false,"comment_ctime":1576048842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576048842","product_id":100039001,"comment_content":"在分析需求的时候，这种分析模式是否也算是一种面向过程的分析模式","like_count":0},{"had_liked":false,"id":160474,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1575958493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575958493","product_id":100039001,"comment_content":"首先把api请求封装成apiRequest，这个和争哥的一样，不一样的地方在鉴权验证，争哥是封装成AuthToken类，但是我是把鉴权抽象成一个Handler接口，具体实现包括是否过期的handler和是否match的handler，把这些handler注册到ApiAuthencator抽象类，auth(apiRequest)就是for循环调用这些handler","like_count":0},{"had_liked":false,"id":160462,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1575955108,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575955108","product_id":100039001,"comment_content":"自己也实现过这样的功能，基本上就是用的贫血模型了。<br>1、做好需求分析，然后根据功能点把类似功能的分为一个类，得出了几个类。可以产生相同的简单类图、用例图以及简单的模块之间的时序图。<br>2、把功能拆分出一个一个的方法和属性。<br>3、确认好类与类之间的关系，有泛化，实现，关联，聚合，组合，依赖六种，最好可以画出类图和时序图，以及复杂方法的活动图。<br>4、把类之间关系调用封装成一个api接口提供出去。","like_count":0},{"had_liked":false,"id":160394,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1575944507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575944507","product_id":100039001,"comment_content":"是不是所有的类都要以名词结尾，准确地说明这个类是什么。","like_count":0},{"had_liked":false,"id":160246,"user_name":"siloen","can_delete":false,"product_type":"c1","uid":1058734,"ip_address":"","ucode":"526A861A4552FF","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/ae/d17c0de8.jpg","comment_is_top":false,"comment_ctime":1575898533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575898533","product_id":100039001,"comment_content":"具体的对象类中每个类中的静态方法这种设计是为什么。","like_count":0},{"had_liked":false,"id":160166,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1575883966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575883966","product_id":100039001,"comment_content":"https:&#47;&#47;github.com&#47;jesse920524&#47;PrettyDesignPattern&#47;tree&#47;master&#47;src&#47;lesson14<br>可能和老师的设计不太一样,权当抛砖引玉.","like_count":0},{"had_liked":false,"id":160074,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1575864267,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575864267","product_id":100039001,"comment_content":"UML明白了一些","like_count":0},{"had_liked":false,"id":159435,"user_name":"悠南","can_delete":false,"product_type":"c1","uid":1193711,"ip_address":"","ucode":"333665DB7CFDD6","user_header":"https://static001.geekbang.org/account/avatar/00/12/36/ef/83c2a743.jpg","comment_is_top":false,"comment_ctime":1575623035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575623035","product_id":100039001,"comment_content":"之前的思路是设计对象考虑存储，数据库字段；领域建模是考虑类职责，提供那些方法支持了那些功能，类之间如何组合。     那我的问题就是 当我们设计出类之后，如何如存储层打通呢？？？支持类数据转DAO还是怎么办呢？？？  而且开发过程中controller层经常调用service  ,现在我写成类去支持这些功能，controller 该怎么去调用呢？","like_count":0},{"had_liked":false,"id":159266,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1575593367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575593367","product_id":100039001,"comment_content":"老师给了我新的实现思路，看来我平时都基本是过程开发了，功能拆解是差不多的，但是类的实现上我可能就上2个工具类1个数据库交互类，然后写个统一鉴权入口就完事了。学到了","like_count":0},{"had_liked":false,"id":159199,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1575557429,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1575557429","product_id":100039001,"comment_content":"转发：关联和聚合是视问题域而定的，例如在关心汽车的领域里，轮胎是一定要组合在汽车类中的，因为它离开了汽车就没有意义了。但是在卖轮胎的店铺业务里，就算轮胎离开了汽车，它也是有意义的，这就可以用聚合了。","like_count":0},{"had_liked":false,"id":159193,"user_name":"啊啊啊哦哦","can_delete":false,"product_type":"c1","uid":1309877,"ip_address":"","ucode":"68C7153ECAAC57","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/RNO4yZyBvic914hewmNNE8iblYDcfv5yGHZ9OnKuCuZXNmGR0F5qV3icKLT2xpMt66GyEpicZVvrmz8A6TIqt92MQg/132","comment_is_top":false,"comment_ctime":1575556598,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575556598","product_id":100039001,"comment_content":"有点晕。类图和代码中的类的方法名有的不一致。 PHP的我看的难受怀疑是自己不懂Java语言导致的","like_count":0,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91302,"discussion_content":"不要太在意代码的写法, 里面有很多写错的😂, 主要看思路吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576825394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159182,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1575553980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575553980","product_id":100039001,"comment_content":"打卡<br><br>一、面向对象分析的产物是详细需求分解(每一步要做什么的描述);<br>二、面向对象的设计的产物是类以及类和类之间的关系:<br>1、根据职业划分出有哪些类(列出每个功能点，功能点职责相近，操作相同属性的，可以归为同一个类)<br>2、识别出动词作为候选方法，名词作为候选属性(也可以作为参数，另外，会有其他隐含的属性和方法)<br>3、定义类和类之间的关系(关系简化为:泛化，实现，依赖和组合，足以指导编程)<br>4、进行类的组装，提供统一入口(API接口)<br><br>对于复杂的需求，可以先按此思路划分功能模块，每个功能模块再分析。<br><br>辩证思考:当功能特别简单，也不需要经常改动时，也可以把此功能作为一个类设计。另外，在做设计时也不一定按部就班的事无巨细的设计，如果比较简单，脑子里有个草图，可以先实现代码，不断完善，当有了第一个雏形，后面的优化思路会更开阔，更有方向。","like_count":0},{"had_liked":false,"id":159169,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1575551678,"is_pvip":false,"replies":[{"id":"90342","content":"你可以看下其他同学的答案","user_name":"编辑回复","user_name_real":"郭蕾","uid":"1000473","ctime":1599016701,"ip_address":"","comment_id":159169,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1575551678","product_id":100039001,"comment_content":"老师整理完整代码学习一下","like_count":0,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476973,"discussion_content":"你可以看下其他同学的答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599016701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159053,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1575526905,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575526905","product_id":100039001,"comment_content":"“组合关系替代 UML 中组合、聚合、关联三个概念”，为什么我感觉 UML 中&quot;依赖&quot; 也是这三个概念的集合，还是有点分不清。","like_count":0,"discussions":[{"author":{"id":1198046,"avatar":"https://static001.geekbang.org/account/avatar/00/12/47/de/7b923db2.jpg","nickname":"曦","note":"","ucode":"AFB48B6C606EB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406532,"discussion_content":"同感分不清","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634786091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159015,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1575515416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575515416","product_id":100039001,"comment_content":"打卡，晚上再来看一遍。","like_count":0},{"had_liked":false,"id":158954,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1575506556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575506556","product_id":100039001,"comment_content":"刚做了一个jwt的鉴权模块，token的生成和验证否，放在utils里了……","like_count":0},{"had_liked":false,"id":158933,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1575503568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575503568","product_id":100039001,"comment_content":"一步一步分析，每一步中有哪些容易出现的问题，如何避免解决，学到了很多！","like_count":0},{"had_liked":false,"id":158918,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1575492776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575492776","product_id":100039001,"comment_content":"功能点和名词相比更抽象，因而适用性更广，既可以划分类的职责，也可以划分模块的职责。总体而言，就是要细化软件提供的功能，尽量做到不重复，不遗漏，粒度上讲划分模块的时候大一些，划分类的时候尽量细。<br>对功能点分类是识别类的起点，但是具体细节往往是写代码和重构的时候自然而然产生，不必苛求设计的细节。设计的最大用处是提供系统的宏观信息，有点像盖房子的架子，房子的细节在盖的过程中完成。房子盖完了，架子用处也不大了。","like_count":0},{"had_liked":false,"id":158893,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1575471547,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1575471547","product_id":100039001,"comment_content":"Day030 14<br>除了文中的设计思路，还可以看下张逸老师使用 TDD 的设计思路。<br>http:&#47;&#47;zhangyi.xyz&#47;handout-tdd-code-kata&#47;<br>","like_count":0},{"had_liked":false,"id":158889,"user_name":"YourSweetHeart","can_delete":false,"product_type":"c1","uid":1242122,"ip_address":"","ucode":"38843F447B03F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","comment_is_top":false,"comment_ctime":1575470863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575470863","product_id":100039001,"comment_content":"结尾的4点干练的让人震惊，<br>这是我追的最快的专栏了","like_count":0},{"had_liked":false,"id":158877,"user_name":"YourSweetHeart","can_delete":false,"product_type":"c1","uid":1242122,"ip_address":"","ucode":"38843F447B03F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","comment_is_top":false,"comment_ctime":1575469100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575469100","product_id":100039001,"comment_content":"我发现我学了这么久根本不会面向对象，<br>今天终于分清了组合和聚合","like_count":0},{"had_liked":false,"id":158861,"user_name":"光光","can_delete":false,"product_type":"c1","uid":1242876,"ip_address":"","ucode":"A0F1D0134C935F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/fc/171c4976.jpg","comment_is_top":false,"comment_ctime":1575466209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575466209","product_id":100039001,"comment_content":"老师在文中是按照一个业务流程进行梳理、分析和设计的，这个顺序的思路是很容易的让人理解的也符合大家的思考方式。可以不可以从微服务本身开始入手，要提供那些接口给外部调用，微服务本身需要完成那些功能。","like_count":0},{"had_liked":false,"id":158828,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1575460749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575460749","product_id":100039001,"comment_content":"我的话，应该是面向过程编程风格了，我们team里写代码 都是一个功能 你写一半 我写一半 你改我写的代码，我改你写的代码 根本没法面向对象，只能自己写项目实践下😂","like_count":0},{"had_liked":false,"id":158815,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1575458294,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575458294","product_id":100039001,"comment_content":"ApiAuthencator这个顶层接口类目前还有点没有get设计原因的点。为啥要做一个通用的接口出来了？","like_count":0,"discussions":[{"author":{"id":1477359,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","nickname":"Geek_342489","note":"","ucode":"40610664021607","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72273,"discussion_content":"我理解是为了接口和实现隔离吧，如果改天鉴权需要用别的方法实现，不是token，只需要新增一个 xxxApiAuthencatorImpl 类即可，我们项目中一般会有一个鉴权队列，不同的业务方鉴权方法不同，只要有一个通过即可正确访问接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575472959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1134761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","nickname":"冰糕不冰","note":"","ucode":"B754FE464BA426","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1477359,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","nickname":"Geek_342489","note":"","ucode":"40610664021607","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72532,"discussion_content":"大概有点明白了！感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575502614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72273,"ip_address":""},"score":72532,"extra":""}]}]},{"had_liked":false,"id":158805,"user_name":"付昱霖","can_delete":false,"product_type":"c1","uid":1488464,"ip_address":"","ucode":"9CB3A8A8504885","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/50/5d9ef58d.jpg","comment_is_top":false,"comment_ctime":1575455597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575455597","product_id":100039001,"comment_content":"想问下 聚合、组合的放的图是不是反了<br>不依赖的话应该是堆空间？","like_count":0},{"had_liked":false,"id":158795,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1575452509,"is_pvip":false,"replies":[{"id":"61146","content":"先了解整体结构，再了解细节，思路是对的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575897921,"ip_address":"","comment_id":158795,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575452509","product_id":100039001,"comment_content":"本讲中的面向对象分析和面向对象设计在阅读源码的时候可以使用么？就是先感动源码的整体设计，让后自顶向下的剖析源码","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476849,"discussion_content":"先了解整体结构，再了解细节，思路是对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575897921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158782,"user_name":"多多洛","can_delete":false,"product_type":"c1","uid":1233870,"ip_address":"","ucode":"5801171C2D2F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/ce/8ed72840.jpg","comment_is_top":false,"comment_ctime":1575450244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575450244","product_id":100039001,"comment_content":"第一次对聚合，组合，关联，依赖理解的这么清楚","like_count":0},{"had_liked":false,"id":158761,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1575447523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575447523","product_id":100039001,"comment_content":"打卡<br>1、需求功能点细化，确定类<br>2、找动词、名词确定属性和方法（可结合业务调整）<br>3、确定类关系<br>4、建立访问入口<br>","like_count":0},{"had_liked":false,"id":158733,"user_name":"evolution","can_delete":false,"product_type":"c1","uid":1088402,"ip_address":"","ucode":"105C59822BF75B","user_header":"https://static001.geekbang.org/account/avatar/00/10/9b/92/c0863297.jpg","comment_is_top":false,"comment_ctime":1575443631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575443631","product_id":100039001,"comment_content":"和争哥的分水岭在于：将功能点分门别类","like_count":0},{"had_liked":false,"id":158727,"user_name":"rookie","can_delete":false,"product_type":"c1","uid":1573424,"ip_address":"","ucode":"9E28FA97C01F24","user_header":"","comment_is_top":false,"comment_ctime":1575442800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575442800","product_id":100039001,"comment_content":"这一节干货很多呀，不清楚，就反复的看，细品。","like_count":0},{"had_liked":false,"id":158707,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1575438505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575438505","product_id":100039001,"comment_content":"打卡。<br>把UML 中组合、聚合、关联三个概念重新命名关联关系为组合关系确实简单了许多。","like_count":0},{"had_liked":false,"id":158701,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1575436027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575436027","product_id":100039001,"comment_content":"这个专栏可以改为如何优雅编程。而非局限在设计模式了。","like_count":0},{"had_liked":false,"id":158700,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1575436004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575436004","product_id":100039001,"comment_content":" public static ApiRequest crateFromFullUrl(String url) {<br>       <br>    }<br>老师，这个函数怎么实现？","like_count":0},{"had_liked":false,"id":158687,"user_name":"阿崔cxr","can_delete":false,"product_type":"c1","uid":1177565,"ip_address":"","ucode":"26E2C7D96306A4","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/dd/c85f2065.jpg","comment_is_top":false,"comment_ctime":1575433781,"is_pvip":false,"replies":[{"id":"61148","content":"后面讲到代码的可测试性的时候会讲到TDD的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575898058,"ip_address":"","comment_id":158687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575433781","product_id":100039001,"comment_content":"老师你怎么看 TDD","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476810,"discussion_content":"后面讲到代码的可测试性的时候会讲到TDD的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575898058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158682,"user_name":"兔2🐰🍃","can_delete":false,"product_type":"c1","uid":1096984,"ip_address":"","ucode":"1FEDA044BB6CBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","comment_is_top":false,"comment_ctime":1575433074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575433074","product_id":100039001,"comment_content":"实战落地，讲述先做什么、后做什么，思路非常清晰、明确，有章可循。干货！","like_count":0},{"had_liked":false,"id":158668,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1575430105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575430105","product_id":100039001,"comment_content":"今天的总结就是：先按照争哥的方法分析设计实现，一步一步来，体会熟悉其中的奥妙，最后熟练之后就可以轻松的“倒车入库”了。","like_count":0},{"had_liked":false,"id":158658,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1575428632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575428632","product_id":100039001,"comment_content":"之前都是别想别写，写着写着就会发现遗漏了一些东西。以后尝试下先写下功能点作分析，然后在动手，把思考放在动手前面","like_count":0},{"had_liked":false,"id":158651,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1575427705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575427705","product_id":100039001,"comment_content":"不错不错， 要是我的话就设计成一个类了","like_count":0},{"had_liked":false,"id":158649,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1575427414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575427414","product_id":100039001,"comment_content":"设计流程：<br><br>整体业务划分职责，形成多模块<br>各个模块再细分，划分具体类和接口<br>定义类属性和方法（名词为属性：与业务相关的才设计成属性，无关但需要的设计成方法形参；动词可以考虑设计成方法）<br>定义类之间的交互关系（继承泛化、接口实现、B是A的字段为组合、A用到B了就是依赖）<br>将类组装起来并提供执行入口<br><br>这些还是要看实战才行啊。加油！！！","like_count":0},{"had_liked":false,"id":158621,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1575423664,"is_pvip":true,"replies":[{"id":"60682","content":"我好像没见过类似的 还是靠实战项目来锻炼","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575423763,"ip_address":"","comment_id":158621,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1575423664","product_id":100039001,"comment_content":"对于需求分析 这块有没有系统的可以学习的东西推荐一下啊  感觉 这块有点弱","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476782,"discussion_content":"我好像没见过类似的 还是靠实战项目来锻炼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575423763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1057056,"avatar":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","nickname":"秋天","note":"","ucode":"A7E1D953EF7E17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71504,"discussion_content":"看来还得自己去体会啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575426547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158620,"user_name":"SMTCode","can_delete":false,"product_type":"c1","uid":1109038,"ip_address":"","ucode":"0D837A753E4FAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/2e/49d13bd2.jpg","comment_is_top":false,"comment_ctime":1575423604,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575423604","product_id":100039001,"comment_content":"打卡，看了一个小时～","like_count":0},{"had_liked":false,"id":158618,"user_name":"leejunhui","can_delete":false,"product_type":"c1","uid":1188627,"ip_address":"","ucode":"A957C0034B9F4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/13/6ba35b43.jpg","comment_is_top":false,"comment_ctime":1575423480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575423480","product_id":100039001,"comment_content":"打卡，虽然自己没做过服务端开发，但是对这两篇实战课感觉都很想多读两遍~","like_count":0},{"had_liked":false,"id":158616,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1575423307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575423307","product_id":100039001,"comment_content":"老师教的是一套设计思路，自己可以灵活应对。","like_count":0},{"had_liked":false,"id":158610,"user_name":"fenghuo","can_delete":false,"product_type":"c1","uid":1107514,"ip_address":"","ucode":"88A9F5BE0BBAA5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/3a/5e8be862.jpg","comment_is_top":false,"comment_ctime":1575422890,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575422890","product_id":100039001,"comment_content":"把需求描述中的名词罗列出来，作为可能的候选类，然后再进行筛选。今日有收获，打卡。","like_count":0},{"had_liked":false,"id":158601,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212758,"ip_address":"","ucode":"ABF1824D24BA2F","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/56/311be282.jpg","comment_is_top":false,"comment_ctime":1575421640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575421640","product_id":100039001,"comment_content":"# 将需求描述转化为具体的类的设计<br>## 划分职责进而识别出有哪些类<br>* 把涉及的功能点罗列出来，看哪些功能点职责相近，操作同样的属性，可否归为同一个类<br>## 定义类及其属性和方法<br>* 识别出需求描述中的动词，作为候选的方法，再进一步过滤筛选出真正的方法<br>* 把功能点中涉及的名词，作为候选属性，然后同样再进行过滤筛选<br><br>## 定义类与类之间的交互关系<br>* 泛化、实现、组合、依赖<br><br>## 将类组装起来并提供执行入口<br>* 一个 main() 函数<br>* 一组给外部用的 API 接口","like_count":0},{"had_liked":false,"id":158599,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1575421568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575421568","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":158593,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":1003738,"ip_address":"","ucode":"2E254444098267","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/da/ed4803cb.jpg","comment_is_top":false,"comment_ctime":1575421299,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575421299","product_id":100039001,"comment_content":"AuthToken.generate(originalUrl, appId, password, timestamp)在设计阶段并未提及。","like_count":0,"discussions":[{"author":{"id":1098286,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","nickname":"blacknhole","note":"","ucode":"271682FFE28F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71766,"discussion_content":"提到了，就是类图中的create方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575456565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1252977,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","nickname":"成楠Peter","note":"","ucode":"4D13E7368D8CF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71476,"discussion_content":"这个应该是服务端生成的token，可以根据函数名推测出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575424106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158574,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1575420191,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575420191","product_id":100039001,"comment_content":"打卡，需要消化一下今天的课程。","like_count":0},{"had_liked":false,"id":158573,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1575420162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575420162","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":158567,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1575419494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575419494","product_id":100039001,"comment_content":"看了第一遍。先来留个言。学习了面对对象开发的设计思想和分析。需要在多看两遍，跟着小争哥的设计思路在自己梳理一遍。","like_count":0},{"had_liked":false,"id":158564,"user_name":"deepz","can_delete":false,"product_type":"c1","uid":1570088,"ip_address":"","ucode":"4BD23A44CDB384","user_header":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","comment_is_top":false,"comment_ctime":1575419334,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575419334","product_id":100039001,"comment_content":"打卡～  每次更新两篇就更好了😏😏","like_count":0},{"had_liked":false,"id":158547,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1575417603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575417603","product_id":100039001,"comment_content":"我在实际工作中，理完需求后，在白纸上粗略的列列需要哪些类，哪些属性，理清类的关系后，开始做有关DDL相关的事 如建表等。大致考虑一下代码怎么测试，之后开始编码。在编码过程中，会不断的优化在设计阶段的设计。编码完成后，开始自测。在自测过程中验证代码的运行是否符合需求描述。不符合，修改迭代。其实在测试与修改迭代这一步可以反思一下自己设计和分析阶段是否不合理等等。","like_count":0},{"had_liked":false,"id":158546,"user_name":"方小白","can_delete":false,"product_type":"c1","uid":1441572,"ip_address":"","ucode":"425F5167C15407","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/24/d8f97f2c.jpg","comment_is_top":false,"comment_ctime":1575417586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575417586","product_id":100039001,"comment_content":"去完成作业去😾","like_count":0},{"had_liked":false,"id":160169,"user_name":"斜杠青年","can_delete":false,"product_type":"c1","uid":1177739,"ip_address":"","ucode":"D7AF02B8588549","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/8b/74d2ab6b.jpg","comment_is_top":true,"comment_ctime":1575884582,"is_pvip":true,"replies":[{"id":"61120","content":"可以的，我就是用的不可逆的","user_name":"作者回复","comment_id":160169,"uid":"1190123","ip_address":"","utype":1,"ctime":1575895594,"user_name_real":"王争"}],"discussion_count":5,"race_medal":1,"score":"9.2233720642004992e+18","product_id":100039001,"comment_content":"生成Token的算法可以用不可逆的Hash算法吗？例如MD5或是SHA?","like_count":6,"discussions":[{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542729,"discussion_content":"👍，不同角度出发，有不同的理解，没有绝对的答案，这就是设计之美，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640830404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200660,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/14/cb118a61.jpg","nickname":"键舞飞扬","note":"","ucode":"4EC7A8D2E7AC78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346543,"discussion_content":"支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611987427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158604,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1575422030,"is_pvip":true,"discussion_count":20,"race_medal":0,"score":"538446334030","product_id":100039001,"comment_content":"干货满满！争哥拆分需求、组织类和方法的思考过程值得我们学习。<br><br>我想到的实现过程是按照用户发送请求通过鉴权和未通过鉴权的流程写：<br>1、先写接口auth(String url) ，这里先定义好请求的格式，例如“xxx?AppID=123&amp;Token=aaa&amp;TimeStamp=123123”<br>2、ApiRequest类，解析请求<br>3、AuthToken类，判断是否过期、token匹配、校验token<br>4、CredentialStorate类，获取AppID对应的password<br><br>具体实现见：https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;geekbang&#47;designpattern&#47;u014","like_count":126,"discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384869,"discussion_content":"怎么用 回调 来优化 模板模式啊?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626776582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158559,"user_name":"醉比","can_delete":false,"product_type":"c1","uid":1248399,"ip_address":"","ucode":"79E65F62BE7809","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/8f/4ebd303a.jpg","comment_is_top":false,"comment_ctime":1575419080,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"362352671944","product_id":100039001,"comment_content":"前一个项目我也完整的实现了整个鉴权流程，需求分析阶段可以说和小争哥分析的功能点几乎一样，拼接参数，进行加密，验证token，验证时间。可到了编程阶段，我还是按照面向过程的方式，拆了几个方法，把功能就实现了。今天给我了一个深刻的感悟，面向对象编程，听起来并不复杂，但他真正的难点在于我学了这么多，对于下一个功能，是不是能够用面向对象的方式来把功能实现。如何做到学以致用，是我们学会知识后，接下来要考虑的问题。","like_count":85,"discussions":[{"author":{"id":1446492,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/5c/27b8c611.jpg","nickname":"黎明","note":"","ucode":"809EC045A34966","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333900,"discussion_content":"回调只能说是闭包的一种应用","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607668072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158679,"user_name":"大大。","can_delete":false,"product_type":"c1","uid":1237399,"ip_address":"","ucode":"A6716E46264AC4","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/97/fec494f2.jpg","comment_is_top":false,"comment_ctime":1575432198,"is_pvip":false,"replies":[{"id":"61149","content":"你说得很好，多谢指出啊，确实没必要搞个接口，ApiRequest的设计也依赖了具体的url实现，所以也不是很通用。","user_name":"作者回复","comment_id":158679,"uid":"1190123","ip_address":"","utype":1,"ctime":1575898125,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"259273469958","product_id":100039001,"comment_content":"争哥：设计了一个最顶层的 ApiAuthencator 接口类，为什么要设计出一个顶层的接口，虽然是面向接口编程，但是写成接口，意味着还会有其他的不同实现吗，如果有其他不同的实现，那么接口中的第二个参数的ApiRequest也不一定会适用不同的那个实现的传参，不知道说明白没有","like_count":60,"discussions":[{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233777,"discussion_content":"如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法。\n我感觉这个意思应该更多指的是语法检查，抽象方法如果不实现，有些语言是编译不过的，而callback则没有这个限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586944695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1685995,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b9/eb/6bdab896.jpg","nickname":"Murrre","note":"","ucode":"49644059B512BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232984,"discussion_content":"文中有提到“A 类如何将回调函数传递给 B 类呢？不同的编程语言，有不同的实现方法。C 语言可以使用函数指针，Java 则需要使用包裹了回调函数的类对象，我们简称为回调对象”，所以，如果这里指的是只定义了一个方法的函数式接口。另外JAVA为什么要用定义函数式接口的方式，而不能像js语言那样直接传递函数，可以查一下资料。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586880815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1533457,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoZWmm13FaxcVqJTKQCJLGfPAuWyz02CzAM6eI5Zvib8H1c0iakReibfJPYp7MclRES3Ut5JsO8wxEwg/132","nickname":"Geek_a02497","note":"","ucode":"41C28775943B7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212056,"discussion_content":"default？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584929482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208231,"discussion_content":"一开始我也疑惑，后面看看RestTemplate和JdbcTemplate的实现，个人感觉回调接口一般只会定义一个抽象方法，RestTemplate的RequestCallback接口,JdbcTemplate里的StatementCallback接口都是FunctionalInterface类型的接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584540054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158552,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1575418323,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"250683521491","product_id":100039001,"comment_content":"打卡✔<br>如果是我的话怕是理清功能后，写一个鉴权util，然后所有的方法都塞进去，典型的面向过程了😩","like_count":59,"discussions":[{"author":{"id":1003265,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/01/cff4ce72.jpg","nickname":"cat","note":"","ucode":"F50B371C2123C2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547753,"discussion_content":"总结的精炼。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642854608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159210,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1575561565,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"100359809373","product_id":100039001,"comment_content":"1、token加密采用md5<br>2、执行测试类即可<br>花了一小时完成了课后题，望纠正，一起学习.<br>上代码:   https:&#47;&#47;gitee.com&#47;MondayLiu&#47;geek-design.git","like_count":24},{"had_liked":false,"id":158771,"user_name":"bboy孙晨杰","can_delete":false,"product_type":"c1","uid":1178683,"ip_address":"","ucode":"D7389FB3368749","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/3b/c6b5b64f.jpg","comment_is_top":false,"comment_ctime":1575448705,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"61704990849","product_id":100039001,"comment_content":"同样的需求我在代码里实现过，但是看了争哥的思路有种耳目一新的感觉；<br>另外我有一点疑惑：“将 token、AppID、时间戳拼接到 URL 中，形成新的 URL”，这个功能点应该是在客户端完成的吧，服务端只需要在验证的时候解析URL，验证token就可以了吧，虽然也是一个功能点，但实际并不需要服务端考虑。","like_count":14,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224899,"discussion_content":"钩子应该就是很形象的表达, 比如平时的代码都是一条流水那样执行的, hook就是把其中某个步骤勾过来, 操作一波之后又把这个方法返回去, 不影响代码的执行流水.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586335985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158703,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1575436621,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"61704978765","product_id":100039001,"comment_content":"对比一下整个流程，发现现在自己做的还是太草率了。<br><br>我也知道写代码其实是整个开发过程中最简单的一件事情，只要前期准备工作做的好，把该分析的都分析清楚，写代码自然就是水到渠成的事情。<br><br>但是我现在的做法是：<br><br>1. 拿到需求之后，先判断需求是否可以同项目中复用；<br>2. 然后拿一个小笔记本把涉及到的需求先设想下，包括类、DB等设计（用法很粗糙，没老师这么细致）<br>3. 用伪代码先把小流程实现<br>4. 写代码<br><br>这里的薄弱环节就是不知道如何更好的使用设计模式，从第三步直接到了第四步，而不存在软件工程中UML的设计，导致很多时候代码写了很多，也一直是在做面向过程的事情，而不是面向对象。<br><br>课程真的很赞，已经不能再夸了。好好跟着课程学习，收获满满，和同学们一起进步","like_count":14},{"had_liked":false,"id":158655,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1575428324,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48820068580","product_id":100039001,"comment_content":"用这种需求分析需求设计的方式，你告诉我一个方法怎么可能超过五十行？编程规范都说方法单个不超过五十行，八十行的。到头来为什么还是超过？就是因为之前都是面向过程编程，token，url等操作都放到一个类的一个方法里面，要全面相过程编程。争哥的这种需求分析需求设计的方式值得学习和效仿，真的香！","like_count":11,"discussions":[{"author":{"id":1488356,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","nickname":"握了个大蚂蚱","note":"","ucode":"AD34AD4FA37371","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306966,"discussion_content":"还挺萌的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600434760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158570,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1575419939,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48820060195","product_id":100039001,"comment_content":"设计模式_14<br>我就是画画草稿图就开始写代码的那个人，画图可以避免复杂度在大脑中“爆炸”。。。<br><br># 感想：<br>在入门阶段，我们会遵照一些方法论来行事，比如<br>“寻找名词作为参数”，<br>“寻找动词作为方法”<br>...<br>这些方法通常都可以直接执行，一顿操作解决问题。<br>时间久了，我们开始思考：<br>- 为什么要这样做？<br>- 这些方法的本身优势是什么？<br><br>这个时候，我们才接近了分析的的本质，我们可能沿用这些方法，亦或找到更好的方法，不管怎样，都变得更通透。","like_count":11,"discussions":[{"author":{"id":1049741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","nickname":"weineel","note":"","ucode":"6DC6EF4F256A53","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71608,"discussion_content":"我也是这样，画图是真的可以防止复杂度在大脑中“爆炸”。复杂点的问题，画个简图，太重要了。\n学再多经验，该踩的坑还是要踩的。亲手做过，然后反思，然后接近本质。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575437865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158561,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1575419208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48820059464","product_id":100039001,"comment_content":"我觉得，鉴权和url解析的类就是充血模型。就是domain,就是领域层","like_count":12},{"had_liked":false,"id":164274,"user_name":"Arthur.Li","can_delete":false,"product_type":"c1","uid":1005824,"ip_address":"","ucode":"EC2436A5136C13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","comment_is_top":false,"comment_ctime":1576921058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44526594018","product_id":100039001,"comment_content":"1. 面向对象分析<br>* 产出是详细的需求描述<br><br>2. 如何进行面向对象设计<br>* 产出是类<br>* 划分职责进而识别出有哪些类<br>    * 根据需求描述拆解小功能点（单一职责），罗列出来<br>    * 找到功能相近、操作同样属性的可能归到一个类<br>    * 复杂的需求需要先拆分模块，然后再用这个方法找类<br><br>* 定义类及其属性和方法<br>    * 需求描述中动词作为候选方法、名次作为候选属性<br>    * 并不是所有名次都被定义为类的属性，不属于这个类的可以通过传参<br><br>* 定义类与类之间的交互关系<br>    1. 泛化（Generalization）<br>    简单理解为继承关系<br>    2. 实现（Realization）<br>    一般是指接口和实现类之间的关系<br>    3. 关联（Association）<br>    一种非常弱的关系，包含聚合、组合两种关系。如果 B 类对象是 A 类的成员变量，那 B 类和 A 类就是关联关系。<br>    4. 聚合（Aggregation）<br>    一种包含关系。A 类对象包含 B 类对象，B 类对象的生命周期可以不依赖 A 类对象的生命周期，比如课程与学生之间的关系。`public class A {  private B b;  public A(B b) {    this.b = b;  }}`<br>    5. 组合（Composition）<br>    一种包含关系。A 类对象包含 B 类对象，B 类对象的生命周期跟依赖 A 类对象的生命周期，B 类对象不可单独存在，比如鸟与翅膀之间的关系`public class A {  private B b;  public A() {    this.b = new B();  }}`<br>    6. 依赖（Dependency）<br>    比关联关系更加弱的关系，包含关联关系。<br>* 将类组装起来并提供执行入口<br>    * 独立系统的话可以是main函数<br>    * 可以是一组给外部调用的API接口<br><br>整体看下来对真正面向对象编程好像有了正确的理解， 不过单独自己去实现的时候，又不不会那么周到，还是文中所说，需要练习和经验。","like_count":10},{"had_liked":false,"id":158864,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1575466517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40230172181","product_id":100039001,"comment_content":"组合关系：强调部分与整体的关系，其中包括两种情况，关联性强（大雁与翅膀）的与关联性弱（学生与班级）的。<br>依赖关系：强调对象与对象的临时关系，人开车。","like_count":9},{"had_liked":false,"id":158535,"user_name":"chanllenge","can_delete":false,"product_type":"c1","uid":1213699,"ip_address":"","ucode":"148FC08C90BC58","user_header":"https://static001.geekbang.org/account/avatar/00/12/85/03/1a7d3dd6.jpg","comment_is_top":false,"comment_ctime":1575414705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31640185777","product_id":100039001,"comment_content":"写的太好了，这一次一定要把设计模式学会","like_count":7},{"had_liked":false,"id":158744,"user_name":"大土豆","can_delete":false,"product_type":"c1","uid":1121636,"ip_address":"","ucode":"67445DC3EC9DB0","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/64/52a5863b.jpg","comment_is_top":false,"comment_ctime":1575445768,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27345249544","product_id":100039001,"comment_content":"把UML的6种关系给省略成4种，这知识太干了。就喜欢老师这种实战派。","like_count":6},{"had_liked":false,"id":169085,"user_name":"杨松","can_delete":false,"product_type":"c1","uid":1512517,"ip_address":"","ucode":"FB3C73BC44C94D","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/45/adf079ae.jpg","comment_is_top":false,"comment_ctime":1578271923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23053108403","product_id":100039001,"comment_content":"看完这篇文章扫盲了好多误区，当初对聚合，组合根本分不清，今儿终于明白了。","like_count":5},{"had_liked":false,"id":159898,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1575820960,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23050657440","product_id":100039001,"comment_content":"采用什么方式，要看做的需求有多复杂。<br>（1）如果是日常的维护和升级，我目前的开发模式是：拿到需求后先理解需求，包括业务用例、整体交互、通过这俩分析出系统用例：大多数情况是对现有系统的改造和升级，因此还需要考虑对现有功能的影响，依次加入回归用例。<br><br>拿到用例之后再进行分析和设计，设计的时候最核心的图是时序图、活动图和状态图，类图反而用得不多，看起来自己目前是TDD下的过程式编程。<br><br>（2）如果是一个完整的项目，或者说是超过两周的迭代，就会再加一层系统设计、模块设计的环节，然后按照前面的流程细化执行<br><br><br>","like_count":5},{"had_liked":false,"id":158702,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1575436145,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23050272625","product_id":100039001,"comment_content":"需求分析过程中，或者分析完，不要直接就想着数据库表结构怎么设计。<br>基本是按照老师说的这个流程分析下来，再对外暴露接口，最后是如何存储，存储的结构视存储方式而定，比如存到DB，Redis，MongoDB等等，还有可能会切换实现。<br>整体就是做好需求分析拆解，根据功能边界模块划分，模块内部还可以分子模块，再做好每个模块内部功能分析实现，以及模块之间的协作。","like_count":5},{"had_liked":false,"id":158592,"user_name":"DigDeeply","can_delete":false,"product_type":"c1","uid":1239008,"ip_address":"","ucode":"113F4D755A1FEC","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/e0/33521e13.jpg","comment_is_top":false,"comment_ctime":1575421296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23050257776","product_id":100039001,"comment_content":"针对以往的贫血模型的开发经验，基本就是通过数据建模来实现的，都是先把需求拆分出实体，针对实体定义数据字段，也就是属性，再梳理出方法。这种思路就很难引导自己去进行抽象。最后出来的代码也就是面向过程了😂","like_count":5},{"had_liked":false,"id":170441,"user_name":"LAMBO","can_delete":false,"product_type":"c1","uid":1214041,"ip_address":"","ucode":"10EDE0FC134FA8","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/59/e8f58a2a.jpg","comment_is_top":false,"comment_ctime":1578616046,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18758485230","product_id":100039001,"comment_content":"这节最大的收获就是，终于弄清楚了类与类之间的关系：泛华（继承）、实现、依赖、关联、聚合、组合。","like_count":4,"discussions":[{"author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372715,"discussion_content":"我也是，虽然设计模式的书上总是会举例子，比如组合会说小鸟和翅膀的关系，但是只有看到了争哥的代码，才明白在代码实现上是这种依赖关系","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620441001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158517,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1514882,"ip_address":"","ucode":"2F1FA3519FAB50","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyiafvkibXnTOpIJxlhndHpSDMsqja9AajKYtYgGEGtFWtBb2Mg8DRVjqlWyIxl1piaT4qpMkwerQUg/132","comment_is_top":false,"comment_ctime":1575391658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18755260842","product_id":100039001,"comment_content":"打卡，需要消化一下今天的课程","like_count":4},{"had_liked":false,"id":244797,"user_name":"ThinkingQuest","can_delete":false,"product_type":"c1","uid":1118560,"ip_address":"","ucode":"597D0C00DAEFE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0SDRac7XoordnKYgDLhz5wxAOtE6xqcsSywsywEtKQAR7xicBZQ6ceYftfZjl4Ivq3a5dzvRhYkn2GcUWiaQK7ZQ/132","comment_is_top":false,"comment_ctime":1598682309,"is_pvip":false,"replies":[{"id":"90133","content":"嗯嗯，你说的也对，那应该用boolean值作为返回值吗？那携带的信息就很少呀，只有true、false，不知道失败的原因。我觉得选择exception就是一种设计上的权衡。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1598833871,"ip_address":"","comment_id":244797,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14483584197","product_id":100039001,"comment_content":"ApiAuthenticator接口的两个方法，都声明为返回void， 用Exception来控制token过期或不合法，这样好吗？<br><br>token过期或不合法，在业务上应该是一种正常的，需要程序逻辑分支来处理的情形吧， 用throw runtime exception的方式来处理， 感觉上等于是把exception用于控制执行流程了。 <br><br>关于这个，不知道应该怎么考虑。","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504704,"discussion_content":"嗯嗯，你说的也对，那应该用boolean值作为返回值吗？那携带的信息就很少呀，只有true、false，不知道失败的原因。我觉得选择exception就是一种设计上的权衡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598833871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162288,"user_name":"瑞泉","can_delete":false,"product_type":"c1","uid":1111565,"ip_address":"","ucode":"D38E24A98FDAE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/0d/e16dff4e.jpg","comment_is_top":false,"comment_ctime":1576492747,"is_pvip":false,"replies":[{"id":"62283","content":"是的 还没空整理 稍等一阵子吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1576804139,"ip_address":"","comment_id":162288,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14461394635","product_id":100039001,"comment_content":"王争老师，代码是在这个地址吗？https:&#47;&#47;github.com&#47;wangzheng0822&#47;codedesign，是空的","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478003,"discussion_content":"是的 还没空整理 稍等一阵子吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576804139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381013,"discussion_content":"2021.6.28 还是空的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624866110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336184,"discussion_content":"2020.12.21了，里面还是什么都没有。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608522387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041994,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiaeTzf4V8ib4xKcYjWEIflBSqkjbpkscoaedppgnBAD9ZAibjYSz0DNSJQw8icz7xljEgbNQ5hrzPAA/132","nickname":"liudu_ec","note":"","ucode":"E299071BD1DFA8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302074,"discussion_content":"2020年8月30号了，还是空的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598780384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161209,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1576148317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14461050205","product_id":100039001,"comment_content":"这两天刚好在看许式伟老师的课。<br>其中提到的正交分解，对业务模块，业务流程进行正交分解。<br>原话：业务分解就是最小化的核心系统，加上多个正交分解的周边系统。核心系统一定要最小化，要稳定。坚持不要往核心系统中增加新功能，这样你的业务架构就不可能有臭味。换句话说，怎么做业务分解？业务分解就是最小化的核心系统，加上多个正交分解的周边系统。核心系统一定要最小化，要稳定。坚持不要往核心系统中增加新功能，这样你的业务架构就不可能有臭味。<br>这是我们的信仰。重要的话要说三遍<br>文章链接：https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;173619<br>","like_count":3},{"had_liked":false,"id":237025,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1595659672,"is_pvip":false,"replies":[{"id":"88027","content":"isExpired()只用来判断是否过期，match()用来判断是否错误","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1596112185,"ip_address":"","comment_id":237025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10185594264","product_id":100039001,"comment_content":"王老师，你好，我有个问题，针对：AuthToken中，isExpired()方法，这里返回的是布尔类型，那么，如果我传的是<br>- 错误的token<br>- 正确的token但是过期<br>这两类都会判断成false，那么我怎么知道我的token是格式问题还是过期问题呢？","like_count":2},{"had_liked":false,"id":159632,"user_name":"unreal","can_delete":false,"product_type":"c1","uid":1105905,"ip_address":"","ucode":"43F32FBA2784E7","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/f1/d9081468.jpg","comment_is_top":false,"comment_ctime":1575709233,"is_pvip":false,"replies":[{"id":"61131","content":"多谢建议，你说的没错，ApiRequest确实还是依赖了url","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575896622,"ip_address":"","comment_id":159632,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10165643825","product_id":100039001,"comment_content":"有个问题，ApiRequest叫法虽然更加通用，但实际创建接口命名还是依赖实现了吧，都是基于url的，还是我理解问题？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504442,"discussion_content":"有点，不过权衡利弊吧，没有绝对的完美。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598834280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159611,"user_name":"帆大肚子","can_delete":false,"product_type":"c1","uid":1529040,"ip_address":"","ucode":"3DB11DB2FA1802","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/d0/4e1fc664.jpg","comment_is_top":false,"comment_ctime":1575704237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165638829","product_id":100039001,"comment_content":"目前我觉得需要学会的是转化自己的面向过程编程的思想","like_count":2},{"had_liked":false,"id":158533,"user_name":"与雨日肇事的爱","can_delete":false,"product_type":"c1","uid":1288032,"ip_address":"","ucode":"A3B88A1F4AF2D5","user_header":"https://static001.geekbang.org/account/avatar/00/13/a7/60/f175d953.jpg","comment_is_top":false,"comment_ctime":1575412906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165347498","product_id":100039001,"comment_content":"打卡","like_count":2},{"had_liked":false,"id":182368,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1582774748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877742044","product_id":100039001,"comment_content":"老王还是一如既往的让人敬佩,从你数据结构专栏学习,追到这里了,讲课通俗已送,希望老王继续出更过的专栏,帮助我这种搬砖码农提升自己,非常感谢王争老师!","like_count":1},{"had_liked":false,"id":172677,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1579250080,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5874217376","product_id":100039001,"comment_content":"少说废话，直接上代码：https:&#47;&#47;github.com&#47;xuziyang&#47;codedesign&#47;tree&#47;master&#47;auth","like_count":1,"discussions":[{"author":{"id":1940562,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9c/52/dc770378.jpg","nickname":"yang","note":"","ucode":"67C86E09BA6E4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370250,"discussion_content":"哦，这样的作业我就看明白了。多谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619344949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169950,"user_name":"小虫子","can_delete":false,"product_type":"c1","uid":1435887,"ip_address":"","ucode":"3DBCDFB69D3638","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLibibbBhyIQKpSF9JrG7fWxWxQxpicVice1lNj5VtqzgTqhE8PUSBFFh3UxMzgJzU4UKXHZYhmk6wdbQ/132","comment_is_top":false,"comment_ctime":1578481367,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5873448663","product_id":100039001,"comment_content":"interface CredentialStorage{<br>    public function getPasswordByAppId($appId);<br>}<br><br><br>class AuthToken{<br><br>    public  $appId;<br>    private $password;<br>    public  $token;<br>    public  $expireTimeInterval = 60;<br><br>    public function __construct($appId,$password)<br>    {<br>        $this-&gt;appId = $appId;<br>        $this-&gt;password = $password;<br>        $this-&gt;createToken($appId,$password);<br>    }<br><br>    public function createToken($appId,$password){<br>        $str = $appId.$password.time();<br>        $this-&gt;token = md5($str);<br>        return $this-&gt;token;<br>    }<br>    public function isExpired($timestamp){<br>        if(time()-$timestamp&gt;$this-&gt;expireTimeInterval)<br>            return false;<br>        else<br>            return true;<br><br>    }<br>    public function match($token){<br>        if($token==$this-&gt;token)<br>            return true;<br>        else<br>            return false;<br><br>    }<br><br>}<br><br><br>class ApiRequest{<br><br>    private $token;<br>    private $appId;<br>    private $createTime;<br><br>    public function __construct($appId,$token,$createTime)<br>    {<br>        $this-&gt;appId = $appId;<br>        $this-&gt;token = $token;<br>        $this-&gt;createTime = $createTime;<br>    }<br><br>    public function buildFromUrl()<br>    {<br>        $url = &#39;appid=&#39;.$this-&gt;appId.&#39;&amp;ts=&#39;.$this-&gt;createTime.&#39;&amp;token=&#39;.$this-&gt;token;<br>        return $url;<br>    }<br>    public function getToken($url){<br>        $arr = parse_url($url);<br>        return $arr[&#39;token&#39;];<br>    }<br>    public function getAppId($url){<br>        $arr = parse_url($url);<br>        return $arr[&#39;appid&#39;];<br>    }<br>    public function getCreateTime($url){<br>        $arr = parse_url($url);<br>        return $arr[&#39;ts&#39;];<br>    }<br><br><br>}<br><br>class MysqlCredentialStorage implements CredentialStorage{<br>    public function getPasswordByAppId($appId)<br>    {<br>        return &#39;123456&#39;;<br>    }<br>}","like_count":1,"discussions":[{"author":{"id":1298631,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d0/c7/62de0458.jpg","nickname":"谭小谭","note":"","ucode":"C7928BEDFF4EDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375245,"discussion_content":"代码不那么全呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621528393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167410,"user_name":"Kaybee","can_delete":false,"product_type":"c1","uid":1106900,"ip_address":"","ucode":"B94E578F12A365","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/d4/22d48e2a.jpg","comment_is_top":false,"comment_ctime":1577786027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872753323","product_id":100039001,"comment_content":"课后作业：<br>https:&#47;&#47;github.com&#47;LiuKay&#47;design-patterns&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;kay&#47;practice&#47;auth","like_count":1},{"had_liked":false,"id":159450,"user_name":"Jony","can_delete":false,"product_type":"c1","uid":1688362,"ip_address":"","ucode":"07F77487BFBF7F","user_header":"https://static001.geekbang.org/account/avatar/00/19/c3/2a/07ba6663.jpg","comment_is_top":false,"comment_ctime":1575626144,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"5870593440","product_id":100039001,"comment_content":"老师，我有个问题，当客户端跟服务端的时间不同步时，鉴权token不是都检验不通过了吗？怎么才能保证客户端跟服务端时间同步？","like_count":1,"discussions":[{"author":{"id":1631655,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e5/a7/bf2ca8fc.jpg","nickname":"kyle","note":"","ucode":"53F0E544933798","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79712,"discussion_content":"都采用UTC时间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576106092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275580,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/bc/0e8e0ef8.jpg","nickname":"刘洋","note":"","ucode":"9C4DEDDF6CB7DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76086,"discussion_content":"可以用一个时间同步服务器","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575809079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1786752,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/43/80/b1ae32cd.jpg","nickname":"Kenneth。🌞","note":"","ucode":"299ADF236395CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381910,"discussion_content":"使用硬件的时间就可以了，不会偏差很大，对于token 有效期不会说一定要精确到秒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625285422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591810,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4a/02/1db217d5.jpg","nickname":"宇园","note":"","ucode":"7D6E7DBBD20C76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373281,"discussion_content":"用的是客户端传过来的时间戳，先对比是否过时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620690169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591810,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4a/02/1db217d5.jpg","nickname":"宇园","note":"","ucode":"7D6E7DBBD20C76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373280,"discussion_content":"用的是客户端传过来的时间戳，先对比是否过时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620690168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159126,"user_name":"陈迎春","can_delete":false,"product_type":"c1","uid":1443663,"ip_address":"","ucode":"2870BA6D6E5B1E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIang00R9vkklnkFCLhzRysNfocr0sLnCdoZwOT3UkulAPefk5BDvd0PfIeQSODSQg1DjKWUmJOaA/132","comment_is_top":false,"comment_ctime":1575543392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870510688","product_id":100039001,"comment_content":"有关数据存储接口定义，有如下疑问： 数据存储会支持数据库（sqlite, mysql, redis）或者文本，那么我这个接口如何定义呢？我感觉下面的做法有点问题，就是数据库和文本存储方式接口不是很兼容<br><br><br>目前做法是（python代码）<br>class DataStorageInterface:<br>    &quot;&quot;&quot;<br>    数据存储接口类<br>    &quot;&quot;&quot;<br>    def write(self, cmd):<br>        pass<br><br>    def read(self, cmd):<br>        pass<br><br><br>class SqliteStorage(DataStorageInterface):<br>    &quot;&quot;&quot;<br>    sqlite存储类<br>    &quot;&quot;&quot;<br>    def write(self, cmd):<br>        执行cmd，将数据插入数据库<br><br><br>    def read(self, cmd):<br>        执行cmd，读取数据<br><br>class TxtStorage(DataStorageInterface):<br>    &quot;&quot;&quot;<br>    文本存储<br>    &quot;&quot;&quot;<br>    def write(self, cmd):<br>       这里cmd其实应该是数据<br><br><br>    def read(self, cmd):<br>    ","like_count":1},{"had_liked":false,"id":158645,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1575426534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870393830","product_id":100039001,"comment_content":"令狐大侠练独孤九剑，张无忌练太级拳。<br>在实战时都是：忘光了吗？差不多，还记得两成。忘光了吗？是的，不记得了。好，开打，稳赢！","like_count":1},{"had_liked":false,"id":158597,"user_name":"2018","can_delete":false,"product_type":"c1","uid":1107371,"ip_address":"","ucode":"4C2CD47AD70177","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/ab/6fab2492.jpg","comment_is_top":false,"comment_ctime":1575421524,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5870388820","product_id":100039001,"comment_content":"第一遍看完，感觉还没有get到点😞😞","like_count":1},{"had_liked":false,"id":158563,"user_name":"傲慢与偏执，","can_delete":false,"product_type":"c1","uid":1236496,"ip_address":"","ucode":"E9F81223DFAD24","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","comment_is_top":false,"comment_ctime":1575419253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870386549","product_id":100039001,"comment_content":"一遍不好理解 第二遍我再来...","like_count":1},{"had_liked":false,"id":158560,"user_name":"　　","can_delete":false,"product_type":"c1","uid":1560563,"ip_address":"","ucode":"0D736D44A24C56","user_header":"https://static001.geekbang.org/account/avatar/00/17/cf/f3/48fc6781.jpg","comment_is_top":false,"comment_ctime":1575419118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870386414","product_id":100039001,"comment_content":"难度一下子提升了 ……","like_count":1},{"had_liked":false,"id":158536,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1575415731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870383027","product_id":100039001,"comment_content":"对鉴权又有了更深的了解，并且对面向对象设计有了一些理解，的确做开发的时候我几乎没有按照这样设计，都是像后边说的在脑海或者草纸上简单设计下就开始写实现。的确设计的再好在实现的时候也会有想不到的地方。","like_count":1},{"had_liked":false,"id":357763,"user_name":"怀英","can_delete":false,"product_type":"c1","uid":1394143,"ip_address":"江苏","ucode":"E2838AF06FB300","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/df/97a71dc8.jpg","comment_is_top":false,"comment_ctime":1663624497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663624497","product_id":100039001,"comment_content":"我认为，在实际的开发中，除了上述几个方向外，经验还体现在设计的时候有没有预留“口子”。就比如设计URL类的时候，就想到以后传进来的可能不仅仅只是URL，因此要预先留个“口子”。","like_count":0},{"had_liked":false,"id":356952,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662720346,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662720346","product_id":100039001,"comment_content":"老师讲的这个实际上也是一个充血模型方式，实际上很多就是贫血模型方案。先定义bean,然后写repository ,service,controller。repositroy和controller 很简单，没有什么业务，就是service需要填充业务。那充血模型相当于是 再bean中，就把用到的方法直接定义好了。<br><br>老师对接口的抽象很恰到好处啊，这篇适合多次读","like_count":0},{"had_liked":false,"id":356671,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"中国香港","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662482083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662482083","product_id":100039001,"comment_content":"如何进行面向对象设计开发：<br>   1.拿到需求进行功能罗列，进行归类，理清类之间的交互和关系。如果涉及需求多，应该先按模块划分职责，在罗列具体的功能点。<br>  2. 定义具体的类属性和方法。<br>  3.定义类之间的交互关系： 泛化，组合，关联，聚合。<br>  4.将类组装起来并提供入口。","like_count":0},{"had_liked":false,"id":338712,"user_name":"金旭","can_delete":false,"product_type":"c1","uid":1644194,"ip_address":"","ucode":"2FE7B4B8CE4A07","user_header":"https://static001.geekbang.org/account/avatar/00/19/16/a2/789d296e.jpg","comment_is_top":false,"comment_ctime":1647680138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647680138","product_id":100039001,"comment_content":"请问 c++如何实现 类间“实现” 这种关系的？<br>c++中的接口类 是用 抽象类代替吗？<br>那实现类通过继承抽象类来实现的话，那不是这里说的 类间&quot;泛化&quot; 关系吗？？？？","like_count":0},{"had_liked":false,"id":337172,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1646659547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646659547","product_id":100039001,"comment_content":"很认同作者的这几步过程，深有体会。<br>1.划分职责进行识别出有哪些类。<br>2.定义类及其属性和方法。<br>3.定义类与类之间的交互关系。<br>4.将类组装起来，并提供执行入口。main或者API","like_count":0},{"had_liked":false,"id":327724,"user_name":"纵不朽","can_delete":false,"product_type":"c1","uid":1877862,"ip_address":"","ucode":"DB2CA2C46B2EF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","comment_is_top":false,"comment_ctime":1640251548,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640251548","product_id":100039001,"comment_content":"sha加密后相等，就一定代表原数据相等吗","like_count":0},{"had_liked":false,"id":311716,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1631421413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631421413","product_id":100039001,"comment_content":"1、划分职责模块，定义类<br>2、类对应的属性和方法<br>3、梳理类之间的关系，泛化、实现、组合、依赖<br>4、提供程序运行的入口，main或外部访问的接口","like_count":0},{"had_liked":false,"id":310051,"user_name":"Geek_9302c2","can_delete":false,"product_type":"c1","uid":2709278,"ip_address":"","ucode":"42641A1CA55A4F","user_header":"","comment_is_top":false,"comment_ctime":1630470795,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630470795","product_id":100039001,"comment_content":"   AuthToken serverAuthToken = AuthToken.generate(originalUrl, appId, password, timestamp);  <br>  if (!serverAuthToken.match(clientAuthToken)) {      throw new RuntimeException(&quot;Token verfication failed.&quot;);    }<br><br>generate 是自定义方法还是java原生方法呀？<br>match传入的参数是对象，这里是比较两个对象相等吗？为什么不直接传入token值做比较","like_count":0},{"had_liked":false,"id":309969,"user_name":"Geek_386d5a","can_delete":false,"product_type":"c1","uid":2421583,"ip_address":"","ucode":"68C81F878523B8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLcicqTaDNu4lrREC3mDgLfLrsicmkwXlJDRD9muM7vicUWdEv8grsw9ycdm6MIVXK7ydyIon71gLfDw/132","comment_is_top":false,"comment_ctime":1630418722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630418722","product_id":100039001,"comment_content":"老师您好，我有个疑惑为什么要把 CredentialStorage 作为属性在构造方法传入而不是像API request一样在方法中传入呢？","like_count":0},{"had_liked":false,"id":304229,"user_name":"Geek_00e01b","can_delete":false,"product_type":"c1","uid":1597071,"ip_address":"","ucode":"BC76A83B53D0EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe9iavda8ia7vNkbMVEHsCKs43l6U6HGWibiaxxKd9PuiaYu5wRedicC96PLicZ9VIh0ic5Jg8YHPrta3IAQ/132","comment_is_top":false,"comment_ctime":1627298950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627298950","product_id":100039001,"comment_content":"课程中的实战案例比较简单，显示项目中可能会复杂的多，在没有掌握面向对象设计精髓之前，感觉还是比较困难的","like_count":0},{"had_liked":false,"id":302568,"user_name":"Geek_设计模式之美","can_delete":false,"product_type":"c1","uid":2690172,"ip_address":"","ucode":"59263416E65594","user_header":"","comment_is_top":false,"comment_ctime":1626264950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626264950","product_id":100039001,"comment_content":"都没用个https吗?","like_count":0},{"had_liked":false,"id":302280,"user_name":"九尾","can_delete":false,"product_type":"c1","uid":2429969,"ip_address":"","ucode":"3E6BDF7B9C78FC","user_header":"https://static001.geekbang.org/account/avatar/00/25/14/11/f1220081.jpg","comment_is_top":false,"comment_ctime":1626154672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626154672","product_id":100039001,"comment_content":"以前自己也是类似的写法，但总感觉少了点什么，现在看到这个流程，感觉系统性的方法论有了","like_count":0},{"had_liked":false,"id":301595,"user_name":"Geek__126303fc81f7","can_delete":false,"product_type":"c1","uid":1453774,"ip_address":"","ucode":"D256622360E1B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibFY0KibR500NUAibZqsZCqg8Z6XicEaqr23oZTUlFcQaMXAlhETpVBXPAiamJ1IYcc7ibn7ZGdmUycxAicibkhtSc3xYA/132","comment_is_top":false,"comment_ctime":1625755590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625755590","product_id":100039001,"comment_content":"今天记住了一个概念就是类与类之间的关系<br>实现 组合 泛化 依赖","like_count":0},{"had_liked":false,"id":300543,"user_name":"小帅","can_delete":false,"product_type":"c1","uid":1239663,"ip_address":"","ucode":"4129A7E9427FFC","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/6f/09de5f65.jpg","comment_is_top":false,"comment_ctime":1625212864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625212864","product_id":100039001,"comment_content":"按自己的惯性思维做了下实现 应该是妥妥的面向过程了 请指教<br><br>public class UrlAuthImpl implements IUrlAuth{<br>    &#47;&#47;接口注入  查询app对应密码<br>    private IAppInfoService appInfo;<br><br>    @Override<br>    public boolean auth(String url) {<br>        &#47;&#47;1:解析URL<br>        ApiRequest request =UrlUtil.paraseUrl(url);<br>        &#47;&#47;2:解析时间 根据当前时间判断调用时间<br>        Date timsstamp =request.getTimestamp();<br>        if(!UrlUtil.checkTime(timsstamp)){<br>            return false;<br>        }<br>        String appId = request.getAppId();<br>        &#47;&#47;3:根据appId查询密钥 校验token<br>        String password = appInfo.getPassWorld(appId);<br>        if(!UrlUtil.checkToken(request,password)){<br>            return false;<br>        }<br>        return true;<br>    }<br>}","like_count":0},{"had_liked":false,"id":293177,"user_name":"cosz3","can_delete":false,"product_type":"c1","uid":1218665,"ip_address":"","ucode":"B9023D4A088CF2","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/69/5a1c6620.jpg","comment_is_top":false,"comment_ctime":1621255352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621255352","product_id":100039001,"comment_content":"可以使用 client 和 server 来做类的划分么？","like_count":0},{"had_liked":false,"id":292094,"user_name":"宇园","can_delete":false,"product_type":"c1","uid":1591810,"ip_address":"","ucode":"7D6E7DBBD20C76","user_header":"https://static001.geekbang.org/account/avatar/00/18/4a/02/1db217d5.jpg","comment_is_top":false,"comment_ctime":1620690110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620690110","product_id":100039001,"comment_content":"auth 方法是否应该返回 bool 更合适？","like_count":0},{"had_liked":false,"id":291908,"user_name":"栾~龟虽寿！","can_delete":false,"product_type":"c1","uid":1504671,"ip_address":"","ucode":"219B38C08979FE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/9f/1509d389.jpg","comment_is_top":false,"comment_ctime":1620601615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620601615","product_id":100039001,"comment_content":"打卡 ，走过的路，每一步都算数。我只需要对自己负责，才是第一步。","like_count":0},{"had_liked":false,"id":290738,"user_name":"Geek_9dbc25","can_delete":false,"product_type":"c1","uid":2242904,"ip_address":"","ucode":"6CB31893173165","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIHxTg3tYriaCXiccCf7xUl9QHibAhCMBKQ2oCicvgcuHCo4ULSguISXeHzxM9a8fFD7icfy3OgXibvUNxw/132","comment_is_top":false,"comment_ctime":1619711528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619711528","product_id":100039001,"comment_content":"学到了！1.职责划分判断有哪些类 2.定义类的属性和方法 3.找出类与类的交互 4.类组装好，并提供执行入口！","like_count":0},{"had_liked":false,"id":290379,"user_name":"greatD","can_delete":false,"product_type":"c1","uid":2586312,"ip_address":"","ucode":"CB0588F9AB02F5","user_header":"","comment_is_top":false,"comment_ctime":1619519119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619519119","product_id":100039001,"comment_content":"学到了，感谢争哥。","like_count":0},{"had_liked":false,"id":290065,"user_name":"yang","can_delete":false,"product_type":"c1","uid":1940562,"ip_address":"","ucode":"67C86E09BA6E4B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9c/52/dc770378.jpg","comment_is_top":false,"comment_ctime":1619343448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619343448","product_id":100039001,"comment_content":"java写的比较少，请问老师，AuthToken的create函数里的参数Map&lt;String,String&gt;params是什么意思？我没有看懂","like_count":0},{"had_liked":false,"id":285835,"user_name":"发飙的蜗牛","can_delete":false,"product_type":"c1","uid":1800868,"ip_address":"","ucode":"B2D96A2D0B6BA4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7a/a4/79ffe77c.jpg","comment_is_top":false,"comment_ctime":1617027032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617027032","product_id":100039001,"comment_content":"在明确需求以后，也可以考虑使用TDD的方法在反推我们的代码，不过对于类的设计还是要的，哈哈哈！","like_count":0},{"had_liked":false,"id":284192,"user_name":"花轮君","can_delete":false,"product_type":"c1","uid":1044639,"ip_address":"","ucode":"A4F27CC1C38D3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f0/9f/6689d26e.jpg","comment_is_top":false,"comment_ctime":1616118046,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616118046","product_id":100039001,"comment_content":"老师，有一个疑问，组合和依赖感觉没有很大的差异","like_count":0},{"had_liked":false,"id":283538,"user_name":"Graham","can_delete":false,"product_type":"c1","uid":1994570,"ip_address":"","ucode":"C2545DE16EC3DD","user_header":"","comment_is_top":false,"comment_ctime":1615811691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615811691","product_id":100039001,"comment_content":"充血和贫血就在于，贫血就是domain的action都在service层，而充血模式就是domain的action就在它本身，因为本身domain的原因，很好的就进行来业务归类，从大局来讲，会更清晰，也便于他人阅读理解代码。<br><br>而本章将的面向对象设计，总结来讲：把所有需要实现的动作列举出来后，抽出那些有公用domain的行为，然后进行封装设计。而传统的开发，<br>会根据动作设计domain的字段去满足该实现的动作，然后编写实体类，编写具体动作的service 层。<br><br>如果按照充血模式，就是把动作封装到各自强相关的domain里面去。<br><br>挺好","like_count":0},{"had_liked":false,"id":280008,"user_name":"DreamHeng","can_delete":false,"product_type":"c1","uid":1599490,"ip_address":"","ucode":"5562BFD8375138","user_header":"https://static001.geekbang.org/account/avatar/00/18/68/02/2d394d89.jpg","comment_is_top":false,"comment_ctime":1614052309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614052309","product_id":100039001,"comment_content":"其实DDD设计的时候也是可以想到设计的，但是在开发过程中我们总会遇到问题，然后在解决这些问题的时候总是想解决了这个问题就行了，并没有从设计角度分析，这就会导致代码越写越垃圾","like_count":0},{"had_liked":false,"id":279828,"user_name":"naijiz","can_delete":false,"product_type":"c1","uid":1108816,"ip_address":"","ucode":"7EA03F41E3DA33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/50/21cb3c67.jpg","comment_is_top":false,"comment_ctime":1613977326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613977326","product_id":100039001,"comment_content":"这UML图怎么做的，好漂亮","like_count":0},{"had_liked":false,"id":279605,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1613860704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613860704","product_id":100039001,"comment_content":"谢谢老师清晰的思路，一步一步很细致的讲解怎么破一个含糊的需求。我觉得在实践中需要把握一个度，既要考虑到将来扩展的借口，但是也不能overdesign","like_count":0},{"had_liked":false,"id":276349,"user_name":"世杰","can_delete":false,"product_type":"c1","uid":2415102,"ip_address":"","ucode":"6BC305EF6D525B","user_header":"https://static001.geekbang.org/account/avatar/00/24/d9/fe/7b151abf.jpg","comment_is_top":false,"comment_ctime":1611891638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611891638","product_id":100039001,"comment_content":"根据真实项目来进行改造：<br>   1、签名算法，参数经ascii顺序排序后，尾部加上秘钥键值对，进行MD5加密，同时转为大写<br>   2、去除ApiRequest类，将参数转为map，排序后进行加密校验<br>   3、去除URL，只对参数进行加密<br>项目地址：https:&#47;&#47;gitee.com&#47;fengzhili123_admin&#47;design_parttern&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;wangzheng&#47;auth","like_count":0},{"had_liked":false,"id":276331,"user_name":"世杰","can_delete":false,"product_type":"c1","uid":2415102,"ip_address":"","ucode":"6BC305EF6D525B","user_header":"https://static001.geekbang.org/account/avatar/00/24/d9/fe/7b151abf.jpg","comment_is_top":false,"comment_ctime":1611887676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611887676","product_id":100039001,"comment_content":"ApiRequest类做成接口是不是更合适一点","like_count":0},{"had_liked":false,"id":275987,"user_name":"我不是黄蓉我不会武功","can_delete":false,"product_type":"c1","uid":2416157,"ip_address":"","ucode":"E4BE01B01AF1BB","user_header":"https://static001.geekbang.org/account/avatar/00/24/de/1d/c1bd26dc.jpg","comment_is_top":false,"comment_ctime":1611737423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611737423","product_id":100039001,"comment_content":"认真看完了这节课程，有一种醍醐灌顶的感觉，以前的在设计方面确实做的不好，面对需求直接就想到如何实现，几乎是完全省略了分析设计环节，老师的这个面向对象分析和设计的思路让我重新认识了OOA和OOD，接下来就是把老师讲的思路尝试应用到实践工作中","like_count":0},{"had_liked":false,"id":273440,"user_name":"周三岁","can_delete":false,"product_type":"c1","uid":2234342,"ip_address":"","ucode":"155BF30F071F39","user_header":"","comment_is_top":false,"comment_ctime":1610595572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610595572","product_id":100039001,"comment_content":"听君一席话 胜读十年书 ，老师讲的太好了","like_count":0},{"had_liked":false,"id":271294,"user_name":"前人种树","can_delete":false,"product_type":"c1","uid":1307269,"ip_address":"","ucode":"64D1B7F87B03E2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f2/85/7d3ce959.jpg","comment_is_top":false,"comment_ctime":1609515767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609515767","product_id":100039001,"comment_content":"ApiRequest 类的构造方法是 ApiRequest(String BaseUrl, String token, long timestamp, String appId), 还应该有个 获取 拼接完成的url（GetAuthedUrl），或 send的方法吧，毕竟这个动作是客户端操作的，要请求到服务端才会涉及到校验","like_count":0},{"had_liked":false,"id":264807,"user_name":"WolvesLeader","can_delete":false,"product_type":"c1","uid":1103839,"ip_address":"","ucode":"33610E19CA2E96","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/df/fc0a6709.jpg","comment_is_top":false,"comment_ctime":1606657643,"is_pvip":false,"replies":[{"id":"96059","content":"没怎么看懂","user_name":"作者回复","comment_id":264807,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700518,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1606657643","product_id":100039001,"comment_content":"大佬，我想问一下，怎么改成提供token的服务呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510689,"discussion_content":"没怎么看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103839,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d7/df/fc0a6709.jpg","nickname":"WolvesLeader","note":"","ucode":"33610E19CA2E96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331870,"discussion_content":"就是看了您提供的代码，感觉非常棒，但是我不太知道怎么能接入到我们的项目中，谢大佬指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606998013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261126,"user_name":"航哥很帅","can_delete":false,"product_type":"c1","uid":1145270,"ip_address":"","ucode":"23A1CB2A3723AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/b6/faaa95a2.jpg","comment_is_top":false,"comment_ctime":1605224511,"is_pvip":true,"replies":[{"id":"96155","content":"总结的到位","user_name":"作者回复","comment_id":261126,"uid":"1190123","ip_address":"","utype":1,"ctime":1606701544,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605224511","product_id":100039001,"comment_content":"面型对象设计主要分为4个步骤：<br><br><br>1.根据需求设计需要的类；<br>2.确定类中的属性和方法，确定属性一般根据需求分析中的名称，确定方法一般根据需求分析中的动词；<br>3.确定类和类之间的关系，这些关系一般包括：泛化（继承）、实现、组合、依赖；<br>4.将类封装起来并提供执行的入口，这个入口就是这段代码运行起来的入口。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509382,"discussion_content":"总结的到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258248,"user_name":"Mao","can_delete":false,"product_type":"c1","uid":1060202,"ip_address":"","ucode":"14CC85BC590A71","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/6a/323163df.jpg","comment_is_top":false,"comment_ctime":1604359534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604359534","product_id":100039001,"comment_content":"列出功能，分解动作，合并属性，筛选方法","like_count":0},{"had_liked":false,"id":245914,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599107945,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599107945","product_id":100039001,"comment_content":"1、找名词、概念、领域，之后合并为模块<br>2、找到共同操作的属性，进行合理关系划分","like_count":0},{"had_liked":false,"id":244987,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1598773752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598773752","product_id":100039001,"comment_content":"基本实现了老师的要求。<br><br>https:&#47;&#47;github.com&#47;kolinkuang&#47;geekbang-homework&#47;tree&#47;master&#47;design-pattern&#47;src&#47;l014","like_count":0},{"had_liked":false,"id":244483,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1598532875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598532875","product_id":100039001,"comment_content":"感觉对于聚合和关联这两个合在一起不用纠结。但是组合和这两个还有有比较大的区分。可以拎出来单独来看。<br>别的分析<br>1：了解需求以及需求的背景，解决了什么问题？（why）<br>2：针对要解决的问题分析产品组合，产生问题空间的模型（领域模型。这里可以使用分词发，这里产出属性和关联关系）<br>3：在针对问题空间模型进行软件对象模型设计（这里大概率是一对一。并添加对象的行为）","like_count":0},{"had_liked":false,"id":244302,"user_name":"这是谁 辣么帅","can_delete":false,"product_type":"c1","uid":1329293,"ip_address":"","ucode":"DD30830BAD20A6","user_header":"https://static001.geekbang.org/account/avatar/00/14/48/8d/7764c5c2.jpg","comment_is_top":false,"comment_ctime":1598453986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598453986","product_id":100039001,"comment_content":"我的方式是通过MD5将URL转换成字符串，因为MD5大家很容易猜想出来所以对MD5编码后的各个字符降位，比如从2的8次方将至2的4次方高位归0，然后通过每个字符的大小（不超过16），从自己的16位密码库（无规律）中取出下标对应的字符将MD5的字符替换掉，请求和鉴权双方使用同一个密码库，这样就能保证token的唯一性及token的安全性，只要源码不外泄应该就能保证安全性，不知道我讲的清不清楚，请老师点评下我的思路","like_count":0},{"had_liked":false,"id":243937,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1598333474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598333474","product_id":100039001,"comment_content":"确实如作者所说，对于日常开发中的分析和设计，在脑子里面过一遍就完事儿了，并没有按照严格的步骤来操作，然后在写代码的过程中边写边重构。<br>为什么我总是倾向于直接上手撸代码呢？我觉得是因为撸代码太容易了，相比起分析和设计，撸代码显然更有成就感。但这明显是在用战术上的勤奋掩盖战略上的懒惰。<br>相比重构时的大动干戈，在纸上写写画画的成本明显要低得多。而且分析和设计是一个越用越好用的技能，最开始很多case都想不到，渐渐地可以覆盖越来越多的case，这是一个值得花时间练习的技能！<br>","like_count":0},{"had_liked":false,"id":243882,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1598319183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598319183","product_id":100039001,"comment_content":"面向过程到面向对象是一个思考方式的改变","like_count":0},{"had_liked":false,"id":243545,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1598178027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598178027","product_id":100039001,"comment_content":"学到了很多，对于课堂作业，我暂时也没有别的设计方法，我的项目积累还很不够，等以后多学点，看有没有新的设计思路。","like_count":0},{"had_liked":false,"id":237643,"user_name":"monsterhxw","can_delete":false,"product_type":"c1","uid":1216801,"ip_address":"","ucode":"D04AD6301AE7AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/91/21/d16b884e.jpg","comment_is_top":false,"comment_ctime":1595908330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595908330","product_id":100039001,"comment_content":"课后作业中的具体实现在：https:&#47;&#47;github.com&#47;monsterhxw&#47;java-basis-practice&#47;tree&#47;master&#47;api-authentication","like_count":0},{"had_liked":false,"id":229931,"user_name":"数学汤家凤","can_delete":false,"product_type":"c1","uid":2029485,"ip_address":"","ucode":"DE84E777C384AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","comment_is_top":false,"comment_ctime":1593215814,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593215814","product_id":100039001,"comment_content":"软件设计正如马哲上写的一样<br>事物的自身发展，经过肯定、否定和新的肯定，即否定之否定的曲折过程，仿佛是向出发点的复归，但实质上是在高级阶段上重复某些低级阶段的特点、特性，是通过曲折的形式而实现的前进运动","like_count":0},{"had_liked":false,"id":229135,"user_name":"Rancood","can_delete":false,"product_type":"c1","uid":1204333,"ip_address":"","ucode":"052BDF2221F480","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/6d/e2576fda.jpg","comment_is_top":false,"comment_ctime":1592904406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592904406","product_id":100039001,"comment_content":"虽然用了实际案例讲解，但最终还是没有设计出一个易扩展的组件来，像文中说的dubbo、rpc等方式接口请求，就没法扩展了，就算扩展，相当于重写一个的工作量了","like_count":0},{"had_liked":false,"id":228837,"user_name":"兔嘟嘟","can_delete":false,"product_type":"c1","uid":2028811,"ip_address":"","ucode":"5A9042B4C7670C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","comment_is_top":false,"comment_ctime":1592820745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592820745","product_id":100039001,"comment_content":"哈哈，刚刚的那条评论，问了下别人，发现是对java不了解导致的，没事了没事了","like_count":0},{"had_liked":false,"id":228835,"user_name":"兔嘟嘟","can_delete":false,"product_type":"c1","uid":2028811,"ip_address":"","ucode":"5A9042B4C7670C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","comment_is_top":false,"comment_ctime":1592820157,"is_pvip":false,"replies":[{"id":"86380","content":"既支持外界生成好token，传递进来，创建AuthToken，比如从客户端传来的token，我们在后端包裹成AuthToken继续处理。也支持直接根据基础数据升成AuthToken,也就是create函数的作用","user_name":"作者回复","comment_id":228835,"uid":"1190123","ip_address":"","utype":1,"ctime":1594602758,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1592820157","product_id":100039001,"comment_content":"看了几遍还是没懂，AuthToken类为什么构造函数要传入一个token，token不应该是类内生成的吗？以及如果已经通过构造函数获得了一个token，那么create函数又有什么作用？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499208,"discussion_content":"既支持外界生成好token，传递进来，创建AuthToken，比如从客户端传来的token，我们在后端包裹成AuthToken继续处理。也支持直接根据基础数据升成AuthToken,也就是create函数的作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594602758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222790,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590912879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590912879","product_id":100039001,"comment_content":"UML关系：泛化、实现、依赖、关联、组合、聚合。<br>依赖：a类的函数入参是b类。<br>关联、组合、聚合：a类包含b类型的属性。关联是ab对象同级别，ab可以单独存在(在a类外部实例化b)；组合ab对象整体部分关系，b可以单独存在(a类外部实例化b对象)；聚合是ab对象整体部分关系，b对象不能单独存在(a类中实例化b对象)。<br>","like_count":0},{"had_liked":false,"id":220744,"user_name":"朝小树","can_delete":false,"product_type":"c1","uid":1323875,"ip_address":"","ucode":"18DC282DEF16C8","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/63/2d48822a.jpg","comment_is_top":false,"comment_ctime":1590317396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590317396","product_id":100039001,"comment_content":"和大部分同学，第一反应是用面向过程去实现了，感谢讲了面向对象的思路。<br>","like_count":0},{"had_liked":false,"id":218901,"user_name":"董大大","can_delete":false,"product_type":"c1","uid":1334181,"ip_address":"","ucode":"5C7299DCB1DD79","user_header":"https://static001.geekbang.org/account/avatar/00/14/5b/a5/7c079c73.jpg","comment_is_top":false,"comment_ctime":1589895743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589895743","product_id":100039001,"comment_content":"项目中刚好用到这个功能。赞","like_count":0},{"had_liked":false,"id":217221,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589442744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589442744","product_id":100039001,"comment_content":"面向对象分析 面向对象设计  面向对象编程  都是可以实际操作的干货。   面向对象设计和面向对象分析的产出是类。从几个方面去考虑,1.划分职责找出类：罗列出所有功能点，找出功能相似的组合成类。2.定义类的属性和方法：需求描述中的名词当做属性，动词当做方法。然后进一步观察。3.确定类之间的关系：UML 中类的六种关系  实现 泛化 组合 聚合 依赖 关联 4.组织类提供执行入口。<br>学习了方法也要学习思想。通过这些方法达到面向对象的程序设计<br>以后的工作中应该尽量纠正自己的思想，不要在思想上偷懒。","like_count":0},{"had_liked":false,"id":212829,"user_name":"Tobias","can_delete":false,"product_type":"c1","uid":1803858,"ip_address":"","ucode":"F3225639EDA193","user_header":"https://static001.geekbang.org/account/avatar/00/1b/86/52/b92dc111.jpg","comment_is_top":false,"comment_ctime":1588217559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588217559","product_id":100039001,"comment_content":"争争老师 ApiRequest 的设计决定了使用怎样的鉴权解决方案。如果想进一步提高可扩展性，比如支持老系统或者第三方的鉴权方案，这个ApiRequest类还需要进一步抽象，不能包扩具体的属性，可以考虑变为接口IApiReuqest， 将旧的ApiRequest类作为默认实现，大家有怎样的想法呢？","like_count":0},{"had_liked":false,"id":211712,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1587998402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587998402","product_id":100039001,"comment_content":"1泛化继承。2实现接口。3组合 组合在一起 但是生命周期不影响，a和b都有自己独立的生命周期。4 聚合 生成a会在其内部生成b。5关联 4或者5的关系。6依赖 只有在在a里面 不管是属性 成员不还是返回","like_count":0},{"had_liked":false,"id":201650,"user_name":"小马","can_delete":false,"product_type":"c1","uid":1490686,"ip_address":"","ucode":"92B7ECD23BDCB5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoXW5rycAcrNTwgOvib8poPXO0zvIekIPzBZJfsnciaLPIw9Q1t3rsXeH6DR24QndpYQibvibhR1tKHPw/132","comment_is_top":false,"comment_ctime":1585816808,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585816808","product_id":100039001,"comment_content":"老师您好，您上面讲的这种方式适合做身份认证，但是无法保证在请求过程中参数被修改啊，如果请求被拦截了，token不变，但是其他参数被修改了，还是能够通过校验的。","like_count":0,"discussions":[{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258476,"discussion_content":"不行的，服务器会对你的参数按照同样的规则进行生成token 然后比较是否一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588689428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200156,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585551529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585551529","product_id":100039001,"comment_content":"分析，设计，编码，分析和设计的思考越深越细，对于后期编码的工作就越简化。","like_count":0},{"had_liked":false,"id":197476,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585380985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585380985","product_id":100039001,"comment_content":"难度提升了，可能后端看到懂一点，前端还是有点迷惑...<br><br>反思了一下要是前端我写一个需求，可能不会安装面向对象设计和编程，都是直接想到啥就写啥","like_count":0},{"had_liked":false,"id":193299,"user_name":"PCMD","can_delete":false,"product_type":"c1","uid":1842844,"ip_address":"","ucode":"76A1106F42AEAC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/1e/9c/39f5ff2a.jpg","comment_is_top":false,"comment_ctime":1584888813,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584888813","product_id":100039001,"comment_content":"需求拆分的逻辑以及层次，包括对逻辑代码抽象的处理，都是目前需要吸收的一些亮点","like_count":0},{"had_liked":false,"id":189968,"user_name":"洛子墟","can_delete":false,"product_type":"c1","uid":1036273,"ip_address":"","ucode":"CFC500D00F0B9B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f1/bf63fef6.jpg","comment_is_top":false,"comment_ctime":1584586568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584586568","product_id":100039001,"comment_content":"很有用的拆分需求、组织类和方法的思考过程，由上至下，逐步细化，思路清晰。<br>我可能是个行动派，一般都是由下至上的编写代码然后再思考。<br>先把流程转化为代码，然后全部实现在一个类中，然后再更具功能分类汇总，逐步梳理思路。好处是快，坏处是代码相当于会写2遍。","like_count":0},{"had_liked":false,"id":184157,"user_name":"兰芳林","can_delete":false,"product_type":"c1","uid":1754409,"ip_address":"","ucode":"D3C652D22B5D50","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c5/29/4848464f.jpg","comment_is_top":false,"comment_ctime":1583239862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583239862","product_id":100039001,"comment_content":"太棒了","like_count":0},{"had_liked":false,"id":183302,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1582990178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582990178","product_id":100039001,"comment_content":"大概因为平时就是这么做OOA&amp;D的，所以看得波澜不惊。<br>另外，习惯看UML了，老师这图其实就是class diagram了","like_count":0},{"had_liked":false,"id":183218,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582975209,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582975209","product_id":100039001,"comment_content":"【设计模式笔记15】20200229<br>今天偏实战了，整体看下来学到的一个点就是动手写代码前先设计，文章提到的方法是按功能点聚类，然后对照需求设计类之间的交互，最后填充属性和方法。设计的目的是帮助自己思考，真正要解决的问题是什么，具体怎么做，是否有优化的空间。下面说下我的方法，最最重要的一定是理解清楚需求，然后将需求的功能点和流程梳理出来，产出可以是任意形式，最好有流程图和例子。接着是划分模块，按照微服务得视角开发，入参、出参要考虑好，微服务的本质就是自治，只有这些做好后才开始动手写代码。","like_count":0},{"had_liked":false,"id":180299,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582252921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582252921","product_id":100039001,"comment_content":"如果是我的话,我可能会将第四步放在定义类和定义类之间的关系这两步之前去做<br>但是这样我觉着我仍然陷入了面向过程编程的误区了,因为这样的话,仍然是根据需求去实现过程,但是确实我经常去使用的一种编程流程.","like_count":0},{"had_liked":false,"id":177092,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1371891,"ip_address":"","ucode":"8BEFC518F06AC7","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","comment_is_top":false,"comment_ctime":1581265981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581265981","product_id":100039001,"comment_content":"【面向对象开发流程】<br><br>1.面向对象分析<br>首先根据需求，从最基本的开始想，实现功能最简单可以怎样做，就是一个MVP，然后根据最基本的想法，逐层次往下思考，以提问题，回答问题的形式，丰富需求内容，然后把需求内容分步骤的写出来。<br><br>2.面向对象设计<br>1）划分需求职能<br>根据需求分析内容，如果功能比较大，可以先对需求做模块划分，然后在对单独模块进行更次的职能划分，将需求中涉及的功能点一个一个列出。<br><br>2）设计类、属性、方法<br>根据列出的功能（非常细小，职能单一），对功能进行整合，把相近的整合成一个类。<br>然后挑选出功能中的动词，可以作为方法。<br>方法中的名词，作为属性。同时需要把方法中需要用到的属性（隐含的），也定义出来。<br><br>3）设计类之间的交互<br>概括的总结类与类之间的交互关系为：实现（接口）、泛化（继承）、组合（类属性）、依赖（函数参数）。<br><br>4）组装类，提供对外的入口<br>对类封装内部调用细节，抽象统一的历史对外类（接口方法）。<br><br>3.面向对象编程<br>根据前面类的定义、方法、属性的定义，实现具体的方法逻辑。<br><br>4.无框架的引入编程<br>无框架引入下的面向对象编程，根据定义的类、属性、方法，按设计实现。<br><br>5.实际开发贫血模型下的改进，充血模型开发<br>基于传统的集成Spring框架下的MVC贫血模型开发，增加一个domain领域模型，在service层调用封装在领域模型中的属性、方法（逻辑），实现充血模型的DDD开发模式。领域模型不引入任何第三方框架，以便达到解耦，提高复用性。","like_count":0},{"had_liked":false,"id":176233,"user_name":"阿    鲍","can_delete":false,"product_type":"c1","uid":1189884,"ip_address":"","ucode":"7418826B7986E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/fc/2169bf4a.jpg","comment_is_top":false,"comment_ctime":1580996384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580996384","product_id":100039001,"comment_content":"交作业了， https:&#47;&#47;github.com&#47;zjbao123&#47;PatternDesign&#47;tree&#47;master&#47;ApiAuthenticator","like_count":0},{"had_liked":false,"id":175316,"user_name":"三尺寒冰","can_delete":false,"product_type":"c1","uid":1027586,"ip_address":"","ucode":"B10C7C9F955DF5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/02/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1580653099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580653099","product_id":100039001,"comment_content":"如何进行面向对象设计？<br>1. 划分职责进而识别出有哪些类；<br>2. 定义类及其属性和方法；<br>3. 定义类与类之间的交互关系；<br>4. 将类组装起来并提供执行入口；","like_count":0},{"had_liked":false,"id":175122,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1580564438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580564438","product_id":100039001,"comment_content":"这二章干货满满，一般鉴权这样的技术型需求，我们一般不会像业务需求一样进行业务分析，然后映射到对象模型上（业务模型）。这二章其实很好地给我们介绍了面向对象分析、设计的流程、方法。","like_count":0},{"had_liked":false,"id":174116,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1580005995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580005995","product_id":100039001,"comment_content":"干货满满。平时工作中这样的需求很容易就写成面向过程的代码，确实不易懂，不易维护。经过老师的分析、拆解、设计，呈现出这样面向对象的代码，不但代码易懂，而且便于拓展维护。也能够很直观的讲解了面向对象设计，太赞了。","like_count":0},{"had_liked":false,"id":168899,"user_name":"光裕","can_delete":false,"product_type":"c1","uid":1261313,"ip_address":"","ucode":"1CAD27E16B6D96","user_header":"https://static001.geekbang.org/account/avatar/00/13/3f/01/e1f2da41.jpg","comment_is_top":false,"comment_ctime":1578212934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578212934","product_id":100039001,"comment_content":"需求分析：一般都是采用“用例”法，主要分析交互流程、业务规则、特殊需求等内容。<br>设计：根据需求描述，通过画类图、序列图等识别出类及其属性、方法，及类间的关系。<br>老师给出的方法也挺好，后续再实践中试试。","like_count":0},{"had_liked":false,"id":167883,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1577957322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577957322","product_id":100039001,"comment_content":"设计前<br>1. 划分职责进而识别出有哪些类：比如提现有wallet、钱包流水、提现记录。<br>2.看这些类有哪些功能，比如钱包的余额、可提现金额变更。如果有相同的功能，就考虑新建一个公共类来操作。<br>3.定义这些类之间的交互动作(service层就是来处理这些东西的)<br>4.开搞","like_count":0},{"had_liked":false,"id":167610,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1577876340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577876340","product_id":100039001,"comment_content":"先设计数据结构，然后结构映射成类（对象）。对象之间的关系也是通过表关系来对应编写。这个是面向过程的思维方式吗？OOA、OOD的过程跟着思考没问题，自己独立去想有点不知道能不能做到。已经习惯先从数据结构入手了。","like_count":0},{"had_liked":false,"id":166909,"user_name":"睁眼看世界","can_delete":false,"product_type":"c1","uid":1206388,"ip_address":"","ucode":"F94CF34BC5B2AC","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/74/461b202d.jpg","comment_is_top":false,"comment_ctime":1577628831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577628831","product_id":100039001,"comment_content":"打卡，Get到了，鉴权相关的开发自己之前也设计过，现在想想就是贫血模式，面向过程编程，跟着老师好好学习面向对象编程。","like_count":0},{"had_liked":false,"id":164660,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1577067796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577067796","product_id":100039001,"comment_content":"我的总结：<br>2. 从一个很简单的对请求进行有效性验证需求开始，一步步分析，从而得到需要定义哪些类，各个类中需要定义什么属性和方法<br>3. 文中提到的参考需求中提到了哪些名词哪些动词来确定需要定义哪些类和各个类中的方法的方式值得参考<br>4. 很巧的是，我目前做的验签方式和老师文中提到的验签方式是一样的","like_count":0},{"had_liked":false,"id":164545,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1577024995,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1577024995","product_id":100039001,"comment_content":"其实写出来之后反而简单了，难的是一开始的业务抽象化，这个需要比较扎实的基础，尤其是业务的理解，然后归纳的基础，但是恰恰这块是作为开发最容易忽视的部分，所以老师讲的这些，其实真正到实际的开发场景中，都会由于各种各样的原因（工期，技术能力，业务理解等等），会打比较大的折扣。","like_count":0},{"had_liked":false,"id":164357,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1576943873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576943873","product_id":100039001,"comment_content":"但我还是不太明白为何DefaultApiAuthencatorImpl的构造函数是重写ApiAuthencator接口？不应该是写成public DefaultApiAuthencatorImpl(CredentialStorage credentialStorage)吗?","like_count":0},{"had_liked":false,"id":164354,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1576943520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576943520","product_id":100039001,"comment_content":"也就是说，这段代码的运行触发逻辑是，调用DefaultApiAuthencatorImpl.auth(url),然后运行三个类对吧","like_count":0},{"had_liked":false,"id":164351,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1576943027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576943027","product_id":100039001,"comment_content":"代码中所用的关系我想搞清楚一下，这里用到的是实现（ApiAuthencator(A类)与DefaultApiAuthencatorImpl（B类）），还有组合（DefaultApiAuthencatorImpl（A类）与CredentialStorage（B类）），对吗？","like_count":0},{"had_liked":false,"id":164334,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1576939117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576939117","product_id":100039001,"comment_content":"代码中两个构造函数ApiAuthencator直接算是重写了接口ApiAuthencator吗？","like_count":0},{"had_liked":false,"id":161363,"user_name":"J.F.Cheung","can_delete":false,"product_type":"c1","uid":1306986,"ip_address":"","ucode":"EB696F021174CD","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/6a/05fa25d2.jpg","comment_is_top":false,"comment_ctime":1576198414,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576198414","product_id":100039001,"comment_content":"Sha和md5并不是加密算法，这里只是用来做摘要，且不可逆，用来验证token，加密算法是可可以解密的","like_count":0,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91304,"discussion_content":"我一开始和你想的一样, 后来我觉得把散列说成加密也没错, 毕竟这个还是概念问题, 怎么沟通方便怎么来吧.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576825510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161253,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1576157580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576157580","product_id":100039001,"comment_content":"如果只是一个鉴权功能的话，在不考虑项目模块的复用性的前提下，会倾向于先写测试样例，然后根据预设的测试结果去编写需要测试的代码方法，然后一步步完善起来。","like_count":0},{"had_liked":false,"id":161175,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1576137431,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576137431","product_id":100039001,"comment_content":"感觉这次课程最大的学习之处是看到了一种从需求到编码设计的步骤，虽然还很简单，但总归是一种面向对象设计的实践方案。","like_count":0},{"had_liked":false,"id":160862,"user_name":"Varus","can_delete":false,"product_type":"c1","uid":1715988,"ip_address":"","ucode":"B9CB88C248BD93","user_header":"https://static001.geekbang.org/account/avatar/00/1a/2f/14/840d0925.jpg","comment_is_top":false,"comment_ctime":1576048842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576048842","product_id":100039001,"comment_content":"在分析需求的时候，这种分析模式是否也算是一种面向过程的分析模式","like_count":0},{"had_liked":false,"id":160474,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1575958493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575958493","product_id":100039001,"comment_content":"首先把api请求封装成apiRequest，这个和争哥的一样，不一样的地方在鉴权验证，争哥是封装成AuthToken类，但是我是把鉴权抽象成一个Handler接口，具体实现包括是否过期的handler和是否match的handler，把这些handler注册到ApiAuthencator抽象类，auth(apiRequest)就是for循环调用这些handler","like_count":0,"discussions":[{"author":{"id":1194858,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","nickname":"RD","note":"","ucode":"E3947B6E1681AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371226,"discussion_content":"我第一次学策略模式，是看 spring security 的源码。策略接口还有一个方法叫 isSupport(Class)。然后循环所有策略方法，判断 isSupport，有一个满足后跳出循环就行了。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1619688284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2015438,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c0/ce/eb1b4ae1.jpg","nickname":"可圈可丶","note":"","ucode":"EB527E176EDE91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1194858,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","nickname":"RD","note":"","ucode":"E3947B6E1681AD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409725,"discussion_content":"这种isSuport不是用到责任链上吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635496662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":371226,"ip_address":""},"score":409725,"extra":""},{"author":{"id":2728400,"avatar":"https://static001.geekbang.org/account/avatar/00/29/a1/d0/785543e1.jpg","nickname":"xsl","note":"","ucode":"57B979684AFD53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2015438,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c0/ce/eb1b4ae1.jpg","nickname":"可圈可丶","note":"","ucode":"EB527E176EDE91","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555010,"discussion_content":"spring项目我一般策略模式有两种实现方式,第一种就是提供个isSupport 接口,每个策略都实现,在工厂类里面循环判断,第二种就是注册bean的时候给一个名字, 再工厂里面用map.get(名字) 找对应的策略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646721802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":409725,"ip_address":""},"score":555010,"extra":""}]},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209794,"discussion_content":"不需要查表了 工厂方法的形参直接传入class对象, 根据class对象反射生成实例就可以了.","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1584673357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214963,"discussion_content":"那感觉不是和静态的差不多了，个人看法，欢迎交流","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585267956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":209794,"ip_address":""},"score":214963,"extra":""},{"author":{"id":1417145,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9f/b9/b7423728.jpg","nickname":"鲨鱼辣椒","note":"","ucode":"6060F73DC67D19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258936,"discussion_content":"还是需要查表的，需要保存业务type和class的映射关系。或者业务类型与class的名称有一定的相关性，通过Class.forName()的方式获取对应的class对象。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588741899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":209794,"ip_address":""},"score":258936,"extra":""},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1417145,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9f/b9/b7423728.jpg","nickname":"鲨鱼辣椒","note":"","ucode":"6060F73DC67D19","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259026,"discussion_content":"形参传Class<?>就不需要查表了。直接反射","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588751994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":258936,"ip_address":""},"score":259026,"extra":""}]},{"author":{"id":2076251,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/5b/4bd42286.jpg","nickname":"宋计洋","note":"","ucode":"9A34E8F71C6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560911,"discussion_content":"看到上面评论有两种更优雅的方法：1. value存储Supplier函数 2. 简单工厂到工厂方法，反射有点简单粗暴","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1649490524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018210,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/62/0777bf4f.jpg","nickname":"xiaoxi666","note":"","ucode":"BA4002A837BD99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381524,"discussion_content":"这种模式比较常用：map里面的key保存type，表示业务类型；value保存Class；为了表示一组策略的Class，可以使用泛型，比如：<? extends Strategy>","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625110096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109562,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/3a/c0ad9c43.jpg","nickname":"杰","note":"","ucode":"036B010A45070A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281116,"discussion_content":"放到Map，然后深拷贝","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591674544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2142423,"avatar":"","nickname":"Geek_7e0e83","note":"","ucode":"554DEE2AAAE33C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1109562,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/3a/c0ad9c43.jpg","nickname":"杰","note":"","ucode":"036B010A45070A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":574680,"discussion_content":"结合了工厂模式 + 原型模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654241234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281116,"ip_address":""},"score":574680,"extra":""}]},{"author":{"id":1731178,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6a/6a/951f6a7b.jpg","nickname":"李婷婷","note":"","ucode":"813CF14454C9C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387010,"discussion_content":"可以不使用查表法，使用反射，动态获取所有实现Strategy接口的类。算法譬如说 OrderType是他的一个属性，这个属性为readonly，有一个唯一值，根据传入的orderType获取具体的实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627952342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2142423,"avatar":"","nickname":"Geek_7e0e83","note":"","ucode":"554DEE2AAAE33C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574681,"discussion_content":"楼主说的很对 赞同的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654241307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","nickname":"布拉姆","note":"","ucode":"479FF27D73BCAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393340,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631366215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384886,"discussion_content":"那就是 用一次 创建一次 能支持自动回收吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626782162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368962,"discussion_content":"膜拜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618890177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366566,"discussion_content":"优秀啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618118034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348052,"discussion_content":"优秀啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612414644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309161,"discussion_content":"帅 按照你的方式实现了下 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601201768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077406,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","nickname":"jaryoung","note":"","ucode":"6E72D107DB7E51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209756,"discussion_content":"你其他语言是否也可以吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584669664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1077406,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","nickname":"jaryoung","note":"","ucode":"6E72D107DB7E51","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224933,"discussion_content":"直接在map里面放一个闭包就行了, 每次调用就创建一个新对象....好简单的","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1586337853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":209756,"ip_address":""},"score":224933,"extra":""}]}]},{"had_liked":false,"id":160462,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1575955108,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575955108","product_id":100039001,"comment_content":"自己也实现过这样的功能，基本上就是用的贫血模型了。<br>1、做好需求分析，然后根据功能点把类似功能的分为一个类，得出了几个类。可以产生相同的简单类图、用例图以及简单的模块之间的时序图。<br>2、把功能拆分出一个一个的方法和属性。<br>3、确认好类与类之间的关系，有泛化，实现，关联，聚合，组合，依赖六种，最好可以画出类图和时序图，以及复杂方法的活动图。<br>4、把类之间关系调用封装成一个api接口提供出去。","like_count":0},{"had_liked":false,"id":160394,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1575944507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575944507","product_id":100039001,"comment_content":"是不是所有的类都要以名词结尾，准确地说明这个类是什么。","like_count":0},{"had_liked":false,"id":160246,"user_name":"siloen","can_delete":false,"product_type":"c1","uid":1058734,"ip_address":"","ucode":"526A861A4552FF","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/ae/d17c0de8.jpg","comment_is_top":false,"comment_ctime":1575898533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575898533","product_id":100039001,"comment_content":"具体的对象类中每个类中的静态方法这种设计是为什么。","like_count":0},{"had_liked":false,"id":160166,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1575883966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575883966","product_id":100039001,"comment_content":"https:&#47;&#47;github.com&#47;jesse920524&#47;PrettyDesignPattern&#47;tree&#47;master&#47;src&#47;lesson14<br>可能和老师的设计不太一样,权当抛砖引玉.","like_count":0},{"had_liked":false,"id":160074,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1575864267,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575864267","product_id":100039001,"comment_content":"UML明白了一些","like_count":0},{"had_liked":false,"id":159435,"user_name":"悠南","can_delete":false,"product_type":"c1","uid":1193711,"ip_address":"","ucode":"333665DB7CFDD6","user_header":"https://static001.geekbang.org/account/avatar/00/12/36/ef/83c2a743.jpg","comment_is_top":false,"comment_ctime":1575623035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575623035","product_id":100039001,"comment_content":"之前的思路是设计对象考虑存储，数据库字段；领域建模是考虑类职责，提供那些方法支持了那些功能，类之间如何组合。     那我的问题就是 当我们设计出类之后，如何如存储层打通呢？？？支持类数据转DAO还是怎么办呢？？？  而且开发过程中controller层经常调用service  ,现在我写成类去支持这些功能，controller 该怎么去调用呢？","like_count":0},{"had_liked":false,"id":159266,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1575593367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575593367","product_id":100039001,"comment_content":"老师给了我新的实现思路，看来我平时都基本是过程开发了，功能拆解是差不多的，但是类的实现上我可能就上2个工具类1个数据库交互类，然后写个统一鉴权入口就完事了。学到了","like_count":0},{"had_liked":false,"id":159199,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1575557429,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1575557429","product_id":100039001,"comment_content":"转发：关联和聚合是视问题域而定的，例如在关心汽车的领域里，轮胎是一定要组合在汽车类中的，因为它离开了汽车就没有意义了。但是在卖轮胎的店铺业务里，就算轮胎离开了汽车，它也是有意义的，这就可以用聚合了。","like_count":0},{"had_liked":false,"id":159193,"user_name":"啊啊啊哦哦","can_delete":false,"product_type":"c1","uid":1309877,"ip_address":"","ucode":"68C7153ECAAC57","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/RNO4yZyBvic914hewmNNE8iblYDcfv5yGHZ9OnKuCuZXNmGR0F5qV3icKLT2xpMt66GyEpicZVvrmz8A6TIqt92MQg/132","comment_is_top":false,"comment_ctime":1575556598,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575556598","product_id":100039001,"comment_content":"有点晕。类图和代码中的类的方法名有的不一致。 PHP的我看的难受怀疑是自己不懂Java语言导致的","like_count":0,"discussions":[{"author":{"id":1598564,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","nickname":"劳码识途","note":"","ucode":"7AEF4D9407F097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310240,"discussion_content":"实际上分支逻辑是不可能被移除的，我们只是用其他的逻辑达成了和分支一样的目的，比如利用查表法","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1601702828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384888,"discussion_content":"这不是想把创造过程 封装起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626782500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246330,"discussion_content":"放在外面不更简单么，非要用工厂类？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587737146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240327,"discussion_content":"赞同，逻辑感觉简单清晰的ifelse并没有必要完全移除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587352580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159182,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1575553980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575553980","product_id":100039001,"comment_content":"打卡<br><br>一、面向对象分析的产物是详细需求分解(每一步要做什么的描述);<br>二、面向对象的设计的产物是类以及类和类之间的关系:<br>1、根据职业划分出有哪些类(列出每个功能点，功能点职责相近，操作相同属性的，可以归为同一个类)<br>2、识别出动词作为候选方法，名词作为候选属性(也可以作为参数，另外，会有其他隐含的属性和方法)<br>3、定义类和类之间的关系(关系简化为:泛化，实现，依赖和组合，足以指导编程)<br>4、进行类的组装，提供统一入口(API接口)<br><br>对于复杂的需求，可以先按此思路划分功能模块，每个功能模块再分析。<br><br>辩证思考:当功能特别简单，也不需要经常改动时，也可以把此功能作为一个类设计。另外，在做设计时也不一定按部就班的事无巨细的设计，如果比较简单，脑子里有个草图，可以先实现代码，不断完善，当有了第一个雏形，后面的优化思路会更开阔，更有方向。","like_count":0},{"had_liked":false,"id":159169,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1575551678,"is_pvip":false,"replies":[{"id":"90342","content":"你可以看下其他同学的答案","user_name":"编辑回复","comment_id":159169,"uid":"1000473","ip_address":"","utype":2,"ctime":1599016701,"user_name_real":"郭蕾"}],"discussion_count":1,"race_medal":0,"score":"1575551678","product_id":100039001,"comment_content":"老师整理完整代码学习一下","like_count":0,"discussions":[{"author":{"id":1134574,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","nickname":"一魄","note":"","ucode":"71541125D4AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545055,"discussion_content":"总结偏了，Map只是形式，本质是查表法，老师说了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641815045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134574,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","nickname":"一魄","note":"","ucode":"71541125D4AA5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545133,"discussion_content":"感谢指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641861654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545055,"ip_address":""},"score":545133,"extra":""}]}]},{"had_liked":false,"id":159053,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1575526905,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575526905","product_id":100039001,"comment_content":"“组合关系替代 UML 中组合、聚合、关联三个概念”，为什么我感觉 UML 中&quot;依赖&quot; 也是这三个概念的集合，还是有点分不清。","like_count":0,"discussions":[{"author":{"id":2875547,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/e0/9b/21f6f607.jpg","nickname":"L","note":"","ucode":"46E1848E786751","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542814,"discussion_content":"学到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640853008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363822,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/uktgj5R0p78c67oLib8EuRMRCgP8yjxnZ1ibVOuibhRZvjJpKSJNaTl0UlEfGyiaaiaGyPmqpGYpibTt0QopX1qtWfQQ/132","nickname":"杨大小最嗨皮","note":"","ucode":"7DFACF1414AE16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374404,"discussion_content":"学到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621165916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159015,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1575515416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575515416","product_id":100039001,"comment_content":"打卡，晚上再来看一遍。","like_count":0},{"had_liked":false,"id":158954,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1575506556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575506556","product_id":100039001,"comment_content":"刚做了一个jwt的鉴权模块，token的生成和验证否，放在utils里了……","like_count":0},{"had_liked":false,"id":158933,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1575503568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575503568","product_id":100039001,"comment_content":"一步一步分析，每一步中有哪些容易出现的问题，如何避免解决，学到了很多！","like_count":0},{"had_liked":false,"id":158918,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1575492776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575492776","product_id":100039001,"comment_content":"功能点和名词相比更抽象，因而适用性更广，既可以划分类的职责，也可以划分模块的职责。总体而言，就是要细化软件提供的功能，尽量做到不重复，不遗漏，粒度上讲划分模块的时候大一些，划分类的时候尽量细。<br>对功能点分类是识别类的起点，但是具体细节往往是写代码和重构的时候自然而然产生，不必苛求设计的细节。设计的最大用处是提供系统的宏观信息，有点像盖房子的架子，房子的细节在盖的过程中完成。房子盖完了，架子用处也不大了。","like_count":0},{"had_liked":false,"id":158893,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1575471547,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1575471547","product_id":100039001,"comment_content":"Day030 14<br>除了文中的设计思路，还可以看下张逸老师使用 TDD 的设计思路。<br>http:&#47;&#47;zhangyi.xyz&#47;handout-tdd-code-kata&#47;<br>","like_count":0},{"had_liked":false,"id":158889,"user_name":"YourSweetHeart","can_delete":false,"product_type":"c1","uid":1242122,"ip_address":"","ucode":"38843F447B03F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","comment_is_top":false,"comment_ctime":1575470863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575470863","product_id":100039001,"comment_content":"结尾的4点干练的让人震惊，<br>这是我追的最快的专栏了","like_count":0},{"had_liked":false,"id":158877,"user_name":"YourSweetHeart","can_delete":false,"product_type":"c1","uid":1242122,"ip_address":"","ucode":"38843F447B03F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","comment_is_top":false,"comment_ctime":1575469100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575469100","product_id":100039001,"comment_content":"我发现我学了这么久根本不会面向对象，<br>今天终于分清了组合和聚合","like_count":0},{"had_liked":false,"id":158861,"user_name":"光光","can_delete":false,"product_type":"c1","uid":1242876,"ip_address":"","ucode":"A0F1D0134C935F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/fc/171c4976.jpg","comment_is_top":false,"comment_ctime":1575466209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575466209","product_id":100039001,"comment_content":"老师在文中是按照一个业务流程进行梳理、分析和设计的，这个顺序的思路是很容易的让人理解的也符合大家的思考方式。可以不可以从微服务本身开始入手，要提供那些接口给外部调用，微服务本身需要完成那些功能。","like_count":0,"discussions":[{"author":{"id":1315968,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZIqY4cs6YKNx0OqeMrbjLIicqiafLNtLYJTN2zTtVPlwXZ7qlJ7xrGQictk1xCq5pEsIyqnkiaCib4zQ/132","nickname":"全炸攻城狮","note":"","ucode":"DB437F9190575C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233760,"discussion_content":"我的想法和这个类似，将对象的创建放在具体的strategy实现类里，实现类自己判断条件是否满足，如果符合的话则返回 自己","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586943206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158828,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1575460749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575460749","product_id":100039001,"comment_content":"我的话，应该是面向过程编程风格了，我们team里写代码 都是一个功能 你写一半 我写一半 你改我写的代码，我改你写的代码 根本没法面向对象，只能自己写项目实践下😂","like_count":0},{"had_liked":false,"id":158815,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1575458294,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575458294","product_id":100039001,"comment_content":"ApiAuthencator这个顶层接口类目前还有点没有get设计原因的点。为啥要做一个通用的接口出来了？","like_count":0,"discussions":[{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309128,"discussion_content":"你这种场景，桥接模式+策略模式 可以实现。\n上层业务是 三类数据\n下层业务：是提供给不同角色的人员查看\n角色 1」不仅可以对应 「分类 A」数据，甚至可以对应「分类 B」数据 「分类 C」数据\n全看你喜好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601193469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158805,"user_name":"付昱霖","can_delete":false,"product_type":"c1","uid":1488464,"ip_address":"","ucode":"9CB3A8A8504885","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/50/5d9ef58d.jpg","comment_is_top":false,"comment_ctime":1575455597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575455597","product_id":100039001,"comment_content":"想问下 聚合、组合的放的图是不是反了<br>不依赖的话应该是堆空间？","like_count":0},{"had_liked":false,"id":158795,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1575452509,"is_pvip":false,"replies":[{"id":"61146","content":"先了解整体结构，再了解细节，思路是对的。","user_name":"作者回复","comment_id":158795,"uid":"1190123","ip_address":"","utype":1,"ctime":1575897921,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1575452509","product_id":100039001,"comment_content":"本讲中的面向对象分析和面向对象设计在阅读源码的时候可以使用么？就是先感动源码的整体设计，让后自顶向下的剖析源码","like_count":0,"discussions":[{"author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246332,"discussion_content":"同学你超纲了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587737295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158782,"user_name":"多多洛","can_delete":false,"product_type":"c1","uid":1233870,"ip_address":"","ucode":"5801171C2D2F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/ce/8ed72840.jpg","comment_is_top":false,"comment_ctime":1575450244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575450244","product_id":100039001,"comment_content":"第一次对聚合，组合，关联，依赖理解的这么清楚","like_count":0},{"had_liked":false,"id":158761,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1575447523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575447523","product_id":100039001,"comment_content":"打卡<br>1、需求功能点细化，确定类<br>2、找动词、名词确定属性和方法（可结合业务调整）<br>3、确定类关系<br>4、建立访问入口<br>","like_count":0},{"had_liked":false,"id":158733,"user_name":"evolution","can_delete":false,"product_type":"c1","uid":1088402,"ip_address":"","ucode":"105C59822BF75B","user_header":"https://static001.geekbang.org/account/avatar/00/10/9b/92/c0863297.jpg","comment_is_top":false,"comment_ctime":1575443631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575443631","product_id":100039001,"comment_content":"和争哥的分水岭在于：将功能点分门别类","like_count":0},{"had_liked":false,"id":158727,"user_name":"rookie","can_delete":false,"product_type":"c1","uid":1573424,"ip_address":"","ucode":"9E28FA97C01F24","user_header":"","comment_is_top":false,"comment_ctime":1575442800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575442800","product_id":100039001,"comment_content":"这一节干货很多呀，不清楚，就反复的看，细品。","like_count":0},{"had_liked":false,"id":158707,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1575438505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575438505","product_id":100039001,"comment_content":"打卡。<br>把UML 中组合、聚合、关联三个概念重新命名关联关系为组合关系确实简单了许多。","like_count":0},{"had_liked":false,"id":158701,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1575436027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575436027","product_id":100039001,"comment_content":"这个专栏可以改为如何优雅编程。而非局限在设计模式了。","like_count":0},{"had_liked":false,"id":158700,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1575436004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575436004","product_id":100039001,"comment_content":" public static ApiRequest crateFromFullUrl(String url) {<br>       <br>    }<br>老师，这个函数怎么实现？","like_count":0},{"had_liked":false,"id":158687,"user_name":"阿崔cxr","can_delete":false,"product_type":"c1","uid":1177565,"ip_address":"","ucode":"26E2C7D96306A4","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/dd/c85f2065.jpg","comment_is_top":false,"comment_ctime":1575433781,"is_pvip":false,"replies":[{"id":"61148","content":"后面讲到代码的可测试性的时候会讲到TDD的","user_name":"作者回复","comment_id":158687,"uid":"1190123","ip_address":"","utype":1,"ctime":1575898058,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1575433781","product_id":100039001,"comment_content":"老师你怎么看 TDD","like_count":0,"discussions":[{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211973,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584919575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122941,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/7d/b093ca1e.jpg","nickname":"小猴子吹泡泡","note":"","ucode":"A5F214E388E41F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210356,"discussion_content":"请问你们在项目中使用设计模式是把设计模式的类单独放一个包里吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584718199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1122941,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/7d/b093ca1e.jpg","nickname":"小猴子吹泡泡","note":"","ucode":"A5F214E388E41F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210543,"discussion_content":"没有单独弄包，设计模式的思想用到了编码中而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584751782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":210356,"ip_address":""},"score":210543,"extra":""}]}]},{"had_liked":false,"id":158682,"user_name":"兔2🐰🍃","can_delete":false,"product_type":"c1","uid":1096984,"ip_address":"","ucode":"1FEDA044BB6CBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","comment_is_top":false,"comment_ctime":1575433074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575433074","product_id":100039001,"comment_content":"实战落地，讲述先做什么、后做什么，思路非常清晰、明确，有章可循。干货！","like_count":0},{"had_liked":false,"id":158668,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1575430105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575430105","product_id":100039001,"comment_content":"今天的总结就是：先按照争哥的方法分析设计实现，一步一步来，体会熟悉其中的奥妙，最后熟练之后就可以轻松的“倒车入库”了。","like_count":0},{"had_liked":false,"id":158658,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1575428632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575428632","product_id":100039001,"comment_content":"之前都是别想别写，写着写着就会发现遗漏了一些东西。以后尝试下先写下功能点作分析，然后在动手，把思考放在动手前面","like_count":0},{"had_liked":false,"id":158651,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1575427705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575427705","product_id":100039001,"comment_content":"不错不错， 要是我的话就设计成一个类了","like_count":0},{"had_liked":false,"id":158649,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1575427414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575427414","product_id":100039001,"comment_content":"设计流程：<br><br>整体业务划分职责，形成多模块<br>各个模块再细分，划分具体类和接口<br>定义类属性和方法（名词为属性：与业务相关的才设计成属性，无关但需要的设计成方法形参；动词可以考虑设计成方法）<br>定义类之间的交互关系（继承泛化、接口实现、B是A的字段为组合、A用到B了就是依赖）<br>将类组装起来并提供执行入口<br><br>这些还是要看实战才行啊。加油！！！","like_count":0},{"had_liked":false,"id":158621,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1575423664,"is_pvip":true,"replies":[{"id":"60682","content":"我好像没见过类似的 还是靠实战项目来锻炼","user_name":"作者回复","comment_id":158621,"uid":"1190123","ip_address":"","utype":1,"ctime":1575423763,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1575423664","product_id":100039001,"comment_content":"对于需求分析 这块有没有系统的可以学习的东西推荐一下啊  感觉 这块有点弱","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476782,"discussion_content":"我好像没见过类似的 还是靠实战项目来锻炼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575423763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1057056,"avatar":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","nickname":"秋天","note":"","ucode":"A7E1D953EF7E17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71504,"discussion_content":"看来还得自己去体会啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575426547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158620,"user_name":"SMTCode","can_delete":false,"product_type":"c1","uid":1109038,"ip_address":"","ucode":"0D837A753E4FAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/2e/49d13bd2.jpg","comment_is_top":false,"comment_ctime":1575423604,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575423604","product_id":100039001,"comment_content":"打卡，看了一个小时～","like_count":0},{"had_liked":false,"id":158618,"user_name":"leejunhui","can_delete":false,"product_type":"c1","uid":1188627,"ip_address":"","ucode":"A957C0034B9F4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/13/6ba35b43.jpg","comment_is_top":false,"comment_ctime":1575423480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575423480","product_id":100039001,"comment_content":"打卡，虽然自己没做过服务端开发，但是对这两篇实战课感觉都很想多读两遍~","like_count":0},{"had_liked":false,"id":158616,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1575423307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575423307","product_id":100039001,"comment_content":"老师教的是一套设计思路，自己可以灵活应对。","like_count":0},{"had_liked":false,"id":158610,"user_name":"fenghuo","can_delete":false,"product_type":"c1","uid":1107514,"ip_address":"","ucode":"88A9F5BE0BBAA5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/3a/5e8be862.jpg","comment_is_top":false,"comment_ctime":1575422890,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575422890","product_id":100039001,"comment_content":"把需求描述中的名词罗列出来，作为可能的候选类，然后再进行筛选。今日有收获，打卡。","like_count":0},{"had_liked":false,"id":158601,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212758,"ip_address":"","ucode":"ABF1824D24BA2F","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/56/311be282.jpg","comment_is_top":false,"comment_ctime":1575421640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575421640","product_id":100039001,"comment_content":"# 将需求描述转化为具体的类的设计<br>## 划分职责进而识别出有哪些类<br>* 把涉及的功能点罗列出来，看哪些功能点职责相近，操作同样的属性，可否归为同一个类<br>## 定义类及其属性和方法<br>* 识别出需求描述中的动词，作为候选的方法，再进一步过滤筛选出真正的方法<br>* 把功能点中涉及的名词，作为候选属性，然后同样再进行过滤筛选<br><br>## 定义类与类之间的交互关系<br>* 泛化、实现、组合、依赖<br><br>## 将类组装起来并提供执行入口<br>* 一个 main() 函数<br>* 一组给外部用的 API 接口","like_count":0},{"had_liked":false,"id":158599,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1575421568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575421568","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":158593,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":1003738,"ip_address":"","ucode":"2E254444098267","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/da/ed4803cb.jpg","comment_is_top":false,"comment_ctime":1575421299,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575421299","product_id":100039001,"comment_content":"AuthToken.generate(originalUrl, appId, password, timestamp)在设计阶段并未提及。","like_count":0,"discussions":[{"author":{"id":1521181,"avatar":"https://static001.geekbang.org/account/avatar/00/17/36/1d/874dc1e3.jpg","nickname":"你的笑忘书","note":"","ucode":"9665D5E9EDBEA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576687,"discussion_content":"然而在客户端调用策略代码时，不还是得先通过 if type 判断下具体入参哪个 Class 才行么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655733727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1702231,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f9/57/a4f8fba2.jpg","nickname":"telnet","note":"","ucode":"3860B39D1FA81D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327982,"discussion_content":"反射不是不对，只是反射不够好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606034110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1306986,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f1/6a/05fa25d2.jpg","nickname":"J.F.Cheung","note":"","ucode":"EB696F021174CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265472,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589410946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158574,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1575420191,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575420191","product_id":100039001,"comment_content":"打卡，需要消化一下今天的课程。","like_count":0},{"had_liked":false,"id":158573,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1575420162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575420162","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":158567,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1575419494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575419494","product_id":100039001,"comment_content":"看了第一遍。先来留个言。学习了面对对象开发的设计思想和分析。需要在多看两遍，跟着小争哥的设计思路在自己梳理一遍。","like_count":0},{"had_liked":false,"id":158564,"user_name":"deepz","can_delete":false,"product_type":"c1","uid":1570088,"ip_address":"","ucode":"4BD23A44CDB384","user_header":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","comment_is_top":false,"comment_ctime":1575419334,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575419334","product_id":100039001,"comment_content":"打卡～  每次更新两篇就更好了😏😏","like_count":0},{"had_liked":false,"id":158547,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1575417603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575417603","product_id":100039001,"comment_content":"我在实际工作中，理完需求后，在白纸上粗略的列列需要哪些类，哪些属性，理清类的关系后，开始做有关DDL相关的事 如建表等。大致考虑一下代码怎么测试，之后开始编码。在编码过程中，会不断的优化在设计阶段的设计。编码完成后，开始自测。在自测过程中验证代码的运行是否符合需求描述。不符合，修改迭代。其实在测试与修改迭代这一步可以反思一下自己设计和分析阶段是否不合理等等。","like_count":0},{"had_liked":false,"id":158546,"user_name":"方小白","can_delete":false,"product_type":"c1","uid":1441572,"ip_address":"","ucode":"425F5167C15407","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/24/d8f97f2c.jpg","comment_is_top":false,"comment_ctime":1575417586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575417586","product_id":100039001,"comment_content":"去完成作业去😾","like_count":0}]}