{"id":366296,"title":"20 | 日志（下）：系统故障，如何恢复数据？","content":"<p>你好，我是朱晓峰。</p><p>上节课，咱们学习了通用查询日志、慢查询日志和错误日志，它们可以帮助我们快速定位系统问题。但实际上，日志也可以帮助我们找回由于误操作而丢失的数据，比如二进制日志（binary log）、中继日志（relay log）、回滚日志（undo log）和重做日志（redo log）。</p><p>这节课，我们就来学习下这4种日志。</p><h2>二进制日志</h2><p><strong>二进制日志主要记录数据库的更新事件</strong>，比如创建数据表、更新表中的数据、数据更新所花费的时长等信息。通过这些信息，我们可以再现数据更新操作的全过程。而且，由于日志的延续性和时效性，我们还可以利用日志，完成无损失的数据恢复和主从服务器之间的数据同步。</p><p>可以说，二进制日志是进行数据恢复和数据复制的利器。所以，接下来我就结合一个实际案例，重点给你讲一讲怎么操作它。</p><h3>如何操作二进制日志？</h3><p>操作二进制日志，主要包括查看、刷新二进制日志，用二进制日志恢复数据，以及删除二进制日志。</p><p><strong>1.查看二进制日志</strong></p><p>查看二进制日志主要有3种情况，分别是查看当前正在写入的二进制日志、查看所有的二进制日志和查看二进制日志中的所有数据更新事件。</p><p>查看当前正在写入的二进制日志的SQL语句是：</p><pre><code>SHOW MASTER STATUS;\n</code></pre><!-- [[[read_end]]] --><p>我们可以通过这条语句，查看当前正在写入的二进制日志的名称和当前写入的位置：</p><pre><code>mysql&gt; SHOW MASTER STATUS;\n+----------------------+----------+--------------+------------------+-------------------+\n| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+----------------------+----------+--------------+------------------+-------------------+\n| GJTECH-PC-bin.000011 | 2207 | | | |\n+----------------------+----------+--------------+------------------+-------------------+   -- 当前正在写入的二进制日志是“GJTECH-PC-bin.000011”，当前的位置是2207。\n1 row in set (0.00 sec)\n</code></pre><p>查看所有的二进制日志的SQL语句是：</p><pre><code>SHOW BINARY LOGS;\n</code></pre><p>查看二进制日志中所有数据更新事件的SQL语句是：</p><pre><code>SHOW BINLOG EVENTS IN 二进制文件名;\n</code></pre><p><strong>2.刷新二进制日志</strong></p><p>刷新二进制日志的SQL语句是：</p><pre><code>FLUSH BINARY LOGS;\n</code></pre><p>这条语句的意思是，关闭服务器正在写入的二进制日志文件，并重新打开一个新文件，文件名的后缀在现有的基础上加1。</p><p><strong>3.用二进制日志恢复数据</strong></p><p>我们可以用mysqlbinlog工具进行数据恢复：</p><pre><code>mysqlbinlog –start-positon=xxx --stop-position=yyy 二进制文件名 | mysql -u 用户 -p\n</code></pre><p>这条命令的意思是，执行二进制日志中从位置xxx开始，到yyy截止的所有数据更新操作。这里的截止位置也可以不写，意思是从位置xxx开始，执行二进制文件中的所有数据更新操作。</p><p><strong>4.删除二进制日志</strong></p><p>如果我们已经把日志文件保存到了安全的地方，就可以通过下面的SQL语句删除所有二进制日志文件，以释放磁盘空间：</p><pre><code>mysql&gt; RESET MASTER;\nQuery OK, 0 rows affected (0.20 sec)\n \nmysql&gt; SHOW BINARY LOGS;\n+----------------------+-----------+-----------+\n| Log_name | File_size | Encrypted |\n+----------------------+-----------+-----------+\n| GJTECH-PC-bin.000001 | 156 | No |\n+----------------------+-----------+-----------+\n1 row in set (0.00 sec)\n</code></pre><p>结果显示，所有二进制日志文件都被删除了，MySQL从头准备了一个“.000001”为后缀的新的二进制日志文件。</p><p>我们也可以通过SQL语句，删除比指定二进制日志文件编号小的所有二进制日志文件：</p><pre><code>mysql&gt; PURGE MASTER LOGS TO 'GJTECH-PC-bin.000005';\nQuery OK, 0 rows affected (0.02 sec)\n</code></pre><p>好了，知道了二进制日志的操作方法，下面我们借助一个案例，来实操一下。我们来看看怎么通过二进制日志恢复数据，避免因故障或异常等导致数据损失。</p><h3>案例讲解</h3><p>假设数据库demo中有一个商品信息表（demo.goodsmaster），我先对数据库demo做了一个全量备份。所谓的全量备份，就是指对数据库中存储的全部数据进行备份。备份完成之后，我又在商品信息表中插入了新数据。</p><p>这个时候，数据库demo出现异常，数据全部丢失。现在咱们需要把所有的数据，包括备份前的数据和备份之后新插入的数据都恢复回来。我来介绍下具体的操作步骤。</p><p>商品信息表的信息如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/98/83/980b731a6ab550894479b1f3382a9683.jpeg?wh=1304*572\" alt=\"\"></p><p>可以看到，表中有一条记录：编号是1的商品，名称是“书”，售价是89元。</p><p><strong>第一步，做数据库备份。</strong></p><p>你可以用MySQL的数据备份工具mysqldump，来备份数据。这个工具的语法结构如下所示：</p><pre><code>mysqldump -u 用户 -p 密码 数据库 &gt; 备份文件\n</code></pre><p>在这个场景中，我们可以使用mysqldump工具，把数据库demo中的全部信息备份到文件“mybackup.sql”中，来完成对数据库demo的全量备份：</p><pre><code>H:\\&gt;mysqldump -u root -p demo &gt; mybackup.sql\nEnter password: *****\n</code></pre><p>这个命令的意思是，把数据库demo中的全部数据，备份到文件mybackup.sql中。</p><p><strong>第二步，用“FLUSH BINARY LOGS;”语句刷新一下日志。</strong></p><pre><code>mysql&gt; FLUSH BINARY LOGS;\nQuery OK, 0 rows affected (0.06 sec)\n</code></pre><p>这步操作的目的是：产生一个新的二进制日志文件，使这个文件只保存数据备份之后的数据更新事件，这样可以方便我们查看文件的内容。</p><p><strong>第三步，给商品信息表插入一条新的数据记录“笔”。</strong></p><pre><code>mysql&gt; INSERT INTO demo.goodsmaster\n-&gt; (\n-&gt; itemnumber,\n-&gt; barcode,\n-&gt; goodsname,\n-&gt; salesprice\n-&gt; )\n-&gt; VALUES\n-&gt; (\n-&gt; 2,\n-&gt; '0002',\n-&gt; '笔',\n-&gt; 3\n-&gt; );\nQuery OK, 1 row affected (0.03 sec)\n</code></pre><p>这样我们就增加了一个新的商品“笔”。</p><p>现在，我们来查看一下数据表里的内容：</p><pre><code>mysql&gt; SELECT * FROM demo.goodsmaster;\n+------------+---------+-----------+------------+\n| itemnumber | barcode | goodsname | salesprice |\n+------------+---------+-----------+------------+\n| 1 | 0001 | 书 | 89.00 |\n| 2 | 0002 | 笔 | 3.00 |\n+------------+---------+-----------+------------+\n2 rows in set (0.00 sec)\n</code></pre><p>结果显示，我们有了2条记录，分别是“书”和“笔”。</p><p>假设这个时候，系统突然宕机，数据库无法启动，为了使系统恢复正常，我们重启机器，重新创建数据库，并且需要进行数据恢复。</p><p><strong>第四步，准备从备份文件恢复数据。</strong></p><p>每当服务器启动、刷新二进制日志或者二进制日志大小超过系统变量 max_binlog_size指定的值时，系统就会生成一个新的二进制日志文件。</p><p>我们先查看一下机器上的二进制日志文件，以确定哪个文件是我们正在使用的。</p><pre><code>mysql&gt; SHOW BINARY LOGS;\n+----------------------+-----------+-----------+\n| Log_name | File_size | Encrypted |\n+----------------------+-----------+-----------+\n| GJTECH-PC-bin.000005 | 179 | No |\n| GJTECH-PC-bin.000006 | 113316452 | No |\n| GJTECH-PC-bin.000007 | 12125 | No |\n| GJTECH-PC-bin.000008 | 1544 | No |\n| GJTECH-PC-bin.000009 | 207 | No |\n| GJTECH-PC-bin.000010 | 1758 | No |\n| GJTECH-PC-bin.000011 | 2207 | No |\n| GJTECH-PC-bin.000012 | 462 | No |\n+----------------------+-----------+-----------+\n12 rows in set (0.01 sec)\n</code></pre><p>结果显示，最新的，也就是记录了数据插入操作的二进制日志文件是“GJTECH-PC-bin.000012”，这就是接下来我们要用的日志文件。</p><p>接着，我们来刷新一下二进制日志文件，这样做的目的是防止后面数据恢复的事件全都被写入这个二进制日志文件，妨碍我们理解文件的内容。</p><pre><code>mysql&gt; FLUSH BINARY LOGS;\nQuery OK, 0 rows affected (0.08 sec)\n</code></pre><p>现在，我们查看一下当前正在写入的二进制文件和位置，确认一下系统是否创建了新的二进制日志文件：</p><pre><code>mysql&gt; SHOW MASTER STATUS;\n+----------------------+----------+--------------+------------------+-------------------+\n| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+----------------------+----------+--------------+------------------+-------------------+\n| GJTECH-PC-bin.000013 | 156 | | | |\n+----------------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)\n</code></pre><p>结果显示，当前在使用的二进制日志文件是“GJTECH-PC-bin.000013”，这样保存增量数据的二进制日志文件就不会受到后面操作的影响了。</p><p>下面我来删除并重建一个数据库demo，给你演示一下如何使用二进制日志恢复数据。</p><pre><code>mysql&gt; DROP DATABASE demo;\nQuery OK, 1 row affected (0.07 sec)\n \nmysql&gt; CREATE DATABASE demo;\nQuery OK, 1 row affected (0.01 sec)\n</code></pre><p>通过上面的操作，就有了一个空数据库demo。接下来，就可以恢复数据了。</p><p><strong>第五步，从备份恢复数据。</strong></p><p>可以通过mysql命令来恢复数据，语法结构如下：</p><pre><code>mysql -u 用户 -p 密码 数据库名称 &lt; 备份文件\n</code></pre><p>现在我用刚才的备份文件，通过下面的指令来恢复数据：</p><pre><code>H:\\&gt;mysql -u root -p demo&lt;mybackup.sql\nEnter password: *****\n</code></pre><p>这个指令的意思是，在数据库demo中执行备份文件“mybackup.sql”中的所有SQL操作，这样就可以把demo中的数据恢复到备份时的状态了。</p><p>我们，来看一下现在商品信息表中的数据：</p><pre><code>mysql&gt; SELECT * FROM demo.goodsmaster;\n+------------+---------+-----------+------------+\n| itemnumber | barcode | goodsname | salesprice |\n+------------+---------+-----------+------------+\n| 1 | 0001 | 书 | 89.00 |\n+------------+---------+-----------+------------+\n1 row in set (0.00 sec)\n</code></pre><p>结果显示，只有一条数据记录“书”，那么，怎么才能把我们备份之后插入的那条数据“笔”给找回呢？这个时候，就要进入下一步，使用二进制日志了。</p><p><strong>第六步，从保存增量信息的二进制日志文件“GJTECH-PC-bin.000012”中恢复增量数据。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/c1/64/c1d720d4405e479ba71eca27d5a15e64.png?wh=1202*534\" alt=\"\"></p><p>通过查看二进制日志中的事件，你会发现，写入第二条记录的时候，MySQL使用了一个事务操作，起始位置是306，截止位置是462。这样，就可以用mysqlbinlog工具进行数据恢复了。日志名称是“C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\GJTECH-PC-bin.000012”，读取日志的起始位置是306。</p><pre><code>H:\\&gt;mysqlbinlog --start-position=306 &quot;C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\GJTECH-PC-bin.000012&quot; | mysql -u root -p\nEnter password: *****\n</code></pre><p>现在我们查看一下商品信息表，确认一下备份之后插入的商品数据记录是不是恢复回来了。</p><pre><code>mysql&gt; SELECT * FROM demo.goodsmaster;\n+------------+---------+-----------+------------+\n| itemnumber | barcode | goodsname | salesprice |\n+------------+---------+-----------+------------+\n| 1 | 0001 | 书 | 89.00 |\n| 2 | 0002 | 笔 | 3.00 |\n+------------+---------+-----------+------------+\n2 rows in set (0.00 sec)\n</code></pre><p>结果显示，备份之后插入的记录“笔”也找回来了。</p><p>到这里，二进制日志恢复数据的功能我就介绍完了。需要提醒你注意的是，在实际工作中，用二进制日志文件找回数据时经常会遇到问题，主要就是不容易找准起始位置或者截止位置。找早了，会导致数据冲突、重复；找晚了，又会丢失数据。所以，我建议你在数据备份结束之后，把当前的二进制日志位置记录下来，存放在一个安全的地方，这关系到数据恢复的完整性，一定不要怕麻烦。</p><p>二进制日志还有一个重要的功能，就是在主从服务器的架构中，把主服务器的操作复制到从服务器。而这个操作要借助中继日志一起完成。</p><h2>中继日志</h2><p><strong>中继日志只在主从服务器架构的从服务器上存在</strong>。从服务器为了与主服务器保持一致，要从主服务器读取二进制日志的内容，并且把读取到的信息写入本地的日志文件中，这个从服务器本地的日志文件就叫中继日志。然后，从服务器读取中继日志，并根据中继日志的内容对从服务器的数据进行更新，完成主从服务器的数据同步。</p><p>搭建好主从服务器之后，中继日志默认会保存在从服务器的数据目录（C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data）下，文件名的格式是：从服务器名-relay-bin.序号。</p><p>中继日志还有一个索引文件：从服务器名-relay-bin.index，用来定位当前正在使用的中继日志。</p><p>中继日志与二进制日志的格式相同，可以用mysqlbinlog工具进行查看。下面是中继日志的一个片段：</p><pre><code>SET TIMESTAMP=1618558728/*!*/;\nBEGIN\n/*!*/;\n# at 950\n#210416 15:38:48 server id 1  end_log_pos 832 CRC32 0xcc16d651 \tTable_map: `demo`.`test` mapped to number 91\n# at 1000\n#210416 15:38:48 server id 1  end_log_pos 872 CRC32 0x07e4047c \tDelete_rows: table id 91 flags: STMT_END_F   -- server id 1 是主服务器，意思是主服务器删了一行数据\n\nBINLOG '\nCD95YBMBAAAAMgAAAEADAAAAAFsAAAAAAAEABGRlbW8ABHRlc3QAAQMAAQEBAFHWFsw=\nCD95YCABAAAAKAAAAGgDAAAAAFsAAAAAAAEAAgAB/wABAAAAfATkBw==\n'/*!*/;\n# at 1040\n</code></pre><p>这一段的意思是，主服务器（“server id 1”）对表demo.test进行了2步操作：</p><ol>\n<li>定位到表demo.test编号是91的记录，日志位置是832；</li>\n<li>删除编号是91的记录，日志位置是872。</li>\n</ol><p>关于中继日志，有一个很容易踩到的坑。如果从服务器宕机，有的时候为了系统恢复，你要重装操作系统，这样就可能会导致你的服务器名称与之前不同。而中继日志的名称里面是包含从服务器名的。因此，在这种情况下，就可能导致你恢复从服务器的时候，无法从宕机前的中继日志里读取数据，以为是日志文件损坏了，其实是文件名不对了。解决的方法也很简单，只要把从服务器的名称改回之前的名称就可以了。</p><p>下面我再介绍一下回滚日志。</p><h2>回滚日志</h2><p><strong>回滚日志的作用是进行事务回滚</strong>。</p><p>当事务执行的时候，回滚日志中记录了事务中每次数据更新前的状态。当事务需要回滚的时候，可以通过读取回滚日志，恢复到指定的位置。另一方面，回滚日志也可以让其他的事务读取到这个事务对数据更改之前的值，从而确保了其他事务可以不受这个事务修改数据的影响。</p><p>回滚日志的设置是啥样的呢？我们来学习下相关变量值，包括文件大小、所在的文件夹、是否加密、是否自动截断回收以及是否有独立的表空间等。这些都是我们了解事务回滚的机制的关键。</p><pre><code>mysql&gt; SHOW VARIABLES LIKE '%innodb_max_undo_log_size%';\n+--------------------------+------------+\n| Variable_name | Value |\n+--------------------------+------------+\n| innodb_max_undo_log_size | 1073741824 |\n+--------------------------+------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre><p>变量“innodb_max_undo_log_size”的意思是，单个回滚日志最大可占用1G字节存储空间。</p><p>下面几个变量定义了回滚日志所在的文件夹、是否加密、是否自动截断回收空间和是否有独立的表空间等。</p><pre><code>mysql&gt; SHOW VARIABLES LIKE '%innodb_undo%';\n+--------------------------+-------+\n| Variable_name | Value |\n+--------------------------+-------+\n| innodb_undo_directory | .\\ |  -- 表示回滚日志的存储目录是数据目录。 \n| innodb_undo_log_encrypt | OFF | -- 表示回滚日志不加密。\n| innodb_undo_log_truncate | ON | -- 表示回滚日志是否自动截断回收，前提是设置了独立表空间。\n| innodb_undo_tablespaces | 2 |  -- 表示回滚日志有自己的独立表空间，而不是在共享表空间ibdata文件中。\n+--------------------------+-------+\n4 rows in set, 1 warning (0.00 sec)\n</code></pre><p>这里的结果显示了这4个变量的默认值。下面我来分别解释一下。</p><ul>\n<li>innodb_undo_directory=.\\ ，表示回滚日志的存储目录是数据目录，数据目录的位置可以通过查询变量“datadir”来查看。</li>\n<li>innodb_undo_log_encrypt = OFF，表示回滚日志不加密。</li>\n<li>innodb_undo_log_truncate = ON，表示回滚日志是否自动截断回收，这个变量有效的前提是设置了独立表空间。</li>\n<li>innodb_undo_tablespaces = 2，表示回滚日志有自己的独立表空间，而不是在共享表空间ibdata文件中。</li>\n</ul><p>下面的截图显示了回滚日志的存储目录，以及在文件夹中的名称等信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/90/38/90ebac7eed19314e6fc5928b92a56b38.png?wh=865*699\" alt=\"\"></p><p>最后，我来介绍一下MySQL的重做日志。</p><h2>重做日志</h2><p>重做日志是存储在磁盘上的一种日志文件，主要有2个作用。</p><ol>\n<li>在系统遇到故障的恢复过程中，可以修复被未完成的事务修改的数据。</li>\n<li>MySQL为了提高数据存取的效率，减少磁盘操作的频率，对数据的更新操作不会立即写到磁盘上，而是把数据更新先保存在内存中，积累到一定程度，再集中进行磁盘读写操作。这样就存在一个问题：一旦出现宕机或者停电等异常情况，内存中保存的数据更新操作可能会丢失。这个时候就可以通过读取重做日志中记录的数据更新操作，把没来得及写到磁盘上的数据更新写到磁盘上，确保数据的完整性。</li>\n</ol><p>我们可以通过系统变量的值，了解重做日志所在的文件夹和文件的数量。这些是我们进一步了解系统运行机制的必要条件，有助于我们开发出高效的数据库应用。</p><pre><code>mysql&gt; SHOW VARIABLES LIKE '%innodb_log_files_in_group%';\n+---------------------------+-------+\n| Variable_name | Value |\n+---------------------------+-------+\n| innodb_log_files_in_group | 2 |\n+---------------------------+-------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre><p>结果显示，变量innodb_log_files_in_group值是2，表示有2个重做日志文件。</p><p>需要注意的是，变量innodb_log_files_in_group值的取值范围是1~4，这四个文件分别用于记录不同的操作.</p><ol>\n<li>用户创建表的插入操作；</li>\n<li>用户创建表的更新和删除操作；</li>\n<li>临时表的插入操作；</li>\n<li>临时表的更新和删除操作。</li>\n</ol><p>那么，为什么在我的电脑上，变量innodb_log_files_in_group值是2呢？其实这是因为，我只执行了对用户创建表的插入操作和更新删除操作，所以，只用到了2个文件。如果我还执行了临时表的插入和更新删除的操作，那么这个变量的值就会变成4，也就是会有4个重做日志文件了。</p><h2>总结</h2><p>这节课，我们学习了二进制日志、中继日志、回滚日志和重做日志。</p><ol>\n<li>二进制日志：主要用于主从服务器之间的数据同步，以及服务器遇到故障时数据的无损失恢复。</li>\n<li>中继日志：就是主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。从服务器通过读取中继日志的内容，来同步主服务器上的操作。</li>\n<li>回滚日志：用来存储事务中数据更新前的状态，以便回滚和保持其他事务的数据一致性。</li>\n<li>重做日志：是为了确保数值持久性、防止数据更新丢失的一种日志。</li>\n</ol><p>在这几种日志中，你一定要格外注意二进制日志的用法。有了它，我们就可以通过数据库的全量备份和二进制日志中保存的增量信息，完成数据库的无损失恢复。不过，我要提醒你的是，如果你遇到数据量大、数据库和数据表很多（比如分库分表的应用）的场景，用二进制日志进行数据恢复，是很有挑战性的，因为起止位置不容易管理。</p><p>在这种情况下，一个有效的解决办法是配置主从数据库服务器，甚至是一主多从的架构，把二进制日志文件的内容通过中继日志，同步到从数据库服务器中，这样就可以有效避免数据库故障导致的数据异常等问题。</p><h2>思考题</h2><p>下面是一段二进制日志中事件的内容：</p><pre><code>mysql&gt; SHOW BINLOG EVENTS IN 'GJTECH-PC-bin.000013';\n+----------------------+------+----------------+-----------+-------------+--------------------------------------+\n| Log_name             | Pos  | Event_type     | Server_id | End_log_pos | Info                                 |\n+----------------------+------+----------------+-----------+-------------+--------------------------------------+\n| GJTECH-PC-bin.000013 |  556 | Query          |         1 |         627 | BEGIN                                |\n| GJTECH-PC-bin.000013 |  627 | Table_map      |         1 |         696 | table_id: 114 (demo.goodsmaster)     |\n| GJTECH-PC-bin.000013 |  696 | Delete_rows    |         1 |         773 | table_id: 114 flags: STMT_END_F      |\n| GJTECH-PC-bin.000013 |  773 | Xid            |         1 |         804 | COMMIT /* xid=253 */                 |\n| GJTECH-PC-bin.000013 |  804 | Anonymous_Gtid |         1 |         894 | SET @@SESSION.GTID_NEXT= 'ANONYMOUS' |\n| GJTECH-PC-bin.000013 |  894 | Query          |         1 |         969 | BEGIN                                |\n| GJTECH-PC-bin.000013 |  969 | Table_map      |         1 |        1038 | table_id: 114 (demo.goodsmaster)     |\n| GJTECH-PC-bin.000013 | 1038 | Write_rows     |         1 |        1094 | table_id: 114 flags: STMT_END_F      |\n| GJTECH-PC-bin.000013 | 1094 | Xid            |         1 |        1125 | COMMIT /* xid=259 */                 |\n</code></pre><p>观察一下，其中包括了哪几个SQL数据操作呢？为了从二进制日志中恢复这些操作，我们应该如何设置起始位置和截止位置呢？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你分享给你的朋友或同事，我们下节课见。</p>","neighbors":{"left":{"article_title":"19 | 日志（上）：系统出现问题，如何及时发现？","id":364715},"right":{"article_title":"21 | 数据备份：异常情况下，如何确保数据安全？","id":366307}},"comments":[{"had_liked":false,"id":293650,"user_name":"朱晓峰","can_delete":false,"product_type":"c1","uid":2356905,"ip_address":"","ucode":"D2F84F44329C29","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","comment_is_top":true,"comment_ctime":1621478540,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"9.2233720384763003e+18","product_id":100073201,"comment_content":"你好，我是朱晓峰，下面我就来公布一下上节课思考题的答案：<br><br>上节课，我们学习了日志（上）。下面是思考题的答案：<br><br>修改配置文件：my.ini<br><br>slow-query-log=1<br><br>long_query_time=5<br><br>然后重启MySQL服务器<br><br>mysql&gt; SET min_examined_row_limit = 1;<br>Query OK, 0 rows affected (0.00 sec)<br><br>","like_count":0,"discussions":[{"author":{"id":2485664,"avatar":"https://static001.geekbang.org/account/avatar/00/25/ed/a0/cc89c128.jpg","nickname":"大聖","note":"","ucode":"5FD991D883BE78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387222,"discussion_content":"是不是也可以设置variable来开启呢？设置slow_query_log和long_query_time","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628061656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290076,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1619349146,"is_pvip":false,"replies":[{"id":"106468","content":"详情可以参考链接：https:&#47;&#47;dev.mysql.com&#47;doc&#47;refman&#47;8.0&#47;en&#47;innodb-redo-log.html和https:&#47;&#47;dev.mysql.com&#47;doc&#47;refman&#47;8.0&#47;en&#47;innodb-undo-logs.html","user_name":"作者回复","user_name_real":"朱晓峰","uid":"2356905","ctime":1621561117,"ip_address":"","comment_id":290076,"utype":1}],"discussion_count":1,"race_medal":1,"score":"10209283738","product_id":100073201,"comment_content":"<br>二进制日志可以处理数据备份与恢复的问题，也可以与中继日志一起解决主从架构下数据一致性的问题。<br><br>回滚日志与重做日志的具体作用还不太了解。","like_count":2,"discussions":[{"author":{"id":2356905,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","nickname":"朱晓峰","note":"","ucode":"D2F84F44329C29","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519103,"discussion_content":"详情可以参考链接：https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log.html和https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-logs.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621561117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290074,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1619349063,"is_pvip":false,"replies":[{"id":"106463","content":"很高兴能够对你有所帮助","user_name":"作者回复","user_name_real":"朱晓峰","uid":"2356905","ctime":1621560971,"ip_address":"","comment_id":290074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10209283655","product_id":100073201,"comment_content":"之前看到的MySQL基础课，涉及日志这块儿内容几乎没有。老师花了两节课讲了MySQL日志相关的内容，基本伤都是点到即止，阅读起来没多大负担。但是对于建立MySQL的整体认识是非常重要的。我虽然在实际工作中用了几年MySQL，这些内容读完了也有所收获！","like_count":2,"discussions":[{"author":{"id":2356905,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","nickname":"朱晓峰","note":"","ucode":"D2F84F44329C29","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519102,"discussion_content":"很高兴能够对你有所帮助","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621560971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358836,"user_name":"玉琴","can_delete":false,"product_type":"c1","uid":2267015,"ip_address":"江西","ucode":"345A3E4DD7771A","user_header":"","comment_is_top":false,"comment_ctime":1664874844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664874844","product_id":100073201,"comment_content":"老师，数据库一直在用，<br>1 如果使用mysqldump备份数据库，会不会有部分缓存操作没有备份到呢？<br>2 我们再通过FLUSH BINARY LOGS，刷新日志，会不会还是有部分操作没写入到binlog中呢？","like_count":0},{"had_liked":false,"id":358420,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"江西","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1664283277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664283277","product_id":100073201,"comment_content":"&quot;重做日志：一旦出现宕机或者停电等异常情况，内存中保存的数据更新操作可能会丢失。这个时候就可以通过读取重做日志中记录的数据更新操作，把没来得及写到磁盘上的数据更新写到磁盘上，确保数据的完整性。&quot; <br>-----------<br>mysql操作，每次都先写日志后操作数据库么？如果数据量少，直接写数据库可能更快；如果操作数据量大，可以记录一下重做日志，确实可以避免数据库断网断电的异常情况。","like_count":0},{"had_liked":false,"id":356173,"user_name":"Geek_fa49f7","can_delete":false,"product_type":"c1","uid":2734536,"ip_address":"广东","ucode":"C33EDCAED2C316","user_header":"","comment_is_top":false,"comment_ctime":1662024515,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1662024515","product_id":100073201,"comment_content":"H:\\&gt;mysql -u root -p demo这条命令一直报错，是因为要切换到H:\\底下吗","like_count":0,"discussions":[{"author":{"id":3176102,"avatar":"https://static001.geekbang.org/account/avatar/00/30/76/a6/6e7d7f8a.jpg","nickname":"熔岩","note":"","ucode":"60A5701AD3396A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587152,"discussion_content":"path 环境变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662842417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"新疆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334217,"user_name":"SharpBB","can_delete":false,"product_type":"c1","uid":2014573,"ip_address":"","ucode":"D30C5B798B8E8C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/bd/6d/7010f98e.jpg","comment_is_top":false,"comment_ctime":1644818672,"is_pvip":true,"replies":[{"id":"123499","content":"好的","user_name":"作者回复","user_name_real":"编辑","uid":"2356905","ctime":1647075756,"ip_address":"","comment_id":334217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644818672","product_id":100073201,"comment_content":"1.二进制日志<br>\t0.注意点：在mysql8前二进制日志是默认关闭的 8以后默认开启<br>\t1.查看二进制日志<br>\t\tSHOW MASTER STATUS;<br>\t\t查看所有二进制日志<br>\t\t\tSHOW BINARY LOGS;<br>\t\t查看二进制日志中所有数据更新事件<br>\t\t\tSHOW BINLOG EVENTS IN 二进制文件名;<br>\t2. 刷新二进制日志<br>\t\tFLUSH BINARY LOGS;<br>\t\t\t关闭正在写入的二进制日志文件 重开新文件 并在文件后缀上+1<br>\t3. 用二进制日志恢复数据<br>\t\tmysqlbinlog –start-positon=xxx --stop-position=yyy 二进制文件名 | mysql -u 用户 -p  从xxx位置开始 到yyy截止的数据更新操作 yyy可以省略<br>\t\t\t小tip：最好记录下开始位置 否则在数据量大的情况下索引会很难找<br>\t4. 删除二进制日志<br>\t\tRESET MASTER;<br><br>2.中继日志<br>\t只在主从架构的从服务器上存在<br>\t\t简单讲就是 从服务器读取对应二进制文件进行备份<br>\t踩坑<br>\t\t如果主服务器宕机 重装操作系统 导致服务器名变更 那么从机的备份恢复是根据之前的从服务器名来的 所以要将服务器名改成之前的即可<br>3.回滚日志<br>\t单个回滚日志最大为1g<br>\t\tSHOW VARIABLES LIKE &#39;%innodb_max_undo_log_size%&#39;;<br>\t查看<br>\t\tSHOW VARIABLES LIKE &#39;%innodb_undo%&#39;;<br>4.重做日志<br>\t作用<br>\t\t1.在遇到故障恢复中 可以修复未完成的事务修改的数据<br>\t\t2.mysql为了提高效率 对数据的更新会先写入内存 积累一定程度的时候再写入磁盘 这就带来一个问题 如果中途宕机 内存里的数据丢失 可通过重做日志进行磁盘读写操作<br>\t查看<br>\t\tSHOW VARIABLES LIKE &#39;%innodb_log_files_in_group%&#39;;<br>\t\t\t可以发现value是2<br>\t\t说明<br>\t\t\t前两个是用户表的创建和更新操作 如果为4说明用到了临时表<br>总结<br>\t二进制日志如果数据量大 起止位置不好掌控 到那个时候不如直接用主从结构","like_count":0,"discussions":[{"author":{"id":2356905,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","nickname":"朱晓峰","note":"","ucode":"D2F84F44329C29","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555813,"discussion_content":"好的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647075756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320845,"user_name":"水哥","can_delete":false,"product_type":"c1","uid":1285614,"ip_address":"","ucode":"9706E7F188A082","user_header":"https://static001.geekbang.org/account/avatar/00/13/9d/ee/2d02a9c0.jpg","comment_is_top":false,"comment_ctime":1636528661,"is_pvip":false,"replies":[{"id":"116486","content":"十分感谢你的提醒，这个地方我疏忽了，确实应该是--stop-position，我已经请后台加以改正。","user_name":"作者回复","user_name_real":"朱晓峰","uid":"2356905","ctime":1636623181,"ip_address":"","comment_id":320845,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636528661","product_id":100073201,"comment_content":"现在参数不是--end-position了，是stop-position","like_count":0,"discussions":[{"author":{"id":2356905,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","nickname":"朱晓峰","note":"","ucode":"D2F84F44329C29","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530140,"discussion_content":"十分感谢你的提醒，这个地方我疏忽了，确实应该是--stop-position，我已经请后台加以改正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636623181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318506,"user_name":"听雨","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1635318647,"is_pvip":false,"replies":[{"id":"116469","content":"需要事先考虑到这些问题，并加以避免。比如定时备份日志文件。","user_name":"作者回复","user_name_real":"朱晓峰","uid":"2356905","ctime":1636616376,"ip_address":"","comment_id":318506,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635318647","product_id":100073201,"comment_content":"请问老师：<br>用binlog恢复数据时，起始位置可以通过在数据备份时记录日志位置找到，但是截止位置如何找到呢？只能人工查看binlog记录一条条找吗。<br>很多情况下，误删数据后过了好久才发现，这时binlog很多，甚至有的已经超过max_binlog_size切换了binlog文件，这样的该如何找呢。","like_count":0,"discussions":[{"author":{"id":2356905,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","nickname":"朱晓峰","note":"","ucode":"D2F84F44329C29","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529277,"discussion_content":"需要事先考虑到这些问题，并加以避免。比如定时备份日志文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636616376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1619597,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","nickname":"dog_brother","note":"","ucode":"9F64D3C6D815FB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2356905,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","nickname":"朱晓峰","note":"","ucode":"D2F84F44329C29","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":537752,"discussion_content":"如果全量备份文件有position，就会容易定位到起始位置啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639152748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":529277,"ip_address":""},"score":537752,"extra":""}]}]},{"had_liked":false,"id":307786,"user_name":"格局","can_delete":false,"product_type":"c1","uid":2481167,"ip_address":"","ucode":"EDF3736A1FAA8C","user_header":"https://static001.geekbang.org/account/avatar/00/25/dc/0f/4d38b101.jpg","comment_is_top":false,"comment_ctime":1629255565,"is_pvip":false,"replies":[{"id":"112620","content":"系统日志，是面向所有数据库的。可以对日志进行筛选，找到相关数据库的部分。","user_name":"作者回复","user_name_real":"朱晓峰","uid":"2356905","ctime":1630913259,"ip_address":"","comment_id":307786,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629255565","product_id":100073201,"comment_content":"多个数据库的情况下，可以为每个数据库单独弄一份日志吗","like_count":0,"discussions":[{"author":{"id":2356905,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","nickname":"朱晓峰","note":"","ucode":"D2F84F44329C29","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525288,"discussion_content":"系统日志，是面向所有数据库的。可以对日志进行筛选，找到相关数据库的部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630913259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307783,"user_name":"格局","can_delete":false,"product_type":"c1","uid":2481167,"ip_address":"","ucode":"EDF3736A1FAA8C","user_header":"https://static001.geekbang.org/account/avatar/00/25/dc/0f/4d38b101.jpg","comment_is_top":false,"comment_ctime":1629254103,"is_pvip":false,"replies":[{"id":"112619","content":"可能是你MySQL系统的问题，可以考虑重新安装MySQL试一下","user_name":"作者回复","user_name_real":"朱晓峰","uid":"2356905","ctime":1630912918,"ip_address":"","comment_id":307783,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629254103","product_id":100073201,"comment_content":"我这里刷新日志flush binary logs 语句报错。 <br>但可以使用flush logs，来刷新","like_count":0,"discussions":[{"author":{"id":2356905,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZKoB7sooIiaCHqcdNGI97WI3ZJLJph4mibIiat1qRvrBmkicZTEYvyT5iax1vlLFFgk2xgUibmnWvkicWA/132","nickname":"朱晓峰","note":"","ucode":"D2F84F44329C29","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525287,"discussion_content":"可能是你MySQL系统的问题，可以考虑重新安装MySQL试一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630912918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}