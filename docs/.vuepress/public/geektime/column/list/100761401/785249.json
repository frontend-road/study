{"id":785249,"title":"21｜继承和多态：完善面向对象编程的两大特征","content":"<p>你好，我是海纳。</p><p>封装、继承和多态是面向对象编程的三大特征。从第 18 课开始，我们专注于构建类的定义和对象初始化能力，也就是说，只是完成了封装这一特征，这一节课，我们就会进一步实现方法重载和复写，以及类的继承特征。</p><p>第 20 课中我们介绍了操作符的重载，Python 除了可以对操作符进行重载之外，还可以对各种特殊方法进行重载。接下来，我们实现方法的重载。</p><h2>内建方法重载</h2><p>Python 里有很多内建方法，比如 len 方法、pow 方法等。len 方法可以支持字符串、列表、字典等类型。如果想让 len 方法也支持自建类型，就必须为自定义类型添加 <code>__len__</code> 方法的实现，例如：</p><pre><code class=\"language-python\">class Vector(object):\n&nbsp; &nbsp; def __init__(self, x, y):\n&nbsp; &nbsp; &nbsp; &nbsp; self.x = x\n&nbsp; &nbsp; &nbsp; &nbsp; self.y = y\n\n&nbsp; &nbsp; def __add__(self, v):\n&nbsp; &nbsp; &nbsp; &nbsp; return Vector(self.x + v.x, self.y + v.y)\n\n&nbsp; &nbsp; def __len__(self):\n&nbsp; &nbsp; &nbsp; &nbsp; return self.x * self.x + self.y * self.y\n\nprint(len(Vector(3, 4)))\nprint(len(\"hello\"))\n</code></pre><p>为任意对象增加 len 方法，步骤和增加 add 方法是一样的。</p><!-- [[[read_end]]] --><p>第一步，在 HiObject 类中增加 len 方法，并实现为调用对应 _klass 的 len 方法。</p><pre><code class=\"language-c++\">// vm/runtime/interpreter.cpp\n_builtins-&gt;put(new HiString(\"len\"),&nbsp; &nbsp; &nbsp; new FunctionObject(object_len));\n\n// vm/runtime/functionObject.cpp\nHiObject* object_len(HiList* args, HiDict* kwargs) {\n&nbsp; &nbsp; return args-&gt;get(0)-&gt;len();\n}\n\n// vm/object/hiObject.cpp\nHiObject* HiObject::len() {\n&nbsp; &nbsp; return klass()-&gt;len(this);\n}\n</code></pre><p>第二步，在 Klass 类中尝试调用 <code>__len__</code> 方法。下面的代码直接使用上节课所定义的 find_and_call 方法就可以很轻松地实现这个功能。</p><pre><code class=\"language-c++\">HiObject* Klass::len(HiObject* obj) {\n&nbsp; &nbsp; return find_and_call(obj, nullptr, ST(len));\n}\n</code></pre><p>第三步，同步修改内建的字符串类、字典类、列表类的 len 方法。这里只列出了字符串类的实现。字典和列表也实现得也差不多，这里就不再赘述了。</p><pre><code class=\"language-c++\">HiObject* StringKlass::len(HiObject* obj) {\n&nbsp; &nbsp; return new HiInteger(obj-&gt;as&lt;HiString&gt;()-&gt;length());\n}\n</code></pre><p>经过了以上修改，前面的测试用例就可以顺利执行了。测试用例的最后，可以正确地打印二维向量的长度。</p><p>除了 len 之外，我还列出了其他几个方法，这些方法都会自动对应自定义类型里的特定方法，你可以看一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/91/773e3b48529868b77b2269bbaca59291.png?wh=1820x1082\" alt=\"图片\"></p><p>这个表里的 str 函数和 repr 函数的作用很接近。实际上，大多数自定义类，这两个函数的实现也是相同的。但这里也请你注意它们之间的细微区别。</p><p>首先，使用 print 函数打印一个对象时，虚拟机默认调用它的 str 方法，如果对象的类型里没有定义 str 方法，就继续调用 repr 方法。如果还没有定义，则打印对象的内存地址。</p><p>其次，str 方法更倾向于输出面向用户的信息，可读性尽量高。repr 方法则更倾向于输出面向开发者的信息，要尽可能地打印对象内部信息帮助开发者调试。</p><p>所以，我们可以使用对象的 str 方法和 repr 方法来修改 print 方法的逻辑，你可以看一下修改之后的代码。</p><pre><code class=\"language-c++\">void Klass::print(HiObject* x) {\n&nbsp; &nbsp; HiObject* func = x-&gt;getattr(ST(str));\n&nbsp; &nbsp; if (func != Universe::HiNone) {\n&nbsp; &nbsp; &nbsp; &nbsp; HiObject* s = Interpreter::get_instance()-&gt;call_virtual(func, nullptr);\n&nbsp; &nbsp; &nbsp; &nbsp; s-&gt;as&lt;HiString&gt;()-&gt;print();\n&nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; func = x-&gt;getattr(ST(repr));\n&nbsp; &nbsp; if (func != Universe::HiNone) {\n&nbsp; &nbsp; &nbsp; &nbsp; HiObject* r = Interpreter::get_instance()-&gt;call_virtual(func, nullptr);\n&nbsp; &nbsp; &nbsp; &nbsp; r-&gt;as&lt;HiString&gt;()-&gt;print();\n&nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; printf(\"&lt;object at %p&gt;\", x);\n}\n</code></pre><p>除了 str 和 repr 之外，表里的大多数函数的实现都很简单，你可以自己实现。</p><h2>支持特殊操作符</h2><p>可以重载的操作符，除了上节课所介绍的一元、二元操作符之外，还有一些特殊操作符。比如函数调用、取下标等操作，接下来，我们就继续重载这些特殊的操作符。</p><h3>函数调用操作符</h3><p>在 C++ 中，开发者可以重载 () 操作符，这样，就可以把对象当做函数一样调用了。STL 中的 Functor 正是依赖函数调用操作符重载才能够实现。</p><p>在 Python 中，开发者也可以通过在类中定义 <code>__call__</code> 方法来实现 () 操作符的重载，例如：</p><pre><code class=\"language-python\">class Functor(object):\n    def __init__(self):\n        pass\n        \n    def __call__(self):\n        print(\"calling.\")\n        \na = Functor()\na()\n</code></pre><p>在上述测试用例中，a 是一个普通对象，但是却可以像函数一样被调用。为了实现这个功能，我们需要实现 Klass 类的 call 方法。</p><pre><code class=\"language-c++\">HiObject* Klass::call(HiObject* x, HiList* args, HiDict* kwargs) {\n&nbsp; &nbsp; HiObject* callable = x-&gt;getattr(ST(call));\n\n&nbsp; &nbsp; if (callable == Universe::HiNone) {\n&nbsp; &nbsp; &nbsp; &nbsp; x-&gt;print();\n&nbsp; &nbsp; &nbsp; &nbsp; printf(\" is non-callable\\n\");\n&nbsp; &nbsp; &nbsp; &nbsp; assert(false);\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; return Interpreter::get_instance()-&gt;call_virtual(callable, args);\n}\n</code></pre><p>在原有的基础上，添加 call 方法是非常容易的，只需要在目标对象上查找 <code>__call__</code> 方法并调用它就可以了。</p><p>下面我们继续研究取下标操作符。</p><h3>取下标和取属性操作符</h3><p>取下标操作符是 []，Python 中也支持对这个操作符进行重载。另外，Python 也支持重载点号操作符，点号在 Python 中用于取属性。</p><p>在 Python 中，可以通过在类里定义 <code>__getitem__</code> 方法来实现 [] 操作符的重载，定义 <code>__getattr__</code> 方法来实现取属性操作符的重载。我们可以看一个例子。</p><pre><code class=\"language-python\">class A(object):\n&nbsp; &nbsp; def __init__(self, *args):\n&nbsp; &nbsp; &nbsp; &nbsp; self.attrs = dict()\n&nbsp; &nbsp; &nbsp; &nbsp; n = len(args)\n&nbsp; &nbsp; &nbsp; &nbsp; i = 0\n&nbsp; &nbsp; &nbsp; &nbsp; while (i &lt; n):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a = args[i]\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i += 1\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; b = args[i]\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i += 1\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.attrs[a] = b\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; def __getitem__(self, key):\n&nbsp; &nbsp; &nbsp; &nbsp; if key in self.attrs:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.attrs[key]\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return \"Error\"\n\n&nbsp; &nbsp; def __setitem__(self, key, value):\n&nbsp; &nbsp; &nbsp; &nbsp; self.attrs[key] = value\n\n&nbsp; &nbsp; def __delitem__(self, key):\n&nbsp; &nbsp; &nbsp; &nbsp; del self.attrs[key]\n\n&nbsp; &nbsp; def __str__(self):\n&nbsp; &nbsp; &nbsp; &nbsp; return \"object of A\"\n\na = A(\"hello\", \"hi\", \"how are you\", \"fine\")\nprint(a)\nprint(a[\"hello\"])\nprint(a[\"how are you\"])\na[\"one\"] = 1\nprint(a[\"one\"])\ndel a[\"one\"]\nprint(a[\"one\"])\nprint(a.attrs)\n</code></pre><p>中括号所对应的取下标操作会被翻译成 BINARY_SUBSCR 字节码，这个字节码的实现是调用 HiObject 的 subscr 方法。所以，我们只需要在 Klass 中实现这个方法就可以了。</p><pre><code class=\"language-c++\">HiObject* Klass::subscr(HiObject* x, HiObject* y) {\n&nbsp; &nbsp; HiList* args = new HiList();\n&nbsp; &nbsp; args-&gt;append(y);\n&nbsp; &nbsp; return find_and_call(x, args, ST(getitem));\n}\n</code></pre><p>相应的，如果要对下标进行赋值，所对应的字节码是 STORE_SUBSCR。重载下标赋值操作，需要在类定义中添加 <code>__setitem__</code> 方法，而删除下标操作，则需要添加 <code>__delitem__</code> 方法，我们也把这两个方法添加到 Klass 里。</p><pre><code class=\"language-c++\">void Klass::store_subscr(HiObject* x, HiObject* y, HiObject* z) {\n&nbsp; &nbsp; HiList* args = new HiList();\n&nbsp; &nbsp; args-&gt;append(y);\n&nbsp; &nbsp; args-&gt;append(z);\n&nbsp; &nbsp; find_and_call(x, args, ST(setitem));\n}\n\nvoid Klass::del_subscr(HiObject* x, HiObject* y) {\n&nbsp; &nbsp; HiList* args = new HiList();\n&nbsp; &nbsp; args-&gt;append(y);\n&nbsp; &nbsp; find_and_call(x, args, ST(delitem));\n}\n</code></pre><p>取下标的机制虽然特殊，但究其根源，与数值计算并没有什么区别。接下来我们继续研究取属性操作。不管是自定义类里的 <code>__getattr__</code> 方法，还是在虚拟机中实现 getattr 都必须十分小心，要避免进入无穷递归中。我们先看一个测试用例。</p><pre><code class=\"language-python\">class B(object):\n&nbsp; &nbsp; def __init__(self):\n&nbsp; &nbsp; &nbsp; &nbsp; self.keys = {}\n&nbsp;&nbsp;\n&nbsp; &nbsp; def __getattr__(self, k):&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; if k in self.keys:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.keys[k]\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return None\nb = B()\nprint(b.value)\n</code></pre><p>测试代码的最后一行是一个取对象属性的操作，前边我们介绍了，这个操作可以被 <code>__getattr__</code> 方法重载。因此执行这一行的时候，虚拟机就会转而调用 b 的 <code>__getattr__</code> 方法。</p><p>在这个方法里，又使用了一次取对象属性的操作，查找 self 对象的 keys 属性，这又会产生一次对 <code>__getattr__</code> 方法的调用。无穷递归调用就产生了，所以虚拟机很快就会崩溃退出。</p><p>实际上，不管是取下标操作，还是普通的数值计算，都可能写出无穷递归，只是那种情况相对少一些。而取对象属性的操作太常见，所以写出上面错误代码的可能性就更大一些。</p><p>下面我们再看一个正确的示例。</p><pre><code class=\"language-python\">keys = []\nvalues = []\n\nclass B(object):\n&nbsp; &nbsp; def __setattr__(self, k, v):\n&nbsp; &nbsp; &nbsp; &nbsp; if k in keys:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; index = keys.index(k)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; values[index] = v\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keys.append(k)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; values.append(v)\n\n&nbsp; &nbsp; def __getattr__(self, k):\n&nbsp; &nbsp; &nbsp; &nbsp; if k in keys:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; index = keys.index(k)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return values[index]\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return None\n\nb = B()\nb.foo = 1\nb.bar = 2\nprint(b.foo)\nprint(b.bar)\nb.foo = 3\nprint(b.foo)\n</code></pre><p>设置对象属性会被翻译成 STORE_ATTR（第 24 和 25 行），所以我们就在 Klass 中增加调用 <code>__setattr__</code> 的逻辑。Klass 中已经有 setattr 方法了，只需要在这个方法里增加重载的逻辑即可。</p><pre><code class=\"language-c++\">// setattr for normal object.\nHiObject* Klass::setattr(HiObject* obj, HiObject* x, HiObject* y) {\n    HiObject* func = obj-&gt;klass()-&gt;klass_dict()-&gt;get(ST(setattr));\n\n    // 如果未定义__setattr__方法，就直接放到对象的obj_dict中\n    if (func == Universe::HiNone) {\n        obj-&gt;obj_dict()-&gt;put(x, y);\n        return Universe::HiNone;\n    }\n\n    func = new MethodObject(func-&gt;as&lt;FunctionObject&gt;(), obj);\n    HiList* args = new HiList();\n    args-&gt;append(x);\n    args-&gt;append(y);\n    return Interpreter::get_instance()-&gt;call_virtual(func, args);\n}\n</code></pre><p>上述代码中，setattr 一开始就是判断 x 的类定义中是否有 <code>__setattr__</code> 方法。如果没有的话，就沿着原来的逻辑继续去对象的属性字典里查找。如果有这个方法，就通过 call_virtual 执行这个方法。</p><p>在测试用例里取对象上的 foo 属性（第 26 行），会被翻译为 LOAD_ATTR。我们需要在 Klass 的 getattr 方法中增加重载取属性操作的逻辑。</p><pre><code class=\"language-c++\">HiObject* Klass::getattr(HiObject* x, HiObject* y) {\n    HiObject* func = x-&gt;klass()-&gt;klass_dict()-&gt;get(ST(getattr));\n\n    // 如果类里定义了__getattr__方法，就先调用这个方法\n    if (func != Universe::HiNone) {\n        func = new MethodObject(func-&gt;as&lt;FunctionObject&gt;(), x);\n        HiList* args = new HiList();\n        args-&gt;append(y);\n        return Interpreter::get_instance()-&gt;call_virtual(func, args);\n    }\n\n    // 如果没有定义 __getattr__方法，优化去对象字典里找\n    if (x-&gt;obj_dict()-&gt;has_key(y)) {\n        return x-&gt;obj_dict()-&gt;get(y);\n    }\n\n    // 如果对象字典里也没有，就去类里找\n    HiObject* result = _klass_dict-&gt;get(y);\n    // Only klass attribute needs bind.\n    if (!MethodObject::is_method(result) &amp;&amp;\n        MethodObject::is_function(result)) {\n        result = new MethodObject(result-&gt;as&lt;FunctionObject&gt;(), x);\n    }\n\n    return result;\n}\n</code></pre><p>这段代码结合注释应该不难理解。到这里，取下标操作和取属性操作就都能支持了，编译执行测试用例，就可以打印出正确的值。</p><p>重载操作符还有很多知识，比如原位计算、右结合运算等。但根本性的问题都已经介绍完了，更多的方法重载你可以自己实现。</p><h2>实现类的继承</h2><p>这部分我们来实现类的继承，先看第一个例子。</p><pre><code class=\"language-python\">class A(object):\n&nbsp; &nbsp; def say(self):\n&nbsp; &nbsp; &nbsp; &nbsp; print(\"I am A\")\n\nclass B(A):\n&nbsp; &nbsp; def say(self):\n&nbsp; &nbsp; &nbsp; &nbsp; print(\"I am B\")\n\nclass C(A):\n&nbsp; &nbsp; pass\n\nb = B()\nc = C()\n\nb.say()&nbsp; &nbsp; # \"I am B\"\nc.say()&nbsp; &nbsp; # \"I am A\"\n</code></pre><p>代码中对象 c 的类型是 C，C 中没有定义 say 方法，虚拟机就会从它的超类中查找，发现 A 中有定义 say 方法，所以第 16 行的运行结果是打印 <code>\"I am A\"</code>。</p><p>而对象 b 的类型是 B，B 中定义了自己的 say 方法，虚拟机就会直接执行这个方法，所以第 15 行的运行结果是打印 <code>\"I am B\"</code>。</p><p>根据这个例子我们可以得到结论，Python 在调用某个对象的方法时，会先检查它所对应的类型中，是否定义了该方法。如果没有定义，就转而去查找它的父类，如果父类还是没有，就要继续查找它的祖先类，直到找到方法定义为止。</p><p>如果 Python 像 Java 语言那样只支持单继承，每个类只能有一个父类，那这个查找方法定义的过程也会非常简单。但实际上，Python 是支持多继承的。如果一个类有多个父类的时候，要想从父类中查找方法定义，应该按照怎样的顺序查找呢？</p><p>Python 在父类中查找方法的过程也被叫做<strong>方法解析</strong>的过程，这个查询父类的顺序就被叫做<strong>方法解析顺序</strong>（Method Resolution Order，MRO）。</p><p>Python 发展到今天经历了 3 种 MRO 算法，分别是：</p><ol>\n<li>从左往右，采用深度优先搜索（DFS）的算法，叫做旧式类的 MRO。</li>\n<li>从 Python 2.2 版本开始，新式类在采用深度优先搜索算法的基础上做了优化，解决菱形继承问题。</li>\n<li>Python 2.3 版本对新式类采用了 C3 算法。由于 Python 3.x 仅支持新式类，所以这个版本只使用 C3 算法。</li>\n</ol><p>Python 2.7 中所使用的基于深度优先搜索的算法，在我所写的《自己动手写Python虚拟机》中有论述，如果你感兴趣的话，可以去读一读，我们这个课程只关注 C3 算法。</p><h2>C3 算法</h2><p>如果 B 类型有 <code>class B(A):pass</code> 的继承关系，就记 B 的mro序列为 <code>[B,A]</code>。</p><p>如果 B 类型继承自多个基类 <code>class B(A1,A2,...,An): pass</code>，就记 B 的 mro 序列为：</p><pre><code class=\"language-plain\">mro(B) = [B] + merge(mro(A1), mro(A2),...,mro(An))\n</code></pre><p>其中，merge 操作用来合并 B 所有父类的 mro 序列。我们来看一下它的算法步骤。</p><ol>\n<li>遍历所有父类的 mro 序列，如果一个序列的第一个元素，在其他序列中也是第一个元素，或不在其他序列出现，那么这个元素就是一个合法的元素。</li>\n<li>如果找不到合法元素，说明类定义不合法，算法结束。</li>\n<li>从所有 mro 序列中删除第一步找到的合法元素，并把它合并到 B 类型的 mro 里。</li>\n<li>所有的非空 mro 序列重新组成一个序列，重复第一步的算法。直到所有 mro 序列都变成空序列。</li>\n</ol><p>你可以看一下我给出的几个定义。</p><pre><code class=\"language-python\">class A(object):pass\nclass B(object):pass\nclass C(object):pass\nclass E(A,B):pass\nclass F(B,C):pass\nclass G(E,F):pass\n</code></pre><p>A、B、C都继承自一个基类，所以 mro 序列依次为 [A, O]、[B, O]、[C, O]。计算 E 的 mro 序列的步骤是：</p><pre><code class=\"language-plain\">mro(E) = [E] + merge(mro(A), mro(B), [A, B])\n       = [E] + merge([A, O], [B, O], [A, B]) (1)\n       = [E, A] + merge([O], [B,O], [B])     (2)\n       = [E, A, B] + merge([O], [O])         (3)\n       = [E, A, B, O]\n</code></pre><p>公式（1）处，A是序列 [A, O] 中的第一个元素，在序列 [B, O] 中不出现，在序列 [A, B] 中也是第一个元素，所以从全体序列 ([A, O]、[B, O]、[A, B]) 中删除A，并把 A 合并到当前 mro 中，得到 [E, A]。</p><p>公式（2）处，O 是序列 [O] 中的第一个元素，但 O 在序列 [B, O] 中出现并且不是第一个元素，所以 O 不满足条件。继续查看 [B, O] 的第一个元素 B，B 满足条件，所以从全部序列中删除B，并将 B 合并到序列 [E, A] 中，得到 [E, A, B]。</p><p>我们再看一个例子。</p><pre><code class=\"language-python\">class X(object): pass\nclass Y(object): pass\nclass A(X,Y): pass\nclass B(Y,X): pass\nclass C(A, B): pass\n</code></pre><p>给这些类的定义套用 C3 算法，我们看得到的结果。</p><pre><code class=\"language-plain\">mro(X) = [X, O]\nmro(Y) = [Y, O]\nmro(A) = [A] + merge(mro(X), mro(Y))\n       = [A] + [X, O] + [Y, O]\n       = [A, X] + [O] + [Y, O]\n       = [A, X, Y] + [O] + [O]\n       = [A, X, Y, O]\nmro(B) = [B, Y, X, O]\n</code></pre><p>这个演算过程比较简单，我就不再解释了。接下来，我们重点关注 C 的 mro 序列的计算过程。</p><pre><code class=\"language-plain\">mro(C) = [C] + merge(mro(A), mro(B))\n       = [C] + merge([A, X, Y, O], [B, Y, X, O])\n       = [C, A] + merge([X, Y, O], [B, Y, X, O])\n       = [C, A, B] + merge([X, Y, O], [Y, X, O])\n</code></pre><p>演算到这一步的时候，就发生问题了，不管是第一个序列的首元素 X 还是第二个序列的首元素 Y，都不满足条件，所以算法无法使 merge 的各个序列变为空序列，只能报错退出。</p><p>由此可见，使用 C3 算法既可以很好地解决菱形继承的问题，也可以检查出继承顺序不一致的情况。接下来，我们就来实现这个算法。</p><h3>实现 C3 算法</h3><p>为了实现多继承，我们可以在 Klass 中定义 super 属性，它是一个列表，记录了某个类型的所有父类。同时为每个类型再创建一个属性，记录该类型的方法解析顺序，我们把这个属性起名为 _mro。</p><pre><code class=\"language-c++\">// [object/klass.hpp]\nclass Klass {\nprivate:\n&nbsp; &nbsp; HiList*&nbsp; &nbsp; &nbsp; &nbsp;_super;\n&nbsp; &nbsp; HiList*&nbsp; &nbsp; &nbsp; &nbsp;_mro;\n&nbsp; &nbsp; ...\npublic:\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; void add_super(Klass* x);\n&nbsp; &nbsp; void order_supers();\n\n&nbsp; &nbsp; HiList* super()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ return _super; }\n&nbsp; &nbsp; void set_super_list(HiList* x)&nbsp; &nbsp; &nbsp; &nbsp; { _super = x; }\n&nbsp; &nbsp; HiList* mro()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ return _mro; }\n\t...\n};\n\n// [object/klass.cpp]\nvoid Klass::add_super(Klass* klass) {\n&nbsp; &nbsp; if (_super == nullptr)\n&nbsp; &nbsp; &nbsp; &nbsp; _super = new HiList();\n\n&nbsp; &nbsp; _super-&gt;append(klass-&gt;type_object());\n}\n</code></pre><p>为了实现继承，我们在 Klass 里添加了 5 个方法，除了 order_super 之外的其他方法的实现，逻辑都非常简单，在代码中已经列出来了，你可以看一下。</p><p>order_super 方法是 C3 算法的具体实现，用来计算类型的 mro，我们来重点看一下它的代码。</p><pre><code class=\"language-c++\">HiList* Klass::linear(HiTypeObject* obj) {\n&nbsp; &nbsp; HiList* result = new HiList();\n&nbsp; &nbsp; HiList* mro = obj-&gt;mro();\n&nbsp; &nbsp; for (int i = 0; i &lt; mro-&gt;length(); i++) {\n&nbsp; &nbsp; &nbsp; &nbsp; result-&gt;append(mro-&gt;get(i));\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; return result;\n}\n\nHiList* Klass::merge(HiList* supers) {\n&nbsp; &nbsp; if (supers-&gt;empty()) {\n&nbsp; &nbsp; &nbsp; &nbsp; return new HiList();\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; for (int i = 0; i &lt; supers-&gt;length(); i++) {\n&nbsp; &nbsp; &nbsp; &nbsp; bool valid = true;\n&nbsp; &nbsp; &nbsp; &nbsp; // head = supers[i][0]\n&nbsp; &nbsp; &nbsp; &nbsp; HiTypeObject* head = supers-&gt;get(i)-&gt;as&lt;HiList&gt;()-&gt;get(0)-&gt;as&lt;HiTypeObject&gt;();\n&nbsp; &nbsp; &nbsp; &nbsp; for (int j = 0; j &lt; supers-&gt;length(); j++) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (j == i) continue;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // if head in supers[j][1:]\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (supers-&gt;get(j)-&gt;as&lt;HiList&gt;()-&gt;index(head) &gt; 0) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; valid = false;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; if (!valid) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; HiList* next = new HiList();\n&nbsp; &nbsp; &nbsp; &nbsp; for (int j = 0; j &lt; supers-&gt;length(); j++) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HiList* item = supers-&gt;get(j)-&gt;as&lt;HiList&gt;();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; item-&gt;remove(head);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!item-&gt;empty()) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; next-&gt;append(item);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; HiList* result = merge(next);\n&nbsp; &nbsp; &nbsp; &nbsp; result-&gt;insert(0, head);\n\n&nbsp; &nbsp; &nbsp; &nbsp; return result;\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; printf(\"Should not reach here\\n\");\n&nbsp; &nbsp; assert(false);\n&nbsp; &nbsp; return nullptr;\n}\n\nvoid Klass::order_supers() {\n&nbsp; &nbsp; if (_super == nullptr) {\n&nbsp; &nbsp; &nbsp; &nbsp; _mro = new HiList();\n&nbsp; &nbsp; &nbsp; &nbsp; _mro-&gt;append(_type_object);\n&nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; HiList* all = new HiList();\n&nbsp; &nbsp; for (int i = 0; i &lt; _super-&gt;length(); i++) {\n&nbsp; &nbsp; &nbsp; &nbsp; all-&gt;append(linear(_super-&gt;get(i)-&gt;as&lt;HiTypeObject&gt;()));\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; _mro = merge(all);\n&nbsp; &nbsp; _mro-&gt;insert(0, _type_object);\n&nbsp; &nbsp; _klass_dict-&gt;put(ST(mro), _mro);\n}\n</code></pre><p>order_supers 的作用是将本类型的所有父类的 mro 序列进行合并。变量 all 里记录了父类的 mro 序列（第 59 至 63 行）。</p><p>合并的具体动作是由 merge 方法完成的。merge 通过一个大循环来找到合法元素（第 16 行至 32 行）。如果所有序列都遍历完了，还没有找到合法元素，就会报错退出（第 47 至 49 行）。</p><p>如果找到合法元素，就把它从全部序列中删除，将剩下的序列再重新组成一个列表，再次调用 merge 方法进行合并（第 33 至 41 行）。同时，合法元素会被合并至结果列表中（第 42 行）。</p><p>整个算法全部结束以后，再把 mro 序列和 <code>__mro__ </code>这个字符串关联起来。这样，在程序中就可以通过类型的 <code>__mro__</code> 属性访问到这个列表了。</p><p>最后，我们要在每个类的初始化里完成 mro 的排序工作，以 HiList 类为例，你可以看一下它的代码。</p><pre><code class=\"language-c++\">void ListKlass::initialize() {\n    HiDict * klass_dict = new HiDict();\n    //...\n    set_klass_dict(klass_dict);\n    (new HiTypeObject())-&gt;set_own_klass(this);\n    set_name(new HiString(\"list\"));\n\n    add_super(ObjectKlass::get_instance());\n    order_supers();\n}\n</code></pre><p>而对于用户自定义类型，则应该在 klass 创建的时候构建它的 mro，也就是 create_klass 中，你可以自己添加。</p><p>最后，类的多继承对于方法的查找是有影响的，主要是在 getattr 中，如果在本类型中查找不到，还要去自己的 mro 列表中的类型里去查找，所以 getattr 就变成了这个样子。</p><pre><code class=\"language-c++\">HiObject* Klass::find_in_mro(HiObject* obj, HiString* name) {\n    HiObject* x = obj-&gt;klass()-&gt;klass_dict()-&gt;get(name);\n\n    if (x != Universe::HiNone) {\n        return x;\n    }\n\n    for (int i = 0; i &lt; obj-&gt;klass()-&gt;mro()-&gt;length(); i++) {\n        x = obj-&gt;klass()-&gt;mro()-&gt;get(i)-&gt;getattr(name);\n        if (x != Universe::HiNone) {\n            return x;\n        }\n    }\n\n    return x;\n}\n\nHiObject* Klass::getattr(HiObject* x, HiObject* y) {\n    HiObject* func = find_in_mro(x, ST(getattr));\n\n    // 如果类里定义了__getattr__方法，就先调用这个方法\n    if (func != Universe::HiNone) {\n        func = new MethodObject(func-&gt;as&lt;FunctionObject&gt;(), x);\n        HiList* args = new HiList();\n        args-&gt;append(y);\n        return Interpreter::get_instance()-&gt;call_virtual(func, args);\n    }\n\n    // 如果没有定义 __getattr__方法，就去对象字典里找\n    if (x-&gt;obj_dict()-&gt;has_key(y)) {\n        return x-&gt;obj_dict()-&gt;get(y);\n    }\n\n    // 如果对象字典里也没有，就去类里找\n    HiObject* result = find_in_mro(x, y-&gt;as&lt;HiString&gt;());\n    // Only klass attribute needs bind.\n    if (MethodObject::is_function(result) ||\n        MethodObject::is_native(result)) {\n        result = new MethodObject(result-&gt;as&lt;FunctionObject&gt;(), x);\n    }\n\n    return result;\n}\n</code></pre><p>经过不断地增加功能，我们最终将 getattr 的功能全部补齐了。</p><p>首先，虚拟机在对象所对应的类型中查找是否有 <code>__getattr__</code> 方法（第 19 行），如果找到了这个方法就直接调用这个方法。如果没有找到，就转而在对象字典里查找是否有 y 属性（第 30 至 32 行）。如果失败，再去对象所对应的类型中查找是否有 y 属性。这个逻辑就比较清晰了。</p><p>经过了这些改造以后，我们虚拟机的行为终于和 CPython 3.8 的行为一致了。开始时的例子也能正确执行了。</p><p>到此为止，我们的虚拟机中的对象系统就构建得差不多了，这为虚拟机的下一步开发奠定了坚实的基础，还有一些与对象系统相关的功能，比如异常的定义和处理等，我们等模块功能实现了以后再来添加。</p><h2>总结</h2><p>这节课我们先实现了内建方法重载，主要以 len、str 和 repr 三个函数为例，说明了如何实现内建方法重载。然后我们介绍了三个比较特殊的操作符。</p><ol>\n<li>第一个是 () 操作符，用于模拟函数调用的，如果一个对象定义了 <code>__call__</code> 方法，那么这个对象作为 CALL_FUNCTION 指令的操作数时，它的 <code>__call__</code> 方法就会被执行。</li>\n<li>第二个是下标操作符 []，分别使用 <code>__setitem__</code>、<code>__getitem__</code>、<code>__delitem__</code> 来支持设置、读取和删除操作。</li>\n<li>第三个是属性操作符点号，我们通过 <code>__getattr__</code> 和 <code>__setattr__</code> 方法来说明了如何进行对象属性的操作。<br>\n第三部分我们实现了 Python 的多继承，以及如何确定继承顺序。这部分，我们重点介绍了 C3 算法的原理和实现。</li>\n</ol><p>通过这四节课的努力，我们终于将对象系统构建得基本完备了。到目前为止，我们在写代码的时候，需要什么对象都是直接通过 new 操作符来创建的，从来没有释放过，这必然会带来大量的内存泄漏。从下一节课起，我们该把内存好好梳理一遍了。</p><h2>思考题</h2><p>多继承机制会如何影响 type、isinstance 等几个和类型相关的函数？应该如何改写才能使它们正确工作呢？欢迎你把你思考后的结果分享到评论区，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"20｜创建对象：支持对象创建和访问属性以完成基本对象系统","id":782504},"right":{"article_title":"22｜自动内存管理：把程序员从内存缺陷的海洋里解放出来","id":785277}},"comments":[{"had_liked":false,"id":396244,"user_name":"冯某","can_delete":false,"product_type":"c1","uid":3889476,"ip_address":"上海","ucode":"7E78ECA53DF453","user_header":"https://static001.geekbang.org/account/avatar/00/3b/59/44/727b90a8.jpg","comment_is_top":false,"comment_ctime":1733736795,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100761401,"comment_content":"记录一下","like_count":0},{"had_liked":false,"id":395432,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1730788150,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":2,"product_id":100761401,"comment_content":"学习打卡","like_count":0}]}