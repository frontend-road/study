{"id":190979,"title":"34 | 实战一（上）：通过一段ID生成器代码，学习如何发现代码质量问题","content":"<p>在前面几节课中，我们讲了一些跟重构相关的理论知识，比如：持续重构、单元测试、代码的可测试性、解耦、编码规范。用一句话总结一下，重构就是发现代码质量问题，并且对其进行优化的过程。</p><p>前面的内容相对还是偏理论。今天，我就借助一个大家都很熟悉的ID生成器代码，给你展示一下重构的大致过程。整个内容分为两节课。这一节课我们讲述如何发现代码质量问题，下一节课讲述如何针对发现的质量问题，对其进行优化，将它从“能用”变得“好用”。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>ID生成器需求背景介绍</h2><p>“ID”中文翻译为“标识（Identifier）”。这个概念在生活、工作中随处可见，比如身份证、商品条形码、二维码、车牌号、驾照号。聚焦到软件开发中，ID常用来表示一些业务信息的唯一标识，比如订单的单号或者数据库中的唯一主键，比如地址表中的ID字段（实际上是没有业务含义的，对用户来说是透明的，不需要关注）。</p><p>假设你正在参与一个后端业务系统的开发，为了方便在请求出错时排查问题，我们在编写代码的时候会在关键路径上打印日志。某个请求出错之后，我们希望能搜索出这个请求对应的所有日志，以此来查找问题的原因。而实际情况是，在日志文件中，不同请求的日志会交织在一起。如果没有东西来标识哪些日志属于同一个请求，我们就无法关联同一个请求的所有日志。</p><!-- [[[read_end]]] --><p>这听起来有点像微服务中的调用链追踪。不过，微服务中的调用链追踪是服务间的追踪，我们现在要实现的是服务内的追踪。</p><p>借鉴微服务调用链追踪的实现思路，我们可以给每个请求分配一个唯一ID，并且保存在请求的上下文（Context）中，比如，处理请求的工作线程的局部变量中。在Java语言中，我们可以将ID存储在Servlet线程的ThreadLocal中，或者利用Slf4j日志框架的MDC（Mapped Diagnostic Contexts）来实现（实际上底层原理也是基于线程的ThreadLocal）。每次打印日志的时候，我们从请求上下文中取出请求ID，跟日志一块输出。这样，同一个请求的所有日志都包含同样的请求ID信息，我们就可以通过请求ID来搜索同一个请求的所有日志了。</p><p>好了，需求背景我们已经讲清楚了，至于具体如何实现整个需求，我就不展开来讲解了。如果你感兴趣的话，可以自己试着去设计实现一下。我们接下来只关注其中生成请求ID这部分功能的开发。</p><h2>一份“能用”的代码实现</h2><p>假设leader让小王负责这个ID生成器的开发。对于稍微有点开发经验的程序员来说，实现这样一个简单的ID生成器，并不是件难事。所以，小王很快就完成了任务，将代码写了出来，具体如下所示：</p><pre><code>public class IdGenerator {\n  private static final Logger logger = LoggerFactory.getLogger(IdGenerator.class);\n\n  public static String generate() {\n    String id = &quot;&quot;;\n    try {\n      String hostName = InetAddress.getLocalHost().getHostName();\n      String[] tokens = hostName.split(&quot;\\\\.&quot;);\n      if (tokens.length &gt; 0) {\n        hostName = tokens[tokens.length - 1];\n      }\n      char[] randomChars = new char[8];\n      int count = 0;\n      Random random = new Random();\n      while (count &lt; 8) {\n        int randomAscii = random.nextInt(122);\n        if (randomAscii &gt;= 48 &amp;&amp; randomAscii &lt;= 57) {\n          randomChars[count] = (char)('0' + (randomAscii - 48));\n          count++;\n        } else if (randomAscii &gt;= 65 &amp;&amp; randomAscii &lt;= 90) {\n          randomChars[count] = (char)('A' + (randomAscii - 65));\n          count++;\n        } else if (randomAscii &gt;= 97 &amp;&amp; randomAscii &lt;= 122) {\n          randomChars[count] = (char)('a' + (randomAscii - 97));\n          count++;\n        }\n      }\n      id = String.format(&quot;%s-%d-%s&quot;, hostName,\n              System.currentTimeMillis(), new String(randomChars));\n    } catch (UnknownHostException e) {\n      logger.warn(&quot;Failed to get the host name.&quot;, e);\n    }\n\n    return id;\n  }\n}\n</code></pre><p>上面的代码生成的ID示例如下所示。整个ID由三部分组成。第一部分是本机名的最后一个字段。第二部分是当前时间戳，精确到毫秒。第三部分是8位的随机字符串，包含大小写字母和数字。尽管这样生成的ID并不是绝对唯一的，有重复的可能，但事实上重复的概率非常低。对于我们的日志追踪来说，极小概率的ID重复是完全可以接受的。</p><pre><code>103-1577456311467-3nR3Do45\n103-1577456311468-0wnuV5yw\n103-1577456311468-sdrnkFxN\n103-1577456311468-8lwk0BP0\n</code></pre><p>不过，在我看来，像小王的这份代码只能算得上“能用”，勉强及格。我为啥这么说呢？这段代码只有短短不到40行，里面却有很多值得优化的地方。你可以先思考一下，在纸上试着罗列一下这段代码存在的问题，然后再对比来看我下面的讲解。</p><h2>如何发现代码质量问题？</h2><p>从大处着眼的话，我们可以参考之前讲过的代码质量评判标准，看这段代码是否可读、可扩展、可维护、灵活、简洁、可复用、可测试等等。落实到具体细节，我们可以从以下几个方面来审视代码。</p><ul>\n<li>目录设置是否合理、模块划分是否清晰、代码结构是否满足“高内聚、松耦合”？</li>\n<li>是否遵循经典的设计原则和设计思想（SOLID、DRY、KISS、YAGNI、LOD等）？</li>\n<li>设计模式是否应用得当？是否有过度设计？</li>\n<li>代码是否容易扩展？如果要添加新功能，是否容易实现？</li>\n<li>代码是否可以复用？是否可以复用已有的项目代码或类库？是否有重复造轮子？</li>\n<li>代码是否容易测试？单元测试是否全面覆盖了各种正常和异常的情况？</li>\n<li>代码是否易读？是否符合编码规范（比如命名和注释是否恰当、代码风格是否一致等）？</li>\n</ul><p>以上是一些通用的关注点，可以作为常规检查项，套用在任何代码的重构上。除此之外，我们还要关注代码实现是否满足业务本身特有的功能和非功能需求。我罗列了一些比较有共性的问题，如下所示。这份列表可能还不够全面，剩下的需要你针对具体的业务、具体的代码去具体分析。</p><ul>\n<li>代码是否实现了预期的业务需求？</li>\n<li>逻辑是否正确？是否处理了各种异常情况？</li>\n<li>日志打印是否得当？是否方便debug排查问题？</li>\n<li>接口是否易用？是否支持幂等、事务等？</li>\n<li>代码是否存在并发问题？是否线程安全？</li>\n<li>性能是否有优化空间，比如，SQL、算法是否可以优化？</li>\n<li>是否有安全漏洞？比如输入输出校验是否全面？</li>\n</ul><p><strong>现在，对照上面的检查项，我们来看一下，小王编写的代码有哪些问题。</strong></p><p>首先，IdGenerator的代码比较简单，只有一个类，所以，不涉及目录设置、模块划分、代码结构问题，也不违反基本的SOLID、DRY、KISS、YAGNI、LOD等设计原则。它没有应用设计模式，所以也不存在不合理使用和过度设计的问题。</p><p>其次，IdGenerator设计成了实现类而非接口，调用者直接依赖实现而非接口，违反基于接口而非实现编程的设计思想。实际上，将IdGenerator设计成实现类，而不定义接口，问题也不大。如果哪天ID生成算法改变了，我们只需要直接修改实现类的代码就可以。但是，如果项目中需要同时存在两种ID生成算法，也就是要同时存在两个IdGenerator实现类。比如，我们需要将这个框架给更多的系统来使用。系统在使用的时候，可以灵活地选择它需要的生成算法。这个时候，我们就需要将IdGenerator定义为接口，并且为不同的生成算法定义不同的实现类。</p><p>再次，把IdGenerator的generate()函数定义为静态函数，会影响使用该函数的代码的可测试性。同时，generate()函数的代码实现依赖运行环境（本机名）、时间函数、随机函数，所以generate()函数本身的可测试性也不好，需要做比较大的重构。除此之外，小王也没有编写单元测试代码，我们需要在重构时对其进行补充。</p><p>最后，虽然IdGenerator只包含一个函数，并且代码行数也不多，但代码的可读性并不好。特别是随机字符串生成的那部分代码，一方面，代码完全没有注释，生成算法比较难读懂，另一方面，代码里有很多魔法数，严重影响代码的可读性。在重构的时候，我们需要重点提高这部分代码的可读性。</p><p><strong>刚刚我们参照跟业务本身无关的、通用的代码质量关注点，对小王的代码进行了评价。现在，我们再对照业务本身的功能和非功能需求，重新审视一下小王的代码。</strong></p><p>前面我们提到，虽然小王的代码生成的ID并非绝对的唯一，但是对于追踪打印日志来说，是可以接受小概率ID冲突的，满足我们预期的业务需求。不过，获取hostName这部分代码逻辑貌似有点问题，并未处理“hostName为空”的情况。除此之外，尽管代码中针对获取不到本机名的情况做了异常处理，但是小王对异常的处理是在IdGenerator内部将其吐掉，然后打印一条报警日志，并没有继续往上抛出。这样的异常处理是否得当呢？你可以先自己思考一下，我们把这部分内容放到第36、37讲中具体讲解。</p><p>小王代码的日志打印得当，日志描述能够准确反应问题，方便debug，并且没有过多的冗余日志。IdGenerator只暴露一个generate()接口供使用者使用，接口的定义简单明了，不存在不易用问题。generate()函数代码中没有涉及共享变量，所以代码线程安全，多线程环境下调用generate()函数不存在并发问题。</p><p>性能方面，ID的生成不依赖外部存储，在内存中生成，并且日志的打印频率也不会很高，所以小王的代码在性能方面足以应对目前的应用场景。不过，每次生成ID都需要获取本机名，获取主机名会比较耗时，所以，这部分可以考虑优化一下。还有，randomAscii的范围是0～122，但可用数字仅包含三段子区间（0~9，a~z，A~Z），极端情况下会随机生成很多三段区间之外的无效数字，需要循环很多次才能生成随机字符串，所以随机字符串的生成算法也可以优化一下。</p><p><strong>刚刚我们还讲到，有一些代码质量问题不具有共性，我们没法一一罗列，需要你针对具体的业务、具体的代码去具体分析。那像小王的这份代码，你还能发现有哪些具体问题吗？</strong></p><p>在generate()函数的while循环里面，三个if语句内部的代码非常相似，而且实现稍微有点过于复杂了，实际上可以进一步简化，将这三个if合并在一起。具体如何来做，我们留在下一节课中讲解。</p><p>今天的知识内容我们讲到这里其实就差不多了。那跟随我看到这里，你有没有觉得，你的内功加深了很多呢？之前看到一段代码，你想要重构，但不知道该如何入手，也不知道该如何评价这段代码写得好坏，更不知道该如何系统、全面地进行分析。而现在，你可以很轻松地罗列出这段代码的质量缺陷，并且做到有章可循、全面系统、无遗漏。之所以现在能做到这样，那是得益于前面很多理论知识的学习和铺垫。所谓“会者不难，难者不会”，其实就是这个道理！</p><p>如果我们没有前面n多知识点的铺垫，比如，面向对象和面向过程的区别、面向对象的四大特性、面向过程编程的弊端以及如何控制弊端带来的副作用、需求分析方法、类的设计思路、类之间的关系、接口和抽象类的区别、各种设计原则和思想等等，我相信很多人都不能完美地解决今天的问题。</p><p>那你可能要说了，今天这段代码并没有涉及之前所有的知识点啊？你说得没错。但是，<strong>如果没有知识点的全面积累，我们就无法构建出大的知识框架，更不知道知识的边界在哪里，也就无法形成系统的方法论。即便你能歪打误撞回答全面，也不会像现在这样对自己的答案如此自信和笃定。</strong></p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们来一块总结回顾一下，你需要重点掌握的内容。</p><p>今天我们其实就重点讲了一个问题，那就是，如何发现代码质量问题？这其实是我整理的一个发现代码质量问题的checklist。之后，你在review自己的代码时，可以参考这两个checklist来进行全面的review。</p><p>首先，从大处着眼的话，我们可以参考之前讲过的代码质量评判标准，看代码是否可读、可扩展、可维护、灵活、简洁、可复用、可测试等。落实到具体细节，我们可以从以下7个方面来审视代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/04/c9/041e22cac6ce2ba3481e246c119adfc9.jpg?wh=1983*1083\" alt=\"\"></p><p>这些都是一些通用的关注点，可以作为一些常规检查项，套用在任何代码的重构上。除此之外，我们还要关注代码实现是否满足业务本身特有的功能和非功能需求。一些比较共性的关注点如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/98/98/9894233257994a69102afa960692ce98.jpg?wh=1983*1083\" alt=\"\"></p><h2>课堂讨论</h2><p>在今天的代码中，打印日志的Logger对象被定义为static final的，并且在类内部创建，这是否影响到IdGenerator类代码的可测试性？是否应该将Logger对象通过依赖注入的方式注入到IdGenerator类中呢？</p><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":173202,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1579476419,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"705954112963","product_id":100039001,"comment_content":"争哥，老实说，这个小王是不是曾经的你","like_count":165},{"had_liked":false,"id":173244,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1579484402,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"203442947314","product_id":100039001,"comment_content":"<br>设计模式_34<br>Logger的方法一般不会有未决行为，不影响可测试性，不用依赖注入。<br><br>以前看代码质量是看感觉，现在开始有章法了。","like_count":48,"discussions":[{"author":{"id":1220273,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9e/b1/758f2fe7.jpg","nickname":"香","note":"","ucode":"121D6CECECEEC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340239,"discussion_content":"如果你的Log是打印在远程服务器上，那我理解整个用法就不是这样了，一般如果我的日志要收集专门的服务器，说实话我也不会在我的代码里去做这个事情，还是直接打印到本地，然后再考虑如何收集，至于如何收集，那又是其它系统设计的问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609934897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","nickname":"麋鹿在泛舟","note":"","ucode":"1379CADA08688E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180070,"discussion_content":"为啥一定没有未决行为呢，如果这个Log系统打印在远程服务器上，那就涉及到网络传输。如果在单元测试里面构造异常场景，Log这里就走不下去了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582274758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","nickname":"麋鹿在泛舟","note":"","ucode":"1379CADA08688E","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":181389,"discussion_content":"其实，我说的是一般没有未决行为。\n\n不过你说的场景如何写单元测试倒是挺有意思的，我觉得\n1. 肯定要异步写。\n2. 应该也要先写到本地buffer，然后以一定的条件出发buffer写到远程。\n\n如果按照上面两条的思路，那么网络的未决行为应该在logger的单元测试里覆盖(需要有重发机制)，其他业务(只是用到logger)的单元测试也要覆盖这个case吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582367100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180070,"ip_address":""},"score":181389,"extra":""},{"author":{"id":2142423,"avatar":"","nickname":"Geek_7e0e83","note":"","ucode":"554DEE2AAAE33C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564131,"discussion_content":"我理解是不用的。那个是logger的事情。和使用方无关，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650165115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":181389,"ip_address":""},"score":564131,"extra":""}]}]},{"had_liked":false,"id":173248,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1579485483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"181968111915","product_id":100039001,"comment_content":"我要把这个checklist打印出来贴桌子上","like_count":43},{"had_liked":false,"id":174103,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1579965835,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"113249115531","product_id":100039001,"comment_content":"这个logger没有未决行为，不影响可测试性。我之前的一篇文章里提到过，将logger对象设置成static的原因是确保日志对象每个类一份、设置成final的原因是避免日志对象在运行时被修改。https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;1OpvN8_dzIDWYBDiICU6yw","like_count":27,"discussions":[{"author":{"id":1085200,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/10/f9151d58.jpg","nickname":"Java知其所以然","note":"","ucode":"DC17FC7A7E42D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410053,"discussion_content":"从批判性思维的角度来看，为什么要避免 logger 在运行时被修改？我觉得任何的动态变更都是有很大风险的，所以一个 logger 在系统启动后就只干好当前类日志信息的记录。如果想记录其他类日志信息，那就新搞一个 logger，而不是去改目前已有的一个 logger。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635582689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173863,"user_name":"氧气🌙 🐟 🌺","can_delete":false,"product_type":"c1","uid":1591015,"ip_address":"","ucode":"8E23C210A9F09E","user_header":"https://static001.geekbang.org/account/avatar/00/18/46/e7/e20279ea.jpg","comment_is_top":false,"comment_ctime":1579744896,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"96069025408","product_id":100039001,"comment_content":"1.split效率较低<br>2.随机字符的生成可用固定数组随机取数:<br>\t\tint count = 0;<br>\t\tString random = &quot;&quot;;<br>\t\tchar[] doc = { &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;,&#39;d&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39; };<br>\t\twhile (count &lt; 8) {<br>\t\t\tint index = (int) (Math.random() * doc.length);<br>\t\t\trandom = random + (doc[index]);<br>\t\t\tcount++;<br>\t\t}<br>\t\tSystem.out.println(random);","like_count":23,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588907,"discussion_content":"稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664200396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222360,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1590759945,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"83195138569","product_id":100039001,"comment_content":"【设计模式笔记34】20200529<br>今天代码质量自查手册很实用，我看了评论有同学说要打印出来之类的，我觉得好东西就应该第一时间消化并想想怎么内化为自己的实践。结合前面学的设计原则和质量手册，我想了如下问题：<br>1、分了哪些模块，每个模块负责的事情是什么，满足单一职责么<br>2、具体某个模块分了哪些包，每个包放什么样的类，分类是否合理重复<br>3、具体到某个类，命名是否清晰简单，注释是否包含做什么、为什么做、如何做，API是否有如何用<br>4、类的属性有哪些，是否有魔数，属性结构是否统一，是否有非关联的属性，是否有大函数，每个函数的职责是否单一，某些函数是否可复用和抽象，是否可读<br>5、是否使用了设计模式，使用了什么设计模式，是否可以不用，如果非要用带来的好处是什么以及不用带来的坏处<br>6、如果要新增或者修改功能是否好扩展，是否满足开闭<br>7、某些函数是否可以复用，是否有现成的工具，强烈建议每个团队内部都有一个工具包<br>8、代码是否有异常会影响原有逻辑么，如果有怎么解决，想想兜底或者降级方案<br>9、是否有并发问题，如果出现了会有什么影响，怎么解决<br>10、代码是否有测试用例，是否覆盖了正常合异常的情况","like_count":20},{"had_liked":false,"id":173238,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1579483608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"70298960344","product_id":100039001,"comment_content":"争哥这一节跟马丁那本&lt;重构&gt;的第一章有异曲同工之妙。<br>如果大家觉得意犹未尽，可以尝试动手去学学重构的第一章，然后动手实践一下🤪","like_count":16},{"had_liked":false,"id":173232,"user_name":"seckiller","can_delete":false,"product_type":"c1","uid":1540757,"ip_address":"","ucode":"CCA66F155A2022","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er3Ey0Uq2w4wDUKbLgqUHIkeH9oYeG2KW92CvBgYviczRMdbk6xxFO8mxMOVxGBozUUZDyfLKEhFFA/132","comment_is_top":false,"comment_ctime":1579482972,"is_pvip":false,"replies":[{"id":"67731","content":"这节课里的代码不就是吗","user_name":"作者回复","comment_id":173232,"uid":"1190123","ip_address":"","utype":1,"ctime":1580115588,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"48824123228","product_id":100039001,"comment_content":"王争大佬以后课多带点实战代码","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482004,"discussion_content":"这节课里的代码不就是吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580115588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207940,"user_name":"傑","can_delete":false,"product_type":"c1","uid":1581251,"ip_address":"","ucode":"9AD091143802D2","user_header":"https://static001.geekbang.org/account/avatar/00/18/20/c3/cfc7fa87.jpg","comment_is_top":false,"comment_ctime":1587219389,"is_pvip":true,"discussion_count":5,"race_medal":1,"score":"44536892349","product_id":100039001,"comment_content":"为什么说静态方法会影响代码的可测试性？","like_count":10},{"had_liked":false,"id":173204,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1579476803,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"27349280579","product_id":100039001,"comment_content":"slf4j本身已经支持的不同Logger的实现，配合lombok，自己直接定义static logger是没有必要的，可以替换掉。Logger本身并不是业务需求关注的点，也不是非功能性需求特别关注的点，没必要为了依赖注入而注入，更何况Logger本身可以通过配置的方式改变处理log的方式，已经很灵活了。","like_count":6,"discussions":[{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303629,"discussion_content":"建议少用lombok","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599317696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1257750,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/16/f2269e73.jpg","nickname":"better","note":"","ucode":"2B9BCCED753D7F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330085,"discussion_content":"为什么","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606529390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303629,"ip_address":""},"score":330085,"extra":""}]}]},{"had_liked":false,"id":256983,"user_name":"天马行空","can_delete":false,"product_type":"c1","uid":1740810,"ip_address":"","ucode":"5B019ABAFD1716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/90/0a/4d161db0.jpg","comment_is_top":false,"comment_ctime":1603804821,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23078641301","product_id":100039001,"comment_content":"checklist很重要，很多人会写代码，写完之后不知道check什么，说白了就是不知道哪里写得不好，要重构，觉得可用就ok了，没什么可提高的了，不追求提升，这个可以给将来的新人分享，非常好！","like_count":5,"discussions":[{"author":{"id":1085659,"avatar":"https://static001.geekbang.org/account/avatar/00/10/90/db/8429cdfa.jpg","nickname":"Kevin","note":"","ucode":"588EBC835D34B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555285,"discussion_content":"小马哥，有没有坚持带领团队code review？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646834432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173433,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1579534482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23054370962","product_id":100039001,"comment_content":"学完这篇文章后，体会到之前学习的东西逐渐影响到自己后面的学习。这也验证了“你努力走过的路，每一步都算数”。在读文章的过程中，自己也思考了文中提供的代码有哪些问题，但是在读完文章后，发现自己并没有像文章中罗列的那套路来思考，自己都是按照之前学习的知识想到一点是一点，没有条理，没有章法。这也提醒了我该回炉重新去回顾以前学过的知识，要不断的进行思考总结将它们在自己的大脑里留下更深的记忆，并产生相关的连接。文中罗列的两个checkList，个人感觉很好用，通过这两个checkList，从“通用的代码关注点”和“业务功能、非功能需求”这两个维度思考将之前学习到的知识点都串联起来了，使我们能够学以致用。回顾自己以前在看自己的代码和别人的代码的时候，只是简单的看一些命名是否规范，是否可读等。感觉有内功又深了一层的感觉。<br>对于课堂讨论，Logger对象，个人觉得并不影响测试性，它只是一个辅助手段用于打印日志。也没必要通过依赖注入的方式构造对象，这一点耦合还是可以接受的。使用依赖注入为了是解耦，将依赖类在外部创建好，通过构造函数，函数参数方式传递来给类使用。","like_count":6},{"had_liked":false,"id":173286,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1579494636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23054331116","product_id":100039001,"comment_content":"很好的一篇checklist，算是对我们前边学的整理起来了。棒棒。","like_count":5},{"had_liked":false,"id":173245,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1579484700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14464386588","product_id":100039001,"comment_content":"没有必要，不需要在这里测试 logger","like_count":3},{"had_liked":false,"id":173212,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1579479853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14464381741","product_id":100039001,"comment_content":"课堂讨论<br>    日志系统设计属非业务相关模块，从可复用性，单一职责，高内聚低耦合考虑，最好设计成单独模块，以便其他类复用！<br>    Logger对象是一个单例全局对象才合理，如果通过依赖注入到IdGenerator中就显得有点多余了！","like_count":3},{"had_liked":false,"id":246420,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1599317623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189252215","product_id":100039001,"comment_content":"Id生成器认为还存在一个问题，就是算法逻辑步骤不清晰，实际上是四步：获取hostName、生成随机字符、获取当前时间戳、组装Id。可以通过将generate方法切分成更小的代码块，小的代码块中负责单一的算法逻辑，由generate函数进行组装，这样算法步骤逻辑要清晰一点，阅读的时候也不会被具体的算法细节带跑","like_count":2},{"had_liked":false,"id":183326,"user_name":"吕伟","can_delete":false,"product_type":"c1","uid":1110096,"ip_address":"","ucode":"A443C94A717AD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/50/c348c2ea.jpg","comment_is_top":false,"comment_ctime":1582994811,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"10172929403","product_id":100039001,"comment_content":"提问：为什么说静态函数会影响使用该函数的代码的可测试性。","like_count":2,"discussions":[{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270835,"discussion_content":"因为静态函数在测试的时候不方便mock","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590062472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2234620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","nickname":"江南一笑","note":"","ucode":"E38938A1178827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377645,"discussion_content":"为什么不方便mock","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622745001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":270835,"ip_address":""},"score":377645,"extra":""},{"author":{"id":2733574,"avatar":"https://static001.geekbang.org/account/avatar/00/29/b6/06/cd1eaa49.jpg","nickname":"小王在努力","note":"","ucode":"A324EF87198905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2234620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","nickname":"江南一笑","note":"","ucode":"E38938A1178827","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392963,"discussion_content":"你写一个静态方法，里面你随便new几个对象，然后针对该静态方法写个单元测试，mock此方法依赖的那几个new出来的对象，用反转依赖的方式mock再试试，当场难受。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631191606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":377645,"ip_address":""},"score":392963,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588531,"discussion_content":"具体的回答应该是：因为不方便mock。为什么不方便mock？因为静态方法不容易被重写。而mock的本质是基于动态代理生成要mock类的方法，而静态方法本质就是反OO编程的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663818372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2278659,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TUMtkaIMdbFDS28AhjrQcqOhiapNvHyPMApz9QoZZkShZmomJRh6GX2aL2YeSMg4SicdydzdWxXZOZz49HNS9EtA/132","nickname":"Windqiu","note":"","ucode":"EF78D3CF73BCBB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363502,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617204322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174981,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1580486285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170420877","product_id":100039001,"comment_content":"新年第一卡","like_count":2},{"had_liked":false,"id":173984,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1579847532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169782124","product_id":100039001,"comment_content":"真干货，妙啊","like_count":2},{"had_liked":false,"id":173899,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579768532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169703124","product_id":100039001,"comment_content":"打卡，这个是后续可以打印出来，对代码进行检测<br>如何发现代码质量问题：<br>大的方向是否可读、可扩展、可维护、灵活、简洁、可复用、可测试<br>具体落实，通用的关注点有：<br>1）目录设置是否合理、模块划分是否清晰、代码结构是否满足“高内聚、松耦合”？<br>2）是否遵循经典的设计原则和设计思想（SOLID、DRY、KISS、YAGNI、LOD 等）？<br>3）设计模式是否应用得当？是否有过度设计？<br>4）代码是否容易扩展？如果要添加新功能，是否容易实现？<br>5）代码是否可以复用？是否可以复用已有的项目代码或类库？是否有重复造轮子？<br>6）代码是否容易测试？单元测试是否全面覆盖了各种正常和异常的情况？<br>7）代码是否易读？是否符合编码规范（比如命名和注释是否恰当、代码风格是否一致等）？<br><br>关于业务的一些通用关注点：<br>1）代码是否实现了预期的业务需求？<br>2）逻辑是否正确？是否处理了各种异常情况？<br>3）日志打印是否得当？是否方便 debug 排查问题？<br>4）接口是否易用？是否支持幂等、事务等？<br>5）代码是否存在并发问题？是否线程安全？<br>6）性能是否有优化空间，比如，SQL、算法是否可以优化？<br>7）是否有安全漏洞？比如输入输出校验是否全面？","like_count":2},{"had_liked":false,"id":173260,"user_name":"此鱼不得水","can_delete":false,"product_type":"c1","uid":1257453,"ip_address":"","ucode":"95268E823FB4D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ed/a87bb8fa.jpg","comment_is_top":false,"comment_ctime":1579489080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169423672","product_id":100039001,"comment_content":"1.日志并不会影响可测试性<br>2.没必要注入","like_count":2},{"had_liked":false,"id":173210,"user_name":"0bug","can_delete":false,"product_type":"c1","uid":1050335,"ip_address":"","ucode":"CADCC882F31784","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/df/60126ff3.jpg","comment_is_top":false,"comment_ctime":1579479736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169414328","product_id":100039001,"comment_content":"catch包裹的代码太多了","like_count":2},{"had_liked":false,"id":259720,"user_name":"红豆成香","can_delete":false,"product_type":"c1","uid":1488601,"ip_address":"","ucode":"FB8FBB639B4BA6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","comment_is_top":false,"comment_ctime":1604819550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899786846","product_id":100039001,"comment_content":"老师最后说的“面向对象和面向过程的区别、面向对象的四大特性、面向过程编程的弊端以及如何控制弊端带来的副作用、需求分析方法、类的设计思路、类之间的关系、接口和抽象类的区别、各种设计原则和思想”，自己都思考一下，遇到自己模糊的再回去看看","like_count":1},{"had_liked":false,"id":173424,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1579532257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874499553","product_id":100039001,"comment_content":"打卡✔","like_count":1},{"had_liked":false,"id":173236,"user_name":"一道阳光","can_delete":false,"product_type":"c1","uid":1239557,"ip_address":"","ucode":"F35207CCCEC6E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/05/c0d8014d.jpg","comment_is_top":false,"comment_ctime":1579483423,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5874450719","product_id":100039001,"comment_content":"我做的项目开发都是这样定义的，这个有问题吗？","like_count":1,"discussions":[{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143127,"discussion_content":"我也是\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579491310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173228,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1579482321,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5874449617","product_id":100039001,"comment_content":"不必要把logger依赖注入进去，logger是可以直接初始化的业务无关的，不依赖于外部接口，不影响单元测试，可以忽略掉，所以不需要改成依赖注入的。","like_count":1},{"had_liked":false,"id":173223,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1579481712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874449008","product_id":100039001,"comment_content":"滴滴。打卡～<br>","like_count":1},{"had_liked":false,"id":350300,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1656763737,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656763737","product_id":100039001,"comment_content":"不太敢重构，出过好几次问题。。","like_count":1},{"had_liked":false,"id":347736,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1654362157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654362157","product_id":100039001,"comment_content":"静态代码的如果没有其他依赖的话可测性是ok的，但是依赖的话会导致无法mock","like_count":0},{"had_liked":false,"id":338471,"user_name":"鹏","can_delete":false,"product_type":"c1","uid":1528796,"ip_address":"","ucode":"5E0F60BBA91129","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/dc/3a16bb1e.jpg","comment_is_top":false,"comment_ctime":1647513522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647513522","product_id":100039001,"comment_content":"想请问下比如进销存系统的入库单审核，一个审核里有涉及多个数据库操作，比如字段验证，更新商品库存，插入库存记录表，现在全部放在一个方法里虽然方便但是不符合单一职业，但是分开多个方法又有很多公用的对象，请教各位是怎么处理的","like_count":0},{"had_liked":false,"id":324544,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638496058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638496058","product_id":100039001,"comment_content":"1. 获取主机名和随机字符串 这两玩意可以封装细粒度函数，避免我读代码迷失在细节。看着真费劲<br>并且没有注释，更费劲了。 <br>2. 没有测试用例，并且是静态 主要是看测试方法，如果需要测试生成的ID和预期是否匹配 那么这个随机字符串 和 时间戳 就得外部mock 进去<br>3. 建议还是基于接口，这玩意就算现在没有2个实现类 但是这个基于接口个人认为是一个好的选择<br>4.  接着看王老师的分析，说 魔法数字 是否线程安全这些都是我没有考虑到的 学到了 <br>","like_count":0},{"had_liked":false,"id":323041,"user_name":"絆","can_delete":false,"product_type":"c1","uid":1618328,"ip_address":"","ucode":"52D965461314DB","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","comment_is_top":false,"comment_ctime":1637715447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637715447","product_id":100039001,"comment_content":"争哥, 我现在负责公司之前开发的一个项目, 项目里面有很多问题, 出现bug也很难跟踪, 而且代码里面全都是同一个map传参, 和接收参数的, 这样的代码在读的时候很难读懂. 我想试着把这些map全都替换掉, 用对象或者基本类型, 但是我发现代码的业务逻辑很复杂, 很难分不清楚那个方法有哪些参数, 基于这种问题, 做小重构应该要注意些什么, 怎么做比较好?","like_count":0},{"had_liked":false,"id":322322,"user_name":"翼","can_delete":false,"product_type":"c1","uid":1383755,"ip_address":"","ucode":"172932A21AB41E","user_header":"https://static001.geekbang.org/account/avatar/00/15/1d/4b/1d93d576.jpg","comment_is_top":false,"comment_ctime":1637303405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637303405","product_id":100039001,"comment_content":"“但是小王对异常的处理是在 IdGenerator 内部将其吐掉，然后打印一条报警日志，并没有继续往上抛出。” 有错别字，应该是吞掉不是吐掉","like_count":0},{"had_liked":false,"id":316321,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1634268424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634268424","product_id":100039001,"comment_content":"1、如何发现代码问题-常规checkList<br>\t目录设置是否合理、模块划分是否清晰、代码结构是否满足「高内聚、松耦合」<br>\t是否遵循经典的设计原则和设计思想（SOLID、DRY、KISS、YAGNI、LOD等）<br>\t设计模式是否应用得当？是否有过度设计？<br>\t代码是否容易扩展？如果要添加新功能，是否容易实现？<br>\t代码是否可以复用？是否看恶意复用已有的项目代码或类库？是否有重复造轮子？<br>\t代码是否容易测试？单元测试是否全面覆盖各种正常和异常的情况？<br>\t代码是否易读？石佛iu符合编码规范（比如命名和注释是否恰当、代码风格是否一致等）？<br>2、如何发现代码问题-业务需求checkList<br>\t代码是否实现了预期的业务需求？<br>\t逻辑是否正确？是否处理了各种异常情况？<br>\t日志打印是否得当？是否方便debug排查问题？<br>\t接口是否易用？是否支持幂等、事务等？<br>\t代码是否存在并发问题？是否线程安全？<br>\t性能是否有优化空间，比如，SQL、算法是否可以优化？<br>\t是否有安全漏洞？比如，输入输出校验是否全面？","like_count":0},{"had_liked":false,"id":302284,"user_name":"Owen.","can_delete":false,"product_type":"c1","uid":2631826,"ip_address":"","ucode":"19819DD20DA845","user_header":"https://static001.geekbang.org/account/avatar/00/28/28/92/355056d1.jpg","comment_is_top":false,"comment_ctime":1626155876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626155876","product_id":100039001,"comment_content":"&#47;**<br> * @Author owen<br> * @Date 2021&#47;7&#47;13 11:54<br> * @Description 负责ID生成 ,代码质量课程.<br> **&#47;<br>public class IdGenerator {<br><br>    public String generate() {<br>        final int length = 8;<br>        final String format = &quot;%s-%d-%s&quot;;<br>        String lastIpSection = getLastIpSection();<br>        String randomCharacter = getRandomCharacter(length);<br>        return String.format(format, lastIpSection, System.currentTimeMillis(), randomCharacter);<br>    }<br><br>    &#47;**<br>     * 获取机器IP的最后一段<br>     *&#47;<br>    private String getLastIpSection() {<br>        String ip;<br>        try {<br>            String hostAddress = InetAddress.getLocalHost().getHostAddress();<br>            if (StringUtils.isBlank(hostAddress)) throw new UnknownHostException();<br>            String[] ips = hostAddress.split(&quot;\\\\.&quot;);<br>            ip = ips[ips.length - 1];<br>        } catch (UnknownHostException e) {<br>            &#47;&#47;如果不存在或异常返回随机三位数字.<br>            Random random = new Random();<br>            int bound = 899;<br>            int offset = 100;<br>            ip = String.valueOf(random.nextInt(bound) + offset);<br>        }<br>        return ip;<br>    }<br><br>    &#47;**<br>     * 调用org.apache.commons.lang3 工具包,获取随机length位的字符串.<br>     *<br>     * @param length 多少位字符串<br>     * @return 随机字符串<br>     *&#47;<br>    private String getRandomCharacter(int length) {<br>        &#47;&#47;参数的含义 :　letters 字母? numbers 数字?<br>        return RandomStringUtils.random(length, true, true);<br>    }<br><br>    &#47;**<br>     * 测试<br>     *<br>     * @param args main<br>     *&#47;<br>    public static void main(String[] args) {<br>        IdGenerator idGenerator = new IdGenerator();<br>        for (int i = 0; i &lt; 10; i++) {<br>            String randomId = idGenerator.generate();<br>            System.out.println(randomId);<br>        }<br>    }<br>}","like_count":0},{"had_liked":false,"id":293391,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1621380723,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1621380723","product_id":100039001,"comment_content":"不用，Logger 只是打印日志，仅仅只是输出，没有未决行为，不用依赖注入。","like_count":0},{"had_liked":false,"id":291704,"user_name":"Geek_31594d","can_delete":false,"product_type":"c1","uid":2030240,"ip_address":"","ucode":"9058787881CE82","user_header":"","comment_is_top":false,"comment_ctime":1620442492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620442492","product_id":100039001,"comment_content":"是否满足单元测试标准很重要","like_count":0},{"had_liked":false,"id":289960,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1134539,"ip_address":"","ucode":"11C598D0723D08","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/cb/ede92cd5.jpg","comment_is_top":false,"comment_ctime":1619278445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619278445","product_id":100039001,"comment_content":"Checklist准备用上","like_count":0},{"had_liked":false,"id":275513,"user_name":"snake","can_delete":false,"product_type":"c1","uid":2347137,"ip_address":"","ucode":"47BFFE4D048156","user_header":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","comment_is_top":false,"comment_ctime":1611567048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611567048","product_id":100039001,"comment_content":"已经把这个checklist记录下来了，很实用<br>https:&#47;&#47;www.yuque.com&#47;docs&#47;share&#47;51fbf73a-0238-4afb-9214-fa12a5ad554e?# 《《设计模式之美》- 代码重构通用checklist》","like_count":0},{"had_liked":false,"id":258069,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1604284762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604284762","product_id":100039001,"comment_content":"小王写代码只需要半小时，保守估计review得1天。<br>加班到凌晨的小王心里很崩溃：“又不是不能用。”<br>但是第二天他会感觉很爽！这是指数级的成长！<br><br>代码检验清单了：<br>1. 目录设置是否合理、模块划分是否清晰？<br>2. 是否容易扩展？添加新功能，是否容易实现？<br>3. 代码是否可以复用？是否可以复用已有的项目代码或类库？是否有重复造轮子？<br>4. 代码是否容易测试？单元测试是否全面覆盖了各种正常和异常的情况？<br>5. 代码是否易读？是否符合编码规范？<br>6. 是否遵循经典的设计原则和思想？<br><br>业务检验清单：<br>1. 代码是否实现了预期的业务需求？<br>2. 代码逻辑是否正确？是否处理了各种异常？<br>3. 日志打印是否得当？是否方便debug排查问题？<br>4. 接口是否易用？<br>5. 代码是否存在并发问题？线程是否安全？<br>6. 性能是否有优化的空间？<br>7. 是否有安全漏洞？输入输出校验是否全面？<br><br>复习一下经典的设计原则和思想<br>SOLID：SRP(单一职责原则)、OCP(开闭原则)、LSP(里式替换原则)、ISP(接口隔离原则)和IOC(依赖反转原则)<br>KISS：保持简单<br>YAGNI：不要过度设计<br>DRY：不要重复<br>LOD：迪米特法则（不该有的依赖，不要依赖，要最小接口，不要最大实现）","like_count":0,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44629,"discussion_content":"感觉Spring的抽象很疯狂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572959422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251783,"user_name":"工藤新一","can_delete":false,"product_type":"c1","uid":1754668,"ip_address":"","ucode":"F2AFB6F6A42FAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLeXjFHy8wGyrDnm6ib7hjZNjocUHarn0XFc8zLc061Ax99bFmrLN9yAxicklpcjKFx2gHqUKWQ3MRw/132","comment_is_top":false,"comment_ctime":1601868223,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1601868223","product_id":100039001,"comment_content":"只是看到这里，ID生成器我本来以为会讲到雪花算法，因为这个ID生成的话，有很多字符，不是数字类型的话，在数据库查询和索引上面都不占优势。","like_count":0,"discussions":[{"author":{"id":1739390,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8a/7e/bfe37c46.jpg","nickname":"飞鱼","note":"","ucode":"95109E8F7DBE39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389033,"discussion_content":"“工藤新一”描述的可能是这么个意思：日志最终需要保持在 磁盘里，方便后续的查询，保存的内存中的日子如果不输出去存储，不能对后续的bug检查起到定位作用的话，那么内容中的日志是没有什么实际的价值的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629099660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2071327,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/9b/1f/9f3379d3.jpg","nickname":"Geek_7f21d2","note":"","ucode":"12204FDAD951BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318284,"discussion_content":"注意前提， 内存打印 ，允许重复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603697568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246928,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599533148,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599533148","product_id":100039001,"comment_content":"不影响IdGenerator 类代码的可测试性，因为非业务逻辑需要测试的代码<br>不需要将其通过依赖注入来注入，每个类一个logger对象，不需要扩展","like_count":0},{"had_liked":false,"id":240242,"user_name":"QingShu","can_delete":false,"product_type":"c1","uid":1194854,"ip_address":"","ucode":"36DD8B7F51CBCA","user_header":"","comment_is_top":false,"comment_ctime":1596804585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596804585","product_id":100039001,"comment_content":"logger可以考虑封装或者通过eventbus进行输出，logback初始化在单元测试当中还是需要上下文初始的","like_count":0},{"had_liked":false,"id":220946,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590364222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590364222","product_id":100039001,"comment_content":"魔法数：代码中直接出现的数值是魔法数，影响可读性。要用枚举或常量代替魔法数，需要持久化的数字在阅读数据库时也有阅读性问题。","like_count":0},{"had_liked":false,"id":213657,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1588502430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588502430","product_id":100039001,"comment_content":"什么是专家？就是能提出高质量指导性信息的人，此篇硬核，以后衡量代码的重要指标体系就靠他了","like_count":0},{"had_liked":false,"id":208327,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1587340492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587340492","product_id":100039001,"comment_content":"需要搞成依赖注入","like_count":0},{"had_liked":false,"id":202390,"user_name":"咸鱼","can_delete":false,"product_type":"c1","uid":1179028,"ip_address":"","ucode":"5E79636DE48155","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","comment_is_top":false,"comment_ctime":1585982775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585982775","product_id":100039001,"comment_content":"可以将获取本机hostname这段逻辑考虑放在静态代码块中，在这个Class加载进来初始化后，就获取到hostname，这样的话就不用每次在调用generate方法时重复这个耗时的操作，看到评论里少有提及这个，其中有位使用静态域hostname，不过还是在generate方法里去获取和判断，增加了generate的代码量，没那么简洁了","like_count":0},{"had_liked":false,"id":184063,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583216466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583216466","product_id":100039001,"comment_content":"魔数：程序中出现的数字常量或字符串","like_count":0},{"had_liked":false,"id":184006,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583204126,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1583204126","product_id":100039001,"comment_content":"我个人认为是没有必要的,因为Logger这个类只用于日志打印,并不会过多的代码逻辑上的参与,故不需要设置为依赖注入<br>而且经过本章的思考,我将代码暂时重构为第一版,代码如下<br>public class IdGeneratorUtil {<br>    &#47;&#47;获取到logger对象,方便打印日志<br>    private static final Logger logger = LoggerFactory.getLogger(IdGeneratorUtil.class);<br>    private static final String ASCIIPATTERNTEXT = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;<br>    private static final char[] patternBytes = ASCIIPATTERNTEXT.toCharArray();<br><br>    private static String HOSTNAME;<br>    &#47;**<br>     * 此函数用于自动生成一个字符串形式的id<br>     *<br>     * @return id<br>     *&#47;<br>    public static String generator() {<br>        String id = &quot;&quot;;<br>        if (Strings.isNullOrEmpty(HOSTNAME)){<br>            try {<br>                String hostName = InetAddress.getLocalHost().getHostName();<br>                if (!Strings.isNullOrEmpty(hostName)) {<br>                    String[] hosts = hostName.split(&quot;&#47;&#47;&quot;);<br>                    HOSTNAME = hosts[hosts.length - 1];<br>                }else{<br>                    HOSTNAME = getRandomTextByDigit(8);<br>                }<br>            } catch (UnknownHostException e) {<br>                HOSTNAME = getRandomTextByDigit(8);<br>                logger.error(&quot;hostname获取不到&quot;, e);<br>            }<br>        }<br>        String randomText = getRandomTextByDigit(8);<br>        id = String.format(&quot;%s-%s-%d&quot;, HOSTNAME, randomText, System.currentTimeMillis());<br>        logger.info(&quot;本次获取的id为{}&quot;,id);<br>        return id;<br>    }<br><br>    &#47;**<br>     * 根据传入的位数生成对应位数的字符串<br>     *<br>     * @param digit 位数<br>     * @return 随机字符串<br>     *&#47;<br>    public static String getRandomTextByDigit(Integer digit) {<br>        if (digit &lt;= 0) {<br>            return &quot;&quot;;<br>        }<br>        int length = ASCIIPATTERNTEXT.length();<br><br>        StringBuilder result = new StringBuilder();<br>        Random random = new Random();<br><br>        for (int i = digit; i &gt; 0; i--) {<br>            char patternByte = patternBytes[random.nextInt(length)];<br>            result.append(patternByte);<br>        }<br>        return result.toString();<br>    }<br>    <br>}","like_count":0,"discussions":[{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228904,"discussion_content":"兄弟，你的HOSTNAME设置为全部变量，不是线程安全的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586588247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182383,"user_name":"拙言","can_delete":false,"product_type":"c1","uid":1310192,"ip_address":"","ucode":"40179CFED35579","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/f0/67ed878c.jpg","comment_is_top":false,"comment_ctime":1582776659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582776659","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":180952,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1582448482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582448482","product_id":100039001,"comment_content":"两张 Checklist 图片果断收藏了<br><br>国外有 Peter，争哥有小王","like_count":0},{"had_liked":false,"id":179198,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1053390,"ip_address":"","ucode":"ABB3F1A63E102A","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/ce/a8c8b5e8.jpg","comment_is_top":false,"comment_ctime":1581934919,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581934919","product_id":100039001,"comment_content":"老师好，请教个问题：generate函数内部涉及到Logger对象，它是用static修饰的全局变量，它算不算共享变量？会不会影响线程安全呢？","like_count":0,"discussions":[{"author":{"id":1810576,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","nickname":"M","note":"","ucode":"06F26E1D62E9C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196860,"discussion_content":"不算的，logger仅仅是打印日志而已。其他数值的全局变量会影响线程安全的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583378977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178968,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1581864821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581864821","product_id":100039001,"comment_content":"应将Logger通过依赖注入的方式进行设置，因为Logger依赖的是第三方的框架，在单元测试的时候不容易Mock","like_count":0},{"had_liked":false,"id":176174,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1580979198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580979198","product_id":100039001,"comment_content":"这个两个checklist可以作为以后检查自己代码的标准了","like_count":0},{"had_liked":false,"id":174093,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1579959879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579959879","product_id":100039001,"comment_content":"打卡34节。过年期间第一次打卡。<br>这节课可以学习重构的一些标准，包括常规的检查项和业务检查项，这个清单确实可以打印出来做为自己代码的开发规范。<br>关于思考题logger是否需要注入问题，我觉得不用，只是一个日志打印，不影响业务逻辑。","like_count":0},{"had_liked":false,"id":174047,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1579926783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579926783","product_id":100039001,"comment_content":"Looger 方法一般没有未决行为, 不会影响测试性, 不需要依赖注入, 如果依赖注入, 就显得多余了. 从现在开始开代码, 开始有自己的分析了","like_count":0},{"had_liked":false,"id":173994,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579856233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579856233","product_id":100039001,"comment_content":"打卡<br>如何发现代码质量问题：<br>大的方向是否可读、可扩展、可维护、灵活、简洁、可复用、可测试<br>具体落实，通用的关注点有：<br>1）目录设置是否合理、模块划分是否清晰、代码结构是否满足“高内聚、松耦合”？<br>2）是否遵循经典的设计原则和设计思想（SOLID、DRY、KISS、YAGNI、LOD 等）？<br>3）设计模式是否应用得当？是否有过度设计？<br>4）代码是否容易扩展？如果要添加新功能，是否容易实现？<br>5）代码是否可以复用？是否可以复用已有的项目代码或类库？是否有重复造轮子？<br>6）代码是否容易测试？单元测试是否全面覆盖了各种正常和异常的情况？<br>7）代码是否易读？是否符合编码规范（比如命名和注释是否恰当、代码风格是否一致等）？<br><br>关于业务的一些通用关注点：<br>1）代码是否实现了预期的业务需求？<br>2）逻辑是否正确？是否处理了各种异常情况？<br>3）日志打印是否得当？是否方便 debug 排查问题？<br>4）接口是否易用？是否支持幂等、事务等？<br>5）代码是否存在并发问题？是否线程安全？<br>6）性能是否有优化空间，比如，SQL、算法是否可以优化？<br>7）是否有安全漏洞？比如输入输出校验是否全面？<br>","like_count":0},{"had_liked":false,"id":173774,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1579683252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579683252","product_id":100039001,"comment_content":"突然发现前面的东西有些记不太清了,虽然也记了笔记,但是实际分析的时候有些东西却想不起来了,还是要多把争哥讲的东西多实战练习才行","like_count":0},{"had_liked":false,"id":173717,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1579668656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579668656","product_id":100039001,"comment_content":"课堂讨论answer:<br><br>先说结论: 不需将Logger依赖注入.<br><br>Logger作用仅为generate()方法发生异常时,打印一条提示消息.除此之外,再无他用.<br>如果使用依赖注入,将破坏类高内聚的特性.<br><br>此外,generate()方法的错误处理目前看来是存在问题的,可能的解决方案是发生异常时,将异常抛给上层调用者.但本人十分厌恶Java的Checked Exception特性,严重影响代码可读性,对于异常的捕获处理也未必比Runtime Exception好用到哪去.<br>","like_count":0},{"had_liked":false,"id":173602,"user_name":"牧名","can_delete":false,"product_type":"c1","uid":1020390,"ip_address":"","ucode":"193F0F33E1AB47","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/e6/03582dee.jpg","comment_is_top":false,"comment_ctime":1579612398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579612398","product_id":100039001,"comment_content":"1. try-catch 范围过大，只需要try-cache InetAddress.getLocalHost().getHostName();即可<br>2. 随机数范围调整为74（122-48）可适度减少无谓的循环。另外生成数字，大小写字母其实全部使用&#39;0&#39;+randomInt即可（randomInt取值范围 0-74）","like_count":0},{"had_liked":false,"id":173356,"user_name":"JOsuny","can_delete":false,"product_type":"c1","uid":1319513,"ip_address":"","ucode":"5F36D3D1AF83EA","user_header":"https://static001.geekbang.org/account/avatar/00/14/22/59/781b6fa5.jpg","comment_is_top":false,"comment_ctime":1579509778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579509778","product_id":100039001,"comment_content":"我来啦","like_count":0},{"had_liked":false,"id":173295,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1579497171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579497171","product_id":100039001,"comment_content":"回答问题：<br>1.不需要注入。因为日志工具与该业务要验证功能的现象无关。如果要挑选日志工具实现类，可以单独为其写测试类，验证各方面指标差异。<br><br>demo代码还存在的问题：<br><br>1.try太大了，应该局限在hostname那块，大于自己的try范围会引人误解。<br><br>2.为取host最后一个字段而生成arr没必要，直接sub取最后一个字段语义更强。（jdk的split和sub都有点问题,条件允许还是用工具好点）。<br><br>3.异常比空字符串语义其实更准确些，一般我偏向于把异常处理抛给api调用方，而不是这里的捕捉打印日志。（另外，异常堆栈耗性能，像这种异常（不需要看调用链追查异常原因的），健全的异常信息足已）","like_count":0},{"had_liked":false,"id":173291,"user_name":"YourSweetHeart","can_delete":false,"product_type":"c1","uid":1242122,"ip_address":"","ucode":"38843F447B03F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","comment_is_top":false,"comment_ctime":1579495425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579495425","product_id":100039001,"comment_content":"说实话，我觉得小王写的还行，<br>要是我也会这样写","like_count":0},{"had_liked":false,"id":173265,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1579490816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579490816","product_id":100039001,"comment_content":"日志是采用工厂模式，不用人为的创建对象，依赖注入不希望自己new出一个对象，也符合这个要求，最终日志只是打印，可以设置对于应日志级别，可以进行动态调整","like_count":0},{"had_liked":false,"id":173264,"user_name":"satoshi","can_delete":false,"product_type":"c1","uid":1114872,"ip_address":"","ucode":"11508C95259E97","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLQcr5YD5xznNjMxltFI04NgpTWWicKD3QicBfshIEWtckXNYMicjdNfQu8w5hSTGicuxUg6sOI8yfoNw/132","comment_is_top":false,"comment_ctime":1579490722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579490722","product_id":100039001,"comment_content":"以前真的就是乱撞，就算搞好了心里也很慌，现在感觉有章法了，真是豁然开朗啊","like_count":0},{"had_liked":false,"id":173253,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1579487243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579487243","product_id":100039001,"comment_content":"在今天的代码中，打印日志的 Logger 对象被定义为 static final 的，并且在类内部创建，这是否影响到 IdGenerator 类代码的可测试性？是否应该将 Logger 对象通过依赖注入的方式注入到 IdGenerator 类中呢？<br>虽然 Logger 对象是在类内部创建出的全局变量,但是它与业务需求无关,其次没有未决行为无论是顺序执行和并行执行都不影响结果的幂等性,所以不会影响 IdGenerator 类代码的可测试性.<br>所以不需要通过依赖注入方式注入到IdGenerator 类中.","like_count":0},{"had_liked":false,"id":173205,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1579477377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579477377","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":173203,"user_name":"有所谓无所谓","can_delete":false,"product_type":"c1","uid":1796406,"ip_address":"","ucode":"928FE981B71A07","user_header":"","comment_is_top":false,"comment_ctime":1579476635,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1579476635","product_id":100039001,"comment_content":"日志目前我们项目都是用注解方式进行.不知道是否合理？这","like_count":0,"discussions":[{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143141,"discussion_content":"一样的, 只不过简化了书写\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579491760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173202,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1579476419,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"705954112963","product_id":100039001,"comment_content":"争哥，老实说，这个小王是不是曾经的你","like_count":165,"discussions":[{"author":{"id":1119609,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","nickname":"马球先生","note":"","ucode":"858C2CE0E494C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217436,"discussion_content":"小王的代码 我真是看了半天才懂","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1585559358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194858,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","nickname":"RD","note":"","ucode":"E3947B6E1681AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352992,"discussion_content":"我们的头像好像呀~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614938404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1952394,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/ca/8a/8f64cf86.jpg","nickname":"地平线","note":"","ucode":"52213F99782147","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585058,"discussion_content":"小王就是我😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661317359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"新加坡"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3015503,"avatar":"","nickname":"Geek_08a0f7","note":"","ucode":"C2D78F6B714B88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577371,"discussion_content":"终于看完了，代码也跑通啦，小王设计的还行吧hh","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656054957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3015503,"avatar":"","nickname":"Geek_08a0f7","note":"","ucode":"C2D78F6B714B88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577339,"discussion_content":"今天我一定要看懂小王的代码！搞明白LoggerFactory怎么用的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656040940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077406,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","nickname":"jaryoung","note":"","ucode":"6E72D107DB7E51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249062,"discussion_content":"火哥 哪里都是你哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587908925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009422,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","nickname":"eason2017","note":"","ucode":"E070BA624FA490","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163548,"discussion_content":"哈哈，老师念了几遍“小王”，我也想是在回忆曾经的自己了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581084893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1307080,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","nickname":"potato00fa","note":"","ucode":"D179E68D87CC50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":151019,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579847463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1146275,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/CXI9o2xQCYN83wISxMFIzUJJRSzPRM715WdtoX49u8MTZwpLaISt6PjcKd7fqN7GzFV1qU1iaBp8aUuG7ia1gGyA/132","nickname":"Geek_5939c6","note":"","ucode":"F1674B710FB7C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145862,"discussion_content":"哪都能见到你啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579584932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1146275,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/CXI9o2xQCYN83wISxMFIzUJJRSzPRM715WdtoX49u8MTZwpLaISt6PjcKd7fqN7GzFV1qU1iaBp8aUuG7ia1gGyA/132","nickname":"Geek_5939c6","note":"","ucode":"F1674B710FB7C7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147048,"discussion_content":"除了争哥的，其他地点我留言很少啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579621459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":145862,"ip_address":""},"score":147048,"extra":""}]},{"author":{"id":1131034,"avatar":"https://static001.geekbang.org/account/avatar/00/11/42/1a/de91a790.jpg","nickname":"ddq432","note":"","ucode":"C84F5727BA37B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145608,"discussion_content":"评论的都是人才啊，哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579572591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143124,"discussion_content":"我觉得小王设计的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579491207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141173,"avatar":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","nickname":"zs阿帅","note":"","ucode":"07A54AE7F1CAFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142914,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579484840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173244,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1579484402,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"203442947314","product_id":100039001,"comment_content":"<br>设计模式_34<br>Logger的方法一般不会有未决行为，不影响可测试性，不用依赖注入。<br><br>以前看代码质量是看感觉，现在开始有章法了。","like_count":48,"discussions":[{"author":{"id":1220273,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9e/b1/758f2fe7.jpg","nickname":"香","note":"","ucode":"121D6CECECEEC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340239,"discussion_content":"如果你的Log是打印在远程服务器上，那我理解整个用法就不是这样了，一般如果我的日志要收集专门的服务器，说实话我也不会在我的代码里去做这个事情，还是直接打印到本地，然后再考虑如何收集，至于如何收集，那又是其它系统设计的问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609934897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","nickname":"麋鹿在泛舟","note":"","ucode":"1379CADA08688E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180070,"discussion_content":"为啥一定没有未决行为呢，如果这个Log系统打印在远程服务器上，那就涉及到网络传输。如果在单元测试里面构造异常场景，Log这里就走不下去了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582274758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","nickname":"麋鹿在泛舟","note":"","ucode":"1379CADA08688E","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":181389,"discussion_content":"其实，我说的是一般没有未决行为。\n\n不过你说的场景如何写单元测试倒是挺有意思的，我觉得\n1. 肯定要异步写。\n2. 应该也要先写到本地buffer，然后以一定的条件出发buffer写到远程。\n\n如果按照上面两条的思路，那么网络的未决行为应该在logger的单元测试里覆盖(需要有重发机制)，其他业务(只是用到logger)的单元测试也要覆盖这个case吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582367100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180070,"ip_address":""},"score":181389,"extra":""},{"author":{"id":2142423,"avatar":"","nickname":"Geek_7e0e83","note":"","ucode":"554DEE2AAAE33C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564131,"discussion_content":"我理解是不用的。那个是logger的事情。和使用方无关，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650165115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":181389,"ip_address":""},"score":564131,"extra":""}]}]},{"had_liked":false,"id":173248,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1579485483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"181968111915","product_id":100039001,"comment_content":"我要把这个checklist打印出来贴桌子上","like_count":43},{"had_liked":false,"id":174103,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1579965835,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"113249115531","product_id":100039001,"comment_content":"这个logger没有未决行为，不影响可测试性。我之前的一篇文章里提到过，将logger对象设置成static的原因是确保日志对象每个类一份、设置成final的原因是避免日志对象在运行时被修改。https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;1OpvN8_dzIDWYBDiICU6yw","like_count":27,"discussions":[{"author":{"id":1085200,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/10/f9151d58.jpg","nickname":"Java知其所以然","note":"","ucode":"DC17FC7A7E42D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410053,"discussion_content":"从批判性思维的角度来看，为什么要避免 logger 在运行时被修改？我觉得任何的动态变更都是有很大风险的，所以一个 logger 在系统启动后就只干好当前类日志信息的记录。如果想记录其他类日志信息，那就新搞一个 logger，而不是去改目前已有的一个 logger。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635582689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173863,"user_name":"氧气🌙 🐟 🌺","can_delete":false,"product_type":"c1","uid":1591015,"ip_address":"","ucode":"8E23C210A9F09E","user_header":"https://static001.geekbang.org/account/avatar/00/18/46/e7/e20279ea.jpg","comment_is_top":false,"comment_ctime":1579744896,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"96069025408","product_id":100039001,"comment_content":"1.split效率较低<br>2.随机字符的生成可用固定数组随机取数:<br>\t\tint count = 0;<br>\t\tString random = &quot;&quot;;<br>\t\tchar[] doc = { &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;,&#39;d&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39; };<br>\t\twhile (count &lt; 8) {<br>\t\t\tint index = (int) (Math.random() * doc.length);<br>\t\t\trandom = random + (doc[index]);<br>\t\t\tcount++;<br>\t\t}<br>\t\tSystem.out.println(random);","like_count":23,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588907,"discussion_content":"稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664200396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222360,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1590759945,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"83195138569","product_id":100039001,"comment_content":"【设计模式笔记34】20200529<br>今天代码质量自查手册很实用，我看了评论有同学说要打印出来之类的，我觉得好东西就应该第一时间消化并想想怎么内化为自己的实践。结合前面学的设计原则和质量手册，我想了如下问题：<br>1、分了哪些模块，每个模块负责的事情是什么，满足单一职责么<br>2、具体某个模块分了哪些包，每个包放什么样的类，分类是否合理重复<br>3、具体到某个类，命名是否清晰简单，注释是否包含做什么、为什么做、如何做，API是否有如何用<br>4、类的属性有哪些，是否有魔数，属性结构是否统一，是否有非关联的属性，是否有大函数，每个函数的职责是否单一，某些函数是否可复用和抽象，是否可读<br>5、是否使用了设计模式，使用了什么设计模式，是否可以不用，如果非要用带来的好处是什么以及不用带来的坏处<br>6、如果要新增或者修改功能是否好扩展，是否满足开闭<br>7、某些函数是否可以复用，是否有现成的工具，强烈建议每个团队内部都有一个工具包<br>8、代码是否有异常会影响原有逻辑么，如果有怎么解决，想想兜底或者降级方案<br>9、是否有并发问题，如果出现了会有什么影响，怎么解决<br>10、代码是否有测试用例，是否覆盖了正常合异常的情况","like_count":20},{"had_liked":false,"id":173238,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1579483608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"70298960344","product_id":100039001,"comment_content":"争哥这一节跟马丁那本&lt;重构&gt;的第一章有异曲同工之妙。<br>如果大家觉得意犹未尽，可以尝试动手去学学重构的第一章，然后动手实践一下🤪","like_count":16},{"had_liked":false,"id":173232,"user_name":"seckiller","can_delete":false,"product_type":"c1","uid":1540757,"ip_address":"","ucode":"CCA66F155A2022","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er3Ey0Uq2w4wDUKbLgqUHIkeH9oYeG2KW92CvBgYviczRMdbk6xxFO8mxMOVxGBozUUZDyfLKEhFFA/132","comment_is_top":false,"comment_ctime":1579482972,"is_pvip":false,"replies":[{"id":"67731","content":"这节课里的代码不就是吗","user_name":"作者回复","comment_id":173232,"uid":"1190123","ip_address":"","utype":1,"ctime":1580115588,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"48824123228","product_id":100039001,"comment_content":"王争大佬以后课多带点实战代码","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482004,"discussion_content":"这节课里的代码不就是吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580115588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207940,"user_name":"傑","can_delete":false,"product_type":"c1","uid":1581251,"ip_address":"","ucode":"9AD091143802D2","user_header":"https://static001.geekbang.org/account/avatar/00/18/20/c3/cfc7fa87.jpg","comment_is_top":false,"comment_ctime":1587219389,"is_pvip":true,"discussion_count":5,"race_medal":1,"score":"44536892349","product_id":100039001,"comment_content":"为什么说静态方法会影响代码的可测试性？","like_count":10,"discussions":[{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316746,"discussion_content":"这篇文章（https://testing.googleblog.com/2008/12/static-methods-are-death-to-testability.html）说的比较清楚。单个的静态方法如果没有其他依赖的话，非常容易测试，但如果静态方法A又调用了静态方法B，因为B的不可替换性，我们无法单独测试静态方法A。如果整个系统引入了很多静态方法，那么这个系统的可测试性就会大大降低。简言之，静态方法是面向过程的，是一种紧耦合，从而降低了可测试性。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1603448747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2234620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","nickname":"江南一笑","note":"","ucode":"E38938A1178827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377644,"discussion_content":"B的不可替换性是什么意思？我的理解是B方法引用进来的函数是没有被固定下来的，导致测试A方法的时候无法进行, 只能mock?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622744973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":316746,"ip_address":""},"score":377644,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588529,"discussion_content":"通读了连接的全篇，总结的非常好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663816779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088199,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9a/c7/c6f400c1.jpg","nickname":"许换","note":"","ucode":"2542F77E8EDDCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312829,"discussion_content":"不好mock","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602828771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1655940,"avatar":"https://static001.geekbang.org/account/avatar/00/19/44/84/4da14994.jpg","nickname":"呆瓜","note":"","ucode":"C98C7B224D0640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310928,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602140671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173204,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1579476803,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"27349280579","product_id":100039001,"comment_content":"slf4j本身已经支持的不同Logger的实现，配合lombok，自己直接定义static logger是没有必要的，可以替换掉。Logger本身并不是业务需求关注的点，也不是非功能性需求特别关注的点，没必要为了依赖注入而注入，更何况Logger本身可以通过配置的方式改变处理log的方式，已经很灵活了。","like_count":6,"discussions":[{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303629,"discussion_content":"建议少用lombok","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599317696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1257750,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/16/f2269e73.jpg","nickname":"better","note":"","ucode":"2B9BCCED753D7F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330085,"discussion_content":"为什么","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606529390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303629,"ip_address":""},"score":330085,"extra":""}]}]},{"had_liked":false,"id":256983,"user_name":"天马行空","can_delete":false,"product_type":"c1","uid":1740810,"ip_address":"","ucode":"5B019ABAFD1716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/90/0a/4d161db0.jpg","comment_is_top":false,"comment_ctime":1603804821,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23078641301","product_id":100039001,"comment_content":"checklist很重要，很多人会写代码，写完之后不知道check什么，说白了就是不知道哪里写得不好，要重构，觉得可用就ok了，没什么可提高的了，不追求提升，这个可以给将来的新人分享，非常好！","like_count":5,"discussions":[{"author":{"id":1085659,"avatar":"https://static001.geekbang.org/account/avatar/00/10/90/db/8429cdfa.jpg","nickname":"Kevin","note":"","ucode":"588EBC835D34B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555285,"discussion_content":"小马哥，有没有坚持带领团队code review？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646834432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173433,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1579534482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23054370962","product_id":100039001,"comment_content":"学完这篇文章后，体会到之前学习的东西逐渐影响到自己后面的学习。这也验证了“你努力走过的路，每一步都算数”。在读文章的过程中，自己也思考了文中提供的代码有哪些问题，但是在读完文章后，发现自己并没有像文章中罗列的那套路来思考，自己都是按照之前学习的知识想到一点是一点，没有条理，没有章法。这也提醒了我该回炉重新去回顾以前学过的知识，要不断的进行思考总结将它们在自己的大脑里留下更深的记忆，并产生相关的连接。文中罗列的两个checkList，个人感觉很好用，通过这两个checkList，从“通用的代码关注点”和“业务功能、非功能需求”这两个维度思考将之前学习到的知识点都串联起来了，使我们能够学以致用。回顾自己以前在看自己的代码和别人的代码的时候，只是简单的看一些命名是否规范，是否可读等。感觉有内功又深了一层的感觉。<br>对于课堂讨论，Logger对象，个人觉得并不影响测试性，它只是一个辅助手段用于打印日志。也没必要通过依赖注入的方式构造对象，这一点耦合还是可以接受的。使用依赖注入为了是解耦，将依赖类在外部创建好，通过构造函数，函数参数方式传递来给类使用。","like_count":6},{"had_liked":false,"id":173286,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1579494636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23054331116","product_id":100039001,"comment_content":"很好的一篇checklist，算是对我们前边学的整理起来了。棒棒。","like_count":5},{"had_liked":false,"id":173245,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1579484700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14464386588","product_id":100039001,"comment_content":"没有必要，不需要在这里测试 logger","like_count":3},{"had_liked":false,"id":173212,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1579479853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14464381741","product_id":100039001,"comment_content":"课堂讨论<br>    日志系统设计属非业务相关模块，从可复用性，单一职责，高内聚低耦合考虑，最好设计成单独模块，以便其他类复用！<br>    Logger对象是一个单例全局对象才合理，如果通过依赖注入到IdGenerator中就显得有点多余了！","like_count":3},{"had_liked":false,"id":246420,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1599317623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189252215","product_id":100039001,"comment_content":"Id生成器认为还存在一个问题，就是算法逻辑步骤不清晰，实际上是四步：获取hostName、生成随机字符、获取当前时间戳、组装Id。可以通过将generate方法切分成更小的代码块，小的代码块中负责单一的算法逻辑，由generate函数进行组装，这样算法步骤逻辑要清晰一点，阅读的时候也不会被具体的算法细节带跑","like_count":2},{"had_liked":false,"id":183326,"user_name":"吕伟","can_delete":false,"product_type":"c1","uid":1110096,"ip_address":"","ucode":"A443C94A717AD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/50/c348c2ea.jpg","comment_is_top":false,"comment_ctime":1582994811,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"10172929403","product_id":100039001,"comment_content":"提问：为什么说静态函数会影响使用该函数的代码的可测试性。","like_count":2,"discussions":[{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270835,"discussion_content":"因为静态函数在测试的时候不方便mock","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590062472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2234620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","nickname":"江南一笑","note":"","ucode":"E38938A1178827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377645,"discussion_content":"为什么不方便mock","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622745001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":270835,"ip_address":""},"score":377645,"extra":""},{"author":{"id":2733574,"avatar":"https://static001.geekbang.org/account/avatar/00/29/b6/06/cd1eaa49.jpg","nickname":"小王在努力","note":"","ucode":"A324EF87198905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2234620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","nickname":"江南一笑","note":"","ucode":"E38938A1178827","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392963,"discussion_content":"你写一个静态方法，里面你随便new几个对象，然后针对该静态方法写个单元测试，mock此方法依赖的那几个new出来的对象，用反转依赖的方式mock再试试，当场难受。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631191606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":377645,"ip_address":""},"score":392963,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588531,"discussion_content":"具体的回答应该是：因为不方便mock。为什么不方便mock？因为静态方法不容易被重写。而mock的本质是基于动态代理生成要mock类的方法，而静态方法本质就是反OO编程的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663818372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2278659,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TUMtkaIMdbFDS28AhjrQcqOhiapNvHyPMApz9QoZZkShZmomJRh6GX2aL2YeSMg4SicdydzdWxXZOZz49HNS9EtA/132","nickname":"Windqiu","note":"","ucode":"EF78D3CF73BCBB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363502,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617204322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174981,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1580486285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170420877","product_id":100039001,"comment_content":"新年第一卡","like_count":2},{"had_liked":false,"id":173984,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1579847532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169782124","product_id":100039001,"comment_content":"真干货，妙啊","like_count":2},{"had_liked":false,"id":173899,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579768532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169703124","product_id":100039001,"comment_content":"打卡，这个是后续可以打印出来，对代码进行检测<br>如何发现代码质量问题：<br>大的方向是否可读、可扩展、可维护、灵活、简洁、可复用、可测试<br>具体落实，通用的关注点有：<br>1）目录设置是否合理、模块划分是否清晰、代码结构是否满足“高内聚、松耦合”？<br>2）是否遵循经典的设计原则和设计思想（SOLID、DRY、KISS、YAGNI、LOD 等）？<br>3）设计模式是否应用得当？是否有过度设计？<br>4）代码是否容易扩展？如果要添加新功能，是否容易实现？<br>5）代码是否可以复用？是否可以复用已有的项目代码或类库？是否有重复造轮子？<br>6）代码是否容易测试？单元测试是否全面覆盖了各种正常和异常的情况？<br>7）代码是否易读？是否符合编码规范（比如命名和注释是否恰当、代码风格是否一致等）？<br><br>关于业务的一些通用关注点：<br>1）代码是否实现了预期的业务需求？<br>2）逻辑是否正确？是否处理了各种异常情况？<br>3）日志打印是否得当？是否方便 debug 排查问题？<br>4）接口是否易用？是否支持幂等、事务等？<br>5）代码是否存在并发问题？是否线程安全？<br>6）性能是否有优化空间，比如，SQL、算法是否可以优化？<br>7）是否有安全漏洞？比如输入输出校验是否全面？","like_count":2},{"had_liked":false,"id":173260,"user_name":"此鱼不得水","can_delete":false,"product_type":"c1","uid":1257453,"ip_address":"","ucode":"95268E823FB4D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ed/a87bb8fa.jpg","comment_is_top":false,"comment_ctime":1579489080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169423672","product_id":100039001,"comment_content":"1.日志并不会影响可测试性<br>2.没必要注入","like_count":2},{"had_liked":false,"id":173210,"user_name":"0bug","can_delete":false,"product_type":"c1","uid":1050335,"ip_address":"","ucode":"CADCC882F31784","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/df/60126ff3.jpg","comment_is_top":false,"comment_ctime":1579479736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10169414328","product_id":100039001,"comment_content":"catch包裹的代码太多了","like_count":2},{"had_liked":false,"id":259720,"user_name":"红豆成香","can_delete":false,"product_type":"c1","uid":1488601,"ip_address":"","ucode":"FB8FBB639B4BA6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","comment_is_top":false,"comment_ctime":1604819550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899786846","product_id":100039001,"comment_content":"老师最后说的“面向对象和面向过程的区别、面向对象的四大特性、面向过程编程的弊端以及如何控制弊端带来的副作用、需求分析方法、类的设计思路、类之间的关系、接口和抽象类的区别、各种设计原则和思想”，自己都思考一下，遇到自己模糊的再回去看看","like_count":1},{"had_liked":false,"id":173424,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1579532257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874499553","product_id":100039001,"comment_content":"打卡✔","like_count":1},{"had_liked":false,"id":173236,"user_name":"一道阳光","can_delete":false,"product_type":"c1","uid":1239557,"ip_address":"","ucode":"F35207CCCEC6E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/05/c0d8014d.jpg","comment_is_top":false,"comment_ctime":1579483423,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5874450719","product_id":100039001,"comment_content":"我做的项目开发都是这样定义的，这个有问题吗？","like_count":1},{"had_liked":false,"id":173228,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1579482321,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5874449617","product_id":100039001,"comment_content":"不必要把logger依赖注入进去，logger是可以直接初始化的业务无关的，不依赖于外部接口，不影响单元测试，可以忽略掉，所以不需要改成依赖注入的。","like_count":1},{"had_liked":false,"id":173223,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1579481712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874449008","product_id":100039001,"comment_content":"滴滴。打卡～<br>","like_count":1},{"had_liked":false,"id":350300,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1656763737,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656763737","product_id":100039001,"comment_content":"不太敢重构，出过好几次问题。。","like_count":1},{"had_liked":false,"id":347736,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1654362157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654362157","product_id":100039001,"comment_content":"静态代码的如果没有其他依赖的话可测性是ok的，但是依赖的话会导致无法mock","like_count":0},{"had_liked":false,"id":338471,"user_name":"鹏","can_delete":false,"product_type":"c1","uid":1528796,"ip_address":"","ucode":"5E0F60BBA91129","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/dc/3a16bb1e.jpg","comment_is_top":false,"comment_ctime":1647513522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647513522","product_id":100039001,"comment_content":"想请问下比如进销存系统的入库单审核，一个审核里有涉及多个数据库操作，比如字段验证，更新商品库存，插入库存记录表，现在全部放在一个方法里虽然方便但是不符合单一职业，但是分开多个方法又有很多公用的对象，请教各位是怎么处理的","like_count":0},{"had_liked":false,"id":324544,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638496058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638496058","product_id":100039001,"comment_content":"1. 获取主机名和随机字符串 这两玩意可以封装细粒度函数，避免我读代码迷失在细节。看着真费劲<br>并且没有注释，更费劲了。 <br>2. 没有测试用例，并且是静态 主要是看测试方法，如果需要测试生成的ID和预期是否匹配 那么这个随机字符串 和 时间戳 就得外部mock 进去<br>3. 建议还是基于接口，这玩意就算现在没有2个实现类 但是这个基于接口个人认为是一个好的选择<br>4.  接着看王老师的分析，说 魔法数字 是否线程安全这些都是我没有考虑到的 学到了 <br>","like_count":0},{"had_liked":false,"id":323041,"user_name":"絆","can_delete":false,"product_type":"c1","uid":1618328,"ip_address":"","ucode":"52D965461314DB","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","comment_is_top":false,"comment_ctime":1637715447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637715447","product_id":100039001,"comment_content":"争哥, 我现在负责公司之前开发的一个项目, 项目里面有很多问题, 出现bug也很难跟踪, 而且代码里面全都是同一个map传参, 和接收参数的, 这样的代码在读的时候很难读懂. 我想试着把这些map全都替换掉, 用对象或者基本类型, 但是我发现代码的业务逻辑很复杂, 很难分不清楚那个方法有哪些参数, 基于这种问题, 做小重构应该要注意些什么, 怎么做比较好?","like_count":0},{"had_liked":false,"id":322322,"user_name":"翼","can_delete":false,"product_type":"c1","uid":1383755,"ip_address":"","ucode":"172932A21AB41E","user_header":"https://static001.geekbang.org/account/avatar/00/15/1d/4b/1d93d576.jpg","comment_is_top":false,"comment_ctime":1637303405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637303405","product_id":100039001,"comment_content":"“但是小王对异常的处理是在 IdGenerator 内部将其吐掉，然后打印一条报警日志，并没有继续往上抛出。” 有错别字，应该是吞掉不是吐掉","like_count":0},{"had_liked":false,"id":316321,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1634268424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634268424","product_id":100039001,"comment_content":"1、如何发现代码问题-常规checkList<br>\t目录设置是否合理、模块划分是否清晰、代码结构是否满足「高内聚、松耦合」<br>\t是否遵循经典的设计原则和设计思想（SOLID、DRY、KISS、YAGNI、LOD等）<br>\t设计模式是否应用得当？是否有过度设计？<br>\t代码是否容易扩展？如果要添加新功能，是否容易实现？<br>\t代码是否可以复用？是否看恶意复用已有的项目代码或类库？是否有重复造轮子？<br>\t代码是否容易测试？单元测试是否全面覆盖各种正常和异常的情况？<br>\t代码是否易读？石佛iu符合编码规范（比如命名和注释是否恰当、代码风格是否一致等）？<br>2、如何发现代码问题-业务需求checkList<br>\t代码是否实现了预期的业务需求？<br>\t逻辑是否正确？是否处理了各种异常情况？<br>\t日志打印是否得当？是否方便debug排查问题？<br>\t接口是否易用？是否支持幂等、事务等？<br>\t代码是否存在并发问题？是否线程安全？<br>\t性能是否有优化空间，比如，SQL、算法是否可以优化？<br>\t是否有安全漏洞？比如，输入输出校验是否全面？","like_count":0},{"had_liked":false,"id":302284,"user_name":"Owen.","can_delete":false,"product_type":"c1","uid":2631826,"ip_address":"","ucode":"19819DD20DA845","user_header":"https://static001.geekbang.org/account/avatar/00/28/28/92/355056d1.jpg","comment_is_top":false,"comment_ctime":1626155876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626155876","product_id":100039001,"comment_content":"&#47;**<br> * @Author owen<br> * @Date 2021&#47;7&#47;13 11:54<br> * @Description 负责ID生成 ,代码质量课程.<br> **&#47;<br>public class IdGenerator {<br><br>    public String generate() {<br>        final int length = 8;<br>        final String format = &quot;%s-%d-%s&quot;;<br>        String lastIpSection = getLastIpSection();<br>        String randomCharacter = getRandomCharacter(length);<br>        return String.format(format, lastIpSection, System.currentTimeMillis(), randomCharacter);<br>    }<br><br>    &#47;**<br>     * 获取机器IP的最后一段<br>     *&#47;<br>    private String getLastIpSection() {<br>        String ip;<br>        try {<br>            String hostAddress = InetAddress.getLocalHost().getHostAddress();<br>            if (StringUtils.isBlank(hostAddress)) throw new UnknownHostException();<br>            String[] ips = hostAddress.split(&quot;\\\\.&quot;);<br>            ip = ips[ips.length - 1];<br>        } catch (UnknownHostException e) {<br>            &#47;&#47;如果不存在或异常返回随机三位数字.<br>            Random random = new Random();<br>            int bound = 899;<br>            int offset = 100;<br>            ip = String.valueOf(random.nextInt(bound) + offset);<br>        }<br>        return ip;<br>    }<br><br>    &#47;**<br>     * 调用org.apache.commons.lang3 工具包,获取随机length位的字符串.<br>     *<br>     * @param length 多少位字符串<br>     * @return 随机字符串<br>     *&#47;<br>    private String getRandomCharacter(int length) {<br>        &#47;&#47;参数的含义 :　letters 字母? numbers 数字?<br>        return RandomStringUtils.random(length, true, true);<br>    }<br><br>    &#47;**<br>     * 测试<br>     *<br>     * @param args main<br>     *&#47;<br>    public static void main(String[] args) {<br>        IdGenerator idGenerator = new IdGenerator();<br>        for (int i = 0; i &lt; 10; i++) {<br>            String randomId = idGenerator.generate();<br>            System.out.println(randomId);<br>        }<br>    }<br>}","like_count":0},{"had_liked":false,"id":293391,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1621380723,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1621380723","product_id":100039001,"comment_content":"不用，Logger 只是打印日志，仅仅只是输出，没有未决行为，不用依赖注入。","like_count":0},{"had_liked":false,"id":291704,"user_name":"Geek_31594d","can_delete":false,"product_type":"c1","uid":2030240,"ip_address":"","ucode":"9058787881CE82","user_header":"","comment_is_top":false,"comment_ctime":1620442492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620442492","product_id":100039001,"comment_content":"是否满足单元测试标准很重要","like_count":0},{"had_liked":false,"id":289960,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1134539,"ip_address":"","ucode":"11C598D0723D08","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/cb/ede92cd5.jpg","comment_is_top":false,"comment_ctime":1619278445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619278445","product_id":100039001,"comment_content":"Checklist准备用上","like_count":0},{"had_liked":false,"id":275513,"user_name":"snake","can_delete":false,"product_type":"c1","uid":2347137,"ip_address":"","ucode":"47BFFE4D048156","user_header":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","comment_is_top":false,"comment_ctime":1611567048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611567048","product_id":100039001,"comment_content":"已经把这个checklist记录下来了，很实用<br>https:&#47;&#47;www.yuque.com&#47;docs&#47;share&#47;51fbf73a-0238-4afb-9214-fa12a5ad554e?# 《《设计模式之美》- 代码重构通用checklist》","like_count":0},{"had_liked":false,"id":258069,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1604284762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604284762","product_id":100039001,"comment_content":"小王写代码只需要半小时，保守估计review得1天。<br>加班到凌晨的小王心里很崩溃：“又不是不能用。”<br>但是第二天他会感觉很爽！这是指数级的成长！<br><br>代码检验清单了：<br>1. 目录设置是否合理、模块划分是否清晰？<br>2. 是否容易扩展？添加新功能，是否容易实现？<br>3. 代码是否可以复用？是否可以复用已有的项目代码或类库？是否有重复造轮子？<br>4. 代码是否容易测试？单元测试是否全面覆盖了各种正常和异常的情况？<br>5. 代码是否易读？是否符合编码规范？<br>6. 是否遵循经典的设计原则和思想？<br><br>业务检验清单：<br>1. 代码是否实现了预期的业务需求？<br>2. 代码逻辑是否正确？是否处理了各种异常？<br>3. 日志打印是否得当？是否方便debug排查问题？<br>4. 接口是否易用？<br>5. 代码是否存在并发问题？线程是否安全？<br>6. 性能是否有优化的空间？<br>7. 是否有安全漏洞？输入输出校验是否全面？<br><br>复习一下经典的设计原则和思想<br>SOLID：SRP(单一职责原则)、OCP(开闭原则)、LSP(里式替换原则)、ISP(接口隔离原则)和IOC(依赖反转原则)<br>KISS：保持简单<br>YAGNI：不要过度设计<br>DRY：不要重复<br>LOD：迪米特法则（不该有的依赖，不要依赖，要最小接口，不要最大实现）","like_count":0,"discussions":[{"author":{"id":1440349,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fa/5d/735fdc76.jpg","nickname":"╭(╯ε╰)╮","note":"","ucode":"4CB5FAEEE8CC5D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61903,"discussion_content":"还有没有正在用java1.6的 留个言呗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574786326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1440349,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fa/5d/735fdc76.jpg","nickname":"╭(╯ε╰)╮","note":"","ucode":"4CB5FAEEE8CC5D","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":61944,"discussion_content":"别慌，项目里很多还用1.6，😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574801661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":61903,"ip_address":""},"score":61944,"extra":""}]},{"author":{"id":2739750,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ce/26/f493253d.jpg","nickname":"源不息","note":"","ucode":"2B9FF0B611BC9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551898,"discussion_content":"赞\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645167829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2739750,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ce/26/f493253d.jpg","nickname":"源不息","note":"","ucode":"2B9FF0B611BC9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551897,"discussion_content":"看你学习的那么认真，好小伙子呀\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645167820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035064,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","nickname":"谢小路","note":"","ucode":"C9FE2EB10DC105","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91876,"discussion_content":"你这头像分明想用go啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576849525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1035064,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","nickname":"谢小路","note":"","ucode":"C9FE2EB10DC105","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91955,"discussion_content":"这两年过年假期的时候学一门新语言。 2019猪年学的Julia，2018狗年学的go语言（区块链和Docker火热，还是了解了一下）。鼠年假期还在想学啥呢？ 有没有推荐😂？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576851038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":91876,"ip_address":""},"score":91955,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52565,"discussion_content":"国外不知道，在国内都是现实主义者，哪来给你这么多时间来专门学习，争哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574067979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52577,"discussion_content":"是的，天天996，周末在家躺尸一天，哪有时间学。例如上下班路上3小时可以听听音频，看看电子书。没条件写代码，本子上写也行。想学时间总会有的，从多留言开始吧！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574069345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52565,"ip_address":""},"score":52577,"extra":""},{"author":{"id":1238238,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/de/deaa9da1.jpg","nickname":"光脚造轮子","note":"","ucode":"7B1485B7045D15","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":64375,"discussion_content":"通勤时间3小时，搬家压缩在1小时，这就有2小时来学习了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574946826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52577,"ip_address":""},"score":64375,"extra":""},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1238238,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/de/deaa9da1.jpg","nickname":"光脚造轮子","note":"","ucode":"7B1485B7045D15","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":65106,"discussion_content":"很好的建议！谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574983699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":64375,"ip_address":""},"score":65106,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52489,"discussion_content":"老哥很强势，你讲的这么透彻，我都不用补充了，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574055768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":52575,"discussion_content":"😄 一起加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574069053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52489,"ip_address":""},"score":52575,"extra":""}]}]},{"had_liked":false,"id":251783,"user_name":"工藤新一","can_delete":false,"product_type":"c1","uid":1754668,"ip_address":"","ucode":"F2AFB6F6A42FAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLeXjFHy8wGyrDnm6ib7hjZNjocUHarn0XFc8zLc061Ax99bFmrLN9yAxicklpcjKFx2gHqUKWQ3MRw/132","comment_is_top":false,"comment_ctime":1601868223,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1601868223","product_id":100039001,"comment_content":"只是看到这里，ID生成器我本来以为会讲到雪花算法，因为这个ID生成的话，有很多字符，不是数字类型的话，在数据库查询和索引上面都不占优势。","like_count":0,"discussions":[{"author":{"id":1715988,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/14/840d0925.jpg","nickname":"Varus","note":"","ucode":"B9CB88C248BD93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70093,"discussion_content":"说的很好，正好解决了我的一些学习方向和问题，你给出的这个方向很新颖，可能都是由于是自学的缘故，感觉你的这个学习方向非常实用，赞赞赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575325800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246928,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599533148,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599533148","product_id":100039001,"comment_content":"不影响IdGenerator 类代码的可测试性，因为非业务逻辑需要测试的代码<br>不需要将其通过依赖注入来注入，每个类一个logger对象，不需要扩展","like_count":0},{"had_liked":false,"id":240242,"user_name":"QingShu","can_delete":false,"product_type":"c1","uid":1194854,"ip_address":"","ucode":"36DD8B7F51CBCA","user_header":"","comment_is_top":false,"comment_ctime":1596804585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596804585","product_id":100039001,"comment_content":"logger可以考虑封装或者通过eventbus进行输出，logback初始化在单元测试当中还是需要上下文初始的","like_count":0},{"had_liked":false,"id":220946,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590364222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590364222","product_id":100039001,"comment_content":"魔法数：代码中直接出现的数值是魔法数，影响可读性。要用枚举或常量代替魔法数，需要持久化的数字在阅读数据库时也有阅读性问题。","like_count":0},{"had_liked":false,"id":213657,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1588502430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588502430","product_id":100039001,"comment_content":"什么是专家？就是能提出高质量指导性信息的人，此篇硬核，以后衡量代码的重要指标体系就靠他了","like_count":0},{"had_liked":false,"id":208327,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1587340492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587340492","product_id":100039001,"comment_content":"需要搞成依赖注入","like_count":0},{"had_liked":false,"id":202390,"user_name":"咸鱼","can_delete":false,"product_type":"c1","uid":1179028,"ip_address":"","ucode":"5E79636DE48155","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","comment_is_top":false,"comment_ctime":1585982775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585982775","product_id":100039001,"comment_content":"可以将获取本机hostname这段逻辑考虑放在静态代码块中，在这个Class加载进来初始化后，就获取到hostname，这样的话就不用每次在调用generate方法时重复这个耗时的操作，看到评论里少有提及这个，其中有位使用静态域hostname，不过还是在generate方法里去获取和判断，增加了generate的代码量，没那么简洁了","like_count":0},{"had_liked":false,"id":184063,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583216466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583216466","product_id":100039001,"comment_content":"魔数：程序中出现的数字常量或字符串","like_count":0},{"had_liked":false,"id":184006,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583204126,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1583204126","product_id":100039001,"comment_content":"我个人认为是没有必要的,因为Logger这个类只用于日志打印,并不会过多的代码逻辑上的参与,故不需要设置为依赖注入<br>而且经过本章的思考,我将代码暂时重构为第一版,代码如下<br>public class IdGeneratorUtil {<br>    &#47;&#47;获取到logger对象,方便打印日志<br>    private static final Logger logger = LoggerFactory.getLogger(IdGeneratorUtil.class);<br>    private static final String ASCIIPATTERNTEXT = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;<br>    private static final char[] patternBytes = ASCIIPATTERNTEXT.toCharArray();<br><br>    private static String HOSTNAME;<br>    &#47;**<br>     * 此函数用于自动生成一个字符串形式的id<br>     *<br>     * @return id<br>     *&#47;<br>    public static String generator() {<br>        String id = &quot;&quot;;<br>        if (Strings.isNullOrEmpty(HOSTNAME)){<br>            try {<br>                String hostName = InetAddress.getLocalHost().getHostName();<br>                if (!Strings.isNullOrEmpty(hostName)) {<br>                    String[] hosts = hostName.split(&quot;&#47;&#47;&quot;);<br>                    HOSTNAME = hosts[hosts.length - 1];<br>                }else{<br>                    HOSTNAME = getRandomTextByDigit(8);<br>                }<br>            } catch (UnknownHostException e) {<br>                HOSTNAME = getRandomTextByDigit(8);<br>                logger.error(&quot;hostname获取不到&quot;, e);<br>            }<br>        }<br>        String randomText = getRandomTextByDigit(8);<br>        id = String.format(&quot;%s-%s-%d&quot;, HOSTNAME, randomText, System.currentTimeMillis());<br>        logger.info(&quot;本次获取的id为{}&quot;,id);<br>        return id;<br>    }<br><br>    &#47;**<br>     * 根据传入的位数生成对应位数的字符串<br>     *<br>     * @param digit 位数<br>     * @return 随机字符串<br>     *&#47;<br>    public static String getRandomTextByDigit(Integer digit) {<br>        if (digit &lt;= 0) {<br>            return &quot;&quot;;<br>        }<br>        int length = ASCIIPATTERNTEXT.length();<br><br>        StringBuilder result = new StringBuilder();<br>        Random random = new Random();<br><br>        for (int i = digit; i &gt; 0; i--) {<br>            char patternByte = patternBytes[random.nextInt(length)];<br>            result.append(patternByte);<br>        }<br>        return result.toString();<br>    }<br>    <br>}","like_count":0,"discussions":[{"author":{"id":1004375,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/57/787a0c7b.jpg","nickname":"刘少科Mico","note":"","ucode":"DD9610AB096D1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77131,"discussion_content":"还学过VB，毕业很多年了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575890696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182383,"user_name":"拙言","can_delete":false,"product_type":"c1","uid":1310192,"ip_address":"","ucode":"40179CFED35579","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/f0/67ed878c.jpg","comment_is_top":false,"comment_ctime":1582776659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582776659","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":180952,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1582448482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582448482","product_id":100039001,"comment_content":"两张 Checklist 图片果断收藏了<br><br>国外有 Peter，争哥有小王","like_count":0},{"had_liked":false,"id":179198,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1053390,"ip_address":"","ucode":"ABB3F1A63E102A","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/ce/a8c8b5e8.jpg","comment_is_top":false,"comment_ctime":1581934919,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581934919","product_id":100039001,"comment_content":"老师好，请教个问题：generate函数内部涉及到Logger对象，它是用static修饰的全局变量，它算不算共享变量？会不会影响线程安全呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474920,"discussion_content":"可能暂时不会了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045455,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","nickname":"Milittle","note":"","ucode":"80E566639A8ABB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53773,"discussion_content":"推荐去看廖雪峰 很快入门 基本语法没啥问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574214804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178968,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1581864821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581864821","product_id":100039001,"comment_content":"应将Logger通过依赖注入的方式进行设置，因为Logger依赖的是第三方的框架，在单元测试的时候不容易Mock","like_count":0},{"had_liked":false,"id":176174,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1580979198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580979198","product_id":100039001,"comment_content":"这个两个checklist可以作为以后检查自己代码的标准了","like_count":0},{"had_liked":false,"id":174093,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1579959879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579959879","product_id":100039001,"comment_content":"打卡34节。过年期间第一次打卡。<br>这节课可以学习重构的一些标准，包括常规的检查项和业务检查项，这个清单确实可以打印出来做为自己代码的开发规范。<br>关于思考题logger是否需要注入问题，我觉得不用，只是一个日志打印，不影响业务逻辑。","like_count":0},{"had_liked":false,"id":174047,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1579926783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579926783","product_id":100039001,"comment_content":"Looger 方法一般没有未决行为, 不会影响测试性, 不需要依赖注入, 如果依赖注入, 就显得多余了. 从现在开始开代码, 开始有自己的分析了","like_count":0},{"had_liked":false,"id":173994,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579856233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579856233","product_id":100039001,"comment_content":"打卡<br>如何发现代码质量问题：<br>大的方向是否可读、可扩展、可维护、灵活、简洁、可复用、可测试<br>具体落实，通用的关注点有：<br>1）目录设置是否合理、模块划分是否清晰、代码结构是否满足“高内聚、松耦合”？<br>2）是否遵循经典的设计原则和设计思想（SOLID、DRY、KISS、YAGNI、LOD 等）？<br>3）设计模式是否应用得当？是否有过度设计？<br>4）代码是否容易扩展？如果要添加新功能，是否容易实现？<br>5）代码是否可以复用？是否可以复用已有的项目代码或类库？是否有重复造轮子？<br>6）代码是否容易测试？单元测试是否全面覆盖了各种正常和异常的情况？<br>7）代码是否易读？是否符合编码规范（比如命名和注释是否恰当、代码风格是否一致等）？<br><br>关于业务的一些通用关注点：<br>1）代码是否实现了预期的业务需求？<br>2）逻辑是否正确？是否处理了各种异常情况？<br>3）日志打印是否得当？是否方便 debug 排查问题？<br>4）接口是否易用？是否支持幂等、事务等？<br>5）代码是否存在并发问题？是否线程安全？<br>6）性能是否有优化空间，比如，SQL、算法是否可以优化？<br>7）是否有安全漏洞？比如输入输出校验是否全面？<br>","like_count":0},{"had_liked":false,"id":173774,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1579683252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579683252","product_id":100039001,"comment_content":"突然发现前面的东西有些记不太清了,虽然也记了笔记,但是实际分析的时候有些东西却想不起来了,还是要多把争哥讲的东西多实战练习才行","like_count":0},{"had_liked":false,"id":173717,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1579668656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579668656","product_id":100039001,"comment_content":"课堂讨论answer:<br><br>先说结论: 不需将Logger依赖注入.<br><br>Logger作用仅为generate()方法发生异常时,打印一条提示消息.除此之外,再无他用.<br>如果使用依赖注入,将破坏类高内聚的特性.<br><br>此外,generate()方法的错误处理目前看来是存在问题的,可能的解决方案是发生异常时,将异常抛给上层调用者.但本人十分厌恶Java的Checked Exception特性,严重影响代码可读性,对于异常的捕获处理也未必比Runtime Exception好用到哪去.<br>","like_count":0},{"had_liked":false,"id":173602,"user_name":"牧名","can_delete":false,"product_type":"c1","uid":1020390,"ip_address":"","ucode":"193F0F33E1AB47","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/e6/03582dee.jpg","comment_is_top":false,"comment_ctime":1579612398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579612398","product_id":100039001,"comment_content":"1. try-catch 范围过大，只需要try-cache InetAddress.getLocalHost().getHostName();即可<br>2. 随机数范围调整为74（122-48）可适度减少无谓的循环。另外生成数字，大小写字母其实全部使用&#39;0&#39;+randomInt即可（randomInt取值范围 0-74）","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474875,"discussion_content":"因为专栏中没有用到 毕竟泛型不是所有的语言都支持 而且稍微还有点复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574055510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173356,"user_name":"JOsuny","can_delete":false,"product_type":"c1","uid":1319513,"ip_address":"","ucode":"5F36D3D1AF83EA","user_header":"https://static001.geekbang.org/account/avatar/00/14/22/59/781b6fa5.jpg","comment_is_top":false,"comment_ctime":1579509778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579509778","product_id":100039001,"comment_content":"我来啦","like_count":0},{"had_liked":false,"id":173295,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1579497171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579497171","product_id":100039001,"comment_content":"回答问题：<br>1.不需要注入。因为日志工具与该业务要验证功能的现象无关。如果要挑选日志工具实现类，可以单独为其写测试类，验证各方面指标差异。<br><br>demo代码还存在的问题：<br><br>1.try太大了，应该局限在hostname那块，大于自己的try范围会引人误解。<br><br>2.为取host最后一个字段而生成arr没必要，直接sub取最后一个字段语义更强。（jdk的split和sub都有点问题,条件允许还是用工具好点）。<br><br>3.异常比空字符串语义其实更准确些，一般我偏向于把异常处理抛给api调用方，而不是这里的捕捉打印日志。（另外，异常堆栈耗性能，像这种异常（不需要看调用链追查异常原因的），健全的异常信息足已）","like_count":0},{"had_liked":false,"id":173291,"user_name":"YourSweetHeart","can_delete":false,"product_type":"c1","uid":1242122,"ip_address":"","ucode":"38843F447B03F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","comment_is_top":false,"comment_ctime":1579495425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579495425","product_id":100039001,"comment_content":"说实话，我觉得小王写的还行，<br>要是我也会这样写","like_count":0},{"had_liked":false,"id":173265,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1579490816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579490816","product_id":100039001,"comment_content":"日志是采用工厂模式，不用人为的创建对象，依赖注入不希望自己new出一个对象，也符合这个要求，最终日志只是打印，可以设置对于应日志级别，可以进行动态调整","like_count":0},{"had_liked":false,"id":173264,"user_name":"satoshi","can_delete":false,"product_type":"c1","uid":1114872,"ip_address":"","ucode":"11508C95259E97","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLQcr5YD5xznNjMxltFI04NgpTWWicKD3QicBfshIEWtckXNYMicjdNfQu8w5hSTGicuxUg6sOI8yfoNw/132","comment_is_top":false,"comment_ctime":1579490722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579490722","product_id":100039001,"comment_content":"以前真的就是乱撞，就算搞好了心里也很慌，现在感觉有章法了，真是豁然开朗啊","like_count":0},{"had_liked":false,"id":173253,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1579487243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579487243","product_id":100039001,"comment_content":"在今天的代码中，打印日志的 Logger 对象被定义为 static final 的，并且在类内部创建，这是否影响到 IdGenerator 类代码的可测试性？是否应该将 Logger 对象通过依赖注入的方式注入到 IdGenerator 类中呢？<br>虽然 Logger 对象是在类内部创建出的全局变量,但是它与业务需求无关,其次没有未决行为无论是顺序执行和并行执行都不影响结果的幂等性,所以不会影响 IdGenerator 类代码的可测试性.<br>所以不需要通过依赖注入方式注入到IdGenerator 类中.","like_count":0},{"had_liked":false,"id":173205,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1579477377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579477377","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":173203,"user_name":"有所谓无所谓","can_delete":false,"product_type":"c1","uid":1796406,"ip_address":"","ucode":"928FE981B71A07","user_header":"","comment_is_top":false,"comment_ctime":1579476635,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1579476635","product_id":100039001,"comment_content":"日志目前我们项目都是用注解方式进行.不知道是否合理？这","like_count":0,"discussions":[{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143141,"discussion_content":"一样的, 只不过简化了书写\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579491760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}