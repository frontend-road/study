{"id":658963,"title":"11｜DPlayer播放器综合应用：怎样实现自己的第一个视频播放器？","content":"<p>你好，我是Barry。</p><p>这节课，我们一起来学习如何在视频平台中实现自己的第一个视频播放器。</p><p>在视频网站中，播放器是不可或缺的存在，我们在日常开发中，用的大多是网页开发，很少用到播放器。相信通过这节课的学习，你对播放器的理解和使用会更上一个台阶。</p><p>今天，我将带你从“Hello World”起，<strong>探索如何使用前端技术在网页上播放视频。</strong>在开始实战之前，让我们先了解一下网页上播放视频的由来。</p><h2>视频播放器的前世今生</h2><p>说到播放器，就不得不提到HTML5的一些新的特性了。我们都知道HTML5在老版本的基础上加入了很多新特性，比如后面这些特性。</p><ul>\n<li>用于绘画的 canvas 元素。</li>\n<li>用于媒介回放的 video 和 audio 元素。</li>\n<li>对本地离线存储更好的支持。</li>\n<li>新的特殊内容元素，比如 article、footer、header、nav、section。</li>\n<li>新的表单控件，比如 calendar、date、time、email、url、search。</li>\n</ul><p>可以看到，其中一个重要的特性就是支持video标签在网页上播放视频。</p><p>下面这行代码就可以实现一个简单的HTML5的视频播放器demo。</p><pre><code class=\"language-javascript\">&lt;video src=\"movie.ogg\" controls=\"controls\"&gt;&lt;/video&gt;\n</code></pre><!-- [[[read_end]]] --><p>标签上还可以设置其他的属性，常见的属性如下。</p><ul>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_autoplay.asp\">autoplay</a>：其值为autoplay，如果出现该属性，则视频在就绪后马上播放。</p>\n</li>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_controls.asp\">controls</a>：其值为controls，如果出现该属性，则向用户显示控件，比如播放按钮。</p>\n</li>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_height.asp\">height</a>：其值为pixels，表示视频播放器的高度。</p>\n</li>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_loop.asp\">loop</a>：其值为loop，如果出现该属性，则当媒介文件完成播放后再次开始播放。</p>\n</li>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_muted.asp\">muted</a>：其值为muted，它规定视频的音频输出应该被静音。</p>\n</li>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_poster.asp\">poster</a>：其值为URL，它规定视频下载时显示的图像，或者用户点击播放按钮前显示的图像。</p>\n</li>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_preload.asp\">preload</a>：其值为preload，如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</p>\n</li>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_src.asp\">src</a>：其值为url，要播放的视频的 URL。</p>\n</li>\n<li>\n<p><a href=\"https://www.w3school.com.cn/tags/att_video_width.asp\">width</a>：其值为pixels，表示视频播放器的宽度。</p>\n</li>\n</ul><p>这样一个基础的视频播放器就完成啦！但可能有的同学又问了，这个视频播放器的功能有点丑，功能还有点少？</p><p>是的，HTML版的播放器只具备最基本的功能，且各种浏览器的兼容性也不是很好。所以企业真正用它来做商业化的并不多。企业中主流的视频播放器包括VideoJS和DPlayer。DPlayer支持弹幕，文档看起来更方便。</p><p>所以，接下来我们就重点聊聊DPlayer视频播放器，包括百度、腾讯、小红书等在内的很多中国企业都在使用。</p><h2>为什么选择DPlayer来做项目中的视频播放器？</h2><p><strong>DPlayer</strong>&nbsp;是一个HTML5视频播放器，并且支持弹幕、清晰度切换、实时视频（HTTP Live Streaming，M3U8格式）以及 FLV 格式。</p><p>此外，它还有以下优点。</p><ul>\n<li>良好的跨浏览器样式，更美观。</li>\n<li>支持流媒体格式。</li>\n<li>没有浏览器兼容问题。</li>\n</ul><p>简单来说呢，原生的video标签有很多功能需要我们手动去扩展。而这些事情DPlayer已经帮我们做好了。我们只需要引用一下别人造好的轮子，就可以开心地跑代码啦。</p><p>现在，我们已经全面认识了DPlayer，下面我们就一起来实操应用一下。</p><h2>怎么样使用DPlayer？</h2><p>我们先来看一下一些 DPlayer 常用的属性配置。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/8e/f2210339af277f4bdfc3aff314daeb8e.jpg?wh=3530x3797\" alt=\"\"></p><p>DPlayer可以在HTML中使用，也可以在框架中使用，二者大同小异。我们先来学习它在HTML中的使用。</p><p>把大象装冰箱总共分三步，把DPlayer装到网页上也要三步走。</p><p><strong>第一步，引入Dplayer。</strong></p><p>你可以在GitHub上的DPlayer项目里下载js文件。</p><p>打开<a href=\"https://github.com/DIYgod/DPlayer/tree/master/dist\">这个链接</a>，找到DPlayer.min.js ，右键链接另存为把文件下载下来。</p><pre><code class=\"language-xml\">&lt;script src=\"dist/DPlayer.min.js(你的本地路径)\"&gt;&lt;/script&gt;\n</code></pre><p><strong>第二步，在HTML中定义挂载的元素，这里需要定义一个ID，方便后面通过ID进行挂载。</strong></p><pre><code class=\"language-xml\">&lt;div id=\"player1\"&gt;&lt;/div&gt;\n</code></pre><p><strong>第三步，在js中把播放器属性设置好，并挂载到上一步定义好的元素上。</strong></p><p>我们这里用container属性来挂载元素，把 autoplay 设置为不自动播放，然后用 theme 属性给播放器加上主题颜色。loop为true，代表循环播放；lang 为 zh，代表语言为中文；preload值为auto，代表自动预加载。</p><p>video里是视频的信息，url是视频的链接，pic是封面图片的链接。</p><pre><code class=\"language-xml\">&lt;script&gt;\nvar dp = new DPlayer({\n&nbsp; &nbsp; container: document.getElementById('player1'),&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 可选，player元素\n&nbsp; &nbsp; autoplay: false,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 可选，自动播放视频，不支持移动浏览器\n&nbsp; &nbsp; theme: '#FADFA3',&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 可选，主题颜色，默认: #b7daff\n&nbsp; &nbsp; loop: true,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 可选，循环播放音乐，默认：true\n&nbsp; &nbsp; lang: 'zh',&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 可选，语言，`zh'用于中文，`en'用于英语 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 可选，绑定热键，包括左右键和空格，默认值：true\n&nbsp; &nbsp; preload: 'auto',&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 可选，预加载的方式可以是'none''metadata''auto'，默认值：'auto'\n&nbsp; &nbsp; video: {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 必需，视频信息\n&nbsp; &nbsp; &nbsp; &nbsp; url: '若能绽放光芒.mp4',&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 必填，视频网址\n&nbsp; &nbsp; &nbsp; &nbsp; pic: '若能绽放光芒.png'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 可选，视频截图\n&nbsp; &nbsp; }\n});\n&lt;/script&gt;\n</code></pre><p>通过上面的实践应用，就可以实现在HTML中使用DPlayer播放器，那接下来我们继续来看一下在Node中该如何使用。</p><p>其实要在Node框架中使用 DPlayer 的方法也是相同的。</p><p><strong>第一步，安装Dplayer依赖。</strong></p><pre><code class=\"language-javascript\">$ npm install dplayer --save\n</code></pre><p><strong>第二步，在HTML中定义挂载的元素。</strong></p><pre><code class=\"language-xml\">&lt;div id=\"player1\" class=\"dplayer\"&gt;&lt;/div&gt;\n</code></pre><p><strong>第三步，在js中把播放器属性设置好，并挂载到上一步定义好的元素上。</strong></p><pre><code class=\"language-plain\">import DPlayer from 'dplayer';\n\nconst dp = new DPlayer(options);\n</code></pre><p>这样我们的视频播放器就基本完成了。</p><p>如果我们要处理一些业务逻辑，需要在对应的代码执行模块去操作播放器，这时候我们还需要用到一些API。下面我给你介绍几种最常用的API。</p><ul>\n<li><code>dp.play()</code> : 播放视频。</li>\n<li><code>dp.pause()</code>: 暂停视频。</li>\n<li><code>dp.seek(time: number)</code> ：跳转到特定时间。例如：</li>\n</ul><pre><code class=\"language-plain\">dp.seek(100);\n</code></pre><ul>\n<li><code>dp.toggle()</code>: 切换播放和暂停。</li>\n<li><code>dp.notice(text: string, time: number)</code>: 显示通知，它的时间的单位为毫秒，默认时间为 2000 毫秒，默认透明度为 0.8。</li>\n<li><code>dp.switchQuality(index: number)</code>: 切换清晰度。</li>\n<li><code>dp.speed(rate: number)</code>: 设置视频速度。</li>\n<li>设置视频音量</li>\n</ul><pre><code class=\"language-plain\">dp.volume(0.1, true, false);\n</code></pre><ul>\n<li><code>dp.video.currentTime</code>: 返回视频当前播放时间。</li>\n<li><code>dp.video.duration</code>: 返回视频总时间。</li>\n<li><code>dp.video.paused</code>: 返回视频是否暂停。</li>\n<li><code>dp.danmaku</code>：弹幕功能。</li>\n<li><code>dp.danmaku.send(danmaku, callback: function)</code>: 提交一个新弹幕。</li>\n</ul><pre><code class=\"language-plain\">dp.danmaku.send(\n    {\n        text: 'dplayer is amazing',\n        color: '#b7daff',\n        type: 'right', // should be `top` `bottom` or `right`\n    },\n    function () {\n        console.log('success');\n    }\n);\n</code></pre><ul>\n<li><code>dp.danmaku.opacity(percentage: number)</code>：设置弹幕透明度，透明度值在0到1之间。</li>\n</ul><pre><code class=\"language-plain\">dp.danmaku.opacity(0.5);\n</code></pre><ul>\n<li><code>dp.danmaku.clear()</code>: 清除所有弹幕。</li>\n<li><code>dp.danmaku.hide()</code>: 隐藏弹幕。</li>\n<li><code>dp.danmaku.show()</code> ：显示弹幕。</li>\n<li>如果想进入全屏，我们就通过后面的方式来实现。</li>\n</ul><pre><code class=\"language-plain\">dp.fullScreen.request('web');\n</code></pre><ul>\n<li>退出全屏则是通过后面的方式。</li>\n</ul><pre><code class=\"language-plain\">dp.fullScreen.cancel('web');\n</code></pre><p>其他属性和API你可以参考<a href=\"https://dplayer.diygod.dev/zh/\">官方文档</a>。</p><p>现在，相信你已经对DPlayer有所了解啦，是不是感觉so easy!</p><p>可以说，我们轻轻松松就已经成功了一半了。俗话说百说不如一练。下面我们来尝试结合业务，实现一个视频详情页。你可以跟着我一起实现自己的视频详情页面。</p><h2>视频详情页面的实现</h2><p>我们先来看一下成品的效果图。</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/b0/e0d38c0dea32b375e560d7ca719db7b0.jpg?wh=2961x1689\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/57/c2/57edd99af43a028a76519f50b4e500c2.jpg?wh=2961x1600\" alt=\"\"></p><p>视频详情页是由首页的视频列表页点击进入的，链接上会带上当前视频的ID。</p><p>页面中的功能如下。</p><p>1.播放器，用来观看视频。<br>\n2.评论、关注、点赞、收藏。<br>\n3.推荐视频、排行榜。</p><p>我们先来<strong>构思一下页面的布局。</strong></p><p>我们把整个页面分为上下两部分，每个部分又以左右结构来呈现。上面从左至右分别是视频播放器、推荐视频，下面依次是评论和排行榜。</p><p>接下来我们一步步实现这个构想。我们的页面使用的是 <strong>Vue + ElementUI + DPlayer</strong> 技术。</p><p>首先，我们用Element的栅格来实现布局。</p><pre><code class=\"language-xml\">&lt;div class=\"top\"&gt;\n  &lt;el-row :gutter=\"20\"&gt;\n    &lt;el-col :span=\"20\"&gt;&lt;div class=\"grid-content bg-purple\"&gt;&lt;div&gt;这里是播放器&lt;/div&gt;&lt;/el-col&gt;\n    &lt;el-col :span=\"4\"&gt;&lt;div class=\"grid-content bg-purple\"&gt;&lt;div&gt;这里是推荐视频&lt;/div&gt;&lt;/el-col&gt;\n  &lt;/el-row&gt;\n&lt;/div&gt;\n&lt;div class=\"bottom\"&gt;\n  &lt;el-row :gutter=\"20\"&gt;\n    &lt;el-col :span=\"20\"&gt;&lt;div class=\"grid-content bg-purple\"&gt;&lt;div&gt;这里是评论&lt;/div&gt;&lt;/el-col&gt;\n    &lt;el-col :span=\"4\"&gt;&lt;div class=\"grid-content bg-purple\"&gt;&lt;div&gt;这里是排行榜&lt;/div&gt;&lt;/el-col&gt;\n  &lt;/el-row&gt;\n&lt;/div&gt;\n</code></pre><p>不管从首页视频列表，还是从二级页面视频列表跳转到视频详情页，在请求的链接中都会带上视频的ID。当我们点击列表中的视频进入页面时，会首先向后端发送请求，通过ID获取到视频的信息。</p><p>接下来，我们在Vue的data里定义一些一会儿要用的数据。</p><pre><code class=\"language-javascript\">data() {\n    return {\n      info: {},             // 视频信息\n      recommend_list: [],   // 推荐列表\n      ranking_list: [],     // 排行榜\n    }\n}\n</code></pre><p>在框架中，通常使用Axios来发送HTTP请求。举个例子，我们现在要请求的是 “/video/info” 这个地址的数据，是get请求。那么代码如下。</p><pre><code class=\"language-xml\">this.$axios.get(\"/video/info\").then((data) =&gt; {\n      console.log(data);\n      this.info= data.data;\n});\n</code></pre><p>返回的数据结构应该是下面的样子。</p><pre><code class=\"language-json\">   {\n        title: \"全程高能！此视频无人能存活到最后！\",  //视频标题\n        url:\"http://www.baidu.com/123.mp4\",     //视频url\n        play_times: 1000,                       //播放次数\n        like_times: 10000,                      //点赞数\n        collect_times:1000,                     //收藏数\n        auther: {                               //视频作者的信息\n          userId：\"10001\"，                      //作者id\n          avatar:\"http://www.baidu.com/1.jpg\",  //作者头像\n          nickName: \"天线宝宝\"                   //作者昵称\n          hasFollow: false                      //当前用户是否关注了作者\n        },\n   }\n</code></pre><p>接下来，我们把视频URL配置到视频播放器上，这样视频就可以播放了。</p><pre><code class=\"language-xml\">const dp = new DPlayer({\n  ....\n  video: this.info\n});\n</code></pre><p>那刚刚我们学过的API要什么时候使用呢？我给你举几个例子。</p><p>如果用户离开前，我们要记录用户看了多长时间的视频，发送给后端来统计用户行为，就要用到刚刚我讲过的播放器API。</p><pre><code class=\"language-json\">dp.video.currentTime()\n</code></pre><p>同理，假设用户点击了页面上的广告需要暂停视频，看完广告后又再播放视频，这时就要用到播放和暂停API。</p><pre><code class=\"language-json\">dp.play()\ndp.pause()\n</code></pre><p>然后，我们在页面上把视频的信息展示给用户，包括视频标题、作者、点赞数、评论等等。</p><pre><code class=\"language-xml\">&lt;div class=\"left-container\"&gt;\n   &lt;div id=\"dplayer\"&gt;&lt;/div&gt;\n      &lt;div class=\"video-bottom-area\"&gt;\n          &lt;span class=\"play-times\"&gt;\n            &lt;span&gt;{{ info.play_times }}&lt;/span&gt;次播放量\n          &lt;/span&gt;\n          &lt;span class=\"play-times\"&gt;\n            &lt;span&gt;{{ info.play_times }}&lt;/span&gt;个赞\n          &lt;/span&gt;\n          &lt;span class=\"play-times\"&gt;\n            &lt;span&gt;{{ info.play_times }}&lt;/span&gt;次收藏\n          &lt;/span&gt;\n          &lt;div class=\"auther-info rt clear\"&gt;\n            &lt;div class=\"lf\"&gt;\n              &lt;img :src=\"info.auther.photoUrl\" alt /&gt;\n            &lt;/div&gt;\n            &lt;p class=\"author-name\"&gt;\n              {{ info.auther.nickName }}\n            &lt;/p&gt;\n            &lt;button\n              v-show=\"!info.auther.hasFollow\"\n              class=\"button-primary rt\"\n            &gt;\n              关注\n            &lt;/button&gt;\n            &lt;button\n              v-show=\"info.auther.hasFollow\"\n              class=\"button-primary rt\"\n            &gt;\n              取消关注\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>接下来，我们分别请求排行榜和推荐列表的接口，展示在页面上。</p><pre><code class=\"language-javascript\">this.$axios.get(\"/video/recommend\").then((data) =&gt; {\n      console.log(data);\n      this.recommend_list = data.data.rows;\n    });\nthis.$axios.get(\"/video/ranking\").then((data) =&gt; {\n      console.log(data);\n      this.ranking_list = data.data.rows;\n    });\n</code></pre><p>列表这里我们用到的数据结构是数组，每个元素是列表上的一项。返回的数据结构如下。</p><pre><code class=\"language-json\">1.recommend_list:{\n  status: 200,\n  message: 'success',\n  data: {\n    total: 5,\n    rows: [{\n      id: '10001',\n      image: './static/similar1.jpg',\n      name: '炉石传说'\n    },{\n      id: '10002',\n      image: './static/similar2.jpg',\n      name: '小猪佩奇'\n    },{\n      id: '10003',\n      image: './static/similar3.jpg',\n      name: '小恐龙'\n    },{\n      id: '10004',\n      image: './static/similar4.jpg',\n      name: '小兔兔'\n    },{\n      id: '10005',\n      image: './static/similar5.jpg',\n      name: '小喵咪'\n    }]\n  }\n}\n2.ranking_list:{\n  status: 200,\n  message: 'success',\n  data: {\n    total: 10,\n    'rows': [{\n        img: \"./static/1.jpg\",\n        title: \"这才是大学生该有的快乐生活！\",\n      },{\n        img: \"./static/2.jpg\",\n        title: \"ChatGPT会抢走哪些工作？我算是玩明白了…\",\n      },{\n        img: \"./static/3.jpg\",\n        title: \"92岁的世界最高龄模特，纵横T台76年 …\",\n      },{\n        img: \"./static/4.jpg\",\n        title: \"泳装芭芭拉“冲”呀！\",\n      },{\n        img: \"./static/5.jpg\",\n        title: \"EOE单曲《和你在一起》首次披露舞台！\",\n      },{\n        img: \"./static/1.jpg\",\n        title: \"如何30秒快速清空大脑停止胡思乱想？\",\n      },{\n        img: \"./static/2.jpg\",\n        title: \"《将军》他翻唱一直可以的\",\n      },{\n        img: \"./static/3.jpg\",\n        title: \"一个初中生花光压岁钱cos的W\",\n      },{\n        img: \"./static/4.jpg\",\n        title: \"1天学费1200！不听劝裸辞去学馒头了！\",\n      },{\n        img: \"./static/5.jpg\",\n        title: \"【原神】当小绫华开始阴阳怪气\",\n      }]\n  }\n}\n</code></pre><p>右侧的排行榜和右下方的推荐，都是其他视频详情页的链接入口。我们只需要分别向后端服务器请求到要展示的标题和图片，在用户点击的时候进行跳转并更换视频ID就可以了。</p><p>后面是推荐列表的参考代码。</p><pre><code class=\"language-xml\">        &lt;ul class=\"recommend-list\"&gt;\n          &lt;li\n            v-for=\"(item, index) in recommend_list\"\n            :key=\"index\"\n            :style=\"{ backgroundImage: `url(${item.image})` }\"\n          &gt;\n            &lt;div class=\"mask\"&gt;\n              &lt;p&gt;{{ item.name }}&lt;/p&gt;\n            &lt;/div&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n</code></pre><p>接下来是排行榜的参考代码。</p><pre><code class=\"language-xml\">    &lt;div class=\"ranking-list\"&gt;\n        &lt;p class=\"sub-title\"&gt;排行榜&lt;/p&gt;\n        &lt;ul&gt;\n          &lt;li v-for=\"(item, index) in ranking_list\" :key=\"index\"&gt;\n            &lt;p&gt;\n              &lt;span&gt;{{index + 1}}&lt;/span&gt;\n              &lt;span&gt;{{ item.title }}&lt;/span&gt;\n            &lt;/p&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n     &lt;/div&gt;\n</code></pre><h2>小结</h2><p>这样，我们就实现了一个自己的视频播放页，大功告成！下面我们来回顾一下这节课的重点内容。</p><p>这节课，我们先是了解了原生HTML的Video播放器，学习了它的常见属性。但HTML版的播放器的兼容性并不是很好，并不适合企业进行商业化的应用，我们也借此引出了企业中常用的两种播放器：VideoJS和DPlayer。</p><p>接着，我们学习了DPlayer的常用属性和API，以及如何在HTML框架中使用它，借此，我们可以轻松应对不同场景下的播放器需求。</p><p>在工作中，企业的选型可能会有所不同，我们只需要掌握使用一款播放器的思路，其他组件也是一通百通的。这个思路可以总结为下面三步。</p><p><strong>1.引用（HTML中需要引用文件，框架中需要 npm install 安装依赖包）。</strong><br>\n<strong>2.在HTML中定义挂载的元素。</strong><br>\n<strong>3.在js中把播放器属性设置好，并挂载到上一步定义好的元素上。</strong></p><p>在学习了播放器应用的思路和方法之后，我们还一起通过视频详情页这个模块进行了实操。在这个环节，我们除了要实现基本的视频功能外，还要考虑业务逻辑设计、页面的布局、页面的功能模块等核心要素。相信经过这部分内容的学习，你对DPlayer的掌握会更加全面，在技术、业务逻辑和项目实现这些方面也会有所进步。</p><p>最后，我们还一起熟悉了实际项目中后端数据的请求方式，并结合实际的前端数据需求，对后端数据格式进行了设计、封装，这也是我们这节课非常重要的部分，也是为学习后端部分做的一个小的铺垫。</p><p>这节课的内容到这里就结束了。下节课，我们会更进一步，去看看视频的互动功能，敬请期待。</p><h2>思考题</h2><p>如果我们想要在用户点击视频暂停的时候，弹出一个弹窗，你有什么好的实现方法？</p><p>欢迎你在留言区和我交流互动，如果觉得这节课对你有启发的话，也推荐你把它分享给更多朋友。</p>","neighbors":{"left":{"article_title":"10｜详情页实现：如何实现需求定制化？","id":658229},"right":{"article_title":"12｜视频发布功能实现：怎样满足用户发布视频的需求？","id":659854}},"comments":[{"had_liked":false,"id":375030,"user_name":"宋小宋^_^!","can_delete":false,"product_type":"c1","uid":2201080,"ip_address":"上海","ucode":"E7A6F84441FDB7","user_header":"https://static001.geekbang.org/account/avatar/00/21/95/f8/0906c158.jpg","comment_is_top":false,"comment_ctime":1684821570,"is_pvip":false,"replies":[{"id":136900,"content":"你的这个代码是没问题的，我也给你跑了代码，视频完全可以播放，所以应该是你其他组件的问题，你好好检查一下全局性的函数调用上有没有错误使用的，如果没有解决，或者发现其他问题，你给我再留言。","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1684986994,"ip_address":"北京","comment_id":375030,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"老师，我想先实现一个最简单播放器的例子，但是过程中一直报错，百度了一圈也没解决，现在是控制台报错 Uncaught TypeError: Cannot call a class as a function，下面是我的代码\n\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;div id=&quot;dplayer&quot;&gt;&lt;&#47;div&gt;\n  &lt;&#47;div&gt;\n&lt;&#47;template&gt;\n&lt;script&gt;\nimport DPlayer from &#39;dplayer&#39; \nexport default {\n  name:&#39;PlayComponent&#39;, \n  mounted(){\n    const dp = new DPlayer({\n      container:document.getElementById(&quot;dplayer&quot;),\n      video: {url: &#39;http:&#47;&#47;static.smartisanos.cn&#47;common&#47;video&#47;t1-ui.mp4&#39;}\n      })}}\n&lt;&#47;script&gt;\n","like_count":0,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619325,"discussion_content":"你的这个代码是没问题的，我也给你跑了代码，视频完全可以播放，所以应该是你其他组件的问题，你好好检查一下全局性的函数调用上有没有错误使用的，如果没有解决，或者发现其他问题，你给我再留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684986994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3789470,"avatar":"","nickname":"Geek_8c0feb","note":"","ucode":"00DF5C0004B3AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632647,"discussion_content":"因为官网都没说，必须要引入H5播放器或者flash播放器，DPlayer才能运行，npm install video.js然后引入css，在mian.js中，import &#34;video.js/dist/video-js.css&#34;;这样就不会报你说的那个错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701139499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374720,"user_name":"佩慎斯予氪蕾沐","can_delete":false,"product_type":"c1","uid":3605445,"ip_address":"广西","ucode":"D6230EECBC275A","user_header":"https://static001.geekbang.org/account/avatar/00/37/03/c5/b3364e49.jpg","comment_is_top":false,"comment_ctime":1684367325,"is_pvip":false,"replies":[{"id":136750,"content":"嗯嗯，这个解决方法的思路还是非常清晰的，我也可以向你推荐一种方式，就是可以通过Dplayer自身具备的钩子方法dp.pause()方法，在方法体内直接写弹窗的触发方法，弹出即可，后边你可以尝试一下。","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1684401011,"ip_address":"北京","comment_id":374720,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"我没有工作经验，如果是我，我会想办法通过监听点击的方式，或者watch监听某个和暂停相关变量，再使用v-if展示弹窗面板，或者直接写好弹窗面板，用点击来控制显示隐藏display为none等等。","like_count":0,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618636,"discussion_content":"嗯嗯，这个解决方法的思路还是非常清晰的，我也可以向你推荐一种方式，就是可以通过Dplayer自身具备的钩子方法dp.pause()方法，在方法体内直接写弹窗的触发方法，弹出即可，后边你可以尝试一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684401011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374705,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1684331002,"is_pvip":false,"replies":[{"id":136751,"content":"1、在浏览器中，Vue.js 应用程序的代码通常被编译成一个或多个 JavaScript 文件，并在 HTML 文件中使用 &lt;script&gt; 标签引入这些文件，之后浏览器会加载这些 JavaScript 文件，并将它们编译成一个或多个 JavaScript 文件，然后在浏览器中执行这些文件，这样就能实现在浏览器内呈现了。\n2、Canva在网页端和安卓端并非同一种技术，在网页端，Canva主要采用了HTML、CSS和JavaScript技术来构建富文本编辑器，在安卓端，Canva则采用了完整的前端框架技术，包括HTML模板、JavaScript代码、组件等。当然都是基于相同的前端技术。\n3、Node.js 在前端工程中不但是支持 NPM，它还提供了基础服务、模块化开发、全局状态管理和高效的 API 等多项功能，这样开发者可以更加高效地构建前端应用程序。\n这是我的接单，希望对你有所帮助，继续加油\n","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1684402675,"ip_address":"北京","comment_id":374705,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"请教老师几个问题：\nQ1: 用VSCode创建工程，创建vue文件。运行后浏览器能正常显示。此过程中，浏览器是直接解析vue文件吗？还是说vue文件先被编译成另外一种文件（比如html）然后被浏览器解析？\nQ2: 网页端有canva，安卓端也有。这两种是同一种技术吗？或者更具体地说，是同一套源代码吗？\nQ3: 对于前段工程，Node起什么作用？只是支持NPM吗？","like_count":0,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618640,"discussion_content":"1、在浏览器中，Vue.js 应用程序的代码通常被编译成一个或多个 JavaScript 文件，并在 HTML 文件中使用 &lt;script&gt; 标签引入这些文件，之后浏览器会加载这些 JavaScript 文件，并将它们编译成一个或多个 JavaScript 文件，然后在浏览器中执行这些文件，这样就能实现在浏览器内呈现了。\n2、Canva在网页端和安卓端并非同一种技术，在网页端，Canva主要采用了HTML、CSS和JavaScript技术来构建富文本编辑器，在安卓端，Canva则采用了完整的前端框架技术，包括HTML模板、JavaScript代码、组件等。当然都是基于相同的前端技术。\n3、Node.js 在前端工程中不但是支持 NPM，它还提供了基础服务、模块化开发、全局状态管理和高效的 API 等多项功能，这样开发者可以更加高效地构建前端应用程序。\n这是我的接单，希望对你有所帮助，继续加油\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684402675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3626454,"avatar":"","nickname":"Geek_094a50","note":"","ucode":"A2C917ED7BC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618609,"discussion_content":"2.底层都是图形学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684381988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3626454,"avatar":"","nickname":"Geek_094a50","note":"","ucode":"A2C917ED7BC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618608,"discussion_content":"1.vue 变成  html  css js 被游览器解析渲染\n3.前端工程化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684381964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}