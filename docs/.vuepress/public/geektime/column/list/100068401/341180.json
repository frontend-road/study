{"id":341180,"title":"17 | 课前作业点评：发现“你”代码里的坏味道","content":"<p>你好，我是郑晔。</p><p>在这个专栏刚开始的时候，我给你留了一个课前作业，实现一个待办事项管理的软件。许多同学都利用自己的业余时间完成了这个作业，感谢大家的付出！</p><p>学习代码的坏味道，听别人讲是一种方式，但这种方式总会让人有一种隔岸观火的感觉，虽然知道有问题，但感觉并不深刻。最直接受益的方式就是自己写了代码，然后，让别人来点评。其实，这就是某种形式的代码评审。</p><p>所以，这一讲，我们就来做一次“代码评审”，直接来看看代码中存在的问题。题目背景我就不再做过多的介绍了，如果没有来得及完成作业的同学，可以先到“<a href=\"https://time.geekbang.org/column/article/325594\">课前作业区</a>”回顾一下题目。</p><p>既然是指出问题，得罪大家可能就在所难免了，希望你不要介意，毕竟能够发现自己的问题是精进的第一步。好，我们开始！</p><h2>从已知的坏味道出发</h2><p>在<a href=\"https://github.com/benben773/todomaster\">极客双同学的代码仓库</a>里，我在<a href=\"https://github.com/benben773/todomaster/blob/main/todomaster/src/main/java/com/test/service/impl/ProcessTxtServiceImpl.java\">一段代码</a>中看到了之前我们课程中讲过的坏味道：</p><pre><code>Item itemNew = new Item(item.getName());\nitemNew.setUserIndex(userIndex);\nitemNew.setIndex(initUserIndex);\n</code></pre><p>我们的业务需求是添加TODO项，这段代码就是在这个过程中创建一个新的TODO项对象。那这段代码有什么问题？一方面，这里有 setter，另一方面，这里的 setter 只在初始化的过程中用到。显然，我们可以用一个更完整的构造函数替换掉它。</p><p>其实，从这段代码出发，我们还能看到一些小问题，比如，这里创建 TODO 项设置了两个字段，一个是 userIndex，一个是 index。index 可以理解，表示这个 TODO 项的索引，但 userIndex 是什么呢？你需要仔细阅读代码才能发现，它其实是一个用户的标识，表示这个索引项是由某个用户创建的。既然是用户标识，按照通常的做法它可以叫 userId，这就降低了理解的难度。</p><!-- [[[read_end]]] --><p>这段代码所在类的声明也是一个让人出戏的地方：</p><pre><code>public class ProcessTxtServiceImpl implements ProcessItemservice\n</code></pre><p>这个类实现了一个接口 <strong>ProcessItemservice</strong>，显然，这里的拼写是有问题的，它应该是 ProcessItemService，另外，它的名字叫做“处理（TODO）项的服务”，一方面，在一个服务名字上用了处理这个动词，另一方面，“处理”这个名字也是特别泛化的一个名字。如果是我来声明这个接口，它可能就叫 <strong>ItemService</strong>。</p><p>所以，你可以看到，仅仅是一个接口的命名，就有这么多的问题。</p><p>我们再来看这个类的命名 <strong>ProcessTxtServiceImpl</strong>，这个名字里有一个 Txt 是容易让人困惑的，一般来说，如果不是特别的原因，<strong>尽量不要用缩写</strong>。</p><p>我初看到这个名字时，着实想了半天它表示什么含义，一开始我以为是表示事务（Transaction），常有人把事务缩写成 Tx，如果它的含义是表示事务，那么这里就是一个拼写错误了。后来，我才想明白，这里的 Txt 表示的是文本（Text），<strong>仅仅省了一个字母，却造成了理解上更大的障碍，实在有些得不偿失。</strong></p><p>如果 Txt 表示的是文本，这里就暴露出另外一个问题。这里为什么要有一个文本呢？其实是对应着另外一个数据库存储的实现，这是第四阶段的要求。</p><p>文本和数据库的差别到底是体现在哪里呢？体现在存储上。而在这段代码中，差别从服务层面就开始了，换言之，按照这段代码的逻辑，实现数据库存储，就需要把整个的业务逻辑重新写一遍。显然，这种做法是从结构上来看是有问题的，会造成大量的重复代码。</p><p>理解了文本和数据库只差别在存储这件事，我们再回过头来看这个类的声明。</p><pre><code>public class ProcessTxtServiceImpl implements ProcessItemservice\n</code></pre><p>这个为数据库预留的实现根本就是不需要的，只有一个 ItemService 的实现就够了，换言之，也就没有必要声明出一个接口，这里的类层次这么复杂，根本就是没有必要的。</p><pre><code>public class ItemService\n</code></pre><p>这里我再补充一个点，很多 Java 程序员给类命名有个不好的习惯，用“I” 打头给接口命名，用“Impl”给实现类结尾，这其实是早期的一种编程习惯，准确地说，这就是没有想好命名的偷懒方式。其实，它也是我们讲到的“<a href=\"https://time.geekbang.org/column/article/326166\">用技术术语命名</a>”的一种具体体现方式。后来的代码基本上就不这么做了，因为我们可以找到更准确的描述。但很多人的编程习惯却留在了早期，所以，这也算是一种遗毒的吧。</p><h2>一个“静态”的问题</h2><p>接下来，我们再来看一个很多人代码中都存在的问题。</p><p>下面是来自<a href=\"https://github.com/liudaming/todo\">刘大明</a>同学的<a href=\"https://github.com/liudaming/todo/blob/main/src/main/java/com/timegeekbang/todo/user/UserContext.java\">一段代码</a>，这是一个用以存放用户信息的类。单看这段代码本身，其实写得还是非常不错的，代码本身并不长，而且考虑了很多的细节。我们暂且忽略其它的细节，我注意到这段代码的主要原因是因为它用到了 static：</p><pre><code>public class UserContext {\n  \n  private static ThreadLocal&lt;Integer&gt; USERID = new ThreadLocal();\n\n\n  private UserContext() {\n    throw new UnsupportedOperationException();\n  }\n\n\n  public static String getUserID() {\n    return String.valueOf(USERID.get());\n  }\n\n\n  public static void setUserID(Integer userID) {\n    USERID.set(userID);\n  }\n}\n</code></pre><p>在《10x 程序员工作法》讲到<a href=\"https://time.geekbang.org/column/article/78104\">测试驱动开发</a>时，我曾经讲了 static 函数的问题，简单总结一下就是：</p><ul>\n<li>从本质上说，static 函数是一种全局函数，static 变量是一种全局变量，全局的函数和变量是我们尽量规避的；</li>\n<li>一个函数调用了 static 函数不好测试；</li>\n<li>除了写程序库，日常开发尽可能不用 static 函数。</li>\n</ul><p>那怎么消除 static 函数呢？消除 static 函数，最简单的做法就是用普通的函数调用替换掉 static 函数，也就是把这里的 static 都去掉。涉及到相应的字段，也要去掉 static。这种做法没有问题，但通常这种做法太粗暴了。这里我们尝试着用重构的方式一步一步地把它替换掉。</p><p>首先，我要去掉这里的构造函数，因为这里的构造函数是私有的，无法调用，而我们要用普通的函数，自然就需要构造出一个对象来。</p><pre><code>public class UserContext {\n  \n  private static ThreadLocal&lt;Integer&gt; USERID = new ThreadLocal();\n\n\n  public static String getUserID() {\n    return String.valueOf(USERID.get());\n  }\n\n\n  public static void setUserID(Integer userID) {\n    USERID.set(userID);\n  }\n}\n</code></pre><p>然后，我们需要找到对应的调用点，这里就以其中的一个为例，下面就是在退出登录的地方调用了这里的 static 函数：</p><pre><code>public class UserAccounts {\n  ...\n  \n  public void loginOut() {\n    UserContext.setUserID(null);\n  }\n}\n</code></pre><p>我们可以把它改成对象的调用：</p><pre><code>public class UserAccounts {\n  ...\n  \n  public void loginOut() {\n    new UserContext().setUserID(null);\n  }\n}\n</code></pre><p>这样，我们就有了一个对象，因为原来的函数是 static 函数，所以，这里的调用，本质上还是原来的函数，所以不会有影响。</p><p>然后，我们把这个创建出的对象变成这个类的字段，如果你使用的是支持重构功能的 IDE，这就是一个快捷键的操作（引入字段，Introduce Field）：</p><pre><code>public class UserAccounts {\n  ...\n  \n  private UserContext context = new UserContext();\n  \n  public void loginOut() {\n    context.setUserID(null);\n  }\n}\n</code></pre><p>如果在一个类有多个调用点，不妨都改成这个新字段的函数调用，正如我们前面所说，目前还是一个 static 函数，无论从哪个对象调用，调用的都是同一个函数。</p><p>通常来说，这个 static 函数应该不只是在一个类中使用，所以，它应该是在多个类中间共享的，为了保证多个类中间使用同一个 UserContext 对象，UserContext 对象的初始化就不能在这个类进行，而要在同一个地方初始化，所以，我们这里可以把 UserContext 对象作为构造函数的参数传进来：</p><pre><code>public class UserAccounts {\n  ...\n  \n  private UserContext context;\n  \n  public UserAccounts(..., final UserContext context) {\n    ...\n    this.context = context;\n  }\n  \n  public void loginOut() {\n    context.setUserID(null);\n  }\n}\n</code></pre><p>有了这个基础，我们再在 UserAccounts 这个对象初始化的时候，把这个 UserContext 对象传进来：</p><pre><code>new UserAccounts(..., new UserContext());\n</code></pre><p>如此一来，UserContext 这个对象的初始化就放到对象组装的过程中了，这就可以在多个不同的对象组件中共享这个对象了。如此往复，将所有的调用点都这么修改，我们就消除了对于 static 函数的依赖。现在，我们可以动手消除 static 了：</p><pre><code>public class UserContext {\n  \n  private ThreadLocal&lt;Integer&gt; USERID = new ThreadLocal();\n\n\n  public String getUserID() {\n    return String.valueOf(USERID.get());\n  }\n\n\n  public void setUserID(Integer userID) {\n    USERID.set(userID);\n  }\n}\n</code></pre><p>消除 static 函数本身并不难，这里我是借着这个简单的例子，给你演示一下，如何一步一步地进行重构。可能这比很多人以为的大刀阔斧地修改代码来得要琐碎得多，<strong>但只有这样一点一点调整，代码足够安全，每一步都是能够停下来的。</strong></p><p>无论如何，请别忘了，真正能给予我们修改有效性回答的是，<strong>单元测试</strong>。</p><p>估计很多人看到这里就会说，如果 static 都成了坏味道，那 Singleton 模式该怎么办呢？答案就是<strong>尽可能不用 Singleton 模式</strong>。我在《软件设计之美》中讲<a href=\"https://time.geekbang.org/column/article/241094\">可测试性</a>和<a href=\"https://time.geekbang.org/column/article/265121\">设计模式</a>时，都说到过 Singleton 模式，简单地说，系统里只有一个实例和限制系统里只能构建出一个实例，这是两件事，而且，如果一个函数牵扯到 Singleton 类也不好测试。</p><p>在一些同学的代码中，我也看到的 Singleton 模式的使用，处理手法其实与这里消除 static 函数是类似的，只不过，Singleton 稍微好一点的是，它的函数和字段本身都已经是普通的类成员了，我们只需要把那个限制实例唯一的 static 函数和字段消除就可以了。</p><p>说了半天的代码问题，我还想对很多人普遍忽略的小问题说上几句，这就是文档，对应到各位的代码库中，主要就是 README。</p><p>一个开源项目的好坏与否，同它的文档质量是强相关的。我知道，作为程序员，大家的普遍兴趣都是写代码，所以，文档就常常被忽略了。</p><p>如果我不了解这个项目的背景，很多人的 README 给我提供的信息量是非常有限的。</p><p>大家的 README 普遍存在的问题有两种，一种是信息量太少，比如，只写了如何构建一个项目，另一种是把 README 当成 blog，在里面写了自己的心得体会。无论是哪种，信息的有效性都很差。</p><p>README 文件是一个项目的门面，它应该给我们提供关于这个项目的背景信息，比如，这个项目是做什么的、当前的状态、如何入手等等。你可以找一些经典的开源项目，去看看好的README是怎么写的。<strong>好的程序员要学会表达，不仅仅会用代码表达，也要会用文字表达</strong>。</p><p>好，这就是大家作业中的所有问题了吗？当然不是，代码中存在的问题还很多。不过，你不用担心，即便这个专栏的正式更新结束了，我也会考虑以加餐的形式，继续我们这个云端的代码评审环节。所以，之前没来得及写代码的同学依然可以继续写，说不定下次就会谈到你的代码。</p><h2>总结时刻</h2><p>今天我们点评了大家代码中存在的一些问题，除了之前在专栏中讲到过的坏味道，今天我们还讲到了一些一眼就可以看出问题的坏味道：</p><ul>\n<li>使用缩写；</li>\n<li>用 I 表示接口，用 Impl 表示实现；</li>\n<li>使用 static 函数或变量；</li>\n<li>使用 singleton 模式；</li>\n<li>写得潦草的 README。</li>\n</ul><p>你在写代码时也要注意这些问题。</p><p>我还借着 static 函数的调整过程，给你演示了如何一步一步地重构代码，保证代码的安全。希望你能够理解，重构不是大开大合的过程，而就是这样细小而微的操作。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>尽量不使用 static</strong>。</p><p>另外，按照最初的约定，我也选出了3位作业完成比较好的同学，分别是<a href=\"https://github.com/bobdeng/todolist\">邓志国</a>、<a href=\"https://github.com/LiuTianyou/todo\">LiuTianyou</a>、<a href=\"https://github.com/mgxian/todolist\">_CountingStars</a> ，这几天极客时间的团队会联系你们邮寄奖品。</p><p><img src=\"https://static001.geekbang.org/resource/image/80/30/802cfa950b97bc944e0619afef945830.jpg?wh=2284*3156\" alt=\"\"></p><h2>思考题</h2><p>我们今天谈到了文档，你平时写文档吗？或者，你平时阅读项目文档，发现什么值得改善的地方吗？欢迎在留言区分享你的经验。</p><p>参考资料:<a href=\"https://time.geekbang.org/column/article/85915\">加餐 | 你真的了解重构吗？</a></p>","neighbors":{"left":{"article_title":"16 | 熊节：什么代码应该被重构？","id":340488},"right":{"article_title":"结束语 | 写代码是一件可以一生精进的事","id":341595}},"comments":[{"had_liked":false,"id":277982,"user_name":"陈文昕","can_delete":false,"product_type":"c1","uid":1168700,"ip_address":"","ucode":"1BD88938427777","user_header":"https://static001.geekbang.org/account/avatar/00/11/d5/3c/861e0c86.jpg","comment_is_top":false,"comment_ctime":1612689688,"is_pvip":false,"replies":[{"id":"101130","content":"如果一个接口只有一个实现类，也许不需要这个层次关系，即便有，一个命名可以是 DefaultXXX。<br><br>如果一个接口有多个实现类，那就需要把不同实现类的特点描述出来，比如，FileXXX，DbXXX 等等。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612938000,"ip_address":"","comment_id":277982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57447264536","product_id":100068401,"comment_content":"“用 I 表示接口，用 Impl 表示实现”，这种问题需要怎么修改？<br>目前我的写法都是 用Impl表示实现，接口就正常写成XxxxService","like_count":13,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515237,"discussion_content":"如果一个接口只有一个实现类，也许不需要这个层次关系，即便有，一个命名可以是 DefaultXXX。\n\n如果一个接口有多个实现类，那就需要把不同实现类的特点描述出来，比如，FileXXX，DbXXX 等等。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612938000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277756,"user_name":"斯盖丸","can_delete":false,"product_type":"c1","uid":1168504,"ip_address":"","ucode":"B881D14B028F14","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","comment_is_top":false,"comment_ctime":1612567641,"is_pvip":false,"replies":[{"id":"100941","content":"你仔细看一下，调整的过程是，先把对象变成同一个对象，然后，才是消除 static，所以，它们用的肯定是同一个对象。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612776939,"ip_address":"","comment_id":277756,"utype":1}],"discussion_count":5,"race_medal":0,"score":"14497469529","product_id":100068401,"comment_content":"请问老师，static转成final的那步里，如果不止是UserAccounts而是其他类也要用到这同一份userContext那应该怎么获取？能保证是同一份吗？","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515158,"discussion_content":"你仔细看一下，调整的过程是，先把对象变成同一个对象，然后，才是消除 static，所以，它们用的肯定是同一个对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612776939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102585,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/f9/41ac6186.jpg","nickname":"zhengxin12","note":"","ucode":"B3AEA4B8A7575C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348585,"discussion_content":"用工厂模式，在工厂里面生产和获取userContext，工厂里面用ConcurrentHashMap保证线程安全。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612659408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348465,"discussion_content":"依赖注入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612586533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1168504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","nickname":"斯盖丸","note":"","ucode":"B881D14B028F14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":348466,"discussion_content":"能举个例子吗…？我不是做Spring的…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612586886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348465,"ip_address":""},"score":348466,"extra":""},{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1168504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","nickname":"斯盖丸","note":"","ucode":"B881D14B028F14","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348473,"discussion_content":"文中的例子就是通过构造函数传入依赖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612593810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348466,"ip_address":""},"score":348473,"extra":""}]}]},{"had_liked":false,"id":294939,"user_name":"杨宇","can_delete":false,"product_type":"c1","uid":1014665,"ip_address":"","ucode":"EB74DF6E269F03","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","comment_is_top":false,"comment_ctime":1622161315,"is_pvip":true,"replies":[{"id":"107564","content":"抓住重点了","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1622975889,"ip_address":"","comment_id":294939,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10212095907","product_id":100068401,"comment_content":"老师重构的过程让我眼前一亮——原来还能这样“小步”！","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520883,"discussion_content":"抓住重点了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622975889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308333,"user_name":"邵俊达","can_delete":false,"product_type":"c1","uid":1281460,"ip_address":"","ucode":"4B7DACE6DBCF95","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","comment_is_top":false,"comment_ctime":1629539217,"is_pvip":false,"replies":[{"id":"111659","content":"我在几个专栏里都讨论过 Singleton 模式和 static 函数，关键点在于 static 函数如果参与到测试过程中，就不好模拟，所以，尽量不要写 static 函数。<br><br>但在这个讨论里，我也留了一个口子，就是程序库函数，用更具象的说法，就是不牵扯任何 static 字段的函数。你的场景其实是属于这种场景的。但是，在这种情况下，其实也没有必要使用 Singleton，简单的 static 函数就够了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629594910,"ip_address":"","comment_id":308333,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5924506513","product_id":100068401,"comment_content":"郑老师您好，「如果一个函数牵扯到 Singleton 类也不好测试」请问为什么一个函数牵扯到「Singleton类」会不好测试呢？ 我一般会把一个包含工具函数的工具类做成 Singleton。 在测试调用了工具函数的某个方法的时候没发现不好测试。请问该如何理解这句话？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525463,"discussion_content":"我在几个专栏里都讨论过 Singleton 模式和 static 函数，关键点在于 static 函数如果参与到测试过程中，就不好模拟，所以，尽量不要写 static 函数。\n\n但在这个讨论里，我也留了一个口子，就是程序库函数，用更具象的说法，就是不牵扯任何 static 字段的函数。你的场景其实是属于这种场景的。但是，在这种情况下，其实也没有必要使用 Singleton，简单的 static 函数就够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629594910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347613,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1654225739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654225739","product_id":100068401,"comment_content":"尽量不使用 static--记下来","like_count":0},{"had_liked":false,"id":344463,"user_name":"lamb","can_delete":false,"product_type":"c1","uid":1788774,"ip_address":"","ucode":"ED67FDCA8BB85F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4b/66/bac3697b.jpg","comment_is_top":false,"comment_ctime":1651570750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651570750","product_id":100068401,"comment_content":"第三方的工具类要使用它static方法：工具类有public构造方法通过new 工具类ide会提示 使用类名调用不要通过实例的方式；没有public方法如何处理","like_count":0},{"had_liked":false,"id":289890,"user_name":"norton&#47;Dark","can_delete":false,"product_type":"c1","uid":1103637,"ip_address":"","ucode":"55C0B5636138BD","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/15/63258662.jpg","comment_is_top":false,"comment_ctime":1619254402,"is_pvip":false,"replies":[{"id":"110802","content":"严格地说 Impl 不直观，因为它看不出与接口之间的关系，这就好比，你说一个类名字应该叫 Class 一样，没错，但没有意义。我们应该用清晰的名字进行命名，比如，基于文件的实现就叫 FileXXX，基于数据库的实现就叫 DbXXX，基于 REST 的实现就叫 RestXXX。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628426589,"ip_address":"","comment_id":289890,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1619254402","product_id":100068401,"comment_content":"老师，我觉得impl是过时的设计，说服力还不够，个人感觉挺直观的，有什么负面案例呢？如果在项目中消减这种设计，还是得有说服力的说法。麻烦再深入讲解下。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519045,"discussion_content":"严格地说 Impl 不直观，因为它看不出与接口之间的关系，这就好比，你说一个类名字应该叫 Class 一样，没错，但没有意义。我们应该用清晰的名字进行命名，比如，基于文件的实现就叫 FileXXX，基于数据库的实现就叫 DbXXX，基于 REST 的实现就叫 RestXXX。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628426589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378745,"discussion_content":"Impl 是技术实现名，不是业务名。这一点足够！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623385597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279174,"user_name":"fengkuok","can_delete":false,"product_type":"c1","uid":1002056,"ip_address":"","ucode":"C1370D27D03869","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/48/744780ea.jpg","comment_is_top":false,"comment_ctime":1613643982,"is_pvip":true,"replies":[{"id":"101477","content":"你可以站在类型的角度去理解，其实，mock 时模拟的是一个类型，这个类型可以是用一个接口实现的，也可以是用一个类去实现的。所以，没有接口，只有类是没有问题的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1613717072,"ip_address":"","comment_id":279174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613643982","product_id":100068401,"comment_content":"&quot;如果一个接口只有一个实现类，也许不需要这个层次关系，即便有，一个命名可以是 DefaultXXX。&quot;<br><br>有接口，单元测试时方便mock。如果没有接口，只能是集成测试？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515647,"discussion_content":"你可以站在类型的角度去理解，其实，mock 时模拟的是一个类型，这个类型可以是用一个接口实现的，也可以是用一个类去实现的。所以，没有接口，只有类是没有问题的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613717072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278189,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1612794667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612794667","product_id":100068401,"comment_content":"非常喜欢一步一步重构代码教学","like_count":0}]}