{"id":274483,"title":"07 | 哨兵机制：主库挂了，如何不间断服务？","content":"<p>你好，我是蒋德钧。</p><p>上节课，我们学习了主从库集群模式。在这个模式下，如果从库发生故障了，客户端可以继续向主库或其他从库发送请求，进行相关的操作，但是如果主库发生故障了，那就直接会影响到从库的同步，因为从库没有相应的主库可以进行数据复制操作了。</p><p>而且，如果客户端发送的都是读操作请求，那还可以由从库继续提供服务，这在纯读的业务场景下还能被接受。但是，一旦有写操作请求了，按照主从库模式下的读写分离要求，需要由主库来完成写操作。此时，也没有实例可以来服务客户端的写操作请求了，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/20/d828d7eee133cec690dc140e99e26f20.jpg?wh=3371*2250\" alt=\"\" title=\"主库故障后从库无法服务写操作\"></p><p>无论是写服务中断，还是从库无法进行数据同步，都是不能接受的。所以，如果主库挂了，我们就需要运行一个新主库，比如说把一个从库切换为主库，把它当成主库。这就涉及到三个问题：</p><ol>\n<li>主库真的挂了吗？</li>\n<li>该选择哪个从库作为主库？</li>\n<li>怎么把新主库的相关信息通知给从库和客户端呢？</li>\n</ol><p>这就要提到哨兵机制了。在Redis主从集群中，哨兵机制是实现主从库自动切换的关键机制，它有效地解决了主从复制模式下故障转移的这三个问题。</p><p>接下来，我们就一起学习下哨兵机制。</p><h2>哨兵机制的基本流程</h2><p>哨兵其实就是一个运行在特殊模式下的Redis进程，主从库实例运行的同时，它也在运行。哨兵主要负责的就是三个任务：监控、选主（选择主库）和通知。</p><!-- [[[read_end]]] --><p>我们先看监控。监控是指哨兵进程在运行时，周期性地给所有的主从库发送PING命令，检测它们是否仍然在线运行。如果从库没有在规定时间内响应哨兵的PING命令，哨兵就会把它标记为“下线状态”；同样，如果主库也没有在规定时间内响应哨兵的PING命令，哨兵就会判定主库下线，然后开始<strong>自动切换主库</strong>的流程。</p><p>这个流程首先是执行哨兵的第二个任务，选主。主库挂了以后，哨兵就需要从很多个从库里，按照一定的规则选择一个从库实例，把它作为新的主库。这一步完成后，现在的集群里就有了新主库。</p><p>然后，哨兵会执行最后一个任务：通知。在执行通知任务时，哨兵会把新主库的连接信息发给其他从库，让它们执行replicaof命令，和新主库建立连接，并进行数据复制。同时，哨兵会把新主库的连接信息通知给客户端，让它们把请求操作发到新主库上。</p><p>我画了一张图片，展示了这三个任务以及它们各自的目标。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/a1/efcfa517d0f09d057be7da32a84cf2a1.jpg?wh=2890*1018\" alt=\"\" title=\"哨兵机制的三项任务与目标\"></p><p>在这三个任务中，通知任务相对来说比较简单，哨兵只需要把新主库信息发给从库和客户端，让它们和新主库建立连接就行，并不涉及决策的逻辑。但是，在监控和选主这两个任务中，哨兵需要做出两个决策：</p><ul>\n<li>在监控任务中，哨兵需要判断主库是否处于下线状态；</li>\n<li>在选主任务中，哨兵也要决定选择哪个从库实例作为主库。</li>\n</ul><p>接下来，我们就先说说如何判断主库的下线状态。</p><p>你首先要知道的是，哨兵对主库的下线判断有“主观下线”和“客观下线”两种。那么，为什么会存在两种判断呢？它们的区别和联系是什么呢？</p><h2>主观下线和客观下线</h2><p>我先解释下什么是“主观下线”。</p><p><strong>哨兵进程会使用PING命令检测它自己和主、从库的网络连接情况，用来判断实例的状态</strong>。如果哨兵发现主库或从库对PING命令的响应超时了，那么，哨兵就会先把它标记为“主观下线”。</p><p>如果检测的是从库，那么，哨兵简单地把它标记为“主观下线”就行了，因为从库的下线影响一般不太大，集群的对外服务不会间断。</p><p>但是，如果检测的是主库，那么，哨兵还不能简单地把它标记为“主观下线”，开启主从切换。因为很有可能存在这么一个情况：那就是哨兵误判了，其实主库并没有故障。可是，一旦启动了主从切换，后续的选主和通知操作都会带来额外的计算和通信开销。</p><p>为了避免这些不必要的开销，我们要特别注意误判的情况。</p><p>首先，我们要知道啥叫误判。很简单，就是主库实际并没有下线，但是哨兵误以为它下线了。误判一般会发生在集群网络压力较大、网络拥塞，或者是主库本身压力较大的情况下。</p><p>一旦哨兵判断主库下线了，就会开始选择新主库，并让从库和新主库进行数据同步，这个过程本身就会有开销，例如，哨兵要花时间选出新主库，从库也需要花时间和新主库同步。而在误判的情况下，主库本身根本就不需要进行切换的，所以这个过程的开销是没有价值的。正因为这样，我们需要判断是否有误判，以及减少误判。</p><p>那怎么减少误判呢？在日常生活中，当我们要对一些重要的事情做判断的时候，经常会和家人或朋友一起商量一下，然后再做决定。</p><p>哨兵机制也是类似的，它<strong>通常会采用多实例组成的集群模式进行部署，这也被称为哨兵集群</strong>。引入多个哨兵实例一起来判断，就可以避免单个哨兵因为自身网络状况不好，而误判主库下线的情况。同时，多个哨兵的网络同时不稳定的概率较小，由它们一起做决策，误判率也能降低。</p><p>这节课，你只需要先理解哨兵集群在减少误判方面的作用，就行了。至于具体的运行机制，下节课我们再重点学习。</p><p>在判断主库是否下线时，不能由一个哨兵说了算，只有大多数的哨兵实例，都判断主库已经“主观下线”了，主库才会被标记为“客观下线”，这个叫法也是表明主库下线成为一个客观事实了。这个判断原则就是：少数服从多数。同时，这会进一步触发哨兵开始主从切换流程。</p><p>为了方便你理解，我再画一张图展示一下这里的逻辑。</p><p>如下图所示，Redis主从集群有一个主库、三个从库，还有三个哨兵实例。在图片的左边，哨兵2判断主库为“主观下线”，但哨兵1和3却判定主库是上线状态，此时，主库仍然被判断为处于上线状态。在图片的右边，哨兵1和2都判断主库为“主观下线”，此时，即使哨兵3仍然判断主库为上线状态，主库也被标记为“客观下线”了。</p><p><img src=\"https://static001.geekbang.org/resource/image/19/0d/1945703abf16ee14e2f7559873e4e60d.jpg?wh=3807*1416\" alt=\"\" title=\"客观下线的判断\"></p><p>简单来说，“客观下线”的标准就是，当有N个哨兵实例时，最好要有N/2 + 1个实例判断主库为“主观下线”，才能最终判定主库为“客观下线”。这样一来，就可以减少误判的概率，也能避免误判带来的无谓的主从库切换。（当然，有多少个实例做出“主观下线”的判断才可以，可以由Redis管理员自行设定）。</p><p>好了，到这里，你可以看到，借助于多个哨兵实例的共同判断机制，我们就可以更准确地判断出主库是否处于下线状态。如果主库的确下线了，哨兵就要开始下一个决策过程了，即从许多从库中，选出一个从库来做新主库。</p><h2>如何选定新主库？</h2><p>一般来说，我把哨兵选择新主库的过程称为“筛选+打分”。简单来说，我们在多个从库中，先按照<strong>一定的筛选条件</strong>，把不符合条件的从库去掉。然后，我们再按照<strong>一定的规则</strong>，给剩下的从库逐个打分，将得分最高的从库选为新主库，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/4c/f2e9b8830db46d959daa6a39fbf4a14c.jpg?wh=3671*1743\" alt=\"\" title=\"新主库的选择过程\"></p><p>在刚刚的这段话里，需要注意的是两个“一定”，现在，我们要考虑这里的“一定”具体是指什么。</p><p>首先来看筛选的条件。</p><p>一般情况下，我们肯定要先保证所选的从库仍然在线运行。不过，在选主时从库正常在线，这只能表示从库的现状良好，并不代表它就是最适合做主库的。</p><p>设想一下，如果在选主时，一个从库正常运行，我们把它选为新主库开始使用了。可是，很快它的网络出了故障，此时，我们就得重新选主了。这显然不是我们期望的结果。</p><p>所以，在选主时，<strong>除了要检查从库的当前在线状态，还要判断它之前的网络连接状态</strong>。如果从库总是和主库断连，而且断连次数超出了一定的阈值，我们就有理由相信，这个从库的网络状况并不是太好，就可以把这个从库筛掉了。</p><p>具体怎么判断呢？你使用配置项down-after-milliseconds * 10。其中，down-after-milliseconds是我们认定主从库断连的最大连接超时时间。如果在down-after-milliseconds毫秒内，主从节点都没有通过网络联系上，我们就可以认为主从节点断连了。如果发生断连的次数超过了10次，就说明这个从库的网络状况不好，不适合作为新主库。</p><p>好了，这样我们就过滤掉了不适合做主库的从库，完成了筛选工作。</p><p>接下来就要给剩余的从库打分了。我们可以分别按照三个规则依次进行三轮打分，这三个规则分别是<strong>从库优先级、从库复制进度以及从库ID号</strong>。只要在某一轮中，有从库得分最高，那么它就是主库了，选主过程到此结束。如果没有出现得分最高的从库，那么就继续进行下一轮。</p><p><strong>第一轮：优先级最高的从库得分高。</strong></p><p>用户可以通过slave-priority配置项，给不同的从库设置不同优先级。比如，你有两个从库，它们的内存大小不一样，你可以手动给内存大的实例设置一个高优先级。在选主时，哨兵会给优先级高的从库打高分，如果有一个从库优先级最高，那么它就是新主库了。如果从库的优先级都一样，那么哨兵开始第二轮打分。</p><p><strong>第二轮：和旧主库同步程度最接近的从库得分高。</strong></p><p>这个规则的依据是，如果选择和旧主库同步最接近的那个从库作为主库，那么，这个新主库上就有最新的数据。</p><p>如何判断从库和旧主库间的同步进度呢？</p><p>上节课我向你介绍过，主从库同步时有个命令传播的过程。在这个过程中，主库会用master_repl_offset记录当前的最新写操作在repl_backlog_buffer中的位置，而从库会用slave_repl_offset这个值记录当前的复制进度。</p><p>此时，我们想要找的从库，它的slave_repl_offset需要最接近master_repl_offset。如果在所有从库中，有从库的slave_repl_offset最接近master_repl_offset，那么它的得分就最高，可以作为新主库。</p><p>就像下图所示，旧主库的master_repl_offset是1000，从库1、2和3的slave_repl_offset分别是950、990和900，那么，从库2就应该被选为新主库。</p><p><img src=\"https://static001.geekbang.org/resource/image/62/df/626yy88853a2d15b5196b922367140df.jpg?wh=3746*1121\" alt=\"\" title=\"基于复制进度的新主库选主原则\"></p><p>当然，如果有两个从库的slave_repl_offset值大小是一样的（例如，从库1和从库2的slave_repl_offset值都是990），我们就需要给它们进行第三轮打分了。</p><p><strong>第三轮：ID号小的从库得分高。</strong></p><p>每个实例都会有一个ID，这个ID就类似于这里的从库的编号。目前，Redis在选主库时，有一个默认的规定：<strong>在优先级和复制进度都相同的情况下，ID号最小的从库得分最高，会被选为新主库</strong>。</p><p>到这里，新主库就被选出来了，“选主”这个过程就完成了。</p><p>我们再回顾下这个流程。首先，哨兵会按照在线状态、网络状态，筛选过滤掉一部分不符合要求的从库，然后，依次按照优先级、复制进度、ID号大小再对剩余的从库进行打分，只要有得分最高的从库出现，就把它选为新主库。</p><h2>小结</h2><p>这节课，我们一起学习了哨兵机制，它是实现Redis不间断服务的重要保证。具体来说，主从集群的数据同步，是数据可靠的基础保证；而在主库发生故障时，自动的主从切换是服务不间断的关键支撑。</p><p>Redis的哨兵机制自动完成了以下三大功能，从而实现了主从库的自动切换，可以降低Redis集群的运维开销：</p><ul>\n<li>监控主库运行状态，并判断主库是否客观下线；</li>\n<li>在主库客观下线后，选取新主库；</li>\n<li>选出新主库后，通知从库和客户端。</li>\n</ul><p>为了降低误判率，在实际应用时，哨兵机制通常采用多实例的方式进行部署，多个哨兵实例通过“少数服从多数”的原则，来判断主库是否客观下线。一般来说，我们可以部署三个哨兵，如果有两个哨兵认定主库“主观下线”，就可以开始切换过程。当然，如果你希望进一步提升判断准确率，也可以再适当增加哨兵个数，比如说使用五个哨兵。</p><p>但是，使用多个哨兵实例来降低误判率，其实相当于组成了一个哨兵集群，我们会因此面临着一些新的挑战，例如：</p><ul>\n<li>哨兵集群中有实例挂了，怎么办，会影响主库状态判断和选主吗？</li>\n<li>哨兵集群多数实例达成共识，判断出主库“客观下线”后，由哪个实例来执行主从切换呢？</li>\n</ul><p>要搞懂这些问题，就不得不提哨兵集群了，下节课，我们来具体聊聊哨兵集群的机制和问题。</p><h2>每课一问</h2><p>按照惯例，我给你提个小问题。这节课，我提到，通过哨兵机制，可以实现主从库的自动切换，这是实现服务不间断的关键支撑，同时，我也提到了主从库切换是需要一定时间的。所以，请你考虑下，在这个切换过程中，客户端能否正常地进行请求操作呢？如果想要应用程序不感知服务的中断，还需要哨兵或需要客户端再做些什么吗？</p><p>欢迎你在留言区跟我交流讨论，也欢迎你能帮我把今天的内容分享给更多人，帮助他们一起解决问题。我们下节课见。</p>","neighbors":{"left":{"article_title":"06 | 数据同步：主从库如何实现数据一致？","id":272852},"right":{"article_title":"08 | 哨兵集群：哨兵挂了，主从库还能切换吗？","id":275337}},"comments":[{"had_liked":false,"id":242638,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":true,"comment_ctime":1597802948,"is_pvip":false,"replies":[{"id":"89594","content":"对master_repl_offset本身的理解没错，master_repl_offset是单调增加的，它的值可以大于repl_backlog_size。Redis会用一个名为repl_backlog_idx的值记录在环形缓冲区中的最新写入位置。<br><br>举个例子，例如写入len的数据，那么<br>master_repl_offset += len<br>repl_backlog_idx += len<br>但是，如果repl_backlog_idx等于repl_backlog_size时，repl_backlog_idx会被置为0，表示从环形缓冲区开始位置继续写入。<br><br>而在实际的选主代码层面，sentinel是直接比较从库的slave_repl_offset，来选择和主库最接近的从库。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597939082,"ip_address":"","comment_id":242638,"utype":1}],"discussion_count":25,"race_medal":0,"score":"9.2233724035248005e+18","product_id":100056701,"comment_content":"1、master_repl_offset是存储在主库的，但主库已经挂了，怎么获取的这个值？<br>可否这样理解，master_repl_offset如事物id一样单调递增，这样的话，就只要不叫从库的slave_repl_offset就行。<br>至于master_repl_offset真实位置可以对master_repl_offset取模就行。","like_count":86,"discussions":[{"author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356102,"discussion_content":"作者这里说的不清晰，应该是取slave_repl_offset最大值的，因为slave_repl_offset一定是有效的，如果发生覆盖会重新从0开始的，不会出现slave_repl_offset超出环形队列的长度！所以是通过slave_repl_offset最大值比较就行","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1615532210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389035,"discussion_content":"最大值也不对吧，比如环形的首尾的交接点两侧，单纯比值是不对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629100049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":356102,"ip_address":""},"score":389035,"extra":""},{"author":{"id":1614636,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJn1M83Jv0OM2ibwMNrVZicKUZjwPIwXRfI9KMnum8icO00wXicrII7n2c1icWPK8NdrgwdZ9RsEpJr5aQ/132","nickname":"Geek_9decd8","note":"","ucode":"03990B88868A1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531131,"discussion_content":"主从同步数据差异的环型buffer，主从的偏移量都是递增的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637238959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389035,"ip_address":""},"score":531131,"extra":"{\"user_type\":1}"},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1614636,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJn1M83Jv0OM2ibwMNrVZicKUZjwPIwXRfI9KMnum8icO00wXicrII7n2c1icWPK8NdrgwdZ9RsEpJr5aQ/132","nickname":"Geek_9decd8","note":"","ucode":"03990B88868A1F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576012,"discussion_content":"覆盖了说明进行了一次全量rdb同步, 这个时候slave_repl_offset变为0的话就变小了, 但是这个时候因为刚全量复制过, 数据应该是最全的吧?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655229042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":531131,"ip_address":""},"score":576012,"extra":""}]},{"author":{"id":2028949,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","nickname":"Geek1560","note":"","ucode":"5F27A28B8002E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300356,"discussion_content":"是否直接比较从库的slave_repl_offset大小，选举一个较大的slave_repl_offset值，就可以认定其余master_repl_offset最接近即可？","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1598061705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":9,"child_discussions":[{"author":{"id":1250907,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","nickname":"Monday","note":"","ucode":"77B9BACC783598","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2028949,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","nickname":"Geek1560","note":"","ucode":"5F27A28B8002E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300357,"discussion_content":"对头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598062506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300356,"ip_address":""},"score":300357,"extra":""},{"author":{"id":1214582,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","nickname":"youngitachi","note":"","ucode":"88717CA8B8ED64","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1250907,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","nickname":"Monday","note":"","ucode":"77B9BACC783598","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310335,"discussion_content":"这么来看，slave_repl_offset也是一个单调递增的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601781503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300357,"ip_address":""},"score":310335,"extra":""},{"author":{"id":1155646,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","nickname":"ppd0705","note":"","ucode":"EB63D4E3FD1E9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1214582,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","nickname":"youngitachi","note":"","ucode":"88717CA8B8ED64","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":337507,"discussion_content":"到头了又从0开始，应该不算单调递增的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608953648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310335,"ip_address":""},"score":337507,"extra":""}]},{"author":{"id":1366905,"avatar":"https://static001.geekbang.org/account/avatar/00/14/db/79/3775cca7.jpg","nickname":"没有记忆的小石头","note":"","ucode":"0C052F3BE4CF68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302298,"discussion_content":"void feedReplicationBacklog(void *ptr, size_t len) {\n    unsigned char *p = ptr;\n    //缓冲区最后一个字节的复制偏移量\n    server.master_repl_offset += len;\n\n    //复制缓冲区为先进先出的循环队列\n    while(len) {\n        size_t thislen = server.repl_backlog_size - server.repl_backlog_idx;\n        if (thislen  len) thislen = len;\n        memcpy(server.repl_backlog+server.repl_backlog_idx,p,thislen);\n        server.repl_backlog_idx += thislen;\n\n        //repl_backlog_idx索引已经到缓冲区最大位置，需要移动到缓冲区首部\n        if (server.repl_backlog_idx == server.repl_backlog_size)\n            server.repl_backlog_idx = 0;\n        len -= thislen;\n        p += thislen;\n        //记录缓冲区中存储的命令请求数据长度\n        server.repl_backlog_histlen += thislen;\n    }\n    //缓冲区中数据量最大为缓冲区大小\n    if (server.repl_backlog_histlen  server.repl_backlog_size)\n        server.repl_backlog_histlen = server.repl_backlog_size;\n    //设置缓冲区中数据第一个字节的复制偏移量\n    server.repl_backlog_off = server.master_repl_offset -\n                              server.repl_backlog_histlen + 1;\n}","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1598872648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/da/5bcb83b1.jpg","nickname":"白晨","note":"","ucode":"6D6171B8ECEDDD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545924,"discussion_content":"为什么觉得答了，但没完全答呢","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1642084476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1114878,"avatar":"https://static001.geekbang.org/account/avatar/00/11/02/fe/d539b96b.jpg","nickname":"曹翔","note":"","ucode":"B4D8B42DFB535C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1272026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/da/5bcb83b1.jpg","nickname":"白晨","note":"","ucode":"6D6171B8ECEDDD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":548507,"discussion_content":"同感","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643241792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545924,"ip_address":""},"score":548507,"extra":""}]},{"author":{"id":1246521,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WdcSGFib91dyKHX44lvOxB1mPGzLj5RXlB4JYr1PBCXFicVIaLPZt1SDicpvYVJ1ObMltYbq1S6ZZ7CHW3AlQuIXQ/132","nickname":"Geek_9f0ae6","note":"","ucode":"59CF5ED09D9A22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355324,"discussion_content":"没看懂说的是什么。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1615422333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1309681,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKvNozkiaiao1IyuCzEIMPiaNicB1hgEcad3X4DS6IAq5lnOiagf2690Q7Q1RmyBN89gNqYHeHHtY2RcqQ/132","nickname":"墨龙","note":"","ucode":"8C63C5D18E0877","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1246521,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WdcSGFib91dyKHX44lvOxB1mPGzLj5RXlB4JYr1PBCXFicVIaLPZt1SDicpvYVJ1ObMltYbq1S6ZZ7CHW3AlQuIXQ/132","nickname":"Geek_9f0ae6","note":"","ucode":"59CF5ED09D9A22","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583656,"discussion_content":"“不叫”=&gt;&#34;比较&#34;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660274889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":355324,"ip_address":"中国香港"},"score":583656,"extra":""}]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571487,"discussion_content":"主从复制偏移量是单调递增的 只需将写入量即len累加的复制偏移量上即可。但是Backlog写入偏移量一定是环形重置的 即repl_backlog_idx \n\nrepl_backlog_idx永远是backlog下一个写入索引 如果写到头就重置","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652239957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504057,"discussion_content":"对master_repl_offset本身的理解没错，master_repl_offset是单调增加的，它的值可以大于repl_backlog_size。Redis会用一个名为repl_backlog_idx的值记录在环形缓冲区中的最新写入位置。\n\n举个例子，例如写入len的数据，那么\nmaster_repl_offset += len\nrepl_backlog_idx += len\n但是，如果repl_backlog_idx等于repl_backlog_size时，repl_backlog_idx会被置为0，表示从环形缓冲区开始位置继续写入。\n\n而在实际的选主代码层面，sentinel是直接比较从库的slave_repl_offset，来选择和主库最接近的从库。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597939082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328592,"discussion_content":"………","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606186720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584003,"discussion_content":"slave_repl_offset应该也是单调递增的，不然没法直接比较大小得到最接近master_repl_offset的从库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660556211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242658,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1597805687,"is_pvip":true,"discussion_count":67,"race_medal":0,"score":"3635140138103","product_id":100056701,"comment_content":"哨兵在操作主从切换的过程中，客户端能否正常地进行请求操作？<br><br>如果客户端使用了读写分离，那么读请求可以在从库上正常执行，不会受到影响。但是由于此时主库已经挂了，而且哨兵还没有选出新的主库，所以在这期间写请求会失败，失败持续的时间 = 哨兵切换主从的时间 + 客户端感知到新主库 的时间。<br><br>如果不想让业务感知到异常，客户端只能把写失败的请求先缓存起来或写入消息队列中间件中，等哨兵切换完主从后，再把这些写请求发给新的主库，但这种场景只适合对写入请求返回值不敏感的业务，而且还需要业务层做适配，另外主从切换时间过长，也会导致客户端或消息队列中间件缓存写请求过多，切换完成之后重放这些请求的时间变长。<br><br>哨兵检测主库多久没有响应就提升从库为新的主库，这个时间是可以配置的（down-after-milliseconds参数）。配置的时间越短，哨兵越敏感，哨兵集群认为主库在短时间内连不上就会发起主从切换，这种配置很可能因为网络拥塞但主库正常而发生不必要的切换，当然，当主库真正故障时，因为切换得及时，对业务的影响最小。如果配置的时间比较长，哨兵越保守，这种情况可以减少哨兵误判的概率，但是主库故障发生时，业务写失败的时间也会比较久，缓存写请求数据量越多。<br><br>应用程序不感知服务的中断，还需要哨兵和客户端做些什么？当哨兵完成主从切换后，客户端需要及时感知到主库发生了变更，然后把缓存的写请求写入到新库中，保证后续写请求不会再受到影响，具体做法如下：<br><br>哨兵提升一个从库为新主库后，哨兵会把新主库的地址写入自己实例的pubsub（switch-master）中。客户端需要订阅这个pubsub，当这个pubsub有数据时，客户端就能感知到主库发生变更，同时可以拿到最新的主库地址，然后把写请求写到这个新主库即可，这种机制属于哨兵主动通知客户端。<br><br>如果客户端因为某些原因错过了哨兵的通知，或者哨兵通知后客户端处理失败了，安全起见，客户端也需要支持主动去获取最新主从的地址进行访问。<br><br>所以，客户端需要访问主从库时，不能直接写死主从库的地址了，而是需要从哨兵集群中获取最新的地址（sentinel get-master-addr-by-name命令），这样当实例异常时，哨兵切换后或者客户端断开重连，都可以从哨兵集群中拿到最新的实例地址。<br><br>一般Redis的SDK都提供了通过哨兵拿到实例地址，再访问实例的方式，我们直接使用即可，不需要自己实现这些逻辑。当然，对于只有主从实例的情况，客户端需要和哨兵配合使用，而在分片集群模式下，这些逻辑都可以做在proxy层，这样客户端也不需要关心这些逻辑了，Codis就是这么做的。<br><br>另外再简单回答下哨兵相关的问题：<br><br>1、哨兵集群中有实例挂了，怎么办，会影响主库状态判断和选主吗？<br><br>这个属于分布式系统领域的问题了，指的是在分布式系统中，如果存在故障节点，整个集群是否还可以提供服务？而且提供的服务是正确的？<br><br>这是一个分布式系统容错问题，这方面最著名的就是分布式领域中的“拜占庭将军”问题了，“拜占庭将军问题”不仅解决了容错问题，还可以解决错误节点的问题，虽然比较复杂，但还是值得研究的，有兴趣的同学可以去了解下。<br><br>简单说结论：存在故障节点时，只要集群中大多数节点状态正常，集群依旧可以对外提供服务。具体推导过程细节很多，大家去查前面的资料了解就好。<br><br>2、哨兵集群多数实例达成共识，判断出主库“客观下线”后，由哪个实例来执行主从切换呢？<br><br>哨兵集群判断出主库“主观下线”后，会选出一个“哨兵领导者”，之后整个过程由它来完成主从切换。<br><br>但是如何选出“哨兵领导者”？这个问题也是一个分布式系统中的问题，就是我们经常听说的共识算法，指的是集群中多个节点如何就一个问题达成共识。共识算法有很多种，例如Paxos、Raft，这里哨兵集群采用的类似于Raft的共识算法。<br><br>简单来说就是每个哨兵设置一个随机超时时间，超时后每个哨兵会请求其他哨兵为自己投票，其他哨兵节点对收到的第一个请求进行投票确认，一轮投票下来后，首先达到多数选票的哨兵节点成为“哨兵领导者”，如果没有达到多数选票的哨兵节点，那么会重新选举，直到能够成功选出“哨兵领导者”。","like_count":847,"discussions":[{"author":{"id":2361560,"avatar":"","nickname":"Geek_1bc715","note":"","ucode":"075433EA1AFE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333944,"discussion_content":"我擦，感觉每次你比作者讲的都多啊。","likes_number":29,"is_delete":false,"is_hidden":false,"ctime":1607677358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":7,"child_discussions":[{"author":{"id":1474954,"avatar":"https://static001.geekbang.org/account/avatar/00/16/81/8a/15a96a64.jpg","nickname":"Gatsby","note":"","ucode":"5DBFDA12556BDB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2361560,"avatar":"","nickname":"Geek_1bc715","note":"","ucode":"075433EA1AFE28","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340228,"discussion_content":"兄弟你太逗了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1609931570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333944,"ip_address":""},"score":340228,"extra":""},{"author":{"id":1397872,"avatar":"https://static001.geekbang.org/account/avatar/00/15/54/70/bc8f1824.jpg","nickname":"哈哈","note":"","ucode":"BA32EA6844F201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2361560,"avatar":"","nickname":"Geek_1bc715","note":"","ucode":"075433EA1AFE28","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359831,"discussion_content":"看破不说破","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1616297905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333944,"ip_address":""},"score":359831,"extra":""},{"author":{"id":1111032,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoGNavHX8buPVrwfPnrCuz57NbKynXF6ZtHkX4icpgQ3R2LdXussnJgO1Kic3G4aFLPvDaRfFia00Sjg/132","nickname":"dennis","note":"","ucode":"8E82B8257A1A20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2361560,"avatar":"","nickname":"Geek_1bc715","note":"","ucode":"075433EA1AFE28","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377274,"discussion_content":"说明Kaito大佬已经真正吃透了redis实现的各种原理，面对问题，犹如庖丁解牛。这至高的境界，膜拜啊～","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1622568158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333944,"ip_address":""},"score":377274,"extra":""}]},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299763,"discussion_content":"其实实现让业务无感知的成本还是比较高的，流程也比较复杂，处理不好还会带来其他问题。\n\n建议合理配置哨兵，尽快提升新的主库上来，缩短主库故障不可用的时间。","likes_number":22,"is_delete":false,"is_hidden":false,"ctime":1597810355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1110790,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f3/06/51fd3327.jpg","nickname":"写代码的阿诺","note":"","ucode":"FAAFD768169A6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":389861,"discussion_content":"我想问下，主库挂掉后从库未从主库同步的数据怎么办呢，","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1629454448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299763,"ip_address":""},"score":389861,"extra":""},{"author":{"id":2729003,"avatar":"https://static001.geekbang.org/account/avatar/00/29/a4/2b/0e1bab59.jpg","nickname":"senda","note":"","ucode":"74541011088AFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1110790,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f3/06/51fd3327.jpg","nickname":"写代码的阿诺","note":"","ucode":"FAAFD768169A6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541187,"discussion_content":"应该是找AOF","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640274016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389861,"ip_address":""},"score":541187,"extra":""},{"author":{"id":2476989,"avatar":"","nickname":"Geek_a810d9","note":"","ucode":"B7525D352DF0F9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1110790,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f3/06/51fd3327.jpg","nickname":"写代码的阿诺","note":"","ucode":"FAAFD768169A6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548397,"discussion_content":"应该是丢失了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1643182124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389861,"ip_address":""},"score":548397,"extra":""}]},{"author":{"id":1175329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/21/69c181b8.jpg","nickname":"Rain","note":"","ucode":"603DFFAC6A3755","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302302,"discussion_content":"由一个集群来判断另一个集群，所以这两个集群最好别部署在一起吧？否则极其有可能一起挂了。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1598875172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1175329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/21/69c181b8.jpg","nickname":"Rain","note":"","ucode":"603DFFAC6A3755","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302304,"discussion_content":"是的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598875667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302302,"ip_address":""},"score":302304,"extra":""}]},{"author":{"id":1723955,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4e/33/029194b5.jpg","nickname":"谁还不是个小公主是咋滴","note":"","ucode":"8E35446E63541A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300031,"discussion_content":"原文+大佬的评论，读下来真舒服。咯~","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1597914970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2061045,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/72/f5/35f2f763.jpg","nickname":"路小鹿","note":"","ucode":"331F70041CE8DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1723955,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4e/33/029194b5.jpg","nickname":"谁还不是个小公主是咋滴","note":"","ucode":"8E35446E63541A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574621,"discussion_content":"嗝嗝～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654181957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300031,"ip_address":""},"score":574621,"extra":""}]},{"author":{"id":1702231,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f9/57/a4f8fba2.jpg","nickname":"telnet","note":"","ucode":"3860B39D1FA81D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330922,"discussion_content":"感谢������Kaito大佬 的无私奉献 如果您有相关课程 我一定支持您哈","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1606730873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211790,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","nickname":"Wangxi","note":"","ucode":"C25A9A14179930","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300820,"discussion_content":"课代表的总结才是精华。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1598271653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1905024,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/11/80/73ff198e.jpg","nickname":"VictorLee","note":"","ucode":"FF7C211DA853CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388759,"discussion_content":"每篇必看Kaito大佬评论，哈哈哈","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1628939229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1134895,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/2f/7b04140c.jpg","nickname":"孫やさん","note":"","ucode":"C60877C1C71685","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1905024,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/11/80/73ff198e.jpg","nickname":"VictorLee","note":"","ucode":"FF7C211DA853CE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536849,"discussion_content":"哈哈 我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638882307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388759,"ip_address":""},"score":536849,"extra":""}]},{"author":{"id":1466744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/61/78/e7aa4e04.jpg","nickname":"al-byte","note":"","ucode":"D0298A02E9259D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299981,"discussion_content":"大牛就是大牛，看完老师的讲解再看大牛的补充","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597894108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1672786,"avatar":"https://static001.geekbang.org/account/avatar/00/19/86/52/91c7d112.jpg","nickname":"Garen","note":"","ucode":"0608C88F83EF0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1466744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/61/78/e7aa4e04.jpg","nickname":"al-byte","note":"","ucode":"D0298A02E9259D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308107,"discussion_content":"花一份钱，上两门课。哈哈","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1600847028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299981,"ip_address":""},"score":308107,"extra":""}]},{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299950,"discussion_content":"Sentinel是典型的gossip协议。Raft和ZAb都有leader的概念，redis是最终一致性的代表。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597887190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1229516,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","nickname":"蓝士钦","note":"","ucode":"726EB5C8EF1249","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550620,"discussion_content":"redis不是最终一致性，leader未同步数据给flow节点时挂了发生主从切换，未同步的数据就丢失了。\n而像ZooKeeper这类ZAB协议，是要Leader同步超过半数Flow节点，才告知客户的写操作成功，如果Leader挂了重新选出的Leader也有最新的数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644639646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299950,"ip_address":""},"score":550620,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1229516,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","nickname":"蓝士钦","note":"","ucode":"726EB5C8EF1249","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576014,"discussion_content":"意思是业务的写操作等于要同时写多个实例? ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655229966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":550620,"ip_address":""},"score":576014,"extra":""}]},{"author":{"id":2120879,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/af/2215f3b6.jpg","nickname":"徐小熊","note":"","ucode":"673D3C055AE5B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299793,"discussion_content":"每次必定来看你的评论，感觉你和老师一个档次的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597822219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2120879,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/af/2215f3b6.jpg","nickname":"徐小熊","note":"","ucode":"673D3C055AE5B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299795,"discussion_content":"跟老师比我还差很多哈，有很多知识盲区查资料才明白。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1597823152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299793,"ip_address":""},"score":299795,"extra":""}]},{"author":{"id":2028955,"avatar":"","nickname":"勿更改任何信息","note":"","ucode":"B4949BEB8B2AFD","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372222,"discussion_content":"哨兵集群判断出主库“主观下线”后，会选出一个“哨兵领导者”，之后整个过程由它来完成主从切换。\n——————————————————\n这里应该是 哨兵集群判断出主库“客观下线”后 ？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620228252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2028955,"avatar":"","nickname":"勿更改任何信息","note":"","ucode":"B4949BEB8B2AFD","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":372482,"discussion_content":"对，笔误，感谢指出。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620352309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":372222,"ip_address":""},"score":372482,"extra":""}]},{"author":{"id":1474954,"avatar":"https://static001.geekbang.org/account/avatar/00/16/81/8a/15a96a64.jpg","nickname":"Gatsby","note":"","ucode":"5DBFDA12556BDB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340230,"discussion_content":"大佬有没有博客 想关注一波~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609931630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1474954,"avatar":"https://static001.geekbang.org/account/avatar/00/16/81/8a/15a96a64.jpg","nickname":"Gatsby","note":"","ucode":"5DBFDA12556BDB","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":344531,"discussion_content":"\b加我微信 black-rye 进 Redis 交流群，每天讨论高质量技术问题哈。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1611490825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340230,"ip_address":""},"score":344531,"extra":""}]},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300567,"discussion_content":"课代表，我想问下，如果在主-从-从的拓扑结构下，如果发现主库或者第一级的从库core dow，整个redis会变成怎样？感觉哨兵机制下，不能出现主-从-从的拓扑结构。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598174505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300573,"discussion_content":"为啥不能呢？\n\n主库挂了哨兵会把从库顶上去。从库挂了如果没有读写分离也没影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598177726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300567,"ip_address":""},"score":300573,"extra":""},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":300603,"discussion_content":"如果A被B和C同步，C被D和E同步。\n如果C出问题，那就变成A被B同步，D被E同步。这样岂不是分裂成两个集群，在A写入的数据岂不是无法扩散到D和E？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1598188450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300573,"ip_address":""},"score":300603,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301517,"discussion_content":"是的，C出问题，D和E无法在同步数据。只能手动把D和E从A/B节点同步数据。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598542975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300603,"ip_address":""},"score":301517,"extra":""}]},{"author":{"id":2488075,"avatar":"https://static001.geekbang.org/account/avatar/00/25/f7/0b/57656fd9.jpg","nickname":"GUTS","note":"","ucode":"513CD5B5175951","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574462,"discussion_content":"好顶赞，学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654071602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2409244,"avatar":"https://static001.geekbang.org/account/avatar/00/24/c3/1c/06f888ca.jpg","nickname":"Aaron","note":"","ucode":"C14C714FF28ABB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558227,"discussion_content":"哨兵模式下可以开启读写分离吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648141049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553488,"discussion_content":"有个问题请教大佬，sentinel使用的gossip，什么时候传播停止？ 每个节点需要记录自己的传播链，然后才能做到不回传不重复传播消息？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645928350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":571504,"discussion_content":"观察下主库的sentinel_hello  会一直交换信息的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652247816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553488,"ip_address":""},"score":571504,"extra":""}]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553342,"discussion_content":"每日几mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645856997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2345422,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c9/ce/6d059da3.jpg","nickname":"灵石（请勿乱吃）","note":"","ucode":"81467807211055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368953,"discussion_content":"我有一个问题，为什么不是经过筛选打分后选出来的主库执行主从切换呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618887868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2415329,"avatar":"https://static001.geekbang.org/account/avatar/00/24/da/e1/40f3331f.jpg","nickname":"童年梦","note":"","ucode":"4FBDB3E628BAC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2345422,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c9/ce/6d059da3.jpg","nickname":"灵石（请勿乱吃）","note":"","ucode":"81467807211055","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373869,"discussion_content":"在执行通知任务时，哨兵会把新主库的连接信息发给其他从库，让它们执行 replicaof 命令，和新主库建立连接，并进行数据复制。\n从库之间不一定知道彼此的地址，但是哨兵知道所有的主从库地址。因此由哨兵发送信息是最合适的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1620898616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":368953,"ip_address":""},"score":373869,"extra":""}]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345644,"discussion_content":"拜占庭问题相关的描述有误，哨兵甚至所有的redis分布式特性都解决不了拜占庭问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611755582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345726,"discussion_content":"说说你的见解？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611766929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":345644,"ip_address":""},"score":345726,"extra":""},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":345764,"discussion_content":"拜占庭问题相对于非拜占庭问题，区别需要在于考虑了存在叛徒节点恶意攻击这种问题，哪怕是raft也在论文中强调是在非拜占庭环境下的。只有pbft，pow这种才是基于拜占庭环境设计的。\n这个搜搜就有详细说明，极客时间分布式算法课第一节也讲了，可以免费试听","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1611792551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":345726,"ip_address":""},"score":345764,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345843,"discussion_content":"嗯是的。我在评论里也提到了，拜占庭将军问题比较复杂，不仅需要考虑故障节点，还需要考虑恶意节点的问题。\n\n你可以再看下我的评论，我并没有说Redis哨兵是解决拜占庭将军问题，而只是其问题缩影，因为它只需要考虑故障节点就可以了，即大多数节点正常，整个集群就可以正常对外提供服务。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1611800700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":345764,"ip_address":""},"score":345843,"extra":""}]},{"author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334487,"discussion_content":"大神能说一下，评分里提到的id大小，id小的评分高，这是为啥啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607865057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1119911,"avatar":"https://static001.geekbang.org/account/avatar/00/11/16/a7/b3491533.jpg","nickname":"酸菜泡面","note":"","ucode":"74592566C52E74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334751,"discussion_content":"是不是因为id是增加的，越小表示存在的时间越久，相对来说更稳定一些？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607958019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334487,"ip_address":""},"score":334751,"extra":""},{"author":{"id":1684297,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/49/79024ed2.jpg","nickname":"Tr丶Zoey","note":"","ucode":"34A30F97E5A9DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336741,"discussion_content":"我理解是 id是最后托底的比较判断，因为前边条件都相等的话，最终总要比出来个大小不是？相当于if(a)...elseif(b)...elseif(c)...else...最后的else","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1608690704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334487,"ip_address":""},"score":336741,"extra":""},{"author":{"id":1073443,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","nickname":"Young","note":"","ucode":"075C0BBE20FD8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1119911,"avatar":"https://static001.geekbang.org/account/avatar/00/11/16/a7/b3491533.jpg","nickname":"酸菜泡面","note":"","ucode":"74592566C52E74","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371648,"discussion_content":"我认为仅仅是保底而已，完全也可以是最大值。\n查看redis源码，runid生成是 40位长，选自“0123456789abcdef”的随机字符串，小的不代表生命周期长。\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1619882809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334751,"ip_address":""},"score":371648,"extra":""}]},{"author":{"id":1452799,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","nickname":"BertGeek","note":"","ucode":"8E1D72C9F9778C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329678,"discussion_content":"经典redis 刨析！佩服","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606446543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2172420,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/r2nR7Zkl5RP7LobsNKJ6wmmtyXrh4alNSAOldx1y1PSeFB1J2I14HE4I0BCgicPhubIOibPZAENzEpHEWTFjMNqg/132","nickname":"董董","note":"","ucode":"C222E275545158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326562,"discussion_content":"down-after-milliseconds是主从判断是否断连的时间，同时也是哨兵判断主库故障的超时时间么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605617639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1022411,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/cb/8964faab.jpg","nickname":"-只是小小配角_","note":"","ucode":"EFC1CD54A23F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2172420,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/r2nR7Zkl5RP7LobsNKJ6wmmtyXrh4alNSAOldx1y1PSeFB1J2I14HE4I0BCgicPhubIOibPZAENzEpHEWTFjMNqg/132","nickname":"董董","note":"","ucode":"C222E275545158","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348390,"discussion_content":"看sentinel配置文件，这个参数可以判断master、slave和sentinel是否主观下线","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612533386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":326562,"ip_address":""},"score":348390,"extra":""}]},{"author":{"id":2262986,"avatar":"https://static001.geekbang.org/account/avatar/00/22/87/ca/00cc5a1a.jpg","nickname":"Tank","note":"","ucode":"A7108E83D2D199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322083,"discussion_content":"如果集群是多主多从模式是不是就不存在哨兵切换主从的时候客户端服务不能写的问题了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604672329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2262986,"avatar":"https://static001.geekbang.org/account/avatar/00/22/87/ca/00cc5a1a.jpg","nickname":"Tank","note":"","ucode":"A7108E83D2D199","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334486,"discussion_content":"你这个就到了redis-cluster集群这里了，和哨兵模式不是一回事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607864939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322083,"ip_address":""},"score":334486,"extra":""},{"author":{"id":1022411,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/cb/8964faab.jpg","nickname":"-只是小小配角_","note":"","ucode":"EFC1CD54A23F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2262986,"avatar":"https://static001.geekbang.org/account/avatar/00/22/87/ca/00cc5a1a.jpg","nickname":"Tank","note":"","ucode":"A7108E83D2D199","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348392,"discussion_content":"多主多从，单单在主从模式下，主与主之间数据是不同步的或者说是没有任何互动的，这样就需要客户端维护key在主节点的分布，这样一个主挂了，肯定会影响部分key不能操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612533502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322083,"ip_address":""},"score":348392,"extra":""},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2262986,"avatar":"https://static001.geekbang.org/account/avatar/00/22/87/ca/00cc5a1a.jpg","nickname":"Tank","note":"","ucode":"A7108E83D2D199","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375348,"discussion_content":"其实也是一样的 也是共识算法。因为在一个瞬时需要选出一个主 当然redis 集群做成了无中心节点的gossip协议。但仍然需要众人投票来切换一个分片的主","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621586762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322083,"ip_address":""},"score":375348,"extra":""}]},{"author":{"id":1297112,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ca/d8/b109ed85.jpg","nickname":"Jack","note":"","ucode":"F3863DAEF449D5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320361,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604328823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300143,"discussion_content":"佩服大神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597969134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062070,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg","nickname":"我的黄金时代","note":"","ucode":"D7825B45B372F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299838,"discussion_content":"可以说是非常清晰了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597834183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203469,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/0d/9a7e588c.jpg","nickname":"focus","note":"","ucode":"8F8E958E1F55C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299812,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597827530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299791,"discussion_content":"每次看完一节课的内容就来找你的评论来补充知识，很想问下你是怎么学习Redis的，感觉应该把Redis的知识点都吃透了吧而且能够很容易通过通俗的话表达出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597820958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299796,"discussion_content":"之前做业务用Redis比较多，后来开发Redis中间件，在开发和运维中的遇到的问题比较多，踩得坑也多，就研究得多了。但是还是有很多知识盲区需要补充。","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1597823340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299791,"ip_address":""},"score":299796,"extra":""}]}]},{"had_liked":false,"id":243506,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1598158273,"is_pvip":true,"discussion_count":6,"race_medal":0,"score":"542764037569","product_id":100056701,"comment_content":"一，作者讲了什么？<br>Redis故障转移：主从切换机制哨兵<br><br>二，作者是怎么把这事给讲明白的？<br>    1，提出主从切换的三个问题：a，主机状态确认  b，新主库选举  c，新主库通知<br>    2，讲解了哨兵的本质是一个特殊的redis进程（实例），有三个职责：监控，选主，通知<br><br>三，为了讲明白，作者讲了哪些要点，有哪些亮点？<br>    1，亮点1：哨兵的本质：是一个redis实例，要做三件事：监控主库，选举新主库，通知客户端和从机（这让我对哨兵理解清晰了很多）<br>    2，要点1：哨兵是通过心跳检测，监控主库状态，主库下线被分为：主观下线和客观下线、<br>    3，要点2：哨兵监控是可能误判的，所以哨兵一般是集群部署，采取投票的形式减少误判<br>    4，要点3：选定新主库规则是先筛选在打分，得分高的会被选为新主库，<br>    5，要点4：筛选规则：从库当前的网络连接状况，以及之前的网络连接状况，筛选中断次数标准可以配置<br>    6，要点5：打分规则：从库的优先级，数据同步状况，Id号大小，可以分为三轮，只要有一轮出现得分高的，就能选出<br><br>四，对作者所讲，我有哪些发散性思考？<br>    选举机制，在分布式的场景中经常出现。我在刚开始学习这一类知识的时候，经常会想：那些大神是怎么会想到这种解决方案的？<br>        后来读了一些西方社会运行机制的书，我有所释然。得到一些感悟：大神思考的技术问题解决方案，和他所生活的社会环境有着莫大的关系<br><br>五，将来在哪些场景，我能够使用到它？<br>    <br>六，留言区的收获<br>    1，数据同步状况的判断：（感谢@Monday 同学的提问）<br>            a：判断哪个从库的数据同步最接近主库，不是拿从库与主库比较，而是从库之间互相比较，谁大谁就是最接近的<br>            b：这样做的原因有二：主库已下线无法获取主库信息，环形缓冲区的位置偏移量是单调递增的（主库的被称为：master_repl_offset，从库的被称为：slave_repl_offset，其实两者本质是相同的，叫不同的名字只是为了区分）<br>    2，哨兵的使用：（感谢 @Kaito 大神简洁明了，无私的分享）<br>            a：主库下线，可读不可写，写失败的时间=哨兵切换主从的时间+客户端感知新主库时间<br>            b：主库下线无感知，需要客户端与哨兵配合改造：<br>                      1：哨兵主动通知：哨兵需要将最新的主库地址写入自己的pubsub中，客户端需要订阅这个pubsub，当这个pubsub有数据时，客户端就能感知到<br>                      2：客户端主动获取：客户端不将主从库写死，而是从哨兵集群中获取，从而始终获取最新的主从地址<br>            c：集群分片模式的Redis集群，可以不使用哨兵机制（我们项目组就是这样的）<br>                                ","like_count":127,"discussions":[{"author":{"id":1205697,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/c1/afcd981b.jpg","nickname":"程序员二师兄","note":"","ucode":"C9E3B5B3358BDF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304452,"discussion_content":"这种学习方法很赞，值得借鉴👍","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599574404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3161777,"avatar":"https://static001.geekbang.org/account/avatar/00/30/3e/b1/387da06f.jpg","nickname":"🌻summer","note":"","ucode":"D7FBE24B3FA368","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585046,"discussion_content":"赞\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661306956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","nickname":"牙小木","note":"","ucode":"E5C12D37A62949","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572960,"discussion_content":"后来读了一些西方社会运行机制的书？求推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653106333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112676,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","nickname":"Sam Fu","note":"","ucode":"EA285A4943271F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535138,"discussion_content":"集群分片模式为什么可以不用哨兵机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638361053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2104856,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","nickname":"liaomars","note":"","ucode":"4FCA97EE9FB57D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534655,"discussion_content":"发散思维那部分不错，能够与其它知识建立起关联","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638252029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2049478,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/45/c6/ba5176a6.jpg","nickname":"从不卖萌","note":"","ucode":"E9B7B1C8FAFE0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340665,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610091493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291696,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1620438811,"is_pvip":true,"discussion_count":10,"race_medal":0,"score":"353807757083","product_id":100056701,"comment_content":"这篇当中提到了很多分布式的理论，但没有细讲，我这里可以再补充下分布式理论相关的内容。希望对大家有所帮助：<br><br>现在很多开发同学对分布式的组件怎么使用都有一定经验，也知道 `CAP` 理论和 `BASE` 理论的大致含义。但认真去看分布式算法的真的很少，原因有三：<br><br>- 担心算法过于复杂，所以花的时间很少。<br>- 网上的资料能用大白话将分布式算法讲清楚的比较少。<br>- 学习分布式算法没有一条清晰的路线。<br><br>学习分布式协议和算法的路线可以是先学习四大基础理论，作为地基。然后再学习分布式协议和算法。就像是在地基上建房子，地基打好了，才能建更稳固的高楼大厦。<br><br>而分布式理论主要有四大块：<br><br>四大基础理论<br><br>- 拜占庭将军问题<br>- CAP 理论<br>- ACID 理论<br>- BASE 理论<br><br>分布式协议和算法主要有八种：<br><br>八大分布式协议和算法<br><br>- Paxos 算法<br>- Raft 算法<br>- 一致性 Hash 算法<br>- Gossip 协议算法<br>- Quorum NWR 算法<br>- FBFT 算法<br>- POW 算法<br>- ZAB 协议<br><br>如何高效地学习和掌握？<br><br>开发分布式系统最关键的就是根据场景特点，选择合适的算法，在一致性和可用性之间妥协折中，而如何做好折中方案，依赖于是否真正理解了各算法的特点。<br><br>讲真，如果认真学习这些理论和算法，并清楚了每个算法的特点，适合怎样的场景，当开发分布式系统时，做到知己知彼，才能旗开得胜，实际场景中的问题也能分析清楚并解决掉。<br><br>那么这些算法有哪些特点和适用场景，该从哪些方面考量？<br><br>分布式算法的四大维度<br><br>四大维度：拜占庭容错、一致性、性能、可用性。<br><br>这里我做了一个分布式算法四大维度的表格，大家可以对比下：<br><br>![分布式算法的对比](http:&#47;&#47;cdn.jayh.club&#47;blog&#47;20210317&#47;1plCsNXd82rh.png?imageslim)<br><br>拜占庭容错<br><br>拜占庭容错就是《拜占庭将军问题》中提出的一个模型，该模型描述了一个完全不可信的场景。不可信体现在：<br><br>- 故障行为。比如节点故障了。<br>- 恶意行为。比如恶意节点冒充正常节点，发出错误指令。<br><br>拜占庭容错的另外一面就是`非拜占庭容错`，又叫故障容错，解决了分布式系统存在故障，但是不存在恶意节点共识的问题，譬如节点所在服务器硬件故障、节点的服务进程崩溃等。<br><br>非拜占庭容错算法<br><br>在可信的环境，只需要具有故障容错能力，譬如 2PC、TCC、Paxos算法、Raft 算法、Gossip 协议、Ouorum NWR 算法、ZAB 协议。<br><br>#### 拜占庭容错算法<br><br>而在不可信的环境，需要具有拜占庭容错能力，报错 POW 算法、FBFT 算法。<br><br>一致性<br><br>一致性分为三种：<br><br>- 强一致性：保证写操作完成后，任何后续访问都能读到更新后的值。<br>- 弱一致性：写操作完成后，系统不能保证后续的访问都能读到更新后的值。<br>- 最终一致性：保证如果对某个对象没有新的写操作，最终所有后续访问都能读到相同的最近更新的值。<br><br>在数据库操作层面，我们多使用二阶段提交协议（2PC）保证强一致性。在分布式系统中，多使用 Raft 算法来保证强一致性。如果考虑可用性，则使用 Gossip 协议实现最终一致性，配合 Quorum NWR 算法的三个参数来调节容错能力。而 zookeeper 基于读性能的考虑，通过 ZAB 协议提供最终一致性。<br><br>可用性<br><br>可用性表示能得到响应数据，但不保证数据最新，强调服务可用。前提条件：访问的是非故障节点。<br><br>可用性最强的就是 Gossip 协议了，即时只有一个节点，集群可以提供服务。然后是 Paxos&#47;Raft&#47;ZAB&#47;Quorum NWR&#47;FBFT&#47;POW 算法，能够容忍部分节点故障。<br><br>而 2PC、TCC 要求所有节点都正常运行，系统才能正常工作，可用性最低。<br><br>性能<br><br>性能和可用性联系非常紧密，可用性越高，性能越强。<br><br>上面可用性的排序同样适用于性能维度。Gossip 协议可用于 AP 型分布式系统，水平扩展能力强，读写性能最强。<br><br>Paxos&#47;Raft&#47;ZAB&#47;Quorum NWR&#47;FBFT&#47;POW 算法都是领导者模型，写性能依赖领导者，读性能依赖一致性的实现。性能处于中等位置。<br><br>而 2PC、TCC 实现事务时，需要预留和锁定资源，性能较差。","like_count":83,"discussions":[{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381906,"discussion_content":"用一句评价:不明觉厉","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1625283595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2021305,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6NsibytCpIxC8gnrSKohoRgL0b1BlmUFKsOVtulD8QzuIqkiba353Um4oeHGUoRpDib1RMbM2oRfkPg/132","nickname":"静","note":"","ucode":"5D410AE1CFA791","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394646,"discussion_content":"你在蹭流量? 文不对题.....","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1631969722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1262808,"avatar":"https://static001.geekbang.org/account/avatar/00/13/44/d8/1a1761f9.jpg","nickname":"James_Shangguan","note":"","ucode":"F5855BC008DDEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409781,"discussion_content":"悟空老师，受教了，从慕课网到极客时间，一路有你，感谢！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635510108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2573740,"avatar":"https://static001.geekbang.org/account/avatar/00/27/45/ac/c47a42a3.jpg","nickname":"H","note":"","ucode":"DA7A76DE8E9A1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391712,"discussion_content":"马克","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630588764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131218,"avatar":"https://static001.geekbang.org/account/avatar/00/11/42/d2/1a3d8f88.jpg","nickname":"LL.Chen","note":"","ucode":"20EE5CD13C71EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382305,"discussion_content":"感谢分享。 看最最开始的介绍，以为会将你说的各个理论都介绍一遍，或者至少给一个overview，然而后面讲的有点点杂。感觉可以展开一个个聊一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625508003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1123163,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","nickname":"悟空聊架构","note":"","ucode":"C2F482A0CF8AF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1131218,"avatar":"https://static001.geekbang.org/account/avatar/00/11/42/d2/1a3d8f88.jpg","nickname":"LL.Chen","note":"","ucode":"20EE5CD13C71EC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382311,"discussion_content":"可以到这个网站上看：www.passjava.cn，分布式协议写了8篇了，欢迎加我好友沟通：passjava。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625525312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":382305,"ip_address":""},"score":382311,"extra":""}]},{"author":{"id":1423993,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ba/79/5a6336f5.jpg","nickname":"Ornamentism","note":"","ucode":"1A3BFE53A3BDBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578696,"discussion_content":"救命 信息量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656957239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1790357,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/51/95/8e47308f.jpg","nickname":"林林林","note":"","ucode":"DBCD9A4BF2CDAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556294,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647302842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2115387,"avatar":"https://static001.geekbang.org/account/avatar/00/20/47/3b/70198ceb.jpg","nickname":"Aibo","note":"","ucode":"2CE3E77BD2D014","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552070,"discussion_content":"有 bug，分享报参数有误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645271087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2306058,"avatar":"https://static001.geekbang.org/account/avatar/00/23/30/0a/2cd6afa1.jpg","nickname":"浅池卧龙","note":"","ucode":"37F55BFD124EB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387825,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628436511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242602,"user_name":"吕","can_delete":false,"product_type":"c1","uid":1210890,"ip_address":"","ucode":"8F08E2CB81C4C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","comment_is_top":false,"comment_ctime":1597795239,"is_pvip":false,"replies":[{"id":"89531","content":"文章中为了便于理解，我提到要找的从库，“它的slave_repl_offset需要最接近master_repl_offset”，这种情况下，表明这个从库的复制进度是最快的。<br><br>因为不同从库的slave_repl_offset是可以比较的，所以在实际的选主代码中，哨兵在这一步，是通过比较不同从库的slave_repl_offset，找出最大slave_repl_offset的从库。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597859114,"ip_address":"","comment_id":242602,"utype":1}],"discussion_count":3,"race_medal":0,"score":"194871323559","product_id":100056701,"comment_content":"关于第二步，根据master_repl_offset和slave_repl_offset来比较，但此时master已经挂掉了，哨兵如何知道master_repl_offset的，难道哨兵也会存一份主的master_repl_offset？根据之前的学习，salve是不存储master_repl_offset的","like_count":46,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504047,"discussion_content":"文章中为了便于理解，我提到要找的从库，“它的slave_repl_offset需要最接近master_repl_offset”，这种情况下，表明这个从库的复制进度是最快的。\n\n因为不同从库的slave_repl_offset是可以比较的，所以在实际的选主代码中，哨兵在这一步，是通过比较不同从库的slave_repl_offset，找出最大slave_repl_offset的从库。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597859114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1452799,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","nickname":"BertGeek","note":"","ucode":"8E1D72C9F9778C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329699,"discussion_content":"redis虽然安装、部署方便，原理更重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606447960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1870190,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/89/6e/1a2b0d34.jpg","nickname":"小白","note":"","ucode":"781957E1BF471E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319354,"discussion_content":"我也是想问这个问题的，赞一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604014554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242738,"user_name":"Oracleblog","can_delete":false,"product_type":"c1","uid":1043729,"ip_address":"","ucode":"DC9C5E721A55E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/11/c296d424.jpg","comment_is_top":false,"comment_ctime":1597828676,"is_pvip":false,"replies":[{"id":"89590","content":"在Redis 4.0前，主从切换后，从库需要和主库做全量同步。但是，在Redis 4.0后，Redis做了优化，从库可以只和新主库做增量同步就行。可以去了解下psync2  ：）","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597936603,"ip_address":"","comment_id":242738,"utype":1}],"discussion_count":4,"race_medal":0,"score":"74612272708","product_id":100056701,"comment_content":"主从切换选出新的主后，新的从库同步是需要做一次全量同步吗？","like_count":18,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504085,"discussion_content":"在Redis 4.0前，主从切换后，从库需要和主库做全量同步。但是，在Redis 4.0后，Redis做了优化，从库可以只和新主库做增量同步就行。可以去了解下psync2  ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597936603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3197360,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYmUib5xavd98HzH0mFnicrwWqJlyuu1pe1CdQ6tehpJPIFbNeKPtZVnZ1160WuibZQUGSI9KCpmVOg/132","nickname":"Geek_62d5df","note":"","ucode":"BCACE763B4789A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590187,"discussion_content":"后面有增量同步的讲解吗？如果这个时候做增量的话，这个时候偏移量差了一圈多，还会重新做全量同步是这样的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665575889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300353,"discussion_content":"哦，也就是说runID变化了，也不一定会触发全量复制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598061302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346772,"discussion_content":"新选的主服务会记录旧服务的RUN_ID的。\n假设m为主服务器（运行ID为M_ID）, A、B和C为三个从服务器；某一时刻主服务器m发生故障，从服务器A升级为主服务器（同时会记录replid2=M_ID），从服务器B和C重新向主服务器A发送“psync M_ID psync_offset”请求；","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1612060976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300353,"ip_address":""},"score":346772,"extra":""}]}]},{"had_liked":false,"id":243294,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1598022844,"is_pvip":false,"replies":[{"id":"89683","content":"1.1 的答案中，如果这小部分数据是新写数据，且未同步的话，发往从库的读请求是会失败的。但如果是更新的数据，且未同步的话，那么从库的读请求会返回旧值。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598027191,"ip_address":"","comment_id":243294,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53137630396","product_id":100056701,"comment_content":"解答：<br>1.1 绝大部分的读请求，可以响应。由于主库实例挂掉，肯定有小部分数据未被同步至从实例，而这部分数据的读请求是失败的。<br>1.2 由于主从机制实现了读写分离，主实例挂掉，无法响应写请求。<br><br>2. 暂时没想到，看了课代表的解答，蛮详细的","like_count":12,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504247,"discussion_content":"1.1 的答案中，如果这小部分数据是新写数据，且未同步的话，发往从库的读请求是会失败的。但如果是更新的数据，且未同步的话，那么从库的读请求会返回旧值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598027191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349536,"discussion_content":"这个时候存在主还没有选出来无法写的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613296022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242615,"user_name":"徐鹏","can_delete":false,"product_type":"c1","uid":1221936,"ip_address":"","ucode":"B19B6EB7002231","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/30/4be78ce7.jpg","comment_is_top":false,"comment_ctime":1597797826,"is_pvip":false,"replies":[{"id":"89528","content":"回答一下<br>1. 每个哨兵实例都会和主库、从库通信的，所以能获得从库的信息。<br><br>2. 在哨兵选主代码层面，是通过比较不同从库的salve_repl_offset大小来选择的，也就是选择salve_repl_offset最大的那个从库。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597852955,"ip_address":"","comment_id":242615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40252503490","product_id":100056701,"comment_content":"有两个问题想请教哈<br>1.每一个哨兵实例都有整个redis集群的信息，会和每一个redis实例通信吗？<br>2.在选主过程中，比较从库的salve_repl_offset，是把每个从库salve_repl_offset相互比较还是和master_repl_offset比较？原来的主库不是已经挂了，master_repl_offset 是如何获取到的呢？","like_count":9,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504051,"discussion_content":"回答一下\n1. 每个哨兵实例都会和主库、从库通信的，所以能获得从库的信息。\n\n2. 在哨兵选主代码层面，是通过比较不同从库的salve_repl_offset大小来选择的，也就是选择salve_repl_offset最大的那个从库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597852955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283480,"user_name":"ym","can_delete":false,"product_type":"c1","uid":1998645,"ip_address":"","ucode":"47FA421ACB8C70","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDaSBQoHdsOmFxbiayiaSmicpc5n55kic25xYwQIZoLJ41ucM9ib12yViapRd3O75tPiaPQ8icFXQnmVxiaPA/132","comment_is_top":false,"comment_ctime":1615795444,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"31680566516","product_id":100056701,"comment_content":"你好，老师，我有一个疑问，就是主库挂了之后，通过筛选机制选择了一个从库作为新的主库，但是不能保证这个新的主库（旧从库的slave_repl_offset）和之前的主库（旧主库的master_repl_offset）是相同的，有可能是slave_repl_offset &lt; master_repl_offset，那个即使选择了新的主库，那么数据也是丢失了一部分的，这个问题怎么解决呢。","like_count":7,"discussions":[{"author":{"id":2866724,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/gGOGcSH4AcAicc1DmjdoXLNich6gc4YdKrETgsQU6VICPuUdc5qBoV9226uLkySdc2ypUyayiazOC9bhBmeZnefXQ/132","nickname":"Geek_b175cb","note":"","ucode":"9062EE9CDFD2F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577607,"discussion_content":"RDB+AOF","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656228333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","nickname":"牙小木","note":"","ucode":"E5C12D37A62949","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572975,"discussion_content":"所以Redis是AP模型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653109571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2704165,"avatar":"https://static001.geekbang.org/account/avatar/00/29/43/25/b5a71802.jpg","nickname":"哈哈","note":"","ucode":"5940158B589551","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390742,"discussion_content":"保证强一致性对性能影响大吧，毕竟异步性能更好些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630023342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744338,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/2nvw0GuJKcxfAsMrevuetJ1h2BXVI6K0UnXvSF0svqibGvzN9gqumNLrJ5GKn8GhbZP5AJYswK07xJvrAQiaJnRw/132","nickname":"Geek_c9a4e1","note":"","ucode":"2E3AB34A7B6815","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383374,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626073601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098987,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","nickname":"花晨少年","note":"","ucode":"6AA3537A6BA10E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380786,"discussion_content":"https://blog.csdn.net/qq_37142346/article/details/89435458 看了下这篇文章，感觉redis目前没有机制保证不丢失，只要从节点落后，就会丢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624697257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098987,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","nickname":"花晨少年","note":"","ucode":"6AA3537A6BA10E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380783,"discussion_content":"对呀，这个问题怎么解决呢，redis不能实现像raft那样的复制协议吗，保证不丢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624697051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098987,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","nickname":"花晨少年","note":"","ucode":"6AA3537A6BA10E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389050,"discussion_content":"raft是共识算法，保证强一致性，不保证数据是最新的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629103991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":380783,"ip_address":""},"score":389050,"extra":""},{"author":{"id":1228560,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/10/b7974690.jpg","nickname":"BD","note":"","ucode":"A95CF8C3EDC228","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541927,"discussion_content":"强一致性还是有歧义的吧，只是大部分节点一致而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640606257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389050,"ip_address":""},"score":541927,"extra":""}]}]},{"had_liked":false,"id":243340,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1598065351,"is_pvip":false,"replies":[{"id":"89692","content":"Redis哨兵集群中，哨兵配置文件中只用配置主节点的IP、端口号。每个哨兵会和主节点连接，并把自己的连接信息发布到主节点的__sentinel__:hello频道上，同时，每个哨兵会订阅这个频道获取其他哨兵的连接地址，这样，哨兵通过主节点上的__sentinel__:hello频道就相互感知了。<br><br>文章也有提到，可以回顾下 :)","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598074320,"ip_address":"","comment_id":243340,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27367869127","product_id":100056701,"comment_content":"老师好，想问下，redis哨兵机制中，每个哨兵就是通过发布消息互相感知的吗？没有在启动时就指定对应哨兵集群的所有ip。","like_count":6,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504261,"discussion_content":"Redis哨兵集群中，哨兵配置文件中只用配置主节点的IP、端口号。每个哨兵会和主节点连接，并把自己的连接信息发布到主节点的__sentinel__:hello频道上，同时，每个哨兵会订阅这个频道获取其他哨兵的连接地址，这样，哨兵通过主节点上的__sentinel__:hello频道就相互感知了。\n\n文章也有提到，可以回顾下 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598074320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542778,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8a/7a/54003392.jpg","nickname":"Geek_27a248","note":"","ucode":"6AC3AC42E6EEC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304960,"discussion_content":"只配置 主节点ip端口，如果主节点也崩了这种情况是有办法避免吗？还是使用类似keepalived这种实现\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599723584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242649,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1597804744,"is_pvip":true,"replies":[{"id":"89591","content":"和你探讨下，你有没有考虑过，如果把写命令缓存到哨兵中，那是需要客户端的命令发送，从发给主库切换到发给哨兵么？另外，哨兵实例一般有多个，你的方案中，写命令缓存到哪个哨兵实例呢？","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597936818,"ip_address":"","comment_id":242649,"utype":1}],"discussion_count":11,"race_medal":0,"score":"27367608520","product_id":100056701,"comment_content":"肯定会中断的，但是这么让客户端无感知，说说可能不成熟的想法，请老师和大家指点：<br>\t1、如果是读请求，可以直接读取从库，客户端无影响；<br>\t2、如果是写请求，可以先把命令缓存到哨兵中（比如说哨兵内部维护一个队列等），等选主成功后，在新的主库进行执行即可。","like_count":6,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504063,"discussion_content":"和你探讨下，你有没有考虑过，如果把写命令缓存到哨兵中，那是需要客户端的命令发送，从发给主库切换到发给哨兵么？另外，哨兵实例一般有多个，你的方案中，写命令缓存到哪个哨兵实例呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597936818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1671917,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","nickname":"akka","note":"","ucode":"FCD0964E761172","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300140,"discussion_content":"sentinel哨兵进程是一个运行在特殊模式下的redis服务，这个特殊性除了表现在拥有监控、选主、通知这些功能外，还表现在sentinel哨兵有一套自己的命令集合，普通redis服务支持的命令集合，在sentinel中大多数都不被支持（目前我知道的，就支持subscribe订阅频道），其中set、get、rpush、lpush就不被支持，所以哨兵中应该不能存储数据吧！\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597962574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1671917,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","nickname":"akka","note":"","ucode":"FCD0964E761172","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300173,"discussion_content":"不是现有功能，是在想怎么能处理这个问题，就是假设，提出认知范围内的可能的可行性方案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597975353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300140,"ip_address":""},"score":300173,"extra":""}]},{"author":{"id":1006735,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","nickname":"小可","note":"","ucode":"8834AF621FA67D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347559,"discussion_content":"个人写失败问题感觉要在业务层处理，写失败入MQ后续重新补录，新主出来前读会有数据不一致问题，但可接受，看具体情况处理吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612257210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1150927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","nickname":"那时刻","note":"","ucode":"B0D150856C3A4A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300121,"discussion_content":"我的想法开始和你是一样的，但是实现起来细节处理比较多，感觉这样增加了系统的不少复杂度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597938510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300116,"discussion_content":"是的，发送给哨兵，在主从切换的时候，首先是要从哨兵中选择出主哨兵，主哨兵去做主从节点的切换，所以命令缓存到本次切换的主哨兵即可。\n同时，因为是主哨兵，主从切换是否完成，他是第一时间知道的，在完成的第一时间就进行缓存命令在新的主节点进行执行，这样是最快的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597937660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1150927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","nickname":"那时刻","note":"","ucode":"B0D150856C3A4A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":300123,"discussion_content":"嗯，这增加了哨兵选主机制，也增加了复杂度，我觉得\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597938586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300116,"ip_address":""},"score":300123,"extra":""},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1150927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","nickname":"那时刻","note":"","ucode":"B0D150856C3A4A","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":300125,"discussion_content":"队列会增加复杂度；选主是不用增加的，因为现在的哨兵机制就是在主从切换时，先选主，再切换的，不然多个哨兵进行切换肯定会出问题的，所以要选主，让主是进行主从切换的操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597938771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300123,"ip_address":""},"score":300125,"extra":""},{"author":{"id":1150927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","nickname":"那时刻","note":"","ucode":"B0D150856C3A4A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":300131,"discussion_content":"嗯，你说的这一点在理。还有个问题是，把命令缓存在单点的主哨兵上，如果这个主哨兵故障了，所有缓存命令都失败了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597939864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300125,"ip_address":""},"score":300131,"extra":""}]}]},{"had_liked":false,"id":267662,"user_name":"Master","can_delete":false,"product_type":"c1","uid":1613760,"ip_address":"","ucode":"79D0145B853C9E","user_header":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","comment_is_top":false,"comment_ctime":1607864588,"is_pvip":false,"replies":[{"id":"97905","content":"在分布式系统中，根据节点ID进行选择时，一般就会选择ID号最小的节点，属于较为常见的默认做法。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608975059,"ip_address":"","comment_id":267662,"utype":1}],"discussion_count":4,"race_medal":0,"score":"18787733772","product_id":100056701,"comment_content":"在优先级和复制进度都相同的情况下，ID 号最小的从库得分最高，会被选为新主库。这种原则是因为啥啊？id号小，为啥得分高啊","like_count":4,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511703,"discussion_content":"在分布式系统中，根据节点ID进行选择时，一般就会选择ID号最小的节点，属于较为常见的默认做法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608975059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073443,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","nickname":"Young","note":"","ucode":"075C0BBE20FD8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371661,"discussion_content":"看源码，runid只是40个字符长度的随机十六进制字符而已，你完全也可以选最大的。只是为了最后有个保底方案，总得选一个吧！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619885539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2082118,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/P1y2k6dcoAWtlXkMcKFGeAmykTKCOKEicKsN0TX4eT6icibATfqnlsDyjicfjvo1zAa9lAS4ZGkSEGjeUUUmy9Qofg/132","nickname":"xyy_Li","note":"","ucode":"81A647AB5F757A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549128,"discussion_content":"在前两个优先级一样的情况下，其实选择哪个作为主库效果都是一样的。最小的id我认为应该最快的，选择最大的话还可能要依次找。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643596323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375354,"discussion_content":"就是一个约定 并没有什么高深的见解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621587044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243290,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1598020567,"is_pvip":true,"replies":[{"id":"89680","content":"Redis server启动时，会生成一个40字节长的随机字符串作为runID，具体算法用的是SHA-1算法。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598026994,"ip_address":"","comment_id":243290,"utype":1}],"discussion_count":1,"race_medal":1,"score":"18777889751","product_id":100056701,"comment_content":"Redis 的实例ID是根据什么进行生成的？","like_count":4,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504245,"discussion_content":"Redis server启动时，会生成一个40字节长的随机字符串作为runID，具体算法用的是SHA-1算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598026994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243534,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1598173410,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14483075298","product_id":100056701,"comment_content":"老师，如果是主库挂了，从库被提升为主库，这我能够理解。但是你在前面某一篇文章中提到，主从同步最好是通过主从从的方式进行级联，这种拓扑结构下，如果机器或者redis出现问题，整个系统会变成怎样呢？这有点烧脑了","like_count":3,"discussions":[{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353222,"discussion_content":"需要运维加班了呗，主-从-从本质就是两个集群，中间的从一断，后面的从就跟主分离了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615084854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271482,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1609661826,"is_pvip":false,"replies":[{"id":"98412","content":"是的，可以让Redis客户端做相应的配合（需要对客户端做相应的开发），如果后端集群正在切换，客户端需要缓存下请求，避免直接发到后端集群。等切换完成，再把请求发到集群处理。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609718479,"ip_address":"","comment_id":271482,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10199596418","product_id":100056701,"comment_content":"读了后面的一篇文章想到在主从切换过程中如何让客户端无感知的解决方案：<br>业务系统也可以订阅对应的状态事件，每次进行写请求的时候，判断下状态，如果是处于切换状态可以，先写入到队列中。","like_count":2,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512938,"discussion_content":"是的，可以让Redis客户端做相应的配合（需要对客户端做相应的开发），如果后端集群正在切换，客户端需要缓存下请求，避免直接发到后端集群。等切换完成，再把请求发到集群处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609718479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3050838,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MnNmAGFwlyPFiazHo4micPVFR4SheUk4VC5gKyoYHyHaZAWbyI16aEhm4xoxa4bNH7h5SdPajZibpC5wlyUGBzoog/132","nickname":"Geek_ad9aec","note":"","ucode":"951E86E64B4844","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":579859,"discussion_content":"集群切换很快么？一般用时多久？前端缓存的这种做法才能不被客户端感知？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657723224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":512938,"ip_address":""},"score":579859,"extra":""}]}]},{"had_liked":false,"id":251684,"user_name":"意琦行","can_delete":false,"product_type":"c1","uid":1637619,"ip_address":"","ucode":"B940AA60B5CCEE","user_header":"https://static001.geekbang.org/account/avatar/00/18/fc/f3/28fe16cf.jpg","comment_is_top":false,"comment_ctime":1601796733,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10191731325","product_id":100056701,"comment_content":"这个判断原则就是：少数服从多数。<br>按道理说主库下线了应该所有哨兵的结果都是下线才对呀，如果有一个哨兵检测为上线那主库肯定是上线状态吧，为什么这种情况也需要重新选举呢。","like_count":2,"discussions":[{"author":{"id":1316926,"avatar":"https://static001.geekbang.org/account/avatar/00/14/18/3e/f8632713.jpg","nickname":"EveryDayIsNew","note":"","ucode":"776B81EF6830FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389232,"discussion_content":"大多数做的选择不一定对，但大多数情况下是对的就可以，正常为了容灾，集群都是多机房多机架部署，可能是部分机房之间断网了，那就意味着网络存在不通的情况，大多数决策下线就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629186555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389061,"discussion_content":"如果主库真的挂了是那样的。但是还有一种是假下线，比如主库网络环境不佳或者负载太大造成部分哨兵探测失败。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629106363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242661,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1597805948,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10187740540","product_id":100056701,"comment_content":"1 sentinel 集群 一般建议是3个节点 还是，多个节点， 怎么保证 sentinal 集群的高可用， 以及集群节点过多 ，会不会 导致选举时间过长，  sentinel 选举 类似于 变体raft 协议<br>2 能不能创建一个微信 或者QQ 群， 一些简单的问题 可以互相交流，","like_count":2,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389063,"discussion_content":"一般都是3个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629106424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255856,"user_name":"登山看云海","can_delete":false,"product_type":"c1","uid":1626189,"ip_address":"","ucode":"374319609681FB","user_header":"https://static001.geekbang.org/account/avatar/00/18/d0/4d/91979d1a.jpg","comment_is_top":false,"comment_ctime":1603444633,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5898411929","product_id":100056701,"comment_content":"能否讲下客户端在这个过程中如何做到无感知","like_count":1,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375355,"discussion_content":"100%无感知是做不到的 因为正常的网络瞬断总是有的 。那么如果把主从切换期间的网络瞬断故意算在内触发保护机制（不是熔断 而是写入队列 因为队列本质上是日志 而日志本质上又是backlog实现） 那么就可以做到。总结就是写backlog 至于这个backlog是谁 就由你自己来定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621587158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242583,"user_name":"Geek_c37e49","can_delete":false,"product_type":"c1","uid":1844885,"ip_address":"","ucode":"BCE0AD860241C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo6waC1mF0VmQibDjnJLEgFnmEUSNJozibaUeYZkpQaqicVcXxGZ3kKtnY5XF0iblxT4oiam7ucuJ1bqgg/132","comment_is_top":false,"comment_ctime":1597767893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892735189","product_id":100056701,"comment_content":"主从切换的时候应该是没办法响应写请求的，不过可以把请求缓存记录下来<br>读请求应该是可以服务的吧","like_count":1},{"had_liked":false,"id":355091,"user_name":"蔡欧","can_delete":false,"product_type":"c1","uid":1317604,"ip_address":"广东","ucode":"39470A1DCAA7A9","user_header":"https://static001.geekbang.org/account/avatar/00/14/1a/e4/5e2a8190.jpg","comment_is_top":false,"comment_ctime":1661072520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661072520","product_id":100056701,"comment_content":"如何解决Redis主库挂了，Redis依赖可以提供服务：使用哨兵，监控、切换和通知整个Redis集群<br>如何避免哨兵由于主观下线导致Redis切换：使用哨兵集群，采用少数服从多数的方式<br>哨兵选举的依据：优先级+进度+序号+网络状态监控(down-after-milliseconds时间内断链的次数)<br>Redis客户端如何自动切换：通过配置客户端哨兵集群配置，可以采用主读或者pubsub方式得到最新的Redis集群地址<br>如何百分百避免在Redis切换过程数据丢失：Redis切换导致写不可用范围为切换时间+客户端感知新Redis主的时间，这段时间导致Redis写不可用，1 把down-after-milliseconds配置改小，对Redis不可用更加敏感，但是可能导致误判  2 客户端改造成有降级措施，把不可用请求先写入消息队列中，后续等Redis可用后再进行重放","like_count":1},{"had_liked":false,"id":353677,"user_name":"刘敏","can_delete":false,"product_type":"c1","uid":1101430,"ip_address":"北京","ucode":"63093CC9AAFCDA","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/76/d9b8db4a.jpg","comment_is_top":false,"comment_ctime":1659670441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659670441","product_id":100056701,"comment_content":"redis为什么不能设计成自主选主，必须借助哨兵？3.0的集群主的选举又不需要哨兵","like_count":0},{"had_liked":false,"id":351892,"user_name":"going","can_delete":false,"product_type":"c1","uid":2313353,"ip_address":"","ucode":"3AA83F9B07BE8B","user_header":"https://static001.geekbang.org/account/avatar/00/23/4c/89/82a3ee04.jpg","comment_is_top":false,"comment_ctime":1658280933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658280933","product_id":100056701,"comment_content":"有一个问题想要请教一下蒋老师，就是采用了哨兵集群后，对于从库下线的判定是否会采用“少数服从多数”还是之前那种由一个哨兵就可以决定？","like_count":0},{"had_liked":false,"id":349617,"user_name":"demnox","can_delete":false,"product_type":"c1","uid":1798260,"ip_address":"","ucode":"C3D8A08ED74ED1","user_header":"https://static001.geekbang.org/account/avatar/00/1b/70/74/06742258.jpg","comment_is_top":false,"comment_ctime":1656148442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656148442","product_id":100056701,"comment_content":"对于很多人问到的问题，建议正文中更新补充一下","like_count":0},{"had_liked":false,"id":347687,"user_name":"樱桃汁。","can_delete":false,"product_type":"c1","uid":2907715,"ip_address":"","ucode":"36EE9D8B9C5122","user_header":"https://static001.geekbang.org/account/avatar/00/2c/5e/43/004a52fa.jpg","comment_is_top":false,"comment_ctime":1654313937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654313937","product_id":100056701,"comment_content":"切换的时候客户端可以正常请求，但是只有读操作返回正常结果，写操作会失败，因为主库挂了，接收不到写操作，新的主库还没有到位无法进行写操作。<br>想要不感知中断，哨兵可以加一个功能：查询客户端写操作涉及的数据并判断是否该操作是否合法，如果合法记录该请求，并返回客户端成功，切换成功后把请求发给新主库。该操作不合法的话返回客户端失败。或者切换中直接客户端返回网络不好等失败","like_count":0},{"had_liked":false,"id":345388,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1652247470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652247470","product_id":100056701,"comment_content":"主从切换需要的时间：发生故障ping_time_out+哨兵集群选主时间+哨兵处理时间+客户端感知到新主库的时间<br>其中2,3中将两个流程时间忽略不计<br><br><br>主从存在两个场景：<br>1.主库确实宕机或者网络不通，此时哨兵集群将其判定客观下线，那么redis客户端写入就会报错。此时客户端有感知<br>2.主库本身没问题，但是发生网络划分，此时客户端是无法发现的，会写入脏数据。但是本身可以解决，以下单为例：在最终确认接口里都会以db作为最后判断依据，这样就可以从流程上规避问题<br><br>主从切换期间是否存在数据丢失问题：<br>1.如果客户端不做任何处理，直接报错，那么客户端有感知，但不会写入脏数据<br>2.如果客户端此时使用新主库，可能因为缺失一部分数据（这是因为主从复制本身是异步复制，两两之间复制偏移量不可能完全一致），解决方法就是按照正常cache aside模式将数据补齐。<br>这里唯一要注意的就是缓存击穿等问题<br><br>如何做到客户端无感知：<br>1.通常需要客户端做适配，在发现错误时，将重要数据推入kafka（只要做到mmap写入的消息中间件都可以），只要保证kafka推入成功，即可表示写入成功。此时相当于是一个分布式事务，只不过后续流程都要做适配，比较麻烦<br>2.在主从切换完成后，客户单订阅哨兵事件侦测switch-master即可<br>3.如果错过了，那么客户端需要自己通过指令sentinel get-master-addr-by-name 拉取最新主库<br><br>","like_count":0},{"had_liked":false,"id":341928,"user_name":"ivhong","can_delete":false,"product_type":"c1","uid":2659871,"ip_address":"","ucode":"9947B228807AC9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","comment_is_top":false,"comment_ctime":1649922705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649922705","product_id":100056701,"comment_content":"老师，我有个问题和迷惑，哨兵集群是独立于redis集群之外的一组新的服务器么？","like_count":0},{"had_liked":false,"id":341365,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1649568569,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649568569","product_id":100056701,"comment_content":"客户端的读操作不受影响，写操作会出现失败的情况：写入主库超时、新的主库还在选举中；客户端需要进行重试。","like_count":0},{"had_liked":false,"id":338501,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1647527518,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647527518","product_id":100056701,"comment_content":"还是好好学习消化一下～","like_count":0},{"had_liked":false,"id":337916,"user_name":"九月清晨柳成荫","can_delete":false,"product_type":"c1","uid":2829144,"ip_address":"","ucode":"431713477304F9","user_header":"https://static001.geekbang.org/account/avatar/00/2b/2b/58/4a67284d.jpg","comment_is_top":false,"comment_ctime":1647158500,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647158500","product_id":100056701,"comment_content":"筛选阶段，所有从库都不符合要求，都被筛选掉了，怎么处理的？  那就选择断连次数最少的那个从库作为新的主库吗？","like_count":0},{"had_liked":false,"id":337718,"user_name":"九月清晨柳成荫","can_delete":false,"product_type":"c1","uid":2829144,"ip_address":"","ucode":"431713477304F9","user_header":"https://static001.geekbang.org/account/avatar/00/2b/2b/58/4a67284d.jpg","comment_is_top":false,"comment_ctime":1646987605,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646987605","product_id":100056701,"comment_content":"主-从A-从B1-从B2-从B3-从B4，这种模式下。这个从A挂了的话，是不是从B这些实例里也要进行选主操作？","like_count":0},{"had_liked":false,"id":336204,"user_name":"妥妥","can_delete":false,"product_type":"c1","uid":1206716,"ip_address":"","ucode":"5BC1C85CF60CAD","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/bc/c22bf219.jpg","comment_is_top":false,"comment_ctime":1646009513,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1646009513","product_id":100056701,"comment_content":"老师，弱弱的问一下，主库挂了，从库与主库数据可能不一致，这个怎么处理？还是说可以允许数据不一致不做处理？","like_count":0,"discussions":[{"author":{"id":2797976,"avatar":"","nickname":"Geek_323a60","note":"","ucode":"CDC276EC255411","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579956,"discussion_content":"首先选主的过程是尽可能的选择与刚刚挂掉的主库数据一致的从库。对于新主库和旧主库不一致的数据，Redis只能选择放弃。当选好新主库后会做一次数据同步，完成新主库与从库的数据库同步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657784275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554064,"discussion_content":"没办法处理，如果选择Redis，就必须容忍这样的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646204351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334325,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1644888938,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1644888938","product_id":100056701,"comment_content":" down-after-milliseconds * 10，如果是主库网络有问题，经常和从库断线，这会不会导致所有从库都排除了？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554065,"discussion_content":"会，日志也会体现出因为没有较好的从库导致故障转移取消","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646204658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332966,"user_name":"A 拽丫头","can_delete":false,"product_type":"c1","uid":1470434,"ip_address":"","ucode":"F875D99D18DF6E","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/e2/f3b05833.jpg","comment_is_top":false,"comment_ctime":1643896061,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643896061","product_id":100056701,"comment_content":"上节课我向你介绍过，主从库同步时有个命令传播的过程。在这个过程中，主库会用 master_repl_offset 记录当前的最新写操作在 repl_backlog_buffer 中的位置，而从库会用 slave_repl_offset 这个值记录当前的复制进度。<br><br><br>上节课讲的是，只有在后续的主从同步异常断开后，才会将后续的数据，写入 repl 缓冲区<br>疑问1 :当主库异常，意外着主从可能也异常，此时还为将后续写操作写入 repl 缓冲区，此时主从同步指针都在一个位置呀！所以这个策略怎么成立呀？<br>恕我愚笨，跪求老师解答","like_count":0},{"had_liked":false,"id":332486,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1643272254,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1643272254","product_id":100056701,"comment_content":"老师，关于筛选那段我去 redis 官网看了下，我大致是这样理解的：<br><br>对从库执行 INFO 命令可以获取到从库的宕机毫秒数，如果这个宕机毫秒数超过了哨兵认为主库的宕机时间加上 down-after-milliseconds 配置的时间的十倍，也就是下边这个公式：<br><br>(down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state<br><br>如果从库的宕机时间超过了以上时间，则认为这个从库不适合做为主库。<br><br>我这样理解有错吗？那您关于筛选那块是不是有误了。<br><br>官网文档链接：https:&#47;&#47;redis.io&#47;topics&#47;sentinel","like_count":0,"discussions":[{"author":{"id":1188527,"avatar":"https://static001.geekbang.org/account/avatar/00/12/22/af/1a31bc11.jpg","nickname":"The Sword of Damocles","note":"","ucode":"42B462FC572F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558328,"discussion_content":"这里的 down_after_period 取值就来自于 down-after-milliseconds","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648207382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188527,"avatar":"https://static001.geekbang.org/account/avatar/00/12/22/af/1a31bc11.jpg","nickname":"The Sword of Damocles","note":"","ucode":"42B462FC572F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558327,"discussion_content":"这个问题，老师的解释应该是有问题的，redis 并没有那么智能，能观察到之前的连接不稳定，你可以看下 redis 的源码，这个时间阈值是：\nmstime() - master-&gt;s_down_since_time + master-&gt;down_after_period * 10，\nsentinel当前时间 - sentinel认为master主观下线的时间 + 10*down_after_period，\n并且，这个参数并不是唯一的筛选条件，这些都在源码中的 sentinelSelectSlave 方法中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648207213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332378,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1643190300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643190300","product_id":100056701,"comment_content":"从库筛选那里还是不理解，怎么通过 down-after-milliseconds 进行筛选呢？ down-after-milliseconds 这个配置不是在哨兵里配，用来判断主库是否下线的吗？怎么判断断连次数从而筛选从库呢？可以解答下吗？很迷惑，","like_count":0},{"had_liked":false,"id":332225,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1643099512,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1643099512","product_id":100056701,"comment_content":"在筛选阶段，使用配置项 down-after-milliseconds * 10，这个配置是配置在哪里的？哨兵还是从库？","like_count":0,"discussions":[{"author":{"id":1188527,"avatar":"https://static001.geekbang.org/account/avatar/00/12/22/af/1a31bc11.jpg","nickname":"The Sword of Damocles","note":"","ucode":"42B462FC572F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558329,"discussion_content":"down-after-milliseconds 应该是配置在哨兵里的，每个哨兵自身持有一个 master 的实例(sentinelRedisInstance)，里面保存着这个参数，也就是说，每个哨兵判断 master 主观下线的阈值，可以是不一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648207635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332173,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1643079454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643079454","product_id":100056701,"comment_content":"这节课我大致知道保证写到主库的逻辑可能是客户端做的，那放到具体的项目里，需要去实现这部分吗？还是说redis的客户端就实现好了？","like_count":0},{"had_liked":false,"id":331617,"user_name":"lobby","can_delete":false,"product_type":"c1","uid":1181960,"ip_address":"","ucode":"8D81722BE36AD4","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/08/f3547e77.jpg","comment_is_top":false,"comment_ctime":1642671447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642671447","product_id":100056701,"comment_content":"两点疑惑：<br>1.master_repl_offset存在在主结点，哨兵选主的时候比较最接近主结点的从结点是如何判断的？<br>2.主结点挂掉的时候，没有从结点和主节点的数据保持一致，那么重新选主之后是不是这部分差异数据不见了？旧的主节点重新接入集群的时候，能不能立刻重新成为主结点？","like_count":0},{"had_liked":false,"id":325171,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1638848669,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1638848669","product_id":100056701,"comment_content":"第6-9小节讲解了如何通过减少服务中断提高redis可靠性。<br>首先是通过主从库模式（第6节），增加从库冗余备份，主从之间可以增量备份。<br>但是主库可能会挂掉，那么就需要主从切换，这时需要哨兵（第7节）判断主库下线、选出新主库并通知从库。<br>架构演进到这一步发现哨兵也可能会挂掉，那么提供哨兵集群机制（第8节），且看老师下回分解。","like_count":0},{"had_liked":false,"id":324626,"user_name":"yingsunjiu","can_delete":false,"product_type":"c1","uid":1032867,"ip_address":"","ucode":"D94720E48EF6B4","user_header":"","comment_is_top":false,"comment_ctime":1638520966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638520966","product_id":100056701,"comment_content":"如果有个对大  key 的操作，导致redis 主线程阻塞，PING命令也会被阻塞么？这样的话会不会导致 redis 被判定为不可达，导致主备切换？","like_count":0},{"had_liked":false,"id":322268,"user_name":"【编程】曹学进","can_delete":false,"product_type":"c1","uid":2069181,"ip_address":"","ucode":"2DA58D77B995B3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/92/bd/3861e548.jpg","comment_is_top":false,"comment_ctime":1637284276,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1637284276","product_id":100056701,"comment_content":"在优先级和复制进度都相同的情况下，ID号最小的从库得分最高，会被选为主库。请问一下，这里为什么要选择ID号最小的呢？原理是什么？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554067,"discussion_content":"到这一步，选哪一个已经无关紧要，简单选id最小的就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646205181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318577,"user_name":"受超凡","can_delete":false,"product_type":"c1","uid":2678558,"ip_address":"","ucode":"A2A160D483BBB0","user_header":"","comment_is_top":false,"comment_ctime":1635338098,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1635338098","product_id":100056701,"comment_content":"判断网络连接状态那一步，极端情况下如果发现从库都不符合条件呢？是都过滤掉无法选举呢？还是都通过进入下一轮呢？","like_count":0,"discussions":[{"author":{"id":1188527,"avatar":"https://static001.geekbang.org/account/avatar/00/12/22/af/1a31bc11.jpg","nickname":"The Sword of Damocles","note":"","ucode":"42B462FC572F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558331,"discussion_content":"下一次 serverCron 中会再做尝试，直到达到配置的阈值为止。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648208850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554069,"discussion_content":"无法选举，并提示故障转移失败","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646205298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314304,"user_name":"kelly","can_delete":false,"product_type":"c1","uid":1150022,"ip_address":"","ucode":"B1DFA3D7340869","user_header":"https://static001.geekbang.org/account/avatar/00/11/8c/46/dbf8eb8a.jpg","comment_is_top":false,"comment_ctime":1632965505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632965505","product_id":100056701,"comment_content":"如果主库只是由于网络等因素临时下线，而导致哨兵集群触发了故障转移，但是过一段时间后原先的主库又恢复了咋办，那就是两个主库，导致脑裂","like_count":0},{"had_liked":false,"id":314005,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1632798492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632798492","product_id":100056701,"comment_content":"如果从库宕机，对redis集群服务影响不大，因为还有主库可以处理写操作命令，其他提供读操作命令，断联从库在自动恢复时可以通过主从同步进行数据同步。<br><br>如果主库宕机，那么就需要通过哨兵机制选择出新的主库，并进行主从切换。哨兵机制涉及到3个过程：<br>  1、监控<br>  2、选主<br>  3、通知<br><br>监控主要是通过发送网络连接的方式判断网络是否畅通，如果无法连接，对于从库可以直接判定为“主观下线”，对于主库的话，由于涉及到哨兵误判的可能和选主和通知的性能开销，所以需要尽可能减少误判，所以引入了“哨兵集群”，通过“少数服从多数”的方式减小误判可能性。<br><br>选主过程涉及“筛选+打分”，先筛掉不在线的、常掉线的、总超时的从库，然后对剩下的从库进行打分，优先选择优先级高的，然后是和主库同步进度最接近的，最后是id值，最终分值最高的就是新主库。<br><br>选主完成后，就要通知客户端和其他从库进行“认主仪式”了。","like_count":0},{"had_liked":false,"id":313132,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1201900,"ip_address":"","ucode":"08AB7A14D67ED3","user_header":"https://static001.geekbang.org/account/avatar/00/12/56/ec/37fc32f0.jpg","comment_is_top":false,"comment_ctime":1632289977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632289977","product_id":100056701,"comment_content":"这么看主从切换操作存在数据丢失的可能？","like_count":0},{"had_liked":false,"id":312918,"user_name":"猪小擎","can_delete":false,"product_type":"c1","uid":1370959,"ip_address":"","ucode":"D9552746AE3327","user_header":"https://static001.geekbang.org/account/avatar/00/14/eb/4f/6a97b1cd.jpg","comment_is_top":false,"comment_ctime":1632122368,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"1632122368","product_id":100056701,"comment_content":"这个哨兵集群我不太理解。这个怎么能是少数服从多数呢？我认为只要有一个哨兵认为上线，就该认为主库上线，只有所有哨兵都认为下线才该认为下线。这里没有区块里架构里的作恶的可能性，那唯一的认为上线是怎么做到呢？不该相信那唯一的一个认为上线的吗？","like_count":0,"discussions":[{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576015,"discussion_content":"万一是唯一信任你的人和你自己一起脱离了群众了呢?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655231490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312757,"user_name":"静","can_delete":false,"product_type":"c1","uid":2021305,"ip_address":"","ucode":"5D410AE1CFA791","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6NsibytCpIxC8gnrSKohoRgL0b1BlmUFKsOVtulD8QzuIqkiba353Um4oeHGUoRpDib1RMbM2oRfkPg/132","comment_is_top":false,"comment_ctime":1631970024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631970024","product_id":100056701,"comment_content":"作者你好,有个疑问:有个疑问, mater_repl_offset(1000)-slave_repl_offest(最大:990)=10 这10个 buffer 就丢弃了么?,主库已经更新了呀?","like_count":0},{"had_liked":false,"id":309733,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1630315551,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1630315551","product_id":100056701,"comment_content":"redis4.0 之后的版本，从库被选为新主库，此时新主库应该没有 repl_backlog_buffer（或者 backlog 环形缓冲区内容为空），如何支持增量同步？<br>谢谢","like_count":0,"discussions":[{"author":{"id":2797976,"avatar":"","nickname":"Geek_323a60","note":"","ucode":"CDC276EC255411","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579960,"discussion_content":"redis 4.0之前是全量同步，之后是使用psync2做增量同步。具体可以看下这个psync2命令","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657784538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309195,"user_name":"louis","can_delete":false,"product_type":"c1","uid":2416570,"ip_address":"","ucode":"4923669B2F0748","user_header":"https://static001.geekbang.org/account/avatar/00/24/df/ba/4b9d2569.jpg","comment_is_top":false,"comment_ctime":1629980975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629980975","product_id":100056701,"comment_content":"主从切换的时候，新主库的slave_repl_offset与老主库master_repl_offset有偏差，切换完后偏差这部分数据是不是丢了？","like_count":0},{"had_liked":false,"id":307892,"user_name":"科科","can_delete":false,"product_type":"c1","uid":1647304,"ip_address":"","ucode":"7DAE6FE781172E","user_header":"https://static001.geekbang.org/account/avatar/00/19/22/c8/f2892022.jpg","comment_is_top":false,"comment_ctime":1629294188,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1629294188","product_id":100056701,"comment_content":"老师，我有两个问题想要请教一下。<br>比如有一个redis部署的集群挂了，它是主库这个时候哨兵集群开始重新的选主，然后后面集群恢复了，redis实例也重启了，那这个redis实例还会重新加入到集群里面么？还是需要人为的调用replicaof指令？还有从库被标记为下线也是和主库一样需要满足一定个数的哨兵判定为主观下线么？","like_count":0},{"had_liked":false,"id":304349,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1627364172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627364172","product_id":100056701,"comment_content":"1.对于哨兵集群内部的实例出现了宕机问题,其实可以很简单的使用Raft等分布式协议进行领导者的替换<br>2.由哪个实例负责切换,如果有领导者,可以交由哨兵集群的领导者.如果没有领导者,可以交由服务发起者来进行切换.<br>3.切换过程中,如果哨兵集群已经知道新选举的领导者是谁了,可以让客户端直接访问新的领导者进行读写请求,但是这样,所有的读写请求都压在新领导者身上,会不会导致新领导者性能出现情况<br>如果哨兵集群还没有选举出新的领导者,那么即使有取巧的方式去让客户端连接,也不建议.这也是一主多从集群的弊端","like_count":0},{"had_liked":false,"id":299744,"user_name":"斌子","can_delete":false,"product_type":"c1","uid":1305393,"ip_address":"","ucode":"602804C685CFAE","user_header":"https://static001.geekbang.org/account/avatar/00/13/eb/31/2768a6a1.jpg","comment_is_top":false,"comment_ctime":1624842957,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1624842957","product_id":100056701,"comment_content":"现在生产上用redis+哨兵多，还是redis cluster多？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389064,"discussion_content":"这俩没可比性。哨兵属于主从集群， cluster是属于数据分片集群和codis是一类的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629106568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383184,"discussion_content":"Redis Cluster更好，内存利用率更高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625973048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292906,"user_name":"曾祥金","can_delete":false,"product_type":"c1","uid":2362279,"ip_address":"","ucode":"CBBB7FC1EA00D6","user_header":"","comment_is_top":false,"comment_ctime":1621069999,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1621069999","product_id":100056701,"comment_content":"如果哨兵误判，主库没挂，在主从切换期间，主库是否还可以接收写请求呢？","like_count":0,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375356,"discussion_content":"不会 步骤就是先下线","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621587199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389065,"discussion_content":"监控的时候少数服从多数，主观下线改客观下线后 再进行主从切换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629106693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291460,"user_name":"张新亮","can_delete":false,"product_type":"c1","uid":2406845,"ip_address":"","ucode":"B68A71CDEA551A","user_header":"https://static001.geekbang.org/account/avatar/00/24/b9/bd/7fef12c8.jpg","comment_is_top":false,"comment_ctime":1620295425,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1620295425","product_id":100056701,"comment_content":"1、本文讲什么<br>    主库挂了，如何不间断服务<br>2、<br>    怎么判断主库挂了<br>        1、每个哨兵与所有主从库都建立长连接，通过ping命令判断主从库的状态<br>        2、如果规定时间内没收到主库的响应，则向其他哨兵发出询问<br>        3、如果有n&#47;2+1个哨兵同意主库挂了，则确认主库已挂<br>    主库挂了之后，会发生什么事？哨兵需要做什么<br>        1、主库挂了之后，哨兵需要选出主库，通常根据四个步走：<br>            1、淘汰不稳定的从节点 <br>            2、slave-priority越大得分越高<br>            3、slave-repli-offset越大得分越高<br>            4、ID编号越小得分越高<br>        <br>    选新主库的过程，选出之后各方都需要做什么<br>        1、哨兵leader执行主从切换<br>        2、新主与从节点进行主从同步<br>        3、告知客户端新主地址<br>3、思考：如何把主库挂掉的的影响降到最小<br>    1、适当调整down-after-miliseconds和哨兵数量，减少误判<br>    2、判断主库下线时，可以适当考虑在客户端缓存一定的写操作<br>    3、哨兵主动通知，客户端不要把主从库地址写死，而是从哨兵集群中获取","like_count":0},{"had_liked":false,"id":289441,"user_name":"连长","can_delete":false,"product_type":"c1","uid":2047980,"ip_address":"","ucode":"555BD3DE57887F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3f/ec/00904faa.jpg","comment_is_top":false,"comment_ctime":1619013936,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619013936","product_id":100056701,"comment_content":"哨兵负责的三个任务：监控、选主、通知。<br><br>主观下线和客观下线<br>1、PING命令响应超时，标记主观下线；<br>2、网络压力较大、网络拥塞、主库压力大时，容易造成误判；<br>3、哨兵集群，少数服从多数，可以减少误判概率；<br>4、大多数哨兵标记主库下线，此时主库标记为客观下线。<br><br>选主<br>1、判断网络连接状况，down-after-milliseconds * 10，超时断连时间和次数超时，从库不适宜作为主库；<br>2、从库优先级，slave-priority 配置项；<br>3、与旧主库同步最近接的从库得分高，从库的 slave_repl_offset 最接近主库 master_repl_offset 值。<br>4、ID 号小的从库得分高。<br><br>通知<br>1、哨兵会把新主库的连接信息发给其他从库，让它们执行 replicaof 命令。<br>","like_count":0},{"had_liked":false,"id":289248,"user_name":"残天噬魂","can_delete":false,"product_type":"c1","uid":1506609,"ip_address":"","ucode":"A2AD8303A4518D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","comment_is_top":false,"comment_ctime":1618932728,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1618932728","product_id":100056701,"comment_content":"哨兵集群和选主会出现均分选票的情况吗？会不会出现网络分区？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389067,"discussion_content":"哨兵集群的选主应该理论上存在极低概率选票均分（随机超时时间一致），再来一轮直到决出胜负","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629106992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287184,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1617808098,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1617808098","product_id":100056701,"comment_content":"哨兵集群是怎么达成共识的呢？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389069,"discussion_content":"应该是所有哨兵再集群广播自己的决议，由主节点进行少数服从多数的选择后，集群内强制推行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629107161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375357,"discussion_content":"raft协议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621587215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285762,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1617005077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617005077","product_id":100056701,"comment_content":"老师，客户端是不是要把所有的redis instances 的地址配置在client 的配置文件里。","like_count":0},{"had_liked":false,"id":278805,"user_name":"poordickey","can_delete":false,"product_type":"c1","uid":1810156,"ip_address":"","ucode":"2A436EC813AF97","user_header":"","comment_is_top":false,"comment_ctime":1613356244,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1613356244","product_id":100056701,"comment_content":"如果碰到脑裂这种情况怎么解决么呢","like_count":0,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375358,"discussion_content":"什么脑裂 具体说明一下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621587233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277145,"user_name":"我的喵","can_delete":false,"product_type":"c1","uid":1736650,"ip_address":"","ucode":"A7435BDBDD2587","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyuuhxu0HH4cIKCClCqx0LTurCCYWmNcFwfTWV5te5afsibp2yuDmC9mibEHx0Xy8QlvqvMWWcAib8g/132","comment_is_top":false,"comment_ctime":1612274896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612274896","product_id":100056701,"comment_content":"# 七、哨兵机制：主库挂了，如何不间断提供服务<br>当从库发送故障，客户端可以继续向主库和其他从库发送操作请求，但是如果主库挂了，会直接影响到主从同步，且无法处理客户端的写请求。<br><br>所以哨兵机制就是为了解决上述问题。哨兵机制通过以下三个步骤达到主从库自动切换：<br>### 7.1 监控主库运行状态，并判断主库是否下线（服务真的挂了吗）<br>哨兵进程在运行中，会周期性的给所有主从库发送PING命令，检测它们是否仍然在线运行。如果从库没有在规定的时间内响应哨兵的PING命令，哨兵会把它标记为**下线状态**；同样，如果主库没有在规定时间内响应PING命令，则哨兵判定主库下线，开始自动切换主库的流程。<br><br>判断是否下线存在两个概念：主观下线和客观下线。<br><br>**主观下线：**如果哨兵发现主库或从库在规定时间内未响应自己发起的PING命令，则判定其主观下线。<br><br>**客观下线：**主观下线的方式判定主库是否下线可能会引起误判，因为也许是因为哨兵本身网络压力大，网络拥塞，或者是主库本身压力较大情况下导致主库未及时响应PING命令，但是此时其实主库处于在线状态，所以如果此时误判主库下线，开始重新选主，通知则会带来额外不必要的开销。所以**为了减少误判，通常Redis会采用多实例组成的集群模式进行部署，即哨兵集群**。引入此机制，就可以避免因为单个哨兵自身网络状态不好而引起的误判，由多个哨兵实例一起判定，遵从少数服务多数，如果超过一半认为主库下线，那么此时就认为主库**客观下线**。<br><br>### 7.2 在主库下线后，选取新主库（该选择哪个作为主库）<br>哨兵选择新主库的过程可以分为**筛选**和**打分**两个阶段，即先将不符合条件的从库去掉，然后对符合条件的从库按照一定规则进行打分，分高者作为新主库。<br><br>**筛选条件：**检查从库在线状态，判断之前的网络连接状态。如果从库总是和主库断连，超过一定阈值，就认为此从库网络状态并不是很好，需要去除。而判断主从库最大连接超时时间是通过参数**down-after-milliseconds**设置，<br><br>**打分：**<br>- 打分规则1：从库优先级<br>可以通过配置参数**slave-priority**设置从库的优先级，如果存在最高优先级从库，则选择此从库作为新主库，否则按照规则2判定。<br><br>- 打分规则2：从库复制进度偏移量<br>选择同步数据进度最接近与主库的从库作为新主库。那么如何判断最接近主库呢？可以比较从库之间的**slave_repl_offset**，选取最大者即最接近主库者。<br><br>- 打分规则3：从库runId号<br>当从库优先级和复制进度均相同的情况下，选取最小的runId对应从库作为新主库。<br><br>### 7.3 选出新主库后，通知从库和客户端（如何将新主库相关信息通知给从库以及客户端）","like_count":0},{"had_liked":false,"id":277093,"user_name":"小可","can_delete":false,"product_type":"c1","uid":1006735,"ip_address":"","ucode":"8834AF621FA67D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","comment_is_top":false,"comment_ctime":1612257979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612257979","product_id":100056701,"comment_content":"个人觉得写失败问题要在业务层处理，写失败入MQ后续重新补录，新主生效前读会有数据不一致问题，但可接受，看具体情况处理吧","like_count":0},{"had_liked":false,"id":276686,"user_name":"Geek_1e8830","can_delete":false,"product_type":"c1","uid":1506574,"ip_address":"","ucode":"CD84A5AAAE6872","user_header":"","comment_is_top":false,"comment_ctime":1612077742,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1612077742","product_id":100056701,"comment_content":"master都挂了怎么知道master_repl_offset 这个值是多少？只要比较所有从库的slave_repl_offset 哪个大应该就可以了吧？但好像也有点问题，因为哪个复制的缓冲区是环形的的，所以最大的那个slave_repl_offset不一定离master_repl_offset最近，有可能最小的slave_repl_offset才是离master_repl_offset最近的那个。那这里到底怎么判断呢？","like_count":0,"discussions":[{"author":{"id":1073443,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","nickname":"Young","note":"","ucode":"075C0BBE20FD8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371663,"discussion_content":"最大的一定是离master_repl_offset最近的。因为offset是单调递增的，他的数据类型是long long，最大值是2^63-1， 实际场景不可能达到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619885731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273368,"user_name":"luke Y","can_delete":false,"product_type":"c1","uid":2311463,"ip_address":"","ucode":"111F98D367235B","user_header":"https://static001.geekbang.org/account/avatar/00/23/45/27/4fbf8f6a.jpg","comment_is_top":false,"comment_ctime":1610552936,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1610552936","product_id":100056701,"comment_content":"老师您好，我有个疑问，就是哨兵模式支持多主多从吗？如果支持的话，key是怎么负载的。也是类似于一致性hash这种吗。","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389071,"discussion_content":"多主之间要做数据同步，得不偿失啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629108171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273294,"user_name":"CityAnimal","can_delete":false,"product_type":"c1","uid":1139902,"ip_address":"","ucode":"206491F70572AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/64/be/12c37d15.jpg","comment_is_top":false,"comment_ctime":1610527072,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610527072","product_id":100056701,"comment_content":"笔记打卡<br>    * [ ] 主从集群下**哨兵机制**是实现**主从库自动切换**的关键机制<br>    * [ ] 哨兵：运行在特殊模式下的 Redis 进程<br>        * [ ] 负责：监控、选主和通知<br>    * [ ] 基本流程<br>        * [ ] 监控<br>            * [ ] 周期性发送 PING 命令<br>                * [ ] 从库未在规定时间内响应，**哨兵**标记它为“下线状态”<br>                * [ ] 主库未在规定时间内响应，哨兵判定主库下线，然后开始**自动切换主库**<br>        * [ ] 选主<br>            * [ ] 按照一定的规则选择一个从库实例，把它作为新的主库<br>        * [ ] 通知<br>            * [ ] 把**新主库的连接信息**发给其他从库，让它们执行 replicaof 命令<br>            * [ ] 把**新主库的连接信息**通知给客户端，让它们把请求操作发到新主库上<br>    * [ ] ？如何判断主库的下线状态<br>        * [ ] 主观下线<br>            * [ ] 主&#47;从库未在规定时间内响应<br>            * [ ] 误判的情况<br>                * [ ] 集群网络压力较大<br>                * [ ] 网络拥塞<br>                * [ ] 主库本身压力较大<br>            * [ ] 怎么减少误判？<br>                * [ ] 哨兵集群<br>                    * [ ] 集群模式部署<br>        * [ ] 客观下线<br>            * [ ] 大多数的哨兵实例，都判断主库已经“主观下线”了<br>            * [ ] 标准：<br>                * [ ] 当 N 个哨兵实例，最好要有 N&#47;2 + 1 个实例判断主库为“主观下线”<br>    * [ ] ？如何选定新主库<br>        * [ ] “筛选 + 打分”<br>            * [ ] 在多个从库中，先按照一定的**筛选条件**，去掉不符合条件的<br>            * [ ] 然后，再按照**一定的规则**，给剩下的逐个打分，将得分最高的选为新主库<br>        * [ ] 筛选的条件<br>            * [ ] 配置项 down-after-milliseconds * 10<br>                * [ ] down-after-milliseconds: 主从库断连的最大连接超时时间<br>                * [ ] 如果在 down-after-milliseconds 毫秒内，主从节点都没有通过网络联系上 =&amp;gt; 主从节点断连了<br>                * [ ] 如果发生断连的次数**超过了 10 次** =&amp;gt; 从库的网络状况不好<br>        * [ ] 打分规则<br>            * [ ] 分别按照三个规则依次进行三轮打分<br>                * [ ] 只要在某一轮中，有从库得分最高，那它就是主库了；选主过程到此结束<br>                * [ ] 如果没有出现得分最高的从库，那么就继续进行下一轮<br>            * [ ] 1. 从库优先级<br>                * [ ] 通过 slave-priority 配置项，给不同的从库设置不同优先级<br>            * [ ] 从库复制进度<br>                * [ ] 如果选择和旧主库同步最接近的从库作为主库，那么这个新主库上就有最新的数据<br>                * [ ] 在所有从库中，谁的 slave_repl_offset 最接近 master_repl_offset，那么它的得分就最高，可以作为新主库<br>            * [ ] 从库 ID 号<br>                * [ ] ID 号最小的从库，得分最高，选为新主库","like_count":0},{"had_liked":false,"id":271597,"user_name":"樱小路依然","can_delete":false,"product_type":"c1","uid":1269957,"ip_address":"","ucode":"DBA9FF68015FE5","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/c5/69286d58.jpg","comment_is_top":false,"comment_ctime":1609728373,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1609728373","product_id":100056701,"comment_content":"我有个问题,既然给出的例子中,slave_repl_offset 一般是小于master_repl_offset, 那么是否意味着,主从同步之间存在着时间差, 会出现写命令在主库执行,然后还没同步到从库的情况下,从库执行读命令,读取到不一样的值的情况? 这种情况的误差在业务上是允许的吗","like_count":0,"discussions":[{"author":{"id":1073443,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","nickname":"Young","note":"","ucode":"075C0BBE20FD8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371665,"discussion_content":"和业务相关，CAP理论，看你是更看重C，还是A。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619885847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346776,"discussion_content":"这应就需要具体业务具体分析了。一些非敏感信息，比如文章点击排名，有些误差是允许的。敏感信息 可能就不可以了。 还是要具体跟业务相关联的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612061430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270619,"user_name":"影山飞雄","can_delete":false,"product_type":"c1","uid":1626622,"ip_address":"","ucode":"127F4CA21207D8","user_header":"https://static001.geekbang.org/account/avatar/00/18/d1/fe/2ca6f40a.jpg","comment_is_top":false,"comment_ctime":1609180065,"is_pvip":false,"replies":[{"id":"98420","content":"如果第一轮就已经有优先级最高的从库，那就会选择该从库为新主库，就不会进行第二轮打分。如果进入第二轮，表明第一轮时，从库优先级是相同的，此时在第二轮中会选择偏移量最大的，还是最优选择。<br><br>没有优先级或优先级相同时，第二轮判断更重要。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609721370,"ip_address":"","comment_id":270619,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1609180065","product_id":100056701,"comment_content":"在哨兵打分的第一轮，假设用户设置了高优先级的从库，因此正常就直接选出主库了，但是如果存在第二轮打分中选出的从库的偏移量不是最大的，这样选出的主库可能就不是最优选择，这种情况存在吗？如果用户不设置优先级，感觉通过后面的判断更重要和合理","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512692,"discussion_content":"如果第一轮就已经有优先级最高的从库，那就会选择该从库为新主库，就不会进行第二轮打分。如果进入第二轮，表明第一轮时，从库优先级是相同的，此时在第二轮中会选择偏移量最大的，还是最优选择。\n\n没有优先级或优先级相同时，第二轮判断更重要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609721370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316926,"avatar":"https://static001.geekbang.org/account/avatar/00/14/18/3e/f8632713.jpg","nickname":"EveryDayIsNew","note":"","ucode":"776B81EF6830FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389235,"discussion_content":"这个有最佳实践吗，生产环境都是怎么设置比较好？另外看阿里云的Redis是废弃哨兵模式的，提了很多不足的地方，他们自己做的存活检测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629186768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346777,"discussion_content":"这应该跟服务运维部署有关系了。比如说某个 从节点 的服务器性能高、所在机房网络好，也可能跟主服务部署在一个机房、一个机架，认为他跟主节点的数据最接近，那么就可以把它的优先级设置的高一点。这样可以减少选择时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612061689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269231,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1608562225,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608562225","product_id":100056701,"comment_content":"思考题回答：主从选主过程，在没选出来主库时写操作不能服务的，读操作可以正常运行。<br>若应用程序不感知服务的中断，哨兵进程应该从从库中指定一个临时的主库供写，当主库被选出来后，若选出来的主库是该临时主库，那么可以直接将缓存的写命令同步到其他从库，若选出来的主库不是该临时主库，需要将临时主库的数据同步到新的主库中（这需要临时和新主库的配合）。","like_count":0},{"had_liked":false,"id":264798,"user_name":"许峰","can_delete":false,"product_type":"c1","uid":2346462,"ip_address":"","ucode":"C12E7B53D7E658","user_header":"https://static001.geekbang.org/account/avatar/00/23/cd/de/0334fd13.jpg","comment_is_top":false,"comment_ctime":1606652699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606652699","product_id":100056701,"comment_content":"老师<br>监控和选主讲了; 但是通知没有讲到呀<br>新主库就被选出来了 下面跟的就是小结了; 通知呢? <br>咋通知的?","like_count":0},{"had_liked":false,"id":264409,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1606458829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606458829","product_id":100056701,"comment_content":"1. 主从切换，只读不影响，客户端新数据的写会影响<br>2. 新主库启用后，才可以写入新数据","like_count":0},{"had_liked":false,"id":264084,"user_name":"锋","can_delete":false,"product_type":"c1","uid":1807836,"ip_address":"","ucode":"F26BC1F14AB0D7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/95/dc/07195a63.jpg","comment_is_top":false,"comment_ctime":1606350542,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606350542","product_id":100056701,"comment_content":"老师好，如果是主从从的模式，该怎么选主啊","like_count":0,"discussions":[{"author":{"id":2797976,"avatar":"","nickname":"Geek_323a60","note":"","ucode":"CDC276EC255411","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579963,"discussion_content":"应该是递归收集从库的 slave_repl_offset ，然后选择一个 slave_repl_offset 最大的作为新主库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657785144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263521,"user_name":"shanshan","can_delete":false,"product_type":"c1","uid":1022191,"ip_address":"","ucode":"F0BA8E2049F551","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/ef/bf392cc0.jpg","comment_is_top":false,"comment_ctime":1606148745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606148745","product_id":100056701,"comment_content":"redis用哨兵集群去服务redis主从集群保证其主从的稳定状态,而哨兵集群本身的选主过程也是靠我们熟知的那些共识过程来进行选主的,我在想为什么不直接在redis集群中靠这些共识算法来进行选主?能想到的原因有可以很好的自定义选主规则,其次选主的过程也能更快一些尽量减少服务不可用的时间,想问下老师还有什么其他的考虑吗?","like_count":0},{"had_liked":false,"id":260550,"user_name":"lu","can_delete":false,"product_type":"c1","uid":1054704,"ip_address":"","ucode":"635B6675E542DE","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/f0/8650e952.jpg","comment_is_top":false,"comment_ctime":1605059364,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605059364","product_id":100056701,"comment_content":"如果哨兵实例是偶数个，一半认为master下线，一半认为master在线，这个时候哨兵集群是怎么判断主库的在线状态的？","like_count":0,"discussions":[{"author":{"id":1188527,"avatar":"https://static001.geekbang.org/account/avatar/00/12/22/af/1a31bc11.jpg","nickname":"The Sword of Damocles","note":"","ucode":"42B462FC572F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558330,"discussion_content":"客观下线时：以配置的 quorum 为准，&gt;=quorum 即表明客观下线。\n选举leader进行主从切换时：voters_quorum = sentinelNum/2+1  票数需要大于 50%才行，如果刚好55开，本轮选 leader 失败，下一轮 serverCron 中会再次尝试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648208756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259534,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1604745282,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604745282","product_id":100056701,"comment_content":"Redis 的哨兵机制自动完成了以下三大功能，从而实现了主从库的自动切换，可以降低 Redis 集群的运维开销：<br>监控主库运行状态，并判断主库是否客观下线；<br>在主库客观下线后，选取新主库；<br>选出新主库后，通知从库和客户端。","like_count":0},{"had_liked":false,"id":255878,"user_name":"猿飞日斩","can_delete":false,"product_type":"c1","uid":1668982,"ip_address":"","ucode":"9ABF88EAD3965C","user_header":"https://static001.geekbang.org/account/avatar/00/19/77/76/56740001.jpg","comment_is_top":false,"comment_ctime":1603449160,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603449160","product_id":100056701,"comment_content":"老师，有2个问题请教下：<br>1.redis哨兵为什么不采取一票否决制，客观下线可能会存在误判，上线状态（收到节点响应）也会存在误判吗？<br>2.leader在任期内，与大多数节点判断状态不一致，是怎么处理的？<br>例如：大多数认为下线，leader认为是上线状态，这种情况是否要等到任期结束后，才能发起故障切换","like_count":0,"discussions":[{"author":{"id":2300335,"avatar":"https://static001.geekbang.org/account/avatar/00/23/19/af/8fe62068.jpg","nickname":"Geek_c12514","note":"","ucode":"3DB5A67488EEE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325239,"discussion_content":"初学者试着回答一下第一个问题吧，如果大多数redis哨兵认为某一个实例下线了，无论它是否仍然在正常运行，它都是因为某些原因无法可靠地响应相关请求了，所以即使此实例还在正常运行，也必定会影响到整个redis服务的吞吐量。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605254839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251506,"user_name":"唐朝首都","can_delete":false,"product_type":"c1","uid":1081233,"ip_address":"","ucode":"F72655AE0AE4CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/91/962eba1a.jpg","comment_is_top":false,"comment_ctime":1601622327,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1601622327","product_id":100056701,"comment_content":"（1）读应该没什么问题；<br>（2）写应该是不能正常响应的，如果要想正常提供服务，那么只能在切换过程中由客户端或者代理端进行缓存写命令，待切换过程结束后在进行真正的写。","like_count":0},{"had_liked":false,"id":249679,"user_name":"萧","can_delete":false,"product_type":"c1","uid":1229143,"ip_address":"","ucode":"0C2239867AFF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/57/27de274f.jpg","comment_is_top":false,"comment_ctime":1600756715,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1600756715","product_id":100056701,"comment_content":"### Redis高可用之哨兵机制<br>哨兵机制：特殊模型下的redis进程<br>- 监控：周期性的给主从库发送ping，确认是否存活；如果主库下线（需哨兵集群中多数主观下线），则进入选主<br>- 选主：选择一个从库作为主库；筛选过程为连接状态、从库优先级、从库复制进度、从库ID<br>- 通知：把新主库信息发送给其他从库，让主从同步数据复制；新主库信息发送给客户端，让请求操作发送到新主库上","like_count":0},{"had_liked":false,"id":248044,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1599990691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599990691","product_id":100056701,"comment_content":"切换过程中...<br>如果客户端执行读操作是不影响的,写操作是肯定有影响的;客户端可以单独使用数据库或者其他存储的将数据存起来,等redis恢复后再进行写入主缓存,但哨兵挂了的话,就不清楚,这个应该属于分布式系统的只是点了...","like_count":0},{"had_liked":false,"id":247019,"user_name":"楚天行","can_delete":false,"product_type":"c1","uid":1100648,"ip_address":"","ucode":"B4DD986060ECD4","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/68/d8a4f907.jpg","comment_is_top":false,"comment_ctime":1599558551,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599558551","product_id":100056701,"comment_content":"Redis Cluster本身也提供了主从切换  <br>cluster-node-timeout &lt;milliseconds&gt;<br>cluster-slave-validity-factor &lt;factor&gt;<br>个人觉得上述适合1主1从情况。另外这种主从切换，主观性很高。想问下这两个具体区别","like_count":0},{"had_liked":false,"id":245757,"user_name":"简约风丶","can_delete":false,"product_type":"c1","uid":1024128,"ip_address":"","ucode":"4F1541223C7ED5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/80/2349287c.jpg","comment_is_top":false,"comment_ctime":1599041566,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"1599041566","product_id":100056701,"comment_content":"话说哨兵集群可以在平时检测主从存活的同时，也做另外一件事，就是选出备份的master，一旦，主master挂了，立刻切换到备份的那个，这样是不是就基本可以让服务端无感知","like_count":0,"discussions":[{"author":{"id":1073443,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","nickname":"Young","note":"","ucode":"075C0BBE20FD8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371666,"discussion_content":"计划赶不上变化，不要预测。现选才是最可靠的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619886187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2026039,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/ea/37/b20f3e4d.jpg","nickname":"一路风景独好","note":"","ucode":"C06E20E6F4BCC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311248,"discussion_content":"主库什么时候挂是未知的，在挂的时刻，之前选出的备份主库就不一定是最佳的，在你选出备选到主库挂的这段时间，从库的那些选择条件可能会变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602290422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245501,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1598961358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598961358","product_id":100056701,"comment_content":"切换主库的过程中，不可接受写操作，可进行读操作。<br>要让业务无感知，需要客户端进行重试操作，重试操作需要保证幂等性。","like_count":0},{"had_liked":false,"id":245205,"user_name":"V","can_delete":false,"product_type":"c1","uid":1060726,"ip_address":"","ucode":"7CA43B0FBFFA68","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/76/a382a707.jpg","comment_is_top":false,"comment_ctime":1598863237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598863237","product_id":100056701,"comment_content":"1. 客户端能否正常地进行请求操作呢？<br>写请求不能，选举需要时间（高并发请求下会出现不能响应的状态）。<br><br>2. 如果想要应用程序不感知服务的中断，还需要哨兵或需要客户端再做些什么吗？<br>- 探讨下是否可以引入一个中间状态，哨兵快速随机选一个作为临时master， 在没有选举之前写的操作给到临时master，等选举之后在同步master增量数据，最后修改临时master状态。（在切换的时候要考虑到数据同步策略）<br>- 客户端可以弄也异步插入数据。","like_count":0},{"had_liked":false,"id":244191,"user_name":"Geek_e120ec","can_delete":false,"product_type":"c1","uid":1249305,"ip_address":"","ucode":"9D0159DE171358","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/19/68b65d61.jpg","comment_is_top":false,"comment_ctime":1598423546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598423546","product_id":100056701,"comment_content":"请教个问题，如果主库重新上线了，会怎么样，自动变成从库吗","like_count":0},{"had_liked":false,"id":243412,"user_name":"Mr.蜜","can_delete":false,"product_type":"c1","uid":1035257,"ip_address":"","ucode":"C911B81198B3F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","comment_is_top":false,"comment_ctime":1598096261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598096261","product_id":100056701,"comment_content":"我认为，主从切换时，读操作可以继续，写操作无法响应，哨兵也不应该去维护一个所谓的命令队列，这会增加复杂度，也会给予客户端一些错觉，这对系统整体高可用背道而驰。如果是切换时的写操作，应该由调用端做异常处理！","like_count":0},{"had_liked":false,"id":243408,"user_name":"XD","can_delete":false,"product_type":"c1","uid":1079293,"ip_address":"","ucode":"DC9DCFB3841A4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/77/fd/c6619535.jpg","comment_is_top":false,"comment_ctime":1598093171,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1598093171","product_id":100056701,"comment_content":"对选举的优先级高于offset有疑问。<br><br>举个例子，有a&#47;b&#47;c3个从库，offset分别为1&#47;10&#47;100，a的优先级高于b。如果最终选了a，那么bc会拉取a的rdb，这么一来b会丢失2-10的数据，c丢失2-100的数据。<br><br>把offset放在第一位是不是更好？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389084,"discussion_content":"我觉得实际可能不会出现上面的情况，ooffset差这么大，说明a的经常离线，选举之前会把a剔除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629112161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1621376,"avatar":"https://static001.geekbang.org/account/avatar/00/18/bd/80/360d436b.jpg","nickname":"快扶劳资去网吧","note":"","ucode":"B5C37FAB25B6C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324162,"discussion_content":"可不可以这样理解\n\n如果offset放在第一位，那么用户无法控制是什么从库会升级为主库\n\n但是如果优先级高于offset的设计\n如果用户想要尽量不丢失的数据，那么可以自己控制不设置优先级，直接进入第二轮offset阶段，如果想要一组性能好的升级为主库，则可以灵活的设置优先级\n\n也就是说，优先级高于offset，更为灵活，因为优先级是用户控制的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605063394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1621376,"avatar":"https://static001.geekbang.org/account/avatar/00/18/bd/80/360d436b.jpg","nickname":"快扶劳资去网吧","note":"","ucode":"B5C37FAB25B6C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324159,"discussion_content":"我也有这个疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605062923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243322,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1598059228,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598059228","product_id":100056701,"comment_content":"“。如果从库总是和主库断连，而且断连次数超出了一定的阈值，我们就有理由相信，这个从库的网络状况并不是太好，就可以把这个从库筛掉了。”<br>哨兵是怎么知道从库与主库的断连次数超过阈值呢？从库上报给哨兵的吗？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389085,"discussion_content":"是哨兵的探测主库从库断连吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629112218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243288,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1598020391,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"1598020391","product_id":100056701,"comment_content":"down-after-milliseconds 这个参数不是很懂，哨兵是怎么知道主从之间连接是否断开的？哨兵在选择主库的时候，不是相当于当时没有主库了，那还怎么判断连接是否断开的？ 还有就是 哨兵不是只能检查某个节点是否存活的？","like_count":0,"discussions":[{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300349,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598061034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242886,"user_name":"the best","can_delete":false,"product_type":"c1","uid":1669360,"ip_address":"","ucode":"AE4E69AAE9E90A","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/f0/da416f3c.jpg","comment_is_top":false,"comment_ctime":1597885770,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1597885770","product_id":100056701,"comment_content":"老师，您好，我想问一下如果采用主-从-从模式，如果中间那个从挂了，结合哨兵机制，第二个从会发生什么🤔？","like_count":0,"discussions":[{"author":{"id":1010819,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/83/48e528cb.jpg","nickname":"Luke","note":"","ucode":"8368A63185356D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300176,"discussion_content":"挂掉的从节点下面的整个子集群全部不可用，在选主的筛选环节被淘汰","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597976491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300350,"discussion_content":"觉得老师只是提供了一种思路：主从的部署没有固有模式，只有经验模式。\n说实话，看到这个例子，蛮惊讶的，还可以这样玩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598061151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242755,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1597833414,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1597833414","product_id":100056701,"comment_content":"为什么“旧主库同步程度最接近的从库得分高为第一个优先条件“呢？这样可以保证数据最接近原主库","like_count":0,"discussions":[{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300352,"discussion_content":"高可靠的一个标准：数据尽量少丢失。\n服务尽量少中断","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598061230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242735,"user_name":"杨逸林","can_delete":false,"product_type":"c1","uid":1167233,"ip_address":"","ucode":"4BF3CF3E2F1AC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","comment_is_top":false,"comment_ctime":1597827176,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597827176","product_id":100056701,"comment_content":"老师讲得应该是让大家都能懂，了解个大概的。<br>有些细节没说，我查了下，还翻了下书《Redis 设计与实现》第 16 章。<br>启动哨兵需要配置 sentinel.conf，里面有些重要的配置，<br>SENTINEL MONITOR &lt;name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt; <br>Sentine监听的maste地址，第一个参数是给master起的名字，第二个参数为master IP，第三个为master端口，第四个为当该master挂了的时候，若想将该master判为失效，<br>更多的东西，我就不做复读机了，https:&#47;&#47;www.cnblogs.com&#47;kevingrace&#47;p&#47;9004460.html 可以看这个补全有关哨兵的内容，还有书上的第 16 章。","like_count":0,"discussions":[{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300354,"discussion_content":"嗯，这本书不错，不过Redis版本是3.0的，这个要注意一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598061362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242648,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1597804627,"is_pvip":false,"replies":[{"id":"89593","content":"咱们探讨下，主从切换时，新主节点可能还没有选出来，此时新请求如何倒流呢？<br><br>感觉你的方案想法和@Darren的方案类似，我刚给@Darren回复，可以看看讨论讨论。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597937056,"ip_address":"","comment_id":242648,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1597804627","product_id":100056701,"comment_content":"在主从切换的时候，由哨兵把新请求倒流到新的主节点？切换完成之后，需要客户端切换到新的主节点操作","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504062,"discussion_content":"咱们探讨下，主从切换时，新主节点可能还没有选出来，此时新请求如何倒流呢？\n\n感觉你的方案想法和@Darren的方案类似，我刚给@Darren回复，可以看看讨论讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597937056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242639,"user_name":"MClink","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","comment_is_top":false,"comment_ctime":1597802982,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597802982","product_id":100056701,"comment_content":"我是这么香的，可以基于从库的读快照+写缓冲区的命令，类似MySQL 的change_buff 机制。这样就可以短暂恢复业务，然后切换成功后，再把对应的写缓存命令往主库发也顺便维持这个机制，主库执行完命令并且和缓存机制的数据达到一致后就可以正常无缝切换了","like_count":0},{"had_liked":false,"id":242637,"user_name":"kyon","can_delete":false,"product_type":"c1","uid":1205520,"ip_address":"","ucode":"E7BBAC0FFA358B","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/10/a543759a.jpg","comment_is_top":false,"comment_ctime":1597802907,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597802907","product_id":100056701,"comment_content":"请教下，切换新主时，筛选从节点的过程中，主从节点之间是否段开连接及断开时间 down-after-milliseconds，也是由哨兵判断的吗？我理解哨兵判断的是，哨兵和各个节点之间是否联通。","like_count":0,"discussions":[{"author":{"id":1010819,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/83/48e528cb.jpg","nickname":"Luke","note":"","ucode":"8368A63185356D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300178,"discussion_content":"主从切换是由Raft选举出来的哨兵leader来负责的，包括这里你提到的筛选过程，以及打分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597976952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242628,"user_name":"游弋云端","can_delete":false,"product_type":"c1","uid":1208637,"ip_address":"","ucode":"A960E8F5AA25B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","comment_is_top":false,"comment_ctime":1597800051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597800051","product_id":100056701,"comment_content":"写业务会中断，但是客户端可以做缓存，等待主恢复或者重新选主后，再下发请求，同时缓冲区大小有限，如果长时间没有产生新主，缓冲区满了后还是会返回失败或者超时。","like_count":0},{"had_liked":false,"id":242618,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1597798337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597798337","product_id":100056701,"comment_content":"主从切换会造成业务中断","like_count":0},{"had_liked":false,"id":242612,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1065310,"ip_address":"","ucode":"E5D21F2A3359CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/5e/9d2953a3.jpg","comment_is_top":false,"comment_ctime":1597797614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597797614","product_id":100056701,"comment_content":"判断主库存活，如果一个哨兵的误判率为百分之一，那么三个哨兵的误判率为百万分之一，大大降低了误判的可能。","like_count":0},{"had_liked":false,"id":242605,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1597796310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597796310","product_id":100056701,"comment_content":"老师，有两个问题。<br><br>1、当主节点宕机后，哨兵是从哪里知道master_repl_offset的值的，是之前主节点在命令传播的过程中传递给哨兵的么？如果是的话，是使用TCP单播逐个通知的还是利用组播机制通知的？无论如何，主节点都要维护集群中哨兵的信息，这个信息是由谁维护和更新的？<br><br>2、客户端是在配置信息里配置的是哨兵的链接信息，然后通过哨兵知道当前主节点的地址的么？如果是这样，那客户端发现主节点没有响应时，会再查询哨兵么？<br><br>那如果哨兵充当了数据节点的元信息的保存这个角色后，客户端如何配置哨兵的连接信息呢？因为哨兵集群貌似是一个对等的网络，是连接到任意一个coordinator上就可以了么？","like_count":0}]}