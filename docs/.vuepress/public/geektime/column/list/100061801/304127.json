{"id":304127,"title":"12 | atomic：要保证原子操作，一定要使用这几种方法","content":"<p>你好，我是鸟窝。</p><p>前面我们在学习Mutex、RWMutex等并发原语的实现时，你可以看到，最底层是通过atomic包中的一些原子操作来实现的。当时，为了让你的注意力集中在这些原语的功能实现上，我并没有展开介绍这些原子操作是干什么用的。</p><p>你可能会说，这些并发原语已经可以应对大多数的并发场景了，为啥还要学习原子操作呢？其实，这是因为，在很多场景中，使用并发原语实现起来比较复杂，而原子操作可以帮助我们更轻松地实现底层的优化。</p><p>所以，现在，我会专门用一节课，带你仔细地了解一下什么是原子操作，atomic包都提供了哪些实现原子操作的方法。另外，我还会带你实现一个基于原子操作的数据结构。好了，接下来我们先来学习下什么是原子操作。</p><h1>原子操作的基础知识</h1><p>Package sync/atomic 实现了同步算法底层的原子的内存操作原语，我们把它叫做原子操作原语，它提供了一些实现原子操作的方法。</p><p>之所以叫原子操作，是因为一个原子在执行的时候，其它线程不会看到执行一半的操作结果。在其它线程看来，原子操作要么执行完了，要么还没有执行，就像一个最小的粒子-原子一样，不可分割。</p><p>CPU提供了基础的原子操作，不过，不同架构的系统的原子操作是不一样的。</p><!-- [[[read_end]]] --><p>对于单处理器单核系统来说，如果一个操作是由一个CPU指令来实现的，那么它就是原子操作，比如它的XCHG和INC等指令。如果操作是基于多条指令来实现的，那么，执行的过程中可能会被中断，并执行上下文切换，这样的话，原子性的保证就被打破了，因为这个时候，操作可能只执行了一半。</p><p>在多处理器多核系统中，原子操作的实现就比较复杂了。</p><p>由于cache的存在，单个核上的单个指令进行原子操作的时候，你要确保其它处理器或者核不访问此原子操作的地址，或者是确保其它处理器或者核总是访问原子操作之后的最新的值。x86架构中提供了指令前缀LOCK，LOCK保证了指令（比如LOCK CMPXCHG op1、op2）不会受其它处理器或CPU核的影响，有些指令（比如XCHG）本身就提供Lock的机制。不同的CPU架构提供的原子操作指令的方式也是不同的，比如对于多核的MIPS和ARM，提供了LL/SC（Load Link/Store Conditional）指令，可以帮助实现原子操作（ARMLL/SC指令 LDREX和STREX）。</p><p><strong>因为不同的CPU架构甚至不同的版本提供的原子操作的指令是不同的，所以，要用一种编程语言实现支持不同架构的原子操作是相当有难度的</strong>。不过，还好这些都不需要你操心，因为Go提供了一个通用的原子操作的API，将更底层的不同的架构下的实现封装成atomic包，提供了修改类型的原子操作（<a href=\"https://preshing.com/20150402/you-can-do-any-kind-of-atomic-read-modify-write-operation/\">atomic read-modify-write</a>，RMW）和加载存储类型的原子操作（<a href=\"https://preshing.com/20130618/atomic-vs-non-atomic-operations/\">Load和Store</a>）的API，稍后我会一一介绍。</p><p>有的代码也会因为架构的不同而不同。有时看起来貌似一个操作是原子操作，但实际上，对于不同的架构来说，情况是不一样的。比如下面的代码的第4行，是将一个64位的值赋值给变量i：</p><pre><code>const x int64 = 1 + 1&lt;&lt;33\n\nfunc main() {\n    var i = x\n    _ = i\n}\n</code></pre><p>如果你使用GOARCH=386的架构去编译这段代码，那么，第5行其实是被拆成了两个指令，分别操作低32位和高32位（使用 GOARCH=386 go tool compile -N -l test.go；GOARCH=386 go tool objdump -gnu test.o反编译试试）：</p><p><img src=\"https://static001.geekbang.org/resource/image/45/62/4563ac42f379d1500d191377db16a162.png?wh=1391*83\" alt=\"\"></p><p>如果GOARCH=amd64的架构去编译这段代码，那么，第5行其中的赋值操作其实是一条指令：</p><p><img src=\"https://static001.geekbang.org/resource/image/6e/66/6e20a0f44d95d78c1bca4303f1a32966.png?wh=1341*216\" alt=\"\"></p><p>所以，如果要想保证原子操作，切记一定要使用atomic提供的方法。</p><p>好了，了解了什么是原子操作以及不同系统的不同原子操作，接下来，我来介绍下atomic原子操作的应用场景。</p><h1>atomic原子操作的应用场景</h1><p>开篇我说过，使用atomic的一些方法，我们可以实现更底层的一些优化。如果使用Mutex等并发原语进行这些优化，虽然可以解决问题，但是这些并发原语的实现逻辑比较复杂，对性能还是有一定的影响的。</p><p>举个例子：假设你想在程序中使用一个标志（flag，比如一个bool类型的变量），来标识一个定时任务是否已经启动执行了，你会怎么做呢？</p><p>我们先来看看加锁的方法。如果使用Mutex和RWMutex，在读取和设置这个标志的时候加锁，是可以做到互斥的、保证同一时刻只有一个定时任务在执行的，所以使用Mutex或者RWMutex是一种解决方案。</p><p>其实，这个场景中的问题不涉及到对资源复杂的竞争逻辑，只是会并发地读写这个标志，这类场景就适合使用atomic的原子操作。具体怎么做呢？你可以使用一个uint32类型的变量，如果这个变量的值是0，就标识没有任务在执行，如果它的值是1，就标识已经有任务在完成了。你看，是不是很简单呢？</p><p>再来看一个例子。假设你在开发应用程序的时候，需要从配置服务器中读取一个节点的配置信息。而且，在这个节点的配置发生变更的时候，你需要重新从配置服务器中拉取一份新的配置并更新。你的程序中可能有多个goroutine都依赖这份配置，涉及到对这个配置对象的并发读写，你可以使用读写锁实现对配置对象的保护。在大部分情况下，你也可以利用atomic实现配置对象的更新和加载。</p><p>分析到这里，可以看到，这两个例子都可以使用基本并发原语来实现的，只不过，我们不需要这些基本并发原语里面的复杂逻辑，而是只需要其中的简单原子操作，所以，这些场景可以直接使用atomic包中的方法去实现。</p><p><strong>有时候，你也可以使用atomic实现自己定义的基本并发原语</strong>，比如Go issue有人提议的CondMutex、Mutex.LockContext、WaitGroup.Go等，我们可以使用atomic或者基于它的更高一级的并发原语去实现。我先前讲的几种基本并发原语的底层（比如Mutex），就是基于通过atomic的方法实现的。</p><p>除此之外，atomic原子操作还是实现lock-free数据结构的基石。</p><p>在实现lock-free的数据结构时，我们可以不使用互斥锁，这样就不会让线程因为等待互斥锁而阻塞休眠，而是让线程保持继续处理的状态。另外，不使用互斥锁的话，lock-free的数据结构还可以提供并发的性能。</p><p>不过，lock-free的数据结构实现起来比较复杂，需要考虑的东西很多，有兴趣的同学可以看一位微软专家写的一篇经验分享：<a href=\"https://docs.microsoft.com/zh-cn/windows/win32/dxtecharts/lockless-programming\">Lockless Programming Considerations for Xbox 360 and Microsoft Windows</a>，这里我们不细谈了。不过，这节课的最后我会带你开发一个lock-free的queue，来学习下使用atomic操作实现lock-free数据结构的方法，你可以拿它和使用互斥锁实现的queue做性能对比，看看在性能上是否有所提升。</p><p>看到这里，你是不是觉得atomic非常重要呢？不过，要想能够灵活地应用atomic，我们首先得知道atomic提供的所有方法。</p><h1>atomic提供的方法</h1><p>目前的Go的泛型的特性还没有发布，Go的标准库中的很多实现会显得非常啰嗦，多个类型会实现很多类似的方法，尤其是atomic包，最为明显。相信泛型支持之后，atomic的API会清爽很多。</p><p>atomic为了支持int32、int64、uint32、uint64、uintptr、Pointer（Add方法不支持）类型，分别提供了AddXXX、CompareAndSwapXXX、SwapXXX、LoadXXX、StoreXXX等方法。不过，你也不要担心，你只要记住了一种数据类型的方法的意义，其它数据类型的方法也是一样的。</p><p>关于atomic，还有一个地方你一定要记住，<strong>atomic操作的对象是一个地址，你需要把可寻址的变量的地址作为参数传递给方法，而不是把变量的值传递给方法</strong>。</p><p>好了，下面我就来给你介绍一下atomic提供的方法。掌握了这些，你就可以说完全掌握了atomic包。</p><h2>Add</h2><p>首先，我们来看Add方法的签名：</p><p><img src=\"https://static001.geekbang.org/resource/image/95/de/95dcf8742593b1191e87beaca16f59de.png?wh=811*133\" alt=\"\"></p><p>其实，Add方法就是给第一个参数地址中的值增加一个delta值。</p><p>对于有符号的整数来说，delta可以是一个负数，相当于减去一个值。对于无符号的整数和uinptr类型来说，怎么实现减去一个值呢？毕竟，atomic并没有提供单独的减法操作。</p><p>我来跟你说一种方法。你可以利用计算机补码的规则，把减法变成加法。以uint32类型为例：</p><pre><code>AddUint32(&amp;x, ^uint32(c-1)).\n</code></pre><p>如果是对uint64的值进行操作，那么，就把上面的代码中的uint32替换成uint64。</p><p>尤其是减1这种特殊的操作，我们可以简化为：</p><pre><code>AddUint32(&amp;x, ^uint32(0))\n</code></pre><p>好了，我们再来看看CAS方法。</p><h2>CAS （CompareAndSwap）</h2><p>以int32为例，我们学习一下CAS提供的功能。在CAS的方法签名中，需要提供要操作的地址、原数据值、新值，如下所示：</p><pre><code>func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)\n</code></pre><p>我们来看下这个方法的功能。</p><p>这个方法会比较当前addr地址里的值是不是old，如果不等于old，就返回false；如果等于old，就把此地址的值替换成new值，返回true。这就相当于“判断相等才替换”。</p><p>如果使用伪代码来表示这个原子操作，代码如下：</p><pre><code>if *addr == old {\n\t*addr = new\n\treturn true\n}\nreturn false\n</code></pre><p>它支持的类型和方法如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/1b/77/1b0ffac37d8f952ca485ff58daf27177.png?wh=942*156\" alt=\"\"></p><h2>Swap</h2><p>如果不需要比较旧值，只是比较粗暴地替换的话，就可以使用Swap方法，它替换后还可以返回旧值，伪代码如下：</p><pre><code>old = *addr\n*addr = new\nreturn old\n</code></pre><p>它支持的数据类型和方法如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/0a/c02e210607aa45734bb1812c97f77c0a.png?wh=844*160\" alt=\"\"></p><h2>Load</h2><p>Load方法会取出addr地址中的值，即使在多处理器、多核、有CPU cache的情况下，这个操作也能保证Load是一个原子操作。</p><p>它支持的数据类型和方法如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/5d/3faba284bda2a666caa5727d0f0c275d.png?wh=586*149\" alt=\"\"></p><h2>Store</h2><p>Store方法会把一个值存入到指定的addr地址中，即使在多处理器、多核、有CPU cache的情况下，这个操作也能保证Store是一个原子操作。别的goroutine通过Load读取出来，不会看到存取了一半的值。</p><p>它支持的数据类型和方法如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/a0/8b77dc0e1ede98394aa21cf10fecc9a0.png?wh=818*160\" alt=\"\"></p><h2>Value类型</h2><p>刚刚说的都是一些比较常见的类型，其实，atomic还提供了一个特殊的类型：Value。它可以原子地存取对象类型，但也只能存取，不能CAS和Swap，常常用在配置变更等场景中。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/76/478b665391766de77043ffeb0d6fff76.png?wh=393*81\" alt=\"\"></p><p>接下来，我以一个配置变更的例子，来演示Value类型的使用。这里定义了一个Value类型的变量config， 用来存储配置信息。</p><p>首先，我们启动一个goroutine，然后让它随机sleep一段时间，之后就变更一下配置，并通过我们前面学到的Cond并发原语，通知其它的reader去加载新的配置。</p><p>接下来，我们启动一个goroutine等待配置变更的信号，一旦有变更，它就会加载最新的配置。</p><p>通过这个例子，你可以了解到Value的Store/Load方法的使用，因为它只有这两个方法，只要掌握了它们的使用，你就完全掌握了Value类型。</p><pre><code>type Config struct {\n    NodeName string\n    Addr     string\n    Count    int32\n}\n\nfunc loadNewConfig() Config {\n    return Config{\n        NodeName: &quot;北京&quot;,\n        Addr:     &quot;10.77.95.27&quot;,\n        Count:    rand.Int31(),\n    }\n}\nfunc main() {\n    var config atomic.Value\n    config.Store(loadNewConfig())\n    var cond = sync.NewCond(&amp;sync.Mutex{})\n\n    // 设置新的config\n    go func() {\n        for {\n            time.Sleep(time.Duration(5+rand.Int63n(5)) * time.Second)\n            config.Store(loadNewConfig())\n            cond.Broadcast() // 通知等待着配置已变更\n        }\n    }()\n\n    go func() {\n        for {\n            cond.L.Lock()\n            cond.Wait()                 // 等待变更信号\n            c := config.Load().(Config) // 读取新的配置\n            fmt.Printf(&quot;new config: %+v\\n&quot;, c)\n            cond.L.Unlock()\n        }\n    }()\n\n    select {}\n}\n</code></pre><p>好了，关于标准库的atomic提供的方法，到这里我们就学完了。事实上，atomic包提供了非常好的支持各种平台的一致性的API，绝大部分项目都是直接使用它。接下来，我再给你介绍一下第三方库，帮助你稍微开拓一下思维。</p><h1>第三方库的扩展</h1><p>其实，atomic的API已经算是很简单的了，它提供了包一级的函数，可以对几种类型的数据执行原子操作。</p><p>不过有一点让人觉得不爽的是，或者是让熟悉面向对象编程的程序员不爽的是，函数调用有一点点麻烦。所以，有些人就对这些函数做了进一步的包装，跟atomic中的Value类型类似，这些类型也提供了面向对象的使用方式，比如关注度比较高的<a href=\"https://github.com/uber-go/atomic\">uber-go/atomic</a>，它定义和封装了几种与常见类型相对应的原子操作类型，这些类型提供了原子操作的方法。这些类型包括Bool、Duration、Error、Float64、Int32、Int64、String、Uint32、Uint64等。</p><p>比如Bool类型，提供了CAS、Store、Swap、Toggle等原子方法，还提供String、MarshalJSON、UnmarshalJSON等辅助方法，确实是一个精心设计的atomic扩展库。关于这些方法，你一看名字就能猜出来它们的功能，我就不多说了。</p><p>其它的数据类型也和Bool类型相似，使用起来就像面向对象的编程一样，你可以看下下面的这段代码。</p><pre><code>    var running atomic.Bool\n    running.Store(true)\n    running.Toggle()\n    fmt.Println(running.Load()) // false\n</code></pre><h1>使用atomic实现Lock-Free queue</h1><p>atomic常常用来实现Lock-Free的数据结构，这次我会给你展示一个Lock-Free queue的实现。</p><p>Lock-Free queue最出名的就是 Maged M. Michael 和 Michael L. Scott 1996年发表的<a href=\"https://www.cs.rochester.edu/u/scott/papers/1996_PODC_queues.pdf\">论文</a>中的算法，算法比较简单，容易实现，伪代码的每一行都提供了注释，我就不在这里贴出伪代码了，因为我们使用Go实现这个数据结构的代码几乎和伪代码一样：</p><pre><code>package queue\nimport (\n\t&quot;sync/atomic&quot;\n\t&quot;unsafe&quot;\n)\n// lock-free的queue\ntype LKQueue struct {\n\thead unsafe.Pointer\n\ttail unsafe.Pointer\n}\n// 通过链表实现，这个数据结构代表链表中的节点\ntype node struct {\n\tvalue interface{}\n\tnext  unsafe.Pointer\n}\nfunc NewLKQueue() *LKQueue {\n\tn := unsafe.Pointer(&amp;node{})\n\treturn &amp;LKQueue{head: n, tail: n}\n}\n// 入队\nfunc (q *LKQueue) Enqueue(v interface{}) {\n\tn := &amp;node{value: v}\n\tfor {\n\t\ttail := load(&amp;q.tail)\n\t\tnext := load(&amp;tail.next)\n\t\tif tail == load(&amp;q.tail) { // 尾还是尾\n\t\t\tif next == nil { // 还没有新数据入队\n\t\t\t\tif cas(&amp;tail.next, next, n) { //增加到队尾\n\t\t\t\t\tcas(&amp;q.tail, tail, n) //入队成功，移动尾巴指针\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t} else { // 已有新数据加到队列后面，需要移动尾指针\n\t\t\t\tcas(&amp;q.tail, tail, next)\n\t\t\t}\n\t\t}\n\t}\n}\n// 出队，没有元素则返回nil\nfunc (q *LKQueue) Dequeue() interface{} {\n\tfor {\n\t\thead := load(&amp;q.head)\n\t\ttail := load(&amp;q.tail)\n\t\tnext := load(&amp;head.next)\n\t\tif head == load(&amp;q.head) { // head还是那个head\n\t\t\tif head == tail { // head和tail一样\n\t\t\t\tif next == nil { // 说明是空队列\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\t// 只是尾指针还没有调整，尝试调整它指向下一个\n\t\t\t\tcas(&amp;q.tail, tail, next)\n\t\t\t} else {\n\t\t\t\t// 读取出队的数据\n\t\t\t\tv := next.value\n                // 既然要出队了，头指针移动到下一个\n\t\t\t\tif cas(&amp;q.head, head, next) {\n\t\t\t\t\treturn v // Dequeue is done.  return\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// 将unsafe.Pointer原子加载转换成node\nfunc load(p *unsafe.Pointer) (n *node) {\n\treturn (*node)(atomic.LoadPointer(p))\n}\n\n// 封装CAS,避免直接将*node转换成unsafe.Pointer\nfunc cas(p *unsafe.Pointer, old, new *node) (ok bool) {\n\treturn atomic.CompareAndSwapPointer(\n\t\tp, unsafe.Pointer(old), unsafe.Pointer(new))\n}\n</code></pre><p>我来给你介绍下这里的主要逻辑。</p><p>这个lock-free的实现使用了一个辅助头指针（head），头指针不包含有意义的数据，只是一个辅助的节点，这样的话，出队入队中的节点会更简单。</p><p>入队的时候，通过CAS操作将一个元素添加到队尾，并且移动尾指针。</p><p>出队的时候移除一个节点，并通过CAS操作移动head指针，同时在必要的时候移动尾指针。</p><h1>总结</h1><p>好了，我们来小结一下。这节课，我们学习了atomic的基本使用方法，以及它提供的几种方法，包括Add、CAS、Swap、Load、Store、Value类型。除此之外，我还介绍了一些第三方库，并且带你实现了Lock-free queue。到这里，相信你已经掌握了atomic提供的各种方法，并且能够应用到实践中了。</p><p>最后，我还想和你讨论一个额外的问题：对一个地址的赋值是原子操作吗？</p><p>这是一个很有趣的问题，如果是原子操作，还要atomic包干什么？官方的文档中并没有特意的介绍，不过，在一些issue或者论坛中，每当有人谈到这个问题时，总是会被建议用atomic包。</p><p><a href=\"https://dave.cheney.net/2018/01/06/if-aligned-memory-writes-are-atomic-why-do-we-need-the-sync-atomic-package\">Dave Cheney</a>就谈到过这个问题，讲得非常好。我来给你总结一下他讲的知识点，这样你就比较容易理解使用atomic和直接内存操作的区别了。</p><p>在现在的系统中，write的地址基本上都是对齐的（aligned）。 比如，32位的操作系统、CPU以及编译器，write的地址总是4的倍数，64位的系统总是8的倍数（还记得WaitGroup针对64位系统和32位系统对state1的字段不同的处理吗）。对齐地址的写，不会导致其他人看到只写了一半的数据，因为它通过一个指令就可以实现对地址的操作。如果地址不是对齐的话，那么，处理器就需要分成两个指令去处理，如果执行了一个指令，其它人就会看到更新了一半的错误的数据，这被称做撕裂写（torn write） 。所以，你可以认为赋值操作是一个原子操作，这个“原子操作”可以认为是保证数据的完整性。</p><p>但是，对于现代的多处理多核的系统来说，由于cache、指令重排，可见性等问题，我们对原子操作的意义有了更多的追求。在多核系统中，一个核对地址的值的更改，在更新到主内存中之前，是在多级缓存中存放的。这时，多个核看到的数据可能是不一样的，其它的核可能还没有看到更新的数据，还在使用旧的数据。</p><p>多处理器多核心系统为了处理这类问题，使用了一种叫做内存屏障（memory fence或memory barrier）的方式。一个写内存屏障会告诉处理器，必须要等到它管道中的未完成的操作（特别是写操作）都被刷新到内存中，再进行操作。此操作还会让相关的处理器的CPU缓存失效，以便让它们从主存中拉取最新的值。</p><p>atomic包提供的方法会提供内存屏障的功能，所以，atomic不仅仅可以保证赋值的数据完整性，还能保证数据的可见性，一旦一个核更新了该地址的值，其它处理器总是能读取到它的最新值。但是，需要注意的是，因为需要处理器之间保证数据的一致性，atomic的操作也是会降低性能的。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/13/53d55255fe851754659d90cbee814f13.jpg?wh=2250*1693\" alt=\"\"></p><h1>思考题</h1><p>atomic.Value只有Load/Store方法，你是不是感觉意犹未尽？你可以尝试为Value类型增加 Swap和CompareAndSwap方法（可以参考一下<a href=\"https://github.com/golang/go/issues/39351\">这份资料</a>）。</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得有所收获，也欢迎你把今天的内容分享给你的朋友或同事。</p>","neighbors":{"left":{"article_title":"11 | Context：信息穿透上下文","id":304086},"right":{"article_title":"13 | Channel：另辟蹊径，解决并发问题","id":304188}},"comments":[{"had_liked":false,"id":259078,"user_name":"myrfy","can_delete":false,"product_type":"c1","uid":1169401,"ip_address":"","ucode":"2814BAE5D70098","user_header":"","comment_is_top":false,"comment_ctime":1604627493,"is_pvip":false,"replies":[{"id":"94250","content":"atomic主要是对这几种cpu架构的封装。你老婆是对的，你可以好好请教一下你老婆","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1604636346,"ip_address":"","comment_id":259078,"utype":1}],"discussion_count":10,"race_medal":0,"score":"160518417445","product_id":100061801,"comment_content":"恰好老婆大人是做芯片MMU相关工作的，咨询了一下她，她告诉我现代的CPU基本上都在硬件层面保证了多核之间数据视图的一致性，也就是说普通的LOAD&#47;STORE命令在硬件层面处理器就可以保证cache的一致性。如果是这样的话，那是不是可以理解为atomic包对指针的作用，主要是防止编译器做指令重排呢？因为编译器在这些现代架构上没必要使用特殊的指令了。<br>如果不止这样，麻烦老师指正，晚上回去和老婆大人再深入交流交流……","like_count":37,"discussions":[{"author":{"id":1674992,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8e/f0/18720510.jpg","nickname":"50%","note":"","ucode":"3E4247B5844B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322047,"discussion_content":"...老婆也太强了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1604667093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368768,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c0/e7a59706.jpg","nickname":"chongsheng","note":"","ucode":"859DF328FCA608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543262,"discussion_content":"MESI协议就是来保证多核多处理器的Cache一致性的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641033806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508839,"discussion_content":"atomic主要是对这几种cpu架构的封装。你老婆是对的，你可以好好请教一下你老婆","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604636346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239008,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e7/e0/33521e13.jpg","nickname":"DigDeeply","note":"","ucode":"113F4D755A1FEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366698,"discussion_content":"实名羡慕","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618152504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112540,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/dc/0a1eeb4c.jpg","nickname":"schwarzeni","note":"","ucode":"C1969191F334BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365096,"discussion_content":"你妻子太强了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617708673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337155,"discussion_content":"芯片MMU 是什么东西？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608806367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1494856,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cf/48/032d6dfc.jpg","nickname":"恰同学少年","note":"","ucode":"AFA497A2172E52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340392,"discussion_content":"内存管理单元","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609993144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337155,"ip_address":""},"score":340392,"extra":""},{"author":{"id":1647304,"avatar":"https://static001.geekbang.org/account/avatar/00/19/22/c8/f2892022.jpg","nickname":"科科","note":"","ucode":"7DAE6FE781172E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343173,"discussion_content":"MMU做虚拟地址映射的，一个板子能不能上系统就看有没有MMU了，没有的话就无法分页让系统做内存管理。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610961700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337155,"ip_address":""},"score":343173,"extra":""}]},{"author":{"id":1529249,"avatar":"https://static001.geekbang.org/account/avatar/00/17/55/a1/e77b9612.jpg","nickname":"峪五","note":"","ucode":"DCF2DC959D0CD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325522,"discussion_content":"cow bee","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605338295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2282788,"avatar":"","nickname":"Geek_e7b923","note":"","ucode":"A0963ABABF197D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321793,"discussion_content":"nb","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604633026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261378,"user_name":"端贺","can_delete":false,"product_type":"c1","uid":1121588,"ip_address":"","ucode":"80F1400B138055","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/34/8201baab.jpg","comment_is_top":false,"comment_ctime":1605314183,"is_pvip":false,"replies":[{"id":"94851","content":"加油！！！赞你认真的态度","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1605319206,"ip_address":"","comment_id":261378,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23080150663","product_id":100061801,"comment_content":"晁老师的内功真是深厚，整个系列读下来还是有点吃力的，尤其是文中推荐的外链，需要多花点时间好好消化，感谢晁老师。","like_count":5,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509466,"discussion_content":"加油！！！赞你认真的态度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605319206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2621412,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ff/e4/927547a9.jpg","nickname":"无名无姓","note":"","ucode":"487BD5AA2CD305","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403948,"discussion_content":"外链是指什么东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634197287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261390,"user_name":"蜉蝣","can_delete":false,"product_type":"c1","uid":1229070,"ip_address":"","ucode":"77CF92496855D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","comment_is_top":false,"comment_ctime":1605319028,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14490220916","product_id":100061801,"comment_content":"这个 lock-free queue 是能看懂，但要自己写出来就感觉有点难了。就譬如 tail == load(&amp;q.tail) 和 head == load(&amp;q.head) 的检查，我就想不到还要再做一次检查。前面章节看源码的时候也有这种感觉，能看懂，但自己写肯定想不到哪里要多检查一次。","like_count":3,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389342,"discussion_content":"经验问题，慢慢来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629245955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259040,"user_name":"末班车","can_delete":false,"product_type":"c1","uid":2250914,"ip_address":"","ucode":"18C93971413431","user_header":"https://static001.geekbang.org/account/avatar/00/22/58/a2/24612c85.jpg","comment_is_top":false,"comment_ctime":1604622625,"is_pvip":false,"replies":[{"id":"94253","content":"Go官方运行时只支持32bit&#47;64bit系统，最小支持单位就是32bit","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1604636892,"ip_address":"","comment_id":259040,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14489524513","product_id":100061801,"comment_content":"老师您好，之前在用atomic的时候，疑惑为啥没有提供it  int16的相关方法，这是不是也跟内存对齐有关系啊？","like_count":3,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508822,"discussion_content":"Go官方运行时只支持32bit/64bit系统，最小支持单位就是32bit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604636892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313011,"user_name":"Geek_921929","can_delete":false,"product_type":"c1","uid":1433178,"ip_address":"","ucode":"26BF6978F040BF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJMzj0MHiaXBdDFp4E16qhu6PZlu6xkJRWgaoJXOeqMDDLqM4vcvUbnVLiactTypZkYibOg7okwm2TAQ/132","comment_is_top":false,"comment_ctime":1632199953,"is_pvip":false,"replies":[{"id":"113877","content":"没有。aba问题是应用层自己解决的，比如用version","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1633053860,"ip_address":"","comment_id":313011,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10222134545","product_id":100061801,"comment_content":"晁老师，go包  cas针对ABA问题有啥封装吗，度学堂看到你的直播了哈哈，然后后来回放找不到了","like_count":2,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527196,"discussion_content":"没有。aba问题是应用层自己解决的，比如用version","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633053860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262322,"user_name":"JYZ1024","can_delete":false,"product_type":"c1","uid":1678716,"ip_address":"","ucode":"3F56C3A6327A08","user_header":"https://static001.geekbang.org/account/avatar/00/19/9d/7c/b3bfc1bf.jpg","comment_is_top":false,"comment_ctime":1605692119,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10195626711","product_id":100061801,"comment_content":"删除了一部分逻辑，但是看起来没有问题  麻烦各位帮忙看下<br>type LockFreeList struct {<br>\thead unsafe.Pointer &#47;&#47; 无意义非数据指针<br>\ttail unsafe.Pointer &#47;&#47; 尾部元素<br>}<br><br>type elem struct {<br>\tvalue interface{}<br>\tnext  unsafe.Pointer<br>}<br><br>var emptyNode = unsafe.Pointer(&amp;elem{})<br><br>func NewLockFreeList() *LockFreeList {<br>\treturn &amp;LockFreeList{<br>\t\thead: emptyNode,<br>\t\ttail: emptyNode,<br>\t}<br>}<br><br>&#47;&#47; 入队<br>func (q *LockFreeList) Enqueue(v interface{}) {<br>\tnode := &amp;elem{value: v}<br>\t&#47;&#47; load 队尾指针<br>\tfor {<br>\t\ttail := q.loadElem(&amp;q.tail)<br>\t\tnext := q.loadElem(&amp;tail.next)   &#47;&#47; 这一步执行完以后，可能tail已经被改变<br>\t\tif tail == q.loadElem(&amp;q.tail) { &#47;&#47; 确保load tail 和 next 是&quot;原子操作&quot;，不是就直接返回<br>\t\t\tif next == nil {<br>\t\t\t\tif atomic.CompareAndSwapPointer(&amp;tail.next, unsafe.Pointer(next), unsafe.Pointer(node)) {<br>\t\t\t\t\tatomic.CompareAndSwapPointer(&amp;q.tail, unsafe.Pointer(tail), unsafe.Pointer(node))<br>\t\t\t\t\treturn<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t}<br>}<br><br>func (q *LockFreeList) Dequeue() interface{} {<br>\tfor {<br>\t\thead := q.loadElem(&amp;q.head)<br>\t\ttail := q.loadElem(&amp;q.tail)<br>\t\tif head == tail {<br>\t\t\treturn nil<br>\t\t}<br>\t\tnode := q.loadElem(&amp;head.next) &#47;&#47; 队头节点<br>\t\tnodeNext := q.loadElem(&amp;node.next)<br>\t\tif node == q.loadElem(&amp;head.next) {<br>\t\t\tif atomic.CompareAndSwapPointer(&amp;head.next, unsafe.Pointer(node), unsafe.Pointer(nodeNext)) {<br>\t\t\t\treturn node.value<br>\t\t\t}<br>\t\t}<br>\t}<br>}<br><br>func (q *LockFreeList) loadElem(p *unsafe.Pointer) *elem {<br>\treturn (*elem)(atomic.LoadPointer(p))<br>}","like_count":2,"discussions":[{"author":{"id":1399012,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/e4/6aade538.jpg","nickname":"ljdbd","note":"","ucode":"550DAB839DD65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571781,"discussion_content":"按状态机考虑，绝对不会出现tail指针后面出现超过1个元素的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652408862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1399012,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/e4/6aade538.jpg","nickname":"ljdbd","note":"","ucode":"550DAB839DD65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571778,"discussion_content":"我也认为next != nil的情况不需要做处理，但是需要保证tail指针移动到新元素这一步cas操作能保证成功\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652408304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359595,"user_name":"强庚","can_delete":false,"product_type":"c1","uid":2109653,"ip_address":"北京","ucode":"D0525C40848705","user_header":"","comment_is_top":false,"comment_ctime":1665666354,"is_pvip":false,"replies":[{"id":"131004","content":"保证别的地方的对a写你能感知到","user_name":"作者回复","user_name_real":"编辑","uid":"1066613","ctime":1666274515,"ip_address":"北京","comment_id":359595,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1665666354","product_id":100061801,"comment_content":"atomic.Load系列的原子操作具体作用是什么呢？比如if atomic.LoadInt32(&amp;a) == 1 如果直接写成if a== 1这样有什么问题吗","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591093,"discussion_content":"保证别的地方的对a写你能感知到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666274515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320646,"user_name":"Geek8956","can_delete":false,"product_type":"c1","uid":2689403,"ip_address":"","ucode":"BF7EF77F174B79","user_header":"","comment_is_top":false,"comment_ctime":1636436924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636436924","product_id":100061801,"comment_content":"对于修改内存中的值，swap和store是不是一样？或者说，swap和store的区别，就是swap可以额外获取原值？","like_count":0},{"had_liked":false,"id":307978,"user_name":"Tatum 苏天斌","can_delete":false,"product_type":"c1","uid":1055479,"ip_address":"","ucode":"75F09E6C5FB27B","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/f7/cb61b37f.jpg","comment_is_top":false,"comment_ctime":1629347289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629347289","product_id":100061801,"comment_content":"无锁队列实现里面33行：cas(&amp;q.tail, tail, next)<br>这是为了当前routine入队更快（可能另一个入队操作刚走完28行）而优化的么？","like_count":0},{"had_liked":false,"id":289776,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1619171464,"is_pvip":false,"replies":[{"id":"105612","content":"这不就是为了便利性嘛","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1620377325,"ip_address":"","comment_id":289776,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1619171464","product_id":100061801,"comment_content":"atomic.Value是怎样实现的呢？这里为啥可以支持任意的数据？用Pointer类型不香么？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519015,"discussion_content":"这不就是为了便利性嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620377325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389343,"discussion_content":"用Pointer 不香","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629245974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269840,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1608806458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608806458","product_id":100061801,"comment_content":"<br>继续打卡，free-lock 能再详细解释下吗？","like_count":0},{"had_liked":false,"id":269837,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1608804745,"is_pvip":false,"replies":[{"id":"97844","content":"升级go版本","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1608818430,"ip_address":"","comment_id":269837,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608804745","product_id":100061801,"comment_content":"老师，执行这条命令，报错是什么意思，怎样解决？<br>$ GOARCH=amd64 go tool objdump -gnu main.o<br><br><br>flag provided but not defined: -gnu<br>usage: go tool objdump [-S] [-s symregexp] binary [start end]<br><br>  -S    print go code alongside assembly<br>  -s string<br>        only dump symbols matching this regexp","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512414,"discussion_content":"升级go版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608818430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266816,"user_name":"soooldier","can_delete":false,"product_type":"c1","uid":1000746,"ip_address":"","ucode":"04EC4C01DD06FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/2a/c4413de4.jpg","comment_is_top":false,"comment_ctime":1607496025,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1607496025","product_id":100061801,"comment_content":"出队的时候为啥还需要判断head == load(&amp;q.head)呢？head只是在NewLKQueue的时候有赋值，别的任何地方没发现有更新的操作呢","like_count":0,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389413,"discussion_content":"你们两个是不是没有注意 head和 tail贡献的都是一个node呢？初始化的时候都是同一个指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629271353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1494856,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cf/48/032d6dfc.jpg","nickname":"恰同学少年","note":"","ucode":"AFA497A2172E52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340393,"discussion_content":"可能被其他Goroutine修改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609993279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260961,"user_name":"SuperDai","can_delete":false,"product_type":"c1","uid":1289318,"ip_address":"","ucode":"0CA86D253754CA","user_header":"https://static001.geekbang.org/account/avatar/00/13/ac/66/a256008b.jpg","comment_is_top":false,"comment_ctime":1605162120,"is_pvip":false,"replies":[{"id":"94754","content":"没有要求，但我个人觉得数量不易过大","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1605170795,"ip_address":"","comment_id":260961,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1605162120","product_id":100061801,"comment_content":"老师，无锁队列对消费者数量和生产者数量是不是有要求？是不是要求消费者数量为1还是生产者数量为1？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509338,"discussion_content":"没有要求，但我个人觉得数量不易过大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605170795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1289318,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ac/66/a256008b.jpg","nickname":"SuperDai","note":"","ucode":"0CA86D253754CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324860,"discussion_content":"好的 谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605182500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260958,"user_name":"SuperDai","can_delete":false,"product_type":"c1","uid":1289318,"ip_address":"","ucode":"0CA86D253754CA","user_header":"https://static001.geekbang.org/account/avatar/00/13/ac/66/a256008b.jpg","comment_is_top":false,"comment_ctime":1605161979,"is_pvip":false,"replies":[{"id":"94755","content":"没有要求","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1605170819,"ip_address":"","comment_id":260958,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605161979","product_id":100061801,"comment_content":"老师，无锁队列对消费者数量和生产者数量是不是有要求？是不是要求消费者数量为1还是生产者数量为1？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509336,"discussion_content":"没有要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605170819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260714,"user_name":"李金狗","can_delete":false,"product_type":"c1","uid":1605237,"ip_address":"","ucode":"9A38CA646B06C3","user_header":"https://static001.geekbang.org/account/avatar/00/18/7e/75/3e6bdc4c.jpg","comment_is_top":false,"comment_ctime":1605088024,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1605088024","product_id":100061801,"comment_content":"cas(&amp;q.tail, tail, n) &#47;&#47;入队成功，移动尾巴指针 :这一步有失败的风险吧。","like_count":0,"discussions":[{"author":{"id":2226920,"avatar":"https://static001.geekbang.org/account/avatar/00/21/fa/e8/45211b5a.jpg","nickname":"假期","note":"","ucode":"CF6464E859E1F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331222,"discussion_content":"下次不管入队或者出队都会有操作重新判断一下，出队的第50行，入队的33行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606811021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1605237,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7e/75/3e6bdc4c.jpg","nickname":"李金狗","note":"","ucode":"9A38CA646B06C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2226920,"avatar":"https://static001.geekbang.org/account/avatar/00/21/fa/e8/45211b5a.jpg","nickname":"假期","note":"","ucode":"CF6464E859E1F2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331931,"discussion_content":"多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607006920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331222,"ip_address":""},"score":331931,"extra":""}]}]},{"had_liked":false,"id":259056,"user_name":"橙子888","can_delete":false,"product_type":"c1","uid":1447790,"ip_address":"","ucode":"8FB8A9AAE526E3","user_header":"https://static001.geekbang.org/account/avatar/00/16/17/6e/76b4aa3d.jpg","comment_is_top":false,"comment_ctime":1604624611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604624611","product_id":100061801,"comment_content":"打卡。","like_count":0},{"had_liked":false,"id":259023,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604619640,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604619640","product_id":100061801,"comment_content":"每周一三五早上，打卡，最后的总结涨知识了。","like_count":0}]}