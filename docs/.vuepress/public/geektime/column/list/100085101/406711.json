{"id":406711,"title":"04 | 自动化测试：为什么程序员做测试其实是有优势的？","content":"<p>你好，我是郑晔！</p><p>在上一讲里，我们讨论了程序员做测试和测试人员做测试之间有什么不同，你现在应该不会担心因为程序员做测试就抢了测试人员的饭碗了。这一讲，我们来谈谈程序员做测试的优势所在。估计你已经想到了，没错，就是自动化测试。</p><p>其实，程序员的主要工作就是打造各种自动化工具，无论是为了业务的支撑，或者是对于开发过程本身的支持。自动化，一方面是为了提高效率，另一方面，也是将低效繁琐的工作交由机器去完成。（关于自动化的种种思考，我在《10x 程序员工作法》中有了<a href=\"https://time.geekbang.org/column/article/86210\">一个模块</a>进行讲解，如果你有兴趣不妨去回顾一下。）</p><p>测试这种工作其实非常适合自动化，因为在整个软件的生命周期之内，新的需求总会不断出现，代码总会不断地调整。鉴于大部分软件常常都是牵一发动全身，所以，即便是只改动了一点代码，理论上来说也应该对软件的全部特性进行完整验证。如果只靠人工来做这个事情，这无疑是非常困难的。</p><p>很多团队只依赖于测试人员进行测试，而且测试以手工为主，结果就是大部分时间都是在进行低效地验证工作，而这些工作恰恰是最适合用自动化测试完成的。</p><h2>从自测到自动化测试框架</h2><p>你平时是怎么验证自己代码正确性的呢？最不负责任的做法是压根不验证，我曾见过最极端的做法是连编译都不通过的代码就直接提交了。不过，这是我职业生涯早期发生的事情。随着行业整体水平的提高，这种事情现在几乎看不到了。</p><!-- [[[read_end]]] --><p>现在很多人的做法是把整个系统启动起来，然后手工进行验证。当然，大多数人不会验证系统里面所有的内容，只会针对自己正在开发的部分进行验证。这种做法通常只能够保证自己刚刚编写的代码是正确的。结果常常是按下葫芦浮起瓢——这个功能是对了，但之前原本验证好的功能又不对了。</p><p>即便是一个再小的系统，其中的细节也多到没有人愿意每次去手工验证其中所有的细节。因为这样做既琐碎又重复，这显然是适合自动化发挥战斗力的地方。</p><p>最开始的自动化都是很简单的。通常来说，就是直接写一个 main 函数，直接调用代码中的模块。但每次要测试不同的代码时，程序员就要注释掉原来的测试代码，然后，再编写新的测试代码。</p><p>这种做法虽然可以去验证代码的正确性，但显然不适合反复验证。稍微优化点的做法就是把一个个测试用例放到不同的函数里。总的来说，这个阶段的自动化测试还处于草莽阶段。</p><p><strong>真正让自动化测试这件事登堂入室的，就是自动化测试框架了。</strong>最早的测试框架起源是 Smalltalk 社区。Smalltalk 是一门早期的面向对象程序设计语言，它有很多拥趸，很多今天流行的编程概念都来自于 Smalltalk 社区，自动化测试框架便是其中之一。</p><p>不过，真正让测试框架广泛流行起来，要归功于则另外的自动化测试框架 JUnit，它的作者是 Kent Beck 和 Erich Gamma。Kent Beck 是极限编程的创始人，在软件工程领域大名鼎鼎，而 Erich Gamma 则是著名的《设计模式》一书的作者，很多人熟悉的 Visual Studio Code 也有他的重大贡献。</p><p>有一次，Kent Beck 和 Erich Gamma一起从苏黎世飞往亚特兰大参加 OOPLSA（Object-Oriented Programming, Systems, Languages &amp; Applications）大会，在航班上两个人结对编程写出了 JUnit。从这个名字你不难看出，它的目标是打造一个单元测试框架。二人之所以能够在一路上就完成 JUnit 最初版本的开发，是因为他俩本身就在 Smalltalk 社区摸爬滚打了一段时间，对 Smalltalk 的单元测试框架有着很深刻的认识。</p><p>今天流行的自动化测试框架统称为 xUnit，因为它们都有一个共同的根基，也就是 JUnit。所以，只要了解了 JUnit 中的基本概念，你再去看其它测试框架，几乎都是差不多的。</p><h2>测试框架简介</h2><p>接下来，我们就来一次快速的自动化测试框架简介，如果你已经对自动化测试框架非常熟悉的话，可以当做一次轻松的复习。</p><p><strong>我们理解测试框架有两个关键点，一是要去理解测试组织的结构，一是要去理解断言。</strong>掌握了这两点，就足够应付日常的大多数情况了。</p><h3>测试结构</h3><p>我们先来看看组织测试的结构。首先，最核心的概念就是怎么表示一个测试用例。JUnit 怎么表示测试用例，我们在前面讲实战的时候已经见识过了，代码如下所示。</p><pre><code>@Test\npublic should_work() {\n  ...\n}\n</code></pre><p>我们前面说过，草莽阶段稍微优化一点的做法就是把测试用例放到一个个不同的函数里面，而测试框架就是把这种做法做了一个延伸，同样是用一个一个的函数表示一个一个的测试用例。不同的是，在草莽阶段，你每写一个函数就要在执行的部分注册一下这个函数。</p><p>使用测试框架的话，需要对表示测试用例的函数进行统一的标识，以便框架能够在运行时识别出来。在我们上面这个例子里面，用来识别测试用例的就是@Test。如果你用过 4.0 之前版本的 JUnit，它是约定以 test 开头的函数就是测试用例，所以，你会看到下面这样的写法。</p><pre><code>public test_should_work() {\n  ...\n}\n</code></pre><p><strong>两种不同的写法本质上是程序设计语言层面的差别</strong>，因为 Java 5 引入了 Annotation 这个语法，才有了基于@Test 进行标注的做法。<strong>很多的语法层面的改进都是为了提升语言的表达能力，而这一点在程序库的设计上体现得最为明显</strong>。如果你去看不同程序语言的测试框架时就会发现，做得比较差就是直接照搬 test 开头的做法，而做得比较好的则是会结合自己的语言特点。</p><p>了解了最基本的测试用例结构，其实写测试就够了。但是，测试也是代码，好的测试代码要兼具好代码的属性，最基本的要求就是消除重复。</p><p>比如，同样的初始化代码反复在写，由于测试的特殊性，这些初始化的代码需要在每个测试之前都去执行。为了解决这个问题，JUnit 引入了 setUp 去做初始化的工作。在 JUnit 4 之后，这个由函数名称进行定义的做法，改成了使用 @BeforeEach 进行定义的方式。我们在前面的实战中也提到过。</p><pre><code>@BeforeEach\nvoid setUp() {\n  ...\n}\n</code></pre><p>由于 @BeforeEach 的存在，setUp 这个名字在这里已经没有意义，只不过因为这是一个函数，需要有一个名字。从习惯上，我们还是称呼它为 setUp 函数。如果 JUnit 进一步将语法升级到 Java 8 的语法，这里完全可以使用 lambda，去掉对名字的依赖。</p><p>与 @BeforeEach 和 setUp 对应的是 @AfterEach 和 tearDown，它们处理的是要在每个测试之后执行的清理工作。相对来说，这一对用的就比较少了，除非是你用到了一些需要释放的资源。</p><p>知道了测试用例的写法，知道了 setUp/tearDown，你就基本上掌握了测试结构的核心了。如果你具体学习一个测试框架，还会有人告诉你 TestSuite、TestRunner 等等的概念，但它们现在基本上可以归入到实现层面了（也就是执行测试所需要了解的概念），而在编写代码的层面上，有前面说到的这几个概念就够了。</p><h3>断言</h3><p>我们接下来看理解测试框架的第二个关键点，断言。测试结构保证了测试用例能够按照预期的方式执行，而断言则保证了我们的测试需要有一个目标，也就是我们到底要测什么。</p><p>断言，说白了就是拿执行的结果和预期的结果进行比较。如果执行一个测试连预期都没有，那它到底要测什么？所以，我们可以说，<strong>没有断言的测试不是好测试。</strong></p><p>几乎每个测试框架都有自己内建的断言机制，比如下面这个。</p><pre><code>assertEquals(2, calculator.add(1, 1));\n</code></pre><p>这个 assertEquals 是最典型的一个断言，也几乎是使用最多的断言，很多其它语言的测试框架也把它原封不动地搬了过去。但这个断言有一个严重的问题，你如果不看 API，根本记不住哪个应该是预期值，哪个应该是你函数返回的实际值。这就是典型的 API 设计问题，让人很难用好。</p><p>所以，社区中涌现了大量的第三方断言程序库，比如，<a href=\"https://hamcrest.org/JavaHamcrest/\">Hamcrest</a>、<a href=\"https://joel-costigliola.github.io/assertj/\">AssertJ</a>、<a href=\"https://truth.dev/\">Truth</a>。其中，Hamcrest 是一个函数组合风格的断言库，一度被内建到 JUnit 4 里面，但出于对社区竞争的鼓励，JUnit 5 又把它挪了出来，下面是一段使用了 Harmcrest 的代码。</p><pre><code>assertThat(calculator.subtract(4, 1), is(equalTo(3)));\n</code></pre><p>AssertJ 是一种流畅风格的程序库，扩展性也非常不错，它也是我们在前面实战部分选择的程序库，下面是一段使用了 AssertJ 的代码。</p><pre><code>assertThat(frodo.getName()).startsWith(&quot;Fro&quot;)\n                           .endsWith(&quot;do&quot;)\n                           .isEqualToIgnoringCase(&quot;frodo&quot;);\n</code></pre><p>Truth 是 Google 开源的一个断言库，和 AssertJ 很类似，它对 Android 程序支持得比较好，我也放了一段代码，风格上和 AssertJ 如出一辙。</p><pre><code>assertThat(projectsByTeam())\n    .valuesForKey(&quot;corelibs&quot;)\n    .containsExactly(&quot;guava&quot;, &quot;dagger&quot;, &quot;truth&quot;, &quot;auto&quot;, &quot;caliper&quot;);\n</code></pre><p>断言，不仅仅包括有返回值的处理，还包括其它的特殊情况，比如，抛出异常也可进行断言，这是 JUnit 5 内建的异常断言，你可以参考一下。</p><pre><code>Assertions.assertThrows(IllegalArgumentException.class, () -&gt; {\n  Integer.parseInt(&quot;One&quot;);\n});\n</code></pre><p>具体有哪些情况可以进行断言，你可以查阅所使用断言库的 API 文档。</p><p>最后，我还要讲一个不在这些断言库里的断言，那就是 Mock 框架提供的一种断言：verify。</p><p>关于 Mock 框架，后面我们还会讲到，这里只是简单地提一下，verify 的作用就是验证一个函数有没有得到调用。在某些测试里面，函数既没有返回值，也不会抛出异常。比如拿保存一个对象来说，我们唯一能够判断保存动作是否正确执行的办法，就是利用 verify 去验证保存的函数是否得到调用，就像下面这样。</p><pre><code>verify(repository).save(obj);\n</code></pre><p>虽然它不在断言库中，但它确确实实是一种断言，它判断的是一个动作是否得到正确的执行。所以，当我们说一个测试应该包含断言时，有 verify 的情况也算是有断言了。至于怎么用好 verify，我们后面讲到 Mock 框架时再说。</p><p>讲过测试结构和断言，我们已经把测试框架的核心内容说完了。但这些只是写测试的基础，要想写好测试，我们还需要对什么样的测试是好的测试有个基本的认识，这就是我们下一讲要讲的内容了。</p><h2>总结时刻</h2><p>这一讲，我们讲了程序员在测试上的优势所在，也就是自动化。软件开发本身就是一个不断迭代的过程，对每一次代码的改动来说，理论上就应该把整个系统从头到尾地测一遍。这种工作手工做是非常琐碎的，所以非常适合使用自动化。</p><p>验证程序的正确性是程序员的基本工作，不过，很多人的做法还是手工验证。为别人打造自动化工具的人，自己的开发过程还不够自动化，这是很多程序员面对的尴尬。实际上，还有一些人在探索自动化的做法，从最早的 main 函数，到后来的自动化测试框架，就是在这方面一点一点的进步。自动化测试框架的出现，让自动化测试从业余走向了专业。</p><p>理解自动化测试框架，主要包含两个部分：组织测试的结构以及断言。组织测试的结构最核心的就是测试用例如何写，以及 setUp 和 tearDown 函数。而断言则是保证了我们测试的目标。断言程序库有很多，你可以根据自己的喜好进行选择。除了断言程序库，Mock 框架的 verify 也是一种断言。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>没有断言的测试不是好测试。</strong></p><h2>思考题</h2><p>今天我们讲了自动化测试框架最核心的部分，但现在的测试框架都已经有了更多丰富的功能，希望你找一个你喜欢的测试框架，深入地了解一下它们新特性，挑一个让你印象深刻的特性和我们分享。期待在留言区看到你的想法。</p>","neighbors":{"left":{"article_title":"03 | 程序员的测试与测试人员的测试有什么不同？","id":405774},"right":{"article_title":"05 | 一个好的自动化测试长什么样？","id":407452}},"comments":[{"had_liked":false,"id":307585,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1629166494,"is_pvip":false,"replies":[{"id":"111891","content":"多谢你的分享","user_name":"作者回复","comment_id":307585,"uid":"1258861","ip_address":"","utype":1,"ctime":1629940544,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"31693937566","product_id":100085101,"comment_content":"支持老师鼓励开发同学进行自动化测试。<br><br>不过「自动化测试」这个叫法，包含的范围太广，我觉得开发的优势是对代码实现逻辑更熟悉，所以优势更多是在架构设计上提前规避问题，以及在单测时提前发现问题，叫自测感觉更合适。<br><br>自动化测试的话，确实涉及了代码编写，但不是测试同学就不会写代码哈，我们只是写测试代码，相对来说我们代码的目的性更强。<br><br>不管咋样，就是开发应该负责自测（单测，以及联调），测试更多的负责系统测试和场景测试。<br><br>至于大家使用什么方式并没有限定，比如目前很多开发都是通过打调试信息来自测（更有甚者，开发过程中喊测试配合测试），可以进一步改为使用自动化测试框架，比如测试同学很多使用手工黑盒测试，也可以引入自动化测试框架。<br><br>以上，感谢老师的分享。","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525204,"discussion_content":"多谢你的分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629940544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307378,"user_name":"李威","can_delete":false,"product_type":"c1","uid":1460961,"ip_address":"","ucode":"3409A9390BD1FD","user_header":"https://static001.geekbang.org/account/avatar/00/16/4a/e1/2a498473.jpg","comment_is_top":false,"comment_ctime":1629069627,"is_pvip":false,"replies":[{"id":"111318","content":"咋看呢？就是没有学到精髓呗","user_name":"作者回复","comment_id":307378,"uid":"1258861","ip_address":"","utype":1,"ctime":1629113260,"user_name_real":"郑晔"}],"discussion_count":3,"race_medal":0,"score":"18808938811","product_id":100085101,"comment_content":"go语言官方自带测试框架没有断言函数，需要自己用if&#47;else去验证实际结果与预期是否一致，这种设计的初衷始终有点难以理解，郑老师怎么看","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525131,"discussion_content":"咋看呢？就是没有学到精髓呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629113260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016036,"avatar":"","nickname":"grandgraph","note":"","ucode":"B26060999DAA73","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389439,"discussion_content":"go用testify库去做断言更好些","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629277239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2916501,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/80/95/00354621.jpg","nickname":"！","note":"","ucode":"9C90F33B43177C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572054,"discussion_content":"go默认的测试框架太粗糙了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652584606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308710,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1629766462,"is_pvip":false,"replies":[{"id":"111774","content":"显然，你要进步了😄","user_name":"作者回复","comment_id":308710,"uid":"1258861","ip_address":"","utype":1,"ctime":1629796005,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"14514668350","product_id":100085101,"comment_content":"没有断言的测试，不是好的测试，这句记下来。<br>我目前是怎么用junit的，我就是直接sout 输出，看输出是不是符合我的预期，但也经常忘记写测试用例，革命尚需努力。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525597,"discussion_content":"显然，你要进步了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629796005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306849,"user_name":"萧","can_delete":false,"product_type":"c1","uid":1229143,"ip_address":"","ucode":"0C2239867AFF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/57/27de274f.jpg","comment_is_top":false,"comment_ctime":1628745506,"is_pvip":true,"replies":[{"id":"111146","content":"信息边界扩展了","user_name":"作者回复","comment_id":306849,"uid":"1258861","ip_address":"","utype":1,"ctime":1628811957,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"10218680098","product_id":100085101,"comment_content":"还有断言库，涨知识了，一直用的原生的","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524945,"discussion_content":"信息边界扩展了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628811957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307127,"user_name":"邓志国","can_delete":false,"product_type":"c1","uid":1043844,"ip_address":"","ucode":"380AE67ED7B9D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","comment_is_top":false,"comment_ctime":1628900893,"is_pvip":false,"replies":[{"id":"111289","content":"多谢分享","user_name":"作者回复","comment_id":307127,"uid":"1258861","ip_address":"","utype":1,"ctime":1629076495,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"5923868189","product_id":100085101,"comment_content":"hamcrest的扩展方式我觉得最好，我就编写了几个matcher来满足自己特殊需求","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525052,"discussion_content":"多谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629076495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306591,"user_name":"bigben","can_delete":false,"product_type":"c1","uid":1169313,"ip_address":"","ucode":"DBD15A6C8E2590","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","comment_is_top":false,"comment_ctime":1628638859,"is_pvip":false,"replies":[{"id":"111058","content":"选主流的就好","user_name":"作者回复","comment_id":306591,"uid":"1258861","ip_address":"","utype":1,"ctime":1628680713,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"5923606155","product_id":100085101,"comment_content":"测试框架多了也让人头疼，不知道该选哪个？","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524823,"discussion_content":"选主流的就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628680713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347982,"user_name":"大鹏","can_delete":false,"product_type":"c1","uid":2659123,"ip_address":"","ucode":"31A65C4C054B93","user_header":"https://static001.geekbang.org/account/avatar/00/28/93/33/2d4de22e.jpg","comment_is_top":false,"comment_ctime":1654649155,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654649155","product_id":100085101,"comment_content":"Spock:the enterprise ready specification framework(https:&#47;&#47;spockframework.org&#47;)","like_count":0},{"had_liked":false,"id":347914,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1654577041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654577041","product_id":100085101,"comment_content":"没有断言的测试不是好测试。--记下来","like_count":0},{"had_liked":false,"id":344502,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1582420,"ip_address":"","ucode":"349FD35822DC8A","user_header":"https://static001.geekbang.org/account/avatar/00/18/25/54/ef2ca14f.jpg","comment_is_top":false,"comment_ctime":1651588662,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651588662","product_id":100085101,"comment_content":"一直用junit4写. 印象比较深刻的特性是@Category特性, 可以用来区分提交前测试和提交后测试. <br>该学习junit5了. ","like_count":0},{"had_liked":false,"id":309303,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1630036492,"is_pvip":false,"replies":[{"id":"112030","content":"说中了😁","user_name":"作者回复","comment_id":309303,"uid":"1258861","ip_address":"","utype":1,"ctime":1630115437,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"1630036492","product_id":100085101,"comment_content":"...把整个系统启动起来，然后手工进行验证 &lt;- 说的就是我","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525818,"discussion_content":"说中了😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630115437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}