{"id":126460,"title":"25 | 本地存储与数据库的使用和优化","content":"<p>你好，我是陈航。</p><p>在上一篇文章中，我带你一起学习了Flutter的网络编程，即如何建立与Web服务器的通信连接，以实现数据交换，以及如何解析结构化后的通信信息。</p><p>其中，建立通信连接在Flutter中有三种基本方案，包括HttpClient、http与dio。考虑到HttpClient与http并不支持复杂的网络请求行为，因此我重点介绍了如何使用dio实现资源访问、接口数据请求与提交、上传及下载文件、网络拦截等高级操作。</p><p>而关于如何解析信息，由于Flutter并不支持反射，因此只提供了手动解析JSON的方式：把JSON转换成字典，然后给自定义的类属性赋值即可。</p><p>正因为有了网络，我们的App拥有了与外界进行信息交换的通道，也因此具备了更新数据的能力。不过，经过交换后的数据通常都保存在内存中，而应用一旦运行结束，内存就会被释放，这些数据也就随之消失了。</p><p>因此，我们需要把这些更新后的数据以一定的形式，通过一定的载体保存起来，这样应用下次运行时，就可以把数据从存储的载体中读出来，也就实现了<strong>数据的持久化</strong>。</p><p>数据持久化的应用场景有很多。比如，用户的账号登录信息需要保存，用于每次与Web服务验证身份；又比如，下载后的图片需要缓存，避免每次都要重新加载，浪费用户流量。</p><!-- [[[read_end]]] --><p>由于Flutter仅接管了渲染层，真正涉及到存储等操作系统底层行为时，还需要依托于原生Android、iOS，因此与原生开发类似的，根据需要持久化数据的大小和方式不同，Flutter提供了三种数据持久化方法，即文件、SharedPreferences与数据库。接下来，我将与你详细讲述这三种方式。</p><h2>文件</h2><p>文件是存储在某种介质（比如磁盘）上指定路径的、具有文件名的一组有序信息的集合。从其定义看，要想以文件的方式实现数据持久化，我们首先需要确定一件事儿：数据放在哪儿？这，就意味着要定义文件的存储路径。</p><p>Flutter提供了两种文件存储的目录，即<strong>临时（Temporary）目录与文档（Documents）目录</strong>：</p><ul>\n<li>临时目录是操作系统可以随时清除的目录，通常被用来存放一些不重要的临时缓存数据。这个目录在iOS上对应着NSTemporaryDirectory返回的值，而在Android上则对应着getCacheDir返回的值。</li>\n<li>文档目录则是只有在删除应用程序时才会被清除的目录，通常被用来存放应用产生的重要数据文件。在iOS上，这个目录对应着NSDocumentDirectory，而在Android上则对应着AppData目录。</li>\n</ul><p>接下来，我通过一个例子与你演示如何在Flutter中实现文件读写。</p><p>在下面的代码中，我分别声明了三个函数，即创建文件目录函数、写文件函数与读文件函数。这里需要注意的是，由于文件读写是非常耗时的操作，所以这些操作都需要在异步环境下进行。另外，为了防止文件读取过程中出现异常，我们也需要在外层包上try-catch：</p><pre><code>//创建文件目录\nFuture&lt;File&gt; get _localFile async {\n  final directory = await getApplicationDocumentsDirectory();\n  final path = directory.path;\n  return File('$path/content.txt');\n}\n//将字符串写入文件\nFuture&lt;File&gt; writeContent(String content) async {\n  final file = await _localFile;\n  return file.writeAsString(content);\n}\n//从文件读出字符串\nFuture&lt;String&gt; readContent() async {\n  try {\n    final file = await _localFile;\n    String contents = await file.readAsString();\n    return contents;\n  } catch (e) {\n    return &quot;&quot;;\n  }\n}\n</code></pre><p>有了文件读写函数，我们就可以在代码中对content.txt这个文件进行读写操作了。在下面的代码中，我们往这个文件写入了一段字符串后，隔了一会又把它读了出来：</p><pre><code>writeContent(&quot;Hello World!&quot;);\n...\nreadContent().then((value)=&gt;print(value));\n</code></pre><p>除了字符串读写之外，Flutter还提供了二进制流的读写能力，可以支持图片、压缩包等二进制文件的读写。这些内容不是本次分享的重点，如果你想要深入研究的话，可以查阅<a href=\"https://api.flutter.dev/flutter/dart-io/File-class.html\">官方文档</a>。</p><h2>SharedPreferences</h2><p>文件比较适合大量的、有序的数据持久化，如果我们只是需要缓存少量的键值对信息（比如记录用户是否阅读了公告，或是简单的计数），则可以使用SharedPreferences。</p><p>SharedPreferences会以原生平台相关的机制，为简单的键值对数据提供持久化存储，即在iOS上使用NSUserDefaults，在Android使用SharedPreferences。</p><p>接下来，我通过一个例子来演示在Flutter中如何通过SharedPreferences实现数据的读写。在下面的代码中，我们将计数器持久化到了SharedPreferences中，并为它分别提供了读方法和递增写入的方法。</p><p>这里需要注意的是，setter（setInt）方法会同步更新内存中的键值对，然后将数据保存至磁盘，因此我们无需再调用更新方法强制刷新缓存。同样地，由于涉及到耗时的文件读写，因此我们必须以异步的方式对这些操作进行包装：</p><pre><code>//读取SharedPreferences中key为counter的值\nFuture&lt;int&gt;_loadCounter() async {\n  SharedPreferences prefs = await SharedPreferences.getInstance();\n  int  counter = (prefs.getInt('counter') ?? 0);\n  return counter;\n}\n\n//递增写入SharedPreferences中key为counter的值\nFuture&lt;void&gt;_incrementCounter() async {\n  SharedPreferences prefs = await SharedPreferences.getInstance();\n    int counter = (prefs.getInt('counter') ?? 0) + 1;\n    prefs.setInt('counter', counter);\n}\n</code></pre><p>在完成了计数器存取方法的封装后，我们就可以在代码中随时更新并持久化计数器数据了。在下面的代码中，我们先是读取并打印了计数器数据，随后将其递增，并再次把它读取打印：</p><pre><code>//读出counter数据并打印\n_loadCounter().then((value)=&gt;print(&quot;before:$value&quot;));\n\n//递增counter数据后，再次读出并打印\n_incrementCounter().then((_) {\n  _loadCounter().then((value)=&gt;print(&quot;after:$value&quot;));\n});\n</code></pre><p>可以看到，SharedPreferences的使用方式非常简单方便。不过需要注意的是，以键值对的方式只能存储基本类型的数据，比如int、double、bool和string。</p><h2>数据库</h2><p>SharedPrefernces的使用固然方便，但这种方式只适用于持久化少量数据的场景，我们并不能用它来存储大量数据，比如文件内容（文件路径是可以的）。</p><p>如果我们需要持久化大量格式化后的数据，并且这些数据还会以较高的频率更新，为了考虑进一步的扩展性，我们通常会选用sqlite数据库来应对这样的场景。与文件和SharedPreferences相比，数据库在数据读写上可以提供更快、更灵活的解决方案。</p><p>接下来，我就以一个例子分别与你介绍数据库的使用方法。</p><p>我们以上一篇文章中提到的Student类为例：</p><pre><code>class Student{\n  String id;\n  String name;\n  int score;\n  //构造方法\n  Student({this.id, this.name, this.score,});\n  //用于将JSON字典转换成类对象的工厂类方法\n  factory Student.fromJson(Map&lt;String, dynamic&gt; parsedJson){\n    return Student(\n      id: parsedJson['id'],\n      name : parsedJson['name'],\n      score : parsedJson ['score'],\n    );\n  }\n}\n</code></pre><p>JSON类拥有一个可以将JSON字典转换成类对象的工厂类方法，我们也可以提供将类对象反过来转换成JSON字典的实例方法。因为最终存入数据库的并不是实体类对象，而是字符串、整型等基本类型组成的字典，所以我们可以通过这两个方法，实现数据库的读写。同时，我们还分别定义了3个Student对象，用于后续插入数据库：</p><pre><code>class Student{\n  ...\n  //将类对象转换成JSON字典，方便插入数据库\n  Map&lt;String, dynamic&gt; toJson() {\n    return {'id': id, 'name': name, 'score': score,};\n  }\n}\n\nvar student1 = Student(id: '123', name: '张三', score: 90);\nvar student2 = Student(id: '456', name: '李四', score: 80);\nvar student3 = Student(id: '789', name: '王五', score: 85);\n</code></pre><p>有了实体类作为数据库存储的对象，接下来就需要创建数据库了。在下面的代码中，我们通过openDatabase函数，给定了一个数据库存储地址，并通过数据库表初始化语句，创建了一个用于存放Student对象的students表：</p><pre><code>final Future&lt;Database&gt; database = openDatabase(\n  join(await getDatabasesPath(), 'students_database.db'),\n  onCreate: (db, version)=&gt;db.execute(&quot;CREATE TABLE students(id TEXT PRIMARY KEY, name TEXT, score INTEGER)&quot;),\n  onUpgrade: (db, oldVersion, newVersion){\n     //dosth for migration\n  },\n  version: 1,\n);\n</code></pre><p>以上代码属于通用的数据库创建模板，有三个地方需要注意：</p><ol>\n<li>在设定数据库存储地址时，使用join方法对两段地址进行拼接。join方法在拼接时会使用操作系统的路径分隔符，这样我们就无需关心路径分隔符究竟是“/”还是“\\”了。</li>\n<li>创建数据库时，传入了一个version 1，在onCreate方法的回调里面也有一个version。这两个version是相等的。</li>\n<li>数据库只会创建一次，也就意味着onCreate方法在应用从安装到卸载的生命周期中只会执行一次。如果我们在版本升级过程中，想对数据库的存储字段进行改动又该如何处理呢？<br>\nsqlite提供了onUpgrade方法，我们可以根据这个方法传入的oldVersion和newVersion确定升级策略。其中，前者代表用户手机上的数据库版本，而后者代表当前版本的数据库版本。比如，我们的应用有1.0、1.1和1.2三个版本，在1.1把数据库version升级到了2。考虑到用户的升级顺序并不总是连续的，可能会直接从1.0升级到1.2，因此我们可以在onUpgrade函数中，对数据库当前版本和用户手机上的数据库版本进行比较，制定数据库升级方案。</li>\n</ol><p>数据库创建好了之后，接下来我们就可以把之前创建的3个Student对象插入到数据库中了。数据库的插入需要调用insert方法，在下面的代码中，我们将Student对象转换成了JSON，在指定了插入冲突策略（如果同样的对象被插入两次，则后者替换前者）和目标数据库表后，完成了Student对象的插入：</p><pre><code>Future&lt;void&gt; insertStudent(Student std) async {\n  final Database db = await database;\n  await db.insert(\n    'students',\n    std.toJson(),\n    //插入冲突策略，新的替换旧的\n    conflictAlgorithm: ConflictAlgorithm.replace,\n  );\n}\n//插入3个Student对象\nawait insertStudent(student1);\nawait insertStudent(student2);\nawait insertStudent(student3);\n</code></pre><p>数据完成插入之后，接下来我们就可以调用query方法把它们取出来了。需要注意的是，写入的时候我们是一个接一个地有序插入，读的时候我们则采用批量读的方式（当然也可以指定查询规则读特定对象）。读出来的数据是一个JSON字典数组，因此我们还需要把它转换成Student数组。最后，别忘了把数据库资源释放掉：</p><pre><code>Future&lt;List&lt;Student&gt;&gt; students() async {\n  final Database db = await database;\n  final List&lt;Map&lt;String, dynamic&gt;&gt; maps = await db.query('students');\n  return List.generate(maps.length, (i)=&gt;Student.fromJson(maps[i]));\n}\n\n//读取出数据库中插入的Student对象集合\nstudents().then((list)=&gt;list.forEach((s)=&gt;print(s.name)));\n//释放数据库资源\nfinal Database db = await database;\ndb.close();\n</code></pre><p>可以看到，在面对大量格式化的数据模型读取时，数据库提供了更快、更灵活的持久化解决方案。</p><p>除了基础的数据库读写操作之外，sqlite还提供了更新、删除以及事务等高级特性，这与原生Android、iOS上的SQLite或是MySQL并无不同，因此这里就不再赘述了。你可以参考sqflite插件的<a href=\"https://pub.dev/documentation/sqflite/latest/\">API文档</a>，或是查阅<a href=\"http://www.sqlitetutorial.net/\">SQLite教程</a>了解具体的使用方法。</p><h2>总结</h2><p>好了，今天的分享就这里。我们简单回顾下今天学习的内容吧。</p><p>首先，我带你学习了文件，这种最常见的数据持久化方式。Flutter提供了两类目录，即临时目录与文档目录。我们可以根据实际需求，通过写入字符串或二进制流，实现数据的持久化。</p><p>然后，我通过一个小例子和你讲述了SharedPreferences，这种适用于持久化小型键值对的存储方案。</p><p>最后，我们一起学习了数据库。围绕如何将一个对象持久化到数据库，我与你介绍了数据库的创建、写入和读取方法。可以看到，使用数据库的方式虽然前期准备工作多了不少，但面对持续变更的需求，适配能力和灵活性都更强了。</p><p>数据持久化是CPU密集型运算，因此数据存取均会大量涉及到异步操作，所以请务必使用异步等待或注册then回调，正确处理读写操作的时序关系。</p><p>我把今天分享所涉及到的知识点打包到了<a href=\"https://github.com/cyndibaby905/25_data_persistence\">GitHub</a>中，你可以下载下来，反复运行几次，加深理解与记忆。</p><h2>思考题</h2><p>最后，我给你留下两道思考题吧。</p><ol>\n<li>请你分别介绍一下文件、SharedPreferences和数据库，这三种持久化数据存储方式的适用场景。</li>\n<li>我们的应用经历了1.0、1.1和1.2三个版本。其中，1.0版本新建了数据库并创建了Student表，1.1版本将Student表增加了一个字段age（ALTER TABLE students ADD age INTEGER）。请你写出1.1版本及1.2版本的数据库升级代码。</li>\n</ol><pre><code>//1.0版本数据库创建代码\nfinal Future&lt;Database&gt; database = openDatabase(\n  join(await getDatabasesPath(), 'students_database.db'),\n  onCreate: (db, version)=&gt;db.execute(&quot;CREATE TABLE students(id TEXT PRIMARY KEY, name TEXT, score INTEGER)&quot;),\n  onUpgrade: (db, oldVersion, newVersion){\n     //dosth for migration\n  },\n  version: 1,\n);\n</code></pre><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":127263,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566627607,"is_pvip":false,"replies":[{"id":"47352","content":"数据库创建的语句不对：<br>1.1.0，1.1和1.2传入的version完全一样，没办法区分数据库版本<br>2.数据库升级的代码不太适合用if-else判断具体版本去写适配策略，版本一多适配代码就乱了。建议用none break的switch-case去写","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566793258,"ip_address":"","comment_id":127263,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10156562199","product_id":100031001,"comment_content":"思考题:<br>1.文件用来存储图片，视频类的大文件，SharedPreferences 用来存储一些键值对，比如记住用户名，数据库用来存储类似表格有关系的数据行。<br>2.<br>&#47;&#47;1.1 版本数据库创建代码<br>final Future&lt;Database&gt; database = openDatabase(<br>  join(await getDatabasesPath(), &#39;students_database.db&#39;),<br>  onCreate: (db, version)=&gt; {<br>    if (version == &#39;1.0&#39;) {<br>      db.execute(&quot;ALTER TABLE students ADD age INTEGER)&quot;),<br>    } else {<br>      db.execute(&quot;CREATE TABLE students(id TEXT PRIMARY KEY, name TEXT, score INTEGER, age INTEGER)&quot;),<br>    }<br>  }<br>  version: 1,<br>);<br><br>&#47;&#47;1.2 版本数据库创建代码<br>final Future&lt;Database&gt; database = openDatabase(<br>  join(await getDatabasesPath(), &#39;students_database.db&#39;),<br>  onCreate: (db, version)=&gt; {<br>    if (version == &#39;1.0&#39;) {<br>      db.execute(&quot;ALTER TABLE students ADD age INTEGER)&quot;),<br>    } else if (version == &#39;1.1&#39;) {<br>      <br>    } else {<br>      db.execute(&quot;CREATE TABLE students(id TEXT PRIMARY KEY, name TEXT, score INTEGER, age INTEGER)&quot;),<br>    }<br>  }<br>  version: 1,<br>);","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464403,"discussion_content":"数据库创建的语句不对：\n1.1.0，1.1和1.2传入的version完全一样，没办法区分数据库版本\n2.数据库升级的代码不太适合用if-else判断具体版本去写适配策略，版本一多适配代码就乱了。建议用none break的switch-case去写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566793258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132038,"user_name":"Geek_joestar","can_delete":false,"product_type":"c1","uid":1587984,"ip_address":"","ucode":"B68345FBC5D311","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLFbNiaADSSo6SQhsoDRX95ey8zngVaj2fHqaVc6JAd1uXJFAle1sl4SaicicpSzcKwa4JjLvkpKItZQ/132","comment_is_top":false,"comment_ctime":1568010839,"is_pvip":false,"replies":[{"id":"50756","content":"对，不过switch-case是需要有break的","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1568183651,"ip_address":"","comment_id":132038,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862978135","product_id":100031001,"comment_content":"1.1 版本及 1.2 版本的数据库升级代码：<br>final Future&lt;Database&gt; database = openDatabase(<br>      join(await getDatabasesPath(), &#39;students_database.db&#39;),<br>      onCreate: (db, version) =&gt; db.execute(<br>          &quot;CREATE TABLE students(id TEXT PRIMARY KEY, name TEXT, score INTEGER, age INTEGER)&quot;),<br>      onUpgrade: (db, oldVersion, newVersion) {<br>        &#47;&#47;dosth for migration<br>        print(&quot;old:$oldVersion,new:$newVersion&quot;);<br>        switch (oldVersion) {<br>          case 1:<br>            db.execute(&quot;ALTER TABLE students ADD age INTEGER&quot;);<br>        }<br>      },<br>      version: 2,<br>    );","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466730,"discussion_content":"对，不过switch-case是需要有break的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568183651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129075,"user_name":"ptlCoder","can_delete":false,"product_type":"c1","uid":1029656,"ip_address":"","ucode":"B7CF1C4A5970B9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/18/ede273fe.jpg","comment_is_top":false,"comment_ctime":1567039557,"is_pvip":false,"replies":[{"id":"50737","content":"数据量大的话不建议拷贝，建议直接在原始表上新增字段","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1568182529,"ip_address":"","comment_id":129075,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862006853","product_id":100031001,"comment_content":"数据库升级应该要比较两个版本的字段，防止数据丢失应该把旧的字段值拷贝到新的版本中","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465263,"discussion_content":"数据量大的话不建议拷贝，建议直接在原始表上新增字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568182529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127182,"user_name":"汪帅","can_delete":false,"product_type":"c1","uid":1025321,"ip_address":"","ucode":"87374288E390B9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/29/a85c2853.jpg","comment_is_top":false,"comment_ctime":1566582464,"is_pvip":false,"replies":[{"id":"47340","content":"需要在原生代码宿主写方法通道来实现了。具体可以参考26节的内容","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566792465,"ip_address":"","comment_id":127182,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5861549760","product_id":100031001,"comment_content":"我想请问一下关于获取系统信息怎么做啊？例如通讯录，安装的APP信息等等","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464361,"discussion_content":"需要在原生代码宿主写方法通道来实现了。具体可以参考26节的内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566792465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1406113,"avatar":"https://static001.geekbang.org/account/avatar/00/15/74/a1/613e4b09.jpg","nickname":"Mars雪","note":"","ucode":"963592C6BB6FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65310,"discussion_content":"老师 保存log到文件 看log已经创建文件了 但是在手机里没有找到 是为啥捏 需要应用申请什么权限嘛 用的是安卓手机 使用get Application DocumentsDirectory 创建的文件目录","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574994626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603793,"avatar":"","nickname":"Byoooy_xm","note":"","ucode":"BFAC1879F8CE7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6066,"discussion_content":"这个最好自己写插件来实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566651606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1025321,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/29/a85c2853.jpg","nickname":"汪帅","note":"","ucode":"87374288E390B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1603793,"avatar":"","nickname":"Byoooy_xm","note":"","ucode":"BFAC1879F8CE7D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6130,"discussion_content":"如果按照这样来说flutter最后还是无法解决跨平台的目的，完全沦为一个UI方案而已，对于团队而言自然必须iOS和Android，这样其实并没有根本上解决问题，反而增加了项目程序的复杂性降低了代码的纯净度，对于项目团队未来管理增加负担！flutter是不是依然没有到学习的时机或者说最佳时机，不否认对于iOS和Android都会的人可能恰恰是个选择，可这种选择其他方案也可以。我一直在奇怪flutter这么厉害为什么还是不温不火，乃至有些团队直接放弃了，看来还是有致命的或者说没有根本性解决问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566718402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6066,"ip_address":""},"score":6130,"extra":""}]}]},{"had_liked":false,"id":329653,"user_name":"Geek_061196","can_delete":false,"product_type":"c1","uid":2730866,"ip_address":"","ucode":"5CE29F14AF5EE2","user_header":"","comment_is_top":false,"comment_ctime":1641457402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641457402","product_id":100031001,"comment_content":"数据库升级 推荐使用 sqflite_migration插件进行版本管理","like_count":0},{"had_liked":false,"id":323724,"user_name":"七年","can_delete":false,"product_type":"c1","uid":1024585,"ip_address":"","ucode":"140ACD205EA1EF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/49/03384d50.jpg","comment_is_top":false,"comment_ctime":1638124115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638124115","product_id":100031001,"comment_content":"老师好，问个问题，壁纸类app，都是网络图片，怎么优化？如何缓存图片呢，那种缓存方案合适？","like_count":0},{"had_liked":false,"id":321768,"user_name":"快到碗里来","can_delete":false,"product_type":"c1","uid":1454751,"ip_address":"","ucode":"D3EE7B9064DD7E","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/9f/46ac03ad.jpg","comment_is_top":false,"comment_ctime":1637035740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637035740","product_id":100031001,"comment_content":"存储数据最终都是桥接到原生代码实现的吗","like_count":0},{"had_liked":false,"id":295993,"user_name":"Jinx","can_delete":false,"product_type":"c1","uid":1168860,"ip_address":"","ucode":"2473F91CCC04B5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d5/dc/94057bab.jpg","comment_is_top":false,"comment_ctime":1622695710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622695710","product_id":100031001,"comment_content":"请问需要考虑版本降级时，数据库的变化吗？","like_count":0},{"had_liked":false,"id":268004,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1608026375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608026375","product_id":100031001,"comment_content":"Flutter本身功能有限，特殊需求只能找插件实现。如果插件没有合适的，就只能用原生代码写了。前几天刚用Java写了一个Android的Widget，配合Flutter使用。","like_count":0},{"had_liked":false,"id":255679,"user_name":"Mike","can_delete":false,"product_type":"c1","uid":1905178,"ip_address":"","ucode":"2FAA7223F50B32","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/1a/a8839211.jpg","comment_is_top":false,"comment_ctime":1603412103,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603412103","product_id":100031001,"comment_content":"https:&#47;&#47;developer.android.google.cn&#47;training&#47;data-storage&#47;files&#47;external-scoped?hl=zh-cn<br><br>针对原生 Android 10 之后的存储方式变化，文章的内容不知道是否还适用？现在好多App 都得为这变化买单修改成本。","like_count":0},{"had_liked":false,"id":230580,"user_name":"考拉在草丛","can_delete":false,"product_type":"c1","uid":1151655,"ip_address":"","ucode":"E7C372268E8D5A","user_header":"https://static001.geekbang.org/account/avatar/00/11/92/a7/d158ee54.jpg","comment_is_top":false,"comment_ctime":1593422822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593422822","product_id":100031001,"comment_content":"写入之后，怎么找不到content.txt的文件具体在哪里","like_count":0},{"had_liked":false,"id":176013,"user_name":"IF-Processing","can_delete":false,"product_type":"c1","uid":1205736,"ip_address":"","ucode":"8298C3C9320D94","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/e8/d1e52dbb.jpg","comment_is_top":false,"comment_ctime":1580911202,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580911202","product_id":100031001,"comment_content":"请问，如果在程序中，需要连续访问数据库（多表）操作时，是不是把openDatabase这个操作在应用启动时直接完成比较好呢？如果一直持有database的对象，对性能是否有影响呢？或者，换个角度，每次访问时，都要打开数据库，这样操作，是否会有性能延迟呢？这种操作怎么平衡比较好？","like_count":0},{"had_liked":false,"id":162237,"user_name":"coc","can_delete":false,"product_type":"c1","uid":1202786,"ip_address":"","ucode":"448BAE4BA49CCA","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/62/f2a01c8b.jpg","comment_is_top":false,"comment_ctime":1576484385,"is_pvip":false,"replies":[{"id":"63404","content":"import &#39;package:path_provider&#47;path_provider.dart&#39;;","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1577439353,"ip_address":"","comment_id":162237,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576484385","product_id":100031001,"comment_content":"getApplicationDocumentsDirectory找不到这方法","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477985,"discussion_content":"import &amp;#39;package:path_provider/path_provider.dart&amp;#39;;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577439353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132122,"user_name":"Geek_neterM","can_delete":false,"product_type":"c1","uid":1600000,"ip_address":"","ucode":"4E9C4E52B92A17","user_header":"","comment_is_top":false,"comment_ctime":1568025951,"is_pvip":false,"replies":[{"id":"51212","content":"检查一下你的路径名是不是和例子一样哈","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1568561651,"ip_address":"","comment_id":132122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568025951","product_id":100031001,"comment_content":"老师，是不是我本地没有content.txt，一直报  no such file or directory","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466778,"discussion_content":"检查一下你的路径名是不是和例子一样哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568561651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132119,"user_name":"Geek_neterM","can_delete":false,"product_type":"c1","uid":1600000,"ip_address":"","ucode":"4E9C4E52B92A17","user_header":"","comment_is_top":false,"comment_ctime":1568025469,"is_pvip":false,"replies":[{"id":"51213","content":"不需要的","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1568561657,"ip_address":"","comment_id":132119,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568025469","product_id":100031001,"comment_content":"老师，是不是实现必须把content.txt 创建好呀。","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466776,"discussion_content":"不需要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568561657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128946,"user_name":"小水滴","can_delete":false,"product_type":"c1","uid":1411555,"ip_address":"","ucode":"559FAF5F117BB5","user_header":"https://static001.geekbang.org/account/avatar/00/15/89/e3/aa57d3b2.jpg","comment_is_top":false,"comment_ctime":1566990750,"is_pvip":false,"replies":[{"id":"50733","content":"这里有一个bug：你这里的switch-case只能执行单条更新语句，如果数据库版本差的比较多，每个版本都有更新，这样就不行了<br><br><br>另外更正一个原文中的错误：数据库的升级是在onUpgrade回调函数中完成的","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1568182448,"ip_address":"","comment_id":128946,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566990750","product_id":100031001,"comment_content":"final Future&lt;Database&gt; database_1v = openDatabase(<br>    join(await getDatabasesPath(),&#39;students_database.db&#39;),<br>    onCreate: (db,version)=&gt;db.execute(&quot;CREATE TABLE students(id TEXT PRIMARY KEY, name TEXT, score INTEGER)&quot;),<br>    version: 1<br>  );<br><br> <br>  &#47;&#47;1.1版本<br>  final Future&lt;Database&gt; database_11v = openDatabase(<br>      join(await getDatabasesPath(),&#39;students_database.db&#39;),<br>      onCreate: (db,version) {<br>        switch(version){<br>          case 1:<br>            db.execute(&quot;ALTER TABLE students ADD age INTEGER)&quot;);<br>            break;<br>          default:<br>            db.execute(&quot;CREATE TABLE students(id TEXT PRIMARY KEY, name TEXT, score INTEGER , age INTEGER&quot;);<br>        }<br><br>      },<br>      version: 11<br>  );<br><br>  &#47;&#47;1.1版本<br>  final Future&lt;Database&gt; database_12v = openDatabase(<br>      join(await getDatabasesPath(),&#39;students_database.db&#39;),<br>      onCreate: (db,version) {<br>        switch(version){<br>          case 1:<br>            db.execute(&quot;ALTER TABLE students ADD age INTEGER)&quot;);<br>            break;<br>          case 11:<br>            break;<br>          default:<br>            db.execute(&quot;CREATE TABLE students(id TEXT PRIMARY KEY, name TEXT, score INTEGER , age INTEGER&quot;);<br>        }<br><br>      },<br>      version: 12<br>  );","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465188,"discussion_content":"这里有一个bug：你这里的switch-case只能执行单条更新语句，如果数据库版本差的比较多，每个版本都有更新，这样就不行了\n\n\n另外更正一个原文中的错误：数据库的升级是在onUpgrade回调函数中完成的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568182448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128074,"user_name":"davidzhou","can_delete":false,"product_type":"c1","uid":1018904,"ip_address":"","ucode":"F4B2929F4111DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/18/7cbc34eb.jpg","comment_is_top":false,"comment_ctime":1566827868,"is_pvip":false,"replies":[{"id":"48096","content":"pub上有一些，没有特别好用的，不建议","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1567077964,"ip_address":"","comment_id":128074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566827868","product_id":100031001,"comment_content":"老师，flutter的sqlite有没有ORM的相关第三方库","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464780,"discussion_content":"pub上有一些，没有特别好用的，不建议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567077964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}