{"id":233711,"title":"03 | 预处理阶段能做什么：宏定义和条件编译","content":"<p>你好，我是Chrono。</p><p>上一次我讲了在编码阶段要有好的code style，尽量写出“人能够看懂的代码”。今天，我就继续讲讲编码后的预处理阶段，看看这个阶段我们能做哪些事情。</p><h2>预处理编程</h2><p>其实，只要写C/C++程序，就会用到预处理，只是大多数时候，你只用到了它的一点点功能。比如，在文件开头写上“#include <vector>”这样的语句，或者用“#define”定义一些常数。只是这些功能都太简单了，没有真正发挥出预处理器的本领，所以你可能几乎感觉不到它的存在。</vector></p><p>预处理只能用很少的几个指令，也没有特别严谨的“语法”，但它仍然是一套完整自洽的语言体系，使用预处理也能够实现复杂的编程，解决一些特别的问题——虽然代码可能会显得有些“丑陋”“怪异”。</p><p>那么，“预处理编程”到底能干什么呢？</p><p>你一定要记住：<strong>预处理阶段编程的操作目标是“源码”，用各种指令控制预处理器，把源码改造成另一种形式，就像是捏橡皮泥一样。</strong></p><p>把上面的这句话多读几遍，仔细揣摩体会一下，理解了之后，你再去用那些预处理指令就会有不一样的感觉了。</p><p>C++语言有近百个关键字，预处理指令只有十来个，实在是少得可怜。而且，常用的也就是#include、#define、#if，所以很容易掌握。不过，有几个小点我还是要特别说一下。</p><!-- [[[read_end]]] --><p>首先，预处理指令都以符号“#”开头，这个你应该很熟悉了。但同时你也应该意识到，虽然都在一个源文件里，但它不属于C++语言，它走的是预处理器，不受C++语法规则的约束。</p><p>所以，预处理编程也就不用太遵守C++代码的风格。一般来说，预处理指令不应该受C++代码缩进层次的影响，不管是在函数、类里，还是在if、for等语句里，永远是<strong>顶格写</strong>。</p><p>另外，单独的一个“#”也是一个预处理指令，叫“空指令”，可以当作特别的预处理空行。而“#”与后面的指令之间也可以有空格，从而实现缩进，方便排版。</p><p>下面是一个示例，#号都在行首，而且if里面的define有缩进，看起来还是比较清楚的。以后你在写预处理代码的时候，可以参考这个格式。</p><pre><code>#                              // 预处理空行\n#if __linux__                  // 预处理检查宏是否存在\n#   define HAS_LINUX    1      // 宏定义，有缩进\n#endif                         // 预处理条件语句结束\n#                              // 预处理空行\n</code></pre><p>预处理程序也有它的特殊性，暂时没有办法调试，不过可以让GCC使用“-E”选项，略过后面的编译链接，只输出预处理后的源码，比如：</p><pre><code>g++ test03.cpp -E -o a.cxx    #输出预处理后的源码\n</code></pre><p>多使用这种方式，对比一下源码前后的变化，你就可以更好地理解预处理的工作过程了。</p><p>这几个小点有些杂，不过你只要记住“<strong>#开头、顶格写</strong>”就行了。</p><h2>包含文件（#include）</h2><p>先来说说最常用的预处理指令“#include”，它的作用是“<strong>包含文件</strong>”。注意，不是“包含头文件”，而是<strong>可以包含任意的文件</strong>。</p><p>也就是说，只要你愿意，使用“#include”可以把源码、普通文本，甚至是图片、音频、视频都引进来。当然，出现无法处理的错误就是另外一回事了。</p><pre><code>#include &quot;a.out&quot;      // 完全合法的预处理包含指令，你可以试试\n</code></pre><p>可以看到，“#include”其实是非常“弱”的，不做什么检查，就是“死脑筋”把数据合并进源文件。</p><p>所以，在写头文件的时候，为了防止代码被重复包含，通常要加上“<strong>Include Guard</strong>”，也就是用“#ifndef/#define/#endif”来保护整个头文件，像下面这样：</p><pre><code>#ifndef _XXX_H_INCLUDED_\n#define _XXX_H_INCLUDED_\n\n...    // 头文件内容\n\n#endif // _XXX_H_INCLUDED_\n</code></pre><p>这个手法虽然比较“原始”，但在目前来说（C++11/14），是唯一有效的方法，而且也向下兼容C语言。所以，我建议你在所有头文件里强制使用。</p><p>除了最常用的包含头文件，你还可以利用“#include”的特点玩些“小花样”，编写一些代码片段，存进“*.inc”文件里，然后有选择地加载，用得好的话，可以实现“源码级别的抽象”。</p><p>比如说，有一个用于数值计算的大数组，里面有成百上千个数，放在文件里占了很多地方，特别“碍眼”：</p><pre><code>static uint32_t  calc_table[] = {  // 非常大的一个数组，有几十行\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba,\n    0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    ...                          \n};\n</code></pre><p>这个时候，你就可以把它单独摘出来，另存为一个“*.inc”文件，然后再用“#include”替换原来的大批数字。这样就节省了大量的空间，让代码更加整洁。</p><pre><code>static uint32_t  calc_table[] = {\n#  include &quot;calc_values.inc&quot;        // 非常大的一个数组，细节被隐藏\n};\n</code></pre><h2>宏定义（#define/#undef）</h2><p>接下来要说的是预处理编程里最重要、最核心的指令“#define”，它用来定义一个源码级别的“<strong>文本替换</strong>”，也就是我们常说的“<strong>宏定义</strong>”。</p><p>“#define”可谓“无所不能”，在预处理阶段可以无视C++语法限制，替换任何文字，定义常量/变量，实现函数功能，为类型起别名（typedef），减少重复代码……</p><p>不过，也正是因为它太灵活，如果过于随意地去使用宏来写程序，就有可能把正常的C++代码搞得“千疮百孔”，替换来替换去，都不知道真正有效的代码是什么样子了。</p><p>所以，<strong>使用宏的时候一定要谨慎，时刻记着以简化代码、清晰易懂为目标，不要“滥用”，避免导致源码混乱不堪，降低可读性。</strong></p><p>下面，我就说几个注意事项，帮你用好宏定义。</p><p>首先，因为宏的展开、替换发生在预处理阶段，不涉及函数调用、参数传递、指针寻址，没有任何运行期的效率损失，所以对于一些调用频繁的小代码片段来说，用宏来封装的效果比inline关键字要更好，因为它真的是源码级别的无条件内联。</p><p>下面有几个示例，摘自Nginx，你可以作为参考：</p><pre><code>#define ngx_tolower(c)      ((c &gt;= 'A' &amp;&amp; c &lt;= 'Z') ? (c | 0x20) : c)\n#define ngx_toupper(c)      ((c &gt;= 'a' &amp;&amp; c &lt;= 'z') ? (c &amp; ~0x20) : c)\n\n#define ngx_memzero(buf, n)       (void) memset(buf, 0, n)\n</code></pre><p>其次，你要知道，<strong>宏是没有作用域概念的，永远是全局生效</strong>。所以，对于一些用来简化代码、起临时作用的宏，最好是用完后尽快用“#undef”取消定义，避免冲突的风险。像下面这样：</p><pre><code>#define CUBE(a) (a) * (a) * (a)  // 定义一个简单的求立方的宏\n\ncout &lt;&lt; CUBE(10) &lt;&lt; endl;        // 使用宏简化代码\ncout &lt;&lt; CUBE(15) &lt;&lt; endl;        // 使用宏简化代码\n\n#undef CUBE                      // 使用完毕后立即取消定义\n</code></pre><p>另一种做法是<strong>宏定义前先检查</strong>，如果之前有定义就先undef，然后再重新定义：</p><pre><code>#ifdef AUTH_PWD                  // 检查是否已经有宏定义\n#  undef AUTH_PWD                // 取消宏定义\n#endif                           // 宏定义检查结束\n#define AUTH_PWD &quot;xxx&quot;           // 重新宏定义\n</code></pre><p>再次，你可以适当使用宏来定义代码中的常量，消除“魔术数字”“魔术字符串”（magic number）。</p><p>虽然不少人认为，定义常量更应该使用enum或者const，但我觉得宏定义毕竟用法简单，也是源码级的真正常量，而且还是从C继承下来的传统，用在头文件里还是有些优势的。</p><p>这种用法非常普遍，你可能也经常用，我就简单举两个例子吧：</p><pre><code>#define MAX_BUF_LEN    65535\n#define VERSION        &quot;1.0.18&quot;\n</code></pre><p>不过你要注意，关键是要“适当”，自己把握好分寸，不要把宏弄得“满天飞”。</p><p>除了上面说的三个，如果你开动脑筋，用好“文本替换”的功能，也能发掘出许多新颖的用法。我有一个比较实际的例子，用宏来代替直接定义名字空间（namespace）：</p><pre><code>#define BEGIN_NAMESPACE(x)  namespace x {\n#define END_NAMESPACE(x)    }\n\nBEGIN_NAMESPACE(my_own)\n\n...      // functions and classes\n\nEND_NAMESPACE(my_own)\n</code></pre><p>这里我定义了两个宏：BEGIN_NAMESPACE和END_NAMESPACE，虽然只是简单的文本替换，但它全大写的形式非常醒目，可以很容易地识别出名字空间开始和结束的位置。</p><h2>条件编译（#if/#else/#endif）</h2><p>利用“#define”定义出的各种宏，我们还可以在预处理阶段实现分支处理，通过判断宏的数值来产生不同的源码，改变源文件的形态，这就是“<strong>条件编译</strong>”。</p><p>条件编译有两个要点，一个是条件指令“#if”，另一个是后面的“判断依据”，也就是定义好的各种宏，而<strong>这个“判断依据”是条件编译里最关键的部分</strong>。</p><p>通常编译环境都会有一些预定义宏，比如CPU支持的特殊指令集、操作系统/编译器/程序库的版本、语言特性等，使用它们就可以早于运行阶段，提前在预处理阶段做出各种优化，产生出最适合当前系统的源码。</p><p>你必须知道的一个宏是“<strong>__cplusplus</strong>”，它标记了C++语言的版本号，使用它能够判断当前是C还是C++，是C++98还是C++11。你可以看下面这个例子。</p><pre><code>#ifdef __cplusplus                      // 定义了这个宏就是在用C++编译\n    extern &quot;C&quot; {                        // 函数按照C的方式去处理\n#endif\n    void a_c_function(int a);\n#ifdef __cplusplus                      // 检查是否是C++编译\n    }                                   // extern &quot;C&quot; 结束\n#endif\n\n#if __cplusplus &gt;= 201402                // 检查C++标准的版本号\n    cout &lt;&lt; &quot;c++14 or later&quot; &lt;&lt; endl;    // 201402就是C++14\n#elif __cplusplus &gt;= 201103              // 检查C++标准的版本号\n    cout &lt;&lt; &quot;c++11 or before&quot; &lt;&lt; endl;   // 201103是C++11\n#else   // __cplusplus &lt; 201103          // 199711是C++98\n#   error &quot;c++ is too old&quot;               // 太低则预处理报错\n#endif  // __cplusplus &gt;= 201402         // 预处理语句结束\n</code></pre><p>除了“__cplusplus”，C++里还有很多其他预定义的宏，像源文件信息的“<strong>FILE</strong>”“ <strong>LINE</strong>”“ <strong>DATE</strong>”，以及一些语言特性测试宏，比如“__cpp_decltype” “__cpp_decltype_auto” “__cpp_lib_make_unique”等。</p><p>不过，与优化更密切相关的底层系统信息在C++语言标准里没有定义，但编译器通常都会提供，比如GCC可以使用一条简单的命令查看：</p><pre><code>g++ -E -dM - &lt; /dev/null\n\n#define __GNUC__ 5\n#define __unix__ 1\n#define __x86_64__ 1\n#define __UINT64_MAX__ 0xffffffffffffffffUL\n...\n\n</code></pre><p>基于它们，你就可以更精细地根据具体的语言、编译器、系统特性来改变源码，有，就用新特性；没有，就采用变通实现：</p><pre><code>#if defined(__cpp_decltype_auto)        //检查是否支持decltype(auto)\n    cout &lt;&lt; &quot;decltype(auto) enable&quot; &lt;&lt; endl;\n#else\n    cout &lt;&lt; &quot;decltype(auto) disable&quot; &lt;&lt; endl;\n#endif  //__cpp_decltype_auto\n\n#if __GNUC__ &lt;= 4\n    cout &lt;&lt; &quot;gcc is too old&quot; &lt;&lt; endl;\n#else   // __GNUC__ &gt; 4\n    cout &lt;&lt; &quot;gcc is good enough&quot; &lt;&lt; endl;\n#endif  // __GNUC__ &lt;= 4\n\n#if defined(__SSE4_2__) &amp;&amp; defined(__x86_64)\n    cout &lt;&lt; &quot;we can do more optimization&quot; &lt;&lt; endl;\n#endif  // defined(__SSE4_2__) &amp;&amp; defined(__x86_64)\n\n</code></pre><p>除了这些内置宏，你也可以用其他手段自己定义更多的宏来实现条件编译。比如，Nginx就使用Shell脚本检测外部环境，生成一个包含若干宏的源码配置文件，再条件编译包含不同的头文件，实现操作系统定制化：</p><pre><code>#if (NGX_FREEBSD)\n#  include &lt;ngx_freebsd.h&gt;\n\n#elif (NGX_LINUX)\n#  include &lt;ngx_linux.h&gt;\n\n#elif (NGX_SOLARIS)\n#  include &lt;ngx_solaris.h&gt;\n\n#elif (NGX_DARWIN)\n#  include &lt;ngx_darwin.h&gt;\n#endif\n</code></pre><p>条件编译还有一个特殊的用法，那就是，使用“#if 1”“#if 0”来显式启用或者禁用大段代码，要比“/* … */”的注释方式安全得多，也清楚得多，这也是我的一个“不传之秘”。</p><pre><code>#if 0          // 0即禁用下面的代码，1则是启用\n  ...          // 任意的代码\n#endif         // 预处理结束\n\n#if 1          // 1启用代码，用来强调下面代码的必要性\n  ...          // 任意的代码\n#endif         // 预处理结束\n</code></pre><h2>小结</h2><p>今天我讲了预处理阶段，现在你是否对我们通常写的程序有了新的认识呢？它实际上是混合了预处理编程和C++编程的两种代码。</p><p>预处理编程由预处理器执行，使用#include、#define、#if等指令来实现文件包含、文本替换、条件编译，把编码阶段产生的源码改变为另外一种形式。适当使用的话，可以简化代码、优化性能，但如果是“炫技”式地过分使用，就会导致导致代码混乱，难以维护。</p><p>再简单小结一下今天的内容：</p><ol>\n<li>预处理不属于C++语言，过多的预处理语句会扰乱正常的代码，除非必要，应当少用慎用；</li>\n<li>“#include”可以包含任意文件，所以可以写一些小的代码片段，再引进程序里；</li>\n<li>头文件应该加上“Include Guard”，防止重复包含；</li>\n<li>“#define”用于宏定义，非常灵活，但滥用文本替换可能会降低代码的可读性；</li>\n<li>“条件编译”其实就是预处理编程里的分支语句，可以改变源码的形态，针对系统生成最合适的代码。</li>\n</ol><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>你认为宏的哪些用法可以用其他方式替代，哪些是不可替代的？</li>\n<li>你用过条件编译吗？分析一下它的优点和缺点。</li>\n</ol><p>欢迎你在留言区写下你的思考和答案，如果觉得对你有所帮助，也欢迎分享给你的朋友，我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/11/b8b819b1331736ebc40664cd878f7511.jpg?wh=2284*1973\" alt=\"\"></p>","comments":[{"had_liked":false,"id":219542,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":false,"comment_ctime":1590039627,"is_pvip":false,"replies":[{"id":"81077","content":"这个区别就是包含时的搜索路径不同，网上资料都有，所以就不重复了。好像“”是从当前开始搜索，&lt;&gt;是从系统路径开始搜索。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1590045744,"ip_address":"","comment_id":219542,"utype":1}],"discussion_count":1,"race_medal":0,"score":"91784352843","product_id":100051801,"comment_content":"老师，能否讲讲#include 各种头文件的细节，比如尖角和引号 在include时就是不同的。","like_count":22,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495846,"discussion_content":"这个区别就是包含时的搜索路径不同，网上资料都有，所以就不重复了。好像“”是从当前开始搜索，&amp;lt;&amp;gt;是从系统路径开始搜索。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590045744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216359,"user_name":"嵇斌","can_delete":false,"product_type":"c1","uid":1047812,"ip_address":"","ucode":"C9422C3F8A7B23","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fd/04/89cc31ab.jpg","comment_is_top":false,"comment_ctime":1589246298,"is_pvip":false,"replies":[{"id":"80059","content":"说的很好。<br><br>1.constexpr是编译期的常量，和预处理期的常量效果等价，但生命周期不同。<br><br>2.C++对同一个问题有多种解法，虽然自由，但也有选择困难症，挑出合适自己的就比较累。<br><br>3.这个也是追求性能付出的代价吧，怕的就是四处散落的#if-#else-#endif，最好把平台相关的代码集中在一起，再用#include一次包含，可以参考Nginx，它做的很好。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589247445,"ip_address":"","comment_id":216359,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74603690330","product_id":100051801,"comment_content":"1. #define PI (3.14) -&gt; constexpr float PI = 3.14 其他貌似不能完全对等。比如内链的代码块，可以用lambda，但是效率如何得看编译器的优化了。比如有些条件编译可以想办法用enable_if来替换实现。到了后面这些替换就不单单是语言方面的实践了，可能涉及软件工程、设计模式。<br>2. 条件编译自己用还好，自己一般都还清楚自己的套路。条件编译最头疼的就是对着代码定位问题，这个实现到底是哪个代码块呢？尤其是那种跨平台的和OS相关的适配层代码。再聪明的IDE和编译器也还是有点区别的。当然现在可能Clion和VS等都已经比较完善了...","like_count":18,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494788,"discussion_content":"说的很好。\n\n1.constexpr是编译期的常量，和预处理期的常量效果等价，但生命周期不同。\n\n2.C++对同一个问题有多种解法，虽然自由，但也有选择困难症，挑出合适自己的就比较累。\n\n3.这个也是追求性能付出的代价吧，怕的就是四处散落的#if-#else-#endif，最好把平台相关的代码集中在一起，再用#include一次包含，可以参考Nginx，它做的很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589247445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217437,"user_name":"test","can_delete":false,"product_type":"c1","uid":1129610,"ip_address":"","ucode":"C57A175CBC6547","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","comment_is_top":false,"comment_ctime":1589505703,"is_pvip":false,"replies":[{"id":"80459","content":"可以看一下tobie榜单，C++还在前五，很多框架、系统都是用C++写的，学习它可以更好地理解系统架构。<br><br>当然最后你不一定在工作中用到C++，但它作为一个基础，会受用终身的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589509987,"ip_address":"","comment_id":217437,"utype":1}],"discussion_count":3,"race_medal":0,"score":"57424080551","product_id":100051801,"comment_content":"老师 rust很安全，现在大公司很多项目都用rust改写了，cpp还需要学吗，是不是直接学rust呢","like_count":14,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495147,"discussion_content":"可以看一下tobie榜单，C++还在前五，很多框架、系统都是用C++写的，学习它可以更好地理解系统架构。\n\n当然最后你不一定在工作中用到C++，但它作为一个基础，会受用终身的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589509987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3100089,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/4d/b9/7e4659c5.jpg","nickname":"runzeUnchained","note":"","ucode":"63A86E52AF05DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583867,"discussion_content":"取代不了c++","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660453094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1742377,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/96/29/6797c439.jpg","nickname":"墨沫枫","note":"","ucode":"A65CD136130667","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578729,"discussion_content":"Rust安全，但是前期学习成本太高了，可能招不到人。而且，unsafe块的代码可能还是需要开发有其他语言的经验。比如winapi库就是Rust对win32api的封装。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656989074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230124,"user_name":"怪兽","can_delete":false,"product_type":"c1","uid":1324007,"ip_address":"","ucode":"3342C55CB83B08","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/e7/145be2f9.jpg","comment_is_top":false,"comment_ctime":1593269613,"is_pvip":false,"replies":[{"id":"84959","content":"这是开源库的通常做法，把调用的接口用宏或者函数统一做一个自己的封装，这样写代码的时候风格更一致。<br><br>在设计模式里这个叫包装外观wrapper facade。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593307371,"ip_address":"","comment_id":230124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31658040685","product_id":100051801,"comment_content":"老师，我在看rapidjson源码时，看到如下代码，不知道有什么作用，为什么不直接使用assert？<br>#ifndef RAPIDJSON_ASSERT<br>#define RAPIDJSON_ASSERT(x) assert(x)<br>#endif &#47;&#47; RAPIDJSON_ASSERT","like_count":8,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499771,"discussion_content":"这是开源库的通常做法，把调用的接口用宏或者函数统一做一个自己的封装，这样写代码的时候风格更一致。\n\n在设计模式里这个叫包装外观wrapper facade。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593307371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216362,"user_name":"Wynter","can_delete":false,"product_type":"c1","uid":1298909,"ip_address":"","ucode":"230E04AABF0F1F","user_header":"https://static001.geekbang.org/account/avatar/00/13/d1/dd/295e5d2b.jpg","comment_is_top":false,"comment_ctime":1589246618,"is_pvip":false,"replies":[{"id":"80058","content":"如果有好的IDE，它可以帮你找出宏的定义，加快理解。<br><br>还有一种办法，就是用课程里的“gcc -E”，让预处理器给你展开宏。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589247217,"ip_address":"","comment_id":216362,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27359050394","product_id":100051801,"comment_content":"老师，我最近在阅读一个事件驱动框架代码libev，源码里就充斥着大量的宏，阅读起来很是费力。所以请教老师，阅读这种宏比较多的源码应该怎么办？","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494790,"discussion_content":"如果有好的IDE，它可以帮你找出宏的定义，加快理解。\n\n还有一种办法，就是用课程里的“gcc -E”，让预处理器给你展开宏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589247217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001222,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/06/895a122b.jpg","nickname":"ghost","note":"","ucode":"1D5A11D65B82F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264575,"discussion_content":"感觉越是底层，宏似乎越多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589334465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1527051,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4d/0b/ac1f7fec.jpg","nickname":"章大蒜📍","note":"","ucode":"B109218608DAFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001222,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/06/895a122b.jpg","nickname":"ghost","note":"","ucode":"1D5A11D65B82F9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271861,"discussion_content":"因为底层帮你屏蔽了诸如c++版本、系统等很多方面的差异","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590206622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":264575,"ip_address":""},"score":271861,"extra":""}]}]},{"had_liked":false,"id":216562,"user_name":"Tedeer","can_delete":false,"product_type":"c1","uid":1693287,"ip_address":"","ucode":"7DD9837A38378D","user_header":"https://static001.geekbang.org/account/avatar/00/19/d6/67/5e0cac1b.jpg","comment_is_top":false,"comment_ctime":1589284435,"is_pvip":false,"replies":[{"id":"80171","content":"预处理就是面向源码编程，调整源码的形态，掌握了这一点就可以让代码更干净整齐。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589331807,"ip_address":"","comment_id":216562,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23064120915","product_id":100051801,"comment_content":"在读到这段话时：另存为一个“*.inc”文件，然后再用“#include”替换原来的大批数字。<br>想起以前开发过程中，曾经在头文件中定义了一个240*160的图片字节数组，现在看来有点蠢，又涨知识了。条件编译在Android系统源码见得比较多，区分不同平台之间代码块的实现。","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494864,"discussion_content":"预处理就是面向源码编程，调整源码的形态，掌握了这一点就可以让代码更干净整齐。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589331807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001222,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/06/895a122b.jpg","nickname":"ghost","note":"","ucode":"1D5A11D65B82F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264572,"discussion_content":"单片机的字库、键盘扫描等，好像就用的是这种方式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589334305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216343,"user_name":"Carlos","can_delete":false,"product_type":"c1","uid":1898075,"ip_address":"","ucode":"F1B9951E9845D2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/5b/8e321b62.jpg","comment_is_top":false,"comment_ctime":1589244951,"is_pvip":false,"replies":[{"id":"80057","content":"<br>1.对，在C++里大部分函数宏都可以用inline函数代替。<br><br>2.条件编译多用在跨平台和高级优化方面，不用当然也可以，但要追求性能极致就必须考虑。<br><br>3.cmake不了解，其实预处理就是文本替换，你要是愿意，用shell、Python也可以处理C++源码来实现。<br><br>4.extern &quot;C&quot; { }是处理编译器的链接符号，保持与C兼容，通常是为了导出外部接口使用的。暂时不了解也没关系，以后用到的时候再学也来得及。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589246888,"ip_address":"","comment_id":216343,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23064081431","product_id":100051801,"comment_content":"先回答老师的问题🤔<br>1. 就中间那个算立方体的例子来说, 我觉得这个用法可以替换成一个 inline function. <br>储存常数可以直接用 const, 为了简化可以用 reference<br>2. 说实话, 我没用过条件编译 😂, 今天头一次学到, 但是我觉得这肯定会让代码变得更加复杂, 冒出很多意料之外的 bugs. <br><br>再提两个自己的小问题:<br>1. 使用宏的条件编译是不是可以用 Cmake 来做呢? (虽然我几乎不会用 Cmake 但是我预感它有这个功能)<br>2. 上文里面的 extern &quot;C&quot; { 部分我有些没看懂, 这个是预处理语言吗? 希望老师帮助理解. ","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494785,"discussion_content":"\n1.对，在C++里大部分函数宏都可以用inline函数代替。\n\n2.条件编译多用在跨平台和高级优化方面，不用当然也可以，但要追求性能极致就必须考虑。\n\n3.cmake不了解，其实预处理就是文本替换，你要是愿意，用shell、Python也可以处理C++源码来实现。\n\n4.extern &amp;quot;C&amp;quot; { }是处理编译器的链接符号，保持与C兼容，通常是为了导出外部接口使用的。暂时不了解也没关系，以后用到的时候再学也来得及。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589246888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286781,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a2/7d/674f97cc.jpg","nickname":"EastWind","note":"","ucode":"24AD259AFB6A9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545442,"discussion_content":"extern &#34;C&#34; {} 的本质原因是C不支持函数重载。混合编程链接时候不兼容，会报找不到函数的错误。C++因为支持重载，编译会将所有函数重命名。C调用C++函数实际是调用重命名后的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641959112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055296,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/40/f10493ef.jpg","nickname":"中山浪子","note":"","ucode":"25D0F8462473D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291611,"discussion_content":"告诉编译器此处用C编译器方式编译，所以name magling时候也会不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594888000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001222,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/06/895a122b.jpg","nickname":"ghost","note":"","ucode":"1D5A11D65B82F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264570,"discussion_content":"extern &#34;C&#34; {} 主要是导出 C 源码中的接口，供 C++ 工程调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589334206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218504,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1589811067,"is_pvip":false,"replies":[{"id":"80783","content":"说的很好。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589844953,"ip_address":"","comment_id":218504,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14474712955","product_id":100051801,"comment_content":"函数式的方法可以用 inline function， 内联inline类似于宏，使用inline时，代码在执行前，编译器先将调用的inline函数替换城那个函数的执行代码。<br>#if endif 这个是复只能制用宏来做百的 其他方式都不行另外，度编译命令行传问递变量值也只能通过宏来做。<br>之前写过嵌入式程序，条件编译见得比较多，程序在不同系统下都需要运行时就要条件编译，条件编译百为了提高程序的可移植性，增加程序的灵活性。还有老师提到的“不传之秘”#if 1 #end if也是条件编译，这个注释大段代码调试特别有用。","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495488,"discussion_content":"说的很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589844953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609114,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8d/9a/61db513f.jpg","nickname":"赵源😈","note":"","ucode":"3D438CC59126F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532188,"discussion_content":"可是inline只是建议，不是强制吧。。。。具体怎么做还得看编译器怎么做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216342,"user_name":"廖熊猫","can_delete":false,"product_type":"c1","uid":1141444,"ip_address":"","ucode":"8E8C475CD11FBC","user_header":"https://static001.geekbang.org/account/avatar/00/11/6a/c4/8679ca8a.jpg","comment_is_top":false,"comment_ctime":1589244891,"is_pvip":false,"replies":[{"id":"80056","content":"<br>1.条件编译加__cplusplus经常用在与C配合工作方面，算是个惯用语了。<br><br>2.C语言对const的支持比较弱，在C++中好很多。<br><br>3.宏在减少重复代码方面有时候还是挺有用的，因为模板和泛型的语法检查很严格，要写好还是要费些力气的，如果是简单的工作用宏就会轻松一些。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589246665,"ip_address":"","comment_id":216342,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14474146779","product_id":100051801,"comment_content":"我的一些使用经历：<br>1. 使用#ifdef __cplusplus这个在用Emscripten编译wasm的时候会跟extern &quot;c&quot; { } 这个一起使用，防止编译后名字被修改掉。<br>2. 在C语言里直接使用const定义的长度在全局定义数组会报错，但是可以用预处理器来创建。<br>3. 快速定义一些内容相似的struct还有相关的操作函数，不过在C++里面应该可以使用template来解决这个问题了吧","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494784,"discussion_content":"\n1.条件编译加__cplusplus经常用在与C配合工作方面，算是个惯用语了。\n\n2.C语言对const的支持比较弱，在C++中好很多。\n\n3.宏在减少重复代码方面有时候还是挺有用的，因为模板和泛型的语法检查很严格，要写好还是要费些力气的，如果是简单的工作用宏就会轻松一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589246665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280119,"user_name":"企鹅君需要充电","can_delete":false,"product_type":"c1","uid":1858704,"ip_address":"","ucode":"EAD2F1C4A73363","user_header":"","comment_is_top":false,"comment_ctime":1614083666,"is_pvip":false,"replies":[{"id":"101747","content":"说的很对。<br><br>C++今后要引入import关键字和模块，以后#include等预处理指令可能就会越来越少了，不过有的时候还是很有用的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1614128831,"ip_address":"","comment_id":280119,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10204018258","product_id":100051801,"comment_content":"1、#include基本不会被替代，但为了避免#define滥用，少用它设置全局变量，const&#47;static&#47;enum处理常量声明还能自带额外信息（例如作用域）<br>2、debug期间用条件编译方便，但有时候会忽略另一种情况的判断测试，而且写死忘了改回来就gg了","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515988,"discussion_content":"说的很对。\n\nC++今后要引入import关键字和模块，以后#include等预处理指令可能就会越来越少了，不过有的时候还是很有用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614128831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219547,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":false,"comment_ctime":1590039964,"is_pvip":false,"replies":[{"id":"81080","content":"h里一般只是声明，cpp里是实现，在编译阶段会有个链接动作，把这些都链接起来。<br><br>具体的细节比较复杂，我也没细研究过，可以网上找点资料看看，不过我觉得不了解也没关系。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1590045891,"ip_address":"","comment_id":219547,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10179974556","product_id":100051801,"comment_content":"另一个有关include头文件的问题。比如说我看很多例子都是 在单独一个h文件和一个cpp文件中定义了一个类，h里写了类的声明，类的具体实现在cpp里面。其他cpp文件里想引入这个类的时候，就直接include了h文件，并没include cpp文件，按照咱们这一讲 只有声明被预处理时放到实际执行的cpp代码里了，类的实现cpp是怎么引入进来的呢？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495848,"discussion_content":"h里一般只是声明，cpp里是实现，在编译阶段会有个链接动作，把这些都链接起来。\n\n具体的细节比较复杂，我也没细研究过，可以网上找点资料看看，不过我觉得不了解也没关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590045891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217384,"user_name":"Soda","can_delete":false,"product_type":"c1","uid":1800591,"ip_address":"","ucode":"C84C4E6CF4BED8","user_header":"https://static001.geekbang.org/account/avatar/00/1b/79/8f/7b0f85d1.jpg","comment_is_top":false,"comment_ctime":1589473794,"is_pvip":false,"replies":[{"id":"80409","content":"说的很好。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589492935,"ip_address":"","comment_id":217384,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10179408386","product_id":100051801,"comment_content":"第一个问题，能想到的就是定义常量用const代替，因为编译器会替我们检查类型。<br>第二个问题，用过条件编译，很适合在开发嵌入式程序的时候，做一些跨平台的处理😁","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495129,"discussion_content":"说的很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589492935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217028,"user_name":"jxon-H","can_delete":false,"product_type":"c1","uid":1897700,"ip_address":"","ucode":"D491FAB6A07A4A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/e4/e7471344.jpg","comment_is_top":false,"comment_ctime":1589388970,"is_pvip":false,"replies":[{"id":"80263","content":"预处理是C++的重要组成部分，很强大也很有意思，但也很难用好。<br><br>C++迷人之处就在这里，很多特性可以深挖，内涵丰富，但小心不要过度沉迷，一定要记得代码是写给别人看的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589417903,"ip_address":"","comment_id":217028,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10179323562","product_id":100051801,"comment_content":"这节课真是干货满满，我从来都不知道预处理阶段包含这么多知识，我还活在那个以为 # 就是只是和 include 搭配的世界。<br>预处理阶段内容是那么的充实丰满……<br>我满篇文稿的划线标笔记，但是回个头认真思考，这些丰富的经验总结，岂是几根线就可以消化的吗？<br>脑子已经处于滞涨状态了……<br>我和C++的隔阂太深了……不仅像是深深的代沟，还貌似是有点难以逾越的鸿沟。<br>但愿我能爬出来！","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495012,"discussion_content":"预处理是C++的重要组成部分，很强大也很有意思，但也很难用好。\n\nC++迷人之处就在这里，很多特性可以深挖，内涵丰富，但小心不要过度沉迷，一定要记得代码是写给别人看的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589417903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897700,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f4/e4/e7471344.jpg","nickname":"jxon-H","note":"","ucode":"D491FAB6A07A4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265634,"discussion_content":"谢谢罗老师点拨。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589422242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216570,"user_name":"搞怪者😘 😒 😏 👿","can_delete":false,"product_type":"c1","uid":1300678,"ip_address":"","ucode":"40DFF5D3E3B24C","user_header":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","comment_is_top":false,"comment_ctime":1589286292,"is_pvip":false,"replies":[{"id":"80170","content":"cppreference网站上可以找到标准里定义的宏，用课程里的gcc命令可以看编译器定义的宏。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589331737,"ip_address":"","comment_id":216570,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10179220884","product_id":100051801,"comment_content":"老师，这些预定义的宏在哪里可以查找","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494866,"discussion_content":"cppreference网站上可以找到标准里定义的宏，用课程里的gcc命令可以看编译器定义的宏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589331737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1300678,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","nickname":"搞怪者😘 😒 😏 👿","note":"","ucode":"40DFF5D3E3B24C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264521,"discussion_content":"好的👌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589331852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313458,"user_name":"LianZ","can_delete":false,"product_type":"c1","uid":2699759,"ip_address":"","ucode":"A9C152FBEA28C4","user_header":"https://static001.geekbang.org/account/avatar/00/29/31/ef/d3c059b0.jpg","comment_is_top":false,"comment_ctime":1632450942,"is_pvip":false,"replies":[{"id":"113533","content":"感谢补充。<br><br>#pragma用法与具体的编译器相关，不是太通用，<br><br>#error 是直接输出错误信息，太简单，就不介绍了。<br><br>而##是连接token，在预处理元编程里比较常用，一般预处理时用的也不是很多。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1632469718,"ip_address":"","comment_id":313458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5927418238","product_id":100051801,"comment_content":"感觉少了些 #pragma #error  还有连接##符的使用。。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527359,"discussion_content":"感谢补充。\n\n#pragma用法与具体的编译器相关，不是太通用，\n\n#error 是直接输出错误信息，太简单，就不介绍了。\n\n而##是连接token，在预处理元编程里比较常用，一般预处理时用的也不是很多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632469718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268312,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","comment_is_top":false,"comment_ctime":1608131653,"is_pvip":true,"replies":[{"id":"97441","content":"说的很对，被包含文件里应该是个数字列表，而不能是数组形式，否则就会发生错了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1608181283,"ip_address":"","comment_id":268312,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5903098949","product_id":100051801,"comment_content":"calc_table那个例子有问题，inc里应该是1，2，3，4，这种形式，如果在数组里#iinclude。<br>示例：<br>header.inc<br>1,2,3,4,<br>5,6,7,8,<br>9,10,11,12,<br><br>example.cpp<br><br>#include &lt;iostream&gt;<br><br>int main()<br>{<br><br>static uint32_t  calc_table[] = {<br>#  include &quot;header.inc&quot;<br>};<br>    return 0;<br>}<br> <br>或者在inc里定义数组，cpp里直接包含","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511908,"discussion_content":"说的很对，被包含文件里应该是个数字列表，而不能是数组形式，否则就会发生错了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608181283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238020,"user_name":"张飞Dear","can_delete":false,"product_type":"c1","uid":2004589,"ip_address":"","ucode":"EECEDF12DC7EB9","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/6d/85723167.jpg","comment_is_top":false,"comment_ctime":1596028742,"is_pvip":false,"replies":[{"id":"87960","content":"说的很好，宏是C&#47;C++很重要的特性，用好了能够让代码更简洁灵活。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596070248,"ip_address":"","comment_id":238020,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890996038","product_id":100051801,"comment_content":"1，你认为宏的哪些用法可以用其他方式替代，哪些是不可替代的？<br>定义一些单个文件使用的常量可以用 const替代。那种多个文件引用的可以使用宏来代替，还有用宏定义来处理一些小函数会比内联来的好用。<br>2，你用过条件编译吗？分析一下它的优点和缺点。<br>用过条件编译和有条件编译的库，使用条件编译可以在release 与debug 版本中 输出不同的信息。还有一些库 通过不同的 宏  来链接其中不同的代码，还有就是会生成不同的库。 缺点就是有时候会花里胡哨，只要用明白了就好。","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502619,"discussion_content":"说的很好，宏是C/C++很重要的特性，用好了能够让代码更简洁灵活。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596070248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226273,"user_name":"熊出没","can_delete":false,"product_type":"c1","uid":1145377,"ip_address":"","ucode":"6E39230CC87808","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/21/a33cc944.jpg","comment_is_top":false,"comment_ctime":1592019808,"is_pvip":true,"replies":[{"id":"83326","content":"undef的作用就是取消之前的宏定义，这个也不会有提示，目的就是这个，为了避免重复定义。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592023289,"ip_address":"","comment_id":226273,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886987104","product_id":100051801,"comment_content":"【另一种做法是宏定义前先检查，如果之前有定义就先 undef】<br>对这里有个问题，先undef是否会导致已有定义被取消，但却获得不了提示？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498173,"discussion_content":"undef的作用就是取消之前的宏定义，这个也不会有提示，目的就是这个，为了避免重复定义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592023289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217715,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1589595482,"is_pvip":false,"replies":[{"id":"80515","content":"条件编译通常是用来处理系统、平台差异的，如果要像你说的那么使用确实是有点过分。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589601178,"ip_address":"","comment_id":217715,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884562778","product_id":100051801,"comment_content":"学习c++有些时间了，对c++几个版本是基于时间命名才了解到，有必要了解这些版本的大致区别。<br>1. 宏不可替代的地方：基于它们早于运行阶段，例如一些操作是需要在运行前完成的；只读变量可以用const，类型别名typedef。<br>2. 特别不喜欢有人在类的成员函数里用条件编译来作为代码的分支路径使用，给人感觉特别面向过程，也不理解为什么不考虑使用抽象基类分别实现子类或者实现更小颗粒的函数接口。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495232,"discussion_content":"条件编译通常是用来处理系统、平台差异的，如果要像你说的那么使用确实是有点过分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589601178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217336,"user_name":"锦鲤","can_delete":false,"product_type":"c1","uid":1343717,"ip_address":"","ucode":"B9F1495E39F00A","user_header":"https://static001.geekbang.org/account/avatar/00/14/80/e5/251d89b5.jpg","comment_is_top":false,"comment_ctime":1589466197,"is_pvip":false,"replies":[{"id":"80412","content":"<br>1.C++开源项目很多都比较大，练手级别的少，我没有太关注，可能要你自己去GitHub上找一下了。<br>可以先参考课程GitHub的readme，里面有很多链接。<br><br>2.C++经典书比较少，Linux+C++就更少了，我没有看到特别好的。<br>其实你应该分开来看，学C++，再学Linux，而不是Linux+C++。<br>后面我会有个经典书推荐，学好C++，再来一本《UNIX环境高级编程》就差不多了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589493394,"ip_address":"","comment_id":217336,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5884433493","product_id":100051801,"comment_content":"想找些课程练手写C++代码，最好是开源的，有答案的那种，罗老师有推荐吗？<br>Linux下C++编程方面的书，能否先推荐几本？中级水平的那种","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495112,"discussion_content":"\n1.C++开源项目很多都比较大，练手级别的少，我没有太关注，可能要你自己去GitHub上找一下了。\n可以先参考课程GitHub的readme，里面有很多链接。\n\n2.C++经典书比较少，Linux+C++就更少了，我没有看到特别好的。\n其实你应该分开来看，学C++，再学Linux，而不是Linux+C++。\n后面我会有个经典书推荐，学好C++，再来一本《UNIX环境高级编程》就差不多了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589493394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1343717,"avatar":"https://static001.geekbang.org/account/avatar/00/14/80/e5/251d89b5.jpg","nickname":"锦鲤","note":"","ucode":"B9F1495E39F00A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266372,"discussion_content":"是这样的，是要解决项目中的实际问题，所以想直接看Linux下C++方面的编程书籍。要实现监听网卡的网络流量包，并做解码处理后生成结构体供上层应用调用，是金融行业的应用。针对这个案例，有没有相关的课程或者书籍可以推荐的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589506579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217281,"user_name":"Geek_bc5665","can_delete":false,"product_type":"c1","uid":1911734,"ip_address":"","ucode":"A7D378323A80D1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJ3JolohrbOzj79fviaD1O3ibMKhFFhiaH2DqgwWy0IK6PpZ3Gjgib8xiaJcypVpXAnNKvRuX7lg5vibEg/132","comment_is_top":false,"comment_ctime":1589453749,"is_pvip":false,"replies":[{"id":"80322","content":"可以，但不具有普适性，一般不推荐使用。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589461073,"ip_address":"","comment_id":217281,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5884421045","product_id":100051801,"comment_content":"pragram once 不是也可以防止重复包含？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495099,"discussion_content":"可以，但不具有普适性，一般不推荐使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589461073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112913,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/51/870a6fcb.jpg","nickname":"Trust me ҉҉҉҉҉҉҉❀","note":"","ucode":"B576CBDE262A40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268157,"discussion_content":"这个应该是cpp17的新特性  并不是一些奇怪的用法  只不过目前用的机会并不是很多\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589729429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216801,"user_name":"yelin","can_delete":false,"product_type":"c1","uid":1416262,"ip_address":"","ucode":"4341B2F4C513FE","user_header":"https://static001.geekbang.org/account/avatar/00/15/9c/46/a2c1a99f.jpg","comment_is_top":false,"comment_ctime":1589345940,"is_pvip":false,"replies":[{"id":"80202","content":"这些都是写代码看代码多了总结出来的，希望能够帮助你少走些弯路。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589349271,"ip_address":"","comment_id":216801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884313236","product_id":100051801,"comment_content":"老师真的经验丰富啊，赞","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494949,"discussion_content":"这些都是写代码看代码多了总结出来的，希望能够帮助你少走些弯路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589349271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216633,"user_name":"九三","can_delete":false,"product_type":"c1","uid":1454691,"ip_address":"","ucode":"7D093ED7273CBE","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/63/fa24f92e.jpg","comment_is_top":false,"comment_ctime":1589299032,"is_pvip":false,"replies":[{"id":"80164","content":"后缀名随意起，当然a.txt也可以。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589331317,"ip_address":"","comment_id":216633,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884266328","product_id":100051801,"comment_content":"g++ test03.cpp -E -o a.cxx <br>老师这个输出预处理的文件， a.cxx ,是特定的吗，我使用a.txt 也可以吗","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494890,"discussion_content":"后缀名随意起，当然a.txt也可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589331317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216602,"user_name":"hb","can_delete":false,"product_type":"c1","uid":1139064,"ip_address":"","ucode":"788700127D3635","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/78/84e3433a.jpg","comment_is_top":false,"comment_ctime":1589293943,"is_pvip":false,"replies":[{"id":"80168","content":"它说的没错，应该多用const，少用宏，但不是说完全禁止使用。<br><br>适当使用宏也可以提高代码的可读性和运行效率，多在写代码的过程中实践，就能够找到最合适你自己的“度”。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589331542,"ip_address":"","comment_id":216602,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884261239","product_id":100051801,"comment_content":"Effective Objective-c 2.0 第4条： 多用类型常量， 少用#define预处理指令，请问下老师这个是否有什么讲究，还是说code style？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494878,"discussion_content":"它说的没错，应该多用const，少用宏，但不是说完全禁止使用。\n\n适当使用宏也可以提高代码的可读性和运行效率，多在写代码的过程中实践，就能够找到最合适你自己的“度”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589331542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216299,"user_name":"wuwei","can_delete":false,"product_type":"c1","uid":1689329,"ip_address":"","ucode":"DA60894F10C71F","user_header":"https://static001.geekbang.org/account/avatar/00/19/c6/f1/aac154fe.jpg","comment_is_top":false,"comment_ctime":1589235992,"is_pvip":false,"replies":[{"id":"80043","content":"嗯，预处理这块是学C++的一个难点，因为跟C++其实没多大关系，但确实又很有用。<br><br>把它放在前面是因为它与C++程序的生命周期密切相关，了解它才能更好里理解C++，也能够帮你看懂别人写的C++代码。<br><br>如果觉得难，不好学也没关系，只要先有个大概了解就好，后面也会尽量少用宏，以后在实践中再逐渐应用体会。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589245436,"ip_address":"","comment_id":216299,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5884203288","product_id":100051801,"comment_content":"说实话，这节课对于cpp小白来讲太抽象了，很多专业术语是没有接触过的，应该往后挪一挪的","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494759,"discussion_content":"嗯，预处理这块是学C++的一个难点，因为跟C++其实没多大关系，但确实又很有用。\n\n把它放在前面是因为它与C++程序的生命周期密切相关，了解它才能更好里理解C++，也能够帮你看懂别人写的C++代码。\n\n如果觉得难，不好学也没关系，只要先有个大概了解就好，后面也会尽量少用宏，以后在实践中再逐渐应用体会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589245436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665239,"avatar":"https://static001.geekbang.org/account/avatar/00/19/68/d7/499f23ec.jpg","nickname":"MXQ","note":"","ucode":"7104D0B5D025AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264139,"discussion_content":"实际上在一些经典的c++书籍中甚至没有预编译这一部分，但这个又的确很重要，我在看一些源码时真的是一堆预编译语句。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589290824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216297,"user_name":"xianhai","can_delete":false,"product_type":"c1","uid":1073505,"ip_address":"","ucode":"906578663CEB3E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/61/677e8f92.jpg","comment_is_top":false,"comment_ctime":1589229586,"is_pvip":false,"replies":[{"id":"80044","content":"学习C++还是要多练习，搭好实验环境，用g++编译一下示例代码，再试着改改，多动手来加深理解。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589245496,"ip_address":"","comment_id":216297,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884196882","product_id":100051801,"comment_content":"从老师的http课程追过来了，希望通过老师的课程能入门c++","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494758,"discussion_content":"学习C++还是要多练习，搭好实验环境，用g++编译一下示例代码，再试着改改，多动手来加深理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589245496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327484,"user_name":"EastWind","can_delete":false,"product_type":"c1","uid":1286781,"ip_address":"","ucode":"24AD259AFB6A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/a2/7d/674f97cc.jpg","comment_is_top":false,"comment_ctime":1640144518,"is_pvip":false,"replies":[{"id":"119243","content":"很好的实践经验，great。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1640214421,"ip_address":"","comment_id":327484,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640144518","product_id":100051801,"comment_content":"建议与工程本身有关的常量用#define，与业务应用有关的常量用const。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540928,"discussion_content":"很好的实践经验，great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640214422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324166,"user_name":"钺","can_delete":false,"product_type":"c1","uid":1334730,"ip_address":"","ucode":"6706B3B8135E8C","user_header":"https://static001.geekbang.org/account/avatar/00/14/5d/ca/683e460f.jpg","comment_is_top":false,"comment_ctime":1638324815,"is_pvip":false,"replies":[{"id":"117705","content":"没有什么太大的区别，#ifdef更强调是否宏已经被定义，而#if 的表达式更灵活。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1638407300,"ip_address":"","comment_id":324166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638324815","product_id":100051801,"comment_content":"#if defined(__x86_64)和#if __x86_64<br>有啥区别吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535299,"discussion_content":"没有什么太大的区别，#ifdef更强调是否宏已经被定义，而#if 的表达式更灵活。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638407300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319061,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":2763179,"ip_address":"","ucode":"3588850B3370C8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","comment_is_top":false,"comment_ctime":1635560108,"is_pvip":true,"replies":[{"id":"115653","content":"many thanks.","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1635596577,"ip_address":"","comment_id":319061,"utype":1}],"discussion_count":1,"race_medal":5,"score":"1635560108","product_id":100051801,"comment_content":"被老师的敬业和分享精神深深感动，我学习过十几门课程。老师的回复率和回复详细程度绝对是最好的。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529481,"discussion_content":"many thanks.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635596577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313202,"user_name":"于小咸","can_delete":false,"product_type":"c1","uid":1640946,"ip_address":"","ucode":"833D5E92016430","user_header":"https://static001.geekbang.org/account/avatar/00/19/09/f2/6ed195f4.jpg","comment_is_top":false,"comment_ctime":1632309265,"is_pvip":false,"replies":[{"id":"113476","content":"说的很好，不过使用编译期的属性也可以让函数强制内联。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1632359072,"ip_address":"","comment_id":313202,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632309265","product_id":100051801,"comment_content":"常量定义是可以使用constexpr替代的，条件编译无法替代。至于函数如果不太关注性能的话，可以用函数定义替代，但现代编译器并不保证 inline 一定为内联函数，如果追求极致性能的话还是得使用宏定义。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527274,"discussion_content":"说的很好，不过使用编译期的属性也可以让函数强制内联。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632359072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298448,"user_name":"一个坏人","can_delete":false,"product_type":"c1","uid":1032305,"ip_address":"","ucode":"4AF05BF008095A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","comment_is_top":false,"comment_ctime":1624111229,"is_pvip":true,"replies":[{"id":"108320","content":"凡事过犹不及，std.hpp应该包含最常用的一些头，而不是大而全。<br><br>像微软的vc，以前就有一个stdafx.h（大概这个名字），包含了常用的头可以加快编译速度。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1624237623,"ip_address":"","comment_id":298448,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624111229","product_id":100051801,"comment_content":"常用的头文件，一股脑的全部写在common&#47;std.hpp 中，然后每个文件中都引用, 但改文件不需要的头文件也引入，不会有其他副作用？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522141,"discussion_content":"凡事过犹不及，std.hpp应该包含最常用的一些头，而不是大而全。\n\n像微软的vc，以前就有一个stdafx.h（大概这个名字），包含了常用的头可以加快编译速度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624237623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268323,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","comment_is_top":false,"comment_ctime":1608133223,"is_pvip":true,"replies":[{"id":"97429","content":"条件编译就是根据预处理条件来生成源码，用#error当然可以，用cout等任何语句也是可以的，我这里就是为了根据C++的版本，方便地输出一些提示文字。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1608168278,"ip_address":"","comment_id":268323,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1608133223","product_id":100051801,"comment_content":"__cplusplus那个例子里#if __cplusplus &gt;= 201402                &#47;&#47; 检查C++标准的版本号<br>后面调用cout会报错的吧，没见过#if xxx，cout的，确定可以这么用吗？一般出问题了，不是#error就编译报错了吗?","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511914,"discussion_content":"条件编译就是根据预处理条件来生成源码，用#error当然可以，用cout等任何语句也是可以的，我这里就是为了根据C++的版本，方便地输出一些提示文字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608168278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047043,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","nickname":"风清扬","note":"","ucode":"651F1390B64953","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335939,"discussion_content":"那就奇怪了，写demo都是错的，没见过这么个用法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608390729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257864,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","comment_is_top":false,"comment_ctime":1604160505,"is_pvip":true,"replies":[{"id":"93876","content":"这个命令是我很久以前搜集资料时找到的，具体是为什么也忘了，我觉得这个属于底层的细节，对实际工作没太大意义，也就没再深究，抱歉帮不了你。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1604188294,"ip_address":"","comment_id":257864,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604160505","product_id":100051801,"comment_content":"g++ -E -dM - &lt; &#47;dev&#47;null<br>这个命令写法有点怪，为啥把&#47;dev&#47;null作为输入传给g++命令?网上也没查到相关资料，老师有空帮忙解答下。<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508480,"discussion_content":"这个命令是我很久以前搜集资料时找到的，具体是为什么也忘了，我觉得这个属于底层的细节，对实际工作没太大意义，也就没再深究，抱歉帮不了你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604188294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245290,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1598885445,"is_pvip":true,"replies":[{"id":"90214","content":"nice。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1598921753,"ip_address":"","comment_id":245290,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598885445","product_id":100051801,"comment_content":"你认为宏的哪些用法可以用其他方式替代，哪些是不可替代的？<br>1、定义变量、函数；包含文件；<br>2、Include Guard<br><br><br>你用过条件编译吗？分析一下它的优点和缺点。<br>1、优点：操作简单，将复杂性抽离出业务代码<br>2、缺点：判断条件相对简单，而且不容易维护，特别是#if #else过多，不同层级","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504833,"discussion_content":"nice。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598921753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220645,"user_name":"Eason Tai","can_delete":false,"product_type":"c1","uid":1200676,"ip_address":"","ucode":"4707577CC9C9E9","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/24/bd63c4de.jpg","comment_is_top":false,"comment_ctime":1590302858,"is_pvip":false,"replies":[{"id":"81425","content":"这个好像是笔误，写错了，汗啊。<br><br>先领会条件编译的用法吧。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1590328176,"ip_address":"","comment_id":220645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590302858","product_id":100051801,"comment_content":"#elif __cplusplus &gt;= 201103              &#47;&#47; 检查C++标准的版本号    <br>    cout &lt;&lt; &quot;c++11 or before&quot; &lt;&lt; endl;   &#47;&#47; 201103是C++11<br><br>为什么不是 c++11 or later 呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496199,"discussion_content":"这个好像是笔误，写错了，汗啊。\n\n先领会条件编译的用法吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590328176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217280,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1589453379,"is_pvip":false,"replies":[{"id":"80326","content":"LeetCode太高端了，我那时候都没见过，感觉刷LeetCode的人都很厉害。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589461250,"ip_address":"","comment_id":217280,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589453379","product_id":100051801,"comment_content":"前一段时间刷了点leetcode题目，用C++写的。<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;LYWEFFDVjUX6N48daq_QBQ","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495098,"discussion_content":"LeetCode太高端了，我那时候都没见过，感觉刷LeetCode的人都很厉害。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589461250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216640,"user_name":"九三","can_delete":false,"product_type":"c1","uid":1454691,"ip_address":"","ucode":"7D093ED7273CBE","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/63/fa24f92e.jpg","comment_is_top":false,"comment_ctime":1589299937,"is_pvip":false,"replies":[{"id":"80163","content":"有的是标准定义的，有的是编译器定义的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589331301,"ip_address":"","comment_id":216640,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1589299937","product_id":100051801,"comment_content":"老师， 用的这些像 __cplusplus  __GNUC__ __VERSION__ 等，这些关键字是系统提供的还是代码提供的？ ","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494892,"discussion_content":"有的是标准定义的，有的是编译器定义的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589331301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1212323,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7f/a3/23540579.jpg","nickname":"robonix","note":"","ucode":"866EC82EDA455B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267083,"discussion_content":"那是不是说就不用显式的在代码里包含他们所在头文件就能用这些宏定义了呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589598755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216398,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1589251669,"is_pvip":true,"replies":[{"id":"80073","content":"这些宏定义就有些过了啊，一是用小写而不是大写，还故意写错，二是宏替换了关键字、标准库函数，太危险了。<br><br><br>看GitHub原来是搞笑用的，可以当做反面教材。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589253150,"ip_address":"","comment_id":216398,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589251669","product_id":100051801,"comment_content":"#define struct union<br>#define M_PI 3.2f<br>#define true ((__LINE__&amp;15)!=15)<br>#define memcpy strncpy<br>#define pthread_mutex_lock(m) 0<br>更多：https:&#47;&#47;gist.github.com&#47;aras-p&#47;6224951","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494802,"discussion_content":"这些宏定义就有些过了啊，一是用小写而不是大写，还故意写错，二是宏替换了关键字、标准库函数，太危险了。\n\n\n看GitHub原来是搞笑用的，可以当做反面教材。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589253150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216341,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1589244670,"is_pvip":false,"replies":[{"id":"80055","content":"<br>1.函数宏有的可以用inline函数来替代，但效果不一定，因为是否内联是有编译器来决定的。<br><br>2.是的，这是预处理不可避免的缺点，但C++的好处就是自由，我们有选择用或者不用的自由。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589246502,"ip_address":"","comment_id":216341,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1589244670","product_id":100051801,"comment_content":"思考题1:<br>Effective cpp里尽量用const代替define，这里一般代替都是常量展开，这种可以。但是使用define定义的函数，const是无法代替的，就只能使用static函数了。<br><br>思考题2:<br>条件编译可以用来适配不同产品特性，达到一个一套代码管理所有产品的特点。但实际如果产品特性和产品平台特别多，条件编译本身对代码管理和阅读也会有较大的障碍（以前做kirin芯片开发，经常用条件编译）","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494783,"discussion_content":"\n1.函数宏有的可以用inline函数来替代，但效果不一定，因为是否内联是有编译器来决定的。\n\n2.是的，这是预处理不可避免的缺点，但C++的好处就是自由，我们有选择用或者不用的自由。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589246502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263862,"discussion_content":"inline本身也是为了快去展开。函数体积太大的话，其实效果并不好，还会给编译带来负担","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589257440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}