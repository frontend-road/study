{"id":125806,"title":"10 | TIME_WAIT：隐藏在细节下的魔鬼","content":"<p>你好，我是盛延敏，这是网络编程实战的第10讲，欢迎回来。</p><p>在前面的基础篇里，我们对网络编程涉及到的基础知识进行了梳理，主要内容包括C/S编程模型、TCP协议、UDP协议和本地套接字等内容。在提高篇里，我将结合我的经验，引导你对TCP和UDP进行更深入的理解。</p><p>学习完提高篇之后，我希望你对如何提高TCP及UDP程序的健壮性有一个全面清晰的认识，从而为深入理解性能篇打下良好的基础。</p><p>在前面的基础篇里，我们了解了TCP四次挥手，在四次挥手的过程中，发起连接断开的一方会有一段时间处于TIME_WAIT的状态，你知道TIME_WAIT是用来做什么的么？在面试和实战中，TIME_WAIT相关的问题始终是绕不过去的一道难题。下面就请跟随我，一起找出隐藏在细节下的魔鬼吧。</p><h2>TIME_WAIT发生的场景</h2><p>让我们先从一例线上故障说起。在一次升级线上应用服务之后，我们发现该服务的可用性变得时好时坏，一段时间可以对外提供服务，一段时间突然又不可以，大家都百思不得其解。运维同学登录到服务所在的主机上，使用netstat命令查看后才发现，主机上有成千上万处于TIME_WAIT状态的连接。</p><p>经过层层剖析后，我们发现罪魁祸首就是TIME_WAIT。为什么呢？我们这个应用服务需要通过发起TCP连接对外提供服务。每个连接会占用一个本地端口，当在高并发的情况下，TIME_WAIT状态的连接过多，多到把本机可用的端口耗尽，应用服务对外表现的症状，就是不能正常工作了。当过了一段时间之后，处于TIME_WAIT的连接被系统回收并关闭后，释放出本地端口可供使用，应用服务对外表现为，可以正常工作。这样周而复始，便会出现了一会儿不可以，过一两分钟又可以正常工作的现象。</p><!-- [[[read_end]]] --><p>那么为什么会产生这么多的TIME_WAIT连接呢？</p><p>这要从TCP的四次挥手说起。</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/e1/f34823ce42a49e4eadaf642a75d14de1.png?wh=874*556\" alt=\"\"><br>\nTCP连接终止时，主机1先发送FIN报文，主机2进入CLOSE_WAIT状态，并发送一个ACK应答，同时，主机2通过read调用获得EOF，并将此结果通知应用程序进行主动关闭操作，发送FIN报文。主机1在接收到FIN报文后发送ACK应答，此时主机1进入TIME_WAIT状态。</p><p>主机1在TIME_WAIT停留持续时间是固定的，是最长分节生命期MSL（maximum segment lifetime）的两倍，一般称之为2MSL。和大多数BSD派生的系统一样，Linux系统里有一个硬编码的字段，名称为<code>TCP_TIMEWAIT_LEN</code>，其值为60秒。也就是说，<strong>Linux系统停留在TIME_WAIT的时间为固定的60秒。</strong></p><pre><code>#define TCP_TIMEWAIT_LEN (60*HZ) /* how long to wait to destroy TIME-        WAIT state, about 60 seconds\t*/\n</code></pre><p>过了这个时间之后，主机1就进入CLOSED状态。为什么是这个时间呢？你可以先想一想，稍后我会给出解答。</p><p>你一定要记住一点，<strong>只有发起连接终止的一方会进入TIME_WAIT状态</strong>。这一点面试的时候经常会被问到。</p><h2>TIME_WAIT的作用</h2><p>你可能会问，为什么不直接进入CLOSED状态，而要停留在TIME_WAIT这个状态？</p><p>这要从两个方面来说。</p><p>首先，这样做是为了确保最后的ACK能让被动关闭方接收，从而帮助其正常关闭。</p><p>TCP在设计的时候，做了充分的容错性设计，比如，TCP假设报文会出错，需要重传。在这里，如果图中主机1的ACK报文没有传输成功，那么主机2就会重新发送FIN报文。</p><p>如果主机1没有维护TIME_WAIT状态，而直接进入CLOSED状态，它就失去了当前状态的上下文，只能回复一个RST操作，从而导致被动关闭方出现错误。</p><p>现在主机1知道自己处于TIME_WAIT的状态，就可以在接收到FIN报文之后，重新发出一个ACK报文，使得主机2可以进入正常的CLOSED状态。</p><p>第二个理由和连接“化身”和报文迷走有关系，为了让旧连接的重复分节在网络中自然消失。</p><p>我们知道，在网络中，经常会发生报文经过一段时间才能到达目的地的情况，产生的原因是多种多样的，如路由器重启，链路突然出现故障等。如果迷走报文到达时，发现TCP连接四元组（源IP，源端口，目的IP，目的端口）所代表的连接不复存在，那么很简单，这个报文自然丢弃。</p><p>我们考虑这样一个场景，在原连接中断后，又重新创建了一个原连接的“化身”，说是化身其实是因为这个连接和原先的连接四元组完全相同，如果迷失报文经过一段时间也到达，那么这个报文会被误认为是连接“化身”的一个TCP分节，这样就会对TCP通信产生影响。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/5f/945c60ae06d282dcc22ad3b868f1175f.png?wh=856*580\" alt=\"\"><br>\n所以，TCP就设计出了这么一个机制，经过2MSL这个时间，足以让两个方向上的分组都被丢弃，使得原来连接的分组在网络中都自然消失，再出现的分组一定都是新化身所产生的。</p><p>划重点，2MSL的时间是<strong>从主机1接收到FIN后发送ACK开始计时的</strong>；如果在TIME_WAIT时间内，因为主机1的ACK没有传输到主机2，主机1又接收到了主机2重发的FIN报文，那么2MSL时间将重新计时。道理很简单，因为2MSL的时间，目的是为了让旧连接的所有报文都能自然消亡，现在主机1重新发送了ACK报文，自然需要重新计时，以便防止这个ACK报文对新可能的连接化身造成干扰。</p><h2>TIME_WAIT的危害</h2><p>过多的TIME_WAIT的主要危害有两种。</p><p>第一是内存资源占用，这个目前看来不是太严重，基本可以忽略。</p><p>第二是对端口资源的占用，一个TCP连接至少消耗一个本地端口。要知道，端口资源也是有限的，一般可以开启的端口为32768～61000 ，也可以通过<code>net.ipv4.ip_local_port_range</code>指定，如果TIME_WAIT状态过多，会导致无法创建新连接。这个也是我们在一开始讲到的那个例子。</p><h2>如何优化TIME_WAIT？</h2><p>在高并发的情况下，如果我们想对TIME_WAIT做一些优化，来解决我们一开始提到的例子，该如何办呢？</p><h3>net.ipv4.tcp_max_tw_buckets</h3><p>一个暴力的方法是通过sysctl命令，将系统值调小。这个值默认为18000，当系统中处于TIME_WAIT的连接一旦超过这个值时，系统就会将所有的TIME_WAIT连接状态重置，并且只打印出警告信息。这个方法过于暴力，而且治标不治本，带来的问题远比解决的问题多，不推荐使用。</p><h3>调低TCP_TIMEWAIT_LEN，重新编译系统</h3><p>这个方法是一个不错的方法，缺点是需要“一点”内核方面的知识，能够重新编译内核。我想这个不是大多数人能接受的方式。</p><h3>SO_LINGER的设置</h3><p>英文单词“linger”的意思为停留，我们可以通过设置套接字选项，来设置调用close或者shutdown关闭连接时的行为。</p><pre><code>int setsockopt(int sockfd, int level, int optname, const void *optval,\n　　　　　　　　socklen_t optlen);\n</code></pre><pre><code>struct linger {\n　int　 l_onoff;　　　　/* 0=off, nonzero=on */\n　int　 l_linger;　　　　/* linger time, POSIX specifies units as seconds */\n}\n</code></pre><p>设置linger参数有几种可能：</p><ul>\n<li>如果<code>l_onoff</code>为0，那么关闭本选项。<code>l_linger</code>的值被忽略，这对应了默认行为，close或shutdown立即返回。如果在套接字发送缓冲区中有数据残留，系统会将试着把这些数据发送出去。</li>\n<li>如果<code>l_onoff</code>为非0， 且<code>l_linger</code>值也为0，那么调用close后，会立该发送一个RST标志给对端，该TCP连接将跳过四次挥手，也就跳过了TIME_WAIT状态，直接关闭。这种关闭的方式称为“强行关闭”。 在这种情况下，排队数据不会被发送，被动关闭方也不知道对端已经彻底断开。只有当被动关闭方正阻塞在<code>recv()</code>调用上时，接受到RST时，会立刻得到一个“connet reset by peer”的异常。</li>\n</ul><pre><code>struct linger so_linger;\nso_linger.l_onoff = 1;\nso_linger.l_linger = 0;\nsetsockopt(s,SOL_SOCKET,SO_LINGER, &amp;so_linger,sizeof(so_linger));\n</code></pre><ul>\n<li>如果<code>l_onoff</code>为非0， 且<code>l_linger</code>的值也非0，那么调用close后，调用close的线程就将阻塞，直到数据被发送出去，或者设置的<code>l_linger</code>计时时间到。</li>\n</ul><p>第二种可能为跨越TIME_WAIT状态提供了一个可能，不过是一个非常危险的行为，不值得提倡。</p><h3>net.ipv4.tcp_tw_reuse：更安全的设置</h3><p>那么Linux有没有提供更安全的选择呢？</p><p>当然有。这就是<code>net.ipv4.tcp_tw_reuse</code>选项。</p><p>Linux系统对于<code>net.ipv4.tcp_tw_reuse</code>的解释如下:</p><pre><code>Allow to reuse TIME-WAIT sockets for new connections when it is safe from protocol viewpoint. Default value is 0.It should not be changed without advice/request of technical experts.\n</code></pre><p>这段话的大意是从协议角度理解如果是安全可控的，可以复用处于TIME_WAIT的套接字为新的连接所用。</p><p>那么什么是协议角度理解的安全可控呢？主要有两点：</p><ol>\n<li>只适用于连接发起方（C/S模型中的客户端）；</li>\n<li>对应的TIME_WAIT状态的连接创建时间超过1秒才可以被复用。</li>\n</ol><p>使用这个选项，还有一个前提，需要打开对TCP时间戳的支持，即<code>net.ipv4.tcp_timestamps=1</code>（默认即为1）。</p><p>要知道，TCP协议也在与时俱进，RFC 1323中实现了TCP拓展规范，以便保证TCP的高可用，并引入了新的TCP选项，两个4字节的时间戳字段，用于记录TCP发送方的当前时间戳和从对端接收到的最新时间戳。由于引入了时间戳，我们在前面提到的2MSL问题就不复存在了，因为重复的数据包会因为时间戳过期被自然丢弃。</p><h2>总结</h2><p>在今天的内容里，我讲了TCP的四次挥手，重点对TIME_WAIT的产生、作用以及优化进行了讲解，你需要记住以下三点：</p><ul>\n<li>TIME_WAIT的引入是为了让TCP报文得以自然消失，同时为了让被动关闭方能够正常关闭；</li>\n<li>不要试图使用<code>SO_LINGER</code>设置套接字选项，跳过TIME_WAIT；</li>\n<li>现代Linux系统引入了更安全可控的方案，可以帮助我们尽可能地复用TIME_WAIT状态的连接。</li>\n</ul><h2>思考题</h2><p>最后按照惯例，我留两道思考题，供你消化今天的内容。</p><ol>\n<li>最大分组MSL是TCP分组在网络中存活的最长时间，你知道这个最长时间是如何达成的？换句话说，是怎么样的机制，可以保证在MSL达到之后，报文就自然消亡了呢？</li>\n<li>RFC 1323引入了TCP时间戳，那么这需要在发送方和接收方之间定义一个统一的时钟吗？</li>\n</ol><p>欢迎你在评论区写下你的思考，如果通过这篇文章你理解了TIME_WAIT，欢迎你把这篇文章分享给你的朋友或者同事，一起交流学习一下。</p>","neighbors":{"left":{"article_title":"09丨答疑篇：学习网络编程前，需要准备哪些东西？","id":120390},"right":{"article_title":"11 | 优雅地关闭还是粗暴地关闭 ?","id":126126}},"comments":[{"had_liked":false,"id":127117,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":true,"comment_ctime":1566559108,"is_pvip":false,"replies":[{"id":"48211","content":"BINGO。太多了，大家也不好接受，我想我还是不求面面俱到，但求有所启发和引领。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567132423,"ip_address":"","comment_id":127117,"utype":1}],"discussion_count":2,"race_medal":0,"score":"9.2233721586803999e+18","product_id":100032701,"comment_content":"net.ipv4.tcp_tw_recycle是客户端和服务器端都可以复用，但是容易造成端口接收数据混乱，4.12内核直接砍掉了，老师是因为内核去掉了所以没提了嘛","like_count":29,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464326,"discussion_content":"BINGO。太多了，大家也不好接受，我想我还是不求面面俱到，但求有所启发和引领。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567132423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512599,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/88nXicqmkJWm3IXVfPfGQSk8SKIBVKjuC4qhzaCkf5Ud88uvKgS4Vf5AzCJ1uaFO0gpPnxdh4CowfhpxV1kSbXw/132","nickname":"lixin","note":"","ucode":"94D99DAFB6C929","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584591,"discussion_content":"@超哥，看到你了。超哥厉害。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660962005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126976,"user_name":"何某人","can_delete":false,"product_type":"c1","uid":1604368,"ip_address":"","ucode":"8ADED58825D7B4","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/10/723a149c.jpg","comment_is_top":false,"comment_ctime":1566529686,"is_pvip":true,"replies":[{"id":"48215","content":"这个是解决端口复用的问题，并不是解决TIME_WAIT，这个是告诉内核，即使TIME_WAIT状态的套接字，我也可以继续使用它做为新的套集字使用。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567132777,"ip_address":"","comment_id":126976,"utype":1}],"discussion_count":6,"race_medal":0,"score":"134710515862","product_id":100032701,"comment_content":"老师，那么通过setsockopt设置SO_REUSEADDR这个方法呢？网上资料基本上都是通过设置这个来解决TIME_WAIT。这个方法有什么优劣吗？","like_count":32,"discussions":[{"author":{"id":1214303,"avatar":"https://static001.geekbang.org/account/avatar/00/12/87/5f/6bf8b74a.jpg","nickname":"Kepler","note":"","ucode":"0C9CA3DB8B3CF0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8063,"discussion_content":"意思是SO_REUSEADDR是以服务端的角度为解决端口被占用的问题；\n而本文所提到的调小net.ipv4.tcp_max_tw_buckets， 设置SO_LINGER， 设置net.ipv4.tcp_tw_reuse 是以客户端的角度防止过多time_wait状态耗尽端口导致不可用；是吗？","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1567770897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6163,"discussion_content":"TIME_WAIT 状态是一定要有的， SO_REUSEADDR 之前在最大限度的实现地址的重用。TCP 连接可以用四元组(本端IP, 本端port, 对端IP, 对端port)唯一确定。如果没有设置 SO_REUSEADDR， 本端 IP 都不能重用。而设置了的话，只要四元组不同，就可以重用。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1566735973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1306092,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","nickname":"fjpcode","note":"","ucode":"C32C5E3ECB9A90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63951,"discussion_content":"你的最后一句话和我实际试验的不相符，我实测只要设置了SO_REUSEADDR处于TIME_WAIT状态的端口资源，都可以被重用，不管四元组相是否相同。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1574925005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6163,"ip_address":""},"score":63951,"extra":""},{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1306092,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","nickname":"fjpcode","note":"","ucode":"C32C5E3ECB9A90","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82656,"discussion_content":"呃，时间太久了我忘了查的哪的资料了。等有空我再找找，确认一下。我猜测可能是实现版本的不同导致的吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576340358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63951,"ip_address":""},"score":82656,"extra":""},{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1306092,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","nickname":"fjpcode","note":"","ucode":"C32C5E3ECB9A90","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82657,"discussion_content":"另外你是怎么测的？可以说下么？我也去试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576340423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63951,"ip_address":""},"score":82657,"extra":""}]},{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464267,"discussion_content":"这个是解决端口复用的问题，并不是解决TIME_WAIT，这个是告诉内核，即使TIME_WAIT状态的套接字，我也可以继续使用它做为新的套集字使用。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567132777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163861,"user_name":"雷神的盛宴","can_delete":false,"product_type":"c1","uid":1476048,"ip_address":"","ucode":"9D5357F3A79FF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/VZ96qlUtD0jEib5gn8mVthSm6sLJ66o1YRn4OgmCseGWBPw055Cw6sYyib5fRFiabnTzl2Nhuomc3qIhgRibkH6iakw/132","comment_is_top":false,"comment_ctime":1576812377,"is_pvip":false,"replies":[{"id":"63902","content":"学到了","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577604110,"ip_address":"","comment_id":163861,"utype":1}],"discussion_count":6,"race_medal":0,"score":"108950994777","product_id":100032701,"comment_content":"net.ipv4.tcp_tw_reuse 要慎用，当客户端与服务端主机时间不同步时，客户端的发送的消息会被直接拒绝掉","like_count":26,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478561,"discussion_content":"学到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577604110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299095,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/97/5f4cd8da.jpg","nickname":"虎虎生威的程坚强","note":"","ucode":"321C89298D3682","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579186,"discussion_content":"这个不太对，开启了reuse，即使时钟不同步，只要客户端时间戳是递增的就行，服务器收到客户端的包后会保留上次收到的时间戳，这个时间戳是客户端的，只要是递增就没问题，reuse最大的问题是发rst包时不会加时间戳（有内核源码为证），可能会导致连接被异常关闭，这才是不能乱用reuse的根本原因","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1657245299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293057,"discussion_content":"reuse没问题，recle 有问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595424115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013128,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/75/88/fd024a11.jpg","nickname":"朱震震","note":"","ucode":"6E8AE4506255AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373524,"discussion_content":"您说的乱跳指的是什么情况？两台机器时间上有差异是上述这种情况吗？误差到多少会产生这种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620777231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803259,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","nickname":"linker","note":"","ucode":"6C5799F2FC2C82","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203922,"discussion_content":"一般情况是客户端和服务器之间有nat转发的情况，时间不同步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584102085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1959482,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","nickname":"rongyefeng","note":"","ucode":"9A15D947E9D645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1803259,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","nickname":"linker","note":"","ucode":"6C5799F2FC2C82","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267344,"discussion_content":"确切地说，如果客户端的时间会乱跳，没有与服务端保持同步（并不一定相同），那么服务器端可能会大量丢包。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1589635214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":203922,"ip_address":""},"score":267344,"extra":""}]}]},{"had_liked":false,"id":126983,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566530523,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"96055811035","product_id":100032701,"comment_content":"1.  MSL的意思是最长报文段寿命。IP头部中有个TTL字段意思是生存时间。TTL每经过一个路由器就减1，到0就会被丢弃，而MSL是由RFC里面规定的2分钟，但实际在工程上2分钟太长，因此TCP允许根据具体的情况配置大小，TTL与MSL是有关系的但不是简单的相等关系，MSL要大于TTL。MSL内部应该就是一个普通的定时器实现的。<br>2.不需要统一时钟，可以在第一次交换双方的时钟，之后用相对时间就可以了。","like_count":22,"discussions":[{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304539,"discussion_content":"文中说2MSL在linux里是60秒。所以就是linux将RFC规定的MSL的时间改为了 30秒吗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599610638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130900,"user_name":"AnonymousUser","can_delete":false,"product_type":"c1","uid":1243930,"ip_address":"","ucode":"E03CB1EDD9775B","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/1a/57480c9c.jpg","comment_is_top":false,"comment_ctime":1567568587,"is_pvip":false,"replies":[{"id":"50834","content":"总结很到位。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568195810,"ip_address":"","comment_id":130900,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83171947211","product_id":100032701,"comment_content":"TIME_WAIT的作用：<br>1） 确保对方能够正确收到最后的ACK，帮助其关闭；<br>2） 防迷走报文对程序带来的影响。<br>TIME_WAIT的危害：<br>1） 占用内存；<br>2） 占用端口。","like_count":20,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466186,"discussion_content":"总结很到位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568195810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25514,"discussion_content":"学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570535271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200152,"user_name":"张天屹","can_delete":false,"product_type":"c1","uid":1477612,"ip_address":"","ucode":"8BD6BD6DCF0F4F","user_header":"https://static001.geekbang.org/account/avatar/00/16/8b/ec/dc03f5ad.jpg","comment_is_top":false,"comment_ctime":1585551070,"is_pvip":false,"replies":[{"id":"75775","content":"帮我回答了，赞","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586076140,"ip_address":"","comment_id":200152,"utype":1}],"discussion_count":4,"race_medal":0,"score":"61715093214","product_id":100032701,"comment_content":"文中的问题有个前提，必须是监听的端口。我看有评论提到80,8080这种服务，是否只能同时访问一次？答案是否定的。因为网络中的服务分为监听端口和连接端口，当建立一个连接之后，监听端口是不被占用的，此时会用一个新的端口来建立连接，而且就算是新的端口，一个TCP连接也是（客户端ip,客户端端口 ，服务端ip，服务端端口）共同决定的，不冲突。","like_count":14,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489949,"discussion_content":"帮我回答了，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586076140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140056,"avatar":"https://static001.geekbang.org/account/avatar/00/11/65/58/359fb757.jpg","nickname":"Gothic","note":"","ucode":"1094AE331F91EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305296,"discussion_content":"你说的是监听socket和连接socket吧，没听说过连接端口，服务端不是通过accept函数返回一个新的tcp连接socket吗？跟端口有什么关系呢？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599853932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1452675,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJhbjhkN9mVxxA3wfMCmZ5BmoFVHXyaOkqDH5uRXGQNFngDdJDYqkf82ictdicZ9WibLjoiapcom4XbGw/132","nickname":"木易","note":"","ucode":"7CCA6255570E6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296158,"discussion_content":"服务端哪来的连接端口，不是只有一个端口(监听端口吗)？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596462513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135701,"avatar":"https://static001.geekbang.org/account/avatar/00/11/54/55/613ddc42.jpg","nickname":"Edison","note":"","ucode":"734A561F363720","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552329,"discussion_content":"回答不对，这个抓个包就可以看得出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645414531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126956,"user_name":"alan","can_delete":false,"product_type":"c1","uid":1083425,"ip_address":"","ucode":"2CA8D0B6B7D5A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/21/50b2418a.jpg","comment_is_top":false,"comment_ctime":1566525621,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44516198581","product_id":100032701,"comment_content":"TIME_WAIT的作用：<br>1. 确保主动断开方的最后一个ACK成功发到对方<br>2. 确保残留的TCP包自然消亡","like_count":10,"discussions":[{"author":{"id":1154101,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9c/35/9dc79371.jpg","nickname":"你好旅行者","note":"","ucode":"5C72A428DC28F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19998,"discussion_content":"老哥你这拾人牙慧没什么意思的呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569247502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175242,"user_name":"丹枫无迹","can_delete":false,"product_type":"c1","uid":1218765,"ip_address":"","ucode":"61A508C2464AF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/cd/d85c6361.jpg","comment_is_top":false,"comment_ctime":1580627274,"is_pvip":false,"replies":[{"id":"71012","content":"这是因为时间戳会告诉我们报文发送的时间，这样在迷走报文和正确报文同时到达的情况下，我们就可以很方便的分辨出应该丢弃掉那个报文，并不会对最后收到的报文产生任何不利的影响。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583050094,"ip_address":"","comment_id":175242,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35940365642","product_id":100032701,"comment_content":"由于引入了时间戳，我们在前面提到的 2MSL 问题就不复存在了，因为重复的数据包会因为时间戳过期被自然丢弃。<br>这个没理解，为什么 2MSL 问题就不存在了？老师能解释下吗？","like_count":8,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482664,"discussion_content":"这是因为时间戳会告诉我们报文发送的时间，这样在迷走报文和正确报文同时到达的情况下，我们就可以很方便的分辨出应该丢弃掉那个报文，并不会对最后收到的报文产生任何不利的影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583050094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2221236,"avatar":"https://static001.geekbang.org/account/avatar/00/21/e4/b4/889954ca.jpg","nickname":"Levi","note":"","ucode":"F804879872BB76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":536987,"discussion_content":"可是这个迷走的报文和新的报文不一定就是重复的啊，他怎么就光从时间上判断呢？那万一这两个报文没有一起到，一前一后怎么判断呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638928701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":482664,"ip_address":""},"score":536987,"extra":""}]}]},{"had_liked":false,"id":161385,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1010459,"ip_address":"","ucode":"4475AF1598FBFD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1b/4b397b80.jpg","comment_is_top":false,"comment_ctime":1576200555,"is_pvip":false,"replies":[{"id":"63927","content":"这里针对的TIME_WAIT是指主动关闭的一方，不一定是客户端或者服务器端，如果服务器端主动关闭连接，也是属于这样的范畴的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577605161,"ip_address":"","comment_id":161385,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35935938923","product_id":100032701,"comment_content":"Reuse只适用于连接发起方（C&#47;S 模型中的客户端），但目前要解决的是服务端连接不足问题，这个方法要如何发挥作用呢？","like_count":9,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477703,"discussion_content":"这里针对的TIME_WAIT是指主动关闭的一方，不一定是客户端或者服务器端，如果服务器端主动关闭连接，也是属于这样的范畴的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577605161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128076,"user_name":"吴光庆","can_delete":false,"product_type":"c1","uid":1454851,"ip_address":"","ucode":"E25B166295C3EC","user_header":"https://static001.geekbang.org/account/avatar/00/16/33/03/3f2df287.jpg","comment_is_top":false,"comment_ctime":1566828245,"is_pvip":false,"replies":[{"id":"47930","content":"因为是一来一返。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567005383,"ip_address":"","comment_id":128076,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35926566613","product_id":100032701,"comment_content":"为什么是2MSL，不是3 MSL，4 MSL。","like_count":8,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464781,"discussion_content":"因为是一来一返。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567005383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1619756,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b7/2c/e1682683.jpg","nickname":"YidWang","note":"","ucode":"C91A9117EC3540","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6359,"discussion_content":"我也有这个问题\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566868851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132302,"user_name":"JasonZhi","can_delete":false,"product_type":"c1","uid":1282818,"ip_address":"","ucode":"6C23DCD592636D","user_header":"https://static001.geekbang.org/account/avatar/00/13/93/02/fcab58d1.jpg","comment_is_top":false,"comment_ctime":1568080533,"is_pvip":true,"replies":[{"id":"50768","content":"哈哈，提前剧透啊。<br><br>这是为了解决如何快速复用处于TIME_WAIT的连接，如果不设置这个选项，处于TIME_WAIT的连接是不能被快速复用的，必须等待系统回收连接才可以，如果这个时候开启服务器端口，会报地址已被占用的错误。<br><br>这块在第15讲里会有详细阐述。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568184656,"ip_address":"","comment_id":132302,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31632851605","product_id":100032701,"comment_content":"SO_REUSEADDR和SO_REUSEPORT可以详细说下作用吗？有点迷糊，文章都没有说明这两个参数，评论区就冒出一大堆关于这两个参数的评论。","like_count":7,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466865,"discussion_content":"哈哈，提前剧透啊。\n\n这是为了解决如何快速复用处于TIME_WAIT的连接，如果不设置这个选项，处于TIME_WAIT的连接是不能被快速复用的，必须等待系统回收连接才可以，如果这个时候开启服务器端口，会报地址已被占用的错误。\n\n这块在第15讲里会有详细阐述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568184656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221131,"user_name":"pc","can_delete":false,"product_type":"c1","uid":1652836,"ip_address":"","ucode":"1AD538B9A900B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","comment_is_top":false,"comment_ctime":1590413454,"is_pvip":false,"replies":[{"id":"82181","content":"我一直都在回复的哦，和大家在一起自己也学到不少，哈哈。<br><br>以下试着回答你的问题：<br><br>1、看到评论区的“通过setsockopt设置SO_REUSEADDR这个方法”，感觉和net.ipv4.tcp_tw_reuse选项的作用也很像，都是端口复用，只是后者是在安全可控的基础上---这样理解对吗？<br><br>我认为不对哦，前者是针对服务端连接地址被占用的情况，后者是针对连接发起方；<br><br>2、老师在文中说的“过了2MLS这个时间之后，主机 1 就进入 CLOSED 状态”，我自己还是没有总结出答案，是评论区所说的“去时ACK的最大存活时间（MSL）+来时FIIN的最大存活时间（MSL） = 2MSL”这个原因吗？<br><br>你的意思是为什么要制定2MSL这个时间段才CLOSED是么？如果是这样，评论去的&quot;去时ACK的最大存活时间（MSL）+来时FIIN的最大存活时间（MSL） = 2MSL&quot;算是一个靠谱的理解吧。<br><br><br>3、TIME_WAIT=2MLS和TCP_TIMEWAIT_LEN有啥关系？是：TIME_WAIT实际上是由TCP_TIMEWAIT_LEN控制，然后只不过其值约等于2MLS来控制迷走报文的消亡 这样么？<br>TIME_WAIT是一个抽象的定义，而TCP_TIMEWAIT_LEN是Linux默认的值，是一个常量。你的认识是对的<br><br>4、文中说TCP_TIMEWAIT_LEN、net.ipv4.tcp_tw_reuse都是linux的选项，但是客户端来说的话，有android、ios、windows各种系统吧？是每个系统都有类似的控制选项么？<br>Android是裁剪过的Linux，应该可以复用；其他两个我不是很清楚，想必应该有自己的控制选项。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1590932187,"ip_address":"","comment_id":221131,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23065249934","product_id":100032701,"comment_content":"先说点其他的吧：看完了基础篇，收获了很多，也更加期待后面的内容（本来就是冲着time_wait和epoll来到这个课程）。当然其中也遇到很多问题，其中也在评论区提了两个。本来以为这么长时间了老师也不会再回复了，周末一看，竟然回复了我的问题！其实一边是开心，另一边是得到答案的开心（其实自己也搜索过，但是感觉搜到文章都不是我想问的内容）。<br><br>【提问啦～】<br>1、看到评论区的“通过setsockopt设置SO_REUSEADDR这个方法”，感觉和net.ipv4.tcp_tw_reuse选项的作用也很像，都是端口复用，只是后者是在安全可控的基础上---这样理解对吗？<br>2、老师在文中说的“过了2MLS这个时间之后，主机 1 就进入 CLOSED 状态”，我自己还是没有总结出答案，是评论区所说的“去时ACK的最大存活时间（MSL）+来时FIIN的最大存活时间（MSL） = 2MSL”这个原因吗？<br>3、TIME_WAIT=2MLS和TCP_TIMEWAIT_LEN有啥关系？是：TIME_WAIT实际上是由TCP_TIMEWAIT_LEN控制，然后只不过其值约等于2MLS来控制迷走报文的消亡 这样么？<br>4、文中说TCP_TIMEWAIT_LEN、net.ipv4.tcp_tw_reuse都是linux的选项，但是客户端来说的话，有android、ios、windows各种系统吧？是每个系统都有类似的控制选项么？","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496346,"discussion_content":"我一直都在回复的哦，和大家在一起自己也学到不少，哈哈。\n\n以下试着回答你的问题：\n\n1、看到评论区的“通过setsockopt设置SO_REUSEADDR这个方法”，感觉和net.ipv4.tcp_tw_reuse选项的作用也很像，都是端口复用，只是后者是在安全可控的基础上---这样理解对吗？\n\n我认为不对哦，前者是针对服务端连接地址被占用的情况，后者是针对连接发起方；\n\n2、老师在文中说的“过了2MLS这个时间之后，主机 1 就进入 CLOSED 状态”，我自己还是没有总结出答案，是评论区所说的“去时ACK的最大存活时间（MSL）+来时FIIN的最大存活时间（MSL） = 2MSL”这个原因吗？\n\n你的意思是为什么要制定2MSL这个时间段才CLOSED是么？如果是这样，评论去的&amp;quot;去时ACK的最大存活时间（MSL）+来时FIIN的最大存活时间（MSL） = 2MSL&amp;quot;算是一个靠谱的理解吧。\n\n\n3、TIME_WAIT=2MLS和TCP_TIMEWAIT_LEN有啥关系？是：TIME_WAIT实际上是由TCP_TIMEWAIT_LEN控制，然后只不过其值约等于2MLS来控制迷走报文的消亡 这样么？\nTIME_WAIT是一个抽象的定义，而TCP_TIMEWAIT_LEN是Linux默认的值，是一个常量。你的认识是对的\n\n4、文中说TCP_TIMEWAIT_LEN、net.ipv4.tcp_tw_reuse都是linux的选项，但是客户端来说的话，有android、ios、windows各种系统吧？是每个系统都有类似的控制选项么？\nAndroid是裁剪过的Linux，应该可以复用；其他两个我不是很清楚，想必应该有自己的控制选项。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590932187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137709,"user_name":"tongmin_tsai","can_delete":false,"product_type":"c1","uid":1045090,"ip_address":"","ucode":"D9423E770D5846","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/62/f873cd8f.jpg","comment_is_top":false,"comment_ctime":1569827691,"is_pvip":false,"replies":[{"id":"53874","content":"只要每次经过一跳的时间肯定大于1秒以上就可以了，实际处理的时间肯定大于这个值的。<br><br>2MSL设置的为60秒，TTL设置为60，只有每次一跳都大于1秒，那么肯定时间总和大于60秒了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570699798,"ip_address":"","comment_id":137709,"utype":1}],"discussion_count":5,"race_medal":0,"score":"23044664171","product_id":100032701,"comment_content":"老师，我有疑问的是，IP包中TTL每经过一次路由就少1，那么2MSL怎么确保可以一定大于TTL的？","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469223,"discussion_content":"只要每次经过一跳的时间肯定大于1秒以上就可以了，实际处理的时间肯定大于这个值的。\n\n2MSL设置的为60秒，TTL设置为60，只有每次一跳都大于1秒，那么肯定时间总和大于60秒了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570699798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1682175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/aa/ff/e2c331e0.jpg","nickname":"bbbi","note":"","ucode":"9A539AEF791428","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36590,"discussion_content":"如果每一跳时间大于1秒，那就是ttl大于2msl了吧？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571395962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1245504,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/40/a203a3b9.jpg","nickname":"爱学习不害怕","note":"","ucode":"BE325C02E4C92F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1682175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/aa/ff/e2c331e0.jpg","nickname":"bbbi","note":"","ucode":"9A539AEF791428","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295548,"discussion_content":"ttl是从发送方到接收方的跳数啊，2msl是一来一回，ttl大于1ml但可能小于2msl","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596245755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":36590,"ip_address":""},"score":295548,"extra":""}]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580193,"discussion_content":"https://networkengineering.stackexchange.com/questions/68468/is-tcps-msl-value-equivalent-to-ips-ttl-value","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657969011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407398,"discussion_content":"一个是跳数，一个是秒数，本来就不是一个概念，不知为何很多人在问这个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634998885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129942,"user_name":"magicnum","can_delete":false,"product_type":"c1","uid":1004869,"ip_address":"","ucode":"96B3696961F654","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/45/e4314bc6.jpg","comment_is_top":false,"comment_ctime":1567331179,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"23042167659","product_id":100032701,"comment_content":"1.记录一个值，比如60s，经过一个网关就减去一定短值，值=0的时候网关决定丢弃；<br>2.不需要。timestamp不需要交互，只是发送方使用的","like_count":5,"discussions":[{"author":{"id":2005721,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BmrdLfpssuU8EibmgH6H9eiabYnqicNBsCAr0ADw8ibWAnCickIIwIWDhb9iagibPrGqGWdN9LLYcPZvyCiaztbAE9ZQag/132","nickname":"打工是不可能打工的","note":"","ucode":"1BFBC9A4564825","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406584,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634799386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299095,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/97/5f4cd8da.jpg","nickname":"虎虎生威的程坚强","note":"","ucode":"321C89298D3682","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191800,"discussion_content":"应该是经过路由器的数目吧？或者说叫跳数，TTL","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583035893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25515,"discussion_content":"学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570535299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127141,"user_name":"Geek_9a0180","can_delete":false,"product_type":"c1","uid":1104526,"ip_address":"","ucode":"E0975DBE140DF2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/8e/eecebc1a.jpg","comment_is_top":false,"comment_ctime":1566568459,"is_pvip":false,"replies":[{"id":"48210","content":"首先，我不明白connect reset和connect reset by peer有啥区别哎，这两个不是一回事么？都是RST信号。<br><br>其次，我确认读的时候会读到FIN报文，连续写则会得到RST结果。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567132332,"ip_address":"","comment_id":127141,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18746437643","product_id":100032701,"comment_content":"印象中是当一端关闭socket连接，另一端如果尝试从TCP连接中读取数据，则会报connect reset，如果偿试向连接中写入数据，则会报connect reset by peer，好像和老师说的正相反，还请老师帮忙解答一下，谢谢：）","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464338,"discussion_content":"首先，我不明白connect reset和connect reset by peer有啥区别哎，这两个不是一回事么？都是RST信号。\n\n其次，我确认读的时候会读到FIN报文，连续写则会得到RST结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567132332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6162,"discussion_content":"你说的那种情况不是文中说的 TIME_WAIT 状态。而且由于系统崩溃或者其他什么原因，A 端的连接在不通知对端的情况下关闭了。这时，如果对端发送数据，就会接收到 A 端发来的 RST ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566735727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126948,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1566524360,"is_pvip":false,"replies":[{"id":"48217","content":"这个时候你看到的连接都是服务器端被动建立的连接，本地端口都是服务器监听的端口，类似<br>&lt;127.0.0.1, 80, ip1, 51231&gt;<br>&lt;127.0.0.1, 80, ip2, 51331&gt;<br>...<br>所以，不会存在我讲到的那个问题，这些个连接过了一段时间自然会被回收。<br><br>连接池是为了多个线程复用连接，减少TCP连接的数量，是为了更高效的使用TCP，确实也客观减少了连接的数量。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567133007,"ip_address":"","comment_id":126948,"utype":1}],"discussion_count":4,"race_medal":0,"score":"18746393544","product_id":100032701,"comment_content":"老师好，想问个问题，一般我们服务器上运行一个服务，比如tomcat，zk这种，然后监听8080或2181端口，这时候外部直连（不再经过web服务器转发）的话，虽然有很多连接但服务端应该都是只占用一个端口，也就是说netstat -anp命令看到的本机都是ip+固定端口，那么此时如果服务端主动关闭一些连接的话，也会有大量time_wait问题对吧，但此时好像并没有消耗更多端口，那这个影响对于服务端来说是什么呢？老师讲的出现大量time_wait应该都是在客户端的一方吧，因为客户端发起请求会占用一个新端口，主动关闭到time_wait阶段就相当于这个新的端口一直被占用。我还有个疑问是，这种大量time_wait在连接数多的情况下是肯定会出现的，是不是可以从减少连接的方向去解决问题呢，比如用连接池这种技术可以解决吗？","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464258,"discussion_content":"这个时候你看到的连接都是服务器端被动建立的连接，本地端口都是服务器监听的端口，类似\n&amp;lt;127.0.0.1, 80, ip1, 51231&amp;gt;\n&amp;lt;127.0.0.1, 80, ip2, 51331&amp;gt;\n...\n所以，不会存在我讲到的那个问题，这些个连接过了一段时间自然会被回收。\n\n连接池是为了多个线程复用连接，减少TCP连接的数量，是为了更高效的使用TCP，确实也客观减少了连接的数量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567133007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184919,"avatar":"https://static001.geekbang.org/account/avatar/00/12/14/97/8a3aa317.jpg","nickname":"疾风知劲草","note":"","ucode":"B6E73CA240AA29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6032,"discussion_content":"抱歉，我之前的评论确实是错的。\n\n我又看了下，服务端在接收到新连接后会fork一个子进程，这个子进程的端口号跟监听端口号一样，但是相应的客户端随机端口每个子进程都是不一样的。至于服务端的子进程启动后占用的到底是服务器哪个端口，我还要再看下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566625084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5889,"discussion_content":"那启动的这个新端口的连接怎么查看呢？用netstat可以查到么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566528133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1178741,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/75/d2f821b8.jpg","nickname":"凌晨","note":"","ucode":"B97A142834F7DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6001,"discussion_content":"你说的是对的，1楼说的不对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566577058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5889,"ip_address":""},"score":6001,"extra":""}]}]},{"had_liked":false,"id":233095,"user_name":"列夫托尔斯泰克洛伊来文列夫斯德夫","can_delete":false,"product_type":"c1","uid":1744034,"ip_address":"","ucode":"4FBC97385147D9","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9c/a2/06604a01.jpg","comment_is_top":false,"comment_ctime":1594216197,"is_pvip":false,"replies":[{"id":"86805","content":"不是端口复用，是复用处于 TIME_WAIT 的套接字为新的连接所用。前提在文中也提到了，是通过TCP时间戳来解决2MSL的问题。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594906802,"ip_address":"","comment_id":233095,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14479118085","product_id":100032701,"comment_content":"这个可控优化的方法没明白，是复用端口的意思吗？不过复用端口数据不混乱了？","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500892,"discussion_content":"不是端口复用，是复用处于 TIME_WAIT 的套接字为新的连接所用。前提在文中也提到了，是通过TCP时间戳来解决2MSL的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594906802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127231,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1566616154,"is_pvip":false,"replies":[{"id":"48209","content":"1. 我说的情况是主动断开连接的一方，比如一个客户端每次对外建立一个连接，这是要消耗一个本地端口的，只不过这个端口在我们建立连接的时候由内核帮我们选好了；<br><br>2. 报文的自然消亡，就是TTL时间为0了，不会在网络中继续传播，到了某个网络设备，报文会被丢弃掉。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567132189,"ip_address":"","comment_id":127231,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14451518042","product_id":100032701,"comment_content":"老师好，我又2个问题不明白：<br>1 为什么说time_wait会占用过多端口，难道不是占用socket而已吗？比如一个server与多个client建立多个连接，对于server而言只会占用一个端口吧<br><br>2 什么是报文的自然消亡，指的是报文发送到对方或报文正常丢弃吗？然后对连接化身这段看不明白","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464390,"discussion_content":"1. 我说的情况是主动断开连接的一方，比如一个客户端每次对外建立一个连接，这是要消耗一个本地端口的，只不过这个端口在我们建立连接的时候由内核帮我们选好了；\n\n2. 报文的自然消亡，就是TTL时间为0了，不会在网络中继续传播，到了某个网络设备，报文会被丢弃掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567132189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308825,"user_name":"Initiative Thinker","can_delete":false,"product_type":"c1","uid":1736297,"ip_address":"","ucode":"A884396A1581EF","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9zRdkKuXMKh30ibeludlAsztmR4rD9iaiclPicOfIhbC4fWxGPz7iceb3o4hKx7qgX2dKwogYvT6VQ0g/132","comment_is_top":false,"comment_ctime":1629813249,"is_pvip":true,"replies":[{"id":"112105","content":"是说&quot;回复&quot;吧？<br>处于 TIME_WAIT 的套接字为新的连接所用，通过时间戳可以知道旧连接的FIN是一个无效的FIN，从而直接回复RST，让旧连接直接出错退出。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1630244083,"ip_address":"","comment_id":308825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10219747841","product_id":100032701,"comment_content":"复用后的套接字，如何恢复旧连接的FIN呢？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525635,"discussion_content":"是说&amp;quot;回复&amp;quot;吧？\n处于 TIME_WAIT 的套接字为新的连接所用，通过时间戳可以知道旧连接的FIN是一个无效的FIN，从而直接回复RST，让旧连接直接出错退出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630244083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281303,"user_name":"Geek_9edd4f","can_delete":false,"product_type":"c1","uid":2359446,"ip_address":"","ucode":"795A17393B200B","user_header":"","comment_is_top":false,"comment_ctime":1614682805,"is_pvip":false,"replies":[{"id":"102457","content":"这个例子是客户端发起连接过多，每次发起连接都会占用一个端口。客户端和服务端是相对，比如一个应用程序对于客户的请求是服务端，同时为了服务这个客户请求，又要向另一个服务发起调用请求(典型的例子是向数据库发起连接请求)。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1615125509,"ip_address":"","comment_id":281303,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10204617397","product_id":100032701,"comment_content":"“第二是对端口资源的占用，一个 TCP 连接至少消耗一个本地端口。要知道，端口资源也是有限的，一般可以开启的端口为 32768～61000 ，也可以通过net.ipv4.ip_local_port_range指定，如果 TIME_WAIT 状态过多，会导致无法创建新连接。这个也是我们在一开始讲到的那个例子。”<br>这里不是很理解，服务端提供服务应该就只用一个端口号吧？而客户端请求服务应该也是只使用一个端口号吧？普通个人客户就发起一个请求只用一个端口号，为什么会出现端口号不够用的情况？难道指的的为客户服务的代理服务器可能会端口号不够用吗？因为代理服务器要处理来自成千上万的客户请求，需要选择不同的端口号为客户服务，将请求发给服务器吗？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516350,"discussion_content":"这个例子是客户端发起连接过多，每次发起连接都会占用一个端口。客户端和服务端是相对，比如一个应用程序对于客户的请求是服务端，同时为了服务这个客户请求，又要向另一个服务发起调用请求(典型的例子是向数据库发起连接请求)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615125509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242322,"user_name":"Atong","can_delete":false,"product_type":"c1","uid":1061005,"ip_address":"","ucode":"7E9D4B8D108E4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/8d/a2a4e97e.jpg","comment_is_top":false,"comment_ctime":1597671409,"is_pvip":true,"replies":[{"id":"90114","content":"文章中应该说明了，是因为端口被占用完毕，在系统没有及时清理之前，新连接无法建立连接了。直到系统清理完成，才可以服务新的连接。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1598794963,"ip_address":"","comment_id":242322,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10187606001","product_id":100032701,"comment_content":"老师有一个问题请教：<br>已知的知识点：<br>1. TCP的四次挥手，只有主动断开的那端才会出现TIME_WAIT状态。<br>2. 一个socket连接，是由一个四元祖标识，client_ip,client_port,server_ip,server_port<br><br>针对老师提到的一个线上服务时好时坏的描述，存在疑问的点：<br>【原文】<br>该服务的可用性变得时好时坏，一段时间可以对外提供服务，一段时间突然又不可以，大家都百思不得其解。运维同学登录到服务所在的主机上，使用 netstat 命令查看后才发现，主机上有成千上万处于 TIME_WAIT 状态的连接。<br><br>【疑问】<br>问题1.  线上服务作为服务端，对外提供给客户端连接。假如都是服务端主动断开了连接，会存在较多TIME_WAIT。 此时会占用掉一些部分服务端的内容。除此之外会有什么其他的资源占用吗？ <br><br>问题2. 接问题1的情况，理论服务端的程序监听端口可以复用，就算是存在较多TIME_WAIT。Client端还是能够连接到服务端的监听端口的。为什么会表现为有时可连，有时不可连呢？<br><br>问题3：最终这个线上的问题，是通过什么方法进行解决的？<br><br>【我的猜测】<br>1. 我个人的推测，是不是因为server端存在较多time_wait。就说明socket是还没有完全关闭的。也就是说除了占用内存资源。也占用着套接字资源，套接字就是一个文件描述符。过多的TIME_WAIT，再加上已经建立的正常连接，就造成服务端没有更多的文件描述符来服务新的连接请求。 <br>老师不懂我这样推测是不是对的，望您能帮忙解答下。","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503977,"discussion_content":"文章中应该说明了，是因为端口被占用完毕，在系统没有及时清理之前，新连接无法建立连接了。直到系统清理完成，才可以服务新的连接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598794963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2902752,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJaaRiaBo5xtYPib3az6lBtSG8ibebDUVGgSMRPD3nGn9hr0Iz8dDZXxMzsUV2M7uiaicBg9HdBxcSFic7g/132","nickname":"Geek_b83fff","note":"","ucode":"AFA20C90BCBF02","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":570520,"discussion_content":"这回答没理解问的问题吧，回答很官方，想问的是为什么服务端会出现这个情况，服务端端口是复用的，就算1亿个连接 和服务端也没关系吧，怎么会出现端口不够用啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651804278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":503977,"ip_address":""},"score":570520,"extra":""}]},{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332407,"discussion_content":"1个socket连接应该是一个5元组 还包括协议类型(tcp/udp)\n\n服务端存在较多的TIME_WAIT 表示有大量的端口没有释放,  而一般情况下服务端的server(nginx等) 设置的可用连接数量是有限的(worker_connections), 超过这个限度, nginx就会禁止客户端新的TCP连接.\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607182306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133340,"user_name":"灰色","can_delete":false,"product_type":"c1","uid":1178135,"ip_address":"","ucode":"869B400BBD520D","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/17/d0b8135f.jpg","comment_is_top":false,"comment_ctime":1568521344,"is_pvip":false,"replies":[{"id":"51619","content":"如果能连上，我觉得是吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568886985,"ip_address":"","comment_id":133340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10158455936","product_id":100032701,"comment_content":"如果服务端主动关闭一些连接，那么在服务端会出现一些处于TIME_WAIT状态的连接，如果客户端绑定相同的端口，重新连接服务端，连接还是可以立即建立成功，那是不是就出现了原来连接的“化身”？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467357,"discussion_content":"如果能连上，我觉得是吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568886985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127098,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1566553254,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10156487846","product_id":100032701,"comment_content":"关于第二个问题，思考了第二遍，因为是发送方的当前时间戳和从对方接受到的最新时间戳，如果接收方改了时间然后再从网络里面取出来自己上一次的发送的时间戳有很大差异就会出问题了，比如往前改或者往后改！最关键我觉得还是看怎么通过时间戳判断生存时间！","like_count":2,"discussions":[{"author":{"id":1079816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","nickname":"Aaron Cheung","note":"","ucode":"03972759C53667","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304034,"discussion_content":"优秀的成大大，哪里都能看到你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599457054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335851,"user_name":"三年二班邱小东","can_delete":false,"product_type":"c1","uid":2922136,"ip_address":"","ucode":"909B49C63C8EC6","user_header":"https://static001.geekbang.org/account/avatar/00/2c/96/98/89b96cda.jpg","comment_is_top":false,"comment_ctime":1645720099,"is_pvip":true,"replies":[{"id":"122801","content":"哦，那是在答疑里讲到了。19篇里应该有。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1645882136,"ip_address":"","comment_id":335851,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5940687395","product_id":100032701,"comment_content":"基础篇里没讲四次挥手啊","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553414,"discussion_content":"哦，那是在答疑里讲到了。19篇里应该有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645882136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2653715,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKib3vNM6TPT1umvR3TictnLurJPKuQq4iblH5upgBB3kHL9hoN3Pgh3MaR2rjz6fWgMiaDpicd8R5wsAQ/132","nickname":"陈阳","note":"","ucode":"C8E676C967D23A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553387,"discussion_content":"加1  我也没看到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645872585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297067,"user_name":"vv_test","can_delete":false,"product_type":"c1","uid":1685884,"ip_address":"","ucode":"1D164B2F034E2B","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/7c/afe6f1eb.jpg","comment_is_top":false,"comment_ctime":1623297103,"is_pvip":false,"replies":[{"id":"108672","content":"所以有NTP服务嘛","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1624805049,"ip_address":"","comment_id":297067,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5918264399","product_id":100032701,"comment_content":"假如开启了net.ipv4.tcp_tw_reuse，对方主机的时间跟发送方时间本来就有差，这个要怎么避免?","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521708,"discussion_content":"所以有NTP服务嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624805049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285768,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1617006842,"is_pvip":false,"replies":[{"id":"104131","content":"不是拉，发起连接的一方一定是client，接收连接的一方一定是server。在我的例子中，那个应用程序既是server(接收客户请求)，也是client(发起处理请求到另外一台server)。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1617542640,"ip_address":"","comment_id":285768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5911974138","product_id":100032701,"comment_content":"原文：只有发起连接终止的一方会进入 TIME_WAIT 状态。<br><br><br>socket 操作：角色<br>connect：client<br>accept：server<br><br>老师，原文的那句话是说，server 也是可以主动发起连接终止进入 TIME_WAIT 状态是么？之前一直以为只有 connect(client) 端才能发起连接终止。<br>谢谢老师！","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517775,"discussion_content":"不是拉，发起连接的一方一定是client，接收连接的一方一定是server。在我的例子中，那个应用程序既是server(接收客户请求)，也是client(发起处理请求到另外一台server)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617542640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284274,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1616146613,"is_pvip":false,"replies":[{"id":"103194","content":"我觉得吧，应该只有一个新的连接了，旧的就不存在了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1616315321,"ip_address":"","comment_id":284274,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5911113909","product_id":100032701,"comment_content":"老师您的回复：<br>不是端口复用，是复用处于 TIME_WAIT 的套接字为新的连接所用。<br><br>----<br><br>约定：<br>旧的四元组：&lt;old_client_ip，old_client_port，old_server_ip，old_server_port&gt;<br>新的四元组：&lt;new_client_ip，new_client_port，new_server_ip，new_server_port&gt;<br><br>当前 TIME_WAIT 的套接字（假设名字为 socket_a）被新的连接复用了，新连接使用该套接字完成三次握手、发数据。<br>1. socket_a 为两个连接服务么？因此 socket_a 需要通过 &lt;old_server_ip&#47;port&gt; 和 &lt;new_server_ip&#47;port&gt; 来区分消息是谁发的？<br>2. old_client_ip 与 new_client_ip 相同，但是 old_client_port 和 new_client_port 不同，是么？<br>3. 当 socket_a 被新连接复用后，old_server 目前只会发送 FIN（不会发其他数据），socket_a 收到后需要对 old_server 回复 ACK 么，还是说直接不理会？<br><br>谢谢老师！","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517294,"discussion_content":"我觉得吧，应该只有一个新的连接了，旧的就不存在了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616315321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573856,"discussion_content":"没说清楚！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653690526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236477,"user_name":"stackWarn","can_delete":false,"product_type":"c1","uid":1002005,"ip_address":"","ucode":"89672E452DEBA5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","comment_is_top":false,"comment_ctime":1595424507,"is_pvip":false,"replies":[{"id":"87600","content":"是一个办法，不过要看具体ROI是不是合理的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1595679915,"ip_address":"","comment_id":236477,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890391803","product_id":100032701,"comment_content":"最简单直接的方法是使用长连接","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502085,"discussion_content":"是一个办法，不过要看具体ROI是不是合理的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595679915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182716,"user_name":"Tesla","can_delete":false,"product_type":"c1","uid":1500742,"ip_address":"","ucode":"98629AFD9861EE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibe7qvTu8Vic1PVs2EibxoUdx930MC7j2Q9A6s4eibMDZlcicMFY0D0icd3RrDorMChu0zw/132","comment_is_top":false,"comment_ctime":1582855060,"is_pvip":false,"replies":[{"id":"71030","content":"如果是服务端，只需要开启一个端口，例如80， 8080就可以对外服务；无数个客户单往这个端口发请求，可以构成了&lt;请求者IP,请求者端口，服务端IP, 80&gt;这样的四元组，每个四元组表示一个连接。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583052344,"ip_address":"","comment_id":182716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877822356","product_id":100032701,"comment_content":"老师好，一个tcp占用一个端口的话，那一个http请求是不是也要占用一个端口？除非使用异步网络编程模型，否则一个http会新建一个线程并占用一个端口吗？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485425,"discussion_content":"如果是服务端，只需要开启一个端口，例如80， 8080就可以对外服务；无数个客户单往这个端口发请求，可以构成了&amp;lt;请求者IP,请求者端口，服务端IP, 80&amp;gt;这样的四元组，每个四元组表示一个连接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583052344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163663,"user_name":"xbl","can_delete":false,"product_type":"c1","uid":1366484,"ip_address":"","ucode":"78297667D85C92","user_header":"https://static001.geekbang.org/account/avatar/00/14/d9/d4/5bfe1dd8.jpg","comment_is_top":false,"comment_ctime":1576762980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871730276","product_id":100032701,"comment_content":"本节课还是有些难理解 需要多读几遍 如果老师能讲的更详细些就好了","like_count":1},{"had_liked":false,"id":154596,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1574488741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869456037","product_id":100032701,"comment_content":"1：TIME_WAIT代表着什么？<br>首先，TIME_WAIT是TCP连接的一种状态，且只有发起一次TCP连接终止的一方才会进入这种状态。<br>这种状态表示等待被动关闭连接的一方正确关闭，这个等待时间是2MSL=60秒，另外，这个状态还起到让旧连接的重复分节在网络中自然消失的作用。<br>MSL是最长分节生命周期时间=30秒，分节我没理解是什么意思？是指从一端发送一个可发送的最大消息嘛？<br>如果让我想象的话，把一个TCP连接比喻为一根水管，现在想关闭这根水管的连接，一端会发送一个消息到另一端说他想断开连接，另一端接到消息后会把水管中的水处理完，然后发送一个消息说她知道了，由于这根水管是双向的，所以，被动关闭的一方也会发送一条消息告诉发起端，他的收尾工作做完了，现在处于可关闭状态，发起端收到消息后会发送一个确认关闭消息，然后等60秒，被动关闭端接受到响应消息后进入真正的关闭状态。<br>我猜想一个TCP连接关闭的流程如此复杂，主要是因为两个原因，一是TCP连接传输的是字节流，不能说关就关，这样可能导致字节流信息的不完整，第二个原因是TCP连接是双工通信，两端都可读写，关闭的连接的动作需要双方配合，首先，知道这个连接要关闭了，就不再进行写操作了，另外，处理完此次的读操作。<br><br>2：为啥会出现TIME_WAIT？<br>参考1<br><br>3：TIME_WAIT所带来的负面影响？<br>只要进行TCP的连接断开操作，必然会出现TIME_WAIT这个状态，如果量少无所谓，反正一会就会消失，如果持续出现，且不断增长就会导致出现一些问题了，因为这个状态会占用内存空间，同时也会占用通信端口，内存空间的占用量比较少问题不大，不过端口资源的占用可能会导致无法创建新连接，这个就比较严重了，新连接不可创建意味着就不能进行连接和通信。我目前还没碰到过这种情况，看评论，又得到一个新的认知TCP的服务端监听的端口是唯一的，不过连接的端口是不确定的具体有内核决定用那个，这个要验证一下。<br><br>4：设计TIME_WAIT这个状态是为了解决啥问题？<br>参考1","like_count":1},{"had_liked":false,"id":133905,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1568695130,"is_pvip":false,"replies":[{"id":"51608","content":"不会不消失的，系统过了一段时间会自动回收TIME_WAIT状态的连接。如果是突然出现大批的TIME_WAIT连接，需要看一下处理断连的逻辑。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568885589,"ip_address":"","comment_id":133905,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5863662426","product_id":100032701,"comment_content":"服务器出现大量time wait并且一直不消失 老师这是啥情况 怎么解决？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467551,"discussion_content":"不会不消失的，系统过了一段时间会自动回收TIME_WAIT状态的连接。如果是突然出现大批的TIME_WAIT连接，需要看一下处理断连的逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568885589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130906,"user_name":"网络人","can_delete":false,"product_type":"c1","uid":1651534,"ip_address":"","ucode":"DDFE366083C25E","user_header":"https://static001.geekbang.org/account/avatar/00/19/33/4e/507ad4ea.jpg","comment_is_top":false,"comment_ctime":1567570064,"is_pvip":false,"replies":[{"id":"50833","content":"windows下没有研究过，不过应该大差不差的，类似的机制吧，你可以读读MSDN。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568195791,"ip_address":"","comment_id":130906,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862537360","product_id":100032701,"comment_content":"老师，能讲下windows平台下有没有提供更安全的选择呢？有没有类似的方法？可以提供代码参考下吗？<br>","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466190,"discussion_content":"windows下没有研究过，不过应该大差不差的，类似的机制吧，你可以读读MSDN。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568195791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129756,"user_name":"扬～","can_delete":false,"product_type":"c1","uid":1208163,"ip_address":"","ucode":"6FA7D8FE188341","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/63/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1567240950,"is_pvip":false,"replies":[{"id":"50845","content":" netstat看一下，看看是什么进程，什么端口，为什么会有这个现象。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568196889,"ip_address":"","comment_id":129756,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5862208246","product_id":100032701,"comment_content":"当机器出现大量的time wait 状态，原因该如何排查呀，谢谢老师","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465631,"discussion_content":" netstat看一下，看看是什么进程，什么端口，为什么会有这个现象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568196889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25516,"discussion_content":"学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570535423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127339,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1566657731,"is_pvip":false,"replies":[{"id":"48206","content":"大部分程序是需要这么干的，不是什么&quot;坏&quot;习惯。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567131970,"ip_address":"","comment_id":127339,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861625027","product_id":100032701,"comment_content":"使用SO_REUSEADDR和SO_REUSEPORT这两个选项是好的方法吗？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464449,"discussion_content":"大部分程序是需要这么干的，不是什么&amp;quot;坏&amp;quot;习惯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567131970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6165,"discussion_content":"是的。引用我在上面的回答:\nTIME_WAIT 状态是一定要有的， SO_REUSEADDR 之前在最大限度的实现地址的重用。TCP 连接可以用四元组(本端IP, 本端port, 对端IP, 对端port)唯一确定。如果没有设置 SO_REUSEADDR， 本端 IP 都不能重用。而设置了的话，只要四元组不同，就可以重用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566736098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350175,"user_name":"卖藥郎","can_delete":false,"product_type":"c1","uid":1231829,"ip_address":"","ucode":"0539EF1D335918","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/d5/fab32cf7.jpg","comment_is_top":false,"comment_ctime":1656639342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656639342","product_id":100032701,"comment_content":"感觉写的比较乱 不太清晰","like_count":0},{"had_liked":false,"id":345786,"user_name":"成为优秀的程序员","can_delete":false,"product_type":"c1","uid":2275516,"ip_address":"","ucode":"6D9080A2B225AE","user_header":"https://static001.geekbang.org/account/avatar/00/22/b8/bc/d2d547c9.jpg","comment_is_top":false,"comment_ctime":1652595937,"is_pvip":true,"replies":[{"id":"126188","content":"根据序列号，重复的可以发现。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1652614040,"ip_address":"","comment_id":345786,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652595937","product_id":100032701,"comment_content":"看完文章，突然有个疑问，TCP是怎么处理重复报文问题的。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572129,"discussion_content":"根据序列号，重复的可以发现。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652614040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338322,"user_name":"Info_E","can_delete":false,"product_type":"c1","uid":1755152,"ip_address":"","ucode":"97207B2CC4C776","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/VTPuhJb5xxuRwH1iblqrAe3De4PoETgNWibZRkLlhvszysdtpAvSPZFuYtsJfWJmoXOFFWnpR02W9NGIiammU8UPg/132","comment_is_top":false,"comment_ctime":1647423012,"is_pvip":false,"replies":[{"id":"124146","content":"👍🏻","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1648297945,"ip_address":"","comment_id":338322,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1647423012","product_id":100032701,"comment_content":"为什么是2MSL，不是1MSL 原因是 ：<br>服务端发送FIN后开始倒计时，假设0.2MSL到达客户端，并且超过1MSL没有收到ACK就重发FIN；<br>客户端收到FIN后，发送ACK，假设网络拥堵，这个ACK在客户端发送0.9MSL才到达服务端；<br>服务端因为发送FIN 耗时 0.2 + 客户端发送ACK 0.9 = 1.1 &gt; 1 MSL，所以服务端重发了FIN；<br>假设这个FIN又因为拥堵，花费了0.9MSL才到达客户端；<br>在客户端看来，从发送ACK，到重新接受FIN，花费时间是ACK0.9 + FIN0.9 = 1.8MSL。<br>综上：为了确保客户端能接收到服务端的FIN，那么客户端接受到FIN后必须等待时间 &gt;1.8MSL才行。以上数据只是假设，可以把0.9替换成0.9999999999999，取个极限，那么客户端TIME_WAIT 就无限趋近于2MSL。 所以 TIME_WAIT设置为2MSL是安全的。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558437,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648297946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573857,"discussion_content":"你这逻辑不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653690591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333734,"user_name":"tianbingJ","can_delete":false,"product_type":"c1","uid":2163653,"ip_address":"","ucode":"666141CAD8260F","user_header":"https://static001.geekbang.org/account/avatar/00/21/03/c5/600fd645.jpg","comment_is_top":false,"comment_ctime":1644490458,"is_pvip":true,"replies":[{"id":"122010","content":"这应该不行，这是两个不同的TCP连接。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1644729132,"ip_address":"","comment_id":333734,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1644490458","product_id":100032701,"comment_content":"“一个 TCP 连接至少消耗一个本地端口”是不是影响局限于固定对方的条件下？<br>比如一个client和一个server建立起了连接1，占用一个端口port1；它依然可以用port1和server 2建立连接；端口port1被使用了两次。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550760,"discussion_content":"这应该不行，这是两个不同的TCP连接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644729132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2163653,"avatar":"https://static001.geekbang.org/account/avatar/00/21/03/c5/600fd645.jpg","nickname":"tianbingJ","note":"","ucode":"666141CAD8260F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550512,"discussion_content":"好像是实现上的限制导致client端上的port不能重用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644572695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316171,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1634189915,"is_pvip":false,"replies":[{"id":"115263","content":"总结的挺到位 👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1635128141,"ip_address":"","comment_id":316171,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634189915","product_id":100032701,"comment_content":"TIME_WAIT的作用<br>1.确保TCP四次挥手中最后的ACK让被动方接收到，使其正常关闭<br>2.避免相同四元组（源IP，源端口，目的IP，目的端口）的旧连接对新连接产生影响<br><br>TIME_WAIT状态固定时间是60s，并且只有主动关闭一方会进入这个状态<br><br>TIME_WAIT的危害<br>1.占内存，基本可以忽略<br>2.占用本地端口资源，端口是有限的，如果TIME_WAIT状态过多，就无法创建新连接了<br>备注：服务端的端口是固定的，比如8080，需要提前开启监听，但客户端的端口是由操作系统内核临时分配的，所以端口是有限制的<br><br>优化 TIME_WAIT的方法<br>1.将TIME_WAIT状态连接的阈值降低，修改net.ipv4_tcp_max_tw_buckets<br>系统中处于TIME_WAIT的连接超过阈值，比较暴力，治标不治本<br>2.调低TIME_WAIT状态的等待时间，修改TCP_TIMEWAIT_LEN，但需要重新编译内核系统<br>3.设置SO_LINGER，比较危险，具体原理我也不懂<br>4.使用 net.ipv4.tcp_tw_reuse 更安全的设置<br>Allow to reuse TIME-WAIT sockets for new connections when it is safe from protocol viewpoint. Default value is 0.It should not be changed without advice&#47;request of technical experts.<br>大意是从协议角度理解如果是安全的，可以复用处于 TIME_WAIT状态下的套接字给新的连接使用<br>我理解之前的套接字还在，被新的连接复用了<br>复用的什么？复用的套接字即 源ip，源端口，目标ip，目标端口这个四元组<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528292,"discussion_content":"总结的挺到位 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635128141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292250,"user_name":"leesper","can_delete":false,"product_type":"c1","uid":1351104,"ip_address":"","ucode":"CC76320571BECA","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/c0/cb5341ec.jpg","comment_is_top":false,"comment_ctime":1620739195,"is_pvip":false,"replies":[{"id":"106721","content":"问题是你得构造出这样的包来","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1621779015,"ip_address":"","comment_id":292250,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620739195","product_id":100032701,"comment_content":"“2MSL 的时间是从主机 1 接收到 FIN 后发送 ACK 开始计时的”，如果主机2恶意的不停发FIN包给主机1，让它长时间处于TIME_WAIT状态，这是不是一种网络攻击呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519747,"discussion_content":"问题是你得构造出这样的包来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621779015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249877,"user_name":"jin","can_delete":false,"product_type":"c1","uid":1202896,"ip_address":"","ucode":"DCA0E9C1F7838F","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/d0/5be738e0.jpg","comment_is_top":false,"comment_ctime":1600840992,"is_pvip":false,"replies":[{"id":"92051","content":"哦，理论上是的，不过实际中还是端口不会重复的，毕竟实现起来比较简单直接。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601870726,"ip_address":"","comment_id":249877,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600840992","product_id":100032701,"comment_content":"老师好，想请教一个问题：<br>您文章里提到的“应用服务需要通过发起 TCP 连接对外提供服务“，我的理解是这里应用服务是作为客户端的角色，然后每建立一次连接，就会让操作系统默认新分配一个端口用于新的套接字。我的问题是，这里的端口不可以重复使用吗？因为TCP的套接字标识符是 (c_ip:c_port, s_ip:s_port)，分为两种情况：<br>1. server不同，那只有c_ip和c_port重复也没关系吧？<br>2. server相同，那为了防止混乱，只能每次使用一个新端口，您的应用服务是这种情况吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506043,"discussion_content":"哦，理论上是的，不过实际中还是端口不会重复的，毕竟实现起来比较简单直接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601870726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248220,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":2128686,"ip_address":"","ucode":"B7064B564F8ECB","user_header":"https://static001.geekbang.org/account/avatar/00/20/7b/2e/e3facf52.jpg","comment_is_top":false,"comment_ctime":1600068414,"is_pvip":false,"replies":[{"id":"92049","content":"我在19讲会讲到。:)","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601869953,"ip_address":"","comment_id":248220,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600068414","product_id":100032701,"comment_content":"”在前面的基础篇里，我们了解了 TCP 四次挥手，在四次挥手的过程中，发起连接断开的一方会有一段时间处于 TIME_WAIT 的状态，你知道 TIME_WAIT 是用来做什么的么？“  老师你这个基础篇没讲TCP 四次挥手吧？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505587,"discussion_content":"我在19讲会讲到。:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601869953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243297,"user_name":"晚风·和煦","can_delete":false,"product_type":"c1","uid":1236047,"ip_address":"","ucode":"0B1DB8F437A4B2","user_header":"","comment_is_top":false,"comment_ctime":1598024134,"is_pvip":false,"replies":[{"id":"90116","content":"写一个程序验证一下？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1598795219,"ip_address":"","comment_id":243297,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598024134","product_id":100032701,"comment_content":"老师，如果套接字的接收缓冲区的数据没有读出来，直接关闭，是不是会发送RST","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504249,"discussion_content":"写一个程序验证一下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598795219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234935,"user_name":"范广宇","can_delete":false,"product_type":"c1","uid":1248960,"ip_address":"","ucode":"FC4F73F683937E","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/c0/ec9dcece.jpg","comment_is_top":false,"comment_ctime":1594830147,"is_pvip":false,"replies":[{"id":"86819","content":"一般我们在Linux下调用的都是glibc库函数，而glibc是封装了系统调用的标准C语言库。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594908476,"ip_address":"","comment_id":234935,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594830147","product_id":100032701,"comment_content":"老师，我想问个不和这节课沾边的问题。我想问下，咱们写程序的socket相关函数，是属于系统调用？还是属于封装了系统调用的库函数呢？今天查了一些资料也没找到什么有说服力的结果。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501553,"discussion_content":"一般我们在Linux下调用的都是glibc库函数，而glibc是封装了系统调用的标准C语言库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594908476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226794,"user_name":"郑祖煌","can_delete":false,"product_type":"c1","uid":1469608,"ip_address":"","ucode":"49A0D2E3279826","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","comment_is_top":false,"comment_ctime":1592205617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592205617","product_id":100032701,"comment_content":"由于内存占用的影响忽略不计，所以主要还是端口占用对应用程序的影响更大。 如何正确的处理TIME_WAIT,主要一个是SO_LINGER 的设置truct linger {　int　 l_onoff;　int　 l_linger; } 开启的时候设置l_onoff设置为1，同时设置l_linger设置一个可控的时间。切忌设置为0， 为0将跳过四次挥手直接close.发送对端RST。 2）设置net.ipv4.tcp_tw_reuse同时得设置net.ipv4.tcp_timestamps=1（默认即为 1）打开。","like_count":0},{"had_liked":false,"id":226789,"user_name":"郑祖煌","can_delete":false,"product_type":"c1","uid":1469608,"ip_address":"","ucode":"49A0D2E3279826","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","comment_is_top":false,"comment_ctime":1592205139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592205139","product_id":100032701,"comment_content":"TIME_WAIT的作用：<br>1） 确保对方能够正确收到最后的ACK，帮助其关闭；<br>2） 防迷走报文对程序带来的影响。<br>TIME_WAIT的危害：<br>1） 占用内存；<br>2） 占用端口","like_count":0},{"had_liked":false,"id":224506,"user_name":"宋菁","can_delete":false,"product_type":"c1","uid":1880075,"ip_address":"","ucode":"7105B7D5B1E338","user_header":"","comment_is_top":false,"comment_ctime":1591423764,"is_pvip":false,"replies":[{"id":"84262","content":"我觉得是可以的，比如报文编号和时间戳有关系，就可以保证报文编号是线性不同的。但是设计TCP是那么久远之前的事情，所以当时是没有考虑这么周详的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1592739824,"ip_address":"","comment_id":224506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591423764","product_id":100032701,"comment_content":"迷走报文的问题不好处理，tcp链路重连后，报文编号应该和之前的链路不一致了，能不能解决迷走报文？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497500,"discussion_content":"我觉得是可以的，比如报文编号和时间戳有关系，就可以保证报文编号是线性不同的。但是设计TCP是那么久远之前的事情，所以当时是没有考虑这么周详的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592739824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206165,"user_name":"WhatAKitty","can_delete":false,"product_type":"c1","uid":1135707,"ip_address":"","ucode":"911C089450926B","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/5b/1a14d829.jpg","comment_is_top":false,"comment_ctime":1586800450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586800450","product_id":100032701,"comment_content":"第一个问题：<br>在主动关闭一方发送确认报文后，有以下两种异常情况会发生：<br>a. 被动关闭一方没有收到ACK，超时重传FIN<br>b. 被动一方收到ACK，不会再发任何消息，包括ACK<br><br>这两种情况主动关闭一方都需要等待，而最坏等待时长为：<br>去时ACK的最大存活时间（MSL）+来时FIIN的最大存活时间（MSL） = 2MSL<br><br>所以这样能确保所有的活跃报文全部消亡<br><br>第二个问题：<br>不需要","like_count":0},{"had_liked":false,"id":200076,"user_name":"张天屹","can_delete":false,"product_type":"c1","uid":1477612,"ip_address":"","ucode":"8BD6BD6DCF0F4F","user_header":"https://static001.geekbang.org/account/avatar/00/16/8b/ec/dc03f5ad.jpg","comment_is_top":false,"comment_ctime":1585540313,"is_pvip":false,"replies":[{"id":"75793","content":"是同一个端口，服务端不会为新连接开启新的端口的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586076949,"ip_address":"","comment_id":200076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585540313","product_id":100032701,"comment_content":"比如服务通过固定的80端口提供服务，一万的并发HTTP请求过来  都是同一个端口哇，不是很理解每次请求一个新的TCP连接一个新的端口的场景","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489934,"discussion_content":"是同一个端口，服务端不会为新连接开启新的端口的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586076949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199644,"user_name":"徐衡","can_delete":false,"product_type":"c1","uid":1881664,"ip_address":"","ucode":"06EBCB2F507603","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b6/40/6060d233.jpg","comment_is_top":false,"comment_ctime":1585493080,"is_pvip":false,"replies":[{"id":"75789","content":"这个应该是实现细节了，不过程序员就是喜欢关注细节的。<br><br>我想这个类似异常处理的场景，是不是类似有时间计时器之类的，在超过一定时间之后，这样异常状态的连接会被系统自动清理掉，也就是说端口随之释放掉。不过这种罕见的场景大概只能从源码中看到端倪了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586076828,"ip_address":"","comment_id":199644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585493080","product_id":100032701,"comment_content":"引用评论中的问题再问一个问题，<br>在FIN_WAIT_1或FIN_WAIT_2到下一个状态之间的转换缺少必要的条件，会停留在这个状态，有就是说不会往下一个状态转换，那么 client端的这个连接就会一直占用着吗？<br><br>胡波 allenhu<br>老师，请问如果本方调用close后发送FIN，对方没有回ACK,或者回了ACK, 但是对方没有回FIN, 这个时候本方的SOCKET会一直是FIN_WAIT_1或FIN_WAIT_2状态吗？会不会到TIME_WAIT状态<br>作者回复: 好问题，我个人理解这是一个转态驱动的，如果从FIN_WAIT_1或FIN_WAIT_2到下一个状态之间的转换缺少必要的条件，会停留在这个状态，有就是说不会往下一个状态转换。<br><br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489859,"discussion_content":"这个应该是实现细节了，不过程序员就是喜欢关注细节的。\n\n我想这个类似异常处理的场景，是不是类似有时间计时器之类的，在超过一定时间之后，这样异常状态的连接会被系统自动清理掉，也就是说端口随之释放掉。不过这种罕见的场景大概只能从源码中看到端倪了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586076828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173640,"user_name":"刘忽悠","can_delete":false,"product_type":"c1","uid":1252173,"ip_address":"","ucode":"095DE3A8D3F450","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/4d/2cc44d9a.jpg","comment_is_top":false,"comment_ctime":1579638151,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579638151","product_id":100032701,"comment_content":"1. ip协议里面有一个ttl字段，这个字段的值每次经过一个路由器就-1，减到0就丢弃，返回一个icmp消息；<br>2 rtt时间是通过回显的方式，发送方收到以后，根据自己的时间计算的","like_count":0},{"had_liked":false,"id":173639,"user_name":"刘忽悠","can_delete":false,"product_type":"c1","uid":1252173,"ip_address":"","ucode":"095DE3A8D3F450","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/4d/2cc44d9a.jpg","comment_is_top":false,"comment_ctime":1579637681,"is_pvip":true,"replies":[{"id":"68040","content":"服务器在LAST_ACK状态，如果收到RST，自然认为自己是一个&quot;终止&quot;的连接，将自己的状态置为closed即可。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580624243,"ip_address":"","comment_id":173639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579637681","product_id":100032701,"comment_content":"2msl一定能保证服务器正常关闭吗？<br>如果服务器一直收不到最后的ack呢？假如说当服务器发送fin以后，客户端也收到了，但是因为网络状态不好，ack传不过去，导致客户端2msl计时器到时了，接着关闭了，那服务器是不是一直处在last_lack状态，服务器的rto计时器不停超时重传，一直到客户端收到fin以后，发现自己已经关闭了，发送rst报文给服务器，服务器收到rst以后出错呢？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482149,"discussion_content":"服务器在LAST_ACK状态，如果收到RST，自然认为自己是一个&amp;quot;终止&amp;quot;的连接，将自己的状态置为closed即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580624243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159074,"user_name":"Geek_68d3d2","can_delete":false,"product_type":"c1","uid":1674369,"ip_address":"","ucode":"EBD6D881AA7A74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","comment_is_top":false,"comment_ctime":1575533312,"is_pvip":false,"replies":[{"id":"61027","content":"不是的，旧连接产的报文消失和2MSL紧密有关，这是需要让连接推迟一段时间关闭；而ACK是为了维护连接的状态，相当于保持了一个连接的上下文信息。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575799231,"ip_address":"","comment_id":159074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575533312","product_id":100032701,"comment_content":"我怎么感觉TIME_WAIT的那两个好处是一样的啊。A收到了FIN发送一个ACK，此时网络中由旧有的链接产生的报文就只剩一个ACK了吧，保证最后一个ACK能够到达对端和保证旧有连接产生的报文全部消失是一回事吧？？？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476939,"discussion_content":"不是的，旧连接产的报文消失和2MSL紧密有关，这是需要让连接推迟一段时间关闭；而ACK是为了维护连接的状态，相当于保持了一个连接的上下文信息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575799231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159072,"user_name":"Geek_68d3d2","can_delete":false,"product_type":"c1","uid":1674369,"ip_address":"","ucode":"EBD6D881AA7A74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","comment_is_top":false,"comment_ctime":1575532346,"is_pvip":false,"replies":[{"id":"61028","content":"你可以简单理解为就是2MSL，时间约为60秒。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575799257,"ip_address":"","comment_id":159072,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575532346","product_id":100032701,"comment_content":"TIME_WAIT和2MSL是什么关系啊。TIME_WAIT的时间要么是60秒要么是2MSL吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476938,"discussion_content":"你可以简单理解为就是2MSL，时间约为60秒。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575799257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152614,"user_name":"wg1993","can_delete":false,"product_type":"c1","uid":1357623,"ip_address":"","ucode":"D5112FEFDB1DF7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJmBKrLvqOIXDDbj3ocEIJzqsQx2e5VLDBSX6LmofYtprWwKaVAmHUqU2z3mjREHX8n9eLLiavlPg/132","comment_is_top":false,"comment_ctime":1574050554,"is_pvip":false,"replies":[{"id":"59325","content":"没有反啊，这里是说，假设TTL为60秒(这个是一个理论期望的固定值)，那么由于经历了60次转发，导致MSL肯定大于60秒，所以MSL &gt;= TTL必然成立。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1574497897,"ip_address":"","comment_id":152614,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574050554","product_id":100032701,"comment_content":"MSL&gt;=TTL，如果MSL=60s，TTL=60，老师在下面说是每次路由器转发时间都大于1s，保证时间肯定超过60s。。。个人感觉说反了吧，应该是每次转发时间都小于1s，保证即便经过60次转发时间也肯定小于60s。。。这个地方不太理解啊","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474876,"discussion_content":"没有反啊，这里是说，假设TTL为60秒(这个是一个理论期望的固定值)，那么由于经历了60次转发，导致MSL肯定大于60秒，所以MSL &amp;gt;= TTL必然成立。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574497897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148610,"user_name":"绿箭侠","can_delete":false,"product_type":"c1","uid":1528536,"ip_address":"","ucode":"B994F558A98E29","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","comment_is_top":false,"comment_ctime":1573038087,"is_pvip":false,"replies":[{"id":"57489","content":"是的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1573283155,"ip_address":"","comment_id":148610,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573038087","product_id":100032701,"comment_content":"2MSL，总结的说，当出现网络包迷走，刚好当ack到达对端瞬间，对端发出另一个fin包，这样主动关闭方在网络包最大存活时间内接收到它并发出另一个ack，再重新计时，直到对端正常关闭？！！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473553,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573283155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144625,"user_name":"helloworld2018","can_delete":false,"product_type":"c1","uid":1210386,"ip_address":"","ucode":"2AE40C0DF5A9F7","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/12/7df38a54.jpg","comment_is_top":false,"comment_ctime":1571984715,"is_pvip":false,"replies":[{"id":"55809","content":"你的问题是如果复用了这个端口，但是ACK没有发出去是么？如果是这样，我觉得是系统会不断的重试的，直到这个ACK发出去为止。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572057443,"ip_address":"","comment_id":144625,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571984715","product_id":100032701,"comment_content":"老师你好，有个问题需要您帮忙解答一下，<br>设置了tcp_tw_reuse之后，如果被动关闭的一方确实没有收到ack，这种情况下TIME_WAIT状态的端口是不能被复用的，这种情况系统是如何判断的？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472038,"discussion_content":"你的问题是如果复用了这个端口，但是ACK没有发出去是么？如果是这样，我觉得是系统会不断的重试的，直到这个ACK发出去为止。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572057443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141789,"user_name":"绿箭侠","can_delete":false,"product_type":"c1","uid":1528536,"ip_address":"","ucode":"B994F558A98E29","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","comment_is_top":false,"comment_ctime":1571224939,"is_pvip":false,"replies":[{"id":"55111","content":"是说强行关闭TIME_WAIT的连接，直接跳过TCP四次挥手的过程，这会导致连接关闭的正常清理工作不能有效的执行，同时也不能使用TIME_WAIT带来的2MSL数据包自动消亡的特性。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571455683,"ip_address":"","comment_id":141789,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571224939","product_id":100032701,"comment_content":"第二种可能为跨越 TIME_WAIT 状态提供了一个可能，不过是一个非常危险的行为，不值得提倡。     这句话没理解，危险的行为怎么解释？？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470889,"discussion_content":"是说强行关闭TIME_WAIT的连接，直接跳过TCP四次挥手的过程，这会导致连接关闭的正常清理工作不能有效的执行，同时也不能使用TIME_WAIT带来的2MSL数据包自动消亡的特性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571455683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140108,"user_name":"酸葡萄","can_delete":false,"product_type":"c1","uid":1154146,"ip_address":"","ucode":"9D059C4FB327C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","comment_is_top":false,"comment_ctime":1570810226,"is_pvip":false,"replies":[{"id":"55073","content":"会啊，这个过程就这样一直进行下去，直到主机1收到主机2的FIN包。在具体情况下，这种情况应该是很少见的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571451340,"ip_address":"","comment_id":140108,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570810226","product_id":100032701,"comment_content":"“划重点，2MSL 的时间是从主机 1 接收到 FIN 后发送 ACK 开始计时的；如果在 TIME_WAIT 时间内，因为主机 1 的 ACK 没有传输到主机 2，主机 1 又接收到了主机 2 重发的 FIN 报文，那么 2MSL 时间将重<br>新计时。道理很简单，因为 2MSL 的时间，目的是为了让旧连接的所有报文都能自然消亡，现在主机 1<br>重新发送了 ACK 报文，” 老师您好，请教一个问题，对上面的这段话有个疑问，如果主机1最后的ACK由于某种原因一直没有传到主机2，主机2不就会反复向主机1发FIN，然后主机1反复发ACK，反复重新及时2MSL，会这样吗？应该是不会的吧，那这种情况是怎么处理的呢，是主机2多次收不到主机1的ACK就自动结束了吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470248,"discussion_content":"会啊，这个过程就这样一直进行下去，直到主机1收到主机2的FIN包。在具体情况下，这种情况应该是很少见的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571451340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138507,"user_name":"酸葡萄","can_delete":false,"product_type":"c1","uid":1154146,"ip_address":"","ucode":"9D059C4FB327C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","comment_is_top":false,"comment_ctime":1570284886,"is_pvip":false,"replies":[{"id":"54308","content":"TIME_WAIT是一个状态，没有报文消息的；<br><br>根据程序代码，只有收到ACK时才会close，说明肯定是收到了ACK报文的。否则一直在等待客户端报文。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570971654,"ip_address":"","comment_id":138507,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570284886","product_id":100032701,"comment_content":"调了下第11讲那个demo，client用shutdown主动关闭连接时，结合第10讲应该进入TIME_WAIT状态，然后server收到client最后发出的FIN ACK后进入closed状态，有两个问题不是很明白：<br>第一：我用wireshark抓包好像没有找到TIME_WAIT相关的报文，这个TIME_WAIT在抓包中有体现吗？<br>而且client立刻就退出了，TIME_WAIT状态是一直在的吗？（client立即退出后的2MSL时间内），我自己的理解是client立即退出是应用层的事，TCP内部的协议层，实际上还处在TIME_WAIT状态，我理解的对吗？<br>第二：server程序最终成功退出了，退出成功是不是就说明收到了client(主动关闭的一方)发来的ACK，换句话说如果client最后发出的 ACK没有被server收到，server是不是就不会退出呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469548,"discussion_content":"TIME_WAIT是一个状态，没有报文消息的；\n\n根据程序代码，只有收到ACK时才会close，说明肯定是收到了ACK报文的。否则一直在等待客户端报文。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570971654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138505,"user_name":"酸葡萄","can_delete":false,"product_type":"c1","uid":1154146,"ip_address":"","ucode":"9D059C4FB327C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","comment_is_top":false,"comment_ctime":1570284105,"is_pvip":false,"replies":[{"id":"54307","content":"一般不需要，当然你是可以这么干的，调用bind函数就可以。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570971440,"ip_address":"","comment_id":138505,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570284105","product_id":100032701,"comment_content":"老师问个问题，client connect server时需要指定server 的端口，client的端口应该是系统随机分配的，client能指定用哪个端口吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469547,"discussion_content":"一般不需要，当然你是可以这么干的，调用bind函数就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570971440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129157,"user_name":"suke","can_delete":false,"product_type":"c1","uid":1007753,"ip_address":"","ucode":"C0287C31A4F45B","user_header":"","comment_is_top":false,"comment_ctime":1567051720,"is_pvip":false,"replies":[{"id":"48199","content":"是不是第二次发送的报文既是对第一次对方FIN报文的ACK，也是自己发送的FIN报文，这样就减少了一次数据传输。<br><br>可以认为这个是一个减少数据发送的优化。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567131233,"ip_address":"","comment_id":129157,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1567051720","product_id":100032701,"comment_content":"老师 我实际用wireshark抓包看了一下 挥手过程只有三次，[fin,ack],[fin,ack],[ack]就这三次，实验了好多次，请问老师这是为什么","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465310,"discussion_content":"是不是第二次发送的报文既是对第一次对方FIN报文的ACK，也是自己发送的FIN报文，这样就减少了一次数据传输。\n\n可以认为这个是一个减少数据发送的优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567131233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351700,"discussion_content":"被关闭方没有正在回传的数据包，所以合并了fin,ack合并了CLOSE_WAIT","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614406779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007753,"avatar":"","nickname":"suke","note":"","ucode":"C0287C31A4F45B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6911,"discussion_content":"是的 ，所以是因为没有要发送的数据 所以第二次和第三次挥手合并发送 ，优化了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567171332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129093,"user_name":"胡波 allenhu","can_delete":false,"product_type":"c1","uid":1014526,"ip_address":"","ucode":"33C6217E9A385C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/fe/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1567041663,"is_pvip":false,"replies":[{"id":"48200","content":"好问题，我个人理解这是一个转态驱动的，如果从FIN_WAIT_1或FIN_WAIT_2到下一个状态之间的转换缺少必要的条件，会停留在这个状态，有就是说不会往下一个状态转换。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567131567,"ip_address":"","comment_id":129093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567041663","product_id":100032701,"comment_content":"老师，请问如果本方调用close后发送FIN，对方没有回ACK,或者回了ACK, 但是对方没有回FIN, 这个时候本方的SOCKET会一直是FIN_WAIT_1或FIN_WAIT_2状态吗？会不会到TIME_WAIT状态","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465271,"discussion_content":"好问题，我个人理解这是一个转态驱动的，如果从FIN_WAIT_1或FIN_WAIT_2到下一个状态之间的转换缺少必要的条件，会停留在这个状态，有就是说不会往下一个状态转换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567131567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129087,"user_name":"胡波 allenhu","can_delete":false,"product_type":"c1","uid":1014526,"ip_address":"","ucode":"33C6217E9A385C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/fe/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1567040576,"is_pvip":false,"replies":[{"id":"48203","content":"我觉得是直接进入CLOSED状态了，不会再等待，这个函数的意思就是&quot;强行关闭&quot;。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567131760,"ip_address":"","comment_id":129087,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567040576","product_id":100032701,"comment_content":"老师你好， 请问是不是设置了l_linger后， 本方调用close&#47;shutdwon 关闭socket。如果本方收到了对方的FIN, 还是会等待2MSL才进入CLOSED状态？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465268,"discussion_content":"我觉得是直接进入CLOSED状态了，不会再等待，这个函数的意思就是&amp;quot;强行关闭&amp;quot;。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567131760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128836,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1566971652,"is_pvip":false,"replies":[{"id":"47914","content":"慢慢写写代码，调试起来就会懂的","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567004493,"ip_address":"","comment_id":128836,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566971652","product_id":100032701,"comment_content":"感觉看文章可以看懂，可是真正用的时候还是不太会用的感觉…","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465127,"discussion_content":"慢慢写写代码，调试起来就会懂的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567004493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128104,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1566831410,"is_pvip":false,"replies":[{"id":"47928","content":"这个只能查头文件吧","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567005329,"ip_address":"","comment_id":128104,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1566831410","product_id":100032701,"comment_content":"请问一下像SO_LINGER, SO_REUSEADDR这些SO开头的TCP选项的文档在linux的哪个man page中呢？我尝试了下man tcp  好像里面并没有完整的SO开头的选项文档","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464797,"discussion_content":"这个只能查头文件吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567005329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032125,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bf/bd/0c40979f.jpg","nickname":"一周思进","note":"","ucode":"00BE5402479B16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7062,"discussion_content":"https://mp.weixin.qq.com/s/bNdfXNQcZ3z_WzDWL5yQfA\n可以看看  里面刚好有说到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567330410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","nickname":"沉淀的梦想","note":"","ucode":"BCB7C26F9D214B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7039,"discussion_content":"我尝试看了一下选项所在的那个头文件，只有选项的定义，好像没有文档啊，选项上也没有其含义注释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567313777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127362,"user_name":"_你说了不算","can_delete":false,"product_type":"c1","uid":1185159,"ip_address":"","ucode":"212F890565FE5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/87/d22d8c3e.jpg","comment_is_top":false,"comment_ctime":1566664984,"is_pvip":false,"replies":[{"id":"48205","content":"一个tcp连接是一个四元组&lt;clientIP, clientPort, serverIP, serverPort&gt;。正常我们发起对服务端的连接，只是告诉了程序serverIP和serverPort，而cientIP和 clientPort会根据我们创建socket时，系统内核自动的选择。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567131938,"ip_address":"","comment_id":127362,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566664984","product_id":100032701,"comment_content":"老师可以解释下 一个tcp连接对应一个端口的这句话吗？不太懂 正常我们启动一个web应用 启动结束端口就已经定好了  不同客户端发起访问访问到的都是同一个端口号","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464457,"discussion_content":"一个tcp连接是一个四元组&amp;lt;clientIP, clientPort, serverIP, serverPort&amp;gt;。正常我们发起对服务端的连接，只是告诉了程序serverIP和serverPort，而cientIP和 clientPort会根据我们创建socket时，系统内核自动的选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567131938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6164,"discussion_content":"那是监听端口，不是连接端口。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566736021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127241,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1566618516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566618516","product_id":100032701,"comment_content":"对于问题2，我觉得不需要统一时钟，因为timestamp的作用是给某端区分新旧连接数据，由端某生成并由该端进行判断，不会涉及双方的时钟问题。对time_wait socket重用后，相当于创建了一条新的连接，这时候会设置一个新的timestamp，拿到数据宝后如果时间&lt; 新连接时间，则认为是旧连接，不处理即可。","like_count":0},{"had_liked":false,"id":127092,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1566552395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566552395","product_id":100032701,"comment_content":"第一问 是因为网络上的包在传输过程中过了最大生存时间则将会被丢弃，tcp&#47;ip的一个处理机制<br>第二问 需要定义一个统一的时钟 不然如果发送双方的时间不一样的话 通过时间戳这个处理方式就会出问题","like_count":0},{"had_liked":false,"id":127047,"user_name":"D","can_delete":false,"product_type":"c1","uid":1027596,"ip_address":"","ucode":"5BB4D16FE39BFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/0c/f39f847a.jpg","comment_is_top":false,"comment_ctime":1566543667,"is_pvip":false,"replies":[{"id":"48212","content":"MSL确实是30秒，你的推断对的；<br><br>化身是一个中文比喻，意思就是跟前面的四元组完全一样，就像变了一个新的人，完全长得一模一样。分节应该是TCP segmant。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567132594,"ip_address":"","comment_id":127047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566543667","product_id":100032701,"comment_content":"老师，如果time_wait 默认是60s 的话， 那2msl =time_wait,那msl是否是30s? 还有化身和分节对应到英文中的什么单词，在这里不太清楚是什么意思","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464293,"discussion_content":"MSL确实是30秒，你的推断对的；\n\n化身是一个中文比喻，意思就是跟前面的四元组完全一样，就像变了一个新的人，完全长得一模一样。分节应该是TCP segmant。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567132594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126994,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1619588,"ip_address":"","ucode":"C11D567FCB8CD6","user_header":"https://static001.geekbang.org/account/avatar/00/18/b6/84/1f60f267.jpg","comment_is_top":false,"comment_ctime":1566531384,"is_pvip":false,"replies":[{"id":"48213","content":"这是很暴力的方法，如果有把握可以使用。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567132645,"ip_address":"","comment_id":126994,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566531384","product_id":100032701,"comment_content":"我看到的答案设置方法都是setsockopt<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464274,"discussion_content":"这是很暴力的方法，如果有把握可以使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567132645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126987,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566530640,"is_pvip":false,"replies":[{"id":"48214","content":"谁先发起断连的操作，谁就是主动关闭方。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567132675,"ip_address":"","comment_id":126987,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566530640","product_id":100032701,"comment_content":"老师你好，TIME_WAIT 是TCP主动关闭方才会存在的状态，什么机制确认谁是主动关闭方？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464271,"discussion_content":"谁先发起断连的操作，谁就是主动关闭方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567132675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184919,"avatar":"https://static001.geekbang.org/account/avatar/00/12/14/97/8a3aa317.jpg","nickname":"疾风知劲草","note":"","ucode":"B6E73CA240AA29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5991,"discussion_content":"主动且首先发送fin报文的就是主动关闭连接的一方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566569186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126932,"user_name":"杨领well","can_delete":false,"product_type":"c1","uid":1145650,"ip_address":"","ucode":"3974A03855168C","user_header":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","comment_is_top":false,"comment_ctime":1566522409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566522409","product_id":100032701,"comment_content":"我觉得 MSL 就是发送方自以为是的认为，在发送过程中的路由器或主机是不知道 MSL 或者超时什么的。而它们是以 TTL 来作控制的。","like_count":0},{"had_liked":false,"id":126919,"user_name":"老姜","can_delete":false,"product_type":"c1","uid":1557836,"ip_address":"","ucode":"7849B49073FD01","user_header":"https://static001.geekbang.org/account/avatar/00/17/c5/4c/141e03e7.jpg","comment_is_top":false,"comment_ctime":1566521508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566521508","product_id":100032701,"comment_content":"问题二。本来计算往返时间用的就是上一次自己的时间戳。。。","like_count":0},{"had_liked":false,"id":126905,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1619588,"ip_address":"","ucode":"C11D567FCB8CD6","user_header":"https://static001.geekbang.org/account/avatar/00/18/b6/84/1f60f267.jpg","comment_is_top":false,"comment_ctime":1566520300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566520300","product_id":100032701,"comment_content":"问题1：有个浅薄的想法，有个字段记录，比如我发送的时候，某个字段是0，正常接收到之后也应该为0，超时设置成其他的（没百度到具体怎么实现的）。<br>问题2：统一的时间应该还是很有必要的，或者保存好时间差不过感觉这个不大可行","like_count":0}]}