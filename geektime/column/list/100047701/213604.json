{"id":213604,"title":"08 | 判等问题：程序里如何确定你就是你？","content":"<p>你好，我是朱晔。今天，我来和你聊聊程序里的判等问题。</p><p>你可能会说，判等不就是一行代码的事情吗，有什么好说的。但，这一行代码如果处理不当，不仅会出现Bug，还可能会引起内存泄露等问题。涉及判等的Bug，即使是使用==这种错误的判等方式，也不是所有时候都会出问题。所以类似的判等问题不太容易发现，可能会被隐藏很久。</p><p>今天，我就equals、compareTo和Java的数值缓存、字符串驻留等问题展开讨论，希望你可以理解其原理，彻底消除业务代码中的相关Bug。</p><h2>注意equals和==的区别</h2><p>在业务代码中，我们通常使用equals或== 进行判等操作。equals是方法而==是操作符，它们的使用是有区别的：</p><ul>\n<li>对基本类型，比如int、long，进行判等，只能使用==，比较的是直接值。因为基本类型的值就是其数值。</li>\n<li>对引用类型，比如Integer、Long和String，进行判等，需要使用equals进行内容判等。因为引用类型的直接值是指针，使用==的话，比较的是指针，也就是两个对象在内存中的地址，即比较它们是不是同一个对象，而不是比较对象的内容。</li>\n</ul><p>这就引出了我们必须必须要知道的第一个结论：<strong>比较值的内容，除了基本类型只能使用==外，其他类型都需要使用equals</strong>。</p><!-- [[[read_end]]] --><p>在开篇我提到了，即使使用==对Integer或String进行判等，有些时候也能得到正确结果。这又是为什么呢？</p><p>我们用下面的测试用例深入研究下：</p><ul>\n<li>使用==对两个值为127的直接赋值的Integer对象判等；</li>\n<li>使用==对两个值为128的直接赋值的Integer对象判等；</li>\n<li>使用==对一个值为127的直接赋值的Integer和另一个通过new Integer声明的值为127的对象判等；</li>\n<li>使用==对两个通过new Integer声明的值为127的对象判等；</li>\n<li>使用==对一个值为128的直接赋值的Integer对象和另一个值为128的int基本类型判等。</li>\n</ul><pre><code>Integer a = 127; //Integer.valueOf(127)\nInteger b = 127; //Integer.valueOf(127)\nlog.info(&quot;\\nInteger a = 127;\\n&quot; +\n        &quot;Integer b = 127;\\n&quot; +\n        &quot;a == b ? {}&quot;,a == b);    // true\n\nInteger c = 128; //Integer.valueOf(128)\nInteger d = 128; //Integer.valueOf(128)\nlog.info(&quot;\\nInteger c = 128;\\n&quot; +\n        &quot;Integer d = 128;\\n&quot; +\n        &quot;c == d ? {}&quot;, c == d);   //false\n\nInteger e = 127; //Integer.valueOf(127)\nInteger f = new Integer(127); //new instance\nlog.info(&quot;\\nInteger e = 127;\\n&quot; +\n        &quot;Integer f = new Integer(127);\\n&quot; +\n        &quot;e == f ? {}&quot;, e == f);   //false\n\nInteger g = new Integer(127); //new instance\nInteger h = new Integer(127); //new instance\nlog.info(&quot;\\nInteger g = new Integer(127);\\n&quot; +\n        &quot;Integer h = new Integer(127);\\n&quot; +\n        &quot;g == h ? {}&quot;, g == h);  //false\n\nInteger i = 128; //unbox\nint j = 128;\nlog.info(&quot;\\nInteger i = 128;\\n&quot; +\n        &quot;int j = 128;\\n&quot; +\n        &quot;i == j ? {}&quot;, i == j); //true\n</code></pre><p>通过运行结果可以看到，虽然看起来永远是在对127和127、128和128判等，但==却没有永远给我们true的答复。原因是什么呢？</p><p>第一个案例中，编译器会把Integer a = 127转换为Integer.valueOf(127)。查看源码可以发现，这个<strong>转换在内部其实做了缓存，使得两个Integer指向同一个对象</strong>，所以==返回true。</p><pre><code>public static Integer valueOf(int i) {\n    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n</code></pre><p>第二个案例中，之所以同样的代码128就返回false的原因是，默认情况下会缓存[-128, 127]的数值，而128处于这个区间之外。设置JVM参数加上-XX:AutoBoxCacheMax=1000再试试，是不是就返回true了呢？</p><pre><code>private static class IntegerCache {\n    static final int low = -128;\n    static final int high;\n\n\n    static {\n        // high value may be configured by property\n        int h = 127;\n        String integerCacheHighPropValue =\n            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);\n        if (integerCacheHighPropValue != null) {\n            try {\n                int i = parseInt(integerCacheHighPropValue);\n                i = Math.max(i, 127);\n                // Maximum array size is Integer.MAX_VALUE\n                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            } catch( NumberFormatException nfe) {\n                // If the property cannot be parsed into an int, ignore it.\n            }\n        }\n        high = h;\n\n\n        cache = new Integer[(high - low) + 1];\n        int j = low;\n        for(int k = 0; k &lt; cache.length; k++)\n            cache[k] = new Integer(j++);\n\n\n        // range [-128, 127] must be interned (JLS7 5.1.7)\n        assert IntegerCache.high &gt;= 127;\n    }\n}\n</code></pre><p>第三和第四个案例中，New出来的Integer始终是不走缓存的新对象。比较两个新对象，或者比较一个新对象和一个来自缓存的对象，结果肯定不是相同的对象，因此返回false。</p><p>第五个案例中，我们把装箱的Integer和基本类型int比较，前者会先拆箱再比较，比较的肯定是数值而不是引用，因此返回true。</p><p>看到这里，对于Integer什么时候是相同对象什么时候是不同对象，就很清楚了吧。但知道这些其实意义不大，因为在大多数时候，我们并不关心Integer对象是否是同一个，<strong>只需要记得比较Integer的值请使用equals，而不是==</strong>（对于基本类型int的比较当然只能使用==）。</p><p>其实，我们应该都知道这个原则，只是有的时候特别容易忽略。以我之前遇到过的一个生产事故为例，有这么一个枚举定义了订单状态和对于状态的描述：</p><pre><code>enum StatusEnum {\n    CREATED(1000, &quot;已创建&quot;),\n    PAID(1001, &quot;已支付&quot;),\n    DELIVERED(1002, &quot;已送到&quot;),\n    FINISHED(1003, &quot;已完成&quot;);\n\n    private final Integer status; //注意这里的Integer\n    private final String desc;\n\n    StatusEnum(Integer status, String desc) {\n        this.status = status;\n        this.desc = desc;\n    }\n}\n</code></pre><p>在业务代码中，开发同学使用了==对枚举和入参OrderQuery中的status属性进行判等：</p><pre><code>@Data\npublic class OrderQuery {\n    private Integer status;\n    private String name;\n}\n\n@PostMapping(&quot;enumcompare&quot;)\npublic void enumcompare(@RequestBody OrderQuery orderQuery){\n    StatusEnum statusEnum = StatusEnum.DELIVERED;\n    log.info(&quot;orderQuery:{} statusEnum:{} result:{}&quot;, orderQuery, statusEnum, statusEnum.status == orderQuery.getStatus());\n}\n</code></pre><p><strong>因为枚举和入参OrderQuery中的status都是包装类型，所以通过==判等肯定是有问题的。只是这个问题比较隐晦</strong>，究其原因在于：</p><ul>\n<li>只看枚举的定义CREATED(1000, “已创建”)，容易让人误解status值是基本类型；</li>\n<li>因为有Integer缓存机制的存在，所以使用==判等并不是所有情况下都有问题。在这次事故中，订单状态的值从100开始增长，程序一开始不出问题，直到订单状态超过127后才出现Bug。</li>\n</ul><p>在了解清楚为什么Integer使用==判等有时候也有效的原因之后，我们再来看看为什么String也有这个问题。我们使用几个用例来测试下：</p><ul>\n<li>对两个直接声明的值都为1的String使用==判等；</li>\n<li>对两个new出来的值都为2的String使用==判等；</li>\n<li>对两个new出来的值都为3的String先进行intern操作，再使用==判等；</li>\n<li>对两个new出来的值都为4的String通过equals判等。</li>\n</ul><pre><code>String a = &quot;1&quot;;\nString b = &quot;1&quot;;\nlog.info(&quot;\\nString a = \\&quot;1\\&quot;;\\n&quot; +\n        &quot;String b = \\&quot;1\\&quot;;\\n&quot; +\n        &quot;a == b ? {}&quot;, a == b); //true\n\nString c = new String(&quot;2&quot;);\nString d = new String(&quot;2&quot;);\nlog.info(&quot;\\nString c = new String(\\&quot;2\\&quot;);\\n&quot; +\n        &quot;String d = new String(\\&quot;2\\&quot;);&quot; +\n        &quot;c == d ? {}&quot;, c == d); //false\n\nString e = new String(&quot;3&quot;).intern();\nString f = new String(&quot;3&quot;).intern();\nlog.info(&quot;\\nString e = new String(\\&quot;3\\&quot;).intern();\\n&quot; +\n        &quot;String f = new String(\\&quot;3\\&quot;).intern();\\n&quot; +\n        &quot;e == f ? {}&quot;, e == f); //true\n\nString g = new String(&quot;4&quot;);\nString h = new String(&quot;4&quot;);\nlog.info(&quot;\\nString g = new String(\\&quot;4\\&quot;);\\n&quot; +\n        &quot;String h = new String(\\&quot;4\\&quot;);\\n&quot; +\n        &quot;g == h ? {}&quot;, g.equals(h)); //true\n</code></pre><p>在分析这个结果之前，我先和你说说Java的字符串常量池机制。首先要明确的是其设计初衷是节省内存。当代码中出现双引号形式创建字符串对象时，JVM会先对这个字符串进行检查，如果字符串常量池中存在相同内容的字符串对象的引用，则将这个引用返回；否则，创建新的字符串对象，然后将这个引用放入字符串常量池，并返回该引用。这种机制，就是字符串驻留或池化。</p><p>再回到刚才的例子，再来分析一下运行结果：</p><ul>\n<li>第一个案例返回true，因为Java的字符串驻留机制，直接使用双引号声明出来的两个String对象指向常量池中的相同字符串。</li>\n<li>第二个案例，new出来的两个String是不同对象，引用当然不同，所以得到false的结果。</li>\n<li>第三个案例，使用String提供的intern方法也会走常量池机制，所以同样能得到true。</li>\n<li>第四个案例，通过equals对值内容判等，是正确的处理方式，当然会得到true。</li>\n</ul><p><strong>虽然使用new声明的字符串调用intern方法，也可以让字符串进行驻留，但在业务代码中滥用intern，可能会产生性能问题</strong>。</p><p>写代码测试一下，通过循环把1到1000万之间的数字以字符串形式intern后，存入一个List：</p><pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();\n\n@GetMapping(&quot;internperformance&quot;)\npublic int internperformance(@RequestParam(value = &quot;size&quot;, defaultValue = &quot;10000000&quot;)int size) {\n    //-XX:+PrintStringTableStatistics\n    //-XX:StringTableSize=10000000\n    long begin = System.currentTimeMillis();\n    list = IntStream.rangeClosed(1, size)\n            .mapToObj(i-&gt; String.valueOf(i).intern())\n            .collect(Collectors.toList());\n    log.info(&quot;size:{} took:{}&quot;, size, System.currentTimeMillis() - begin);\n    return list.size();\n}\n</code></pre><p>在启动程序时设置JVM参数-XX:+PrintStringTableStatistic，程序退出时可以打印出字符串常量表的统计信息。调用接口后关闭程序，输出如下：</p><pre><code>[11:01:57.770] [http-nio-45678-exec-2] [INFO ] [.t.c.e.d.IntAndStringEqualController:54  ] - size:10000000 took:44907\nStringTable statistics:\nNumber of buckets       :     60013 =    480104 bytes, avg   8.000\nNumber of entries       :  10030230 = 240725520 bytes, avg  24.000\nNumber of literals      :  10030230 = 563005568 bytes, avg  56.131\nTotal footprint         :           = 804211192 bytes\nAverage bucket size     :   167.134\nVariance of bucket size :    55.808\nStd. dev. of bucket size:     7.471\nMaximum bucket size     :       198\n</code></pre><p>可以看到，1000万次intern操作耗时居然超过了44秒。</p><p>其实，原因在于字符串常量池是一个固定容量的Map。如果容量太小（Number of buckets=60013）、字符串太多（1000万个字符串），那么每一个桶中的字符串数量会非常多，所以搜索起来就很慢。输出结果中的Average bucket size=167，代表了Map中桶的平均长度是167。</p><p>解决方式是，设置JVM参数-XX:StringTableSize，指定更多的桶。设置-XX:StringTableSize=10000000后，重启应用：</p><pre><code>[11:09:04.475] [http-nio-45678-exec-1] [INFO ] [.t.c.e.d.IntAndStringEqualController:54  ] - size:10000000 took:5557\nStringTable statistics:\nNumber of buckets       :  10000000 =  80000000 bytes, avg   8.000\nNumber of entries       :  10030156 = 240723744 bytes, avg  24.000\nNumber of literals      :  10030156 = 562999472 bytes, avg  56.131\nTotal footprint         :           = 883723216 bytes\nAverage bucket size     :     1.003\nVariance of bucket size :     1.587\nStd. dev. of bucket size:     1.260\nMaximum bucket size     :        10\n</code></pre><p>可以看到，1000万次调用耗时只有5.5秒，Average bucket size降到了1，效果明显。</p><p>好了，是时候给出第二原则了：<strong>没事别轻易用intern，如果要用一定要注意控制驻留的字符串的数量，并留意常量表的各项指标</strong>。</p><h2>实现一个equals没有这么简单</h2><p>如果看过Object类源码，你可能就知道，equals的实现其实是比较对象引用：</p><pre><code>public boolean equals(Object obj) {\n    return (this == obj);\n}\n</code></pre><p>之所以Integer或String能通过equals实现内容判等，是因为它们都重写了这个方法。比如，String的equals的实现：</p><pre><code>public boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre><p>对于自定义类型，如果不重写equals的话，默认就是使用Object基类的按引用的比较方式。我们写一个自定义类测试一下。</p><p>假设有这样一个描述点的类Point，有x、y和描述三个属性：</p><pre><code>class Point {\n    private int x;\n    private int y;\n    private final String desc;\n\n    public Point(int x, int y, String desc) {\n        this.x = x;\n        this.y = y;\n        this.desc = desc;\n    }\n}\n</code></pre><p>定义三个点p1、p2和p3，其中p1和p2的描述属性不同，p1和p3的三个属性完全相同，并写一段代码测试一下默认行为：</p><pre><code>Point p1 = new Point(1, 2, &quot;a&quot;);\nPoint p2 = new Point(1, 2, &quot;b&quot;);\nPoint p3 = new Point(1, 2, &quot;a&quot;);\nlog.info(&quot;p1.equals(p2) ? {}&quot;, p1.equals(p2));\nlog.info(&quot;p1.equals(p3) ? {}&quot;, p1.equals(p3));\n</code></pre><p>通过equals方法比较p1和p2、p1和p3均得到false，原因正如刚才所说，我们并没有为Point类实现自定义的equals方法，Object超类中的equals默认使用==判等，比较的是对象的引用。</p><p>我们期望的逻辑是，只要x和y这2个属性一致就代表是同一个点，所以写出了如下的改进代码，重写equals方法，把参数中的Object转换为Point比较其x和y属性：</p><pre><code>class PointWrong {\n    private int x;\n    private int y;\n    private final String desc;\n\n    public PointWrong(int x, int y, String desc) {\n        this.x = x;\n        this.y = y;\n        this.desc = desc;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        PointWrong that = (PointWrong) o;\n        return x == that.x &amp;&amp; y == that.y;\n    }\n}\n</code></pre><p>为测试改进后的Point是否可以满足需求，我们定义了三个用例：</p><ul>\n<li>比较一个Point对象和null；</li>\n<li>比较一个Object对象和一个Point对象；</li>\n<li>比较两个x和y属性值相同的Point对象。</li>\n</ul><pre><code>PointWrong p1 = new PointWrong(1, 2, &quot;a&quot;);\ntry {\n    log.info(&quot;p1.equals(null) ? {}&quot;, p1.equals(null));\n} catch (Exception ex) {\n    log.error(ex.getMessage());\n}\n\nObject o = new Object();\ntry {\n    log.info(&quot;p1.equals(expression) ? {}&quot;, p1.equals(o));\n} catch (Exception ex) {\n    log.error(ex.getMessage());\n}\n\nPointWrong p2 = new PointWrong(1, 2, &quot;b&quot;);\nlog.info(&quot;p1.equals(p2) ? {}&quot;, p1.equals(p2));\n</code></pre><p>通过日志中的结果可以看到，第一次比较出现了空指针异常，第二次比较出现了类型转换异常，第三次比较符合预期输出了true。</p><pre><code>[17:54:39.120] [http-nio-45678-exec-1] [ERROR] [t.c.e.demo1.EqualityMethodController:32  ] - java.lang.NullPointerException\n[17:54:39.120] [http-nio-45678-exec-1] [ERROR] [t.c.e.demo1.EqualityMethodController:39  ] - java.lang.ClassCastException: java.lang.Object cannot be cast to org.geekbang.time.commonmistakes.equals.demo1.EqualityMethodController$PointWrong\n[17:54:39.120] [http-nio-45678-exec-1] [INFO ] [t.c.e.demo1.EqualityMethodController:43  ] - p1.equals(p2) ? true\n</code></pre><p><strong>通过这些失效的用例，我们大概可以总结出实现一个更好的equals应该注意的点：</strong></p><ul>\n<li>考虑到性能，可以先进行指针判等，如果对象是同一个那么直接返回true；</li>\n<li>需要对另一方进行判空，空对象和自身进行比较，结果一定是fasle；</li>\n<li>需要判断两个对象的类型，如果类型都不同，那么直接返回false；</li>\n<li>确保类型相同的情况下再进行类型强制转换，然后逐一判断所有字段。</li>\n</ul><p>修复和改进后的equals方法如下：</p><pre><code>@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    PointRight that = (PointRight) o;\n    return x == that.x &amp;&amp; y == that.y;\n}\t\t\n</code></pre><p>改进后的equals看起来完美了，但还没完。我们继续往下看。</p><h2>hashCode和equals要配对实现</h2><p>我们来试试下面这个用例，定义两个x和y属性值完全一致的Point对象p1和p2，把p1加入HashSet，然后判断这个Set中是否存在p2：</p><pre><code>PointWrong p1 = new PointWrong(1, 2, &quot;a&quot;);\nPointWrong p2 = new PointWrong(1, 2, &quot;b&quot;);\n\nHashSet&lt;PointWrong&gt; points = new HashSet&lt;&gt;();\npoints.add(p1);\nlog.info(&quot;points.contains(p2) ? {}&quot;, points.contains(p2));\n</code></pre><p>按照改进后的equals方法，这2个对象可以认为是同一个，Set中已经存在了p1就应该包含p2，但结果却是false。</p><p>出现这个Bug的原因是，散列表需要使用hashCode来定位元素放到哪个桶。如果自定义对象没有实现自定义的hashCode方法，就会使用Object超类的默认实现，<strong>得到的两个hashCode是不同的，导致无法满足需求</strong>。</p><p>要自定义hashCode，我们可以直接使用Objects.hash方法来实现，改进后的Point类如下：</p><pre><code>class PointRight {\n    private final int x;\n    private final int y;\n    private final String desc;\n    ...\n    @Override\n    public boolean equals(Object o) {\n        ...\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(x, y);\n    }\n}\n</code></pre><p>改进equals和hashCode后，再测试下之前的四个用例，结果全部符合预期。</p><pre><code>[18:25:23.091] [http-nio-45678-exec-4] [INFO ] [t.c.e.demo1.EqualityMethodController:54  ] - p1.equals(null) ? false\n[18:25:23.093] [http-nio-45678-exec-4] [INFO ] [t.c.e.demo1.EqualityMethodController:61  ] - p1.equals(expression) ? false\n[18:25:23.094] [http-nio-45678-exec-4] [INFO ] [t.c.e.demo1.EqualityMethodController:67  ] - p1.equals(p2) ? true\n[18:25:23.094] [http-nio-45678-exec-4] [INFO ] [t.c.e.demo1.EqualityMethodController:71  ] - points.contains(p2) ? true\n</code></pre><p>看到这里，你可能会觉得自己实现equals和hashCode很麻烦，实现equals有很多注意点而且代码量很大。不过，实现这两个方法也有简单的方式，一是后面要讲到的Lombok方法，二是使用IDE的代码生成功能。IDEA的类代码快捷生成菜单支持的功能如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/94/36/944fe3549e4c24936e9837d0bf1e3936.jpg?wh=2284*2014\" alt=\"\"></p><h2>注意compareTo和equals的逻辑一致性</h2><p>除了自定义类型需要确保equals和hashCode要逻辑一致外，还有一个更容易被忽略的问题，即compareTo同样需要和equals确保逻辑一致性。</p><p>我之前遇到过这么一个问题，代码里本来使用了ArrayList的indexOf方法进行元素搜索，但是一位好心的开发同学觉得逐一比较的时间复杂度是O(n)，效率太低了，于是改为了排序后通过Collections.binarySearch方法进行搜索，实现了O(log n)的时间复杂度。没想到，这么一改却出现了Bug。</p><p>我们来重现下这个问题。首先，定义一个Student类，有id和name两个属性，并实现了一个Comparable接口来返回两个id的值：</p><pre><code>@Data\n@AllArgsConstructor\nclass Student implements Comparable&lt;Student&gt;{\n    private int id;\n    private String name;\n\n    @Override\n    public int compareTo(Student other) {\n        int result = Integer.compare(other.id, id);\n        if (result==0)\n            log.info(&quot;this {} == other {}&quot;, this, other);\n        return result;\n    }\n}\n</code></pre><p>然后，写一段测试代码分别通过indexOf方法和Collections.binarySearch方法进行搜索。列表中我们存放了两个学生，第一个学生id是1叫zhang，第二个学生id是2叫wang，搜索这个列表是否存在一个id是2叫li的学生：</p><pre><code>@GetMapping(&quot;wrong&quot;)\npublic void wrong(){\n\n    List&lt;Student&gt; list = new ArrayList&lt;&gt;();\n    list.add(new Student(1, &quot;zhang&quot;));\n    list.add(new Student(2, &quot;wang&quot;));\n    Student student = new Student(2, &quot;li&quot;);\n\n    log.info(&quot;ArrayList.indexOf&quot;);\n    int index1 = list.indexOf(student);\n    Collections.sort(list);\n    log.info(&quot;Collections.binarySearch&quot;);\n    int index2 = Collections.binarySearch(list, student);\n\n    log.info(&quot;index1 = &quot; + index1);\n    log.info(&quot;index2 = &quot; + index2);\n}\n</code></pre><p>代码输出的日志如下：</p><pre><code>[18:46:50.226] [http-nio-45678-exec-1] [INFO ] [t.c.equals.demo2.CompareToController:28  ] - ArrayList.indexOf\n[18:46:50.226] [http-nio-45678-exec-1] [INFO ] [t.c.equals.demo2.CompareToController:31  ] - Collections.binarySearch\n[18:46:50.227] [http-nio-45678-exec-1] [INFO ] [t.c.equals.demo2.CompareToController:67  ] - this CompareToController.Student(id=2, name=wang) == other CompareToController.Student(id=2, name=li)\n[18:46:50.227] [http-nio-45678-exec-1] [INFO ] [t.c.equals.demo2.CompareToController:34  ] - index1 = -1\n[18:46:50.227] [http-nio-45678-exec-1] [INFO ] [t.c.equals.demo2.CompareToController:35  ] - index2 = 1\n</code></pre><p>我们注意到如下几点：</p><ul>\n<li><strong>binarySearch方法内部调用了元素的compareTo方法进行比较</strong>；</li>\n<li>indexOf的结果没问题，列表中搜索不到id为2、name是li的学生；</li>\n<li>binarySearch返回了索引1，代表搜索到的结果是id为2，name是wang的学生。</li>\n</ul><p>修复方式很简单，确保compareTo的比较逻辑和equals的实现一致即可。重新实现一下Student类，通过Comparator.comparing这个便捷的方法来实现两个字段的比较：</p><pre><code>@Data\n@AllArgsConstructor\nclass StudentRight implements Comparable&lt;StudentRight&gt;{\n    private int id;\n    private String name;\n\n    @Override\n    public int compareTo(StudentRight other) {\n        return Comparator.comparing(StudentRight::getName)\n                .thenComparingInt(StudentRight::getId)\n                .compare(this, other);\n    }\n}\n</code></pre><p>其实，这个问题容易被忽略的原因在于两方面：</p><ul>\n<li>一是，我们使用了Lombok的@Data标记了Student，@Data注解（详见<a href=\"https://projectlombok.org/features/Data\">这里</a>）其实包含了@EqualsAndHashCode注解（详见<a href=\"https://projectlombok.org/features/EqualsAndHashCode\">这里</a>）的作用，也就是默认情况下使用类型所有的字段（不包括static和transient字段）参与到equals和hashCode方法的实现中。因为这两个方法的实现不是我们自己实现的，所以容易忽略其逻辑。</li>\n<li>二是，compareTo方法需要返回数值，作为排序的依据，容易让人使用数值类型的字段随意实现。</li>\n</ul><p>我再强调下，<strong>对于自定义的类型，如果要实现Comparable，请记得equals、hashCode、compareTo三者逻辑一致</strong>。</p><h2>小心Lombok生成代码的“坑”</h2><p>Lombok的@Data注解会帮我们实现equals和hashcode方法，但是有继承关系时，Lombok自动生成的方法可能就不是我们期望的了。</p><p>我们先来研究一下其实现：定义一个Person类型，包含姓名和身份证两个字段：</p><pre><code>@Data\nclass Person {\n    private String name;\n    private String identity;\n\n    public Person(String name, String identity) {\n        this.name = name;\n        this.identity = identity;\n    }\n}\n</code></pre><p>对于身份证相同、姓名不同的两个Person对象：</p><pre><code>Person person1 = new Person(&quot;zhuye&quot;,&quot;001&quot;);\nPerson person2 = new Person(&quot;Joseph&quot;,&quot;001&quot;);\nlog.info(&quot;person1.equals(person2) ? {}&quot;, person1.equals(person2));\n</code></pre><p>使用equals判等会得到false。如果你希望只要身份证一致就认为是同一个人的话，可以使用@EqualsAndHashCode.Exclude注解来修饰name字段，从equals和hashCode的实现中排除name字段：</p><pre><code>@EqualsAndHashCode.Exclude\nprivate String name;\n</code></pre><p>修改后得到true。打开编译后的代码可以看到，Lombok为Person生成的equals方法的实现，确实只包含了identity属性：</p><pre><code>public boolean equals(final Object o) {\n    if (o == this) {\n        return true;\n    } else if (!(o instanceof LombokEquealsController.Person)) {\n        return false;\n    } else {\n        LombokEquealsController.Person other = (LombokEquealsController.Person)o;\n        if (!other.canEqual(this)) {\n            return false;\n        } else {\n            Object this$identity = this.getIdentity();\n            Object other$identity = other.getIdentity();\n            if (this$identity == null) {\n                if (other$identity != null) {\n                    return false;\n                }\n            } else if (!this$identity.equals(other$identity)) {\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n</code></pre><p>但到这里还没完，如果类型之间有继承，Lombok会怎么处理子类的equals和hashCode呢？我们来测试一下，写一个Employee类继承Person，并新定义一个公司属性：</p><pre><code>@Data\nclass Employee extends Person {\n\n    private String company;\n    public Employee(String name, String identity, String company) {\n        super(name, identity);\n        this.company = company;\n    }\n}\n</code></pre><p>在如下的测试代码中，声明两个Employee实例，它们具有相同的公司名称，但姓名和身份证均不同：</p><pre><code>Employee employee1 = new Employee(&quot;zhuye&quot;,&quot;001&quot;, &quot;bkjk.com&quot;);\nEmployee employee2 = new Employee(&quot;Joseph&quot;,&quot;002&quot;, &quot;bkjk.com&quot;);\nlog.info(&quot;employee1.equals(employee2) ? {}&quot;, employee1.equals(employee2));\t\n</code></pre><p>很遗憾，结果是true，显然是没有考虑父类的属性，而认为这两个员工是同一人，<strong>说明@EqualsAndHashCode默认实现没有使用父类属性。</strong></p><p>为解决这个问题，我们可以手动设置callSuper开关为true，来覆盖这种默认行为：</p><pre><code>@Data\n@EqualsAndHashCode(callSuper = true)\nclass Employee extends Person {\n</code></pre><p>修改后的代码，实现了同时以子类的属性company加上父类中的属性identity，作为equals和hashCode方法的实现条件（实现上其实是调用了父类的equals和hashCode）。</p><h2>重点回顾</h2><p>现在，我们来回顾下对象判等和比较的重点内容吧。</p><p>首先，我们要注意equals和== 的区别。业务代码中进行内容的比较，针对基本类型只能使用==，针对Integer、String在内的引用类型，需要使用equals。Integer和String的坑在于，使用==判等有时也能获得正确结果。</p><p>其次，对于自定义类型，如果类型需要参与判等，那么务必同时实现equals和hashCode方法，并确保逻辑一致。如果希望快速实现equals、hashCode方法，我们可以借助IDE的代码生成功能，或使用Lombok来生成。如果类型也要参与比较，那么compareTo方法的逻辑同样需要和equals、hashCode方法一致。</p><p>最后，Lombok的@EqualsAndHashCode注解实现equals和hashCode的时候，默认使用类型所有非static、非transient的字段，且不考虑父类。如果希望改变这种默认行为，可以使用@EqualsAndHashCode.Exclude排除一些字段，并设置callSuper = true来让子类的equals和hashCode调用父类的相应方法。</p><p>在比较枚举值和POJO参数值的例子中，我们还可以注意到，使用==来判断两个包装类型的低级错误，确实容易被忽略。所以，<strong>我建议你在IDE中安装阿里巴巴的Java规约插件</strong>（详见<a href=\"https://github.com/alibaba/p3c\">这里</a>），来及时提示我们这类低级错误：</p><p><img src=\"https://static001.geekbang.org/resource/image/fe/c3/fe020d747a35cec23e5d92c1277d02c3.png?wh=2688*406\" alt=\"\"></p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href=\"https://github.com/JosephZhu1983/java-common-mistakes\">这个链接</a>查看。</p><h2>思考与讨论</h2><ol>\n<li>在实现equals时，我是先通过getClass方法判断两个对象的类型，你可能会想到还可以使用instanceof来判断。你能说说这两种实现方式的区别吗？</li>\n<li>在第三节的例子中，我演示了可以通过HashSet的contains方法判断元素是否在HashSet中，同样是Set的TreeSet其contains方法和HashSet有什么区别吗？</li>\n</ol><p>有关对象判等、比较，你还遇到过其他坑吗？我是朱晔，欢迎在评论区与我留言分享你的想法，也欢迎你把这篇文章分享给你的朋友或同事，一起交流。</p>","comments":[{"had_liked":false,"id":195297,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1585155437,"is_pvip":true,"replies":[{"id":"74235","content":"👍🏻👍🏻👍🏻 <br>这位同学作为本课课代表 😀","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585182827,"ip_address":"","comment_id":195297,"utype":1}],"discussion_count":27,"race_medal":0,"score":"1131161554285","product_id":100047701,"comment_content":"稍微补充一点，可能因为篇幅的原因，老师没提到，关于equals其实还有一个大坑，equals比较的对象除了所谓的相等外，还有一个非常重要的因素，就是该对象的类加载器也必须是同一个，不然equals返回的肯定是false；之前遇到过一个坑：重启后，两个对象相等，结果是true，但是修改了某些东西后，热加载（不用重启即可生效）后，再次执行equals，返回就是false，因为热加载使用的类加载器和程序正常启动的类加载器不同。关于类加载器部分，JDK 9 之前的 Java 应用都是由「启动类加载器」、「扩展类加载器」、「应用程序类加载器」这三种类加载器互相配合来完成加载的，如果有需要还可以加入自定义的类加载器来进行拓展；JDK 9 为了模块化的支持，对双亲委派模式做了一些改动：扩展类加载器被平台类加载器（Platform ClassLoader）取代。平台类加载器和应用程序类加载器都不再继承自 java.net.URLClassLoader，而是继承于 jdk.internal.loader.BuiltinClassLoader。具体细节可以自行搜索。<br><br>现在回答下问题：<br>第一个问题：<br>instanceof进行类型检查规则是:你是该类或者是该类的子类；<br>getClass获得类型信息采用==来进行检查是否相等的操作是严格的判断。不会存在继承方面的考虑；<br><br>第二个问题：<br>HashSet本质上就是HashMap的key组成的不重复的元素集合，contains方法其实就是根据hashcode和equals去判断相等的<br>TreeSet本质TreeMap的key组成的，数据结构是红黑树，是自带排序功能的，可以在放入元素的时候指定comparator（比较器），或者是放入的元素要实现Comparable接口后元素自己实现compareTo方法，contains方法是根据比较器或者compareTo去判断相等","like_count":264,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214399,"discussion_content":"不同类加载器加载的相同类定义被认为是两个不同的类","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1585189181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489019,"discussion_content":"👍🏻👍🏻👍🏻 \n这位同学作为本课课代表 😀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585182827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063307,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8b/af74591f.jpg","nickname":"chun1123","note":"","ucode":"413C3A8722699F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219072,"discussion_content":"默默点赞，记笔记","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585731225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2709222,"avatar":"https://static001.geekbang.org/account/avatar/00/29/56/e6/c5c80c3e.jpg","nickname":"范特西","note":"","ucode":"4BE8E24F80B736","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530737,"discussion_content":"这个坑踩过！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637136358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1656956,"avatar":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","nickname":"coder","note":"","ucode":"3A0940EBF94577","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395969,"discussion_content":"太秀了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632370924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1306032,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","nickname":"桂城老托尼","note":"","ucode":"139E4B8EE88B79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367947,"discussion_content":"手动点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618499872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2103563,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/dgox0m94vr6w2Vxk0N6651pyL5wKWicqgwIxU9iahlIn5LKeFfQJDjzUoQKM8WNibS7Yuxyulmic1Xxfia5ibFc6ia0Hw/132","nickname":"Geek_fe5e8a","note":"","ucode":"B4CC300397BD6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299591,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597742047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1657429,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwTZdUafC5YM7bCASt8icUnoyYfV4hUHulexibDI7B4eaokTxYXHFtoic97DBlCAU9j5Jw4QUuGhyZQ/132","nickname":"Carisy","note":"","ucode":"67E887967347BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274910,"discussion_content":"这种情况是因为老年代的class没被回收，但是用阿里的arthas就没这个问题，不知道咋替换的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590631052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1902220,"avatar":"","nickname":"Geek_9d0e04","note":"","ucode":"F5560CE5BDB125","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269702,"discussion_content":"对象的类加载器也必须是同一个，不然equals返回的肯定是false；这种情况是不是使用getClass获得类型信息然后采用==判断才会出现？？通过instanceof是不是不会有这个问题？？我看String用的就是instanceof","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589939203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1902220,"avatar":"","nickname":"Geek_9d0e04","note":"","ucode":"F5560CE5BDB125","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269942,"discussion_content":"String比较的equals是重写过的，只判断内容是否相等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589967142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":269702,"ip_address":""},"score":269942,"extra":""},{"author":{"id":1103456,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d6/60/f21b2164.jpg","nickname":"jacy","note":"","ucode":"0022A8759DDCE6","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1902220,"avatar":"","nickname":"Geek_9d0e04","note":"","ucode":"F5560CE5BDB125","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301338,"discussion_content":"string是 final ，不允许继承，用instanceof和getClass没区别","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598493528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":269702,"ip_address":""},"score":301338,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226042,"discussion_content":"老哥真的很给力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586416985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":227354,"discussion_content":"没有，没有，工作好多年了，以前不懂，现在开始加油学习，希望还不晚吧","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1586485255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":226042,"ip_address":""},"score":227354,"extra":""}]},{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222359,"discussion_content":"厉害，厉害，评论点赞几十个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586139314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":224184,"discussion_content":"嘿嘿，主要是老师的课干货多，订阅人多了，点赞就慢慢上去了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586272250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222359,"ip_address":""},"score":224184,"extra":""}]},{"author":{"id":1903331,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0a/e3/fa396e5d.jpg","nickname":"青青大王","note":"","ucode":"EC3AB128F1178D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219629,"discussion_content":"大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585790257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812970,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","nickname":"mgs2002","note":"","ucode":"F5931108BD509B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217437,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585559510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311065,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/59/b2267eaa.jpg","nickname":"张希音","note":"","ucode":"224D5FE01E14B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217383,"discussion_content":"老哥，你的留言是真的棒，简直是教科书级的，真赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585551912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216000,"discussion_content":"大师好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585402086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596049,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5a/91/f26d17d4.jpg","nickname":"∫1/(x^4*√(1+x^2))dx","note":"","ucode":"E300E20E5AF0FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214555,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585207642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102043,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/db/651d9bcb.jpg","nickname":"zxd","note":"","ucode":"65BC10809C9B2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214368,"discussion_content":"如果类加载器不同，那么加载的class类对象应该也不相同吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585186040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1102043,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/db/651d9bcb.jpg","nickname":"zxd","note":"","ucode":"65BC10809C9B2A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214376,"discussion_content":"是的呀。是同一个class对象，被不同的类加器加载，产生的对象，进行equals肯定是false，即使重写了hashcode和equals，通过JSON.toString(obj)打印出来的属性完全相等，也是false，可以通过对象的getClass()获取累加载器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585186870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214368,"ip_address":""},"score":214376,"extra":""},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1102043,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/db/651d9bcb.jpg","nickname":"zxd","note":"","ucode":"65BC10809C9B2A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214426,"discussion_content":"在某些情况下，同一个class是可以被不同的类加载器加载的，比如热加载，比如模块化（OSGI）等吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585192150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214368,"ip_address":""},"score":214426,"extra":""},{"author":{"id":1041865,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e5/c9/1061582b.jpg","nickname":"skying","note":"","ucode":"E7CFF50AB64BB1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":215949,"discussion_content":"像很多统一的配置框架,如disconf，会不会也遇到这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585399731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214376,"ip_address":""},"score":215949,"extra":""}]},{"author":{"id":1068585,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4e/29/1be3dd40.jpg","nickname":"ykkk88","note":"","ucode":"A1BCFC2F0D1022","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214325,"discussion_content":"这留言好精彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585182692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1068585,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4e/29/1be3dd40.jpg","nickname":"ykkk88","note":"","ucode":"A1BCFC2F0D1022","race_medal":2,"user_type":1,"is_pvip":false},"discussion":{"id":214375,"discussion_content":"谢谢，共同学习，嘿嘿","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585186603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214325,"ip_address":""},"score":214375,"extra":""}]}]},{"had_liked":false,"id":195817,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1585216743,"is_pvip":false,"replies":[{"id":"74345","content":"👍🏻","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585224287,"ip_address":"","comment_id":195817,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78894628071","product_id":100047701,"comment_content":"2 . HashSet 底册是HashMap。TreeSet底层是TreeMap<br>HashSet就是使用HashMap调用equals，判断两对象的HashCode是否相等。<br>TreeSet因为是一个树形结构，则需要考虑数的左右。则需要通过compareTo计算正负值，看最后能否找到compareTo为0的值，找到则返回true。<br><br>简单来说，TreeSet底层使用compareTo方法比较，HashSet底层使用hash值比较。","like_count":19,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489162,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585224287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196058,"user_name":"Sun","can_delete":false,"product_type":"c1","uid":1903317,"ip_address":"","ucode":"6AC3DF235E39AA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF1mt66qEBeuaPekOS0YO5XXe8PKej4d0GLB8mOmptSYh1icX1Cc8MSWn0rZZsEY2CrvhNG6iad6tQ/132","comment_is_top":false,"comment_ctime":1585232896,"is_pvip":false,"replies":[{"id":"74362","content":"设计篇和安全篇还会有更丰富的内容，跟紧脚步，细细品味","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585233070,"ip_address":"","comment_id":196058,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40239938560","product_id":100047701,"comment_content":"老师的课程，真的是干货，每天凌晨更新完看一遍，早上上班前在看一遍，感受都不一样，期待出更多干货，共同进步","like_count":9,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489220,"discussion_content":"设计篇和安全篇还会有更丰富的内容，跟紧脚步，细细品味","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585233070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195804,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1585216110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40239921774","product_id":100047701,"comment_content":"问题1：<br>Father father = new Father();<br>    Son son = new Son();<br>    System.out.println(son.getClass()==father.getClass());<br>    System.out.println(son instanceof Father);<br>打印结果<br>false<br>true<br><br>区别在此，getClass更加严格，而instanceof  子类instanceof  父类，也是true","like_count":9},{"had_liked":false,"id":197038,"user_name":"yihang","can_delete":false,"product_type":"c1","uid":1012361,"ip_address":"","ucode":"A5506F085D1793","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/89/1a83120a.jpg","comment_is_top":false,"comment_ctime":1585351607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31650122679","product_id":100047701,"comment_content":"另外对于 intern 也有它的用武之处，据说 twitter 使用它减少重复地址（字符串）大量节约了内存","like_count":7},{"had_liked":false,"id":195840,"user_name":"阿郑","can_delete":false,"product_type":"c1","uid":1495155,"ip_address":"","ucode":"BBAC6BFCAFC762","user_header":"https://static001.geekbang.org/account/avatar/00/16/d0/73/06ed7823.jpg","comment_is_top":false,"comment_ctime":1585218821,"is_pvip":false,"replies":[{"id":"74344","content":"觉得好可以多转发分享","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585224271,"ip_address":"","comment_id":195840,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14470120709","product_id":100047701,"comment_content":"老师的每一篇文章都是满满的干货呀，手动点赞👍👍👍","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489171,"discussion_content":"觉得好可以多转发分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585224271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195477,"user_name":"东方奇骥","can_delete":false,"product_type":"c1","uid":1354850,"ip_address":"","ucode":"DEE7085F7E55A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/ac/62/37912d51.jpg","comment_is_top":false,"comment_ctime":1585190528,"is_pvip":true,"replies":[{"id":"74269","content":"只要你理解它各种注解会生成怎样的代码，就没问题","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585191832,"ip_address":"","comment_id":195477,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14470092416","product_id":100047701,"comment_content":"看到这节，说起Lombok，老师觉得Lombok 适合用于生产环境吗？之前一直都是自己业余练习使用，但是工作中项目都还是没有使用。","like_count":4,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489083,"discussion_content":"只要你理解它各种注解会生成怎样的代码，就没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585191832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195345,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1585182311,"is_pvip":false,"replies":[{"id":"74236","content":"👍🏻","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585182897,"ip_address":"","comment_id":195345,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14470084199","product_id":100047701,"comment_content":"1楼的回答已经趋于完美，我也翻了一下 JDK 源码，HashSet 的本质是 HashMap，会通过 hash 函数来比较值，TreeSet 的本质是 TreeMap 会通过 compareTo 比较。<br>至于类加载器的问题，我想这个不好复现，有没有楼下的小伙伴补充一下的。","like_count":4,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489038,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585182897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1357840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/10/6cbdf1a0.jpg","nickname":"only if","note":"","ucode":"97832713156A2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310587,"discussion_content":"可以自定义classloader去复现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601918217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214380,"discussion_content":"当时是Springboot项目，使用的热加载组建是DevTools，当时的具体场景有点想不起来了，但是当时的对象重写了hashcode和equals，通过JSON.toString(obj)打印出来的属性完全相等，也是false，最后通过对象的getClass()获取累加载器，才发现了不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585186975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1069822,"avatar":"https://static001.geekbang.org/account/avatar/00/10/52/fe/1241bc83.jpg","nickname":"水如天","note":"","ucode":"50AE29168947CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":214680,"discussion_content":"这个坑遇到过一次，java9把xml的库移除了，只能引入maven  jar包，但是在java8中加载了两次，一次是maven的加载器加载一次是应用程序加载，属性一样，但是hashmap存了两次，排查了好久。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585225775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214380,"ip_address":""},"score":214680,"extra":""}]}]},{"had_liked":false,"id":197837,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1585400354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175334946","product_id":100047701,"comment_content":"hashset和treeSet从根本上来说，没什么关系，只是有个N代以前的祖宗了，哈哈，一个玩hash，一个玩comparator。一个底层是散列表，一个底层是红黑树。","like_count":2},{"had_liked":false,"id":195463,"user_name":"Huodefa_0426","can_delete":false,"product_type":"c1","uid":1589284,"ip_address":"","ucode":"0980487D49F9D0","user_header":"","comment_is_top":false,"comment_ctime":1585189614,"is_pvip":false,"replies":[{"id":"74268","content":"控制台，确保参数生效了","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585191678,"ip_address":"","comment_id":195463,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10175124206","product_id":100047701,"comment_content":"老师，文中你说：在启动程序时设置 JVM 参数 -XX:+PrintStringTableStatistics，程序退出时可以打印出字符串常量表的统计信息。调用接口后关闭程序，输出如下。我设置了关闭程序怎么没看见输出的信息，是输出在控制台还是在日志文件中？如果是文件 是哪个文件？","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489077,"discussion_content":"控制台，确保参数生效了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585191678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1155437,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a1/6d/a4ff33bb.jpg","nickname":"Lee","note":"","ucode":"0FF1C4EAF7F98A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":539746,"discussion_content":"老师好，我也在idea的vm中设置了，jdk时17。也在控制台没看到输出，不知道是什么原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639826260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":489077,"ip_address":""},"score":539746,"extra":""}]}]},{"had_liked":false,"id":273751,"user_name":"鲁鸣","can_delete":false,"product_type":"c1","uid":2152306,"ip_address":"","ucode":"974BA3C3E64630","user_header":"https://static001.geekbang.org/account/avatar/00/20/d7/72/cbef720d.jpg","comment_is_top":false,"comment_ctime":1610670374,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5905637670","product_id":100047701,"comment_content":"老师好，订单状态的那个没有特别理解，枚举值不是1000多吗？和127的关系是什么呢？","like_count":1,"discussions":[{"author":{"id":1123011,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/c3/5c69ab81.jpg","nickname":"Lucky Dog","note":"","ucode":"C71C5D24200CCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550739,"discussion_content":"例子里用枚举的status属性值与入参对比，两个都是integer类型，在比较时使用了==，看下文中对==比较的分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644720687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239684,"user_name":"学习使人快乐","can_delete":false,"product_type":"c1","uid":1478759,"ip_address":"","ucode":"1EC27CE663EE65","user_header":"https://static001.geekbang.org/account/avatar/00/16/90/67/106306e7.jpg","comment_is_top":false,"comment_ctime":1596615331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891582627","product_id":100047701,"comment_content":"老师的课程特别好","like_count":2},{"had_liked":false,"id":233788,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1594450837,"is_pvip":false,"replies":[{"id":"86306","content":"依赖是一起的","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1594467221,"ip_address":"","comment_id":233788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889418133","product_id":100047701,"comment_content":"每一个案例都是独立的SpringBoot或Java命令行应用程序，可以单独启动，避免相互干扰<br>请问下,为啥我启动的是独立main类为啥还会启动其他无关这个包的类.比如连接redis","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501165,"discussion_content":"依赖是一起的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594467221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197030,"user_name":"yihang","can_delete":false,"product_type":"c1","uid":1012361,"ip_address":"","ucode":"A5506F085D1793","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/89/1a83120a.jpg","comment_is_top":false,"comment_ctime":1585350374,"is_pvip":false,"replies":[{"id":"74524","content":"是的，这个下篇提到了","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585362929,"ip_address":"","comment_id":197030,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880317670","product_id":100047701,"comment_content":"补充一点，浮点数的==比较也有坑，跟浮点数小数精度有关","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489438,"discussion_content":"是的，这个下篇提到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585362929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196410,"user_name":"✨","can_delete":false,"product_type":"c1","uid":1257254,"ip_address":"","ucode":"73D4C65CA5008C","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/26/47745048.jpg","comment_is_top":false,"comment_ctime":1585279283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880246579","product_id":100047701,"comment_content":"Collections.sort(list);<br>也调用了compareTo吧，所以返回下标index2是不是应该等于0？","like_count":1},{"had_liked":false,"id":196341,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1585274335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880241631","product_id":100047701,"comment_content":"上班前看一遍+1","like_count":2},{"had_liked":false,"id":328164,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1640582113,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1640582113","product_id":100047701,"comment_content":"<br>如何查看 Lombok 编译后的代码呢？<br>","like_count":0},{"had_liked":false,"id":302539,"user_name":"身体健康万事如意","can_delete":false,"product_type":"c1","uid":2378101,"ip_address":"","ucode":"37246DBCDEB0C6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erLlkIiakffb0icyMQqh98qcHPFSFAjI97HiaGk2sozRTXGNVVjcjydenYjib2mgknziaf7zylm3ibr0AmA/132","comment_is_top":false,"comment_ctime":1626253917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626253917","product_id":100047701,"comment_content":"Interge 的缓存机制<br>默认范围[-128,127),可以在jvm修改范围<br>Integer num = 100;<br>编译器的执行是<br>Integer num = Integer.valueof(100); &#47;&#47;取缓存<br><br>字符串常量池<br>字符串不使用new时，会向字符串常量池添加新的字符串，如果常量池已存在，则直接引用已有的对象。<br>如果是new的String对象，可使用intern引用常量池已存在的对象，如果没有则添加。<br><br>1.如果重写equals方法，务必根据equals方法比较字段重写hashcode方法(根据hash结构存储的集合，会存储相同的对象)<br>2.实现comparable接口，务必保持compare，hashcode，equals方法比较字段一致<br>","like_count":0},{"had_liked":false,"id":273804,"user_name":"flyailove","can_delete":false,"product_type":"c1","uid":1755631,"ip_address":"","ucode":"3FD96988AB626A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c9/ef/56ccc350.jpg","comment_is_top":false,"comment_ctime":1610682561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610682561","product_id":100047701,"comment_content":"基本类型 ==<br>对象类型 equals<br>基本类型 有缓存池 int 为 [-128 - 127]<br>可以通过  -XX:AutoBoxCacheMax=1000 设置支持的最大值<br>字符串 常量池 字符串驻留或池化<br>字符串常量池 是MAP数据结构<br>&#47;&#47;-XX:+PrintStringTableStatistics 打印池的信息<br>&#47;&#47;-XX:StringTableSize=10000000 设置表的大小<br>intern 字段不能常用，会有性能问题。<br><br>","like_count":0},{"had_liked":false,"id":256900,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1603779498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603779498","product_id":100047701,"comment_content":"看了这篇文章感觉自己没有学过Java,该回炉了","like_count":0},{"had_liked":false,"id":241878,"user_name":"🐛🐛","can_delete":false,"product_type":"c1","uid":1367321,"ip_address":"","ucode":"C7C6F93764FD23","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/19/45afa234.jpg","comment_is_top":false,"comment_ctime":1597484027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597484027","product_id":100047701,"comment_content":"老师真棒","like_count":0},{"had_liked":false,"id":201688,"user_name":"justin","can_delete":false,"product_type":"c1","uid":1178721,"ip_address":"","ucode":"8EEB37B7914975","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/61/241b5c75.jpg","comment_is_top":false,"comment_ctime":1585821057,"is_pvip":false,"replies":[{"id":"75396","content":"因为没有进常量池","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585822472,"ip_address":"","comment_id":201688,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585821057","product_id":100047701,"comment_content":"老师您好，就是关于这个例子，加了intern()会在常量池驻留，导致每个bucket size变得很大。如果没有加intern()方法的时候，Average bucket size就变得很低，测试的是0.276，这个帮忙解释下<br>@GetMapping(&quot;internperformance&quot;)<br>public int internperformance(@RequestParam(value = &quot;size&quot;, defaultValue = &quot;10000000&quot;)int size) {<br>    &#47;&#47;-XX:+PrintStringTableStatistics<br>    &#47;&#47;-XX:StringTableSize=10000000<br>    long begin = System.currentTimeMillis();<br>    list = IntStream.rangeClosed(1, size)<br>            .mapToObj(i-&gt; String.valueOf(i).intern())<br>            .collect(Collectors.toList());<br>    log.info(&quot;size:{} took:{}&quot;, size, System.currentTimeMillis() - begin);<br>    return list.size();<br>}<br>","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490398,"discussion_content":"因为没有进常量池","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585822472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198729,"user_name":"EchosEcho","can_delete":false,"product_type":"c1","uid":1527473,"ip_address":"","ucode":"993828BAC9B385","user_header":"https://static001.geekbang.org/account/avatar/00/17/4e/b1/4b922c82.jpg","comment_is_top":false,"comment_ctime":1585465703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585465703","product_id":100047701,"comment_content":"getclass需要具体一种类型才能做比较，instanceof可以在子类和父类间实现equals方法","like_count":0},{"had_liked":false,"id":198611,"user_name":"努力奋斗的Pisces","can_delete":false,"product_type":"c1","uid":1336441,"ip_address":"","ucode":"AD4F8909CF190A","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/79/f1e1ca76.jpg","comment_is_top":false,"comment_ctime":1585459637,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585459637","product_id":100047701,"comment_content":"1.instanceof 涉及到继承的子类是都属于父类的判断<br>2.treeSet 是 treeMap的实现，使用了compareTo来比判断是否包含","like_count":0}]}