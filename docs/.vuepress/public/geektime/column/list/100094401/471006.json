{"id":471006,"title":"29｜运行时：Vue在浏览器里是怎么跑起来的？","content":"<p>你好，我是大圣。</p><p>上一讲我们学习了Vue响应式的大致原理，响应式就是可以把普通的JavaScript对象包裹成响应式对象，这样，我们对对象做的修改，响应式都能够监听到，并且执行effect内部注册的函数来执行数据修改之后的效果。</p><p>那今天我就跟你聊一下Vue在浏览器里是如何运行的，照例我们还是对着Vue 3的源码来学习，不过源码复杂，为了帮助你理解主要逻辑，我会直接把源码简化再演示，当然怎么简化源码的一些小技巧也会顺便分享给你。</p><p>好了废话不多说，我们马上开始。前端框架需要处理的最核心的两个流程，就是首次渲染和数据更新后的渲染。先来看首次渲染的源码。演示代码会用Vue 3的实际代码，你也可以在 <a href=\"https://github.com/shengxinjing/weiyouyi/blob/main/src/runtime-core/apiCreateApp.js#L4\">weiyouyi</a> 项目中看到我们课程的mini版本代码。</p><h2>首次渲染</h2><p>我们知道，想要启动一个Vue项目，只需要从Vue中引入createApp，传入App组件，并且调用createApp返回的App实例的mount方法，就实现了项目的启动。这个时候Vue也完成了首次渲染，代码逻辑如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/39/7c/3974d85351462f5190363869a39b1f7c.png?wh=1622x786\" alt=\"\"></p><p>所以createApp就是项目的初始化渲染入口。</p><p>但是这段简单的代码是怎么完成初始化渲染的呢？我们可以在Vue中的runtime-dom中看到createApp的定义，你可以打开 <a href=\"https://github.com/vuejs/vue-next/blob/master/packages/runtime-dom/src/index.ts#L66\">GitHub链接</a>查看。</p><!-- [[[read_end]]] --><p>这里就有一个看代码的小技巧，分享给你，我们首次查看源码的时候，可以先把一些无用的信息删除，方便自己梳理主体的逻辑。看Vue代码，和今天主题无关的无用信息有哪些，__COMPAT__代码是用来兼容Vue 2的，__DEV__代码是用来调试的，我们可以把这些代码删除之后，得到下面的简化版createApp源码。</p><p>再看思路就比较清晰了。我们使用ensureRenderer返回的对象去创建app，并且重写了app.mount方法；在mount方法内部，我们查找mount传递的DOM元素，并且调用ensureRenderer返回的mount方法，进行初始化渲染。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/70/82/7073e9c5b18e105a499e30208bd0c582.jpg?wh=2440x896\" alt=\"\"></p><p>之前我们讲过要会TypeScript，这时你就能感受到TypeScript的好处了，现在即使我们不知道app.mount是什么逻辑，也能知道这个函数的参数只能是Element、ShadowRoot或者string三者之一，也就很好理解内部的normalizeContainer就是把你传递的参数统一变为浏览器的DOM元素，Typescript类型带来的好处，我们在读源码的时候会一直感受得到。</p><pre><code class=\"language-javascript\">export const createApp = ((...args) =&gt; {\n  const app = ensureRenderer().createApp(...args)\n  const { mount } = app\n  // 重写mount\n  app.mount = (containerOrSelector: Element | ShadowRoot | string): any =&gt; {\n    const container = normalizeContainer(containerOrSelector)\n    if (!container) return\n\n    const component = app._component\n    if (!isFunction(component) &amp;&amp; !component.render &amp;&amp; !component.template) {\n      component.template = container.innerHTML\n    }\n    container.innerHTML = ''\n    const proxy = mount(container, false, container instanceof SVGElement)\n    if (container instanceof Element) {\n      container.removeAttribute('v-cloak')\n      container.setAttribute('data-v-app', '')\n    }\n    return proxy\n  }\n  return app\n}) \nfunction normalizeContainer(container){\n  if (isString(container)) {\n    const res = document.querySelector(container)\n  }\n  return container\n}\n</code></pre><p>我们继续深入了解ensureRenderer方法，以及ensureRenderer方法返回的createApp方法。</p><p><strong>这里ensureRenderer函数，内部通过createRenderer函数，创建了一个浏览器的渲染器，并且缓存了渲染器renderer</strong>，这种使用闭包做缓存的方式，你在日常开发中也可以借鉴这种思路。</p><p>createRenderer函数，我们在自定义渲染器那一讲里学到过，传递的rendererOptions就是浏览器里面标签的增删改查API：</p><pre><code class=\"language-javascript\">// 浏览器dom操作\nimport { nodeOps } from './nodeOps'\n// 浏览器dom属性更新\nimport { patchProp } from './patchProp'\nimport { createRenderer } from '@vue/runtime-core'\nconst rendererOptions = extend({ patchProp }, nodeOps)\n\nlet renderer: Renderer&lt;Element | ShadowRoot&gt; | HydrationRenderer\n\nfunction ensureRenderer() {\n  return (\n    renderer ||\n    (renderer = createRenderer&lt;Node, Element | ShadowRoot&gt;(rendererOptions))\n  )\n}  \n</code></pre><p>可以看到，createRenderer函数传递的参数是nodeOps和patchProp的合并对象。</p><p>我们继续进入nodeOps和pathProp也可以看到下面的代码，写了很多方法。通过ensureRenderer存储这些操作方法后，createApp内部就可以脱离具体的渲染平台了，这也是Vue 3实现跨端的核心逻辑：</p><pre><code class=\"language-javascript\">export const nodeOps: Omit&lt;RendererOptions&lt;Node, Element&gt;, 'patchProp'&gt; = {\n  insert: (child, parent, anchor) =&gt; {\n    parent.insertBefore(child, anchor || null)\n  },\n  remove: child =&gt; {\n    const parent = child.parentNode\n    if (parent) {\n      parent.removeChild(child)\n    }\n  },\n  createElement: (tag, isSVG, is, props): Element =&gt; {\n    const el = isSVG\n      ? doc.createElementNS(svgNS, tag)\n      : doc.createElement(tag, is ? { is } : undefined)\n\n    if (tag === 'select' &amp;&amp; props &amp;&amp; props.multiple != null) {\n      ;(el as HTMLSelectElement).setAttribute('multiple', props.multiple)\n    }\n    return el\n  },\n\n  createText: text =&gt; doc.createTextNode(text),\n\n  createComment: text =&gt; doc.createComment(text),\n\n  setText: (node, text) =&gt; {\n    node.nodeValue = text\n  },\n\n  setElementText: (el, text) =&gt; {\n    el.textContent = text\n  },\n  parentNode: node =&gt; node.parentNode as Element | null,\n  nextSibling: node =&gt; node.nextSibling,\n  querySelector: selector =&gt; doc.querySelector(selector),\n... \n}\n</code></pre><p>然后我们就需要进入到rumtime-core模块去看下createRenderer是如何工作的。你可以在这个<a href=\"https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/renderer.ts#L290\">GitHub链接</a>内看到createRenderer的代码逻辑。当然源码比较复杂，我们照样需要简化一下。</p><p>createRenderer是调用baseCreateRenderer创建的，baseCreateRenderer函数内部有十几个函数，代码行数合计2000行左右，这也是我们学习Vue源码最复杂的一个函数了。按前面简化源码的思路，先把工具函数的实现折叠起来，精简之后代码主要逻辑其实很简单。</p><p>我们一起来看。</p><p>首先获取了平台上所有的insert、remove函数，这些函数都是nodeOps传递进来的，然后定义了一些列patch、mount、unmount函数，通过名字我们不难猜出，这就是Vue中更新、渲染组件的工具函数，比如mountElement就是渲染DOM元素、mountComponent就是渲染组件updateComponent就是更新组件。这部分的简化代码，你也可以在<a href=\"https://github.com/shengxinjing/weiyouyi/blob/main/src/runtime-core/renderer.js\">weiyouyi</a>项目中查看。</p><pre><code class=\"language-javascript\">export function createRenderer&lt;\n  HostNode = RendererNode,\n  HostElement = RendererElement\n&gt;(options: RendererOptions&lt;HostNode, HostElement&gt;) {\n  return baseCreateRenderer&lt;HostNode, HostElement&gt;(options)\n}\n\nfunction baseCreateRenderer(){\n    const {\n    insert: hostInsert,\n    remove: hostRemove,\n    patchProp: hostPatchProp,\n    createElement: hostCreateElement,\n    createText: hostCreateText,\n    createComment: hostCreateComment,\n    setText: hostSetText,\n    setElementText: hostSetElementText,\n    parentNode: hostParentNode,\n    nextSibling: hostNextSibling,\n    setScopeId: hostSetScopeId = NOOP,\n    cloneNode: hostCloneNode,\n    insertStaticContent: hostInsertStaticContent\n  } = options\n  const patch = ()=&gt;... //一个函数\n  const processText = ()=&gt;...\n  const processCommentNode = ()=&gt;...\n  const processElement = ()=&gt;...\n  const mountElement = ()=&gt;...\n  const mountChildren = ()=&gt;...\n  const patchElement = ()=&gt;...\n  const patchBlockChildren = ()=&gt;...\n  const patchProps = ()=&gt;...\n  const processComponent = ()=&gt;...\n  const mountComponent = ()=&gt;...\n  const updateComponent = ()=&gt;...\n  const setupRenderEffect = ()=&gt;...\n  const patchChildren = ()=&gt;...\n  const patchKeyedChildren = ()=&gt;...\n  const unmount = ()=&gt;...\n  const unmountComponent = ()=&gt;...\n  const unmountComponent = ()=&gt;...\n  const unmountComponent = ()=&gt;...\n  const unmountComponent = ()=&gt;...\n  const render: RootRenderFunction = (vnode, container, isSVG) =&gt; {\n    if (vnode == null) {\n      if (container._vnode) {\n        unmount(container._vnode, null, null, true)\n      }\n    } else {\n      patch(container._vnode || null, vnode, container, null, null, null, isSVG)\n    }\n    flushPostFlushCbs()\n    container._vnode = vnode\n  }\n  return {\n    render,\n    hydrate,\n    createApp: createAppAPI(render, hydrate)\n  }\n}\n</code></pre><p>整个createApp函数的执行逻辑如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/7b/cfcbf6cd3f3195518f9e0e407338a37b.jpg?wh=2526x2208\" alt=\"\"></p><p>最后返回的createApp方法，实际上是createAPI的返回值，并且给createAPI传递了render方法。render方法内部很简单，就是判断container容器上有没有_vnode属性，如果有的话就执行unmout方法，没有的话就执行patch方法，最后把vnode信息存储在container._vnode上。</p><p>那createAppAPI又做了什么呢？我们继续进入createAppAPI源码，看下面的代码。内部创建了一个app对象，app上注册了我们熟悉的use、component和mount等方法：</p><pre><code class=\"language-javascript\">export function createAppAPI&lt;HostElement&gt;(\n  render: RootRenderFunction,\n  hydrate?: RootHydrateFunction\n): CreateAppFunction&lt;HostElement&gt; {\n  return function createApp(rootComponent, rootProps = null) {\n    const context = createAppContext()\n    let isMounted = false\n\n    const app: App = (context.app = {\n      _context: context,\n      _instance: null,\n      use(plugin: Plugin, ...options: any[]) ,\n      component(name: string, component?: Component): any {\n        if (!component) {\n          return context.components[name]\n        }\n        context.components[name] = component\n        return app\n      },\n      directive(name: string, directive?: Directive)\n      mount(\n        rootContainer: HostElement,\n        isHydrate?: boolean,\n        isSVG?: boolean\n      ): any {\n        if (!isMounted) {\n          const vnode = createVNode(\n            rootComponent as ConcreteComponent,\n            rootProps\n          )\n          vnode.appContext = context\n          // 核心的逻辑\n          if (isHydrate &amp;&amp; hydrate) {\n            hydrate(vnode as VNode&lt;Node, Element&gt;, rootContainer as any)\n          } else {\n            render(vnode, rootContainer, isSVG)\n          }\n          return getExposeProxy(vnode.component!) || vnode.component!.proxy\n        } \n      },\n\n      provide(key, value) {\n        context.provides[key as string] = value\n        return app\n      }\n    })\n\n    return app\n  }\n}\n</code></pre><p>可以看到mount内部执行的是传递进来的render方法，也就是上面的render方法。container 就是我们app.mount中传递的DOM元素，对DOM元素进行处理之后，执行patch函数实现整个应用的加载。</p><p>所以我们的下一个任务就是需要搞清楚patch函数的执行逻辑。</p><h3>patch 函数</h3><p>patch传递的是container._vnode，也就是上一次渲染缓存的vnode、本次渲染组件的vnode，以及容器container。</p><p>下面就是patch函数的代码，核心代码我添加了注释。其中n1是上次渲染的虚拟DOM，n2是下次要渲染的虚拟DOM。</p><p>首先可以把n1和n2做一次判断，如果虚拟DOM的节点类型不同，就直接unmount之前的节点。因为比如之前是Button组件，现在要渲染Container组件，就没有计算diff的必要，直接把Button组件销毁再渲染Container即可。</p><p>如果n1和n2类型相同，比如都是Button组件或者都是div标签，我们需要判断具体的类型再去执行不同的函数，比如processText、processFragment、processElement以及processComponent等函数。</p><p>看第55行，这里的ShapeFlags用到了位运算的知识，我们后面会通过刷算法题的方式介绍，暂时我们只需要知道，ShapeFlags可以帮助我们快速判断需要操作的类型就可以了。</p><pre><code class=\"language-javascript\">  const patch: PatchFn = (\n    n1,\n    n2,\n    container,\n    anchor = null,\n    parentComponent = null,\n    parentSuspense = null,\n    isSVG = false,\n    slotScopeIds = null,\n    optimized = __DEV__ &amp;&amp; isHmrUpdating ? false : !!n2.dynamicChildren\n  ) =&gt; {\n    // 两次虚拟dom完全一样 啥也不用干\n    if (n1 === n2) {\n      return\n    }\n    // 虚拟dom节点类型不一样， unmount老的虚拟dom，并且n1赋值null\n    if (n1 &amp;&amp; !isSameVNodeType(n1, n2)) {\n      anchor = getNextHostNode(n1)\n      unmount(n1, parentComponent, parentSuspense, true)\n      n1 = null\n    }\n    // n2是要渲染的虚拟dom，我们获取type，ref和shapeFlag\n    const { type, ref, shapeFlag } = n2\n    switch (type) {\n      case Text:\n        // 文本\n        processText(n1, n2, container, anchor)\n        break\n      case Comment:\n        // 注释\n        processCommentNode(n1, n2, container, anchor)\n        break\n      case Static:\n        // 静态节点\n        if (n1 == null) {\n          mountStaticNode(n2, container, anchor, isSVG)\n        } else if (__DEV__) {\n          patchStaticNode(n1, n2, container, isSVG)\n        }\n        break\n      case Fragment:\n        processFragment(\n          n1,\n          n2,\n          container,\n          anchor,\n          parentComponent,\n          parentSuspense,\n          isSVG,\n          slotScopeIds,\n          optimized\n        )\n        break\n      default:\n        // 运运算判断操作类型\n        if (shapeFlag &amp; ShapeFlags.ELEMENT) {\n          // html标签\n          processElement(\n            n1,\n            n2,\n            container,\n            anchor,\n            parentComponent,\n            parentSuspense,\n            isSVG,\n            slotScopeIds,\n            optimized\n          )\n        } else if (shapeFlag &amp; ShapeFlags.COMPONENT) {\n          // 组件\n          processComponent(\n            n1,\n            n2,\n            container,\n            anchor,\n            parentComponent,\n            parentSuspense,\n            isSVG,\n            slotScopeIds,\n            optimized\n          )\n        } else if (shapeFlag &amp; ShapeFlags.TELEPORT) {\n          ;(type as typeof TeleportImpl).process(\n            n1 as TeleportVNode,\n            n2 as TeleportVNode,\n            container,\n            anchor,\n            parentComponent,\n            parentSuspense,\n            isSVG,\n            slotScopeIds,\n            optimized,\n            internals\n          )\n        } else if (__FEATURE_SUSPENSE__ &amp;&amp; shapeFlag &amp; ShapeFlags.SUSPENSE) {\n          ;(type as typeof SuspenseImpl).process(\n            n1,\n            n2,\n            container,\n            anchor,\n            parentComponent,\n            parentSuspense,\n            isSVG,\n            slotScopeIds,\n            optimized,\n            internals\n          )\n        } else if (__DEV__) {\n          warn('Invalid VNode type:', type, `(${typeof type})`)\n        }\n    }\n\n    // set ref\n    if (ref != null &amp;&amp; parentComponent) {\n      setRef(ref, n1 &amp;&amp; n1.ref, parentSuspense, n2 || n1, !n2)\n    }\n  }\n</code></pre><p>代码的整体执行逻辑如下图所示：<img src=\"https://static001.geekbang.org/resource/image/c5/a8/c5c55f140c4573b698265c99bc9cf8a8.jpg?wh=1699x778\" alt=\"\"></p><p>我们首次渲染的App是一个组件，所以要执行的就是processComponent方法。</p><h3>processComponent方法</h3><p>那我们继续进入到processComponent代码内部，看下面的代码。首次渲染的时候，n1就是null，所以会执行mountComponent；如果是更新组件的时候，n1就是上次渲染的vdom，需要执行updateComponent。</p><pre><code class=\"language-javascript\">  const processComponent = (\n    n1: VNode | null,\n    n2: VNode,\n    container: RendererElement,\n    anchor: RendererNode | null,\n    parentComponent: ComponentInternalInstance | null,\n    parentSuspense: SuspenseBoundary | null,\n    isSVG: boolean,\n    slotScopeIds: string[] | null,\n    optimized: boolean\n  ) =&gt; {\n    n2.slotScopeIds = slotScopeIds\n    if (n1 == null) {\n      if (n2.shapeFlag &amp; ShapeFlags.COMPONENT_KEPT_ALIVE) {\n        ;(parentComponent!.ctx as KeepAliveContext).activate(\n          n2,\n          container,\n          anchor,\n          isSVG,\n          optimized\n        )\n      } else {\n        mountComponent(\n          n2,\n          container,\n          anchor,\n          parentComponent,\n          parentSuspense,\n          isSVG,\n          optimized\n        )\n      }\n    } else {\n      updateComponent(n1, n2, optimized)\n    }\n  }\n</code></pre><p>updateComponent是虚拟DOM的逻辑，我们会在下一讲详细剖析，这一讲主要讲首次渲染的过程。</p><p>所以我们进入mountComponent函数中，可以看到mountComponent函数内部会对组件的类型进行一系列的判断，还有一些对Vue 2的兼容代码，核心的渲染逻辑就是setupComponent函数和setupRenderEffect函数。</p><pre><code class=\"language-javascript\">import {setupComponent} from './component'\n  const mountComponent: MountComponentFn = (\n  ) =&gt; {\n    // 2.x compat may pre-creaate the component instance before actually\n    // mounting\n    const compatMountInstance =\n      __COMPAT__ &amp;&amp; initialVNode.isCompatRoot &amp;&amp; initialVNode.component\n    const instance: ComponentInternalInstance =\n      compatMountInstance ||\n      (initialVNode.component = createComponentInstance(\n        initialVNode,\n        parentComponent,\n        parentSuspense\n      ))\n\n    // resolve props and slots for setup context\n    if (!(__COMPAT__ &amp;&amp; compatMountInstance)) {\n\n      setupComponent(instance)\n\n    }\n     (\n      instance,\n      initialVNode,\n      container,\n      anchor,\n      parentSuspense,\n      isSVG,\n      optimized\n    )\n\n    if (__DEV__) {\n      popWarningContext()\n      endMeasure(instance, `mount`)\n    }\n  }\n</code></pre><p>setupComponent和setupRenderEffect，它俩又做了点什么呢？可以参考下面的示意图这两个实现组件首次渲染的函数：<br>\n<img src=\"https://static001.geekbang.org/resource/image/d4/51/d4b431396eb7ef90e9ab0e1021f46051.jpg?wh=3213x1529\" alt=\"\"></p><h3>setupComponent</h3><p>首先看setupComponent，要完成的就是执行我们写的setup函数。</p><p>可以看到，内部先初始化了props和slots，并且执行setupStatefulComponent创建组件，而这个函数内部从component中获取setup属性，也就是script setup内部实现的函数，就进入到我们组件内部的reactive、ref等函数实现的逻辑了。</p><pre><code class=\"language-javascript\">export function setupComponent(\n  instance: ComponentInternalInstance,\n  isSSR = false\n) {\n  isInSSRComponentSetup = isSSR\n\n  const { props, children } = instance.vnode\n  const isStateful = isStatefulComponent(instance)\n  initProps(instance, props, isStateful, isSSR)\n  initSlots(instance, children)\n\n  const setupResult = isStateful\n    ? setupStatefulComponent(instance, isSSR)\n    : undefined\n  isInSSRComponentSetup = false\n  return setupResult\n}\n\nfunction setupStatefulComponent(\n  instance: ComponentInternalInstance,\n  isSSR: boolean\n) {\n  const Component = instance.type as ComponentOptions\n  // 执行setup\n  const { setup } = Component\n  if (setup) {\n    const setupContext = (instance.setupContext =\n      setup.length &gt; 1 ? createSetupContext(instance) : null)\n\n    setCurrentInstance(instance)\n    pauseTracking()\n    const setupResult = callWithErrorHandling(\n      setup,\n      instance,\n      ErrorCodes.SETUP_FUNCTION,\n      [instance.props, setupContext]\n    )\n    if (isPromise(setupResult)) {\n      setupResult.then(unsetCurrentInstance, unsetCurrentInstance)\n    } else {\n      handleSetupResult(instance, setupResult, isSSR)\n    }\n  } else {\n    finishComponentSetup(instance, isSSR)\n  }\n}\n\nexport function callWithErrorHandling(\n  fn: Function,\n  instance: ComponentInternalInstance | null,\n  type: ErrorTypes,\n  args?: unknown[]\n) {\n  let res\n  try {\n    res = args ? fn(...args) : fn()\n  } catch (err) {\n    handleError(err, instance, type)\n  }\n  return res\n}\n</code></pre><h3>setupRenderEffect</h3><p>另一个setupRenderEffect函数，就是为了后续数据修改注册的函数，我们先梳理一下核心的实现逻辑。</p><p>组件首次加载会调用patch函数去初始化子组件，注意setupRenderEffect本身就是在patch函数内部执行的，所以这里就会递归整个虚拟DOM树，然后触发生命周期mounted，完成这个组件的初始化。</p><p>页面首次更新结束后，setupRenderEffect不仅实现了组件的递归渲染，还注册了组件的更新机制。</p><p>在下面的核心代码中，我们通过ReactiveEffect创建了effect函数，这个概念上一讲我们手写过，然后执行instance.update赋值为effect.run方法，这样结合setup内部的ref和reactive绑定的数据，数据修改之后，就会触发update方法的执行，内部就会componentUpdateFn，内部进行递归的patch调用执行每个组件内部的update方法实现组件的更新。</p><pre><code class=\"language-javascript\">    if (!instance.isMounted) {\n         patch(\n            null,\n            subTree,\n            container,\n            anchor,\n            instance,\n            parentSuspense,\n            isSVG\n          )\n    }else{\n      // updateComponent\n    }\n    // create reactive effect for rendering\n    const effect = new ReactiveEffect(\n      componentUpdateFn,\n      () =&gt; queueJob(instance.update),\n      instance.scope // track it in component's effect scope\n    )\n\n    const update = (instance.update = effect.run.bind(effect) as SchedulerJob)\n    update.id = instance.uid\n\n    update()\n</code></pre><p>这样我们就实现了整个Vue的渲染和更新流程。</p><h2>总结</h2><p>今天要学的内容就聊完了，我们来总结一下学到的内容吧，今天我们分析了Vue 3在浏览器中执行的全流程，你可以配合Vue在浏览器中执行的流程图来复习。<br>\n<img src=\"https://static001.geekbang.org/resource/image/5f/f7/5f2527dd6eb75120bc3644cdfa5636f7.jpg?wh=6962x3378\" alt=\"\"></p><p>Vue通过createApp创建应用，并且执行返回的mount方法实现在浏览器中的挂载，在createApp中，通过传递浏览器平台的操作方法nodeOps创建了浏览器的渲染器renderer。</p><p>首次执行Vue项目的时候，通过patch实现组件的渲染，patch函数内部根据节点的不同类型，去分别执行processElement、processComponent、processText等方法去递归处理不同类型的节点，最终通过setupComponent执行组件的setup函数，setupRenderEffect中使用响应式的effect函数监听数据的变化。</p><p>你可以先看我们实现的迷你版本项目weiyouyi，然后再去看Vue 3中实际的代码，可以学习代码中很多优秀的设计思路，比如createRenderer中使用闭包作为缓存、使用位运算来提高组件类型的判断效率等。学习优秀框架中的代码设计，这对我们日常开发项目的代码质量也有很好的提高作用。</p><h2>思考题</h2><p>最后留一个思考题，mount函数中除了render函数，还有一个hydrate的函数调用，这个函数式干什么用的呢？欢迎在评论区分享你的答案，我们下一讲再见。</p>","neighbors":{"left":{"article_title":"28｜响应式：万能的面试题，怎么手写响应式系统","id":470089},"right":{"article_title":"30｜虚拟DOM（上）：如何通过虚拟DOM更新页面？","id":471011}},"comments":[]}