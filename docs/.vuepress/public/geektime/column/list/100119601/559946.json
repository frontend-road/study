{"id":559946,"title":"04｜JSX：如何理解这种声明式语法糖？","content":"<p>你好，我是宋一玮。上节课我们利用Create React App（CRA）脚手架工具创建了一个React项目，并在项目中部分实现了一个简单的看板应用。在接下来的课程里，我们会把看板应用抽丝剥茧，逐一认识学习项目里涉及到的React概念和API。很自然地，我们这节课会讲到JSX语法和React组件。</p><p>有不少初学者对React的第一印象就是JSX语法，以至于会有这样的误解：</p><ul>\n<li>JSX就是React？</li>\n<li>JSX就是React组件？</li>\n<li>JSX就是另一种HTML？</li>\n<li>JSX既能声明视图，又能混入JS表达式，那是不是可以把所有逻辑都写在JSX里？</li>\n</ul><p>这些误解常会导致开发时遇到各种问题：</p><ul>\n<li>写出连续超百行、甚至近千行的JSX代码，既冗长又难维护；</li>\n<li>在JSX的标签上添加了HTML属性却不生效；</li>\n<li>JSX混入JS表达式后，页面一直报错。</li>\n</ul><p>其实只要<strong>理清了JSX和React组件的关系</strong>，这些问题自然不在话下。</p><p>总的来说，React是一套声明式的、组件化的前端框架。顾名思义，<strong>声明（动词）组件</strong>是React前端开发工作最重要的组成部分。在声明组件的代码中使用了JSX语法，JSX不是HTML，也不是组件的全部。</p><p>接下来，我们就详细展开介绍JSX和React组件。</p><!-- [[[read_end]]] --><h2>JSX是语法糖</h2><p>Web应用日益复杂，其视图中往往包含很多的控制逻辑，比如条件、循环等。以声明式开发视图，就需要把控制逻辑代码也加入到声明语句中去。而这样的代码，就对可读性、可维护性提出了挑战。</p><p>在JSX之前，前端领域有各种视图模版技术，JSP、Struts、Handlebars、Pug等，都在用各自的方法满足这些需求。那么JSX语法与其他声明式模版语法有什么异同？不用JSX可以写React吗？</p><p>我们在这节课开始时提到了React组件，组件是React开发的基本单位。在组件中，需要被渲染的内容是用 <code>React.createElement(component, props, ...children)</code> 声明的，而JSX正是<code>createElement</code>函数的语法糖。浏览器本身不支持JSX，所以在应用发布上线前，<strong>JSX源码需要工具编译成由若干</strong><code>createElement</code><strong>函数组成的JS代码，然后才能在浏览器中正常执行</strong>。至于编译工具，我们在后面的课程会有所涉及。</p><p>例如，上节课看板组件的部分JSX：</p><pre><code>&lt;header className=&quot;App-header&quot;&gt;\n  &lt;h1&gt;我的看板&lt;/h1&gt;\n&lt;/header&gt;\n</code></pre><p>编译成JS就会变成：</p><pre><code>React.createElement(&quot;header&quot;, {className: &quot;App-header&quot;},\n  React.createElement(&quot;h1&quot;, null, &quot;我的看板&quot;)\n);\n</code></pre><p>当然你也可以选择不用JSX，而是自己手写这些JS代码。这样做最显著的好处就是，这部分代码不需要针对JSX做编译，直接可以作用于浏览器。但当元素或者元素的嵌套层级比较多时，JS代码的右括号会越来越多。当你看到成篇的 <code>))))))));</code> 时，你的代码和内心会有一个先崩溃。就算IDE帮忙自动格式化，对应层级缩进，也没法减少括号嵌套的数量。</p><p>也许是因为先入为主，在Web领域，类HTML语法天生就更受欢迎。<strong>JSX提供的类HTML/XML的语法会让声明代码更加直观</strong>，在IDE的支持下，语法高亮更醒目，<strong>比起纯JS也更容易维护</strong>。相比JSX带来的开发效率的提升，编译JSX的成本基本可以忽略不计。</p><p>如果光看JSX中“X”的部分，还不足以让它和其他HTML/XML模版技术区别开来，这里还要强调一下JSX中“JS”的部分。请你回忆一下我们在上节课写的JSX代码，以里面的条件渲染为例：</p><pre><code>{ showAdd &amp;&amp; &lt;KanbanNewCard onSubmit={handleSubmit} /&gt; }\n\n我们来对比一下Java SSH（Spring+Struts2+Hibernate）技术栈里Struts2模版的写法：\n\n&lt;s:if test=&quot;showAdd&quot;&gt;\n    &lt;div&gt;KanbanNewCard ...&lt;/div&gt;\n&lt;/s:if&gt;\n</code></pre><p>可以发现两者判断条件的语义是相同的，区别是Struts2用XML定义了一套名为标签库的DSL（Domain-Specific Language，领域特定语言），由标签库提供的 <code>&lt;s:if&gt;&lt;/s:if&gt;</code>做条件渲染；而<strong>JSX则直接利用了JS语句。很明显，JS表达式能做的，JSX都能做，不需要开发者再去学习一套新的DSL</strong>。</p><p>也正是因为JSX作为语法糖足够“甜”，我们才能得到这样的结论：JSX是前端视图领域“最JS”的声明式语法，它为React的推广和流行起了至关重要的作用。</p><h2>前端开发中的声明式与命令式</h2><p>既然刚才提到了声明式（Declarative），就一定要提一下命令式（Imperative）。这两种编程范式的PK存在于软件开发的各个领域。下面的表格呢，从（非）现实世界用例、各领域代表性技术、具体JS语句三个方面，将声明式和命令式做了一个对比。</p><p><img src=\"https://static001.geekbang.org/resource/image/25/2f/250e1722bde8db58da7b49c38b4e902f.jpg?wh=4000x2250\" alt=\"\"></p><p>React是声明式的前端技术，这一点首先就体现在创建组件的视图上，无论是使用JSX语法还是直接利用<code>React.createElement()</code> 函数，都是在<strong>描述开发者期待的视图状态</strong>。开发者只需关心渲染结果，而React框架内部会实现具体的渲染过程，最终调用浏览器DOM API。</p><p>你可能会感兴趣：“除了jQuery，还有其他的前端框架是命令式的吗？”肯定是有的，但很明显，声明式才是主流。目前的三大主流前端框架，React、Vue、Angular都是声明式的。包括Flutter这样的新兴跨端框架也类似，都采用了典型的声明式API，以下是Flutter的官方例子：</p><pre><code>Widget titleSection = Container(\n  padding: const EdgeInsets.all(32),\n  child: Row(\n    children: [\n      Expanded(\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Container(\n              padding: const EdgeInsets.only(bottom: 8),\n              child: const Text('Oeschinen Lake Campground'),\n            ),\n            Text('Kandersteg, Switzerland'),\n          ],\n        ),\n      ),\n      Icon(\n        Icons.star,\n        color: Colors.red[500],\n      ),\n      const Text('41'),\n    ],\n  ),\n);\n</code></pre><p>多少有点眼熟吧。很有意思的是，从2017年开始，每年都有Flutter用户在社区中呼吁引入JSX语法（<a href=\"https://github.com/flutter/flutter/issues/11609\">#11609</a>、<a href=\"https://github.com/flutter/flutter/issues/15922\">#15922</a>、<a href=\"https://github.com/flutter/flutter/issues/70928\">#70928</a>），但这一愿望都没有实现。这又一次彰显了JSX这种语法糖的吸引力。</p><p>理解了JSX是语法糖，其真实身份是声明式的<code>React.createElement()</code> 函数，接下来我们来看看它的具体写法。</p><h2>JSX的写法和常见坑</h2><p>先回到一个简单的问题上，JSX是哪几个单词的缩写？是的，<strong>J</strong>ava<strong>S</strong>cript <strong>X</strong>ML，即在JS语言里加入类XML的语法扩展。这样我们就可以把JSX一分为二：先介绍<strong>X</strong>的部分，即标签的命名规则，支持的元素类型、子元素类型；然后是<strong>JS</strong>的部分，即JSX中都有哪里可以加入JS表达式、规则是什么，进一步回顾上节课的条件渲染和循环渲染表达式。</p><h3>JSX的基本写法</h3><p>请你回顾一下上节课 <code>src/App.js</code>的内容，我们将以<code>App</code> 组件为例，串讲一下JSX的常规写法和写JSX时常踩的坑。为了方便参考，我会在这里贴一部分<code>App</code> 组件的源码。</p><pre><code>function App() {\n  const [showAdd, setShowAdd] = useState(false);\n  const [todoList, setTodoList] = useState([]);\n  const handleAdd = (evt) =&gt; {\n    setShowAdd(true);\n  };\n  const handleSubmit = (title) =&gt; {\n    setTodoList(currentTodoList =&gt; [\n      { title, status: new Date().toDateString() },\n      ...currentTodoList\n    ]);\n    setShowAdd(false);\n  };\n\n return (\n    &lt;div className=&quot;App&quot;&gt;\n      &lt;header className=&quot;App-header&quot;&gt;\n        &lt;h1&gt;我的看板&lt;/h1&gt;\n        &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;\n      &lt;/header&gt;\n      &lt;main className=&quot;kanban-board&quot;&gt;\n        &lt;section className=&quot;kanban-column column-todo&quot;&gt;\n          &lt;h2&gt;待处理&lt;button onClick={handleAdd}\n            disabled={showAdd}&gt;&amp;#8853; 添加新卡片&lt;/button&gt;&lt;/h2&gt;\n          &lt;ul&gt;\n            { showAdd &amp;&amp; &lt;KanbanNewCard onSubmit={handleSubmit} /&gt; }\n            { todoList.map(props =&gt; &lt;KanbanCard {...props} /&gt;) }\n          &lt;/ul&gt;\n        &lt;/section&gt;\n        {/* ...省略 */}\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>虽然在写JSX时并不需要时时惦记着编译出来的<code>React.createElement()</code> 语句，但在学习时还是很有帮助的。我们来看一下JSX各个组成部分与<code>React.createElement()</code> 函数各参数的对应关系，代码如下：</p><pre><code>React.createElement(type)\nReact.createElement(type, props)\nReact.createElement(type, props, ...children)\n</code></pre><p>其中 <code>type</code> 参数是必须的，props可选，当参数数量<a href=\"#\">\\geq</a>3时，可以有一个或多个children。</p><p>以下是一个具体例子：</p><pre><code>   &lt;li className=&quot;kanban-card&quot;&gt;\n&lt;!-- ^^ ^^^^^^^^^ ^^^^^^^^^^^^^\n  type  props-key  props-value                                  --&gt;\n      &lt;div className=&quot;card-title&quot;&gt;{title}&lt;/div&gt;   &lt;!-- children --&gt;\n      &lt;div className=&quot;card-status&quot;&gt;{status}&lt;/div&gt; &lt;!-- ____|    --&gt;\n    &lt;/li&gt;\n</code></pre><p>把children中的一个成员单独来看，也是对应一条<code>createElement()</code> 语句的：</p><pre><code>   &lt;div className=&quot;card-title&quot;&gt;{title}&lt;/div&gt;\n&lt;!-- ^^^ ^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^\n   type  props-key props-value   children --&gt;\n</code></pre><p>你可以在这个<a href=\"https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react&prettier=false&targets=&version=7.18.4&externalPlugins=&assumptions=%7B%7D\">在线Babel编译器</a>中做各种实验。</p><p>这里额外说一个大坑。当<code>App</code> 代码 <code>return</code> 语句返回JSX时，将JSX包在了一对括号 <code>( )</code> 里，这是为了避免踏入JS自动加分号的陷阱。例如：</p><pre><code>function Component() {\n  return \n    &lt;div&gt;{/*假设这行JSX语句很长，为了提升一些代码可读性才特地换行*/}&lt;/div&gt;;\n}\n</code></pre><p>放到编译器里会生成：</p><pre><code>function Component() {\n  return;\n  React.createElement(&quot;div&quot;, null);\n}\n</code></pre><p>整个函数短路了！根本不会执行到<code>React.createElement()</code> 语句。为了修正这个问题，我们需要为JSX加上括号：</p><pre><code>function Component() {\n  return (\n    &lt;div&gt;{/*假设这行JSX语句很长，为了提升一些代码可读性，特地换行*/}&lt;/div&gt;\n  );\n}\n</code></pre><p>再次编译：</p><pre><code>function Component() {\n  return React.createElement(&quot;div&quot;, null);\n}\n</code></pre><p>终于对了。</p><p>你能想象当年我和同事找Bug找了一整天，最后发现只是 <code>(</code> <code>)</code> 两个字符的问题吗？ “一朝被蛇咬，十年怕井绳。”自此，我养成了为JSX最外层加括号的习惯，甚至连单行return都会加上括号。毕竟在改老代码时，单行return有可能会改成多行，留下忘加括号的隐患。</p><h3>命名规则</h3><p>俗话说“无规矩不以成方圆”，学习JSX，就让我们从命名规则开始。</p><p>自定义React组件时，组件本身采用的变量名或者函数名，需要以大写字母开头。</p><pre><code>function MyApp() {\n//_______^\n  return (&lt;div&gt;&lt;/div&gt;);\n}\nconst KanbanCard = () =&gt; (\n//____^\n  &lt;div&gt;&lt;/div&gt;\n);\n</code></pre><p>在JSX中编写标签时，HTML元素名称均为小写字母，自定义组件首字母务必大写。</p><pre><code>   &lt;h1&gt;我的看板&lt;/h1&gt;\n&lt;!-- ^________全小写 --&gt;\n    &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;\n&lt;!-- ^^^______全小写 --&gt;\n    &lt;button onClick={handleAdd} disabled={showAdd}&gt;添加新卡片&lt;/button&gt;\n&lt;!-- ^^^^^^___全小写 --&gt;\n\n\n    &lt;KanbanCard /&gt;\n&lt;!-- ^_____首字母大写 --&gt;\n</code></pre><p>如果你很坚持自定义组件也要全小写，那我鼓励你亲手试一下，比如 <code>&lt;camelCaseComponent /&gt;</code>。在浏览器开发者工具中定位到这个元素，你会发现React把它当成了一个不规范的HTML标签直接丢给了浏览器，而浏览器也不认识它，直接解析成 <code>&lt;camelcasecomponent&gt;&lt;/camelcasecomponent&gt;</code>。这也算是React的一种约定大于配置（Convention Over Configuration）了。</p><p>至于 <code>props</code> 属性名称，在React中使用驼峰命名（camelCase），且区分大小写，比如在 <code>&lt;FileCard filename=\"文件名\" fileName=\"另一个文件名\" /&gt;</code> 中，你可以同时传两个字母相同但大小写不同的属性 ，这与传统的HTML属性不同。</p><h3>JSX元素类型</h3><p>从前面的源码来看，我们在代表组件的函数里，返回了一整段JSX。JSX产生的每个节点都称作React元素，它是React应用的最小单元。React元素有三种基本类型：</p><ol>\n<li>React封装的DOM元素，如 <code>&lt;div&gt;&lt;/div&gt;</code>、 <code>&lt;img /&gt;</code> ，这部分元素会最终被渲染为真实的DOM；</li>\n<li>React组件渲染的元素，如<code>&lt;KanbanCard /&gt;</code> ，这部分元素会调用对应组件的渲染方法；</li>\n<li>React Fragment元素，<code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code> 或者简写成 <code>&lt;&gt;&lt;/&gt;</code>，这一元素没有业务意义，也不会产生额外的DOM，主要用来将多个子元素分组。</li>\n</ol><p>其他还有Portal、Suspense等类型，这节课我们先不展开。</p><p>我们会为JSX元素加入props，不同类型元素的props有所区别。</p><p>React封装的DOM元素将浏览器DOM整体做了一次面向React的标准化，比如在HTML中很容易引起混淆的<code>readonly=\"true\"</code> ，它的W3C标准应该是 <code>readonly=\"readonly\"</code> ，而常被误用的<code>readonly=\"false\"</code> 其实是无用的（谐音梗），在React JSX中就统一为 <code>readOnly={true}</code> 或 <code>readOnly={false}</code> ，更贴近JS的开发习惯。</p><p>至于前面反复出现的 <code>className=\"kanban-card\"</code> ，更多是因为 HTML标签里的<code>class</code> 是JS里的保留字，需要避开。</p><p>React组件渲染的元素，JSX中的props应该与自定义组件定义中的props对应起来；如果没有特别处理，没有对应的props会被忽略掉。这也是开发JSX时偶尔会犯的错误，在组件定义中改了props的属性名，但忘了改对应的JSX元素中的props，导致子组件拿不到属性值。</p><p>至于Fragment元素，没有props。</p><h3>JSX子元素类型</h3><p>JSX元素可以指定子元素。在之后的课程里你会看到很多子组件的概念，这里先留一个印象：<strong>子元素不一定是子组件，子组件一定是子元素</strong>。</p><p>子元素的类型包括：</p><ol>\n<li>字符串，最终会被渲染成HTML标签里的字符串；</li>\n<li>另一段JSX，会嵌套渲染；</li>\n<li>JS表达式，会在渲染过程中执行，并让返回值参与到渲染过程中；</li>\n<li>布尔值、null值、undefined值，不会被渲染出来；</li>\n<li>以上各种类型组成的数组。</li>\n</ol><h3>JSX中的JS表达式</h3><p>在JSX中可以插入JS表达式，特征是用大括号 <code>{ }</code> 包起来，主要有两个地方：</p><ol>\n<li>作为props值，如 <code>&lt;button disabled={showAdd}&gt;添加新卡片&lt;/button&gt;</code>；</li>\n<li>作为JSX元素的子元素，如 <code>&lt;div className=\"card-title\"&gt;{title}&lt;/div&gt;</code>。</li>\n</ol><p>这些表达式可以简单到原始数据类型 <code>{true}</code> 、<code>{123}</code> ，也可以复杂到一大串Lambda组成的函数表达式 <code>{ todoList.filter(card =&gt; card.title.startsWith('TODO:')).map(props =&gt; &lt;KanbanCard {...props} /&gt;) }</code> ，只要确保最终的返回值符合props值或者JSX子元素的要求，就是有效的表达式。</p><p>前面也讲到，<strong>JSX是声明式的，所以它的内部不应该出现命令式的语句</strong>，如 <code>if ... else ...</code>。当你拿不准自己写到JSX <code>{ }</code> 里的代码到底是不是表达式，可以试着把这部分代码直接赋值给一个JS变量。如果这个赋值能成功，说明它确实是表达式；如果赋值不成功，可以从如下四个方面进行检查：</p><ul>\n<li>是否有语法错误；</li>\n<li>是否使用了<code>for...of</code>的声明式变体<code>array.forEach</code> ，这个中招几率比较高；</li>\n<li>是否没有返回值；</li>\n<li>是否有返回值，但不符合props或者子元素的要求。</li>\n</ul><p>另外有个props表达式的特殊用法：属性展开， <code>&lt;KanbanCard {...props} /&gt;</code> 利用JS <code>...</code> 语法把 <code>props</code> 这个对象中的所有属性都传给 <code>KanbanCard</code> 组件。</p><p>对了，如果你想在JSX里加注释，会发现HTML注释 <code>&lt;!-- --&gt;</code>根本没法通过编译，这时需要改用 <code>{/* */}</code> 来加注释，编译时它会被识别成JS注释然后抛弃掉。</p><h3>回顾条件渲染和循环渲染</h3><p>有了上面的知识，我请你再回顾一下上节课中的条件渲染和循环渲染：</p><pre><code>{ showAdd &amp;&amp; &lt;KanbanNewCard onSubmit={handleSubmit} /&gt; }\n\n</code></pre><p>上面是一个典型的条件表达式，如果<code>showAdd</code> 为 <code>true</code> 时，会返回后面的JSX，渲染《新建看板卡片》组件；否则会返回 <code>showAdd</code> 的值，即 <code>false</code> 。根据子元素类型中描述的，<code>false</code> 值并不会被渲染出来，《新建看板卡片》组件就不会被渲染了。</p><pre><code>{ todoList.map(props =&gt; &lt;KanbanCard {...props} /&gt;) }\n</code></pre><p>上面是一个典型的数组转换表达式。当 <code>todoList</code> 为空数组时，表达式返回一个新的空数组，不会渲染出来；而当<code>todoList</code> 包含1个或更多个项目时，会返回一个JSX的数组，相当于：</p><pre><code>{[\n  &lt;KanbanCard title=&quot;开发任务-1&quot; status=&quot;22-05-22 18:15&quot; /&gt;,\n  &lt;KanbanCard title=&quot;开发任务-2&quot; status=&quot;22-05-22 18:15&quot; /&gt;\n]}\n</code></pre><h2>JSX与React组件的关系</h2><p>你终于忍不住问出这个问题：“前面课里反复提到React组件，为啥一个普普通通的<code>function App() {}</code> 函数就成组件了？”</p><p>这是个好问题！</p><p>鲁迅笔下的名人孔乙己曾说过“回字有四样写法”，巧了，React组件也是。React组件最初不是这么精简的。目前React的版本是v18，7年前的2015年React发布了两个大版本v0.13和v0.14（你可以理解成v13和v14），当时React组件的主流写法是：</p><pre><code>const KanbanCard = React.createClass({\n  render: function() {\n    return (&lt;div&gt;KanbanCard ...&lt;/div&gt;);\n  }\n});\n</code></pre><p>FB官方在v0.13中开始推广<a href=\"https://zh-hans.reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#plain-javascript-classes\">ES6 class</a>的写法：</p><pre><code>class KanbanCard extends React.Component {\n  render() {\n    return (&lt;div&gt;KanbanCard {this.props.title}&lt;/div&gt;);\n  }\n}\n</code></pre><p>用这两种方式<strong>定义组件时，最核心的就是实现</strong> <code>render()</code> <strong>方法。</strong><code>render()</code> 方法的<strong>返回值可以是一段JSX（或对应的React元素）、原始数据类型</strong>（注：该方法在React v18以前的版本不可以返回<code>undefined</code>，否则会报错） 、<strong>其他React数据类型或者是这几种类型的数组</strong>。</p><p>除了<code>render()</code> 方法，这两种写法还能加入其他属性和方法，完整实现React组件具有的状态管理、生命周期、事件处理等功能，这些功能我们放在后续的课程里，在这里暂时不展开。所以说JSX只是React组件的一部分，这就澄清了“JSX就是React组件”这个误解。</p><p>除了前面两种写法，在v0.14，React新加入了一种更为简化的<strong>无状态函数组件</strong>（<a href=\"https://zh-hans.reactjs.org/blog/2015/10/07/react-v0.14.html#stateless-function-components\">Stateless Function Component</a>）：</p><pre><code>// ES6箭头函数\nconst KanbanCard = (props) =&gt; {\n  var title = props.title;\n  return (&lt;div&gt;KanbanCard {title}&lt;/div&gt;);\n};\n  \n// 更简单的箭头函数+参数解构\nconst KanbanCard = ({title}) =&gt; (\n  &lt;div&gt;KanbanCard {title}&lt;/div&gt;\n);\n</code></pre><p>函数的参数就是props，<strong>函数的返回值与前面两种写法中</strong><code>render()</code><strong>方法的返回值相同</strong>。这种函数组件在React Hooks尚未发布时，还不能自己处理state状态，需要在它的父组件提供状态，并通过props传递给它。虽然函数组件功能受限，但它贵在简单，受到了开发者的广泛欢迎。以至于开源社区开发了各种支持库，用诸如高阶组件的方式补足函数组件缺失的功能。</p><p>当时最出名的库莫过于<a href=\"https://github.com/acdlite/recompose\">recompose</a>，举个简单的例子：</p><pre><code>import { withState } from 'recompose';\n\nconst enhance = withState('showAdd', 'setShowAdd', false);\nconst KanbanColumn = enhance(({ showAdd, setShowAdd }) =&gt; (\n  &lt;section className=&quot;kanban-column column-todo&quot;&gt;\n    &lt;h2&gt;\n      待处理\n      &lt;button onClick={() =&gt; setShowAdd(true)}&gt;添加新卡片&lt;/button&gt;\n    &lt;/h2&gt;\n    &lt;ul&gt;\n      { showAdd &amp;&amp; &lt;KanbanNewCard /&gt; }\n    &lt;/ul&gt;\n  &lt;/section&gt;\n));\n</code></pre><p>其中可以看到 <code>KanbanColumn</code> 组件的主体是 <code>enhance</code> 参数的箭头函数组件。前面 <code>recompose</code> 的<code>withState(stateName, stateUpdaterName, initialState)</code> 函数会创建一个单一功能的高阶组件（高阶组件后面课程会讲到），它会创建名为 <code>showAdd</code> 的state，并通过props传递给作为子组件的函数组件，父子组件结合在一起，形成一个功能完整的React组件。顺便一提，后来recompose的作者还加入了React官方开发组。</p><p>到了React v16.8，Hooks正式发布，函数组件取代类组件成为了React组件的C位。题外话，对于React函数组件的流行，我在当年是有点意外的。我本人是ES6 class的死忠粉，但后来先后上手了recompose和官方的Hooks，真香。</p><p>当然，介绍这段历史并不是为了吃瓜，最重要的还是回答你刚才的问题“为啥一个普普通通的函数就成组件了” 。</p><p>简单总结一下，函数组件上位的原因包括：</p><ul>\n<li>React的哲学 <code>UI=f(state)</code> ；</li>\n<li>更彻底的关注点分离（Separation Of Concerns）；</li>\n<li>函数式编程的影响；</li>\n<li>React内部实现的不断优化；</li>\n<li>开源社区的反哺。</li>\n</ul><h2>小结</h2><p>这节课我们学习了JSX的概念和写法，同时也引出了React声明式的特性，也初步聊了一下React组件。</p><p>这时我相信你已经不会再有这节课开头的误解了：</p><ul>\n<li>\n<p>JSX就是React？</p>\n<ul>\n<li>不是。JSX只是React其中一个API，<code>createElement</code> 函数的语法糖。</li>\n</ul>\n</li>\n<li>\n<p>JSX就是React组件？</p>\n<ul>\n<li>不是。JSX是React组件渲染方法返回值的一部分，React组件还有其他的功能。</li>\n</ul>\n</li>\n<li>\n<p>JSX就是另一种HTML？</p>\n<ul>\n<li>不是。JSX本质还是JS，只是在最终渲染时才创建修改DOM。</li>\n</ul>\n</li>\n<li>\n<p>JSX既能声明视图，又能混入JS表达式，那是不是可以把所有逻辑都写在JSX里？</p>\n<ul>\n<li>可以是可以，但毕竟不能在JSX里使用命令式语句，能做的事情很有限。</li>\n</ul>\n</li>\n</ul><p>运用好JSX，可以很大程度提高你的React开发效率和效果。</p><p>下一讲，我们将趁热打铁，继续探讨React组件，从比React元素颗粒度更大的层面，认识React渲染的机制。同时也学习如何从业务和技术两方面入手，将一份原始的需求拆解为若干React组件。</p><h2>思考题</h2><p>这一讲中间举过一个Flutter的例子，提到用户希望将JSX语法引入Flutter。想请你按这个思路思考如下两个问题：</p><ol>\n<li>JSX一定得是React吗？React以外的技术能不能使用JSX？</li>\n<li>JSX一定得生成HTML吗？可以用JSX生成其他模版吗？</li>\n</ol><p>欢迎把你的想法分享在留言区，我会和你交流。相信经过你的深度思考，学习效果会更好！我们下节课再见！</p>","neighbors":{"left":{"article_title":"03｜看板应用：从零开始快速搭建一个React项目","id":553817},"right":[]},"comments":[]}