{"id":426740,"title":"02｜拒绝“Hello and Bye”：Go语言的设计哲学是怎么一回事？","content":"<p>你好，我是Tony Bai。</p><p>上一讲，我们探讨了<strong>“Go从哪里来，并可能要往哪里去”</strong>的问题。根据“绝大多数主流编程语言将在其15至20年间大步前进”这个依据，我们给出了一个结论：<strong>Go语言即将进入自己的黄金5~10年</strong>。</p><p>那么此时此刻，想必你已经跃跃欲试，想要尽快开启Go编程之旅。但在正式学习Go语法之前，我还是要再来给你<strong>泼泼冷水</strong>，因为这将决定你后续的学习结果，是“从入门到继续”还是“从入门到放弃”。</p><p>很多编程语言的初学者在学习初期，可能都会遇到这样的问题：最初兴致勃勃地开始学习一门编程语言，学着学着就发现了很多“别扭”的地方，比如想要的语言特性缺失、语法风格冷僻与主流语言差异较大、语言的不同版本间无法兼容、语言的语法特性过多导致学习曲线陡峭、语言的工具链支持较差，等等。</p><p>其实以上的这些问题，本质上都与语言设计者的设计哲学有关。所谓编程语言的设计哲学，就是指决定这门语言演化进程的高级原则和依据。</p><p><strong>设计哲学之于编程语言，就好比一个人的价值观之于这个人的行为。</strong></p><p>因为如果你不认同一个人的价值观，那你其实很难与之持续交往下去，即所谓道不同不相为谋。类似的，如果你不认同一门编程语言的设计哲学，那么大概率你在后续的语言学习中，就会遇到上面提到的这些问题，而且可能会让你失去继续学习的精神动力。</p><!-- [[[read_end]]] --><p>因此，在真正开始学习Go语法和编码之前，我们还需要先来了解一下Go语言的设计哲学，等学完这一讲之后，你就能更深刻地认识到自己学习Go语言的原因了。</p><p>我将Go语言的设计哲学总结为五点：简单、显式、组合、并发和面向工程。下面，我们就先从Go语言的第一设计哲学“<strong>简单</strong>”开始了解吧。</p><h3>简单</h3><p>知名Go开发者戴维·切尼（Dave Cheney）曾说过：“大多数编程语言创建伊始都致力于成为一门简单的语言，但最终都只是满足于做一个强大的编程语言”。</p><p><strong>而Go语言是一个例外。Go语言的设计者们在语言设计之初，就拒绝了走语言特性融合的道路，选择了“做减法”并致力于打造一门简单的编程语言。</strong></p><p>选择了“简单”，就意味着Go不会像C++、Java那样将其他编程语言的新特性兼蓄并收，所以你在Go语言中看不到传统的面向对象的类、构造函数与继承，看不到结构化的异常处理，也看不到本属于函数编程范式的语法元素。</p><p>其实，Go语言也没它看起来那么简单，自身实现起来并不容易，但这些复杂性被Go语言的设计者们“隐藏”了，所以Go语法层面上呈现了这样的状态：</p><ul>\n<li>仅有25个关键字，主流编程语言最少；</li>\n<li>内置垃圾收集，降低开发人员内存管理的心智负担；</li>\n<li>首字母大小写决定可见性，无需通过额外关键字修饰；</li>\n<li>变量初始为类型零值，避免以随机值作为初值的问题；</li>\n<li>内置数组边界检查，极大减少越界访问带来的安全隐患；</li>\n<li>内置并发支持，简化并发程序设计；</li>\n<li>内置接口类型，为组合的设计哲学奠定基础；</li>\n<li>原生提供完善的工具链，开箱即用；</li>\n<li>… …</li>\n</ul><p>看，我说的没错吧，确实挺简单的。当然了，任何的设计都存在着权衡与折中。我们看到Go设计者选择的“简单”，其实是站在巨人肩膀上，去除或优化了以往语言中，已经被开发者证明为体验不好或难以驾驭的语法元素和语言机制，并提出了自己的一些创新性的设计。比如，首字母大小写决定可见性、变量初始为类型零值、内置以go关键字实现的并发支持等。</p><p>Go这种有些“逆潮流”的“简单哲学”并不是一开始就能得到程序员的理解的，但在真正使用Go之后，我们才能真正体会到这种简单所带来的收益：简单意味着可以使用更少的代码实现相同的功能；简单意味着代码具有更好的可读性，而可读性好的代码通常意味着更好的可维护性以及可靠性。</p><p>总之，在软件工程化的今天，这些都意味着对生产效率提升的极大促进，我们可以认为<strong>简单的设计哲学是Go生产力的源泉</strong>。</p><h3>显式</h3><p>好，接下来我们继续来了解学习下Go语言的第二大设计哲学：<strong>显式</strong>。</p><p>首先，我想先带你来看一段C程序，我们一起来看看“隐式”代码的行为特征。</p><p>在C语言中，下面这段代码可以正常编译并输出正确结果：</p><pre><code class=\"language-plain\">#include &lt;stdio.h&gt;\n\nint main() {\n\t\tshort int a = 5;\n\n\t\tint b = 8;\n\t\tlong c = 0;\n\t\t\n\t\tc = a + b;\n\t\tprintf(\"%ld\\n\", c);\n}\n</code></pre><p>我们看到在上面这段代码中，变量a、b和c的类型均不相同，C语言编译器在编译 <code>c = a + b</code> 这一行时，会自动将短整型变量a和整型变量b，先转换为long类型然后相加，并将所得结果存储在long类型变量c中。那如果换成Go来实现这个计算会怎么样呢？我们先把上面的C程序转化成等价的Go代码：</p><pre><code class=\"language-plain\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    var a int16 = 5\n    var b int = 8\n    var c int64\n\n    c = a + b\n    fmt.Printf(\"%d\\n\", c)\n}\n</code></pre><p>如果我们编译这段程序，将得到类似这样的编译器错误：“invalid operation: a + b (mismatched types int16 and int)”。我们能看到Go与C语言的隐式自动类型转换不同，Go不允许不同类型的整型变量进行混合计算，它同样也不会对其进行隐式的自动转换。</p><p>因此，如果要使这段代码通过编译，我们就需要对变量a和b进行<strong>显式转型</strong>，就像下面代码段中这样：</p><pre><code class=\"language-plain\">c = int64(a) + int64(b)\nfmt.Printf(\"%d\\n\", c)\n</code></pre><p>而这其实就是Go语言<strong>显式设计哲学</strong>的一个体现。</p><p>在Go语言中，不同类型变量是不能在一起进行混合计算的，这是因为<strong>Go希望开发人员明确知道自己在做什么</strong>，这与C语言的“信任程序员”原则完全不同，因此你需要以显式的方式通过转型统一参与计算各个变量的类型。</p><p>除此之外，Go设计者所崇尚的显式哲学还直接决定了Go语言错误处理的形态：Go语言采用了<strong>显式的基于值比较的错误处理方案</strong>，函数/方法中的错误都会通过return语句显式地返回，并且通常调用者不能忽略对返回的错误的处理。</p><p>这种有悖于“主流语言潮流”的错误处理机制还一度让开发者诟病，社区也提出了多个新错误处理方案，但或多或少都包含隐式的成分，都被Go开发团队一一否决了，这也与显式的设计哲学不无关系。</p><h3>组合</h3><p>接着，我们来看第三个设计哲学：<strong>组合</strong>。</p><p>这个设计哲学和我们各个程序之间的耦合有关，Go语言不像C++、Java等主流面向对象语言，我们在Go中是找不到经典的面向对象语法元素、类型体系和继承机制的，Go推崇的是组合的设计哲学。</p><p>在诠释组合之前，我们需要先来了解一下Go在语法元素设计时，是如何为“组合”哲学的应用奠定基础的。</p><p>在Go语言设计层面，Go设计者为开发者们提供了正交的语法元素，以供后续组合使用，包括：</p><ul>\n<li>Go语言无类型层次体系，各类型之间是相互独立的，没有子类型的概念；</li>\n<li>每个类型都可以有自己的方法集合，类型定义与方法实现是正交独立的；</li>\n<li>实现某个接口时，无需像Java那样采用特定关键字修饰；</li>\n<li>包之间是相对独立的，没有子包的概念。</li>\n</ul><p>我们可以看到，无论是包、接口还是一个个具体的类型定义，Go语言其实是为我们呈现了这样的一幅图景：一座座没有关联的“孤岛”，但每个岛内又都很精彩。那么现在摆在面前的工作，就是在这些孤岛之间以最适当的方式建立关联，并形成一个整体。而<strong>Go选择采用的组合方式，也是最主要的方式</strong>。</p><p>Go语言为支撑组合的设计提供了<strong>类型嵌入</strong>（Type Embedding）。通过类型嵌入，我们可以将已经实现的功能嵌入到新类型中，以快速满足新类型的功能需求，这种方式有些类似经典面向对象语言中的“继承”机制，但在原理上却与面向对象中的继承完全不同，这是一种Go设计者们精心设计的“语法糖”。</p><p>被嵌入的类型和新类型两者之间没有任何关系，甚至相互完全不知道对方的存在，更没有经典面向对象语言中的那种父类、子类的关系，以及向上、向下转型（Type Casting）。通过新类型实例调用方法时，方法的匹配主要取决于方法名字，而不是类型。这种组合方式，我称之为<strong>垂直组合</strong>，即通过类型嵌入，快速让一个新类型“复用”其他类型已经实现的能力，实现功能的垂直扩展。</p><p>你可以看看下面这个Go标准库中的一段使用类型嵌入的组合方式的代码段：</p><pre><code class=\"language-plain\">// $GOROOT/src/sync/pool.go\ntype poolLocal struct {\n    private interface{}   \n    shared  []interface{}\n    Mutex               \n    pad     [128]byte  \n}\n</code></pre><p>在代码段中，我们在poolLocal这个结构体类型中嵌入了类型Mutex，这就使得poolLocal这个类型具有了互斥同步的能力，我们可以通过poolLocal类型的变量，直接调用Mutex类型的方法Lock或Unlock。<br>\n另外，我们在标准库中还会经常看到类似如下定义接口类型的代码段：</p><pre><code class=\"language-plain\">// $GOROOT/src/io/io.go\ntype ReadWriter interface {\n    Reader\n    Writer\n}\n</code></pre><p>这里，标准库通过嵌入接口类型的方式来实现接口行为的聚合，组成大接口，这种方式在标准库中尤为常用，并且已经成为了Go语言的一种惯用法。<br>\n垂直组合本质上是一种“能力继承”，采用嵌入方式定义的新类型继承了嵌入类型的能力。Go还有一种常见的组合方式，叫<strong>水平组合</strong>。和垂直组合的能力继承不同，水平组合是一种能力委托（Delegate），我们通常使用接口类型来实现水平组合。</p><p>Go语言中的接口是一个创新设计，它只是方法集合，并且它与实现者之间的关系无需通过显式关键字修饰，它让程序内部各部分之间的耦合降至最低，同时它也是连接程序各个部分之间“纽带”。</p><p>水平组合的模式有很多，比如一种常见方法就是，通过接受接口类型参数的普通函数进行组合，如以下代码段所示：</p><pre><code class=\"language-plain\">// $GOROOT/src/io/ioutil/ioutil.go\nfunc ReadAll(r io.Reader)([]byte, error)\n\n// $GOROOT/src/io/io.go\nfunc Copy(dst Writer, src Reader)(written int64, err error)\n</code></pre><p>也就是说，函数ReadAll通过io.Reader这个接口，将io.Reader的实现与ReadAll所在的包低耦合地水平组合在一起了，从而达到从任意实现io.Reader的数据源读取所有数据的目的。类似的水平组合“模式”还有点缀器、中间件等，这里我就不展开了，在后面讲到接口类型时再详细叙述。</p><p>此外，我们还可以将Go语言内置的并发能力进行灵活组合以实现，比如，通过goroutine+channel的组合，可以实现类似Unix Pipe的能力。</p><p>总之，组合原则的应用实质上是塑造了Go程序的骨架结构。类型嵌入为类型提供了垂直扩展能力，而接口是水平组合的关键，它好比程序肌体上的“关节”，给予连接“关节”的两个部分各自“自由活动”的能力，而整体上又实现了某种功能。并且，组合也让遵循“简单”原则的Go语言，在表现力上丝毫不逊色于其他复杂的主流编程语言。</p><h3>并发</h3><p>好，前面我们已经看过3个设计哲学了，紧接着我带你看的是第4个：<strong>并发</strong>。</p><p>“并发”这个设计哲学的出现有它的背景，你也知道CPU都是靠提高主频来改进性能的，但是现在这个做法已经遇到了瓶颈。主频提高导致CPU的功耗和发热量剧增，反过来制约了CPU性能的进一步提高。2007年开始，处理器厂商的竞争焦点从主频转向了多核。</p><p>在这种大背景下，Go的设计者在决定去创建一门新语言的时候，果断将面向多核、<strong>原生支持并发</strong>作为了新语言的设计原则之一。并且，Go放弃了传统的基于操作系统线程的并发模型，而采用了<strong>用户层轻量级线程</strong>，Go将之称为 <strong>goroutine</strong>。</p><p>goroutine占用的资源非常小，Go运行时默认为每个goroutine分配的栈空间仅2KB。goroutine调度的切换也不用陷入（trap）操作系统内核层完成，代价很低。因此，一个Go程序中可以创建成千上万个并发的goroutine。而且，所有的Go代码都在goroutine中执行，哪怕是go运行时的代码也不例外。</p><p>在提供了开销较低的goroutine的同时，Go还在语言层面内置了辅助并发设计的原语：channel和select。开发者可以通过语言内置的channel传递消息或实现同步，并通过select实现多路channel的并发控制。相较于传统复杂的线程并发模型，Go对并发的原生支持将大大降低开发人员在开发并发程序时的心智负担。</p><p>此外，并发的设计哲学不仅仅让Go在语法层面提供了并发原语支持，其对Go应用程序设计的影响更为重要。并发是一种程序结构设计的方法，它使得并行成为可能。</p><p>采用并发方案设计的程序在单核处理器上也是可以正常运行的，也许在单核上的处理性能可能不如非并发方案。但随着处理器核数的增多，并发方案可以自然地提高处理性能。</p><p>而且，并发与组合的哲学是一脉相承的，并发是一个更大的组合的概念，它在程序设计的全局层面对程序进行拆解组合，再映射到程序执行层面上：goroutines各自执行特定的工作，通过channel+select将goroutines组合连接起来。并发的存在鼓励程序员在程序设计时进行独立计算的分解，而对并发的原生支持让Go语言也更适应现代计算环境。</p><h3>面向工程</h3><p>最后，我们来看一下Go的最后一条设计哲学：面向工程。</p><p>Go语言设计的初衷，就是<strong>面向解决真实世界中Google内部大规模软件开发存在的各种问题，为这些问题提供答案</strong>，这些问题包括：程序构建慢、依赖管理失控、代码难于理解、跨语言构建难等。</p><p>很多编程语言设计者和他们的粉丝们认为这些问题并不是一门编程语言应该去解决的，但Go语言的设计者并不这么看，他们在Go语言最初设计阶段就<strong>将解决工程问题作为Go的设计原则之一</strong>去考虑Go语法、工具链与标准库的设计，这也是Go与其他偏学院派、偏研究型的编程语言在设计思路上的一个重大差异。</p><p>语法是编程语言的用户接口，它直接影响开发人员对于这门语言的使用体验。在面向工程设计哲学的驱使下，Go在语法设计细节上做了精心的打磨。比如：</p><ul>\n<li>重新设计编译单元和目标文件格式，实现Go源码快速构建，让大工程的构建时间缩短到类似动态语言的交互式解释的编译速度；</li>\n<li>如果源文件导入它不使用的包，则程序将无法编译。这可以充分保证任何Go程序的依赖树是精确的。这也可以保证在构建程序时不会编译额外的代码，从而最大限度地缩短编译时间；</li>\n<li>去除包的循环依赖，循环依赖会在大规模的代码中引发问题，因为它们要求编译器同时处理更大的源文件集，这会减慢增量构建；</li>\n<li>包路径是唯一的，而包名不必唯一的。导入路径必须唯一标识要导入的包，而名称只是包的使用者如何引用其内容的约定。“包名称不必是唯一的”这个约定，大大降低了开发人员给包起唯一名字的心智负担；</li>\n<li>故意不支持默认函数参数。因为在规模工程中，很多开发者利用默认函数参数机制，向函数添加过多的参数以弥补函数API的设计缺陷，这会导致函数拥有太多的参数，降低清晰度和可读性；</li>\n<li>增加类型别名（type alias），支持大规模代码库的重构。</li>\n</ul><p>在标准库方面，Go被称为“自带电池”的编程语言。如果说一门编程语言是“自带电池”，则说明这门语言标准库功能丰富，多数功能不需要依赖外部的第三方包或库，Go语言恰恰就是这类编程语言。</p><p>由于诞生年代较晚，而且目标比较明确，Go在标准库中提供了各类高质量且性能优良的功能包，其中的 <code>net/http</code>、<code>crypto</code>、<code>encoding</code> 等包充分迎合了云原生时代的关于API/RPC Web服务的构建需求，Go开发者可以直接基于标准库提供的这些包实现一个满足生产要求的API服务，从而减少对外部第三方包或库的依赖，降低工程代码依赖管理的复杂性，也降低了开发人员学习第三方库的心理负担。</p><p>而且，开发人员在工程过程中肯定是需要使用工具的，Go语言就提供了足以让所有其它主流语言开发人员羡慕的工具链，工具链涵盖了编译构建、代码格式化、包依赖管理、静态代码检查、测试、文档生成与查看、性能剖析、语言服务器、运行时程序跟踪等方方面面。</p><p>这里值得重点介绍的是 <strong>gofmt</strong> ，它统一了Go语言的代码风格，在其他语言开发者还在为代码风格争论不休的时候，Go开发者可以更加专注于领域业务中。同时，相同的代码风格让以往困扰开发者的代码阅读、理解和评审工作变得容易了很多，至少Go开发者再也不会有那种因代码风格的不同而产生的陌生感。Go的这种统一代码风格思路也在开始影响着后续新编程语言的设计，并且一些现有的主流编程语言也在借鉴Go的一些设计。</p><p>在提供丰富的工具链的同时，Go在标准库中提供了官方的词法分析器、语法解析器和类型检查器相关包，开发者可以基于这些包快速构建并扩展Go工具链。</p><h3>小结</h3><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>在这一讲中，我和你一起了解了Go语言的设计哲学：<strong>简单</strong>、<strong>显式</strong>、<strong>组合</strong>、<strong>并发和面向工程</strong>。</p><ul>\n<li>简单是指Go语言特性始终保持在少且足够的水平，不走语言特性融合的道路，但又不乏生产力。简单是Go生产力的源泉，也是Go对开发者的最大吸引力；</li>\n<li>显式是指任何代码行为都需开发者明确知晓，不存在因“暗箱操作”而导致可维护性降低和不安全的结果；</li>\n<li>组合是构建Go程序骨架的主要方式，它可以大幅降低程序元素间的耦合，提高程序的可扩展性和灵活性；</li>\n<li>并发是Go敏锐地把握了CPU向多核方向发展这一趋势的结果，可以让开发人员在多核时代更容易写出充分利用系统资源、支持性能随CPU核数增加而自然提升的应用程序；</li>\n<li>面向工程是Go语言在语言设计上的一个重大创新，它将语言要解决的问题域扩展到那些原本并不是由编程语言去解决的领域，从而覆盖了更多开发者在开发过程遇到的“痛点”，为开发者提供了更好的使用体验。</li>\n</ul><p>这些设计哲学直接影响了Go语言自身的设计。理解这些设计哲学，也能帮助我们理解Go语言语法、标准库以及工具链的演化决策过程。</p><p>好了，学完这节课之后，你认同Go的设计哲学吗？认同的话就继续跟着我学下去吧。</p><h3>思考题</h3><p>今天，我还想问下你，你还能举出哪些符合Go语言设计哲学的例子吗？欢迎在留言区多多和我分享讨论。</p><p>感谢你和我一起学习，也欢迎你把这节课分享给更多对Go语言的设计哲学感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","neighbors":{"left":{"article_title":"01｜前世今生：你不得不了解的Go的历史和现状","id":426282},"right":{"article_title":"03｜配好环境：选择一种最适合你的Go安装方法","id":427489}},"comments":[{"had_liked":false,"id":316268,"user_name":"自由","can_delete":false,"product_type":"c1","uid":2576960,"ip_address":"","ucode":"4E3B53D29D86CA","user_header":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","comment_is_top":false,"comment_ctime":1634233629,"is_pvip":false,"replies":[{"id":114612,"content":"👍。说的很好。很认同你提到的基于“类型别名”的渐进式代码修复(Gradual code repair) 思路。这也是类型别名最初被引入go的初衷（https:&#47;&#47;github.com&#47;golang&#47;proposal&#47;blob&#47;master&#47;design&#47;18130-type-alias.md）。我觉得它也是go面向工程设计哲学的体现。另外type alias在基于现有实现进行扩展并做出新的封装方面也有“奇效”。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634361803,"ip_address":"","comment_id":316268,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bai 老师，你好，例举两个我认为复合 Go 语言设计哲学的例子，我的技术能力捉襟见肘，说的不对地方还希望老师斧正。\n\n一、异常处理\n\nGo 语言核心开发者 Dave 曾说过 “You only need to check the error value if you care about the result”，在我们不处理错误的时候，我们不应该对它的返回值抱有任何幻想。\n\nGo 的异常处理逻辑，没有引入 exception，而是使用了多参数返回，在返回中带上错误，由调用者来判定这个错误。\n\n- 简单\n- 没有隐藏的控制流\n- 完全交给你控制 error\n- 考虑失败，而不是成功\n\n二、类型别名\n\n在特定情况下，帮助代码逐步修复。\n\n类型别名的存在，是 渐进式代码修复(Gradual code repair) 的关键，什么是渐进式代码修复？举一个🌰 重构。重构代码，我们当然希望重构后的好处，能够适用于所有代码，但是，重构的好处与代价是成正比的，往往一次重构会伴随着大量的修改，随着代码量越来越大，一次完成所有修改变得不可行。修复需要逐步完成。在代码量少时，我们可以一次性完成所有的修复，这样的修复被称为原子代码修复(atomic code repair)，它的概念很简单，就是在一次提交中，更新所有的因为重构带来的问题修复，但是概念的简单会被实际的复杂性抵消，一次提交可能非常大，大的提交很难去一次性修复，出现问题也很难去溯源，最重要的是，可能会与其他同学的工作产生冲突，例如某个同学，在工作时，使用了旧的 API，合并代码时，并不会产生冲突，而我的提交错过了它的引用。\n\n因此，我们需要一个过渡期，这个过渡期就是为了逐步替换，也就是渐进式代码修复，将旧的引用，逐步替换，同时将旧的换为新的，这就是渐进式代码修复，它的缺点是比原子代码修复的工作量更大，但是它更容易提交、审查，并且保证了，没有人引用后再删除旧的类型别名。\n","like_count":40},{"had_liked":false,"id":318319,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1635239512,"is_pvip":false,"replies":[{"id":115620,"content":"好问题！\n\ngo的组合有多种形式。按你提到的“继承”型组合中，如果组合的两个类型中有相同名字的字段，那怎么解决呢？看下面中的例子：\n\npackage main\n\ntype T1 struct {\n\ta int\n}\ntype T2 struct {\n\ta int\n}\ntype T struct {\n\tT1\n\tT2\n}\n\nfunc main() {\n\tvar t T\n\t&#47;&#47;\tt.a = 5 &#47;&#47; 编译报错：ambiguous selector t.a\n\tt.T1.a = 5\n\tt.T2.a = 6\n\tprintln(t.T1.a) &#47;&#47; 5\n\tprintln(t.T2.a) &#47;&#47; 6\n}\n\n如果T组合的两个类型T1和T2都包含字段a，那么我们不能直接使用t.a，而是通过t.T1.a和t.T2.a分别指代各自类型中的字段a。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635565858,"ip_address":"","comment_id":318319,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"表示身为一名Java工程师，在看到组合的时候有一点疑惑，我的想法是这里的组合就是将另一个类里面的东西平移过来，类似于java中的继承，我想问的是如果存在两个类包含相同名字的方法或者属性，这个go怎么处理？还是直接就不允许呢？go语言从来没接触过，不懂就问","like_count":31,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528332,"discussion_content":"👍。说的很好。很认同你提到的基于“类型别名”的渐进式代码修复(Gradual code repair) 思路。这也是类型别名最初被引入go的初衷（https://github.com/golang/proposal/blob/master/design/18130-type-alias.md）。我觉得它也是go面向工程设计哲学的体现。另外type alias在基于现有实现进行扩展并做出新的封装方面也有“奇效”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634361803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811536,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/50/e1501629.jpg","nickname":"练就更强丶","note":"","ucode":"F9AEA637515D88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594043,"discussion_content":"例如某个同学，在工作时，使用了旧的 API，合并代码时，并不会产生冲突，而我的提交错过了它的引用。\n这里啥意思，没看懂-.-","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1668739437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128549,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","nickname":"悟二空","note":"","ucode":"BF3B8BA6E49B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567786,"discussion_content":"Go 的异常处理逻辑，没有引入 exception，而是使用了多参数返回，在返回中带上错误，由调用者来判定这个错误。\n- 简单\n- 没有隐藏的控制流\n- 完全交给你控制 error\n- 考虑失败，而不是成功\n\n总结的也非常棒呢👍一下就能理解和记住了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650988094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006424,"avatar":"","nickname":"Geek_xbye50","note":"","ucode":"0BF3780C247F22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607634,"discussion_content":"楼主大佬问下，渐进式修复以及原子代码修复原文是出自哪里？方便说下么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678056409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001843,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erRavHNiaicxIIrTK5JjKyCNaSKN2MhnM2X0IuNpcoDoyn0OUOqYgdEb0brT9QgibAKyjBP3R3x0W3Jw/132","nickname":"huntersudo","note":"","ucode":"3DABEEF17ACBBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541201,"discussion_content":"厉害，渐进式修复解释精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640280580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405994,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634689795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316330,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1634272330,"is_pvip":false,"replies":[{"id":114617,"content":"罗杰出品的问题，都是精品问题^_^。\n\n先来看第一个问题，Go最初设计目标是通用的系统编程语言，但Go选择支持了GC。Go的GC虽然在go团队的努力下，开销越来越小，但开销小，低延迟不代表没有，这就决定了Go在一些对性能极其敏感的领域可能并不是最好的选择。你的问题中也提到了pvp服务，想必你们也是采用了面向服务的架构，这种架构本身就是可以天然适合技术异构的。如果觉得不妥，也别强求，果断换非GC语言，比如c、c++或是rust。如果说非要坚持用go来完成，那么说明你是go的骨灰粉，在解决问题的过程中，你也会完成一次go技能的升华。\n\n\n第二个问题，Go语言的简单或者说功能特性少，的确来自与less is more的理念。保持一门小语言，让语言更容易学习与理解。同时每个特性都是经过精心打磨与实现，不能再少了。上周我看了rob pike最新一期的talk，他还在说 “Go语言中变量声明的方式有些多了”，这也是我在实际编码过程中的体会。如果重新来过，我想rob pike会更彻底的执行less is more，将变量声明方式再减少一种。所以说，特性少不是不想做，而是经过深思熟虑，那个特性的确没必要加入到语言中。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634368094,"ip_address":"","comment_id":316330,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"21 世纪的 C 语言，的确实至名归。依然有几个小问题：1. Go 有 GC，我们使用 Go 来开发后端的所有服务，有个 PVP 的服务，需要逐帧计算客户端上报的结果是否正确，此时对于内存的分配就要特别小心，开发起来很不顺畅。是否这种服务的性质不太合适使用 Go 来开发；2. 有人吐槽 Go 核心人员不想做的东西，就是 Less is more，自己想做就是各种哲学，这个问题，老师怎么看？","like_count":21,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529186,"discussion_content":"好问题！\n\ngo的组合有多种形式。按你提到的“继承”型组合中，如果组合的两个类型中有相同名字的字段，那怎么解决呢？看下面中的例子：\n\npackage main\n\ntype T1 struct {\n\ta int\n}\ntype T2 struct {\n\ta int\n}\ntype T struct {\n\tT1\n\tT2\n}\n\nfunc main() {\n\tvar t T\n\t//\tt.a = 5 // 编译报错：ambiguous selector t.a\n\tt.T1.a = 5\n\tt.T2.a = 6\n\tprintln(t.T1.a) // 5\n\tprintln(t.T2.a) // 6\n}\n\n如果T组合的两个类型T1和T2都包含字段a，那么我们不能直接使用t.a，而是通过t.T1.a和t.T2.a分别指代各自类型中的字段a。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1635565858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1520538,"avatar":"https://static001.geekbang.org/account/avatar/00/17/33/9a/f295dea5.jpg","nickname":"李正g","note":"","ucode":"A7BEA03BB6537A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608110,"discussion_content":"我理解面向对象里面， 组合和继承是不同的概念。 组合：一个类里面应用了多个其它的类，共同实现一个功能。 继承：extends implement这种通过继承父类获取功能。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1678270210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1650378,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","nickname":"菠萝吹雪—Code","note":"","ucode":"A5B2FC661EE17D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577786,"discussion_content":"t.a = 5 // 编译报错：ambiguous selector t.a\nt.T1.a = 5\n这就说明了 组合和集成不是一回事，go是不支持集成的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656332802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409915,"discussion_content":"关于你的问题在后面的课程中有详细讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635546684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1650748,"avatar":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","nickname":"盘胧","note":"","ucode":"5386CC4C92ECC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408854,"discussion_content":"没有类的概念吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635333982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2982538,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/82/8a/5cd0157d.jpg","nickname":"折戟","note":"","ucode":"B015567C5C976E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1650748,"avatar":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","nickname":"盘胧","note":"","ucode":"5386CC4C92ECC2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630668,"discussion_content":"可以给结构体增加方法的，这样一来有成员变量也有方法，可以一定程度上看作是类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698769928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":408854,"ip_address":"山东","group_id":0},"score":630668,"extra":""}]}]},{"had_liked":false,"id":316323,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1634269682,"is_pvip":false,"replies":[{"id":114616,"content":"从go设计者的初衷来看(https:&#47;&#47;golang.google.cn&#47;doc&#47;faq#exceptions)，go没有采用像java那样的结构化异常处理的确是出于对“简单”原则的考虑。\n\n在java中错误处理与真正的“异常”是混杂在Try-catch机制中的，并没有明显的界限，无论是错误还是异常，一旦throw，方法的调用者就得负责处理它。\n\n但在go中，错误处理与真正的异常处理是严格分开的，也就是说不要将panic掺和到错误处理中。\n\n错误处理是常态，go中只有错误是返回给上层的。一旦出现panic，这意味着整个程序处于即将崩溃的状态，返回给上层几乎也是“无济于事”，所以在go中，一个常见的api设计思路是 不要向外部抛出panic（don&#39;t panic!）。如果api中存在panic的可能性，那么api自己要负责处理panic，并通过error将状态返回给上层。如果api无法处理panic，那程序就很大可能是要崩溃了，这种panic多是因为程序bug导致的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634367036,"ip_address":"","comment_id":316323,"utype":1}],"discussion_count":9,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"go的异常处理，使用起来简单，但是不方便，请问老师这是在践行go的简单设计哲学吗？","like_count":16,"discussions":[{"author":{"id":1284254,"avatar":"https://static001.geekbang.org/account/avatar/00/13/98/9e/b9069b65.jpg","nickname":"Lis","note":"","ucode":"1D095DA2CE2C65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561946,"discussion_content":"在学习go语言时，同觉得变量声明的方式有点多，常用的就那几种🤔","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1649751585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528357,"discussion_content":"罗杰出品的问题，都是精品问题^_^。\n\n先来看第一个问题，Go最初设计目标是通用的系统编程语言，但Go选择支持了GC。Go的GC虽然在go团队的努力下，开销越来越小，但开销小，低延迟不代表没有，这就决定了Go在一些对性能极其敏感的领域可能并不是最好的选择。你的问题中也提到了pvp服务，想必你们也是采用了面向服务的架构，这种架构本身就是可以天然适合技术异构的。如果觉得不妥，也别强求，果断换非GC语言，比如c、c++或是rust。如果说非要坚持用go来完成，那么说明你是go的骨灰粉，在解决问题的过程中，你也会完成一次go技能的升华。\n\n\n第二个问题，Go语言的简单或者说功能特性少，的确来自与less is more的理念。保持一门小语言，让语言更容易学习与理解。同时每个特性都是经过精心打磨与实现，不能再少了。上周我看了rob pike最新一期的talk，他还在说 “Go语言中变量声明的方式有些多了”，这也是我在实际编码过程中的体会。如果重新来过，我想rob pike会更彻底的执行less is more，将变量声明方式再减少一种。所以说，特性少不是不想做，而是经过深思熟虑，那个特性的确没必要加入到语言中。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1634368094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2810121,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/e1/09/efa69f7a.jpg","nickname":"学昊","note":"","ucode":"70DED7DB6565AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404314,"discussion_content":"以后不谈点哲学，都不好意思混go圈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634285872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601922,"discussion_content":"语言没有全方位通吃的，适用领域不同，自然就有所取舍，开发者需要根据具体领域来选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675501633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1519200,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/60/4fa1f3bd.jpg","nickname":"rs勿忘初心","note":"","ucode":"557D1ECD757195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540218,"discussion_content":"不懂哲学，别谈编程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639992803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405993,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634689759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404445,"discussion_content":"go 是我设计的😄，我说都是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634307754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316349,"user_name":"Geek_399042","can_delete":false,"product_type":"c1","uid":2740326,"ip_address":"","ucode":"F8A36B1E9A879B","user_header":"","comment_is_top":false,"comment_ctime":1634281149,"is_pvip":false,"replies":[{"id":114599,"content":"手动点赞","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634349016,"ip_address":"","comment_id":316349,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"自动加入分号是不是也是简单的设计哲学呢，能让编译器做的事不需要交给开发者。","like_count":12,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528355,"discussion_content":"从go设计者的初衷来看(https://golang.google.cn/doc/faq#exceptions)，go没有采用像java那样的结构化异常处理的确是出于对“简单”原则的考虑。\n\n在java中错误处理与真正的“异常”是混杂在Try-catch机制中的，并没有明显的界限，无论是错误还是异常，一旦throw，方法的调用者就得负责处理它。\n\n但在go中，错误处理与真正的异常处理是严格分开的，也就是说不要将panic掺和到错误处理中。\n\n错误处理是常态，go中只有错误是返回给上层的。一旦出现panic，这意味着整个程序处于即将崩溃的状态，返回给上层几乎也是“无济于事”，所以在go中，一个常见的api设计思路是 不要向外部抛出panic（don&amp;#39;t panic!）。如果api中存在panic的可能性，那么api自己要负责处理panic，并通过error将状态返回给上层。如果api无法处理panic，那程序就很大可能是要崩溃了，这种panic多是因为程序bug导致的。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1634367036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":584020,"discussion_content":"java的错误Error是不允许被捕获的，也不应该被捕获。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660561487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":528355,"ip_address":"四川","group_id":0},"score":584020,"extra":""}]},{"author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404777,"discussion_content":"java 中的异常已经不再是异常了。异常比错误更加严重，例如数据库初始化错误，这应该是一个异常；登录功能中，密码输入有误，这应该是一个错误。\n\njava 中的所有 exception 都可以用 exception 来 try catch，并没有细化这是一个什么 exception，或许它是 userException? 这都需要`君子协议`，让代码编写者有着良好的规范，这显然不太可靠。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634398372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584017,"discussion_content":"java中的Exception是分了类的，而且错误是异常的一种，数据集初始化异常在java中就是异常，至于密码输入错误，这并不是一个程序上的错误。try catch捕获的是运行时异常和非运行时异常，是有细化分类的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660561059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":404777,"ip_address":"四川","group_id":0},"score":584017,"extra":""},{"author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584025,"discussion_content":"嗯嗯，Java是有，但在实际编码中，许多程序员为了省事，都直接使用了 Exception，这也不是一个错误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660564139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":584017,"ip_address":"上海","group_id":0},"score":584025,"extra":""},{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584063,"discussion_content":"Java编程应该遵循单一职责原则，泛化的用Exception去捕获所有异常是不推荐的，但要看你捕获异常的目的是什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660612863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":584025,"ip_address":"四川","group_id":0},"score":584063,"extra":""}]},{"author":{"id":2054512,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/59/70/d0437fe1.jpg","nickname":"Quinn","note":"","ucode":"6E549D8A0C3378","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534360,"discussion_content":"mark\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638171407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405992,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634689719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404272,"discussion_content":"这个不方便是指的什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634275873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324273,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1638353044,"is_pvip":false,"replies":[{"id":117974,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829244,"ip_address":"","comment_id":324273,"utype":1}],"discussion_count":3,"race_medal":2,"score":2,"product_id":100093501,"comment_content":"尤其认同 Go 语言的“面向工程”这一设计哲学。作为 Java 的资深用户，每天都深受编译速度慢、依赖树失控、代码风格不统一等问题的困扰。Go 语言的设计哲学恰恰迎合了现代大规模业务系统的开发和维护。","like_count":10,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528364,"discussion_content":"手动点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634349016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601924,"discussion_content":"这是语法分析的前处理，放在格式检查器或者IDE比较合适。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675502018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343702,"user_name":"悟二空","can_delete":false,"product_type":"c1","uid":1128549,"ip_address":"","ucode":"BF3B8BA6E49B1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","comment_is_top":false,"comment_ctime":1650989515,"is_pvip":false,"replies":[{"id":125445,"content":"💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1651027018,"ip_address":"","comment_id":343702,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"只有 TonyBai 老师的这门专栏课，我会把每条留言评论都认真看完，因为老师都有很认真的在回复，一点儿也不含糊。能学到非常多的知识，非常感谢老师，我一定能学好Go语言并进入自己想去的公司的。","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536601,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584022,"discussion_content":"我倒觉得这是使用者的锅，不能甩给语言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660561743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344431,"avatar":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","nickname":"马以","note":"","ucode":"3FEA06CA14DE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565648,"discussion_content":"这个问题其实是和java的发展历史是相关的，也和java这个群体的时间跨度和受众的广度相关，只能说java覆盖的群体太庞大了，而技术能力更是参差不齐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650509580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325917,"user_name":"运维夜谈","can_delete":false,"product_type":"c1","uid":1054300,"ip_address":"","ucode":"E2E93375FF5A07","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/5c/d0476f9f.jpg","comment_is_top":false,"comment_ctime":1639231493,"is_pvip":true,"replies":[{"id":119080,"content":"1. 正交(orthogonality)是从几何学中引入的术语，如果两条线以直角相交，如图形上的轴线，就是正交的。如果说两个事物是正交的，那么我们说\n这两个事物是独立且解耦的，一个事物的变化不影响另外一个事物。\n\n我们经常用“正交”来评价一个系统的设计，比如在一个设计良好的系统中，数据库代码将与用户界面正交：你可以在不影响数据库的情况下，独&gt;立进行界面的演进。\n\n编程语言的语法元素间也存在着正交的情况，比如文中提到的类型定义与方法是正交的。这意味着一个类型可以有方法，也可以没有方法。而方&gt;法本质上接收类型作为其第一个参数的函数而已(具体参考第24讲)。\n\n在Go语言中，正交的语法还有一些，比如接口就与Go语言其他部分是正交的。\n\n但正交的两个语法特性组合起来可以实现其它特性，这也是我们在一个系统中经常做的事情。\n\n2. 难道不用面向对象就不能复用了么？:) Go有自己的组合的设计哲学，组合也可以实现复用。课程后面会有讲解。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640053301,"ip_address":"","comment_id":325917,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，请教两个问题：\n1、文中提到的正交独立是什么意思？不是很理解。\n2、Go不支持面向对象，那意味着复用性不好，这种后面老师会讲工程实践吗？","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567912,"discussion_content":"💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651027018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349552,"user_name":"迷途书童","can_delete":false,"product_type":"c1","uid":1090142,"ip_address":"","ucode":"462BE64D3373DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/5e/3871ff79.jpg","comment_is_top":false,"comment_ctime":1656058668,"is_pvip":false,"replies":[{"id":127256,"content":"自己总结的。但也依据了go核心团队的一些talk中的内容以及个人对go的理解。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656280434,"ip_address":"","comment_id":349552,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Go语言的设计哲学有什么权威出处吗？还是老师自己总结的？","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540399,"discussion_content":"1. 正交(orthogonality)是从几何学中引入的术语，如果两条线以直角相交，如图形上的轴线，就是正交的。如果说两个事物是正交的，那么我们说\n这两个事物是独立且解耦的，一个事物的变化不影响另外一个事物。\n\n我们经常用“正交”来评价一个系统的设计，比如在一个设计良好的系统中，数据库代码将与用户界面正交：你可以在不影响数据库的情况下，独&gt;立进行界面的演进。\n\n编程语言的语法元素间也存在着正交的情况，比如文中提到的类型定义与方法是正交的。这意味着一个类型可以有方法，也可以没有方法。而方&gt;法本质上接收类型作为其第一个参数的函数而已(具体参考第24讲)。\n\n在Go语言中，正交的语法还有一些，比如接口就与Go语言其他部分是正交的。\n\n但正交的两个语法特性组合起来可以实现其它特性，这也是我们在一个系统中经常做的事情。\n\n2. 难道不用面向对象就不能复用了么？:) Go有自己的组合的设计哲学，组合也可以实现复用。课程后面会有讲解。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1640053301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1054300,"avatar":"https://static001.geekbang.org/account/avatar/00/10/16/5c/d0476f9f.jpg","nickname":"运维夜谈","note":"","ucode":"E2E93375FF5A07","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":540557,"discussion_content":"好的，谢谢老师😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640082086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540399,"ip_address":"","group_id":0},"score":540557,"extra":""}]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601925,"discussion_content":"面向过程的语言那么多，比如C，难道就复用性不好吗？泛型也是类型的复用呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675502270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577551,"discussion_content":"老师回答的精彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656172563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128549,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","nickname":"悟二空","note":"","ucode":"BF3B8BA6E49B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567794,"discussion_content":"老师的回答简直太精彩了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650989116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374874,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1684551590,"is_pvip":false,"replies":[{"id":136778,"content":"先简单说说当前go编译器的构建包的机制，如果存在这样的依赖关系：\n\na 依赖 b， b依赖c, 那么编译a包时，go编译器会先编译其依赖包b，由于b依赖c，编译b时，要先编译c包。\n\n这样实际的编译顺序和工作就是先编译c ，再编译b，最后编译a。\n\n如果go支持包的循环依赖，比如a 依赖b，b依赖c, c又依赖a，那么按照上面的构建罗技，显然“先编译c ，再编译b，最后编译a”是不行的了。go compiler在编译c时，还要考虑a，可以肯定的是这种支持肯定会让go compiler处理更多的源文件集。在大型项目，这种循环依赖一旦被支持，那势必会拖慢构建。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1684653521,"ip_address":"辽宁","comment_id":374874,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bai老师，关于文中的“去除包的循环依赖，循环依赖会在大规模的代码中引发问题，因为它们要求编译器同时处理更大的源文件集，这会减慢增量构建”，这里一直没太理解，能详细解释一下么？","like_count":3,"discussions":[{"author":{"id":2943254,"avatar":"","nickname":"Geek_497e87","note":"","ucode":"E0DE428E3186FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641168,"discussion_content":"这里的几个理念中关于并发方面的讲解如果能再详细一些例子就更好了！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1712288746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577652,"discussion_content":"自己总结的。但也依据了go核心团队的一些talk中的内容以及个人对go的理解。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1656280435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2943254,"avatar":"","nickname":"Geek_497e87","note":"","ucode":"E0DE428E3186FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":641167,"discussion_content":"老师的总结这一篇我认为是整个课程最值得反复阅读的篇章，我复读了3次！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712288677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":577652,"ip_address":"广东","group_id":0},"score":641167,"extra":""}]}]},{"had_liked":false,"id":316268,"user_name":"自由","can_delete":false,"product_type":"c1","uid":2576960,"ip_address":"","ucode":"4E3B53D29D86CA","user_header":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","comment_is_top":false,"comment_ctime":1634233629,"is_pvip":false,"replies":[{"id":114612,"content":"👍。说的很好。很认同你提到的基于“类型别名”的渐进式代码修复(Gradual code repair) 思路。这也是类型别名最初被引入go的初衷（https:&#47;&#47;github.com&#47;golang&#47;proposal&#47;blob&#47;master&#47;design&#47;18130-type-alias.md）。我觉得它也是go面向工程设计哲学的体现。另外type alias在基于现有实现进行扩展并做出新的封装方面也有“奇效”。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634361803,"ip_address":"","comment_id":316268,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bai 老师，你好，例举两个我认为复合 Go 语言设计哲学的例子，我的技术能力捉襟见肘，说的不对地方还希望老师斧正。\n\n一、异常处理\n\nGo 语言核心开发者 Dave 曾说过 “You only need to check the error value if you care about the result”，在我们不处理错误的时候，我们不应该对它的返回值抱有任何幻想。\n\nGo 的异常处理逻辑，没有引入 exception，而是使用了多参数返回，在返回中带上错误，由调用者来判定这个错误。\n\n- 简单\n- 没有隐藏的控制流\n- 完全交给你控制 error\n- 考虑失败，而不是成功\n\n二、类型别名\n\n在特定情况下，帮助代码逐步修复。\n\n类型别名的存在，是 渐进式代码修复(Gradual code repair) 的关键，什么是渐进式代码修复？举一个🌰 重构。重构代码，我们当然希望重构后的好处，能够适用于所有代码，但是，重构的好处与代价是成正比的，往往一次重构会伴随着大量的修改，随着代码量越来越大，一次完成所有修改变得不可行。修复需要逐步完成。在代码量少时，我们可以一次性完成所有的修复，这样的修复被称为原子代码修复(atomic code repair)，它的概念很简单，就是在一次提交中，更新所有的因为重构带来的问题修复，但是概念的简单会被实际的复杂性抵消，一次提交可能非常大，大的提交很难去一次性修复，出现问题也很难去溯源，最重要的是，可能会与其他同学的工作产生冲突，例如某个同学，在工作时，使用了旧的 API，合并代码时，并不会产生冲突，而我的提交错过了它的引用。\n\n因此，我们需要一个过渡期，这个过渡期就是为了逐步替换，也就是渐进式代码修复，将旧的引用，逐步替换，同时将旧的换为新的，这就是渐进式代码修复，它的缺点是比原子代码修复的工作量更大，但是它更容易提交、审查，并且保证了，没有人引用后再删除旧的类型别名。\n","like_count":40,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528332,"discussion_content":"👍。说的很好。很认同你提到的基于“类型别名”的渐进式代码修复(Gradual code repair) 思路。这也是类型别名最初被引入go的初衷（https://github.com/golang/proposal/blob/master/design/18130-type-alias.md）。我觉得它也是go面向工程设计哲学的体现。另外type alias在基于现有实现进行扩展并做出新的封装方面也有“奇效”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634361803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811536,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/50/e1501629.jpg","nickname":"练就更强丶","note":"","ucode":"F9AEA637515D88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594043,"discussion_content":"例如某个同学，在工作时，使用了旧的 API，合并代码时，并不会产生冲突，而我的提交错过了它的引用。\n这里啥意思，没看懂-.-","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1668739437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128549,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","nickname":"悟二空","note":"","ucode":"BF3B8BA6E49B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567786,"discussion_content":"Go 的异常处理逻辑，没有引入 exception，而是使用了多参数返回，在返回中带上错误，由调用者来判定这个错误。\n- 简单\n- 没有隐藏的控制流\n- 完全交给你控制 error\n- 考虑失败，而不是成功\n\n总结的也非常棒呢👍一下就能理解和记住了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650988094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006424,"avatar":"","nickname":"Geek_xbye50","note":"","ucode":"0BF3780C247F22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607634,"discussion_content":"楼主大佬问下，渐进式修复以及原子代码修复原文是出自哪里？方便说下么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678056409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001843,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erRavHNiaicxIIrTK5JjKyCNaSKN2MhnM2X0IuNpcoDoyn0OUOqYgdEb0brT9QgibAKyjBP3R3x0W3Jw/132","nickname":"huntersudo","note":"","ucode":"3DABEEF17ACBBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541201,"discussion_content":"厉害，渐进式修复解释精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640280580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405994,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634689795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318319,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1635239512,"is_pvip":false,"replies":[{"id":115620,"content":"好问题！\n\ngo的组合有多种形式。按你提到的“继承”型组合中，如果组合的两个类型中有相同名字的字段，那怎么解决呢？看下面中的例子：\n\npackage main\n\ntype T1 struct {\n\ta int\n}\ntype T2 struct {\n\ta int\n}\ntype T struct {\n\tT1\n\tT2\n}\n\nfunc main() {\n\tvar t T\n\t&#47;&#47;\tt.a = 5 &#47;&#47; 编译报错：ambiguous selector t.a\n\tt.T1.a = 5\n\tt.T2.a = 6\n\tprintln(t.T1.a) &#47;&#47; 5\n\tprintln(t.T2.a) &#47;&#47; 6\n}\n\n如果T组合的两个类型T1和T2都包含字段a，那么我们不能直接使用t.a，而是通过t.T1.a和t.T2.a分别指代各自类型中的字段a。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635565858,"ip_address":"","comment_id":318319,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"表示身为一名Java工程师，在看到组合的时候有一点疑惑，我的想法是这里的组合就是将另一个类里面的东西平移过来，类似于java中的继承，我想问的是如果存在两个类包含相同名字的方法或者属性，这个go怎么处理？还是直接就不允许呢？go语言从来没接触过，不懂就问","like_count":31,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529186,"discussion_content":"好问题！\n\ngo的组合有多种形式。按你提到的“继承”型组合中，如果组合的两个类型中有相同名字的字段，那怎么解决呢？看下面中的例子：\n\npackage main\n\ntype T1 struct {\n\ta int\n}\ntype T2 struct {\n\ta int\n}\ntype T struct {\n\tT1\n\tT2\n}\n\nfunc main() {\n\tvar t T\n\t//\tt.a = 5 // 编译报错：ambiguous selector t.a\n\tt.T1.a = 5\n\tt.T2.a = 6\n\tprintln(t.T1.a) // 5\n\tprintln(t.T2.a) // 6\n}\n\n如果T组合的两个类型T1和T2都包含字段a，那么我们不能直接使用t.a，而是通过t.T1.a和t.T2.a分别指代各自类型中的字段a。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1635565858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1520538,"avatar":"https://static001.geekbang.org/account/avatar/00/17/33/9a/f295dea5.jpg","nickname":"李正g","note":"","ucode":"A7BEA03BB6537A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608110,"discussion_content":"我理解面向对象里面， 组合和继承是不同的概念。 组合：一个类里面应用了多个其它的类，共同实现一个功能。 继承：extends implement这种通过继承父类获取功能。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1678270210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1650378,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","nickname":"菠萝吹雪—Code","note":"","ucode":"A5B2FC661EE17D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577786,"discussion_content":"t.a = 5 // 编译报错：ambiguous selector t.a\nt.T1.a = 5\n这就说明了 组合和集成不是一回事，go是不支持集成的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656332802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409915,"discussion_content":"关于你的问题在后面的课程中有详细讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635546684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1650748,"avatar":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","nickname":"盘胧","note":"","ucode":"5386CC4C92ECC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408854,"discussion_content":"没有类的概念吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635333982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2982538,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/82/8a/5cd0157d.jpg","nickname":"折戟","note":"","ucode":"B015567C5C976E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1650748,"avatar":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","nickname":"盘胧","note":"","ucode":"5386CC4C92ECC2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630668,"discussion_content":"可以给结构体增加方法的，这样一来有成员变量也有方法，可以一定程度上看作是类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698769928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":408854,"ip_address":"山东","group_id":0},"score":630668,"extra":""}]}]},{"had_liked":false,"id":316330,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1634272330,"is_pvip":false,"replies":[{"id":114617,"content":"罗杰出品的问题，都是精品问题^_^。\n\n先来看第一个问题，Go最初设计目标是通用的系统编程语言，但Go选择支持了GC。Go的GC虽然在go团队的努力下，开销越来越小，但开销小，低延迟不代表没有，这就决定了Go在一些对性能极其敏感的领域可能并不是最好的选择。你的问题中也提到了pvp服务，想必你们也是采用了面向服务的架构，这种架构本身就是可以天然适合技术异构的。如果觉得不妥，也别强求，果断换非GC语言，比如c、c++或是rust。如果说非要坚持用go来完成，那么说明你是go的骨灰粉，在解决问题的过程中，你也会完成一次go技能的升华。\n\n\n第二个问题，Go语言的简单或者说功能特性少，的确来自与less is more的理念。保持一门小语言，让语言更容易学习与理解。同时每个特性都是经过精心打磨与实现，不能再少了。上周我看了rob pike最新一期的talk，他还在说 “Go语言中变量声明的方式有些多了”，这也是我在实际编码过程中的体会。如果重新来过，我想rob pike会更彻底的执行less is more，将变量声明方式再减少一种。所以说，特性少不是不想做，而是经过深思熟虑，那个特性的确没必要加入到语言中。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634368094,"ip_address":"","comment_id":316330,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"21 世纪的 C 语言，的确实至名归。依然有几个小问题：1. Go 有 GC，我们使用 Go 来开发后端的所有服务，有个 PVP 的服务，需要逐帧计算客户端上报的结果是否正确，此时对于内存的分配就要特别小心，开发起来很不顺畅。是否这种服务的性质不太合适使用 Go 来开发；2. 有人吐槽 Go 核心人员不想做的东西，就是 Less is more，自己想做就是各种哲学，这个问题，老师怎么看？","like_count":21,"discussions":[{"author":{"id":1284254,"avatar":"https://static001.geekbang.org/account/avatar/00/13/98/9e/b9069b65.jpg","nickname":"Lis","note":"","ucode":"1D095DA2CE2C65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561946,"discussion_content":"在学习go语言时，同觉得变量声明的方式有点多，常用的就那几种🤔","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1649751585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528357,"discussion_content":"罗杰出品的问题，都是精品问题^_^。\n\n先来看第一个问题，Go最初设计目标是通用的系统编程语言，但Go选择支持了GC。Go的GC虽然在go团队的努力下，开销越来越小，但开销小，低延迟不代表没有，这就决定了Go在一些对性能极其敏感的领域可能并不是最好的选择。你的问题中也提到了pvp服务，想必你们也是采用了面向服务的架构，这种架构本身就是可以天然适合技术异构的。如果觉得不妥，也别强求，果断换非GC语言，比如c、c++或是rust。如果说非要坚持用go来完成，那么说明你是go的骨灰粉，在解决问题的过程中，你也会完成一次go技能的升华。\n\n\n第二个问题，Go语言的简单或者说功能特性少，的确来自与less is more的理念。保持一门小语言，让语言更容易学习与理解。同时每个特性都是经过精心打磨与实现，不能再少了。上周我看了rob pike最新一期的talk，他还在说 “Go语言中变量声明的方式有些多了”，这也是我在实际编码过程中的体会。如果重新来过，我想rob pike会更彻底的执行less is more，将变量声明方式再减少一种。所以说，特性少不是不想做，而是经过深思熟虑，那个特性的确没必要加入到语言中。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1634368094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2810121,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/e1/09/efa69f7a.jpg","nickname":"学昊","note":"","ucode":"70DED7DB6565AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404314,"discussion_content":"以后不谈点哲学，都不好意思混go圈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634285872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601922,"discussion_content":"语言没有全方位通吃的，适用领域不同，自然就有所取舍，开发者需要根据具体领域来选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675501633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1519200,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/60/4fa1f3bd.jpg","nickname":"rs勿忘初心","note":"","ucode":"557D1ECD757195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540218,"discussion_content":"不懂哲学，别谈编程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639992803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405993,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634689759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404445,"discussion_content":"go 是我设计的😄，我说都是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634307754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316323,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1634269682,"is_pvip":false,"replies":[{"id":114616,"content":"从go设计者的初衷来看(https:&#47;&#47;golang.google.cn&#47;doc&#47;faq#exceptions)，go没有采用像java那样的结构化异常处理的确是出于对“简单”原则的考虑。\n\n在java中错误处理与真正的“异常”是混杂在Try-catch机制中的，并没有明显的界限，无论是错误还是异常，一旦throw，方法的调用者就得负责处理它。\n\n但在go中，错误处理与真正的异常处理是严格分开的，也就是说不要将panic掺和到错误处理中。\n\n错误处理是常态，go中只有错误是返回给上层的。一旦出现panic，这意味着整个程序处于即将崩溃的状态，返回给上层几乎也是“无济于事”，所以在go中，一个常见的api设计思路是 不要向外部抛出panic（don&#39;t panic!）。如果api中存在panic的可能性，那么api自己要负责处理panic，并通过error将状态返回给上层。如果api无法处理panic，那程序就很大可能是要崩溃了，这种panic多是因为程序bug导致的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634367036,"ip_address":"","comment_id":316323,"utype":1}],"discussion_count":9,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"go的异常处理，使用起来简单，但是不方便，请问老师这是在践行go的简单设计哲学吗？","like_count":16,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528355,"discussion_content":"从go设计者的初衷来看(https://golang.google.cn/doc/faq#exceptions)，go没有采用像java那样的结构化异常处理的确是出于对“简单”原则的考虑。\n\n在java中错误处理与真正的“异常”是混杂在Try-catch机制中的，并没有明显的界限，无论是错误还是异常，一旦throw，方法的调用者就得负责处理它。\n\n但在go中，错误处理与真正的异常处理是严格分开的，也就是说不要将panic掺和到错误处理中。\n\n错误处理是常态，go中只有错误是返回给上层的。一旦出现panic，这意味着整个程序处于即将崩溃的状态，返回给上层几乎也是“无济于事”，所以在go中，一个常见的api设计思路是 不要向外部抛出panic（don&amp;#39;t panic!）。如果api中存在panic的可能性，那么api自己要负责处理panic，并通过error将状态返回给上层。如果api无法处理panic，那程序就很大可能是要崩溃了，这种panic多是因为程序bug导致的。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1634367036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":584020,"discussion_content":"java的错误Error是不允许被捕获的，也不应该被捕获。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660561487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":528355,"ip_address":"四川","group_id":0},"score":584020,"extra":""}]},{"author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404777,"discussion_content":"java 中的异常已经不再是异常了。异常比错误更加严重，例如数据库初始化错误，这应该是一个异常；登录功能中，密码输入有误，这应该是一个错误。\n\njava 中的所有 exception 都可以用 exception 来 try catch，并没有细化这是一个什么 exception，或许它是 userException? 这都需要`君子协议`，让代码编写者有着良好的规范，这显然不太可靠。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634398372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584017,"discussion_content":"java中的Exception是分了类的，而且错误是异常的一种，数据集初始化异常在java中就是异常，至于密码输入错误，这并不是一个程序上的错误。try catch捕获的是运行时异常和非运行时异常，是有细化分类的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660561059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":404777,"ip_address":"四川","group_id":0},"score":584017,"extra":""},{"author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584025,"discussion_content":"嗯嗯，Java是有，但在实际编码中，许多程序员为了省事，都直接使用了 Exception，这也不是一个错误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660564139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":584017,"ip_address":"上海","group_id":0},"score":584025,"extra":""},{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584063,"discussion_content":"Java编程应该遵循单一职责原则，泛化的用Exception去捕获所有异常是不推荐的，但要看你捕获异常的目的是什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660612863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":584025,"ip_address":"四川","group_id":0},"score":584063,"extra":""}]},{"author":{"id":2054512,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/59/70/d0437fe1.jpg","nickname":"Quinn","note":"","ucode":"6E549D8A0C3378","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534360,"discussion_content":"mark\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638171407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405992,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634689719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404272,"discussion_content":"这个不方便是指的什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634275873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316349,"user_name":"Geek_399042","can_delete":false,"product_type":"c1","uid":2740326,"ip_address":"","ucode":"F8A36B1E9A879B","user_header":"","comment_is_top":false,"comment_ctime":1634281149,"is_pvip":false,"replies":[{"id":114599,"content":"手动点赞","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634349016,"ip_address":"","comment_id":316349,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"自动加入分号是不是也是简单的设计哲学呢，能让编译器做的事不需要交给开发者。","like_count":12,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528364,"discussion_content":"手动点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634349016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601924,"discussion_content":"这是语法分析的前处理，放在格式检查器或者IDE比较合适。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675502018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324273,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1638353044,"is_pvip":false,"replies":[{"id":117974,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638829244,"ip_address":"","comment_id":324273,"utype":1}],"discussion_count":3,"race_medal":2,"score":2,"product_id":100093501,"comment_content":"尤其认同 Go 语言的“面向工程”这一设计哲学。作为 Java 的资深用户，每天都深受编译速度慢、依赖树失控、代码风格不统一等问题的困扰。Go 语言的设计哲学恰恰迎合了现代大规模业务系统的开发和维护。","like_count":10,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536601,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638829244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584022,"discussion_content":"我倒觉得这是使用者的锅，不能甩给语言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660561743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344431,"avatar":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","nickname":"马以","note":"","ucode":"3FEA06CA14DE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565648,"discussion_content":"这个问题其实是和java的发展历史是相关的，也和java这个群体的时间跨度和受众的广度相关，只能说java覆盖的群体太庞大了，而技术能力更是参差不齐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650509580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343702,"user_name":"悟二空","can_delete":false,"product_type":"c1","uid":1128549,"ip_address":"","ucode":"BF3B8BA6E49B1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","comment_is_top":false,"comment_ctime":1650989515,"is_pvip":false,"replies":[{"id":125445,"content":"💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1651027018,"ip_address":"","comment_id":343702,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"只有 TonyBai 老师的这门专栏课，我会把每条留言评论都认真看完，因为老师都有很认真的在回复，一点儿也不含糊。能学到非常多的知识，非常感谢老师，我一定能学好Go语言并进入自己想去的公司的。","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567912,"discussion_content":"💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651027018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325917,"user_name":"运维夜谈","can_delete":false,"product_type":"c1","uid":1054300,"ip_address":"","ucode":"E2E93375FF5A07","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/5c/d0476f9f.jpg","comment_is_top":false,"comment_ctime":1639231493,"is_pvip":true,"replies":[{"id":119080,"content":"1. 正交(orthogonality)是从几何学中引入的术语，如果两条线以直角相交，如图形上的轴线，就是正交的。如果说两个事物是正交的，那么我们说\n这两个事物是独立且解耦的，一个事物的变化不影响另外一个事物。\n\n我们经常用“正交”来评价一个系统的设计，比如在一个设计良好的系统中，数据库代码将与用户界面正交：你可以在不影响数据库的情况下，独&gt;立进行界面的演进。\n\n编程语言的语法元素间也存在着正交的情况，比如文中提到的类型定义与方法是正交的。这意味着一个类型可以有方法，也可以没有方法。而方&gt;法本质上接收类型作为其第一个参数的函数而已(具体参考第24讲)。\n\n在Go语言中，正交的语法还有一些，比如接口就与Go语言其他部分是正交的。\n\n但正交的两个语法特性组合起来可以实现其它特性，这也是我们在一个系统中经常做的事情。\n\n2. 难道不用面向对象就不能复用了么？:) Go有自己的组合的设计哲学，组合也可以实现复用。课程后面会有讲解。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640053301,"ip_address":"","comment_id":325917,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，请教两个问题：\n1、文中提到的正交独立是什么意思？不是很理解。\n2、Go不支持面向对象，那意味着复用性不好，这种后面老师会讲工程实践吗？","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540399,"discussion_content":"1. 正交(orthogonality)是从几何学中引入的术语，如果两条线以直角相交，如图形上的轴线，就是正交的。如果说两个事物是正交的，那么我们说\n这两个事物是独立且解耦的，一个事物的变化不影响另外一个事物。\n\n我们经常用“正交”来评价一个系统的设计，比如在一个设计良好的系统中，数据库代码将与用户界面正交：你可以在不影响数据库的情况下，独&gt;立进行界面的演进。\n\n编程语言的语法元素间也存在着正交的情况，比如文中提到的类型定义与方法是正交的。这意味着一个类型可以有方法，也可以没有方法。而方&gt;法本质上接收类型作为其第一个参数的函数而已(具体参考第24讲)。\n\n在Go语言中，正交的语法还有一些，比如接口就与Go语言其他部分是正交的。\n\n但正交的两个语法特性组合起来可以实现其它特性，这也是我们在一个系统中经常做的事情。\n\n2. 难道不用面向对象就不能复用了么？:) Go有自己的组合的设计哲学，组合也可以实现复用。课程后面会有讲解。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1640053301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1054300,"avatar":"https://static001.geekbang.org/account/avatar/00/10/16/5c/d0476f9f.jpg","nickname":"运维夜谈","note":"","ucode":"E2E93375FF5A07","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":540557,"discussion_content":"好的，谢谢老师😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640082086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540399,"ip_address":"","group_id":0},"score":540557,"extra":""}]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601925,"discussion_content":"面向过程的语言那么多，比如C，难道就复用性不好吗？泛型也是类型的复用呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675502270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577551,"discussion_content":"老师回答的精彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656172563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128549,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","nickname":"悟二空","note":"","ucode":"BF3B8BA6E49B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567794,"discussion_content":"老师的回答简直太精彩了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650989116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349552,"user_name":"迷途书童","can_delete":false,"product_type":"c1","uid":1090142,"ip_address":"","ucode":"462BE64D3373DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/5e/3871ff79.jpg","comment_is_top":false,"comment_ctime":1656058668,"is_pvip":false,"replies":[{"id":127256,"content":"自己总结的。但也依据了go核心团队的一些talk中的内容以及个人对go的理解。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656280434,"ip_address":"","comment_id":349552,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Go语言的设计哲学有什么权威出处吗？还是老师自己总结的？","like_count":4,"discussions":[{"author":{"id":2943254,"avatar":"","nickname":"Geek_497e87","note":"","ucode":"E0DE428E3186FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641168,"discussion_content":"这里的几个理念中关于并发方面的讲解如果能再详细一些例子就更好了！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1712288746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577652,"discussion_content":"自己总结的。但也依据了go核心团队的一些talk中的内容以及个人对go的理解。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1656280435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2943254,"avatar":"","nickname":"Geek_497e87","note":"","ucode":"E0DE428E3186FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":641167,"discussion_content":"老师的总结这一篇我认为是整个课程最值得反复阅读的篇章，我复读了3次！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712288677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":577652,"ip_address":"广东","group_id":0},"score":641167,"extra":""}]}]},{"had_liked":false,"id":374874,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1684551590,"is_pvip":false,"replies":[{"id":136778,"content":"先简单说说当前go编译器的构建包的机制，如果存在这样的依赖关系：\n\na 依赖 b， b依赖c, 那么编译a包时，go编译器会先编译其依赖包b，由于b依赖c，编译b时，要先编译c包。\n\n这样实际的编译顺序和工作就是先编译c ，再编译b，最后编译a。\n\n如果go支持包的循环依赖，比如a 依赖b，b依赖c, c又依赖a，那么按照上面的构建罗技，显然“先编译c ，再编译b，最后编译a”是不行的了。go compiler在编译c时，还要考虑a，可以肯定的是这种支持肯定会让go compiler处理更多的源文件集。在大型项目，这种循环依赖一旦被支持，那势必会拖慢构建。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1684653521,"ip_address":"辽宁","comment_id":374874,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bai老师，关于文中的“去除包的循环依赖，循环依赖会在大规模的代码中引发问题，因为它们要求编译器同时处理更大的源文件集，这会减慢增量构建”，这里一直没太理解，能详细解释一下么？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618855,"discussion_content":"先简单说说当前go编译器的构建包的机制，如果存在这样的依赖关系：\n\na 依赖 b， b依赖c, 那么编译a包时，go编译器会先编译其依赖包b，由于b依赖c，编译b时，要先编译c包。\n\n这样实际的编译顺序和工作就是先编译c ，再编译b，最后编译a。\n\n如果go支持包的循环依赖，比如a 依赖b，b依赖c, c又依赖a，那么按照上面的构建罗技，显然“先编译c ，再编译b，最后编译a”是不行的了。go compiler在编译c时，还要考虑a，可以肯定的是这种支持肯定会让go compiler处理更多的源文件集。在大型项目，这种循环依赖一旦被支持，那势必会拖慢构建。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1684653521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365147,"user_name":"ucat","can_delete":false,"product_type":"c1","uid":3176220,"ip_address":"北京","ucode":"E6BBBC2956BE86","user_header":"https://static001.geekbang.org/account/avatar/00/30/77/1c/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1672195341,"is_pvip":false,"replies":[{"id":132978,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1672201395,"ip_address":"北京","comment_id":365147,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"站在巨人的肩膀上的语言，对自己有着清晰的定位，并能解决痛点。\n喜欢这样的设计哲学。\nGo 语言的设计哲学：**简单**、**显式**、**组合**、**并发**和**面向工程**。\n\n* 简单：是指Go语言特性始终保持在少且足够的水平\n* 显示：是指任何代码行为都需开发者明确知晓，不存在暗箱操作\n* 组合：是构建Go程序骨架的主要方式，分为 **垂直组合** 与 **水平组合** 可以大幅降低程序元素间的耦合，提高程序的可拓展性和灵活性\n* 并发：采用了用户层轻量级线程goroutine 占用的资源非常小，Go 运行时默认为每个 goroutine 分配的栈空间仅 2KB。goroutine 调度的切换也不用陷入（trap）操作系统内核层完成，代价很低\n* 面向工程：Go 语言最初设计阶段就将解决工程问题作为 Go 的设计原则之一去考虑 Go 语法、工具链与标准库的设计，如 快速构建，包名称不必是唯一的，去除循环依赖，不支持默认函数参数，增加类型别名，引入必使用，","like_count":3},{"had_liked":false,"id":342455,"user_name":"Holy","can_delete":false,"product_type":"c1","uid":1450982,"ip_address":"","ucode":"B039B0AB117396","user_header":"https://static001.geekbang.org/account/avatar/00/16/23/e6/12b3d2bf.jpg","comment_is_top":false,"comment_ctime":1650273070,"is_pvip":false,"replies":[{"id":125123,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650329664,"ip_address":"","comment_id":342455,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"go底层代码深入发现了很多巧妙的地方， \ndefer+panic简单使用，里面的实现不一般\n内存管理多级缓存快速减少锁，为GC埋下众多伏笔，\nMutex兼顾公平\nGMP模式实现等等，\n每个版本迭代，持续进化（GOPHER坐享其成）","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564771,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650329664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317877,"user_name":"Alexhuihui","can_delete":false,"product_type":"c1","uid":1112938,"ip_address":"","ucode":"8B8FAA9E41BE14","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/6a/03aabb63.jpg","comment_is_top":false,"comment_ctime":1635001796,"is_pvip":false,"replies":[{"id":115429,"content":"这个我在后面讲解接口时会详细展开。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635237958,"ip_address":"","comment_id":317877,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"“水平组合是一种能力委托（Delegate），我们通常使用接口类型来实现水平组合。“，原文这段话没理解，老师能再解释一下水平组合吗","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564771,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650329664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316548,"user_name":"Hua.R","can_delete":false,"product_type":"c1","uid":1198097,"ip_address":"","ucode":"E81C149CB60569","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/11/420b6a25.jpg","comment_is_top":false,"comment_ctime":1634380398,"is_pvip":false,"replies":[{"id":114995,"content":"编辑给我的最新消息是在年末左右。图书的出版周期都长一些。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634768350,"ip_address":"","comment_id":316548,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"搭车问一下，去年我曾在大佬博客咨询过慕课网的专栏出版纸质书的问题，大佬回答当年底出版。大半年过去后没有动静我又问了一次你说已经提交出版社。那大概多久可以看到实物呢？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529015,"discussion_content":"这个我在后面讲解接口时会详细展开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635237958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316455,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1634308711,"is_pvip":false,"replies":[{"id":114618,"content":"\n你真非常细致和喜欢思考，提出的问题都很棒！👍\n\n第一个问题，专栏中的poolLocal实现的确是早期的版本，不过也无伤大雅，文中的目的就是为了说明：类型嵌入的组合方式。感谢\n你指出。不过这块我就不改了。\n\n第二个问题，在讲解接口类型时，应该会有具体例子。\n\n第三个问题，在后面讲解并发的章节中，我希望我的讲解能让你觉得更通俗易懂^_^。\n\n","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634368579,"ip_address":"","comment_id":316455,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"感谢 Tony Bai 这一篇的分享，很精彩。有以下几点困惑，麻烦有时间回答一下：\n\n1. go1.16.4 版本中的 poolLocal 结构体的实现和本文中的不太一样呢？\n\n2. 水平组合“模式”还有点缀器、中间件等方式后面的文章中会有例子吗？\n\n3. 很多课程中，都有“并发原语”一词，百度查了一下，有一些理解。老师这里会有比较通俗易懂的理解吗？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528386,"discussion_content":"\n你真非常细致和喜欢思考，提出的问题都很棒！👍\n\n第一个问题，专栏中的poolLocal实现的确是早期的版本，不过也无伤大雅，文中的目的就是为了说明：类型嵌入的组合方式。感谢\n你指出。不过这块我就不改了。\n\n第二个问题，在讲解接口类型时，应该会有具体例子。\n\n第三个问题，在后面讲解并发的章节中，我希望我的讲解能让你觉得更通俗易懂^_^。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634368579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404779,"discussion_content":"优秀的提问，优秀的回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634398502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338789,"user_name":"simple_孙","can_delete":false,"product_type":"c1","uid":1873629,"ip_address":"","ucode":"A77203E242D652","user_header":"https://static001.geekbang.org/account/avatar/00/1c/96/dd/1620a744.jpg","comment_is_top":false,"comment_ctime":1647741880,"is_pvip":false,"replies":[{"id":123856,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647810555,"ip_address":"","comment_id":338789,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"通读一遍课程之后，回头看这篇文章更通透了","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557433,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647810555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330829,"user_name":"麦芽糖","can_delete":false,"product_type":"c1","uid":1025002,"ip_address":"","ucode":"717A578EC50515","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/ea/bd83bd4f.jpg","comment_is_top":false,"comment_ctime":1642204856,"is_pvip":false,"replies":[{"id":121589,"content":"“具备同样价值观的人才能走的更好” 👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643522293,"ip_address":"","comment_id":330829,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"设计哲学很重要，就比如一个人的价值观，或者背景。 \n在不了解别人价值观的时候去评价是不合理的，具备同样价值观的人才能走的更好。\n比如国家之前的相互不理解，是因为国家的文化不同。\n\n同样，需要理解 Go 的设计哲学显得非常重要。\n\n设计哲学有\n● 简单\n● 显示\n● 组合\n● 并发\n● 面向工程\n\n简单。\n比如关键字就很少。入门快。\n\n显示。\n如不同类型不能做运算，避免意料之外的事情发生。\n\n组合。\n暂时还不是很理解。\n\n并发。\n天生就为多核 CPU 开发，同时有自己的 goroutine 用户层轻量级线程，性能更好。\n\n面向工程。\n格式化、调试、工具链、默认参数等。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557433,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647810555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317738,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1634913547,"is_pvip":false,"replies":[{"id":115419,"content":"个人感觉go加入泛型更多是出于对社区意见的响应，加上go核心团队的确找到了一条可兼容Go1的实现方案。于是就打算加了。像Go语言之父Rob Pike还是保持谨慎态度，最近不是刚刚发issue，建议go团队不要在1.18标准库中使用泛型，观望一下。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635234622,"ip_address":"","comment_id":317738,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"最新版本Go 支持泛型，也就是不完全显式，算是平衡？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549030,"discussion_content":"“具备同样价值观的人才能走的更好” 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643522293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316536,"user_name":"许诺","can_delete":false,"product_type":"c1","uid":1930465,"ip_address":"","ucode":"02F9C167946F68","user_header":"https://static001.geekbang.org/account/avatar/00/1d/74/e1/284e7c38.jpg","comment_is_top":false,"comment_ctime":1634372973,"is_pvip":false,"replies":[{"id":114994,"content":"按极客的要求，是每周三篇哦。这样对照一下目录，你就可以算出来了:)","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634768305,"ip_address":"","comment_id":316536,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"问下老师，什么时候更新完啊？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528950,"discussion_content":"个人感觉go加入泛型更多是出于对社区意见的响应，加上go核心团队的确找到了一条可兼容Go1的实现方案。于是就打算加了。像Go语言之父Rob Pike还是保持谨慎态度，最近不是刚刚发issue，建议go团队不要在1.18标准库中使用泛型，观望一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635234622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601928,"discussion_content":"先埋一个坑。没有泛型，算法模块的复用，怎么实现？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675502936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365147,"user_name":"ucat","can_delete":false,"product_type":"c1","uid":3176220,"ip_address":"北京","ucode":"E6BBBC2956BE86","user_header":"https://static001.geekbang.org/account/avatar/00/30/77/1c/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1672195341,"is_pvip":false,"replies":[{"id":132978,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1672201395,"ip_address":"北京","comment_id":365147,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"站在巨人的肩膀上的语言，对自己有着清晰的定位，并能解决痛点。\n喜欢这样的设计哲学。\nGo 语言的设计哲学：**简单**、**显式**、**组合**、**并发**和**面向工程**。\n\n* 简单：是指Go语言特性始终保持在少且足够的水平\n* 显示：是指任何代码行为都需开发者明确知晓，不存在暗箱操作\n* 组合：是构建Go程序骨架的主要方式，分为 **垂直组合** 与 **水平组合** 可以大幅降低程序元素间的耦合，提高程序的可拓展性和灵活性\n* 并发：采用了用户层轻量级线程goroutine 占用的资源非常小，Go 运行时默认为每个 goroutine 分配的栈空间仅 2KB。goroutine 调度的切换也不用陷入（trap）操作系统内核层完成，代价很低\n* 面向工程：Go 语言最初设计阶段就将解决工程问题作为 Go 的设计原则之一去考虑 Go 语法、工具链与标准库的设计，如 快速构建，包名称不必是唯一的，去除循环依赖，不支持默认函数参数，增加类型别名，引入必使用，","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597740,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672201395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342455,"user_name":"Holy","can_delete":false,"product_type":"c1","uid":1450982,"ip_address":"","ucode":"B039B0AB117396","user_header":"https://static001.geekbang.org/account/avatar/00/16/23/e6/12b3d2bf.jpg","comment_is_top":false,"comment_ctime":1650273070,"is_pvip":false,"replies":[{"id":125123,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650329664,"ip_address":"","comment_id":342455,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"go底层代码深入发现了很多巧妙的地方， \ndefer+panic简单使用，里面的实现不一般\n内存管理多级缓存快速减少锁，为GC埋下众多伏笔，\nMutex兼顾公平\nGMP模式实现等等，\n每个版本迭代，持续进化（GOPHER坐享其成）","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597740,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672201395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317877,"user_name":"Alexhuihui","can_delete":false,"product_type":"c1","uid":1112938,"ip_address":"","ucode":"8B8FAA9E41BE14","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/6a/03aabb63.jpg","comment_is_top":false,"comment_ctime":1635001796,"is_pvip":false,"replies":[{"id":115429,"content":"这个我在后面讲解接口时会详细展开。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635237958,"ip_address":"","comment_id":317877,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"“水平组合是一种能力委托（Delegate），我们通常使用接口类型来实现水平组合。“，原文这段话没理解，老师能再解释一下水平组合吗","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529015,"discussion_content":"这个我在后面讲解接口时会详细展开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635237958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316548,"user_name":"Hua.R","can_delete":false,"product_type":"c1","uid":1198097,"ip_address":"","ucode":"E81C149CB60569","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/11/420b6a25.jpg","comment_is_top":false,"comment_ctime":1634380398,"is_pvip":false,"replies":[{"id":114995,"content":"编辑给我的最新消息是在年末左右。图书的出版周期都长一些。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634768350,"ip_address":"","comment_id":316548,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"搭车问一下，去年我曾在大佬博客咨询过慕课网的专栏出版纸质书的问题，大佬回答当年底出版。大半年过去后没有动静我又问了一次你说已经提交出版社。那大概多久可以看到实物呢？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528410,"discussion_content":"编辑给我的最新消息是在年末左右。图书的出版周期都长一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634768350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316455,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1634308711,"is_pvip":false,"replies":[{"id":114618,"content":"\n你真非常细致和喜欢思考，提出的问题都很棒！👍\n\n第一个问题，专栏中的poolLocal实现的确是早期的版本，不过也无伤大雅，文中的目的就是为了说明：类型嵌入的组合方式。感谢\n你指出。不过这块我就不改了。\n\n第二个问题，在讲解接口类型时，应该会有具体例子。\n\n第三个问题，在后面讲解并发的章节中，我希望我的讲解能让你觉得更通俗易懂^_^。\n\n","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634368579,"ip_address":"","comment_id":316455,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"感谢 Tony Bai 这一篇的分享，很精彩。有以下几点困惑，麻烦有时间回答一下：\n\n1. go1.16.4 版本中的 poolLocal 结构体的实现和本文中的不太一样呢？\n\n2. 水平组合“模式”还有点缀器、中间件等方式后面的文章中会有例子吗？\n\n3. 很多课程中，都有“并发原语”一词，百度查了一下，有一些理解。老师这里会有比较通俗易懂的理解吗？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528410,"discussion_content":"编辑给我的最新消息是在年末左右。图书的出版周期都长一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634768350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338789,"user_name":"simple_孙","can_delete":false,"product_type":"c1","uid":1873629,"ip_address":"","ucode":"A77203E242D652","user_header":"https://static001.geekbang.org/account/avatar/00/1c/96/dd/1620a744.jpg","comment_is_top":false,"comment_ctime":1647741880,"is_pvip":false,"replies":[{"id":123856,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647810555,"ip_address":"","comment_id":338789,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"通读一遍课程之后，回头看这篇文章更通透了","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528386,"discussion_content":"\n你真非常细致和喜欢思考，提出的问题都很棒！👍\n\n第一个问题，专栏中的poolLocal实现的确是早期的版本，不过也无伤大雅，文中的目的就是为了说明：类型嵌入的组合方式。感谢\n你指出。不过这块我就不改了。\n\n第二个问题，在讲解接口类型时，应该会有具体例子。\n\n第三个问题，在后面讲解并发的章节中，我希望我的讲解能让你觉得更通俗易懂^_^。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634368579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2576960,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","nickname":"自由","note":"","ucode":"4E3B53D29D86CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404779,"discussion_content":"优秀的提问，优秀的回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634398502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330829,"user_name":"麦芽糖","can_delete":false,"product_type":"c1","uid":1025002,"ip_address":"","ucode":"717A578EC50515","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/ea/bd83bd4f.jpg","comment_is_top":false,"comment_ctime":1642204856,"is_pvip":false,"replies":[{"id":121589,"content":"“具备同样价值观的人才能走的更好” 👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643522293,"ip_address":"","comment_id":330829,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"设计哲学很重要，就比如一个人的价值观，或者背景。 \n在不了解别人价值观的时候去评价是不合理的，具备同样价值观的人才能走的更好。\n比如国家之前的相互不理解，是因为国家的文化不同。\n\n同样，需要理解 Go 的设计哲学显得非常重要。\n\n设计哲学有\n● 简单\n● 显示\n● 组合\n● 并发\n● 面向工程\n\n简单。\n比如关键字就很少。入门快。\n\n显示。\n如不同类型不能做运算，避免意料之外的事情发生。\n\n组合。\n暂时还不是很理解。\n\n并发。\n天生就为多核 CPU 开发，同时有自己的 goroutine 用户层轻量级线程，性能更好。\n\n面向工程。\n格式化、调试、工具链、默认参数等。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549030,"discussion_content":"“具备同样价值观的人才能走的更好” 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643522293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317738,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1634913547,"is_pvip":false,"replies":[{"id":115419,"content":"个人感觉go加入泛型更多是出于对社区意见的响应，加上go核心团队的确找到了一条可兼容Go1的实现方案。于是就打算加了。像Go语言之父Rob Pike还是保持谨慎态度，最近不是刚刚发issue，建议go团队不要在1.18标准库中使用泛型，观望一下。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635234622,"ip_address":"","comment_id":317738,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"最新版本Go 支持泛型，也就是不完全显式，算是平衡？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528950,"discussion_content":"个人感觉go加入泛型更多是出于对社区意见的响应，加上go核心团队的确找到了一条可兼容Go1的实现方案。于是就打算加了。像Go语言之父Rob Pike还是保持谨慎态度，最近不是刚刚发issue，建议go团队不要在1.18标准库中使用泛型，观望一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635234622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601928,"discussion_content":"先埋一个坑。没有泛型，算法模块的复用，怎么实现？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675502936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316536,"user_name":"许诺","can_delete":false,"product_type":"c1","uid":1930465,"ip_address":"","ucode":"02F9C167946F68","user_header":"https://static001.geekbang.org/account/avatar/00/1d/74/e1/284e7c38.jpg","comment_is_top":false,"comment_ctime":1634372973,"is_pvip":false,"replies":[{"id":114994,"content":"按极客的要求，是每周三篇哦。这样对照一下目录，你就可以算出来了:)","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1634768305,"ip_address":"","comment_id":316536,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"问下老师，什么时候更新完啊？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528403,"discussion_content":"按极客的要求，是每周三篇哦。这样对照一下目录，你就可以算出来了:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634768305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377851,"user_name":"phylony-lu","can_delete":false,"product_type":"c1","uid":1342724,"ip_address":"江苏","ucode":"00666300AD0E7F","user_header":"https://static001.geekbang.org/account/avatar/00/14/7d/04/d606b6a8.jpg","comment_is_top":false,"comment_ctime":1689343744,"is_pvip":false,"replies":[{"id":137713,"content":"垂直组合用类型嵌入实现，这个和水平组合在后面章节中会有详细讲解:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1689462551,"ip_address":"辽宁","comment_id":377851,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"Tony老师好，组合中的垂直组合是通过什么样方式实现的呢？水平组合不是特别清楚为什么这样可以降低耦合。","like_count":0},{"had_liked":false,"id":377353,"user_name":"Geek_46a7a4","can_delete":false,"product_type":"c1","uid":3651506,"ip_address":"广东","ucode":"ADE18D79E1C5BB","user_header":"","comment_is_top":false,"comment_ctime":1688375060,"is_pvip":false,"replies":[{"id":137518,"content":"嗯，极客时间专栏只有图文+语音。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1688432817,"ip_address":"北京","comment_id":377353,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"没有视频？只有语音？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622571,"discussion_content":"嗯，极客时间专栏只有图文+语音。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688432817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373400,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"广东","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1682475292,"is_pvip":false,"replies":[{"id":136378,"content":"有的。在后面。go并发设计、goroutine的一些原理和使用模式等。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1682479305,"ip_address":"美国","comment_id":373400,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师请问下，这门课程有没有goruntime go并发相关的内容？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622571,"discussion_content":"嗯，极客时间专栏只有图文+语音。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688432817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369398,"user_name":"Jolyne","can_delete":false,"product_type":"c1","uid":1507507,"ip_address":"四川","ucode":"3EB088DDFC1C8B","user_header":"https://static001.geekbang.org/account/avatar/00/17/00/b3/2536a41b.jpg","comment_is_top":false,"comment_ctime":1677494791,"is_pvip":false,"replies":[{"id":134649,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1677581546,"ip_address":"北京","comment_id":369398,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"如果 Go 是男孩子，那我现在、立刻、马上 就表白。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":615870,"discussion_content":"有的。在后面。go并发设计、goroutine的一些原理和使用模式等。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1682479305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365741,"user_name":"demajiao","can_delete":false,"product_type":"c1","uid":1907425,"ip_address":"北京","ucode":"1632CFCC16A5DF","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1a/e1/1acde886.jpg","comment_is_top":false,"comment_ctime":1672966433,"is_pvip":false,"replies":[{"id":133210,"content":"过奖了，还不是很懂:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1672972978,"ip_address":"北京","comment_id":365741,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看了2章，作者是懂go语言的。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607059,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677581547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352196,"user_name":"王大华","can_delete":false,"product_type":"c1","uid":1163590,"ip_address":"","ucode":"7AD5C4B8E93B0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/c1/46/a81f7402.jpg","comment_is_top":false,"comment_ctime":1658452593,"is_pvip":false,"replies":[{"id":128136,"content":"💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1658468867,"ip_address":"","comment_id":352196,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"刚开始接触 Go 看了这篇有点懵，对于一些名字理解不太好，看完后面再来重新刷一下。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598640,"discussion_content":"过奖了，还不是很懂:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672972978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341217,"user_name":"Paradise","can_delete":false,"product_type":"c1","uid":1070878,"ip_address":"","ucode":"D92EACCBF6B3B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","comment_is_top":false,"comment_ctime":1649428561,"is_pvip":false,"replies":[{"id":124735,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649485337,"ip_address":"","comment_id":341217,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"感谢 Tony Bai 的分享，这一讲值得反复体会","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560890,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649485337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320379,"user_name":"s t o a","can_delete":false,"product_type":"c1","uid":2135449,"ip_address":"","ucode":"B6862E64F2536A","user_header":"https://static001.geekbang.org/account/avatar/00/20/95/99/959f14de.jpg","comment_is_top":false,"comment_ctime":1636285117,"is_pvip":false,"replies":[{"id":116229,"content":"是的。相对于其他静态编译型语言，Go入门还是容易很多的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636386208,"ip_address":"","comment_id":320379,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看了一下语法感觉很简单。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529973,"discussion_content":"是的。相对于其他静态编译型语言，Go入门还是容易很多的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636386208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319945,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1636015112,"is_pvip":false,"replies":[{"id":116022,"content":"就是字面上的“从入门到放弃”啦：）","user_name":"编辑回复","user_name_real":"朱倩倩","uid":2537474,"ctime":1636078949,"ip_address":"","comment_id":319945,"utype":2}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，请教一下  “Hello and Bye” 是表达了什么， 没有google到。。。。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529973,"discussion_content":"是的。相对于其他静态编译型语言，Go入门还是容易很多的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636386208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316508,"user_name":"小明","can_delete":false,"product_type":"c1","uid":2812380,"ip_address":"","ucode":"F10955FF010368","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e9/dc/cc05ebc7.jpg","comment_is_top":false,"comment_ctime":1634364412,"is_pvip":false,"replies":[{"id":114692,"content":"专栏课程都是文字加音频哦，没有视频～","user_name":"编辑回复","user_name_real":"朱倩倩","uid":2537474,"ctime":1634543326,"ip_address":"","comment_id":316508,"utype":2}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师后续是视频还是一直都是这种录音呀","like_count":0,"discussions":[{"author":{"id":2537474,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b8/02/b538e9f4.jpg","nickname":"然而","note":"","ucode":"F1F1E093925934","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528398,"discussion_content":"专栏课程都是文字加音频哦，没有视频～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634543326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377851,"user_name":"phylony-lu","can_delete":false,"product_type":"c1","uid":1342724,"ip_address":"江苏","ucode":"00666300AD0E7F","user_header":"https://static001.geekbang.org/account/avatar/00/14/7d/04/d606b6a8.jpg","comment_is_top":false,"comment_ctime":1689343744,"is_pvip":false,"replies":[{"id":137713,"content":"垂直组合用类型嵌入实现，这个和水平组合在后面章节中会有详细讲解:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1689462551,"ip_address":"辽宁","comment_id":377851,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"Tony老师好，组合中的垂直组合是通过什么样方式实现的呢？水平组合不是特别清楚为什么这样可以降低耦合。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623419,"discussion_content":"垂直组合用类型嵌入实现，这个和水平组合在后面章节中会有详细讲解:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689462551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377353,"user_name":"Geek_46a7a4","can_delete":false,"product_type":"c1","uid":3651506,"ip_address":"广东","ucode":"ADE18D79E1C5BB","user_header":"","comment_is_top":false,"comment_ctime":1688375060,"is_pvip":false,"replies":[{"id":137518,"content":"嗯，极客时间专栏只有图文+语音。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1688432817,"ip_address":"北京","comment_id":377353,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"没有视频？只有语音？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623419,"discussion_content":"垂直组合用类型嵌入实现，这个和水平组合在后面章节中会有详细讲解:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689462551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373400,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"广东","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1682475292,"is_pvip":false,"replies":[{"id":136378,"content":"有的。在后面。go并发设计、goroutine的一些原理和使用模式等。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1682479305,"ip_address":"美国","comment_id":373400,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师请问下，这门课程有没有goruntime go并发相关的内容？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":615870,"discussion_content":"有的。在后面。go并发设计、goroutine的一些原理和使用模式等。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1682479305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369398,"user_name":"Jolyne","can_delete":false,"product_type":"c1","uid":1507507,"ip_address":"四川","ucode":"3EB088DDFC1C8B","user_header":"https://static001.geekbang.org/account/avatar/00/17/00/b3/2536a41b.jpg","comment_is_top":false,"comment_ctime":1677494791,"is_pvip":false,"replies":[{"id":134649,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1677581546,"ip_address":"北京","comment_id":369398,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"如果 Go 是男孩子，那我现在、立刻、马上 就表白。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607059,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677581547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365741,"user_name":"demajiao","can_delete":false,"product_type":"c1","uid":1907425,"ip_address":"北京","ucode":"1632CFCC16A5DF","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1a/e1/1acde886.jpg","comment_is_top":false,"comment_ctime":1672966433,"is_pvip":false,"replies":[{"id":133210,"content":"过奖了，还不是很懂:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1672972978,"ip_address":"北京","comment_id":365741,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看了2章，作者是懂go语言的。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598640,"discussion_content":"过奖了，还不是很懂:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672972978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352196,"user_name":"王大华","can_delete":false,"product_type":"c1","uid":1163590,"ip_address":"","ucode":"7AD5C4B8E93B0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/c1/46/a81f7402.jpg","comment_is_top":false,"comment_ctime":1658452593,"is_pvip":false,"replies":[{"id":128136,"content":"💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1658468867,"ip_address":"","comment_id":352196,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"刚开始接触 Go 看了这篇有点懵，对于一些名字理解不太好，看完后面再来重新刷一下。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581035,"discussion_content":"💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658468868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341217,"user_name":"Paradise","can_delete":false,"product_type":"c1","uid":1070878,"ip_address":"","ucode":"D92EACCBF6B3B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","comment_is_top":false,"comment_ctime":1649428561,"is_pvip":false,"replies":[{"id":124735,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649485337,"ip_address":"","comment_id":341217,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"感谢 Tony Bai 的分享，这一讲值得反复体会","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581035,"discussion_content":"💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658468868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320379,"user_name":"s t o a","can_delete":false,"product_type":"c1","uid":2135449,"ip_address":"","ucode":"B6862E64F2536A","user_header":"https://static001.geekbang.org/account/avatar/00/20/95/99/959f14de.jpg","comment_is_top":false,"comment_ctime":1636285117,"is_pvip":false,"replies":[{"id":116229,"content":"是的。相对于其他静态编译型语言，Go入门还是容易很多的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636386208,"ip_address":"","comment_id":320379,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看了一下语法感觉很简单。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560890,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649485337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319945,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1636015112,"is_pvip":false,"replies":[{"id":116022,"content":"就是字面上的“从入门到放弃”啦：）","user_name":"编辑回复","user_name_real":"朱倩倩","uid":2537474,"ctime":1636078949,"ip_address":"","comment_id":319945,"utype":2}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，请教一下  “Hello and Bye” 是表达了什么， 没有google到。。。。","like_count":0,"discussions":[{"author":{"id":2537474,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b8/02/b538e9f4.jpg","nickname":"然而","note":"","ucode":"F1F1E093925934","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529824,"discussion_content":"就是字面上的“从入门到放弃”啦：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636078949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128549,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","nickname":"悟二空","note":"","ucode":"BF3B8BA6E49B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567795,"discussion_content":"哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650989638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413039,"discussion_content":"好吧 我以为是程序特性呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636368881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316508,"user_name":"小明","can_delete":false,"product_type":"c1","uid":2812380,"ip_address":"","ucode":"F10955FF010368","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e9/dc/cc05ebc7.jpg","comment_is_top":false,"comment_ctime":1634364412,"is_pvip":false,"replies":[{"id":114692,"content":"专栏课程都是文字加音频哦，没有视频～","user_name":"编辑回复","user_name_real":"朱倩倩","uid":2537474,"ctime":1634543326,"ip_address":"","comment_id":316508,"utype":2}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师后续是视频还是一直都是这种录音呀","like_count":0,"discussions":[{"author":{"id":2537474,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b8/02/b538e9f4.jpg","nickname":"然而","note":"","ucode":"F1F1E093925934","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529824,"discussion_content":"就是字面上的“从入门到放弃”啦：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636078949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128549,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","nickname":"悟二空","note":"","ucode":"BF3B8BA6E49B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567795,"discussion_content":"哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650989638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413039,"discussion_content":"好吧 我以为是程序特性呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636368881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316339,"user_name":"学昊","can_delete":false,"product_type":"c1","uid":2810121,"ip_address":"","ucode":"70DED7DB6565AF","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e1/09/efa69f7a.jpg","comment_is_top":false,"comment_ctime":1634278830,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"本人老java码农了。进阶的代码设计是设计模式，让代码能更优雅的实现。终极的代码设计是哲学，是代码中表达出的价值观。","like_count":13},{"had_liked":false,"id":317044,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1634647945,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"放弃之前，看这篇，找找最初的心动，哈哈：）","like_count":5},{"had_liked":false,"id":316281,"user_name":"费城的二鹏","can_delete":false,"product_type":"c1","uid":1101293,"ip_address":"","ucode":"DE768A0CC3053D","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/ed/825d84ee.jpg","comment_is_top":false,"comment_ctime":1634258890,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师讲的很透彻，如数家珍。","like_count":5},{"had_liked":false,"id":317526,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1634824707,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":5,"product_id":100093501,"comment_content":"Go 语言的设计哲学总结为五点：简单、显式、组合、并发和面向工程。可能对go还不熟悉，很多地方还是没有特别的感觉，学完之后回头看，应该会是不一样的感受吧~","like_count":4},{"had_liked":false,"id":320716,"user_name":"van","can_delete":false,"product_type":"c1","uid":1766293,"ip_address":"","ucode":"26FAFF7224F12D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f3/95/77628ed0.jpg","comment_is_top":false,"comment_ctime":1636467109,"is_pvip":true,"replies":null,"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"您好，不好意思，之前提的问题可能不对，其实我真正想问的是其他主流比如java有没有利用多核并行？比如java构建了很多线程，这些线程的调度在多核cpu上已经天然是多核并行的，这个并不是java的语言特性，而是操作系统的特性。\n因为go用的是用户态协程，所以go做了一个大换血，自己手动支持多核并行。","like_count":3,"discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584023,"discussion_content":"然而协程并不能单独做什么，它也需要依赖线程的并发，不然它的优势等于没有。线程才是资源调度的最小单元。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1660562001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601927,"discussion_content":"包裹和快递员的关系。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1675502605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348788,"user_name":"锋子","can_delete":false,"product_type":"c1","uid":1681459,"ip_address":"","ucode":"89FFA85BDB1C99","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","comment_is_top":false,"comment_ctime":1655394067,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"我还是觉得那种充斥各个角落的 if err != nil {} 这就是丑不拉几的，没得洗，什么哲学都是虚的，只能说勉强。 当然，好处肯定是有，其他语言的exception也不见得好到哪里去。。。希望之后能有更好的解决方案吧。","like_count":1},{"had_liked":false,"id":367721,"user_name":"无咎","can_delete":false,"product_type":"c1","uid":1479120,"ip_address":"北京","ucode":"B9759B5646F3AB","user_header":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","comment_is_top":false,"comment_ctime":1675503533,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"个人以为用设计理念比设计哲学妥帖一些。","like_count":0,"discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584023,"discussion_content":"然而协程并不能单独做什么，它也需要依赖线程的并发，不然它的优势等于没有。线程才是资源调度的最小单元。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1660562001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601927,"discussion_content":"包裹和快递员的关系。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1675502605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316339,"user_name":"学昊","can_delete":false,"product_type":"c1","uid":2810121,"ip_address":"","ucode":"70DED7DB6565AF","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e1/09/efa69f7a.jpg","comment_is_top":false,"comment_ctime":1634278830,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"本人老java码农了。进阶的代码设计是设计模式，让代码能更优雅的实现。终极的代码设计是哲学，是代码中表达出的价值观。","like_count":13,"discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584021,"discussion_content":"设计模式，算法，数据结构。还有面向对象编程的三大特性其实就是设计哲学。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1660561605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317044,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1634647945,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"放弃之前，看这篇，找找最初的心动，哈哈：）","like_count":5},{"had_liked":false,"id":316281,"user_name":"费城的二鹏","can_delete":false,"product_type":"c1","uid":1101293,"ip_address":"","ucode":"DE768A0CC3053D","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/ed/825d84ee.jpg","comment_is_top":false,"comment_ctime":1634258890,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师讲的很透彻，如数家珍。","like_count":5},{"had_liked":false,"id":317526,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1634824707,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":5,"product_id":100093501,"comment_content":"Go 语言的设计哲学总结为五点：简单、显式、组合、并发和面向工程。可能对go还不熟悉，很多地方还是没有特别的感觉，学完之后回头看，应该会是不一样的感受吧~","like_count":4},{"had_liked":false,"id":320716,"user_name":"van","can_delete":false,"product_type":"c1","uid":1766293,"ip_address":"","ucode":"26FAFF7224F12D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f3/95/77628ed0.jpg","comment_is_top":false,"comment_ctime":1636467109,"is_pvip":true,"replies":null,"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"您好，不好意思，之前提的问题可能不对，其实我真正想问的是其他主流比如java有没有利用多核并行？比如java构建了很多线程，这些线程的调度在多核cpu上已经天然是多核并行的，这个并不是java的语言特性，而是操作系统的特性。\n因为go用的是用户态协程，所以go做了一个大换血，自己手动支持多核并行。","like_count":3,"discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584021,"discussion_content":"设计模式，算法，数据结构。还有面向对象编程的三大特性其实就是设计哲学。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1660561605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348788,"user_name":"锋子","can_delete":false,"product_type":"c1","uid":1681459,"ip_address":"","ucode":"89FFA85BDB1C99","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","comment_is_top":false,"comment_ctime":1655394067,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"我还是觉得那种充斥各个角落的 if err != nil {} 这就是丑不拉几的，没得洗，什么哲学都是虚的，只能说勉强。 当然，好处肯定是有，其他语言的exception也不见得好到哪里去。。。希望之后能有更好的解决方案吧。","like_count":1},{"had_liked":false,"id":367721,"user_name":"无咎","can_delete":false,"product_type":"c1","uid":1479120,"ip_address":"北京","ucode":"B9759B5646F3AB","user_header":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","comment_is_top":false,"comment_ctime":1675503533,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"个人以为用设计理念比设计哲学妥帖一些。","like_count":0}]}