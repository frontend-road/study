{"id":265121,"title":"25 | 设计模式：每一种都是一个特定问题的解决方案","content":"<p>你好，我是郑晔！</p><p>今天，我们来聊聊设计模式。作为一个讲软件设计的专栏，不讲设计模式有些说不过去。现在的程序员，基本上在工作了一段时间之后，都会意识到学习设计模式的重要性。</p><p>因为随着工作经验的增多，大家会逐渐认识到，代码写不好会造成各种问题，而设计模式则是所有软件设计的知识中，市面上参考资料最多，最容易学习的知识。</p><p>但是，你也知道，设计模式的内容很多，多到可以单独地作为一本书或一个专栏的内容。如果我们要在这个专栏的篇幅里，细致地学习设计模式的内容就会显得有些局促。</p><p>所以，这一讲，我打算和你谈谈<strong>如何理解和学习设计模式</strong>，帮助你建立起对设计模式的一个整体认知。</p><h2>设计模式：一种特定的解决方案</h2><p>所谓模式，其实就是针对的就是一些普遍存在的问题给出的解决方案。模式这个说法起源于建筑领域，建筑师克里斯托佛·亚历山大曾把建筑中的一些模式汇集成册。结果却是墙里开花墙外香，模式这个说法却在软件行业流行了起来。</p><p>最早是Kent Beck和Ward Cunningham探索将模式这个想法应用于软件开发领域，之后，Erich Gamma把这一思想写入了其博士论文。而真正让建筑上的模式思想成了设计模式，在软件行业得到了广泛地接受，则是在《设计模式》这本书出版之后了。</p><!-- [[[read_end]]] --><p>这本书扩展了Erich Gamma的论文。四位作者Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides也因此名声大噪，得到了GoF的称呼。我们今天大部分人知道的23种设计模式就是从这本书来的，而困惑也是从这里开始的。</p><p>因为，这23种设计模式只是在这本书里写的，并不是天底下只有23种设计模式。随着人们越发认识到设计模式这件事的重要性，越来越多的模式被发掘了出来，各种模式相关的书先后问世，比如，Martin Fowler 写过<a href=\"http://book.douban.com/subject/4826290/\">《企业应用架构模式》</a>，甚至还有人写了一套 5 卷本的<a href=\"/https://book.douban.com/series/14666\">《面向模式的软件架构》</a>。</p><p>但是，很多人从开始学习设计模式，就对设计模式的认知产生了偏差，所谓的23个模式其实就是23个例子。</p><p>还记得我们前面几讲学习的设计原则吗？如果用数学来比喻的话，<strong>设计原则就像公理</strong>，它们是我们讨论各种问题的基础，而<strong>设计模式则是定理</strong>，它们是在特定场景下，对于经常发生的问题给出的一个可复用的解决方案。</p><p>所以，你要想把所有已知的模式统统学一遍，即便不是不可能，也是会花费很多时间的，更何况还会有新的模式不断地出现。而且，虽然《设计模式》那本书上提到的大部分设计模式都很流行，但<strong>有一些模式，如果你不是编写特定的代码，你很可能根本就用不上</strong>。</p><p>比如Flyweight模式，如果你的系统中没有那么多小对象，可能就根本用不到它；而 Visitor 模式，在你设计自己系统的时候也很少会用到，因为你自己写的类常常都是可以拿到信息的，犯不上舍近求远。</p><p>所以，<strong>学习设计模式不要贪多求全，那注定会是一件费力不讨好的事</strong>。</p><p>想要有效地学习设计模式，首先我们要知道<strong>每一个模式都是一个特定的解决方案</strong>。关键点在于，我们要知道这个模式在解决什么问题。很多人强行应用设计模式会让代码不必要地复杂起来，原因就在于他在解决的问题，和设计模式本身要解决的问题并不一定匹配。<strong>学习设计模式不仅仅要学习代码怎么写，更重要的是要了解模式的应用场景</strong>。</p><h2>从原则到模式</h2><p>设计模式之所以能成为一个特定的解决方案，很大程度上是因为它是一种好的做法，符合软件设计原则，所以，<strong>设计原则其实是这些模式背后的东西</strong>。</p><p>我们前面花了大量的篇幅在讲各种编程范式、设计原则，因为它们是比设计模式更基础的东西。掌握这些内容，按照它们去写代码，可能你并没有在刻意使用一个设计模式，往往也能写出符合某个设计模式的代码。</p><p>我给你举个例子。比如，在用户注册完成之后，相关信息会发给后台的数据汇总模块，以便后面我们进行相关的数据分析。所以，我们会写出这样的代码：</p><pre><code>interface UserSender {\n  void send(User user);\n}\n\n// 把用户信息发送给后台数据汇总模块\nclass UserCollectorSender implements UserSender {\n  private UserCollectorChannel channel;\n  \n  public void send(final User user) {\n    channel.send(user);\n  }\n}\n</code></pre><p>同时，我们还要把用户注册成功的消息通过短信通知给用户，这里会用到第三方的服务，所以，我们这里要有一个APP的key和secret：</p><pre><code>// 通过短信发消息\nclass UserSMSSender implements UserSender {\n  private String appKey;\n  private String appSecret;\n  private UserSMSChannel channel;\n  \n  public void send(final User user) {\n    channel.send(appKey, appSecret, user);\n  }\n}\n</code></pre><p>现在，我们要对用户的一些信息做处理，保证敏感信息不会泄漏，比如，用户密码。同时，我们还希望信息在发送成功之后，有一个统计，以便我们知道发出了多少的信息。</p><p>如果不假思索地加上这段逻辑，那两个类里必然都会有相同的处理，本着单一职责原则，我们把这个处理放到一个父类里面，于是，代码就变成这样：</p><pre><code>class BaseUserSender implements UserSender {\n  // 敏感信息过滤\n  protected User sanitize(final User user) {\n    ...\n  }\n  \n  // 收集消息发送信息\n  protected void collectMessageSent(final User user) {\n    ...\n  }\n}\n\nclass UserCollectorSender extends BaseUserSender {\n  ...\n  \n  public void send(final User user) {\n    User sanitizedUser = sanitize(user);\n    channel.send(sanitizedUser);\n    collectMessageSent(user);\n  }\n}\n\nclass UserSMSSender extends BaseUserSender {\n  ...\n  \n  public void send(final User user) {\n    User sanitizedUser = sanitize(user);\n    channel.send(appKey, appSecret, user);\n    collectMessageSent(user);\n  }\n}\n</code></pre><p>然而，这两段发送的代码除了发送的部分不一样，其他部分是完全一样的。所以，我们可以考虑把共性的东西提取出来，而差异的部分让子类各自实现：</p><pre><code>class BaseUserSender implements UserSender {\n  // 发送用户信息\n  public void send(final User user) {\n    User sanitizedUser = sanitize(user);\n    doSend(user);\n    collectMessageSent(user);\n  }\n  \n  // 敏感信息过滤\n  private User sanitize(final User user) {\n    ...\n  }\n  \n  // 收集消息发送信息\n  private void collectMessageSent(final User user) {\n    ...\n  }\n}\n\n\nclass UserCollectorSender extends BaseUserSender {\n  ...\n  \n  public void doSend(final User user) {\n    channel.send(sanitizedUser);\n  }\n}\n\n\nclass UserSMSSender extends BaseUserSender {\n  ...\n  \n  public void doSend(final User user) {\n    channel.send(appKey, appSecret, user);\n  }\n}\n</code></pre><p>你是不是觉得这段代码有点眼熟了呢？没错，这就是Template Method的设计模式。我们只是遵循着单一职责原则，把重复的代码一点点地消除，结果，我们就得到了一个设计模式。在真实的项目中，你可能很难一眼就看出当前场景是否适合使用某个模式，更实际的做法就是这样遵循着设计原则一点点去调整代码。</p><p>其实，只要我们遵循着同样的原则，大多数设计模式都是可以这样一点点推演出来的。所以说，<strong>设计模式只是设计原则在特定场景下的应用</strong>。</p><h2>开眼看模式</h2><p>学习设计模式，我们还应该有一个更开阔的视角。首先是要看到<strong>语言的局限</strong>，虽然设计模式本身并不局限于语言，但很多模式之所以出现，就是受到了语言本身的限制。</p><p>比如，Visitor模式主要是因为C++、Java之类的语言只支持单分发，也就是只能根据一个对象来决定调用哪个方法。而对于支持多分发的语言，Visitor模式存在的意义就不大了。</p><p><a href=\"http://norvig.com/\">Peter Norvig</a>，Google 公司的研究总监，早在 1996 年就曾做过一个分享<a href=\"http://www.norvig.com/design-patterns/\">《动态语言的设计模式》</a>，他在其中也敏锐地指出，设计模式在某种意义上就是为了解决语言自身缺陷的一种权宜之计，其中列举了某些设计模式采用动态语言后的替代方案。</p><p>我们还应该知道，随着时代的发展，有一些设计模式<strong>本身也在经历变化</strong>。比如，Singleton 模式是很多面试官喜爱的一个模式，因为它能考察很多编程的技巧。比如，通过将构造函数私有化，保证不创建出更多的对象、在多线程模式下要进行双重检查锁定（double-check locking）等等。</p><p>然而，我在讲可测试性的时候说过，Singleton并不是一个好的设计模式，它会影响系统的可测试性。从概念上说，系统里只有一个实例和限制系统里只能构建出一个实例，这其实是两件事。</p><p>尤其是在DI容器普遍使用的今天，DI容器缺省情况下生成的对象就是只有一个实例。所以，在大部分情况下，我们完全没有必要使用Singleton模式。当然，如果你的场景非常特殊，那就另当别论了。</p><p>在讲语法和程序库时，我们曾经说过，一些好的做法会逐渐被吸收到程序库，甚至成为语法。设计模式常常就是好做法的来源，所以，一些程序库就把设计模式的工作做了。比如，Observer 模式早在1.0版本的时候就进入到 JDK，被监听的对象要继承自 <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Observable.html\">Observable</a> 类就好，用来监听的对象实现一个 <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html\">Observer</a> 接口就行。</p><p>当然，我们讲继承时说过，继承不是一个特别好的选择，Observable是一个要去继承的类，所以，它做得也并不好。从Java 9开始，这个实现就过时（deprecated）了，当然官方的理由会更充分一些，你要是有兴趣可以去了解一下。JDK中提供的替代方案是<a href=\"http://docs.oracle.com/javase/8/docs/api/java/beans/PropertyChangeSupport.html\">PropertyChangeSupport</a>，简言之，用组合替代了继承。</p><p>我个人更欣赏的替代方案是Guava的<a href=\"http://github.com/google/guava/wiki/EventBusExplained\">EventBus</a>，你甚至都不用实现一个接口，只要用一个Annotation标记一下就可以监听了。</p><p>Annotation可以说是消灭设计模式的一个利器。我们刚说过，语言本身的局限造成了一些设计模式的出现，这一点在Java上表现得尤其明显。随着Java自身的发展，随着Java世界的发展，有一些设计模式就越来越少的用到了。比如，Builder模式通过Lombok这个库的一个Annotation就可以做到：</p><pre><code>@Builder\nclass Student {\n  private String name;\n  private int age;\n  ...\n}\n</code></pre><p>而Decorator模式也可以通过Annotation实现，比如，一种使用 Decorator 模式\u001d的典型场景，是实现事务，很多Java程序员熟悉的一种做法就是使用Spring的Transactional，就像下面这样：</p><pre><code>class Handler {\n  @Transactional\n  public void execute() {\n    ...\n  }\n}\n</code></pre><p>随着Java 8引入Lambda，Command模式的写法也会得到简化，比如写一个文件操作的宏记录器，之前的版本需要声明很多类，类似下面这种：</p><pre><code>Macro macro = new Macro();\nmacro.record(new OpenFile(fileReceiver));\nmacro.record(new WriteFile(fileReceiver));\nmacro.record(new CloseFile(fileReceiver));\nmacro.run();\n</code></pre><p>而有了Lambda，就可以简化一些，不用为每个命令声明一个类：</p><pre><code>Macro macro = new Macro();\nmacro.record(() -&gt; fileReceiver.openFile());\nmacro.record(() -&gt; fileReceiver.writeFile());\nmacro.record(() -&gt; fileReceiver.closeFile());\nmacro.run();\n</code></pre><p>甚至还可以用Method Reference再简化：</p><pre><code>Macro macro = new Macro();\nmacro.record(fileReceiver::openFile);\nmacro.record(fileReceiver::writeFile);\nmacro.record(fileReceiver::closeFile);\nmacro.run();\n</code></pre><p>所以，我们学习设计模式除了学习标准写法的样子，还要知道，随着语言的不断发展，新的写法变成了什么样子。</p><h2>总结时刻</h2><p>今天，我们谈到了如何学习设计模式。学习设计模式，很多人的注意力都在模式的代码应该如何编写，却忽略了模式的使用场景。强行应用模式，就会有一种削足适履的感觉。</p><p>设计模式背后其实是各种设计原则，我们在实际的工作中，更应该按照设计原则去写代码，不一定要强求设计模式，而按照设计原则去写代码的结果，往往是变成了某个模式。</p><p>学习设计模式，我们也要抬头看路，比如，很多设计模式的出现是因为程序设计语言自身能力的不足，我们还要知道，随着时代的发展，一些模式已经不再适用了。</p><p>比如 Singleton 模式，还有些模式有了新的写法，比如，Observer、Decorator、Command 等等。我们对于设计模式的理解，也要随着程序设计语言的发展不断更新。</p><p>好，关于设计模式，我们就先谈到这里。下一讲，我会和你讨论一些很多人经常挂在嘴边的编程原则，虽然它们不像设计原则那么成体系，但依然会给你一些启发性的思考。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>学习设计模式，从设计原则开始，不局限于模式。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/4f/36/4f01c17b5509c29085b166a7ccec6c36.jpg?wh=2284*1167\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你谈谈你是怎么学习设计模式的，你现在对于设计模式的理解又是怎样的。欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"24 | 依赖倒置原则：高层代码和底层代码，到底谁该依赖谁？","id":264079},"right":{"article_title":"26 | 简单设计：难道一开始就要把设计做复杂吗？","id":265128}},"comments":[{"had_liked":false,"id":238364,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1596152262,"is_pvip":true,"replies":[{"id":"88067","content":"我不得不说，你说得对😂","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596159254,"ip_address":"","comment_id":238364,"utype":1}],"discussion_count":2,"race_medal":0,"score":"117560269254","product_id":100052601,"comment_content":"从为了设计而设计，到为了解决问题而设计，这几乎是成熟程序员的必由之路。学费公司出，这也是我们这个行业的必由之路😂","like_count":28,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502724,"discussion_content":"我不得不说，你说得对😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596159254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110662,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/86/d689f77e.jpg","nickname":"Hank_Yan","note":"","ucode":"86899B561C502B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329795,"discussion_content":"学费公司出，真相了老铁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606460881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239555,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1596587312,"is_pvip":false,"replies":[{"id":"88492","content":"恭喜上了一个台阶！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596591221,"ip_address":"","comment_id":239555,"utype":1}],"discussion_count":3,"race_medal":1,"score":"87495933232","product_id":100052601,"comment_content":"<br>曾经买过一本《大话设计模式》，每晚必挑灯夜读之。然而现在，心中已无模式，只有原则。<br>","like_count":21,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503137,"discussion_content":"恭喜上了一个台阶！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596591221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2763179,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","nickname":"Kevin","note":"","ucode":"3588850B3370C8","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547178,"discussion_content":"什么时候再干掉原则，达到大音希声，大象无形的境界呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642569533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1005290,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","nickname":"giteebravo","note":"","ucode":"C087E8D6B5A98B","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":2763179,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","nickname":"Kevin","note":"","ucode":"3588850B3370C8","race_medal":4,"user_type":1,"is_pvip":true},"discussion":{"id":547229,"discussion_content":"\n我可能永远达不到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642591226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547178,"ip_address":""},"score":547229,"extra":""}]}]},{"had_liked":false,"id":236815,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1595556836,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31660327908","product_id":100052601,"comment_content":"设计模式是对一些常见问题抽象后给出的特定解决方案，很多人或多或少都听说过或使用过设计模式，比如观察者模式，工厂模式，builder模式，单例模式，策略模式等等<br>这些模式都遵循软件开发设计的SOLID原则，设计模式就是从这个原则推导出来，所以掌握基本的设计原则就理解了设计模式的基础，在实际编码中，不刻意使用设计模式但也可以写出某个设计模式相似的代码，我觉得这个才是“无招胜有招”的境界<br>当然学习设计模式也能够更好帮助反过来思考这些模式背后的基本原则","like_count":8,"discussions":[{"author":{"id":1061005,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/8d/a2a4e97e.jpg","nickname":"Atong","note":"","ucode":"7E9D4B8D108E4E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306082,"discussion_content":"嗯是的。 懂背后的法则，懂实际的手法。 法则为主，两者都会，能彼此促进深入理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600164495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236960,"user_name":"奔奔奔跑","can_delete":false,"product_type":"c1","uid":1210265,"ip_address":"","ucode":"F86EC205DCAACE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Gswh7ibY4tubXhp0BXOmV2pXZ3XsXic1d942ZMAEgWrRSF99bDskOTsG1g172ibORXxSCWTn9HWUX5vSSUVWU5I4A/132","comment_is_top":false,"comment_ctime":1595604508,"is_pvip":false,"replies":[{"id":"87563","content":"别控制，大胆去做！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595641146,"ip_address":"","comment_id":236960,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23070440988","product_id":100052601,"comment_content":"看老师的专栏太难受了！思考的乐趣与设计的美感，每每反思自己的代码，总感觉心痒痒的，恨不得把所有相关代码都看一遍，了解各种框架，各种中间件是怎么去做的，去实践的。","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502265,"discussion_content":"别控制，大胆去做！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595641146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276572,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","nickname":"Janenesome","note":"","ucode":"15D2673CC31D9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317159,"discussion_content":"真的对，说到心坎里了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603510481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061005,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/8d/a2a4e97e.jpg","nickname":"Atong","note":"","ucode":"7E9D4B8D108E4E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306081,"discussion_content":"嗯，我也是这样。但我还好没有很紧的项目进度要求。我就拿起现有的项目，一点点思考着，参照着做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600164360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297167,"discussion_content":"我也有这样的想法，然后一不小心迷失在细节中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596791342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256040,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603510693,"is_pvip":false,"replies":[{"id":"100543","content":"可以用这些原则一个一个过一遍设计模式。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612256040,"ip_address":"","comment_id":256040,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5898477989","product_id":100052601,"comment_content":"Template Method 这个模式用得比较多，因为只需要将不同的部分封装到子类，场景比较清晰。其他的设计模式就用得比较少。<br><br>这个专栏给出的原则挺多，准备一个一个来践行，因为一下子体会到全部有点难，得一边写代码一边对照思考，慢慢改变自己的编程思想。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507913,"discussion_content":"可以用这些原则一个一个过一遍设计模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612256040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248440,"user_name":"Atong","can_delete":false,"product_type":"c1","uid":1061005,"ip_address":"","ucode":"7E9D4B8D108E4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/8d/a2a4e97e.jpg","comment_is_top":false,"comment_ctime":1600164276,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5895131572","product_id":100052601,"comment_content":"第一阶段： 为了学设计模式而学设计模式。一段时间学代码觉得用不是很上。到后面觉得代码改动似乎很大，而且就和之前课程提到的一样，把面向对象写成了面向过程。 然后就是有意识的搬设计模式中的内容。有些场景下会使用设计模式，看着像是符合了某种设计原则。但其实自己还是处于无知的状态。<br><br>第二阶段：通过课程对设计原则有了更深刻的理解之后。更能明白设计模式的出发点及用意。就如课程所说的，设计原则是背后的东西。设计模式仅是针对某种场景的具体例子。 希望能够深刻理解到设计原则，自己能够基于场景推导设计模式，或是基于模式及原则推导可能适用的场景。 做到“心法” 和 “招式”的对应，并且能够灵活运用。甚至是在找不到合适“招式”的时候，也能够自己推演出来。 ","like_count":2,"discussions":[{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580004,"discussion_content":"“只要我们遵循着同样的原则，大多数设计模式都是可以这样一点点推演出来的。”推演的过程和能力比模式本身更重要些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657796223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239149,"user_name":"Keith","can_delete":false,"product_type":"c1","uid":1193337,"ip_address":"","ucode":"B40774090714D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/79/21647da2.jpg","comment_is_top":false,"comment_ctime":1596447464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891414760","product_id":100052601,"comment_content":"设计原则对是抽象, 设计模式为具体的实现, 但又不是简单的继承, 而是通过组合等方式实现","like_count":1},{"had_liked":false,"id":236878,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1595574714,"is_pvip":false,"replies":[{"id":"87542","content":"还是有必要全面了解一下的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595587163,"ip_address":"","comment_id":236878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890542010","product_id":100052601,"comment_content":"设计模式反复看过很多次，可能和我做Bs架构的管理系统有关，只用过单例，消费者，生产者，然后是简单工厂。其他没用过","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502239,"discussion_content":"还是有必要全面了解一下的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595587163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236855,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1595567494,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5890534790","product_id":100052601,"comment_content":"我觉得应该是从设计模式开始，到深入理解设计原则。反过来，很看天赋，难。<br><br>1.把设计模式抄熟，多用。学会识别设计模式要解决的问题场景。领会该设计模式在该问题场景的应用是基于什么设计原则的考量。<br><br>2. 设计模式和设计原则可类比成太极拳的拳法与神，以模仿拳法入门，以领悟神韵进阶。拳、劲、神-&gt;模式、场景、原则。那么怎么练好呢？熟而渐悟懂劲，由懂劲而阶及神明。然非用力之久不能豁然贯通焉。<br><br>歧义点：<br>ef java那本书也有提到,单例双重检验是个失败案例。毕竟指令重排，并发线程可能拿到有内存地址的空对象,进而会存在空指针异常。","like_count":1,"discussions":[{"author":{"id":1169313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","nickname":"bigben","note":"","ucode":"DBD15A6C8E2590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294443,"discussion_content":"所以要加volatile啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595895337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346274,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652966157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652966157","product_id":100052601,"comment_content":"学习设计模式，从设计原则开始，不局限于模式。--记下来","like_count":0},{"had_liked":false,"id":345135,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1652072267,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652072267","product_id":100052601,"comment_content":"23种设计模式，可以分为大概几类 创造型 结构型 行为型","like_count":0},{"had_liked":false,"id":342258,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650161281,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650161281","product_id":100052601,"comment_content":"设计原则是公理，是基础，设计模式是定理，是应用","like_count":0},{"had_liked":false,"id":319448,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1635817737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635817737","product_id":100052601,"comment_content":"怪不得老师花了很多篇幅讲设计原则，好有道理","like_count":0},{"had_liked":false,"id":296074,"user_name":"猪肉怂","can_delete":false,"product_type":"c1","uid":2011383,"ip_address":"","ucode":"59C909384E1116","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b0/f7/9016fbbb.jpg","comment_is_top":false,"comment_ctime":1622731351,"is_pvip":false,"replies":[{"id":"107556","content":"你的理解很到位","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1622975293,"ip_address":"","comment_id":296074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622731351","product_id":100052601,"comment_content":"之前就曾经叹服于一些设计模式，比如工厂模式，到了动态语言中会有那么简洁的实现，简洁到甚至感觉不到模式的存在，原来设计模式只是为了通往更好设计的解决方案。当语言的本身掣肘随着发展而被祛除，设计模式也就完成了它们的使命。<br><br>当一些设计模式最终更好的开发语汇所替换掉，模式背后的设计原则，将会永远存在下去。<br><br>这就是郑老师所讲的根基与枝叶的关系吧。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521313,"discussion_content":"你的理解很到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622975293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263062,"user_name":"佟宏元","can_delete":false,"product_type":"c1","uid":2224337,"ip_address":"","ucode":"052233A5720447","user_header":"","comment_is_top":false,"comment_ctime":1605966930,"is_pvip":false,"replies":[{"id":"100420","content":"于是，你就升华了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612099153,"ip_address":"","comment_id":263062,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605966930","product_id":100052601,"comment_content":"平时使用过单例，策略，观察者等模式，从一开始纠结于如何按照规定编写代码，到后面已经脱离了编码层面的使用，我总结出，学习设计模式，学习的不是如何编写代码，而是一种软件设计思想，比如什么场景使用策略模式，什么场景使用观察者模式，甚至是已经完全不体现在代码层面，而是对系统的功能的设计，对业务场景的梳理。所以我觉得设计模式最后的样子，是一种解决业务，设计软件的模型。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510082,"discussion_content":"于是，你就升华了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612099153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252444,"user_name":"木头发芽","can_delete":false,"product_type":"c1","uid":1419723,"ip_address":"","ucode":"657B381C5DA963","user_header":"https://static001.geekbang.org/account/avatar/00/15/a9/cb/a431bde5.jpg","comment_is_top":false,"comment_ctime":1602301520,"is_pvip":false,"replies":[{"id":"92866","content":"是的，理解得越深入，运用得越纯熟。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1603153828,"ip_address":"","comment_id":252444,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602301520","product_id":100052601,"comment_content":"跟独孤九剑一个道理,剑式就那么九个,怎么解决敌人就看具体是什么问题,在这九式的指导下见招拆招就可以","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506779,"discussion_content":"是的，理解得越深入，运用得越纯熟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603153828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250672,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1601192583,"is_pvip":true,"replies":[{"id":"100125","content":"写代码很多时候，是一个人，或一个团队的事，整个行业的演变速度是非常慢的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611728351,"ip_address":"","comment_id":250672,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1601192583","product_id":100052601,"comment_content":"那个《面向模式的软件架构》实在是太狠了，居然有 5 卷，并且还得了 Jolt 大奖。<br><br>这篇专栏可以作为学习设计模式的一个开篇词。<br><br>之前也学习过 23 中设计模式，但是在写程序的时候其实用的并不多，时间长了，连 23 个模式的名字都记不全。<br><br>有时候按照 SOLID 原则去重构一些代码，总感觉好像是对应了某一个设计模式，但是又似是而非，需要到隔壁专栏复习一下设计模式。<br><br>“看眼看模式”部分，讲到程序设计语言的发展使得一些模式有了新的写法，我有点好奇，在业界究竟有多少公司能够跟进语言的演变。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506256,"discussion_content":"写代码很多时候，是一个人，或一个团队的事，整个行业的演变速度是非常慢的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611728351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245571,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1598981960,"is_pvip":false,"replies":[{"id":"100126","content":"有收获就没白学","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611728402,"ip_address":"","comment_id":245571,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598981960","product_id":100052601,"comment_content":"感觉悟了；如果没有理解分离关注点和dip；很可能就在业务处理流程中直接调用 UserCollectorChannel的send方法了；都不会想到抽象出usersend接口。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504921,"discussion_content":"有收获就没白学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611728402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}