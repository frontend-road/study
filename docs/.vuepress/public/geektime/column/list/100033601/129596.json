{"id":129596,"title":"12 | 栈空间和堆空间：数据是如何存储的？","content":"<p>对于前端开发者来说，JavaScript的内存机制是一个不被经常提及的概念 ，因此很容易被忽视。特别是一些非计算机专业的同学，对内存机制可能没有非常清晰的认识，甚至有些同学根本就不知道JavaScript的内存机制是什么。</p><p>但是如果你想成为行业专家，并打造高性能前端应用，那么你就必须要搞清楚<strong>JavaScript的内存机制</strong>了。</p><p>其实，要搞清楚JavaScript的内存机制并不是一件很困难的事，在接下来的三篇文章（数据在内存中的存放、JavaScript处理垃圾回收以及V8执行代码）中，我们将通过内存机制的介绍，循序渐进带你走进JavaScript内存的世界。</p><p>今天我们讲述第一部分的内容——JavaScript中的数据是如何存储在内存中的。虽然JavaScript并不需要直接去管理内存，但是在实际项目中为了能避开一些不必要的坑，你还是需要了解数据在内存中的存储方式的。</p><h2>让人疑惑的代码</h2><p>首先，我们先看下面这两段代码：</p><pre><code>function foo(){\n    var a = 1\n    var b = a\n    a = 2\n    console.log(a)\n    console.log(b)\n}\nfoo()\n</code></pre><pre><code>function foo(){\n    var a = {name:&quot;极客时间&quot;}\n    var b = a\n    a.name = &quot;极客邦&quot; \n    console.log(a)\n    console.log(b)\n}\nfoo()\n</code></pre><p>若执行上述这两段代码，你知道它们输出的结果是什么吗？下面我们就来一个一个分析下。</p><p>执行第一段代码，打印出来a的值是2，b的值是1，这没什么难以理解的。</p><!-- [[[read_end]]] --><p>接着，再执行第二段代码，你会发现，仅仅改变了a中name的属性值，但是最终a和b打印出来的值都是<code>{name:\"极客邦\"}</code>。这就和我们预期的不一致了，因为我们想改变的仅仅是a的内容，但b的内容也同时被改变了。</p><p>要彻底弄清楚这个问题，我们就得先从“JavaScript是什么类型的语言”讲起。</p><h2>JavaScript是什么类型的语言</h2><p>每种编程语言都具有内建的数据类型，但它们的数据类型常有不同之处，使用方式也很不一样，比如C语言在定义变量之前，就需要确定变量的类型，你可以看下面这段C代码：</p><pre><code>int main()\n{\n   int a = 1;\n   char* b = &quot;极客时间&quot;;\n   bool c = true;\n   return 0;\n}\n</code></pre><p>上述代码声明变量的特点是：在声明变量之前需要先定义变量类型。<strong>我们把这种在使用之前就需要确认其变量数据类型的称为静态语言</strong>。</p><p><strong>相反地，我们把在运行过程中需要检查数据类型的语言称为动态语言</strong>。比如我们所讲的JavaScript就是动态语言，因为在声明变量之前并不需要确认其数据类型。</p><p>虽然C语言是静态，但是在C语言中，我们可以把其他类型数据赋予给一个声明好的变量，如：</p><pre><code>c = a\n</code></pre><p>前面代码中，我们把int型的变量a赋值给了bool型的变量c，这段代码也是可以编译执行的，因为在赋值过程中，C编译器会把int型的变量悄悄转换为bool型的变量，我们通常把这种偷偷转换的操作称为<strong>隐式类型转换</strong>。而<strong>支持隐式类型转换的语言称为弱类型语言，不支持隐式类型转换的语言称为强类型语言</strong>。在这点上，C和JavaScript都是弱类型语言。</p><p>对于各种语言的类型，你可以参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/36/f0/36f0f5bdce0a6d8c36cbb8a76931cff0.png?wh=1142*815\" alt=\"\"></p><center><span class=\"reference\">语言类型图</span></center><h2>JavaScript的数据类型</h2><p>现在我们知道了，<strong>JavaScript是一种弱类型的、动态的语言</strong>。那这些特点意味着什么呢？</p><ul>\n<li><strong>弱类型</strong>，意味着你不需要告诉JavaScript引擎这个或那个变量是什么数据类型，JavaScript引擎在运行代码的时候自己会计算出来。</li>\n<li><strong>动态</strong>，意味着你可以使用同一个变量保存不同类型的数据。</li>\n</ul><p>那么接下来，我们再来看看JavaScript的数据类型，你可以看下面这段代码：</p><pre><code>var bar\nbar = 12 \nbar = &quot;极客时间&quot;\nbar = true\nbar = null\nbar = {name:&quot;极客时间&quot;}\n</code></pre><p>从上述代码中你可以看出，我们声明了一个bar变量，然后可以使用各种类型的数据值赋予给该变量。</p><p>在JavaScript中，如果你想要查看一个变量到底是什么类型，可以使用“typeof”运算符。具体使用方式如下所示：</p><pre><code>var bar\nconsole.log(typeof bar)  //undefined\nbar = 12 \nconsole.log(typeof bar) //number\nbar = &quot;极客时间&quot;\nconsole.log(typeof bar)//string\nbar = true\nconsole.log(typeof bar) //boolean\nbar = null\nconsole.log(typeof bar) //object\nbar = {name:&quot;极客时间&quot;}\nconsole.log(typeof bar) //object\n</code></pre><p>执行这段代码，你可以看到打印出来了不同的数据类型，有undefined、number、boolean、object等。那么接下来我们就来谈谈JavaScript到底有多少种数据类型。</p><p>其实JavaScript中的数据类型一种有8种，它们分别是：</p><p><img src=\"https://static001.geekbang.org/resource/image/85/15/85b87602eac65356c9171bbd023f5715.png?wh=1142*648\" alt=\"\"></p><p>了解这些类型之后，还有三点需要你注意一下。</p><p>第一点，使用typeof检测Null类型时，返回的是Object。这是当初JavaScript语言的一个Bug，一直保留至今，之所以一直没修改过来，主要是为了兼容老的代码。</p><p>第二点，Object类型比较特殊，它是由上述7种类型组成的一个包含了key-value对的数据类型。如下所示：</p><pre><code>let myObj = {\n        name:'极客时间',\n        update:function(){....}\n        }\n</code></pre><p>从中你可以看出来，Object是由key-value组成的，其中的vaule可以是任何类型，包括函数，这也就意味着你可以通过Object来存储函数，Object中的函数又称为方法，比如上述代码中的update方法。</p><p>第三点，我们把前面的7种数据类型称为<strong>原始类型</strong>，把最后一个对象类型称为<strong>引用类型</strong>，之所以把它们区分为两种不同的类型，是因为它们在内存中存放的位置不一样。到底怎么个不一样法呢？接下来，我们就来讲解一下JavaScript的原始类型和引用类型到底是怎么储存的。</p><h2>内存空间</h2><p>要理解JavaScript在运行过程中数据是如何存储的，你就得先搞清楚其存储空间的种类。下面是我画的JavaScript的内存模型，你可以参考下：</p><p><img src=\"https://static001.geekbang.org/resource/image/62/57/6293f5315a5bafbd3ba00ee732bfbf57.png?wh=1142*1183\" alt=\"\"></p><center><span class=\"reference\">JavaScript内存模型</span></center><p>从图中可以看出， 在JavaScript的执行过程中， 主要有三种类型内存空间，分别是<strong>代码空间、栈空间</strong>和<strong>堆空间</strong>。</p><p>其中的代码空间主要是存储可执行代码的，这个我们后面再做介绍，今天主要来说说栈空间和堆空间。</p><h3>栈空间和堆空间</h3><p>这里的栈空间就是我们之前反复提及的调用栈，是用来存储执行上下文的。为了搞清楚栈空间是如何存储数据的，我们还是先看下面这段代码：</p><pre><code>function foo(){\n    var a = &quot;极客时间&quot;\n    var b = a\n    var c = {name:&quot;极客时间&quot;}\n    var d = c\n}\nfoo()\n</code></pre><p>前面文章我们已经讲解过了，当执行一段代码时，需要先编译，并创建执行上下文，然后再按照顺序执行代码。那么下面我们来看看，当执行到第3行代码时，其调用栈的状态，你可以参考下面这张调用栈状态图：</p><p><img src=\"https://static001.geekbang.org/resource/image/94/fe/9411221e463a86d043a3461d49c9f1fe.png?wh=1142*716\" alt=\"\"></p><center><span class=\"reference\">执行到第3行时的调用栈状态图</span></center><p>从图中可以看出来，当执行到第3行时，变量a和变量b的值都被保存在执行上下文中，而执行上下文又被压入到栈中，所以你也可以认为变量a和变量b的值都是存放在栈中的。</p><p>接下来继续执行第4行代码，由于JavaScript引擎判断右边的值是一个引用类型，这时候处理的情况就不一样了，JavaScript引擎并不是直接将该对象存放到变量环境中，而是将它分配到堆空间里面，分配后该对象会有一个在“堆”中的地址，然后再将该数据的地址写进c的变量值，最终分配好内存的示意图如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/22/bc/22100df5c75fb51037d7a929777c57bc.png?wh=1142*551\" alt=\"\"></p><center><span class=\"reference\">对象类型是“堆”来存储</span></center><p>从上图你可以清晰地观察到，对象类型是存放在堆空间的，在栈空间中只是保留了对象的引用地址，当JavaScript需要访问该数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手流程。</p><p>好了，现在你应该知道了<strong>原始类型的数据值都是直接保存在“栈”中的，引用类型的值是存放在“堆”中的</strong>。不过你也许会好奇，为什么一定要分“堆”和“栈”两个存储空间呢？所有数据直接存放在“栈”中不就可以了吗？</p><p>答案是不可以的。这是因为JavaScript引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。比如文中的foo函数执行结束了，JavaScript引擎需要离开当前的执行上下文，只需要将指针下移到上个执行上下文的地址就可以了，foo函数执行上下文栈区空间全部回收，具体过程你可以参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/7b/d7153d003a72dbd0a9ca84b59ac3857b.png?wh=1142*532\" alt=\"\"></p><center><span class=\"reference\">调用栈中切换执行上下文状态</span></center><p>所以<strong>通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据</strong>。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，<strong>堆空间很大，能存放很多大的数据</strong>，不过缺点是分配内存和回收内存都会占用一定的时间。</p><p>解释了程序在执行过程中为什么需要堆和栈两种数据结构后，我们还是回到示例代码那里，看看它最后一步将变量c赋值给变量d是怎么执行的？</p><p>在JavaScript中，赋值操作和其他语言有很大的不同，<strong>原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址</strong>。</p><p>所以<code>d=c</code>的操作就是把c的引用地址赋值给d，你可以参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/51/f5/51127624a725a18a0e12e0f5a7aadbf5.png?wh=1142*560\" alt=\"\"></p><center><span class=\"reference\">引用赋值</span></center><p>从图中你可以看到，变量c和变量d都指向了同一个堆中的对象，所以这就很好地解释了文章开头的那个问题，通过c修改name的值，变量d的值也跟着改变，归根结底它们是同一个对象。</p><h3>再谈闭包</h3><p>现在你知道了作用域内的原始类型数据会被存储到栈空间，引用类型会被存储到堆空间，基于这两点的认知，我们再深入一步，探讨下闭包的内存模型。</p><p>这里以<a href=\"https://time.geekbang.org/column/article/127495\">《10 | 作用域链和闭包 ：代码中出现相同的变量，JavaScript引擎是如何选择的？》</a>中关于闭包的一段代码为例：</p><pre><code>function foo() {\n    var myName = &quot;极客时间&quot;\n    let test1 = 1\n    const test2 = 2\n    var innerBar = { \n        setName:function(newName){\n            myName = newName\n        },\n        getName:function(){\n            console.log(test1)\n            return myName\n        }\n    }\n    return innerBar\n}\nvar bar = foo()\nbar.setName(&quot;极客邦&quot;)\nbar.getName()\nconsole.log(bar.getName())\n</code></pre><p>当执行这段代码的时候，你应该有过这样的分析：由于变量myName、test1、test2都是原始类型数据，所以在执行foo函数的时候，它们会被压入到调用栈中；当foo函数执行结束之后，调用栈中foo函数的执行上下文会被销毁，其内部变量myName、test1、test2也应该一同被销毁。</p><p>但是在<a href=\"https://time.geekbang.org/column/article/127495\">那篇文章</a>中，我们介绍了当foo函数的执行上下文销毁时，由于foo函数产生了闭包，所以变量myName和test1并没有被销毁，而是保存在内存中，那么应该如何解释这个现象呢？</p><p>要解释这个现象，我们就得站在内存模型的角度来分析这段代码的执行流程。</p><ol>\n<li>当JavaScript引擎执行到foo函数时，首先会编译，并创建一个空执行上下文。</li>\n<li>在编译过程中，遇到内部函数setName，JavaScript引擎还要对内部函数做一次快速的词法扫描，发现该内部函数引用了foo函数中的myName变量，由于是内部函数引用了外部函数的变量，所以JavaScript引擎判断这是一个闭包，于是在堆空间创建换一个“closure(foo)”的对象（这是一个内部对象，JavaScript是无法访问的），用来保存myName变量。</li>\n<li>接着继续扫描到getName方法时，发现该函数内部还引用变量test1，于是JavaScript引擎又将test1添加到“closure(foo)”对象中。这时候堆中的“closure(foo)”对象中就包含了myName和test1两个变量了。</li>\n<li>由于test2并没有被内部函数引用，所以test2依然保存在调用栈中。</li>\n</ol><p>通过上面的分析，我们可以画出执行到foo函数中“return innerBar”语句时的调用栈状态，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f9/db/f9dd29ff5371c247e10546393c904edb.png?wh=1142*564\" alt=\"\"></p><center><span class=\"reference\">闭包的产生过程</span></center><p>从上图你可以清晰地看出，当执行到foo函数时，闭包就产生了；当foo函数执行结束之后，返回的getName和setName方法都引用“closure(foo)”对象，所以即使foo函数退出了，“ closure(foo)”依然被其内部的getName和setName方法引用。所以在下次调用<code>bar.setName</code>或者<code>bar.getName</code>时，创建的执行上下文中就包含了“closure(foo)”。</p><p>总的来说，产生闭包的核心有两步：第一步是需要预扫描内部函数；第二步是把内部函数引用的外部变量保存到堆中。</p><h2>总结</h2><p>好了，今天就讲到这里，下面我来简单总结下今天的要点。</p><p>我们介绍了JavaScript中的8种数据类型，它们可以分为两大类——<strong>原始类型和引用类型</strong>。</p><p>其中，原始类型的数据是存放在<strong>栈</strong>中，引用类型的数据是存放在<strong>堆</strong>中的。堆中的数据是通过引用和变量关联起来的。也就是说，JavaScript的变量是没有数据类型的，值才有数据类型，变量可以随时持有任何类型的数据。</p><p>然后我们分析了，在JavaScript中将一个原始类型的变量a赋值给b，那么a和b会相互独立、互不影响；但是将引用类型的变量a赋值给变量b，那会导致a、b两个变量都同时指向了堆中的同一块数据。</p><p>最后，我们还站在内存模型的视角分析了闭包的产生过程。</p><h2>思考时间</h2><p>在实际的项目中，经常需要完整地拷贝一个对象，也就是说拷贝完成之后两个对象之间就不能互相影响。那该如何实现呢？</p><p>结合下面这段代码，你可以分析下它是如何将对象jack拷贝给jack2，然后在完成拷贝操作时两个jack还互不影响的呢。</p><pre><code>let jack = {\n    name : &quot;jack.ma&quot;,\n    age:40,\n    like:{\n        dog:{\n            color:'black',\n            age:3,\n        },\n        cat:{\n            color:'white',\n            age:2\n        }\n    }\n}\nfunction copy(src){\n    let dest\n    //实现拷贝代码，将src的值完整地拷贝给dest\n   //在这里实现\n    return dest\n}\nlet jack2 = copy(jack)\n\n//比如修改jack2中的内容，不会影响到jack中的值\njack2.like.dog.color = 'green'\nconsole.log(jack.like.dog.color) //打印出来的应该是 &quot;black&quot;\n</code></pre><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"11 | this：从JavaScript执行上下文的视角讲清楚this","id":128427},"right":{"article_title":"13 | 垃圾回收：垃圾数据是如何自动回收的？","id":131233}},"comments":[{"had_liked":false,"id":130796,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1567554073,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"1324417481241","product_id":100033601,"comment_content":"希望老师再开一个专栏专门讲JS，同学们顶上去","like_count":309,"discussions":[{"author":{"id":1377786,"avatar":"https://static001.geekbang.org/account/avatar/00/15/05/fa/7753d8ac.jpg","nickname":"cutemurphy","note":"","ucode":"1B10EECEB9085D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183695,"discussion_content":"确实讲的不错。其他人一直在讲上层概念 这个课程抽丝剥茧…","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1582508418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074336,"avatar":"https://static001.geekbang.org/account/avatar/00/10/64/a0/95c76200.jpg","nickname":"寰","note":"","ucode":"1C177E813ADA41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226242,"discussion_content":"是啊，在浏览器课程教js，是避重就轻吗？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1586429403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216341,"discussion_content":"好的，谢谢。是V8吗\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585437364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1293057,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/01/568ac2d6.jpg","nickname":"K4SHIFZ","note":"","ucode":"BFB49AAC0E4C74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164691,"discussion_content":"讲js的专栏有了，更深入","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581213315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1293057,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/01/568ac2d6.jpg","nickname":"K4SHIFZ","note":"","ucode":"BFB49AAC0E4C74","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212899,"discussion_content":"同学哪个专栏讲js更深入啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585031242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":164691,"ip_address":""},"score":212899,"extra":""},{"author":{"id":1293057,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/01/568ac2d6.jpg","nickname":"K4SHIFZ","note":"","ucode":"BFB49AAC0E4C74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213101,"discussion_content":"周爱民的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585051210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":212899,"ip_address":""},"score":213101,"extra":""},{"author":{"id":1765894,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/f2/06/ebb5b764.jpg","nickname":"NikkiZeng","note":"","ucode":"F669C811773394","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215444,"discussion_content":"老师已经出js的课程了，可以去搜了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585323314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":212899,"ip_address":""},"score":215444,"extra":""}]}]},{"had_liked":true,"id":129655,"user_name":"仰5卧0起坐","can_delete":false,"product_type":"c1","uid":1378459,"ip_address":"","ucode":"897AC2F51B0D67","user_header":"https://static001.geekbang.org/account/avatar/00/15/08/9b/d52c8610.jpg","comment_is_top":false,"comment_ctime":1567206040,"is_pvip":true,"replies":[{"id":"48362","content":"关于foo函数执行上下文销毁过程：foo函数执行结束之后，当前执行状态的指针下移到栈中的全局执行上下文的位置，foo函数的执行上下文的那块数据就挪出来，这也就是foo函数执行上下文的销毁过程，这个文中有提到，你可以参考“调用栈中切换执行上下文状态“图。<br><br>第二个问题：innerBar返回后，含有setName和getName对象，这两个对象里面包含了堆中的closure(foo)的引用。虽然foo执行上下文销毁了，foo函数中的对closure(foo)的引用也断开了，但是setName和getName里面又重新建立起来了对closure(foo)引用。<br><br>你可以：<br>1:打开“开发者工具”<br>2:在控制台执行上述代码<br>3:然后选择“Memory”标签，点击&quot;take snapshot&quot; 获取V8的堆内存快照。<br>4:然后“command+f&quot;(mac) 或者 &quot;ctrl+f&quot;(win),搜索“setName”，然后你就会发现setName对象下面包含了 raw_outer_scope_info_or_feedback_metadata，对闭包的引用数据就在这里面。","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1567214152,"ip_address":"","comment_id":129655,"utype":1}],"discussion_count":11,"race_medal":0,"score":"658697202328","product_id":100033601,"comment_content":"1、从内存模型角度分析执行代码的执行流程第二步看，在堆空间创建closure(foo)对象，它是存储在foo函数的执行上下文中的。<br>那么closure(foo)创建开始时是空对象，执行第三步的时候，才会逐渐把变量添加到其中。<br>2、当foo函数执行结束后，foo的执行上下文是不是销毁了？如果销毁了，产生一下两个疑问：<br>    a、如果foo函数执行上下文销毁了，closure(foo)并没有销毁，那foo函数执行上下文是怎么销毁的呢？就比如销毁一个盒子，盒子毁里，里面的东西应该也是毁掉的<br>    b、既然closure(foo)既然没有销毁，那它存储在堆中的什么地方呢？必定它所依赖的foo执行上下文已经不存在了","like_count":154,"discussions":[{"author":{"id":1624537,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","nickname":"Slowdive","note":"","ucode":"AF3429CE47C462","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227331,"discussion_content":"这个问题你还是要理解堆和栈，栈里只是存了指针， 没什么不能销毁的，销毁的是这个指针而不是地址里的内容","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1586484350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465588,"discussion_content":"关于foo函数执行上下文销毁过程：foo函数执行结束之后，当前执行状态的指针下移到栈中的全局执行上下文的位置，foo函数的执行上下文的那块数据就挪出来，这也就是foo函数执行上下文的销毁过程，这个文中有提到，你可以参考“调用栈中切换执行上下文状态“图。\n\n第二个问题：innerBar返回后，含有setName和getName对象，这两个对象里面包含了堆中的closure(foo)的引用。虽然foo执行上下文销毁了，foo函数中的对closure(foo)的引用也断开了，但是setName和getName里面又重新建立起来了对closure(foo)引用。\n\n你可以：\n1:打开“开发者工具”\n2:在控制台执行上述代码\n3:然后选择“Memory”标签，点击&amp;quot;take snapshot&amp;quot; 获取V8的堆内存快照。\n4:然后“command+f&amp;quot;(mac) 或者 &amp;quot;ctrl+f&amp;quot;(win),搜索“setName”，然后你就会发现setName对象下面包含了 raw_outer_scope_info_or_feedback_metadata，对闭包的引用数据就在这里面。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1567214152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1552587,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b0/cb/848f6aa0.jpg","nickname":"alessia","note":"","ucode":"9ADFC4FE3390DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587455,"discussion_content":"raw_outer_scope_info_or_feedback_metadata 这个没看到，setName搜到的是SetNamedPropertyExtraWideHandler builtin 这样的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663064578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064266,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/vkqibkINia6dxVOv5zia2zbkmQbrJUsQw8vDfiauib2DfyvJQ4PDUC7M8p4vqFiaQj70yYwIO8JlHFA450KPmgpsXlsw/132","nickname":"Geek_bing","note":"","ucode":"4000A30EDAF71C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388678,"discussion_content":"搜到了，也看到了raw_outer_scope_info_or_feedback_metadata， 里面有三个，myName test1 foo 这里面的内容怎么去看？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628908749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809953,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/xwTiccFyUn9f6t7UbwicIZ6KicWzFctVf0hsUabEfGbOPMgOA1qSRn8NQaDOxdJiaWoFEH8mK1xRN5jspjUZjpIQIw/132","nickname":"Geek_29ad5d","note":"","ucode":"417E632693C633","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296827,"discussion_content":"没找到raw_outer，为啥呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596677592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1503447,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f0/d7/82a2ffd4.jpg","nickname":"bingmo","note":"","ucode":"F92171460C0EA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283972,"discussion_content":"raw_outer_scope_info_or_feedback_metadata这个指针所指向的内容看不懂，求老师说明下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592408570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328142,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","nickname":"-_-|||","note":"","ucode":"94B21594658BF9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71767,"discussion_content":"compiled code 可以找到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575456603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1579987,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/9zDgoFiclCic368WIk5GQskZ0mvaZauiaWJOUz6kWGMFaer2FBAWuBibof43YFTO2O5m79cjAvloNAP9aicSo3gSnDg/132","nickname":"Geek_5541c1","note":"","ucode":"627947E7BED072","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41913,"discussion_content":"在当前页面的控制台输入上述的代码运行，快照中找不到setName","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572531173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045090,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f2/62/f873cd8f.jpg","nickname":"tongmin_tsai","note":"","ucode":"D9423E770D5846","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34354,"discussion_content":"raw_outer_scope_info_or_feedback_metadata，这个找不到，：（","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571195546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1377467,"avatar":"https://static001.geekbang.org/account/avatar/00/15/04/bb/5e5c37c1.jpg","nickname":"Angus","note":"","ucode":"7CC3BA1550FB5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7129,"discussion_content":"我倒是搜索到了这个，就是不知道怎么看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567394524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1499343,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e0/cf/08b04e00.jpg","nickname":"钟钟","note":"","ucode":"D1A11CC3EB7137","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7089,"discussion_content":"我这里搜索好像看不到这个，这里要这么才能搜索到？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567348460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129654,"user_name":"Marvin","can_delete":false,"product_type":"c1","uid":1096381,"ip_address":"","ucode":"443BD8B20285A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/ba/bd/6f2f078c.jpg","comment_is_top":false,"comment_ctime":1567205108,"is_pvip":false,"replies":[{"id":"48363","content":"挺好 继续","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1567214178,"ip_address":"","comment_id":129654,"utype":1}],"discussion_count":10,"race_medal":0,"score":"160480995060","product_id":100033601,"comment_content":"function copy(dest){<br>  if(typeof dest === &#39;object&#39;){<br>    if(!dest) return dest; &#47;&#47; null<br>    var obj = dest.constructor();  &#47;&#47; Object&#47;Array<br>    for(var key in dest){<br>      obj[key] = copy(dest[key])<br>    }<br>    return obj;<br>  } else {<br>    return dest;<br>  }<br>}","like_count":38,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465587,"discussion_content":"挺好 继续","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567214178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1425441,"avatar":"https://static001.geekbang.org/account/avatar/00/15/c0/21/0ab49889.jpg","nickname":"Alienover","note":"","ucode":"6DF98F5E38569E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208416,"discussion_content":"简单点浅复制😂😂\nlet obj2 = JSON.parse(JSON.stringify(obj1))","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584543788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020726,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/93/36/abb7bfe3.jpg","nickname":"Hhpon","note":"","ucode":"12FE37D4B67631","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1425441,"avatar":"https://static001.geekbang.org/account/avatar/00/15/c0/21/0ab49889.jpg","nickname":"Alienover","note":"","ucode":"6DF98F5E38569E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550283,"discussion_content":"这个方法会无意中改变数据类型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644467305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":208416,"ip_address":""},"score":550283,"extra":""}]},{"author":{"id":2278177,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c3/21/afad6560.jpg","nickname":"jonath","note":"","ucode":"F7DF0D1AACFAC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319545,"discussion_content":"再处理下循环引用的问题就完美了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604047041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1382114,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyiafLesAhyuicJZAhz9XGrG61455c3docOMhyLKMszjLMSBuasV3icuxmuSapjTLdHpNwiaUlAwTTCA/132","nickname":"nicola","note":"","ucode":"E60ED40AAC9D47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2278177,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c3/21/afad6560.jpg","nickname":"jonath","note":"","ucode":"F7DF0D1AACFAC4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365304,"discussion_content":"其实需要处理的还有很多，他这个例子只是最基础的，造一个可靠的deepClone，还需要处理：\n1、对象的递归引用\n2、特殊对象的处理（如Date）\n3、Symbol属性的处理\n还有上面用for in循环遍历属性，如果该对象某些属性的描述符为不可遍历，也是获取不到的","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1617767079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319545,"ip_address":""},"score":365304,"extra":""}]},{"author":{"id":1816697,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/b8/79/a4dbe9ee.jpg","nickname":"blueBean","note":"","ucode":"6A68D2414BD904","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192197,"discussion_content":"递归啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583068019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1377886,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/M5jrJZliboJoN9cNp0iahPqwXe3Zf6CUeiaUMYY8icRY0Hvw9wZ36USS6tP2KE16n2lf8W0IhNWiaoBHUYyrwoT0vrg/132","nickname":"love star","note":"","ucode":"11B0D208BA7C7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168239,"discussion_content":"确实很棒，但是constructor 有很小很小的概率被修改掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581563886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1374608,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/90/5cd5d680.jpg","nickname":"成","note":"","ucode":"1FBEFCD573A20E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37600,"discussion_content":"想问一下var obj = dest.constructor(); 这种用法叫啥，这个constructor不是一般只是作为构造函数的一个属性指向自己嘛，求指教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571643580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1096381,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ba/bd/6f2f078c.jpg","nickname":"Marvin","note":"","ucode":"443BD8B20285A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1374608,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/90/5cd5d680.jpg","nickname":"成","note":"","ucode":"1FBEFCD573A20E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39225,"discussion_content":"这里调用原型链构造函数，限定条件相当于制执行Array()或Object()构造一个复杂空对象。同时这俩有个特点，是不需要new。整个函数实际上有个限定条件，就是只对Object和Array做深copy，也就是JSON的数据结构范围。其他对象不递归，也没处理循环引用。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1571907855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37600,"ip_address":""},"score":39225,"extra":""}]},{"author":{"id":1624506,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/ba/f50e9ea4.jpg","nickname":"潘启宝","note":"","ucode":"8E697C7164F2E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7032,"discussion_content":"这个最棒了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567299051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161776,"user_name":"尝试者说","can_delete":false,"product_type":"c1","uid":1086570,"ip_address":"","ucode":"305ABCD369E7D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/6a/d40f64ec.jpg","comment_is_top":false,"comment_ctime":1576324955,"is_pvip":false,"replies":[{"id":"61640","content":"多谢哈，在准备V8的课程了","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1576392456,"ip_address":"","comment_id":161776,"utype":1}],"discussion_count":3,"race_medal":0,"score":"156195147611","product_id":100033601,"comment_content":"这门课程是我看过最好的课程，真的时候做到了深入浅出、行云流水、水银泻地般的境界。老师你多多开开前端的其他课程啊，保证很多人愿意来听课的。","like_count":37,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477854,"discussion_content":"多谢哈，在准备V8的课程了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576392456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2795247,"avatar":"","nickname":"Geek_30dd65","note":"","ucode":"AF5BB5AAB8FBAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400705,"discussion_content":"是的，感觉是看过最好的课程，醍醐灌顶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633395865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039904,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","nickname":"沧海一声笑","note":"","ucode":"5297F2F4736B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224131,"discussion_content":"V8课程好难啊哈哈哈 什么时候推出框架的知识点 设计模式也是需要的哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586271048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146267,"user_name":"烈日烹雪","can_delete":false,"product_type":"c1","uid":1666583,"ip_address":"","ucode":"6C9B8A6D79DA9C","user_header":"https://static001.geekbang.org/account/avatar/00/19/6e/17/d3d3ef14.jpg","comment_is_top":false,"comment_ctime":1572486298,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"139011439770","product_id":100033601,"comment_content":"老师，第二遍看时有了个疑问  字符串存在栈里，但是字符串与其他原始类型不同，不一定只占几个字节的长度。如果字符串特别长，长到好几M，也会存在栈里吗？","like_count":33,"discussions":[{"author":{"id":1293057,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/01/568ac2d6.jpg","nickname":"K4SHIFZ","note":"","ucode":"BFB49AAC0E4C74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164695,"discussion_content":"问得好，这个老师不会","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1581213849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2286113,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e2/21/60adf96b.jpg","nickname":"stone","note":"","ucode":"65816E57253D0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1293057,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/01/568ac2d6.jpg","nickname":"K4SHIFZ","note":"","ucode":"BFB49AAC0E4C74","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385943,"discussion_content":"哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627357291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":164695,"ip_address":""},"score":385943,"extra":""}]},{"author":{"id":2311402,"avatar":"https://static001.geekbang.org/account/avatar/00/23/44/ea/8a9b868d.jpg","nickname":"琼斯基亚","note":"","ucode":"24892258DF0CC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541256,"discussion_content":"看V8的课程就知道了，当数据足够大的时候是会被提升到堆中存储的，至于多大是大这个和自己的硬件有关，32位和64位有所不同","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640312214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622655,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/7f/7b22f12b.jpg","nickname":"乔","note":"","ucode":"1286F8742B4A01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247583,"discussion_content":"我用图片转base64码做了实验，发现两个变量都引用同一串base64字符的时候，内存占用不是两倍","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587818124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1553770,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b5/6a/152f71a5.jpg","nickname":"嘉成","note":"","ucode":"79612CDF23C2AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1622655,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/7f/7b22f12b.jpg","nickname":"乔","note":"","ucode":"1286F8742B4A01","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267993,"discussion_content":"问一下内存占用是怎么看的呢   node  process  memory吗\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589721420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":247583,"ip_address":""},"score":267993,"extra":""}]},{"author":{"id":1788356,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIMf8QPPOZePEzicZKNHWyfgTaRdnWbQwg8aO2TIwzQXBCnGjXOQY4VzLk7PV1jGAQnGSdH81qVicNg/132","nickname":"李广","note":"","ucode":"EBDF6631F03BE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410871,"discussion_content":"https://blog.csdn.net/qianyu6200430/article/details/120426595  推荐这篇文章，保证解决你的疑惑","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635782968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2194683,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIia8vbJEhpFlu4ppkwRNJxibRBZ9rnPFL5gevWN7VmKCYdQEB64QnlMEiahLNoKt6KH7IjDXs7yXomg/132","nickname":"李乐勇","note":"","ucode":"0314C148C68B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366003,"discussion_content":"老师来解答下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617939014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2007774,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/a2/de/84f2754d.jpg","nickname":"旗鼓相当的对手","note":"","ucode":"D80BE6E12FF2CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297107,"discussion_content":"说明你还要看第三遍\n原文\n从图中可以看出来，当执行到第 3 行时，变量 a 和变量 b 的值都被保存在执行上下文中，而执行上下文又被压入到栈中，所以你也可以认为变量 a 和变量 b 的值都是存放在栈中的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596778360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622655,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/7f/7b22f12b.jpg","nickname":"乔","note":"","ucode":"1286F8742B4A01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247578,"discussion_content":"我也想问这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587818036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1374608,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/90/5cd5d680.jpg","nickname":"成","note":"","ucode":"1FBEFCD573A20E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223621,"discussion_content":"我也想问这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586240640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129759,"user_name":"柒月","can_delete":false,"product_type":"c1","uid":1371240,"ip_address":"","ucode":"839A8F88C376A3","user_header":"https://static001.geekbang.org/account/avatar/00/14/ec/68/06d59613.jpg","comment_is_top":false,"comment_ctime":1567241379,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"126121292963","product_id":100033601,"comment_content":"最近面试老问这个问题，什么是深拷贝和浅拷贝以及如何实现一个深拷贝？<br>1、JSON.parse(JSON.stringify(obj))<br>2、递归遍历对象<br>3、Object.assigin() 这种方法只能拷贝一层，有嵌套的情况就不适用了。<br>","like_count":29,"discussions":[{"author":{"id":1629364,"avatar":"","nickname":"Geek_5cb157","note":"","ucode":"1C1361DCF34763","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7688,"discussion_content":"1有问题，不能拷贝function","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1567614320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1903203,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0a/63/35ae2c7a.jpg","nickname":"陈文涛","note":"","ucode":"F2F5ACD7794D3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1629364,"avatar":"","nickname":"Geek_5cb157","note":"","ucode":"1C1361DCF34763","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206021,"discussion_content":"第一种拷贝有四个缺点：1.Date序列化的结果是字符串，还原之后还是字符串 2.Function、RegExp、Error对象和undefined值不能序列化和还原 3.NaN、Infinity、-Infinity序列化的结果是空 4.只能序列化对象可枚举属性","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1584363547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7688,"ip_address":""},"score":206021,"extra":""}]},{"author":{"id":1579987,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/9zDgoFiclCic368WIk5GQskZ0mvaZauiaWJOUz6kWGMFaer2FBAWuBibof43YFTO2O5m79cjAvloNAP9aicSo3gSnDg/132","nickname":"Geek_5541c1","note":"","ucode":"627947E7BED072","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41911,"discussion_content":"lodash 的 deepClone 了解下，里面做了很多类型的判断","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572530931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1631282,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJD6uiagY4Hic6wHVQugoMPaeiaBR0CY9ANmW4KXA220CXNN6ErOE81XqW5RPhXlubfKe3FTnCXF9spg/132","nickname":"Geek_kris","note":"","ucode":"5D5EB2C9053AA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1579987,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/9zDgoFiclCic368WIk5GQskZ0mvaZauiaWJOUz6kWGMFaer2FBAWuBibof43YFTO2O5m79cjAvloNAP9aicSo3gSnDg/132","nickname":"Geek_5541c1","note":"","ucode":"627947E7BED072","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":324273,"discussion_content":"cloneDeep","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605084305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41911,"ip_address":""},"score":324273,"extra":""}]},{"author":{"id":1817289,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ba/c9/37a1d853.jpg","nickname":"百步飞剑","note":"","ucode":"11197E4C0EDA34","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540576,"discussion_content":"4.let newObj = { ...preObj }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640085524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351094,"avatar":"","nickname":"Louis","note":"","ucode":"891D9EDD6D2851","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24786,"discussion_content":"1循环拷贝也有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570262962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235301,"user_name":"sellardoor","can_delete":false,"product_type":"c1","uid":2067291,"ip_address":"","ucode":"7FC1AB789E2C3D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/8b/5b/51e99f88.jpg","comment_is_top":false,"comment_ctime":1594967360,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"96084247872","product_id":100033601,"comment_content":"字符串，symbol，bigint虽然是原始类型，但是实际还是存放在堆空间的。<br>比如字符串的大小可能很大，考虑性能还是存放在堆空间。<br>具体浏览器控制台 =&gt; memory =&gt; 打印快照，在heal里搜索string，可以发现字符串在堆空间<br>这个问题，网上基本都是错的，也很少有文档数据介绍，最新的绿皮书有提到","like_count":23,"discussions":[{"author":{"id":2086825,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL7uzzeFTnYxgeqsibzUFSxiblnv0qibkN8eCIGgfSCpfT4oygtcTrPM7Wb6YIR6RXfMhdDYcPXG7rCA/132","nickname":"lcssptz","note":"","ucode":"10A7BCC37E935D","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338148,"discussion_content":"感谢您的解答","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609202794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2425973,"avatar":"","nickname":"Geek_20dc1d","note":"","ucode":"5CDC23AED16AA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586034,"discussion_content":"哪本绿皮书有提到呢 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661942658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098566,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/46/308c3958.jpg","nickname":"不蒸馒头","note":"","ucode":"EB26EC2B9CFC6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542845,"discussion_content":"请问相关资料是哪本？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640860140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2801818,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/c0/9a/c2217ef2.jpg","nickname":"asdfghjkl","note":"","ucode":"6941A96865949B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409713,"discussion_content":"var aaa = &#34;A啊&#34;\nvar bbb = &#34;A啊&#34;\nundefined\naaa === bbb\ntrue\n\nvar a = {1:1}\nvar b = {1:1}\nundefined\na === b\nfalse\n\n怎么解释啊？?  烦死了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635494168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2064184,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7f/38/28260b58.jpg","nickname":"琉璃杯中香茗仙","note":"","ucode":"46354E79BA7E4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2801818,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/c0/9a/c2217ef2.jpg","nickname":"asdfghjkl","note":"","ucode":"6941A96865949B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577199,"discussion_content":"a和b是两个不同的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655968420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":409713,"ip_address":""},"score":577199,"extra":""}]},{"author":{"id":1393768,"avatar":"https://static001.geekbang.org/account/avatar/00/15/44/68/71b47fd7.jpg","nickname":"行无忌","note":"","ucode":"E4DAA48AA0D7F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371955,"discussion_content":"请问绿皮书指的是哪本，想查阅一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620099510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1402786,"avatar":"https://static001.geekbang.org/account/avatar/00/15/67/a2/62cc52c7.jpg","nickname":"pending","note":"","ucode":"32686ED49B6855","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363170,"discussion_content":"有相关资料链接可以发一下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617118516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2067291,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8b/5b/51e99f88.jpg","nickname":"sellardoor","note":"","ucode":"7FC1AB789E2C3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291834,"discussion_content":"heap","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594967930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129728,"user_name":"李懂","can_delete":false,"product_type":"c1","uid":1330436,"ip_address":"","ucode":"539E6639042C88","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/04/5e0d3713.jpg","comment_is_top":false,"comment_ctime":1567232497,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"78876643825","product_id":100033601,"comment_content":"这里讲解的真好，闭包果然不是在栈中存储的，消除了我一直以来的疑惑，上下文销毁后闭包去哪了！<br>现在还有个问题，setname方法是通过什么引用闭包的，是存在内部变量么？","like_count":18,"discussions":[{"author":{"id":1020746,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/93/4a/de82f373.jpg","nickname":"AICC","note":"","ucode":"C1D18B1E8B2DCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7724,"discussion_content":"闭包是外部函数的变量集合，内部函数setname保留着对外部函数的变量引用，这个变量引用指向了堆内存中的closeure(foo)，其实你的问题就已经给出了结论","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1567652183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168666,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZO2lNDlECbEc1Ykkne3nfaXSJunnJa5ia0IWLLdcibrXdtVmjMEpdUWaUHx67ArRw35taAgfaYt9PO3aR73Sl8w/132","nickname":"zhaozigang","note":"","ucode":"4F05977DB5380A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309857,"discussion_content":"getName的执行上下文环境中的变量环境中存着指向堆内存closeure(foo)的变量","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601467489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2429215,"avatar":"https://static001.geekbang.org/account/avatar/00/25/11/1f/e9e108ea.jpg","nickname":"龚建民","note":"","ucode":"E6E12CD6E59F42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1168666,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZO2lNDlECbEc1Ykkne3nfaXSJunnJa5ia0IWLLdcibrXdtVmjMEpdUWaUHx67ArRw35taAgfaYt9PO3aR73Sl8w/132","nickname":"zhaozigang","note":"","ucode":"4F05977DB5380A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348907,"discussion_content":"你这个说法有问题，js高级程序设计中提到内层函数的[[Scope]]属性保存的作用域链中包含了对外层函数的活动对象（活动对象是执行上下文的一部分，与this、作用域链共同构成执行上下文）的引用，所以外层函数的活动对象不会被销毁，内存中闭包的索引是存放在活动对象的。不过这个说法和老师说的保存clourse(foo)好像有一些区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612772680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309857,"ip_address":""},"score":348907,"extra":""},{"author":{"id":2374581,"avatar":"https://static001.geekbang.org/account/avatar/00/24/3b/b5/c6eea696.jpg","nickname":"TyrionJ","note":"","ucode":"CBB10E57538E6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2429215,"avatar":"https://static001.geekbang.org/account/avatar/00/25/11/1f/e9e108ea.jpg","nickname":"龚建民","note":"","ucode":"E6E12CD6E59F42","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557142,"discussion_content":"我在谷歌浏览器中调试发下，在执行setName的时候，scope中有clousre(foo)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647676261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348907,"ip_address":""},"score":557142,"extra":""}]},{"author":{"id":1958109,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/LLzqOoaSOZp1GeoDFWUiaU3IVniaGDk75JvGib3HVMF4M9Me6gkQB6yy81Q06LIgCooib3ibx44KZ95GeO3qOXoehrw/132","nickname":"sakura","note":"","ucode":"19853DC8C53529","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261057,"discussion_content":"setname的作用域[[Scopes]]中有Closure(foo)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588935414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129746,"user_name":"ChaoZzz","can_delete":false,"product_type":"c1","uid":1007680,"ip_address":"","ucode":"E338FEF55D9BAA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/40/e6d4c1b4.jpg","comment_is_top":false,"comment_ctime":1567238713,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"70286715449","product_id":100033601,"comment_content":"1. JSON.parse(JSON.stringify(...))<br><br>function copy(src){<br>\tlet dest;<br>\tdest = JSON.parse(JSON.stringify(src));<br>\treturn dest;<br>}<br>缺点：无法拷贝函数<br><br>2. Object.assign({}, source)<br><br>function copy(src){<br>\tlet dest;<br>\tdest = Object.assign({}, src);<br>\treturn dest;<br>}<br>缺点：只能拷贝一层<br><br>3. function copy(src) {<br>\tlet dest;<br>        if (typeof src !== &#39;object&#39;) return ;<br>        dest = src instanceof Array ? [] : {};<br>        for (let key of Object.keys(src)) {<br>            dest[key] = typeof src[key] === &#39;object&#39; ? deepCopy(src[key]) : src[key];<br>        }<br>        return dest;<br>}<br>","like_count":16,"discussions":[{"author":{"id":2056450,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/61/02/6ccf315c.jpg","nickname":"A.     成事在天","note":"","ucode":"0B069A8EAD0E9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323106,"discussion_content":"3也没有deepCopy函数啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604886860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1634416,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f0/70/a6306bbb.jpg","nickname":"wtl","note":"","ucode":"F7FE9A5A3D825D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7093,"discussion_content":"3缺点：没有解决循环引用问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567357396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129659,"user_name":"Lx","can_delete":false,"product_type":"c1","uid":1632217,"ip_address":"","ucode":"90F4EEE985A9B0","user_header":"https://static001.geekbang.org/account/avatar/00/18/e7/d9/83d1346c.jpg","comment_is_top":false,"comment_ctime":1567210121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53106817673","product_id":100033601,"comment_content":"老师，后续是否会谅解下devtools做内存分析？基本用法会，但具体分析问题不知道怎么弄……","like_count":12},{"had_liked":false,"id":206286,"user_name":"伟伟","can_delete":false,"product_type":"c1","uid":1450367,"ip_address":"","ucode":"59BE820B03B97F","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/7f/efda2a64.jpg","comment_is_top":false,"comment_ctime":1586834642,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"44536507602","product_id":100033601,"comment_content":"终于理解闭包了，这名字是谁起的？叫圈多好，或者叫代码圈","like_count":10,"discussions":[{"author":{"id":1862271,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/nvWeOicPyIbAVkQnt4omOibkzZpG3AxSKy5CH1LicumpucX8hp4gZVSicKm1wnua6uuCRbHdXibh4FQLqLskqtoKiagg/132","nickname":"hsiang271828","note":"","ucode":"5453512A953D0A","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590916,"discussion_content":"圈，别说，还真挺好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666166675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2680684,"avatar":"https://static001.geekbang.org/account/avatar/00/28/e7/6c/437a37dc.jpg","nickname":"出发水母田","note":"","ucode":"79EB3BEDF35EFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550500,"discussion_content":"不好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644570231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1231317,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c9/d5/b08a27ed.jpg","nickname":"灵感_idea","note":"","ucode":"E0DBDDFA6040F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340477,"discussion_content":"我也这么认为，这个概念理解的最大难度就从名字开始的，万恶的..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610012623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134230,"user_name":"XWL","can_delete":false,"product_type":"c1","uid":1597186,"ip_address":"","ucode":"5D3988791C60AF","user_header":"https://static001.geekbang.org/account/avatar/00/18/5f/02/f8a80843.jpg","comment_is_top":false,"comment_ctime":1568778546,"is_pvip":false,"replies":[{"id":"51506","content":"函数就是一种特别的对象，所以会保存在堆上，编译函数时，这个函数的已经存在于堆中了！<br><br>第二个问题返回了c对象的话，那么说明全局环境对c对象有引用，既然有引用那么就不会被垃圾回收器标记出来，所以c对象也就不会回收！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1568809195,"ip_address":"","comment_id":134230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44518451506","product_id":100033601,"comment_content":"老师，我有几个疑问：<br>1、Function 函数类型也是继承于Object，声明函数后是不是也是存在堆空间中的，那么浏览器编译函数时是不是会同时创建执行上下文和向堆空间中压入一个值<br>2、function a(){<br>            var b = 1;<br>            var c = {<br>                    d: 2<br>            };<br>     }<br>     当 a 的执行上下文销毁后，c 对象在堆空间中的引用会跟着销毁么，将 c 返回出去或不返回，会不会是不一样的情况","like_count":10,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467661,"discussion_content":"函数就是一种特别的对象，所以会保存在堆上，编译函数时，这个函数的已经存在于堆中了！\n\n第二个问题返回了c对象的话，那么说明全局环境对c对象有引用，既然有引用那么就不会被垃圾回收器标记出来，所以c对象也就不会回收！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568809195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240795,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1597067820,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23071904300","product_id":100033601,"comment_content":"引擎在编译时做词法分析时，如果发现内部函数引用了外部函数的变量，就认为它是闭包，会在堆中创建一个closure对象，并把其中访问的所有变量都放进这个对象里，然后把这个closure对象的地址返回给上级上下文的变量。","like_count":5},{"had_liked":false,"id":330833,"user_name":"Kids See Ghost","can_delete":false,"product_type":"c1","uid":1390088,"ip_address":"","ucode":"DA57BB8327BB01","user_header":"https://static001.geekbang.org/account/avatar/00/15/36/08/c77d8a5a.jpg","comment_is_top":false,"comment_ctime":1642209541,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18822078725","product_id":100033601,"comment_content":"想指出几个问题。还希望作者别把这条留言屏蔽掉：<br>1. “原始类型的数据是存放在栈中，引用类型的数据是存放在堆中的” 这是不对的，至少v8不是这样。除了小的整数之外(Smi), 其他类型，包括string，都是在Heap上。另外像数字类型，很多时候也是在Heap上。具体参考: https:&#47;&#47;v8.dev&#47;blog&#47;react-cliff <br>&quot;For small integers in the 31-bit signed integer range, V8 uses a special representation called Smi. Anything that is not a Smi is represented as a HeapObject, which is the address of some entity in memory. &quot;<br>这里v8的文档里面也有讲： https:&#47;&#47;developer.chrome.com&#47;docs&#47;devtools&#47;memory-problems&#47;memory-101&#47;#javascript_object_representation<br><br>&quot;原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。&quot; 这也是错的。因为string interning的存在，string literals都存在constant pool里，`const a = &#39;foo&#39;; const b = `foo` 这里内存里面不会有两个字符串`foo`, 被复制不是string的值，而是constant pool pointer. <br><br>这些在v8的design doc里面有讲。https:&#47;&#47;docs.google.com&#47;document&#47;d&#47;11T2CRex9hXxoJwbYqVQ32yIPMh0uouUZLdyrtmMoL44&#47;edit#","like_count":5,"discussions":[{"author":{"id":2346098,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cc/72/8adc3d99.jpg","nickname":"初六🌌","note":"","ucode":"0595E5AC1A5582","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549371,"discussion_content":"对的，字符串不是存在栈中，字符串是根据hash值区分的，例如@9527和@9528这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643895692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195178,"user_name":"手撕蚊子","can_delete":false,"product_type":"c1","uid":1703119,"ip_address":"","ucode":"86BF3E7D6F79A4","user_header":"https://static001.geekbang.org/account/avatar/00/19/fc/cf/7358d1d6.jpg","comment_is_top":false,"comment_ctime":1585144160,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"18765013344","product_id":100033601,"comment_content":"文中图：《闭包的产生过程》中，clourse(foo)中的变量test1是由let声明的<br>在没有闭包的时候，按照第九章的解释，test1应存于foo执行上下文的词法环境中，<br>那在其处于闭包对象的条件下，怎么维持这种块级作用域的生效呢？<br>以下这段代码在chrome里打断点，scope里面是没有生成Closure而是一个Block,请问怎么理解这个问题呢？<br>function foo() {<br>      let x = 1<br>      {<br>        let x = 2<br>        function bar(params) {<br>          return x<br>        }<br>      }<br>      console.log(&#39;a&#39;, x)<br>      return bar<br>    }<br>    const fn = foo()<br>    console.log(&#39;b&#39;, fn())","like_count":4,"discussions":[{"author":{"id":1039904,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","nickname":"沧海一声笑","note":"","ucode":"5297F2F4736B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224166,"discussion_content":"我来解答下，首先得明白老师所讲的闭包的概念，另外上述代码function foo() {\n    let y = 1\n    {\n      let x = 2\n      function bar(params) {\n        debugger\n        return y\n      }\n    }\n    console.log(&#39;a&#39;, y)\n    return bar\n  }\n  const fn = foo()\n  console.log(&#39;b&#39;, fn())\n\n改写成这样你就明白了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586271832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1508809,"avatar":"https://static001.geekbang.org/account/avatar/00/17/05/c9/637ca6a6.jpg","nickname":"空空Ryan","note":"","ucode":"37146A69CF5434","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538660,"discussion_content":"同问，是没有产生闭包，但也不是在bar自己的词法环境里找到的x，看开发者工具的作用域链，是在其上层的block作用域里找到了x，所以为什么block里的变量x没有被销毁，而产生了跟闭包差不多的效果呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639475773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2286113,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e2/21/60adf96b.jpg","nickname":"stone","note":"","ucode":"65816E57253D0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386148,"discussion_content":"没有产生闭包","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627442808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1374421,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f8/d5/fd04fcbc.jpg","nickname":"Kite","note":"","ucode":"9DACE8E0EC84A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249137,"discussion_content":"根据闭包的产生条件，这里没有产生闭包，因为 bar 在自己的词法环境里找到了它需要的 x。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587910950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1480732,"avatar":"https://static001.geekbang.org/account/avatar/00/16/98/1c/d7a1439e.jpg","nickname":"KaKaKa","note":"","ucode":"07D1980A71F321","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219701,"discussion_content":"同问，知道了回复我一下~，多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585796992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134650,"user_name":"浪里行舟","can_delete":false,"product_type":"c1","uid":1430382,"ip_address":"","ucode":"23D7E1C4DD5221","user_header":"https://static001.geekbang.org/account/avatar/00/15/d3/6e/7b6a9d91.jpg","comment_is_top":false,"comment_ctime":1568886563,"is_pvip":false,"replies":[{"id":"51634","content":"macos的keynote","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1568888364,"ip_address":"","comment_id":134650,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18748755747","product_id":100033601,"comment_content":"老师，专栏的配图怎么画出来的","like_count":4,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467846,"discussion_content":"macos的keynote","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568888364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/57/a9/9abbe7a4.jpg","nickname":"神三元","note":"","ucode":"0FB2E7C0683599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48065,"discussion_content":"巧了。在这遇到你了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573445258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213170,"discussion_content":"看到掘金2个大神作者嘞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585057254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204828,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1586480149,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14471382037","product_id":100033601,"comment_content":"闭包是放入了堆空间，这是在foo的编译阶段。在执行setname时编译setname，这时候之前放入堆里的闭包又是怎么被找到的呢？","like_count":3,"discussions":[{"author":{"id":1374421,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f8/d5/fd04fcbc.jpg","nickname":"Kite","note":"","ucode":"9DACE8E0EC84A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249140,"discussion_content":"对内部的函数做词法扫描的时候就绑定了某个指针指向吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587911056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2510131,"avatar":"https://static001.geekbang.org/account/avatar/00/26/4d/33/b33daca6.jpg","nickname":"enne","note":"","ucode":"A4D21496F16206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1374421,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f8/d5/fd04fcbc.jpg","nickname":"Kite","note":"","ucode":"9DACE8E0EC84A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359123,"discussion_content":"嗯嗯，有道理，下面是我的想法。\n遇到变量之所以有查找过程，是因为该变量的地址还没确定，需要通过作用域链来查找正确的地址，但是闭包中的变量的地址是确定的，就不在需要再查找作用域了，直接将闭包中地址写在了执行代码中，正是由于该地址引用，gc时才不会将闭包销毁。所以从内存模型来理解闭包的话，闭包就是堆中一块地址，且该地址只能被引用的函数持有。从语言角度理解的话，闭包是堆内存+引用函数，也就说的过去了。毕竟除了引用函数，没有谁可以再访问这块内存了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616119430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249140,"ip_address":""},"score":359123,"extra":""}]}]},{"had_liked":false,"id":129665,"user_name":"mfist","can_delete":false,"product_type":"c1","uid":1373624,"ip_address":"","ucode":"4F99F422C23FB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","comment_is_top":false,"comment_ctime":1567212547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14452114435","product_id":100033601,"comment_content":"1.  dest = JSON.parse(JSON.stringify(src))<br><br>2. function copy(src){<br>  let type = typeof src<br>  if(&#39;object&#39; === type){<br>    let result = Object.create(null)<br>    for(let i in src){<br>        if(typeof src[i] === &#39;object&#39;){<br>          result[i] = copy(src[i])<br>        }else{<br>          result[i] = src[i]<br>        }<br>    }<br>    return result<br>  }<br><br>  return src<br>}<br><br>3. 今日总结<br>javascript的内存机制主要包括数据的存放、垃圾回收、代码的执行三个部分 这一节主要介绍数据的存放，javascript作为一种动态弱类型语言（动态静态是指使用之前是否确定数据类型，强弱类型是指是否支持隐式类型转换）其在内存空间存储有三个部分：代码空间（存储可执行代码）、栈空间（存储基本数据类型）、堆空间（对象）。闭包(Closure)中的变量存放在哪里呢？内部函数引用外部函数变量时候引擎会在堆空间中创建一个closure对象存放闭包变量。<br>","like_count":3},{"had_liked":false,"id":229645,"user_name":"luwei","can_delete":false,"product_type":"c1","uid":1365541,"ip_address":"","ucode":"0960A09F7B8D59","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/25/a95a2064.jpg","comment_is_top":false,"comment_ctime":1593084267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183018859","product_id":100033601,"comment_content":"如果字符串是存储在栈内的，并且根据数据类型那里的介绍，js中的字符串是不可变的，那么var a = &#39;aaa&#39;; a = &#39;bbb&#39; 这个操作在栈内的操作是什么样的","like_count":2},{"had_liked":false,"id":218407,"user_name":"张萌","can_delete":false,"product_type":"c1","uid":1377299,"ip_address":"","ucode":"89C08DB3239BE5","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/13/84d35588.jpg","comment_is_top":false,"comment_ctime":1589798469,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10179733061","product_id":100033601,"comment_content":"&#47;&#47; 深拷贝函数<br>function deepclone(obj) {<br>  if (typeof obj !== &#39;object&#39; || obj == null) {<br>    return obj; <br>  }<br>  const result = obj instanceof Array ? [] : {};<br>  for (const key in obj) {<br>    if (obj.hasOwnProperty(key)) {<br>      result[key] = deepclone(obj[key]);<br>    }<br>  }<br>  return result;<br>}","like_count":2,"discussions":[{"author":{"id":2864708,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ibUJTHFt6ZooQnic5RpYOgk4VlbJiasIoichFkyTsTysZcUwXhFE5J7UFpFy1CibFicUgDJI7cc6T1icUlX0t4bDt8acA/132","nickname":"Geek_6c9269","note":"","ucode":"7FAFFCCAFDABEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538726,"discussion_content":"上边的解答没看懂，你这个，看懂了，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639493513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131794,"user_name":"Elmer","can_delete":false,"product_type":"c1","uid":1233975,"ip_address":"","ucode":"61FC9CE0BA5BC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/37/528a43e7.jpg","comment_is_top":false,"comment_ctime":1567909640,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10157844232","product_id":100033601,"comment_content":"请问从内存角度如何分析闭包是如何进行链式查找变量的。<br>比如：<br>function test () {<br> var a = 1;<br>return function () {var b=2; return function(){console.log(a,b)}}<br>}<br>test()()()会答应出1 2 <br>从内存的角度如何分析1是怎么找到的，才想闭包也有链的机制？","like_count":1},{"had_liked":false,"id":217766,"user_name":"好好好","can_delete":false,"product_type":"c1","uid":1546855,"ip_address":"","ucode":"EE1878ADC840B6","user_header":"https://static001.geekbang.org/account/avatar/00/17/9a/67/73f384f9.jpg","comment_is_top":false,"comment_ctime":1589608183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884575479","product_id":100033601,"comment_content":"老师，闭包的例子，用let和const 声明的变量不是应该放在词法环境中吗","like_count":1},{"had_liked":false,"id":201760,"user_name":"沧海一声笑","can_delete":false,"product_type":"c1","uid":1039904,"ip_address":"","ucode":"5297F2F4736B63","user_header":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","comment_is_top":false,"comment_ctime":1585833964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880801260","product_id":100033601,"comment_content":"醍醐灌顶啊 感谢老师","like_count":1},{"had_liked":false,"id":181494,"user_name":"孟豪","can_delete":false,"product_type":"c1","uid":1427958,"ip_address":"","ucode":"644615E6AE7884","user_header":"https://static001.geekbang.org/account/avatar/00/15/c9/f6/bb90d35f.jpg","comment_is_top":false,"comment_ctime":1582552004,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5877519300","product_id":100033601,"comment_content":"一个小问题请教下：<br>参考章节：09 | 块级作用域：var缺陷以及为什么要引入let和const？<br>图：闭包的产生过程，const test2 变量应该在词法环境中，而不是在变量环境中","like_count":1,"discussions":[{"author":{"id":1742972,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/98/7c/07e6e7b7.jpg","nickname":"Tim","note":"","ucode":"F51593465157E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197254,"discussion_content":"仔细！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583415362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171942,"user_name":"Tim","can_delete":false,"product_type":"c1","uid":1742972,"ip_address":"","ucode":"F51593465157E4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/98/7c/07e6e7b7.jpg","comment_is_top":false,"comment_ctime":1579056504,"is_pvip":false,"replies":[{"id":"66665","content":"看来我有必要重新解释一下静态类型和动态类型，强类型和弱类型的区别了！<br><br>要理解一门语言是静态类型还是动态类型，最本质的判断方法是看在什么时间段对类型就行检测，静态类型的语言会在编译阶段就行检测，动态类型的语言会在运行时做类型检测！<br><br>比如C&#47;C++是静态语言，会在编译阶段对类型就行检测，如果检测到不合法的语言，编译阶段就会报错！<br><br>而JavaScript就是动态语言，编译阶段不会做太多类型检测，而是等到运行时再检测变量的具体类型，这是动态语言性能低于静态语言的一个关键的地方。V8对这种动态性做了大量的优化！<br><br>要理解一门语言是弱类型还是强类型，看变量在运行时，是否能够改变类型，比如C&#47;c++&#47;javaScript,都可以在运行时将一种类型的变量，改成另外一种类型的，所以他们是弱类型，而JAVA就不能运行过程中修改变量类型，所以是静态语言！<br><br>你再结合这两点看文中的内容！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1579062525,"ip_address":"","comment_id":171942,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5874023800","product_id":100033601,"comment_content":"原文：&quot;弱类型 : 意味着你不需要告诉 JavaScript 引擎这个或那个变量是什么数据类型，JavaScript 引擎在运行代码的时候自己会计算出来。动态 : 意味着你可以使用同一个变量保存不同类型的数据。&quot;<br><br>与上文对「弱类型」、「动态」的解释正好相反了，在上文解释中提到了，一个布尔类型的变量可以被一个字符串类型变量赋值，会进行「隐式转换」，这叫做「弱类型语言」。而动态语言老师的解释是不需要定义变量是什么数据类型。<br>所以老师文中对这两种概念的「总结」（也就是我评论引用的原文）弄反了，不知道理解的对不对。<br>","like_count":1,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481556,"discussion_content":"看来我有必要重新解释一下静态类型和动态类型，强类型和弱类型的区别了！\n\n要理解一门语言是静态类型还是动态类型，最本质的判断方法是看在什么时间段对类型就行检测，静态类型的语言会在编译阶段就行检测，动态类型的语言会在运行时做类型检测！\n\n比如C/C++是静态语言，会在编译阶段对类型就行检测，如果检测到不合法的语言，编译阶段就会报错！\n\n而JavaScript就是动态语言，编译阶段不会做太多类型检测，而是等到运行时再检测变量的具体类型，这是动态语言性能低于静态语言的一个关键的地方。V8对这种动态性做了大量的优化！\n\n要理解一门语言是弱类型还是强类型，看变量在运行时，是否能够改变类型，比如C/c++/javaScript,都可以在运行时将一种类型的变量，改成另外一种类型的，所以他们是弱类型，而JAVA就不能运行过程中修改变量类型，所以是静态语言！\n\n你再结合这两点看文中的内容！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579062525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1742972,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/98/7c/07e6e7b7.jpg","nickname":"Tim","note":"","ucode":"F51593465157E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197267,"discussion_content":"感谢老师的耐心解释！这下彻底清楚了，还是我本身的基础差，理解不够深刻容易弄混。辛苦老师了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583415549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165459,"user_name":"行云流水","can_delete":false,"product_type":"c1","uid":1374414,"ip_address":"","ucode":"3CCE8B9902005A","user_header":"https://static001.geekbang.org/account/avatar/00/14/f8/ce/495dfc91.jpg","comment_is_top":false,"comment_ctime":1577240489,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5872207785","product_id":100033601,"comment_content":"在看的时候有点疑惑，希望老师可以解答下：<br>1. 字符串类型的值，如果很大的也是存在栈中嘛？<br>2. 例如:  let a = {  b:1 }     a.c = {   d:44444444444444444 } <br>定义了一个对象赋值给 a ,那么a就指向了堆内存中一段空间。在后面通过 a.c 赋值了一个很大的值。<br>我的疑惑是:<br>1. 原来的 a指向的空间不够用的话是怎么处理？<br>2. 如果是动态添加了内存的话,原来a 保存的地址指针，还可以指向后面分配的内存嘛？","like_count":1,"discussions":[{"author":{"id":1624537,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","nickname":"Slowdive","note":"","ucode":"AF3429CE47C462","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227243,"discussion_content":"字符串不在栈中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586480552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2707720,"avatar":"https://static001.geekbang.org/account/avatar/00/29/51/08/66402eab.jpg","nickname":"ndocrm","note":"","ucode":"5162FC0A1D287D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1624537,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","nickname":"Slowdive","note":"","ucode":"AF3429CE47C462","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386454,"discussion_content":"那请问字符串值是储存在哪的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627600275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":227243,"ip_address":""},"score":386454,"extra":""},{"author":{"id":2346098,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cc/72/8adc3d99.jpg","nickname":"初六🌌","note":"","ucode":"0595E5AC1A5582","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2707720,"avatar":"https://static001.geekbang.org/account/avatar/00/29/51/08/66402eab.jpg","nickname":"ndocrm","note":"","ucode":"5162FC0A1D287D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549370,"discussion_content":"字符串是存在堆中的，所有语言的字符串都是存在堆中的，浮点数和大整数也是存在堆中的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643895585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386454,"ip_address":""},"score":549370,"extra":""}]}]},{"had_liked":false,"id":159112,"user_name":"大树","can_delete":false,"product_type":"c1","uid":1390549,"ip_address":"","ucode":"0B4C9091520DFA","user_header":"https://static001.geekbang.org/account/avatar/00/15/37/d5/22299804.jpg","comment_is_top":false,"comment_ctime":1575539356,"is_pvip":false,"replies":[{"id":"60873","content":"这块我会在下个v8专栏来深度分析","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1575552084,"ip_address":"","comment_id":159112,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5870506652","product_id":100033601,"comment_content":"老师能分析一下  箭头函数的内存模型吗  因为你在文章里提到过   箭头函数不创建执行上下文","like_count":1,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476953,"discussion_content":"这块我会在下个v8专栏来深度分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575552084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130129,"user_name":"子曰","can_delete":false,"product_type":"c1","uid":1161256,"ip_address":"","ucode":"34127192DD8876","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/28/8c83d109.jpg","comment_is_top":false,"comment_ctime":1567388194,"is_pvip":false,"replies":[{"id":"48589","content":"直接转换json<br>再转换回来 <br>这个没问题","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1567414743,"ip_address":"","comment_id":130129,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862355490","product_id":100033601,"comment_content":"let jack = {<br>    name: &quot;jack.ma&quot;,<br>    age: 40,<br>    like: {<br>        dog: {<br>            color: &#39;black&#39;,<br>            age: 3,<br>        },<br>        cat: {<br>            color: &#39;white&#39;,<br>            age: 2<br>        }<br>    }<br>}<br>function copy(src) {<br>    let dest = JSON.parse(JSON.stringify(src));<br>    &#47;&#47; 实现拷贝代码，将 src 的值完整地拷贝给 dest<br>    &#47;&#47; 在这里实现<br>    return dest<br>}<br>let jack2 = copy(jack)<br>&#47;&#47; 比如修改 jack2 中的内容，不会影响到 jack 中的值<br>jack2.like.dog.color = &quot;green&quot;<br>console.log(jack.like.dog.color) &#47;&#47; 打印出来的应该是 &quot;black&quot;<br>","like_count":1,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465824,"discussion_content":"直接转换json\n再转换回来 \n这个没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567414743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129933,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1567329303,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"5862296599","product_id":100033601,"comment_content":"function deepCopy (p, c){<br>            c = c || {}<br>            for (var i in p) {<br>                if (p.hasOwnProperty(i)) {<br>                    if (typeof p[i] === &#39;object&#39;) {<br>                        c[i] = Array.isArray(p[i]) ? [] : {}<br>                        deepCopy(p[i], c[i])<br>                    } else {<br>                        c[i] = p[i]<br>                    }<br>                }<br>            }<br>            return c<br>        }","like_count":1},{"had_liked":false,"id":349659,"user_name":"青山不改绿水长流","can_delete":false,"product_type":"c1","uid":1800406,"ip_address":"","ucode":"A2F094618F569A","user_header":"https://static001.geekbang.org/account/avatar/00/1b/78/d6/c920f2a8.jpg","comment_is_top":false,"comment_ctime":1656210280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656210280","product_id":100033601,"comment_content":"堆空间的内容会销毁嘛，何时销毁呢。","like_count":0},{"had_liked":false,"id":346303,"user_name":"光穿过森林","can_delete":false,"product_type":"c1","uid":2575992,"ip_address":"","ucode":"446ED739536427","user_header":"https://static001.geekbang.org/account/avatar/00/27/4e/78/1b1bc18e.jpg","comment_is_top":false,"comment_ctime":1653011108,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653011108","product_id":100033601,"comment_content":"有一个疑问 还是之前哪个案例，在15行添加了 myName = &#39;测试&#39;，有个疑问是：运行到这一行的时候，实际上是到 堆中closure(foo)指向的地址修改了myName么？<br>function foo() {<br>  var myName = &quot;极客时间&quot;<br>  let test1 = 1<br>  const test2 = 2<br>  var innerBar = { <br>      setName:function(newName){<br>          myName = newName<br>      },<br>      getName:function(){<br>          console.log(test1)<br>          return myName<br>      }<br>  }<br>  myName = &#39;测试&#39;<br><br>  return innerBar<br>}<br>var bar = foo()<br>bar.setName(&quot;极客邦&quot;)<br>bar.getName()<br>console.log(bar.getName())","like_count":0},{"had_liked":false,"id":344889,"user_name":"苑","can_delete":false,"product_type":"c1","uid":1378973,"ip_address":"","ucode":"01ED493593C362","user_header":"https://static001.geekbang.org/account/avatar/00/15/0a/9d/afddda4c.jpg","comment_is_top":false,"comment_ctime":1651836257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651836257","product_id":100033601,"comment_content":"function deepCopy(obj) {<br>        let dest = typeof obj === &#39;array&#39; ? [] : {}<br>        for (const objKey in obj) {<br>            if (Object(obj[objKey]) !== obj[objKey]) {<br>                dest[objKey] = obj[objKey]<br>            } else if (typeof obj[objKey] === &#39;function&#39;) {<br>                dest[objKey] = obj[objKey]<br>            } else {<br>                dest[objKey] = deepCopy(obj[objKey])<br>            }<br>        }<br><br>        return dest<br>    }","like_count":0},{"had_liked":false,"id":343655,"user_name":" συνείδηση","can_delete":false,"product_type":"c1","uid":2662532,"ip_address":"","ucode":"1056E44F8290F9","user_header":"https://static001.geekbang.org/account/avatar/00/28/a0/84/ab635579.jpg","comment_is_top":false,"comment_ctime":1650969187,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650969187","product_id":100033601,"comment_content":"看起来闭包是有产生条件的，但是犀牛书里面说到：从技术角度来讲，所有的Javascript函数都是闭包：他们都是对象，他们都关联到作用域链。   老师对待这个怎么看呢","like_count":0},{"had_liked":false,"id":341287,"user_name":"小飞侠","can_delete":false,"product_type":"c1","uid":1233325,"ip_address":"","ucode":"55650D7AB15AAF","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/ad/1aed3dec.jpg","comment_is_top":false,"comment_ctime":1649502388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649502388","product_id":100033601,"comment_content":"希望老师能练一练null的发音，路上听的时候，真就迷茫了，不知道老师说的null是个什么","like_count":0},{"had_liked":false,"id":332964,"user_name":"初六🌌","can_delete":false,"product_type":"c1","uid":2346098,"ip_address":"","ucode":"0595E5AC1A5582","user_header":"https://static001.geekbang.org/account/avatar/00/23/cc/72/8adc3d99.jpg","comment_is_top":false,"comment_ctime":1643895471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643895471","product_id":100033601,"comment_content":"字符串的值应该不是存在栈中的，JavaScript栈中存一个变量最大约为700KB左右，但是很多base64字符串基本都在几MB，所以字符串是存在堆中的，而且所有语言的字符串基本都不可能存在栈中，包括长整形和浮点型也应该是存在堆中的","like_count":0},{"had_liked":false,"id":323486,"user_name":"Laymanོ","can_delete":false,"product_type":"c1","uid":2853337,"ip_address":"","ucode":"205C247F683132","user_header":"https://static001.geekbang.org/account/avatar/00/2b/89/d9/a6f8645b.jpg","comment_is_top":false,"comment_ctime":1637925436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637925436","product_id":100033601,"comment_content":"老师JavaScript有堆和栈的说法嘛，引用类型的数据不是存储在window,如果分栈和堆那么window储存在哪？","like_count":0},{"had_liked":false,"id":314670,"user_name":"A LETTER","can_delete":false,"product_type":"c1","uid":2752142,"ip_address":"","ucode":"56C82015945CDE","user_header":"https://static001.geekbang.org/account/avatar/00/29/fe/8e/895f05a2.jpg","comment_is_top":false,"comment_ctime":1633318959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633318959","product_id":100033601,"comment_content":"function deepClone(origin) {<br> let newObj = origin instanceOf Array ? [] : {}<br> for(i in origin){<br>   typeOf i === &#39;object&#39; ? deepClone(i) : newObj[i] = origin[i]<br> }<br>return newObj<br>}","like_count":0},{"had_liked":false,"id":313887,"user_name":"张宗智ZZZ","can_delete":false,"product_type":"c1","uid":1295863,"ip_address":"","ucode":"DEC9309E266F7B","user_header":"https://static001.geekbang.org/account/avatar/00/13/c5/f7/4a0d08e9.jpg","comment_is_top":false,"comment_ctime":1632729178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632729178","product_id":100033601,"comment_content":"老师，有个问题，“通过上面的分析，我们可以画出执行到 foo 函数中“return innerBar”语句时的调用栈状态”，这里执行到return但还没销毁上下文，myName和test1为什么不在上下文里？","like_count":0},{"had_liked":false,"id":307147,"user_name":"Geek_bing","can_delete":false,"product_type":"c1","uid":2064266,"ip_address":"","ucode":"4000A30EDAF71C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vkqibkINia6dxVOv5zia2zbkmQbrJUsQw8vDfiauib2DfyvJQ4PDUC7M8p4vqFiaQj70yYwIO8JlHFA450KPmgpsXlsw/132","comment_is_top":false,"comment_ctime":1628909615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628909615","product_id":100033601,"comment_content":"老师，当foo函数出栈，被销毁后，断开了对闭包closure(foo)的引用。但是返回的对象innerBar中的两个函数保留着对堆中closure(foo)的引用。问题是堆中的数据难道不是随着函数执行完毕也跟着销毁吗？还是只是栈中的数据会被销毁？","like_count":0},{"had_liked":false,"id":305444,"user_name":"nemo","can_delete":false,"product_type":"c1","uid":2548483,"ip_address":"","ucode":"AB638EE8FC7CE0","user_header":"https://static001.geekbang.org/account/avatar/00/26/e3/03/fc666777.jpg","comment_is_top":false,"comment_ctime":1627976667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627976667","product_id":100033601,"comment_content":"请问老师，调用栈中的执行上下文在内存中是连续存储的吗？","like_count":0},{"had_liked":false,"id":302156,"user_name":"李瑞云","can_delete":false,"product_type":"c1","uid":1286542,"ip_address":"","ucode":"66ACCFEC32909E","user_header":"https://static001.geekbang.org/account/avatar/00/13/a1/8e/42aec19f.jpg","comment_is_top":false,"comment_ctime":1626100771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626100771","product_id":100033601,"comment_content":"老师 执行上下文和作用域总是解释不清楚","like_count":0},{"had_liked":false,"id":297880,"user_name":"花儿与少年","can_delete":false,"product_type":"c1","uid":1046304,"ip_address":"","ucode":"E2D685737E4F1B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/20/e2dfa9c2.jpg","comment_is_top":false,"comment_ctime":1623829945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623829945","product_id":100033601,"comment_content":"，由于是内部函数引用了外部函数的变量，所以 JavaScript 引擎判断这是一个闭包，于是在堆空间创建换一个“closure(foo)”的对象<br><br>「创建换」多了一个&#39; 换 &#39;吧","like_count":0},{"had_liked":false,"id":297694,"user_name":"soon","can_delete":false,"product_type":"c1","uid":2361679,"ip_address":"","ucode":"148122663905F2","user_header":"https://static001.geekbang.org/account/avatar/00/24/09/4f/c07bc26f.jpg","comment_is_top":false,"comment_ctime":1623735589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623735589","product_id":100033601,"comment_content":"方法一：let dest = JSON.parse(JSON.stringify(src))：但不可以拷贝 undefined ， function， RegExp 等等类型。<br><br>方法二：Object.assign(target, source)：但只可拷贝一层，多层嵌套则拷贝失效。<br><br>方法三：递归拷贝，null、undefinde、function、RegExp等特殊的值也全部拷贝成功：<br>&#47;&#47; 定义一个深拷贝函数  接收目标target参数<br>function copy(target) {<br>    &#47;&#47; 定义一个变量<br>    let result;<br>    &#47;&#47; 如果当前需要深拷贝的是一个对象的话<br>    if (typeof target === &#39;object&#39;) {<br>    &#47;&#47; 如果是一个数组的话<br>        if (Array.isArray(target)) {<br>            result = []; &#47;&#47; 将result赋值为一个数组，并且执行遍历<br>            for (let i in target) {<br>                &#47;&#47; 递归克隆数组中的每一项<br>                result.push(deepClone(target[i]))<br>                }<br>         &#47;&#47; 判断如果当前的值是null的话；直接赋值为null<br>        } else if(target===null) {<br>            result = null;<br>         &#47;&#47; 判断如果当前的值是一个RegExp对象的话，直接赋值    <br>        } else if(target.constructor===RegExp){<br>            result = target;<br>        }else {<br>         &#47;&#47; 否则是普通对象，直接for in循环，递归赋值对象的所有值<br>            result = {};<br>            for (let i in target) {<br>                result[i] = deepClone(target[i]);<br>            }<br>        }<br>     &#47;&#47; 如果不是对象的话，就是基本数据类型，那么直接赋值<br>    } else {<br>        result = target;<br>    }<br>     &#47;&#47; 返回最终结果<br>    return result;<br>}","like_count":0},{"had_liked":false,"id":291703,"user_name":"Geek_0c324a","can_delete":false,"product_type":"c1","uid":2597177,"ip_address":"","ucode":"C7791F7F760046","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MibU8Jsep36M1IicCMuf3rdRYjVMhZ1895kqNE2eV8nOlibwwbVGsf6Yqtkt8q3bhe0nLuicWVkTReg75W3HbEyFnQ/132","comment_is_top":false,"comment_ctime":1620442050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620442050","product_id":100033601,"comment_content":"        function copy(src) {<br>            let dest={};<br>            &#47;&#47;实现拷贝代码，将src的值完整地拷贝给dest<br>            &#47;&#47;在这里实现<br><br>            for (let key in src) {<br>                if (src.hasOwnProperty(key)) {<br>                    if (typeof src[key] !== &#39;object&#39;) {<br>                        dest[key] = src[key]<br>                    } else {<br>                        dest[key] = copy(src[key])<br>                    }<br>                }<br>            }<br>            return dest<br>        }","like_count":0},{"had_liked":false,"id":288749,"user_name":"narcos","can_delete":false,"product_type":"c1","uid":1244286,"ip_address":"","ucode":"725A8944BAA993","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/7e/0cc5a187.jpg","comment_is_top":false,"comment_ctime":1618653181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618653181","product_id":100033601,"comment_content":"老师，请问下，&lt;对象类型是“堆”来存储&gt; 这张示意图中，变量 c 的起始地址是  1003，结束地址是 1011，是因为 name 占了 4 个byte，&quot;极客时间&quot; 也占了 4 个 byte，总共是 8 个字节，所以就是 1003 + 8 = 1011 吗？","like_count":0},{"had_liked":false,"id":287602,"user_name":"💨","can_delete":false,"product_type":"c1","uid":2546693,"ip_address":"","ucode":"1B13692088728A","user_header":"https://static001.geekbang.org/account/avatar/00/26/dc/05/f7d14d5c.jpg","comment_is_top":false,"comment_ctime":1618046225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618046225","product_id":100033601,"comment_content":"老师我想问个问题，您画的JS内存模型中没有数据区，那我想请问下是因为有了全局执行上下文的存在导致没有这部分数据区了吗，线程之间会分享进程的数据（全局变量），那请问如果一段JS代码被多个线程执行的话，每个线程的栈区都会有全局执行上下文吗，全局执行上下文和数据区到底是什么关系，是共存关系吗，还是说JS中没有数据区这一概念？","like_count":0},{"had_liked":false,"id":285459,"user_name":"小徐","can_delete":false,"product_type":"c1","uid":1991387,"ip_address":"","ucode":"671BA40E7C7C76","user_header":"https://static001.geekbang.org/account/avatar/00/1e/62/db/740b46a0.jpg","comment_is_top":false,"comment_ctime":1616825427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616825427","product_id":100033601,"comment_content":"function cloneLoop(x) {<br>    const root = {};<br><br>    &#47;&#47; 栈<br>    const loopList = [<br>        {<br>            parent: root,<br>            key: undefined,<br>            data: x,<br>        }<br>    ];<br><br>    while(loopList.length) {<br>        &#47;&#47; 深度优先<br>        const node = loopList.pop();<br>        const parent = node.parent;<br>        const key = node.key;<br>        const data = node.data;<br><br>        &#47;&#47; 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素<br>        let res = parent;<br>        if (typeof key !== &#39;undefined&#39;) {<br>            res = parent[key] = {};<br>        }<br><br>        for(let k in data) {<br>            if (data.hasOwnProperty(k)) {<br>                if (typeof data[k] === &#39;object&#39;) {<br>                    &#47;&#47; 下一次循环<br>                    loopList.push({<br>                        parent: res,<br>                        key: k,<br>                        data: data[k],<br>                    });<br>                } else {<br>                    res[k] = data[k];<br>                }<br>            }<br>        }<br>    }<br><br>    return root;<br>}","like_count":0},{"had_liked":false,"id":285445,"user_name":"simei","can_delete":false,"product_type":"c1","uid":2399580,"ip_address":"","ucode":"6D1FCDCB9F295B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL4plVL65uxu4lg6KvAgVLZg92zbdbcNOFXt2QiabRGrbMbbRqicsiaxQ4NVO6icXAPLzzicexKnsq6YLQ/132","comment_is_top":false,"comment_ctime":1616815491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616815491","product_id":100033601,"comment_content":"function copy(src){ <br>let dest<br>if(src === null || (typeof src !== &#39;object&#39;)){<br>    return src<br>}<br><br>if(typeof src === &#39;object&#39;){<br>dest = src instanceof Array ? [] : {};<br>for(let prop in src){<br>    dest[prop] = copy(src[prop])<br>}}<br>return dest<br>}","like_count":0},{"had_liked":false,"id":285437,"user_name":"小徐","can_delete":false,"product_type":"c1","uid":1991387,"ip_address":"","ucode":"671BA40E7C7C76","user_header":"https://static001.geekbang.org/account/avatar/00/1e/62/db/740b46a0.jpg","comment_is_top":false,"comment_ctime":1616813989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616813989","product_id":100033601,"comment_content":"function copy(src){<br>    let dest = JSON.parse(JSON.stringify(src))<br>    &#47;&#47;实现拷贝代码，将src的值完整地拷贝给dest<br>   &#47;&#47;在这里实现<br>   console.log(dest);<br>    return dest<br>}","like_count":0},{"had_liked":false,"id":284087,"user_name":"hYector","can_delete":false,"product_type":"c1","uid":2173880,"ip_address":"","ucode":"C1DEEB8FAC0B2E","user_header":"https://static001.geekbang.org/account/avatar/00/21/2b/b8/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1616059695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616059695","product_id":100033601,"comment_content":"function copy(src){<br>    let dest<br>    &#47;&#47;实现拷贝代码，将src的值完整地拷贝给dest<br>    dest = {}<br>    for(let ky in src){<br>        vl = src[ky]<br>        if(typeof vl == &#39;object&#39;){<br>            dest[ky] = copy(vl)<br>        }else{<br>            dest[ky] = vl<br>        }<br>    }<br>   &#47;&#47;在这里实现<br>    return dest<br>}","like_count":0},{"had_liked":false,"id":279041,"user_name":"l1shu","can_delete":false,"product_type":"c1","uid":1624297,"ip_address":"","ucode":"FCF3E36905B404","user_header":"https://static001.geekbang.org/account/avatar/00/18/c8/e9/c7c5cbf5.jpg","comment_is_top":false,"comment_ctime":1613566120,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1613566120","product_id":100033601,"comment_content":"文中提及基本类型存储在栈中引用类型存储在堆中的说法在v8中是错误的  参考链接https:&#47;&#47;hashnode.com&#47;post&#47;does-javascript-use-stack-or-heap-for-memory-allocation-or-both-cj5jl90xl01nh1twuv8ug0bjk","like_count":0,"discussions":[{"author":{"id":1624297,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c8/e9/c7c5cbf5.jpg","nickname":"l1shu","note":"","ucode":"FCF3E36905B404","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349933,"discussion_content":"比如 v8::Number::New 的实现，代码在 src/api/api.cc，里面最终调用了 NewNumber\n\nNewNumber 这个函数在 src/heap/factory-base-inl.h 中，里面最终调用了 NewHeapNumber\n\n所以基础类型在 c++层面依然是存储在堆中的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613633286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272238,"user_name":"goali","can_delete":false,"product_type":"c1","uid":2224995,"ip_address":"","ucode":"0AD765488BAFC9","user_header":"https://static001.geekbang.org/account/avatar/00/21/f3/63/0a851d59.jpg","comment_is_top":false,"comment_ctime":1610001399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610001399","product_id":100033601,"comment_content":"老师 感觉你安利的浏览器查看方法很好 包括这个内存查看，布局查看。有没有什么比较好的文档看浏览器调试工具相关的","like_count":0},{"had_liked":false,"id":272080,"user_name":"啊哈哈","can_delete":false,"product_type":"c1","uid":1243584,"ip_address":"","ucode":"A8542946C03707","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/c0/20b4a205.jpg","comment_is_top":false,"comment_ctime":1609927365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609927365","product_id":100033601,"comment_content":"function deep(obj) {<br>  if (typeof obj === &#39;object&#39; &amp;&amp; obj !== null) {<br>    if (Array.isArray(obj)) {<br>      return obj.map(deep)<br>    }<br>    return Object.keys(obj).reduce((pre, cur) =&gt; {<br>      return {<br>        ...pre,<br>        [cur]: deep(obj[cur]),<br>      }<br>    }, {})<br>  }<br>  return obj<br>}<br><br>&#47;&#47; 2.<br>JSON.parse(JSON.stringify(jack))<br>","like_count":0},{"had_liked":false,"id":270033,"user_name":"走进科学","can_delete":false,"product_type":"c1","uid":1809669,"ip_address":"","ucode":"33644F69A54598","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/nicib8gqImzrCGJYyJW3QEmmr1yz2fWnLIOmstENIvLpiajbJVDWDQMF0PZAZ3BictqbwBMILFPA6jckJkTunXliaRQ/132","comment_is_top":false,"comment_ctime":1608882849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608882849","product_id":100033601,"comment_content":"这是因为 JavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。<br><br>不知道为什么会有效率问题? 只要知道上下文占用的内存大小,切换上下文是常数时间的啊.","like_count":0},{"had_liked":false,"id":258143,"user_name":"羲和","can_delete":false,"product_type":"c1","uid":1903752,"ip_address":"","ucode":"2B420888B5EB70","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0c/88/aaf7bde9.jpg","comment_is_top":false,"comment_ctime":1604310570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604310570","product_id":100033601,"comment_content":"function copy(src){ let dest &#47;&#47;实现拷贝代码，将src的值完整地拷贝给dest &#47;&#47;在这里实现 return dest}","like_count":0},{"had_liked":false,"id":253309,"user_name":"Kido","can_delete":false,"product_type":"c1","uid":2194662,"ip_address":"","ucode":"68A8C05CCFA3F2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJYzicZCK7z3OBQTyZS3NEukFzBr0zc0eCESkn6jssGNJdlLbulCpaGXkriaQlBFd6zpVsibpMBq2Fibg/132","comment_is_top":false,"comment_ctime":1602680651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602680651","product_id":100033601,"comment_content":"老师这个test2是const 不是应该存放在词法环境中吗，在图里放在变量环境里了","like_count":0},{"had_liked":false,"id":251904,"user_name":"Geek_zy1991","can_delete":false,"product_type":"c1","uid":1640823,"ip_address":"","ucode":"3E9DBB03DE6D9A","user_header":"","comment_is_top":false,"comment_ctime":1601966671,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1601966671","product_id":100033601,"comment_content":"请问老师，closure(foo)中是否存有词法作用域的信息呢？若没有，岂不是在闭包里，作用域链的查找规则就失效了？","like_count":0,"discussions":[{"author":{"id":2286113,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e2/21/60adf96b.jpg","nickname":"stone","note":"","ucode":"65816E57253D0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386150,"discussion_content":"通过断点看 scope 信息，Closure 是在作用域链上，猜测当前作用域的 outer 指向的是就是 Closure，个人看法哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627444379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251326,"user_name":"zhaozigang","can_delete":false,"product_type":"c1","uid":1168666,"ip_address":"","ucode":"4F05977DB5380A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZO2lNDlECbEc1Ykkne3nfaXSJunnJa5ia0IWLLdcibrXdtVmjMEpdUWaUHx67ArRw35taAgfaYt9PO3aR73Sl8w/132","comment_is_top":false,"comment_ctime":1601466003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601466003","product_id":100033601,"comment_content":"JSON stringify&#47;parse 也可以实现，但是如果对象中有复杂结构，会破坏对象的内部结构","like_count":0},{"had_liked":false,"id":243755,"user_name":"‏5102","can_delete":false,"product_type":"c1","uid":2116537,"ip_address":"","ucode":"476092AB890CF2","user_header":"https://static001.geekbang.org/account/avatar/00/20/4b/b9/2449c7b7.jpg","comment_is_top":false,"comment_ctime":1598267498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598267498","product_id":100033601,"comment_content":"老师我想问一下，当js执行的时候会先进行编译，会把函数提升，保存在全局变量环境中，那么这个函数在内存中的存储形式是怎样的？当他被执行的时候又是怎样的？","like_count":0},{"had_liked":false,"id":240104,"user_name":"弛风","can_delete":false,"product_type":"c1","uid":1489200,"ip_address":"","ucode":"35C07478A4F55C","user_header":"https://static001.geekbang.org/account/avatar/00/16/b9/30/c76aa6db.jpg","comment_is_top":false,"comment_ctime":1596762948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596762948","product_id":100033601,"comment_content":"第二个问题：innerBar返回后，含有setName和getName对象，这两个对象里面包含了堆中的closure(foo)的引用。虽然foo执行上下文销毁了，foo函数中的对closure(foo)的引用也断开了，但是setName和getName里面又重新建立起来了对closure(foo)引用。<br><br>对于老师上面的这个回答有个疑问：setName和getName对象，这两个对象里面包含了堆中的closure(foo)的引用，这个怎么理解，setName和getName是什么时候，引用了closure(foo)","like_count":0},{"had_liked":false,"id":239967,"user_name":"Geek_ea2845","can_delete":false,"product_type":"c1","uid":2043093,"ip_address":"","ucode":"53FF6EAFB3196B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqMDAWg4jibRKzibnciagJpoT47g6ickyvM5XT18v4qTDgibAjwcfJjObF7eOtWlWI079tw4DsjRPWLylA/132","comment_is_top":false,"comment_ctime":1596703360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596703360","product_id":100033601,"comment_content":"js没有静态存储区的概念吗，理论上，js是有c++编译的语言，在c++中就有常量，js中应该也有对静态存储的一个概念","like_count":0},{"had_liked":false,"id":232770,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1594113378,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594113378","product_id":100033601,"comment_content":"方法1：function copy(src){<br>    let dest<br>    dest = JSON.parse(JSON.stringify(src))<br>    return dest<br>}<br><br>方法二：function copy_2(src){<br> let dest;<br>  if(typof src === &#39;object&#39;){<br>    dest = {};<br>\tfor(let i in src){<br>\t \tdest[i] = copy_2(src[i])<br>   }\t<br>  }else{<br>\tdest = src;<br>  }<br>\treturn dest;<br>}","like_count":0},{"had_liked":false,"id":231339,"user_name":"Geek_7f1046","can_delete":false,"product_type":"c1","uid":2031263,"ip_address":"","ucode":"E7BB361E560AAA","user_header":"http://thirdwx.qlogo.cn/mmopen/Q3auHgzwzM59nwkCA4OyQdf1YhZoFzrUcdfKzvNmYTO4vu796xvSFFXtx3X2qI2dTZILoiaYdibcrfPIsKNAIpicg/132","comment_is_top":false,"comment_ctime":1593654346,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1593654346","product_id":100033601,"comment_content":"想问一下，按照老师说的在编译阶段就会快速的做一次词法扫描，如果有引用外部变量就认为是闭包把变量存到cluster中，那么如果我不return innerfun呢","like_count":0,"discussions":[{"author":{"id":2801818,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/c0/9a/c2217ef2.jpg","nickname":"asdfghjkl","note":"","ucode":"6941A96865949B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409719,"discussion_content":"只要内部函数引用了外部函数的变量，这个外部函数就会生成闭包，return fn，到全局，\n只是会让这个闭包一直存在内存中，\n\nfunction a(){\nvar a = 1;\nfunction b(){\nconsole.log(a);\n}\nb();\n}\na();\n// 这样依然会生成闭包，只不过a执行完了后，闭包被会收。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635495071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227559,"user_name":"bingmo","can_delete":false,"product_type":"c1","uid":1503447,"ip_address":"","ucode":"F92171460C0EA7","user_header":"https://static001.geekbang.org/account/avatar/00/16/f0/d7/82a2ffd4.jpg","comment_is_top":false,"comment_ctime":1592409352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592409352","product_id":100033601,"comment_content":"这里有个疑问：<br>1、如果一个函数内部有多层内部函数，每个内部函数都有使用外部变量，那么这些内部函数对应的闭包对象closure(foo)难道都是同一个对象吗？闭包怎么体现词法作用域中块级作用域的概念？<br>2、针对上述setName&#47;getName的例子，不理解closure(foo)是什么时候被放入到对应变量环境中？感觉逻辑很隐晦","like_count":0},{"had_liked":false,"id":227152,"user_name":"钱立文","can_delete":false,"product_type":"c1","uid":1756729,"ip_address":"","ucode":"95E0DA23B15A5E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ce/39/c5878cbc.jpg","comment_is_top":false,"comment_ctime":1592299634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592299634","product_id":100033601,"comment_content":"在编译过程中，遇到内部函数 setName，JavaScript 引擎还要对内部函数做一次快速的词法扫描，发现该内部函数引用了 foo 函数中的 myName 变量，由于是内部函数引用了外部函数的变量，所以 JavaScript 引擎判断这是一个闭包，于是在堆空间创建换一个“closure(foo)”的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存 myName 变量。==========问题，闭包是在编译过程中创建的吗？ <br> function foo() {<br>      var myName =&quot;极客时间&quot;<br>      let test1 = 1<br>      const test2 = 2<br>      var innerBar = {<br>        setName: function (newName) {<br>          myName = newName<br>        },<br>        getName: function () {<br>          console.log(test1)<br>          return myName<br>        }<br>      }<br>      return innerBar<br>    }<br>    var bar = foo(0)<br>    bar.setName(&quot;极客邦&quot;)<br>    bar.getName()<br>    console.log(bar.getName())<br>  为啥closure(foo) 中myName的值是&quot;极客时间&quot;？？ 按理应该是undefind 才对呀。<br>  如果闭包是在编译时创建 那么myName是怎么被赋值的呢？","like_count":0},{"had_liked":false,"id":224811,"user_name":"james","can_delete":false,"product_type":"c1","uid":1232771,"ip_address":"","ucode":"AC42035106E5B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yyibGRYCArsUNBfCAEAibua09Yb9D5AdO8TkCmXymhAepibqmlz0hzg06ggBLxyvXicnjqFVGr7zYF0rQoZ0aXCBAg/132","comment_is_top":false,"comment_ctime":1591544297,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1591544297","product_id":100033601,"comment_content":"function cloneDeep(source) {<br>  let target;<br>  if (typeof source !== &#39;object&#39;) return source;<br>  target = source instanceof Array ? [] : {};<br>  for (const key in source) {<br>    if (source.hasOwnProperty(key)) {<br>      target[key] = typeof source[key] === &#39;object&#39; ? cloneDeep(source[key]) : source[key];<br>    }<br>  }<br>  return target;<br>}","like_count":0},{"had_liked":false,"id":224809,"user_name":"james","can_delete":false,"product_type":"c1","uid":1232771,"ip_address":"","ucode":"AC42035106E5B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yyibGRYCArsUNBfCAEAibua09Yb9D5AdO8TkCmXymhAepibqmlz0hzg06ggBLxyvXicnjqFVGr7zYF0rQoZ0aXCBAg/132","comment_is_top":false,"comment_ctime":1591544044,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1591544044","product_id":100033601,"comment_content":"JavaScript 的变量是没有数据类型的，值才有数据类型，变量可以随时持有任何类型的数据。","like_count":0},{"had_liked":false,"id":224807,"user_name":"james","can_delete":false,"product_type":"c1","uid":1232771,"ip_address":"","ucode":"AC42035106E5B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yyibGRYCArsUNBfCAEAibua09Yb9D5AdO8TkCmXymhAepibqmlz0hzg06ggBLxyvXicnjqFVGr7zYF0rQoZ0aXCBAg/132","comment_is_top":false,"comment_ctime":1591543935,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1591543935","product_id":100033601,"comment_content":"产生闭包的核心有两步：第一步是需要预扫描内部函数；第二步是把内部函数引用的外部变量保存到堆中。","like_count":0},{"had_liked":false,"id":224361,"user_name":"小黑山波","can_delete":false,"product_type":"c1","uid":2019449,"ip_address":"","ucode":"406A85AE39F1C7","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d0/79/df144aee.jpg","comment_is_top":false,"comment_ctime":1591354074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591354074","product_id":100033601,"comment_content":"弱类型，意味着你不需要告诉 JavaScript 引擎这个或那个变量是什么数据类型，JavaScript 引擎在运行代码的时候自己会计算出来。动态，意味着你可以使用同一个变量保存不同类型的数据。<br>老师这两个是不是写反了啊","like_count":0},{"had_liked":false,"id":221303,"user_name":"后脑勺","can_delete":false,"product_type":"c1","uid":1946181,"ip_address":"","ucode":"50704EC5545C4C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/b2/45/b49a92f5.jpg","comment_is_top":false,"comment_ctime":1590466690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590466690","product_id":100033601,"comment_content":"递归实现：<br><br>let jack = {<br>\tname: &#39;jack.ma&#39;,<br>\tage: 40,<br>\tlike: {<br>\t\tdog: {<br>\t\t\tcolor: &#39;black&#39;,<br>\t\t\tage: 3<br>\t\t},<br>\t\tcat: {<br>\t\t\tcolor: &#39;white&#39;,<br>\t\t\tage: 2<br>\t\t}<br>\t}<br>}<br><br>function copy(src) {<br>\tlet dest<br>\tlet type = Object.prototype.toString.call(src)<br><br>\t&#47;&#47;实现拷贝代码，将src的值完整地拷贝给dest<br>\tif (type === &#39;[object Array]&#39;) {<br>\t\tdest = []<br>\t\tfor (let item of src) {<br>\t\t\tdest = dest.concat(copy(item))<br>\t\t}<br>\t} else if (type === &#39;[object Object]&#39;) {<br>\t\tdest = {}<br>\t\tfor (let key in src) {<br>\t\t\tdest[key] = copy(src[key])<br>\t\t}<br>\t} else {<br>\t\tdest = src<br>\t}<br><br>\t&#47;&#47;在这里实现<br>\treturn dest<br>}<br><br>let jack2 = copy(jack)<br><br>&#47;&#47;比如修改jack2中的内容，不会影响到jack中的值<br>jack2.like.dog.color = &#39;green&#39;<br>console.log(jack.like.dog.color) &#47;&#47;打印出来的应该是 &quot;black&quot;","like_count":0},{"had_liked":false,"id":221298,"user_name":"后脑勺","can_delete":false,"product_type":"c1","uid":1946181,"ip_address":"","ucode":"50704EC5545C4C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/b2/45/b49a92f5.jpg","comment_is_top":false,"comment_ctime":1590466395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590466395","product_id":100033601,"comment_content":"递归实现：<br><br>let jack = {<br>\tname : &quot;jack.ma&quot;,<br>\tage:40,<br>\tlike:{<br>\t\t\tdog:{<br>\t\t\t\t\tcolor:&#39;black&#39;,<br>\t\t\t\t\tage:3,<br>\t\t\t},<br>\t\t\tcat:{<br>\t\t\t\t\tcolor:&#39;white&#39;,<br>\t\t\t\t\tage:2<br>\t\t\t}<br>\t}<br>}<br>function copy(src){<br>\tlet dest<br><br>\t&#47;&#47;实现拷贝代码，将src的值完整地拷贝给dest<br>\tif (typeof src === &#39;object&#39; &amp;&amp; src !== null) {<br>\t\tif (src.constructor.name === &#39;Array&#39;) {<br>\t\t\tdest = []<br>\t\t\tfor (let item of src) {<br>\t\t\t\tdest = dest.concat(copy(item))<br>\t\t\t}<br>\t\t} else if (src.constructor.name === &#39;Object&#39;) {<br>\t\t\tdest = {}<br>\t\t\tfor (let key in src) {<br>\t\t\t\tdest[key] = copy(src[key])<br>\t\t\t}<br>\t\t}<br>\t} else {<br>\t\tdest = src<br>\t}<br><br>\t&#47;&#47;在这里实现<br>\treturn dest<br>}<br><br>let jack2 = copy(jack)<br><br>&#47;&#47;比如修改jack2中的内容，不会影响到jack中的值<br>jack2.like.dog.color = &#39;green&#39;<br>console.log(jack.like.dog.color) &#47;&#47;打印出来的应该是 &quot;black&quot;","like_count":0},{"had_liked":false,"id":221295,"user_name":"后脑勺","can_delete":false,"product_type":"c1","uid":1946181,"ip_address":"","ucode":"50704EC5545C4C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/b2/45/b49a92f5.jpg","comment_is_top":false,"comment_ctime":1590466062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590466062","product_id":100033601,"comment_content":"用递归：<br><br>let jack = {<br>\tname : &quot;jack.ma&quot;,<br>\tage:40,<br>\tlike:{<br>\t\t\tdog:{<br>\t\t\t\t\tcolor:&#39;black&#39;,<br>\t\t\t\t\tage:3,<br>\t\t\t},<br>\t\t\tcat:{<br>\t\t\t\t\tcolor:&#39;white&#39;,<br>\t\t\t\t\tage:2<br>\t\t\t}<br>\t}<br>}<br>function copy(src){<br>\tlet dest<br><br>\t&#47;&#47;实现拷贝代码，将src的值完整地拷贝给dest<br>\tif (typeof src === &#39;object&#39; &amp;&amp; src !== null) {<br>\t\tdest = {}<br>\t\tfor (let key in src) {<br>\t\t\tdest[key] = copy(src[key])<br>\t\t}<br>\t} else {<br>\t\tdest = src<br>\t}<br><br>\t&#47;&#47;在这里实现<br>\treturn dest<br>}<br><br>let jack2 = copy(jack)<br><br>&#47;&#47;比如修改jack2中的内容，不会影响到jack中的值<br>jack2.like.dog.color = &#39;green&#39;<br>console.log(jack.like.dog.color) &#47;&#47;打印出来的应该是 &quot;black&quot;","like_count":0},{"had_liked":false,"id":217737,"user_name":"EmilyLucky","can_delete":false,"product_type":"c1","uid":1972343,"ip_address":"","ucode":"DBA5FE296CF473","user_header":"https://static001.geekbang.org/account/avatar/00/1e/18/77/d665f258.jpg","comment_is_top":false,"comment_ctime":1589599289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589599289","product_id":100033601,"comment_content":"function copy(obj = {}){<br>  if(typeof obj !== &quot;object&quot; || typeof obj == &quot;null&quot;){<br>     return obj;<br>  }<br>  let result;<br>  if(obj instanceof Array){<br>     result = [];<br>  }else{<br>     result = {};<br>  }<br>  for(let key in obj){<br>     if(obj.hasOwnProperty(key)){<br>       result[key] = copy(obj[key]);<br>     }<br>  }<br>  return result;<br>}<br>&#47;&#47;测试<br>const jack = {<br>  age:20,<br>  name:&quot;jack.ma&quot;,<br>  address:{<br>    city:&quot;Shanghai&quot;<br>  },<br>  like:[&quot;dog&quot;,&quot;cat&quot;]<br>};<br>const jack2 = copy(jack);<br>jack2.address.city = &quot;Beijing&quot;;<br>jack2.like[1] = &quot;pig&quot;;<br>console.log(jack.address.city);&#47;&#47;打印结果应该是Shanghai<br>console.log(jack.like[1]);&#47;&#47;打印结果应该是cat","like_count":0},{"had_liked":false,"id":214570,"user_name":"宋哈哈","can_delete":false,"product_type":"c1","uid":1580982,"ip_address":"","ucode":"26E71F2360D373","user_header":"https://static001.geekbang.org/account/avatar/00/18/1f/b6/131baa76.jpg","comment_is_top":false,"comment_ctime":1588766644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588766644","product_id":100033601,"comment_content":"只有我注意到了BigInt数据类型了吗  BigInt已经作为ES标准了吗","like_count":0},{"had_liked":false,"id":213651,"user_name":"kkkkkkkk","can_delete":false,"product_type":"c1","uid":1511545,"ip_address":"","ucode":"E1D8AC7CF39E7E","user_header":"https://static001.geekbang.org/account/avatar/00/17/10/79/390568f3.jpg","comment_is_top":false,"comment_ctime":1588499739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588499739","product_id":100033601,"comment_content":"老师您好，我有个问题：<br>执行上下文中还包含了作用域链（scope），如上面例子中的innerBar.[scope] = [AO, fooContext.AO, globalContext.VO]。已知执行该函数时，会从作用域链上去找相应的变量。<br>执行bar.setName(&quot;极客邦&quot;)时，fooContext已经被销毁，所以这里的fooContext.AO指的是clourse(foo)吗？","like_count":0},{"had_liked":false,"id":209131,"user_name":"简玉","can_delete":false,"product_type":"c1","uid":1013401,"ip_address":"","ucode":"C7F9471C7BFC7F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/99/00597feb.jpg","comment_is_top":false,"comment_ctime":1587514179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587514179","product_id":100033601,"comment_content":"二刷，这次做系统笔记。不知道老师会不会出书，展开浏览器工作原理的更多环节和细节。","like_count":0},{"had_liked":false,"id":205947,"user_name":"盖世英雄","can_delete":false,"product_type":"c1","uid":1394238,"ip_address":"","ucode":"50CD6CCD4D8B76","user_header":"https://static001.geekbang.org/account/avatar/00/15/46/3e/f9ae9462.jpg","comment_is_top":false,"comment_ctime":1586762382,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586762382","product_id":100033601,"comment_content":"看了好几遍，而且还做了笔记<br>老师讲的真棒、深入浅出；插图看着舒服、图文编排也好<br>还可以加下划线、笔记","like_count":0},{"had_liked":false,"id":204900,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1586488476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586488476","product_id":100033601,"comment_content":"let a = {x: 1}<br>let b = {y:2, z: a}<br>let c = {y: 3, x: {a: 1}}<br>这种情况下a, b的值在堆中如何存储的，堆中的b.z是保存的a的引用地址吗？c这种对象的属性是一个对象又如何存储的？","like_count":0},{"had_liked":false,"id":204864,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1586484127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586484127","product_id":100033601,"comment_content":"老师请务必解释一下这个问题， 非常感谢！ ： <br>1. 创建foo的上下文，词法扫描创建closure(foo)在堆中，foo的上下文添加指向这个closure的指针，然后return bar， foo的上下文出栈。 执行bar， 编译bar时应该不会处理myName，在执行时遇到myName应该是沿着作用域链找myName，这时候就会在closure(foo)中找到myName。 那问题来了，closure(foo)的地址是在哪个阶段如何放到bar的上下文中的？<br>2. foo的编译阶段对变量做提升，再词法扫描内部函数bar，创建closure(foo)， myName变量只存在于closure(foo)中吗？为什么在函数环境变量里没有myName？","like_count":0},{"had_liked":false,"id":204813,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1586478589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586478589","product_id":100033601,"comment_content":"老师，如果把所有数据都载入到栈空间，在做栈切换的时候也是移动指针啊，只是移动的大小不一样而已，为什么不可以全类型都放到栈呢？ ","like_count":0},{"had_liked":false,"id":192212,"user_name":"墨灵","can_delete":false,"product_type":"c1","uid":1409700,"ip_address":"","ucode":"185D70CA20BEEE","user_header":"https://static001.geekbang.org/account/avatar/00/15/82/a4/a92c6eca.jpg","comment_is_top":false,"comment_ctime":1584843304,"is_pvip":false,"replies":[{"id":"74346","content":"你是高手，V8专栏中的一篇介绍类型系统的思路和你这个类似","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1585224376,"ip_address":"","comment_id":192212,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584843304","product_id":100033601,"comment_content":"老师对弱类型语言的解释不够精确。<br>```<br>a = 1<br>a = 1.1<br>a = &#39;&#39;<br>a = []<br>a = {}<br>```<br>这段代码在js和python都是可以执行的，但python并不是一门弱类型的语言。<br>```<br>1 + &#39;1&#39;<br>```<br>这代码在js执行结果是&#39;11&#39;，但在python执行却是报错的，因为python不理解一个整数和字符串相加的逻辑...<br>在js中，任何两个类型都是可以相加的，但是结果却不是一定是我们想要的。","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488344,"discussion_content":"你是高手，V8专栏中的一篇介绍类型系统的思路和你这个类似","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585224376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183899,"user_name":"blueBean","can_delete":false,"product_type":"c1","uid":1816697,"ip_address":"","ucode":"6A68D2414BD904","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/79/a4dbe9ee.jpg","comment_is_top":false,"comment_ctime":1583158915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583158915","product_id":100033601,"comment_content":"var j2 = Object.create(j1)<br>怎么样？","like_count":0},{"had_liked":false,"id":181511,"user_name":"dellyoung","can_delete":false,"product_type":"c1","uid":1133028,"ip_address":"","ucode":"3672FF1D1F8EFD","user_header":"https://static001.geekbang.org/account/avatar/00/11/49/e4/fb47bfcd.jpg","comment_is_top":false,"comment_ctime":1582553279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582553279","product_id":100033601,"comment_content":"手撕了一个深拷贝函数，兼容大部分情况了（字数超了。。）<br>const getType = (target) =&gt;  Object.prototype.toString.call(target)<br>const clone = (target, map = new WeakMap()) =&gt; {<br>    &#47;&#47; 处理原始类型直接返回<br>    if (!isObject(target)) {<br>        return target;<br>    }<br>    &#47;&#47; 处理不可遍历类型<br>    const type = getType(target);<br>    if (simpleType.includes(type)) {<br>        switch (type) {<br>            case typeDate:<br>                &#47;&#47; 日期<br>                return new Date(target);<br>            case typeRegExp:<br>                &#47;&#47; 正则<br>                const reg = &#47;\\w*$&#47;;<br>                return new RegExp(target.source,reg.exec(target)[0]);<br>            case typeFunction:<br>                &#47;&#47; 函数<br>                return target;<br>            default:<br>                return target;<br>        }<br>    }<br><br>    &#47;&#47; 用于返回<br>    let cloneTarget;<br>    &#47;&#47; 处理循环引用<br>    if (map.has(target)) {<br>        return target<br>    } else {<br>        &#47;&#47; 先set一次，防止后续四种没有有set它<br>        map.set(target, cloneTarget);<br>    }<br>    &#47;&#47; 处理可遍历类型<br>    switch (type) {<br>        case typeSet:<br>            &#47;&#47; set<br>            cloneTarget = new Set();<br>            target.forEach((item) =&gt; {<br>                cloneTarget.add(clone(item, map))<br>            });<br>            return cloneTarget;<br>        case typeMap:<br>            &#47;&#47; map<br>            cloneTarget = new Map();<br>            target.forEach((value, key) =&gt; {<br>                cloneTarget.set(key, clone(value, map))<br>            });<br>            return cloneTarget;<br>        case typeArray:<br>            &#47;&#47; 数组<br>            cloneTarget = [];<br>            target.forEach((item, index) =&gt; {<br>                cloneTarget[index] = clone(item, map)<br>            });<br>            map.set(target, cloneTarget);<br>            return cloneTarget;<br>        case typeObject:<br>            &#47;&#47; 对象<br>            cloneTarget = {};<br>            Object.keys(target).forEach((item) =&gt; {<br>                cloneTarget[item] = clone(target[item], map)<br>            });<br>            map.set(target, cloneTarget);<br>            return cloneTarget;<br>        default:<br>            return target;<br>    }<br>};","like_count":0},{"had_liked":false,"id":179185,"user_name":"love star","can_delete":false,"product_type":"c1","uid":1377886,"ip_address":"","ucode":"11B0D208BA7C7A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/M5jrJZliboJoN9cNp0iahPqwXe3Zf6CUeiaUMYY8icRY0Hvw9wZ36USS6tP2KE16n2lf8W0IhNWiaoBHUYyrwoT0vrg/132","comment_is_top":false,"comment_ctime":1581933216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581933216","product_id":100033601,"comment_content":"老师您好，我看你的上上节说的如果引用闭包的函数是一个全局变量，那么闭包会一直存在直到页面关闭。<br>那在断点打到除了<br>          myName = newName<br>          console.log(test1)<br>          return myName<br>        可以查看的到闭包，其他地方浏览器查看不到闭包这个内存，它还存在堆内存只是不显示吗？","like_count":0},{"had_liked":false,"id":177420,"user_name":"戡玉","can_delete":false,"product_type":"c1","uid":1162123,"ip_address":"","ucode":"398F0C0367E795","user_header":"https://static001.geekbang.org/account/avatar/00/11/bb/8b/028bbe52.jpg","comment_is_top":false,"comment_ctime":1581390012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581390012","product_id":100033601,"comment_content":"老师，这节最后一个应该有点不对把，test2应该属于此法环境，并且还有var常量和innerBar没标示出来，（如果省略的话，文章可以提示一句）；我还对照发现，在“作用域链和闭包”那节，分析闭包的图示也有个小错误，就是“当执行到return innerBar的位置时”，innerBar在图示中是=function..，这里不好截图，老师可以去对一下。","like_count":0},{"had_liked":false,"id":177193,"user_name":"prozac","can_delete":false,"product_type":"c1","uid":1242593,"ip_address":"","ucode":"8D1557F035582B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/e1/b21c74a4.jpg","comment_is_top":false,"comment_ctime":1581318244,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1581318244","product_id":100033601,"comment_content":"老师我想提个疑问，为什么存储引用类型的数据是用堆这个结构？堆的特点跟这个场景一点也不契合啊...？难道不是散列表&#47;跳表&#47;红黑树更适合吗","like_count":0},{"had_liked":false,"id":176525,"user_name":"Sela","can_delete":false,"product_type":"c1","uid":1554732,"ip_address":"","ucode":"3FA14C704D79F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/b9/2c/b56bc5db.jpg","comment_is_top":false,"comment_ctime":1581081260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581081260","product_id":100033601,"comment_content":"function copy(src){<br>    let dest<br>    &#47;&#47;实现拷贝代码，将src的值完整地拷贝给dest<br>   &#47;&#47;在这里实现<br>  dest = JSON.parse(JSON.stringify(src));<br>    return dest<br>}<br><br>JSON.sringify 和 JSON.parse ,先将对象转换为字符串，再通过JSON.parse重新建立一个对象。<br>但是这种方法的局限也很多：<br><br>不能复制function、正则、Symbol<br>循环引用报错<br>相同的引用会被重复复制<br><br>因为上面的例子知识json结构，不涉及上面3种，故可以简单处理即可。","like_count":0},{"had_liked":false,"id":172057,"user_name":"4!!","can_delete":false,"product_type":"c1","uid":1487663,"ip_address":"","ucode":"188445590D97DF","user_header":"https://static001.geekbang.org/account/avatar/00/16/b3/2f/867b94d8.jpg","comment_is_top":false,"comment_ctime":1579080284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579080284","product_id":100033601,"comment_content":"function copy(src){ <br>    let dest <br>    dest =  JSON.parse(JSON.stringify(src));<br>    return dest<br>}<br>还是这个方法最方便也最全面；<br>手写遍历的话要考虑的情况太多了，typeof为object的情况都要考虑，像对象、数组、函数、函数、日期、null等等","like_count":0},{"had_liked":false,"id":160500,"user_name":"coder","can_delete":false,"product_type":"c1","uid":1059952,"ip_address":"","ucode":"F70511D614B9F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/70/02b627a6.jpg","comment_is_top":false,"comment_ctime":1575965522,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575965522","product_id":100033601,"comment_content":"在闭包那段代码中，执行setName的时候，会不会也创建一个执行上下文？那setName执行完毕，是不是闭包就消失了（不考虑getName）？因为setName执行完毕，它的执行上下文就出栈了，那么闭包没有被引用，内存回收就清理了？","like_count":0,"discussions":[{"author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212902,"discussion_content":"这个不会被销毁吧，要是销毁了，你下次继续调用该函数的时候，那个变量就访问不到了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585032028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1503447,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f0/d7/82a2ffd4.jpg","nickname":"bingmo","note":"","ucode":"F92171460C0EA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283979,"discussion_content":"闭包没有销毁，因为getName还有引用它呢。垃圾回收机制不能销毁它","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592409036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159104,"user_name":"大树","can_delete":false,"product_type":"c1","uid":1390549,"ip_address":"","ucode":"0B4C9091520DFA","user_header":"https://static001.geekbang.org/account/avatar/00/15/37/d5/22299804.jpg","comment_is_top":false,"comment_ctime":1575538695,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1575538695","product_id":100033601,"comment_content":"箭头函数没有自己的执行上下文，所以箭头函数的 this 就是它外层函数的 this。<br>那么箭头函数 如何存储 存储变量","like_count":0},{"had_liked":false,"id":158766,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1575448177,"is_pvip":false,"replies":[{"id":"60745","content":"function是对象 object","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1575459573,"ip_address":"","comment_id":158766,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1575448177","product_id":100033601,"comment_content":"&#39;JavaScript 中的数据类型一种有 8 种&#39;,怎么没把 ‘function’ 这种类型算进去","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476838,"discussion_content":"function是对象 object","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575459573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149982,"user_name":"趁你还年轻233","can_delete":false,"product_type":"c1","uid":1053875,"ip_address":"","ucode":"B7CC120EF42980","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/b3/b6e1817a.jpg","comment_is_top":false,"comment_ctime":1573440907,"is_pvip":false,"replies":[{"id":"57731","content":"这些都属于object类型","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1573456070,"ip_address":"","comment_id":149982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573440907","product_id":100033601,"comment_content":"“JavaScript 中的数据类型一共有 8 种。”<br><br>TypedArray，Blob，FIle，Promise这些呢？","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474029,"discussion_content":"这些都属于object类型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573456070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149313,"user_name":"William","can_delete":false,"product_type":"c1","uid":1191206,"ip_address":"","ucode":"27326E80DA592E","user_header":"https://static001.geekbang.org/account/avatar/00/12/2d/26/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1573189877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573189877","product_id":100033601,"comment_content":"老师，闭包的内部对象有词法环境和变量环境吗？","like_count":0},{"had_liked":false,"id":149297,"user_name":"William","can_delete":false,"product_type":"c1","uid":1191206,"ip_address":"","ucode":"27326E80DA592E","user_header":"https://static001.geekbang.org/account/avatar/00/12/2d/26/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1573184801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573184801","product_id":100033601,"comment_content":"老师，for循环里的用var定义变量并实现闭包时，此时for循环的var变量是全局的；再看到myName是var关键字声明的，但是根据【闭包的产生过程】这张图片来看，似乎myName是闭包单独持有，并不是全局的，这和for循环中使用var的情况有差别吗，不知道是不是哪里理解错了。","like_count":0},{"had_liked":false,"id":143050,"user_name":"Geek_b724f1","can_delete":false,"product_type":"c1","uid":1625646,"ip_address":"","ucode":"85BC71CDD6E8C2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GF7Z6rWENFlhQdgLiaQtba6BcjyVgMwTxvP46AdZyGVT1iad8z5gwI3F3E8mtumPFTMPib4nGyIflOdNMxd2sqibpA/132","comment_is_top":false,"comment_ctime":1571624291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571624291","product_id":100033601,"comment_content":"我也提交我的，第一次留言，好害怕<br>function copy(src) {<br>\tlet dest = {};<br>\tfor (let key in src) {<br>\t\tif (typeof src[key] == &quot;object&quot;) {<br>\t\t\tdest[key] = copy(src[key]);<br>\t\t} else {<br>\t\t\tdest[key] = src[key];<br>\t\t}<br>\t}<br>\treturn dest;<br>}","like_count":0},{"had_liked":false,"id":133985,"user_name":"芳华年月","can_delete":false,"product_type":"c1","uid":1625161,"ip_address":"","ucode":"79DFE01DCB6767","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/49/4fba1938.jpg","comment_is_top":false,"comment_ctime":1568711525,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1568711525","product_id":100033601,"comment_content":" function test() {<br>        var n = 4399<br><br>        function add() {<br>            n ++;<br>            console.log(n)<br>        }<br>        return {<br>            n: n,<br>            add: add<br>        }<br>    }<br>    var result = test();<br>    var result2 = test();<br>    result.add()<br>    result.add()<br>    console.log(result.n)<br>    result2.add()<br>老师，这个为什么n值没有改变","like_count":0},{"had_liked":false,"id":133239,"user_name":"渡鸦","can_delete":false,"product_type":"c1","uid":1131095,"ip_address":"","ucode":"C76B10CBDCBBE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/57/111fdb41.jpg","comment_is_top":false,"comment_ctime":1568459637,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1568459637","product_id":100033601,"comment_content":"这道题也很典型，谁能帮忙解析下<br>function change(a, b, c) {<br>  a = a * 10<br>  b.name = &#39;changed&#39;<br>  c = {name: &quot;changed&quot;}<br>}<br><br>var num = 10;<br>var obj1 = {name: &quot;unchanged&quot;}<br>var obj2 = {name: &quot;unchanged&quot;}<br><br>console.log(num, obj1, obj2)","like_count":0,"discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252281,"discussion_content":"change(num, obj1, obj2)\n少了一步吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588147814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1305087,"avatar":"","nickname":"randy","note":"","ucode":"4D9E37745E6111","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91729,"discussion_content":"因为传的都是拷贝  没有传引用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576846442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133199,"user_name":"Geek_8476da","can_delete":false,"product_type":"c1","uid":1623282,"ip_address":"","ucode":"9AE358E5F160AE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erMrXia5kb1AXUJoiccmIQxSQ7ib5SkibsQqd9FZInQcwYeNbZXp7CCtMibtg0RLHoza1NVo8A5M3uIluA/132","comment_is_top":false,"comment_ctime":1568440946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568440946","product_id":100033601,"comment_content":"被返回的对象中外部没有被使用到的函数中使用的变量会不会加到clourse()中  ","like_count":0},{"had_liked":false,"id":133187,"user_name":"Geek_8476da","can_delete":false,"product_type":"c1","uid":1623282,"ip_address":"","ucode":"9AE358E5F160AE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erMrXia5kb1AXUJoiccmIQxSQ7ib5SkibsQqd9FZInQcwYeNbZXp7CCtMibtg0RLHoza1NVo8A5M3uIluA/132","comment_is_top":false,"comment_ctime":1568438278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568438278","product_id":100033601,"comment_content":"为什么浏览器从scope中看到c的值不是地址呢？","like_count":0},{"had_liked":false,"id":133183,"user_name":"Geek_8476da","can_delete":false,"product_type":"c1","uid":1623282,"ip_address":"","ucode":"9AE358E5F160AE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erMrXia5kb1AXUJoiccmIQxSQ7ib5SkibsQqd9FZInQcwYeNbZXp7CCtMibtg0RLHoza1NVo8A5M3uIluA/132","comment_is_top":false,"comment_ctime":1568436438,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1568436438","product_id":100033601,"comment_content":"我也得js的动态与弱类型的解释需要换一下","like_count":0,"discussions":[{"author":{"id":1039904,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","nickname":"沧海一声笑","note":"","ucode":"5297F2F4736B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224136,"discussion_content":"这种就没有必要纠结吧 而且js也没有指针啊 我们是用引用类型模拟指针而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586271222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132565,"user_name":"板栗","can_delete":false,"product_type":"c1","uid":1145918,"ip_address":"","ucode":"9774FA44227B22","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/3e/a9eeb2df.jpg","comment_is_top":false,"comment_ctime":1568166625,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1568166625","product_id":100033601,"comment_content":"有一个疑惑，foo 执行上下文销毁后，返回的对象{getName, setName} 存放在哪里呢？ foo 的执行上下文包含它把应该。","like_count":0,"discussions":[{"author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212908,"discussion_content":"存到堆内存，当你赋值给一个变量的时候，这个变量就会指向那个对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585032168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131990,"user_name":"花儿与少年","can_delete":false,"product_type":"c1","uid":1046304,"ip_address":"","ucode":"E2D685737E4F1B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/20/e2dfa9c2.jpg","comment_is_top":false,"comment_ctime":1567999997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567999997","product_id":100033601,"comment_content":"typeof 数据类型落了一个&#39; function&#39;","like_count":0},{"had_liked":false,"id":131119,"user_name":"🍪","can_delete":false,"product_type":"c1","uid":1299829,"ip_address":"","ucode":"2B6D01EA82DE97","user_header":"https://static001.geekbang.org/account/avatar/00/13/d5/75/d93f9648.jpg","comment_is_top":false,"comment_ctime":1567646806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567646806","product_id":100033601,"comment_content":"<br>```js<br>function deepClone(obj, hash = new WeakMap()) {<br>    if (Object(obj) !== obj) return obj; &#47;&#47; primitives<br>    if (hash.has(obj)) return hash.get(obj); &#47;&#47; cyclic reference<br>    var result = Array.isArray(obj) ? [] <br>               : obj.constructor ? new obj.constructor() : Object.create(null);<br>    hash.set(obj, result);<br>    if (obj instanceof Map)<br>        Array.from(obj, ([key, val]) =&gt; result.set(key, deepClone(val, hash)) );<br>    return Object.assign(result, ...Object.keys(obj).map (<br>        key =&gt; ({ [key]: deepClone(obj[key], hash) }) ));<br>}<br>```","like_count":0},{"had_liked":false,"id":130795,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1567554030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567554030","product_id":100033601,"comment_content":"迟交作业咯……<br><br>const copy = function(src) {<br>\tlet dest = {};<br>\tconst keyArr = Object.keys(src)<br><br>\tkeyArr.forEach(function(key) {<br>\t\tlet keyType<br>\t\tif (key === null) {<br>\t\t\tkeyType = &#39;null&#39;<br>\t\t} else {<br>\t\t\tkeyType = typeof key<br>\t\t}<br><br>\t\tif (keyType === &#39;object&#39;) {<br>\t\t\tdest[key] = copy(src[key])<br>\t\t} else {<br>\t\t\tdest[key] = src[key];<br>\t\t}<br>\t})<br><br>\treturn dest<br>}","like_count":0},{"had_liked":false,"id":130757,"user_name":"tokey","can_delete":false,"product_type":"c1","uid":1337746,"ip_address":"","ucode":"5278487F37D4EC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJS0jwYKhjm1hq96go05J4R7XDd5FFXXaoyIfX9TgoI3mLURAu2ET72SvYGM2iaET7IV3WDvMibAVfw/132","comment_is_top":false,"comment_ctime":1567526219,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"1567526219","product_id":100033601,"comment_content":"老师！深拷贝如果遇到循环引用的该如何解决（面试遇到的比较恶心的题）？<br>var obj = {<br>\ta: {}<br>}<br>obj.a.b = obj.a<br>比如这种 obj 是个循环引用的对象。","like_count":0,"discussions":[{"author":{"id":1623560,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/08/628774e8.jpg","nickname":"半瓶水（Herwt）","note":"","ucode":"4B307AE7EE15EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47165,"discussion_content":"5.循环引用拷贝\n1）父级引用——使用parent参数\n这里的父级引用指的是，当对象的某个属性，正是这个对象本身，此时我们如果进行深拷贝，可能会在子元素->父对象->子元素...这个循环中一直进行，导致栈溢出。比如下面这个例子：\nfunction deepCopy2(obj, parent=null) {\n//创建一  \n  function deepCopy2(obj, parent=null) {\n        //创建一个新对象\n        let result = {};\n        let keys = Object.keys(obj),\n             key = null,\n             temp = null,\n             _parent = parent;\n        //该字段有父级则需要追溯该字段的父级\n        while(_parent) {\n            //如果该字段引用了它的父级，则为循环引用\n            if(_parent.originParent === obj) {\n                //循环引用返回同级的新对象\n                return _parent.currentParent;\n            }\n            _parent = _parent.parent\n        }\n        for(let i=0,len=keys.length;i<len;i++) {\n            key = keys[i]\n            temp = obj[key]\n            // 如果字段的值也是一个新对象\n            if(temp &amp;&amp; typeof temp === &#39;object&#39;) {\n                result[key] = deepCopy(temp, {\n                    originParent: obj,\n                    currentParent: result,\n                    parent: parent\n                });\n            } else {\n                result[key] = temp;\n            }\n        }\n        return result;\n    }\n     \n    const obj1 = {\n        x:1\n    }\n    obj1.z = obj1;\n1）同级拷贝——使用WeakMap标识hash\nfunction deepCopy3(obj) {\n    // hash表，记录所有的对象的引用关系\n    let map = new WeakMap();\n    function dp(obj) {\n        let result = null;\n        let keys = Object.keys(obj);\n        let key = null,\n            temp = null,\n            existobj = null;\n \n        existobj = map.get(obj);\n        //如果这个对象已经被记录则直接返回\n        if(existobj) {\n            return existobj;\n        }\n \n        result = {}\n        map.set(obj, result);\n \n        for(let i =0,len=keys.length;i<len;i++) {\n            key = keys[i];\n            temp = obj[key];\n            if(temp &amp;&amp; typeof temp === &#39;object&#39;) {\n                result[key] = dp(temp);\n            }else {\n                result[key] = temp;\n            }\n        }\n        return result;\n    }\n    return dp(obj);\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573285647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1319638,"avatar":"https://static001.geekbang.org/account/avatar/00/14/22/d6/9378f4d5.jpg","nickname":"隔夜果酱","note":"","ucode":"5AFEB62E832BCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8412,"discussion_content":"这种吧\nfunction isObject(o) {\n\treturn Object.prototype.toString.call(o) === &#34;[object Object]&#34;;\n}\nfunction deepClone(obj, hash = new WeakMap()) {\n\tif (!isObject(obj)) return obj;\n\tif (hash.has(obj)) return hash.get(obj); // !\n\tlet cloneObj = Array.isArray(obj) ? [] : {};\n\tlet allDesc = Object.getOwnPropertyDescriptors(obj);\n\tlet symKeys = Object.getOwnPropertySymbols(obj);\n\tsymKeys.forEach((symKey) => (cloneObj[symKey] = obj[symKey]));\n\tcloneObj = Object.create(Object.getPrototypeOf(cloneObj), allDesc);\n\thash.set(obj, cloneObj);\n\tfor (let key in obj) cloneObj[key] = isObject(obj[key]) ? deepClone(obj[key], hash) : obj[key];\n\treturn cloneObj;\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568000158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299829,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d5/75/d93f9648.jpg","nickname":"🍪","note":"","ucode":"2B6D01EA82DE97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7705,"discussion_content":"用 weakmap 来检测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567646785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1337746,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJS0jwYKhjm1hq96go05J4R7XDd5FFXXaoyIfX9TgoI3mLURAu2ET72SvYGM2iaET7IV3WDvMibAVfw/132","nickname":"tokey","note":"","ucode":"5278487F37D4EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1299829,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d5/75/d93f9648.jpg","nickname":"🍪","note":"","ucode":"2B6D01EA82DE97","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7749,"discussion_content":"可否提供下实现思路呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567660389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7705,"ip_address":""},"score":7749,"extra":""}]}]},{"had_liked":false,"id":130397,"user_name":"ytd","can_delete":false,"product_type":"c1","uid":1038790,"ip_address":"","ucode":"C6AEA2D19E447A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/c6/8be8664d.jpg","comment_is_top":false,"comment_ctime":1567440978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567440978","product_id":100033601,"comment_content":"```js<br>function deepCopy(target, source) {<br>  for(k in source) {<br>    if (source[k] !== null &amp;&amp; typeof source[k] === &#39;object&#39;) {<br>      if (Array.isArray(source[k])) {<br>        target[k] = []<br>      } else {<br>        target[k] = {}<br>      }<br>      deepCopy(target[k], source[k])<br>    } else {<br>      target[k] = source[k]<br>    }<br>  }<br>  return target<br>}<br><br>&#47;**<br> * 对象的深拷贝<br> * @param {object} src object src<br> * @return {object}<br> *&#47;<br>function copy(src){<br>  if (src === null) {<br>    return null<br>  }<br>  let dest<br>  &#47;&#47; 实现拷贝代码，将 src 的值完整地拷贝给 dest<br> &#47;&#47; 在这里实现<br>  dest = deepCopy({}, src)<br>  return dest<br>}<br>let jack2 = copy(jack)<br><br>&#47;&#47; 比如修改 jack2 中的内容，不会影响到 jack 中的值<br>jack2.like.dog.color = &#39;green&#39;<br>console.log(jack.like.dog.color) &#47;&#47; 打印出来的应该是 &quot;black&quot;<br>```","like_count":0},{"had_liked":false,"id":130382,"user_name":"忘忧草的约定","can_delete":false,"product_type":"c1","uid":1114753,"ip_address":"","ucode":"F99D2F5D179B2A","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/81/489e1cd4.jpg","comment_is_top":false,"comment_ctime":1567437998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567437998","product_id":100033601,"comment_content":"老师您好，我想请教一个问题：clourse(foo) 对象是在setName方法的执行上下文的变量环境中还是outer中？是在对setName函数进行词法扫描时写入的吗？","like_count":0},{"had_liked":false,"id":130331,"user_name":"谢海涛","can_delete":false,"product_type":"c1","uid":1216699,"ip_address":"","ucode":"9408053AF26876","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/bb/c29f0f99.jpg","comment_is_top":false,"comment_ctime":1567426798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567426798","product_id":100033601,"comment_content":"function copy(target, source) {<br>    for (let k in source) {<br>        if (typeof source[k] === &#39;object&#39;) {<br>            target[k] = {};<br>            copy(target[k], source[k])<br>        } else {<br>            target[k] = source[k]<br>        }<br>    }<br>    return target<br>}","like_count":0},{"had_liked":false,"id":130173,"user_name":"Angus","can_delete":false,"product_type":"c1","uid":1377467,"ip_address":"","ucode":"7CC3BA1550FB5B","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/bb/5e5c37c1.jpg","comment_is_top":false,"comment_ctime":1567396729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567396729","product_id":100033601,"comment_content":"老师示例代码的最后两行有笔误：&quot;green&quot; 与 console<br>      let jack = {<br>        name: &quot;jack.ma&quot;,<br>        age: 40,<br>        like: {<br>          dog: {<br>            color: &quot;black&quot;,<br>            age: 3<br>          },<br>          cat: {<br>            color: &quot;white&quot;,<br>            age: 2<br>          }<br>        }<br>      };<br>      function copy(src) {<br>        &#47;&#47; 实现拷贝代码，将 src 的值完整地拷贝给 dest<br>        &#47;&#47; 在这里实现<br>        if (typeof src !== &quot;object&quot; || !src) return src; &#47;&#47; 基础数据类型与null<br>        let dest = src instanceof Array ? [] : {};<br>        for (let key in src) {<br>          if (src.hasOwnProperty(key)) {<br>            dest[key] =<br>              typeof src[key] === &quot;object&quot; &amp;&amp; src[key] !== null<br>                ? copy(src[key])<br>                : src[key];<br>          }<br>        }<br><br>        return dest;<br>      }<br>      let jack2 = copy(jack);<br><br>      &#47;&#47; 比如修改 jack2 中的内容，不会影响到 jack 中的值<br>      jack2.like.dog.color = &quot;green&quot;;<br>      console.log(jack.like.dog.color); &#47;&#47; 打印出来的应该是 &quot;black&quot;<br><br>栈空间用来存放执行上下文、堆空间用来存储引用类型数据。<br><br>那么除此之外，JavaScript引擎中的堆空间和栈空间还会有别的用途吗？","like_count":0},{"had_liked":false,"id":129766,"user_name":"周大侠","can_delete":false,"product_type":"c1","uid":1011288,"ip_address":"","ucode":"4C76FE3CF0C96D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/58/59673667.jpg","comment_is_top":false,"comment_ctime":1567244719,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1567244719","product_id":100033601,"comment_content":"JSON.parse(JSON.stringify()) 拷贝，比较投机取巧的方法","like_count":0,"discussions":[{"author":{"id":1956684,"avatar":"","nickname":"Geek_4d85bf","note":"","ucode":"477B405EDE8286","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257620,"discussion_content":"递归深拷贝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588595534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1956684,"avatar":"","nickname":"Geek_4d85bf","note":"","ucode":"477B405EDE8286","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257619,"discussion_content":"这种方法不准确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588595525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129719,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1567230011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567230011","product_id":100033601,"comment_content":"思考题其实就是实现一个深拷贝，最简单的方式就是JSON.parse(JSON.stringify(data))<br>再者就是递归实现，循环遍历对象的每个属性，如果属性又是一个对象，就再次递归。","like_count":0},{"had_liked":false,"id":129718,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1567229902,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1567229902","product_id":100033601,"comment_content":"老师可以说一下逃逸分析是什么吗？","like_count":0,"discussions":[{"author":{"id":1956684,"avatar":"","nickname":"Geek_4d85bf","note":"","ucode":"477B405EDE8286","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257617,"discussion_content":"你们知道的太多了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588595468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1624537,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","nickname":"Slowdive","note":"","ucode":"AF3429CE47C462","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227340,"discussion_content":"逃逸分析大概就是修改词法作用域， 看你不知道js，忘了是第几本，讲this之前说过逃逸分析。 生产中用处不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586484774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129660,"user_name":"Miracle","can_delete":false,"product_type":"c1","uid":1373357,"ip_address":"","ucode":"C98378B19CDF1E","user_header":"https://static001.geekbang.org/account/avatar/00/14/f4/ad/33d67855.jpg","comment_is_top":false,"comment_ctime":1567210474,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1567210474","product_id":100033601,"comment_content":"使用 Object.assign(dest, src)，然后返回dest赋值给jack2","like_count":0,"discussions":[{"author":{"id":1956684,"avatar":"","nickname":"Geek_4d85bf","note":"","ucode":"477B405EDE8286","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257618,"discussion_content":"递归深拷贝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588595498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1159960,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/18/e061e898.jpg","nickname":"AYK","note":"","ucode":"68E8C21A862A7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7157,"discussion_content":"需要的深拷贝哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567407751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}