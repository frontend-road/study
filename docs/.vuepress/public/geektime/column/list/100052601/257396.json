{"id":257396,"title":"18 | 函数式编程之组合性：函数式编程为什么如此吸引人？","content":"<p>你好！我是郑晔。</p><p>从上一讲开始，我们开启了函数式编程之旅，相信你已经对函数式编程有了一个初步的认识。函数式编程是一种以函数为编程元素的编程范式。但是，如果只有函数这一样东西，即使是说出花来，也没有什么特别的地方。</p><p>之前我讲过，GC来自于函数式编程，Lambda也来自于函数式编程。此外，在 Java 8增加的对函数式编程的处理中，流（Stream）的概念也从函数式编程中来，Optional也和函数式编程中的一些概念有着紧密的联系。由此可见，函数式编程给我们提供了许多优秀的内容。</p><p>接下来，我们来<strong>讲讲函数式编程在设计上对我们帮助最大的两个特性：组合性和不变性。</strong></p><p>首先，我们来讨论一下组合性，看看函数式编程为什么能够如此吸引人。</p><h2>组合行为的高阶函数</h2><p>在函数式编程中，有一类比较特殊的函数，它们可以接收函数作为输入，或者返回一个函数作为输出。这种函数叫做<strong>高阶函数</strong>（High-order function）。</p><p>听上去稍微有点复杂，如果我们回想一下高中数学里有一个复合函数的概念，也就是 f(g(x)) ，把一个函数和另一个函数组合起来，这么一类比，是不是就好接受一点了。</p><p>那么，<strong>高阶函数有什么用呢？它的一个重要作用在于，我们可以用它去做行为的组合</strong>。我们再来回顾一下上一讲写过的一段代码：</p><!-- [[[read_end]]] --><pre><code>find(byName(name).and(bySno(sno)));\n</code></pre><p>在这里面，find的方法就扮演了一个高阶函数的角色。它接收了一个函数作为参数，由此，一些处理逻辑就可以外置出去。这段代码的使用者，就可以按照自己的需要任意组合。</p><p>你可能注意到了，这里的find方法只是一个普通的Java函数。是这样的，如果不需要把这个函数传来传去，普通的Java函数也可以扮演高阶函数的角色。</p><p>可以这么说，高阶函数的出现，让程序的编写方式出现了质变。按照传统的方式，程序库的提供者要提供一个又一个的完整功能，就像findByNameAndBySno这样，但按照函数式编程的理念，提供者提供的就变成了一个又一个的构造块，像find、byName、bySno这样。然后，使用者可以根据自己的需要进行组合，非常灵活，甚至可以创造出我们未曾想过的组合方式。</p><p>这就是典型的函数式编程风格。<strong>模型提供者提供出来的是一个又一个的构造块，以及它们的组合方式。由使用者根据自己需要将这些构造块组合起来，提供出新的模型，供其他开发者使用</strong>。就这样，模型之间一层又一层地逐步叠加，最终构建起我们的整个应用。</p><p>前面我们讲过，一个好模型的设计就是逐层叠加。<strong>函数式编程的组合性，就是一种好的设计方式</strong>。</p><p>但是，能把模型拆解成多个可以组合的构造块，这个过程非常考验人的洞察力，也是“分离关注点”的能力，但是这个过程可以让人得到一种智力上的愉悦。为什么函数式编程一直处于整个IT行业的角落里，还能吸引一大批优秀的开发者前赴后继地投入其中呢？这种智力上的愉悦就是一个重要的原因。</p><p>还记得我们在课程一开始讲的分层模型吗？这一点在函数式编程社区得到了非常好的体现。著名的创业孵化器<a href=\"https://www.ycombinator.com/\">Y Combinator</a>的创始人Paul Graham曾经写过一篇文章《<a href=\"http://www.paulgraham.com/rootsoflisp.html\">The Roots of Lisp</a>》（<a href=\"http://daiyuwen.freeshell.org/gb/rol/roots_of_lisp.html\">中文版</a>），其中用了七个原始操作符加上函数定义的方式，构建起一门LISP语言。</p><p>没错，是构建了一门语言。有了语言，你就可以去完成任何你想做的事了。这篇文章非常好地体现了函数式编程社区这种逐步叠加构建模型的思想。有兴趣的话，你可以去读一下。</p><p>当我们把模型拆解成小的构造块，如果构造块足够小，我们自然就会发现一些通用的构造块。</p><h2>列表转换思维</h2><p>我们说过，早期的函数式编程探索是从LISP语言开始的。LISP这个名字源自“List Processing”，这个名字指明了这个语言中的一个核心概念：List，也就是列表。程序员对List并不陌生，这是一种最为常用的数据结构，现在的程序语言几乎都提供了各自List的实现。</p><p>LISP 的一个洞见就是，大部分操作最后都可以归结成列表转换，也就是说，数据经过一系列的列表转换会得到一个结果，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/a7/3cbf06a7962dc5ed3db56d3f93859aa7.jpg?wh=2284*1285\" alt=\"\"></p><p><strong>想要理解这一系列的转换，就要先对每个基础的转换有所了解。最基础的列表转换有三种典型模式，分别是map、filter和reduce</strong>。如果我们能够正确理解它们，基本上就可以把for循环抛之脑后了。做过大数据相关工作的同学一定听说过一个概念：MapReduce，这是最早的一个大数据处理框架，这里的map和reduce就是源自函数式编程里列表转换的模式。</p><p>接下来，我们就来一个一个地看看它们分别是什么。</p><p>首先是map。map就是把一组数据通过一个函数映射为另一组数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/a2/ea79b6143783def94684df60023811a2.jpg?wh=2284*1285\" alt=\"\"></p><p>比如，我有一组数[1、2、3、4]，然后做了一个map操作，这里用作映射的函数是乘以2，也就是说，这组数里面的每个元素都乘以2，这样，我就得到了一组新的数[2、4、6、8]。</p><p>再来看filter。filter是把一组数据按照某个条件进行过滤，只有满足条件的数据才会留下。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/16/8f1653c0aa10e5c97b266ea898ec2f16.jpg?wh=2284*1285\" alt=\"\"></p><p>同样[1、2、3、4]为例，我们做一个filter操作，过滤的函数是大于2，也就是说，只有大于2的数才会留下，得到的结果就是[3、4]。</p><p>最后是reduce。reduce就是把一组数据按照某个规则，归约为一个数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/62/fcfcd8af1e638839b831c932eae9e962.jpg?wh=2284*1285\" alt=\"\"></p><p>还是[1、2、3、4]，如果我们做一个reduce操作，其归约函数是一个加法操作，也就是这组数里面的每个元素相加，最终会得到一个结果，也就是 1+2+3+4=10。</p><p>好，有了基础之后，我们就可以利用这些最基础的转换模式去尝试解决问题了。比如，上一讲我们讲了一个学生的例子，现在，我们想知道这些学生里男生的总数。我们可以给Student类增加一个性别的字段：</p><pre><code>// 单个学生的定义\nclass Student {\n  ...\n  // 性别\n  private Gender gender;\n}\n</code></pre><p>要想知道男生的总数，传统做法应该是这么做：</p><pre><code>long countMale() {\n  long count = 0;\n  for (Student student : students) {\n    if (Gender.MALE == student.getGender())) {\n        count++;\n    }\n  }\n\n  return count;\n}\n</code></pre><p>按照列表转换的思维来做的话，我们该怎么做呢？首先，要把这个过程做一个分解：</p><ul>\n<li>取出性别字段；</li>\n<li>判别性别是否为男性；</li>\n<li>计数加1。</li>\n</ul><p>这三步刚好对应着map、filter和reduce：</p><ul>\n<li>取出性别字段，对应着map，其映射函数是取出学生的性别字段；</li>\n<li>判别性别是否为男性，对应filter，其过滤函数是，性别为男性；</li>\n<li>计数加1，对应着reduce，其归约函数是，加1。</li>\n</ul><p>有了这个分解的结果，我们再把它映射到代码上。Java 8对于函数式编程的支持，除了Lambda之外，它也增加了对列表转换的支持。为了兼容原有的API，它提供了一个新的接口：Stream，你可以把它理解成List的另一种表现形式。如果把上面的步骤用Java 8的Stream方式写出来，代码应该是这样的：</p><pre><code>long countMale() {\n    return students.stream()\n            .map(student -&gt; student.getGender())\n            .filter(gender -&gt; gender == Gender.MALE)\n            .map(gender -&gt; 1L)\n            .reduce(0L, (sum, element) -&gt; sum + element);\n}\n</code></pre><p>这基本和上面操作步骤是一一对应的，只是多了一步将性别转换成1，便于后面的计算。</p><p>map、filter和reduce只是最基础的三个操作，列表转换可以提供的操作远远比这个要多。不过，你可以这么理解，大多数都是在这三个基础上进行了封装，提供一种快捷方式。比如，上面代码的最后两步map和reduce，在Java 8的Stream接口提供了一个count方式，可以写成方法：</p><pre><code>long countMale() {\n    return students.stream()\n            .map(Student::getGender)\n            .filter(byGender(Gender.MALE))\n            .count();\n}\n\nstatic Predicate&lt;Gender&gt; byGender(final Gender target) {\n    return gender -&gt; gender == target;\n}\n</code></pre><p>一方面，我用了方法引用（Student::getGender），这是Java提供的简化代码编写的一种方式。另一方面，我还把按照性别比较提取了出来，如此一来，代码的可读性就提升了，你基本上可以把它同前面写的操作步骤完全对应起来了。</p><p>同样是一组数据的处理，我更鼓励使用函数式的列表转换，而不是传统的 for 循环。一方面因为它是一种更有表达性的写法，从前面的代码就可以看到，它几乎和我们想做的事是一一对应的。另一方面，这里面提取出来比较性别的方法，它就是一个可以用作组合的基础接口，可以在多种场合复用。</p><p>很多Java程序员适应不了这种写法，一个重要的原因在于，他们缺少对于列表转换的理解。缺少了一个重要的中间环节，必然会出现不适。</p><p>你回想一下，我们说过结构化编程给我们提供了一些基础的控制结构，那其实也是一层封装，只不过，我们在编程之初就熟悉了if、for之类的写法。如果你同样熟悉函数式编程的基础设施，这些代码理解起来同那些控制结构没有什么本质区别，而且这些基础设施的抽象级别要比那些控制结构更高，提供了更好的表达性。</p><p>我们之前在讲DSL的时候就谈到过代码的表达性，其中一个重要的观点就是，有一个描述了做什么的接口之后，具体怎么做就可以在背后不断地进行优化。比如，如果一个列表的数据特别多，我们可以考虑采用并发的方式进行处理，而这种优化在使用端完全可以做到不可见。MapReduce 甚至将运算分散到不同的机器上执行，其背后的逻辑是一致的。</p><h2>面向对象与函数式编程的组合</h2><p>至此，我们已经学习了函数式编程的组合。你可能会有一个疑问，我们之前在讲面向对象的时候，也谈到了组合，这里讲函数式编程，又谈到了组合。这两种组合之间是什么关系呢？其实，对比一下代码，你就不难发现了，面向对象组合的元素是类和对象，而函数式编程组合的是函数。</p><p>这也就牵扯到在实际工作中，如何将面向对象和函数式编程两种不同的编程范式组合运用的问题。<strong>我们可以用面向对象编程的方式对系统的结构进行搭建，然后，用函数式编程的理念对函数接口进行设计</strong>。你可以把它理解成盖楼，用面向对象编程搭建大楼的骨架，用函数式编程设计门窗。</p><p>通过这两讲的例子，相信你已经感受到，一个好的函数式的接口，需要我们做的同样是“分离关注点”。虽然你不知道组合的方式会有多少种，但你知道，所有的变化其实就是一些基础元素的不断组合。在后面的巩固篇中，讲到Moco时，我们还会领略到这种函数式接口的魅力。</p><h2>总结时刻</h2><p>今天，我先给你讲了一类特殊的函数——高阶函数，它可以接受函数或返回函数。有了高阶函数，函数式编程就可以组合了，把不同的函数组合在一起完成功能，这也给逐层构建新抽象埋下了伏笔，函数式编程从此变得精彩起来。从设计的角度看，这种模型的层层叠加，是一种好的设计方式。</p><p>函数式编程中，还有一个重要的体系，就是列表转换的思想，将很多操作分解成若干转换的组合。最基础的三个转换是：map、filter和reduce，更多的转换操作都可以基于这三个转换完成。</p><p>面向对象和函数式编程都提到了组合性，不同的是，面向对象关键在于结构的组合，而函数式编程在于函数接口的组合。</p><p>组合性为我们提供了一个让函数接口组合的方式，下一讲我们再来讲一个让代码减少Bug的设计理念：不变性。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>设计可以组合的函数接口</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/61/3a8b5db0d00f84bacf93d9bf80e10d61.jpg?wh=2284*1094\" alt=\"\"></p><h2>思考题</h2><p>函数式编程的组合性会给人带来极大的智力愉悦，你在学习软件开发的过程中，还有哪些东西曾经给你带来极大的智力愉悦呢？欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"17 | 函数式编程：不用函数式编程语言，怎么写函数式的程序？","id":256862},"right":{"article_title":"19 | 函数式编程之不变性：怎样保证我的代码不会被别人破坏？","id":258214}},"comments":[{"had_liked":false,"id":232654,"user_name":"Being","can_delete":false,"product_type":"c1","uid":1152227,"ip_address":"","ucode":"80A8783927B650","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/e3/ed118550.jpg","comment_is_top":false,"comment_ctime":1594080979,"is_pvip":false,"replies":[{"id":"85897","content":"有这一点启发，足矣！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594090434,"ip_address":"","comment_id":232654,"utype":1}],"discussion_count":1,"race_medal":0,"score":"91788394195","product_id":100052601,"comment_content":"大概就是通过拆解、组合的重构手法，减少for的圈复杂度吧，for嵌套多了确实头大。今天函数式编程的组合再次给了我启发，当我要写for循环的时候，就提醒自己可否用列表转化的思维尝试下。","like_count":22,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500723,"discussion_content":"有这一点启发，足矣！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594090434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232514,"user_name":"J.D.Chi","can_delete":false,"product_type":"c1","uid":1035855,"ip_address":"","ucode":"34812AEF95C7AB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/4f/3a89d29a.jpg","comment_is_top":false,"comment_ctime":1594025319,"is_pvip":false,"replies":[{"id":"85842","content":"这就是声明式编程，说明做什么，不必关心怎么做。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594045074,"ip_address":"","comment_id":232514,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83198403943","product_id":100052601,"comment_content":"之前看了一本书叫《函数式编程思维》，里面说了一个点，就是用函数式就是把一些事情交给编程语言去做，程序员不用去思考怎么实现，就像在list里的查找，我不用去考虑遍历的方法，只要给个条件，返回我要的结果就行了。","like_count":20,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500674,"discussion_content":"这就是声明式编程，说明做什么，不必关心怎么做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594045074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008468,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/54/c9475cd0.jpg","nickname":"cz","note":"","ucode":"96385190176F78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383681,"discussion_content":"怎么做绑定了具体实现， 做什么只声明了输入输出，底层可以切换不同的实现，只要语义上是正确的就可以。 做什么留下了优化空间， 不同资源场景下可以针对性切换不同实现方式， 比如内存消耗和时间消耗的权衡。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626188221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232369,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1593970314,"is_pvip":false,"replies":[{"id":"85795","content":"哈哈，烂代码容忍度越来越差，这不就是你水平提高了吗？","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594006929,"ip_address":"","comment_id":232369,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27363774090","product_id":100052601,"comment_content":"<br>将单纯结构化的功能代码，重构成了领域模型+应用层引用的方式。属于领域模型的功能内敛，应用层对这些功能的复杂性无感。同时在多个应用层间，该领域模型的功能都是可以复用的，不管是代码去重还是复用性都有不错的提高。（让代码整洁合理，不确定是不是智力上的愉悦，但真的很爽。但不好的点是，烂代码的容忍度越来越差）","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500615,"discussion_content":"哈哈，烂代码容忍度越来越差，这不就是你水平提高了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594006929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289151,"discussion_content":"烂代码容忍度差，有时不利于融入团队，也不利于阅读代码。我是真拿它作为不好的副作用看待的。如何心平气和在一堆烂代码里面游刃有余，是我下个努力的方向。其实大佬提到的分离关注点，本身就是很好的突破点。关注点足够聚焦足够具体，应该能有效降低外部烂代码带来的心态上的烦躁。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594007267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008468,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/54/c9475cd0.jpg","nickname":"cz","note":"","ucode":"96385190176F78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383687,"discussion_content":"原来这个叫领域模型 + 应用层啊， 看来得看看DDD相关的东西了。\n最近在重构一个大的接口， 我是把一个个相对隔离的业务需求内聚成一个个小类， 再加上一个入口，把一个个小类组合起来，业务的复杂性统一由小类处理。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626188813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232632,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1000417,"ip_address":"","ucode":"8D48F4B9045947","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","comment_is_top":false,"comment_ctime":1594054705,"is_pvip":false,"replies":[{"id":"85866","content":"它们是一种常见的高阶函数。没有提供实现的语言也可以自己写一个，参考Guava中的实现。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594075625,"ip_address":"","comment_id":232632,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18773923889","product_id":100052601,"comment_content":" map、filter 和 reduce 是编程语言的特性吧，在一些语言或语言的版本中不一定能看到？","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500713,"discussion_content":"它们是一种常见的高阶函数。没有提供实现的语言也可以自己写一个，参考Guava中的实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594075625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347720,"user_name":"星期一","can_delete":false,"product_type":"c1","uid":1125327,"ip_address":"","ucode":"2957D71C555E43","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/cf/bfb4d21f.jpg","comment_is_top":false,"comment_ctime":1654348611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5949315907","product_id":100052601,"comment_content":"如何理解【函数式编程的理念对函数接口进行设计】","like_count":0},{"had_liked":false,"id":306997,"user_name":"阿姆斯壮","can_delete":false,"product_type":"c1","uid":1265599,"ip_address":"","ucode":"87D5923D639CD6","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/bf/6584bdeb.jpg","comment_is_top":false,"comment_ctime":1628821345,"is_pvip":false,"replies":[{"id":"111199","content":"哈哈，凡尔赛。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628855171,"ip_address":"","comment_id":306997,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5923788641","product_id":100052601,"comment_content":"立马用上校长教的方法。组合函数加柯理化。被同事说俺在炫技。。。这算是一种凡尔赛么。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525009,"discussion_content":"哈哈，凡尔赛。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628855171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410189,"discussion_content":"柯里化～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635608930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302441,"user_name":"独孤九剑","can_delete":false,"product_type":"c1","uid":2230909,"ip_address":"","ucode":"6C1253E2B8C1D4","user_header":"https://static001.geekbang.org/account/avatar/00/22/0a/7d/ac715471.jpg","comment_is_top":false,"comment_ctime":1626225627,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5921192923","product_id":100052601,"comment_content":"“接口”是稳定的“边界”，函数式编程的关键在于“接口”&#47;“行为”的组合与“列表转换”","like_count":2,"discussions":[{"author":{"id":1331611,"avatar":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","nickname":"安迪密恩","note":"","ucode":"A6F3F67CF8E6F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588960,"discussion_content":"精辟，太精辟了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664263143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266652,"user_name":"鐘","can_delete":false,"product_type":"c1","uid":1518535,"ip_address":"","ucode":"0106652D5F7BD9","user_header":"https://static001.geekbang.org/account/avatar/00/17/2b/c7/9c8647c8.jpg","comment_is_top":false,"comment_ctime":1607427079,"is_pvip":true,"replies":[{"id":"96852","content":"你可以理解成就是普通的函数接口，高阶函数只不过是传入的是一个函数对象而已。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1607482508,"ip_address":"","comment_id":266652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5902394375","product_id":100052601,"comment_content":"請問老師：&quot;函數的接口設計&quot; 指的是不是設計高階函數, 設計組合函數(達到某種功能)的函數？比如說設計出像是 filter, map, reduce 這種函數？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511342,"discussion_content":"你可以理解成就是普通的函数接口，高阶函数只不过是传入的是一个函数对象而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607482508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232927,"user_name":"silentyears","can_delete":false,"product_type":"c1","uid":1061748,"ip_address":"","ucode":"6E137BFEB874CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/33/74/d9d143fa.jpg","comment_is_top":false,"comment_ctime":1594170673,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5889137969","product_id":100052601,"comment_content":"请问老师，函数式编程，stream和响应式编程三者分别的本质是什么？有什么异同点？","like_count":1},{"had_liked":false,"id":232455,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1594009403,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5888976699","product_id":100052601,"comment_content":"js中仅使用解构操作实现列表及常用操作：https:&#47;&#47;exercism.io&#47;tracks&#47;javascript&#47;exercises&#47;list-ops&#47;solutions&#47;89919d0ba69743658f1ddb094a561b3e","like_count":1},{"had_liked":false,"id":232453,"user_name":"Geek_2e6a7e","can_delete":false,"product_type":"c1","uid":2027323,"ip_address":"","ucode":"BCDD3367AC16FD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyPPFIyvytj0LJrpHicVrTqibuLWLWcR5VqzArSHZicwJYC6gKrIF6GTxx4MakS6xiaxZBCw8icCPB8wQ/132","comment_is_top":false,"comment_ctime":1594007758,"is_pvip":true,"replies":[{"id":"85900","content":"你觉得函数式编程有哪些问题需要进一步讲解呢？后面关于函数式编程还会有一些内容，等讲完了，你看看还需要补充点什么。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594094407,"ip_address":"","comment_id":232453,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5888975054","product_id":100052601,"comment_content":"函数式编程算是比较了解了，建议作者讲讲函数式学习的难点和思维方式，通过什么刻意练习提高？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500651,"discussion_content":"你觉得函数式编程有哪些问题需要进一步讲解呢？后面关于函数式编程还会有一些内容，等讲完了，你看看还需要补充点什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594094407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2027323,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyPPFIyvytj0LJrpHicVrTqibuLWLWcR5VqzArSHZicwJYC6gKrIF6GTxx4MakS6xiaxZBCw8icCPB8wQ/132","nickname":"Geek_2e6a7e","note":"","ucode":"BCDD3367AC16FD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289445,"discussion_content":"本人从事大数据，对scala比较了解。想看看你在如下方面的理解\n（1）不变性会导致大量数据拷贝，scala有惰性求值特性解决，java有相关方案么，或者说函数式的通用方案？\n（2）要能很顺畅写出来函数式的话，感觉思维要习惯性通过递归编程，这块有啥好的分享？\n（3）其实函数式对抽象思维要求很高，像一些抽象的方法，Monoid和Monad这些概念能深入浅出讲解下么\n（4）一个自己并发程序：\n单并发执行 时间 1034 ms\nList.range(0,100000).map( a => math.pow(a, 1/8))\n10线程的线程池执行 20484 ms\nval p = actor2.parMap(List.range(0,10000))(math.pow(_, 1/8))\nactor2.run(Executors.newFixedThreadPool(10))(p)\n多并发耗时较大，一般主要是在什么地方耗时？\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594102022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1390170,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/5a/9188729f.jpg","nickname":"阿彪","note":"","ucode":"69FFF3454A2E13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2027323,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyPPFIyvytj0LJrpHicVrTqibuLWLWcR5VqzArSHZicwJYC6gKrIF6GTxx4MakS6xiaxZBCw8icCPB8wQ/132","nickname":"Geek_2e6a7e","note":"","ucode":"BCDD3367AC16FD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":543647,"discussion_content":"请问老师后面有讲不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641258996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":289445,"ip_address":""},"score":543647,"extra":""}]}]},{"had_liked":false,"id":232364,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1593967956,"is_pvip":false,"replies":[{"id":"86724","content":"这个理解没有问题！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594864390,"ip_address":"","comment_id":232364,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888935252","product_id":100052601,"comment_content":"函数式编程其实也是一种对传统编程思想的转变<br>面向对象编程是对系统结构的组合，函数式编程是对接口的组合<br>这些编码规则或者范式也是对“分离关注点”的深刻理解之后抽象出来的标准模式<br>如果同样问题经常出现，那么标准的解决方案也会出现","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500613,"discussion_content":"这个理解没有问题！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594864390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345818,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652612146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652612146","product_id":100052601,"comment_content":"设计可以组合的函数接口--记下来","like_count":0},{"had_liked":false,"id":345288,"user_name":"愿凌飞","can_delete":false,"product_type":"c1","uid":2357458,"ip_address":"","ucode":"E80CC09C7D528D","user_header":"https://static001.geekbang.org/account/avatar/00/23/f8/d2/494c182a.jpg","comment_is_top":false,"comment_ctime":1652174471,"is_pvip":false,"replies":[{"id":"126198","content":"加油加油！","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1652625314,"ip_address":"","comment_id":345288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652174471","product_id":100052601,"comment_content":"我在看一些源码的过程，发现最让我惊叹的是抽象能力和基于抽象做出的解耦。无论是从函数编程还是对象编程，想做一个 ”抗用“的项目，设计的时候必须都要做好抽象和基础抽象做出的解耦。做出来的话调度性很高，扩展性极强，解决问题更加容易。此时我发现了它是如此之美。我一直在想，我怎么才会做出这样的项目，我想我在这里找到了答案。希望有一天可以拥有这样的设计能力。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572173,"discussion_content":"加油加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652625314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314643,"user_name":"Numbpad1","can_delete":false,"product_type":"c1","uid":1114772,"ip_address":"","ucode":"2F075AC7E3847D","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/94/2bf394f3.jpg","comment_is_top":false,"comment_ctime":1633275063,"is_pvip":false,"replies":[{"id":"114154","content":"遗憾的是，很多程序员不理解","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1633788108,"ip_address":"","comment_id":314643,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633275063","product_id":100052601,"comment_content":"MapReduce真的是很棒的思想，使用这种方式写出来的代码更具人类的思维模式。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527748,"discussion_content":"遗憾的是，很多程序员不理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633788108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304829,"user_name":"晴天了","can_delete":false,"product_type":"c1","uid":1359669,"ip_address":"","ucode":"5310E02F8DF1F0","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/35/0e3a92a7.jpg","comment_is_top":false,"comment_ctime":1627633204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627633204","product_id":100052601,"comment_content":"有个问题请教下 老师<br><br>面相对象编程: 分为封装继承多态抽象 继承和多态和抽象建立在封装上 多态和抽象有部分是建立在接口继承上<br><br>函数式编程: 高阶函数 组合 柯里化 给我的感觉并且疑惑的点是 做的事情都差不多 都是组合’生产‘函数 ， 然后调用生产出的函数 处理数据。 <br><br>函数式编程是否也与面相对象类似,是一种特性建立在另一种特性上边吗？ 所以因此造成了我现在的困惑吗？","like_count":1},{"had_liked":false,"id":299382,"user_name":"呆呆狗的兽","can_delete":false,"product_type":"c1","uid":2404924,"ip_address":"","ucode":"B7D445F3BE2E4C","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","comment_is_top":false,"comment_ctime":1624603928,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1624603928","product_id":100052601,"comment_content":"reactor响应式编程，写rx代码真的让人很舒服，subscribe方法就像是个导火索，也就是尾部先执行，就像点燃整个代码链路的感觉，然后从observable开始，下一层对上一层的代码的执行做出反应，最后完成所有代码的执行，当时搞懂了这个思想后真的感觉极度舒适<br><br>而且这个在前端用的最多，因为有了这个思想，ui代码写在了subscribe方法里，可以先展示，静待数据查询与加工等，再陆续渲染，完成了非线程方式编码的异步，妙哉","like_count":1,"discussions":[{"author":{"id":1253651,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/13/dcb73f77.jpg","nickname":"灵润明","note":"","ucode":"900106262677A6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572929,"discussion_content":"同学，没看明白，有demo么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653049995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263706,"user_name":"惜心（伟祺）","can_delete":false,"product_type":"c1","uid":1067846,"ip_address":"","ucode":"393DF1A9E81332","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/46/717d5cb9.jpg","comment_is_top":false,"comment_ctime":1606226181,"is_pvip":false,"replies":[{"id":"95895","content":"函数式编程的美确实是一种智力上的愉悦。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1606520660,"ip_address":"","comment_id":263706,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606226181","product_id":100052601,"comment_content":"函数式编程本身是自洽的 具有类似数组的自包含、规则的自生成 确实很优美 ","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510276,"discussion_content":"函数式编程的美确实是一种智力上的愉悦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606520660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255457,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603349171,"is_pvip":false,"replies":[{"id":"100539","content":"列表转换需要练一下，熟悉了就好了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612255890,"ip_address":"","comment_id":255457,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603349171","product_id":100052601,"comment_content":"上一次觉得很爽是这几天，看完老师面向对象的几章之后去用多态和封装重构了以前的一个结构化的代码。<br><br>列表转换的思想还是理解起来有点难度，看评论里说是消除for循环，回头有意识地去找旧代码来优化下试试。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507722,"discussion_content":"列表转换需要练一下，熟悉了就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612255890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245892,"user_name":"hph","can_delete":false,"product_type":"c1","uid":2027011,"ip_address":"","ucode":"83EF84001C3BA9","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ee/03/50b5e0d5.jpg","comment_is_top":false,"comment_ctime":1599102881,"is_pvip":true,"replies":[{"id":"100129","content":"学习最好的方式是在实践中学。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611728490,"ip_address":"","comment_id":245892,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1599102881","product_id":100052601,"comment_content":"接触面太窄了，只搞过C#，这就是C#中的linq吧，.WHERE .SELECT .ORDERBY等等，反正用的时候是贼爽，是时候辞职专心学习一段时间了","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505004,"discussion_content":"学习最好的方式是在实践中学。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611728490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008468,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/54/c9475cd0.jpg","nickname":"cz","note":"","ucode":"96385190176F78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383689,"discussion_content":"基本上一样的效果， LINQ的功能更强大一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626188964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241221,"user_name":"butterfly","can_delete":false,"product_type":"c1","uid":1392924,"ip_address":"","ucode":"1B724973303FB0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rRCSdTPyqWcW6U8DO9xL55ictNPlbQ38VAcaBNgibqaAhcH7mn1W9ddxIJLlMiaA5sngBicMX02w2HP5pAWpBAJsag/132","comment_is_top":false,"comment_ctime":1597218280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597218280","product_id":100052601,"comment_content":"我们可以用面向对象编程的方式对系统的结构进行搭建，然后，用函数式编程的理念对函数接口进行设计.<br>醍醐灌顶啊","like_count":0}]}