{"id":424002,"title":"18｜错误处理：为什么Rust的错误处理与众不同？","content":"<p>你好，我是陈天。</p><p>作为被线上业务毒打过的开发者，我们都对墨菲定律刻骨铭心。任何一个系统，只要运行的时间足够久，或者用户的规模足够大，极小概率的错误就一定会发生。比如，主机的磁盘可能被写满、数据库系统可能会脑裂、上游的服务比如 CDN 可能会宕机，甚至承载服务的硬件本身可能损坏等等。</p><p>因为我们平时写练习代码，一般只会关注正常路径，可以对小概率发生的错误路径置之不理；<strong>但在实际生产环境中，任何错误只要没有得到妥善处理，就会给系统埋下隐患</strong>，轻则影响开发者用户体验，重则会给系统带来安全上的问题，马虎不得。</p><p>在一门编程语言中，控制流程是语言的核心流程，而错误处理又是控制流程的重要组成部分。</p><p>语言优秀的错误处理能力，会大大减少错误处理对整体流程的破坏，让我们写代码更行云流水，读起来心智负担也更小。<br>\n<img src=\"https://static001.geekbang.org/resource/image/5b/a0/5bd062993b268ea982708203a4e2a5a0.jpg?wh=2485x1046\" alt=\"\"></p><p>对我们开发者来说，错误处理包含这么几部分：</p><ol>\n<li>当错误发生时，用合适的错误类型捕获这个错误。</li>\n<li>错误捕获后，可以立刻处理，也可以延迟到不得不处理的地方再处理，这就涉及到错误的传播（propagate）。</li>\n<li>最后，根据不同的错误类型，给用户返回合适的、帮助他们理解问题所在的错误消息。</li>\n</ol><p>作为一门极其注重用户体验的编程语言，Rust 从其它优秀的语言中，尤其是 Haskell ，吸收了错误处理的精髓，并以自己独到的方式展现出来。</p><!-- [[[read_end]]] --><h2>错误处理的主流方法</h2><p>在详细介绍 Rust 的错误处理方式之前，让我们稍稍放慢脚步，看看错误处理的三种主流方法以及其他语言是如何应用这些方法的。</p><h3>使用返回值（错误码）</h3><p>使用返回值来表征错误，是最古老也是最实用的一种方式，它的使用范围很广，从函数返回值，到操作系统的系统调用的错误码 errno、进程退出的错误码retval，甚至 HTTP API 的状态码，都能看到这种方法的身影。</p><p>举个例子，在 C 语言中，如果 fopen(filename) 无法打开文件，会返回 NULL，调用者通过判断返回值是否为 NULL，来进行相应的错误处理。</p><p>我们再看个例子：</p><pre><code class=\"language-c++\">size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)\n</code></pre><p>单看这个接口，我们很难直观了解，当读文件出错时，错误是如何返回的。从文档中，我们得知，如果返回的 size_t 和传入的 size_t 不一致，那么要么发生了错误，要么是读到文件尾（EOF），调用者要进一步通过 ferror 才能得到更详细的错误。</p><p>像 C 这样，通过返回值携带错误信息，有很多局限。返回值有它原本的语义，强行把错误类型嵌入到返回值原本的语义中，需要全面且实时更新的文档，来确保开发者能正确区别对待，正常返回和错误返回。</p><p>所以 Golang 对其做了扩展，在函数返回的时候，可以专门携带一个错误对象。比如上文的 fread，在 Golang 下可以这么定义：</p><pre><code class=\"language-go\">func Fread(file *File, b []byte) (n int, err error)\n</code></pre><p>Golang这样，区分开错误返回和正常返回，相对 C 来说进了一大步。<br>\n但是使用返回值的方式，始终有个致命的问题：<strong>在调用者调用时，错误就必须得到处理或者显式的传播</strong>。</p><p>如果函数 A 调用了函数 B，在 A 返回错误的时候，就要把 B 的错误转换成 A 的错误，显示出来。如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/64/cb/64b6730d159faf374fd0762bd912f0cb.jpg?wh=2096x1125\" alt=\"\"></p><p>这样写出来的代码会非常冗长，对我们开发者的用户体验不太好。如果不处理，又会丢掉这个错误信息，造成隐患。</p><p>另外，<strong>大部分生产环境下的错误是嵌套的</strong>。一个 SQL 执行过程中抛出的错误，可能是服务器出错，而更深层次的错误可能是，连接数据库服务器的 TLS session 状态异常。</p><p>其实知道服务器出错之外，我们更需要清楚服务器出错的内在原因。因为服务器出错这个表层错误会提供给最终用户，而出错的深层原因要提供给我们自己，服务的维护者。但是这样的嵌套错误在 C / Golang 都是很难完美表述的。</p><h3>使用异常</h3><p>因为返回值不利于错误的传播，有诸多限制，Java 等很多语言使用异常来处理错误。</p><p>你可以把异常看成一种<strong>关注点分离</strong>（Separation of Concerns）：<strong>错误的产生和错误的处理完全被分隔开，调用者不必关心错误，而被调者也不强求调用者关心错误</strong>。</p><p>程序中任何可能出错的地方，都可以抛出异常；而异常可以通过栈回溯（stack unwind）被一层层自动传递，直到遇到捕获异常的地方，如果回溯到 main 函数还无人捕获，程序就会崩溃。如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/c2/83/c2fe73ded8d172ba6c86e75d060a4783.jpg?wh=2438x2315\" alt=\"\"></p><p>使用异常来返回错误可以极大地简化错误处理的流程，它解决了返回值的传播问题。</p><p>然而，上图中异常返回的过程看上去很直观，就像数据库中的事务（transaction）在出错时会被整体撤销（rollback）一样。但实际上，这个过程远比你想象的复杂，而且需要额外操心<a href=\"http://www.lighterra.com/papers/exceptionsharmful/\">异常安全（exception safety）</a>。</p><p>我们看下面用来切换背景图片的（伪）代码：</p><pre><code class=\"language-c++\">void transition(...) {\n  lock(&amp;mutex);\n  delete background;\n  ++changed;\n  background = new Background(...);\n  unlock(&amp;mutex);\n}\n</code></pre><p>试想，如果在创建新的背景时失败，抛出异常，会跳过后续的处理流程，一路栈回溯到 try catch 的代码，那么，这里锁住的 mutex 无法得到释放，而已有的背景被清空，新的背景没有创建，程序进入到一个奇怪的状态。</p><p>确实在大多数情况下，用异常更容易写代码，但<strong>当异常安全无法保证时，程序的正确性会受到很大的挑战</strong>。因此，你在使用异常处理时，需要特别注意异常安全，尤其是在并发环境下。</p><p>而比较讽刺的是，保证异常安全的第一个原则就是：<a href=\"https://en.wikipedia.org/wiki/Exception_safety\">避免抛出异常</a>。这也是 Golang 在语言设计时避开了常规的异常，<a href=\"https://golang.org/doc/faq#exceptions\">走回返回值的老路</a>的原因。</p><p><strong>异常处理另外一个比较严重的问题是：开发者会滥用异常</strong>。只要有错误，不论是否严重、是否可恢复，都一股脑抛个异常。到了需要的地方，捕获一下了之。殊不知，异常处理的开销要比处理返回值大得多，滥用会有很多额外的开销。</p><h3>使用类型系统</h3><p>第三种错误处理的方法就是使用类型系统。其实，在使用返回值处理错误的时候，我们已经看到了类型系统的雏形。</p><p>错误信息既然可以通过已有的类型携带，或者通过多返回值的方式提供，那么<strong>通过类型来表征错误，使用一个内部包含正常返回类型和错误返回类型的复合类型</strong>，通过类型系统来强制错误的处理和传递，是不是可以达到更好的效果呢？</p><p>的确如此。这种方式被大量使用在有强大类型系统支持的函数式编程语言中，如 Haskell/Scala/Swift。其中最典型的包含了错误类型的复合类型是 Haskell 的 Maybe 和 Either 类型。</p><p>Maybe 类型允许数据包含一个值（Just）或者没有值（Nothing），这对简单的不需要类型的错误很有用。还是以打开文件为例，如果我们只关心成功打开文件的句柄，那么 Maybe 就足够了。</p><p>当我们需要更为复杂的错误处理时，我们可以使用 Either 类型。它允许数据是 Left a 或者 Right b 。其中，a 是运行出错的数据类型，b 可以是成功的数据类型。<br>\n<img src=\"https://static001.geekbang.org/resource/image/73/9d/73130a2429da91d10c433100fca3089d.jpg?wh=1934x802\" alt=\"\"></p><p>我们可以看到，这种方法依旧是通过返回值返回错误，但是错误被包裹在一个完整的、必须处理的类型中，比 Golang 的方法更安全。</p><p>我们前面提到，使用返回值返回错误的一大缺点是，错误需要被调用者立即处理或者显式传递。但是使用 Maybe / Either 这样的类型来处理错误的好处是，<strong>我们可以用函数式编程的方法简化错误的处理，比如map、fold 等函数，让代码相对不那么冗余</strong>。</p><p>需要注意的是，很多不可恢复的错误，如“磁盘写满，无法写入”的错误，使用异常处理可以避免一层层传递错误，让代码简洁高效，所以大多数使用类型系统来处理错误的语言，会同时使用异常处理作为补充。</p><h2>Rust 的错误处理</h2><p>由于诞生的年代比较晚，Rust 有机会从已有的语言中学习到各种错误处理的优劣。对于 Rust 来说，目前的几种方式相比而言，最佳的方法是，使用类型系统来构建主要的错误处理流程。</p><p>Rust 偷师 Haskell，构建了对标 Maybe 的 Option 类型和 对标 Either 的 Result 类型。<br>\n<img src=\"https://static001.geekbang.org/resource/image/8c/a2/8c9cf4152609baccb6ddee422c48a8a2.jpg?wh=1934x802\" alt=\"\"></p><h3>Option 和 Result</h3><p>Option 是一个 enum，其定义如下：</p><pre><code class=\"language-rust\">pub enum Option&lt;T&gt; {\n    None,\n    Some(T),\n}\n</code></pre><p>它可以承载有值/无值这种最简单的错误类型。<br>\nResult 是一个更加复杂的 enum，其定义如下：</p><pre><code class=\"language-rust\">#[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\npub enum Result&lt;T, E&gt; {\n    Ok(T),\n    Err(E),\n}\n</code></pre><p>当函数出错时，可以返回 Err(E)，否则 Ok(T)。</p><p>我们看到，Result 类型声明时还有个 must_use 的标注，编译器会对有 must_use 标注的所有类型做特殊处理：如果该类型对应的值没有被显式使用，则会告警。这样，保证错误被妥善处理。如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/e2/53/e2100e3f17a9587c4d4bf50523c10653.png?wh=1680x320\" alt=\"\"></p><p>这里，如果我们调用 read_file 函数时，直接丢弃返回值，由于 #[must_use] 的标注，Rust 编译器报警，要求我们使用其返回值。</p><p>这虽然可以极大避免遗忘错误的显示处理，但如果我们并不关心错误，只需要传递错误，还是会写出像 C 或者 Golang 一样比较冗余的代码。怎么办？</p><h3>? 操作符</h3><p>好在 Rust 除了有强大的类型系统外，还具备元编程的能力。早期 Rust 提供了 try! 宏来简化错误的显式处理，后来为了进一步提升用户体验，try! 被进化成 ? 操作符。</p><p>所以在 Rust 代码中，如果你只想传播错误，不想就地处理，可以用 ? 操作符，比如（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=68df876a2165793142fb0897b1130b59\">代码</a>）:</p><pre><code class=\"language-rust\">use std::fs::File;\nuse std::io::Read;\n\nfn read_file(name: &amp;str) -&gt; Result&lt;String, std::io::Error&gt; {\n&nbsp; let mut f = File::open(name)?;\n&nbsp; let mut contents = String::new();\n&nbsp; f.read_to_string(&amp;mut contents)?;\n&nbsp; Ok(contents)\n}\n</code></pre><p>通过 ? 操作符，Rust 让错误传播的代价和异常处理不相上下，同时又避免了异常处理的诸多问题。</p><p>? 操作符内部被展开成类似这样的代码：</p><pre><code class=\"language-rust\">match result {\n  Ok(v) =&gt; v,\n  Err(e) =&gt; return Err(e.into())\n}\n</code></pre><p>所以，我们可以方便地写出类似这样的代码，简洁易懂，可读性很强：</p><pre><code class=\"language-rust\">fut\n  .await?\n  .process()?\n  .next()\n  .await?;\n</code></pre><p>整个代码的执行流程如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/19/0f/1931bac666fd3596a06ef3700b79f60f.jpg?wh=2839x1089\" alt=\"\"></p><p>虽然 ? 操作符使用起来非常方便，但你要注意在不同的错误类型之间是无法直接使用的，需要实现 From trait 在二者之间建立起转换的桥梁，这会带来额外的麻烦。我们暂且把这个问题放下，稍后我们会谈到解决方案。</p><h3>函数式错误处理</h3><p>Rust 还为 Option 和 Result 提供了大量的辅助函数，如 map / map_err / and_then，你可以很方便地处理数据结构中部分情况。如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/0c/e0/0c3ae02cc6d8994e500fc02385a605e0.jpg?wh=2140x2132\" alt=\"\"></p><p>通过这些函数，你可以很方便地对错误处理引入<a href=\"https://www.slideshare.net/ScottWlaschin/railway-oriented-programming\"> Railroad oriented programming 范式</a>。比如用户注册的流程，你需要校验用户输入，对数据进行处理，转换，然后存入数据库中。你可以这么撰写这个流程：</p><pre><code class=\"language-rust\">Ok(data)\n  .and_then(validate)\n  .and_then(process)\n  .map(transform)\n  .and_then(store)\n  .map_error(...)\n</code></pre><p>执行流程如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/fd/4c/fdbbbee8e125205efd00f8648fc8b04c.jpg?wh=2753x844\" alt=\"\"></p><p>此外，Option 和 Result的互相转换也很方换，这也得益于 Rust 构建的强大的函数式编程的能力。</p><p>我们可以看到，无论是通过 ? 操作符，还是函数式编程进行错误处理，Rust 都力求让错误处理灵活高效，让开发者使用起来简单直观。</p><h3>panic! 和 catch_unwind</h3><p>使用 Option 和 Result 是 Rust 中处理错误的首选，绝大多数时候我们也应该使用，但 Rust 也提供了特殊的异常处理能力。</p><p>在 Rust 看来，一旦你需要抛出异常，那抛出的一定是严重的错误。所以，Rust 跟 Golang 一样，使用了诸如 panic! 这样的字眼警示开发者：想清楚了再使用我。在使用 Option 和 Result  类型时，开发者也可以对其 unwarp() 或者 expect()，强制把 Option&lt;T&gt; 和 Result&lt;T, E&gt; 转换成 T，如果无法完成这种转换，也会 panic! 出来。</p><p>一般而言，panic! 是不可恢复或者不想恢复的错误，我们希望在此刻，程序终止运行并得到崩溃信息。比如下面的代码，它解析 <a href=\"https://noiseprotocol.org/noise.html#protocol-names-and-modifiers\">noise protoco</a>的协议变量：</p><pre><code class=\"language-rust\">let params: NoiseParams = \"Noise_XX_25519_AESGCM_SHA256\".parse().unwrap();\n</code></pre><p>如果开发者不小心把协议变量写错了，最佳的方式是立刻 panic! 出来，让错误立刻暴露，以便解决这个问题。</p><p>有些场景下，我们也希望能够像异常处理那样能够栈回溯，把环境恢复到捕获异常的上下文。Rust 标准库下提供了 catch_unwind() ，把调用栈回溯到 catch_unwind 这一刻，作用和其它语言的 try {…} catch {…} 一样。见如下<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c2fbc68b5b4b1bcd2559ea20a025074e\">代码</a>：</p><pre><code class=\"language-rust\">use std::panic;\n\nfn main() {\n&nbsp; &nbsp; let result = panic::catch_unwind(|| {\n&nbsp; &nbsp; &nbsp; &nbsp; println!(\"hello!\");\n&nbsp; &nbsp; });\n&nbsp; &nbsp; assert!(result.is_ok());\n&nbsp; &nbsp; let result = panic::catch_unwind(|| {\n&nbsp; &nbsp; &nbsp; &nbsp; panic!(\"oh no!\");\n&nbsp; &nbsp; });\n&nbsp; &nbsp; assert!(result.is_err());\n&nbsp; &nbsp; println!(\"panic captured: {:#?}\", result);\n}\n</code></pre><p>当然，和异常处理一样，并不意味着你可以滥用这一特性，我想，这也是 Rust 把抛出异常称作 panic! ，而捕获异常称作 catch_unwind的原因，让初学者望而生畏，不敢轻易使用。这也是一个不错的用户体验。</p><p>catch_unwind 在某些场景下非常有用，比如你在使用 Rust 为 erlang VM 撰写 <a href=\"https://erlang.org/doc/tutorial/nif.html\">NIF</a>，你不希望 Rust 代码中的任何 panic! 导致 erlang VM 崩溃。因为崩溃是一个非常不好的体验，它违背了 erlang 的设计原则：process 可以 let it crash，但错误代码不该导致 VM 崩溃。</p><p>此刻，你就可以把 Rust 代码整个封装在 catch_unwind() 函数所需要传入的闭包中。这样，一旦任何代码中，包括第三方 crates 的代码，含有能够导致 panic! 的代码，都会被捕获，并被转换为一个 Result。</p><h3>Error trait 和错误类型的转换</h3><p>上文中，我们讲到 Result&lt;T, E&gt; 里 E 是一个代表错误的数据类型。为了规范这个代表错误的数据类型的行为，Rust 定义了 Error trait：</p><pre><code class=\"language-rust\">pub trait Error: Debug + Display {\n    fn source(&amp;self) -&gt; Option&lt;&amp;(dyn Error + 'static)&gt; { ... }\n    fn backtrace(&amp;self) -&gt; Option&lt;&amp;Backtrace&gt; { ... }\n    fn description(&amp;self) -&gt; &amp;str { ... }\n    fn cause(&amp;self) -&gt; Option&lt;&amp;dyn Error&gt; { ... }\n}\n</code></pre><p>我们可以定义我们自己的数据类型，然后为其实现 Error trait。</p><p>不过，这样的工作已经有人替我们简化了：我们可以使用 <a href=\"https://github.com/dtolnay/thiserror\">thiserror</a>和<a href=\"https://github.com/dtolnay/anyhow\"> anyhow</a>来简化这个步骤。thiserror  提供了一个派生宏（derive macro）来简化错误类型的定义，比如：</p><pre><code class=\"language-rust\">use thiserror::Error;\n#[derive(Error, Debug)]\n#[non_exhaustive]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n</code></pre><p>如果你在撰写一个 Rust 库，那么 thiserror 可以很好地协助你对这个库里所有可能发生的错误进行建模。</p><p>而 anyhow 实现了 anyhow::Error 和任意符合 Error trait  的错误类型之间的转换，让你可以使用 ? 操作符，不必再手工转换错误类型。anyhow 还可以让你很容易地抛出一些临时的错误，而不必费力定义错误类型，当然，我们不提倡滥用这个能力。</p><p>作为一名严肃的开发者，我非常建议你在开发前，先用类似 thiserror 的库定义好你项目中主要的错误类型，并随着项目的深入，不断增加新的错误类型，让系统中所有的潜在错误都无所遁形。</p><h2>小结</h2><p>这一讲我们讨论了错误处理的三种方式：使用返回值、异常处理和类型系统。而Rust 站在巨人的肩膀上，采各家之长，形成了我们目前看到的方案：<strong>主要用类型系统来处理错误，辅以异常来应对不可恢复的错误</strong>。</p><ul>\n<li>相比 C/Golang 直接用返回值的错误处理方式，Rust 在类型上更完备，构建了逻辑更为严谨的 Option 类型和 Result 类型，既避免了错误被不慎忽略，也避免了用啰嗦的表达方式传递错误；</li>\n<li>相对于 C++ / Java 使用异常的方式，Rust 区分了可恢复错误和不可恢复错误，分别使用 Option / Result，以及 panic! / catch_unwind 来应对，更安全高效，避免了异常安全带来的诸多问题；</li>\n<li>而对比它的老师 Haskell，Rust 的错误处理更加实用简洁，这得益于它强大的元编程功能，使用 ？操作符来简化错误的传递。</li>\n</ul><p>总结一下：Rust 的错误处理很实用、足够强大、处理起来又不会过于冗长，充分使用 Rust 语言本身的能力，大大简化了错误传递的代码，简洁明了，几乎接近于异常处理的方式。</p><p>当然，Rust 错误处理还有很多提升空间，尤其标准库没有给出足够的工具，导致社区里有大量的互不兼容的辅助库。不过这些都瑕不掩瑜，对 Rust 语言来说，错误处理还处于一个不断进化的阶段，相信未来标准库会给出更好更方便的答案。</p><h3>思考题</h3><p>如果你要开发一个类似Redis 的缓存服务器，你都会定义哪些错误？为什么？</p><p>欢迎在留言区分享你的思考。你已经打卡Rust学习第18次啦，如果你觉得有收获，也欢迎你分享给身边的朋友，邀他一起讨论。</p><h3>拓展阅读</h3><p>1.<a href=\"http://www.lighterra.com/papers/exceptionsharmful/\">Exception handling considered harmful</a><br>\n2.<a href=\"https://en.wikipedia.org/wiki/Exception_safety\">Exception safety</a><br>\n3.<a href=\"https://golang.org/doc/faq#exceptions\">Why does go not have exceptions</a><br>\n4.对&nbsp;Railroad oriented programming 范式感兴趣的同学可以看看这个 <a href=\"https://www.slideshare.net/ScottWlaschin/railway-oriented-programming\">slides</a><br>\n5.<a href=\"https://noiseprotocol.org/noise.html#protocol-names-and-modifiers\">Noise protocol</a><br>\n6.<a href=\"https://erlang.org/doc/tutorial/nif.html\">Erlang NIF</a><br>\n7.<a href=\"https://github.com/dtolnay/thiserror\">thiserror</a><br>\n8.<a href=\"https://github.com/dtolnay/anyhow\">anyhow</a></p>","neighbors":{"left":{"article_title":"17｜数据结构：软件系统核心部件哈希表，内存如何布局？","id":423923},"right":{"article_title":"19｜闭包：FnOnce、FnMut和Fn，为什么有这么多类型？","id":424009}},"comments":[{"had_liked":false,"id":333588,"user_name":"nuan","can_delete":false,"product_type":"c1","uid":2905523,"ip_address":"","ucode":"55FF98EB85404D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIDqHQQByGiaXcAk94MdDn3ftupZLXyR6bAKibxOzMxy5h3uBwZ7QiaCiaIfbCMK0cIQfGNax8iawoiaQAg/132","comment_is_top":false,"comment_ctime":1644413487,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"31709184559","product_id":100085301,"comment_content":"晕了几章后，稍稍轻松一下。","like_count":8},{"had_liked":false,"id":325937,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1639255059,"is_pvip":false,"replies":[{"id":"118810","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639804512,"ip_address":"","comment_id":325937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23114091539","product_id":100085301,"comment_content":"https:&#47;&#47;github.com&#47;dtolnay&#47;thiserror<br><br>&gt; Use **thiserror** if you care about designing your own dedicated error type(s) so that the caller receives exactly the information that you choose in the event of failure. This most often applies to library-like code. Use **Anyhow** if you **don&#39;t care** what error type your functions return, you just want it to be easy. This is common in application-like code.","like_count":6,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539683,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639804512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314708,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1401568,"ip_address":"","ucode":"FA942636EE0CC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/e0/d2ff52da.jpg","comment_is_top":false,"comment_ctime":1633339126,"is_pvip":false,"replies":[{"id":"114176","content":"加油！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1633813651,"ip_address":"","comment_id":314708,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14518241014","product_id":100085301,"comment_content":"这章比较简单，打卡！","like_count":3,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527769,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633813651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320965,"user_name":"ddh","can_delete":false,"product_type":"c1","uid":2806043,"ip_address":"","ucode":"8E852375365F16","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","comment_is_top":false,"comment_ctime":1636599516,"is_pvip":false,"replies":[{"id":"116572","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636641437,"ip_address":"","comment_id":320965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5931566812","product_id":100085301,"comment_content":"之前看过rust错误处理的知识，不是很清稀，今天完全明朗了， 哈哈","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530172,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636641437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314706,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1633338765,"is_pvip":true,"replies":[{"id":"114179","content":"会的。未来不排除类似 thiserror 的库被吸收进去。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1633814373,"ip_address":"","comment_id":314706,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5928306061","product_id":100085301,"comment_content":"golang 中可用 errors.Errorf 或 (go1.13+)fmt.Errorf 实现错误嵌套。<br><br>大致看了下rust中要实现相同的功能的话，也是要先定义自定义的错误类型，然后实现Error trait。这一步可以手动实现，或是使用thiserror来derive。wrap错误时则可以用Box&lt;Error&gt;或anyhow，不过就失去了自定义错误类型的好处。还是通过thiserror来生成From trait的实现为好，这样就可以通过`?`一路&quot;开火车&quot;下去了。<br><br>有意思的是上述golang中的errors pkg原本就是为了解决标准库中Error无法嵌套等问题而产生的第三方库，在社区流行开之后就被标准库吸收了其中的思想。rust生态中的错误处理应该也会经历相似的发展阶段吧。<br>","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527768,"discussion_content":"会的。未来不排除类似 thiserror 的库被吸收进去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633814373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314648,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1633277729,"is_pvip":false,"replies":[{"id":"113989","content":"哈哈棒👍","user_name":"编辑回复","user_name_real":"叶如芊","uid":"2547771","ctime":1633323866,"ip_address":"","comment_id":314648,"utype":2}],"discussion_count":1,"race_medal":2,"score":"5928245025","product_id":100085301,"comment_content":"第一时间打卡","like_count":1,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527750,"discussion_content":"哈哈棒👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633323866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356574,"user_name":"Geek_a6c6ce","can_delete":false,"product_type":"c1","uid":3074996,"ip_address":"美国","ucode":"21DC76D3225403","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/TusRVU51UggZGpicXMgH64Cb8jek0wyTOpagtUHNAj0EPbhbEv0FJpFU2K3glbtOdJXiaQ9o6QoEfv5PiaIu7rwng/132","comment_is_top":false,"comment_ctime":1662432206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662432206","product_id":100085301,"comment_content":"咔哒","like_count":0},{"had_liked":false,"id":347871,"user_name":"Kurobane","can_delete":false,"product_type":"c1","uid":2456500,"ip_address":"","ucode":"D25DF1E26A76F6","user_header":"https://static001.geekbang.org/account/avatar/00/25/7b/b4/9efded98.jpg","comment_is_top":false,"comment_ctime":1654523543,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654523543","product_id":100085301,"comment_content":"&gt; 开发者也可以对其 unwarp() 或者<br>unwarp() =&gt; unwrap()","like_count":0},{"had_liked":false,"id":331652,"user_name":"老实人Honey","can_delete":false,"product_type":"c1","uid":1080653,"ip_address":"","ucode":"EA4AB5C0C33090","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/4d/d98865b2.jpg","comment_is_top":false,"comment_ctime":1642686142,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642686142","product_id":100085301,"comment_content":"连接错误超时<br>命令错误<br>空间满<br>","like_count":0},{"had_liked":false,"id":314728,"user_name":"阿海","can_delete":false,"product_type":"c1","uid":1281585,"ip_address":"","ucode":"2589431F840C42","user_header":"https://static001.geekbang.org/account/avatar/00/13/8e/31/28972804.jpg","comment_is_top":false,"comment_ctime":1633359712,"is_pvip":true,"replies":[{"id":"114177","content":"我有个公众号：programmer_life","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1633813671,"ip_address":"","comment_id":314728,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633359712","product_id":100085301,"comment_content":"从这章就可以看出老师平时理解了很多技术领域的东西，很想知道老师有博客之类的的吗","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527774,"discussion_content":"我有个公众号：programmer_life","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633813671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}