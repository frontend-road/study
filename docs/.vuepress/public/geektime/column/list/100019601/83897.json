{"id":83897,"title":"25 | 使用有序的代码，调动异步的事件","content":"<p>同步和异步，是两个差距很大的编程模型。同步，就是很多事情一步一步地做，做完上一件，才能做下一件。异步，就是做事情不需要一步一步的，多件事情，可以独立地做。</p><p>比如一个有小鸟的笼子，如果打开笼门，一个一个地放飞小鸟，就是同步。如果拆了整个鸟笼，让小鸟随便飞，爱怎么飞就怎么飞，这就是异步。</p><h2>为什么需要异步编程？</h2><p>如果我们观察身边的事物，现实中有很多事情是以异步的方式运营的。我们挤地铁的时候，从来都是好几个人一起挤进去的。当我们正在挤地铁时，外面的风照旧吹，雨照旧下，天坛的大爷大妈们正在秀着各种绝活。没有任何事情会因为我们正在挤地铁就停止活动，等我们挤完地铁再恢复运转。</p><p>可是，要是说到其中的任何一个人，就不能同时做两件事情了。在挤地铁的时候，就不能在天坛秀绝活。我们写的程序也是这样，先执行第一行，再执行第二行。哪怕第二行再怎么费周折，第三行代码也要等着。</p><p>第二行代码可能需要执行大量的计算，需要很多的CPU；也可能需要大量的传输，占用I/O通道。可是，它不一定会把所有的计算机资源都占用了。</p><p>如果第二行代码占用了I/O，我们能不能把多余的CPU用起来？如果第二行代码占用了CPU，我们能不能把空闲的I/O用起来? 也就是说，能不能把计算机整体资源更有效地使用起来？</p><!-- [[[read_end]]] --><p>该怎么办呢？想想家里的一把手做事的风格吧。</p><p>“你去小区菜店买瓶酱油，买回来我们就做饭。”第一道指令发布完毕。</p><p>“你把垃圾扔出去吧，都有馊味了。”第二道指令发布完毕。</p><p>“我赶快收拾下屋子，有两天没打扫了。”第三道指令发布完毕。</p><p>尽管每一道指令都很简短，但是每件事情都交代得很清楚。然后，每个人都忙碌了起来，各忙各的事情。效率也就比一件事情做完再做下一件高出很多。</p><p>如果我们把三行代码换成三道指令。第三行代码虽然依然要等待，但只需等待第二道指令发布完成，而不是第二道指令背后的事情完成。等待的时间变短，效率也就提升了。</p><p>我想，这就是异步编程的背后的驱动力量，以及基本的处理逻辑。为了更有效地利用计算资源，我们使用有序的代码，调动起独立的事件。</p><h2>从过程到事件</h2><p>异步编程和我们熟悉的同步编程最大的区别，就是它要我们从事件的角度来编写和理解代码。就像我举的生活中的一些例子，说的做的多是“事情”。由于我们一般先学习的是对象、方法和过程这些模型，已经建立了一定的思考模式，对于事件驱动的编程模型可能会有点不习惯。事实上，熟悉了异步编程的思路，你会发现异步编程很贴近我们的生活模式。</p><p>在下面的例子，我使用了JDK 11新添加的HttpClient接口。最后一个语句，就是一个异步模式。这个语句的意思，就是交代一件事情：“访问www.example.com，并且把响应数据打印到标准输出上。”需要注意的是，这个语句就是发布了这条指令。指令发布完，这个语句的任务就完成了，就可以执行下一个语句了，不需要等待指令交代的任务完成。</p><pre><code>// Create an HTTP client that prefers HTTP/2.\nHttpClient httpClient = HttpClient.newBuilder()\n               .version(Version.HTTP_2)\n               .build();\n\n// Create a HTTP request.\nHttpRequest httpRequest = HttpRequest.newBuilder()\n               .uri(URI.create(&quot;https://www.example.com/&quot;))\n               .build();\n\n// Send the request and set the HTTP response handler\nhttpClient.sendAsync(httpRequest, BodyHandlers.ofString())\n               .thenApply(HttpResponse::body)\n               .thenAccept(System.out::println);  \n\n// next action\n</code></pre><p>我们可以对比一下传统的代码。下面的代码使用了JDK 10以前的HttpURLConnection接口。完成的是同样的任务。不同的是，下一件事情的代码需要等待上一件事情的完成，才能执行。也就是说，建立网络连接之后，才能执行读取响应数据的代码。</p><pre><code>// Open the connection\nURL url = new URL(&quot;https://www.example.com/&quot;);\nHttpsURLConnection urlc = (HttpsURLConnection)url.openConnection();\n\n// Read the response\ntry (InputStream is = urlc.getInputStream()) {\n    while (is.read() != -1) {    // read to EOF\n        // dump the response\n        // snipped\n    }\n}\n\n// next action\n</code></pre><p>使用HttpURLConnection接口的代码，无论是连接过程，还是响应数据的读取过程，都依赖于网络环境，而不仅仅是计算机的环境。如果网络环境的响应时间是三秒，那么上面的代码就要阻塞三秒，无法执行下一步操作。</p><p>而HttpClient接口的代码，指令发布完，就可以执行下一步操作了。这个指令的执行时间，一般是毫秒以下的数量级别。</p><p>如果我们不考虑其他因素的影响，那么上面的两个例子中，异步模式在网络阻塞期间，能够更好地利用其他的计算资源，从而提高整体的效率。</p><h2>异步是怎么实现的？</h2><p>你是不是有个疑问，指令交代的任务是怎么完成的？异步的实现，依赖于底层的硬件和操作系统；如果操作系统不支持，异步也可以通过线程来模拟。</p><p>即便是只能通过线程来模拟，异步编程也简化了线程管理的难度。甚至能够把线程管理变透明，隐藏起来。比如我们上面使用的HttpClient接口的代码，就没有线程的影子，看起来像一个单线程程序。</p><p>异步编程对性能的爆炸性的提升来自于硬件和操作系统对异步的支持。</p><p>比如说，早期传统的套接字编程，应用程序需要等待下一个连接的到来，然后等待连接数据的传输……这些等待，都需要耗费很多资源。这些被占用的资源，在连接和数据到来之前，都是没有被充分利用的资源。</p><p>如果操作系统能够主动告诉应用程序，什么时候有一个连接请求，这个连接里什么时候有数据。应用程序就可以在连接和数据到来之后，再分配资源进行处理。操作系统在合适的时间，遇到触发事件，主动调用设置的应用程序，执行相关的操作。这就是操作系统对异步I/O的支持。</p><p>比如说，如果一个简单的服务就返回一个\"Hello, World!\"，它能够同时接受多少用户访问呢？</p><p>如果使用传统的一个线程一个用户的模式，这个用户数量完全取决于线程的效率和容量。随着用户数的增加，线程数量也线性增加，线程管理也越来越复杂，线程的效率也加速下降，线程处理能力决定了系统最大可承载的用户数。</p><p>如果使用异步I/O，每一个CPU分派一个线程就足以应付所有的连接。这时候，连接的效率就主要取决于硬件和操作系统的能力了。</p><p>根据常见的数据，这种效率的提升通常可以达到几百倍。</p><p>下面的例子，就是一个简单异步服务的框架。你可以比较一下，它和传统服务器代码的差异。</p><pre><code>final AsynchronousServerSocketChannel listener =\n        AsynchronousServerSocketChannel\n                .open()\n                .bind(new InetSocketAddress(&quot;localhost&quot;, 6789));\n\nlistener.accept(null, new CompletionHandler&lt;AsynchronousSocketChannel,Void&gt;() {\n    @Override\n    public void completed(AsynchronousSocketChannel ch, Void att) {\n        // accept the next connection, non-blocking\n        listener.accept(null, this);\n\n        // handle this connection\n        handle(ch);\n    }\n\n    @Override\n    public void failed(Throwable exc, Void att) {\n        // snipped\n    }\n});\n</code></pre><h2>零拷贝，进一步的性能提升</h2><p>异步编程的性能并没有止步于异步I/O，它还有提升的空间。</p><p>前面，我们讨论了减少<a href=\"https://time.geekbang.org/column/article/83045\">内存使用的两个大方向</a>，减少实例数量和减少实例的尺寸。使用共享内存，减少内存拷贝，甚至是零拷贝，可以减少CPU消耗，也是减少实例数量和减少实例尺寸的一个办法。</p><p>下面的例子中，我们使用了ByteBuffer.allocateDirect()方法分配了一块内存空间。这个方法的实现，会尽最大的努力，减少中间环节的内存拷贝，把套接字的缓存数据，直接拷贝到应用程序操作的内存空间里。这样，就减少了内存的占用、分配、拷贝和废弃，提高了内存使用的效率。</p><pre><code>listener.accept(null, new CompletionHandler&lt;AsynchronousSocketChannel,Void&gt;() {\n    @Override\n    public void completed(AsynchronousSocketChannel ch, Void att) {\n        // accept the next connection, non-blocking\n        listener.accept(null, this);\n\n        // handle this connection\n        ByteBuffer bbr = ByteBuffer.allocateDirect(1024);\n        ch.read(bbr, null, new CompletionHandler&lt;Integer, Object&gt;() {\n\t\t\t\t@Override\n\t\t\t\tpublic void completed(Integer result, Object attachment) {\n                    // snipped\n                }\n\n\t\t\t\t@Override\n\t\t\t\tpublic void failed(Throwable exc, Object attachment) {\n                    // snipped\n\t\t\t\t}\n\t\t\t});\n    }\n\n    @Override\n    public void failed(Throwable exc, Void att) {\n        // snipped\n    }\n});\n</code></pre><p>需要注意的是，这种方式分配的内存，分配和废弃的效率一般比常规的Java内存分配差一些。所以，只建议用在数据量比较大，存活时间比较长的情况下，比如网络连接的I/O。而且，一个连接最多只用一个读、一个写两块空间。这样，才能把它的效率充分发挥出来。</p><h2>小结</h2><p>今天，我们主要讨论了异步的一些基本概念，以及异步对于效率提升的作用。异步编程，常见的模型是事件驱动的。我们通过使用有序的代码，调动独立的事件，来更有效地利用计算资源。</p><h2>一起来动手</h2><p>这一次的几个例子，大致提供了异步连接编程的一个基本框架。你可以试着把这些代码丰富起来，组成一个可以运行的客户端和服务端。客户端使用HttpClient接口发起HTTP连接；服务端使用异步的模式，把客户端的HTTP请求数据原封不动发回去。</p><p>下一篇文章，我会介绍一个简单的测试代码性能的工具。如果有兴趣，你可以继续测试下你编写的代码的性能，是不是比同步的编程模式有所提高。</p><p>欢迎你把你的代码公布在讨论区，我们一起来学习，一起来进步。如果你想和朋友或者同事比试一下，不妨把这篇文章分享给他们，互相切磋。</p><p></p>","neighbors":{"left":{"article_title":"24 | 黑白灰，理解延迟分配的两面性","id":83504},"right":{"article_title":"26 | 有哪些招惹麻烦的性能陷阱？","id":84096}},"comments":[{"had_liked":false,"id":71873,"user_name":"黄智勇","can_delete":false,"product_type":"c1","uid":1220878,"ip_address":"","ucode":"6B7B6D4E242146","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/0e/b98542f6.jpg","comment_is_top":false,"comment_ctime":1551458042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27321261818","product_id":100019601,"comment_content":"这就体现了我用nodejs来做开发的优势了，async&#47;await 的方式，还可以开发异步程序像开发同步程序，开发效率一样高","like_count":6},{"had_liked":false,"id":71645,"user_name":"正在减肥的胖籽。","can_delete":false,"product_type":"c1","uid":1033728,"ip_address":"","ucode":"99E2E4DF599236","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c6/00/683bb4f0.jpg","comment_is_top":false,"comment_ctime":1551406509,"is_pvip":false,"replies":[{"id":"25746","content":"一般的，线程个数和很多因素相关，比如软件架构、用户数等。线程数和CPU数匹配是一个常见的设置，但是也仅适用于少数场景，比如每个计算任务都很快。性能参数选择，一般可以做成可配置的，然后反复测试，找到合适的组合。<br><br>很抱歉，我不了解tomcat的细节，没有办法给你建议。留言区的小伙伴们帮帮忙！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1551410596,"ip_address":"","comment_id":71645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18731275693","product_id":100019601,"comment_content":"范老师您好，在Java项目中，tomcat的线程一般开多少个线程比较好？这块有好的心德吗？在项目开发过程中一直对线程池的个数拿捏不准。","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441253,"discussion_content":"一般的，线程个数和很多因素相关，比如软件架构、用户数等。线程数和CPU数匹配是一个常见的设置，但是也仅适用于少数场景，比如每个计算任务都很快。性能参数选择，一般可以做成可配置的，然后反复测试，找到合适的组合。\n\n很抱歉，我不了解tomcat的细节，没有办法给你建议。留言区的小伙伴们帮帮忙！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551410596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73302,"user_name":"轻歌赋","can_delete":false,"product_type":"c1","uid":1251574,"ip_address":"","ucode":"22F62446208805","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/f6/2ff7bc7a.jpg","comment_is_top":false,"comment_ctime":1551854931,"is_pvip":false,"replies":[{"id":"26777","content":"异步编程的编码模式吗？ 编码规范，如果你指的是代码规范，和普通的代码规范区别不大。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1551899613,"ip_address":"","comment_id":73302,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5846822227","product_id":100019601,"comment_content":"其实我更想知道异步编程的一些编码规范，来帮助我少些一些多线程异常代码","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442012,"discussion_content":"异步编程的编码模式吗？ 编码规范，如果你指的是代码规范，和普通的代码规范区别不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551899613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352537,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1658749839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658749839","product_id":100019601,"comment_content":"异步编程，常见的模型是事件驱动的。我们通过使用有序的代码，调动独立的事件，来更有效地利用计算资源。--记下来","like_count":0},{"had_liked":false,"id":344021,"user_name":"刚毅坚卓","can_delete":false,"product_type":"c1","uid":2976412,"ip_address":"","ucode":"6D16E587400F6F","user_header":"https://static001.geekbang.org/account/avatar/00/2d/6a/9c/de8f9280.jpg","comment_is_top":false,"comment_ctime":1651196927,"is_pvip":false,"replies":[{"id":"125735","content":"哈哈，好玩的类比啊。不过，玩手机被中断了，这是同步。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1651619852,"ip_address":"","comment_id":344021,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651196927","product_id":100019601,"comment_content":"异步编程就像，你在等排队处理业务时顺便玩一下手机。等排到你的时候，你再把手机放好，然后精力转过来处理业务；或者是把手机上的事情弄好，再来处理业务<br><br>不知道这样理解对不对呢","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569943,"discussion_content":"哈哈，好玩的类比啊。不过，玩手机被中断了，这是同步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651619853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324633,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1638521776,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638521776","product_id":100019601,"comment_content":"异步，就是不同步，把事情交给对方，对方完成或异常都会有所反馈。<br>这在很多地方会用的到，比如写日志，比如通知……","like_count":0},{"had_liked":false,"id":267966,"user_name":"程序员汪师傅","can_delete":false,"product_type":"c1","uid":1382765,"ip_address":"","ucode":"A67C400EAA2CB6","user_header":"https://static001.geekbang.org/account/avatar/00/15/19/6d/0f0ee388.jpg","comment_is_top":false,"comment_ctime":1608012073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608012073","product_id":100019601,"comment_content":"httpClient.sendAsync(httpRequest, BodyHandlers.ofString()) .thenApply(HttpResponse::body) .thenAccept(System.out::println); 在异步处理的时候，是在哪个线程执行的，什么时候执行呢。在异步的时候线程是如何被调度的。例如thenApply是sendSync返回之后执行的，那么是谁（哪个线程）在执行它，是如何触发执行的呢","like_count":0},{"had_liked":false,"id":104894,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1560865169,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560865169","product_id":100019601,"comment_content":"异步处理，优点不阻塞当前线程. <br>前提是当前的请求不要求及时返回结果数据，可以采用异步方式.<br><br>","like_count":0}]}