{"id":75914,"title":"11 | I/O优化（下）：如何监控线上I/O操作？","content":"<p>通过前面的学习，相信你对I/O相关的基础知识有了一些认识，也了解了测量I/O性能的方法。</p><p>但是在实际应用中，你知道有哪些I/O操作是不合理的吗？我们应该如何发现代码中不合理的I/O操作呢？或者更进一步，我们能否在线上持续监控应用程序中I/O的使用呢？今天我们就一起来看看这些问题如何解决。</p><h2>I/O跟踪</h2><p>在监控I/O操作之前，你需要先知道应用程序中究竟有哪些I/O操作。</p><p>我在专栏前面讲卡顿优化的中提到过，Facebook的Profilo为了拿到ftrace的信息，使用了PLT Hook技术监听了“atrace_marker_fd”文件的写入。那么还有哪些方法可以实现I/O跟踪，而我们又应该跟踪哪些信息呢？</p><p><strong>1. Java Hook</strong></p><p>出于兼容性的考虑，你可能第一时间想到的方法就是插桩。但是插桩无法监控到所有的I/O操作，因为有大量的系统代码也同样存在I/O操作。</p><p>出于稳定性的考虑，我们退而求其次还可以尝试使用Java Hook方案。以Android 6.0的源码为例，FileInputStream的整个调用流程如下。</p><pre><code>java : FileInputStream -&gt; IoBridge.open -&gt; Libcore.os.open \n-&gt; BlockGuardOs.open -&gt; Posix.open\n</code></pre><p>在<a href=\"http://androidxref.com/6.0.1_r10/xref/libcore/luni/src/main/java/libcore/io/Libcore.java\">Libcore.java</a>中可以找到一个挺不错的Hook点，那就是<a href=\"http://androidxref.com/6.0.1_r10/xref/libcore/luni/src/main/java/libcore/io/BlockGuardOs.java\">BlockGuardOs</a>这一个静态变量。如何可以快速找到合适的Hook点呢？一方面需要靠经验，但是耐心查看和分析源码是必不可少的工作。</p><!-- [[[read_end]]] --><pre><code>public static Os os = new BlockGuardOs(new Posix());\n// 反射获得静态变量\nClass&lt;?&gt; clibcore = Class.forName(&quot;libcore.io.Libcore&quot;);\nField fos = clibcore.getDeclaredField(&quot;os&quot;);\n</code></pre><p>我们可以通过动态代理的方式，在所有I/O相关方法前后加入插桩代码，统计I/O操作相关的信息。事实上，BlockGuardOs里面还有一些Socket相关的方法，我们也可以用来统计网络相关的请求。</p><pre><code>// 动态代理对象\nProxy.newProxyInstance(cPosix.getClassLoader(), getAllInterfaces(cPosix), this);\n\nbeforeInvoke(method, args, throwable);\nresult = method.invoke(mPosixOs, args);\nafterInvoke(method, args, result);\n</code></pre><p>看起来这个方案好像挺不错的，但在实际使用中很快就发现这个方法有几个缺点。</p><ul>\n<li>\n<p>性能极差。I/O操作调用非常频繁，因为使用动态代理和Java的大量字符串操作，导致性能比较差，无法达到线上使用的标准。</p>\n</li>\n<li>\n<p>无法监控Native代码。例如微信中有大量的I/O操作是在Native代码中，使用Java Hook方案无法监控到。</p>\n</li>\n<li>\n<p>兼容性差。Java Hook需要每个Android版本去兼容，特别是Android P增加对非公开API限制。</p>\n</li>\n</ul><p><strong>2. Native Hook</strong></p><p>如果Java Hook不能满足需求，我们自然就会考虑Native Hook方案。Profilo使用到是PLT Hook方案，它的性能比<a href=\"https://github.com/Tencent/matrix/tree/master/matrix/matrix-android/matrix-android-commons/src/main/cpp/elf_hook\">GOT Hook</a>要稍好一些，不过GOT Hook的兼容性会更好一些。</p><p>关于几种Native Hook的实现方式与差异，我在后面会花篇幅专门介绍，今天就不展开了。最终是从libc.so中的这几个函数中选定Hook的目标函数。</p><pre><code>int open(const char *pathname, int flags, mode_t mode);\nssize_t read(int fd, void *buf, size_t size);\nssize_t write(int fd, const void *buf, size_t size); write_cuk\nint close(int fd);\n</code></pre><p>因为使用的是GOT Hook，我们需要选择一些有调用上面几个方法的library。微信Matrix中选择的是<code>libjavacore.so</code>、<code>libopenjdkjvm.so</code>、<code>libopenjdkjvm.so</code>，可以覆盖到所有的Java层的I/O调用，具体可以参考<a href=\"https://github.com/Tencent/matrix/blob/master/matrix/matrix-android/matrix-io-canary/src/main/cpp/io_canary_jni.cc#L161\">io_canary_jni.cc</a>。</p><p>不过我更推荐Profilo中<a href=\"https://github.com/facebookincubator/profilo/blob/master/cpp/atrace/Atrace.cpp#L172\">atrace.cpp</a>的做法，它直接遍历所有已经加载的library，一并替换。</p><pre><code>void hookLoadedLibs() {\n  auto&amp; functionHooks = getFunctionHooks();\n  auto&amp; seenLibs = getSeenLibs();\n  facebook::profilo::hooks::hookLoadedLibs(functionHooks, seenLibs);\n}\n</code></pre><p>不同版本的Android系统实现有所不同，在Android 7.0之后，我们还需要替换下面这三个方法。</p><pre><code>open64\n__read_chk\n__write_chk\n</code></pre><p><strong>3. 监控内容</strong></p><p>在实现I/O跟踪后，我们需要进一步思考需要监控哪些I/O信息。假设读取一个文件，我们希望知道这个文件的名字、原始大小、打开文件的堆栈、使用了什么线程这些基本信息。</p><p>接着我们还希望得到这一次操作一共使用了多长时间，使用的Buffer是多大的。是一次连续读完的，还是随机的读取。通过上面Hook的四个接口，我们可以很容易的采集到这些信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/3c/ba36f8e259427bde06bc44861905c63c.png?wh=1140*584\" alt=\"\"></p><p>下面是一次I/O操作的基本信息，在主线程对一个大小为600KB的“test.db”文件。</p><p><img src=\"https://static001.geekbang.org/resource/image/07/ae/0732644e3734490825c896fa559bcaae.png?wh=1282*170\" alt=\"\"></p><p>使用了4KB的Buffer，连续读取150次，一次性把整个文件读完，整体的耗时是10ms。因为连读读写时间和打开文件的总时间相同，我们可以判断出这次read()操作是一气呵成的，中间没有间断。</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/fb/aab6899b0b7a91f466e187333337dcfb.png?wh=1278*176\" alt=\"\"></p><p>因为I/O操作真的非常频繁，采集如此多的信息，对应用程序的性能会造成多大的影响呢？我们可以看看是否使用Native Hook的耗时数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/5f/f0394337bee26e8bf105cfd1eda37a5f.png?wh=1276*366\" alt=\"\"></p><p>你可以看到采用Native Hook的监控方法性能损耗基本可以忽略，这套方案可以用于线上。</p><h2>线上监控</h2><p>通过Native Hook方式可以采集到所有的I/O相关的信息，但是采集到的信息非常多，我们不可能把所有信息都上报到后台进行分析。</p><p>对于I/O的线上监控，我们需要进一步抽象出规则，明确哪些情况可以定义为不良情况，需要上报到后台，进而推动开发去解决。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/3a/9c408d0ec409771c2a036f0208cadf3a.png?wh=1238*868\" alt=\"\"></p><p><strong>1. 主线程I/O</strong></p><p>我不止一次说过，有时候I/O的写入会突然放大，即使是几百KB的数据，还是尽量不要在主线程上操作。在线上也会经常发现一些I/O操作明明数据量不大，但是最后还是ANR了。</p><p>当然如果把所有的主线程I/O都收集上来，这个数据量会非常大，所以我会添加“连续读写时间超过100毫秒”这个条件。之所以使用连续读写时间，是因为发现有不少案例是打开了文件句柄，但不是一次读写完的。</p><p>在上报问题到后台时，为了能更好地定位解决问题，我通常还会把CPU使用率、其他线程的信息以及内存信息一并上报，辅助分析问题。</p><p><strong>2. 读写Buffer过小</strong></p><p>我们知道，对于文件系统是以block为单位读写，对于磁盘是以page为单位读写，看起来即使我们在应用程序上面使用很小的Buffer，在底层应该差别不大。那是不是这样呢？</p><pre><code>read(53, &quot;*****************&quot;\\.\\.\\., 1024) = 1024       &lt;0.000447&gt;\nread(53, &quot;*****************&quot;\\.\\.\\., 1024) = 1024       &lt;0.000084&gt;\nread(53, &quot;*****************&quot;\\.\\.\\., 1024) = 1024       &lt;0.000059&gt;\n</code></pre><p>虽然后面两次系统调用的时间的确会少一些，但是也会有一定的耗时。如果我们的Buffer太小，会导致多次无用的系统调用和内存拷贝，导致read/write的次数增多，从而影响了性能。</p><p>那应该选用多大的Buffer呢？我们可以跟据文件保存所挂载的目录的block size来确认Buffer大小，数据库中的<a href=\"http://androidxref.com/6.0.1_r10/xref/frameworks/base/core/java/android/database/sqlite/SQLiteGlobal.java#61\">pagesize</a>就是这样确定的。</p><pre><code>new StatFs(&quot;/data&quot;).getBlockSize()\n</code></pre><p>所以我们最终选择的判断条件为：</p><ul>\n<li>\n<p>buffer size小于block size，这里一般为4KB。</p>\n</li>\n<li>\n<p>read/write的次数超过一定的阈值，例如5次，这主要是为了减少上报量。</p>\n</li>\n</ul><p>buffer size不应该小于4KB，那它是不是越大越好呢？你可以通过下面的命令做一个简单的测试，读取测试应用的iotest文件，它的大小是40M。其中bs就是buffer size，bs分别使用不同的值，然后观察耗时。</p><pre><code>// 每次测试之前需要手动释放缓存\necho 3 &gt; /proc/sys/vm/drop_caches\ntime dd if=/data/data/com.sample.io/files/iotest of=/dev/null bs=4096\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/f8/7e/f8dc9ca5d2b45f278e881cc2cd50317e.png?wh=1282*542\" alt=\"\"></p><p>通过上面的数据大致可以看出来，Buffer的大小对文件读写的耗时有非常大的影响。耗时的减少主要得益于系统调用与内存拷贝的优化，Buffer的大小一般我推荐使用4KB以上。</p><p>在实际应用中，ObjectOutputStream和ZipOutputStream都是一个非常经典的例子，ObjectOutputStream使用的buffer size非常小。而ZipOutputStream会稍微复杂一些，如果文件是Stored方式存储的，它会使用上层传入的buffer size。如果文件是Deflater方式存储的，它会使用DeflaterOutputStream的buffer size，这个大小默认是512Byte。</p><p><strong>你可以看到，如果使用BufferInputStream或者ByteArrayOutputStream后整体性能会有非常明显的提升。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/81/f5/81fa5cac7b7c91e0687c11fb83e35df5.png?wh=1296*454\" alt=\"\"></p><p>正如我上一期所说的，准确评估磁盘真实的读写次数是比较难的。磁盘内部也会有很多的策略，例如预读。它可能发生超过你真正读的内容，预读在有大量顺序读取磁盘的时候，readahead可以大幅提高性能。但是大量读取碎片小文件的时候，可能又会造成浪费。</p><p>你可以通过下面的这个文件查看预读的大小，一般是128KB。</p><pre><code>/sys/block/[disk]/queue/read_ahead_kb\n</code></pre><p>一般来说，我们可以利用/proc/sys/vm/block_dump或者<a href=\"https://www.kernel.org/doc/Documentation/iostats.txt\">/proc/diskstats</a>的信息统计真正的磁盘读写次数。</p><pre><code>/proc/diskstats\n块设备名字|读请求次数|读请求扇区数|读请求耗时总和\\.\\.\\.\\.\ndm-0 23525 0 1901752 45366 0 0 0 0 0 33160 57393\ndm-1 212077 0 6618604 430813 1123292 0 55006889 3373820 0 921023 3805823\n</code></pre><p><strong>3. 重复读</strong></p><p>微信之前在做模块化改造的时候，因为模块间彻底解耦了，很多模块会分别去读一些公共的配置文件。</p><p>有同学可能会说，重复读的时候数据都是从Page Cache中拿到，不会发生真正的磁盘操作。但是它依然需要消耗系统调用和内存拷贝的时间，而且Page Cache的内存也很有可能被替换或者释放。</p><p>你也可以用下面这个命令模拟Page Cache的释放。</p><pre><code>echo 3 &gt; /proc/sys/vm/drop_caches\n</code></pre><p>如果频繁地读取某个文件，并且这个文件一直没有被写入更新，我们可以通过缓存来提升性能。不过为了减少上报量，我会增加以下几个条件：</p><ul>\n<li>\n<p>重复读取次数超过3次，并且读取的内容相同。</p>\n</li>\n<li>\n<p>读取期间文件内容没有被更新，也就是没有发生过write。</p>\n</li>\n</ul><p>加一层内存cache是最直接有效的办法，比较典型的场景是配置文件等一些数据模块的加载，如果没有内存cache，那么性能影响就比较大了。</p><pre><code>public String readConfig() {\n  if (Cache != null) {\n     return cache; \n  }\n  cache = read(&quot;configFile&quot;);\n  return cache;\n}\n</code></pre><p><strong>4. 资源泄漏</strong></p><p>在崩溃分析中，我说过有部分的OOM是由于文件句柄泄漏导致。资源泄漏是指打开资源包括文件、Cursor等没有及时close，从而引起泄露。这属于非常低级的编码错误，但却非常普遍存在。</p><p>如何有效的监控资源泄漏？这里我利用了Android框架中的StrictMode，StrictMode利用<a href=\"http://androidxref.com/8.1.0_r33/xref/libcore/dalvik/src/main/java/dalvik/system/CloseGuard.java\">CloseGuard.java</a>类在很多系统代码已经预置了埋点。</p><p>到了这里，接下来还是查看源码寻找可以利用的Hook点。这个过程非常简单，CloseGuard中的REPORTER对象就是一个可以利用的点。具体步骤如下：</p><ul>\n<li>\n<p>利用反射，把CloseGuard中的ENABLED值设为true。</p>\n</li>\n<li>\n<p>利用动态代理，把REPORTER替换成我们定义的proxy。</p>\n</li>\n</ul><p>虽然在Android源码中，StrictMode已经预埋了很多的资源埋点。不过肯定还有埋点是没有的，比如MediaPlayer、程序内部的一些资源模块。所以在程序中也写了一个MyCloseGuard类，对希望增加监控的资源，可以手动增加埋点代码。</p><h2>I/O与启动优化</h2><p>通过I/O跟踪，可以拿到整个启动过程所有I/O操作的详细信息列表。我们需要更加的苛刻地检查每一处I/O调用，检查清楚是否每一处I/O调用都是必不可少的，特别是write()。</p><p>当然主线程I/O、读写Buffer、重复读以及资源泄漏是首先需要解决的，特别是重复读，比如cpuinfo、手机内存这些信息都应该缓存起来。</p><p>对于必不可少的I/O操作，我们需要思考是否有其他方式做进一步的优化。</p><ul>\n<li>\n<p>对大文件使用mmap或者NIO方式。<a href=\"https://developer.android.com/reference/java/nio/MappedByteBuffer\">MappedByteBuffer</a>就是Java NIO中的mmap封装，正如上一期所说，对于大文件的频繁读写会有比较大的优化。</p>\n</li>\n<li>\n<p>安装包不压缩。对启动过程需要的文件，我们可以指定在安装包中不压缩，这样也会加快启动速度，但带来的影响是安装包体积增大。事实上Google Play非常希望我们不要去压缩library、resource、resource.arsc这些文件，这样对启动的内存和速度都会有很大帮助。而且不压缩文件带来只是安装包体积的增大，对于用户来说，Download size并没有增大。</p>\n</li>\n<li>\n<p>Buffer复用。我们可以利用<a href=\"https://github.com/square/okio\">Okio</a>开源库，它内部的ByteString和Buffer通过重用等技巧，很大程度上减少CPU和内存的消耗。</p>\n</li>\n<li>\n<p>存储结构和算法的优化。是否可以通过算法或者数据结构的优化，让我们可以尽量的少I/O甚至完全没有I/O。比如一些配置文件从启动完全解析，改成读取时才解析对应的项；替换掉XML、JSON这些格式比较冗余、性能比较较差的数据结构，当然在接下来我还会对数据存储这一块做更多的展开。</p>\n</li>\n</ul><p>2013年我在做Multidex优化的时候，发现代码中会先将classes2.dex从APK文件中解压出来，然后再压缩到classes2.zip文件中。classes2.dex做了一次无用的解压和压缩，其实根本没有必要。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/7e/e73a4aa5919f991df734b7d39fec447e.png?wh=946*820\" alt=\"\"></p><p>那个时候通过研究ZIP格式的源码，我发现只要能构造出一个符合ZIP格式的文件，那就可以直接将classses2.dex的压缩流搬到classes2.zip中。整个过程没有任何一次解压和压缩，这个技术也同样应用到<a href=\"https://github.com/Tencent/tinker/tree/master/third-party/tinker-ziputils\">Tinker的资源合成</a>中。</p><h2>总结</h2><p>今天我们学习了如何在应用层面监控I/O的使用情况，从实现上尝试了Java Hook和Native Hook两种方案，最终考虑到性能和兼容性，选择了Native Hook方案。</p><p>对于Hook方案的选择，在同等条件下我会优先选择Java Hook方案。但无论采用哪种Hook方案，我们都需要耐心地查看源码、分析调用流程，从而寻找可以利用的地方。</p><p>一套监控方案是只用在实验室自动化测试，还是直接交给用户线上使用，这两者的要求是不同的，后者需要99.9%稳定性，还要具备不影响用户体验的高性能才可以上线。从实验室到线上，需要大量的灰度测试以及反复的优化迭代过程。</p><h2>课后练习</h2><p>微信的性能监控分析工具<a href=\"https://github.com/Tencent/matrix\">Matrix</a>终于开源了，文中大部分内容都是基于<a href=\"https://github.com/Tencent/matrix/tree/master/matrix/matrix-android/matrix-io-canary\">matrix-io-canary</a>的分析。<span class=\"orange\">今天的课后作业是尝试接入I/O Canary，查看一下自己的应用是否存在I/O相关的问题，请你在留言区跟同学们分享交流一下你的经验。</span></p><p>是不是觉得非常简单？我还有一个进阶的课后练习。在<a href=\"https://github.com/Tencent/matrix/blob/master/matrix/matrix-android/matrix-io-canary/src/main/cpp/io_canary_jni.cc#L224\">io_canary_jni.cc</a>中发现目前Matrix只监控了主线程的I/O运行情况，这主要为了解决多线程同步问题。</p><pre><code>//todo 解决非主线程打开，主线程操作问题\nint ProxyOpen(const char *pathname, int flags, mode_t mode) {\n</code></pre><p>事实上其他线程使用I/O不当，也会影响到应用的性能，“todo = never do”，今天就请你来尝试解决这个问题吧。但是考虑到性能的影响，我们不能简单地直接加锁。针对这个case是否可以做到完全无锁的线程安全，或者可以尽量降低锁的粒度呢？我邀请你一起来研究这个问题，给Matrix提交Pull request，参与到开源的事业中吧。</p><p>欢迎你点击“请朋友读”，把今天的内容分享给好友，邀请他一起学习。最后别忘了在评论区提交今天的作业，我也为认真完成作业的同学准备了丰厚的“学习加油礼包”，期待与你一起切磋进步哦。</p><p></p>","neighbors":{"left":{"article_title":"10 | I/O优化（中）：不同I/O方式的使用场景是什么？","id":75760},"right":{"article_title":"12 | 存储优化（上）：常见的数据存储方法有哪些？","id":76677}},"comments":[{"had_liked":false,"id":105916,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1561104114,"is_pvip":false,"replies":[{"id":"38352","content":"这个是常用操作喔","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1561173847,"ip_address":"","comment_id":105916,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14446006002","product_id":100021101,"comment_content":"看了 Matrix IO 监控的源码, 被其骚操作震惊了, 通过 .so 库名找到了 mmap 区的库地址, 然后 hook 函数的实现, 有趣极了","like_count":4,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454866,"discussion_content":"这个是常用操作喔","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561173847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239293,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","nickname":"Sharry","note":"","ucode":"045DDB864659F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":125078,"discussion_content":"学到了后面的 PLT Hook, 感觉就是常规操作了, 之前没有接触过这一块, 感觉很奇妙, 学习真是太有趣了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578472163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81048,"user_name":"木木哈","can_delete":false,"product_type":"c1","uid":1333404,"ip_address":"","ucode":"D39EB48C1E0BFA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erWIeibZYTNuoOACcQsERyhVD0MstTOwvviaSDB3mfJrnm4OTlNEhNvuEiciaHtXyiaASIJvFicBN0kDyrA/132","comment_is_top":false,"comment_ctime":1553785492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14438687380","product_id":100021101,"comment_content":"给大佬献上膝盖","like_count":4},{"had_liked":false,"id":87431,"user_name":"iniesta2014","can_delete":false,"product_type":"c1","uid":1128692,"ip_address":"","ucode":"D978A8CF0B40E2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKE7KHyLv1Zian5yzyby3ricSClVp0wwia8evbicGPH9icSAVYHhREVO39CtcHc77x05XONNK61JXoNXfg/132","comment_is_top":false,"comment_ctime":1555593226,"is_pvip":false,"replies":[{"id":"31775","content":"相比于物理内存，虚拟内存还是比较大的。而且如果支持64位的话，虚拟内存的空间就不再是问题了","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555979165,"ip_address":"","comment_id":87431,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10145527818","product_id":100021101,"comment_content":"对大文件使用 mmap 或者 NIO 方式? 这样的话，大文件 mmap不是需要很大虚拟内存吗？","like_count":3,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447445,"discussion_content":"相比于物理内存，虚拟内存还是比较大的。而且如果支持64位的话，虚拟内存的空间就不再是问题了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555979165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155772,"user_name":"gmm","can_delete":false,"product_type":"c1","uid":1519123,"ip_address":"","ucode":"66AEDE141A5983","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/13/598bd22b.jpg","comment_is_top":false,"comment_ctime":1574753472,"is_pvip":false,"replies":[{"id":"62076","content":"如果没有root，只能影响自己的进程空间","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1576682009,"ip_address":"","comment_id":155772,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869720768","product_id":100021101,"comment_content":"想问下 libjavacore.so、libopenjdkjvm.so、libopenjdkjvm.so 是系统的共享库，为什么 hook 修改了这些库，不会影响到其他的 APP 呢","like_count":2,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475864,"discussion_content":"如果没有root，只能影响自己的进程空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576682009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76458,"user_name":"小洁","can_delete":false,"product_type":"c1","uid":1333038,"ip_address":"","ucode":"DA1A072D299C28","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/2e/0c85eecd.jpg","comment_is_top":false,"comment_ctime":1552613576,"is_pvip":false,"replies":[{"id":"28189","content":"之前是大家循环执行一万次，看耗时的差异","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1552916817,"ip_address":"","comment_id":76458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5847580872","product_id":100021101,"comment_content":"请问下，上面说到&quot;采用 Native Hook 的监控方法性能损耗基本可以忽略&quot;，请问下在监控前和加入Native Hook 之后是通过什么方式去对比性能损耗的而且保证这个统计的准确性，这个统计本身也会是一个损耗吗","like_count":1,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443315,"discussion_content":"之前是大家循环执行一万次，看耗时的差异","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552916817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73384,"user_name":"HI","can_delete":false,"product_type":"c1","uid":1238921,"ip_address":"","ucode":"C65218113883E6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/89/207cc841.jpg","comment_is_top":false,"comment_ctime":1551875139,"is_pvip":true,"replies":[{"id":"28201","content":"这里不检查也是可以的，有堆栈跟size应该就ok","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1552917524,"ip_address":"","comment_id":73384,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5846842435","product_id":100021101,"comment_content":"你好，Canary_Io源码中，检测 重复读，有这样代码<br>    bool RepeatReadInfo::operator==(const RepeatReadInfo &amp;target) const {<br>        return target.path_ == path_<br>            &amp;&amp; target.java_thread_id_ == java_thread_id_<br>            &amp;&amp; target.java_stack_ == java_stack_<br>            &amp;&amp; target.file_size_ == file_size_<br>            &amp;&amp; target.op_size_ == op_size_;<br>    }<br>为什么这里要检测 op_size，这个貌似代表的是当前总的buff的大小，这个值就可以代表内容是一样的吗","like_count":1,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442055,"discussion_content":"这里不检查也是可以的，有堆栈跟size应该就ok","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552917524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68646,"user_name":"林","can_delete":false,"product_type":"c1","uid":1341361,"ip_address":"","ucode":"56C97FAD3366DA","user_header":"","comment_is_top":false,"comment_ctime":1550566106,"is_pvip":false,"replies":[{"id":"24364","content":"默认是没有压缩的，但是事实上大多数的应用为了安装包体积，都把它们压缩了","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1550567603,"ip_address":"","comment_id":68646,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845533402","product_id":100021101,"comment_content":"绍文大佬，文章中这句话没理解：“对启动过程需要的文件，我们可以指定在安装包中不压缩”。默认打的apk包中resource、resource.arsc文件不是就是没压缩过的吗？如何指定不压缩类","like_count":1,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439775,"discussion_content":"默认是没有压缩的，但是事实上大多数的应用为了安装包体积，都把它们压缩了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550567603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129816,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1567266816,"is_pvip":false,"replies":[{"id":"62067","content":"主要就是<br>1. 从zip快速提取dex<br>2. dex解压的多进程同步<br>3. 存储空间不足时的提示<br>4. 安全性检测<br>....","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1576681128,"ip_address":"","comment_id":129816,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567266816","product_id":100021101,"comment_content":"2013 年我在做 Multidex 优化的时候，发现代码中...<br><br>老师，可以讲一下这个是如何优化的吗？","like_count":1,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465664,"discussion_content":"主要就是\n1. 从zip快速提取dex\n2. dex解压的多进程同步\n3. 存储空间不足时的提示\n4. 安全性检测\n....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576681128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}