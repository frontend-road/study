{"id":685004,"title":"36｜升新不升旧：自定义组件如何升级到新架构？","content":"<p>你好，我是蒋宏伟。</p><p>有同学后台留言说：“我把公司应用升级到了 0.71.8 版本，开启新架构后，一些组件都乱了，折腾了三天最终无奈退回到老架构了。”</p><p>这个问题还挺典型的，今天我们就来聊聊到底应该怎么升级？分享一些经验。</p><p>在上节课中，我把我们的教学项目 React-Native-Classroom 项目，从 0.68 升级到了 0.72 的新架构，迁移过程十分顺利。这是因为 React-Native-Classroom 项目没有使用自定义模块或组件，它使用的都是官方的或成熟的社区方案，这些方案都对新老架构进行了兼容。所以，无需额外的 Native 代码升级工作。</p><p>但是，新旧架构的自定义模块或组件研发方式完全不同。原来那些自己维护的自定义模块或组件，要完全升级成 Turbo Modules 和 Fabric Components 是需要大量的改造工作的。</p><p>对于业务而言，研发效率是第一位的。那如何升级新架构，才能降低升级成本呢？</p><p>先说结论：<strong>升级新架构时不动旧的业务代码，是一个好策略。</strong></p><h2><strong>老代码是否兼容？</strong></h2><p>那首先，我们就来测试，老代码不做任何修改，能否直接在新架构上运行？</p><p>我参考了官方文档中的老架构部分，分别创建了一个老模块和一个老组件。</p><p>老模块是自定义的简化版存储模块 StorageModule。它有两个方法，一个是利用键值对的形式存储字符串，另一个是使用键去读取存储在 Native 端的值。如果存储（SET ITEM）和读取（GET ITEM）成功，那么就说明这类老模块代码能在新架构中直接使用。</p><!-- [[[read_end]]] --><p>其 JS 的部分代码如下：</p><pre><code class=\"language-plain\">import {NativeModules} from 'react-native';\n\nconst StorageTest = () =&gt; {\n\n const handleSetItem = async () =&gt; {\n   await NativeModules.StorageModule.setItem('testKey', 'Hello, World!');\n };\n\n const handleGetItem = async () =&gt; {\n   const result = await NativeModules.StorageModule.getItem('testKey');\n   console.log('Received value: ', result);\n };\n  \n return &lt;jsx.../&gt;\n};\n</code></pre><p>老组件是一个自定义视图 CustomView，它只有简单的设置背景颜色的功能。如果颜色设置成功，那么就说明这类老组件代码在新架构中能够直接使用。</p><p>其 JS 部分的代码如下：</p><pre><code class=\"language-plain\">import {requireNativeComponent} from 'react-native';\n\nconst CustomView = requireNativeComponent('CustomView');\n\nconst App: () =&gt; JSX.Element = () =&gt; {\n return (\n   &lt;CustomView\n    style={{width: 100,height: 100 }}\n    color=\"red\"\n   /&gt;\n );\n};\nexport default App;\n</code></pre><p>这些原本运行在老架构上的代码，在开启新架构后，运行的结果截图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/09/d2/09dc5e6d2aa09150a890d1b1a7e819d2.png?wh=1244x898\" alt=\"图片\"></p><p>可以看到，老的自定义模块 StorageModule 正常运行。它能够从 Native 侧正确地存储和读取 “Hello, World!” 这段文字。</p><p>然而，老的自定义组件报错了。报错内容以文字形式显示在界面上，提示我 CustomView 老组件不兼容 Fabric，无法在新架构中运行。</p><p>从上述简单的演示中，可以推测官方默认对老架构的自定义模块代码做了兼容，但并未对老架构的自定义组件代码进行直接的兼容。</p><h2><strong>老组件兼容方案</strong></h2><p>为了兼容老架构的自定义组件，官方提供了一种手动开启兼容模式的方案——<a href=\"https://github.com/reactwg/react-native-new-architecture/discussions/135\">New Renderer Interop Layer</a>。</p><p>显然，如果历史代码众多，底层架构升级需要大规模改动业务研发代码，这对业务来说无疑是一个巨大的负担。在 Facebook 内部，许多业务都使用 React Native，因此基建和业务研发团队肯定也经过了几轮讨论。兼容方案显然能够降低业务团队的升级成本。</p><p>所谓的 New Renderer Interop Layer 就是通俗理解的组件兼容层，它起源于 Facebook 内部，在内部使用了一段时间后，于 0.72 版本进行了开源。</p><p>开启组件兼容层的方法有三步。</p><p>首先，在根目录创建 react-native.config.js 文件。</p><pre><code class=\"language-plain\">$ touch react-native.config.js\n</code></pre><p>然后，分别列举 iOS 和 Android 需要兼容的组件，将这些组件填写在 <code>unstable_reactLegacyComponentNames</code> 字段中。在我的代码中，旧架构的组件名字是 CustomView。因此，文件内容如下：</p><pre><code class=\"language-plain\">module.exports = {\n project: {\n  android: {\n   // list of components that needs to be wrapped by the interop layer\n   unstable_reactLegacyComponentNames: ['CustomView'],\n  },\n  ios: {\n   // list of components that needs to be wrapped by the interop layer\n   unstable_reactLegacyComponentNames: ['CustomView'],\n  },\n },\n};\n</code></pre><p>最后一步，重新构建和启动 App。</p><pre><code class=\"language-plain\">$ yarn android\n// or\n$ yarn ios\n</code></pre><p>完成上述三步后，在重新启动的 App 中，你就能看到旧架构自定义组件 CustomView 能够正常展示 color=“red” 的红色了。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/9f/29e2fe1aff9114004ef4f2a7f0fa229f.png?wh=1210x888\" alt=\"图片\"></p><p>但是，这个兼容方案并不完美。</p><p>因为，官方并不打算 100% 支持所有的旧组件代码。官方给出的理由是，完全兼容可能会阻碍新架构性能的最大化展现。因此，官方希望社区的所有老架构的自定义组件都能迁移到新架构。</p><p>实际上，绝大部分功能都能得到兼容，包括：</p><ul>\n<li>Props</li>\n<li>Events</li>\n<li>Native View Commands（即使用 UIManager.dispatchViewManager）</li>\n<li>Native Methods（如 setNativeProps 和 measure* 函数）</li>\n<li>向 JS 导出的常量</li>\n</ul><p>已知不能兼容的包括：</p><ul>\n<li>Concurrent Features（如 startTransition）</li>\n</ul><p>从现有的兼容方案来看，组件中常用的功能兼容层都已经支持，而 Concurrent Features 在老架构中就不支持，迁移后仍然不支持也是可以理解的。</p><p>由此可见，绝大部分老架构的组件代码都可以通过兼容层来适配新架构。</p><h2><strong>完全迁移到新架构</strong></h2><p>然而，如果我们继续在新架构上运行老代码，就无法享受到新架构带来的性能提升。在<a href=\"https://time.geekbang.org/column/article/663928\">第34讲</a>中，我们已经讨论过，新架构的组件渲染在 Android 上可以提高 0%～8% 的性能，在 iOS 上则可以提升 13%～39% 的性能。</p><p>因此，对于有时间和资源进行代码迁移的团队，或者正在开发新组件的团队，我仍然<strong>建议采用新架构的开发方案。</strong></p><p>在<a href=\"https://time.geekbang.org/column/article/519819\">第 22 讲</a>中，我们介绍过新架构的自定义组件，但那时候还没有 CodeGen 自动化升级工具，所有的 Turbo Modules 和 Fabric Component 都是我们手动创建的。现在，我们可以利用 CodeGen 工具帮助我们自动化生成很多模板代码。</p><p>在此，我将以在 Android 上开发 CustomView 组件为例，来介绍 Fabric 自定义组件的研发流程。这个自定义组件只有一个功能，那就是改变其背景颜色。我在 <a href=\"https://github.com/jiangleo/react-native-classroom/tree/main\">GitHub</a> 上发布了这个组件完整的新架构代码和老架构代码。</p><p><strong>整体开发流程包含三个步骤：</strong></p><ol>\n<li>定义组件（JS）：你需要把对组件的设计思想编写成 TypeScript 的 Interface，并将其定义成一个 npm 包，以便后续使用。</li>\n<li>实现组件（Native）：利用 CodeGen 自动化工具，将 TypeScript 的 Interface 生成为 Native 的 Interface，并通过一些模板代码将 JS 和 Native 连接起来。</li>\n<li>使用组件（JS）：在 JS 中使用由 Native 实现的代码。</li>\n</ol><p>在开始开发之前，你需要创建一个用于开发 CustomView 的文件夹。</p><p>在这里，我直接在项目的根目录下创建了一个名为 RTNCustomView 的文件夹。文件夹的名称以 RTN 开头是为了提高其辨识度，因为 RTN 是 React Native 的缩写。</p><p>这个文件夹包含三个部分，具体如下：</p><pre><code class=\"language-plain\">.\n├── RTNCustomView\n├── android\n├── ios\n└── js\n</code></pre><p>其中，android 和 ios 文件夹用于存放该组件的客户端代码，而 js 文件夹用于存放 JS/TS 代码。</p><h3><strong>定义组件</strong></h3><p>定义组件的步骤主要包括两个部分：</p><ol>\n<li>RTNCustomViewNativeComponent.tsx：这是自定义组件的 TypeScript Interface。</li>\n<li>package.json：这是自定义组件 npm 包的配置文件。</li>\n</ol><p>首先，在 js 目录中，我创建了一个名为 RTNCustomViewNativeComponent.tsx 的文件。这个文件以 NativeComponent 结尾，这是官方约定的规则，因为后续 CodeGen 需要根据 NativeComponent 结尾的标识找到 TypeScript 的规范文件，然后进行代码生成（code generate）。</p><p>RTNCustomViewNativeComponent.tsx 文件的内容如下：</p><pre><code class=\"language-plain\">import type {ViewProps, HostComponent} from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\nexport interface NativeProps extends ViewProps {\n background?: string;\n}\n\nexport default codegenNativeComponent&lt;NativeProps&gt;(\n 'RTNCustomView',\n) as HostComponent&lt;NativeProps&gt;;\n</code></pre><p>在这里，我们约定这个组件只能接受一个自定义参数 background，这个参数的类型是 string。</p><p>此外，在 RTNCustomView 目录下，我创建了一个名为 package.json 的文件。这个文件的内容如下：</p><pre><code class=\"language-plain\">{\n  \"name\": \"rtn-custom-view\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Showcase a Fabric Native Component with a custom background view\",\n  \"react-native\": \"js/index\",\n  \"source\": \"js/index\",\n  \"devDependencies\": {},\n  \"peerDependencies\": {\n   \"react\": \"*\",\n   \"react-native\": \"*\"\n  },\n  \"codegenConfig\": {\n   \"name\": \"RTNCustomViewSpecs\",\n   \"type\": \"components\",\n   \"jsSrcsDir\": \"js\"\n  }\n }\n</code></pre><p>在这里，需要特别关注的是 codegenConfig 的配置，包括包名 name、类型 type 以及规范的目录 jsSrcsDir。</p><p><strong>有一些约定俗成的规则：</strong>包名必须以 Specs 结尾；组件类型应填写 component，模块类型应填写 modules，这里填写的是 component；规范的目录就是我们之前创建的 js 目录。</p><h3><strong>实现组件</strong></h3><p>Native 这部分的内容相对较多，以 Android 为例，包括五个部分：</p><ol>\n<li>build.gradle：这是 Android 模块的构建配置。</li>\n<li>CodeGen：这是用于生成链接 JS/Java/C++ 的模板代码。</li>\n<li>CustomView.java：这是新的原生组件。</li>\n<li>CustomViewManager.java：这是原生组件的管理器。</li>\n<li>CustomViewPackage.java：这个部分负责将原生组件暴露给 React Native。</li>\n</ol><p>整个结构如下：</p><pre><code class=\"language-plain\">RTNCenteredText\n├── android\n│  ├── build.gradle\n│  └── src/main/java/com/rtncenteredtext\n│            ├── CustomView.java\n│            ├── CustomViewManager.java\n│            └── CustomViewPackage.java\n├── ios\n├── js\n└── package.json\n</code></pre><p>整个流程开始于配置 Android 的构建脚本，然后使用 CodeGen 自动化工具生成胶水代码，把 JS/Java/C++ 连接起来，接着定义新的 Java 自定义原生组件，再创建一个管理这个组件的类，最后在 React Native 组件列表中注册这个组件，使其能够被 JavaScript 代码访问。</p><p>下面我们详细讲解下流程。</p><p><strong>第一步</strong><strong>：</strong><strong>配置 build.gradle</strong></p><p>build.gradle 是 Android 构建系统用来定义构建规则的文件。在这个配置文件中，绝大部分都是模板代码，你只需要复制和粘贴就可以了，需要修改的只是自定义组件的名字。在这里，我使用的是 <code>namespace \"com.rtncustomview\"</code>。完整的配置如下：</p><pre><code class=\"language-plain\">buildscript {\n  ext.safeExtGet = {prop, fallback -&gt;\n    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback\n  }\n  repositories {\n    google()\n    gradlePluginPortal()\n  }\n  dependencies {\n    classpath(\"com.android.tools.build:gradle:7.3.1\")\n  }\n}\n\napply plugin: 'com.android.library'\napply plugin: 'com.facebook.react'\n\nandroid {\n  compileSdkVersion safeExtGet('compileSdkVersion', 33)\n  namespace \"com.rtncustomview\"\n\n  defaultConfig {\n    minSdkVersion safeExtGet('minSdkVersion', 21)\n    targetSdkVersion safeExtGet('targetSdkVersion', 33)\n    buildConfigField(\"boolean\", \"IS_NEW_ARCHITECTURE_ENABLED\", \"true\")\n  }\n}\n\nrepositories {\n  mavenCentral()\n  google()\n}\n\ndependencies {\n  implementation 'com.facebook.react:react-native'\n}\n</code></pre><p><strong>第二步</strong><strong>：</strong><strong>运行</strong> <strong>CodeGen</strong></p><p>CodeGen 是一个自动代码生成工具，它可以根据之前创建的 RTNCustomViewNativeComponent.tsx 规范文件，自动生成连接 JS、Java 和 C++ 的模板代码。这样，你就可以在 JS 中方便地调用原生方法，同时也避免了手动编写这些模板代码的繁琐工作。</p><p>在运行 CodeGen 之前，你需要先将 RTNCustomView 组件添加到 package.json 文件中，然后通过 <code>android</code> 命令来生成模板代码。命令如下：</p><pre><code class=\"language-plain\">// 在 RN 项目根目录运行\nyarn add ./RTNCustomView\n// CD 到根目录下的 android\ncd android\n./gradlew generateCodegenArtifactsFromSchema\n</code></pre><p><strong>第三步</strong><strong>：</strong><strong>创建</strong> <strong>CustomView.java</strong></p><p>接下来，我们要创建一个新的原生组件，名为 CustomView.java。这个 Java 类将扩展一个 Android 原生视图类（例如 TextView），并定义所需的属性和行为。</p><p>在这个类中，你可以定义你需要的方法和属性，这样就可以在 JS 中直接访问这些方法和属性。同时，你还需要定义一些用来设置和获取这些属性的方法，这样，React Native 就能通过这些方法与原生组件进行交互。</p><p>完整代码如下：</p><pre><code class=\"language-plain\">package com.rtncustomview;\n\nimport androidx.annotation.Nullable;\nimport android.content.Context;\nimport android.graphics.Color;\nimport android.util.AttributeSet;\nimport android.view.View;\n\npublic class CustomView extends View {\n    private int color;\n\n    public CustomView(Context context) {\n        super(context);\n        this.configureComponent();\n    }\n\n    public CustomView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n        this.configureComponent();\n    }\n\n    public CustomView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        this.configureComponent();\n    }\n\n    private void configureComponent() {\n        // 默认背景色为红色\n        this.color = Color.RED;\n        this.setBackgroundColor(this.color);\n    }\n\n    public void setBackground(String color) {\n        // 颜色值由React Native传入，格式为#RRGGBB，如红色为#FF0000\n        this.color = Color.parseColor(color);\n        this.setBackgroundColor(this.color);\n     }\n}    \n</code></pre><p>其核心是 public void setBackground(String color) 方法，它对应着 RTNCustomViewNativeComponent.tsx 定义的 background 属性，它是真正使 android.view.View 视图背景色设置生效的代码。</p><p><strong>第四步：创建</strong> <strong>CustomViewManager.java</strong></p><p>每个原生组件都需要一个管理器类，CustomViewManager.java 就是 CustomView.java 的管理类。管理器类通常需要扩展 SimpleViewManager，并实现必要的方法，例如 createViewInstance() 方法用于创建原生组件的实例。</p><p>对于 React Native 自定义组件，我们还需要使用 @ReactProp 注解来标记可以从 JS 端设置的属性，这样 React Native 就可以通过这些方法来更新原生组件的属性了。</p><p>其完整代码如下：</p><pre><code class=\"language-plain\">package com.rtncustomview;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport android.graphics.Color;  // 这里添加导入语句\n\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.viewmanagers.RTNCustomViewManagerInterface;\nimport com.facebook.react.viewmanagers.RTNCustomViewManagerDelegate;\n\n@ReactModule(name = CustomViewManager.NAME)\npublic class CustomViewManager extends SimpleViewManager&lt;CustomView&gt;\n        implements RTNCustomViewManagerInterface&lt;CustomView&gt; {\n\n    private final ViewManagerDelegate&lt;CustomView&gt; mDelegate;\n\n    static final String NAME = \"RTNCustomView\";\n\n    public CustomViewManager(ReactApplicationContext context) {\n        mDelegate = new RTNCustomViewManagerDelegate&lt;&gt;(this);\n    }\n\n    @Nullable\n    @Override\n    protected ViewManagerDelegate&lt;CustomView&gt; getDelegate() {\n        return mDelegate;\n    }\n\n    @NonNull\n    @Override\n    public String getName() {\n        return CustomViewManager.NAME;\n    }\n\n    @NonNull\n    @Override\n    protected CustomView createViewInstance(@NonNull ThemedReactContext context) {\n        return new CustomView(context);\n    }\n\n    // Here we are exposing a background color prop.\n    @ReactProp(name = \"background\", customType = \"Color\")\n    public void setBackground(CustomView view, @Nullable String color) {\n        if (color != null) {\n            view.setBackground(color);\n        }\n    }\n}    \n</code></pre><p><strong>第五步：升级</strong> <strong>CustomViewPackage.java</strong></p><p>在创建了 CustomViewManager.java 之后，我们需要创建一个 CustomViewPackage.java 来包含我们的 ViewManager。在 createViewManagers 方法中，我们将添加我们刚刚创建的 CustomViewManager。</p><p>完整代码如下：</p><pre><code class=\"language-plain\">package com.rtncustomview;\n\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class CustomViewPackage implements ReactPackage {\n    @Override\n    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) {\n        // return a list that contains our CustomViewManager\n        List&lt;ViewManager&gt; viewManagers = new ArrayList&lt;&gt;();\n        viewManagers.add(new CustomViewManager(reactContext));\n        return viewManagers;\n    }\n    @Override\n    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) {\n        // return an empty list because we do not have any native modules to export\n        return Collections.emptyList();\n    }\n\n}\n</code></pre><h3><strong>使用组件</strong></h3><p>在组件使用方面，回到 JS 代码中，使用在客户端实现的组件。</p><p>首先运行 <code>yarn add ./RTNCustomView</code> 命令，重新添加 RTNCustomView，这样可以刷新我们实现组件的代码。</p><p>然后编写一段测试代码，代码如下：</p><pre><code class=\"language-plain\">import React from 'react';\nimport RTNCustomView from 'rtn-custom-view/js/RTNCustomViewNativeComponent';\nimport {View, Text, Button} from 'react-native';\n\nconst App: () =&gt; JSX.Element = () =&gt; {\n return (\n  &lt;View style={{borderColor: '#0ac', borderWidth: 1, padding: 5}}&gt;\n   &lt;Text&gt;New Component：自定义视图组件&lt;/Text&gt;\n   &lt;RTNCustomView\n    background=\"blue\"\n    style={{\n     width: 100,\n     height: 100,\n    }}\n   /&gt;\n  &lt;/View&gt;\n );\n};\nexport default App;\n</code></pre><p><strong>RTNCustomView 的使用方式非常类似于其他原生组件。</strong>你可以向它传递各种属性，例如 background 和 style。在这个例子中，我们设置了 background 为 <code>\"blue\"</code>，并且设置了它的宽度和高度。</p><p>这里的 style 属性设置了视图的宽度和高度。请注意，尽管在 CustomView.java 文件中我们只提供了 setBackground 方法用于修改颜色，但 React Native 的视图管理器为所有的原生视图组件默认提供了对 style 属性的支持。</p><p>完整代码，我放在 <a href=\"https://github.com/jiangleo/react-native-classroom/tree/main\">Github</a> 上了。</p><p>最后，重新构建 Android 应用，你就能看到代码生效了。</p><p><img src=\"https://static001.geekbang.org/resource/image/72/1d/72cd7cecd9ed1e887562508b0a9a271d.png?wh=1210x916\" alt=\"图片\"></p><h2><strong>总结</strong></h2><p>这节课我介绍了两种升级新架构的策略。</p><p>一种策略是老代码兼容方案，该方案需要开启组件兼容层才能使用，而且可能会有部分性能损耗。另一种策略是完全迁移到新架构的方案，课程中我以新建 Android 组件为例，介绍了迁移新架构的策略。</p><p>可以看到，在新架构模式下，自定义组件的创建方式与老架构有很大的不同，新架构是以包为单元将各端统一在一起来进行开发的，老架构代码都在自己的 JS/Android/iOS 仓库中。这意味着，将老代码改为新架构的写法可能会有巨大的迁移成本。</p><p>因此，我的建议是，新的组件或模块使用新架构，而旧的代码保持不变，使用兼容模式。这种升级策略成本会低很多。</p><p>那么到这节课，我们的动态更新专栏也要和大家说再见了，感谢你过去一年的陪伴。因为有你，所以一同成长。我们有缘，再会！</p>","neighbors":{"left":{"article_title":"35｜自动化：升级0.72新架构的步骤和关键","id":671893},"right":[]},"comments":[{"had_liked":false,"id":379253,"user_name":"听说昵称太长了躲在树后面会被别人看见的","can_delete":false,"product_type":"c1","uid":3616258,"ip_address":"福建","ucode":"EFFEE43631C3B4","user_header":"https://static001.geekbang.org/account/avatar/00/37/2e/02/7f151e08.jpg","comment_is_top":false,"comment_ctime":1691600830,"is_pvip":false,"replies":null,"discussion_count":4,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"我就是那位折腾了三天退回去的同学，没想到被点名了😂。经过了一年 RN 的折腾我也总结了一些看法，这个折腾过程估计也是很多初尝跨段方案的团队要走的老路。首先不能把 RN 当做客户端最终解决方案，我们当时调研后下的结论：“跨端是未来，原生是辅助”，因为项目初期各部门同事一致不负责的说：怎么快怎么来，能用就行！这给了我们拥抱跨端的勇气。可当加班加点忙完项目上线跑起来终于松一口气时大家口风就变了，因为能用和用到极致是两码事，当开始盈利时跟竞品一对比那必须要用到极致，起初那些不痛不痒的问题在这个阶段就变成了棘手问题，兜兜转转最后又回到了原生，因为不是所有团队都有像宏伟老师这样的团队去做深度优化，所以我们花了很多时间去优化却没折腾出效果，公司没法再忍受我们去研究而不产出了，然后只能用原生把大部分核心功能重写了，只留下少量边边角角的业务用 RN，回过头一看，原本想借助跨端提高生产力，结果反而是降低了生产力，可以说是羊肉没吃到弄了一身骚，原因很简单，一但过了 0 到 1 这个阶段摆在面前只有两条路，要么深入甚至魔改 RN（这没个一年半载门都摸不着），要么用原生开始重构（原生开发组的同事还整天做优化呢，纯 RN 咋个做到极致），如果没有做这到选择题那么大概率我猜你们宣告项目失败甚至到了裁员的边缘，市场机会总是稍纵即逝，项目的失败与技术选项不无关系，这个问题值得深思。总结，得结合自身项目借助 RN 辅助完成一些工作，最好不要一梭哈的把鸡蛋全放 RN 的篮子里，除非你做的是需求明确并且生命周期可预测的项目。另外，这两天在研究原生承载页加载 RN 过慢的问题，安卓低端机得两三秒白屏后才能加载完渲染出来，不知道老师能否加个餐讲一讲怎么优化。","like_count":4,"discussions":[{"author":{"id":2178133,"avatar":"https://static001.geekbang.org/account/avatar/00/21/3c/55/74844d08.jpg","nickname":"大大小小","note":"","ucode":"8A21DC629A24F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625616,"discussion_content":"楼主可以细说下，具体遇到了什么瓶颈吗，我写了几个月，目前没有遇到大的阻碍，想知道你们遇到了哪些问题是rn无法解决的，目前最不舒服的是很多第三方组件都是三四年前的，没人维护，用了native base组件库，最近半年也没更新了，升级到0.72后，android端在scrollow里的输入框键盘弹起后输入框无法自动顶起，没办法，退回到0.71 版本了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691987265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":3616258,"avatar":"https://static001.geekbang.org/account/avatar/00/37/2e/02/7f151e08.jpg","nickname":"听说昵称太长了躲在树后面会被别人看见的","note":"","ucode":"EFFEE43631C3B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2178133,"avatar":"https://static001.geekbang.org/account/avatar/00/21/3c/55/74844d08.jpg","nickname":"大大小小","note":"","ucode":"8A21DC629A24F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625935,"discussion_content":"复杂页面，当一个页面有很多的状态时，比如 20 个  setState() 比较慢，特别是对 flatlist 进行更新时，然后你会考虑用各种手段合并 state 、使用各种 usecallback 缓存的手段来优化，优化一遍后除了让代码变得更复杂之外收益甚微。达到同样的性能效果，使用 rn 的心智负担比原生更大，这种复杂页面后来我们改成原生开发，用脚写出来都是丝滑流畅。再比如有密集计算的场景，例如一个运算耗时三秒，这三秒操作 ui 是卡顿的，因为 js 是单线程，而原生开发这种场景可以开子线程。总之，如果你的项目开始对标原生的时候那么就全身都是瓶颈，特别在低端机上，而我们之前做东南亚的项目，他们都是低端机，react navigation 跳转很慢，目标页越复杂跳转越慢，整体感受就是这 app 怎么这么卡。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1692338205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625616,"ip_address":"福建","group_id":0},"score":625935,"extra":""},{"author":{"id":2178133,"avatar":"https://static001.geekbang.org/account/avatar/00/21/3c/55/74844d08.jpg","nickname":"大大小小","note":"","ucode":"8A21DC629A24F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3616258,"avatar":"https://static001.geekbang.org/account/avatar/00/37/2e/02/7f151e08.jpg","nickname":"听说昵称太长了躲在树后面会被别人看见的","note":"","ucode":"EFFEE43631C3B4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626179,"discussion_content":"感谢，页面元素过多，页面复杂度高，渲染性能确实是一个问题，除了分帧加载，也没好的办法，密集计算也是一个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692619420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625935,"ip_address":"广东","group_id":0},"score":626179,"extra":""}]},{"author":{"id":1436276,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ea/74/7dd9c65e.jpg","nickname":"亦枫丶","note":"","ucode":"A8D09693C760E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625462,"discussion_content":"感谢分享。如果竞品比自己做的好，而RN正好是瓶颈，那确实很让人无助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691719813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384696,"user_name":"长林啊","can_delete":false,"product_type":"c1","uid":1707743,"ip_address":"四川","ucode":"B75CB4919FF25A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/df/a64b3146.jpg","comment_is_top":false,"comment_ctime":1701344292,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":2,"product_id":100110101,"comment_content":"老师后面能扩展react-native服务端渲染方向的相关内容吗？","like_count":1},{"had_liked":false,"id":379182,"user_name":"大大小小","can_delete":false,"product_type":"c1","uid":2178133,"ip_address":"江西","ucode":"8A21DC629A24F5","user_header":"https://static001.geekbang.org/account/avatar/00/21/3c/55/74844d08.jpg","comment_is_top":false,"comment_ctime":1691489897,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"哈哈，我居然是第一个毕业的！","like_count":1}]}