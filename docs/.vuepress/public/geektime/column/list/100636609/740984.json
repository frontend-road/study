{"id":740984,"title":"第 12 章 精益思想和高效编程","content":"\n<p> 本书所介绍的各项编程实践是彼此相关和互相促进的，它们共同构成了卓越工程师的技能体系。在本书的最后一章，我们来探讨一下这些编程实践背后的基本逻辑，以及是什么将它们连接在了一起，并且提升了它们的实际价值。</p>\n<h2 id=\"nav_point_274\">12.1 精益思想</h2>\n<p> 精益思想是适用于许多领域的思想方法，因为它抓住了问题的本质：结果导向，持续改进。丰田生产系统（TPS，Toyota Production System）是精益思想的前身，后来学者们基于它，提出了精益思想的五大原则，把精益思想扩展到了不同的业务领域。</p>\n<h3 id=\"nav_point_275\">12.1.1 丰田生产方式</h3>\n<p> 二战结束后，日本的汽车工业刚刚起步，汽车市场规模较小，对多样化的需求很高，所以当时以美国福特为代表的大规模生产方式并不适合日本市场。于是丰田汽车选择了不同的道路，这种方法被总结为丰田生产方式（The Toyota Way）。</p>\n<p> 后来事实证明，丰田生产方式非常适合日益多样化的用户需求和日益多变的商业环境。到了二十世纪八十年代，日本汽车业大幅超越美国，背后的核心竞争力就是丰田生产方式。当然，时至今日，全世界几乎所有的汽车制造商，都全面采用了这种方式——因为在今天如果不这样做，企业可能根本就无法生存。</p>\n<p> 丰田生产方式的创始人大野耐一认为，丰田生产方式的两个核心要素是：即时生产和自働化。</p><!-- [[[read_end]]] -->\n<p><strong>即时生产（JIT）</strong></p>\n<p> 即时生产是与大规模生产对立的生产管理方式。在大规模生产中，一次生产的数量越多越好，因为这样可以充分发挥规模效益。但是，在大规模生产中，尽管单位生产成本降下来了，却是以稳定的市场需求、强大的协调能力和雄厚的资金为前提的。如果市场需求突变，原来已经大规模生产完毕的东西就会卖不出去，成为库存积压。同样，如果各个生产部门的进度不一致，也会出现一些部门的产品缺货，另一些部门的产品却在积压的问题。</p>\n<p> 即时生产把降低库存作为核心目标：在每个工序上维持尽可能低的库存水平，即 JIT（Just In Time），意味着恰好在需要的时候才进行生产。这种生产目标使得一个叫作拉动的生产管理方式被广泛采用。</p>\n<p> 拉动是一种以终为始的思考逻辑：为什么我要生产汽车呢？那肯定是因为客户的需要。如果客户并不需要，我生产的汽车就成为了库存，这是不应该的。同样，生产某个零部件是因为有组装的需要，采购某种原材料则是生产的需要。每个生产环节都服务于它的下游环节。也就是说，上游环节的生产动作，取决于下游生产环节的指令，即下游环节“拉动”了上游环节的生产。</p>\n<p> 通过拉动的方式，不必要的部件在没有需要的时候就不会被生产出来。这样就最大程度减少了库存，降低了资金占用，提升了企业的风险应对能力，可以最大化地响应市场变化。</p>\n<p><strong>自働化</strong></p>\n<p> 自働化（Jidoka，Autonomation）并不是自动化（Automation）。自动化解决的是速度问题，而自働化的关注点在质量。</p>\n<p> 在生产制造领域，人们很早就发现，如果不及时发现缺陷，就会导致高昂的成本。在丰田公司的创始人丰田喜一郎创立丰田汽车前，其父亲丰田佐吉已经在织机领域具有很高的建树。丰田佐吉在生产实践中发现：如果织机的线断了，工人没有立即发现，就会导致大量的残次品。为此，丰田佐吉发明了一种改良型织机，这种织机可以识别是否断线，一旦断线，该织布机可以无须人工干预，自动停止。</p>\n<p> 自働化其实是这样的一种自动化：首先它应该自治，在正常情况下无须人工干预即可运行。但是，如果出现问题，它应该自动停止，让问题得到及时修复。这一点也可以从 Autonomation 这个单词来理解：Autonomation 就是 Autonomy 和 Automation 两个单词的组合，也就是“带有自治能力的自动化”。</p>\n<p> 大野耐一曾说：“追求数量会造成浪费，而追求质量会产生价值。”没有质量基础的数量是毫无意义的。在数字化尚未普及的时代，安灯系统就是一种广泛应用在精益生产线上的自働化方法，它使用一盏或一组灯来指示当前生产系统的状态，绿色代表正常。在这种生产线上，有一种被称为安灯绳的设施，一旦它被拉下，整条生产线将暂停。拉动安灯绳的权利被下放给所有工人。也就是说，任何工人只要发现品质问题，都可以拉动安灯绳，叫停整条生产线。这样，问题就可以被及时发现，防止其进一步扩散。</p>\n<h3 id=\"nav_point_276\">12.1.2 精益思想的五大原则</h3>\n<p> 虽然精益思想起源于丰田，但“精益”这个词是由美国人命名的。在丰田生产方式取得巨大成功之后，James P. Womack 等人对丰田生产方式做了深入调研，并且通过《改变世界的机器》<sup>[60]</sup>《精益思想》<sup>[61]</sup>等著作，系统地总结了丰田生产方式背后的思想，让精益思想传播到了全世界，其影响范围也远远超出了汽车工业。</p>\n<p> 《精益思想》概括了精益思想的五大原则，分别是价值、价值流、流动、拉动和持续改善。</p>\n<p><strong>价值</strong></p>\n<p> 价值原则是基关于价值定义的。精益思想认为：应该从客户视角定义价值，而不是从生产者的立场出发。这意味着要定义清晰的价值，真正做到从价值出发来思考整个过程。</p>\n<p><strong>价值流</strong></p>\n<p> 一旦识别了价值，就需要关心价值生产过程中的所有活动，向那些不能创造价值或者最优价值的行为发出挑战。例如，价值流图就是精益管理方法中的一个常用工具。它把生产的每个环节区分为有增值的活动、无增值但必需的活动、无增值且非必需的活动。其中，无增值且非必需的活动必须立即去除，对于无增值但必需的活动，应该思考如何通过改进流程、工具等加以改善。</p>\n<p><strong>流动</strong></p>\n<p> 生产过程必须可以持续流动，要让增值活动在价值流上顺畅流动。如果价值链的流动不顺畅，就会导致浪费。导致流动阻滞的原因有很多，如不同工种之间的等待，质量原因导致的返工等。</p>\n<p><strong>拉动</strong></p>\n<p> 拉动是一种用需求方的需要来驱动提供方的生产活动的协同方式，它也是一种实现即时生产的方式。拉动总是从真正的客户价值，也就是位于最末端的用户需求开始，逐步倒推至生产的每个步骤，让每个步骤都服从下游的指令，从而实现高质量的协同。</p>\n<p><strong>持续改善</strong></p>\n<p> 持续改善是精益思想的重要心智。对于复杂系统来说，在一开始就把一切都规划好是不现实的。需要在实践中持续思考当前的方法，持续地追求尽善尽美。和许多组织把持续改善作为一种口号不同，精益方法从系统角度让持续改善持续发生。</p>\n<h2 id=\"nav_point_277\">12.2 精益思想和软件设计的关系</h2>\n<p> 精益思想虽然源自制造领域，但其应用范围早已扩展到各种各样的领域，成为非常普遍的思想方法，例如精益营销、精益餐饮、精益医疗、精益供应链等。其中，精益创业和精益项目管理是和软件开发高度相关的两个领域。事实上，精益思想也完全适用于软件设计。</p>\n<p> 我最早从由外而内的开发开始感受到精益思想和卓越软件设计实践之间的联系——由外而内的设计本质上体现的就是精益的拉动思想。后来逐渐发现，尽管软件设计的许多优秀实践并非起源于精益思想，但是它们在精益思想的框架下却可以得到更为清晰的解释。</p>\n<p> 这并不意外。精益方法的本质是协同和管理复杂问题，而软件设计面临的根本困难就是复杂性问题。确实，软件设计是典型的技术工作而不是管理工作，但是如果把软件以及软件要解决的问题看作一个世界，程序员的工作就是在创造和协同这个世界。在这个世界中，做什么、不做什么、如何设计、如何分解、如何保证质量、如何演进，几乎在每一个细节上，都充满了复杂的决策。</p>\n<p> 现在让我们从精益视角来对软件开发中的重要问题进行讨论和分析。</p>\n<h3 id=\"nav_point_278\">12.2.1 价值导向</h3>\n<p> 软件设计的价值并绝不仅仅是“实现需求”。真正有价值的工作，一定源于真正的“影响”，也就是通过软件开发，给现实世界带来了积极的改变。</p>\n<p> 在第 1 章中，我们已经分析过高质量软件设计的特征。其中，实现了期望的功能意味着满足了业务价值，易于复用则反映了对未来的期望——软件的价值不限于当下，它也是组织持续积累的资产。</p>\n<p><strong>业务价值视角</strong></p>\n<p> 业务价值是软件开发的核心。程序员不能仅仅关注编码，需求分析是软件开发活动的真正起点，这也是为什么本书的实践是从高质量需求分析开始的原因。没有正确的需求分析，再好的实现也是徒劳。同样，在需求分析中，各项活动的起点也总是从目标开始的，这也是因为目标反映了真正的用户价值。</p>\n<p><strong>资产价值视角</strong></p>\n<p> 软件作为一种信息制品，它不仅仅适用于当下的业务场景，也会影响团队的未来发展——无论是积极的影响还是消极的影响。</p>\n<p> 软件的资产价值决定了软件开发的效率和竞争力。当然，如果资产为负，那就是“债务”。图 12.1 反映了不同情况的软件开发团队长期的生产力演进。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00423.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 12.1</strong> 资产和债务影响生产力</p>\n<p> 在初始阶段，二者的生产力相差不大。但是，随着时间发展，如果软件团队产出的代码质量不高，就会逐渐陷入易于维护、易于扩展的泥沼——随着债务的持续增加，效率大幅下降。而重视软件质量、重视可复用性的团队，在面对新的需求时，有许多软件资产可用，开发效率会呈现数量级的提升。</p>\n<blockquote>\n<p> 在软件开发中积累的是资产还是债务，成为软件开发效率，甚至业务成功与否的分水岭。</p>\n</blockquote>\n<p><strong>软件资产的本质是期权</strong></p>\n<p> 严格来说，软件资产并不是完全符合“资产”这个词的定义。现实世界的资产总是会持续地产生利息，而代码显然没有这样的特征，无论是高质量代码还是低质量代码。从一定意义上讲，代码更接近债务。因为代码写得越多，阅读和维护它的成本相对就会越高。</p>\n<p> 什么时候“软件资产”会变成真正的“资产”呢？那就是它有复用机会的时候。什么时候设计会被复用？我们并不精确知道。这就和期权一样。期权可能在未来被行权，也有可能在未来根本用不上（例如行权价高于股价）。但是，一旦行权，它们也就转化成了真正的资产。</p>\n<p> 把高质量的软件设计视为期权源自 Baldwin 和 Clark<sup>[51]</sup>。对待软件开发的策略，和对待期权的策略几乎一模一样。首先，你应该让自己尽可能持有较多的期权，这样在未来才有更多的机会。这就要求设计具有高复用性和可演进能力。第二，要降低行权的门槛。这意味着设计的契约要明确、耦合要低。第三，由于存在行权机会的不确定性，所以不要为期权付出过多的成本，简单设计是在这种情况下的最好选择。读者可以从本书中找到这些问题的方案。</p>\n<h3 id=\"nav_point_279\">12.2.2 流动和拉动</h3>\n<p> 设计和编码当然是为了交付价值。不过，设计和编码比生产线上的生产要复杂得多，这个流程永远不可能像生产线那样标准。而且，和很多人的已有认知不同，设计和编码的核心产出并不是代码。</p>\n<p> 设计和编码的核心产出是解决方案，代码只是解决方案的载体。既然是解决方案，需要的就是持续的探索和发现。通过拉动，可以带来最高的探索效率。在第 9 章中介绍的由外而内的开发方法，就是拉动一词最典型的体现。</p>\n<p><strong>从价值开始拉动</strong></p>\n<p> 得益于测试替身技术，由外而内的开发实践总是从真正的用户需求开始，并且使用用户需求作为拉动的起点。由于用户需求最接近价值侧，所以它的确定性最高，避免了不确定导致的返工或者过度设计。</p>\n<p> 拉动的对立面是推动，在软件实现中的对应是“自下而上编码”。如果先从底层模块开始，很容易出现问题。例如，在第 9 章的俄罗斯方块的例子中，先从底层实现一个矩阵类 <code>Matrix</code>，就是过度设计甚至是返工的案例。</p>\n<p><strong>由外而内消除了等待和库存</strong></p>\n<p> 自顶向下设计，自下而上编码。这种方式的一个大问题是产生了大量无法立即集成的代码。用精益的术语来讲，这些都是在制品。</p>\n<p> 在制品（WIP，Working In Progress）指的是一切已经经过加工，但是尚不能贡献客户价值的东西。例如，正在生产工序中的部件、已经加工好但是尚未进行组装的部件、已经组装完成但是尚未检验的成品、已经检验但是尚未成功销售的成品等。</p>\n<p> 由外而内的开发方式会极大降低在制品的数量。由于每一个模块、每一行代码都是从需求逐层驱动出来的，所以它们在第一时间就进行了集成，本质上是先集成、后实现。由于测试替身工具的存在，它随时随地都能够运行和检验，所以在制品的数量就会非常低。</p>\n<p><strong>把接口作为拉动信号</strong></p>\n<p> 由外而内的实现，让接口定义变得特别简单，也更加重要。在由外而内的方式中，设计层边界上的接口定义是按需拉动出来的。这些接口本质上就是下一个设计层的订单。在下一层要实现哪些功能，只要看在上一步中仿冒的是哪些接口就可以了。</p>\n<p><strong>应用领域模型和设计原则</strong></p>\n<p> 领域模型和设计原则保证了由外而内分解和实现的流畅性。在由外而内的开发方式中，代码编写的过程就是职责分解的过程。如何让这种职责分解的过程清晰且顺畅，是本书在领域模型和设计原则中重点关注的内容。</p>\n<h3 id=\"nav_point_280\">12.2.3 质量内建</h3>\n<p> 质量在任何行业都是最关键的因素。精益方法极度重视质量，其基本心智是：质量问题只是外在表现，更深层次的问题往往是系统问题。</p>\n<p> 本书一直在强调质量，并在第 10 章进行了总结。测试先行从根本上增强了质量的反馈。通过重新排布测试和开发活动的顺序，完成从 V 模型到 I 模型的转换，测试先行不仅丰富了需求分析和设计阶段的探索和发现，并且在实现活动中让质量问题刚刚萌芽就无所遁形。</p>\n<p> 软件开发中的持续集成方案、早崩溃也恰恰契合了精益生产的自働化思想。可以认为，持续集成出错即停止的方案就是精益的安灯系统在软件领域的实现。同时，早崩溃通过极大化违反契约的影响的方式，促进了整个团队关注契约，和安灯绳有异曲同工之妙，它增强了设计的稳定性，并且避免了错误在系统中的蔓延。</p>\n<h3 id=\"nav_point_281\">12.2.4 持续改善</h3>\n<p> 软件是一个复杂系统，解决的是现实世界的复杂问题。只要认知没有停止，业务仍在“生长”，软件系统就需要持续演进。用精益思想的持续改善心智来看待软件系统的开发，就会理解：演进式设计是软件能持续“生长”的灵魂。</p>\n<h2 id=\"nav_point_282\">12.3 总结</h2>\n<p> 图 12.2 总结了本书介绍的主要编程实践，核心内容是一个根本挑战、两大核心价值、三大设计原则和系列技术实践。这个图在前言部分也曾经出现过，下面我们对该图中出现的关键概念进行解释和总结。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00424.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 12.2</strong> 精益编程实践总结</p>\n<h3 id=\"nav_point_283\">12.3.1 一个根本挑战</h3>\n<p> 理解软件与生俱来的复杂性是理解一切软件工程实践的根本。软件工程巨匠 Fred Brooks 在《没有银弹》<sup>[62]</sup>中论证了一个核心观点：软件是迄今为止最复杂的人造物。大家可以将软件和人类发明的其他事物（例如建筑、工具甚至是没有软件介入的机械等）进行比较，会发现下面几点。</p>\n<ul>\n<li>软件充满了信息。每一行代码都是信息，任何一行代码不正确功能就不正确。</li>\n<li>不可见。在外部无法直观感知设计质量。</li>\n<li>容易变更。软件是“软”的，它本身就是为了“变更”而存在的。</li>\n<li>没有必然规律。不同于客观物理规律，软件的需求是服务于现实业务的，而现实业务没有那么强的规律性。</li>\n</ul>\n<p> 以上这些都决定了软件开发人员面临的是复杂的挑战。同时，软件中遗留的问题、不同开发者的方法和认知不统一等问题，进一步加剧了这种复杂性。好的开发实践，必须能应对这些复杂性。</p>\n<h3 id=\"nav_point_284\">12.3.2 两大核心价值</h3>\n<p> 两大核心价值是软件开发的当前业务价值和长期资产价值。12.2 节已经分析了这两大核心价值。高质量的软件设计实践，必须聚焦于这两个核心价值。</p>\n<h3 id=\"nav_point_285\">12.3.3 三大设计原则</h3>\n<p> 三大设计原则是对软件复杂性的响应。具体来说，它们是三个彼此相关的方面：分而治之原则、持续演进原则和质量内建原则。</p>\n<ul>\n<li>分而治之原则。面对复杂性问题，“分而治之”是最普遍而有效的手段。通过“分而治之”，把大的问题分解为小的问题，然后各个击破。这也就是软件开发中的模块化的思想。</li>\n<li>持续演进原则。软件不仅在空间维度上是复杂的，而且在时间维度上是持续变化的。如果软件开发实践不能适应未来的变化，那必然是失败的。好的软件设计实践，不是把适应变化作为一项附加能力，而是从根本上就把持续演进作为核心要素。这就是演进式设计的关键作用。</li>\n<li>质量内建原则。质量是一切的核心。它决定了业务价值的实现，也决定了在开发过程中沉淀的究竟是资产还是债务，同时也是软件可以演进的基础。</li>\n</ul>\n<h3 id=\"nav_point_286\">12.3.4 实践：高质量的需求</h3>\n<p> 高质量的需求包括了许多实践，例如需求分析金字塔、事件驱动的业务分析、实例化需求等。它承接了业务价值，并且成为了由外而内开发的起点。</p>\n<h3 id=\"nav_point_287\">12.3.5 实践：领域模型</h3>\n<p> 领域模型反映了对业务的核心认知，定义了业务的标准概念，实现了统一语言。所以，重视领域模型的团队，必然会获得更高质量的需求分析，而高质量的需求分析，又反过来推动了领域模型的完善。</p>\n<p> 领域模型带来了良好结构，特别是子域和限界上下文的对应、聚合的边界等，都提升了软件设计的复用性。此外，领域驱动设计建立了一套有价值的模式体系，大幅增强了领域模型对实现层面和架构层面的指导意义。</p>\n<p> 领域模型和演进式设计有着密切的联系。既然反映的是业务认知，这种认知就必然会持续升级。所以，在演进式设计过程中，会通过重构等方式，持续地把认知反映到领域模型中，从而给软件资产带来更深层次的价值。</p>\n<h3 id=\"nav_point_288\">12.3.6 实践：由外而内</h3>\n<p> 由外而内是精益编程体系的核心思想。在图 12.2 中，由外而内让设计分解和接口和契约有据可循，带来了更好的分解层次的一致性，也让接口和契约的定义更加顺畅自然。</p>\n<h3 id=\"nav_point_289\">12.3.7 实践：接口和契约</h3>\n<p> 接口和契约对高质量的设计极为重要，保证了设计的内聚性和复用性。接口和契约也是测试先行的输入以及契约式设计的前提。</p>\n<h3 id=\"nav_point_290\">12.3.8 实践：测试先行</h3>\n<p> 测试先行是开发实践的重要变革和突破。它从本质上解决了自动化测试的及时性和完整性问题，并且让 I 模型从代码层面变为现实。不仅如此，测试先行还是契约表达的最精确方式，以及活文档的支撑机制。如果测试先行和演进式设计互相融合，也就形成了测试驱动开发。</p>\n\n<br style=\"page-break-after:always\" /\n<p>本书所介绍的各项编程实践是彼此相关和互相促进的，它们共同构成了卓越工程师的技能体系。在本书的最后一章，我们来探讨一下这些编程实践背后的基本逻辑，以及是什么将它们连接在了一起，并且提升了它们的实际价值。</p>\n<h2 id=\"nav_point_274\">12.1　精益思想</h2>\n<p>精益思想是适用于许多领域的思想方法，因为它抓住了问题的本质：结果导向，持续改进。丰田生产系统（TPS，Toyota Production System）是精益思想的前身，后来学者们基于它，提出了精益思想的五大原则，把精益思想扩展到了不同的业务领域。</p>\n<h3 id=\"nav_point_275\">12.1.1　丰田生产方式</h3>\n<p>二战结束后，日本的汽车工业刚刚起步，汽车市场规模较小，对多样化的需求很高，所以当时以美国福特为代表的大规模生产方式并不适合日本市场。于是丰田汽车选择了不同的道路，这种方法被总结为丰田生产方式（The Toyota Way）。</p>\n<p>后来事实证明，丰田生产方式非常适合日益多样化的用户需求和日益多变的商业环境。到了二十世纪八十年代，日本汽车业大幅超越美国，背后的核心竞争力就是丰田生产方式。当然，时至今日，全世界几乎所有的汽车制造商，都全面采用了这种方式——因为在今天如果不这样做，企业可能根本就无法生存。</p>\n<p>丰田生产方式的创始人大野耐一认为，丰田生产方式的两个核心要素是：即时生产和自働化。</p><!-- [[[read_end]]] -->\n<p><strong>即时生产（JIT）</strong></p>\n<p>即时生产是与大规模生产对立的生产管理方式。在大规模生产中，一次生产的数量越多越好，因为这样可以充分发挥规模效益。但是，在大规模生产中，尽管单位生产成本降下来了，却是以稳定的市场需求、强大的协调能力和雄厚的资金为前提的。如果市场需求突变，原来已经大规模生产完毕的东西就会卖不出去，成为库存积压。同样，如果各个生产部门的进度不一致，也会出现一些部门的产品缺货，另一些部门的产品却在积压的问题。</p>\n<p>即时生产把降低库存作为核心目标：在每个工序上维持尽可能低的库存水平，即 JIT（Just In Time），意味着恰好在需要的时候才进行生产。这种生产目标使得一个叫作拉动的生产管理方式被广泛采用。</p>\n<p>拉动是一种以终为始的思考逻辑：为什么我要生产汽车呢？那肯定是因为客户的需要。如果客户并不需要，我生产的汽车就成为了库存，这是不应该的。同样，生产某个零部件是因为有组装的需要，采购某种原材料则是生产的需要。每个生产环节都服务于它的下游环节。也就是说，上游环节的生产动作，取决于下游生产环节的指令，即下游环节“拉动”了上游环节的生产。</p>\n<p>通过拉动的方式，不必要的部件在没有需要的时候就不会被生产出来。这样就最大程度减少了库存，降低了资金占用，提升了企业的风险应对能力，可以最大化地响应市场变化。</p>\n<p><strong>自働化</strong></p>\n<p>自働化（Jidoka，Autonomation）并不是自动化（Automation）。自动化解决的是速度问题，而自働化的关注点在质量。</p>\n<p>在生产制造领域，人们很早就发现，如果不及时发现缺陷，就会导致高昂的成本。在丰田公司的创始人丰田喜一郎创立丰田汽车前，其父亲丰田佐吉已经在织机领域具有很高的建树。丰田佐吉在生产实践中发现：如果织机的线断了，工人没有立即发现，就会导致大量的残次品。为此，丰田佐吉发明了一种改良型织机，这种织机可以识别是否断线，一旦断线，该织布机可以无须人工干预，自动停止。</p>\n<p>自働化其实是这样的一种自动化：首先它应该自治，在正常情况下无须人工干预即可运行。但是，如果出现问题，它应该自动停止，让问题得到及时修复。这一点也可以从 Autonomation 这个单词来理解：Autonomation 就是 Autonomy 和 Automation 两个单词的组合，也就是“带有自治能力的自动化”。</p>\n<p>大野耐一曾说：“追求数量会造成浪费，而追求质量会产生价值。”没有质量基础的数量是毫无意义的。在数字化尚未普及的时代，安灯系统就是一种广泛应用在精益生产线上的自働化方法，它使用一盏或一组灯来指示当前生产系统的状态，绿色代表正常。在这种生产线上，有一种被称为安灯绳的设施，一旦它被拉下，整条生产线将暂停。拉动安灯绳的权利被下放给所有工人。也就是说，任何工人只要发现品质问题，都可以拉动安灯绳，叫停整条生产线。这样，问题就可以被及时发现，防止其进一步扩散。</p>\n<h3 id=\"nav_point_276\">12.1.2　精益思想的五大原则</h3>\n<p>虽然精益思想起源于丰田，但“精益”这个词是由美国人命名的。在丰田生产方式取得巨大成功之后，James P. Womack 等人对丰田生产方式做了深入调研，并且通过《改变世界的机器》<sup>[60]</sup>《精益思想》<sup>[61]</sup>等著作，系统地总结了丰田生产方式背后的思想，让精益思想传播到了全世界，其影响范围也远远超出了汽车工业。</p>\n<p>《精益思想》概括了精益思想的五大原则，分别是价值、价值流、流动、拉动和持续改善。</p>\n<p><strong>价值</strong></p>\n<p>价值原则是基关于价值定义的。精益思想认为：应该从客户视角定义价值，而不是从生产者的立场出发。这意味着要定义清晰的价值，真正做到从价值出发来思考整个过程。</p>\n<p><strong>价值流</strong></p>\n<p>一旦识别了价值，就需要关心价值生产过程中的所有活动，向那些不能创造价值或者最优价值的行为发出挑战。例如，价值流图就是精益管理方法中的一个常用工具。它把生产的每个环节区分为有增值的活动、无增值但必需的活动、无增值且非必需的活动。其中，无增值且非必需的活动必须立即去除，对于无增值但必需的活动，应该思考如何通过改进流程、工具等加以改善。</p>\n<p><strong>流动</strong></p>\n<p>生产过程必须可以持续流动，要让增值活动在价值流上顺畅流动。如果价值链的流动不顺畅，就会导致浪费。导致流动阻滞的原因有很多，如不同工种之间的等待，质量原因导致的返工等。</p>\n<p><strong>拉动</strong></p>\n<p>拉动是一种用需求方的需要来驱动提供方的生产活动的协同方式，它也是一种实现即时生产的方式。拉动总是从真正的客户价值，也就是位于最末端的用户需求开始，逐步倒推至生产的每个步骤，让每个步骤都服从下游的指令，从而实现高质量的协同。</p>\n<p><strong>持续改善</strong></p>\n<p>持续改善是精益思想的重要心智。对于复杂系统来说，在一开始就把一切都规划好是不现实的。需要在实践中持续思考当前的方法，持续地追求尽善尽美。和许多组织把持续改善作为一种口号不同，精益方法从系统角度让持续改善持续发生。</p>\n<h2 id=\"nav_point_277\">12.2　精益思想和软件设计的关系</h2>\n<p>精益思想虽然源自制造领域，但其应用范围早已扩展到各种各样的领域，成为非常普遍的思想方法，例如精益营销、精益餐饮、精益医疗、精益供应链等。其中，精益创业和精益项目管理是和软件开发高度相关的两个领域。事实上，精益思想也完全适用于软件设计。</p>\n<p>我最早从由外而内的开发开始感受到精益思想和卓越软件设计实践之间的联系——由外而内的设计本质上体现的就是精益的拉动思想。后来逐渐发现，尽管软件设计的许多优秀实践并非起源于精益思想，但是它们在精益思想的框架下却可以得到更为清晰的解释。</p>\n<p>这并不意外。精益方法的本质是协同和管理复杂问题，而软件设计面临的根本困难就是复杂性问题。确实，软件设计是典型的技术工作而不是管理工作，但是如果把软件以及软件要解决的问题看作一个世界，程序员的工作就是在创造和协同这个世界。在这个世界中，做什么、不做什么、如何设计、如何分解、如何保证质量、如何演进，几乎在每一个细节上，都充满了复杂的决策。</p>\n<p>现在让我们从精益视角来对软件开发中的重要问题进行讨论和分析。</p>\n<h3 id=\"nav_point_278\">12.2.1　价值导向</h3>\n<p>软件设计的价值并绝不仅仅是“实现需求”。真正有价值的工作，一定源于真正的“影响”，也就是通过软件开发，给现实世界带来了积极的改变。</p>\n<p>在第 1 章中，我们已经分析过高质量软件设计的特征。其中，实现了期望的功能意味着满足了业务价值，易于复用则反映了对未来的期望——软件的价值不限于当下，它也是组织持续积累的资产。</p>\n<p><strong>业务价值视角</strong></p>\n<p>业务价值是软件开发的核心。程序员不能仅仅关注编码，需求分析是软件开发活动的真正起点，这也是为什么本书的实践是从高质量需求分析开始的原因。没有正确的需求分析，再好的实现也是徒劳。同样，在需求分析中，各项活动的起点也总是从目标开始的，这也是因为目标反映了真正的用户价值。</p>\n<p><strong>资产价值视角</strong></p>\n<p>软件作为一种信息制品，它不仅仅适用于当下的业务场景，也会影响团队的未来发展——无论是积极的影响还是消极的影响。</p>\n<p>软件的资产价值决定了软件开发的效率和竞争力。当然，如果资产为负，那就是“债务”。图 12.1 反映了不同情况的软件开发团队长期的生产力演进。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00423.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 12.1</strong>　资产和债务影响生产力</p>\n<p>在初始阶段，二者的生产力相差不大。但是，随着时间发展，如果软件团队产出的代码质量不高，就会逐渐陷入易于维护、易于扩展的泥沼——随着债务的持续增加，效率大幅下降。而重视软件质量、重视可复用性的团队，在面对新的需求时，有许多软件资产可用，开发效率会呈现数量级的提升。</p>\n<blockquote>\n<p>在软件开发中积累的是资产还是债务，成为软件开发效率，甚至业务成功与否的分水岭。</p>\n</blockquote>\n<p><strong>软件资产的本质是期权</strong></p>\n<p>严格来说，软件资产并不是完全符合“资产”这个词的定义。现实世界的资产总是会持续地产生利息，而代码显然没有这样的特征，无论是高质量代码还是低质量代码。从一定意义上讲，代码更接近债务。因为代码写得越多，阅读和维护它的成本相对就会越高。</p>\n<p>什么时候“软件资产”会变成真正的“资产”呢？那就是它有复用机会的时候。什么时候设计会被复用？我们并不精确知道。这就和期权一样。期权可能在未来被行权，也有可能在未来根本用不上（例如行权价高于股价）。但是，一旦行权，它们也就转化成了真正的资产。</p>\n<p>把高质量的软件设计视为期权源自 Baldwin 和 Clark<sup>[51]</sup>。对待软件开发的策略，和对待期权的策略几乎一模一样。首先，你应该让自己尽可能持有较多的期权，这样在未来才有更多的机会。这就要求设计具有高复用性和可演进能力。第二，要降低行权的门槛。这意味着设计的契约要明确、耦合要低。第三，由于存在行权机会的不确定性，所以不要为期权付出过多的成本，简单设计是在这种情况下的最好选择。读者可以从本书中找到这些问题的方案。</p>\n<h3 id=\"nav_point_279\">12.2.2　流动和拉动</h3>\n<p>设计和编码当然是为了交付价值。不过，设计和编码比生产线上的生产要复杂得多，这个流程永远不可能像生产线那样标准。而且，和很多人的已有认知不同，设计和编码的核心产出并不是代码。</p>\n<p>设计和编码的核心产出是解决方案，代码只是解决方案的载体。既然是解决方案，需要的就是持续的探索和发现。通过拉动，可以带来最高的探索效率。在第 9 章中介绍的由外而内的开发方法，就是拉动一词最典型的体现。</p>\n<p><strong>从价值开始拉动</strong></p>\n<p>得益于测试替身技术，由外而内的开发实践总是从真正的用户需求开始，并且使用用户需求作为拉动的起点。由于用户需求最接近价值侧，所以它的确定性最高，避免了不确定导致的返工或者过度设计。</p>\n<p>拉动的对立面是推动，在软件实现中的对应是“自下而上编码”。如果先从底层模块开始，很容易出现问题。例如，在第 9 章的俄罗斯方块的例子中，先从底层实现一个矩阵类 <code>Matrix</code>，就是过度设计甚至是返工的案例。</p>\n<p><strong>由外而内消除了等待和库存</strong></p>\n<p>自顶向下设计，自下而上编码。这种方式的一个大问题是产生了大量无法立即集成的代码。用精益的术语来讲，这些都是在制品。</p>\n<p>在制品（WIP，Working In Progress）指的是一切已经经过加工，但是尚不能贡献客户价值的东西。例如，正在生产工序中的部件、已经加工好但是尚未进行组装的部件、已经组装完成但是尚未检验的成品、已经检验但是尚未成功销售的成品等。</p>\n<p>由外而内的开发方式会极大降低在制品的数量。由于每一个模块、每一行代码都是从需求逐层驱动出来的，所以它们在第一时间就进行了集成，本质上是先集成、后实现。由于测试替身工具的存在，它随时随地都能够运行和检验，所以在制品的数量就会非常低。</p>\n<p><strong>把接口作为拉动信号</strong></p>\n<p>由外而内的实现，让接口定义变得特别简单，也更加重要。在由外而内的方式中，设计层边界上的接口定义是按需拉动出来的。这些接口本质上就是下一个设计层的订单。在下一层要实现哪些功能，只要看在上一步中仿冒的是哪些接口就可以了。</p>\n<p><strong>应用领域模型和设计原则</strong></p>\n<p>领域模型和设计原则保证了由外而内分解和实现的流畅性。在由外而内的开发方式中，代码编写的过程就是职责分解的过程。如何让这种职责分解的过程清晰且顺畅，是本书在领域模型和设计原则中重点关注的内容。</p>\n<h3 id=\"nav_point_280\">12.2.3　质量内建</h3>\n<p>质量在任何行业都是最关键的因素。精益方法极度重视质量，其基本心智是：质量问题只是外在表现，更深层次的问题往往是系统问题。</p>\n<p>本书一直在强调质量，并在第 10 章进行了总结。测试先行从根本上增强了质量的反馈。通过重新排布测试和开发活动的顺序，完成从 V 模型到 I 模型的转换，测试先行不仅丰富了需求分析和设计阶段的探索和发现，并且在实现活动中让质量问题刚刚萌芽就无所遁形。</p>\n<p>软件开发中的持续集成方案、早崩溃也恰恰契合了精益生产的自働化思想。可以认为，持续集成出错即停止的方案就是精益的安灯系统在软件领域的实现。同时，早崩溃通过极大化违反契约的影响的方式，促进了整个团队关注契约，和安灯绳有异曲同工之妙，它增强了设计的稳定性，并且避免了错误在系统中的蔓延。</p>\n<h3 id=\"nav_point_281\">12.2.4　持续改善</h3>\n<p>软件是一个复杂系统，解决的是现实世界的复杂问题。只要认知没有停止，业务仍在“生长”，软件系统就需要持续演进。用精益思想的持续改善心智来看待软件系统的开发，就会理解：演进式设计是软件能持续“生长”的灵魂。</p>\n<h2 id=\"nav_point_282\">12.3　总结</h2>\n<p>图 12.2 总结了本书介绍的主要编程实践，核心内容是一个根本挑战、两大核心价值、三大设计原则和系列技术实践。这个图在前言部分也曾经出现过，下面我们对该图中出现的关键概念进行解释和总结。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00424.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 12.2</strong>　精益编程实践总结</p>\n<h3 id=\"nav_point_283\">12.3.1　一个根本挑战</h3>\n<p>理解软件与生俱来的复杂性是理解一切软件工程实践的根本。软件工程巨匠 Fred Brooks 在《没有银弹》<sup>[62]</sup>中论证了一个核心观点：软件是迄今为止最复杂的人造物。大家可以将软件和人类发明的其他事物（例如建筑、工具甚至是没有软件介入的机械等）进行比较，会发现下面几点。</p>\n<ul>\n<li>软件充满了信息。每一行代码都是信息，任何一行代码不正确功能就不正确。</li>\n<li>不可见。在外部无法直观感知设计质量。</li>\n<li>容易变更。软件是“软”的，它本身就是为了“变更”而存在的。</li>\n<li>没有必然规律。不同于客观物理规律，软件的需求是服务于现实业务的，而现实业务没有那么强的规律性。</li>\n</ul>\n<p>以上这些都决定了软件开发人员面临的是复杂的挑战。同时，软件中遗留的问题、不同开发者的方法和认知不统一等问题，进一步加剧了这种复杂性。好的开发实践，必须能应对这些复杂性。</p>\n<h3 id=\"nav_point_284\">12.3.2　两大核心价值</h3>\n<p>两大核心价值是软件开发的当前业务价值和长期资产价值。12.2 节已经分析了这两大核心价值。高质量的软件设计实践，必须聚焦于这两个核心价值。</p>\n<h3 id=\"nav_point_285\">12.3.3　三大设计原则</h3>\n<p>三大设计原则是对软件复杂性的响应。具体来说，它们是三个彼此相关的方面：分而治之原则、持续演进原则和质量内建原则。</p>\n<ul>\n<li>分而治之原则。面对复杂性问题，“分而治之”是最普遍而有效的手段。通过“分而治之”，把大的问题分解为小的问题，然后各个击破。这也就是软件开发中的模块化的思想。</li>\n<li>持续演进原则。软件不仅在空间维度上是复杂的，而且在时间维度上是持续变化的。如果软件开发实践不能适应未来的变化，那必然是失败的。好的软件设计实践，不是把适应变化作为一项附加能力，而是从根本上就把持续演进作为核心要素。这就是演进式设计的关键作用。</li>\n<li>质量内建原则。质量是一切的核心。它决定了业务价值的实现，也决定了在开发过程中沉淀的究竟是资产还是债务，同时也是软件可以演进的基础。</li>\n</ul>\n<h3 id=\"nav_point_286\">12.3.4　实践：高质量的需求</h3>\n<p>高质量的需求包括了许多实践，例如需求分析金字塔、事件驱动的业务分析、实例化需求等。它承接了业务价值，并且成为了由外而内开发的起点。</p>\n<h3 id=\"nav_point_287\">12.3.5　实践：领域模型</h3>\n<p>领域模型反映了对业务的核心认知，定义了业务的标准概念，实现了统一语言。所以，重视领域模型的团队，必然会获得更高质量的需求分析，而高质量的需求分析，又反过来推动了领域模型的完善。</p>\n<p>领域模型带来了良好结构，特别是子域和限界上下文的对应、聚合的边界等，都提升了软件设计的复用性。此外，领域驱动设计建立了一套有价值的模式体系，大幅增强了领域模型对实现层面和架构层面的指导意义。</p>\n<p>领域模型和演进式设计有着密切的联系。既然反映的是业务认知，这种认知就必然会持续升级。所以，在演进式设计过程中，会通过重构等方式，持续地把认知反映到领域模型中，从而给软件资产带来更深层次的价值。</p>\n<h3 id=\"nav_point_288\">12.3.6　实践：由外而内</h3>\n<p>由外而内是精益编程体系的核心思想。在图 12.2 中，由外而内让设计分解和接口和契约有据可循，带来了更好的分解层次的一致性，也让接口和契约的定义更加顺畅自然。</p>\n<h3 id=\"nav_point_289\">12.3.7　实践：接口和契约</h3>\n<p>接口和契约对高质量的设计极为重要，保证了设计的内聚性和复用性。接口和契约也是测试先行的输入以及契约式设计的前提。</p>\n<h3 id=\"nav_point_290\">12.3.8　实践：测试先行</h3>\n<p>测试先行是开发实践的重要变革和突破。它从本质上解决了自动化测试的及时性和完整性问题，并且让 I 模型从代码层面变为现实。不仅如此，测试先行还是契约表达的最精确方式，以及活文档的支撑机制。如果测试先行和演进式设计互相融合，也就形成了测试驱动开发。</p>\n\n<br style=\"page-break-after:always\" />","neighbors":{"left":{"article_title":"第 11 章 让设计持续演进","id":740983},"right":{"article_title":"参考文献","id":740985}},"comments":[]}