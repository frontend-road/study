{"id":248883,"title":"20 | 设计模式（下）：C++是怎么应用设计模式的？","content":"<p>你好，我是Chrono。</p><p>上节课，我谈了设计模式和设计原则。今天，我就具体说说，在C++里，该怎么应用单件、工厂、适配器、代理、职责链等这些经典的设计模式，用到的有call_once()、make_unique()、async()等C++工具，希望能够给你一些在实际编码时的启发。</p><p>（在接下来学的时候，你也可以同时思考一下它们都符合哪些设计原则，把设计模式和设计原则结合起来学习。）</p><h2>创建型模式</h2><p>首先来看看创建型模式，<strong>它隐藏了类的实例化过程和细节，让对象的创建独立于系统的其他部分</strong>。</p><p>创建型模式不多，一共有5个，我觉得最有用的是<strong>单件和工厂</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/34/9e859a3bba338b1c4eff565d87a63834.jpg?wh=2250*2442\" alt=\"\"></p><p>单件很简单，要点在于控制对象的创建数量，只能有一个实例，就像是公司的CEO一样，有且唯一。</p><p>关于它的使用方式、应用场景，存在着一些争议，但我个人觉得，它很好地体现了设计模式的基本思想，足够简单，可以作为范例，用来好好学习模式里的各个要素。</p><p>关于单件模式，一个“老生常谈”的话题是“双重检查锁定”，你可能也有所了解，它可以用来避免在多线程环境里多次初始化单件，写起来特别繁琐。</p><p>使用<a href=\"https://time.geekbang.org/column/article/245259\">第14讲</a>里提到的call_once，可以很轻松地解决这个问题，但如果你想要更省事的话，其实在C++里还有一种方法（C++ 11之后），就是<strong>直接使用函数内部的static静态变量</strong>。C++语言会保证静态变量的初始化是线程安全的，绝对不会有线程冲突。比如：</p><!-- [[[read_end]]] --><pre><code>auto&amp; instance()    // 生产单件对象的函数\n{\n  static T obj;     // 静态变量\n  return obj;       // 返回对象的引用\n}\n</code></pre><p>说完了单件，再来看工厂模式吧。</p><p>工厂模式是我个人的“笼统”说法，指的是抽象工厂、工厂方法这两个模式，因为它们就像是现实世界里的工厂一样，专门用来生产对象。</p><p>抽象工厂是一个类，而工厂方法是一个函数，在纯面向对象范式里，两者的区别很大。而C++支持泛型编程，不需要特意派生出子类，只要接口相同就行，所以，这两个模式在C++里用起来也就更自由一些，界限比较模糊。</p><p>为什么非要用工厂来创建对象呢？这样做的好处在哪里呢？</p><p>我觉得，你可以用DRY（Don’t Repeate Yourself）原则来理解，也就是说尽量避免重复的代码，简单地认为它就是“<strong>对new的封装</strong>”。</p><p>想象一下，如果程序里到处都是“硬编码”的new，一旦设计发生变动，比如说把“new 苹果”改成“new 梨子”，你就需要把代码里所有出现new的地方都改一遍，不仅麻烦，而且很容易遗漏，甚至是出错。</p><p>如果把new用工厂封装起来，就形成了一个“中间层”，隔离了客户代码和创建对象，两边只能通过工厂交互，彼此不知情，也就实现了解耦，由之前的强联系转变成了弱联系。所以，你就可以在工厂模式里拥有对象的“生杀大权”，随意控制生产的方式、生产的时机、生产的内容。</p><p>在<a href=\"https://time.geekbang.org/column/article/239580\">第8讲</a>里说到的make_unique()、make_shared()这两个函数，就是工厂模式的具体应用，它们封装了创建的细节，看不见new，直接返回智能指针对象，而且接口更简洁，内部有更多的优化。</p><pre><code>auto ptr1 = make_unique&lt;int&gt;(42);\nauto ptr2 = make_shared&lt;string&gt;(&quot;metroid&quot;);\n</code></pre><p>还有之前课程里的用函数抛出异常（<a href=\"https://time.geekbang.org/column/article/240292\">第9讲</a>）、创建正则对象（<a href=\"https://time.geekbang.org/column/article/242603\">第11讲</a>）、创建Lua虚拟机（<a href=\"https://time.geekbang.org/column/article/245905\">第17讲</a>），其实也都是应用了工厂模式。这些你可以结合课程的具体内容，再回顾一下，我就不多说了。</p><p>使用工厂模式的关键，就是<strong>要理解它面对的问题和解决问题的思路</strong>，比如说创建专属的对象、创建成套的对象，重点是“如何创建对象、创建出什么样的对象”，用函数或者类会比单纯用new更灵活。</p><h2>结构型模式</h2><p>接下来说说结构型模式，它关注的是对象的<strong>静态联系，以灵活、可拆卸、可装配的方式组合出新的对象</strong>。</p><p>这里你要注意结构型模式的重要特点：虽然它会有多个参与者，但最后必定得到且使用的是“<strong>一个</strong>”对象，而不是“多个”对象。</p><p>结构型模式一共有7个，其中，我觉得在C++里比较有用、常用的是<strong>适配器、外观和代理</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/38/0c142aa2f536c22008b6e24aa609ce38.jpg?wh=2250*3387\" alt=\"\"></p><p><strong>1.适配器模式</strong></p><p>适配器模式的目的是接口转换，不需要修改源码，就能够把一个对象转换成可以在本系统中使用的形式。</p><p>打个比方，就像是拿到了一个英式电源插头，无法插到国标插座上，但你不必拿工具去拆开插头改造，只要买个转换头就行。</p><p>适配器模式在C++里多出现在有第三方库或者外部接口的时候，通常这些接口不会恰好符合我们自己的系统，功能很好，但不能直接用，想改源码很难，甚至是不可能的。所以，就需要用适配器模式给“适配”一下，让外部工具能够“match”我们的系统，而两边都不需要变动，“皆大欢喜”。</p><p>还记得<a href=\"https://time.geekbang.org/column/article/243319\">第12讲</a>里的容器array吗？它就是一个适配器，包装了C++的原生数组，转换成了容器的形式，让“裸内存数据”也可以接入标准库的泛型体系。</p><pre><code>array&lt;int, 5&gt; arr = {0,1,2,3,4};\n\nauto b = begin(arr);\nauto e = end(arr);\n\nfor_each(b, e, [](int x){...});\n</code></pre><p><strong>2.外观模式</strong></p><p>再来看外观模式，它封装了一组对象，目的是简化这组对象的通信关系，提供一个高层次的易用接口，让外部用户更容易使用，降低系统的复杂度。</p><p>外观模式的特点是内部会操作很多对象，然后对外表现成一个对象。使用它的话，你就可以不用“事必躬亲”了，只要发一个指令，后面的杂事就都由它代劳了，就像是一个“大管家”。</p><p>不过要注意，外观模式并不绝对控制、屏蔽内部包装的那些对象。如果你觉得外观不好用，完全可以越过它，自己“深入基层”，去实现外观没有提供的功能。</p><p>第14讲里提到的函数async()就是外观模式的一个例子，它封装了线程的创建、调度等细节，用起来很简单，但也不排斥你直接使用thread、mutex等底层线程工具。</p><pre><code>auto f = std::async([](){...});\nf.wait();\n</code></pre><p><strong>3.代理模式</strong></p><p>它和适配器有点像，都是包装一个对象，但关键在于它们的目的、意图有差异：不是为了适配插入系统，而是要“控制”对象，不允许外部直接与内部对象通信，所以叫作“代理”。</p><p>代理模式的应用非常广泛，如果你想限制、屏蔽、隐藏、增强或者优化一个类，就可以使用代理。这样，客户代码看到的只是代理对象，不知道原始对象（被代理的对象）是什么样，只能用代理对象给出的接口，这样就实现了控制的目的。</p><p>代理在C++里的一个典型应用就是智能指针（<a href=\"https://time.geekbang.org/column/article/239580\">第8讲</a>），它接管了原始指针，限制了某些危险操作，并且添加了自动生命周期管理，虽然少了些自由，但获得了更多的安全。</p><h2>行为模式</h2><p>看完了适配器、外观和代理这三个结构型模式，再来看行为模式，<strong>它描述了对象之间动态的消息传递，也就是对象的“行为”、工作的方式</strong>。</p><p>行为模式比较多，有11个，这是因为，面向对象的设计更注重运行时的组合，比静态的组合更能增加系统的灵活性和可扩展性。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/2e/ba02d02ec2cac0adf60342fa3054312e.jpg?wh=2188*3387\" alt=\"\"></p><p>因为行为模式都是在运行时才建立联系，所以通常都很复杂，不太好理解对象之间的关系和通信机制。</p><p>我觉得比较难用，或者说是要尽量避免使用的模式有解释器和中介者，它们的结构比较难懂，会增加系统的复杂度。而比较容易理解、容易使用的有<strong>职责链、命令和策略</strong>，所以我重点说说它们。</p><p>职责链和命令这两个模式经常联合起来使用。职责链把多个对象串成一个“链条”，让链条里的每个对象都有机会去处理请求。而请求通常使用的是命令模式，把相关的数据打包成一个对象，解耦请求的发送方和接收方。</p><p>其实，你仔细想一下就会发现，C++的异常处理机制（<a href=\"https://time.geekbang.org/column/article/240292\">第9讲</a>）就是“职责链+命令”的一个实际应用。</p><p>在异常处理的过程中，异常类exception就是一个命令对象，throw抛出异常就是发起了一个请求处理流程。而一系列的try-catch块就构成了处理异常的职责链，异常会自下而上地走过函数调用栈——也就是职责链，直到在链条中找到一个能够处理的catch块。</p><p>策略模式的要点是“策略”这两个字，它封装了不同的算法，可以在运行的时候灵活地互相替换，从而在外部“非侵入”地改变系统的行为内核。</p><p>策略模式有点像装饰模式和状态模式，你可不要弄混了。跟它们相比，策略模式的的特点是不会改变类的外部表现和内部状态，只是动态替换一个很小的算法功能模块。</p><p>前面讲过的容器和算法用到的比较函数、散列函数，还有for_each算法里的lambda表达式，它们都可以算是策略模式的具体应用。</p><p>另外，策略模式也非常适合应用在有if-else/switch-case这样“分支决策”的代码里，你可以把每个分支逻辑都封装成类或者lambda表达式，再把它们存进容器，让容器来帮你查找最合适的处理策略。</p><h2>小结</h2><p>好了，今天说了几个我个人认为比较重要的模式，还列出了C++里的具体例子，两者互相参照，你就能更好地理解设计模式和C++语言。接下来你可以去借鉴这些用法，尝试看看自己以前写的程序，是不是能应用工厂、适配器、代理、策略等模式去重构，让代码更加优雅、灵活。</p><p>再小结一下今天的内容：</p><ol>\n<li>创建型模式里常用的有单件和工厂，封装了对象的创建过程，隔离了对象的生产和使用；</li>\n<li>结构型模式里常用的有适配器、外观和代理，通过对象组合，得到一个新对象，目的是适配、简化或者控制，隔离了客户代码与原对象的接口；</li>\n<li>行为模式里常用的有职责链、命令和策略，只有在运行时才会建立联系，封装、隔离了程序里动态变化的那部分。</li>\n</ol><p>按照这些模式的使用的难易程度，我又画了一个表格，你可以对比着看一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/b8/d54086bbbd999eeb3cddc0456b55c8b8.jpg?wh=1896*1003\" alt=\"\"></p><p>今天虽然说了不少，但除了这些经典的设计模式，还有很多其他的设计模式，比如对象池、空对象、反应器、前摄器、包装外观，等等。</p><p>虽然它们也流传比较广，但还不那么“权威”，用得也不是很多，你不需要重点掌握，所以我就不多讲了，课下你可以再去找些资料学习。</p><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>你觉得创建型模式有什么好处？</li>\n<li>你能说一下适配器、外观和代理这三个模式的相同点和不同点吗？</li>\n</ol><p>欢迎在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/41/af/410920dee8bceaadd16e86de520e98af.jpg?wh=2000*1800\" alt=\"\"></p>","neighbors":{"left":{"article_title":"19 | 设计模式（上）：C++与设计模式有啥关系？","id":248880},"right":{"article_title":"21 | 知识串讲（上）：带你开发一个书店应用","id":252107}},"comments":[{"had_liked":false,"id":231838,"user_name":"风","can_delete":false,"product_type":"c1","uid":1444483,"ip_address":"","ucode":"E1CE0825AAF805","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","comment_is_top":false,"comment_ctime":1593784099,"is_pvip":false,"replies":[{"id":"85617","content":"理解的非常对，设计模式的一个核心思想就是引入中间层，隔离变化，尽量减少代码的变动。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593830985,"ip_address":"","comment_id":231838,"utype":1}],"discussion_count":3,"race_medal":0,"score":"87493130019","product_id":100051801,"comment_content":"有一个感想。。所有设计模式，都是为了隔离变化，所谓的设计模式的教程其实在教我们：<br>编程时，哪些地方要注意变化，如何应对变化。","like_count":21,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500450,"discussion_content":"理解的非常对，设计模式的一个核心思想就是引入中间层，隔离变化，尽量减少代码的变动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593830985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073947,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/1b/83ac7733.jpg","nickname":"忧天小鸡","note":"","ucode":"A1412BDC108FD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539441,"discussion_content":"设计模式个人理解，最主要的功能，是让我们在复杂的技术与业务流程里找到优解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639717612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630504,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e1/28/0a26566d.jpg","nickname":"奕涛_steve","note":"","ucode":"07B39F3C746C3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407867,"discussion_content":"这里补充一点，除了如何应对变化，设计模式也教我们哪些适合内聚，以及如何内聚。比如外观模式就是提高内聚性的一种模式。\n综上，设计模式教我们的是哪些地方容易耦合？如何降低耦合？哪些地方适合内聚，如何提高内聚。本质上是关于编写高内聚低耦合代码的经验沉淀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635140165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228410,"user_name":"lckfa李钊","can_delete":false,"product_type":"c1","uid":1356899,"ip_address":"","ucode":"AD13D205104AA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b4/63/84960032.jpg","comment_is_top":false,"comment_ctime":1592661000,"is_pvip":false,"replies":[{"id":"84229","content":"说的很好，单件易学，用起来简单，所以就很容易被滥用，这个是需要特别注意的。<br><br>但从学习设计模式的角度来看，它是一个很好的范例。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592695035,"ip_address":"","comment_id":228410,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44542333960","product_id":100051801,"comment_content":"又提起了单例模式，我个人是很反对单例模式的，其缺点大于优点：破坏了程序的封装，可以随便传来传去的多可怕，有全局变量的全部缺点（如果你需要使用全局变量，这说明你的设计有很大的问题），违背了单一职责原则，难以单元测试，依赖不清等；实在要使用单例模式的话，一定要注意原则：如果你使用单例是因为某个类的实例不能超过一个，那么这通常是可以的。如果使用它是因为singleton是一个全局可访问的对象，它可以让您避免考虑与其他对象如何相互通信，以及每个对象负责什么，那就是你用错了！<br><br>适配器类 继承于某个类，然后对这个类进行接口改造，使之能适配另一个类的对其调用；<br><br>装饰模式在不改变对象接口的前提下强化对象的功能；<br><br>与适配器模式提供不同的接口以适配调用不同，代理模式则是提供相同的接口，代替宿主完成某些功能，","like_count":11,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499024,"discussion_content":"说的很好，单件易学，用起来简单，所以就很容易被滥用，这个是需要特别注意的。\n\n但从学习设计模式的角度来看，它是一个很好的范例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592695035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228261,"user_name":"泰伦卢","can_delete":false,"product_type":"c1","uid":1141994,"ip_address":"","ucode":"FEA6B43C8D4FF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/ea/e03fec22.jpg","comment_is_top":false,"comment_ctime":1592625361,"is_pvip":true,"replies":[{"id":"84186","content":"感谢提醒，稍后会联系编辑做个补充。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592646814,"ip_address":"","comment_id":228261,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27362429137","product_id":100051801,"comment_content":"感谢老师，这篇文章读下来收获还是蛮多的，但文中提到静态变量初始化是线程安全得，前提貌似应该加个c++11后，避免争议","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498975,"discussion_content":"感谢提醒，稍后会联系编辑做个补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592646814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228509,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1592720345,"is_pvip":false,"replies":[{"id":"84266","content":"对，总结的很好。<br><br>很多设计模式的结构都很相似，因为用的都是对象组合技术，但区别就在于它们的使用方式、目的、用途。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592740569,"ip_address":"","comment_id":228509,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18772589529","product_id":100051801,"comment_content":"1、可以根据需要，通过不同的参数定制化，产生不同的对象；同时还可以对参数类型范围进行检查。<br>2、相同之处在于都是对于原始类或对象的二次封装； <br>不同在于：<br>适配器是为了解决接口不兼容的问题，提供新接口来间接改造原始接口；<br>装饰器：与原始类继承同样的父类，为原始类提供了额外增强的功能接口，且可以嵌套多个装饰器；<br>代理：个人感觉和装饰器非常像，但代理的作用更偏向于类或对象本身功能之外的能力，例如统计调用次数&#47;运行时间，有点管理原始类的意思。<br>","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499058,"discussion_content":"对，总结的很好。\n\n很多设计模式的结构都很相似，因为用的都是对象组合技术，但区别就在于它们的使用方式、目的、用途。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592740569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355208,"user_name":"梁利锋","can_delete":false,"product_type":"c1","uid":1687980,"ip_address":"北京","ucode":"417DD2BBAAD813","user_header":"https://static001.geekbang.org/account/avatar/00/19/c1/ac/1845668a.jpg","comment_is_top":false,"comment_ctime":1661171830,"is_pvip":false,"replies":[{"id":"129250","content":"极客时间上已经有讲设计模式的课程了，再出恐怕难免雷同，以后再考虑吧。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1661227709,"ip_address":"北京","comment_id":355208,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1661171830","product_id":100051801,"comment_content":"墙裂呼吁作者出一版设计模式的课程","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584926,"discussion_content":"极客时间上已经有讲设计模式的课程了，再出恐怕难免雷同，以后再考虑吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661227709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350266,"user_name":"KevinJ","can_delete":false,"product_type":"c1","uid":2941881,"ip_address":"","ucode":"74A9D474A94C9E","user_header":"https://static001.geekbang.org/account/avatar/00/2c/e3/b9/9a934f5c.jpg","comment_is_top":false,"comment_ctime":1656737402,"is_pvip":true,"replies":[{"id":"127458","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1656919457,"ip_address":"","comment_id":350266,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1656737402","product_id":100051801,"comment_content":"Meyer&#39;s singleton代码段是不是没写全，应该是这样吧:<br><br>template&lt;typename T&gt;<br>static <br>auto&amp; getInstance() {<br>    static T obj;<br>    return obj;<br>}","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578617,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656919457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304990,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1165201,"ip_address":"","ucode":"0D49223E6CB7B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","comment_is_top":false,"comment_ctime":1627736200,"is_pvip":false,"replies":[{"id":"110359","content":"不太准确。<br><br>适配器是结构型模式，对原有对象进行组合整理，得到新的对象，是对对象的一种包装。<br><br>工厂模式是创建型模式，是“凭空”创建出新对象，解决的是如何按需求生成对象。<br><br>设计模式并不与C++里的容器、指针直接关联，在学设计模式的时候不要被语言细节给困住了，尽量跳出来，在高一个层级来思考。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1627825095,"ip_address":"","comment_id":304990,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1627736200","product_id":100051801,"comment_content":"可以这样理解适配器和工厂模式的区别吗? 适配器中讲的例子,转换前后的本质没有变化,都是装数据的&quot;容器&quot;,只是表示形式发生了改变.   而工厂模式,则原料和最终的产品本质上是两种东西,比如原料是值和类型,而产品是指向该类型变量的指针.","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524240,"discussion_content":"不太准确。\n\n适配器是结构型模式，对原有对象进行组合整理，得到新的对象，是对对象的一种包装。\n\n工厂模式是创建型模式，是“凭空”创建出新对象，解决的是如何按需求生成对象。\n\n设计模式并不与C++里的容器、指针直接关联，在学设计模式的时候不要被语言细节给困住了，尽量跳出来，在高一个层级来思考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627825095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165201,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","nickname":"Stephen","note":"","ucode":"0D49223E6CB7B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386992,"discussion_content":"好的，谢谢老师。我是用文中的例子解读下，并没有和指针，容器关联的意思，/笑😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627920405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240483,"user_name":"杜跃信","can_delete":false,"product_type":"c1","uid":2065731,"ip_address":"","ucode":"C1A3CB9DAC1B6E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIBrZt8rUzS28nMSpEQNcu2hungMgiceiaEUyia3QBAmPBhLvGNnhIyTPoYiakP6Eiaqk0rGUNjUzRQjBA/132","comment_is_top":false,"comment_ctime":1596943717,"is_pvip":false,"replies":[{"id":"88816","content":"在C++11里已经明确定义了，static变量的初始化是线程安全的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1597021054,"ip_address":"","comment_id":240483,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596943717","product_id":100051801,"comment_content":"文中提到函数内静态变量的线程安全性问题<br>似乎还要看编译器的支持程度吧，记得以前看到vs2015的资料上明确表示，这种方式不是线程安全的，像vs这种对c++支持很高的编译器都不支持，不知道其它编译器实现如何，如果用的时候还要去查编译器的资料，我觉得还不如避免使用来得安全","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503460,"discussion_content":"在C++11里已经明确定义了，static变量的初始化是线程安全的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597021054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233286,"user_name":"henry","can_delete":false,"product_type":"c1","uid":1019455,"ip_address":"","ucode":"D2744C559ADFD0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/3f/1f529b26.jpg","comment_is_top":false,"comment_ctime":1594279566,"is_pvip":true,"replies":[{"id":"86072","content":"是的，设计模式的目的和意义就在于把经验总结下来，避免“重复发现”，节约我们的时间和精力。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1594282195,"ip_address":"","comment_id":233286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594279566","product_id":100051801,"comment_content":"       其实在开发过程中，很多时候已经用了上面的一些模式，只是当时没想到是这个名字。一些常用的模式平时我们在开发过程中也会自己摸索总结出来。<br>       比如我的一个项目是需要提供一套通用的接口给上层调用者，而接口内部需要不断地对接业务功能相似、实现方式各不相同的第三方的服务，在代码迭代过程中自然就会重构成适配器模式和代理模式，这样上层调用者不用关心第三方服务的不同，也不能越过去直接外部通讯，整个系统就会比较健壮。<br>       代理模式：经常写的包装类，应该就属于这个模式的实践。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500973,"discussion_content":"是的，设计模式的目的和意义就在于把经验总结下来，避免“重复发现”，节约我们的时间和精力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594282195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228449,"user_name":"paradoxxx","can_delete":false,"product_type":"c1","uid":1233527,"ip_address":"","ucode":"FD94E547273B18","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/77/bae2045d.jpg","comment_is_top":false,"comment_ctime":1592697925,"is_pvip":false,"replies":[{"id":"84234","content":"这个应该是类型强转了，太hack了，不建议这么用，没什么意义。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592710324,"ip_address":"","comment_id":228449,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1592697925","product_id":100051801,"comment_content":"老师，问一个非继承情况虚函数的问题，如下代码，<br>#include &lt;iostream&gt;<br>class A {<br>public:<br>\tvoid f1() { printf(&quot;A::f1\\n&quot;); }<br>\tvirtual void f2() { printf(&quot;B::f2\\n&quot;); }<br>};<br>class B {<br>public:<br>\tvirtual void f1() { printf(&quot;B::f1\\n&quot;); }<br>\tvirtual void f2() { printf(&quot;B::f2\\n&quot;); }<br>};<br>int main() {<br>    B obeject;<br>    A* p = (A*)&amp;obeject;<br>    p-&gt;f1();<br>    p-&gt;f2();<br>    return 0;<br>}<br>编译执行结果( ubuntu20.04, g++ 9.3.0 )：<br>A::f1<br>B::f1<br>老师能解释一下为什么是这样吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499042,"discussion_content":"这个应该是类型强转了，太hack了，不建议这么用，没什么意义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592710324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285653,"discussion_content":"这是典型的C语言用法，强制类型转换，无视类型体系，让指针认为就是A，然后后面又会有内存布局、虚表等东西了，太乱。我觉得即使你弄清楚了，实际也不会写出这样的代码，可能只有考试才有意义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592904505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1628867,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","nickname":"有学识的兔子","note":"","ucode":"D1D654B1562FC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285034,"discussion_content":"这完全是两个不同的类，更不存在两个类的成员函数有什么联系。但为啥能通过对象B直接调用类A的接口？？不能理解，按理说，强转之后的指针也不能指向A类的成员函数的啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592718515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1055296,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/40/f10493ef.jpg","nickname":"中山浪子","note":"","ucode":"25D0F8462473D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1628867,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","nickname":"有学识的兔子","note":"","ucode":"D1D654B1562FC9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296480,"discussion_content":"你介意数数内存里的地址么，把函数地址和偏移打出来，自己去计算下偏移。从代码逻辑上来说这两个不同类型的指针强转本身没什么意义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596552336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":285034,"ip_address":""},"score":296480,"extra":""}]}]}]}