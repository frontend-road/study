{"id":93246,"title":"04 | 穿越功耗墙，我们该从哪些方面提升“性能”？","content":"<p>上一讲，在讲CPU的性能时，我们提到了这样一个公式：</p><center>程序的CPU执行时间 = 指令数×CPI×Clock Cycle Time</center><p>这么来看，如果要提升计算机的性能，我们可以从指令数、CPI以及CPU主频这三个地方入手。要搞定指令数或者CPI，乍一看都不太容易。于是，研发CPU的硬件工程师们，从80年代开始，就挑上了CPU这个“软柿子”。在CPU上多放一点晶体管，不断提升CPU的时钟频率，这样就能让CPU变得更快，程序的执行时间就会缩短。</p><p>于是，从1978年Intel发布的8086 CPU开始，计算机的主频从5MHz开始，不断提升。1980年代中期的80386能够跑到40MHz，1989年的486能够跑到100MHz，直到2000年的奔腾4处理器，主频已经到达了1.4GHz。而消费者也在这20年里养成了“看主频”买电脑的习惯。当时已经基本垄断了桌面CPU市场的Intel更是夸下了海口，表示奔腾4所使用的CPU结构可以做到10GHz，颇有一点“大力出奇迹”的意思。</p><h2>功耗：CPU的“人体极限”</h2><p>然而，计算机科学界从来不相信“大力出奇迹”。奔腾4的CPU主频从来没有达到过10GHz，最终它的主频上限定格在3.8GHz。这还不是最糟的，更糟糕的事情是，大家发现，奔腾4的主频虽然高，但是它的实际性能却配不上同样的主频。想要用在笔记本上的奔腾4 2.4GHz处理器，其性能只和基于奔腾3架构的奔腾M 1.6GHz处理器差不多。</p><!-- [[[read_end]]] --><p>于是，这一次的“大力出悲剧”，不仅让Intel的对手AMD获得了喘息之机，更是代表着“主频时代”的终结。后面几代Intel CPU主频不但没有上升，反而下降了。到如今，2019年的最高配置Intel i9 CPU，主频也只不过是5GHz而已。相较于1978年到2000年，这20年里300倍的主频提升，从2000年到现在的这19年，CPU的主频大概提高了3倍。</p><p><img src=\"https://static001.geekbang.org/resource/image/18/80/1826102a89e4cdd31f7573db53dd9280.png?wh=756*468\" alt=\"\" title=\"CPU的主频变化，在奔腾4时代进入了瓶颈期\"></p><p>奔腾4的主频为什么没能超过3.8GHz的障碍呢？答案就是功耗问题。什么是功耗问题呢？我们先看一个直观的例子。</p><p>一个3.8GHz的奔腾4处理器，满载功率是130瓦。这个130瓦是什么概念呢？机场允许带上飞机的充电宝的容量上限是100瓦时。如果我们把这个CPU安在手机里面，不考虑屏幕内存之类的耗电，这个CPU满载运行45分钟，充电宝里面就没电了。而iPhone X使用ARM架构的CPU，功率则只有4.5瓦左右。</p><p>我们的CPU，一般都被叫作<strong>超大规模集成电路</strong>（Very-Large-Scale Integration，VLSI）。这些电路，实际上都是一个个晶体管组合而成的。CPU在计算，其实就是让晶体管里面的“开关”不断地去“打开”和“关闭”，来组合完成各种运算和功能。</p><p>想要计算得快，一方面，我们要在CPU里，同样的面积里面，多放一些晶体管，也就是<strong>增加密度</strong>；另一方面，我们要让晶体管“打开”和“关闭”得更快一点，也就是<strong>提升主频</strong>。而这两者，都会增加功耗，带来耗电和散热的问题。</p><p>这么说可能还是有点抽象，我还是给你举一个例子。你可以把一个计算机CPU想象成一个巨大的工厂，里面有很多工人，相当于CPU上面的晶体管，互相之间协同工作。</p><p>为了工作得快一点，我们要在工厂里多塞一点人。你可能会问，为什么不把工厂造得大一点呢？这是因为，人和人之间如果离得远了，互相之间走过去需要花的时间就会变长，这也会导致性能下降。这就好像如果CPU的面积大，晶体管之间的距离变大，电信号传输的时间就会变长，运算速度自然就慢了。</p><p>除了多塞一点人，我们还希望每个人的动作都快一点，这样同样的时间里就可以多干一点活儿了。这就相当于提升CPU主频，但是动作快，每个人就要出汗散热。要是太热了，对工厂里面的人来说会中暑生病，对CPU来说就会崩溃出错。</p><p>我们会在CPU上面抹硅脂、装风扇，乃至用上水冷或者其他更好的散热设备，就好像在工厂里面装风扇、空调，发冷饮一样。但是同样的空间下，装上风扇空调能够带来的散热效果也是有极限的。</p><p>因此，在CPU里面，能够放下的晶体管数量和晶体管的“开关”频率也都是有限的。一个CPU的功率，可以用这样一个公式来表示：</p><center>功耗 ~= 1/2 ×负载电容×电压的平方×开关频率×晶体管数量</center><p>那么，为了要提升性能，我们需要不断地增加晶体管数量。同样的面积下，我们想要多放一点晶体管，就要把晶体管造得小一点。这个就是平时我们所说的提升“制程”。从28nm到7nm，相当于晶体管本身变成了原来的1/4大小。这个就相当于我们在工厂里，同样的活儿，我们要找瘦小一点的工人，这样一个工厂里面就可以多一些人。我们还要提升主频，让开关的频率变快，也就是要找手脚更快的工人。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/ed/f59f2f33e308000cb5d2ad017f2ff8ed.jpeg?wh=2504*1124\" alt=\"\"></p><p>但是，功耗增加太多，就会导致CPU散热跟不上，这时，我们就需要降低电压。这里有一点非常关键，在整个功耗的公式里面，功耗和电压的平方是成正比的。这意味着电压下降到原来的1/5，整个的功耗会变成原来的1/25。</p><p>事实上，从5MHz主频的8086到5GHz主频的Intel i9，CPU的电压已经从5V左右下降到了1V左右。这也是为什么我们CPU的主频提升了1000倍，但是功耗只增长了40倍。比如说，我写这篇文章用的是Surface Go，在这样的轻薄笔记本上，微软就是选择了把电压下降到0.25V的低电压CPU，使得笔记本能有更长的续航时间。</p><h2>并行优化，理解阿姆达尔定律</h2><p>虽然制程的优化和电压的下降，在过去的20年里，让我们的CPU性能有所提升。但是从上世纪九十年代到本世纪初，软件工程师们所用的“面向摩尔定律编程”的套路越来越用不下去了。“写程序不考虑性能，等明年CPU性能提升一倍，到时候性能自然就不成问题了”，这种想法已经不可行了。</p><p>于是，从奔腾4开始，Intel意识到通过提升主频比较“难”去实现性能提升，边开始推出Core Duo这样的多核CPU，通过提升“吞吐率”而不是“响应时间”，来达到目的。</p><p>提升响应时间，就好比提升你用的交通工具的速度，比如原本你是开汽车，现在变成了火车乃至飞机。本来开车从上海到北京要20个小时，换成飞机就只要2个小时了，但是，在此之上，再想要提升速度就不太容易了。我们的CPU在奔腾4的年代，就好比已经到了飞机这个速度极限。</p><p>那你可能要问了，接下来该怎么办呢？相比于给飞机提速，工程师们又想到了新的办法，可以一次同时开2架、4架乃至8架飞机，这就好像我们现在用的2核、4核，乃至8核的CPU。</p><p>虽然从上海到北京的时间没有变，但是一次飞8架飞机能够运的东西自然就变多了，也就是所谓的“吞吐率”变大了。所以，不管你有没有需要，现在CPU的性能就是提升了2倍乃至8倍、16倍。这也是一个最常见的提升性能的方式，<strong>通过并行提高性能</strong>。</p><p>这个思想在很多地方都可以使用。举个例子，我们做机器学习程序的时候，需要计算向量的点积，比如向量$W = [W_0, W_1, W_2, …, W_{15}]$和向量 $X = [X_0, X_1, X_2, …, X_{15}]$，$W·X = W_0 * X_0 + W_1 * X_1 +$ $W_2 * X_2 + … + W_{15}  *  X_{15}$。这些式子由16个乘法和1个连加组成。如果你自己一个人用笔来算的话，需要一步一步算16次乘法和15次加法。如果这个时候我们把这个任务分配给4个人，同时去算$W_0～W_3$, $W_4～W_7$, $W_8～W_{11}$, $W_{12}～W_{15}$这样四个部分的结果，再由一个人进行汇总，需要的时间就会缩短。</p><p><img src=\"https://static001.geekbang.org/resource/image/64/9d/64d6957ecaa696edcf79dc1d5511269d.jpeg?wh=4558*3271\" alt=\"\"></p><p>但是，并不是所有问题，都可以通过并行提高性能来解决。如果想要使用这种思想，需要满足这样几个条件。</p><p>第一，需要进行的计算，本身可以分解成几个可以并行的任务。好比上面的乘法和加法计算，几个人可以同时进行，不会影响最后的结果。</p><p>第二，需要能够分解好问题，并确保几个人的结果能够汇总到一起。</p><p>第三，在“汇总”这个阶段，是没有办法并行进行的，还是得顺序执行，一步一步来。</p><p>这就引出了我们在进行性能优化中，常常用到的一个经验定律，<strong>阿姆达尔定律</strong>（Amdahl’s Law）。这个定律说的就是，对于一个程序进行优化之后，处理器并行运算之后效率提升的情况。具体可以用这样一个公式来表示：</p><center>优化后的执行时间 = 受优化影响的执行时间/加速倍数+不受影响的执行时间</center><p>在刚刚的向量点积例子里，4个人同时计算向量的一小段点积，就是通过并行提高了这部分的计算性能。但是，这4个人的计算结果，最终还是要在一个人那里进行汇总相加。这部分汇总相加的时间，是不能通过并行来优化的，也就是上面的公式里面<strong>不受影响的执行时间</strong>这一部分。</p><p>比如上面的各个向量的一小段的点积，需要100ns，加法需要20ns，总共需要120ns。这里通过并行4个CPU有了4倍的加速度。那么最终优化后，就有了100/4+20=45ns。即使我们增加更多的并行度来提供加速倍数，比如有100个CPU，整个时间也需要100/100+20=21ns。</p><p><img src=\"https://static001.geekbang.org/resource/image/f1/e5/f1d05ec439e6377803df741bc07b09e5.jpeg?wh=3140*2039\" alt=\"\"></p><h2>总结延伸</h2><p>我们可以看到，无论是简单地通过提升主频，还是增加更多的CPU核心数量，通过并行来提升性能，都会遇到相应的瓶颈。仅仅简单地通过“堆硬件”的方式，在今天已经不能很好地满足我们对于程序性能的期望了。于是，工程师们需要从其他方面开始下功夫了。</p><p>在“摩尔定律”和“并行计算”之外，在整个计算机组成层面，还有这样几个原则性的性能提升方法。</p><p>1.<strong>加速大概率事件</strong>。最典型的就是，过去几年流行的深度学习，整个计算过程中，99%都是向量和矩阵计算，于是，工程师们通过用GPU替代CPU，大幅度提升了深度学习的模型训练过程。本来一个CPU需要跑几小时甚至几天的程序，GPU只需要几分钟就好了。Google更是不满足于GPU的性能，进一步地推出了TPU。后面的文章，我也会为你讲解GPU和TPU的基本构造和原理。</p><p>2.<strong>通过流水线提高性能</strong>。现代的工厂里的生产线叫“流水线”。我们可以把装配iPhone这样的任务拆分成一个个细分的任务，让每个人都只需要处理一道工序，最大化整个工厂的生产效率。类似的，我们的CPU其实就是一个“运算工厂”。我们把CPU指令执行的过程进行拆分，细化运行，也是现代CPU在主频没有办法提升那么多的情况下，性能仍然可以得到提升的重要原因之一。我们在后面也会讲到，现代CPU里是如何通过流水线来提升性能的，以及反面的，过长的流水线会带来什么新的功耗和效率上的负面影响。</p><p>3.<strong>通过预测提高性能</strong>。通过预先猜测下一步该干什么，而不是等上一步运行的结果，提前进行运算，也是让程序跑得更快一点的办法。典型的例子就是在一个循环访问数组的时候，凭经验，你也会猜到下一步我们会访问数组的下一项。后面要讲的“分支和冒险”、“局部性原理”这些CPU和存储系统设计方法，其实都是在利用我们对于未来的“预测”，提前进行相应的操作，来提升我们的程序性能。</p><p>好了，到这里，我们讲完了计算机组成原理这门课的“前情提要”。一方面，整个组成乃至体系结构，都是基于冯·诺依曼架构组成的软硬件一体的解决方案。另一方面，你需要明白的就是，这里面的方方面面的设计和考虑，除了体系结构层面的抽象和通用性之外，核心需要考虑的是“性能”问题。</p><p>接下来，我们就要开始深入组成原理，从一个程序的运行讲起，开始我们的“机器指令”之旅。</p><h2>补充阅读</h2><p>如果你学有余力，关于本节内容，推荐你阅读下面两本书的对应章节，深入研读。</p><p>1.《计算机组成与设计：软/硬件接口》（第5版）的1.7和1.10节，也简单介绍了功耗墙和阿姆达尔定律，你可以拿来细细阅读。</p><p>2.如果你想对阿姆达尔定律有个更细致的了解，《深入理解计算机系统》（第3版）的1.9节不容错过。</p><h2>课后思考</h2><p>我在这一讲里面，介绍了三种常见的性能提升思路，分别是，加速大概率事件、通过流水线提高性能和通过预测提高性能。请你想一下，除了在硬件和指令集的设计层面之外，你在软件开发层面，有用到过类似的思路来解决性能问题吗？</p><p>欢迎你在留言区写下你曾遇到的问题，和大家一起分享、探讨。你也可以把今天的文章分享给你朋友，和他一起学习和进步。</p>","neighbors":{"left":{"article_title":"03 | 通过你的CPU主频，我们来谈谈“性能”究竟是什么？","id":92215},"right":{"article_title":"05 | 计算机指令：让我们试试用纸带编程","id":93359}},"comments":[{"had_liked":false,"id":92384,"user_name":"大熊","can_delete":false,"product_type":"c1","uid":1008951,"ip_address":"","ucode":"D7858E9DA87B5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/37/56c492d3.jpg","comment_is_top":false,"comment_ctime":1557242827,"is_pvip":false,"replies":[{"id":"33378","content":"👍你学得非常认真努力，给大家做了一个好榜样。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557471756,"ip_address":"","comment_id":92384,"utype":1}],"discussion_count":9,"race_medal":0,"score":"693046977483","product_id":100026001,"comment_content":"重新学习后，我又来了……<br>1. 加大概率事件：<br>   缓存机制，提高平均概率下的性能；<br>   运行时编译热点代码的机制；<br>   Spring框架使用的单例模式（个人还不确定）；<br><br>2. 通过流水线提高性能：<br>   工作中可以尝试把一个大规模的SQL分成几个规模适当的小SQL进行执行；<br>   并发编程；<br><br>3. 通过预测提高性能：<br>   以前有的软件安装的时候，有一秒就安装好的感觉，之前我就在想，是不是我选择完安装路径之后，就已经开始有预安装的操作了；<br>   使用chrome在打开几个tab页的情况下，直接关闭浏览器，再次打开浏览器之前强制关闭的tab页直接默认打开的操作（不知道是否属于预测，预测我还是需要这几个页面）；<br>   在自己练习的博客中，多张图片在上传的时候，先让图片及时上传并处于“预删除”状态，待点击提交之后，才让现有的图片变成保存的状态。<br>   热点数据、常用的固定数据，可以先保存在redis等缓存中，等到需要的时候先从缓存中获得，如果获取失败再去查询数据库","like_count":162,"discussions":[{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288543,"discussion_content":"加速概率，缓存没毛病，JNI，java中是用二八定律，百分二十的代码执行时间为百分之八十，那就一次编译，后续重复运行，无需在编译，java是解释执行，如果解释一条执行一条，对于循环类的代码，太费时，属于大概率，但是你说的单例并不是，单例只是保证全局唯一的，本意并不是复用，java中享元设计模式，可以当做大概率事件的例子，这种设计模式就是为了服用重复代码，jdk源码多次用了这种模式，比如基本数据类型的包装类，从代码的角度考虑，优化性能；\n通过流水线，并发可以算一个，但是并发有点牵强，其实这个主要考虑拆分和流水作业，一条高级语言可以往往并不代表一条cpu指令，可能是多条，比如java中的new操作，一行new代码，是分成三行cpu指令执行，这三个指令还被重排序了，就是为了性能，排序后更加快，相当于流水作业，谁先谁后更快些，这个重排序的可以结合，双重检验单例模式为什么不是线程安全的来考虑；\n第三，预测，浏览器的前进后退，可以说是用到了栈的数据结构，利用俩个栈实现前进后退，其实也是相当于缓存，存起来，下次无需访问，本质并不能算预测，预测的例子，最典型的就是局部性原理，要说局部性原理，必然想到mysql，查询一行数据，会把这行数据所在的这一页数据都加到内存，访问这条数据，那么和它相邻的都有可能被访问，所以为了性能，都加进去，这里的一页数据，要从b+索引说起，这一页都是索引顺序排列的叶子结点。","likes_number":25,"is_delete":false,"is_hidden":false,"ctime":1593782169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2438861,"avatar":"https://static001.geekbang.org/account/avatar/00/25/36/cd/dc788daf.jpg","nickname":"Geek_fa6d1a","note":"","ucode":"3780CDF5A9ABBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357265,"discussion_content":"软件安装和浏览器都不是预测，软件安装是你的错觉，如果选了目录就预安装了，我大型软件多选几次安装目录，SSD就废了？只是现在CPU内存和固态的性能上去了，特别是SSD，导致你安装上G的文件，只要不是太碎片化，都是几秒的事。浏览器是纯缓存，关闭浏览器后，你可以断开网络再开打浏览器，发现之前的网页竟然还能打开，所以并不是预测。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1615774439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2332833,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqd2wW2kpM9FeDosntthZ6kAFAZnKyMulrqWlXticD6IkULJmzjKVKmt5ypV5eNR6ZjBicnPeuW29OA/132","nickname":"古月一","note":"","ucode":"207073EE4935AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327943,"discussion_content":"加大概率事件应该可以对应上Java中的JIT — 即时编译技术，通过JIT可以不用向以往那样一步步的将Java的代码转换到C++(JNI)再转换到字节码(平台无关的重要原因)，最后再变为机器码，而单例本质是通过DI来实现IOC，应该和加大概率事件其实不是一个东西；\n\n流水线思想就拆分而言，结合Java内置的CountDownLatch或CycleBarrier来实现一个大文件的拆分保存可以更好理解，不过这同时也涉及到了并发编程本身对资源共享和互斥的管理。上面西门吹牛老哥说的很好，一行i++的自增代码也是涉及三条cpu指令执行的：取出、赋值、放回。重排序就算是为了性能也必须满足happens-before原则。\n\n\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606022524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449235,"discussion_content":"👍你学得非常认真努力，给大家做了一个好榜样。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1557471756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539115,"discussion_content":"不懂别乱写行吗\n复杂SQL的拆分和流水线有啥关系？？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639615231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3180226,"avatar":"https://static001.geekbang.org/account/avatar/00/30/86/c2/4cd599aa.jpg","nickname":"一秋缘","note":"","ucode":"CA73028AFAAEF5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588310,"discussion_content":"人家努力思考的结果你就一句话《不懂别乱写》","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663660689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539115,"ip_address":"黑龙江"},"score":588310,"extra":""}]},{"author":{"id":1353870,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a8/8e/c93f14fc.jpg","nickname":"嗳，随风而逝","note":"","ucode":"21DF100A1619D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385343,"discussion_content":"请不要把应用上的缓存功能混淆了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627009005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2518863,"avatar":"https://static001.geekbang.org/account/avatar/00/26/6f/4f/3cf1e9c4.jpg","nickname":"钱鹏 Allen","note":"","ucode":"7E95E82C0717DA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378984,"discussion_content":"Chrome的书签保存每日的学习任务，需要的时候及时打开学习。  准备学习下一项任务的时候，先提前将需要的内面预先加载。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623574989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336190,"discussion_content":"说下我的理解\n\n其他原则性的提升性能的方式\n\n1. 加速大概率事件。深度学习训练模型计算99% 都是向量和矩阵计算，CPU——》 GPU——》 TPU，例如CPU跑分“作弊”，优化系统主要瓶颈，热点缓存，JAava Hotspot虚拟机 JIT 编译热点代码\n\n2. 通过流水线提高性能。过长的流水线会导致新的功耗增加和效率降低。例如多进程，多线程，多协程，java并行流，HTTP2.0 多Stream\n\n3. 通过预测提高性能。局部性原理，“分支和冒险”，缓存冷启动，LRU，LFU","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608523434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90855,"user_name":"须臾即","can_delete":false,"product_type":"c1","uid":1181380,"ip_address":"","ucode":"417B980F56C28E","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/c4/7a1e6f43.jpg","comment_is_top":false,"comment_ctime":1556692413,"is_pvip":false,"replies":[{"id":"32595","content":"须臾即他9同学你好<br>增加晶体管可以增加硬件能够支持的指令数量，增加数字通路的位数，以及利用好电路天然的并行性，从硬件层面更快地实现特定的指令，所以增加晶体管也是常见的提升cpu性能的一种手段。<br>电压的问题在于两个，一个是电压太低就会导致电路无法联通，因为不管用什么作为电路材料，都是有电阻的，所以没有办法无限制降低电压，另外一个是对于工艺的要求也变高了，成本也更贵啊。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556733417,"ip_address":"","comment_id":90855,"utype":1}],"discussion_count":6,"race_medal":0,"score":"456823225789","product_id":100026001,"comment_content":"有两个问题没想明白：<br>1.增加晶体管怎么提高运算速度？<br>提高主频好理解，计算的频繁一些，增加晶体管是干了什么，增加计算单元么，或者说是增加流水线控制单元。<br>2.cpu的电压是受了什么因素限制的？<br>既然电压低功耗低，那么各厂商应该都想把电压做的越低越好，现实是不容易办到，是哪些因素限制的？","like_count":107,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448694,"discussion_content":"须臾即他9同学你好\n增加晶体管可以增加硬件能够支持的指令数量，增加数字通路的位数，以及利用好电路天然的并行性，从硬件层面更快地实现特定的指令，所以增加晶体管也是常见的提升cpu性能的一种手段。\n电压的问题在于两个，一个是电压太低就会导致电路无法联通，因为不管用什么作为电路材料，都是有电阻的，所以没有办法无限制降低电压，另外一个是对于工艺的要求也变高了，成本也更贵啊。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1556733417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2432987,"avatar":"https://static001.geekbang.org/account/avatar/00/25/1f/db/b62b0c36.jpg","nickname":"CoderYe","note":"","ucode":"61BADA76344270","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":572427,"discussion_content":"您怎么什么都知道...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652778591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":448694,"ip_address":""},"score":572427,"extra":""}]},{"author":{"id":1041547,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e4/8b/8a0a6c86.jpg","nickname":"haha","note":"","ucode":"F4F3EAB4A15989","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348896,"discussion_content":"我理解本质上增加晶体管数量其实就是增大吞吐的途径之一，数量变多意味着可以做的事情多了，可以做更复杂的事情了，以前几条指令才能做的事情优化为一条了。 包括xxx位的提升也是","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612770675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234309,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/85/9da08fd3.jpg","nickname":"aaaVege💫","note":"","ucode":"84446C9CD15F43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186733,"discussion_content":"这个问题问的很到位","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582710336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2728259,"avatar":"https://static001.geekbang.org/account/avatar/00/29/a1/43/fd7dc717.jpg","nickname":"木易若","note":"","ucode":"C167478785BCB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387611,"discussion_content":"减小电压确实可以降低功耗，问题是，现在的MOS管，在小道一定成度后漏电流会增加，影响MOS管的开关性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628303149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1207457,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6c/a1/80d83f0a.jpg","nickname":"Ellison","note":"","ucode":"A2FB94D4F6A332","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378102,"discussion_content":"我理解的晶体管发出的指令应该是01 01 根据逻辑与， 如果为1那么一定是1， 也就是增加指令","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623054884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96176,"user_name":"莫问流年","can_delete":false,"product_type":"c1","uid":1249663,"ip_address":"","ucode":"23140E031AED4B","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/7f/80d56c1c.jpg","comment_is_top":false,"comment_ctime":1558349294,"is_pvip":false,"replies":[{"id":"35532","content":"几个例子举得都很好！而且和实践应用结合得也很好！","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1559130762,"ip_address":"","comment_id":96176,"utype":1}],"discussion_count":3,"race_medal":0,"score":"336565798382","product_id":100026001,"comment_content":"1.加速大概率事件<br>各种缓存(内存缓存、CDN缓存)<br>2.流水线<br>并发编程、异步编程<br>音视频播放器边播放边缓冲<br>3.预测<br>小说的下一页预加载<br>电商大促的CDN预热","like_count":79,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450753,"discussion_content":"几个例子举得都很好！而且和实践应用结合得也很好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559130762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1370238,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e8/7e/8fcc5ff2.jpg","nickname":"承影","note":"","ucode":"F6D425DB79702D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577924,"discussion_content":"应该说的是dns缓存吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656417118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1207457,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6c/a1/80d83f0a.jpg","nickname":"Ellison","note":"","ucode":"A2FB94D4F6A332","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378103,"discussion_content":"CDN缓存没这个说法， CDN是一种架构， 最后缓存的也是基于内存或磁盘了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623055089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93722,"user_name":"Seventy、","can_delete":false,"product_type":"c1","uid":1509661,"ip_address":"","ucode":"B9604C03466F16","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/1d/e4fe471c.jpg","comment_is_top":false,"comment_ctime":1557569752,"is_pvip":false,"replies":[{"id":"33648","content":"增加晶体管数量，其实是通过提供更复杂的电路支持更多的“指令”。也就会减少运行同样程序需要的指令数。<br>打个比方，比如我们最简单的电路可以只有加法功能，没有乘法功能。乘法都变成很多个加法指令，那么实现一个乘法需要的指令数就比较多。但是如果我们增加晶体管在电路层面就实现了这个，那么需要的指令数就变少了，执行时间也可以缩短。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557748329,"ip_address":"","comment_id":93722,"utype":1}],"discussion_count":4,"race_medal":0,"score":"212010967256","product_id":100026001,"comment_content":"老师您好，有个疑问，上节课我们讲过“程序运行CPU执行时间 = 指令数 * CPI * 时钟周期时间(Clock Cycle Time)”，而这节中提到增加晶体管数量会提升CPU性能，请问&quot;晶体管数量&quot;与上面的公式有什么关系呢？ 还是说晶体管数量会影响上面公式的三个部分中的哪一部分？？ 盼老师答复。","like_count":50,"discussions":[{"author":{"id":1764854,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ed/f6/4a083c7e.jpg","nickname":"Geek_embeded","note":"","ucode":"1ABFAA34E983F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136798,"discussion_content":"老师说的是减少指令数吗.。。不应该是减少了CPI吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579164544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449743,"discussion_content":"增加晶体管数量，其实是通过提供更复杂的电路支持更多的“指令”。也就会减少运行同样程序需要的指令数。\n打个比方，比如我们最简单的电路可以只有加法功能，没有乘法功能。乘法都变成很多个加法指令，那么实现一个乘法需要的指令数就比较多。但是如果我们增加晶体管在电路层面就实现了这个，那么需要的指令数就变少了，执行时间也可以缩短。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1557748329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1452167,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYRSYg6icjibzGa7efcMrCsGec2UwibjTd57icqDz0zzkEEOM2pXVju60dibzcnQKPfRkN9g/132","nickname":"Geek_93970d","note":"","ucode":"52AC308BEC7737","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579438,"discussion_content":"用硬件实现复杂功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657449120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1034451,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","nickname":"fatme","note":"","ucode":"75A805D2BB2AD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6691,"discussion_content":"增加晶体管数量，还可以布置更多级的流水线。不过流水线只是增加吞吐率，不在上面的公式反应。但老师在回答其他同学时说过，增加晶体管数量，还有助于增加数据通路的宽度，和利用电路天然的并行性，这些应该可以减少 CPI","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567053811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90880,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1556706341,"is_pvip":false,"replies":[{"id":"32590","content":"👍感谢分享给大家","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556731150,"ip_address":"","comment_id":90880,"utype":1}],"discussion_count":10,"race_medal":0,"score":"190535267365","product_id":100026001,"comment_content":"通读三遍全文，花了3个多小时做了笔记链接如下：<br>https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;10800379.html","like_count":44,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448707,"discussion_content":"👍感谢分享给大家","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556731150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318349,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1d/cd/dfc834eb.jpg","nickname":"秋天刮大疯","note":"","ucode":"A917C6EA2EFF72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3418,"discussion_content":"大哥 你把极客那边的课程全搬到博客去。。。我个人觉得是不是应该写明内容是摘自哪里，原作者谁谁谁，然后你个人原创的部分你就也单列一旁。不然我个人觉得不太合适啊，因为极客的课程是要付费，否则不如都到你博客看就好了。。或者建议您设置博客为私人可见。本着平和的心态，你觉得呢？","likes_number":28,"is_delete":false,"is_hidden":false,"ctime":1564471089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1340730,"avatar":"https://static001.geekbang.org/account/avatar/00/14/75/3a/a7596c06.jpg","nickname":"大大","note":"","ucode":"3A3DC9AC382651","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1318349,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1d/cd/dfc834eb.jpg","nickname":"秋天刮大疯","note":"","ucode":"A917C6EA2EFF72","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219524,"discussion_content":"哥们儿，也不比较真，有些东西不是拿了别人的东西，写写博客就能得到的，该是你的就是你的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585757423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3418,"ip_address":""},"score":219524,"extra":""},{"author":{"id":1619402,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b5/ca/bba4d696.jpg","nickname":"牺牲","note":"","ucode":"5780E562A43494","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":1340730,"avatar":"https://static001.geekbang.org/account/avatar/00/14/75/3a/a7596c06.jpg","nickname":"大大","note":"","ucode":"3A3DC9AC382651","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":262736,"discussion_content":"这是版权问题，标注原作者是最起码的，再者这是付费内容公开出去不合理。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1589123092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219524,"ip_address":""},"score":262736,"extra":""}]},{"author":{"id":2200851,"avatar":"https://static001.geekbang.org/account/avatar/00/21/95/13/8a68e5ee.jpg","nickname":"白夜","note":"","ucode":"1BC0500BE9C1CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333346,"discussion_content":"哥们怎么不讲伍德呢，至少说明出处吧","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607505200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2238712,"avatar":"","nickname":"Geek_36a222","note":"","ucode":"A0B9B4E1746AAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315949,"discussion_content":"hehehehe","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603338762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302740,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/d4/7fa07324.jpg","nickname":"王大帅","note":"","ucode":"D2C9ADF2F7EBD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286401,"discussion_content":"哥们儿不讲究啊，照抄一遍就得说明出处，除非用自己的语言总结梳理提炼画图等，才叫学习笔记","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593163158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238830,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","nickname":"活的潇洒","note":"","ucode":"666C30CA894754","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43826,"discussion_content":"标题是学习笔记","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572911759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112415,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/5f/b0a125a9.jpg","nickname":"chp","note":"","ucode":"F0A2442230CD45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375428,"discussion_content":"你这个憨憨，别copy了，还学习笔记，自己语言都不组织一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621648540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4c/43/150c70c2.jpg","nickname":"陈松Plus","note":"","ucode":"0074BDECFA3D1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349479,"discussion_content":"全文照搬也算笔记吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613228770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90796,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1556660470,"is_pvip":false,"replies":[{"id":"32602","content":"👍算法的例子举得很好，剪枝策略的例子也很好。<br><br>不过流水线和圆周率的例子不太好，可以再想想。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556735451,"ip_address":"","comment_id":90796,"utype":1}],"discussion_count":3,"race_medal":0,"score":"126110712054","product_id":100026001,"comment_content":"对于思考题：<br>        * 加速大概率事件<br>          通常我们使用 big-O 去表示一个算法的好坏，我们优化一个算法也是基于 big-O，但是 big-O 其实是一个近似值，就好比一个算法时间复杂度是 O(n^2) + O(n)，这里的 O(n^2) 是占大比重的，特别是当 n 很大的时候，通常我们会忽略掉 O(n)，着手优化 O(n^2) 的部分<br><br>        * 通过流水线提高性能<br>        能够想到的是任务分解，把一个大的任务分解成好多个小任务，一般来说，分的越细，小任务就会越简单，整个框架、思路也会变得更加清晰<br><br>        * 通过预测提高性能<br>        常常在计算近似值的时候，例如计算圆周率，我们可以根据条件预设立一个精确率，高过这个精确率就会停止计算，防止无穷无尽的一直计算下去；另外就是深度优先搜索算法里面的 “剪枝策略”，防止没有必要的分支搜索，这会大幅度提升算法效率","like_count":29,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448658,"discussion_content":"👍算法的例子举得很好，剪枝策略的例子也很好。\n\n不过流水线和圆周率的例子不太好，可以再想想。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556735451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1056019,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","nickname":"峰","note":"","ucode":"C53CB64E8E7D19","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37932,"discussion_content":"流水线的例子，可以是多个线程池，第一个线程池完成任务之后给第二个线程池，以此类推。例子比如说数据库了，把sql请求过程分割成了响应的线程池，词法语法逻辑执行计划生成的线程池，执行计划优化。。。。等等吧，这其实就是软件领域的流水线的设计模式啦啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571703169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649878,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2c/d6/759d63cc.jpg","nickname":"玉琢天窗","note":"","ucode":"48881C42AB13BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7496,"discussion_content":"老师，这个能做成可以快进或后退吗？每次中途打断就要从头开始，谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567518802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90861,"user_name":"明月","can_delete":false,"product_type":"c1","uid":1476588,"ip_address":"","ucode":"D3C649B954A519","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJayib1ZcRfOaoLsdsWZokiaO5tLAdC4uNAicQJRIVXrz9fIchib7QwXibnRrsJaoh5TUlia7faUf36g8Bw/132","comment_is_top":false,"comment_ctime":1556695341,"is_pvip":false,"replies":[{"id":"32589","content":"会的，光速也不过就是3*10的八次方，意味着一纳秒也只能走30厘米的距离，所以后面我们还会看到cpu的高速缓存也不能做太大，也是受到光速的限制。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556731103,"ip_address":"","comment_id":90861,"utype":1}],"discussion_count":1,"race_medal":0,"score":"91751008557","product_id":100026001,"comment_content":"一个问题：面积更小使得各个晶体管的距离更短，会加速响应时间吗？我印象中是光速的","like_count":22,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448696,"discussion_content":"会的，光速也不过就是3*10的八次方，意味着一纳秒也只能走30厘米的距离，所以后面我们还会看到cpu的高速缓存也不能做太大，也是受到光速的限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556731103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132099,"user_name":"淡","can_delete":false,"product_type":"c1","uid":1456392,"ip_address":"","ucode":"6856CA319DE2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","comment_is_top":false,"comment_ctime":1568022431,"is_pvip":false,"replies":[{"id":"51037","content":"当然算是的","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568446200,"ip_address":"","comment_id":132099,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78877433759","product_id":100026001,"comment_content":"写业务代码的if else 分支时，对于大概率出现的写在前面，减少不必要的判断？这种算“通过预测提高性能”吗","like_count":19,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466763,"discussion_content":"当然算是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568446200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126033,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1566297281,"is_pvip":false,"replies":[{"id":"52649","content":"Sunny同学，<br><br>你好，增加晶体管通常可以做到以下这些<br><br>1. 设计了一个更复杂的电路，让原先软件执行的事情，直接通过硬件电路解决了。也就是在CPU里增加了新指令，自然同样的程序就运行得更快了。<br><br>2. 同样功能的电路更多了，比如有了更多更大的寄存器，更多的可以并行的流水线，这样同样的指令可以同时运行不受限于有限的资源，也可以让程序算得更快。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569660687,"ip_address":"","comment_id":126033,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74580741313","product_id":100026001,"comment_content":"为什么增加晶体管会使计算加快？","like_count":17,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463796,"discussion_content":"Sunny同学，\n\n你好，增加晶体管通常可以做到以下这些\n\n1. 设计了一个更复杂的电路，让原先软件执行的事情，直接通过硬件电路解决了。也就是在CPU里增加了新指令，自然同样的程序就运行得更快了。\n\n2. 同样功能的电路更多了，比如有了更多更大的寄存器，更多的可以并行的流水线，这样同样的指令可以同时运行不受限于有限的资源，也可以让程序算得更快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569660687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97230,"user_name":"ginger","can_delete":false,"product_type":"c1","uid":1321670,"ip_address":"","ucode":"73892EB5DDCE66","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/c6/8646048e.jpg","comment_is_top":false,"comment_ctime":1558615805,"is_pvip":false,"replies":[{"id":"35469","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1559122503,"ip_address":"","comment_id":97230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61688157949","product_id":100026001,"comment_content":"终于理解为什么很多笔记本会出低压版本了,原来是电压的平方和功耗是正比的,也就是电压的降低对于功耗来说,降低效益最好,还记得之前选笔记本时候,我发现几乎所有的超薄本,都是低压版本的.大致是因为超薄设计导致不能使用很&quot;给力&quot;的散热系统吧,所以通过低压来降低功耗,尽管低压也会让CPU性能有所下降.","like_count":14,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451185,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559122503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91792,"user_name":"古夜","can_delete":false,"product_type":"c1","uid":1341612,"ip_address":"","ucode":"0A82D3CFCEDF07","user_header":"https://static001.geekbang.org/account/avatar/00/14/78/ac/e5e6e7f3.jpg","comment_is_top":false,"comment_ctime":1557108246,"is_pvip":false,"replies":[{"id":"32772","content":"古夜同学你好，谢谢反馈。对于计算机如何编译运行，是一个挺复杂的话题了，恐怕一讲之内讲不清楚。这一讲的主要目标，还是让大家明白指令和机器码是怎么回事儿。<br><br>关于计算机如何阅读指令运行的整理流程，会在17讲讲解CPU部分的时候做深入的剖析。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557120559,"ip_address":"","comment_id":91792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35916846614","product_id":100026001,"comment_content":"打孔编程那里说得太简略了，而且，看题目的意思似乎是要从打孔编程讲起，然后一步步来说计算机怎么理解打孔，如何编译，如何运行的吧，感觉文章里写反了，是不是五一有点仓促了","like_count":8,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449031,"discussion_content":"古夜同学你好，谢谢反馈。对于计算机如何编译运行，是一个挺复杂的话题了，恐怕一讲之内讲不清楚。这一讲的主要目标，还是让大家明白指令和机器码是怎么回事儿。\n\n关于计算机如何阅读指令运行的整理流程，会在17讲讲解CPU部分的时候做深入的剖析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557120559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91024,"user_name":"Juexe","can_delete":false,"product_type":"c1","uid":1256457,"ip_address":"","ucode":"754448DBE2BBB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/2c/09/05903ecb.jpg","comment_is_top":false,"comment_ctime":1556803356,"is_pvip":false,"replies":[{"id":"32644","content":"👍加速大概率事件，通常指在我们确定了概率的情况下做出性能优化。而预测很多时候并不要求是大概率事件，只要平均情况下比不预测要明显好就够了。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556832767,"ip_address":"","comment_id":91024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35916541724","product_id":100026001,"comment_content":"1. 加速大概率事件<br>可能如 Redis 缓存、CDN 内容分发网络、游戏开发中常用的对象池等<br><br>2. 通过流水线提高性能<br>可能如多线程开发、分布式系统、DDOS攻击等<br><br>3.通过预测提高性能<br>浏览器的一个功能：下一页自动预加载；<br>Web 开发中用到的一个 InstantClick.js 能够预加载 hover 的链接。<br><br>不过「加速大概率事件」和「通过预测提高性能」好像有些重合，分得不是很清楚？","like_count":8,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448768,"discussion_content":"👍加速大概率事件，通常指在我们确定了概率的情况下做出性能优化。而预测很多时候并不要求是大概率事件，只要平均情况下比不预测要明显好就够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556832767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107686,"user_name":"DreamItPossible","can_delete":false,"product_type":"c1","uid":1254103,"ip_address":"","ucode":"232FCE2BB22012","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/d7/fed46140.jpg","comment_is_top":false,"comment_ctime":1561596745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31626367817","product_id":100026001,"comment_content":"手机跑分能作弊吗？怎么做？<br><br>首先，要明确手机跑分的标准，即测量的是整体性能，比如响应时间，还是单项指标性能，比如文中提到的CPU时间，或者吞吐率等<br>其次，手机跑分能作弊，以手机跑分测量的是程序运行的CPU时间为例，应用本文的原理：程序的CPU时间等于指令数乘以CPI乘以CPU周期，逐个来分析；<br><br>由于手机跑分是用预设好的程序来运行，那么方法一：使用针对这些预设程序专门优化的编译器和汇编器，可以减少指令数；方法二：使用流水线、预测等技术，可以减小CPI；方法三：使用超频，可以在跑分时提高主频，减小CPU周期等<br><br>作弊后的手机跑分还有参考意义吗？<br>如果作弊的手机跑分是针对单项指标的话，而且你又关注的该单项指标，则有意义；<br>如果你关注的是整体性能，那么参考意义不大；<br>注意，要有局部视角和系统观。","like_count":8},{"had_liked":false,"id":91033,"user_name":"沃野阡陌","can_delete":false,"product_type":"c1","uid":1078723,"ip_address":"","ucode":"F506FED18BB5B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/c3/deae021f.jpg","comment_is_top":false,"comment_ctime":1556809452,"is_pvip":false,"replies":[{"id":"32643","content":"沃野阡陌同学你好，答案取决于你这里指的缓存是什么。抽象的缓存，比如我们可以用redis或者memcqched作为访问数据库的缓存。具象的有时候一般我们指cpu里内置的高速缓存，也就是l1到l3 cache。前者一般都是应用程序来操作，后者不需要程序来操作。<br>后者内置在cpu里，比内存还要快上10到100倍。在讲解存储器的部分我们会重点讲解高速缓存以及怎么利用高速缓存的性能来写程序。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556832643,"ip_address":"","comment_id":91033,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31621580524","product_id":100026001,"comment_content":"老师，什么是缓存？需要用程序去操作吗？和内存又有什么关系？","like_count":7,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448770,"discussion_content":"沃野阡陌同学你好，答案取决于你这里指的缓存是什么。抽象的缓存，比如我们可以用redis或者memcqched作为访问数据库的缓存。具象的有时候一般我们指cpu里内置的高速缓存，也就是l1到l3 cache。前者一般都是应用程序来操作，后者不需要程序来操作。\n后者内置在cpu里，比内存还要快上10到100倍。在讲解存储器的部分我们会重点讲解高速缓存以及怎么利用高速缓存的性能来写程序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556832643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90942,"user_name":"KR®","can_delete":false,"product_type":"c1","uid":1509786,"ip_address":"","ucode":"D9736100959258","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/9a/6e7b4442.jpg","comment_is_top":false,"comment_ctime":1556753793,"is_pvip":false,"replies":[{"id":"32645","content":"👍谢谢支持，要坚持和大家多交流","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556833415,"ip_address":"","comment_id":90942,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31621524865","product_id":100026001,"comment_content":"对于我这种小白来说，能啃完这些知识点要感谢初中物理老师为我打下的物理基础 哈哈,  <br><br>徐老师的讲解也太清晰了吧!!!  <br>能看懂跟得上节奏的感觉真好~<br><br>还要感谢高阶的同学们，我没有开发经验，看文章时遇到一些专业名词会一脸懵, 好在高阶的同学会在答疑区提问互动, 看你们的提问和回答我都会有收获!","like_count":7,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448735,"discussion_content":"👍谢谢支持，要坚持和大家多交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556833415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93760,"user_name":"JiangPQ","can_delete":false,"product_type":"c1","uid":1528376,"ip_address":"","ucode":"3714BB49535C03","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGo3Lb6zIKbicxNVKhia9F19iaiaJc8WdGu1XRNATXRHfDLbUh9w33kWe3iciaqolNdhicBVekqZIBPnTVw/132","comment_is_top":false,"comment_ctime":1557583150,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27327386926","product_id":100026001,"comment_content":"关于这一课的组织结构上一点建议：<br><br>1. 在电路设计上，并行和流水线通常是相互配合同时存在的，但是老师在讲述时将这两点分离了，我个人感觉会让不懂电路设计的读者会产生困惑。<br><br>2. 切流水线的意思是在电路的关键路径中的特定位置处插入寄存器，用空间换时间，使得切分后的关键路径的每一段具有更短的执行时间，但在总体上看单条指令的总体运行时间并不会减少。在切流水线后，电路可以使用更高的时钟频率，所以其主要目的还是在于提高主频。在文中“也是现代 CPU 在主频没有办法提升那么多的情况下，性能仍然可以得到提升的重要原因之一”的表达似乎不是那么精确。<br><br>我的理解可能也有不准确的地方，还麻烦老师指正。<br><br>前两天搞毕设，天天就是并行流水的捣腾，做硬件真的使人头秃...","like_count":6,"discussions":[{"author":{"id":1034451,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","nickname":"fatme","note":"","ucode":"75A805D2BB2AD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6694,"discussion_content":"流水线的主要目的是提高吞吐率，让 cpu 同一时间处理多条指令。而不是以提高主频为目的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567055168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3173625,"avatar":"","nickname":"Geek_642be9","note":"","ucode":"A32672781EC77D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1034451,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","nickname":"fatme","note":"","ucode":"75A805D2BB2AD1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586637,"discussion_content":"通过指令流水，如果斩断的是关键路径，时序变好了，主频自然上去了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662388093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6694,"ip_address":"浙江"},"score":586637,"extra":""}]},{"author":{"id":2032840,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","nickname":"Javatar","note":"","ucode":"E216645CDF632C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334053,"discussion_content":"这是高手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607708142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90865,"user_name":"Geek_fredW","can_delete":false,"product_type":"c1","uid":1503455,"ip_address":"","ucode":"3394BB91A7229B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eprdHAHx7Sx1UahBhO4rJ6kcXCvogEQCS1c4QQDYbn8H78uvy6zSnuBDk1Tp7tcgsg31CfoIuKdPA/132","comment_is_top":false,"comment_ctime":1556697295,"is_pvip":false,"replies":[{"id":"32594","content":"Geek_fredW同学你好，因为如果加速的是一个小概率事件，那么对于整体的性能提升就很有限。<br>缓存就是一个典型的情况，如果缓存的数据是很少被访问的，加速的就变成了一个小概率事件，那么缓存就并不能提升太多性能也就失去意义了","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556733084,"ip_address":"","comment_id":90865,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23031533775","product_id":100026001,"comment_content":"我也不明白“加速大概率事件”在文中具体含义。加速可以粗略意识到含义。为什么要提大概率？还是缓存命中？","like_count":5,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448699,"discussion_content":"Geek_fredW同学你好，因为如果加速的是一个小概率事件，那么对于整体的性能提升就很有限。\n缓存就是一个典型的情况，如果缓存的数据是很少被访问的，加速的就变成了一个小概率事件，那么缓存就并不能提升太多性能也就失去意义了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556733084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120800,"discussion_content":"做缓存并不是所有东西都做缓存，那样实际效果可能并不理想，可能导致成本大于缓存利益。选取”更有用“，即大概率事件来做缓存收益更好。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578296818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93595,"user_name":"牧野","can_delete":false,"product_type":"c1","uid":1372185,"ip_address":"","ucode":"8F3B90C4462DE0","user_header":"https://static001.geekbang.org/account/avatar/00/14/f0/19/9d754804.jpg","comment_is_top":false,"comment_ctime":1557514095,"is_pvip":false,"replies":[{"id":"33650","content":"arvin你好，第一个问题我们会在讲解cpu的第一部分详细讲解。核心是一个时钟信号和一个自动计数器。<br>第二个问题我们在后面讲电路的时候会介绍，可以认为就是电路的开闭。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557748685,"ip_address":"","comment_id":93595,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18737383279","product_id":100026001,"comment_content":"老师您好，两个问题没能理解。1：程序如何自动执行的。2，二进制概念的0和1计算机又是如何对应到高电压低电压的。","like_count":4,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449692,"discussion_content":"arvin你好，第一个问题我们会在讲解cpu的第一部分详细讲解。核心是一个时钟信号和一个自动计数器。\n第二个问题我们在后面讲电路的时候会介绍，可以认为就是电路的开闭。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557748685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90943,"user_name":"KR®","can_delete":false,"product_type":"c1","uid":1509786,"ip_address":"","ucode":"D9736100959258","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/9a/6e7b4442.jpg","comment_is_top":false,"comment_ctime":1556754066,"is_pvip":false,"replies":[{"id":"32834","content":"计算机硬件里面有专门的分支预测电路，后面我们会有一讲专门讲到。<br><br>如果着急想要了解的话，也可以先看一下对应的wikipedia https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Branch_predictor","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557127925,"ip_address":"","comment_id":90943,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18736623250","product_id":100026001,"comment_content":"提问, 这里说的预测是硬件cpu层面的预测吗？硬件是固定的，通过什么方式可以预测各种不同软件的下一步呢","like_count":4,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448736,"discussion_content":"计算机硬件里面有专门的分支预测电路，后面我们会有一讲专门讲到。\n\n如果着急想要了解的话，也可以先看一下对应的wikipedia https://en.wikipedia.org/wiki/Branch_predictor","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557127925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90874,"user_name":"魏宇靖","can_delete":false,"product_type":"c1","uid":1105780,"ip_address":"","ucode":"8BCF66C2C8D607","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/74/134f3a7a.jpg","comment_is_top":false,"comment_ctime":1556701077,"is_pvip":false,"replies":[{"id":"32608","content":"魏宇靖同学你好，这里的大概率事件，就是指实际程序运行频繁发生的事件。比如机器学习里面大量要做矩阵向量运算，所以我们优化矩阵向量运算就能大幅度提高性能。而对于矩阵向量运算，gpu比cpu快很多，所以在这个场景下用gpu运算就比用cpu运算整体性能提升很多","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556743566,"ip_address":"","comment_id":90874,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18736570261","product_id":100026001,"comment_content":"我对大概率事件的理解是大规模（一系列）即将需要处理的事件，每个个体的概率不小，而且量极大，所以文中说把这些专门交给GPU(TPU)处理可以提高性能<br>不知道自己有没有理解偏","like_count":4,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448702,"discussion_content":"魏宇靖同学你好，这里的大概率事件，就是指实际程序运行频繁发生的事件。比如机器学习里面大量要做矩阵向量运算，所以我们优化矩阵向量运算就能大幅度提高性能。而对于矩阵向量运算，gpu比cpu快很多，所以在这个场景下用gpu运算就比用cpu运算整体性能提升很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556743566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178441,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1581690115,"is_pvip":false,"replies":[{"id":"69413","content":"Monday同学，<br><br>你好，锂电池的电压，不是输出电压，而是电池的标准电压，通常是3.7V。所以应该是 100Wh&#47;3.7V = 27000mAh，这也是飞机上能带的最大的充电宝。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1581838628,"ip_address":"","comment_id":178441,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14466592003","product_id":100026001,"comment_content":"对于100瓦时（1Wh=1V*A*h）的思考：<br>第一反应是我双向快充充电宝的单位是10000mAh（毫安时），其他数据，输出电压5~9V，最大电流2A。<br>那Wh怎么换算成mAh呢？<br>如果输出电压是5V的话，100Wh&#47;5V=20Ah=20000mAh<br>请指正。<br>","like_count":3,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483824,"discussion_content":"Monday同学，\n\n你好，锂电池的电压，不是输出电压，而是电池的标准电压，通常是3.7V。所以应该是 100Wh/3.7V = 27000mAh，这也是飞机上能带的最大的充电宝。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581838628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135105,"user_name":"村舍酒家","can_delete":false,"product_type":"c1","uid":1250503,"ip_address":"","ucode":"B1F37CAC9317B4","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/c7/15b005aa.jpg","comment_is_top":false,"comment_ctime":1569028528,"is_pvip":false,"replies":[{"id":"52610","content":"村舍酒家同学，<br><br>你好，我们分析问题，通常是采用“控制变量法”。上面的功耗公式，是基于其他因素确定的情况下的计算。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569653032,"ip_address":"","comment_id":135105,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14453930416","product_id":100026001,"comment_content":"上面说制程的提升解决了功耗和散热的问题，那上面的功耗公式，为什么没有把制程参数考虑进去？","like_count":3,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468050,"discussion_content":"村舍酒家同学，\n\n你好，我们分析问题，通常是采用“控制变量法”。上面的功耗公式，是基于其他因素确定的情况下的计算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569653032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94100,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1557719454,"is_pvip":false,"replies":[{"id":"33628","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557747005,"ip_address":"","comment_id":94100,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14442621342","product_id":100026001,"comment_content":"开发中使用到的缓存，和加速大概率事件思路有点类似；采用的多线程技术，和通过流水线提高性能，也是有异曲同工的地方。","like_count":3,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449913,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557747005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91423,"user_name":"Only now","can_delete":false,"product_type":"c1","uid":1038574,"ip_address":"","ucode":"C617473A03AE27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/ee/6e7c2264.jpg","comment_is_top":false,"comment_ctime":1557034766,"is_pvip":false,"replies":[{"id":"32781","content":"👍概率和预测说得很好<br><br>不过CPU的流水线还是比较特殊的，和我们一般理解的流水线的方式其实还是有些差异，可以在后面特别深入关注一下流水线的部分。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557121590,"ip_address":"","comment_id":91423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441936654","product_id":100026001,"comment_content":"概率:<br> JIT 运行时编译, 可以通过profiling数据, 将小概率甚至死代码排除, 只运行有效部分。<br><br>流水线:<br> 这个不就是缓存系统典型的消费者生产者模型么? 日志系统表现的最明显, 生产者将日志塞入日志缓存,  日志线程则负责从日志缓存里取出数据记录到磁盘, sync进程则负责将关键日志推送到集中存储。<br><br>预测:<br>  缓存热点数据, 因为大部分的访问都是访问热点数据, 所以, 我可以预测下一次访存大概率就是在热点缓存里, 先去热点缓存中查找数据, 若不存在,再去落地库进行索引<br> ","like_count":3,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448914,"discussion_content":"👍概率和预测说得很好\n\n不过CPU的流水线还是比较特殊的，和我们一般理解的流水线的方式其实还是有些差异，可以在后面特别深入关注一下流水线的部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557121590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163045,"user_name":"Geek_aa8017","can_delete":false,"product_type":"c1","uid":1748911,"ip_address":"","ucode":"286195887103C2","user_header":"","comment_is_top":false,"comment_ctime":1576645956,"is_pvip":false,"replies":[{"id":"68665","content":"Geek_aa8017同学，<br><br>你好，晶体管的增加，意味着我们的电路变多了，变复杂了。我们把电路变多变复杂了是为什么呢？一种是用一个复杂电路实现一条新的指令，这条指令可以执行以前需要很多条指令才能完成的工作，或者很多个电路组合执行多次才能完成的工作。<br><br>所以在实际应用中，会表现出来特定的计算变快了。比如我们的乘法器指令，可以依靠不断的循环用加法来实现，也可以直接用一个更复杂的电路来直接实现。<br><br>直接实现的情况下，需要的晶体管变多了，CPU执行乘法的速度也变快了。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1581238931,"ip_address":"","comment_id":163045,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166580548","product_id":100026001,"comment_content":"晶体管的打开和关闭也是需要花时间的，晶体管的增加意味着打开和关闭的动作就增加了，为什么增加晶体管可以提高cpu执行速度呢","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478226,"discussion_content":"Geek_aa8017同学，\n\n你好，晶体管的增加，意味着我们的电路变多了，变复杂了。我们把电路变多变复杂了是为什么呢？一种是用一个复杂电路实现一条新的指令，这条指令可以执行以前需要很多条指令才能完成的工作，或者很多个电路组合执行多次才能完成的工作。\n\n所以在实际应用中，会表现出来特定的计算变快了。比如我们的乘法器指令，可以依靠不断的循环用加法来实现，也可以直接用一个更复杂的电路来直接实现。\n\n直接实现的情况下，需要的晶体管变多了，CPU执行乘法的速度也变快了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581238931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93530,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1557487753,"is_pvip":false,"replies":[{"id":"33432","content":"赞思路，不过我觉得还是不太一样的。它更像“抢跑”而不像防止浪费和空闲。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557508890,"ip_address":"","comment_id":93530,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147422345","product_id":100026001,"comment_content":"作者大大，关于协程是流水线的问题其实我是这样想的，流水线的目的就是减少cpu空闲的电路， 尽量让cpu每一部分都工作起来。而协程的也是减少cpu空闲的时间，更好的利用cpu，感觉两者有异曲同工之妙就写下来啦","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449668,"discussion_content":"赞思路，不过我觉得还是不太一样的。它更像“抢跑”而不像防止浪费和空闲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557508890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92509,"user_name":"静静的拼搏","can_delete":false,"product_type":"c1","uid":1512645,"ip_address":"","ucode":"46181782824193","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c5/87631334.jpg","comment_is_top":false,"comment_ctime":1557287423,"is_pvip":false,"replies":[{"id":"33393","content":"静静的拼搏同学你好，关于LongAdder可以更具体地和大家分享一下吗？","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557473921,"ip_address":"","comment_id":92509,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147222015","product_id":100026001,"comment_content":"加速大概率事件：在程序中遇到的是使用缓存，减少热点数据的查询时间<br>流水线：java程序juc包提供的LongAdder工具类采用了这种思路，提高运算效率<br>预测：目前还没有遇到过<br>","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449292,"discussion_content":"静静的拼搏同学你好，关于LongAdder可以更具体地和大家分享一下吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557473921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92075,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1557186314,"is_pvip":false,"replies":[{"id":"33372","content":"👍 关于协程是流水线能具体解释一下么？我没有太明白。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557471541,"ip_address":"","comment_id":92075,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147120906","product_id":100026001,"comment_content":"加速大概率事件 优化工程中使用次数最多的算法<br>流水线  协程<br>预测 剪枝","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449138,"discussion_content":"👍 关于协程是流水线能具体解释一下么？我没有太明白。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557471541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91395,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1557024643,"is_pvip":false,"replies":[{"id":"32782","content":"👍说得不错，不过“剪纸”是什么能具体说说么？","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557121654,"ip_address":"","comment_id":91395,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10146959235","product_id":100026001,"comment_content":"加速大概率事件: <br>  - 缓存<br>流水线:<br>  - 开发过程中功能分解<br>预测:<br>  - 剪纸<br>  - 浏览器预加载","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448903,"discussion_content":"👍说得不错，不过“剪纸”是什么能具体说说么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557121654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gmP4Yh00MZPwNvr4UQdLeXaX3TVyZEEp195S3vD3Sfl1xz5jBr1474Mt6w5OPr0KsrnQObfLRy5PkKNFjSBiasA/132","nickname":"大头爸爸","note":"","ucode":"131E25DB04D222","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205675,"discussion_content":"应该是说剪枝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584330820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91071,"user_name":"庄小P","can_delete":false,"product_type":"c1","uid":1489063,"ip_address":"","ucode":"A71FA01F713790","user_header":"","comment_is_top":false,"comment_ctime":1556846946,"is_pvip":false,"replies":[{"id":"32812","content":"庄小P同学你好，<br><br>低压和低主频都是为了减少能耗。比如Surface Go的电池很小，机器的尺寸也很小。如果用上高主频，性能更好了，但是耗电并没有下来。<br><br>另外，低电压对于CPU的工艺有更高的要求，因为太低的电压可能导致电路都不能导通，要高主频一样对工艺有更高的要求。所以一般低压CPU都是通过和低主频配合，用在对于移动性和续航要求比较高的机器上。<br><br>向量计算是可以通过让加法也并行来优化的，不过真实的CPU里面其实是通过SIMD指令来优化向量计算的，我在后面也会讲到SIMD指令。<br>","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557125346,"ip_address":"","comment_id":91071,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146781538","product_id":100026001,"comment_content":"老师你说低压的通常主频只有标压的2&#47;3，那是为什么要这样呢？按理说，低压时候功耗更低了。同等功耗下，低压的主频不应该高于标压的主频嘛？<br><br>另外一个问题是，上面的计算向量的点积时候，我能不能通过多加两个CPU来计算求和，然后最后再进行汇总，这样是不是还能提高性能呢？？","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448786,"discussion_content":"庄小P同学你好，\n\n低压和低主频都是为了减少能耗。比如Surface Go的电池很小，机器的尺寸也很小。如果用上高主频，性能更好了，但是耗电并没有下来。\n\n另外，低电压对于CPU的工艺有更高的要求，因为太低的电压可能导致电路都不能导通，要高主频一样对工艺有更高的要求。所以一般低压CPU都是通过和低主频配合，用在对于移动性和续航要求比较高的机器上。\n\n向量计算是可以通过让加法也并行来优化的，不过真实的CPU里面其实是通过SIMD指令来优化向量计算的，我在后面也会讲到SIMD指令。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557125346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90867,"user_name":"易儿易","can_delete":false,"product_type":"c1","uid":1242864,"ip_address":"","ucode":"B15D1031CA841E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqLcWH3mSPmhjrs1aGL4b3TqI7xDqWWibM4nYFrRlp0z7FNSWaJz0mqovrgIA7ibmrPt8zRScSfRaqQ/132","comment_is_top":false,"comment_ctime":1556697560,"is_pvip":false,"replies":[{"id":"32588","content":"性能的差异是因为主频就有差异，同样代号的intel cpu，低压的通常主频只有标压的2&#47;3，比如i5-4200m的主频是2.5GHz到3.1GHz。而低压版本的i5-4200u就只有1.6GHz到2.5GHz。它们只是代号相同，主频并不一样","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556729761,"ip_address":"","comment_id":90867,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146632152","product_id":100026001,"comment_content":"同样主频、核心情况下，低压cpu与标压cpu性能有区别吗？通过公式来看的话应该没有区别，但是经常听到有人讲低压cpu性能打不过标压，对吗？是什么原因呢？","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448701,"discussion_content":"性能的差异是因为主频就有差异，同样代号的intel cpu，低压的通常主频只有标压的2/3，比如i5-4200m的主频是2.5GHz到3.1GHz。而低压版本的i5-4200u就只有1.6GHz到2.5GHz。它们只是代号相同，主频并不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556729761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90853,"user_name":"　　　　　　　鸟人","can_delete":false,"product_type":"c1","uid":1035165,"ip_address":"","ucode":"E504B22F336035","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/9d/2bc85843.jpg","comment_is_top":false,"comment_ctime":1556691498,"is_pvip":false,"replies":[{"id":"32587","content":"你说的应该是之前的meltdown和spectre的漏洞，那个漏洞很有意思，可以认为是利用了流水线，预测，以及高速缓存的组合带来的一个问题。<br>我不是cpu设计的专家，不过我认为这个并不会让大家放弃预测，而且这个的主要危害其实是在多租户的虚拟机这个层面，完全只考虑物理机的话这个漏洞的触发条件还是很难满足的","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556729284,"ip_address":"","comment_id":90853,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146626090","product_id":100026001,"comment_content":"通过预测提高性能  我记得有个CPU漏洞就是因为可预测导致数据泄露，现在修复了，然后性能下降  是否意味着以后CPU不会采用预测了呢？","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448692,"discussion_content":"你说的应该是之前的meltdown和spectre的漏洞，那个漏洞很有意思，可以认为是利用了流水线，预测，以及高速缓存的组合带来的一个问题。\n我不是cpu设计的专家，不过我认为这个并不会让大家放弃预测，而且这个的主要危害其实是在多租户的虚拟机这个层面，完全只考虑物理机的话这个漏洞的触发条件还是很难满足的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556729284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90834,"user_name":"bo","can_delete":false,"product_type":"c1","uid":1368074,"ip_address":"","ucode":"B1D7177830DE07","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/0a/bf7ece06.jpg","comment_is_top":false,"comment_ctime":1556681548,"is_pvip":false,"replies":[{"id":"32598","content":"bo同学你好，在讲解处理器的部分，我会专门有一讲来讲解gpu的，要坚持到底啊","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556734617,"ip_address":"","comment_id":90834,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146616140","product_id":100026001,"comment_content":"请问谁能解释一下cpu和gpu内部结构的区别吗？","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448682,"discussion_content":"bo同学你好，在讲解处理器的部分，我会专门有一讲来讲解gpu的，要坚持到底啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556734617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90819,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1556676021,"is_pvip":false,"replies":[{"id":"32604","content":"👍很多例子能够对得上，要是更具体讲一下是和哪个性能优化的策略对上就更好了","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556735529,"ip_address":"","comment_id":90819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146610613","product_id":100026001,"comment_content":"进程绑定cpu，利用cpu本地缓存，磁盘数据缓存到内存，文件系统利用cache提高读写速度，网络处理让网卡分担一部分cpu的工作，降低对cpu的负载","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448673,"discussion_content":"👍很多例子能够对得上，要是更具体讲一下是和哪个性能优化的策略对上就更好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556735529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90812,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1556672537,"is_pvip":false,"replies":[{"id":"32611","content":"发条橙子同学你好，两个理解都有一些偏差。可以再看看，到讲解流水线和分支预测的时候可以仔细看一下那几讲。<br><br>流水线更多是同一个时间里面同时执行不同指令的不同阶段。而预测是因为流水线的存在，虽然不能精确知道之后的指令执行什么但是可以先猜测一个如果运气好就会节约时间。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556749174,"ip_address":"","comment_id":90812,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146607129","product_id":100026001,"comment_content":"都是通过多线程满足需求 。<br><br>流水线 ： 将一个大的任务划分成多个子任务再进行汇总 ， 类似于 fork&#47;join ， map&#47;reduce<br><br>预测 ： 我们程序都是顺序执行 ，比如先计算 ， 再io ， 再计算 。 我们知道是按照这个顺序执行的，就可以将io单独开个线程去处理  <br><br>上面是我的理解 ， 第一个我有点看不懂 ，等待老师讲gpu 和 tpu 😁","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448670,"discussion_content":"发条橙子同学你好，两个理解都有一些偏差。可以再看看，到讲解流水线和分支预测的时候可以仔细看一下那几讲。\n\n流水线更多是同一个时间里面同时执行不同指令的不同阶段。而预测是因为流水线的存在，虽然不能精确知道之后的指令执行什么但是可以先猜测一个如果运气好就会节约时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556749174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90808,"user_name":"在彼处","can_delete":false,"product_type":"c1","uid":1106513,"ip_address":"","ucode":"3C6FF74CD2155E","user_header":"https://static001.geekbang.org/account/avatar/00/10/e2/51/e1a5b357.jpg","comment_is_top":false,"comment_ctime":1556671076,"is_pvip":false,"replies":[{"id":"32607","content":"在彼处同学你好，晶体管如果不通电的话自然是不工作的。关于晶体管的工作原理，可以看wikipedia里面的介绍 https:&#47;&#47;zh.m.wikipedia.org&#47;zh&#47;晶体管","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556736178,"ip_address":"","comment_id":90808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146605668","product_id":100026001,"comment_content":"我想请教一个问题就是晶体管是怎么工作的？在不通电的情况下还能工作吗？","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448667,"discussion_content":"在彼处同学你好，晶体管如果不通电的话自然是不工作的。关于晶体管的工作原理，可以看wikipedia里面的介绍 https://zh.m.wikipedia.org/zh/晶体管","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556736178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353319,"user_name":"X","can_delete":false,"product_type":"c1","uid":1581509,"ip_address":"上海","ucode":"BE05C1D25CE313","user_header":"https://static001.geekbang.org/account/avatar/00/18/21/c5/024e1ef1.jpg","comment_is_top":false,"comment_ctime":1659349594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5954316890","product_id":100026001,"comment_content":"讲的真的让人痴迷呀，真棒。<br>主频越高越好，但是主频高了，高作电压就得高，工作电压高了，cpu的耗能就高了，并且cpu的散热也高了。<br>我们理想状态是：主频高、工作电压低。","like_count":1},{"had_liked":false,"id":353317,"user_name":"X","can_delete":false,"product_type":"c1","uid":1581509,"ip_address":"上海","ucode":"BE05C1D25CE313","user_header":"https://static001.geekbang.org/account/avatar/00/18/21/c5/024e1ef1.jpg","comment_is_top":false,"comment_ctime":1659348636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5954315932","product_id":100026001,"comment_content":"当起初的提升计算机性能方式从堆硬件开始到现在的瓶颈期。<br>想要cpu算的更快，我们可以往cpu里面堆更多的晶体管，也就是提升晶体管在cpu里的密度，同时提高晶体管开闭电路的频率（提高主频），提高cpu的工作电压以提高cpu的工作效率。但是这都会带来相应的功耗问题。<br>相同电池的kwh在功耗越高的计算机下工作的时间就越短。还会有散热的问题，如果cpu的热量没有及时散发出去的话，那么会导致cpu的寿命严重缩短，甚至直接损坏。","like_count":1},{"had_liked":false,"id":135481,"user_name":"dbtiger","can_delete":false,"product_type":"c1","uid":1324202,"ip_address":"","ucode":"05E8447593318C","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/aa/431de942.jpg","comment_is_top":false,"comment_ctime":1569195451,"is_pvip":false,"replies":[{"id":"52608","content":"dbtiger同学，<br><br>你好，并不是“加速大概率事件”这件事情GPU比CPU做得好。而是说，针对深度学习计算，大概率执行的指令都是并行的矩阵运算，而GPU专门做这个事情，做这个事情比CPU快。用上了GPU就等于加速了一个大概率要执行的指令","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569652429,"ip_address":"","comment_id":135481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864162747","product_id":100026001,"comment_content":"在“加速大概率事件”中gpu为啥比cpu在要做的好呢？","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468210,"discussion_content":"dbtiger同学，\n\n你好，并不是“加速大概率事件”这件事情GPU比CPU做得好。而是说，针对深度学习计算，大概率执行的指令都是并行的矩阵运算，而GPU专门做这个事情，做这个事情比CPU快。用上了GPU就等于加速了一个大概率要执行的指令","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569652429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108006,"user_name":"DreamItPossible","can_delete":false,"product_type":"c1","uid":1254103,"ip_address":"","ucode":"232FCE2BB22012","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/d7/fed46140.jpg","comment_is_top":false,"comment_ctime":1561646474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856613770","product_id":100026001,"comment_content":"性能提升的5个基本途径<br><br>摩尔定律（主频）<br>响应时间<br><br>并行计算（多核）<br>吞吐率<br>Amdahl定律<br><br>流水线法<br>将CPU指令执行过程拆分，细化运行<br><br>加速大概率事件<br><br>预测法<br>局部性原理，分支与冒险，热点数据缓存<br>","like_count":1},{"had_liked":false,"id":101489,"user_name":"永涛","can_delete":false,"product_type":"c1","uid":1004199,"ip_address":"","ucode":"BE54825A1AA065","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/a7/76c10ff6.jpg","comment_is_top":false,"comment_ctime":1559822332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854789628","product_id":100026001,"comment_content":"没基础的只能看到这里，试了两遍了，可能需要硬着头皮往下看。一旦涉及到和程序相关就觉得困难。","like_count":1},{"had_liked":false,"id":97252,"user_name":"ginger","can_delete":false,"product_type":"c1","uid":1321670,"ip_address":"","ucode":"73892EB5DDCE66","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/c6/8646048e.jpg","comment_is_top":false,"comment_ctime":1558620444,"is_pvip":false,"replies":[{"id":"35528","content":"这个淘宝买东西和预测的关系不大，最多算是异步计算。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1559130488,"ip_address":"","comment_id":97252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853587740","product_id":100026001,"comment_content":"哦对了,之前就听说,其实在淘宝买东西时候,页面显示购买成功了,其实并不是真正的成功过了,后台还有很多数据流程没有跑完,那么我觉得,这个一定是属于预测的,在我的提交动作触发之前,代码需要先确定我是一定鞥呢成功的,那么提交动作一旦触发,页面就会告诉我,成功了,但是实际上,还有很多事情在有条不紊的执行着.","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451194,"discussion_content":"这个淘宝买东西和预测的关系不大，最多算是异步计算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559130488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97249,"user_name":"ginger","can_delete":false,"product_type":"c1","uid":1321670,"ip_address":"","ucode":"73892EB5DDCE66","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/c6/8646048e.jpg","comment_is_top":false,"comment_ctime":1558619935,"is_pvip":false,"replies":[{"id":"35499","content":"👍第一个例子不错","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1559127780,"ip_address":"","comment_id":97249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853587231","product_id":100026001,"comment_content":"算法小白想到的预测例子:<br>    通过预测集合大小,来定义集合初始化容量.哈哈<br>    统计学中肯定有一些预测分析算法可以用到代码思路中.<br>    分支算不算就是一种预测.<br>    等以后学习了些法,我要再举一些例子出来.","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451192,"discussion_content":"👍第一个例子不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559127780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95840,"user_name":"shark","can_delete":false,"product_type":"c1","uid":1528132,"ip_address":"","ucode":"C8734967184491","user_header":"https://static001.geekbang.org/account/avatar/00/17/51/44/46933fb6.jpg","comment_is_top":false,"comment_ctime":1558202319,"is_pvip":false,"replies":[{"id":"35551","content":"是的，比如最近比较热的RISC-V其实就是想让大家能根据自己的实际应用的Load在开源的指令集上去设计自己的CPU","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1559133169,"ip_address":"","comment_id":95840,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5853169615","product_id":100026001,"comment_content":"总结：<br>性能提升上，参照上节的公式，首先还是提高主频，方法考虑提高晶体管密度，有缩小制程和提高电路性能，但这种硬件方式都会碰到功耗墙，一是晶体管所需的电压必须保证，二是密度大了功耗自然大了，我其实听我们老师说开始考虑3D电路了。之后解决方案是并行处理多核提高吞吐率。<br> 实际上现阶段的发展考虑的是以下三中，一是大概率计算的优化，感觉类似是简化cpi；二是预测结果，三是并行","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450614,"discussion_content":"是的，比如最近比较热的RISC-V其实就是想让大家能根据自己的实际应用的Load在开源的指令集上去设计自己的CPU","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559133169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1361746,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c7/52/c5adf218.jpg","nickname":"喜欢地球的阿培同学","note":"","ucode":"5F97037585F857","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345920,"discussion_content":"密度大了功耗自然大了， 这句话不对，5纳米的芯片功耗就不比7纳米的功耗高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611815495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93555,"user_name":"萝卜祥子","can_delete":false,"product_type":"c1","uid":1476139,"ip_address":"","ucode":"367F4E644D4656","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9z4VJwCSPPI0Zng5OmbC0EX7TYvqiconRv4GolDKxWLK97GLvvoroqTgkHlIlLyZZTVlRRiaZkCeTlthNDYauhA/132","comment_is_top":false,"comment_ctime":1557495320,"is_pvip":false,"replies":[{"id":"33429","content":"👍我们在存储器的高速缓存部分会专门讲一下这个。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557506175,"ip_address":"","comment_id":93555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852462616","product_id":100026001,"comment_content":"在遍历二维数组的时候是按照行优先还是列优先两者就有很大不同，前者能够更高的符合空间局部性原理","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449678,"discussion_content":"👍我们在存储器的高速缓存部分会专门讲一下这个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557506175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92073,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1557186155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852153451","product_id":100026001,"comment_content":"加速大概率时间，优化工程中的使用次数最多的算法<br>","like_count":1},{"had_liked":false,"id":91127,"user_name":"大熊","can_delete":false,"product_type":"c1","uid":1008951,"ip_address":"","ucode":"D7858E9DA87B5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/37/56c492d3.jpg","comment_is_top":false,"comment_ctime":1556873968,"is_pvip":false,"replies":[{"id":"32831","content":"大熊同学你好，<br><br>加速大概率事件的例子可以找一些更具体的<br>流水线的确是进行了分治，不过还有很重要的一点是前后的步骤在多个指令的情况下是并行的<br>剪枝也的确是预测思想的一种，但是数据check不能称之为“预测”了。预测也不是为了提高代码的复用性。<br><br>可以看看其他同学的答案一起参考一下。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557127848,"ip_address":"","comment_id":91127,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851841264","product_id":100026001,"comment_content":"1. 加大概率事件：<br>   换在软件开发中，使用更好的数据结构和更符合事宜的算法，来优化时间、空间复杂度；<br><br>2. 通过流水线提高性能：<br>   开发中的分治思想；<br><br>3. 通过预测提高性能：<br>   类似树的“剪枝”，去除不必要的多余的计算；我觉得前端做的各种数据的check，应该也属于一种预测吧；共通方法的抽取，提高代码的可复用性。","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448817,"discussion_content":"大熊同学你好，\n\n加速大概率事件的例子可以找一些更具体的\n流水线的确是进行了分治，不过还有很重要的一点是前后的步骤在多个指令的情况下是并行的\n剪枝也的确是预测思想的一种，但是数据check不能称之为“预测”了。预测也不是为了提高代码的复用性。\n\n可以看看其他同学的答案一起参考一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557127848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91045,"user_name":"　　　　　　　鸟人","can_delete":false,"product_type":"c1","uid":1035165,"ip_address":"","ucode":"E504B22F336035","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/9d/2bc85843.jpg","comment_is_top":false,"comment_ctime":1556823423,"is_pvip":false,"replies":[{"id":"32819","content":"能说说具体为什么吗？","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557125917,"ip_address":"","comment_id":91045,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851790719","product_id":100026001,"comment_content":"我觉得可以把显存给CPU用来提高","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448778,"discussion_content":"能说说具体为什么吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557125917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90940,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1556753083,"is_pvip":false,"replies":[{"id":"32823","content":"活得潇洒同学你好，<br><br>预测部分说的不错。<br>流水线部分能更详细地解释一下是怎么编程流水线的么？<br>","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1557126325,"ip_address":"","comment_id":90940,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851720379","product_id":100026001,"comment_content":"对于思考题:<br><br><br>通过预测提高性能<br>3、浏览器缓存<br>4、redis缓存<br> 通过流水线提高<br>1、最前段使用类似于F5的硬件设备设备<br>2、两台负载nginx负载均衡<br>5、微服务springcloud ","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448734,"discussion_content":"活得潇洒同学你好，\n\n预测部分说的不错。\n流水线部分能更详细地解释一下是怎么编程流水线的么？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557126325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90882,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1556707265,"is_pvip":false,"replies":[{"id":"32605","content":"能具体讲一下你觉得这些问题和哪个性能优化策略对上了么？","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556735806,"ip_address":"","comment_id":90882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851674561","product_id":100026001,"comment_content":"对于思考题:<br>1、最前段使用类似于F5的硬件设备设备<br>2、两台负载nginx负载均衡<br>3、浏览器缓存<br>4、消息队列<br>5、微服务springcloud","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448708,"discussion_content":"能具体讲一下你觉得这些问题和哪个性能优化策略对上了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556735806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90842,"user_name":"ezra.xu","can_delete":false,"product_type":"c1","uid":1014005,"ip_address":"","ucode":"6C3E11889BC6AB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/f5/ae200a94.jpg","comment_is_top":false,"comment_ctime":1556686019,"is_pvip":false,"replies":[{"id":"32596","content":"👍缓存是加速大概率事件的典型案例","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556733488,"ip_address":"","comment_id":90842,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851653315","product_id":100026001,"comment_content":"写程序的时候，可以考虑通过使用缓存，内存的局部性原理等提升程序运行时的性能。","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448687,"discussion_content":"👍缓存是加速大概率事件的典型案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556733488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90837,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1358337,"ip_address":"","ucode":"276E2950D31AFB","user_header":"https://static001.geekbang.org/account/avatar/00/14/ba/01/c5161563.jpg","comment_is_top":false,"comment_ctime":1556684435,"is_pvip":false,"replies":[{"id":"32597","content":"这两个例子都不太对，再想想","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556734558,"ip_address":"","comment_id":90837,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851651731","product_id":100026001,"comment_content":"对于思考题，软件层面的话，比如前端页面的首屏渲染，由于浏览器按顺序解析DOM，解析到script标签的时候会加载完再它再继续解析，所以一般把它们放到body底部，这部分对应流水线思想？然后如果script使用了defer，继续Dom解析，，。额，好像对不上“预测”，只能说是不阻塞。","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448684,"discussion_content":"这两个例子都不太对，再想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556734558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90836,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1358337,"ip_address":"","ucode":"276E2950D31AFB","user_header":"https://static001.geekbang.org/account/avatar/00/14/ba/01/c5161563.jpg","comment_is_top":false,"comment_ctime":1556683198,"is_pvip":false,"replies":[{"id":"32593","content":"Geek同学你好，是的，这个情况下无论你的cpu有多少核，实际只有一个核在计算。<br>预测和异步还是不太一样，它更多地是因为现代cpu里的流水线的存在而需要的一种加速性能的办法，我们在后面讲解cpu的分支预测的时候会仔细讲一下这个是为什么","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556732370,"ip_address":"","comment_id":90836,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851650494","product_id":100026001,"comment_content":"今天的例子太贴切，非常容易理解，感谢徐老师。我有个问题，如果说单个程序的运行时不可拆分的，如果CPU其他参数一样，那是不是四核和八核处理速度是一样的？提高性能的预测手段，是不是相当于异步呢？","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448683,"discussion_content":"Geek同学你好，是的，这个情况下无论你的cpu有多少核，实际只有一个核在计算。\n预测和异步还是不太一样，它更多地是因为现代cpu里的流水线的存在而需要的一种加速性能的办法，我们在后面讲解cpu的分支预测的时候会仔细讲一下这个是为什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556732370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90815,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1556673696,"is_pvip":false,"replies":[{"id":"32603","content":"👍两个例子都不错","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556735474,"ip_address":"","comment_id":90815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851640992","product_id":100026001,"comment_content":"子任务并发算是流水线的应用，磁盘预读算是预测","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448672,"discussion_content":"👍两个例子都不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556735474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90814,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1556673432,"is_pvip":false,"replies":[{"id":"32585","content":"👍是的，这个是典型的加速大概率事件","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1556728492,"ip_address":"","comment_id":90814,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851640728","product_id":100026001,"comment_content":"缓存加速应该算是大概率的应用","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448671,"discussion_content":"👍是的，这个是典型的加速大概率事件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556728492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356667,"user_name":"穆柏","can_delete":false,"product_type":"c1","uid":3173613,"ip_address":"上海","ucode":"669CA6F2C28AD6","user_header":"https://static001.geekbang.org/account/avatar/00/30/6c/ed/83844d56.jpg","comment_is_top":false,"comment_ctime":1662480342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662480342","product_id":100026001,"comment_content":"打卡<br>","like_count":0},{"had_liked":false,"id":351008,"user_name":"Geek_93970d","can_delete":false,"product_type":"c1","uid":1452167,"ip_address":"","ucode":"52AC308BEC7737","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYRSYg6icjibzGa7efcMrCsGec2UwibjTd57icqDz0zzkEEOM2pXVju60dibzcnQKPfRkN9g/132","comment_is_top":false,"comment_ctime":1657449350,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657449350","product_id":100026001,"comment_content":"手机发烫的时候，都会伴随卡顿，原来是自动降低主频了？","like_count":0},{"had_liked":false,"id":350081,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1656558479,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1656558479","product_id":100026001,"comment_content":"硬件除了加快速度，增加并行，还可以有加速大概率事件、通过流水线提高性能和通过预测提高性能。<br>在开发层面，一般循环查询是不被建议的，提前集中查询会更快；增加缓存之类的也算是优化性能吧。。。","like_count":0},{"had_liked":false,"id":346604,"user_name":"　","can_delete":false,"product_type":"c1","uid":2934864,"ip_address":"","ucode":"A97188D0B4CE06","user_header":"https://static001.geekbang.org/account/avatar/00/2c/c8/50/0bb1f1e2.jpg","comment_is_top":false,"comment_ctime":1653275810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653275810","product_id":100026001,"comment_content":"老师你好，有两个问题想问一下，希望能得到老师的解答<br>1，文中增加晶体管——让cpu面积变大——晶体管之间距离会变大，信号传递变慢  这部分，<br>为什么不能是增大面积，然后晶体管之间的距离还按之前的距离去搞呢，是晶体管之间的距离有限制吗？<br><br>2，文中加速大概率事件  部分，是有“专精装备”的思想吗？对于一个大概率事件，选择最适合它的解决方案，比如矩阵运算用GPU，存储结构中加入cache<br>计算机是怎么判断它属于大概率事件呢？是通过局部性原理还是要进行分析呢？","like_count":0},{"had_liked":false,"id":346551,"user_name":"jorin@zou","can_delete":false,"product_type":"c1","uid":1564869,"ip_address":"","ucode":"A8CEF7CCF33570","user_header":"https://static001.geekbang.org/account/avatar/00/17/e0/c5/c324a7de.jpg","comment_is_top":false,"comment_ctime":1653226387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653226387","product_id":100026001,"comment_content":"为什么制程的提升，解决了能耗和散热问题？","like_count":0},{"had_liked":false,"id":340368,"user_name":"组成原理","can_delete":false,"product_type":"c1","uid":2909185,"ip_address":"","ucode":"934EA9DAC808FD","user_header":"","comment_is_top":false,"comment_ctime":1648781563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648781563","product_id":100026001,"comment_content":"缓存","like_count":0},{"had_liked":false,"id":340344,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1648773240,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648773240","product_id":100026001,"comment_content":"Mapreduce","like_count":0},{"had_liked":false,"id":333389,"user_name":"Howe","can_delete":false,"product_type":"c1","uid":1054300,"ip_address":"","ucode":"E2E93375FF5A07","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/5c/c0322969.jpg","comment_is_top":false,"comment_ctime":1644322904,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644322904","product_id":100026001,"comment_content":"老师，请教个问题：通过预测提升性能，但一个CPU同一时间只能处理一件事，在流水线里，假设正在处理A环节，然后去预测运算B环节，其实应该挂起A去执行预测指令对吧，这种情况下其实从整体来看，并没有缩短执行时间吧？","like_count":0},{"had_liked":false,"id":320242,"user_name":"CCV","can_delete":false,"product_type":"c1","uid":2817039,"ip_address":"","ucode":"06B38326D5B286","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fc/0f/68c82ec5.jpg","comment_is_top":false,"comment_ctime":1636170160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636170160","product_id":100026001,"comment_content":"并行优化和通过流水线提高性能有什么区别呢？流水线的工作是由多个CPU一起完成还是一个CPU单独完成？如果是一个CPU，那么任务细分为什么能提高性能呢？","like_count":0},{"had_liked":false,"id":319817,"user_name":"程磊","can_delete":false,"product_type":"c1","uid":2617122,"ip_address":"","ucode":"61F39C73F075AC","user_header":"https://static001.geekbang.org/account/avatar/00/27/ef/22/fa3967b0.jpg","comment_is_top":false,"comment_ctime":1635951206,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635951206","product_id":100026001,"comment_content":"你好，我有个疑问，电压是不是只对功耗有影响，对性能没有影响，无论5V还是1V，只要CPU能正常运行(其他条件都一样)，CPU性能都一样？","like_count":0},{"had_liked":false,"id":309227,"user_name":"Mandone","can_delete":false,"product_type":"c1","uid":1116017,"ip_address":"","ucode":"FE236389CEF200","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/71/d3049207.jpg","comment_is_top":false,"comment_ctime":1629990235,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629990235","product_id":100026001,"comment_content":"这里的CPI指令执行时间指的具体是汇编语言中的一条汇编指令吗？还是说更底层的，如果有的话希望老师可以举个例子，不知道老师还会不会看留言🙏🏻","like_count":0},{"had_liked":false,"id":305818,"user_name":"C++0307","can_delete":false,"product_type":"c1","uid":2723038,"ip_address":"","ucode":"A483975F876B8D","user_header":"https://static001.geekbang.org/account/avatar/00/29/8c/de/ac3e043f.jpg","comment_is_top":false,"comment_ctime":1628178358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628178358","product_id":100026001,"comment_content":"高屋建瓴","like_count":0},{"had_liked":false,"id":305398,"user_name":"18736297414","can_delete":false,"product_type":"c1","uid":2272314,"ip_address":"","ucode":"F5220462B05D43","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GbZRicqbu1QJmlcOlfLyW48OPaMmcKSO6zeZaKkc2uFiaLYOysibTKMtrOvOpHvlSHulHUatKX7lVcrENibqCmGhwQ/132","comment_is_top":false,"comment_ctime":1627960047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627960047","product_id":100026001,"comment_content":"加速大概率事件：<br>缓存数据（降低网络、硬盘耗时）<br>流水线：<br>多线程处理数据<br>预测：<br>数组容量设置（降低指令数量与内存耗时）","like_count":0},{"had_liked":false,"id":303957,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1627123839,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1627123839","product_id":100026001,"comment_content":"加速大概率事件、通过流水线提高性能和通过预测提高性能.我能想到的,大概就有使用队列,一端存一端取,还有就是 JVM 里面的编译优化涉及到的一些类型缓存.","like_count":0},{"had_liked":false,"id":299261,"user_name":"夜薇","can_delete":false,"product_type":"c1","uid":1331222,"ip_address":"","ucode":"B63B6AAE5A1F05","user_header":"https://static001.geekbang.org/account/avatar/00/14/50/16/509de8df.jpg","comment_is_top":false,"comment_ctime":1624538164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624538164","product_id":100026001,"comment_content":"加入大概率事件，是开发中常用手段，例如缓存机制。项目中常用的网络请求都会有缓存。","like_count":0},{"had_liked":false,"id":297482,"user_name":"钱鹏 Allen","can_delete":false,"product_type":"c1","uid":2518863,"ip_address":"","ucode":"7E95E82C0717DA","user_header":"https://static001.geekbang.org/account/avatar/00/26/6f/4f/3cf1e9c4.jpg","comment_is_top":false,"comment_ctime":1623574651,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623574651","product_id":100026001,"comment_content":"提升计算机性能： 数量   X     工作效率<br><br>提升制程，我们常听到7nm，5nm。芯片的制作工艺越精细，单位面积我们可以放的晶体管数量越多，性能越强。<br>每个晶体管完成工作效率越高，我们的性能也会越好。但是这里面需要注意到，散热。当我们放的晶体管数量多，每个晶体管做功多的时候，其散热也多，可能会造成cpu的崩溃。<br><br>","like_count":0},{"had_liked":false,"id":297454,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1623561016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623561016","product_id":100026001,"comment_content":"加速大概率事件和流水线应该都是通过降低cpi提升性能吧  那概率预测是怎么提升性能的呢  感觉和指令数、主频、cpi都没什么关系？","like_count":0},{"had_liked":false,"id":296286,"user_name":"杰良","can_delete":false,"product_type":"c1","uid":2567349,"ip_address":"","ucode":"5DC1D1C58A4731","user_header":"https://static001.geekbang.org/account/avatar/00/27/2c/b5/10141329.jpg","comment_is_top":false,"comment_ctime":1622881646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622881646","product_id":100026001,"comment_content":"为了提升性能，大力出奇迹地无脑提升处理器运行频率，终于遇到了功耗墙。功耗飙升以及随之而来的大量发热，把频率堵在了 3.8GHz，极个别的 5GHz。于是用另一个简单粗暴的方法，就是堆处理器核，并行运算以提高吞吐量。但这个方法效果并不太好，而且会让上层软件开发变得困难。于是乎继续研究，使用协处理器加速大量密集型计算；采用流水线优化指令执行；采用分支与预测技术提升响应。","like_count":0},{"had_liked":false,"id":296284,"user_name":"杰良","can_delete":false,"product_type":"c1","uid":2567349,"ip_address":"","ucode":"5DC1D1C58A4731","user_header":"https://static001.geekbang.org/account/avatar/00/27/2c/b5/10141329.jpg","comment_is_top":false,"comment_ctime":1622881224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622881224","product_id":100026001,"comment_content":"思考题，软件开发层面的性能提升方法。<br><br>加速大概率事件：利用 Redis 等缓存常用数据，不用频繁做文件读写。<br>流水线处理：Gstreamer 框架的 pipeline 机制，多个插件流水线工作。<br>预测提前处理：读文件时操作系统一次性预先多读一些数据到内存，猜测接下来会用到。","like_count":0},{"had_liked":false,"id":294466,"user_name":"C++大雄","can_delete":false,"product_type":"c1","uid":2618734,"ip_address":"","ucode":"04473EB297C093","user_header":"https://static001.geekbang.org/account/avatar/00/27/f5/6e/55ec1ed1.jpg","comment_is_top":false,"comment_ctime":1621952161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621952161","product_id":100026001,"comment_content":"底层优化：<br>* 减分支，减少分支预测错误处罚<br>* 增强局部性，增大缓存命中率<br>* 指令级并行，充分利用EU中流水线<br><br>应用层优化：<br>* 异步预取机制<br>* 延迟加载机制<br>* 缓存机制<br>* 并行优化","like_count":0},{"had_liked":false,"id":293607,"user_name":"Bill","can_delete":false,"product_type":"c1","uid":2629315,"ip_address":"","ucode":"D5A70D393E13FA","user_header":"https://static001.geekbang.org/account/avatar/00/28/1e/c3/1f1944a7.jpg","comment_is_top":false,"comment_ctime":1621453096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621453096","product_id":100026001,"comment_content":"提高性能的三种方式：<br>1.加大概率事件： 缓存机制<br>2.通过流水线提高性能：异步加载，并行编程，视频的边缓存边播放<br>3.通过预测提高性能：网页的下一页预加载<br>","like_count":0},{"had_liked":false,"id":291753,"user_name":"吴梦","can_delete":false,"product_type":"c1","uid":2608702,"ip_address":"","ucode":"2E0EA5D8066E00","user_header":"https://static001.geekbang.org/account/avatar/00/27/ce/3e/db2d3292.jpg","comment_is_top":false,"comment_ctime":1620464067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620464067","product_id":100026001,"comment_content":"老师你好，比如我们平时电脑处于省电模式，运行速度就会比较慢，我想问能基于功耗公式解释这个吗","like_count":0},{"had_liked":false,"id":280658,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1614306983,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614306983","product_id":100026001,"comment_content":"指令重排序属于流水线提高性能优化吗？","like_count":0},{"had_liked":false,"id":280353,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1614165806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614165806","product_id":100026001,"comment_content":"挺有意思，初中学的物理知识，功耗=U2&#47;R,通过减少电压来减少功耗。","like_count":0},{"had_liked":false,"id":280352,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1614165794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614165794","product_id":100026001,"comment_content":"挺有意思，初中学的物理知识，功耗=U2&#47;R,通过减少电压来减少功耗。","like_count":0},{"had_liked":false,"id":278901,"user_name":"HahahaVal","can_delete":false,"product_type":"c1","uid":2443188,"ip_address":"","ucode":"0C7CDF9A6721D5","user_header":"https://static001.geekbang.org/account/avatar/00/25/47/b4/bda388f8.jpg","comment_is_top":false,"comment_ctime":1613452768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613452768","product_id":100026001,"comment_content":"1加速大概率事件。 缓存机制。<br>2流水线。并发编程<br>3 预测事件。预加载","like_count":0},{"had_liked":false,"id":276282,"user_name":"希言自然","can_delete":false,"product_type":"c1","uid":1736720,"ip_address":"","ucode":"8D99A82B05636B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/80/10/2406a662.jpg","comment_is_top":false,"comment_ctime":1611876599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611876599","product_id":100026001,"comment_content":"老师，您好。对于【从5MHz 主频的 8086 到 5GHz 主频的 Intel i9，CPU 的电压已经从 5V 左右下降到了1V 左右，这也是为什么我们的CPU主频提升到了1000倍...】这里的“MHz”和“GHz”相差了1000，这里中间是否还有相差10、100的单位？或者CPU时代就没有经历过中间单位的时代？谢谢啦~","like_count":0},{"had_liked":false,"id":268633,"user_name":"luck_tou","can_delete":false,"product_type":"c1","uid":1904497,"ip_address":"","ucode":"E6BACBB08C504E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKkThulMFj6MiaY8qlsmHWrlIzo1SEhwDjwpgLP2bhLYETx1f0DepRDsBdssd5dFKN35zzFUYnia1Q/132","comment_is_top":false,"comment_ctime":1608279520,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608279520","product_id":100026001,"comment_content":"从数据库架构的发展可以看到这些理念的实现。<br>1.加大概率是讲常用的数据放redis里，不去问mysql要了；<br>2.流水线就是各种分布式数据库，并行计算；<br>3.预测的话我举个例子：好比你在视频网站看过好几次一个电影的介绍页，那么就可以先把电影数据移动到离你近的数据库里，等你点开看的时候下载速度就会变快，得到更好的体验。<br><br>","like_count":0},{"had_liked":false,"id":259858,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1604871210,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1604871210","product_id":100026001,"comment_content":"茶艺师学编程<br><br>关于基恩·阿姆达尔（Gene Amdahl）<br><br>1、毫无疑问的学霸<br>在1922.11.16出生的他，在26岁获得南达科他州立大学工程物理科学学士学位，在4年后获得威斯康辛大学的理论物理博士学位<br><br>2、与IMB的“相爱相杀”<br>在取得理论物理博士学位的同年（1952年06月），阿姆达尔加入IBM。出道即巅峰，改进了IMB的701型计算机，造就了704型计算机——公司最成功的真空管计算机。后来还设计出360型计算机，尽管花时3年，消耗经费50多亿美元——美国研究原子弹也没消耗这么多，但360型计算机一问世，就是“无敌”。加上后来的370型，成为了历史上销售量最大的计算机家族。<br>阿姆达尔为IBM的领先打上了保险，确保了其20年的高枕无忧，但在提出“可超越360型的新计算机设计”被否决后，他终于彻底离开IBM，创立Amdahl公司反过来与之“开战”，这一年是1970。<br>但出来后才真正体会到做事的难处，加上美国的大萧条，阿姆达尔的公司很快陷入窘境，美国的投资者们不愿投钱。后来不得不投入日本人的怀抱，但又发现日本人用一种润物细无声的方式拿走的自己的公司，就算这样，阿姆达尔还是要与IBM决一雌雄，在1980年3月创立Trilogy公司。<br><br>3、停不下来的创业机器<br>阿姆达尔还是输给了IBM，但如同着了魔似的，他一家一家公司地创立。<br>1982年  Grid系统公司；<br>1987年 Andor系统公司；<br>1996年 商业数据服务公司（CDS），这时阿姆达尔已经74岁了。","like_count":0},{"had_liked":false,"id":259789,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1604838459,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1604838459","product_id":100026001,"comment_content":"茶艺师学编程<br><br>至少明白了，编程不能想着“以后的机器能跑起来”而不管写出来的代码运行效率。","like_count":0},{"had_liked":false,"id":257907,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1604208467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604208467","product_id":100026001,"comment_content":"发现苹果很多源码都利用到了预测来提高性能","like_count":0},{"had_liked":false,"id":255868,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1603447179,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1603447179","product_id":100026001,"comment_content":"不错不错，居然我都听懂了，尤其那几个公式，有点抽象，示例一解析，一下子清晰多了，👍","like_count":0},{"had_liked":false,"id":250048,"user_name":"余巍","can_delete":false,"product_type":"c1","uid":1995082,"ip_address":"","ucode":"B0819C42A82371","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI0eGJygV4lh6PJuotKrz1jsZcOdNiaHnUC3y5A2O3yudUQLkzOE8758icDoXlvgpytQ50ibSIc9nJmg/132","comment_is_top":false,"comment_ctime":1600915019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600915019","product_id":100026001,"comment_content":"我理解加大概率事件是缓存容量加大和热点数据缓存。预测提高性能，热点数据缓存也算，cdn也是缓存一种方式。流水线提高性能的思想是并行。注意不是并发。","like_count":0},{"had_liked":false,"id":249173,"user_name":"Tony-Messi","can_delete":false,"product_type":"c1","uid":2102357,"ip_address":"","ucode":"324D3E86D0EF6F","user_header":"","comment_is_top":false,"comment_ctime":1600493783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600493783","product_id":100026001,"comment_content":"并行之后也会减少加法运算的总次数吧？为什么说加法不受并行优化影响呢？","like_count":0},{"had_liked":false,"id":249137,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1600449949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600449949","product_id":100026001,"comment_content":"&quot;功耗 ~= 1&#47;2 ×负载电容×电压的平方×开关频率×晶体管数量&quot;<br>公式中的 &quot;负载电容&quot; 是什么 ?","like_count":0},{"had_liked":false,"id":247277,"user_name":"BugBean","can_delete":false,"product_type":"c1","uid":1834181,"ip_address":"","ucode":"B51232281AD9BC","user_header":"https://static001.geekbang.org/account/avatar/00/1b/fc/c5/ff8b770e.jpg","comment_is_top":false,"comment_ctime":1599645078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599645078","product_id":100026001,"comment_content":"小结:<br>1.通过增加晶体管可以提高CPU的主频,从而减少时钟周期时间来达到提高性能的目的<br>2.主频不能无限地增加,因为晶体管越多,功耗越大,发热就越严重,业界能达到的最高主频在3.8GHz左右<br>3.可以采用并行优化来提高CPU的吞吐量以达到提升性能的目的,具体做法是增加CPU的核数<br>4.并行优化要遵循阿姆达尔定律:优化后的执行时间=受影响的执行时间&#47;加速倍数+不受影响的执行时间,以及计算任务要可拆分且可同时进行","like_count":0},{"had_liked":false,"id":246782,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1599476901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599476901","product_id":100026001,"comment_content":"<br>加速大概率事件：使用缓存提升访问速度；<br>通过流水线提高性能：将任务分解并使用多线程并行处理<br>通过预测提高性能：这边不懂","like_count":0},{"had_liked":false,"id":243962,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1598341599,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598341599","product_id":100026001,"comment_content":" 1，作者讲了什么？<br>    1，CPU的极限：功耗，以及对应的曲线解决方案<br><br>2，作者是怎么把这事给讲明白的?<br>    1，首先，由上篇推导公式   CPU执行耗时=指令数 X CPI X clock cycle time。引出性能优化方向 ：提升主频 <br>    2，通过将芯片主频发展历史，讲到一味的提升主频是绝路：因为功耗<br>    3，通过工厂类比说明：集成电路，制程，功耗，阿姆达尔定律<br><br>3，为了讲明白，作者讲了哪些要点？有哪些亮点？<br>    1，亮点1：芯片的学名叫集成电路板，提升性能方向是增大集成电路的数量，缩小电路的体积<br>    2，亮点2：降低功耗，要通过降低电压<br>    3，要点1：CPU执行时间 = 指令数 X CPI X Clock Cycle Time<br>    4，要点2：CPU功耗= 1&#47;2  X  负载电容 X 电压平方 X 开关频率 X 晶体管数量<br>    5，要点3：通过并行提高性能的 阿姆达尔定律（无法更快，那就尽量更多）<br>    6，要点4：阿姆达尔定律条件：1，需要进行计算的问题，本身可以分为几个可以并行计算的任务 2，需要分解的问题，最终结果可以汇总，3，汇总阶段是没有办法并行进行，只能按顺序来<br><br>    7，要点5：原则性的性能提升方法：<br>                1，“摩尔定律”，<br>                2“并行计算”，<br>                3，加速大概率事件<br>                4，通过流水线提升<br>                5，通过预测提高<br><br>4，对于作者所讲，我有哪些发散性思考？<br>1看到留言区有不少人 对流水线方案发散思考了，这一点也是值得我学习的，流水线化，在设计模式中也可以找到理论已经：职责单一<br><br>5，在将来的哪些场景中，我能够使用它？<br><br>作者四章解决了计算机的基本组成：硬件组成，冯诺依曼体系，性能，功耗，CPU基本组成<br><br>6，留言区收获<br>    1，增加晶体管数的好处：<br>            1，可以通过设计更为复杂的电路，从而减少所需要的指令数，将需要软件完成的事情改由硬件完成<br>            2，降低电压的难处：任何一种材料都是有电阻的，电压过低电路就无法连通<br>            3，光速3 *10的八次方，看似很大，但到纳秒也就是1纳秒只能走30厘米的距离<br>","like_count":0},{"had_liked":false,"id":233894,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1594499295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594499295","product_id":100026001,"comment_content":"摩尔定律和并行优化是在从开源角度优化。前者提高个体的速度，后者增加个体。加速大概率事件，流水线，以及预测，则是从节流的角度优化。加速大概率事件是从宏观上更加合理的分配计算资源，预测则是从微观上选择下一步的最优策略，流水线是在微观上再建立并行机制，充分挖掘硬件潜能，减少浪费。","like_count":0},{"had_liked":false,"id":231828,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1593782292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593782292","product_id":100026001,"comment_content":"加速概率，缓存没毛病，JNI，java中是用二八定律，百分二十的代码执行时间为百分之八十，那就一次编译，后续重复运行，无需在编译，java是解释执行，如果解释一条执行一条，对于循环类的代码，太费时，属于大概率，但是你说的单例并不是，单例只是保证全局唯一的，本意并不是复用，java中享元设计模式，可以当做大概率事件的例子，这种设计模式就是为了服用重复代码，jdk源码多次用了这种模式，比如基本数据类型的包装类，从代码的角度考虑，优化性能；<br>通过流水线，并发可以算一个，但是并发有点牵强，其实这个主要考虑拆分和流水作业，一条高级语言可以往往并不代表一条cpu指令，可能是多条，比如java中的new操作，一行new代码，是分成三行cpu指令执行，这三个指令还被重排序了，就是为了性能，排序后更加快，相当于流水作业，谁先谁后更快些，这个重排序的可以结合，双重检验单例模式为什么不是线程安全的来考虑；<br>第三，预测，浏览器的前进后退，可以说是用到了栈的数据结构，利用俩个栈实现前进后退，其实也是相当于缓存，存起来，下次无需访问，本质并不能算预测，预测的例子，最典型的就是局部性原理，要说局部性原理，必然想到mysql，查询一行数据，会把这行数据所在的这一页数据都加到内存，访问这条数据，那么和它相邻的都有可能被访问，所以为了性能，都加进去，这里的一页数据，要从b+索引说起，这一页都是索引顺序排列的叶子结点。","like_count":0},{"had_liked":false,"id":229332,"user_name":"RheWong","can_delete":false,"product_type":"c1","uid":1932623,"ip_address":"","ucode":"82333BA76E56A3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/7d/4f/33b7f15a.jpg","comment_is_top":false,"comment_ctime":1592967146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592967146","product_id":100026001,"comment_content":"功耗 ~= 1&#47;2 ×负载电容×电压的平方×开关频率×晶体管数量  ，这个公式不太理解,是否可以结合物理公式推导下呢","like_count":0},{"had_liked":false,"id":228451,"user_name":"lupguo","can_delete":false,"product_type":"c1","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1592698510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592698510","product_id":100026001,"comment_content":"从cpu性能优化对比程序设计考虑点：<br>1、提升单个程序的执行速度，物理有摩尔定律限制，同时还有功耗和散热（算法、iot重点方向）<br>2、利用并行提升性能，有阿姆大定律限制（思考map分片执行同时，考虑reudce的合并时间）<br>3、利用概率事件（多级缓存热点数据，cdn，文件，memory，buffer、cache等）<br>4、利用流水线提升性能（kiss原则、切换和保存的内容减少，开销降低）<br>5、预测提高性能（可以理解为先知行为，比如活动大促，提前预热缓存等）","like_count":0},{"had_liked":false,"id":227478,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1592388954,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592388954","product_id":100026001,"comment_content":"加速大概率事件的实例有：搜索引擎给所有网页内容的关键字事先做好索引；地图导航软件提前存好或算好店铺到最近路口的距离。<br><br>用流水线加速的实例有：用GPU来异步计算；用多线程来破解密码。<br><br>用预测来加速的实例有：linux的io预读<br><br>","like_count":0},{"had_liked":false,"id":219357,"user_name":"孙瑜","can_delete":false,"product_type":"c1","uid":1808713,"ip_address":"","ucode":"D57C35FF311B8F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/99/49/43bd37b4.jpg","comment_is_top":false,"comment_ctime":1590016068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590016068","product_id":100026001,"comment_content":"老师好，多核cpu 芯片体积会变的更大吧，散热和功耗问题相比增加单核晶体管并没有改善吧","like_count":0},{"had_liked":false,"id":219169,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1589960722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589960722","product_id":100026001,"comment_content":"本节课的学习记录：<br>提升性能，提升CPU的主频是最好的方式，更高的主频，可以在单位时间内执行更多的指令。<br><br>但是主频是不能无限制提高的，因为受到功耗的影响。主频太高了，需要的功率更高，而在许多移动和设备中，供电的电源不能做太多，这就需要取舍了。<br><br>那么除了功耗，还可以从哪些方面提升性能呢？<br>加速大概率事件：针对某个任务中，最耗时的部分进行优化。比如缓存，JVM对热点代码的即时编译。<br>通过流水线提高性能：任务拆分，一个执行一部分。比如归并排序，并发。<br>通过预测提高性能：比如，在数据库查询中，你只查询一条记录，而数据库返回的是一页的数据，这一页包括多条记录，它觉得你可能下一条记录也需要。","like_count":0},{"had_liked":false,"id":201718,"user_name":"King-ZJ","can_delete":false,"product_type":"c1","uid":1915385,"ip_address":"","ucode":"7448A4BBB5A118","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/f9/b946719a.jpg","comment_is_top":false,"comment_ctime":1585824781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585824781","product_id":100026001,"comment_content":"通过对整个体系有一下大概的了解后，在学习中，也要做笔记，梳理思路，不断总结和输出，更好的迭代。调整好心态，一直在路上。","like_count":0},{"had_liked":false,"id":198818,"user_name":"Golfe","can_delete":false,"product_type":"c1","uid":1236039,"ip_address":"","ucode":"5AA0A9C479C264","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/47/69891f23.jpg","comment_is_top":false,"comment_ctime":1585469477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585469477","product_id":100026001,"comment_content":"超线程具体是什么个情况。","like_count":0},{"had_liked":false,"id":198500,"user_name":"三生","can_delete":false,"product_type":"c1","uid":1606669,"ip_address":"","ucode":"1DE1A2693A5E33","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/0d/4e289b94.jpg","comment_is_top":false,"comment_ctime":1585453953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585453953","product_id":100026001,"comment_content":"加大概率：缓存，预加载，减少慢io，避免cpu等待<br>流水线：分部操作，懒加载，精简指令集，其实就是低耦合高内聚，避免做过多的事情<br>加大预测：操作系统高速缓存中的内存表，缓存，想不出了……","like_count":0},{"had_liked":false,"id":197362,"user_name":"WENMURAN","can_delete":false,"product_type":"c1","uid":1915404,"ip_address":"","ucode":"5D1CE8B41937C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXNhbTULKiakib8lYXrvGF2zPwfedooBzC2EtSv1nt1MwV1KUvTkcJrvCBFvcdwJicnr3OEXnk9GUCg/132","comment_is_top":false,"comment_ctime":1585371261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585371261","product_id":100026001,"comment_content":"1.提升CPU性能的方式：增加晶体管的数量（提升制程，将晶体管做小，从28nm到7nm），增加晶体管开关频率，并行（多核）。<br>但同时，会带来耗电和散热的问题。<br>2.CPU的瓶颈：功耗= 1&#47;2*负载电容*电压的平方*开关频率*晶体管数量<br>提升频率和数量的同时，功耗必然上升，方法是降低电压<br>3.阿姆达尔定律：用并行方式提升性能，<br>优化后的执行时间=受优化影响的时间&#47;并行数 + 不受影响的时间<br>4.提升性能的其他方法：<br>加速大概率事件：舍弃部分功能，重点突破<br>流水线：精细分工<br>预测：提前做一定会做的事","like_count":0},{"had_liked":false,"id":194594,"user_name":"Leolee","can_delete":false,"product_type":"c1","uid":1928428,"ip_address":"","ucode":"2EC31B0AE5B03D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/8SdpYbicwXVXt0fIN7L0f2TSGIScQIhWXT7vTze9GHBsjTvDyyQW9KEPsKBpRNs4anV61oF59BZqHf586b3o4ibw/132","comment_is_top":false,"comment_ctime":1585082027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585082027","product_id":100026001,"comment_content":"这个计算机组成原理课的知识密度真的是高啊！而且让自己大脑里增加了非常多的相关概念咧！这门课买得值！看到留言的时候，非常想自己也搭建一个博客，这样就能自己做自己的作业！三月份荒废了比较多的学习时间，是要重新调整了！","like_count":0},{"had_liked":false,"id":191637,"user_name":"邹友","can_delete":false,"product_type":"c1","uid":1919425,"ip_address":"","ucode":"3ACEE22DBFEE86","user_header":"https://static001.geekbang.org/account/avatar/00/1d/49/c1/5a77c210.jpg","comment_is_top":false,"comment_ctime":1584786240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584786240","product_id":100026001,"comment_content":"加速大概率，常用到的就是缓存，既然你很可能之后还会要这个数据，那么就先留着。另一个想到是指针算不算，考虑到一份数据多次传递使用，直接调用指针避免不必要的复制<br>流水线：想到是异步编程，将同步的阻塞程序按功能拆分掉<br>预测：预测其实初给我的感觉很像，貌似都是为下一步的操作提前做准备。提到数据循环，for常做的i++是否算是预测。数据库水平分表是否算是预测，这样一来垂直分表像是加速大概率了","like_count":0},{"had_liked":false,"id":187239,"user_name":"Zeal","can_delete":false,"product_type":"c1","uid":1898857,"ip_address":"","ucode":"327D516A1D0F0E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f9/69/384e33e6.jpg","comment_is_top":false,"comment_ctime":1584067653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584067653","product_id":100026001,"comment_content":"加大概率：相关性；<br>流水线：分解任务并行处理；<br>预测：学习之前的经验。","like_count":0},{"had_liked":false,"id":187235,"user_name":"Zeal","can_delete":false,"product_type":"c1","uid":1898857,"ip_address":"","ucode":"327D516A1D0F0E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f9/69/384e33e6.jpg","comment_is_top":false,"comment_ctime":1584066962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584066962","product_id":100026001,"comment_content":"步伐快，一定能赢？<br>想一下两人三足（或者三人四足……），节奏一致，才叫快呀～","like_count":0},{"had_liked":false,"id":184715,"user_name":"焰火","can_delete":false,"product_type":"c1","uid":1244606,"ip_address":"","ucode":"D3353B386DE3B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/be/079c78c7.jpg","comment_is_top":false,"comment_ctime":1583390222,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1583390222","product_id":100026001,"comment_content":"有一个地方没有明白：<br>主频的提升，是靠提升“制程”么？  我记得 晶振 也是决定CPU频率的一个因素呀？","like_count":0},{"had_liked":false,"id":178041,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1581577214,"is_pvip":false,"replies":[{"id":"69418","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1581839586,"ip_address":"","comment_id":178041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581577214","product_id":100026001,"comment_content":"思考题<br>加速大概率事件<br>一开始写程序一般是怎么简单怎么来，遇到性能问题，就用工具找瓶颈，也就是哪些函数最耗时，这些函数可以看作大概率能提高性能的点，然后优化，通常是用更复杂的实现去换效率。<br>最能体现流水线思想的是协程，就是把任务分为CPU相关和IO相关，然后并行执行。<br>预测优化体现在缓存实现上，例如，把服务端得到的数据存在客户端，并预测数据会保持有效一段时间来提升性能。","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483642,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581839586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175897,"user_name":"@%初%@","can_delete":false,"product_type":"c1","uid":1053509,"ip_address":"","ucode":"2B8A6134675ED7","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","comment_is_top":false,"comment_ctime":1580881490,"is_pvip":true,"replies":[{"id":"68646","content":"👍加油","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1581231889,"ip_address":"","comment_id":175897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1580881490","product_id":100026001,"comment_content":"订阅了好久，一直压箱底，今天打开学习下，老师讲的几个性能提升的方法，是程序性能优化中的一般套路，通过并行计算，任务拆分，提高响应时间，通过热点数据预测，三级缓存，等手段，增加程序运行效率，同时从硬件层面也解释了，性能的瓶颈在哪里，一般怎么去优化。。。继续打卡。。。。。。","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482945,"discussion_content":"👍加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581231889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172383,"user_name":"Geek_embeded","can_delete":false,"product_type":"c1","uid":1764854,"ip_address":"","ucode":"1ABFAA34E983F5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ed/f6/4a083c7e.jpg","comment_is_top":false,"comment_ctime":1579165309,"is_pvip":false,"replies":[{"id":"68069","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580630798,"ip_address":"","comment_id":172383,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579165309","product_id":100026001,"comment_content":"我是单片机工程师，单片机里面有好几种程序执行的逻辑方式，最简单的就while(1)大循环，稍微复杂一点的就是用中断或者是rtos，后者可以使得单片机虽然仍是一条条地执行指令却能在宏观时间上看起来像并行执行一样，这也是并行程序设计的一个思想，在软件上也增加运算能力","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481719,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580630798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169273,"user_name":"许先森","can_delete":false,"product_type":"c1","uid":1795371,"ip_address":"","ucode":"1F42D4A6B5C6AF","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","comment_is_top":false,"comment_ctime":1578303356,"is_pvip":false,"replies":[{"id":"68107","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580636565,"ip_address":"","comment_id":169273,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578303356","product_id":100026001,"comment_content":"打卡：<br>1、冯诺伊曼结构：运算器、控制器、存储器、输入输出。<br>和高级编程语言里面一个函数方法类似：输入输出就相当于出入参，运算器就是方法中的各种计算，控制器就相当于ifelse,break,跳转别的方法等，存储器体现不出来。<br>2、设计和使用四大组件要考虑的计算机两个核心指标是：性能和功耗。<br>3、程序的CPU执行时间=指令数（程序需要多少条指令）x CPI（指令需要多少个基本操作）x Clock Cycle Time(执行一个基本操作的耗时，即主频表示的时钟周期时间) 4、提升CPU性能：提升主频，增加更多CPU核心数量、并行、加速大概率事件（缓存）、流水线、预测（预加载）","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480488,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580636565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169158,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1578281511,"is_pvip":false,"replies":[{"id":"68095","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580634198,"ip_address":"","comment_id":169158,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1578281511","product_id":100026001,"comment_content":"像浏览着的消息队列，应该就是‘通过流水线提高性能’, 像link 标签的 dns-prefetch ，还有redis等各种缓存方法都是‘通过预测提高性能’的体现。","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480441,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580634198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169151,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1578280826,"is_pvip":false,"replies":[{"id":"68096","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580634209,"ip_address":"","comment_id":169151,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1578280826","product_id":100026001,"comment_content":"JavaScript中垃圾回收机制的对象晋升策略，V8 的 即时编译（JIT），应该都是‘加速大概率事件’性能提升方法。","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480439,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580634209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157253,"user_name":"lyk😂","can_delete":false,"product_type":"c1","uid":1210000,"ip_address":"","ucode":"CE53BE7838EF7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/76/90/9e9e241d.jpg","comment_is_top":false,"comment_ctime":1575098266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575098266","product_id":100026001,"comment_content":"用多核的方式不也是会导致功耗增加吗，那跟用增加频率增加晶体管不是一样的问题吗","like_count":0},{"had_liked":false,"id":156565,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574912985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574912985","product_id":100026001,"comment_content":"从制程、主频、电压、吞吐、并行的角度分别去提升性能、降低功耗","like_count":0},{"had_liked":false,"id":156385,"user_name":"润豪","can_delete":false,"product_type":"c1","uid":1125122,"ip_address":"","ucode":"0946575790EFAF","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/02/7ef138a0.jpg","comment_is_top":false,"comment_ctime":1574864742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574864742","product_id":100026001,"comment_content":"有趣","like_count":0},{"had_liked":false,"id":150531,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1573550520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573550520","product_id":100026001,"comment_content":"不知道软件系统里面的异步化思路算不算是通过预测提高性能的一种变形？","like_count":0},{"had_liked":false,"id":149340,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1573197597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573197597","product_id":100026001,"comment_content":"为什么不增加cup的面积，这样晶体管的个数也可以增加而不至于运行时过热","like_count":0},{"had_liked":false,"id":147453,"user_name":"慧有未来จุ๊บ","can_delete":false,"product_type":"c1","uid":1481763,"ip_address":"","ucode":"5EC1966D10D65A","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/23/af44efd8.jpg","comment_is_top":false,"comment_ctime":1572864681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572864681","product_id":100026001,"comment_content":"老师，为什么增加更多的 CPU 核心数量，通过并行来提升性能，会遇到相应的瓶颈？？？是那些瓶颈呢？<br>散热吗？耗电吗？","like_count":0},{"had_liked":false,"id":147447,"user_name":"慧有未来จุ๊บ","can_delete":false,"product_type":"c1","uid":1481763,"ip_address":"","ucode":"5EC1966D10D65A","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/23/af44efd8.jpg","comment_is_top":false,"comment_ctime":1572864462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572864462","product_id":100026001,"comment_content":"老师，这句话“在“汇总”这个阶段，是没有办法并行进行的，还是得顺序执行，一步一步来”有点疑惑。因为我觉得汇总可以并行执行的，比如T1+T2   CPU1执行，T3+T4CPU2执行。这样不可以吗","like_count":0},{"had_liked":false,"id":145073,"user_name":"Benjamin","can_delete":false,"product_type":"c1","uid":1082014,"ip_address":"","ucode":"7837F6E47546E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/9e/bb6f7229.jpg","comment_is_top":false,"comment_ctime":1572180614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572180614","product_id":100026001,"comment_content":"对这两讲做个总结吧<br>程序的CPU执行时间 = 指令数 × CPI × 时钟周期时间<br>在硬件层面有两种方式提高性能，第一种方式是提高主频，对应上面公式的降低时钟周期时间；第二种方式是增加晶体管的数量，能使CPU支持的指令变多，完成同样的功能需要的指令数变少，对应上面公式减少指令数。<br>但是由于功耗原因，这两种方式都接近天花板，很难再提升，所以工程师们将目标从提升响应时间转向了提高吞吐率，即由以前的单核CPU改为多核CPU，提高CPU的并发处理能力。但是，由于阿姆达尔定律，并行计算能优化的性能也有天花板。<br>所以不管是提升主频、增加晶体管数据还是增加CPU核数，都会遇到相应的性能瓶颈。仅仅通过堆硬件这种“粗暴”的方式已经不能满足当前我们对于程序性能的期望了。<br>工程师们只能另辟蹊径从其他方面入手，在计算机组成层面，还有如下几个原则可以提升性能。1、加速大概率事件，2、通过流水线提高性能，3、通过预测提高性能。","like_count":0},{"had_liked":false,"id":144047,"user_name":"行酒","can_delete":false,"product_type":"c1","uid":1443466,"ip_address":"","ucode":"11560A48860627","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIHOMTibTu23Ap1AIcHrrI8icpjZiclKL9KrPTD5QLNySTbAbqN2oM5H5od1zK6KAUFvfTBA1KuI4Eog/132","comment_is_top":false,"comment_ctime":1571832193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571832193","product_id":100026001,"comment_content":"1，热点数据缓存<br>2. 并发编程，多线程<br>3. jvm 分支预测，jit 实时编译","like_count":0},{"had_liked":false,"id":140909,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1571075083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571075083","product_id":100026001,"comment_content":"老师您好，有个问题请教下，提示主频会增加功耗，所以改成多核并行提升吞吐率，多核不也是会增加功耗的吗？这种方式跟提升主频有什么区别呢","like_count":0},{"had_liked":false,"id":140553,"user_name":"心浮天空","can_delete":false,"product_type":"c1","uid":1051609,"ip_address":"","ucode":"3B2D0E6CC51EE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/d9/3328dd12.jpg","comment_is_top":false,"comment_ctime":1570984046,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1570984046","product_id":100026001,"comment_content":"关于流水线那部分还个疑问.<br>文中提到的 &quot;我们把 CPU 指令执行的过程进行拆分，细化运行，也是现代 ...&quot;, 是指单条指令再次拆分吗？如果是单条指令可以再次拆分，是所有的指令都可以拆分，还是只有部分复杂指令可以拆分？那么这种流水线提高性能的方式在ARM这种简单指令集架构中是否适用？","like_count":0},{"had_liked":false,"id":140391,"user_name":"LYy","can_delete":false,"product_type":"c1","uid":1102062,"ip_address":"","ucode":"8D5C39B9531E71","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","comment_is_top":false,"comment_ctime":1570926354,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1570926354","product_id":100026001,"comment_content":"主频提升和并行提升的方案 在软件设计方面对应了软件的纵向扩展和横向扩展<br>例如<br>应用在单机上增加worker数、占用更多的内存即纵向扩展;<br>应用部署在多机上组成集群，使用负载均衡器进行任务分发，即横向扩展。<br>","like_count":0},{"had_liked":false,"id":139432,"user_name":"westfall","can_delete":false,"product_type":"c1","uid":1632773,"ip_address":"","ucode":"F3F5CB7DF695FC","user_header":"https://static001.geekbang.org/account/avatar/00/18/ea/05/b164dc15.jpg","comment_is_top":false,"comment_ctime":1570631760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570631760","product_id":100026001,"comment_content":"请问怎么理解CPU核心，以及多核CPU怎么知道要不要并行执行指令？","like_count":0},{"had_liked":false,"id":133685,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1568635967,"is_pvip":false,"replies":[{"id":"52636","content":"👍作业内容写得很好","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569658472,"ip_address":"","comment_id":133685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568635967","product_id":100026001,"comment_content":"---总结---<br>从CPU内部看增加性能的手段：增加单位面积晶体管数（可提升流水线的并行度等来减少CPI）、提升晶体管的操作速度（提高主频）<br>CPU性能提升带来的问题：功耗<br>影响功耗的因素：负载电容、电压、开关频率、晶体管数量<br>从CPU外部看增加性能的手段：并行化<br>---作业---<br>加速大概率事件：缓存（CPU缓存、应用级缓存、浏览器缓存等）、JIT、为数据库常用列建立索引、冷热分离<br>通过流水线提高性能：类似airflow的工作流引擎将任务编排成DAG图来提高性能、并发编程中对存在数据依赖的任务的编排并行化、存在服务依赖的微服务系统编排<br>通过预测提高性能：数据库中的聚簇索引","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467473,"discussion_content":"👍作业内容写得很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569658472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123861,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1565773443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565773443","product_id":100026001,"comment_content":"系统遇到性能瓶颈需要优化的时候都是属于这个吧<br>读mysql太慢，在中间加一层缓存；写mysql压力太大，引入消息队列异步写<br>2、流水线<br>多进程、多线程<br>3、预测<br>数据缓存<br>","like_count":0},{"had_liked":false,"id":123853,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1565772021,"is_pvip":false,"replies":[{"id":"52690","content":"👍 看完《深入理解计算机系统》，计算机系统的基本功就练扎实了。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569663609,"ip_address":"","comment_id":123853,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565772021","product_id":100026001,"comment_content":"看过《深入理解计算机系统》再来看专栏，有种在复习的感觉😃","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462845,"discussion_content":"👍 看完《深入理解计算机系统》，计算机系统的基本功就练扎实了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569663609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108966,"user_name":"Geek_c786c7","can_delete":false,"product_type":"c1","uid":1075680,"ip_address":"","ucode":"611B4C47A9F51A","user_header":"https://static001.geekbang.org/account/avatar/00/10/69/e0/f592862f.jpg","comment_is_top":false,"comment_ctime":1561942760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561942760","product_id":100026001,"comment_content":"懒加载是不是属于预测了？","like_count":0},{"had_liked":false,"id":106820,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1561390377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561390377","product_id":100026001,"comment_content":"软件层面解决这个问题的，毫无疑问就是hadoop生态圈工具了，最早mapreduce的诞生就是一种分而治之的思路，但是发现持久化太耗费时间了，那就在内存中运行。然后为了进一步提高速度，还提出了pipeline等等。","like_count":0},{"had_liked":false,"id":105496,"user_name":"魂斗罗丶","can_delete":false,"product_type":"c1","uid":1396945,"ip_address":"","ucode":"6BEA5CD3CCC2B7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epaH1gHotWQukHnF2QtT2oK9hGvyLfSaKSzuC9XKH5aSWZj2KNrxYGJeNeVzIeAibzypibsmeicppGvA/132","comment_is_top":false,"comment_ctime":1561015121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561015121","product_id":100026001,"comment_content":"软件开发层面，有用到过类似的思路来解决性能问题吗?<br>      我认为：软件开发层面解决问题有两个人前提，<br>                  1.得理解自己用到得是什么数据结构<br>                  2.不同数据结构在cpu层面访问数据得速度<br>暂时只想到这么多～～<br>老师再补充一哈～～～～","like_count":0},{"had_liked":false,"id":103448,"user_name":"阿燦","can_delete":false,"product_type":"c1","uid":1478314,"ip_address":"","ucode":"E2ECEC652D41E3","user_header":"https://static001.geekbang.org/account/avatar/00/16/8e/aa/3d9ed2ff.jpg","comment_is_top":false,"comment_ctime":1560437241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560437241","product_id":100026001,"comment_content":"如果研究出常温超导体，并能够应用于CPU集成电路的制作，又可以在硬件层面上大幅度提高性能了","like_count":0},{"had_liked":false,"id":103290,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1560409972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560409972","product_id":100026001,"comment_content":"软件开发层面就是要考虑程序算法的执行效率，一般会选择时间复杂度较低的代码实现（复杂度分析），而且编译器也会通过优化选项，来减少编译后代码的指令数~~","like_count":0},{"had_liked":false,"id":97246,"user_name":"ginger","can_delete":false,"product_type":"c1","uid":1321670,"ip_address":"","ucode":"73892EB5DDCE66","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/c6/8646048e.jpg","comment_is_top":false,"comment_ctime":1558619556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558619556","product_id":100026001,"comment_content":"a:<br>1.主频瓶颈:<br>\t虽然晶体管数量能够增加主频,但是晶体管越小,主频应该也越难以控制<br>\t再加之两者都是功耗的乘法计算因子,所以晶体管几乎不能继续优化来提升主频.<br>\t<br>2.功耗瓶颈:<br>\t功耗太大必然带来耗电量,温度,噪音,稳定性等很多方面的挑战,因此功耗是需要约底约好的<br>所以这里1.2两点已经矛盾,而很多计算机厂商,都选择了降低电压来降低功耗.<br><br>b:<br>cpu工程师们,一开始疯狂提升主频,来达到cpu性能优化,当晶体管和通信面积已经不能满足主频优化的时候,工程师们选择为cpu搭建集群,同时计算了集群的优化瓶颈(这里我简单理解为无限接近不受影响的时间),然后工程师们坚持理想,目光最后瞄准了电压,毕竟功耗和电压的平方是正比的,电压的优化带来的收益相较于其他更加直观.也就出现了电压降低20被的微软超极本.<br><br>c:<br>看来GPU并不是CPU那样的一层层封装简单算数运算的(这个说法应该不准确.)那么计算机继续发展,会不会是cpu,gpu,tpu更过的pu来处理多种不同的算数方式.<br>\t另一个疑问是,GPU最底层,是数字电路来处理简单运算吗,如果是,那么GPU相比CPU在计算向量,矩阵时候的优势是那些,会是像人工分析矩阵那样子转换成别的算法计算吗.<br><br>d:<br>流水线可不可以理解为将任务原子化,像我们代码的的耦合似的.<br><br>e:<br>预测提高性能,可不可以先简单理解为:我的一行代码执行之初,我就在脑海里边去想了如果结果是1,我要干啥,如果结果是2我要干啥,比如检查bug时候,一个命令下去,我再结果出来之前想好,哪种结果对应的bug位置在哪里种种.<br><br>f:<br>作为一个初级开发人员,我在软件开发中思考过的性能包括和数据库交互时候,我是选择一次交互拿来了数据之后,让服务器cpu去处理,还是我设计好了交互次数,每次取不同的数据,再交给cpu处理;<br>或者和数据库交互时候,我是让交互次数多一点还是让IO处理数据多一点.<br>如果现在让我基于课程中的点来想,我觉得,缓存是必须优先考虑的(加速大概率事件),还有连接池应该也属于这里;有些时候低耦合也是性能提升的一个方式,处理一些数据时候,尽量少的让多于的数据参与进来;预测来提升性能嘛,我觉得将数据,在数据库层面,用宽表存储,应该也能算这一点吧...<br><br>忘指正,嘻嘻.","like_count":0},{"had_liked":false,"id":96146,"user_name":"Yoooooo","can_delete":false,"product_type":"c1","uid":1527593,"ip_address":"","ucode":"FAD5FC2CD8CDC9","user_header":"https://static001.geekbang.org/account/avatar/00/17/4f/29/59f681b7.jpg","comment_is_top":false,"comment_ctime":1558345060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558345060","product_id":100026001,"comment_content":"常见的思路比如多线程增加并发量，上线分布式计算，操作分离增加计算速度。","like_count":0},{"had_liked":false,"id":93863,"user_name":"静静的拼搏","can_delete":false,"product_type":"c1","uid":1512645,"ip_address":"","ucode":"46181782824193","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c5/87631334.jpg","comment_is_top":false,"comment_ctime":1557644128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557644128","product_id":100026001,"comment_content":"LongAdder是java1.8juc包提供的计数器工具类，将计数分为多个cell分开计算，最后将结果汇总sum，类似cpu的流水线工作机制，以上为流水线例子说明","like_count":0},{"had_liked":false,"id":93653,"user_name":"萝卜祥子","can_delete":false,"product_type":"c1","uid":1476139,"ip_address":"","ucode":"367F4E644D4656","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9z4VJwCSPPI0Zng5OmbC0EX7TYvqiconRv4GolDKxWLK97GLvvoroqTgkHlIlLyZZTVlRRiaZkCeTlthNDYauhA/132","comment_is_top":false,"comment_ctime":1557546109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557546109","product_id":100026001,"comment_content":"对于并行和并发的理解：<br>并发是指：ｃｐｕ具有接受处理多个任务的能力，是可以在任务之间进行切换，并且可以切换到原先的任务。<br>并行是指：利用并发的这种特性，实现同时执行不同任务的能力。<br>不知道这样理解是不是正确，老师能解答一下吗？还有网上的资料说并发是以相同时间间隔处理，这个是指任务调度中的时间片？","like_count":0},{"had_liked":false,"id":92458,"user_name":"李心宇🦉","can_delete":false,"product_type":"c1","uid":1208306,"ip_address":"","ucode":"C381CA80170D5B","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/f2/1f77b0bd.jpg","comment_is_top":false,"comment_ctime":1557277491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557277491","product_id":100026001,"comment_content":"预测 冒险: 热点内容加缓存","like_count":0},{"had_liked":false,"id":92290,"user_name":"*0","can_delete":false,"product_type":"c1","uid":1122051,"ip_address":"","ucode":"A6244D179F406B","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/03/e5ed9d80.jpg","comment_is_top":false,"comment_ctime":1557221774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557221774","product_id":100026001,"comment_content":"在循环中不发生变化的变量赋值可以提到循环外面进行；还有在集合类中存储对象时不直接存储对象，而是存储类的路径，需要时通过反射动态加载创建对象","like_count":0},{"had_liked":false,"id":91889,"user_name":"大熊","can_delete":false,"product_type":"c1","uid":1008951,"ip_address":"","ucode":"D7858E9DA87B5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/37/56c492d3.jpg","comment_is_top":false,"comment_ctime":1557128229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557128229","product_id":100026001,"comment_content":"又再次仔细阅读专栏和资料，确实是我一开始的理解过于粗浅，只停留在了字面意思的感觉。整理一下我重新做这个思考题。","like_count":0}]}