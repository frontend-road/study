{"id":385358,"title":"10｜函数组件设计模式：如何应对复杂条件渲染场景？","content":"<p>你好，我是王沛。今天我们来聊聊函数组件中的设计模式。</p><p>所谓设计模式，就是<strong>针对特定场景，提供一种公认的最佳实践</strong>。在前面的课程中，我们已经提到了不少模式，比如保证状态的唯一数据源，语义化的拆分复杂组件，等等。熟练掌握这些模式，可以让我们的代码更加简洁直观。</p><p>那么今天这节课我会介绍另外两个模式：</p><ol>\n<li>一个和 Hooks 相关，用于解决 Hooks 无法在条件语句中执行带来的一些难题；</li>\n<li>另一个则是经典的 render props 模式，用于实现 UI 逻辑的重用。</li>\n</ol><h2>容器模式：实现按条件执行 Hooks</h2><p>第2讲我们介绍了 Hooks 的一个重要规则，即：<strong>Hooks 必须在顶层作用域调用</strong>，而不能放在条件判断、循环等语句中，同时也不能在可能的 return 语句之后执行。换句话说，Hooks 必须按顺序被执行到。</p><p>这个规则存在的原因就在于，<strong>React 需要在函数组件内部维护所用到的 Hooks 的状态</strong>，所以我们无法在条件语句中使用 Hooks，这因而会给我们实现业务逻辑带来一定的局限。</p><p>比如说，对于一个对话框组件，通过 visible 属性来控制是否显示。那么在 visible 为 false 的时候，其实不应该执行任何对话框内部的逻辑，因为还没展示在 UI 上。</p><p>需要注意，只有在 visible 为true 的时候才应该去执行业务逻辑，展现数据。那么我们期望的代码可能是下面的方式：</p><!-- [[[read_end]]] --><pre><code>import { Modal } from &quot;antd&quot;;\nimport useUser from &quot;../09/useUser&quot;;\n\nfunction UserInfoModal({ visible, userId, ...rest }) {\n  // 当 visible 为 false 时，不渲染任何内容\n  if (!visible) return null;\n  // 这一行 Hook 在可能的 return 之后，会报错！\n  const { data, loading, error } = useUser(userId);\n\n  return (\n    &lt;Modal visible={visible} {...rest}&gt;\n      {/* 对话框的内容 */}\n    &lt;/Modal&gt;\n  );\n};\n</code></pre><p>可以看到，我们期望在对话框隐藏时通过返回 null 不去渲染任何内容，这个逻辑看上去非常自然直观。</p><p>但是呢，它却通不过编译，因为在 return 语句之后使用了 useUser 这个 Hook。所以在你的编辑器配置了 React Hooks 的 ESLint 插件之后，会给出下面的错误提示：</p><p><img src=\"https://static001.geekbang.org/resource/image/49/fb/497d0d88e18a8a75237e7c22c2b9b3fb.png?wh=1328x562\" alt=\"\"></p><p>可以看到，因为 Hooks 使用规则的存在，使得有时某些逻辑无法直观地实现。换句话说，Hooks 在带来众多好处的同时，也或多或少带来了一些局限。因此，我们需要用一个间接的模式来实现这样的逻辑，可以称之为<strong>容器模式</strong>。</p><p>具体做法就是<strong>把条件判断的结果放到两个组件之中，确保真正 render UI 的组件收到的所有属性都是有值的</strong>。</p><p>针对刚才我们讲的例子，就可以在 UserInfoModal 外层加一个容器，这样就能实现条件渲染了。实现的代码如下：</p><pre><code>// 定义一个容器组件用于封装真正的 UserInfoModal\nexport default function UserInfoModalWrapper({\n  visible,\n  ...rest, // 使用 rest 获取除了 visible 之外的属性\n}) {\n  // 如果对话框不显示，则不 render 任何内容\n  if (!visible) return null; \n  // 否则真正执行对话框的组件逻辑\n  return &lt;UserInfoModal visible {...rest} /&gt;;\n}\n\n</code></pre><p>这样的话，我们就间接实现了按条件去执行 Hooks 的逻辑。</p><p>在实际的使用场景中，可能判断条件不止 visible 一个属性，而会是一些属性的组合，来具体决定 render 什么内容。虽然这样的做法不够直观，但其实也能带来一些好处。比如说，在函数组件你会少写一些条件判断语句，并且确保每个组件尽量短小，这样反而更加易读和维护。</p><p>在容器模式中我们其实也可以看到，条件的隔离对象是多个子组件，这就意味着它通常用于一些比较大块逻辑的隔离。所以对于一些比较细节的控制，其实还有一种做法，就是<strong>把判断条件放到 Hooks 中去</strong>。</p><p>比如上节课的例子，我们需要先发送请求，获得文章信息，从而知道作者的 ID 是什么，这样才能用 useUser 这个 Hook 去获取用户数据。</p><p>那么直观的写法是下面这样的：</p><pre><code>const ArticleView = ({ id }) =&gt; {\n  const { data: article, loading } = useArticle(id);\n  let user = null;\n  if (article?.userId) user = useUser(article?.userId).data;\n  // 组件其它逻辑\n}\n</code></pre><p>可以看到，我们需要的 article 这个对象获取到之后，才能去用 useUser 这个 Hook 再去获取用户信息。那么同样的，既然 Hook 不能放到条件语句中，那我们应该如何做呢？</p><p>事实上，上一讲的例子已经给出了答案，那就是把条件语句自包含在 Hook 之中。这样当没有传递 userId 给 useUser 这个 Hook 的时候，副作用里实际上什么也不做，比如：</p><pre><code>function useUser(id) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() =&gt; {\n    // 当 id 不存在，直接返回，不发送请求\n    if (!id) return\n    // 获取用户信息的逻辑\n  });\n}\n</code></pre><p>可以看到，在 useEffect 中我们会判断 ID 是否存在。如果不存在，就不发送请求。这样的话，这个 Hook 就可以在组件中无条件使用了。</p><p>总体来说，通过这样一个容器模式，我们把原来需要条件运行的 Hooks 拆分成子组件，然后通过一个容器组件来进行实际的条件判断，从而渲染不同的组件，实现按条件渲染的目的。这在一些复杂的场景之下，也能达到拆分复杂度，让每个组件更加精简的目的。</p><h2>使用 render props 模式重用 UI 逻辑</h2><p>对于 React 开发而言，如果要挑选一个最重要的设计模式，那一定是 render props。因为它解决了 UI 逻辑的重用问题，不仅适用于 Class 组件，在函数组件的场景下也不可或缺。</p><p>鉴于大家日常交流都习惯用这个英文的名字，所以这里我也就不翻译成中文了。顾名思义，render props 就是<strong>把一个 render 函数作为属性传递给某个组件，由这个组件去执行这个函数从而 render 实际的内容</strong>。</p><p>在 Class 组件时期，render props 和 HOC（高阶组件）两种模式可以说是进行逻辑重用的两把利器，但是实际上，HOC 的所有场景几乎都可以用 render props 来实现。可以说，<strong>Hooks是逻辑重用的第一选择</strong>。</p><p>不过在如今的函数组件情况下，<strong>Hooks</strong> 有一个局限，那就是<strong>只能用作数据逻辑的重用</strong>，而一旦涉及 UI 表现逻辑的重用，就有些力不从心了，而这正是 render props 擅长的地方。所以，<strong>即使有了 Hooks，我们也要掌握 render props 这个设计模式的用法</strong>。</p><p>为了方便你理解 render props 这个模式，我先给你举一个数据逻辑重用的简单例子。这个例子仍然是我们熟悉的计数器。有两个按钮，加一和减一，并将当前值显示在界面上。执行的效果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/97/6a/97802efb8901c352a2666a41e1d85a6a.png?wh=206x98\" alt=\"\"></p><p>如果不考虑 UI 的展现，这里要抽象的业务逻辑就是计数逻辑，包括三个部分：</p><ol>\n<li>count: 当前计数值；</li>\n<li>increase: 让数值加 1 的方法；</li>\n<li>decrease: 让数值减 1 的方法。</li>\n</ol><p>如果用 render props 模式把这部分逻辑封装起来，那就可以在不同的组件中使用，由使用的组件自行决定 UI 如何展现。下面的代码就是这个计数器的 render props 的实现：</p><pre><code>import { useState, useCallback } from &quot;react&quot;;\n\nfunction CounterRenderProps({ children }) {\n  const [count, setCount] = useState(0);\n  const increment = useCallback(() =&gt; {\n    setCount(count + 1);\n  }, [count]);\n  const decrement = useCallback(() =&gt; {\n    setCount(count - 1);\n  }, [count]);\n\n  return children({ count, increment, decrement });\n}\n</code></pre><p>可以看到，我们要把计数逻辑封装到一个自己不 render 任何 UI 的组件中，那么在使用的时候可以用如下的代码：</p><pre><code>function CounterRenderPropsExample() {\n  return (\n    &lt;CounterRenderProps&gt;\n      {({ count, increment, decrement }) =&gt; {\n        return (\n          &lt;div&gt;\n            &lt;button onClick={decrement}&gt;-&lt;/button&gt;\n            &lt;span&gt;{count}&lt;/span&gt;\n            &lt;button onClick={increment}&gt;+&lt;/button&gt;\n          &lt;/div&gt;\n        );\n      }}\n    &lt;/CounterRenderProps&gt;\n  );\n}\n</code></pre><p>这里利用了 children 这个特殊属性。也就是组件开始 tag 和结束tag 之间的内容，其实是会作为 children 属性传递给组件。那么在使用的时候，是直接传递了一个函数过去，由实现计数逻辑的组件去调用这个函数，并把相关的三个参数count，increase 和 decrease 传递给这个函数。</p><p>当然，我们<strong>完全也可以使用其它的属性名字</strong>，而不是 children。我们只需要<strong>把这个 render 函数作为属性传递给组件</strong>就可以了，这也正是 render props 这个名字的由来。</p><p>这个例子演示了纯数据逻辑的重用，也就是重用的业务逻辑自己不产生任何 UI。那么在这种场景下，其实用 Hooks 是更方便的，在<a href=\"http://https://time.geekbang.org/column/article/381423\">第6讲</a>中，我其实已经给过这么计数器的 Hooks 实现的例子，代码如下：</p><pre><code>import { useState, useCallback }from 'react';\n \nfunction useCounter() {\n  // 定义 count 这个 state 用于保存当前数值\n  const [count, setCount] = useState(0);\n  // 实现加 1 的操作\n  const increment = useCallback(() =&gt; setCount(count + 1), [count]);\n  // 实现减 1 的操作\n  const decrement = useCallback(() =&gt; setCount(count - 1), [count]);\n  \n  // 将业务逻辑的操作 export 出去供调用者使用\n  return { count, increment, decrement };\n}\n</code></pre><p>很显然，使用 Hooks 的方式是更简洁的。这也是为什么我们经常说 Hooks 能够替代 render props 这个设计模式。但是，需要注意的是，Hooks 仅能替代纯数据逻辑的 render props。如果有 UI 展示的逻辑需要重用，那么我们还是必须借助于 render props 的逻辑，这就是我一再强调必须<strong>要掌握 render props 这种设计模式</strong>的原因。</p><p>为了解释这个用法，我给你举一个例子。比如，我们需要显示一个列表，如果超过一定数量，则把多余的部分折叠起来，通过一个弹出框去显示。下面这张图可以比较直观地展示这个需求的实际运行效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/00/3b/0042d03a6c11cfee5e642ee1c984723b.png?wh=1104x860\" alt=\"\"></p><p>可以看到，这里展示了两个列表。一个只显示用户名，这在一些社交软件的界面上很常见，只显示几个点赞的用户，多余的用一个数字来表示，鼠标移上去则跳转或者显示完整列表。</p><p>另外一个是表格，但是也只显示前面5个，多余的折叠到 “更多...” 里面。比如说，对于第一个，鼠标移上去后的效果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/1d/a54b8216426a5523c4e047509a7b8e1d.png?wh=962x240\" alt=\"\"></p><p>我们来分析一下。对于这一类场景，<strong>功能相同的部分</strong>是：数据超过一定数量时，显示一个 “更多...”的文字；鼠标移上去则弹出一个框，用于显示其它的数据。</p><p><strong>功能不同的部分</strong>是：每一个列表项如何渲染，是在使用的时候决定的。</p><p>因此，对于这一类具有 UI 逻辑重用需求的场景，我们就无法通过 Hooks 实现，而是需要通过 render props 这个设计模式。</p><p>下面这段代码展示了如何实现这个包含了 render props 的 ListWithMore 组件：</p><pre><code>import { Popover } from &quot;antd&quot;;\n\nfunction ListWithMore({ renderItem, data = [], max }) {\n  const elements = data.map((item, index) =&gt; renderItem(item, index, data));\n  const show = elements.slice(0, max);\n  const hide = elements.slice(max);\n  return (\n    &lt;span className=&quot;exp-10-list-with-more&quot;&gt;\n      {show}\n      {hide.length &gt; 0 &amp;&amp; (\n        &lt;Popover content={&lt;div style={{ maxWidth: 500 }}&gt;{hide}&lt;/div&gt;}&gt;\n          &lt;span className=&quot;more-items-wrapper&quot;&gt;\n            and{&quot; &quot;}\n            &lt;span className=&quot;more-items-trigger&quot;&gt; {hide.length} more...&lt;/span&gt;\n          &lt;/span&gt;\n        &lt;/Popover&gt;\n      )}\n    &lt;/span&gt;\n  );\n}\n</code></pre><p>可以看到，这个组件接收了三个参数，分别是：</p><ol>\n<li>renderItem：用于接收一个函数，由父组件决定如何渲染一个列表项；</li>\n<li>data：需要渲染的数据；</li>\n<li>max：最多显示几条数据。</li>\n</ol><p>这样，任何有类似需求的场景就都可以用这个组件去实现了。下面这段代码展示了上面示意图中两个场景的实现代码，你可以体会一下：</p><pre><code>// 这里用一个示例数据\nimport data from './data';\n\nfunction ListWithMoreExample () =&gt; {\n  return (\n    &lt;div className=&quot;exp-10-list-with-more&quot;&gt;\n      &lt;h1&gt;User Names&lt;/h1&gt;\n      &lt;div className=&quot;user-names&quot;&gt;\n        Liked by:{&quot; &quot;}\n        &lt;ListWithMore\n          renderItem={(user) =&gt; {\n            return &lt;span className=&quot;user-name&quot;&gt;{user.name}&lt;/span&gt;;\n          }}\n          data={data}\n          max={3}\n        /&gt;\n      &lt;/div&gt;\n      &lt;br /&gt;\n      &lt;br /&gt;\n      &lt;h1&gt;User List&lt;/h1&gt;\n      &lt;div className=&quot;user-list&quot;&gt;\n        &lt;div className=&quot;user-list-row user-list-row-head&quot;&gt;\n          &lt;span className=&quot;user-name-cell&quot;&gt;Name&lt;/span&gt;\n          &lt;span&gt;City&lt;/span&gt;\n          &lt;span&gt;Job Title&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;ListWithMore\n          renderItem={(user) =&gt; {\n            return (\n              &lt;div className=&quot;user-list-row&quot;&gt;\n                &lt;span className=&quot;user-name-cell&quot;&gt;{user.name}&lt;/span&gt;\n                &lt;span&gt;{user.city}&lt;/span&gt;\n                &lt;span&gt;{user.job}&lt;/span&gt;\n              &lt;/div&gt;\n            );\n          }}\n          data={data}\n          max={5}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre><p>可以看到，代码里使用了两个 ListWithMore 组件，通过 renderItem 这个属性，我们可以自主决定该如何渲染每一个列表项，从而把一部分 UI 逻辑抽象出来，形成一个可复用的逻辑，以简化不同场景的使用。</p><h2>小结</h2><p>在今天这节课，我们介绍了两个设计模式。</p><p>一个是容器模式，可以实现类似于按条件执行 Hooks 的功能。虽然这是一个间接的方式，但是能够帮助我们更好地做组件逻辑的分离。</p><p>第二个则是经典的 render props 模式，虽然它和 Hooks 没有任何关系，但它可以作为 Hooks 的一个补充。在我们需要重用某些 UI 逻辑的时候，提供一个实现方案。</p><p>课程中的代码，以及在线运行效果的链接在这里： <a href=\"https://codesandbox.io/s/react-hooks-course-20vzg\">https://codesandbox.io/s/react-hooks-course-20vzg</a> 。你可以 fork 后自己动手尝试。</p><h2>思考题</h2><p>思考一下你做过的项目，你能想到哪些 render props 模式的使用场景呢？欢迎交流分享。</p>","neighbors":{"left":{"article_title":"09｜异步处理：如何向服务器端发送请求？","id":384630},"right":{"article_title":"11｜事件处理：如何创建自定义事件？","id":385964}},"comments":[[{"had_liked":false,"id":298175,"user_name":"Free fall","can_delete":false,"product_type":"c1","uid":2637054,"ip_address":"","ucode":"8DBF73CD0F423F","user_header":"","comment_is_top":false,"comment_ctime":1623934815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27393738591","product_id":100079901,"comment_content":"做过一个文件预览的功能，根据选中的文件类型，用对应的插件预览","like_count":6},{"had_liked":false,"id":304412,"user_name":"林斌","can_delete":false,"product_type":"c1","uid":1038425,"ip_address":"","ucode":"EA44A69E8C9457","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/59/2fc5886b.jpg","comment_is_top":false,"comment_ctime":1627393775,"is_pvip":false,"replies":[{"id":"110289","content":"文中提到，可能是属性组合不只visible，根据不同的状态来决定是否要 render 真正的组件，这部分逻辑属于 Modal 组件，不应该由调用者去实现。","user_name":"作者回复","comment_id":304412,"uid":"1018676","ip_address":"","utype":1,"ctime":1627699335,"user_name_real":"Nate"}],"discussion_count":1,"race_medal":0,"score":"18807262959","product_id":100079901,"comment_content":"第一个demo不想展示的话，直接在父级 visible &amp;&amp; &lt;UserInfoModal &#47;&gt; 不就好了吗？ 不知道为什么要多一层嵌套～","like_count":4},{"had_liked":false,"id":298224,"user_name":"何用","can_delete":false,"product_type":"c1","uid":1377393,"ip_address":"","ucode":"B0C6E8176AE6FD","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","comment_is_top":false,"comment_ctime":1623975037,"is_pvip":false,"replies":[{"id":"108259","content":"很好的问题。如果考虑动画的场景，那么 visible 从 false -&gt; true 是会默认保留动画；如果是 true -&gt; false，那取决于什么时候设置 visible。比如对于 antd 的 Modal，可以在 afterClose 事件里再去设置 visible 为 false，也就是动画结束后才是真正的 visible=false，那就会保留动画了。所以这属于具体如何封装的实现细节，具体情况具体考虑，总体的模式是不变的。","user_name":"作者回复","comment_id":298224,"uid":"1018676","ip_address":"","utype":1,"ctime":1624012442,"user_name_real":"Nate"}],"discussion_count":2,"race_medal":0,"score":"18803844221","product_id":100079901,"comment_content":"UserInfoModalWrapper 考虑 Modal 动画了吗？这种改写不是等价的，会散失动画效果","like_count":4,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522062,"discussion_content":"很好的问题。如果考虑动画的场景，那么 visible 从 false -&amp;gt; true 是会默认保留动画；如果是 true -&amp;gt; false，那取决于什么时候设置 visible。比如对于 antd 的 Modal，可以在 afterClose 事件里再去设置 visible 为 false，也就是动画结束后才是真正的 visible=false，那就会保留动画了。所以这属于具体如何封装的实现细节，具体情况具体考虑，总体的模式是不变的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624012442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1377393,"avatar":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","nickname":"何用","note":"","ucode":"B0C6E8176AE6FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379659,"discussion_content":"!visible 返回 null 这行代码就把动画给扼杀了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624060537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300854,"user_name":"阿禹。","can_delete":false,"product_type":"c1","uid":1385384,"ip_address":"","ucode":"BA6FE447701A6B","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a8/d0fb2944.jpg","comment_is_top":false,"comment_ctime":1625405720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14510307608","product_id":100079901,"comment_content":"antd中表单组件也是有用到render props模式。确实在有些地方很灵活。","like_count":3},{"had_liked":false,"id":298287,"user_name":"知鱼","can_delete":false,"product_type":"c1","uid":1449739,"ip_address":"","ucode":"1FF49E9094738F","user_header":"https://static001.geekbang.org/account/avatar/00/16/1f/0b/c618eca6.jpg","comment_is_top":false,"comment_ctime":1624000279,"is_pvip":false,"replies":[{"id":"108240","content":"没有啦，知鱼同学～这次王沛老师带来的是专栏，主要是文字➕音频的形式哦～对于React Hooks的学习来说完全够用了，老师也讲得很清晰。","user_name":"编辑回复","comment_id":298287,"uid":"2189689","ip_address":"","utype":2,"ctime":1624004822,"user_name_real":"李辰洋"}],"discussion_count":1,"race_medal":0,"score":"14508902167","product_id":100079901,"comment_content":"后期会有视频吗？","like_count":3},{"had_liked":false,"id":335501,"user_name":"ChenQinf","can_delete":false,"product_type":"c1","uid":1609535,"ip_address":"","ucode":"E2D6841DFB1569","user_header":"https://static001.geekbang.org/account/avatar/00/18/8f/3f/b1d28312.jpg","comment_is_top":false,"comment_ctime":1645541503,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5940508799","product_id":100079901,"comment_content":"render props作用可以理解成vue中的slot吗","like_count":1},{"had_liked":false,"id":327230,"user_name":"Osmond","can_delete":false,"product_type":"c1","uid":2836830,"ip_address":"","ucode":"7D04C6D7B0DDCB","user_header":"https://static001.geekbang.org/account/avatar/00/2b/49/5e/f430ff83.jpg","comment_is_top":false,"comment_ctime":1639992210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5934959506","product_id":100079901,"comment_content":"感觉很多UI组件比如说antd 的组件，就很像是用了render props实现了组件的重用吧","like_count":1},{"had_liked":false,"id":354939,"user_name":"Jeffrey Ma","can_delete":false,"product_type":"c1","uid":1374957,"ip_address":"四川","ucode":"0C5E2AB51E6A83","user_header":"https://static001.geekbang.org/account/avatar/00/14/fa/ed/0742b854.jpg","comment_is_top":false,"comment_ctime":1660896275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660896275","product_id":100079901,"comment_content":"CountRenderProps有点绕。我说下我的理解：<br><br>1、这个render props的children 实际上是一个函数， 而不是UI组件。 <br>每一个组件都拥有props, 而props.children 就指代了 开始tag和结束tag 的内容， props里面其实还包含了标签自己的一些需要传递的属性。<br><br>2、在CountRenderProps 里面，通过children这个形参，执行了这个函数。  而且，执行的时候，我们传递给了children三个参数，count,increase,decrease。<br>函数的具体形式，则是由外部的父组件使用时去定义，而且在定义的时候，我们可以拿到这三个参数，有点类似于回调函数。","like_count":0},{"had_liked":false,"id":299992,"user_name":"cty","can_delete":false,"product_type":"c1","uid":1392853,"ip_address":"","ucode":"47A492728F56A8","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/d5/5f91aee3.jpg","comment_is_top":false,"comment_ctime":1624949646,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1624949646","product_id":100079901,"comment_content":"老师想问一下HOC存在的意义在哪里呢？感觉能够用HOC的场景都可以用render props来替代，从逻辑角度讲，render props的逻辑更清晰，HOC的使用逻辑则更加冗余。实在想不出来有什么是一定需要使用HOC的场景，还望老师解惑。","like_count":0,"discussions":[{"author":{"id":2003923,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/93/d3/97497cbe.jpg","nickname":"OriX","note":"","ucode":"EEC1CF06115CD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387664,"discussion_content":"我这边了解到的发展史就是 mixin---hoc---render props---customer hook 所以可以互相替代也是正常的 后一种模式往往比上一种更优选  render props的缺点就是比较难以阅读","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1628330738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1378201,"avatar":"https://static001.geekbang.org/account/avatar/00/15/07/99/2c12c56c.jpg","nickname":"浩然","note":"","ucode":"FC771E92869796","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558863,"discussion_content":"如果你动不了原来的组件可以选HOC","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648513810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299053,"user_name":"H","can_delete":false,"product_type":"c1","uid":2036145,"ip_address":"","ucode":"99558A1CF3DF4F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/11/b1/4379e143.jpg","comment_is_top":false,"comment_ctime":1624440113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624440113","product_id":100079901,"comment_content":"学习老师的文章好爽，好期待这门课之后还会有其它课程","like_count":0},{"had_liked":false,"id":298220,"user_name":"Geek_71adef","can_delete":false,"product_type":"c1","uid":2643315,"ip_address":"","ucode":"E3CC6F6FBB1468","user_header":"","comment_is_top":false,"comment_ctime":1623966880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623966880","product_id":100079901,"comment_content":"对于新加&#47;修改表单(表单字段较多)，这种是不是不适合用render props ，而组件直接引入，传递参数这样更好，这样的理解对么","like_count":0},{"had_liked":false,"id":298184,"user_name":"与你.","can_delete":false,"product_type":"c1","uid":2167786,"ip_address":"","ucode":"68734A44F1B086","user_header":"https://static001.geekbang.org/account/avatar/00/21/13/ea/e95bc408.jpg","comment_is_top":false,"comment_ctime":1623939800,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1623939800","product_id":100079901,"comment_content":"学react的时候直接学过hooks， 对于这个render props好像还是不理解","like_count":0}]]}