{"id":442791,"title":"14｜常量：Go在“常量”设计上的创新有哪些？","content":"<p>你好，我是Tony Bai。</p><p>在前面几节课中，我们学习了变量以及Go原生支持的基本数据类型，包括数值类型与字符串类型。这两类基本数据类型不仅仅可以被用来声明变量、明确变量绑定的内存块边界，还可以被用来定义另外一大类语法元素：<strong>常量</strong>。</p><p>你可能会问：常量有什么好讲的呢？常量不就是在程序生命周期内不会改变的值吗？如果是其他主流语言的常量，可讲的确实不多，但Go在常量的设计上是有一些“创新”的。都有哪些创新呢？我们不妨先来剧透一下。Go语言在常量方面的创新包括下面这几点：</p><ul>\n<li>支持无类型常量；</li>\n<li>支持隐式自动转型；</li>\n<li>可用于实现枚举。</li>\n</ul><p>这些创新的具体内容是什么呢？怎么来理解Go常量的这些创新呢？你可以先思考一下，接下来我们再来详细分析。</p><p>不过在讲解这些“创新”之前，我们还是要从Go常量的一些基本概念说起，这会有助于我们对Go常量有一个更为深入的理解。</p><h2>常量以及Go原生支持常量的好处</h2><p>Go语言的常量是一种在源码编译期间被创建的语法元素。这是在说这个元素的值可以像变量那样被初始化，但它的初始化表达式必须是在编译期间可以求出值来的。</p><p>而且，Go常量一旦声明并被初始化后，它的值在整个程序的生命周期内便保持不变。这样，我们在并发设计时就不用考虑常量访问的同步，并且被创建并初始化后的常量还可以作为其他常量的初始表达式的一部分。</p><!-- [[[read_end]]] --><p>我们前面学过，Go是使用var关键字声明变量的。在常量这里，Go语言引入const关键字来声明常量。而且，和var支持单行声明多个变量，以及以代码块形式聚合变量声明一样，const也支持单行声明多个常量，以及以代码块形式聚合常量声明的形式，具体你可以看下面这个示例代码：</p><pre><code class=\"language-plain\">const Pi float64 = 3.14159265358979323846 // 单行常量声明\n\n// 以const代码块形式声明常量\nconst (\n    size int64 = 4096\n    i, j, s = 13, 14, \"bar\" // 单行声明多个常量\n)\n</code></pre><p>不过，Go语言规范规定，Go常量的类型只局限于前面我们学过的Go基本数据类型，包括数值类型、字符串类型，以及只有两个取值（true和false）的布尔类型。</p><p><strong>那常量的引入究竟给Go语言带来什么好处呢？没有对比便没有伤害。让我们先来回顾一下原生不支持常量的C语言的境况。</strong></p><p>在C语言中，字面值担负着常量的角色，我们可以使用数值型、字符串型字面值来应对不同场合对常量的需求。</p><p>为了不让这些字面值以“魔数（Magic Number）”的形式分布于源码各处，早期C语言的常用实践是使用宏（macro）定义记号来指代这些字面值，这种定义方式被称为<strong>宏定义常量</strong>，比如下面这些宏：</p><pre><code class=\"language-plain\">#define FILE_MAX_LEN 0x22334455\n#define PI 3.1415926\n#define GO_GREETING \"Hello, Gopher\"\n#define A_CHAR 'a'\n</code></pre><p>使用宏定义常量的习惯一直是C编码中的主流风格，即便后续的C标准中提供了const关键字后也是这样，但宏定义的常量会有很多问题。比如，它是一种仅在预编译阶段进行替换的字面值，继承了宏替换的复杂性和易错性，而且还有类型不安全、无法在调试时通过宏名字输出常量的值，等等问题。</p><p>即使我们改用后续C标准中提供的const关键字修饰的标识符，也依然不是一种圆满方案。因为const关键字修饰的标识符本质上依旧是变量，它甚至无法用作数组变量声明中的初始长度（除非用GNU扩展C）。你可以看看下面这个代码，它就存在着这样的问题：</p><pre><code class=\"language-plain\">const int size = 5;\nint a[size] = {1,2,3,4,5}; // size本质不是常量，这将导致编译器错误\n</code></pre><p>正是因为如此，作为站在C语言等编程语言的肩膀之上诞生的Go语言，它吸取了C语言的教训。Go原生提供的用const关键字定义的常量，整合了C语言中宏定义常量、const修饰的“只读变量”，以及枚举常量这三种形式，并消除了每种形式的不足，使得Go常量是类型安全的，而且对编译器优化友好。</p><p>Go在消除了C语言无原生支持的常量的弊端的同时，还针对常量做了一些额外的创新。下面我们就来看第一个创新点：<strong>无类型常量</strong>。</p><h2>无类型常量</h2><p>通过前面的学习，我们知道Go语言对类型安全是有严格要求的：<strong>即便两个类型拥有着相同的底层类型，但它们仍然是不同的数据类型，不可以被相互比较或混在一个表达式中进行运算。</strong>这一要求不仅仅适用于变量，也同样适用于有类型常量（Typed Constant）中，你可以在下面代码中看出这一点：</p><pre><code class=\"language-plain\">type myInt int\nconst n myInt = 13\nconst m int = n + 5 // 编译器报错：cannot use n + 5 (type myInt) as type int in const initializer\n\nfunc main() {\n    var a int = 5\n    fmt.Println(a + n) // 编译器报错：invalid operation: a + n (mismatched types int and myInt)\n}\n</code></pre><p>而且，有类型常量与变量混合在一起进行运算求值的时候，也必须遵守类型相同这一要求，否则我们只能通过显式转型才能让上面代码正常工作，比如下面代码中，我们就必须通过将常量n显式转型为int后才能参与后续运算：</p><pre><code class=\"language-plain\">type myInt int\nconst n myInt = 13\nconst m int = int(n) + 5  // OK\n\nfunc main() {\n    var a int = 5\n    fmt.Println(a + int(n))  // 输出：18\n}\n</code></pre><p><strong>那么在Go语言中，只有这一种方法能让上面代码编译通过、正常运行吗 ？</strong>当然不是，我们也可以使用Go中的无类型常量来实现，你可以看看这段代码：</p><pre><code class=\"language-plain\">type myInt int\nconst n = 13\n\nfunc main() {\n    var a myInt = 5\n    fmt.Println(a + n)  // 输出：18\n}\n</code></pre><p>你可以看到，在这个代码中，常量n在声明时并没有显式地被赋予类型，在Go中，这样的常量就被称为<strong>无类型常量（Untyped Constant）</strong>。</p><p>不过，无类型常量也不是说就真的没有类型，它也有自己的默认类型，不过它的默认类型是根据它的初值形式来决定的。像上面代码中的常量n的初值为整数形式，所以它的默认类型为int。</p><p>不过，到这里，你可能已经发现问题了：常量n的默认类型int与myInt并不是同一个类型啊，为什么可以放在一个表达式中计算而没有报编译错误呢？</p><p>别急，我们继续用Go常量的第二个创新点，隐式转型来回答这个问题。</p><h2>隐式转型</h2><p>隐式转型说的就是，对于无类型常量参与的表达式求值，Go编译器会根据上下文中的类型信息，把无类型常量自动转换为相应的类型后，再参与求值计算，这一转型动作是隐式进行的。但由于转型的对象是一个常量，所以这并不会引发类型安全问题，Go编译器会保证这一转型的安全性。</p><p>我们继续以上面代码为例来分析一下，Go编译器会自动将a+n这个表达式中的常量n转型为myInt类型，再与变量a相加。由于变量a的类型myInt的底层类型也是int，所以这个隐式转型不会有任何问题。</p><p>不过，如果Go编译器在做隐式转型时，发现无法将常量转换为目标类型，Go编译器也会报错，比如下面的代码就是这样：</p><pre><code class=\"language-plain\">const m = 1333333333\n\nvar k int8 = 1\nj := k + m // 编译器报错：constant 1333333333 overflows int8\n</code></pre><p>这个代码中常量m的值1333333333已经超出了int8类型可以表示的范围，所以我们将它转换为int8类型时，就会导致编译器报溢出错误。</p><p>从前面这些分析中，我们可以看到，无类型常量与常量隐式转型的“珠联璧合”使得在Go这样的具有强类型系统的语言，在处理表达式混合数据类型运算的时候具有比较大的灵活性，代码编写也得到了一定程度的简化。也就是说，我们不需要在求值表达式中做任何显式转型了。所以说，在Go中，使用无类型常量是一种惯用法，你可以多多熟悉这种形式。</p><p>接下来，我们再来看看Go常量的最后一个重要创新，同样也是常量被应用较为广泛的一个领域：<strong>实现枚举</strong>。</p><h2>实现枚举</h2><p>不知道你有没有注意到，在前面讲解Go基本数据类型时，我们并没有提到过枚举类型，这是因为 <strong>Go语言其实并没有原生提供枚举类型</strong>。</p><p>但是Go开发者对枚举这种类型的需求是现实存在的呀。那这要怎么办呢？其实，在Go语言中，我们可以使用const代码块定义的常量集合，来实现枚举。这是因为，枚举类型本质上就是一个由有限数量常量所构成的集合，所以这样做并没有什么问题。</p><p>不过，用Go常量实现枚举可不是我们的临时起意，而是Go设计者们的原创，他们在语言设计之初就希望将枚举类型与常量合二为一，这样就不需要再单独提供枚举类型了，于是他们将Go的前辈C语言中的枚举类型特性移植到常量的特性中并进行了“改良”。</p><p><strong>那么接下来，我们就先来回顾一下C语言枚举类型，看看究竟它有哪些特性被移植到Go常量中了。</strong>在C语言中，枚举是一个命名的整型常数的集合，下面是我们使用枚举定义的Weekday类型：</p><pre><code class=\"language-plain\">enum Weekday {\n    SUNDAY,\n    MONDAY,\n    TUESDAY,\n    WEDNESDAY,\n    THURSDAY,\n    FRIDAY,\n    SATURDAY\n};\n\nint main() {\n    enum Weekday d = SATURDAY;\n    printf(\"%d\\n\", d); // 6\n}\n</code></pre><p>你运行上面的C语言代码就会发现，其实C语言针对枚举类型提供了很多语法上的便利特性。比如说，如果你没有显式给枚举常量赋初始值，那么枚举类型的第一个常量的值就为0，后续常量的值再依次加1。</p><p>你看，上面这个代码中的Weekday枚举类型的所有枚举常量都没有显式赋值，那么第一个枚举常量SUNDAY的值就会被赋值为0，它后面的枚举常量值依次加1，这也是为什么输出的SATURDAY的值为6的原因。</p><p>但Go并没有直接继承这一特性，而是将C语言枚举类型的这种基于前一个枚举值加1的特性，分解成了Go中的两个特性：自动重复上一行，以及引入const块中的行偏移量指示器iota，这样它们就可以分别独立使用了。</p><p>接下来我们逐一看看这两个特性。首先，<strong>Go的const语法提供了“隐式重复前一个非空表达式”的机制</strong>，比如下面代码：</p><pre><code class=\"language-plain\">const (\n    Apple, Banana = 11, 22\n    Strawberry, Grape \n    Pear, Watermelon \n)\n</code></pre><p>这个代码里，常量定义的后两行并没有被显式地赋予初始值，所以Go编译器就为它们自动使用上一行的表达式，也就获得了下面这个等价的代码：</p><pre><code class=\"language-plain\">const (\n    Apple, Banana = 11, 22\n    Strawberry, Grape  = 11, 22 // 使用上一行的初始化表达式\n    Pear, Watermelon  = 11, 22 // 使用上一行的初始化表达式\n)\n</code></pre><p>不过，仅仅是重复上一行显然无法满足“枚举”的要求，因为枚举类型中的每个枚举常量的值都是唯一的。所以，<strong>Go在这个特性的基础上又提供了“神器”：iota</strong>，有了iota，我们就可以定义满足各种场景的枚举常量了。</p><p>iota是Go语言的一个预定义标识符，它表示的是const声明块（包括单行声明）中，每个常量所处位置在块中的偏移值（从零开始）。同时，每一行中的iota自身也是一个无类型常量，可以像前面我们提到的无类型常量那样，自动参与到不同类型的求值过程中来，不需要我们再对它进行显式转型操作。</p><p>你可以看看下面这个Go标准库中sync/mutex.go中的一段基于iota的枚举常量的定义：</p><pre><code class=\"language-plain\">// $GOROOT/src/sync/mutex.go \nconst ( \n    mutexLocked = 1 &lt;&lt; iota\n    mutexWoken\n    mutexStarving\n    mutexWaiterShift = iota\n    starvationThresholdNs = 1e6\n)\n</code></pre><p>这是一个很典型的诠释iota含义的例子，我们一行一行来看一下。</p><p>首先，这个const声明块的第一行是mutexLocked = 1 &lt;&lt; iota ，iota的值是这行在const块中的偏移，因此iota的值为0，我们得到mutexLocked这个常量的值为1 &lt;&lt; 0，也就是1。</p><p>接着，第二行：mutexWorken 。因为这个const声明块中并没有显式的常量初始化表达式，所以我们根据const声明块里“隐式重复前一个非空表达式”的机制，这一行就等价于mutexWorken = 1 &lt;&lt; iota。而且，又因为这一行是const块中的第二行，所以它的偏移量iota的值为1，我们得到mutexWorken这个常量的值为1 &lt;&lt; 1，也就是2。</p><p>然后是mutexStarving。这个常量同mutexWorken一样，这一行等价于mutexStarving = 1 &lt;&lt; iota。而且，也因为这行的iota的值为2，我们可以得到mutexStarving这个常量的值为 1 &lt;&lt; 2，也就是4;</p><p>再然后我们看mutexWaiterShift = iota 这一行，这一行为常量mutexWaiterShift做了显式初始化，这样就不用再重复前一行了。由于这一行是第四行，而且作为行偏移值的iota的值为3，因此mutexWaiterShift的值就为3。</p><p>而最后一行，代码中直接用了一个具体值1e6给常量starvationThresholdNs进行了赋值，那么这个常量值就是1e6本身了。</p><p>看完这个例子的分析，我相信你对于iota就会有更深的理解了。不过我还要提醒你的是，位于同一行的iota即便出现多次，多个iota的值也是一样的，比如下面代码：</p><pre><code class=\"language-plain\">const (\n    Apple, Banana = iota, iota + 10 // 0, 10 (iota = 0)\n    Strawberry, Grape // 1, 11 (iota = 1)\n    Pear, Watermelon  // 2, 12 (iota = 2)\n)\n</code></pre><p>我们以第一组常量Apple与Banana为例分析一下，它们分为被赋值为iota与iota+10，而且由于这是const常量声明块的第一行，因此两个iota的值都为0，于是就有了“Apple=0, Banana=10”的结果。下面两组变量分析过程也是类似的，你可以自己试一下。</p><p>如果我们要略过iota = 0，从iota = 1开始正式定义枚举常量，我们可以效仿下面标准库中的代码：</p><pre><code class=\"language-plain\">// $GOROOT/src/syscall/net_js.go\nconst (\n    _ = iota\n    IPV6_V6ONLY  // 1\n    SOMAXCONN    // 2\n    SO_ERROR     // 3\n)\n</code></pre><p>在这个代码里，我们使用了空白标识符作为第一个枚举常量，它的值就是iota。虽然它本身没有实际意义，但后面的常量值都会重复它的初值表达式（这里是iota），于是我们真正的枚举常量值就从1开始了。</p><p>那如果我们的枚举常量值并不连续，而是要略过某一个或几个值，又要怎么办呢？我们也可以借助空白标识符来实现，如下面这个代码：</p><pre><code class=\"language-plain\">const (\n    _ = iota // 0\n    Pin1\n    Pin2\n    Pin3\n    _\n    Pin5    // 5   \n)\n</code></pre><p>你可以看到，在上面这个枚举定义中，枚举常量集合中没有Pin4。为了略过Pin4，我们在它的位置上使用了空白标识符。</p><p>这样，Pin5就会重复Pin3，也就是向上数首个不为空的常量标识符的值，这里就是iota，而且由于它所在行的偏移值为5，因此Pin5的值也为5，这样我们成功略过了Pin4这个枚举常量以及4这个枚举值。</p><p>而且，iota特性让我们维护枚举常量列表变得更加容易。比如我们使用传统的枚举常量声明方式，来声明一组按首字母排序的“颜色”常量，也就是这样：</p><pre><code class=\"language-plain\">const ( \n    Black  = 1 \n    Red    = 2\n    Yellow = 3\n)\n</code></pre><p>假如这个时候，我们要增加一个新颜色Blue。那根据字母序，这个新常量应该放在Red的前面呀。但这样一来，我们就需要像下面代码这样将Red到Yellow的常量值都手动加1，十分费力。</p><pre><code class=\"language-plain\">const (\n    Blue   = 1\n    Black  = 2\n    Red    = 3\n    Yellow = 4\n)\n</code></pre><p>那如果我们使用iota重新定义这组“颜色”枚举常量是不是可以更方便呢？我们可以像下面代码这样试试看：</p><pre><code class=\"language-plain\">const (\n    _ = iota     \n    Blue\n    Red \n    Yellow     \n) \n</code></pre><p>这样，无论后期我们需要增加多少种颜色，我们只需将常量名插入到对应位置就可以，其他就不需要再做任何手工调整了。</p><p>而且，如果一个Go源文件中有多个const代码块定义的不同枚举，每个const代码块中的iota也是独立变化的，也就是说，每个const代码块都拥有属于自己的iota，如下面代码所示：</p><pre><code class=\"language-plain\">const (\n    a = iota + 1 // 1, iota = 0\n    b            // 2, iota = 1\n    c            // 3, iota = 2\n)\n\nconst (\n    i = iota &lt;&lt; 1 // 0, iota = 0\n    j             // 2, iota = 1\n    k             // 4, iota = 2\n)\n</code></pre><p>你可以看到，每个iota的生命周期都始于一个const代码块的开始，在该const代码块结束时结束。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了。今天我们学习了Go中最常用的一类语法元素：<strong>常量</strong>。</p><p>常量是一种在源码编译期间被创建的语法元素，它的值在程序的生命周期内保持不变。所有常量的求值计算都是在编译期完成的，而不是在运行期，这样可以减少运行时的工作，也方便编译器进行编译优化。另外，当操作数是常量表达式时，一些运行时的错误也可以在编译时被发现，例如整数除零、字符串索引越界等。</p><p>Go语言原生提供了对常量的支持，所以我们可以避免像C语言那样，使用宏定义常量，这比较复杂，也容易发生错误。而且，Go编译器还为我们提供的类型安全的保证。</p><p>接着，我们也学习了无类型常量，这是Go在常量方面的创新。无类型常量拥有和字面值一样的灵活性，它可以直接参与到表达式求值中，而不需要使用显式地类型转换。这得益于Go对常量的另一个创新：<strong>隐式转型</strong>，也就是将无类型常量的默认类型自动隐式转换为求值上下文中所需要的类型，并且这一过程由Go编译器保证安全性，这大大简化了代码编写。</p><p>此外，Go常量还“移植”并改良了前辈C语言的枚举类型的特性，在const代码块中支持自动重复上一行和iota行偏移量指示器。这样我们就可以使用Go常量语法来实现枚举常量的定义。并且，基于Go常量特性的枚举定义十分灵活，维护起来也更为简便。比如，我们可以选择以任意数值作为枚举值列表的起始值，也可以定义不连续枚举常量，添加和删除有序枚举常量时也不需要手工调整枚举的值。</p><h2>思考题</h2><p>今天我也给你留了思考题：虽然iota带来了灵活性与便利，但是否存在一些场合，在定义枚举常量时使用显式字面值更为适合呢？你可以思考一下，欢迎在留言区留下你的答案。</p><p>感谢你和我一起学习，也欢迎你把这门课分享给更多对Go语言学习感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","neighbors":{"left":{"article_title":"13｜基本数据类型：为什么Go要原生支持字符串类型？","id":440804},"right":{"article_title":"15｜同构复合类型：从定长数组到变长切片","id":444348}},"comments":[{"had_liked":false,"id":321083,"user_name":"火夫","can_delete":false,"product_type":"c1","uid":1035921,"ip_address":"","ucode":"B298242290A430","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/91/d6cba3c9.jpg","comment_is_top":false,"comment_ctime":1636653936,"is_pvip":false,"replies":[{"id":116756,"content":"没错，也有一些场合不适于使用iota。你提到的syscall场合算是一个。因为系统调用的编号以及错误码值几乎形成了标准，直接用原值更好，也方便查找。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636929659,"ip_address":"","comment_id":321083,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"个人觉得iota在一些场景下是方便一些，但更关键的在于代码可读性要好。像标准库syscall下有大量定义的常量，如果使用iota会看得头晕，心智负担太大。","like_count":32},{"had_liked":false,"id":337084,"user_name":"ivhong","can_delete":false,"product_type":"c1","uid":2659871,"ip_address":"","ucode":"9947B228807AC9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","comment_is_top":false,"comment_ctime":1646614550,"is_pvip":false,"replies":[{"id":123244,"content":"好问题！我的理解是：变量避免隐式转换是消除类型不安全的问题。而常量本身是不可改变的，不存在安全问题，untyped常量的“隐式”可以理解为一种“语法糖”。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646723929,"ip_address":"","comment_id":337084,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师您好，我有个疑惑，望老师有时间帮忙解答一下。\ngo在普通类型变量计算时有意的取掉了隐式类型转换，而在常量计算时又有意的加上隐式类型转换，为什么要“特意”的区别设计呢？","like_count":24,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530212,"discussion_content":"没错，也有一些场合不适于使用iota。你提到的syscall场合算是一个。因为系统调用的编号以及错误码值几乎形成了标准，直接用原值更好，也方便查找。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636929659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638769,"discussion_content":"十分鸡肋","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709890680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322547,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1637479721,"is_pvip":false,"replies":[{"id":117151,"content":"没错，要学习一门语言，最终目的就是学会用这门语言的思维去写这门语言的代码。go coding in go way. 而不为go coding in c way, or java way.","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637560977,"ip_address":"","comment_id":322547,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"有人老觉得 iota 没用，或者用的不多，但是在我看来，那可能是拿 Go 来实现了别的语言也可实现的一套，我觉得选择一门语言，更多是选择这门语言拥有的一些新特性，然后使用这些新特性。","like_count":11,"discussions":[{"author":{"id":1011311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6e/6f/44da923f.jpg","nickname":"邹志鹏.Joey ⁷⁷⁷","note":"","ucode":"5DE4B9097D95AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600102,"discussion_content":"没有任何语言是完美的, 不合理就是不合理, iota 就是一种自相矛盾的设计","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1674012618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604587,"discussion_content":"新特性不一定就是好特性...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676368889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532232,"discussion_content":"没错，要学习一门语言，最终目的就是学会用这门语言的思维去写这门语言的代码。go coding in go way. 而不为go coding in c way, or java way.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637560977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638160,"discussion_content":" 明明有可读性更好的写法非得这么干，你什么场景用到过这个特性？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709287496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321281,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1636735686,"is_pvip":false,"replies":[{"id":116795,"content":"1. 差不多\n2. iota的确是一个单词，表示“极微小”的意思。标准读音是 [aɪ&#39;oʊtə] . 不过你也知道，很多程序员界的术语都读乱了，就像nginx这个词读啥的都有。\n3. 篇幅有限，位运算没列入专题讲解。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966589,"ip_address":"","comment_id":321281,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bai 老师的每篇文章都很精彩。以下困惑，麻烦有空解答一下：\n\n1. 文中说：“但由于转型的对象是一个常量，所以这并不会引发类型安全问题，Go 编译器会保证这一转型的安全性。” 我理解的是Go编译器在编译阶段就能发现类型错误的问题，也就从而保证了类型转换的安全性吧。因为常量的类型的确定和运算都是在编译期间完成的。老师想表达的是这个意思吗？\n\n2. 对于：iota怎么读比较准确呢？例如做技术分享的时候，直接每个字母分开来读的吗？\n\n3. 1 &lt;&lt; 2 等于 4 这种位运算 老师考虑在本课程中讲解吗？\n","like_count":6,"discussions":[{"author":{"id":1011311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6e/6f/44da923f.jpg","nickname":"邹志鹏.Joey ⁷⁷⁷","note":"","ucode":"5DE4B9097D95AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600102,"discussion_content":"没有任何语言是完美的, 不合理就是不合理, iota 就是一种自相矛盾的设计","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1674012618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604587,"discussion_content":"新特性不一定就是好特性...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676368889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532232,"discussion_content":"没错，要学习一门语言，最终目的就是学会用这门语言的思维去写这门语言的代码。go coding in go way. 而不为go coding in c way, or java way.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637560977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638160,"discussion_content":" 明明有可读性更好的写法非得这么干，你什么场景用到过这个特性？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709287496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342835,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1650502078,"is_pvip":true,"replies":[{"id":125285,"content":"这里指类型安全。\n\n提到类型安全，我们需要先说一下什么是类型安全。类型安全是一个计算机科学中的概念，主要指编程语言阻止或防止类型错误的程度水平。比如将一个字符串类型变量传递给一个接受int类型参数的函数时，语言编译器是否能检测出问题。\n\n如果你学过C语言，你就知道宏是在预处理阶段仅仅是做的字符串替换。也就是说宏定义的所谓常量就是一个“字符串”，没有携带任何类型信息，即便对一个函数原型为int Foo(int num)的函数进行如下调用：\n\n#define NUM   &quot;5&quot;\n\nvoid Foo(int num) {\n\t\tprintf(&quot;num = %d\\n&quot;, num);\n}\n\nint main() {\n\t\tFoo(NUM);\n}\n\n\n调用中的NUM在预处理阶段被替换为&quot;5&quot;，但预处理过程也不会有任何报错，因为预处理阶段没有“类型”的概念。\n\n这样问题就被漏到了编译期间。编译器是否能捕捉到这个问题？不一定。在我的gcc上会给出warning。\n\n$gcc testmacro.c\ntestmacro.c:12:7: warning: incompatible pointer to integer conversion passing &#39;char [2]&#39; to parameter of type &#39;int&#39;\n      [-Wint-conversion]\n                Foo(NUM);\n                    ^~~\ntestmacro.c:5:15: note: expanded from macro &#39;NUM&#39;\n#define NUM   &quot;5&quot;\n              ^~~\ntestmacro.c:7:14: note: passing argument to parameter &#39;num&#39; here\nvoid Foo(int num) {\n             ^\n1 warning generated.\n\n但是如果程序员忽略warning，这部分错误就会留到 程序运行期间。\n\n运行这个例子：\n\n$a.out             \nnum = 62984116","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650593015,"ip_address":"","comment_id":342835,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，请教一个问题，文中提到c语言借助宏定义字面值的形式作为常量类型，是在预编译阶段处理的，但是具有不安全性，请问这个不安全性怎么理解呢","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566055,"discussion_content":"这里指类型安全。\n\n提到类型安全，我们需要先说一下什么是类型安全。类型安全是一个计算机科学中的概念，主要指编程语言阻止或防止类型错误的程度水平。比如将一个字符串类型变量传递给一个接受int类型参数的函数时，语言编译器是否能检测出问题。\n\n如果你学过C语言，你就知道宏是在预处理阶段仅仅是做的字符串替换。也就是说宏定义的所谓常量就是一个“字符串”，没有携带任何类型信息，即便对一个函数原型为int Foo(int num)的函数进行如下调用：\n\n#define NUM   &#34;5&#34;\n\nvoid Foo(int num) {\n\t\tprintf(&#34;num = %d\\n&#34;, num);\n}\n\nint main() {\n\t\tFoo(NUM);\n}\n\n\n调用中的NUM在预处理阶段被替换为&#34;5&#34;，但预处理过程也不会有任何报错，因为预处理阶段没有“类型”的概念。\n\n这样问题就被漏到了编译期间。编译器是否能捕捉到这个问题？不一定。在我的gcc上会给出warning。\n\n$gcc testmacro.c\ntestmacro.c:12:7: warning: incompatible pointer to integer conversion passing &#39;char [2]&#39; to parameter of type &#39;int&#39;\n      [-Wint-conversion]\n                Foo(NUM);\n                    ^~~\ntestmacro.c:5:15: note: expanded from macro &#39;NUM&#39;\n#define NUM   &#34;5&#34;\n              ^~~\ntestmacro.c:7:14: note: passing argument to parameter &#39;num&#39; here\nvoid Foo(int num) {\n             ^\n1 warning generated.\n\n但是如果程序员忽略warning，这部分错误就会留到 程序运行期间。\n\n运行这个例子：\n\n$a.out             \nnum = 62984116","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650593015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":578512,"discussion_content":"老师的课程讲的好之外，回答问题也很仔细啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656842591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":566055,"ip_address":"","group_id":0},"score":578512,"extra":""}]}]},{"had_liked":false,"id":321280,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1636735349,"is_pvip":false,"replies":[{"id":116793,"content":"good。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966261,"ip_address":"","comment_id":321280,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"当你定义的值是一些固定值，比如端口或者进城的时候。或者就是那个数特别大","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530259,"discussion_content":"good。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321145,"user_name":"Geek_b6da5d","can_delete":false,"product_type":"c1","uid":2840222,"ip_address":"","ucode":"5DD79D2367ADA4","user_header":"","comment_is_top":false,"comment_ctime":1636688317,"is_pvip":false,"replies":[{"id":116783,"content":"可以的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636953631,"ip_address":"","comment_id":321145,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"颜色rgba，各种size等，都需要显式字面值","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530259,"discussion_content":"good。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356999,"user_name":"冯仁彬","can_delete":false,"product_type":"c1","uid":2960877,"ip_address":"辽宁","ucode":"6E5CA08BC6366B","user_header":"","comment_is_top":false,"comment_ctime":1662815615,"is_pvip":false,"replies":[{"id":130004,"content":"go没有enum类型，可以用int型常量来模拟，可结合iota。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663098747,"ip_address":"辽宁","comment_id":356999,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"枚举经常会用到负数，go中怎么定义呢","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587489,"discussion_content":"go没有enum类型，可以用int型常量来模拟，可结合iota。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663098747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351161,"user_name":"zzy","can_delete":false,"product_type":"c1","uid":1805408,"ip_address":"","ucode":"3D7EC623EB8204","user_header":"https://static001.geekbang.org/account/avatar/00/1b/8c/60/58b6c39e.jpg","comment_is_top":false,"comment_ctime":1657584203,"is_pvip":false,"replies":[{"id":127786,"content":"go语法连枚举类型都不支持，只是用常量“间接实现”了枚举值。你说的复杂枚举就更不支持了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657700000,"ip_address":"","comment_id":351161,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"那go中是否支持复杂枚举呢，类似java中的，比如枚举中每个个体有name，code等","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579815,"discussion_content":"go语法连枚举类型都不支持，只是用常量“间接实现”了枚举值。你说的复杂枚举就更不支持了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657700000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342834,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1650501799,"is_pvip":true,"replies":[{"id":125271,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650549199,"ip_address":"","comment_id":342834,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"通过这节课的学习，我对go语言常量有了更深入的认识，尤其是文中对iota的讲解，解决了我很多困惑。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579815,"discussion_content":"go语法连枚举类型都不支持，只是用常量“间接实现”了枚举值。你说的复杂枚举就更不支持了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657700000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321083,"user_name":"火夫","can_delete":false,"product_type":"c1","uid":1035921,"ip_address":"","ucode":"B298242290A430","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/91/d6cba3c9.jpg","comment_is_top":false,"comment_ctime":1636653936,"is_pvip":false,"replies":[{"id":116756,"content":"没错，也有一些场合不适于使用iota。你提到的syscall场合算是一个。因为系统调用的编号以及错误码值几乎形成了标准，直接用原值更好，也方便查找。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636929659,"ip_address":"","comment_id":321083,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"个人觉得iota在一些场景下是方便一些，但更关键的在于代码可读性要好。像标准库syscall下有大量定义的常量，如果使用iota会看得头晕，心智负担太大。","like_count":32,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530212,"discussion_content":"没错，也有一些场合不适于使用iota。你提到的syscall场合算是一个。因为系统调用的编号以及错误码值几乎形成了标准，直接用原值更好，也方便查找。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636929659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638769,"discussion_content":"十分鸡肋","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709890680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337084,"user_name":"ivhong","can_delete":false,"product_type":"c1","uid":2659871,"ip_address":"","ucode":"9947B228807AC9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","comment_is_top":false,"comment_ctime":1646614550,"is_pvip":false,"replies":[{"id":123244,"content":"好问题！我的理解是：变量避免隐式转换是消除类型不安全的问题。而常量本身是不可改变的，不存在安全问题，untyped常量的“隐式”可以理解为一种“语法糖”。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646723929,"ip_address":"","comment_id":337084,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师您好，我有个疑惑，望老师有时间帮忙解答一下。\ngo在普通类型变量计算时有意的取掉了隐式类型转换，而在常量计算时又有意的加上隐式类型转换，为什么要“特意”的区别设计呢？","like_count":24,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555026,"discussion_content":"好问题！我的理解是：变量避免隐式转换是消除类型不安全的问题。而常量本身是不可改变的，不存在安全问题，untyped常量的“隐式”可以理解为一种“语法糖”。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1646723929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322547,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1637479721,"is_pvip":false,"replies":[{"id":117151,"content":"没错，要学习一门语言，最终目的就是学会用这门语言的思维去写这门语言的代码。go coding in go way. 而不为go coding in c way, or java way.","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637560977,"ip_address":"","comment_id":322547,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"有人老觉得 iota 没用，或者用的不多，但是在我看来，那可能是拿 Go 来实现了别的语言也可实现的一套，我觉得选择一门语言，更多是选择这门语言拥有的一些新特性，然后使用这些新特性。","like_count":11,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555026,"discussion_content":"好问题！我的理解是：变量避免隐式转换是消除类型不安全的问题。而常量本身是不可改变的，不存在安全问题，untyped常量的“隐式”可以理解为一种“语法糖”。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1646723929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321281,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1636735686,"is_pvip":false,"replies":[{"id":116795,"content":"1. 差不多\n2. iota的确是一个单词，表示“极微小”的意思。标准读音是 [aɪ&#39;oʊtə] . 不过你也知道，很多程序员界的术语都读乱了，就像nginx这个词读啥的都有。\n3. 篇幅有限，位运算没列入专题讲解。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966589,"ip_address":"","comment_id":321281,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bai 老师的每篇文章都很精彩。以下困惑，麻烦有空解答一下：\n\n1. 文中说：“但由于转型的对象是一个常量，所以这并不会引发类型安全问题，Go 编译器会保证这一转型的安全性。” 我理解的是Go编译器在编译阶段就能发现类型错误的问题，也就从而保证了类型转换的安全性吧。因为常量的类型的确定和运算都是在编译期间完成的。老师想表达的是这个意思吗？\n\n2. 对于：iota怎么读比较准确呢？例如做技术分享的时候，直接每个字母分开来读的吗？\n\n3. 1 &lt;&lt; 2 等于 4 这种位运算 老师考虑在本课程中讲解吗？\n","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530260,"discussion_content":"1. 差不多\n2. iota的确是一个单词，表示“极微小”的意思。标准读音是 [aɪ&amp;#39;oʊtə] . 不过你也知道，很多程序员界的术语都读乱了，就像nginx这个词读啥的都有。\n3. 篇幅有限，位运算没列入专题讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1639787,"avatar":"https://static001.geekbang.org/account/avatar/00/19/05/6b/d9d6d68b.jpg","nickname":"Vettel","note":"","ucode":"FB3E71DD1E8E7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543730,"discussion_content":"位运算属于计算机基础，没必要在这个课上讲了吧。可以学习下计算机组成原理相关的课程","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641287469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1639787,"avatar":"https://static001.geekbang.org/account/avatar/00/19/05/6b/d9d6d68b.jpg","nickname":"Vettel","note":"","ucode":"FB3E71DD1E8E7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543824,"discussion_content":"OK","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641309066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":543730,"ip_address":"","group_id":0},"score":543824,"extra":""}]},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590469,"discussion_content":"左移是乘，数是多少乘几个 2；右移是除，数是多少除几个 2。在汇编语言里就是 SAL,SAR 。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1665795591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2713687,"avatar":"https://static001.geekbang.org/account/avatar/00/29/68/57/e0fc11cf.jpg","nickname":"云上看日出","note":"","ucode":"FA64716D5B8273","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571553,"discussion_content":"用小时候学英语的读法：约塔，也就是大写希腊字母Ι的小写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652265250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2720810,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/xfclWEPQ7szTZnKqnX9icSbgDWV0VAib3Cyo8Vg0OG3Usby88ic7ZgO2ho5lj0icOWI4JeJ70zUBiaTW1xh1UCFRPqA/132","nickname":"Geek_6bdb4e","note":"","ucode":"2953D400AA5385","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554967,"discussion_content":"同有这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646703470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554913,"discussion_content":"文章与评论看完。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646658723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342835,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1650502078,"is_pvip":true,"replies":[{"id":125285,"content":"这里指类型安全。\n\n提到类型安全，我们需要先说一下什么是类型安全。类型安全是一个计算机科学中的概念，主要指编程语言阻止或防止类型错误的程度水平。比如将一个字符串类型变量传递给一个接受int类型参数的函数时，语言编译器是否能检测出问题。\n\n如果你学过C语言，你就知道宏是在预处理阶段仅仅是做的字符串替换。也就是说宏定义的所谓常量就是一个“字符串”，没有携带任何类型信息，即便对一个函数原型为int Foo(int num)的函数进行如下调用：\n\n#define NUM   &quot;5&quot;\n\nvoid Foo(int num) {\n\t\tprintf(&quot;num = %d\\n&quot;, num);\n}\n\nint main() {\n\t\tFoo(NUM);\n}\n\n\n调用中的NUM在预处理阶段被替换为&quot;5&quot;，但预处理过程也不会有任何报错，因为预处理阶段没有“类型”的概念。\n\n这样问题就被漏到了编译期间。编译器是否能捕捉到这个问题？不一定。在我的gcc上会给出warning。\n\n$gcc testmacro.c\ntestmacro.c:12:7: warning: incompatible pointer to integer conversion passing &#39;char [2]&#39; to parameter of type &#39;int&#39;\n      [-Wint-conversion]\n                Foo(NUM);\n                    ^~~\ntestmacro.c:5:15: note: expanded from macro &#39;NUM&#39;\n#define NUM   &quot;5&quot;\n              ^~~\ntestmacro.c:7:14: note: passing argument to parameter &#39;num&#39; here\nvoid Foo(int num) {\n             ^\n1 warning generated.\n\n但是如果程序员忽略warning，这部分错误就会留到 程序运行期间。\n\n运行这个例子：\n\n$a.out             \nnum = 62984116","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650593015,"ip_address":"","comment_id":342835,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，请教一个问题，文中提到c语言借助宏定义字面值的形式作为常量类型，是在预编译阶段处理的，但是具有不安全性，请问这个不安全性怎么理解呢","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530260,"discussion_content":"1. 差不多\n2. iota的确是一个单词，表示“极微小”的意思。标准读音是 [aɪ&amp;#39;oʊtə] . 不过你也知道，很多程序员界的术语都读乱了，就像nginx这个词读啥的都有。\n3. 篇幅有限，位运算没列入专题讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1639787,"avatar":"https://static001.geekbang.org/account/avatar/00/19/05/6b/d9d6d68b.jpg","nickname":"Vettel","note":"","ucode":"FB3E71DD1E8E7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543730,"discussion_content":"位运算属于计算机基础，没必要在这个课上讲了吧。可以学习下计算机组成原理相关的课程","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641287469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1639787,"avatar":"https://static001.geekbang.org/account/avatar/00/19/05/6b/d9d6d68b.jpg","nickname":"Vettel","note":"","ucode":"FB3E71DD1E8E7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543824,"discussion_content":"OK","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641309066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":543730,"ip_address":"","group_id":0},"score":543824,"extra":""}]},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590469,"discussion_content":"左移是乘，数是多少乘几个 2；右移是除，数是多少除几个 2。在汇编语言里就是 SAL,SAR 。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1665795591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2713687,"avatar":"https://static001.geekbang.org/account/avatar/00/29/68/57/e0fc11cf.jpg","nickname":"云上看日出","note":"","ucode":"FA64716D5B8273","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571553,"discussion_content":"用小时候学英语的读法：约塔，也就是大写希腊字母Ι的小写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652265250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2720810,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/xfclWEPQ7szTZnKqnX9icSbgDWV0VAib3Cyo8Vg0OG3Usby88ic7ZgO2ho5lj0icOWI4JeJ70zUBiaTW1xh1UCFRPqA/132","nickname":"Geek_6bdb4e","note":"","ucode":"2953D400AA5385","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554967,"discussion_content":"同有这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646703470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554913,"discussion_content":"文章与评论看完。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646658723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321280,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1636735349,"is_pvip":false,"replies":[{"id":116793,"content":"good。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966261,"ip_address":"","comment_id":321280,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"当你定义的值是一些固定值，比如端口或者进城的时候。或者就是那个数特别大","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566055,"discussion_content":"这里指类型安全。\n\n提到类型安全，我们需要先说一下什么是类型安全。类型安全是一个计算机科学中的概念，主要指编程语言阻止或防止类型错误的程度水平。比如将一个字符串类型变量传递给一个接受int类型参数的函数时，语言编译器是否能检测出问题。\n\n如果你学过C语言，你就知道宏是在预处理阶段仅仅是做的字符串替换。也就是说宏定义的所谓常量就是一个“字符串”，没有携带任何类型信息，即便对一个函数原型为int Foo(int num)的函数进行如下调用：\n\n#define NUM   &#34;5&#34;\n\nvoid Foo(int num) {\n\t\tprintf(&#34;num = %d\\n&#34;, num);\n}\n\nint main() {\n\t\tFoo(NUM);\n}\n\n\n调用中的NUM在预处理阶段被替换为&#34;5&#34;，但预处理过程也不会有任何报错，因为预处理阶段没有“类型”的概念。\n\n这样问题就被漏到了编译期间。编译器是否能捕捉到这个问题？不一定。在我的gcc上会给出warning。\n\n$gcc testmacro.c\ntestmacro.c:12:7: warning: incompatible pointer to integer conversion passing &#39;char [2]&#39; to parameter of type &#39;int&#39;\n      [-Wint-conversion]\n                Foo(NUM);\n                    ^~~\ntestmacro.c:5:15: note: expanded from macro &#39;NUM&#39;\n#define NUM   &#34;5&#34;\n              ^~~\ntestmacro.c:7:14: note: passing argument to parameter &#39;num&#39; here\nvoid Foo(int num) {\n             ^\n1 warning generated.\n\n但是如果程序员忽略warning，这部分错误就会留到 程序运行期间。\n\n运行这个例子：\n\n$a.out             \nnum = 62984116","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650593015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":578512,"discussion_content":"老师的课程讲的好之外，回答问题也很仔细啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656842591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":566055,"ip_address":"","group_id":0},"score":578512,"extra":""}]}]},{"had_liked":false,"id":321145,"user_name":"Geek_b6da5d","can_delete":false,"product_type":"c1","uid":2840222,"ip_address":"","ucode":"5DD79D2367ADA4","user_header":"","comment_is_top":false,"comment_ctime":1636688317,"is_pvip":false,"replies":[{"id":116783,"content":"可以的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636953631,"ip_address":"","comment_id":321145,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"颜色rgba，各种size等，都需要显式字面值","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530231,"discussion_content":"可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636953631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356999,"user_name":"冯仁彬","can_delete":false,"product_type":"c1","uid":2960877,"ip_address":"辽宁","ucode":"6E5CA08BC6366B","user_header":"","comment_is_top":false,"comment_ctime":1662815615,"is_pvip":false,"replies":[{"id":130004,"content":"go没有enum类型，可以用int型常量来模拟，可结合iota。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663098747,"ip_address":"辽宁","comment_id":356999,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"枚举经常会用到负数，go中怎么定义呢","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530231,"discussion_content":"可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636953631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351161,"user_name":"zzy","can_delete":false,"product_type":"c1","uid":1805408,"ip_address":"","ucode":"3D7EC623EB8204","user_header":"https://static001.geekbang.org/account/avatar/00/1b/8c/60/58b6c39e.jpg","comment_is_top":false,"comment_ctime":1657584203,"is_pvip":false,"replies":[{"id":127786,"content":"go语法连枚举类型都不支持，只是用常量“间接实现”了枚举值。你说的复杂枚举就更不支持了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657700000,"ip_address":"","comment_id":351161,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"那go中是否支持复杂枚举呢，类似java中的，比如枚举中每个个体有name，code等","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587489,"discussion_content":"go没有enum类型，可以用int型常量来模拟，可结合iota。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663098747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342834,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1650501799,"is_pvip":true,"replies":[{"id":125271,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650549199,"ip_address":"","comment_id":342834,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"通过这节课的学习，我对go语言常量有了更深入的认识，尤其是文中对iota的讲解，解决了我很多困惑。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565851,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650549199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321493,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1636903029,"is_pvip":false,"replies":[{"id":116794,"content":"提醒一下，如果错误码随着api已经发布，那么还是尽量不要删除，可以标识作废。否则api就是不兼容的，需要升级api大版本。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966384,"ip_address":"","comment_id":321493,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"比如错误码，经常可能根据业务的情况删除不用的错误码。增加新的错误码？有动态增删情况的场景这样定义常量不好。适合比较固定。或者只增加的情况","like_count":3},{"had_liked":false,"id":321109,"user_name":"用0和1改变自己","can_delete":false,"product_type":"c1","uid":1527530,"ip_address":"","ucode":"42B8F6ECF6BDD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lfMbV8RibrhFxjILg4550cZiaay64mTh5Zibon64TiaicC8jDMEK7VaXOkllHSpS582Jl1SUHm6Jib2AticVlHibiaBvUOA/132","comment_is_top":false,"comment_ctime":1636682372,"is_pvip":false,"replies":[{"id":116782,"content":"思路基本正确。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636953581,"ip_address":"","comment_id":321109,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"当枚举常量是需要固定值，且业务上不可更改时，用显式字面值，这样可避免后续更改(插入或删除）带来的麻烦，这样的想法对吗？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530219,"discussion_content":"思路基本正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636953581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364568,"user_name":"子杨","can_delete":false,"product_type":"c1","uid":1236803,"ip_address":"辽宁","ucode":"EA7555EEE6DECE","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/43/1aa8708a.jpg","comment_is_top":false,"comment_ctime":1671150681,"is_pvip":false,"replies":[{"id":132760,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1671350306,"ip_address":"辽宁","comment_id":364568,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"以前只知道 Go 语言可以用 iota 实现自增，没想到它的基础来自于 Go 语言常量自动重复上一行。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597007,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671350306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1556406,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/iaXcnYOjwO39gSSyo0CprNeLxx6OF80KqPz69ErJKmibMSxn5YeM4VGD6ATBnUR045ibsYjQGlAAQo5r3iaTPydTbA/132","nickname":"docker131313","note":"","ucode":"5B24734D18B57C","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646385,"discussion_content":"itoa是内置的自增标识fu","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717839945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350454,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1656921792,"is_pvip":false,"replies":[{"id":127489,"content":"安德斯·海尔斯伯格？设计出来叫Go#？😁","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656940159,"ip_address":"","comment_id":350454,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"go中的枚举稍显复杂了，看到这里内心产生一个想法，安德斯·海尔斯伯格来设计go会怎样","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578677,"discussion_content":"安德斯·海尔斯伯格？设计出来叫Go#？😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656940159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329415,"user_name":"Geek_fightingDC","can_delete":false,"product_type":"c1","uid":1843027,"ip_address":"","ucode":"EF7F7316ADFF49","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83equSjO9AVmwhvyhTZzk6icNTSED9s1sUdFZSfqTHq2PmZ4MibMFX58C8qDW2a4cjiaFvAdiaRchsLz54g/132","comment_is_top":false,"comment_ctime":1641344406,"is_pvip":false,"replies":[{"id":120464,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642029232,"ip_address":"","comment_id":329415,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"当常量值的大小相差较大时，更适合使用常量字面值","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545656,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642029232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321307,"user_name":"Sam Fu","can_delete":false,"product_type":"c1","uid":1112676,"ip_address":"","ucode":"EA285A4943271F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","comment_is_top":false,"comment_ctime":1636775557,"is_pvip":false,"replies":[{"id":116716,"content":"无论是go标准库还是一些知名开源go项目，iota都有广泛使用的。这是go惯用法，建议多多关注。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636899145,"ip_address":"","comment_id":321307,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师还是多讲一下底层原理和最佳实践吧。itoa那种从没见人使用过。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530268,"discussion_content":"无论是go标准库还是一些知名开源go项目，iota都有广泛使用的。这是go惯用法，建议多多关注。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636899145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321218,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1636711790,"is_pvip":true,"replies":[{"id":116791,"content":"“像例子中那样在已有颜色前插入新的颜色的话会改变已有颜色的值” -- 这样的环节可能存在于api发布前的active development环节。\n\n如果是api发布后，要插入颜色值，那么就要在api版本上做文章了。\n\n另外这里仅是一个demo，为的是配合课程讲解。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966171,"ip_address":"","comment_id":321218,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"文中颜色的例子不会有问题吗？因为颜色名称都是大写字母开头，所以有可能是公开API的一部分。像例子中那样在已有颜色前插入新的颜色的话会改变已有颜色的值，如果API的使用者没有跟着更新的话……\n\n就好比定义protobuf消息时，发布出去的字段编号就不应该去修改了。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530245,"discussion_content":"“像例子中那样在已有颜色前插入新的颜色的话会改变已有颜色的值” -- 这样的环节可能存在于api发布前的active development环节。\n\n如果是api发布后，要插入颜色值，那么就要在api版本上做文章了。\n\n另外这里仅是一个demo，为的是配合课程讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369480,"user_name":"赵勇","can_delete":false,"product_type":"c1","uid":1359918,"ip_address":"北京","ucode":"C68B18A2EAB885","user_header":"https://static001.geekbang.org/account/avatar/00/14/c0/2e/ceabc00e.jpg","comment_is_top":false,"comment_ctime":1677577385,"is_pvip":false,"replies":[{"id":134690,"content":"严格来说，go并没有枚举类型，这里只是用const来“模拟”枚举。所以将常量传入函数并不能像c++那样用枚举类型来约束参数类型，而只能用常量自己的类型来约束。比如：常量是string类型的，如果传给函数foo(int)，那么会报错！只能传给函数foo(string)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1677737348,"ip_address":"北京","comment_id":369480,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"枚举这块,  比如在 c++ 中,  enum class EType { e1, e2, e3} 然后用在 函数形参等场景中eg: void func(EType type). 算是对接口参数的一种强约束. 如果是go中, 是要这么写吗?  func(type int) 吗? 这样不会让使用这个接口的人员困惑吗? 还是说有其他更好的实现?  ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607281,"discussion_content":"严格来说，go并没有枚举类型，这里只是用const来“模拟”枚举。所以将常量传入函数并不能像c++那样用枚举类型来约束参数类型，而只能用常量自己的类型来约束。比如：常量是string类型的，如果传给函数foo(int)，那么会报错！只能传给函数foo(string)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677737348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362826,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":2542376,"ip_address":"美国","ucode":"5F224DDAC94DFF","user_header":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","comment_is_top":false,"comment_ctime":1668942521,"is_pvip":false,"replies":[{"id":131960,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1669017107,"ip_address":"美国","comment_id":362826,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"iota 不是单词的缩写。\n\n含义如下 https:&#47;&#47;stackoverflow.com&#47;questions&#47;9244879&#47;what-does-iota-of-stdiota-stand-for","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607281,"discussion_content":"严格来说，go并没有枚举类型，这里只是用const来“模拟”枚举。所以将常量传入函数并不能像c++那样用枚举类型来约束参数类型，而只能用常量自己的类型来约束。比如：常量是string类型的，如果传给函数foo(int)，那么会报错！只能传给函数foo(string)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677737348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350599,"user_name":"swift","can_delete":false,"product_type":"c1","uid":1156148,"ip_address":"","ucode":"B243DCD10B04F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/34/0ab08db6.jpg","comment_is_top":false,"comment_ctime":1657030263,"is_pvip":false,"replies":[{"id":127550,"content":"没错。 \n\n基于Go常量的“枚举”并非是一个枚举类型，因此无法限制取值范围。需要自行校验。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657091786,"ip_address":"","comment_id":350599,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"其他语言的枚举除了定义常量，本身也是个类型，还具备约束取值集合范围的效果。Go的常量要自行校验了吧？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594363,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669017107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321493,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1636903029,"is_pvip":false,"replies":[{"id":116794,"content":"提醒一下，如果错误码随着api已经发布，那么还是尽量不要删除，可以标识作废。否则api就是不兼容的，需要升级api大版本。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966384,"ip_address":"","comment_id":321493,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"比如错误码，经常可能根据业务的情况删除不用的错误码。增加新的错误码？有动态增删情况的场景这样定义常量不好。适合比较固定。或者只增加的情况","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530304,"discussion_content":"提醒一下，如果错误码随着api已经发布，那么还是尽量不要删除，可以标识作废。否则api就是不兼容的，需要升级api大版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321109,"user_name":"用0和1改变自己","can_delete":false,"product_type":"c1","uid":1527530,"ip_address":"","ucode":"42B8F6ECF6BDD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lfMbV8RibrhFxjILg4550cZiaay64mTh5Zibon64TiaicC8jDMEK7VaXOkllHSpS582Jl1SUHm6Jib2AticVlHibiaBvUOA/132","comment_is_top":false,"comment_ctime":1636682372,"is_pvip":false,"replies":[{"id":116782,"content":"思路基本正确。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636953581,"ip_address":"","comment_id":321109,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"当枚举常量是需要固定值，且业务上不可更改时，用显式字面值，这样可避免后续更改(插入或删除）带来的麻烦，这样的想法对吗？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530304,"discussion_content":"提醒一下，如果错误码随着api已经发布，那么还是尽量不要删除，可以标识作废。否则api就是不兼容的，需要升级api大版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364568,"user_name":"子杨","can_delete":false,"product_type":"c1","uid":1236803,"ip_address":"辽宁","ucode":"EA7555EEE6DECE","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/43/1aa8708a.jpg","comment_is_top":false,"comment_ctime":1671150681,"is_pvip":false,"replies":[{"id":132760,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1671350306,"ip_address":"辽宁","comment_id":364568,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"以前只知道 Go 语言可以用 iota 实现自增，没想到它的基础来自于 Go 语言常量自动重复上一行。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530219,"discussion_content":"思路基本正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636953581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350454,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1656921792,"is_pvip":false,"replies":[{"id":127489,"content":"安德斯·海尔斯伯格？设计出来叫Go#？😁","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656940159,"ip_address":"","comment_id":350454,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"go中的枚举稍显复杂了，看到这里内心产生一个想法，安德斯·海尔斯伯格来设计go会怎样","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597007,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671350306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1556406,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/iaXcnYOjwO39gSSyo0CprNeLxx6OF80KqPz69ErJKmibMSxn5YeM4VGD6ATBnUR045ibsYjQGlAAQo5r3iaTPydTbA/132","nickname":"docker131313","note":"","ucode":"5B24734D18B57C","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646385,"discussion_content":"itoa是内置的自增标识fu","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717839945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329415,"user_name":"Geek_fightingDC","can_delete":false,"product_type":"c1","uid":1843027,"ip_address":"","ucode":"EF7F7316ADFF49","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83equSjO9AVmwhvyhTZzk6icNTSED9s1sUdFZSfqTHq2PmZ4MibMFX58C8qDW2a4cjiaFvAdiaRchsLz54g/132","comment_is_top":false,"comment_ctime":1641344406,"is_pvip":false,"replies":[{"id":120464,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642029232,"ip_address":"","comment_id":329415,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"当常量值的大小相差较大时，更适合使用常量字面值","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578677,"discussion_content":"安德斯·海尔斯伯格？设计出来叫Go#？😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656940159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321307,"user_name":"Sam Fu","can_delete":false,"product_type":"c1","uid":1112676,"ip_address":"","ucode":"EA285A4943271F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","comment_is_top":false,"comment_ctime":1636775557,"is_pvip":false,"replies":[{"id":116716,"content":"无论是go标准库还是一些知名开源go项目，iota都有广泛使用的。这是go惯用法，建议多多关注。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636899145,"ip_address":"","comment_id":321307,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师还是多讲一下底层原理和最佳实践吧。itoa那种从没见人使用过。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545656,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642029232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321218,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1636711790,"is_pvip":true,"replies":[{"id":116791,"content":"“像例子中那样在已有颜色前插入新的颜色的话会改变已有颜色的值” -- 这样的环节可能存在于api发布前的active development环节。\n\n如果是api发布后，要插入颜色值，那么就要在api版本上做文章了。\n\n另外这里仅是一个demo，为的是配合课程讲解。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966171,"ip_address":"","comment_id":321218,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"文中颜色的例子不会有问题吗？因为颜色名称都是大写字母开头，所以有可能是公开API的一部分。像例子中那样在已有颜色前插入新的颜色的话会改变已有颜色的值，如果API的使用者没有跟着更新的话……\n\n就好比定义protobuf消息时，发布出去的字段编号就不应该去修改了。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530268,"discussion_content":"无论是go标准库还是一些知名开源go项目，iota都有广泛使用的。这是go惯用法，建议多多关注。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636899145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369480,"user_name":"赵勇","can_delete":false,"product_type":"c1","uid":1359918,"ip_address":"北京","ucode":"C68B18A2EAB885","user_header":"https://static001.geekbang.org/account/avatar/00/14/c0/2e/ceabc00e.jpg","comment_is_top":false,"comment_ctime":1677577385,"is_pvip":false,"replies":[{"id":134690,"content":"严格来说，go并没有枚举类型，这里只是用const来“模拟”枚举。所以将常量传入函数并不能像c++那样用枚举类型来约束参数类型，而只能用常量自己的类型来约束。比如：常量是string类型的，如果传给函数foo(int)，那么会报错！只能传给函数foo(string)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1677737348,"ip_address":"北京","comment_id":369480,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"枚举这块,  比如在 c++ 中,  enum class EType { e1, e2, e3} 然后用在 函数形参等场景中eg: void func(EType type). 算是对接口参数的一种强约束. 如果是go中, 是要这么写吗?  func(type int) 吗? 这样不会让使用这个接口的人员困惑吗? 还是说有其他更好的实现?  ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530245,"discussion_content":"“像例子中那样在已有颜色前插入新的颜色的话会改变已有颜色的值” -- 这样的环节可能存在于api发布前的active development环节。\n\n如果是api发布后，要插入颜色值，那么就要在api版本上做文章了。\n\n另外这里仅是一个demo，为的是配合课程讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362826,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":2542376,"ip_address":"美国","ucode":"5F224DDAC94DFF","user_header":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","comment_is_top":false,"comment_ctime":1668942521,"is_pvip":false,"replies":[{"id":131960,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1669017107,"ip_address":"美国","comment_id":362826,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"iota 不是单词的缩写。\n\n含义如下 https:&#47;&#47;stackoverflow.com&#47;questions&#47;9244879&#47;what-does-iota-of-stdiota-stand-for","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594363,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669017107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350599,"user_name":"swift","can_delete":false,"product_type":"c1","uid":1156148,"ip_address":"","ucode":"B243DCD10B04F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/34/0ab08db6.jpg","comment_is_top":false,"comment_ctime":1657030263,"is_pvip":false,"replies":[{"id":127550,"content":"没错。 \n\n基于Go常量的“枚举”并非是一个枚举类型，因此无法限制取值范围。需要自行校验。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657091786,"ip_address":"","comment_id":350599,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"其他语言的枚举除了定义常量，本身也是个类型，还具备约束取值集合范围的效果。Go的常量要自行校验了吧？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578919,"discussion_content":"没错。 \n\n基于Go常量的“枚举”并非是一个枚举类型，因此无法限制取值范围。需要自行校验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657091786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350569,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1657008329,"is_pvip":false,"replies":[{"id":127549,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657091642,"ip_address":"","comment_id":350569,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"文章加评论看完+手写代码，印象更深","like_count":1},{"had_liked":false,"id":332557,"user_name":"JabariH","can_delete":false,"product_type":"c1","uid":1983181,"ip_address":"","ucode":"F7CC3390CDB6AA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/42/cd/09b568fc.jpg","comment_is_top":false,"comment_ctime":1643341213,"is_pvip":false,"replies":[{"id":121520,"content":"我在macos上，go 1.17版本中，用你的源码例子run了一下，const c = a + b这一行会有编译错误啊？不能通过编译：invalid operation: a + b (mismatched types myInt and int)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643419917,"ip_address":"","comment_id":332557,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"遇到个问题，请各位大佬指教：\n&#47;&#47; 常量声明的同底类型不同类型变量可以相加\ntype myInt int\nconst a myInt = 3\nconst b int = 2\n\nconst c = a+b\nprintln(c) &#47;&#47; 5\nreflect.TypeOf(c) &#47;&#47; int\n\n&#47;&#47; 变量声明的同底类型不同类型变量不可以相加\ntype myInt int\nvar a myInt = 3\nvar b int = 2\n\nconst c = a+b &#47;&#47; repl.go:6:13: mismatched types in binary operation + between &lt;main.myInt&gt; and &lt;int&gt;: a + b\n\n这是为什么呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548835,"discussion_content":"我在macos上，go 1.17版本中，用你的源码例子run了一下，const c = a + b这一行会有编译错误啊？不能通过编译：invalid operation: a + b (mismatched types myInt and int)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643419917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1041700,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e5/24/fa2c7f3e.jpg","nickname":"wimi","note":"","ucode":"CD3B5CB8D1F14A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592614,"discussion_content":"必须通过将常量 a 显式转型为 int ,const c = int(a) + b","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667534462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390489,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715440224,"is_pvip":false,"replies":[{"id":142089,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715870107,"ip_address":"辽宁","comment_id":390489,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"本节介绍了\n1、go常量为什么原生支持——增加类型安全、类型检查、调试等等（PS：也是现代高级语言标配了）\n2、无类型常量与隐式转换——本质上语法糖，让常量编写更简单，然后编译器根据表达式里其他标识符的类型进行隐式转换，如果能正常转换成功，则说明类型是匹配的。\n3、常量值的非空重复与iota机制——为了统一枚举和常量，枚举值通过这样的约定能够更加简化，适合对枚举值没有语义限定，比如自增数字之类。而iota代表该常量项所处的枚举行偏移量（从0开始），可以用&#39;_&#39;占位替代。\n\n思考题：iota不适合什么场景？\n常量值没有太多自增特性，比如错误码描述这类常量。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645210,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715870107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384707,"user_name":"Geek_73c432","can_delete":false,"product_type":"c1","uid":2869118,"ip_address":"广东","ucode":"3E11EB02B14DE0","user_header":"","comment_is_top":false,"comment_ctime":1701357234,"is_pvip":false,"replies":[{"id":140336,"content":"一个简单的例子，如果支持变量类型隐式转换，下面的示例：\n\nvar a int32 = 66666\nvar b int16 = a\n\n就会导致b的值不是你所需要的。而不支持隐式转换的go会在编译阶段就会发现问题，告诉你应该为b选择一个更适合的类型。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1701821997,"ip_address":"美国","comment_id":384707,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"“变量避免隐式转换是消除类型不安全的问题。而常量本身是不可改变的，不存在安全问题”\n\n请问如何理解这句话？为什么说变量隐式转型会导致类型不安全？可以结合例子说明吗？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633089,"discussion_content":"一个简单的例子，如果支持变量类型隐式转换，下面的示例：\n\nvar a int32 = 66666\nvar b int16 = a\n\n就会导致b的值不是你所需要的。而不支持隐式转换的go会在编译阶段就会发现问题，告诉你应该为b选择一个更适合的类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701821997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377983,"user_name":"lufofire","can_delete":false,"product_type":"c1","uid":3218954,"ip_address":"广东","ucode":"CA12C6E772C7BD","user_header":"https://static001.geekbang.org/account/avatar/00/31/1e/0a/159b2129.jpg","comment_is_top":false,"comment_ctime":1689639185,"is_pvip":false,"replies":[{"id":137748,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1689647546,"ip_address":"北京","comment_id":377983,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"深入浅出，例子很有代表性，一下就明白了","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623572,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689647546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375744,"user_name":"111","can_delete":false,"product_type":"c1","uid":2046189,"ip_address":"北京","ucode":"7ACA555BDC139B","user_header":"","comment_is_top":false,"comment_ctime":1685945241,"is_pvip":false,"replies":[{"id":137130,"content":"你提到的“降低可读性”如何体现的呢？是不好理解？不如直接赋值straightforward?","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685947986,"ip_address":"北京","comment_id":375744,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"iota是某个const块的行索引吧？感觉 iota 降低了代码的可读性  ","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620207,"discussion_content":"你提到的“降低可读性”如何体现的呢？是不好理解？不如直接赋值straightforward?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685947986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638135,"discussion_content":"搞的太复杂了，差评","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709269847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321211,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1636708828,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"所谓的“无类型”常量其实是有默认类型的，正因为有类型才会需要隐式的“类型转换”","like_count":6},{"had_liked":false,"id":321165,"user_name":"TonyGao","can_delete":false,"product_type":"c1","uid":2827964,"ip_address":"","ucode":"75E9F13CB7C66D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","comment_is_top":false,"comment_ctime":1636697683,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"猛一看iota还以为是类似C++填充序列用的，原来只是个常量计数器，配合简单的数学表达式生成所期望的枚举或常量&#47;枚举值","like_count":3},{"had_liked":false,"id":321347,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1636804680,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":4,"product_id":100093501,"comment_content":"没想到小小的常量，在go里面居然那么多特点。\niota看起来挺神奇的，但其实习惯都显式写出来的我们似乎没那么吸引。而且，想一些非数值型的，iota显然也不那么胜任，比如颜色值、比例等~","like_count":2},{"had_liked":false,"id":321202,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1636706029,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"在那种定义 比较大的数值的时候，比如：8906，&quot;ADMIN&quot; 这种常量值用字面量比较符合","like_count":2,"discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414430,"discussion_content":"请问你这里的“ADMIN”代表的是什么意思呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636734945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350569,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1657008329,"is_pvip":false,"replies":[{"id":127549,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657091642,"ip_address":"","comment_id":350569,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"文章加评论看完+手写代码，印象更深","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578918,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657091642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332557,"user_name":"JabariH","can_delete":false,"product_type":"c1","uid":1983181,"ip_address":"","ucode":"F7CC3390CDB6AA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/42/cd/09b568fc.jpg","comment_is_top":false,"comment_ctime":1643341213,"is_pvip":false,"replies":[{"id":121520,"content":"我在macos上，go 1.17版本中，用你的源码例子run了一下，const c = a + b这一行会有编译错误啊？不能通过编译：invalid operation: a + b (mismatched types myInt and int)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643419917,"ip_address":"","comment_id":332557,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"遇到个问题，请各位大佬指教：\n&#47;&#47; 常量声明的同底类型不同类型变量可以相加\ntype myInt int\nconst a myInt = 3\nconst b int = 2\n\nconst c = a+b\nprintln(c) &#47;&#47; 5\nreflect.TypeOf(c) &#47;&#47; int\n\n&#47;&#47; 变量声明的同底类型不同类型变量不可以相加\ntype myInt int\nvar a myInt = 3\nvar b int = 2\n\nconst c = a+b &#47;&#47; repl.go:6:13: mismatched types in binary operation + between &lt;main.myInt&gt; and &lt;int&gt;: a + b\n\n这是为什么呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578918,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657091642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390489,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715440224,"is_pvip":false,"replies":[{"id":142089,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715870107,"ip_address":"辽宁","comment_id":390489,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"本节介绍了\n1、go常量为什么原生支持——增加类型安全、类型检查、调试等等（PS：也是现代高级语言标配了）\n2、无类型常量与隐式转换——本质上语法糖，让常量编写更简单，然后编译器根据表达式里其他标识符的类型进行隐式转换，如果能正常转换成功，则说明类型是匹配的。\n3、常量值的非空重复与iota机制——为了统一枚举和常量，枚举值通过这样的约定能够更加简化，适合对枚举值没有语义限定，比如自增数字之类。而iota代表该常量项所处的枚举行偏移量（从0开始），可以用&#39;_&#39;占位替代。\n\n思考题：iota不适合什么场景？\n常量值没有太多自增特性，比如错误码描述这类常量。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548835,"discussion_content":"我在macos上，go 1.17版本中，用你的源码例子run了一下，const c = a + b这一行会有编译错误啊？不能通过编译：invalid operation: a + b (mismatched types myInt and int)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643419917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1041700,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e5/24/fa2c7f3e.jpg","nickname":"wimi","note":"","ucode":"CD3B5CB8D1F14A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592614,"discussion_content":"必须通过将常量 a 显式转型为 int ,const c = int(a) + b","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667534462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384707,"user_name":"Geek_73c432","can_delete":false,"product_type":"c1","uid":2869118,"ip_address":"广东","ucode":"3E11EB02B14DE0","user_header":"","comment_is_top":false,"comment_ctime":1701357234,"is_pvip":false,"replies":[{"id":140336,"content":"一个简单的例子，如果支持变量类型隐式转换，下面的示例：\n\nvar a int32 = 66666\nvar b int16 = a\n\n就会导致b的值不是你所需要的。而不支持隐式转换的go会在编译阶段就会发现问题，告诉你应该为b选择一个更适合的类型。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1701821997,"ip_address":"美国","comment_id":384707,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"“变量避免隐式转换是消除类型不安全的问题。而常量本身是不可改变的，不存在安全问题”\n\n请问如何理解这句话？为什么说变量隐式转型会导致类型不安全？可以结合例子说明吗？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645210,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715870107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377983,"user_name":"lufofire","can_delete":false,"product_type":"c1","uid":3218954,"ip_address":"广东","ucode":"CA12C6E772C7BD","user_header":"https://static001.geekbang.org/account/avatar/00/31/1e/0a/159b2129.jpg","comment_is_top":false,"comment_ctime":1689639185,"is_pvip":false,"replies":[{"id":137748,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1689647546,"ip_address":"北京","comment_id":377983,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"深入浅出，例子很有代表性，一下就明白了","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633089,"discussion_content":"一个简单的例子，如果支持变量类型隐式转换，下面的示例：\n\nvar a int32 = 66666\nvar b int16 = a\n\n就会导致b的值不是你所需要的。而不支持隐式转换的go会在编译阶段就会发现问题，告诉你应该为b选择一个更适合的类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701821997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375744,"user_name":"111","can_delete":false,"product_type":"c1","uid":2046189,"ip_address":"北京","ucode":"7ACA555BDC139B","user_header":"","comment_is_top":false,"comment_ctime":1685945241,"is_pvip":false,"replies":[{"id":137130,"content":"你提到的“降低可读性”如何体现的呢？是不好理解？不如直接赋值straightforward?","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685947986,"ip_address":"北京","comment_id":375744,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"iota是某个const块的行索引吧？感觉 iota 降低了代码的可读性  ","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623572,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689647546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321211,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1636708828,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"所谓的“无类型”常量其实是有默认类型的，正因为有类型才会需要隐式的“类型转换”","like_count":6},{"had_liked":false,"id":321165,"user_name":"TonyGao","can_delete":false,"product_type":"c1","uid":2827964,"ip_address":"","ucode":"75E9F13CB7C66D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","comment_is_top":false,"comment_ctime":1636697683,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"猛一看iota还以为是类似C++填充序列用的，原来只是个常量计数器，配合简单的数学表达式生成所期望的枚举或常量&#47;枚举值","like_count":3},{"had_liked":false,"id":321347,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1636804680,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":4,"product_id":100093501,"comment_content":"没想到小小的常量，在go里面居然那么多特点。\niota看起来挺神奇的，但其实习惯都显式写出来的我们似乎没那么吸引。而且，想一些非数值型的，iota显然也不那么胜任，比如颜色值、比例等~","like_count":2},{"had_liked":false,"id":321202,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1636706029,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"在那种定义 比较大的数值的时候，比如：8906，&quot;ADMIN&quot; 这种常量值用字面量比较符合","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620207,"discussion_content":"你提到的“降低可读性”如何体现的呢？是不好理解？不如直接赋值straightforward?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685947986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638135,"discussion_content":"搞的太复杂了，差评","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709269847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321105,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1636681666,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"没有明显规则的枚举常量 iota 可能用起来就非常不舒服。看完这节我好像用了假的 Go 语言，我的笔记都是这可以吗？这编译不过吧，特别是隐式转换。老师真是 Go 语言百科全书！","like_count":1},{"had_liked":false,"id":342128,"user_name":"ryanxw","can_delete":false,"product_type":"c1","uid":2119325,"ip_address":"","ucode":"0B91EAC8D06EED","user_header":"https://static001.geekbang.org/account/avatar/00/20/56/9d/4b2a7d29.jpg","comment_is_top":false,"comment_ctime":1650026812,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"nice","like_count":0},{"had_liked":false,"id":321378,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1636817812,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"iota实现开闭原则很轻松啊","like_count":0},{"had_liked":false,"id":321139,"user_name":"酥宝话不多","can_delete":false,"product_type":"c1","uid":2564698,"ip_address":"","ucode":"3B9BF256682504","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/5a/873ac981.jpg","comment_is_top":false,"comment_ctime":1636686934,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"状态码吗？","like_count":0},{"had_liked":false,"id":321105,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1636681666,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"没有明显规则的枚举常量 iota 可能用起来就非常不舒服。看完这节我好像用了假的 Go 语言，我的笔记都是这可以吗？这编译不过吧，特别是隐式转换。老师真是 Go 语言百科全书！","like_count":1},{"had_liked":false,"id":342128,"user_name":"ryanxw","can_delete":false,"product_type":"c1","uid":2119325,"ip_address":"","ucode":"0B91EAC8D06EED","user_header":"https://static001.geekbang.org/account/avatar/00/20/56/9d/4b2a7d29.jpg","comment_is_top":false,"comment_ctime":1650026812,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"nice","like_count":0},{"had_liked":false,"id":321378,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1636817812,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"iota实现开闭原则很轻松啊","like_count":0},{"had_liked":false,"id":321139,"user_name":"酥宝话不多","can_delete":false,"product_type":"c1","uid":2564698,"ip_address":"","ucode":"3B9BF256682504","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/5a/873ac981.jpg","comment_is_top":false,"comment_ctime":1636686934,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"状态码吗？","like_count":0}]}