{"id":88539,"title":"40 | 不安全编程","content":"<h1>课件及源代码地址</h1><p><a href=\"https://gitee.com/geektime-geekbang/go_learning\">https://gitee.com/geektime-geekbang/go_learning</a></p><h2>书目推荐</h2><p><a href=\"time://mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F1ycmk3uob0ryw\">《计算机程序的构造和解释》</a></p>","comments":[{"had_liked":false,"id":251447,"user_name":"fmouse","can_delete":false,"product_type":"c3","uid":1202325,"ip_address":"","ucode":"9A8858CFFAB858","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","comment_is_top":false,"comment_ctime":1601563384,"is_pvip":false,"replies":[{"id":99522,"content":"粘贴一下你的问题的代码","user_name":"作者回复","user_name_real":"蔡超","uid":1008262,"ctime":1610891411,"ip_address":"","comment_id":251447,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"为什么这里打印出来的地址有的是相同的，有的是不同的。什么情况下相同，什么情况下不同，可以解释下吗。谢谢老师。","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506495,"discussion_content":"粘贴一下你的问题的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610891411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366693,"discussion_content":"仔细看了一下视频，老师的代码也有相同地址打印出来，在 5:34，打印的最后几行，都是 0xc00000a540","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618151399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2297583,"avatar":"https://static001.geekbang.org/account/avatar/00/23/0e/ef/011d7ea0.jpg","nickname":"森美","note":"","ucode":"1BBEC7540005D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337674,"discussion_content":"盲猜：\n每个读协程与写协程各执行10次读写操作。那么就可能发生有的读协程在这10次读操作里面，有几次是读到相同的内存地址。也就是说当前shareBufPtr指向的内存地址里面的dataPtr还没有来得及被新的内存地址给覆盖掉，所以就造成了有的读协程读取到了一样的内存地址。这应该就是并发情况下，我们无法控制多个协程之间的执行顺序的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609036638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85650,"user_name":"橙子","can_delete":false,"product_type":"c3","uid":1323159,"ip_address":"","ucode":"72AD2F3C7C7E74","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/97/cebe5b4f.jpg","comment_is_top":false,"comment_ctime":1555159511,"is_pvip":false,"replies":[{"id":30840,"content":"首先，你是你们在指针值上调用fieldByName的你可以尝试一下，会产生一个Panic。另外，由于我们的方法是定义在结构指针上的，所以要在指针对象上调用MethodByName。\n这些你都可以通过修改代码来尝试。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1555236658,"ip_address":"","comment_id":85650,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师你好，反射中reflect.ValueOf()方法的参数，在什么情况下需要传入指针类型变量？\n例如下面一段程序：\ne := &amp;Employee{&quot;1&quot;, &quot;Mike&quot;, 10}\n&#47;&#47; 按名字获取成员\nt.Logf(&quot;Name value(%[1]v), Type(%[1]T)&quot;, reflect.ValueOf(*e).FieldByName(&quot;Name&quot;))  &#47;&#47; 值类型\nreflect.ValueOf(e).MethodByName(&quot;UpdateAge&quot;).Call([]reflect.Value{reflect.ValueOf(20)})  &#47;&#47; 指针类型","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446751,"discussion_content":"首先，你是你们在指针值上调用fieldByName的你可以尝试一下，会产生一个Panic。另外，由于我们的方法是定义在结构指针上的，所以要在指针对象上调用MethodByName。\n这些你都可以通过修改代码来尝试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555236658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82984,"user_name":"登高","can_delete":false,"product_type":"c3","uid":1068600,"ip_address":"","ucode":"CD40046238BA18","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/38/3faa8377.jpg","comment_is_top":false,"comment_ctime":1554365710,"is_pvip":false,"replies":[{"id":29969,"content":"我会尽快更新代码。另外，注意一下代码的分节和课程目前是不一样的，你要以看看里面子目录。\n","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1554377893,"ip_address":"","comment_id":82984,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"github上代码很久没更新了，希望能更新下，看代码温故知新","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445803,"discussion_content":"我会尽快更新代码。另外，注意一下代码的分节和课程目前是不一样的，你要以看看里面子目录。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554377893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83510,"user_name":"强哥","can_delete":false,"product_type":"c3","uid":1206726,"ip_address":"","ucode":"3B8DC780FE4EF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/c6/513df085.jpg","comment_is_top":false,"comment_ctime":1554633359,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"期待后面有个web项目实战进行整体知识点的整合，这样对每个读者来说收益更大。","like_count":25},{"had_liked":false,"id":154520,"user_name":"疯琴","can_delete":false,"product_type":"c3","uid":1099379,"ip_address":"","ucode":"82ACAA4A27753D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/73/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1574473280,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师，1分03秒的“GO语言里面是不支持强制类型转换的”是口误吧？","like_count":4,"discussions":[{"author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187151,"discussion_content":"同类型的还是支持的，比如 int->int64\n但是数字想强制转换字符串跨类型还是不行的，估计老师说的是这个意思","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582726757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102422,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/56/62423b4c.jpg","nickname":"sharp","note":"","ucode":"7215CE28FFCBEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286152,"discussion_content":"老师的意思是不同指针类型不能强制类型转换，以为c是可以的，go需要借助unsafe","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593075907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287793,"user_name":"escray","can_delete":false,"product_type":"c3","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1618151260,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"Go 语言不支持强制类型转换，那么一旦使用了不安全指针 unsafe.Pointer 指针，是可以把它“强制”转换成任意类型指针的。\n\nunsafe 的使用场景主要是和外部的 c 程序的库\n\n另外老师在留言回复里面解答了上一课的遗留问题，方法是定义在结构指针上的，所以要在指针对象上调用 MethodByName。另外，如果在指针值上调用 fieldByName，会产生一个 Panic。\n\n我在测试的输出结果里面也看到了相同的值，代码和老师课程上的一致，暂时只能按照 @森美 同学的盲猜来解释。","like_count":2},{"had_liked":false,"id":236353,"user_name":"郭星","can_delete":false,"product_type":"c3","uid":1182219,"ip_address":"","ucode":"8A0F5DF80E0C61","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/0b/985d3800.jpg","comment_is_top":false,"comment_ctime":1595396575,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"atomic 是为了保证多协程数据共享下的原子性","like_count":1},{"had_liked":false,"id":392768,"user_name":"Geek_07ead6","can_delete":false,"product_type":"c3","uid":1714992,"ip_address":"广东","ucode":"424137ADA9AA23","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoREZlw6JWh1OXYvcKhOToBPCSqVr33Vhc0gmW9jNT3JHtW7NtaiaiaNJicjjxyVia7Oec3Qq1bzLGreQ/132","comment_is_top":false,"comment_ctime":1721725096,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"shareBuffer的值会出现多次写入覆盖的情况吗？\natomic.StorePointer()和atomic.LoadPointer()只能保证操作shareBuffer这个值的原子性，并不能保证多协程读、写shareBuffer不被写覆盖或者重复读的情况吧？","like_count":0}]}