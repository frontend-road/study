{"id":86962,"title":"34 | 聊聊重构：优秀的架构都是演进而来的","content":"<p>每个程序员心中都有一个成为架构师的梦想，那成为架构师这个目标是否“遥不可及”呢？从我的工作经历来看，我一共负责过搜狗输入法、微信等4款亿级产品的架构工作，可能有同学会好奇这些大型的App是如何做架构设计的。从我接手的这些应用的现实情况来看，看似光鲜的外表下都有一颗千疮百孔的心：各种日志随便输出、单例满天飞、生命周期混乱、线程乱创建、线程不安全这些问题随处可见。</p><p>所以你可以看到每个大型应用都背负着沉重的历史技术债务，架构师很重要的一项工作就是重构“老态龙钟”的陈旧架构。在接下来的“架构演进”模块中，我们一起学习架构该如何的重构和演进，帮助我们及时偿还这些“历史债务”。</p><p>虽然我们天天都在谈“架构”，那你有没有想过究竟什么是架构呢？</p><h2>什么是架构</h2><p>什么是架构，每个人都有自己的看法。在我看来，所谓的架构就是面对业务需求场景给出合适的解决方案，使业务能够快速迭代，从而达到“提质增效”的目标。</p><p>我先举个例子，告诉你什么是架构，以及架构的作用。我曾经为了解决UI渲染卡顿这个需求场景，我们设计了异步创建View、异步布局与主线程渲染这个架构。不过架构只是设计的抽象，对于具体的实现，我们可以称之为框架。好的框架可以隐藏大家不需要关心的部分，提升我们的效率。例如Facebook的Litho、微信的<a href=\"https://gryamy.gitbooks.io/vending-doc/content/\">Vending</a>，它们通过框架约束和异步来解决Android应用UI线程卡顿问题。</p><!-- [[[read_end]]] --><p>如果说监控是为了发现问题，核心在于“防”，那好的架构可以直接避免出现问题，所以架构设计的目标在于“治”。为了帮助你更好地理解架构，我们先从Android的架构设计说起。</p><p><strong>1. Android的架构</strong></p><p>在官方文档<a href=\"https://developer.android.com/guide/platform?hl=zh-cn\">《平台架构》</a>中，对Android的描述如下：</p><blockquote>\n<p>Android是一种基于Linux的开放源代码软件栈，为广泛的设备和机型而创建。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/90/df/90763fd9662c8a75553dc92a78112ddf.png?wh=1384*2038\" alt=\"\"></p><p>在深入Android架构之前，我们先来思考一下Android需要满足的需求场景，也就是各方对它的诉求。</p><ul>\n<li>\n<p><strong>用户</strong>。在低内存的设备上也可以流畅地运行各种应用，并且有持久的续航能力。</p>\n</li>\n<li>\n<p><strong>开发者</strong>。应用开发简便，并且可以在平台上获得收益。</p>\n</li>\n<li>\n<p><strong>硬件厂商</strong>。无论是芯片厂商还是手机制造商，都可以低成本地适配和升级自己的系统。</p>\n</li>\n</ul><p>回想Android诞生之初，它为了团结一切可以团结的力量，广泛取得硬件厂商、开发者以及用户的支持。所以在做架构设计的时候，就充分考虑到了这些因素。</p><ul>\n<li>\n<p><strong>Java API接口层</strong>。长久以来Java一直霸占第一大编程语言宝座，具有广泛的开发者基础。从当时来看，Android选择Java作为接口语言是十分明智的。从现在看，只是没有在Oracle之前抢先收购Sun是比较失策的，导致出现当前的专利诉讼困局。总的来说，开发者通过自身熟悉的Java语言，友好的接口层就可以使用系统和硬件的各种能力，快速搭建出自己的应用。</p>\n</li>\n<li>\n<p><strong>硬件抽象层</strong>。设备制造商需要为内核开发硬件驱动程序，为了降低设备制造商的开发成本，Android选择成熟、开源的Linux内核，并且将Android打造成一个免费、开源的操作系统，吸引了更多的手机厂商入局。但是芯片厂商和手机厂商还是需要一起做大量的工作才可以更新到最新的系统，在Android 8.0之后，Android新增了HAL硬件抽象层。它向上屏蔽了硬件的具体实现，使小米这些手机厂商可以跳过芯片厂商，单独更新Android的Framework框架。</p>\n</li>\n<li>\n<p><strong>应用层</strong>。在Android设计之初，它就考虑到移动设备的各种限制。为了用户在低内存设备有更好的体验，同样做了大量的工作。例如设计了基于寄存器架构、可执行文件更小的Dalvik虚拟机以及内核的Low Memory Killer等。为了满足用户的基本需求，Android系统在推出之初就内置许多的基础应用。并且通过吸引更多开发者进入，也在不断地满足用户的各种需求场景。当然，Android也在持续优化Framework和Runtime的性能，例如我前面提到过的黄油计划、耗电优化等。</p>\n</li>\n</ul><p>架构是为了需求场景服务，而Android的架构正是为了更好地满足硬件设备厂商、开发者以及用户而设计的。我非常推荐你看看<a href=\"https://mp.weixin.qq.com/s/twfpUMf9CfXcgwtFFkJ4Ig\">《关于Android设计及其意义》</a>和<a href=\"http://mp.weixin.qq.com/s/W38aauoCEEUbL8KvUkb_Rw\">《Android技术架构演进与未来》</a>，可以让你从Android系统设计到技术支撑系统发展有更加深刻的理解。</p><p><strong>2. 如何做架构选型</strong></p><p>对于Android开发者来说，很多架构和框架已经非常成熟，通常我们更多面临的问题是如何为自己的应用选择合适的框架。回顾一下专栏前面学习过的内容，其实我们已经做过一次次的选择，例如OkHttp、Cronet、Mars应该选择哪个作为我们的高质量网络库，JSON、Protocol Buffers数据序列化方案该如何选择等。</p><p>网络库、图片库、UI框架、消息通信框架、存储框架，无论是GitHub还是Google官方都有非常多的方案，在选择过程我们主要要考虑下面三个因素：</p><ul>\n<li>\n<p><strong>框架的成熟度</strong>。框架是否已经被大量应用所实践，特别是亿级以上的应用。还有就是框架目前是否还在维护、框架的性能如何等。</p>\n</li>\n<li>\n<p><strong>工具链的成熟度</strong>。配套的工具链是否成熟、完善。例如Flutter作为一门新的技术，从开发、编译、测试到发布，是否有完善的工具链支持。</p>\n</li>\n<li>\n<p><strong>人员的学习成本、文档是否完备</strong>。结合团队的现状，需要考虑框架的学习成本是否可以接受、学习路径是否平滑、有没有足够的文档和社区支持。</p>\n</li>\n</ul><p>对于架构选型，康威定律是比较重要的准则，这里推荐你看看<a href=\"https://blog.csdn.net/junecauzhang/article/details/61427915\">《从康威定律和技术债看研发之痛》</a>这篇文章，我们的组织架构、代码架构以及流程都应该跟我们团队的规模相匹配。这句话怎么理解呢？就是架构设计或者架构选型不能好高骛远，我们有多大的规模，就做多少的支撑。警惕长期的事情短期做，或者短期的事情长期做。</p><p>微信在2013年就开始了模块化改造，与此同时淘宝则进行了组件化改造。为什么会有这样的差别呢？因为当时微信只有一个团队在开发，Android端也就30人不到。为了代码的隔离，微信将基础组件下沉，放到单独的仓库，由专门的人员负责。对于业务来说，依然只需要保留同一个仓库，只是拆成不同的业务Module。感兴趣的同学可以参考<a href=\"https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w\">《微信Android模块化架构重构实践》</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/4f/9c/4ff7f07b2bdec613bc460b9e9dec719c.png?wh=1920*945\" alt=\"\"></p><p>但对于淘宝来说，当时就有几百人同时在一个应用上面开发，而且这些人分别属于不同的团队，分散在全国各地。所以无论是基于代码的权限保护，还是从开发效率的考量，都要求将所有业务模块隔离开来，也就是每个业务模块都应该是单独的仓库。</p><h2>什么是架构演进</h2><p>“没有过不去的坎，只有过不完的坎”。在业务发展的过程，总会遇到一些新的问题，而且可能在发展到某一时刻时，一些旧的问题就不复存在了。例如为了兼容Android 4.X，当年我们在架构上做了大量的兼容设计，但是当不再需要兼容4.X设备的时候，这些包袱我们就可以适时抛弃掉。</p><p><strong>1. 为什么要做架构演进</strong></p><p>架构是为了业务需求场景服务，那它也要顺应业务的变化而适时调整。也就是说，架构需要跟随业务的发展而演进。</p><p>“君有疾在腠理，不治将恐深”，微信每年都会经历一次大的重构，因为我们坚持代码架构最终都会腐烂，该推倒了就该重构，不要一直修修补补。架构演进可以给团队带来下面几个变化：</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/d0/d08aff81147f83407fe9deb3d6bcddd0.png?wh=1920*638\" alt=\"\"></p><ul>\n<li>\n<p><strong>打破不满</strong>。需要打破保守的做法，要积极面对不合理的地方。团队定期需要着手开启重构，将大家平日对代码的不满释放出来。将架构的腐化（效率降低、抱怨上升）转化为架构优化的动力。</p>\n</li>\n<li>\n<p><strong>重构信任</strong>。重构开发者之间的心态，不定期的推动模块重构。一些问题的解决，往往可以推动更多人去尝试。</p>\n</li>\n<li>\n<p><strong>团队培养</strong>。重构也是团队进步的机会，让更多的成员掌握架构能力，培养全员架构意识，实现“人人都是架构师”。</p>\n</li>\n</ul><p>但是对于架构演进的过程，我们需要有辨别能力，也就是常说的“技术视野”。这里包括对各种技术栈的选择和比较、架构设计的考虑，要结合业务和团队当前的情况，做出合理的判断，要清楚的知道做什么事情收益最大等。</p><p>这里的反面例子可能就是辛辛苦苦造了一套轮子，结果发现别人早就有了，甚至比我们做得更好。这个问题的原因就在于你的技术视野。在“高质量开发”和“高效开发”模块，我反复地跟你分享目前国内外大厂的最新实践方案，正是希望提升我们的技术视野。特别是“高效开发”模块，可能有同学会认为这些话题太大了，跟自己好像关系不大。其实应用开发流程的每一个步骤都关系到你我，同时又涉及大量的内容，每一块铺开来可能都可以是一个新的专栏。而作为“Android开发高手课”，我更想从顶层给你呈现完整的架构设计，而不是去详细分析某个细节优化点。这些都是希望可以帮你站在高处看问题，全面提升你的技术视野。</p><p>对于技术视野的培养，可能没有太多的捷径，需要我们经过长时间的实践，经历反反复复的挫折，才能从“巨婴”成长为“大师”。</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/9d/cb31d2a5f5c10ea23a3e99a3aa35c39d.png?wh=911*804\" alt=\"\"></p><p>在“架构演进”模块，为了进一步帮助我们提升技术视野和架构的能力，我准备了下面这些内容：</p><ul>\n<li>\n<p>GOT Hook、PLT Hook、Inline Hook，我将对比三种Native Hook框架的原理和差异，告诉你应该如何去选择。以及对于Native开发，我还有哪些经验。</p>\n</li>\n<li>\n<p><a href=\"https://mp.weixin.qq.com/s/WWqsd-SnILUWbiKEnSArDQ\">大前端纷纷扰扰，如何演进和选择</a>，如何选择适合我们应用的跨平台和动态化方案。</p>\n</li>\n<li>\n<p>技术日新月异，对于新技术我们应该如何考虑是否跟进，Flutter是不是真的可以一统天下。</p>\n</li>\n<li>\n<p>在应用开发之外，我们还邀请了三位专家，分别介绍他们在移动游戏、音视频和AI领域开发的经验。对于这些领域，它们的架构是什么样的，我们又该如何学习和转型。</p>\n</li>\n</ul><p><strong>2. 如何做架构演进</strong></p><p>架构演进是必要的，但是我们需要充分认识到困难，真正去做远比想要难多了，特别是其中各种各样的历史包袱问题。</p><p>架构的演进，通常来说具体实践方式就是重构。如果我们下定决心要重构，我有两个小建议送给你：</p><ul>\n<li><strong>演进式的，符合团队现状的</strong>。我们很难找到一个性能最好、成本最省、时间最快的方案，需要权衡性能、成本、时间三者的关系。如果我们时间充裕，那可以朝着更好的性能目标去努力。但如果时间紧急，我们可以分阶段去重构。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/d1/df/d1a3a57aa97e4a510e39a00c88acd8df.png?wh=1768*1310\" alt=\"\"></p><ul>\n<li><strong>可度量的，每个阶段都要有成果</strong>。架构演进不能一味“憋大招”，最好能分阶段实施，并且每个阶段都要有成果。这样可以让团队成员更快地感受到优化成果，也可以激励更多的人参与到重构的事业中。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/77/20/771f780657230e86ef33d99a11bef520.png?wh=1080*237\" alt=\"\"></p><p>在《Android技术架构演进与未来》一文中，回顾了Android版本的发布时间线。Android系统每年都会发布一个新的版本，每个版本也会有大大小小的重构。重构的目的依然是希望更好地满足用户、开发者以及硬件厂商的诉求。例如为了提升手机的续航能力，我们可以回顾一下Android在耗电优化的演进历程。</p><p><img src=\"https://static001.geekbang.org/resource/image/00/8c/0035fdf871970fe18ebc3a89bfc5c68c.png?wh=1920*983\" alt=\"\"></p><p>为了应用程序执行速度更快，Android Runtime也是每个版本都会优化的模块，下面是Android Runtime各个版本的演进历程。</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/c0/ee4c0ff385955162fc9d77ffdf7d9ac0.png?wh=1920*993\" alt=\"\"></p><p>对于虚拟机的运行机制与各个版本的差异，也是很多公司在面试时喜欢问的。下面是一些关于虚拟机架构演进比较不错的资料，我把它们分享给你。</p><ul>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=Yi9-BqUxsno&amp;list=PLOU2XLYxmsIInFRc3M44HUTQc3b_YJ4-Y&amp;index=19\">What’s new in Android Runtime (Google I/O '18)</a></p>\n</li>\n<li>\n<p><a href=\"https://source.android.com/devices/tech/dalvik/improvements\">Android 8.0中的ART功能改进</a></p>\n</li>\n<li>\n<p><a href=\"http://romainthomas.fr/oat/\">oat格式演进</a></p>\n</li>\n</ul><p>而Android 8.0的<a href=\"https://source.android.com/devices/architecture#resources\">Treble</a>计划，引入了HAL硬件抽象层，解决了硬件厂商升级难的问题。但是即使厂商升级到最新的系统也并不能直接交付给用户，这里还存在应用兼容性的问题。为什么Android P要极力推出Hidden API的限制？这里最初考虑的并不是安全性的问题，而是为了减少每次Android版本升级的兼容性适配时间，让Android版本的发布节奏快起来。</p><p>Hidden API的设计也有出于架构演进的考量，Android不希望出现修改Framework内部任意一个私有方法的时候，都可能会引起外部应用兼容适配，这会对重构带来非常大的包袱。</p><p>Android系统如此，应用的架构演进也是如此。由于组件化带来的各种性能问题，支付宝和淘宝在架构上也顺应了这种变化。在工程结构上，它们依然保留组件在仓库上的代码隔离。但是在最终产物上，组件化已经回归模块化，非核心业务会逐渐迁移到H5或者小程序。</p><p><img src=\"https://static001.geekbang.org/resource/image/bd/ba/bd0a6b6b8f236a770bce2acbc947e9ba.png?wh=1080*422\" alt=\"\"></p><p>无论微信、支付宝、淘宝，大家都想当超级App，努力成为满足用户尽可能多需求的微型操作系统。应用的架构也需要顺应业务形态的转变，在<a href=\"https://mp.weixin.qq.com/s/eXzojM0lCaaCW4JxBaU6BQ\">《敏捷开发与动态更新在支付宝 App 内的实践》</a>一文中，也描述了支付宝这几年在架构升级驱动研发方式转变，推荐你仔细读读。</p><p><img src=\"https://static001.geekbang.org/resource/image/e1/ef/e1c5114eb3ce98a98408a1932339bdef.png?wh=1080*408\" alt=\"\"></p><h2>总结</h2><p>从初步接触架构设计，到基本掌握架构的精髓，可以说同样也没有捷径可言。架构设计能力的成长是建立在一个又一个坑、一次又一次的重构之上。不过成为架构师这个目标并不“遥不可及”，在日常工作中我们可以反复进行锻炼。</p><p>架构设计不一定是整个应用或者系统的设计，也可以是一个模块或者一个需求的设计。每接手一个需求，我们可以对自己提更高的要求，更加细致地考虑问题。例如如何对现有代码的影响最小，如何快捷清晰的实现功能，在开发过程中如何对组件、控件做更好的封装，如何去优化性能，有没有哪些新的技术可以帮助开发这个需求等。</p><h2>课后作业</h2><p>一个技术人的一生应该有个代表作，给自己的技术生涯一个交代。在你的工作中，有没有令你感到满意的架构设计（某个应用、某个模块或者某个框架都可以）？你对架构演进有什么看法，又遇到过哪些问题？欢迎留言分享给我和其他同学。</p><p>欢迎你点击“请朋友读”，把今天的内容分享给好友，邀请他一起学习。最后别忘了在评论区提交今天的作业，我也为认真完成作业的同学准备了丰厚的“学习加油礼包”，期待与你一起切磋进步哦。</p><p></p>","neighbors":{"left":{"article_title":"33 | 做一名有高度的移动开发工程师","id":86258},"right":{"article_title":"35 | Native Hook 技术，天使还是魔鬼？","id":87269}},"comments":[{"had_liked":false,"id":78418,"user_name":"大土豆","can_delete":false,"product_type":"c1","uid":1121636,"ip_address":"","ucode":"67445DC3EC9DB0","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/64/52a5863b.jpg","comment_is_top":false,"comment_ctime":1553143255,"is_pvip":true,"replies":[{"id":"31124","content":"微信数据表初期的设计的确有那么一些问题，但是考虑到迁移的成本太高，所以一直都没有彻底去搞","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555400165,"ip_address":"","comment_id":78418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40207848919","product_id":100021101,"comment_content":"逆向微信的过程中，发现微信很多架构都看得到历史变迁，比如说微信加密的主库中，几十张表，表名和字段名都命名有大小写驼峰，有小写下划线。微信App内部的私有协议中，有纯二进制协议，有二进制和文本混合(朋友圈snsinfo表的blob类型的字段)，有纯文本协议的，纯文本的又有json的，有xml的，还有用冒号隔开内容的自定义格式的。","like_count":10,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444086,"discussion_content":"微信数据表初期的设计的确有那么一些问题，但是考虑到迁移的成本太高，所以一直都没有彻底去搞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555400165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78839,"user_name":"CoderAndy","can_delete":false,"product_type":"c1","uid":1330506,"ip_address":"","ucode":"497112D94DE297","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/4a/e13779af.jpg","comment_is_top":false,"comment_ctime":1553253886,"is_pvip":false,"replies":[{"id":"31115","content":"是的，架构无处不在，每个人对架构的理解都可以不同","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555397827,"ip_address":"","comment_id":78839,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31618024958","product_id":100021101,"comment_content":"记得自己15年刚入行的时候，小公司一个人负责Android客户端的开发，觉得把控项目的技术方案算是架构；后来去某直播平台上10+人的Android项目组觉得把写出优秀的框架也算架构；现在我我觉得架构真的像作者说的无处不在，一个小的需求，不同人的实现是可能有差别的，而且同一人在不同的环境和技术积淀下也会不同。所以，以求更好方为上策。","like_count":8,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444250,"discussion_content":"是的，架构无处不在，每个人对架构的理解都可以不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555397827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130385,"user_name":"OF","can_delete":false,"product_type":"c1","uid":1329847,"ip_address":"","ucode":"1087485CFAB7A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/4a/b7/a3468e61.jpg","comment_is_top":false,"comment_ctime":1567438280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27337242056","product_id":100021101,"comment_content":"这大土豆可真行。。。","like_count":7},{"had_liked":false,"id":112307,"user_name":"gk","can_delete":false,"product_type":"c1","uid":1251970,"ip_address":"","ucode":"0E1E81FEED2E86","user_header":"https://static001.geekbang.org/account/avatar/00/13/1a/82/f039ae08.jpg","comment_is_top":false,"comment_ctime":1562718782,"is_pvip":false,"replies":[{"id":"62050","content":"组件化是有远程下发的能力，模块化只是工程组织上面的“组件化”。<br><br>这个主要因为有类似小程序、rn&#47;weex、h5离线宝、flutter等多种手段去实现那些非核心功能","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1576679573,"ip_address":"","comment_id":112307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18742587966","product_id":100021101,"comment_content":"但是在最终产物上，组件化已经回归模块化…能举例说明下什么样算回归模块化，另外组件化会有什么问题？烦请有空解答下","like_count":4,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457668,"discussion_content":"组件化是有远程下发的能力，模块化只是工程组织上面的“组件化”。\n\n这个主要因为有类似小程序、rn/weex、h5离线宝、flutter等多种手段去实现那些非核心功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576679573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78361,"user_name":"Akon Convict","can_delete":false,"product_type":"c1","uid":1044453,"ip_address":"","ucode":"364E1CA9F347C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ef/e5/7ee97c9a.jpg","comment_is_top":false,"comment_ctime":1553133395,"is_pvip":true,"replies":[{"id":"30792","content":"每个人对架构都有不同的理解，但是架构核心也是为了解决质量和效率问题","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555169475,"ip_address":"","comment_id":78361,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14438035283","product_id":100021101,"comment_content":"我一直认为架构是一个很抽象的话题，别人只能分享他们当时特定的困难下如何解决问题，从而演变出现在稳定高效的框架，我们能汲取的只是他们思考问题的方式，出现问题的根源是什么，有什么方式可以解决，这些解决方案中哪些是优秀的方案。","like_count":3,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444064,"discussion_content":"每个人对架构都有不同的理解，但是架构核心也是为了解决质量和效率问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555169475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78368,"user_name":"大土豆","can_delete":false,"product_type":"c1","uid":1121636,"ip_address":"","ucode":"67445DC3EC9DB0","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/64/52a5863b.jpg","comment_is_top":false,"comment_ctime":1553133815,"is_pvip":true,"replies":[{"id":"31123","content":"I&#47;O都是不可预料的，数据库读写都不会在主线程，如果用户数据量大的情况会很慢的","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555400122,"ip_address":"","comment_id":78368,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10143068407","product_id":100021101,"comment_content":"微信的db读写，不知道你们是怎么做的😄，我现在IM的架构是读写全在主线程(主线程io没有大家想象的这么可怕，只是数据量多的时候，还是会卡)，我现在的想法是下个版本改成一个线程专门写，然后读可以多线程读","like_count":2,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444068,"discussion_content":"I/O都是不可预料的，数据库读写都不会在主线程，如果用户数据量大的情况会很慢的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555400122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78299,"user_name":"问答","can_delete":false,"product_type":"c1","uid":1086571,"ip_address":"","ucode":"0F7858787E2D87","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/6b/60ff0454.jpg","comment_is_top":false,"comment_ctime":1553127828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10143062420","product_id":100021101,"comment_content":"高屋建瓴，很棒","like_count":2},{"had_liked":false,"id":187090,"user_name":"JeffMony","can_delete":false,"product_type":"c1","uid":1221877,"ip_address":"","ucode":"9AA0671C297604","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/f5/9ce95dd5.jpg","comment_is_top":false,"comment_ctime":1584010481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878977777","product_id":100021101,"comment_content":"文章讲得非常好，设计一个架构并不是非常高大上的项目，只是一种设计思想，很小的模块也可以体现搞抄的架构设计思想；受教了。","like_count":1},{"had_liked":false,"id":115323,"user_name":"1","can_delete":false,"product_type":"c1","uid":1340241,"ip_address":"","ucode":"5ADBA094E7E932","user_header":"https://static001.geekbang.org/account/avatar/00/14/73/51/e3e45b3f.jpg","comment_is_top":false,"comment_ctime":1563531736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858499032","product_id":100021101,"comment_content":"一个技术人的一生应该有个代表作，给自己的技术生涯一个交代。读后感觉醍醐灌顶。感谢绍文老师！","like_count":1},{"had_liked":false,"id":81717,"user_name":"落英坠露","can_delete":false,"product_type":"c1","uid":1010896,"ip_address":"","ucode":"C3BB78595EEB43","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/d0/21ad5ed4.jpg","comment_is_top":false,"comment_ctime":1554017499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848984795","product_id":100021101,"comment_content":"引进架构的目的是为了可维护、可扩展，不同的需求由不同的人做确实不一样。我的原则就是抽象、隔离有层次，按功能划分模块，然后使用合适的设计模式规划。","like_count":1},{"had_liked":false,"id":296435,"user_name":"单车少年","can_delete":false,"product_type":"c1","uid":1226190,"ip_address":"","ucode":"C6E56D45F1661E","user_header":"https://static001.geekbang.org/account/avatar/00/12/b5/ce/0f6ef261.jpg","comment_is_top":false,"comment_ctime":1622974653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622974653","product_id":100021101,"comment_content":"实在是太强了，学习的榜样","like_count":0},{"had_liked":false,"id":292175,"user_name":"文培定","can_delete":false,"product_type":"c1","uid":2382667,"ip_address":"","ucode":"A13E83C4FFDEBC","user_header":"","comment_is_top":false,"comment_ctime":1620713152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620713152","product_id":100021101,"comment_content":"其它章节在大神的光辉下，我无法可说，只有惶恐和崇拜！当这章我不太赞同某些观点。软件的基本架构就是就只有那么几种，各个公司的架构其实只是这些架构的细化。架构没那么高端没那么神秘，具体可搜后端架构模式和软件架构模式。当然知道架构是啥并不表示你就能成为架构师，差远呢！PS：me纯粹门外汉~","like_count":0},{"had_liked":false,"id":219592,"user_name":"James","can_delete":false,"product_type":"c1","uid":1328454,"ip_address":"","ucode":"69A0414C7AF0A5","user_header":"https://static001.geekbang.org/account/avatar/00/14/45/46/c7662aa8.jpg","comment_is_top":false,"comment_ctime":1590047884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590047884","product_id":100021101,"comment_content":"第一次使用MVP将之前老旧的项目重构了一次，感觉很不错，使用最新的这些框架，虽然开发慢了点，但是整体更有规划","like_count":0},{"had_liked":false,"id":187937,"user_name":"米米呀👧","can_delete":false,"product_type":"c1","uid":1503774,"ip_address":"","ucode":"77F90974C81E55","user_header":"https://static001.geekbang.org/account/avatar/00/16/f2/1e/679789f7.jpg","comment_is_top":false,"comment_ctime":1584280568,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1584280568","product_id":100021101,"comment_content":"确定HAL是Android8.0后才有？","like_count":0,"discussions":[{"author":{"id":2163187,"avatar":"","nickname":"Geek王爸爸王","note":"","ucode":"1FBF8899CB2470","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304564,"discussion_content":"可能是笔误，应该是很早就存在了，至少我开始接触的5.1已经存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599615808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1108225,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/01/6e6d80d1.jpg","nickname":"Loy","note":"","ucode":"CD437EDA754EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2163187,"avatar":"","nickname":"Geek王爸爸王","note":"","ucode":"1FBF8899CB2470","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323222,"discussion_content":"HIDL","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604901283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304564,"ip_address":""},"score":323222,"extra":""}]}]},{"had_liked":false,"id":116561,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1563869705,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1563869705","product_id":100021101,"comment_content":"一个技术人应该有个代表作。目前为止，我的代表作就是在项目组长搭建的基础上，完成了我们现有系统的聊天大部分功能。<br><br>这虽然不是自己独立做的，但也是和组长两个人的成果，而且最后效果比预期的好，接下来的目标就是，脱离组长，自己建立一个架构体系，加油","like_count":0},{"had_liked":false,"id":87913,"user_name":"邱逢生","can_delete":false,"product_type":"c1","uid":1340847,"ip_address":"","ucode":"AA6C5B0149D6FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/75/af/db4a236d.jpg","comment_is_top":false,"comment_ctime":1555750593,"is_pvip":false,"replies":[{"id":"31774","content":"这个框架并没有开源","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555979086,"ip_address":"","comment_id":87913,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555750593","product_id":100021101,"comment_content":"Github搜索不到vending？","like_count":0,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447644,"discussion_content":"这个框架并没有开源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555979086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78687,"user_name":"LD","can_delete":false,"product_type":"c1","uid":1331218,"ip_address":"","ucode":"0AE2613B44C108","user_header":"https://static001.geekbang.org/account/avatar/00/14/50/12/74d414d4.jpg","comment_is_top":false,"comment_ctime":1553218281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553218281","product_id":100021101,"comment_content":"我现在去架构的理解就是整合好的第三方框架到项目，规范项目内框架的使用，codereiew避免垃圾代码进入。","like_count":0}]}