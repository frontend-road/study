{"id":256880,"title":"加餐 | 从编程语言的角度来理解正则表达式","content":"<p>你好，我是林耀平，你也可以直接叫我的网名笨笨阿林。很高兴能在极客时间和你聊聊我理解的正则表达式。</p><p>在我看来，正则表达式是那种典型的，对没用过的人来说，不觉得对自己有什么影响，可是一旦用过了，就再也回不去的神器。当然，我这里所说的“用过”，不是指简单使用一些正则的基本功能，而是指能够熟练运用基本功能和高级功能。所以说，对于正则表达式，你用得越熟练，就会越会惊叹于它的强大与神奇。</p><p>对于正则表达式的分析和解读，目前大多数文章和书籍多集中在正则表达式自身，比如对正则表达式的各个元字符、元转义序列以及匹配原理的分析和解读上。这些当然十分重要，是我们学习正则的基础。但这一节作为加餐，我将尝试给你提供一个新的理解角度：在我看来，正则表达式也是一门编程语言。为啥这么说呢？下面我将带你从编程语言发展史的角度，以及编程范式的角度来具体看看。</p><h2>为啥说正则表达式也是一门编程语言？</h2><p>我们知道，程序代码是对现实事物处理逻辑的抽象，而正则表达式，则是对复杂的字符匹配程序代码的进一步抽象；也就是说，高度简洁的正则表达式，可以认为其背后所对应的，是字符匹配程序代码，而字符匹配程序代码，背后对应的是字符匹配处理逻辑。</p><p>因此，我们可以这么认为，字符匹配处理逻辑，可以抽象为字符匹配程序代码；字符匹配程序代码，可以再进一步，抽象为高度简洁的正则表达式。怎么理解呢？我们举个例子来说。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/24/f2/2428e95ff365e8e7205390585a960ef2.png?wh=1884*514\" alt=\"\"></p><p>如果我们要在一段文本中同时查找“张三”和“李四”这两个名字，字符匹配处理逻辑就是：当查找到了“张三”，则提示“找到了‘张三’”，当查找到了“李四”，则提示“找到了‘李四’”；如果将这段字符匹配处理，逻辑抽象为字符匹配程序伪代码，就是下面这样：</p><pre><code>var str = &quot;张三正在学习正则表达式......&quot;\nif (find(&quot;张三&quot;, str) == true) then showMessage(&quot;找到了'张三'&quot;)\nelse if (find(&quot;李四&quot;, str) == true) then showMessage(&quot;找到了'李四'&quot;)\nelse showMessage(&quot;没有找到&quot;)\n</code></pre><p>上面的这两行字符匹配程序伪代码，如果进一步抽象为正则表达式，就是：张三|李四。</p><p>你看，相对于字符匹配程序代码，正则表达式不需要使用if、then、else等关键字，也不需要调用find、showMessage等函数，这些在正则表达式中都已经隐含了。也就是说，正则表达式解析引擎，会自动按类似逻辑进行解析，这也就是正则表达式“高度简洁”的体现。</p><h3>从编程语言发展史角度来理解</h3><p>那说了这么多，我们下面来看看编程语言的发展历程。我把它们大致上分为了5代。你可以看一下下面这个表。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/32/3b179079422edda52b1034f101f85b32.jpg?wh=1308*688\" alt=\"\"></p><p>显然，正则表达式也是一种编程语言，而且是属于第4代语言——面向问题语言中的一种。</p><p>可以看到，第4代语言相对于第3代语言，更专注于某个特定、专门的业务逻辑和问题领域。程序员主要负责分析问题，以及使用第4代语言来描述问题，而无需花费大量时间，去考虑具体的处理逻辑和算法实现，处理逻辑和算法实现是由编译器（Compiler）或解释器（Interpreter）这样的语言解析引擎来负责的。</p><p>事实上，最初之所以提出第4代语言的概念，其目的就是希望非专业程序员也能做应用开发，不过就目前情况来看，这个目的并没有得到很好的实现。</p><h3>从编程范式角度来理解</h3><p>编程范式（Programming Paradigm），指的是计算机编程中的基本风格和典范模式，是程序员在其所创造的程序虚拟世界中自觉不自觉地所采用的世界观和方法论。</p><p>常见的编程范式大致上有：命令式、声明式（包括了函数式、逻辑式等）、面向对象式、泛型式、并发式、切面式等。每种编程范式都引导着程序员，根据其特有的倾向（即世界观）和思路（即方法论）去分析和解决编程问题。</p><p>下面我们来重点讲一下命令式和声明式这两种编程范式。</p><p>我们先来看第一种，<strong>命令式编程范式。</strong></p><p>命令式编程范式，主要就是模拟电脑运算的过程。更进一步地来说，是直接模拟目前主流的冯·诺依曼机（Von Neumann Machine）的运算过程，是对冯·诺伊曼机运行机制的抽象。</p><p>冯·诺伊曼机的基本特点是，在程序计数器的集中控制下，按顺序依次从内存中获取指令和数据，然后进行执行，因此它是以控制驱动的控制流方式工作的。与冯·诺依曼机相对应的还有以数据驱动的数据流方式工作的数据流机，以及以需求驱动的数据流方式工作的归约机等。</p><p>采用命令式编程范式的程序，是由若干行动指令所组成的有序指令列表，也就是由一系列指明执行顺序的祈使句——“先做这，再做那”所组成，属于行动导向，强调的是定义问题的解法——即“怎么做”，因而算法是显性的而目标是隐性的。</p><p>因此，从编程范式的角度来看：</p><ul>\n<li>命令式编程的世界观是：程序是由若干行动指令组成的有序列表；</li>\n<li>命令式编程的方法论是：用变量来存储数据，用语句来执行指令。</li>\n</ul><p>如果追根溯源的话，几乎所有基于冯·诺伊曼机的编程语言，其实都可看作汇编语言的升级，而作为与机器语言一一对应的汇编语言来说，它自然是命令式的，因而命令式编程范式最为基础和普及。不过，从纯粹性的角度来说，命令式编程范式的代表语言为Fortran、Pascal、C等。</p><p><strong>第二种是声明式编程范式</strong>。</p><p>声明式编程范式，主要是模拟人脑思维的过程。声明式重目标、轻过程，专注问题的分析和表达，而不是算法实现。它不用指明执行顺序，属于目标导向，强调的是定义问题的描述——即“做什么”，因而目标是显性而算法是隐性的。</p><p>因此，从编程范式的角度来看：</p><ul>\n<li>声明式编程的世界观是：程序是由若干目标任务组成的有序列表；</li>\n<li>声明式编程的方法论是：用语法元素来描述任务，由解析引擎转化为指令并执行。</li>\n</ul><p>事实上，前面所说的第4代，面向问题的语言，基本上都属于声明式编程范式，而且往往也只支持声明式编程范式。声明式编程范式的主要特点就是，重在目标而非过程、重在描述而非实现，以声明式语句直接描述要解决的目标任务，专注于任务的分析和表达。声明式没有专注于处理逻辑和算法实现的过程，它具体的处理逻辑和算法实现是由语言解析引擎来负责的。</p><p>声明式编程的代表语言为SQL、SAS、SPSS、LaTeX、Regex（即正则表达式）等。</p><p>讲到这里你可能会有疑问，既然是程序，那它总是要实现功能的，通过声明式编程语言所编写的程序，到底是如何实现功能的呢？事实上，这是由语言解析引擎，也就是编译器或解释器，最终通过命令式编程来实现功能的。不过，这仅限于冯·诺依曼机中的编程语言，非冯·诺依曼机中的编程语言就不一定是这样了。</p><p>换句话说，声明式编程是建立在命令式编程的基础之上的。这也是声明式编程比命令式编程更为高级、更加简单、更省人工的原因。事实上，正如前面所讲过的，目前基于冯·诺依曼机的几乎所有编程语言都是以命令式编程为基础。</p><p><strong>相较于通用编程语言GPPL，正则表达式属于领域特定语言DSL</strong>。</p><p>当然，这样一来，这些由语言解析引擎所实现的处理逻辑和具体算法，它们的通用性就会比较差，只能适用于某些特定业务或特定领域。也正是因为这个原因，第4代语言基本都是局限于某些特定领域，大多被认为是领域特定语言DSL（Domain Specific Language），也称为领域专用语言。</p><p>与领域特定语言相对应的是通用编程语言GPPL（General-Purpose Programming Language），作为第3代语言的高级语言大都属于通用编程语言，基本上都支持命令式编程范式。</p><p>通用编程语言解决问题的处理逻辑和算法实现，可以由程序员灵活设计、自由发挥，然而，正像是前面所说的，由于领域特定语言大都只属于声明式编程范式，解决问题的处理逻辑和算法实现，是由语言解析引擎自动完成的，程序员一般只需要也只能够声明式地描述问题，而不需要也不能够命令式地自行自由设计解决问题的处理逻辑和算法实现，程序员灵活设计、自由发挥的空间很小。</p><p>因此，领域特定语言几乎没有通用性，而且也大都是非图灵完备的语言。这里的图灵完备是什么意思呢？一个能计算出每个图灵可计算函数（Turing-computable function）的计算系统，就被称为图灵完备的；一个语言是图灵完备的，就意味着该语言的计算能力与一个通用图灵机（Universal Turing Machine）相当。</p><p>这里又提到了两个新概念：图灵可计算函数和通用图灵机。我们只需要记住下面这么一个关键点：当我们说一门编程语言是图灵完备的语言时，说明这门语言所拥有的编程能力，是现代计算机语言所能拥有的最高能力。</p><p>而领域特定语言大都不是图灵完备的语言，因此在计算能力、表达能力和功能上，相对于通用编程语言这样的图灵完备的语言来说，要受到很大的限制，只能专用于解决特定业务方向和特定业务领域的专门问题。</p><p>比如，SQL是专用于解决数据库操作问题的语言、SAS和SPSS是专用于解决统计分析问题的语言、LaTeX是专用于解决排版问题的语言，Mathematica是专用于解决科学计算问题的语言；而我们这里所讨论的正则表达式（Regex，Regular expression），则是专用于解决文本查找匹配问题的专门语言。</p><h2>正则表达式的语法元素本质上就是程序逻辑和算法</h2><p>前面说了，正则表达式从编程语言发展史的角度上来看，其实是属于第4代的面向问题语言。正则从编程范式的角度上来看，其实是属于声明式编程范式，并且是专用于处理文本查找匹配这个特定领域的专门语言。理解了这些，我们就比较容易理解之前所提到的，正则表达式是文本查找匹配处理逻辑和文本查找匹配程序代码的抽象这一点了。</p><p>实际上，更进一步地来说，正则表达式中的语法元素——元字符、元转义序列与特殊结构，可理解为某种具体的程序逻辑和算法的体现。注意，这里提到的元转义序列，指的是相对于将元字符转义为字符本义的普通转义序列来说的。</p><p>比如，正则表达式中的星号量词“<code>*</code>”这一元字符，就是高级语言的处理逻辑“循环结构”的体现。具体来说，星号量词“<code>*</code>”代表的是不定次数循环结构，而前后多个星号量词的嵌套就是多层不定次数循环结构的嵌套；或运算符，也就是竖线“|”这个元字符，就是高级语言的处理逻辑“分支结构”的体现；而用于分组的圆括号“()”，就相当于高级语言的作用域。</p><p>而当或运算符“|”出现在由星号量词“<code>*</code>”所限定的分组圆括号“()”中时，其实就是在“循环结构”中嵌套了“分支结构”；而如果进一步地，“循环结构”所嵌套的“分支结构”中的某个分支，又被某个星号量词“<code>*</code>”所限定，那么则相当于“循环结构”所嵌套的“分支结构”又嵌套了“循环结构”。</p><p>比如下面这个正则表达式：(张三|李四*)*。这里我们就不写匹配程序伪代码了，我们以图示的形式来展示处理逻辑，这样更为直观和形象。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/1f/297bff6bc7f0739f7df880yy5ac1aa1f.png?wh=233*142\" alt=\"\"></p><p>另外，从语法结构的角度来看，正则表达式的基本语法结构与一般高级编程语言差不多，主要就是顺序结构（也称为连接结构）、分支结构（也称为选择结构）、循环结构（也称为重复结构）三种，其他都是这三种基本语法结构的组合，再加上一些语法糖。</p><p>这里我们还是以前面提到的“(张三|李四<code>*</code>)<code>*</code>”这个正则表达式为例。“张”和“三”以及“李”和“四”这两组字符内部的结构，都属于顺序结构。“张三”和“李四<code>*</code>”这两者则属于分支结构中的两个分支。而“四*”和整个正则表达式“(张三|李四<code>*</code>)<code>*</code>”都是循环结构，并且前者嵌套在后者内部之中。</p><p>根据上面的分析，从正则表达式作为一个声明式编程范式的领域特定语言DSL的角度来讲，正则表达式的顺序结构、分支结构、循环结构这三种基本语法结构是非常简洁、紧凑的。这几乎是作为声明式编程范式的领域特定语言的基本特点，而正则表达式将这一点体现得尤为淋漓尽致。</p><p>其中，由于连接结构最为普遍和常见，因此不通过元字符来表示，而是直接以前后顺序来表示；分支结构通过竖线元字符“|”这个或运算符来表示；而循环结构则通过量词元字符“<code>*</code>”、“+”或“{n,m}”等来表示。</p><p>这三种基本语法结构在使用时，只需要简单直接地进行声明式描述，不需要程序员通过复杂的命令式程序语句来进行匹配逻辑和匹配算法的设计，从而大大简化了文本查找匹配功能的实现。</p><h2>总结</h2><p>好了，今天的内容讲完了，我来带你总结回顾一下。</p><p>今天我为你提供了一个新的角度，那就是除了从正则表达式自身的语法元素、功能特性等角度来理解正则表达式之外，我们还可以站在编程语言以及编程范式的层面去理解正则表达式。</p><p>其实啊，正则表达式是一门第4代面向问题的编程语言，使用针对特定问题领域专门设计的语法元素来编写表达式。第4代语言相对于第3代语言，更专注于某个特定、专门的业务逻辑和问题领域。它的各个语法元素本质上就是常见的通用编程语言中的处理逻辑和算法实现的体现，并且同样具有三大基本语法结构，也就是顺序结构、分支结构和循环结构。</p><h2>思考题</h2><p>最后，还是给你留一个思考题。对于从编程语言的发展和演化角度，以及从编程范式的角度来理解正则表达式，给你带来了什么启发呢？这对于其他编程语言的学习和程序设计，究竟又有什么作用和实际意义呢？</p><p>欢迎留言参与讨论。今天的课程就结束了，希望可以帮助到你。如果有收获，也欢迎你把这节课分享给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":231655,"user_name":"虹炎","can_delete":false,"product_type":"c1","uid":1600615,"ip_address":"","ucode":"9E28ACEBFB26D5","user_header":"https://static001.geekbang.org/account/avatar/00/18/6c/67/07bcc58f.jpg","comment_is_top":false,"comment_ctime":1593743477,"is_pvip":false,"replies":[{"id":"86134","content":"赞 :-)","user_name":"作者回复","user_name_real":"伟忠","uid":"1112089","ctime":1594313842,"ip_address":"","comment_id":231655,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44543416437","product_id":100053301,"comment_content":"小结：<br>1，正则表达式属于领域特定语言 DSL（类比sql）, 由专门解析引擎来处理执行。解决问题面限特点领域。<br>2，通用编程语言 GPPL，解决问题面广。<br>3，命令式编程范式：从前到后依次执行一条一条命令。（C ,  shell脚本）,<br>4，声明式编程范式：利用抽象出的高层组件或者接口，通过组合这些高层组件解决问提。专注于任务的分析和表达。具体的处理逻辑和算法实现已经由大拿实现。不需要使用者实现。（比如sql,Kubernetes）<br>请老师指正我的理解！","like_count":10,"discussions":[{"author":{"id":1112089,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","nickname":"伟忠","note":"","ucode":"FE77CF20ED6065","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500395,"discussion_content":"赞 :-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594313842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232483,"user_name":"修亦然","can_delete":false,"product_type":"c1","uid":1297494,"ip_address":"","ucode":"5B18DCEF1FF80B","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/56/9f5f9abd.jpg","comment_is_top":false,"comment_ctime":1594016444,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14478918332","product_id":100053301,"comment_content":"一直以来是把正则当作一个处理文本类的工具，相对零散；而不是一种语言，<br>顺序结构，选择结构，循环结构加语法糖，会形成语言间的对比，有了参考性，使理解和使用的更加系统方便<br>目标 》分析组成结构 》使用字符 》输出结果","like_count":3},{"had_liked":false,"id":231704,"user_name":"cugphoenix","can_delete":false,"product_type":"c1","uid":1474356,"ip_address":"","ucode":"80101AF04C00D3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3F4IdQuDZrhN8ThibP85eCiaSWTYpTrcC6QB9EoAkw3IIj6otMibb1CgrS1uzITAnJmGLXQ2tgIkAQ/132","comment_is_top":false,"comment_ctime":1593754038,"is_pvip":false,"replies":[{"id":"85752","content":"👍🏻","user_name":"作者回复","user_name_real":"伟忠","uid":"1112089","ctime":1593988799,"ip_address":"","comment_id":231704,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14478655926","product_id":100053301,"comment_content":"从命令式编程需要的角度去看待正则表达式，对于正则表达式的编写和分析都有很好的指导作用。对于编写来说：用顺序，分支，循环的行为去分析问题，然后转换成正则表达式；对于分析来说，把表达式（包括语法糖）拆解为顺序，分支，循环，能够更好的理解这个表达式的目的。","like_count":3,"discussions":[{"author":{"id":1112089,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","nickname":"伟忠","note":"","ucode":"FE77CF20ED6065","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500418,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593988799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232271,"user_name":"zcdll","can_delete":false,"product_type":"c1","uid":1004086,"ip_address":"","ucode":"F1F20EB17D8789","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/36/18f5d218.jpg","comment_is_top":false,"comment_ctime":1593939702,"is_pvip":false,"replies":[{"id":"85750","content":"赞👍🏻，总结的很好","user_name":"作者回复","user_name_real":"伟忠","uid":"1112089","ctime":1593988732,"ip_address":"","comment_id":232271,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183874294","product_id":100053301,"comment_content":"第一个问题：总结来说，加深了对正则表达式的理解，或者说开拓了新的理解方向。之前总觉得正则表达式很不 regular，看起来毫无头绪，都一堆符号串在一起就能解析字符串了，为啥？然后学习了这门课前几节的内容后，算是入了门，不过是从 正则表达式 本身的方向切入的，也就是先从 正则表达式 的相关概念来一步步学习。学习了本节后，有一种高屋建瓴的感觉，把正则和其他熟悉的高级编程语言做了对比，关联起来了，理解更深入了。<br><br>第二个问题：这一节提供了学习一门编程语言的方法论，除了基本的从某一门编程语言的特性概念入手之外，还可以从 编程语言的 共性入手，比如 编程范式，词法分析，语法分析等。这种方法论通过各个语言的对比，或许能够更快速、更深入的学习一门新的编程语言。","like_count":2,"discussions":[{"author":{"id":1112089,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","nickname":"伟忠","note":"","ucode":"FE77CF20ED6065","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500590,"discussion_content":"赞👍🏻，总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593988732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231842,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1593784825,"is_pvip":false,"replies":[{"id":"85751","content":"对的","user_name":"作者回复","user_name_real":"伟忠","uid":"1112089","ctime":1593988769,"ip_address":"","comment_id":231842,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183719417","product_id":100053301,"comment_content":"从语法结构的角度来看，正则表达式的基本语法结构与一般高级编程语言差不多，主要就是顺序结构（也称为连接结构）、分支结构（也称为选择结构）、循环结构（也称为重复结构）三种，其他都是这三种基本语法结构的组合，再加上一些语法糖。","like_count":2,"discussions":[{"author":{"id":1112089,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","nickname":"伟忠","note":"","ucode":"FE77CF20ED6065","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500452,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593988769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344331,"user_name":"佳娃","can_delete":false,"product_type":"c1","uid":1806618,"ip_address":"","ucode":"47004C40CBE019","user_header":"https://static001.geekbang.org/account/avatar/00/1b/91/1a/c51b24f4.jpg","comment_is_top":false,"comment_ctime":1651475159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651475159","product_id":100053301,"comment_content":"计算机的发展会越来越分“片”，领域的细分可能会越来越多的出现这种特定领域专用语法元素，","like_count":0},{"had_liked":false,"id":290931,"user_name":"明","can_delete":false,"product_type":"c1","uid":1730839,"ip_address":"","ucode":"4289A963ABCF19","user_header":"https://static001.geekbang.org/account/avatar/00/1a/69/17/0eb06ceb.jpg","comment_is_top":false,"comment_ctime":1619865010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619865010","product_id":100053301,"comment_content":"我的启发是：无论通用编程语言 GPPL，还是领域特定语言 DSL，都是一种工具，学精一门语言其他的也会大同小异","like_count":0},{"had_liked":false,"id":263843,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1606278319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606278319","product_id":100053301,"comment_content":"感觉可以把分组当做编程语言的函数，用于提供更大粒度的复用，简化程序的结构。","like_count":0},{"had_liked":false,"id":261574,"user_name":"南冥","can_delete":false,"product_type":"c1","uid":1257022,"ip_address":"","ucode":"07BDAF8B0CFF5F","user_header":"http://thirdwx.qlogo.cn/mmopen/KFgDEHIEpnT0EXnh02VHqBptd0b8mtG3h3IX3wibjaxjoVia2VYb1W8x1GXYwtLibyKicBJowvJ97CcvlDh9WrSL5xZmFWYKN6Rt/132","comment_is_top":false,"comment_ctime":1605427343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605427343","product_id":100053301,"comment_content":"正则表达式是一种图灵不完备编程逻辑规范或者叫描述，都具有分支，循环，作用域等基本概念。go， python都有自己的实现。想起了leetcode上用动态规划刷那道正则题的感觉。","like_count":0},{"had_liked":false,"id":260456,"user_name":"桃梦依然","can_delete":false,"product_type":"c1","uid":1932709,"ip_address":"","ucode":"FE376BB7BB785E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/7d/a5/84662e0e.jpg","comment_is_top":false,"comment_ctime":1605012053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605012053","product_id":100053301,"comment_content":"每一种语言都要结合实际的使用场景，不可不用，但也不能滥用。","like_count":0},{"had_liked":false,"id":259386,"user_name":"风","can_delete":false,"product_type":"c1","uid":1077538,"ip_address":"","ucode":"104638BF19B048","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","comment_is_top":false,"comment_ctime":1604717085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604717085","product_id":100053301,"comment_content":"以前从来没有把正则作为一门语言来看，编写复杂的正则时就脑仁疼，按照老师这节课的解释，将正则按照语言的思维来编写似乎清晰了很多，以前都是顺着看正则现在也可以根据分支和循环来看了，明了了很多","like_count":0},{"had_liked":false,"id":246870,"user_name":"劳码识途","can_delete":false,"product_type":"c1","uid":1598564,"ip_address":"","ucode":"7AEF4D9407F097","user_header":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","comment_is_top":false,"comment_ctime":1599497306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599497306","product_id":100053301,"comment_content":"阿林的刨根究底学编程写的相当好！","like_count":0},{"had_liked":false,"id":244998,"user_name":"肖海涛","can_delete":false,"product_type":"c1","uid":1892268,"ip_address":"","ucode":"5E4C20D5A69BEC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6fGV3BcHQHyNibzRhsPr6KqYzOtMF8G9fiaNvYUavdlhdqMugcHWggWGBbIibkYTibIXramEXsvg4aXA/132","comment_is_top":false,"comment_ctime":1598777283,"is_pvip":true,"replies":[{"id":"90515","content":"������","user_name":"作者回复","user_name_real":"伟忠","uid":"1112089","ctime":1599268906,"ip_address":"","comment_id":244998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598777283","product_id":100053301,"comment_content":"听完感觉豁然开朗。","like_count":0,"discussions":[{"author":{"id":1112089,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","nickname":"伟忠","note":"","ucode":"FE77CF20ED6065","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504765,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599268906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231565,"user_name":"好运来","can_delete":false,"product_type":"c1","uid":1113937,"ip_address":"","ucode":"F469ED6CEFEF30","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/51/9d5cfadd.jpg","comment_is_top":false,"comment_ctime":1593708262,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1593708262","product_id":100053301,"comment_content":"命令式编程虽然学习起来像黑匣子，但是统一了规范以后，掌握以后就可以一劳永逸享受便利。","like_count":0}]}