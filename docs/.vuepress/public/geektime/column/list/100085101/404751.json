{"id":404751,"title":"02 | 实战：实现一个 ToDo 的应用（下）","content":"<p>你好，我是郑晔！</p><p>在上一讲里，我们实现了一个 ToDo 应用的核心业务部分。虽然测试都通过了，但我相信你可能还是会有一种不真实的感觉，因为它还不是一个完整的应用，既不能有命令行的输入，也不能把 Todo 项的内容真正地存储起来。</p><p>这一讲，我们就继续实现这个 ToDo 应用，把欠缺的部分都补上。不过，在开始今天的内容之前，我仍需要强调一下，之所以我要先做核心业务部分，因为它在一个系统中是最重要的。很多人写代码的时候会急着把各个部分连接起来，但却忽视了核心业务部分的构建，这样做造成的结果就是严重的耦合，这也是很多后续问题产生的根源。</p><p>在上一讲里，我们已经有了一个业务内核，现在还欠缺输入输出的部分，也就是如何将Todo 项保存起来，以及如何接受命令行参数。</p><p>接下来，我们就分别来实现这两个部分。</p><h2>文件存储</h2><p>我们先来实现 Todo 项的存储。在上一讲中，我们已经预留好了存储的接口，也就是 Repository 这个接口。现在，我们只需要给这个接口提供一个相应的实现就好了。我们先来看看 Repository 接口现在是什么样子。</p><pre><code>public interface TodoItemRepository {\n    TodoItem save(TodoItem item);\n    Iterable&lt;TodoItem&gt; findAll();\n}\n</code></pre><p>出于简单的考虑，我们要实现一个基于文件的存储。也就是说，给这个接口提供一个基于文件的实现版本。</p><!-- [[[read_end]]] --><p>首先，我们要决定一下把这个实现放到哪里。还记得我们一开始就分了两个模块吗？这两个模块一个是 todo-core，用来存放核心业务的代码；一个是 todo-cli，用来存放与命令行相关的代码。</p><p>那么这个基于文件的实现应该算在哪里呢？</p><p>其实放在哪里都可以讲出一定的道理。放在 todo-core 中，它算核心业务提供的一个实现，供外围使用；放在 todo-cli 中，它就是一个与 CLI 实现相关的部分。</p><p>既然都可以，我更倾向于放在 todo-cli 这个模块里，原因是我们<strong>最好保持核心业务的小巧</strong>，等到以后有机会遇到它需要提供给其它模块使用时，我们再来考虑把它挪到 todo-core 中。</p><p>确定了它的模块归属之后，我们进入到具体的工作中，先来确定它的测试场景：</p><ul>\n<li>使用 findAll 查询空的 Repository ，返回一个空的列表；</li>\n<li>保存了 Todo 项之后，查询 Repository 返回保存了 Todo 项的列表；</li>\n<li>修改已保存的 Todo 项，保存之后，查询 Repository 得到的应该是修改过后的 Todo 项；</li>\n<li>保存空的 Todo 项，会抛出异常。</li>\n</ul><h3>临时文件</h3><p>与之前的测试完全可以在内存中执行不同，这回的测试要用到文件。<strong>为了保证测试是可以重复执行的，我们要确保所有的资源在执行之后要恢复原样。</strong>内存资源恢复原样是没有问题的，那文件怎么办呢？</p><p>文件是一个外部资源，如果用到的是一个普通文件，我们需要确定这个文件要存放在哪里、需要在保证测试执行之后把测试写入的内容清理掉……总之，有不少细节要考虑。所幸，在测试中使用文件是一种特别常见的需求，像 JUnit 这样成熟的框架已经给了我们一个标准答案，那就是临时文件。</p><p>更准确地说，JUnit 给出的方案是临时目录，在这个目录里，你怎么折腾都行。我们只要给一个变量标记上@TempDir，这个变量可以是作为一个测试函数的参数，也可以是一个测试类的字段。下面是我们的测试用例，在这里我们给类的一个字段标记上了@TempDir。</p><pre><code>class FileTodoItemRepositoryTest {\n    @TempDir\n    File tempDir;\n    private File tempFile;\n    private FileTodoItemRepository repository;\n    \n    @BeforeEach\n    void setUp() throws IOException {\n        this.tempFile = File.createTempFile(&quot;file&quot;, &quot;&quot;, tempDir);\n        this.repository = new FileTodoItemRepository(this.tempFile);\n    }\n    \n    @Test\n    public void should_find_nothing_for_empty_repository() throws IOException {\n        final Iterable&lt;TodoItem&gt; items = repository.findAll();\n        assertThat(items).hasSize(0);\n    }\n    ...\n}\n</code></pre><h3>文件编解码</h3><p>有了测试，我们还需要考虑实现的问题。存储到文件里，必须要考虑的一个问题就是编解码的问题，也就是用什么样的格式进行文件存储，这是我们要做的一个设计决策。出于简单的考虑，我准备采用 JSON 这种最常见的格式。因为 JSON 格式的编解码有很多现成的方式，我们就不需要专门的处理了。</p><p>处理 JSON 格式，我选择的程序库的是 <a href=\"https://github.com/FasterXML/jackson\">Jackson</a>，这是行业中最主流的 JSON 处理程序库。就当前的情况来说，这个依赖只与 todo-cli 这个模块相关，所以，我们把 Jackson 的依赖添加到这个模块的构建脚本即可，也就是 todo-cli/build.gradle。</p><pre><code>dependencies {\n    implementation(&quot;com.fasterxml.jackson.core:jackson-databind:$jacksonVersion&quot;)\n}\n</code></pre><p>这里的 jacksonVersion 是一个变量，我们把它配置在整个项目的 gradle.properties 文件里，方便对于依赖的管理。</p><pre><code>jacksonVersion=2.12.3\n</code></pre><p>添加了新的依赖之后，我们需要重新生成一下 IDEA 的工程，依赖就更新了，随后我们就可以继续工作了。</p><pre><code>./gradlew idea\n</code></pre><h3>测试覆盖率</h3><p>有了这个基础，我们可以很容易地把代码实现出来，比如，findAll 的实现就是下面这样。</p><pre><code>@Override\npublic Iterable&lt;TodoItem&gt; findAll() {\n    if (this.file.length() == 0) {\n        return ImmutableList.of();\n    }\n    \n    try {\n        final CollectionType type = typeFactory.constructCollectionType(List.class, TodoItem.class);\n        return mapper.readValue(this.file, type);\n    } catch (IOException e) {\n        throw new TodoException(&quot;Fail to read todo items&quot;, e);\n    }\n}\n</code></pre><p>当通过了所有的测试，我们就要提交代码了。在此之前，我们需要运行提交脚本。</p><pre><code>./gradlew check\n</code></pre><p>当我们很快地解决大部分像代码风格之类的低级问题之后，有一个问题就会卡住我们：测试覆盖率。</p><p>测试覆盖率给了我们发现代码问题的机会。我在构建脚本设定的测试覆盖率是 100%，所以，只要有测试覆盖不到的地方就会被发现。打开测试覆盖率的报告（具体位置在 $buildDir/reports/jacoco/index.html），它就会提醒我们哪里没有覆盖到，就像下面这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/c6/15/c6a1f28da836f806e3007b1a18416615.png?wh=1644x402\" alt=\"\"></p><p>对于一些简单的场景，我们可以通过增加或调整测试就可以提高测试覆盖率。但有些问题就不是简单调整能够解决的。比如这里的异常处理，就像上面覆盖率报告中的 IOException。遇到这种情况，你会怎么办？</p><p>最糟糕的做法是，有测试不好覆盖，就认为测试没有价值，然后彻底放弃测试。这显然不是我们的选项。如果我们坚持测试，要怎么通过这一关呢？</p><p>一种做法是不分青红皂白，统一降低对于测试覆盖率的要求，也就是修改构建脚本中的设置。虽然这种做法可以让我们临时通过这一关，但这却会留下后患：以后有其它本可以测试覆盖到的部分，由于测试覆盖率的降低也会被忽略。</p><p>再有一种做法，就是把这些异常造出来。如果你运气好，有些异常可以通过看接口来大概猜测是怎么产生出来的。像这里的这段代码，如果出现异常很可能就是 JSON 格式不合法造成的。但有时候，我们需要仔细研究这个程序库的源代码，才能知道这个异常是怎么产生的。</p><p>知道异常怎么产生的是第一步，接下来，还需要制造出这个异常。像不合法的 JSON 格式还好办，有些异常则是你很难造出来的。比如，如果我们用到反射，API 会抛出 ClassNotFoundException，但只要你这个类加载了，就不会抛出  ClassNotFoundException。</p><p>我们需要知道的一点是，<strong>我们测试的目标是我们的代码，而不是这个难以测试的程序库。</strong>除非这个异常对我们来说至关重要，否则，为了写测试，去研究另外一个程序库，显然有点本末倒置了。</p><p>这也不行，那也不行，我们还有办法吗？通常来说，这种没法屏蔽掉的异常来自另外一个程序库，而使用这个程序库对我们来说，都是一些实现细节，那么我们可以将这些细节给封装起来。比如在前面代码里，抛出异常的主要是 readValue 这一句，它实现的就是一个文件中读取对象，我们可以把它封装到一个 JSON 处理的类中。</p><pre><code>public final class Jsons {\n    private static final TypeFactory FACTORY = TypeFactory.defaultInstance();\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    \n    public static Iterable&lt;TodoItem&gt; toObjects(final File file) {\n        final CollectionType type = FACTORY.constructCollectionType(List.class, TodoItem.class);\n        try {\n            return MAPPER.readValue(file, type);\n        } catch (IOException e) {\n            throw new TodoException(&quot;Fail to read objects&quot;, e);\n        }\n    }\n    \n    ...\n}\n</code></pre><p>我们在这里将异常封装成我们内部的运行时异常，外面就可以不用捕获处理了。相应地，findAll 的处理就可以调用这个封装出来的代码。</p><pre><code>@Override\npublic Iterable&lt;TodoItem&gt; findAll() {\n    if (this.file.length() == 0) {\n        return ImmutableList.of();\n    }\n    \n    return Jsons.toObjects(this.file);\n}\n</code></pre><p>经过这个改造，FileTodoItemRepository 就可以由测试完全覆盖了。或许你还会担心那个新的 Jsons 类没有办法测试覆盖。对于这个类，我们的方案是忽略掉它，不去做覆盖。处理手法就是在构建脚本中将它排除在测试覆盖之外。</p><pre><code>coverage {\n    excludeClasses = [\n            ...\n            &quot;com.github.dreamhead.todo.util.Jsons&quot;\n    ]\n}\n</code></pre><p>为什么我们可以忽略它？一方面，这段代码很简单，几乎没有逻辑，因为它只是一个调用的封装。另外一方面，这里面主要的代码不是我们编写的，正如前面所说，我们测试的主要目的是测试我们自己写的代码，而不是别人的程序库。</p><p>这里小结一下，<strong>由于其它程序库造成难以测试的问题，我们可以做一层层薄薄的封装，然后，在覆盖率检查中忽略它。封装和忽略，缺一不可。</strong></p><p>至于其它部分更具体的代码，我就不在这里展示了，你可以到开源项目中去查看细节。到这里，我们已经有了可以存储 Todo 项的仓库。基础已经具备，接下来，我们就要把所有这些东西都连起来，给它一个入口。</p><h2>命令行入口</h2><p>编写命令行入口，我们要选择一个程序库，省得自己从头编写各种解析的细节。在这里，我选择的程序库是 <a href=\"https://picocli.info/\">Picocli</a>。</p><p>这个程序库可能你对它不是那么熟悉。那么对于一个新程序库来说，你的关注点是什么呢？绝大多数人拿到一个新程序库，重点都是赶紧让它跑起来，只要程序能够运行，其它的就不在乎了，甚至用来测试程序库怎么用的代码，最终也成为了代码仓库的一部分。</p><p>请千万记住，用来试验的代码永远是用来试验的代码。<strong>一旦我们掌握了一个程序库的基本用法，接下来，我们应该抛弃掉试验代码，重新设计，按照它应有的样子来使用这个程序库。</strong></p><h3>接口的选择</h3><p>面对新的程序库，还有一个问题我们可能会忽略。有些程序库对同样一件事可以有多种不同的处理方式。比如就 Picocli 而言，同样是处理一个命令的参数，可以把它当做一个类的字段，像下面这样。</p><pre><code>class AddCommand ...\n    @Parameters(index = &quot;0&quot;)\n    private String item;\n    ...\n}\n</code></pre><p>也可以当做一个函数的参数。</p><pre><code>class AddCommand ...\n    public int add(@CommandLine.Parameters(index = &quot;0&quot;) final String item) {\n        ...\n    }\n}\n</code></pre><p>你会选择哪种做法呢？我的答案是<strong>选择可测试性好的</strong>。</p><p>就上面两种做法而言，同样是要做单元测试，第一种字段的方式，我需要通过反射的方式设置这个字段的值；而第二种参数的方式，我只要传参就好了。显然，第二种方式更简单。</p><p>或许你会好奇，既然第二种方式更简单，那为什么还会有第一种方式呢？因为如果你不考虑测试而只考虑写代码的话，第一种方式用起来更容易。</p><p>一个是容易写，一个是容易测，这就是两种不同编码哲学的取舍。</p><p>当然，这个讨论是在我们有选择的情况下进行的，有些程序库并没有给我们提供这些选择。很多程序库只有一种做法，而且通常是容易写的做法，这个时候单元测试就比较麻烦。不过通常来说，这种情况都出现在边缘的部分，我们可以考虑这个部分的测试是用单元测试，还是用集成测试。</p><h3>测试的选择</h3><p>做好了基础的准备，现在我们准备开始测试了。同样，我们也要准备测试场景。在命令行接口我们要测的是什么呢？其实，主要的业务逻辑已经在前面的测试中覆盖到了，命令行接口主要就是完成与用户输入相关的一些处理。</p><p>还记得前面我在讨论业务处理时遗留的内容吗？没错，用户输入相关的一些校验要放在这里来做，剩下的就是转给我们领域服务的代码，也就是 TodoItemService。</p><p>有了这个理解，我们来罗列一下测试场景：</p><ul>\n<li>添加一个正常的 Todo 项，该 Todo 项可以查询到；</li>\n<li>添加一个空的 Todo 项，提示参数错误；</li>\n<li>标记一个已有的 Todo 项为完成，该 Todo 项的状态为已完成；</li>\n<li>标记一个不存在的 Todo 项为完成，提示该项不存在；</li>\n<li>标记一个索引小于 0 的 Todo 项为完成，提示参数错误；</li>\n<li>列出所有 Todo 项，缺省为列出所有未完成的 Todo 项；</li>\n<li>用“-a”参数列出所有的 Todo 项，列出所有的 Todo 项。</li>\n</ul><p>如果你是跟着我一路走到了现在，怎么把这些测试写出来对你来说应该已经不是太大的问题了。但在编写代码之前，还有一个问题要考虑，我们准备写什么样的测试呢？</p><p>我们前面编写的测试都是单元测试，也就是针对一个单元进行的测试。如果按照单元测试的编写逻辑来写这段代码，最简单的做法是 mock 一个 TodoItemService 作为参数传给我们的命令类，这种做法本身是没有问题的。</p><p>虽然我们能够保证所有的单元正常运作，但这些单元配合在一起是否依然能够正常运作呢？这可不一定。因为<strong>除了要保证单元的正确，我们还要保证单元之间的协作也是正确的。</strong>你或许已经知道我要说什么了，没错，除了单元测试，我们还需要集成测试。</p><p>之所以要在这里讨论集成测试，因为我们前面已经把主要的业务逻辑已经完成了，最后的这部分代码实际上只是对业务逻辑做一个简单的封装，这会是非常薄的一层。所以，这层如果做单元测试，除了参数校验的部分，剩下的主要工作都是转发，将处理逻辑转发给服务层。所以，出于实用的考虑，我们不妨在这里就用集成测试代替单元测试，简化测试的编写。</p><p>如果我们在这里准备编写的是集成测试，与编写单元测试不同的一个关键点就是，<strong>这里采用的服务对象是真实的对象，而不是模拟对象。</strong>这就需要我们按照业务对象的组装规则将真实的对象组装起来。在我们这个例子里面，因为涉及的对象都比较简单，所以，我们暂且采用直接对象组装的方式。在很多项目里面，对象组装的工作是由 DI 容器完成的。</p><p>为了保证组装过程的一致，我们可以把组装过程单独拿出来，让最终的代码和测试代码复用同样的逻辑。</p><pre><code>public class ObjectFactory {\n    public CommandLine createCommandLine(final File repositoryFile) {\n        return new CommandLine(createTodoCommand(repositoryFile));\n    }\n    \n    private TodoCommand createTodoCommand(final File repositoryFile) {\n        final TodoItemService service = createService(repositoryFile);\n        return new TodoCommand(service);\n    }\n    \n    public TodoItemService createService(final File repositoryFile) {\n        final TodoItemRepository repository = new FileTodoItemRepository(repositoryFile);\n        return new TodoItemService(repository);\n    }\n}\n</code></pre><p>这个组装逻辑本身没有任何复杂的地方，不过，有一点是需要我们在写这段代码时要考虑清楚的，就是<strong>把组装的边界设置在哪里</strong>。换句话说就是把什么样的部分放在组装过程中，什么样的部分不放。因为放太多的话，测试可能会不方便；太少的话，会让集成本身变得意义不大。</p><p>在上面这段代码里，我们把边界设置在了文件接口，也就是 createService 这个函数的参数。这样处理的话，在产品的代码中，我们可以就用正式的文件；而在测试环境中，就可以采用临时文件。</p><pre><code>class TodoCommandTest {\n    @TempDir\n    File tempDir;\n    private TodoItemService service;\n    private CommandLine cli;\n    \n    @BeforeEach\n    void setUp() {\n        final ObjectFactory factory = new ObjectFactory();\n        final File repositoryFile = new File(tempDir, &quot;repository.json&quot;);\n        this.service = factory.createService(repositoryFile);\n        cli = factory.createCommandLine(repositoryFile);\n    }\n</code></pre><p>你会看到，在这里我们除了声明最外面的调用接口（也就是 cli ）之外，还声明了一个变量 service，它是做什么用的呢？我们不妨看一下下面这个测试。</p><pre><code>@Test\npublic void should_mark_as_done() {\n    service.addTodoItem(TodoParameter.of(&quot;foo&quot;));\n    \n    cli.execute(&quot;done&quot;, &quot;1&quot;);\n    \n    final List&lt;TodoItem&gt; items = service.list(true);\n    assertThat(items.get(0).isDone()).isTrue();\n}\n</code></pre><p>标记一个 Todo 项为已完成，但前提条件是要有一个 Todo 项供你去标记。那怎么把这个 Todo 项添加进去呢？一种做法是调用我们的命令行接口，但要知道，我们在这里测试的目标就是命令行接口，也就是 add，而我们这里测试的主要接口是 done。</p><p><strong>写测试要尽可能减少对于不稳定组件的依赖</strong>，done 接口已经是一个不稳定的了，再加上 add，测试出问题的概率就会进一步增大。</p><p>所以，这里我们用了另外一种做法。service 是我们之前已经测试好的组件，我们可以把它看成一个稳定的组件，所以，这里我们使用了 service 添加 Todo 项。</p><p>具体的代码你可以参考我的开源项目，这里就不再进一步罗列了。</p><h2>总结时刻</h2><p>今天我们在核心业务的基础上，补齐了输入输出的部分。不同于之前所有的代码都是在内存中执行的情况，一旦牵扯到输入输出，我们就要考虑更多的问题。这一讲我们遇到的很多问题，可能也是你在实际的测试工作中会遇到的。</p><p>如果你的系统需要与文件打交道：</p><ul>\n<li>通过调整设计，将文件注入到模型中；</li>\n<li>在测试中使用临时文件；</li>\n<li>如果采用的是 JUnit 5，可以使用@TempDir 在临时目录下创建临时文件。</li>\n</ul><p>如果通过测试覆盖发现了难以测试的第三方代码：</p><ul>\n<li>通过做一层薄薄的封装，将第三方代码与你的代码分离开，保证你的代码完全由测试覆盖；</li>\n<li>在测试覆盖率中，忽略这层封装。</li>\n</ul><p>当我们使用第三方框架时：</p><ul>\n<li>与框架紧密结合的代码只是做最简单的接口校验工作，把业务逻辑放在自己的代码里；</li>\n<li>如果有多种方式完成一个功能，选择可测试性较好的实现方式。</li>\n</ul><p>我们编写集成测试：</p><ul>\n<li>是为了保证组件之间协作的正确性；</li>\n<li>需要利用与产品代码相同的组件组装过程；</li>\n<li>可以把已经测试好的稳定组件当做基础。</li>\n</ul><p>如果今天的内容你只能记住一件事，那请记住：<strong>隔离变化，逐步编写稳定的代码</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/39/e5/39a31a0bf517781672f9d72c0a7f52e5.jpg?wh=1976x1085\" alt=\"\"></p><h2>思考题</h2><p>一旦你开启了对测试的思考，我们就能发现更多的思考角度，比如：控制台输出应该怎么测试？这个问题就是今天留给你的思考题了。在这个现有的项目基础上，增加对于控台输出的测试，你会怎么做呢？欢迎在留言区分享你的做法。</p>","comments":[{"had_liked":false,"id":306342,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1628503604,"is_pvip":true,"discussion_count":2,"race_medal":1,"score":"53168111156","product_id":100085101,"comment_content":"老师，感觉代码实现只用Java比较难全部理解，能增加其他语言比如Python或者golang语言的实现吗，这样会更完善一点，对其他语言编程的同学也更友好些。","like_count":12,"discussions":[{"author":{"id":1074465,"avatar":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","nickname":"davix","note":"","ucode":"CBFB39BAD7938B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389949,"discussion_content":"建議至少再增加一門語言，不至於太Java","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629533364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563795,"discussion_content":"我还需要多看几遍，或者看完专栏后，再回过头来看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650078831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306851,"user_name":"Gojustforfun","can_delete":false,"product_type":"c1","uid":1187021,"ip_address":"","ucode":"7513A40F27344F","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","comment_is_top":false,"comment_ctime":1628746769,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27398550545","product_id":100085101,"comment_content":"控制台输出如何测试？在内存中构造一个与std.out拥有相同接口的buffer对象（标准库一般都有现成的），这样所本该输出的内容都写在buffer中，再对buffer中的内容进行断言。","like_count":6},{"had_liked":false,"id":309114,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1629946666,"is_pvip":false,"replies":[{"id":"111915","content":"有收获，就不白学","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629980665,"ip_address":"","comment_id":309114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10219881258","product_id":100085101,"comment_content":"学习了封装其它程序库 ，谢谢老师","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525746,"discussion_content":"有收获，就不白学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629980665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306197,"user_name":"إ并向你招手إ祥子","can_delete":false,"product_type":"c1","uid":1075814,"ip_address":"","ucode":"8932581792DF15","user_header":"https://static001.geekbang.org/account/avatar/00/10/6a/66/da6024e4.jpg","comment_is_top":false,"comment_ctime":1628429930,"is_pvip":false,"replies":[{"id":"110823","content":"Lombok生成的代码不用测试，没有意义，因为它不是你写的代码，测试覆盖率检查中可以忽略它。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628473564,"ip_address":"","comment_id":306197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10218364522","product_id":100085101,"comment_content":"老师好，对于lombk注解生成的代码在测试覆盖不到的时候是如何处理的呢？    <br><br>在业务开发中，有很多VO,DTO之类的实体类对象，这类一部分对象内部可能会有一部分的行为方法，比如转换为别的对象，通常为了简化代码，会使用lombok注解，在单元测试覆盖率的统计中，lombok生成的代码可能是测不到的，同时由于这些对象可能是有除了get  set之外的行为的，因此也不能简单的屏蔽在测试覆盖率的检查之外，目前在团队内的做法是让大家补上未覆盖部分的测试，有没有更好的建议呢？","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524662,"discussion_content":"Lombok生成的代码不用测试，没有意义，因为它不是你写的代码，测试覆盖率检查中可以忽略它。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628473564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308696,"user_name":"大碗","can_delete":false,"product_type":"c1","uid":1027207,"ip_address":"","ucode":"F9CDC0C5BE48AC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/87/8ed5880a.jpg","comment_is_top":false,"comment_ctime":1629760659,"is_pvip":false,"replies":[{"id":"111750","content":"你的进度超前了，实战后面还有一部分，会讲到这么做的理由，也会讲到Spring项目怎么去做测试。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629767203,"ip_address":"","comment_id":308696,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5924727955","product_id":100085101,"comment_content":"请问老师，样例代码中数据库的测试是使用了一个todo_test的实际mysql数据库是怎么考虑的，不选择用H2是什么考虑呢？<br>用mysql优点是测试更接近最终的运行环境，也能测试创表语句，缺点：稍微依赖了本地的环境，第一次需要创建数据库表，建账号。用H2的优缺点就反过来。两者在影响测试速度上似乎目前看不出差距","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525595,"discussion_content":"你的进度超前了，实战后面还有一部分，会讲到这么做的理由，也会讲到Spring项目怎么去做测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629767203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308319,"user_name":"davix","can_delete":false,"product_type":"c1","uid":1074465,"ip_address":"","ucode":"CBFB39BAD7938B","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","comment_is_top":false,"comment_ctime":1629533171,"is_pvip":false,"replies":[{"id":"111752","content":"后面会讲到测试模型，不同的测试如何配比。有的东西是人性，人会倾向于少做事，这是需要团队里立规矩的，需要通过代码评审等机制发现问题。对我来说，覆盖率之所以很重要，就是因为它保证了一个底线。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629767404,"ip_address":"","comment_id":308319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5924500467","product_id":100085101,"comment_content":"老師可否後面詳細講講測試金字塔各層case的設計？哪些放入哪層？<br>我發現team中有傾向，如果有了集成測試，甚至端到端測試，很多人就願意在集成測試裡寫，不寫單元了，認為反正單元被測到了，而且覆蓋的更多。<br>在本節cli例子中沒有用單元，還覆蓋了那麼多case，我擔心有人就會覺得之前單元測試可以省掉。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525461,"discussion_content":"后面会讲到测试模型，不同的测试如何配比。有的东西是人性，人会倾向于少做事，这是需要团队里立规矩的，需要通过代码评审等机制发现问题。对我来说，覆盖率之所以很重要，就是因为它保证了一个底线。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629767404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307954,"user_name":"程九森","can_delete":false,"product_type":"c1","uid":2359159,"ip_address":"","ucode":"68BE70B75E071F","user_header":"https://static001.geekbang.org/account/avatar/00/23/ff/77/70e567d2.jpg","comment_is_top":false,"comment_ctime":1629337181,"is_pvip":false,"replies":[{"id":"111565","content":"https:&#47;&#47;github.com&#47;dreamhead&#47;geektime-todo","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629377600,"ip_address":"","comment_id":307954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5924304477","product_id":100085101,"comment_content":"请问参看代码在哪? ","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525348,"discussion_content":"https://github.com/dreamhead/geektime-todo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629377600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307488,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1629120361,"is_pvip":false,"replies":[{"id":"111888","content":"很好的总结和分享","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629940451,"ip_address":"","comment_id":307488,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5924087657","product_id":100085101,"comment_content":"这一节的收获：<br>1、测试环境（数据）准备，是测试中非常重要的一环。<br><br>2、从黑盒测试的角度来说，异常测试用例的比率要远大于正常用例的，那么白盒角度也是一样。<br><br>3、对于异常类型的覆盖，也需要根据代码实现来选取，比如 catch 所有异常的话，一条异常用例就可以覆盖了，而如果 catch 的是某一个具体用例的话，一定要记得再触发一个没有 catch 的异常哈。<br><br>4、要把可测性，作为程序设计的基本要求。<br><br>5、测试数据准备，是一个很关键，也很常见的内容，除了mock，一些必须的数据准备还是要做的，所以要自动化，也需要提供数据自动准备的实现，同时在完成后要进行数据清理。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525170,"discussion_content":"很好的总结和分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629940451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306488,"user_name":"X","can_delete":false,"product_type":"c1","uid":1460452,"ip_address":"","ucode":"197AD33D438298","user_header":"https://static001.geekbang.org/account/avatar/00/16/48/e4/6feec30f.jpg","comment_is_top":false,"comment_ctime":1628582639,"is_pvip":false,"replies":[{"id":"110968","content":"嵌入式的 redis 也算不上年久失修吧，最新的版本是2020年6月发布的0.7.3，也就是一年多的时间。<br><br>可以看看别人是怎么用的<br>https:&#47;&#47;www.baeldung.com&#47;spring-embedded-redis","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628599501,"ip_address":"","comment_id":306488,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5923549935","product_id":100085101,"comment_content":"老师，你好，我想问下 Springboot 开发，在进行 集成测试的时候，有redis 依赖，是怎么进行测试的呢？<br>尝试过，embedded-redis 这些内嵌数据库，但是这些用起来不太理想，而且年久失修，有很多bug。<br>想问问老师这方面是怎么处理的。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524789,"discussion_content":"嵌入式的 redis 也算不上年久失修吧，最新的版本是2020年6月发布的0.7.3，也就是一年多的时间。\n\n可以看看别人是怎么用的\nhttps://www.baeldung.com/spring-embedded-redis","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628599501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306064,"user_name":"海朋森","can_delete":false,"product_type":"c1","uid":1165084,"ip_address":"","ucode":"212BADF1F9E962","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/1c/e59a699b.jpg","comment_is_top":false,"comment_ctime":1628325461,"is_pvip":false,"replies":[{"id":"110768","content":"覆盖率我这个工程里用的是Jacobo。这个专栏是写给程序员的，测试人员如果想了解自动化测试的思路也是可以学习的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628386496,"ip_address":"","comment_id":306064,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5923292757","product_id":100085101,"comment_content":"老师，你说的覆盖率是通过jacoco来获取的吗？<br>这个专栏是给开发看的还是qa也可以呢？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524614,"discussion_content":"覆盖率我这个工程里用的是Jacobo。这个专栏是写给程序员的，测试人员如果想了解自动化测试的思路也是可以学习的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628386496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305951,"user_name":"Insist","can_delete":false,"product_type":"c1","uid":1397782,"ip_address":"","ucode":"A4FE1ACBC8AA20","user_header":"https://static001.geekbang.org/account/avatar/00/15/54/16/1df5d5ed.jpg","comment_is_top":false,"comment_ctime":1628241140,"is_pvip":false,"replies":[{"id":"110735","content":"你问的是自动化部分吧？这是我在《10x程序员工作法》中介绍的内容。你可以参考着那篇文章自己改出来一个版本，大部分东西东西都有现成的插件。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628307493,"ip_address":"","comment_id":305951,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5923208436","product_id":100085101,"comment_content":"是否有maven版本的代码？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524572,"discussion_content":"你问的是自动化部分吧？这是我在《10x程序员工作法》中介绍的内容。你可以参考着那篇文章自己改出来一个版本，大部分东西东西都有现成的插件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628307493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361193,"user_name":"Geek_9c3134","can_delete":false,"product_type":"c1","uid":1141689,"ip_address":"浙江","ucode":"479BC6B4CF22FA","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/b9/9b0630b1.jpg","comment_is_top":false,"comment_ctime":1667312312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667312312","product_id":100085101,"comment_content":"老师 我有个疑问  为了方便测试 而去修改代码   会不会对正常的代码 带来不好的影响 副作用  比如 为了方便测试容易  调用的接口修改了的不合理了","like_count":0},{"had_liked":false,"id":347846,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1654510790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654510790","product_id":100085101,"comment_content":"隔离变化，逐步编写稳定的代码--记下来","like_count":0},{"had_liked":false,"id":344945,"user_name":"lamb","can_delete":false,"product_type":"c1","uid":1788774,"ip_address":"","ucode":"ED67FDCA8BB85F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4b/66/bac3697b.jpg","comment_is_top":false,"comment_ctime":1651890275,"is_pvip":false,"replies":[{"id":"126199","content":"我说的是除了程序库，像这里的 JSON 转换，实际上就是一个程序库。","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1652625415,"ip_address":"","comment_id":344945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651890275","product_id":100085101,"comment_content":" 《代码之丑》讲尽可能不要使用静态方法，上来就封装一层静态方法 ？？？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572174,"discussion_content":"我说的是除了程序库，像这里的 JSON 转换，实际上就是一个程序库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652625415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330965,"user_name":"听雨","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1642327690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642327690","product_id":100085101,"comment_content":"像RedisTemplate这种的类库，有必要封装到一个单独的类中吗","like_count":0},{"had_liked":false,"id":320344,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1636267076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636267076","product_id":100085101,"comment_content":"万能的中间层，封装异常还可以这样用！","like_count":0}]}