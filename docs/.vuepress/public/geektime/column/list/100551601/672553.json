{"id":672553,"title":"10｜数据库索引：为什么MySQL用B+树而不用B树？","content":"<p>你好，我是大明。</p><p>从这节课开始，我们将进入数据库这一章。在实际工作中，数据库设计得好不好、SQL 写得好不好将极大程度影响系统性能。而且，即便是再小的公司，也不可能说没有数据库，所以如果你担忧自己因为没有微服务架构经验难以通过面试，那么数据库就可以成为你反败为胜的一个点。</p><p>所以今天我们来聊一聊数据库中的第一个话题——索引。</p><p>索引在数据库面试中占据了相当大的比重。但是大部分人面试索引的时候都非常机械，所以难以在面试官心中留下深刻印象。索引是一个理论和实践的结合，今天这节课我先带你分析索引的基本原理，下节课我再在 SQL 优化这一个大主题下进一步带你分析索引设计和优化的实战案例。</p><p>索引的内容还是非常多的，尤其是有很多非常细碎的、不成体系的点，记起来非常难。所以这一节课我就会尽量用非常简单的话，以及一些奇妙的比喻来帮助你记忆和索引有关的内容。</p><h2>前置知识</h2><p>索引是用来加速查找的数据结构。绝大多数跟存储、查找有关的中间件都有索引功能，但是它们的原理不尽相同。</p><p>我们先来了解一下B+树的定义与特征。</p><h3>B+ 树</h3><p>B+ 树是一种多叉树，一棵m阶的B+树定义如下：</p><ol>\n<li>每个节点最多有 m 个子女。</li>\n<li>除根节点外，每个节点至少有 <code>[m/2]</code> 个子女，根节点至少有两个子女。</li>\n<li>有 k 个子女的节点必有 k 个关键字。</li>\n</ol><!-- [[[read_end]]] --><p>这里的关键字你可以直观地理解为就是索引全部列的值。B+ 树还有两个特征。</p><ul>\n<li><strong>叶子存放了数据</strong>，而非叶子节点只是存放了关键字。</li>\n<li><strong>叶子节点被链表串联起来了。</strong></li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/4f/2d/4f847baca3d0791yy3f09e3c63yy602d.png?wh=1920x618\" alt=\"图片\"></p><p>前面 B+ 树的定义你记不住没关系，但是这两个特征你一定要记住。为了帮助你理解和记忆，我给你打个比方。</p><p>一棵 B+ 树就像是一个部门。部门分成管理人员（非叶子节点）和基层员工（叶子节点），而管理人员只是负责传达命令（只放索引关键字），具体的事务（存放数据）都是由基层员工来执行的。</p><p>基层员工之间为了合作顺畅，私底下互相都有联系，对应到B+树上就是叶子节点被链表连在一起。</p><p>B+ 树用于数据库索引有3大优势。</p><ol>\n<li>B+ 树的高度和二叉树之类的比起来更低，树的高度代表了查询的耗时，所以<strong>查询性能更好</strong>。</li>\n<li>B+ 树的叶子节点都被串联起来了，<strong>适合范围查询</strong>。</li>\n<li>B+ 树的非叶子节点没有存放数据，所以<strong>适合放入内存中</strong>。</li>\n</ol><p>很多人都能记住 B+ 树的前两个优势，但是很容易忽略第三个优势。事实上，我们在讨论使用索引提高查询性能的时候，一个默认的前提就是索引本身会全部装进内存中，只有真实的数据行会放在磁盘上。否则，索引也放在磁盘上的话，使用索引的效果也就不明显了。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/25/8be51ff8f95900e1a1597431b5e6a025.png?wh=1920x919\" alt=\"图片\"></p><h2>索引分类</h2><p>这算是你在学习索引过程中一个非常容易迷惘的点，因为 MySQL 的索引站在不同的角度，就有不同的说法。</p><ul>\n<li>根据叶子节点是否存储数据来划分，可以分成<strong>聚簇索引</strong>和<strong>非聚簇索引</strong>。</li>\n<li>如果某个索引包含某个查询的所有列，那么这个索引就是<strong>覆盖索引</strong>。</li>\n<li>如果索引的值必须是唯一的，不能重复，那么这个索引就是<strong>唯一索引。</strong></li>\n<li>如果索引的某个列，只包含该列值的前一部分，那么这个索引就是<strong>前缀索引</strong>。比如说在一个类型是 varchar(128) 的列上，选择前 64 个字符作为索引。</li>\n<li>如果某个索引由多个列组成，那么这个索引就是<strong>组合索引，</strong>也叫做联合索引。</li>\n<li><strong>全文索引</strong>是指用于支持文本模糊查询的索引。</li>\n<li><strong>哈希索引</strong>是指使用哈希算法的索引，但是 MySQL 的InnoDB 引擎并不支持这种索引。</li>\n</ul><p>一个索引可以同时是覆盖索引、唯一索引、前缀索引和组合索引，你站在不同的角度去看待索引就会有不同的说法。</p><h3>聚簇索引和非聚簇索引</h3><p>如果索引叶子节点存储的是数据行，那么它就是聚簇索引，否则就是非聚簇索引。</p><p>简单来说，某个数据表本身你就可以看作是一棵使用主键搭建起来 B+ 树，这棵树的叶子节点放着表的所有行。而其他索引也是 B+ 树，不同的是它们的叶子节点存放的是主键。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/c0/b678418551507cf9a91519b524fed0c0.png?wh=1920x1037\" alt=\"图片\"></p><p>有了这种区分，你就能理解所谓的<strong>回表</strong>了。如果你查询一张表，用到了索引，那么数据库就会先在索引里面找到主键，然后再根据主键去聚簇索引中查找，最终找出数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/63/ea5f8fe7644f030bbe4ef1f03348yy63.png?wh=1920x1037\" alt=\"图片\"></p><p>如图所示，查询的时候先沿着绿色的线条在非聚簇索引中找到主键。然后拿着主键再去下面沿着黄色的线条找到数据行。这个数据行存放在磁盘里，所以触发磁盘 IO 之后能够读取出来。磁盘 IO 是非常慢的，因此回表性能极差，你在实践中要尽可能避免回表。</p><h3>覆盖索引</h3><p>如果你查询的列全部都在某个索引里面，那么数据库可以直接把索引存储的这些列的值给你，而不必回表。</p><p>比如说你有一个用户表 user_tab，在上面的 id 和 name 两列上创建了一个组合索引 <code>&lt;id, name&gt;</code>，那么对于这个查询来说 <code>SELECT id, name FROM user_tab WHERE id = 123</code>, SELECT 关键字后面的 id 和 name 两列都在这个索引里，那么就可以直接用索引的数据，不必回表查询了。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/7b/ef6b9fbf89221a8d069e6cac5cb9f87b.png?wh=1920x788\" alt=\"图片\"></p><p>那么，<strong>这个索引在这个查询下就是一个覆盖索引</strong>。所以覆盖索引并不是一个独立的索引，而是某个索引相对于某个查询而言的。</p><p>针对这个特性，优化 SQL 性能里面有两种常见的说法。</p><ol>\n<li>只查询需要的列。</li>\n<li>针对最频繁的查询来设计覆盖索引。</li>\n</ol><p>这两种说法本质上都是为了避免回表。</p><h3>索引的最左匹配原则</h3><p>索引在查询中是按照最左匹配原则来使用的，细究起来这个原则还是有点难以理解。我用一个例子来给你解释最左匹配原则的运行机制。比如说你创建了一个在 A、B、C 三个列上的组合索引 <code>&lt;A, B, C&gt;</code>。我用一个表格来展示一下索引列的值的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/9d/47eb1d5a892461ac54ee312937293c9d.png?wh=1920x701\" alt=\"图片\"></p><p>我们可以看到：A 是绝对有序的；在 A 确定的情况下，B 是有序的；在 A 和 B 都确定的情况下，C 是有序的。</p><p>那么反过来说：</p><ul>\n<li>如果 A 的值不确定，那么 B 和 C 都是无序的。例如当 A 取值可能为 1 或者 2 的时候，B 的取值可能是 <code>(23, 44, 31)</code>。</li>\n<li>如果 A 的值确定，但是 B 的值不确定，那么 C 是无序的。例如当 A=1 而 B 可能是 44 或者 31 的时候，C 的值可能是 <code>(122, 132, 109)</code>。</li>\n</ul><p>所以执行一个 <code>WHERE A=a1 AND B=b1 AND C=c1</code> 的查询就类似于：</p><pre><code class=\"language-go\">for a in A {\n  if a == a1 {\n    for b in B {\n      if b == b1 {\n        for c in C {\n          if c == c1 {\n            // 这就是你要的数据，拿到主键之后去磁盘里面加载出来\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre><p>你从这个角度出发，就能理解其他最左匹配原则的情况了。</p><ul>\n<li>如果查询条件是 <code>WHERE A = a1 AND B = b1</code>，那么你可以推断出来，数据库只会应用外层的两重循环，不会对 C 进行过滤。</li>\n</ul><pre><code class=\"language-go\">for a in A {\n  if a == a1 {\n      for b in B {\n        if b == b1 {\n          // 这就是你要的结果，去磁盘里面读取\n        }\n      }\n  }\n}\n</code></pre><ul>\n<li>如果查询条件是 <code>WHERE A = a1 OR B = b1</code>，那么这个查询并不会使用这个索引。</li>\n</ul><pre><code class=\"language-go\">for a in A {\n  if a == a1 {\n      as = append(as, a)\n  }\n}\nfor b in B {\n  if b == b1 {\n      bs = append(bs, b)\n  }\n}\n// as 和 bs 的并集就是你要的结果\n</code></pre><ul>\n<li>如果查询条件是 <code>WHERE A=a1 AND B &gt; b1 AND C = c1</code>，那么这个查询只会使用索引的 A 和 B 两列。</li>\n</ul><pre><code class=\"language-go\">for a in A {\n  if a == a1 {\n      for b in B {\n        if b &gt; b1 {\n          // C 是无序的，所以用不了。你可以从前面的表格里面看出来\n          // 比如说 b &gt; 23 之后，对应的 C 是乱序的\n          // 这就是你要的结果，去磁盘里面读取\n        }\n      }\n  }\n}\n</code></pre><ul>\n<li>如果查询条件是 <code>WHERE A !=a1</code>，那么这个查询也不会使用索引。</li>\n</ul><p>我给你整理了一个简单的口诀用于判断会不会使用索引。按照组成索引的列的顺序，从左往右：<strong>AND 用 OR 不用，正用反不用，范围则中断</strong>。</p><p>这个口诀是一个简化之后的版本，还有一些意外情况是不符合这个口诀描述的规律的。比如说 <code>M = 1 OR N = 2</code>，如果单列 M 上有一个索引，并且单列 N 上也有一个索引，那么还是可能会使用 M 和 N 上的两个索引。</p><p>在实践中，用索引还是不用索引，就一个原则：<strong>看 EXPLAIN 命令的输出</strong>。</p><h3>索引的代价</h3><p>索引并不是没有代价的，它会消耗很多的系统资源。</p><ol>\n<li>索引本身需要存储起来，消耗磁盘空间。</li>\n<li>在运行的时候，索引会被加载到内存里面，消耗内存空间。</li>\n<li>在增删改的时候，数据库还需要同步维护索引，引入额外的消耗。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/7c/cf/7c55f215a48235fba933b87b591d38cf.png?wh=1920x889\" alt=\"图片\"></p><p>这部分内容你也需要记住，因为现在有一些面试官的套路就是突然问你违反直觉的问题。例如正常我们都认为索引非常好，有很多优点，那么面试官就可能突然问你“使用索引有什么问题”“索引有什么坏处”等问题。</p><h2>面试准备</h2><p>首先你要弄清楚公司内使用索引的情况，或者你所在公司使用过的各种索引，以及有没有出现索引设计不当引发的线上故障。</p><p>如果你有意为自己打造掌握了高性能架构的人设，那么你面试索引的最佳策略就是在自我介绍或者介绍项目的时候提及索引和索引优化。</p><p>在面试中有一种情况是比较棘手的，即面试官给出一个表定义，然后手写一个 SQL，要你判断这个 SQL 会不会使用索引。你平时要刻意练习一下，省得面试的时候被打个措手不及。遇到这种题目，你还要注意强调一点，就是你的回答都是建立在<strong>一般情况</strong>下。因为有些面试官会故意不告诉你表中数据大小，有没有其他索引等情况。</p><p>在你回答完之后，他可能会批评你没有考虑到数据库压根不使用索引的可能性。所以回答完他的问题之后，你加一段话。</p><blockquote>\n<p>我刚才的分析都是基于一般情况，但是如果说数据库还有别的索引，或者查询条件过滤效果不好导致数据库压根不使用索引的情况，那就是另外一个问题了。</p>\n</blockquote><p>这个“免责声明”也能够将面试官引导到后面的进阶亮点“为什么数据库不使用索引”中。</p><p>如果面试官问到了这些问题，那么你可以将话题引导到索引下。</p><ul>\n<li>你有没有做过性能优化？</li>\n<li>你是否了解 B 树、B+ 树？</li>\n<li>你知道聚簇索引、覆盖索引吗？</li>\n<li>数据库一定会使用索引吗？</li>\n<li>使用索引性能一定好吗？这个问题你要综合考虑索引本身的开销，以及数据库压根不用索引的情况。</li>\n</ul><h2>基本思路</h2><p>如果你在简历、自我介绍或者项目介绍任何一个地方提及了自己懂索引原理、索引设计和优化技巧，那么面试官肯定就会问你索引有关的东西。</p><p>如果面试官问索引问得非常细，例如“什么是覆盖索引”这种，只需要按照前置知识里面的内容回答就可以。</p><p>如果面试官问得比较笼统，你就可以用这里我给你的这个介绍索引的话术，你可以根据自己的需要选择回答全部或者只使用一部分。这个话术由<strong>B+树、索引分类、最左匹配原则</strong>三个部分组成。</p><blockquote>\n<p>从数据结构上来说，在 MySQL 里面索引主要是 B+ 树索引。它的查询性能更好，适合范围查询，也适合放在内存里。<br>\n&nbsp;<br>\nMySQL 的索引又可以从不同的角度进一步划分。比如说根据叶子节点是否包含数据分成聚簇索引和非聚簇索引，还有包含某个查询的所有列的覆盖索引等等。数据库使用索引遵循最左匹配原则。但是最终数据库会不会用索引，也是一个比较难说的事情，跟查询有关，也跟数据量有关。在实践中，是否使用索引以及使用什么索引，都要以 EXPLAIN 为准。</p>\n</blockquote><p>在这样一个话术中，我设计了几个可以引导的点，面试官是比较有可能进一步追问的。</p><ol>\n<li>为什么 MySQL 用了 B+ 树，而没有用 B 树？在这个问题的基础上，面试官可能会进一步问，二叉树、红黑树和跳表之类的数据结构用作索引是否合适。</li>\n<li>回表以及和回表密切相关的覆盖索引。从这一个问题又可以进一步引申到索引优化和 SQL 优化上。这些索引的内容我们下节课会学习。</li>\n<li>数据库不使用索引的几种可能。</li>\n</ol><p>这些问题我们来一一解决。</p><h2>亮点1：MySQL 为什么使用 B+ 树？</h2><p>回答这个问题，你就不能仅仅局限在 B+ 树和 B 树上，你要连带着二叉树、红黑树、跳表一起讨论。总结起来，在用作索引的时候，其他数据结构都有一些难以容忍的缺陷。</p><ul>\n<li>与B+ 树相比，平衡二叉树、红黑树在同等数据量下，<strong>高度更高，性能更差</strong>，而且它们会频繁执行再平衡过程，来保证树形结构平衡。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/98/b3/98e3c18b24a864cd47c500553d01e9b3.png?wh=1920x1030\" alt=\"图片\"></p><ul>\n<li>与B+ 树相比，跳表在极端情况下会退化为链表，<strong>平衡性差</strong>，而数据库查询需要一个可预期的查询时间，并且跳表需要更多的内存。</li>\n<li>与B+ 树相比，B 树的数据存储在全部节点中，<strong>对范围查询不友好。</strong>非叶子节点存储了数据，<strong>导致内存中难以放下全部非叶子节点</strong>。如果内存放不下非叶子节点，那么就意味着查询非叶子节点的时候都需要磁盘 IO。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/4a/2b/4aae0280d5c58035e387e9027577e92b.png?wh=1920x794\" alt=\"图片\"></p><p>因此一个数据结构是否适合数据库索引，取决于这种数据结构的增删改查性能。并且在关系型数据库里面，还额外要求对范围查询友好，减少内存消耗。</p><h2>亮点2：为什么数据库不使用索引？</h2><p>实际上，数据库在一些特殊的情况下可能并不会使用任何索引。例如在前面的索引 <code>&lt;A, B, C&gt;</code> 的例子中，假设 A 的所有值都是正数，然后查询条件 <code>WHERE A &gt; -1</code>，那么这个时候数据库会觉得还不如直接全表扫描，那么虽然有一个索引看起来能用，但是最终并不会用。</p><p>我也在面试准备那部分提醒过你，要小心面试官挖坑让你掉下去。总结起来，数据库可能不使用索引的原因有以下几种：</p><ul>\n<li>使用了 <code>!=</code>、<code>LIKE</code> 之类的查询。</li>\n<li>字段区分度不大。比如说你的 status 列只有 0 和 1 两个值，那么数据库也有可能不用。</li>\n<li>使用了特殊表达式，包括数学运算和函数调用。</li>\n<li>数据量太小，或者 MySQL 觉得全表扫描反而更快的时候。</li>\n</ul><p>我稍微强调一下，这里说的是“<strong>可能</strong>不使用索引”，不是说一定不使用索引。比如说 LIKE 查询，如果只是 LIKE abc% 这种前缀查询，那么还是可能用索引的。</p><p>你还可以进一步解释 FORCE INDEX（强迫使用索引）、USE INDEX（使用索引）或者 IGNORE INDEX（忽略索引）之类的 SQL 提示，关键词是<strong>取决于数据库。</strong></p><blockquote>\n<p>虽然很多数据库都支持类似于 FORCE INDEX 、USE INDEX 和 IGNORE INDEX 之类的特性，但是使用这一类功能的时候，要千万注意数据库是怎么支持的。有些数据库是根本不管这些提示，有些则是特定情况下不管。当然最佳实践还是不要用这些东西，逼不得已的时候比如说要优化性能了再考虑使用。</p>\n</blockquote><p>然后你可以以一种比较轻松的语气来引导到下一个亮点。</p><blockquote>\n<p>有一种说法是含有 NULL 的列上的索引会失效，不过这个说法并不准确，实际上 MySQL 还是会尽可能用索引的。</p>\n</blockquote><p>之所以要让语气比较轻松，是害怕对面的面试官就抱有这种错误的观点。你语气轻松比较不容易激起逆反心理。</p><h2>亮点3：索引与 NULL</h2><p>我们通常用 NULL 来表达“不知道”“不存在”“不合法”等语义。而数据库通常也会针对 NULL 来做一些特殊的处理。</p><p>MySQL 的索引对 NULL 的支持稍微有点与众不同。首先 MySQL 本身会尽可能使用索引，即便索引的某个列里面有零值，并且 IS NULL 和 IS NOT NULL 都可以使用索引。</p><p>其次 MySQL 的唯一索引允许有多行的值都是 NULL。也就是说你可以有很多行唯一索引的列的值都是 NULL。但是不管怎么说，使用 NULL 都是一个比较差的实践。</p><h2>面试思路总结</h2><p>这一节课我们主要学习了索引的基本原理。你需要重点掌握索引的数据结构、B+ 树原理、索引分类、回表，以及索引在查询中的运行原理。</p><p>此外如果想要在面试中刷出亮点，你需要从下面几个方向去努力。</p><ul>\n<li>MySQL 为什么使用 B+ 树？你要综合对比不同的数据结构的特性。</li>\n<li>为什么数据库不使用索引？</li>\n<li>索引与 NULL 的特殊之处。</li>\n</ul><p>我在前面还提到了一个有趣的面试场景。即面试官会问你某个具体场景的问题，但是不会告诉你细节和约束。比如说给你一个查询语句，让你判断会不会走索引。</p><p>虽然我不太喜欢这种面试套路，但是不得不说很多面试官就喜欢这样搞。他们的出发点是希望考察候选人思维是否缜密，能不能考虑到各种异常情况、边缘场景。</p><p>但是很多时候面试官出题根本没有考虑到候选人的技术背景。比如说你本职是做支付相关的，而他出的题是订单相关的。那么在这种专业不对口的情况下，你基本上不可能答好。这也是我认为这种面试套路实际上并不太能考察出候选人真实水平的核心原因。</p><p>应付这种面试套路也很简单，你只需要保持警惕。当面试官问你一个具体问题的时候，你先尽可能问清楚一些约束条件，最常见的就是并发量有多高、数据量有多大、可用性要求多高、一致性要求多高。</p><p>如果面试官不告诉你，让你考虑。或者你自己不打算问，那么你可以采用防御性的面试策略，在回答具体方案的时候先自己交代清楚这个方案的约束。</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/yb/cc086d6a776dfe5d72f7bfc94d70eyyb.jpg?wh=1924x1779\" alt=\"\"></p><h1>思考题</h1><ul>\n<li>你有没有遇到过索引设计不合理引发的线上故障？如果有，当时你是怎么定位问题、怎么解决问题的？</li>\n<li>你有没有因为 NULL 而出现过奇奇怪怪的问题？</li>\n</ul><p>欢迎你把你的经历和体会分享到评论区，和我一起交流讨论，也欢迎你把这节课分享给需要的朋友，邀他一起学习，我们下节课再见！</p>","neighbors":{"left":{"article_title":"模拟面试（一）｜微服务架构面试思路一图懂","id":672561},"right":{"article_title":"11｜SQL优化：如何发现SQL中的问题？","id":674168}},"comments":[{"had_liked":false,"id":378039,"user_name":"子休","can_delete":false,"product_type":"c1","uid":1131592,"ip_address":"上海","ucode":"EDB61FB012C195","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/48/fae317c1.jpg","comment_is_top":false,"comment_ctime":1689685068,"is_pvip":false,"replies":[{"id":137779,"content":"是的，就是这种索引用起来效果不太好，因为区分度太低了。当然，如果你主要查询都是查 failed 的，那么就还挺好用的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689741801,"ip_address":"广东","comment_id":378039,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"关于索引列区分度的问题，这里稍微补充一个例子。\n其实也未必所有区分度不高的索引都不会生效，比如一个列里面只有0和1两种值，看上去似乎区分度不高，但是如果0和1的值比例完全失衡，比如是95:5的比例，那么这种索引也有可能是生效。\n比如一般的任务表里面，状态字段绝大多数都是“success”，少部分是“failed”，如果你查询的是失败的记录，这个时候状态字段的索引就可以生效了。","like_count":17,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623674,"discussion_content":"是的，就是这种索引用起来效果不太好，因为区分度太低了。当然，如果你主要查询都是查 failed 的，那么就还挺好用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689741801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377628,"user_name":"死者苏生","can_delete":false,"product_type":"c1","uid":1029285,"ip_address":"河南","ucode":"830E0483DE52A6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b4/a5/396268e5.jpg","comment_is_top":false,"comment_ctime":1688895020,"is_pvip":false,"replies":[{"id":137643,"content":"感谢指正，我重新写一下相关论述。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689047916,"ip_address":"广东","comment_id":377628,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;519658576  mongodb用的wiredTiger就是B+树，建议这篇修改下，不要误人子弟","like_count":8,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623112,"discussion_content":"感谢指正，我重新写一下相关论述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689047916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1658706,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4f/52/791d0f5e.jpg","nickname":"Qualifor","note":"","ucode":"8F42453286719C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634362,"discussion_content":"我不赞成你的说法，你列出的这篇文章链接也只是一个博主自己写的，他通篇都是自己的分析且没有任何代码支撑，这是站不住脚的。我不排除有可能他是对的，但是至少他没有给出足够的证据支撑，毕竟谁都能写文章，你不能随便找一篇博主的文档就过来喷作者“误人子弟”这种话","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1703303555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3781787,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLyoC3cOK6vIMfDXv4jSAicrDyr0icyDRTC35WpHkxx5ExJbqW9GNuTXibSZCVaYDywh872QT15AWM1Q/132","nickname":"Geek_567f64","note":"","ucode":"D3799D08794EA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634463,"discussion_content":"作者这篇文章写得很不错啊。就算就算文中出现了瑕疵，也不能算是误人子弟吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1703553766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377805,"user_name":"徐石头","can_delete":false,"product_type":"c1","uid":1035885,"ip_address":"湖南","ucode":"D8FA8A64FB7E33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/6d/530df0dd.jpg","comment_is_top":false,"comment_ctime":1689243342,"is_pvip":true,"replies":[{"id":137708,"content":"赞！说得很准确！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689424092,"ip_address":"广东","comment_id":377805,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"SELECT id, name FROM user_tab WHERE id = 123，这个SQL中需要强调id不是作为主键，因为id如果是主键，就会直接走主键索引，无法体现覆盖索引中只查询索引中的字段的过程，另外联合索引&lt;id，name&gt;中如果SQL改成SELECT id, name，age FROM user_tab WHERE id = 123就无法实现覆盖索引的效果","like_count":5,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623405,"discussion_content":"赞！说得很准确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689424093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377602,"user_name":"长脖子树","can_delete":false,"product_type":"c1","uid":1182802,"ip_address":"浙江","ucode":"D9090EF67EEB1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","comment_is_top":false,"comment_ctime":1688839199,"is_pvip":true,"replies":[{"id":137646,"content":"感谢指正，我调整一下！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689048330,"ip_address":"广东","comment_id":377602,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"Mongo用的就是B+树","like_count":4,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623118,"discussion_content":"感谢指正，我调整一下！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689048331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2824621,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/sPKlUGmy9ic45Ky4Oq13poOtwGEcicszKswahLMdXh8lWpiaIy8g9OPFvdQVgCxBAFeXWUIWHVTiaRLU2oEWkxbdiaw/132","nickname":"Geek_be29f8","note":"","ucode":"E35C96A345C4EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":634943,"discussion_content":"我的知识太久没更新还是一直是错误的。mongo实际上是b+ tree？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704205036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623118,"ip_address":"北京","group_id":0},"score":634943,"extra":""}]},{"author":{"id":1299095,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/97/5f4cd8da.jpg","nickname":"虎虎生威的程坚强","note":"","ucode":"321C89298D3682","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622988,"discussion_content":"（1）https://www.mongodb.com/docs/manual/indexes/#ref-b-tree-id2，MDB官网上这里写的是B树（个人理解这里的b tree应该是广义的b tree）\n（2）https://developer.aliyun.com/ask/135306?spm=a2c6h.13159736 有大佬说在专场问了引擎作者实际是b+树，翻了下引擎官网https://source.wiredtiger.com/10.0.0/tune_page_size_and_comp.html，看文档确实是B+tree\n（3）鉴于MySQL 官网写的也是BTREE，但实际是b+ tree，这里个人觉得MDB还是倾向于B+ tree","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1688903665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377600,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1688828312,"is_pvip":false,"replies":[{"id":137647,"content":"可以这么理解，所以当你在更新数据的时候，MySQL 还需要同步维护索引结构。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689048366,"ip_address":"广东","comment_id":377600,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"确认一下理解：根据文章内容，索引其实是表的一部分数据，如果表的数据是100M，那么，某个索引包含其中的10M数据，这样共有100M + 10M。这10M是表数据之外的数据，是表数据中某部分数据的一个拷贝。比如，表中有一个字段“name = zhangsan”,建立与该name的索引后，磁盘中有两份name。是这样吗？","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623119,"discussion_content":"可以这么理解，所以当你在更新数据的时候，MySQL 还需要同步维护索引结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689048366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381415,"user_name":"sheep","can_delete":false,"product_type":"c1","uid":2770150,"ip_address":"广东","ucode":"DAC2036F08CE27","user_header":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","comment_is_top":false,"comment_ctime":1695175140,"is_pvip":false,"replies":[{"id":139040,"content":"如果我是面试官，我就会杠，如果不能停掉服务呢？阁下该如何应对？","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1695728679,"ip_address":"广东","comment_id":381415,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"你有没有遇到过索引设计不合理引发的线上故障？\n线上ddl操作，需要删除一个索引，然后新建一个，删除之后，出现堆积大量的慢查询；这时候新建索引会被阻塞住（mdl读锁和写锁），后面的查询也一并阻塞住了。\n解决办法是：临时关闭服务对外使用，kill掉创建索引后面的查询，待索引创建成功后，服务再恢复使用","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628707,"discussion_content":"如果我是面试官，我就会杠，如果不能停掉服务呢？阁下该如何应对？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695728679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":628726,"discussion_content":"如果有备用数据库的话，可以将读的请求代理到备用数据库上，写的请求直接拦截熔断（有想过将写请求缓存消息队列，后期主数据库恢复后处理，但是这时候一旦有读请求来请求这些写请求的数据的话处理起来会比较麻烦）；等待主数据库恢复之后，再将请求从备数据库代理回主数据库去，解除熔断状态","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1695743722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":628707,"ip_address":"广东","group_id":0},"score":628726,"extra":""}]},{"author":{"id":3876444,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/GPLUa1IFLd5wvoLPEia1ick2bznDf7ESvKH3baY6fkjNlwtBnFbU2jdNlhKJQCibOAaPEjp5A31MEgU7hJ9DBSqaJOvmlXSeAHBxmdAQ6FmXjM/132","nickname":"Geek_440fc7","note":"","ucode":"990C9BFFCF911A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":642297,"discussion_content":"我们的表结构变更是会有ghost表复制一份，然后实时追binlog以及同步历史数据，最后rename，达到无损变更。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1713452084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2840547,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/57/e3/0d1f43d6.jpg","nickname":"想要变成男二号的男三号","note":"","ucode":"6A444BF333DF45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640757,"discussion_content":"tdsql这种情况备库都给干崩了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711806621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633444,"discussion_content":"用得着这么麻烦吗，MySQL5.6以后不是能支持在线DDL","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702194688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387499,"user_name":"Geek_c1118e","can_delete":false,"product_type":"c1","uid":3808125,"ip_address":"安徽","ucode":"D9B04A9E472828","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIw0wz2BO1OXKUD4h7RQ82mGQ8Zt6ibURuz4ciagvKgwGCJmXVVMqZggHZloEEvLgcuXd7x5YzpibibaUnqfZWROKeVIOnVApjR6FsrbqIHU3v32g/132","comment_is_top":false,"comment_ctime":1707649931,"is_pvip":false,"replies":[{"id":141348,"content":"我个人认为只是说法不同，本质是一样的。\n不同引擎的数据结构是独立的，它们没什么关系，只是说恰好都是类似的结构而已。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1709715304,"ip_address":"广东","comment_id":387499,"utype":1}],"discussion_count":0,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"请教一下老师：InnoDB存储引擎的非主键（辅助索引等）和非聚簇索引是否是一个概念，另外，像MyISM中叶子节点存储地址的也是非聚簇索引，所以非聚簇索引是包含这两种格式吗？（：网上看一些相关概念有点混淆，想确认一下","like_count":0},{"had_liked":false,"id":380072,"user_name":"Singin in the Rain","can_delete":false,"product_type":"c1","uid":1047881,"ip_address":"北京","ucode":"70741A6D119197","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fd/49/2f38bb6d.jpg","comment_is_top":false,"comment_ctime":1692927384,"is_pvip":true,"replies":[{"id":138555,"content":"赞赞赞。我这里是指我们作为一个用户，是没办法说创建一个哈希索引的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693489633,"ip_address":"广东","comment_id":380072,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"关于哈希索引，文中提到『但是 MySQL 的 InnoDB 引擎并不支持这种索引。』这一段表述不是很精确。哈希索引确实用在MEMORY存储引擎中，但是这种索引存在一个变种，自适应哈希索引，InnoDB引擎通过innodb_adaptive_hash_index参数控制在其内部使用。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626937,"discussion_content":"赞赞赞。我这里是指我们作为一个用户，是没办法说创建一个哈希索引的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693489633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379339,"user_name":"小戴同学","can_delete":false,"product_type":"c1","uid":3027604,"ip_address":"北京","ucode":"4D97F2C13CF837","user_header":"https://static001.geekbang.org/account/avatar/00/2e/32/94/1596385e.jpg","comment_is_top":false,"comment_ctime":1691743214,"is_pvip":false,"replies":[{"id":138263,"content":"不是的，聚簇索引的非叶子部分是可以直接放在内存的。\n\n话又说回来，如果整个内存不够的话，那么索引还是有可能一直在磁盘上的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1692080371,"ip_address":"广东","comment_id":379339,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"请教一下：\n&quot;这个数据行存放在磁盘里，所以触发磁盘 IO 之后能够读取出来。磁盘 IO 是非常慢的，因此回表性能极差，你在实践中要尽可能避免回表&quot;这句话说回表的性能差的原因，但是前面&quot;一个默认的前提就是索引本身会全部装进内存中，只有真实的数据行会放在磁盘上&quot;，那使用主键索引也需要走磁盘，性能差别就是拿到主键之后再去拿数据的性能差吗？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625702,"discussion_content":"不是的，聚簇索引的非叶子部分是可以直接放在内存的。\n\n话又说回来，如果整个内存不够的话，那么索引还是有可能一直在磁盘上的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692080371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3787155,"avatar":"https://static001.geekbang.org/account/avatar/00/39/c9/93/13c7d9aa.jpg","nickname":"shikamaru","note":"","ucode":"19260049B7F498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638677,"discussion_content":"还是没理解，聚簇索引的非叶子部分是可以直接放在内存的，但是最终数据是从叶子节点读取的呀，不还是需要磁盘IO吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709792107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1184140,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/8c/503e440e.jpg","nickname":"柴墟散人","note":"","ucode":"DCD96E17C89408","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3787155,"avatar":"https://static001.geekbang.org/account/avatar/00/39/c9/93/13c7d9aa.jpg","nickname":"shikamaru","note":"","ucode":"19260049B7F498","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645899,"discussion_content":"非叶子节点里面包含了你需要的数据就不需要回表查询了，譬如只select id from users where id = 1;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716966267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":638677,"ip_address":"江苏","group_id":0},"score":645899,"extra":""},{"author":{"id":1434114,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e2/02/488aec70.jpg","nickname":"超级费事儿","note":"","ucode":"FD873FF4ADAA5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3787155,"avatar":"https://static001.geekbang.org/account/avatar/00/39/c9/93/13c7d9aa.jpg","nickname":"shikamaru","note":"","ucode":"19260049B7F498","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652332,"discussion_content":"聚簇索引的叶子节点就是真实的数据指针，非聚簇索引的叶子节点是聚簇索引(主键)。所以非聚簇索引获取数据会多一个通过聚簇索引(主键)获取真实数据的流程，这就是回表了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1728714105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":638677,"ip_address":"四川","group_id":0},"score":652332,"extra":""}]}]},{"had_liked":false,"id":378982,"user_name":"江 Nina","can_delete":false,"product_type":"c1","uid":1655563,"ip_address":"北京","ucode":"18E41503CC43C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/43/0b/7688f18c.jpg","comment_is_top":false,"comment_ctime":1691082246,"is_pvip":false,"replies":[{"id":138137,"content":"严格来说，它走不走索引，不一定。也就是说，如果 MySQL 用 A 索引能加速查询，也就是扫描的行数少，那么它就用；如果用 A 索引，但是 OR 后面的查询条件比起来，B = b1 命中了很多行，那么就不会用 A 的索引，而是直接扫描。\n\n简单来说，就是 OR 两边的条件，MySQL 认为命中的数据越少，就越倾向于用索引。反过来，就不会用索引。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1691412479,"ip_address":"广东","comment_id":378982,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"“如果查询条件是 WHERE A = a1 OR B = b1，那么这个查询并不会使用这个索引。” 这个是为什么呢 明白b不会走索引 但是感觉前一个A会走索引啊","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625157,"discussion_content":"严格来说，它走不走索引，不一定。也就是说，如果 MySQL 用 A 索引能加速查询，也就是扫描的行数少，那么它就用；如果用 A 索引，但是 OR 后面的查询条件比起来，B = b1 命中了很多行，那么就不会用 A 的索引，而是直接扫描。\n\n简单来说，就是 OR 两边的条件，MySQL 认为命中的数据越少，就越倾向于用索引。反过来，就不会用索引。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691412480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1418226,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a3/f2/ab8c5183.jpg","nickname":"Sampson","note":"","ucode":"BA78CA29A6D898","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":625370,"discussion_content":"那么这里我想请教下，MySQL 认为命中的数据多少，是依据什么来判断的，如果是扫描索引树的话，那直接就走索引了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691626367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625157,"ip_address":"上海","group_id":0},"score":625370,"extra":""},{"author":{"id":1172050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","nickname":"牙小木","note":"","ucode":"E5C12D37A62949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1418226,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a3/f2/ab8c5183.jpg","nickname":"Sampson","note":"","ucode":"BA78CA29A6D898","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625383,"discussion_content":"记得他有个page页上的采样统计，就是查询出的值与实际存储值的比例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691634963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625370,"ip_address":"北京","group_id":0},"score":625383,"extra":""}]},{"author":{"id":1432755,"avatar":"https://static001.geekbang.org/account/avatar/00/15/dc/b3/1e09c2d5.jpg","nickname":"Homto","note":"","ucode":"EBA8CDB9FC4AFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625024,"discussion_content":"应该是对B= b1这个需要做全表扫描，既然都做了全表扫描，顺带对A=a1这个条件也进行了过滤，没有必要再专门走一次索引。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1691205959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1655563,"avatar":"https://static001.geekbang.org/account/avatar/00/19/43/0b/7688f18c.jpg","nickname":"江 Nina","note":"","ucode":"18E41503CC43C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1432755,"avatar":"https://static001.geekbang.org/account/avatar/00/15/dc/b3/1e09c2d5.jpg","nickname":"Homto","note":"","ucode":"EBA8CDB9FC4AFD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625127,"discussion_content":"明白啦 感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691386644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625024,"ip_address":"北京","group_id":0},"score":625127,"extra":""}]}]},{"had_liked":false,"id":378821,"user_name":"一本书","can_delete":false,"product_type":"c1","uid":2767251,"ip_address":"广东","ucode":"4C07047F052BB4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/93/f0247cf8.jpg","comment_is_top":false,"comment_ctime":1690848387,"is_pvip":true,"replies":[{"id":138048,"content":"1. 我这里说的是普通索引。普通索引的叶子节点存储的是主键，所以你需要用主键再去回表。\n2. 不能干预。这是 MySQL 的内部机制。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690890513,"ip_address":"广东","comment_id":378821,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"如果你查询一张表，用到了索引，那么数据库就会先在索引里面找到主键，然后再根据主键去聚簇索引中查找，最终找出数据。\n老师请教一下Q1：为啥是用到了索引，还要从索引里面找到主键，在通过主键回表查呢？不能通过主键直接查吗？是不是因为这个索引用的不是聚簇索引。存的是主键，只好通过主键去查了。\nQ2：聚簇索引和非聚簇索引，可以人为的去干预吗？全部用聚簇，是不是就不会产生回表了。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624749,"discussion_content":"1. 我这里说的是普通索引。普通索引的叶子节点存储的是主键，所以你需要用主键再去回表。\n2. 不能干预。这是 MySQL 的内部机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690890513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2524844,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erIAJHP5VtBib8NqwXMV4DX8XHAFQwyUgEOpUmAia4WbYuDI0iauibl9TNXibCHKEA0ic6ppZK3ib5HCwJPQ/132","nickname":"天下文章一大抄","note":"","ucode":"A4DC52E22A0096","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637306,"discussion_content":"如果可以人工干预的话，你创建一个聚簇索引就相当于把这个表copy了一份，用N份冗余数据换一次回表的时间是不是不太合理？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708324545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378047,"user_name":"ZhiguoXue_IT","can_delete":false,"product_type":"c1","uid":2639055,"ip_address":"北京","ucode":"EAA83F53B54520","user_header":"https://static001.geekbang.org/account/avatar/00/28/44/cf/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1689690635,"is_pvip":false,"replies":[{"id":137780,"content":"啊！这么神奇！是删除过程不能插入吧？","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689741853,"ip_address":"广东","comment_id":378047,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"我们之前遇到过一次线上问题，删了索引，导致数据插不进去了。\n","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623675,"discussion_content":"啊！这么神奇！是删除过程不能插入吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689741853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744257,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","nickname":"千锤百炼领悟之极限","note":"","ucode":"224B5CF2101716","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652401,"discussion_content":"这种情况是，表数据太多，删除索引变成长事务，长期持有MDL写锁，导致其他语句获取MDL读锁被阻塞。\n\n这种操作应该在业务低峰期操作，或者无锁变更结构方案，例如gh–ost","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1728876277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2639055,"avatar":"https://static001.geekbang.org/account/avatar/00/28/44/cf/791d0f5e.jpg","nickname":"ZhiguoXue_IT","note":"","ucode":"EAA83F53B54520","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623682,"discussion_content":"是的，表的数据比较多，删除索引的时候时间长，导致业务收影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689747736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}