{"id":9302,"title":"22 | 想成为架构师，你必须知道CAP理论","content":"<p>CAP定理（CAP theorem）又被称作布鲁尔定理（Brewer&#39;s theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在2000年的ACM PODC上提出的一个猜想。2002年，麻省理工学院的赛斯·吉尔伯特（Seth Gilbert）和南希·林奇（Nancy Lynch）发表了布鲁尔猜想的证明，使之成为分布式计算领域公认的一个定理。<span class=\"orange\">对于设计分布式系统的架构师来说，CAP是必须掌握的理论。</span></p>\n<p>布鲁尔在提出CAP猜想的时候，并没有详细定义Consistency、Availability、Partition Tolerance三个单词的明确定义，因此如果初学者去查询CAP定义的时候会感到比较困惑，因为不同的资料对CAP的详细定义有一些细微的差别，例如：</p>\n<blockquote>\n<p><strong>Consistency</strong>: where all nodes see the same data at the same time.</p>\n<p><strong>Availability</strong>: which guarantees that every request receives a response about whether it succeeded or failed.</p>\n<p><strong>Partition tolerance</strong>: where the system continues to operate even if any one part of the system is lost or fails.</p>\n</blockquote><!-- [[[read_end]]] -->\n<p>(<a href=\"https://console.bluemix.net/docs/services/Cloudant/guides/cap_theorem.html#cap-\">https://console.bluemix.net/docs/services/Cloudant/guides/cap_theorem.html#cap-</a>)</p>\n<blockquote>\n<p><strong>Consistency</strong>: Every read receives the most recent write or an error.</p>\n<p><strong>Availability</strong>: Every request receives a (non-error) response – without guarantee that it contains the most recent write.</p>\n<p><strong>Partition tolerance</strong>: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes.</p>\n</blockquote>\n<p>(<a href=\"https://en.wikipedia.org/wiki/CAP_theorem#cite_note-Brewer2012-6\">https://en.wikipedia.org/wiki/CAP_theorem#cite_note-Brewer2012-6</a>)</p>\n<blockquote>\n<p><strong>Consistency</strong>: all nodes have access to the same data simultaneously.</p>\n<p><strong>Availability</strong>: a promise that every request receives a response, at minimum whether the request succeeded or failed.</p>\n<p><strong>Partition tolerance</strong>: the system will continue to work even if some arbitrary node goes offline or can’t communicate.</p>\n</blockquote>\n<p>(<a href=\"https://www.teamsilverback.com/understanding-the-cap-theorem/\">https://www.teamsilverback.com/understanding-the-cap-theorem/</a>)</p>\n<p>为了更好地解释CAP理论，我挑选了Robert Greiner（<a href=\"http://robertgreiner.com/about/\">http://robertgreiner.com/about/</a>）的文章作为参考基础。有趣的是，Robert Greiner对CAP的理解也经历了一个过程，他写了两篇文章来阐述CAP理论，第一篇被标记为“outdated”（有一些中文翻译文章正好参考了第一篇），我将对比前后两篇解释的差异点，通过对比帮助你更加深入地理解CAP理论。</p>\n<h2 id=\"cap-\">CAP理论</h2>\n<p>第一版解释：</p>\n<blockquote>\n<p>Any distributed system cannot guaranty C, A, and P simultaneously.</p>\n</blockquote>\n<p>（<a href=\"http://robertgreiner.com/2014/06/cap-theorem-explained/\">http://robertgreiner.com/2014/06/cap-theorem-explained/</a>）</p>\n<p>简单翻译为：对于一个分布式计算系统，不可能同时满足一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三个设计约束。</p>\n<p>第二版解释：</p>\n<blockquote>\n<p>In a distributed system (a collection of interconnected nodes that share data.), you can only have two out of the following three guarantees across a write/read pair: Consistency, Availability, and Partition Tolerance - one of them must be sacrificed.</p>\n</blockquote>\n<p>（<a href=\"http://robertgreiner.com/2014/08/cap-theorem-revisited/\">http://robertgreiner.com/2014/08/cap-theorem-revisited/</a>）</p>\n<p>简单翻译为：在一个分布式系统（指互相连接并共享数据的节点的集合）中，当涉及读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲。</p>\n<p>对比两个版本的定义，有几个很关键的差异点：</p>\n<ul>\n<li><p>第二版定义了什么才是CAP理论探讨的分布式系统，强调了两点：interconnected和share data，为何要强调这两点呢？ 因为<strong>分布式系统并不一定会互联和共享数据</strong>。最简单的例如Memcache的集群，相互之间就没有连接和共享数据，因此Memcache集群这类分布式系统就不符合CAP理论探讨的对象；而MySQL集群就是互联和进行数据复制的，因此是CAP理论探讨的对象。</p>\n</li>\n<li><p>第二版强调了write/read pair，这点其实是和上一个差异点一脉相承的。也就是说，<strong>CAP关注的是对数据的读写操作，而不是分布式系统的所有功能</strong>。例如，ZooKeeper的选举机制就不是CAP探讨的对象。</p>\n</li>\n</ul>\n<p>相比来说，第二版的定义更加精确。</p>\n<p>虽然第二版的定义和解释更加严谨，但内容相比第一版来说更加难记一些，所以现在大部分技术人员谈论CAP理论时，更多还是按照第一版的定义和解释来说的，因为第一版虽然不严谨，但非常简单和容易记住。</p>\n<p>第二版除了基本概念，三个基本的设计约束也进行了重新阐述，我来详细分析一下。</p>\n<p>1.一致性（Consistency）</p>\n<p>第一版解释：</p>\n<blockquote>\n<p>All nodes see the same data at the same time.</p>\n</blockquote>\n<p>简单翻译为：所有节点在同一时刻都能看到相同的数据。</p>\n<p>第二版解释：</p>\n<blockquote>\n<p>A read is guaranteed to return the most recent write for a given client.</p>\n</blockquote>\n<p>简单翻译为：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果。</p>\n<p>第一版解释和第二版解释的主要差异点表现在：</p>\n<ul>\n<li>第一版从节点node的角度描述，第二版从客户端client的角度描述。</li>\n</ul>\n<p>相比来说，第二版更加符合我们观察和评估系统的方式，即站在客户端的角度来观察系统的行为和特征。</p>\n<ul>\n<li>第一版的关键词是see，第二版的关键词是read。</li>\n</ul>\n<p>第一版解释中的see，其实并不确切，因为节点node是拥有数据，而不是看到数据，即使要描述也是用have；第二版从客户端client的读写角度来描述一致性，定义更加精确。</p>\n<ul>\n<li>第一版强调同一时刻拥有相同数据（same time + same data），第二版并没有强调这点。</li>\n</ul>\n<p>这就意味着实际上对于节点来说，可能同一时刻拥有不同数据（same time + different data），这和我们通常理解的一致性是有差异的，为何做这样的改动呢？其实在第一版的详细解释中已经提到了，具体内容如下：</p>\n<blockquote>\n<p>A system has consistency if a transaction starts with the system in a consistent state, and ends with the system in a consistent state. In this model, a system can (and does) shift into an inconsistent state during a transaction, but the entire transaction gets rolled back if there is an error during any stage in the process.</p>\n</blockquote>\n<p>参考上述的解释，对于系统执行事务来说，<strong>在事务执行过程中，系统其实处于一个不一致的状态，不同的节点的数据并不完全一致</strong>，因此第一版的解释“All nodes see the same data at the same time”是不严谨的。而第二版强调client读操作能够获取最新的写结果就没有问题，因为事务在执行过程中，client是无法读取到未提交的数据的，只有等到事务提交后，client才能读取到事务写入的数据，而如果事务失败则会进行回滚，client也不会读取到事务中间写入的数据。</p>\n<p>2.可用性（Availability）</p>\n<p>第一版解释：</p>\n<blockquote>\n<p>Every request gets a response on success/failure.</p>\n</blockquote>\n<p>简单翻译为：每个请求都能得到成功或者失败的响应。</p>\n<p>第二版解释：</p>\n<blockquote>\n<p>A non-failing node will return a reasonable response within a reasonable amount of time (no error or timeout).</p>\n</blockquote>\n<p>简单翻译为：非故障的节点在合理的时间内返回合理的响应（不是错误和超时的响应）。</p>\n<p>第一版解释和第二版解释主要差异点表现在：</p>\n<ul>\n<li>第一版是every request，第二版强调了A non-failing node。</li>\n</ul>\n<p>第一版的every request是不严谨的，因为只有非故障节点才能满足可用性要求，如果节点本身就故障了，发给节点的请求不一定能得到一个响应。</p>\n<ul>\n<li>第一版的response分为success和failure，第二版用了两个reasonable：reasonable response 和reasonable time，而且特别强调了no error or timeout。</li>\n</ul>\n<p>第一版的success/failure的定义太泛了，几乎任何情况，无论是否符合CAP理论，我们都可以说请求成功和失败，因为超时也算失败、错误也算失败、异常也算失败、结果不正确也算失败；即使是成功的响应，也不一定是正确的。例如，本来应该返回100，但实际上返回了90，这就是成功的响应，但并没有得到正确的结果。相比之下，第二版的解释明确了不能超时、不能出错，结果是合理的，<strong>注意没有说“正确”的结果</strong>。例如，应该返回100但实际上返回了90，肯定是不正确的结果，但可以是一个合理的结果。</p>\n<p>3.分区容忍性（Partition Tolerance）</p>\n<p>第一版解释：</p>\n<blockquote>\n<p>System continues to work despite message loss or partial failure.</p>\n</blockquote>\n<p>简单翻译为：出现消息丢失或者分区错误时系统能够继续运行。</p>\n<p>第二版解释：</p>\n<blockquote>\n<p>The system will continue to function when network partitions occur.</p>\n</blockquote>\n<p>简单翻译为：当出现网络分区后，系统能够继续“履行职责”。</p>\n<p>第一版解释和第二版解释主要差异点表现在：</p>\n<ul>\n<li>第一版用的是work，第二版用的是function。</li>\n</ul>\n<p>work强调“运行”，只要系统不宕机，我们都可以说系统在work，返回错误也是work，拒绝服务也是work；而function强调“发挥作用”“履行职责”，这点和可用性是一脉相承的。也就是说，只有返回reasonable response才是function。相比之下，第二版解释更加明确。</p>\n<ul>\n<li>第一版描述分区用的是message loss or partial failure，第二版直接用network partitions。</li>\n</ul>\n<p>对比两版解释，第一版是直接说原因，即message loss造成了分区，但message loss的定义有点狭隘，因为通常我们说的message loss（丢包），只是网络故障中的一种；第二版直接说现象，即发生了<strong>分区现象</strong>，不管是什么原因，可能是丢包，也可能是连接中断，还可能是拥塞，只要导致了网络分区，就通通算在里面。</p>\n<h2 id=\"cap-\">CAP应用</h2>\n<p>虽然CAP理论定义是三个要素中只能取两个，但放到分布式环境下来思考，我们会发现必须选择P（分区容忍）要素，因为网络本身无法做到100%可靠，有可能出故障，所以分区是一个必然的现象。如果我们选择了CA而放弃了P，那么当发生分区现象时，为了保证C，系统需要禁止写入，当有写入请求时，系统返回error（例如，当前系统不允许写入），这又和A冲突了，因为A要求返回no error和no timeout。因此，分布式系统理论上不可能选择CA架构，只能选择CP或者AP架构。</p>\n<p>1.CP - Consistency/Partition Tolerance</p>\n<p>如下图所示，为了保证一致性，当发生分区现象后，N1节点上的数据已经更新到y，但由于N1和N2之间的复制通道中断，数据y无法同步到N2，N2节点上的数据还是x。这时客户端C访问N2时，N2需要返回Error，提示客户端C“系统现在发生了错误”，这种处理方式违背了可用性（Availability）的要求，因此CAP三者只能满足CP。</p>\n<p>﻿﻿<img src=\"https://static001.geekbang.org/resource/image/6e/d7/6e7d7bd54d7a4eb67918080863d354d7.png?wh=337*289\" alt=\"\"></p>\n<p>2.AP - Availability/Partition Tolerance</p>\n<p>如下图所示，为了保证可用性，当发生分区现象后，N1节点上的数据已经更新到y，但由于N1和N2之间的复制通道中断，数据y无法同步到N2，N2节点上的数据还是x。这时客户端C访问N2时，N2将当前自己拥有的数据x返回给客户端C了，而实际上当前最新的数据已经是y了，这就不满足一致性（Consistency）的要求了，因此CAP三者只能满足AP。注意：这里N2节点返回x，虽然不是一个“正确”的结果，但是一个“合理”的结果，因为x是旧的数据，并不是一个错乱的值，只是不是最新的数据而已。</p>\n<p>﻿﻿<img src=\"https://static001.geekbang.org/resource/image/2c/d6/2ccafe41de9bd7f8dec4658f004310d6.png?wh=334*287\" alt=\"\"></p>\n<h2 id=\"-\">小结</h2>\n<p>今天我为你讲了CAP理论，通过对比两个不同版本的CAP理论解释，详细地分析了CAP理论的准确定义，希望对你有所帮助。</p>\n<p>这就是今天的全部内容，留一道思考题给你吧，基于Paxos算法构建的分布式系统，属于CAP架构中的哪一种？谈谈你的分析和理解。</p>\n<p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）</p>\n<p></p>\n","neighbors":{"left":{"article_title":"21 | 高性能负载均衡：算法","id":9055},"right":{"article_title":"23 | 想成为架构师，你必须掌握的CAP细节","id":9390}},"comments":[{"had_liked":false,"id":12899,"user_name":"鹅米豆发","can_delete":false,"product_type":"c1","uid":1017687,"ip_address":"","ucode":"98E8D911EE32DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/57/645159ee.jpg","comment_is_top":false,"comment_ctime":1529118024,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"1002256497992","product_id":100006601,"comment_content":"       Paxos算法本身能提供的是，可靠的最终一致性保证。如有足够的隔离性措施，中间状态的无法被客户端读取，则可以达到强一致性，这种属于CP架构。其它情况，就是AP架构。<br>       CAP定理存在不少坑点，理解起来很是令人费解。<br>       1、适用场景。分布式系统有很多类型，有异构的，比如节点之间是上下游依赖的关系，有同构的，比如分区&#47;分片型的、副本型的（主从、多主）。CAP定理的适用场景是副本型的这种。<br>       2、一致性的概念，从强到弱，线性一致性、顺序一致性、因果一致性、单调一致性、最终一致性，CAP中的一致性应该是指顺序一致性。<br>       3、CAP中的一致性，与ACID中的一致性的区别。事务中的一致性，是指满足完整性约束条件，CAP中的一致性，是指读写一致性。<br>       4、CAP中的可用性，与我们常说的高可用的区别。比如HBase、MongoDB属于CP架构，Cassandra、CounchDB属于AP系统，能说后者比前者更高可用么？应该不是。CAP中的可用性，是指在某一次读操作中，即便发现不一致，也要返回响应，即在合理时间内返回合理响应。我们常说的高可用，是指部分实例挂了，能自动摘除，并由其它实例继续提供服务，关键是冗余。<br>       5、哪些情况属于网络分区。网络故障造成的分区，属于。节点应用出现问题导致超时，属于。节点宕机或硬件故障，不属于。","like_count":234,"discussions":[{"author":{"id":1255820,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/8c/3a810521.jpg","nickname":"CaptainBerg","note":"","ucode":"4033CF49863F7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268728,"discussion_content":"CAP中的C，是线性一致性，可以看看《DDIA》","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589814889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1017687,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/57/645159ee.jpg","nickname":"鹅米豆发","note":"","ucode":"98E8D911EE32DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1255820,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/8c/3a810521.jpg","nickname":"CaptainBerg","note":"","ucode":"4033CF49863F7E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282796,"discussion_content":"是的。我的意思，cap论文的本意，是指线性一致。但工程实践中，这块有取舍，起点一般是顺序一致，比如zk的写是线性一致，但读就是顺序一致。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592095209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":268728,"ip_address":""},"score":282796,"extra":""}]},{"author":{"id":1958681,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e3/19/7eba0a69.jpg","nickname":"邱荣财","note":"","ucode":"414D74823F8AA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327629,"discussion_content":"为啥宕机不算网络分区故障","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605876862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204384,"discussion_content":"请问啥是线性一致性，顺序一致性，因果一致性，单调一致性，最终一致性，能来个例子说明一下就更感谢了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584168032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1017687,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/57/645159ee.jpg","nickname":"鹅米豆发","note":"","ucode":"98E8D911EE32DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282801,"discussion_content":"线性一致性就是有一个全局的时间轴，每一个操作都对应到时间轴上的一个时间点，所有客户端看到的都是这个时间轴上的顺序。\n顺序一致性，没有全局的时间轴，而是每个变量对应一个时间轴，所有客户端看同一个变量在时间轴上的顺序一致。\n以上两种都是强一致性。\n因果一致性，是有因果关系的操作对应一个时间轴。比如，对不同变量的读写之间、对同一变量的读之间，都是没有因果关系的。但是对于同一个变量的写、与此后对这个变量的读，是有因果关系的。\n最终一致性，那就多了。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1592096482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204384,"ip_address":""},"score":282801,"extra":""},{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1017687,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/57/645159ee.jpg","nickname":"鹅米豆发","note":"","ucode":"98E8D911EE32DE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283100,"discussion_content":"多谢解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592183097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":282801,"ip_address":""},"score":283100,"extra":""},{"author":{"id":1383377,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1b/d1/2228e57f.jpg","nickname":"秋夫人","note":"","ucode":"D73BB70FCAFC83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1017687,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/57/645159ee.jpg","nickname":"鹅米豆发","note":"","ucode":"98E8D911EE32DE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410889,"discussion_content":"请问这个知识点在哪本书上能看到呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635809637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":282801,"ip_address":""},"score":410889,"extra":""}]}]},{"had_liked":false,"id":13267,"user_name":"鹅米豆发","can_delete":false,"product_type":"c1","uid":1017687,"ip_address":"","ucode":"98E8D911EE32DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/57/645159ee.jpg","comment_is_top":false,"comment_ctime":1529487868,"is_pvip":false,"replies":[{"id":"4478","content":"感谢，根据Raft的论文描述，工程上目前还没有完全实现paxos算法的系统","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529550588,"ip_address":"","comment_id":13267,"utype":1}],"discussion_count":2,"race_medal":0,"score":"280702362108","product_id":100006601,"comment_content":"前面对于一致性的描述有些问题。修正一下。<br>1、Paxos算法本身是满足线性一致性的。线性一致性，也是实际系统能够达到的最强一致性。<br>2、Paxos及其各种变体，在实际工程领域的实现，大多是做了一定程度的取舍，并不完全是线性一致性的。<br>3、比如，Zookeeper和Etcd，都是对于写操作（比如选举），满足线性一致性，对于读操作未必满足线性一致性。即可以选择线性一致性读取，也可以选择非线性一致性读取。这里的非线性一致性，就是顺序一致性。<br>4、cap中的一致性，是指线性一致性，而不是顺序一致性。","like_count":66,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419593,"discussion_content":"感谢，根据Raft的论文描述，工程上目前还没有完全实现paxos算法的系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529550588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052521,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/51/a9/741b5ad9.jpg","nickname":"FD","note":"","ucode":"ED396BD322489E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359834,"discussion_content":"zookeeper是使用的原子广播，即zab。etcd使用的是raft","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616298101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21136,"user_name":"luop","can_delete":false,"product_type":"c1","uid":1118080,"ip_address":"","ucode":"474F53CA1D8718","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/80/7c3f35e4.jpg","comment_is_top":false,"comment_ctime":1534935093,"is_pvip":false,"replies":[{"id":"7531","content":"两个都挂整个集群肯定挂了，CAP关注的是分区时的可用性和一致性，不是说保证整个集群不挂，其实你最后的理解就是非常正确的👍👍","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1535007551,"ip_address":"","comment_id":21136,"utype":1}],"discussion_count":1,"race_medal":0,"score":"143268855861","product_id":100006601,"comment_content":"第二版解释从 non-failing node 的角度去看待「可用性」，个人存疑。<br><br>如果一个集群有 2 个 node，某个时刻 2 个 node 都 fail 了，那么此时该集群的「可用性」该如何定义？<br><br>个人觉得：「一致性」和「可用性」都应该站在 client 侧去审视；而「分区容忍性」则是集群 node 侧在遇到网络分区的问题时，选择如何去影响 client 侧感知到的「一致性」和「可用性」。","like_count":33,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422551,"discussion_content":"两个都挂整个集群肯定挂了，CAP关注的是分区时的可用性和一致性，不是说保证整个集群不挂，其实你最后的理解就是非常正确的👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535007551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15107,"user_name":"轩辕十四","can_delete":false,"product_type":"c1","uid":1120272,"ip_address":"","ucode":"693B77D884950F","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/10/731b4319.jpg","comment_is_top":false,"comment_ctime":1530865492,"is_pvip":false,"replies":[{"id":"5209","content":"P要求分布式和数据同步，C要求数据完全一致，A要求返回及时","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1531123266,"ip_address":"","comment_id":15107,"utype":1}],"discussion_count":1,"race_medal":0,"score":"104610080596","product_id":100006601,"comment_content":"网络分区类似于脑裂。<br><br>个人对CAP的类比，不知是否合适:<br>P要求数据有冗余，<br>C要求数据同步，会花时间，<br>A要求返回及时，不需要等。<br>不可能三角形说的是:<br>要备份要同步，就得等;<br>要备份不想等，就会不同步;<br>要同步还不想等，就别备份","like_count":23,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420241,"discussion_content":"P要求分布式和数据同步，C要求数据完全一致，A要求返回及时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531123266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12892,"user_name":"Yole","can_delete":false,"product_type":"c1","uid":1062895,"ip_address":"","ucode":"EE9E3A490C3A90","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/ef/4bb6f583.jpg","comment_is_top":false,"comment_ctime":1529115489,"is_pvip":false,"replies":[{"id":"4355","content":"你可以自己尝试去分析一下，有疑问评论即可","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529378089,"ip_address":"","comment_id":12892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96018396001","product_id":100006601,"comment_content":"应该再补充哪些系统上ca，哪些是cp，哪些是ap，他们为什么这么设计，都有什么好处。","like_count":22,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419447,"discussion_content":"你可以自己尝试去分析一下，有疑问评论即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529378089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16820,"user_name":"tim","can_delete":false,"product_type":"c1","uid":1101698,"ip_address":"","ucode":"181FF04B823DBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/82/a3ea8076.jpg","comment_is_top":false,"comment_ctime":1532233949,"is_pvip":false,"replies":[{"id":"5834","content":"CAP理论是忽略延时的，这就是说理论做了一个假设，只要网络通数据就会一致，这也是实际应用CAP时容易踩的坑，后面一章会讲","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1532254857,"ip_address":"","comment_id":16820,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74546677981","product_id":100006601,"comment_content":"请问一下作者，在CP的选型中。 假如是查询一条并不存在的数据，文中还说得通。<br>但如果出现更新数据不及时，由于n1和n2 出现分区错误，那么n2如何知道自己不是最新的数据并返回error呢？？ <br>假如就是简单的mysql主从， 从库并没有断连主库，只是数据在请求来是还没有更新到最新。 那么从库又从哪里得知这件事儿的呢？？","like_count":17,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420939,"discussion_content":"CAP理论是忽略延时的，这就是说理论做了一个假设，只要网络通数据就会一致，这也是实际应用CAP时容易踩的坑，后面一章会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532254857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131830,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1567926439,"is_pvip":false,"replies":[{"id":"50400","content":"分析的很好","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1567957818,"ip_address":"","comment_id":131830,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53107533991","product_id":100006601,"comment_content":"        paxos的核心思想是少数服从多数，在节点数为2n+1的集群中，只要n+1节点上完成了写入就能保证接下来的读操作能够读到最新的值。从这一点来说它满足C（对某个指定的客户端来说，读操作保证能够返回最新的写操作结果);一个实现了paxos协议的集群最多可以容忍n个节点故障（n个节点同时故障的概率是比较小的），非故障节点组成的集群仍能正常提供服务，从这个角度来讲它满足A(非故障的节点在合理的时间内返回合理的响应，不是错误和超时的响应)；paxos集群发生分区肯能存在两种情况，第一种情况是发生分区后没有发生重新选举，这种情况下集群仍能正常工作，因此满足P(当出现网络分区后，系统能够继续“履行职责”)。另一种情况是发生分区后原来的集群达不到多数派，集群不在对外提供服务，因此不满足P，当发生这种情况的时候，一般会快速修复。总的来说在某种意义上来看paxos满足CAP。","like_count":13,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466637,"discussion_content":"分析的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567957818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50228,"user_name":"aduan","can_delete":false,"product_type":"c1","uid":1104033,"ip_address":"","ucode":"DA54005B9849C5","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/a1/cd868183.jpg","comment_is_top":false,"comment_ctime":1544928527,"is_pvip":false,"replies":[{"id":"18069","content":"一般都是心跳检测","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1544949001,"ip_address":"","comment_id":50228,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53084536079","product_id":100006601,"comment_content":"老师，你好，有个疑问，在cp架构中n1，n2通讯是中断的，n2根据设什么作为依据返回error？","like_count":13,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432920,"discussion_content":"一般都是心跳检测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544949001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2714690,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eraAVyc7m5ib2JLyalNmqrPtZoCThiaNLWhKickXddz9picDpycdGyyXaaXqiabF6E2sdVaticZia6w6Ht8g/132","nickname":"Geek_1cba13","note":"","ucode":"B9BBBEE19A31A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547516,"discussion_content":"这个问题问的好啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642731734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66787,"user_name":"Gaozy","can_delete":false,"product_type":"c1","uid":1101385,"ip_address":"","ucode":"BF66630243B409","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/49/33b88f62.jpg","comment_is_top":false,"comment_ctime":1550020834,"is_pvip":false,"replies":[{"id":"24316","content":"人工数据订正和补偿，定时脚本批量检查和修复等都可以","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1550548345,"ip_address":"","comment_id":66787,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31614791906","product_id":100006601,"comment_content":"有个疑问，很多工程实现都是选择AP并保证最终一致性，但是选择了A不就意味着返回数据不是最新的吗，最终一致性是如何实现的","like_count":7,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438911,"discussion_content":"人工数据订正和补偿，定时脚本批量检查和修复等都可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550548345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1137880,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5c/d8/dfe1d4dc.jpg","nickname":"学斌","note":"","ucode":"ED3432D8EDC327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374746,"discussion_content":"最终一致，我觉得可以简单理解为，相对强一致，最终一致是在未能在期望时间内达到一致，但是能在容忍时间内达到一致。就是有个时间差。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621333499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34857,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1540341858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31605112930","product_id":100006601,"comment_content":"做个总结<br>c是一致性，写了的数据就该能读到，读请求应该返回最新数据<br>a是可用性，有请求就要有反应，非故障接点要给出合理的应答，不过合理不一定是正确的，正确是c的事情<br>p是分区容忍，即便分区，系统也要能干活","like_count":7},{"had_liked":false,"id":13152,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1529410591,"is_pvip":false,"replies":[{"id":"4488","content":"zk多数节点正常就可以正常运行，分区中的少数节点会进入leader选举状态，这个状态不能处理读写操作，因此不符合A，如果不考虑实时一致性，zk基本满足CP的要求","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529551849,"ip_address":"","comment_id":13152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31594181663","product_id":100006601,"comment_content":"ZK出现分区，不能再履行职责了吧，因此ZK不满足P。老师这样理解对吗","like_count":7,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419556,"discussion_content":"zk多数节点正常就可以正常运行，分区中的少数节点会进入leader选举状态，这个状态不能处理读写操作，因此不符合A，如果不考虑实时一致性，zk基本满足CP的要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529551849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157414,"user_name":"赵强强","can_delete":false,"product_type":"c1","uid":1073596,"ip_address":"","ucode":"1B8AE07484C69A","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/bc/88a905a5.jpg","comment_is_top":false,"comment_ctime":1575148716,"is_pvip":false,"replies":[{"id":"63224","content":"不是必然选择P，而是说分布式系统必然会出现分区的情况，你要选择的是要不要“容忍”，无法容忍分区，那就在出现分区的时候系统不对外提供服务","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1577328770,"ip_address":"","comment_id":157414,"utype":1}],"discussion_count":4,"race_medal":0,"score":"27344952492","product_id":100006601,"comment_content":"CAP讨论的是分布式系统，文中又说分布式系统必然选择P，感觉有矛盾，有点像鸡和蛋的问题。分区是分布式系统的一种异常现象，分区容忍应该是当发生分区问题时系统对外的功能特性，P到底是区别于C和A的一种特性，还是需要C和A配合才能完成，不是很理解，还请老师帮忙解答。","like_count":6,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476421,"discussion_content":"不是必然选择P，而是说分布式系统必然会出现分区的情况，你要选择的是要不要“容忍”，无法容忍分区，那就在出现分区的时候系统不对外提供服务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577328770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1315215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/8f/0d7ee6c7.jpg","nickname":"Kee","note":"","ucode":"446F15F42DEA3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":541079,"discussion_content":"‘分布式系统必然分区’ 可能不是很严谨，因为CAP是针对数据的，假设此分布式系统只是对应用层做了分布式，而DB层用单库的话，是不是就不会产生分区了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640250087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":476421,"ip_address":""},"score":541079,"extra":""},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1315215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/8f/0d7ee6c7.jpg","nickname":"Kee","note":"","ucode":"446F15F42DEA3B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564276,"discussion_content":"从上面的文章来看，个人认为：\n应该不属于cap讨论的分布式系统，因为这里数据只有一份，也就不存在数据一致性的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650204897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":541079,"ip_address":""},"score":564276,"extra":""}]},{"author":{"id":1106566,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e2/86/90041355.jpg","nickname":"一塌糊涂","note":"","ucode":"B55DAEFB98D83C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371201,"discussion_content":"这意思是 如果 不满足p那么分区的时候一定不满足a是吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619683237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64295,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1548736331,"is_pvip":false,"replies":[{"id":"22791","content":"分区就是集群中一部分节点和另外一部分无法通信","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1548756913,"ip_address":"","comment_id":64295,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27318540107","product_id":100006601,"comment_content":"你好老师 ，这里讲的分区容错是指什么 ，是指发生分区现象时系统正常运行 。 但是分区现象具体指的是什么 可以详细讲一下么","like_count":7,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437947,"discussion_content":"分区就是集群中一部分节点和另外一部分无法通信","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548756913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12960,"user_name":"卡莫拉内西","can_delete":false,"product_type":"c1","uid":1117409,"ip_address":"","ucode":"CA9E2DE91DA117","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/e1/e0ba4e87.jpg","comment_is_top":false,"comment_ctime":1529207517,"is_pvip":false,"replies":[{"id":"4347","content":"zk官方资料说zab不是paxos，而且zk的读操作没有满足CAP的C要求","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529377107,"ip_address":"","comment_id":12960,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23004043997","product_id":100006601,"comment_content":"paxos， zk的zab协议的理论基础，保证的是最终一致性，满足的是cp<br>","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419480,"discussion_content":"zk官方资料说zab不是paxos，而且zk的读操作没有满足CAP的C要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529377107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12920,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1529135926,"is_pvip":false,"replies":[{"id":"4353","content":"如果严格按照CAP理论来说，C约束并没有限定“指定”的client.<br>","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529377933,"ip_address":"","comment_id":12920,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23003972406","product_id":100006601,"comment_content":"老师你好，有个问题想请教：<br><br>最近正在研究 zookeeper，通读完本篇课程，心中存疑，还望解答。<br><br>zookeeper 并不保证所有的 client 都能读到最新的数据，相较于线性一致性而言，zookeeper 采用的是顺序一致性（我理解一致性程度更弱）。<br><br>那么对于这种情况，zookeeper 与最终一致性方案相比，结合本篇文章的解释，其本质上依然不能保证所有的  client 读到最新的数据，那是否可以理解为 zookeeper 就是 AP 系统？<br><br>抑或，根据本篇的解释，zookeeper 采用顺序一致性，能保证『指定』（而非所有）的 client 读到最新的数据，即可以称之为 CP 系统；而 AP 系统甚至可能不能保证任意一个 client 能读到最新数据。因此 zookeeper 属于 CP 系统的范畴？<br><br>请问老师，两个思路，哪个正确？","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419458,"discussion_content":"如果严格按照CAP理论来说，C约束并没有限定“指定”的client.\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529377933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1702997,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fc/55/e03bb6db.jpg","nickname":"i-neojos","note":"","ucode":"1808C25269948A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577274,"discussion_content":"如果不发生P的话，我们从ZK仍然有可能读取到了不一致的数据，这个数据显然是A的。但这个数据一定和其他节点C吗，我们也不知道，但我们知道ZK同步数据的时候会保证多数节点都同步了，标准的AC","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655998575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239084,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1596430757,"is_pvip":false,"replies":[{"id":"88379","content":"点赞，很好的分享","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1596498248,"ip_address":"","comment_id":239084,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18776299941","product_id":100006601,"comment_content":"就拿分布式注册中心zookeeper和eruka来举例吧。当zk集群出现故障时，为了满足节点数据一致性，节点是不可被访问的，那么满足的是CP理论。而eruka每个节点都带全部数据，当节点出现故障，不能保障数据的一致性，但是可用的。满足了AP理论。","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502972,"discussion_content":"点赞，很好的分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596498248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361597,"discussion_content":"没理解，服务不可访问，等同于不可用吗？如果等同，都不可用了谈何分区容忍性呢？容忍了什么呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616712926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12919,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1529135826,"is_pvip":false,"replies":[{"id":"4354","content":"如果严格按照CAP理论来说，C约束并没有约束“指定”的client","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529377990,"ip_address":"","comment_id":12919,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18709005010","product_id":100006601,"comment_content":"老师你好，有个问题想请教：<br><br>最近正在研究 zookeeper，通读完本篇课程，心中存疑，还望解答。<br><br>zookeeper 并不保证所有的 client 都能读到最新的数据，相较于线性一致性而言，zookeeper 采用的是顺序一致性（我理解一致性程度更弱）。<br><br>那么对于这种情况，zookeeper 与最终一致性方案相比，结合本篇文章的解释，其本质上依然不能保证所有的  client 读到最新的数据，那是否可以理解为 zookeeper 就是 AP 系统？<br><br>抑或，根据本篇的解释，zookeeper 采用顺序一致性，能保证『指定』（而非所有）的 client 读到最新的数据，即可以称之为 CP 系统；而 AP 系统甚至可能不能保证任意一个 client 能读到最新数据。因此 zookeeper 属于 CP 系统的范畴？<br><br>请问老师，两个思路，哪个正确？","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419457,"discussion_content":"如果严格按照CAP理论来说，C约束并没有约束“指定”的client","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529377990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109323,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/4b/0ddfa9ad.jpg","nickname":"小刚z","note":"","ucode":"7453F096F6631C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2041,"discussion_content":"如果按照第二版解释C约束是client read一致性不做其他兼容性改造(比如读取数据的时候 读取新写的数据节点)，zookpper是属于AP范畴吧，是不是跟mysql的主从复制都是属于AP理论,保证合理的时间返回合理的结果。而且满足CAP理论只是设计系统的时候参考吧，比如单纯靠zookpper和mysql本身很难满足CP或者AP设计的吧,比如Mysql本身不能处理P问题吧需要借助其他监控系统的支持,我这样理解对不对?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563195893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12895,"user_name":"星火燎原","can_delete":false,"product_type":"c1","uid":1101373,"ip_address":"","ucode":"15AD8E3006E107","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/3d/385b8263.jpg","comment_is_top":false,"comment_ctime":1529116168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18708985352","product_id":100006601,"comment_content":"paxos算法目的是在分布式环境下对主节点一致性的选举，所以属于pc","like_count":4},{"had_liked":false,"id":23696,"user_name":"laurencezl","can_delete":false,"product_type":"c1","uid":1049020,"ip_address":"","ucode":"F531F68705B94D","user_header":"","comment_is_top":false,"comment_ctime":1536591260,"is_pvip":false,"replies":[{"id":"8614","content":"P是说是否允许网络分区，允许的话可以继续提供服务，不允许的话，一旦出现分区，系统所有节点停止服务","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1536628506,"ip_address":"","comment_id":23696,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14421493148","product_id":100006601,"comment_content":"先谢过老师分享！<br>关于p我还是有点疑问❓p要的是当网络脑裂分区时依然提供合理的response，他跟a要的合理有啥区别？<br>cp架构中，当网络发生故障导致分区两边数据不一致时，为了保证c而牺牲a，这个时候，系统不已经牺牲高可用而返回了错误吗，那不是已经违背了p下的合理响应吗？","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423683,"discussion_content":"P是说是否允许网络分区，允许的话可以继续提供服务，不允许的话，一旦出现分区，系统所有节点停止服务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536628506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361599,"discussion_content":"那这句话是指的分区容忍性，就是分区不容忍？这就叫分区容忍性，有点懵逼了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616713094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17639,"user_name":"孙振超","can_delete":false,"product_type":"c1","uid":1101755,"ip_address":"","ucode":"0F9EABC6125350","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/bb/22af0e52.jpg","comment_is_top":false,"comment_ctime":1532829056,"is_pvip":false,"replies":[{"id":"6139","content":"因为他的解读到位，他的解读契合CAP的精髓","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1532917352,"ip_address":"","comment_id":17639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14417730944","product_id":100006601,"comment_content":"知识获取来源分为几个层次：论文是第一手，书籍是第二层次，博客资料就是第三层的了，之前学习cap都是在网上找的博客，虽然也找了多篇博客相互佐证进行融合。但今天看了这篇文章才发现对cap的理解还是有些肤浅，真的是无声处惊雷，平凡处见真章，这种求学态度会贯穿在生活工作中的方方面面的，受教了。<br><br>paxos协议是为了解决数据一致性而设计的算法，主要是通过投票选举的方式决定出主节点，之后就以主节点的数据为准，因而属于pc模式。<br><br>另外，作者提到是以 Robert Greiner的文章进行cap的解读，网上介绍cap的文章很多，选择他的原因能否透漏一下？","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421208,"discussion_content":"因为他的解读到位，他的解读契合CAP的精髓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532917352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286114,"user_name":"shenlinxiang","can_delete":false,"product_type":"c1","uid":1158701,"ip_address":"","ucode":"F20FAC7EB1829E","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/2d/26d7ed68.jpg","comment_is_top":false,"comment_ctime":1617159064,"is_pvip":false,"replies":[{"id":"103882","content":"看2次印象更深刻，理解更深 ：）","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1617182186,"ip_address":"","comment_id":286114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10207093656","product_id":100006601,"comment_content":"重读18年买的极客时间，对比其它地方讲解的内容，简直佩服膜拜了","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517872,"discussion_content":"看2次印象更深刻，理解更深 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617182186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284163,"user_name":"半夏","can_delete":false,"product_type":"c1","uid":1216710,"ip_address":"","ucode":"50A2C4CF8F85EA","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/c6/0ba1789a.jpg","comment_is_top":false,"comment_ctime":1616088245,"is_pvip":false,"replies":[{"id":"103087","content":"N2做状态检测，检测到与N1断联后，拒绝服务","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1616114482,"ip_address":"","comment_id":284163,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10206022837","product_id":100006601,"comment_content":"CAP 应用<br>1.CP<br>有个疑惑，N1节点因为网络分区问题，没有把数据复制给N2<br>客户端访问N2，N2 需要返回 Error<br>这块要怎么实现返回Error？","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517260,"discussion_content":"N2做状态检测，检测到与N1断联后，拒绝服务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616114482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028944,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/90/2caa07d0.jpg","nickname":"Geek8815","note":"","ucode":"D5102AFFA20E7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543118,"discussion_content":"客户端此时访问N1，需要返回ERROR吗？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640952755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258318,"user_name":"强","can_delete":false,"product_type":"c1","uid":1035643,"ip_address":"","ucode":"D0A761E25B0740","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/7b/31a6bf42.jpg","comment_is_top":false,"comment_ctime":1604384368,"is_pvip":false,"replies":[{"id":"94152","content":"你说的是Redis集群吧，初看一下应该是AP，因为需要多数投票才能下线节点，投票过程中是可以对外服务的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1604545392,"ip_address":"","comment_id":258318,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10194318960","product_id":100006601,"comment_content":"面试时曾被问到过，Redis是基于CAP中的哪个？至今还没明白到底是CP还是AP","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508617,"discussion_content":"你说的是Redis集群吧，初看一下应该是AP，因为需要多数投票才能下线节点，投票过程中是可以对外服务的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604545392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255201,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1603279563,"is_pvip":false,"replies":[{"id":"93167","content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1603422338,"ip_address":"","comment_id":255201,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10193214155","product_id":100006601,"comment_content":"是不是在大多数场景下选择AP架构，而一致性是通过最终一致性来妥协实现的？","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507645,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603422338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95131,"user_name":"金蝉子","can_delete":false,"product_type":"c1","uid":1180714,"ip_address":"","ucode":"F4FC2E67125F83","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/2a/462d01db.jpg","comment_is_top":false,"comment_ctime":1557972349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10147906941","product_id":100006601,"comment_content":"CAP理论的应用范围必须满足以下两点：<br>1，互联和共享数据的系统<br>2，系统对外的读写功能<br><br>CAP只能满足三者中的两个，P必须满足，注重一致性则必须是CP（如zookeeper），注重可用性则必须是AP（如eureka）","like_count":2},{"had_liked":false,"id":18921,"user_name":"blacknccccc","can_delete":false,"product_type":"c1","uid":1170877,"ip_address":"","ucode":"CC2310B04A624A","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/bd/9b93ea26.jpg","comment_is_top":false,"comment_ctime":1533607294,"is_pvip":false,"replies":[{"id":"6632","content":"ca就不满足p了，简单来说满足ca就不允许分区。<br>zk的leader和master是共享数据的哦，你看看cap理论解读第二版，节点互联和节点复制数据，zk都满足","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1533696398,"ip_address":"","comment_id":18921,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10123541886","product_id":100006601,"comment_content":"cap定理中的p既然是必然要满足的一个而且很容易满足，c和a选择一个就可以满足p了，那为啥不直接说是ca定理呢，另外zk没有数据共享，套用这个定理不太合适呢","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421678,"discussion_content":"ca就不满足p了，简单来说满足ca就不允许分区。\nzk的leader和master是共享数据的哦，你看看cap理论解读第二版，节点互联和节点复制数据，zk都满足","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533696398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16765,"user_name":"tim","can_delete":false,"product_type":"c1","uid":1101698,"ip_address":"","ucode":"181FF04B823DBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/82/a3ea8076.jpg","comment_is_top":false,"comment_ctime":1532167347,"is_pvip":false,"replies":[{"id":"5843","content":"P是最容易保证的，中文叫“分区容忍”，意思就是你搭建一个分布式集群，然后断开网络，就是P了","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1532255602,"ip_address":"","comment_id":16765,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10122101939","product_id":100006601,"comment_content":"有个问题，既然无法保证p，那么我们选择它又有什么用呢。<br>况且有些p是无法通过服务器来处理的，比如连接到服务器时，网络超时，服务器未接到任何信息。总不能指望浏览器来重试保证吧。<br><br>对于p的理解，我觉得还是难以理解。有没有更加深入的文章","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420921,"discussion_content":"P是最容易保证的，中文叫“分区容忍”，意思就是你搭建一个分布式集群，然后断开网络，就是P了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532255602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14018,"user_name":"刚子","can_delete":false,"product_type":"c1","uid":1017080,"ip_address":"","ucode":"7B55EC80A7A4A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/f8/c22d32b4.jpg","comment_is_top":false,"comment_ctime":1530145031,"is_pvip":false,"replies":[{"id":"4686","content":"mc集群的节点就不互联，负载均衡的集群节点也不互联","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1530178404,"ip_address":"","comment_id":14018,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10120079623","product_id":100006601,"comment_content":"你好，大神，原文中&#39;&#39;第二版定义了什么才是 CAP 理论探讨的分布式系统，强调了两点：interconnected 和 share data，为何要强调这两点呢？分布式系统并不一定会互联和共享数据&#39;&#39;<br><br>其中&#39;&#39;分布式系统并不一定会互联和共享数据&#39;&#39;结合上下文理解起来是一定的意思","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419841,"discussion_content":"mc集群的节点就不互联，负载均衡的集群节点也不互联","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530178404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13035,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1529319678,"is_pvip":false,"replies":[{"id":"4339","content":"paxos是复制状态机的实现算法，“状态”就是共享数据。<br><br>对于开源方案，你可以自己尝试去分析一下，目前大部分集群方案都是ap方案","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529376583,"ip_address":"","comment_id":13035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10119254270","product_id":100006601,"comment_content":"关于提到的问题，我首先需要考虑的是，Paxos构建的集群是不是互联和有数据共享的，从而确定它是不是CAP所讨论的?<br>关于本文，我也建议把主流的集群环境，如spark,集群，kafka集群按照CAP理论，是满足了哪两个要素，和为什么这么取舍做下分析。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419510,"discussion_content":"paxos是复制状态机的实现算法，“状态”就是共享数据。\n\n对于开源方案，你可以自己尝试去分析一下，目前大部分集群方案都是ap方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529376583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12950,"user_name":"林","can_delete":false,"product_type":"c1","uid":1022243,"ip_address":"","ucode":"273F83CB3F9DF8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/23/3c3272bd.jpg","comment_is_top":false,"comment_ctime":1529200541,"is_pvip":false,"replies":[{"id":"4492","content":"是的，zk不是严格意义上的实时满足C，但也可以算CP系统","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529552193,"ip_address":"","comment_id":12950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10119135133","product_id":100006601,"comment_content":"ZK应该是CP，因为如果节点挂了则节点会自动down下线，而不会把错误或超时的信息给到客户端。且ZK必须保证3台及以上的节点才会提供服务，本质是不是保证C而不是A?","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419473,"discussion_content":"是的，zk不是严格意义上的实时满足C，但也可以算CP系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529552193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328955,"user_name":"Geek8815","can_delete":false,"product_type":"c1","uid":2028944,"ip_address":"","ucode":"D5102AFFA20E7E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/90/2caa07d0.jpg","comment_is_top":false,"comment_ctime":1640952523,"is_pvip":false,"replies":[{"id":"119850","content":"CP架构是指发生分区后，其中一个分区的节点不能对外提供服务，不是说所有的节点都不能对外提供服务；例如zookeeper发生分区后，处于多数派的分区里面的节点是可以继续提供服务，处于少数派分区的节点就不能提供服务，如果分成了3个区，每个分区都到不到超过半数的话，那整个zk就不能用了","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1641000677,"ip_address":"","comment_id":328955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5935919819","product_id":100006601,"comment_content":"辛苦老师解答：<br>1.P表示 当出现网络分区后，系统能够继续“履行职责”，这点和可用性是一脉相承的。也就是说，只有返回 reasonable response 才是 function。<br>当采用CP架构，当发生P时，为了保证C，A肯定就不支持了，也就无法返回easonable response，因此它就不是function，那从什么角度任务它是已经履行职责呢了（很明显CP，P和A并不一脉相承？？？），<br>2. CP架构肯定不满足A，那怎么理解这个一脉相承呢？","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543184,"discussion_content":"CP架构是指发生分区后，其中一个分区的节点不能对外提供服务，不是说所有的节点都不能对外提供服务；例如zookeeper发生分区后，处于多数派的分区里面的节点是可以继续提供服务，处于少数派分区的节点就不能提供服务，如果分成了3个区，每个分区都到不到超过半数的话，那整个zk就不能用了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641000677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184943,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1583456624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878423920","product_id":100006601,"comment_content":"cap强调的：一方面是interconnected和share dat，部分分布式系统是不互联的，比如memcache；另外一方面是read&#47;write对，比如zookeeper在选举状态是就只能读。<br>C（对某个指定的客户端来说，读操作保证能够返回最新的写操作结果，一致性)<br>A(非故障的节点在合理的时间内返回合理的响应，不是错误和超时的响应，可用性)<br>P(当出现网络分区后，系统能够继续“履行职责”，分区容错性)，<br>其中ca是从客户端角度来分析的，而p则是从服务器角度来分析的。<br>一致性(C)可以细分出很多种类，强一致性，弱一致性以及最终一致性等，所以要确保一致性代价相对而言比较高。<br>常见的中间件系统，mongodb就是满足cp的，mongodb如果是单点的话，那么就是强一致的关系，如果是副本集的话，那么则是最终一致的关系，因为可以从secondary中读取数据。<br><br><br>","like_count":1},{"had_liked":false,"id":129709,"user_name":"励研冰","can_delete":false,"product_type":"c1","uid":1106394,"ip_address":"","ucode":"FCBC8266018FA0","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/da/d7f591a7.jpg","comment_is_top":false,"comment_ctime":1567225164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862192460","product_id":100006601,"comment_content":"之前如面试面试官问我为什么CAP理论不能三个同时满足？","like_count":1},{"had_liked":false,"id":36259,"user_name":"佳","can_delete":false,"product_type":"c1","uid":1263049,"ip_address":"","ucode":"F25D82CC74A76D","user_header":"https://static001.geekbang.org/account/avatar/00/13/45/c9/a4f7054f.jpg","comment_is_top":false,"comment_ctime":1541002643,"is_pvip":false,"replies":[{"id":"12907","content":"区块链不要求所有人同一时刻看到的数据一致，而且某个节点挂掉后其它节点还是可以修改数据，因此是AP系统","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1541054735,"ip_address":"","comment_id":36259,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5835969939","product_id":100006601,"comment_content":"区块链属于cp,因为区块链对要求数据一致性很高，就是所有人看到的数据都要一致","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427801,"discussion_content":"区块链不要求所有人同一时刻看到的数据一致，而且某个节点挂掉后其它节点还是可以修改数据，因此是AP系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541054735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16819,"user_name":"sensitivemix","can_delete":false,"product_type":"c1","uid":1058510,"ip_address":"","ucode":"F1E374DD4BE177","user_header":"https://static001.geekbang.org/account/avatar/00/10/26/ce/db5405e7.jpg","comment_is_top":false,"comment_ctime":1532233696,"is_pvip":false,"replies":[{"id":"5835","content":"各种技术大会有很多案例分享呢，可以按照专栏的思想去具体分析一个试试","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1532254916,"ip_address":"","comment_id":16819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5827200992","product_id":100006601,"comment_content":"求华仔介绍分布式的开源案例，让我们可以在实践中学习～","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420938,"discussion_content":"各种技术大会有很多案例分享呢，可以按照专栏的思想去具体分析一个试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532254916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12987,"user_name":"加多","can_delete":false,"product_type":"c1","uid":1101824,"ip_address":"","ucode":"B2192A2D58C444","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/00/9d05af66.jpg","comment_is_top":false,"comment_ctime":1529245594,"is_pvip":false,"replies":[{"id":"4346","content":"2PC, 3PC都是标准协议，我讲和网上的资料也是一样的😄<br>我想特别讲的一般是要么网上的资料不清楚甚至有误，或者没有抓住重点的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529377023,"ip_address":"","comment_id":12987,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5824212890","product_id":100006601,"comment_content":"求老师后面讲解分布式事务原理🤓","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419490,"discussion_content":"2PC, 3PC都是标准协议，我讲和网上的资料也是一样的😄\n我想特别讲的一般是要么网上的资料不清楚甚至有误，或者没有抓住重点的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529377023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353968,"user_name":"唐方刚","can_delete":false,"product_type":"c1","uid":3046392,"ip_address":"广东","ucode":"93DA58C3DCCF1B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ugib9sF9icd9dhibQoAA025hibbD5zgZTiaddLoeEH457hrkBBhtQK6qknTWt270rHCtBZqeqsbibtHghgjdkPx3DyIw/132","comment_is_top":false,"comment_ctime":1659962089,"is_pvip":false,"replies":[{"id":"128829","content":"就是本来是一个联通的网络，现在分成两个不互通的网络了","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1660208111,"ip_address":"广东","comment_id":353968,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1659962089","product_id":100006601,"comment_content":"网络分区这个词有点费解","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583567,"discussion_content":"就是本来是一个联通的网络，现在分成两个不互通的网络了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660208112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352194,"user_name":"xuel","can_delete":false,"product_type":"c1","uid":2415543,"ip_address":"","ucode":"3777432587FCA0","user_header":"https://static001.geekbang.org/account/avatar/00/24/db/b7/eb0f48f7.jpg","comment_is_top":false,"comment_ctime":1658452345,"is_pvip":true,"replies":[{"id":"128206","content":"银行类的业务有很多种，不是所有银行类的业务都要求CP的，事实上95%的银行业务都不需要CP<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1658719638,"ip_address":"","comment_id":352194,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1658452345","product_id":100006601,"comment_content":"银行类的系统一定要CP，娱乐类系统可以用AP吧。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581310,"discussion_content":"银行类的业务有很多种，不是所有银行类的业务都要求CP的，事实上95%的银行业务都不需要CP\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658719638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348177,"user_name":"侧耳倾听","can_delete":false,"product_type":"c1","uid":1512642,"ip_address":"","ucode":"5BF2A2440B54F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","comment_is_top":false,"comment_ctime":1654821957,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654821957","product_id":100006601,"comment_content":"cap讨论的对象是有状态并且状态持久化的服务，存储服务考虑可用性，就会牺牲数据一致性<br>考虑了一致性，就会牺牲可用性<br>一般服务都是对象外。","like_count":0},{"had_liked":false,"id":339983,"user_name":"let_me_go","can_delete":false,"product_type":"c1","uid":1510177,"ip_address":"","ucode":"A5936F5C5E3D65","user_header":"https://static001.geekbang.org/account/avatar/00/17/0b/21/f1aea35b.jpg","comment_is_top":false,"comment_ctime":1648524388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648524388","product_id":100006601,"comment_content":"CAP：C(Consistency)一致，A(Availability)可用，P(Partition Tolerance)允许网络分区。使用分布式架构往往都会存在网络分区。对于分布式系统，P通常是必选。<br>* 选择CP，为了达到一致性的要求，当网络存在分区，比如某个机房与其他机房通讯中断，为了达到C，我们就必须禁止写入，因为一旦写入就会存在某个机房与其他机房拥有的数据不一致的情况，但这样就没办法保证A。<br>* 选择AP，存在网络分区时，依然可以写入，但是各个机房之间数据不同步，就没办法保证C。<br>* 选择CA，比如单机系统，能保证CA，但是离开了P，就失去了分布式系统的高可用等特性。<br>摘抄：“一致性”和“可用性”都应该站在 client 侧去审视；而“分区容忍性”则是集群 node 侧在遇到网络分区的问题时，选择如何去影响 client 侧感知到的“一致性”和“可用性”","like_count":1},{"had_liked":false,"id":334817,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1645147185,"is_pvip":true,"replies":[{"id":"122749","content":"返回error了，还怎么保证A（Availability）呢？","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1645755474,"ip_address":"","comment_id":334817,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645147185","product_id":100006601,"comment_content":"为啥那个返回Error案例，不是保证A P呢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553168,"discussion_content":"返回error了，还怎么保证A（Availability）呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645755474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328127,"user_name":"shawn","can_delete":false,"product_type":"c1","uid":1516046,"ip_address":"","ucode":"1A52A00A0A6610","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIkkg9icSGleYMAnwlb7A9MMJYOdovl8kOCA0asMkDe6grPNF74ib0prQMicicJTNa1WsdpMJ4p1CWkUQ/132","comment_is_top":false,"comment_ctime":1640567053,"is_pvip":false,"replies":[{"id":"119504","content":"kafka可以根据配置来定是CP还是AP，具体配置项可以查查如下几个：<br>replication.factor = 3<br>min.insync.replicas = 3<br>acks = all","user_name":"作者回复","user_name_real":"作者","uid":"1098920","ctime":1640613959,"ip_address":"","comment_id":328127,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640567053","product_id":100006601,"comment_content":"今天看到了之前一个订阅的专栏，里面也有一章讲CAP理论，里面居然说kafka是满足了其中的CA，我准备在评论区留言说说我的理解，结果发现留言区关闭了😭。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541957,"discussion_content":"kafka可以根据配置来定是CP还是AP，具体配置项可以查查如下几个：\nreplication.factor = 3\nmin.insync.replicas = 3\nacks = all","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640613959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316378,"user_name":"KW💤","can_delete":false,"product_type":"c1","uid":1109389,"ip_address":"","ucode":"290DD7016F4EE0","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","comment_is_top":false,"comment_ctime":1634291611,"is_pvip":false,"replies":[{"id":"114621","content":"故障的节点还能怎么返回正确的响应 ？","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1634372774,"ip_address":"","comment_id":316378,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1634291611","product_id":100006601,"comment_content":"“第一版的 every request 是不严谨的，因为只有非故障节点才能满足可用性要求，如果节点本身就故障了，发给节点的请求不一定能得到一个响应”。<br>我认为这个理由说服力不够，恰恰是“every request”能够更直观地表明系统无论背后发生什么问题都能给提供服务。如果你节点故障就导致返回错误那就是你的系统不可用了","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528373,"discussion_content":"故障的节点还能怎么返回正确的响应 ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634372774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405304,"discussion_content":"failover啊。我的意思是如果一个节点故障即不可用那么这个系统的可用性就不存在了啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634552782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307254,"user_name":"Ilovek8s","can_delete":false,"product_type":"c1","uid":1542450,"ip_address":"","ucode":"64DF0F7D0CF0B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a8PMLmCTCBa40j7JIy3d8LsdbW5hne7lkk9KOGQuiaeVk4cn06KWwlP3ic69BsQLpNFtRTjRdUM2ySDBAv1MOFfA/132","comment_is_top":false,"comment_ctime":1628990199,"is_pvip":false,"replies":[{"id":"111266","content":"开源系统确实没有完全实现paxos的，但谷歌内部据说是有完全实现的Paxos版本，例如chubby","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1629023962,"ip_address":"","comment_id":307254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628990199","product_id":100006601,"comment_content":"PAXOS是谷歌的理论之作，在实际上并没有完全实现，而改为raft,最有代表的作为etcd，但etcd在IO异常时也会存在数据不一致的问题，集群节点写入etcd有延时，K8s集群有时候获取到不一样的数据","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525096,"discussion_content":"开源系统确实没有完全实现paxos的，但谷歌内部据说是有完全实现的Paxos版本，例如chubby","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629023962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306484,"user_name":"Wayne👿","can_delete":false,"product_type":"c1","uid":2694146,"ip_address":"","ucode":"A8AD5481052D9F","user_header":"https://static001.geekbang.org/account/avatar/00/29/1c/02/5aa8b087.jpg","comment_is_top":false,"comment_ctime":1628580793,"is_pvip":false,"replies":[{"id":"110957","content":"就是你说的后一种实现逻辑","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1628585743,"ip_address":"","comment_id":306484,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628580793","product_id":100006601,"comment_content":"老师<br>你的cp模型示例中，N2怎么知道数据被修改了呢。如果没办法知道数据是否已经被修改了，那她根据什么条件来决定是否给client返回error呢？还是说只要N2发现和N1断开链接，就认为当前不可用，返回error？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524786,"discussion_content":"就是你说的后一种实现逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628585743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294004,"user_name":"肖克","can_delete":false,"product_type":"c1","uid":1018377,"ip_address":"","ucode":"6F1A33FE7DA32E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/09/ca696484.jpg","comment_is_top":false,"comment_ctime":1621674764,"is_pvip":false,"replies":[{"id":"106741","content":"所有号称100% CP的都是忽悠的，Paxos也做不到！","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1621830823,"ip_address":"","comment_id":294004,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621674764","product_id":100006601,"comment_content":"怎么理解CAP定理？CAP中，C代表一致性，A代表可用性，P代表分区容忍，分区容忍翻译的不好，你就直接理解为数据分片就OK了。闭上眼睛，你想想，永远的A不可能实现，A就像永动机一样，理论存在，所以A追求的是HA（高可用）。而我们是可以追求100%的C和P的。CAP定理的发明人Eric Brewe曾经承认CAP是一个容易误导人的而且过于简化的模型。在2000年，CAP的意义在于让大家开始讨论关于分布式系统的取舍。但CAP并不是一个精确的理论，他仅仅用于指方向。<br><br>这个是tidb创始人黄东旭最近一次（2021.5)接受极客时间访谈的观点，我觉得是有道理的。分区容忍是可以做到的吧，所以只能cp和ap，用觉得不对劲，到底怎么理解才正确呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520461,"discussion_content":"所有号称100% CP的都是忽悠的，Paxos也做不到！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621830823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289126,"user_name":"Louhwz","can_delete":false,"product_type":"c1","uid":1988237,"ip_address":"","ucode":"9ADF138DD172AA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/56/8d/9b8a6837.jpg","comment_is_top":false,"comment_ctime":1618883204,"is_pvip":false,"replies":[{"id":"104921","content":"理论上来说都算分区，但实际上部署在多机房才有作用，因为单个机房可能整体故障","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1618908228,"ip_address":"","comment_id":289126,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618883204","product_id":100006601,"comment_content":"老师，请问分区具体的做法是什么？是多台同机房服务器部署同一个服务就算分区了，还是一定要同一个服务部署在多机房才算分区？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518828,"discussion_content":"理论上来说都算分区，但实际上部署在多机房才有作用，因为单个机房可能整体故障","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618908228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288586,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1618552279,"is_pvip":false,"replies":[{"id":"104746","content":"cp的时候，有的节点不能提供服务哦","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1618562049,"ip_address":"","comment_id":288586,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618552279","product_id":100006601,"comment_content":"A. 程序可用性   C  数据一致性   P 程序分区容错<br>因为是分布式系统，一定要提供服务所以，p必选。只剩下ap  和cp","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518675,"discussion_content":"cp的时候，有的节点不能提供服务哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618562049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285831,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1617025714,"is_pvip":true,"replies":[{"id":"103782","content":"看一下这篇文章：《CAP理论十二年回顾：&quot;规则&quot;变了》","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1617067991,"ip_address":"","comment_id":285831,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617025714","product_id":100006601,"comment_content":"CAP一直不是那么理解清楚，但是读了老师的说法，感觉知道了些。<br>CAP主要是针对分布式场景下的读写问题，其他不在这里<br>C：读到最新的数据<br>A：及时返回结果<br>P：网络故障，系统可用<br>其中CA我理解是一对矛盾，C要求数据同步，需要时间，A又不给系统多的时间备份，所以CP和AP才是可能的两种情况。<br>有时间一定拜读下第二版论文","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517794,"discussion_content":"看一下这篇文章：《CAP理论十二年回顾：&amp;quot;规则&amp;quot;变了》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617067991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272172,"user_name":"荣码人生","can_delete":false,"product_type":"c1","uid":1397399,"ip_address":"","ucode":"6BD1A1991B484D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL9JoquW6ia5A9AUkt8Ah51WQsqlpWnzwLcZwXKycAricKGOeqHf2JrVHxkHIjx5LuHnm8fJ1bJVLlA/132","comment_is_top":false,"comment_ctime":1609980558,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1609980558","product_id":100006601,"comment_content":"cap，首先由于是分布式系统所以p肯定有，那么就剩下c和a<br>c一致性，关键在于结果一样，要保证结果就需要堵塞，堵塞就耗时间，自然速度不快<br>a可用性，关键在于速度，不在意结果，最快返回即可<br>所以本身c和a是矛盾的，二者只能选其一<br>根据业务场景选择数据库，sql或nosql，根据业务场景选择强一致或最终一致性","like_count":0,"discussions":[{"author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361600,"discussion_content":"为啥分布式肯定有P呀，是因为分布式有网络，有网络不管是否容忍都是一种态度？所以就有P了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616713179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257274,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1603899735,"is_pvip":true,"replies":[{"id":"94079","content":"后面还有异地多活的设计步骤，开箱即用������","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1604388773,"ip_address":"","comment_id":257274,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1603899735","product_id":100006601,"comment_content":"把正文内容和留言答疑一起看，我觉的这个可能是中文网络上最好的有关 CAP 理论的解说。特别是对于 Robert Greiner 的两篇文章的对比分析，非常精彩。<br><br>之所以说 almost，是因为后面还有一篇 CAP 细节。<br><br>因为工作关系，我其实没有太多接触分布式架构的机会，但是看完这篇，感觉从理论上已经明白了，之后就看动手实际操练了。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508278,"discussion_content":"后面还有异地多活的设计步骤，开箱即用������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604388773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244487,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1598533810,"is_pvip":true,"replies":[{"id":"90063","content":"你说的c的含义就是文中的第二版解释，另外，cp肯定是存在的，paxos的多数派是一种实现方式，单点写入也可以实现cp","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1598685807,"ip_address":"","comment_id":244487,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598533810","product_id":100006601,"comment_content":"cp其实存在吧，c说的是客户端可以看到最新的写入。以paxos为例，如果写入是在多数派都commit之后才返回，读的时候也要读多数派个节点，这种情况下就是cp啊。 很多实现为了效率，会在accept之后本地commit成功了就返回写成功，如果这个时候读了一个其它节点，可能会是还没commit。 cap说的c应该就是客户端视角看到的情况，而不是系统内部的数据是否完全一致。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504600,"discussion_content":"你说的c的含义就是文中的第二版解释，另外，cp肯定是存在的，paxos的多数派是一种实现方式，单点写入也可以实现cp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598685807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243139,"user_name":"Geek_51b918","can_delete":false,"product_type":"c1","uid":2137142,"ip_address":"","ucode":"135FAFABF36376","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKAG63HYQkxKnOicNaEdp9frbggyXmwr5MM6kTOtDlJpDHcslFTibKtG9kXsFHPPnS9v5oTx5WfDfHQ/132","comment_is_top":false,"comment_ctime":1597974296,"is_pvip":false,"replies":[{"id":"89634","content":"我去学习下������","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1597984423,"ip_address":"","comment_id":243139,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597974296","product_id":100006601,"comment_content":"老师 kafka 是分布式CA架构，Leader副本做请求服务，worker副本只用来保证高可用。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504193,"discussion_content":"我去学习下������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597984423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237626,"user_name":"蔸蔸","can_delete":false,"product_type":"c1","uid":1936661,"ip_address":"","ucode":"8918E9D50F0F4E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8d/15/8aa25922.jpg","comment_is_top":false,"comment_ctime":1595905002,"is_pvip":false,"replies":[{"id":"87993","content":"不经常改变，或者跟钱和库存有关的用CP多些","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1596081549,"ip_address":"","comment_id":237626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595905002","product_id":100006601,"comment_content":"感觉跟钱有关的选CP，其他的用AP会好点","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502485,"discussion_content":"不经常改变，或者跟钱和库存有关的用CP多些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596081549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231786,"user_name":"Spring","can_delete":false,"product_type":"c1","uid":1162519,"ip_address":"","ucode":"C7181355C741AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/17/dc1eab6c.jpg","comment_is_top":false,"comment_ctime":1593769712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593769712","product_id":100006601,"comment_content":"分区容错性中的分区不好理解","like_count":0},{"had_liked":false,"id":230988,"user_name":"黑鹰","can_delete":false,"product_type":"c1","uid":1410925,"ip_address":"","ucode":"F42716786FAAE5","user_header":"https://static001.geekbang.org/account/avatar/00/15/87/6d/e9b4d468.jpg","comment_is_top":false,"comment_ctime":1593561165,"is_pvip":false,"replies":[{"id":"85856","content":"是的，因为分布式必然会出现分区","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1594046538,"ip_address":"","comment_id":230988,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593561165","product_id":100006601,"comment_content":"所以说选择了AC就是选择了单体应用。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500105,"discussion_content":"是的，因为分布式必然会出现分区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594046538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227533,"user_name":"润！","can_delete":false,"product_type":"c1","uid":1237696,"ip_address":"","ucode":"13B7C23B5F6B24","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/c0/09cef977.jpg","comment_is_top":false,"comment_ctime":1592402257,"is_pvip":false,"replies":[{"id":"83985","content":"老师上完课也会布置作业的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1592523441,"ip_address":"","comment_id":227533,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592402257","product_id":100006601,"comment_content":"其实作者写的并不是很好，作为用户更希望进来看到是答案和详解，而不是抛的问题……在不断翻阅评论后才把脑袋的疑惑解除；所以希望作者改进","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498678,"discussion_content":"老师上完课也会布置作业的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592523441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217130,"user_name":"大鹏","can_delete":false,"product_type":"c1","uid":1118211,"ip_address":"","ucode":"6A16A2B2E9D61B","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/03/9ea1ce01.jpg","comment_is_top":false,"comment_ctime":1589423731,"is_pvip":false,"replies":[{"id":"80544","content":"现学现用，很赞👍🏻","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1589624432,"ip_address":"","comment_id":217130,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589423731","product_id":100006601,"comment_content":"从HDFS写数据的角度来说, 对于A和P和C都有取舍。<br>如果设置每个block最小副本数为1，那么当一个block写成功后，在复制到其他datanode的过程中，这个block的datanode坏掉了，那么这个单副本的block数据就等于永久丢失了，相当于无法保证P<br>如果设置每个block的副本数为3，而且要求必须要同时写成功3个data node才会算作写成功，在3个副本任一个副本没有确认写成功前，写入的流数据无法被客户端看到，这相当于牺牲了A<br>hdfs设计为, 同一个block,同时只能有一个写Client, 相当于将这个block租给某一个client,这个就是lease租约机制; 这种情况下, 相当于牺牲了A(因为其他写Client不能进行), 得到了C(只有一个Client写, 所以对于写来说强一致性, 读仍是上面那一大段), 也得到了P.","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495049,"discussion_content":"现学现用，很赞👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589624432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217117,"user_name":"大鹏","can_delete":false,"product_type":"c1","uid":1118211,"ip_address":"","ucode":"6A16A2B2E9D61B","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/03/9ea1ce01.jpg","comment_is_top":false,"comment_ctime":1589422143,"is_pvip":false,"replies":[{"id":"80545","content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1589624569,"ip_address":"","comment_id":217117,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589422143","product_id":100006601,"comment_content":"如果一个服务节点挂了，影响客户端读写，是不是就违反了A，但是其他服务节点的数据是一致的，是不是这种场景满足CP，不满足CA","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495042,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589624569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207137,"user_name":"清泉","can_delete":false,"product_type":"c1","uid":1102743,"ip_address":"","ucode":"28EAE68B33A140","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","comment_is_top":false,"comment_ctime":1587012955,"is_pvip":false,"replies":[{"id":"77524","content":"CAP理论告诉你只能二选一，不能全部满足，这个还没用嘛","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1587115018,"ip_address":"","comment_id":207137,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587012955","product_id":100006601,"comment_content":"我们设计一个分布式存储且相互之间有数据共享的系统，本身用意就是为了解决高可用，而且不得不容忍节点间的网络问题，以及可能导致的数据一致问题。这样有没有CAP理论，没半点毛关系啊。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492019,"discussion_content":"CAP理论告诉你只能二选一，不能全部满足，这个还没用嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587115018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195607,"user_name":"笑","can_delete":false,"product_type":"c1","uid":1284647,"ip_address":"","ucode":"C91EAFAB88E5AC","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/27/4b81bce5.jpg","comment_is_top":false,"comment_ctime":1585203864,"is_pvip":false,"replies":[{"id":"74880","content":"memcache集群是分布式的这个说法没问题","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1585540062,"ip_address":"","comment_id":195607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585203864","product_id":100006601,"comment_content":"分布式和集群是有区别的吧？memcache集群是我们说的分布式吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489127,"discussion_content":"memcache集群是分布式的这个说法没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585540062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167729,"user_name":"胖子","can_delete":false,"product_type":"c1","uid":1037760,"ip_address":"","ucode":"E6371346288A87","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIuRQaZX70dsBg6khub2VPM1eQAP9IWRWxgOFed3ia4kXyNJInFRicWJ0ibf2YmLsOvJa1sGygGpmJg/132","comment_is_top":false,"comment_ctime":1577924876,"is_pvip":false,"replies":[{"id":"65127","content":"CAP中的一致性是指多个节点数据相同，ACID的一致性是指数据的约束没有被破坏","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1577943906,"ip_address":"","comment_id":167729,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577924876","product_id":100006601,"comment_content":"CAP与数据库的ACID两者的一致性有何区别？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479966,"discussion_content":"CAP中的一致性是指多个节点数据相同，ACID的一致性是指数据的约束没有被破坏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577943906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149897,"user_name":"JUSTFINE","can_delete":false,"product_type":"c1","uid":1113368,"ip_address":"","ucode":"3895642327D9DF","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/18/8af7ea16.jpg","comment_is_top":false,"comment_ctime":1573430875,"is_pvip":false,"replies":[{"id":"57775","content":"你可以说说你自己的分析和理解，然后我们再来交流哪些地方你有疑问或者不确定的，我直接给你答案对你没什么作用","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1573474579,"ip_address":"","comment_id":149897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573430875","product_id":100006601,"comment_content":"老师，对于kafka，es，zk这类中间件，分别满足的是cap中的哪些呢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474005,"discussion_content":"你可以说说你自己的分析和理解，然后我们再来交流哪些地方你有疑问或者不确定的，我直接给你答案对你没什么作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573474579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133927,"user_name":"追忆似水年华","can_delete":false,"product_type":"c1","uid":1083395,"ip_address":"","ucode":"FB6C3EDC6988B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/03/805c8e0e.jpg","comment_is_top":false,"comment_ctime":1568700796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568700796","product_id":100006601,"comment_content":"非常好","like_count":0},{"had_liked":false,"id":129163,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567053336,"is_pvip":false,"replies":[{"id":"48289","content":"可以自己尝试研究一下","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1567153041,"ip_address":"","comment_id":129163,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567053336","product_id":100006601,"comment_content":"之前看过阮一峰老师的讲解，感觉CAP还挺好理解的，一个分布式系统当P发生时，C和A二者只能选其一。<br>P：分区容错性，是站在服务器的角度来讲的<br>C：数据一致性，是站在客户端的角度来讲的<br>A：系统可用性，是站在客户端的角度来讲的<br>在通过网络构建的分布式系统中，P是不能100%避免的，所以，我们只能考虑，当P发生时是要C还是要A。<br>PAXOS 协议以及其他一致性协议，重点要的数据一致性，所以，应该属于CP类的系统。 <br><br>听老师讲解后发现这个CAP，其实有许多细节待了解的，如果没有数据共享和复制即使P发生A和C也是能共存的。<br>不知道老师后面会不会把所有的一致性协议都讲一下，并且对比一下他们的异同和优劣势？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465314,"discussion_content":"可以自己尝试研究一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567153041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112857,"user_name":"丹枫无迹","can_delete":false,"product_type":"c1","uid":1218765,"ip_address":"","ucode":"61A508C2464AF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/cd/d85c6361.jpg","comment_is_top":false,"comment_ctime":1562832785,"is_pvip":false,"replies":[{"id":"41163","content":"因为实际上做不到0延迟","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1562901299,"ip_address":"","comment_id":112857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562832785","product_id":100006601,"comment_content":"老师，CAP 既然是忽略延迟的，那为什么事务提交过程中，不同节点的数据是不一致的呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457931,"discussion_content":"因为实际上做不到0延迟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562901299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101720,"user_name":"ezekiel","can_delete":false,"product_type":"c1","uid":1158795,"ip_address":"","ucode":"AB4AB6FA8612D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/8b/43ce01ca.jpg","comment_is_top":false,"comment_ctime":1559926236,"is_pvip":false,"replies":[{"id":"37208","content":"没法判断，只能怀疑","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1560324546,"ip_address":"","comment_id":101720,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559926236","product_id":100006601,"comment_content":"CP模型图，N2如何判断自己的数据不是最新的？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453085,"discussion_content":"没法判断，只能怀疑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560324546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95618,"user_name":"丶丶丶丶","can_delete":false,"product_type":"c1","uid":1183896,"ip_address":"","ucode":"AC5808FA03147B","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/98/bba354ae.jpg","comment_is_top":false,"comment_ctime":1558103091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558103091","product_id":100006601,"comment_content":"这个定理告诉我们，当出现分区时，我们要么放弃整个系统，要么在一致性和可用性间二选一。当然，没有出现分区时，同时满足一致性和可用性是基本要求","like_count":0},{"had_liked":false,"id":69289,"user_name":"gkb111","can_delete":false,"product_type":"c1","uid":1224217,"ip_address":"","ucode":"9B3154BCC9046B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLUic3XzxET3L3QXxcTbeg96GMx1HkiaiaZdudchmOmtPnuEPHK5vYEeMkvJR098XljMbXDialYib3z6w/132","comment_is_top":false,"comment_ctime":1550712980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550712980","product_id":100006601,"comment_content":"cap.<br>一致性<br>可用性<br>分区容错性，<br>","like_count":0},{"had_liked":false,"id":67866,"user_name":"艾劲松","can_delete":false,"product_type":"c1","uid":1003876,"ip_address":"","ucode":"CB58E03BB72B39","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/64/273efcf8.jpg","comment_is_top":false,"comment_ctime":1550303547,"is_pvip":false,"replies":[{"id":"25383","content":"正好这1微秒的时候，100秒才超时的请求超时了，你考虑一下这种情况","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1551227781,"ip_address":"","comment_id":67866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550303547","product_id":100006601,"comment_content":"老师，对于分区容忍性，我的理解是：丢包、网络中断是分区，而网络延时实际上也是分区。只要是分布式系统，如果系统和系统之间的一致性同步时间需要一个不可容忍的时间，都可以理解为逻辑分区。放弃分区容忍性，即网络同步时间任何时候都需要保证可以被当前系统所接受的。举个不太恰当的例子：当系统的一致性、可用性需求的性能远大于100秒，而分区发生的时间在1微秒（以机器可靠的方式在同一个机房将分布式机器连接起来，或者在同一个主机上搭建的两个或多个虚拟机），那么是可以理解为这个分布式系统是分区不容忍的（即抛弃P，分区容忍）。此时，系统是可以保证CA的。而不是说无法保证CA。所以，理论上是可以CA，而实际的分布式系统都是基于互联网或者不一定可靠的局域网，或者数据同步时间可以被容忍的网络延迟、网络终端、丢包等等，无法放弃P，实际就只能是CP或者AP了。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439404,"discussion_content":"正好这1微秒的时候，100秒才超时的请求超时了，你考虑一下这种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551227781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36211,"user_name":"刘鹏","can_delete":false,"product_type":"c1","uid":1230417,"ip_address":"","ucode":"44F3D4DB3F5678","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/51/e39b5828.jpg","comment_is_top":false,"comment_ctime":1540981270,"is_pvip":false,"replies":[{"id":"12883","content":"架构设计就是做取舍，采用tcc要增加rpc，这个没法避免，至于性能影响，首先全流程算下来，增加几次rpc对整体性能影响不大，因为全流程处理过程中还有存储操作；其次本地简单rpc性能也很高。<br><br>最终一致性不代表不能实时修改，而是异常情况下采用最终一致性，正常情况下可以实时一致性","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1540993346,"ip_address":"","comment_id":36211,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540981270","product_id":100006601,"comment_content":"老师，在分布式事物中，需要保证较强的一致性 使用tcc补偿型事物的时候，必然会增加rpc调用的次数吧？这样也会影响性能。而用异步确保型确保的是最终一致性，不能即时修改状态，那这种情况下应该怎么选择呢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427785,"discussion_content":"架构设计就是做取舍，采用tcc要增加rpc，这个没法避免，至于性能影响，首先全流程算下来，增加几次rpc对整体性能影响不大，因为全流程处理过程中还有存储操作；其次本地简单rpc性能也很高。\n\n最终一致性不代表不能实时修改，而是异常情况下采用最终一致性，正常情况下可以实时一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540993346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36210,"user_name":"刘鹏","can_delete":false,"product_type":"c1","uid":1230417,"ip_address":"","ucode":"44F3D4DB3F5678","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/51/e39b5828.jpg","comment_is_top":false,"comment_ctime":1540980964,"is_pvip":false,"replies":[{"id":"12882","content":"这部分我接触比较少，你可以自己查一下","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1540993047,"ip_address":"","comment_id":36210,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540980964","product_id":100006601,"comment_content":"老师，现在主流解决分布式事物的框架常用的是那几个啊？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427784,"discussion_content":"这部分我接触比较少，你可以自己查一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540993047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32743,"user_name":"大宝","can_delete":false,"product_type":"c1","uid":1118727,"ip_address":"","ucode":"3766C3E3670BE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/07/29f12e6b.jpg","comment_is_top":false,"comment_ctime":1539685236,"is_pvip":false,"replies":[{"id":"12146","content":"是的，你尝试分析一下区块链是属于CP还是AP系统，这样理解就更深","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1539930886,"ip_address":"","comment_id":32743,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539685236","product_id":100006601,"comment_content":"区块链应该属于CAP 理论探讨的分布式系统吧","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426880,"discussion_content":"是的，你尝试分析一下区块链是属于CP还是AP系统，这样理解就更深","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539930886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30714,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1538981516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538981516","product_id":100006601,"comment_content":"节点就是系统或者服务器的意思吗？","like_count":0},{"had_liked":false,"id":30557,"user_name":"石同享","can_delete":false,"product_type":"c1","uid":1126166,"ip_address":"","ucode":"59DE36A10C8356","user_header":"https://static001.geekbang.org/account/avatar/00/11/2f/16/62210b6b.jpg","comment_is_top":false,"comment_ctime":1538921805,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538921805","product_id":100006601,"comment_content":"评论区有同学说mongodb属于cp，但mongodb replicaset的读操作支持设置只从primary读或者从secondary读，根据读的一致性要求不同可灵活选择，既可能是ap，也可能是cp。请华仔指教。","like_count":0},{"had_liked":false,"id":25058,"user_name":"forever","can_delete":false,"product_type":"c1","uid":1065978,"ip_address":"","ucode":"1C8968D4EC9A95","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/fa/b4324501.jpg","comment_is_top":false,"comment_ctime":1537239896,"is_pvip":false,"replies":[{"id":"10990","content":"LibreOffice Draw","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1538870144,"ip_address":"","comment_id":25058,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537239896","product_id":100006601,"comment_content":"请问 老师 文中手续的画图是什么软件","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424172,"discussion_content":"LibreOffice Draw","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538870144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20871,"user_name":"文竹","can_delete":false,"product_type":"c1","uid":1103167,"ip_address":"","ucode":"74413B1975976B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/3f/80bf4841.jpg","comment_is_top":false,"comment_ctime":1534781037,"is_pvip":false,"replies":[{"id":"7357","content":"结论正确，但分区的时候更应该分析多数派节点的行为","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1534823282,"ip_address":"","comment_id":20871,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534781037","product_id":100006601,"comment_content":"基于Paxos算法构建的分布式系统属于CP。<br>理由如下：<br>以由5节点组成的分布式集群为例。<br>分布式集群的高可用是有限制的，只有超过半数以上的节点可用，整个集群才可用。当出现网络分区时，只有2节点可用，这个时候整个集群就不可用。但2节点间的数据读取是一致的，所以满足一致性；对2节点访问的响应也是合理的，所以满足分区容错性。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422431,"discussion_content":"结论正确，但分区的时候更应该分析多数派节点的行为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534823282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20076,"user_name":"大卫","can_delete":false,"product_type":"c1","uid":1019127,"ip_address":"","ucode":"D861709E483793","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/f7/a4de6f64.jpg","comment_is_top":false,"comment_ctime":1534252226,"is_pvip":false,"replies":[{"id":"7026","content":"我查了一下英文文档，它的架构采用raft协议实现leader选举，leader和follower之间复制状态信息，以此来保证一致性，因此是CP系统","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1534300265,"ip_address":"","comment_id":20076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534252226","product_id":100006601,"comment_content":"华哥，看资料Consul注册中心就是ca的，这个怎么理解下，支持多数据中心的。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422096,"discussion_content":"我查了一下英文文档，它的架构采用raft协议实现leader选举，leader和follower之间复制状态信息，以此来保证一致性，因此是CP系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534300265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19781,"user_name":"Bright.亮","can_delete":false,"product_type":"c1","uid":1108738,"ip_address":"","ucode":"260853C691F7B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/02/9e93c823.jpg","comment_is_top":false,"comment_ctime":1534064716,"is_pvip":false,"replies":[{"id":"6915","content":"分布式系统中AP反而多一些，尤其是互联网，CP系统一致性挺复杂的，目前基本都是基于Paxos算法变种来构造，例如zookeeper和Raft","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1534126434,"ip_address":"","comment_id":19781,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534064716","product_id":100006601,"comment_content":"华哥，我有个疑问，一般的分布式系统都是CP，但怎么最终保持一致性哪？是采用分布式事务吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421983,"discussion_content":"分布式系统中AP反而多一些，尤其是互联网，CP系统一致性挺复杂的，目前基本都是基于Paxos算法变种来构造，例如zookeeper和Raft","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534126434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19457,"user_name":"文竹","can_delete":false,"product_type":"c1","uid":1103167,"ip_address":"","ucode":"74413B1975976B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/3f/80bf4841.jpg","comment_is_top":false,"comment_ctime":1533853345,"is_pvip":false,"replies":[{"id":"6721","content":"不是CA，出现分区后，Paxos集群中的少数派节点会拒绝服务，因此是CP","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1533863004,"ip_address":"","comment_id":19457,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1533853345","product_id":100006601,"comment_content":"基于Paxos算法构建的分布式系统属于CA","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421850,"discussion_content":"不是CA，出现分区后，Paxos集群中的少数派节点会拒绝服务，因此是CP","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533863004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16823,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1532239051,"is_pvip":false,"replies":[{"id":"5833","content":"1. 我理解不算，你是统一存储，分开运算，不存在数据复制的场景，这个架构就是计算高可用中任务分解的架构<br><br>2. 不属于CAP定义的分布式系统，CAP要求节点间针对同一份数据进行复制和备份","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1532254762,"ip_address":"","comment_id":16823,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532239051","product_id":100006601,"comment_content":"还是半懂不懂，我举例请老师帮我分析一下。<br>1 我以前做的一个健康系统，就是一张表里面存了用户的健康数据，有一个类型字段来标识数据类型，，比如血压，血糖，心跳，体温等。然后搭建多台服务器来分析用户的健康状况，比如服务器A 负责分析血压，血糖。服务器B 负责分析心跳数据。服务器 C  负责分析体温数据。以此类推。请问一下这个属于分布式系统吗？若是，是 AP还是CP。<br><br>2  现在的ERP系统存储数据分了好几个数据库来存，比如与业务相关的存在 MY SQL,基础数据放在 SQL SERVER,日志写在MONGO DB中，还用了消息队列REDIS。请问一下这个是否也属于分布式，为什么？谢谢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420940,"discussion_content":"1. 我理解不算，你是统一存储，分开运算，不存在数据复制的场景，这个架构就是计算高可用中任务分解的架构\n\n2. 不属于CAP定义的分布式系统，CAP要求节点间针对同一份数据进行复制和备份","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532254762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15478,"user_name":"Alan","can_delete":false,"product_type":"c1","uid":1061340,"ip_address":"","ucode":"15C718CA868099","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/dc/af9c4356.jpg","comment_is_top":false,"comment_ctime":1531209449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531209449","product_id":100006601,"comment_content":"zab是mulit paxos的一种实现， 都属于一阶段操作， mulit paxos实现了日志的乱序提交，允许日志空洞， 而zab和raft日志需要顺序提交","like_count":0},{"had_liked":false,"id":14945,"user_name":"大光头","can_delete":false,"product_type":"c1","uid":1041792,"ip_address":"","ucode":"8EF797AFD1E27C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo3DrWeV7ZwRLXrRZg4V3ic1LQYdZ3u1oicDhqPic47vMguvf5QS69roTiaJrwDr5Re3Sy2UyHDWwmsTA/132","comment_is_top":false,"comment_ctime":1530755689,"is_pvip":false,"replies":[{"id":"5046","content":"paxos是cp，因为分区发生后，少数派的分区会拒绝服务","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1530784881,"ip_address":"","comment_id":14945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530755689","product_id":100006601,"comment_content":"应该是一个AP系统，因为当发生分区时，并不能保证拿到最新结果，而只能保证拿到一个结果","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420189,"discussion_content":"paxos是cp，因为分区发生后，少数派的分区会拒绝服务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530784881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14639,"user_name":"王虹凯","can_delete":false,"product_type":"c1","uid":1018862,"ip_address":"","ucode":"CA01E64E125CFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/ee/56823fd7.jpg","comment_is_top":false,"comment_ctime":1530581075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1530581075","product_id":100006601,"comment_content":"cap如果从关注读写（好像也是定义关注这块）出发的话，paxos应该是ap。读写：因为半数提交，导致数据不一致；不过能保证数据原子提交成功与否！<br>不知道这样的理解是否正确！","like_count":0},{"had_liked":false,"id":14485,"user_name":"任鉴非","can_delete":false,"product_type":"c1","uid":1066924,"ip_address":"","ucode":"6E53C13870595E","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/ac/91608e9c.jpg","comment_is_top":false,"comment_ctime":1530492024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1530492024","product_id":100006601,"comment_content":"属于cp架构","like_count":0},{"had_liked":false,"id":13803,"user_name":"小江","can_delete":false,"product_type":"c1","uid":1080044,"ip_address":"","ucode":"5DE28BE4417EC6","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/ec/f39349f3.jpg","comment_is_top":false,"comment_ctime":1529990101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529990101","product_id":100006601,"comment_content":"有很多开源体统  副本更新策略是先更新主再异步更新副本，这种都不满足C？","like_count":0},{"had_liked":false,"id":13729,"user_name":"jacy","can_delete":false,"product_type":"c1","uid":1103456,"ip_address":"","ucode":"0022A8759DDCE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/60/f21b2164.jpg","comment_is_top":false,"comment_ctime":1529972520,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1529972520","product_id":100006601,"comment_content":"对客户端来说，正常运行时是ap,选举恢复的过程中为p？","like_count":0},{"had_liked":false,"id":13470,"user_name":"朱永昌","can_delete":false,"product_type":"c1","uid":1116128,"ip_address":"","ucode":"FDF71B7DDDB930","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/e0/19cb0e9f.jpg","comment_is_top":false,"comment_ctime":1529662254,"is_pvip":false,"replies":[{"id":"4542","content":"假设本来5台机器网络都是通的，现在由于交换机故障，其中3台联通形成小团体A，另外两台联通形成小团体B，但是A和B不联通","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529726658,"ip_address":"","comment_id":13470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1529662254","product_id":100006601,"comment_content":"老师您好，请问文中的“网络分区”是什么意思，能否用通俗的需要解释下？谢谢？！","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419658,"discussion_content":"假设本来5台机器网络都是通的，现在由于交换机故障，其中3台联通形成小团体A，另外两台联通形成小团体B，但是A和B不联通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529726658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13462,"user_name":"安小依","can_delete":false,"product_type":"c1","uid":1101660,"ip_address":"","ucode":"A5C414C7B994FF","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/5c/d4e19eb6.jpg","comment_is_top":false,"comment_ctime":1529655343,"is_pvip":false,"replies":[{"id":"4543","content":"网上引用的，不知道具体什么软件画的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529726705,"ip_address":"","comment_id":13462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1529655343","product_id":100006601,"comment_content":"李老师，那两张图片是用什么软件画的😂","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419656,"discussion_content":"网上引用的，不知道具体什么软件画的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529726705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13278,"user_name":"万历十五年","can_delete":false,"product_type":"c1","uid":1122150,"ip_address":"","ucode":"3D8CF5DF847AE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","comment_is_top":false,"comment_ctime":1529494207,"is_pvip":false,"replies":[{"id":"4477","content":"AP方案中的节点可以返回旧的值，没有违反A<br><br><br>CAP确实是说最多满足两个，有可能满足一个，全部不满足还是比较难的😄😄","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529550514,"ip_address":"","comment_id":13278,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1529494207","product_id":100006601,"comment_content":"最后CAP应用中的例一，为什么违背了A就是CP呢？我觉得此例，既违背了A，也违背了C（因为它的读没能返回最新的写）。<br>分布式系统，如果设计的好的话，至多只能达到CAP中的两个，如果设计的不好，可能两个都不能达到。<br>请问华仔以上的两个理解是否正确","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419594,"discussion_content":"AP方案中的节点可以返回旧的值，没有违反A\n\n\nCAP确实是说最多满足两个，有可能满足一个，全部不满足还是比较难的😄😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529550514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13203,"user_name":"王维","can_delete":false,"product_type":"c1","uid":1091684,"ip_address":"","ucode":"836E6CDB1A56BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/64/965e0d9b.jpg","comment_is_top":false,"comment_ctime":1529455310,"is_pvip":false,"replies":[{"id":"4482","content":"是的，牺牲了一定的用户体验来保证最核心的体验","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529550763,"ip_address":"","comment_id":13203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1529455310","product_id":100006601,"comment_content":"我认为:<br>不同的系统，不同的应用场景，对于CAP的应用是不同的，有的要求CP，有的要求AP,例如淘宝在双十一的时候，为了更好的减轻负荷，在下单完成后并没有立即更新用户的订单库，而是采用的延迟更新的方式，这里满足的就是AP。<br><br>请问华仔我这个分析对吗","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419575,"discussion_content":"是的，牺牲了一定的用户体验来保证最核心的体验","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529550763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13191,"user_name":"何国平","can_delete":false,"product_type":"c1","uid":1101355,"ip_address":"","ucode":"251BA091AF8690","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/2b/a47a0936.jpg","comment_is_top":false,"comment_ctime":1529453867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529453867","product_id":100006601,"comment_content":"一般更倾向于cp，然后通过冗余来实现a","like_count":0},{"had_liked":false,"id":13115,"user_name":"加多","can_delete":false,"product_type":"c1","uid":1101824,"ip_address":"","ucode":"B2192A2D58C444","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/00/9d05af66.jpg","comment_is_top":false,"comment_ctime":1529381386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529381386","product_id":100006601,"comment_content":"求老师后面讲解分布式事务的一个开源实现🤓","like_count":0},{"had_liked":false,"id":13049,"user_name":"dbo","can_delete":false,"product_type":"c1","uid":1052678,"ip_address":"","ucode":"3C5343589E47C2","user_header":"","comment_is_top":false,"comment_ctime":1529334345,"is_pvip":false,"replies":[{"id":"4338","content":"下一篇就讲了","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529376392,"ip_address":"","comment_id":13049,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1529334345","product_id":100006601,"comment_content":"https:&#47;&#47;www.infoq.com&#47;articles&#47;cap-twelve-years-later-how-the-rules-have-changed<br>对于CAP的理解，作者另有解释，并非三者只能取其二，不是1和0的关系，而是1到100的关系，这篇文章解释的挺全的。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419516,"discussion_content":"下一篇就讲了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529376392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12947,"user_name":"空档滑行","can_delete":false,"product_type":"c1","uid":1091611,"ip_address":"","ucode":"06A6A7F503FAA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/1b/ced1d171.jpg","comment_is_top":false,"comment_ctime":1529199285,"is_pvip":false,"replies":[{"id":"4351","content":"分区时，少数派的分区无法完成操作，多数派的分区可以继续保证一致性，因此paxos算法实现的系统是cp","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529377744,"ip_address":"","comment_id":12947,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1529199285","product_id":100006601,"comment_content":"Paxos算法是为了在分布式系统中对某一项决议达成一致的算法，采用的是多数派达成共识。<br>如果基于paxos实现的分布式系统如果在发生分区时，并不能保证一致性。如果系统是分布式数据库这种需要事务的，则需要结合2PC等强一致性协议。所以我的理解是基于paxos协议实现的分布式系统是满足AP的","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419471,"discussion_content":"分区时，少数派的分区无法完成操作，多数派的分区可以继续保证一致性，因此paxos算法实现的系统是cp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529377744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}