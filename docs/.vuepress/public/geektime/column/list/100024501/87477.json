{"id":87477,"title":"07 | Clang、Infer 和 OCLint ，我们应该使用谁来做静态分析？","content":"<p>你好，我是戴铭。</p><p>随着业务开发迭代速度越来越快，完全依赖人工保证工程质量也变得越来越不牢靠。所以，静态分析，这种可以帮助我们在编写代码的阶段就能及时发现代码错误，从而在根儿上保证工程质量的技术，就成为了iOS开发者最常用到的一种代码调试技术。</p><p>Xcode 自带的静态分析工具 Analyze，通过静态语法分析能够找出在代码层面就能发现的内存泄露问题，还可以通过上下文分析出是否存在变量无用等问题。但是，Analyze 的功能还是有限，还是无法帮助我们在编写代码的阶段发现更多的问题。所以，这才诞生出了功能更全、定制化高、效率高的第三方静态检查工具。比如，OCLint、Infer、Clang静态分析器等。</p><p>一款优秀的静态分析器，能够帮助我们更加全面的发现人工测试中的盲点，提高检查问题的效率，寻找潜在的可用性问题，比如空指针访问、资源和内存泄露等等。</p><p>同时，静态分析器还可以检查代码规范和代码可维护性的问题，根据一些指标就能够找出哪些代码需要优化和重构。这里有三个常用的复杂度指标，可以帮助我们度量是否需要优化和重构代码。</p><ul>\n<li>\n<p>圈复杂度高。圈复杂度，指的是遍历一个模块时的复杂度，这个复杂度是由分支语句比如 if、case、while、for，还有运算符比如 &amp;&amp;、||，以及决策点，共同确定的。一般来说，圈复杂度在以 4 以内是低复杂度，5到7是中复杂度，8到10是高复杂度，11以上时复杂度就非常高了，这时需要考虑重构，不然就会因为测试用例的数量过高而难以维护。<br>\n而这个圈复杂度的值，是很难通过人工分析出来的。而静态分析器就可以根据圈复杂度规则，来监控圈复杂度，及时发现代码是否过于复杂，发现问题后及早解决，以免造成代码过于复杂难以维护。</p>\n</li>\n<li>\n<p>NPath 复杂度高。NPath 度量是指一个方法所有可能执行的路径数量。一般高于200就需要考虑降低复杂度了。</p>\n</li>\n<li>\n<p>NCSS 度量高。NCSS 度量是指不包含注释的源码行数，方法和类过大会导致代码维护时阅读困难，大的 NCSS 值表示方法或类做的事情太多，应该拆分或重构。一般方法行数不过百，类的行数不过千。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>但是，使用静态分析技术来保证工程质量，也并不尽如人意，还有如下<strong>两大缺陷</strong>：</p><ol>\n<li>\n<p>需要耗费更长的时间。相比于编译过程，使用静态分析技术发现深层次程序错误时，会对当前分析的方法、参数、变量去和整个工程关联代码一起做分析。所以，随着工程代码量的增加，每一步分析所依赖的影响面都会增大，所需耗时就更长。<br>\n虽然我们在设计静态分析器时，就已经对其速度做了很多优化，但还是达不到程序编译的速度。因为静态分析本身就包含了编译最耗时的 IO 和语法分析阶段，而且静态分析的内容多于编译，所以再怎么优化，即使是最好的情况也会比编译过程来得要慢。</p>\n</li>\n<li>\n<p>静态分析器只能检查出那些专门设计好的、可查找的错误。对于特定类型的错误分析，还需要开发者靠自己的能力写一些插件并添加进去。</p>\n</li>\n</ol><p>好了，现在我们已经了解了静态分析器的优缺点，那么面对繁多的iOS 的静态代码检查工具，我们到底应该选择哪一个呢？</p><p>接下来，我选择了3款主流的静态分析工具OCLint、Clang静态分析器、Infer，和你说说如何选择的问题。</p><h2>OCLint</h2><p>OCLint 是基于 Clang Tooling 开发的静态分析工具，主要用来发现编译器检查不到的那些潜在的关键技术问题。2017年9月份新发布的 OCLint 0.13版本中，包含了71条规则。</p><p>这些规则已经基本覆盖了具有通用性的规则，主要包括语法上的基础规则、Cocoa 库相关规则、一些约定俗成的规则、各种空语句检查、是否按新语法改写的检查、命名上长变量名短变量名检查、无用的语句变量和参数的检查。</p><p>除此之外，还包括了和代码量大小是否合理相关的一些规则，比如过大的类、类里方法是否太多、参数是否过多、Block 嵌套是否太深、方法里代码是否过多、圈复杂度的检查等。</p><p>你可以在<a href=\"http://docs.oclint.org/en/stable/rules/index.html\">官方规则索引</a>中，查看完整的规则说明。</p><p>这些规则可以在运行时被动态地加载到系统中，规则配置灵活、可扩展性好、方便自定义。</p><p>说到OCLint的安装方式，我建议你使用 Homebrew的方式。Homebrew 是 macOS 下专门用来进行软件包管理的一个工具，使用起来很方便，让你无需关心一些依赖和路径配置。</p><p>使用 Homebrew的方式安装时，我们需要首先设置brew的第三方仓库，然后安装OCLint。安装方法是在终端输入：</p><pre><code>brew tap oclint/formulae\nbrew install oclint\n</code></pre><p>安装完成，先编写一个 Hello world 代码来测试下，创建一个 Hello.m 文件来编写代码，使用 OCLint 来检查下前面编写的 Hello.m ，在终端输入如下命令：</p><pre><code>oclint Hello.m\n</code></pre><p>然后，我们可以使用下面的命令，将检查结果生成为一个HTML格式的报告：</p><pre><code>oclint -report-type html -o report.html Hello.m\n</code></pre><h2>Clang 静态分析器</h2><p>Clang 静态分析器（Clang Static Analyzer）是一个用 C++ 开发的，用来分析 C、C++ 和 Objective-C 的开源工具，是 Clang 项目的一部分，构建在 Clang 和 LLVM 之上。Clang 静态分析器的分析引擎用的就是 Clang 的库。</p><p>Clang 静态分析器专门为速度做过优化，可以在保证查出错误的前提下，使用更聪明的算法减少检查的工作量。</p><p>你可以点击<a href=\"http://clang-analyzer.llvm.org/release_notes.html\">这里下载</a>Clang静态分析器，然后解压就可以了，不需要放到特定目录下。而卸载它的话，删除这个解压后的目录即可。</p><p><strong>在Clang静态分析器中，常用的就是 scan-build 和 scan-view这两个工具。</strong></p><p>scan-build 和 scan-view 所在的目录路径，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/a1/2e6f1b41292b3744ddc3e0dbb960a1a1.png?wh=1256*430\" alt=\"\"></p><center><span class=\"reference\">图1 scan-build 和 scan-view 所在的目录路径</span></center><p>scan-build 是用来运行分析器的命令行工具；scan-view 包含了 scan-build 工具，会在 scan-build 执行完后将结果可视化。</p><p>scan-build 的原理是，将编译器构建改成另一个“假的”编译器来构建，这个“假的”编译器会执行 Clang 来编译，然后执行静态分析器分析你的代码。</p><p>scan-build的使用方法，也很简单，你只需要到项目目录下，使用如下命令即可：</p><pre><code>\\yourpath\\scan-build -k -V make\n</code></pre><p>关于scan-build的更多参数和使用说明，你可以点击<a href=\"http://clang-analyzer.llvm.org/scan-build\">这个链接</a>查看。</p><p><strong>Clang 静态分析器是由分析引擎(analyzer core)和 checkers 组成的。</strong>所有的 checker 都是基于底层分析引擎之上的。通过分析引擎提供的功能，我们可以编写新的 checker。</p><p>checker 架构能够方便用户扩展代码检查的规则，或者通过自定义来扩展bug 类型。如果你想编写自己的 checker，可以在 Clang 项目的 lib/StaticAnalyzer/Checkers 目录下找到示例参考，比如 ObjCUnusedIVarsChecker.cpp 就是用来检查是否有定义了，但是从未使用过的变量。</p><p>当然，如果为了编写自定义的 checker 一开始就埋头进去看那些示例代码是很难看懂的，你甚至都不能知道编写 checker 时有哪些方法可以为我所用。所以，你需要先了解 Clang 静态分析器提供了哪些功能接口，然后再参考官方的大量实例，去了解怎么使用这些功能接口，在这之后再动手开发才会事半功倍。</p><p><strong>接下来，我就跟你聊聊开发 checker 时需要了解的 Clang 静态分析器提供的一些功能接口。</strong></p><p>checker 的官方示例代码里有一个非常实用的，也就是内存泄露检查示例 MallocChecker，你可以点击<a href=\"http://clang.llvm.org/doxygen/MallocChecker_8cpp_source.html\">这个链接</a>查看代码。</p><p>在这段代码开头，我们可以看到引入了 clang/AST/ 和 clang/StaticAnalyzer/Core/PathSensitive/ 目录下的头文件。这两个目录下定义的接口功能非常强大，大部分 checker 都是基于此开发的。</p><p>clang/AST/ 目录中，有语法树遍历 RecursiveASTVisitor，还有语法树层级遍历 StmtVisitor，遍历过程中，会有很多回调函数可以让 Checker 进行检查。比如，方法调用前的回调 checkPreCall、方法调用后的回调 checkPostCall，CFG（Control Flow Graph 控制流程图） 分支调用时的回调 checkBranchCondition、CFG 路径分析结束时的回调 checkEndAnalysis 等等。有了这些回调，我们就可以从语法树层级和路径上去做静态检查的工作了。</p><p>clang/StaticAnalyzer/Core/PathSensitive/ 目录里，可以让 checker 检查变量和值上的更多变化。从目录 PathSensitive，我们也能看出这些功能叫做路径敏感分析（Path-Sensitive Analyses），是从条件分支上去跟踪，而这种跟踪是跟踪每一种分支去做分析。</p><p>但是，要去追踪所有路径的话，就可能会碰到很多复杂情况，特别是执行循环后，问题会更复杂，需要通过路径合并来简化复杂的情况，但是简化后可能就不会分析出所有的路径。所以，考虑到合理性问题的话，我们还是需要做些取舍，让其更加合理，达到尽量输出更多信息的目的，来方便我们开发 checker，检查出更多的 bug 。</p><p>路径敏感分析也包含了模拟内存管理，SymbolManager 符号管理里维护着变量的生命周期分析。想要了解具体实现的话，你可以点击<a href=\"http://clang.llvm.org/doxygen/SymbolManager_8h_source.html\">这个链接</a>参看源码实现。</p><p>这个内存泄露检查示例 MallocChecker 里，运用了 Clang 静态分析器提供的语法树层级节点检查、变量值路径追踪以及内存管理分析功能接口，对我们编写自定义的 checker 是一个很全面、典型的示例。</p><p>追其根本，编写自己的 checker ，其核心还是要更多地掌握 Clang 静态分析器的内在原理。很早之前，苹果公司就在 <a href=\"https://www.youtube.com/watch?v=4lUJTY373og&amp;t=102s\">LLVM Developers Meeting</a> 上，和我们分享过怎样通过 Clang 静态分析器去找 bug。你可以点击<a href=\"http://llvm.org/devmtg/2008-08/Kremenek_StaticAnalyzer.pdf\">这个链接</a>，查看相应的PPT，这对我们了解 Clang 静态分析器的原理有很大的帮助。</p><p>不过，checker 架构也有不完美的地方，比如每执行完一条语句，分析引擎需要回去遍历所有 checker 中的回调函数。这样的话，随着 checker 数量的增加，整体检查的速度也会变得越来越慢。</p><p>如果你想列出当前 Clang 版本下的所有 checker，可以使用如下命令：</p><pre><code>clang —analyze -Xclang -analyzer-checker-help\n</code></pre><p>下面显示的就是常用的 checker：</p><pre><code>debug.ConfigDumper              配置表\ndebug.DumpCFG                   显示控制流程图\ndebug.DumpCallGraph             显示调用图\ndebug.DumpCalls                 打印引擎遍历的调用\ndebug.DumpDominators            打印控制流程图的 dominance tree\ndebug.DumpLiveVars              打印实时变量分析结果\ndebug.DumpTraversal             打印引擎遍历的分支条件\ndebug.ExprInspection            检查分析器对表达式的理解\ndebug.Stats                     使用分析器统计信息发出警告\ndebug.TaintTest                 标记污染的符号\ndebug.ViewCFG                   查看控制流程图\ndebug.ViewCallGraph             使用 GraphViz 查看调用图\ndebug.ViewExplodedGraph         使用 GraphViz 查看分解图\n</code></pre><p>接下来，<strong>我和你举个例子来说明如何使用 checker</strong> 。我们先写一段代码：</p><pre><code>int main()\n{\n\tint a;\n\tint b = 10;\n\ta = b;\n\treturn a;\n}\n</code></pre><p>接下来，我们使用下面这条命令，调用 DumpCFG 这个 checker 对上面代码进行分析：</p><pre><code>clang -cc1 -analyze -analyzer-checker=debug.DumpCFG\n</code></pre><p>显示结果如下：</p><pre><code>int main()\n [B2 (ENTRY)]\n   Succs (1): B1\n\n [B1]\n   1: int a;\n   2: 10\n   3: int b = 10;\n   4: b\n   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)\n   6: a\n   7: [B1.6] = [B1.5]\n   8: a\n   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)\n  10: return [B1.9];\n   Preds (1): B2\n   Succs (1): B0\n\n [B0 (EXIT)]\n   Preds (1): B\n</code></pre><p>可以看出，代码的控制流程图被打印了出来。控制流程图会把程序拆得更细，可以把执行过程表现得更直观，有助于我们做静态分析。</p><h2>Infer</h2><p>Infer是Facebook 开源的、使用 OCaml 语言编写的静态分析工具，可以对 C、Java 和 Objective-C 代码进行静态分析，可以检查出空指针访问、资源泄露以及内存泄露。</p><p>Infer 的安装，有从源码安装和直接安装 binary releases 两种方式。</p><p>如果想在 macOS 上编译源码进行安装的话，你需要预先安装一些工具，这些工具在后面编译时会用到，命令行指令如下：</p><pre><code>brew install autoconf automake cmake opam pkg-config sqlite gmp mpfr\nbrew cask install java\n</code></pre><p>你可以使用如下所示的命令，通过编译源码来安装：</p><pre><code># Checkout Infer\ngit clone https://github.com/facebook/infer.git\ncd infer\n# Compile Infer\n./build-infer.sh clang\n# install Infer system-wide...\nsudo make install\n# ...or, alternatively, install Infer into your PATH\nexport PATH=`pwd`/infer/bin:$PATH\n</code></pre><p>使用源码安装所需的时间会比较长，因为会编译一个特定的 Clang 版本，而 Clang 是个庞大的工程，特别是第一次编译的耗时会比较长。我在第一次编译时，就大概花了一个多小时。所以，直接安装 binary releases 会更快些，在终端输入：</p><pre><code>brew install infer\n</code></pre><p>Infer就安装好了。</p><p>接下来，我通过一个示例和你分享下<strong>如何使用 Infer</strong>。我们可以先写一段Objective-C 代码：</p><pre><code>#import &lt;Foundation/Foundation.h&gt;\n\n@interface Hello: NSObject\n@property NSString* s;\n@end\n\n@implementation Hello\nNSString* m() {\n    Hello* hello = nil;\n    return hello-&gt;_s;\n}\n@end\n</code></pre><p>在终端输入：</p><pre><code>infer -- clang -c Hello.m\n</code></pre><p>结果如下：</p><pre><code>Capturing in make/cc mode...\nFound 1 source file to analyze in /Users/ming/Downloads/jikeshijian/infer-out\nStarting analysis...\n\nlegend:\n  &quot;F&quot; analyzing a file\n  &quot;.&quot; analyzing a procedure\n\nF.\n*Found 5 issues*\n\nhello.m:10: error: NULL_DEREFERENCE\n  pointer `hello` last assigned on line 9 could be null and is dereferenced at line 10, column 12.\n  8.   NSString* m() {\n  9.       Hello* hello = nil;\n  10. *&gt;*    return hello-&gt;_s;\n  11.   }\n\nhello.m:10: warning: DIRECT_ATOMIC_PROPERTY_ACCESS\n  Direct access to ivar `_s` of an atomic property at line 10, column 12. Accessing an ivar of an atomic property makes the property nonatomic.\n  8.   NSString* m() {\n  9.       Hello* hello = nil;\n  10. *&gt;*    return hello-&gt;_s;\n  11.   }\n\nhello.m:4: warning: ASSIGN_POINTER_WARNING\n  Property `s` is a pointer type marked with the `assign` attribute at line 4, column 1. Use a different attribute like `strong` or `weak`.\n  2.   \n  3.   @interface Hello: NSObject\n  4. *&gt;*@property NSString* s;\n  5.   @end\n  6.   \n\nhello.m:10: warning: DIRECT_ATOMIC_PROPERTY_ACCESS\n  Direct access to ivar `_s` of an atomic property at line 10, column 12. Accessing an ivar of an atomic property makes the property nonatomic.\n  8.   NSString* m() {\n  9.       Hello* hello = nil;\n  10. *&gt;*    return hello-&gt;_s;\n  11.   }\n\nhello.m:4: warning: ASSIGN_POINTER_WARNING\n  Property `s` is a pointer type marked with the `assign` attribute at line 4, column 1. Use a different attribute like `strong` or `weak`.\n  2.   \n  3.   @interface Hello: NSObject\n  4. *&gt;*@property NSString* s;\n  5.   @end\n  6.   \n\n\n*Summary of the reports*\n\n  DIRECT_ATOMIC_PROPERTY_ACCESS: 2\n         ASSIGN_POINTER_WARNING: 2\n               NULL_DEREF\n</code></pre><p>可以看出，我们前面的 hello.m 代码里一共有五个问题，其中包括一个错误、四个警告。第一个错误如下：</p><pre><code>hello.m:10: error: NULL_DEREFERENCE\n  pointer `hello` last assigned on line 9 could be null and is dereferenced at line 10, column 12.\n  8.   NSString* m() {\n  9.       Hello* hello = nil;\n  10. *&gt;*    return hello-&gt;_s;\n  11.   }\n</code></pre><p>这个错误的意思是， hello 可能为空，需要去掉第10行12列的引用。我把这行代码做下修改，去掉引用：</p><pre><code>return hello.s;\n</code></pre><p>再到终端运行一遍 infer 命令：</p><pre><code>infer -- clang -c Hello.m\n</code></pre><p>然后，就发现只剩下了一个警告:</p><pre><code>hello.m:4: warning: ASSIGN_POINTER_WARNING\n  Property `s` is a pointer type marked with the `assign` attribute at line 4, column 1. Use a different attribute like `strong` or `weak`.\n  2.   \n  3.   @interface Hello: NSObject\n  4. *&gt;*@property NSString* s;\n  5.   @end\n  6.  \n</code></pre><p>这个警告的意思是说，属性 s 是指针类型，需要使用 strong 或 weak 属性。这时，我将s 的属性修改为 strong：</p><pre><code>@property(nonatomic, strong) NSString* s;\n</code></pre><p>运行 Infer 后，发现没有问题了。</p><pre><code>Capturing in make/cc mode...\nFound 1 source file to analyze in /Users/ming/Downloads/jikeshijian/infer-out\nStarting analysis...\n\nlegend:\n  &quot;F&quot; analyzing a file\n  &quot;.&quot; analyzing a procedure\n\nF.\n*No issues found\n</code></pre><p>接下来，为了帮助你理解Infer的工作原理，我来梳理下<strong>Infer 工作的流程</strong>：</p><ul>\n<li>\n<p>第一个阶段是转化阶段，将源代码转成 Infer 内部的中间语言。类 C语言使用 Clang 进行编译，Java语言使用 javac 进行编译，编译的同时转成中间语言，输出到 infer-out 目录。</p>\n</li>\n<li>\n<p>第二个阶段是分析阶段，分析infer-out 目录下的文件。分析每个方法，如果出现错误的话会继续分析下一个方法，不会被中断，但是会记录下出错的位置，最后将所有出错的地方进行汇总输出。<br>\n默认情况下，每次运行infer命令都会删除之前的 infer-out 文件夹。你可以通过 --incremental 参数使用增量模式。增量模式下，运行infer命令不会删除 infer-out 文件夹，但是会利用这个文件夹进行 diff，减少分析量。<br>\n一般进行全新一轮分析时直接使用默认的非增量模式，而对于只想分析修改部分情况时，就使用增量模式。</p>\n</li>\n</ul><p>Infer 检查的结果，在 infer-out 目录下，是 JSON 格式的，名字叫做 report.json 。生成JSON格式的结果，通用性会更强，集成到其他系统时会更方便。</p><p>Infer 的工作流程图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/b2/6b1b328c130552f899c2f8cdc504fab2.png?wh=1920*1080\" alt=\"\"></p><center><span class=\"reference\">图2 Infer 的工作流程图</span></center><h2>小结</h2><p>在今天这篇文章中，我和你一一分析了Clang 静态分析器、Infer和OCLint 这三个 iOS 静态分析工具。对于 iOS 的静态分析，这三个工具都是基于 Clang 库开发的。</p><p>其中 Clang 静态分析器和 Xcode的集成度高，也支持命令行。不过，它们检查的规则少，基本都是只能检查出较大的问题，比如类型转换问题，而对内存泄露问题检查的侧重点则在于可用性。</p><p>OCLint 检查规则多、定制性强，能够发现很多潜在问题。但缺点也是检查规则太多，反而容易找不到重点；可定制度过高，导致易用性变差。</p><p>Infer 的效率高，支持增量分析，可小范围分析。可定制性不算最强，属于中等。</p><p>综合来看，Infer 在准确性、性能效率、规则、扩展性、易用性整体度上的把握是做得最好的，我认为这些是决定静态分析器好不好最重要的几点。所以，我比较推荐的是使用 Infer 来进行代码静态分析。</p><h2>课后作业</h2><p>我们今天提到的三款静态分析工具都是基于 Clang 库来开发的。那么请你来说下，Clang 给这三款工具提供了什么能力呢？</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"06 | App 如何通过注入动态库的方式实现极速编译调试？","id":87188},"right":{"article_title":"08 | 如何利用 Clang 为 App 提质？","id":87844}},"comments":[{"had_liked":false,"id":79745,"user_name":"Roger","can_delete":false,"product_type":"c1","uid":1398367,"ip_address":"","ucode":"20C05442E0C0DE","user_header":"https://static001.geekbang.org/account/avatar/00/15/56/5f/b3f3d82e.jpg","comment_is_top":false,"comment_ctime":1553529974,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"138992483446","product_id":100024501,"comment_content":"给宝宝喂夜奶，顺便来看看新的一课讲什么","like_count":33,"discussions":[{"author":{"id":2107980,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2a/4c/17993652.jpg","nickname":"Jesse","note":"","ucode":"ACB308497AF747","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343143,"discussion_content":"别让宝宝再当程序员了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1610955298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80543,"user_name":"drunkenMouse","can_delete":false,"product_type":"c1","uid":1454037,"ip_address":"","ucode":"AA8CEA703ECBE8","user_header":"","comment_is_top":false,"comment_ctime":1553678236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83158056860","product_id":100024501,"comment_content":"1. OClint 想执行自己指定的项目，还是不会。。最后查了别的资料，说是要写脚本安装xcpretty，而且说是不维护了。<br><br>2. CLang 静态分析器的clang —analyze -Xclang -analyzer-checker-help 我执行之后，并没有成功显示常用的Checker。。<br><br>3. Clang 静态分析器的lib&#47;StaticAnalyzer&#47;Checkers这个路径也没有找到，是不是换地方了？<br><br>4. OClint、Clang静态分析器与Infer 都需要Clang编译器的LLVM对源码做词法、语法上的分析生成AST（一种静态语法树，代码更精简，遍历更轻松），然后对生成的AST做静态分析，达到编译代码层面的分析。<br><br>5. OCLint说是不维护了，所以除了规则太多导致的重点找不到，可定制性过高导致的易用性变差外，也PASS（其实我对这句规则多所以XX的理解感受不是很深。。）<br><br>Clang静态分析器，规则少只能检策较大问题，对内存泄漏一类问题若无错误也不提示外，回调次数也多。每执行一句，都要回调所有的Checker的回调函数。所以PASS<br><br>Infer 定制性不是最高，但是不差。可以小范围分析，所以效率高。还支持增量分析（使用已缓存数据，非增量会清楚缓存）。所以，建议Infer<br>","like_count":20},{"had_liked":false,"id":79751,"user_name":"iLearn","can_delete":false,"product_type":"c1","uid":1220165,"ip_address":"","ucode":"BDDD3E94D9D94D","user_header":"https://static001.geekbang.org/account/avatar/00/12/9e/45/d2d2f005.jpg","comment_is_top":false,"comment_ctime":1553532077,"is_pvip":false,"replies":[{"id":"29537","content":"SwiftLint","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553941816,"ip_address":"","comment_id":79751,"utype":1}],"discussion_count":4,"race_medal":0,"score":"83157910701","product_id":100024501,"comment_content":"老师，Swift的要怎么搞？","like_count":20,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444608,"discussion_content":"SwiftLint","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553941816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230749,"discussion_content":"用sonar吧，支持oc和swift，可以指定扫描工具","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586768673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230746,"discussion_content":"用2个工具，试试呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586768570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459935,"avatar":"https://static001.geekbang.org/account/avatar/00/16/46/df/2f0e8551.jpg","nickname":"Mirror","note":"","ucode":"A262361AFC523D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213883,"discussion_content":"Objective-C 和 Swift混合的工程，怎么处理好呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585131035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79835,"user_name":"yb坏蛋biubiu","can_delete":false,"product_type":"c1","uid":1236680,"ip_address":"","ucode":"30E10E4CC41309","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/c8/ef0d6c86.jpg","comment_is_top":false,"comment_ctime":1553562363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40208268027","product_id":100024501,"comment_content":"clang作为llvm编译器前端，进行预编译、词法分析生成token片、语法分析生成AST后，提供一个切面，开发者可以在这里利用clang生成的AST语法树进行自定义规则遍历分析，clang也提供了相应的checker和抛出诊断异常的diagnosis。","like_count":9},{"had_liked":false,"id":84175,"user_name":"Yest","can_delete":false,"product_type":"c1","uid":1409087,"ip_address":"","ucode":"1E82B6355890C0","user_header":"https://static001.geekbang.org/account/avatar/00/15/80/3f/bc65b009.jpg","comment_is_top":false,"comment_ctime":1554798032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23029634512","product_id":100024501,"comment_content":"fatal error: &#39;Foundation&#47;Foundation.h&#39; file not found 这么解决👇<br>infer -- clang -c -isysroot &#47;Applications&#47;Xcode.app&#47;Contents&#47;Developer&#47;Platforms&#47;iPhoneSimulator.platform&#47;Developer&#47;SDKs&#47;iPhoneSimulator.sdk Hello.m","like_count":5},{"had_liked":false,"id":82892,"user_name":"寻心","can_delete":false,"product_type":"c1","uid":1455101,"ip_address":"","ucode":"67B76ED0844DD9","user_header":"https://static001.geekbang.org/account/avatar/00/16/33/fd/01a8e1f3.jpg","comment_is_top":false,"comment_ctime":1554344318,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23029180798","product_id":100024501,"comment_content":"这个问题有谁遇到吗？<br>怎么解决？<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br><br>Internal Error:   &#47;usr&#47;local&#47;Cellar&#47;infer&#47;0.15.0&#47;lib&#47;infer&#47;infer&#47;bin&#47;..&#47;lib&#47;python&#47;infer.py<br>  -j 4 --project-root &#47;Users&#47;yy&#47;工作&#47;项目&#47;test --out<br>  &#47;Users&#47;yy&#47;工作&#47;项目&#47;test&#47;infer-out -- xcodebuild build -scheme test<br>  -workspace test.xcworkspace -configuration Debug -sdk iphonesimulator:<br>  exited with code 1<br>Error backtrace:<br>Raised at file &quot;base&#47;Die.ml&quot; (inlined), line 25, characters 6-36<br>Called from file &quot;base&#47;Logging.ml&quot;, line 314, characters 58-80<br>Called from file &quot;integration&#47;Driver.ml&quot;, line 159, characters 2-16<br>Called from file &quot;integration&#47;Driver.ml&quot;, line 280, characters 6-420<br>Called from file &quot;infer.ml&quot;, line 20, characters 2-36<br>Called from file &quot;infer.ml&quot;, line 130, characters 8-54<br><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;","like_count":5,"discussions":[{"author":{"id":1038845,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d9/fd/389ef92f.jpg","nickname":"卩灬","note":"","ucode":"7FE8DB33A40172","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377554,"discussion_content":"大兄弟，这问题解决了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622708180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1247696,"avatar":"https://static001.geekbang.org/account/avatar/00/13/09/d0/baa520ac.jpg","nickname":"无问西东","note":"","ucode":"903803D0A5E2F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336727,"discussion_content":"大兄弟, 我的也遇到这个问题, 有解决了吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608689357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81514,"user_name":"简生","can_delete":false,"product_type":"c1","uid":1245345,"ip_address":"","ucode":"AE0EFF92406E17","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/a1/e943773e.jpg","comment_is_top":false,"comment_ctime":1553932643,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18733801827","product_id":100024501,"comment_content":"个人觉得虽然OCLint检测规则多，易用性没有Infer好。但是Sonar+OCLint可以对检测结果进行一个可视化的管理，还是会偏向于选择OCLint。😊","like_count":5,"discussions":[{"author":{"id":1229594,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJuQocTOGrXzPb8fgDibrdH5jBAtrdWckiaKjvner6OT1DeKtRm43Wo2jFqTuiaqmsKNqvfbxj25H4bg/132","nickname":"Geek_14b699","note":"","ucode":"02AC3773765AB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557886,"discussion_content":"infer 有误报啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648017609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240351,"discussion_content":"我们也用的这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587354589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87622,"user_name":"快到碗里来","can_delete":false,"product_type":"c1","uid":1454751,"ip_address":"","ucode":"D3EE7B9064DD7E","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/9f/46ac03ad.jpg","comment_is_top":false,"comment_ctime":1555643628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14440545516","product_id":100024501,"comment_content":"infer扫描单个文件 报错<br>7 errors generated.<br>Error: the following clang command did not run successfully:<br>    &#47;usr&#47;local&#47;Cellar&#47;infer&#47;0.15.0&#47;lib&#47;infer&#47;facebook-clang-plugins&#47;clang&#47;install&#47;bin&#47;clang<br>    @&#47;var&#47;folders&#47;j_&#47;tb3f_ly50rj_qylmtk1h8k2w0000gn&#47;T&#47;clang_command_.tmp.11b92e.txt<br>  ++Contents of &#39;&#47;var&#47;folders&#47;j_&#47;tb3f_ly50rj_qylmtk1h8k2w0000gn&#47;T&#47;clang_command_.tmp.11b92e.txt&#39;:<br>    &quot;-cc1&quot; &quot;-load&quot;<br>    &quot;&#47;usr&#47;local&#47;Cellar&#47;infer&#47;0.15.0&#47;lib&#47;infer&#47;infer&#47;bin&#47;..&#47;..&#47;facebook-clang-plugins&#47;libtooling&#47;build&#47;FacebookClangPlugin.dylib&quot;<br>    &quot;-add-plugin&quot; &quot;BiniouASTExporter&quot; &quot;-plugin-arg-BiniouASTExporter&quot; &quot;-&quot;<br>    &quot;-plugin-arg-BiniouASTExporter&quot; &quot;PREPEND_CURRENT_DIR=1&quot;<br>    &quot;-plugin-arg-BiniouASTExporter&quot; &quot;MAX_STRING_SIZE=65535&quot; &quot;-cc1&quot; &quot;-triple&quot;<br>    &quot;x86_64-apple-macosx10.14.0&quot; &quot;-Wdeprecated-objc-isa-usage&quot;<br>    &quot;-Werror=deprecated-objc-isa-usage&quot; &quot;-emit-obj&quot; &quot;-mrelax-all&quot;<br>    &quot;-disable-free&quot; &quot;-disable-llvm-verifier&quot; &quot;-discard-value-names&quot;<br>    &quot;-main-file-name&quot; &quot;RootVC.m&quot; &quot;-mrelocation-model&quot; &quot;pic&quot; &quot;-pic-level&quot; &quot;2&quot;<br>    &quot;-mthread-model&quot; &quot;posix&quot; &quot;-mdisable-fp-elim&quot; &quot;-masm-verbose&quot;<br>    &quot;-munwind-tables&quot; &quot;-target-cpu&quot; &quot;penryn&quot; &quot;-dwarf-column-info&quot;<br>    &quot;-debugger-tuning=lldb&quot; &quot;-target-linker-version&quot; &quot;351.8&quot;<br><br>    &quot;&#47;Applications&#47;Xcode.app&#47;Contents&#47;Developer&#47;Platforms&#47;iPhoneSimulator.platform&#47;Developer&#47;SDKs&#47;iPhoneSimulator.sdk&quot;<br>    &quot;-include&quot;<br>    &quot;&#47;usr&#47;local&#47;Cellar&#47;infer&#47;0.15.0&#47;lib&#47;infer&#47;infer&#47;bin&#47;..&#47;lib&#47;clang_wrappers&#47;global_defines.h&quot;<br>    &quot;-Wno-ignored-optimization-argument&quot; &quot;-Wno-everything&quot;<br>    &quot;-fdebug-compilation-dir&quot; &quot;&#47;Users&#47;mingzhi.liu&#47;Desktop&#47;TON&#47;TON&quot;<br>    &quot;-ferror-limit&quot; &quot;19&quot; &quot;-fmessage-length&quot; &quot;0&quot; &quot;-stack-protector&quot; &quot;1&quot;<br>    &quot;-fblocks&quot; &quot;-fencode-extended-block-signature&quot;<br>    &quot;-fobjc-runtime=macosx-10.14.0&quot; &quot;-fobjc-exceptions&quot; &quot;-fexceptions&quot;<br>    &quot;-fmax-type-align=16&quot; &quot;-fdiagnostics-show-option&quot; &quot;-o&quot; &quot;RootVC.o&quot; &quot;-x&quot;<br>    &quot;objective-c&quot; &quot;RootVC.m&quot; &quot;-O0&quot; &quot;-include&quot;<br>    &quot;&#47;usr&#47;local&#47;Cellar&#47;infer&#47;0.15.0&#47;lib&#47;infer&#47;infer&#47;bin&#47;..&#47;lib&#47;clang_wrappers&#47;global_defines.h&quot;<br>    &quot;-Wno-everything&quot;","like_count":3},{"had_liked":false,"id":81250,"user_name":"吴小安","can_delete":false,"product_type":"c1","uid":1371398,"ip_address":"","ucode":"EDF8E04F867069","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqr5ibqxYwcSgqPA7s49MZb1vEKKXT4mPTojwiclXkJf3ug26NuzTa6A5gbicR2rAUHdEkUAn13Rr2KQ/132","comment_is_top":false,"comment_ctime":1553842268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14438744156","product_id":100024501,"comment_content":"infer 扫描怎么过滤不想扫描的文件呢，例如pod","like_count":4},{"had_liked":false,"id":83909,"user_name":"mosn","can_delete":false,"product_type":"c1","uid":1454761,"ip_address":"","ucode":"0FD6967D15DB64","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/a9/ce5d2609.jpg","comment_is_top":false,"comment_ctime":1554731856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10144666448","product_id":100024501,"comment_content":"infer --skip-analysis-in-path Pods ","like_count":2},{"had_liked":false,"id":81111,"user_name":"scorpiozj","can_delete":false,"product_type":"c1","uid":1031677,"ip_address":"","ucode":"C66EA76809F9BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bd/fd/3f5d5db5.jpg","comment_is_top":false,"comment_ctime":1553818633,"is_pvip":false,"replies":[{"id":"29452","content":"是的","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553830680,"ip_address":"","comment_id":81111,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10143753225","product_id":100024501,"comment_content":"请问Xcode中的静态检查就是clang 静态检查吗？","like_count":2,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445084,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553830680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80852,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1456901,"ip_address":"","ucode":"8C1AD026C1AC84","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/05/b2776d73.jpg","comment_is_top":false,"comment_ctime":1553742496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10143677088","product_id":100024501,"comment_content":"传统编译器的工作原理，基本上都是三段式的，可以分为前端、优化器和后端。前端负责解析源代码，检查语法错误，并将其翻译为抽象的语法树；优化器对这一中间代码进行优化，试图使代码更高效；后端则负责将优化器优化后的中间代码转换为目标机器的代码，这一过程后端会最大化的利用目标机器的特殊指令，以提高代码的性能。基于这个认知，我们可以认为 LLVM 包括了两个概念：一个广义的 LLVM 和一个狭义的 LLVM 。广义的 LLVM 指的是一个完整的 LLVM 编译器框架系统，包括了前端、优化器、后端、众多的库函数以及很多的模块；而狭义的 LLVM 则是聚焦于编译器后端功能的一系列模块和库，包括代码优化、代码生成、JIT 等。<br>--------------------- <br>作者：艾蔓草 <br>来源：CSDN <br>原文：https:&#47;&#47;blog.csdn.net&#47;xhhjin&#47;article&#47;details&#47;81164076 <br>版权声明：本文为博主原创文章，转载请附上博文链接！","like_count":2},{"had_liked":false,"id":82037,"user_name":"頑 張","can_delete":false,"product_type":"c1","uid":1459378,"ip_address":"","ucode":"EA05345481FBB4","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/b2/8a3e8c28.jpg","comment_is_top":false,"comment_ctime":1554108135,"is_pvip":false,"replies":[{"id":"29812","content":"赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1554198766,"ip_address":"","comment_id":82037,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5849075431","product_id":100024501,"comment_content":"infer跑不起来的 希望这篇能帮到https:&#47;&#47;blog.csdn.net&#47;elisa1988&#47;article&#47;details&#47;46531745?utm_source=blogxgwz7","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445437,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554198766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1457909,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3e/f5/055362e6.jpg","nickname":"Yvan_Den","note":"","ucode":"2670121B3AECC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52743,"discussion_content":"404 not Found","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574082504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80962,"user_name":"drunkenMouse","can_delete":false,"product_type":"c1","uid":1454037,"ip_address":"","ucode":"AA8CEA703ECBE8","user_header":"","comment_is_top":false,"comment_ctime":1553764851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848732147","product_id":100024501,"comment_content":"关于brew，因为我之前是在很久之前就安装了，所以现在在安装infer的时候会出现部分所需插件版本过低的情况。然后我想升级插件，也需要先更新brew，但我的brew更新也是失败：Error: &#47;usr&#47;local must be writable! 错误<br><br>这种情况下，还想是使用Brew进行安装的话，需要如下操作:<br>1.卸载旧的brew<br>```<br>&#47;usr&#47;bin&#47;ruby -e &quot;$(curl -fsSL https:&#47;&#47;raw.githubusercontent.com&#47;Homebrew&#47;install&#47;master&#47;uninstall)”<br><br>```<br>2.安装新的brew<br>```<br>&#47;usr&#47;bin&#47;ruby -e &quot;$(curl -fsSL https:&#47;&#47;raw.githubusercontent.com&#47;Homebrew&#47;install&#47;master&#47;install)&quot;<br>```<br>之后，再按照infer的安装提示一步步安装。","like_count":1},{"had_liked":false,"id":80383,"user_name":"jimmy","can_delete":false,"product_type":"c1","uid":1100293,"ip_address":"","ucode":"A7838754D1B427","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/05/19f2f8a3.jpg","comment_is_top":false,"comment_ctime":1553653914,"is_pvip":false,"replies":[{"id":"29265","content":"赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553656718,"ip_address":"","comment_id":80383,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848621210","product_id":100024501,"comment_content":"oclint的一些研究 https:&#47;&#47;xiaozhuanlan.com&#47;topic&#47;9647358012","like_count":2,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444843,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553656718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79837,"user_name":"Geek_1ce2e0","can_delete":false,"product_type":"c1","uid":1454005,"ip_address":"","ucode":"77C7BE2FFEF9F7","user_header":"","comment_is_top":false,"comment_ctime":1553562478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848529774","product_id":100024501,"comment_content":"Swiftlint就行","like_count":1},{"had_liked":false,"id":79816,"user_name":"Nevermore","can_delete":false,"product_type":"c1","uid":1454179,"ip_address":"","ucode":"E6F3A4BE67A19F","user_header":"https://static001.geekbang.org/account/avatar/00/16/30/63/6c387163.jpg","comment_is_top":false,"comment_ctime":1553560884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848528180","product_id":100024501,"comment_content":"SwiftLint","like_count":1},{"had_liked":false,"id":289517,"user_name":"Mr.C","can_delete":false,"product_type":"c1","uid":1004020,"ip_address":"","ucode":"4FA9EF30A894F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/f4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1619059594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619059594","product_id":100024501,"comment_content":"您好！我将自定义的插件集成到Xcode后，发现Xcode的自动补全功能失效了，请问有解决的办法吗？谢谢！","like_count":0},{"had_liked":false,"id":277813,"user_name":"黄苗炜","can_delete":false,"product_type":"c1","uid":2253935,"ip_address":"","ucode":"37FE43DBCA2234","user_header":"https://static001.geekbang.org/account/avatar/00/22/64/6f/2ce61440.jpg","comment_is_top":false,"comment_ctime":1612600593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612600593","product_id":100024501,"comment_content":"老师，我想要git commit 提交之前，进行oclint或者infer，我想到是触发pre-commit 钩子，执行对应的脚本，输出一个html报告。但是我怎么从报告中提取信息告诉开发工程师，代码有问题，拒绝当次commit","like_count":0},{"had_liked":false,"id":275628,"user_name":"微笑美男😄","can_delete":false,"product_type":"c1","uid":1010774,"ip_address":"","ucode":"E188923723703B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/56/07920099.jpg","comment_is_top":false,"comment_ctime":1611625500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611625500","product_id":100024501,"comment_content":"老师 Infer可以用于swift吗","like_count":0},{"had_liked":false,"id":269797,"user_name":"无问西东","can_delete":false,"product_type":"c1","uid":1247696,"ip_address":"","ucode":"903803D0A5E2F8","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/d0/baa520ac.jpg","comment_is_top":false,"comment_ctime":1608789211,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1608789211","product_id":100024501,"comment_content":"用infer分析没cocoapod 管理的项目, 写个strong 的代理都检测不出来问题, cocoapod 管理后, 一直各种报错, 百度找了很久也没找到为什么, 菜鸡路过..., 有大佬路过指点一下吗?<br>","like_count":0,"discussions":[{"author":{"id":2029233,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f6/b1/f9490fec.jpg","nickname":"C__","note":"","ucode":"0C9F9CEA4B5439","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337359,"discussion_content":"看来有跟我一样菜的，今天整了一天也没跑起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608883507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262305,"user_name":"xixi","can_delete":false,"product_type":"c1","uid":1202368,"ip_address":"","ucode":"B83B85F10E0C07","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/c0/8d7dcaea.jpg","comment_is_top":false,"comment_ctime":1605689098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605689098","product_id":100024501,"comment_content":"APPCode 也有一个不错的","like_count":1},{"had_liked":false,"id":230571,"user_name":"费城","can_delete":false,"product_type":"c1","uid":1651522,"ip_address":"","ucode":"0009EA55E63DC5","user_header":"https://static001.geekbang.org/account/avatar/00/19/33/42/a981ef2e.jpg","comment_is_top":false,"comment_ctime":1593421270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593421270","product_id":100024501,"comment_content":"OCLint的最新安装使用，感觉也可以参考这个：https:&#47;&#47;juejin.im&#47;post&#47;5ce9f477f265da1b7c60f4fe#heading-4","like_count":0},{"had_liked":false,"id":111130,"user_name":"疯狂的石头","can_delete":false,"product_type":"c1","uid":1240468,"ip_address":"","ucode":"235844A1FCEE40","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/94/5058c24f.jpg","comment_is_top":false,"comment_ctime":1562485163,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1562485163","product_id":100024501,"comment_content":"遇见这个问题的童鞋<br>Error: the following clang command did not run successfully:<br>    &#47;usr&#47;local&#47;Cellar&#47;infer&#47;0.15.0&#47;lib&#47;infer&#47;facebook-clang-plugins&#47;clang&#47;install&#47;bin&#47;clang <br>去&#47;Library&#47;Developer&#47;CommandLineTools&#47;Packages这个目录，安装pkg可以解决","like_count":0},{"had_liked":false,"id":98894,"user_name":"烈人","can_delete":false,"product_type":"c1","uid":1345292,"ip_address":"","ucode":"A680CA490206A3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erhzZ8J7EZm0s94p1RTibOBzpqsbCajKYmkjX35Clfdvpv8ZdSKGicT2A4VyicIhy9yNjJjJcTeJX7rQ/132","comment_is_top":false,"comment_ctime":1559113722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559113722","product_id":100024501,"comment_content":"使用homebrew安装infer后，直接infer -- clang xx.m ，报头文件找不到。我也是无语。xcode10。然后扫描整个工程又是正常的。","like_count":0},{"had_liked":false,"id":98291,"user_name":"GODV","can_delete":false,"product_type":"c1","uid":1454163,"ip_address":"","ucode":"DB311A5D9EE770","user_header":"https://static001.geekbang.org/account/avatar/00/16/30/53/01a6c4da.jpg","comment_is_top":false,"comment_ctime":1558949076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558949076","product_id":100024501,"comment_content":"Error while trying to load a compilation database:<br>Could not auto-detect compilation database for file &quot;Hello.m&quot;<br>No compilation database found in &#47;Users&#47;***&#47;Desktop&#47;OCLintTest or any parent directory<br>用OCLint创建应该放在那个目录下，不太明白","like_count":0},{"had_liked":false,"id":89276,"user_name":"CalvinGao","can_delete":false,"product_type":"c1","uid":1509637,"ip_address":"","ucode":"A807E0E5B563A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/05/c3eb8fa9.jpg","comment_is_top":false,"comment_ctime":1556131775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556131775","product_id":100024501,"comment_content":"老师，-bash: scan-build: command not found 是什么原因呢，资源也下了，为什么会报这样的错误呢","like_count":0},{"had_liked":false,"id":87620,"user_name":"快到碗里来","can_delete":false,"product_type":"c1","uid":1454751,"ip_address":"","ucode":"D3EE7B9064DD7E","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/9f/46ac03ad.jpg","comment_is_top":false,"comment_ctime":1555643226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555643226","product_id":100024501,"comment_content":"infer扫描iOS单个文件报错 怎么回事啊","like_count":0},{"had_liked":false,"id":83756,"user_name":"青冈","can_delete":false,"product_type":"c1","uid":1080446,"ip_address":"","ucode":"8E54B939937E6D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoYBX95GZxEdKz9LQJVwohUiaRxNge5WpHRbeOC2tGc2rsdpfYKCTKdQicBn8MvSrlZTX7HY2jS3YFA/132","comment_is_top":false,"comment_ctime":1554710819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554710819","product_id":100024501,"comment_content":"不知道有人知道infer 怎么配置黑名单来过滤不想扫描的文件，如pod引入的AFN等三方库？","like_count":0},{"had_liked":false,"id":82392,"user_name":"Geek_5b16d1","can_delete":false,"product_type":"c1","uid":1456902,"ip_address":"","ucode":"5DF7488DDAC89A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLjlxsaEpOUWvD8A2IGBLppo95IlzcVPOibfuOtMk3ltCEJqwMcNriatxNv6mvkX12JqK9MKuZ61FWg/132","comment_is_top":false,"comment_ctime":1554200205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554200205","product_id":100024501,"comment_content":"infer -- xcodebuild -target JapanVillage -configuration Debug -sdk iphonesimulator<br>-bash: infer: command not found一直报找不到","like_count":0},{"had_liked":false,"id":81412,"user_name":"天山雪莲","can_delete":false,"product_type":"c1","uid":1249818,"ip_address":"","ucode":"6B3A9CDDF2AAF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/1a/0749cce3.jpg","comment_is_top":false,"comment_ctime":1553907839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553907839","product_id":100024501,"comment_content":"学习了","like_count":0},{"had_liked":false,"id":81285,"user_name":"吴小安","can_delete":false,"product_type":"c1","uid":1371398,"ip_address":"","ucode":"EDF8E04F867069","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqr5ibqxYwcSgqPA7s49MZb1vEKKXT4mPTojwiclXkJf3ug26NuzTa6A5gbicR2rAUHdEkUAn13Rr2KQ/132","comment_is_top":false,"comment_ctime":1553849190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553849190","product_id":100024501,"comment_content":"这些静态分析能分析出来的不够呢，像一些循环引用的，<br>NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock:^{<br>        &#47;&#47; Block中出现self .Block 对 self 是强引用.<br>        self.view.backgroundColor = [UIColor whiteColor];<br>        <br>    }];    &#47;&#47; 将操作添加到队列中.    &#47;&#47; self.queue 对 op 就是强引用.<br>    [self.queue addOperation:op];<br>这种比较简单的静态分析也分析不出来，还有没有其他工具可以做呢，如果项目大，这种循环引用要找出来还是很费时间","like_count":0},{"had_liked":false,"id":80957,"user_name":"大大盆子","can_delete":false,"product_type":"c1","uid":1454522,"ip_address":"","ucode":"276E3F40C82A8B","user_header":"https://static001.geekbang.org/account/avatar/00/16/31/ba/694ae5e5.jpg","comment_is_top":false,"comment_ctime":1553763921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553763921","product_id":100024501,"comment_content":"infer --keep-going --no-xcpretty -- xcodebuild -workspace xxx.xcworkspace -scheme xxx -configuration Debug -sdk iphonesimulator<br>试了好多命令，这个可以分析完成，看分析结果bugs.txt文件，里面有很多cocoapods引入的第三方库的问题，比如Masonry  RAC之类的，太多了，要怎么屏蔽掉","like_count":0},{"had_liked":false,"id":80412,"user_name":"1","can_delete":false,"product_type":"c1","uid":1456843,"ip_address":"","ucode":"00E3AFA14D2B61","user_header":"https://static001.geekbang.org/account/avatar/00/16/3a/cb/0235b9bd.jpg","comment_is_top":false,"comment_ctime":1553657703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553657703","product_id":100024501,"comment_content":"cd  &#47;Users&#47;apple&#47;Downloads&#47;infer-master&#47;examples&#47;ios_hello<br>infer -- xcodebuild -target HelloWorldApp -configuration Debug -sdk iphonesimulator<br>出现<br>xcode-select: error: tool &#39;xcodebuild&#39; requires Xcode, but active developer directory &#39;&#47;Library&#47;Developer&#47;CommandLineTools&#39; is a command line tools instance<br>是不是需要重装xcode","like_count":0},{"had_liked":false,"id":80304,"user_name":"择一城终老","can_delete":false,"product_type":"c1","uid":1454070,"ip_address":"","ucode":"3213B85A06DA6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/2f/f6/1f7dcc7c.jpg","comment_is_top":false,"comment_ctime":1553648191,"is_pvip":false,"replies":[{"id":"29267","content":"可以用用，动手试试看","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553656856,"ip_address":"","comment_id":80304,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553648191","product_id":100024501,"comment_content":"从来没有用过，感觉听天书一样，哈哈！不过大致了解了其功能，但是原理还真不好懂","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444814,"discussion_content":"可以用用，动手试试看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553656856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79869,"user_name":"lion","can_delete":false,"product_type":"c1","uid":1119389,"ip_address":"","ucode":"E99F9F9B074834","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/9d/459bdda9.jpg","comment_is_top":false,"comment_ctime":1553566300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553566300","product_id":100024501,"comment_content":"感谢老师的分享，前两天刚刚研究并尝试了OCLint，觉得效果挺不错的，老师说的规则太多我觉得可以通过禁用不想用的规则来进行规避。可定制度过高导致的易用性变差这点我还不是很能理解，希望老师能够解惑。然后后面也会尝试使用老师推荐的Infer，再来综合进行比较一下。","like_count":0},{"had_liked":false,"id":79868,"user_name":"mαnajay","can_delete":false,"product_type":"c1","uid":1067450,"ip_address":"","ucode":"6DE9FBD1BEC8AD","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/ba/23c9246a.jpg","comment_is_top":false,"comment_ctime":1553566264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553566264","product_id":100024501,"comment_content":"1. 编译 链接，然后 词法 语法分析生成 AST 语法树。 <br>2. 而像infer有生成 infer内部的中间语言，是不是也就是跨平台通用的 IR代码。<br><br>文中说的checker 的回调问题，那是否有些可以改为部分异步调用等设计，🧐","like_count":0},{"had_liked":false,"id":79830,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1553562189,"is_pvip":false,"replies":[{"id":"29481","content":"当然不是","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553869635,"ip_address":"","comment_id":79830,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553562189","product_id":100024501,"comment_content":"clang是一个c c++ oc 编译器，静态分析利用clang做代码编译层面的事情，内存泄露，强弱引用，方法调用深度等分析工作交给分析器本身。 <br><br>Clang是不是类似于oc中的runtime？","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444644,"discussion_content":"当然不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553869635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79817,"user_name":"枫林","can_delete":false,"product_type":"c1","uid":1236190,"ip_address":"","ucode":"6BB5534162CBDB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/xVcA2wzqLYZaeTo7cSA2k3cJVylT3sibmcauzQRUVpJqfxkIJetkCUV7iaVWQuSuCSBICV2AfF2AS5xl1Fgo0pcw/132","comment_is_top":false,"comment_ctime":1553560922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553560922","product_id":100024501,"comment_content":"词法分析，语法分析，生成AST","like_count":0},{"had_liked":false,"id":79811,"user_name":"lyle","can_delete":false,"product_type":"c1","uid":1247482,"ip_address":"","ucode":"B1DEC7463E5013","user_header":"","comment_is_top":false,"comment_ctime":1553560492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553560492","product_id":100024501,"comment_content":"是不是用clang把代码转换为AST,分析器通过定义好的规则在AST中来找代码的问题。","like_count":0},{"had_liked":false,"id":79801,"user_name":"谢知行","can_delete":false,"product_type":"c1","uid":1168573,"ip_address":"","ucode":"0E1BBF3B917FBC","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/bd/7ca98113.jpg","comment_is_top":false,"comment_ctime":1553559402,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1553559402","product_id":100024501,"comment_content":"提供语法树吗？","like_count":0}]}