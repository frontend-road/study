{"id":718916,"title":"02｜所有权（上）：Rust是如何管理程序中的资源的？","content":"<p>你好，我是Mike。今天我们来讲讲Rust语言设计的出发点——所有权，它也是Rust的精髓所在。</p><p>在第一节课中，我们了解了Rust语言里的值有两大类：一类是固定内存长度（简称固定尺寸）的值，比如 i32、u32、由固定尺寸的类型组成的结构体等；另一类是不固定内存长度（简称非固定尺寸）的值，比如字符串String。这两种值的本质特征完全不一样。而<strong>怎么处理这两种值的差异，往往是语言设计的差异性所在</strong>。</p><p>就拿数字类型来说，C、C++、Java 这些语言就明确定义了数字类型会占用内存中的几个字节，比如8位，也就是一个字节，16位，也就是两个字节。而JavaScript这种语言，就完全屏蔽了底层的细节，统一用一个Number表示数字。Python则给出了int整数、float浮点、complex复数三种数字类型。</p><p>Rust语言因为在设计时就定位为一门通用的编程语言（对标C++），它的应用范围很广，从最底层的嵌入式开发、OS开发，到最上层的Web应用开发，它都要兼顾。所以它的数字类型不可避免地就得暴露出具体的字节数，于是就有了i8、i16、i32、i64等类型。</p><p>前面我们说到，一种类型如果具有固定尺寸，那么它就能够在编译期做更多的分析。实际上固定尺寸类型也可以用来管理非固定尺寸类型。具体来说，Rust中的非固定尺寸类型就是靠指针或引用来指向，而指针或引用本身就是一种固定尺寸的类型。</p><!-- [[[read_end]]] --><h2>栈与堆</h2><p>现代计算机会把内存划分为很多个区。比如，二进制代码的存放区、静态数据的存放区、栈、堆等。</p><p>栈上的操作比堆高效，因为栈上内存的分配和回收只需移动栈顶指针就行了。这就决定了分配和回收时都必须精确计算这个指针的增减量，因此<strong>栈上一般放固定尺寸的值</strong>。另一方面，栈的容量也是非常有限的，因此也不适合放尺寸太大的值，比如一个有1000万个元素的数组。</p><p>那么非固定尺寸的值怎么处理呢？在计算机体系架构里面，专门在内存中拿出一大块区域来存放这类值，这个区域就叫“堆”。</p><h3>栈空间与堆空间</h3><p>在一般的程序语言设计中，栈空间都会与函数关联起来。每一个函数的调用，都会对应一个帧，也叫做 frame 栈帧，就像图片栈空间里的方块 main、fn1、fn2等。一个函数被调用，就会分配一个新的帧，函数调用结束后，这个帧就会被自动释放掉。因此<strong>栈帧是一个运行时的事物</strong>。函数中的参数、局部变量之类的资源，都会放在这个帧里面，比如图里fn2中的局部变量a，这个帧释放时，这些局部变量就会被一起回收掉。</p><p><img src=\"https://static001.geekbang.org/resource/image/46/b9/4681bb38c618a6135be39f486cc0e9b9.jpg?wh=1644x1134\" alt=\"\" title=\"栈空间与堆空间\"></p><p>函数的调用会形成层级关系，因此栈空间中的帧可能会同时存在很多个，并且在它们之间也对应地形成层级关系。如上图所示，可能的函数调用关系为，main函数中调用了函数fn1，fn1中调用了函数fn2，fn2中调用了函数fn3，fn3中调用了函数fn4，fn4调用了更深层次的其他函数。这样的话，在程序执行的某个时刻，main函数、fn1、fn2、fn3、fn4 等对应的帧副本就同时存在于栈中了。</p><p>图中右边堆空间里面的一些小圈表示堆空间中资源，也就是被分配的内存。从图中可以看到，栈空间中函数帧的局部变量是可以引用这些堆上资源的。一个栈帧中的多个局部变量可以指向堆中的多个资源，如fn3中的b指向资源A，c指向资源B；同时存在的多个栈帧中的局部变量还可以指向堆上的同一个资源，如图中的a和b，c和d；堆上的资源也可以存在引用关系，如图中的D和E。</p><p>如果一个资源没有被任何一个栈帧中的变量引用或间接引用，如图中的C，那么它实际是一个被泄漏的资源，也就是发生了内存泄漏。被泄漏的资源会一直伴随程序的运行，直到程序自身的进程被停止时，才会一起被OS回收掉。</p><p>而计算机程序内存管理的复杂性，主要就在于<strong>堆内存的管理比较复杂——既要高效，又要安全</strong>。</p><p>这里我们稍微提及了一点计算机的结构知识，你可以停下来仔细理解这张图示表达的意思，在后面我们还会经常回顾这张图。有了栈和堆的知识作为铺垫，你会更容易理解Rust中的一些特性为什么要那样设计。</p><p>下面我们回到Rust语言，继续讲Rust中另一个重要概念——可变性。</p><h2>变量与可变性</h2><p>回顾第一讲的知识，在Rust中定义一个变量，使用 <code>let variable = value;</code> 这种语法。比如 <code>let x = 10u32;</code>，就定义了变量 x。然后，10u32是一个值，它被绑定到这个变量上。</p><p>默认变量是不可变的，我们来做个实验。</p><pre><code class=\"language-plain\">fn main() {\n    let x = 5;\n    println!(\"The value of x is: {x}\");\n    x = 6;\n    println!(\"The value of x is: {x}\");\n}\n</code></pre><p>输出：</p><pre><code class=\"language-plain\">$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0384]: cannot assign twice to immutable variable `x`\n --&gt; src/main.rs:4:5\n  |\n2 |     let x = 5;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n3 |     println!(\"The value of x is: {x}\");\n4 |     x = 6;\n  |     ^^^^^ cannot assign twice to immutable variable\n</code></pre><p>Rust默认这样做是为了减少一些很低级的Bug。假如默认可以改的话，如果你在一个代码量很大而且离定义变量很远的某个分支语句里面修改了这个变量的值，然后在后面某个函数调用里面又用到了它，结果导致程序行为与期望不符，这时你很难看出来问题出在哪儿。这种低级错误能不犯就不犯，Rust干脆帮你禁用了这种方式。</p><p>但是下面这样做是可以的。</p><pre><code class=\"language-plain\">fn main() {\n    let x = 5;\n    println!(\"The value of x is: {x}\");\n    let x = 6;    // 注意这里，重新使用了 let 来定义新变量\n    println!(\"The value of x is: {x}\");\n}\n</code></pre><p>这种方式在Rust中叫做变量的Shadowing。意思很好理解，就是定义了一个新的变量名，只不过这个变量名和老的相同。原来那个变量就被遮盖起来了，访问不到了。这种方式最大的用处是程序员不用再去费力地想另一个名字了！变量的Shadow甚至支持新的变量的类型和原来的不一样。</p><p>比如：</p><pre><code class=\"language-plain\">fn main() {\n    let a = 10u32;\n    let a = 'a';\n    println!(\"{}\", a);\n}\n</code></pre><p>那如果我们要修改变量的值应该怎么做呢？只需要在变量名前面加一个mut就可以声明一个变量为可以修改内容的。</p><pre><code class=\"language-plain\">let mut x = 10u32;\n</code></pre><p>例子：</p><pre><code class=\"language-plain\">fn main() {\n    let mut x = 5;\n    println!(\"The value of x is: {x}\");\n    x = 6;\n    println!(\"The value of x is: {x}\");\n}\n// 输出 \nThe value of x is: 5\nThe value of x is: 6\n</code></pre><p>注意，值的改变只能在同一种类型中变化，在变量x定义的时候，就已经确定了变量x的类型为数字了，你可以试试将其改成字符串，看会报什么错误。</p><p>这里你可以回过头去对比一下，可修改变量和变量的Shadow的不同之处。</p><p>一个变量，其内容是否可变，被称作这个变量的<strong>可变性</strong>（mutability）。mut 叫作可变性修饰符（modifier）。</p><p>可能你会非常疑惑，变量不就应该是会变化的吗? 既然默认不可变，为什么要称其为变量呢？其实上面一段我已经回答了这个问题，Rust中变量的可变性是一种潜力，只要它有可能会变化，那么就可以称之为变量。而Rust给这种潜力加了一道开关，<strong>当你想让这个变量的可变性暴露出来的时候，就在变量名前面明确地加个mut修饰符。</strong></p><p>可以看到，变量名加了mut，多打了4个字符，这实际是在代码中留下了一种足迹。也就是说给了程序员一个信息，当你自己或别的程序员在读到这个变量的定义时，他会知道，后面一定会修改这个变量，因为如果你后面没修改它，Rust编译器会提示你把这个mut去掉。</p><p>这种设计还有一个好处，那就是减少滥用概率。我们在这里构造一个编程语言界的墨菲定律，<strong>如果一个特性不太利于程序的健壮性，但是很好用，滥用的成本非常低，那么它一定会被滥用</strong>。</p><p>比如 TypeScript 中的 any 类型，有时写TS代码懒得去设计类型，直接就用any类型了，反正“先跑通了再说”。结果就是最后项目完成了，代码里面any满天飞，TS的设计初衷被抛至脑后。偷懒是人的天性，Rust接受了这种天性，让你想要修改一个变量的时候，需要多付出点成本，也就是多打4个字符。</p><p>另一个例子是 JS 中的 var 和 let，都是三个字符，敲的字符数一样，成本一样，结果就是在语言层面并不能驱动程序员往好的实践方面靠。有人会辩称，在这些语言中会有推荐规范或强制要求，要求你按好的实践方式写。不过在实际项目中，由于进度等问题，这些规范总是很难完全贯彻下去，即使贯彻下去也很难达到预期效果，这方面已有太多案例了。因为那些都是补救措施，哪有从语言层面强制约束你做来得统一。</p><h3>变量的类型</h3><p>值是有类型的，比如 10u32，它就是一个u32类型的数字。一旦一个变量绑定了一个值，或者说一个值被绑定到了一个变量上，那么这个变量就被指定为这种值的类型。比如 <code>let x = 10u32;</code> 编译器会自动推导出变量x的类型为 u32。完整的写法就是 <code>let x: u32 = 10u32;</code>。</p><p>此外还有一种方式，就是直接先指定变量的类型，然后把一个值绑定上去，比如 <code>let x: u32 = 10;</code>。这种方式更好，<strong>它能说明你在写这句代码的时候就已经对它做了一个架构上的规划和设计</strong>，这种形式能帮助我们在编译阶段阻止一些错误。</p><p>比如输入下面这段代码：</p><pre><code class=\"language-plain\">fn main() {\n    let a: u8 = 323232;\n    println!(\"{a}\");\n}\n</code></pre><p>编译器就会报错，指出u8类型装不下这么大的一个数字。</p><pre><code class=\"language-plain\">error: literal out of range for `u8`\n --&gt; src/main.rs:5:17\n  |\n5 |     let a: u8 = 323232;\n  |                 ^^^^^^\n  |\n  = note: the literal `323232` does not fit into the type `u8` whose range is `0..=255`\n</code></pre><p>看到这个错误，你是不是感觉Rust特别贴心。同样的代码，你可以放在其他语言中实现，做一下对比。</p><p><strong>所有的变量都应该具有明确的类型是Rust程序的基本设计。</strong>当然其他语言中也有类型，不同语言对类型重视的程度不一样，这取决于语言自身的设计定位。</p><p>好了，变量的概念我们先解析到这里，下面我们来看一个Rust中的“奇怪”行为。</p><h3>Rust中“奇怪”的行为</h3><p>我们先来看一个例子。</p><pre><code class=\"language-plain\">fn main() {\n    let a = 10u32;\n    let b = a;\n    println!(\"{a}\");\n    println!(\"{b}\");\n}\n</code></pre><p>很简单，它打印出：</p><pre><code class=\"language-plain\">10\n10\n</code></pre><p>然后我们再来看字符串的行为，你猜一下程序会输出什么。</p><pre><code class=\"language-plain\">fn main() {\n    let s1 = String::from(\"I am a superman.\");\n    let s2 = s1;\n    println!(\"{s1}\");\n    println!(\"{s2}\");\n}\n</code></pre><p>是两行“I am a superman”吗？反正在其他语言中是这样的。</p><p>结果在Rust中不是，编译器给出了出错信息，我们来看看。</p><pre><code class=\"language-plain\">   Compiling playground v0.0.1 (/playground)\nerror[E0382]: borrow of moved value: `s1`\n// 借用了移动后的值 `s1`\n --&gt; src/main.rs:4:15\n  |\n2 |     let s1 = String::from(\"I am a superman.\");\n  |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait\n// 移动发生了，因为 `s1` 的类型是 `String`，而这种类型并没有实现 `Copy` trait.\"。\n3 |     let s2 = s1;\n  |              -- value moved here\n// 在这里值移动了。\n4 |     println!(\"{s1}\");\n  |               ^^^^ value borrowed here after move\n// 值在被移动后在这里被借用\n  |\n  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider cloning the value if the performance cost is acceptable\n// 如果性能成本可以接受的话，考虑克隆这个值\n  |\n3 |     let s2 = s1.clone();\n  |                ++++++++\n</code></pre><p>既然给出了修改建议，那我们直接照着代码建议改一下试试。</p><pre><code class=\"language-plain\">fn main() {\n    let s1 = String::from(\"I am a superman.\");\n    let s2 = s1.clone();\n    println!(\"{s1}\");\n    println!(\"{s2}\");\n}\n</code></pre><p>好了，这下输出我们预期的结果了。</p><pre><code class=\"language-plain\">I am a superman.\nI am a superman.\n</code></pre><p>Rust中的字符串为何有如此奇怪的行为呢？</p><h2>所有权</h2><p>首先，我们看到在Rust中，字符串的行为好像与u32这种数字类型不一样。前面我们说过，u32这种类型是固定尺寸类型，而String是非固定尺寸类型。一般来说，对于固定尺寸类型，会默认放在栈上；而非固定尺寸类型，会默认创建在堆上，成为堆上的一个资源，然后在栈上用一个局部变量来指向它，如代码中的s1。</p><p>在将一个变量赋值给另一个变量的时候，不同语言对底层细节的处理不一样。这里我们拿Java举例。前面我们说过，局部变量都是定义在栈帧中的，Java也是一样。Java语言对于int这类固定尺寸类型，在复制给另一个变量的时候，会直接复制它的值。在面对Object这种复杂对象的时候，默认只会复制这个Object的引用给另一个变量。这个引用的值（内存地址）就存在栈上的局部变量里面。</p><p>为什么会这样设计呢？因为如果那个Object占用的内存很大，每一次重新赋值，就把那个对象重新拷贝一次，也就是完全克隆，是非常低效的，凡是脑筋正常的语言都不会那样干。所以在用Java编程时，它实际上是隐藏了对象<strong>引用的复制</strong>这个细节。</p><p>回到Rust，我们看到对于u32这种固定尺寸类型来说，Rust与Java也是同样的处理，直接在栈上进行内容的拷贝。而对于字符串这种动态长度的类型来说，在变量的再赋值上，Rust除了拷贝字符串的引用外，实际还做了更多事情。具体是什么事情呢？我们先来看一下修改后的例子。</p><pre><code class=\"language-plain\">fn main() {\n    let s1 = String::from(\"I am a superman.\");\n    let s2 = s1;\n    //println!(\"{s1}\");\n    println!(\"{s2}\");\n}\n</code></pre><p>这个例子，就能正常打印。</p><pre><code class=\"language-plain\">I am a superman.\n</code></pre><p>对比之后，我们发现 <code>let s2 = s1;</code> 语句执行后，s2可以使用，而s1不能再使用了。也就是说，在Rust里面，s1把内容“复制”给s2后，s2可用，s1不能用了！</p><p>从代码层面我们也可以说，s1把值（资源）“移动”给了s2。既然是移动了，那原来的变量就没有那个值了。请仔细体会这里与Java的不同之处。Java默认做了引用的拷贝，并且新旧两个变量同时指向原来那个对象。而Rust不一样，<strong>Rust虽然也是把字符串的引用由s1拷贝到了s2，但是只保留了最新的s2到字符串的指向，同时却把s1到字符串的指向给“抹去”了。</strong>s1之后都处于一种“不可用”的状态，直到函数结束。这就是Rust编译器做的那个“更多”的部分。</p><p>下面的图示展示了这两种行为上的差异。</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/3a/8a43cd1ccbf91f6e1f6c4813fc7e453a.jpg?wh=1644x950\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/e7/fa/e726052e2e8f4895455c5a2e93473dfa.jpg?wh=1644x956\" alt=\"\"></p><p>好奇怪呀！Rust怎么会这样设计呢？</p><p>其实这正是Rust从头开始梳理整个软件体系的地方，剑指一个目标：<strong>内存安全</strong>。</p><h3>所有权</h3><p>长久以来，计算机领域最聪明的大脑都在探索如何写出更安全的程序，为此建立了各种理论、模式、模型。而Rust不走寻常路，它采用了一种全新的思路，利用所有权来管理内存资源，保证内存安全。接下来我们就一起来好好品鉴一下这个独特的思路。此刻<strong>，请你先卸下之前固有的思维，将脑袋放空一下</strong>。</p><p>Rust明确了所有权的概念，值也可以叫资源，所有权就是拥有资源的权利。一个变量拥有一个资源的所有权，那它就要负责那个资源的回收、释放。<strong>Rust基于所有权定义出发，推导出了整个世界</strong>。</p><p>所有权的基础是三条定义。</p><ol>\n<li>Rust中，每一个值都有一个所有者。</li>\n<li>任何一个时刻，一个值只有一个所有者。</li>\n<li>当所有者所在作用域（scope）结束的时候，其管理的值会被一起释放掉。</li>\n</ol><p>这三条规则涉及两个概念：<strong>所有者和作用域</strong>。</p><p>所谓所有者，在代码里就用变量表示。而变量的作用域，就是变量有效（valid）的那个代码区间。在Rust中，一个所有权型变量的作用域，简单来说就是它定义时所在的那个最里层的花括号括起的部分，从变量创建时开始，到花括号结束的地方。</p><p>比如：</p><pre><code class=\"language-plain\">fn main() {    \n    let s = String::from(\"hello\");\n    // do stuff with s\n}  // 变量s的作用域到这里结束\n\nfn main() {    \n    let a = 1u32;\n    {\n        let s = String::from(\"hello\"); \n    }  // 变量s的作用域到这里结束\n    // xxxx\n    \n}  // 变量a的作用域到这里结束\n</code></pre><p>变量在其作用域内是有效的，离开作用域就无效了。</p><p>好，理解了这一点，我们现在尝试用所有权规则去翻新一下对前面例子的理解。</p><pre><code class=\"language-plain\">fn main() {\n    let a = 10u32;\n    let b = a;\n    println!(\"{a}\");\n    println!(\"{b}\");\n}\n</code></pre><p>在这个例子中，a具有对值 10u32的所有权。执行 <code>let b = a</code> 的时候，把值 10u32 复制了一份，b具有对这个新的10u32值的所有权。当main函数结束的时候，a、b两个变量就离开了作用域，其对应的两个10u32，就都被回收了。这里是栈帧结束，栈帧内存被回收，局部变量位于栈帧中，所以它们所占用的内存就被回收了。</p><p>再来看一个字符串的例子。</p><pre><code class=\"language-plain\">fn main() {\n    let s1 = String::from(\"I am a superman.\");\n    println!(\"{s1}\");\n}\n</code></pre><p>局部变量s1拥有这个字符串的所有权。s1的作用域从定义到开始，直到花括号结束。s1（栈帧上的局部变量）离开作用域时，变量s1上绑定的内存资源（字符串）就被回收掉了。注意，这里发生的事情是，栈帧中的局部变量离开作用域了，顺带要求堆内存中的字符串资源被回收。之所以能够做到这一点，是因为这个堆中的字符串资源被栈帧中的局部变量所指向了的。</p><p>而从Rust的语法层面看起来，就是变量s1对那个字符串拥有所有权。所以s1离开作用域的时候，那个资源就一起被回收了。这看起来好像是一个自动的过程，我们并没有像C语言中那样，需要手动调用free()函数去释放堆中的字符串资源。</p><p>这种<strong>堆内存资源随着关联的栈上局部变量一起被回收</strong>的内存管理特性，叫作 RAII（Resource Acquisition Is Initialization）。它实际不是Rust的原创，而是C++创造的。如果你学过C的话，可以对比一下C中的malloc()分配堆内存的方式，在分配堆内存后，C语言里面必须由程序员手动在后续的代码中使用free()来释放堆内存中的资源。而有了RAII特性后，我们不需要手动写free()，因此可以认为RAII内存管理方式是一个相当大的进步。</p><p>有了所有权的知识后，我们再回过头来分析上面那个例子。</p><pre><code class=\"language-plain\">fn main() {\n    let s1 = String::from(\"I am a superman.\");\n    let s2 = s1;\n    //println!(\"{s1}\");\n    println!(\"{s2}\");\n}\n</code></pre><p>变量s1持有这个字符串的所有权。s1对字符串的所有权从第2行定义时开始，到 <code>let s2 = s1</code> 执行后结束。这一行执行后，s2持有那个字符串的所有权。而此时s1处于什么状态呢？处于一种不可用的状态，或者叫无效状态（invalid），这个状态是由Rust编译器在编译阶段帮我们管理的，我们只需要从所有权模型去理解它，而不需要操心细节。Rustc小助手把这些事情给我们打理得明明白白的。</p><p>然后直到花括号结束，s2及s2所拥有的字符串内存，就被回收掉了，s1所对应的那个局部变量的内存空间也一并被回收了。</p><p><strong>所有权是Rust语言的出发点，我们写的任何Rust程序，都必须遵循这套规则。</strong></p><p>需要注意的一点是，所有权其实是内存结构之上的更上层概念，并不是说只有在堆中分配的资源才有所有权。实际上，栈上的资源也是有所有权的。所有权这个概念实际上屏蔽了底层内存结构的细节，让我们可以站在一个新的层次上更有效地对问题进行建模。</p><p>这个思维一定要注意，Rust语言中并不是所有的分析都需要归结到内存结构上去才能搞清楚，思维一直停留在内存结构上，有时会妨碍你的抽象建模能力，就像你精通量子力学不一定能当一个好的建筑师，所以这一点尤其要注意。</p><h3>使用所有权书写函数</h3><p>下面我们来看一下，基于所有权规则，函数的写法会变成什么样。</p><pre><code class=\"language-plain\">fn foo(s: String) {\n    println!(\"{s}\");\n}\n\nfn main() {\n    let s1 = String::from(\"I am a superman.\");\n    foo(s1);\n}\n</code></pre><p>输出：</p><pre><code class=\"language-plain\">I am a superman.\n</code></pre><p>没问题。</p><p>稍微改动一下例子，我们想在函数调用结束后，在外面再打印一下s1的值。</p><pre><code class=\"language-plain\">fn foo(s: String) {\n    println!(\"{s}\");\n}\n\nfn main() {\n    let s1 = String::from(\"I am a superman.\");\n    foo(s1);\n    println!(\"{s1}\");    // 这里加了一行\n}\n</code></pre><p>咦，编译出错了。提示：</p><pre><code class=\"language-plain\">error[E0382]: borrow of moved value: `s1`\n --&gt; src/main.rs:8:16\n  |\n6 |     let s1 = String::from(\"I am a superman.\");\n  |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait\n7 |     foo(s1);\n  |         -- value moved here\n8 |     println!(\"{s1}\");\n  |                ^^ value borrowed here after move\n  |\nnote: consider changing this parameter type in function `foo` to borrow instead if owning the value isn't necessary\n --&gt; src/main.rs:1:11\n  |\n1 | fn foo(s: String) {\n  |    ---    ^^^^^^ this parameter takes ownership of the value\n  |    |\n  |    in this function\n  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider cloning the value if the performance cost is acceptable\n  |\n7 |     foo(s1.clone());\n  |           ++++++++\n</code></pre><p>这个例子在其他语言中，一般是不会有问题的。foo函数也许会修改字符串的值，在外面重新打印的时候，会打印出新的值。但是，这其实是一种相当隐晦的设计模式，可能会造成一些错误（在下一讲我们会讲到），而Rust阻止了这种模式。</p><p>这个例子代码的提示与前面差不多，就是说s1所有权已经被移动进函数里面了，不能在移动后再使用了。</p><p>注意提示中的这一行：</p><pre><code class=\"language-plain\">1 | fn foo(s: String) {\n  |    ---    ^^^^^^ this parameter takes ownership of the value\n</code></pre><p>函数的参数s获取了这个值的所有权。函数参数是这个函数的一个局部变量，它在这个函数栈帧结束的时候会被回收，因此这个字符串在这个函数调用结束后，就已经被回收了，这就是我们无法再打印这个字符串的原因。</p><p>同样我们再看一个上面例子的变形。</p><pre><code class=\"language-plain\">fn foo(s: String) {\n    println!(\"{s}\");\n}\n\nfn main() {\n    let s1 = String::from(\"I am a superman.\");\n    foo(s1);\n    foo(s1);\n}\n</code></pre><p>我们简单地想调用两次 <code>foo()</code> 函数都做不到，原因跟前面是一样的。这就是Rust有点反直觉的地方，也是令很多初学者崩溃的地方。原因我们再重复一下，一个苹果，你给了别人，那你就没有了。一个知识，我教给了你，我们都会得到。Rust的编程模型默认选择了前者，而以往的主流编程语言默认选择了后者。</p><p>回到前面例子，那我们后面的代码还想用s1，该怎么办？</p><p>可以这样，既然能把所有权移动到函数里面，也当然能把所有权转移出来。</p><pre><code class=\"language-plain\">fn foo(s: String) -&gt; String {\n    println!(\"{s}\");\n    s\n}\n\nfn main() {\n    let s1 = String::from(\"I am a superman.\");\n    let s1 = foo(s1);\n    println!(\"{s1}\");\n}\n</code></pre><p>这样就输出了结果：</p><pre><code class=\"language-plain\">I am a superman.\nI am a superman.\n</code></pre><p>我们适配了Rust的所有权规则，实现了我们期望的函数调用效果。</p><h3>移动还是复制</h3><p>前面讲到，u32这种类型在做变量的再赋值的时候，是做了复制所有权的操作。而String这种类型在做变量再赋值的时候，是做了移动所有权的操作。那么，在Rust中哪些类型默认是做移动所有权操作，哪些类型默认是做复制所有权操作呢？</p><p>默认做复制所有权的操作的有7种。</p><ul>\n<li>所有的整数类型，比如u32；</li>\n<li>布尔类型bool；</li>\n<li>浮点数类型，比如f32、f64；</li>\n<li>字符类型char；</li>\n<li>由以上类型组成的元组类型 tuple，如（i32, i32, char）；</li>\n<li>由以上类型组成的数组类型 array，如 [9; 100]；</li>\n<li>不可变引用类型&amp;。</li>\n</ul><p>其他类型默认都是做移动所有权的操作。</p><h2>小结</h2><p>所有权是Rust语言中非常重要的一个概念，用于<strong>管理程序中使用的资源</strong>。这些资源可以是堆上的动态分配的内存资源，也可以是栈上的内存资源，或者是其他的系统资源，比如IO资源。所有权通过把语句绑定在变量上，封装了栈和堆的实现细节。对于固定尺寸基础类型（小尺寸类型），它们的值默认是可复制的，这主要是为了编程方便。对于非固定尺寸类型或大尺寸类型的变量再赋值时，默认使用移动操作。除非显式地clone，否则它只保持一份所有权。</p><p>所有权可以被转移，一旦所有权被转移，原来持有该资源的变量就失效了。变量的作用域是在最近的花括号位置内。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/37/7f78de64bb2756d7137124ce18886a37.jpg?wh=2178x1697\" alt=\"\"></p><h2>思考题</h2><p>最后我来考一考你。</p><ol>\n<li>下面的示例将输出什么？</li>\n</ol><pre><code class=\"language-plain\">fn main() {\n&nbsp; &nbsp; let s = \"I am a superman.\".to_string();\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; for i in 1..10 {\n&nbsp; &nbsp; &nbsp; &nbsp; let tmp_s = s;\n&nbsp; &nbsp; &nbsp; &nbsp; println!(\"s is {}\", tmp_s);\n&nbsp; &nbsp; }\n}\n</code></pre><ol start=\"2\">\n<li>一个由固定尺寸类型组成的结构体变量，如下面示例中的Point类型，在赋值给另一个变量时，采用的是移动方式还是复制方式？</li>\n</ol><pre><code class=\"language-plain\">struct Point {\n  x: i64,\n  y: i64,\n  z: i64\n}\n</code></pre><p>欢迎你把你思考后的答案分享到评论区，和我一起讨论，也欢迎你把这节课分享给需要的朋友，邀他一起学习，我们下节课再见！</p>","comments":[{"had_liked":false,"id":382828,"user_name":"二夕","can_delete":false,"product_type":"c1","uid":2907644,"ip_address":"浙江","ucode":"2587A8DE51F629","user_header":"https://static001.geekbang.org/account/avatar/00/2c/5d/fc/2e5e2a90.jpg","comment_is_top":false,"comment_ctime":1698074378,"is_pvip":false,"replies":[{"id":139423,"content":"真棒！","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698119118,"ip_address":"重庆","comment_id":382828,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"思考题 1: 无法通过编译，可以将第 5 行代码修改为：let tmp_s = s.clone();\n思考题 2: 由于 Point 没有实现 Copy trait，所以在赋值过程中会产生 Move。 ","like_count":28,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630113,"discussion_content":"真棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2699481,"avatar":"https://static001.geekbang.org/account/avatar/00/29/30/d9/323ba366.jpg","nickname":"水不要鱼","note":"","ucode":"40F9B2BA2DD9C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":630838,"discussion_content":"老师，我又有问题了哈哈，Point是由三个i64字段组成的，所以属于固定尺寸的类型，按理说可以分配在栈上，然后 b = a 这种赋值的时候就 copy 一份数据，还是说 let p = Point {...} 这种初始化的时候 p 是指向了堆上的数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698943055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630113,"ip_address":"广东","group_id":0},"score":630838,"extra":""},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2699481,"avatar":"https://static001.geekbang.org/account/avatar/00/29/30/d9/323ba366.jpg","nickname":"水不要鱼","note":"","ucode":"40F9B2BA2DD9C7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647748,"discussion_content":"好问题  +1\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1720575716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630838,"ip_address":"广东","group_id":0},"score":647748,"extra":""}]}]},{"had_liked":false,"id":383295,"user_name":"古明地觉","can_delete":false,"product_type":"c1","uid":1528298,"ip_address":"北京","ucode":"31DA063A17FC27","user_header":"https://static001.geekbang.org/account/avatar/00/17/51/ea/d9a83bb3.jpg","comment_is_top":false,"comment_ctime":1698825517,"is_pvip":false,"replies":[{"id":139636,"content":"思考得非常棒。我的理解是结构体，元组这种属于异质复合结构，每个元素都有单独的类型指定。array，Vec属于同质连续结构。可能语言设计者认为后者比前者更紧致，随意置某个位置无效的话会引起更多麻烦，比如sort操作咋办？迭代操作咋办？ 估计是有这方面的考虑从而禁止把所有权从数组和动态数组中移动出来。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698848105,"ip_address":"重庆","comment_id":383295,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"好奇一个问题：\nfn main() {\n    let s1 = &quot;hello world&quot;.to_string();\n    let s2 = s1;  &#47;&#47; s1 不再有效，它的值发生了移动\n}\n显然上面代码很好理解，如果换一种方式。\nfn main() {\n    let arr = [&quot;hello world&quot;.to_string()];\n    let s = arr[0];  &#47;&#47; 报错：String 没有实现 Copy trait\n}\n这里报错了，按理说不是应该会将所有权从 arr[0] 转移到 s 上面吗？但是 Rust 却提示 cannot move。我的理解是这样的，因为像数组这样的结构如果有效，那么它内部的每一个成员必须都要有效。如果数组中的某个元素发生了移动，那么会导致整个数组不可用，于是为了避免这种情况，Rust 要求数组里面的元素必须是可 Copy 的。如果需要转移所有权，那么 Rust 编译器就报错。否则会给用户造成一个错觉，好端端的数组为啥就不能用了。\n\n如果用这个理论来解释的话，那么就又产生了一个问题。\nfn main() {\n    &#47;&#47; 元素\n    let arr = (&quot;hello world&quot;.to_string(), &quot;hello world&quot;.to_string());\n    let s = arr.0;  &#47;&#47; 此处不报错\n    &#47;&#47; arr.1 可以正常打印\n    println!(&quot;{}&quot;, arr.1);  &#47;&#47; hello world\n    &#47;&#47; 但打印 arr.0 和打印 arr 则报错，提示发生了移动\n}\n所以我很好奇，为啥会产生这种情况。为什么元组（还有结构体）允许局部的元素发生移动，但数组却不可以呢？还请老师帮忙解答一下","like_count":12,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630761,"discussion_content":"思考得非常棒。我的理解是结构体，元组这种属于异质复合结构，每个元素都有单独的类型指定。array，Vec属于同质连续结构。可能语言设计者认为后者比前者更紧致，随意置某个位置无效的话会引起更多麻烦，比如sort操作咋办？迭代操作咋办？ 估计是有这方面的考虑从而禁止把所有权从数组和动态数组中移动出来。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1698848105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071909,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/25/d78cc1fe.jpg","nickname":"都市夜归人","note":"","ucode":"DFF59BE3D80B42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631460,"discussion_content":"在 Rust 语言中，arr 是一个包含一个 String 类型元素的数组。而在 let s = arr[0]; 这行代码中，Rust 无法确定 arr[0] 的所有权应该如何处理，因此会报错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699584840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382875,"user_name":"Geek_147053","can_delete":false,"product_type":"c1","uid":2860190,"ip_address":"北京","ucode":"2182C8BE2AFD89","user_header":"","comment_is_top":false,"comment_ctime":1698139574,"is_pvip":false,"replies":[{"id":139445,"content":"加油！一直跟下去，不会让你失望的","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1698139782,"ip_address":"北京","comment_id":382875,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"看完了刚更新的前2篇，感觉挺适合新手的，虽然长，但看下来一点儿也不枯燥，讲的挺有意思","like_count":7,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630149,"discussion_content":"加油！一直跟下去，不会让你失望的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698139782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382861,"user_name":"duwoodly","can_delete":false,"product_type":"c1","uid":2020398,"ip_address":"重庆","ucode":"12F7BFCB78DB0E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d4/2e/d478a412.jpg","comment_is_top":false,"comment_ctime":1698127393,"is_pvip":false,"replies":[{"id":139482,"content":"👍很棒","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698208741,"ip_address":"重庆","comment_id":382861,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"1. String类型，实际数据在堆上存储。 let tmp_s = s 循环第一次的时候，会移动所有权，s在栈上的内存虽然还在，但是被编译器视为无效变量或无效状态，所以第二次及以后的循环就不能实验变量s了，编译器会报错。\n2. 结构体类型默认没有实现Copy trait, 赋值过程也会移动所有权。\n    当然从底层看，这个Point结构体的成员都是基本类型（基本类型实现了Copy）, 所以这个结构体的值是保存在栈上的，所以赋值操作，实际上底层是在栈上完整拷贝了一次Point结构体，但是编译器依然会把原来的Point结构体变量视为无效状态或无效变量。","like_count":6,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630245,"discussion_content":"👍很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698208741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382874,"user_name":"Geek_582a5d","can_delete":false,"product_type":"c1","uid":3249192,"ip_address":"上海","ucode":"BAFF20A97AA2CB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlnTfD7ZMqTydjgvNJWfOwEPjutftkuCtvjflHj10MtI0B3d4cvibCkAkPzoyqw3MWDnY1ib9IKgPg/132","comment_is_top":false,"comment_ctime":1698137524,"is_pvip":false,"replies":[{"id":139437,"content":"如果觉得有帮助的话，欢迎转发给身边的朋友哦，你一票我一票 Mike 老师要出道！","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1698138130,"ip_address":"北京","comment_id":382874,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"目前看来感觉看着最舒服的rust相关系列文章了，催催更新。这个系列会持续跟进，感谢作者。","like_count":4,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630140,"discussion_content":"如果觉得有帮助的话，欢迎转发给身边的朋友哦，你一票我一票 Mike 老师要出道！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1698138130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383382,"user_name":"水不要鱼","can_delete":false,"product_type":"c1","uid":2699481,"ip_address":"广东","ucode":"40F9B2BA2DD9C7","user_header":"https://static001.geekbang.org/account/avatar/00/29/30/d9/323ba366.jpg","comment_is_top":false,"comment_ctime":1698942567,"is_pvip":false,"replies":[{"id":139666,"content":"你描述得很棒。所有权的背后意义是 资源管理。谁能掌控资源的管理谁就有所有权，然后是有所有权的变量要负责资源的释放。你理解到这一点就云开雾散了。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698979587,"ip_address":"重庆","comment_id":383382,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"老师，关于移动还是复制的那段话，我有个迷惑。。我能不能理解其实都是复制了栈上的数据，比如\na = 10u32\nb = a\n由于 10u32 是放栈上的，实际上是把 a 的数据复制了一份，然后 b 绑定了这份数据，因为数据是独立的，所以所有权也是独立的，a 和 b 各自拥有各自数据的所有权。\n而 String 也是一样，把 a 的数据复制了一份到 b 上，但是这时候 a 的数据实际上是堆上数据的地址，所以复制的数据是这个堆上数据的地址，而不是堆上的数据，所以实际数据只有一份，所有权也是一份，这时候 b = a 就会把这一份所有权同时交给 b","like_count":3,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630857,"discussion_content":"你描述得很棒。所有权的背后意义是 资源管理。谁能掌控资源的管理谁就有所有权，然后是有所有权的变量要负责资源的释放。你理解到这一点就云开雾散了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698979587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382976,"user_name":"长林啊","can_delete":false,"product_type":"c1","uid":1707743,"ip_address":"四川","ucode":"B75CB4919FF25A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/df/a64b3146.jpg","comment_is_top":false,"comment_ctime":1698248815,"is_pvip":false,"replies":[{"id":139501,"content":"对的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698327666,"ip_address":"重庆","comment_id":382976,"utype":1}],"discussion_count":2,"race_medal":1,"score":2,"product_id":100626901,"comment_content":"思考题 1：编译报错；两处错误：变量 i 没有使用和 s 的所有权；\n修改后如下：\nfn main() {\n    let s = &quot;I am a superman.&quot;.to_string();\n    \n    for _ in 1..10 {\n        let tmp_s = s.clone();\n        println!(&quot;s is {}&quot;, tmp_s);\n    }\n}\n\n思考题 2：移动；如果结构体中包含实现了 Copy trait，则会进行复制而不是移动","like_count":3,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630337,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698327666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2903392,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/4d/60/1aa99bd9.jpg","nickname":"warning","note":"","ucode":"632A62C2756A50","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630460,"discussion_content":"help: if this is intentional, prefix it with an underscore: `_i`。根据提示，如果你在此处未使用 i 但又想保留下来的话可以在前面加上下划线 &#34;_&#34;，来告诉大家此处你是有意不使用 i","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1698484554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382857,"user_name":"刘永臣","can_delete":false,"product_type":"c1","uid":2033098,"ip_address":"北京","ucode":"31426CE31CA514","user_header":"https://static001.geekbang.org/account/avatar/00/1f/05/ca/eefef69b.jpg","comment_is_top":false,"comment_ctime":1698126485,"is_pvip":false,"replies":[{"id":139480,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698208705,"ip_address":"重庆","comment_id":382857,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"问题1：本来以为坑在s 因为s在第一次遍历时已经转移了，所以第二次遍历肯定会出错，所以编译器会报错，没有问题；但是实际上循环条件中i 会被多次修改，所以声明i时也应该增加mut；\n\n问题2：结构体数据复合结构，所以对其进行赋值是实际上进行了所有权的转移。","like_count":3,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630243,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698208705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382956,"user_name":"Test","can_delete":false,"product_type":"c1","uid":3567895,"ip_address":"北京","ucode":"6C322032B2AC04","user_header":"https://static001.geekbang.org/account/avatar/00/36/71/17/ce7d94ba.jpg","comment_is_top":false,"comment_ctime":1698229647,"is_pvip":false,"replies":[{"id":139498,"content":"默认做复制所有权的操作： \n裸指针类型。\n这句话从哪里来的？文章里面没有。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698327572,"ip_address":"重庆","comment_id":382956,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"默认做复制所有权的操作： \n裸指针类型\n\n裸指针类型也是copy语义吧","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630334,"discussion_content":"默认做复制所有权的操作： \n裸指针类型。\n这句话从哪里来的？文章里面没有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698327572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1828290,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/x54MaKxBBJj2qVqV55TNk8sE4StE94xyyEtPywty9Oy9gF8lkHCt5cBCBhYgJjGxkzMtluibiaaH8F9xWX2Glpgw/132","nickname":"ilookers","note":"","ucode":"CAD6557DAC946D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637993,"discussion_content":"= 的默认行为是转移所有权，只有=右边的操作数实现了 Copy Trait，才会是复制操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709188255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3567895,"avatar":"https://static001.geekbang.org/account/avatar/00/36/71/17/ce7d94ba.jpg","nickname":"Test","note":"","ucode":"6C322032B2AC04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630490,"discussion_content":"文章里没有，是不是要加上这个“裸指针类型”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698562365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382867,"user_name":"咖啡☕️","can_delete":false,"product_type":"c1","uid":2891028,"ip_address":"上海","ucode":"30BC47D4A47870","user_header":"https://static001.geekbang.org/account/avatar/00/2c/1d/14/fdb57ac7.jpg","comment_is_top":false,"comment_ctime":1698131550,"is_pvip":false,"replies":[{"id":139483,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698208747,"ip_address":"重庆","comment_id":382867,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"问题 1\n改成\n```\nlet tmp_s = &amp;s;\n```\n即可","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630246,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698208748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386980,"user_name":"linkscue","can_delete":false,"product_type":"c1","uid":1318623,"ip_address":"广东","ucode":"A4D94AEE999BD3","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/df/be9ecb4e.jpg","comment_is_top":false,"comment_ctime":1706072829,"is_pvip":false,"replies":[{"id":141083,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1706143096,"ip_address":"重庆","comment_id":386980,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"验证了一下“一个由固定尺寸类型组成的结构体变量”，是使用移动的所有权的形式：\n\n#[derive(Debug)]\nstruct Point {\n    x: i64,\n    y: i64,\n    z: i64,\n}\n\nfn main() {\n    let p = Point { x: 1, y: 2, z: 3 };\n    for i in 1..10 {\n        let tmp = p;\n        println!(&quot;p is {:#?}&quot;, tmp);\n    }\n}\n","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636439,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706143096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386241,"user_name":"seven9t","can_delete":false,"product_type":"c1","uid":1979955,"ip_address":"广东","ucode":"B7CA7D62C56938","user_header":"https://static001.geekbang.org/account/avatar/00/1e/36/33/3411df0d.jpg","comment_is_top":false,"comment_ctime":1704367330,"is_pvip":false,"replies":[{"id":140790,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1704435650,"ip_address":"重庆","comment_id":386241,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"1. 引入所有权是为了自动管理资源，类似uniq_ptr\n2. 引入move是为了防止使用无效资源、重复释放\n3. 如果不想move, 只能借用, 引出borrow checker和lifetime.","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635128,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704435650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384367,"user_name":"^ ^","can_delete":false,"product_type":"c1","uid":2596830,"ip_address":"中国香港","ucode":"50D96CC81143F4","user_header":"https://static001.geekbang.org/account/avatar/00/27/9f/de/09e62135.jpg","comment_is_top":false,"comment_ctime":1700731483,"is_pvip":false,"replies":[{"id":140239,"content":"对的，正解。因为这些太基础了太常用了，而且是固定尺寸的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700735697,"ip_address":"重庆","comment_id":384367,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"所以说上面那些默认使用copy复制所有权的变量类型，其实都是rust为他们实现了copy trait的是吗","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632411,"discussion_content":"对的，正解。因为这些太基础了太常用了，而且是固定尺寸的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1700735697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383381,"user_name":"水不要鱼","can_delete":false,"product_type":"c1","uid":2699481,"ip_address":"广东","ucode":"40F9B2BA2DD9C7","user_header":"https://static001.geekbang.org/account/avatar/00/29/30/d9/323ba366.jpg","comment_is_top":false,"comment_ctime":1698940335,"is_pvip":false,"replies":[{"id":139665,"content":"const mut 两个意义冲突了哦。再说，let是绑定的意思，后面接模式匹配。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698979093,"ip_address":"重庆","comment_id":383381,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"老师，关于 let 默认不可变的解释我还是有点迷惑，加 mut 增加了可变性的使用成本这个我可以理解，但是我没明白为啥要有 let 和 const 同时存在，理论上去掉 const 关键字，用 let 代替也是一样的，要可变的时候加 mut 变成变量，这样是不是也没啥问题","like_count":1,"discussions":[{"author":{"id":2337884,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ac/5c/bb67abe6.jpg","nickname":"林子茗","note":"","ucode":"59EDCECD54731F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638255,"discussion_content":"我感觉这位同学说得道理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1709436562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630855,"discussion_content":"const mut 两个意义冲突了哦。再说，let是绑定的意思，后面接模式匹配。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1698979093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383211,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1698681865,"is_pvip":false,"replies":[{"id":139618,"content":"对的，是复制了一份地址值。“然后因为是只读的，不会影响外面那个变量的所有权” 这句话不准确，只读只会影响原来那个值不被修改。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806385,"ip_address":"重庆","comment_id":383211,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"老师，你好！不可变引用类型，是不是相当于复制了一份地址，还是指向原来的对象，然后因为是只读的，不会影响外面那个变量的所有权","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630706,"discussion_content":"对的，是复制了一份地址值。“然后因为是只读的，不会影响外面那个变量的所有权” 这句话不准确，只读只会影响原来那个值不被修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382979,"user_name":"冷石","can_delete":false,"product_type":"c1","uid":1523432,"ip_address":"广东","ucode":"2A2B056A83E963","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/e8/3736f3cd.jpg","comment_is_top":false,"comment_ctime":1698251447,"is_pvip":false,"replies":[{"id":139502,"content":"谢谢。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698327690,"ip_address":"重庆","comment_id":382979,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"可以说讲的很清楚了，👍","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630338,"discussion_content":"谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698327690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382952,"user_name":"Geek_07ce33","can_delete":false,"product_type":"c1","uid":3736170,"ip_address":"上海","ucode":"E4E4C89A024433","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fLI3NSG6qScRzrMBQzuXHzAY0QyialcvoadMd662U7hxhJe7jlpAPgjtRPTicE91lWWSJx80TRrXXaVja59YJQ9g/132","comment_is_top":false,"comment_ctime":1698224755,"is_pvip":false,"replies":[{"id":139494,"content":"没有限制哦，什么时候想学都可以，不过虽然学的慢，但是还是建议跟上老师的节奏哦，有问题随时发问，争取这一次顺利掌握Rust，一起加油吧！","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1698288940,"ip_address":"北京","comment_id":382952,"utype":2}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"问一下，这个课程有时间限制吗？？我学的慢，","like_count":1,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630307,"discussion_content":"没有限制哦，什么时候想学都可以，不过虽然学的慢，但是还是建议跟上老师的节奏哦，有问题随时发问，争取这一次顺利掌握Rust，一起加油吧！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1698288940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":1,"child_discussions":[{"author":{"id":3736170,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/fLI3NSG6qScRzrMBQzuXHzAY0QyialcvoadMd662U7hxhJe7jlpAPgjtRPTicE91lWWSJx80TRrXXaVja59YJQ9g/132","nickname":"Geek_07ce33","note":"","ucode":"E4E4C89A024433","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":630309,"discussion_content":"奥利给","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698293592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630307,"ip_address":"上海","group_id":0},"score":630309,"extra":""}]}]},{"had_liked":false,"id":382949,"user_name":"不值得","can_delete":false,"product_type":"c1","uid":2667871,"ip_address":"福建","ucode":"FC251721E89261","user_header":"https://static001.geekbang.org/account/avatar/00/28/b5/5f/4ac4d6c7.jpg","comment_is_top":false,"comment_ctime":1698223418,"is_pvip":false,"replies":[{"id":139497,"content":"对的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698327455,"ip_address":"重庆","comment_id":382949,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"好像懂了，应该不会有性能问题，因为不可变，所以应该仅仅只是指针复制","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630333,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698327455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382860,"user_name":"馍馍汉宝","can_delete":false,"product_type":"c1","uid":2727971,"ip_address":"广东","ucode":"D46DC76AF6674C","user_header":"https://static001.geekbang.org/account/avatar/00/29/a0/23/4668496b.jpg","comment_is_top":false,"comment_ctime":1698126889,"is_pvip":false,"replies":[{"id":139466,"content":"可以的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698163915,"ip_address":"重庆","comment_id":382860,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"2的解决方法：\n```rs\n#[derive(Debug, Clone, Copy)]\nstruct Point { x: i64, y: i64, z: i64}\n```","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630205,"discussion_content":"可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698163915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382858,"user_name":"馍馍汉宝","can_delete":false,"product_type":"c1","uid":2727971,"ip_address":"广东","ucode":"D46DC76AF6674C","user_header":"https://static001.geekbang.org/account/avatar/00/29/a0/23/4668496b.jpg","comment_is_top":false,"comment_ctime":1698126518,"is_pvip":false,"replies":[{"id":139467,"content":"嗯\n","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698163924,"ip_address":"重庆","comment_id":382858,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"2. Move","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630206,"discussion_content":"嗯\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698163924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382856,"user_name":"馍馍汉宝","can_delete":false,"product_type":"c1","uid":2727971,"ip_address":"广东","ucode":"D46DC76AF6674C","user_header":"https://static001.geekbang.org/account/avatar/00/29/a0/23/4668496b.jpg","comment_is_top":false,"comment_ctime":1698126473,"is_pvip":false,"replies":[{"id":139481,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698208713,"ip_address":"重庆","comment_id":382856,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"1. 会报错，甚至在编译之前，VSCode 就已经提前知道错误信息：use of moved value: `s` value moved here, in previous iteration of loop。并给出了对应的解决方案，加上 .clone（if the performance cost is acceptable）","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630244,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698208713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382839,"user_name":"Andylinge","can_delete":false,"product_type":"c1","uid":2727445,"ip_address":"安徽","ucode":"D0D24185E99A67","user_header":"https://static001.geekbang.org/account/avatar/00/29/9e/15/e499fc69.jpg","comment_is_top":false,"comment_ctime":1698112617,"is_pvip":false,"replies":[{"id":139429,"content":"对的","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698119241,"ip_address":"重庆","comment_id":382839,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"1. 编译器报错，提示s已经move。\nerror[E0382]: use of moved value: `s`\n2. 编译器报错，提示如下：\nerror[E0382]: borrow of moved value: `p1`\n --&gt; src&#47;main.rs:9:25\n  |\n7 |  let p1 = Point{x:1, y:1, z:1};\n  |      -- move occurs because `p1` has type `Point`, which does not implement the `Copy` trait\n8 |  let p2 = p1;\n  |           -- value moved here\n9 |  println!(&quot;{:?}, {:?}&quot;, p1, p2);\n  |                         ^^ value borrowed here after move","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630119,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382806,"user_name":"-Hedon🍭","can_delete":false,"product_type":"c1","uid":3176234,"ip_address":"湖北","ucode":"FAE541E7A2B88F","user_header":"https://static001.geekbang.org/account/avatar/00/30/77/2a/0cd4c373.jpg","comment_is_top":false,"comment_ctime":1698062556,"is_pvip":false,"replies":[{"id":139417,"content":"棒！","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698119022,"ip_address":"重庆","comment_id":382806,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"思考题1：编译报错。因为在第一次循环的时候，s 的所有权已经转移到 tmp_s 了，后面 s 已经是无效状态了，不能再转移所有权。\n思考题2：移动。","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630107,"discussion_content":"棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382805,"user_name":"-Hedon🍭","can_delete":false,"product_type":"c1","uid":3176234,"ip_address":"湖北","ucode":"FAE541E7A2B88F","user_header":"https://static001.geekbang.org/account/avatar/00/30/77/2a/0cd4c373.jpg","comment_is_top":false,"comment_ctime":1698062104,"is_pvip":false,"replies":[{"id":139419,"content":"厉害","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698119056,"ip_address":"重庆","comment_id":382805,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"思考题1：编译报错。因为 s 的所有权在第一次循环的时候已经移动到 tmp_s 了，s 已经是处于无效状态了。","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630109,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389470,"user_name":"独钓寒江","can_delete":false,"product_type":"c1","uid":1203049,"ip_address":"广东","ucode":"2C81906FD88C8C","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/69/7ace1ddb.jpg","comment_is_top":false,"comment_ctime":1712675832,"is_pvip":false,"replies":[{"id":141737,"content":"是的，算上空格","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1713027582,"ip_address":"加拿大","comment_id":389470,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"&quot;变量名加了 mut，多打了 4 个字符&quot;，为什么是4个字符？算上空格吗？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641816,"discussion_content":"是的，算上空格","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713027582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388911,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"广东","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1711115200,"is_pvip":false,"replies":[{"id":141747,"content":"这个笔记非常棒，两段话把精髓都讲到了，建议小编置顶哈。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1713028568,"ip_address":"加拿大","comment_id":388911,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"是否可以这样认为？\n\n在 Rust 中，默认情况下所有权都是不共享的（这里先不讨论高级篇的共享所有权的特殊情况），任何情况下一个资源（值）都只有一个变量拥有它的所有权，所有权的赋予有两种方式：\n\n1、基本数据类型及由它们组成的元组、数组，还有不可变引用&amp;：这些都是固定且明确尺寸的，它们的所有权赋予方式是“资源（值）复制，新变量拥有复制后的资源（值）的所有权，旧变量依然拥有原资源（值）的所有权”；\n\n2、其他类型：这些都不是固定尺寸的（或者说是可变的），它们的所有权赋予方式是“资源（值）不动，所有权发生转移（move：移动、转移）”，新变量获得所有权，可以访问资源（值），而旧变量没有所有权了，就不能再访问原有资源（值）了。如果需要旧变量能继续访问原有资源，除非是把所有权借用给别人（&amp;-borrow，好比借钱给你 - 是要还的，送钱给你 - 是不用还的），当别人使用完返还给你之后，你依然可以访问那个资源，还有一种方法就是把资源（值）复制多一份给别人(clone()，或实现 Copy trait，当然复制的成本也要考虑在内， 复制资源（值）的方式是否合适），新变量可以拥有复制的资源（值）的所有权，从而不影响我对原有资源（值）的所有权。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641829,"discussion_content":"这个笔记非常棒，两段话把精髓都讲到了，建议小编置顶哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713028568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388045,"user_name":"Geek_de2f36","can_delete":false,"product_type":"c1","uid":2448942,"ip_address":"江苏","ucode":"589AA5C4A5AC37","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DqpibYJwatzEKhicLSaD6xDyIibLh0kHJM9RX88YOpgIXfbSoERzgKQiaN18KIO9VcNfBPjzPuD07aRH9T6P3EibT5w/132","comment_is_top":false,"comment_ctime":1709214035,"is_pvip":false,"replies":[{"id":141312,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1709308310,"ip_address":"加拿大","comment_id":388045,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"思考题1： 无法通过编译，可以将let tmp_s=&amp;s;\n思考题2： 移动，结构体没有实现Copy trait，无法复制","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638183,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709308310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388024,"user_name":"焉知非鱼","can_delete":false,"product_type":"c1","uid":1153932,"ip_address":"北京","ucode":"F32612733D3D4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/8c/a3ca2f3d.jpg","comment_is_top":false,"comment_ctime":1709177952,"is_pvip":false,"replies":[{"id":141302,"content":"对吧😃","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1709241818,"ip_address":"加拿大","comment_id":388024,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"看完作者的讲解，感觉我又会了 ^_","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638109,"discussion_content":"对吧😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709241818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386726,"user_name":"舒灿","can_delete":false,"product_type":"c1","uid":3813096,"ip_address":"四川","ucode":"98266B5188DD9E","user_header":"https://static001.geekbang.org/account/avatar/00/3a/2e/e8/9dc046af.jpg","comment_is_top":false,"comment_ctime":1705416464,"is_pvip":false,"replies":[{"id":141001,"content":"互赞","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1705478845,"ip_address":"重庆","comment_id":386726,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"这篇文章所有权讲的很清楚了，给作者大大点赞。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636020,"discussion_content":"互赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705478846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385277,"user_name":"superggn","can_delete":false,"product_type":"c1","uid":3623568,"ip_address":"北京","ucode":"831CCD98B393FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/7Q403U68Oy4lXG5sFBPVKLrfwaRzBqpBZibpEBXcPf9UOO3qrnh7RELoByTLzBZLkN9Nukfsj7DibynbZjKAKgag/132","comment_is_top":false,"comment_ctime":1702372486,"is_pvip":false,"replies":[{"id":140450,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1702609427,"ip_address":"重庆","comment_id":385277,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"思考题1： 无法通过编译\n思考题2： 移动（一般 struct 都不会是 Copy 的， 只有栈上的原生数据才有 Copy)","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633767,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702609427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385039,"user_name":"Mango","can_delete":false,"product_type":"c1","uid":1560032,"ip_address":"重庆","ucode":"CCD3A91D69555D","user_header":"https://static001.geekbang.org/account/avatar/00/17/cd/e0/7ba3c15d.jpg","comment_is_top":false,"comment_ctime":1701959531,"is_pvip":false,"replies":[{"id":140387,"content":"第三条路子，你觉得还有其他路线不？","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1702050907,"ip_address":"重庆","comment_id":385039,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"java: 局部变量表，失效时由jvm统一管理内存空间，有STW问题，不过目前已经各种GC已经解决了大部分问题；引用复制\nrust：自动释放空间；所有权，会向方法链转移，（所有权只有一份）目前看来还不能说服我，看着像为了这样而设计","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633386,"discussion_content":"第三条路子，你觉得还有其他路线不？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702050907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384912,"user_name":"文经","can_delete":false,"product_type":"c1","uid":1072346,"ip_address":"福建","ucode":"2C059BD2A4276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/da/0a8bc27b.jpg","comment_is_top":false,"comment_ctime":1701779262,"is_pvip":true,"replies":[{"id":140373,"content":"所有权机制不能那么理解，虽然表面现象是那样。\n1 是的\n2 在内存紧张的时候，差距可达几十倍。内存充裕的时候，1点几到几倍。\n3 脱离场景不能得出任何值不值的结论。从大家的口碑来看，普遍来说是值得的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1701919464,"ip_address":"重庆","comment_id":384912,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"唐老师，Rust的所有权机制是否可以理解成增加编译时的时间来减少运行时的时间。\n1. Swift语言，基于引用技术由编译器生成资源释放的代码，这个从运行时效率上讲，和Rust差别大了。\n2. 还有就是Go语言的垃圾回收机制，跟Rust相比，代码执行效率能差多大呢，\n3. 增加语言的复杂度来提升执行效率是否值得？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633228,"discussion_content":"所有权机制不能那么理解，虽然表面现象是那样。\n1 是的\n2 在内存紧张的时候，差距可达几十倍。内存充裕的时候，1点几到几倍。\n3 脱离场景不能得出任何值不值的结论。从大家的口碑来看，普遍来说是值得的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701919464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384161,"user_name":"Geek5493","can_delete":false,"product_type":"c1","uid":3605934,"ip_address":"北京","ucode":"6FE40AD9050955","user_header":"","comment_is_top":false,"comment_ctime":1700443252,"is_pvip":false,"replies":[{"id":140158,"content":"堆上存储的字符串数据会复制一份。所有权就是管理资源的权力，一个资源一个时刻只能有一个拥有者。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700540267,"ip_address":"重庆","comment_id":384161,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"s.clone()的时候是不是只复制了所有权，堆上存储的字符串数据并不会复制是吗\n","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632173,"discussion_content":"堆上存储的字符串数据会复制一份。所有权就是管理资源的权力，一个资源一个时刻只能有一个拥有者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700540268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383809,"user_name":"鸠摩智","can_delete":false,"product_type":"c1","uid":1106201,"ip_address":"中国香港","ucode":"853E584FC4CD64","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/19/c756aaed.jpg","comment_is_top":false,"comment_ctime":1699685761,"is_pvip":true,"replies":[{"id":139965,"content":"栈上","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699706498,"ip_address":"重庆","comment_id":383809,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"struct Point {\n  x: i64,\n  y: i64,\n  z: i64\n}\n老师，请教一下，这个结构体的实例是分配在栈上还是堆上啊？如果是分配在堆上，给它加上#[derive(Copy)]之后，会不会就分配在栈上了？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631539,"discussion_content":"栈上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699706499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":636108,"discussion_content":"所有变量都在栈上，加没加#[derive(copy)]的区别\n1.加，变量从栈-&gt;栈，赋值所有权新旧变量独享\n2.不加,变量从栈-&gt;堆，赋值所有权存在转移","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1705620352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":631539,"ip_address":"湖北","group_id":0},"score":636108,"extra":""}]}]},{"had_liked":false,"id":383534,"user_name":"丹枫染秋色","can_delete":false,"product_type":"c1","uid":1023930,"ip_address":"四川","ucode":"4E9A35439B615F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/ba/5a9cb72f.jpg","comment_is_top":false,"comment_ctime":1699237427,"is_pvip":false,"replies":[{"id":139739,"content":"记住N+1公式。基本的也就那些模式，一个一个掌握就没有不能入门的哈。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699256763,"ip_address":"重庆","comment_id":383534,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"这次终于感觉入门有望了","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631022,"discussion_content":"记住N+1公式。基本的也就那些模式，一个一个掌握就没有不能入门的哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699256763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383487,"user_name":"Ransang","can_delete":false,"product_type":"c1","uid":1133041,"ip_address":"上海","ucode":"DB67566A627DF2","user_header":"https://static001.geekbang.org/account/avatar/00/11/49/f1/bd61dbb1.jpg","comment_is_top":false,"comment_ctime":1699151190,"is_pvip":false,"replies":[{"id":139731,"content":"把文章中的例子手敲一下，需要多重复找找感觉。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699191450,"ip_address":"重庆","comment_id":383487,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"感觉所有权理解起来不是那么难 但是用起来怎么频频出错呢","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630986,"discussion_content":"把文章中的例子手敲一下，需要多重复找找感觉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699191450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383404,"user_name":"水不要鱼","can_delete":false,"product_type":"c1","uid":2699481,"ip_address":"重庆","ucode":"40F9B2BA2DD9C7","user_header":"https://static001.geekbang.org/account/avatar/00/29/30/d9/323ba366.jpg","comment_is_top":false,"comment_ctime":1698988524,"is_pvip":false,"replies":[{"id":139669,"content":"在栈上。再赋值的时候，移动了。所以栈上也是有所有权的。其再赋值也是会move的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699001620,"ip_address":"重庆","comment_id":383404,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"老师，我又有问题了哈哈，Point是由三个i64字段组成的，所以属于固定尺寸的类型，按理说可以分配在栈上，然后 b = a 这种赋值的时候就 copy 一份数据，还是说 let p = Point {...} 这种初始化的时候 p 是指向了堆上的数据","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630873,"discussion_content":"在栈上。再赋值的时候，移动了。所以栈上也是有所有权的。其再赋值也是会move的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1699001620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2699481,"avatar":"https://static001.geekbang.org/account/avatar/00/29/30/d9/323ba366.jpg","nickname":"水不要鱼","note":"","ucode":"40F9B2BA2DD9C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":630900,"discussion_content":"噢噢，原来栈上的也有所有权，还以为栈上的可以自动复制一份","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699019178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630873,"ip_address":"广东","group_id":0},"score":630900,"extra":""}]}]},{"had_liked":false,"id":383324,"user_name":"Noya","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"浙江","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","comment_is_top":false,"comment_ctime":1698857806,"is_pvip":false,"replies":[{"id":139648,"content":"对的，很棒","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698892967,"ip_address":"重庆","comment_id":383324,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"思考题1: compile error, 在第一次循环时(i=1) s的所有权给了tmp_s, 在第二次循环时(i=2), s已经moved了\n思考题2: move. struct不属于7类之一 &amp; 如果struct内元素过多,占用的内存比较大,不适合直接copy ","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630787,"discussion_content":"对的，很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698892967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383316,"user_name":"栗子糖","can_delete":false,"product_type":"c1","uid":3739594,"ip_address":"江苏","ucode":"34CA2365895621","user_header":"https://static001.geekbang.org/account/avatar/00/39/0f/ca/fada7838.jpg","comment_is_top":false,"comment_ctime":1698841932,"is_pvip":false,"replies":[{"id":139673,"content":"对的，👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699001720,"ip_address":"重庆","comment_id":383316,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"执行完第一次打印后，tmp_s的栈空间也被释放了，指向的堆也被释放了？是吗","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630877,"discussion_content":"对的，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699001720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383153,"user_name":"A0.何文祥","can_delete":false,"product_type":"c1","uid":1052569,"ip_address":"广东","ucode":"2549126DAEA15D","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/99/0d72321f.jpg","comment_is_top":false,"comment_ctime":1698565460,"is_pvip":false,"replies":[{"id":139584,"content":"感谢指正！","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698676636,"ip_address":"重庆","comment_id":383153,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"笔误：\n\n由以上类型组成的数组类型 arrry，如 [9; 100]；-&gt; 由以上类型组成的数组类型 array，如 [9; 100]；","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630578,"discussion_content":"感谢指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698676636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383057,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"湖北","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1698378224,"is_pvip":false,"replies":[{"id":139535,"content":"对的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698388936,"ip_address":"重庆","comment_id":383057,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"思考题1  use of moved value: `s`   是针对循环第二次开始的，第一次没问题。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630400,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698388936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382948,"user_name":"不值得","can_delete":false,"product_type":"c1","uid":2667871,"ip_address":"福建","ucode":"FC251721E89261","user_header":"https://static001.geekbang.org/account/avatar/00/28/b5/5f/4ac4d6c7.jpg","comment_is_top":false,"comment_ctime":1698223327,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"有一个疑问，就是不可变引用&amp;，如果是引用一个结构体，这个结构体中的数据结构可能存放String，如果是复制所有权，会不会有一定性能问题","like_count":1,"discussions":[{"author":{"id":3505160,"avatar":"https://static001.geekbang.org/account/avatar/00/35/7c/08/a7771455.jpg","nickname":"Arctique","note":"","ucode":"0421161FAE2C2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630441,"discussion_content":"不会有性能上的问题, 只是存了一份堆内存的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698427788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1373622,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f5/b6/2adf5cf8.jpg","nickname":"丶","note":"","ucode":"87FAD77EA5AF2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630318,"discussion_content":"引用不是两边都指向同一个堆内存地址么，复制的是栈上的地址，栈的读取性能高，为什么会有性能问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698303968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393724,"user_name":"落星野","can_delete":false,"product_type":"c1","uid":2667148,"ip_address":"北京","ucode":"EDFD05088A2026","user_header":"https://static001.geekbang.org/account/avatar/00/28/b2/8c/77d4d9bf.jpg","comment_is_top":false,"comment_ctime":1724725231,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"检查s1与s2对应的内存地址，会发现地址发生了变化。","like_count":0},{"had_liked":false,"id":393501,"user_name":"面向体检健身","can_delete":false,"product_type":"c1","uid":1579605,"ip_address":"广东","ucode":"9DE6182874BEE3","user_header":"https://static001.geekbang.org/account/avatar/00/18/1a/55/f34f0fa8.jpg","comment_is_top":false,"comment_ctime":1724054942,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"1报错,所有权转移到了tmp_s\n2移动","like_count":0},{"had_liked":false,"id":392854,"user_name":"LemonCat-","can_delete":false,"product_type":"c1","uid":1389584,"ip_address":"上海","ucode":"6098775C363AD8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4Is6kDeJDasxicicYDmJSlISqUpzpW8GEchDxlv6wgNKOfsjPQnrqpKpO8QMaBoEOkyTEUDiagcAdw/132","comment_is_top":false,"comment_ctime":1721961250,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"结合前文的讲解，对于文末【复制所有权】的描述认为有些不恰当，更准确的是复制值，这个过程中创建了新的所有权","like_count":0},{"had_liked":false,"id":391216,"user_name":"alexy","can_delete":false,"product_type":"c1","uid":1630242,"ip_address":"福建","ucode":"6ECFC6F6B21816","user_header":"https://static001.geekbang.org/account/avatar/00/18/e0/22/0812cfd5.jpg","comment_is_top":false,"comment_ctime":1717601494,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"第二节学完打卡，感觉知识挺多的，有一种在大脑中爆炸，把以往学过的编程语言清空的感觉，老师讲的通俗易懂。","like_count":0},{"had_liked":false,"id":390136,"user_name":"Geek_db027f","can_delete":false,"product_type":"c1","uid":3875308,"ip_address":"北京","ucode":"A5B267DE972735","user_header":"https://static001.geekbang.org/account/avatar/00/3b/21/ec/829edcfd.jpg","comment_is_top":false,"comment_ctime":1714449074,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"第二题 ：由于它不满足7种复制里面的操作，所以为移动操作","like_count":0},{"had_liked":false,"id":390135,"user_name":"Geek_db027f","can_delete":false,"product_type":"c1","uid":3875308,"ip_address":"北京","ucode":"A5B267DE972735","user_header":"https://static001.geekbang.org/account/avatar/00/3b/21/ec/829edcfd.jpg","comment_is_top":false,"comment_ctime":1714449030,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"题1：编译应该会出错，因为要循环1-10次不包含10，但是第一次发生移动，所以第二次移动出问题，所以在编译的时候就会报错；","like_count":0},{"had_liked":false,"id":383403,"user_name":"Joe Black","can_delete":false,"product_type":"c1","uid":1052528,"ip_address":"北京","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/cdef7a3d.jpg","comment_is_top":false,"comment_ctime":1698984228,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"感觉像是强制要求所有对象赋值都要std::move，并且类都实现了移动语义的C++...","like_count":0}]}