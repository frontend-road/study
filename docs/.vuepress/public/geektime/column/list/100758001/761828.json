{"id":761828,"title":"01｜发展历程：IaC过去、现在与未来展望","content":"<p>你好，我是潘野。</p><p>从今天开始，我们将会学习云原生基础架构的重要理论和发展脉络，为之后我们实践全自动化的基础架构管理打好基础。</p><p>作为课程的第一讲，我想先和你聊聊“基础设施即代码（Infrastructure as code）”。说起这个话题，你可能觉得是老生常谈，毕竟我们很容易就能在网上搜到很多相关内容。不过，这些内容往往很零散、不够系统，结合实践案例深入探讨的更是凤毛麟角。</p><p>今天，我就带你系统梳理一下基础设施即代码（Infrastructure as code）的来龙去脉。</p><h2>场景模拟</h2><p>让我们从一个小场景开始聊起。假如你是基础架构部门的技术总监。最近，公司要上线一个新业务。开发部门估算后，向你提出需要300台服务器来支持，100台做缓存系统，100台给中间件使用，50台给数据库使用，为了应对意外情况，还有50台做冗余。</p><p>那么接下来，从采购到业务真正上线都会经历哪些过程呢？</p><h2>过去的IaC：面向配置工具管理</h2><p>在公有云普及之前，一般来说情况是这样。</p><ol>\n<li>基础架构部门先采购300台服务器，数据中心工程师负责将机器推上机架，加电开机。</li>\n<li>网络组同学会为这批新机器分配Vlan、Subnet等资源。</li>\n<li>系统运维同学根据需求分配机器，然后安装操作系统，运行配置管理工具，完成后，再交付给负责应用发布的同学。</li>\n<li>负责应用发布的同学发布应用，最终完成整个业务上线。</li>\n</ol><!-- [[[read_end]]] --><p>其中第三步是最耗费时间的，系统运维的同学不仅要安装操作系统，还要对这个300台的服务器做配置管理。这300台服务器的用途不同，所以系统配置肯定也不相同，这时就需要借助配置管理工具来帮忙。那这个配置管理工具背后是怎么运行的？它是如何保证300台机器能被正确管理的呢？</p><p>就拿我们比较熟悉的工具——Puppet举例，这是一个Client-Server模型的配置管理工具。它的原理是这样的：每台机器上的Puppet agent每30分钟去Puppet master上拉取一次本机对应的配置，然后与本机上的配置做比对，发现不一致就会更改成Puppet Master里存储的配置。</p><p>既然300台机器各有各的用途，怎么使用配置管理工具来区分它们的用途，以便推送相对应的配置呢？</p><p>Puppet内置了一个节点角色定义的功能，早期叫ENC，Puppet 3之后改成Hiera，假设我们在Puppet节点定义文件中声明了50台数据库服务器，前几台数据库服务器的核心定义如下：</p><pre><code class=\"language-json\">node 'redis01' {\n  include redis\n}\n\nnode 'db01' {\n  include mysql\n}\n\nnode 'db02' {\n  class {'mysql':\n    type =&gt; slave\n    default_master = \"db01\"\n  }\n}\n... \n</code></pre><p>结合代码可以看到，redis01这个节点里要应用Redis这个模块，db01和db02要应用MySQL这个模块，db02里的参数表示它是db01的slave节点。Puppet agent会根据节点定义拉取对应的配置，然后应用到主机上。</p><p>为了方便团队协作，一般运维团队会将Puppet的配置文件放在公司内的git上，通过一些代码控制流程来管理代码的变更历史，这就是我们常说的Infrastructure as Code，简称IaC。</p><p>基于配置管理的IaC方式，尽管具体选哪种工具可能有所不同，比如我们还可以选择Saltstack或者是Ansible工具，但是思路和流程大体应该差不多。</p><p>这种管理方式相比自己写脚本的传统管理方式，具有三个重要的标准。</p><ul>\n<li><strong>快速</strong>：一旦节点的角色定义好了之后，Puppet agent会自动拉取配置完成配置变更。</li>\n<li><strong>可靠</strong>：通过工具自动定期对比配置，防止有人手动做了更改，确保实际配置与定义配置保持一致。</li>\n<li><strong>可重复</strong>：无论是配置数据库服务器，还是设置冗余服务器，运维只需要定义好服务器角色，设置一次应用配置，Puppet就能搞定所有的配置工作，省去了手工重复配置数百台机器的烦恼。</li>\n</ul><p>好，我们稍微总结一下什么是IaC。IaC是一种自动化基础设施管理的方法，通过代码描述和配置基础设施资源，实现<strong>快速、可靠和可重复</strong>的部署和管理过程。</p><h2>现在的IaC：面向API与资源管理</h2><p>你有没有发现，我们前面例子里，从采购、配置300台服务器到业务上线的流程效率其实并不高？</p><p>首先，网络组的同学要为这批新机器分配vlan、subnet等网络资源，往往这个过程中还要涉及到一些开防火墙规则。其次，运维同学要等待网络组同学完成网络配置后，才能安装操作系统，并交付配置管理。</p><p>这种一环套一环的基础架构管理方式效率并不高，这几百台服务器从上架到交付使用，整个过程没有十天半个月，是不可能完成的。</p><p>这些基础设施的维护工作在业务运行里占据了很大比重，但效率低下。这显然无法跟上行业里不断变化的市场需求，拖慢了业务团队持续交付、早日上线的步伐。</p><p>为解决传统基础架构中低效工作的部分，云计算逐渐占据了基础架构中主流地位。我们不再需要自己维护一个机房，也不再需要专门采购服务器了，而是通过公有云上的API或者SDK来申请计算存储网络的资源。</p><p>那为什么公有云可以快速满足业务对基础设施资源的需求呢？在公有云上申请计算、存储和网络资源具体又是如何操作的呢？</p><p>让我们结合例子来解读，后面的命令创建了一个EC2虚拟机实例。这条命令背后其实是调用AWS的API来创建EC2虚拟机实例。</p><pre><code class=\"language-go\">aws ec2 run-instances --image-id ami-xxxxxxxx --count 1 --instance-type t2.micro --key-name MyKeyPair --security-group-ids sg-903004f8 --subnet-id subnet-6e7f829e\n</code></pre><p>我将参数的含义整理了一张表，供你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/56/bf53472769ee4e6c120413ceb4822356.jpg?wh=2668x1346\" alt=\"\"></p><p>当这一条命令敲下去之后，只需要1分钟你就能获得一台可以立刻进行应用部署的虚拟机。其他网络资源、存储资源获取的方式也类似，对照AWS的文档就能轻松搞定。</p><p>可以看到在公有云上，基础架构的资源管理有了质的飞跃。</p><ul>\n<li>部署和上线时间方面，从原有的天级别压缩到分钟级别。</li>\n<li>计算、网络、存储资源都可以通过API形式获得。</li>\n<li>资源可以按需配置，随用随取。</li>\n</ul><p>在这种背景下，基础设施的配置管理就要转变成<strong>面向云上资源管理</strong>，也就是对计算、网络、存储做全方位的管理，而不是再面向机器配置管理。然而，基于Puppet这类配置管理工具的IaC方式显然无法匹配新的情况，因为它们的能力仅限于主机上的配置管理。</p><p>那么面向资源管理具体怎么实现呢？</p><p>我们主要会通过命令式和声明式两种方式来管理资源。我继续沿用这个业务上线的例子，来帮你理解命令式与声明式。</p><p>此时需求会变成这样：</p><blockquote>\n<p>应用需要30台虚拟机部署中间件，30台虚拟机部署缓存系统，这两类机器启用云上自动扩展功能，根据CPU使用率对机器数量进行扩容。<br>\n&nbsp;<br>\n前端需要一个负载均衡器，对外暴露的端口是8082。<br>\n&nbsp;<br>\n10个云数据库实例用来存储用户信息，用户的图片数据存储在对象存储中，对象存储的大小为1T。</p>\n</blockquote><p>这时运维同学就可以根据上述需求，将AWS的命令组合成一个shell的脚本。脚本中会组合地创建EC2实例、RDS数据库实例、创建ELB还有创建S3的命令。然后执行这个脚本即可轻松获取到相对应的资源，这种管理方式叫<strong>命令式方法</strong>。</p><p>命令式方法的问题在于配置程度低，一旦应用多起来，就会带来更多的手工工作。</p><p>于是，一种新的资源管理方式就出现了。AWS 为了帮助用户简化工作，快速复制基础设施，推出了CloudFormation这个功能。CloudFormation使用结构化的文本，通过模板方式组合来创建一组资源。这些资源能一起合作，共同创建一个应用程序或解决方案。</p><p>这种方式叫做<strong>声明式方法</strong>。声明式方法定义了系统的预期状态，包括所需的资源以及它们应具有的属性，声明式方法的IaC工具执行时可能会中断或出错，但是这类工具可以不断重试，直到最终的实际状态与预期状态一致。</p><p>我们来看一个CloudFormation的例子，直观比较一下声明式方法和之前的命令式方法有什么不同。</p><pre><code class=\"language-go\">Resources:\n  Ec2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      SecurityGroups:\n        - !Ref InstanceSecurityGroup\n      KeyName: mykey\n      ImageId: 'ami-xxxx'\n  InstanceSecurityGroup:\n    Type: 'AWS::EC2::SecurityGroup'\n    Properties:\n      GroupDescription: Enable SSH access via port 22\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0  \n</code></pre><p>在这个配置中，我们定义了这个EC2的镜像、安全组、ssh登陆公钥等信息，将命令转化成了声明式的配置。之后再结合模版的方式，就能达到IaC管理<strong>快速、可靠、可重复的标准</strong>。</p><p>但CloudFormation是AWS的产品，只支持AWS的API。如果我们选择其他的云厂商或者是自己搭建私有云时，又该怎么办呢？有没有什么工具可以支持所有的API？</p><p>于是，Terraform这种多云基础设施编排工具就应运而生了！和CloudFormation一样，Terraform也是声明式方法，但是它没有使用结构化文本，而是Terraform自己的语法，这里我贴一个小样例。</p><pre><code class=\"language-go\">module \"ec2_instance\" {\n&nbsp; source&nbsp; = \"terraform-aws-modules/ec2-instance/aws\"\n\n&nbsp; name = \"single-instance\"\n\n&nbsp; instance_type&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"t2.micro\"\n&nbsp; key_name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= \"user1\"\n&nbsp; monitoring&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= true\n&nbsp; vpc_security_group_ids = [\"sg-12345678\"]\n&nbsp; subnet_id&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"subnet-eddcdzz4\"\n\n&nbsp; tags = {\n&nbsp; &nbsp; Terraform&nbsp; &nbsp;= \"true\"\n&nbsp; &nbsp; Environment = \"dev\"\n&nbsp; }\n}\n</code></pre><p>可以看到，这个例子中导入了terraform-aws-modules，因此能够支持Google Cloud，Azure Cloud等其他云的模块。下一讲我还会跟你继续探讨Terraform的原理和应用，这里你先对它有个印象就行。</p><h2>未来的IaC：面向应用管理</h2><p>早期IaC是为系统管理员服务，通过Puppet这样的工具帮助系统管理员自动化配置server；现在的IaC是面向资源，通过Terraform这样的工具将计算网络存储的管理整合在一起。这两种管理方式的共性是，先由应用申请资源，再由我们为应用准备资源。</p><p><strong>但是还有没有更快更好的方法呢</strong>？</p><p>我们再回顾下前面模拟场景里的需求，开发团队上线应用程序之前，需要等待基础设施团队通过云的API准备资源。那么开发团队为什么不能直接调用云的API呢？</p><p>但是，哪怕开发团队自学了Terraform的文档，搞定了冗长的资源配置管理操作，再应用到云上，整个过程其实是开发团队被动完成了基础设施团队的工作，本质上并没有让效率变得更高。</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/fa/ce95591133a0c4dyy95e91e5e01e5afa.jpg?wh=3508x2194\" alt=\"\"></p><p>所以这种交付方式依赖的其实是某个人或者某个岗位，只有准备好资源，才能分配给应用资源使用。</p><p>一旦有很多应用程序需要调用资源，这种“按需下单，等候分配”的过程就会更加漫长、复杂。那么能不能把准备资源这个过程，交由应用程序本身来触发，通过自动化程序来管理应用程序的整个生命周期呢？</p><p>这不就是Kubernetes最重要的特性吗？Kubernetes实际上将基础设施转化成了它的配置对象，让业务在大部分场景中不需要去考虑底层基础架构的形态。</p><p>这样一来，开发团队在完成程序开发之后，不需要找到系统管理员或者云管理员，只要在Kubernetes配置文件里，声明所需要CPU、内存和磁盘的大小以及对外暴露服务需要的网关等信息，通过Kubernetes API便可调用各类资源。当应用生命周期结束的时候，再通过Kubernetes配置文件删除应用并释放资源，做到资源的有借有还。</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/e8/e08b9be1aa77d7ac20da79a39f09cee8.jpg?wh=3508x2194\" alt=\"\"></p><p>今天Kubernetes已经是事实上的云计算的标准接口。<strong>Kubernetes通过对计算、网络、存储的高度抽象，屏蔽了云上和云下的差异</strong>。我们在云上和云下机房里分别启动Kubernetes的集群，应用程序几乎不用更改，就可以很快地从云下迁移到云上，或者从云上迁移到云下。</p><p>在我看来，在云原生技术的帮助下，未来的基础架构管理中应用与基础设施之间将不再脱节。Kubernetes一方面会为应用提供接口，快速获得相应的计算、网络与存储资源，另一方面又能对接云厂商的API，实现根据应用需求动态扩展资源的能力。</p><p>所以，未来Kubernetes的集群管理将会变成IaC的主体。而对于基础设施团队，可以把更多的关注点更多放在集群组件管理、集群监控、成本分析、资源优化等进阶工作上。</p><h2>总结</h2><p>今天我和你分享了我对基础设施即代码的经验和理解。</p><p>我们用一句话来总结一下IaC的概念，IaC是一种自动化基础设施管理的方法，通过代码描述和配置基础设施资源，实现<strong>快速、可靠和可重复</strong>的部署和管理过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/74/4d5870133642c3a6ebff64c287fc9f74.jpg?wh=2900x1291\" alt=\"\"></p><p>IaC的发展过程可以分为三个阶段。最初，我们主要关注的是面向主机的配置管理，这包括安装和配置服务器、数据库等基础设施组件。随着云计算的发展，我们的关注点转向了面向云资源的管理，这包括创建和管理虚拟机、存储、网络等云资源。在未来，我们预计将进一步前进，关注面向应用资源的管理，这将包括部署和管理微服务、容器、函数等应用级别的资源。</p><p>下一讲，我会带你梳理现在流行的IaC的工具，帮你选择适合自己业务的IaC工具。</p><h2>思考题</h2><p>请你对照IaC方式的三大标准，看看自己公司里现在所实施的IaC存在哪些不足？</p><p>欢迎你在留言区和我交流互动。如果今天的内容对你有启发，也推荐你分享给身边更多朋友。</p>","neighbors":{"left":{"article_title":"开篇词｜云原生技术：变革基础架构的核动力","id":761820},"right":{"article_title":"02｜主流IaC工具解析：你的最佳IaC工具选择指南","id":762265}},"comments":[{"had_liked":false,"id":389030,"user_name":"yayiyaya","can_delete":false,"product_type":"c1","uid":1615156,"ip_address":"浙江","ucode":"38532C740FA186","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/34/6e3e962f.jpg","comment_is_top":false,"comment_ctime":1711419272,"is_pvip":false,"replies":[{"id":141574,"content":"同学你好，你提的问题非常好，这也是我们模块三中关于资源动态扩缩容中重要的内容。在模块三中，我们会详细了解，应用平面的动态扩缩容与集群层面的动态扩缩容是如何联动的，敬请期待。","user_name":"作者回复","user_name_real":"编辑","uid":1043450,"ctime":1711475426,"ip_address":"上海","comment_id":389030,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100758001,"comment_content":"老师， 我有些地方不明白，声明需要CPU、内存和磁盘。 可以通过定义的resource 资源和storageclass来解决；如果是节点的资源不足 ，也可以通过云平台k8s管理， 动态的扩缩容节点。 但是，何时进行扩缩容？是通过什么做判断的？ 某些服务申请的声明资源比实际使用要大的多，这些又该怎么办呢?","like_count":1,"discussions":[{"author":{"id":1043450,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/eb/fa/5dc2bcae.jpg","nickname":"潘野","note":"","ucode":"5B60CCA6C00359","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640430,"discussion_content":"同学你好，你提的问题非常好，这也是我们模块三中关于资源动态扩缩容中重要的内容。在模块三中，我们会详细了解，应用平面的动态扩缩容与集群层面的动态扩缩容是如何联动的，敬请期待。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711475426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1385403,"avatar":"https://static001.geekbang.org/account/avatar/00/15/23/bb/a1a61f7c.jpg","nickname":"GAC·DU","note":"","ucode":"7847FBE1C13740","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640366,"discussion_content":"同问这个问题，如果正好卡在没资源这个节点上，该怎么弄？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1711438929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1332257,"avatar":"https://static001.geekbang.org/account/avatar/00/14/54/21/0bac2254.jpg","nickname":"橙汁","note":"","ucode":"EC3FF10D708C9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640385,"discussion_content":"你这个好办 像阿里云是有节点级别的扩缩容 不够自己就新增节点了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711452175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389868,"user_name":"xueerfei007","can_delete":false,"product_type":"c1","uid":1155062,"ip_address":"浙江","ucode":"EF3FE821E5B54A","user_header":"https://static001.geekbang.org/account/avatar/00/11/9f/f6/7431e82e.jpg","comment_is_top":false,"comment_ctime":1713745797,"is_pvip":false,"replies":[{"id":141854,"content":"在基础设施的管理中，一直都一个问题叫“先有鸡还是先有蛋”。那么用户通过k8s的API去获取了资源，那么管理员就要为这个API去做很多的事情，这也是这门课程想要去达到的一个目标。","user_name":"作者回复","user_name_real":"编辑","uid":1043450,"ctime":1713894666,"ip_address":"上海","comment_id":389868,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100758001,"comment_content":"但是对于云服务提供者来说，给外部提供k8s这样的api，方便用户创建使用资源，但是他们自己的工作依然很复杂，还是要自己处理物理集群","like_count":0,"discussions":[{"author":{"id":1043450,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/eb/fa/5dc2bcae.jpg","nickname":"潘野","note":"","ucode":"5B60CCA6C00359","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":642913,"discussion_content":"在基础设施的管理中，一直都一个问题叫“先有鸡还是先有蛋”。那么用户通过k8s的API去获取了资源，那么管理员就要为这个API去做很多的事情，这也是这门课程想要去达到的一个目标。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713894666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389011,"user_name":"kaizen","can_delete":false,"product_type":"c1","uid":1675966,"ip_address":"北京","ucode":"313EEA97AEC7C3","user_header":"https://static001.geekbang.org/account/avatar/00/19/92/be/8de4e1fe.jpg","comment_is_top":false,"comment_ctime":1711370620,"is_pvip":false,"replies":[{"id":141573,"content":"Hi，同学你好\n\n其实有很多种方式可以将中间件，DB这些资源拉起来，比如你说的用terraform，也可以用容器化的方式部署进kubernetes，也可以用一些Operator来拉起这些资源。不同的拉起方式，有不同的管理方法，在模块2中我们会讲解怎么去管理这些资源。","user_name":"作者回复","user_name_real":"编辑","uid":1043450,"ctime":1711475261,"ip_address":"上海","comment_id":389011,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100758001,"comment_content":"应用所需要的DB,消息队列等，应该还得靠terraform来拉起来吧","like_count":0,"discussions":[{"author":{"id":1043450,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/eb/fa/5dc2bcae.jpg","nickname":"潘野","note":"","ucode":"5B60CCA6C00359","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640429,"discussion_content":"Hi，同学你好\n\n其实有很多种方式可以将中间件，DB这些资源拉起来，比如你说的用terraform，也可以用容器化的方式部署进kubernetes，也可以用一些Operator来拉起这些资源。不同的拉起方式，有不同的管理方法，在模块2中我们会讲解怎么去管理这些资源。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711475261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1567014,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e9/26/472e16e4.jpg","nickname":"Amosヾ","note":"","ucode":"833F6FCB4042AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640317,"discussion_content":"如果容器化 db 性能足够的话，未来应该是用k8s的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711414031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}