{"id":177870,"title":"10 | 软件设计的目的：糟糕的程序员比优秀的程序员差在哪里？","content":"<p>有人说，在软件开发中，优秀的程序员比糟糕的程序员的工作产出高100倍。这听起来有点夸张，实际上，我可能更悲观一点，就我看来，有时候，后者的工作成果可能是负向的，也就是说，因为他的工作，项目会变得更加困难，代码变得更加晦涩，难以维护，工期因此推延，各种莫名其妙改来改去的bug一再出现，而且这种局面还会蔓延扩散，连那些本来还好的代码模块也逐渐腐坏变烂，最后项目难以为继，以失败告终。</p><p>如果仅仅是看过程，糟糕的程序员和优秀的程序员之间，差别并没有那么明显。但是从结果看，如果最后的结果是失败的，那么产出就是负的，和成功的项目比，差别不是100倍，而是无穷倍。</p><p>程序员的好坏，一方面体现在编程能力上，比如并不是每个程序员都有编写一个编译器程序的能力；另一方面，体现在程序设计方面，即使在没有太多编程技能要求的领域下，比如开发一个订单管理模块，只要需求明确，具有一定的编程经验，大家都能开发出这样一个程序，但优秀的程序员和糟糕的程序员之间，依然有巨大的差别。</p><p>在软件设计开发这个领域，好的设计和坏的设计最大的差别就体现在应对需求变更的能力上。而好的程序员和差的程序员的一个重要区别，就是对待需求变更的态度。差的程序员害怕需求变更，因为每次针对需求变更而开发的代码都会导致无尽的bug；好的程序员则欢迎需求变更，因为他们一开始就针对需求变更进行了软件设计，如果没有需求变更，他们优秀的设计就没有了用武之地，产生一拳落空的感觉。这两种不同态度的背后，是设计能力的差异。</p><!-- [[[read_end]]] --><p>一个优秀的程序员一旦习惯设计、编写能够灵活应对需求变更的代码，他就再也不会去编写那些僵化的、脆弱的、晦涩的代码了，甚至仅仅是看这样的代码，也会产生强烈的不舒服的感觉。记得一天下午，一个技术不错的同事突然跟我请假，说身体不舒服，需要回去休息一下，我看他脸色惨白，有气无力，就问他怎么了。他回答：刚才给另一个组的同事review代码，代码太恶心了，看到中途去厕所吐了，现在浑身难受，需要休息。</p><p>惊讶吗？但实际上，糟糕的代码就是能产生这么大的威力，这些代码在运行过程中使系统崩溃；测试过程中使bug无法收敛，越改越多；开发过程使开发者陷入迷宫，掉到一个又一个坑里；而仅仅是看这些代码，都会使阅读者头晕眼花。</p><h2>糟糕的设计</h2><p>糟糕的设计和代码有如下一些特点，这些特点共同铸造了糟糕的软件。</p><h3>僵化性</h3><p>软件代码之间耦合严重，难以改动，任何微小的改动都会引起更大范围的改动。一个看似微小的需求变更，却发现需要在很多地方修改代码。</p><h3>脆弱性</h3><p>比僵化性更糟糕的是脆弱性，僵化导致任何一个微小的改动都能引起更大范围的改动，而脆弱则是微小的改动容易引起莫名其妙的崩溃或者bug，出现bug的地方看似与改动的地方毫无关联，或者软件进行了一个看似简单的改动，重新启动，然后就莫名其妙地崩溃了。</p><p>如果说僵化性容易导致原本只用3个小时的工作，变成了需要三天，让程序员加班加点工作，于是开始吐槽工作的话，那么脆弱性导致的突然崩溃，则让程序员开始抓狂，怀疑人生。</p><h3>牢固性</h3><p>牢固性是指软件无法进行快速、有效地拆分。想要复用软件的一部分功能，却无法容易地将这部分功能从其他部分中分离出来。</p><p>目前微服务架构大行其道，但是，一些项目在没有解决软件牢固性的前提下，就硬着头皮进行微服务改造，结果可想而知。要知道，微服务是低耦合模块的服务化，首先需要的，就是低耦合的模块，然后才是微服务的架构。如果单体系统都做不到模块的低耦合，那么由此改造出来的微服务系统只会将问题加倍放大，最后就怪微服务了。</p><h3>粘滞性</h3><p>需求变更导致软件变更的时候，如果糟糕的代码变更方案比优秀的方案更容易实施，那么软件就会向糟糕的方向发展。</p><p>很多软件在设计之初有着良好的设计，但是随着一次一次的需求变更，最后变得千疮百孔，趋向腐坏。</p><h3>晦涩性</h3><p>代码首先是给人看的，其次是给计算机执行的。如果代码晦涩难懂，必然会导致代码的维护者以设计者不期望的方式对代码进行修改，导致系统腐坏变质。如果软件设计者期望自己的设计在软件开发和维护过程中一直都能被良好执行，那么在软件最开始的模块中就应该保证代码清晰易懂，后继者参与开发维护的时候才有章法可循。</p><h2>一个设计腐坏的例子</h2><p>软件如果是一次性的，只运行一次就被永远丢弃，那么无所谓设计，能实现功能就可以了。然而现实中的软件，大多数在其漫长的生命周期中都会被不断修改、迭代、演化和发展。淘宝从最初的小网站，发展到今天有上万名程序员维护的大系统；Facebook从扎克伯格一个人开发的小软件，成为如今服务全球数十亿人的巨无霸，无不经历过并将继续经历演化发展的过程。</p><p>接下来，我们就来看一个软件在需求变更过程中，不断腐坏的例子。</p><p>假设，你需要开发一个程序，将键盘输入的字符，输出到打印机上。任务看起来很简单，几行代码就能搞定：</p><pre><code>void copy()\n{\n  int c;\n  while ((c=readKeyBoard()) != EOF)\n    writePrinter(c);\n}\n</code></pre><p>你将程序开发出来，测试没有问题，很开心得发布了，其他程序员在他们的项目中依赖你的代码。过了几个月，老板忽然过来说，这个程序需要支持从纸带机读取数据，于是你不得不修改代码：</p><pre><code>bool ptFlag = false;\n//使用前请重置这个flag\nvoid copy()\n{\n  int c;\n  while ((c=(ptFlag? readPt() : readKeyBoard())) != EOF)\n    writePrinter(c);\n}\n</code></pre><p>为了支持从纸带机输入数据，你不得不增加了一个布尔变量，为了让其他程序员依赖你的代码的时候能正确使用这个方法，你还添加一句注释。即便如此，还是有人忘记了重设这个布尔值，还有人搞错了这个布尔值的代表的意思，运行时出来bug。</p><p>虽然没有人责怪你，但是这些问题还是让你很沮丧。这个时候，老板又来找你，说程序需要支持输出到纸带机上，你只好硬着头皮继续修改代码：</p><pre><code>bool ptFlag = false;\nbool ptFlag2 = false;\n//使用前请重置这些flag\nvoid copy()\n{\n  int c;\n  while ((c=(ptFlag? readPt() : readKeyBoard())) != EOF)\n    ptFlag2? writePt(c) : writePrinter(c);\n}\n</code></pre><p>虽然你很贴心地把注释里的”这个flag“改成了”这些flag“，但还是有更多的程序员忘记要重设这些奇怪的flag，或者搞错了布尔值的意思，因为依赖你的代码而导致的bug越来越多，你开始犹豫是不是需要跑路了。</p><h2>解决之道</h2><p>从这个例子我们可以看到，一段看起来还比较简单、清晰的代码，只需要经过两次需求变更，就有可能变得僵化、脆弱、粘滞、晦涩。</p><p>这样的问题场景，在各种各样的软件开发场景中，随处可见。人们为了改善软件开发中的这些问题，使程序更加灵活、强壮、易于使用、阅读和维护，总结了很多设计原则和设计模式，遵循这些设计原则，灵活应用各种设计模式，就可以避免程序腐坏，开发出更强大灵活的软件。</p><p>比如针对上面这个例子，更加灵活，对需求更加有弹性的设计、编程方式可以是下面这样的：</p><pre><code>public interface Reader {\n\tint read();\n}\n\npublic interface Writer {\n\tvoid write(int c);\n}\n\npublic class KeyBoardReader implements Reader {\n\tpublic int read() {\n\t\treturn readKeyBoard();\n\t}\n}\n\npublic class Printer implements Writer {\n\tpublic void write(int c) {\n\t\twritePrinter(c);\n\t}\n}\n\nReader reader = new KeyBoardReader();\nWriter writer = new Printer():\nvoid copy() {\n\tint c;\n\twhile(c=reader.read() != EOF)\n\t\twriter(c);\n}\n</code></pre><p>我们通过接口将输入和输出抽象出来，copy程序只负责读取输入并进行输出，具体输入和输出实现则由接口提供，这样copy程序就不会因为要支持更多的输入和输出设备而不停修改，导致代码复杂，使用困难。</p><p><strong>所以你能看到，</strong><strong>应对需求变更最好的办法就是一开始的设计就是针对需求变更的，并在开发过程中根据真实的需求变更不断重构代码，保持代码对需求变更的灵活性。</strong></p><h2>小结</h2><p>我们在开始设计的时候就需要考虑程序如何应对需求变更，并因此指导自己进行软件设计，在开发过程中，需要敏锐地察觉到哪些地方正在变得腐坏，然后用设计原则去判断问题是什么，再用设计模式去重构代码解决问题。</p><p>我在面试过程中，考察候选人编程能力和编程技巧的主要方式就是问关于设计原则与设计模式的问题。</p><p>我将在”软件的设计原理“这一模块，主要讲如何用设计原则和设计模式去设计强壮、灵活、易复用、易维护的程序。希望这部分内容能够帮你掌握如何进行良好的程序设计。</p><h2>思考题</h2><p>你在软件开发实践中，是否曾经看到过一些糟糕的代码？这些糟糕的代码是否符合僵化、脆弱、牢固、粘滞、晦涩这些特点？这些代码给工作带来了怎样的问题呢？</p><p>欢迎你在评论区写下你的体验，我会和你一起交流，也欢迎你把这篇文章分享给你的朋友或者同事，一起交流进步一下。</p>","comments":[{"had_liked":false,"id":161315,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1576183819,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"254979254283","product_id":100040201,"comment_content":"僵化性代码的例子是滥用了继承，导致添加一个小功能，所有的基类和派生类都要修改。<br>脆弱性代码的例子是引入全局依赖，导致意外的修改扩散。每当我看到很多全局变量的时候，对程序的掌控感荡然无存。<br>牢固性代码的例子是超大类，由于类内部是可以任意访问，所有的巨量函数和属性组成了一个巨大完全图，牵一发而动全身，根本不知道从哪里下手。<br>粘滞性代码的一个例子还是全局变量，大家觉得觉得用得也挺顺手的，还有人说重用这些能提高效率，让我也很无语。有了注入依赖以后，这些全局变量被包了一层外衣，到处泛滥而不可收拾。<br>晦涩性代码的例子是过多if语句，一开始可能还好，最后if越加越多，导致看完都成问题。<br><br>","like_count":60,"discussions":[{"author":{"id":1153702,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/a6/3bddb98c.jpg","nickname":"大叶枫","note":"","ucode":"224AC5533889AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405450,"discussion_content":"深有体会啊，年轻人。mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634568065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","nickname":"布拉姆","note":"","ucode":"479FF27D73BCAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358350,"discussion_content":"写的不错，mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615969748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175016,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1580527557,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"169084252101","product_id":100040201,"comment_content":"差的程序员总是用行动的勤奋来掩盖思考的懒惰","like_count":40,"discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299600,"discussion_content":"有道理，每天都在写bug。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597745894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161407,"user_name":"难得糊涂ck","can_delete":false,"product_type":"c1","uid":1255826,"ip_address":"","ucode":"9C9E248E4F1A6F","user_header":"https://static001.geekbang.org/account/avatar/00/13/29/92/131296a8.jpg","comment_is_top":false,"comment_ctime":1576201979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57410776827","product_id":100040201,"comment_content":"A：可以说脏话嘛？<br>B：不能。<br>A：那我没什么好说的","like_count":13},{"had_liked":false,"id":216603,"user_name":"一路前行","can_delete":false,"product_type":"c1","uid":1288985,"ip_address":"","ucode":"32D3C715690783","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcFhGY0NV4kFzOSXWDHR2lrI2UbUP4Y016GOnpTH7dqSbicqJarX0pHxMsfLopRiacKEPXLx7IHHqg/132","comment_is_top":false,"comment_ctime":1589294284,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31654065356","product_id":100040201,"comment_content":"a丨b丨c  之前看到过一个这样代码段子，请将这个字符串切分开。一个人一天调了很久没调出来，最后发现“丨”这玩意竟是个汉字。","like_count":7},{"had_liked":false,"id":161314,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1576183643,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23051020123","product_id":100040201,"comment_content":"想了解下智慧老师是如何提问考察应聘者编程能力和编程技巧","like_count":5,"discussions":[{"author":{"id":1039475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/73/9ab38243.jpg","nickname":"xiaoxionga","note":"","ucode":"2BB02B54C31EBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80939,"discussion_content":"文章里有说呀 \n“我在面试过程中，考察候选人编程能力和编程技巧的主要方式就是问关于设计原则与设计模式的问题。”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576205386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1039475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/73/9ab38243.jpg","nickname":"xiaoxionga","note":"","ucode":"2BB02B54C31EBF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81153,"discussion_content":"额，通过这句话，你能知道他具体如何提问，掌握到应聘者的编程能力和编程技巧吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576227426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":80939,"ip_address":""},"score":81153,"extra":""}]}]},{"had_liked":false,"id":242508,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1597744659,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"14482646547","product_id":100040201,"comment_content":"说起僵化性的代码我就不得不吐槽我的前同事，离职后我接管了他的任务。我估计他就是实在怕以后的bug成堆才赶紧甩锅走人的。设计一个业务稍微复杂的功能，他一个方法写了将近两千行。一个类几千行代码，我用编辑器打开都卡。最近需求变更，差点没把握逼疯。要重构嘛，已经上线了，工作量也有点大，而且不止到还有没有其他坑。","like_count":3,"discussions":[{"author":{"id":2820632,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/0a/18/cdfd70ad.jpg","nickname":"LetMeCode","note":"","ucode":"AD6D729D42BB44","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580369,"discussion_content":"只要感觉能被别人复用的代码，超过1百行我都觉得太多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658129230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202423,"user_name":"米亮","can_delete":false,"product_type":"c1","uid":1125521,"ip_address":"","ucode":"CA9C0AF24AD236","user_header":"https://static001.geekbang.org/account/avatar/00/11/2c/91/06270b06.jpg","comment_is_top":false,"comment_ctime":1585986802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470888690","product_id":100040201,"comment_content":"感觉这种情况会恶性循环，第一家公司尤为重要<br>那么糟糕程序员诚然有自己的原因，大环境下的各公司开发氛围良莠不齐我感觉才是主因","like_count":3},{"had_liked":false,"id":163078,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1576653423,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10166588015","product_id":100040201,"comment_content":"不用看别人，我的代码就很有问题，主要问题有一，命名，代码的命名是门大学问，看到一本书说是好的命名相当于完成来一部分代码，看点指导性的书还有一些具体的最佳实践，比如说阿里自己的编程规范，github上有，在他那个插件里面。 <br>第二个，设计模式用的不够好，总是if else来写代码，实际上可以借助文中的例子，采用一些设计模式，像工厂模式借助Java的父类和子类，接口解耦来搞一下，防止出现厄运金字塔的代码。","like_count":2,"discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299601,"discussion_content":"简单的逻辑判断就没必要用策略模式这些了，如果判断层级比较多的话可以考虑。你会发现用了设计模式代买脉络会清晰一个数量级。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597746033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349838,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1656378447,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5951345743","product_id":100040201,"comment_content":"良好的设计，应该具有以下品质，可维护性，易读性，可扩展性，可重用性。如何实现这些，从面向对象设计的关键出发，封装 继承 多态，设计准则对应，接口隔离，最小知道原则，等","like_count":1},{"had_liked":false,"id":171596,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1578972262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873939558","product_id":100040201,"comment_content":"1. &quot;你开始犹豫是不是需要跑路了&quot; 过于形象 😂<br>2. 其实很多时候当我们因为需求变更的时候，我们更够感觉到代码正在变坏，好的做法应该是关联地方整体考虑重构；<br>3. 可是有时候有些业务代码真不知道怎么重构，就是一条逻辑，可以抽重来短小的方法，但是却没有别的地方能够重用，这种真实很纠结，不抽出来逻辑太长，不清晰，抽出来吧又没有别的地方重用","like_count":1},{"had_liked":false,"id":161326,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1576194249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871161545","product_id":100040201,"comment_content":"优劣设计案例做对比，最能让人理解到文字所阐述的点，希望老师可以举更多的例子，这样更有收获","like_count":1},{"had_liked":false,"id":351788,"user_name":"AFlymamba","can_delete":false,"product_type":"c1","uid":1359224,"ip_address":"","ucode":"FAEAF3BD3E5146","user_header":"https://static001.geekbang.org/account/avatar/00/14/bd/78/be976ab3.jpg","comment_is_top":false,"comment_ctime":1658196342,"is_pvip":true,"replies":[{"id":"127969","content":"🤗","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1658315419,"ip_address":"","comment_id":351788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1658196342","product_id":100040201,"comment_content":"看吐了是真实，之前接触过一项目，因为银行的某些原因做了分包，拆分为互联网区和 xxx 区。<br><br>新需求看起来挺简单，走 OAuth 授权用授权码换用户信息，返回的数据里面屏蔽几个字段，刚开始用 idea  全局搜索 &#47;oauth 打头的文件定位后，修改、发布测试、测试，看起来很乐观，很简单，但测试一跑数据不对，日志文件显示也改了，最后定位发现他们分包用文件复制方式，一份相同的实体问题在多个地方都有，你只要改了一个点，所有问题必须硬编码改。<br><br>人总是想往好的方向发展，读优秀代码，看优秀开发的相关思路和实现是良性有成长的，看垃圾代码，最后就是抱怨，怀疑人生，甚至变态。","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580671,"discussion_content":"🤗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658315419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343753,"user_name":"010100100001","can_delete":false,"product_type":"c1","uid":2266295,"ip_address":"","ucode":"B315D31F3712FD","user_header":"https://static001.geekbang.org/account/avatar/00/22/94/b7/4f64d3c4.jpg","comment_is_top":false,"comment_ctime":1651039733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651039733","product_id":100040201,"comment_content":"把全局变量通过参数传入，使用依赖注入的方式增加代码的复用性和灵活性","like_count":0},{"had_liked":false,"id":333943,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1644628956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644628956","product_id":100040201,"comment_content":"if&#47;else更顺手。。","like_count":0},{"had_liked":false,"id":290511,"user_name":"书策稠浊","can_delete":false,"product_type":"c1","uid":1307497,"ip_address":"","ucode":"A29875CE15FDA3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","comment_is_top":false,"comment_ctime":1619597624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619597624","product_id":100040201,"comment_content":"boolean fa1se = true;","like_count":0},{"had_liked":false,"id":249736,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1600774882,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1600774882","product_id":100040201,"comment_content":"一直想成为 10X 程序员，虽然还没有达到，但是看到专栏里面讲的，感觉自己的目标有点低了。<br><br>设计腐坏的例子很经典，其实后面还可以有更多的变化。从另一个角度来说，代码还可以更“烂”一些。<br><br>有很大可能自己之前写的代码也是充满坏味道的，需要什么功能，就在方法里面增加一段；需要什么判断，就增加一层 if 语句，代码能运行就算完成任务。一方面不考虑重构，另一方面就是缩写的大多是一些“短命”的应用。<br><br>虽然以前也知道设计模式、SOLID 原则，但是其实并没有想清楚为什么要那么做，李老师在这里算是“点醒梦中人”，是为了需求变更。<br><br>好像李老师还说过，软件开发的上下文就是不断的需求变更。","like_count":0},{"had_liked":false,"id":240008,"user_name":"L","can_delete":false,"product_type":"c1","uid":1310518,"ip_address":"","ucode":"C18B98D3DC3387","user_header":"https://static001.geekbang.org/account/avatar/00/13/ff/36/83281758.jpg","comment_is_top":false,"comment_ctime":1596712167,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1596712167","product_id":100040201,"comment_content":"因为review别人的代码而难受的请假，这这这","like_count":0,"discussions":[{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299602,"discussion_content":"哈哈，这都请假了，那我直接接管别人代码会怎么样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597746099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230535,"user_name":"席席","can_delete":false,"product_type":"c1","uid":1591399,"ip_address":"","ucode":"656377E29D4F76","user_header":"https://static001.geekbang.org/account/avatar/00/18/48/67/128eda8f.jpg","comment_is_top":false,"comment_ctime":1593412624,"is_pvip":false,"replies":[{"id":"85787","content":"我们努力学习更好的技术就是为了提高实践呀~","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1594002789,"ip_address":"","comment_id":230535,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593412624","product_id":100040201,"comment_content":"老师，改造后的打印您是不是没有写纸带机打印的实现类，如果写的话应该是再创建一个纸带机读取类实现读取接口，和一个纸带机输出类实现输出接口。然后最终达到了在别人调用时接口以及类和方法便易于被理解的效果嘛？但我觉得在实践中很少有人会将一个方法写成6个类，因为功能的拆解与抽象似乎边界也很难界定。工作时间上也很难把握。","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499924,"discussion_content":"我们努力学习更好的技术就是为了提高实践呀~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594002789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178503,"user_name":"卡特","can_delete":false,"product_type":"c1","uid":1060491,"ip_address":"","ucode":"FF63677089E701","user_header":"https://static001.geekbang.org/account/avatar/00/10/2e/8b/32a8c5a0.jpg","comment_is_top":false,"comment_ctime":1581725738,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581725738","product_id":100040201,"comment_content":"小结一下：<br>好的代码有如下几个特点：<br>1，易读：代码是写给人看的<br>2，易维护：面向需求变化写代码<br>3，健壮：不会一改动就死掉<br>4，易复用：可以快速的在类似场景中复用，而不是简单的复制粘贴用<br><br>好的程序员产出是糟糕程序员的无数倍。<br>糟糕代码产出是负数。","like_count":0},{"had_liked":false,"id":175014,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1580527268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580527268","product_id":100040201,"comment_content":"编写代码很多时候都是在平衡复用性和灵活性（松耦合）","like_count":0},{"had_liked":false,"id":165765,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1577320079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577320079","product_id":100040201,"comment_content":"说简单点，基础不牢，地动山摇","like_count":0},{"had_liked":false,"id":165763,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1577319888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577319888","product_id":100040201,"comment_content":"差的程序员，在浪费机会成本","like_count":0},{"had_liked":false,"id":163437,"user_name":"灰灰","can_delete":false,"product_type":"c1","uid":1122397,"ip_address":"","ucode":"907A2FD339E158","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/5d/69170b96.jpg","comment_is_top":false,"comment_ctime":1576721282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576721282","product_id":100040201,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":161920,"user_name":"云川","can_delete":false,"product_type":"c1","uid":1087077,"ip_address":"","ucode":"49EC5972B9EB1C","user_header":"https://static001.geekbang.org/account/avatar/00/10/96/65/aaf5985b.jpg","comment_is_top":false,"comment_ctime":1576404606,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576404606","product_id":100040201,"comment_content":"刚刚改造后的例子中，从纸带读取数据不是也要去实现自带的类吗。如果不同程序员对输入和输出有不同的要求，是不是让他们自己实现输入输出接口然后作为参数传入进来？","like_count":0,"discussions":[{"author":{"id":1244702,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fe/1e/378ed6bf.jpg","nickname":"李子木","note":"","ucode":"2255568DC32066","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102388,"discussion_content":"我也有同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577342867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161680,"user_name":"golangboy","can_delete":false,"product_type":"c1","uid":1241559,"ip_address":"","ucode":"7632634FB022F5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/OgopVGSkwlFuyHV0hWtzxjEAQ8qhwQuTeY9BdvXDDTj2JH5d9ZI1hJBnlgaoUcKtrceWVlUejJEUdjCjoKSUAQ/132","comment_is_top":false,"comment_ctime":1576293772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576293772","product_id":100040201,"comment_content":"1. 在写代码前，把逻辑理清楚；<br>2.分离变化和不变的过程，将数据的传输控制和解析处理分离。对于变的地方，函数式编程中用不同的函数去灵活替换，对象编程的话，就用不同对象去替换。这样程序设计面对需求时就灵活了；<br>3.函数适量的拆分，不要太长，太长太丑、看起来累，也花时间；<br>4.函数名不应怕过长，尽可能用表意清晰的函数名，少用简写缩写，那对看的人是灾难，增加沟通成本；<br>5.c语音中尽量用面向对象的方式去设计程序，go中尽量用channel，groutine去设计程序，否则不会有个好的体验。<br>设计模式没有学透，进行程序设计时，一下子想不起那么多特别的约定，除了一些常用的。<br>老师，面试的时候，我就特别怕人问设计模式相关的，一是没学透，不知道怎么说；二是安自已理解的来又怕说错。我反复看设计模式，给我感觉就是变与不变的分离，像我这情况，面试时，面试官会觉设计模式都说不清，代码肯定凌乱，我该怎么应对呢？<br><br>","like_count":0},{"had_liked":false,"id":161534,"user_name":"serverless","can_delete":false,"product_type":"c1","uid":1060695,"ip_address":"","ucode":"1D906FE31FC912","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/57/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1576224961,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576224961","product_id":100040201,"comment_content":"Reader reader = new KeyBoardReader();<br>Writer writer = new Printer():<br>void copy()<br> {  <br>      int c;  <br>      while(c=reader.read() != EOF)    <br>            writer.write(c);<br>}","like_count":0}]}