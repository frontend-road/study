{"id":132851,"title":"42丨如何使用Redis来实现多用户抢票问题","content":"<p>在上一篇文章中，我们已经对Redis有了初步的认识，了解到Redis采用Key-Value的方式进行存储，在Redis内部，使用的是redisObject对象来表示所有的key和value。同时我们还了解到Redis本身用的是单线程的机制，采用了多路I/O复用的技术，在处理多个I/O请求的时候效率很高。</p><p>今天我们来更加深入地了解一下Redis的原理，内容包括以下几方面：</p><ol>\n<li>Redis的事务处理机制是怎样的？与RDBMS有何不同？</li>\n<li>Redis的事务处理的命令都有哪些？如何使用它们完成事务操作？</li>\n<li>如何使用Python的多线程机制和Redis的事务命令模拟多用户抢票？</li>\n</ol><h2>Redis的事务处理机制</h2><p>在此之前，让我们先来回忆下RDBMS中事务满足的4个特性ACID，它们分别代表原子性、一致性、隔离性和持久性。</p><p>Redis的事务处理与RDBMS的事务有一些不同。</p><p>首先Redis不支持事务的回滚机制（Rollback），这也就意味着当事务发生了错误（只要不是语法错误），整个事务依然会继续执行下去，直到事务队列中所有命令都执行完毕。在<a href=\"https://redis.io/topics/transactions\">Redis官方文档</a>中说明了为什么Redis不支持事务回滚。</p><p>只有当编程语法错误的时候，Redis命令执行才会失败。这种错误通常出现在开发环境中，而很少出现在生产环境中，没有必要开发事务回滚功能。</p><!-- [[[read_end]]] --><p>另外，Redis是内存数据库，与基于文件的RDBMS不同，通常只进行内存计算和操作，无法保证持久性。不过Redis也提供了两种持久化的模式，分别是RDB和AOF模式。</p><p>RDB（Redis DataBase）持久化可以把当前进程的数据生成快照保存到磁盘上，触发RDB持久化的方式分为手动触发和自动触发。因为持久化操作与命令操作不是同步进行的，所以无法保证事务的持久性。</p><p>AOF（Append Only File）持久化采用日志的形式记录每个写操作，弥补了RDB在数据一致性上的不足，但是采用AOF模式，就意味着每条执行命令都需要写入文件中，会大大降低Redis的访问性能。启用AOF模式需要手动开启，有3种不同的配置方式，默认为everysec，也就是每秒钟同步一次。其次还有always和no模式，分别代表只要有数据发生修改就会写入AOF文件，以及由操作系统决定什么时候记录到AOF文件中。</p><p>虽然Redis提供了两种持久化的机制，但是作为内存数据库，持久性并不是它的擅长。</p><p>Redis是单线程程序，在事务执行时不会中断事务，其他客户端提交的各种操作都无法执行，因此你可以理解为Redis的事务处理是串行化的方式，总是具有隔离性的。</p><h2>Redis的事务处理命令</h2><p>了解了Redis的事务处理机制之后，我们来看下Redis的事务处理都包括哪些命令。</p><ol>\n<li>MULTI：开启一个事务；</li>\n<li>EXEC：事务执行，将一次性执行事务内的所有命令；</li>\n<li>DISCARD：取消事务；</li>\n<li>WATCH：监视一个或多个键，如果事务执行前某个键发生了改动，那么事务也会被打断；</li>\n<li>UNWATCH：取消WATCH命令对所有键的监视。</li>\n</ol><p>需要说明的是Redis实现事务是基于COMMAND队列，如果Redis没有开启事务，那么任何的COMMAND都会立即执行并返回结果。如果Redis开启了事务，COMMAND命令会放到队列中，并且返回排队的状态QUEUED，只有调用EXEC，才会执行COMMAND队列中的命令。</p><p>比如我们使用事务的方式存储5名玩家所选英雄的信息，代码如下：</p><pre><code>MULTI\nhmset user:001 hero 'zhangfei' hp_max 8341 mp_max 100\nhmset user:002 hero 'guanyu' hp_max 7107 mp_max 10\nhmset user:003 hero 'liubei' hp_max 6900 mp_max 1742\nhmset user:004 hero 'dianwei' hp_max 7516 mp_max 1774\nhmset user:005 hero 'diaochan' hp_max 5611 mp_max 1960\nEXEC\n</code></pre><p>你能看到在MULTI和EXEC之间的COMMAND命令都会被放到COMMAND队列中，并返回排队的状态，只有当EXEC调用时才会一次性全部执行。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/06/4aa62797167f41599b9e514d77fc0a06.png?wh=1730*868\" alt=\"\"><br>\n我们经常使用Redis的WATCH和MULTI命令来处理共享资源的并发操作，比如秒杀，抢票等。实际上WATCH+MULTI实现的是乐观锁。下面我们用两个Redis客户端来模拟下抢票的流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/41/95e294bfb6843ef65beff61ca0bc3a41.png?wh=829*388\" alt=\"\"><br>\n我们启动Redis客户端1，执行上面的语句，然后在执行EXEC前，等待客户端2先完成上面的执行，客户端2的结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/1b/ebbadb4698e80d81dbf7c62a21dbec1b.png?wh=775*478\" alt=\"\"><br>\n然后客户端1执行EXEC，结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/f8/6b23c9efcdbe1f349299fc32d41ab0f8.png?wh=766*506\" alt=\"\"><br>\n你能看到实际上最后一张票被客户端2抢到了，这是因为客户端1WATCH的票的变量在EXEC之前发生了变化，整个事务就被打断，返回空回复（nil）。</p><p>需要说明的是MULTI后不能再执行WATCH命令，否则会返回WATCH inside MULTI is not allowed错误（因为WATCH代表的就是在执行事务前观察变量是否发生了改变，如果变量改变了就将事务打断，所以在事务执行之前，也就是MULTI之前，使用WATCH）。同时，如果在执行命令过程中有语法错误，Redis也会报错，整个事务也不会被执行，Redis会忽略运行时发生的错误，不会影响到后面的执行。</p><h2>模拟多用户抢票</h2><p>我们刚才讲解了Redis的事务命令，并且使用Redis客户端的方式模拟了两个用户抢票的流程。下面我们使用Python继续模拟一下这个过程，这里需要注意三点。</p><p>在Python中，Redis事务是通过pipeline封装而实现的，因此在创建Redis连接后，需要获取管道pipeline，然后通过pipeline使用WATCH、MULTI和EXEC命令。</p><p>其次，用户是并发操作的，因此我们需要使用到Python的多线程，这里使用threading库来创建多线程。</p><p>对于用户的抢票，我们设置了sell函数，用于模拟用户i的抢票。在执行MULTI前，我们需要先使用pipe.watch(KEY)监视票数，如果票数不大于0，则说明票卖完了，用户抢票失败；如果票数大于0，证明可以抢票，再执行MULTI，将票数减1并进行提交。不过在提交执行的时候可能会失败，这是因为如果监视的KEY发生了改变，则会产生异常，我们可以通过捕获异常，来提示用户抢票失败，重试一次。如果成功执行事务，则提示用户抢票成功，显示当前的剩余票数。</p><p>具体代码如下：</p><pre><code>import redis\nimport threading\n# 创建连接池\npool = redis.ConnectionPool(host = '127.0.0.1', port=6379, db=0)\n# 初始化 redis\nr = redis.StrictRedis(connection_pool = pool)\n\n# 设置KEY\nKEY=&quot;ticket_count&quot;\n# 模拟第i个用户进行抢票\ndef sell(i):\n    # 初始化 pipe\n    pipe = r.pipeline()\n    while True:\n        try:\n            # 监视票数\n            pipe.watch(KEY)\n            # 查看票数\n            c = int(pipe.get(KEY))      \n            if c &gt; 0:\n                # 开始事务\n                pipe.multi()            \n                c = c - 1\n                pipe.set(KEY, c)        \n                pipe.execute()\n                print('用户 {} 抢票成功，当前票数 {}'.format(i, c))\n                break\n            else:\n                print('用户 {} 抢票失败，票卖完了'.format(i))\n                break\n        except Exception as e:\n            print('用户 {} 抢票失败，重试一次'.format(i))\n            continue\n        finally:\n            pipe.unwatch()\n\nif __name__ == &quot;__main__&quot;:\n    # 初始化5张票\n    r.set(KEY, 5)  \n    # 设置8个人抢票\n    for i in range(8):\n        t = threading.Thread(target=sell, args=(i,))\n        t.start()\n</code></pre><p>运行结果：</p><pre><code>用户 0 抢票成功，当前票数 4\n用户 4 抢票失败，重试一次\n用户 1 抢票成功，当前票数 3\n用户 2 抢票成功，当前票数 2\n用户 4 抢票失败，重试一次\n用户 5 抢票失败，重试一次\n用户 6 抢票成功，当前票数 1\n用户 4 抢票成功，当前票数 0\n用户 5 抢票失败，重试一次\n用户 3 抢票失败，重试一次\n用户 7 抢票失败，票卖完了\n用户 5 抢票失败，票卖完了\n用户 3 抢票失败，票卖完了\n</code></pre><p>在Redis中不存在悲观锁，事务处理要考虑到并发请求的情况，我们需要通过WATCH+MULTI的方式来实现乐观锁，如果监视的KEY没有发生变化则可以顺利执行事务，否则说明事务的安全性已经受到了破坏，服务器就会放弃执行这个事务，直接向客户端返回空回复（nil），事务执行失败后，我们可以重新进行尝试。</p><h2>总结</h2><p>今天我讲解了Redis的事务机制，Redis事务是一系列Redis命令的集合，事务中的所有命令都会按照顺序进行执行，并且在执行过程中不会受到其他客户端的干扰。不过在事务的执行中，Redis可能会遇到下面两种错误的情况：</p><p>首先是语法错误，也就是在Redis命令入队时发生的语法错误。Redis在事务执行前不允许有语法错误，如果出现，则会导致事务执行失败。如官方文档所说，通常这种情况在生产环境中很少出现，一般会发生在开发环境中，如果遇到了这种语法错误，就需要开发人员自行纠错。</p><p>第二个是执行时错误，也就是在事务执行时发生的错误，比如处理了错误类型的键等，这种错误并非语法错误，Redis只有在实际执行中才能判断出来。不过Redis不提供回滚机制，因此当发生这类错误时Redis会继续执行下去，保证其他命令的正常执行。</p><p>在事务处理中，我们需要通过锁的机制来解决共享资源并发访问的情况。在Redis中提供了WATCH+MULTI的乐观锁方式。我们之前了解过乐观锁是一种思想，它是通过程序实现的锁机制，在数据更新的时候进行判断，成功就执行，不成功就失败，不需要等待其他事务来释放锁。事实上，在在Redis的设计中，处处体现了这种乐观、简单的设计理念。</p><p><img src=\"\" alt=\"\"></p><p>最后我们一起思考两个问题吧。Redis既然是单线程程序，在执行事务过程中按照顺序执行，为什么还会用WATCH+MULTI的方式来实现乐观锁的并发控制呢？</p><p>我们在进行抢票模拟的时候，列举了两个Redis客户端的例子，当WATCH的键ticket发生改变的时候，事务就会被打断。这里我将客户端2的SET ticket设置为1，也就是ticket的数值没有发生变化，请问此时客户端1和客户端2的执行结果是怎样的，为什么？</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/44/d4bb30f5d415ea93980c465e4f110544.png?wh=899*421\" alt=\"\"></p><p>欢迎你在评论区写下你的思考，我会和你一起交流，也欢迎你把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"41丨初识Redis：Redis为什么会这么快？","id":132412},"right":{"article_title":"43丨如何使用Redis搭建玩家排行榜？","id":134595}},"comments":[{"had_liked":false,"id":132204,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1568042220,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"100352290028","product_id":100029501,"comment_content":"思考题：<br>1、redis服务器只支持单进程单线程，但是redis的客户端可以有多个，为了保证一连串动作的原子性，所以要支持事务。<br>2、客户端2成功，客户端1失败。这个问题类似于Java并发的CAS的ABA问题。redis应该是除了看ticket的值外，每个key还有一个隐藏的类似于版本的属性。","like_count":24,"discussions":[{"author":{"id":1012325,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","nickname":"雪飞鸿","note":"","ucode":"65D7B030828809","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49474,"discussion_content":"Redis事务保证的不是原子性，只保证同一事务中的命令不间断执行。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1573604801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131986,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1567999483,"is_pvip":false,"replies":[{"id":"50431","content":"对的，客户端2 即使SET ticket的数值没有变化，也是对ticket进行了“修改”，也就是数据的版本发生了变化，因此和文章中的例子一样，客户端2会返回OK，客户端1是 nil","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1568004654,"ip_address":"","comment_id":131986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74582443515","product_id":100029501,"comment_content":"客户端2首先返回 OK，客户端1返回 nil 。","like_count":17,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466713,"discussion_content":"对的，客户端2 即使SET ticket的数值没有变化，也是对ticket进行了“修改”，也就是数据的版本发生了变化，因此和文章中的例子一样，客户端2会返回OK，客户端1是 nil","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568004654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131987,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1567999605,"is_pvip":false,"replies":[{"id":"50432","content":"对的，单线程不一定代表要执行的事务的条件都满足，因为其他客户端的命令可能会在WATCH之后修改了KEY的值（如文中例子），导致事务条件不满足，打断事务执行的情况。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1568004908,"ip_address":"","comment_id":131987,"utype":1}],"discussion_count":2,"race_medal":0,"score":"65992509045","product_id":100029501,"comment_content":"单线程的REDIS也采用事物，我觉得主要是用来监视自己是否可以执行的条件是否得以满足，尤其是这个条件有可能不在REDIS自身的控制范围之内的时候。","like_count":15,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466714,"discussion_content":"对的，单线程不一定代表要执行的事务的条件都满足，因为其他客户端的命令可能会在WATCH之后修改了KEY的值（如文中例子），导致事务条件不满足，打断事务执行的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568004908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1582134,"avatar":"https://static001.geekbang.org/account/avatar/00/18/24/36/1c4af368.jpg","nickname":"TheOne","note":"","ucode":"2A359780156A8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392580,"discussion_content":"难道要的不就是打断事务吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631065175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169654,"user_name":"花见笑","can_delete":false,"product_type":"c1","uid":1219485,"ip_address":"","ucode":"8A5122BC11E695","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/9d/d487c368.jpg","comment_is_top":false,"comment_ctime":1578398322,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"27348202098","product_id":100029501,"comment_content":"推荐使用 Redis 脚本功能 来代替事务 性能高出很多","like_count":6,"discussions":[{"author":{"id":1504671,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/9f/1509d389.jpg","nickname":"栾~龟虽寿！","note":"","ucode":"219B38C08979FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257997,"discussion_content":"最少也告诉我们，google什么关键字","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588639722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1436683,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ec/0b/009fe3f2.jpg","nickname":"弓虽","note":"","ucode":"A466600EA184A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1504671,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/9f/1509d389.jpg","nickname":"栾~龟虽寿！","note":"","ucode":"219B38C08979FE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263273,"discussion_content":"推荐使用lua两本进行redis事务控制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589194599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":257997,"ip_address":""},"score":263273,"extra":""},{"author":{"id":1504671,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/9f/1509d389.jpg","nickname":"栾~龟虽寿！","note":"","ucode":"219B38C08979FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1436683,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ec/0b/009fe3f2.jpg","nickname":"弓虽","note":"","ucode":"A466600EA184A4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264592,"discussion_content":"感谢您了，还是不懂，估计是我能力问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589335559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":263273,"ip_address":""},"score":264592,"extra":""}]},{"author":{"id":1794060,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/60/0c/e1f012cb.jpg","nickname":"frankie","note":"","ucode":"813D1352B68A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218036,"discussion_content":"老哥，深入讲一下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585616096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1024164,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/a4/b060c723.jpg","nickname":"阿斯蒂芬","note":"","ucode":"61D5E3BDA4EBC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1794060,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/60/0c/e1f012cb.jpg","nickname":"frankie","note":"","ucode":"813D1352B68A21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281230,"discussion_content":"lua脚本可以保持原子性，在redis服务端层面保证了同一时刻只有一个脚本被解释运行\n中文相关传送门：http://redisdoc.com/script/eval.html#id1\n更多信息建议上官网 https://redis.io/commands/eval#atomicity-of-scripts","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591696449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":218036,"ip_address":""},"score":281230,"extra":""}]}]},{"had_liked":false,"id":143381,"user_name":"godfish","can_delete":false,"product_type":"c1","uid":1103211,"ip_address":"","ucode":"6516636F5F764E","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/6b/03c290de.jpg","comment_is_top":false,"comment_ctime":1571702590,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27341506366","product_id":100029501,"comment_content":"抢票那个我有个问题是如果ticket大于1的情况，因为watch了key，客户端1岂不是也抢票失败了？实际上不应该失败吧。或者是这里ticket的1不是代表数量代表其中一张票？","like_count":6,"discussions":[{"author":{"id":1012325,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","nickname":"雪飞鸿","note":"","ucode":"65D7B030828809","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49476,"discussion_content":"应该库存减一，结果小于等于0表示抢票失败","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573604986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131969,"user_name":"steve","can_delete":false,"product_type":"c1","uid":1354489,"ip_address":"","ucode":"AB6D3E9FF8E77C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJETibDh9wrP19gj9VdlLRmppuG1FibI7nyUGldEXCnoqKibKIB18UMxyEHBkZNlf5vibLNeofiaN5U6Hw/132","comment_is_top":false,"comment_ctime":1567996177,"is_pvip":false,"replies":[{"id":"50433","content":"可以的，使用DECR 可以实现原子性的递减","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1568005055,"ip_address":"","comment_id":131969,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23042832657","product_id":100029501,"comment_content":"是否能用DECR实现呢？","like_count":5,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466701,"discussion_content":"可以的，使用DECR 可以实现原子性的递减","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568005055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131949,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1567990662,"is_pvip":false,"replies":[{"id":"63506","content":"Good Job","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577515251,"ip_address":"","comment_id":131949,"utype":1}],"discussion_count":2,"race_medal":1,"score":"23042827142","product_id":100029501,"comment_content":"返回结果跟之前一样，因为客户端1还是因为key变化了执行失败","like_count":5,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466691,"discussion_content":"Good Job","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577515251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8396,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567995013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155950,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1574781508,"is_pvip":false,"replies":[{"id":"62618","content":"嗯 Docker很方便","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577077973,"ip_address":"","comment_id":155950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14459683396","product_id":100029501,"comment_content":"推荐大家在Docker容器里面搭建各种开发环境,方便而且又不用配置特别多东西.以前我是在Windows上直接部署MySQL作为开发环境,后来就换到Docker了,才发现那么方便!~","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475935,"discussion_content":"嗯 Docker很方便","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577077973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360284,"user_name":"明月","can_delete":false,"product_type":"c1","uid":1070166,"ip_address":"陕西","ucode":"E180B0EC24EFE8","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/56/5a5098d1.jpg","comment_is_top":false,"comment_ctime":1666398910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666398910","product_id":100029501,"comment_content":"不是串行化事物了么，没有问题","like_count":0},{"had_liked":false,"id":315321,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1633831695,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1633831695","product_id":100029501,"comment_content":"虽然Redis是单线程的，但是多个客户端进行多个操作时却无法保证原子性，也就是说多个指令是交叉执行的","like_count":0,"discussions":[{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531347,"discussion_content":"多个客户端进行多个操作Redis时，也是由Redis单线程模型执行的，不存在相同资源的竞态访问。你说的这个原因不成立。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637290743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255844,"user_name":"大橘为重","can_delete":false,"product_type":"c1","uid":1104566,"ip_address":"","ucode":"E64EB8A9E23A18","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/b6/5f80d0dc.jpg","comment_is_top":false,"comment_ctime":1603442175,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603442175","product_id":100029501,"comment_content":"用 redis lua script 来实现更方便","like_count":0},{"had_liked":false,"id":231566,"user_name":"上校","can_delete":false,"product_type":"c1","uid":1069548,"ip_address":"","ucode":"DEE1CEE9E4C680","user_header":"https://static001.geekbang.org/account/avatar/00/10/51/ec/3d51d5e6.jpg","comment_is_top":false,"comment_ctime":1593708889,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1593708889","product_id":100029501,"comment_content":"redis内抢完票如何同步到mysql呢？如何和mysql最终一致性？是通过持久化？还是说抢票成功就同步呢？老师有没有经验分享？谢谢","like_count":0,"discussions":[{"author":{"id":2172386,"avatar":"https://static001.geekbang.org/account/avatar/00/21/25/e2/cfb43a8e.jpg","nickname":"互联网砖瓦匠","note":"","ucode":"107F18AD8E6DA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366982,"discussion_content":"抢票成功扔到消息队列然后更新到数据库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618230454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224538,"user_name":"小白菜","can_delete":false,"product_type":"c1","uid":1568340,"ip_address":"","ucode":"ACD1267D329B96","user_header":"https://static001.geekbang.org/account/avatar/00/17/ee/54/dac0a6b6.jpg","comment_is_top":false,"comment_ctime":1591434294,"is_pvip":false,"replies":[{"id":"82642","content":"嗯嗯 后面有机会再拓展写下","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1591441907,"ip_address":"","comment_id":224538,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591434294","product_id":100029501,"comment_content":"总感觉后面这几篇讲的Redis,有点浅显，抛砖引玉一下。可能由于篇幅的缘故吧！","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497514,"discussion_content":"嗯嗯 后面有机会再拓展写下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591441907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195901,"user_name":"博弈","can_delete":false,"product_type":"c1","uid":1433344,"ip_address":"","ucode":"B1A69837E41972","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EcYNib1bnDf5dz6JcrE8AoyZYMdqic2VNmbBtCcVZTO9EoDZZxqlQDEqQKo6klCCmklOtN9m0dTd2AOXqSneJYLw/132","comment_is_top":false,"comment_ctime":1585222958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585222958","product_id":100029501,"comment_content":"问题一：我认为是用来判断当前事务执行得条件是否满足<br>问题二：这是ABA问题，每变化一次，相应的版本也会跟着变化","like_count":0},{"had_liked":false,"id":188598,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1584373285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584373285","product_id":100029501,"comment_content":"Redis 集群的情况下，会不会抢票就因此不适用？","like_count":0},{"had_liked":false,"id":146306,"user_name":"扶幽","can_delete":false,"product_type":"c1","uid":1322612,"ip_address":"","ucode":"1400EDFF8970D3","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/74/88c613e0.jpg","comment_is_top":false,"comment_ctime":1572493123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572493123","product_id":100029501,"comment_content":"思考题：<br>1，Redis是单线程程序，多个客户端在并发访问的时候要在多个线程间切换来交替执行，所以还是要进行并发控制。<br>2，？？","like_count":0},{"had_liked":false,"id":132482,"user_name":"水如天","can_delete":false,"product_type":"c1","uid":1069822,"ip_address":"","ucode":"50AE29168947CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/fe/1241bc83.jpg","comment_is_top":false,"comment_ctime":1568131922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568131922","product_id":100029501,"comment_content":"能分析下JSON类型的存储和查询原理吗","like_count":0},{"had_liked":false,"id":131985,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1567999432,"is_pvip":false,"replies":[{"id":"63505","content":"对的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577515235,"ip_address":"","comment_id":131985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567999432","product_id":100029501,"comment_content":"对于第一个问题，我觉得原因在于WATCH+MULTI主要是事物来监视自身执行得以的条件是否满足的","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466712,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577515235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131971,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1567996552,"is_pvip":false,"replies":[{"id":"50430","content":"对 串行化的，所以同一时刻也会进行串行化的处理，比如顺序为：客户端1 watch -&gt; 客户端2 watch，或者是 客户端2 watch -&gt; 客户端1watch，都有可能。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1568004474,"ip_address":"","comment_id":131971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567996552","product_id":100029501,"comment_content":"上面的抢票时序，Redis是串行化的，不能在T2时刻同时两个客户端都执行Watch吧。","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466703,"discussion_content":"对 串行化的，所以同一时刻也会进行串行化的处理，比如顺序为：客户端1 watch -&amp;gt; 客户端2 watch，或者是 客户端2 watch -&amp;gt; 客户端1watch，都有可能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568004474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}