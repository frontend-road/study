{"id":100554,"title":"21 | 面向流水线的指令设计（下）：奔腾4是怎么失败的？","content":"<p>上一讲，我给你初步介绍了CPU的流水线技术。乍看起来，流水线技术是一个提升性能的灵丹妙药。它通过把一条指令的操作切分成更细的多个步骤，可以避免CPU“浪费”。每一个细分的流水线步骤都很简单，所以我们的单个时钟周期的时间就可以设得更短。这也变相地让CPU的主频提升得很快。</p><p>这一系列的优点，也引出了现代桌面CPU的最后一场大战，也就是Intel的Pentium 4和AMD的Athlon之间的竞争。在技术上，这场大战Intel可以说输得非常彻底，Pentium 4系列以及后续Pentium D系列所使用的NetBurst架构被完全抛弃，退出了历史舞台。但是在商业层面，Intel却通过远超过AMD的财力、原本就更大的市场份额、无所不用的竞争手段，以及最终壮士断腕般放弃整个NetBurst架构，最终依靠新的酷睿品牌战胜了AMD。</p><p>在此之后，整个CPU领域竞争的焦点，不再是Intel和AMD之间的桌面CPU之战。在ARM架构通过智能手机的快速普及，后来居上，超越Intel之后，移动时代的CPU之战，变成了高通、华为麒麟和三星之间的“三国演义”。</p><h2>“主频战争”带来的超长流水线</h2><p>我们在<a href=\"https://time.geekbang.org/column/article/92215\">第3讲</a>里讲过，我们其实并不能简单地通过CPU的主频，就来衡量CPU乃至计算机整机的性能。因为不同的CPU实际的体系架构和实现都不一样。同样的CPU主频，实际的性能可能差别很大。所以，在工业界，更好的衡量方式通常是，用SPEC这样的跑分程序，从多个不同的实际应用场景，来衡量计算机的性能。</p><!-- [[[read_end]]] --><p>但是，跑分对于消费者来说还是太复杂了。在Pentium 4的CPU面世之前，绝大部分消费者并不是根据跑分结果来判断CPU的性能的。大家判断一个CPU的性能，通常只看CPU的主频。而CPU的厂商们也通过不停地提升主频，把主频当成技术竞赛的核心指标。</p><p>Intel一向在“主频战争”中保持领先，但是到了世纪之交的1999年到2000年，情况发生了变化。</p><p>1999年，AMD发布了基于K7架构的Athlon处理器，其综合性能超越了当年的Pentium III。2000年，在大部分CPU还在500～850MHz的频率下运行的时候，AMD推出了第一代Athlon 1000处理器，成为第一款1GHz主频的消费级CPU。在2000年前后，AMD的CPU不但性能和主频比Intel的要强，价格还往往只有Intel的2/3。</p><p>在巨大的外部压力之下，Intel在2001年推出了新一代的NetBurst架构CPU，也就是Pentium 4和Pentium D。Pentium 4的CPU有个最大的特点，就是高主频。2000年的Athlon 1000的主频在当时是最高的，1GHz，然而Pentium 4设计的目标最高主频是10GHz。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/f8/9bcdc5d5c7c1342085d70fe50d5190f8.jpeg?wh=1819*1783\" alt=\"\"></p><p>为了达到这个10GHz，Intel的工程师做出了一个重大的错误决策，就是在NetBurst架构上，使用超长的流水线。这个超长流水线有多长呢？我们拿在Pentium 4之前和之后的CPU的数字做个比较，你就知道了。</p><p>Pentium 4之前的Pentium III CPU，流水线的深度是11级，也就是一条指令最多会拆分成11个更小的步骤来操作，而CPU同时也最多会执行11条指令的不同Stage。随着技术发展到今天，你日常用的手机ARM的CPU或者Intel  i7服务器的CPU，流水线的深度是14级。</p><p>可以看到，差不多20年过去了，通过技术进步，现代CPU还是增加了一些流水线深度的。那2000年发布的Pentium 4的流水线深度是多少呢？答案是20级，比Pentium III差不多多了一倍，而到了代号为Prescott的90纳米工艺处理器Pentium 4，Intel更是把流水线深度增加到了31级。</p><p>要知道，增加流水线深度，在同主频下，其实是降低了CPU的性能。因为一个Pipeline Stage，就需要一个时钟周期。那么我们把任务拆分成31个阶段，就需要31个时钟周期才能完成一个任务；而把任务拆分成11个阶段，就只需要11个时钟周期就能完成任务。在这种情况下，31个Stage的3GHz主频的CPU，其实和11个Stage的1GHz主频的CPU，性能是差不多的。事实上，因为每个Stage都需要有对应的Pipeline寄存器的开销，这个时候，更深的流水线性能可能还会更差一些。</p><p>我在上一讲也说过，流水线技术并不能缩短单条指令的<strong>响应时间</strong>这个性能指标，但是可以增加在运行很多条指令时候的<strong>吞吐率</strong>。因为不同的指令，实际执行需要的时间是不同的。我们可以看这样一个例子。我们顺序执行这样三条指令。</p><ol>\n<li>一条整数的加法，需要200ps。</li>\n<li>一条整数的乘法，需要300ps。</li>\n<li>一条浮点数的乘法，需要600ps。</li>\n</ol><p>如果我们是在单指令周期的CPU上运行，最复杂的指令是一条浮点数乘法，那就需要600ps。那这三条指令，都需要600ps。三条指令的执行时间，就需要1800ps。</p><p>如果我们采用的是6级流水线CPU，每一个Pipeline的Stage都只需要100ps。那么，在这三个指令的执行过程中，在指令1的第一个100ps的Stage结束之后，第二条指令就开始执行了。在第二条指令的第一个100ps的Stage结束之后，第三条指令就开始执行了。这种情况下，这三条指令顺序执行所需要的总时间，就是800ps。那么在1800ps内，使用流水线的CPU比单指令周期的CPU就可以多执行一倍以上的指令数。</p><p>虽然每一条指令从开始到结束拿到结果的时间并没有变化，也就是响应时间没有变化。但是同样时间内，完成的指令数增多了，也就是吞吐率上升了。</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/6a/b055676975e68a7d4014e46969058f6a.jpeg?wh=1444*2266\" alt=\"\"></p><h2>新的挑战：冒险和分支预测</h2><p>那到这里可能你就要问了，这样看起来不是很好么？Intel的CPU支持的指令集很大，我们之前说过有2000多条指令。有些指令很简单，执行也很快，比如无条件跳转指令，不需要通过ALU进行任何计算，只要更新一下PC寄存器里面的内容就好了。而有些指令很复杂，比如浮点数的运算，需要进行指数位比较、对齐，然后对有效位进行移位，然后再进行计算。两者的执行时间相差二三十倍也很正常。</p><p>既然这样，Pentium 4的超长流水线看起来很合理呀，为什么Pentium 4最终成为Intel在技术架构层面的大失败呢？</p><p><strong>第一个，自然是我们在第3讲里讲过的功耗问题</strong>。提升流水线深度，必须要和提升CPU主频同时进行。因为在单个Pipeline Stage能够执行的功能变简单了，也就意味着单个时钟周期内能够完成的事情变少了。所以，只有提升时钟周期，CPU在指令的响应时间这个指标上才能保持和原来相同的性能。</p><p>同时，由于流水线深度的增加，我们需要的电路数量变多了，也就是我们所使用的晶体管也就变多了。</p><p>主频的提升和晶体管数量的增加都使得我们CPU的功耗变大了。这个问题导致了Pentium 4在整个生命周期里，都成为了耗电和散热的大户。而Pentium 4是在2000～2004年作为Intel的主打CPU出现在市场上的。这个时间段，正是笔记本电脑市场快速发展的时间。在笔记本电脑上，功耗和散热比起台式机是一个更严重的问题了。即使性能更好，别人的笔记本可以用上2小时，你的只能用30分钟，那谁也不爱买啊！</p><p>更何况，Pentium 4的性能还更差一些。<strong>这个就要我们说到第二点了，就是上面说的流水线技术带来的性能提升，是一个理想情况。在实际的程序执行中，并不一定能够做得到</strong>。</p><p>还回到我们刚才举的三条指令的例子。如果这三条指令，是下面这样的三条代码，会发生什么情况呢？</p><pre><code>int a = 10 + 5; // 指令1\nint b = a * 2; // 指令2\nfloat c = b * 1.0f; // 指令3\n</code></pre><p>我们会发现，指令2，不能在指令1的第一个Stage执行完成之后进行。因为指令2，依赖指令1的计算结果。同样的，指令3也要依赖指令2的计算结果。这样，即使我们采用了流水线技术，这三条指令执行完成的时间，也是 200 + 300 + 600 = 1100 ps，而不是之前说的 800ps。而如果指令1和2都是浮点数运算，需要600ps。那这个依赖关系会导致我们需要的时间变成1800ps，和单指令周期CPU所要花费的时间是一样的。</p><p>这个依赖问题，就是我们在计算机组成里面所说的<strong>冒险</strong>（Hazard）问题。这里我们只列举了在数据层面的依赖，也就是数据冒险。在实际应用中，还会有<strong>结构冒险、控制冒险</strong>等其他的依赖问题。</p><p>对应这些冒险问题，我们也有在<strong>乱序执行</strong>、<strong>分支预测</strong>等相应的解决方案。我们在后面的几讲里面，会详细讲解对应的知识。</p><p>但是，我们的流水线越长，这个冒险的问题就越难一解决。这是因为，同一时间同时在运行的指令太多了。如果我们只有3级流水线，我们可以把后面没有依赖关系的指令放到前面来执行。这个就是我们所说的乱序执行的技术。比方说，我们可以扩展一下上面的3行代码，再加上几行代码。</p><pre><code>int a = 10 + 5; // 指令1\nint b = a * 2; // 指令2\nfloat c = b * 1.0f; // 指令3\nint x = 10 + 5; // 指令4\nint y = a * 2; // 指令5\nfloat z = b * 1.0f; // 指令6\nint o = 10 + 5; // 指令7\nint p = a * 2; // 指令8\nfloat q = b * 1.0f; // 指令9\n</code></pre><p>我们可以不先执行1、2、3这三条指令，而是在流水线里，先执行1、4、7三条指令。这三条指令之间是没有依赖关系的。然后再执行2、5、8以及3、6、9。这样，我们又能够充分利用CPU的计算能力了。</p><p>但是，如果我们有20级流水线，意味着我们要确保这20条指令之间没有依赖关系。这个挑战一下子就变大了很多。毕竟我们平时撰写程序，通常前后的代码都是有一定的依赖关系的，几十条没有依赖关系的指令可不好找。这也是为什么，超长流水线的执行效率发而降低了的一个重要原因。</p><h2>总结延伸</h2><p>相信到这里，你对CPU的流水线技术，有了一个更加深入的了解。你会发现，流水线技术和其他技术一样，都讲究一个“折衷”（Trade-Off）。一个合理的流水线深度，会提升我们CPU执行计算机指令的吞吐率。我们一般用IPC（Instruction Per Cycle）来衡量CPU执行指令的效率。</p><p>IPC呢，其实就是我们之前在第3讲讲的CPI（Cycle Per Instruction）的倒数。也就是说， IPC = 3对应着CPI = 0.33。Pentium 4和Pentium D的IPC都远低于自己上一代的Pentium III以及竞争对手AMD的Athlon CPU。</p><p>过深的流水线，不仅不能提升计算机指令的吞吐率，更会加大计算的功耗和散热问题。Intel自己在笔记本电脑市场，也很快放弃了Pentium 4，而是主推了使用Pentium III架构的图拉丁CPU。</p><p>而流水线带来的吞吐率提升，只是一个理想情况下的理论值。在实践的应用过程中，还需要解决指令之间的依赖问题。这个使得我们的流水线，特别是超长的流水线的执行效率变得很低。要想解决好<strong>冒险</strong>的依赖关系问题，我们需要引入乱序执行、分支预测等技术，这也是我在后面几讲里面要详细讲解的内容。</p><h2>推荐阅读</h2><p>除了之前的教科书之外，我推荐你读一读<a href=\"http://www.lighterra.com/papers/modernmicroprocessors/\">Modern Microprocessors, A 90-Minute Guide!</a>这篇文章。这篇文章用比较浅显的方式，介绍了现代CPU设计的多个方面，很适合作为一个周末读物，快速理解现代CPU的设计。</p><h2>课后思考</h2><p>除了我们这里提到的数据层面的依赖，你能找找我们在程序的执行过程中，其他的依赖情况么？这些依赖情况又属于我们说的哪一种冒险呢？</p><p>欢迎留言和我分享你的疑惑和见解。你也可以把今天的内容，分享给你的朋友，和他一起学习和进步。</p><p></p>","comments":[{"had_liked":false,"id":106275,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1561252607,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"263554257663","product_id":100026001,"comment_content":"老师好!所以Java在编译成机器码的时候会设计到指令重排序，就是为了把没有依赖关系的指令放一起，可以用流水线并发来提高效率是么?。然后再多线程里面就会采用一些关键字volatile禁止指令重排，保证数据在多线程之间的可见性。<br>","like_count":62,"discussions":[{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135744,"discussion_content":"举一反三牛逼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579100121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38247,"discussion_content":"感觉把知识串联起来了，棒棒哒","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571751115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2332551,"avatar":"https://static001.geekbang.org/account/avatar/00/23/97/87/e0a840ac.jpg","nickname":"午饭 、","note":"","ucode":"F6E5E6F6F97664","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556616,"discussion_content":"你把这些知识都联系起来了，平时大家都叫你学霸的是吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647427066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2766345,"avatar":"","nickname":"moyMuYi","note":"","ucode":"40DEAD71E8439A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555453,"discussion_content":"太强了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646909250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738119,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/87/727142bc.jpg","nickname":"MacBao","note":"","ucode":"8CF51C3688C8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379139,"discussion_content":"memory barrier 内存屏障","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623724767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131070,"avatar":"https://static001.geekbang.org/account/avatar/00/11/42/3e/c1f76202.jpg","nickname":"青山","note":"","ucode":"749BAD1834AC0F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377568,"discussion_content":"哈哈哈哈,厉害学到这里就想到了java为什么会指令重排","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622711798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1367877,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/VqgchrJWswwSLmxf1ict6icDDlZG5wChBEiaiblnJAQEdu1nYtB4EZq07mibUurOSDFr16dho6DhGyOpIW4eib57lK8Q/132","nickname":"箭指流云","note":"","ucode":"21571A7D60B10D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351631,"discussion_content":"你说的挺有道理，爆赞  哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614351915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1388314,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/4RdOss6AW97KUaufOFIhQGMWJoRJvSZiayJBa36ic0A3M27hUFSBZhy4ZoXOp6gj1apln2N86icZEg1Z1f5PLEp8A/132","nickname":"Geek_wuming","note":"","ucode":"AE749892284E3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296850,"discussion_content":"volatile还有这功能？你是对volatile有什么误解把","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596685765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2303222,"avatar":"","nickname":"Geek_f7bc9b","note":"","ucode":"83EBA43585B2B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1388314,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/4RdOss6AW97KUaufOFIhQGMWJoRJvSZiayJBa36ic0A3M27hUFSBZhy4ZoXOp6gj1apln2N86icZEg1Z1f5PLEp8A/132","nickname":"Geek_wuming","note":"","ucode":"AE749892284E3B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327804,"discussion_content":"java 里面确实有，c++里面应该是没有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605956105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296850,"ip_address":""},"score":327804,"extra":""},{"author":{"id":2067529,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8c/49/4cf3c55c.jpg","nickname":"Java","note":"","ucode":"861851696E776A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1388314,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/4RdOss6AW97KUaufOFIhQGMWJoRJvSZiayJBa36ic0A3M27hUFSBZhy4ZoXOp6gj1apln2N86icZEg1Z1f5PLEp8A/132","nickname":"Geek_wuming","note":"","ucode":"AE749892284E3B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334764,"discussion_content":"少年 你是对Java有什么问题吧 好好补基础吧","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1607961150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296850,"ip_address":""},"score":334764,"extra":""}]}]},{"had_liked":false,"id":270526,"user_name":"H","can_delete":false,"product_type":"c1","uid":1793962,"ip_address":"","ucode":"04D7D030245E27","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5f/aa/63e641c1.jpg","comment_is_top":false,"comment_ctime":1609150165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78918561493","product_id":100026001,"comment_content":"java的指令重排序，也是为了适应cpu的流水线技术，从而提高性能。对应的volatile是禁止指令重排，提供内存可见性，但不提供原子性。","like_count":19},{"had_liked":false,"id":222436,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1590806446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74605250478","product_id":100026001,"comment_content":"终于知道为什么要指令重排了！","like_count":17},{"had_liked":false,"id":208856,"user_name":"隆隆","can_delete":false,"product_type":"c1","uid":1219087,"ip_address":"","ucode":"F34E9A81BFC2DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/9a/0f/35ca8d44.jpg","comment_is_top":false,"comment_ctime":1587452262,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"70306928998","product_id":100026001,"comment_content":"配合Bilibili计算机组成原理视频讲解:https:&#47;&#47;www.bilibili.com&#47;video&#47;BV1c4411w7nd?p=2","like_count":16,"discussions":[{"author":{"id":2982205,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/8jMYiaMXKdIo93qHjjoqsoNIRVLtOAkID0mia5CQicYJMHnDehIbrcJLldG5muNmCY7V82LJnKwZRS7HhIC5f3GxQ/132","nickname":"Geek_db9097","note":"","ucode":"0B8E4BDAD2280B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570340,"discussion_content":"链接失效了，铁汁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651737321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2254917,"avatar":"https://static001.geekbang.org/account/avatar/00/22/68/45/ddf89612.jpg","nickname":"bestgopher","note":"","ucode":"D89735C8CA9C6E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561466,"discussion_content":"链接失效了，铁汁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649643330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102756,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1560302030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27330105806","product_id":100026001,"comment_content":"条件分枝也是一种依赖吧","like_count":6},{"had_liked":false,"id":233624,"user_name":"skyun","can_delete":false,"product_type":"c1","uid":1002658,"ip_address":"","ucode":"38097F3FF1045C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/a2/00241866.jpg","comment_is_top":false,"comment_ctime":1594368876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23069205356","product_id":100026001,"comment_content":"Java在编译成机器码的时候会设计到指令重排序，就是为了把没有依赖关系的指令放一起，可以用流水线并发来提高效率是。然后在多线程里面就会采用一些关键字volatile禁止指令重排，保证数据在多线程之间的可见性","like_count":5},{"had_liked":false,"id":290796,"user_name":"Wilson","can_delete":false,"product_type":"c1","uid":1003074,"ip_address":"","ucode":"35E9AA8737777A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/42/9d7c8c0f.jpg","comment_is_top":false,"comment_ctime":1619754182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18799623366","product_id":100026001,"comment_content":"徐老师的课讲得好，课后的延申阅读同样棒！比如今天这篇Modern Microprocessors, A 90-Minute Guide!","like_count":5},{"had_liked":false,"id":230337,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1593351065,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18773220249","product_id":100026001,"comment_content":"流水线也讲平衡，不是级数越多越好，级数多了虽然可以提高指令吞吐率，但因为每级流水线要做的事情少了，就需要提高时钟频率才不会浪费算力，但这又带来功耗提升的问题。不仅如此，很多代码由于依赖关系也就是数据冒险（例如下调指令的输入等于上一条指令的输出）很难通过流水线来优化，需要指令乱序和预测等方法来优化，然而随着流水线的增多，这些方法的执行难度也会跟着升高，因此，流水线的数量并非越多越好。","like_count":4},{"had_liked":false,"id":102736,"user_name":"殷勤的匠人","can_delete":false,"product_type":"c1","uid":1251335,"ip_address":"","ucode":"33329865B39015","user_header":"","comment_is_top":false,"comment_ctime":1560300634,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18740169818","product_id":100026001,"comment_content":"...单个时钟周期内能够完成的事情变少了。所以，只有提升时钟周期，CPU 在指令的响应时间...<br><br>此處筆誤。應是降低週期，提升「主頻」。","like_count":4,"discussions":[{"author":{"id":2625245,"avatar":"https://static001.geekbang.org/account/avatar/00/28/0e/dd/4d468ad7.jpg","nickname":"__Alucard","note":"","ucode":"8766ECCC8C7283","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383564,"discussion_content":"其实就是提升主频，增加单位时间内的时钟周期的数量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626160826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250939,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1601285609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14486187497","product_id":100026001,"comment_content":"if  else这种，执行的分支依赖于条件判断，算是一种控制冒险吧","like_count":3},{"had_liked":false,"id":168258,"user_name":"上善若水","can_delete":false,"product_type":"c1","uid":1653332,"ip_address":"","ucode":"E3F15FB8576626","user_header":"https://static001.geekbang.org/account/avatar/00/19/3a/54/72402617.jpg","comment_is_top":false,"comment_ctime":1578038873,"is_pvip":true,"replies":[{"id":"68092","content":"吴凌华同学你好，<br><br>这个恐怕很难了，特别是苹果有自己的ARM CPU设计团队。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580633015,"ip_address":"","comment_id":168258,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14462940761","product_id":100026001,"comment_content":"什么时候苹果用华为的芯片","like_count":4,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480173,"discussion_content":"吴凌华同学你好，\n\n这个恐怕很难了，特别是苹果有自己的ARM CPU设计团队。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580633015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195544,"user_name":"o_O","can_delete":false,"product_type":"c1","uid":1257283,"ip_address":"","ucode":"7C469AE3DA323B","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/43/e24212bb.jpg","comment_is_top":false,"comment_ctime":1585195204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175129796","product_id":100026001,"comment_content":"打卡，从评论也能学习到很多","like_count":2},{"had_liked":false,"id":104474,"user_name":"有米","can_delete":false,"product_type":"c1","uid":1005042,"ip_address":"","ucode":"C9A10B7A67BC12","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","comment_is_top":false,"comment_ctime":1560761967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10150696559","product_id":100026001,"comment_content":"指令重排如何理解呢？是不是跟文中所讲的乱序执行有关系？","like_count":2},{"had_liked":false,"id":206552,"user_name":"WENMURAN","can_delete":false,"product_type":"c1","uid":1915404,"ip_address":"","ucode":"5D1CE8B41937C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXNhbTULKiakib8lYXrvGF2zPwfedooBzC2EtSv1nt1MwV1KUvTkcJrvCBFvcdwJicnr3OEXnk9GUCg/132","comment_is_top":false,"comment_ctime":1586878667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881845963","product_id":100026001,"comment_content":"面向流水线的指令设计下<br>在intel的奔腾4之前，大家都是根据CPU的主频来选择处理器。Intel一直是领先者，世纪之交前后，AMD开始从性价比上超越intel，在此之下，Intel开始退出奔腾4，目标主频是10GHz，为了达到这个目标，Intel的工程师把流水线的级数设计到了20至31级。增加流水线深度，在同主频下，其实降低了CPU的性能，因为每一个Stage都需要对应的寄存器开销。<br>问题:功耗变大<br>通过流水线带来的性能提升，是理想情况，但在实际过程中，并不一定都能做到理想状态。","like_count":1},{"had_liked":false,"id":336101,"user_name":"何同一","can_delete":false,"product_type":"c1","uid":2637195,"ip_address":"","ucode":"3270B66A34F29A","user_header":"https://static001.geekbang.org/account/avatar/00/28/3d/8b/47bcc851.jpg","comment_is_top":false,"comment_ctime":1645929245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645929245","product_id":100026001,"comment_content":"控制依赖如 if-else 等，一条指令的执行与否取决于上一条指令的执行结果。","like_count":0},{"had_liked":false,"id":332556,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1643340598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643340598","product_id":100026001,"comment_content":"还好你不是说特斯拉，不然有律师信了。","like_count":0},{"had_liked":false,"id":321023,"user_name":"活着即是修行","can_delete":false,"product_type":"c1","uid":2258416,"ip_address":"","ucode":"C420AA71FB7F9F","user_header":"https://static001.geekbang.org/account/avatar/00/22/75/f0/2c65887d.jpg","comment_is_top":false,"comment_ctime":1636623980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636623980","product_id":100026001,"comment_content":"就是过深的流水线并不能保证所有指令都能够并行执行。因为随着指令的增多，可能有更多的指令存在着依赖关系。这就要求CPU必须顺序地执行这些指令。当然CPU也无法判断出哪些指令有依赖关系，所以我们在CPU中采取了“分支预测”，“乱序执行”技术，以打算并行出现的数据依赖问题。","like_count":0},{"had_liked":false,"id":320251,"user_name":"HollyWong","can_delete":false,"product_type":"c1","uid":2837328,"ip_address":"","ucode":"03A66A2BCC0A58","user_header":"https://static001.geekbang.org/account/avatar/00/2b/4b/50/fae00aff.jpg","comment_is_top":false,"comment_ctime":1636174486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636174486","product_id":100026001,"comment_content":"纠正一下Intel处理器的无条件跳转指令也需要使用运算器，机器码中是跳转的步长（你可以看下反汇编后的机器码），在执行时需要和pc相加得到新执行点。","like_count":1},{"had_liked":false,"id":303031,"user_name":"惘 闻","can_delete":false,"product_type":"c1","uid":1181650,"ip_address":"","ucode":"C5909F034BF072","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","comment_is_top":false,"comment_ctime":1626529601,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1626529601","product_id":100026001,"comment_content":"提升流水线深度，必须要和提升 CPU 主频同时进行。因为在单个 Pipeline Stage 能够执行的功能变简单了，也就意味着单个时钟周期内能够完成的事情变少了。所以，只有提升时钟周期，CPU 在指令的响应时间这个指标上才能保持和原来相同的性能。<br>这段话的因果关系看不懂。。因和果是这样对应的吗？谁能再详细的讲解一下啊","like_count":0,"discussions":[{"author":{"id":2325145,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkF14X58pdmTgBWwWzxVicJ0LQjNXiceL3xSj73eC4AZheyIPtf8tyqTicbP4VXia1TmDlm9rlCNCuDQ/132","nickname":"Geek_c2c8d1","note":"","ucode":"60B48691C86D6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385350,"discussion_content":"Pipeline Stage 指的是一条指令从第一个stage依次执行到结束，这个过程叫做pipeline。\n假如在单指令周期处理下，一个指令周期使用一个时钟周期去执行，比如600ps；如果采用流水线设计的方式，那么一个时钟周期可能就会变成200ps，但是我们一个指令周期的时间仍然是600ps不变，但是指令周期也被划分成了好几个阶段。因此，单个Pipeline stage能够执行的功能变少，比如只有取指令，或者译码，而单个时钟周期只有200ps，能够做的事情也就是取值或者译码等事情。 所以流水线越深，那么你指令周期划分的就越细，所需要的单个时钟周期就越多，可能变成50ps，10ps等，这个时候就必须要提供CPU的主频来提高时钟周期，才能响应指令的执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627009970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299381,"user_name":"Tiger","can_delete":false,"product_type":"c1","uid":1903781,"ip_address":"","ucode":"BFD74BFE539A8A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0c/a5/0bbfd5e7.jpg","comment_is_top":false,"comment_ctime":1624603889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624603889","product_id":100026001,"comment_content":"老师，您好，请问例子里面为什么1800ps内执行了13条指令啊，我数了一下最多也就执行了12条指令","like_count":0},{"had_liked":false,"id":273041,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":2403865,"ip_address":"","ucode":"2EA3B9DBF5821C","user_header":"https://static001.geekbang.org/account/avatar/00/24/ae/19/5f2d96ce.jpg","comment_is_top":false,"comment_ctime":1610419034,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1610419034","product_id":100026001,"comment_content":"有点疑惑。为啥我感觉用了流水线技术的，像是有了多核一样在并行的，原先的单指令周期方式的，只是一个单核在顺序执行的。你用多核和人家单核对比，感觉是不公平的啊。如果在前面那个单指令周期里，我也有像下面那个3条指令的例子一样，有3个核，可以并行，1800ps可以执行9条指令了吧。","like_count":0,"discussions":[{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375376,"discussion_content":"在一个时钟周期内，可能有多条指令的不同流水阶段在同时执行，从这点来讲确实是在并行，但并行的不是整条完整的指令，而是不同指令的某一个不同阶段。单指令周期并行的话，针对的就是整条完整的指令了，需要多倍于流水线的硬件支持。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621595709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241500,"user_name":"wy","can_delete":false,"product_type":"c1","uid":1064681,"ip_address":"","ucode":"41C1B304E7F032","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e9/116f1dee.jpg","comment_is_top":false,"comment_ctime":1597311662,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1597311662","product_id":100026001,"comment_content":"徐老师，load指令的execute阶段如果表示cpu从内存拉取数据的话，因为内存读取速度慢，这个也可以在一个时钟周期内完成吗","like_count":0,"discussions":[{"author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302581,"discussion_content":"load指令的EX阶段计算地址，在下一个MEM阶段读取数据，都会在一个时钟周期内完成。\n5级流水线5个阶段分别是：\nIF ID EX MEM WB","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598965017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1064681,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3e/e9/116f1dee.jpg","nickname":"wy","note":"","ucode":"41C1B304E7F032","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":304029,"discussion_content":"mem阶段可以在一个周期内就能把内存读取到寄存器吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599455392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302581,"ip_address":""},"score":304029,"extra":""}]}]},{"had_liked":false,"id":223953,"user_name":"Geek_dark","can_delete":false,"product_type":"c1","uid":1736792,"ip_address":"","ucode":"84A751D785FD28","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ2EOx1qgJEYIdmDQrcWBr2ByTKlwib4gKbjUK9qJ68cYTGXAJaepibo6wKFWjXMbwSUDiaw8RyU3QVg/132","comment_is_top":false,"comment_ctime":1591241014,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591241014","product_id":100026001,"comment_content":"&quot;我们把任务拆分成 31 个阶段，就需要 31 个时钟周期才能完成一个任务；而把任务拆分成 11 个阶段，就只需要 11 个时钟周期就能完成任务。在这种情况下，31 个 Stage 的 3GHz 主频的 CPU，其实和 11 个 Stage 的 1GHz 主频的 CPU，性能是差不多的&quot;<br>              我理解的按照流水线设计，只是最初30个周期没有任务完成而已。后续每个时钟周期完成1个任务，这样的话性能是比1GHz的好？","like_count":0,"discussions":[{"author":{"id":1209653,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/35/a0c15ca8.jpg","nickname":"一頭蠻牛","note":"","ucode":"887E596A1DBF2D","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577651,"discussion_content":"我也有这个疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656268311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223952,"user_name":"Geek_dark","can_delete":false,"product_type":"c1","uid":1736792,"ip_address":"","ucode":"84A751D785FD28","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ2EOx1qgJEYIdmDQrcWBr2ByTKlwib4gKbjUK9qJ68cYTGXAJaepibo6wKFWjXMbwSUDiaw8RyU3QVg/132","comment_is_top":false,"comment_ctime":1591240791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591240791","product_id":100026001,"comment_content":"&quot;我们把任务拆分成 31 个阶段，就需要 31 个时钟周期才能完成一个任务；而把任务拆分成 11 个阶段，就只需要 11 个时钟周期就能完成任务。在这种情况下，31 个 Stage 的 3GHz 主频的 CPU，其实和 11 个 Stage 的 1GHz 主频的 CPU，性能是差不多的&quot;","like_count":0},{"had_liked":false,"id":171275,"user_name":"Salina喜欢计算机","can_delete":false,"product_type":"c1","uid":1374667,"ip_address":"","ucode":"90EDC4654AABF4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f9/cb/26889909.jpg","comment_is_top":false,"comment_ctime":1578890933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578890933","product_id":100026001,"comment_content":"写的真好！感谢。","like_count":0},{"had_liked":false,"id":129981,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1567347019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567347019","product_id":100026001,"comment_content":"“大家判断一个CPU的性能，通常只看CPU的主频。而CPU的厂商们也通过不停地提升主频，把主频当成技术竞赛的核心指标。”<br><br>day21 笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;11436070.html<br>","like_count":0},{"had_liked":false,"id":126349,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1566369719,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566369719","product_id":100026001,"comment_content":"老师，我有个疑问，盼回答<br>在 20 讲里，说过一个时钟周期对应一个流水线级的操作。<br>IPC（Instruction Per Cycle）表示的应该是每个时钟周期的平均指令数。<br>一个指令一般由多级流水线操作组成，那 IPC 是如何做到大于 1 的呢？，当前我的理解至多等于 1<br>谢谢！","like_count":0,"discussions":[{"author":{"id":1240270,"avatar":"","nickname":"梅坊帝卿","note":"","ucode":"702F019BA3356C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":35866,"discussion_content":"超标量处理器 乱序多发射","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571311501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122051,"user_name":"Dashing","can_delete":false,"product_type":"c1","uid":1362838,"ip_address":"","ucode":"07E3F934782BCE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZbpP8Of9zVbZnPDMnXnZH2Zft5F1Ip8ybicIY9BhSlaO37TCbYtCq89IO8iasXowia9PrPRLibdEQ1g/132","comment_is_top":false,"comment_ctime":1565275534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565275534","product_id":100026001,"comment_content":"想到一个总线，总线是不能同时使用的。","like_count":0},{"had_liked":false,"id":121935,"user_name":"Lrwin","can_delete":false,"product_type":"c1","uid":1180503,"ip_address":"","ucode":"5E394E36419C56","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/57/31595f22.jpg","comment_is_top":false,"comment_ctime":1565252595,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565252595","product_id":100026001,"comment_content":"我想请教一下老师，既然cpu指令流水线可以根据其相关关系，进行指令重排序，那如果我在做编程的时候，使用纯函数的方式编写程序(函数式编程)，因为纯函数是无状态、无依赖的。<br><br>理论上，那就可以以函数为单位的任何指令进行流水线排序，是不是这样可以解除程序的依赖关系。<br><br>如果不考虑奔腾四处理器功耗问题，只对于流水线技术来讲，20级流水线是不是也是可以的？","like_count":0,"discussions":[{"author":{"id":1270780,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er8AdNibZHbZriaqLQZrNPcX8hVOpY91o0ELl7eOq7qy3aTibjia10ymIsKUKW6Ucs9SuXBDWlg6sjahw/132","nickname":"逆舟","note":"","ucode":"B303B4B8E10E0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273725,"discussion_content":"应该不存在以函数为单位的指令吧...你要手写汇编么....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590493820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117072,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1563962795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563962795","product_id":100026001,"comment_content":"讲就先后顺序的都算依赖，比如控制，分支，循环数组等","like_count":0},{"had_liked":false,"id":102868,"user_name":"免费的人","can_delete":false,"product_type":"c1","uid":1032106,"ip_address":"","ucode":"2B12D8ED63C564","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/aa/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1560318085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560318085","product_id":100026001,"comment_content":"比如下一条该取哪一条指令决定于上一条指令的结果，if...else...分支","like_count":0},{"had_liked":false,"id":102852,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1560314913,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1560314913","product_id":100026001,"comment_content":"老师，为什么没有依赖关系的指令的流水级可以并行执行？","like_count":0,"discussions":[{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128428,"discussion_content":"有依赖关系，依赖方就要等它依赖的指令执行完后才能执行呀，即顺序执行。没依赖的流水线就可以并行了呀。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578638540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}