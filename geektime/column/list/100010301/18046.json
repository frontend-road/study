{"id":18046,"title":"22 | HotSpot虚拟机的intrinsic","content":"<p>前不久，有同学问我，<code>String.indexOf</code>方法和自己实现的<code>indexOf</code>方法在字节码层面上差不多，为什么执行效率却有天壤之别呢？今天我们就来看一看。</p>\n<pre><code>public int indexOf(String str) {\n    if (coder() == str.coder()) {\n        return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                          : StringUTF16.indexOf(value, str.value);\n    }\n    if (coder() == LATIN1) {  // str.coder == UTF16\n        return -1;\n    }\n    return StringUTF16.indexOfLatin1(value, str.value);\n}\n</code></pre>\n<p>为了解答这个问题，我们来读一下<code>String.indexOf</code>方法的源代码（上面的代码截取自Java 10.0.2）。</p>\n<blockquote>\n<p>在Java 9之前，字符串是用char数组来存储的，主要为了支持非英文字符。然而，大多数Java程序中的字符串都是由Latin1字符组成的。也就是说每个字符仅需占据一个字节，而使用char数组的存储方式将极大地浪费内存空间。</p>\n<p>Java 9引入了Compact Strings[1]的概念，当字符串仅包含Latin1字符时，使用一个字节代表一个字符的编码格式，使得内存使用效率大大提高。</p>\n</blockquote>\n<p>假设我们调用<code>String.indexOf</code>方法的调用者以及参数均为只包含Latin1字符的字符串，那么该方法的关键在于对<code>StringLatin1.indexOf</code>方法的调用。</p>\n<p>下面我列举了<code>StringLatin1.indexOf</code>方法的源代码。你会发现，它并没有使用特别高明的算法，唯一值得注意的便是方法声明前的<code>@HotSpotIntrinsicCandidate</code>注解。</p><!-- [[[read_end]]] -->\n<pre><code>@HotSpotIntrinsicCandidate\npublic static int indexOf(byte[] value, byte[] str) {\n    if (str.length == 0) {\n        return 0;\n    }\n    if (value.length == 0) {\n        return -1;\n    }\n    return indexOf(value, value.length, str, str.length, 0);\n}\n\n@HotSpotIntrinsicCandidate\npublic static int indexOf(byte[] value, int valueCount, byte[] str, int strCount, int fromIndex) {\n    byte first = str[0];\n    int max = (valueCount - strCount);\n    for (int i = fromIndex; i &lt;= max; i++) {\n        // Look for first character.\n        if (value[i] != first) {\n            while (++i &lt;= max &amp;&amp; value[i] != first);\n        }\n        // Found first character, now look at the rest of value\n        if (i &lt;= max) {\n            int j = i + 1;\n            int end = j + strCount - 1;\n            for (int k = 1; j &lt; end &amp;&amp; value[j] == str[k]; j++, k++);\n            if (j == end) {\n                // Found whole string.\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n</code></pre>\n<p>在HotSpot虚拟机中，所有被该注解标注的方法都是HotSpot intrinsic。对这些方法的调用，会被HotSpot虚拟机替换成高效的指令序列。而原本的方法实现则会被忽略掉。</p>\n<p>换句话说，HotSpot虚拟机将为标注了<code>@HotSpotIntrinsicCandidate</code>注解的方法额外维护一套高效实现。如果Java核心类库的开发者更改了原本的实现，那么虚拟机中的高效实现也需要进行相应的修改，以保证程序语义一致。</p>\n<p>需要注意的是，其他虚拟机未必维护了这些intrinsic的高效实现，它们可以直接使用原本的较为低效的JDK代码。同样，不同版本的HotSpot虚拟机所实现的intrinsic数量也大不相同。通常越新版本的Java，其intrinsic数量越多。</p>\n<p>你或许会产生这么一个疑问：为什么不直接在源代码中使用这些高效实现呢？</p>\n<p>这是因为高效实现通常依赖于具体的CPU指令，而这些CPU指令不好在Java源程序中表达。再者，换了一个体系架构，说不定就没有对应的CPU指令，也就无法进行intrinsic优化了。</p>\n<p>下面我们便来看几个具体的例子。</p>\n<h2>intrinsic与CPU指令</h2>\n<p>在文章开头的例子中，<code>StringLatin1.indexOf</code>方法将在一个字符串（byte数组）中查找另一个字符串（byte数组），并且返回命中时的索引值，或者-1（未命中）。</p>\n<p>“恰巧”的是，X86_64体系架构的SSE4.2指令集就包含一条指令PCMPESTRI，让它能够在16字节以下的字符串中，查找另一个16字节以下的字符串，并且返回命中时的索引值。</p>\n<p>因此，HotSpot虚拟机便围绕着这一指令，开发出X86_64体系架构上的高效实现，并替换原本对<code>StringLatin1.indexOf</code>方法的调用。</p>\n<p>另外一个例子则是整数加法的溢出处理。一般我们在做整数加法时，需要考虑结果是否会溢出，并且在溢出的情况下作出相应的处理，以保证程序的正确性。</p>\n<p>Java核心类库提供了一个<code>Math.addExact</code>方法。它将接收两个int值（或long值）作为参数，并返回这两个int值的和。当这两个int值之和溢出时，该方法将抛出<code>ArithmeticException</code>异常。</p>\n<pre><code>@HotSpotIntrinsicCandidate\npublic static int addExact(int x, int y) {\n    int r = x + y;\n    // HD 2-12 Overflow iff both arguments have the opposite sign of the result\n    if (((x ^ r) &amp; (y ^ r)) &lt; 0) {\n        throw new ArithmeticException(&quot;integer overflow&quot;);\n    }\n    return r;\n}\n</code></pre>\n<p>在Java层面判断int值之和是否溢出比较费事。我们需要分别比较两个int值与它们的和的符号是否不同。如果都不同，那么我们便认为这两个int值之和溢出。对应的实现便是两个异或操作，一个与操作，以及一个比较操作。</p>\n<p>在X86_64体系架构中，大部分计算指令都会更新状态寄存器（FLAGS register），其中就有表示指令结果是否溢出的溢出标识位（overflow flag）。因此，我们只需在加法指令之后比较溢出标志位，便可以知道int值之和是否溢出了。对应的伪代码如下所示：</p>\n<pre><code>public static int addExact(int x, int y) {\n    int r = x + y;\n    jo LABEL_OVERFLOW; // jump if overflow flag set\n    return r;\n    LABEL_OVERFLOW:\n      throw new ArithmeticException(&quot;integer overflow&quot;);\n      // or deoptimize\n}\n</code></pre>\n<p>最后一个例子则是<code>Integer.bitCount</code>方法，它将统计所输入的int值的二进制形式中有多少个1。</p>\n<pre><code>@HotSpotIntrinsicCandidate\npublic static int bitCount(int i) {\n    // HD, Figure 5-2\n    i = i - ((i &gt;&gt;&gt; 1) &amp; 0x55555555);\n    i = (i &amp; 0x33333333) + ((i &gt;&gt;&gt; 2) &amp; 0x33333333);\n    i = (i + (i &gt;&gt;&gt; 4)) &amp; 0x0f0f0f0f;\n    i = i + (i &gt;&gt;&gt; 8);\n    i = i + (i &gt;&gt;&gt; 16);\n    return i &amp; 0x3f;\n}\n</code></pre>\n<p>我们可以看到，<code>Integer.bitCount</code>方法的实现还是很巧妙的，但是它需要的计算步骤也比较多。在X86_64体系架构中，我们仅需要一条指令<code>popcnt</code>，便可以直接统计出int值中1的个数。</p>\n<h2>intrinsic与方法内联</h2>\n<p>HotSpot虚拟机中，intrinsic的实现方式分为两种。</p>\n<p>一种是独立的桩程序。它既可以被解释执行器利用，直接替换对原方法的调用；也可以被即时编译器所利用，它把代表对原方法的调用的IR节点，替换为对这些桩程序的调用的IR节点。以这种形式实现的intrinsic比较少，主要包括<code>Math</code>类中的一些方法。</p>\n<p>另一种则是特殊的编译器IR节点。显然，这种实现方式仅能够被即时编译器所利用。</p>\n<p>在编译过程中，即时编译器会将对原方法的调用的IR节点，替换成特殊的IR节点，并参与接下来的优化过程。最终，即时编译器的后端将根据这些特殊的IR节点，生成指定的CPU指令。大部分的intrinsic都是通过这种方式实现的。</p>\n<p>这个替换过程是在方法内联时进行的。当即时编译器碰到方法调用节点时，它将查询目标方法是不是intrinsic。</p>\n<p>如果是，则插入相应的特殊IR节点；如果不是，则进行原本的内联工作。（即判断是否需要内联目标方法的方法体，并在需要内联的情况下，将目标方法的IR图纳入当前的编译范围之中。）</p>\n<p>也就是说，如果方法调用的目标方法是intrinsic，那么即时编译器会直接忽略原目标方法的字节码，甚至根本不在乎原目标方法是否有字节码。即便是native方法，只要它被标记为intrinsic，即时编译器便能够将之&quot;内联&quot;进来，并插入特殊的IR节点。</p>\n<p>事实上，不少被标记为intrinsic的方法都是native方法。原本对这些native方法的调用需要经过JNI（Java Native Interface），其性能开销十分巨大。但是，经过即时编译器的intrinsic优化之后，这部分JNI开销便直接消失不见，并且最终的结果也十分高效。</p>\n<p>举个例子，我们可以通过<code>Thread.currentThread</code>方法来获取当前线程。这是一个native方法，同时也是一个HotSpot intrinsic。在X86_64体系架构中，R13寄存器存放着当前线程的指针。因此，对该方法的调用将被即时编译器替换为一个特殊IR节点，并最终生成读取R13寄存器指令。</p>\n<h2>已有intrinsic简介</h2>\n<p>最新版本的HotSpot虚拟机定义了三百多个intrinsic。</p>\n<p>在这三百多个intrinsic中，有三成以上是<code>Unsafe</code>类的方法。不过，我们一般不会直接使用<code>Unsafe</code>类的方法，而是通过<code>java.util.concurrent</code>包来间接使用。</p>\n<p>举个例子，<code>Unsafe</code>类中经常会被用到的便是<code>compareAndSwap</code>方法（Java 9+更名为<code>compareAndSet</code>或<code>compareAndExchange</code>方法）。在X86_64体系架构中，对这些方法的调用将被替换为<code>lock cmpxchg</code>指令，也就是原子性更新指令。</p>\n<p>除了<code>Unsafe</code>类的方法之外，HotSpot虚拟机中的intrinsic还包括下面的几种。</p>\n<ol>\n<li><code>StringBuilder</code>和<code>StringBuffer</code>类的方法。HotSpot虚拟机将优化利用这些方法构造字符串的方式，以尽量减少需要复制内存的情况。</li>\n<li><code>String</code>类、<code>StringLatin1</code>类、<code>StringUTF16</code>类和<code>Arrays</code>类的方法。HotSpot虚拟机将使用SIMD指令（single instruction multiple data，即用一条指令处理多个数据）对这些方法进行优化。<br />\n举个例子，<code>Arrays.equals(byte[], byte[])</code>方法原本是逐个字节比较，在使用了SIMD指令之后，可以放入16字节的XMM寄存器中（甚至是64字节的ZMM寄存器中）批量比较。</li>\n<li>基本类型的包装类、<code>Object</code>类、<code>Math</code>类、<code>System</code>类中各个功能性方法，反射API、<code>MethodHandle</code>类中与调用机制相关的方法，压缩、加密相关方法。这部分intrinsic则比较简单，这里就不详细展开了。如果你有感兴趣的，可以自行查阅资料，或者在文末留言。</li>\n</ol>\n<p>如果你想知道HotSpot虚拟机定义的所有intrinsic，那么你可以直接查阅OpenJDK代码[2]。（该链接是Java 12的intrinsic列表。Java 8的intrinsic列表可以查阅这一链接[3]。）</p>\n<h2>总结与实践</h2>\n<p>今天我介绍了HotSpot虚拟机中的intrinsic。</p>\n<p>HotSpot虚拟机将对标注了<code>@HotSpotIntrinsicCandidate</code>注解的方法的调用，替换为直接使用基于特定CPU指令的高效实现。这些方法我们便称之为intrinsic。</p>\n<p>具体来说，intrinsic的实现有两种。一是不大常见的桩程序，可以在解释执行或者即时编译生成的代码中使用。二是特殊的IR节点。即时编译器将在方法内联过程中，将对intrinsic的调用替换为这些特殊的IR节点，并最终生成指定的CPU指令。</p>\n<p>HotSpot虚拟机定义了三百多个intrinsic。其中比较特殊的有<code>Unsafe</code>类的方法，基本上使用java.util.concurrent包便会间接使用到<code>Unsafe</code>类的intrinsic。除此之外，<code>String</code>类和<code>Arrays</code>类中的intrinsic也比较特殊。即时编译器将为之生成非常高效的SIMD指令。</p>\n<p>今天的实践环节，你可以体验一下<code>Integer.bitCount</code> intrinsic带来的性能提升。</p>\n<pre><code>// time java Foo\npublic class Foo {\n  public static int bitCount(int i) {\n    // HD, Figure 5-2\n    i = i - ((i &gt;&gt;&gt; 1) &amp; 0x55555555);\n    i = (i &amp; 0x33333333) + ((i &gt;&gt;&gt; 2) &amp; 0x33333333);\n    i = (i + (i &gt;&gt;&gt; 4)) &amp; 0x0f0f0f0f;\n    i = i + (i &gt;&gt;&gt; 8);\n    i = i + (i &gt;&gt;&gt; 16);\n    return i &amp; 0x3f;\n  }\n  public static void main(String[] args) {\n    int sum = 0;\n    for (int i = Integer.MIN_VALUE; i &lt; Integer.MAX_VALUE; i++) {\n      sum += bitCount(i); // In a second run, replace with Integer.bitCount\n    }\n    System.out.println(sum);\n  }\n}\n</code></pre>\n<p>[1] <a href=\"http://openjdk.java.net/jeps/254\">http://openjdk.java.net/jeps/254</a><br />\n[2] <a href=\"http://hg.openjdk.java.net/jdk/hs/file/46dc568d6804/src/hotspot/share/classfile/vmSymbols.hpp#l727\">http://hg.openjdk.java.net/jdk/hs/file/46dc568d6804/src/hotspot/share/classfile/vmSymbols.hpp#l727</a><br />\n[3] <a href=\"http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/2af8917ffbee/src/share/vm/classfile/vmSymbols.hpp#l647\">http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/2af8917ffbee/src/share/vm/classfile/vmSymbols.hpp#l647</a></p>\n<p></p>\n","comments":[{"had_liked":false,"id":23672,"user_name":"^_^","can_delete":false,"product_type":"c1","uid":1126043,"ip_address":"","ucode":"F6168A4333D940","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/9b/84370b68.jpg","comment_is_top":false,"comment_ctime":1536582697,"is_pvip":false,"replies":[{"id":"8722","content":"多谢支持！","user_name":"作者回复","comment_id":23672,"uid":"1176688","ip_address":"","utype":1,"ctime":1536680114,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"74551026729","product_id":100010301,"comment_content":"我个人觉得老师讲的非常好，这些东西更像是讲解一个系统似的，让我们更懂他们的运行机制，推算出我们系统每个类、方法和属性在jvm上的运作模式。这课程真的对于我们java开发的真的是太有帮助了，不想某某些课程占着实践经验的名义混。感谢老师辛苦啦！","like_count":17,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423671,"discussion_content":"多谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536680114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144720,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1572009165,"is_pvip":false,"replies":[{"id":"66456","content":"对的，许多intrinsics 都会依赖特殊的CPU指令来优化执行效率的。<br><br>说个趣闻，Intel曾经向OpenJDK提交了一大堆浮点数算法作为java.lang.Math中部分方法的intrinsic，比如sin cos这些，除了他们没人看的懂。结果在某些情况下算出来的结果是错的。。后来他们又提交了一堆更正过的天书代码，希望是对的吧，哈哈","user_name":"作者回复","comment_id":144720,"uid":"1176688","ip_address":"","utype":1,"ctime":1578930665,"user_name_real":"郑雨迪"}],"discussion_count":2,"race_medal":0,"score":"57406584013","product_id":100010301,"comment_content":"赞，之前学习了深入理解计算机原理这门课，再联系这一节就知道intrinsic想做什么了。<br>JVM 自身不是跨平台的，Windows，Linux都有各自的安装包，也就是JVM帮我们做了不同操作系统及底层体系结构的兼容；但是针对每一个具体的CPU，其自身提供的指令，寄存器，以及SIMD等优化机制并没有得到利用，而intrinsic的产生正是为了利用这些。<br>个人理解，有不对之处，请老师和各位同学指出。","like_count":13,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472083,"discussion_content":"对的，许多intrinsics 都会依赖特殊的CPU指令来优化执行效率的。\n\n说个趣闻，Intel曾经向OpenJDK提交了一大堆浮点数算法作为java.lang.Math中部分方法的intrinsic，比如sin cos这些，除了他们没人看的懂。结果在某些情况下算出来的结果是错的。。后来他们又提交了一堆更正过的天书代码，希望是对的吧，哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578930665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362712,"discussion_content":"这就回到了本源 刚学的时候老有人问：你说说看Java为什么能跨平台？学了这个篇章结合编译原理和X86手册 真的是如虎添翼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617017263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24094,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1536801682,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"44486474642","product_id":100010301,"comment_content":"嗯，JVM的重要性自不必言，学好是进阶的台阶，否则就是屏障。不知道运行原理和机制，怎么理解OOM？怎么优化性能？怎么分析和定位一些奇怪的问题？<br><br>老师讲的相当好了，只是知识储备不够的话，学习曲线是比较陡峭的，比如IR图，那个是第一次听，来龙去脉都不清楚自然会懵逼。还好大部分都能听明白和吸收，只是以后面试能判断出面试官的水平。<br><br>懂JVM我感觉就好像了解地球是圆的以及围绕太阳公转一样，好像平时生活上也没什么用，不过如果想要征服星辰大海，以及迷失方向时还是挺有用的。<br><br>嗯，总之，老师讲的非常好，毕竟只是一个专栏的入门教程，已经如此深入了，相当有用，这也是我付费了第一个专栏，由于老师讲的好，我在极客时间又订阅的好多，现在已看不过来了，不过这个专栏我一直没断，每天必听必看，感觉学到不少知识。<br><br>嗯，今天讲解的 intrinsic ，我感觉也听明白了，总结一下：<br>1:intrinsic-可认为也是一种hotspot虚拟机，为提高JVM性能的优化机制或技巧<br><br>2:使用注解的方式来和Java代码结合<br><br>3:本质上适配出对应系统体系架构，然后直接使用和系统体系架构强关联的高效指令来执行对应的功能<br><br>4:针对不同的类具体的高效指令亦不同<br><br>疑问❓<br>1:intrinsic 是只有hotspot虚拟机支持吗？<br><br>2:系统的体系架构适配是唯一的吗？主要是x86_64？按照这个思路是不是可以有多个类似的注视，针对多种的系统体系架构来优化呢？毕竟计算机系统的体系架构是有限的","like_count":10,"discussions":[{"author":{"id":1017297,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYfcUOVhf3vhEBUNGHgtIcw8ujMZnkabicLzzjn3xwdeeic2PJSe7ibJgMx2UjF0d7L4B4gsRpaqe2A/132","nickname":"郭小菜","note":"","ucode":"C4044C80BB331B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136656,"discussion_content":"为什么老师你不回答他","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579155588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2060756,"avatar":"","nickname":"在下蟑螂王","note":"","ucode":"E66A65A327095A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1017297,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYfcUOVhf3vhEBUNGHgtIcw8ujMZnkabicLzzjn3xwdeeic2PJSe7ibJgMx2UjF0d7L4B4gsRpaqe2A/132","nickname":"郭小菜","note":"","ucode":"C4044C80BB331B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":302870,"discussion_content":"因为老师怕被判断出水平😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599053004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":136656,"ip_address":""},"score":302870,"extra":""}]},{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292584,"discussion_content":"intrinsic 只是一种把代码的具体实现，替换成一种高效的cpu指令。所以不止hotspot实现，其他的虚拟机也可以有，有没有具体实现，那就看它有没有去做，反正是能做的。\n目前看，应该只适配x86_64架构，不同的架构对应的cpu指令集是不一样的，如果都适配，那么就要求该注解，能在不同的架构下，能替换成具体平台的对应的cpu指令。这就成本就高了。只在x86_64架构下该注解生效，换成其他架构，就用原代码执行，如果把所有架构都适配了，那么就没有原代码存在的必要了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595257575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282948,"discussion_content":"理解是底层JVM特定平台的实现需要根据具体的硬件架构做适配","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592126245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1303813,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e5/05/fc769d45.jpg","nickname":"Geek_zhw","note":"","ucode":"AABE15F9895613","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274389,"discussion_content":"漏洞太多，不打击学员的思考积极性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590578756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23641,"user_name":"Geek_09d838","can_delete":false,"product_type":"c1","uid":1097482,"ip_address":"","ucode":"D191FA46223F83","user_header":"https://static001.geekbang.org/account/avatar/00/10/bf/0a/98e116e0.jpg","comment_is_top":false,"comment_ctime":1536564600,"is_pvip":false,"replies":[{"id":"8609","content":"嗯嗯！<br>我的想法是，在这个专栏中介绍JVM各个组件的设计与实现。之后当开发人员在遇到性能问题时，能够联想到具体是哪个组件可能出了问题，从而针对性地去做调优。","user_name":"作者回复","comment_id":23641,"uid":"1176688","ip_address":"","utype":1,"ctime":1536579633,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"27306368376","product_id":100010301,"comment_content":"我觉得有些功能你要先知道，再去考虑能否会用到这些功能。","like_count":6,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423655,"discussion_content":"嗯嗯！\n我的想法是，在这个专栏中介绍JVM各个组件的设计与实现。之后当开发人员在遇到性能问题时，能够联想到具体是哪个组件可能出了问题，从而针对性地去做调优。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536579633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23670,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1536581254,"is_pvip":false,"replies":[{"id":"8721","content":"谢谢支持！","user_name":"作者回复","comment_id":23670,"uid":"1176688","ip_address":"","utype":1,"ctime":1536680103,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"23011417734","product_id":100010301,"comment_content":"我还是看得蛮过瘾的，周一三五早上起来第一件事就是看更新，的确可能不是很实用，但是对于对虚拟机感兴趣的同学来讲，是满足了好奇心","like_count":5,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423670,"discussion_content":"谢谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536680103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23691,"user_name":"Len","can_delete":false,"product_type":"c1","uid":1022767,"ip_address":"","ucode":"53C623CE17973F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/2f/b7a3625e.jpg","comment_is_top":false,"comment_ctime":1536589948,"is_pvip":true,"replies":[{"id":"8723","content":"多谢支持！","user_name":"作者回复","comment_id":23691,"uid":"1176688","ip_address":"","utype":1,"ctime":1536680125,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"14421491836","product_id":100010301,"comment_content":"我觉得老师讲的非常好，尤其是上两讲讲方法内联，结合老师讲的，在课后我又恶补了一下 IR 方面的知识，收获很大。<br>尽管目前我的工作不会直接用到这方面的知识，但我相信这些底层机制、原理性的知识点，对成长为一名优秀的工程师是必备的。","like_count":3,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423680,"discussion_content":"多谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536680125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23627,"user_name":"ahern88","can_delete":false,"product_type":"c1","uid":1006971,"ip_address":"","ucode":"8CD8436265D550","user_header":"","comment_is_top":false,"comment_ctime":1536552637,"is_pvip":false,"replies":[{"id":"8598","content":"多谢建议！<br><br>JVM对用户来说是透明的，可调优的参数也在逐渐减少，总体朝着自适配前进。所以把本专栏当成工具书来看的话，确实没有多少实用性。<br><br>不过就算是自适配的虚拟机，也有覆盖不到的场景。专栏前面这两部分，正是在介绍JVM各个模块的设计与实现，以便开发人员在发现性能问题时能够联想到可能出问题的具体模块。<br><br>接下来的第三部分会介绍一些性能监控分析工具，希望会对你有所帮助。","user_name":"作者回复","comment_id":23627,"uid":"1176688","ip_address":"","utype":1,"ctime":1536578518,"user_name_real":"郑雨迪"}],"discussion_count":3,"race_medal":0,"score":"14421454525","product_id":100010301,"comment_content":"我觉得这份虚拟机教程写的知识有点偏，不够实用，大家觉得呢","like_count":3,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423646,"discussion_content":"多谢建议！\n\nJVM对用户来说是透明的，可调优的参数也在逐渐减少，总体朝着自适配前进。所以把本专栏当成工具书来看的话，确实没有多少实用性。\n\n不过就算是自适配的虚拟机，也有覆盖不到的场景。专栏前面这两部分，正是在介绍JVM各个模块的设计与实现，以便开发人员在发现性能问题时能够联想到可能出问题的具体模块。\n\n接下来的第三部分会介绍一些性能监控分析工具，希望会对你有所帮助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536578518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360093,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","nickname":"cv0cv0","note":"","ucode":"93FF9277F03FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555196,"discussion_content":"这一篇我觉得讲的是最好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646808167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362714,"discussion_content":"我个人觉得帮助还是很大的 每个人的经历和所处工作环境不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617017346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165277,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1577192383,"is_pvip":false,"replies":[{"id":"65539","content":"其他架构没有的话就沿用Java实现。另x86_64和amd64是同一个架构","user_name":"作者回复","comment_id":165277,"uid":"1176688","ip_address":"","utype":1,"ctime":1578265542,"user_name_real":"郑雨迪"}],"discussion_count":2,"race_medal":0,"score":"10167126975","product_id":100010301,"comment_content":"文中说 @HotSpotIntrinsicCandidate 如果不是 HotSpot 的虚拟机就退化使用 JDK 源码的方式。但如果某个 @HotSpotIntrinsicCandidate 注解的方法 X86_64 有指令可以优化，但其他架构体系比如 AMD64 没有相应的指令或者指令不同这个过程是怎样的？","like_count":2,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479103,"discussion_content":"其他架构没有的话就沿用Java实现。另x86_64和amd64是同一个架构","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578265542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":121358,"discussion_content":"感谢老师答复！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578317709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28284,"user_name":"白三岁","can_delete":false,"product_type":"c1","uid":1109892,"ip_address":"","ucode":"39594C357FEA1B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/84/a0ffbd8b.jpg","comment_is_top":false,"comment_ctime":1538042184,"is_pvip":false,"replies":[{"id":"10305","content":"Java8已经有一些intrinsic，但不多。<br><br>这个注解应该是Java 9引入的，它的意思其实是用来提醒JDK开发人员注意虚拟机里有对应的intrinsic，改动的话需要通知我们","user_name":"作者回复","comment_id":28284,"uid":"1176688","ip_address":"","utype":1,"ctime":1538117322,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"10127976776","product_id":100010301,"comment_content":"我看了下java8中没有找到这个注解。调用从源码复制出来的方法和直接调用源码的方法没有性能上的差别。是java8没有加入这种优化吗","like_count":2,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425213,"discussion_content":"Java8已经有一些intrinsic，但不多。\n\n这个注解应该是Java 9引入的，它的意思其实是用来提醒JDK开发人员注意虚拟机里有对应的intrinsic，改动的话需要通知我们","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1538117322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23853,"user_name":"bradsun","can_delete":false,"product_type":"c1","uid":1024227,"ip_address":"","ucode":"E0C8E80B18F320","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/e3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1536707886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10126642478","product_id":100010301,"comment_content":"不好意思，昨天没写清楚。就是intrinsic，只有少部分可以直接被解释器应用，而大部分只能被编译器应用。为什么不都可以被解释器调用，这样解释执行的时候不会更高效吗","like_count":2},{"had_liked":false,"id":353350,"user_name":"青阳","can_delete":false,"product_type":"c1","uid":2139807,"ip_address":"北京","ucode":"3591D366BAB0B9","user_header":"https://static001.geekbang.org/account/avatar/00/20/a6/9f/3c60fffd.jpg","comment_is_top":false,"comment_ctime":1659397671,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1659397671","product_id":100010301,"comment_content":"intrinsic就是有些功能硬件已经实现了，不用软件编程的方式实现了","like_count":0},{"had_liked":false,"id":308972,"user_name":"宋世通","can_delete":false,"product_type":"c1","uid":1245468,"ip_address":"","ucode":"C7AA3F0E6930F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","comment_is_top":false,"comment_ctime":1629877073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629877073","product_id":100010301,"comment_content":"打开了新世界的大门","like_count":0},{"had_liked":false,"id":254385,"user_name":"Geek_03a866","can_delete":false,"product_type":"c1","uid":2129795,"ip_address":"","ucode":"204DC1D0C5F2FC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/hQ01GRPRFNTfBWX1Gmz0cqXZxbyJqHmORNJuE8yIqCbg1fXjvaWOGoatVo3Pbib5ZHCEqYFhSHhCVA8zr2Q2WuA/132","comment_is_top":false,"comment_ctime":1603109304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603109304","product_id":100010301,"comment_content":"将编码、即时编译器、cpu指令体系架构、并发unsafe、natuve jni  之间的过渡讲深入和清楚了，水平真高","like_count":0},{"had_liked":false,"id":240472,"user_name":"兰芳林","can_delete":false,"product_type":"c1","uid":1754409,"ip_address":"","ucode":"D3C652D22B5D50","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c5/29/4848464f.jpg","comment_is_top":false,"comment_ctime":1596941031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596941031","product_id":100010301,"comment_content":"厉害，受教","like_count":0},{"had_liked":false,"id":239360,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1596511104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596511104","product_id":100010301,"comment_content":"这篇大概讲的就是说，有很多@HotSpotIntrinsicCandidate注解的方法。我们叫他intrinsic，这些方法特别之处就是基于CPU啥的指令高效运行。<br>这时候就会有一个问题，会不会换个构架的硬件或者说不支持对应的指令集，这些东西就玩不转了，有时候遇到一些需求比如说打印，有的机器打印标签不支持重定位，打着打着就会出现偏差，有对应的指令但是硬件不支持。","like_count":0},{"had_liked":false,"id":238059,"user_name":"Kevin⚡️Zhou","can_delete":false,"product_type":"c1","uid":1440772,"ip_address":"","ucode":"C0FC2673705212","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/04/d83a555e.jpg","comment_is_top":false,"comment_ctime":1596039466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596039466","product_id":100010301,"comment_content":"这门课我觉得可以先囫囵吞枣的看过去, 以后开发中遇到了具体的疑问在来回顾, 对于经验不是很长的工程师来说, 想一次性全部吃透是很难得","like_count":0},{"had_liked":false,"id":236809,"user_name":"伍春林","can_delete":false,"product_type":"c1","uid":1926470,"ip_address":"","ucode":"BE9DF93A9AC958","user_header":"","comment_is_top":false,"comment_ctime":1595554940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595554940","product_id":100010301,"comment_content":"老师好，文中提到绝大部分intrinsic方法都是在及时编译的时候被替换的，那是不是意味着如果没有触发及时编译的话，intrinsic方法的高效实现就体现不了呢？","like_count":0},{"had_liked":false,"id":226511,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1592126084,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592126084","product_id":100010301,"comment_content":"intrinsic，就是利用CPU底层指令高效完成目标事情。<br>如：String的indexOf<br>可以利用CPU指令直接将byte数组存入底层寄存器由CPU指令进行比较并返回相应的index。","like_count":0},{"had_liked":false,"id":198829,"user_name":"小陈","can_delete":false,"product_type":"c1","uid":1009385,"ip_address":"","ucode":"A03A299310AD18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/e9/814d057a.jpg","comment_is_top":false,"comment_ctime":1585469840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585469840","product_id":100010301,"comment_content":"这节不错，讲了很多底层知识","like_count":0},{"had_liked":false,"id":137597,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1569804266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569804266","product_id":100010301,"comment_content":"这些东西听着挺过瘾的，虽然大部分时间用不上。但是理解原理，在你查找疑难问题的时候却是有奇效","like_count":0},{"had_liked":false,"id":65803,"user_name":"雪人","can_delete":false,"product_type":"c1","uid":1257781,"ip_address":"","ucode":"55B39082C5D1F0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ABjAPveWxOuBs3ibbCaBicX7OSibic3prycYG9vOicGHMEv8Vws5o3epykBSFHkbysnaKeMqQaJufINNUncGhmAEomg/132","comment_is_top":false,"comment_ctime":1549669330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549669330","product_id":100010301,"comment_content":"这些东西，尽管现在可能看起来不会都懂，但留着以后无论什么时候再看，都会有或多或少的收获，而这个收获，对以后的前进之路，是有非常大的帮助，感谢老师，希望老师有空能再出一份专栏吧","like_count":0},{"had_liked":false,"id":26593,"user_name":"JZ","can_delete":false,"product_type":"c1","uid":1004986,"ip_address":"","ucode":"869A0DB3AC7A0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/ba/d738255c.jpg","comment_is_top":false,"comment_ctime":1537690187,"is_pvip":false,"replies":[{"id":"9727","content":"记得是9之后才大量加入的","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1537779704,"ip_address":"","comment_id":26593,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537690187","product_id":100010301,"comment_content":"Java8中并没有看到相应的注解，如String类的indexOf方法，Java8中没有类似的优化？","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424682,"discussion_content":"记得是9之后才大量加入的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537779704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23901,"user_name":"四阿哥","can_delete":false,"product_type":"c1","uid":1104580,"ip_address":"","ucode":"3296E89174D370","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/c4/270db3ad.jpg","comment_is_top":false,"comment_ctime":1536715787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536715787","product_id":100010301,"comment_content":"第三部分，利用工具进行调优，非常期待，其实像PrintCompile这类参数也是十分实用的","like_count":0},{"had_liked":false,"id":23798,"user_name":"bradsun","can_delete":false,"product_type":"c1","uid":1024227,"ip_address":"","ucode":"E0C8E80B18F320","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/e3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1536663091,"is_pvip":false,"replies":[{"id":"8724","content":"不好意思没明白你的问题。什么是独立的？","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1536680249,"ip_address":"","comment_id":23798,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536663091","product_id":100010301,"comment_content":"这个为什么不都是独立的形式。而且只有少部分是独立的。谢谢","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423732,"discussion_content":"不好意思没明白你的问题。什么是独立的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536680249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}