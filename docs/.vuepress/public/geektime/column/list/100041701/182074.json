{"id":182074,"title":"08 | CSRF/SSRF：为什么避免了XSS，还是“被发送”了一条微博？","content":"<p>你好，我是何为舟。</p><p>前面我们讲了2种常见的Web攻击：XSS和SQL注入。它们分别篡改了原始的HTML和SQL逻辑，从而使得黑客能够执行自定义的功能。那么除了对代码逻辑进行篡改，黑客还能通过什么方式发起Web攻击呢？</p><p>我们还是先来看一个例子。在平常使用浏览器访问各种网页的时候，是否遇到过，自己的银行应用突然发起了一笔转账，又或者，你的微博突然发送了一条内容？</p><p>在我们学习XSS之后，你可能会联想到，这是银行或者微博中出现了某个XSS漏洞。但问题是，你今天并没有访问过银行或者微博的页面，所以并没有“被XSS”的机会。这时，你想到，会不会是你今天访问的其他网页里存在一些恶意的攻击，实现了你不知道的转账和发博行为呢？好了，你肯定很想知道黑客究竟是怎么做到的，那你不妨先自己思考一下，写出几个可能的答案，然后跟着我开始学习今天的内容！</p><h2>CSRF攻击是如何产生的？</h2><p>我们几乎每天都要用到浏览器，我们的信息也会被浏览器“保存”。那我们首先来看一下，浏览器是如何保存你的身份信息的。</p><p>当我们在访问一个Web页面的时候，并不是我们自己去获取页面信息，而是浏览器去获取了这些信息，并将它们进行了展示。这就说明，你允许浏览器代表你去和Web的服务端进行交互。为了能够准确地代表你的身份，浏览器通常会在Cookie中存储一些必要的身份信息。所以，在我们使用一个网页的时候，只需要在首次访问的时候登录就可以了。</p><!-- [[[read_end]]] --><p>从用户体验上来说，这当然是非常方便的。但是，黑客正是利用这一点，来编写带有恶意JavaScript脚本的网页，通过“钓鱼”的方式诱导你访问。然后，黑客会通过这些JavaScript脚本窃取你保存在网页中的身份信息，通过仿冒你，让你的浏览器发起伪造的请求，最终执行黑客定义的操作。而这一切对于你自己而言都是无感知的。这就是<strong>CSRF</strong>（Cross-Site Request Forgery，跨站请求伪造）攻击。</p><p>接下来，我们就以银行转账为例子，来详细讲解一下这个攻击过程。</p><p>当你在银行页面发起一笔转账时，这个过程其实是通过一个转账接口来完成的。这个接口的内容可能包括下面这些内容：</p><ul>\n<li>接口地址：<code>http://bank.com/transfer</code> ；</li>\n<li>HTTP方法：POST；</li>\n<li>接口参数：to（目标账户）、amount（金额）。</li>\n</ul><p>在转账之前，你肯定进行了一次登录。这样一来，这个转账接口就可以通过你之前存储在Cookie中的相关字段来完成认证了。所以，这个接口参数中不需要包含任何身份认证相关的信息。也正是因为如此，这个接口满足了CSRF攻击的基本条件：</p><ul>\n<li>使用Cookie进行认证；</li>\n<li>参数中不包含任何隐私信息。</li>\n</ul><p>于是，黑客可以构造一个如下的空白网页。我们假设这个网页的地址为 hacker.com。</p><pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;form action=&quot;http://bank.com/transfer&quot; method=&quot;POST&quot;&gt;\n    \t&lt;input type=&quot;hidden&quot; name=&quot;to&quot; value=&quot;hacker&quot; /&gt;\n    \t&lt;input type=&quot;hidden&quot; name=&quot;amount&quot; value=&quot;10000.00&quot; /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n    \tdocument.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>在HTML中，<code>&lt;script&gt;</code>标签内的JavaScript脚本会在打开网页的时候自动执行。因此，一旦用户访问了这个hacker.com的页面，它就会自动提交form表单，向<code>http://bank.com/transfer</code>这个接口（假设为转账接口）发起一个POST请求。</p><p>其中，to和amount这两个参数，代表着用户向黑客的账号转账10000元。只要这个用户之前登录过bank.com，并且账户余额大于10000元，那么黑客就能够成功地收到这10000元的转账了。在这个网页中，<code>&lt;input&gt;</code>的标签带有“hidden”属性，所以这整个过程对于用户来说都是不可见的。</p><p>为了方便你理解，我把这个流程，我画成了一张图，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/0b/7bd75f65e6fc3e9a8fb0246a8a32dc0b.jpeg?wh=1920*1080\" alt=\"\"></p><h2>通过CSRF攻击，黑客能做什么？</h2><p>和XSS一样，CSRF也可以仿冒用户去进行一些功能操作的请求，比如修改密码、转账等等，相当于绕过身份认证，进行未授权的操作。</p><p>值得一提的是，尽管黑客通过CSRF能进行的操作没有XSS丰富，但CSRF在传播和攻击成本上都低于XSS。这也就是说，即使你的网页中没有任何注入漏洞，但只要接口配置不当，就能够被CSRF利用。而黑客也只需要在自己的域名中，搭建一个诱导性的网页，就可以让任何访问网页的用户都遭受到CSRF攻击。而且，用户每天需要访问大量的网页，根本没有办法确认每一个网页的合法性。而从严格意义上来说，用户根本没有办法防止CSRF攻击。因此，我们只能从应用本身入手去加强防护。</p><h2>如何进行CSRF防护？</h2><p>那究竟该怎么进行CSRF防护呢？我们有两种方法。<strong>行业内标准的CSRF防护方法是CSRFToken。</strong> 我们先来看这个方法。</p><p>通过前面的学习，我们知道，CSRF是通过自动提交表单的形式来发起攻击的。所以，在前面转账的例子中，黑客可以通过<a href=\"https://baike.baidu.com/item/%E6%8A%93%E5%8C%85/9929103?fr=aladdin\">抓包</a>分析出http://bank.com/transfer这个接口所需要的参数，从而构造对应的form表单。因此，我们只需要在这个接口中，加入一个黑客无法猜到的参数，就可以有效防止CSRF了。这就是<strong>CSRF Token</strong>的工作原理。</p><p>它的工作流程，我也总结了一下，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/04/d0d3a70f4acf7b0fc7bd1c780a909904.jpeg?wh=1920*1080\" alt=\"\"></p><p>因为CSRF Token是每次用户正常访问页面时，服务端随机生成返回给浏览器的。所以，每一次正常的转账接口调用，都会携带不同的CSRF Token。黑客没有办法进行提前猜测，也就没有办法构造出正确的表单了。</p><p><strong>除了CSRF Token之外，我们也可以通过二次验证来加强防护。</strong></p><p>回想一下，当你进行各类支付操作的时候，银行网页通常会要求你输入支付密码。你可能会觉得奇怪，明明自己已经登录了，为什么还需要输入一个独立的支付密码呢？这其实和CSRF Token的原理一样：这个独立的支付密码是需要用户输入的，只存在于用户的记忆中，因此，也是黑客无法获取到的参数。</p><p>怎么理解呢？假如说，黑客通过CSRF攻击，替你发起了一笔转账。在支付的时候，银行会发起一个全新的页面，让你验证支付密码。这个时候你发现，这个支付请求不是你本人发起的，那你肯定不会输入支付密码来完成验证。所以，在用户进行支付这样的敏感操作时，应用通常会要求用户提供一些私密的信息，就是为了对CSRF攻击进行防护。</p><p>讲到这里，你现在对CSRF的攻击和防护，应该有了一个大概的了解。简单来说，CSRF其实就是黑客利用浏览器存储用户Cookie这一特性，来模拟用户发起一次带有认证信息的请求，比如转账、修改密码等。防护CSRF的原理也很简单，在这些请求中，加入一些黑客无法得到的参数信息即可，比如CSRF Token或者独立的支付密码等。掌握了这些内容，其实CSRF的知识基本上就差不多了。</p><h2>SSRF：同样的原理，发生在服务端又会发生什么？</h2><p>在CSRF中，黑客通过诱导用户访问某个网站，让用户的浏览器发起一个伪造的请求。那么，如果服务端发起了这个伪造的请求，又会发生什么呢？</p><p>我们知道，服务端也有代理请求的功能：用户在浏览器中输入一个URL（比如某个图片资源），然后服务端会向这个URL发起请求，通过访问其他的服务端资源来完成正常的页面展示。</p><p>这个时候，只要黑客在输入中提交一个内网URL，就能让服务端发起一个黑客定义的内网请求，从而获取到内网数据。这就是<strong>SSRF</strong>（Server Side Request Forgery，服务端请求伪造）的原理。而服务端作为内网设备，通常具备很高的权限，所以，这个伪造的请求往往因为能绕过大部分的认证和授权机制，而产生很严重的后果。</p><p>比方说，当我们在百度中搜索图片时，会涉及图片的跨域加载保护，百度不会直接在页面中加载图片的源地址，而是将地址通过GET参数提交到百度服务器，然后百度服务器请求到对应的图片，再返回到页面展示出来。</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/8c/3f38ba6be9035e799ac9c3b2666c0c8c.png?wh=1920*423\" alt=\"\"></p><p>这个过程中，百度服务器实际上会向另外一个URL地址发起请求（比如，上图中的<code>http://s1.sinaimg.cn</code>）。利用这个代理发起请求的功能，黑客可以通过提交一个内网的地址，实现对内网任意服务的访问。这就是SSRF攻击的实现过程，也就是我们常说的“内网穿透”。</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/48/a357b988133b1fcb7aaf51e6937a1448.jpeg?wh=1920*1080\" alt=\"\"></p><h2>通过SSRF攻击，黑客能做什么？</h2><p>了解了SSRF攻击的过程之后，我们知道，在服务端不做任何保护措施的情况下，黑客可以利用SSRF向内网发起任意的HTTP请求。那么，这些请求会产生什么样的后果呢？我总结了一下，主要会有这样两种动作：内网探测和文件读取。</p><h3>1.内网探测</h3><p>我们先来看内网探测。内外网一般是隔离的。所以，黑客在外网环境中，是无法知道内网有哪些服务器，这些服务器又分别提供了哪些服务。但是，通过一个加载图片的SSRF漏洞，黑客就能够对内网进行探测。这是怎么做到的呢？别着急，我们慢慢来看。</p><p>在前面百度搜图的例子中，我们请求的地址是：<a href=\"https://image.baidu.com/search/detail?objurl=http://s1.sinaimg.cn/picture\">https://image.baidu.com/search/detail?objurl=http://s1.sinaimg.cn/picture</a><a href=\"https://image.baidu.com/search/detail?objurl=http://s1.sinaimg.cn/picture.jpg%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C\">.jpg</a>。因为<a href=\"https://image.baidu.com/search/detail?objurl=http://s1.sinaimg.cn/picture\">http://s1.sinaimg.cn/picture</a><a href=\"https://image.baidu.com/search/detail?objurl=http://s1.sinaimg.cn/picture.jpg%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C\">.jpg</a>会正常返回一个图片，所以网页会展示出来对应的图片。</p><p>我们假定这样一个服务端逻辑：在这个请求过程中，服务端会判断objurl返回数据的Content Type是否为image/jpeg。那么，可能的返回结果就有三种：</p><ul>\n<li>“是”，则展示图片；</li>\n<li>“不是”，则返回“格式错误”；</li>\n<li>无响应，则返回“找不到图片”。</li>\n</ul><p>基于这三种返回逻辑，黑客可以构造一个恶意的请求地址：<a href=\"https://image.baidu.com/search/detail?objurl=127.0.0.1:3306%EF%BC%8C\">https://image.baidu.com/search/detail?objurl=127.0.0.1:3306</a>。如果服务器返回“格式错误”，则代表服务端本地的3306端口可用；如果返回“找不到图片”，则代表不可用。我们知道，3306是MySQL对应的端口号，因此，根据这个返回的信息，黑客就能够知道服务端本地是否开启了一个MySQL服务。接下来，黑客只需要不断重复这个过程，尝试不同的IP和端口号，就能够一点一点探测出整个内网的结构。</p><h3>2.文件读取</h3><p>接下来，我们说一下文件读取。服务器除了对图片的代理不做合法性判断之外，对很多其他的代理也不做判断，而是直接将代理的结果返回到前端。我们称这种情况为“有回显的SSRF”。在这种情况下，黑客不仅能够知道请求是否成功了，还能够知道具体返回的内容。这时候你肯定会好奇，黑客究竟是怎么做到呢？</p><p>在URI中，开头的http://和https://代表需要使用什么协议去进行请求。除了HTTP之外，URI还有很多种协议可以选择，比如file://就是直接读取本地的文件。通过输入file:///etc/passwd，黑客就能够通过一个请求获取到本地的passwd文件，从而知道本地有哪些用户。经过不断地尝试，黑客就能够把整个服务器中的文件内容都给拉取出来，这其中包括密钥、源码等极度敏感的信息。</p><p>我曾经就遇到过一个黑客。他通过SSRF攻击拿到了服务端的源码，然后通过对源码的分析，找到了一个SQL注入的漏洞，再利用SSRF发起对内网的SQL注入攻击，从而拿到了内网的命令执行权限。</p><h2>如何进行SSRF防护？</h2><p>因为SSRF漏洞起源于业务的正常功能需求（比如百度图片的图片请求等等）。因此，我们很难真正消除它。尽管如此，我还是会为你介绍几种常见的防护手段，来尽可能地提高应用的安全性。这些常见的手段主要包括：白名单限制、协议限制和请求端限制。接下来，我们一一来看。</p><p><strong>白名单的限制永远是最简单、最高效的防护措施。</strong> SSRF中的白名单，就是对用户提交上来的目标URL进行限制。比如，只允许是同一个域名下的URL。你可以理解为，让百度图片的代理服务只允许代理baidu.com的URL。但是，很多时候，因为业务功能的设计，白名单的限制并不可行。比如，上述百度图片的例子，这个功能的设计思路就是，baidu.com这个域名下能够请求各类域名下的图片资源（比如上述例子中的sinaimg.cn）。</p><p>在这种时候，<strong>我们可以对协议和资源类型等进行限制</strong>。比如：对于使用协议，我们只允许HTTP或者HTTPS协议；对于返回的内容，我们只允许图片格式的内容。通过这些限制，虽然不能完全阻止黑客发起SSRF攻击，但也大大降低了黑客能够造成的危害。</p><p>除此之外，因为SSRF最终的结果，是接受代理请求的服务端发生数据泄露。所以，SSRF防护不仅仅涉及接收URL的服务端检测，也需要接受代理请求的服务端进行配合。在这种情况下，我们就需要用到<strong>请求端限制</strong>，它的防护措施主要包括两个方面。</p><p>第一，为其他业务提供的服务接口尽量使用POST，避免GET的使用。因为，在SSRF中（以及大部分的Web攻击中），发起一个POST请求的难度是远远大于GET请求的。因为默认的请求方式是GET，而发起POST请求，需要在发起HTTP请求的时候进行配置。很多安全漏洞中不包含能够配置协议的地方。在上述百度图片的例子中，黑客显然就只能发起GET请求。如果某个敏感服务是POST的，黑客就无法请求到相关资源了。</p><p>第二，为其他业务提供的服务接口，最好每次都进行验证。通过SSRF，黑客只能发起请求，并不能获取到服务端存储的验证信息（如认证的key和secret等）。因此，只要接受代理请求的端对每次请求都进行完整的验证，黑客无法成功通过验证，也就无法完成请求了。</p><h2>总结</h2><p>好了，今天的内容差不多了，让我们来回顾一下，你要掌握的重点内容。</p><p>今天我们介绍了CSRF和SSRF这两种攻击方式。其中，CSRF是黑客控制用户的浏览器发起伪造的请求，SSRF则是黑客控制服务端发起伪造的请求。通过伪造的请求，黑客可以伪造用户或者服务器的身份，越权获取数据或者发起请求。应用中的请求接口越敏感，黑客能够造成的伤害就越大。</p><p>除此之外，CSRF和SSRF产生于正常的业务功能逻辑中，因此，我们没有办法从根本上阻止黑客发起伪造的请求。但是，你可以通过加强接口的安全验证，来避免伪造请求造成影响。在CSRF中，我们可以通过CSRF  Token或者二次验证等操作来加强防护。这样，黑客无法获取到隐私信息，也就无法发起连续的请求了。在SSRF中，我们则需要限制可请求的域名，来限制黑客能够访问到的资源。另外，目标服务端，也需要加强接口的验证，来避免伪造请求成功通过授权。</p><p>今天的内容比较多，为了方便你记忆，我总结了一个知识脑图，你可以通过它来对今天的重点内容进行复习巩固。</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/29/b0b508ed5b1903d716188fe101bd4129.jpg?wh=2250*1778\" alt=\"\"></p><h2>思考题</h2><p>接下来，让我们来看一道思考题。</p><p>通过今天的讲解，你可以回忆一下，你的企业是否遇到过CSRF/SSRF攻击呢？如果遇到过，当时是如何处理的呢？如果没有遇到过，那你负责的Web或者应用中，是否实现了CSRF/SSRF的保护逻辑呢？具体又是怎么实现的呢？</p><p>欢迎留言和我分享你的思考和疑惑，也欢迎你把文章分享给你的朋友。我们下一讲再见！</p>","neighbors":{"left":{"article_title":"07 | SQL注入：明明设置了强密码，为什么还会被别人登录？","id":181424},"right":{"article_title":"09 | 反序列化漏洞：使用了编译型语言，为什么还是会被注入？","id":182421}},"comments":[{"had_liked":false,"id":165419,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1577236038,"is_pvip":false,"replies":[{"id":"63170","content":"会，所以是通过form.submit的POST形式，跳转过去的。黑客并拿不到返回的结果。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577284263,"ip_address":"","comment_id":165419,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48821876294","product_id":100041701,"comment_content":"首先向老师请教一个问题: 从hacker.com向bank.com发起HTTP请求不会遇到同源策略的限制么？<br><br>其次谈谈自己对CSRF的理解。<br><br>CSRF攻击的两个基本条件:使用cookie进行身份认证，接口调用参数不包含任何隐私信息。我的理解是一旦身份（即cookie）被窃取，因为接口参数不包含任何隐私信息和一次性信息（如nounce），本质上黑客执行的是一次重放攻击。<br><br>一次性或随机性信息包括CSRF Token，也包括不在浏览器控制范围之内的信息，如独立的支付密码。<br><br>回到用户认证的三个层次，除了Cookie这个能证明你是谁的东西之外，还要问用户你拥有什么？（比如支付密码或电子口令牌的口令）<br><br>此外，一次性或随机信息是针对攻击者而言的。只要攻击者无法猜测到的信息，都应该被使用，就像SSRF防护中，内网的接口服务也需要对请求进行验证。<br><br>通过这一课，对于接口设计的认知更全面了。","like_count":12,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479152,"discussion_content":"会，所以是通过form.submit的POST形式，跳转过去的。黑客并拿不到返回的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577284263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1466447,"avatar":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","nickname":"Daiver","note":"","ucode":"9B1A03AFBC79BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":101122,"discussion_content":"之前浏览器是没有同源策略限制的，爆发了这样的漏洞之后浏览器材增加了同源策略，这个文章中的csrf攻击在现今的浏览器上应该是行不通的，产生了跨域。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577284059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165589,"user_name":"LEON","can_delete":false,"product_type":"c1","uid":1109922,"ip_address":"","ucode":"58F7AF5302FCAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/a2/6ea5bb9e.jpg","comment_is_top":false,"comment_ctime":1577265141,"is_pvip":true,"replies":[{"id":"63167","content":"CSRF token每个人每次请求都不一样，提前拿没有意义。如果黑客能够拿到用户的token，说明已经通过XSS等控制了用户的浏览器，则没有CSRF的意义了。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577283896,"ip_address":"","comment_id":165589,"utype":1}],"discussion_count":5,"race_medal":0,"score":"31642036213","product_id":100041701,"comment_content":"请教老师一个问题，通过CSRF token 来进行防护的话，有没有可能黑客通过自己转账确认CSRF token的位置或者标识，然后进行CSRF模拟表单进行提交的时候，通过JS脚本把CSRF token取出来，加在黑客模拟的表单中发送给server。从而造成CSRF token 防护失效？<br>谢谢老师 ","like_count":8,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479213,"discussion_content":"CSRF token每个人每次请求都不一样，提前拿没有意义。如果黑客能够拿到用户的token，说明已经通过XSS等控制了用户的浏览器，则没有CSRF的意义了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577283896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1038798,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d9/ce/4528cb4b.jpg","nickname":"呼呼","note":"","ucode":"5D7B57C05B5D8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291262,"discussion_content":"类似的错误我犯过，当时在某宝网，开发的一个应用，为了便于其它应用的调用，我在某个接口把csrftoken放在jsonp的响应中了，然后前端同学发现，给我发了一个他的测试地址…然后我赶紧走了一个紧急发布解决这个漏洞，结果忘了通知淘金币的同学，第二天一个P4故障，这也是我唯一的一次线上故障，所幸影响不大","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594743564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2538092,"avatar":"","nickname":"懒猫","note":"","ucode":"094F30C802C0F6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572269,"discussion_content":"由于同源策略，黑客是无法从自己网站获取银行网站请求结果的，也就取不到 CSRF token。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652686138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074057,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/89/f7d841c1.jpg","nickname":"tardc","note":"","ucode":"71142F0FD5B171","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214268,"discussion_content":"我也有这样的疑问。有没有可能，在http://hacker.com页面中，黑客先通过JS脚本访问http://bank.com/transfer，然后通过JS脚本提取CSRFToken，再模拟提交表单的动作。当用户访问http://hacker.com时，JS脚本访问http://bank.com/transfer会带上用户的Cookie信息吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585155510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1074057,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/89/f7d841c1.jpg","nickname":"tardc","note":"","ucode":"71142F0FD5B171","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334355,"discussion_content":"能通过JS脚本拿到数据，那就已经是XSS的范筹了，不关CSRF什么事了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607829455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214268,"ip_address":""},"score":334355,"extra":""}]}]},{"had_liked":false,"id":165355,"user_name":"ZeroIce","can_delete":false,"product_type":"c1","uid":1305369,"ip_address":"","ucode":"30133BA83CE349","user_header":"https://static001.geekbang.org/account/avatar/00/13/eb/19/0d990b03.jpg","comment_is_top":false,"comment_ctime":1577207502,"is_pvip":false,"replies":[{"id":"63021","content":"用浏览器发起请求，会自动带上cookie的。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577229911,"ip_address":"","comment_id":165355,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23052043982","product_id":100041701,"comment_content":"老师我有个问题不太懂：现在很多接口安全机制，不可能仅仅是直接访问一个接口而不带header验证（例如：cookie）就可以成功。不需要验证，还不如直接通过postman直接请求呢。这样子的话黑客怎样实施csrf？用户身份（cookie或token）黑客怎样添加到表单里面？","like_count":5,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479133,"discussion_content":"用浏览器发起请求，会自动带上cookie的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577229911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1710046,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/17/de/36000c5a.jpg","nickname":"Louis","note":"","ucode":"9A8A67FE6A1BF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367533,"discussion_content":"并且会发现，包含跨域请求的链接的那个网页里的表单，其实代码都已经写死了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618388828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1710046,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/17/de/36000c5a.jpg","nickname":"Louis","note":"","ucode":"9A8A67FE6A1BF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367532,"discussion_content":"cookie没有添加到表单里面，cookie存储到浏览器里了，所以黑客通过用户浏览器发起跨域请求的时候，浏览器会默认带上cookie","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618388736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166897,"user_name":"瑞泉","can_delete":false,"product_type":"c1","uid":1111565,"ip_address":"","ucode":"D38E24A98FDAE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/0d/e16dff4e.jpg","comment_is_top":false,"comment_ctime":1577627160,"is_pvip":false,"replies":[{"id":"64934","content":"你好，感谢你的留言。xss可以用beef。sql注入可以用sqlmap。csrf好像没听说过，从原理上来说，也不容易做自动化的检测。<br>这类工具主要是如何发起攻击，不是本专栏的重点，因此不会做介绍，感兴趣可以自行了解。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577717778,"ip_address":"","comment_id":166897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18757496344","product_id":100041701,"comment_content":"老师，csrf xss sql注入这些Web安全有没有比较好的测试工具推荐？后续课程中会有工具介绍吗？","like_count":4,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479670,"discussion_content":"你好，感谢你的留言。xss可以用beef。sql注入可以用sqlmap。csrf好像没听说过，从原理上来说，也不容易做自动化的检测。\n这类工具主要是如何发起攻击，不是本专栏的重点，因此不会做介绍，感兴趣可以自行了解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577717778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236063,"user_name":"叮当 ","can_delete":false,"product_type":"c1","uid":1188887,"ip_address":"","ucode":"38A1C2B316C220","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/17/073c5c14.jpg","comment_is_top":false,"comment_ctime":1595300931,"is_pvip":false,"replies":[{"id":"87699","content":"假设目标是A网站，xss相当于篡改了A的html，然后执行js。csrf相当于从B向A发起请求，A的html并不会受到影响。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1595831885,"ip_address":"","comment_id":236063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14480202819","product_id":100041701,"comment_content":"老师，对于CSRF和XSS攻击的区别，我还是不太清楚，两者都是窃取信息来仿冒用户操作，看评论说一个发生在当前域名，一个是其他域名，对这一点能否讲的详细一点，比如为什么XSS只能发生在当前域名呢。除了这个不同，还有其他不同点吗？谢谢老师！","like_count":3,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501929,"discussion_content":"假设目标是A网站，xss相当于篡改了A的html，然后执行js。csrf相当于从B向A发起请求，A的html并不会受到影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595831885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165556,"user_name":"稳","can_delete":false,"product_type":"c1","uid":1284626,"ip_address":"","ucode":"BF5723E63E4115","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/12/06863960.jpg","comment_is_top":false,"comment_ctime":1577259708,"is_pvip":false,"replies":[{"id":"63168","content":"做好同源保护，黑客没办法在其他域名下，拿到用户在当前域名下的接口返回结果。然后，把token和session等会话标识绑定即可。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577284104,"ip_address":"","comment_id":165556,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14462161596","product_id":100041701,"comment_content":"想请假老师个问题，前后端分离项目中，怎样做csrf？如果通过接口返回，是不是黑客也可以额外做一次接口请求呢？","like_count":3,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479203,"discussion_content":"做好同源保护，黑客没办法在其他域名下，拿到用户在当前域名下的接口返回结果。然后，把token和session等会话标识绑定即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577284104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165395,"user_name":"ZeroIce","can_delete":false,"product_type":"c1","uid":1305369,"ip_address":"","ucode":"30133BA83CE349","user_header":"https://static001.geekbang.org/account/avatar/00/13/eb/19/0d990b03.jpg","comment_is_top":false,"comment_ctime":1577233806,"is_pvip":false,"replies":[{"id":"63174","content":"浏览器发起请求，会自动带上这个请求域名的cookie，所以黑客不需要主动添加。。。。看浏览器怎么处理认证了，我理解Basic Auth浏览器应该也是会自动带上的，吧？","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577284517,"ip_address":"","comment_id":165395,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14462135694","product_id":100041701,"comment_content":"上一条留言：<br>老师我有个问题不太懂：现在很多接口安全机制，不可能仅仅是直接访问一个接口而不带header验证（例如：cookie）就可以成功。不需要验证，还不如直接通过postman直接请求呢。这样子的话黑客怎样实施csrf？用户身份（cookie或token）黑客怎样添加到表单里面<br><br>另外一个问题：假如我的是Authorization。 header头部验证？而不是cookie（浏览器每个请求都带上cookie）","like_count":3,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479144,"discussion_content":"浏览器发起请求，会自动带上这个请求域名的cookie，所以黑客不需要主动添加。。。。看浏览器怎么处理认证了，我理解Basic Auth浏览器应该也是会自动带上的，吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577284517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1038798,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d9/ce/4528cb4b.jpg","nickname":"呼呼","note":"","ucode":"5D7B57C05B5D8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291264,"discussion_content":"header中的Authorization的话不会自动带上，现在前后端分离的很多框架用这种方案，比较著名的jwt（json web token）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594744074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267573,"user_name":"烫烫烫","can_delete":false,"product_type":"c1","uid":1386818,"ip_address":"","ucode":"C06018670DE76A","user_header":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","comment_is_top":false,"comment_ctime":1607831715,"is_pvip":true,"replies":[{"id":"99774","content":"挺正确的。csrf不需要页面漏洞，发起攻击和扩散的成本低。但是xss相当于控制整个网页，危害程度更大。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1611284292,"ip_address":"","comment_id":267573,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10197766307","product_id":100041701,"comment_content":"老师，关于XSS和CSRF，我是这么理解的：<br>1、如果黑客发现用户把验证信息放在session里，且没有其它校验的话，就可以发起CSRF攻击，即，构造一个恶意URL，诱导用户点击，然后跳转到目标网页发起请求；<br>2、更进一步，如果黑客发现XSS漏洞，可在目标网页上构造恶意参数，诱导用户点击，从而修改HTML页面，相当于一定程度上控制了用户的网页。此时，黑客不仅可以拿到session，还可以拿到localStorage等数据，任意发起请求；<br><br>以上，不知是否正确，望老师答复，谢谢","like_count":2,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511681,"discussion_content":"挺正确的。csrf不需要页面漏洞，发起攻击和扩散的成本低。但是xss相当于控制整个网页，危害程度更大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611284292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165420,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1577236323,"is_pvip":false,"replies":[{"id":"63169","content":"敏感的上行操作全部使用POST，既符合GET和POST本身的设计初衷，也能够提升安全性，所以还是挺普遍的。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577284189,"ip_address":"","comment_id":165420,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10167170915","product_id":100041701,"comment_content":"目前还没遇到过CSRF和SSRF的攻击，首先对于CSRF攻击，主要是使用CSRF-token进行防护的，这个很多web框架都提供了现成的模块可供使用。对于SSRF主要是用了白名单和接口认证的方式，文中提到的一个方案：全部使用POST，也考虑过，可是很多人认为这种方式可奇怪，不好理解，所以就没用。<br>这里也请教下老师，接口全部使用POST请求的这种方式在业界是否用的普遍？","like_count":2,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479153,"discussion_content":"敏感的上行操作全部使用POST，既符合GET和POST本身的设计初衷，也能够提升安全性，所以还是挺普遍的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577284189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165396,"user_name":"Middleware","can_delete":false,"product_type":"c1","uid":1072015,"ip_address":"","ucode":"C0028293ECDD47","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/8f/4b0ab5db.jpg","comment_is_top":false,"comment_ctime":1577233849,"is_pvip":true,"replies":[{"id":"63172","content":"嗯，有些绝对了。应该是上行操作都用POST","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577284364,"ip_address":"","comment_id":165396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10167168441","product_id":100041701,"comment_content":"尽量使用 POST 请求方式，似乎不太好吧？有违 RESTFul","like_count":2,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479145,"discussion_content":"嗯，有些绝对了。应该是上行操作都用POST","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577284364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187271,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1584071620,"is_pvip":false,"replies":[{"id":"72330","content":"1、关键就在于csrf发生在用户端，而不是黑客端，所以黑客拿不到任何请求的信息。如果能截获请求信息或者知道密码，就完全没必要发起csrf了，直接黑客自己发请求就好了。<br>2、不需要加密，一个简单token都是足够的。就是确保不是任意的请求都能够被服务端接收，而是需要通过部分黑客掌握不到的信息进行认证。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1584107427,"ip_address":"","comment_id":187271,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879038916","product_id":100041701,"comment_content":"问题：1 CSRF Token，服务器发送和客户端发送的CSRF Token是一样的么？如果一样，黑客如果截获了CSRF Token,再发给服务器岂不是转账成功了？二次密码输入也是同理，只要知道二次密码是什么，这个方案也形同虚设了。<br>问题2：SSRF的服务端验证，是不是通过对称密钥或非对称密钥实现？即请求其他服务接口时，需要拼接一个唯一标识的内部密码字段，类似CSRF Token。","like_count":1,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487050,"discussion_content":"1、关键就在于csrf发生在用户端，而不是黑客端，所以黑客拿不到任何请求的信息。如果能截获请求信息或者知道密码，就完全没必要发起csrf了，直接黑客自己发请求就好了。\n2、不需要加密，一个简单token都是足够的。就是确保不是任意的请求都能够被服务端接收，而是需要通过部分黑客掌握不到的信息进行认证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584107427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168578,"user_name":"律飛","can_delete":false,"product_type":"c1","uid":1462608,"ip_address":"","ucode":"65394E437AD2DF","user_header":"https://static001.geekbang.org/account/avatar/00/16/51/50/f5f2a121.jpg","comment_is_top":false,"comment_ctime":1578113782,"is_pvip":false,"replies":[{"id":"65647","content":"后面会讲到一些防护工具。Web安全相关的主要就是WAF了","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1578308173,"ip_address":"","comment_id":168578,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873081078","product_id":100041701,"comment_content":"对于CSRF攻击，主要是使用CSRF-token进行防护的，这个很多web框架都提供了现成的模块可供使用；对于支付、修改用户密码等关键操作采用手机验证码等二次验证。<br>对于SSRF主要是用白名单和接口认证的方式，还可以采用协议限制。<br>请教老师，作为运维人员，除了用工具扫描漏洞外，在日常运维监控方面可以做些什么来发现是否有入侵事件呢？","like_count":2,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480259,"discussion_content":"后面会讲到一些防护工具。Web安全相关的主要就是WAF了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578308173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167077,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1577685408,"is_pvip":false,"replies":[{"id":"64932","content":"是的。支付密码的意义，除了防CSRF这类攻击，其实也是一定程度上强化用户对密码的保护意识。支付密码其实强调了说这个密码和普通密码意义不一样，因此用户一般只在脑子里面记忆，不会轻易写下来。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577717260,"ip_address":"","comment_id":167077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872652704","product_id":100041701,"comment_content":"CSRF的防御方式算是提前学习到了：正准备做相关的事情，之前不理解为何现在许多现金支付为何越来越多的使用手机验证；其实目的就是避免该环节用户的密码和支付密码被保存从而被利用。","like_count":1,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479736,"discussion_content":"是的。支付密码的意义，除了防CSRF这类攻击，其实也是一定程度上强化用户对密码的保护意识。支付密码其实强调了说这个密码和普通密码意义不一样，因此用户一般只在脑子里面记忆，不会轻易写下来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577717260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165659,"user_name":"仰望星空","can_delete":false,"product_type":"c1","uid":1117087,"ip_address":"","ucode":"4EA928AC927055","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/9f/788b964e.jpg","comment_is_top":false,"comment_ctime":1577279627,"is_pvip":false,"replies":[{"id":"63263","content":"存cookie里面是不安全了。你说的card token是干啥用的？不太了解。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577352196,"ip_address":"","comment_id":165659,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5872246923","product_id":100041701,"comment_content":"如果csrf toke也存储在cookie里是不是就不安全了，但奇怪的是spring security 框架就是把card token存储在cookie里返回给浏览器的，似乎也没人说不安全。","like_count":1,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479248,"discussion_content":"存cookie里面是不安全了。你说的card token是干啥用的？不太了解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577352196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1685457,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b7/d1/94a0220b.jpg","nickname":"1.1","note":"","ucode":"955730BDF9E13B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212816,"discussion_content":"将 token 放 cookie 中 如同虚设，客户端访问接口还是会自动带上 cookie，token 自然在其中，服务端检验 token 正确，也就起不到防护作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585020013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1881403,"avatar":"","nickname":"方红霞","note":"","ucode":"1ED5F71D142FF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192989,"discussion_content":"短信验证码就是csrf token","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583114669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117087,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0b/9f/788b964e.jpg","nickname":"仰望星空","note":"","ucode":"4EA928AC927055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104659,"discussion_content":"打错了，不是card是csrf ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577445369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165591,"user_name":"LEON","can_delete":false,"product_type":"c1","uid":1109922,"ip_address":"","ucode":"58F7AF5302FCAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/a2/6ea5bb9e.jpg","comment_is_top":false,"comment_ctime":1577265403,"is_pvip":true,"replies":[{"id":"63141","content":"XSS攻击发生在当前域名，CSRF攻击发生在其他域名。总体来说，XSS攻击能够覆盖CSRF的危害，但XSS难度更好，传播能力更弱。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577269989,"ip_address":"","comment_id":165591,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5872232699","product_id":100041701,"comment_content":"感觉XSS攻击和CSRF攻击很像，这两种攻击比较起来具体有什么关系和区别吗？","like_count":1,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479214,"discussion_content":"XSS攻击发生在当前域名，CSRF攻击发生在其他域名。总体来说，XSS攻击能够覆盖CSRF的危害，但XSS难度更好，传播能力更弱。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577269989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058063,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqI8ZIibPxzp0MjydjvFoFhQMkUT9NhrxvBHDIQviaP7cKw1icosibLYBUVpYdQImzictqjccLlibSFJnMw/132","nickname":"瞭望塔","note":"","ucode":"D9747975B16E2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216349,"discussion_content":"1、CSRF需要登陆后操作，XSS不需要\n\n2、CSRF是请求页面api来实现非法操作，XSS是向当前页面植入js脚本来修改页面内容。\n\n3、CSRF是网站过分信任用户造成的，XSS是用户过分信任网站造成的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585438091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306291,"user_name":"阿白","can_delete":false,"product_type":"c1","uid":2704431,"ip_address":"","ucode":"1AA0E07921A380","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/2f/67d8a9ee.jpg","comment_is_top":false,"comment_ctime":1628487024,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1628487024","product_id":100041701,"comment_content":"对于csrf浏览器为什么不直接应用同源策略阻止跨域发送post请求呢？感觉跨域post的应用场景在我的经验里还没出现，老师可以分享一下这个的应用场景吗？","like_count":0},{"had_liked":false,"id":278092,"user_name":"李文彬","can_delete":false,"product_type":"c1","uid":2251534,"ip_address":"","ucode":"4CD326DC443028","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia4qBUs5bFs5tU3yVCcBapIcnVftM60nrJ73eu30YDMbDNvjhvnibct3pMYlj62G1c7nH8jSBaiaLw/132","comment_is_top":false,"comment_ctime":1612756473,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612756473","product_id":100041701,"comment_content":"如果是服务（都是内网IP）之间的接口调用，一般会做什么校验？因为接口之间调用很多，目前没有做校验，感觉不是很安全～","like_count":0},{"had_liked":false,"id":220169,"user_name":"吕志勇","can_delete":false,"product_type":"c1","uid":1166289,"ip_address":"","ucode":"E5E8DB1A2CDE34","user_header":"https://static001.geekbang.org/account/avatar/00/11/cb/d1/6aceeb79.jpg","comment_is_top":false,"comment_ctime":1590195885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590195885","product_id":100041701,"comment_content":"好熟悉的名词，但是今天才知道是怎么回事，谢谢","like_count":0},{"had_liked":false,"id":217071,"user_name":"Hello World","can_delete":false,"product_type":"c1","uid":1509767,"ip_address":"","ucode":"2EC06699EC9613","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/87/60d3f68c.jpg","comment_is_top":false,"comment_ctime":1589416453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589416453","product_id":100041701,"comment_content":"开启浏览器samesite属性对于csrf来说也是很好的防护","like_count":0},{"had_liked":false,"id":199191,"user_name":"COOK","can_delete":false,"product_type":"c1","uid":1233016,"ip_address":"","ucode":"0F1C0E7CA4F36B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/78/a11a999d.jpg","comment_is_top":false,"comment_ctime":1585481932,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585481932","product_id":100041701,"comment_content":"ssrf通过服务端代理攻击，加白名单，限制协议或方法","like_count":0},{"had_liked":false,"id":199186,"user_name":"COOK","can_delete":false,"product_type":"c1","uid":1233016,"ip_address":"","ucode":"0F1C0E7CA4F36B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/78/a11a999d.jpg","comment_is_top":false,"comment_ctime":1585481721,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585481721","product_id":100041701,"comment_content":"通过诱导性的网页发起，增加csrf token来防止","like_count":0},{"had_liked":false,"id":193615,"user_name":"半兽人","can_delete":false,"product_type":"c1","uid":1297619,"ip_address":"","ucode":"AEB09E0C0892EA","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/d3/bcb7a3fd.jpg","comment_is_top":false,"comment_ctime":1584933980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584933980","product_id":100041701,"comment_content":"CSRF、SSRF是WEB安全的难点，老师能把这个讲透很了不起。","like_count":0},{"had_liked":false,"id":193386,"user_name":"COOK","can_delete":false,"product_type":"c1","uid":1233016,"ip_address":"","ucode":"0F1C0E7CA4F36B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/78/a11a999d.jpg","comment_is_top":false,"comment_ctime":1584891479,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584891479","product_id":100041701,"comment_content":"转账一般都要使用双因素验证，也是为了防止CSRF","like_count":0},{"had_liked":false,"id":191909,"user_name":"大鹏展翅","can_delete":false,"product_type":"c1","uid":1308449,"ip_address":"","ucode":"244C4648E64E66","user_header":"https://static001.geekbang.org/account/avatar/00/13/f7/21/fbfc06c5.jpg","comment_is_top":false,"comment_ctime":1584803104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584803104","product_id":100041701,"comment_content":"安全攻防，认真学习","like_count":0},{"had_liked":false,"id":189487,"user_name":"官","can_delete":false,"product_type":"c1","uid":1696727,"ip_address":"","ucode":"E3FF6D04B9846B","user_header":"https://static001.geekbang.org/account/avatar/00/19/e3/d7/d7b3505f.jpg","comment_is_top":false,"comment_ctime":1584521309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584521309","product_id":100041701,"comment_content":"自己公司更多地是做一些偏向内网使用的ERP系统，感觉更多的是SSRF的防护要更加重要一些，我认为黑客会通过伪造公司内网的请求，获取公司组织和资源的数据。不过感觉可能内网规模毕竟不大，虽然数据不少但是可配备的人员资源不多，个人觉得通过白名单来进行限制，让代理服务只能从内网的服务器发出，虽然考虑到业务增长规模，可能后面还要不断的维护这个白名单池子，但是现阶段考虑到人员配置感觉应该是比较合适的办法。","like_count":0},{"had_liked":false,"id":167428,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1577792656,"is_pvip":false,"replies":[{"id":"65084","content":"并不是不安全，而是因为你自己可以拿到自己的csrf token，所以可以通过token的校验。而对于黑客来说，他只能够控制你的浏览器去发起请求，无法拿到存储的cookie，所以是拿不到csrf token的。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577930480,"ip_address":"","comment_id":167428,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1577792656","product_id":100041701,"comment_content":"csrf经常遇到，ssrf第一次听到。我用过django的csrfmiddware控件，利用的就是csrftoken，由于我作自动化测试的，在作接口测试的时候，发现只要把csrftoken的值与form中的csrfmiddlertoken的hidden类型值保持一致就可以通过了。我发现cdrftoken是不安全的。","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479863,"discussion_content":"并不是不安全，而是因为你自己可以拿到自己的csrf token，所以可以通过token的校验。而对于黑客来说，他只能够控制你的浏览器去发起请求，无法拿到存储的cookie，所以是拿不到csrf token的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577930480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1257460,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","nickname":"小老鼠","note":"","ucode":"C663A0C863A515","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113829,"discussion_content":"csrf token很容易得到，查看网页原码，即可看见。<input type=hidden name=csrfmiddlewaretoken value=dfgggfgggggfggggggghfghhjjjjjgggbnb....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577935142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1173894,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","nickname":"heyman","note":"","ucode":"92EF9EF1B1B1B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1257460,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","nickname":"小老鼠","note":"","ucode":"C663A0C863A515","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":129720,"discussion_content":"但黑客不能通过你的浏览器看网页源码","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578731041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":113829,"ip_address":""},"score":129720,"extra":""}]}]},{"had_liked":false,"id":165728,"user_name":"早起不吃虫","can_delete":false,"product_type":"c1","uid":1369757,"ip_address":"","ucode":"13CD3B5E1F9435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","comment_is_top":false,"comment_ctime":1577290427,"is_pvip":false,"replies":[{"id":"63250","content":"篇幅确实有限，对很多内容进行了删减。有不明白的欢迎留言讨论～","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577345751,"ip_address":"","comment_id":165728,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577290427","product_id":100041701,"comment_content":"老师总结的很好，不过由于篇幅所限，讲的稍显不够详细，所以看到评论区有很多相关的疑问，建议增加篇幅，哈哈😄","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479269,"discussion_content":"篇幅确实有限，对很多内容进行了删减。有不明白的欢迎留言讨论～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577345751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165521,"user_name":"alan","can_delete":false,"product_type":"c1","uid":1083425,"ip_address":"","ucode":"2CA8D0B6B7D5A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/21/50b2418a.jpg","comment_is_top":false,"comment_ctime":1577251390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577251390","product_id":100041701,"comment_content":"讲得太好了！","like_count":0},{"had_liked":false,"id":165397,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1577233946,"is_pvip":false,"replies":[{"id":"63171","content":"SSRF其实就是看，通过HTTP请求，都能从内网获取些什么信息。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577284324,"ip_address":"","comment_id":165397,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577233946","product_id":100041701,"comment_content":"CSRF了解了，SSRF攻击原理理解了，SSRF发起攻击的细节还有很多不了解的，需要扩展学习下","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479146,"discussion_content":"SSRF其实就是看，通过HTTP请求，都能从内网获取些什么信息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577284324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}