{"id":257837,"title":"12 | 架构案例：基于OAuth 2.0/JWT的微服务参考架构","content":"<blockquote>\n<p>你好，我是王新栋。</p>\n</blockquote><blockquote>\n<p>在前面几讲，我们一起学习了OAuth 2.0 在开放环境中的使用过程。那么OAuth 2.0 不仅仅可以用在开放的场景中，它可以应用到我们任何需要授权/鉴权的地方，包括微服务。</p>\n</blockquote><blockquote>\n<p>因此今天，我特别邀请了我的朋友杨波，来和你分享一个基于OAuth 2.0/JWT的微服务参考架构。杨波，曾先后担任过携程框架部的研发总监和拍拍贷基础架构部的研发总监，在微服务和OAuth 2.0有非常丰富的实践经验。</p>\n</blockquote><blockquote>\n<p>其中，在携程工作期间，他负责过携程的API网关产品的研发工作，包括它和携程的令牌服务的集成；在拍拍贷工作期间，他负责过拍拍贷的令牌服务的研发和运维工作。这两家公司的令牌服务和OAuth 2.0类似，但要更简单些。</p>\n</blockquote><blockquote>\n<p>接下来，我们就开始学习杨波老师给我们带来的内容吧。</p>\n</blockquote><p>你好，我是杨波。</p><p>从单体到微服务架构的演进，是当前企业数字化转型的一大趋势。<a href=\"https://oauth.net/2/\">OAuth 2.0</a>是当前业界标准的授权协议，它的核心是若干个针对不同场景的令牌颁发和管理流程；而<a href=\"https://jwt.io/\">JWT</a>是一种轻量级、自包含的令牌，可用于在微服务间安全地传递用户信息。</p><p>据我目前了解到的情况，虽然有不少企业已经部分或全部转型到微服务架构，但是在授权认证机制方面，它们一般都是定制自研的，比方说携程和拍拍贷的令牌服务。之所以定制自研，主要原因在于标准的OAuth 2.0协议相对比较复杂，门槛也比较高。定制自研固然可以暂时解决企业的问题，但是不具备通用性，也可能有很多潜在的安全风险。</p><!-- [[[read_end]]] --><p>那么，到底应该如何将行业标准的OAuth 2.0/JWT和微服务集成起来呢，又有没有可落地的参考架构呢？</p><p>针对这个问题，今天我就和你分享一种可落地的参考架构。不过，我要提前说明的是，这个架构的思想源于<a href=\"https://www.kaper.com/cloud/micro-services-architecture-with-oauth2-and-jwt-part-1-overview/\">MICRO-SERVICES ARCHITECTURE WITH OAUTH2 AND JWT – PART 1 – OVERVIEW</a>这篇文章。根据原作者Thijs的描述，他提出的架构已经在企业落地架构了。如果你还想获得关于原架构的更多细节，建议进一步参考“<a href=\"https://dzone.com/articles/what-is-pkce\">What is PKCE？</a>”这篇文章。</p><p>我认为，Thijs给出的架构确实具有可落地性和参考价值，但是他的架构里面对某些微服务层次的命名，例如BFF和Facade层，和目前主流的微服务架构不符，还有他的架构应该是手绘，不够清晰，也不容易理解。为此，我专门用今天这一讲，来改进Thijs给出的架构，并补充针对不同场景的流程。</p><p>为了方便理解，在接下来的讲述中，我会假定有这样一家叫ACME的新零售公司，它已经实现了数字化转型，微服务电商平台是支持业务运作的核心基础设施。</p><p>在业务架构方面，ACME有近千家线下门店，这些门店通过POS系统和电商平台对接。公司还有一些物流发货中心，拣选（Order Picking）系统也要和电商平台对接。另外，公司还有很多送货司机，通过App和电商平台对接。当然，ACME还有一些电商网站，做线上营销和销售，这些网站是电商平台的主要流量源。</p><p>虽然支持ACME公司业务运作的技术平台很复杂，但是它的核心可以用一个简化的微服务架构图来描述：</p><p><img src=\"https://static001.geekbang.org/resource/image/22/ff/228199yya6051f1f62f23547a88be4ff.jpg?wh=1920*1080\" alt=\"\"></p><p>可以看出，这个微服务架构是运行在Kubernetes集群中的。当然了，这个架构实际上并不一定需要Kubernetes环境，用传统数据中心也可以。另外，它的整体认证授权架构是基于OAuth 2.0/JWT实现的。</p><p>接下来，我按这个微服务架构的分层方式，依次和你分析下它的每一层，以及应用认证/授权和服务调用的相关流程。这样，你不仅可以理解一个典型的微服务架构该如何分层，还可以弄清楚OAuth 2.0/JWT该如何与微服务进行集成。</p><h2>微服务分层架构</h2><p>ACME公司的微服务架构，大致可以分为Nginx反向代理层、Web应用层、Gateway网关层、BEF层和领域服务层，还包括一个IDP服务。总体上讲，这是一种目前主流的微服务架构分层方式，每一层职责单一、清晰。</p><p>接下来，我们具体看看每一层的主要功能。</p><h3>Nginx反向代理层</h3><p>首先，Nginx集群是整个平台的流量入口。Nginx是7层HTTP反向代理，主要功能是实现反向路由，也就是将外部流量根据HOST主机头或者PATH，路由到不同的后端，比方说路由到Web应用，或者直接到网关Gateway。</p><p>在Kubernetes体系中，Nginx是和Ingress Controller（入口控制器）配合工作的（总称为Nginx Ingress），Ingress Controller支持通过Ingress Rules，配置Nginx的路由规则。</p><h3>Web应用层</h3><p>这一层主要是一些Web应用，html/css/js等资源就住在这一层。</p><p>Web服务层通常采用传统的Web MVC + 模版引擎方式处理，可以实现服务器端渲染，也可以采用单页SPA方式。这一层主要由公司的前端团队负责，通常会使用Node.js技术栈来实现，也可以采用Spring MVC技术栈实现。具体怎么实现，要看公司的前端团队更擅长哪种技术。当这一层需要后台数据时，可以通过网关调用后台服务获取数据。</p><h3>Gateway网关层</h3><p>这一层是微服务调用流量的入口。网关的主要职责是反向路由，也就是将前端请求根据HOST主机头、或者PATH、或者查询参数，路由到后端目标微服务（比如，图中的IDP/BFF或者直接到领域服务)。</p><p>另外，网关还承担两个重要的安全职责：</p><ul>\n<li>一个是令牌的校验和转换，将前端传递过来的OAuth 2.0访问令牌，通过调用IDP进行校验，并转换为包含用户和权限信息的JWT令牌，再将JWT令牌向后台微服务传递。</li>\n<li>另外一个是权限校验，网关的路由表可以和OAuth 2.0的Scope进行关联。这样，网关根据请求令牌中的权限范围Scope，就可以判断请求是否具有调用后台服务的权限。</li>\n</ul><p>关于安全相关的场景和流程，我会在下一章节做进一步解释。</p><p>另外，网关还需承担集中式限流、日志监控，以及支持CORS等功能。</p><p>对于网关层的技术选型，当前主流的API网关产品，像Netflix开源的Zuul、Spring Cloud Gateway等，都可以考虑。</p><h3>IDP服务</h3><p>IDP是Identity Provider的简称，主要负责OAuth 2.0授权协议处理，OAuth 2.0和JWT令牌颁发和管理，以及用户认证等功能。IDP使用后台的Login-Service进行用户认证。</p><p>对于IDP的技术选型，当前主流的Spring Security OAuth，或者RedHat开源的KeyCloak，都可以考虑。其中，Spring Security OAuth是一个OAuth 2.0的开发框架，适合企业定制。KeyCloak则是一个开箱即用的OAuth 2.0/OIDC产品。</p><h3>BFF层</h3><p>BFF是Backend for Frontend的简称，主要实现对后台领域服务的聚合（Aggregation，有点类似数据库的Join）功能，同时为不同的前端体验（PC/Mobile/开放平台等）提供更友好的API和数据格式。</p><p>BFF中可以包含一些业务逻辑，甚至还可以有自己的数据库存储。通常，BFF要调用两个或两个以上的领域服务，甚至还可能调用其它的BFF（当然一般并不建议这样调用，因为这样会让调用关系变得错综复杂，无法理解）。</p><p>如果BFF需要获取调用用户或者OAuth 2.0 Scope相关信息，它可以从传递过来的JWT令牌中直接获取。</p><p>BFF服务可以用Node.js开发，也可以用Java/Spring等框架开发。</p><h3>领域服务层</h3><p>领域服务层在整个微服务架构的底层。这些服务包含业务逻辑，通常有自己独立的数据库存储，还可以根据需要调用外部的服务。</p><p>根据微服务分层原则，领域服务禁止调用其它的领域服务，更不允许反向调用BFF服务。这样做是为了保持微服务职责单一（Single Responsibility）和有界上下文（Bounded Context），避免复杂的领域依赖。领域服务是独立的开发、测试和发布单位。在电商领域，常见的领域服务有用户服务、商品服务、订单服务和支付服务等。</p><p>和BFF一样，如果领域服务需要获取调用用户或者OAuth 2.0 Scope相关信息，它可以从传递过来的JWT令牌中直接获取。</p><p>可以看到，领域服务和BFF服务都是无状态的，它们本身并不存储用户状态，而是通过传递过来的JWT数据获取用户信息。所以在整个架构中，微服务都是无状态、可以按需水平扩展的，状态要么存在用户端（浏览器或者手机App中），要么存在集中的数据库中。</p><h2>OAuth 2.0/JWT如何与微服务进行集成？</h2><p>以上，就是ACME公司的整个微服务架构的层次了。这个分层架构，对于大部分的互联网业务系统场景都适用。因此，如果你是一家企业的架构师，需要设计一套微服务架构，完全可以参考它来设计。接下来，我再演示几个典型的应用认证场景，以及相应的服务调用流程，来帮助你理解OAuth 2.0/JWT是如何和微服务进行集成的。</p><h3>场景1：第一方Web应用+资源拥有者凭据模式</h3><p>这个场景是用户访问ACME公司自己的电商网站，假设这个电商网站是用Spring MVC开发的。考虑到这是一个第一方场景（也就是公司自己开发的网站应用），我们可以选OAuth 2.0的资源拥有者凭据许可（Resource Owner Password Credentials Grant），也可以选更安全的授权码许可（Authorization Code Grant）。因为这里没有第三方的概念，所以我们就选相对简单的资源拥有者凭据许可。</p><p>下面是一个认证授权流程样例。注意，这个只是突出了关键步骤，实际生产的话，还有很多需要完善和优化的地方。另外，为描述简单，这里假定一个成功流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/bd/b658befe1da937fa3685b55522487dbd.jpg?wh=1920*980\" alt=\"\"></p><p>在上面的图中，用户对应OAuth 2.0中的资源拥有者，ACME IDP对应OAuth 2.0中的授权服务。另外，前面架构图中的后台微服务（包括BFF和基础领域服务），对应OAuth 2.0中的受保护资源。</p><p>下面是流程说明：</p><ol>\n<li>用户通过浏览器访问ACME公司的电商网站，点击登录链接。</li>\n<li>Web应用返回登录界面（这个登录页可以是网站自己定制开发）。</li>\n<li>用户输入用户名、密码进行认证。</li>\n<li>Web应用将用户名、密码，通过网关转发到IDP的令牌获取端点（POST /oauth2/token，grant_type=password）。</li>\n<li>IDP通过Login Service对用户进行认证。</li>\n<li>IDP认证通过，返回有效访问令牌（根据需要也可以返回刷新令牌）。</li>\n<li>Web应用接收到访问令牌，创建用户Session，并将OAuth 2.0令牌保存其中，然后返回登录成功到用户端。</li>\n<li>用户浏览器中记录Session Cookie，登录成功。</li>\n</ol><p>那接下来，我们再来看看认证授权之后的服务调用流程。同样，这里也只是突出了关键步骤，并假定是一个成功流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/4a/c88e46dd26deb76d6yy8f42f83066f4a.jpg?wh=1920*980\" alt=\"\"></p><ol>\n<li>用户登录后，在网站上点击查看自己的购物历史记录。</li>\n<li>Web应用通过网关调用后台API（查询用户的购物历史记录），请求HTTP header中带上OAuth 2.0令牌（来自用户Session）。</li>\n<li>网关截取OAuth 2.0令牌，去IDP进行校验。</li>\n<li>IDP校验令牌通过，再通过令牌查询用户和Scope信息，构建JWT令牌，返回。</li>\n<li>网关获得JWT令牌，校验Scope是否有权限调用API，如果有就转发到后台API进行调用。</li>\n<li>后台BFF（或者领域服务）通过传递过来的JWT获取用户信息，根据用户ID查询购物历史记录，返回。</li>\n<li>Web应用获得用户的购物历史数据，可以根据需要缓存在Session中，再返回用户端。</li>\n<li>购物历史数据返回到用户浏览器端。</li>\n</ol><p>注意，这个服务调用流程，也可以应用在其他场景中，比如我们接下来要学习的“第一方移动应用+授权码许可模式”和“第三方Web应用+授权码许可模式”。基本上只要你理解了这个流程原理，就可以根据实际场景灵活套用。</p><h3>场景2：第一方移动应用+授权码许可模式</h3><p>第二个场景是用户通过手机访问ACME公司自己的电商App。这是第一方的原生应用（Native App）场景，通常考虑选用OAuth 2.0的用户名密码模式，但是并不安全（参考<a href=\"https://www.kaper.com/cloud/micro-services-architecture-with-oauth2-and-jwt-part-3-idp/\">MICRO-SERVICES ARCHITECTURE WITH OAUTH2 AND JWT – PART 3 – IDP</a>的Security Consideration部分），所以业界建议采用授权码模式，而且是要支持<a href=\"https://dzone.com/articles/what-is-pkce\">PKCE</a>扩展的授权码模式。</p><p>那接下来，我们来看看这个认证授权的流程。同样，这里只是突出了关键步骤，并假定是一个成功流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/93/443dab973274d8d13c76b2ef4cd1d393.jpg?wh=1920*980\" alt=\"\"></p><ol>\n<li>用户访问电商App，点击登录。</li>\n<li>App生成PKCE相关的code verifier + challenge。</li>\n<li>App以内嵌方式启动手机浏览器，访问IDP的统一认证页(GET /authorize)，请求带上PKCE的code challenge相关参数。</li>\n<li>IDP返回统一认证页。</li>\n<li>用户认证和授权。</li>\n<li>IDP通过Login Service对用户进行认证。</li>\n<li>IDP返回授权码到App浏览器。</li>\n<li>App截取浏览器带回的授权码，将授权码+PKCE code verifer，通过网关转发到IDP的令牌获取端点（POST /oauth2/token, grant_type=authorization-code）。</li>\n<li>IDP校验PKCE和授权码，校验通过则返回有效访问令牌。</li>\n<li>App获取令牌，本地存储，登录成功。</li>\n</ol><p>之后，App如果需要和后台交互，可直接通过网关调用后台微服务，请求HTTP header中带上OAuth 2.0访问令牌即可。后续的服务调用流程，和“第一方应用+资源拥有者凭据模式”类似。</p><h3>场景3：第三方Web应用+授权码模式</h3><p>第三个场景是某第三方合作厂商开发了一个Web网站，要访问ACME公司的电商开放平台API。这是一个第三方Web应用场景，通常选用OAuth 2.0的授权码许可模式。</p><p>那接下来，我们来看看这个认证授权的流程。同样，这里只是突出了关键步骤，并假设是一个成功流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/02/57/02affbdf32f005af65454f3acc4cd957.jpg?wh=1856*986\" alt=\"\"></p><ol>\n<li>\n<p>用户访问这个第三方Web应用，点击登录链接。</p>\n</li>\n<li>\n<p>Web应用后台向ACME公司的IDP服务发送申请授权码请求（GET /authorize）。</p>\n</li>\n<li>\n<p>用户被重定向到ACME公司的IDP统一登录页面。</p>\n</li>\n<li>\n<p>用户进行认证和授权。</p>\n</li>\n<li>\n<p>IDP通过Login Service对用户进行认证。</p>\n</li>\n<li>\n<p>认证和授权通过，IDP返回授权码。</p>\n</li>\n<li>\n<p>Web应用获得授权码，再向IDP服务的令牌获取端点发起请求（POST /oauth2/token, grant_type=authorization-code）。</p>\n</li>\n<li>\n<p>IDP校验授权码，校验通过则返回有效OAuth 2.0令牌（根据需要也可以返回刷新令牌）。</p>\n</li>\n<li>\n<p>Web应用创建用户Session，将OAuth 2.0令牌保存在Session中，然后返回登录成功到用户端。</p>\n</li>\n<li>\n<p>用户浏览器中记录Session Cookie，登录成功。</p>\n</li>\n</ol><p>之后，第三方Web应用如果需要和ACME电商平台交互，可直接通过网关调用微服务，请求HTTP header中带上OAuth 2.0访问令牌即可。后续的服务调用流程，和前面的“第一方应用+资源拥有者凭据模式”类似。</p><h3>额外说明</h3><p>除了上面的三个主要场景和流程，我还要和你分享6点。这6点是对上面基本流程的补充，也是企业级的OAuth 2.0应用要额外考虑的。</p><p><strong>第一点是，IDP的API要支持从OAuth 2.0访问令牌到JWT令牌的互转</strong>。今天我们提到的集成架构采用OAuth 2.0 访问令牌 + JWT令牌的混合模式，中间需要实现OAuth 2.0访问令牌到JWT令牌的互转。这个互转API并非OAuth 2.0的标准，有些IDP产品（比方Spring Security OAuth）可能并不支持，因此需要用户定制扩展。</p><p><strong>第二点是，关于单页SPA应用场景</strong>。关于单页SPA应用场景，简单做法是采用隐式许可，但是这个模式是OAuth 2.0中比较不安全的，所以一般不建议采用。对于纯单页SPA应用，业界推荐的做法是：</p><ul>\n<li>如果浏览器支持Web Crypto for PKCE，则可以考虑使用类似“第一方移动应用”场景下的授权码许可+PKCE扩展流程；</li>\n<li>否则，考虑SPA+传统Web混合（hybrid）模式，前端页面可以住在客户浏览器端中，但登录认证还是由后台Web站点配合实现，走类似“第一方Web应用”场景的资源拥有者凭据模式，或者“第三方Web应用”场景下的授权码许可模式。</li>\n</ul><p><strong>第三点是，关于SSO单点登录场景</strong>。为了简化描述，上面的流程没有考虑SSO单点登录场景。如果要支持Web SSO，那么各种应用场景都必须通过浏览器+IDP登录页集中登录，并且IDP要支持Session，用于维护登录态。如果IDP以集群方式部署的话，还要考虑粘性Sticky Session或者集中式Session。</p><p>这样，当用户通过一个Web应用登录后，后续如果再用其它Web应用登录的话，只要IDP上的Session还存在，那么这个登录就可以自动完成，相当于单点登录。</p><p>当然，如果要支持SSO，IDP的Session Cookie要种在Web应用的根域上，也就是说不同Web应用的根域必须相同，否则会有跨域问题。</p><p><strong>第四点是关于IDP和网关的部署方式</strong>。前面的几张架构图中，IDP虽然躲在网关后面，但实际上IDP可以直接通过Nginx对外暴露，不经过网关。或者，IDP的登录授权页面，可以通过Nginx直接暴露，API接口则走网关。</p><p><strong>第五点是关于刷新令牌</strong>。为了简化描述，上面的流程没有详细说明刷新令牌的集成方式。企业根据场景需要，可以启用刷新令牌，来延长用户的登录时间，具体的集成方式需要考虑安全性的需求。</p><p><strong>第六点是关于Web Session</strong>。为了简化描述，在上面的流程中，Web应用登录成功后假设启用Web Session，也就是服务器端Session。在实际场景中，Web Session并非唯一选择，也可以采用简单的客户端Session方式，也称无状态Session，也就是在客户端浏览器Cookie中保存OAuth 2.0访问令牌。</p><h2>小结</h2><p>好了，以上就是今天的主要内容了。今天，我和你分享了如何将行业标准的OAuth 2.0/JWT和微服务集成起来，你需要记住以下四点。</p><p>第一，目前主流的微服务架构大致可以分为5层，分别是：Nginx流量接入层-&gt;Web应用层-&gt;API网关层-&gt;BFF聚合层-&gt;领域服务层。这个架构可以住在云原生的Kubernetes环境中，也可以住在传统数据中心里头。</p><p>第二，API网关是微服务调用的入口，承担重要的安全认证和鉴权功能。主要的安全操作包括：一，通过IDP校验OAuth 2.0访问令牌，并获取带用户和权限信息的JWT令牌；二，基于OAuth 2.0的Scope对API调用进行鉴权。</p><p>第三，在微服务架构体系下，通常需要一个集中的IDP服务，它相当于一个Authentication &amp; Authorization as a Service角色，负责令牌颁发/校验/管理，还有用户认证。</p><p>第四，在今天这一讲提出的架构中，Web应用层（网关之前）的安全机制主要基于OAuth 2.0访问令牌实现（它是一种<strong>透明令牌</strong>或者称<strong>引用令牌</strong>），微服务层（网关之后）的安全机制主要基于JWT令牌实现（它是一种<strong>不透明</strong>的<strong>自包含令牌</strong>）。网关层在中间实现两种令牌的转换。这是一种OAuth 2.0访问令牌+JWT令牌的混合模式。</p><p>之所以这样设计，是因为Web层靠近用户端，如果采用JWT令牌，会暴露用户信息，有一定的安全风险，所以采用OAuth 2.0访问令牌，它是一个无意义随机字符串。而在网关之后，安全风险相对低，同时很多服务需要用户信息，所以采用自包含用户信息的JWT令牌更合适。</p><p>当然，如果企业内网没有特别的安全考量，也可以直接传递完全透明的用户信息（例如使用JSON格式）。</p><h2>思考题</h2><ol>\n<li>除了今天我们讲到的OAuth 2.0访问令牌+JWT令牌的混合模式，实践中也可以全程采用OAuth 2.0访问令牌，或者全程采用JWT令牌。对比混合模式，如果全程采用OAuth 2.0访问令牌，或者全程采用JWT令牌，你觉得有哪些利弊呢？</li>\n<li>你可以说说自己对基于传统Web应用的认证授权机制的理解吗？并对比今天讲到的现代微服务的认证授权机制，你可以说说它们之间的本质差异和相似点吗？</li>\n</ol><p>欢迎你在留言区分享你的观点，也欢迎你把今天的内容分享给其他朋友，我们一起交流。</p>","neighbors":{"left":{"article_title":"11 | 实战案例：使用Spring Security搭建一套基于JWT的OAuth 2.0架构","id":264179},"right":{"article_title":"13 | 各大开放平台是如何使用OAuth 2.0的？","id":266631}},"comments":[{"had_liked":false,"id":237004,"user_name":"西","can_delete":false,"product_type":"c1","uid":1202447,"ip_address":"","ucode":"439CF4B1FEF9EE","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/0f/dfb310b5.jpg","comment_is_top":false,"comment_ctime":1595647978,"is_pvip":false,"replies":[{"id":"88473","content":"不错⛽️","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596555870,"ip_address":"","comment_id":237004,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74610092010","product_id":100053901,"comment_content":"全程使用oauth2令牌，那么网关之后的每个微服务都需要自己根据令牌token去idp或者redis或者mysql中去查询用户信息，如果全程使用jwt令牌，主要是还是由于jwt自包含用户信息，存在暴露用户信息的安全风险。（如果jwt中只存在用户名，不存在其他相关信息也可以考虑全程使用jwt令牌）","like_count":17,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502284,"discussion_content":"不错⛽️","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596555870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243351,"user_name":"良胜","can_delete":false,"product_type":"c1","uid":1764364,"ip_address":"","ucode":"9EBE2491291BE4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ec/0c/f20586b1.jpg","comment_is_top":false,"comment_ctime":1598068022,"is_pvip":false,"replies":[{"id":"89738","content":"回复你的一些问题：<br><br>1. IDP就是基于OAuth2的授权服务，比方说可以采用Spring Security OAuth2来实现IDP。IDP可以自己实现登录认证的逻辑，也可以把登录认证的逻辑委派给其它服务，比方说独立的Login Service来实现。Spring Security OAuth2的登录认证逻辑就是可以plugin的，可以委派给其它服务来实现。<br><br>2. 网关和IDP没有直接的client关系，只是IDP需要支持一些API端点，网关可以通过这些端点来实现：1)令牌校验，2)获取对应的JWT令牌。<br><br>3. 登录使用手机号+验证代码，这是一种具体的基于双因素的认证方式，其实OAuth2本身只是要求用户在授权获取令牌前先进行登录认证，具体登录认证的方式它并不关心。Spring Security OAuth2的登录认证方式也是可以plugin的，你可以用默认的用户名密码方式，也可以定制为手机号+验证码方式。实际上Spring Security OAuth2就是基于Spring Security开发的，你只需要定制Spring Security来实现基于手机号+验证码的登录认证方式就可以。<br><br>","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1598199842,"ip_address":"","comment_id":243351,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31662839094","product_id":100053901,"comment_content":"王老师，现在我正在搭建一个微服务框架，计划在网关层做集中认证，那网关是否应该时作为OAUTH2的client组建？<br>另外你画的微服务的架构图，IDP 是作为什么角色？授权服务器还是client，另外Login Svc 又是承担什么工作？<br><br>我目前遇到困难，我们期望不管是web侧还是app侧，统一使用token进行认证，并且登录使用手机号+验证码的方式，现在如果访问受限资源，默认会跳到login页面，不是返回json数据，请老师指点","like_count":7,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504265,"discussion_content":"回复你的一些问题：\n\n1. IDP就是基于OAuth2的授权服务，比方说可以采用Spring Security OAuth2来实现IDP。IDP可以自己实现登录认证的逻辑，也可以把登录认证的逻辑委派给其它服务，比方说独立的Login Service来实现。Spring Security OAuth2的登录认证逻辑就是可以plugin的，可以委派给其它服务来实现。\n\n2. 网关和IDP没有直接的client关系，只是IDP需要支持一些API端点，网关可以通过这些端点来实现：1)令牌校验，2)获取对应的JWT令牌。\n\n3. 登录使用手机号+验证代码，这是一种具体的基于双因素的认证方式，其实OAuth2本身只是要求用户在授权获取令牌前先进行登录认证，具体登录认证的方式它并不关心。Spring Security OAuth2的登录认证方式也是可以plugin的，你可以用默认的用户名密码方式，也可以定制为手机号+验证码方式。实际上Spring Security OAuth2就是基于Spring Security开发的，你只需要定制Spring Security来实现基于手机号+验证码的登录认证方式就可以。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598199842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1764364,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ec/0c/f20586b1.jpg","nickname":"良胜","note":"","ucode":"9EBE2491291BE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302439,"discussion_content":"多谢老师回答。目前我已经使用网关作为资源服务器，认证统一集中在网关处理，后面的业务微服务不再集成spring security.  不做认证相关的逻辑，网关会将用户的基本信息：userId，userName，mobile通过header传递到业务微服务。目前用户认证支持用户名密码，手机号验证码认证，获取jwt token。那么微服务之间的调用是否还需要做鉴权，使用什么方式鉴权？如果使用client credential，但是目前微服务是不再集成spring oauth，不是资源服务器，业界标准做法是什么样的？请指教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598924528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238943,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1596376997,"is_pvip":false,"replies":[{"id":"88483","content":"JWT是自包含令牌，里头可以包含一部分用户信息，全程使用JWT也可以，JWT内部的数据本身只是加签防篡改，本来就是客户端可见的，一般服务器端启用HTTPS就可以了，再做一次加密意义并不大。<br><br>相比JWT，普通访问令牌机制还有一个好处，就是可以集中吊销令牌，而JWT一般需要等到自然过期，因为它是自校验的。<br><br>","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596559382,"ip_address":"","comment_id":238943,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27366180773","product_id":100053901,"comment_content":"其实全程使用JWT，也没啥问题，只是如果想其较为安全，就要把公钥放在客户端，让其加密后再传输（或者获取到令牌后就直接加密存放在cookies或localstorage），但JWT的内容较多，即使加密后的内容也会较长，公网环境传输效率不高。而访问令牌，就是为了解决公网传输效率问题。不知有没理解对。","like_count":6,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502905,"discussion_content":"JWT是自包含令牌，里头可以包含一部分用户信息，全程使用JWT也可以，JWT内部的数据本身只是加签防篡改，本来就是客户端可见的，一般服务器端启用HTTPS就可以了，再做一次加密意义并不大。\n\n相比JWT，普通访问令牌机制还有一个好处，就是可以集中吊销令牌，而JWT一般需要等到自然过期，因为它是自校验的。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596559382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567028,"discussion_content":"accees_token不能暴漏到客户端，所以引入了授权码。为什么jwt就能暴漏到客户端呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650813101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262209,"user_name":"永旭","can_delete":false,"product_type":"c1","uid":1068819,"ip_address":"","ucode":"C9C74BE32C8F46","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","comment_is_top":false,"comment_ctime":1605665738,"is_pvip":false,"replies":[{"id":"95198","content":"BFF虽然是前端开发，但是它也是一种聚合API，所以它理应放在API网关后面，这样就可以统一通过网关实现反向路由，限流熔断，日志监控等功能。<br><br>所以BFF一般不放在API网关层前面，静态资源一般放在API网关层前面。<br><br>也有一些企业的做法是BFF聚合逻辑直接写在网关上的，这种在企业规模不大、BFF逻辑不复杂时也可以采用，可以节省硬件资源。<br>","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1605714163,"ip_address":"","comment_id":262209,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14490567626","product_id":100053901,"comment_content":"老师你好, 查了下BFF相关文章<br>有些架构图里把BFF放在API 网关层左边, 挨着web层.也有放在API 网关层里边的<br>能分析分析这两种的有什么优势和劣势 , 区别吗 ?","like_count":3,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509736,"discussion_content":"BFF虽然是前端开发，但是它也是一种聚合API，所以它理应放在API网关后面，这样就可以统一通过网关实现反向路由，限流熔断，日志监控等功能。\n\n所以BFF一般不放在API网关层前面，静态资源一般放在API网关层前面。\n\n也有一些企业的做法是BFF聚合逻辑直接写在网关上的，这种在企业规模不大、BFF逻辑不复杂时也可以采用，可以节省硬件资源。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605714163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259192,"user_name":"永旭","can_delete":false,"product_type":"c1","uid":1068819,"ip_address":"","ucode":"C9C74BE32C8F46","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","comment_is_top":false,"comment_ctime":1604649162,"is_pvip":false,"replies":[{"id":"94574","content":"你说的应该是DMZ非军事区网络吧，在传统数据中心，在外网和内部受信网络之间一般有一个DMZ网络，这里头部署防火墙&#47;反向代理&#47;网关等可以增加各种安全防范措施。参考：<br>https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;DMZ_(computing)<br><br>DMZ可以是物理的，也可以是逻辑的，在上文的架构图中，防火墙+Ingress+Gateway也可以算是在DMZ区内，可以增加各种安全措施。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1605015070,"ip_address":"","comment_id":259192,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14489551050","product_id":100053901,"comment_content":"老师, 以前我接触的架构图里有DMG层, 会部署前端. <br>现在课程中 微服务架构图里已经没有了 DMG层了. <br>要是有的话能部署什么呢 ?","like_count":3,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508873,"discussion_content":"你说的应该是DMZ非军事区网络吧，在传统数据中心，在外网和内部受信网络之间一般有一个DMZ网络，这里头部署防火墙/反向代理/网关等可以增加各种安全防范措施。参考：\nhttps://en.wikipedia.org/wiki/DMZ_(computing)\n\nDMZ可以是物理的，也可以是逻辑的，在上文的架构图中，防火墙+Ingress+Gateway也可以算是在DMZ区内，可以增加各种安全措施。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605015070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237118,"user_name":"inrtyx","can_delete":false,"product_type":"c1","uid":1246178,"ip_address":"","ucode":"81CD18FF34ABAB","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/e2/5768d26e.jpg","comment_is_top":false,"comment_ctime":1595682887,"is_pvip":true,"replies":[{"id":"88475","content":"网站会话有几种做法，一种是Session数据都存在服务器端，客户端浏览器cookie中只存sesssionID，我把这种称为Web Session，这种是服务器端有状态的Session技术。另外一种是Session数据都存在浏览器cookie中，我把这种称为客户端Session，这种是服务器端无状态的Session技术。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596556383,"ip_address":"","comment_id":237118,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14480584775","product_id":100053901,"comment_content":"第六点是关于 Web Session，这个不太明白。token信息肯定要放浏览器啊！不然岂不是每次请求都要登录？","like_count":3,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502306,"discussion_content":"网站会话有几种做法，一种是Session数据都存在服务器端，客户端浏览器cookie中只存sesssionID，我把这种称为Web Session，这种是服务器端有状态的Session技术。另外一种是Session数据都存在浏览器cookie中，我把这种称为客户端Session，这种是服务器端无状态的Session技术。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596556383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246178,"avatar":"https://static001.geekbang.org/account/avatar/00/13/03/e2/5768d26e.jpg","nickname":"inrtyx","note":"","ucode":"81CD18FF34ABAB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296537,"discussion_content":"谢谢老师回答！session放在cookies那服务器怎么识别用户呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596580515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1489957,"avatar":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","nickname":"tt","note":"","ucode":"7753B79AD5A9AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293999,"discussion_content":"我的理解是这时浏览器端仍然只保存SessionID，只有在服务端才可以通过塔得到OAuth token","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595756208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236971,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1595631456,"is_pvip":false,"replies":[{"id":"88472","content":"不错","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596555816,"ip_address":"","comment_id":236971,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14480533344","product_id":100053901,"comment_content":"全程采用JWt，用户信息容易暴露，对于安全级别高，最好不使用，对于oauth在安全级别更高，但是实现用户信息更复杂，混合之后，权衡了安全性和易用性，个人理解","like_count":3,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502271,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596555816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1637085,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fa/dd/f640711f.jpg","nickname":"哈德韦","note":"","ucode":"E7C9B3D087D2D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299122,"discussion_content":"如果把 payload 加密，还会有用户信息暴露的问题吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597569283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264460,"user_name":"Geek_7c4953","can_delete":false,"product_type":"c1","uid":1809168,"ip_address":"","ucode":"359745D4725D4F","user_header":"","comment_is_top":false,"comment_ctime":1606470975,"is_pvip":false,"replies":[{"id":"96388","content":"APP用用户名密码模式，通过native界面登录，这是一个一步流程，并且APP上要存clientId+secret，黑客可以破解app获取clientId+secret，然后通过猜测轮训你的post登录接口偷取用户密码。<br><br>APP上的浏览器方式走的是一个3-legged完全OAuth2授权码流程，比较安全，很难被黑客利用，而且浏览器方式容易增加验证码和双因素等更安全校验机制。<br><br>请参考下文的第7点：Security Consideration<br>https:&#47;&#47;www.kaper.com&#47;cloud&#47;micro-services-architecture-with-oauth2-and-jwt-part-3-idp&#47;<br><br><br><br>","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1606836698,"ip_address":"","comment_id":264460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10196405567","product_id":100053901,"comment_content":"有一个问题没有理解，APP用password模式登陆和APP上的浏览器打开统一认证页用用户名密码登录，这两者之间在安全层面上有什么区别？","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510571,"discussion_content":"APP用用户名密码模式，通过native界面登录，这是一个一步流程，并且APP上要存clientId+secret，黑客可以破解app获取clientId+secret，然后通过猜测轮训你的post登录接口偷取用户密码。\n\nAPP上的浏览器方式走的是一个3-legged完全OAuth2授权码流程，比较安全，很难被黑客利用，而且浏览器方式容易增加验证码和双因素等更安全校验机制。\n\n请参考下文的第7点：Security Consideration\nhttps://www.kaper.com/cloud/micro-services-architecture-with-oauth2-and-jwt-part-3-idp/\n\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606836698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253525,"user_name":"Giggle","can_delete":false,"product_type":"c1","uid":2236207,"ip_address":"","ucode":"5DBF822E30D25B","user_header":"https://static001.geekbang.org/account/avatar/00/22/1f/2f/a6a042ba.jpg","comment_is_top":false,"comment_ctime":1602763817,"is_pvip":false,"replies":[{"id":"92698","content":"移动端原生App也可以采用OAuth2的授权码模式(建议采用支持PKCE的增强型授权码模式)，这时候可以在App中以嵌入方式启动手机浏览器，走授权码申请流程，等IDP 返回授权码到 App 浏览器之后，App 可以截取浏览器带回的授权码，然后App可以继续走后面令牌获取的流程。<br><br>所以这个流程App需要借助手机上的浏览器这个中介，来走完OAuth2的授权码流程，这个是目前针对原生App采用OAuth2协议的推荐做法。<br><br>具体参考本文的[场景 2：第一方移动应用 + 授权码许可模式]的描述。<br><br>额外参考：<br>https:&#47;&#47;auth0.com&#47;blog&#47;oauth-2-best-practices-for-native-apps&#47;<br>https:&#47;&#47;auth0.com&#47;docs&#47;flows&#47;authorization-code-flow-with-proof-key-for-code-exchange-pkce","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1602865295,"ip_address":"","comment_id":253525,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10192698409","product_id":100053901,"comment_content":"请问老师，若只是一个移动端app，想让其实现Oauth协议，提供对其他app的授权登录，这种app的后台Oauth协议的实现是不是不适合使用SpringSecurityOauth这个框架，因为我看框架源码里面授权码模式或者简易模式都是基于浏览器重定向机制实现返回授权码code或者token，用户未授权情况下还会返回相应的授权页面，我是不是可以理解SpringSecurityOauth其实是解决网站和网站的第三方授权的场景，假如我是一个移动端的后台，就不适合使用这个框架。","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507096,"discussion_content":"移动端原生App也可以采用OAuth2的授权码模式(建议采用支持PKCE的增强型授权码模式)，这时候可以在App中以嵌入方式启动手机浏览器，走授权码申请流程，等IDP 返回授权码到 App 浏览器之后，App 可以截取浏览器带回的授权码，然后App可以继续走后面令牌获取的流程。\n\n所以这个流程App需要借助手机上的浏览器这个中介，来走完OAuth2的授权码流程，这个是目前针对原生App采用OAuth2协议的推荐做法。\n\n具体参考本文的[场景 2：第一方移动应用 + 授权码许可模式]的描述。\n\n额外参考：\nhttps://auth0.com/blog/oauth-2-best-practices-for-native-apps/\nhttps://auth0.com/docs/flows/authorization-code-flow-with-proof-key-for-code-exchange-pkce","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602865295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237453,"user_name":"Tim Zhang","can_delete":false,"product_type":"c1","uid":1214499,"ip_address":"","ucode":"4956AC5FE45EE1","user_header":"https://static001.geekbang.org/account/avatar/00/12/88/23/a0966b4d.jpg","comment_is_top":false,"comment_ctime":1595835436,"is_pvip":false,"replies":[{"id":"88478","content":"企业根据具体场景，需要定义一个scope和API之间的权限关系表，这个表需要单独维护，并且可以缓存在网关上，加快网关的校验。所谓校验，就去查这张表，看某个scope能否访问某个API。<br><br>scope和authority并没有所谓官方定义，你可以根据上下文赋予它们具体的语义。<br><br>","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596557946,"ip_address":"","comment_id":237453,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10185770028","product_id":100053901,"comment_content":"网关获得 JWT 令牌，校验 Scope 是否有权限调用 API，如果有就转发到后台 API 进行调用。<br><br>校验是如何校验的？ 并且scope 和 authority有啥区别么","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502426,"discussion_content":"企业根据具体场景，需要定义一个scope和API之间的权限关系表，这个表需要单独维护，并且可以缓存在网关上，加快网关的校验。所谓校验，就去查这张表，看某个scope能否访问某个API。\n\nscope和authority并没有所谓官方定义，你可以根据上下文赋予它们具体的语义。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596557946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1214499,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/23/a0966b4d.jpg","nickname":"Tim Zhang","note":"","ucode":"4956AC5FE45EE1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296570,"discussion_content":"这个scope是否肯能上千上万","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596591417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332913,"user_name":"gesanri","can_delete":false,"product_type":"c1","uid":1121174,"ip_address":"","ucode":"AE3B97DC3ED668","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELtOO0HKrj5SI5JSlmwiaCvaF6GLiaTmf5NX88OZaO3HymTAGTeIoicBUjqzmMF6sF5raPFjuqLFibrrw/132","comment_is_top":false,"comment_ctime":1643807750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5938775046","product_id":100053901,"comment_content":"这里网关层的根据access token生成jwt，是不是只有第一次才会这样，完后就把这个映射关系存起来了，后面access token再来就直接取jwt了，否则每次都生成的话就没意义了","like_count":1},{"had_liked":false,"id":272387,"user_name":"LYF_Mr","can_delete":false,"product_type":"c1","uid":1426932,"ip_address":"","ucode":"FC8A8267E3CE17","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKmyjUJe2Fxe7xkpfe3fLiaukp7NJNCictNMC1wYYuIibIGN8ED5U5yR8wBWYqiaZubHpdPOibH80JB6iaQ/132","comment_is_top":false,"comment_ctime":1610075202,"is_pvip":true,"replies":[{"id":"98967","content":"两个办法：<br>1.  BFF层做聚合(aggregation)调用。<br>2. B domain数据变更时，通过消息机制同步到A domain，也就是通过数据复制冗余解决。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1610460850,"ip_address":"","comment_id":272387,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5905042498","product_id":100053901,"comment_content":"王老师，我想问下，如果各个domain 服务之间有依赖，该如何处理？例如 A domain 进行添加数据时，其中某字段需要从 B domain 中，获取该值，那么该业务逻辑，是不是得封装在BFF层，而不应该在domain服务中实现？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513261,"discussion_content":"两个办法：\n1.  BFF层做聚合(aggregation)调用。\n2. B domain数据变更时，通过消息机制同步到A domain，也就是通过数据复制冗余解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610460850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254250,"user_name":"长脖子树","can_delete":false,"product_type":"c1","uid":1182802,"ip_address":"","ucode":"D9090EF67EEB1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","comment_is_top":false,"comment_ctime":1603091966,"is_pvip":true,"replies":[{"id":"93105","content":"网关和OAuth2服务都是属于第一方的服务，可以认为它们处在同一个受信域内，所以可以通过网关透传一些参数。<br><br>即使不通过网关，OAuth2服务前面一般也有前置反向代理(例如nginx)，这些参数也会穿过反向代理。<br><br>Web应用指传统的具有服务器端的MVC应用，例如用Spring开发的Web应用，它可以直接访问IDP。<br>","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1603377320,"ip_address":"","comment_id":254250,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5898059262","product_id":100053901,"comment_content":"有个问题, 场景 1：第一方 Web 应用 + 资源拥有者凭据模式 这张图里https:&#47;&#47;static001.geekbang.org&#47;resource&#47;image&#47;b6&#47;bd&#47;b658befe1da937fa3685b55522487dbd.jpg<br>第4步 Web 应用将用户名、密码，通过网关转发到 IDP 的令牌获取端点（POST &#47;oauth2&#47;token，grant_type=password）。<br>这里发送的参数包含了 client_id , client_secret, username, password 都传给了网关, 但这样不是暴露了 单个应用唯一的 client_secret (app_secert) 了么?<br>还是说这里的web应用, 还包含了其后台系统? 是通过后台系统直接访问内网的 IDP 服务的? ","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507332,"discussion_content":"网关和OAuth2服务都是属于第一方的服务，可以认为它们处在同一个受信域内，所以可以通过网关透传一些参数。\n\n即使不通过网关，OAuth2服务前面一般也有前置反向代理(例如nginx)，这些参数也会穿过反向代理。\n\nWeb应用指传统的具有服务器端的MVC应用，例如用Spring开发的Web应用，它可以直接访问IDP。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603377320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244509,"user_name":".","can_delete":false,"product_type":"c1","uid":1544954,"ip_address":"","ucode":"0915E4C3DE38FC","user_header":"https://static001.geekbang.org/account/avatar/00/17/92/fa/25b63c06.jpg","comment_is_top":false,"comment_ctime":1598543495,"is_pvip":false,"replies":[{"id":"90028","content":"web session可以集中存在服务器端，cookie中只需存一个sessionId。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1598614249,"ip_address":"","comment_id":244509,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5893510791","product_id":100053901,"comment_content":"session存在cookie中安全吗","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504610,"discussion_content":"web session可以集中存在服务器端，cookie中只需存一个sessionId。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598614249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1544954,"avatar":"https://static001.geekbang.org/account/avatar/00/17/92/fa/25b63c06.jpg","nickname":".","note":"","ucode":"0915E4C3DE38FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301803,"discussion_content":"如果cookie中的sessionID被截取了是不是直接就能使用该用户信息了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598666223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242987,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1597912170,"is_pvip":false,"replies":[{"id":"89739","content":"你们的vue静态资源直接住在nginx反向代理上？如果是的话，那么这是一种简化的部署方式，如果vue应用不多，可以这么弄。但是如果单页应用很多，而且还有传统web mvc应用的话，就要考虑采用本文的独立web层(在nginx和网关之间)部署方案，这种方案会具有更好的扩展性和灵活性。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1598200133,"ip_address":"","comment_id":242987,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892879466","product_id":100053901,"comment_content":"我们前端用的VUE，直接就被nginx静态代理了，nginx直接转发到用spring gateway实现的网关。那么微服务架构图中的 web 对应我们系统中的那一块呢？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504148,"discussion_content":"你们的vue静态资源直接住在nginx反向代理上？如果是的话，那么这是一种简化的部署方式，如果vue应用不多，可以这么弄。但是如果单页应用很多，而且还有传统web mvc应用的话，就要考虑采用本文的独立web层(在nginx和网关之间)部署方案，这种方案会具有更好的扩展性和灵活性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598200133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242955,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1597904778,"is_pvip":false,"replies":[{"id":"89741","content":"理论上可以，但是你的很多服务都会集中依赖redis，这个有耦合性和扩展性问题。scope校验可以网关集中做，也可以每个服务自己再根据需要单独做。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1598200867,"ip_address":"","comment_id":242955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892872074","product_id":100053901,"comment_content":"IDP 校验令牌通过后，将令牌和用户信息对应关系存储在redis中，同时返回给网关OAuth2.0令牌而不是包含用户信息的JWT。网关校验scope信息有权调用API就转发，API中再根据OAuth2.0令牌从redis中获取用户信息而不是解析JWT。请问这种方式可行不？另外验证scope是在网关中做还是网关在调用其他服务？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504139,"discussion_content":"理论上可以，但是你的很多服务都会集中依赖redis，这个有耦合性和扩展性问题。scope校验可以网关集中做，也可以每个服务自己再根据需要单独做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598200867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237825,"user_name":"Geek_334e32","can_delete":false,"product_type":"c1","uid":2051037,"ip_address":"","ucode":"82EDCA2C44D2DE","user_header":"","comment_is_top":false,"comment_ctime":1595983725,"is_pvip":false,"replies":[{"id":"88479","content":"请看我在文中给出的解释连接，用户名&#47;密码模式对于无线App并不安全：<br>&quot;We have learned the hard way, so let’s warn everyone else here ������ DO NOT USE grant_type=password in any place where a hacker can de-compile your app or find your client_id plus client_secret. If you create a mobile app, you MUST use the full 3-legged Oauth via an embedded web form (with captcha or similar protection on it). Never ever create a native app login screen, which can ask your server via a simple post if the used credentials are correct (e.g. like the password grant type). Having this allows someone to start massively guessing for passwords. We know, app-developers do not like non-native things, but believe me, this is the only simple way to prevent attacks AND maintain super fast flexibility in changing the login procedure without having to roll out a new app version and trying to kill off old versions of the app. Having the web form login allows us to easily add for example 2-factor authentication when we want or need to.&quot;","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596558221,"ip_address":"","comment_id":237825,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5890951021","product_id":100053901,"comment_content":"场景 2：第一方移动应用 + 授权码许可模式。  这个不合适吧？现在app登陆都是用户名和密码或者验证码模式。","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502556,"discussion_content":"请看我在文中给出的解释连接，用户名/密码模式对于无线App并不安全：\n&amp;quot;We have learned the hard way, so let’s warn everyone else here ������ DO NOT USE grant_type=password in any place where a hacker can de-compile your app or find your client_id plus client_secret. If you create a mobile app, you MUST use the full 3-legged Oauth via an embedded web form (with captcha or similar protection on it). Never ever create a native app login screen, which can ask your server via a simple post if the used credentials are correct (e.g. like the password grant type). Having this allows someone to start massively guessing for passwords. We know, app-developers do not like non-native things, but believe me, this is the only simple way to prevent attacks AND maintain super fast flexibility in changing the login procedure without having to roll out a new app version and trying to kill off old versions of the app. Having the web form login allows us to easily add for example 2-factor authentication when we want or need to.&amp;quot;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596558221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2053830,"avatar":"","nickname":"Geek_d42976","note":"","ucode":"E9B87F2443E77B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305767,"discussion_content":"但是文章没有详细解释如何不安全，如果app和服务端采用https连接，理论上跟h5应用不是一样吗？也就是说app和h5都是客户端，他们甚至跟同一个后端服务通信。\n\n为何h5应用可以采用密码模式，而app却不行呢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600079726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1297375,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cb/df/e72646dd.jpg","nickname":"多喝热水","note":"","ucode":"8DB7DB144B7E30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2053830,"avatar":"","nickname":"Geek_d42976","note":"","ucode":"E9B87F2443E77B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360229,"discussion_content":"oauth2不负责认证只负责授权。oauth2的用户名密码模式只是授权的一种方式，并不是真正意义上的认证，具体认证可以自行实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616394862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305767,"ip_address":""},"score":360229,"extra":""}]}]},{"had_liked":false,"id":237253,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1215139,"ip_address":"","ucode":"258880ACE79448","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/a3/aee7ded7.jpg","comment_is_top":false,"comment_ctime":1595755906,"is_pvip":false,"replies":[{"id":"88476","content":"基本正确，但是jwt信息只是可以被客户端看到，一般也是没办法篡改的，只要secret key或者私钥不泄密。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596556538,"ip_address":"","comment_id":237253,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890723202","product_id":100053901,"comment_content":"全程采用JWT令牌模式，包含很多用户信息，权限信息，有泄露风险；jwt信息如果被修改，有权限越界的风险。采用OAuth令牌模式用户信息安全无问题，在领域层每次都要通过令牌查询用户级权限信息，加大的领域服务的开销，影响性能。","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502352,"discussion_content":"基本正确，但是jwt信息只是可以被客户端看到，一般也是没办法篡改的，只要secret key或者私钥不泄密。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596556538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337745,"user_name":"ascend","can_delete":false,"product_type":"c1","uid":1268755,"ip_address":"","ucode":"4F63892FB42590","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/13/d1a75b2e.jpg","comment_is_top":false,"comment_ctime":1647004950,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1647004950","product_id":100053901,"comment_content":"跨域的SSO怎么处理？","like_count":0,"discussions":[{"author":{"id":1013860,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7Db6Q1vlQ9bWr63SuE368U5gSxFu533BW6Rib5L1MkFqlwZHIpl4Ao6ZMaXxJrtQsMtbmD0qHJZTw/132","nickname":"villdecl","note":"","ucode":"65E8F5D5DA3249","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574272,"discussion_content":"我觉得这个问题本身就是有问题，sso实质还是通过共享根域下的cookie来实现的，跨域就共享不了谈何来的sso。可以参考cas协议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653939744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331762,"user_name":"官宝儿","can_delete":false,"product_type":"c1","uid":2110827,"ip_address":"","ucode":"03B4312475A984","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI5eicXFWltiaF9ibsEh2nNC80OYoHibhhE0X1hPHZ5KuAtY4Yxp5dQ4LsciaDxUHFBPlJM7kgQwkspzsQ/132","comment_is_top":false,"comment_ctime":1642753293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642753293","product_id":100053901,"comment_content":"你好老师，我想问下极客的app登陆怎么没有授权页面呢，之后发送手机号然后输入验证码就登陆了，是不是极客的手机号登陆页面就是授权页面呢？还是极客app没有用这个技术啊","like_count":0},{"had_liked":false,"id":324562,"user_name":"shihpeng","can_delete":false,"product_type":"c1","uid":1440698,"ip_address":"","ucode":"F7685343B88D29","user_header":"https://static001.geekbang.org/account/avatar/00/15/fb/ba/68bb346c.jpg","comment_is_top":false,"comment_ctime":1638501550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638501550","product_id":100053901,"comment_content":"老师您好，想藉着这个课程的机会问个问题:<br>假设我今天在做一个支付服务，对外暴露的接口可以透过加密等安全手段进行保护，但该接口在系统&#47;组织内部该如何保护呢？<br>例如有一个转帐接口transfer()，我要如何防止员工在内网自行调用这个接口进行转帐呢？","like_count":0},{"had_liked":false,"id":303839,"user_name":"静海","can_delete":false,"product_type":"c1","uid":1342563,"ip_address":"","ucode":"28A5E81CDC5C04","user_header":"https://static001.geekbang.org/account/avatar/00/14/7c/63/115a4b23.jpg","comment_is_top":false,"comment_ctime":1627020474,"is_pvip":false,"replies":[{"id":"110325","content":"建议参考Spring Security OAuth官方文档，必要时看源码+debug","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1627743355,"ip_address":"","comment_id":303839,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627020474","product_id":100053901,"comment_content":"Spring Security OAuth，自定义token失效异常能否讲讲，","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523844,"discussion_content":"建议参考Spring Security OAuth官方文档，必要时看源码+debug","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627743355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302932,"user_name":"mryao","can_delete":false,"product_type":"c1","uid":1134442,"ip_address":"","ucode":"E542BC39CCC516","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/6a/86b1cdef.jpg","comment_is_top":false,"comment_ctime":1626439414,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1626439414","product_id":100053901,"comment_content":"感谢老师深入浅出的讲解啊auth2的认证流程。工作中太常见了，例如要跟不同厂家做对接的时候。学会这个现在做对接不再抓瞎了","like_count":0},{"had_liked":false,"id":270739,"user_name":"心如止水","can_delete":false,"product_type":"c1","uid":1209254,"ip_address":"","ucode":"9EE880FB796705","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/a6/94b772ad.jpg","comment_is_top":false,"comment_ctime":1609233364,"is_pvip":false,"replies":[{"id":"98384","content":"我认为你讲的方法完全可以做到，把一部分令牌校验&#47;转换和刷新的逻辑挪到网关上(比如在网关过滤器中实现)，并且把一些和令牌关联的登录状态数据存在缓存中，通常用redis可以，保证高速访问。但是需要注意这种实现对网关有一定的耦合性，你的应用测试也依赖网关，一般企业到一定规模才考虑这种分布式做法。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1609598645,"ip_address":"","comment_id":270739,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609233364","product_id":100053901,"comment_content":"求解答：<br>网关向前对接：1.web网页、手机app、微信；2.这里前端都存了accessToken。那refreshToken也存在前端吗？<br>网关向后：判断是否有token，有则转换为用户信息(token不能存储太多的信息，会用redis存储更多数据，或者直接数据库查)，或者直接往后仍，没有则需要登录。<br>我做过在前台当做一个子系统这种，存储了clientId secret<br>也做过在后台把资源服务器作为一个客户端的，然后重新建立一个假的资源服务器的。<br>但是发现两种办法都有点取巧。<br>现在想能不能把网关作为客户端？前端展示页面或者手机app直接跟网关对接，登录了之后前端就可以通过实际的网关客户端返回accessToken，网关自己存储一份refreshToken（这里会用redis之类的吧？）。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512736,"discussion_content":"我认为你讲的方法完全可以做到，把一部分令牌校验/转换和刷新的逻辑挪到网关上(比如在网关过滤器中实现)，并且把一些和令牌关联的登录状态数据存在缓存中，通常用redis可以，保证高速访问。但是需要注意这种实现对网关有一定的耦合性，你的应用测试也依赖网关，一般企业到一定规模才考虑这种分布式做法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609598645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270266,"user_name":"刘中","can_delete":false,"product_type":"c1","uid":1217606,"ip_address":"","ucode":"AE9F19ABAFF483","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/46/e158ab35.jpg","comment_is_top":false,"comment_ctime":1609040046,"is_pvip":false,"replies":[{"id":"98379","content":"授权码流程是最严格OAuth2流程，你内部也用当然可以。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1609596933,"ip_address":"","comment_id":270266,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609040046","product_id":100053901,"comment_content":"作者你好，想问下在公司内部web前端和第三方应用均实现一次登录全部使用，是不是可以将内部web前端也当做第三方应用实现授权码模式即可。。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512572,"discussion_content":"授权码流程是最严格OAuth2流程，你内部也用当然可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609596933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257527,"user_name":"流云","can_delete":false,"product_type":"c1","uid":2232976,"ip_address":"","ucode":"5C31C34F8B9236","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIq15Qq887bH7Z5aQHfXu5vHUj4Iz68RotmUIR12vG5Y3L7icUcYgL4hicwAKYyicAmPTtoZPNPfDPOg/132","comment_is_top":false,"comment_ctime":1604021468,"is_pvip":false,"replies":[{"id":"93909","content":"这个案例所展示的参考架构，可以对接独立的用户体系，只要将独立的用户体系替换login service即可；rbac也可以集成，将用户权限信息编码在jwt令牌中即可。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1604242819,"ip_address":"","comment_id":257527,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1604021468","product_id":100053901,"comment_content":"如果后台管理系统是独立的用户体系，需要通过rbac认证，什么样的架构比较好呢","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508363,"discussion_content":"这个案例所展示的参考架构，可以对接独立的用户体系，只要将独立的用户体系替换login service即可；rbac也可以集成，将用户权限信息编码在jwt令牌中即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604242819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1174860,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ed/4c/8674b6ad.jpg","nickname":"timmy21","note":"","ucode":"9D6DED247B1F38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333750,"discussion_content":"老师提到idp和rbac集成，然后将用户权限信息编码在jwt中。我的问题是将全部的权限信息都编码进去吗？这样会不会很大？为什么不是后续服务在进行一次单独的权限校验的请求？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607608727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254100,"user_name":"陈威somebody","can_delete":false,"product_type":"c1","uid":1086696,"ip_address":"","ucode":"7390D687AAC135","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/e8/8582a747.jpg","comment_is_top":false,"comment_ctime":1603066760,"is_pvip":false,"replies":[{"id":"93011","content":"OAuth2协议规范RFC6749也提供一种Client Credentials Grant授权模式，参考规范4.4节：https:&#47;&#47;tools.ietf.org&#47;html&#47;rfc6749#section-4.4，它可以用于你说的这种没有用户&#47;浏览器参与、而是机器对机器调用的情况。<br><br>这种方式令牌有效期可以设长一点，如果过期，再通过credentials获取令牌，这个动作和刷新令牌开销差不多，所以一般没必要刷新令牌。<br><br>令牌只是能够调用的通行证，和服务端执行花多少时间没有直接关系。<br><br>在实际企业中，一般内部服务都是可以直接调用，一般做好网段隔离即可，如果服务之间调用再引入令牌和权限，反而有点自找麻烦。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1603294118,"ip_address":"","comment_id":254100,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603066760","product_id":100053901,"comment_content":"如果是后台服务间的请求（也就是并非由用户发出的请求，而是后台服务1向向后台服务2发出请求），这种情况需要刷新令牌嘛？我想到的一个edge case是，后台服务发出的请求只有1秒的有效期，但是后台服务2花了2秒才做完，这过期了怎么办？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507283,"discussion_content":"OAuth2协议规范RFC6749也提供一种Client Credentials Grant授权模式，参考规范4.4节：https://tools.ietf.org/html/rfc6749#section-4.4，它可以用于你说的这种没有用户/浏览器参与、而是机器对机器调用的情况。\n\n这种方式令牌有效期可以设长一点，如果过期，再通过credentials获取令牌，这个动作和刷新令牌开销差不多，所以一般没必要刷新令牌。\n\n令牌只是能够调用的通行证，和服务端执行花多少时间没有直接关系。\n\n在实际企业中，一般内部服务都是可以直接调用，一般做好网段隔离即可，如果服务之间调用再引入令牌和权限，反而有点自找麻烦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603294118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253937,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1602976814,"is_pvip":false,"replies":[{"id":"93009","content":"这个要看具体的业务场景，和现实世界中的公司有点类似，一般公司只有大门口有门卫，内部部门之间一般是公开的。但是也有一些公司，例如银行金融类的，它们内部还有严格的安全校验机制。<br><br>所以，根据需要，除了在API网关鉴权之外，内部服务也可以进一步再鉴权，当然这样也是有成本开销的，具体要综合权衡。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1603293389,"ip_address":"","comment_id":253937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602976814","product_id":100053901,"comment_content":"老师，如果通过ApI gateway 来做权限检查，那不就相当于我家只有大门上锁，进了大门以后每个房间都是敞开的因为每个domain 服务都不检查权限了。这样只要有人侵入到任何一个ApI gateway 之后的服务，就随便调用domain 服务了，这样不安全吧。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507224,"discussion_content":"这个要看具体的业务场景，和现实世界中的公司有点类似，一般公司只有大门口有门卫，内部部门之间一般是公开的。但是也有一些公司，例如银行金融类的，它们内部还有严格的安全校验机制。\n\n所以，根据需要，除了在API网关鉴权之外，内部服务也可以进一步再鉴权，当然这样也是有成本开销的，具体要综合权衡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603293389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243447,"user_name":"Geek_b23444","can_delete":false,"product_type":"c1","uid":1532058,"ip_address":"","ucode":"CD115E1ED4F81B","user_header":"","comment_is_top":false,"comment_ctime":1598111827,"is_pvip":false,"replies":[{"id":"89737","content":"我的理解，所谓单点登录，就是通过一个地方集中登录。只有通过一个地方进行集中登录，这个地方才能集中记住这个用户的登录态，如果每个子系统自己定义登录页，如何实现登录态管理呢？","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1598198563,"ip_address":"","comment_id":243447,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598111827","product_id":100053901,"comment_content":"请问一下，实现sso,需要集中登入页吗，各个子系统可以自定义自己的登入页吗？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504288,"discussion_content":"我的理解，所谓单点登录，就是通过一个地方集中登录。只有通过一个地方进行集中登录，这个地方才能集中记住这个用户的登录态，如果每个子系统自己定义登录页，如何实现登录态管理呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598198563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242961,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1597905583,"is_pvip":false,"replies":[{"id":"89740","content":"对于安全要求比较严格的场景，是需要集中令牌校验的，我之前工作过的公司(包括携程和拍拍贷)，都是采用集中令牌校验的。关于IDP的性能，这个是可以通过缓存等手段来进行优化的。根据之前的经验，每天10亿级的API调用量，如果合理采用缓存优化，每次令牌校验都可以小于10ms内完成。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1598200453,"ip_address":"","comment_id":242961,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1597905583","product_id":100053901,"comment_content":"如果接口的并发访问量特别大话 ，所有需要鉴权的接口每次调用经过网关的时候都需要调用IDP验证令牌，然后生成JWT返回网关，网关验证scope通过后再发起对api的真实调用，这样会不会影响性能啊？！","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504142,"discussion_content":"对于安全要求比较严格的场景，是需要集中令牌校验的，我之前工作过的公司(包括携程和拍拍贷)，都是采用集中令牌校验的。关于IDP的性能，这个是可以通过缓存等手段来进行优化的。根据之前的经验，每天10亿级的API调用量，如果合理采用缓存优化，每次令牌校验都可以小于10ms内完成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598200453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082190,"avatar":"https://static001.geekbang.org/account/avatar/00/10/83/4e/17e23752.jpg","nickname":"kkkkkk","note":"","ucode":"70E5CCF8525F08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300057,"discussion_content":"有状态服务都有这样的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597922397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237255,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1595756503,"is_pvip":false,"replies":[{"id":"88477","content":"jwt不是加密，是加签名，消息不能篡改，内容还是可以看到的。<br><br>具体要看业务场景，如果企业内网是授信的，安全风险级别低，也可以考虑不用jwt，直接传普通json格式的用户信息。<br><br>对于一些涉及银行资金业务的场景，普通的OAuth2&#47;JWT都还不够，还需要双因素和硬token等配套安全机制。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596557509,"ip_address":"","comment_id":237255,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1595756503","product_id":100053901,"comment_content":"有一个问题，JWT一般是加密的，在网关之后使用JWT仍然需要加密么？那会不会因为加解密带来性能问题？如果此时对报文内容也采用对称加密，性能下降会更严重。<br><br>该怎么处理呢？有了客户端凭据（appid + appsecret）对三方软件做认证的情况下，还需要公私钥证书或者硬Token么？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502353,"discussion_content":"jwt不是加密，是加签名，消息不能篡改，内容还是可以看到的。\n\n具体要看业务场景，如果企业内网是授信的，安全风险级别低，也可以考虑不用jwt，直接传普通json格式的用户信息。\n\n对于一些涉及银行资金业务的场景，普通的OAuth2/JWT都还不够，还需要双因素和硬token等配套安全机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596557509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024763,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a2/fb/94af9cf1.jpg","nickname":"Alex","note":"","ucode":"F6B5C64BC99FB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294139,"discussion_content":"一般内部不加密只是加签名验证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595808223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1489957,"avatar":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","nickname":"tt","note":"","ucode":"7753B79AD5A9AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1024763,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a2/fb/94af9cf1.jpg","nickname":"Alex","note":"","ucode":"F6B5C64BC99FB7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294144,"discussion_content":"嗯，我也这么理解的。\n\n现在我们需要通过网关对外提供服务，有一个行业指导意见，说除了链路加密，还要端到端进行内容加密，测试时CPU使用率就上来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595808804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294139,"ip_address":""},"score":294144,"extra":""}]}]},{"had_liked":false,"id":237008,"user_name":"Zhou","can_delete":false,"product_type":"c1","uid":2052325,"ip_address":"","ucode":"D3B7057B26E39E","user_header":"https://static001.geekbang.org/account/avatar/00/1f/50/e5/4048aa15.jpg","comment_is_top":false,"comment_ctime":1595649349,"is_pvip":false,"replies":[{"id":"88474","content":"具体要看API对安全的要求，某些API如果安全不敏感，Anonymous user也可以访问的话，那么在网关上可以做开放授权的策略。","user_name":"作者回复","user_name_real":"杨波","uid":"1030344","ctime":1596556021,"ip_address":"","comment_id":237008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595649349","product_id":100053901,"comment_content":"Anonymous user的请求在网关和oauth2上面应该怎么处理比较好？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502286,"discussion_content":"具体要看API对安全的要求，某些API如果安全不敏感，Anonymous user也可以访问的话，那么在网关上可以做开放授权的策略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596556021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}