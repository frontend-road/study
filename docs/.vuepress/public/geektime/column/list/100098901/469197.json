{"id":469197,"title":"12｜Jitter Buffer：拿什么拯救你，花屏卡顿问题","content":"<p>你好，我是李江。</p><p>之前的两节课我们讲述了如何做好带宽预测和码率控制。好的带宽预测算法能够比较准确地预测出实际的网络带宽，而好的码率控制算法能够使得编码输出码率贴合实际网络带宽。这两个算法是视频流能够在各种网络状况下流畅播放的最基础的前提。</p><p>但是在实际情况中，很多时候我们还是会遇到各种各样的卡顿和花屏的问题。相信这两种问题你也是经常遇到，同时也是让你很头痛的问题。</p><p>那么，我们这节课就来讨论一下，一般哪些环节出问题会比较容易出现卡顿，以及哪些环节有问题会比较容易出现花屏。并且，我也会给出一些常用的解决方案。通过这节课的学习，你之后再遇到花屏卡顿问题的时候，可以参考一下，从而能够快速发现问题和找到解决的方法。</p><p>在讲述具体问题之前，先简单介绍一下Jitter Buffer这个模块。它是好几个卡顿和花屏问题的处理模块。Jitter Buffer工作在接收端，主要功能就是在接收端收到包之后进行组帧，并判断帧的完整性、可解码性、发送丢包重传请求、发送关键帧请求以及估算网络抖动的。其中组帧、判断帧完整性、判断帧可解码性、丢包重传、关键帧请求都是这节课的重点。因此，我先在这里重点说一下Jitter Buffer这个模块。Jitter Buffer在接收端所处的位置如下图所示：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/79/ff/79bfdabc3eb02989fe5ec25d5d616cff.jpeg?wh=1918x447\" alt=\"图片\"></p><h2>卡顿问题</h2><p>视频卡顿是在实时视频通话场景中非常重要的一个问题。卡顿率也是实时通话场景中一个非常重要的指标。一般来说，人眼在帧率达到10fps并且均匀播放时就不太能看出来卡顿了。<strong>如果两帧之间的播放时间间隔超过了200ms，人眼就可以明显看出卡顿了。</strong>那一般什么情况下会导致两帧之间的播放时间间隔超过200ms呢？我们下面一个个来分析一下，并给出相应的解决方法。</p><p>接下来我们按照下图中采集到渲染这条链路中每一个可能引起卡顿问题的原因依次来介绍。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/b8/b60689222d6ccfdf92b1bb3cb9d47cb8.jpeg?wh=1919x682\" alt=\"图片\"></p><h3>帧率不够</h3><p>如果实际采集到的帧率或者设置的帧率本身就只有5fps，即便是均匀播放，两帧之间的间隔也会达到200ms，那么这种情况下肯定会出现卡顿。画面看起来就像是快速播放的PPT。这种情况下相信你能明显地看出来卡顿的原因。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/fa/19/fa167bb1b93f286c7854249181587719.jpeg?wh=1918x915\" alt=\"图片\"></p><p>这个问题最好的解决方法当然就是提高帧率了，比如提高到15fps或者更高。当然有的时候采集帧率就是上不来，那我们就要定位一下，采集帧率不高的具体原因是什么。</p><h3>机器性能不够，导致前处理或者编码耗时太长</h3><p>在实时通话场景中，画面是需要实时地做前处理（美颜等操作）并编码之后发送到对端进行解码播放的。如果本身机器性能不够，而画面分辨率又很高，那么这可能会导致前处理一帧或者编码器编码一帧的耗时很高。如下面两张图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/f7/d7bbb88e7af5bf7e63ef8fa8ec56dcf7.jpeg?wh=1920x809\" alt=\"图片\"><img src=\"https://static001.geekbang.org/resource/image/c4/83/c4ab10c0602d0ffbb824b9f550f4ec83.jpeg?wh=1914x941\" alt=\"图片\"></p><p>这种情况下，即便是采集的帧率很高，但是前处理和编码操作机器处理不过来，从而最后导致两帧被发送出去的间隔也会很高，这时发送到对端，对端就可能会出现明显的卡顿。<strong>这种情况在比较老的手机上特别容易出现。</strong></p><p>当出现这种情况的时候，我们可以在高分辨率的时候尽量使用GPU做前处理，并使用硬件编码或者将软件编码设置为快速档加快处理的速度。GPU做前处理和硬件编码消耗CPU比较小，并且速度更快。软件编码设置为快速档时很多费时间的编码工具都被关闭了，因此可以提高编码的速度。不过这里你需要注意一下，就是这样<strong>压缩率也会下降</strong>。</p><h3>编码器输出码率超过实际网络带宽</h3><p>这种情况是RTC实时通话场景中卡顿问题最常见的根因。当出现的时候往往会引起比较长时间的卡顿，有可能持续1～2秒钟时间。有的时候，网络突然变差，从而网络预估出来的带宽很小，但是实际播放的画面很复杂，且需要的编码码率又比较高，这样就比较容易出现发送码率大于实际带宽的问题。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/467073\">带宽预测</a>的那节课中讲过，当发送码率大于实际带宽的时候，对于有缓冲区的网络设备，它一开始会将包放在缓冲区，且当缓冲区放不下了还是会丢包。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/94/e51884ea10b69148c21a7944e60f9d94.jpeg?wh=1917x826\" alt=\"图片\"></p><p>而对于没有缓冲区的网络设备，它是直接就丢包。</p><p><img src=\"https://static001.geekbang.org/resource/image/78/d0/7896f61406dfe0377d8e3319d0d8dbd0.jpeg?wh=1920x752\" alt=\"图片\"></p><p>当包被丢弃了，对端就不能完整地恢复出一帧图像了。而我们知道，当一帧图像不能解码，那么之后所有参考它的图像就都不能解码了。并且，在RTC场景中，我们一般使用连续参考的参考帧结构，就是后面的P帧参考它的前一帧，这也就会导致在下一个IDR帧到来之前画面都会卡死。这样卡顿的时间就会很长。如果出现这种问题怎么办呢？</p><p><strong>我们需要对发送码率做严格的限制，防止它超过预估带宽。</strong>这就需要编码器的输出码率要能够贴合预估带宽。也就是说，我给编码器设置多少编码码率，编码器最好就编码出多少码率。</p><p>回顾一下我们在<a href=\"https://time.geekbang.org/column/article/468091\">第11讲</a>中讨论的内容，那是不是我们应该选择CBR的码控算法呢？是的，<strong>在RTC视频通话场景下我们最好选择CBR的码控算法，从而保证输出码率能够比较好地贴合预估带宽。</strong></p><p>如果使用VBR码控算法，编码器的输出码率会随着画面的复杂程度变化，那就会有很大的概率因为画面复杂而出现输出码率超过预估带宽的情况，从而导致对端出现严重的卡顿。而CBR码控算法是你设置多少目标码率，编码器的输出码率就会接近于目标码率。这样，超发的问题就会少很多，相应地对端出现卡顿的概率也会小很多。</p><h3>复杂帧编码后过大或者I帧比较大</h3><p>虽然，我们选择使用CBR的码控来编码可以使得一段时间内（比如说500ms或者1秒钟）的编码输出码率尽量地贴合预估带宽，但是有的时候编码画面变化很大的帧或者需要编码IDR帧的时候，还是会使得编码后这一帧的大小会比较大。如果一次性将这种大帧打包出来的所有包都直接发送到网络中，则会在一瞬间加剧网络的负担，从而容易引起网络丢包，继而引起卡顿的可能。如下面两张图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/67/fc/677444364ccf619e213944b318482bfc.jpeg?wh=1919x904\" alt=\"图片\"><img src=\"https://static001.geekbang.org/resource/image/30/03/30a3c1018d04c0fc3a02d5f912d14703.jpeg?wh=1920x1080\" alt=\"图片\"></p><p><strong>为了能够减小这种大帧带来的瞬时网络波动，我们可以在编码打包之后、发送之前，加一个平滑发送的模块来平滑地发送视频包。</strong>这个模块在WebRTC中叫做PacedSender（节奏发送器）。那它的工作原理是怎么样的呢？</p><p>PacedSender主要的工作原理就是编码输出的码流打包之后先放到它的缓冲区中，而不是直接发送。之后它再按照预估带宽大小对应的发送速度，将缓冲区中的数据发送到网络当中。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/05/22/05e1184804ef64ef310497b901c12622.jpeg?wh=1920x1080\" alt=\"图片\"></p><p>一般PacedSender每隔5ms左右发送一次包，并且它会在内部记录上一个5ms发送周期发送完之后剩余可发送的大小。同时，每隔5ms左右，它计算当前距离上一次发送包的时间差，乘上发送码率得到这段时间可以发送多少大小的数据。然后再加上上一次剩余可发送大小得到本次可发送大小。因为发送的时候是一个个RTP包发送的，而一般一个包差不多就是1500字节，所以上一个剩余可发送的大小可能为负数</p><p>如果本次可发送大小大于0，就从缓冲区中取包发送出去。并且，发送完包之后将剩余可发送大小减去发送包的大小。之后如果剩余可发送大小小于或等于0，则停止发送，并等待下一个5ms发送周期再发送。</p><p>PacedSender是通过控制实际发送码率来平滑发送的，这样能防止编码输出码率超过网络带宽太多，直接将包一次性发送到网络导致卡顿。但是我们要注意，如果编码器输出码率差网络带宽太多，也会导致PacedSender缓冲太多数据包，从而引起延时太长。</p><p>因此，编码器码控还是需要贴合网络预估带宽的。PacedSender大多时候是用来防止一两帧编码后太大引起数据量突增造成丢包。因此，<strong>码控和PacedSender都很重要，它们是一起协作来减少卡顿的。</strong></p><h3>网络本身就有一定的丢包率</h3><p>当然，我们选择CBR的码控同时使用了平滑发送方法，但有的时候网络变化太快了或者我们处在一个无线网络环境下，就是会有一定的丢包概率。那怎么办呢？</p><p>这就要使用我们前面多次讲到过的丢包重传策略了。因为对于视频来说，如果视频帧出现了丢包的话，帧就不完整了，那么当前帧也就不能拿去解码，就可能引起卡顿。如果强行解码，从这一帧开始到下一个IDR帧中间的帧，几乎都会出现解码花屏或者解码错误，而解码错误也会引起卡顿。</p><p>这个知识点你可以参考第05～07这三节课，里面详细讲述了为什么会这样。因此，如果真的出现丢包了，那么我们必须想办法将包恢复。其中，最常用的方法就是丢包重传。</p><p><strong>丢包重传请求策略是在Jitter Buffer里面实现的。</strong>当接收端接收到视频RTP包之后，会检查RTP序列号。</p><p>如果序列号不连续，出现了跳变，也就是说，当前RTP包序列号减去收到的最大RTP包序列号大于1，那么就认为中间的包有可能丢失了，Jitter Buffer就将中间没有收到包的包序号都加入到丢包列表中。因为UDP经常会出现乱序到达的情况，如果中间的包后面到来了，也就是说RTP包序号小于收到的最大RTP包序号，Jitter Buffer就将这个包序号从丢包列表中删除，防止重复传输。</p><p>接收端每隔一定时间将丢包列表组装成RTCP协议中的NACK报文（我们在<a href=\"https://time.geekbang.org/column/article/465503\">第09讲</a>中详细讲述过）发送给发送端，并且我们在<a href=\"https://time.geekbang.org/column/article/467073\">第10讲</a>中也说过，发送端会保存之前的发送历史数据。发送端收到NACK报文之后，就会解出NACK报文中携带的丢失包的序号，并且在发送的历史数据中找出这个包重新发送给接收端。接收端收到包就将丢包列表中的对应序列号删除。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/20/85/20284f58af66d73d2705fc2b2d280985.jpeg?wh=1920x1080\" alt=\"图片\"></p><p>但是这里有一个问题就是，有的包重传一次需要一段时间才能到接收端，因为NACK发送给发送端需要时间，重传包传输到接收端也需要时间，中间正好一来一往，差不多一个RTT（往返时间）时间。</p><p>因此，每个丢失包序号发送重传请求之后，下一次需要等一个RTT的时间。如果接收端等待一个RTT的时间后还没有收到对应序号的RTP包，则再次将该序号加入到重传请求中，不能每次NACK请求都把所有丢包列表中的序号加入到报文中，防止重传重复发送，加重网络负担。同时重传也是有次数限制的。如果一个包重传请求发送了好几次，比如说10次，还没有收到，那就不再将该包加入到NACK报文中了。</p><h3>重传也没有收到包</h3><p>一般来说，前面的策略用上了之后，卡顿会小很多。但是，有的时候就是会有极端情况出现。毕竟，网络是千变万化的。如果实在是前面策略都用上了，还是出现了有包没有收到，导致帧不完整，继而导致没有帧可以解码成功的话，那么我们就需要使出最后的大招了，那就是关键帧请求，也叫I帧请求。<strong>I帧请求使用RTCP协议中的FIR报文。这个策略也是工作在Jitter Buffer中的。</strong>具体如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/02/94/02bf046c04153baf2b6a56bbd3e2db94.jpeg?wh=1920x1080\" alt=\"图片\"></p><p>前面课中我们讲到过，如果有一个帧解码失败，那之后的帧几乎都将解码失败，直到下一个IDR帧到来。因此，如果有一帧出现了丢包的情况，导致后面的帧都无法解码了，那么接收端这个时候就需要发起一个关键帧请求报文给发送端，发送端收到关键帧请求之后应该立即编码一个IDR帧。这样接收端收到IDR帧之后就可以解码了，而前面不能解码的帧就全部删除掉。同时，将丢包列表清空掉。</p><h2>花屏问题</h2><p>除了卡顿问题，另外一个比较让人头痛的问题就是花屏问题。花屏问题的出现主要有以下几种比较常见的原因。</p><h3>帧不完整</h3><p>前面我们说过，如果帧出现了丢包就送去解码的话，若能解码成功，那肯定会出现解码花屏的问题。尤其是ffmpeg作为解码器的时候，帧不完整也有很大的概率成功解码，但是得到解码后的图像却是花屏的。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/0f/1e8023bf0a3aa59d52yy45f071fbe10f.jpeg?wh=1920x1080\" alt=\"图片\"></p><p>因此，<strong>我们在解码一帧数据之前一定要保证帧是完整的。</strong>那怎么保证呢？</p><p>在RTP包里面，RTP头有一个标志位M，表示是一帧的结尾。因此只要收到这个标志位为1的包就代表收到了这一帧的最后一个包。那么如何判断一帧的第一个包有没有收到呢？如果收到了一帧的第一个包，也收到了这一帧最后一个包，那我们就有了一帧的第一个和最后一个包的RTP序列号了。只要中间的序列号对应的RTP包都收到了，那么当前帧就完整了，是不是？</p><p>于是，现在的重点是怎么确定一帧第一个包有没有收到。还记得我们在<a href=\"https://time.geekbang.org/column/article/465503\">第09讲</a>里面RTP打包的时候讲到的：</p><ul>\n<li>在单包模式打包方式的时候，一帧只打一个包，最后一个包就是第一个包。那只要收到最后一个包就等于收到了第一个包，很容易判断，是不是？</li>\n<li>在组合打包方式的时候，一个包里面有好几个帧，那么，只要按照协议将几帧分离开来就可以。这时帧肯定是完整的。因为包丢了的话，这几帧就都丢了，不存在丢掉帧中的一部分，是不是？</li>\n<li>问题在于在分片打包的时候，分片打包一帧会分成好几个包打包，而丢掉了一个包，帧就不完整了。我们知道分片打包时FU Header里面有一个S标志位。这个标志位表示的是第一个包，那我们是不是就可以使用这个标志位来判断是不是收到了第一个包了呢？<br>\n&nbsp;<br>\n答案是：不是！不是！不是！如果使用这种方法来判断完整性的话，那大概率会出现花屏问题。</li>\n</ul><p>这个地方千万要注意，<strong>我们在RTP打包的时候是以Slice为单位打包的，而不是以帧为单位打包的。</strong>因此，前面几种方式都是只能表示一个Slice完整了，而不能表示一帧完整了。因为一帧是有可能有多个Slice的。</p><p>再一次强调前面关于单包、组合打包、分片打包的帧完整性判断都是错误的。<strong>那正确的帧完整性判断应该怎么做呢？</strong></p><p>我们也是在Jitter Buffer中来对帧进行完整性判断的。首先，我们使用前面的方式判断Slice的完整性，保证一个个Slice是完整的。然后，在<a href=\"https://time.geekbang.org/column/article/461658\">第05讲</a>中我们讲到过使用slice_header中的first_mb_in_slice字段，来判断当前Slice是不是第一个Slice。如果这个first_mb_in_slice字段为0，就代表是帧的第一个Slice了。</p><p>我们找到帧的第一个Slice，而Slice也判断了是完整的，再通过RTP头的M标志位判断了帧的最后一个包。如果第一个Slice的第一个包到帧的最后一个包之间的RTP包都收到了，那就代表帧完整了。这是一种方法。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/89/cf2e280e25c5117847fe76df5471ba89.jpeg?wh=1920x1080\" alt=\"图片\"></p><p>从上面的图中我们可以看到两个帧都是完整的。而下面图中的帧1是不完整的。</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/c6/ce791d9a1ed424e2ecf3d0a73ef89bc6.jpeg?wh=1920x1080\" alt=\"图片\"></p><p>还有另外一种方法，是WebRTC中在使用的方法，就是将每一个收到的包都排好序放在队列里面。Jitter Buffer收到了当前帧的最后一个包（RTP头的标志位M为1）之后呢，从这个包往前遍历，要求RTP序列号一直连续，直到RTP时间戳出现一个跳变，代表已经到了前面帧的包了。</p><p>如果包序号一直是连续的，那么代表当前帧就是完整的了。因为两帧的时间戳是不可能一样的。这也是一种方法。但是这种方法需要所有包都放在一个队列里面，并且排好序。它没有前一种方法灵活。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/72/07/72b8eb19201989de9acfb4603032c007.jpeg?wh=1920x1080\" alt=\"图片\"></p><h3>参考帧不完整</h3><p>当一帧完整了之后，我们是不是就可以将帧送去解码，就不会出现花屏了呢？答案是：不是这样的。</p><p>因为，我们前面强调过很多遍，需要参考帧也是完整的才能送解码，并且参考帧的参考帧也要是完整的才行。如果参考帧不完整或者丢失，会出现如下图所示的花屏。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/0e/ebd788d3a6af54813250d147ec6f590e.png?wh=1872x1024\" alt=\"图片\"></p><p>那也就是说，如果是连续参考的话，或者说你不知道编码器使用的参考结构的话，你就需要保证从IDR帧开始到当前帧为止所有的帧都是完整的，并且前面的帧都已经解码了，那当前帧才能送去解码。因为只要有一帧没有解码就会出现花屏。具体如下图所示。这部分功能一般也是实现在Jitter Buffer中。</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/63/5b1e9yy576ea9166b2dac19c1afc4463.jpeg?wh=1920x1080\" alt=\"图片\"></p><p>当然，有的时候我们并不一定使用连续参考，比如，我们下一节课会讲到的SVC编码，就不是连续参考的。那就不要求前面的帧都完整才可以解码。或者，你自己设计了参考结构，并不是使用了连续参考的方法做编码的，也不需要要求所有的帧都完整。</p><p>这个时候你需要设计自己的协议告诉接收端什么时候是可解码的，防止出现花屏。如果没有的话，那就当作连续参考处理，防止花屏的出现。因为这种情况花屏一旦出现，到下一个IDR帧到来都会一直花屏，这是不能接受的。</p><h3>YUV格式问题</h3><p>另外一种常见的花屏问题，就是<strong>渲染的时候YUV格式弄错了</strong>。这种问题经常会出现，我们声网的客户就出现了好几次没有处理好这个问题导致的花屏。这种情况有一个特点，就是图像的大体轮廓是对的，但是颜色是有问题的。如下图所示，左图YUV格式是正确的，而右图YUV格式是错误的。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/74/91a97a7749553a187d5c8d3c0ca5b474.png?wh=1594x814\" alt=\"图片\"></p><p>根因是YUV中的Y分量是对的，但是UV是错误的。这种时候你就应该想到，很有可能就是NV12当作NV21处理了，或者I420当作NV21处理了，类似这种YUV格式弄错了的问题。其处理方式也很简单，就是使用正确的YUV格式就对了。渲染或者读取YUV的时候一定不要弄错了YUV的类型。</p><h3>Stride问题</h3><p>最后一种花屏问题，是老生常谈的问题啦。那就是Stride问题。<strong>解码后渲染前一定要处理好YUV的Stride问题，不要和宽度弄混了。</strong>如果出现类似下图的现象的话，去看看你的Stride是不是弄错了吧。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/57/657939bbb5e0dae0be4ed19c603yy757.png?wh=1512x1096\" alt=\"图片\"></p><h2>小结</h2><p>好了，今天的课到这里就要结束了。我们来回顾一下这节课的主要内容。</p><p>我们今天主要介绍了哪些环节出现问题会比较容易引起卡顿和花屏，并给出了相应的解决方法。</p><ol>\n<li><strong>卡顿</strong></li>\n</ol><ul>\n<li>在采集或设置的帧率不够时，会造成两帧之间的时间间隔过长，从而导致卡顿。我们需要提高帧率。</li>\n<li>机器性能不够，导致前处理或者编码耗时太长，从而导致卡顿。我们可以在高分辨率的时候尽量使用GPU做前处理，并使用硬件编码或者将软件编码设置为快速档加快处理的速度。</li>\n<li>编码器输出码率超过实际网络带宽。在RTC视频通话场景下我们最好选择CBR的码控算法，从而保证输出码率能够比较好地贴合预估带宽。</li>\n<li>复杂帧编码后过大或者I帧比较大，如果一次性将这种大帧打包出来的所有包都直接发送到网络中，容易引起网络丢包，继而引起卡顿的可能。为了能够减小这种大帧带来的瞬时网络波动，我们可以在编码打包之后、发送之前，加一个平滑发送的模块来平滑地发送视频包。这个模块在WebRTC中叫做PacedSender。它的主要工作原理就是编码输出的码流打包之后先放到它的缓冲区中，而不是直接发送。</li>\n<li>网络本身就有一定的丢包率，如果视频帧出现了丢包的话，帧就不完整了，那么当前帧也就不能拿去解码，可能引起卡顿。最常用的方法就是丢包重传。丢包重传请求策略是在Jitter Buffer里面实现的。</li>\n<li>重传也没有收到包，导致帧不完整，继而导致没有帧可以解码成功，我们就需要使用关键帧请求，也叫I帧请求。I帧请求使用RTCP协议中的FIR报文。这个策略也是工作在Jitter Buffer中的。</li>\n</ul><ol start=\"2\">\n<li><strong>花屏</strong></li>\n</ol><ul>\n<li>帧不完整。如果帧出现了丢包就送去解码的话，若能解码成功，那肯定会出现解码花屏的问题。因此，我们在解码一帧数据之前一定要保证帧是完整的。记住我们在RTP打包的时候是以Slice为单位打包的，而不是以帧为单位打包的。我们也是在Jitter Buffer中来对帧进行完整性判断的。</li>\n<li>参考帧不完整。我们需要参考帧也是完整的才能送解码。如果参考帧不完整或者丢失，会出现花屏。这部分功能一般也是实现在Jitter Buffer中。</li>\n<li>渲染的时候YUV格式弄错了，也会造成花屏。其处理方式也很简单，就是使用正确的YUV格式就对了。</li>\n<li>Stride问题会造成花屏。我们解码后渲染前一定要处理好YUV的Stride问题，不要和宽度弄混了。</li>\n</ul><p>为了方便你记忆，这里我给出了一张总结图。</p><p><img src=\"https://static001.geekbang.org/resource/image/20/f6/208c51c78a62c5cd358e31369f3f09f6.jpg?wh=2082x1028\" alt=\"\"></p><h2>思考题</h2><p>今天我们的思考题换一种形式，你来说说你遇到过哪些引起卡顿和花屏问题的原因吧。我们一起在评论区相互学习交流解决这类问题的经验。</p><p>你可以把你的问题和疑惑写下来，分享到留言区，与我一起讨论。我们下节课再见。</p>","neighbors":{"left":{"article_title":"11｜码控算法：如何控制视频的编码码率？","id":468091},"right":{"article_title":"13｜SVC：如何实现视频编码可伸缩？","id":470072}},"comments":[{"had_liked":false,"id":330583,"user_name":"Chris Zou","can_delete":false,"product_type":"c1","uid":1897148,"ip_address":"","ucode":"B6DFC71C1DD8B7","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","comment_is_top":false,"comment_ctime":1642057209,"is_pvip":false,"replies":[{"id":"124422","content":"这两个之间要配合好其实是非常复杂的。但是总的思路就是，如果RTT很高那么重传时间会很长，这是可以主要使用fec，如果RTT 比较小的话，可以重传多一些。","user_name":"作者回复","comment_id":330583,"uid":"2744713","ip_address":"","utype":1,"ctime":1648688465,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10231991801","product_id":100098901,"comment_content":"老师有没有可能加餐，讲讲另外一个方式FEC冗余和重传方式之间的配合，以及itterbuffer对这两种包的不同处理？","like_count":2,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559286,"discussion_content":"这两个之间要配合好其实是非常复杂的。但是总的思路就是，如果RTT很高那么重传时间会很长，这是可以主要使用fec，如果RTT 比较小的话，可以重传多一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648688465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330289,"user_name":"一身龙骨","can_delete":false,"product_type":"c1","uid":2853068,"ip_address":"","ucode":"70ED9F147C6DC0","user_header":"https://static001.geekbang.org/account/avatar/00/2b/88/cc/e1ba2379.jpg","comment_is_top":false,"comment_ctime":1641894019,"is_pvip":false,"replies":[{"id":"121024","content":"这个就有点类似于stride弄错了","user_name":"作者回复","comment_id":330289,"uid":"2744713","ip_address":"","utype":1,"ctime":1642503412,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5936861315","product_id":100098901,"comment_content":"图像的宽高搞反了出现过花屏","like_count":1,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547044,"discussion_content":"这个就有点类似于stride弄错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642503413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358093,"user_name":"播放技术部","can_delete":false,"product_type":"c1","uid":2685718,"ip_address":"湖南","ucode":"E3C5FFBCF968EE","user_header":"https://static001.geekbang.org/account/avatar/00/28/fb/16/2daa1c8b.jpg","comment_is_top":false,"comment_ctime":1663905528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663905528","product_id":100098901,"comment_content":"“重传也没有收到包” 这块有个问题想请教下，就是如果一个包重传了很久都没有收到，那么后面请求IDR帧的话，由于IDR帧很大，那么不是更有概率导致丢包吗？还有这个请求的IDR帧具体是离丢包的P帧多远的I帧呢？","like_count":0},{"had_liked":false,"id":353436,"user_name":"jcy","can_delete":false,"product_type":"c1","uid":1264411,"ip_address":"北京","ucode":"7C3E10C4E0FA87","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/1b/e3b3bcff.jpg","comment_is_top":false,"comment_ctime":1659437600,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1659437600","product_id":100098901,"comment_content":"问一下，看声网官网文档：通话过程中，视频帧率设置不低于 5 fps 时，连续渲染的两帧视频之间间隔超过 500 ms，即记为一次视频卡顿<br><br>而这篇文章里说的是 帧之间的播放时间间隔超过了 200ms<br><br>这是为什么？间隔差异有点大<br>","like_count":0,"discussions":[{"author":{"id":1900924,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/01/7c/22f17795.jpg","nickname":"Nick","note":"","ucode":"057498DF1B94A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583439,"discussion_content":"卡顿统计可以分为200ms卡顿、300ms卡顿、500ms和600ms卡顿，文章里的意思应该是帧间隔超过200ms，人能主观感受到卡顿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660119487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1264411,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4b/1b/e3b3bcff.jpg","nickname":"jcy","note":"","ucode":"7C3E10C4E0FA87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1900924,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/01/7c/22f17795.jpg","nickname":"Nick","note":"","ucode":"057498DF1B94A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583468,"discussion_content":"嗯，我的意思声网按 500ms 来统计，是不是会漏掉很多实际的卡顿现象，这样是不是就不很准确？还是说 500ms 是业界实际测试得到的一个值，根据综合考虑，用这个值就够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660128971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":583439,"ip_address":"北京"},"score":583468,"extra":""}]}]},{"had_liked":false,"id":350625,"user_name":"Geek_6e7396","can_delete":false,"product_type":"c1","uid":2980623,"ip_address":"","ucode":"15FC2105E5E4FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/vIvIKrdKI0OCBPFXmQSOyyjfOlpIZGZibgMicbz0ia5j8LNfqtvskCarJCLoubHnSyIsyn0W8QCZG9FiacEwdnw7gw/132","comment_is_top":false,"comment_ctime":1657068331,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657068331","product_id":100098901,"comment_content":"文中判断帧完整时需要下一个帧到达，这样该帧送往下一步就会晚一个帧间距，这里就需要按帧编码做解析","like_count":0},{"had_liked":false,"id":348045,"user_name":"龚长华","can_delete":false,"product_type":"c1","uid":2969046,"ip_address":"","ucode":"A710129E480788","user_header":"","comment_is_top":false,"comment_ctime":1654686539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654686539","product_id":100098901,"comment_content":"BT609 和 BT709搞错， 也会出现花屏问题。","like_count":0},{"had_liked":false,"id":335511,"user_name":"allin","can_delete":false,"product_type":"c1","uid":1993789,"ip_address":"","ucode":"F2AEC3077B90C5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ78AcrbfXwxWEfvR4UVxK3EjpIWicykT9GibfeHzNOKztUq4qdQicpqFNvC4TamBj6VnbyCZNzAbN2Q/132","comment_is_top":false,"comment_ctime":1645546632,"is_pvip":false,"replies":[{"id":"123462","content":"webrtc里面的packet buffer 和frame buffer，老版本是VCMJitterBuffer","user_name":"作者回复","comment_id":335511,"uid":"2744713","ip_address":"","utype":1,"ctime":1647048874,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645546632","product_id":100098901,"comment_content":"老师，jitter buffer 在哪能找到模块源码进行学习，","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555730,"discussion_content":"webrtc里面的packet buffer 和frame buffer，老版本是VCMJitterBuffer","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647048874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330581,"user_name":"Chris Zou","can_delete":false,"product_type":"c1","uid":1897148,"ip_address":"","ucode":"B6DFC71C1DD8B7","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","comment_is_top":false,"comment_ctime":1642056989,"is_pvip":false,"replies":[{"id":"121022","content":"我文章里面还讲了一种方式啊，通过first_mb_in_slice 来判断开头第一个包，通过Marker位判断最后一个包，中间的所有包都在也可以表示完整了","user_name":"作者回复","comment_id":330581,"uid":"2744713","ip_address":"","utype":1,"ctime":1642502403,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1642056989","product_id":100098901,"comment_content":"除了webrtc中的这种方式把所有包放到一个队列里面，还有什么好的方式处理，一般做法是什么样子的？","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547039,"discussion_content":"我文章里面还讲了一种方式啊，通过first_mb_in_slice 来判断开头第一个包，通过Marker位判断最后一个包，中间的所有包都在也可以表示完整了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642502403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1897148,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","nickname":"Chris Zou","note":"","ucode":"B6DFC71C1DD8B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":547112,"discussion_content":"也就是可以不用排序队列存，而可以用一个无序的set来存对吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642543976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547039,"ip_address":""},"score":547112,"extra":""}]}]},{"had_liked":false,"id":330580,"user_name":"Chris Zou","can_delete":false,"product_type":"c1","uid":1897148,"ip_address":"","ucode":"B6DFC71C1DD8B7","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","comment_is_top":false,"comment_ctime":1642056423,"is_pvip":false,"replies":[{"id":"120610","content":"如果时间戳有跳变同时序列号是连续的，那首包就一定在。不然序列号是不会连续的。","user_name":"作者回复","comment_id":330580,"uid":"2744713","ip_address":"","utype":1,"ctime":1642135135,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1642056423","product_id":100098901,"comment_content":"WebRTC 中在使用的方法，在一个排好序的包队列里，从标志位M的包往前找连续包，直到有跳变就认为帧完整，这里跳变之外，应该也要判断是不是首包是否还在把？","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546038,"discussion_content":"如果时间戳有跳变同时序列号是连续的，那首包就一定在。不然序列号是不会连续的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642135135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1897148,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","nickname":"Chris Zou","note":"","ucode":"B6DFC71C1DD8B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":546043,"discussion_content":"好像有这么一个情况，首包的前一个包序号丢了，这样方法会导致误认为不完整，对吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642137181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546038,"ip_address":""},"score":546043,"extra":""}]}]},{"had_liked":false,"id":330424,"user_name":"Chris Zou","can_delete":false,"product_type":"c1","uid":1897148,"ip_address":"","ucode":"B6DFC71C1DD8B7","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","comment_is_top":false,"comment_ctime":1641973848,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1641973848","product_id":100098901,"comment_content":"请教老师，我们的QOS有这么多手段，比如FEC，NACK，FIR、jitbuffer、Pacer、带宽估计有这些策略，对于web网关，考虑一般的实际情况，服务端对于QOS能做的事情是哪些？","like_count":0,"discussions":[{"author":{"id":1900924,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/01/7c/22f17795.jpg","nickname":"Nick","note":"","ucode":"057498DF1B94A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583440,"discussion_content":"个人理解服务器端丢包重传、FEC、拥塞控制（CC）、FIR、Pacer都可以做，除了jitterbuffer，因为JB需要解析rtp包并且要知道参考关系，而且JB是为了平滑渲染","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660119773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327912,"user_name":"，","can_delete":false,"product_type":"c1","uid":1104519,"ip_address":"","ucode":"D515EFE621B610","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/87/891a16c8.jpg","comment_is_top":false,"comment_ctime":1640357875,"is_pvip":false,"replies":[{"id":"119538","content":"是的，如果有SVC那种不连续参考的参考结构就不需要完全连续了。可以参考SVC那节课。","user_name":"作者回复","comment_id":327912,"uid":"2744713","ip_address":"","utype":1,"ctime":1640664865,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1640357875","product_id":100098901,"comment_content":"翻了下代码，看上去是会进行kstash 会判断下seq连续，这种还有什么别的好办法没，gop内连续丢参考帧。","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542096,"discussion_content":"是的，如果有SVC那种不连续参考的参考结构就不需要完全连续了。可以参考SVC那节课。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640664865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327907,"user_name":"，","can_delete":false,"product_type":"c1","uid":1104519,"ip_address":"","ucode":"D515EFE621B610","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/87/891a16c8.jpg","comment_is_top":false,"comment_ctime":1640354197,"is_pvip":false,"replies":[{"id":"119537","content":"有处理的，不能丢帧。会发送关键帧请求给发送端要求发送关键帧。","user_name":"作者回复","comment_id":327907,"uid":"2744713","ip_address":"","utype":1,"ctime":1640664769,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1640354197","product_id":100098901,"comment_content":"大佬，webrtc的jitterbuffer有处理264那种如果一个gop内完整的丢了几个p帧的这种情况么，大概怎么处理的？","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542095,"discussion_content":"有处理的，不能丢帧。会发送关键帧请求给发送端要求发送关键帧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640664769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327754,"user_name":"iOS coder","can_delete":false,"product_type":"c1","uid":1171463,"ip_address":"","ucode":"66B5ED78968684","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep8jMyicSeG5g6tfmKFxDLHjaE1VmSFCuwbS7RB4HxglicZibqtrRJ6nLDr97Zav2dqlbwRplayj52lg/132","comment_is_top":false,"comment_ctime":1640269792,"is_pvip":false,"replies":[{"id":"119333","content":"其实花屏不好线上监控的。可以采用一些AI手段来对解码后的YUV做识别是不是花屏。","user_name":"作者回复","comment_id":327754,"uid":"2744713","ip_address":"","utype":1,"ctime":1640309574,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1640269792","product_id":100098901,"comment_content":"怎么对花屏进行线上监控呢？","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541233,"discussion_content":"其实花屏不好线上监控的。可以采用一些AI手段来对解码后的YUV做识别是不是花屏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640309574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327132,"user_name":"西格玛","can_delete":false,"product_type":"c1","uid":2616564,"ip_address":"","ucode":"95DE1B8A8ACD8F","user_header":"https://static001.geekbang.org/account/avatar/00/27/ec/f4/3c569056.jpg","comment_is_top":false,"comment_ctime":1639929105,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"1639929105","product_id":100098901,"comment_content":"小白问个问题，<br>1.一个视频中上半部分卡住，下半部分正常，这个是什么原因导致的？<br>2 . 视频中Y分量正常，只有上面几行的UV分量是异常的，其余是正常的可能是什么原因？<br>最后，我感觉，花屏的原因是不是有太多了，视频传输的过程中，任何一个环节出问题都有可能出现花屏。","like_count":1,"discussions":[{"author":{"id":2864514,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJSZcno3GEdDJ2TRvzBbhmJG241fqxtmCCMSAFyPj3cUAYrKcJKUAeialOAXAsAwVnibGyHhKw31b3g/132","nickname":"浮云野马","note":"","ucode":"16C8722EC49886","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553262,"discussion_content":"1。可能是vtb不支持多slice解码导致的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645795928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327054,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1639889864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639889864","product_id":100098901,"comment_content":"遇到过Stride，YUV格式错误引起的花屏问题，根源就是对解码知识的匮乏","like_count":0},{"had_liked":false,"id":326869,"user_name":"段壹鳴","can_delete":false,"product_type":"c1","uid":1615989,"ip_address":"","ucode":"C4A7D044EB44BB","user_header":"https://static001.geekbang.org/account/avatar/00/18/a8/75/7c8175d5.jpg","comment_is_top":false,"comment_ctime":1639727925,"is_pvip":false,"replies":[{"id":"118783","content":"卡尔曼滤波吗？我本来想讲一下，但是感觉比较难通俗易懂的讲解清楚，因为数学太多了。","user_name":"作者回复","comment_id":326869,"uid":"2744713","ip_address":"","utype":1,"ctime":1639797151,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639727925","product_id":100098901,"comment_content":"老师讲的很好, 撒花撒花~<br>老师能讲解一下 jitterBUffer里面的 缓冲延时计算吗, 然后请求重传策略, 新版本webrtc是全部移植到nack_requestion模块里了<br>","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539646,"discussion_content":"卡尔曼滤波吗？我本来想讲一下，但是感觉比较难通俗易懂的讲解清楚，因为数学太多了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639797152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326798,"user_name":"翻山越岭","can_delete":false,"product_type":"c1","uid":1147033,"ip_address":"","ucode":"84DF7E880C22EC","user_header":"https://static001.geekbang.org/account/avatar/00/11/80/99/abe64707.jpg","comment_is_top":false,"comment_ctime":1639704614,"is_pvip":false,"replies":[{"id":"118784","content":"是不是I帧间隔差不多3-5s。I帧糊了？","user_name":"作者回复","comment_id":326798,"uid":"2744713","ip_address":"","utype":1,"ctime":1639797229,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639704614","product_id":100098901,"comment_content":"老师，直播中遇到概率性画面中有周期性马赛克，出现后每隔一段时间(3s或5s)出现，可能哪里引起的？","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539647,"discussion_content":"是不是I帧间隔差不多3-5s。I帧糊了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639797229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326780,"user_name":"_zeta","can_delete":false,"product_type":"c1","uid":1068298,"ip_address":"","ucode":"94BBEBBE33EB83","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/0a/e124ec4b.jpg","comment_is_top":false,"comment_ctime":1639674517,"is_pvip":false,"replies":[{"id":"118789","content":"谢谢","user_name":"作者回复","comment_id":326780,"uid":"2744713","ip_address":"","utype":1,"ctime":1639801760,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639674517","product_id":100098901,"comment_content":"给江同学点赞👍","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539658,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639801761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}