{"id":128609,"title":"13 | 小数据包应对之策：理解TCP协议中的动态数据传输","content":"<p>你好，我是盛延敏，这里是网络编程实战第13讲，欢迎回来。</p><p>在上一篇文章里，我在应用程序中模拟了TCP Keep-Alive机制，完成TCP心跳检测，达到发现不活跃连接的目的。在这一讲里，我们将从TCP角度看待数据流的发送和接收。</p><p>如果你学过计算机网络的话，那么对于发送窗口、接收窗口、拥塞窗口等名词肯定不会陌生，它们各自解决的是什么问题，又是如何解决的？在今天的文章里，我希望能从一个更加通俗易懂的角度进行剖析。</p><h2>调用数据发送接口以后……</h2><p>在前面的内容中，我们已经熟悉如何通过套接字发送数据，比如使用write或者send方法来进行数据流的发送。</p><p>我们已经知道，<strong>调用这些接口并不意味着数据被真正发送到网络上，其实，这些数据只是从应用程序中被拷贝到了系统内核的套接字缓冲区中，或者说是发送缓冲区中</strong>，等待协议栈的处理。至于这些数据是什么时候被发送出去的，对应用程序来说，是无法预知的。对这件事情真正负责的，是运行于操作系统内核的TCP协议栈实现模块。</p><h2>流量控制和生产者-消费者模型</h2><p>我们可以把理想中的TCP协议可以想象成一队运输货物的货车，运送的货物就是TCP数据包，这些货车将数据包从发送端运送到接收端，就这样不断周而复始。</p><!-- [[[read_end]]] --><p>我们仔细想一下，货物达到接收端之后，是需要卸货处理、登记入库的，接收端限于自己的处理能力和仓库规模，是不可能让这队货车以不可控的速度发货的。接收端肯定会和发送端不断地进行信息同步，比如接收端通知发送端：“后面那20车你给我等等，等我这里腾出地方你再继续发货。”</p><p>其实这就是发送窗口和接收窗口的本质，我管这个叫做“TCP的生产者-消费者”模型。</p><p>发送窗口和接收窗口是TCP连接的双方，一个作为生产者，一个作为消费者，为了达到一致协同的生产-消费速率、而产生的算法模型实现。</p><p>说白了，作为TCP发送端，也就是生产者，不能忽略TCP的接收端，也就是消费者的实际状况，不管不顾地把数据包都传送过来。如果都传送过来，消费者来不及消费，必然会丢弃；而丢弃反过来使得生产者又重传，发送更多的数据包，最后导致网络崩溃。</p><p>我想，理解了“TCP的生产者-消费者”模型，再反过来看发送窗口和接收窗口的设计目的和方式，我们就会恍然大悟了。</p><h2>拥塞控制和数据传输</h2><p>TCP的生产者-消费者模型，只是在考虑单个连接的数据传递，但是， TCP数据包是需要经过网卡、交换机、核心路由器等一系列的网络设备的，网络设备本身的能力也是有限的，当多个连接的数据包同时在网络上传送时，势必会发生带宽争抢、数据丢失等，这样，<strong>TCP就必须考虑多个连接共享在有限的带宽上，兼顾效率和公平性的控制</strong>，这就是拥塞控制的本质。</p><p>举个形象一点的例子，有一个货车行驶在半夜三点的大路上，这样的场景是断然不需要拥塞控制的。</p><p>我们可以把网络设备形成的网络信息高速公路和生活中实际的高速公路做个对比。正是因为有多个TCP连接，形成了高速公路上的多队运送货车，高速公路上开始变得熙熙攘攘，这个时候，就需要拥塞控制的接入了。</p><p>在TCP协议中，拥塞控制是通过拥塞窗口来完成的，拥塞窗口的大小会随着网络状况实时调整。</p><p>拥塞控制常用的算法有“慢启动”，它通过一定的规则，慢慢地将网络发送数据的速率增加到一个阈值。超过这个阈值之后，慢启动就结束了，另一个叫做“拥塞避免”的算法登场。在这个阶段，TCP会不断地探测网络状况，并随之不断调整拥塞窗口的大小。</p><p>现在你可以发现，在任何一个时刻，TCP发送缓冲区的数据是否能真正发送出去，<strong>至少</strong>取决于两个因素，一个是<strong>当前的发送窗口大小</strong>，另一个是<strong>拥塞窗口大小</strong>，而TCP协议中总是取两者中最小值作为判断依据。比如当前发送的字节为100，发送窗口的大小是200，拥塞窗口的大小是80，那么取200和80中的最小值，就是80，当前发送的字节数显然是大于拥塞窗口的，结论就是不能发送出去。</p><p>这里千万要分清楚发送窗口和拥塞窗口的区别。</p><p>发送窗口反应了作为单TCP连接、点对点之间的流量控制模型，它是需要和接收端一起共同协调来调整大小的；而拥塞窗口则是反应了作为多个TCP连接共享带宽的拥塞控制模型，它是发送端独立地根据网络状况来动态调整的。</p><h2>一些有趣的场景</h2><p>注意我在前面的表述中，提到了在任何一个时刻里，TCP发送缓冲区的数据是否能真正发送出去，用了“至少两个因素”这个说法，细心的你有没有想过这个问题，除了之前引入的发送窗口、拥塞窗口之外，还有什么其他因素吗？</p><p>我们考虑以下几个有趣的场景：</p><p>第一个场景，接收端处理得急不可待，比如刚刚读入了100个字节，就告诉发送端：“喂，我已经读走100个字节了，你继续发”，在这种情况下，你觉得发送端应该怎么做呢？</p><p>第二个场景是所谓的“交互式”场景，比如我们使用telnet登录到一台服务器上，或者使用SSH和远程的服务器交互，这种情况下，我们在屏幕上敲打了一个命令，等待服务器返回结果，这个过程需要不断和服务器端进行数据传输。这里最大的问题是，每次传输的数据可能都非常小，比如敲打的命令“pwd”，仅仅三个字符。这意味着什么？这就好比，每次叫了一辆大货车，只送了一个小水壶。在这种情况下，你又觉得发送端该怎么做才合理呢？</p><p>第三个场景是从接收端来说的。我们知道，接收端需要对每个接收到的TCP分组进行确认，也就是发送ACK报文，但是ACK报文本身是不带数据的分段，如果一直这样发送大量的ACK报文，就会消耗大量的带宽。之所以会这样，是因为TCP报文、IP报文固有的消息头是不可或缺的，比如两端的地址、端口号、时间戳、序列号等信息， 在这种情形下，你觉得合理的做法是什么？</p><p>TCP之所以复杂，就是因为TCP需要考虑的因素较多。像以上这几个场景，都是TCP需要考虑的情况，一句话概况就是如何有效地利用网络带宽。</p><p>第一个场景也被叫做糊涂窗口综合症，这个场景需要在接收端进行优化。也就是说，接收端不能在接收缓冲区空出一个很小的部分之后，就急吼吼地向发送端发送窗口更新通知，而是需要在自己的缓冲区大到一个合理的值之后，再向发送端发送窗口更新通知。这个合理的值，由对应的RFC规范定义。</p><p>第二个场景需要在发送端进行优化。这个优化的算法叫做Nagle算法，Nagle算法的本质其实就是限制大批量的小数据包同时发送，为此，它提出，在任何一个时刻，未被确认的小数据包不能超过一个。这里的小数据包，指的是长度小于最大报文段长度MSS的TCP分组。这样，发送端就可以把接下来连续的几个小数据包存储起来，等待接收到前一个小数据包的ACK分组之后，再将数据一次性发送出去。</p><p>第三个场景，也是需要在接收端进行优化，这个优化的算法叫做延时ACK。延时ACK在收到数据后并不马上回复，而是累计需要发送的ACK报文，等到有数据需要发送给对端时，将累计的ACK<strong>捎带一并发送出去</strong>。当然，延时ACK机制，不能无限地延时下去，否则发送端误认为数据包没有发送成功，引起重传，反而会占用额外的网络带宽。</p><h2>禁用Nagle算法</h2><p>有没有发现一个很奇怪的组合，即Nagle算法和延时ACK的组合。</p><p>这个组合为什么奇怪呢？我举一个例子你来体会一下。</p><p>比如，客户端分两次将一个请求发送出去，由于请求的第一部分的报文未被确认，Nagle算法开始起作用；同时延时ACK在服务器端起作用，假设延时时间为200ms，服务器等待200ms后，对请求的第一部分进行确认；接下来客户端收到了确认后，Nagle算法解除请求第二部分的阻止，让第二部分得以发送出去，服务器端在收到之后，进行处理应答，同时将第二部分的确认捎带发送出去。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/eb/42073ad07805783add96ee87aeee8aeb.png?wh=562*512\" alt=\"\"><br>\n你从这张图中可以看到，Nagle算法和延时确认组合在一起，增大了处理时延，实际上，两个优化彼此在阻止对方。</p><p>从上面的例子可以看到，在有些情况下Nagle算法并不适用， 比如对时延敏感的应用。</p><p>幸运的是，我们可以通过对套接字的修改来关闭Nagle算法。</p><pre><code>int on = 1; \nsetsockopt(sock, IPPROTO_TCP, TCP_NODELAY, (void *)&amp;on, sizeof(on)); \n</code></pre><p>值得注意的是，除非我们对此有十足的把握，否则不要轻易改变默认的TCP Nagle算法。因为在现代操作系统中，针对Nagle算法和延时ACK的优化已经非常成熟了，有可能在禁用Nagle算法之后，性能问题反而更加严重。</p><h2>将写操作合并</h2><p>其实前面的例子里，如果我们能将一个请求一次性发送过去，而不是分开两部分独立发送，结果会好很多。所以，在写数据之前，将数据合并到缓冲区，批量发送出去，这是一个比较好的做法。不过，有时候数据会存储在两个不同的缓存中，对此，我们可以使用如下的方法来进行数据的读写操作，从而避免Nagle算法引发的副作用。</p><pre><code>ssize_t writev(int filedes, const struct iovec *iov, int iovcnt)\nssize_t readv(int filedes, const struct iovec *iov, int iovcnt);\n</code></pre><p>这两个函数的第二个参数都是指向某个iovec结构数组的一个指针，其中iovec结构定义如下：</p><pre><code>struct iovec {\nvoid *iov_base; /* starting address of buffer */\nsize_t　iov_len; /* size of buffer */\n};”\n</code></pre><p>下面的程序展示了集中写的方式：</p><pre><code>int main(int argc, char **argv) {\n    if (argc != 2) {\n        error(1, 0, &quot;usage: tcpclient &lt;IPaddress&gt;&quot;);\n    }\n\n    int socket_fd;\n    socket_fd = socket(AF_INET, SOCK_STREAM, 0);\n\n    struct sockaddr_in server_addr;\n    bzero(&amp;server_addr, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(SERV_PORT);\n    inet_pton(AF_INET, argv[1], &amp;server_addr.sin_addr);\n\n    socklen_t server_len = sizeof(server_addr);\n    int connect_rt = connect(socket_fd, (struct sockaddr *) &amp;server_addr, server_len);\n    if (connect_rt &lt; 0) {\n        error(1, errno, &quot;connect failed &quot;);\n    }\n\n    char buf[128];\n    struct iovec iov[2];\n\n    char *send_one = &quot;hello,&quot;;\n    iov[0].iov_base = send_one;\n    iov[0].iov_len = strlen(send_one);\n    iov[1].iov_base = buf;\n    while (fgets(buf, sizeof(buf), stdin) != NULL) {\n        iov[1].iov_len = strlen(buf);\n        int n = htonl(iov[1].iov_len);\n        if (writev(socket_fd, iov, 2) &lt; 0)\n            error(1, errno, &quot;writev failure&quot;);\n    }\n    exit(0);\n}\n</code></pre><p>这个程序的前半部分创建套接字，建立连接就不再赘述了。关键的是24-33行，使用了iovec数组，分别写入了两个不同的字符串，一个是“hello,”，另一个通过标准输入读入。</p><p>在启动该程序之前，我们需要启动服务器端程序，在客户端依次输入“world”和“network”：</p><pre><code>world\nnetwork\n</code></pre><p>接下来我们可以看到服务器端接收到了iovec组成的新的字符串。这里的原理其实就是在调用writev操作时，会自动把几个数组的输入合并成一个有序的字节流，然后发送给对端。</p><pre><code>received 12 bytes: hello,world\n\nreceived 14 bytes: hello,network\n</code></pre><h2>总结</h2><p>今天的内容我重点讲述了TCP流量控制的生产者-消费者模型，你需要记住以下几点：</p><ul>\n<li>发送窗口用来控制发送和接收端的流量；阻塞窗口用来控制多条连接公平使用的有限带宽。</li>\n<li>小数据包加剧了网络带宽的浪费，为了解决这个问题，引入了如Nagle算法、延时ACK等机制。</li>\n<li>在程序设计层面，不要多次频繁地发送小报文，如果有，可以使用writev批量发送。</li>\n</ul><h2>思考题</h2><p>和往常一样，留两道思考题：</p><p>针对最后呈现的writev函数，你可以查一查Linux下一次性最多允许数组的大小是多少？</p><p>另外TCP拥塞控制算法是一个非常重要的研究领域，请你查阅下最新的有关这方面的研究，看看有没有新的发现？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起来交流。</p>","comments":[{"had_liked":false,"id":129475,"user_name":"张立华","can_delete":false,"product_type":"c1","uid":1231713,"ip_address":"","ucode":"173B938DD9478A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/61/b62d8a3b.jpg","comment_is_top":false,"comment_ctime":1567135470,"is_pvip":false,"replies":[{"id":"50846","content":"你说的不错，一般我们只在合并缓冲区的时候才需要，绝大多数都是使用write和send 。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568196952,"ip_address":"","comment_id":129475,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74581579502","product_id":100032701,"comment_content":"非阻塞socket，对于write和send， 返回实际发送的字节数。所以一般在while里不断发送，直到全部发送完毕。    send根据只要根据要发送的buf做个偏移，很方便。   而writev 就很繁琐了啊","like_count":18,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465492,"discussion_content":"你说的不错，一般我们只在合并缓冲区的时候才需要，绝大多数都是使用write和send 。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568196952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134226,"user_name":"Donkey","can_delete":false,"product_type":"c1","uid":1255373,"ip_address":"","ucode":"49BAB021262624","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/cd/aa796a0d.jpg","comment_is_top":false,"comment_ctime":1568778116,"is_pvip":false,"replies":[{"id":"51607","content":"我觉得这个问题不愚钝。<br><br>每个包都有一个序列号，通过序列号按顺序就可以还原这个数据流；这个数据流本身也有例如checksum，序号大小等数据，这个数据流所有序列号的包都收到了，就可以完成数据流的拼装了。<br><br>解决粘包问题的关键是区分出数据的边界，我在第16降：如何理解TCP的“流”里讲到了这部分内容，你可以参考一下。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568885303,"ip_address":"","comment_id":134226,"utype":1}],"discussion_count":5,"race_medal":0,"score":"65993287556","product_id":100032701,"comment_content":"请教老师一个愚钝问题：大数据循环发送时，那接收方怎么接收才能接收完整的包？不会发生粘包等现象呢？","like_count":15,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467659,"discussion_content":"我觉得这个问题不愚钝。\n\n每个包都有一个序列号，通过序列号按顺序就可以还原这个数据流；这个数据流本身也有例如checksum，序号大小等数据，这个数据流所有序列号的包都收到了，就可以完成数据流的拼装了。\n\n解决粘包问题的关键是区分出数据的边界，我在第16降：如何理解TCP的“流”里讲到了这部分内容，你可以参考一下。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568885303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084222,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8b/3e/3a50d491.jpg","nickname":"蚂蚁哈哈哈","note":"","ucode":"981244D51231A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394881,"discussion_content":"。\n。。\n,.\n\n\n\n。。。\n\n\n\n...\n.....\n..\n\n\n\n.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632120189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084222,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8b/3e/3a50d491.jpg","nickname":"蚂蚁哈哈哈","note":"","ucode":"981244D51231A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394880,"discussion_content":"。。\n.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632120145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084222,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8b/3e/3a50d491.jpg","nickname":"蚂蚁哈哈哈","note":"","ucode":"981244D51231A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394879,"discussion_content":"。。。.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632120133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25884,"discussion_content":"学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570563775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129476,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1567135501,"is_pvip":false,"replies":[{"id":"52203","content":"嗯，我也是刚知道这个算法。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1569407385,"ip_address":"","comment_id":129476,"utype":1}],"discussion_count":4,"race_medal":0,"score":"40221841165","product_id":100032701,"comment_content":"TCP 拥塞控制算法,我知道最新的有BBR算法，这个算法在网络包填满路由器缓冲区之前就触发流量控制，而不在丢包后才触发，有效的降低了延迟。","like_count":9,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465493,"discussion_content":"嗯，我也是刚知道这个算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569407385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293371,"discussion_content":"bbr根据时延带宽积","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595512838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574018,"discussion_content":"也就是所谓的BDR","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653796102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":293371,"ip_address":""},"score":574018,"extra":""}]},{"author":{"id":1035390,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cc/7e/0d050964.jpg","nickname":"Rootrl","note":"","ucode":"50FE3BBA92D417","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280769,"discussion_content":"搭梯子服务用得到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591609902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205993,"user_name":"一凡","can_delete":false,"product_type":"c1","uid":1897395,"ip_address":"","ucode":"5E9BE33452AF3B","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f3/b3/0ba7a760.jpg","comment_is_top":false,"comment_ctime":1586770081,"is_pvip":false,"replies":[{"id":"77691","content":"默认是使用的，批量发送小数据包在系统层面显然是得到充分的优化的，并不是我们想象中的经过很长时间之后才会发送出来，在telnet操作下，这个时间对操作人员是无感的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587288497,"ip_address":"","comment_id":205993,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31651541153","product_id":100032701,"comment_content":"telnet是使用Nagle 算法的吗，但是远程操作是实时性的呀？额","like_count":7,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491637,"discussion_content":"默认是使用的，批量发送小数据包在系统层面显然是得到充分的优化的，并不是我们想象中的经过很长时间之后才会发送出来，在telnet操作下，这个时间对操作人员是无感的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587288497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897395,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f3/b3/0ba7a760.jpg","nickname":"一凡","note":"","ucode":"5E9BE33452AF3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243701,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587557558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138396,"user_name":"衬衫的价格是19美元","can_delete":false,"product_type":"c1","uid":1397631,"ip_address":"","ucode":"655F925451F772","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","comment_is_top":false,"comment_ctime":1570195990,"is_pvip":false,"replies":[{"id":"54306","content":"Google出品，名声不小。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570971371,"ip_address":"","comment_id":138396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27339999766","product_id":100032701,"comment_content":"拥塞控制算法的话，应该是bbr吧，已经被合入linux  4.9内核了。与传统的reno, cubic等策略相比，最大的不同是，bbr不会因为链路噪声而执行乘性减窗，导致延迟过大。实际上，目前gwf的随机丢包的策略也是链路噪声。","like_count":6,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469508,"discussion_content":"Google出品，名声不小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570971371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134306,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1568801490,"is_pvip":false,"replies":[{"id":"51604","content":"赞","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568884744,"ip_address":"","comment_id":134306,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27338605266","product_id":100032701,"comment_content":"问题1 ： grep &#39;IOV_MAX&#39; &#47;usr&#47;include&#47;limits.h","like_count":6,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467697,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568884744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803259,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","nickname":"linker","note":"","ucode":"6C5799F2FC2C82","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205313,"discussion_content":"1024","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584285479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1507715,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/83/47ba2f2d.jpg","nickname":"单林敏","note":"","ucode":"8B0165C294BF78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269281,"discussion_content":"centos7中limits.h没有这个宏，尴尬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589889805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129781,"user_name":"不动声色满心澎湃","can_delete":false,"product_type":"c1","uid":1621658,"ip_address":"","ucode":"80D8F9E49AF7C2","user_header":"https://static001.geekbang.org/account/avatar/00/18/be/9a/b0b89be3.jpg","comment_is_top":false,"comment_ctime":1567248140,"is_pvip":false,"replies":[{"id":"50844","content":"当然，我们决定不了发包的次数。只不过合并写的方式，让操作系统可以一次性发送出去的几率更大。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568196852,"ip_address":"","comment_id":129781,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27337051916","product_id":100032701,"comment_content":"writev是减少write的使用次数吧。一次writev中的数据也有可能分多个包发出去。我说的对吗老师","like_count":6,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465646,"discussion_content":"当然，我们决定不了发包的次数。只不过合并写的方式，让操作系统可以一次性发送出去的几率更大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568196852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129537,"user_name":"D","can_delete":false,"product_type":"c1","uid":1027596,"ip_address":"","ucode":"5BB4D16FE39BFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/0c/f39f847a.jpg","comment_is_top":false,"comment_ctime":1567150693,"is_pvip":false,"replies":[{"id":"52204","content":"哈哈，研究性质的算法，应该还不错吧，不知道什么时候可以实际使用","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1569407474,"ip_address":"","comment_id":129537,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27336954469","product_id":100032701,"comment_content":"就拥塞控制算法这块，记得前一阵阿里发布一个HPCC算法，盛老师点评一下?谢谢","like_count":6,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465528,"discussion_content":"哈哈，研究性质的算法，应该还不错吧，不知道什么时候可以实际使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569407474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129617,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1567174168,"is_pvip":false,"replies":[{"id":"50805","content":"这是为了加速下载的时间，说白了就是抢带宽。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568194185,"ip_address":"","comment_id":129617,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18747043352","product_id":100032701,"comment_content":"下载软件通常使用多线程建立多个TCP连接来下载一个大文件，是不是也是为了尽量避免TCP拥塞控制带来的影响，从而充分利用带宽？因为从实际使用来看，下载软件一旦跑满带宽，其他软件基本是是抢不过它的","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465569,"discussion_content":"这是为了加速下载的时间，说白了就是抢带宽。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568194185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152375,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1573985794,"is_pvip":false,"replies":[{"id":"58563","content":"是的，基于同一个目的地址。这里是说为了提高网络利用率，不能无限制的发送小数据包，也就是说，多个小数据包会在合适的时机合并成一个大的数据包发送出去。你的理解是相反的？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1573992910,"ip_address":"","comment_id":152375,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10163920386","product_id":100032701,"comment_content":"请问老师，文中提到的小数据包发送的场景二三都是基于同一个目的地的吧？不同目的地的数据包不管多小，也不能合并发送吧？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474794,"discussion_content":"是的，基于同一个目的地址。这里是说为了提高网络利用率，不能无限制的发送小数据包，也就是说，多个小数据包会在合适的时机合并成一个大的数据包发送出去。你的理解是相反的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573992910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129634,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1567177442,"is_pvip":false,"replies":[{"id":"50799","content":"发送窗口和接收窗口都是通过滑动窗口机制来实现的，这是为了流量控制而引入的概念；而拥塞窗口则是为了拥塞控制而引入的概念。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568191437,"ip_address":"","comment_id":129634,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10157112034","product_id":100032701,"comment_content":"问题一：Linux中最多允许1024个元素<br>请教一个问题，tcp中有各种窗口，很头晕，比如，发送窗口，接收窗口，通告窗口（Advertised window），滑动窗口，拥塞窗口。为什么要弄这么多窗口呢？都是为了做流量控制吗？如何去理解呢？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465576,"discussion_content":"发送窗口和接收窗口都是通过滑动窗口机制来实现的，这是为了流量控制而引入的概念；而拥塞窗口则是为了拥塞控制而引入的概念。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568191437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8418,"discussion_content":"0. 相关窗口的定义就不赘述了，可以百度一下。我这里主要介绍他们之间的关系。\n1. 发送窗口和接受窗口是滑动窗口算法实现的。\n2. 通知窗口和拥塞窗口分别从接收方和发送方的角度来进行流量控制。\n3. 发送窗口是发送方发送数据的 Buffer, 受通知窗口和拥塞窗口的影响\n4. 接受窗口是接收方接受数据的 Buffer.\n\n以上。希望对您有帮助。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568003406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574019,"discussion_content":"是否可以认为通知窗口就是对端的接收窗口？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653796399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332162,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1643076850,"is_pvip":false,"replies":[{"id":"122024","content":"我同意你的理解。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1644729799,"ip_address":"","comment_id":332162,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5938044146","product_id":100032701,"comment_content":"老师问个问题，客户端向服务端发送数据，在服务端，数据到达 socket 缓存区后，就给户 ack 确认，还是 socket 缓存区中的数据，被应用层从缓存中读取后才返回 ack 确认，我理解的是，只要到达服务端 socket 缓存区就给出 ack","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550774,"discussion_content":"我同意你的理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644729799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167458,"user_name":"skye","can_delete":false,"product_type":"c1","uid":1027840,"ip_address":"","ucode":"C55C9F52C78A00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","comment_is_top":false,"comment_ctime":1577807406,"is_pvip":false,"replies":[{"id":"65478","content":"协议栈实现的时候有默认值，而且算法可以动态调整；另外，也可以自己调用套接字接口函数来设置，不过一般不建议这么做。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1578213613,"ip_address":"","comment_id":167458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872774702","product_id":100032701,"comment_content":"发送窗口的大小是怎么定的？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479872,"discussion_content":"协议栈实现的时候有默认值，而且算法可以动态调整；另外，也可以自己调用套接字接口函数来设置，不过一般不建议这么做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578213613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154641,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1574497999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869465295","product_id":100032701,"comment_content":"概念较多，不过举个例子就好理解了，比如：在北京和华盛顿之间有一条可以双向传输货物的传送带，计算机的一切都是为了更快的速度和更大的容量，底层的实现更是如此，再对照各种概念就好理解了，他们所做的一切就是为了更有效地利用网络带宽。<br>需要权衡的就是，发多少信息？啥时候发？收发之间怎么实现无缝衔接，都没有无谓的等待，各种设备都满负荷的运转。","like_count":1},{"had_liked":false,"id":147714,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1572880543,"is_pvip":false,"replies":[{"id":"57482","content":"需要等到发现窗口和拥塞窗口都要超过100才可以，发送窗口是在ACK返回时根据一定的算法更新的，一旦更新就会影响发送端的行为。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1573282397,"ip_address":"","comment_id":147714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867847839","product_id":100032701,"comment_content":"老师，我有个问题，你举的那个例子里面，取发送窗口和拥塞窗口最小值的80，缓冲区数据是100不能发送出去。那么这个缓冲区数据要什么时候才能发送出去呢，是等到发送缓冲区大于100吗？发送窗口是上一次的ack返回时发送端拿到的吗？那发送端怎么知道什么时候大于100的呢？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473291,"discussion_content":"需要等到发现窗口和拥塞窗口都要超过100才可以，发送窗口是在ACK返回时根据一定的算法更新的，一旦更新就会影响发送端的行为。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573282397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355065,"user_name":"lixin","can_delete":false,"product_type":"c1","uid":1512599,"ip_address":"广东","ucode":"94D99DAFB6C929","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/88nXicqmkJWm3IXVfPfGQSk8SKIBVKjuC4qhzaCkf5Ud88uvKgS4Vf5AzCJ1uaFO0gpPnxdh4CowfhpxV1kSbXw/132","comment_is_top":false,"comment_ctime":1661050715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661050715","product_id":100032701,"comment_content":"老师，请教一下一个场景： 如果发送方使用writev()发送多个buf数据，接收端 用read()，而不是readv() 来读取数据，能否把writev的数据原样读取到么？是否 writev&#47;readv 需要配对使用？谢谢","like_count":0},{"had_liked":false,"id":268902,"user_name":"🐗Jinx","can_delete":false,"product_type":"c1","uid":1711790,"ip_address":"","ucode":"B5C084F54BF66A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1e/ae/a6d5e24a.jpg","comment_is_top":false,"comment_ctime":1608424040,"is_pvip":false,"replies":[{"id":"98872","content":"最大的目的是方便网络程序库的使用者使用，如果没有这个封装，网络程序库基本是不可用的。<br><br>设计的话，你往后面读，后面的章节有一个设计可以参考。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1610285865,"ip_address":"","comment_id":268902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608424040","product_id":100032701,"comment_content":"老师，为什么很多网络库都自己设计了一套缓冲区？其最大的目的是为了什么呢？如果自己要实现一个，应该要从哪些方面考虑和入手呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512073,"discussion_content":"最大的目的是方便网络程序库的使用者使用，如果没有这个封装，网络程序库基本是不可用的。\n\n设计的话，你往后面读，后面的章节有一个设计可以参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610285865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221357,"user_name":"pc","can_delete":false,"product_type":"c1","uid":1652836,"ip_address":"","ucode":"1AD538B9A900B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","comment_is_top":false,"comment_ctime":1590481256,"is_pvip":false,"replies":[{"id":"82175","content":"为啥缓冲区放不小呢？除非是传递大文件，需要flush到磁盘上，大部分网络程序处理报文的时候，都会把数据缓存到内存缓冲区处理的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1590930913,"ip_address":"","comment_id":221357,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590481256","product_id":100032701,"comment_content":"老师举例中的一个请求拆成一个包的例子--可以在代码中处理合并写入缓冲区。那么对于一个请求数据过大，缓冲区放不下一次请求包，不得已拆成两次进行两次请求，这种怎么办？是必然会造成延迟么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496436,"discussion_content":"为啥缓冲区放不小呢？除非是传递大文件，需要flush到磁盘上，大部分网络程序处理报文的时候，都会把数据缓存到内存缓冲区处理的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590930913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207729,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1587169087,"is_pvip":false,"replies":[{"id":"77718","content":"有一个batchwrite程序哦。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587304010,"ip_address":"","comment_id":207729,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1587169087","product_id":100032701,"comment_content":"老师，这一章好像没有server端的代码，无法复现。是需要自己实现吗？使用readv接受数据后打印吗？有没有特别的地方呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492224,"discussion_content":"有一个batchwrite程序哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587304010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gmP4Yh00MZPwNvr4UQdLeXaX3TVyZEEp195S3vD3Sfl1xz5jBr1474Mt6w5OPr0KsrnQObfLRy5PkKNFjSBiasA/132","nickname":"大头爸爸","note":"","ucode":"131E25DB04D222","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340647,"discussion_content":"没有看到接收方的代码啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610086576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178369,"user_name":"绿箭侠","can_delete":false,"product_type":"c1","uid":1528536,"ip_address":"","ucode":"B994F558A98E29","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","comment_is_top":false,"comment_ctime":1581671114,"is_pvip":false,"replies":[{"id":"71048","content":"这个，怎么说呢，纯粹是为了演示，因为系统很空闲，发送的数据有先有后，处理起来自然有先有后，也就是说，先发送的报文被先接收，后发送的报文后接收，自然就分成了两条数据。<br><br>在实战中，这个情况是不正确的，有可能先发送的后到达，所以需要对报文进行解析，例如你提到的换行符。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583054057,"ip_address":"","comment_id":178369,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581671114","product_id":100032701,"comment_content":"老师，代码的例子，服务端数据是怎么分清是两条数据的？根据换行符？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483777,"discussion_content":"这个，怎么说呢，纯粹是为了演示，因为系统很空闲，发送的数据有先有后，处理起来自然有先有后，也就是说，先发送的报文被先接收，后发送的报文后接收，自然就分成了两条数据。\n\n在实战中，这个情况是不正确的，有可能先发送的后到达，所以需要对报文进行解析，例如你提到的换行符。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583054057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159500,"user_name":"咸鱼强","can_delete":false,"product_type":"c1","uid":1486659,"ip_address":"","ucode":"954B4CE0592067","user_header":"https://static001.geekbang.org/account/avatar/00/16/af/43/2caad539.jpg","comment_is_top":false,"comment_ctime":1575639307,"is_pvip":false,"replies":[{"id":"61024","content":"是的，本来想打印出这个n的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575798718,"ip_address":"","comment_id":159500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575639307","product_id":100032701,"comment_content":"客户端代码的第30行  变量n 好像并没有用到？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477080,"discussion_content":"是的，本来想打印出这个n的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575798718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136164,"user_name":"JasonZhi","can_delete":false,"product_type":"c1","uid":1282818,"ip_address":"","ucode":"6C23DCD592636D","user_header":"https://static001.geekbang.org/account/avatar/00/13/93/02/fcab58d1.jpg","comment_is_top":false,"comment_ctime":1569375412,"is_pvip":true,"replies":[{"id":"52209","content":"确实是两路不同的实现，但是我不理解为什么文件写需要缓冲区满才进行呢？应该会合并写入，但是不一定需要缓冲区满吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1569408347,"ip_address":"","comment_id":136164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569375412","product_id":100032701,"comment_content":"老师你好，有个问题想求证一下，对文件执行write 操作时会经过缓冲区，缓冲区满了才执行磁盘操作。而对socket 执行write 操作，虽然也会经过缓冲区，但是并不一定需要等到缓冲区满了才发送。不知我的理解是否正确？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468489,"discussion_content":"确实是两路不同的实现，但是我不理解为什么文件写需要缓冲区满才进行呢？应该会合并写入，但是不一定需要缓冲区满吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569408347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134631,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":1003738,"ip_address":"","ucode":"2E254444098267","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/da/ed4803cb.jpg","comment_is_top":false,"comment_ctime":1568882554,"is_pvip":false,"replies":[{"id":"51601","content":"我个人觉得不会，应该是拆分成MSS大小的包，否则会浪费带宽。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568884526,"ip_address":"","comment_id":134631,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568882554","product_id":100032701,"comment_content":"「客户端分两次将一个请求发送出去」，这种情况我在本地模拟只看到了当数据包比MSS大的时候TCP才会拆包发送，请问老师还有别的情况会让一个请求多次发送出去吗？还有就是这种拆包发送有可能拆成两个小数据包（小于MSS）吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467836,"discussion_content":"我个人觉得不会，应该是拆分成MSS大小的包，否则会浪费带宽。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568884526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130507,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1567475016,"is_pvip":false,"replies":[{"id":"50802","content":"当然有的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568194007,"ip_address":"","comment_id":130507,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567475016","product_id":100032701,"comment_content":"老师  最后提到的那个问题  那些网络库会不会在内部做处理  就像是运行库函数内部还有缓存的原理一样","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465985,"discussion_content":"当然有的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568194007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130226,"user_name":"yusuf","can_delete":false,"product_type":"c1","uid":1170784,"ip_address":"","ucode":"9F32149B2ADDA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","comment_is_top":false,"comment_ctime":1567408093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567408093","product_id":100032701,"comment_content":"1)、iov_len的总和&lt;=32767, iovcnt &lt;= 16","like_count":0},{"had_liked":false,"id":130008,"user_name":"yusuf","can_delete":false,"product_type":"c1","uid":1170784,"ip_address":"","ucode":"9F32149B2ADDA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","comment_is_top":false,"comment_ctime":1567350282,"is_pvip":false,"replies":[{"id":"50841","content":"是的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568196475,"ip_address":"","comment_id":130008,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1567350282","product_id":100032701,"comment_content":"场景二中，发送端把接下来连续的几个小数据包存储起来，等待接收到前一个小数据包的 ACK 分组之后，再将数据一次性发送出去。<br><br>是将多个数据包合并成了1个包吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465760,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568196475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200037,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4f/a5/71358d7b.jpg","nickname":"J.M.Liu","note":"","ucode":"B2CB84B8E923A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7685,"discussion_content":"tcp是累积确认的，只需要返回最后一个ack，就能让对方知道这个包之前的包都收到了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567612326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1170784,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","nickname":"yusuf","note":"","ucode":"9F32149B2ADDA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1200037,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4f/a5/71358d7b.jpg","nickname":"J.M.Liu","note":"","ucode":"B2CB84B8E923A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7699,"discussion_content":"说的好像不一回事吧，我说的是发送端的一次性发送处理，你说的是接收端接收的处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567645278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7685,"ip_address":""},"score":7699,"extra":""},{"author":{"id":2224386,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f1/02/96082034.jpg","nickname":"Guchen","note":"","ucode":"9BD34F616F167A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1170784,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","nickname":"yusuf","note":"","ucode":"9F32149B2ADDA0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316165,"discussion_content":"我觉得是一个事，应该这样理解\n情景1 发送端连续发送许多小数据包：1.如果都是按顺序到达的，那么接收端针对每个小数据包都会回送一个ACK包，而这样的ACK包至少54字节（14+20+20+0），会严重浪费带宽。2.如果并不是按顺序到达，那么会根据累计确认的次数回送相应的ACK包，这时会发送>=1个ACK包\n情景2 发送端将许多小数据包放到缓冲区之后封装到1个数据包的数据字段里，这样接收端只会回送1个ACK报文段。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603369532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7699,"ip_address":""},"score":316165,"extra":""}]},{"author":{"id":1624505,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/b9/aff32d3c.jpg","nickname":"井底之蛙","note":"","ucode":"DAEE283B210B23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9391,"discussion_content":"我感觉也是批量处理，否则这个算法没什么意义吧，都是占用带宽，只是早晚得事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568164131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129799,"user_name":"谢童","can_delete":false,"product_type":"c1","uid":1339793,"ip_address":"","ucode":"C9AB94F8A36BE1","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/91/caecb8ff.jpg","comment_is_top":false,"comment_ctime":1567257624,"is_pvip":false,"replies":[{"id":"50843","content":"不是原子操作，不过建议还是单线程来处理一个socket，因为加锁的读写操作太重了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568196737,"ip_address":"","comment_id":129799,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567257624","product_id":100032701,"comment_content":"老师，writev 是原子操作吗？在多线程的情况下可以不加锁使用吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465657,"discussion_content":"不是原子操作，不过建议还是单线程来处理一个socket，因为加锁的读写操作太重了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568196737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129637,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1567177540,"is_pvip":false,"replies":[{"id":"50798","content":"TCP在收到乱序到达包会立即发送ACK，TCP利用3个相同的ACK来判定数据包的丢失，进行快速重传，以便让对方能在较短的时间内接受到丢失的包，本质上是一种通过&quot;弥补&quot;机制保证拥塞控制能完成。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568191332,"ip_address":"","comment_id":129637,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567177540","product_id":100032701,"comment_content":"请教老师一个问题，慢启动是因为需要探测网络带宽质量，快恢复，快重连是什么意思呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465577,"discussion_content":"TCP在收到乱序到达包会立即发送ACK，TCP利用3个相同的ACK来判定数据包的丢失，进行快速重传，以便让对方能在较短的时间内接受到丢失的包，本质上是一种通过&amp;quot;弥补&amp;quot;机制保证拥塞控制能完成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568191332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8417,"discussion_content":"快恢复和快重传是因为 TCP 知道网络流正常，但是数据传输速度过快导致网络拥塞。因此需要将 cwnd 减小，但又不必直接减少到 1 这么夸张。\n\n一般是收到了后面的ACK 超过三次触发。\n\n而慢启动一般是在启动时，或者发送超时才触发。\n\n以上。希望对您有帮助。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568003109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}