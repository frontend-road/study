{"id":424337,"title":"12 | 基础配置详解：哪些参数会影响应用程序稳定性？","content":"<p>你好，我是吴磊。</p><p>国庆假期即将结束，我们的基础模块也即将收尾。到目前为止，我们一起学习了RDD编程模型、Spark分布式部署、Spark工作原理，以及RDD常用算子。恭喜你，到这里，可以说你已经完全跨入了Spark分布式应用开发的大门。有了现在的知识储备，对于大多数的业务需求，我相信你都能很快地实现。</p><p>不过，快速用代码实现各式各样的业务需求，这还只是第一步。我们不光要让代码跑起来，还需要让代码跑得又快又稳。</p><p>要想做到这些，我们还需要配置项来帮忙。如果把Spark看作是一部F1赛车的话，那么配置项就是赛车车身的各项配置参数，如发动机缸数、最大转矩、车身轴距、悬挂方式、整车装备质量，等等。只有合理地配置车身参数，才能让车子本身的稳定性和性能得到保障，为选手的出色发挥奠定基础。</p><p>今天这一讲，我们就来说一说Spark都有哪些配置项，以及这些配置项的含义与作用。</p><h2>配置项</h2><p>打开Spark官网的<a href=\"http://spark.apache.org/docs/latest/configuration.html\">Configuration页面</a>，在这里你能找到全部的Spark配置项。</p><p>不过，让人沮丧的是，配置项数目过于庞大，种类繁多，有的需要设置true/false，有的则需要我们给出明确的数值，让人看上去眼花缭乱、无所适从。</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/4c/b28bd6e736f3634yy5ee74bd3027624c.png?wh=793x646\" alt=\"图片\" title=\"配置项示意图\"></p><p>那么问题来了，面对这么多的配置项，我们应该从哪里入手呢？别着急，既然我们的目的是让车子“跑得稳”、“跑得快”，那咱们不妨从这两个角度出发，来整理那些我们必须要掌握的配置项。</p><!-- [[[read_end]]] --><p>在这一讲，咱们先来梳理那些<strong>能让Spark跑得稳的配置项</strong>，而在后续介绍Spark SQL的时候，我们再去关注那些与“跑得快”有关的部分。</p><p>关于跑得稳这件事，你可能会有这样的疑问：“一般的车子，出厂就能开，并不需要特别调整什么车辆参数。同理，大部分Spark配置项都有默认值，开发者使用出厂设置、省去调参的麻烦，它不香吗？” 遗憾的是，对于大多数的应用场景来说，在默认的参数设置下，Spark还真就跑不起来。</p><p>以spark.executor.memory这个配置项为例，它用于指定Executor memory，也就是Executor可用内存上限。这个参数的默认值是1GB，显然，对于动辄上百GB、甚至上TB量级的工业级数据来说，这样的设置太低了，分布式任务很容易因为OOM（内存溢出，Out of memory）而中断。</p><p>你看，为了能让Spark跑得稳，咱们还是得花些心思。对于刚才说的情况，如果你以为直接把内存参数设置到上百GB，就可以一劳永逸，那未免有些草率。单纯从资源供给的角度去调整配置项参数，是一种“简单粗暴”的做法，并不可取。<strong>实际上，应用程序运行得稳定与否，取决于硬件资源供给与计算需要是否匹配</strong>。</p><p>这就好比是赛车组装，要得到一辆高性能的车子，我们并不需要每一个部件都达到“顶配”的要求，而是要让组装配件之间相互契合、匹配，才能让车子达到预期的马力输出。</p><p>因此，咱们不妨从硬件资源的角度切入，去探索开发者必须要关注的配置项都有哪些。既然上面我们用内存举例，而且关于内存的配置项，我们在内存管理那一讲简单提过，你可能还有一些印象，那么接下来，我们就从内存入手，说一说和它有关的配置项。</p><h3>内存</h3><p>说起内存，咱们不妨先来回顾一下Spark的内存划分。对于给定的Executor Memory，Spark将JVM Heap划分为4个区域，分别是Reserved Memory、User Memory、Execution Memory和Storage Memory，如下图所示。</p><p>不同内存区域的含义和它们的计算公式，我们在<a href=\"https://time.geekbang.org/column/article/422400\">第8讲</a>做过详细讲解，如果你印象不深了可以回顾一下，这里我们重点分析一下这些内存配置项数值的设置思路。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/f0/9c2fd81c42cdab915f9a388683602df0.jpg?wh=1920x737\" alt=\"图片\" title=\"内存配置项\"></p><p>结合图解，其中Reserved Memory大小固定为300MB，其他3个区域的空间大小，则有3个配置项来划定，它们分别是spark.executor.memory、spark.memory.fraction、spark.memory.storageFraction。</p><p>为了后续叙述方便，我们分别把它们简称为M、mf和sf，其中大写的M是绝对值，而小写的mf和sf都是比例值，这一点需要你注意。</p><p>其中，M用于指定划分给Executor进程的JVM Heap大小，也即是Executor Memory。Executor Memory由Execution Memory、Storage Memory和User Memory“这三家”瓜分。</p><p>（M – 300）* mf划分给Execution Memory和Storage Memory，而User Memory空间大小由（M – 300）*（1 - mf）这个公式划定，它用于存储用户自定义的数据结构，比如，RDD算子中包含的各类实例化对象或是集合类型（如数组、列表等），都属于这个范畴。</p><p>因此，如果你的分布式应用，并不需要那么多自定义对象或集合数据，你应该把mf的值设置得越接近1越好，这样User Memory无限趋近于0，大面积的可用内存就可以都留给Execution Memory和Storage Memory了。</p><p>我们知道，在1.6版本之后，<strong>Spark推出了统一的动态内存管理模式</strong>，在对方资源未被用尽的时候，Execution Memory与Storage Memory之间可以互相进行抢占。不过，即便如此，我们仍然需要sf这个配置项来划定它们之间的那条虚线，从而明确告知Spark我们开发者更倾向于“偏袒”哪一方。</p><p>那么对于sf的设置，开发者该如何进行取舍呢？答案是看数据的复用频次。这是什么意思呢？我们分场景举例来说。</p><p>对于ETL（Extract、Transform、Load）类型的作业来说，数据往往都是按照既定的业务逻辑依序处理，其中绝大多数的数据形态只需访问一遍，很少有重复引用的情况。</p><p>因此，在ETL作业中，RDD Cache并不能起到提升执行性能的作用，那么自然我们也就没必要使用缓存了。在这种情况下，我们就应当把sf的值设置得低一些，压缩Storage Memory可用空间，从而尽量把内存空间留给Execution Memory。</p><p>相反，如果你的应用场景是机器学习、或是图计算，这些计算任务往往需要反复消耗、迭代同一份数据，处理方式就不一样了。在这种情况下，咱们要充分利用RDD Cache提供的性能优势，自然就要把sf这个参数设置得稍大一些，从而让Storage Memory有足够的内存空间，来容纳需要频繁访问的分布式数据集。</p><p>好啦，到此为止，对于内存的3个配置项，我们分别解读了它们的含义，以及设置的一般性原则。你需要根据你的应用场景，合理设置这些配置项，这样程序运行才会高速、稳定。学会了这些，内存配置项这一关，你基本上已经拿到80分了。而剩下的20分，需要你从日常开发的反复实践中去获取，期待你总结归纳出更多的配置经验。</p><p>在硬件资源方面，内存的服务对象是CPU。内存的有效配置，一方面是为了更好地容纳数据，另一方面，更重要的就是提升CPU的利用率。那说完内存，接下来，我们再来看看CPU。</p><h3>CPU</h3><p>与CPU直接相关的配置项，我们只需关注两个参数，它们分别是spark.executor.instances和spark.executor.cores。其中前者指定了集群内Executors的个数，而后者则明确了每个Executors可用的CPU Cores（CPU核数）。</p><p>我们知道，一个CPU Core在同一时间只能处理一个分布式任务，因此，<strong>spark.executor.instances与spark.executor.cores的乘积实际上决定了集群的并发计算能力，这个乘积，我们把它定义为“并发度”（Degree of concurrency）</strong>。</p><p>说到并发度，我们就不得不说另外一个概念：并行度（Degree of parallism）。相比并发度，并行度是一个高度相关、但又完全不同的概念。并行度用于定义分布式数据集划分的份数与粒度，它直接决定了分布式任务的计算负载。并行度越高，数据的粒度越细，数据分片越多，数据越分散。</p><p>这也就解释了，并行度为什么总是跟分区数量、分片数量、Partitions 这些属性相一致。举个例子，第9讲我们就说过，并行度对应着RDD的数据分区数量。</p><p>与并行度相关的配置项也有两个，分别是spark.default.parallelism和spark.sql.shuffle.partitions。其中前者定义了由SparkContext.parallelize API所生成RDD的默认并行度，而后者则用于划定Shuffle过程中Shuffle Read阶段（Reduce阶段）的默认并行度。</p><p>对比下来，并发度的出发点是计算能力，它与执行内存一起，共同构成了计算资源的供给水平，而并行度的出发点是数据，它决定着每个任务的计算负载，对应着计算资源的需求水平。一个是供给，一个是需求，供需的平衡与否，直接影响着程序运行的稳定性。</p><h3>CPU、内存与数据的平衡</h3><p>由此可见，所谓供需的平衡，实际上就是指CPU、内存与数据之间的平衡。那么问题来了，有没有什么量化的办法，来让三者之间达到供需之间平衡的状态呢？其实，只需要一个简单的公式，我们就可以轻松地做到这一点。</p><p>为了叙述方便，我们把由配置项spark.executor.cores指定的CPU Cores记为c，把Execution Memory内存大小记为m，还记得吗？m的尺寸由公式（M - 300）* mf *（1 - sf）给出。不难发现，c和m，一同量化了一个Executor的可用计算资源。</p><p>量化完资源供给，我们接着再来说数据。对于一个待计算的分布式数据集，我们把它的存储尺寸记为D，而把其并行度记录为P。给定D和P，不难推出，D/P就是分布式数据集的划分粒度，也就是每个数据分片的存储大小。</p><p>学习过调度系统，我们知道，在Spark分布式计算的过程中，一个数据分片对应着一个Task（分布式任务），而一个Task又对应着一个CPU Core。因此，把数据看作是计算的需求方，要想达到CPU、内存与数据这三者之间的平衡，我们必须要保证每个Task都有足够的内存，来让CPU处理对应的数据分片。</p><p>为此，我们要让数据分片大小与Task可用内存之间保持在同一量级，具体来说，我们可以使用下面的公式来进行量化。</p><pre><code class=\"language-scala\">D/P ~ m/c\n</code></pre><p>其中，波浪线的含义，是其左侧与右侧的表达式在同一量级。左侧的表达式D/P为数据分片大小，右侧的m/c为每个Task分到的可用内存。以这个公式为指导，结合分布式数据集的存储大小，我们就可以有的放矢、有迹可循地对上述的3类配置项进行设置或调整，也就是与CPU、内存和并行度有关的那几个配置项。</p><h3>磁盘</h3><p>说完了CPU和内存，接下来，我们再来说说磁盘。与前两者相比，磁盘的配置项相对要简单得多，值得我们关注的，仅有spark.local.dir这一个配置项，为了叙述方便，后续我们把它简称为ld。这个配置项的值可以是任意的本地文件系统目录，它的默认值是/tmp目录。</p><p>ld参数对应的目录用于存储各种各样的临时数据，如Shuffle中间文件、RDD Cache（存储级别包含“disk”），等等。这些临时数据，对程序能否稳定运行，有着至关重要的作用。</p><p>例如，Shuffle中间文件是Reduce阶段任务执行的基础和前提，如果中间文件丢失，Spark在Reduce阶段就会抛出“Shuffle data not found”异常，从而中断应用程序的运行。</p><p>既然这些临时数据不可或缺，我们就不能盲从默认选项了，而是有必要先考察下/tmp目录的情况。遗憾的是，ld参数默认的/tmp目录一来存储空间有限，二来该目录本身的稳定性也值得担忧。因此，在工业级应用中，我们通常都不能接受使用/tmp目录来设置ld配置项。</p><p>了解了ld这个配置项的作用之后，我们自然就能想到，应该把它设置到一个存储空间充沛、甚至性能更有保障的文件系统，比如空间足够大的SSD（Solid State Disk）文件系统目录。</p><p>好啦，到此为止，我们分别介绍了与CPU、内存、磁盘有关的配置项，以及它们的含义、作用与设置技巧。说到这里，你可能有些按捺不住：“这些配置项的重要性我已经get到了，那我应该在哪里设置它们呢？”接下来，我们继续来说说，开发者都可以通过哪些途径来设置配置项。</p><h2>配置项的设置途径</h2><p>为了满足不同的应用场景，Spark为开发者提供了3种配置项设置方式，分别是配置文件、命令行参数和SparkConf对象，这些方式都以（Key，Value）键值对的形式记录并设置配置项。</p><p>配置文件指的是spark-defaults.conf，这个文件存储在Spark安装目录下面的conf子目录。该文件中的参数设置适用于集群范围内所有的应用程序，因此它的生效范围是全局性的。对于任意一个应用程序来说，如果开发者没有通过其他方式设置配置项，那么应用将默认采用spark-defaults.conf中的参数值作为基础设置。</p><p>在spark-defaults.conf中设置配置项，你只需要用空格把配置项的名字和它的设置值分隔开即可。比如，以spark.executor.cores、spark.executor.memory和spark.local.dir这3个配置项为例，我们可以使用下面的方式对它们的值进行设置。</p><pre><code class=\"language-scala\">spark.executor.cores 2\nspark.executor.memory 4g\nspark.local.dir /ssd_fs/large_dir\n</code></pre><p>不过，在日常的开发工作中，不同应用对于资源的诉求是不一样的：有些需要更多的CPU Cores，有些则需要更高的并行度，凡此种种、不一而足，可谓是众口难调，这个时候，我们只依赖spark-defaults.conf来进行全局设置就不灵了。</p><p>为此，Spark为开发者提供了两种应用级别的设置方式，也即命令行参数和SparkConf对象，它们的生效范围仅限于应用本身，我们分别看看这两种方式具体怎么用。</p><p>先说命令行参数，它指的是在运行了spark-shell或是spark-submit命令之后，通过–conf关键字来设置配置项。我们知道，spark-shell用于启动交互式的分布式运行环境，而spark-submit则用于向Spark计算集群提交分布式作业。</p><p>还是以刚刚的3个配置项为例，以命令行参数的方式进行设置的话，你需要在提交spark-shell或是spark-submit命令的时候，以–conf Key=Value的形式对参数进行赋值。</p><pre><code class=\"language-shell\">spark-shell --master local[*] --conf spark.executor.cores=2 --conf spark.executor.memory=4g --conf spark.local.dir=/ssd_fs/large_dir\n</code></pre><p>不难发现，尽管这种方式能让开发者在应用级别灵活地设置配置项，但它的书写方式过于繁琐，每个配置项都需要以–conf作前缀。不仅如此，命令行参数的设置方式不利于代码管理，随着时间的推移，参数值的设置很可能会随着数据量或是集群容量的变化而变化，但是这个变化的过程却很难被记录并维护下来，而这无疑会增加开发者与运维同学的运维成本。</p><p>相比之下，不论是隔离性还是可维护性，SparkConf对象的设置方式都更胜一筹。在代码开发的过程中，我们可以通过定义SparkConf对象，并调用其set方法来对配置项进行设置。老规矩，还是用刚刚的CPU、内存和磁盘3个配置项来举例。</p><pre><code class=\"language-scala\">import org.apache.spark.SparkConf\nval conf = new SparkConf()\nconf.set(\"spark.executor.cores\", \"2\")\nconf.set(\"spark.executor.memory\", \"4g\")\nconf.set(\"spark.local.dir\", \"/ssd_fs/large_dir\")&nbsp; &nbsp;\n</code></pre><p>好啦，到此为止，我们一起梳理了CPU、内存、磁盘的相关配置项，并重点强调了CPU、内存与数据之间的供需平衡。掌握了这些设置方法与要点之后，你不妨自己动手去试试这些配置项，可以拿之前的Word Count小例子练练手，巩固一下今天所学的内容。</p><h2>重点回顾</h2><p>今天这一讲，我们分别从CPU、内存和磁盘三个方面，讲解了影响应用程序稳定性的几个重要参数。你需要掌握它们的含义、作用还有适用场景，为了方便你记忆，我把它们整理到后面的表格里，你可以随时拿来参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/89/31/8999f0916b187768e35a4e0e5fdf9d31.jpg?wh=1920x1259\" alt=\"图片\" title=\"配置项及其含义\"></p><p>熟悉了这些关键配置项之后，你还需要了解它们的设置方式。Spark提供了3种配置项设置途径，分别是spark-defaults.conf配置文件、命令行参数和SparkConf对象。其中第一种方式用于全局设置，而后两者的适用范围是应用本身。</p><p>对于这3种方式，<strong>Spark会按照“SparkConf对象 -&gt; 命令行参数 -&gt; 配置文件”的顺序，依次读取配置项的参数值</strong>。对于重复设置的配置项，Spark以前面的参数取值为准。</p><h2>每课一练</h2><p>请你粗略地过一遍Spark官网中的 <a href=\"http://spark.apache.org/docs/latest/configuration.html\">Configuration页面</a>，说一说，其中哪些配置项适合在spark-defaults.conf中进行设置，而哪些配置项使用SparkConf对象的方式来设置比较好？</p><p>欢迎你在留言区跟我交流。如果这一讲对你有帮助的话，也推荐你把这节课分享给有需要的的同事、朋友，我们下一讲见。</p>","comments":[{"had_liked":false,"id":315983,"user_name":"Geek_2dfa9a","can_delete":false,"product_type":"c1","uid":1435535,"ip_address":"","ucode":"B5FE7971F5E773","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epGTSTvn7r4ibk1PuaUrSvvLdviaLcne50jbvvfiaxKkM5SLibeP6jibA2bCCQBqETibvIvcsOhAZlwS8kQ/132","comment_is_top":true,"comment_ctime":1634093570,"is_pvip":false,"replies":[{"id":"114521","content":"先不说每一类配置项的设置位置是否合理，单说老弟深入钻研的精神，尤为可嘉！！！顺便一提，ID可以改一下，这样大家对你印象更深~<br><br>为了降低大家的学习成本，咱们确实没有逐个讲解每一类配置项，Configuration页面确实提供了种类繁多的配置选项，对于刚入门的同学非常不友好。老弟认真地把每一类都过了一遍，而且都分析了配置项的设置顺序，真的很赞👍！！！<br><br>这里咱们不去深究具体每一类到底应该设置在哪个level，其实只要把握住配置项的一半设置原则，基本上就不会有太大的问题。对于不同（种类）的配置项，可以follow下面的设置原则（其实你把你分析的每个环节汇总，能得出一样的结论）：<br>1. 硬件资源类的（资源供给类：CPU、内存、磁盘、网络），spark-defaults.conf统一设置；<br>2. 全局服务类的（比如动态扩容、External shuffle services，安全，压缩，Spark UI，等等），spark-defaults.conf统一设置；<br>3. 任务粒度的配置（如Task重试、locality wait、是否推断speculative task，等等），用命令行，或是SparkConf，推荐用SparkConf，命令行不好管理~","user_name":"作者回复","comment_id":315983,"uid":"1043100","ip_address":"","utype":1,"ctime":1634137885,"user_name_real":"吴磊"}],"discussion_count":2,"race_medal":0,"score":"9.223372072848599e+18","product_id":100090001,"comment_content":"关于何时何处配置Property这一块，官网文档有提及，属性主要分为两块：deploy相关和Spark Runtime Control（个人理解是任务运行相关，<br>即Driver，任务及其相关资源）相关。前面的比如“spark.driver.memory”, “spark.executor.instances”，适合放在spark-defaults.conf<br>后面的比如“spark.task.maxFailures”，适合在SparkConf（Driver）&#47;spark-submit命令中指定。关于两处属性的覆盖问题：<br>通常情况优先级最高的是SparkConf，其次是spark-submit，最后是spark-defaults.conf，当然也有例外，“spark.driver.memory”, <br>“spark.executor.instances”这两个属性在SparkConf设置也不会生效。<br>属性是也是细分的，按照官方文档分类：<br>Application Properties 这块主要是任务相关的，应该对应开发自己设置，从生产角度来看，我觉得每个任务必须设置，甚至不应该有默认值。<br>Runtime Environment 任务运行相关，比如依赖存放的位置，这块可以统一设置，按需在任务里覆盖<br>Shuffle Behavior shuffle行为，大部分偏spark-defaults.conf统一设置，“spark.shuffle.service.enabled”配置值得一提，<br>开启后可以由统一服务维护shuffle的数据文件，避免Executor shuffle时意外终止导致的找不到shuffle文件。<br>Spark UI<br>Compression and Serialization 压缩和序列化，在任务里按需设置，主要降低网络IO负载，但是肯定会带来CPU额外开销<br>Memory Management 内存，统一设置，按需在任务里覆盖<br>Execution Behavior 执行相关，统一设置，按需在任务里覆盖<br>Executor Metrics 执行指标，统一设置，按需在任务里覆盖，这块是不是用来分析性能瓶颈的？<br>Networking和Scheduling都是偏spark-defaults.conf统一设置，感觉没啥可以在任务里设置的<br>Barrier Execution Mode这块我分析应该是面向MPI模型（模型训练）和BSP模型（图计算）的，应该也是和任务相关的，说实话后面都不怎么看得懂了，都是猜的<br>Dynamic Allocation，Thread Configurations 这两个搞不太清楚<br>Security 安全，偏集群部署方向的配置多，可以统一配置","like_count":9,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528224,"discussion_content":"先不说每一类配置项的设置位置是否合理，单说老弟深入钻研的精神，尤为可嘉！！！顺便一提，ID可以改一下，这样大家对你印象更深~\n\n为了降低大家的学习成本，咱们确实没有逐个讲解每一类配置项，Configuration页面确实提供了种类繁多的配置选项，对于刚入门的同学非常不友好。老弟认真地把每一类都过了一遍，而且都分析了配置项的设置顺序，真的很赞👍！！！\n\n这里咱们不去深究具体每一类到底应该设置在哪个level，其实只要把握住配置项的一半设置原则，基本上就不会有太大的问题。对于不同（种类）的配置项，可以follow下面的设置原则（其实你把你分析的每个环节汇总，能得出一样的结论）：\n1. 硬件资源类的（资源供给类：CPU、内存、磁盘、网络），spark-defaults.conf统一设置；\n2. 全局服务类的（比如动态扩容、External shuffle services，安全，压缩，Spark UI，等等），spark-defaults.conf统一设置；\n3. 任务粒度的配置（如Task重试、locality wait、是否推断speculative task，等等），用命令行，或是SparkConf，推荐用SparkConf，命令行不好管理~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634137885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435535,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epGTSTvn7r4ibk1PuaUrSvvLdviaLcne50jbvvfiaxKkM5SLibeP6jibA2bCCQBqETibvIvcsOhAZlwS8kQ/132","nickname":"Geek_2dfa9a","note":"","ucode":"B5FE7971F5E773","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403526,"discussion_content":"这里讲下，我真的只是粗略看了下，大部分参数我都没用过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634098313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335916,"user_name":"Ebdaoli","can_delete":false,"product_type":"c1","uid":1722878,"ip_address":"","ucode":"E45C113C1AFD12","user_header":"https://static001.geekbang.org/account/avatar/00/1a/49/fe/48846a6d.jpg","comment_is_top":false,"comment_ctime":1645769641,"is_pvip":false,"replies":[{"id":"122828","content":"好问题~ 这里不必拘泥于文中给出的2~3倍，这是个非常general、老套的经验之谈。2~3倍，仅仅是个起点，或者说设置并行度的思路，实际上并行度的设置，参考cores总数并不总是最好的，最佳的思路，还是参考数据分片大小。如果能够把分片大小控制在200MB左右，并行度实际上就是D&#47;200MB，其中D是数据集总大小。目的还是充分利用CPU、像你说的：“避免在某些执行过快的task在执行完本次任务后，还有其他的任务可以执行，充分利用集群的资源”。不考虑数据集总大小D，单纯地设置2~3倍，或是4~5倍，其实是没有意义的~ 关于并行度的设置，内存、CPU设置，老弟可以参考性能调优篇的“三足鼎立”哈~","user_name":"作者回复","comment_id":335916,"uid":"1043100","ip_address":"","utype":1,"ctime":1645890576,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5940736937","product_id":100090001,"comment_content":"关于 1 core 1 task , 集群中总core 为 executors * cores 这一块，在SparkSQL 中设置 spark.shuffle.partitions 时，遵照总的并行度 设置为 总core 数的 2~3 倍, 避免在某些执行过快的task在执行完本次任务后，还有其他的任务可以执行，充分利用集群的资源，这里如果设置成4~5倍或者更大的倍数会对性能造成什么影响，是好的还是坏的？理论来说如果 并行度更多了，集群资源也是能充分利用，每个task 处理的数据量还会更少，这里有些困惑对于 2~3 倍的并行度设置的理解，所以能请老师帮忙分析下吗？","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553469,"discussion_content":"好问题~ 这里不必拘泥于文中给出的2~3倍，这是个非常general、老套的经验之谈。2~3倍，仅仅是个起点，或者说设置并行度的思路，实际上并行度的设置，参考cores总数并不总是最好的，最佳的思路，还是参考数据分片大小。如果能够把分片大小控制在200MB左右，并行度实际上就是D/200MB，其中D是数据集总大小。目的还是充分利用CPU、像你说的：“避免在某些执行过快的task在执行完本次任务后，还有其他的任务可以执行，充分利用集群的资源”。不考虑数据集总大小D，单纯地设置2~3倍，或是4~5倍，其实是没有意义的~ 关于并行度的设置，内存、CPU设置，老弟可以参考性能调优篇的“三足鼎立”哈~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645890576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324723,"user_name":"William","can_delete":false,"product_type":"c1","uid":2086573,"ip_address":"","ucode":"EC29D9CD616183","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d6/ad/850992a5.jpg","comment_is_top":false,"comment_ctime":1638589868,"is_pvip":false,"replies":[{"id":"117818","content":"老弟实际上问的是spark.default.parallelism 和 spark.sql.shuffle.partitions的区别。<br>1）spark.default.parallelism，这个用来控制RDD的默认并行度，HadoopRDD是自带并行度的（与HDFS文件分片一致），而用parallelize创建的RDD，在没有指定并行度的情况下，默认用spark.default.parallelism<br>2）spark.sql.shuffle.partitions，这个是reduce阶段默认的并行度，如果开发者没有明确指定的话<br><br>回到原来的问题，D&#47;P ~ m&#47;c，这里的P，指的是开发者要设置的并行度，如果不设置，那默认就是上面那两种情况。在D&#47;P ~ m&#47;c这个式子里面，D是固定的，是数据原始大小，P、m、c，都需要开发者设定，而他们3个的设置，可以参考这个公式，做到“三足鼎立”，尽量让等式两边平衡","user_name":"作者回复","comment_id":324723,"uid":"1043100","ip_address":"","utype":1,"ctime":1638610977,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5933557164","product_id":100090001,"comment_content":"<br>D&#47;P ~ m&#47;c<br>老师，公式中的P与是 spark.default.parallelism 和 spark.sql.shuffle.partitions有关，这里的P与这两者的关系具体是怎样的呢？具体是以那个为准呢？","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535928,"discussion_content":"老弟实际上问的是spark.default.parallelism 和 spark.sql.shuffle.partitions的区别。\n1）spark.default.parallelism，这个用来控制RDD的默认并行度，HadoopRDD是自带并行度的（与HDFS文件分片一致），而用parallelize创建的RDD，在没有指定并行度的情况下，默认用spark.default.parallelism\n2）spark.sql.shuffle.partitions，这个是reduce阶段默认的并行度，如果开发者没有明确指定的话\n\n回到原来的问题，D/P ~ m/c，这里的P，指的是开发者要设置的并行度，如果不设置，那默认就是上面那两种情况。在D/P ~ m/c这个式子里面，D是固定的，是数据原始大小，P、m、c，都需要开发者设定，而他们3个的设置，可以参考这个公式，做到“三足鼎立”，尽量让等式两边平衡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638610977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324213,"user_name":"小新","can_delete":false,"product_type":"c1","uid":1690884,"ip_address":"","ucode":"DCAD04665E2CF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/04/e27b7803.jpg","comment_is_top":false,"comment_ctime":1638338785,"is_pvip":false,"replies":[{"id":"117758","content":"可以的，老弟说的场景，其实挺普遍的，比如机器学习流水线就是这样，前期ETL做特征工程、样本工程，后期MLlib做模型训练。把应用分开就好了，每个应用内部，通过SparkConf来单独设置参数值，从而在应用层面对配置项做隔离设置","user_name":"作者回复","comment_id":324213,"uid":"1043100","ip_address":"","utype":1,"ctime":1638458365,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5933306081","product_id":100090001,"comment_content":"相反，如果你的应用场景是机器学习、或是图计算，这些计算任务往往需要反复消耗、迭代同一份数据，处理方式就不一样了。在这种情况下，咱们要充分利用 RDD Cache 提供的性能优势，自然就要把 sf 这个参数设置得稍大一些，从而让 Storage Memory 有足够的内存空间，来容纳需要频繁访问的分布式数据集。<br><br>就这个问题，想问一下，如果整个应用前期是ETL， 后期使用MLlib进行机器学习，那个参数可以代码里手动调整吗？","like_count":2,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535535,"discussion_content":"可以的，老弟说的场景，其实挺普遍的，比如机器学习流水线就是这样，前期ETL做特征工程、样本工程，后期MLlib做模型训练。把应用分开就好了，每个应用内部，通过SparkConf来单独设置参数值，从而在应用层面对配置项做隔离设置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638458365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346955,"user_name":"Geek_2de9af","can_delete":false,"product_type":"c1","uid":2982764,"ip_address":"","ucode":"C951A8EB714FFD","user_header":"","comment_is_top":false,"comment_ctime":1653558565,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653558565","product_id":100090001,"comment_content":"老师关于D&#47;P ~ m&#47;c ,我有个问题向您请教下。像源文件数据2T，最后经过过滤、去重等一系列操作，生成结果数据3g，按照D&#47;P ~ m&#47;c设置，结果数据会都是很多小文件，这种该怎么办！","like_count":0},{"had_liked":false,"id":336677,"user_name":"Zhenng","can_delete":false,"product_type":"c1","uid":1859721,"ip_address":"","ucode":"48BB40DF266533","user_header":"https://static001.geekbang.org/account/avatar/00/1c/60/89/1f424b14.jpg","comment_is_top":false,"comment_ctime":1646287644,"is_pvip":true,"replies":[{"id":"123250","content":"是的，没错~","user_name":"作者回复","comment_id":336677,"uid":"1043100","ip_address":"","utype":1,"ctime":1646725177,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1646287644","product_id":100090001,"comment_content":"spark.executor.instances参数是在Yarn的Spark集群中使用的，在Standalone集群中executor的个数是由spark.cores.max&#47;spark.executor.cores 这两个参数决定的。我在Standalone集群中修改spark.executor.instances参数并不起作用","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555037,"discussion_content":"是的，没错~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646725177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330704,"user_name":"小李","can_delete":false,"product_type":"c1","uid":1903790,"ip_address":"","ucode":"30BD251EE1B1E2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/iaQgtbE98VGIVIyribdo6dgLOnaNoe7ZdUuPr60ibsduibscrzQCTzdW2AfL9nxwe8YlSK75gOnK3YbAJKTaFPxibdg/132","comment_is_top":false,"comment_ctime":1642126161,"is_pvip":false,"replies":[{"id":"120672","content":"D的话，可以精确估计，也即加载到内存后cache，然后通过执行计划来看实际内存消耗；另一种就是粗略估计，比较按照压缩比，大致算一个数字，也是可以的~","user_name":"作者回复","comment_id":330704,"uid":"1043100","ip_address":"","utype":1,"ctime":1642257169,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":1,"score":"1642126161","product_id":100090001,"comment_content":"对于D&#47;P ~ m&#47;c，其中对于p和c比较好量化，存储尺寸D（若是压缩存储）势必加载到内存会有膨胀的情况，这对于Execution Memory（m）的设置是否会不好把握（需要加载一下数据看一下实际占用的内存大小）？","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546256,"discussion_content":"D的话，可以精确估计，也即加载到内存后cache，然后通过执行计划来看实际内存消耗；另一种就是粗略估计，比较按照压缩比，大致算一个数字，也是可以的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642257169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324219,"user_name":"小新","can_delete":false,"product_type":"c1","uid":1690884,"ip_address":"","ucode":"DCAD04665E2CF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/04/e27b7803.jpg","comment_is_top":false,"comment_ctime":1638340929,"is_pvip":false,"replies":[{"id":"117759","content":"指的是数据集大小、并行度，与资源设置之间的关联关系，参考这个公式：<br>D&#47;P ~m&#47;c<br>有利于做到数据分区之间，task与task之间的负载均衡，从而为应用的执行性能打下很好的基础。<br>其中D是数据集大小，P是并行度，m是每个Executors的内存大小，c是CPU核数。公式的意思是说，单个数据分片，与单个task能拿到的内存，是在同一个数量级，是相匹配的。这样一来，task与数据量相匹配，应用整体的计算效率，就不会差到哪里去","user_name":"作者回复","comment_id":324219,"uid":"1043100","ip_address":"","utype":1,"ctime":1638458535,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638340929","product_id":100090001,"comment_content":"D&#47;P ~m&#47;c与前面讲的一般把并发数设置为集群cores的2~3倍，有何关联。一个是讲局部Executor, 一个是整体优化概念是吗？","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535539,"discussion_content":"指的是数据集大小、并行度，与资源设置之间的关联关系，参考这个公式：\nD/P ~m/c\n有利于做到数据分区之间，task与task之间的负载均衡，从而为应用的执行性能打下很好的基础。\n其中D是数据集大小，P是并行度，m是每个Executors的内存大小，c是CPU核数。公式的意思是说，单个数据分片，与单个task能拿到的内存，是在同一个数量级，是相匹配的。这样一来，task与数据量相匹配，应用整体的计算效率，就不会差到哪里去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638458535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315017,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1633659908,"is_pvip":false,"replies":[{"id":"114414","content":"不是，这是个配置项，可以配置到任意操作系统目录，用来改善Shuffle中间文件存储，以及RDD Cache磁盘存储。","user_name":"作者回复","comment_id":315017,"uid":"1043100","ip_address":"","utype":1,"ctime":1633962260,"user_name_real":"吴磊"}],"discussion_count":4,"race_medal":0,"score":"1633659908","product_id":100090001,"comment_content":"老师 问下spark.local.dir是spark安装目录下的文件夹吗","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527859,"discussion_content":"不是，这是个配置项，可以配置到任意操作系统目录，用来改善Shuffle中间文件存储，以及RDD Cache磁盘存储。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633962260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401938,"discussion_content":"我知道啊 我是想问这个参数指定的文件夹的绝对路径是什么 比如spark.local.dir=/tmp那这个tmp文件夹是在spark安装目录下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633769127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1796916,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ribDhYiajmzh6OQ4t1IM2anjyDeQj77NR4VhD0UBFh0TPdFCpfsib38U6icg3ba2UUicbVHRnrYbtWtq0L5PNXAZibQA/132","nickname":"曾先生","note":"","ucode":"1D719A3B2FB821","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409034,"discussion_content":"/tmp是操作系统下的目录","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635354470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":401938,"ip_address":""},"score":409034,"extra":""}]},{"author":{"id":2620662,"avatar":"","nickname":"Iwandy","note":"","ucode":"AD9E3701D8095C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401620,"discussion_content":"老师文章中说的很清楚了啊，是用来保存shuffle中间文件和RDD cache的 本地文件系统目录","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633700035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}