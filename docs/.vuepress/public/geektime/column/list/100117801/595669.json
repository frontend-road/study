{"id":595669,"title":"36｜Linux文件系统（二）：Linux如何存放文件？","content":"<p>你好，我是LMOS。</p><p>通过上节课的学习，我们已经对Ext3文件系统的结构非常了解了。这种了解究竟正确与否，还是需要通过写代码来验证。这节课我会带你读取Ext3文件系统中的文件，帮你加深对Ext3的理解。</p><p>我假定你已经学会了怎么建立一个虚拟硬盘并将其格式化为Ext3文件系统。如果记不清了，请回到<a href=\"https://time.geekbang.org/column/article/594921\">上节课</a>复习一下。课程的配套代码，你需要从<a href=\"https://gitee.com/lmos/Geek-time-computer-foundation/tree/master/lesson35~36\">这里</a>下载。</p><h2>打开虚拟硬盘</h2><p>想要从虚拟硬盘读取文件，首先要做的当然是打开虚拟硬盘。但我们的硬盘是个文件，所以这就变成了打开了一个文件，然后对文件进行读写就行。这些操作我们已经非常熟悉了，不过多展开。</p><p>这次我们不用read命令来读取虚拟硬盘文件数据，因为那样做还需要处理分配临时内容和文件定位的问题，操作比较繁琐。这里我们直接用mmap将整个文件映射到虚拟文件中，这样就能像访问内存一样很方便地访问文件了。</p><p>下面我们首先实现mmap映射读取文件这个功能，代码如下所示：</p><pre><code class=\"language-plain\">int init_in_hdfile()\n{\n\tstruct stat filestat;\n\tsize_t len = 0;\n\tvoid* buf = NULL;\n\tint fd = -1;\n\t// 打开虚拟硬盘文件\n\tfd = open(\"./hd.img\", O_RDWR, S_IRWXU|S_IRWXG|S_IRWXO);\n\tif(fd &lt; 0)\n\t{\n\t\tprintf(\"打开文件失败\\n\");\n\t\treturn -1;\n\t}\n\t// 获取文件信息，比如文件大小\n\tfstat(fd, &amp;filestat);\n\t// 获取文件大小\n\tlen = filestat.st_size;\n\t// 映射整个文件到进程的虚拟内存中\n\tbuf = mmap(NULL, len, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);\n\tif(buf == NULL) \n\t{\n\t\tprintf(\"映射文件失败\\n\");\n\t\treturn -2;\n\t}\n\t// 保存地址 长度大小 文件句柄 到全局变量\n\thdaddr = buf;\n\thdsize = len;\n\thdfilefd = fd;\n\treturn 0;\n}\n</code></pre><!-- [[[read_end]]] --><p>我们把打开硬盘文件以及将其映射到进程的虚拟内存中的功能，封装在init_in_hdfile函数中，并把映射返回的地址、文件长度、文件句柄保存到全局变量中，以便后面使用。</p><h2>获取Ext3文件系统超级块</h2><p>好，作为硬盘的文件已经完成映射，下面我们就来获取其中的Ext3文件系统超级块。</p><p>Ext3文件系统超级块固定存放在硬盘2号扇区的开始地址，硬盘扇区从0开始计数。我们需要把扇区号转换成文件中对应的偏移量，然后把这个偏移量转换成文件映射虚拟内存中的地址，才能访问到正确的数据。</p><p>下面我们开始写代码，如下所示：</p><pre><code class=\"language-plain\">// 将扇区号转换成文件映射的虚拟内存地址\nvoid* sector_to_addr(__u64 nr)\n{\n\treturn (void*)((__u64)hdaddr + (nr * SECTOR_SIZE));\n}\n// 将储存块号转换成文件映射的虚拟内存地址\nvoid* block_to_addr(__u64 nr)\n{\n\treturn (void*)((__u64)hdaddr + (nr * block_size));\n}\n// 获取超级块的地址\nstruct ext3_super_block* get_superblock()\n{\n\treturn (struct ext3_super_block*)sector_to_addr(2);\n}\n</code></pre><p>Ext3的超级级块结构，定义在工程目录下的ext3fs.h头文件中。代码的get_superblock函数中正是通过sector_to_addr函数对第二号扇区做了转换，之后还加上了映射文件的首地址，才能访问硬盘文件中的超级块。</p><p>我们可以调用dump_super_block函数，打印超级块的一些信息，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/59/af/597acba3c7e67366edceaef0bbaacaaf.jpg?wh=1920x1043\" alt=\"图片\"></p><p>从上面的截图，我们能知道文件系统的全局信息，也就是该文件系统有多少个储存块、inode、储存块大小，每个块组多少个储存块等相关信息。</p><h2>获取Ext3文件系统块组描述符表</h2><p>我们知道，Ext3文件系统将硬盘分区划分成一个个块组，在超级块的下一个储存块中保存着块组描述符表。如果超级块在0号储存块中，块组描述符表就是1号储存块中；如果超级块在1号储存块，块组描述符表就在2号储存块中。</p><p>一个块组中有储存块位图块，有inode节点位图块，也有inode节点表。要获取Ext3文件系统块组描述符表，我们只要知道它所在的储存块，就能读取其中的信息。</p><p>下面我们用代码实现这一步：</p><pre><code class=\"language-plain\">void get_group_table(struct ext3_group_desc** outgtable, int* outnr )\n{\n\t// 计算总块组数\n\tint gnr = super-&gt;s_blocks_count / super-&gt;s_blocks_per_group;\n\t// 获取块组描述表的首地址\n\tstruct ext3_group_desc* group = (struct ext3_group_desc* ) block_to_addr(2);\n\t*outgtable = group;\n\t*outnr = gnr;\n\treturn;\n}\n</code></pre><p>以上获取块组描述符表的函数，我们可以通过参数，返回两个块组描述符表的首地址和个数。</p><p>这里我已经为你写好了dump_all_group函数，你只要调用它，就可以直接获取块组描述符表信息了。</p><p>接下来我们看看打印出来的块组描述符表信息，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d6/19/d6b2f562841768c117e512e7e98b4a19.jpg?wh=1920x1043\" alt=\"图片\"></p><h2>获取Ext3文件系统根目录</h2><p>要想在文件系统中读取文件，就必须从其根目录开始，一层一层查找，直到找到文件的inode节点。</p><p>可是根目录在哪里呢？它就在第一个块组中inode节点表中的第2个inode，也就是根目录的inode节点，这个inode节点对应的数据块中储存的目录项数据。目录项可以指向一个目录，也可以指向一个文件，就这样一层层将目录或者文件组织起来了。</p><p>下面我们就来写代码实现这一步，如下所示：</p><pre><code class=\"language-plain\">// 获取根目录的inode的地址\nstruct ext3_inode* get_rootinode()\n{\n\t// 获取第1个块组描述符\n\tstruct ext3_group_desc* group = (struct ext3_group_desc* ) block_to_addr(2);\n\t// 获取该块组的inode表的块号\n\t__u32 ino = group-&gt;bg_inode_table;\n\t// 获取第二个inode\n\tstruct ext3_inode* inp = (struct ext3_inode* )((__u64)block_to_addr(ino)+(super-&gt;s_inode_size*1));\n\treturn inp;\n}\n// 获取根目录的开始的数据项的地址\nstruct ext3_dir_entry* get_rootdir()\n{\n\t// 获取根目录的inode\n\tstruct ext3_inode* inp = get_rootinode();\n\t// 返回根目录的inode中第一个数据块的地址，就是根目录的数据\n\treturn (struct ext3_dir_entry*)block_to_addr(inp-&gt;i_block[0]); \n}\n</code></pre><p>上面代码中有两个函数，一个是获取根目录inode的地址，有了它才能获取根目录的数据，由于我们的文件系统没有太多目录和文件，所以只用一块储存块就能放下所有的目录项目。</p><p>我已经为你写好了代码，用于显示根目录下所有的目录和文件，现在你只要调用dump_dirs函数可以了，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/5f/e2d8d5404ca3e5fdecc0daf73cd36b5f.jpg?wh=1920x1043\" alt=\"图片\"></p><p>由上可知，根目录下有5个子目录，分别是：.、…、lost+found、ext3fs、info。ext3fs和info是我主动建立的，用于测试。我还在ext3fs目录下建立了一个ext3.txt文件，并在其中写入了“Hello EXT3 File System!!”数据，下面我们就去读取它的文件数据。</p><h2>获取Ext3文件系统文件</h2><p>现在我们要读取Ext3文件系统中的/ext3fs/ext3.txt文件，但是我们必须要从根目录开始，查找ext3fs目录对应inode节点。然后在ext3fs目录数据中，找到ext3.txt文件对应的inode节点，读取该inode中直接或者间接地址块中块号对应的储存块，那里就是文件的真实数据。</p><p>目前我们已经能读取根目录的数据了，只要再操作两步，就可以查到ext3.txt对应的inode。</p><p>下面我们开始写代码，如下所示：</p><pre><code class=\"language-plain\">// 判定文件和目录\nstruct ext3_dir_entry* dir_file_is_ok(struct ext3_dir_entry* dire, __u8 type, char* name)\n{\n\t// 比较文件和目录类型和名称\n\tif(dire-&gt;file_type == type)\n\t{\n\t\tif(0 == strncmp(name, dire-&gt;name, dire-&gt;name_len))\n\t\t{\n\t\t\treturn dire;\n\t\t}\n\t}\n\treturn NULL;\n}\n// 查找一个块中的目录项\nstruct ext3_dir_entry* find_dirs_on_block(void* blk, size_t size, __u8 type, char* name)\n{\n\tstruct ext3_dir_entry* dire = NULL;\n\tvoid* end = (void*)((__u64)blk + size);\n\tfor (void* dir = blk; dir &lt; end;)\n\t{\n\t\t// 判定是否找到\n\t\tdire = dir_file_is_ok((struct ext3_dir_entry*)dir, type, name);\n\t\tif(dire != NULL)\n\t\t{\n\t\t\treturn dire;\n\t\t}\n\t\t// 获取下一个目录项地址\n\t\tdir = get_next_dir_addr((struct ext3_dir_entry*)dir); \n\t}\n\treturn NULL;\n}\n// 在一个目录文件中查找目录或者文件\nstruct ext3_dir_entry* find_dirs(struct ext3_inode* inode,  __u8 type, char* name)\n{\n\tstruct ext3_dir_entry* dir = NULL;\n\t__s64 filesize = inode-&gt;i_size;\n\t// 查找每个直接块\n\tfor (int i = 0; (i &lt; (EXT3_N_BLOCKS - 3))&amp;&amp;(filesize &gt; 0); i++, filesize -= (__s64)block_size)\n\t{\n\t\t// 查找一个储存块\n\t\tdir = find_dirs_on_block(block_to_addr(inode-&gt;i_block[i]), (size_t)filesize, type, name);\n\t\tif(dir != NULL)\n\t\t{\n\t\t\treturn dir;\n\t\t}\n\t}\n\treturn NULL;\n}\n</code></pre><p>上述代码中的三个函数的作用就是查找我们需要的目录和文件。具体是这样的：find_dirs用来查找整个inode；find_dirs_on_block用来查找inode中一个储存块；dir_file_is_ok用于判定每个查找到的目录项，如果找到就返回对应的地址，否则返回NULL。</p><p>下面我们在read_file函数中调用上述函数，如下所示：</p><pre><code class=\"language-plain\">void read_file()\n{\n\tstruct ext3_dir_entry* dir = NULL;\n\t// 查找ext3fs目录\n\tdir = find_dirs(rootinode, 2, \"ext3fs\");\n\tif(dir == NULL)\n\t{\n\t\tprintf(\"没有找到ext3fs目录\\n\");\n\t\treturn;\n\t}\n\t// 显示ext3fs目录的目录项信息\n\tdump_one_dir(dir);\n\t// 查找ext3fs目录下的ext3.txt文件\n\tdir = find_dirs(get_inode(dir-&gt;inode), 1, \"ext3.txt\");\n\tif(dir == NULL)\n\t{\n\t\tprintf(\"没有找到ext3.txt\\n\");\n\t\treturn;\n\t}\n\t// 显示ext3.txt文件的目录项信息\n\tdump_one_dir(dir);\n\treturn;\n}\n</code></pre><p>以上代码的作用是这样的：第一步查找ext3fs目录，第二步查找ext3fs目录下的ext3.txt文件，并把它们相应的信息显示出来。<br>\n我们把程序运行一下，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/d4/e9270cbc54ee3e765c3e0096de7a09d4.jpg?wh=1920x1043\" alt=\"图片\"></p><p>上图中已经显示了ext3.txt文件的inode号，根据这个inode号，我们就能找到对应inode节点，下面我们进一步写代码读取文件中的数据。代码如下所示：</p><pre><code class=\"language-plain\">void dump_inode_data(struct ext3_inode* inode)\n{\n\t// 获取文件大小\n\t__s64 filesize = inode-&gt;i_size;\n\tprintf(\"----------------------------------------\\n\");\n\t// 展示文件inode的元信息\n\tdump_inode(inode);\n\tprintf(\"----------------------------------------\\n\");\n\tfor (int i = 0; (i &lt; (EXT3_N_BLOCKS - 3))&amp;&amp;(filesize &gt; 0); i++, filesize -= (__s64)block_size)\n\t{\n\t\t// 读取并打印每个储存块中数据内部\n\t\tprintf(\"%s\\n\", (char*)block_to_addr(inode-&gt;i_block[i]));\n\t}\n\treturn;\n}\n\nvoid read_file()\n{\n\tstruct ext3_dir_entry* dir = NULL;\n\t// 查找ext3fs目录\n\tdir = find_dirs(rootinode, 2, \"ext3fs\");\n\tif(dir == NULL)\n\t{\n\t\tprintf(\"没有找到ext3fs目录\\n\");\n\t\treturn;\n\t}\n\t// 显示ext3fs目录的目录项信息\n\tdump_one_dir(dir);\n\t// 查找ext3fs目录下的ext3.txt文件\n\tdir = find_dirs(get_inode(dir-&gt;inode), 1, \"ext3.txt\");\n\tif(dir == NULL)\n\t{\n\t\tprintf(\"没有找到ext3.txt\\n\");\n\t\treturn;\n\t}\n\t// 显示ext3.txt文件的目录项信息\n\tdump_one_dir(dir);\n\t// 显示ext3.txt文件的内容信息\n\tdump_inode_data(get_inode(dir-&gt;inode));\n\treturn;\n}\n</code></pre><p>在上面的dump_inode_data函数中，我之所以能用printf打印文件内存，是因为我清楚ext3.txt文件存放写入的是文本数据。如果是其它别的数据就不能这样做了。<br>\n除了打印文件内容，我们还展示了文件元信息。让我们运行一下，看看结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/9f/e0/9f9a8aa170ed3b5b411de136c2cfffe0.jpg?wh=1920x1043\" alt=\"图片\"></p><p>从上图，我们已经清楚地看到文件大小、创建时间、所属用户、占用哪个储存块，最后还打印出了文件的内容——Hello EXT3 File System!!，这与我们之前写入的数据分毫不差。到这里，我们已经验证了Ext3文件系统结构，也完成了读文件信息的各类实践。</p><h2>重点回顾</h2><p>只要认真学完这两节课，我相信你对Ext3文件系统已经有了更深入的了解，硬件上的数据修改是完全可以做到的，成为数据修复大师也指日可待。不过，不能利用这些知识去干坏事哦。</p><p>今天，为了验证上节课学到的一系列Ext3结构，我们通过写代码的方式，在文件系统中读取了文件数据。我们通过获取超级块、块组的描述符表，一步步完整地把文件内容读取出来，打印在屏幕上。对比之下，这正好跟我们先前输入的内容是一样的，也就验证了Ext3文件系统结构。</p><p>这节课的导图如下所示，供你参考：</p><p><img src=\"https://static001.geekbang.org/resource/image/11/aa/11c754199144744496f3ee827777yyaa.jpg?wh=1920x1426\" alt=\"图片\"></p><h2>思考题</h2><p>请问 inode号 是对应于硬盘分区全局 还是相对于块组的？</p><p>进入下个章节之前，希望你可以留言说说学习的感受，或者向我提问。如果觉得课程还不错，别忘了分享给身边更多朋友。</p>","neighbors":{"left":{"article_title":"35｜Linux文件系统（一）：Linux如何存放文件？","id":594921},"right":{"article_title":"37｜浏览器原理（一）：浏览器为什么要用多进程模型？","id":596700}},"comments":[{"had_liked":false,"id":360703,"user_name":"LockedX","can_delete":false,"product_type":"c1","uid":1683139,"ip_address":"湖北","ucode":"19B82B910FC67F","user_header":"https://static001.geekbang.org/account/avatar/00/19/ae/c3/d930693b.jpg","comment_is_top":false,"comment_ctime":1666766959,"is_pvip":false,"replies":[{"id":"131301","content":"66666","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1667033320,"ip_address":"湖北","comment_id":360703,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5961734255","product_id":100117801,"comment_content":"可以通过innode节点来恢复数据，innode节点在发生变化的时候会记录在日志文件中，如果存储改文件的快还没有被覆盖，就可以通过日志文件来恢复innode节点这样文件就恢复了。老师放心，我比较老实不会去做坏事的，嘿嘿……","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592018,"discussion_content":"66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667033320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360543,"user_name":"TableBear","can_delete":false,"product_type":"c1","uid":1673990,"ip_address":"湖北","ucode":"A2C0562EEA2725","user_header":"https://static001.geekbang.org/account/avatar/00/19/8b/06/fb3be14a.jpg","comment_is_top":false,"comment_ctime":1666625344,"is_pvip":true,"replies":[{"id":"131308","content":"文件系统规定的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1667034656,"ip_address":"湖北","comment_id":360543,"utype":1}],"discussion_count":1,"race_medal":4,"score":"5961592640","product_id":100117801,"comment_content":"有几个疑问想请教一下老师：<br>1. 根目录的目录项存放在inode节点列表的第二个inode这是规范吗？第一个inode存放什么呢？<br>2. 如果目录项个数超过一个inode能表示的范围是不是像数据节点inode那样使用一级间接存储块、二级间接存储卡以及三级呢？","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592027,"discussion_content":"文件系统规定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667034656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360431,"user_name":"苏流郁宓","can_delete":false,"product_type":"c1","uid":2729645,"ip_address":"湖北","ucode":"AD07BD9CE03047","user_header":"https://static001.geekbang.org/account/avatar/00/29/a6/ad/e65aec4c.jpg","comment_is_top":false,"comment_ctime":1666573714,"is_pvip":false,"replies":[{"id":"131311","content":"嗯嗯","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1667034730,"ip_address":"湖北","comment_id":360431,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5961541010","product_id":100117801,"comment_content":"inode相对于块组的啊","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592030,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667034730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}