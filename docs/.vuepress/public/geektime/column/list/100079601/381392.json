{"id":381392,"title":"06 | 目录结构设计：如何组织一个可维护、可扩展的代码目录？","content":"<p>你好，我是孔令飞。今天我们来聊聊如何设计代码的目录结构。</p><p>目录结构是一个项目的门面。很多时候，根据目录结构就能看出开发者对这门语言的掌握程度。所以，在我看来，遵循一个好的目录规范，把代码目录设计得可维护、可扩展，甚至比文档规范、Commit 规范来得更加重要。</p><p>那具体怎么组织一个好的代码目录呢？在今天这一讲，我会从 2 个维度来解答这个问题。</p><p>首先，我会介绍组织目录的一些基本原则，这些原则可以指导你去组织一个好的代码目录。然后，我会向你介绍一些具体的、优秀的目录结构。你可以通过学习它们，提炼总结出你自己的目录结构设计方法，或者你也可以直接用它们作为你的目录结构规范，也就是说结构即规范。</p><h2>如何规范目录？</h2><p>想设计好一个目录结构，我们首先要知道一个好的目录长什么样，也就是目录规范中包含哪些内容。</p><p>目录规范，通常是指我们的项目由哪些目录组成，每个目录下存放什么文件、实现什么功能，以及各个目录间的依赖关系是什么等。在我看来，一个好的目录结构至少要满足以下几个要求。</p><ul>\n<li><strong>命名清晰</strong>：目录命名要清晰、简洁，不要太长，也不要太短，目录名要能清晰地表达出该目录实现的功能，并且目录名最好用单数。一方面是因为单数足以说明这个目录的功能，另一方面可以统一规范，避免单复混用的情况。</li>\n<li><strong>功能明确</strong>：一个目录所要实现的功能应该是明确的、并且在整个项目目录中具有很高的辨识度。也就是说，当需要新增一个功能时，我们能够非常清楚地知道把这个功能放在哪个目录下。</li>\n<li><strong>全面性</strong>：目录结构应该尽可能全面地包含研发过程中需要的功能，例如文档、脚本、源码管理、API 实现、工具、第三方包、测试、编译产物等。</li>\n<li><strong>可预测性</strong>：项目规模一定是从小到大的，所以一个好的目录结构应该能够在项目变大时，仍然保持之前的目录结构。</li>\n<li><strong>可扩展性</strong>：每个目录下存放了同类的功能，在项目变大时，这些目录应该可以存放更多同类功能。举个例子，有如下目录结构：</li>\n</ul><!-- [[[read_end]]] --><pre><code>$ ls internal/\napp  pkg  README.md\n</code></pre><p>internal 目录用来实现内部代码，app 和 pkg 目录下的所有文件都属于内部代码。如果 internal 目录不管项目大小，永远只有 2 个文件 app 和 pkg，那么就说明 internal 目录是不可扩展的。</p><p>相反，如果 internal 目录下直接存放每个组件的源码目录（一个项目可以由一个或多个组件组成），当项目变大、组件增多时，可以将新增加的组件代码存放到 internal 目录，这时 internal 目录就是可扩展的。例如：</p><pre><code>$ ls internal/\napiserver  authzserver  iamctl  pkg  pump  watcher\n</code></pre><p>刚才我讲了目录结构的总体规范，现在来看 2 个具体的、可以作为目录规范的目录结构。</p><p>通常，<strong>根据功能，我们可以将目录结构分为结构化目录结构和平铺式目录结构两种</strong>。结构化目录结构主要用在 Go 应用中，相对来说比较复杂；而平铺式目录结构主要用在 Go 包中，相对来说比较简单。</p><p>因为平铺式目录结构比较简单，所以接下来先介绍它。</p><h2>平铺式目录结构</h2><p>一个 Go 项目可以是一个应用，也可以是一个代码框架/库，当项目是代码框架/库时，比较适合采用平铺式目录结构。</p><p>平铺方式就是在项目的根目录下存放项目的代码，整个目录结构看起来更像是一层的，这种方式在很多框架/库中存在，使用这种方式的好处是引用路径长度明显减少，比如 <code>github.com/marmotedu/log/pkg/options</code>，可缩短为 <code>github.com/marmotedu/log/options</code>。例如 log 包 <code>github.com/golang/glog</code> 就是平铺式的，目录如下：</p><pre><code>$ ls glog/\nglog_file.go  glog.go  glog_test.go  LICENSE  README\n</code></pre><p>接下来，我们来学习结构化目录结构，它比较适合 Go 应用，也比较复杂。</p><h2>结构化目录结构</h2><p>当前 Go 社区比较推荐的结构化目录结构是 <a href=\"https://github.com/golang-standards/project-layout\">project-layout</a> 。虽然它并不是官方和社区的规范，但因为组织方式比较合理，被很多 Go 开发人员接受。所以，我们可以把它当作是一个事实上的规范。</p><p>首先，我们来看下在开发一个 Go 项目时，通常应该包含的功能。这些功能内容比较多，我放在了 GitHub 的 <a href=\"https://github.com/marmotedu/geekbang-go/blob/master/Go%E9%A1%B9%E7%9B%AE%E9%80%9A%E5%B8%B8%E5%8C%85%E5%90%AB%E7%9A%84%E5%8A%9F%E8%83%BD.md\">Go项目通常包含的功能</a> 里，我们设计的目录结构应该能够包含这些功能。</p><p>我结合 project-layout，以及上面列出的 Go 项目常见功能，总结出了一套 Go 的代码结构组织方式，也就是 IAM 项目使用的目录结构。这种方式保留了 project-layout 优势的同时，还加入了一些我个人的理解，希望为你提供一个拿来即用的目录结构规范。</p><p>接下来，我们一起看看这门课的实战项目所采用的 Go 目录结构。因为实战项目目录比较多，这里只列出了一些重要的目录和文件，你可以快速浏览以加深理解。</p><pre><code>├── api\n│   ├── openapi\n│   └── swagger\n├── build\n│   ├── ci\n│   ├── docker\n│   │   ├── iam-apiserver\n│   │   ├── iam-authz-server\n│   │   └── iam-pump\n│   ├── package\n├── CHANGELOG\n├── cmd\n│   ├── iam-apiserver\n│   │   └── apiserver.go\n│   ├── iam-authz-server\n│   │   └── authzserver.go\n│   ├── iamctl\n│   │   └── iamctl.go\n│   └── iam-pump\n│       └── pump.go\n├── configs\n├── CONTRIBUTING.md\n├── deployments\n├── docs\n│   ├── devel\n│   │   ├── en-US\n│   │   └── zh-CN\n│   ├── guide\n│   │   ├── en-US\n│   │   └── zh-CN\n│   ├── images\n│   └── README.md\n├── examples\n├── githooks\n├── go.mod\n├── go.sum\n├── init\n├── internal\n│   ├── apiserver\n│   │   ├── api\n│   │   │   └── v1\n│   │   │       └── user\n│   │   ├── apiserver.go\n│   │   ├── options\n│   │   ├── service\n│   │   ├── store\n│   │   │   ├── mysql\n│   │   │   ├── fake\n│   │   └── testing\n│   ├── authzserver\n│   │   ├── api\n│   │   │   └── v1\n│   │   │       └── authorize\n│   │   ├── options\n│   │   ├── store\n│   │   └── testing\n│   ├── iamctl\n│   │   ├── cmd\n│   │   │   ├── completion\n│   │   │   ├── user\n│   │   └── util\n│   ├── pkg\n│   │   ├── code\n│   │   ├── options\n│   │   ├── server\n│   │   ├── util\n│   │   └── validation\n├── LICENSE\n├── Makefile\n├── _output\n│   ├── platforms\n│   │   └── linux\n│   │       └── amd64\n├── pkg\n│   ├── util\n│   │   └── genutil\n├── README.md\n├── scripts\n│   ├── lib\n│   ├── make-rules\n├── test\n│   ├── testdata\n├── third_party\n│   └── forked\n└── tools\n</code></pre><p>看到这一长串目录是不是有些晕？没关系，这里我们一起给这个大目录分下类，然后再具体看看每一类目录的作用，你就清楚了。</p><p>在我看来，一个 Go 项目包含 3 大部分：Go 应用 、项目管理和文档。所以，我们的项目目录也可以分为这 3 大类。同时，Go 应用又贯穿开发阶段、测试阶段和部署阶段，相应的应用类的目录，又可以按开发流程分为更小的子类。当然了，这些是我建议的目录，Go 项目目录中还有一些不建议的目录。所以整体来看，我们的目录结构可以按下图所示的方式来分类：</p><p><img src=\"https://static001.geekbang.org/resource/image/94/a3/94e521c6eb884096ea107fc4c36f30a3.png?wh=2248x1832\" alt=\"\"></p><p>接下来你就先专心跟着我走一遍每个目录、每个文件的作用，等你下次组织代码目录的时候，可以再回过头来看看，那时你一定会理解得更深刻。</p><h3>Go 应用 ：主要存放前后端代码</h3><p>首先，我们来说说开发阶段所涉及到的目录。我们开发的代码包含前端代码和后端代码，可以分别存放在前端目录和后端目录中。</p><ol>\n<li>/web</li>\n</ol><p>前端代码存放目录，主要用来存放Web静态资源，服务端模板和单页应用（SPAs）。</p><ol start=\"2\">\n<li>/cmd</li>\n</ol><p>一个项目有很多组件，可以把组件 main 函数所在的文件夹统一放在<code>/cmd</code> 目录下，例如：</p><pre><code>$ ls cmd/\ngendocs  geniamdocs  genman  genswaggertypedocs  genyaml  iam-apiserver  iam-authz-server  iamctl  iam-pump\n\n$ ls cmd/iam-apiserver/\napiserver.go\n</code></pre><p>每个组件的目录名应该跟你期望的可执行文件名是一致的。这里要保证 <code>/cmd/&lt;组件名&gt;</code> 目录下不要存放太多的代码，如果你认为代码可以导入并在其他项目中使用，那么它应该位于 /pkg 目录中。如果代码不是可重用的，或者你不希望其他人重用它，请将该代码放到 /internal 目录中。</p><ol start=\"3\">\n<li>/internal</li>\n</ol><p>存放<strong>私有应用</strong>和库代码。如果一些代码，你不希望在其他应用和库中被导入，可以将这部分代码放在<code>/internal</code> 目录下。</p><p>在引入其它项目 internal 下的包时，Go 语言会在编译时报错：</p><pre><code>An import of a path containing the element “internal” is disallowed\nif the importing code is outside the tree rooted at the parent of the\n&quot;internal&quot; directory.\n</code></pre><p>可以通过 Go 语言本身的机制来约束其他项目 import 项目内部的包。<code>/internal</code> 目录建议包含如下目录：</p><ul>\n<li>/internal/apiserver：该目录中存放真实的应用代码。这些应用的共享代码存放在<code>/internal/pkg</code> 目录下。</li>\n<li>/internal/pkg：存放项目内可共享，项目外不共享的包。这些包提供了比较基础、通用的功能，例如工具、错误码、用户验证等功能。</li>\n</ul><p>我的建议是，一开始将所有的共享代码存放在/<code>internal/pkg</code> 目录下，当该共享代码做好了对外开发的准备后，再转存到<code>/pkg</code>目录下。</p><p>下面，我详细介绍下 IAM 项目的 <code>internal</code>目录 ，来加深你对 <code>internal</code> 的理解，目录结构如下：</p><pre><code>├── apiserver\n│   ├── api\n│   │   └── v1\n│   │       └── user\n│   ├── options\n│   ├── config\n│   ├── service\n│   │   └── user.go\n│   ├── store\n│   │   ├── mysql\n│   │   │   └── user.go\n│   │   ├── fake\n│   └── testing\n├── authzserver\n│   ├── api\n│   │   └── v1\n│   ├── options\n│   ├── store\n│   └── testing\n├── iamctl\n│   ├── cmd\n│   │   ├── cmd.go\n│   │   ├── info\n└── pkg\n    ├── code\n    ├── middleware\n    ├── options\n    └── validation\n</code></pre><p>/internal 目录大概分为 3 类子目录：</p><ul>\n<li>/internal/pkg：内部共享包存放的目录。</li>\n<li>/internal/authzserver、/internal/apiserver、/internal/pump、/internal/iamctl：应用目录，里面包含应用程序的实现代码。</li>\n<li>/internal/iamctl：对于一些大型项目，可能还会需要一个客户端工具。</li>\n</ul><p>在每个应用程序内部，也会有一些目录结构，这些目录结构主要根据功能来划分：</p><ul>\n<li>/internal/apiserver/api/v1：HTTP API 接口的具体实现，主要用来做 HTTP 请求的解包、参数校验、业务逻辑处理、返回。注意这里的业务逻辑处理应该是轻量级的，如果业务逻辑比较复杂，代码量比较多，建议放到 /internal/apiserver/service 目录下。该源码文件主要用来串流程。</li>\n<li>/internal/apiserver/options：应用的 command flag。</li>\n<li>/internal/apiserver/config：根据命令行参数创建应用配置。</li>\n<li>/internal/apiserver/service：存放应用复杂业务处理代码。</li>\n<li>/internal/apiserver/store/mysql：一个应用可能要持久化的存储一些数据，这里主要存放跟数据库交互的代码，比如 Create、Update、Delete、Get、List 等。</li>\n</ul><p>/internal/pkg 目录存放项目内可共享的包，通常可以包含如下目录：</p><ul>\n<li>/internal/pkg/code：项目业务 Code 码。</li>\n<li>/internal/pkg/validation：一些通用的验证函数。</li>\n<li>/internal/pkg/middleware：HTTP 处理链。</li>\n</ul><ol start=\"4\">\n<li>/pkg</li>\n</ol><p>/pkg 目录是 Go 语言项目中非常常见的目录，我们几乎能够在所有知名的开源项目（非框架）中找到它的身影，例如 Kubernetes、Prometheus、Moby、Knative 等。</p><p>该目录中存放可以被外部应用使用的代码库，其他项目可以直接通过 import 导入这里的代码。所以，我们在将代码库放入该目录时一定要慎重。</p><ol start=\"5\">\n<li>/vendor</li>\n</ol><p>项目依赖，可通过 go mod vendor 创建。需要注意的是，如果是一个 Go 库，不要提交 vendor 依赖包。</p><ol start=\"6\">\n<li>/third_party</li>\n</ol><p>外部帮助工具，分支代码或其他第三方应用（例如Swagger UI）。比如我们 fork 了一个第三方 go 包，并做了一些小的改动，我们可以放在目录/third_party/forked 下。一方面可以很清楚的知道该包是 fork 第三方的，另一方面又能够方便地和 upstream 同步。</p><h3>Go 应用：主要存放测试相关的文件和代码</h3><p>接着，我们再来看下测试阶段相关的目录，它可以存放测试相关的文件。</p><ol start=\"7\">\n<li>/test</li>\n</ol><p>用于存放其他外部测试应用和测试数据。/test 目录的构建方式比较灵活：对于大的项目，有一个数据子目录是有意义的。例如，如果需要 Go 忽略该目录中的内容，可以使用/test/data 或/test/testdata 目录。</p><p>需要注意的是，<strong>Go 也会忽略以“.”或 “_” 开头的目录或文件。</strong>这样在命名测试数据目录方面，可以具有更大的灵活性。</p><h3>Go 应用：存放跟应用部署相关的文件</h3><p>接着，我们再来看下与部署阶段相关的目录，这些目录可以存放部署相关的文件。</p><ol start=\"8\">\n<li>/configs</li>\n</ol><p>这个目录用来配置文件模板或默认配置。例如，可以在这里存放 confd 或 consul-template 模板文件。这里有一点要注意，配置中不能携带敏感信息，这些敏感信息，我们可以用占位符来替代，例如：</p><pre><code>apiVersion: v1    \nuser:    \n  username: ${CONFIG_USER_USERNAME} # iam 用户名    \n  password: ${CONFIG_USER_PASSWORD} # iam 密码\n</code></pre><ol start=\"9\">\n<li>/deployments</li>\n</ol><p>用来存放 Iaas、PaaS 系统和容器编排部署配置和模板（Docker-Compose，Kubernetes/Helm，Mesos，Terraform，Bosh）。在一些项目，特别是用 Kubernetes 部署的项目中，这个目录可能命名为 deploy。</p><p>为什么要将这类跟 Kubernetes 相关的目录放到目录结构中呢？主要是因为当前软件部署基本都在朝着容器化的部署方式去演进。</p><ol start=\"10\">\n<li>/init</li>\n</ol><p>存放初始化系统（systemd，upstart，sysv）和进程管理配置文件（runit，supervisord）。比如 sysemd 的 unit 文件。这类文件，在非容器化部署的项目中会用到。</p><h3>项目管理：存放用来管理 Go 项目的各类文件</h3><p>在做项目开发时，还有些目录用来存放项目管理相关的文件，这里我们一起来看下。</p><ol start=\"11\">\n<li>/Makefile</li>\n</ol><p>虽然 Makefile 是一个很老的项目管理工具，但它仍然是最优秀的项目管理工具。所以，一个 Go 项目在其根目录下应该有一个 Makefile 工具，用来对项目进行管理，Makefile 通常用来执行静态代码检查、单元测试、编译等功能。其他常见功能，你可以参考这里： <a href=\"https://github.com/marmotedu/geekbang-go/blob/master/Makefile%E5%B8%B8%E8%A7%81%E7%AE%A1%E7%90%86%E5%86%85%E5%AE%B9.md\">Makefile常见管理内容</a> 。</p><p>我还有一条建议：直接执行 make 时，执行如下各项 <code>format -&gt; lint -&gt; test -&gt; build</code>，如果是有代码生成的操作，还可能需要首先生成代码 <code>gen -&gt; format -&gt; lint -&gt; test -&gt; build</code>。</p><p>在实际开发中，我们可以将一些重复性的工作自动化，并添加到 Makefile 文件中统一管理。</p><ol start=\"12\">\n<li>/scripts</li>\n</ol><p>该目录主要用来存放脚本文件，实现构建、安装、分析等不同功能。不同项目，里面可能存放不同的文件，但通常可以考虑包含以下 3 个目录：</p><ul>\n<li>/scripts/make-rules：用来存放 makefile 文件，实现/Makefile 文件中的各个功能。Makefile 有很多功能，为了保持它的简洁，我建议你将各个功能的具体实现放在<code>/scripts/make-rules</code> 文件夹下。</li>\n<li>/scripts/lib：shell 库，用来存放 shell 脚本。一个大型项目中有很多自动化任务，比如发布、更新文档、生成代码等，所以要写很多 shell 脚本，这些 shell 脚本会有一些通用功能，可以抽象成库，存放在<code>/scripts/lib</code> 目录下，比如 logging.sh，util.sh 等。</li>\n<li>/scripts/install：如果项目支持自动化部署，可以将自动化部署脚本放在此目录下。如果部署脚本简单，也可以直接放在/scripts 目录下。</li>\n</ul><p>另外，shell 脚本中的函数名，建议采用语义化的命名方式，例如 <code>iam::log::info</code> 这种语义化的命名方式，可以使调用者轻松的辨别出函数的功能类别，便于函数的管理和引用。在Kubernetes 的脚本中，就大量采用了这种命名方式。</p><ol start=\"13\">\n<li>/build</li>\n</ol><p>这里存放安装包和持续集成相关的文件。这个目录下有 3 个大概率会使用到的目录，在设计目录结构时可以考虑进去。</p><ul>\n<li>/build/package：存放容器（Docker）、系统（deb, rpm, pkg）的包配置和脚本。</li>\n<li>/build/ci：存放 CI（travis，circle，drone）的配置文件和脚本。</li>\n<li>/build/docker：存放子项目各个组件的 Dockerfile 文件。</li>\n</ul><ol start=\"14\">\n<li>/tools</li>\n</ol><p>存放这个项目的支持工具。这些工具可导入来自/pkg 和/internal 目录的代码。</p><ol start=\"15\">\n<li>/githooks</li>\n</ol><p>Git 钩子。比如，我们可以将 commit-msg 存放在该目录。</p><ol start=\"16\">\n<li>/assets</li>\n</ol><p>项目使用的其他资源(图片、CSS、JavaScript 等)。</p><ol start=\"17\">\n<li>/website</li>\n</ol><p>如果你不使用 GitHub 页面，那么可以在这里放置项目网站相关的数据。</p><h3>文档：主要存放项目的各类文档</h3><p>一个项目，也包含一些文档，这些文档有很多类别，也需要一些目录来存放这些文档，这里我们也一起来看下。</p><ol start=\"18\">\n<li>/README.md</li>\n</ol><p>项目的 README 文件一般包含了项目的介绍、功能、快速安装和使用指引、详细的文档链接以及开发指引等。有时候 README 文档会比较长，为了能够快速定位到所需内容，需要添加 markdown toc 索引，可以借助工具 <a href=\"https://github.com/nochso/tocenize\">tocenize</a> 来完成索引的添加。</p><p>这里还有个建议，前面我们也介绍过 README 是可以规范化的，所以这个 README 文档，可以通过脚本或工具来自动生成。</p><ol start=\"19\">\n<li>/docs</li>\n</ol><p>存放设计文档、开发文档和用户文档等（除了 godoc 生成的文档）。推荐存放以下几个子目录：</p><ul>\n<li>/docs/devel/{en-US,zh-CN}：存放开发文档、hack 文档等。</li>\n<li>/docs/guide/{en-US,zh-CN}: 存放用户手册，安装、quickstart、产品文档等，分为中文文档和英文文档。</li>\n<li>/docs/images：存放图片文件。</li>\n</ul><ol start=\"20\">\n<li>/CONTRIBUTING.md</li>\n</ol><p>如果是一个开源就绪的项目，最好还要有一个 CONTRIBUTING.md 文件，用来说明如何贡献代码，如何开源协同等等。CONTRIBUTING.md 不仅能够规范协同流程，还能降低第三方开发者贡献代码的难度。</p><ol start=\"21\">\n<li>/api</li>\n</ol><p>/api 目录中存放的是当前项目对外提供的各种不同类型的 API 接口定义文件，其中可能包含类似 <code>/api/protobuf-spec</code>、<code>/api/thrift-spec</code>、<code>/api/http-spec</code>、<code>openapi</code>、<code>swagger</code> 的目录，这些目录包含了当前项目对外提供和依赖的所有 API 文件。例如，如下是 IAM 项目的/api 目录：</p><pre><code>├── openapi/\n│   └── README.md\n└── swagger/\n    ├── docs/\n    ├── README.md\n    └── swagger.yaml\n</code></pre><p>二级目录的主要作用，就是在一个项目同时提供了多种不同的访问方式时，可以分类存放。用这种方式可以避免潜在的冲突，也能让项目结构更加清晰。</p><ol start=\"22\">\n<li>/LICENSE</li>\n</ol><p>版权文件可以是私有的，也可以是开源的。常用的开源协议有：Apache 2.0、MIT、BSD、GPL、Mozilla、LGPL。有时候，公有云产品为了打造品牌影响力，会对外发布一个本产品的开源版本，所以在项目规划初期最好就能规划下未来产品的走向，选择合适的 LICENSE。</p><p>为了声明版权，你可能会需要将 LICENSE 头添加到源码文件或者其他文件中，这部分工作可以通过工具实现自动化，推荐工具： <a href=\"https://github.com/marmotedu/addlicense\">addlicense</a> 。</p><p>当代码中引用了其它开源代码时，需要在 LICENSE 中说明对其它源码的引用，这就需要知道代码引用了哪些源码，以及这些源码的开源协议，可以借助工具来进行检查，推荐工具： <a href=\"https://github.com/ribice/glice\">glice</a> 。至于如何说明对其它源码的引用，大家可以参考下 IAM 项目的 <a href=\"https://github.com/marmotedu/iam/blob/master/LICENSE\">LICENSE</a> 文件。</p><ol start=\"23\">\n<li>/CHANGELOG</li>\n</ol><p>当项目有更新时，为了方便了解当前版本的更新内容或者历史更新内容，需要将更新记录存放到 CHANGELOG 目录。编写 CHANGELOG 是一个复杂、繁琐的工作，我们可以结合 <a href=\"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines\">Angular规范</a> 和 <a href=\"https://github.com/git-chglog/git-chglog\">git-chglog</a> 来自动生成 CHANGELOG。</p><ol start=\"24\">\n<li>/examples</li>\n</ol><p>存放应用程序或者公共包的示例代码。这些示例代码可以降低使用者的上手门槛。</p><h3>不建议的目录</h3><p>除了上面这些我们建议的目录，在 Go 项目中，还有一些目录是不建议包含的，这些目录不符合 Go 的设计哲学。</p><ol>\n<li>/src/</li>\n</ol><p>一些开发语言，例如 Java 项目中会有 src 目录。在 Java 项目中， src 目录是一种常见的模式，但在 Go 项目中，不建议使用 src 目录。</p><p>其中一个重要的原因是：在默认情况下，Go 语言的项目都会被放置到<code>$GOPATH/src</code> 目录下。这个目录中存放着所有代码，如果我们在自己的项目中使用<code>/src</code> 目录，这个包的导入路径中就会出现两个 src，例如：</p><pre><code>$GOPATH/src/github.com/marmotedu/project/src/main.go\n</code></pre><p>这样的目录结构看起来非常怪。</p><ol start=\"2\">\n<li>xxs/</li>\n</ol><p>在 Go 项目中，要避免使用带复数的目录或者包。建议统一使用单数。</p><h2>一些建议</h2><p>上面介绍的目录结构包含很多目录，但一个小型项目用不到这么多目录。对于小型项目，可以考虑先包含 cmd、pkg、internal 3 个目录，其他目录后面按需创建，例如：</p><pre><code>$ tree --noreport -L 2 tms\ntms\n├── cmd\n├── internal\n├── pkg\n└── README.md\n</code></pre><p>另外，在设计目录结构时，一些空目录无法提交到 Git 仓库中，但我们又想将这个空目录上传到 Git 仓库中，以保留目录结构。这时候，可以在空目录下加一个 <code>.keep</code> 文件，例如：</p><pre><code>$ ls -A build/ci/ \n.keep\n</code></pre><h2>总结</h2><p>今天我们主要学习了怎么设计代码的目录结构。先讲了目录结构的设计思路：在设计目录结构时，要确保目录名是清晰的，功能是明确的，并且设计的目录结构是可扩展的。</p><p>然后，我们一起学习了 2 种具体的目录结构：结构化目录结构和平铺式目录结构。结构化目录结构比较适合 Go 应用，平铺式目录结构比较适合框架/库。因为这2种目录结构组织比较合理，可以把它们作为目录规范来使用。</p><p>你还可以结合实战项目的例子，来加深对这两种目录结构的理解。对于结构化目录结构，你可以参考这门课 <a href=\"https://github.com/marmotedu/iam\">IAM</a> 实战项目的目录结构；对于平铺式的目录结构，你可以参考这门课实战部分设计的 <a href=\"https://github.com/marmotedu/log\">log</a> 包。</p><h2>课后练习</h2><ol>\n<li>试着用本节课描述的目录规范，重构下你当前的项目，并看下有啥优缺点。</li>\n<li>思考下你工作中遇到过哪些比较好的目录结构，它们有什么优点和可以改进的地方。</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下一讲见。</p>","neighbors":{"left":{"article_title":"05 | 规范设计（下）：commit 信息风格迥异、难以阅读，如何规范？","id":380989},"right":{"article_title":"07 | 工作流设计：如何设计合理的多人开发模式？","id":382342}},"comments":[{"had_liked":false,"id":296697,"user_name":"Alery","can_delete":false,"product_type":"c1","uid":1156557,"ip_address":"","ucode":"08F3F49181E67B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/cd/3aff5d57.jpg","comment_is_top":false,"comment_ctime":1623118829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"96112399341","product_id":100079601,"comment_content":"好文，这是目前看过讲的最明白的go项目目录结构文章","like_count":22},{"had_liked":false,"id":297580,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1623653114,"is_pvip":false,"replies":[{"id":"108128","content":"这个问题问的好，其实也可以不加s。项目中加s主要是为了跟project-layout项目对齐。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623775060,"ip_address":"","comment_id":297580,"utype":1}],"discussion_count":4,"race_medal":0,"score":"57458227962","product_id":100079601,"comment_content":"目录不是推荐统一使用单数吗，为什么文中还写成configs、deployments等复数形式呢","like_count":13,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521863,"discussion_content":"这个问题问的好，其实也可以不加s。项目中加s主要是为了跟project-layout项目对齐。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623775060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1269633,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5f/81/07505cdf.jpg","nickname":"张金富","note":"","ucode":"2F571C73DB868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383167,"discussion_content":"options tools docs examples githooks assets scripts configs deployments docs platforms make-rules 😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625958398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202498,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/42/9f0c7fe4.jpg","nickname":"何长杰Atom","note":"","ucode":"C36A80F33FF2F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586991,"discussion_content":"我猜测这些目录应该是项目管理所使用的，在其他语言应该是通用的。对于Go语言代码相关的目录还是单数比较合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662646215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387914,"discussion_content":"哈哈哈，问的好呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628495991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296587,"user_name":"Geek_c3e438","can_delete":false,"product_type":"c1","uid":2188564,"ip_address":"","ucode":"98ECC14625735B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/mEASWaicRcYrU1TtnkoN7Dx7IEL5godockwSZicz1j9UXN88vtoG2ynJ2yib2oCMcnIjwJtLx60JHsm9moWrNM64A/132","comment_is_top":false,"comment_ctime":1623053650,"is_pvip":false,"replies":[{"id":"107709","content":"1. 建议放在这个目录下：github.com&#47;marmotedu&#47;api<br>理由：这个目录可以存放相同项目，不同应用的api定义文件，将api定义文件放在项目维度，有利于api定义共享，避免多个项目重复定义api接口，导致后期变更，维护复杂。可以参考下iam的存放位置。<br><br>2. <br>service：里面按功能模块，存放业务逻辑代码<br>server：存放启动服务的初始化和启动代码，例如：server := NewServer(), server.Init(), server.Start(), server.Stop()<br>client：这个可以命名为类似xxctl这类目录名，指向更具体，例如iamctl，存放在cmd&#47;iamctl目录下 <br><br>3. 定时任务是个daemon，可以放在cmd目录下。另外定时任务一般来说可以抽象成一个公共服务，放在类似github.com&#47;marmotedu这类目录下<br>4.utils, common这类目录不建议用，在Go项目中，每个包名字应该唯一、功能单一、明确。这类目录存放了很杂的功能，后期维护、查找都很麻烦。<br>如果有类似time类的处理，可以存放在pkg&#47;util&#47;time包中。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623061688,"ip_address":"","comment_id":296587,"utype":1}],"discussion_count":4,"race_medal":1,"score":"53162661202","product_id":100079601,"comment_content":"老师好，受益匪浅！<br><br>1. &#47;api&#47;下放api接口定义文件<br>如果是gRPC, pb文件一般放在&#47;api&#47;目录下<br>那相关的请求响应的定义是不是一般也放在&#47;api&#47;目录下？<br><br>2. 另外很多项目都有这样的文件夹：<br>&#47;service<br>&#47;server<br>&#47;client<br>等，大多也是请求响应的场景，一般是个什么作用，和要怎么区分目录结构？<br><br>3. 一些定时任务呢？<br><br>4. 不建议使用&#47;src&#47;，那一些utils, common呢？","like_count":12,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521504,"discussion_content":"1. 建议放在这个目录下：github.com/marmotedu/api\n理由：这个目录可以存放相同项目，不同应用的api定义文件，将api定义文件放在项目维度，有利于api定义共享，避免多个项目重复定义api接口，导致后期变更，维护复杂。可以参考下iam的存放位置。\n\n2. \nservice：里面按功能模块，存放业务逻辑代码\nserver：存放启动服务的初始化和启动代码，例如：server := NewServer(), server.Init(), server.Start(), server.Stop()\nclient：这个可以命名为类似xxctl这类目录名，指向更具体，例如iamctl，存放在cmd/iamctl目录下 \n\n3. 定时任务是个daemon，可以放在cmd目录下。另外定时任务一般来说可以抽象成一个公共服务，放在类似github.com/marmotedu这类目录下\n4.utils, common这类目录不建议用，在Go项目中，每个包名字应该唯一、功能单一、明确。这类目录存放了很杂的功能，后期维护、查找都很麻烦。\n如果有类似time类的处理，可以存放在pkg/util/time包中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623061688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1313934,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/8e/8a39ee55.jpg","nickname":"文古","note":"","ucode":"9A3991AA033EB4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573764,"discussion_content":"service：我觉得是业务的聚合层，逻辑层是否另起一层biz层？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653633925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1588873,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3e/89/ccc2ebd9.jpg","nickname":"陈晓涛","note":"","ucode":"E80D318348CA47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544637,"discussion_content":"github.com/marmotedu/api 是啥意思，没懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641613059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2188564,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/mEASWaicRcYrU1TtnkoN7Dx7IEL5godockwSZicz1j9UXN88vtoG2ynJ2yib2oCMcnIjwJtLx60JHsm9moWrNM64A/132","nickname":"Geek_c3e438","note":"","ucode":"98ECC14625735B","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378235,"discussion_content":"谢谢大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623121547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296950,"user_name":"h","can_delete":false,"product_type":"c1","uid":2009498,"ip_address":"","ucode":"47893B5F8913B4","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a9/9a/5df6cc22.jpg","comment_is_top":false,"comment_ctime":1623237002,"is_pvip":false,"replies":[{"id":"107886","content":"不建议，这种是按层来划分的目录结构。在go语言中容易出现循环调用，也不符合go的设计哲学。go的包是按功能划分的一个功能模块，所以在go中建议也按功能划分，可以最大程度的复用代码，减少循环调用的概率。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623288156,"ip_address":"","comment_id":296950,"utype":1}],"discussion_count":5,"race_medal":0,"score":"35982975370","product_id":100079601,"comment_content":"老师好，我在做go web后台管理系统相关的项目，用的gin框架，因为类似于那种MVC模型，所以会有model(orm)，router，middleware等目录，这种在web应用里面建议使用吗？还是说也建议按照你这种目录来划分","like_count":8,"discussions":[{"author":{"id":1496889,"avatar":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","nickname":"Hector","note":"","ucode":"110CAF87ADDC01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379267,"discussion_content":"可以看下B站kratos v2就是这种web目录方式，我觉得很好","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1623803092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521659,"discussion_content":"不建议，这种是按层来划分的目录结构。在go语言中容易出现循环调用，也不符合go的设计哲学。go的包是按功能划分的一个功能模块，所以在go中建议也按功能划分，可以最大程度的复用代码，减少循环调用的概率。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623288156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1896587,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f0/8b/e307f616.jpg","nickname":"沐浴露🧴","note":"","ucode":"CFAFDE6450BC2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":586786,"discussion_content":"为何感觉，按层级分，不容易出现循环调用呢。因为按层级分，都是从上往下的，感觉不太可能出现循环调用，反而是按功能分，容易出现A模块引用B模块，B模块也要引用A模块的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662516426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":521659,"ip_address":"中国台湾"},"score":586786,"extra":""}]},{"author":{"id":2652565,"avatar":"","nickname":"Geek_790ae3","note":"","ucode":"FB4259E6EDC730","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378573,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623290901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691003,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cd/7b/7e3e97dc.jpg","nickname":"燕鑫","note":"","ucode":"D0094A57E41EB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378559,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623286950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296952,"user_name":"h","can_delete":false,"product_type":"c1","uid":2009498,"ip_address":"","ucode":"47893B5F8913B4","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a9/9a/5df6cc22.jpg","comment_is_top":false,"comment_ctime":1623238002,"is_pvip":false,"replies":[{"id":"107885","content":"放在internal&#47;apiserver&#47;store&#47;mysql目录下","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623287980,"ip_address":"","comment_id":296952,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31688009074","product_id":100079601,"comment_content":"可能我说的这些router，model，controller等目录是使用其他语言留下来的习惯吧，如果放在您这个目录结构，路由 orm相关的代码应该放在那个目录下呢？","like_count":7,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521661,"discussion_content":"放在internal/apiserver/store/mysql目录下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623287980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1966534,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/01/c6/b131de98.jpg","nickname":"Newball","note":"","ucode":"933FE3FD50BD1E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561717,"discussion_content":"ddd的四层架构目录，真的会干净清晰很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649703259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320597,"user_name":"永遇乐","can_delete":false,"product_type":"c1","uid":1898332,"ip_address":"","ucode":"B11D8B55B51188","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f7/5c/8a0b5b90.jpg","comment_is_top":false,"comment_ctime":1636418002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18816287186","product_id":100079601,"comment_content":"读文章我有种土包子进京的感觉，老师讲的太好了","like_count":4},{"had_liked":false,"id":299766,"user_name":"Geek_d308cd","can_delete":false,"product_type":"c1","uid":2668227,"ip_address":"","ucode":"7850879E2C4A04","user_header":"","comment_is_top":false,"comment_ctime":1624850647,"is_pvip":false,"replies":[{"id":"108752","content":"引入其所在的包，","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624929920,"ip_address":"","comment_id":299766,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14509752535","product_id":100079601,"comment_content":"老师好，关于不建议把类型定义放在model这点，如果它被多个模块依赖，应该放在哪呢","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522539,"discussion_content":"引入其所在的包，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624929920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298148,"user_name":"王少侠","can_delete":false,"product_type":"c1","uid":1612811,"ip_address":"","ucode":"3372B79279A28A","user_header":"https://static001.geekbang.org/account/avatar/00/18/9c/0b/395b072d.jpg","comment_is_top":false,"comment_ctime":1623924188,"is_pvip":false,"replies":[{"id":"108220","content":"store中存放一些接口定义。<br>sql语句的组装放在service中","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623993396,"ip_address":"","comment_id":298148,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14508826076","product_id":100079601,"comment_content":"数据库操作都在store&#47;mysql，那SQL语句组装是在service还是在store组装呢？","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522034,"discussion_content":"store中存放一些接口定义。\nsql语句的组装放在service中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623993396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297533,"user_name":"Cheng","can_delete":false,"product_type":"c1","uid":2032546,"ip_address":"","ucode":"E5AAEC756CC957","user_header":"https://static001.geekbang.org/account/avatar/00/1f/03/a2/268881e7.jpg","comment_is_top":false,"comment_ctime":1623602095,"is_pvip":false,"replies":[{"id":"108127","content":"1. 文件夹一般不建议加s<br>2. 这种缩写根据需要自己选择，controller不建议缩写。因为ctl你根本不知道啥意思，缩写前提是看目录名就知道啥意思。<br>3. 文件夹单词之间需要加分隔符，具体加什么分隔符还是要分情况。如果是组件名目录可以用-，其它可以选择_，其实这里没有标准答案，可以根据需要需要自己选择，并形成规范即可。<br>4. 建议全小写","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623774984,"ip_address":"","comment_id":297533,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14508503983","product_id":100079601,"comment_content":"文件夹命名没有规范吗？<br>如：<br>1. 需不需要加 s<br>2. 要不要使用缩写，如controller 变 ctl<br>3. 文件夹名称的单词直接要不要加分隔符，已经加什么分隔符，目前看到: 有些不加分隔符，加-或_<br>4. 文件夹名称大小写问题，看到有些使用大写开头和小写开头","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521847,"discussion_content":"1. 文件夹一般不建议加s\n2. 这种缩写根据需要自己选择，controller不建议缩写。因为ctl你根本不知道啥意思，缩写前提是看目录名就知道啥意思。\n3. 文件夹单词之间需要加分隔符，具体加什么分隔符还是要分情况。如果是组件名目录可以用-，其它可以选择_，其实这里没有标准答案，可以根据需要需要自己选择，并形成规范即可。\n4. 建议全小写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623774984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297238,"user_name":"olym","can_delete":false,"product_type":"c1","uid":1479843,"ip_address":"","ucode":"29F19A06BAAB8E","user_header":"https://static001.geekbang.org/account/avatar/00/16/94/a3/7b1ad099.jpg","comment_is_top":false,"comment_ctime":1623388510,"is_pvip":false,"replies":[{"id":"107962","content":"可以放这里：github.com&#47;marmotedu&#47;api&#47;apiserver&#47;v1<br><br><br>放这里的好处是：不同项目都可以共用","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623402171,"ip_address":"","comment_id":297238,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14508290398","product_id":100079601,"comment_content":"老师好，&#47;internal&#47;apiserver&#47;store&#47;mysq 这里存放的查询方法查到数据之后，数据的strcut定义应该要放在哪个目录比较合适？","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521769,"discussion_content":"可以放这里：github.com/marmotedu/api/apiserver/v1\n\n\n放这里的好处是：不同项目都可以共用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623402171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2654999,"avatar":"https://static001.geekbang.org/account/avatar/00/28/83/17/df99b53d.jpg","nickname":"随风而过","note":"","ucode":"FFD17BAA3B2312","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388593,"discussion_content":"struct","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628843524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296430,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1622972178,"is_pvip":false,"replies":[{"id":"107719","content":"目前是会的。设计目录结构时也说了设计的目录结构应该具有全面性和可扩展性，所以在设计目录结构时应该考虑到这些差异。本讲介绍的目录结构目前来看是能满足大部分场景需求的，当然如果真的有些差异，只要合理，规范的也是可以容忍的","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623062213,"ip_address":"","comment_id":296430,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14507874066","product_id":100079601,"comment_content":"请问老师，拿结构化目录结构来说，你们在内部的各个项目会强制使用统一的一级目录结构不，还是会因场景而异","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521438,"discussion_content":"目前是会的。设计目录结构时也说了设计的目录结构应该具有全面性和可扩展性，所以在设计目录结构时应该考虑到这些差异。本讲介绍的目录结构目前来看是能满足大部分场景需求的，当然如果真的有些差异，只要合理，规范的也是可以容忍的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623062213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2188564,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/mEASWaicRcYrU1TtnkoN7Dx7IEL5godockwSZicz1j9UXN88vtoG2ynJ2yib2oCMcnIjwJtLx60JHsm9moWrNM64A/132","nickname":"Geek_c3e438","note":"","ucode":"98ECC14625735B","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378089,"discussion_content":"大公司一般有代码目录生成工具，小公司大多靠约定(手动狗头)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623053421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323274,"user_name":"dairongpeng","can_delete":false,"product_type":"c1","uid":1624416,"ip_address":"","ucode":"CDC889B7ECB53E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/60/2f7eb4b5.jpg","comment_is_top":false,"comment_ctime":1637810954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10227745546","product_id":100079601,"comment_content":"写代码本就不是技术问题，是哲学和美学的问题，哈哈","like_count":2},{"had_liked":false,"id":322614,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1637500444,"is_pvip":false,"replies":[{"id":"117684","content":"66666","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1638362611,"ip_address":"","comment_id":322614,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10227435036","product_id":100079601,"comment_content":"总结：<br>    1. Go 项目的目录结构分为两类：平铺式目录结构和结构化目录结构；<br>    2. 结构化目录分为三大类：应用目录、项目管理目录、文档目录。应用目录又可分为开发阶段、测试阶段、部署阶段对应的目录；开发阶段分为前端目录和后端目录。<br>    3. 前端目录：&#47;web，后端目录：&#47;cmd, &#47;internal, &#47;pkg, &#47;vendor, &#47;third_party；测试阶段: &#47;test；部署阶段：&#47;build, &#47;configs, &#47;deploy, &#47;init<br>    4. 文档目录: README.md, &#47;api, &#47;docs, &#47;CHANGELOG, &#47;examples<br>    5. 项目管理：&#47;Makfile, &#47;scripts, &#47;tools, &#47;githooks","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535165,"discussion_content":"66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638362611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319165,"user_name":"王副会长","can_delete":false,"product_type":"c1","uid":2755098,"ip_address":"","ucode":"23A817C53E1DB9","user_header":"https://static001.geekbang.org/account/avatar/00/2a/0a/1a/36eae245.jpg","comment_is_top":false,"comment_ctime":1635650183,"is_pvip":false,"replies":[{"id":"115960","content":"&#47;cmd目录下存放的是main函数入口，&#47;cmd目录下的main文件中，通过简单几行代码，将业务逻辑的具体实现转到internal目录下。<br><br>这样做主要的好处是，可以方便开发者找到应用入口位置。","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1636003898,"ip_address":"","comment_id":319165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10225584775","product_id":100079601,"comment_content":"老师，我是小白，有些地方不太懂。比如&#47;cmd目录下面是放组件的核心代码吗，那到底是放哪些呢，逻辑不是拆分为&#47;internal和&#47;pkg了吗，那&#47;cmd下到底是放啥？还有&#47;internal中如何拆分轻量级和复杂的服务，哪些放api层下，哪些放service层里","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529527,"discussion_content":"/cmd目录下存放的是main函数入口，/cmd目录下的main文件中，通过简单几行代码，将业务逻辑的具体实现转到internal目录下。\n\n这样做主要的好处是，可以方便开发者找到应用入口位置。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636003898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305677,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1628094998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10218029590","product_id":100079601,"comment_content":"一个设计良好的目录结构，首先是表意明确的，然后既能覆盖当前的需要又能兼顾远期的拓展。<br>想要长久的维持干净的目录结构，要有闭环机制来对抗墒增。<br>对抗墒增本身是一件耗费精力的事情，只有着眼于长期价值的人才会愿意在这方面持续投入。<br><br>书读百遍，其义自现。","like_count":2},{"had_liked":false,"id":302114,"user_name":"Geek_9f2339","can_delete":false,"product_type":"c1","uid":2182752,"ip_address":"","ucode":"13B68C4F9BFA5A","user_header":"","comment_is_top":false,"comment_ctime":1626086424,"is_pvip":false,"replies":[{"id":"109751","content":"一言难尽，可以加老师微信，交流。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1626684727,"ip_address":"","comment_id":302114,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10216021016","product_id":100079601,"comment_content":"GO  基于功能划分目录<br>DDD 基于模型划分目录<br><br>是不是可以理解为  GO可以多设计一些充血模型 来对业务进行模型功能化，从而实现一些功能划分<br><br>老师能不能讲一下怎么从面相对象的思想设计转换过来。<br><br>","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523186,"discussion_content":"一言难尽，可以加老师微信，交流。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626684727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1635157,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f3/55/f4bdcf34.jpg","nickname":"包三叔","note":"","ucode":"3C9ED556D3A61E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398112,"discussion_content":"同样有这个问题，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632738175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299492,"user_name":"daz2yy","can_delete":false,"product_type":"c1","uid":1008723,"ip_address":"","ucode":"639A67961EC893","user_header":"https://static001.geekbang.org/account/avatar/00/0f/64/53/c93b8110.jpg","comment_is_top":false,"comment_ctime":1624678109,"is_pvip":false,"replies":[{"id":"108621","content":"我的建议：<br>一个组织有多个项目，一个项目有多个应用，一个应用有多个服务。<br><br>所以具体要看这个工程是否属于A应用，如果属于A应用，就放在A应用的cmd&#47;目录下。如果不属于就另起一个应用。也就是放在类似：github.com&#47;marmotedu目录下。<br><br>&quot;Makefile 常用管理内容&quot; 已修复","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624704970,"ip_address":"","comment_id":299492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10214612701","product_id":100079601,"comment_content":"老师好，看 internal 这里是可以放多个程序的，有个疑问就是，一个项目里有多少个工程这个有什么规则来做拆分呢？也就是要不要把新的服务、功能拆分到一个单独的项目里，还是在这个项目里写，这也关系到维护的成本，部署的成本等（新的一套又是一样的目录结构要维护对吧）<br><br>PS：&quot;Makefile 常用管理内容&quot; 的链接 404 了","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522454,"discussion_content":"我的建议：\n一个组织有多个项目，一个项目有多个应用，一个应用有多个服务。\n\n所以具体要看这个工程是否属于A应用，如果属于A应用，就放在A应用的cmd/目录下。如果不属于就另起一个应用。也就是放在类似：github.com/marmotedu目录下。\n\n&amp;quot;Makefile 常用管理内容&amp;quot; 已修复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624704970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296624,"user_name":"作甚","can_delete":false,"product_type":"c1","uid":1737156,"ip_address":"","ucode":"AFBB09A3577A34","user_header":"https://static001.geekbang.org/account/avatar/00/1a/81/c4/8860d4de.jpg","comment_is_top":false,"comment_ctime":1623070138,"is_pvip":false,"replies":[{"id":"107801","content":"后端一个服务，做的通用些，前面可以挂BFF层来适配不同的终端。千万不要开发两个服务，维护起来巨复杂，还容易出问题","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623161538,"ip_address":"","comment_id":296624,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10213004730","product_id":100079601,"comment_content":"老师好，如果我要开发一个，cms内容管理，还有需要给app或者小程序提供服务的，单独做两个项目合适还是一个项目运行两个服务合适，因为APP和CMS管理员操作和业务逻辑差异也大，而且数据库要做两个user表，管理员user表和用户user表？","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521524,"discussion_content":"后端一个服务，做的通用些，前面可以挂BFF层来适配不同的终端。千万不要开发两个服务，维护起来巨复杂，还容易出问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623161538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296532,"user_name":"Vackine","can_delete":false,"product_type":"c1","uid":1139588,"ip_address":"","ucode":"8E412EE82D3B59","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/84/f45c4af9.jpg","comment_is_top":false,"comment_ctime":1623032329,"is_pvip":false,"replies":[{"id":"107713","content":"建议放在cmd&#47;&lt;component-name&gt;&#47;main.go ","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623061793,"ip_address":"","comment_id":296532,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10212966921","product_id":100079601,"comment_content":"所以main.go 这种 建议放根目录？","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521475,"discussion_content":"建议放在cmd/&amp;lt;component-name&amp;gt;/main.go ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623061793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2188564,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/mEASWaicRcYrU1TtnkoN7Dx7IEL5godockwSZicz1j9UXN88vtoG2ynJ2yib2oCMcnIjwJtLx60JHsm9moWrNM64A/132","nickname":"Geek_c3e438","note":"","ucode":"98ECC14625735B","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378088,"discussion_content":"/cmd/iam-apiserver/apiserver.go，定义main函数；文件名不一定是main.go；每个组件的目录名应该跟你期望的可执行文件名是一致的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1623053366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1143338,"avatar":"https://static001.geekbang.org/account/avatar/00/11/72/2a/c4042a20.jpg","nickname":"骑蜗牛的勇士","note":"","ucode":"2702AEEA14BC4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378093,"discussion_content":"只有一个项目的话main.go放在根目录我觉得是可以的，很多知名项目都是这么放置，单独放在cmd下反而怪怪的，化蛇添脚了。但是像文中这种多个项目，还是规划下比较好。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623054357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2654999,"avatar":"https://static001.geekbang.org/account/avatar/00/28/83/17/df99b53d.jpg","nickname":"随风而过","note":"","ucode":"FFD17BAA3B2312","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1143338,"avatar":"https://static001.geekbang.org/account/avatar/00/11/72/2a/c4042a20.jpg","nickname":"骑蜗牛的勇士","note":"","ucode":"2702AEEA14BC4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388594,"discussion_content":"需求明确是可以的，如果需要扩展的话 还是要放到cmd下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628843729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":378093,"ip_address":""},"score":388594,"extra":""}]}]},{"had_liked":false,"id":337332,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1646756810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5941724106","product_id":100079601,"comment_content":"原来放在pkg下才能共享！老师的文章不仅专业还很接地气，上来就能实战！少走很多弯路！","like_count":1},{"had_liked":false,"id":311087,"user_name":"倪昊","can_delete":false,"product_type":"c1","uid":1236631,"ip_address":"","ucode":"790CB649341D37","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/97/cda3f551.jpg","comment_is_top":false,"comment_ctime":1631068717,"is_pvip":true,"replies":[{"id":"112814","content":"不考虑其它项目的话，可以放在internal&#47;apiserver&#47;model目录下","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1631176101,"ip_address":"","comment_id":311087,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926036013","product_id":100079601,"comment_content":"老师，就拿user来举例的话，user的orm字段定义是应该放在&#47;api下，而不是store目录下？<br>我看IAM的orm对象好像定义在另一个库里，如果不考虑其他项目的话，是不是放当前项目就行？","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526468,"discussion_content":"不考虑其它项目的话，可以放在internal/apiserver/model目录下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631176101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297873,"user_name":"Geek_b767ba","can_delete":false,"product_type":"c1","uid":2285553,"ip_address":"","ucode":"6334984ADB9A56","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKY0SBAOch2SxwoQ0IJryZLbG8vKibkJLV4eG6EPQrD4P6CxN4u2XYMylq4gPCMjvfsI3SaicjxviaTA/132","comment_is_top":false,"comment_ctime":1623828559,"is_pvip":false,"replies":[{"id":"108166","content":"根据需要可自行选择或者设计，但这些目录结构值得了解下","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623889710,"ip_address":"","comment_id":297873,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5918795855","product_id":100079601,"comment_content":"gomodule之后我感觉这种目录结构也不一定是完全合理","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521952,"discussion_content":"根据需要可自行选择或者设计，但这些目录结构值得了解下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623889710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297017,"user_name":"lianyz","can_delete":false,"product_type":"c1","uid":1330879,"ip_address":"","ucode":"A2536B49AEC4DD","user_header":"https://static001.geekbang.org/account/avatar/00/14/4e/bf/0f0754aa.jpg","comment_is_top":false,"comment_ctime":1623284641,"is_pvip":true,"replies":[{"id":"107910","content":"自己写个shell脚本，很简单","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623321421,"ip_address":"","comment_id":297017,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5918251937","product_id":100079601,"comment_content":"老师好，README自动生成的工具有哪些呢？","like_count":1,"discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535654,"discussion_content":"前文说过，readme.so","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638504350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521684,"discussion_content":"自己写个shell脚本，很简单","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623321421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360588,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"北京","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1666675415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666675415","product_id":100079601,"comment_content":"这个internal总感觉怪怪的","like_count":0},{"had_liked":false,"id":356704,"user_name":"沐浴露🧴","can_delete":false,"product_type":"c1","uid":1896587,"ip_address":"中国台湾","ucode":"CFAFDE6450BC2F","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f0/8b/e307f616.jpg","comment_is_top":false,"comment_ctime":1662518877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662518877","product_id":100079601,"comment_content":"这节课看的受益匪浅。非常感谢老师。在此有些问题还望老师解答一下<br>1. pkg包感觉对于一个非框架项目（例如web项目等）来说意义不大，因为开发新项目的时候几乎不太可能依赖一个类似web项目的。例如 prometheus，kratos 等这类非框架的项目，都没有pkg包。<br>2.按照模块功能划分包来说，是不是容易出现A-&gt;B，然后B-&gt;A的情况。这样是不是会比较容易出现循环引用。反而按层划分的话，不太容易出现循环引用，因为按层分，基本都是自上而下的引用。","like_count":0},{"had_liked":false,"id":354196,"user_name":"华少","can_delete":false,"product_type":"c1","uid":1048516,"ip_address":"广东","ucode":"AFBA0DBC127916","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/c4/a6b5c922.jpg","comment_is_top":false,"comment_ctime":1660180655,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660180655","product_id":100079601,"comment_content":"如果是微服务的话，不应该会有这么多项目吧？","like_count":0},{"had_liked":false,"id":347135,"user_name":"VenFox","can_delete":false,"product_type":"c1","uid":1002112,"ip_address":"","ucode":"11F08AD5685505","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/80/b1862ca3.jpg","comment_is_top":false,"comment_ctime":1653738009,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653738009","product_id":100079601,"comment_content":"老师，我看到一些开源项目有hack目录，是做什么的？","like_count":0},{"had_liked":false,"id":346979,"user_name":"tiny🌾","can_delete":false,"product_type":"c1","uid":1119851,"ip_address":"","ucode":"7A4DE00381D1F3","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/6b/af7c7745.jpg","comment_is_top":false,"comment_ctime":1653573225,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1653573225","product_id":100079601,"comment_content":"想问一下：apiserver  authzserver这写服务在git里是2个不同的仓库还是一个？   如果在一个仓库，如果要改期中一个，那不是容易冲突。 如果一个大项目很多这种服务，都放一个仓库，修改bug发布这样冲突很就频繁","like_count":0,"discussions":[{"author":{"id":1896587,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f0/8b/e307f616.jpg","nickname":"沐浴露🧴","note":"","ucode":"CFAFDE6450BC2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586788,"discussion_content":"go 1.18有 work 模式了，感觉老师的这种应该是多个独立模块开发，用 work 模式更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662517195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国台湾"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343286,"user_name":"trample","can_delete":false,"product_type":"c1","uid":1084107,"ip_address":"","ucode":"5A3DA3EF60FB24","user_header":"","comment_is_top":false,"comment_ctime":1650763132,"is_pvip":false,"replies":[{"id":"125515","content":"nets：目录名复数<br>net：目录名单数","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1651077723,"ip_address":"","comment_id":343286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650763132","product_id":100079601,"comment_content":"目录名单数是什么意思？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568206,"discussion_content":"nets：目录名复数\nnet：目录名单数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651077723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339468,"user_name":"Geek_f23c82","can_delete":false,"product_type":"c1","uid":2725008,"ip_address":"","ucode":"40BABEF7078F37","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIW5xLKMIwlibBXdP5sGVqhXAGuLYk7XFBrhzkFytlKicjNpSHIKXQclDUlSbD9s2HDuOiaBXslCqVbg/132","comment_is_top":false,"comment_ctime":1648115902,"is_pvip":false,"replies":[{"id":"125554","content":"要具体情况具体对待。不是死规定哈","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1651080004,"ip_address":"","comment_id":339468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648115902","product_id":100079601,"comment_content":"老师文章开头说目录命名最好用单数，但是我看iam项目很多都是用的复数命名，请问有什么特殊考量吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568251,"discussion_content":"要具体情况具体对待。不是死规定哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651080004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333608,"user_name":"何长杰Atom","can_delete":false,"product_type":"c1","uid":1202498,"ip_address":"","ucode":"C36A80F33FF2F7","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/42/9f0c7fe4.jpg","comment_is_top":false,"comment_ctime":1644421801,"is_pvip":false,"replies":[{"id":"123451","content":"IAM项目是一个认证授权项目，它有自己的使用前段，这些前段的代码可以放在web中。<br>它也可以有项目介绍网页，这些网页代码可以放在website中。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1647039971,"ip_address":"","comment_id":333608,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644421801","product_id":100079601,"comment_content":"老师，api目录能够详细说说吗，除了swagger。<br>另外web目录和website目录有啥区别","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555711,"discussion_content":"IAM项目是一个认证授权项目，它有自己的使用前段，这些前段的代码可以放在web中。\n它也可以有项目介绍网页，这些网页代码可以放在website中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647039971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331290,"user_name":"Sarah","can_delete":false,"product_type":"c1","uid":1986115,"ip_address":"","ucode":"4894963B7751E0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq4IKnru1RcE4UaMa67zzYZ8R7jNy4CrzfBpXtWLJXgRLuj6bzAJGty6Meejtiagb791ia49M0hnicGA/132","comment_is_top":false,"comment_ctime":1642518219,"is_pvip":false,"replies":[{"id":"121261","content":"暂时没有，后面考虑写个","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1642867571,"ip_address":"","comment_id":331290,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642518219","product_id":100079601,"comment_content":"有脚手架初始化工具吗","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547821,"discussion_content":"暂时没有，后面考虑写个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642867572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329869,"user_name":"陈晓涛","can_delete":false,"product_type":"c1","uid":1588873,"ip_address":"","ucode":"E80D318348CA47","user_header":"https://static001.geekbang.org/account/avatar/00/18/3e/89/ccc2ebd9.jpg","comment_is_top":false,"comment_ctime":1641613275,"is_pvip":false,"replies":[{"id":"120951","content":"包名","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1642434566,"ip_address":"","comment_id":329869,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641613275","product_id":100079601,"comment_content":"github.com&#47;marmotedu&#47;api 是啥意思呢，没明白","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546854,"discussion_content":"包名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642434566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326041,"user_name":"NiceBlueChai","can_delete":false,"product_type":"c1","uid":2038718,"ip_address":"","ucode":"2043333890C448","user_header":"https://static001.geekbang.org/account/avatar/00/1f/1b/be/525e05ae.jpg","comment_is_top":false,"comment_ctime":1639323938,"is_pvip":true,"replies":[{"id":"118318","content":"我去学习下，xmake!","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639397753,"ip_address":"","comment_id":326041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639323938","product_id":100079601,"comment_content":"放弃Makefile吧哈哈，不如用国人开发的xmake","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538305,"discussion_content":"我去学习下，xmake!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639397753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325825,"user_name":"L","can_delete":false,"product_type":"c1","uid":2827544,"ip_address":"","ucode":"2F992F7BCDEFD2","user_header":"https://static001.geekbang.org/account/avatar/00/2b/25/18/39be2f63.jpg","comment_is_top":false,"comment_ctime":1639154827,"is_pvip":false,"replies":[{"id":"118332","content":"是的哈，最新的master分支多了一个watcher。不影响学习。iam-watcher服务后面会讲到","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639398587,"ip_address":"","comment_id":325825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639154827","product_id":100079601,"comment_content":"目录结构好像已经变了？apiserver，authzserver这些目录下的结构和这里不一样<br>","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538321,"discussion_content":"是的哈，最新的master分支多了一个watcher。不影响学习。iam-watcher服务后面会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639398587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316812,"user_name":"米兔","can_delete":false,"product_type":"c1","uid":2796701,"ip_address":"","ucode":"5B2CC592B822A1","user_header":"https://static001.geekbang.org/account/avatar/00/2a/ac/9d/1f697753.jpg","comment_is_top":false,"comment_ctime":1634555678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634555678","product_id":100079601,"comment_content":"看到老师提供在Github上的文档，感觉规范已经成为一种习惯了。","like_count":0},{"had_liked":false,"id":307056,"user_name":"随风而过","can_delete":false,"product_type":"c1","uid":2654999,"ip_address":"","ucode":"FFD17BAA3B2312","user_header":"https://static001.geekbang.org/account/avatar/00/28/83/17/df99b53d.jpg","comment_is_top":false,"comment_ctime":1628843186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628843186","product_id":100079601,"comment_content":"整体目录结构很系统的讲解了一遍,学到了不少，小项目变大后可以按照这套规范走，确实体现了go语言的设计哲学，切记不能以其他编程语言的开发习惯来套娃","like_count":0},{"had_liked":false,"id":306322,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1628495926,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628495926","product_id":100079601,"comment_content":"工程化结构呀。666","like_count":0}]}