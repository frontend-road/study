{"id":444252,"title":"15 | 可视化工具：如何实现训练的可视化监控？","content":"<p>你好，我是方远。欢迎来到第15节课的学习。</p><p>上节课中，我们以线性回归模型为例，学习了模型从搭建到训练的全部过程。在深度学习领域，模型训练是一个必须的环节，而在训练过程中，我们常常需要对模型的参数、评价指标等信息进行可视化监控。</p><p>今天我们主要会学习两种可视化工具，并利用它们实现训练过程的可视化监控。</p><p>在TensorFlow中，最常使用的可视化工具非Tensorboard莫属，而TensorboardX工具使得PyTorch也享受到Tensorboard的便捷功能。另外，FaceBook也为PyTorch开发了一款交互式可视化工具Visdom，它可以对实时数据进行丰富的可视化，帮助我们实时监控实验过程。</p><p>让我们先从TensorboardX说起。</p><h2>TensorboardX</h2><p>Tensorboard是TensorFlow的一个附加工具，用于记录训练过程的模型的参数、评价指标与图像等细节内容，并通过Web页面提供查看细节与过程的功能，用浏览器可视化的形式展现，帮助我们在实验时观察神经网络的训练过程，把握训练趋势。</p><p>既然Tensorboard工具这么方便，TensorFlow外的其它深度学习框架自然也想获取Tensorboard的便捷功能，于是，TensorboardX应运而生。</p><!-- [[[read_end]]] --><h3>安装</h3><p>安装 Tensorboard很容易，我们可以使用pip进行安装，命令如下：</p><pre><code class=\"language-python\">pip install tensorboard\n</code></pre><p>如果你已经安装过TensorFlow，那么就无需额外安装Tensorboard了。</p><p>接下来，我们需要安装 TensorboardX。这里需要注意的是，PyTorch 1.8之后的版本自带TensorboardX，它被放在<code>torch.utils.tensorboard</code>中，因此无需多余配置。</p><p>如果你用的是PyTorch 1.8之前的版本，TensorboardX安装起来也非常简单。我们依然使用pip命令安装：</p><pre><code class=\"language-plain\">pip install tensorboardX\n</code></pre><h3>使用与启动</h3><p>为了使用TensorboardX，我们首先需要创建一个SummaryWriter的实例，然后再使用<code>add_scalar</code>方法或<code>add_image</code>方法，将数字或图片记录到SummaryWriter实例中。</p><p>SummaryWriter类的定义如下：</p><pre><code class=\"language-python\">torch.utils.tensorboard.writer.SummaryWriter(log_dir=None)\n</code></pre><p>其中的log_dir表示保存日志的路径，默认会保存在“runs/当前时间_主机名”文件夹中。</p><p>实例创建好之后，我们来看<code>add_scalar</code>方法，这个方法用来记录<strong>数字常量</strong>，它的定义如下：</p><pre><code class=\"language-python\">add_scalar(tag, scalar_value, global_step=None, walltime=None)\n</code></pre><p>根据定义，我们依次说说其中的参数：</p><ul>\n<li>tag：字符串类型，表示数据的名称，不同名称的数据会使用不同曲线展示；</li>\n<li>scalar_value：浮点型，表示要保存的数值；</li>\n<li>global_step：整型，表示训练的step数；</li>\n<li>walltime：浮点型，表示记录发生的时间，默认为time.time()。</li>\n</ul><p>我们一般会使用<code>add_scalar</code>方法来记录训练过程的loss、accuracy、learning rate等数值的变化，这样就能直观地监控训练过程。</p><p><code>add_image</code>方法用来记录单个图像数据（需要Pillow库的支持），它的定义如下：</p><pre><code class=\"language-python\">add_image(tag, img_tensor, global_step=None, walltime=None, dataformats='CHW')\n</code></pre><p>tag、global_step和walltime的含义跟<code>add_scalar</code>方法里一样，所以不再赘述，我们看看其他新增的参数都是什么含义。</p><ul>\n<li>img_tensor：PyTorch的Tensor类型或NumPy的array类型，表示图像数据；</li>\n<li>dataformats：字符串类型，表示图像数据的格式，默认为“CHW”，即Channel x Height x Width，还可以是“CHW”、“HWC”或“HW”等。</li>\n</ul><p>我们来看一个例子加深理解，具体代码如下。</p><pre><code class=\"language-python\">from torch.utils.tensorboard import SummaryWriter\n# PyTorch 1.8之前的版本请使用：\n# from tensorboardX import SummaryWriter\nimport numpy as np\n\n# 创建一个SummaryWriter的实例\nwriter = SummaryWriter()\n\nfor n_iter in range(100):\n    writer.add_scalar('Loss/train', np.random.random(), n_iter)\n    writer.add_scalar('Loss/test', np.random.random(), n_iter)\n    writer.add_scalar('Accuracy/train', np.random.random(), n_iter)\n    writer.add_scalar('Accuracy/test', np.random.random(), n_iter)\n    \nimg = np.zeros((3, 100, 100))\nimg[0] = np.arange(0, 10000).reshape(100, 100) / 10000\nimg[1] = 1 - np.arange(0, 10000).reshape(100, 100) / 10000\n\nwriter.add_image('my_image', img, 0)\nwriter.close()\n</code></pre><p>我给你梳理一下这段代码都做了什么。</p><p>首先创建一个SummaryWriter的实例，这里注意，PyTorch 1.8之前的版本请使用“from tensorboardX import SummaryWriter”，PyTorch 1.8之后的版本请使用“from torch.utils.tensorboard import SummaryWriter”。</p><p>然后，我们随机生成一些随机数，用来模拟训练与预测过程中的Loss和Accuracy，并且用<code>add_scalar</code>方法进行记录。最后生成了一个图像，用<code>add_image</code>方法来记录。</p><p>上述代码运行后，会在当前目录下生成一个“runs”文件夹，里面存储了我们需要记录的数据。</p><p>然后，我们在当前目录下执行下面的命令，即可启动Tensoboard。</p><pre><code class=\"language-python\">tensorboard --logdir=runs\n</code></pre><p>启动后，在浏览器中输入“<a href=\"http://127.0.0.1:6006/\">http://127.0.0.1:6006/</a>”（Tensorboard的默认端口为6006），即可对刚才我们记录的数据进行可视化。</p><p>Tensorboard的界面如下图所示。图片中右侧部分就是刚刚用<code>add_scalar</code>方法记录的Loss和Accuracy。你看，Tensorboard已经帮我们按照迭代step绘制成了曲线图，可以非常直观地监控训练过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/33/e8/3393e81d9a34c51cdecd4a99e460dde8.png?wh=1920x1360\" alt=\"图片\"></p><p>在“IMAGES”的标签页中，可以显示刚刚用<code>add_image</code>方法记录的图像数据，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/86/3a/86bcefa7e732ccceef230a888b3f3a3a.png?wh=1432x1114\" alt=\"图片\"></p><h3>训练过程可视化</h3><p>好，进行到这里，我们已经装好了TensorboardX并启动，还演示了这个工具如何使用。</p><p>那么如何在我们实际的训练过程中来进行可视化监控呢？我们用上节课构建并训练的线性回归模型为例，来进行实践。</p><p>下面的代码上节课讲过，作用是定义一个线性回归模型，并随机生成训练集X与对应的标签Y。</p><pre><code class=\"language-python\">import random\nimport numpy as np\nimport torch\nfrom torch import nn\n\n# 模型定义\nclass LinearModel(nn.Module):\n&nbsp; def __init__(self):\n&nbsp; &nbsp; super().__init__()\n&nbsp; &nbsp; self.weight = nn.Parameter(torch.randn(1))\n&nbsp; &nbsp; self.bias = nn.Parameter(torch.randn(1))\n\n&nbsp; def forward(self, input):\n&nbsp; &nbsp; return (input * self.weight) + self.bias\n\n# 数据\nw = 2\nb = 3\nxlim = [-10, 10]\nx_train = np.random.randint(low=xlim[0], high=xlim[1], size=30)\ny_train = [w * x + b + random.randint(0,2) for x in x_train]\n</code></pre><p>然后我们在训练的过程中，加入刚才讲过的SummaryWriter实例与<code>add_scalar</code>方法，具体的代码如下。</p><pre><code class=\"language-python\"># Tensorboard\nfrom torch.utils.tensorboard import SummaryWriter\n\n# 训练\nmodel = LinearModel()\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-4, weight_decay=1e-2, momentum=0.9)\ny_train = torch.tensor(y_train, dtype=torch.float32)\n\nwriter = SummaryWriter()\n\nfor n_iter in range(500):\n    input = torch.from_numpy(x_train)\n    output = model(input)\n    loss = nn.MSELoss()(output, y_train)\n    model.zero_grad()\n    loss.backward()\n    optimizer.step()\n    writer.add_scalar('Loss/train', loss, n_iter)\n</code></pre><p>通过上面这段代码，我们记录了训练过程中的Loss的变换过程。具体的趋势如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/df/48/df021d742b09180fb267652fca440d48.png?wh=750x656\" alt=\"图片\"></p><p>可以看到Loss是一个下降的趋势，说明随着训练过程，模型越来越拟合我们的训练数据了。进行到这里，我们已经走完了利用TensorboardX工具，实现训练可视化监控的整个过程。</p><p>TensorboardX除了包括上述的常用方法之外，还有许多其他方法如<code>add_histogram</code>、<code>add_graph</code>、<code>add_embedding</code>、<code>add_audio</code> 等，感兴趣的同学可以参考<a href=\"https://pytorch.org/docs/stable/tensorboard.html\">[官方文档]</a>。相信参考已经学习过的两个add方法，你一定能够举一反三，很快熟练调用其它的方法。</p><h2>Visdom</h2><p>Visdom是Facebook开源的一个专门用于PyTorch的交互式可视化工具。它为实时数据提供了丰富的可视化种类，可以在浏览器中进行查看，并且可以很容易地与其他人共享可视化结果，帮助我们实时监控在远程服务器上进行的科学实验。</p><h3>安装与启动</h3><p>Visdom的安装非常简单，可直接使用pip进行安装，具体的命令如下：</p><pre><code class=\"language-python\">pip install visdom\n</code></pre><p>执行安装命令后，我们可以执行以下命令启动Visdom：</p><pre><code class=\"language-python\">python -m visdom.server\n</code></pre><p>Visdom的默认端口是8097，如果需要修改，可以使用-p选项。</p><p>启动成功后，在浏览器中输入“<a href=\"http://127.0.0.1:8097/\">http://127.0.0.1:8097/</a>”，进入Visdom的主界面。</p><p>Visdom的主界面如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/99/a8/99d3a7d1ayya17cb625a6f8a567e2aa8.jpg?wh=1920x460\" alt=\"图片\"></p><p>请你注意，Visdom的使用与Tensorboard稍有不同。Tensorboard是在生成记录文件后，启动可视化界面。而Visdom是先启动可视化界面，当有数据进入Visdom的窗口时，会实时动态地更新并绘制数据。</p><h3>快速上手</h3><p>下面我们就来动手试一下，看看Visdom如何绘制数据。</p><p>具体过程分四步走：首先，我们需要将窗口类Visdom实例化；然后，利用line()方法创建一个线图窗口并初始化；接着，利用生成的一组随机数数据来更新线图窗口。最后，通过image()方法来绘制一张图片。</p><p>上述过程的具体代码如下。</p><pre><code class=\"language-python\">from visdom import Visdom\nimport numpy as np\nimport time\n\n# 将窗口类实例化\nviz = Visdom()&nbsp;\n# 创建窗口并初始化\nviz.line([0.], [0], win='train_loss', opts=dict(title='train_loss'))\n\nfor n_iter in range(10):\n&nbsp; &nbsp; # 随机获取loss值\n&nbsp; &nbsp; loss = 0.2 * np.random.randn() + 1\n&nbsp; &nbsp; # 更新窗口图像\n&nbsp; &nbsp; viz.line([loss], [n_iter], win='train_loss', update='append')\n&nbsp; &nbsp; time.sleep(0.5)\n\nimg = np.zeros((3, 100, 100))\nimg[0] = np.arange(0, 10000).reshape(100, 100) / 10000\nimg[1] = 1 - np.arange(0, 10000).reshape(100, 100) / 10000\n# 可视化图像\nviz.image(img)\n</code></pre><p>可以看出，使用过程与Tensorboard基本一致，只是函数调用上的不同。<br>\n绘制线图的结果如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/13/c0057dd5935b0ed2f6606a8c148f4f13.gif?wh=368x336\" alt=\"图片\"></p><p>对应的绘制图片结果如下。可以看出，Visodm绘制数据时，是动态更新的。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/88/a66f16a1be56456c009da3873c949888.jpg?wh=676x482\" alt=\"图片\"></p><h3>训练可视化监控</h3><p>同样地，我们学习可视化工具的使用主要是为了监控我们的训练过程。我们还是以构建并训练的线性回归模型为例，来进行实践。</p><p>Visdom监控训练过程大致分为三步：</p><ul>\n<li>实例化一个窗口；</li>\n<li>初始化窗口的信息；</li>\n<li>更新监听的信息。</li>\n</ul><p>定义模型与生成训练数据的过程跟前面一样，我就不再重复了。在训练过程中实例化并初始化Visdom窗口、实时记录Loss的代码如下。</p><pre><code class=\"language-python\"># Visdom\nfrom visdom import Visdom\nimport numpy as np\n\n# 训练\nmodel = LinearModel()\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-4, weight_decay=1e-2, momentum=0.9)\ny_train = torch.tensor(y_train, dtype=torch.float32)\n\n# 实例化一个窗口\nviz = Visdom(port=8097)\n# 初始化窗口的信息\nviz.line([0.], [0.], win='train_loss', opts=dict(title='train loss'))\n\nfor n_iter in range(500):\n    input = torch.from_numpy(x_train)\n    output = model(input)\n    loss = nn.MSELoss()(output, y_train)\n    model.zero_grad()\n    loss.backward()\n    optimizer.step()\n    # 更新监听的信息\n    viz.line([loss.item()], [n_iter], win='train_loss', update='append')\n</code></pre><p>在Visdom的界面中，我们可以看到Loss的变化趋势如下图所示。Visdom不会像Tensorboard自动对曲线进行缩放或平滑，因此可以看到50轮之后，由于Loss值变化范围比较小，图像的抖动趋势被压缩得非常不明显。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/e0/54665114801a49e36a0211b5b3dbdce0.jpg?wh=1007x763\" alt=\"图片\"></p><h2>小结</h2><p>这节课我带你学习了两种可视化工具：TensorboardX和Visdom。</p><p>相信通过一节课的讲解和练习，这两种可视化工具如何安装、启动，还有如何用它们绘制线图和图片这些基本的操作，相信你都已经掌握了。</p><p>学习使用可视化工具的主要目的，<strong>是为了帮助我们在深度学习模型的训练过程中，实时监控一些数据，例如损失值、评价指标等等</strong>。对这些数据进行可视化监控，可以帮助我们感知各个参数与指标的变化，实时把握训练趋势。因此，如何将可视化工具应用于模型训练过程中，是我们学习的重点。</p><p>TensorboardX和Visdom还有其它诸如绘制散点图、柱状图、热力图等等多种多样的功能，如果你感兴趣，可以参考官方文档，类比我们今天学习的方法动手试一试，经过练习，一定可以熟练使用它们。</p><h2>每课一练</h2><p>参考Visdom快速上手中的例子，现在需要生成两组随机数，分别表示Loss和Accuracy。在迭代的过程中，如何用代码同时绘制出Loss和Accuracy两组数据呢？</p><p>欢迎记录你的思考或疑惑，也推荐你把今天学到的可视化工具分享给更多同事、朋友。</p>","neighbors":{"left":{"article_title":"14 | 构建网络：一站式实现模型搭建与训练","id":442442},"right":{"article_title":"16｜分布式训练：如何加速你的模型训练？","id":445886}},"comments":[{"had_liked":false,"id":321807,"user_name":"vcjmhg","can_delete":false,"product_type":"c1","uid":1526461,"ip_address":"","ucode":"B508D1E9B3F974","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/j24oyxHcpB5AMR9pMO6fITqnOFVOncnk2T1vdu1rYLfq1cN6Sj7xVrBVbCvHXUad2MpfyBcE4neBguxmjIxyiaQ/132","comment_is_top":false,"comment_ctime":1637050884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23111887364","product_id":100093301,"comment_content":"# 将窗口类实例化<br>viz = Visdom()<br># 创建窗口并初始化<br>viz.line([0.], [0], win=&#39;loss and accuracy&#39;, opts=dict(title=&#39;train_loss&#39;))<br><br>for n_iter in range(10):<br>    # 随机获取loss值<br>    loss = 0.2 * np.random.randn() + 1<br>    # 随机产生accuracy<br>    accuracy = 0.1 * np.random.randn()<br>    # 更新窗口图像,同时更新loss和accuracy<br>    viz.line(Y=[loss, accuracy], X=[n_iter], win=&#39;loss and accuracy&#39;, update=&#39;append&#39;)<br>    time.sleep(0.5)","like_count":5},{"had_liked":false,"id":353878,"user_name":"John(易筋)","can_delete":false,"product_type":"c1","uid":1180202,"ip_address":"北京","ucode":"BB4E58DD4B8F15","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/2a/90e38b94.jpg","comment_is_top":false,"comment_ctime":1659882736,"is_pvip":true,"replies":[{"id":"128764","content":"👍🏻","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1660014401,"ip_address":"北京","comment_id":353878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5954850032","product_id":100093301,"comment_content":"运行下面指令报错: Error while finding module specification for &#39;visdom.server&#39;<br>python -m visdom.server<br><br>解决方案：<br>Upgrade pip,<br><br>python -m pip install --upgrade pip<br>They try,<br><br>python -m pip install visdom<br><br>再次运行最开始的命令即可。 <br>ref: https:&#47;&#47;stackoverflow.com&#47;questions&#47;60623224&#47;modulenotfounderror-no-module-named-visdom-when-importing-visdom","like_count":1,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583289,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660014401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321654,"user_name":"咪西小悠","can_delete":false,"product_type":"c1","uid":2823411,"ip_address":"","ucode":"732E856780999D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/14/f3/175dc943.jpg","comment_is_top":false,"comment_ctime":1636979053,"is_pvip":false,"replies":[{"id":"116840","content":"hello，👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻，厉害，加油~","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1637050636,"ip_address":"","comment_id":321654,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5931946349","product_id":100093301,"comment_content":"viz = Visdom()<br>viz.line([[0., 0.]], [0], win=&#39;train&#39;, opts=dict(title=&#39;loss_accuracy&#39;, legend=[&#39;loss&#39;, &#39;acc&#39;]))<br><br>for n_iter in range(10):<br>    loss = 0.2 * np.random.randn() + 1<br>    accuracy = 0.1 * np.random.randn() + 1<br>    viz.line([[loss, accuracy]], [n_iter], win=&#39;train&#39;, update=&#39;append&#39;)<br>    time.sleep(0.5)","like_count":1,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530330,"discussion_content":"hello，👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻，厉害，加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637050636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353899,"user_name":"John(易筋)","can_delete":false,"product_type":"c1","uid":1180202,"ip_address":"北京","ucode":"BB4E58DD4B8F15","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/2a/90e38b94.jpg","comment_is_top":false,"comment_ctime":1659919122,"is_pvip":true,"replies":[{"id":"128765","content":"👍🏻👍🏻","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1660014411,"ip_address":"北京","comment_id":353899,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1659919122","product_id":100093301,"comment_content":"站在巨人的肩膀上，发现Visdom 在chrome上运行正常，Safari 不动。<br><br>from visdom import Visdom<br>import numpy as np<br>import time<br><br># 将窗口类实例化<br>viz = Visdom()<br># 创建窗口并初始化<br>viz.line([[0., 0.]], [0], win=&#39;loss and accuracy&#39;, opts=dict(title=&#39;train_loss&#39;))<br><br>for n_iter in range(10):<br>     # 随机获取loss值<br>    loss = 0.2 * np.random.randn() + 1<br>    # 随机产生accuracy<br>    accuracy = 0.1 * np.random.randn()<br>    # 更新窗口图像,同时更新loss和accuracy<br>    viz.line(Y=[[loss, accuracy]], X=[n_iter], win=&#39;loss and accuracy&#39;, update=&#39;append&#39;)<br>    time.sleep(0.5)","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583290,"discussion_content":"👍🏻👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660014412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350430,"user_name":"瑾瑜宝","can_delete":false,"product_type":"c1","uid":3040135,"ip_address":"","ucode":"1559620E18460A","user_header":"https://static001.geekbang.org/account/avatar/00/2e/63/87/d4579be2.jpg","comment_is_top":false,"comment_ctime":1656908121,"is_pvip":false,"replies":[{"id":"127494","content":"同学您好，是在命令行中执行命令tensorboard --logdir=log，而不是在python的编辑环境中执行。","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1656983921,"ip_address":"","comment_id":350430,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1656908121","product_id":100093301,"comment_content":"<br>老师您好，在tensorboard --logdir=runs  这一步出现了问题，求解<br>File &quot;C:\\Users\\86189\\AppData\\Local\\Temp&#47;ipykernel_82416&#47;59224237.py&quot;, line 1<br>    tensorboard --logdir=runs<br>    ^<br>SyntaxError: cannot assign to operator<br>","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578705,"discussion_content":"同学您好，是在命令行中执行命令tensorboard --logdir=log，而不是在python的编辑环境中执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656983921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3169115,"avatar":"https://static001.geekbang.org/account/avatar/00/30/5b/5b/1804b22f.jpg","nickname":"问鼎苍穹","note":"","ucode":"C059352076D92C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588158,"discussion_content":"老师，我在命令行输入命令后，说tensorboard不是内部或外部命令，也不是可运行的程序或批处理文件\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663580815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346613,"user_name":"亚林","can_delete":false,"product_type":"c1","uid":1018972,"ip_address":"","ucode":"4A5A6D24314B79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/5c/3f164f66.jpg","comment_is_top":false,"comment_ctime":1653288485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653288485","product_id":100093301,"comment_content":"使用visdom，上一节训练模型收伏在2附近了","like_count":0},{"had_liked":false,"id":346612,"user_name":"亚林","can_delete":false,"product_type":"c1","uid":1018972,"ip_address":"","ucode":"4A5A6D24314B79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/5c/3f164f66.jpg","comment_is_top":false,"comment_ctime":1653288424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653288424","product_id":100093301,"comment_content":"def cifar10_go():<br>    # 实例化一个窗口<br>    viz = Visdom(port=8097)<br>    # 初始化窗口的信息<br>    viz.line([0.], [0.], win=&#39;train_loss&#39;, opts=dict(title=&#39;train loss&#39;))<br><br>    transform = transforms.Compose([<br>        transforms.RandomResizedCrop((224, 224)),<br>        transforms.ToTensor(),<br>        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])<br>    ])<br>    cifar10_dataset = torchvision.datasets.CIFAR10(root=&#39;.&#47;data&#39;,<br>                                                   train=False,<br>                                                   transform=transform,<br>                                                   target_transform=None,<br>                                                   download=True)<br>    dataloader = DataLoader(dataset=cifar10_dataset,  # 传入的数据集, 必须参数<br>                            batch_size=32,  # 输出的batch大小<br>                            shuffle=True,  # 数据是否打乱<br>                            num_workers=4)  # 进程数, 0表示只有主进程<br>    model = MyCNN()<br>    # 交叉熵损失函数<br>    criterion = nn.CrossEntropyLoss()<br>    # 定义优化器<br>    optimizer = torch.optim.SGD(model.parameters(), lr=1e-4, weight_decay=1e-2, momentum=0.9)<br>    # 下面开始训练<br>    start = time.time()  # 记时开始<br>    for epoch in range(3):  # 设置要在全部数据上训练的次数<br><br>        for i, data in enumerate(dataloader):<br>            # data就是我们获取的一个batch size大小的数据<br><br>            inputs, labels = data<br>            optimizer.zero_grad()<br>            # 获得模型的输出结果，也即是当前模型学到的效果<br>            outputs = model(inputs)<br>            # 获得输出结果和数据真正类别的损失函数<br>            loss = criterion(outputs, labels)<br>            print(&#39;Epoch {}, Loss {}&#39;.format(epoch + 1, loss))<br>            loss.backward()<br>            optimizer.step()<br>            viz.line([loss.item()], [i], win=&#39;train_loss&#39;, update=&#39;append&#39;)<br>    end = time.time()  # 计时结束<br>    print(&#39;使用时间: {:.5f} s&#39;.format(end - start))<br>    torch.save(model, &#39;.&#47;MyCNN_model_23.pth&#39;)","like_count":0},{"had_liked":false,"id":345897,"user_name":"橙紫英","can_delete":false,"product_type":"c1","uid":2978511,"ip_address":"","ucode":"E1CB7DDD0461C9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/AhaSicobIfA85ZUYjOZ26AYHr4jejU9y6KwwXnytqWKMehiaWDOo6q6ejyuIs5UGpBial8zj9tTQWcrzDJjHvGTWg/132","comment_is_top":false,"comment_ctime":1652686275,"is_pvip":false,"replies":[{"id":"126280","content":"你这问题太抽象了^^。很难寻找答案啊。","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1652862954,"ip_address":"","comment_id":345897,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1652686275","product_id":100093301,"comment_content":"老师您好，为什么我在启动tensorboard后，运行程序以后报了如下错误呢，是什么原因造成的呢？<br>[WinError 10061] 由于目标计算机积极拒绝，无法连接。<br>on_close() takes 1 positional argument but 3 were given","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572580,"discussion_content":"你这问题太抽象了^^。很难寻找答案啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652862954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3040135,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/63/87/d4579be2.jpg","nickname":"瑾瑜宝","note":"","ucode":"1559620E18460A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578601,"discussion_content":"我和你的问题一样，请问解决了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656917670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345850,"user_name":"乐呵的hehe","can_delete":false,"product_type":"c1","uid":2952223,"ip_address":"","ucode":"E77E102206F038","user_header":"https://static001.geekbang.org/account/avatar/00/2d/0c/1f/fcc777e1.jpg","comment_is_top":false,"comment_ctime":1652631120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652631120","product_id":100093301,"comment_content":"from visdom import Visdom<br>import numpy as np<br>import time<br><br># 将窗口类实例化<br>viz = Visdom()<br># 创建窗口并初始化<br>viz.line([0.], [0], win=&#39;loss&#39;, opts=dict(title=&#39;loss&#39;))<br>viz.line([0.], [0], win=&#39;accuracy&#39;, opts=dict(title=&#39;accuracy&#39;))<br><br>for n_iter in range(100):<br>    # 随机获取loss值<br>    loss = 0.2 * np.random.randn() + 1<br>    accuracy = 0.2 * np.random.randn() + 1<br>    # 更新窗口图像<br>    viz.line([loss], [n_iter], win=&#39;loss&#39;, update=&#39;append&#39;)<br>    viz.line([accuracy], [n_iter], win=&#39;accuracy&#39;, update=&#39;append&#39;)<br>    time.sleep(0.5)","like_count":0},{"had_liked":false,"id":345760,"user_name":"乐呵的hehe","can_delete":false,"product_type":"c1","uid":2952223,"ip_address":"","ucode":"E77E102206F038","user_header":"https://static001.geekbang.org/account/avatar/00/2d/0c/1f/fcc777e1.jpg","comment_is_top":false,"comment_ctime":1652580254,"is_pvip":false,"replies":[{"id":"126213","content":"你好，感谢你的留言。<br>可以再看下课程的【安装】部分，首先需要安装【Tensorboard】，接下来安装【TensorboardX】。<br>你的环境里有【TensorboardX】，还缺少【Tensorboard】,可以使用pip install tensorboard命令进行安装。","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1652666514,"ip_address":"","comment_id":345760,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652580254","product_id":100093301,"comment_content":"老师，我的环境里有tensorboardx，可是为什么无法导入呢？报错如下：<br><br>ModuleNotFoundError                       Traceback (most recent call last)<br>Input In [7], in &lt;module&gt;<br>----&gt; 1 from torch.utils.tensorboard import SummaryWriter<br>      2 # PyTorch 1.8之前的版本请使用：<br>      3 # from tensorboardX import SummaryWriter<br>      4 import numpy as np<br><br>File D:\\Anaconda3\\envs\\PythonEnvironment1\\lib\\site-packages\\torch\\utils\\tensorboard\\__init__.py:1, in &lt;module&gt;<br>----&gt; 1 import tensorboard<br>      2 from setuptools import distutils<br>      4 LooseVersion = distutils.version.LooseVersion<br><br>ModuleNotFoundError: No module named &#39;tensorboard&#39;","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572230,"discussion_content":"你好，感谢你的留言。\n可以再看下课程的【安装】部分，首先需要安装【Tensorboard】，接下来安装【TensorboardX】。\n你的环境里有【TensorboardX】，还缺少【Tensorboard】,可以使用pip install tensorboard命令进行安装。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652666514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345191,"user_name":"小林子","can_delete":false,"product_type":"c1","uid":1145383,"ip_address":"","ucode":"058C95ECBFE422","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/27/77ca2bc2.jpg","comment_is_top":false,"comment_ctime":1652101024,"is_pvip":true,"replies":[{"id":"126082","content":"你好，感谢你的留言。<br>看具体需求了，我比较喜欢Tensorboard。^^","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1652250033,"ip_address":"","comment_id":345191,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652101024","product_id":100093301,"comment_content":"老师推荐使用哪种可视化工具了？","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571510,"discussion_content":"你好，感谢你的留言。\n看具体需求了，我比较喜欢Tensorboard。^^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652250034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}