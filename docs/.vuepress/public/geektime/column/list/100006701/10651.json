{"id":10651,"title":"第28讲 | 谈谈你的GC调优思路?","content":"<p>我发现，目前不少外部资料对G1的介绍大多还停留在JDK 7或更早期的实现，很多结论已经存在较大偏差，甚至一些过去的GC选项已经不再推荐使用。所以，今天我会选取新版JDK中的默认G1 GC作为重点进行详解，并且我会从调优实践的角度，分析典型场景和调优思路。下面我们一起来更新下这方面的知识。</p>\n<p>今天我要问你的问题是，<span class=\"orange\">谈谈你的GC调优思路？</span></p>\n<h2>典型回答</h2>\n<p>谈到调优，这一定是针对特定场景、特定目的的事情， 对于GC调优来说，首先就需要清楚调优的目标是什么？从性能的角度看，通常关注三个方面，内存占用（footprint）、延时（latency）和吞吐量（throughput），大多数情况下调优会侧重于其中一个或者两个方面的目标，很少有情况可以兼顾三个不同的角度。当然，除了上面通常的三个方面，也可能需要考虑其他GC相关的场景，例如，OOM也可能与不合理的GC相关参数有关；或者，应用启动速度方面的需求，GC也会是个考虑的方面。</p>\n<p>基本的调优思路可以总结为：</p>\n<ul>\n<li>\n<p>理解应用需求和问题，确定调优目标。假设，我们开发了一个应用服务，但发现偶尔会出现性能抖动，出现较长的服务停顿。评估用户可接受的响应时间和业务量，将目标简化为，希望GC暂停尽量控制在200ms以内，并且保证一定标准的吞吐量。</p>\n</li>\n<li>\n<p>掌握JVM和GC的状态，定位具体的问题，确定真的有GC调优的必要。具体有很多方法，比如，通过jstat等工具查看GC等相关状态，可以开启GC日志，或者是利用操作系统提供的诊断工具等。例如，通过追踪GC日志，就可以查找是不是GC在特定时间发生了长时间的暂停，进而导致了应用响应不及时。</p>\n</li>\n<li>\n<p>这里需要思考，选择的GC类型是否符合我们的应用特征，如果是，具体问题表现在哪里，是Minor GC过长，还是Mixed GC等出现异常停顿情况；如果不是，考虑切换到什么类型，如CMS和G1都是更侧重于低延迟的GC选项。</p>\n</li>\n<li>\n<p>通过分析确定具体调整的参数或者软硬件配置。</p>\n</li>\n<li>\n<p>验证是否达到调优目标，如果达到目标，即可以考虑结束调优；否则，重复完成分析、调整、验证这个过程。</p>\n</li>\n</ul><!-- [[[read_end]]] -->\n<h2>考点分析</h2>\n<p>今天考察的GC调优问题是JVM调优的一个基础方面，很多JVM调优需求，最终都会落实在GC调优上或者与其相关，我提供的是一个常见的思路。</p>\n<p>真正快速定位和解决具体问题，还是需要对JVM和GC知识的掌握，以及实际调优经验的总结，有的时候甚至是源自经验积累的直觉判断。面试官可能会继续问项目中遇到的真实问题，如果你能清楚、简要地介绍其上下文，然后将诊断思路和调优实践过程表述出来，会是个很好的加分项。</p>\n<p>专栏虽然无法提供具体的项目经验，但是可以帮助你掌握常见的调优思路和手段，这不管是面试还是在实际工作中都是很有帮助的。另外，我会还会从下面不同角度进行补充：</p>\n<ul>\n<li>\n<p><a href=\"http://time.geekbang.org/column/article/10513\">上一讲</a>中我已经谈到，涉及具体的GC类型，JVM的实际表现要更加复杂。目前，G1已经成为新版JDK的默认选择，所以值得你去深入理解。</p>\n</li>\n<li>\n<p>因为G1 GC一直处在快速发展之中，我会侧重它的演进变化，尤其是行为和配置相关的变化。并且，同样是因为JVM的快速发展，即使是收集GC日志等方面也发生了较大改进，这也是为什么我在上一讲留给你的思考题是有关日志相关选项，看完讲解相信你会很惊讶。</p>\n</li>\n<li>\n<p>从GC调优实践的角度，理解通用问题的调优思路和手段。</p>\n</li>\n</ul>\n<h2>知识扩展</h2>\n<p>首先，先来整体了解一下G1 GC的内部结构和主要机制。</p>\n<p>从内存区域的角度，G1同样存在着年代的概念，但是与我前面介绍的内存结构很不一样，其内部是类似棋盘状的一个个region组成，请参考下面的示意图。<br />\n<img src=\"https://static001.geekbang.org/resource/image/a6/f1/a662fda0de8af087c37c40a86a9cf3f1.png?wh=669*322\" alt=\"\" /></p>\n<p>region的大小是一致的，数值是在1M到32M字节之间的一个2的幂值数，JVM会尽量划分2048个左右、同等大小的region，这点可以从源码<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/fa2f93f99dbc/src/hotspot/share/gc/g1/heapRegionBounds.hpp\">heapRegionBounds.hpp</a>中看到。当然这个数字既可以手动调整，G1也会根据堆大小自动进行调整。</p>\n<p>在G1实现中，年代是个逻辑概念，具体体现在，一部分region是作为Eden，一部分作为Survivor，除了意料之中的Old region，G1会将超过region 50%大小的对象（在应用中，通常是byte或char数组）归类为Humongous对象，并放置在相应的region中。逻辑上，Humongous region算是老年代的一部分，因为复制这样的大对象是很昂贵的操作，并不适合新生代GC的复制算法。</p>\n<p>你可以思考下region设计有什么副作用？</p>\n<p>例如，region大小和大对象很难保证一致，这会导致空间的浪费。不知道你有没有注意到，我的示意图中有的区域是Humongous颜色，但没有用名称标记，这是为了表示，特别大的对象是可能占用超过一个region的。并且，region太小不合适，会令你在分配大对象时更难找到连续空间，这是一个长久存在的情况，请参考<a href=\"http://mail.openjdk.java.net/pipermail/hotspot-gc-use/2017-November/002726.html\">OpenJDK社区的讨论</a>。这本质也可以看作是JVM的bug，尽管解决办法也非常简单，直接设置较大的region大小，参数如下：</p>\n<pre><code>-XX:G1HeapRegionSize=&lt;N, 例如16&gt;M\n</code></pre>\n<p>从GC算法的角度，G1选择的是复合算法，可以简化理解为：</p>\n<ul>\n<li>\n<p>在新生代，G1采用的仍然是并行的复制算法，所以同样会发生Stop-The-World的暂停。</p>\n</li>\n<li>\n<p>在老年代，大部分情况下都是并发标记，而整理（Compact）则是和新生代GC时捎带进行，并且不是整体性的整理，而是增量进行的。</p>\n</li>\n</ul>\n<p>我在<a href=\"http://time.geekbang.org/column/article/10513\">上一讲</a>曾经介绍过，习惯上人们喜欢把新生代GC（Young GC）叫作Minor GC，老年代GC叫作Major GC，区别于整体性的Full GC。但是现代GC中，这种概念已经不再准确，对于G1来说：</p>\n<ul>\n<li>\n<p>Minor GC仍然存在，虽然具体过程会有区别，会涉及Remembered Set等相关处理。</p>\n</li>\n<li>\n<p>老年代回收，则是依靠Mixed GC。并发标记结束后，JVM就有足够的信息进行垃圾收集，Mixed GC不仅同时会清理Eden、Survivor区域，而且还会清理部分Old区域。可以通过设置下面的参数，指定触发阈值，并且设定最多被包含在一次Mixed GC中的region比例。</p>\n</li>\n</ul>\n<pre><code>–XX:G1MixedGCLiveThresholdPercent\n–XX:G1OldCSetRegionThresholdPercent\n</code></pre>\n<p>从G1内部运行的角度，下面的示意图描述了G1正常运行时的状态流转变化，当然，在发生逃逸失败等情况下，就会触发Full GC。<br />\n<img src=\"https://static001.geekbang.org/resource/image/47/ec/47dddbd91ad0e0adbd164632eb9facec.png?wh=585*358\" alt=\"\" /></p>\n<p>G1相关概念非常多，有一个重点就是Remembered Set，用于记录和维护region之间对象的引用关系。为什么需要这么做呢？试想，新生代GC是复制算法，也就是说，类似对象从Eden或者Survivor到to区域的“移动”，其实是“复制”，本质上是一个新的对象。在这个过程中，需要必须保证老年代到新生代的跨区引用仍然有效。下面的示意图说明了相关设计。<br />\n<img src=\"https://static001.geekbang.org/resource/image/eb/d3/eb50bb2b270478bc6f525aa615d4a3d3.png?wh=776*537\" alt=\"\" /></p>\n<p>G1的很多开销都是源自Remembered Set，例如，它通常约占用Heap大小的20%或更高，这可是非常可观的比例。并且，我们进行对象复制的时候，因为需要扫描和更改Card Table的信息，这个速度影响了复制的速度，进而影响暂停时间。</p>\n<p>描述G1内部的资料很多，我就不重复了，如果你想了解更多内部结构和算法等，我建议参考一些具体的<a href=\"https://www.infoq.com/articles/G1-One-Garbage-Collector-To-Rule-Them-All\">介绍</a>，书籍方面我推荐Charlie Hunt等撰写的《Java Performance Companion》。</p>\n<p>接下来，我介绍下大家可能还不了解的G1行为变化，它们在一定程度上解决了专栏其他讲中提到的部分困扰，如类型卸载不及时的问题。</p>\n<ul>\n<li>\n<p>上面提到了Humongous对象的分配和回收，这是很多内存问题的来源，Humongous region作为老年代的一部分，通常认为它会在并发标记结束后才进行回收，但是在新版G1中，Humongous对象回收采取了更加激进的策略。<br />\n我们知道G1记录了老年代region间对象引用，Humongous对象数量有限，所以能够快速的知道是否有老年代对象引用它。如果没有，能够阻止它被回收的唯一可能，就是新生代是否有对象引用了它，但这个信息是可以在Young GC时就知道的，所以完全可以在Young GC中就进行Humongous对象的回收，不用像其他老年代对象那样，等待并发标记结束。</p>\n</li>\n<li>\n<p>我在<a href=\"http://time.geekbang.org/column/article/7349\">专栏第5讲</a>，提到了在8u20以后字符串排重的特性，在垃圾收集过程中，G1会把新创建的字符串对象放入队列中，然后在Young GC之后，并发地（不会STW）将内部数据（char数组，JDK 9以后是byte数组）一致的字符串进行排重，也就是将其引用同一个数组。你可以使用下面参数激活：</p>\n</li>\n</ul>\n<pre><code>-XX:+UseStringDeduplication\n</code></pre>\n<p>注意，这种排重虽然可以节省不少内存空间，但这种并发操作会占用一些CPU资源，也会导致Young GC稍微变慢。</p>\n<ul>\n<li>类型卸载是个长期困扰一些Java应用的问题，在<a href=\"http://time.geekbang.org/column/article/10192\">专栏第25讲</a>中，我介绍了一个类只有当加载它的自定义类加载器被回收后，才能被卸载。元数据区替换了永久代之后有所改善，但还是可能出现问题。</li>\n</ul>\n<p>G1的类型卸载有什么改进吗？很多资料中都谈到，G1只有在发生Full GC时才进行类型卸载，但这显然不是我们想要的。你可以加上下面的参数查看类型卸载：</p>\n<pre><code>-XX:+TraceClassUnloading\n</code></pre>\n<p>幸好现代的G1已经不是如此了，8u40以后，G1增加并默认开启下面的选项：</p>\n<pre><code>-XX:+ClassUnloadingWithConcurrentMark\n</code></pre>\n<p>也就是说，在并发标记阶段结束后，JVM即进行类型卸载。</p>\n<ul>\n<li>我们知道老年代对象回收，基本要等待并发标记结束。这意味着，如果并发标记结束不及时，导致堆已满，但老年代空间还没完成回收，就会触发Full GC，所以触发并发标记的时机很重要。早期的G1调优中，通常会设置下面参数，但是很难给出一个普适的数值，往往要根据实际运行结果调整</li>\n</ul>\n<pre><code>-XX:InitiatingHeapOccupancyPercent\n</code></pre>\n<p>在JDK 9之后的G1实现中，这种调整需求会少很多，因为JVM只会将该参数作为初始值，会在运行时进行采样，获取统计数据，然后据此动态调整并发标记启动时机。对应的JVM参数如下，默认已经开启：</p>\n<pre><code>-XX:+G1UseAdaptiveIHOP\n</code></pre>\n<ul>\n<li>在现有的资料中，大多指出G1的Full GC是最差劲的单线程串行GC。其实，如果采用的是最新的JDK，你会发现Full GC也是并行进行的了，在通用场景中的表现还优于Parallel GC的Full GC实现。</li>\n</ul>\n<p>当然，还有很多其他的改变，比如更快的Card Table扫描等，这里不再展开介绍，因为它们并不带来行为的变化，基本不影响调优选择。</p>\n<p>前面介绍了G1的内部机制，并且穿插了部分调优建议，下面从整体上给出一些调优的建议。</p>\n<p>首先，<strong>建议尽量升级到较新的JDK版本</strong>，从上面介绍的改进就可以看到，很多人们常常讨论的问题，其实升级JDK就可以解决了。</p>\n<p>第二，掌握GC调优信息收集途径。掌握尽量全面、详细、准确的信息，是各种调优的基础，不仅仅是GC调优。我们来看看打开GC日志，这似乎是很简单的事情，可是你确定真的掌握了吗？</p>\n<p>除了常用的两个选项，</p>\n<pre><code>-XX:+PrintGCDetails\n-XX:+PrintGCDateStamps\n</code></pre>\n<p>还有一些非常有用的日志选项，很多特定问题的诊断都是要依赖这些选项：</p>\n<pre><code>-XX:+PrintAdaptiveSizePolicy // 打印G1 Ergonomics相关信息\n</code></pre>\n<p>我们知道GC内部一些行为是适应性的触发的，利用PrintAdaptiveSizePolicy，我们就可以知道为什么JVM做出了一些可能我们不希望发生的动作。例如，G1调优的一个基本建议就是避免进行大量的Humongous对象分配，如果Ergonomics信息说明发生了这一点，那么就可以考虑要么增大堆的大小，要么直接将region大小提高。</p>\n<p>如果是怀疑出现引用清理不及时的情况，则可以打开下面选项，掌握到底是哪里出现了堆积。</p>\n<pre><code>-XX:+PrintReferenceGC\n</code></pre>\n<p>另外，建议开启选项下面的选项进行并行引用处理。</p>\n<pre><code>-XX:+ParallelRefProcEnabled\n</code></pre>\n<p>需要注意的一点是，JDK 9中JVM和GC日志机构进行了重构，其实我前面提到的<strong>PrintGCDetails已经被标记为废弃</strong>，而<strong>PrintGCDateStamps已经被移除</strong>，指定它会导致JVM无法启动。可以使用下面的命令查询新的配置参数。</p>\n<pre><code>java -Xlog:help\n</code></pre>\n<p>最后，来看一些通用实践，理解了我前面介绍的内部结构和机制，很多结论就一目了然了，例如：</p>\n<ul>\n<li>如果发现Young GC非常耗时，这很可能就是因为新生代太大了，我们可以考虑减小新生代的最小比例。</li>\n</ul>\n<pre><code>-XX:G1NewSizePercent\n</code></pre>\n<p>降低其最大值同样对降低Young GC延迟有帮助。</p>\n<pre><code>-XX:G1MaxNewSizePercent\n</code></pre>\n<p>如果我们直接为G1设置较小的延迟目标值，也会起到减小新生代的效果，虽然会影响吞吐量。</p>\n<ul>\n<li>如果是Mixed GC延迟较长，我们应该怎么做呢？</li>\n</ul>\n<p>还记得前面说的，部分Old region会被包含进Mixed GC，减少一次处理的region个数，就是个直接的选择之一。<br />\n我在上面已经介绍了G1OldCSetRegionThresholdPercent控制其最大值，还可以利用下面参数提高Mixed GC的个数，当前默认值是8，Mixed GC数量增多，意味着每次被包含的region减少。</p>\n<pre><code>-XX:G1MixedGCCountTarget\n</code></pre>\n<p>今天的内容算是抛砖引玉，更多内容你可以参考<a href=\"https://docs.oracle.com/javase/9/gctuning/garbage-first-garbage-collector-tuning.htm#JSGCT-GUID-4914A8D4-DE41-4250-B68E-816B58D4E278\">G1调优指南</a>等，远不是几句话可以囊括的。需要注意的是，也要避免过度调优，G1对大堆非常友好，其运行机制也需要浪费一定的空间，有时候稍微多给堆一些空间，比进行苛刻的调优更加实用。</p>\n<p>今天我梳理了基本的GC调优思路，并对G1内部结构以及最新的行为变化进行了详解。总的来说，G1的调优相对简单、直观，因为可以直接设定暂停时间等目标，并且其内部引入了各种智能的自适应机制，希望这一切的努力，能够让你在日常应用开发时更加高效。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？今天的思考题是，定位Full GC发生的原因，有哪些方式？</p>\n<p>请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习奖励礼券，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":19469,"user_name":"clz1341521","can_delete":false,"product_type":"c1","uid":1179557,"ip_address":"","ucode":"3BDB4AB454C918","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/a5/eccc7653.jpg","comment_is_top":false,"comment_ctime":1533859998,"is_pvip":false,"replies":[{"id":"7571","content":"不错","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1535038628,"ip_address":"","comment_id":19469,"utype":1}],"discussion_count":2,"race_medal":0,"score":"263526865054","product_id":100006701,"comment_content":"1,首先通过printgcdetail 查看fullgc频率以及时长<br>2,通过dump 查看内存中哪些对象多，这些可能是引起fullgc的原因，看是否能优化<br>3,如果堆大或者是生产环境，可以开起jmc 飞行一段时间，查看这期间的相关数据来订位问题<br>","like_count":62,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421858,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535038628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302772,"discussion_content":"这是本地环境吧，线上环境这些调试工具往往由于权限的缘故连接不上，怎么弄呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599026888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16069,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1531757408,"is_pvip":false,"replies":[{"id":"5604","content":"不错思路，如果堆太大dump不现实呢；除了gc日志，还有没有其他工具？","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531848343,"ip_address":"","comment_id":16069,"utype":1}],"discussion_count":3,"race_medal":0,"score":"78841168736","product_id":100006701,"comment_content":"FullGc可通过Gc日志 或者添加fullgc前后堆dump 查看引起fullgc原因  CPU飙升可以看看jstack","like_count":19,"discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4817,"discussion_content":"jmap 查看线上堆栈占用情况 排序分析占比较多对象。 缩小问题范围","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565752122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420652,"discussion_content":"不错思路，如果堆太大dump不现实呢；除了gc日志，还有没有其他工具？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1531848343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":571721,"discussion_content":"konajdk可以玩不哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652365313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":420652,"ip_address":""},"score":571721,"extra":""}]}]},{"had_liked":false,"id":61025,"user_name":"半个西瓜","can_delete":false,"product_type":"c1","uid":1157662,"ip_address":"","ucode":"E6386B0A09B789","user_header":"https://static001.geekbang.org/account/avatar/00/11/aa/1e/e7ba85d9.jpg","comment_is_top":false,"comment_ctime":1547605148,"is_pvip":false,"replies":[{"id":"23329","content":"说来话长，简单说，除了尽量让更多GC工作并发进行，G1的内存区域是如棋盘一样的一个个region，非连续性内存划分以及一些设计，让相当一部分工作处理时间与堆大小不是很相关（当然也不是完全如此）","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549813711,"ip_address":"","comment_id":61025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44497278108","product_id":100006701,"comment_content":"老师，为什么 G1 对大堆非常友好。是因为运行机制也需要浪费一定的空间？","like_count":11,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436710,"discussion_content":"说来话长，简单说，除了尽量让更多GC工作并发进行，G1的内存区域是如棋盘一样的一个个region，非连续性内存划分以及一些设计，让相当一部分工作处理时间与堆大小不是很相关（当然也不是完全如此）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549813711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15506,"user_name":"潇洒的毅小峰","can_delete":false,"product_type":"c1","uid":1118141,"ip_address":"","ucode":"24638DAED92F08","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/bd/7a9b2a0c.jpg","comment_is_top":false,"comment_ctime":1531241578,"is_pvip":false,"replies":[{"id":"5309","content":"汗","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531319830,"ip_address":"","comment_id":15506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44480914538","product_id":100006701,"comment_content":"老师要快点更新啊感觉到26更不完，校招马上开始了呢，学的不亦乐乎","like_count":11,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420414,"discussion_content":"汗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531319830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82953,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1554358804,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"35914097172","product_id":100006701,"comment_content":"前面的课程还行，接触了垃圾收集这几节课，感觉这课程真的很赞，把我很多自信都打败了，要好好学习","like_count":9},{"had_liked":false,"id":226042,"user_name":"gwl","can_delete":false,"product_type":"c1","uid":1320592,"ip_address":"","ucode":"24F334E9AC0313","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/90/f68608f3.jpg","comment_is_top":false,"comment_ctime":1591934094,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"31656705166","product_id":100006701,"comment_content":"遇到过线上系统卡顿的情况。业务反应系统登录不上，用top -p -h 和 jstack 发现是gc线程（数量和内核数一致且线程编号连续），排查内存中对象数量 (jmap -histo:live javaPid) 和 请求日志(elk或者log4j日志)，发现是生成excel数据太多，一下子把老年代给撑爆了，导致疯狂的full gc。<br>后将excel生成类临时替换成 SXSSFWorkbook 就暂时没有出现过。","like_count":8,"discussions":[{"author":{"id":1597200,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5f/10/ed332d5a.jpg","nickname":"warriorSL","note":"","ucode":"902DA345FD2623","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352810,"discussion_content":"建议使用easyExcel，因为poi生成excel会创建大量的额外对象，容易导致oom，easyExcel内部其实也是对poi的封装，也是直接使用sxss模式的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614858134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223090,"user_name":"蓝伽图","can_delete":false,"product_type":"c1","uid":1442705,"ip_address":"","ucode":"F2FBCE654E95B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FmjAcibbIH7AH7Zwy5RZg6BMsjWTib8iaY6VhY7ibouZWWhpMX3RoJicgeiapUdK2iaSbatQYZFU3PdUPGjl5TqJnxTnQ/132","comment_is_top":false,"comment_ctime":1590999529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31655770601","product_id":100006701,"comment_content":"1.查看full gc的频率和时间，以及回收前和回收后老年代回收了多少垃圾<br>2.如果回收的垃圾很多，比如 80%-&gt;20% 考虑业务是否有可以优化的地方，是否有同类型对象短时间大量过期，可以在内存高位执行 dump  然后等full gc 后再dump做对比<br>3.如果回收的垃圾比较少，执行dump，查看哪些对象占用了大部分空间，是不是发生了内存泄露，引用都被哪些对象持有，是否应该及时释放等。","like_count":8},{"had_liked":false,"id":16064,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1531756419,"is_pvip":false,"replies":[{"id":"5608","content":"我理解card table是remembered set的一种实现","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531849110,"ip_address":"","comment_id":16064,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23006592899","product_id":100006701,"comment_content":"请问Remembered Set和cardtable关系是怎么样的？他们之间是如何协作一起完成g1 gc的？","like_count":6,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420651,"discussion_content":"我理解card table是remembered set的一种实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1531849110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2363417,"avatar":"https://static001.geekbang.org/account/avatar/00/24/10/19/8c3d6490.jpg","nickname":"R","note":"","ucode":"D09DECDF355D07","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578381,"discussion_content":"https://hllvm-group.iteye.com/group/topic/21468#post-272070 \nhttps://www.zhihu.com/question/63785052/answer/216407946 \n——from RednaxelaFX","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656686512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158138,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ab/fa/2967c8eb.jpg","nickname":"zhcc","note":"","ucode":"2AB9D306DBFAC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263620,"discussion_content":"是，《深入理解Java虚拟机》里这么说的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589213820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20190,"user_name":"蘅","can_delete":false,"product_type":"c1","uid":1169985,"ip_address":"","ucode":"4ADC831DCFADEC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIkickwTUOdmhMXj0oyXVAIXSUpCeCddSUnvWRJpSSB3PxEQHSr2pw813egTshq1QXNwxDcl3KZP1Q/132","comment_is_top":false,"comment_ctime":1534302680,"is_pvip":false,"replies":[{"id":"7381","content":"当然可以，无关的；建议随手试验一下，顺道熟悉各种gc怎么启用","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1534860602,"ip_address":"","comment_id":20190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14419204568","product_id":100006701,"comment_content":"-XX:+PrintGCDetails<br>-XX:+PrintGCDateStamps<br>这两个参数可用于CMS GC下吗？还是只能用于G1 GC?","like_count":4,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422143,"discussion_content":"当然可以，无关的；建议随手试验一下，顺道熟悉各种gc怎么启用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534860602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16419,"user_name":"Pantheon","can_delete":false,"product_type":"c1","uid":1110487,"ip_address":"","ucode":"D1FF4C18CE3475","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/d7/a52e390d.jpg","comment_is_top":false,"comment_ctime":1531938930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10121873522","product_id":100006701,"comment_content":"杨老师能不能具体讲讲cms，这个垃圾回收似乎用的还挺多的，昨天上官网介绍的也不是很详细能不能说说原理以及参数优化的东西，感谢了","like_count":2},{"had_liked":false,"id":16404,"user_name":"老实人Honey","can_delete":false,"product_type":"c1","uid":1080653,"ip_address":"","ucode":"EA4AB5C0C33090","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/4d/d98865b2.jpg","comment_is_top":false,"comment_ctime":1531926949,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10121861541","product_id":100006701,"comment_content":"这一集有难度了，平时接触得少，初步读来能吸收的真有限。:(","like_count":2},{"had_liked":false,"id":16247,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1531849534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10121784126","product_id":100006701,"comment_content":"感谢了这么晚还在回复.点赞了","like_count":3},{"had_liked":false,"id":15556,"user_name":"三口先生","can_delete":false,"product_type":"c1","uid":1117257,"ip_address":"","ucode":"8E8672321FE510","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/49/d71e939d.jpg","comment_is_top":false,"comment_ctime":1531292121,"is_pvip":false,"replies":[{"id":"5307","content":"嗯，不过，加live会触发full gc吧","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531318823,"ip_address":"","comment_id":15556,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10121226713","product_id":100006701,"comment_content":"jmap指令加不加live，分析是否是内存泄漏或者是请求的内存处理不过来等原因。","like_count":3,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420440,"discussion_content":"嗯，不过，加live会触发full gc吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531318823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49588,"user_name":"Jacky.L","can_delete":false,"product_type":"c1","uid":1177556,"ip_address":"","ucode":"C7386D54129BC1","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/d4/1bc7e9b4.jpg","comment_is_top":false,"comment_ctime":1544739561,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5839706857","product_id":100006701,"comment_content":"请问不同年代的GC会分别进行标记吗？还是说不同年代会对整个堆整体标记一次","like_count":1,"discussions":[{"author":{"id":2780637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/rwDnuLiceLXQgtjokfEUPY5u2bUfzPAqOcD4YsUTT6GwsNE6lpfYeIDXMSeicVVdCOO0RnlibGk73LH4rOTQtaUsg/132","nickname":"scrat","note":"","ucode":"C5834B408A79D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396269,"discussion_content":"会分别标我认为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632407299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16059,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1531755629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826722925","product_id":100006701,"comment_content":"Remembered Set和cardtable 是什么关系什么时候使用能说明下这个过程吗","like_count":1},{"had_liked":false,"id":279727,"user_name":"随遇而安","can_delete":false,"product_type":"c1","uid":1903385,"ip_address":"","ucode":"BD7F7DB2A54B23","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkKNKezgVwH4EnyLvfib2W2DaRC2U3q3kYDySK5HPPCSWicgtQgicX68UODich1I1FQaGkQ8Vk2pLpibA/132","comment_is_top":false,"comment_ctime":1613928919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613928919","product_id":100006701,"comment_content":"请问一下老师文中提到的“逃逸失败”能否解释一下是什么意思？万分感谢","like_count":0},{"had_liked":false,"id":260653,"user_name":"林毅鑫","can_delete":false,"product_type":"c1","uid":1917916,"ip_address":"","ucode":"1BB3D186E90D96","user_header":"https://static001.geekbang.org/account/avatar/00/1d/43/dc/95d4f2c5.jpg","comment_is_top":false,"comment_ctime":1605078704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605078704","product_id":100006701,"comment_content":"一边看这个学习，一边拿这些问题提问🤭🤭🤭","like_count":0},{"had_liked":false,"id":192711,"user_name":"护爽使者","can_delete":false,"product_type":"c1","uid":1275464,"ip_address":"","ucode":"12DC35DD74671C","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/48/5ab89daa.jpg","comment_is_top":false,"comment_ctime":1584869255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584869255","product_id":100006701,"comment_content":"线上问题都怎么解决的？死锁， top 100%等","like_count":0},{"had_liked":false,"id":150191,"user_name":"王盛武","can_delete":false,"product_type":"c1","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1573476781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573476781","product_id":100006701,"comment_content":"字符串排重的特性,  是JDK哪个版本提供的?","like_count":0},{"had_liked":false,"id":103208,"user_name":"子不语","can_delete":false,"product_type":"c1","uid":1123186,"ip_address":"","ucode":"907AB44706467B","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/72/70190bc1.jpg","comment_is_top":false,"comment_ctime":1560396650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560396650","product_id":100006701,"comment_content":"老师，咨询个问题，我通过jinfo -flag +PrintGC PID  jinfo -flag +PrintGCDetails PID，没办法指定路径，gc日志输出在哪里的，找不到。","like_count":0},{"had_liked":false,"id":26802,"user_name":"Sunny Li","can_delete":false,"product_type":"c1","uid":1252120,"ip_address":"","ucode":"7C3B8ABF6DEF93","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/18/80b4d8ae.jpg","comment_is_top":false,"comment_ctime":1537755672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537755672","product_id":100006701,"comment_content":"老师，我想问一下除了dump文件和gc日志，还可以使用什么工具可以用&#39;jconsole吗，具体关注那几个参数","like_count":0},{"had_liked":false,"id":17463,"user_name":"于海","can_delete":false,"product_type":"c1","uid":1054754,"ip_address":"","ucode":"19C026AC2A5A9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/22/e817914c.jpg","comment_is_top":false,"comment_ctime":1532662257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532662257","product_id":100006701,"comment_content":"这个问题真的很难，如果没有实际的生产经验，真的很难回答，麻烦老师能给提供一些参考方案吗？谢谢您～","like_count":0},{"had_liked":false,"id":16246,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1531848907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531848907","product_id":100006701,"comment_content":"如果dump堆太大.我觉得可以先通过jmap -heap看下是哪个区占用特别多.再看下对内存占用前20到30的大对象.然后结合jstat gccuase 查看下引起Gc原因 .目前想到这些思路请问还有更好的工具？jconsole jdb远程连接查看占用？","like_count":1},{"had_liked":false,"id":16060,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1531755676,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1531755676","product_id":100006701,"comment_content":"Remembered Set和cardtable的关系是什么？他们什么时候使用能说明下吗","like_count":0,"discussions":[{"author":{"id":2938089,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/V71ITElU4RwprR74pPXB6LhIMrfeAHuHjicZmS7smy2tibBSMoA9awaTe86wziatYzoy3qVOGs0DnSTy6ah5L6bKA/132","nickname":"四喜丸子","note":"","ucode":"33D46CC1B747BA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577843,"discussion_content":"需要自己去查找资料，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656387170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15459,"user_name":"小刚","can_delete":false,"product_type":"c1","uid":1130187,"ip_address":"","ucode":"AA2E7773B399F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/cb/a0624173.jpg","comment_is_top":false,"comment_ctime":1531198256,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1531198256","product_id":100006701,"comment_content":"老师讲的很到位，看得不是很明白，得多看几遍。","like_count":1}]}