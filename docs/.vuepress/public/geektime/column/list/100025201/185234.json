{"id":185234,"title":"70 | 怎么写设计文档？","content":"<p>你好，我是七牛云许式伟。</p><p>在 “<a href=\"https://time.geekbang.org/column/article/182924\">68 | 软件工程的宏观视角</a>” 一讲中，我们用最基本的 “瀑布模型” 来描述现代软件工程的全过程，大体如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/71/41/7141be3e927921fa8a73cd3d4a753541.png?wh=1284*404\" alt=\"\"></p><p>在这个过程中，有两个阶段非常关键：一个是 “产品设计”，一个是 “架构设计”。产品设计由产品经理主导，关注的是 “如何以产品特性来系统化地满足用户需求”。架构设计由架构师主导，关注的是 “业务系统如何系统化地进行分解与交付”。</p><p>“设计” 一词非常精妙。无论是 “产品设计”，还是 “架构设计”，其实谈的都是 “需求如何被满足” 这件事情的共识。无论是 “产品文档”，还是 “架构文档”，它们都是设计文档的一种，都有团队内及团队间的协同价值。</p><p>上一讲 “<a href=\"https://time.geekbang.org/column/article/183900\">69 | 团队的共识管理</a>” 我们已经从团队的协同角度，谈了共识的重要性。本质上，我们也是在谈 “设计” 的重要性。换个角度来说，一个企业的使命、愿景与价值观，何尝不是这个企业最高维度的 “设计” 呢？</p><p>产品经理与架构师是一体两面，对人的能力要求的确会比较像，但是分工不同，关注的维度不同。产品经理关注的维度，其关键词是：用户需求、技术赋能、商业成功。而架构师关注的维度，其关键词是：用户需求、技术实现、业务迭代。</p><p>今天我们谈的 “设计文档”，重点聊的是 “架构设计文档” 怎么写，但是本质上所有 “设计文档” 的内容组织逻辑，都应该是相通的。它们的内容大体如下：</p><!-- [[[read_end]]] --><ul>\n<li>现状 ：我们在哪里，现状是什么样的？</li>\n<li>需求：我们的问题或诉求是什么，要做何改进？</li>\n<li>需求满足方式：\n<ul>\n<li>要做成什么样，交付物规格，或者说使用界面（接口）是什么？</li>\n<li>怎么做到？交付物的实现原理。</li>\n</ul>\n</li>\n</ul><p>关于设计文档内容组织的详细说明，我们在前面 “<a href=\"https://time.geekbang.org/column/article/142032\">45 | 架构：怎么做详细设计？</a>” 中已经进行过交代。概括来说，这些设计文档要素的关键在于以下几点。</p><p>现状：不要长篇累牍。现状更多的是陈述与我们要做的改变相关的重要事实，侧重于强调这些事实的存在性和重要性。</p><p>需求：同样不需要长篇累牍。痛点只要够痛，大家都知道，所以需求陈述是对痛点和改进方向的一次共识确认。</p><p>需求满足方式：要详写，把我们的设计方案谈清楚。具体来说，它包括 “交付物规格” 和 “实现原理” 两个方面。</p><p>交付物规格，或者说使用界面，体现的是别人要怎么使用我。对于 “产品设计”，交付物规格可能是 “产品原型”。对于 “架构设计”，交付物规格可能是 “网络 API 协议” 或者 “包（package）导出的公开类或函数”。</p><p>实现原理，谈的是我们是怎么做到的。对于 “产品设计”，它谈的是用户需求对应的 UserStory 设计，也就是业务流具体是怎么完成的。而对于 “架构设计”，它谈的是 UserStory 具体如何被我们的程序逻辑所实现。</p><p>以下这个公式大家都耳熟能详了：</p><blockquote>\n<p>程序 = 数据结构 + 算法</p>\n</blockquote><p>它是一个很好的指导思想。当我们谈程序实现逻辑时，我们总是从数据结构和算法两个维度去描述它。其中，“数据结构” 可以是内存数据结构，也可以是外存数据结构，还可以是数据库的 “表结构”。“算法” 基于 “数据结构”，它描述的是 UserStory 的具体实现，它可以是 UML 时序图（Sequence Diagram），也可以是伪代码（Pseudo Code）。</p><h2>多个设计方案的对比</h2><p>在现实中，一篇设计文档有时候不是只有一个设计方案，而是有多个可能的需求实现方式。在这个时候，通常我们会概要地描述清楚两个设计方案的本质差别，并且从如下这些维度进行对比：</p><ul>\n<li>方案的易实施性与可维护性。</li>\n<li>方案的时间复杂度与空间复杂度。</li>\n</ul><p>不同的业务系统倾向性不太一样。对于绝大部分业务，我们最关心的是工程效率，所以方案的易实施性与可维护性为先；但是对于部分对成本与性能非常敏感的业务，则通常在保证方案的时间复杂度与空间复杂度达到业务预期的前提下，再考虑工程效率。</p><p>在确定了设计方案的倾向性后，我们就不会就我们放弃的设计方案做过多的展开，整个设计文档还是以描述一种设计方案为主。</p><p>如果我们非要写两套设计方案，这时应该把设计文档分为两篇独立的设计文档，而不是揉在一起。</p><p>你可能觉得没有人会这么不怕麻烦，居然写两套设计方案。但是如果两套设计方案的比较优势没有那么显著时，现实中写两套设计方案确实是存在的，并且应该被鼓励。</p><p>为什么这么说？</p><p>这是因为 “设计” 是软件工程中的头等大事，我们应该在这里 “多浪费点时间”，这样的 “浪费” 最终会得到十倍甚至百倍以上的回报。</p><h2>使用界面（接口）</h2><p>在描述交付物的规格上，系统的概要设计，与模块的详细设计很不一样。</p><p>对于 “模块的详细设计” 来说，规格描述相对简单。因为我们关注的面只是模块本身，而非模块之间的关系。对于模块本身，我们核心关注点是以下两点：一是接口是否足够简单，是否自然体现业务需求。二是尽可能避免进行接口变更，接口要向前兼容。</p><p>关于接口变更，后面有机会我们还会进行详细的讨论，这一讲先略过。</p><p>但对于 “系统的概要设计” 来说，我们第一关心的是模块关系，第二关心的才是各个模块的核心接口。这些接口能够把系统的关键 UserStory 都串起来。</p><p>表达模块关系在某种程度来说的确非常重要，这可能是许多人喜欢画架构图的原因。</p><p>但描述模块间的关系的确是一件比较复杂的事情。我们在 “<a href=\"https://time.geekbang.org/column/article/117783\">32 | 架构：系统的概要设计</a>” 这一讲中实际上先回避了这个问题。</p><p>一种思路是我们不整体描述模块关系，直接基于一个个 UserStory 把模块之间的调用关系画出来。比如对于对象存储系统，我们上传一个文件的业务流程图看起来是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/a1/89/a126729331be7854fad7435d293ced89.png?wh=866*724\" alt=\"\"></p><p>这类图相信大家见过不少。但它从模块关系表达上并不是好的选择，因为根本并没有对模块关系进行抽象。这类图更多被用在面向客户介绍 API SDK 的背后的实现原理时采用，而非出现在设计文档。</p><p>如果只是对于 UserStory 业务流程的表达来说，UML 时序图通常是更好的表达方式。</p><p>但是，怎么表达模块关系呢？</p><p>一个方法是对模块的调用接口进行分类。通过 “<a href=\"https://time.geekbang.org/column/article/175236\">62 | 重新认识开闭原则 (OCP)</a>” 这一讲我们知道，一个模块对外提供的访问接口无非是：</p><ul>\n<li>常规 DOM API，即正常的模块功能调用；</li>\n<li>事件（Event）的发送与监听；</li>\n<li>插件（Plugin）的注册。</li>\n</ul><p>这些不同类型的访问接口，分别代表了模块间不同的依赖关系。我们回忆一下 MVC 的框架图，如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/32/cb/32c7df68c3f5d11a0a32f80d7c3a42cb.png?wh=1440*810\" alt=\"\"></p><p>在图中，View 监听 Model 层的数据变更事件。View 转发用户交互事件给 Controller。Controller 则负责将用户交互事件转为 Model 层的 DOM API 调用。</p><p>另一个表达模块关系的视角，是从架构分解看，我们把系统看作 “一个最小化的核心系统 + 多个彼此正交分解的周边系统”。例如，我们实战案例 — 画图程序的模块关系图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/62/75/6270cc365ce1a19b230e243188ff7375.png?wh=876*2056\" alt=\"\"></p><p>需要清楚的是，模块关系图的表达是非常粗糙的，虽然它有助于我们理解系统分解的逻辑。为了共识的精确，我们仍然需要将各个模块核心的使用界面（接口）表达出来。</p><h2>实现原理</h2><p>谈清楚了交付物的规格，我们就开始谈实现。对于 “<a href=\"https://time.geekbang.org/column/article/117783\">系统的概要设计</a>” 与 “<a href=\"https://time.geekbang.org/column/article/142032\">模块的详细设计</a>”，两者实现上的表达有所不同。</p><p>对于模块的详细设计来说，需要先交代清楚 “数据结构” 是什么样的，然后再将一个个 UserStory 的业务流程讲清楚。</p><p>对于系统的概要设计来说，核心是交代清楚不同模块的配合关系，所以无需交代数据结构，只需要把一个个 UserStory 的业务流程讲清楚。</p><p>无论是否要画 UML 时序图，在表达上伪代码（Pseudo Code）的设计都是必需的。</p><p>伪代码的表达方式及语义需要在团队内形成默契。这种伪代码的语义表达必须是精确的。</p><p>比如，对于网络请求相关的伪代码，我们可以基于类似 <a href=\"https://github.com/qiniu/httptest\">qiniu httptest</a> 的语法，如下：</p><pre><code># 请求\npost /v1/foo/bar json {...}\n\n# 返回\nret json {...}\n</code></pre><p>类似地，对于 MongoDB，我们可以直接用 MongoDB 的 JavaScript 脚本文法。对于 MySQL，则可以直接基于 SQL 语法。等等。</p><h2>结语</h2><p>前面在 “<a href=\"https://time.geekbang.org/column/article/142032\">45 | 架构：怎么做详细设计？</a>” 我们实际上已经大体介绍了模块级的设计文档怎么写。所以这一讲我们主要较为全面地补充了各类设计文档，包括产品设计、系统的概要设计等在细节上与模块设计文档的异同。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们谈谈 “如何阅读别人的代码”。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"69 | 团队的共识管理","id":183900},"right":{"article_title":"71 | 如何阅读别人的代码？","id":186399}},"comments":[{"had_liked":false,"id":245981,"user_name":"小风","can_delete":false,"product_type":"c1","uid":1181942,"ip_address":"","ucode":"03D2FF9A81AC98","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/f6/76285598.jpg","comment_is_top":false,"comment_ctime":1599124113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48843764369","product_id":100025201,"comment_content":"我们团队的设计文档会从几个方面着手：1）系统整体用逻辑架构、数据架构、运行架构、部署架构、开发架构五个视图来描述；2）各模块的领域对象模型和接口设计；3）对于核心模块，再次用以上用五个视图拆解细化设计，关键的流程或算法用时序图或伪码描述。常规的增删改查业务和非常简单的业务模块不会过多在文档上体现，一带而过，团队内部达成共识，有通用的解决方案。","like_count":12},{"had_liked":false,"id":168136,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1578017332,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"35937755700","product_id":100025201,"comment_content":"提供像样接口文档的都少 因为接口更改了文档都没有人改……","like_count":8,"discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115668,"discussion_content":"1.我写的代码，除了dao层。每一个方法都会有注释。这样做对于长期维护是不好的。因为它相当于“冗余代码”，时常维护不及时，进而导致意思出现分歧。\n\n2.但我写注释不是为了别人易维护，当然这也能算是一个附带价值。但最主要的目的是，为了在提炼每个方法时，通过思考这个方法是干什么的，有哪些异常，有哪些逻辑，以后可能会有什么变动，进而权衡当前实现是否符合设计原则，以提高自己的编码能力。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578027062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079417,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/79/8f5c0fc3.jpg","nickname":"Terry·LI","note":"","ucode":"2516FBCCE33236","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332321,"discussion_content":"这里接口和文中的接口不是一个概念吧，对于app的接口来说，会经常变化，核心各层之间的接口不会经常变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607158015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589523,"avatar":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","nickname":"树心","note":"","ucode":"6C329F0FF798B9","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300981,"discussion_content":"swagger这样的工具有用没。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598352710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169420,"user_name":"沫沫（美丽人生）","can_delete":false,"product_type":"c1","uid":1051023,"ip_address":"","ucode":"FC73BF0D79E3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/8f/ad6039b6.jpg","comment_is_top":false,"comment_ctime":1578343642,"is_pvip":false,"replies":[{"id":"65685","content":"ddd 强调的是按领域的业务分解，这个不是我们这个架构课翻来覆去强调的原则么。每个软件实体都有自己的业务边界，这就是领域。基于这种思想进行架构，就是ddd。","user_name":"作者回复","comment_id":169420,"uid":"1228022","ip_address":"","utype":1,"ctime":1578355383,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":2,"race_medal":0,"score":"23053180122","product_id":100025201,"comment_content":"许老师，怎么理解DDD和模块划分的关系呢？","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480548,"discussion_content":"ddd 强调的是按领域的业务分解，这个不是我们这个架构课翻来覆去强调的原则么。每个软件实体都有自己的业务边界，这就是领域。基于这种思想进行架构，就是ddd。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578355383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051023,"avatar":"https://static001.geekbang.org/account/avatar/00/10/09/8f/ad6039b6.jpg","nickname":"沫沫（美丽人生）","note":"","ucode":"FC73BF0D79E3FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":124897,"discussion_content":"非常感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578457805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168084,"user_name":"WadeYu","can_delete":false,"product_type":"c1","uid":1242574,"ip_address":"","ucode":"F38DE34449DE52","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/ce/7d8807d5.jpg","comment_is_top":false,"comment_ctime":1578012135,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23052848615","product_id":100025201,"comment_content":"我呆过的中小型公司，没有一个有做系统设计文档的，我猜大部分公司都这样，最多功能开发好后，再写接口文档，有时候这步都省了","like_count":5,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396489,"discussion_content":"前后端分离的情况下，接口文档还是要有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632445770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205712,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1586706473,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18766575657","product_id":100025201,"comment_content":"感觉详细设计相当于把伪代码写出来，有些地方是占位符，开发代码相当于做填空题。","like_count":4},{"had_liked":false,"id":271627,"user_name":"Sruby","can_delete":false,"product_type":"c1","uid":1016232,"ip_address":"","ucode":"A7D1B93F41DA0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/a8/559afe8b.jpg","comment_is_top":false,"comment_ctime":1609742216,"is_pvip":false,"replies":[{"id":"98544","content":"广义的数据结构就是你说的类图，也就是说定义完数据结构还不够，把数据结构的接口也描述出来。","user_name":"作者回复","comment_id":271627,"uid":"1228022","ip_address":"","utype":1,"ctime":1609776491,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":1,"score":"10199676808","product_id":100025201,"comment_content":"请问详细设计的时序图是中的对象是类吗？如果是类是不是还需要在时序图之前增加类图说明下各个类的作用。","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512980,"discussion_content":"广义的数据结构就是你说的类图，也就是说定义完数据结构还不够，把数据结构的接口也描述出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609776491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350644,"user_name":"程序员Artist","can_delete":false,"product_type":"c1","uid":1063635,"ip_address":"","ucode":"F6AEC69AE77DC0","user_header":"https://static001.geekbang.org/account/avatar/00/10/3a/d3/c273ee50.jpg","comment_is_top":false,"comment_ctime":1657072692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657072692","product_id":100025201,"comment_content":"这篇很重要，但是设计文档的示范图还是少了一点呀","like_count":0},{"had_liked":false,"id":348841,"user_name":"C曦小哥","can_delete":false,"product_type":"c1","uid":2730807,"ip_address":"","ucode":"0920EE1D138A55","user_header":"https://static001.geekbang.org/account/avatar/00/29/ab/37/3016d825.jpg","comment_is_top":false,"comment_ctime":1655451513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655451513","product_id":100025201,"comment_content":"1、我团队的设计文档更像是功能设计文档，分模块去描述需求涉及的所有功能及其实现，这是因为项目的整体架构已经很成熟了。<br>2、开发在设计功能更多会考虑易实施性和可维护性，需求多，稳稳上生产才是首要考虑。<br>3、项目太复杂，依赖开发人员得先有一个整体系统的概念，不然后续容易亡羊补牢。","like_count":0},{"had_liked":false,"id":309029,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1486846,"ip_address":"","ucode":"2AD54B5B3F8298","user_header":"https://static001.geekbang.org/account/avatar/00/16/af/fe/e9127277.jpg","comment_is_top":false,"comment_ctime":1629899026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629899026","product_id":100025201,"comment_content":"现状，需求，需求满足方式","like_count":0},{"had_liked":false,"id":180966,"user_name":"章皓","can_delete":false,"product_type":"c1","uid":1304298,"ip_address":"","ucode":"F19D05D670A48B","user_header":"https://static001.geekbang.org/account/avatar/00/13/e6/ea/2290222a.jpg","comment_is_top":false,"comment_ctime":1582450127,"is_pvip":false,"replies":[{"id":"70354","content":"彼此正交就是相互没有直接联系，就算有相互作用也是通过核心系统的接口进行。这里面难点是最小单位的核心系统，需要足够通用的接口方法来保证。","user_name":"作者回复","comment_id":180966,"uid":"1228022","ip_address":"","utype":1,"ctime":1582603307,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"1582450127","product_id":100025201,"comment_content":"许老师，模块描述上，“一个最小化的核心系统 + 多个彼此正交分解的周边系统”，如何理解正交分解，这一点重要吗，我在罗列出的多个周边系统上，应该有什么章法，如何才是满足正交分解","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484866,"discussion_content":"彼此正交就是相互没有直接联系，就算有相互作用也是通过核心系统的接口进行。这里面难点是最小单位的核心系统，需要足够通用的接口方法来保证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582603307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168811,"user_name":"sswrock","can_delete":false,"product_type":"c1","uid":1683896,"ip_address":"","ucode":"9D8DA794D7378D","user_header":"https://static001.geekbang.org/account/avatar/00/19/b1/b8/9ff50118.jpg","comment_is_top":false,"comment_ctime":1578191240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578191240","product_id":100025201,"comment_content":"前面的画图「实战」需要亲自动手coding，踩 填各种坑 可以帮助更好理解；<br>这部分的「思想」需要反复阅读，持续反思琢磨","like_count":0}]}