{"id":299155,"title":"09 | 线上服务：如何在线上提供高并发的推荐服务？","content":"<p>你好，我是王喆。今天开始，我们进入线上服务篇的学习。</p><p>很多同学提起推荐系统，首先想到的是那些结构“华丽”，发展迅速的推荐模型。但事实上，在一个实际的工业级推荐系统中，训练和实现推荐模型的工作量往往连一半都没有。大量的工作都发生在搭建并维护推荐服务器、模型服务模块，以及特征和模型参数数据库等线上服务部分。</p><p>同时，由于线上服务模块是直接服务用户，产生推荐结果的模块，如果一旦发生延迟增加甚至服务宕机的情况，就会产生公司级别的事故。因此毫不夸张地说，线上服务实际上是推荐系统中最关键的一个模块。</p><p>线上服务如果写得不好，不仅杂乱无章，而且难以升级维护。因此，为了让你掌握搭建起一个支持深度学习的、稳定可扩展的推荐服务的方法，在这一模块中，我们会依次来讲线上服务器、特征存储、模型服务等模块的知识。</p><p>今天，我们先聚焦线上服务器，一起搭建直接产生推荐结果的服务接口。在这个过程中，我们按照先了解、后思考、再实践的顺序，依次解决这3个关键问题：</p><ol>\n<li>一个工业级的推荐服务器内部究竟都做了哪些事情？</li>\n<li>像阿里、字节、腾讯这样级别的公司，它们的推荐系统是怎么承接住每秒百万甚至上千万的推荐请求的？</li>\n<li>我们自己该如何搭建一个工业级推荐服务器的雏形呢？</li>\n</ol><!-- [[[read_end]]] --><h2>工业级推荐服务器的功能</h2><p>首先，我们来解决第一个问题，一个工业级的推荐服务器内部究竟做了哪些事情？要回答这个问题，我们要先回到专栏的出发点，在推荐系统的技术架构图上找到推荐系统线上服务模块的位置。只有我们心中有全局，学习才能有重点。图1中红色的部分就是我们要详细来讲的线上服务模块。</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/ed/c16ef5cbebc41008647425083b7b38ed.jpeg?wh=1901*1269\" alt=\"\" title=\"图1 推荐系统技术架构图\"></p><p>可以看到，线上服务模块的功能非常繁杂，它不仅需要跟离线训练好的模型打交道，把离线模型进行上线，在线进行模型服务（Model Serving），还需要跟数据库打交道，把候选物品和离线处理好的特征载入到服务器。</p><p>而且线上服务器内部的逻辑也十分地复杂，不仅包括了一些经典的过程，比如召回层和排序层，还包括一些业务逻辑，比如照顾推荐结果多样性，流行度的一些硬性的混合规则，甚至还包括了一些AB测试相关的测试代码。</p><h2>高并发推荐服务的整体架构</h2><p>我刚才说的就是线上服务的技术框架了，可以说，想要把线上服务写好难度并不小，更何况在面对高QPS的压力下，事情还会变得更复杂。接下来，我们就来看第二个问题，说一说阿里、字节、腾讯这样级别的公司，使用了哪些策略来承接住每秒百万甚至是上千万推荐请求的。</p><p>说实话，想彻底讲清楚这个问题并不容易，因为大厂关于甚高并发具体的解决方案是集整个集团的技术精英打造的，而且维护一个高可用的服务集群的工作也不是一个算法工程师的主要工作方向。但这里，我还是希望你能够从宏观的角度了解高并发的主要解决方案，因为它是一个工业级推荐系统的重要组成部分，也是我们在与架构组配合工作时应有的知识储备。</p><p>宏观来讲，高并发推荐服务的整体架构主要由三个重要机制支撑，它们分别是<strong>负载均衡、缓存、推荐服务降级机制。</strong>下面，我们一一来看。</p><p>首先是负载均衡。它是整个推荐服务能够实现高可用、可扩展的基础。当推荐服务支持的业务量达到一定规模的时候，单独依靠一台服务器是不可行的，无论这台服务器的性能有多强大，都不可能独立支撑起高QPS（Queries Per Second，每秒查询次数）的需求。这时候，我们就需要增加服务器来分担独立节点的压力。既然有多个劳动力在干活，那我们还需要一个“工头”来分配任务，以达到按能力分配和高效率分配的目的，这个“工头”就是所谓的“负载均衡服务器”。</p><p>下图就很好地展示了负载均衡的原理。我们可以看到，负载均衡服务器（Load Balancer）处在一个非常重要的位置。因此在实际工程中，负载均衡服务器也经常采用非常高效的nginx技术选型，甚至采用专门的硬件级负载均衡设备作为解决方案。</p><p><a href=\"https://github.com/dmytrostriletskyi/heroku-load-balancer\"><img src=\"https://static001.geekbang.org/resource/image/a2/e1/a2daf129556bc3b9fd7dcde4230db8e1.jpeg?wh=1920*1080\" alt=\"\" title=\"图2 高并发情况下的负载均衡服务器（来源：GitHub）\"></a></p><p>这个时候，有的同学可能会问，“负载均衡”解决高并发的思路是“增加劳动力”，那我们能否从“减少劳动量”的角度来解决高并发带来的负载压力呢？这是一个非常好的角度。要知道，推荐过程特别是基于深度学习的推荐过程往往是比较复杂的，进一步来说，当候选物品规模比较大的时候，产生推荐列表的过程其实非常消耗计算资源，服务器的“劳动量”非常大。这个时候，我们就可以通过减少“硬算”推荐结果的次数来给推荐服务器减负，那具体怎么做呢？</p><p>比如说，当同一个用户多次请求同样的推荐服务时，我们就可以在第一次请求时把TA的推荐结果缓存起来，在后续请求时直接返回缓存中的结果就可以了，不用再通过复杂的推荐逻辑重新算一遍。再比如说，对于新用户来说，因为他们几乎没有行为历史的记录，所以我们可以先按照一些规则预先缓存好几类新用户的推荐列表，等遇到新用户的时候就直接返回。</p><p>因此，在一个成熟的工业级推荐系统中，合理的缓存策略甚至能够阻挡掉90%以上的推荐请求，大大减小推荐服务器的计算压力。</p><p>但不管再强大的服务集群，再有效的缓存方案，也都有可能遭遇特殊时刻的流量洪峰或者软硬件故障。在这种特殊情况下，为了防止推荐服务彻底熔断崩溃，甚至造成相关微服务依次崩溃的“雪崩效应”，我们就要在第一时间将问题控制在推荐服务内部，而应对的最好机制就是“服务降级”。</p><p>所谓“服务降级”就是抛弃原本的复杂逻辑，采用最保险、最简单、最不消耗资源的降级服务来渡过特殊时期。比如对于推荐服务来说，我们可以抛弃原本的复杂推荐模型，采用基于规则的推荐方法来生成推荐列表，甚至直接在缓存或者内存中提前准备好应对故障时的默认推荐列表，做到“0”计算产出服务结果，这些都是服务降级的可行策略。</p><p><strong>总之，“负载均衡”提升服务能力，“缓存”降低服务压力，“服务降级”机制保证故障时刻的服务不崩溃，压力不传导</strong>，这三点可以看成是一个成熟稳定的高并发推荐服务的基石。</p><h2>搭建一个工业级推荐服务器的雏形</h2><p>那说了这么多，这对我们搭建一个工业级推荐服务器有什么实际帮助呢？</p><p>相信你肯定听说过一句话，算法工程师是“面试造火箭，工作拧螺丝”。说实话，这确实反映了算法岗面试的一些不合理之处，但也不是说造火箭的知识不应该掌握。要给一个火箭拧螺丝，真不是说会拧螺丝就可以了，还真是得清楚火箭的构造是什么样的，否则螺丝你是拧上了，但地方拧错了，照样会让火箭出事故。</p><p>我们刚才讲的大厂处理高并发服务的方法就是“造火箭”，理解了这些方法，我们再来学学实际工作中“拧螺丝”的技巧，就能做到有的放矢。下面，我们就一起在Sparrow Recsys里面实践一下搭建推荐服务器的过程，看看如何一步步拧螺丝，搭建起一个可用的推荐服务器。当然，它肯定无法直接具备负载均衡这些企业级服务的能力，但我可以保证，它可以作为一个工业级推荐服务器的雏形。让你以此为起点，逐渐把它扩展成为一个成熟的推荐服务。</p><p>首先，我们要做的就是选择服务器框架。这里，我们选择的服务器框架是Java嵌入式服务器Jetty。为什么我们不选择其他的服务器呢？原因有三个。</p><p>第一，相比于Python服务器的效率问题，以及C++服务器的开发维护难度，Java服务器在效率和开发难度上做到了一个权衡，而且互联网上有大量开源Java项目可以供我们直接融合调用，所以Java服务器开发的扩展性比较好。第二，相比Tomcat等其他Java服务器，Jetty是嵌入式的，它更轻量级，没有过多J2EE的冗余功能，可以专注于建立高效的API推荐服务。而Tomcat更适用于搭建一整套的J2EE项目。第三，相比于基于Node.js、Go这样的服务器，Java社区更成熟和主流一些，应用范围更广。</p><p>当然，每一种技术选择都有它的优势，C++的效率更高，Python更便捷，Go的上升势头也愈发明显，我们只要清楚Jetty是企业级服务的选择之一就够了，我们接下来的服务器端实践也是基于Jetty开展的。</p><p>作为一款嵌入式服务器框架，Jetty的最大优势是除了Java环境外，你不用配置任何其他环境，也不用安装额外的软件依赖，你可以直接在Java程序中创建对外服务的HTTP API，之后在IDE中运行或者打Jar包运行就可以了。下面就是我们Sparrow Recsys中创建推荐服务器的代码，我已经在所有关键的地方添加了注释，你可以逐句解读一下。</p><pre><code>public class RecSysServer {\n    //主函数，创建推荐服务器并运行\n    public static void main(String[] args) throws Exception {\n        new RecSysServer().run();\n    }\n    //推荐服务器的默认服务端口6010\n    private static final int DEFAULT_PORT = 6010;\n\n\n    //运行推荐服务器的函数\n    public void run() throws Exception{\n        int port = DEFAULT_PORT;\n        //绑定IP地址和端口，0.0.0.0代表本地运行\n        InetSocketAddress inetAddress = new InetSocketAddress(&quot;0.0.0.0&quot;, port);\n        //创建Jetty服务器\n        Server server = new Server(inetAddress);\n        //创建Jetty服务器的环境handler\n        ServletContextHandler context = new ServletContextHandler();\n        context.setContextPath(&quot;/&quot;);\n        context.setWelcomeFiles(new String[] { &quot;index.html&quot; });\n\n\n        //添加API，getMovie，获取电影相关数据\n        context.addServlet(new ServletHolder(new MovieService()), &quot;/getmovie&quot;);\n        //添加API，getuser，获取用户相关数据\n        context.addServlet(new ServletHolder(new UserService()), &quot;/getuser&quot;);\n        //添加API，getsimilarmovie，获取相似电影推荐\n        context.addServlet(new ServletHolder(new SimilarMovieService()), &quot;/getsimilarmovie&quot;);\n        //添加API，getrecommendation，获取各类电影推荐\n        context.addServlet(new ServletHolder(new RecommendationService()), &quot;/getrecommendation&quot;);\n        //设置Jetty的环境handler\n        server.setHandler(context);\n\n\n        //启动Jetty服务器\n        server.start();\n        server.join();\n    }\n</code></pre><p>你可以看到，创建Jetty服务的过程非常简单直观，十几行代码就可以搭建起一套推荐服务。当然，推荐服务的主要业务逻辑并不在这里，而是在每个注册到Jetty Context中的Servlet服务中。这里我们用其中最简单的Servlet服务MovieService，来看一看Jetty中的Servlet服务是怎么写的。</p><pre><code>//MovieService需要继承Jetty的HttpServlet\npublic class MovieService extends HttpServlet {\n    //实现servlet中的get method\n    protected void doGet(HttpServletRequest request,\n                         HttpServletResponse response) throws IOException {\n        try {\n            //该接口返回json对象，所以设置json类型\n            response.setContentType(&quot;application/json&quot;);\n            response.setStatus(HttpServletResponse.SC_OK);\n            response.setCharacterEncoding(&quot;UTF-8&quot;);\n            response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);\n            \n            //获得请求中的id参数，转换为movie id\n            String movieId = request.getParameter(&quot;id&quot;);\n            //从数据库中获取该movie的数据对象\n            Movie movie = DataManager.getInstance().getMovieById(Integer.parseInt(movieId));\n\n\n            if (null != movie) {\n                //使用fasterxml.jackson库把movie对象转换成json对象\n                ObjectMapper mapper = new ObjectMapper();\n                String jsonMovie = mapper.writeValueAsString(movie);\n                //返回json对象\n                response.getWriter().println(jsonMovie);\n            }else {\n                response.getWriter().println(&quot;&quot;);\n            }\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            response.getWriter().println(&quot;&quot;);\n        }\n    }\n</code></pre><p>熟悉了这个Servlet服务，其他服务就依葫芦画瓢就可以啦。唯一的不同就是其中的业务逻辑。如果你已经从GitHub上下载了Sparrow Recsys项目把它运行起来，并且在浏览器中输入http://localhost:6010/getmovie?id=1，就可以看到getMovie接口的返回对象了。</p><h2>小结</h2><p>这节课我们既学习了怎么“造火箭”，又实践了怎么“拧螺丝”。对于一个合格的算法工程师来说，这两方面缺一不可。</p><p>“造火箭”的知识包括工业级推荐服务器的具体功能，以及实现工业级高并发推荐服务的主要机制。其中，推荐服务器的具体功能主要有：模型服务、数据库接口、推荐模块逻辑、补充业务逻辑等等，而工业级高并发推荐服务的主要机制有负载均衡、缓存和服务降级。</p><p>“拧螺丝”的技能我们也掌握了不少，我们利用Jetty实践并搭建起了我们SparrowRecSys的推荐服务接口。这个过程中，我们需要重点关注的是，每个注册到Jetty Context的Servlet服务中的主要业务逻辑，只要掌握了一个，在实际工作中我们就能举一反三了。</p><p>老规矩，我今天继续用表格的形式帮你整理了这节课的主要知识点，你可以看看。</p><p><img src=\"https://static001.geekbang.org/resource/image/9f/df/9f756f358d1806dc9b3463538567d7df.jpeg?wh=1920*1080\" alt=\"\"></p><p>好了，推荐服务器的相关内容我就先讲到这里，下节课我会继续讲解线上服务的另一个主要的组成部分，存储模块。</p><h2>课后思考</h2><p>在一个高并发的推荐服务集群中，负载均衡服务器的作用至关重要，如果你是负载均衡服务器的策略设计师的话，你会怎么实现这个“工头”的调度策略，让它能够公平又高效的完成调度任务呢？（比如是按每个节点的能力分配？还是按照请求本身的什么特点来分配？如何知道什么时候应该扩展节点，什么时候应该关闭节点？）</p><p>欢迎把你的思考和答案写在留言区，也欢迎你把这节课分享给你的朋友，我们下节课见！</p>","neighbors":{"left":{"article_title":"答疑 | 基础架构篇+特征工程篇常见问题解答","id":298419},"right":{"article_title":"10 | 存储模块：如何用Redis解决推荐系统特征的存储问题？","id":299326}},"comments":[{"had_liked":false,"id":255749,"user_name":"smjccj","can_delete":false,"product_type":"c1","uid":1802329,"ip_address":"","ucode":"F1970D00C8E3B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GomQuKMYYNX7aMCNt4Ut8YyBrzVM71fgly5l1jykTFic8iaqCTG5ELnsIqlhwgG7ibCCxpODn6PzfVaSicrDub6t5Q/132","comment_is_top":false,"comment_ctime":1603421497,"is_pvip":false,"replies":[{"id":"93213","content":"非常专业的回答，赞。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1603493608,"ip_address":"","comment_id":255749,"utype":1}],"discussion_count":4,"race_medal":0,"score":"233531655481","product_id":100060801,"comment_content":"源地址哈希，或根据服务器计算能力加权随机分配，当出现大量节点利用率很低时，进行资源回收，减少虚拟机，当大部分节点都出现overload情况，进行扩容，增加虚拟机数量。","like_count":55,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507825,"discussion_content":"非常专业的回答，赞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603493608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2264679,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","nickname":"陈威洋","note":"","ucode":"DCF84B4D3A7354","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548450,"discussion_content":"类似数组的动态扩容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643199433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1502573,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ed/6d/116cef3d.jpg","nickname":"张贤俊","note":"","ucode":"5F7681D1DFD388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390189,"discussion_content":"这种弹性资源分配的机制怎么实现？nginx好像实现不了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629708171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1067318,"avatar":"https://static001.geekbang.org/account/avatar/00/10/49/36/947bbc4f.jpg","nickname":"腾飞的大象","note":"","ucode":"5019ECB423EED1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1502573,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ed/6d/116cef3d.jpg","nickname":"张贤俊","note":"","ucode":"5F7681D1DFD388","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548100,"discussion_content":"k8s","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1643029502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":390189,"ip_address":""},"score":548100,"extra":""}]}]},{"had_liked":false,"id":264266,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1606396886,"is_pvip":false,"replies":[{"id":"95832","content":"非常好了，基本就是主流的负载均衡策略。推荐其他同学学习。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1606415476,"ip_address":"","comment_id":264266,"utype":1}],"discussion_count":2,"race_medal":0,"score":"134750383062","product_id":100060801,"comment_content":"1.如果硬件配置基本一样且部署服务一样，就采用轮询或者随机的负载均衡策略<br>2.如果硬件配置不同，可以根据硬件的计算能力做加权的负载均衡策略<br>3.同样也可以利用源地址hash做策略<br>4.关于扩容和缩容:可以根据系统负载情况做动态调整。","like_count":32,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510484,"discussion_content":"非常好了，基本就是主流的负载均衡策略。推荐其他同学学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606415476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1502573,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ed/6d/116cef3d.jpg","nickname":"张贤俊","note":"","ucode":"5F7681D1DFD388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390190,"discussion_content":"第四点能详细说一下实现方案吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629708228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257321,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1603937426,"is_pvip":false,"replies":[{"id":"93745","content":"其实是非常好的冷启动策略，业界也有很多是这样做的。再优化一点，可以利用新用户有限的信息，比如ip，注册信息等做一个简单的聚类，为每个人群聚类产生合适的推荐列表提前缓存。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604016923,"ip_address":"","comment_id":257321,"utype":1}],"discussion_count":2,"race_medal":0,"score":"91798250642","product_id":100060801,"comment_content":"请问老师，按照一些规则预先缓存好几类新用户的推荐列表，等遇到新用户的时候就直接返回，这算是冷启动策略么？","like_count":21,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508295,"discussion_content":"其实是非常好的冷启动策略，业界也有很多是这样做的。再优化一点，可以利用新用户有限的信息，比如ip，注册信息等做一个简单的聚类，为每个人群聚类产生合适的推荐列表提前缓存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604016923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1510592,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/TYeIuNZlibjr0eCvnCCTkYnFEgc8t7BialET3Bnsrbv9micpGIvbhwQrw7Zvt9BicThAEPPXojibVteAvQLb0eTO3DA/132","nickname":"cymx66688","note":"","ucode":"8198B851961BC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542982,"discussion_content":"通过规则获取推荐列表，还需要如何排序呢？如果我按照热门产品和上新产品获取列表，这些列表是随机的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640920762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273066,"user_name":"Geek_04634b","can_delete":false,"product_type":"c1","uid":2106574,"ip_address":"","ucode":"A6CB8AF3E0EC41","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHFicKDOJk2zNE09HNL5ykibFV7a9I4r8435Y7P1FJbxzTwTGDDRCfBqYrmQKuHrgLJAV3onrOReTw/132","comment_is_top":false,"comment_ctime":1610426321,"is_pvip":false,"replies":[{"id":"98992","content":"有兴趣的话你可以去看看一些价值4999的训练营内容，然后再评估一下到底应该值多少钱。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1610503030,"ip_address":"","comment_id":273066,"utype":1}],"discussion_count":4,"race_medal":0,"score":"48855066577","product_id":100060801,"comment_content":"这个课199我都买，太值钱了，现在什么算法都是浮云，关键是落地","like_count":12,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513481,"discussion_content":"有兴趣的话你可以去看看一些价值4999的训练营内容，然后再评估一下到底应该值多少钱。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610503030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2106574,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHFicKDOJk2zNE09HNL5ykibFV7a9I4r8435Y7P1FJbxzTwTGDDRCfBqYrmQKuHrgLJAV3onrOReTw/132","nickname":"Geek_04634b","note":"","ucode":"A6CB8AF3E0EC41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341720,"discussion_content":"我估计可能是全网独一份，没别的只能把整个都吃透来对得起王老师的心血。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1610505860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1697075,"avatar":"","nickname":"Sanders","note":"","ucode":"3D460FEEDCDF34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347986,"discussion_content":"王喆老师的课程是超值，推荐《深度学习推荐系统》","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1612403989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1183409,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0e/b1/9ec5c110.jpg","nickname":"Juude","note":"","ucode":"9B793A5952433E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371470,"discussion_content":"老师可以出一份视频教程，可以卖的更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619781125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288202,"user_name":"冻糕","can_delete":false,"product_type":"c1","uid":2052928,"ip_address":"","ucode":"B0A45E87795C69","user_header":"https://static001.geekbang.org/account/avatar/00/1f/53/40/d599bf28.jpg","comment_is_top":false,"comment_ctime":1618363011,"is_pvip":false,"replies":[{"id":"104771","content":"你师兄说的基本是业界通用指标。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1618632395,"ip_address":"","comment_id":288202,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44568035971","product_id":100060801,"comment_content":"带我入门的师兄说推荐服务理论上限是100ms延迟，但实际上只会给你最多85ms的时间，超过就要必须优化。其中多路召回加重复过滤上限25ms，排序上限45ms 业务规则加生成json 上限10到15ms，请问老师这个延迟数据是否是业界通用的勒？","like_count":11,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518545,"discussion_content":"你师兄说的基本是业界通用指标。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618632395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1166347,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cc/0b/17fa8213.jpg","nickname":"岳京杭","note":"","ucode":"FC66A38EE0532E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380995,"discussion_content":"这说的是百度吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624861243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256418,"user_name":"shenhuaze","can_delete":false,"product_type":"c1","uid":1960811,"ip_address":"","ucode":"32927236CBEA0B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qw7rRHUPRzhibxXWLG7kc3zkhZwBn4JZaryzko2eWOjSxDlRvUathHugrIVKhcCqxhtsANUTq0140AlbDkLZmcw/132","comment_is_top":false,"comment_ctime":1603620095,"is_pvip":false,"replies":[{"id":"93396","content":"过几天会谈model serving的几种方式。一般选择请求tensorflow serving，或者embedding上线的方式。到时候我们可以再详细讨论。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1603692633,"ip_address":"","comment_id":256418,"utype":1}],"discussion_count":5,"race_medal":0,"score":"40258325759","product_id":100060801,"comment_content":"王老师，如果推荐服务选择java和jetty，那么如果要上线基于tensorflow或者pytorch训练的深度学习模型，是需要自己用java改写预测的代码吗？还是有什么现成的解决方案？","like_count":9,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508013,"discussion_content":"过几天会谈model serving的几种方式。一般选择请求tensorflow serving，或者embedding上线的方式。到时候我们可以再详细讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603692633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1697075,"avatar":"","nickname":"Sanders","note":"","ucode":"3D460FEEDCDF34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347996,"discussion_content":"我理解是线上服务应该包含两部分：一部分是推荐系统本身对于排序策略、原始请求处理等这一部分，另外一部分是模型预测服务；对于前者用高并发的Web Server来支持，后一部分通常是TenserFlow Serving。他们之间还有个互相调用的过程，而Web Server会通过缓存来选择是否请求要经过模型预测服务处理","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1612404216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062147,"avatar":"https://static001.geekbang.org/account/avatar/00/10/35/03/57ddf921.jpg","nickname":"An","note":"","ucode":"D7E5B984C30AA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318187,"discussion_content":"tf的话可以用tensorflow serving部署，通过http或rpc访问server端","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603675089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1062147,"avatar":"https://static001.geekbang.org/account/avatar/00/10/35/03/57ddf921.jpg","nickname":"An","note":"","ucode":"D7E5B984C30AA1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318459,"discussion_content":"是这样，这也是之后我们课程选择的model serving方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603760526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318187,"ip_address":""},"score":318459,"extra":""}]},{"author":{"id":1155439,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a1/6f/118c02a1.jpg","nickname":"Im Nothing","note":"","ucode":"E4F3C83B120F40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318168,"discussion_content":"希望王老师回答一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603671166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256007,"user_name":"雪焰🐻🥑","can_delete":false,"product_type":"c1","uid":2202366,"ip_address":"","ucode":"A8F45F16BBEFB9","user_header":"https://static001.geekbang.org/account/avatar/00/21/9a/fe/a984c940.jpg","comment_is_top":false,"comment_ctime":1603504173,"is_pvip":false,"replies":[{"id":"93226","content":"缓存服务一般都要指定ttl，就是过期时间，ttl要根据缓存的可用大小进行设定。<br><br>如果每次请求的变量确实完全不一样，就不用缓存了，因为没有意义。但在实际的应用中总是有优化的空间，比如电商网站，在没有产生新的历史行为的时候你没必要每次请求都产生不同的结果，就可以利用缓存来挡掉重复的请求。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1603522404,"ip_address":"","comment_id":256007,"utype":1}],"discussion_count":4,"race_medal":0,"score":"31668275245","product_id":100060801,"comment_content":"王老师好，请问对于：“在一个成熟的工业级推荐系统中，合理的缓存策略甚至能够阻挡掉 90% 以上的推荐请求，大大减小推荐服务器的计算压力”，我理解每个用户的请求，在不同的时间，地点，context下是不一样的，这样千差万别的请求，数量级应该很大，不知道是如何把大部分都缓存起来的呢？谢谢","like_count":8,"discussions":[{"author":{"id":2405529,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b4/99/79a21147.jpg","nickname":"轩","note":"","ucode":"454CC1A0734A4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340312,"discussion_content":"加cache简直是银弹了。工程上不知道怎么办，就看看可以怎么加cache。\n根据我的经验，除过计算，io其实是非常非常大的开销，如何根据特征的更新频次，量级，业务特点，缓存特征其实很重要。更新频次低但是量级大的特征lru，更新频次高量级低的全量缓存快速过期，尽力减轻io负载。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1609960696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507902,"discussion_content":"缓存服务一般都要指定ttl，就是过期时间，ttl要根据缓存的可用大小进行设定。\n\n如果每次请求的变量确实完全不一样，就不用缓存了，因为没有意义。但在实际的应用中总是有优化的空间，比如电商网站，在没有产生新的历史行为的时候你没必要每次请求都产生不同的结果，就可以利用缓存来挡掉重复的请求。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603522404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1050518,"avatar":"https://static001.geekbang.org/account/avatar/00/10/07/96/d01ebfe7.jpg","nickname":"archmageforac","note":"","ucode":"782B46B42EEF65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":556073,"discussion_content":"理论上每次请求都会产生新的数据的，至少曝光增加了。停留时长、是否点击都是比较重要的特征，而且是能够体现用户兴趣点变化过程的重要特征，不仅对推荐本身有用，也能帮助构建用户画像。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647185789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":507902,"ip_address":""},"score":556073,"extra":""},{"author":{"id":1050518,"avatar":"https://static001.geekbang.org/account/avatar/00/10/07/96/d01ebfe7.jpg","nickname":"archmageforac","note":"","ucode":"782B46B42EEF65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":556074,"discussion_content":"所以我感觉，缓存很难做啊。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647185974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":507902,"ip_address":""},"score":556074,"extra":""}]}]},{"had_liked":false,"id":255895,"user_name":"张弛 Conor","can_delete":false,"product_type":"c1","uid":2208459,"ip_address":"","ucode":"193EBA4A64BAB3","user_header":"https://static001.geekbang.org/account/avatar/00/21/b2/cb/9c6c7bf7.jpg","comment_is_top":false,"comment_ctime":1603453114,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31668224186","product_id":100060801,"comment_content":"有一个小错误，文中说输入http:&#47;&#47;localhost:6010&#47;getmovie?movieId=1可以看到 getmovie 接口的返回对象，但在代码里访问提取的参数是id，所以这里应该输入的链接是：http:&#47;&#47;localhost:6010&#47;getmovie?id=903。供其他小伙伴参考。<br>第一个问题，如何在各节点之间分配任务？我认为首先要清楚各节点的能力，比如cpu性能、核数，内存，磁盘存储，显存；第二步是要识别这个任务的特点，比如我能想到的有A.任务的紧迫性。这个可以通过维护一系列优先队列来管理。B.任务的并发性。这个任务是否可以分成很多个任务同时去执行，可以分到多细去执行。但不太清楚这个可以如何去很好的识别。C.任务的工作量。即完成这个工作所需耗费的资源，这个可以通过数据量和分解到的子任务去判断；第三步，就是根据任务的特点和工作节点的能力去尽可能好的匹配。<br>第二个问题，如何知道什么时候应该扩展节点，什么时候应该关闭节点？<br>这个可以通过观察节点的资源利用率，如果现有运行节点的资源利用率很高，而排队的任务又很多，那么就可以扩展节点，相反，如果节点的资源利用率不高，也没有太多的排队任务，那么就可以适当关闭节点。","like_count":7,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318462,"discussion_content":"小错误已经更正，感谢提醒。\n第一个问题的答案中的第二步可能想复杂了。负载平衡中各节点的功能一般是相同的，也就是说routing到哪个节点都可以。并没有过多的任务拆分的问题。但第一步和第三步回答的非常好，就是我们进行负载平衡分配的主要原则。\n\n第二个问题的回答非常好，标准答案，我没什么要补充的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1603760868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292706,"user_name":"Geek_8197bf","can_delete":false,"product_type":"c1","uid":1907163,"ip_address":"","ucode":"401E78A595B5C0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIf6b0zNIdVqOAMqT78lo39PdJB9qRIXqbwoOGlAEapFFezPiaFqCbUXS7VwI04MymFicgmsuOkILaQ/132","comment_is_top":false,"comment_ctime":1620948001,"is_pvip":false,"replies":[{"id":"106642","content":"python是离线部分的主流，但线上服务一般会用C++或java实现","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1621703405,"ip_address":"","comment_id":292706,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18800817185","product_id":100060801,"comment_content":"请问老师，工业界推荐算法的实现都是Java和C++吗？Python流行吗？我只会Python，在犹豫要不要做推荐","like_count":4,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519927,"discussion_content":"python是离线部分的主流，但线上服务一般会用C++或java实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621703405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255995,"user_name":"sljoai","can_delete":false,"product_type":"c1","uid":1018071,"ip_address":"","ucode":"FF88C4BA265DE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/d7/07f8bc6c.jpg","comment_is_top":false,"comment_ctime":1603502182,"is_pvip":false,"replies":[{"id":"93227","content":"现在开源的监控工具，包括成熟的监控SaaS解决方案都很多，比如cAdvisor，datadog等等。总的来说成熟的公司都会建立一套成熟的监控体系，包括服务器的延迟、cpu、内存的占有率等等，一旦发现异常会立即通过预警或警告的方式反馈服务器，然后服务器根据警告作出相应的服务降级操作，或其他操作。<br><br>你说的Istio，SpringCloud等是一些微服务的管理和实现框架，更多是从架构层面上考虑，而不是从推荐服务内部逻辑的层面考虑。<br><br>二者并不矛盾，可以并存。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1603522757,"ip_address":"","comment_id":255995,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18783371366","product_id":100060801,"comment_content":"老师您好，本文中提供的服务降级方案是从业务功能上来说的，降低服务能力，那系统是如何感知到系统压力，同时反馈到实际服务能力的选择上的呢？另外，像Istio、SpringCloud、Dubbo这种服务框架中也包含服务降级的方案，与您文中提到服务降级方案相比较，有什么异同呢？这一块比较疑惑，希望老师能解答一下，谢谢！","like_count":4,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507900,"discussion_content":"现在开源的监控工具，包括成熟的监控SaaS解决方案都很多，比如cAdvisor，datadog等等。总的来说成熟的公司都会建立一套成熟的监控体系，包括服务器的延迟、cpu、内存的占有率等等，一旦发现异常会立即通过预警或警告的方式反馈服务器，然后服务器根据警告作出相应的服务降级操作，或其他操作。\n\n你说的Istio，SpringCloud等是一些微服务的管理和实现框架，更多是从架构层面上考虑，而不是从推荐服务内部逻辑的层面考虑。\n\n二者并不矛盾，可以并存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603522757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299054,"user_name":"笑笑是个好孩子","can_delete":false,"product_type":"c1","uid":2286158,"ip_address":"","ucode":"D95535065EAD31","user_header":"https://static001.geekbang.org/account/avatar/00/22/e2/4e/c3e86856.jpg","comment_is_top":false,"comment_ctime":1624440232,"is_pvip":false,"replies":[{"id":"109376","content":"一般来说服务器各节点内部还有in memory缓存，k-v store一般会去存储公用的模型和数据","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1626214926,"ip_address":"","comment_id":299054,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10214374824","product_id":100060801,"comment_content":"这里的缓存和把召回到的结果保存到abase之类的k-v存储中 是一样的吗","like_count":3,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522314,"discussion_content":"一般来说服务器各节点内部还有in memory缓存，k-v store一般会去存储公用的模型和数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626214926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290778,"user_name":"MutouMan","can_delete":false,"product_type":"c1","uid":2454131,"ip_address":"","ucode":"E2E78C6EE25E80","user_header":"https://static001.geekbang.org/account/avatar/00/25/72/73/d707c8be.jpg","comment_is_top":false,"comment_ctime":1619749775,"is_pvip":false,"replies":[{"id":"105445","content":"基本的思路没有问题，基本是按照分流、弹性扩展的思路来设计。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1620009007,"ip_address":"","comment_id":290778,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5914717071","product_id":100060801,"comment_content":"按能力来平均分配是比较方便的操作，如果想进一步优化，是不是可以根据请求的类别来设计不同核载的节点然后进行分配？比如冷启动相关的推荐就可以专门有一个轻量的节点处理。节点的扩展和关闭可以设计一个阈值来控制吧，总请求数超过时就扩展，反之关闭。","like_count":1,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519287,"discussion_content":"基本的思路没有问题，基本是按照分流、弹性扩展的思路来设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620009007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343970,"user_name":"Geek6847","can_delete":false,"product_type":"c1","uid":2844751,"ip_address":"","ucode":"570AC230933890","user_header":"","comment_is_top":false,"comment_ctime":1651149838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651149838","product_id":100060801,"comment_content":"我们有工业级的推荐系统，前端的接入层也可以承接千万级并发，但是资源经常还是出现CPU、内存之类的跑到100%。想问下你们的体量下，如何保障线上推荐系统的稳定性？以及你们怎么把控后台服务的成本的？","like_count":0},{"had_liked":false,"id":310575,"user_name":"吃数据的小毛虫","can_delete":false,"product_type":"c1","uid":1332469,"ip_address":"","ucode":"E21334F116E919","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOz2PzU4u9Wapf4UqTr7HvWicicasOJfg0PD2Jp6cFepr3ztAg6mYfDialxQwa47K3uaSuWxnS84bkQ/132","comment_is_top":false,"comment_ctime":1630751674,"is_pvip":false,"replies":[{"id":"113114","content":"无伤大雅，你自己理解意思就好","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1631663162,"ip_address":"","comment_id":310575,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630751674","product_id":100060801,"comment_content":"王老师，您好。有一个小疑问需要向您请教一下，在本节的MovieService示例代码中，<br><br>&#47;&#47;获得请求中的id参数，转换为movie id            <br>String movieId = request.getParameter(&quot;id&quot;);<br><br>获取的id实际就是movieid，因此将变量命名为了movieid，所以是不是将代码注释中的“转换”一词换为“命名为”更为合适呢？我个人理解“转换”一词暗示着有一个从A到B的过程或者操作，这里其实并没有，本质上id就是movieid，只是叫的名字变了。不知道我的理解对不对，请指正。谢谢～","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526280,"discussion_content":"无伤大雅，你自己理解意思就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631663162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308778,"user_name":"คิดถึง ","can_delete":false,"product_type":"c1","uid":2735702,"ip_address":"","ucode":"205BA133D638C6","user_header":"https://static001.geekbang.org/account/avatar/00/29/be/56/6a2998ba.jpg","comment_is_top":false,"comment_ctime":1629794778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629794778","product_id":100060801,"comment_content":"老师好，我想修改项目的访问地址，比如把http:&#47;&#47;localhost:6010&#47;改为http:&#47;&#47;localhost:6010&#47;sparrow&#47;，该怎么办呢？","like_count":0},{"had_liked":false,"id":255858,"user_name":"行行行","can_delete":false,"product_type":"c1","uid":1066121,"ip_address":"","ucode":"2A8481C263FBD2","user_header":"","comment_is_top":false,"comment_ctime":1603444765,"is_pvip":false,"replies":[{"id":"93211","content":"模型实时更新要用到模型serving的服务，后续会讲解模型服务的内容，我们到时候继续讨论。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1603493445,"ip_address":"","comment_id":255858,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603444765","product_id":100060801,"comment_content":"老师你好，线上服务如何做到模型实时更新的呢","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507852,"discussion_content":"模型实时更新要用到模型serving的服务，后续会讲解模型服务的内容，我们到时候继续讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603493445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255812,"user_name":"kenan","can_delete":false,"product_type":"c1","uid":1221542,"ip_address":"","ucode":"3EA7A5804FA002","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/a6/9105f762.jpg","comment_is_top":false,"comment_ctime":1603436753,"is_pvip":true,"replies":[{"id":"93210","content":"不要着急，我们后面继续学习，会有召回层，排序模型的介绍，如果到时还不清楚的话，我们继续讨论。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1603493403,"ip_address":"","comment_id":255812,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1603436753","product_id":100060801,"comment_content":"王老师，您好，请教一下，离线推荐和在线推荐的请求方式是什么？还有粗排和精排有那些方案？最好，关于这两方面内容，您有什么资料推荐一下？","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507844,"discussion_content":"不要着急，我们后面继续学习，会有召回层，排序模型的介绍，如果到时还不清楚的话，我们继续讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603493403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2199659,"avatar":"https://static001.geekbang.org/account/avatar/00/21/90/6b/24ca47da.jpg","nickname":"黄佳恒","note":"","ucode":"1E3812DB22CC42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332847,"discussion_content":"老师，您的课程有git吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607354005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2199659,"avatar":"https://static001.geekbang.org/account/avatar/00/21/90/6b/24ca47da.jpg","nickname":"黄佳恒","note":"","ucode":"1E3812DB22CC42","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334056,"discussion_content":"课程有git是什么意思？ 咱们课程的项目SparrowRecsys使用git管理的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607715141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332847,"ip_address":""},"score":334056,"extra":""}]}]}]}