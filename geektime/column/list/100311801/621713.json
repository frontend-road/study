{"id":621713,"title":"16｜聚合的实现（中）：怎样实现不变规则？","content":"<p>你好，我是钟敬。</p><p>上节课我们学习了聚合的封装，它的目的是确保不变规则。那么，具体来说，封装是怎样确保不变规则的呢？为回答这个问题，今天我们继续来讨论怎样为聚合实现不变规则。</p><p>另外，上个迭代我们说过，<strong>仓库（Repository）<strong>是以</strong>聚合</strong>为单位进行持久化的，不过，对这一点，我们之前还没有充分展开。今天，我们也会来实现聚合的持久化，带你理解这个知识点。</p><p>此外，完成了添加员工的功能后，我们也会为<strong>修改员工</strong>功能做一些准备。</p><h2>实现不变规则</h2><p>我们首先来实现和改变状态有关的两个规则。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/b3/3c8568565db9846c14d900e5316918b3.jpg?wh=3512x1136\" alt=\"\"></p><p>后面是具体的代码。</p><pre><code class=\"language-java\">package chapter15.unjuanable.domain.orgmng.emp;\n// imports ...\n\n\n\npublic class Emp extends AuditableEntity {\n    // other fields ...\n    private EmpStatus status;\n\n    // other getters and setters ...\n\n    public EmpStatus getStatus() {\n        return status;\n    }\n\n    //转正\n    void becomeRegular() {\n        // 调用业务规则: 试用期的员工才能被转正\n        onlyProbationCanBecomeRegular(); \n        status = REGULAR;\n    }\n\n    //终止\n    void terminate() {\n        // 调用业务规则: 已经终止的员工不能再次终止\n        shouldNotTerminateAgain();     \n        status = TERMINATED;\n    }\n\n    // 实现业务规则\n    private void onlyProbationCanBecomeRegular() {\n        if (status != PROBATION) {\n            throw new BusinessException(\"试用期员工才能转正！\");\n        }\n    }\n\n    private void shouldNotTerminateAgain() {\n        if (status == TERMINATED) {\n            throw new BusinessException(\"已经终止的员工不能再次终止！\");\n        }\n    }\n}\n</code></pre><!-- [[[read_end]]] --><p>代码本身并不复杂。这里的要点主要有两个。首先，这两个规则都是业务规则，因此必须在领域层来实现。其次，由于聚合根，也就是Emp，已经拥有了实现业务规则所需要的数据，所以我们应该直接在<strong>聚合根</strong>里实现业务规则，而不是<strong>领域服务</strong>里。</p><p>对比一下，上个迭代完成<strong>增加组织</strong>功能时的业务规则是在<strong>领域服务</strong>里实现的，那是因为<strong>组织</strong>对象里并没有所需的数据，而是要从数据库里取。</p><p>最后，只要改变状态，相应的规则就会被调用，所以规则总不会被破坏。</p><p>类似地，我们来实现关于<strong>技能</strong>和<strong>工作经验</strong>的不变规则。<br>\n<img src=\"https://static001.geekbang.org/resource/image/da/cc/dab60cba92965465d6ff6d67744ff1cc.jpg?wh=3512x1136\" alt=\"\"></p><p>我们看看代码。</p><pre><code class=\"language-java\">package chapter15.unjuanable.domain.orgmng.emp;\n// imports ...\n\npublic class Emp extends AuditableEntity {\n    // other fields ...\n    private List&lt;Skill&gt; skills;\n    private List&lt;WorkExperience&gt; experiences;\n\n    // constructor and other operations ...\n\n    public void addSkill(Long skillTypeId, SkillLevel level\n                        , int duration, Long userId) {\n        // 调用业务规则: 同一技能不能录入两次\n        skillTypeShouldNotDuplicated(skillTypeId);\n\n        Skill newSkill = new Skill(tenantId, skillTypeId, userId)\n                .setLevel(level)\n                .setDuration(duration);\n\n        skills.add(newSkill);\n    }\n\n    private void skillTypeShouldNotDuplicated(Long newSkillTypeId) {\n        if (skills.stream().anyMatch(\n                    s -&gt; s.getSkillTypeId() == newSkillTypeId)) {\n            throw new BusinessException(\"同一技能不能录入两次！\");\n        }\n    }\n\n\n\n    public void addExperience(LocalDate startDate, LocalDate endDate, String company, Long userId) {\n        // 调用业务规则: 工作经验的时间段不能重叠\n        durationShouldNotOverlap(startDate, endDate);\n\n        WorkExperience newExperience = new WorkExperience(\n                tenantId\n                , startDate\n                , endDate\n                , LocalDateTime.now()\n                , userId)\n                .setCompany(company);\n\n        experiences.add(newExperience);\n    }\n\n    private void durationShouldNotOverlap(LocalDate startDate\n                                        , LocalDate endDate) {\n        if (experiences.stream().anyMatch(\n                e -&gt; overlap(e, startDate, endDate))) {\n            throw new BusinessException(\"工作经验的时间段不能重叠!\");\n        }\n    }\n\n    private boolean overlap(WorkExperience experience\n                    , LocalDate otherStart, LocalDate otherEnd) {\n        LocalDate thisStart = experience.getStartDate();\n        LocalDate thisEnd = experience.getEndDate();\n\n        return otherStart.isBefore(thisEnd) \n                &amp;&amp; otherEnd.isAfter(thisStart);\n    }\n}\n</code></pre><p>我们在增加技能【 addSkill() 】和增加工作经验 【addExperience() 】的时候校验不变规则，这样，外界就不可能破坏这些规则了。</p><p>此外，咱们还要体会的是，这样的规则，某一个单独的<strong>技能</strong>（Skill）或<strong>工作经验</strong>（WorkExperience）对象自身是无法校验的，必须从员工聚合整体上考虑。所以，规则的实现必须在聚合根里面完成。当然，如果聚合根没有足够的数据，需要从数据库取的话，那么这个逻辑就要放到领域服务了。</p><h2>创建聚合的另一种做法</h2><p>完成了主要的业务规则，现在我们来补充<strong>添加员工</strong>（Emp）的应用服务。在上个迭代<strong>添加组织</strong>的时候，我们用了 Builder 模式，这实际是工厂（Factory）模式的一种实现。今天我们再尝试一种不同的写法。咱们先看看代码。</p><pre><code class=\"language-java\">package chapter15.unjuanable.application.orgmng.empservice;\n// imports ...\n\n@Service\npublic class EmpService {\n    private final EmpRepository empRepository;\n    private final EmpAssembler assembler;\n\n    @Autowired\n    public EmpService(EmpRepository empRepository\n            , EmpAssembler assembler) {\n        this.empRepository = empRepository;\n        this.assembler = assembler;\n    }\n\n    @Transactional\n    public EmpResponse addEmp(CreateEmpRequest request, User user) {\n        Emp emp = assembler.fromCreateRequest(request, user);\n        \n        empRepository.save(emp);\n        return assembler.toResponse(emp);\n    }\n\n}\n</code></pre><p>这里我们用了一个叫做 assembler （装配器）的对象进行领域对象和DTO之间的转换。Assembler的代码是这样的。</p><pre><code class=\"language-plain\">package chapter15.unjuanable.application.orgmng.empservice;\n// imports...\n\n@Component\npublic class EmpAssembler {\n    EmpHandler handler; // Emp的领域服务\n    OrgValidator orgValidator;\n\n    @Autowired\n    public EmpAssembler(EmpHandler handler, OrgValidator orgValidator) {\n        this.handler = handler;\n        this.orgValidator = orgValidator;\n    }\n\n    // 由 DTO 生成领域对象\n    Emp fromCreateRequest(CreateEmpRequest request, User user) {\n        //校验参数\n        validateCreateRequest(request);\n        \n        // 生成员工号\n        String empNum = handler.generateNum();\n\n        Emp result = new Emp(request.getTenantId(), user.getId());\n        result.setNum(empNum)\n                .setIdNum(request.getIdNum())\n                .setDob(request.getDob())\n                .setOrgId(request.getOrgId())\n                .setGender(Gender.ofCode(request.getGenderCode()));\n\n        request.getSkills().forEach(s -&gt; result.addSkill(\n                s.getSkillTypeId()\n                , SkillLevel.ofCode(s.getLevelCode())\n                , s.getDuration()\n                , user.getId()));\n\n        request.getExperiences().forEach(e -&gt; result.addExperience(\n                e.getStartDate()\n                , e.getEndDate()\n                , e.getCompany()\n                , user.getId()));\n\n        return result;\n    }\n\n    void validateCreateRequest(CreateEmpRequest request) {\n        //业务规则：组织应该有效\n        orgValidator.orgShouldValid(\n                request.getTenantId(), request.getOrgId());\n    }\n\n    // 将领域对象转换成 DTO\n    EmpResponse toResponse(Emp emp) {\n      // ...\n    } \n}\n</code></pre><p>Assembler 和上个迭代的 Builder 在作用上是类似的，都用来创建领域对象。不过，assembler 用到了在应用层定义的DTO（也就是 CreateEmpRequest），所以只能放在应用层，不能放到领域层，否则就会破坏层间依赖。当然，我们在这里也可以用 Builder，但写起来会更繁琐一点。</p><p>Builder是<strong>工厂</strong>模式的一种实现，现在我们把 assembler 和<strong>工厂</strong>做一个比较。</p><p><strong>工厂</strong>位于领域层，入口参数可以是基本类型、领域对象或者在领域层定义的DTO，但不能是在应用层定义的DTO。与assembler相比，用<strong>工厂</strong>模式的好处是，对领域逻辑的封装更彻底一些。</p><p>比如说，上面代码的“组织应该有效”这条业务规则现在是在服务层调用的，如果用<strong>工厂</strong>的话，就会在领域层调用了。但使用<strong>工厂</strong>模式的代价就是，如果需要在领域层定义DTO，或者采用 Builder 模式，就要写更多的代码和数据转换逻辑。</p><p>顺便说一句，“组织应该有效”这条业务规则要查询数据库，所以我们没有在领域对象中实现，而是在OrgValidator这个领域服务里实现的。</p><p>Assembler位于应用层，入口参数可以是应用层定义的DTO。使用 asembler 的优点是代码比较简洁；代价是，从理论上来说，有时领域逻辑可能稍有泄漏。对于“组织应该有效”这条业务规则，尽管规则的实现仍然在领域层，但却是从应用层调用的。不过这到底算不算领域规则的泄漏，以及泄漏得是否严重，就见仁见智了。</p><p>Assembler的命名只是一种常见的习惯，目的是和领域层的<strong>工厂</strong>相区别。Assembler中的逻辑也可以都写在应用服务（EmpService）里，从而取消单独的 assembler。不过，使用assembler可以避免庞大的应用服务类，使代码更加整洁。像assembler这样对service起辅助作用的类，一般统称为 <strong>Helper</strong>。</p><p>我们刚才说过，工厂的参数不能是应用层定义的DTO。这个规则可以推广到整个领域层。也就是<strong>领域层中所有对象，包括领域对象、领域服务、工厂、仓库，对外暴露的方法的输入和输出参数，都只能是领域对象、基本类型，或者领域层内部定义的DTO</strong>。</p><p>分析了工厂和 assembler 的利弊，咱们就可以根据项目的具体情况和团队的偏好做出选择。不过，要注意，一个开发团队内部应该采用统一的做法。</p><h2>新建聚合的持久化</h2><p>接下来，我们看看怎样持久化聚合。在 EmpService 的 addEmp( ) 方法里，是用 empRepository.save( ) 方法对员工聚合进行持久化的。</p><p>我们之前提到过，Repository（仓库） 和传统的 DAO（数据访问对象） 虽然都用来访问数据库，但有一个重要的区别——DAO 是针对单个表的，而 Repository 是针对整个聚合的。下面我们通过代码再来理解一下。</p><pre><code class=\"language-java\">package chapter16.unjuanable.adapter.driven.persistence.orgmng;\n// imports ...\n\n@Repository\npublic class EmpRepositoryJdbc implements EmpRepository {\n\n    final JdbcTemplate jdbc;\n    // SimpleJdbcInsert 是 Spring JDBC 提供的插入数据表的机制\n    final SimpleJdbcInsert empInsert;\n    final SimpleJdbcInsert skillInsert;\n    final SimpleJdbcInsert insertWorkExperience;\n    final SimpleJdbcInsert empPostInsert;\n\n    @Autowired\n    public EmpRepositoryJdbc(JdbcTemplate jdbc) {\n        this.jdbc = jdbc;\n        this.empInsert = new SimpleJdbcInsert(jdbc)\n                .withTableName(\"emp\")\n                .usingGeneratedKeyColumns(\"id\");\n       \n         // 初始化其他几个 SimpleJdbcInsrt ...\n    }\n\n    @Override\n    public void save(Emp emp) {\n        insertEmp(emp);  // 插入 emp 表\n\n        //插入 skill 表\n        emp.getSkills().forEach(s -&gt; \n                        insertSkill(s, emp.getId()));\n        //插入 work_experience 表\n        emp.getExperiences().forEach(e -&gt; \n                        insertWorkExperience(e, emp.getId()));\n        //插入 emp_post表\n        emp.getEmpPosts().forEach(p -&gt; \n                        insertEmpPost(p, emp.getId()));\n\n    }\n\n    private void insertEmp(Emp emp) {\n        Map&lt;String, Object&gt; parms = Map.of(\n                \"tenant_id\", emp.getTenantId()\n                , \"org_id\", emp.getOrgId()\n                , \"num\", emp.getNum()\n                , \"id_num\", emp.getIdNum()\n                , \"name\", emp.getName()\n                , \"gender\", emp.getGender().code()\n                , \"dob\", emp.getDob()\n                , \"status\", emp.getStatus().code()\n                , \"created_at\", emp.getCreatedAt()\n                , \"created_by\", emp.getCreatedBy()\n        );\n\n        Number createdId = empInsert.executeAndReturnKey(parms);\n        //通过反射为私有 id 属性赋值\n        forceSet(emp, \"id\", createdId.longValue());\n    }\n\n    private void insertWorkExperience(WorkExperience experience, Long empId) {\n        // 类似 insertEmp...\n    }\n\n    private void insertSkill(Skill skill, Long empId) {\n        // 类似 insertEmp...\n\n    }\n\n    private void insertEmpPost(EmpPost empPost, Long empId) {\n        // 类似 insertEmp...\n    }\n  \n    // 其他方法 ...\n    \n}\n</code></pre><p>我们的程序用了Spring JDBC的SimpleJdbcInsert机制来插入数据表。这本身不重要，不论用MyBatis还是JDBCTemplate，道理都是一样的。</p><p>这个程序首先把员工信息自身保存到emp表，然后分别遍历技能、工作经验和员工岗位，把这些记录依次插入skill、work_experience和emp_post表。这样，就把员工聚合整体存入了数据库。</p><p>如果采用JPA的话，那么整个过程都是框架自动完成的，不需要像上面这样手工编程，不过原理是一样的。</p><h2>包结构回顾</h2><p>完成了添加员工的功能，我们来看看现在整体的包结构长什么样了。</p><p><img src=\"https://static001.geekbang.org/resource/image/21/5c/21b8c729a4a138e1a5dcc9836f0de05c.jpg?wh=2486x2055\" alt=\"\"></p><p>咱们从下往上看。</p><p>在<strong>领域（domain）层</strong>，我们为<strong>组织管理</strong>模块建立了orgmng包，在这个模块中，又为<strong>员工</strong>聚合建立了emp包。在emp包里，Emp 是聚合根，EmpHandler是配合Emp的领域服务，用来保存不便于写在领域对象内部的逻辑，例如需要访问数据库的逻辑。EmpRepository是<strong>仓库</strong>的接口。其他类都是非聚合根的领域对象和枚举类。</p><p>如果你觉得包里的内容有点多，可以把 EmpStatus 枚举作为 Emp 的内部类来定义，其他枚举也类似。这样会更紧凑一点。之所以把这些类放在同一个包，是基于内聚的关系。</p><p>在<strong>应用（application）层</strong>，同样按照模块来分包。在orgmng包里，为员工的<strong>应用服务</strong> empservice建立了一个包，包里EmpService是<strong>应用服务</strong>类，EmpAssembler是配合<strong>应用服务</strong>的<strong>装配器</strong>。其他都是EmpService用到的DTO。这个包也是按照内聚关系组织的。</p><p>在<strong>适配器（adapter）层</strong>，也有一个orgmng包，里面是这个模块用到的3 个仓库的实现。由于只有3个类，所以我们就不再分子包了。</p><h2>聚合修改所面临的问题</h2><p>完成了<strong>添加员工</strong>的功能，我们来考虑<strong>修改员工</strong>的功能。对于把聚合作为整体保存到数据库而言，修改比添加要复杂一些。让我们举个例子来说明。</p><p>比如说有一个员工“张三”，出生日期是1990年1月1日。他在相应的emp表里有一条记录。张三有三条技能，分别是Java、Golang和“项目管理”。所以他在skill表里也有3条记录，如下图。<br>\n<img src=\"https://static001.geekbang.org/resource/image/d8/48/d8d792835624ff750abyy6f521107448.jpg?wh=3733x1908\" alt=\"\"></p><p>现在我们对张三这个员工聚合进行修改。假定我们要修改后面的信息。</p><ul>\n<li>张三的出生日期输入错了，现在要由1990年1月1日改为1985年1月1日。</li>\n<li>Java技能的年期由10年改为15年。</li>\n<li>删掉Golang技能。</li>\n<li>增加JavaScript技能。</li>\n</ul><p>后面图里画了修改后的情况。<br>\n<img src=\"https://static001.geekbang.org/resource/image/9c/37/9c7be60671eaf9794219b332980c4a37.jpg?wh=3733x2121\" alt=\"\"></p><p>我们看到，从数据库的角度，员工表要update一条记录；技能表分别 update、 insert和delete一条记录，还有一条记录不变。也就是说，虽然对聚合整体而言是“修改”，但具体到聚合内部的各个对象和相应的数据表来说，却不一定都是 “update”。</p><h2>标记领域对象的修改状态</h2><p>处理这种复杂情况，可以有不同的方法。我们这里采用的方法是，在每个实体中增加一个“修改状态”，在程序中合适的地方把状态设置正确，然后在 EmpRepository 里根据状态进行相应的处理。</p><p>由于每个实体都要有这个状态，所以我们只要在实体的公共父类 AuditableEntity 里增加这个状态就可以了。</p><p>我们先写一个表示修改状态的枚举。</p><pre><code class=\"language-plain\">package chapter16.unjuanable.common.framework.domain;\n\npublic enum ChangingStatus {\n    NEW,            // 新增\n    UNCHANGED,      // 不变\n    UPDATED,        // 更改\n    DELETED         // 删除\n}\n</code></pre><p>这个枚举表示了 4 种状态。</p><ul>\n<li>新增：表示新建的对象，数据库还没有，需要向数据表插入记录。</li>\n<li>不变：表示从数据库里取出的对象，数据没有变化，因此不需要任何数据库操作。</li>\n<li>更改：表示从数据库里取出的对象，数据发生了变化，需要在数据表里更改记录。</li>\n<li>删除：表示从数据库里取出的对象，需要在数据表里删除记录。</li>\n</ul><p>然后，我们把这个状态加到实体的公共父类AuditableEntity。</p><pre><code class=\"language-plain\">package chapter16.unjuanable.common.framework.domain;\nimport static chapter16.unjuanable.common.framework.domain.ChangingStatus.*;\n\npublic abstract class AuditableEntity {\n    protected ChangingStatus changingStatus = NEW;\n    // 其他属性、构造器 ...\n\n    public ChangingStatus getChangingStatus() {\n        return changingStatus;\n    }\n\n    public void toUpdate() {\n        this.changingStatus = UPDATED;\n    }\n\n    public void toDelete() {\n        this.changingStatus = DELETED;\n    }\n\n    public void toUnChang() {\n        this.changingStatus = UNCHANGED;\n    }\n    \n    // 其他方法 ...\n}\n</code></pre><p>“修改状态”的默认值是“NEW”，可以通过 toUpdate()、 toDelete()和 toUnChange() 来改变。这样，程序中的应用服务、仓库等等就可以对实体的状态进行操作了。</p><h2>总结</h2><p>好，今天先讲到这，我们来总结一下。这节课我们主要探讨的是怎样实现<strong>聚合</strong>的不变规则以及聚合的持久化问题。同时也介绍了和<strong>工厂</strong>不一样的另一种创建聚合的方式。</p><p>关于不变规则的实现，有两个要点需要注意。</p><p><strong>第一</strong>，如果规则的验证不需要访问数据库，那么首先应该考虑在领域对象里实现，而不是在领域服务里实现。</p><p><strong>第二</strong>，关于技能和工作经验的两条规则，必须从整个聚合层面才能验证，所以无法在Skill和WorkExperience两个类内部实现，只能在聚合根（Emp）里实现，这也是聚合存在的价值。</p><p>在创建聚合方面，我们采用了和上个迭代不同的另一种方式：Assembler。这种方式和<strong>工厂</strong>模式各有利弊，可以根据实际情况选择。</p><p>在持久化方面，我们用仓库（EmpRepository）来把聚合保存到数据库，要点是，仓库是针对聚合整体的，而不是针对单独的表的。也就是说，聚合和它的仓库有一一对应关系。此外，为了对修改过的聚合进行持久化，我们为实体增加了“修改状态”（ChangingStatus）属性，下节课会利用这个属性完成整个持久化功能。</p><h2>思考题</h2><p>最后是两道思考题。</p><p>1.如果要对身份证号格式进行校验，这种逻辑放在哪里比较好？</p><p>2.在目前的程序里，改变员工状态的业务规则是在员工类中实现的，你觉得放在哪里会更合适？</p><p>好，今天的课程结束了，有什么问题欢迎在评论区留言，下节课，我们继续实现修改员工的功能，并讲解如何在并发环境下保护聚合的不变规则。</p>","comments":[{"had_liked":false,"id":366242,"user_name":"李威","can_delete":false,"product_type":"c1","uid":1460961,"ip_address":"湖南","ucode":"3409A9390BD1FD","user_header":"https://static001.geekbang.org/account/avatar/00/16/4a/e1/2a498473.jpg","comment_is_top":true,"comment_ctime":1673504473,"is_pvip":false,"replies":[{"id":133676,"content":"这是个典型问题，非常好。如果真的发展成你说的样子，建模成一个大聚合就不合适了。可以考虑把“工作经验集合”本身作为一个聚合。这样把聚合拆开。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1674452002,"ip_address":"广东","comment_id":366242,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"请教钟老师，持久化“员工聚合”的方法（EmpRepositoryJdbc.save(Emp emp)）中会存在性能问题不，比如员工有10个技能，10条工作经验，10个岗位（这个数量级在现实中应该还算是合理的），要保存员工记录再加上这30条记录，那这一个持久化操作就会产生31条 insert into 的 sql 语句，数据库压力会不会太大。\n\n另外，以后如果再增加员工兴趣啊，员工荣誉证书啊，员工职业资格证书啊，等等，那这个“员工聚合”的持久化操作可能就要上百条 insert into 的 sql 语句了，这个怎么解。\n\n当然，确实可以优化一下持久化的方法逻辑，比如将所有 insert 语句组成一条批量 insert 语句，这样所有数据的保存就一条 insert 语句搞定了。但是随着不断在“员工聚合”中添加要保存员工兴趣之类的需求，那这个“员工聚合”的持久化以及数据库查询操作所涉及的数据可能都会比较多，这里会不会是个性能隐患。","like_count":10,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600503,"discussion_content":"这是个典型问题，非常好。如果真的发展成你说的样子，建模成一个大聚合就不合适了。可以考虑把“工作经验集合”本身作为一个聚合。这样把聚合拆开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674452002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/a6/69907ec1.jpg","nickname":"尔霍","note":"","ucode":"F0EF60EB250B20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":616631,"discussion_content":"这个问题和老师的问题都很重点呀，插眼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1683029960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599810,"discussion_content":"我的写法和钟老师完全不同。 会加很多list来做逻辑。 群里讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673830165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1517457,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkzrezV2dOBAgickt9DLzabz3dNFYyDEVXENMQ5ibrWhFbFqXIOia3ZaR21pozvB7UfoxJx4Ar688sA/132","nickname":"开心","note":"","ucode":"C8E08E8724C7CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":643162,"discussion_content":"怎么解呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1714094568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":599810,"ip_address":"广东","group_id":0},"score":643162,"extra":""}]}]},{"had_liked":false,"id":366116,"user_name":"燃","can_delete":false,"product_type":"c1","uid":1337002,"ip_address":"浙江","ucode":"3F4AB00C8B93E7","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/aa/639a276f.jpg","comment_is_top":false,"comment_ctime":1673410030,"is_pvip":false,"replies":[{"id":133655,"content":"第一问，考虑身份证号本身就是领域对象。同样，第二问，考虑员工状态本身就是领域对象。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1674440255,"ip_address":"广东","comment_id":366116,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1身份证号，在对象内部充血实现检验逻辑即可。根据上面的评论设置员工信息的时候根据身份证号自动装填性别生日等属性也可以写在对象内部，比如如果生日属性为空，根据身份证号自动补全。\n2改变员工状态应该放在empHelper，因为员工状态的改变肯定不是员工自己做的，所以放对象内部不合适，是组织调整员工状态，但是组织设置员工状态的职能不属于组织这个对象的主要职能违反单一职责，所以用empHelper，需要调整员工状态的对象，引用这个helper是比较解耦的做法","like_count":3,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600477,"discussion_content":"第一问，考虑身份证号本身就是领域对象。同样，第二问，考虑员工状态本身就是领域对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674440255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368638,"user_name":"py","can_delete":false,"product_type":"c1","uid":1496577,"ip_address":"上海","ucode":"2372522D715419","user_header":"https://static001.geekbang.org/account/avatar/00/16/d6/01/2448b4a9.jpg","comment_is_top":false,"comment_ctime":1676517159,"is_pvip":false,"replies":[{"id":135163,"content":"1 还有一种选择是把身份证号本身作为一个领域对象，然后把规则放在这个对象自身\n2 考虑为员工状态本身建一个领域对象","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678972989,"ip_address":"广东","comment_id":368638,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1. 要看怎么校验，如果是非法输入等检验 放在领域对象里，如果要查表检查有效性，要放到领域服务里\n2.员工类的领域对象","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609414,"discussion_content":"1 还有一种选择是把身份证号本身作为一个领域对象，然后把规则放在这个对象自身\n2 考虑为员工状态本身建一个领域对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678972989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367258,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"北京","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1675076527,"is_pvip":true,"replies":[{"id":133819,"content":"面向对象熟手的一个标志就是会用一些小对象。关于人员和组织的包结构，取决于建模时的模块划分。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1675180385,"ip_address":"广东","comment_id":367258,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"为什么 emp 包是在 orgmng 包的下一层，如果是平级会不会看上去更容易理解？\n\n对于思考题，\n\n1. 如果要对身份证号进行校验，如果只校验格式，那么可以放在实体里面（员工类），如果需要在数据库里面查询是否有重复的情况，那么可以放在领域服务里面？\n2. 改变员工状态的业务规则，可以考虑在领域服务中放一个接口，调用员工类中的实现。\n\n看到留言回复里面说到将身份证号和员工状态当做领域对象，一开始感觉这样操作，领域对象好像有点多了，但是后来发现，是为了值对象做引子\n","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601287,"discussion_content":"面向对象熟手的一个标志就是会用一些小对象。关于人员和组织的包结构，取决于建模时的模块划分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675180385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366265,"user_name":"Geek_97eefa","can_delete":false,"product_type":"c1","uid":2330827,"ip_address":"广东","ucode":"E5D9857086CE67","user_header":"","comment_is_top":false,"comment_ctime":1673518931,"is_pvip":false,"replies":[{"id":133448,"content":"编辑代答，春节不断更，但不更新正课，一方面让老师更充分地准备后续内容，一方面也给还没跟上学习进度的同学多点学习时间。春节时，我们会特别策划几期加餐，敬请期待。","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1673519715,"ip_address":"北京","comment_id":366265,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"老师春节会断更吗？","like_count":1,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599438,"discussion_content":"编辑代答，春节不断更，但不更新正课，一方面让老师更充分地准备后续内容，一方面也给还没跟上学习进度的同学多点学习时间。春节时，我们会特别策划几期加餐，敬请期待。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673519715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391340,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"北京","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/d1ab239e.jpg","comment_is_top":false,"comment_ctime":1718039448,"is_pvip":false,"replies":[{"id":143668,"content":"分几点来讨论：\n第一，假如有 a() 方法，要修改来自 DB1 和 DB2 的两个不同的聚合，修改两个聚合的方法分别是 b() 和 c()，也就是说，a() 方法要调用 b() 和 c() 方法。那么，b() 和 c() 要负责两个聚合各自的事务，可以通过事务注解进行。而 a() 方法则通过某种方式实现最终一致性。\n第二，假如两个聚合是在同一个数据库，并且在同一个微服务，那么权衡一下，放在同一个事务中也是可以的。“DDD多个聚合是最终一致性的理念”在《领域驱动设计》原书中并没有，而是《实现领域驱动设计》的一家之言，可以参考，但不必作为规定。\n第三，假如像第一点那样，聚合来自不同的数据库，那么很可能围绕每个数据库会有一个微服务，这时考虑的是微服务间的最终一致性了。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1731490791,"ip_address":"广东","comment_id":391340,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"钟老师好，看到《实现领域驱动设计》书中有种说法，领域层不感知事务，事务应该放在应用层。\n我看老师也是这么做的，但事务注解加在了应用层的方法上。\n问题是：\n如果这个方法里跨多个聚合的DDL操作，就跟DDD多个聚合是最终一致性的理念冲突了，尤其是多个聚合涉及的table不属于一个DB的情况下。此时，是不是应该使用手动事务的方式来控制单个聚合的强一致性呢？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653872,"discussion_content":"分几点来讨论：\n第一，假如有 a() 方法，要修改来自 DB1 和 DB2 的两个不同的聚合，修改两个聚合的方法分别是 b() 和 c()，也就是说，a() 方法要调用 b() 和 c() 方法。那么，b() 和 c() 要负责两个聚合各自的事务，可以通过事务注解进行。而 a() 方法则通过某种方式实现最终一致性。\n第二，假如两个聚合是在同一个数据库，并且在同一个微服务，那么权衡一下，放在同一个事务中也是可以的。“DDD多个聚合是最终一致性的理念”在《领域驱动设计》原书中并没有，而是《实现领域驱动设计》的一家之言，可以参考，但不必作为规定。\n第三，假如像第一点那样，聚合来自不同的数据库，那么很可能围绕每个数据库会有一个微服务，这时考虑的是微服务间的最终一致性了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731490792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/d1ab239e.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647156,"discussion_content":"DML操作，写错了sorry","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1719563892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381468,"user_name":"远天","can_delete":false,"product_type":"c1","uid":1235735,"ip_address":"浙江","ucode":"406E3D19A945C9","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/17/aee5d35a.jpg","comment_is_top":false,"comment_ctime":1695257016,"is_pvip":false,"replies":[{"id":138988,"content":"通常是。想快的话考虑并发。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1695454973,"ip_address":"广东","comment_id":381468,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"钟老师，你好，如果一次性要创建多个聚合根，是一次一次循环地创建吗？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628532,"discussion_content":"通常是。想快的话考虑并发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695454973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371879,"user_name":"杰","can_delete":false,"product_type":"c1","uid":1109562,"ip_address":"广东","ucode":"036B010A45070A","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/3a/c0ad9c43.jpg","comment_is_top":false,"comment_ctime":1680484491,"is_pvip":false,"replies":[{"id":135697,"content":"https:&#47;&#47;github.com&#47;zhongjinggz&#47;geekdemo 目前放出了迭代1的，后面的正在逐渐补充","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1680533420,"ip_address":"广东","comment_id":371879,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"这个课程有代码仓库地址吗？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612143,"discussion_content":"https://github.com/zhongjinggz/geekdemo 目前放出了迭代1的，后面的正在逐渐补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680533420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370283,"user_name":"AngryShoes","can_delete":false,"product_type":"c1","uid":2094062,"ip_address":"湖南","ucode":"28E4485EE997AA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgXlnRwqBvzlSWTrv4eZ4hSOhXnr6NOKzVFUIHJbhIEjpkvSjlJEg3xf3Th7uKcUw9I200QDpbdg/132","comment_is_top":false,"comment_ctime":1678678274,"is_pvip":false,"replies":[{"id":135084,"content":"可以的，前提是这个规则只在本实体内部。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678842766,"ip_address":"广东","comment_id":370283,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"第二条总结：\n关于技能和工作经验的两条规则，必须从整个聚合层面才能验证，所以无法在 Skill 和 WorkExperience 两个类内部实现，只能在聚合根（Emp）里实现。\n请教下钟老师如果Skill 和 WorkExperience 是业务实体（Entity）的话，校验规则可以放在实体内部吗？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609110,"discussion_content":"可以的，前提是这个规则只在本实体内部。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678842766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369845,"user_name":"acmookey","can_delete":false,"product_type":"c1","uid":1845125,"ip_address":"广东","ucode":"6BD0F9B58E1A7C","user_header":"https://static001.geekbang.org/account/avatar/00/1c/27/85/16624d4d.jpg","comment_is_top":false,"comment_ctime":1678027748,"is_pvip":false,"replies":[{"id":135148,"content":"两者逻辑上应该是等价的","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678971481,"ip_address":"广东","comment_id":369845,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"说一个不重要的问题，跟着老师的思路敲代码时，发现好像 Emp中判断WorkExperience的时间是否重叠的逻辑貌似有问题，遂百度了一下，这样表达可能会更准确 \n!( otherStart.isAfter(thisEnd) || otherEnd.isBefore(thisStart) )","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609396,"discussion_content":"两者逻辑上应该是等价的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678971482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2094062,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgXlnRwqBvzlSWTrv4eZ4hSOhXnr6NOKzVFUIHJbhIEjpkvSjlJEg3xf3Th7uKcUw9I200QDpbdg/132","nickname":"AngryShoes","note":"","ucode":"28E4485EE997AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609073,"discussion_content":"从另一方面，把这个if判断条件内容抽成一个描述的方法是比较好的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1678806560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367242,"user_name":"邓西","can_delete":false,"product_type":"c1","uid":2977417,"ip_address":"四川","ucode":"DC84CD4CDF4021","user_header":"","comment_is_top":false,"comment_ctime":1675064710,"is_pvip":false,"replies":[{"id":135200,"content":"1 可以考虑建立一个“身份证号”的领域对象，把逻辑放进去\n2 考虑一下建立一个“员工状态”的对象，把逻辑放进去","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678979635,"ip_address":"广东","comment_id":367242,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"1. 通用的基础方法，可以放在领域服务中，common；\n2. 从聚合根Emp移到EmpRepository中，统一管理修改状态和修改动作。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609468,"discussion_content":"1 可以考虑建立一个“身份证号”的领域对象，把逻辑放进去\n2 考虑一下建立一个“员工状态”的对象，把逻辑放进去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678979635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366949,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"重庆","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1674654282,"is_pvip":false,"replies":[{"id":133755,"content":"考虑一下身份证号和员工状态本身也可以是领域对象。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1674916270,"ip_address":"广东","comment_id":366949,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"1. 如果要对身份证号格式进行校验，这种逻辑放在哪里比较好？\n放在员工类里面，因为身份证号是员工的一个属性\n2. 在目前的程序里，改变员工状态的业务规则是在员工类中实现的，你觉得放在哪里会更合适？\n目前放在员工类即可","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600875,"discussion_content":"考虑一下身份证号和员工状态本身也可以是领域对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674916270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366408,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"北京","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1673712511,"is_pvip":false,"replies":[{"id":133673,"content":"后面讲到值对象的时候，可以看到，员工状态本身也是一个对象","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1674451417,"ip_address":"广东","comment_id":366408,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"1、对身份证号格式进行校验的问题。其实看实现业务规则这几课，已下载就想起了Java里数据验证的标准做法Java Bean Validation，校验行为不是在哪一层上进行的，而是剥离出来，在Bean上做的。\n\nBean应该是比实体更宽泛的概念，可以包括像DTO这样非常“贫血”的对象。考虑到所谓规则本质上就是多个对象间的关系，而身份证号不涉及到关系，它本身就是有规则的，所以对它的校验完全可以使用Java Bean Validation，放在定义它的地方就可以。\n\n2、改变员工状态的业务规则。\n\n我觉得，哪里有所需的数据，就放在哪里。员工类就有全部员工相关的数据，所以从这点出发，放在里面没有问题，配合实体的修改状态，在持久化时也没有问题。\n\n","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600500,"discussion_content":"后面讲到值对象的时候，可以看到，员工状态本身也是一个对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674451418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366057,"user_name":"Geek_ab5b86","can_delete":false,"product_type":"c1","uid":3264289,"ip_address":"广东","ucode":"A3D451394DC5A6","user_header":"","comment_is_top":false,"comment_ctime":1673348054,"is_pvip":false,"replies":[{"id":133367,"content":"是的。可以把单独的实体看作一个“退化的”聚合。下节课会专门讲这件事。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1673355955,"ip_address":"广东","comment_id":366057,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"聚合和它的仓库有一一对应关系,那么像组织这种单纯的实体是否和仓库也应该有———对应关系呢","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599150,"discussion_content":"是的。可以把单独的实体看作一个“退化的”聚合。下节课会专门讲这件事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673355955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366013,"user_name":"赵晏龙","can_delete":false,"product_type":"c1","uid":2673605,"ip_address":"湖南","ucode":"F15730BCA97EE0","user_header":"https://static001.geekbang.org/account/avatar/00/28/cb/c5/c1d7ca5e.jpg","comment_is_top":false,"comment_ctime":1673325312,"is_pvip":false,"replies":[{"id":133654,"content":"第一题没毛病，第二题，考虑状态本身也是领域对象（值对象）","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1674438759,"ip_address":"广东","comment_id":366013,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"1我会对身份证进行值对象建模，因为身份证本身就有一些复杂的规则，甚至可能有提速生日性别的操作。\n\n2没有前提条件，我觉得放哪里都行吧。目前最合适还是领域对象里面。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600475,"discussion_content":"第一题没毛病，第二题，考虑状态本身也是领域对象（值对象）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674438760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369812,"user_name":"Fredo","can_delete":false,"product_type":"c1","uid":1438470,"ip_address":"广东","ucode":"681D6692617DAB","user_header":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","comment_is_top":false,"comment_ctime":1677995558,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"EmpAssembler 中调用的 addSkill 和 addExperience 方法 得改成 public 了，破坏了封装性","like_count":0,"discussions":[{"author":{"id":1042953,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/HibtYWgbgTKZPTkqEGvB0pIyFfrhiaKrEkWTgPa9EYFsH7VV2an6oXPCvLzqOb1KfsNN8flQuRUWo0WntI5M1iapw/132","nickname":"tony","note":"","ucode":"41DB69A6D93D26","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613636,"discussion_content":"其实并没有，包级别的访问权限，我理解你可以放在一个路径下，我理解还可以用规范约束","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681437466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}