{"id":506825,"title":"08｜List：如何实现高性能的无限列表？","content":"<p>你好，我是蒋宏伟。今天我们学习的重点是列表组件 RecyclerListView。</p><p>如果你熟悉 React Native ，那你可能会问了：“React Native 中的列表组件不是 FlatList 吗？”</p><p>没错。React Native 官方提供的列表组件确实是 FlatList，但是我推荐你优先使用开源社区提供的列表组件 RecyclerListView。因为，开源社区提供的 RecyclerListView 性能更好。</p><p>对于列表组件来说，我们最应该关心的就是性能。这里我给你分享下我的个人经历。2016~2018 年，我参与了一个用 React Native 搭建的信息流项目。信息流这种无限列表页是非常常见的业务场景，比如你使用的京东首页、抖音视频、微信朋友圈都属于信息流页面。你看完一页，还有下一页，看完下一页还有下下页，无穷无尽。这时就要用到我们马上要探讨的列表组件了，而且必须是高性能的列表组件，不能翻着翻着就卡起来了。</p><p>2016 年，没有 RecyclerListView，也没有 FlatList，我们用的是第一版的 ListView 组件。ListView 组件性能很差，没有内存回收机制，翻一页内存就涨一点，再翻一页内存又再涨一点。前 5 页滚动非常流畅，第 10 页开始就感觉到卡顿了，到 50 页的时候，基本就滑不动了。卡顿的原因就是无限列表太吃内存了。如果手机的可使用内存不够了，卡顿就会发生。这也是 React Native 刚出来时被吐槽得最多的地方。</p><!-- [[[read_end]]] --><p>2017 年，官方的第二代列表组件 FlatList 出来后，第一代列表组件 ListView 就被废弃了，这时候无限列表性能变得好一些了。虽然FlatList 在 iOS 端表现很好，但在 Android 低端机还是能感觉到卡顿。</p><p>2018 年，随着业务越来越复杂，FlatList 的性能表现变得更加糟糕了。经过调研，我们找到了性能更好的列表组件 RecyclerListView。通常评判列表卡顿的指标是 UI 线程的帧率和 JavaScript 线程的帧率。</p><p>但业内有人实验过，在已经渲染完成的页面中，通过死循环把 JavaScript 线程卡死，页面依旧能够滚动。这是因为滚动本身是在 UI 线程进行的，和 JavaScript 线程无关。但当用户下滑，需要渲染新的列表项时，就需要JavaScript 线程参与进来了。如果这时候 JavaScript 掉帧了，新的列表项就渲染不出来，即便能滚动，用户看到也是空白项，一样影响用户体验。</p><p>因此，我们当时是把 JavaScript 帧率作为客观指标，再加上团队同学主观体验，进行综合评估。采集 JavaScript 帧率用的手机是 OPPO R9，现在看来是妥妥的低端机了，结果显示，FlatList  JavaScript 帧率小于 20 帧的占比有 16%，而 RecyclerListView 占比只有 3%。主观体验上，团队同学拿自己的手机进行测试，使用暴力滑动的测试方法，测评了 20 来款机型。在低端机上 FlatList 多被标记为一般卡，而 RecyclerListView 大多标记是流畅，只有少量的轻微卡顿。</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/bd/5ed5ba1e8a756d1065f1c70e14083abd.png?wh=1001x386\" alt=\"图片\"></p><p>即使现在新架构马上要出来了，在这个时间点上，我最推荐你用的还是 RecyclerListView。因为从原理上 RecyclerListView 比 FlatList 强上不少。</p><p>作为一个开发者，你总有需要手动优化的时候，不是所有场景都有现成的组件，都有自动化的解决方案。如果你现在没有遇到，兴许只是因为开发年头太少了，你可以问问你身边那些开发年头多的同学，他们在这方面应该是有很深的体会。学习 FlatList、RecyclerListView 的优化原理，对自己的动手优化是非常有帮助的。当你以后遇到列表性能问题时，你可以有现成的优化思路借鉴，不会毫无头绪。</p><p>那么，为什么开源社区的 RecyclerListView 比官方的 FlatList 性能更好？FlatList、RecyclerListView 的优化原理是什么？FlatList 和 RecyclerListView 的底层实现都是滚动组件 ScrollView，所以我们先从 ScrollView 聊起。</p><h2>ScrollView：渲染所有内容的滚动组件</h2><p>ScrollView 是一个支持横向或竖向的滚动组件，几乎所有页面都会用到。</p><p>ScrollView 组件类似于 Web 中的 <code>&lt;html/&gt;</code> 或 <code>&lt;body/&gt;</code> 标签，浏览器中的页面之所以能上下滚动，就是因为 html 或 body 标签默认有一个 overflow-y: scroll 的属性，如果你把标签的属性设置为 overflow-y: hidden，页面就不能滚动了。</p><p>React Native 的 ScrollView 组件在 Android 的底层实现用的是 ScrollView 和 HorizontalScrollView，在 iOS 的底层实现用的是 UIScrollView。</p><p>所谓的滚动，解决的是在有限高度的屏幕内浏览无限高度的内容的问题。有限高度的容器是 ScrollView，无限高度，或者说高度不确定的内容是 ScrollView 的 children。</p><p>使用 ScrollView 组件时，我们通常并不直接给 ScrollView 设置固定高度或宽度，而是给其父组件设置固定高度或宽度。</p><p>一般而言，我们会使用安全区域组件 SafeAreaView 组件作为 ScrollView 的父组件，并给 SafeAreaView 组件设置布局属性 flex:1，让内容自动撑高 SafeAreaView。使用 SafeAreaView 作为最外层组件的好处是，它可以帮我们适配 iPhone 的刘海屏，节约我们的适配成本，示例代码如下：</p><pre><code class=\"language-plain\">&lt;SafeAreaView style={{flex: 1}}&gt;\n  &lt;ScrollView&gt;\n    &lt;Text&gt;1&lt;/Text&gt;\n  &lt;ScrollView/&gt;\n&lt;/SafeAreaView&gt;    \n</code></pre><p>了解完 ScrollView 组件的基本使用方法后，我们再来看下 ScrollView 的性能，看看如果使用 ScrollView 来实现无限列表会怎么样。</p><p>你可以看看下面这段代码：</p><pre><code class=\"language-plain\">// 10 个 item 就能填满整个屏幕，渲染很快\n// 1000 个 item 相当于 100+ 个屏幕的高度，渲染很慢\nconst NUM_ITEMS = 1000; \n\nconst makeContent = (nItems: number, styles: any) =&gt; {\n  return Array(nItems)\n    .fill(1)\n    .map((_, i) =&gt; (\n      &lt;Pressable\n        key={i}\n        style={styles}&gt;\n        &lt;Text&gt;{'Item ' + i}&lt;/Text&gt;\n      &lt;/Pressable&gt;\n    ));\n};\n\nconst App = () =&gt; {\n  return (\n    &lt;SafeAreaView style={{flex: 1}}&gt;\n      &lt;ScrollView&gt;{makeContent(NUM_ITEMS, styles.itemWrapper)}&lt;/ScrollView&gt;\n    &lt;/SafeAreaView&gt;\n  );\n};\n</code></pre><p>上面这段代码，说的就是使用 ScrollView 组件一次性直接渲染 1000 个子视图，这里没有做任何懒加载优化。</p><p>以信息流业务为例，用户进入页面后第一眼看到的只有屏幕中的信息，一般不超过 10 条。一次性渲染 10 条信息，其实很快，就是一眨眼的功夫。但如果是 1000 条呢？算力乘以 100，内存乘以 100，耗时也乘以 100，渲染速度就慢下来了。大量的计算和内存浪费在了用户看不到的地方。</p><p>使用 ScrollView 组件时，ScrollView 的所有内容都会在首次刷新时进行渲染。内容很少的情况下当然无所谓，内容多起来了，速度也就慢下来了。</p><p>那有什么优化方案吗？你肯定想到了一些优化方案，比如按需渲染。</p><p>我参加过一个使用 React Native 开发的、类似抖音的视频流页面，用的就是按需渲染。用户始终只会看到当前屏幕显示的视频、下一个视频和上一个视频，我们只需要用 ScrollView 渲染 3 个视频就能满足用户的所有操作。这样做，无论用户怎么翻页，内存中就只有 3 个视频，当然也不会卡了。</p><p>刚刚说的视频流按需加载，做起来是相对容易一些的，因为只用控制 3 个视频就可以了。但类似微信朋友圈、京东首页这种一屏有多条信息内容的复杂列表页，手动按需加载就麻烦很多。那有没有“自动\"的按需加载方案呢？有。</p><h2>FlatList：按需渲染的列表组件</h2><p>FlatList 列表组件就是 “自动”按需渲染的。</p><p>FlatList 是 React Native 官方提供的第二代列表组件。FlatList 组件底层使用的是虚拟列表 VirtualizedList，VirtualizedList 底层组件使用的是 ScrollView 组件。因此 VirtualizedList 和  ScrollView 组件中的大部分属性，FlatList 组件也可以使用。关于 FlatList 更具体的使用方法，你可以查看<a href=\"https://reactnative.dev/docs/flatlist\">官方文档</a>。现在，我们还是回到 FlatList 的原理，先从理论层面上理解 FlatList 为什么可以自动按需渲染。</p><p>我们要知道，列表组件和滚动组件的关键区别是，列表组件把其内部子组件看做由一个个列表项组成的集合，每一个列表项都可以单独渲染或者卸载。而滚动组件是把其内部子组件看做一个整体，只能整体渲染。而自动按需渲染的前提就是每个列表项可以独立渲染或卸载。</p><p>简单地讲，FlatList 性能比 ScrollView 好的原因是， FlatList 列表组件利用按需渲染机制减少了首次渲染的视图，利用空视图的占位机制回收了原有视图的内存，你可以对比一下二者的区别：</p><pre><code>// 从上到下滚动时的渲染方式\n// SrcollView 渲染方式：一次渲染所有视图\nSrcollView0_9  = [{👁},{ },{ },{ }]  // 浏览0~9条列表项\nSrcollView10_19 = [{ },{👁},{ },{ }] // 浏览10~19条列表项\nSrcollView20_29 = [{ },{ },{👁},{ }] // 浏览20~29条列表项\nSrcollView30_39 = [{ },{ },{ },{👁}] // 浏览30~39条列表项\n\n// FlatList 渲染方式：按需渲染，看不见的地方用 $empty 占位\nFlatList0_9  = [{👁},{ }]               // 浏览0~9条列表项\nFlatList10_19 = [{ },{👁},{ }]          // 浏览10~19条列表项\nFlatList20_29 = [$empty,{},{👁},{}]     // 浏览20~29条列表项\nFlatList30_39 = [$empty,$empty,{ },{👁}]// 浏览30~39条列表项\n</code></pre><p>在上面的示例中，同样是渲染 40 条列表。ScrollView 一次性渲染了 40 条列表，无论你滚动到哪儿，所有的列表项都是渲染好的。</p><p>但FlatList 在你浏览 0~9 条列表项时，只渲染了0~19条列表，剩余的20~39条列表项是没有渲染的。在你浏览滚动到第 10~19 条时，FlatList 把 20~29 条列表项提前加载出来了，这就是按需渲染加载机制.当你继续滚动到 20~29 条列表项时，FlatList 会把第 0~9 条列表项回收，用空元素 <span dollar=\"\">$</span>empty 代替，当你再滚动到 30~39 条列表项时，同理 10~19 条列表项也会被空元素 <span dollar=\"\">$</span>empty，这就是内存回收。</p><p>40 条列表只是一个假设的例子，实现 FlatList自动按需渲染的思路具体可以分为三步：</p><ol>\n<li>通过滚动事件的回调参数，计算需要按需渲染的区域；</li>\n<li>通过需要按需渲染的区域，计算需要按需渲染的列表项索引；</li>\n<li>只渲染需要按需渲染列表项，不需要渲染的列表项用空视图代替。</li>\n</ol><p>第一步，计算按需渲染区域。具体地说，每次你滚动页面，都会触发滚动组件 ScrollView 组件的一个“异步”回调 onScroll 事件。</p><p>在 onScroll 事件中，我们可以获取到当前滚动的偏移量 offset 等信息。以当前滚动的偏移量为基础，默认向上数 10 个屏幕的高度，向下数 10 个屏幕的高度，这一共 21 个屏幕的内容就是需要按需渲染的区域，其他区域都是无需渲染的区域。这样，即便是异步渲染，我们也不能保证所有 JavaScript 执行的渲染任务都实时地交由 UI 线程处理，立刻展示出来。但因为有这 10 个屏幕的内容作为缓冲，用户无论是向上滚动还是向下滚动，都不至于一滚动就看到白屏。</p><p>现在我们知道了按需渲染的区域，接着要计算的就是按需渲染列表项的索引。FlatList 内部实现就是通过 setState 改变按需渲染区域第一个索引和最后一个索引的值，来实现按需渲染的 。</p><p>怎么计算按需渲染列表项的索引呢？接着我们继续看第二步。这里我们分两种情况，第一种是列表项的高度是确定的情况，另外一种是列表项的高度是不确定的情况。</p><p>如果设计师给的列表项的高度是确定的，那么我们在写代码的时候，就可以通过获取列表项布局属性 getItemLayout 告诉 FlastList。在列表项高度确定，且知道按需渲染区域的情况下，“求按需渲染列表项的索引”就是一个简单的四则运算的问题，程序能够准确地计算出来。</p><p>如果设计师给的 UI 稿中是不定高的列表项，也就是高度是由渲染内容决定的。你就没有办法在写代码的时候把列表项的高度告诉 FlastList 了，那么 FlastList 就要先把列表项渲染出来才能获取高度。对于高度未知的情况，FlastList 会启用列表项的布局回调函数 onLayout，在 onLayout 中会有大量的动态测量高度的计算，包括每个列表项的准确高度和整体的平均高度。</p><p>在这种列表项高度不确定，而且给定按需渲染区域的情况下，我们可以通过列表项的平均高度，把按需渲染列表项的索引大致估算出来了。即便有误差，比如预计按需渲染区域为上下 10 个屏幕，实际渲染时只有上下 7、8 个屏幕也是能接受的，大部分情况下用户是感知不到的屏幕外内容渲染的。</p><p>但是，实际生产中，如果你不填 getItemLayout 属性，不把列表项的高度提前告诉 FlastList，让 FlastList 通过 onLayout 的布局回调动态计算，用户是可以感觉到滑动变卡的。因此，如果你使用 FlastList，又提前知道列表项的高度，我建议你把 getItemLayout 属性填上。</p><p>第三步，渲染需要按需渲染列表项。有了索引后，渲染列表项就变得很简单，用 setState 即可。</p><p>假设 1 个屏幕高度的内容由 10 个列表项组成。在首次渲染的时候，按需渲染的列表项索引是 0~110，这时会渲染 11 个屏幕高度的内容。当用户滑到第 11 个屏幕时，索引就是 0~210，这时再在后面渲染 10 个屏幕高度的内容。当用户滑到第 21 个屏幕时，索引是 100~310，又会再在后面渲染 10 个屏幕高度的内容，同时把前面 10 个屏幕高的内容用空视图代替。当然这个过程是顺滑的，列表项是一个个渲染的，而不是 1 个屏幕或 10 个屏幕渲染的。</p><h2>RecyclerListView：可复用的列表组件</h2><p>聊完 FlastList，我们再来看下 RecyclerListView。</p><p>RecyclerListView 是开源社区提供的列表组件，它的底层实现和 FlatList 一样也是 ScrollView，它也要求开发者必须将内容整体分割成一个个列表项。</p><p>在首次渲染时，RecyclerListView 只会渲染首屏内容和用户即将看到的内容，所以它的首次渲染速度很快。在滚动渲染时，只会渲染屏幕内的和屏幕附近 250 像素的内容，距离屏幕太远的内容是空的。</p><p>React Native 的 RecyclerListView 复用灵感来源于 Native 的可复用列表组件。</p><p>在 iOS 中，表单视图 UITableView，实际就是可以上下滚动、左右滚动的可复用列表组件。它可以通过复用唯一标识符 reuseIdentifier，标记表单中的复用单元 cell，实现单元 cell 的复用。</p><p>在 Android 上，动态列表 RecyclerView 在列表项视图滚出屏幕时，不会将其销毁，相反会把滚动到屏幕外的元素，复用到滚动到屏幕内的新的列表项上。这种复用方法可以显著提高性能，改善应用响应能力，并降低功耗。</p><p>如果你只开发过 Web，你可以这样理解复用：原来你要销毁一个浏览器中 DOM，再重新创建一个新的 DOM，现在你只改变了原有 DOM 的属性，并把原有的 DOM 挪到新的位置上。</p><p>RecyclerListView 的复用机制是这样的，你可以把列表比作数组 list，把列表项类比成数组的元素。用户移动 ScrollView 时，相当于往数组 list 后面 push 新的元素对象，而 RecyclerListView 相当于把 list 的第一项挪到了最后一项中。挪动对象位置用到的计算资源少，也不用在内存中开辟一个新的空间。而创建新的对象，占用计算资源多，同时占用新的内存空间。</p><p>简而言之，RecyclerListView 在滚动时复用了列表项，而不是创建新的列表项，因此性能好。</p><h2>从使用方式看底层原理</h2><p>接下来，我们从 RecyclerListView 使用方式的角度，进一步地剖析其底层原理。</p><p>RecyclerListView 有三个必填参数：</p><ul>\n<li>列表数据：dataProvider(dp)；</li>\n<li>列表项的布局方法：layoutProvider；</li>\n<li>列表项的渲染函数：rowRenderer。</li>\n</ul><p>先来看<strong>第一个必填参数列表数据 dataProvider（dp）</strong>。为了区分列表数据 dataProvider（第一个字母小写）和列表数据类 DataProvider（第一个字母大写），后面我会用缩写 dp 来代替列表数据，其使用方法如下：</p><pre><code class=\"language-plain\">const listData = Array(300).fill(1).map( (_,i) =&gt; i)\n\nconst dp = new DataProvider((r1, r2) =&gt; {\n   return r1 !== r2;\n});\n\nthis.state = {\n    dataProvider: dp.cloneWithRows(listData),\n};\n\nthis.setState({\n  dataProvider: dp.cloneWithRows(newListData),\n})\n</code></pre><p>在上面代码中，我们首先通过 Array(300) 创建了一个长度为 300 的数组 listData，其内容是 0~299 的数字，我们通过它来模拟 300 条信息数据。</p><p>接着，dp 是列表数据类 DataProvider new 出来的对象，它是一个存放 listData 的数据容器。它有一个必填参数，就是对比函数。在列表项复用时，对比函数会频繁地调用，因此我们只推荐对更新数据进行 r1 !== r2 的浅对比，不推荐深对比。</p><p>第三部分代码，是我们调用 dp.cloneWithRow 方法，该方法接收 listData 数组作为参数，这时我们正式把 listData 装到了 dp 容器中。其返回值 dataProvider，就是 React 的列表状态。</p><p>第四部分代码，是我们调用 setState 方法，该方法接收 dp.cloneWithRows()  的返回的 dp 对象作为参数，dp 列表数据对象更新了，整个列表也就更新了。</p><p>接下来是<strong>第二个必填参数，列表项的布局方法 layoutProvider。</strong></p><pre><code class=\"language-plain\">const _layoutProvider = new LayoutProvider(\n  index =&gt; {\n    if (index % 3 === 0) {\n      return ViewTypes.FULL;\n    } else {\n      return ViewTypes.HALF_RIGHT;\n    }\n  },\n  (type, dimension) =&gt; {\n    switch (type) {\n      case ViewTypes.HALF_RIGHT:\n        dimension.width = width / 2;\n        dimension.height = 160;\n        break;\n      case ViewTypes.FULL:\n        dimension.width = width;\n        dimension.height = 140;\n        break;\n    }\n  },\n);\n</code></pre><p>layoutProvider 类初始化时，有两个函数入参。第一个入参函数是通过索引 index 获取类型 type，对应的是类型可枚举。第二个入参函数是通过类型 type 和布局尺寸 dimension 获取每个类型的宽高 width 和 height，对应的是确定宽高。</p><p>用起来很简单，但这两个入参为什么要这么设计，它们有什么用？</p><p>使用列表组件 RecyclerListView 有两个前提：首先是列表项的宽高必须是确定的，或者是大致确定的；第二是列表项的类型必须是可枚举的。这两个前提，都体现在了列表项的布局方法 layoutProvider 中了。</p><p>先来看第一个前提，宽高必须确定。RecyclerListView 用的是 position:absolute 的绝对定位布局，所有的列表项的宽度 width、高度 height、顶部偏移量 top、左边偏移量 left 都得在布局之前计算出来。</p><p>但实际上布局方法 layoutProvider，只需要知道列表项的宽（width）、高（height）就可以了，偏移量 top、left 可以根据宽高推算出来。比如，第 N 个列表项的偏移量 top 值，实际等于前面 N - 1 个列表项的高度之和。</p><p>如果宽高不确定呢？分两种情况，一种就是不确定的，另一种是不确定但可以转换为大致确定的。对于就是不确定的情况，RecyclerListView 是无解的；对于大致确定的情况，我们可以开启 forceNonDeterministicRendering 小幅修正布局位置。</p><p>比如，信息流的标题文字少的时候是一行布局，文字多的时候是两行布局，一行两行的高度偏差不大，可以在渲染后让框架帮忙进行小幅修正。通常在用户看到之前，这种小幅修正就已经完成了，用户感知不到列表的偏移。</p><p>但如果是信息流的内容高度不确定，相差百来个像素，这种大幅修正可能会让用户察觉到，不适合使用 RecyclerListView 。</p><p>再来看第二个前提，类型可枚举。可枚举很好理解，两个列表项的底层 UI 视图必须一样或者大致相似，才能只改列表数据复用列表视图。如果每个列表项的 JSX 结构完全不一样，就不存在复用的可能性。一般来说，一个类型对应一个自定义组件。</p><p>理解了确定宽高和类型可枚举两个前提后，你再来看布局方法 layoutProvider 需要的两个函数入参，就能清楚它的原因了。</p><p>最后是<strong>第三个必填参数，列表项的渲染函数：rowRenderer。</strong></p><p>有了数据、布局，还得有组件进行承载。列表内容被分割成了一个个的列表项，每一个列表项展示都是独立的内容信息，而可枚举的列表项组件用于承载每条信息的载体。列表项的渲染函数 rowRenderer 的作用就是根据类型和数据，返回对应的自定义列表项组件。这块逻辑比较简单，我就不做过多讲解了。</p><p>rowRenderer 的对应代码，我也放在了这里，你可以对照查看：</p><pre><code class=\"language-plain\">//Given type and data return the view component\n  _rowRenderer(type, data) {\n    //You can return any view here, CellContainer has no special significance\n    switch (type) {\n      case ViewTypes.HALF_RIGHT:\n        return (\n          &lt;CellContainer style={styles.containerGridRight}&gt;\n            &lt;Text&gt;Data: {data}&lt;/Text&gt;\n          &lt;/CellContainer&gt;\n        );\n      case ViewTypes.FULL:\n        return (\n          &lt;CellContainer style={styles.container}&gt;\n            &lt;Text&gt;Data: {data}&lt;/Text&gt;\n          &lt;/CellContainer&gt;\n        );\n      default:\n        return null;\n    }\n  }\n</code></pre><h2>PK：ScrollView、FlatList、RecyclerListView</h2><p>到这里，我相信你已经对 ScrollView、FlatList 和 RecyclerListView 底层原理有了一定的了解。现在，我们再横向对比一下这三个组件，帮你加深理解。</p><p>从底层原理看：</p><ul>\n<li>ScrollView 内容的布局方式是从上到下依次排列的，你给多少内容，ScrollView 就会渲染多少内容；</li>\n<li>FlatList 内容的布局方式还是从上到下依次排列的，它通过更新第一个和最后一个列表项的索引控制渲染区域，默认渲染当前屏幕和上下 10 屏幕高度的内容，其他地方用空白视图进行占位；</li>\n<li>RecyclerListView 性能最好，你应该优先使用它，但使用它的前提是列表项类型可枚举且高度确定或大致确定。</li>\n</ul><p>理解了底层原理，FlatList 和 RecyclerListView 孰强孰弱，相信你已经有了答案。</p><p>内存上，FlatList  要管理 21 个屏幕高度的内容，而 RecyclerListView 只要管理大概 1 个多点屏幕高度的内容，RecyclerListView 使用的内存肯定少。计算量上，FlatList  要实时地销毁新建 Native 的 UI 视图，RecyclerListView 只是改变 UI 视图的内容和位置，RecyclerListView 在 UI 主线程计算量肯定少。</p><p>你也可以自己实际的体验、看看性能指标或者 Debug 一下，来佐证你的结论。</p><p>理解了底层原理，ScrollView、FlatList 和 RecyclerListView 使用场景，估计你也能基本把握住了：</p><ul>\n<li>ScrollView 适合内容少的页面，只有几个屏幕高页面是适合的；</li>\n<li>FlatList 性能还过得去，但我不推荐你优先使用它，只有在你的列表项内容高度不能事先确定，或者不可枚举的情况下使用它；</li>\n<li>RecyclerListView 性能最好，你应该优先使用它，但使用它的前提是可枚举且高度确定或大致确定。</li>\n</ul><p>这里我也总结成了两张图表，你可以看看：</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/71/e9572yy831332ba1fb8baf0a48bc7e71.png?wh=1920x1050\" alt=\"图片\"></p><p><img src=\"https://static001.geekbang.org/resource/image/e6/a0/e6cb77f6425810e752abbeb643dbb9a0.png?wh=1870x964\" alt=\"图片\"></p><h2>总结</h2><p>最后，我们总结一下今天这节课所讲的重点：</p><ol>\n<li>滚动组件 ScrollView 是列表组件 FlastList 和 RecyclerListView 的底层实现，ScrollView 的绝大部分属性在 FlastList 和 RecyclerListView 上都有；</li>\n<li>从按需渲染的可视区域的大小和对底层 UI 视图的操作方式上分析，RecyclerListView 比 FlastList 的内存更少，在 UI 线程的计算量也更少；</li>\n<li>为了让你的无限列表性能更好，我推荐你优先使用 RecyclerListView，然后才是 FlastList。</li>\n</ol><p>列表是一个很大的话题，牵涉到的性能优化细节和实践内容很多，这一讲可以算作列表的一个入门。</p><p>受限于手机性能，无限列表是经常出现性能问题的重灾区，我也参与和优化过一些非常复杂的无限列表场景，包括 Hybrid、小程序 和 React Native，有过非常多的实践。在后面的篇章中，我会基于这些入门知识，和你讲讲具体业务中的实践操作，还有一些新架构中无限列表的变化。</p><p>在这一讲中，我希望你能把基础打好，自己动手实践一下 ScrollView、FlastList 和 RecyclerListView。同样，今天我也给你留了补充材料和作业。</p><h2>补充材料</h2><h3>使用文档：</h3><ul>\n<li><a href=\"https://reactnative.dev/docs/scrollview\">ScrollView</a> 和 <a href=\"https://reactnative.dev/docs/flatlist\">FlatList</a> 你可以参考官方文档，进一步学习它们的具体使用。</li>\n<li>RecyclerListView 你可以在 Github 上找到它的<a href=\"https://github.com/Flipkart/recyclerlistview\">文档</a>，在作者的博客<a href=\"https://medium.com/@naqvitalha/recyclerlistview-high-performance-listview-for-react-native-and-web-e368d6f0d7ef\">《RecyclerListView: High performance ListView for React Native and Web》</a>了解它的诞生背景。</li>\n</ul><h3>实战指南：</h3><ul>\n<li>RecyclerListView 的内部状态是 renderStack 用于确定哪些视图应该渲染，<a href=\"https://github.com/Flipkart/recyclerlistview/blob/c80825fabe510a48ced722e2e6e9dc1b50e8e273/src/core/VirtualRenderer.ts#L213-L222\">它的复用机制是通过列表项的类型 type 找到要被回收列表项 renderStack[key]，然后用新列表项索引 index 替换被回收的列表项索引 oldIndex</a>。</li>\n<li>RecyclerListView 是可以实现高度不确定的无限列表的。图片的高度可以通过服务端事先传过来，文字的高度可以按照我在<a href=\"https://mp.weixin.qq.com/s/kN4MxfEkvICq3JneUvM56w\">《React Native 无限列表的优化与实践》</a>一文中提供的算法提前算出来，再开启高度动态修正。</li>\n<li>RecyclerListView 也是可以实现瀑布流布局的。RecyclerListView 其实就是绝对定位(x,y,width,height)，但不支持双列，你可以用 <a href=\"https://github.com/ds300/patch-package\">patch-package</a> ，把底层计算 layout 用的 <a href=\"https://github.com/Flipkart/recyclerlistview/blob/782e6ebb0ed944a653e8c83eac9329cfa243410c/src/core/layoutmanager/LayoutManager.ts#L99-L105\">“relayoutFromIndex” 和 “this._layouts” </a>改了。</li>\n<li>它们的 Demo 我放在了 <a href=\"https://github.com/jiangleo/react-native-classroom/tree/main/src/08_List\">GitHub</a> 上，你可以动手把玩一下。</li>\n</ul><h2>作业</h2><ol>\n<li>请你使用 React Hook 的语法实现一个 RecyclerListView 无限列表。</li>\n<li>你遇到过那些列表性能问题又是怎么解决的，能不能和我们分享一下你的心得？</li>\n</ol><p>欢迎在留言区分享你的见解。我是蒋宏伟，咱们下节课见。</p>","comments":[{"had_liked":false,"id":344220,"user_name":"卯熙","can_delete":false,"product_type":"c1","uid":1382231,"ip_address":"","ucode":"37B33ADD3A9681","user_header":"https://static001.geekbang.org/account/avatar/00/15/17/57/ac61fff9.jpg","comment_is_top":false,"comment_ctime":1651377199,"is_pvip":false,"replies":[{"id":125707,"content":"不建议一次请求回来。\n1. 无限列表，理论上页码是无限的，不可能一次请求回来。因此，还需要对请求的数据进行分页。\n2. 推荐使用 react query，帮你做列表的状态管理，只需配置一下就能帮你自动管理无限列表的分页。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1651502103,"ip_address":"","comment_id":344220,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"老师， 按需渲染组件，数据还需要分页加载吗？是不是可以不用分页加载，一次性把数据请求回来，它会自动按需渲染。","like_count":1,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569639,"discussion_content":"不建议一次请求回来。\n1. 无限列表，理论上页码是无限的，不可能一次请求回来。因此，还需要对请求的数据进行分页。\n2. 推荐使用 react query，帮你做列表的状态管理，只需配置一下就能帮你自动管理无限列表的分页。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651502103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341718,"user_name":"山文宋","can_delete":false,"product_type":"c1","uid":1456101,"ip_address":"","ucode":"D45AA950BDEDE8","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/e5/92cf5c98.jpg","comment_is_top":false,"comment_ctime":1649804126,"is_pvip":false,"replies":[{"id":124893,"content":"在生态篇的《React Native Awesome》会有介绍。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1649907066,"ip_address":"","comment_id":341718,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"老师，有比较好的RN的书或者资料推荐吗？","like_count":1,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562914,"discussion_content":"在生态篇的《React Native Awesome》会有介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649907066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343502,"user_name":"持续思考持续做的牛牛","can_delete":false,"product_type":"c1","uid":1060882,"ip_address":"","ucode":"3F8C050D0D6A02","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/12/aa2d5cb3.jpg","comment_is_top":false,"comment_ctime":1650879930,"is_pvip":false,"replies":[{"id":125412,"content":"只能重构了 ListView ，目前不支持复用，性能太差。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1650944709,"ip_address":"","comment_id":343502,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"现在新架构里面分支，0.68，有相应的listview优化么？怎么看不到对应的scrollview os库？rrc_scrollview这个组件是还没有完成么？","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567572,"discussion_content":"只能重构了 ListView ，目前不支持复用，性能太差。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650944709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343498,"user_name":"持续思考持续做的牛牛","can_delete":false,"product_type":"c1","uid":1060882,"ip_address":"","ucode":"3F8C050D0D6A02","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/12/aa2d5cb3.jpg","comment_is_top":false,"comment_ctime":1650877930,"is_pvip":false,"replies":[{"id":125413,"content":"可以。12讲的 Github 上有代码。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1650944763,"ip_address":"","comment_id":343498,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"对于item高度会变化的，能适配么？","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567574,"discussion_content":"可以。12讲的 Github 上有代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650944763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342858,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/5066026c.jpg","comment_is_top":false,"comment_ctime":1650509046,"is_pvip":false,"replies":[{"id":125235,"content":"给动手能力点赞👍\n一、会引起 RecyclerList 组件的 re-render，但不会引起 ListItem 组件的 re- render ，你可打日志试试。\n二、  {loading &amp;&amp; &lt;Loading &#47;&gt;}，引起了高度的改变，所以有抖动。loading 状态只改变文案内容，不控制元素出现和消失就不会引起高度改变。\n","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1650516180,"ip_address":"","comment_id":342858,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"作业 \n1， https:&#47;&#47;github.com&#47;hdouhua&#47;hybrid-mobile-app&#47;tree&#47;main&#47;AwesomeProject&#47;src&#47;c08\n2， 新手，工作中没有使用过，作业中有下面两个问题，请老师帮忙解答。\n一，设置 loading 属性会引起 RecyclerListView 重新渲染\n二，屏幕下方 “加载更多” 按钮，屏幕有一点抖动","like_count":0,"discussions":[{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/5066026c.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566217,"discussion_content":"感谢老师的回复。\nre-render 的问题，打了日志发现也重新渲染了 ListItem ，解决方式是将它用 React.memo 输出。\n关于加载更多的抖动，即使把 Loading 组件移除，仍然存在问题。\n最后 stackoverflow 上查到这个 https://stackoverflow.com/questions/59573435/recyclerlistview-scrolls-to-top-onendreached-with-functional-component\n解决的关键是 layoutProvider.shouldRefreshWithAnchoring = false 。\n修改了以上几点，整个无限列表加载挺完美了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1650630897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565686,"discussion_content":"给动手能力点赞👍\n一、会引起 RecyclerList 组件的 re-render，但不会引起 ListItem 组件的 re- render ，你可打日志试试。\n二、  {loading &amp;&amp; &lt;Loading /&gt;}，引起了高度的改变，所以有抖动。loading 状态只改变文案内容，不控制元素出现和消失就不会引起高度改变。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650516180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342030,"user_name":"geeklyc","can_delete":false,"product_type":"c1","uid":1264061,"ip_address":"","ucode":"F25441AB6433B3","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/bd/ae37990b.jpg","comment_is_top":false,"comment_ctime":1649984813,"is_pvip":false,"replies":[{"id":125006,"content":"有，见 11 讲和 12讲","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1649992949,"ip_address":"","comment_id":342030,"utype":1}],"discussion_count":1,"race_medal":5,"score":2,"product_id":100110101,"comment_content":"老师，有支持多列，瀑布流的不。RecyclerListView","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563429,"discussion_content":"有，见 11 讲和 12讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649992950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341739,"user_name":"Geek_e4a05b","can_delete":false,"product_type":"c1","uid":1093010,"ip_address":"","ucode":"C87428F72AF63B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ad/92/98a1fd3c.jpg","comment_is_top":false,"comment_ctime":1649817236,"is_pvip":false,"replies":[{"id":124894,"content":"你是小飞侠？\n是的，现在性能越来越好了，但我还是推荐 RecyclerListView，因为低端机加载可能还是会遇到渲染 windowSize 多屏的白屏问题。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1649907304,"ip_address":"","comment_id":341739,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"RecyclerListView 在安卓底端机上暴力滑动底部有可能有闪动情况。RecyclerListView如果卡片高度不固定需要提前计算卡片高度，这个可能会牺牲展示时间。Flatlist可以通过指定windowSize来减少白屏出现，感觉性能比之前好很多了。","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562916,"discussion_content":"你是小飞侠？\n是的，现在性能越来越好了，但我还是推荐 RecyclerListView，因为低端机加载可能还是会遇到渲染 windowSize 多屏的白屏问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649907304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378452,"user_name":"Luvian","can_delete":false,"product_type":"c1","uid":3681875,"ip_address":"上海","ucode":"010DEBFDC4D1C5","user_header":"https://static001.geekbang.org/account/avatar/00/38/2e/53/734a3675.jpg","comment_is_top":false,"comment_ctime":1690272646,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"现在有一个新的flashList，原理和recycleList差不多，但是使用更简单","like_count":2},{"had_liked":false,"id":362491,"user_name":"Duke","can_delete":false,"product_type":"c1","uid":1014513,"ip_address":"陕西","ucode":"ACB56A7C07C231","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/f1/d785984a.jpg","comment_is_top":false,"comment_ctime":1668569286,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"最后一个列表项可枚举是什么意思？","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603202,"discussion_content":"UI稿中给列表项的样式的种类，比如左文右图、左图右文、ICONs就算三种不同种类，这些种类必须可以枚举。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676015960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350039,"user_name":"IRONMAN","can_delete":false,"product_type":"c1","uid":3025357,"ip_address":"","ucode":"999D6739279846","user_header":"https://static001.geekbang.org/account/avatar/00/2e/29/cd/0e6994f8.jpg","comment_is_top":false,"comment_ctime":1656514717,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"你好，这个是我写的rowRenderer的函数:\n const _rowRenderer = (type,data)=&gt;{\n        console.log(data,data.name)\n        &#47;&#47;编写如何渲染数据\n       return (\n        &lt;View style={{height:100}}&gt;\n             &lt;Text &gt;data&lt;&#47;Text&gt;\n          \n        &lt;&#47;View&gt;\n       )\n    }\n\n但是在模拟显示的时候却报错：\n  LayoutException: RecyclerListView needs to have a bounded size. Currently height or, width is 0.Consider adding style={{flex:1}} or, fixed dimensions\n\n     我明明已经明确了每一个列表项的height，为什么还会报错？但是一旦我重新刷新之后，报错就消失了，但是控制台中并没有打印我在rowRenderer函数中中指定的信息，所以为什么rowRenderer函数没有被调用？\n","like_count":0},{"had_liked":false,"id":350032,"user_name":"IRONMAN","can_delete":false,"product_type":"c1","uid":3025357,"ip_address":"","ucode":"999D6739279846","user_header":"https://static001.geekbang.org/account/avatar/00/2e/29/cd/0e6994f8.jpg","comment_is_top":false,"comment_ctime":1656513217,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"老师我用函数组件重新写了一下你的demo，为什么RecycleListView中的内容根本不显示，页面一篇空白。\nfunction  Scroll (props){\n    const {width} = useContext(devInfoContext)\n    &#47;&#47; const {data} =  props\n    const data = [1,2,3]\n\n    const [_dataProvider] = useState(new DataProvider((r1,r2)=&gt;{\n        return r1 !== r2\n    }))\n\n    &#47;&#47;因为容器内的数据是一直在变化的，所以需要容器内部的数据保存到state中，进入让其会更新界面\n    const [dataProvider] = useState(_dataProvider.cloneWithRows(data))\n\n\n    const [_layoutProvider] = useState(new LayoutProvider(index=&gt;{\n        if (index % 3 === 0) {\n            return ViewTypes.FULL;\n          } else if (index % 20 === 0) {\n            return ViewTypes.HALF_LEFT;\n          } else {\n            return ViewTypes.HALF_RIGHT;\n          }\n    },(type,dim)=&gt;{\n        switch (type) {\n            case ViewTypes.HALF_LEFT:\n              dim.width = width &#47; 2 - 0.0001;\n              dim.height = 160;\n              break;\n            case ViewTypes.HALF_RIGHT:\n              dim.width = width &#47; 2;\n              dim.height = 160;\n              break;\n            case ViewTypes.FULL:\n              dim.width = width;\n              dim.height = 140;\n              break;\n            default:\n              dim.width = 0;\n              dim.height = 0;\n          }\n    }))\n&#47;&#47; console.log(dataProvider)\n    const _rowRenderer = (type,data)=&gt;{\n        console.log(data,data.name)\n        &#47;&#47;编写如何渲染数据\n       return (\n        &lt;View style={{height:10}}&gt;\n           { [1,2,3].map(()=&gt;{\n               return  &lt;Text key={String(new Date().getUTCMilliseconds())}&gt;data&lt;&#47;Text&gt;\n            })}\n        &lt;&#47;View&gt;\n       )\n    }\n\n    return (\n        &lt;RecyclerListView\n            renderAheadOffset={100}\n            layoutProvider={_layoutProvider}\n            dataProvider={dataProvider}\n            rowRenderer={_rowRenderer}\n            style={{flex:1}}\n        \n        &#47;&gt;\n    )\n\n}","like_count":0},{"had_liked":false,"id":349958,"user_name":"大龙龙龙","can_delete":false,"product_type":"c1","uid":2435368,"ip_address":"","ucode":"26C1A7C8A22AFA","user_header":"https://static001.geekbang.org/account/avatar/00/25/29/28/b6b73f57.jpg","comment_is_top":false,"comment_ctime":1656471389,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"老师， 问一下 之前的章节都是 funcation实现组件， 到这里 我看到demo里的recyclerlistview 为什么使用类来实现组件了呢？","like_count":0},{"had_liked":false,"id":347974,"user_name":"Aaaaaaaaaaayou","can_delete":false,"product_type":"c1","uid":1073601,"ip_address":"","ucode":"67BA315B87587D","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/c1/93031a2a.jpg","comment_is_top":false,"comment_ctime":1654619745,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"一般业务中列表数据都是分页请求的，按照文中的说法“已经渲染好的组件滚动是跟js没关系的”，那这种场景是不是用scrollview就好了？","like_count":0,"discussions":[{"author":{"id":3681875,"avatar":"https://static001.geekbang.org/account/avatar/00/38/2e/53/734a3675.jpg","nickname":"Luvian","note":"","ucode":"010DEBFDC4D1C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624178,"discussion_content":"分页数据也是要拼接的，你翻页多了，数据就多了，这时候scrollview全部给你展示了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690276288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2372639,"avatar":"","nickname":"极客CEO","note":"","ucode":"BB61D4C694FAFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589906,"discussion_content":"你越滚，scrollview列表就越长，内存就越大，手机会卡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665390445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}