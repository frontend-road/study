{"id":248305,"title":"18 | 性能分析：找出程序的瓶颈","content":"<p>你好，我是Chrono。</p><p>今天是“技能进阶”单元的最后一节课，我也要兑现刚开始在“概论”里的承诺，讲一讲在运行阶段我们能做什么。</p><h2>运行阶段能做什么</h2><p>在编码阶段，你会运用之前学习的各种范式和技巧，写出优雅、高效的代码，然后把它交给编译器。经过预处理和编译这两个阶段，源码转换成了二进制的可执行程序，就能够在CPU上“跑”起来。</p><p>在运行阶段，C++静态程序变成了动态进程，是一个实时、复杂的状态机，由CPU全程掌控。但因为CPU的速度实在太快，程序的状态又实在太多，所以前几个阶段的思路、方法在这个时候都用不上。</p><p>所以，我认为，在运行阶段能做、应该做的事情主要有三件：<strong>调试</strong>（Debug）<strong>、测试</strong>（Test）<strong>和性能分析</strong>（Performance Profiling）。</p><p>调试你一定很熟悉了，常用的工具是GDB，我在前面的“<a href=\"https://time.geekbang.org/column/article/239599\">轻松话题</a>”里也讲过一点它的使用技巧。它的关键是让高速的CPU慢下来，把它降速到和人类大脑一样的程度，于是，我们就可以跟得上CPU的节奏，理清楚程序的动态流程。</p><p>测试的目标是检验程序的功能和性能，保证软件的质量，它与调试是相辅相成的关系。测试发现Bug，调试去解决Bug，再返回给测试验证。好的测试对于软件的成功至关重要，有很多现成的测试理论、应用、系统（你可以参考下，我就不多说了）。</p><!-- [[[read_end]]] --><p>一般来说，程序经过调试和测试这两个步骤，就可以上线运行了，进入第三个、也是最难的性能分析阶段。</p><p>什么是性能分析呢？</p><p>你可以把它跟Code Review对比一下。Code Review是一种静态的程序分析方法，在编码阶段通过观察源码来优化程序、找出隐藏的Bug。而性能分析是一种动态的程序分析方法，在运行阶段采集程序的各种信息，再整合、研究，找出软件运行的“瓶颈”，为进一步优化性能提供依据，指明方向。</p><p>从这个粗略的定义里，你可以看到，性能分析的关键就是“<strong>测量</strong>”，用数据说话。没有实际数据的支撑，优化根本无从谈起，即使做了，也只能是漫无目的的“不成熟优化”，即使成功了，也只是“瞎猫碰上死耗子”而已。</p><p>性能分析的范围非常广，可以从CPU利用率、内存占用率、网络吞吐量、系统延迟等许多维度来评估。</p><p>今天，我只讲多数时候最看重的CPU性能分析。因为CPU利用率通常是评价程序运行的好坏最直观、最容易获取的指标，优化它是提升系统性能最快速的手段。而其他的几个维度也大多与CPU分析相关，可以达到“以点带面”的效果。</p><h2>系统级工具</h2><p>刚才也说了，性能分析的关键是测量，而测量就需要使用工具，那么，你该选什么、又该怎么用工具呢？</p><p>其实，Linux系统自己就内置了很多用于性能分析的工具，比如top、sar、vmstat、netstat，等等。但是，Linux的性能分析工具太多、太杂，有点“乱花渐欲迷人眼”的感觉，想要学会并用在实际项目里，不狠下一番功夫是不行的。</p><p>所以，为了让你能够快速入门性能分析，我根据我这些年的经验，挑选了四个“高性价比”的工具：top、pstack、strace和perf。它们用起来很简单，而且实用性很强，可以观测到程序的很多外部参数和内部函数调用，由内而外、由表及里地分析程序性能。</p><p>第一个要说的是“<strong>top</strong>”，它通常是性能分析的“起点”。无论你开发的是什么样的应用程序，敲个top命令，就能够简单直观地看到CPU、内存等几个最关键的性能指标。</p><p>top展示出来的各项指标的含义都非常丰富，我来说几个操作要点吧，帮助你快速地抓住它的关键信息。</p><p>一个是按“M”，看内存占用（RES/MEM），另一个是按“P”，看CPU占用，这两个都会从大到小自动排序，方便你找出最耗费资源的进程。</p><p>另外，你也可以按组合键“xb”，然后用“&lt;&gt;”手动选择排序的列，这样查看起来更自由。</p><p>我曾经做过一个“魔改”Nginx的实际项目，下面的这个截图展示的就是一次top查看的性能：</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/a8/6a44808ccc8b1df7bef0a51c888ce2a8.png?wh=642*408\" alt=\"\"></p><p>从top的输出结果里，你可以看到进程运行的概况，知道CPU、内存的使用率。如果你发现某个指标超出了预期，就说明可能存在问题，接下来，你就应该采取更具体的措施去进一步分析。</p><p>比如说，这里面的一个进程CPU使用率太高，我怀疑有问题，那我就要深入进程内部，看看到底是哪些操作消耗了CPU。</p><p>这时，我们可以选用两个工具：<strong>pstack和strace</strong>。</p><p>pstack可以打印出进程的调用栈信息，有点像是给正在运行的进程拍了个快照，你能看到某个时刻的进程里调用的函数和关系，对进程的运行有个初步的印象。</p><p>下面这张截图显示了一个进程的部分调用栈，可以看到，跑了好几个ZMQ的线程在收发数据：</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/9c/6c115ce03d6b4803960277468cf91b9c.png?wh=1003*471\" alt=\"\"></p><p>不过，pstack显示的只是进程的一个“静态截面”，信息量还是有点少，而strace可以显示出进程的正在运行的系统调用，实时查看进程与系统内核交换了哪些信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/f0/b747d0d977c7f420507ec9e9d84e6ff0.png?wh=984*306\" alt=\"\"></p><p>把pstack和strace结合起来，你大概就可以知道，进程在用户空间和内核空间都干了些什么。当进程的CPU利用率过高或者过低的时候，我们有很大概率能直接发现瓶颈所在。</p><p>不过，有的时候，你也可能会“一无所获”，毕竟这两个工具获得的信息只是“表象”，数据的“含金量”太低，做不出什么有效的决策，还是得靠“猜”。要拿到更有说服力的“数字”，就得<strong>perf</strong>出场了。</p><p>perf可以说是pstack和strace的“高级版”，它按照固定的频率去“采样”，相当于连续执行多次的pstack，然后再统计函数的调用次数，算出百分比。只要采样的频率足够大，把这些“瞬时截面”组合在一起，就可以得到进程运行时的可信数据，比较全面地描述出CPU使用情况。</p><p>我常用的perf命令是“<strong>perf top -K -p xxx</strong>”，按CPU使用率排序，只看用户空间的调用，这样很容易就能找出最耗费CPU的函数。</p><p>比如，下面这张图显示的是大部分CPU时间都消耗在了ZMQ库上，其中，内存拷贝调用居然达到了近30%，是不折不扣的“大户”。所以，只要能把这些拷贝操作减少一点，就能提升不少性能。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/15/5543dec44c23d23b583bc937213e7c15.png?wh=796*523\" alt=\"\"></p><p>总之，<strong>使用perf通常可以快速定位系统的瓶颈，帮助你找准性能优化的方向</strong>。课下你也可以自己尝试多分析各种进程，比如Redis、MySQL，等等，观察它们都在干什么。</p><h2>源码级工具</h2><p>top、pstack、strace和perf属于“非侵入”式的分析工具，不需要修改源码，就可以在软件的外部观察、收集数据。它们虽然方便易用，但毕竟是“隔岸观火”，还是不能非常细致地分析软件，效果不是太理想。</p><p>所以，我们还需要有“侵入”式的分析工具，在源码里“埋点”，直接写特别的性能分析代码。这样针对性更强，能够有目的地对系统的某个模块做精细化分析，拿到更准确、更详细的数据。</p><p>其实，这种做法你并不陌生，比如计时器、计数器、关键节点打印日志，等等，只是通常并没有上升到性能分析的高度，手法比较“原始”。</p><p>在这里，我要推荐一个专业的源码级性能分析工具：<strong>Google Performance Tools</strong>，一般简称为gperftools。它是一个C++工具集，里面包含了几个专门的性能分析工具（还有一个高效的内存分配器tcmalloc），分析效果直观、友好、易理解，被广泛地应用于很多系统，经过了充分的实际验证。</p><pre><code>apt-get install google-perftools\napt-get install libgoogle-perftools-dev\n</code></pre><p>gperftools的性能分析工具有CPUProfiler和HeapProfiler两种，用来分析CPU和内存。不过，如果你听从我的建议，总是使用智能指针、标准容器，不使用new/delete，就完全可以不用关心HeapProfiler。</p><p>CPUProfiler的原理和perf差不多，也是按频率采样，默认是每秒100次（100Hz），也就是每10毫秒采样一次程序的函数调用情况。</p><p>它的用法也比较简单，只需要在源码里添加三个函数：</p><ul>\n<li><strong>ProfilerStart()</strong>，开始性能分析，把数据存入指定的文件里；</li>\n<li><strong>ProfilerRegisterThread()</strong>，允许对线程做性能分析；</li>\n<li><strong>ProfilerStop()</strong>，停止性能分析。</li>\n</ul><p>所以，你只要把想做性能分析的代码“夹”在这三个函数之间就行，运行起来后，gperftools就会自动产生分析数据。</p><p>为了写起来方便，我用shared_ptr实现一个自动管理功能。这里利用了void*和空指针，可以在智能指针析构的时候执行任意代码（简单的RAII惯用法）：</p><pre><code>auto make_cpu_profiler =            // lambda表达式启动性能分析\n[](const string&amp; filename)          // 传入性能分析的数据文件名\n{\n  ProfilerStart(filename.c_str());  // 启动性能分析\n  ProfilerRegisterThread();         // 对线程做性能分析\n\n  return std::shared_ptr&lt;void&gt;(     // 返回智能指针\n    nullptr,                        // 空指针，只用来占位\n    [](void*){                      // 删除函数执行停止动作\n        ProfilerStop();             // 停止性能分析\n    }   \n  );  \n};\n\n</code></pre><p>下面我写一小段代码，测试正则表达式处理文本的性能：</p><pre><code>auto cp = make_cpu_profiler(&quot;case1.perf&quot;);     // 启动性能分析\nauto str = &quot;neir:automata&quot;s;\n\nfor(int i = 0; i &lt; 1000; i++) {               // 循环一千次\n  auto reg  = make_regex(R&quot;(^(\\w+)\\:(\\w+)$)&quot;);// 正则表达式对象\n  auto what = make_match();\n\n  assert(regex_match(str, what, reg));        // 正则匹配\n}\n\n</code></pre><p>注意，我特意在for循环里定义了正则对象，现在就可以用gperftools来分析一下，这样做是不是成本很高。</p><p>编译运行后会得到一个“case1.perf”的文件，里面就是gperftools的分析数据，但它是二进制的，不能直接查看，如果想要获得可读的信息，还需要另外一个工具脚本pprof。</p><p>但是，pprof脚本并不含在apt-get的安装包里，所以，你还要从<a href=\"https://github.com/gperftools/gperftools\">GitHub</a>上下载源码，然后用“<code>--text</code>”选项，就可以输出文本形式的分析报告：</p><pre><code>git clone git@github.com:gperftools/gperftools.git\n\npprof --text ./a.out case1.perf &gt; case1.txt\n\nTotal: 72 samples\n  4   5.6%   5.6%   4   5.6% __gnu_cxx::__normal_iterator::base\n  4   5.6%  11.1%   4   5.6% _init\n  4   5.6%  16.7%   4   5.6% std::vector::begin\n  3   4.2%  20.8%   4   5.6% __gnu_cxx::operator-\n  3   4.2%  25.0%   5   6.9% std::__distance\n  2   2.8%  27.8%   2   2.8% __GI___strnlen\n  2   2.8%  30.6%   6   8.3% __GI___strxfrm_l\n  2   2.8%  33.3%   3   4.2% __dynamic_cast\n  2   2.8%  36.1%   2   2.8% __memset_sse2\n  2   2.8%  38.9%   2   2.8% operator new[]\n</code></pre><p>pprof的文本分析报告和perf的很像，也是列出了函数的采样次数和百分比，但因为是源码级的采样，会看到大量的内部函数细节，虽然很详细，但很难找出重点。</p><p>好在pprof也能输出图形化的分析报告，支持有向图和火焰图，需要你提前安装Graphviz和FlameGraph：</p><pre><code>apt-get install graphviz\ngit clone git@github.com:brendangregg/FlameGraph.git\n</code></pre><p>然后，你就可以使用“<code>--svg</code>”“<code>--collapsed</code>”等选项，生成更直观易懂的图形报告了：</p><pre><code>pprof --svg ./a.out case1.perf &gt; case1.svg\n\npprof --collapsed ./a.out case1.perf &gt; case1.cbt\nflamegraph.pl case1.cbt &gt; flame.svg\nflamegraph.pl --invert --color aqua case1.cbt &gt; icicle.svg\n</code></pre><p>我就拿最方便的火焰图来“看图说话”吧。你也可以在<a href=\"https://github.com/chronolaw/cpp_study/blob/master/section4/icicle.svg\">GitHub</a>上找到原图。</p><p><img src=\"https://static001.geekbang.org/resource/image/75/30/7587a411eb9c7a16f68bd3453a1eec30.png?wh=1204*532\" alt=\"\"></p><p>这张火焰图实际上是“倒置”的冰柱图，显示的是自顶向下查看函数的调用栈。</p><p>由于C++有名字空间、类、模板等特性，函数的名字都很长，看起来有点费劲，不过这样也比纯文本要直观一些，可以很容易地看出，正则表达式占用了绝大部分的CPU时间。再仔细观察的话，就会发现，_Compiler()这个函数是真正的“罪魁祸首”。</p><p>找到了问题所在，现在我们就可以优化代码了，把创建正则对象的语句提到循环外面：</p><pre><code>auto reg  = make_regex(R&quot;(^(\\w+)\\:(\\w+)$)&quot;);  // 正则表达式对象\nauto what = make_match();\n\nfor(int i = 0; i &lt; 1000; i++) {               // 循环一千次\n  assert(regex_match(str, what, reg));        // 正则匹配\n}\n</code></pre><p>再运行程序，你会发现程序瞬间执行完毕，而且因为优化效果太好，gperftools甚至都来不及采样，不会产生分析数据。</p><p>基本的gperftools用法就这么多了，你可以再去看它的<a href=\"https://github.com/gperftools/gperftools/tree/master/docs\">官方文档</a>了解更多的用法，比如使用环境变量和信号来控制启停性能分析，或者链接tcmalloc库，优化C++的内存分配速度。</p><h2>小结</h2><p>好了，今天主要讲了运行阶段里的性能分析，它能够回答为什么系统“不够好”（not good enough），而调试和测试回答的是为什么系统“不好”（not good）。</p><p>简单小结一下今天的内容：</p><ol>\n<li>最简单的性能分析工具是top，可以快速查看进程的CPU、内存使用情况；</li>\n<li>pstack和strace能够显示进程在用户空间和内核空间的函数调用情况；</li>\n<li>perf以一定的频率采样分析进程，统计各个函数的CPU占用百分比；</li>\n<li>gperftools是“侵入”式的性能分析工具，能够生成文本或者图形化的分析报告，最直观的方式是火焰图。</li>\n</ol><p>性能分析与优化是一门艰深的课题，也是一个广泛的议题，CPU、内存、网络、文件系统、数据库等等，每一个方向都可以再引出无数的话题。</p><p>今天介绍的这些，是我挑选的对初学者最有用的内容，学习难度不高，容易上手，见效快。希望你能以此为契机，在今后的日子里多用、多实际操作，并且不断去探索、应用其他的分析工具，综合运用它们给程序“把脉”，才能让C++在运行阶段跑得更好更快更稳，才能不辜负前面编码、预处理和编译阶段的苦心与努力。</p><h2>课下作业</h2><p>最后还是留两个思考题吧：</p><ol>\n<li>你觉得在运行阶段还能够做哪些事情？</li>\n<li>你有性能分析的经验吗？听了今天的这节课之后，你觉得什么方式比较适合自己？</li>\n</ol><p>欢迎你在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/45/f1/45adfe31c60a89ff54b7dbce366e2bf1.png?wh=2000*2748\" alt=\"\"></p>","comments":[{"had_liked":false,"id":227175,"user_name":"CoderArthur","can_delete":false,"product_type":"c1","uid":1625233,"ip_address":"","ucode":"5B591914F0F67C","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","comment_is_top":false,"comment_ctime":1592305403,"is_pvip":false,"replies":[{"id":"83757","content":"<br>1.微信这个比较私人，我觉得不要公开出来比较好。<br><br>2.可以上GitHub提issue，或者上面也有我的邮箱，发邮件也可以。<br><br>3.30岁正年轻啊，我32岁才写了第一本书，感觉这有点像是“少年维特之烦恼”。多看看极客时间大伽的观点，程序员还是很有前途的，路还是要自己走。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592357219,"ip_address":"","comment_id":227175,"utype":1}],"discussion_count":2,"race_medal":0,"score":"96081585915","product_id":100051801,"comment_content":"罗老师，能加个微信吗？我的微信是： sail_0323。<br>30岁了，有些彷徨，不知道该坚持哪些，放弃哪些。想请老师指点指点！<br><br>估计有不少同学和我有一样的心声。到时候老师还可以把这个作为轻松话题。","like_count":23,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498524,"discussion_content":"\n1.微信这个比较私人，我觉得不要公开出来比较好。\n\n2.可以上GitHub提issue，或者上面也有我的邮箱，发邮件也可以。\n\n3.30岁正年轻啊，我32岁才写了第一本书，感觉这有点像是“少年维特之烦恼”。多看看极客时间大伽的观点，程序员还是很有前途的，路还是要自己走。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592357219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283818,"discussion_content":"好的，谢谢老师！到时候有问题的话通过邮件咨询老师。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592374294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226989,"user_name":"lckfa李钊","can_delete":false,"product_type":"c1","uid":1356899,"ip_address":"","ucode":"AD13D205104AA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b4/63/84960032.jpg","comment_is_top":false,"comment_ctime":1592261279,"is_pvip":false,"replies":[{"id":"83612","content":"Windows很久没用了，欢迎经验分享。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592266184,"ip_address":"","comment_id":226989,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23067097759","product_id":100051801,"comment_content":"Windows下的使用 wpr 和 wpa ，通过pdb文件直达堆栈，也很方便","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498442,"discussion_content":"Windows很久没用了，欢迎经验分享。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592266184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1326266,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3c/ba/135ab755.jpg","nickname":"seven boo","note":"","ucode":"1FF2A438C9B464","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568053,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651056217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227064,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1592273860,"is_pvip":false,"replies":[{"id":"83629","content":"性能分析范围太大，一节课的内容只能结合C++讲最实用的几个技巧，大家后面可以深入研究。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592276714,"ip_address":"","comment_id":227064,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18772143044","product_id":100051801,"comment_content":"推荐大家可以看看极客时间倪鹏飞老师的linux性能分析系统实战<br>老师这节总结的确实好，再次感谢老师～","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498481,"discussion_content":"性能分析范围太大，一节课的内容只能结合C++讲最实用的几个技巧，大家后面可以深入研究。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592276714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227456,"user_name":"黄骏","can_delete":false,"product_type":"c1","uid":1849733,"ip_address":"","ucode":"3C41D02F4F712C","user_header":"https://static001.geekbang.org/account/avatar/00/1c/39/85/c6110f83.jpg","comment_is_top":false,"comment_ctime":1592383591,"is_pvip":true,"replies":[{"id":"83819","content":"这样就是很好的实践了，可以参考课程再试试gperftools和火焰图。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592387465,"ip_address":"","comment_id":227456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14477285479","product_id":100051801,"comment_content":"性能分析接触一些，实践经验较少，每次写完一个大一些的功能，自己都用perf来看下，抓下数据，看自己代码的cpu使用率咋样。","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498645,"discussion_content":"这样就是很好的实践了，可以参考课程再试试gperftools和火焰图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592387465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227150,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1592298504,"is_pvip":false,"replies":[{"id":"83676","content":"可以向运行的进程发信号，然后在代码里收到信号后调用ProfilerStop，这样就可以随时生成火焰图。<br><br>或者用systemtap，不需要加gperftools代码，也可以生成火焰图，可以参考一下小贴士里的openresty xray。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592300156,"ip_address":"","comment_id":227150,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14477200392","product_id":100051801,"comment_content":"老师，火焰图可以在已经运行的程序中画出来吗？我看到命令都是.&#47;a.out ，而且这个程序运行一个while true的话是不是图片特别大？<br>有没有像perf top -K -p xxx 这样的，直接观察在执行的进程","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498513,"discussion_content":"可以向运行的进程发信号，然后在代码里收到信号后调用ProfilerStop，这样就可以随时生成火焰图。\n\n或者用systemtap，不需要加gperftools代码，也可以生成火焰图，可以参考一下小贴士里的openresty xray。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592300156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236263,"user_name":"robonix","can_delete":false,"product_type":"c1","uid":1212323,"ip_address":"","ucode":"866EC82EDA455B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7f/a3/23540579.jpg","comment_is_top":false,"comment_ctime":1595380508,"is_pvip":false,"replies":[{"id":"87306","content":"最著名的就是valgrind，网上有很多资料。<br><br>也可以用gperftools里的heapProfiler，还有agentzh的内存火焰图。<br><br>但最好的方法是从写代码的根上解决，不用new&#47;delete，尽量用智能指针、容器还有内存池。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595383287,"ip_address":"","comment_id":236263,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10185315100","product_id":100051801,"comment_content":"请问老师有什么好的检查内存泄露的方法？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502007,"discussion_content":"最著名的就是valgrind，网上有很多资料。\n\n也可以用gperftools里的heapProfiler，还有agentzh的内存火焰图。\n\n但最好的方法是从写代码的根上解决，不用new/delete，尽量用智能指针、容器还有内存池。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595383287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238799,"user_name":"zzuse","can_delete":false,"product_type":"c1","uid":1042555,"ip_address":"","ucode":"4CC849CC70F116","user_header":"","comment_is_top":false,"comment_ctime":1596301716,"is_pvip":false,"replies":[{"id":"88269","content":"可以试试在GitHub上提issue，看能否引起开发团队的注意进而解决。<br><br>暂时不行就用perf吧，只是性能优化不那么自由灵活，但也基本够用。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596416383,"ip_address":"","comment_id":238799,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5891269012","product_id":100051801,"comment_content":"老师，在centos7 arm64鲲鹏架构下，用 gperftools 的 cpu profiler 会出现死锁，尝试后也感觉好难解决。是不是尝试其他工具了","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502856,"discussion_content":"可以试试在GitHub上提issue，看能否引起开发团队的注意进而解决。\n\n暂时不行就用perf吧，只是性能优化不那么自由灵活，但也基本够用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596416383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229799,"user_name":"偏偏","can_delete":false,"product_type":"c1","uid":2004606,"ip_address":"","ucode":"17713070858A11","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/7e/c09e861f.jpg","comment_is_top":false,"comment_ctime":1593149420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5888116716","product_id":100051801,"comment_content":"Valgrind","like_count":1},{"had_liked":false,"id":227081,"user_name":"泰一","can_delete":false,"product_type":"c1","uid":1757959,"ip_address":"","ucode":"D85C764BA108CE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d3/07/5fc3c694.jpg","comment_is_top":false,"comment_ctime":1592277758,"is_pvip":false,"replies":[{"id":"83634","content":"valgrind我用的比较少，对systemtap和火焰图更喜欢一些。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592280426,"ip_address":"","comment_id":227081,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887245054","product_id":100051801,"comment_content":"valgrind-callgrind + kcachegrind = 电路图 也是利器","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498488,"discussion_content":"valgrind我用的比较少，对systemtap和火焰图更喜欢一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592280426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335599,"user_name":"yfcheng","can_delete":false,"product_type":"c1","uid":2870621,"ip_address":"","ucode":"9CC0B451E0247D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/cd/5d/c1f7ee30.jpg","comment_is_top":false,"comment_ctime":1645600846,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645600846","product_id":100051801,"comment_content":"#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;cassert&gt;<br>#include &lt;regex&gt;<br>#include &lt;boost&#47;regex.hpp&gt;<br>using namespace std;<br>#include &lt;gperftools&#47;profiler.h&gt;<br><br>int main(int argc, char** argv)<br>{<br>    auto make_cpu_profile = [](const string&amp; filename){<br>        ProfilerStart(filename.c_str());<br>        ProfilerRegisterThread();<br>        return std::shared_ptr&lt;void&gt;(nullptr, [](void*){<br>            ProfilerStop();}<br>        );<br>    };<br><br>    auto cp = make_cpu_profile(&quot;case1.perf&quot;);<br>    auto str = &quot;neir:automata&quot;s;<br>    for (int i=0; i&lt;1000; ++i) {<br>        std::regex base_regex(R&quot;(^(\\w+)\\:(\\w+)$)&quot;);<br>        std::smatch base_match;<br>        std::regex_match(str, base_match, base_regex);<br>    }<br>    return 0;<br>}","like_count":0},{"had_liked":false,"id":329123,"user_name":"虹之间","can_delete":false,"product_type":"c1","uid":1008948,"ip_address":"","ucode":"4FFE6B7064287F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/34/4771fb11.jpg","comment_is_top":false,"comment_ctime":1641136471,"is_pvip":false,"replies":[{"id":"119919","content":"可能是perf用法不对，没有观察到正确的进程，可以网上找一些相关的资料再看看。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1641273846,"ip_address":"","comment_id":329123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641136471","product_id":100051801,"comment_content":"我使用perf的火焰图测试CPU占用率，显示占用最频繁的是perf开头的一些函数，是我使用不正确吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543695,"discussion_content":"可能是perf用法不对，没有观察到正确的进程，可以网上找一些相关的资料再看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641273846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312663,"user_name":"于小咸","can_delete":false,"product_type":"c1","uid":1640946,"ip_address":"","ucode":"833D5E92016430","user_header":"https://static001.geekbang.org/account/avatar/00/19/09/f2/6ed195f4.jpg","comment_is_top":false,"comment_ctime":1631932953,"is_pvip":false,"replies":[{"id":"113307","content":"使用perf、gperftools、systemtap等工具抓取火焰图，应该可以看到函数调用栈。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1631945741,"ip_address":"","comment_id":312663,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1631932953","product_id":100051801,"comment_content":"现在工作上遇到一个问题，程序运行期间会出现脉冲式的CPU占用，最大值是均值的4-5倍，现在的工作想要把最大值降下来。<br>但分析工具只能统计均值，没法记录最大值时刻的函数调用，找不到优化的方向","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527069,"discussion_content":"使用perf、gperftools、systemtap等工具抓取火焰图，应该可以看到函数调用栈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631945741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640946,"avatar":"https://static001.geekbang.org/account/avatar/00/19/09/f2/6ed195f4.jpg","nickname":"于小咸","note":"","ucode":"833D5E92016430","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394748,"discussion_content":"可以看到按时间顺序排列的统计值吗？我统计到的都是一段时间内的平均值，而最大值是脉冲式发生的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632032873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303342,"user_name":"一个坏人","can_delete":false,"product_type":"c1","uid":1032305,"ip_address":"","ucode":"4AF05BF008095A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","comment_is_top":false,"comment_ctime":1626743394,"is_pvip":true,"replies":[{"id":"109802","content":"C++的不清楚，好像Python有，可以用pybind11去调用。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1626747441,"ip_address":"","comment_id":303342,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626743394","product_id":100051801,"comment_content":"请问老师有没有解析excel或者project 的库？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523640,"discussion_content":"C++的不清楚，好像Python有，可以用pybind11去调用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626747441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229800,"user_name":"偏偏","can_delete":false,"product_type":"c1","uid":2004606,"ip_address":"","ucode":"17713070858A11","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/7e/c09e861f.jpg","comment_is_top":false,"comment_ctime":1593149474,"is_pvip":false,"replies":[{"id":"84782","content":"valgrind很有名，不过我用的不多。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593151758,"ip_address":"","comment_id":229800,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593149474","product_id":100051801,"comment_content":"valgrind 也是很好用的C++性能分析工具","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499643,"discussion_content":"valgrind很有名，不过我用的不多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593151758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226997,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1592264696,"is_pvip":false,"replies":[{"id":"83615","content":"它需要读取可执行文件里的符号才能产生分析文件，不需要运行时的参数。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592270024,"ip_address":"","comment_id":226997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592264696","product_id":100051801,"comment_content":"pprof --text .&#47;a.out case1.perf &gt; case1.txt<br>执行pprof为什么需要 .&#47;a.out 执行文件？ 如果执行文件要带参数才能运行，如何处理？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498448,"discussion_content":"它需要读取可执行文件里的符号才能产生分析文件，不需要运行时的参数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592270024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}