{"id":145546,"title":"28 | WebComponent：像搭积木一样构建Web应用","content":"<p>在<a href=\"https://time.geekbang.org/column/article/144983\">上一篇文章</a>中我们从技术演变的角度介绍了PWA，这是一套集合了多种技术的理念，让浏览器渐进式适应设备端。今天我们要站在开发者和项目角度来聊聊WebComponent，同样它也是一套技术的组合，能提供给开发者组件化开发的能力。</p><p>那什么是组件化呢？</p><p>其实组件化并没有一个明确的定义，不过这里我们可以使用10个字来形容什么是组件化，那就是：<strong>对内高内聚，对外低耦合</strong>。对内各个元素彼此紧密结合、相互依赖，对外和其他组件的联系最少且接口简单。</p><p>可以说，程序员对组件化开发有着天生的需求，因为一个稍微复杂点的项目，就涉及到多人协作开发的问题，每个人负责的组件需要尽可能独立完成自己的功能，其组件的内部状态不能影响到别人的组件，在需要和其他组件交互的地方得提前协商好接口。通过组件化可以降低整个系统的耦合度，同时也降低程序员之间沟通复杂度，让系统变得更加易于维护。</p><p>使用组件化能带来很多优势，所以很多语言天生就对组件化提供了很好的支持，比如C/C++就可以很好地将功能封装成模块，无论是业务逻辑，还是基础功能，抑或是UI，都能很好地将其组合在一起，实现组件内部的高度内聚、组件之间的低耦合。</p><p>大部分语言都能实现组件化，归根结底在于编程语言特性，大多数语言都有自己的函数级作用域、块级作用域和类，可以将内部的状态数据隐藏在作用域之下或者对象的内部，这样外部就无法访问了，然后通过约定好的接口和外部进行通信。</p><!-- [[[read_end]]] --><p>JavaScript虽然有不少缺点，但是作为一门编程语言，它也能很好地实现组件化，毕竟有自己的函数级作用域和块级作用域，所以封装内部状态数据并提供接口给外部都是没有问题的。</p><p>既然JavaScript可以很好地实现组件化，那么我们所谈论的WebComponent到底又是什么呢？</p><h2>阻碍前端组件化的因素</h2><p>在前端虽然HTML、CSS和JavaScript是强大的开发语言，但是在大型项目中维护起来会比较困难，如果在页面中嵌入第三方内容时，还需要确保第三方的内容样式不会影响到当前内容，同样也要确保当前的DOM不会影响到第三方的内容。</p><p>所以要聊WebComponent，得先看看HTML和CSS是如何阻碍前端组件化的，这里我们就通过下面这样一个简单的例子来分析下：</p><pre><code>&lt;style&gt;\np {\n      background-color: brown;\n      color: cornsilk\n   }\n&lt;/style&gt;\n&lt;p&gt;time.geekbang.org&lt;/p&gt;\n</code></pre><pre><code>&lt;style&gt;\np {\n      background-color: red;\n      color: blue\n   }\n&lt;/style&gt;\n&lt;p&gt;time.geekbang&lt;/p&gt;\n</code></pre><p>上面这两段代码分别实现了自己p标签的属性，如果两个人分别负责开发这两段代码的话，那么在测试阶段可能没有什么问题，不过当最终项目整合的时候，其中内部的CSS属性会影响到其他外部的p标签的，之所以会这样，是因为CSS是影响全局的。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/140703\">《23 | 渲染流水线：CSS如何影响首次加载时的白屏时间？》</a>这篇文章中分析过，渲染引擎会将所有的CSS内容解析为CSSOM，在生成布局树的时候，会在CSSOM中为布局树中的元素查找样式，所以有两个相同标签最终所显示出来的效果是一样的，渲染引擎是不能为它们分别单独设置样式的。</p><p>除了CSS的全局属性会阻碍组件化，DOM也是阻碍组件化的一个因素，因为在页面中只有一个DOM，任何地方都可以直接读取和修改DOM。所以使用JavaScript来实现组件化是没有问题的，但是JavaScript一旦遇上CSS和DOM，那么就相当难办了。</p><h2>WebComponent组件化开发</h2><p>现在我们了解了<strong>CSS和DOM是阻碍组件化的两个因素</strong>，那要怎么解决呢？</p><p>WebComponent给出了解决思路，它提供了对局部视图封装能力，可以让DOM、CSSOM和JavaScript运行在局部环境中，这样就使得局部的CSS和DOM不会影响到全局。</p><p>了解了这些，下面我们就结合具体代码来看看WebComponent是怎么实现组件化的。</p><p>前面我们说了，WebComponent是一套技术的组合，具体涉及到了<strong>Custom elements（自定义元素）、Shadow DOM（影子DOM）<strong>和</strong>HTML templates（HTML模板）</strong>，详细内容你可以参考MDN上的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components\">相关链接</a>。</p><p>下面我们就来演示下这3个技术是怎么实现数据封装的，如下面代码所示：</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n\n&lt;body&gt;\n    &lt;!--\n            一：定义模板\n            二：定义内部CSS样式\n            三：定义JavaScript行为\n    --&gt;\n    &lt;template id=&quot;geekbang-t&quot;&gt;\n        &lt;style&gt;\n            p {\n                background-color: brown;\n                color: cornsilk\n            }\n\n\n            div {\n                width: 200px;\n                background-color: bisque;\n                border: 3px solid chocolate;\n                border-radius: 10px;\n            }\n        &lt;/style&gt;\n        &lt;div&gt;\n            &lt;p&gt;time.geekbang.org&lt;/p&gt;\n            &lt;p&gt;time1.geekbang.org&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n            function foo() {\n                console.log('inner log')\n            }\n        &lt;/script&gt;\n    &lt;/template&gt;\n    &lt;script&gt;\n        class GeekBang extends HTMLElement {\n            constructor() {\n                super()\n                //获取组件模板\n                const content = document.querySelector('#geekbang-t').content\n                //创建影子DOM节点\n                const shadowDOM = this.attachShadow({ mode: 'open' })\n                //将模板添加到影子DOM上\n                shadowDOM.appendChild(content.cloneNode(true))\n            }\n        }\n        customElements.define('geek-bang', GeekBang)\n    &lt;/script&gt;\n\n\n    &lt;geek-bang&gt;&lt;/geek-bang&gt;\n    &lt;div&gt;\n        &lt;p&gt;time.geekbang.org&lt;/p&gt;\n        &lt;p&gt;time1.geekbang.org&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;geek-bang&gt;&lt;/geek-bang&gt;\n&lt;/body&gt;\n\n\n&lt;/html&gt;\n</code></pre><p>详细观察上面这段代码，我们可以得出：要使用WebComponent，通常要实现下面三个步骤。</p><p><strong>首先，使用template属性来创建模板</strong>。利用DOM可以查找到模板的内容，但是模板元素是不会被渲染到页面上的，也就是说DOM树中的template节点不会出现在布局树中，所以我们可以使用template来自定义一些基础的元素结构，这些基础的元素结构是可以被重复使用的。一般模板定义好之后，我们还需要在模板的内部定义样式信息。</p><p><strong>其次，我们需要创建一个GeekBang的类</strong>。在该类的构造函数中要完成三件事：</p><ol>\n<li>查找模板内容；</li>\n<li>创建影子DOM；</li>\n<li>再将模板添加到影子DOM上。</li>\n</ol><p>上面最难理解的是影子DOM，其实影子DOM的作用是将模板中的内容与全局DOM和CSS进行隔离，这样我们就可以实现元素和样式的私有化了。你可以把影子DOM看成是一个作用域，其内部的样式和元素是不会影响到全局的样式和元素的，而在全局环境下，要访问影子DOM内部的样式或者元素也是需要通过约定好的接口的。</p><p>总之，通过影子DOM，我们就实现了CSS和元素的封装，在创建好封装影子DOM的类之后，我们就可以<strong>使用customElements.define来自定义元素了</strong>（可参考上述代码定义元素的方式）。</p><p><strong>最后，就很简单了，可以像正常使用HTML元素一样使用该元素</strong>，如上述代码中的<code>&lt;geek-bang&gt;&lt;/geek-bang&gt;</code>。</p><p>上述代码最终渲染出来的页面，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/57/7c/579c65e2d2221f4e476c7846b842c27c.png?wh=513*493\" alt=\"\"></p><center><span class=\"reference\">使用影子DOM的输出效果</span></center><p>从图中我们可以看出，影子DOM内部的样式是不会影响到全局CSSOM的。另外，使用DOM接口也是无法直接查询到影子DOM内部元素的，比如你可以使用<code>document.getElementsByTagName('div')</code>来查找所有div元素，这时候你会发现影子DOM内部的元素都是无法查找的，因为要想查找影子DOM内部的元素需要专门的接口，所以通过这种方式又将影子内部的DOM和外部的DOM进行了隔离。</p><p>通过影子DOM可以隔离CSS和DOM，不过需要注意一点，影子DOM的JavaScript脚本是不会被隔离的，比如在影子DOM定义的JavaScript函数依然可以被外部访问，这是因为JavaScript语言本身已经可以很好地实现组件化了。</p><h2>浏览器如何实现影子DOM</h2><p>关于WebComponent的使用方式我们就介绍到这里。WebComponent整体知识点不多，内容也不复杂，我认为核心就是影子DOM。上面我们介绍影子DOM的作用主要有以下两点：</p><ol>\n<li>影子DOM中的元素对于整个网页是不可见的；</li>\n<li>影子DOM的CSS不会影响到整个网页的CSSOM，影子DOM内部的CSS只对内部的元素起作用。</li>\n</ol><p>那么浏览器是如何实现影子DOM的呢？下面我们就来分析下，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/22/5bce3d00c8139a7fde9cc90f9d803322.png?wh=1142*775\" alt=\"\"></p><center><span class=\"reference\">影子DOM示意图</span></center><p>该图是上面那段示例代码对应的DOM结构图，从图中可以看出，我们使用了两次geek-bang属性，那么就会生成两个影子DOM，并且每个影子DOM都有一个shadow root的根节点，我们可以将要展示的样式或者元素添加到影子DOM的根节点上，每个影子DOM你都可以看成是一个独立的DOM，它有自己的样式、自己的属性，内部样式不会影响到外部样式，外部样式也不会影响到内部样式。</p><p>浏览器为了实现影子DOM的特性，在代码内部做了大量的条件判断，比如当通过DOM接口去查找元素时，渲染引擎会去判断geek-bang属性下面的shadow-root元素是否是影子DOM，如果是影子DOM，那么就直接跳过shadow-root元素的查询操作。所以这样通过DOM API就无法直接查询到影子DOM的内部元素了。</p><p>另外，当生成布局树的时候，渲染引擎也会判断geek-bang属性下面的shadow-root元素是否是影子DOM，如果是，那么在影子DOM内部元素的节点选择CSS样式的时候，会直接使用影子DOM内部的CSS属性。所以这样最终渲染出来的效果就是影子DOM内部定义的样式。</p><h2>总结</h2><p>好了，今天就讲到这里，下面我来总结下本文的主要内容。</p><p>首先，我们介绍了组件化开发是程序员的刚需，所谓组件化就是功能模块要实现高内聚、低耦合的特性。不过由于DOM和CSSOM都是全局的，所以它们是影响了前端组件化的主要元素。基于这个原因，就出现WebComponent，它包含自定义元素、影子DOM和HTML模板三种技术，使得开发者可以隔离CSS和DOM。在此基础上，我们还重点介绍了影子DOM到底是怎么实现的。</p><p>关于WebComponent的未来如何，这里我们不好预测和评判，但是有一点可以肯定，WebComponent也会采用渐进式迭代的方式向前推进，未来依然有很多坑需要去填。</p><h2>思考时间</h2><p>今天留给你的思考题是：你是怎么看待WebComponents和前端框架（React、Vue）之间的关系的？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"27 | 渐进式网页应用（PWA）：它究竟解决了Web应用的哪些问题？","id":144983},"right":{"article_title":"29 | HTTP/1：HTTP性能优化","id":147501}},"comments":[{"had_liked":false,"id":163146,"user_name":"匡晨辉","can_delete":false,"product_type":"c1","uid":1763707,"ip_address":"","ucode":"BF88FE410C20F4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e9/7b/b844f3a4.jpg","comment_is_top":false,"comment_ctime":1576663198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"272159602846","product_id":100033601,"comment_content":"web component是通过浏览器引擎提供api接口进行操作，让后在dom，cssom生成过程中控制实现组件化的作用域&#47;执行执行上下文的隔离； vue&#47;react 是在没有浏览器引擎支持的情况下，通过采取一些取巧的手法（比如：js执行上下文的封装利用闭包；样式的封装利用文件hash值作为命名空间在css选择的时候多套一层选择条件（hash值），本质上还是全局的只是不同组件css选择的时候只能选择到组件相应的css样式，实现的隔离）","like_count":64},{"had_liked":false,"id":141420,"user_name":"wubinsheng","can_delete":false,"product_type":"c1","uid":1661637,"ip_address":"","ucode":"6ECCABF4C4D7D1","user_header":"https://static001.geekbang.org/account/avatar/00/19/5a/c5/221ab4d9.jpg","comment_is_top":false,"comment_ctime":1571150608,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"186254744336","product_id":100033601,"comment_content":"原来小程序用的是webComponent，控制台满屏的“#shadow-root”","like_count":44,"discussions":[{"author":{"id":1734909,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/78/fd/e9b17162.jpg","nickname":"刘员外","note":"","ucode":"0B97EF3222F5FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250056,"discussion_content":"so die si nie 的感觉","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1587988237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162363,"user_name":"Zkerhcy","can_delete":false,"product_type":"c1","uid":1231133,"ip_address":"","ucode":"43A883F6FB6070","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/1d/c7586cfc.jpg","comment_is_top":false,"comment_ctime":1576504362,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"126130555946","product_id":100033601,"comment_content":"Vue，React是从开发者层面解决了组件化的问题，提高了效率。WebComponent是从浏览器引擎实现层面解决了组件化的问题，从社区来看，前者的发展优势更明显","like_count":28,"discussions":[{"author":{"id":1390128,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/30/13e42374.jpg","nickname":"Yancey","note":"","ucode":"4276EA235F7BB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566575,"discussion_content":"本质还是因为前者是声明式的, 后者是命令式的. 但让不排除有命令式的 WebComponent 框架.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650717143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206753,"user_name":"redbuck","can_delete":false,"product_type":"c1","uid":1887486,"ip_address":"","ucode":"656A9CC823CEC9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/cc/fe/55c33139.jpg","comment_is_top":false,"comment_ctime":1586929640,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"57421504488","product_id":100033601,"comment_content":"webComponent标准可以成为框架间的桥梁.<br><br>组件内部可以用vue&#47;react或随便什么技术实现,只要最终实现约定接口即可.<br><br>这样的话,就可以引入用react开发的A组件,同时引入用vue开发的B组件,而他们都在一个Angular项目中.就像一个原生html标签一样被使用.<br><br>所以这也可以是微前端的一种实现方式","like_count":14,"discussions":[{"author":{"id":2913864,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MYShyjtRtib2GIQiaK4hV3ZP9pQ1qiaS74DA4K4YHY4SIiaFDfsCKgiaMWwm9zFsSn3bt5pawp5Kdn5MWgiaw5909nug/132","nickname":"Geek_aa1c31","note":"","ucode":"1AC14C053638AF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553124,"discussion_content":"好酷","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645720989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097905,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c0/b1/ca4e41c5.jpg","nickname":"PETRVS","note":"","ucode":"8A34119A5DBF6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391189,"discussion_content":"你别说，taro3正是编译成webcomponent来作为跨端的桥梁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630326313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1424137,"avatar":"https://static001.geekbang.org/account/avatar/00/15/bb/09/f593ef68.jpg","nickname":"Javon Yan","note":"","ucode":"12643538BC8B7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362838,"discussion_content":"没错，微前端的一种方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617038387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138846,"user_name":"mfist","can_delete":false,"product_type":"c1","uid":1373624,"ip_address":"","ucode":"4F99F422C23FB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","comment_is_top":false,"comment_ctime":1570489389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48815129645","product_id":100033601,"comment_content":"下面是我的理解，请老师纠正。<br>在没有webcomponent的时候，通过react和vue基于当前的前端特性去实现组件化，他们之间是互相影响和借鉴的，最终react和vue也会向webcomponent标准的方向演进。但是现在由于webcomponent的浏览器支持还不是太好，所以现阶段它们还是会并存的<br>","like_count":12},{"had_liked":false,"id":139229,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1570589141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35930327509","product_id":100033601,"comment_content":"才疏学浅， 以下是个人的理解：<br><br>两者互相补充， 互不影响<br><br>react提供了陈述式的方法编写网页， 让用户不需要去关心dom改变之类的细节<br><br>webComponent则是提供了封装","like_count":8},{"had_liked":false,"id":138865,"user_name":"张峰","can_delete":false,"product_type":"c1","uid":1097820,"ip_address":"","ucode":"7015E9A9137521","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/5c/10111544.jpg","comment_is_top":false,"comment_ctime":1570495634,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10160430226","product_id":100033601,"comment_content":"shadow dom 中的style使用rem，r是相对的html的font-size 这点很坑","like_count":2,"discussions":[{"author":{"id":1623567,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/0f/3937645e.jpg","nickname":"NBE01","note":"","ucode":"DF0D22D4495D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29380,"discussion_content":"看来隔绝的还是不够好，不过反过来看，可以使得同样的页面更改html 的font-size 整个页面不管是否有shadow dom都能跟着一起统一的放大缩小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570766294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139064,"user_name":"monalisali","can_delete":false,"product_type":"c1","uid":1299521,"ip_address":"","ucode":"1FDEC87C133E28","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJbh5FQajwKhNlMrkoSklPpOXBtEYXCLvuWibhfWIS9QxHWDqzhEHJzEdmtUiaiaqFjfpsr2LwgNGpbQ/132","comment_is_top":false,"comment_ctime":1570538404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5865505700","product_id":100033601,"comment_content":"angular js里的directive应该也是用webcomponent实现的吧？一直挺好奇它的实现方式的。今天懂了","like_count":0},{"had_liked":false,"id":138867,"user_name":"张峰","can_delete":false,"product_type":"c1","uid":1097820,"ip_address":"","ucode":"7015E9A9137521","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/5c/10111544.jpg","comment_is_top":false,"comment_ctime":1570495852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5865463148","product_id":100033601,"comment_content":"web-component之于vue&#47;react，类似于ES6789之于coffeeScript&#47;typeScript，后者只是前者的临时替补，omi和angular都已经支持web-component","like_count":2},{"had_liked":false,"id":261036,"user_name":"君自兰芳","can_delete":false,"product_type":"c1","uid":2029706,"ip_address":"","ucode":"780F3AFEEB9B73","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f8/8a/f7e7fd54.jpg","comment_is_top":false,"comment_ctime":1605176198,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605176198","product_id":100033601,"comment_content":"“在影子 DOM 定义的 JavaScript 函数依然可以被外部访问”<br><br>有个疑问，在影子 DOM 定义的变量或函数是属于全局作用域吗？","like_count":1,"discussions":[{"author":{"id":2258397,"avatar":"https://static001.geekbang.org/account/avatar/00/22/75/dd/9affd4d5.jpg","nickname":"九千七","note":"","ucode":"1E385C88B3401A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345553,"discussion_content":"测试了下，是属于全局作用域的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611740169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235051,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1594879115,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594879115","product_id":100033601,"comment_content":"虚拟DOM解决的是效率问题，防止频繁的DOM操作，导致浏览器不断的刷新，将多次刷新操作，变成一次刷新操作。<br><br>影子DOM解决的是作用域隔离的问题，特别是在大规模项目上，可以规避全局设置的相互影响。<br><br>其实这两种方案，都是在现行标准下的解决方案，问题确实是解决了，但算不上优雅。还是期待能在语言规范和浏览器底层进行解决，这样才能真正去取代本地应用和各种小程序。","like_count":0},{"had_liked":false,"id":212398,"user_name":"Roy","can_delete":false,"product_type":"c1","uid":1930723,"ip_address":"","ucode":"909B8B605C317A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/e3/ef489d57.jpg","comment_is_top":false,"comment_ctime":1588117696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588117696","product_id":100033601,"comment_content":"webcomponent很好的实现与第三方应用的组合使用。","like_count":1},{"had_liked":false,"id":205511,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1586660688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586660688","product_id":100033601,"comment_content":"WebComponents 如何传递数据以及如何重置样式？","like_count":1},{"had_liked":false,"id":187440,"user_name":"blueBean","can_delete":false,"product_type":"c1","uid":1816697,"ip_address":"","ucode":"6A68D2414BD904","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/79/a4dbe9ee.jpg","comment_is_top":false,"comment_ctime":1584110048,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584110048","product_id":100033601,"comment_content":"老师请问应该如何拿到shadowDom呢？只能用选择器选中自定义标签，shadowDom下的元素全都选不到，没办法在它的子元素下操作dom，网上也没找到解决办法..老师知道怎么拿吗？","like_count":0,"discussions":[{"author":{"id":1008475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/5b/a23a82a4.jpg","nickname":"大雄不爱吃肉","note":"","ucode":"EFC131ECA99CA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205751,"discussion_content":"通过页面内的 JavaScript 方法来获取 Shadow DOM，例如使用 Element.shadowRoot 属性：let myShadowDom = myCustomElem.shadowRoot;","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584338170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185752,"user_name":"大前端洞见","can_delete":false,"product_type":"c1","uid":1010463,"ip_address":"","ucode":"1FA227A25F6056","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1f/f7be5246.jpg","comment_is_top":false,"comment_ctime":1583674727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583674727","product_id":100033601,"comment_content":"webcomponent 组件目前是可以在 angular react 框架中渲染使用的。","like_count":0},{"had_liked":false,"id":185452,"user_name":"狂躁小胖","can_delete":false,"product_type":"c1","uid":1376481,"ip_address":"","ucode":"07B46C7561CDDC","user_header":"https://static001.geekbang.org/account/avatar/00/15/00/e1/6538ec45.jpg","comment_is_top":false,"comment_ctime":1583585925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583585925","product_id":100033601,"comment_content":"Webcomponent、React以及Vue都实现了DOM的组件化，webcomponent 是W3C的亲儿子，通过shadow dom 技术实现dom以及css的隔离；React以及Vue则不是正规军，但是也同样达到了dom组件化的目的，然后结合已有的html特性实现样式的隔离比如scoped。","like_count":0},{"had_liked":false,"id":183657,"user_name":"Jy","can_delete":false,"product_type":"c1","uid":1027312,"ip_address":"","ucode":"B8D9382C1503E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/f0/5d52d73e.jpg","comment_is_top":false,"comment_ctime":1583109019,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1583109019","product_id":100033601,"comment_content":"WebComponent使用后，搜索引擎的SEO支持如何？","like_count":1},{"had_liked":false,"id":163151,"user_name":"匡晨辉","can_delete":false,"product_type":"c1","uid":1763707,"ip_address":"","ucode":"BF88FE410C20F4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e9/7b/b844f3a4.jpg","comment_is_top":false,"comment_ctime":1576663453,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576663453","product_id":100033601,"comment_content":"在回答课后题的过程中我又想到一个问题：文中讲述了WebComponent对cssom， dom的隔离，没有谈到对WebComponent中的js作用域的隔离，老师能具体讲讲js的作用域在web component的实现中是怎么实现隔离的呢？","like_count":0,"discussions":[{"author":{"id":1055073,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOvjoV6STk6SYPHRqVOo7DkiajY0KKuKLHSnDNvOKic5lllRNGEQo6W1oE6FrPiaSzUia1vCw9lqmV0vibCOtYtIfHQ/132","nickname":"余昭","note":"","ucode":"29EEEA1BFFE16B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549233,"discussion_content":"js隔离，可以使用闭包。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643757625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161780,"user_name":"coder","can_delete":false,"product_type":"c1","uid":1059952,"ip_address":"","ucode":"F70511D614B9F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/70/02b627a6.jpg","comment_is_top":false,"comment_ctime":1576325757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576325757","product_id":100033601,"comment_content":"有个疑问，“影子 DOM 中的元素对于整个网页是不可见的”，那么“再将模板添加到影子 DOM 上”，不还是看不见吗？也就是虽然我们组件化了，但是这个组件我们看不见？这样看不见的组件有什么使用意义吗？","like_count":0},{"had_liked":false,"id":161561,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1576232257,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1576232257","product_id":100033601,"comment_content":"vue&#47;react的出现一个目的就是解决前端组件化，WebComponents也是在组件化的思想下产生的。有点像“开局就送vip，一刀999“的感觉，这样后期框架在基于WebComponents演进的过程中，会有更好的体验，自然也要求WebComponents不断的完善。","like_count":0},{"had_liked":false,"id":161446,"user_name":"陈十二","can_delete":false,"product_type":"c1","uid":1437967,"ip_address":"","ucode":"09D901552ABA78","user_header":"https://static001.geekbang.org/account/avatar/00/15/f1/0f/8b36016d.jpg","comment_is_top":false,"comment_ctime":1576207537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576207537","product_id":100033601,"comment_content":"React Vue 的出现是为了解决包括 WebComponent 想解决的问题在内的很多 web 开发的痛点，在单纯组件化方面 他们采取了各自的解决方案，我觉得 webcomponent 应该考虑借鉴流行度高的框架的实现。","like_count":0},{"had_liked":false,"id":156478,"user_name":"Rocky","can_delete":false,"product_type":"c1","uid":1483150,"ip_address":"","ucode":"5FCF390BECDF9D","user_header":"https://static001.geekbang.org/account/avatar/00/16/a1/8e/03aeb9df.jpg","comment_is_top":false,"comment_ctime":1574901070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574901070","product_id":100033601,"comment_content":"vue中的单组件和react组件类似webcomponent,dom和css隔离。vue和react是通过框架层面实现了组件化","like_count":0},{"had_liked":false,"id":148088,"user_name":"凭实力写bug","can_delete":false,"product_type":"c1","uid":1235611,"ip_address":"","ucode":"6F772551F18935","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/9b/e0ef47df.jpg","comment_is_top":false,"comment_ctime":1572939665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572939665","product_id":100033601,"comment_content":"个有问题, webComponent提供了封装但这组件怎么被引用用到其他html中,","like_count":0},{"had_liked":false,"id":139285,"user_name":"Tao","can_delete":false,"product_type":"c1","uid":1023008,"ip_address":"","ucode":"45339E42C997F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/20/37ec7b9b.jpg","comment_is_top":false,"comment_ctime":1570602604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570602604","product_id":100033601,"comment_content":"Web Component 和 Vue 组件化开发方式相似，React 世界里一切都可以是js，css-in-js 方案，相比 Vue，React，Web Component 更具纯粹，不需要任何外库，缺点是用的人太少，相关生态（组件库）几乎没有","like_count":0},{"had_liked":false,"id":138884,"user_name":"Shine","can_delete":false,"product_type":"c1","uid":1022568,"ip_address":"","ucode":"C8C617B87C63C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/68/92caeed6.jpg","comment_is_top":false,"comment_ctime":1570498775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570498775","product_id":100033601,"comment_content":"react和vue通过scoped css来声明样式的局部性.通过给当前root元素添加一个hashed id, 其样式在当前id范围内。<br>而angular是shadow dom实现的","like_count":0}]}