{"id":94486,"title":"08 | 操作系统内核与编程接口","content":"<p>你好，我是七牛云许式伟。</p><p>今天我们在开发软件的时候，已经处于一些基础的架构设计之中，像冯·诺依曼计算机体系，像操作系统和编程语言，这些都是我们开发一个应用程序所依赖的基础架构。</p><p>在上一讲“<a href=\"https://time.geekbang.org/column/article/93802\">07 | 软件运行机制及内存管理</a>” 中，我们着重介绍了软件是如何被运行起来的。<strong>今天，我们着重聊一聊软件如何利用它所依赖的基础架构。</strong></p><p><strong>首先是冯·诺依曼计算机体系</strong>，它由 “中央处理器+存储+一系列的输入输出设备” 构成。这一层，提供了编程接口的是中央处理器（CPU），编程接口是 CPU 指令，但 CPU 指令非常难用。</p><p>为此，人们发明了编程语言来降低 CPU 指令的使用门槛。编程语言面向人类，CPU 指令面向机器，编译器负责将人类容易理解和掌握的编程语言的程序，翻译成机器能够理解的 CPU 指令序列。</p><p><strong>其次是编程语言</strong>。虽然编程语言出现的起因是降低 CPU 指令的使用门槛，第一门编程语言汇编语言的能力也很接近 CPU 指令，但是语言的自然演化会越来越脱离 CPU 所限制的条条框框，大部分语言都会演化出很多基础的算法库。</p><p>比如，字符串算法库有：字符串连接（concat）、字符串子串（substring），字符串比较（compare）、字符串长度（length）等等。</p><!-- [[[read_end]]] --><h2>系统调用</h2><p><strong>最后就是操作系统了</strong>。</p><p>操作系统和前两者非常不同。软件都是某种编程语言写成的，而 CPU 和编程语言的能力，统一以语言的语法或者库体现。</p><p>操作系统则属于基础软件，它和我们编写的软件并不在同一个进程（进程是软件的一个运行后产生的实例，同一个软件可以运行多次得到多个进程）中。</p><p>如果是实模式下的操作系统，大家都在同一个地址空间下，那么只需要知道操作系统的接口函数地址，理论上就可以直接访问。但是今天主流的操作系统都是保护模式的，操作系统和软件不在同一个进程，软件怎么才能使用操作系统的能力呢？</p><p>你可能想说，那就用进程与进程之间的通信机制？</p><p>的确，操作系统提供了很多进程与进程之间通讯的机制，后面我们也会涉及。但是今天我们讲的操作系统的编程接口是更为基础的机制，它是所有软件进程使用操作系统能力的基础，包括进程与进程之间通讯的机制，也是建立在这个基础之上。</p><p>它应该是一种成本非常非常低的方案，性能上要接近函数调用，否则我们为保护模式付出的成本就太高了。</p><p>有这样的机制么？有，就是上一讲我们已经提到过的“中断”。</p><p>中断的设计初衷是 CPU 响应硬件设备事件的一个机制。当某个输入输出设备发生了一件需要 CPU 来处理的事情，它就会触发一个中断；但是 CPU 也提供了指令允许软件触发一个中断，我们把它叫软中断。</p><p>大部分情况下，操作系统的能力通过软中断向我们写的软件开放，为此还专门引入了一个术语叫 “系统调用（syscall）”。</p><p><strong>系统调用是怎么工作的？</strong></p><p>我们需要先理解下 CPU 的代码执行权限等级。</p><p>在保护模式下，CPU 引入了 “保护环（Protection Rings）” 的概念。说白了，代码有执行权限等级的，如果权限不够，有一些 CPU 指令就不能执行。</p><p>这一点比较容易理解：上一讲我们介绍过，从内存管理的角度，虚拟内存机制让软件运行在一个沙盒中，这个沙盒让软件感觉自己在独享系统的内存。但如果不对软件的执行权限进行约束，它就可以打破沙盒，了解到真实的世界。</p><p>我们通常说的操作系统是很泛的概念。完整的操作系统非常庞大。根据与应用的关系，我们可以把操作系统分为内核与外围。</p><p>所谓操作系统内核，其实就是指那些会向我们写的应用程序提供系统服务的子系统的集合，它们管理着计算机的所有硬件资源，也管理着所有运行中的应用软件（进程）。</p><p>操作系统内核的执行权限等级，和我们常规的软件进程不同。像 Intel CPU 通常把代码执行权限分为 Ring 0-3 四个等级。</p><p>操作系统内核通常运行在 Ring 0，而常规的软件进程运行在 Ring 3（当然近年来虚拟化机制流行，为了更好地提升虚拟化的效率，Intel CPU 又引入了 Ring -1 级别的指令，这些指令只允许虚拟机所在的宿主操作系统才能调用）。</p><p>系统调用所基于的软中断，它很像一次间接的“函数调用”，但是又颇有不同。在实模式下，这种区别并不强烈。但是在保护模式下，这种差异会十分明显。</p><p>原因在于，我们的应用程序运行在 Ring 3（我们通常叫用户态），而操作系统内核运行在 Ring 0（我们通常叫内核态）。所以一次中断调用，不只是“函数调用”，更重要的是改变了执行权限，从用户态跃迁到了内核态。</p><p>但是这似乎不够。我们之前说了，操作系统与我们编写的软件并不同属一个进程，两边的内存地址空间都是独立的，我们系统调用请求是过去了，但是我们传给操作系统的内存地址，对它真的有意义吗？</p><p>答案在于，从虚拟内存机制的视角，操作系统内核和所有进程都在同一个地址空间，也就是，操作系统内核，它是所有进程共享的内存。示意如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/b3/2b0adde3eca6262ae674a97f478c15b3.png?wh=1920*866\" alt=\"\"></p><p>这非常有趣。操作系统内核的代码和数据，不只为所有进程所共享，而且在所有进程中拥有相同的地址。这样无论哪个进程请求过来，对内核来说看起来都是一次本进程内的请求。</p><p>从单个进程的视角，中断向量表的地址，以及操作系统内核的地址空间是一个契约。有了中断向量表的地址约定，用户态函数就可以发起一次系统调用（软中断）。</p><p>当然你可能要问：<strong>既然操作系统内核和我同属一个地址空间，我是否可以跳过中断，直接访问调用内核函数？</strong></p><p>这不单单是执行权限的问题。你可能会说，也许某个内核函数里面没有调用任何特权指令，我是否可以调用？</p><p>当然不能。这涉及虚拟内存中的内存页保护机制。内存页可以设置 “可读、可写、可执行” 三个标记位。操作系统内核虽然和用户进程同属一个地址空间，但是被设置为“不可读、不可写、不可执行”。虽然这段地址空间是有内容的，但是对于用户来说是个黑洞。</p><h2>编程接口</h2><p>理解了操作系统内核，以及它的调用方法 “系统调用”，我们来聊一聊操作系统的编程接口。</p><p>自然，最原始的调用方式，是用软中断指令。在汇编语言里面通常是：</p><pre><code>int &lt;中断号&gt; ;   // 对每个操作系统来说中断号是固定的，比如 Linux 是 0x80\n</code></pre><p>这里的 int 不是整数（integer）的缩写，而是中断（interrupt）的缩写。</p><p>当然用汇编语言来写软件并不是一个好主意。大部分高级语言都实现了操作系统编程接口的封装。</p><p>前面我们说，操作系统（内核）有六大子系统：存储管理、输入设备管理、输出设备管理、进程管理、网络管理、安全管理。除了安全管理是一个“润物细无声”的能力外，其他子系统都会有所包装。</p><p>我们以 C 语言和 Go 语言为例给一个简表，方便大家索引：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/11/372f60e314a3ec386844d4cd1db74411.jpg?wh=612*898\" alt=\"\"></p><p>这些标准库的能力，大部分与操作系统能力相关，但或多或少进行了适度的包装。</p><p>例如，HTTP 是应用层协议，和操作系统内核关联性并不大，基于 TCP 的编程接口可以自己实现，但由于 HTTP 协议细节非常多，这个网络协议又是互联网世界最为广泛应用的应用层协议，故此 Go 语言提供了对应的标准库。</p><p>进程内通讯最为复杂。虽然操作系统往往引入了 thread 这样的概念，但 Go 语言自己搞了一套goroutine 这样的东西，原因是什么，我们在后面讨论 “进程管理” 相关的内容时，再做详细讨论。</p><h2>动态库</h2><p>从操作系统的角度来说，它仅仅提供最原始的系统调用是不够的，有很多业务逻辑的封装，在用户态来做更合适。但是，它也无法去穷举所有的编程语言，然后一一为它们开发各种语言的基础库。那怎么办？</p><p>聪明的操作系统设计者们想了一个好办法：动态库。几乎所有主流操作系统都有自己的动态库设计，包括：</p><ul>\n<li>Windows 的 dll（Dynamic Link Library）；</li>\n<li>Linux/Android 的 so（shared object）；</li>\n<li>Mac/iOS 的 dylib（Mach-O Dynamic Library）。</li>\n</ul><p>动态库本质上是实现了一个语言无关的代码复用机制。它是二进制级别的复用，而不是代码级别的。这很有用，大大降低了编程语言标准库的工作量。</p><p>动态库的原理其实很简单，核心考虑两个东西。</p><ul>\n<li>浮动地址。动态库本质上是在一个进程地址空间中动态加载程序片段，这个程序片段的地址显然在编译阶段是没法确定的，需要在加载动态库的过程把浮动地址固定下来。这块的技术非常成熟，我们在实模式下加载进程就已经在使用这样的技术了。</li>\n<li>导出函数表。动态库需要记录有哪些函数被导出（export），这样用户就可以通过函数的名字来取得对应的函数地址。</li>\n</ul><p>有了动态库，编程语言的设计者实现其标准库来说就多了一个选择：直接调用动态库的函数并进行适度的语义包装。大部分语言会选择这条路，而不是直接用系统调用。</p><h2>操作系统与编程语言</h2><p>我们这个专栏从计算机硬件结构讲起，然后再到编程语言，到现在开始介绍操作系统，有些同学可能会觉得话题有那么一些跳跃。虽然每一节的开头，我其实对话题的脉络有所交代，但是，今天我还是有必要去做一个梳理。</p><p>编程语言和操作系统是两个非常独立的演化方向，却又彼此交融，它们有点像是某种“孪生关系”。虽然操作系统的诞生离不开编程语言，但是操作系统和 CPU 一样，是编程语言背后所依赖的基础设施。</p><p>和这个话题相关的，有这么一些有趣的问题：</p><ul>\n<li>先有编程语言，还是先有操作系统；</li>\n<li>编程语言怎么做到自举的（比如用C语言来实现C语言编译器）；</li>\n<li>操作系统开发的环境是什么样的，能够做到操作系统自身迭代本操作系统（自举）么？</li>\n</ul><p>对于<strong>第一个问题：先有编程语言，还是先有操作系统？</strong>这个问题的答案比较简单，先有编程语言。之所以有这个疑问，是因为两点：</p><p>其一，大部分人习惯认为运行软件是操作系统的责任。少了责任方，软件是怎么跑起来的？但实际上软件跑起来是很容易的，看 BIOS 程序把控制权交给哪个软件。</p><p>其二，大部分常见的应用程序都直接或间接依赖操作系统的系统调用。这样来看，编程语言编译出来的程序是无法脱离操作系统而存在的。但是实际上常见的系统级语言（比如 C 语言）都是可以编写出不依赖任何内核的程序的。</p><p>对于<strong>第二个问题：编程语言怎么做到自举的？</strong></p><p>从鸡生蛋的角度，编译器的进化史应该是这样的：先用机器码直接写第一个汇编语言的编译器，然后汇编语言编译器编出第一个 C 语言编译器。有了 C 语言编译器后，可以反过来用 C 语言重写汇编语言编译器和 C 语言编译器，做更多的功能增强。</p><p>这个过程理论上每出现一种新 CPU 指令集、新操作系统，就需要重新来一遍。但是人是聪明的。所以交叉编译这样的东西产生了。所谓交叉编译就是在一种 “CPU +操作系统” 架构下，生成另一种 “CPU +操作系统” 架构下的软件。这就避免了需要把整个编译器进化史重新演绎一遍。</p><p>对于<strong>第三个问题：操作系统能够做到自身迭代本操作系统（自举）么？</strong></p><p>当然可以。通常一门新的操作系统开发之初，会用上面提到的交叉编译技术先干出来，然后等到新操作系统稳定到一定程度后再实现自举，也就是用本操作系统自己来做操作系统的后续迭代开发。</p><h2>结语</h2><p>这一节我们介绍了我们的基础架构：中央处理器（CPU）、编程语言、操作系统这三者对应用软件开放的编程接口。总结来看就是下面这样一幅图：</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/e0/b2393a109f849bd91c991b1e750cb3e0.png?wh=1883*1376\" alt=\"\"></p><p>其中，我们着重介绍的是操作系统的系统调用背后的实现机理。通过系统调用这个机制，我们很好地实现了操作系统和应用软件的隔离性和安全性，同时仍然保证了极好的执行性能。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":93209,"user_name":":)","can_delete":false,"product_type":"c1","uid":1239198,"ip_address":"","ucode":"23D505949442B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/9e/6550a051.jpg","comment_is_top":false,"comment_ctime":1557423852,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"400989382380","product_id":100025201,"comment_content":"老师讲得太好了，让我对操作系统有了更加深入的理解，个人认为理解好老师所讲的内容，有如下关键点:1. 操作系统和我们写的程序运行于两个进程中 2.我们写的程序无法直接访问操作系统所在的内存 3.连接操作系统进程和用户进程的桥梁是中断地址 。 可以设想在还没有出现操作系统的上古时代，有两个普通的程序A和B在cpu上跑着，那么程序A和程序B如何交互呢？一种简单的办法就是程序A直接跳到程序B的函数地址上，cpu去执行该函数。但是呢，如果程序A访问不了程序B的地址咋办呢？可以在他们之间创建一个桥梁，这个桥梁就是中断地址，程序A可以通过中断地址间接的把cou执行权限交给B。这样程序B就可以执行了。 从cpu的角度看程序A和程序B都是普通的程序，但是呢，程序B是个功能丰富的程序，它可以做很多事，比如管理内存，管理外围设备。话说，程序A也可以做管理设备的工作啊，程序C也可以做管理设备的工作，，，后来一发现，程序A,B,C....都做了和外围设备交互的工作，我擦大家都做了相同的工作啊，那要不都交给程序B来做吧，我们A和C希望和外围设备交互的时候，就通过中断做为桥梁，把执行权交给B，然后就达到间接的外围设备交互，，，于是乎B越来越壮大！不仅有外围IO管理的能力，还有了内存管理，进程环境，，，等等。于是乎操作系统产生了，，，这是我个人的理解，还请老师多多指正！","like_count":94,"discussions":[{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345935,"discussion_content":"感谢，突然就形象了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611817655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93544,"user_name":"Fz","can_delete":false,"product_type":"c1","uid":1493757,"ip_address":"","ucode":"E7FBED11A1C6AF","user_header":"https://static001.geekbang.org/account/avatar/00/16/ca/fd/4346c87b.jpg","comment_is_top":false,"comment_ctime":1557491671,"is_pvip":false,"replies":[{"id":"33415","content":"其实理解清楚一个实质：编译器就是把高级语言翻译成为机器码，更抽象说，它其实就是格式转换器。目标格式是不是编译器正在运行的环境并不重要，只不过如果目标格式刚好是当前机器的CPU+操作系统，那么目标格式就可以直接执行，否则就编译出一个当前环境下无法执行的目标格式，这种情况就叫交叉编译。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557494412,"ip_address":"","comment_id":93544,"utype":1}],"discussion_count":5,"race_medal":0,"score":"224895791063","product_id":100025201,"comment_content":"交叉编译不是很理解","like_count":53,"discussions":[{"author":{"id":1466447,"avatar":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","nickname":"Daiver","note":"","ucode":"9B1A03AFBC79BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41186,"discussion_content":"比如 我在mac 下 编写 windows下的应用程序，这就是用到交叉编译","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1572362097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1466447,"avatar":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","nickname":"Daiver","note":"","ucode":"9B1A03AFBC79BC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360977,"discussion_content":"你比老师解释的还清楚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616572848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41186,"ip_address":""},"score":360977,"extra":""}]},{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449673,"discussion_content":"其实理解清楚一个实质：编译器就是把高级语言翻译成为机器码，更抽象说，它其实就是格式转换器。目标格式是不是编译器正在运行的环境并不重要，只不过如果目标格式刚好是当前机器的CPU+操作系统，那么目标格式就可以直接执行，否则就编译出一个当前环境下无法执行的目标格式，这种情况就叫交叉编译。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1557494412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572182,"discussion_content":"维基百科\n交叉编译器是一种能够为编译器所在平台以外的平台创建可执行代码的编译器。例如，在PC上运行但生成在Android智能手机上运行的代码的编译器就是交叉编译器。\n\n从一个开发主机编译多个平台的代码需要交叉编译器。在目标平台上直接编译可能是不可行的，例如在计算资源有限 的嵌入式系统上。\n\n交叉编译器不同于源到源编译器。交叉编译器用于机器代码的跨平台软件生成，而源到源编译器将文本代码从一种编程语言转换为另一种编程语言。两者都是编程工具。\n\nFYI\nhttps://en.wikipedia.org/wiki/Cross_compiler\nhttps://zh.m.wikipedia.org/zh-hans/%E4%BA%A4%E5%8F%89%E7%B7%A8%E8%AD%AF%E5%99%A8\nhttps://baike.baidu.com/item/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/10916911","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652627499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145554,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","nickname":"Sch0ng","note":"","ucode":"73F6113931B1AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547599,"discussion_content":"在mac编译linux上能执行的go程序，是不是就是交叉编译。GOOS=linux GOARCH=amd64 go build main.go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642759577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93599,"user_name":"SuperFranky","can_delete":false,"product_type":"c1","uid":1496466,"ip_address":"","ucode":"68984C09111636","user_header":"https://static001.geekbang.org/account/avatar/00/16/d5/92/1e741777.jpg","comment_is_top":false,"comment_ctime":1557529606,"is_pvip":false,"replies":[{"id":"33457","content":"👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557542396,"ip_address":"","comment_id":93599,"utype":1}],"discussion_count":2,"race_medal":0,"score":"126111581190","product_id":100025201,"comment_content":"cpu不需要检查是否发生了中断，它的原理类似于开关和灯泡的关系，当开关合上，灯泡就会亮，灯泡不需要定期检查开关是否合上了","like_count":30,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449694,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557542396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207520,"discussion_content":"调用cpu的中断指令。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584502434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93870,"user_name":"晓凉","can_delete":false,"product_type":"c1","uid":1220647,"ip_address":"","ucode":"2D1130C3DACE1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/27/bdc6307d.jpg","comment_is_top":false,"comment_ctime":1557645722,"is_pvip":false,"replies":[{"id":"33517","content":"我们日常所见明明有无数设计精良的例子，所以我们其实不需要一上来去设计新的例子，从这些最宏大的例子学起","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557646970,"ip_address":"","comment_id":93870,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100341893530","product_id":100025201,"comment_content":"优秀的架构设计能带来的好处可能超出架构师最初的预想，例如Linux系统的容器特性，现在成了云计算领域的重要基础技术，成就了一个领域。基于前辈大师的优秀架构，现在的信息世界才能如此生生不息。优秀的架构不仅能解决当前的实际问题，更具有理论上的优雅，像一种真理，可照亮未来。","like_count":24,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449803,"discussion_content":"我们日常所见明明有无数设计精良的例子，所以我们其实不需要一上来去设计新的例子，从这些最宏大的例子学起","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557646970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93931,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1557671003,"is_pvip":false,"replies":[{"id":"33539","content":"正在教自家小孩😊","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557673460,"ip_address":"","comment_id":93931,"utype":1}],"discussion_count":2,"race_medal":0,"score":"65982180443","product_id":100025201,"comment_content":"看完有种苹果砸到脑袋上的感觉，好多问题之前总想不透，现在贯通了，许老师可以创立个品牌专门教小孩编程，以老师的功底肯定能教会","like_count":16,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449832,"discussion_content":"正在教自家小孩😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557673460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055810,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/42/d3a0e33a.jpg","nickname":"希德小子","note":"","ucode":"0F3DA846858DBD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310109,"discussion_content":"这种换个视角看问题的方式，引人入胜，能够把惯性思维中僵化的部分给激活了，厉害！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601621076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93212,"user_name":"M","can_delete":false,"product_type":"c1","uid":1117633,"ip_address":"","ucode":"88F6F1433A01A3","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/c1/d36816df.jpg","comment_is_top":false,"comment_ctime":1557427446,"is_pvip":false,"replies":[{"id":"33251","content":"挺好的问题。硬件中断和软中断不一样。硬件中断你可以理解为总是会定期检查。软中断本身是一条指令，所以不存在检查这样的概念。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557447150,"ip_address":"","comment_id":93212,"utype":1}],"discussion_count":3,"race_medal":0,"score":"57392002294","product_id":100025201,"comment_content":"请问一下cpu是如何检查是否有中断的。是怎么及时知道发生了中断？每执行完一条指令都去检查一次吗？","like_count":13,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449529,"discussion_content":"挺好的问题。硬件中断和软中断不一样。硬件中断你可以理解为总是会定期检查。软中断本身是一条指令，所以不存在检查这样的概念。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557447150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048491,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/ab/04a3396e.jpg","nickname":"渺小","note":"","ucode":"8420F6EE9A7872","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8364,"discussion_content":"那软中断的指令是cpu在当前指令执行完就去执行的吗？软中断指令的优先级是不是最高的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567949115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1089372,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9f/5c/f7425225.jpg","nickname":"净莲妖火","note":"","ucode":"2AFE1021696E53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048491,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/ab/04a3396e.jpg","nickname":"渺小","note":"","ucode":"8420F6EE9A7872","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":325893,"discussion_content":"以下个人理解，如有错误望指正:\n        软件中断就像是一个优先级最高的线程中跑了一个while(1)，这个死循环中一直在检测是否有中断，当然优先级最高的中断最先检测。\n        硬件中断就像是家里开关灯一样，中断过来电通了灯亮，从0到1,改变电平信号。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605453202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8364,"ip_address":""},"score":325893,"extra":""}]}]},{"had_liked":false,"id":138174,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1570075934,"is_pvip":false,"replies":[{"id":"53178","content":"是这样","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1570099580,"ip_address":"","comment_id":138174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53109683486","product_id":100025201,"comment_content":"我重复一下我理解的交叉编译，老师帮忙看看理解对不对：<br>编译的目标是生成机器码指令，即对cpu有意义的01序列。当出现新的cpu指令时，本质上只是生成一个新的01序列。整个自举的过程有点像自然语言的自举，比如用原有的词汇去解释新的词汇。<br>是这样理解么？","like_count":11,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469423,"discussion_content":"是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570099580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104338,"user_name":"木 易","can_delete":false,"product_type":"c1","uid":1033212,"ip_address":"","ucode":"5C3BBB5958A4B5","user_header":"","comment_is_top":false,"comment_ctime":1560734011,"is_pvip":false,"replies":[{"id":"37799","content":"做操作系统的难度不在技术，而是在：1、用户为何用你，你有何不可替代性；2、开发者为何要支持你，你用户多不多。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560742723,"ip_address":"","comment_id":104338,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44510406971","product_id":100025201,"comment_content":"老师可以谈谈最近华为要推出的“鸿蒙系统”吗，和Linux有什么关系，如果想开发一个操作系统，从哪些方面考虑。","like_count":10,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454234,"discussion_content":"做操作系统的难度不在技术，而是在：1、用户为何用你，你有何不可替代性；2、开发者为何要支持你，你用户多不多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560742723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186115,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/43/226ca347.jpg","nickname":"Michael 🛡YZY","note":"","ucode":"F1D2BF8489A7D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50421,"discussion_content":"我倒觉得这两点不一定是操作系统开发之初要考虑的主要问题 优化现有操作系统的软肋 在未来某个时间点上带来生产力最大化 剩下的水到渠成 我个人不是专家 但乐见不远的将来 我们有自己的操作系统 不单单是移动端的 可以是一种交互方式的跨越","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573718988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96622,"user_name":"黑洞","can_delete":false,"product_type":"c1","uid":1451364,"ip_address":"","ucode":"840A4330B1B2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/64/d66ea739.jpg","comment_is_top":false,"comment_ctime":1558481221,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"40213186885","product_id":100025201,"comment_content":"老师解释的真是很明白，尤其是系统调用的工作原理，我一直都没有想明白普通用户自定义函数调用和系统调用之间到底有什么区别，原来以为是垮进程内存地址传递和内存共享，原来压根儿就是在同一个内存地址空间里啊！OS内核地址空间被所有用户进程自己操作系统自己共享啊。<br>上学时学习操作系统课程，上面说虚拟内存低地址空间已经分给操作系统内核使用，这句话原来是这个意思啊，真是恍然大悟，受教受教了。💐(&#47;ε＼*)给你花花","like_count":10,"discussions":[{"author":{"id":1055810,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/42/d3a0e33a.jpg","nickname":"希德小子","note":"","ucode":"0F3DA846858DBD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310110,"discussion_content":"应该是虚拟内存高地址空间分配给内核了吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601621172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1055810,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/42/d3a0e33a.jpg","nickname":"希德小子","note":"","ucode":"0F3DA846858DBD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":346700,"discussion_content":"高地址还是低地址是一个不重要的细节，不同操作系统选择未必相同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612026640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310110,"ip_address":""},"score":346700,"extra":""}]}]},{"had_liked":false,"id":93772,"user_name":"new life","can_delete":false,"product_type":"c1","uid":1447866,"ip_address":"","ucode":"B817AC3909102B","user_header":"https://static001.geekbang.org/account/avatar/00/16/17/ba/c56aa720.jpg","comment_is_top":false,"comment_ctime":1557585658,"is_pvip":true,"replies":[{"id":"33477","content":"要让引导程序给你执行权才行，如果你写一个不依赖操作系统的程序，但是要让操作系统执行它是行不通的，因为操作系统接管了所有的资源，你不依赖它什么也干不了（没有权限）。所以这种写法基本上只适合写另一个操作系统。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557625672,"ip_address":"","comment_id":93772,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40212291322","product_id":100025201,"comment_content":"老师  但是实际上常见的系统级语言（比如 C 语言）都是可以编写出不依赖任何内核的程序的。这句话是说我们编写的程序 没有操作系统也可以跑起来是吗","like_count":10,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449767,"discussion_content":"要让引导程序给你执行权才行，如果你写一个不依赖操作系统的程序，但是要让操作系统执行它是行不通的，因为操作系统接管了所有的资源，你不依赖它什么也干不了（没有权限）。所以这种写法基本上只适合写另一个操作系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557625672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94188,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1502080,"ip_address":"","ucode":"5C0F6F2B784D60","user_header":"https://static001.geekbang.org/account/avatar/00/16/eb/80/baa681be.jpg","comment_is_top":false,"comment_ctime":1557741824,"is_pvip":false,"replies":[{"id":"33661","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557754555,"ip_address":"","comment_id":94188,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35917480192","product_id":100025201,"comment_content":"关于动态库，是不是可以理解为：提供动态库不是操作系统的责任（因为其他语言完全可以通过系统调用来自己实现动态库的功能），只是操作系统为了方便其他语言（减少不必要的冗余）而做的多余的事？","like_count":8,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449946,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557754555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055660,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/ac/41ec8c80.jpg","nickname":"孙悟空","note":"","ucode":"28356CBC83C464","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69144,"discussion_content":"glbc就是这样的动态库么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575265215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94290,"user_name":"二星球","can_delete":false,"product_type":"c1","uid":1111552,"ip_address":"","ucode":"89EC5FEB98E7CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/00/2a248fd8.jpg","comment_is_top":false,"comment_ctime":1557760340,"is_pvip":false,"replies":[{"id":"33692","content":"软中断你可以把它理解为虚函数调用，本来就占着cpu资源呢，不需要等。一下子来很多中断是可能的，在硬件中断的情况下，这时候会根据中断优先级响应。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557764268,"ip_address":"","comment_id":94290,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27327564116","product_id":100025201,"comment_content":"老师好，我这有个问题，就是有中断必有对应的中断处理程序，那么执行中断处理程序会不会像普通线程那样抢占cpu资源呢，如果没抢到还要等一等？还有就是一下同时来了十几个中断，那么怎么处理呢？","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450003,"discussion_content":"软中断你可以把它理解为虚函数调用，本来就占着cpu资源呢，不需要等。一下子来很多中断是可能的，在硬件中断的情况下，这时候会根据中断优先级响应。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557764268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gmP4Yh00MZPwNvr4UQdLeXaX3TVyZEEp195S3vD3Sfl1xz5jBr1474Mt6w5OPr0KsrnQObfLRy5PkKNFjSBiasA/132","nickname":"大头爸爸","note":"","ucode":"131E25DB04D222","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235162,"discussion_content":"如果一下子来了很多中断，硬件是不是会提供一个缓冲区把它们都存起来，这样优先级不高的中断还可以轮到?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587025176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106438,"user_name":"小袋子","can_delete":false,"product_type":"c1","uid":1403825,"ip_address":"","ucode":"2797320994938C","user_header":"https://static001.geekbang.org/account/avatar/00/15/6b/b1/32cb2393.jpg","comment_is_top":false,"comment_ctime":1561302072,"is_pvip":false,"replies":[{"id":"38457","content":"8-9岁","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1561305231,"ip_address":"","comment_id":106438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23036138552","product_id":100025201,"comment_content":"插个题外话，以老师的经验，小孩几岁开始学编程比较合适😂","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455090,"discussion_content":"8-9岁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561305231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93892,"user_name":"long.mr","can_delete":false,"product_type":"c1","uid":1071784,"ip_address":"","ucode":"F808C4E62BBCF1","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/a8/f25ec64c.jpg","comment_is_top":false,"comment_ctime":1557654961,"is_pvip":false,"replies":[{"id":"33527","content":"UML 里面有一些约定，可以参考。但是更重要的是团队内的约定。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557655909,"ip_address":"","comment_id":93892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23032491441","product_id":100025201,"comment_content":"许老师，问一哈在画架构图的时候有没有一些约定俗成的准则呢，比如虚线 实线 方框 圆角矩形的选择。业界有一些权威的参考吗？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449814,"discussion_content":"UML 里面有一些约定，可以参考。但是更重要的是团队内的约定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557655909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93379,"user_name":"dong","can_delete":false,"product_type":"c1","uid":1507666,"ip_address":"","ucode":"A78F0DDB47BE2C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ykpiaicp2SsWskj3deBqux4kF05Du800NhOiafbTcic3J9cVxdtE90eURb12TTSFp7Eic6dtpPXiaYN1fkSCibkLUUXsg/132","comment_is_top":false,"comment_ctime":1557459855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23032296335","product_id":100025201,"comment_content":"这是我看过的讲的最清楚的计算机组成原理和操作系统。期待更新。","like_count":5},{"had_liked":false,"id":171446,"user_name":"Geek_gooy","can_delete":false,"product_type":"c1","uid":1504570,"ip_address":"","ucode":"FC168C31530040","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLluwfFjxlCmg9p2rJVicBdBo6OYpN0EAotUguias8wc78WtAEPHsWic0880CqGwyNypy2KZqVpYhGiag/132","comment_is_top":false,"comment_ctime":1578924118,"is_pvip":false,"replies":[{"id":"66459","content":"第一句话是逻辑上的，操作系统的进程，和用户进程都有独立的地址空间。但是细究细节，可以发现操作系统进程和所有用户进程有一部分地址空间又是共享的，里面就是操作系统的内核。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1578948139,"ip_address":"","comment_id":171446,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18758793302","product_id":100025201,"comment_content":"前面提到:<br>操作系统与我们编写的软件并不同属一个进程，两边的内存地址空间都是独立的。<br><br>后面提到:<br>当然你可能要问：既然操作系统内核和我同属一个地址空间，……<br><br>老师，这是不是矛盾啊？中间的解释看不懂，求形象举例。","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481354,"discussion_content":"第一句话是逻辑上的，操作系统的进程，和用户进程都有独立的地址空间。但是细究细节，可以发现操作系统进程和所有用户进程有一部分地址空间又是共享的，里面就是操作系统的内核。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578948139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3034671,"avatar":"","nickname":"Geek_472645","note":"","ucode":"099F7E74B87850","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579369,"discussion_content":"内核进程是pid=0, 任何进程都是由起创建的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657379270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94229,"user_name":"apk","can_delete":false,"product_type":"c1","uid":1494518,"ip_address":"","ucode":"67DFD69A73F694","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/f6/ee383eab.jpg","comment_is_top":false,"comment_ctime":1557748285,"is_pvip":false,"replies":[{"id":"33662","content":"go当然是用c实现的，大部分语言都是如此。后来go决定自举，就换成go来实现go了。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557754636,"ip_address":"","comment_id":94229,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18737617469","product_id":100025201,"comment_content":"go有自己的编译器，它也是基于CPU+操作系统实现的，还是自己通过机器码，汇编，go编译器思路实现的呢？像按行解析的编译器比如python和C这种执行加载的语言在编译器上有什么区别呢？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449965,"discussion_content":"go当然是用c实现的，大部分语言都是如此。后来go决定自举，就换成go来实现go了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557754636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94135,"user_name":"Yayu","can_delete":false,"product_type":"c1","uid":1058015,"ip_address":"","ucode":"5E7842458D8229","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","comment_is_top":false,"comment_ctime":1557729178,"is_pvip":false,"replies":[{"id":"33609","content":"编程语言的核心文法及内置库主要就是语言各种基础特性，主要就是语言文法部分，比如变量、控制语句（if、for、switch）、函数定义等等","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557740688,"ip_address":"","comment_id":94135,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18737598362","product_id":100025201,"comment_content":"请问老师，变成语言提供的内置库（SDK）可大体氛围两类：1、对（操作系统各个子系统的）系统调用的封装；2、业务（逻辑）层的工具。那我们这里说的SDK是文章末尾分层图中的 【编程语言操作系统相关的标准库】和【编程语言的算法库】对吧？那【编程语言的核心文法及内置库】这一层如何理解？落实到具体的指代哪些库呢？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449928,"discussion_content":"编程语言的核心文法及内置库主要就是语言各种基础特性，主要就是语言文法部分，比如变量、控制语句（if、for、switch）、函数定义等等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557740688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93293,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1557450500,"is_pvip":false,"replies":[{"id":"33267","content":"很快要讲到了","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557452454,"ip_address":"","comment_id":93293,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18737319684","product_id":100025201,"comment_content":"老师能否讲下协程的优势?不太理解","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449568,"discussion_content":"很快要讲到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557452454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94771,"user_name":"尹少爷","can_delete":false,"product_type":"c1","uid":1156454,"ip_address":"","ucode":"5F390D99C41BFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/66/cd335f3e.jpg","comment_is_top":false,"comment_ctime":1557892077,"is_pvip":false,"replies":[{"id":"33883","content":"同一进程内的隔离是通过：1、分内核态很用户态；2、内存页的保护属性（不可读、不可写、不可执行）","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557897275,"ip_address":"","comment_id":94771,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14442793965","product_id":100025201,"comment_content":"操作系统内核的进程都是共享内存的，在联合上一章内容：<br><br>其实操作系统内核上层如果按照保护模式来看，通过虚拟内存做了一层安全隔离，不同程序的隔离， 那么同一个程序中的，不同进程的隔离是怎么做的， ","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450200,"discussion_content":"同一进程内的隔离是通过：1、分内核态很用户态；2、内存页的保护属性（不可读、不可写、不可执行）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557897275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93421,"user_name":"honnkyou","can_delete":false,"product_type":"c1","uid":1026608,"ip_address":"","ucode":"FD5EC4120EE803","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/30/acc91f01.jpg","comment_is_top":false,"comment_ctime":1557467604,"is_pvip":false,"replies":[{"id":"33365","content":"不是程序标注，是一个cpu当前的状态值（比如用一个寄存器专门表示当前的执行权限）","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557470497,"ip_address":"","comment_id":93421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14442369492","product_id":100025201,"comment_content":"老师，cpu是怎么知道什么代码可以在ring0中执行，什么代码需要在ring3中执行的呢？<br>是在程序中标注的吗？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449625,"discussion_content":"不是程序标注，是一个cpu当前的状态值（比如用一个寄存器专门表示当前的执行权限）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557470497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93403,"user_name":"K战神","can_delete":false,"product_type":"c1","uid":1139367,"ip_address":"","ucode":"527E6BB26BB766","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/a7/3e6fee86.jpg","comment_is_top":false,"comment_ctime":1557464483,"is_pvip":false,"replies":[{"id":"33344","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557467093,"ip_address":"","comment_id":93403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14442366371","product_id":100025201,"comment_content":"k8s是不是也是类似于软件治理平台？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449615,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557467093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93307,"user_name":"coder","can_delete":false,"product_type":"c1","uid":1399673,"ip_address":"","ucode":"929E3FFD14EFC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/5b/79/d55044ac.jpg","comment_is_top":false,"comment_ctime":1557451495,"is_pvip":false,"replies":[{"id":"33268","content":"我其实认为人家的架构师还真不是盖的，虽然很多预判有偏差，但是没有绕那么多弯路。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557452569,"ip_address":"","comment_id":93307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14442353383","product_id":100025201,"comment_content":"编译器和操作系统这种系统级别的软件在历史发展的过程中，概念的区分很明确吗？从第一代可编程的计算机开始，既然可以运行软件，底层应该有一大堆的非概念级别的工具链或者非概念级别的操作系统。为了解决软件治理和可编程问题，所以才逐渐衍生、总结出编译器、OS等这些概念，从进化、发展的角度去看，能这么理解吗？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449575,"discussion_content":"我其实认为人家的架构师还真不是盖的，虽然很多预判有偏差，但是没有绕那么多弯路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557452569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93201,"user_name":"82","can_delete":false,"product_type":"c1","uid":1494935,"ip_address":"","ucode":"C58365A8A3843D","user_header":"https://static001.geekbang.org/account/avatar/00/16/cf/97/fcd8957d.jpg","comment_is_top":false,"comment_ctime":1557420460,"is_pvip":true,"replies":[{"id":"33220","content":"操作系统并不是简单的辅助工具，而是软件治理的平台。所以软件正常是没法绕过操作系统的，除非是找到漏洞提权了。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557427023,"ip_address":"","comment_id":93201,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14442322348","product_id":100025201,"comment_content":"编程语言只是一个工具，而操作系统作为接口平台，干了很多复杂的事情。其实语言本身也是可以直接跳过操作系统去对接硬件。<br>操作系统作为聚合平台其实也不是必须的，只是为了提升某块的效率，对吧<br>","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449522,"discussion_content":"操作系统并不是简单的辅助工具，而是软件治理的平台。所以软件正常是没法绕过操作系统的，除非是找到漏洞提权了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557427023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572187,"discussion_content":"事实或许就是，当你这么做了，到了后面发现，还是要有操作系统这个平台/玩意儿。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652628313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309780,"user_name":"Jeyrce.Lu","can_delete":false,"product_type":"c1","uid":1598272,"ip_address":"","ucode":"11D2607A2FDEA8","user_header":"https://static001.geekbang.org/account/avatar/00/18/63/40/b9615c81.jpg","comment_is_top":false,"comment_ctime":1630330189,"is_pvip":false,"replies":[{"id":"112232","content":"是的，go没有调用libc的能力，都是自己实现的 这是因为它认为自己是取代c的 所以没有依赖c","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1630375423,"ip_address":"","comment_id":309780,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10220264781","product_id":100025201,"comment_content":"老师我想问一下，go编译后的二进制程序都是单个文件，我貌似没有找到可以编译出动态链接库的方法，原因是go程序完全没有使用系统封装的动态链接库吗，他自己实现了所有的系统调用？还有就是我更改一个环境变量就可以在amd上编译出arm上可执行的二进制，这个原因也是go实现了arm amd等常见的架构下所有系统调用么？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526012,"discussion_content":"是的，go没有调用libc的能力，都是自己实现的 这是因为它认为自己是取代c的 所以没有依赖c","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630375423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174395,"user_name":"白不吃","can_delete":false,"product_type":"c1","uid":1033578,"ip_address":"","ucode":"F019914D8819C2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/6a/7f858f1f.jpg","comment_is_top":false,"comment_ctime":1580190989,"is_pvip":true,"replies":[{"id":"67791","content":"对于架构师，语言只是表达意图的载体","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1580215626,"ip_address":"","comment_id":174395,"utype":1}],"discussion_count":1,"race_medal":4,"score":"10170125581","product_id":100025201,"comment_content":"可能我学的java吧，篇幅中过多的go语言内容","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482391,"discussion_content":"对于架构师，语言只是表达意图的载体","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580215626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108736,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1561869009,"is_pvip":false,"replies":[{"id":"39374","content":"1、无法区分；<br>2、不是区分内核访问还是应用程序访问，而是区分内核态还是用户态，如果用户态就不可读&#47;写&#47;执行。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1561895548,"ip_address":"","comment_id":108736,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10151803601","product_id":100025201,"comment_content":"又看了一遍全文和留言，实在太精彩啦。<br><br>关于绕过系统调用，直接调用内核函数我有一些疑问。<br><br>1、假设通过某种手段，应用程序能够直接调用内核函数，内核能否知道，这是来自应用程序的调用，还是系统函数的调用？<br><br>2、内核和用户进程同属一个地址空间，这块空间被设置为“不可读，不可写，不能执行”，是只针对应用程序来说么？针对内核函数还是可读、可写、可执行的。如果是，那虚拟内存页保护机制怎么区分是内核访问还是应用程序直接访问的呢。","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456097,"discussion_content":"1、无法区分；\n2、不是区分内核访问还是应用程序访问，而是区分内核态还是用户态，如果用户态就不可读/写/执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561895548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104773,"user_name":"xiaobang","can_delete":false,"product_type":"c1","uid":1157508,"ip_address":"","ucode":"1735BDCFD61655","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","comment_is_top":false,"comment_ctime":1560832522,"is_pvip":false,"replies":[{"id":"37908","content":"编程语言本质上是cpu能力的提炼，是比操作系统还要底层吗东西。但是编程语言它又要体现每一个层次平台的能力，包括操作系统、网络、云计算等。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560837704,"ip_address":"","comment_id":104773,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10150767114","product_id":100025201,"comment_content":"请教下最后总结图里“编程语言文法和核心库” 为什么在操作系统下面？还有编程语言的编译工具在操作系统看来也只是一些特殊的应用程序吧<br><br>另外现在有用高级语言比如go Java之类写操作系统的传闻，我一直有个疑问这些高级语言依赖的运行时是怎么搞定的，毕竟写操作系统时不能再依赖操作系统的支持了","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454418,"discussion_content":"编程语言本质上是cpu能力的提炼，是比操作系统还要底层吗东西。但是编程语言它又要体现每一个层次平台的能力，包括操作系统、网络、云计算等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560837704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96492,"user_name":"Geek_gooy","can_delete":false,"product_type":"c1","uid":1504570,"ip_address":"","ucode":"FC168C31530040","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLluwfFjxlCmg9p2rJVicBdBo6OYpN0EAotUguias8wc78WtAEPHsWic0880CqGwyNypy2KZqVpYhGiag/132","comment_is_top":false,"comment_ctime":1558433610,"is_pvip":false,"replies":[{"id":"34553","content":"不能","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558439013,"ip_address":"","comment_id":96492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148368202","product_id":100025201,"comment_content":"用汇编写程序是面向CPU的还是面向操作系统的。<br>如果可以面向CPU是不是可以写出跨操作系统的软件。","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450896,"discussion_content":"不能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558439013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95180,"user_name":"马留","can_delete":false,"product_type":"c1","uid":1513768,"ip_address":"","ucode":"B3C0ED5C1F86DE","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/28/f4b4ed22.jpg","comment_is_top":false,"comment_ctime":1557979070,"is_pvip":false,"replies":[{"id":"33987","content":"硬件中断周期性检查是一个错误的表述","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557980377,"ip_address":"","comment_id":95180,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147913662","product_id":100025201,"comment_content":"对“硬件中断要周期性检查”不太理解。CPU和外设交互，有三种方式:轮询 中断 DMA。对CPU来说，硬件中断来自于外部触发，是异步的，怎么需要周期性检查呢？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450356,"discussion_content":"硬件中断周期性检查是一个错误的表述","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557980377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94184,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1502080,"ip_address":"","ucode":"5C0F6F2B784D60","user_header":"https://static001.geekbang.org/account/avatar/00/16/eb/80/baa681be.jpg","comment_is_top":false,"comment_ctime":1557741552,"is_pvip":false,"replies":[{"id":"33660","content":"cpu 不区分操作系统和软件，它眼里没有软件的概念。cpu只有一个状态码代表当前的执行权限等级（比如用一个寄存器来表示权限等级）。这也是为什么有一些恶意软件可以利用漏洞提权。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557754540,"ip_address":"","comment_id":94184,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147676144","product_id":100025201,"comment_content":"有个疑问，CPU怎么区分操作系统和常规软件，从而做到给予不同软件的CPU权限？是BIOS在决定将软件运行权时就直接交给该软件（OS）所有权限的吗？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449945,"discussion_content":"cpu 不区分操作系统和软件，它眼里没有软件的概念。cpu只有一个状态码代表当前的执行权限等级（比如用一个寄存器来表示权限等级）。这也是为什么有一些恶意软件可以利用漏洞提权。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557754540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93995,"user_name":"Barry","can_delete":false,"product_type":"c1","uid":1003308,"ip_address":"","ucode":"79117738B2B26E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/2c/a17b23f7.jpg","comment_is_top":false,"comment_ctime":1557704404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10147638996","product_id":100025201,"comment_content":"看来有人提了朗读者之前读速有点快的问题，这节就慢了下来。这个语速挺好的","like_count":2},{"had_liked":false,"id":93929,"user_name":"yl","can_delete":false,"product_type":"c1","uid":1495727,"ip_address":"","ucode":"27C922ABF2D10D","user_header":"https://static001.geekbang.org/account/avatar/00/16/d2/af/f878dc80.jpg","comment_is_top":false,"comment_ctime":1557670731,"is_pvip":false,"replies":[{"id":"33541","content":"restful 为什么可调试性就好？可以给对方提要求多打印关键过程的日志","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557673622,"ip_address":"","comment_id":93929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147605323","product_id":100025201,"comment_content":"请教一个开发效率的问题，我所在传统软件行业，硬件设备提供的是本地动态库接口给业务应用使用，在调试和部署上都效率低(公司规模不大，且软件开发模式不正规)，如果让底层提供类似restful服务接口在性能上就会有瓶颈，有没有折中的办法改善这一情况？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449831,"discussion_content":"restful 为什么可调试性就好？可以给对方提要求多打印关键过程的日志","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557673622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93838,"user_name":"Enthusiasm","can_delete":false,"product_type":"c1","uid":1504776,"ip_address":"","ucode":"FEAA522C24A6D5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f6/08/ecf5d724.jpg","comment_is_top":false,"comment_ctime":1557633748,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10147568340","product_id":100025201,"comment_content":"有很多疑问啊老师，我都不知道从哪说起了。对C语言和底层一点儿都不了解。比如，应用软件的所有方法调用，我认为都是需要调用系统API的，所以问题来了，都需要发送软中断吗？还是说，一般方法调用系统API，需要“特权指令”的时候，才触发软中断呢？而且我实在想不出软件有哪些“特权指令”需要直接操作CPU提权，按理说应用软件会一直被限制吧？只调用类库和操作系统API不就行了吗？为什么还要提权啊。而且，我们写代码时候，没有学过用中断啊，中断命令是不是在汇编后自动生成的？中间一段介绍中断，系统调用以及编程接口这段描述的非常含糊，没有操作系统和汇编语言基础的人理解很吃力。整体过程也不清楚，希望能有张顺序流程图。整篇文章分模块讲述，像一部纪传体的史记，但此时真心呼唤一部编年体通史啊！","like_count":2,"discussions":[{"author":{"id":1141676,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6b/ac/cc187d8d.jpg","nickname":"向往而行","note":"","ucode":"AE01D637B946C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159508,"discussion_content":"确实是 我也有很多疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580701284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93833,"user_name":"陈光","can_delete":false,"product_type":"c1","uid":1007685,"ip_address":"","ucode":"48FD5FBD0F6319","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/45/c6302327.jpg","comment_is_top":false,"comment_ctime":1557632703,"is_pvip":false,"replies":[{"id":"33516","content":"软中断就是一条cpu指令，遇到了执行就行了。硬件中断我觉得其实也不存在定期检查，所谓检查只是从软件思维去理解硬件而已，前面有人举了开关合上灯就亮了是一个挺恰当的比喻，灯并没有去不停检查开关是否合上，所谓检查只是从软件去理解这种现象的一种想象。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557646743,"ip_address":"","comment_id":93833,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10147567295","product_id":100025201,"comment_content":"老师，CPU划定权限范围，操作系统负责分配权限，可以这样理解吗？另外，为什么CPU会需要定期检查“硬中断”而不需要定期检查“软中断”？是因为软中断是更“高”一层的中断吗？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449787,"discussion_content":"软中断就是一条cpu指令，遇到了执行就行了。硬件中断我觉得其实也不存在定期检查，所谓检查只是从软件思维去理解硬件而已，前面有人举了开关合上灯就亮了是一个挺恰当的比喻，灯并没有去不停检查开关是否合上，所谓检查只是从软件去理解这种现象的一种想象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557646743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":572188,"discussion_content":"这样的话，感觉软中断跟硬中断并没有区别～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652628832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":449787,"ip_address":""},"score":572188,"extra":""}]}]},{"had_liked":false,"id":93240,"user_name":"pawhrmyki","can_delete":false,"product_type":"c1","uid":1480332,"ip_address":"","ucode":"CDCF44F2E43937","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ermRibwXSt1icBvH3IO1JfiaqakIcxxAP4zSkicewogKVWCFicb0NVc7tF3xSVMJwE3lBg2gH4r7u6sGtw/132","comment_is_top":false,"comment_ctime":1557446004,"is_pvip":false,"replies":[{"id":"33266","content":"1G就是保留个内核，对所有进程来说一样","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557451725,"ip_address":"","comment_id":93240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147380596","product_id":100025201,"comment_content":"假设可寻址范围4G，用户空间：0～3G，内核3G～4G，那对于保护模式下的用户程序，他能访问到的虚拟的4个G中，其实真正属于他的只有3G，还有1G是和内核以及其他所有进程共享的，而这1G的地址对于所有进程（包括操作系统）都是一样的，可以这么理解吗","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449541,"discussion_content":"1G就是保留个内核，对所有进程来说一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557451725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319499,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1635836920,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"5930804216","product_id":100025201,"comment_content":"先有编程语言还是先有操作系统，这样一个“鸡生蛋”的问题，相对比较容易理解，毕竟操作系统也是需要编程语言来“编”的。<br><br>编程语言和操作系统自举这个就比较有意思了，也就是说可以在操作系统上编译一个新的操作系统，或者是原有操作系统的升级版，然后重启运行。<br><br>交叉编译从想法到实现都是天才。一直觉得计算机科学代表了先进生产力，是人类智慧的结晶，在偏底层的操作系统和编译器这里，体现的淋漓尽致。<br><br>留言回复里面说，编译器其实就是格式转换器，把高级语言翻译成机器码，这个把“编译”高大上的外衣给剥掉了，当然，怎么样转换、如何翻译的高效，还是不明觉厉。<br><br>CPU 每执行完一条指令都会“检查”一下硬中断，几乎不消耗时间；而软中断本身就是一条指令，根据中断优先级来调用。<br><br>关于硬中断类似于灯泡开关的留言也很棒，所以上面的检查是带引号的。","like_count":1},{"had_liked":false,"id":177373,"user_name":"幻灰龙","can_delete":false,"product_type":"c1","uid":1046202,"ip_address":"","ucode":"AFEDCC997C2FF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/ba/09ab72d2.jpg","comment_is_top":false,"comment_ctime":1581380048,"is_pvip":false,"replies":[{"id":"68869","content":"挺好的补充。语言与语言的交互分为两种，一种是进程内，一种是进程间。<br><br>进程内的，一方作为宿主语言，一方作为嵌入式脚本。这种类型的机制本质上通常最终归结为宿主语言与C语言的交互机制。这里的原因是大部分脚本语言都是C&#47;C++实现的，且多数宿主语言都了解这一点，所以都会做到尽可能地C语言友好。但这个总结不代表全部情况，还有一些其他场景。这里最值得说一说的，是Go语言。考虑到Go语言与C语言的友好性，上述的方案同样适用于Go语言。但是由于一方面Go对C语言的支持还有缺陷，另一方面Go也想取代C的地位，所以很多脚本语言的Go语言实现版本也雨后春笋般出现。<br><br>进程间的跨语言交互，本质上基于的是进程间交互机制，比较典型的代表是共享内存与socket。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1581390371,"ip_address":"","comment_id":177373,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876347344","product_id":100025201,"comment_content":"跨语言交互能增加理解，特别是有虚拟机的语言之间，例如在C#或者Java里跟Lua交互。","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483405,"discussion_content":"挺好的补充。语言与语言的交互分为两种，一种是进程内，一种是进程间。\n\n进程内的，一方作为宿主语言，一方作为嵌入式脚本。这种类型的机制本质上通常最终归结为宿主语言与C语言的交互机制。这里的原因是大部分脚本语言都是C/C++实现的，且多数宿主语言都了解这一点，所以都会做到尽可能地C语言友好。但这个总结不代表全部情况，还有一些其他场景。这里最值得说一说的，是Go语言。考虑到Go语言与C语言的友好性，上述的方案同样适用于Go语言。但是由于一方面Go对C语言的支持还有缺陷，另一方面Go也想取代C的地位，所以很多脚本语言的Go语言实现版本也雨后春笋般出现。\n\n进程间的跨语言交互，本质上基于的是进程间交互机制，比较典型的代表是共享内存与socket。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581390371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107628,"user_name":"王盛武","can_delete":false,"product_type":"c1","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1561568169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856535465","product_id":100025201,"comment_content":"睿智，用机器码实现第一个汇编编译器","like_count":1},{"had_liked":false,"id":107549,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1561555993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856523289","product_id":100025201,"comment_content":"老师对同学们的所有留言和提问都认真看，然后回复。这一点真的是大赞👍👍👍👍<br>我每条留言都看了，我发现看了留言对文中的知识点是一个非常好的思考，留言也是精髓！","like_count":1},{"had_liked":false,"id":93542,"user_name":"苟范儿","can_delete":false,"product_type":"c1","uid":1364883,"ip_address":"","ucode":"B06B86765512FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/93/bef5a186.jpg","comment_is_top":false,"comment_ctime":1557491201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852458497","product_id":100025201,"comment_content":"平时编程用到一些 os、fmt、net 等之类的标准库，本来在大脑里都是零散无分类的.  今天看了老师的架构课，感觉梳理通顺了许多，可以在操作系统的六大子系统架构的角度看待这些标准库.","like_count":1},{"had_liked":false,"id":93522,"user_name":"宋文杰","can_delete":false,"product_type":"c1","uid":1034773,"ip_address":"","ucode":"2F5425B179F471","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ca/15/e3f9fb4e.jpg","comment_is_top":false,"comment_ctime":1557485483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852452779","product_id":100025201,"comment_content":"太干了  谢谢老师","like_count":1},{"had_liked":false,"id":93371,"user_name":"糖果屋","can_delete":false,"product_type":"c1","uid":1035908,"ip_address":"","ucode":"7D76B735CF0D0E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/84/d60ac57a.jpg","comment_is_top":false,"comment_ctime":1557458104,"is_pvip":false,"replies":[{"id":"33325","content":"其实函数调用也是需要cpu暂停当前工作的，和软中断性质一样。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557462504,"ip_address":"","comment_id":93371,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852425400","product_id":100025201,"comment_content":"操作系统通过系统调用提供与具体编程语言无关的编程接口。系统调用与系统版本有关，可能存在兼容性问题。<br>系统调用一般都是通过中断实现从用户态切换到内核态，要求CPU暂停当前的工作，去处理更重要的事情。系统调用更耗时。<br>中断有两个重要的属性，中断号和中断处理程序。中断号用来标识不同的中断，不同的中断具有不同的中断处理程序。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449601,"discussion_content":"其实函数调用也是需要cpu暂停当前工作的，和软中断性质一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557462504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93245,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1557447382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852414678","product_id":100025201,"comment_content":"打卡fighting 08","like_count":1},{"had_liked":false,"id":312304,"user_name":"看啥看看不懂","can_delete":false,"product_type":"c1","uid":1577400,"ip_address":"","ucode":"408AF9B8B72A76","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtaHMciakwNRfMqLRIDvOBhjYZllqXDYjXnGJibF7vCtiauUwvDA6F90RQ7TojgyWrgVvT0DfqhRScw/132","comment_is_top":false,"comment_ctime":1631722828,"is_pvip":false,"replies":[{"id":"113172","content":"是这样","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1631764835,"ip_address":"","comment_id":312304,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631722828","product_id":100025201,"comment_content":"原文提到：动态库本质上是实现了一个语言无关的代码复用机制。它是二进制级别的复用。<br>我理解是：无论是c语言，还是其他语言，都可以调用同一个动态库从而完成系统调用吗？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526931,"discussion_content":"是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631764835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285235,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1616679586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616679586","product_id":100025201,"comment_content":"软中断的能力是CPU提供的，操作系统在管理进程的时候依赖于 CPU的软中断能力。<br><br>当一个软件需要访问硬件资源的时候，操作系统提供了系统调用机制（软中断），将CPU的执行权限给了应用软件进程。<br><br>操作系统的内核提供了编程接口，这相当于是把CPU的软中断能力进一步的封装，以动态库的形式提供给应用软件。<br><br>编程接口是一种交互协议，软中断则是交互中为了更好的分配软件进程的执行权而设置的指令，操作系统内核把这种编程接口提供给应用软件，帮应用软件获得硬件资源。","like_count":0},{"had_liked":false,"id":282503,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1615283010,"is_pvip":true,"replies":[{"id":"102590","content":"可以这样理解","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1615306151,"ip_address":"","comment_id":282503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615283010","product_id":100025201,"comment_content":"虚拟内存 算不是虚拟化的鼻祖","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516767,"discussion_content":"可以这样理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615306151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244354,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1350446,"ip_address":"","ucode":"56E8AD725D9D1A","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/2e/7c749c3f.jpg","comment_is_top":false,"comment_ctime":1598491608,"is_pvip":false,"replies":[{"id":"90023","content":"barrier和wait group是完全不同的东西。和channel类似的东西倒的确有不少，包括pipe，但是如果真认真揪细节还是有差异的。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1598608313,"ip_address":"","comment_id":244354,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598491608","product_id":100025201,"comment_content":"标准库的那个表有些问题吧？<br>进程内，等待组，C语言pthread中有对应的屏障barrier。<br>进程内，消息传递，C语言POSIX中有对应的消息队列mqueue。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504563,"discussion_content":"barrier和wait group是完全不同的东西。和channel类似的东西倒的确有不少，包括pipe，但是如果真认真揪细节还是有差异的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598608313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218417,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1589799677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589799677","product_id":100025201,"comment_content":"编译器就像是 encoder，编译成机器可读的二进制码","like_count":0},{"had_liked":false,"id":182207,"user_name":"zhj","can_delete":false,"product_type":"c1","uid":1311772,"ip_address":"","ucode":"65B9E222D6E075","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/1c/b0c6c009.jpg","comment_is_top":false,"comment_ctime":1582728858,"is_pvip":false,"replies":[{"id":"70537","content":"是的，这就是利用漏洞提权","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1582734013,"ip_address":"","comment_id":182207,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1582728858","product_id":100025201,"comment_content":"一段指令是加载进来的时候就会赋予特定的cpu权限吗？按上面说法是代码指令本身没有特权一说，是执行的时候通过修改状态来决定cpu层级的，那也就是说即便用户态代码，如果可以恶意修改那个状态值，也是有可能执行特权指令的，是这样吗","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485253,"discussion_content":"是的，这就是利用漏洞提权","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582734013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311772,"avatar":"https://static001.geekbang.org/account/avatar/00/14/04/1c/b0c6c009.jpg","nickname":"zhj","note":"","ucode":"65B9E222D6E075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213491,"discussion_content":"所以可以理解为进行系统调用时里面一定有个重要的步骤是修改cpu层级状态值，同理系统调用返回时会有步骤进行cpu状态值的恢复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585098992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171586,"user_name":"Geek_gooy","can_delete":false,"product_type":"c1","uid":1504570,"ip_address":"","ucode":"FC168C31530040","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLluwfFjxlCmg9p2rJVicBdBo6OYpN0EAotUguias8wc78WtAEPHsWic0880CqGwyNypy2KZqVpYhGiag/132","comment_is_top":false,"comment_ctime":1578970297,"is_pvip":false,"replies":[{"id":"66545","content":"1、可以自己写，linux下为so，Windows下为dll，mac下为dylib；<br>2、动态库很多语言都可以做，比如 c&#47;c++、Go、C# 等；<br>3、看语言自己的选择。操作系统的动态库也是某个语言实现的，所以你也可以认为操作系统和语言（通常是c）共同提供了一些基础动态库。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1578985404,"ip_address":"","comment_id":171586,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578970297","product_id":100025201,"comment_content":"文章提到:<br>直接调用动态库的函数并进行适度的语义包装。大部分语言会选择这条路，而不是直接用系统调用。<br><br>理解为:<br>动态库是操作系统封装的，运行在用户态的无语言无关的程序。<br><br>疑问:<br>那设计编程语言的人能自己封装动态库吗？<br>动态库是使用什么语言编写并编译的？<br>是否当前的操作系统为所有内核函数一般都设计了对应的动态库函数，如此，语言设计者很少再使用系统调用？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481422,"discussion_content":"1、可以自己写，linux下为so，Windows下为dll，mac下为dylib；\n2、动态库很多语言都可以做，比如 c/c++、Go、C# 等；\n3、看语言自己的选择。操作系统的动态库也是某个语言实现的，所以你也可以认为操作系统和语言（通常是c）共同提供了一些基础动态库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578985404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160214,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1575892872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575892872","product_id":100025201,"comment_content":"虽然我也觉得老师很厉害，可是这些硬件…","like_count":0},{"had_liked":false,"id":129347,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1567092568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567092568","product_id":100025201,"comment_content":"硬中断是cpu每执行完一条指令都会检查一下的，这个是硬件来完成的。如果是组合逻辑来完成的，不消耗时间，如果是时序逻辑来完成，最多消耗一个时钟周期，这样整体延迟一个时钟周期，也可以认为不消耗时间。响应硬件中断一定是在一条指令执行完之后，不存在一条指令执行了一半去响应中断的情况。","like_count":0},{"had_liked":false,"id":119051,"user_name":"熊猫","can_delete":false,"product_type":"c1","uid":1080238,"ip_address":"","ucode":"23C85117A16BEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/ae/66ae403d.jpg","comment_is_top":false,"comment_ctime":1564493925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564493925","product_id":100025201,"comment_content":"生命的演变也是一种自举，😉","like_count":0},{"had_liked":false,"id":108737,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1561869052,"is_pvip":false,"replies":[{"id":"39375","content":"如果正在执行高优先级中断，说明在内核态。内核态下调用内核功能一般不需要用软中断。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1561895740,"ip_address":"","comment_id":108737,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561869052","product_id":100025201,"comment_content":"如果执行软中断时，有其它高优先级的中断在处理，应用程序会选择等待，还是报错？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456098,"discussion_content":"如果正在执行高优先级中断，说明在内核态。内核态下调用内核功能一般不需要用软中断。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561895740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105480,"user_name":"尼古拉斯涛子","can_delete":false,"product_type":"c1","uid":1291333,"ip_address":"","ucode":"85EF6021A4E963","user_header":"https://static001.geekbang.org/account/avatar/00/13/b4/45/3b9acb73.jpg","comment_is_top":false,"comment_ctime":1561012830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561012830","product_id":100025201,"comment_content":"许老师真的厉害， 关于编程语言和OS的关系讲的很明白，解答了我多年关于&lt;鸡生蛋还是蛋生鸡&gt;的疑惑。感谢！！！","like_count":0},{"had_liked":false,"id":102915,"user_name":"Lane","can_delete":false,"product_type":"c1","uid":1008257,"ip_address":"","ucode":"F70459D1BBD9F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","comment_is_top":false,"comment_ctime":1560328241,"is_pvip":true,"replies":[{"id":"37219","content":"对","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560333886,"ip_address":"","comment_id":102915,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560328241","product_id":100025201,"comment_content":"老师，我在mac上为linux编译go程序，就叫交叉编译？<br>GOOS=linux GOARCH=amd64 go build -o .&#47;main","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453646,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560333886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94059,"user_name":"RainFd","can_delete":false,"product_type":"c1","uid":1047378,"ip_address":"","ucode":"2EC37F5D29ADEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/52/97546bd1.jpg","comment_is_top":false,"comment_ctime":1557711678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557711678","product_id":100025201,"comment_content":"以前学硬件的时候还经常想软中断要怎么用来着_(:з」∠)_","like_count":0},{"had_liked":false,"id":93415,"user_name":"觉","can_delete":false,"product_type":"c1","uid":1503600,"ip_address":"","ucode":"95E85D30E92170","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/70/bca09d2d.jpg","comment_is_top":false,"comment_ctime":1557466978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557466978","product_id":100025201,"comment_content":"感恩大佬分享 随喜大佬","like_count":0}]}