{"id":97231,"title":"38 | 案例分析（一）：高性能限流器Guava RateLimiter","content":"<p>从今天开始，我们就进入案例分析模块了。 这个模块我们将分析四个经典的开源框架，看看它们是如何处理并发问题的，通过这四个案例的学习，相信你会对如何解决并发问题有个更深入的认识。</p><p>首先我们来看看<strong>Guava RateLimiter是如何解决高并发场景下的限流问题的</strong>。Guava是Google开源的Java类库，提供了一个工具类RateLimiter。我们先来看看RateLimiter的使用，让你对限流有个感官的印象。假设我们有一个线程池，它每秒只能处理两个任务，如果提交的任务过快，可能导致系统不稳定，这个时候就需要用到限流。</p><p>在下面的示例代码中，我们创建了一个流速为2个请求/秒的限流器，这里的流速该怎么理解呢？直观地看，2个请求/秒指的是每秒最多允许2个请求通过限流器，其实在Guava中，流速还有更深一层的意思：是一种匀速的概念，2个请求/秒等价于1个请求/500毫秒。</p><p>在向线程池提交任务之前，调用 <code>acquire()</code> 方法就能起到限流的作用。通过示例代码的执行结果，任务提交到线程池的时间间隔基本上稳定在500毫秒。</p><pre><code>//限流器流速：2个请求/秒\nRateLimiter limiter = \n  RateLimiter.create(2.0);\n//执行任务的线程池\nExecutorService es = Executors\n  .newFixedThreadPool(1);\n//记录上一次执行时间\nprev = System.nanoTime();\n//测试执行20次\nfor (int i=0; i&lt;20; i++){\n  //限流器限流\n  limiter.acquire();\n  //提交任务异步执行\n  es.execute(()-&gt;{\n    long cur=System.nanoTime();\n    //打印时间间隔：毫秒\n    System.out.println(\n      (cur-prev)/1000_000);\n    prev = cur;\n  });\n}\n\n输出结果：\n...\n500\n499\n499\n500\n499\n</code></pre><h2>经典限流算法：令牌桶算法</h2><p>Guava的限流器使用上还是很简单的，那它是如何实现的呢？Guava采用的是<strong>令牌桶算法</strong>，其<strong>核心是要想通过限流器，必须拿到令牌</strong>。也就是说，只要我们能够限制发放令牌的速率，那么就能控制流速了。令牌桶算法的详细描述如下：</p><!-- [[[read_end]]] --><ol>\n<li>令牌以固定的速率添加到令牌桶中，假设限流的速率是 r/秒，则令牌每 1/r 秒会添加一个；</li>\n<li>假设令牌桶的容量是 b ，如果令牌桶已满，则新的令牌会被丢弃；</li>\n<li>请求能够通过限流器的前提是令牌桶中有令牌。</li>\n</ol><p>这个算法中，限流的速率 r 还是比较容易理解的，但令牌桶的容量 b 该怎么理解呢？b 其实是burst的简写，意义是<strong>限流器允许的最大突发流量</strong>。比如b=10，而且令牌桶中的令牌已满，此时限流器允许10个请求同时通过限流器，当然只是突发流量而已，这10个请求会带走10个令牌，所以后续的流量只能按照速率 r 通过限流器。</p><p>令牌桶这个算法，如何用Java实现呢？很可能你的直觉会告诉你生产者-消费者模式：一个生产者线程定时向阻塞队列中添加令牌，而试图通过限流器的线程则作为消费者线程，只有从阻塞队列中获取到令牌，才允许通过限流器。</p><p>这个算法看上去非常完美，而且实现起来非常简单，如果并发量不大，这个实现并没有什么问题。可实际情况却是使用限流的场景大部分都是高并发场景，而且系统压力已经临近极限了，此时这个实现就有问题了。问题就出在定时器上，在高并发场景下，当系统压力已经临近极限的时候，定时器的精度误差会非常大，同时定时器本身会创建调度线程，也会对系统的性能产生影响。</p><p>那还有什么好的实现方式呢？当然有，Guava的实现就没有使用定时器，下面我们就来看看它是如何实现的。</p><h2>Guava如何实现令牌桶算法</h2><p>Guava实现令牌桶算法，用了一个很简单的办法，其关键是<strong>记录并动态计算下一令牌发放的时间</strong>。下面我们以一个最简单的场景来介绍该算法的执行过程。假设令牌桶的容量为 b=1，限流速率 r = 1个请求/秒，如下图所示，如果当前令牌桶中没有令牌，下一个令牌的发放时间是在第3秒，而在第2秒的时候有一个线程T1请求令牌，此时该如何处理呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/39/ce/391179821a55fc798c9c17a6991c1dce.png?wh=1142*478\" alt=\"\"></p><center><span class=\"reference\">线程T1请求令牌示意图</span></center><p>对于这个请求令牌的线程而言，很显然需要等待1秒，因为1秒以后（第3秒）它就能拿到令牌了。此时需要注意的是，下一个令牌发放的时间也要增加1秒，为什么呢？因为第3秒发放的令牌已经被线程T1预占了。处理之后如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/87/1a4069c830e18de087ba7f490aa78087.png?wh=1142*284\" alt=\"\"></p><center><span class=\"reference\">线程T1请求结束示意图</span></center><p>假设T1在预占了第3秒的令牌之后，马上又有一个线程T2请求令牌，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/2e/2cf695d0888a93e1e2d020d9514f5a2e.png?wh=1142*367\" alt=\"\"></p><center><span class=\"reference\">线程T2请求令牌示意图</span></center><p>很显然，由于下一个令牌产生的时间是第4秒，所以线程T2要等待两秒的时间，才能获取到令牌，同时由于T2预占了第4秒的令牌，所以下一令牌产生时间还要增加1秒，完全处理之后，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/f7/68c09a96049aacda7936c52b801c22f7.png?wh=1142*377\" alt=\"\"></p><center><span class=\"reference\">线程T2请求结束示意图</span></center><p>上面线程T1、T2都是在<strong>下一令牌产生时间之前</strong>请求令牌，如果线程在<strong>下一令牌产生时间之后</strong>请求令牌会如何呢？假设在线程T1请求令牌之后的5秒，也就是第7秒，线程T3请求令牌，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/5c/e3125d72eb3d84eabf6de6ab987e695c.png?wh=1142*342\" alt=\"\"></p><center><span class=\"reference\">线程T3请求令牌示意图</span></center><p>由于在第5秒已经产生了一个令牌，所以此时线程T3可以直接拿到令牌，而无需等待。在第7秒，实际上限流器能够产生3个令牌，第5、6、7秒各产生一个令牌。由于我们假设令牌桶的容量是1，所以第6、7秒产生的令牌就丢弃了，其实等价地你也可以认为是保留的第7秒的令牌，丢弃的第5、6秒的令牌，也就是说第7秒的令牌被线程T3占有了，于是下一令牌的的产生时间应该是第8秒，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/fc/baf159d05b2abf650839e29a2399a4fc.png?wh=1142*344\" alt=\"\"></p><center><span class=\"reference\">线程T3请求结束示意图</span></center><p>通过上面简要地分析，你会发现，我们<strong>只需要记录一个下一令牌产生的时间，并动态更新它，就能够轻松完成限流功能</strong>。我们可以将上面的这个算法代码化，示例代码如下所示，依然假设令牌桶的容量是1。关键是<strong>reserve()方法</strong>，这个方法会为请求令牌的线程预分配令牌，同时返回该线程能够获取令牌的时间。其实现逻辑就是上面提到的：如果线程请求令牌的时间在下一令牌产生时间之后，那么该线程立刻就能够获取令牌；反之，如果请求时间在下一令牌产生时间之前，那么该线程是在下一令牌产生的时间获取令牌。由于此时下一令牌已经被该线程预占，所以下一令牌产生的时间需要加上1秒。</p><pre><code>class SimpleLimiter {\n  //下一令牌产生时间\n  long next = System.nanoTime();\n  //发放令牌间隔：纳秒\n  long interval = 1000_000_000;\n  //预占令牌，返回能够获取令牌的时间\n  synchronized long reserve(long now){\n    //请求时间在下一令牌产生时间之后\n    //重新计算下一令牌产生时间\n    if (now &gt; next){\n      //将下一令牌产生时间重置为当前时间\n      next = now;\n    }\n    //能够获取令牌的时间\n    long at=next;\n    //设置下一令牌产生时间\n    next += interval;\n    //返回线程需要等待的时间\n    return Math.max(at, 0L);\n  }\n  //申请令牌\n  void acquire() {\n    //申请令牌时的时间\n    long now = System.nanoTime();\n    //预占令牌\n    long at=reserve(now);\n    long waitTime=max(at-now, 0);\n    //按照条件等待\n    if(waitTime &gt; 0) {\n      try {\n        TimeUnit.NANOSECONDS\n          .sleep(waitTime);\n      }catch(InterruptedException e){\n        e.printStackTrace();\n      }\n    }\n  }\n}\n</code></pre><p>如果令牌桶的容量大于1，又该如何处理呢？按照令牌桶算法，令牌要首先从令牌桶中出，所以我们需要按需计算令牌桶中的数量，当有线程请求令牌时，先从令牌桶中出。具体的代码实现如下所示。我们增加了一个<strong>resync()方法</strong>，在这个方法中，如果线程请求令牌的时间在下一令牌产生时间之后，会重新计算令牌桶中的令牌数，<strong>新产生的令牌的计算公式是：(now-next)/interval</strong>，你可对照上面的示意图来理解。reserve()方法中，则增加了先从令牌桶中出令牌的逻辑，不过需要注意的是，如果令牌是从令牌桶中出的，那么next就无需增加一个 interval 了。</p><pre><code>class SimpleLimiter {\n  //当前令牌桶中的令牌数量\n  long storedPermits = 0;\n  //令牌桶的容量\n  long maxPermits = 3;\n  //下一令牌产生时间\n  long next = System.nanoTime();\n  //发放令牌间隔：纳秒\n  long interval = 1000_000_000;\n  \n  //请求时间在下一令牌产生时间之后,则\n  // 1.重新计算令牌桶中的令牌数\n  // 2.将下一个令牌发放时间重置为当前时间\n  void resync(long now) {\n    if (now &gt; next) {\n      //新产生的令牌数\n      long newPermits=(now-next)/interval;\n      //新令牌增加到令牌桶\n      storedPermits=min(maxPermits, \n        storedPermits + newPermits);\n      //将下一个令牌发放时间重置为当前时间\n      next = now;\n    }\n  }\n  //预占令牌，返回能够获取令牌的时间\n  synchronized long reserve(long now){\n    resync(now);\n    //能够获取令牌的时间\n    long at = next;\n    //令牌桶中能提供的令牌\n    long fb=min(1, storedPermits);\n    //令牌净需求：首先减掉令牌桶中的令牌\n    long nr = 1 - fb;\n    //重新计算下一令牌产生时间\n    next = next + nr*interval;\n    //重新计算令牌桶中的令牌\n    this.storedPermits -= fb;\n    return at;\n  }\n  //申请令牌\n  void acquire() {\n    //申请令牌时的时间\n    long now = System.nanoTime();\n    //预占令牌\n    long at=reserve(now);\n    long waitTime=max(at-now, 0);\n    //按照条件等待\n    if(waitTime &gt; 0) {\n      try {\n        TimeUnit.NANOSECONDS\n          .sleep(waitTime);\n      }catch(InterruptedException e){\n        e.printStackTrace();\n      }\n    }\n  }\n}\n</code></pre><h2>总结</h2><p>经典的限流算法有两个，一个是<strong>令牌桶算法（Token Bucket）</strong>，另一个是<strong>漏桶算法（Leaky Bucket）</strong>。令牌桶算法是定时向令牌桶发送令牌，请求能够从令牌桶中拿到令牌，然后才能通过限流器；而漏桶算法里，请求就像水一样注入漏桶，漏桶会按照一定的速率自动将水漏掉，只有漏桶里还能注入水的时候，请求才能通过限流器。令牌桶算法和漏桶算法很像一个硬币的正反面，所以你可以参考令牌桶算法的实现来实现漏桶算法。</p><p>上面我们介绍了Guava是如何实现令牌桶算法的，我们的示例代码是对Guava RateLimiter的简化，Guava RateLimiter扩展了标准的令牌桶算法，比如还能支持预热功能。对于按需加载的缓存来说，预热后缓存能支持5万TPS的并发，但是在预热前5万TPS的并发直接就把缓存击垮了，所以如果需要给该缓存限流，限流器也需要支持预热功能，在初始阶段，限制的流速 r 很小，但是动态增长的。预热功能的实现非常复杂，Guava构建了一个积分函数来解决这个问题，如果你感兴趣，可以继续深入研究。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":122087,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1565281945,"is_pvip":false,"replies":[{"id":"44970","content":"👍条理清晰","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1565429276,"ip_address":"","comment_id":122087,"utype":1}],"discussion_count":6,"race_medal":0,"score":"254968352409","product_id":100023901,"comment_content":"re：为什么令牌是从令牌桶中出的，那么 next 就无需增加一个 interval？<br><br>next 变量的意思是下一个令牌的生成时间，可以理解为当前线程请求的令牌的生成时刻，如第一张图所示：线程 T1 的令牌的生成时刻是第三秒。<br><br>线程 T 请求时，存在三种场景：<br>1. 桶里有剩余令牌。<br>2. 刚创建令牌，线程同时请求。<br>3. 桶里无剩余令牌。<br><br>场景 2 可以想象成线程请求的同时令牌刚好生成，没来得及放入桶内就被线程 T 拿走了。因此将场景 2 和场景 3 合并成一种情况，那就是桶里没令牌。即线程请求时，桶里可分为有令牌和没令牌。<br><br>“桶里没令牌”，线程 T 需要等待；需要等待则意味着 now(线程 T 请求时刻) 小于等于 next(线程 T 所需的令牌的生成时刻)。这里可以想象一下线程 T 在苦苦等待令牌生成的场景，只要线程 T 等待那么久之后，就会被放行。放行这一刻令牌同时生成，立马被线程拿走，令牌没放入桶里。对应到代码就是 resync 方法没有进入 if 语句内。<br><br>“桶里有令牌”，线程 T 不需要等待。说明线程 T 对应的令牌已经早早生成，已在桶内。代码就是：now &gt; next（请求时刻大于对应令牌的生成时刻）。因此在分配令牌给线程之前，需要计算线程 T 迟到了多久，迟到的这段时间，有多少个令牌生成¹；然后放入桶内，满了则丢弃²；未来的线程的令牌在这个时刻已经生成放入桶内³（即 resync 方法的逻辑）。线程无需等待，所以不需要增加一个 interval 了。<br><br>角标分别对应 resync 方法内的代码：<br>¹: long newPermits=(now-next)&#47;interval;<br>²: storedPermits=min(maxPermits, <br>        storedPermits + newPermits);<br>³: next = now;","like_count":60,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462091,"discussion_content":"👍条理清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565429276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287247,"discussion_content":"为什么令牌是从令牌桶中出的，那么 next 就无需增加一个 interval？\nnext 需不需要增加一个 interval。和当前令牌桶的数量有关；注意下面俩种情况：\n1.当请求的线程请求到达后，令牌桶没有可用的令牌，也就是线程请求的时刻在最后一个令牌生产的时间之后。这种情况因为令牌都是当前时刻之前的，都过期了，所以需要等待先创建令牌。创建令牌和桶的最大令牌数有关，这里要清楚一点，桶中的令牌数，是从当前时刻往后算，最大能提前预计算放入几个，当前时刻之前的令牌，都算过期的，时间都过了，是无用的令牌，因为，线程线程是在当前时刻发起的。\n2. 如果当前线程请求的时候在下一个令牌next时间之前，为什么线程刚到，怎么会有后续的令牌呢，因为这种情况，就是上面分析的，会预先计算后续的令牌，这就是桶的令牌容量的问题。这个时候，有预先计算好的令牌，无需等待新建令牌的过程，直接拿来用就可，所以不涉及重新计算令牌的过程。也就是不会通过resync(now)方法重新计算，这个时候，由于桶中有令牌，这个有令牌是指令牌会在当前线程到达时刻之后陆续生产出来。而且不止一个。\n对应老师的原文：令牌从令牌桶中出的，那么 next 就无需增加 interval，意思就是令牌提前根据桶的容量计算好了，后续会自动生产出来。线程到来的时刻，因为后续的令牌已经被预先计算设置好的。只是等待它的到来。等来了。那么直接拿来，相当于从桶中直接拿来用(桶中的容量就代表预先计算好要到来的令牌个数)。这个的前体条件是当前线程的请求时刻，在next之前，也就是上面分析的第二点原因，线程只需要等带后续时刻最近生产出来的令牌直接用就行，无需增加interval。此时的next就是下一个可用的令牌生产的时间。\n而如果，线程过来的时候，桶中没有预先计算的令牌可用，也就是上面分析的第一点的原因，这个时候，需要重新计算后续生产几个令牌，这个计算依赖桶的令牌容量。计算好之后，当前线程会取计算好的令牌中的最先生产出来的拿来用，也就是距离请求线程之后最近的时刻生产出来的。这里要注意，因为在计算之前，next是当前线程到达时刻之前的那段时间中最后一个生产令牌的时间，这个令牌过期不可用，经过计算后，也就是新建令牌后，请求线程要等待新建第一个令牌的时刻到了之后，在拿来使用。而这个新建令牌的生产的时间，是之前的next增加一个 interval之后的时间。这种情况相当于，不是从桶中直接取的，因为桶中没有，需新建一个，拿一个，所以需要增加interval；而上面的情况，是桶中就有令牌，无需新建，不需要增加interval；\n这里注意，桶的容量，一定不要理解错误，这个容量是个动态的过程，可理解为预先计算几个令牌到来的时刻，这样根据容量一次性计算之后的几个令牌多来的时刻，可以避免以后每次都计算；\n线程来了之后，与之比较的令牌是即将生产出来的令牌的时刻。\n要细品则会个令牌的动态计算过程，和桶的容量。很容易产生误解。\n所以。令牌桶算法的核心是记录下一令牌产生的时间，并动态更新它，这个下一个令牌的生产时间是这个桶容量中的距离当前请求线程最近时刻的令牌生产时间，这个时间可能在请求线程到达之前，也可能在之后；\n在请求线程之前，那就需要新建令牌，并动态的更新next，也就是next要增加一个interval。\n在请求线程之后，说明桶中有令牌。并且这下一个令牌的生产时间在这个请求线程之后，无需增加interval。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593406697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897671,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","nickname":"kimoti","note":"","ucode":"0A78077408C2B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275327,"discussion_content":"高人","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590683284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006297,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5a/d9/e74791a9.jpg","nickname":"雪山飞狐","note":"","ucode":"EA965A6D287C32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211218,"discussion_content":"总结的真好，看完这个，本篇文章理解更深刻了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584808726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10567,"discussion_content":"学习了，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568296194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10617,"discussion_content":"客气老铁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568298380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":10567,"ip_address":""},"score":10617,"extra":""}]}]},{"had_liked":false,"id":104874,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1560861381,"is_pvip":false,"replies":[{"id":"38251","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1561076605,"ip_address":"","comment_id":104874,"utype":1}],"discussion_count":7,"race_medal":0,"score":"91755174597","product_id":100023901,"comment_content":"很精髓的就是reserve方法，我来试着稍微解释一下<br>首先肯定是计算令牌桶里面的令牌数量<br>然后取令牌桶中的令牌数量storedPermits 与当前的需要的令牌数量 1 做比较，大于等于 1，说明令牌桶至少有一个令牌，此时下一令牌的获取是不需要等待的，表现为 next 不需要变化；而当令牌桶中的令牌没有了即storedPermits等于 0 时，next 就会变化为下一个令牌的获取时间，注意 nr 的值变化","like_count":21,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454465,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561076605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372806,"discussion_content":"有个疑问，假如 storedPermits=3，now<next的情况下reserve应该返回now，因为storedPermits够，但是代码返回的是next，导致还要等待next-now的时间，是不是有问题呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620467824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1542037,"avatar":"https://static001.geekbang.org/account/avatar/00/17/87/95/cba0a896.jpg","nickname":"卢","note":"","ucode":"B6A9F41AEE348C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405743,"discussion_content":"我也认为不应该返回next","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634634679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":372806,"ip_address":""},"score":405743,"extra":""}]},{"author":{"id":1603420,"avatar":"https://static001.geekbang.org/account/avatar/00/18/77/5c/5d6fb47b.jpg","nickname":"小强（jacky）","note":"","ucode":"C6C26A2FE0F767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312316,"discussion_content":"maxPermits/next的变量线程之间存在依赖关系，这不是数据竞争吗？为啥这里没有加对应的锁？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602661088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45888,"discussion_content":"后一种情况，令牌桶中等于0，next会变为下一个令牌的时间，那不是每次请求令牌都会自动将next的值添加一个间隔时间了吗，在老师代码中是不是应该在添加间隔时间后，将storePermits值也要添加一个每秒限流数的大小值？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573094594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1318540,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","nickname":"花儿少年","note":"","ucode":"CFE4F64243673B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45956,"discussion_content":"讲道理就是这样子，假设，3秒一个令牌，t1获取时没有令牌，需要等3秒，t2来获取时，就是3+3，6秒，这个没毛病吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573103298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":45888,"ip_address":""},"score":45956,"extra":""}]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10564,"discussion_content":"学习了，感谢感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568296070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161319,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1576192120,"is_pvip":false,"replies":[{"id":"61499","content":"高并发场景下，CPU忙碌，大概率会出现就绪的线程被积压，对于定时放令牌的线程，其定时器会被大概率的延迟","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1576200386,"ip_address":"","comment_id":161319,"utype":1}],"discussion_count":4,"race_medal":0,"score":"78885603448","product_id":100023901,"comment_content":"有个疑问：高并发情况下单独一个线程维护一个队列放令牌，性能上扛不住，那么获取令牌时每次加锁去计算性能就可以抗的主？是根据什么依据来判断性能的呢？","like_count":18,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477689,"discussion_content":"高并发场景下，CPU忙碌，大概率会出现就绪的线程被积压，对于定时放令牌的线程，其定时器会被大概率的延迟","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576200386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301599,"discussion_content":"mark下，时间计算不会有问题，定时器会准时开启抢占cpu，抢不到大概率会延时","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598585013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107484,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","nickname":"小李讲源码","note":"","ucode":"2573037D7C82C8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548276,"discussion_content":"这里所谓的延迟，就是因为cpu的上下文切换，导致生成令牌的线程不会一直占用cpu，而导致的延迟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643108920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018071,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/d7/07f8bc6c.jpg","nickname":"sljoai","note":"","ucode":"FF88C4BA265DE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394497,"discussion_content":"这里的延迟是指延迟获取嘛？还是不太理解延迟的意义，是相对哪种场景来说的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631925488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98053,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1558884423,"is_pvip":true,"replies":[{"id":"35083","content":"限流器不需要释放操作，信号量没办法控制带时间范围的限流，只能用于非常简单的场景","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558918055,"ip_address":"","comment_id":98053,"utype":1}],"discussion_count":2,"race_medal":0,"score":"74573328455","product_id":100023901,"comment_content":"老师，请教一下，限流器和信号量为什么感觉一样的，那为什么2个还都存在？是因为业务场景不同吗？请老师解惑下","like_count":17,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451537,"discussion_content":"限流器不需要释放操作，信号量没办法控制带时间范围的限流，只能用于非常简单的场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558918055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10574,"discussion_content":"限流器不需要释放操作，信号量没办法控制带时间范围的限流，只能用于非常简单的场景。感谢老师回答，学习啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568296410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97941,"user_name":"zsh0103","can_delete":false,"product_type":"c1","uid":1326016,"ip_address":"","ucode":"3992AB4BD1A18A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epLhKkTgowm9PqUwP9k90DecpOU7HQ0IRuAp515kIonbfyqYm6ME7s2bmaPX0sSA14micZ2DAfLLibw/132","comment_is_top":false,"comment_ctime":1558847064,"is_pvip":false,"replies":[{"id":"35090","content":"按照令牌桶算法是这样的，所以b不能搞得太大","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558919261,"ip_address":"","comment_id":97941,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35918585432","product_id":100023901,"comment_content":"老师好，问个问题。文中代码b=3，r=1&#47;s时，如果在next之后同时来了3个请求，应该时都可以获得令牌的对吧。就是说这3个请求都可以执行。那岂不是违背了r=1&#47;s的限制吗。<br>","like_count":8,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451482,"discussion_content":"按照令牌桶算法是这样的，所以b不能搞得太大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558919261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100868,"user_name":"the geek","can_delete":false,"product_type":"c1","uid":1506723,"ip_address":"","ucode":"71DECBC814A539","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLz3icr3mGs5ib8FbSPQZ2ic3ib90mHkd1btQrmGacZjJxfYXrerIdaTxglKyCicFzLcEAb6deC2cWjE5Q/132","comment_is_top":false,"comment_ctime":1559658296,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"23034494776","product_id":100023901,"comment_content":"老师，当b&gt;1时的reserve方法写的有问题吧，long at = next;不应该是第一行，而应该在&#47;&#47; 重新计算下一令牌产生时间<br>    next = next + nr*interval;<br>这行代码之后吧","like_count":5,"discussions":[{"author":{"id":1331828,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","nickname":"Geek_bb89c3","note":"","ucode":"0F97B5B0F2DDD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186737,"discussion_content":"对的。如果在一开始返回的话，每次返回的时间都是now,这样如果桶中没有令牌也能够立刻获取到临牌而不用等待。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582710880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1448453,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1a/05/a0bebe6a.jpg","nickname":"forever","note":"","ucode":"F556A51B160C70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1331828,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","nickname":"Geek_bb89c3","note":"","ucode":"0F97B5B0F2DDD6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222619,"discussion_content":"老师的代码没问题，如果当前请求时间now在next时间前，就在next这里获得令牌。如果按照你的逻辑，重新计算下一次令牌产生时间next=next+nr*interval,把这个当作获得令牌时间，那么会多等待一个interval","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586163643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":186737,"ip_address":""},"score":222619,"extra":""},{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448453,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1a/05/a0bebe6a.jpg","nickname":"forever","note":"","ucode":"F556A51B160C70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372808,"discussion_content":"假如 storedPermits=3，now<next的情况下reserve应该返回now，因为storedPermits够，但是代码返回的是next，now在next前面就一定没令牌吗，不一定吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620468159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222619,"ip_address":""},"score":372808,"extra":""},{"author":{"id":2871387,"avatar":"","nickname":"堇业先锋","note":"","ucode":"AA19D387C955D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565406,"discussion_content":"令牌数充足时：next+=nr*interval执行后next不变。因为now为时间，所以resync()的参数now非递减，因此在resync()乃至其他方法中now都始终大于或等于next，所以在令牌数充足的前提下不可能出现now在next的前面这种情况。\n令牌数不充足时：next+=nr*interval执行后next改变。此时因为令牌数不足，且now到next之间生成的所有令牌已经被其他线程预约，所以即使now在next前面，也无法通过限流器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650460817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":372808,"ip_address":""},"score":565406,"extra":""}]},{"author":{"id":1043293,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/eb/5d/2467ad6c.jpg","nickname":"木心","note":"","ucode":"538A3B9B214BF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51798,"discussion_content":"是的，不然会超一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573952949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100725,"user_name":"辣椒","can_delete":false,"product_type":"c1","uid":1330376,"ip_address":"","ucode":"85C62DE976C6A5","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/c8/bed1e08a.jpg","comment_is_top":false,"comment_ctime":1559627681,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"23034464161","product_id":100023901,"comment_content":"&#47;&#47; 令牌净需求：首先减掉令牌桶中的令牌<br>    \t\tlong nr = 1 - fb;<br>    \t\t&#47;&#47; 重新计算下一令牌产生时间<br>    \t\tnext = next + nr*interval;<br>    \t\t&#47;&#47; 重新计算令牌桶中的令牌<br>    \t\tthis.storedPermits -= fb;<br><br>老师这儿没有看懂，能不能解释一下？","like_count":5,"discussions":[{"author":{"id":1610208,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2xoGmvlQ9qfSibVpPJyyaEiaibtVdbp1ibiboW174W4kHXLatN5E22s5cialsdc7xPTf4ZC03icFGVlfAV3MmicPt4ybkg/132","nickname":"lis","note":"","ucode":"B7FBED7F2555DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572254,"discussion_content":"当桶中没有令牌，即fb=0时，next = next + interval，计算下一个令牌生成时间；当桶中有令牌，即fb=1，next = next；符合预期逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652679048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1570088,"avatar":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","nickname":"deepz","note":"","ucode":"4BD23A44CDB384","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7007,"discussion_content":"很眼熟的老哥 前来打卡～😎 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567251629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1330376,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4c/c8/bed1e08a.jpg","nickname":"辣椒","note":"","ucode":"85C62DE976C6A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1570088,"avatar":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","nickname":"deepz","note":"","ucode":"4BD23A44CDB384","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":7016,"discussion_content":"你在哪个技术群？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567265565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7007,"ip_address":""},"score":7016,"extra":""},{"author":{"id":1570088,"avatar":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","nickname":"deepz","note":"","ucode":"4BD23A44CDB384","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1330376,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4c/c8/bed1e08a.jpg","nickname":"辣椒","note":"","ucode":"85C62DE976C6A5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7096,"discussion_content":"哈哈，老哥你还经常回答我问题呢，Spring技术交流群🤪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567383774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7016,"ip_address":""},"score":7096,"extra":""}]},{"author":{"id":1254493,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","nickname":"听雨","note":"","ucode":"252754F9FCFF0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5850,"discussion_content":"老哥，我好像在群里见过你呀，spring那个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566485413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1330376,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4c/c8/bed1e08a.jpg","nickname":"辣椒","note":"","ucode":"85C62DE976C6A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254493,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","nickname":"听雨","note":"","ucode":"252754F9FCFF0C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6101,"discussion_content":"我一般在spring技术交流群里，你也是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566689613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5850,"ip_address":""},"score":6101,"extra":""},{"author":{"id":1254493,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","nickname":"听雨","note":"","ucode":"252754F9FCFF0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330376,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4c/c8/bed1e08a.jpg","nickname":"辣椒","note":"","ucode":"85C62DE976C6A5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6154,"discussion_content":"是的，不过我是潜水党😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566728812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6101,"ip_address":""},"score":6154,"extra":""}]},{"author":{"id":1105828,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/a4/c28050e2.jpg","nickname":"什么","note":"","ucode":"BAFAF0BAABA57F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2694,"discussion_content":"桶中没有令牌时，需要更新下一次令牌的产生时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563866409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1330376,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4c/c8/bed1e08a.jpg","nickname":"辣椒","note":"","ucode":"85C62DE976C6A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1105828,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/a4/c28050e2.jpg","nickname":"什么","note":"","ucode":"BAFAF0BAABA57F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7018,"discussion_content":"主要是没看懂上面为什么1-fb，多看两次憧了，代码有点技巧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567265639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2694,"ip_address":""},"score":7018,"extra":""}]},{"author":{"id":1107117,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e4/ad/c2e3e2fe.jpg","nickname":"wen","note":"","ucode":"D8EDA076086F0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":890,"discussion_content":"我也有点疑问~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562139315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99451,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1559217360,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23034053840","product_id":100023901,"comment_content":"long interval = 1000_000_000;<br>这是什么写法","like_count":5,"discussions":[{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4284,"discussion_content":"java 7 的新特性，在数值中加入下划线，让数值对人来说更容易读。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1565274455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2463155,"avatar":"https://static001.geekbang.org/account/avatar/00/25/95/b3/2e8f6717.jpg","nickname":"夜星","note":"","ucode":"29CC5992E3587A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379320,"discussion_content":"更具体的使用及避坑可参考：\nhttps://blog.csdn.net/cunchi4221/article/details/107476992","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623828297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209415,"user_name":"侧耳倾听","can_delete":false,"product_type":"c1","uid":1512642,"ip_address":"","ucode":"5BF2A2440B54F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","comment_is_top":false,"comment_ctime":1587547198,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18767416382","product_id":100023901,"comment_content":"时间那个其实就是当前请求时间超过上次令牌的取得时间，我就发令牌，令牌满了就不发只取，有空间了继续发，总之就是一秒一个，通过时间差算出，来一个请求就算一次时间，没必要通过定时器去实现","like_count":4},{"had_liked":false,"id":127777,"user_name":"刘鸿博","can_delete":false,"product_type":"c1","uid":1222028,"ip_address":"","ucode":"A403F06AF1BAB2","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/8c/97b2f2ba.jpg","comment_is_top":false,"comment_ctime":1566791461,"is_pvip":false,"replies":[{"id":"47361","content":"示例代码只是为了更容易理解，实际应用还是要参考guava的实现","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1566794265,"ip_address":"","comment_id":127777,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18746660645","product_id":100023901,"comment_content":"newPermits, storePermits, fb, nr 都应该是double, 而不是long. ","like_count":4,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464652,"discussion_content":"示例代码只是为了更容易理解，实际应用还是要参考guava的实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566794265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070165,"avatar":"https://static001.geekbang.org/account/avatar/00/10/54/55/f686c2ed.jpg","nickname":"大象佩奇","note":"","ucode":"EAFB4FA3B9CFEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13503,"discussion_content":"感觉浅显易懂才更应该用double，用long的话，取整操作会浪费掉非整令牌","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568681280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97986,"user_name":"爱吃回锅肉的瘦子","can_delete":false,"product_type":"c1","uid":1233867,"ip_address":"","ucode":"24DBDDC62B2276","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/cb/f8157ad8.jpg","comment_is_top":false,"comment_ctime":1558860742,"is_pvip":false,"replies":[{"id":"35086","content":"能把为什么用的是那个积分函数，而不是用其他积分函数讲清楚的，应该是比较好的。最好是看guava的代码注视，写的非常详细。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558918823,"ip_address":"","comment_id":97986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18738729926","product_id":100023901,"comment_content":"老师，有没什么资料推荐关于guava预热功能呢？主要网上资料太繁杂，不知道要如何甄别哪些是比较经典的","like_count":4,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451502,"discussion_content":"能把为什么用的是那个积分函数，而不是用其他积分函数讲清楚的，应该是比较好的。最好是看guava的代码注视，写的非常详细。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558918823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97656,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1558744292,"is_pvip":false,"replies":[{"id":"34943","content":"最好还是找个互联网企业，有些问题只有在很高的并发压力下才会爆发。不过技术没有互联网之分，只要基础牢，成长会很快。多看基础性的东西，一定带着问题去看。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558786803,"ip_address":"","comment_id":97656,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18738613476","product_id":100023901,"comment_content":"还有就是老师我问一下因为我不是在互联网公司工作接触高并发场景少，我又喜欢学习研究提高自己，是不是得多看多练，实战","like_count":4,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451364,"discussion_content":"最好还是找个互联网企业，有些问题只有在很高的并发压力下才会爆发。不过技术没有互联网之分，只要基础牢，成长会很快。多看基础性的东西，一定带着问题去看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558786803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253244,"user_name":"小强（jacky）","can_delete":false,"product_type":"c1","uid":1603420,"ip_address":"","ucode":"C6C26A2FE0F767","user_header":"https://static001.geekbang.org/account/avatar/00/18/77/5c/5d6fb47b.jpg","comment_is_top":false,"comment_ctime":1602661496,"is_pvip":false,"replies":[{"id":"92536","content":"主要是通过synchronized关键字搞的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1602681863,"ip_address":"","comment_id":253244,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14487563384","product_id":100023901,"comment_content":"老师请教个问题，maxPermits&#47;next 的变量在程序里面，不同线程之间存在依赖关系，这不是数据竞争吗？为啥这里没有加对应的锁？","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507018,"discussion_content":"主要是通过synchronized关键字搞的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602681863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97843,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1558792846,"is_pvip":false,"replies":[{"id":"35087","content":"何必难为自己呢，不讲了😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558918884,"ip_address":"","comment_id":97843,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14443694734","product_id":100023901,"comment_content":"很精彩！老师应该去讲数据结构与算法:)","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451448,"discussion_content":"何必难为自己呢，不讲了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558918884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232334,"avatar":"","nickname":"13761642169","note":"","ucode":"68137695FC2120","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48731,"discussion_content":"老师有什么公众号 或者博客之类的嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573522006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309734,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1630315665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10220250257","product_id":100023901,"comment_content":"http:&#47;&#47;ifeve.com&#47;guava-ratelimiter&#47;<br>RateLimiter的文档翻译，mark一下","like_count":2},{"had_liked":false,"id":168946,"user_name":"Happy","can_delete":false,"product_type":"c1","uid":1281479,"ip_address":"","ucode":"A19C5ECF0AE5FD","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/c7/d66952bc.jpg","comment_is_top":false,"comment_ctime":1578222721,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10168157313","product_id":100023901,"comment_content":"老师，经过单元测试后，个人感觉 resync 方法有bug。resync 的功能仅仅是将时间转换为令牌的操作，并更新下一次产生令牌的时间。不消耗令牌。<br>resync 方法中 &#47;&#47;新产生的令牌数<br>long newPermits = (now - next) &#47; interval; 这一步中，假如 now - next 为 1.9 秒，interval 为1秒，那么除法后，会将 0.9 秒丢弃，长期这种操作，会导致错误越来越多。我这边做了一个补偿操作：<br>long diff = (now - next) % interval;<br> &#47;&#47; 将下一个令牌发放时间重置为当前时间<br>next = now - diff;<br><br>单元测试在 https:&#47;&#47;github.com&#47;1996fanrui&#47;fanrui-learning&#47;blob&#47;755cb85bfc84981ba3a0309cc4fee91035e7ee25&#47;module-juc&#47;src&#47;test&#47;java&#47;com&#47;dream&#47;juc&#47;ratelimiter&#47;RateLimiterTest.java<br><br>虽然课程早就结束了，但还是非常期待老师的反馈。","like_count":2,"discussions":[{"author":{"id":1281479,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8d/c7/d66952bc.jpg","nickname":"Happy","note":"","ucode":"A19C5ECF0AE5FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":119317,"discussion_content":"之前没看完所有评论，其他评论里说的换成double类型也可以解决这个问题😂","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578226441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102461,"user_name":"speedy9","can_delete":false,"product_type":"c1","uid":1196256,"ip_address":"","ucode":"558A338D54626E","user_header":"https://static001.geekbang.org/account/avatar/00/12/40/e0/2f1816a8.jpg","comment_is_top":false,"comment_ctime":1560225160,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10150159752","product_id":100023901,"comment_content":"老师，前一个桶大小为1的代码是不是写错了，&#47;&#47; 返回线程需要等待的时间 应该是return Math.max(at-now,0)吧<br>","like_count":2,"discussions":[{"author":{"id":1335293,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKR3ibELhjgVicCNShZCBwvaDxibnzibggG4wUzVkS2mkDxUBZyIs87nDEdJ7PiahJBVoZcuhQ84RxAziag/132","nickname":"周治慧","note":"","ucode":"7D56C4E66BEE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":169642,"discussion_content":"返回的不是线程需要等待的时间,返回的是当前线程什么时候能获取到令牌的时间;自己拿到时间后跟now比较 at-now才是最后等待时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581638637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204628,"avatar":"https://static001.geekbang.org/account/avatar/00/12/61/94/713b38ef.jpg","nickname":"小和尚笨南北","note":"","ucode":"17C9BBB6DD25D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8813,"discussion_content":"往后看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568073456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97700,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1558750977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148685569","product_id":100023901,"comment_content":"桶容量为1的时候，我能理解。但是桶容量为多个的时候，就不理解了，比如<br>&#47;&#47; 新产生的令牌数<br>      long newPermits=(now-next)&#47;interval;<br>这句，不应该1秒生成桶的总容量吗？假设now为2，next为1。interval也为1。那么一个周期也就产生一个令牌啊？","like_count":2},{"had_liked":false,"id":97669,"user_name":"遇见阳光","can_delete":false,"product_type":"c1","uid":1203576,"ip_address":"","ucode":"378E5D37B3CD0E","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/78/f011d586.jpg","comment_is_top":false,"comment_ctime":1558746012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148680604","product_id":100023901,"comment_content":"RateLimiter这个限流器和juc包的信号量有啥区别？","like_count":2},{"had_liked":false,"id":302685,"user_name":"SnowsonZ","can_delete":false,"product_type":"c1","uid":1446972,"ip_address":"","ucode":"5AF76D55CCDC8F","user_header":"https://static001.geekbang.org/account/avatar/00/16/14/3c/d6be29f3.jpg","comment_is_top":false,"comment_ctime":1626332547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5921299843","product_id":100023901,"comment_content":"”问题就出在定时器上，在高并发场景下，当系统压力已经临近极限的时候，定时器的精度误差会非常大，同时定时器本身会创建调度线程，也会对系统的性能产生影响“<br><br>生产者消费者和定时器的关系是什么？","like_count":1},{"had_liked":false,"id":302147,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1626098143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5921065439","product_id":100023901,"comment_content":"不错<br>","like_count":1},{"had_liked":false,"id":291761,"user_name":"时光守护者-基兰","can_delete":false,"product_type":"c1","uid":1554995,"ip_address":"","ucode":"F0B0887B1979D2","user_header":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","comment_is_top":false,"comment_ctime":1620467809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5915435105","product_id":100023901,"comment_content":"有个疑问，假如 storedPermits=3，now&lt;next的情况下reserve应该返回now，因为storedPermits够，但是代码返回的是next，导致还要等待next-now的时间，是不是有问题呢？","like_count":1},{"had_liked":false,"id":260638,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1605076074,"is_pvip":false,"replies":[{"id":"94674","content":"我在我在������","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1605094275,"ip_address":"","comment_id":260638,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5900043370","product_id":100023901,"comment_content":"不知道课程结束后，老师还会出来答疑不？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509253,"discussion_content":"我在我在������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605094275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133460,"user_name":"一个慢慢爬行的普通人","can_delete":false,"product_type":"c1","uid":1193589,"ip_address":"","ucode":"D38C25E119BCD7","user_header":"https://static001.geekbang.org/account/avatar/00/12/36/75/e346e04e.jpg","comment_is_top":false,"comment_ctime":1568584887,"is_pvip":false,"replies":[{"id":"51314","content":"一个例子是，恶意攻击导致正常的请求被拒绝。一般来讲系统到达极限后会出各种意料之外的问题","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568634985,"ip_address":"","comment_id":133460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5863552183","product_id":100023901,"comment_content":"老师，我刚刚应该是想错了，线程池任务提交频繁是不是导致线程池存储任务队列不断扩大，从而可能会导致系统不稳定，但是这方面线程池也可以用有界队列来控制，所以不太清楚是什么能够导致系统不稳定","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467395,"discussion_content":"一个例子是，恶意攻击导致正常的请求被拒绝。一般来讲系统到达极限后会出各种意料之外的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568634985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124576,"user_name":"韩大","can_delete":false,"product_type":"c1","uid":1198440,"ip_address":"","ucode":"998B64DD552C8D","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/68/a05fb728.jpg","comment_is_top":false,"comment_ctime":1565923019,"is_pvip":false,"replies":[{"id":"52712","content":"会，限流主要是保护后端不死，慢总比死了好","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1569668388,"ip_address":"","comment_id":124576,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860890315","product_id":100023901,"comment_content":"guava的ratelimit好像是阻塞的，而不是抛弃请求，这样会不会导致用户响应时间过长的问题？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463232,"discussion_content":"会，限流主要是保护后端不死，慢总比死了好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569668388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348802,"user_name":"刘颜","can_delete":false,"product_type":"c1","uid":1971360,"ip_address":"","ucode":"FD3B9C7338B74C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/14/a0/4c315270.jpg","comment_is_top":false,"comment_ctime":1655424623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655424623","product_id":100023901,"comment_content":"感觉那个nr是神之一手","like_count":0},{"had_liked":false,"id":313783,"user_name":"一一","can_delete":false,"product_type":"c1","uid":1930889,"ip_address":"","ucode":"F96CA1E8F5806A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/76/89/3b15e9e6.jpg","comment_is_top":false,"comment_ctime":1632664189,"is_pvip":false,"replies":[{"id":"113648","content":"即便是就绪状态的线程，也不一定马上有机会被调度到cpu上执行，线程多，计算密集型，被调度执行的延迟越大","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1632745173,"ip_address":"","comment_id":313783,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632664189","product_id":100023901,"comment_content":"老师你好，请问在高并发场景下定时器与线程睡眠的差距是怎样的？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527469,"discussion_content":"即便是就绪状态的线程，也不一定马上有机会被调度到cpu上执行，线程多，计算密集型，被调度执行的延迟越大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632745173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286732,"user_name":"Geek_ac4080","can_delete":false,"product_type":"c1","uid":1526428,"ip_address":"","ucode":"E2C480962E6CEB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epMicvN0PDCMibmBvwAyoScCjjgfLBWaQwGic9ialXObicxKib9X0T0gx02gL4jqvibEr1FRzMaiaicN8cgEBg/132","comment_is_top":false,"comment_ctime":1617532336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617532336","product_id":100023901,"comment_content":"&#47;&#47;令牌桶中能提供的令牌    <br>long fb=min(1, storedPermits);    <br>&#47;&#47;令牌净需求：首先减掉令牌桶中的令牌    <br>long nr = 1 - fb;    <br>&#47;&#47;重新计算下一令牌产生时间    <br>next = next + nr*interval;    <br>&#47;&#47;重新计算令牌桶中的令牌    <br>this.storedPermits -= fb;<br>老师，这里好像有点问题，如果storedPermits=1，这里并不会更新next，下一个请求进来时的时间是肯定大于next的，不会进入等待","like_count":0},{"had_liked":false,"id":272362,"user_name":"LQS  KF","can_delete":false,"product_type":"c1","uid":1364737,"ip_address":"","ucode":"3C0A07A8220094","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/01/716d45b6.jpg","comment_is_top":false,"comment_ctime":1610069378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610069378","product_id":100023901,"comment_content":"我查看RateLimiter源码的时候，发现我们RateLimiter#reserveAndGetWaitLength()方法是加了互斥锁的，这样resync()的时候是一定会比当前的 &#39;下一次令牌获取时间(RateLimiter#nextFreeTicketMicros)大的 &#39; 。所以只会走老师图例上 now &gt; next的流程是吗？","like_count":0},{"had_liked":false,"id":270606,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1609169360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609169360","product_id":100023901,"comment_content":"本地实现了SimpleRateLimiter的第一个版本（桶的数量为1的）。第二个想实现时，思想已经飘起来了。休息下，下回再来","like_count":0},{"had_liked":false,"id":230471,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1593396260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593396260","product_id":100023901,"comment_content":"reserve（）方法返回结果，return Math.max(at, 0L);。这句的注释不太准确，应该返回获取令牌的时间，reserve（）方法的注释是正确的，只是返回语句这个注释，容易让人误解。其实返回能获取令牌的时间，就俩种，一是请求时间在令牌产生时间之后，那无需等待，返回请求时间，如果请求时间在令牌产生时间之前，返回令牌的产生时间。这样的话，根据reserve（）方法返回的能获取令牌的时间和当前请求线程的时间，求个差值，就是线程需要等待的时间。如果是在令牌产生之后，请求线程，那这个差值就是0，无须等待，如果这个差值大于0，是请求线程在发生令牌之前，必然要等待令牌发生才能执行","like_count":0},{"had_liked":false,"id":224879,"user_name":"Just","can_delete":false,"product_type":"c1","uid":2022626,"ip_address":"","ucode":"35FA6917DE1D04","user_header":"https://static001.geekbang.org/account/avatar/00/1e/dc/e2/a3abd320.jpg","comment_is_top":false,"comment_ctime":1591582343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591582343","product_id":100023901,"comment_content":"  看了好几遍；<br>   1） if (now &gt; next) {      &#47;&#47;新产生的令牌数      long newPermits=(now-next)&#47;interval;      &#47;&#47;新令牌增加到令牌桶      storedPermits=min(maxPermits,         storedPermits + newPermits);      &#47;&#47;将下一个令牌发放时间重置为当前时间      next = now;    }  这个我更愿意理解成重新计算这段时间内桶中可用令牌的数量<br>2） {  long at = next;    &#47;&#47;令牌桶中能提供的令牌    long fb=min(1, storedPermits);    &#47;&#47;令牌净需求：首先减掉令牌桶中的令牌    long nr = 1 - fb;    &#47;&#47;重新计算下一令牌产生时间    next = next + nr*interval;    &#47;&#47;重新计算令牌桶中的令牌    this.storedPermits -= fb;    return at;}这段代码是不管now是否大于next，都会执行的，同时每次消耗一个令牌，如果同时没有的话，都会重新生成next时间，","like_count":0},{"had_liked":false,"id":222120,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1590680167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590680167","product_id":100023901,"comment_content":"漏桶算法比较好理解，请求好比是水往一个漏斗里注水，漏斗这个工具天然就实现了限流。因为漏斗下开口很小，所以水只能慢慢往下漏。如果倒水的速度太快那么漏斗就来不及漏，漏斗里的水会溢出来。","like_count":0},{"had_liked":false,"id":210307,"user_name":"白","can_delete":false,"product_type":"c1","uid":1086829,"ip_address":"","ucode":"B7790059DD43B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/95/6d/bc01fdf7.jpg","comment_is_top":false,"comment_ctime":1587717890,"is_pvip":false,"replies":[{"id":"78691","content":"1秒10个，等价于100毫秒1个","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1588032548,"ip_address":"","comment_id":210307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587717890","product_id":100023901,"comment_content":"令牌桶的平滑特性这里怎么体现呢？<br>比如1秒钟10个令牌这个算法里会在第一毫秒耗尽，而不是平滑的分散在1秒里吧？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492999,"discussion_content":"1秒10个，等价于100毫秒1个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588032548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199830,"user_name":"😜哈哈","can_delete":false,"product_type":"c1","uid":1069001,"ip_address":"","ucode":"1FF58FB3A91135","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/c9/88837387.jpg","comment_is_top":false,"comment_ctime":1585496661,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1585496661","product_id":100023901,"comment_content":"基于滑动窗口限流","like_count":0,"discussions":[{"author":{"id":1448453,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1a/05/a0bebe6a.jpg","nickname":"forever","note":"","ucode":"F556A51B160C70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222622,"discussion_content":"一起学啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586163977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183621,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1583078796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583078796","product_id":100023901,"comment_content":"老师 有点问题 麻烦您解答下<br>就是  令牌假设每秒一个,那么第一个是第1s,第二个是第2s，第三个是第3s。。<br>假如第1.2s一个线程获取了 ,这时候第1.4s又来个线程获取,1.4s的线程应该是第2s拿到，但是按您代码中的实现应该是2.4s拿到第二个令牌,是这样吗?","like_count":0},{"had_liked":false,"id":170212,"user_name":"卖火柴的托儿索","can_delete":false,"product_type":"c1","uid":1451295,"ip_address":"","ucode":"A9C7412E75DA82","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/1f/8e304ec0.jpg","comment_is_top":false,"comment_ctime":1578550780,"is_pvip":false,"replies":[{"id":"66614","content":"PPT😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1579014036,"ip_address":"","comment_id":170212,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578550780","product_id":100023901,"comment_content":"老师，请问您用的是什么画图工具？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480882,"discussion_content":"PPT😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579014036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148838,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1573093575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573093575","product_id":100023901,"comment_content":"令牌桶原理：<br>      从令牌桶中获取令牌，如果令牌数量大于1，则直接获取，如果令牌桶中已经没有令牌，则等待时间加一个间隔时间，同时令牌桶中新增一批令牌（数量为每秒限流数）。<br>令牌桶实现：<br>      通过acquire获取令牌时，将当前时间传递到方法中，返回一个获取令牌时间，如果时间与当前时间相同，说明令牌时从令牌桶中直接获取的，如果返回一个大于当前时间的值，则等待一段时间（返回值-当前时间）。<br>       在获取令牌时间时，具体实现代码很优秀，先赞一个！如果当前时间大于上次令牌时间，则将上次令牌时间设置为当前时间，同时令牌桶中根据限流率添加一批令牌，要保证令牌总数不大于最大值。然后再从令牌桶中取一个令牌返回。","like_count":0},{"had_liked":false,"id":142227,"user_name":"斑斑驳驳","can_delete":false,"product_type":"c1","uid":1122057,"ip_address":"","ucode":"ADFC607C549620","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/09/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1571314923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571314923","product_id":100023901,"comment_content":"容量为1的 synchronized long reserve(long now) 这个方法中的 Math.max（at，0）没有意义，at一直大于0","like_count":0},{"had_liked":false,"id":134286,"user_name":"静海","can_delete":false,"product_type":"c1","uid":1342563,"ip_address":"","ucode":"28A5E81CDC5C04","user_header":"https://static001.geekbang.org/account/avatar/00/14/7c/63/115a4b23.jpg","comment_is_top":false,"comment_ctime":1568794230,"is_pvip":false,"replies":[{"id":"51657","content":"没这么做过，应该是做不了的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568896704,"ip_address":"","comment_id":134286,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1568794230","product_id":100023901,"comment_content":"老师，请教下接收rocketmq消息，能否采用限流器Guava RateLimiter进行限流? 要怎么做?","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467691,"discussion_content":"没这么做过，应该是做不了的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568896704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1566569,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e7/69/0c426b52.jpg","nickname":"刘易宁","note":"","ucode":"EE337683D08B9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":97757,"discussion_content":"以前实现过接受kafka消息，用RateLimiter进行限流，是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577114880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1342563,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7c/63/115a4b23.jpg","nickname":"静海","note":"","ucode":"28A5E81CDC5C04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1566569,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e7/69/0c426b52.jpg","nickname":"刘易宁","note":"","ucode":"EE337683D08B9A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201565,"discussion_content":"朋友，代码能贴出来看下嘛？！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583808984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":97757,"ip_address":""},"score":201565,"extra":""}]}]},{"had_liked":false,"id":116916,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1563938166,"is_pvip":false,"replies":[{"id":"42786","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1563960483,"ip_address":"","comment_id":116916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563938166","product_id":100023901,"comment_content":"限流器老师讲的浅显易懂，发现有些同学有些疑问，试着解答一下。<br><br>1. 是否会有并发问题？<br>并发问题应该是不存在的，限流器的竞争资源是令牌（permit），实现中令牌是动态计算出来的，增加了并发访问控制，synchronized reverse()，这里的同步仅仅是加在了预占令牌上，非常好的设计<br>2. maxPermits 大于1的代码没看懂？<br>分了两种情况，下一个令牌产生时间落后于当前时间时，需要重置下一次令牌产生时间和计算令牌桶中可用的令牌；然后，所有的请求都按照相同的令牌获取算法，代码中在计算能获得令牌的时间时，又分了两种情况，令牌桶中有令牌和没有令牌，没有令牌的时候需要计算下一次产生令牌的时间，有令牌的时候需要减去令牌桶中的令牌，这就是那几行比较晦涩一些代码要做的事情<br><br>自己的浅显理解","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459730,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563960483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116257,"user_name":"道","can_delete":false,"product_type":"c1","uid":1324160,"ip_address":"","ucode":"851A0AD751D317","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/80/30e9ae41.jpg","comment_is_top":false,"comment_ctime":1563808441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563808441","product_id":100023901,"comment_content":"令牌桶容量为一讲的很清楚，，容量大于一讲的太模糊。讲授什么东西，不需要虚无缥缈，最好脚踏实地，接地气","like_count":0},{"had_liked":false,"id":112155,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1562675881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562675881","product_id":100023901,"comment_content":"好厉害啊 积分函数都用上了","like_count":0},{"had_liked":false,"id":109396,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1562029749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562029749","product_id":100023901,"comment_content":"预期时间-当前时间=等待时间","like_count":0},{"had_liked":false,"id":100996,"user_name":"加油鸭","can_delete":false,"product_type":"c1","uid":1396988,"ip_address":"","ucode":"2735762668FD26","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/fc/0a31343c.jpg","comment_is_top":false,"comment_ctime":1559699138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559699138","product_id":100023901,"comment_content":"这节是我觉得对我而言，最有用的一节","like_count":0},{"had_liked":false,"id":99482,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1559226725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559226725","product_id":100023901,"comment_content":"public static RateLimiter create(double permitsPerSecond) {...}  创建时候并没有 burst参数啊。请问在哪类里设置的","like_count":0},{"had_liked":false,"id":99454,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1559219426,"is_pvip":false,"replies":[{"id":"35736","content":"burst参数控制","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559226540,"ip_address":"","comment_id":99454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559219426","product_id":100023901,"comment_content":"guava ratelimiter 容量上限在哪个参数中体现或者在哪设置这个。比如我们设置的流速是 2&#47;s,当100s之内都没有请求到来，是不是会往令牌桶中持续放入200个令牌， 而这这时候突然来了一波300个并发请求，是不是200个请求可以被调用，剩下100个请求被阻塞慢慢释放。是这样的？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452116,"discussion_content":"burst参数控制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559226540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99445,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1559216076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559216076","product_id":100023901,"comment_content":"容量上限b怎么设置","like_count":0},{"had_liked":false,"id":98923,"user_name":"andy","can_delete":false,"product_type":"c1","uid":1063321,"ip_address":"","ucode":"F03BE5E20B471C","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/99/42929758.jpg","comment_is_top":false,"comment_ctime":1559116426,"is_pvip":false,"replies":[{"id":"35579","content":"多线程没问题","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559139018,"ip_address":"","comment_id":98923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559116426","product_id":100023901,"comment_content":"我有个疑问，这个令牌桶算法，多线程当中不会有问题么？还是我认为的使用场景不对，有点蒙","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451896,"discussion_content":"多线程没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559139018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98454,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1559005908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559005908","product_id":100023901,"comment_content":"其次是信号量其实也有限流的方式，比如redisson里面提供的超时信号量，既有信号量的功能也有限流器的功能","like_count":0},{"had_liked":false,"id":98452,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1559005834,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559005834","product_id":100023901,"comment_content":"老师我是这样理解的，从安全角度来说，信号量是要优于限流器的，比如前面的请求还没处理完，信号量不允许新的请求进来，而限流器允许","like_count":0},{"had_liked":false,"id":98425,"user_name":"Sunqc","can_delete":false,"product_type":"c1","uid":1473717,"ip_address":"","ucode":"2C54659635403F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7c/b5/4a7a2bd4.jpg","comment_is_top":false,"comment_ctime":1559003694,"is_pvip":false,"replies":[{"id":"36138","content":"小心暴露智商😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559542125,"ip_address":"","comment_id":98425,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559003694","product_id":100023901,"comment_content":"皮一下，老王，这一节挺深奥的，哈哈哈","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451681,"discussion_content":"小心暴露智商😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559542125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97827,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1558788060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558788060","product_id":100023901,"comment_content":"读了几遍才基本弄懂，有点深度了哈","like_count":0},{"had_liked":false,"id":97793,"user_name":"松花皮蛋me","can_delete":false,"product_type":"c1","uid":1000054,"ip_address":"","ucode":"B0846CEEF6B0D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/76/256bbd43.jpg","comment_is_top":false,"comment_ctime":1558775526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558775526","product_id":100023901,"comment_content":"分布式下整体按服务限流呢？","like_count":0},{"had_liked":false,"id":97760,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1558767537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558767537","product_id":100023901,"comment_content":"打卡！令牌桶容量大于1的部分没看懂。","like_count":0},{"had_liked":false,"id":97668,"user_name":"undifined","can_delete":false,"product_type":"c1","uid":1068920,"ip_address":"","ucode":"449CB4CD2DC089","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/78/c3d8ecb0.jpg","comment_is_top":false,"comment_ctime":1558745915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558745915","product_id":100023901,"comment_content":"对于这个请求令牌的线程而言，很显然需要等待 1 秒，因为 1 秒以后（第 3 秒）它就能拿到令牌了。此时需要注意的是，下一个令牌发放的时间也要增加 1 秒，为什么呢？因为第 3 秒发放的令牌已经被线程 T1 预占了。处理之后如下图所示。<br><br>“下一个令牌发放的时间也要增加 1 秒”这句话没懂，下一个令牌是指可以下一次请求可以拿到的有效令牌吗；我的理解是每秒都产生令牌，第 3 秒的已经被上一个请求占用了，所以下一个请求得等到第 4 秒产生有效的令牌才可以，而不是第 4 秒不产生令牌；这样理解对吗，谢谢老师","like_count":0},{"had_liked":false,"id":97657,"user_name":"搏未来","can_delete":false,"product_type":"c1","uid":1034079,"ip_address":"","ucode":"4A339B35E3B419","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/5f/2028aae5.jpg","comment_is_top":false,"comment_ctime":1558744469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558744469","product_id":100023901,"comment_content":"当我看到积分函数时，感觉数学也要好好学习了😂","like_count":0},{"had_liked":false,"id":97653,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1558743591,"is_pvip":false,"replies":[{"id":"35089","content":"要找到瓶颈在哪里，netty并不能让响应时间超短，只能提高吞吐量，如果并发量不大，bio反而更快","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558919135,"ip_address":"","comment_id":97653,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1558743591","product_id":100023901,"comment_content":"老师想请教个实际问题，假设单机做服务器端win和下面Linux应用程序实时socket通信，每个消息交互时间大概10毫秒，我现在想提速，想把交互时间变成0.1毫秒，有啥方法解决此问题，服务器端承载业务处理逻辑和数据库读写操作，谢谢，我现在不清楚这个问题如何解决，我想法是更换网络框架，例如换成netty框架","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451362,"discussion_content":"要找到瓶颈在哪里，netty并不能让响应时间超短，只能提高吞吐量，如果并发量不大，bio反而更快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558919135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232334,"avatar":"","nickname":"13761642169","note":"","ucode":"68137695FC2120","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48732,"discussion_content":"老师有什么公众号或者博客之类的嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573522024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}