{"id":180211,"title":"38 | 计数系统设计（二）：50万QPS下如何设计未读数系统？","content":"<p>你好，我是唐扬。</p><p>在上一节课中我带你了解了如何设计一套支撑高并发访问和存储大数据量的通用计数系统，我们通过缓存技术、消息队列技术以及对于Redis的深度改造，就能够支撑万亿级计数数据存储以及每秒百万级别读取请求了。然而有一类特殊的计数并不能完全使用我们提到的方案，那就是未读数。</p><p>未读数也是系统中一个常见的模块，以微博系统为例，你可看到有多个未读计数的场景，比如：</p><ul>\n<li>当有人@你、评论你、给你的博文点赞或者给你发送私信的时候，你会收到相应的未读提醒；</li>\n<li>在早期的微博版本中有系统通知的功能，也就是系统会给全部用户发送消息，通知用户有新的版本或者有一些好玩的运营活动，如果用户没有看，系统就会给他展示有多少条未读的提醒。</li>\n<li>我们在浏览信息流的时候，如果长时间没有刷新页面，那么信息流上方就会提示你在这段时间有多少条信息没有看。</li>\n</ul><p>那当你遇到第一个需求时，要如何记录未读数呢？其实，这个需求可以用上节课提到的通用计数系统来实现，因为二者的场景非常相似。</p><p>你可以在计数系统中增加一块儿内存区域，以用户ID为Key存储多个未读数，当有人@ 你时，增加你的未读@的计数；当有人评论你时，增加你的未读评论的计数，以此类推。当你点击了未读数字进入通知页面，查看@ 你或者评论你的消息时，重置这些未读计数为零。相信通过上一节课的学习，你已经非常熟悉这一类系统的设计了，所以我不再赘述。</p><!-- [[[read_end]]] --><p>那么系统通知的未读数是如何实现的呢？我们能用通用计数系统实现吗？答案是不能的，因为会出现一些问题。</p><h2>系统通知的未读数要如何设计</h2><p>来看具体的例子。假如你的系统中只有A、B、C三个用户，那么你可以在通用计数系统中增加一块儿内存区域，并且以用户ID为Key来存储这三个用户的未读通知数据，当系统发送一个新的通知时，我们会循环给每一个用户的未读数加1，这个处理逻辑的伪代码就像下面这样：</p><pre><code>List&lt;Long&gt; userIds = getAllUserIds();\nfor(Long id : userIds) {\n  incrUnreadCount(id);\n}\n</code></pre><p>这样看来，似乎简单可行，但随着系统中的用户越来越多，这个方案存在两个致命的问题。</p><p>首先，获取全量用户就是一个比较耗时的操作，相当于对用户库做一次全表的扫描，这不仅会对数据库造成很大的压力，而且查询全量用户数据的响应时间是很长的，对于在线业务来说是难以接受的。如果你的用户库已经做了分库分表，那么就要扫描所有的库表，响应时间就更长了。<strong>不过有一个折中的方法，</strong> 那就是在发送系统通知之前，先从线下的数据仓库中获取全量的用户ID，并且存储在一个本地的文件中，然后再轮询所有的用户ID，给这些用户增加未读计数。</p><p>这似乎是一个可行的技术方案，然而它给所有人增加未读计数，会消耗非常长的时间。你计算一下，假如你的系统中有一个亿的用户，给一个用户增加未读数需要消耗1ms，那么给所有人都增加未读计数就需要100000000 * 1 /1000 = 100000秒，也就是超过一天的时间；即使你启动100个线程并发的设置，也需要十几分钟的时间才能完成，而用户很难接受这么长的延迟时间。</p><p>另外，使用这种方式需要给系统中的每一个用户都记一个未读数的值，而在系统中，活跃用户只是很少的一部分，大部分的用户是不活跃的，甚至从来没有打开过系统通知，为这些用户记录未读数显然是一种浪费。</p><p>通过上面的内容，你可以知道为什么我们不能用通用计数系统实现系统通知未读数了吧？那正确的做法是什么呢？</p><p>要知道，系统通知实际上是存储在一个大的列表中的，这个列表对所有用户共享，也就是所有人看到的都是同一份系统通知的数据。不过不同的人最近看到的消息不同，所以每个人会有不同的未读数。因此，你可以记录一下在这个列表中每个人看过最后一条消息的ID，然后统计这个ID之后有多少条消息，这就是未读数了。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/10/a5f0b6776246dc6b4c7e96c72d74a210.jpg?wh=1142*850\" alt=\"\"></p><p>这个方案在实现时有这样几个关键点：</p><ul>\n<li>用户访问系统通知页面需要设置未读数为0，我们需要将用户最近看过的通知ID设置为最新的一条系统通知ID；</li>\n<li>如果最近看过的通知ID为空，则认为是一个新的用户，返回未读数为0；</li>\n<li>对于非活跃用户，比如最近一个月都没有登录和使用过系统的用户，可以把用户最近看过的通知ID清空，节省内存空间。</li>\n</ul><p><strong>这是一种比较通用的方案，既节省内存，又能尽量减少获取未读数的延迟。</strong> 这个方案适用的另一个业务场景是全量用户打点的场景，比如像下面这张微博截图中的红点。<br>\n<img src=\"https://static001.geekbang.org/resource/image/ae/3f/ae6a5e9e04be08d18c493729458d543f.jpg?wh=1142*771\" alt=\"\"></p><p>这个红点和系统通知类似，也是一种通知全量用户的手段，如果逐个通知用户，延迟也是无法接受的。<strong>因此你可以采用和系统通知类似的方案。</strong></p><p>首先，我们为每一个用户存储一个时间戳，代表最近点过这个红点的时间，用户点了红点，就把这个时间戳设置为当前时间；然后，我们也记录一个全局的时间戳，这个时间戳标识最新的一次打点时间，如果你在后台操作给全体用户打点，就更新这个时间戳为当前时间。而我们在判断是否需要展示红点时，只需要判断用户的时间戳和全局时间戳的大小，如果用户时间戳小于全局时间戳，代表在用户最后一次点击红点之后又有新的红点推送，那么就要展示红点，反之，就不展示红点了。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/98/553e7da158a7eca56369e23c9b672898.jpg?wh=1142*560\" alt=\"\"></p><p>这两个场景的共性是全部用户共享一份有限的存储数据，每个人只记录自己在这份存储中的偏移量，就可以得到未读数了。</p><p>你可以看到，系统消息未读的实现方案不是很复杂，它通过设计避免了操作全量数据未读数，如果你的系统中有这种打红点的需求，那我建议你可以结合实际工作灵活使用上述方案。</p><p>最后一个需求关注的是微博信息流的未读数，在现在的社交系统中，关注关系已经成为标配的功能，而基于关注关系的信息流也是一种非常重要的信息聚合方式，因此，如何设计信息流的未读数系统就成了你必须面对的一个问题。</p><h2>如何为信息流的未读数设计方案</h2><p>信息流的未读数之所以复杂主要有这样几点原因。</p><ul>\n<li>\n<p>首先，微博的信息流是基于关注关系的，未读数也是基于关注关系的，就是说，你关注的人发布了新的微博，那么你作为粉丝未读数就要增加1。如果微博用户都是像我这样只有几百粉丝的“小透明”就简单了，你发微博的时候系统给你粉丝的未读数增加1不是什么难事儿。但是对于一些动辄几千万甚至上亿粉丝的微博大V就麻烦了，增加未读数可能需要几个小时。假设你是杨幂的粉丝，想了解她实时发布的博文，那么如果当她发布博文几个小时之后，你才收到提醒，这显然是不能接受的。所以未读数的延迟是你在设计方案时首先要考虑的内容。</p>\n</li>\n<li>\n<p>其次，信息流未读数请求量极大、并发极高，这是因为接口是客户端轮询请求的，不是用户触发的。也就是说，用户即使打开微博客户端什么都不做，这个接口也会被请求到。在几年前，请求未读数接口的量级就已经接近每秒50万次，这几年随着微博量级的增长，请求量也变得更高。而作为微博的非核心接口，我们不太可能使用大量的机器来抗未读数请求，因此，如何使用有限的资源来支撑如此高的流量是这个方案的难点。</p>\n</li>\n<li>\n<p>最后，它不像系统通知那样有共享的存储，因为每个人关注的人不同，信息流的列表也就不同，所以也就没办法采用系统通知未读数的方案。</p>\n</li>\n</ul><p>那要如何设计能够承接每秒几十万次请求的信息流未读数系统呢？你可以这样做：</p><ul>\n<li>首先，在通用计数器中记录每一个用户发布的博文数；</li>\n<li>然后在Redis或者Memcached中记录一个人所有关注人的博文数快照，当用户点击未读消息重置未读数为0时，将他关注所有人的博文数刷新到快照中；</li>\n<li>这样，他关注所有人的博文总数减去快照中的博文总数就是他的信息流未读数。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/a5/8a/a563b121ae1147a2d877a7bb14c9658a.jpg?wh=1142*546\" alt=\"\"></p><p>假如用户A，像上图这样关注了用户B、C、D，其中B发布的博文数是10，C发布的博文数是8，D发布的博文数是14，而在用户A最近一次查看未读消息时，记录在快照中的这三个用户的博文数分别是6、7、12，因此用户A的未读数就是（10-6）+（8-7）+（14-12）=7。</p><p>这个方案设计简单，并且是全内存操作，性能足够好，能够支撑比较高的并发，事实上微博团队仅仅用16台普通的服务器就支撑了每秒接近50万次的请求，这就足以证明这个方案的性能有多出色，因此，它完全能够满足信息流未读数的需求。</p><p>当然了这个方案也有一些缺陷，比如说快照中需要存储关注关系，如果关注关系变更的时候更新不及时，那么就会造成未读数不准确；快照采用的是全缓存存储，如果缓存满了就会剔除一些数据，那么被剔除用户的未读数就变为0了。但是好在用户对于未读数的准确度要求不高（未读10条还是11条，其实用户有时候看不出来），因此，这些缺陷也是可以接受的。</p><p>通过分享未读数系统设计这个案例，我想给你一些建议：</p><ol>\n<li>缓存是提升系统性能和抵抗大并发量的神器，像是微博信息流未读数这么大的量级我们仅仅使用十几台服务器就可以支撑，这全都是缓存的功劳；</li>\n<li>要围绕系统设计的关键困难点想解决办法，就像我们解决系统通知未读数的延迟问题一样；</li>\n<li>合理分析业务场景，明确哪些是可以权衡的，哪些是不行的，会对你的系统设计增益良多，比如对于长久不登录用户，我们就会记录未读数为0，通过这样的权衡，可以极大地减少内存的占用，减少成本。</li>\n</ol><h2>课程小结</h2><p>以上就是本节课的全部内容了，本节课我带你了解了未读数系统的设计，这里你需要了解的重点是：</p><ol>\n<li>评论未读、@未读、赞未读等一对一关系的未读数可以使用上节课讲到的通用计数方案来解决；</li>\n<li>在系统通知未读、全量用户打点等存在有限的共享存储的场景下，可以通过记录用户上次操作的时间或者偏移量，来实现未读方案；</li>\n<li>最后，信息流未读方案最为复杂，采用的是记录用户博文数快照的方式。</li>\n</ol><p>这里你可以看到，这三类需求虽然都和未读数有关，但是需求场景不同、对于量级的要求不同，设计出来的方案也就不同。因此，就像我刚刚提到的样子，你在做方案设计的时候，要分析需求的场景，比如说数据的量级是怎样的，请求的量级是怎样的，有没有一些可以利用的特点（比如系统通知未读场景下的有限共享存储、信息流未读场景下关注人数是有限的等等），然后再制定针对性的方案，切忌盲目使用之前的经验套用不同的场景，否则就可能造成性能的下降，甚至危害系统的稳定性。</p><h2>一课一思</h2><p>结合实际项目聊一聊在你的系统中有哪些未读计数的场景呢？你是如何设计方案来实现未读计数的呢？欢迎在留言区与我分享你的经验。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"37 | 计数系统设计（一）：面对海量数据的计数器要如何做？","id":179373},"right":{"article_title":"39 | 信息流设计（一）：通用信息流系统的推模式要如何做？","id":181091}},"comments":[{"had_liked":false,"id":215705,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1589080479,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"139028033951","product_id":100035801,"comment_content":"未读数这种需求目前还没做过，不过也做过70WTPS的接口服务，其他组在大促时也百万级千万级也有，主要思路是类似的缓存＋集群，缓存可以多级缓存，集群数量可以成百上千。<br>缓存——本质是专业的人做专业的事情的思想，它的内部结构决定了他就是快<br><br>集群——本质是分而治之的思想，人多力量大，当然需要劲往一处使才行<br><br>取巧——本质是发现她的规律，选择合适的数据结构和算法，也能极大的加快运行的速度<br><br>场景——本质看有无必要万无一失，万无一失不好实现的，不过和钱不强相关，不万无一失也可以，如果用户本身也不同在乎，那就更容易了，统计错误也不打紧的<br>","like_count":33,"discussions":[{"author":{"id":2397964,"avatar":"","nickname":"小胡","note":"","ucode":"1E0DD4138E9D0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391917,"discussion_content":"说得好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630693671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233851,"user_name":"rumly","can_delete":false,"product_type":"c1","uid":1142273,"ip_address":"","ucode":"96F5FBC11FA9EB","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/01/a0df95a2.jpg","comment_is_top":false,"comment_ctime":1594478445,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31659249517","product_id":100035801,"comment_content":"仅仅用 16 台普通的服务器就支撑了每秒接近 50 万次的请求   相当于每台机器能够承担的QPS是 31250。这个单机QPS已经非常高了，如果带REIDS访问的服务就更难了，想问下具体的细节，单机的QPS是如何达到这么高的？谢谢。","like_count":8,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365036,"discussion_content":"redis单机能抗10W，具体测试数据取决于分配的内存大小（不宜超过10G），CPU和磁盘","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617691182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163803,"user_name":"小可","can_delete":false,"product_type":"c1","uid":1006735,"ip_address":"","ucode":"8834AF621FA67D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","comment_is_top":false,"comment_ctime":1576804874,"is_pvip":false,"replies":[{"id":"63080","content":"谢谢~","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577242706,"ip_address":"","comment_id":163803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31641575946","product_id":100035801,"comment_content":"这三个方案都很“硬核”，不过最最重要的，不要照搬硬套，还是要根据实际场景分析问题的难点，找准关键点，制定应对方案，谢谢老师。<br>","like_count":7,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478537,"discussion_content":"谢谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577242706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163732,"user_name":"阿土","can_delete":false,"product_type":"c1","uid":1183019,"ip_address":"","ucode":"2DBEAD80B0CA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/2b/4814d3db.jpg","comment_is_top":false,"comment_ctime":1576775388,"is_pvip":false,"replies":[{"id":"63087","content":"1. 博文数要减少，快照不能减少，所以不是很精确，不过应该可以接受<br>2. 不需要1001次哦，如果有四个缓存节点，就读四次，每次是批量获取的，就是算好哪些数据存储在哪个缓存节点上","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577242976,"ip_address":"","comment_id":163732,"utype":1}],"discussion_count":5,"race_medal":0,"score":"27346579164","product_id":100035801,"comment_content":"考试你好，我有两个问题<br>第一:关注的人删除了博文，记录的博文数要不要相应减少？快照里面的数据要不要减少？<br>第二:如果一个人关注的人很多，比如有一千个，那么它每次过去未读数就就要读取1001次缓存，能够支持50w并发，性能上是如何优化的？","like_count":6,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478518,"discussion_content":"1. 博文数要减少，快照不能减少，所以不是很精确，不过应该可以接受\n2. 不需要1001次哦，如果有四个缓存节点，就读四次，每次是批量获取的，就是算好哪些数据存储在哪个缓存节点上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577242976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294840,"discussion_content":"Redis的话mget？？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596013754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123043,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/e3/510b69f9.jpg","nickname":"benny","note":"","ucode":"E2F30AF0C808D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170043,"discussion_content":"总数单独存一分就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581666003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1413499,"avatar":"https://static001.geekbang.org/account/avatar/00/15/91/7b/2dd4d0c1.jpg","nickname":"大鸡腿🍗","note":"","ucode":"38AF8AE00F6166","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93003,"discussion_content":"第一个问题：不用删除，文章都不见了，用户自然看不到。\n第二个问题：redis保持一个用户所有博文的读取数量，跟博文的总数对比，总数也可以冗余到这个读取数量缓存里面。\n1.假设博文没有更新，你全部读完了，那结果一样的。如果你有未读的，只需要加个小红点。\n2.假设博文更新了，你只需要更新那些关注的，重来没有读过的，还有已经读完了的缓存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576898939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1129838,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3d/6e/60680aa4.jpg","nickname":"Li Yao","note":"","ucode":"703E1E5505F70D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1413499,"avatar":"https://static001.geekbang.org/account/avatar/00/15/91/7b/2dd4d0c1.jpg","nickname":"大鸡腿🍗","note":"","ucode":"38AF8AE00F6166","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200259,"discussion_content":"第二个问题：如果一个人关注了1000个人，如果想更新关注的人的博文总数，不还得去查每个人的博文数量然后求和吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583672681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":93003,"ip_address":""},"score":200259,"extra":""}]}]},{"had_liked":false,"id":169605,"user_name":"大龄程序员在线治掉发","can_delete":false,"product_type":"c1","uid":1763091,"ip_address":"","ucode":"A246D4E4683589","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e7/13/6f76ada6.jpg","comment_is_top":false,"comment_ctime":1578387454,"is_pvip":false,"replies":[{"id":"66151","content":"这个场景在读的时候只能把之前未读的消息都读了","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1578670025,"ip_address":"","comment_id":169605,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23053223934","product_id":100035801,"comment_content":"统计这个 ID 之后有多少条消息，这就是未读数了<br>我这里有个疑问,如果用户有10条未读,他直接读第五条消息,那么10-5 = 5 , 就是5个未读,实际上是9条,这样未读就不对了?","like_count":5,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480630,"discussion_content":"这个场景在读的时候只能把之前未读的消息都读了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578670025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170296,"user_name":"longslee","can_delete":false,"product_type":"c1","uid":1465986,"ip_address":"","ucode":"C24E32E5B1B6F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","comment_is_top":false,"comment_ctime":1578563395,"is_pvip":false,"replies":[{"id":"66145","content":"其实方案是理论的实践，理论是通用的，方案是独特的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1578668170,"ip_address":"","comment_id":170296,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14463465283","product_id":100035801,"comment_content":"打卡。感谢老师实战经验，眼界开阔了许多。  有一个疑问，这些方案，是老师你们独特想到的，还是业界通用做法呢，如果是业界通用的，业界都是从哪里最先开始获取到理论支持的呢？","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480927,"discussion_content":"其实方案是理论的实践，理论是通用的，方案是独特的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578668170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245039,"user_name":"Geek_2b64f5","can_delete":false,"product_type":"c1","uid":2120230,"ip_address":"","ucode":"2ABE8C88591533","user_header":"","comment_is_top":false,"comment_ctime":1598793265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10188727857","product_id":100035801,"comment_content":"如果一个人关注的明星或者好友非常多的时候，快照的数据结构怎么设计？怎么保证redis读取全量快照的延时？","like_count":2},{"had_liked":false,"id":195828,"user_name":"Jone_乔泓恺","can_delete":false,"product_type":"c1","uid":1407941,"ip_address":"","ucode":"158154301D5E40","user_header":"https://static001.geekbang.org/account/avatar/00/15/7b/c5/35f92dad.jpg","comment_is_top":false,"comment_ctime":1585217508,"is_pvip":false,"replies":[{"id":"75153","content":"主从+主备就好了","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1585659385,"ip_address":"","comment_id":195828,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10175152100","product_id":100035801,"comment_content":"总是担心 redis 这种内存型数据库会因为服务器故障导致数据的丢失","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489167,"discussion_content":"主从+主备就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585659385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184716,"user_name":"zk_207","can_delete":false,"product_type":"c1","uid":1183552,"ip_address":"","ucode":"196D92ECC8540D","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/40/e838871e.jpg","comment_is_top":false,"comment_ctime":1583390613,"is_pvip":false,"replies":[{"id":"72163","content":"可以用多个节点来扛呀：）","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1584011019,"ip_address":"","comment_id":184716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10173325205","product_id":100035801,"comment_content":"扬哥你好，请教个问题，如果接口QPS到达20w甚至是50w级别，只靠缓存能承受得了吗？Redis并发到了10w级好像性能就不行了，请求解答，谢谢","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486106,"discussion_content":"可以用多个节点来扛呀：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584011019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171417,"user_name":"Geek_219216","can_delete":false,"product_type":"c1","uid":1666708,"ip_address":"","ucode":"10059F4DE69C30","user_header":"","comment_is_top":false,"comment_ctime":1578920946,"is_pvip":false,"replies":[{"id":"66908","content":"不会的，直接用redis","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1579228472,"ip_address":"","comment_id":171417,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10168855538","product_id":100035801,"comment_content":"老师 未读数还会落地到数据库吗","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481338,"discussion_content":"不会的，直接用redis","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579228472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201262,"user_name":"陈琪","can_delete":false,"product_type":"c1","uid":1108539,"ip_address":"","ucode":"5B702E8198E6D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/ea/3b/5e1e7b6c.jpg","comment_is_top":false,"comment_ctime":1585741569,"is_pvip":false,"replies":[{"id":"75828","content":"粉丝数其实就是大v和非大v的区分","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1586087683,"ip_address":"","comment_id":201262,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5880708865","product_id":100035801,"comment_content":"是否可以按大V和非大V结合处理的方式： 推拉结合<br>1.  发文的时候，如果这个人粉丝数少，直接推送到他每个粉丝数的 &quot;普通未读数计数&quot;，<br>2. 如果这个人是大V，就不推。   <br>3. 用户获取未读数 = (他关注的大V里总数-快照数)  +  “普通未读数计数”<br>需要考虑的就是一个用户从普通V变成了大V。<br>这种总体读写性能都能比较好平衡，老师觉得呢","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490279,"discussion_content":"粉丝数其实就是大v和非大v的区分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586087683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365035,"discussion_content":"每个用户拥有一份按时间排序的twitter消息，基于这个进行读写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617691084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188238,"user_name":"Bravery168","can_delete":false,"product_type":"c1","uid":1232973,"ip_address":"","ucode":"DB08AEFBD6DF2B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","comment_is_top":false,"comment_ctime":1584330080,"is_pvip":false,"replies":[{"id":"73103","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1584590808,"ip_address":"","comment_id":188238,"utype":1}],"discussion_count":1,"race_medal":4,"score":"5879297376","product_id":100035801,"comment_content":"我之前在实现红点消息和未读数也采用的是时间戳偏移计算的思路，当然数据规模没有微博这么大。这里用到通用计数器和快照比较得出未读数的思路挺好，任何实现方案还是要紧密结合应用场景来做精心设计，在存储，读写性能等维度上达到一个平衡。","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487360,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584590808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169300,"user_name":"Geek_42f729","can_delete":false,"product_type":"c1","uid":1600341,"ip_address":"","ucode":"76CFFF9DEDDF96","user_header":"https://static001.geekbang.org/account/avatar/00/18/6b/55/2b0f219b.jpg","comment_is_top":false,"comment_ctime":1578309890,"is_pvip":false,"replies":[{"id":"66152","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1578670038,"ip_address":"","comment_id":169300,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873277186","product_id":100035801,"comment_content":"如果有多个组件需要展示红点，是不是需要根据不同的组件给用户创建多个不同的时间戳来进行比较呢？","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480500,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578670038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163859,"user_name":"黄展志","can_delete":false,"product_type":"c1","uid":1356083,"ip_address":"","ucode":"EBA342CD89072D","user_header":"https://static001.geekbang.org/account/avatar/00/14/b1/33/8993eae0.jpg","comment_is_top":false,"comment_ctime":1576812134,"is_pvip":false,"replies":[{"id":"63002","content":"我们一起成长进步","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577196462,"ip_address":"","comment_id":163859,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5871779430","product_id":100035801,"comment_content":"谢谢唐老师，受益良多，加油，等你更新最后三讲","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478559,"discussion_content":"我们一起成长进步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577196462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342949,"user_name":"码哥字节","can_delete":false,"product_type":"c1","uid":1572356,"ip_address":"","ucode":"362103AD52C8E0","user_header":"https://static001.geekbang.org/account/avatar/00/17/fe/04/bb427e47.jpg","comment_is_top":false,"comment_ctime":1650544450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650544450","product_id":100035801,"comment_content":"列表的每个消息绑定一个 redis bitmap，这条消息已读就把这条消息对应的 bitmap自己的 userid set成1，最后统计所有的 bitmap 在 userid为1的个数就是已读数","like_count":0},{"had_liked":false,"id":342208,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1650101459,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650101459","product_id":100035801,"comment_content":"3个解决方案模型：<br>1个存储业务实体对1个用户直接计数就好<br>1对多，用户纬度记录最新访问时间或id<br>多对多，用户纬度记录每个关注对象的已读记录数","like_count":1},{"had_liked":false,"id":328567,"user_name":"∷鹰击长空","can_delete":false,"product_type":"c1","uid":1083922,"ip_address":"","ucode":"C372BB20795262","user_header":"https://static001.geekbang.org/account/avatar/00/10/8a/12/95d6e8d5.jpg","comment_is_top":false,"comment_ctime":1640774212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640774212","product_id":100035801,"comment_content":"以前接触过类似的系统设计:<br>通用计数器中记录每一个用户发布的博文数, 很妙! Redis 内存几万个数字相加也还是很快的(毫秒级). ","like_count":0},{"had_liked":false,"id":261957,"user_name":"边际革命","can_delete":false,"product_type":"c1","uid":1124665,"ip_address":"","ucode":"EC15C0AE4D487A","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/39/be9d2e88.jpg","comment_is_top":false,"comment_ctime":1605589665,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605589665","product_id":100035801,"comment_content":"感谢老师，给我开阔了眼界","like_count":1},{"had_liked":false,"id":252858,"user_name":"飞鸟在途","can_delete":false,"product_type":"c1","uid":1154316,"ip_address":"","ucode":"1F6F21B25F0B79","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/0c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1602503168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602503168","product_id":100035801,"comment_content":"免流量和微博运动那个打点是针对一个个uid的精准打点，不能用全量打点的方式实现。","like_count":0},{"had_liked":false,"id":196033,"user_name":"123456","can_delete":false,"product_type":"c1","uid":1485820,"ip_address":"","ucode":"9F7C4F3E4416BE","user_header":"https://static001.geekbang.org/account/avatar/00/16/ab/fc/38ccd186.jpg","comment_is_top":false,"comment_ctime":1585231933,"is_pvip":false,"replies":[{"id":"74991","content":"会不那么准确","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1585610865,"ip_address":"","comment_id":196033,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585231933","product_id":100035801,"comment_content":"感觉有点小疑问:杨幂发了一条微博， 然后删了一条两年前的微博， 粉丝们的未读数可能就不会有变化了","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489214,"discussion_content":"会不那么准确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585610865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187670,"user_name":"亚马逊森林","can_delete":false,"product_type":"c1","uid":1351757,"ip_address":"","ucode":"72586F773D2B69","user_header":"https://static001.geekbang.org/account/avatar/00/14/a0/4d/8e78fb88.jpg","comment_is_top":false,"comment_ctime":1584189793,"is_pvip":false,"replies":[{"id":"73108","content":"要实际测试一下存储空间消耗情况","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1584591092,"ip_address":"","comment_id":187670,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1584189793","product_id":100035801,"comment_content":"老师你好，redis的bitmap 存储系统未读书也是可行的吧，整串表示某条系统消息，字串的索引存储用户id，值存储用户是否未读","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487194,"discussion_content":"要实际测试一下存储空间消耗情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584591092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/65/d0/c11d4a31.jpg","nickname":"滴水藏海","note":"","ucode":"9C1F9C91189F69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239052,"discussion_content":"bitmap是消息纬度，按用户查看自己的未读时就比较困难了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587269044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181160,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1582509112,"is_pvip":false,"replies":[{"id":"70255","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1582513749,"ip_address":"","comment_id":181160,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582509112","product_id":100035801,"comment_content":"影响系统设计的最主要因素还是业务的并发量，<br>并发量低的时候，耗时长的业务，也不是问题。<br>并发量高的时候，耗时再短的业务，也是问题。<br><br>这一节，主要的解决问题的思路，还是用缓存来处理这种高频请求的问题；当一个请求需要被大量访问，就需要考虑缓存来代替关系型数据库。<br><br>进一步处理就是，用空间换时间。消息未读数这种，即时性极高的业务，需要这种空间换时间的处理方式。<br>","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484943,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582513749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168005,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1577974712,"is_pvip":false,"replies":[{"id":"66186","content":"谢谢","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1578727891,"ip_address":"","comment_id":168005,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577974712","product_id":100035801,"comment_content":"这一讲通俗易懂  很棒","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480095,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578727891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167202,"user_name":"jiangjing","can_delete":false,"product_type":"c1","uid":1295268,"ip_address":"","ucode":"D45001E5FB4D6F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibcRNslcyp7dwIR3TIwvloCibMd7Ew2TB3MU0wISFXEolyuHRtfIriagm6PMX5zQHicmc78BrBcxA6vQ5qnTPCev9A/132","comment_is_top":false,"comment_ctime":1577715303,"is_pvip":false,"replies":[{"id":"65118","content":"谢谢","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577935642,"ip_address":"","comment_id":167202,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577715303","product_id":100035801,"comment_content":"硬核👍","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479780,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577935642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166126,"user_name":"nimil","can_delete":false,"product_type":"c1","uid":1197925,"ip_address":"","ucode":"19933068972746","user_header":"https://static001.geekbang.org/account/avatar/00/12/47/65/cce8eb34.jpg","comment_is_top":false,"comment_ctime":1577407624,"is_pvip":false,"replies":[{"id":"63338","content":"感谢","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577417942,"ip_address":"","comment_id":166126,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577407624","product_id":100035801,"comment_content":"谢谢老师，实战篇受益良多","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479407,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577417942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164430,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1576988540,"is_pvip":false,"replies":[{"id":"63064","content":"1. 可以写在文件里<br>2. 这个看过的最近一条消息的ID，指的是你在查看消息列表，想要把未读数为0，可以把最大的ID（也就是最近的ID）设置在最近读到的ID缓存里","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577241258,"ip_address":"","comment_id":164430,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576988540","product_id":100035801,"comment_content":"1.先从线下的数据仓库中获取全量的用户 ID，并且存储在一个本地的文件中。是把全量ID写到cache里面吗？比如redis。还是写到本地磁盘文件中，比如txt文件中呢？<br>2.你可以记录一下在这个列表中每个人看过最后一条消息的 ID？如果先看最近的消息，然后最后看消息久远的消息ID，这样统计不准确了吧。因为ID是系统按照时间从小到大生成的。","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478764,"discussion_content":"1. 可以写在文件里\n2. 这个看过的最近一条消息的ID，指的是你在查看消息列表，想要把未读数为0，可以把最大的ID（也就是最近的ID）设置在最近读到的ID缓存里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577241258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164335,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1184658,"ip_address":"","ucode":"0641211EE9DA5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/13/92/0b4c8e30.jpg","comment_is_top":false,"comment_ctime":1576939287,"is_pvip":false,"replies":[{"id":"63067","content":"可以控制不被减为负数。。<br>","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577241794,"ip_address":"","comment_id":164335,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1576939287","product_id":100035801,"comment_content":"如果只记录数量，有删除的话，一减成负数了，这种情况怎么办","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478728,"discussion_content":"可以控制不被减为负数。。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577241794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164246,"user_name":"Keith","can_delete":false,"product_type":"c1","uid":1193337,"ip_address":"","ucode":"B40774090714D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/79/21647da2.jpg","comment_is_top":false,"comment_ctime":1576915458,"is_pvip":false,"replies":[{"id":"63070","content":"如果某一个关注人的计数数据减去他的快照数据为负数（删除了数据），可以把结果记为0。不过确实也是会不准确，但是对于准确度要求不高","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577242024,"ip_address":"","comment_id":164246,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576915458","product_id":100035801,"comment_content":"关于信息流未读数方案, 快照记录是用户A最近一次查看消息时记录的, 在用户A下次查看消息之前这一段时间, 如果某个关注的人删了几条微博, 然后又发了几条, 总数不变, 这种方案是不是会认为用户A的消息未读数不变? (不过即使是, 鉴于用户对未读数的准确度要求没那么高, 也是可以接受)","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478693,"discussion_content":"如果某一个关注人的计数数据减去他的快照数据为负数（删除了数据），可以把结果记为0。不过确实也是会不准确，但是对于准确度要求不高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577242024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163801,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1576804719,"is_pvip":false,"replies":[{"id":"63083","content":"是在上一次查看未读数时的微博数量","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577242802,"ip_address":"","comment_id":163801,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576804719","product_id":100035801,"comment_content":"用户微博数快照是指该用户所有微博的数量吗？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478536,"discussion_content":"是在上一次查看未读数时的微博数量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577242802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","nickname":"蓝魔丶","note":"","ucode":"2AE4359E263558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91191,"discussion_content":"最近已读快照","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576817388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163797,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1576804478,"is_pvip":false,"replies":[{"id":"63084","content":"可以看一下39和40节的内容~<br><br>push消息未读应该是主动通知的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577242863,"ip_address":"","comment_id":163797,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1576804478","product_id":100035801,"comment_content":"push消息的未读数是主动通知的，这种的话应该是怎么设计的呢？同时也很好奇微博是怎么把海量的消息瞬间发送出去的","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478535,"discussion_content":"可以看一下39和40节的内容~\n\npush消息未读应该是主动通知的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577242863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91961,"discussion_content":"参考文章：https://segmentfault.com/a/1190000011162605","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576851106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91949,"discussion_content":"这种未读数的主动通知，可以做成订阅式。\n用户登录后订阅一个该事件，保持tcp长链接。\n有事情时主动推送给订阅用户。\n\n一般这种信息量不大，变动也不频繁的数据可以这么弄，避免客户端轮询。\n\n这种单机可以轻松支持数百万并发量的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576850970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}