{"id":103301,"title":"28 | 如何设计创建好一个Beam Pipeline？","content":"<p>你好，我是蔡元楠。</p><p>今天我要与你分享的主题是“如何设计创建好一个Beam Pipeline”。</p><p>这一讲我们会用到<a href=\"https://time.geekbang.org/column/article/92928\">第7讲</a>中介绍过的四种常见设计模式——复制模式、过滤模式、分离模式和合并模式。这些设计模式就像是武功的基本套路一样，在实战中无处不在。今天，我们就一起来看看我们怎么用Beam的Pipeline来实现这些设计模式。</p><h2>设计Pipeline的基本考虑因素</h2><p>在设计Pipeline时，你需要注意4条基本的考虑因素。</p><h3>1.输入数据存储在哪里？</h3><p>输入数据是存储在云存储文件系统，还是存储在一个关系型数据库里？有多大的数据量？这些都会影响你的pipeline设计是如何读入数据的。上一讲已经讲到过，Pipeline的数据读入是使用Read这个特殊的Transform。而数据读入往往是一个Pipeline的第一个数据操作。</p><h3>2.输入数据是什么格式？</h3><p>输入数据是纯文本文件？还是读取自关系型数据库的行？还是结构化好的特殊数据结构？这些都会影响你对于PCollection的选择。比如，如果输入数据是自带key/value的结构，那你用Beam的key/value为元素的PCollection能更好的表示数据。</p><h3>3.这个pipeline你打算对数据进行哪些操作？</h3><!-- [[[read_end]]] --><p>提前想好要做哪些数据操作，可以帮助你设计好Transform。可能你也会使用一些Beam提供的Transform或者是你的团队共用的一些Transform。</p><h3>4.输出数据需要是什么样的格式，需要存储到哪里？</h3><p>和输入数据相同，对于输出数据，我们也要提前判断好业务的需求。看看需要的数据格式是什么样的，是要存储到本地文本文件？还是存储到另一个数据库？</p><p>比如，你在跑一个本地批处理作业，就会需要先存到本地看一看。如果你在生成环境有永久性数据库，或者你有结构化的数据，可能更想存储到你的数据库里。</p><h2>复制模式的Pipeline设计</h2><p>现在，我们就来看看在第7讲中提到的复制模式（Copier Pattern）的例子是怎么用Beam实现的。这里需要用到<a href=\"https://time.geekbang.org/column/article/92928\">第7讲</a>的YouTube视频平台的复制模式案例。这里就简单介绍一下，以便唤醒你的记忆。如果你完全忘记了，我建议你先去做个回顾。</p><p>如今的视频平台会提供不同分辨率的视频给不同网络带宽的用户。在YouTube视频平台中，将鼠标放在视频缩略图上时，它会自动播放一段已经生成好的动画缩略图。平台的自然语言理解（NLP）的数据处理模块可以分析视频数据，自动生成视频字幕。视频分析的数据处理模块也可以通过分析视频数据产生更好的内容推荐系统。这使用的就是复制模式。</p><p>要想在在Beam中采用复制模式，我们可以用一个PCollection来表示输入的Video data set。将每一种视频处理编写成Transform。最后，多重输出各自为一个PCollection。整个过程就如同下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/73/b226e637e8cba5f7c3ef938684526373.jpg?wh=2426*1190\" alt=\"\"></p><p>你可以从图片中看到，在这个工作流系统中，每个数据处理模块的输入都是相同的，而下面的5个数据处理模块都可以单独并且同步地运行处理。</p><p>复制模式通常是将单个数据处理模块中的数据完整地复制到两个或更多的数据处理模块中，然后再由不同的数据处理模块进行处理。当我们在处理大规模数据时，需要对同一个数据集采取多种不同的数据处理转换，我们就可以优先考虑采用复制模式。</p><p>比如下面的代码，我们用5个不同的pipeline来表示，它们的作用分别是生成高画质视频、生成低画质视频、生成GIF动画、生成视频字幕、分析视频。</p><pre><code>PCollection&lt;Video&gt; videoDataCollection = ...;\n\n//  生成高画质视频\nPCollection&lt;Video&gt; highResolutionVideoCollection = videoDataCollection.apply(&quot;highResolutionTransform&quot;, ParDo.of(new DoFn&lt;Video, Video&gt;(){\n  @ProcessElement\n  public void processElement(ProcessContext c) {\n    c.output(generateHighResolution(c.element()));\n  }\n}));\n\n//  生成低画质视频\nPCollection&lt;Video&gt; lowResolutionVideoCollection = videoDataCollection.apply(&quot;lowResolutionTransform&quot;, ParDo.of(new DoFn&lt;Video, Video&gt;(){\n  @ProcessElement\n  public void processElement(ProcessContext c) {\n    c.output(generateLowResolution(c.element()));\n  }\n}));\n\n// 生成GIF动画\nPCollection&lt;Image&gt; gifCollection = videoDataCollection.apply(&quot;gifTransform&quot;, ParDo.of(new DoFn&lt;Video, Image&gt;(){\n  @ProcessElement\n  public void processElement(ProcessContext c) {\n    c.output(generateGIF(c.element()));\n  }\n}));\n\n//  生成视频字幕\nPCollection&lt;Caption&gt; captionCollection = videoDataCollection.apply(&quot;captionTransform&quot;, ParDo.of(new DoFn&lt;Video, Caption&gt;(){\n  @ProcessElement\n  public void processElement(ProcessContext c) {\n    c.output(generateCaption(c.element()));\n  }\n}));\n\n//   分析视频\nPCollection&lt;Report&gt; videoAnalysisCollection = videoDataCollection.apply(&quot;videoAnalysisTransform&quot;, ParDo.of(new DoFn&lt;Video, Report&gt;(){\n  @ProcessElement\n  public void processElement(ProcessContext c) {\n    c.output(analyzeVideo(c.element()));\n  }\n}));\n</code></pre><h2>过滤模式的Pipeline设计</h2><p>过滤模式（Filter Pattern）也可以用Beam来实现。这里我们先简单回顾一下<a href=\"https://time.geekbang.org/column/article/92928\">第7讲</a>的例子。在商城会员系统中，系统根据用户的消费次数、消费金额、注册时间划分用户等级。假设现在商城有五星、金牌和钻石这三种会员。而系统现在打算通过邮件对钻石会员发出钻石会员活动的邀请。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/0f/47498fc9b2d41c59ffb286d84c4f220f.jpg?wh=1674*1244\" alt=\"\"></p><p>在过滤模式中，一个数据处理模块会将输入的数据集过滤，留下符合条件的数据，然后传输到下一个数据处理模块进行单独处理。</p><p>在用Beam实现时，我们把输入的用户群组表达成一个PCollection。输出的钻石会员用户群组也表示成一个PCollection。那么中间的过滤步骤就能编写成一个Transform。如下面代码所示，我们在一个Beam Pipeline里调用isDiamondUser()方法，从所有的用户中过滤出钻石会员。</p><pre><code>PCollection&lt;User&gt; userCollection = ...;\n\nPCollection&lt;User&gt; diamondUserCollection = userCollection.apply(&quot;filterDiamondUserTransform&quot;, ParDo.of(new DoFn&lt;User, User&gt;(){\n  @ProcessElement\n  public void processElement(ProcessContext c) {\n    if (isDiamondUser(c.element()) {\n      c.output(c.element());\n    }\n  }\n}));\n\nPCollection&lt;User&gt; notifiedUserCollection = userCollection.apply(&quot;notifyUserTransform&quot;, ParDo.of(new DoFn&lt;User, User&gt;(){\n  @ProcessElement\n  public void processElement(ProcessContext c) {\n    if (notifyUser(c.element()) {\n      c.output(c.element());\n    }\n  }\n}));\n</code></pre><h2>分离模式的Pipeline设计</h2><p>分离模式（Splitter Pattern）与过滤模式不同，并不会丢弃里面的任何数据，而是将数据分组处理。还是以商城会员系统为例。系统打算通过邮件对不同会员发出与他们身份相应的活动邀请。需要通过<strong>分离模式</strong>将用户按照会员等级分组，然后发送相应的活动内容。</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/85/c5d84c2aab2e02cc6e1d2e9f7c40e185.jpg?wh=1902*936\" alt=\"\"></p><p>用Beam应该怎么实现呢？我们可以应用<a href=\"https://time.geekbang.org/column/article/101735\">第25讲</a>中讲到的side input/output技术。同样的还是把用户群组都定义成不同的PCollection。最终的输出会是三个PCollection。</p><pre><code>// 首先定义每一个output的tag\nfinal TupleTag&lt;User&gt; fiveStarMembershipTag = new TupleTag&lt;User&gt;(){};\nfinal TupleTag&lt;User&gt; goldenMembershipTag = new TupleTag&lt;User&gt;(){};\nfinal TupleTag&lt;User&gt; diamondMembershipTag = new TupleTag&lt;User&gt;(){};\n\nPCollection&lt;User&gt; userCollection = ...;\n\nPCollectionTuple mixedCollection =\n    userCollection.apply(ParDo\n        .of(new DoFn&lt;User, User&gt;() {\n          @ProcessElement\n          public void processElement(ProcessContext c) {\n            if (isFiveStartMember(c.element())) {\n              c.output(c.element());\n            } else if (isGoldenMember(c.element())) {\n              c.output(goldenMembershipTag, c.element());\n            } else if (isDiamondMember(c.element())) {\n\t  c.output(diamondMembershipTag, c.element());\n\t}\n          }\n        })\n        .withOutputTags(fiveStarMembershipTag,\n                        TupleTagList.of(goldenMembershipTag).and(diamondMembershipTag)));\n\n// 分离出不同的用户群组\nmixedCollection.get(fiveStarMembershipTag).apply(...);\n\nmixedCollection.get(goldenMembershipTag).apply(...);\n\nmixedCollection.get(diamondMembershipTag).apply(...);\n</code></pre><p>比如在上面的代码中，我们在processElement()方法中，根据过滤函数，分拆出五星会员，金牌会员和钻石会员。并且把不同的会员等级输出到不同的side output tag中。之后可以在返回的PCollection中用这个side output tag得到想要的输出。</p><h2>合并模式的Pipeline设计</h2><p>合并模式（Joiner Pattern）会将多个不同的数据集合成一个总数据集，一并进行处理。之前介绍的合并模式案例是用街头美团外卖电动车的数量来预测美团的股价。</p><p>数据接入这一处理模块里，我们的输入数据有自己团队在街道上拍摄到的美团外卖电动车图片和第三方公司提供的美团外卖电动车图片。我们需要先整合所有数据然后进行其它数据处理。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/ed/1c4bc9aaebc908633da174ba847999ed.jpg?wh=1882*1090\" alt=\"\"></p><p>使用Beam合并多个PCollection时，需要用到Beam自带的Flatten这个Transform函数，它的作用是把来自多个PCollection类型一致的元素融合到一个PCollection中去。下面的代码用元素类型为Image的PCollection来表达输入数据和输出数据。</p><pre><code>PCollectionList&lt;Image&gt; collectionList = PCollectionList.of(internalImages).and(thirdPartyImages);\nPCollection&lt;Image&gt; mergedCollectionWithFlatten = collectionList\n    .apply(Flatten.&lt;Image&gt;pCollections());\n\nmergedCollectionWithFlatten.apply(...);\n</code></pre><p>例如，在上面的代码示例中，我们把internalImages和thirdPartyImages两个PCollection融合到一起。使用apply(Flatten)这样一个Transform实现多个PCollection的平展。</p><h2>小结</h2><p>今天我们一起学习了怎样在Beam中设计实现第7讲介绍的经典数据处理模式，分别是4种设计模式，分别是复制模式、过滤模式、分离模式和合并模式。</p><p>在实现这四种数据处理模式的过程中，我们学到了两种Beam Transform的两个重要技术，分别是分离模式中用到的side output，和在合并模式中用到的Flatten。正如前文所说，第7讲的经典数据处理模式就像是武功的基本套路，实战项目中可能80%都是这些基本套路的组合。有了这些小型的模块实现，对我们未来实现大型系统是有很大帮助的。</p><h2>思考题</h2><p>在你的项目中有没有这四种设计模式的影子呢？如果有的话你觉得可以怎样用Beam Pipeline实现呢？</p><p>欢迎你把答案写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。</p><p></p>","neighbors":{"left":{"article_title":"27 | Pipeline I/O: Beam数据中转的设计模式","id":102578},"right":{"article_title":"29 | 如何测试Beam Pipeline？","id":103750}},"comments":[{"had_liked":false,"id":107300,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1561512720,"is_pvip":false,"replies":[{"id":"39221","content":"你这个问题问的很好啊，beam的join的确没有sql的join那么丰富。这是因为性能的原因只提供最基本的join。和union是不一样的，union指的是column一样的时候叠起来。","user_name":"作者回复","user_name_real":"Yuannan蔡元楠","uid":"1257426","ctime":1561704104,"ip_address":"","comment_id":107300,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14446414608","product_id":100025301,"comment_content":"Beam Pipeline的合并模式是否支持keyed join，inner&#47;left outer&#47;right outer&#47;full outer都支持吗? 看上面的代码示例虽然是叫Joiner Pattern，实际效果却是Union。分离模式倒是跟flink的split&#47;select算子组合很类似。","like_count":4,"discussions":[{"author":{"id":1257426,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/d2/0b6a8945.jpg","nickname":"Yuannan蔡元楠","note":"","ucode":"695E183CE496A8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455456,"discussion_content":"你这个问题问的很好啊，beam的join的确没有sql的join那么丰富。这是因为性能的原因只提供最基本的join。和union是不一样的，union指的是column一样的时候叠起来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561704104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897610,"avatar":"","nickname":"Fiery","note":"","ucode":"CDB000687A6B14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204194,"discussion_content":"感觉应该叫combine而不是join。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584125751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126201,"user_name":"人唯优","can_delete":false,"product_type":"c1","uid":1503129,"ip_address":"","ucode":"7949FE2500759B","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/99/cc30e2ca.jpg","comment_is_top":false,"comment_ctime":1566349331,"is_pvip":false,"replies":[{"id":"47605","content":"不管是OCR还是什么都是一种数据处理。我们这里的数据处理指的是一种抽象","user_name":"作者回复","user_name_real":"Yuannan蔡元楠","uid":"1257426","ctime":1566882747,"ip_address":"","comment_id":126201,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10156283923","product_id":100025301,"comment_content":"平台的自然语言理解（NLP）的数据处理模块可以分析视频数据，自动生成视频字幕。<br>感觉这里不是很严谨，字幕这块应该是OCR+ASR为主吧","like_count":3,"discussions":[{"author":{"id":1257426,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/d2/0b6a8945.jpg","nickname":"Yuannan蔡元楠","note":"","ucode":"695E183CE496A8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463881,"discussion_content":"不管是OCR还是什么都是一种数据处理。我们这里的数据处理指的是一种抽象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566882747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127190,"user_name":"abc-web","can_delete":false,"product_type":"c1","uid":1371804,"ip_address":"","ucode":"DE3B873863EFF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/9c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1566603441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5861570737","product_id":100025301,"comment_content":"老师，你的课程是否有实际的实例代码，这样学习效果会更好些；","like_count":1},{"had_liked":false,"id":107515,"user_name":"Ming","can_delete":false,"product_type":"c1","uid":1516011,"ip_address":"","ucode":"69BB73B8AB7E3F","user_header":"https://static001.geekbang.org/account/avatar/00/17/21/eb/bb2e7a3b.jpg","comment_is_top":false,"comment_ctime":1561549548,"is_pvip":false,"replies":[{"id":"39219","content":"一个集群有可能同时执行两个pipeline的","user_name":"作者回复","user_name_real":"Yuannan蔡元楠","uid":"1257426","ctime":1561703713,"ip_address":"","comment_id":107515,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5856516844","product_id":100025301,"comment_content":"我也有个小问题：在实践中一个集群往往同一时间只能执行一个pipeline吗？假如一个产品需要用到文中的全部四个例子，两个流处理两个批处理，实践中往往是有四个集群，还是一个集群？","like_count":2,"discussions":[{"author":{"id":1257426,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/d2/0b6a8945.jpg","nickname":"Yuannan蔡元楠","note":"","ucode":"695E183CE496A8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455542,"discussion_content":"一个集群有可能同时执行两个pipeline的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561703713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1341276,"avatar":"https://static001.geekbang.org/account/avatar/00/14/77/5c/8d53165e.jpg","nickname":"bingo","note":"","ucode":"DD96820EC8871D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":18189,"discussion_content":"一个集群可以同时执行好几个woker，\npipline一般包含好几个worker。\n因此一个集群中可以同时执行多个pipline中的不同worker，这取决于集群中的硬件资源和调度，因为一个pipline一般会独占好几个CPU核和一些内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569030630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107273,"user_name":"JohnT3e","can_delete":false,"product_type":"c1","uid":1063982,"ip_address":"","ucode":"CF4AAAC933529C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLdWHFCr66TzHS2CpCkiaRaDIk3tU5sKPry16Q7ic0mZZdy8LOCYc38wOmyv5RZico7icBVeaPX8X2jcw/132","comment_is_top":false,"comment_ctime":1561510620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856477916","product_id":100025301,"comment_content":"老师，有几个问题不解。在复制或者分离模式下，每个处理和输出是不同步的吧，如果业务上对不同输出有同步要求时，怎么办？复制或者分离模式和组合模式进行组合时，上一步的输出不同步或者延迟较大会加大后续组合时数据业务时间乱序问题（特别是流处理）这时有解决办法吗或者其它思路","like_count":1},{"had_liked":false,"id":107249,"user_name":"蒙开强","can_delete":false,"product_type":"c1","uid":1317706,"ip_address":"","ucode":"61B3183781B9F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/1b/4a/f9df2d06.jpg","comment_is_top":false,"comment_ctime":1561508448,"is_pvip":false,"replies":[{"id":"39222","content":"CDC是什么？","user_name":"作者回复","user_name_real":"Yuannan蔡元楠","uid":"1257426","ctime":1561704190,"ip_address":"","comment_id":107249,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5856475744","product_id":100025301,"comment_content":"老师你好，我问一个大数据相关的问题呢，在大数据处理场景中有没有什么好的CDC方案额。","like_count":1,"discussions":[{"author":{"id":1257426,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/d2/0b6a8945.jpg","nickname":"Yuannan蔡元楠","note":"","ucode":"695E183CE496A8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455437,"discussion_content":"CDC是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561704190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010800,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcpl3Z0ZC7lw9iabQXEHUFJ8t5KcpzzQdVdLM1Ba1Q42ariceuUy2QrWELib3s2HA58vFDM6vEYr2WA/132","nickname":"hhzz","note":"","ucode":"46DE87F6BADEE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330976,"discussion_content":"宜信用的dbus不错，已经开源，github可以找到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606742624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148701,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/1d/2ce965da.jpg","nickname":"深擎技术","note":"","ucode":"9232B1FC69F7C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247122,"discussion_content":"changed data capture。著名的如debezium，基于数据库主从复制技术。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587798599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346689,"user_name":"闫少伟","can_delete":false,"product_type":"c1","uid":2029856,"ip_address":"","ucode":"489C81C3025B2C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f9/20/3dc898af.jpg","comment_is_top":false,"comment_ctime":1653361068,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653361068","product_id":100025301,"comment_content":"PCollection userCollection = ...;<br>PCollection diamondUserCollection = userCollection.apply(&quot;filterDiamondUserTransform&quot;, ParDo.of(new DoFn(){ @ProcessElement public void processElement(ProcessContext c) { if (isDiamondUser(c.element()) { c.output(c.element()); } }}));<br>PCollection notifiedUserCollection = userCollection.apply(&quot;notifyUserTransform&quot;, ParDo.of(new DoFn(){ @ProcessElement public void processElement(ProcessContext c) { if (notifyUser(c.element()) { c.output(c.element()); } }}));<br>这里notifiedUserCollection ，是不是要用diamondUserCollection.apply呀？","like_count":0},{"had_liked":false,"id":109753,"user_name":"juan","can_delete":false,"product_type":"c1","uid":1503525,"ip_address":"","ucode":"2799013456F532","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/25/6908f80a.jpg","comment_is_top":false,"comment_ctime":1562107262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562107262","product_id":100025301,"comment_content":"<br>          @ProcessElement<br>          public void processElement(ProcessContext c) {<br>            if (isFiveStartMember(c.element())) {<br>              c.output(c.element());  &#47;&#47; 忘了 starmemember ???c.output(fiveStartMemberTag,c.element());<br>            } else if (isGoldenMember(c.element())) {<br>              c.output(goldenMembershipTag, c.element());<br>            } else if (isDiamondMember(c.element())) {<br>\t  c.output(diamondMembershipTag, c.element());<br>\t}<br>          }<br>        })<br><br><br>","like_count":0}]}