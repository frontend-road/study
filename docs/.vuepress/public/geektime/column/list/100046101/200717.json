{"id":200717,"title":"04 | BASE理论：CAP的碱，追求可用性","content":"<p>你好，我是韩健。</p><p>很多同学可能喜欢使用事务型的分布式系统，或者是强一致性的分布式系统，因为使用起来很方便，不需要考虑太多，就像使用单机系统一样。但是学了CAP理论后，你肯定知道在分布式系统中要实现强一致性必然会影响可用性。比如，在采用两阶段提交协议的集群系统中，因为执行提交操作，需要所有节点确认和投票。</p><p>所以，集群的可用性是每个节点可用性的乘积，比如，假设3个节点的集群，每个节点的可用性为99.9％，那么整个集群的可用性为99.7％，也就是说，每个月约宕机129.6分钟，<strong>这是非常严重的问题。</strong> 而解决可用性低的关键在于，根据实际场景，尽量采用可用性优先的AP模型。</p><p>讲到这儿，可能会有一些同学“举手提问”：这也太难了，难道没有现成的库或者方案，来实现合适的AP模型？是的，的确没有。因为它是一个动态模型，是基于业务场景特点妥协折中后设计实现的。不过，你可以借助BASE理论帮助你达成目的。</p><p>在我看来，BASE理论是CAP理论中的AP的延伸，是对互联网大规模分布式系统的实践总结，强调可用性。几乎所有的互联网后台分布式系统都有BASE的支持，这个理论很重要，地位也很高。一旦掌握它，你就能掌握绝大部分场景的分布式系统的架构技巧，设计出适合业务场景特点的、高可用性的分布式系统。</p><!-- [[[read_end]]] --><p>而它的核心就是基本可用（Basically Available）和最终一致性（Eventually consistent）。也有人会提到软状态（Soft state），在我看来，软状态描述的是实现服务可用性的时候系统数据的一种过渡状态，也就是说不同节点间，数据副本存在短暂的不一致。你只需要知道软状态是一种过渡状态就可以了，我们不多说。</p><p>那么基本可用以及最终一致性到底是什么呢？你又如何在实践中使用BASE理论提升系统的可用性呢？这些就是本节课的重点了，而我建议你集中注意力，认真学习本节课的内容，学以致用，将BASE理论应用到日常工作中。</p><h2>实现基本可用的4板斧</h2><p>在我看来，基本可用是说，当分布式系统在出现不可预知的故障时，允许损失部分功能的可用性，保障核心功能的可用性。就像弹簧一样，遇到外界的压迫，它不是折断，而是变形伸缩，不断适应外力，实现基本的可用。</p><p>具体说的话，你可以把基本可用理解成，当系统节点出现大规模故障的时候，比如专线的光纤被挖断、突发流量导致系统过载（出现了突发事件，服务被大量访问），这个时候可以通过服务降级，牺牲部分功能的可用性，保障系统的核心功能可用。</p><p>就拿12306订票系统基本可用的设计为例，这个订票系统在春运期间，因为开始售票后先到先得的缘故，会出现极其海量的请求峰值，如何处理这个问题呢？</p><p>咱们可以在不同的时间，出售不同区域的票，将访问请求错开，削弱请求峰值。比如，在春运期间，深圳出发的火车票在8点开售，北京出发的火车票在9点开售。<strong>这就是我们常说的流量削峰。</strong></p><p>另外，你可能已经发现了，在春运期间，自己提交的购票请求，往往会在队列中排队等待处理，可能几分钟或十几分钟后，系统才开始处理，然后响应处理结果，<strong>这就是你熟悉的延迟响应。</strong> 你看，12306订票系统在出现超出系统处理能力的突发流量的情况下，会通过牺牲响应时间的可用性，保障核心功能的运行。</p><p>而12306通过流量削峰和延迟响应，是不是就实现了基本的可用呢？现在它不会再像最初的时候那样，常常404了吧？</p><p>再比如，你正负责一个互联网系统，突然出现了网络热点事件，好多用户涌进来，产生了海量的突发流量，系统过载了，大量图片因为网络超时无法显示。那么这个时候你可以通过哪些方法，保障系统的基本可用呢？</p><p><strong>相信你马上就能想到体验降级，</strong> 比如用小图片来替代原始图片，通过降低图片的清晰度和大小，提升系统的处理能力。</p><p><strong>然后你还能想到过载保护，</strong> 比如把接收到的请求放在指定的队列中排队处理，如果请求等待时间超时了（假设是100ms），这个时候直接拒绝超时请求；再比如队列满了之后，就清除队列中一定数量的排队请求，保护系统不过载，实现系统的基本可用。</p><p><strong>你看，和12306的设计类似，只不过你负责的互联网系统是通过牺牲部分功能的可用性，保障核心功能的运行。</strong></p><p>我说了这么多，主要是想强调：基本可用在本质上是一种妥协，也就是在出现节点故障或系统过载的时候，通过牺牲非核心功能的可用性，保障核心功能的稳定运行。</p><p>我希望你能在后续的分布式系统的开发中，<strong>不仅掌握流量削峰、延迟响应、体验降级、过载保护这4板斧</strong>，更能理解这4板斧背后的妥协折中，从而灵活地处理不可预知的突发问题。</p><p>带你了解了基本可用之后，我再来说说BASE理论中，另一个非常核心的内容：最终一致性。</p><h2>最终的一致</h2><p>在我看来，最终一致性是说，系统中所有的数据副本在经过一段时间的同步后，最终能够达到一个一致的状态。也就是说，在数据一致性上，存在一个短暂的延迟。</p><p>几乎所有的互联网系统采用的都是最终一致性，只有在实在无法使用最终一致性，才使用强一致性或事务，比如，对于决定系统运行的敏感元数据，需要考虑采用强一致性，对于与钱有关的支付系统或金融系统的数据，需要考虑采用事务。</p><p>你可以将强一致性理解为最终一致性的特例，也就是说，你可以把强一致性看作是不存在延迟的一致性。<strong>在实践中，你也可以这样思考：</strong> 如果业务的某功能无法容忍一致性的延迟（比如分布式锁对应的数据），需要实现的是强一致性；如果能容忍短暂的一致性的延迟（比如QQ状态数据），就可以考虑最终一致性。</p><p>那么如何实现最终一致性呢？你首先要知道它以什么为准，因为这是实现最终一致性的关键。一般来说，在实际工程实践中有这样几种方式：</p><ul>\n<li>以最新写入的数据为准，比如AP模型的KV存储采用的就是这种方式；</li>\n<li>以第一次写入的数据为准，如果你不希望存储的数据被更改，可以以它为准。</li>\n</ul><p>那实现最终一致性的具体方式是什么呢？常用的有这样几种。</p><ul>\n<li>读时修复：在读取数据时，检测数据的不一致，进行修复。比如Cassandra 的Read Repair实现，具体来说，在向Cassandra系统查询数据的时候，如果检测到不同节点的副本数据不一致，系统就自动修复数据。</li>\n<li>写时修复：在写入数据，检测数据的不一致时，进行修复。比如Cassandra 的Hinted Handoff实现。具体来说，Cassandra集群的节点之间远程写数据的时候，如果写失败就将数据缓存下来，然后定时重传，修复数据的不一致性。</li>\n<li>异步修复：这个是最常用的方式，通过定时对账检测副本数据的一致性，并修复（更多信息可以参考<a href=\"https://time.geekbang.org/column/article/208182\">11讲</a>的反熵）。</li>\n</ul><p>在这里，我想强调的是因为写时修复不需要做数据一致性对比，性能消耗比较低，对系统运行影响也不大，所以我推荐你在实现最终一致性时优先实现这种方式。而读时修复和异步修复因为需要做数据的一致性对比，性能消耗比较多，在开发实际系统时，你要尽量优化一致性对比的算法，降低性能消耗，避免对系统运行造成影响。</p><p>另外，我还想补充一点，在实现最终一致性的时候，<strong>我推荐同时实现自定义写一致性级别（比如All、Quorum、One、Any，更多信息你可以看一下<a href=\"https://time.geekbang.org/column/article/209130\">12讲</a>），</strong> 让用户可以自主选择相应的一致性级别，比如可以通过设置一致性级别为All，来实现强一致性。</p><p>现在，想必你了解了BASE理论的核心内容了吧？不过这是理论层面上的，那么在实践中，该如何使用BASE理论的呢？</p><h2>如何使用BASE理论</h2><p>我以自研InfluxDB系统中DATA节点的集群实现为例，带你来使用BASE理论。咱们先来看看如何保障基本可用。</p><p>DATA节点的核心功能是读和写，所以基本可用是指读和写的基本可用。那么我们可以通过分片和多副本，实现读和写的基本可用。也就是说，将同一业务的数据先分片，然后再以多份副本的形式分布在不同的节点上。比如下面这张图，这个3节点2副本的集群，除非超过一半的节点都故障了，否则是能保障所有数据的读写的。</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/d6/ae5fd43f4c878d0acdc188e9889d29d6.jpg?wh=1142*618\" alt=\"\"></p><p>那么如果实现最终一致性呢？就像我上文提到的样子，我们可以通过写时修复和异步修复实现最终一致性。另外，还实现自定义写一致性级别，支持All、Quorum、One、Any 4种写一致性级别，用户在写数据的时候，可以根据业务数据的特点，设置不同的写一致性级别。</p><h2>内容小结</h2><p>本节课我主要带你了解了BASE理论，以及BASE理论的应用，我希望你明确几个重点：</p><ol>\n<li>\n<p>BASE理论是对CAP中一致性和可用性权衡的结果，它来源于对大规模互联网分布式系统实践的总结，是基于CAP定理逐步演化而来的。它的核心思想是，如果不是必须的话，不推荐实现事务或强一致性，鼓励可用性和性能优先，根据业务的场景特点，来实现非常弹性的基本可用，以及实现数据的最终一致性。</p>\n</li>\n<li>\n<p>BASE理论主张通过牺牲部分功能的可用性，实现整体的基本可用，也就是说，通过服务降级的方式，努力保障极端情况下的系统可用性。</p>\n</li>\n<li>\n<p>ACID理论是传统数据库常用的设计理念，追求强一致性模型。BASE理论支持的是大型分布式系统，通过牺牲强一致性获得高可用性。BASE理论在很大程度上，解决了事务型系统在性能、容错、可用性等方面痛点。另外我再多说一句，BASE理论在NoSQL中应用广泛，是NoSQL系统设计的事实上的理论支撑。</p>\n</li>\n</ol><p>最后我强调一下，对于任何集群而言，不可预知的故障的最终后果，都是系统过载。如何设计过载保护，实现系统在过载时的基本可用，是开发和运营互联网后台的分布式系统的重中之重。那么我建议你，在开发实现分布式系统，要充分考虑如何实现基本可用。</p><h2>课堂思考</h2><p>我在文章中提了一些实现基本可用的方法，比如流量削峰、延迟响应、体验降级、过载保护等，那么你不妨思考一下，还有哪些方法可以用来实现基本可用呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":199947,"user_name":"lupguo","can_delete":false,"product_type":"c1","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1585504701,"is_pvip":false,"replies":[{"id":"75450","content":"加一颗星:)","user_name":"作者回复","comment_id":199947,"uid":"1642497","ip_address":"","utype":1,"ctime":1585844098,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"177679163837","product_id":100046101,"comment_content":"在系统过载情况，一方面考虑提供有损服务，弃朱保帅，另一方面积极寻求资源扩容，提升整体系统的吞吐量<br><br>1. 流量错峰（不同地区售票时间错峰出售）<br>2. 异步处理（买票排队，基于队列先收到用户买票请求，排队异步处理，延迟响应）<br>3. 服务降级（看到非实时数据，采用缓存数据提供服务）<br>4. 过载保护（熔断&#47;限流，直接拒绝掉一部分请求，或者当请求队列满了，移除一部分请求，保证整体系统可用）<br>5. 故障隔离（出现故障，做到故障隔离，避免影响其他服务）<br>6. 弹性扩容（基于Metric和Monitor实现系统态势感知，做到弹性伸缩）","like_count":42,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489901,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585844098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180095,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1582186092,"is_pvip":false,"replies":[{"id":"69964","content":"one表示必须写成功一个节点，any表示所有节点都没写成功，如果请求成功保存到了失败重传的缓存队列中，也算成功。any是最弱的写一致性级别。","user_name":"作者回复","comment_id":180095,"uid":"1642497","ip_address":"","utype":1,"ctime":1582203339,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"117546303084","product_id":100046101,"comment_content":"All、Quorum、One、Any一致性级别中One和Any的区别是什么？","like_count":28,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484520,"discussion_content":"one表示必须写成功一个节点，any表示所有节点都没写成功，如果请求成功保存到了失败重传的缓存队列中，也算成功。any是最弱的写一致性级别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582203339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179830,"user_name":"Purson","can_delete":false,"product_type":"c1","uid":1446120,"ip_address":"","ucode":"5F0C1BB3C0C0A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","comment_is_top":false,"comment_ctime":1582105987,"is_pvip":false,"replies":[{"id":"69860","content":"加一颗星:)，是的，通过写操作的失败错误，发现不一致，然后通过重传修复数据的不一致。","user_name":"作者回复","comment_id":179830,"uid":"1642497","ip_address":"","utype":1,"ctime":1582132447,"user_name_real":"hanj4096"}],"discussion_count":3,"race_medal":0,"score":"74596550019","product_id":100046101,"comment_content":"还有熔断和限流。 发现文稿里面关于最终一致性中，写的描述有矛盾：“写时修复：在写入数据，检测数据的不一致时，进行修复。” 后面 “在这里，我想强调的是因为写时修复不需要做数据一致性对比，性能消耗比较低，”  前面说写的时候有做一致性对比，后面说写的时候没有做一致性对比。其实写的时候修复主要通过失败重试的方式吧？","like_count":18,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484418,"discussion_content":"加一颗星:)，是的，通过写操作的失败错误，发现不一致，然后通过重传修复数据的不一致。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582132447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/f9/b12388bd.jpg","nickname":"weilai","note":"","ucode":"716945DDC77CEA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261906,"discussion_content":"这里有个问题，如果写的时候是超时呢？你如何知道是成功还是失败还是当前不知道过会成功？分布式最大的问题在于没法保证超时的时候到底是成功还是失败？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589021657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1055361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/81/d837966d.jpg","nickname":"Samuel","note":"","ucode":"3374C9BEB429B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/f9/b12388bd.jpg","nickname":"weilai","note":"","ucode":"716945DDC77CEA","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":312406,"discussion_content":"超时也是错误，算失败。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602678712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":261906,"ip_address":""},"score":312406,"extra":""}]}]},{"had_liked":false,"id":179997,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1582162407,"is_pvip":false,"replies":[{"id":"69966","content":"加一颗星:)，互联网只能base，可用性和钱，低性能堆机器，都是钱:)","user_name":"作者回复","comment_id":179997,"uid":"1642497","ip_address":"","utype":1,"ctime":1582203484,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"57416737255","product_id":100046101,"comment_content":"acid是数据库系统经典之作；base是在实践中受挫后的思想松绑，提出一种重要的指导，给人以信心","like_count":14,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484485,"discussion_content":"加一颗星:)，互联网只能base，可用性和钱，低性能堆机器，都是钱:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582203484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179643,"user_name":"Sinclairs","can_delete":false,"product_type":"c1","uid":1019373,"ip_address":"","ucode":"0042C53C86E3A2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/ed/ea2cbf3a.jpg","comment_is_top":false,"comment_ctime":1582052927,"is_pvip":false,"replies":[{"id":"69806","content":"加一颗星:)","user_name":"作者回复","comment_id":179643,"uid":"1642497","ip_address":"","utype":1,"ctime":1582101555,"user_name_real":"hanj4096"}],"discussion_count":2,"race_medal":0,"score":"40236758591","product_id":100046101,"comment_content":"从微服务的角度来考虑, 有这些方式能够尽可能地保证系统的基本可用:<br>1. 使用消息队列, 对偶然的高并发写操作进行削峰填谷;<br>2. 对进程间的服务调用做好熔断保护;<br>3. 在系统能力无法支撑高并发访问时, 对非核心业务降级;<br>4. 对关键服务做好限流.","like_count":10,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484340,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582101555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243901,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","nickname":"fcb的鱼","note":"","ucode":"88667EBF09CEC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179428,"discussion_content":"还有一点，需要让服务能有自动扩容的能力.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582213468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180230,"user_name":"fcb的鱼","can_delete":false,"product_type":"c1","uid":1243901,"ip_address":"","ucode":"88667EBF09CEC0","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","comment_is_top":false,"comment_ctime":1582214004,"is_pvip":false,"replies":[{"id":"70319","content":"每种方案，都有自己比较适合的场景的，比如读时修复，在实现了Quorum NWR时，意义比较大，因为，本来就需要读多副本，发现不一致了，就顺便修复。<br>在AP模型系统中，一般是需要实现异步修复的，不过具体的技术方案，还是取决于场景。<br>咱们这么理解哈，技术是解决场景问题的，使用哪些技术？如何使用技术？是取决于场景的，也就是需求。","user_name":"作者回复","comment_id":180230,"uid":"1642497","ip_address":"","utype":1,"ctime":1582554565,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"31646985076","product_id":100046101,"comment_content":"实现最终一致性的方案中,更侧重于存储层面的事情吧。假设有A,B,C三个节点，那么&quot;读时修复&quot;方案是不是意味着每个读操作，会同时访问这三个节点吗，然后比对三个节点返回的数据是否一样，一样的话返回任意一个节点的数据，不一样了再以最新的数据为准，并且修复其他不同节点的数据？在AP模型的应用中，是不是得同时校验几个节点的数据是否一致？","like_count":8,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484574,"discussion_content":"每种方案，都有自己比较适合的场景的，比如读时修复，在实现了Quorum NWR时，意义比较大，因为，本来就需要读多副本，发现不一致了，就顺便修复。\n在AP模型系统中，一般是需要实现异步修复的，不过具体的技术方案，还是取决于场景。\n咱们这么理解哈，技术是解决场景问题的，使用哪些技术？如何使用技术？是取决于场景的，也就是需求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582554565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210040,"user_name":"NEO🍋","can_delete":false,"product_type":"c1","uid":1166817,"ip_address":"","ucode":"802C34758A5185","user_header":"https://static001.geekbang.org/account/avatar/00/11/cd/e1/368f872c.jpg","comment_is_top":false,"comment_ctime":1587656026,"is_pvip":false,"replies":[{"id":"79324","content":"加一颗星:)，感谢反馈。修复的是数据的不一致性，因为为了实现最终一致性。All、异步修复，在11、12讲有更细节的介绍，已修正，加链接。关于文中案例，或者没有细节案例演示的内容，比如读时修复，我后面会迭代和补充。","user_name":"作者回复","comment_id":210040,"uid":"1642497","ip_address":"","utype":1,"ctime":1588682588,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"27357459802","product_id":100046101,"comment_content":"All、Quorum、One、Any 是什么？没有介绍；<br>读写时修复 异步修复 又是个什么？修复什么？为什么需要修复？怎么修复？没讲清楚 难以理解 记住；<br>建议优化讲课方式 关键术语前置介绍 关键动作配合案例(不是一个大而泛的案例-比如文中的自研库 而是非常具体的数据例子)","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492921,"discussion_content":"加一颗星:)，感谢反馈。修复的是数据的不一致性，因为为了实现最终一致性。All、异步修复，在11、12讲有更细节的介绍，已修正，加链接。关于文中案例，或者没有细节案例演示的内容，比如读时修复，我后面会迭代和补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588682588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180263,"user_name":"远方","can_delete":false,"product_type":"c1","uid":1064732,"ip_address":"","ucode":"244C74F9857196","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/1c/1e4dfbc9.jpg","comment_is_top":false,"comment_ctime":1582243628,"is_pvip":false,"replies":[{"id":"71054","content":"这两个之前没怎么研究过。这样哈，这个问题我先记下，后面，我研究下，做个补充:)","user_name":"作者回复","comment_id":180263,"uid":"1642497","ip_address":"","utype":1,"ctime":1583070032,"user_name_real":"hanj4096"}],"discussion_count":4,"race_medal":0,"score":"27352047404","product_id":100046101,"comment_content":"hadoop的hdfs文件系统和kafka消息队列，按我的理解，也是基于ap的扩展base理论开发的，是这样的吧？","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484589,"discussion_content":"这两个之前没怎么研究过。这样哈，这个问题我先记下，后面，我研究下，做个补充:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583070032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388517,"discussion_content":"啊 资深工程师 也没研究过吗》？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628818573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1064732,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3f/1c/1e4dfbc9.jpg","nickname":"远方","note":"","ucode":"244C74F9857196","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192562,"discussion_content":"谢谢，麻烦您得出结论后，告诉我下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583076280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2341933,"avatar":"https://static001.geekbang.org/account/avatar/00/23/bc/2d/726d7eea.jpg","nickname":"老叮当","note":"","ucode":"19541C3B7CA6C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1064732,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3f/1c/1e4dfbc9.jpg","nickname":"远方","note":"","ucode":"244C74F9857196","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355705,"discussion_content":"这个问题我也想问，想问问你有结论了没","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615470502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":192562,"ip_address":""},"score":355705,"extra":""}]}]},{"had_liked":false,"id":179866,"user_name":"川杰","can_delete":false,"product_type":"c1","uid":1099750,"ip_address":"","ucode":"815211E1D698E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","comment_is_top":false,"comment_ctime":1582113609,"is_pvip":false,"replies":[{"id":"69862","content":"可以这么理解，写时修复，写失败时，将数据缓存到本地磁盘上，然后周期性的重传，本质上，就是失败重传。<br>第二个问题，所有数据，都不一样，这时现实场景肯定会出现的情况，可以通过多次执行异步修复，来实现一致性。具体的实现方法，我会在11讲，具体说说:)","user_name":"作者回复","comment_id":179866,"uid":"1642497","ip_address":"","utype":1,"ctime":1582132944,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"23056950089","product_id":100046101,"comment_content":"请问：写时修复：在写入数据，检测数据的不一致时，进行修复；这个比对，是指和其它节点数据比对吧？那么数据以谁为准呢？极端情况下，每个节点上的数据都不一样，我该听谁的？","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484433,"discussion_content":"可以这么理解，写时修复，写失败时，将数据缓存到本地磁盘上，然后周期性的重传，本质上，就是失败重传。\n第二个问题，所有数据，都不一样，这时现实场景肯定会出现的情况，可以通过多次执行异步修复，来实现一致性。具体的实现方法，我会在11讲，具体说说:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582132944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179684,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1464199,"ip_address":"","ucode":"854500026E2187","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhuGLVRYZibOTfMumk53Wn8Q0Rkg0o6DzTicbibCq42lWQoZ8lFeQvicaXuZa7dYsr9URMrtpXMVDDww/132","comment_is_top":false,"comment_ctime":1582078577,"is_pvip":false,"replies":[{"id":"69800","content":"加一颗星:)","user_name":"作者回复","comment_id":179684,"uid":"1642497","ip_address":"","utype":1,"ctime":1582101300,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"23056915057","product_id":100046101,"comment_content":"重试、幂等、异步、负载均衡、故障隔离、流量切换、自动扩缩容、兜底（熔断限流降级）、容量规划","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484352,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582101300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179648,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1582070216,"is_pvip":false,"replies":[{"id":"69804","content":"加一颗星:)","user_name":"作者回复","comment_id":179648,"uid":"1642497","ip_address":"","utype":1,"ctime":1582101520,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":1,"score":"23056906696","product_id":100046101,"comment_content":"1.服务调用之间做好流量限制，即限流，避免瞬时打进大量流量<br>2.利用MQ实现削峰填谷<br>3.熔断降级也是一种保证基本可用的方案，但实际工作中我还没尝试过","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484343,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582101520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183468,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1583047864,"is_pvip":false,"replies":[{"id":"76372","content":"加一颗星:)，MQ能很好的弥补ES写性能差、支持突发流量能力弱的痛点。","user_name":"作者回复","comment_id":183468,"uid":"1642497","ip_address":"","utype":1,"ctime":1586377263,"user_name_real":"hanj4096"}],"discussion_count":4,"race_medal":0,"score":"18762917048","product_id":100046101,"comment_content":"针对文中实现最终一致性的具体方式中，自己在项目中是将写时修复与异步一起用。举个例子，比如用户修改了数据，数据落库到MySQL，通过AOP切面的方式通过MQ消息异步更新数据到ES，实现最终一致性。个人觉得这样在写请求量大时，可减少延迟响应。如果写请求量较少，也可直接省掉MQ这一步，直接同步写到ES，但是要保证MySQL和ES的数据最终一致。","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485695,"discussion_content":"加一颗星:)，MQ能很好的弥补ES写性能差、支持突发流量能力弱的痛点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586377263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061786,"avatar":"https://static001.geekbang.org/account/avatar/00/10/33/9a/a323b2f1.jpg","nickname":"悠悠小竹子","note":"","ucode":"A5E6731D28EBF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321078,"discussion_content":"直接监控binlog不香么？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604539392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1061786,"avatar":"https://static001.geekbang.org/account/avatar/00/10/33/9a/a323b2f1.jpg","nickname":"悠悠小竹子","note":"","ucode":"A5E6731D28EBF9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321235,"discussion_content":"是的 可以用阿里的canal实现 我们没有用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604551371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321078,"ip_address":""},"score":321235,"extra":""}]},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332857,"discussion_content":"感觉大佬才是玩分布式的啊，我像个停留在理论的云玩家","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607355531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202076,"user_name":"reven404","can_delete":false,"product_type":"c1","uid":1022868,"ip_address":"","ucode":"F84AAF2DC1D18F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/94/4977913a.jpg","comment_is_top":false,"comment_ctime":1585898846,"is_pvip":true,"replies":[{"id":"75545","content":"两阶段提交协议限制的，也就是执行一个操作，需要所有节点确认和投票。","user_name":"作者回复","comment_id":202076,"uid":"1642497","ip_address":"","utype":1,"ctime":1585931462,"user_name_real":"hanj4096"}],"discussion_count":2,"race_medal":0,"score":"14470800734","product_id":100046101,"comment_content":"“所以，集群的可用性是每个节点可用性的乘积，比如，假设 3 个节点的集群，每个节点的可用性为 99.9％，那么整个集群的可用性为 99.7％”按道理除非同时宕机否则其中一个宕机其他节点不是应该继续提供服务么？为什么可用性还是会降低，这里的集群定义是不是有其他特殊的含义？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490500,"discussion_content":"两阶段提交协议限制的，也就是执行一个操作，需要所有节点确认和投票。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585931462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1755152,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VTPuhJb5xxuRwH1iblqrAe3De4PoETgNWibZRkLlhvszysdtpAvSPZFuYtsJfWJmoXOFFWnpR02W9NGIiammU8UPg/132","nickname":"Info_E","note":"","ucode":"97207B2CC4C776","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369357,"discussion_content":"这里是要求所有服务可用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619011162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229126,"user_name":"一个慢慢爬行的普通人","can_delete":false,"product_type":"c1","uid":1193589,"ip_address":"","ucode":"D38C25E119BCD7","user_header":"https://static001.geekbang.org/account/avatar/00/12/36/75/e346e04e.jpg","comment_is_top":false,"comment_ctime":1592901701,"is_pvip":false,"replies":[{"id":"87381","content":"加一颗星:)，因为写时修复，本质是“失败 - 缓存 - 重传”的重试机制，不涉及到一致性对比。","user_name":"作者回复","comment_id":229126,"uid":"1642497","ip_address":"","utype":1,"ctime":1595438094,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5887868997","product_id":100046101,"comment_content":"为什么写时修复不需要做一致性对比","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499343,"discussion_content":"加一颗星:)，因为写时修复，本质是“失败 - 缓存 - 重传”的重试机制，不涉及到一致性对比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595438094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193367,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1584891065,"is_pvip":false,"replies":[{"id":"75567","content":"加一颗星:)，权衡折中，妥协妥协，再妥协:)","user_name":"作者回复","comment_id":193367,"uid":"1642497","ip_address":"","utype":1,"ctime":1585936748,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5879858361","product_id":100046101,"comment_content":"酸碱中和。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488548,"discussion_content":"加一颗星:)，权衡折中，妥协妥协，再妥协:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585936748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184926,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1583454099,"is_pvip":false,"replies":[{"id":"76195","content":"加一颗星:)，服务器节点的磁盘。","user_name":"作者回复","comment_id":184926,"uid":"1642497","ip_address":"","utype":1,"ctime":1586286816,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5878421395","product_id":100046101,"comment_content":"写时修复，写失败将数据缓存到本地磁盘上，这个是缓存到客户端磁盘吗？还是服务节点的磁盘？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486174,"discussion_content":"加一颗星:)，服务器节点的磁盘。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586286816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180227,"user_name":"fcb的鱼","can_delete":false,"product_type":"c1","uid":1243901,"ip_address":"","ucode":"88667EBF09CEC0","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","comment_is_top":false,"comment_ctime":1582213357,"is_pvip":false,"replies":[{"id":"70318","content":"从描述看，这是一套复杂的系统，设计混合架构吧，根据场景特点不同，做拆分，这么说可能比较抽象。如果有更具体的信息和需求，咱们可以一起展开讨论下:)<br>最后补充一点，架构之道，在于权衡妥协。","user_name":"作者回复","comment_id":180227,"uid":"1642497","ip_address":"","utype":1,"ctime":1582554110,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5877180653","product_id":100046101,"comment_content":"在使用Base理论的举例中，3节点2个副本的架构中，再各个节点中这2个副本的数据最终要是一样的吧？在一个系统整体的架构中，上游的系统可以使用Base理论，但是底层的系统如支付系统需要使用强一致性，这样的话，支付系统就称为了瓶颈。在这种场景中，整个系统的架构应该如何考虑呢?","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484572,"discussion_content":"从描述看，这是一套复杂的系统，设计混合架构吧，根据场景特点不同，做拆分，这么说可能比较抽象。如果有更具体的信息和需求，咱们可以一起展开讨论下:)\n最后补充一点，架构之道，在于权衡妥协。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582554110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180213,"user_name":"Michael Tesla","can_delete":false,"product_type":"c1","uid":1033053,"ip_address":"","ucode":"C627F090293608","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/5d/ced9b5c2.jpg","comment_is_top":false,"comment_ctime":1582209734,"is_pvip":false,"replies":[{"id":"70314","content":"加一颗星:)","user_name":"作者回复","comment_id":180213,"uid":"1642497","ip_address":"","utype":1,"ctime":1582553195,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5877177030","product_id":100046101,"comment_content":"老师好，请教下这个 3 节点 2 副本的InfluxDB集群的工作流程：<br>1. 正常工作时，某个分片的数据只在节点1写入，然后节点1将数据同步到节点2。<br>2. 如果节点1挂了，客户端就将数据写入节点2。<br>3. 之后，等节点1恢复，节点2将数据同步回节点1（即写时恢复），同时客户端也重新将数据写入节点1。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484568,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582553195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179860,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1582112047,"is_pvip":false,"replies":[{"id":"69861","content":"加一颗星:)","user_name":"作者回复","comment_id":179860,"uid":"1642497","ip_address":"","utype":1,"ctime":1582132578,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":1,"score":"5877079343","product_id":100046101,"comment_content":"这几个“流量削峰、延迟响应、体验降级、过载保护”都是为了实现业务的基本可用的手段。比如在秒杀场景中，会突然之间有大流量的请求涌入，而对付这些过载流量，就需要使用这几个手段来保障业务的可用性。<br>","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484431,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582132578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179810,"user_name":"盘胧","can_delete":false,"product_type":"c1","uid":1650748,"ip_address":"","ucode":"5386CC4C92ECC2","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","comment_is_top":false,"comment_ctime":1582103764,"is_pvip":false,"replies":[{"id":"69859","content":"加一颗星:)","user_name":"作者回复","comment_id":179810,"uid":"1642497","ip_address":"","utype":1,"ctime":1582132261,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5877071060","product_id":100046101,"comment_content":"在最前端链路就做好流量控制，和最后的兜底方案","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484409,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582132261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179777,"user_name":"Fs","can_delete":false,"product_type":"c1","uid":1083184,"ip_address":"","ucode":"0AD0EFB5544B9A","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","comment_is_top":false,"comment_ctime":1582097044,"is_pvip":false,"replies":[{"id":"69809","content":"加一颗星:)，可用性敏感的系统，都要考虑的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582103093,"ip_address":"","comment_id":179777,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877064340","product_id":100046101,"comment_content":"流量削峰、延迟响应、体验降级、过载保护这些也不只是分布式系统问题，单机同样也有","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484392,"discussion_content":"加一颗星:)，可用性敏感的系统，都要考虑的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582103093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324062,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1638276821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638276821","product_id":100046101,"comment_content":"这里关于副本一致性级别的要求，像glusterfs那种可以针对每个数据集设置，但是其实最好可以做到自动化的，在高负载的时候quorum甚至one，但是低负载的时候实现all，这样就降低了repair的负担了。修复的时候如果出现节点变化，很容易有脑裂风险的。","like_count":0},{"had_liked":false,"id":300445,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1625158071,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625158071","product_id":100046101,"comment_content":"收货颇丰","like_count":0},{"had_liked":false,"id":283921,"user_name":"充值一万","can_delete":false,"product_type":"c1","uid":1519086,"ip_address":"","ucode":"1B4B3AEFA9C8C2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epRK5v3IkvSfjicKNKlRLE2nTQUowhMvQkwWWWUSESat8EBbcPvMk4aAjZHGcsE5DCibES9WicHcC9Qw/132","comment_is_top":false,"comment_ctime":1615983904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615983904","product_id":100046101,"comment_content":"老师辛苦。读时修复、写时修复，“检测不同节点数据不一致”，这个检测是谁来负责呢？每次读写都检测吗？（这样性能会大大降低吧）。","like_count":0},{"had_liked":false,"id":282951,"user_name":"曾泽浩","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1615473062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615473062","product_id":100046101,"comment_content":"老师我想问下，这里的最终一致性，是以哪个节点的数据为准呢？在你自研的产品中，只有一个节点是可以写入的吗？","like_count":0},{"had_liked":false,"id":278585,"user_name":"Geek1560","can_delete":false,"product_type":"c1","uid":2028949,"ip_address":"","ucode":"5F27A28B8002E6","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","comment_is_top":false,"comment_ctime":1613110955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613110955","product_id":100046101,"comment_content":"老师，系统如何区分数据是新的还是老的，如果节点之间的写入操作无法做偏序，现在有哪些手段可以进行定序？","like_count":0},{"had_liked":false,"id":270969,"user_name":"哈哈","can_delete":false,"product_type":"c1","uid":2398042,"ip_address":"","ucode":"30BCA5EE55ABE7","user_header":"https://static001.geekbang.org/account/avatar/00/24/97/5a/46de3096.jpg","comment_is_top":false,"comment_ctime":1609333994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609333994","product_id":100046101,"comment_content":"InfluxDB如何做分片，分片后又如何做聚合？尤其又有子查询、group by 感觉很难，没什么思路？","like_count":0},{"had_liked":false,"id":241208,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597216372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597216372","product_id":100046101,"comment_content":"不能一味的缩小服务范围,还可以扩展服务能力,比如使用云平台的弹性扩容功能来进行服务","like_count":0},{"had_liked":false,"id":224738,"user_name":"侧耳倾听","can_delete":false,"product_type":"c1","uid":1512642,"ip_address":"","ucode":"5BF2A2440B54F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","comment_is_top":false,"comment_ctime":1591524838,"is_pvip":true,"replies":[{"id":"87279","content":"加一颗星:)，首先，肯定不能优先考虑事务的，这是CAP理论的问题源头，实现事务，性能低，可用性差。其次，绝大多数互联网系统，对一致性不敏感，可用性敏感，采用最终一致性，实现有损服务，更合适。最后，就是成本，如果采用强一致性或事务，机器成本，很高，这些都是钱。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595347854,"ip_address":"","comment_id":224738,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591524838","product_id":100046101,"comment_content":"几乎所有的互联网系统采用的都是最终一致性，只有在实在无法使用最终一致性，才使用强一致性或事务，比如，对于决定系统运行的敏感元数据，需要考虑采用强一致性，对于与钱有关的支付系统或金融系统的数据，需要考虑采用事务。<br>————<br>觉得这段话描述的有些歧义，互联网系统应该大部分依然采用的是强一致性的策略，最终一致性是在无法实现强一致性事务时的妥协，主宾有些倒置的感觉。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497589,"discussion_content":"加一颗星:)，首先，肯定不能优先考虑事务的，这是CAP理论的问题源头，实现事务，性能低，可用性差。其次，绝大多数互联网系统，对一致性不敏感，可用性敏感，采用最终一致性，实现有损服务，更合适。最后，就是成本，如果采用强一致性或事务，机器成本，很高，这些都是钱。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595347854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222619,"user_name":"Michael Tesla","can_delete":false,"product_type":"c1","uid":1033053,"ip_address":"","ucode":"C627F090293608","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/5d/ced9b5c2.jpg","comment_is_top":false,"comment_ctime":1590849862,"is_pvip":false,"replies":[{"id":"87268","content":"加一颗星:)，常用的是版本号或时间戳。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595343876,"ip_address":"","comment_id":222619,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590849862","product_id":100046101,"comment_content":"老师，你好！文中提到最终一致性可以“以最新写入的数据为准”，分布式系统中这个“最新”怎么定义？我想到版本号来实现，除了这个，还有其他办法吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496865,"discussion_content":"加一颗星:)，常用的是版本号或时间戳。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595343876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207931,"user_name":"vv","can_delete":false,"product_type":"c1","uid":1740778,"ip_address":"","ucode":"FA3AC16EB5845A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8f/ea/a92ed8a2.jpg","comment_is_top":false,"comment_ctime":1587218274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587218274","product_id":100046101,"comment_content":"感觉跟kafka实现的差不多","like_count":0},{"had_liked":false,"id":205219,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1586572607,"is_pvip":false,"replies":[{"id":"76732","content":"加一颗星:)，值1，以最新的数据为准。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586619947,"ip_address":"","comment_id":205219,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1586572607","product_id":100046101,"comment_content":"最终一致性的实现，其实我还不是很了解。我想到了一个ABA问题，如 DB1 DB2 构成系统，并发生通信异常，DB1 的数据A 从 1-&gt;2-&gt;1，其实它的更新是最新的，而 DB2 的数据A 从 1 -&gt; 3，这个数据快于 DB1 1-&gt;2 , 但慢于其 2 -&gt; 1，这个时候，集群对数据A应该是什么值？其最终一致性又应该以什么为准?","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491424,"discussion_content":"加一颗星:)，值1，以最新的数据为准。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586619947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229359,"discussion_content":"我不太明白的是，在存在分区的两个db中，它们是怎么确定自己的数据才是最新的？假如有冲突，需要放弃其中一个修改，那就算是一次数据错误了。这问题是不是无解，是在设计系统的时候就得规避掉么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586620950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199938,"user_name":"lupguo","can_delete":false,"product_type":"c1","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1585502770,"is_pvip":false,"replies":[{"id":"77449","content":"加一颗星:）,问题2，可以这么理解，但更多的是指单个业务数据副本，毕竟整体业务是由多个单个业务组成的。问题3，以什么为准，不同的数据处理方式不同，比如KV数据以最新的数据为准；3种修复，如何操作，文中以Cassandra为例，做了介绍，关于这些示例，具体疑问是什么呢？","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587049775,"ip_address":"","comment_id":199938,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585502770","product_id":100046101,"comment_content":"1. BASE最终一致性以什么数据为准，以及如何实现BASE一致性（读时修复、写时修复、异步修复），这块还是有一些不清晰。<br>2. 我理解的最终一致，有两个层面，第一层面是一个整体业务的数据一致，比如生单操作（包含订单数据、营销数据等最终一致），最终是要整体一致的，不能出现只有部分数据写成功；第二个层面是单个业务数据如果做了分片或多副本数据，需要保证每个节点的最终是一致的，允许部分分片或节点在一段时间内是不一致的，不知道这样理解是不是有偏差，请老师点评下？<br>3. 如果针对2中这两类情况，一致性数据以什么为准应对如何理解，以及读时修复、写时修复、异步修复这三个具体操作应该如何实施？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489900,"discussion_content":"加一颗星:）,问题2，可以这么理解，但更多的是指单个业务数据副本，毕竟整体业务是由多个单个业务组成的。问题3，以什么为准，不同的数据处理方式不同，比如KV数据以最新的数据为准；3种修复，如何操作，文中以Cassandra为例，做了介绍，关于这些示例，具体疑问是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587049775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186597,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1583890171,"is_pvip":false,"replies":[{"id":"75720","content":"加一颗星:)，是的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586021051,"ip_address":"","comment_id":186597,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583890171","product_id":100046101,"comment_content":"熔断就是过载保护的其中一种实现吧？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486809,"discussion_content":"加一颗星:)，是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586021051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180519,"user_name":"陈","can_delete":false,"product_type":"c1","uid":1006448,"ip_address":"","ucode":"A8E6AFF6E5775D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/70/6411282d.jpg","comment_is_top":false,"comment_ctime":1582302814,"is_pvip":false,"replies":[{"id":"70116","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582385329,"ip_address":"","comment_id":180519,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582302814","product_id":100046101,"comment_content":"我觉得还有故障和服务隔离，弹性扩容等等。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484692,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582385329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180453,"user_name":"施耀南","can_delete":false,"product_type":"c1","uid":1634138,"ip_address":"","ucode":"480ECE7BA29606","user_header":"https://static001.geekbang.org/account/avatar/00/18/ef/5a/5d424d50.jpg","comment_is_top":false,"comment_ctime":1582283493,"is_pvip":false,"replies":[{"id":"70118","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582385473,"ip_address":"","comment_id":180453,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582283493","product_id":100046101,"comment_content":"谢谢老师课程，基本明白，为保证基本可用除了上述方案，我们游戏业务中，还有流量控制！","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484667,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582385473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179679,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1582077491,"is_pvip":false,"replies":[{"id":"69801","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582101314,"ip_address":"","comment_id":179679,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582077491","product_id":100046101,"comment_content":"限流策略、熔断机制关闭部分服务等。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484351,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582101314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}