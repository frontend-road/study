{"id":118746,"title":"29丨为什么没有理想的索引？","content":"<p>我之前讲过页这个结构，表和索引都会存储在页中，不同的DBMS默认的页的大小是不同的，同时我们也了解到DBMS会有缓冲池的机制，在缓冲池里需要有足够多的空间，存储经常被使用到的页，尽可能减少直接的磁盘I/O操作。这种策略对SQL查询的底层执行来说非常重要，可以从物理层面上最大程度提升SQL的查询效率。</p><p>但同时我们还需要关注索引的设计，如果只是针对SQL查询，我们是可以设计出理想的索引的，不过在实际工作中这种理想的索引往往会带来更多的资源消耗。这是为什么呢？今天我们就来对这部分内容进行学习，内容包括以下几个部分：</p><ol>\n<li>什么是索引片？如何计算过滤因子？</li>\n<li>设计索引的时候，可以遵循哪些原则呢？</li>\n<li>为什么理想的索引很难在实际工作中应用起来？</li>\n</ol><h2>索引片和过滤因子</h2><p>索引片就是 SQL查询语句在执行中需要扫描的一个索引片段，我们会根据索引片中包含的匹配列的数量不同，将索引分成窄索引（比如包含索引列数为1或2）和宽索引（包含的索引列数大于2）。</p><p>如果索引片越宽，那么需要顺序扫描的索引页就越多；如果索引片越窄，就会减少索引访问的开销。比如在product_comment数据表中，我们将comment_id设置为主键，然后执行下面的SQL查询语句：</p><!-- [[[read_end]]] --><pre><code>SELECT comment_id, product_id, comment_text, user_id FROM product_comment WHERE user_id between 100001 and 100100\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/61/e9/6139464adb6a068be03db23fe33ac2e9.jpg?wh=504*454\" alt=\"\"><br>\n针对这条SQL查询语句，我们可以设置窄索引（user_id）。需要说明的是，每个非聚集索引保存的数据都会存储主键值，然后通过主键值，来回表查找相应的数据，因此每个索引都相当于包括了主键，也就是<code>（comment_id, user_id）</code>。</p><p>同样我们可以设置宽索引<code>（user_id, product_id, comment_text）</code>，相当于包括了主键，也就是<code>（comment_id, user_id, product_id, comment_text）</code>。</p><h3>如何通过宽索引避免回表</h3><p>刚才我讲到了宽索引需要顺序扫描的索引页很多，不过它也可以避免通过索引找到主键，再通过主键回表进行数据查找的情况。回表指的就是数据库根据索引找到了数据行之后，还需要通过主键再次到数据表中读取数据的情况。</p><p>我们可以用不同索引片来运行下刚才的SQL语句，比如我们采用窄索引（user_id）的方式，来执行下面这条语句：</p><pre><code>SELECT comment_id, product_id, comment_text, user_id FROM product_comment WHERE user_id between 100001 and 100100\n</code></pre><p>运行结果（110条记录，运行时间0.062s）：</p><p><img src=\"https://static001.geekbang.org/resource/image/65/19/65b3b85e33f377c417eb0354d9fd7119.png?wh=859*261\" alt=\"\"><br>\n同样，如果我们设置宽索引<code>（user_id, product_id, comment_text）</code>，然后执行相同的SQL语句，运行结果相同，运行时间为0.043s，你能看到查询效率有了一些提升。这就是因为我们可以通过宽索引将SELECT中需要用到的列（主键列可以除外）都设置在宽索引中，这样就避免了回表扫描的情况，从而提升SQL查询效率。</p><h3>什么是过滤因子</h3><p>在索引片的设计中，我们还需要考虑一个因素，那就是过滤因子，它描述了谓词的选择性。在WHERE条件语句中，每个条件都称为一个谓词，谓词的选择性也等于满足这个条件列的记录数除以总记录数的比例。</p><p>举个例子，我们在player数据表中，定义了team_id和height字段，我们也可以设计个gender字段，这里gender的取值都为male。</p><p>在player表中记录比较少，一共37条记录，不过我们也可以统计以下字段：gender、team_id、height和name，以便评估过滤因子的筛选能力，如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/f1/b01c2d5a77c4d57388b88d93f70298f1.png?wh=1090*238\" alt=\"\"><br>\n你能看到<code>gender='male'</code>不是个好过滤因子，因为所有球员都是男性，同样<code>team_id=1001</code>也不是个好过滤因子，因为这个比例在这个特定的数据集中高达54%，相比之下<code>height=2.08</code>具有一定的筛选性，过滤因子能力最强的是name字段。</p><p>这时如果我们创建一个联合的过滤条件<code>（height, team_id）</code>，那么它的过滤能力是怎样的呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/7c/3dabf8870e8ba8f65ad8c40ca89a287c.png?wh=814*238\" alt=\"\"><br>\n联合过滤因子有更高的过滤能力，这里还需要注意一个条件，那就是条件列的关联性应该尽量相互独立，否则如果列与列之间具有相关性，联合过滤因子的能力就会下降很多。比如城市名称和电话区号就有强相关性，这两个列组合到一起不会加强过滤效果。</p><p>你能看到过滤因子决定了索引片的大小（注意这里不是窄索引和宽索引），过滤因子的条件过滤能力越强，满足条件的记录数就越少，SQL查询需要扫描的索引片也就越小。同理，如果我们没有选择好索引片中的过滤因子，就会造成索引片中的记录数过多的情况。</p><h2>针对SQL查询的理想索引设计：三星索引</h2><p>刚才我介绍了宽索引和窄索引，有些时候宽索引可以提升SQL的查询效率，那么你可能会问，如果针对SQL查询来说，有没有一个标准能让SQL查询效率最大化呢？</p><p>实际上，存在着一个三星索引的标准，这就好比我们在学习数据表设计时提到的三范式一样。三星索引具体指的是：</p><ol>\n<li>在WHERE条件语句中，找到所有等值谓词中的条件列，将它们作为索引片中的开始列；</li>\n<li>将 GROUP BY和ORDER BY中的列加入到索引中；</li>\n<li>将SELECT字段中剩余的列加入到索引片中。</li>\n</ol><p>你能看到这样操作下来，索引片基本上会变成一个宽索引，把能添加的相关列都加入其中。为什么对于一条SQL查询来说，这样做的效率是最高的吗？</p><p>首先，如果我们要通过索引查找符合条件的记录，就需要将WHERE子句中的等值谓词列加入到索引片中，这样索引的过滤能力越强，最终扫描的数据行就越少。</p><p>另外，如果我们要对数据记录分组或者排序，都需要重新扫描数据记录。为了避免进行file sort排序，可以把GROUP BY和ORDER BY中涉及到的列加入到索引中，因为创建了索引就会按照索引的顺序来存储数据，这样再对这些数据按照某个字段进行分组或者排序的时候，就会提升效率。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/c7/340a26c1be1b2c40ab6dff50d521cfc7.png?wh=406*397\" alt=\"\"><br>\n最后，我们取数据的时候，可能会存在回表情况。回表就是通过索引找到了数据行，但是还需要通过主键的方式在数据表中查找完成的记录。这是因为SELECT所需的字段并不都保存在索引中，因此我们可以将SELECT中的字段都保存在索引中避免回表的情况，从而提升查询效率。</p><h2>为什么很难存在理想的索引设计</h2><p>从三星索引的创建过程中，你能看到三星索引实际上分析了在SQL查询过程中所有可能影响效率的环节，通过在索引片中添加索引的方式来提升效率。通过上面的原则，我们可以很快创建一个SQL查询语句的三星索引（有时候可能只有两星，比如同时拥有范围谓词和ORDER BY的时候）。</p><p>但就同三范式一样，很多时候我们并没有遵循三范式的设计原则，而是采用了反范式设计。同样，有时候我们并不能需要完全遵循三星索引的原则，原因主要有以下两点：</p><ol>\n<li>采用三星索引会让索引片变宽，这样每个页能够存储的索引数据就会变少，从而增加了页加载的数量。从另一个角度来看，如果数据量很大，比如有1000万行数据，过多索引所需要的磁盘空间可能会成为一个问题，对缓冲池所需空间的压力也会增加。</li>\n<li>增加了索引维护的成本。如果我们为所有的查询语句都设计理想的三星索引，就会让数据表中的索引个数过多，这样索引维护的成本也会增加。举个例子，当我们添加一条记录的时候，就需要在每一个索引上都添加相应的行（存储对应的主键值），假设添加一行记录的时间成本是10ms（磁盘随机读取一个页的时间），那么如果我们创建了10个索引，添加一条记录的时间就可能变成0.1s，如果是添加10条记录呢？就会花费近1s的时间。从索引维护的成本来看消耗还是很高的。当然对于数据库来说，数据的更新不一定马上回写到磁盘上，但即使不及时将脏页进行回写，也会造成缓冲池中的空间占用过多，脏页过多的情况。</li>\n</ol><h2>总结</h2><p>你能看到针对一条SQL查询来说，三星索引是个理想的方式，但实际运行起来我们要考虑更多维护的成本，在索引效率和索引维护之间进行权衡。</p><p>三星索引会让索引变宽，好处就是不需要进行回表查询，减少了磁盘I/O的次数，弊端就是会造成频繁的页分裂和页合并，对于数据的插入和更新来说，效率会降低不少。</p><p>那我们该如何设计索引呢？</p><p>首先一张表的索引个数不宜过多，否则一条记录的增加和修改，会因为过多的索引造成额外的负担。针对这个情况，当你需要新建索引的时候，首先考虑在原有的索引片上增加索引，也就是采用复合索引的方式，而不是新建一个新的索引。另外我们可以定期检查索引的使用情况，对于很少使用到的索引可以及时删除，从而减少索引数量。</p><p>同时，在索引片中，我们也需要控制索引列的数量，通常情况下我们将WHERE里的条件列添加到索引中，而SELECT中的非条件列则不需要添加。除非SELECT中的非条件列数少，并且该字段会经常使用到。</p><p>另外单列索引和复合索引的长度也需要控制，在MySQL InnoDB中，系统默认单个索引长度最大为767 bytes，如果单列索引长度超过了这个限制，就会取前缀索引，也就是取前 255 字符。这实际上也是告诉我们，字符列会占用较大的空间，在数据表设计的时候，尽量采用数值类型替代字符类型，尽量避免用字符类型做主键，同时针对字符字段最好只建前缀索引。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/f4/f417b01c6e4d560b2cbe3c54c6e9dbf4.jpg?wh=3341*2086\" alt=\"\"><br>\n给你留一道思考题吧，针对下面的SQL语句，如果创建三星索引该如何创建？使用三星索引和不使用三星索引在查询效率上又有什么区别呢？</p><pre><code>SELECT comment_id, comment_text, user_id FROM product_comment where user_id BETWEEN 100000 AND 200000\n</code></pre><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起来交流。</p>","neighbors":{"left":{"article_title":"28丨从磁盘I/O的角度理解SQL查询的成本","id":118101},"right":{"article_title":"30丨锁：悲观锁和乐观锁是什么？","id":119044}},"comments":[{"had_liked":false,"id":124643,"user_name":"DZ","can_delete":false,"product_type":"c1","uid":1132240,"ip_address":"","ucode":"452555FA0F9E0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/d0/6bafd7d4.jpg","comment_is_top":false,"comment_ctime":1565935683,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"280738809923","product_id":100029501,"comment_content":"按照对课程的理解，我觉得应该只为use_id字段建立一个窄索引。<br><br>理由如下：<br><br>如果不加思索地套用三星索引，应该这样做：<br>1. 有范围谓词，把user_id加到索引中；<br>2. 无排序操作，无需添加排序字段到索引中；<br>3. 为避免回表，把comment_text添加到索引中。<br><br>这样实际形成宽索引： comment_id + comment_text + user_id<br><br>但是，这样真的划算吗？<br><br>comment_text有可能是长字符串，不但占用较大的索引空间，且有高昂的索引维护成本；如果仅仅建立前缀索引，又无法避免回表操作。<br><br>更重要的是，此索引满足不了长文本的查询需求，左匹配原则限制了它的用途——我们不大可能使用起始字符串去搜索一段评论——全文索引更为适用。<br><br>因此，comment_text不能发挥索引的本来作用。如果仅仅为了避免回表，就将字段一股脑儿塞到索引中，可说是本末倒置了。<br><br>综上，为user_id建立索引，形成comment_id + user_id的窄索引，是应对题中SQL查询的正确方法。","like_count":66,"discussions":[{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587705,"discussion_content":"优秀！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663231649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148492,"user_name":"书痕","can_delete":false,"product_type":"c1","uid":1394726,"ip_address":"","ucode":"8367371EF89D61","user_header":"https://static001.geekbang.org/account/avatar/00/15/48/26/93fd21d5.jpg","comment_is_top":false,"comment_ctime":1573018673,"is_pvip":false,"replies":[{"id":"59746","content":"差不多 可以这么理解","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1574739115,"ip_address":"","comment_id":148492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70292495409","product_id":100029501,"comment_content":"感觉三星索引简直是面向查询新建了个表嘛～","like_count":17,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473510,"discussion_content":"差不多 可以这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574739115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129640,"user_name":"空知","can_delete":false,"product_type":"c1","uid":1013283,"ip_address":"","ucode":"C448E98238DD36","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","comment_is_top":false,"comment_ctime":1567178656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57401753504","product_id":100029501,"comment_content":"联合过滤条件那是不是多写了个 0.1%呀？","like_count":14},{"had_liked":false,"id":124468,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1565897923,"is_pvip":false,"replies":[{"id":"47091","content":"宽索引就是联合索引，因为索引列数大于1了，联合索引也就是复合索引，英文composite indexes","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566630149,"ip_address":"","comment_id":124468,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53105505475","product_id":100029501,"comment_content":"有个问题不太明白，宽索引就是联合索引吗？复合索引又是啥意思？","like_count":13,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463192,"discussion_content":"宽索引就是联合索引，因为索引列数大于1了，联合索引也就是复合索引，英文composite indexes","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566630149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5050,"discussion_content":"宽索引就是联合索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565915793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219013,"user_name":"真名不叫黄金","can_delete":false,"product_type":"c1","uid":1174066,"ip_address":"","ucode":"FB611FC98F5BA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","comment_is_top":false,"comment_ctime":1589933332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31654704404","product_id":100029501,"comment_content":"谢谢老师，讲得很好。<br>顺便推荐一本书，详细地讲解了索引设计思想：《数据库索引设计与优化》，文中的很多概念都是来自书中，浅显易懂、值得一读。","like_count":8},{"had_liked":false,"id":144617,"user_name":"Coool","can_delete":false,"product_type":"c1","uid":1701702,"ip_address":"","ucode":"1D1AB3270B02B9","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/46/209ca424.jpg","comment_is_top":false,"comment_ctime":1571981630,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31636752702","product_id":100029501,"comment_content":"下面的0.1%应该换成100%吧。。<br>100% x 14% x 54%=8%","like_count":8},{"had_liked":false,"id":127335,"user_name":"🄽🄸🅇🅄🅂","can_delete":false,"product_type":"c1","uid":1000060,"ip_address":"","ucode":"853763C229A5AA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","comment_is_top":false,"comment_ctime":1566657356,"is_pvip":false,"replies":[{"id":"47662","content":"对的 宽索引就是联合索引（复合索引）。避免回表是因为索引覆盖了，所以才会避免回表","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566900729,"ip_address":"","comment_id":127335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27336461132","product_id":100029501,"comment_content":"通过宽索引来避免回表，指的是覆盖索引吗？按照文中对宽索引的描述，感觉宽索引就是联合索引（复合索引）","like_count":7,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464447,"discussion_content":"对的 宽索引就是联合索引（复合索引）。避免回表是因为索引覆盖了，所以才会避免回表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566900729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144189,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1571877313,"is_pvip":true,"replies":[{"id":"59823","content":"对的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1574757652,"ip_address":"","comment_id":144189,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14456779201","product_id":100029501,"comment_content":"在 MySQL InnoDB 中，系统默认单个索引长度最大为 767 bytes。这里的索引长度指的是索引中所包含字段的大小吗？","like_count":4,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471842,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574757652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129133,"user_name":"wonderq_gk","can_delete":false,"product_type":"c1","uid":1572636,"ip_address":"","ucode":"9A10DDC39DBB6B","user_header":"https://static001.geekbang.org/account/avatar/00/17/ff/1c/d049776e.jpg","comment_is_top":false,"comment_ctime":1567047019,"is_pvip":false,"replies":[{"id":"53397","content":"宽索引，窄索引都是相对于建立的索引包括的列数而言的，当索引的列数超过2列时就是宽索引。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1570433146,"ip_address":"","comment_id":129133,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14451948907","product_id":100029501,"comment_content":"如何设置宽索引啊？？？不告诉方法？？？","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465296,"discussion_content":"宽索引，窄索引都是相对于建立的索引包括的列数而言的，当索引的列数超过2列时就是宽索引。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570433146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390066,"discussion_content":"其实就是联合索引，多个列，相比单个列建立的索引页宽，索引数据也多。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629634041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1573288,"avatar":"https://static001.geekbang.org/account/avatar/00/18/01/a8/2662a8d1.jpg","nickname":"小白鼠丶","note":"","ucode":"76EFABC5DF8AEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8919,"discussion_content":"宽索引就是联合索引，因为索引列数大于1了，联合索引也就是复合索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568100117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1573288,"avatar":"https://static001.geekbang.org/account/avatar/00/18/01/a8/2662a8d1.jpg","nickname":"小白鼠丶","note":"","ucode":"76EFABC5DF8AEB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377378,"discussion_content":"是>2吧？\n原文摘录：\n我们会根据索引片中包含的匹配列的数量不同，将索引分成窄索引（比如包含索引列数为 1 或 2）和宽索引（包含的索引列数大于 2）。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622620814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8919,"ip_address":""},"score":377378,"extra":""}]}]},{"had_liked":false,"id":124506,"user_name":"ahazxc","can_delete":false,"product_type":"c1","uid":1528500,"ip_address":"","ucode":"B63143E0A67776","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJsszO0GeFFRZbF3XRZGic9nlHLC322hNGVazsExCRqb5HnmoaCTToiaUhTAtVyPudP8CiaHPzwviaP5A/132","comment_is_top":false,"comment_ctime":1565914884,"is_pvip":false,"replies":[{"id":"47093","content":"对的 凡事都有利弊，当我们了解更多的时候，也会了解每种方法的优缺点，选择适合的来使用","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566630222,"ip_address":"","comment_id":124506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14450816772","product_id":100029501,"comment_content":"试用三星索引，可以减少磁盘i&#47;o，避免回表查询。但同时，有利也有弊，三星索引，如果查询列，过滤列字段过多，会导致索引变大，一个索引页能存储的索引变少，所以遍历索引页花的时间就会多，得不偿失","like_count":4,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463208,"discussion_content":"对的 凡事都有利弊，当我们了解更多的时候，也会了解每种方法的优缺点，选择适合的来使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566630222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171727,"user_name":"YiFān.W","can_delete":false,"product_type":"c1","uid":1339594,"ip_address":"","ucode":"CBC3233CE2FA44","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/ca/deb1a067.jpg","comment_is_top":false,"comment_ctime":1578999630,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10168934222","product_id":100029501,"comment_content":"那请问老师，如果没有主键。那么针对宽窄索引查询到数据后，回表的情况是否受影响？","like_count":2,"discussions":[{"author":{"id":1246178,"avatar":"https://static001.geekbang.org/account/avatar/00/13/03/e2/5768d26e.jpg","nickname":"inrtyx","note":"","ucode":"81CD18FF34ABAB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":161562,"discussion_content":"不会！默认会有主键","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580909650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124519,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1565916130,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10155850722","product_id":100029501,"comment_content":"(8)SELECT (9)DISTINCT  (11)&lt;Top Num&gt; &lt;select list&gt;<br>(1)FROM [left_table]<br>(3)&lt;join_type&gt; JOIN &lt;right_table&gt;<br>(2)ON &lt;join_condition&gt;<br>(4)WHERE &lt;where_condition&gt;<br>(5)GROUP BY &lt;group_by_list&gt;<br>(6)WITH &lt;CUBE | RollUP&gt;<br>(7)HAVING &lt;having_condition&gt;<br>(10)ORDER BY &lt;order_by_list&gt;<br>老师，这个sql执行顺序，是不是不对啊？<br>我在 https:&#47;&#47;www.xttblog.com 看到的，请老师解惑！","like_count":2,"discussions":[{"author":{"id":1301286,"avatar":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","nickname":"靠人品去赢","note":"","ucode":"7A20F9EBE847E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369816,"discussion_content":"我竟然也看过这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619164181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134613,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":false,"comment_ctime":1568879401,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"5863846697","product_id":100029501,"comment_content":"4 个问题：<br>0：0.1 % * 14% * 54% = 8% 这个数学实在在没搞懂。<br>1：窄索引图中 id user_id，这个 id 字段从哪冒出来的<br>2：宽窄索引的定义是从哪来的，感觉联合索引、非联合索引定义反而更清晰<br>3：老师的问题可以在下一篇回答么？最近撸下来感觉很多同学都有这个需求，这也是另外一门 MySQL 课程的做法，可以借鉴一下。","like_count":1},{"had_liked":false,"id":128599,"user_name":"KEEPUP","can_delete":false,"product_type":"c1","uid":1436576,"ip_address":"","ucode":"D0B31031E2923F","user_header":"https://static001.geekbang.org/account/avatar/00/15/eb/a0/9d294a9a.jpg","comment_is_top":false,"comment_ctime":1566911867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5861879163","product_id":100029501,"comment_content":"“如果 up_limit_id &lt; trx_id &lt; low_limit_id，说明该行记录所在的事务 trx_id 在目前 creator_trx_id 这个事务创建的时候，可能还处于活跃的状态，因此我们需要在 trx_ids 集合中进行遍历，如果 trx_id 存在于 trx_ids 集合中，证明这个事务 trx_id 还处于活跃状态，不可见。否则，如果 trx_id 不存在于 trx_ids 集合中，证明事务 trx_id 已经提交了，该行记录可见。”<br>不明白为什么还会出现否则这种情况，up_limit_id &lt; trx_id &lt; low_limit_id 的话，trx_id不就一定在trx_ids的集合里边吗？","like_count":1},{"had_liked":false,"id":124521,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1565916422,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5860883718","product_id":100029501,"comment_content":"请问下三星索引第一条中的等值谓词，怎么样才算等值谓词呢？","like_count":1,"discussions":[{"author":{"id":1573288,"avatar":"https://static001.geekbang.org/account/avatar/00/18/01/a8/2662a8d1.jpg","nickname":"小白鼠丶","note":"","ucode":"76EFABC5DF8AEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8917,"discussion_content":"‘= ’ 就算 \n‘>’ ,&#39;<&#39;这种范围的就不算 因为这种会让后面的索引失效\n所谓的最左前缀原则  （自我理解）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568100043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333240,"user_name":"茵陈","can_delete":false,"product_type":"c1","uid":1184470,"ip_address":"","ucode":"058C4BAEFEC0EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/12/d6/65446a67.jpg","comment_is_top":false,"comment_ctime":1644226028,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644226028","product_id":100029501,"comment_content":"思考题 数据量少 建立三星索引效率高 数据量大  三星索引效率就低了   二星索引适合大数据量 老师 是吧？","like_count":0},{"had_liked":false,"id":312289,"user_name":"安德森先生","can_delete":false,"product_type":"c1","uid":2564411,"ip_address":"","ucode":"482BAF82DB7390","user_header":"https://static001.geekbang.org/account/avatar/00/27/21/3b/e3edea37.jpg","comment_is_top":false,"comment_ctime":1631717636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631717636","product_id":100029501,"comment_content":"为什么窄索引会出现回表的情况呢？宽索引不会出现回表的情况是因为什么原因呢？","like_count":0},{"had_liked":false,"id":309273,"user_name":"TheOne","can_delete":false,"product_type":"c1","uid":1582134,"ip_address":"","ucode":"2A359780156A8B","user_header":"https://static001.geekbang.org/account/avatar/00/18/24/36/1c4af368.jpg","comment_is_top":false,"comment_ctime":1630028736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630028736","product_id":100029501,"comment_content":"1. in 和 BETWEEN 什么时候用？对索引来说有什么影响？<br>2. where 和 order by 不同的字段，会不会使用到不同的索引<br>3. 加索引是在设计表的时候加，还是在写到sql的时候加","like_count":0},{"had_liked":false,"id":291423,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1620283804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620283804","product_id":100029501,"comment_content":"因为这一篇里没有给出product_comment的建表语句 这里就说一些自己的思考。首先因为带有between and 而且where条件里只有一个查询子项 故可认为是range查询计划。因为between比较深 故实际上磁盘IO还是有一定的深度。这里我们将comment_id当做主键的话 实际上没必要带入联合索引或是宽索引 因为mysql本身会有的。<br>故为了减少不必要的回表查询 我建议是建立(user_id,comment_text) comment_text只能建前缀索引 如果场景只是用于带回结果 comment_text其实没必要带入索引覆盖 ，如果后续还有查询子项 那么符合索引就有意义。这里需要考虑表的量级再来讨论comment_text有无必要带入索引","like_count":0},{"had_liked":false,"id":247260,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1599642248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599642248","product_id":100029501,"comment_content":"文章末位提到的“尽量避免用字符类型做主键”,不懂为什么，老师可以帮忙再解释一下吗？","like_count":1},{"had_liked":false,"id":216450,"user_name":"骑行的掌柜J","can_delete":false,"product_type":"c1","uid":1474214,"ip_address":"","ucode":"3163102651C653","user_header":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","comment_is_top":false,"comment_ctime":1589262105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589262105","product_id":100029501,"comment_content":"看了下面所有朋友的评论，很多朋友提到了对联合过滤条件那个图的计算有疑问，于是掌柜自己也算了一下，个人觉得应该是老师写错了，一开始的数字是100%，然后是100% x 14% x 54% （最后这里应该是约等于）≈ 8% 才解释的通（14% x 54% = 189&#47;2500 ；而8%等于 200&#47;2500）","like_count":1},{"had_liked":false,"id":208034,"user_name":"傻傻的帅","can_delete":false,"product_type":"c1","uid":1668617,"ip_address":"","ucode":"14A795523A682E","user_header":"https://static001.geekbang.org/account/avatar/00/19/76/09/62a10668.jpg","comment_is_top":false,"comment_ctime":1587261733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587261733","product_id":100029501,"comment_content":"老师问个问题，你在正文中的例子：宽索引（user_id, product_id, comment_text），相当于（comment_id,user_id,product_id,comment_text）；我想问的是针对二级索引，主键索引列的顺序是在二级索引列的最前面，还是在最后面","like_count":0},{"had_liked":false,"id":200070,"user_name":"牛晋","can_delete":false,"product_type":"c1","uid":1001701,"ip_address":"","ucode":"98CF6AB1D7DDC8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/e5/4677d73f.jpg","comment_is_top":false,"comment_ctime":1585539539,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585539539","product_id":100029501,"comment_content":"应该直接在 user_id 上建主键索引（也就是聚集索引）","like_count":0,"discussions":[{"author":{"id":2565173,"avatar":"https://static001.geekbang.org/account/avatar/00/27/24/35/03603e95.jpg","nickname":"牛哥","note":"","ucode":"27D8619DC2B946","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385863,"discussion_content":"本来就是主键了还需要建索引吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627304615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195730,"user_name":"gokunn","can_delete":false,"product_type":"c1","uid":1928778,"ip_address":"","ucode":"6DACB000A47E8E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6e/4a/7af58dc7.jpg","comment_is_top":false,"comment_ctime":1585214153,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585214153","product_id":100029501,"comment_content":"话说非聚簇索引底层存的不是对应记录的物理地址吗？还是对应的主键值？","like_count":0,"discussions":[{"author":{"id":1706074,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/08/5a/4d709cf5.jpg","nickname":"Pray、PF","note":"","ucode":"1E3E4073763490","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285043,"discussion_content":"存储的是对应的主键值","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592721014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185960,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1583731761,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1583731761","product_id":100029501,"comment_content":"user_id设为主键,为（comment_id ,comment_text）设置宽索引，使用三星索引在过滤阶段可以提高过滤效率，减少需要查询的记录，避免回表，是否将select中的列加入索引应该是最需要取舍的，可以避免回表，但会增加维护成本，其他的字段，像where groupby和orderby中的字段应该是要创建联合索引的。","like_count":0},{"had_liked":false,"id":166511,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1577461640,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577461640","product_id":100029501,"comment_content":"老师 使用三星索引会使索引变宽 这样每个页存储的索引数据就会变少 这句话 是怎么来的 能再详细讲一下吗","like_count":0,"discussions":[{"author":{"id":1130590,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","nickname":"Ryoma","note":"","ucode":"7F692369239692","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206699,"discussion_content":"页大小默认是 16KB，索引宽了——即占用空间大了，自然每个页存储的索引就少了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584430478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124728,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1565953508,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1565953508","product_id":100029501,"comment_content":"有一些开源的系统，包括我们公司的系统，都在使用uuid作为表的主键。。。<br><br>另外我记得MongoDB也是用的类似uuid做的主键<br>","like_count":0,"discussions":[{"author":{"id":1003515,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/fb/10366b97.jpg","nickname":"Henry","note":"","ucode":"54AFE9C99B31B4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":35690,"discussion_content":"uuid太长了吧，这样索引会很大","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571298703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1003515,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/fb/10366b97.jpg","nickname":"Henry","note":"","ucode":"54AFE9C99B31B4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":51688,"discussion_content":"32位，确实用作索引太长了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573915347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":35690,"ip_address":""},"score":51688,"extra":""}]}]},{"had_liked":false,"id":124605,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1565926498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565926498","product_id":100029501,"comment_content":"疑问：针对窄索引的定义是1或者2个字段，这个如何区分？1个字段是指主键，2个字段是指除pk键以外的一个字段吗？","like_count":0},{"had_liked":false,"id":124603,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1565926370,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565926370","product_id":100029501,"comment_content":"针对 先 GROUP BY ，再ORDER BY 的场景，虽然索引有顺序，但仍无法保证ORDER BY的顺序和索引的一样的，这个时间，ORDER BY 如何处理，是不是仍需要 sort buffer进行排序？","like_count":0,"discussions":[{"author":{"id":1043738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","nickname":"asdf100","note":"","ucode":"39D8D71453E575","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5290,"discussion_content":"这里指的是group by a order by b这种情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566139021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124571,"user_name":"阿锋","can_delete":false,"product_type":"c1","uid":1127761,"ip_address":"","ucode":"7AF449ABA89242","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/51/c616f95a.jpg","comment_is_top":false,"comment_ctime":1565922433,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1565922433","product_id":100029501,"comment_content":"这一章有点抽象，例子不是很多，索引片概念不理解，如何设置窄索引，宽索引。容易与之前介绍的索引种类弄混，究竟与之前介绍的索引存在什么关系。<br>","like_count":0,"discussions":[{"author":{"id":1000060,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","nickname":"🄽🄸🅇🅄🅂","note":"","ucode":"853763C229A5AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6069,"discussion_content":"多看几遍，你会有所发现的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566651889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000060,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","nickname":"🄽🄸🅇🅄🅂","note":"","ucode":"853763C229A5AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6070,"discussion_content":"看第一遍的时候，会发现很多问题，第二遍的时候，就可以带着这些问题来看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566652255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}