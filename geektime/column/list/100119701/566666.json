{"id":566666,"title":"07 | 运行时（上）：不同语言形态下的函数在容器中是如何执行的？","content":"<p>你好，我是静远。</p><p>在<a href=\"https://time.geekbang.org/column/article/559891\">生命周期</a>这节课里，我和你提到了支撑函数运行起来的核心之一是运行时，而且我们还可以在函数计算的平台上选择不同语言的运行时来开发我们的函数，这其实也是函数的一大优势：<strong>多语言的运行时，可以极大降低开发者的语言门槛</strong>。</p><p>那么函数计算层面的运行时是什么呢？不同语言的运行时，它们的工作机制是一样的么？如果让你来自定义一个运行时，你打算怎么做呢？</p><p>带着这些问题，今天我们来聊聊这背后的实现。我会从源码的角度，以编译型语言Golang、解释型语言Python为代表，来跟你层层分析函数计算运行时的机制，带你抽象出通用的思路，并体验如何构建一个自定义运行时。</p><p>希望通过这两节课，你能够对运行时的原理和特性有一定的理解，搞清楚函数计算平台究竟是如何打破编程语言技术栈的限制，为开发人员提供多种开发环境的。同时，相信这节课也会帮助你在后续的函数计算使用和开发中更加得心应手。</p><p>今天这节课，我将重点介绍运行时的基本特性和实现原理，并以编译型语言Golang为切入点来讲解它的运行流程，让你先有一个从0到1的认知过程。</p><h2>运行时究竟是什么？</h2><p>我们对“运行时”这个名词并不陌生，任何编程语言都有它自己的运行时。比如Java的运行时叫Java Runtime，它能够让机器读懂这些Java的代码并且运行起来，换个说法，就是它让代码可以和机器“打交道”，进而实现你的业务逻辑。</p><!-- [[[read_end]]] --><p>那么，迁移过来理解，<strong>函数计算运行时（Runtime）就是能够让函数在机器或容器中执行起来</strong><strong>，</strong><strong>实现业务逻辑功能的执行环境，它通常由特定语言构建的框架构成</strong>。函数计算的运行时依赖语言的运行时存在。不过由于更贴近上层应用，分析它的工作原理要相对简单一些。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/e1/0afa67e128b335cc61fabfd07077f5e1.jpg?wh=1920x848\" alt=\"图片\"></p><p>上面的示意图，展示的是运行时、函数的组合与初始化进程的关系。在函数实例初始化时，函数运行时一般会由一个初始化进程给加载起来，然后Runtime就可以进行服务请求的内部通信，正常接收、处理请求。当请求到达后，你的代码就会在对应的语言运行时中被加载起来的代码处理。</p><p>因此，我们可以简单地将Runtime理解为一个特定语言环境下的服务框架环境，这个服务将以一个进程的形态运行在用户容器中，并与用户代码相关联。当服务启动后，会一直等待请求的到来。一旦请求到达，运行时就会关联你的代码去执行，执行完成后，又会继续处理下一个请求。</p><p>这里我要强调的是，这个执行不一定是串行的，有的架构为了提升并发，也会采用协程或者线程的方式去执行。</p><p>这个流程看起来比较容易理解对不对？那么，我们再深入流程看一眼，想一想，不同的语言运行时的实现，是一样的吗？</p><h2>实现原理</h2><p>运行时，归根到底还是一个编程语言编写出来的具体程序，所以对于上面这个问题，我们先来看看编程语言本身有哪些区别。</p><h3>语言类型</h3><p>我们知道，计算机只能执行二进制指令，而我们根据不同编程语言转换为二进制指令的时机，将不同的编程语言分为了解释型语言和编译型语言。</p><p>编译型语言，比如C、C++、GoLang，在编译时需要将所有用到的静态依赖、源码一起打包，编译完成后就可以直接执行。而像Python、Node.js这种解释型语言则只需要通过解释器执行，因此，完全可以做到业务代码与依赖分离的形式。</p><p>这里需要注意一点，我们常用的Java，虽然需要经过编译，但是编译产生的机器码需要由JVM再次转换为二进制指令，因此是具有解释型和编译型两种特性的。我个人更偏向将其定位为编译型语言，因为在你使用Java开发函数的时候也会发现，我们通常是将所有依赖包打包成一个Jar包或者War包的方式上传，比较符合编译语言的风格。</p><p>另外，如果你使用过不同云厂商的函数计算平台，你会发现，像GoLang、Java这类编译型语言，通常在开发过程中，都需要强依赖一个平台提供的包，而Python、Node.js则不需要，这是为什么呢？</p><p>在上面提到的语言类型的区别中我们提到，因为编译型语言需要将所有关联的静态代码依赖一起打包，所以在函数实例上具体的体现，就是你的业务代码和运行时会生成一个完整二进制文件、Jar包或者War包。</p><p>了解完语言的不同，你应该也做好这两种函数计算运行时的实现也会不同的心理准备了。接下来，我会从从编译型和解释型两个角度来分别跟你聊一聊运行时的实现。</p><h3>Golang运行时</h3><p>上面我提到，对于编译型语言，用户代码通常需要和运行时一起编译，所以一般的云厂商都会将编译型语言的运行时开源。</p><p>这里我们以阿里云函数计算FC的<a href=\"https://github.com/aliyun/fc-runtime-go-sdk/tree/master/fc\">GoLang Runtime</a>运行时为例，一起看看它的实现原理。</p><p><img src=\"https://static001.geekbang.org/resource/image/9f/21/9f646c6656ff85165e45b31977c90421.jpg?wh=1920x1080\" alt=\"图片\"></p><p>GoLang Runtime运行时主要做的事情有三点。</p><ul>\n<li><strong>获取请求</strong></li>\n</ul><p>在GoLang Runtime中，平台会提前将RUNTIME API写到环境变量里，Runtime会通过初始化客户端对象runtimeAPIClient，从这个接口中获取到请求。</p><ul>\n<li><strong>关联用户的入口函数</strong></li>\n</ul><p>用户入口函数，也就是图中的UserHandler。在Golang 的运行时中，其实是通过反射机制获取的，并将UserHandler封装到一个统一格式的结构体Handler中，再将Handler作为Function结构体类型的一个属性进行赋值，这样做的好处是用户完全可以按照自己的编程习惯去定义，而不用对UserHandler的结构做出任何限制。</p><p>这里解释一下，在源代码中，作者沿用的是handler，图中的UserHandler是我为了区分主进程中的handler而替换的一个名字，下文在用户侧定义的handler，我们都统一用UserHandler来做区分。</p><ul>\n<li><strong>调用UserHandler对请求进行处理</strong></li>\n</ul><p>在获取请求与UserHandler（如：HandleRequest(ctx context.Context, event string)）后，就可以用第二步创建的Function对象去执行请求了。</p><p>接下来，我将从GoLang用户侧代码的入口函数（main函数）开始 ，详细地梳理一遍上面的处理过程。</p><h4>入口</h4><p>当整个二进制被加载起来后，程序首先会进入main函数并将用户定义的函数入口方法userHandler作为参数传入Start方法，并对Start方法进行调用。</p><p>Start的入参为interface{}，这样的传参方式可以让你的userHandler被定义为任何类型。</p><pre><code class=\"language-go\">/**\n* base function type\n* eventFunction functionType = 101\n* httpFunction&nbsp; functionType = 102\n**/\nfunc Start(userhandler interface{}) {\n&nbsp;&nbsp;&nbsp; log.SetFlags(log.LstdFlags | log.Lmicroseconds)\n&nbsp;&nbsp;&nbsp; log.Println(\"start\")\n&nbsp;&nbsp;&nbsp; StartWithContext(context.Background(), userhandler, eventFunction)\n}\n&nbsp;\nfunc StartWithContext(ctx context.Context, userhandler interface{}, funcType functionType) {\n&nbsp;&nbsp;&nbsp; StartHandlerWithContext(ctx, userhandler, funcType)\n}\n</code></pre><p>进入Start()方法后，再深入下去，最终会调用StartHandlerWithContext这个方法。接着，会将全局变量runtimeAPIStartFunction赋值给startFunction这个局部变量。</p><p>关于runtimeAPIStartFunction，我也列出了下方的代码。你可以发现，它包含了一个环境变量名env以及一个之后循环处理请求的方法startRuntimeAPILoop。</p><pre><code class=\"language-go\">func StartHandlerWithContext(ctx context.Context,\n&nbsp;&nbsp;&nbsp;&nbsp; userhandler interface{}, funcType functionType) {\n&nbsp;&nbsp;&nbsp; startFunction := runtimeAPIStartFunction\n&nbsp;&nbsp;&nbsp; // 获取RUNTIMEAPI\n&nbsp;&nbsp;&nbsp; config := os.Getenv(startFunction.env)\n&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp; err := startFunction.f(ctx, config, handlerWrapper{userhandler, funcType}, lifeCycleHandlers)\n&nbsp;&nbsp;&nbsp; ...\n}\n&nbsp;\n// runtimeAPIStartFunction是提前定义好的全局变量\nruntimeAPIStartFunction = &amp;startFunction{\n&nbsp;&nbsp;&nbsp; env: \"FC_RUNTIME_API\",\n&nbsp;&nbsp;&nbsp; f:&nbsp;&nbsp; startRuntimeAPILoop,\n}\n</code></pre><p>最后，在获取到startFunction.env的环境变量真实值后，你会发现前面我们传入的userHandler、上下文Context以及刚刚获取的环境变量，都传递给了startRuntimeAPILoop，并对它进行了调用，这些其实就是<strong>请求处理流程之前所需要的关键信息</strong>。</p><h4>准备工作</h4><p>拿到了函数请求需要的参数后，就需要拉取请求并对其进行处理了，你可以先通过代码来感知一下startRuntimeAPILoop是如何工作的：</p><pre><code class=\"language-go\">func startRuntimeAPILoop(ctx context.Context, api string, baseHandler handlerWrapper, lifeCycleHandlers []handlerWrapper) (e error) {\n&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp; // 创建连接RuntimeAPI接口的客户端，之后客户端会从这个接口获取请求信息\n&nbsp;&nbsp;&nbsp; client := newRuntimeAPIClient(api)\n&nbsp;&nbsp;&nbsp; // 根据传入的UserHandler转化为运行时中标准的Function结构体\n&nbsp;&nbsp;&nbsp; function := NewFunction(baseHandler.handler, baseHandler.funcType).withContext(ctx)\n&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp; for {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 获取请求信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; req, err := client.next()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 启动新的协程让function对请求进行处理\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go func(req *invoke, f *Function) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; err = handleInvoke(req, function)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }(req, function)\n&nbsp;&nbsp;&nbsp; }\n}\n</code></pre><p>首先，程序会根据前面获取到的RUNTIMEAPI创建一个客户端，这样就保证了请求的获取途径。接着，会根据之前传入的userHandler以及userHandler类型创建出一个Function类型的对象。</p><p>这个Function对象的创建，会根据start入口传递下来的function type的值来确定是创建event类型的handler还是http类型的handler，分别对应处理事件的请求和Http的请求。</p><p>这里我提供的代码中传输的是eventFuntion，后文就通过这一条方法调用流来进行追踪。</p><pre><code class=\"language-go\">func NewFunction(handler interface{}, funcType functionType) *Function {\n&nbsp;&nbsp;&nbsp; f := &amp;Function{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; funcType: funcType,\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; // 这里根据传入funcType来决定构造哪种类型的handler\n&nbsp;&nbsp;&nbsp; if f.funcType == eventFunction {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f.handler = NewHandler(handler)\n&nbsp;&nbsp;&nbsp; } else {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f.httpHandler = NewHttpHandler(handler)\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; return f\n}\n</code></pre><p>event类型的handler会通过NewHandler获得，该函数的返回值要求返回一个Handler类型的接口，这个接口需要实现一个标准的Invoke方法。</p><pre><code class=\"language-go\">type Handler interface {\n&nbsp;&nbsp;&nbsp; Invoke(ctx context.Context, payload []byte) ([]byte, error)\n}\nfunc NewHandler(userhandler interface{}) Handler {\n&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp; // 获取userhandler的动态值\n&nbsp;&nbsp;&nbsp; handler := reflect.ValueOf(userhandler)\n&nbsp;&nbsp;&nbsp; // 获取userhandler的类型信息\n&nbsp;&nbsp;&nbsp; handlerType := reflect.TypeOf(userhandler)\n&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp; return fcHandler(func(ctx context.Context, payload []byte) (interface{}, error) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 通过动态值对userhandler进行调用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response := handler.Call(args)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;return val, err\n&nbsp;&nbsp;&nbsp; })\n}\n</code></pre><p>在NewHandler中，也会利用GoLang中的反射机制，获取到userhandler的类型和动态值，并通过反射信息构造出一个有标准传参以及返回值的fcHandler类型的方法。在fcHandler中，由于代码中的handler本身为Value类型，因此可以通过Call方法调用其本身所代表的函数。如果你对反射的细节感兴趣，也可以看看关于<a href=\"https://pkg.go.dev/reflect\">Go语言反射</a>的官方手册介绍。</p><p>fcHandler是很特殊的，它本身是一个函数类型，并且已经实现了Invoke方法，因此也是一个Handler类型，这就解释了上文为什么以fcHandler作为返回值。而fcHandler中的Invoke最后调用了自己本身对应函数对请求进行了处理。</p><p>当准备工作就绪后，程序就开始对请求进行处理了，通过上述代码分析不难得出，主协程在这个函数中主要做了三件事：</p><ul>\n<li>准备获取用户请求的客户端（newRuntimeAPIClient）以及Funtion（对Handler封装）；</li>\n<li>不断通过客户端获取新的请求，也就是代码中的client.next()方法；</li>\n<li>分配一个新的协程，并让Function在新协程中处理获取到的请求。</li>\n</ul><h4>执行流程</h4><p>那么，进入新的协程以后，请求才会真正地被最初传入的userHandler所执行，我们深入到协程中的handleInvoke方法，会发现存在这样的调用关系：</p><pre><code class=\"language-go\">-&gt;handleInvoke&nbsp; 1\n&nbsp;&nbsp; -&gt;function.Invoke&nbsp;&nbsp; 2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;-&gt;function.invokeEventFunc&nbsp; || function.invokeHttpFunc)&nbsp; &nbsp;3\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt;function.handler.Invoke&nbsp; &nbsp;4\n</code></pre><p>在代码标号的第三步里，如果我们在入口start处传递的是httpFunction类型，这里就会调用function.invokeHttpFunc。当然，我们还是继续沿着上面提到的event事件请求来追踪，继续调用function.invokeEventFunc，在这个函数里面，会调用fn.handler.Invoke。</p><p>结合上面的函数调用关系来看，当执行到f.handler.Invoke时，实际上Invoke会对fcHandler进行一次调用，最后fcHandler通过handler.Call完成了对userHandler的调用。</p><pre><code class=\"language-go\">type fcHandler func(context.Context, []byte) (interface{}, error)\n&nbsp;\nfunc (handler fcHandler) Invoke(ctx context.Context, payload []byte) ([]byte, error) {\n&nbsp;\n&nbsp;&nbsp;&nbsp; response, err := handler(ctx, payload)\n&nbsp;&nbsp;&nbsp; if err != nil {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return nil, err\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; responseBytes, err := json.Marshal(response)\n&nbsp;&nbsp;&nbsp; if err != nil {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return nil, err\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; return responseBytes, nil\n}\n</code></pre><p>我将上面的流程梳理成了如下的示意图，你可以对照着再回溯一遍GoLang运行时的主流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/67/de/67450ac12a44f4c96bcda86184e5b0de.jpg?wh=1920x856\" alt=\"图片\"></p><p>这就是GoLang Runtime运行时在event调用的主流程，那么针对更细的流程和定义，你可以从Github上将代码下载下来，按照这个思路，逐一理解就可以了。</p><p>通过GoLang Runtime运行时的学习，相信你已经清楚了解了运行时需要完成的工作以及它整个的处理流程。</p><p>今天我们就先讲到这里，你可以先消化一下。解释型语言的运行时如何运行？在云厂商不开源情况下，我们又要如何剖析它？这些问题，我们下一节课再来继续讨论。</p><h3></h3><h2>小结</h2><p>最后，我来小结一下我们今天的内容。这节课，我给你介绍了以Golang为代表的编译型语言运行时在Serverless函数计算形态下的实现原理，<strong>函数计算运行时（Runtime）</strong><strong>，</strong><strong>本质上就是一个让函数在容器中执行起来的代码框架</strong>。</p><p>运行时通常会由一个初始化进程加载起来，然后进行内部服务的通信，接收和处理该函数收到的请求。</p><p>根据编程语言类型的不同，运行时的实现上也会略微有所不同。编译型语言的运行时需要和用户代码一起打包成二进制文件或者其他特定语言类型的包（如Jar包、War包），而解释型语言的运行时则可以与用户代码分离存在。所以，厂商一般都会将编译型运行时的代码进行开源，以SDK的形式提供给开发者使用。</p><p>从Golang Runtime的代码框架中，我们可以看出，运行时主要就是获取请求、关联用户的函数入口Handler、执行用户的实现。</p><p>希望你通过今天的课程，能够对函数计算形态下的语言运行时有一定的了解，不仅会用，更知道它如何实现的，在后续遇到问题或者开发更复杂的功能时，能够做到心中有数。</p><h2>思考题</h2><p>好了，这节课到这里也就结束了，最后我给你留了一个思考题。</p><p>我们上一节课中讲了Knative，那么Knative涉不涉及运行时一说呢？运行时只存在在云厂商的平台上么？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。感谢你的阅读，也欢迎你把这节课分享给更多的朋友一起交流学习。</p>","comments":[{"had_liked":false,"id":379532,"user_name":"Jade@pluto-lang","can_delete":false,"product_type":"c1","uid":1348924,"ip_address":"浙江","ucode":"C5570B3960C68D","user_header":"https://static001.geekbang.org/account/avatar/00/14/95/3c/2fefd0f8.jpg","comment_is_top":false,"comment_ctime":1692072306,"is_pvip":false,"replies":[{"id":138613,"content":"嗯嗯，是的","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1693969541,"ip_address":"上海","comment_id":379532,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"startRuntimeAPILoop函数里，go func创建协程中，handleInvoke的参数应该是闭包的f，不应该是function？","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627276,"discussion_content":"嗯嗯，是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693969541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3024212,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/25/54/2fb2a1a5.jpg","nickname":"李哲","note":"","ucode":"959720B5DE8699","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627275,"discussion_content":"没错，参数定义f是 *Function类型的，文中所述的function是指该协程方法实际传入的变量，这里可能容易产生歧义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693968541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371925,"user_name":"Wang Yifei","can_delete":false,"product_type":"c1","uid":3234227,"ip_address":"北京","ucode":"4F0777E8D8E4D3","user_header":"","comment_is_top":false,"comment_ctime":1680523226,"is_pvip":false,"replies":[{"id":135810,"content":"赞","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1680779553,"ip_address":"上海","comment_id":371925,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"猜测：Knative，Runtime作为容器镜像的一部分直接运行在User Pod的User Container里。\n而前面的课程讲过，云平台Runtime以挂载的形式注入到容器内。","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612560,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680779553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370014,"user_name":"吴红霞","can_delete":false,"product_type":"c1","uid":2466656,"ip_address":"上海","ucode":"47E3553020B068","user_header":"https://static001.geekbang.org/account/avatar/00/25/a3/60/fad00013.jpg","comment_is_top":false,"comment_ctime":1678258642,"is_pvip":false,"replies":[{"id":134896,"content":"赞，如果后续有自己实现的诉求，欢迎随时探讨","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1678267484,"ip_address":"上海","comment_id":370014,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"讲解很详细，看完后觉得自己入门了","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608102,"discussion_content":"赞，如果后续有自己实现的诉求，欢迎随时探讨","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678267484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361942,"user_name":"seek","can_delete":false,"product_type":"c1","uid":2717450,"ip_address":"上海","ucode":"BC7B7353A387FA","user_header":"https://static001.geekbang.org/account/avatar/00/29/77/0a/fa3f29d1.jpg","comment_is_top":false,"comment_ctime":1667992661,"is_pvip":false,"replies":[{"id":131674,"content":"编译后的文件","user_name":"作者回复","user_name_real":"编辑","uid":1703376,"ctime":1668046145,"ip_address":"上海","comment_id":361942,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100119701,"comment_content":"你好，我想请问下，以go为例，冷启动运行时从拉去代码开始，然后编译后运行，这样不会很慢吗？还是说保存的就是编译后的文件","like_count":0,"discussions":[{"author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593236,"discussion_content":"编译后的文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668046145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2717450,"avatar":"https://static001.geekbang.org/account/avatar/00/29/77/0a/fa3f29d1.jpg","nickname":"seek","note":"","ucode":"BC7B7353A387FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":593245,"discussion_content":"冷启动是重新拉取代码，如果是编译后的文件，那go就是可执行文件，java就是jar包。是不是直接保存镜像好一点？冷启动直接拉取镜像就好？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668050257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":593236,"ip_address":"广东","group_id":0},"score":593245,"extra":""},{"author":{"id":2717450,"avatar":"https://static001.geekbang.org/account/avatar/00/29/77/0a/fa3f29d1.jpg","nickname":"seek","note":"","ucode":"BC7B7353A387FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1703376,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fd/d0/e8d8fe44.jpg","nickname":"静远","note":"","ucode":"4C3C0452587776","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":593248,"discussion_content":"老师，你好，能微信沟通下吗？有一些问题可能需要深入了解下哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668051004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":593236,"ip_address":"广东","group_id":0},"score":593248,"extra":""}]}]}]}