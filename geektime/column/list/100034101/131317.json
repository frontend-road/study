{"id":131317,"title":"10 | 闭包： 理解了原理，它就不反直觉了","content":"<p>在讲作用域和生存期时，我提到函数里的本地变量只能在函数内部访问，函数退出之后，作用域就没用了，它对应的栈桢被弹出，作用域中的所有变量所占用的内存也会被收回。</p><p>但偏偏跑出来<strong>闭包（Closure）</strong>这个怪物。</p><p>在JavaScript中，用外层函数返回一个内层函数之后，这个内层函数能一直访问外层函数中的本地变量。按理说，这个时候外层函数已经退出了，它里面的变量也该作废了。可闭包却非常执着，即使外层函数已经退出，但内层函数仿佛不知道这个事实一样，还继续访问外层函数中声明的变量，并且还真的能够正常访问。</p><p>不过，闭包是很有用的，对库的编写者来讲，它能隐藏内部实现细节；对面试者来讲，它几乎是前端面试必问的一个问题，比如如何用闭包特性实现面向对象编程？等等。</p><p>本节课，我会带你研究闭包的实现机制，让你深入理解作用域和生存期，更好地使用闭包特性。为此，要解决两个问题：</p><ul>\n<li><strong>函数要变成playscript的一等公民。</strong>也就是要能把函数像普通数值一样赋值给变量，可以作为参数传递给其他函数，可以作为函数的返回值。</li>\n<li><strong>要让内层函数一直访问它环境中的变量，不管外层函数退出与否。</strong></li>\n</ul><p>我们先通过一个例子，研究一下闭包的特性，看看它另类在哪里。</p><h2>闭包的内在矛盾</h2><!-- [[[read_end]]] --><p>来测试一下JavaScript的闭包特性：</p><pre><code>/**\n * clojure.js\n * 测试闭包特性\n * 作者：宫文学\n */\nvar a = 0;\n\nvar fun1 = function(){\n    var b = 0;                // 函数内的局部变量\n\n    var inner = function(){   // 内部的一个函数\n        a = a+1;\n        b = b+1;\n        return b;             // 返回内部的成员\n    }\n\n    return inner;             // 返回一个函数\n}\n\nconsole.log(&quot;outside:  a=%d&quot;, a);\n\nvar fun2 = fun1();                            // 生成闭包\nfor (var i = 0; i&lt; 2; i++){\n    console.log(&quot;fun2: b=%d a=%d&quot;,fun2(), a); //通过fun2()来访问b\n}\n\nvar fun3 = fun1();                            // 生成第二个闭包\nfor (var i = 0; i&lt; 2; i++){\n    console.log(&quot;fun3: b=%d a=%d&quot;,fun3(), a); // b等于1，重新开始\n}\n</code></pre><p>在Node.js环境下运行上面这段代码的结果如下：</p><pre><code>outside:  a=0\nfun2: b=1 a=1\nfun2: b=2 a=2\nfun3: b=1 a=3\nfun3: b=2 a=4\n</code></pre><p>观察这个结果，可以得出两点：</p><ul>\n<li>内层的函数能访问它“看得见”的变量，包括自己的本地变量、外层函数的变量b和全局变量a。</li>\n<li>内层函数作为返回值赋值给其他变量以后，外层函数就结束了，但内层函数仍能访问原来外层函数的变量b，也能访问全局变量a。</li>\n</ul><p>这样似乎让人感到困惑：站在外层函数的角度看，明明这个函数已经退出了，变量b应该失效了，为什么还可以继续访问？但是如果换个立场，站在inner这个函数的角度来看，声明inner函数的时候，告诉它可以访问b，不能因为把inner函数赋值给了其他变量，inner函数里原本正确的语句就不能用了啊。</p><p><img src=\"https://static001.geekbang.org/resource/image/25/eb/25c5a91dd544ac1801f759ccc5b85ceb.jpg?wh=1142*564\" alt=\"图片: https://uploader.shimo.im/f/ZmhV8tamLjo5KkP4.png\"></p><p>其实，只要函数能作为值传来传去，就一定会产生作用域不匹配的情况，这样的内在矛盾是语言设计时就决定了的。<strong>我认为，闭包是为了让函数能够在这种情况下继续运行所提供的一个方案。</strong>这个方案有一些不错的特点，比如隐藏函数所使用的数据，歪打正着反倒成了一个优点了！</p><p>在这里，我想补充一下<strong>静态作用域（Static Scope）</strong>这个知识点，如果一门语言的作用域是静态作用域，那么符号之间的引用关系能够根据程序代码在编译时就确定清楚，在运行时不会变。某个函数是在哪声明的，就具有它所在位置的作用域。它能够访问哪些变量，那么就跟这些变量绑定了，在运行时就一直能访问这些变量。</p><p>看一看下面的代码，对于静态作用域而言，无论在哪里调用foo()函数，访问的变量i都是全局变量：</p><pre><code>int i = 1;\nvoid foo(){\n  println(i); // 访问全局变量\n}\n\nfoo();        // 访问全局变量\n\nvoid bar(){\n  int i = 2; \n  foo();      // 在这里调用foo()，访问的仍然是全局变量\n}\n</code></pre><p>我们目前使用的大多数语言都是采用静态作用域的。playscript语言也是在编译时就形成一个Scope的树，变量的引用也是在编译时就做了消解，不再改变，所以也是采用了静态作用域。</p><p>反过来讲，如果在bar()里调用foo()时，foo()访问的是bar()函数中的本地变量i，那就说明这门语言使用的是<strong>动态作用域（Dynamic Scope）</strong>。也就是说，变量引用跟变量声明不是在编译时就绑定死了的。在运行时，它是在运行环境中动态地找一个相同名称的变量。在macOS或Linux中用的bash脚本语言，就是动态作用域的。</p><p>静态作用域可以由程序代码决定，在编译时就能完全确定，所以又叫做词法作用域（Lexcical Scope）。不过这个词法跟我们做词法分析时说的词法不大一样。这里，跟Lexical相对应的词汇可以认为是Runtime，一个是编写时，一个是运行时。</p><p>用静态作用域的概念描述一下闭包，我们可以这样说：因为我们的语言是静态作用域的，它能够访问的变量，需要一直都能访问，为此，需要把某些变量的生存期延长。</p><p>当然了，闭包的产生还有另一个条件，就是让函数成为一等公民。这是什么意思？我们又怎样实现呢？</p><h2>函数作为一等公民</h2><p>在JavaScript和Python等语言里，函数可以像数值一样使用，比如给变量赋值、作为参数传递给其他函数，作为函数返回值等等。<strong>这时，我们就说函数是一等公民。</strong></p><p>作为一等公民的函数很有用，比如它能处理数组等集合。我们给数组的map方法传入一个回调函数，结果会生成一个新的数组。整个过程很简洁，没有出现啰嗦的循环语句，这也是很多人提倡函数式编程的原因之一：</p><pre><code>var newArray = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;].map(\n      fucntion(value,index,array){\n          return parseInt(value,10)\n      })\n</code></pre><p>那么在playscript中，怎么把函数作为一等公民呢？</p><p>我们需要支持函数作为基础类型，这样就可以用这种类型声明变量。但问题来了，如何声明一个函数类型的变量呢？</p><p>在JavaScript这种动态类型的语言里，我们可以把函数赋值给任何一个变量，就像前面示例代码里的那样：inner函数作为返回值，被赋给了fun2和fun3两个变量。</p><p>然而在Go语言这样要求严格类型匹配的语言里，就比较复杂了：</p><pre><code>type funcType func(int) int // Go语言，声明了一个函数类型funcType\nvar myFun funType          // 用这个函数类型声明了一个变量\n</code></pre><p>它对函数的原型有比较严格的要求：函数必须有一个int型的参数，返回值也必须是int型的。</p><p>而C语言中函数指针的声明也是比较严格的，在下面的代码中，myFun指针能够指向一个函数，这个函数也是有一个int类型的参数，返回值也是int：</p><pre><code>int (*myFun) (int);        //C语言，声明一个函数指针\n</code></pre><p>playscript也采用这种比较严格的声明方式，因为我们想实现一个静态类型的语言：</p><pre><code>function int (int) myFun;  //playscript中声明一个函数型的变量\n</code></pre><p>写成上面这样是因为我个人喜欢把变量名称左边的部分看做类型的描述，不像Go语言把类型放在变量名称后面。最难读的就是C语言那种声明方式了，竟然把变量名放在了中间。当然，这只是个人喜好。</p><p>把上面描述函数类型的语法写成Antlr的规则如下：</p><pre><code>functionType\n    : FUNCTION typeTypeOrVoid '(' typeList? ')'\n    ;\n\ntypeList\n    : typeType (',' typeType)*\n    ;\n</code></pre><p>在playscript中，我们用FuntionType接口代表一个函数类型，通过这个接口可以获得返回值类型、参数类型这两个信息：</p><pre><code>package play;\nimport java.util.List;\n/**\n * 函数类型\n */\npublic interface FunctionType extends Type {\n    public Type getReturnType();        //返回值类型\n    public List&lt;Type&gt; getParamTypes();  //参数类型\n}\n</code></pre><p>试一下实际使用效果如何，用Antlr解析下面这句的语法：</p><pre><code>function int(long, float) fun2 = fun1();\n</code></pre><p>它的意思是：调用fun1()函数会返回另一个函数，这个函数有两个参数，返回值是int型的。</p><p>我们用grun显示一下AST，你可以看到，它已经把functionType正确地解析出来了：</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/fa/b83891a55f855783eb6b7fd2e9b387fa.jpg?wh=1142*809\" alt=\"图片: https://uploader.shimo.im/f/812ANkYxJU8Xc6Kp.png\"></p><p>目前，我们只是设计完了语法，还要实现运行期的功能，让函数真的能像数值一样传来传去，就像下面的测试代码，它把foo()作为值赋给了bar()：</p><pre><code>/*\nFirstClassFunction.play 函数作为一等公民。\n也就是函数可以数值，赋给别的变量。\n支持函数类型，即FunctionType。\n*/\nint foo(int a){\n    println(&quot;in foo, a = &quot; + a);\n    return a;\n}\n\nint bar (function int(int) fun){\n    int b = fun(6);\n    println(&quot;in bar, b = &quot; + b);\n    return b;\n}\n\nfunction int(int) a = foo;  //函数作为变量初始化值\na(4);\n\nfunction int(int) b;        \nb = foo;                    //函数用于赋值语句\nb(5);\n\nbar(foo);                   //函数做为参数\n</code></pre><p>运行结果如下：</p><pre><code>in foo, a = 4\nin foo, a = 5\nin foo, a = 6\nin bar, b = 6\n</code></pre><p>运行这段代码，你会发现它实现了用函数来赋值，而实现这个功能的重点，是做好语义分析。比如编译程序要能识别赋值语句中的foo是一个函数，而不是一个传统的值。在调用a()和b()的时候，它也要正确地调用foo()的代码，而不是报“找不到a()函数的定义”这样的错误。</p><p>实现了一等公民函数的功能以后，我们进入本讲最重要的一环：<strong>实现闭包功能。</strong></p><h2>实现我们自己的闭包机制</h2><p>在这之前，我想先设计好测试用例，所以先把一开始提到的那个JavaScript的例子用playscript的语法重写一遍，来测试闭包功能：</p><pre><code>/**\n * clojure.play\n * 测试闭包特性\n */\nint a = 0;\n\nfunction int() fun1(){        //函数的返回值是一个函数\n    int b = 0;                //函数内的局部变量\n\n    int inner(){              //内部的一个函数\n        a = a+1;\n        b = b+1;\n        return b;             //返回内部的成员\n    }\n\n    return inner;             //返回一个函数\n}\n\nfunction int() fun2 = fun1();  \nfor (int i = 0; i&lt; 3; i++){\n    println(&quot;b = &quot; + fun2() + &quot;, a = &quot;+a);\n}\n\nfunction int() fun3 = fun1();  \nfor (int i = 0; i&lt; 3; i++){\n    println(&quot;b = &quot; + fun3() + &quot;, a = &quot;+a);\n}\n</code></pre><p>代码的运行效果跟JavaScript版本的程序是一样的：</p><pre><code>b = 1, a = 1\nb = 2, a = 2\nb = 3, a = 3\nb = 1, a = 4\nb = 2, a = 5\nb = 3, a = 6\n</code></pre><p>这段代码的AST我也让grun显示出来了，并截了一部分图，你可以直观地看一下外层函数和内层函数的关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/eb/cf93f6a6ffe3a63cc98023d2ea9d39eb.jpg?wh=1142*789\" alt=\"图片: https://uploader.shimo.im/f/vaWRcnserakKhNWs.png\"></p><p>现在，测试用例准备好了，我们着手实现一下闭包的机制。</p><p>前面提到，闭包的内在矛盾是运行时的环境和定义时的作用域之间的矛盾。那么我们把内部环境中需要的变量，打包交给闭包函数，它就可以随时访问这些变量了。</p><p>在AST上做一下图形化的分析，看看给fun2这个变量赋值的时候，发生了什么事情：</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/10/ef2ce5e3cc4fa01c219ae4a7ab22a610.jpg?wh=1142*828\" alt=\"\"></p><p>简单地描述一下给fun2赋值时的执行过程：</p><ul>\n<li>\n<p>先执行fun1()函数，内部的inner()函数作为返回值返回给调用者。这时，程序能访问两层作用域，最近一层是fun1()，里面有变量b；外层还有一层，里面有全局变量a。这时是把环境变量打包的最后的机会，否则退出fun1()函数以后，变量b就消失了。</p>\n</li>\n<li>\n<p>然后把内部函数连同打包好的环境变量的值，创建一个FunctionObject对象，作为fun1()的返回值，给到调用者。</p>\n</li>\n<li>\n<p>给fun2这个变量赋值。</p>\n</li>\n<li>\n<p>调用fun2()函数。函数执行时，有一个私有的闭包环境可以访问b的值，这个环境就是第二步所创建的FunctionObject对象。</p>\n</li>\n</ul><p><strong>最终，我们实现了闭包的功能。</strong></p><p>在这个过程中，我们要提前记录下inner()函数都引用了哪些外部变量，以便对这些变量打包。这是在对程序做语义分析时完成的，你可以参考一下ClosureAnalyzer.java中的代码：</p><pre><code> /**\n     * 为某个函数计算闭包变量，也就是它所引用的外部环境变量。\n     * 算法：计算所有的变量引用，去掉内部声明的变量，剩下的就是外部的。\n     * @param function\n     * @return\n     */\nprivate Set&lt;Variable&gt; calcClosureVariables(Function function){\n    Set&lt;Variable&gt; refered = variablesReferedByScope(function);\n    Set&lt;Variable&gt; declared = variablesDeclaredUnderScope(function);\n    refered.removeAll(declared);\n    return refered;\n}\n</code></pre><p>下面是ASTEvaluator.java中把环境变量打包进闭包中的代码片段，它是在当前的栈里获取数据的：</p><pre><code>/**\n * 为闭包获取环境变量的值\n * @param function 闭包所关联的函数。这个函数会访问一些环境变量。\n * @param valueContainer  存放环境变量的值的容器\n */\nprivate void getClosureValues(Function function, PlayObject valueContainer){\n    if (function.closureVariables != null) {\n        for (Variable var : function.closureVariables) {\n            // 现在还可以从栈里取，退出函数以后就不行了\n            LValue lValue = getLValue(var); \n            Object value = lValue.getValue();\n            valueContainer.fields.put(var, value);\n        }\n    }\n}\n</code></pre><p>你可以把测试用例跑一跑，修改一下，试试其他闭包特性。</p><h2>体验一下函数式编程</h2><p>现在，我们已经实现了闭包的机制，函数也变成了一等公民。不经意间，我们似乎在一定程度上支持了函数式编程（functional programming）。</p><p>它是一种语言风格，有很多优点，比如简洁、安全等。备受很多程序员推崇的LISP语言就具备函数式编程特征，Java等语言也增加了函数式编程的特点。</p><p>函数式编程的一个典型特点就是高阶函数（High-order function）功能，高阶函数是这样一种函数，它能够接受其他函数作为自己的参数，javascript中数组的map方法，就是一个高阶函数。我们通过下面的例子测试一下高阶函数功能：</p><pre><code>/**\nLinkedList.play\n实现了一个简单的链表，并演示了高阶函数的功能，比如在javascript中常用的map功能，\n它能根据遍历列表中的每个元素，执行一个函数，并返回一个新的列表。给它传不同的函数，会返回不同的列表。\n*/\n//链表的节点\nclass ListNode{\n    int value;\n    ListNode next; //下一个节点\n\n    ListNode (int v){\n        value = v;\n    }\n}\n\n//链表\nclass LinkedList{\n    ListNode start;\n    ListNode end;\n\n    //添加新节点\n    void add(int value){\n        ListNode node = ListNode(value);\n        if (start == null){\n            start = node;\n            end = node;\n        }\n        else{\n            end.next = node;\n            end = node;\n        }\n    }\n\n    //打印所有节点内容\n    void dump(){\n        ListNode node = start;\n        while (node != null){\n            println(node.value);\n            node = node.next;\n        }\n    }\n\n    //高阶函数功能，参数是一个函数，对每个成员做一个计算，形成一个新的LinkedList\n    LinkedList map(function int(int) fun){\n        ListNode node = start;\n        LinkedList newList = LinkedList();\n        while (node != null){\n            int newValue = fun(node.value);\n            newList.add(newValue);\n            node = node.next;\n        }\n        return newList;\n    }\n}\n\n//函数：平方值\nint square(int value){\n    return value * value;\n}\n\n//函数：加1\nint addOne(int value){\n    return value + 1;\n}\n\nLinkedList list = LinkedList();\nlist.add(2);\nlist.add(3);\nlist.add(5);\n\nprintln(&quot;original list:&quot;);\nlist.dump();\n\nprintln();\nprintln(&quot;add 1 to each element:&quot;);\nLinkedList list2 = list.map(addOne);\nlist2.dump();\n\nprintln();\nprintln(&quot;square of each element:&quot;);\nLinkedList list3 = list.map(square);\nlist3.dump();\n</code></pre><p>运行后得到的结果如下：</p><pre><code>original list:\n2\n3\n5\n\nadd 1 to each element:\n3\n4\n6\n\nsquare of each element:\n4\n9\n25\n</code></pre><p>高阶函数功能很好玩，你可以修改程序，好好玩一下。</p><h2>课程小结</h2><p>闭包这个概念，对于初学者来讲是一个挑战。其实，闭包就是把函数在静态作用域中所访问的变量的生存期拉长，形成一份可以由这个函数单独访问的数据。正因为这些数据只能被闭包函数访问，所以也就具备了对信息进行封装、隐藏内部细节的特性。</p><p>听上去是不是有点儿耳熟？封装，把数据和对数据的操作封在一起，这不就是面向对象编程嘛！一个闭包可以看做是一个对象。反过来看，一个对象是不是也可以看做一个闭包呢？对象的属性，也可以看做被方法所独占的环境变量，其生存期也必须保证能够被方法一直正常的访问。</p><p>你看，两个不相干的概念，在用作用域和生存期这样的话语体系去解读之后，就会很相似，在内部实现上也可以当成一回事。现在，你应该更清楚了吧？</p><h2>一课一思</h2><p>思考一下我在开头提到的那个面试题：如何用闭包做类似面向对象的编程？</p><p>其实，我在课程中提供了一个closure-mammal.play的示例代码，它完全用闭包的概念实现了面向对象编程的多态特征。而这个闭包的实现，是一种更高级的闭包，比普通的函数闭包还多了一点有用的特性，更像对象了。我希望你能发现它到底不同在哪里，也能在代码中找到实现这些特性的位置。</p><p>你能发现，我一直在讲作用域和生存期，不要嫌我啰嗦，把它们吃透，会对你使用语言有很大帮助。比如，有同学非常困扰JavaScript的this，我负责任地讲，只要对作用域有清晰的了解，你就能很容易地掌握this。</p><p>那么，关于作用域跟this之间的关联，如果你有什么想法，也欢迎在留言区分享。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友，特别是分享给那些还没搞清楚闭包的朋友。</p><p>本节课的示例代码放在了文末，供你参考。</p><ul>\n<li>playscript-java（项目目录）： <a href=\"https://gitee.com/richard-gong/PlayWithCompiler/tree/master/playscript-java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/tree/master/playscript-java\">GitHub</a></li>\n<li>PlayScript.java（入口程序）：   <a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/main/play/PlayScript.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/PlayScript.java\">GitHub</a></li>\n<li>PlayScript.g4（语法规则）：     <a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/main/play/PlayScript.g4\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/PlayScript.g4\">GitHub</a></li>\n<li>ASTEvaluator.java（解释器，找找闭包运行期时怎么实现的）： <a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/main/play/ASTEvaluator.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/ASTEvaluator.java\">GitHub</a></li>\n<li>ClosureAnalyzer.java（分析闭包所引用的环境变量）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/main/play/ClosureAnalyzer.java\">码云</a>    <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/ClosureAnalyzer.java\">GitHub</a></li>\n<li>RefResolver.java（在这里看看函数型变量是怎么消解的）： <a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/main/play/RefResolver.java\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/RefResolver.java\">GitHub</a></li>\n<li>closure.play（演示基本的闭包特征）： <a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/examples/closure.play\">码云</a>   <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/examples/closure.play\">GitHub</a></li>\n<li>closure-fibonacci.play（用闭包实现了斐波那契数列计算）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/examples/closure-fibonacci.play\">码云</a>    <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/examples/closure-fibonacci.play\">GitHub</a></li>\n<li>closure-mammal.play（用闭包实现了面向对象特性，请找找它比普通闭包强在哪里）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/examples/closure-mammal.play\">码云</a>    <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/examples/closure-mammal.play\">GitHub</a></li>\n<li>FirstClassFunction.play（演示一等公民函数的特征）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/examples/FirstClassFunction.play\">码云</a>    <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/examples/FirstClassFunction.play\">GitHub</a></li>\n<li>LinkedList.play（演示了高阶函数map）：<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/examples/LinkedList.play\">码云</a>    <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/examples/LinkedList.play\">GitHub</a></li>\n</ul><p></p>","comments":[{"had_liked":false,"id":171922,"user_name":"独钓寒江雪","can_delete":false,"product_type":"c1","uid":1625419,"ip_address":"","ucode":"76278A3EBCE0B8","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/4b/36396a18.jpg","comment_is_top":false,"comment_ctime":1579053851,"is_pvip":true,"replies":[{"id":"76758","content":"总结得非常好！Great！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586663941,"ip_address":"","comment_id":171922,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44528726811","product_id":100034101,"comment_content":"闭包的产生（以JavaScript为例）：<br>1. 因为JavaScript是静态作用域的，所以它内部环境中需要的变量在编译时就确定了，运行时不会改变；<br>2. 因为JavaScript中，函数是一等公民，可以被调用，可以作为参数传递，可以赋值给变量，也可以作为函数返回值，所以它的运行时环境很容易变化；<br>3. 当函数作为参数返回时，其外层函数中的变量已经从调用栈弹出，但是我们必须让函数可以访问到它需要的变量，因此运行时的环境和定义时的作用域之间就产生矛盾；<br>4. 所以我们把内部环境中需要的变量，打包交给内层函数（闭包函数），它就可以随时访问这些变量了，就形成了闭包。","like_count":11,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481547,"discussion_content":"总结得非常好！Great！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586663941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145081,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1572183004,"is_pvip":false,"replies":[{"id":"57673","content":"我这几年对复杂系统有关的理论很感兴趣，曾经在校友的一次聚会上分享了一个主题，其中的主要意思，就是从科学甚至可以推导出哲学，印证古老智慧。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573433506,"ip_address":"","comment_id":145081,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44521855964","product_id":100034101,"comment_content":"有些东西研究的透彻以后，你就会不由自主的成为哲学家了。","like_count":11,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472236,"discussion_content":"我这几年对复杂系统有关的理论很感兴趣，曾经在校友的一次聚会上分享了一个主题，其中的主要意思，就是从科学甚至可以推导出哲学，印证古老智慧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573433506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2718510,"avatar":"","nickname":"jack123","note":"","ucode":"873D0046EF39D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400311,"discussion_content":"牛顿 当初写的第一本著作 就叫做《自然哲学中的数学原理》😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633230858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142147,"user_name":"nil","can_delete":false,"product_type":"c1","uid":1507193,"ip_address":"","ucode":"0F5D298C1CBB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/79/3b38c9e1.jpg","comment_is_top":false,"comment_ctime":1571300310,"is_pvip":false,"replies":[{"id":"57578","content":"非常好！<br>遇到看似不正常的东西的时候，其实就是让认知深化的契机。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573343308,"ip_address":"","comment_id":142147,"utype":1}],"discussion_count":3,"race_medal":0,"score":"40226005974","product_id":100034101,"comment_content":"记得第一次遇到闭包是在学习python得时候，方式刚觉这个玩意好牛逼。后来随着对其理解的深入，闭包完全带有面向对象的意思，外层函数通过函数参数的形式给内部函数创建运营期变量，这个运行期作用的变量和oop中的成员变量有相似的味道。通过这一讲，对闭包的实现原理有了进一步的理解，原来闭包不反人类，设计还相当巧妙😁","like_count":10,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471005,"discussion_content":"非常好！\n遇到看似不正常的东西的时候，其实就是让认知深化的契机。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573343308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1378779,"avatar":"https://static001.geekbang.org/account/avatar/00/15/09/db/78996b11.jpg","nickname":"Gaollard","note":"","ucode":"1B200F5E73C3E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546143,"discussion_content":"同学好细节啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642175671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050269,"avatar":"","nickname":"minghu6","note":"","ucode":"F44058E21B14C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359596,"discussion_content":"我的理解是闭包必须要有词法作用域（Lexcical Scope）这个东西。\n\n通俗说就是能隔离外部的变量，一方面当值传入后时候，函数的状态就不能被外部改变了；另一方面，函数的执行决不能影响外部的变量（无副作用）。\n\n而且用词法作用域与语言是否是动态类型也没关系，最经典的比如Lisp就是动态类型，而拥有词法作用域。\n\n像 JS、Python这种脚本语言根本就没有闭包，只能叫做动态作用域，在函数内部能访问并修改外部的变量，而修改外部的变量直接影响了函数内部的状态。\n\n如果这能叫做闭包，那么C语言也可以被认为是具有面向对象的性质的语言了，因为我们也可以在C语言里通过代码的编写规范来实现面向对象的编程。\n\n至于什么从JS的闭包谈到面向对象和数据封装当然也就是荒诞了，闭包做不了面向对象，但反过来基于对象（由class关键字定义）可以实现闭包，因为对象提供了词法作用域的替代实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616236816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131388,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1567736911,"is_pvip":false,"replies":[{"id":"50769","content":"非常好，你注意到了这个细节。<br>实际上，我在运行时用到了一个小技巧。首先是按照作用域查找变量，这个时候就会找到那个全局变量。在作用域里找不到的时候，再到FunctionObject中去找。所以，其实运行期里，全局变量存了两份。一份是在顶层的栈桢里，一份在FunctionObject里。只不过后者不起作用罢了。<br><br>当存在多层函数嵌套的时候，上面的算法可以根据运行时所在的作用域，访问正确的变量。<br><br>这个方法有些偷懒，因为毕竟FunctionObject里冗余了一份，浪费空间了。你也可以找其他机制来实现。只要支持闭包的原理就行！<br><br>你可以参考ASTEvaluator.java中的getLValue()方法，里面有注释，说了这个思路。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568184879,"ip_address":"","comment_id":131388,"utype":1}],"discussion_count":6,"race_medal":0,"score":"31632507983","product_id":100034101,"comment_content":"闭包如果引用的是外部函数中的局部变量，直接把这个变量从栈中复制一份到FunctionObject里面就可以了，但是如果应用了全局变量的话，感觉必须要引用全局变量本身，这样才能自己的修改体现在全局变量中。老师代码中是如何实现这个的呢？","like_count":8,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466428,"discussion_content":"非常好，你注意到了这个细节。\n实际上，我在运行时用到了一个小技巧。首先是按照作用域查找变量，这个时候就会找到那个全局变量。在作用域里找不到的时候，再到FunctionObject中去找。所以，其实运行期里，全局变量存了两份。一份是在顶层的栈桢里，一份在FunctionObject里。只不过后者不起作用罢了。\n\n当存在多层函数嵌套的时候，上面的算法可以根据运行时所在的作用域，访问正确的变量。\n\n这个方法有些偷懒，因为毕竟FunctionObject里冗余了一份，浪费空间了。你也可以找其他机制来实现。只要支持闭包的原理就行！\n\n你可以参考ASTEvaluator.java中的getLValue()方法，里面有注释，说了这个思路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568184879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","nickname":"沉淀的梦想","note":"","ucode":"BCB7C26F9D214B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8269,"discussion_content":"仔细研究了老师的代码，原来在闭包函数中获取变量值的时候，还是优先从Scope中逐层查找，直到最顶层的Scope都找不到该变量时，才会去闭包中寻找。这样闭包在使用全局变量的使用就不会使用一开始打包的那个过时的全局变量。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567866741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1385204,"avatar":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","nickname":"核桃","note":"","ucode":"7AB05270CBCCCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574870,"discussion_content":"这里延伸一下，那么顶层和闭包里面的全局变量是独立的还是共用一份内存的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654415015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2102801,"avatar":"","nickname":"Ryan","note":"","ucode":"33BFC4C00D8279","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331053,"discussion_content":"哪呢？文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606754614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061517,"avatar":"https://static001.geekbang.org/account/avatar/00/10/32/8d/91cd624b.jpg","nickname":"幻境之桥","note":"","ucode":"F9F4DD94CB554E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220195,"discussion_content":"可是如果外层变量和全局变量同名，这样先找全局变量应该不对了吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585840168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1515149,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1e/8d/5b242931.jpg","nickname":"Fish","note":"","ucode":"C20719F8B0F7C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1061517,"avatar":"https://static001.geekbang.org/account/avatar/00/10/32/8d/91cd624b.jpg","nickname":"幻境之桥","note":"","ucode":"F9F4DD94CB554E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315074,"discussion_content":"内部能区分，比如使用不同的id","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603241038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":220195,"ip_address":""},"score":315074,"extra":""}]}]},{"had_liked":false,"id":138477,"user_name":"风","can_delete":false,"product_type":"c1","uid":1444483,"ip_address":"","ucode":"E1CE0825AAF805","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","comment_is_top":false,"comment_ctime":1570266424,"is_pvip":false,"replies":[{"id":"53817","content":"但只对这个闭包有用。再调用一次函数，新生成一个闭包，就会再生成另一个变量。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1570677284,"ip_address":"","comment_id":138477,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23045102904","product_id":100034101,"comment_content":"怎么看起来像：<br>闭包变量，就是在语义分析时，为闭包函数生成的static变量。","like_count":5,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469534,"discussion_content":"但只对这个闭包有用。再调用一次函数，新生成一个闭包，就会再生成另一个变量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570677284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1329408,"avatar":"https://static001.geekbang.org/account/avatar/00/14/49/00/d92bb51c.jpg","nickname":"sunbird","note":"","ucode":"99D76818CB4A8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330053,"discussion_content":"感觉理解为java的成员变量更合适。每调用一次外层函数，都会为内层函数生成一个闭包，就好像new对象的时候分配的一块内存，确实和对象的内存分配机制太像了，在内存中的生命周期也一样。彻底理解javascript中的闭包了，也理解了javascript中用闭包来实现面向对象的机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606507300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135445,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1569162278,"is_pvip":false,"replies":[{"id":"52075","content":"那更方便了！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1569295659,"ip_address":"","comment_id":135445,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23043998758","product_id":100034101,"comment_content":"我今天发现 IntelliJ 全家桶支持 ANTLR 插件，可以集成在编译器里直接查看生成的 AST。","like_count":6,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468198,"discussion_content":"那更方便了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569295659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181054,"user_name":"Tao","can_delete":false,"product_type":"c1","uid":1023008,"ip_address":"","ucode":"45339E42C997F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/20/37ec7b9b.jpg","comment_is_top":false,"comment_ctime":1582467213,"is_pvip":false,"replies":[{"id":"74251","content":"从语言的设计角度讲，对象的方法和函数没有什么区别。<br>比如，java程序在调用方法时，会在第一个参数中传递对象引用，这就是this。比如一个void foo(int a)函数，实际会接收到两个参数。<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1585187447,"ip_address":"","comment_id":181054,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14467369101","product_id":100034101,"comment_content":"JavaScript 函数中 this ，如果是一个函数是对象调用比如 obj.foo()，那么foo中这个this就是当前对象obj<br>如果这个foo当作普通函数调用如：<br>var bar =obj.foo<br>bar()<br>这个时候this就不是obj这个对象了，非严格模式下this此时是全局对象 window","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484901,"discussion_content":"从语言的设计角度讲，对象的方法和函数没有什么区别。\n比如，java程序在调用方法时，会在第一个参数中传递对象引用，这就是this。比如一个void foo(int a)函数，实际会接收到两个参数。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585187447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207316,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":false,"comment_ctime":1587046714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10176981306","product_id":100034101,"comment_content":"既然聊到JavaScript，我还是想问一句 宫老师真的觉得js的this设计不是败笔吗？感觉在es规范迭代的多个版本中，形成了一个相当沉重的历史包袱。严格模式下，语言制定者（或者说当时有权修改语言规范的人）就对this的含义做了修改。就像前面评论的那位所说，this在非严格模式指向window，而如果开启严格模式这里又是报错了...","like_count":2},{"had_liked":false,"id":188570,"user_name":"dbo","can_delete":false,"product_type":"c1","uid":1052678,"ip_address":"","ucode":"3C5343589E47C2","user_header":"","comment_is_top":false,"comment_ctime":1584369608,"is_pvip":false,"replies":[{"id":"77021","content":"有一个概念，叫做词法作用域（Lexical Scope），又叫做静态作用域。也就是变量的声明和使用的关系（变量消解），是在编译期就可以确定的，是完全由变量在源代码中的位置决定的。<br><br>对于闭包的情况，内部函数使用了外部函数的变量。但这个内部函数在运行时又被传到其他地方去使用。那么声明这个函数时所依赖的变量，在实际运行时，没有办法从上一级的栈帧里去获取，这就是矛盾的地方。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586831248,"ip_address":"","comment_id":188570,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174304200","product_id":100034101,"comment_content":"其实，只要函数能作为值传来传去，就一定会产生作用域不匹配的情况，这样的内在矛盾是语言设计时就决定了的。<br><br>不理解这句话，为什么函数作为值传来传去会产生作用域不匹配的情况，考试能解释下吗？谢谢。","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487452,"discussion_content":"有一个概念，叫做词法作用域（Lexical Scope），又叫做静态作用域。也就是变量的声明和使用的关系（变量消解），是在编译期就可以确定的，是完全由变量在源代码中的位置决定的。\n\n对于闭包的情况，内部函数使用了外部函数的变量。但这个内部函数在运行时又被传到其他地方去使用。那么声明这个函数时所依赖的变量，在实际运行时，没有办法从上一级的栈帧里去获取，这就是矛盾的地方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586831248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136187,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1569379514,"is_pvip":false,"replies":[{"id":"57691","content":"应该说，this本来就用来指代当前作用域的。对象就是一个作用域。所以this总在变是应该的。this不需要我们在代码里去声明，它是一个内在的机制。<br><br>动态作用域，是指我们在代码里显式声明的变量，其值不是声明时的作用域里的值，而是运行环境的作用域里的值。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573440909,"ip_address":"","comment_id":136187,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10159314106","product_id":100034101,"comment_content":"个人理解： JavaScript是 静态作用域    但是JavaScript中this 是动态作用域","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468499,"discussion_content":"应该说，this本来就用来指代当前作用域的。对象就是一个作用域。所以this总在变是应该的。this不需要我们在代码里去声明，它是一个内在的机制。\n\n动态作用域，是指我们在代码里显式声明的变量，其值不是声明时的作用域里的值，而是运行环境的作用域里的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573440909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1905024,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/11/80/73ff198e.jpg","nickname":"VictorLee","note":"","ucode":"FF7C211DA853CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306101,"discussion_content":"小黄书里讲过这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600169235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046304,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f7/20/e2dfa9c2.jpg","nickname":"花儿与少年","note":"","ucode":"E2D685737E4F1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23158,"discussion_content":"对的, 不过箭头函数里this 是词法this","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569763278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131735,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1567868135,"is_pvip":false,"replies":[{"id":"50750","content":"看一下closure.play示例程序：<br><br>int a = 0;<br>function int() fun1(){<br>    int b = 0;                &#47;&#47;函数内的局部变量<br>    int inner(){              &#47;&#47;内部的一个函数<br>        a = a+1;<br>        b = b+1;<br>        return b;             &#47;&#47;返回内部的成员<br>    }<br>    return inner;             &#47;&#47;返回一个函数<br>}<br>function int() fun2 = fun1();  <br><br>这时候，fun2是个变量，这个变量就是fun1()中的inner()函数的receiver。这个时候，inner()函数的运行时坐在的作用域是fun2这个变量的。<br><br>receiver这个机制是我创造的，不用拘泥于这种实现方式。只要能够实现闭包的原理，就都可以。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568183346,"ip_address":"","comment_id":131735,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10157802727","product_id":100034101,"comment_content":"                &#47;*<br>                这是针对函数可能是一等公民的情况。这个时候，函数运行时的作用域，与声明时的作用域会不一致。<br>                我在这里设计了一个“receiver”的机制，意思是这个函数是被哪个变量接收了。要按照这个receiver的作用域来判断。<br>                 *&#47;<br>                else if (frame.object instanceof FunctionObject){<br>                    FunctionObject functionObject = (FunctionObject)frame.object;<br>                    if (functionObject.receiver != null &amp;&amp; functionObject.receiver.enclosingScope == f.scope) {<br>                        frame.parentFrame = f;<br>                        break;<br>                    }<br>                }<br><br>不是很理解老师的这个receiver机制，能举个例子吗？","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466601,"discussion_content":"看一下closure.play示例程序：\n\nint a = 0;\nfunction int() fun1(){\n    int b = 0;                //函数内的局部变量\n    int inner(){              //内部的一个函数\n        a = a+1;\n        b = b+1;\n        return b;             //返回内部的成员\n    }\n    return inner;             //返回一个函数\n}\nfunction int() fun2 = fun1();  \n\n这时候，fun2是个变量，这个变量就是fun1()中的inner()函数的receiver。这个时候，inner()函数的运行时坐在的作用域是fun2这个变量的。\n\nreceiver这个机制是我创造的，不用拘泥于这种实现方式。只要能够实现闭包的原理，就都可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568183346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","nickname":"沉淀的梦想","note":"","ucode":"BCB7C26F9D214B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9729,"discussion_content":"按照文中的说法，闭包运行时的作用域不是应该和他定义时的作用域一致吗？这里怎么又和运行时所属变量的作用域有关系了呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568210188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131530,"user_name":"Geek_d0aef1","can_delete":false,"product_type":"c1","uid":1632382,"ip_address":"","ucode":"DF89F1386049DC","user_header":"","comment_is_top":false,"comment_ctime":1567782857,"is_pvip":false,"replies":[{"id":"50763","content":"你运行antlr命令的时候，通过带不同的参数，会生成数量不等的java文件。工具生成的头上都带有注释，说明是Antlr生成的。<br>在playscript-java项目中，应该是有6个。1个lexer，1个parser，2个是支持listener，2个是支持visitor的。<br>其他是手动写的:-)","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568183914,"ip_address":"","comment_id":131530,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10157717449","product_id":100034101,"comment_content":"想问个没有技术含量的问题，想确认下，antlr 自动生成的代码只有4个，其他都是自己手动写的？","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466506,"discussion_content":"你运行antlr命令的时候，通过带不同的参数，会生成数量不等的java文件。工具生成的头上都带有注释，说明是Antlr生成的。\n在playscript-java项目中，应该是有6个。1个lexer，1个parser，2个是支持listener，2个是支持visitor的。\n其他是手动写的:-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568183914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233193,"user_name":"Nail","can_delete":false,"product_type":"c1","uid":1154906,"ip_address":"","ucode":"1781E6D8D758B1","user_header":"https://static001.geekbang.org/account/avatar/00/11/9f/5a/e7622ea3.jpg","comment_is_top":false,"comment_ctime":1594257631,"is_pvip":false,"replies":[{"id":"86337","content":"TS实现visitor也很简单。一个办法，是让Antlr给你生成一下，然后你可以借鉴一下。Antlr支持TS。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1594559959,"ip_address":"","comment_id":233193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889224927","product_id":100034101,"comment_content":"我用的是 ts，从 7 开始，发现很难跟上了。举个例子，比如在实现 visitor 时的很多方法都和 java 的不一样，也没有找到对应的文档。想请问有没有缓解的办法","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500937,"discussion_content":"TS实现visitor也很简单。一个办法，是让Antlr给你生成一下，然后你可以借鉴一下。Antlr支持TS。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594559959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281953,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1096652,"ip_address":"","ucode":"E79CEA70430449","user_header":"https://static001.geekbang.org/account/avatar/00/10/bb/cc/fac12364.jpg","comment_is_top":false,"comment_ctime":1614990035,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614990035","product_id":100034101,"comment_content":"现在代码确实是看不太懂了，就读读思想把。感觉保存变量那块术语其实就是 Capture，然后大部分语言在这里是允许返回的函数修改capture到的变量的，但Java不可以，所以还得用数组绕过。","like_count":0},{"had_liked":false,"id":248453,"user_name":"VictorLee","can_delete":false,"product_type":"c1","uid":1905024,"ip_address":"","ucode":"FF7C211DA853CE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/11/80/73ff198e.jpg","comment_is_top":false,"comment_ctime":1600169318,"is_pvip":false,"replies":[{"id":"94666","content":"Great!","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1605085105,"ip_address":"","comment_id":248453,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600169318","product_id":100034101,"comment_content":"那个是闭包面试经典题，另外js中的this实现了类似的动态作用域机制，其确定有一个优先级","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505655,"discussion_content":"Great!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605085105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229561,"user_name":"Geek_179681","can_delete":false,"product_type":"c1","uid":1994379,"ip_address":"","ucode":"62A639826107C5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ereQ8v2H89H7lGLMfk8Gw7iaskB7tJFL54ibXTvQoNJUhNoBPiaQG8bEsh2aUEITGMosaAbWzoAZajbQ/132","comment_is_top":false,"comment_ctime":1593057930,"is_pvip":false,"replies":[{"id":"85225","content":"没错，C语言中的函数指针是一种数据类型，可以用来作为参数传递或赋值，从而实现函数式编程的一些优点。<br><br>在把函数作为参数传递方面，每种语言的实现机制是不一样的。比如，对于Python而言，函数也是一个对象，跟一个整数、一个字符串是一样的。Python的运行时会根据这个对象里的信息，找到一个具体的函数地址（机器码地址）去执行，或者去解释执行一段字节码。我在《编译原理实战课》对上述机制做了剖析。<br><br>关于最后一个问题，C和C++的标准规范里是不支持函数的嵌套定义的。但是，由于C语言具有高度的灵活性，它其实可以模拟出闭包的效果来，你可以在网络上搜索一下其实现机制。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1593499036,"ip_address":"","comment_id":229561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593057930","product_id":100034101,"comment_content":"老师好，C语言里用函数指针作为参数传递也能实现本节中 LinkedList 中 map 的作用，可以认为它们是类似的东西吗？比如说函数能作为参数传递的底层也是传递函数地址？<br>另外一个问题是，C 和 C++ 中没有函数嵌套定义的问题，所以是否也就不存在闭包的概念，即不存在在函数中返回另一个函数的操作场景？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499534,"discussion_content":"没错，C语言中的函数指针是一种数据类型，可以用来作为参数传递或赋值，从而实现函数式编程的一些优点。\n\n在把函数作为参数传递方面，每种语言的实现机制是不一样的。比如，对于Python而言，函数也是一个对象，跟一个整数、一个字符串是一样的。Python的运行时会根据这个对象里的信息，找到一个具体的函数地址（机器码地址）去执行，或者去解释执行一段字节码。我在《编译原理实战课》对上述机制做了剖析。\n\n关于最后一个问题，C和C++的标准规范里是不支持函数的嵌套定义的。但是，由于C语言具有高度的灵活性，它其实可以模拟出闭包的效果来，你可以在网络上搜索一下其实现机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593499036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177218,"user_name":"Aaaaaaaaaaayou","can_delete":false,"product_type":"c1","uid":1073601,"ip_address":"","ucode":"67BA315B87587D","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/c1/93031a2a.jpg","comment_is_top":false,"comment_ctime":1581324290,"is_pvip":false,"replies":[{"id":"77026","content":"LValue的意思是左值，也就是可以出现在赋值符号左边的值。它得是一个变量的引用（或C语言中变量的地址），这样才能修改变量的值。<br>与之对应的，是右值。右值可以仅仅是一个值。也就是示例代码中的Object。<br>左值可以当做右值来用，而右值不能当做左值来用。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586831894,"ip_address":"","comment_id":177218,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581324290","product_id":100034101,"comment_content":"老师，有个问题问一下，代码中的 LValue 类型是干嘛用的，为什么有些节点的返回值是 Object，有些是 LValue","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483350,"discussion_content":"LValue的意思是左值，也就是可以出现在赋值符号左边的值。它得是一个变量的引用（或C语言中变量的地址），这样才能修改变量的值。\n与之对应的，是右值。右值可以仅仅是一个值。也就是示例代码中的Object。\n左值可以当做右值来用，而右值不能当做左值来用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586831894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131701,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1567857670,"is_pvip":false,"replies":[{"id":"50752","content":":-)","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568183503,"ip_address":"","comment_id":131701,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567857670","product_id":100034101,"comment_content":"精彩。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466578,"discussion_content":":-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568183503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131217,"user_name":"茶底","can_delete":false,"product_type":"c1","uid":1188926,"ip_address":"","ucode":"687DD3686A84D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg","comment_is_top":false,"comment_ctime":1567673271,"is_pvip":false,"replies":[{"id":"49542","content":"lex和yacc都没计划讲。因为这些工具都差不多。掌握原理后，用哪个应该都没问题。<br>lex（或flex）比较简单，所以会用Antlr一定也会用lex。<br>yacc（或bison）是LR算法的，我们讲完LR算法以后，你理解这个工具的原理应该也没啥问题。<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1567684302,"ip_address":"","comment_id":131217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567673271","product_id":100034101,"comment_content":"老师什么时候开始讲lex和yacc啊","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466340,"discussion_content":"lex和yacc都没计划讲。因为这些工具都差不多。掌握原理后，用哪个应该都没问题。\nlex（或flex）比较简单，所以会用Antlr一定也会用lex。\nyacc（或bison）是LR算法的，我们讲完LR算法以后，你理解这个工具的原理应该也没啥问题。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567684302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}