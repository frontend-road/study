{"id":41366,"title":"21 | 容器化守护进程的意义：DaemonSet","content":"<p>你好，我是张磊。今天我和你分享的主题是：容器化守护进程的意义之DaemonSet。</p><p>在上一篇文章中，我和你详细分享了使用StatefulSet编排“有状态应用”的过程。从中不难看出，StatefulSet其实就是对现有典型运维业务的容器化抽象。也就是说，你一定有方法在不使用Kubernetes、甚至不使用容器的情况下，自己DIY一个类似的方案出来。但是，一旦涉及到升级、版本管理等更工程化的能力，Kubernetes的好处，才会更加凸现。</p><p>比如，如何对StatefulSet进行“滚动更新”（rolling update）？</p><p>很简单。你只要修改StatefulSet的Pod模板，就会自动触发“滚动更新”:</p><pre><code>$ kubectl patch statefulset mysql --type='json' -p='[{&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/image&quot;, &quot;value&quot;:&quot;mysql:5.7.23&quot;}]'\nstatefulset.apps/mysql patched\n</code></pre><p>在这里，我使用了kubectl patch命令。它的意思是，以“补丁”的方式（JSON格式的）修改一个API对象的指定字段，也就是我在后面指定的“spec/template/spec/containers/0/image”。</p><p>这样，StatefulSet Controller就会按照与Pod编号相反的顺序，从最后一个Pod开始，逐一更新这个StatefulSet管理的每个Pod。而如果更新发生了错误，这次“滚动更新”就会停止。此外，StatefulSet的“滚动更新”还允许我们进行更精细的控制，比如金丝雀发布（Canary Deploy）或者灰度发布，<strong>这意味着应用的多个实例中被指定的一部分不会被更新到最新的版本。</strong></p><!-- [[[read_end]]] --><p>这个字段，正是StatefulSet的spec.updateStrategy.rollingUpdate的partition字段。</p><p>比如，现在我将前面这个StatefulSet的partition字段设置为2：</p><pre><code>$ kubectl patch statefulset mysql -p '{&quot;spec&quot;:{&quot;updateStrategy&quot;:{&quot;type&quot;:&quot;RollingUpdate&quot;,&quot;rollingUpdate&quot;:{&quot;partition&quot;:2}}}}'\nstatefulset.apps/mysql patched\n</code></pre><p>其中，kubectl patch命令后面的参数（JSON格式的），就是partition字段在API对象里的路径。所以，上述操作等同于直接使用 kubectl edit命令，打开这个对象，把partition字段修改为2。</p><p>这样，我就指定了当Pod模板发生变化的时候，比如MySQL镜像更新到5.7.23，那么只有序号大于或者等于2的Pod会被更新到这个版本。并且，如果你删除或者重启了序号小于2的Pod，等它再次启动后，也会保持原先的5.7.2版本，绝不会被升级到5.7.23版本。</p><p>StatefulSet可以说是Kubernetes项目中最为复杂的编排对象，希望你课后能认真消化，动手实践一下这个例子。</p><p>而在今天这篇文章中，我会为你重点讲解一个相对轻松的知识点：DaemonSet。</p><p>顾名思义，DaemonSet的主要作用，是让你在Kubernetes集群里，运行一个Daemon Pod。 所以，这个Pod有如下三个特征：</p><ol>\n<li>\n<p>这个Pod运行在Kubernetes集群里的每一个节点（Node）上；</p>\n</li>\n<li>\n<p>每个节点上只有一个这样的Pod实例；</p>\n</li>\n<li>\n<p>当有新的节点加入Kubernetes集群后，该Pod会自动地在新节点上被创建出来；而当旧节点被删除后，它上面的Pod也相应地会被回收掉。</p>\n</li>\n</ol><p>这个机制听起来很简单，但Daemon Pod的意义确实是非常重要的。我随便给你列举几个例子：</p><ol>\n<li>\n<p>各种网络插件的Agent组件，都必须运行在每一个节点上，用来处理这个节点上的容器网络；</p>\n</li>\n<li>\n<p>各种存储插件的Agent组件，也必须运行在每一个节点上，用来在这个节点上挂载远程存储目录，操作容器的Volume目录；</p>\n</li>\n<li>\n<p>各种监控组件和日志组件，也必须运行在每一个节点上，负责这个节点上的监控信息和日志搜集。</p>\n</li>\n</ol><p>更重要的是，跟其他编排对象不一样，DaemonSet开始运行的时机，很多时候比整个Kubernetes集群出现的时机都要早。</p><p>这个乍一听起来可能有点儿奇怪。但其实你来想一下：如果这个DaemonSet正是一个网络插件的Agent组件呢？</p><p>这个时候，整个Kubernetes集群里还没有可用的容器网络，所有Worker节点的状态都是NotReady（NetworkReady=false）。这种情况下，普通的Pod肯定不能运行在这个集群上。所以，这也就意味着DaemonSet的设计，必须要有某种“过人之处”才行。</p><p>为了弄清楚DaemonSet的工作原理，我们还是按照老规矩，先从它的API对象的定义说起。</p><pre><code>apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluentd-elasticsearch\n  namespace: kube-system\n  labels:\n    k8s-app: fluentd-logging\nspec:\n  selector:\n    matchLabels:\n      name: fluentd-elasticsearch\n  template:\n    metadata:\n      labels:\n        name: fluentd-elasticsearch\n    spec:\n      tolerations:\n      - key: node-role.kubernetes.io/master\n        effect: NoSchedule\n      containers:\n      - name: fluentd-elasticsearch\n        image: k8s.gcr.io/fluentd-elasticsearch:1.20\n        resources:\n          limits:\n            memory: 200Mi\n          requests:\n            cpu: 100m\n            memory: 200Mi\n        volumeMounts:\n        - name: varlog\n          mountPath: /var/log\n        - name: varlibdockercontainers\n          mountPath: /var/lib/docker/containers\n          readOnly: true\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: varlog\n        hostPath:\n          path: /var/log\n      - name: varlibdockercontainers\n        hostPath:\n          path: /var/lib/docker/containers\n</code></pre><p>这个DaemonSet，管理的是一个fluentd-elasticsearch镜像的Pod。这个镜像的功能非常实用：通过fluentd将Docker容器里的日志转发到ElasticSearch中。</p><p>可以看到，DaemonSet跟Deployment其实非常相似，只不过是没有replicas字段；它也使用selector选择管理所有携带了name=fluentd-elasticsearch标签的Pod。</p><p>而这些Pod的模板，也是用template字段定义的。在这个字段中，我们定义了一个使用 fluentd-elasticsearch:1.20镜像的容器，而且这个容器挂载了两个hostPath类型的Volume，分别对应宿主机的/var/log目录和/var/lib/docker/containers目录。</p><p>显然，fluentd启动之后，它会从这两个目录里搜集日志信息，并转发给ElasticSearch保存。这样，我们通过ElasticSearch就可以很方便地检索这些日志了。</p><p>需要注意的是，Docker容器里应用的日志，默认会保存在宿主机的/var/lib/docker/containers/{{.容器ID}}/{{.容器ID}}-json.log文件里，所以这个目录正是fluentd的搜集目标。</p><p>那么，<strong>DaemonSet又是如何保证每个Node上有且只有一个被管理的Pod呢？</strong></p><p>显然，这是一个典型的“控制器模型”能够处理的问题。</p><p>DaemonSet Controller，首先从Etcd里获取所有的Node列表，然后遍历所有的Node。这时，它就可以很容易地去检查，当前这个Node上是不是有一个携带了name=fluentd-elasticsearch标签的Pod在运行。</p><p>而检查的结果，可能有这么三种情况：</p><ol>\n<li>\n<p>没有这种Pod，那么就意味着要在这个Node上创建这样一个Pod；</p>\n</li>\n<li>\n<p>有这种Pod，但是数量大于1，那就说明要把多余的Pod从这个Node上删除掉；</p>\n</li>\n<li>\n<p>正好只有一个这种Pod，那说明这个节点是正常的。</p>\n</li>\n</ol><p>其中，删除节点（Node）上多余的Pod非常简单，直接调用Kubernetes API就可以了。</p><p>但是，<strong>如何在指定的Node上创建新Pod呢？</strong></p><p>如果你已经熟悉了Pod API对象的话，那一定可以立刻说出答案：用nodeSelector，选择Node的名字即可。</p><pre><code>nodeSelector:\n    name: &lt;Node名字&gt;\n</code></pre><p>没错。</p><p>不过，在Kubernetes项目里，nodeSelector其实已经是一个将要被废弃的字段了。因为，现在有了一个新的、功能更完善的字段可以代替它，即：nodeAffinity。我来举个例子：</p><pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: with-node-affinity\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: metadata.name\n            operator: In\n            values:\n            - node-geektime\n</code></pre><p>在这个Pod里，我声明了一个spec.affinity字段，然后定义了一个nodeAffinity。其中，spec.affinity字段，是Pod里跟调度相关的一个字段。关于它的完整内容，我会在讲解调度策略的时候再详细阐述。</p><p>而在这里，我定义的nodeAffinity的含义是：</p><ol>\n<li>\n<p>requiredDuringSchedulingIgnoredDuringExecution：它的意思是说，这个nodeAffinity必须在每次调度的时候予以考虑。同时，这也意味着你可以设置在某些情况下不考虑这个nodeAffinity；</p>\n</li>\n<li>\n<p>这个Pod，将来只允许运行在“<code>metadata.name</code>”是“node-geektime”的节点上。</p>\n</li>\n</ol><p>在这里，你应该注意到nodeAffinity的定义，可以支持更加丰富的语法，比如operator: In（即：部分匹配；如果你定义operator: Equal，就是完全匹配），这也正是nodeAffinity会取代nodeSelector的原因之一。</p><blockquote>\n<p>备注：其实在大多数时候，这些Operator语义没啥用处。所以说，在学习开源项目的时候，一定要学会抓住“主线”。不要顾此失彼。</p>\n</blockquote><p>所以，<strong>我们的DaemonSet Controller会在创建Pod的时候，自动在这个Pod的API对象里，加上这样一个nodeAffinity定义</strong>。其中，需要绑定的节点名字，正是当前正在遍历的这个Node。</p><p>当然，DaemonSet并不需要修改用户提交的YAML文件里的Pod模板，而是在向Kubernetes发起请求之前，直接修改根据模板生成的Pod对象。这个思路，也正是我在前面讲解Pod对象时介绍过的。</p><p>此外，DaemonSet还会给这个Pod自动加上另外一个与调度相关的字段，叫作tolerations。这个字段意味着这个Pod，会“容忍”（Toleration）某些Node的“污点”（Taint）。</p><p>而DaemonSet自动加上的tolerations字段，格式如下所示：</p><pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: with-toleration\nspec:\n  tolerations:\n  - key: node.kubernetes.io/unschedulable\n    operator: Exists\n    effect: NoSchedule\n</code></pre><p>这个Toleration的含义是：“容忍”所有被标记为unschedulable“污点”的Node；“容忍”的效果是允许调度。</p><blockquote>\n<p>备注：关于如何给一个Node标记上“污点”，以及这里具体的语法定义，我会在后面介绍调度器的时候做详细介绍。这里，你可以简单地把“污点”理解为一种特殊的Label。</p>\n</blockquote><p>而在正常情况下，被标记了unschedulable“污点”的Node，是不会有任何Pod被调度上去的（effect: NoSchedule）。可是，DaemonSet自动地给被管理的Pod加上了这个特殊的Toleration，就使得这些Pod可以忽略这个限制，继而保证每个节点上都会被调度一个Pod。当然，如果这个节点有故障的话，这个Pod可能会启动失败，而DaemonSet则会始终尝试下去，直到Pod启动成功。</p><p>这时，你应该可以猜到，我在前面介绍到的<strong>DaemonSet的“过人之处”，其实就是依靠Toleration实现的。</strong></p><p>假如当前DaemonSet管理的，是一个网络插件的Agent Pod，那么你就必须在这个DaemonSet的YAML文件里，给它的Pod模板加上一个能够“容忍”<code>node.kubernetes.io/network-unavailable</code>“污点”的Toleration。正如下面这个例子所示：</p><pre><code>...\ntemplate:\n    metadata:\n      labels:\n        name: network-plugin-agent\n    spec:\n      tolerations:\n      - key: node.kubernetes.io/network-unavailable\n        operator: Exists\n        effect: NoSchedule\n</code></pre><p>在Kubernetes项目中，当一个节点的网络插件尚未安装时，这个节点就会被自动加上名为<code>node.kubernetes.io/network-unavailable</code>的“污点”。</p><p><strong>而通过这样一个Toleration，调度器在调度这个Pod的时候，就会忽略当前节点上的“污点”，从而成功地将网络插件的Agent组件调度到这台机器上启动起来。</strong></p><p>这种机制，正是我们在部署Kubernetes集群的时候，能够先部署Kubernetes本身、再部署网络插件的根本原因：因为当时我们所创建的Weave的YAML，实际上就是一个DaemonSet。</p><blockquote>\n<p>这里，你也可以再回顾一下第11篇文章<a href=\"https://time.geekbang.org/column/article/39724\">《从0到1：搭建一个完整的Kubernetes集群》</a>中的相关内容。</p>\n</blockquote><p>至此，通过上面这些内容，你应该能够明白，<strong>DaemonSet其实是一个非常简单的控制器</strong>。在它的控制循环中，只需要遍历所有节点，然后根据节点上是否有被管理Pod的情况，来决定是否要创建或者删除一个Pod。</p><p>只不过，在创建每个Pod的时候，DaemonSet会自动给这个Pod加上一个nodeAffinity，从而保证这个Pod只会在指定节点上启动。同时，它还会自动给这个Pod加上一个Toleration，从而忽略节点的unschedulable“污点”。</p><p>当然，<strong>你也可以在Pod模板里加上更多种类的Toleration，从而利用DaemonSet达到自己的目的</strong>。比如，在这个fluentd-elasticsearch DaemonSet里，我就给它加上了这样的Toleration：</p><pre><code>tolerations:\n- key: node-role.kubernetes.io/master\n  effect: NoSchedule\n</code></pre><p>这是因为在默认情况下，Kubernetes集群不允许用户在Master节点部署Pod。因为，Master节点默认携带了一个叫作<code>node-role.kubernetes.io/master</code>的“污点”。所以，为了能在Master节点上部署DaemonSet的Pod，我就必须让这个Pod“容忍”这个“污点”。</p><p>在理解了DaemonSet的工作原理之后，接下来我就通过一个具体的实践来帮你更深入地掌握DaemonSet的使用方法。</p><blockquote>\n<p>备注：需要注意的是，在Kubernetes v1.11之前，由于调度器尚不完善，DaemonSet是由DaemonSet Controller自行调度的，即它会直接设置Pod的spec.nodename字段，这样就可以跳过调度器了。但是，这样的做法很快就会被废除，所以在这里我也不推荐你再花时间学习这个流程了。</p>\n</blockquote><p><strong>首先，创建这个DaemonSet对象：</strong></p><pre><code>$ kubectl create -f fluentd-elasticsearch.yaml\n</code></pre><p>需要注意的是，在DaemonSet上，我们一般都应该加上resources字段，来限制它的CPU和内存使用，防止它占用过多的宿主机资源。</p><p>而创建成功后，你就能看到，如果有N个节点，就会有N个fluentd-elasticsearch Pod在运行。比如在我们的例子里，会有两个Pod，如下所示：</p><pre><code>$ kubectl get pod -n kube-system -l name=fluentd-elasticsearch\nNAME                          READY     STATUS    RESTARTS   AGE\nfluentd-elasticsearch-dqfv9   1/1       Running   0          53m\nfluentd-elasticsearch-pf9z5   1/1       Running   0          53m\n</code></pre><p>而如果你此时通过kubectl get查看一下Kubernetes集群里的DaemonSet对象：</p><pre><code>$ kubectl get ds -n kube-system fluentd-elasticsearch\nNAME                    DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE\nfluentd-elasticsearch   2         2         2         2            2           &lt;none&gt;          1h\n</code></pre><blockquote>\n<p>备注：Kubernetes里比较长的API对象都有短名字，比如DaemonSet对应的是ds，Deployment对应的是deploy。</p>\n</blockquote><p>就会发现DaemonSet和Deployment一样，也有DESIRED、CURRENT等多个状态字段。这也就意味着，DaemonSet可以像Deployment那样，进行版本管理。这个版本，可以使用kubectl rollout history看到：</p><pre><code>$ kubectl rollout history daemonset fluentd-elasticsearch -n kube-system\ndaemonsets &quot;fluentd-elasticsearch&quot;\nREVISION  CHANGE-CAUSE\n1         &lt;none&gt;\n</code></pre><p><strong>接下来，我们来把这个DaemonSet的容器镜像版本到v2.2.0：</strong></p><pre><code>$ kubectl set image ds/fluentd-elasticsearch fluentd-elasticsearch=k8s.gcr.io/fluentd-elasticsearch:v2.2.0 --record -n=kube-system\n</code></pre><p>这个kubectl set image命令里，第一个fluentd-elasticsearch是DaemonSet的名字，第二个fluentd-elasticsearch是容器的名字。</p><p>这时候，我们可以使用kubectl rollout status命令看到这个“滚动更新”的过程，如下所示：</p><pre><code>$ kubectl rollout status ds/fluentd-elasticsearch -n kube-system\nWaiting for daemon set &quot;fluentd-elasticsearch&quot; rollout to finish: 0 out of 2 new pods have been updated...\nWaiting for daemon set &quot;fluentd-elasticsearch&quot; rollout to finish: 0 out of 2 new pods have been updated...\nWaiting for daemon set &quot;fluentd-elasticsearch&quot; rollout to finish: 1 of 2 updated pods are available...\ndaemon set &quot;fluentd-elasticsearch&quot; successfully rolled out\n</code></pre><p>注意，由于这一次我在升级命令后面加上了–record参数，所以这次升级使用到的指令就会自动出现在DaemonSet的rollout history里面，如下所示：</p><pre><code>$ kubectl rollout history daemonset fluentd-elasticsearch -n kube-system\ndaemonsets &quot;fluentd-elasticsearch&quot;\nREVISION  CHANGE-CAUSE\n1         &lt;none&gt;\n2         kubectl set image ds/fluentd-elasticsearch fluentd-elasticsearch=k8s.gcr.io/fluentd-elasticsearch:v2.2.0 --namespace=kube-system --record=true\n</code></pre><p>有了版本号，你也就可以像Deployment一样，将DaemonSet回滚到某个指定的历史版本了。</p><p>而我在前面的文章中讲解Deployment对象的时候，曾经提到过，Deployment管理这些版本，靠的是“一个版本对应一个ReplicaSet对象”。可是，DaemonSet控制器操作的直接就是Pod，不可能有ReplicaSet这样的对象参与其中。<strong>那么，它的这些版本又是如何维护的呢？</strong></p><p>所谓，一切皆对象！</p><p>在Kubernetes项目中，任何你觉得需要记录下来的状态，都可以被用API对象的方式实现。当然，“版本”也不例外。</p><p>Kubernetes v1.7之后添加了一个API对象，名叫<strong>ControllerRevision</strong>，专门用来记录某种Controller对象的版本。比如，你可以通过如下命令查看fluentd-elasticsearch对应的ControllerRevision：</p><pre><code>$ kubectl get controllerrevision -n kube-system -l name=fluentd-elasticsearch\nNAME                               CONTROLLER                             REVISION   AGE\nfluentd-elasticsearch-64dc6799c9   daemonset.apps/fluentd-elasticsearch   2          1h\n</code></pre><p>而如果你使用kubectl describe查看这个ControllerRevision对象：</p><pre><code>$ kubectl describe controllerrevision fluentd-elasticsearch-64dc6799c9 -n kube-system\nName:         fluentd-elasticsearch-64dc6799c9\nNamespace:    kube-system\nLabels:       controller-revision-hash=2087235575\n              name=fluentd-elasticsearch\nAnnotations:  deprecated.daemonset.template.generation=2\n              kubernetes.io/change-cause=kubectl set image ds/fluentd-elasticsearch fluentd-elasticsearch=k8s.gcr.io/fluentd-elasticsearch:v2.2.0 --record=true --namespace=kube-system\nAPI Version:  apps/v1\nData:\n  Spec:\n    Template:\n      $ Patch:  replace\n      Metadata:\n        Creation Timestamp:  &lt;nil&gt;\n        Labels:\n          Name:  fluentd-elasticsearch\n      Spec:\n        Containers:\n          Image:              k8s.gcr.io/fluentd-elasticsearch:v2.2.0\n          Image Pull Policy:  IfNotPresent\n          Name:               fluentd-elasticsearch\n...\nRevision:                  2\nEvents:                    &lt;none&gt;\n</code></pre><p>就会看到，这个ControllerRevision对象，实际上是在Data字段保存了该版本对应的完整的DaemonSet的API对象。并且，在Annotation字段保存了创建这个对象所使用的kubectl命令。</p><p>接下来，我们可以尝试将这个DaemonSet回滚到Revision=1时的状态：</p><pre><code>$ kubectl rollout undo daemonset fluentd-elasticsearch --to-revision=1 -n kube-system\ndaemonset.extensions/fluentd-elasticsearch rolled back\n</code></pre><p>这个kubectl rollout undo操作，实际上相当于读取到了Revision=1的ControllerRevision对象保存的Data字段。而这个Data字段里保存的信息，就是Revision=1时这个DaemonSet的完整API对象。</p><p>所以，现在DaemonSet Controller就可以使用这个历史API对象，对现有的DaemonSet做一次PATCH操作（等价于执行一次kubectl apply -f “旧的DaemonSet对象”），从而把这个DaemonSet“更新”到一个旧版本。</p><p>这也是为什么，在执行完这次回滚完成后，你会发现，DaemonSet的Revision并不会从Revision=2退回到1，而是会增加成Revision=3。这是因为，一个新的ControllerRevision被创建了出来。</p><h2>总结</h2><p>在今天这篇文章中，我首先简单介绍了StatefulSet的“滚动更新”，然后重点讲解了本专栏的第三个重要编排对象：DaemonSet。</p><p>相比于Deployment，DaemonSet只管理Pod对象，然后通过nodeAffinity和Toleration这两个调度器的小功能，保证了每个节点上有且只有一个Pod。这个控制器的实现原理简单易懂，希望你能够快速掌握。</p><p>与此同时，DaemonSet使用ControllerRevision，来保存和管理自己对应的“版本”。这种“面向API对象”的设计思路，大大简化了控制器本身的逻辑，也正是Kubernetes项目“声明式API”的优势所在。</p><p>而且，相信聪明的你此时已经想到了，StatefulSet也是直接控制Pod对象的，那么它是不是也在使用ControllerRevision进行版本管理呢？</p><p>没错。在Kubernetes项目里，ControllerRevision其实是一个通用的版本管理对象。这样，Kubernetes项目就巧妙地避免了每种控制器都要维护一套冗余的代码和逻辑的问题。</p><h2>思考题</h2><p>我在文中提到，在Kubernetes v1.11之前，DaemonSet所管理的Pod的调度过程，实际上都是由DaemonSet Controller自己而不是由调度器完成的。你能说出这其中有哪些原因吗？</p><p>感谢你的收听，欢迎你给我留言，也欢迎分享给更多的朋友一起阅读。</p>","neighbors":{"left":{"article_title":"20 | 深入理解StatefulSet（三）：有状态应用实践","id":41217},"right":{"article_title":"22 | 撬动离线业务：Job与CronJob","id":41607}},"comments":[{"had_liked":false,"id":31269,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1539140305,"is_pvip":false,"replies":[{"id":"11257","content":"是的，关键就在于，调度优先级这个特性出现了。所以现在的设计其实没啥特别的地方。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539142595,"ip_address":"","comment_id":31269,"utype":1}],"discussion_count":2,"race_medal":0,"score":"280712014545","product_id":100015201,"comment_content":"思考题，<br><br>我觉得应该是效率的问题。<br><br>查了一下v1.11 的 release notes。scheduler关于affinity谓词的性能大大提高了。<br><br>查阅了Ds用默认调度器代替controller的设计文档<br>之前的做法是：<br>controller判断调度谓词，符合的话直接在controller中直接设置spec.hostName去调度。<br>目前的做法是：<br>controller不再判断调度条件，给每个pode设置NodeAffinity。控制器根据NodeAffinity去检查每个node上是否启动了相应的Pod。并且可以利用调度优先级去优先调度关键的ds pods。","like_count":65,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426272,"discussion_content":"是的，关键就在于，调度优先级这个特性出现了。所以现在的设计其实没啥特别的地方。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1539142595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043072,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/80/8759e4c1.jpg","nickname":"🐻","note":"","ucode":"534EDAD496A0E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377654,"discussion_content":"请问您说的 controller 是指 Controller Manager 吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622766982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124356,"user_name":"紫夜","can_delete":false,"product_type":"c1","uid":1205423,"ip_address":"","ucode":"88CFF4C188B65A","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/af/6dbbb482.jpg","comment_is_top":false,"comment_ctime":1565865883,"is_pvip":false,"replies":[{"id":"46511","content":"到目前为止，DS只有一种策略就是先删除再创建 OnDelete","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1566351141,"ip_address":"","comment_id":124356,"utype":1}],"discussion_count":4,"race_medal":0,"score":"117529982875","product_id":100015201,"comment_content":"张老师，DaemonSet的滚动更新，是先delete旧的pod，再启动新的pod，还是和Deployment一样，先创建新的pod，再删除旧的pod?","like_count":27,"discussions":[{"author":{"id":2112134,"avatar":"https://static001.geekbang.org/account/avatar/00/20/3a/86/92c20959.jpg","nickname":"Free","note":"","ucode":"0AD38A0B3611E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381195,"discussion_content":"1.21版本，DaemonSet 有两种更新策略：\n\nOnDelete: 使用 OnDelete 更新策略时，在更新 DaemonSet 模板后，只有当你手动删除老的 DaemonSet pods 之后，新的 DaemonSet Pod 才会被自动创建。跟 Kubernetes 1.6 以前的版本类似。\nRollingUpdate: 这是默认的更新策略。使用 RollingUpdate 更新策略时，在更新 DaemonSet 模板后， 老的 DaemonSet pods 将被终止，并且将以受控方式自动创建新的 DaemonSet pods。 更新期间，最多只能有 DaemonSet 的一个 Pod 运行于每个节点上。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1624951478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463132,"discussion_content":"到目前为止，DS只有一种策略就是先删除再创建 OnDelete","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566351141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1227639,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bb/77/e1391dd8.jpg","nickname":"旺旺","note":"","ucode":"2067D3BCCA7C0A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334916,"discussion_content":"我看我部署得1.18版本得更新策略又变成了rollingupdate","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608026123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1223106,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a9/c2/f9fe5e90.jpg","nickname":"ants","note":"","ucode":"5FAF7576F305DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41794,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572506211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31448,"user_name":"北卡","can_delete":false,"product_type":"c1","uid":1218128,"ip_address":"","ucode":"2D947A61689FC6","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/50/bde525b1.jpg","comment_is_top":false,"comment_ctime":1539182456,"is_pvip":false,"replies":[{"id":"11323","content":"是的。准确的说，是一步一步的减小partition ，一直减成0。就发布完了。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539223495,"ip_address":"","comment_id":31448,"utype":1}],"discussion_count":1,"race_medal":0,"score":"117503299448","product_id":100015201,"comment_content":"我跟上面的朋友有同样的疑问，关于Partition更新的。<br><br>我设置了Partition，用部分pod来做灰度发布，然后发现没问题，我要全部更新，就只需要去掉Partition字段吗？<br>然后我下一次更新的时候，就要再先加上Partition，然后再更新。全部更新时再去掉。<br><br>我看了老师的回复，表达的是这个意思吗？","like_count":27,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426345,"discussion_content":"是的。准确的说，是一步一步的减小partition ，一直减成0。就发布完了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539223495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31155,"user_name":"DJH","can_delete":false,"product_type":"c1","uid":1256740,"ip_address":"","ucode":"2BDEF123B3DB6A","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/24/28acca15.jpg","comment_is_top":false,"comment_ctime":1539129768,"is_pvip":false,"replies":[{"id":"11254","content":"已经解释。不会，重启不会破坏拓扑规则，而且文章里说了，你要确保你的脚本不受重启影响。去掉partition。多个对象。支持，字段也一样。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539138973,"ip_address":"","comment_id":31155,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96028410280","product_id":100015201,"comment_content":"张老师，请教几个基础问题：<br>1. 在上一讲中，有一点我还是没想通，为何MySQL的数据复制操作必须要用sidecar容器来处理，而不用Mysql主容器来一并解决，你当时提到说是因为容器是单进程模型。如果取消sidecar容器，把数据复制操作和启动MySQL服务这两个操作一并写到MySQL主容器的sh -c命令中，这样算不算一个进程呢？<br><br>2. StatefulSet的容器启动有先后顺序，那么当序号较小的容器由于某种原因需要重启时，会不会先把序号较大的容器KILL掉，再按照它们本来的顺序重新启动一次？<br><br>3. 在这一讲中，你提到了滚动升级时StatefulSet控制新旧副本数的spec.updateStrategy.rollingUpdate.Partition字段。假设我现在已经用这个功能已经完成了灰度发布，需要把所有POD都更新到最新版本，那么是不是Edit或者Patch这个StatefulSet，把spec.updateStrategy.rollingUpdate.Partition字段修改成总的POD数即可？<br><br>4. 在这一讲中提到ControllerRevision这个API对象，K8S会对StatefulSet或DaemonSet的每一次滚动升级都会产生一个新的ControllerRevision对象，还是每个StatefulSet或DaemonSet对象只会有一个关联的ControllerRevision对象，不同的revision记录到同一个ControllerRevision对象中？<br><br>5. Deployment里可以控制保留历史ReplicaSet的数量，那么ControllerRevision这个API对象能不能做到保留指定数量的版本记录？<br><br>问题比较多，谢谢！","like_count":22,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426251,"discussion_content":"已经解释。不会，重启不会破坏拓扑规则，而且文章里说了，你要确保你的脚本不受重启影响。去掉partition。多个对象。支持，字段也一样。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1539138973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31373,"user_name":"Kanner","can_delete":false,"product_type":"c1","uid":1024243,"ip_address":"","ucode":"28743D9F413602","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/f3/871e4a54.jpg","comment_is_top":false,"comment_ctime":1539165354,"is_pvip":false,"replies":[{"id":"11282","content":"第一，它比较老。第二，它要用replicaset。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539173319,"ip_address":"","comment_id":31373,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78848576682","product_id":100015201,"comment_content":"那为什么Deployment不用ControllerRevison管理版本呢","like_count":18,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426310,"discussion_content":"第一，它比较老。第二，它要用replicaset。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539173319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229796,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1119133,"ip_address":"","ucode":"4BCA899B8E4E85","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/9d/0ff43179.jpg","comment_is_top":false,"comment_ctime":1593148339,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57427723187","product_id":100015201,"comment_content":"k8s.gcr.io&#47;fluentd-elasticsearch镜像下不到，百度搜到有人用 mirrorgooglecontainers&#47;前头的镜像替代“科学上网”，<br>于是访问 https:&#47;&#47;hub.docker.com&#47;r&#47;镜像名&#47;tags 来查看替代镜像的所有版本。<br><br>https:&#47;&#47;hub.docker.com&#47;r&#47;mirrorgooglecontainers&#47;fluentd-elasticsearch&#47;tags<br><br>找到了以下两个版本来做实验。<br>mirrorgooglecontainers&#47;fluentd-elasticsearch:v2.0.0<br><br>mirrorgooglecontainers&#47;fluentd-elasticsearch:v2.4.0","like_count":13,"discussions":[{"author":{"id":2762955,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/28/cb/42c9b1a0.jpg","nickname":"师师","note":"","ucode":"AF3EB5FDA6285C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400119,"discussion_content":"docker search一个版本，pull下来tag成api里的版本运行即可，这是常用技巧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633172254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31379,"user_name":"宋晓明","can_delete":false,"product_type":"c1","uid":1146507,"ip_address":"","ucode":"DC866DCE2FBA9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/7e/8b/3cc461b3.jpg","comment_is_top":false,"comment_ctime":1539166422,"is_pvip":false,"replies":[{"id":"11283","content":"小规模用用可以，上生产环境还是要用标准的功能。你会发现越用越爽。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539173389,"ip_address":"","comment_id":31379,"utype":1}],"discussion_count":3,"race_medal":0,"score":"40193872086","product_id":100015201,"comment_content":"老师：有没有公司这样用k8s的：apiserver管理很多pod 每个pod的ip地址全部暴露出来 nginx的upstream配置全是pod的ip地址，访问流程也就是client—&gt;nginx—&gt;pod:port  还有一个程序会监控pod地址变化，一旦变化，自动更新nginx配置。这是新公司使用k8s的流程，感觉好多k8s特性都没用到，比如service，ingress等 大材小用了。。。","like_count":9,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426314,"discussion_content":"小规模用用可以，上生产环境还是要用标准的功能。你会发现越用越爽。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539173389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147711,"avatar":"https://static001.geekbang.org/account/avatar/00/11/83/3f/bc2ea80d.jpg","nickname":"陌.寒哲","note":"","ucode":"B7079FF211D712","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5849,"discussion_content":"你这种就是典型的适合使用ingress的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566485198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2179383,"avatar":"https://static001.geekbang.org/account/avatar/00/21/41/37/b89f3d67.jpg","nickname":"我在睡觉","note":"","ucode":"6503B611151D3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339046,"discussion_content":"这么用跟用传统云也没啥区别。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609484494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31236,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1539134705,"is_pvip":false,"replies":[{"id":"11252","content":"系统用的和用户用的。taint是spec的一个字段","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539138585,"ip_address":"","comment_id":31236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35898873073","product_id":100015201,"comment_content":"一直不理解notation和label的区别，他们的设计思想是什么呢？加污点是前者还是后者？","like_count":8,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426262,"discussion_content":"系统用的和用户用的。taint是spec的一个字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539138585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38176,"user_name":"小谢同学","can_delete":false,"product_type":"c1","uid":1032544,"ip_address":"","ucode":"E809E6BC470631","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/60/fc3689d0.jpg","comment_is_top":false,"comment_ctime":1541983562,"is_pvip":false,"replies":[{"id":"13733","content":"不是。直接管pod","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1542000534,"ip_address":"","comment_id":38176,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31606754634","product_id":100015201,"comment_content":"Stateful set 管理的replica 不是通过RS实现的么？","like_count":7,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428631,"discussion_content":"不是。直接管pod","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542000534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31215,"user_name":"donson","can_delete":false,"product_type":"c1","uid":1019482,"ip_address":"","ucode":"186A4BA2AD81DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/5a/2ed0cdec.jpg","comment_is_top":false,"comment_ctime":1539132691,"is_pvip":false,"replies":[{"id":"11255","content":"调度器只是原因之一。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539139029,"ip_address":"","comment_id":31215,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31603903763","product_id":100015201,"comment_content":"“需要注意的是，在 Kubernetes v1.11 之前，由于调度器尚不完善，DaemonSet 是由 DaemonSet Controller 自行调度的，即它会直接设置 Pod 的 spec.nodename 字段，这样就可以跳过调度器了。”，后来随着调度器的完善，调度器就把DaemonSet的调度逻辑收回，由调度器统一调度。划清边界，领域内聚","like_count":7,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426258,"discussion_content":"调度器只是原因之一。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539139029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240321,"user_name":"陈水金","can_delete":false,"product_type":"c1","uid":1085908,"ip_address":"","ucode":"2CF1FDE6E5EE4D","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/d4/f530914a.jpg","comment_is_top":false,"comment_ctime":1596859259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23071695739","product_id":100015201,"comment_content":"老师您好，有两个问题请教您:1.既然有ControllerVersion这样通用的版本管理对象，为什么Deployment还需要通过ReplicaSet来进行版本控制呢？2.Deployment的ownerReference又是谁呢？期待老师的解惑","like_count":5},{"had_liked":false,"id":35878,"user_name":"初学者","can_delete":false,"product_type":"c1","uid":1042833,"ip_address":"","ucode":"9471A905D07CE1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e9/91/4219d305.jpg","comment_is_top":false,"comment_ctime":1540828270,"is_pvip":true,"replies":[{"id":"12794","content":"所以你就得在daemonset controller里写调度了","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1540875318,"ip_address":"","comment_id":35878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23015664750","product_id":100015201,"comment_content":"还是没有明白damonset的实现与&quot;污点&quot;的关系，理论上为了实现每个node上有且只有pod, daemonset controller 和nodeaffinity就可以了，为啥需要&quot;污点&quot;机制？","like_count":5,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427698,"discussion_content":"所以你就得在daemonset controller里写调度了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540875318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157353,"user_name":"Tao","can_delete":false,"product_type":"c1","uid":1466809,"ip_address":"","ucode":"75FBDF49C601F4","user_header":"https://static001.geekbang.org/account/avatar/00/16/61/b9/dbf629c0.jpg","comment_is_top":false,"comment_ctime":1575119165,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14460021053","product_id":100015201,"comment_content":"DaemonSet如何保证每个node上只运行一个pod。<br>\t我理解Nodeaffinity保证了daemonSet指定运行在哪些node上，Toleration保证了指定的Node上都可以运行pod；<br>\t但是没有看到那个地方限制了DaemonSet保证在node上只允许一个pod。","like_count":3,"discussions":[{"author":{"id":1227336,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ba/48/c892a35b.jpg","nickname":"csoulsi","note":"","ucode":"96C9BBE9097FB3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81843,"discussion_content":"作者说了，当控制器里的数量和 pod etcd中数量不同，比如多余一个时，会调用api 进行删除。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576288422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31352,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1539156214,"is_pvip":false,"replies":[{"id":"11284","content":"目前没有自动化的手段，需要你删除错误pod，rollout正确的版本。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539173488,"ip_address":"","comment_id":31352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14424058102","product_id":100015201,"comment_content":"sts 在update的过程中如果失败，并且没有办法restore，比如pulling image fail。这种情况应该怎么恢复？<br><br>我尝试再patch一个正确的image 路径，但是没有反应。 然后我delete掉了出错的pod。正常的做法应该是什么？roll out 到上一个&#47;下一个正确版本？","like_count":3,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426301,"discussion_content":"目前没有自动化的手段，需要你删除错误pod，rollout正确的版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539173488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31285,"user_name":"放开那坨便便","can_delete":false,"product_type":"c1","uid":1227208,"ip_address":"","ucode":"A5767662EBC9F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/b9/c8/be96e383.jpg","comment_is_top":false,"comment_ctime":1539142835,"is_pvip":false,"replies":[{"id":"11267","content":"这里写的不准确了。不是自动回滚，而是不断使用当前版本重新创建。对于已经更新过的，当前版本就是新版本。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539152590,"ip_address":"","comment_id":31285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14424044723","product_id":100015201,"comment_content":"“这样，mysql 这个 StatefulSet 就会严格按照 Pod 的序号，逐一更新 MySQL 容器的镜像。而如果更新有错误，它会自动回滚到原先的版本。”<br><br>我测试的时候没有自动回滚，请问自动回滚是如何实现的？需要修改什么配置么？","like_count":3,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426276,"discussion_content":"这里写的不准确了。不是自动回滚，而是不断使用当前版本重新创建。对于已经更新过的，当前版本就是新版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539152590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315363,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1633860125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10223794717","product_id":100015201,"comment_content":"第二十一课:容器化守护进程的意义:DaemonSet<br>DaemonSet的主要作用是让你在Kubernete集群里，运行有且只有一个DaemonSet Pod，并且会随着新的Node添加或老的Node删除而添加&#47;删除Node上的Pod。它的应用场景有网络插件、存储插件和监控以及日志收集。它很多时候比Kubernetes集群出现的时机都要早。<br><br>这种添加删除的过程是，首先从Etcd里获取所有的Node列表，然后遍历所有的Node，看看它是否有运行着带有某种label的Pod。如果没有，就创建一个；如果多了就删除多余的。在创建的时候，通过nodeSelector或者nodeAffiinity字段，还有tolerations字段来和需要运行的Node进行一对一绑定。其中tolerations字段使得DaemonSet能够比其他控制器更早出现在Kubernetes集群启动时候。对了，这个也顺带解决了我一个疑惑，就是我现在K8s环境里的Grafana为啥没有监控到master服务器，因为少了以下这个字段<br><br>tolerations:<br>- key: node-role.kubernetes.io&#47;master<br>  effect: NoSchedule<br><br>K8s中还有一个专门的API用于版本控制，它是ControllerRevision，它在自己的Data字段里保存了对应版本DaemonSet的API对象，还有在Annotation里保存了kubectl的命令","like_count":2},{"had_liked":false,"id":304862,"user_name":"大上海","can_delete":false,"product_type":"c1","uid":1092861,"ip_address":"","ucode":"3969C018D6C0DC","user_header":"https://static001.geekbang.org/account/avatar/00/10/ac/fd/f70a6e3e.jpg","comment_is_top":false,"comment_ctime":1627645032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10217579624","product_id":100015201,"comment_content":"GFW问题拉不下来，可以自己先拉下来，再创建<br><br>docker pull mirrorgooglecontainers&#47;fluentd-elasticsearch:v2.4.0<br><br>docker tag docker.io&#47;mirrorgooglecontainers&#47;fluentd-elasticsearch:v2.4.0 k8s.gcr.io&#47;fluentd-elasticsearch:v2.4.0","like_count":2},{"had_liked":false,"id":238944,"user_name":"罗罗","can_delete":false,"product_type":"c1","uid":1052878,"ip_address":"","ucode":"410E21E5BAFD31","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QKbgfE8mY91fjkLuyDKHUGlpfxKyhiaib5v3ic3YT6qrLibFWxoiaKCxzLeuJROiaWquCb0cNI0lCjiaDY92hSAKHsHUg/132","comment_is_top":false,"comment_ctime":1596377248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891344544","product_id":100015201,"comment_content":"在这里，你应该注意到 nodeAffinity 的定义，可以支持更加丰富的语法，比如 operator: In（即：部分匹配；如果你定义 operator: Equal，就是完全匹配）  ","like_count":1},{"had_liked":false,"id":71775,"user_name":"无名氏","can_delete":false,"product_type":"c1","uid":1001023,"ip_address":"","ucode":"D1F322E386430E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/3f/7825378a.jpg","comment_is_top":false,"comment_ctime":1551430092,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5846397388","product_id":100015201,"comment_content":"假设有这么一种场景，业务Pod需要在每个Node上有且只有1个，在灰度升级时，按10%，30%，50%，100%批量升级，后续某个版本再次升级时，这种升级策略可能会变更，比如10%，70%，100%，请问怎么处理，谢谢。","like_count":1,"discussions":[{"author":{"id":1971269,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oltLEqTrmHm2aJP99BK6tHu5h7hp4aj08wR5Wt6H31iadFduDAVvjYKmhQ2nvGbLV3lkVdiat2GRasgWXoJeTibUg/132","nickname":"杨","note":"","ucode":"7EFEFE285975C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404232,"discussion_content":"文章上写的灰度升级需要用到statefulset中的partition字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634263524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31241,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1539135208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834102504","product_id":100015201,"comment_content":"DJH 问的问题很好，有时候我也有过这样的疑问，稍纵即逝，没有记录下来。我试着回答一下。<br><br>1. 如果在一个容器里，命令总有先后顺序。那么你load数据的sql在server启动前如何执行。<br>2. 应该不会kill吧，不知道有没有参数控制。这样是不是要有一个downtime去做升级？因为可能出现版本不一致中间状态<br>3 应该把partation参数去掉吧，否则以后增加节点会不会出现意想不到的问题？<br>4应该是一个版本一个对象，每个版本对象版本号不一样<br>5 不了解，但是设计应该是一致的。可能有","like_count":1},{"had_liked":false,"id":360841,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"北京","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1666916765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666916765","product_id":100015201,"comment_content":"集团军群","like_count":0},{"had_liked":false,"id":337155,"user_name":"超级芒果冰","can_delete":false,"product_type":"c1","uid":1188976,"ip_address":"","ucode":"97480FBFA4F699","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/70/4e7751f3.jpg","comment_is_top":false,"comment_ctime":1646651778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646651778","product_id":100015201,"comment_content":"老师，“这个 Pod，将来只允许运行在“metadata.name”是“node-geektime”的节点上”  这是原文。想问下，怎么给给点的metadata.name属性标记上node-geektime，什么时候可以标记？","like_count":0},{"had_liked":false,"id":282473,"user_name":"nullptr","can_delete":false,"product_type":"c1","uid":1283847,"ip_address":"","ucode":"D309EABB70F0BF","user_header":"https://static001.geekbang.org/account/avatar/00/13/97/07/7406fe30.jpg","comment_is_top":false,"comment_ctime":1615270227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615270227","product_id":100015201,"comment_content":"老师，agent可以搞成DaemonSet，那怎么保证他比应用pod先启动呢？","like_count":0},{"had_liked":false,"id":280234,"user_name":"丁乐洪","can_delete":false,"product_type":"c1","uid":1264392,"ip_address":"","ucode":"549CE57AB20B49","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/08/52954cd7.jpg","comment_is_top":false,"comment_ctime":1614138612,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1614138612","product_id":100015201,"comment_content":"有没有playground？","like_count":0,"discussions":[{"author":{"id":1740409,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8e/79/f9d5dd3a.jpg","nickname":"吕超","note":"","ucode":"B36883984BE16B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352964,"discussion_content":"https://labs.play-with-k8s.com/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614928768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280093,"user_name":"董永刚","can_delete":false,"product_type":"c1","uid":1169147,"ip_address":"","ucode":"ADA792B226A6CD","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/fb/837af7bf.jpg","comment_is_top":false,"comment_ctime":1614078619,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1614078619","product_id":100015201,"comment_content":"为什么看的时候很明白，但是实际操作的时候就各种问题，桑心","like_count":0,"discussions":[{"author":{"id":1030861,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrqLEic7DVicYY1s9ldH0vGBialDoplVGpicZUJ0Fdaklw27Frv8Ac67eicb5LibhL74SUxAzlick2nfltA/132","nickname":"jiangb","note":"","ucode":"A09415749CA88D","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563518,"discussion_content":"一样，多看几遍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650014714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248274,"user_name":"ch_ort","can_delete":false,"product_type":"c1","uid":1580926,"ip_address":"","ucode":"B79746E687F29E","user_header":"","comment_is_top":false,"comment_ctime":1600087366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600087366","product_id":100015201,"comment_content":"replicaset是不是也用controllerversion来管理版本的呢？ ","like_count":0},{"had_liked":false,"id":248273,"user_name":"ch_ort","can_delete":false,"product_type":"c1","uid":1580926,"ip_address":"","ucode":"B79746E687F29E","user_header":"","comment_is_top":false,"comment_ctime":1600087348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600087348","product_id":100015201,"comment_content":"DaemonSet在每个Node上启一个Pod实例，随着Node的增删来起停对应的Pod。<br><br>Deployment、StatefuleSet、DaemonSet三者的对比：<br><br>  类别  \tDeployment\tStatefulSet       \tDaemonSet         <br>  数量  \tReplicas  \tReplicas          \tNode数量            <br>  版本  \tReplicates\tControllerVevision\tControllerVevision<br><br>在 Kubernetes 项目里，ControllerRevision 是一个通用的版本管理对象。这样，Kubernetes 项目就巧妙地避免了每种控制器都要维护一套冗余的代码和逻辑的问题。<br>","like_count":0},{"had_liked":false,"id":238945,"user_name":"罗罗","can_delete":false,"product_type":"c1","uid":1052878,"ip_address":"","ucode":"410E21E5BAFD31","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QKbgfE8mY91fjkLuyDKHUGlpfxKyhiaib5v3ic3YT6qrLibFWxoiaKCxzLeuJROiaWquCb0cNI0lCjiaDY92hSAKHsHUg/132","comment_is_top":false,"comment_ctime":1596377376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596377376","product_id":100015201,"comment_content":"在这里，你应该注意到 nodeAffinity 的定义，可以支持更加丰富的语法，比如 operator: In（即：部分匹配；如果你定义 operator: Equal，就是完全匹配）<br><br>文中这句话的operator定义，我在官网上只说有In，NotIn，Exists，DoesNotExist，Gt，Lt等，是不是写错了？https:&#47;&#47;kubernetes.io&#47;docs&#47;concepts&#47;scheduling-eviction&#47;assign-pod-node&#47;","like_count":0},{"had_liked":false,"id":237068,"user_name":"艺超(鲁鸣)","can_delete":false,"product_type":"c1","uid":1029436,"ip_address":"","ucode":"7F749FA543E0F1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b5/3c/967d7291.jpg","comment_is_top":false,"comment_ctime":1595665426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595665426","product_id":100015201,"comment_content":"老师好，请教一下<br>是说每个node上，可以有多个DaemonSet Pod，但是只是保证每种只有一个是这个意思吗，比如会有日志收集的DaemonSet pod，也会有network-agent的DaemonSet pod？<br>还是另外一个意思呢，实际上每个Node上只能有一个DaemonSet pod，里面会包含多个容器， 日志收集+xxx agent？","like_count":0},{"had_liked":false,"id":135283,"user_name":"憶海拾貝","can_delete":false,"product_type":"c1","uid":1054727,"ip_address":"","ucode":"99E883A8601DED","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/07/9f5f5dd3.jpg","comment_is_top":false,"comment_ctime":1569117932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569117932","product_id":100015201,"comment_content":"&gt; 到目前为止，DS只有一种策略就是先删除再创建 OnDelete.<br>我查k8s的ds源码以及k8s的ds文档,都有提到RollingUpdate.<br>所以特别好奇张sir评论中的这条回复, ds不使用RollingUpdate策略更新, 是因为RollingUpdate坑比较多,所以实践中推荐使用OnDelete?","like_count":0},{"had_liked":false,"id":131583,"user_name":"紫夜","can_delete":false,"product_type":"c1","uid":1205423,"ip_address":"","ucode":"88CFF4C188B65A","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/af/6dbbb482.jpg","comment_is_top":false,"comment_ctime":1567818249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567818249","product_id":100015201,"comment_content":"张老师，我想请教个问题，daemonset使用滚动更新策略，如果update时只是变更了nodeaffinity，template中其他字段保持不变，控制器是如何处理的？比如我在nodeaffinity中新增了一个node,是只在新增的node上部署一个pod，其它pod保持不变，还是所有节点上的pod都会更新？","like_count":0},{"had_liked":false,"id":126475,"user_name":"寻","can_delete":false,"product_type":"c1","uid":1167430,"ip_address":"","ucode":"473B2CC14158A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/46/7f9af8de.jpg","comment_is_top":false,"comment_ctime":1566392124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566392124","product_id":100015201,"comment_content":"张老师，您好 Daemonset既然出现的时机比kubernetes集群设置都要早，那为什么还能调用apiserver组件？","like_count":0},{"had_liked":false,"id":122095,"user_name":"冷风","can_delete":false,"product_type":"c1","uid":1206550,"ip_address":"","ucode":"7C53078CDE16D1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJaeQkzjMYtz2O4Ala7bhzQdicaryDkH9314IhlY9icx9bZ2uSEw4thSzTSXkPaWm8m1tlB33XegqsQ/132","comment_is_top":false,"comment_ctime":1565286803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565286803","product_id":100015201,"comment_content":"老师请教一个问题，是否可以对daemonset启动的每个pod设置不同的hostname? 感谢回答！","like_count":0},{"had_liked":false,"id":93534,"user_name":"beenchaos","can_delete":false,"product_type":"c1","uid":1007348,"ip_address":"","ucode":"1BAA2F4F216899","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/f4/776ad2df.jpg","comment_is_top":false,"comment_ctime":1557489750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557489750","product_id":100015201,"comment_content":"请问老师，在一个集群上部署一类daemonset类型的服务，能否进行灰度发布呢？","like_count":0},{"had_liked":false,"id":78306,"user_name":"ichiro","can_delete":false,"product_type":"c1","uid":1086179,"ip_address":"","ucode":"D1708D87538F42","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/e3/1be13204.jpg","comment_is_top":false,"comment_ctime":1553129194,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1553129194","product_id":100015201,"comment_content":"老师，为什么deployment set，不用controllerrevison来作为版本管理么？","like_count":0,"discussions":[{"author":{"id":1147642,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/fa/42a2eb88.jpg","nickname":"像个孩子","note":"","ucode":"117B0336011F8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320555,"discussion_content":"deployment set管理的是replicationSet，replicationSet做版本管理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604397018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76731,"user_name":"bluefantasy1","can_delete":false,"product_type":"c1","uid":1106810,"ip_address":"","ucode":"83440E87C4EED3","user_header":"","comment_is_top":false,"comment_ctime":1552697972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552697972","product_id":100015201,"comment_content":"请教老师一个问题：如果直接在一台物理机上部署各个pod，肯定不需要安装网络插件和存储插件了吧？","like_count":0},{"had_liked":false,"id":47121,"user_name":"abc","can_delete":false,"product_type":"c1","uid":1198332,"ip_address":"","ucode":"A4E989E85848D9","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/fc/f46062b6.jpg","comment_is_top":false,"comment_ctime":1544060317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544060317","product_id":100015201,"comment_content":"张老师，DS的滚动升级是先创建新的再删除旧的吗？还是说滚动升级有策略可以配置。该如何配置？","like_count":0},{"had_liked":false,"id":44635,"user_name":"Terry Hu","can_delete":false,"product_type":"c1","uid":1219820,"ip_address":"","ucode":"9487EEECC051B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/9c/ec/5da5c049.jpg","comment_is_top":false,"comment_ctime":1543467756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543467756","product_id":100015201,"comment_content":"发现一个好像是bug,我在set image 的时候，k8s.gcr.io&#47;fluentd-elasticsearch的v2.1.0版本即使我加了--record，在rollout history里面也显示v2.2.0，不知道是为啥。。","like_count":0},{"had_liked":false,"id":31845,"user_name":"abc","can_delete":false,"product_type":"c1","uid":1198332,"ip_address":"","ucode":"A4E989E85848D9","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/fc/f46062b6.jpg","comment_is_top":false,"comment_ctime":1539310496,"is_pvip":false,"replies":[{"id":"11497","content":"可以的","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539311759,"ip_address":"","comment_id":31845,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539310496","product_id":100015201,"comment_content":"老师，咨询个问题：既然DaemonSet也是可以定义selector的，那是不是可以理解为可以人为干预DaemonSet Pod调度到指定的节点上去？","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426536,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539311759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31361,"user_name":"starnop","can_delete":false,"product_type":"c1","uid":1124858,"ip_address":"","ucode":"2064FA9AC3F99F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIbKCwLRY5icgW3WtLn0JD7EDksicGFqLAsXTm89SjNhR0KIt3N5iaQEmeic4Ld50Yxsceicia5kBODibZPA/132","comment_is_top":false,"comment_ctime":1539160026,"is_pvip":false,"replies":[{"id":"11287","content":"目前只能这么干","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539173655,"ip_address":"","comment_id":31361,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539160026","product_id":100015201,"comment_content":"磊哥，请教一个问题， 使用kubeadm 部署kubernetes ，宿主机ip使用dhcp方式，无法固定，在重启后ip改变，这个问题目前看到的一种解法是修改配置文件，重新生成证书等操作，每次开机做这个操作有些繁琐，不知有没有什么别的解法？","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426308,"discussion_content":"目前只能这么干","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539173655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}