{"id":214244,"title":"27 | 牛刀小试（下）：实现一个自己的测试框架","content":"<p>你好，我是胡光，欢迎回来，今天呢，我们继续学习测试框架的相关内容。</p><p>上节课中，我们讲到了软件开发一般分为前中后三个部分，提到作为技术人员的我们，一般主要负责在软件开发中期的编码与测试阶段。还有，我还讲到我们一般会综合运用白盒测试与黑盒测试这两种方法来进行程序测试。</p><p>更主要的是，我们还介绍了 Google 的单元测试框架 gtest，并对测试框架代码进行了一番解读。其中提到代码中的 TEST 是一个宏，那它展开后被替换的内容是什么呢？还有， RUN_ALL_TESTS 函数是如何依次执行程序中所有的测试用例函数的？</p><p>今天呢，我们就一个一个地来解决这些问题，并最终实现一个咱们自己的测试框架。</p><h2>初步实现TEST 宏</h2><p>今天我们实现的所有代码呢，都会写在一个名字为 geek_test.h 的头文件中。当然我们也知道，将声明和定义写在一起，在大型工程中是会出现严重的编译错误，在实际的工程开发中，我们并不会这么做。</p><p>今天把声明和定义写在一起，只是为了课程内容的讲解需要，而你也完全没有必要担心，这不会影响你对主要内容的学习。</p><p>我们先回到上节课中的源代码：</p><pre><code>#include &lt;stdio.h&gt;\n#include &quot;geek_test.h&quot; // 替换掉原 gtest/gtest.h 头文件\n\n// 判断一个数字 x 是否是素数\nint is_prime(int x) {\n    for (int i = 2; i * i &lt; x; i++) {\n        if (x % i == 0) return 0;\n    }\n    return 1;\n}\n\n// 第一个测试用例\nTEST(test1, test_is_prime) {\n    EXPECT_EQ(is_prime(3), 1);\n    EXPECT_EQ(is_prime(5), 1);\n    EXPECT_EQ(is_prime(7), 1);\n}\n\n// 第二个测试用例\nTEST(test2, test_is_prime) {\n    EXPECT_EQ(is_prime(4), 0);\n    EXPECT_EQ(is_prime(0), 0);\n    EXPECT_EQ(is_prime(1), 0);\n}\n\nint main() {\n    return RUN_ALL_TESTS();\n}\n</code></pre><p>我们的目的，是在不改变这份源代码的前提下，通过在 geek_test.h 中添加一些源码，使得这份代码的运行效果，能够类似于 gtest 的运行效果。</p><!-- [[[read_end]]] --><p>想要完成这个目标，我们就要先来思考 TEST 宏这里的内容，请你仔细观察这段由 TEST 宏定义的测试用例的相关代码：</p><pre><code>TEST(test1, test_is_prime) {\n    EXPECT_EQ(is_prime(3), 1);\n    EXPECT_EQ(is_prime(5), 1);\n    EXPECT_EQ(is_prime(7), 1);\n}\n</code></pre><p>TEST(test1, test_is_prime) 这部分应该是在调用 TEST 宏，而这部分被预处理器展开以后的内容，只有和后面大括号里的代码组合在一起，才是一段合法的 C语言代码，也只有这样，这份代码才能通过编译。</p><p>既然如此，我们就不难想到，TEST 宏展开以后，它应该是一个函数定义的头部，后面大括号里的代码，就是这个展开以后的函数头部的函数体部分，这样一切就都说得通了。</p><p>在实现 TEST 宏之前，我们还需要想清楚一个问题：由于程序中可以定义多个 TEST 测试用例，如果每一个 TEST 宏展开都是一个函数头部的话，那这个展开的函数的名字是什么呢？如果每一个 TEST 宏展开的函数名字都一样，那程序一定无法通过编译，编译器会报与函数名重复相关的错误，所以， TEST 宏是如何确定展开函数的名字呢？</p><p>不知道你有没有注意到，TEST 宏需要传入两个参数，这两个参数在输出信息中与测试用例的名字有关。那我们就该想到，可以使用这两个参数拼接出一个函数名，只要 TEST 传入的这两个参数不一样，那扩展出来的函数名就不同。最后，我们就可以初步得到如下的 TEST 宏的一个实现：</p><pre><code>#define TEST(test_name, func_name) \\\nvoid test_name##_##func_name()\n</code></pre><p>如代码所示的 TEST 宏实现，我们将 TEST 宏的两个参数内容使用## 连接在一起，中间用一个额外的下划线连接，组成一个函数名字，这个函数的返回值类型是 void，无传入参数。</p><p>根据这个实现，预处理器会将源代码中两处 TEST 宏的内容，替换成如下代码所示内容：</p><pre><code>void test1_test_is_prime() {\n    EXPECT_EQ(is_prime(3), 1);\n    EXPECT_EQ(is_prime(5), 1);\n    EXPECT_EQ(is_prime(7), 1);\n}\n\nvoid test2_test_is_prime() {\n    EXPECT_EQ(is_prime(4), 0);\n    EXPECT_EQ(is_prime(0), 0);\n    EXPECT_EQ(is_prime(1), 0);\n}\n</code></pre><p>这样，也就把原来看似不合理的 TEST 宏，转换成了合法的 C 语言代码了。</p><h2><code>__attribute__</code>：让其它函数先于主函数执行</h2><p>在继续讲测试框架的设计之前，我们来补充一个知识点。</p><p>之前，我们所学习到的程序执行过程，既是从主函数开始，也是从主函数结束。也就是说，在常规的程序执行过程中，其它函数都是在主函数执行之后，才被直接或者间接调用执行。接下来，我就要给你讲一种能够让函数在主函数执行之前就执行的编程技巧。</p><p>首先，我们先来看如下代码：</p><pre><code>#include &lt;stdio.h&gt;\n\nvoid pre_output() {\n    printf(&quot;hello geek!\\n&quot;);\n    return ;\n}\n\nint main() {\n    printf(&quot;hello main!&quot;);\n    return 0;\n}\n</code></pre><p>代码运行以后，会输出一行字符串 “hello main!”。</p><p>接下来呢，我们对上述代码稍微修改，在 pre_output 函数前面加上<code>__attribute__</code>((constructor)) 。这样，pre_output 函数就会先于主函数执行，代码如下：</p><pre><code>#include &lt;stdio.h&gt;\n\n__attribute__((constructor))\nvoid pre_output() {\n    printf(&quot;hello geek!\\n&quot;);\n    return ;\n}\n\nint main() {\n    printf(&quot;hello main!\\n&quot;);\n    return 0;\n}\n</code></pre><p>如上代码执行以后，程序会输出两行内容，第1行是 pre_output 函数输出的内容 “hello geek!”，第2行才是主函数的执行输出内容 “hello main!”。</p><p>从输出内容可以看出，加了<code>__attribute__</code>((constructor)) 以后，pre_output 函数会先于 main 主函数执行，这种有趣的特性，在接下来的操作中我们还会用得上，你要理解并记住。</p><p>其实 <code>__attribute__</code> 的作用还很多，你可以上网搜搜，会让你的程序性质变得特别有意思。</p><h2>RUN_ALL_TESTS 函数设计</h2><p>好了，准备工作都做完了，接下来让我们来思考一下 RUN_ALL_TESTS 函数要完成的事情，以及完成这些事情所需要的条件。</p><p>从主函数中调用 RUN_ALL_TESTS 函数的方式来看，RUN_ALL_TESTS 函数应该是一个返回值为整型的函数。这样，我们可以得到这样的函数声明形式：</p><pre><code>int RUN_ALL_TESTS();\n</code></pre><p>从测试框架的执行输出结果中看，RUN_ALL_TESTS 函数可以依次性地执行每一个 TEST 宏扩展出来的测试用例函数，这是怎么做到的呢？</p><p>我们可以这样认为：在主函数执行 RUN_ALL_TESTS 函数之前，有一些函数过程，就已经把测试用例函数的相关信息，记录在了一个 RUN_ALL_TESTS 函数可以访问到的地方，等到 RUN_ALL_TESTS 函数执行的时候，就可以根据这些记录的信息，依次性地执行这些测试用例函数。整个过程，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/46/f6f8dae2ee9c7d9b21b0c581e64b6346.jpg?wh=2875*1534\" alt=\"\" title=\"图1： RUN_ALL_TESTS 执行流程\"><br>\n图中红色部分，就是我们推测的，某些完成测试用例函数信息注册的函数，它们先于主函数执行，将测试用例的信息，写入到一个公共存储区中。</p><p>接下来，我们需要考虑的就是这些注册函数，究竟将什么信息存储到了公共存储区中，才能使得 RUN_ALL_TESTS 函数可以调用到这些测试用例？你自己也可以想想是什么。答案就是这个信息是测试用例函数的函数地址，因为只有把函数地址存储到这个存储区中，才能保证RUN_ALL_TESTS 函数可以调用它们。所以，这片公共存储区，就应该是一个函数指针数组。</p><p>那如何解决注册函数问题呢？最简单直接的设计方法，就是每多一个由 TEST 宏定义的测试用例，就配套一个注册函数，所以这个注册函数的逻辑，可以设计在 TEST 宏展开的内容中。这就需要我们对 TEST 宏进行重新设计，这里我一会儿再给你进行说明。</p><p>我们先来完成 RUN_ALL_TESTS 函数从存储区中，读取并执行测试用例的过程：</p><pre><code>typedef void (*test_function_t)();\n\ntest_function_t test_function_arr[100];\nint test_function_cnt = 0;\n\nint RUN_ALL_TESTS() {\n    for (int i = 0; i &lt; test_function_cnt; i++) {\n        printf(&quot;RUN TEST : %d\\n&quot;, i + 1);\n        test_function_arr[i]();\n        printf(&quot;RUN TEST DONE\\n\\n&quot;);\n    }\n    return 0;\n}\n</code></pre><p>代码中用到了函数指针相关的技巧，其中 test_function_t 是我们定义的函数指针类型，这种函数指针类型的变量，可以用来指向返回值是 void，传入参数为空的函数。</p><p>之后，定义了一个有100 位的函数指针数组 test_function_arr，数组中的每个位置，都可以存储一个函数地址，数组中元素数量，记录在整型变量 test_function_cnt 中。这样，RUN_ALL_TESTS 函数中的逻辑就很简单了，就是依次遍历函数指针数组中的每个函数，然后依次执行这些函数，这些函数每一个都是一个测试用例。</p><h2>重新设计：TEST 宏</h2><p>根据前面的分析，TEST 扩展出来的内容，不仅要有测试用例的函数头部，还需要有先于主函数执行的注册函数，主要用于注册 TEST 扩展出来的测试用例函数。由此，我们可以得出如下示例代码：</p><pre><code>#define TEST(test_name, func_name) \\\nvoid test_name##_##func_name(); \\\n__attribute__((constructor)) \\\nvoid register_##test_name##_##func_name() { \\\n    test_function_arr[test_function_cnt] = test_name##_##func_name; \\\n    test_function_cnt++; \\\n} \\\nvoid test_name##_##func_name()\n</code></pre><p>这个新设计的 TEST 宏，除了末尾保留了原 TEST 宏内容以外，在扩展的测试用例函数头部添加了一段扩展内容，这段新添加的扩展内容，会扩展出来一个函数声明，以及一个以 register 开头的会在主函数执行之前执行的注册函数；注册函数内部的逻辑很简单，就是将测试函数的函数地址，存储在函数指针数组 test_function_arr 中，这部分区域中的数据，后续会被 RUN_ALL_TESTS 函数使用。</p><p>如果以如上 TEST 宏作为实现，原程序中的两个测试用例代码，会被展开成如下样子：</p><pre><code>void test1_test_is_prime();\n\n__attribute__((constructor))\nvoid register_test1_test_is_prime() {\n    test_function_arr[test_function_cnt] = test1_test_is_prime; \n    test_function_cnt++;\n}\n\nvoid test1_test_is_prime() {\n    EXPECT_EQ(is_prime(3), 1);\n    EXPECT_EQ(is_prime(5), 1);\n    EXPECT_EQ(is_prime(7), 1);\n}\n\nvoid test2_test_is_prime();\n\n__attribute__((constructor))\nvoid register_test2_test_is_prime() { \n    test_function_arr[test_function_cnt] = test2_test_is_prime; \n    test_function_cnt++;\n}\n\nvoid test2_test_is_prime() {\n    EXPECT_EQ(is_prime(4), 0);\n    EXPECT_EQ(is_prime(0), 0);\n    EXPECT_EQ(is_prime(1), 0);\n}\n</code></pre><p>这个展开内容，是我给你做完代码格式整理以后的样子，实际展开结果会比这个格式乱一点儿，不过代码逻辑都一样。从展开内容中你可以看到，在展开代码的第 4 行和第 18 行分别就是两个测试用例函数的注册函数。</p><p>至此，我们就算是初步完成了测试框架中关键的两个部分的设计：一个是 TEST 宏，另外一个就是 RUN_ALL_TESTS 函数。它们同时也是串起测试框架流程最重要的两部分。</p><p>关于 EXPECT_EQ 是如何实现的，我就留作思考题吧，也希望你认真想一想，把你的答案写在留言区中，我们一起讨论。这个实现答案肯定不唯一，你只需要尽量做到最好即可。</p><h2>课程小结</h2><p>最后，我来给你做一下今天的课程小结：</p><p>1.<code>__attribute__</code>((constructor)) 可以修饰函数，使修饰的函数先于主函数执行。<br>\n2.  RUN_ALL_TESTS 之所以可以获得程序中所有测试用例的函数信息，是因为有一批注册函数，将测试用例函数记录下来了。<br>\n3.  通过测试框架这个项目，我们再一次看到，宏可以将原本看似不合理的代码，变得合理。</p><p>通过这两次课程，我希望你意识到，我们不是在阅读已有的测试框架的源码，而是在根据已有的测试框架，脑补其内部实现过程。</p><p>其实，脑补这个能力，往往是项目开发中的重要能力之一。例如，根据产品需要的外在功能描述，脑补后续的开发细节；根据竞品可见的功能表现，脑补其背后的技术细节。能够脑补一个产品的实现细节，可以让我们逐渐掌握，认清相关技术边界的能力，这个能力可以让我们不盲目崇拜某个公司，也不会随意轻视某个产品。</p><p>好了，今天就到这里了。下期我将带你继续完善测试框架的相关功能，我是胡光，我们下期见。</p>","comments":[{"had_liked":false,"id":194017,"user_name":"🤪HappyJoo","can_delete":false,"product_type":"c1","uid":1234591,"ip_address":"","ucode":"96E1858F06BABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","comment_is_top":false,"comment_ctime":1585015220,"is_pvip":false,"replies":[{"id":"73959","content":"哈哈哈哈，完全理解你现在的处境。可这些时间不是没有必要的，是有必要的。如果我给出零碎的代码片段，你没办法完成组装，那肯定是有问题的。当然，直接给出代码参考是最直接的，可那样，你不还是不能发现自己的问题么。所以，要是实在找不到错误了，可以把你的问题发上来，我再帮你找。","user_name":"作者回复","comment_id":194017,"uid":"1374625","ip_address":"","utype":1,"ctime":1585034347,"user_name_real":"胡炜燚"}],"discussion_count":3,"race_medal":0,"score":"10174949812","product_id":100043901,"comment_content":"老师，自己乱写真的好多奇奇怪怪的问题呀，能不能给个每章节的源代码参考一下呢？我根据章节内容拼凑起来的代码，太多问题了，都不知道该从哪里开始问起了(ಥ_ಥ) ，总不能次次都把我的源码丢出来问你哈哈哈哈。有些问题真的搜了两三个小时才可能侥幸找到解决方法，如果老师能给分参考，可能可以减少一些不必要的时间呢~","like_count":2,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488730,"discussion_content":"哈哈哈哈，完全理解你现在的处境。可这些时间不是没有必要的，是有必要的。如果我给出零碎的代码片段，你没办法完成组装，那肯定是有问题的。当然，直接给出代码参考是最直接的，可那样，你不还是不能发现自己的问题么。所以，要是实在找不到错误了，可以把你的问题发上来，我再帮你找。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585034347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255066,"discussion_content":"看了一下你的代码，第一你的源文件中没有引用你自己测试框架的头文件，导致报了一堆 googletest 中链接符号未定义的错误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588358559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214682,"discussion_content":"我不听我不听，我就是想要参考代码（手动狗头）。参考：\nhttps://github.com/HappyJoo/CLearningScript/tree/master/MyTestFramework","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585225818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257670,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1604051746,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1604051746","product_id":100043901,"comment_content":"茶艺师学编程<br><br>思考题<br><br>关于EXPECT_EQ，我想至少<br>1、运行带入自变量的is_prime，得出对应的因变量；<br>2、得出的因变量与输入的值比较是否相等。如果相等，输出“ok”，不相等，输出“FAILED”、“函数名+结果”、“输入的数值”<br><br>以下是我的脑补：<br>EXPECT_EQ（func, val1,  val2）{<br>       int val3 = 0;<br>      val3 = func(val1);<br>      if(val3 == val2)printf(“OK”)；<br>      else printf（“FAILED\\nfunc(val1) = %d”, val3）;<br>}<br><br>如果写成宏的话<br>#define EXPECT_EQ（func（val），val2 ）\\<br>void EXPECT_EQ（func， val， val2）{ \\<br>       int val3;\\<br>       val3 = func(val);\\<br>       if(val3 == val2)printf(“OK”)；\\<br>      else printf（“FAILED\\nfunc(val1) = %d”, val3）;\\<br>}\\<br>      <br><br>","like_count":0},{"had_liked":false,"id":255510,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1603360805,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1603360805","product_id":100043901,"comment_content":"茶艺师学编程<br><br>来到这里，老师双手一张：<br><br>&quot;诸位，我们一起放弃做人吧，哈哈哈哈哈哈&quot;<br><br>一堆没见过的代码如暴雨般倾泻而来，瞬间淹没众人。<br><br>雷声，雨声、风声，如同老师的大笑。","like_count":0},{"had_liked":false,"id":193384,"user_name":"刘桢","can_delete":false,"product_type":"c1","uid":1482815,"ip_address":"","ucode":"3BFAB1C9772EB4","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/3f/06b690ba.jpg","comment_is_top":false,"comment_ctime":1584891442,"is_pvip":false,"replies":[{"id":"74496","content":"划水~~~","user_name":"作者回复","comment_id":193384,"uid":"1374625","ip_address":"","utype":1,"ctime":1585325835,"user_name_real":"胡炜燚"}],"discussion_count":1,"race_medal":0,"score":"1584891442","product_id":100043901,"comment_content":"打卡打卡","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488552,"discussion_content":"划水~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585325835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}