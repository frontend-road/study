{"id":628728,"title":"02｜自动化测试：从0开始为一个特性覆盖自动化测试","content":"<p>你好，我是黄俊彬。今天我们一起来学习自动化测试的知识，我将通过一个示例给你系统介绍各种自动化测试的应用场景、需要使用的框架以及具体的用例设计和编写。</p><p>我相信此时你会有一些疑问：我为什么要学自动化测试，它能给我带来什么帮助呢？在过去很多的咨询项目中，我发现自动化测试是一个很容易产生“争议”的话题，我也经常会被问到一些很有意思的问题。</p><ul>\n<li>自动化测试不是应该由测试同学来编写吗，我作为开发没有必要学吧？</li>\n<li>之前一个自动化测试都没写过，怎么开始落地呢？</li>\n<li>编写自动化测试代码意味着要写更多的代码，这能带来什么好处呢？</li>\n</ul><p>根据我过往的经验，对自动化测试存在类似疑问的人，其实往往是那些一个测试都没有写过的同学。所以接下来，我们就针对一个特性，从0开始一步一步覆盖自动化测试。在这个过程中，你将深入感受到自动化测试的“魅力”（课程的配套代码，你可以从<a href=\"https://github.com/junbin1011/AutoTest\">这里</a>获取）。</p><h2>示例介绍</h2><p>今天这个示例是一个登录的场景。<strong>当用户在登录页面输入正确的账户和密码时，能正常跳转到登录界面，否则提示登录失败的信息。</strong>下面是关键的代码。</p><ul>\n<li><strong>登录页面代码</strong></li>\n</ul><pre><code class=\"language-plain\">public class LoginActivity extends AppCompatActivity {\n    private LoginLogic loginLogic = new LoginLogic();\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n        final EditText usernameEditText = findViewById(R.id.username);\n        final EditText passwordEditText = findViewById(R.id.password);\n        final Button loginButton = findViewById(R.id.login);\n        loginButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                boolean success = loginLogic.login(LoginActivity.this,usernameEditText.getText().toString(),\n                        passwordEditText.getText().toString());\n                if (success) {\n                    //登录成功跳转主界面\n                    startActivity(new Intent(LoginActivity.this, MainActivity.class));\n                } else {\n                    //登录失败进行提示\n                    Toast.makeText(LoginActivity.this, \"login failed\", Toast.LENGTH_LONG).show();\n                }\n            }\n        });\n    }\n}\n</code></pre><!-- [[[read_end]]] --><ul>\n<li><strong>登录逻辑代码</strong></li>\n</ul><pre><code class=\"language-plain\">public class LoginLogic {\n    public boolean login(Context context,String username, String password) {\n        if (!isUserNameValid(username) || !isPasswordValid(password)) {\n            return false;\n        } else {\n            //通过服务器判断账户及密码的有效性\n            boolean result = checkFromServer(username, password);\n            if (result) {\n                //登录成功保持本地的信息\n                SharedPreferencesUtils.put(context, username, password);\n            }\n            return result;\n        }\n    }\n    // 为了进行演示，去除通过服务器鉴定的逻辑，当用户输入特定账号及密码为时则验证成功\n    private static boolean checkFromServer(String username, String password) {\n        if (username.equals(\"123@163.com\") &amp;&amp; password.equals(\"123456\")) {\n            return true;\n        }\n        return false;\n    }\n    private boolean isUserNameValid(String username) {\n        if (username == null) {\n            return false;\n        }\n        if (username.contains(\"@\")) {\n            return Patterns.EMAIL_ADDRESS.matcher(username).matches();\n        } else {\n            return !username.trim().isEmpty();\n        }\n    }\n    private boolean isPasswordValid(String password) {\n        return password != null &amp;&amp; password.trim().length() &gt; 5;\n    }\n}\n</code></pre><p>注意，这里为了简化演示，我将验证的逻辑写死在本地了。另外，账户密码有两个核心的验证规则。</p><ul>\n<li>账户不能为空，需要符合邮箱规则。</li>\n<li>密码不能为空，长度需要超过5个字符。</li>\n</ul><h2>搭建测试环境</h2><p>当我们通过默认的编辑器创建新的项目工程时，编辑器会自动创建好测试的运行配置，一般无需修改。如果要增加测试框架，就把测试框架的Maven坐标添加到对应的dependencies中即可。Gradle中的测试相关配置代码是后面这样。</p><pre><code class=\"language-plain\">android{\n  defaultConfig {\n    testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n}\ndependencies {\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\n}\n}\n</code></pre><p>接下来，我们在默认的/src/test或/src/androidTest目录下编写用例。<strong>注意，test目录的用例运行不依赖于设备，androidTest目录下的用例运行需要依赖设备。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/42/da/4262f51c833b6b65986a983f502b30da.jpg?wh=2989x2518\" alt=\"\"></p><p>一般来说，自动化测试分为小型、中型和大型三种，接下来我会带你从小型自动化测试开始，逐个看看这三种测试怎么落地。</p><h2>小型自动化测试实践</h2><p>小型测试是指单元测试，用于验证应用的行为，一次验证一个类。在这个示例中，LoginLogic主要承担的是登录逻辑，这里我就以账户密码的验证逻辑为例，给你演示一下小型测试的编写，这两个逻辑的主要规则是这样。</p><ul>\n<li>账户不能为空，需要符合邮箱规则。</li>\n<li>密码不能为空，长度需要超过5个字符。</li>\n</ul><p>接着，我们设计对应的测试用例。注意，用例的设计应该包含正常和异常的验证场景，具体的测试场景是后面这样。</p><ul>\n<li>输入大于6个字符长度的密码，验证成功。</li>\n<li>输入为Null的字符，验证失败。</li>\n<li>输入小于5个字符长度的密码，验证失败。</li>\n<li>输入等于5个字符长度的密码，验证失败。</li>\n</ul><p>下面我们新建一个LoginLogicTest的测试类，按照上述的测试场景编写用例。这里我会采用given（输入）、when（执行）、then（结果）的形式，让用例更加结构化，便于理解和维护。具体的测试用例代码如下。</p><pre><code class=\"language-plain\">public class LoginLogicTest {\n    @Test\n    public void should_return_false_when_password_is_null() {\n        LoginLogic loginLogic = new LoginLogic();\n        String password = null;\n        boolean result = loginLogic.isPasswordValid(password);\n        Assert.assertFalse(result);\n    }\n    @Test\n    public void should_return_false_when_password_length_is_less_than_5() {\n        LoginLogic loginLogic = new LoginLogic();\n        String password = \"1234\";\n        boolean result = loginLogic.isPasswordValid(password);\n        Assert.assertFalse(result);\n    }\n    @Test\n    public void should_return_false_when_password_length_is_equal_5() {\n        LoginLogic loginLogic = new LoginLogic();\n        String password = \"12345\";\n        boolean result = loginLogic.isPasswordValid(password);\n        Assert.assertFalse(result);\n    }\n    @Test\n    public void should_return_true_when_password_length_greater_than_5() {\n        LoginLogic loginLogic = new LoginLogic();\n        String password = \"123456\";\n        boolean result = loginLogic.isPasswordValid(password);\n        Assert.assertTrue(result);\n    }\n}\n</code></pre><p>通过点击用例旁的运行箭头可以执行用例，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/c8/7f7e270f722596962fc5be2a212604c8.jpg?wh=2847x1201\" alt=\"\"></p><p>运行完就可以直接查看运行结果了，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/a9/ae7a4a5a6f422d9bfa698e022ca50ea9.jpg?wh=2847x1156\" alt=\"\"></p><p>可以看出小型测试的执行时间还是比较快的，<strong>4个用例总共用了7 ms</strong>。</p><p>此外，我们还可以用另一种方式执行测试用例：使用命令行./gradlew test，运行test目录下的测试用例，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/a1/0e/a15767ca11fc5de1899b390fddyy650e.jpg?wh=2372x1463\" alt=\"\"></p><p>执行完测试后，我们在/build/reports/tests下可以查看到对应的测试报告，报告截图如下所示，从中我们能得到每个用例具体的执行情况和执行时间。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/12/543336bf7fee5325552ef862ed693012.jpg?wh=2847x1708\" alt=\"\"></p><h2>中型自动化测试实践</h2><p>接下来是中型测试，<strong>中型测试是指集成测试，用于验证模块内堆栈级别之间的互动或相关模块之间的互动。</strong>常用的测试框架有两种：Robolectric和Espresso。</p><p>在登录示例中，当LoginLogic的login方法被调用时，程序主逻辑首先会执行对账户名和密码的校验，接着通过服务器对账户密码的有效性做校验。当登录成功时，程序主逻辑会通过SharedPreferences保存用户的信息，并在最后返回登录的状态。</p><p>从示例代码中可以看出，LoginActivity类主要都是UI的操作，所以对该类主要覆盖的是UI相关的测试；对于LoginLogic的类核心方法，login主要负责整体的业务验证逻辑。下面我会依次介绍如何通过Espresso和Robolectric对这两个类进行中型自动化测试的覆盖。</p><h3>1.&nbsp;Espresso的使用</h3><p><a href=\"https://developer.android.com/training/testing/espresso\">Espresso</a> 是Google官方提供的界面测试框架，使用简洁且可靠。它可以声明预期、交互和断言，不用直接访问底层应用的 Activity 和视图，可以防止测试不稳定，提高测试运行的速度。</p><p>根据用户UI上的主要操作，我们将覆盖以下两个主要的业务场景。</p><ul>\n<li>用户输入正确的用户名（123@163.com）和密码（123456），点击登录按钮能成功跳转到登录界面。</li>\n<li>用户输入错误的用户名（123）和密码（456），点击登录按钮提示登录失败的Toast。</li>\n</ul><p>根据测试场景，我们使用Espresso对LoginActivity设计的测试用例代码如下。</p><pre><code class=\"language-plain\">&nbsp;public class LoginActivityTest {\n    @Test\n    public void should_start_main_activity_when_execute_login_given_valid_username_and_password() {\n        ActivityScenario.launch(LoginActivity.class);\n        onView(withId(R.id.username)).perform(typeText(\"123@163.com\"));\n        onView(withId(R.id.password)).perform(typeText(\"123456\"));\n        Intents.init();\n        onView(withId(R.id.login)).perform(click());\n        intended(allOf(\n                toPackage(\"com.jkb.junbin.autotestdemo\"),\n                hasComponent(hasClassName(MainActivity.class.getName()))));\n    }\n    @Test\n    public void should_show_failed_toast_when_execute_login_given_invalid_username_and_password() {\n        ActivityScenario&lt;LoginActivity&gt; launch = ActivityScenario.launch(LoginActivity.class);\n        onView(withId(R.id.username)).perform(typeText(\"123\"));\n        onView(withId(R.id.password)).perform(typeText(\"456\"));\n        onView(withId(R.id.login)).perform(click());\n        View decorView = null;\n        launch.onActivity(activity -&gt; {\n            activity.getWindow().getDecorView();\n        });\n        onView(withText(\"login failed\")).inRoot(withDecorView(not(decorView))).check(matches(isDisplayed()));\n    }\n}\n</code></pre><p>Espresso提供的API能方便地进行元素的定位、执行操作和断言。在上述两个用例中，我们用onView定位元素，用perform执行操作，用check进行断言。如果你想了解Espresso更多的操作API，可以参考<a href=\"https://developer.android.google.cn/training/testing/espresso?hl=zh_cn\">官网的介绍</a>。</p><p>执行完上述用例后，运行结果是下图这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/2b/5bdd080c31ff5bf8c98fa503fa423e2b.jpg?wh=2847x1477\" alt=\"\"></p><p>可以看到，这两个测试用例在模拟器中整体的运行时间在5s左右。相比小型测试，中型测试耗时会更长。并且用例运行需要依赖设备，这让运行测试的成本更高。用例的执行过程如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/5a/e5e4d31fc367b44c977263aeba738d5a.gif?wh=1080x2220\" alt=\"图片\"></p><h3>2.&nbsp;Robolectric的使用</h3><p><a href=\"http://robolectric.org/\">Robolectric</a> 框架能为Android带来快速可靠的测试。具体来说，依赖该框架的测试用例无须在真机或者模拟器上运行，在本地工作站上的 JVM 内完成运行即可，一般只需要几秒。</p><p>下面以LoginLogic的login方法为例，我给你介绍一下Robolectric的使用。这里我们需要覆盖下面三个主要的业务场景。</p><ul>\n<li>传入空的字符串或者密码，返回失败。</li>\n<li>传入错误的账户及密码，返回失败。</li>\n<li>传入正确的账户及密码，返回成功，并且进行数据缓存。</li>\n</ul><p>后面是测试用例的代码。</p><pre><code class=\"language-plain\">@RunWith(RobolectricTestRunner.class)\npublic class LoginLoginMediumTest {\n    private final Context mContext = InstrumentationRegistry.getInstrumentation().getContext();\n    @Test\n    public void should_return_false_when_given_invalid_username_or_password() {\n        LoginLogic loginLogic = new LoginLogic();\n        boolean nullUserNameResult = loginLogic.login(mContext, null, \"123\");\n        Assert.assertFalse(nullUserNameResult);\n        boolean nullPasswordResult = loginLogic.login(mContext, \"123\", null);\n        Assert.assertFalse(nullPasswordResult);\n    }\n    @Test\n    public void should_return_false_when_given_error_username_and_password() {\n        //验证错误的账户及密码\n        boolean result = new LoginLogic().login(mContext, \"123\", \"456\");\n        Assert.assertFalse(result);\n    }\n    @Test\n    public void should_return_true_when_given_correct_username_and_password() {\n        String username = \"123@163.com\";\n        String password = \"123456\";\n        //验证正确的账户及密码\n        boolean result = new LoginLogic().login(mContext, username, password);\n        Assert.assertTrue(result);\n        //验证存在缓存信息\n        String cachePassword = (String) SharedPreferencesUtils.get(mContext, username, \"\");\n        Assert.assertEquals(password, cachePassword);\n    }\n}\n</code></pre><p>关于Robolectric的API，你可以参考<a href=\"http://robolectric.org/\">官网的介绍</a>，这里你了解一下即可，我会在后续的解耦重构篇中进一步介绍Robolectric的更多用法。</p><p>执行上述测试用例后，运行结果如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/d0/2f4911cd5f9485582acbb81cdb376cd0.jpg?wh=2847x1508\" alt=\"\"></p><p>从结果可以看出，用Robolectric框架进行测试，用例的执行时间在毫秒到秒之间。其中第二个用例的执行耗时超过2s，是因为启动Robolectric框架需要一定的时间。同时我们也能体会到Robolectric的核心优势：无须依赖设备，可以快速在本地的JVM进行验证，得到快速的反馈。</p><h2>大型自动化测试实践</h2><p>最后我们来进行大型测试。<strong>大型测试是指端到端测试，用于验证跨越了应用的多个模块的用户操作流程。</strong>前面介绍的Espresso和Robolectric主要是针对单个页面的测试场景，在实际的应用业务场景中，还有涉及跨应用和系统UI交互的场景。</p><p>通常我们会用UI Automator完成大型测试。<a href=\"https://developer.android.com/training/testing/ui-automator?hl=zh_cn\">UI Automator</a> 是一个界面测试框架，适用于整个系统和多个已安装应用间的跨应用功能界面测试。它提供了一组 API，用于构建在用户应用和系统应用上执行交互的界面测试。</p><p>通过 UI Automator API，我们可以在测试设备中执行打开“设置”菜单或应用启动器等操作。相比Espresso和Robolectric编写的白盒测试用例，<strong>UI Automator 测试框架非常适合编写黑盒式自动化测试，此类测试的测试代码不依赖于目标应用的内部实现细节。</strong></p><p>下面我们继续对登录示例进行完整的功能测试。完整的用户测试场景是这样的：用户在手机的任意界面，返回桌面启动测试的应用登录界面，然后输入正确的用户名和密码，成功跳转到主界面，验证主界面上显示的用户信息是否正确。</p><p>这个用户场景会涉及到多个应用，其中包括了桌面和目标测试应用。另外，应用内还会涉及到多个页面，主要是登录界面和主界面。现在我们使用UI Automator框架进行测试，用例代码是这样。</p><pre><code class=\"language-plain\">@RunWith(AndroidJUnit4.class)\npublic class SmellTest {\n    private static final String BASIC_SAMPLE_PACKAGE\n            = \"com.example.sample\";\n    private static final int LAUNCH_TIMEOUT = 5000;\n    private UiDevice mDevice;\n    @Before\n    public void startActivityFromHomeScreen() {\n        // 初始化UiDevice\n        mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n        // 回到主界面\n        mDevice.pressHome();\n        // 等待launcher\n        final String launcherPackage = mDevice.getLauncherPackageName();\n        assertThat(launcherPackage, notNullValue());\n        mDevice.wait(Until.hasObject(By.pkg(launcherPackage).depth(0)),\n                LAUNCH_TIMEOUT);\n        // 启动目标APP\n        Context context = ApplicationProvider.getApplicationContext();\n        final Intent intent = context.getPackageManager()\n                .getLaunchIntentForPackage(BASIC_SAMPLE_PACKAGE);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        context.startActivity(intent);\n        // 等待应用启动\n        mDevice.wait(Until.hasObject(By.pkg(BASIC_SAMPLE_PACKAGE).depth(0)),\n                LAUNCH_TIMEOUT);\n    }\n    //账户密码登录成功后主界面显示用户名\n    @Test\n    public void should_show_username_in_main_activity_when_login_success() {\n        //输入账户名\n        mDevice.findObject(By.res(BASIC_SAMPLE_PACKAGE, \"username\"))\n                .setText(\"123\");\n        //输入密码\n        mDevice.findObject(By.res(BASIC_SAMPLE_PACKAGE, \"password\"))\n                .setText(\"123\");\n        //点击登录\n        mDevice.findObject(By.res(BASIC_SAMPLE_PACKAGE, \"login\"))\n                .click();\n        //验证主界面上显示用户名信息\n        UiObject2 text = mDevice\n                .wait(Until.findObject(By.res(BASIC_SAMPLE_PACKAGE, \"text\")),\n                        500);\n        assertEquals(text.getText(), \"123\");\n    }\n}\n</code></pre><p>UI Automator 测试框架提供了一个 UiDevice 类，用于在运行目标应用的设备上访问和执行操作。通过调用findObject方法，我们可以定位到元素和执行操作。关于 UI Automator更多的API使用，你可以参考<a href=\"https://developer.android.google.cn/training/testing/ui-automator\">官网文档</a> 。<br>\n执行上述测试用例后，运行结果如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/30/e9e699b8299a681f61f0deed28098f30.jpg?wh=2847x1106\" alt=\"\"></p><p>下面这个动图展示了用例的执行过程，你可以对比一下，这个过程如果用手工执行需要多久。</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/75/f09f45cf7ddf87cc50ccd25bf3f26675.gif?wh=1080x2220\" alt=\"图片\"></p><p>通过执行结果可知，该用例的执行时间实际为9s，比中小型测试的执行时间更长，并且需要依赖真机或模拟器。不过，该用例基本都是模拟用户对界面的点击操作，更贴近实际用户的真实使用场景。</p><h2>总结</h2><p>今天我带你对一个登录示例进行了小、中、大三种类型的自动化测试覆盖。小型测试能够快速帮我们验证代码中的核心逻辑和算法，我们通常使用的是Junit或者Robolectric等测试框架；中型测试能够帮我们验证代码中的一些核心组件交互流程，我们通常会用Espresso或者Robolectric等框架来完成；大型测试则能帮我们验证端到端的用户使用场景，我们通常使用的是UIAutomator或者Appium等框架。</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/20/fbb4d36d122917ab2301d70962c1aa20.jpg?wh=2847x1508\" alt=\"\"></p><p>现在让我们再重新思考一下这节课开头的三个问题。</p><p>第一个是测试由谁来写的问题。通过这节课的演示，我想你应该发现了，中小型的测试大部分都是根据代码设计来编写的。编写者需要了解原来代码的设计，精确到各个方法以及方法内部的条件分支和异常处理。所以，中小型测试应该由开发人员来编写。</p><p>另外，我也鼓励开发人员参与到大型端到端自动化测试的编写中。因为只有开发代码和测试代码一起共同维护，成本才是最低的。</p><p>第二个问题是：之前一个自动化测试都没写过，怎么开始落地？这节课我们通过一个特性介绍了如何从0去覆盖小、中、大型的自动化测试，相信你已经体会到，对于开发人员来说，编写自动化测试用例的难度其实比功能开发设计还简单。</p><p>第三个问题是关于自动化测试价值的问题。这里有一个前提：我不认为开发完代码就意味着结束，结束应该是在有足够的质量保证的前提下。所以，<strong>自动化测试是应用开发过程中不可或缺的一部分。通过持续运行测试，我们可以在发布版本之前验证其正确性、功能行为和易用性。</strong></p><p>具体来讲，自动化测试给开发同学带来的帮助有这样三点。</p><p>1.自动化测试能提供多样化的编译调试。通常测试的运行时间在毫秒至秒之间，有助于提高我们编译调试的效率。</p><p>2.自动化测试能加强开发代码自测，帮我们快速获得故障反馈。通常我们在本地编写完代码后，就可以马上运行测试，检查功能是否正确。这样的好处是能在开发早期尽早发现问题。</p><p>3.自动化测试还能提供更安全的代码重构，当有了自动化测试这个安全守护网，我们可以放心地优化代码，不必担心引发新的问题，也可以尽可能避免其他人乱改代码破坏原有的逻辑。因为一旦有修改破坏了之前的自动化测试用例，CI门禁就会立即检查出来，避免代码合入。</p><p>虽然自动化测试可以帮我们提升开发的效率和质量，但对于遗留系统来说，还有另外一个非常棘手的问题，那就是代码可测试性低。下节课我将为你揭晓如何提高遗留系统的代码可测试性。</p><h2>思考题</h2><p>感谢你学完了今天的内容，今天的思考题是这样的：在登录示例中，验证邮箱的逻辑并没有覆盖自动化测试，如果是你，你会怎么来设计这个测试用例呢？Show me your code。</p><p>欢迎你在留言区与我交流讨论，也欢迎你把它分享给你的同事或朋友，我们一起来高效、高质量交付软件！</p>","neighbors":{"left":{"article_title":"01｜初识重构：重构的类型、收益和度量","id":628675},"right":{"article_title":"03｜测试落地：三招提高遗留系统代码的可测试性","id":629322}},"comments":[{"had_liked":false,"id":368452,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1676354470,"is_pvip":false,"replies":[{"id":134199,"content":"peter，你好。非常开心收到你的留言，看了你总结的问题，就知道你非常认真地学习完成了前面几章的内容。下面我尝试来回答一下你提到的6个问题哈。 \nQ1：ButterKnife现在我用的也比较少了，是否考虑直接用Kotlin？\nQ2: 这边的版本管理主要是指二进制的版本管理。例如jar或者aar的版本，与分支不是一个概念。\nQ3：故事不是笔误，故事是敏捷开发中常用的术语，例如用户故事（需求）。\nQ4：是的。\nQ5：目前我看到基本都是用AS，我现在用的是Android Studio Electric Eel | 2022.1.1\nQ6: AutoTest是项目的名称，进入项目的根目录直接执行.&#47;gradlew test （mac系统），你也可以直接在gradle的窗口中双击test的task。","user_name":"作者回复","user_name_real":"作者","uid":1179206,"ctime":1676383959,"ip_address":"上海","comment_id":368452,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"今天刚看到这个课程，马上购买了，一口气读到了这里，每一课都有问题，集中在这里提问。\n老师的课很不错。\nQ1：高版本不支持ButterKnife吗？\n我用AS3.5创建了一个项目，API版本是32，引用了ButterKnife，结果报错，网上搜索后在build.gradle中指定了用Java8来编译，但还是报错，而且错误原因难以理解。后来把版本降低到28，就可以了。请问，28以上的高版本不支持ButterKnife了吗？（注：第一次加入的是：compileOptions {sourceCompatibility JavaVersion.VERSION_1_8  targetCompatibility JavaVersion.VERSION_1_8}）\nQ2：版本管理和分支管理有什么区别？\n“工程化”部分，有两个子项“版本管理”和“分支管理”，我印象中版本管理包括分支管理啊，现在分为两个部分，有什么区别？\nQ3：“故事”是笔误吗？\n第01课中多次用到“故事”，比如，“故事平均开发周期”等。感觉应该是“事故”？\nQ4：androidTest 目录下的用例运行需要依赖设备，真机或模拟器都可以吗？\nQ5：IDE应该是用AS吧。哪个版本？AS2021吗？\nQ6：在哪里执行命令行.&#47;gradlew test？\n我在AS3.5的“terminal”窗口中，当前项目路径下，输入“AutoTest .&#47;gradlew test”和“.&#47;gradlew test”，都不行，提示“&#39;AutoTest&#39; 不是内部或外部命令，”。","like_count":4,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604626,"discussion_content":"peter，你好。非常开心收到你的留言，看了你总结的问题，就知道你非常认真地学习完成了前面几章的内容。下面我尝试来回答一下你提到的6个问题哈。 \nQ1：ButterKnife现在我用的也比较少了，是否考虑直接用Kotlin？\nQ2: 这边的版本管理主要是指二进制的版本管理。例如jar或者aar的版本，与分支不是一个概念。\nQ3：故事不是笔误，故事是敏捷开发中常用的术语，例如用户故事（需求）。\nQ4：是的。\nQ5：目前我看到基本都是用AS，我现在用的是Android Studio Electric Eel | 2022.1.1\nQ6: AutoTest是项目的名称，进入项目的根目录直接执行./gradlew test （mac系统），你也可以直接在gradle的窗口中双击test的task。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676383959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370687,"user_name":"布魯斯～","can_delete":false,"product_type":"c1","uid":1336309,"ip_address":"澳大利亚","ucode":"B2E5D928EF5AA0","user_header":"https://static001.geekbang.org/account/avatar/00/14/63/f5/87e97f3e.jpg","comment_is_top":false,"comment_ctime":1679109267,"is_pvip":false,"replies":[{"id":135283,"content":"Hi，布魯斯。\n在实际项目中，首先对于账号来说得有对应的测试账号，另外大型的测试与文中介绍的方法还是一致的，只不过需要加入一些等待及超时的机制（网络请求需要时间）。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1679275339,"ip_address":"广东","comment_id":370687,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"感谢老师的讲解，想请问一下老师，在现实生活上，许多登入是透过OAuth 2.0 去实现的，想请问一下老师，针对这种场景，要如何撰写自动化的大型测试吗？","like_count":1,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609871,"discussion_content":"Hi，布魯斯。\n在实际项目中，首先对于账号来说得有对应的测试账号，另外大型的测试与文中介绍的方法还是一致的，只不过需要加入一些等待及超时的机制（网络请求需要时间）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679275339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377582,"user_name":"余一","can_delete":false,"product_type":"c1","uid":2322380,"ip_address":"广东","ucode":"D66479F0821857","user_header":"https://static001.geekbang.org/account/avatar/00/23/6f/cc/1e15c68f.jpg","comment_is_top":false,"comment_ctime":1688784949,"is_pvip":false,"replies":[{"id":139333,"content":"Hi，可以检查一下是不是在同个包一下。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1697597010,"ip_address":"河南","comment_id":377582,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"老师，为啥我的测试类测不了protected修饰的isPasswordValid方法？明明加了@VisibleForTesting注解😢","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629746,"discussion_content":"Hi，可以检查一下是不是在同个包一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697597010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"河南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371515,"user_name":"le bonheur","can_delete":false,"product_type":"c1","uid":1125922,"ip_address":"江苏","ucode":"7C3D1A9D099306","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/22/cb5bce0b.jpg","comment_is_top":false,"comment_ctime":1680004967,"is_pvip":false,"replies":[{"id":135607,"content":"Hi，期待一起完成专栏的学习。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1680184670,"ip_address":"广东","comment_id":371515,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"从上家公司开始要求跟学习写单元测试,开始爱上单元测试.终于看到了一篇比较综合写单元测试的文章.太高兴了","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611596,"discussion_content":"Hi，期待一起完成专栏的学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680184670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369496,"user_name":"Geek_6f0f96","can_delete":false,"product_type":"c1","uid":2181363,"ip_address":"上海","ucode":"2F909BD25E0D83","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2LQJJqvGX6OA2jTrYny2l5b9lWcANiaglMsv8FiawS9y0vZ7Mrzt9iaozGVU0KKowscziaUI1XRm6RQ/132","comment_is_top":false,"comment_ctime":1677593068,"is_pvip":false,"replies":[{"id":134684,"content":"Hi，你好。回归是收益之一。正文中最后的第三个问题也有介绍关于自动化测试价值的问题。你可以跟着课程一起来练习体验一下，期待一起完成专栏的学习🤝。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1677680323,"ip_address":"广东","comment_id":369496,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"这样做主要收益是回归流程嘛？因为感觉大多数需求如果写测试用例，可能比需求开发时间还多","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607219,"discussion_content":"Hi，你好。回归是收益之一。正文中最后的第三个问题也有介绍关于自动化测试价值的问题。你可以跟着课程一起来练习体验一下，期待一起完成专栏的学习🤝。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677680323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368671,"user_name":"李鑫鑫","can_delete":false,"product_type":"c1","uid":1169021,"ip_address":"北京","ucode":"BEC451BFBEFD25","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/7d/4b09b0bf.jpg","comment_is_top":false,"comment_ctime":1676546267,"is_pvip":false,"replies":[{"id":134266,"content":"Hi 鑫鑫，非常开心收到你的留言。\n我想说的是：测试的工作永远不仅仅是测试同学的事情哈 😊","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1676550230,"ip_address":"上海","comment_id":368671,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"抢了测试同学的工作了！","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605015,"discussion_content":"Hi 鑫鑫，非常开心收到你的留言。\n我想说的是：测试的工作永远不仅仅是测试同学的事情哈 😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676550230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368630,"user_name":"wangzhen666","can_delete":false,"product_type":"c1","uid":1421122,"ip_address":"广东","ucode":"DA228916E48276","user_header":"https://static001.geekbang.org/account/avatar/00/15/af/42/8189f9d1.jpg","comment_is_top":false,"comment_ctime":1676512708,"is_pvip":false,"replies":[{"id":134345,"content":"可以提供一下日志以及相关的执行设备。中大型的测试相比小型测试的一个问题就是依赖设备，相对不稳定。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1676871109,"ip_address":"上海","comment_id":368630,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"LoginActivityTest的should_show_failed_toast_when_execute_login_given_invalid_username_and_password()没有通过","like_count":0,"discussions":[{"author":{"id":1421122,"avatar":"https://static001.geekbang.org/account/avatar/00/15/af/42/8189f9d1.jpg","nickname":"wangzhen666","note":"","ucode":"DA228916E48276","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606103,"discussion_content":"Toast在targetSdk30及以上的模拟器上判断有问题，改为29就好了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676947862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605805,"discussion_content":"可以提供一下日志以及相关的执行设备。中大型的测试相比小型测试的一个问题就是依赖设备，相对不稳定。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676871109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368585,"user_name":"wangzhen666","can_delete":false,"product_type":"c1","uid":1421122,"ip_address":"广东","ucode":"DA228916E48276","user_header":"https://static001.geekbang.org/account/avatar/00/15/af/42/8189f9d1.jpg","comment_is_top":false,"comment_ctime":1676461929,"is_pvip":false,"replies":[{"id":134241,"content":"示例的代码链接：https:&#47;&#47;github.com&#47;junbin1011&#47;AutoTest\n期待一起完成专栏的学习🤝","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1676471936,"ip_address":"上海","comment_id":368585,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"老师方便的话把代码传一下吧～","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604895,"discussion_content":"示例的代码链接：https://github.com/junbin1011/AutoTest\n期待一起完成专栏的学习🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676471937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368446,"user_name":"晓晓","can_delete":false,"product_type":"c1","uid":2872761,"ip_address":"广东","ucode":"E5C4FC6D0E0911","user_header":"https://static001.geekbang.org/account/avatar/00/2b/d5/b9/dc5a6e6a.jpg","comment_is_top":false,"comment_ctime":1676348387,"is_pvip":false,"replies":[{"id":134193,"content":"期待一起完成专栏的学习💪","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1676379185,"ip_address":"上海","comment_id":368446,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"受益匪浅，期待更新！","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604614,"discussion_content":"期待一起完成专栏的学习💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676379185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391992,"user_name":"蓝啼儿","can_delete":false,"product_type":"c1","uid":1116230,"ip_address":"上海","ucode":"43D2944B891BAB","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/46/8b244fc3.jpg","comment_is_top":false,"comment_ctime":1719632039,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"这种功能测试，写用例就太浪费时间了，有这时间，人工都测试N遍了","like_count":0},{"had_liked":false,"id":389338,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"浙江","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1712158102,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100525001,"comment_content":"感谢老师分享了这么多自动化测试的工具，对构建一个良好的 App 信心倍增。\n我在官网的入门教程中学到的是 AndroidJUnitRunner https:&#47;&#47;developer.android.com&#47;training&#47;testing&#47;instrumented-tests&#47;androidx-test-libraries&#47;runner，这个应该属于大型测试工具\n\n分享一门提高测试技能的专栏「徐昊 · TDD项目实战70讲」\n\n跟着老师学习，让我的入门项目「https:&#47;&#47;github.com&#47;aoeai&#47;aoeai-qigua-android」变强变大","like_count":0}]}