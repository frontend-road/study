{"id":484372,"title":"08｜内核跟踪（下）：开发内核跟踪程序的进阶方法","content":"<p>你好，我是倪朋飞。</p><p>上一讲，我带你梳理了查询 eBPF 跟踪点的常用方法，并以短时进程的跟踪为例，通过 bpftrace 实现了内核跟踪点的跟踪程序。</p><p>bpftrace 简单易用，非常适合入门，可以带初学者轻松体验 eBPF 的各种跟踪特性。但在上一讲的案例中，你也发现 bpftrace 并不适用于所有的 eBPF 应用，它本身的限制导致我们无法在需要复杂 eBPF 程序的场景中使用它。在复杂的应用中，我还是推荐你使用 BCC 或者 libbpf 进行开发。</p><p>那么，今天我就带你看看，如何使用 BCC 和 libbpf 这两个进阶方法来开发内核跟踪程序。</p><h2><strong>BCC 方法</strong></h2><p>我们先来看看如何使用 BCC 来开发上一讲中短时进程的跟踪程序。这里先说明下，由于&nbsp;execveat&nbsp;的处理逻辑同&nbsp;execve&nbsp;基本相同，限于篇幅的长度，接下来的 BCC 和 libbpf 程序都以&nbsp;execve&nbsp;为例。</p><p>这里我们先回顾下 <a href=\"https://time.geekbang.org/column/article/481090\">03讲</a> 的内容，使用 BCC 开发的 eBPF 程序包含两部分：</p><ul>\n<li>第一部分是用 C 语言开发的 eBPF 程序。在 eBPF 程序中，你可以利用 BCC 提供的<a href=\"https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\">库函数和宏定义</a>简化你的处理逻辑。</li>\n<li>第二部分是用 Python 语言开发的前端界面，其中包含 eBPF 程序加载、挂载到内核函数和跟踪点，以及通过 BPF 映射获取和打印执行结果等部分。在前端程序中，你同样可以利用 BCC 库来访问 BPF 映射。</li>\n</ul><!-- [[[read_end]]] --><h3><strong>数据结构定义</strong></h3><p>我们先看第一部分。为了在系统调用入口跟踪点和出口跟踪点间共享进程信息等数据，我们可以定义一个哈希映射（比如命名为&nbsp;<code>tasks</code>）；同样地，因为我们想要在用户空间实时获取跟踪信息，这就需要一个性能事件映射。对于这两种映射的创建步骤，BCC 已经提供了非常方便的宏定义，你可以直接使用。</p><p>比如，你可以用下面的方式来创建这两个映射：</p><pre><code class=\"language-c++\">struct data_t {\n    u32 pid;\n    char comm[TASK_COMM_LEN];\n    int retval;\n    unsigned int args_size;\n    char argv[FULL_MAX_ARGS_ARR];\n};\nBPF_PERF_OUTPUT(events);\nBPF_HASH(tasks, u32, struct data_t);\n</code></pre><p>代码中指令的具体作用如下：</p><ul>\n<li><code>struct data_t</code>&nbsp;定义了一个包含进程基本信息的数据结构，它将用在哈希映射的值中（其中的参数大小&nbsp;<code>args_size</code>&nbsp;会在读取参数内容的时候用到）；</li>\n<li><code>BPF_PERF_OUTPUT(events)</code>&nbsp;定义了一个性能事件映射；</li>\n<li><code>BPF_HASH(tasks, u32, struct data_t)</code>&nbsp;定义了一个哈希映射，其键为 32 位的进程 PID，而值则是进程基本信息&nbsp;<code>data_t</code>。</li>\n</ul><p>两个映射定义好之后，接下来就是<strong>定义跟踪点的处理函数</strong>。在 BCC 中，你可以通过&nbsp;<code>TRACEPOINT_PROBE(category, event)</code>&nbsp;来定义一个跟踪点处理函数。BCC 会将所有的参数放入&nbsp;<code>args</code>&nbsp;这个变量中，这样使用&nbsp;<code>args-&gt;&lt;参数名&gt;</code>&nbsp;就可以访问跟踪点的参数值。</p><p>对我们要跟踪的短时进程问题来说，也就是下面这两个跟踪点：</p><pre><code class=\"language-c++\">// 定义sys_enter_execve跟踪点处理函数.\nTRACEPOINT_PROBE(syscalls, sys_enter_execve)\n{\n    //待添加处理逻辑\n}\n\n// 定义sys_exit_execve跟踪点处理函数.\nTRACEPOINT_PROBE(syscalls, sys_exit_execve)\n{\n    //待添加处理逻辑\n}\n</code></pre><h3><strong>入口跟踪点处理</strong></h3><p>对于入口跟踪点&nbsp;<code>sys_enter_execve</code>&nbsp;的处理，还是按照上一讲中 bpftrace 的逻辑，先获取进程的 PID、进程名称和参数列表之后，再存入刚刚定义的哈希映射中。</p><p>其中，进程 PID 和进程名称都比较容易获取。如下面的代码所示，你可以调用&nbsp;<code>bpf_get_current_pid_tgid()</code>&nbsp;查询进程 PID，调用&nbsp;<code>bpf_get_current_comm()</code>&nbsp;读取进程名称：</p><pre><code class=\"language-c++\">    // 获取进程PID和进程名称\n    struct data_t data = { };\n    u32 pid = bpf_get_current_pid_tgid();  // 取低32位为进程PID\n    data.pid = pid;\n    bpf_get_current_comm(&amp;data.comm, sizeof(data.comm));\n</code></pre><p>而命令行参数的获取就没那么容易了。因为 BCC 把所有参数都放到了&nbsp;<code>args</code>&nbsp;中，你可以使用&nbsp;<code>args-&gt;argv</code>&nbsp;来访问参数列表：</p><pre><code class=\"language-c++\">const char **argv = (const char **)(args-&gt;argv);\n</code></pre><p>注意，<code>argv</code>&nbsp;是一个用户空间的字符串数组（指针数组），这就需要调用&nbsp;<code>bpf_probe_read</code>&nbsp;系列的辅助函数，去这些指针中读取数据。并且，字符串的数量（即参数的个数）和每个字符串的长度（即每个参数的长度）都是未知的，由于 eBPF 栈大小只有 512 字节，如果想要把它们读入一个临时的字符数组中，必须要保证每次读取的内容不超过栈的大小。这类问题有很多种不同的处理方法，其中一个比较简单的方式就是<strong>把多余的参数截断，使用</strong><code>...</code><strong>代替过长的参数</strong><strong>。</strong>一般来说，知道了进程的名称和前几个参数，对调试和排错来说就足够了。</p><p>你可以定义最大读取的参数个数和参数长度，然后在哈希映射的值中定义一个字符数组，代码如下所示：</p><pre><code class=\"language-c++\">// 定义参数长度和参数个数常量\n#define ARGSIZE 64\n#define TOTAL_MAX_ARGS 5\n#define FULL_MAX_ARGS_ARR (TOTAL_MAX_ARGS * ARGSIZE)\n\nstruct data_t {\n    ...\n    char argv[FULL_MAX_ARGS_ARR];\n};\n</code></pre><p>有了字符数组，接下来再定义一个辅助函数，从参数数组中读取字符串参数（限定最长&nbsp;<code>ARGSIZE</code>）：</p><pre><code class=\"language-c++\">// 从用户空间读取字符串\nstatic int __bpf_read_arg_str(struct data_t *data, const char *ptr)\n{\n    if (data-&gt;args_size &gt; LAST_ARG) {\n        return -1;\n    }\n\n    int ret = bpf_probe_read_user_str(&amp;data-&gt;argv[data-&gt;args_size], ARGSIZE, (void *)ptr);\n    if (ret &gt; ARGSIZE || ret &lt; 0) {\n        return -1;\n    }\n\n    // increase the args size. the first tailing '\\0' is not counted and hence it\n    // would be overwritten by the next call.\n    data-&gt;args_size += (ret - 1);\n\n    return 0;\n}\n</code></pre><p>在这个函数中，有几点需要你注意：</p><ul>\n<li><code>bpf_probe_read_user_str()</code>&nbsp;返回的是包含字符串结束符&nbsp;<code>\\0</code>&nbsp;的长度。为了拼接所有的字符串，在计算已读取参数长度的时候，需要把&nbsp;<code>\\0</code>&nbsp;排除在外。</li>\n<li><code>&amp;data-&gt;argv[data-&gt;args_size]</code>&nbsp;用来获取要存放参数的位置指针，这是为了把多个参数拼接到一起。</li>\n<li>在调用&nbsp;<code>bpf_probe_read_user_str()</code>&nbsp;前后，需要对指针位置和返回值进行校验，这可以帮助 eBPF 验证器获取指针读写的边界（如果你感兴趣，可以参考<a href=\"https://sysdig.com/blog/the-art-of-writing-ebpf-programs-a-primer\">这篇文章</a>，了解更多的内存访问验证细节）。</li>\n</ul><p>有了这个辅助函数之后，因为 eBPF 在老版本内核中并不支持循环（有界循环在 <strong>5.3</strong> 之后才支持），要访问字符串数组，还需要一个小技巧：使用&nbsp;<code>#pragma unroll</code>&nbsp;告诉编译器，把源码中的循环自动展开。这就避免了最终的字节码中包含循环。</p><p>完整的处理函数如下所示（具体的每一步我都加了详细的注释，你可以参考注释来加深理解）：</p><pre><code class=\"language-c++\">// 引入内核头文件\n#include &lt;uapi/linux/ptrace.h&gt;\n#include &lt;linux/sched.h&gt;\n#include &lt;linux/fs.h&gt;\n\n// 定义sys_enter_execve跟踪点处理函数.\nTRACEPOINT_PROBE(syscalls, sys_enter_execve)\n{\n    // 变量定义\n    unsigned int ret = 0;\n    const char **argv = (const char **)(args-&gt;argv);\n\n    // 获取进程PID和进程名称\n    struct data_t data = { };\n    u32 pid = bpf_get_current_pid_tgid();\n    data.pid = pid;\n    bpf_get_current_comm(&amp;data.comm, sizeof(data.comm));\n\n    // 获取第一个参数（即可执行文件的名字）\n    if (__bpf_read_arg_str(&amp;data, (const char *)argv[0]) &lt; 0) {\n        goto out;\n    }\n\n    // 获取其他参数（限定最多5个）\n    #pragma unrollfor (int i = 1; i &lt; TOTAL_MAX_ARGS; i++) {\n        if (__bpf_read_arg_str(&amp;data, (const char *)argv[i]) &lt; 0) {\n            goto out;\n        }\n    }\n\n out:\n    // 存储到哈希映射中\n    tasks.update(&amp;pid, &amp;data);\n    return 0;\n}\n</code></pre><p>注意，<strong>为了获取内核数据结构的定义，在文件的开头需要引入相关的内核头文件</strong>。此外，读取参数完成之后，不要忘记调用&nbsp;<code>tasks.update()</code>&nbsp;把进程的基本信息存储到哈希映射中。因为返回值需要等到出口跟踪点时才可以获取，这儿只需要更新哈希映射就可以了，不需要把进程信息提交到性能事件映射中去。</p><h3><strong>出口跟踪点处理</strong></h3><p>入口跟踪点&nbsp;<code>sys_enter_execve</code>&nbsp;处理好之后，我们再来看看出口跟踪点&nbsp;<code>sys_exit_execve</code>&nbsp;该如何处理。</p><p>由于进程的基本信息已经保存在了哈希映射中，所以出口事件的处理可以分为查询进程基本信息、填充返回值、最后再提交到性能事件映射这三个步骤。具体代码如下所示：</p><pre><code class=\"language-c++\">// 定义sys_exit_execve跟踪点处理函数.\nTRACEPOINT_PROBE(syscalls, sys_exit_execve)\n{\n    // 从哈希映射中查询进程基本信息\n    u32 pid = bpf_get_current_pid_tgid();\n    struct data_t *data = tasks.lookup(&amp;pid);\n\n    // 填充返回值并提交到性能事件映射中\n    if (data != NULL) {\n        data-&gt;retval = args-&gt;ret;\n        events.perf_submit(args, data, sizeof(struct data_t));\n\n        // 最后清理进程信息\n        tasks.delete(&amp;pid);\n    }\n\n    return 0;\n}\n</code></pre><p>到这里，完整的 eBPF 程序就开发好了，你可以把上述的代码保存到一个本地文件中，并命名为&nbsp;<code>execsnoop.c</code>（你也可以在&nbsp;<a href=\"https://github.com/feiskyer/ebpf-apps/blob/main/bcc-apps/python/execsnoop.c\">GitHub</a>&nbsp;上找到全部源码）。</p><h3><strong>Python前端处理</strong></h3><p>eBPF 程序开发完成后，最后一步就是为它增加一个 Python 前端。</p><p>同 <a href=\"https://time.geekbang.org/column/article/481090\">03 讲</a> 的 Hello World 类似，<strong>Python 前端逻辑需要 eBPF 程序加载、挂载到内核函数和跟踪点，以及通过 BPF 映射获取和打印执行结果等几个步骤</strong>。其中，因为我们已经使用了&nbsp;<code>TRACEPOINT_PROBE</code>&nbsp;宏定义，来定义 eBPF 跟踪点处理函数，BCC 在加载字节码的时候，会帮你自动把它挂载到正确的跟踪点上，所以挂载的步骤就可以忽略。完整的 Python 程序如下所示：</p><pre><code class=\"language-python\"># 引入库函数\nfrom bcc import BPF\nfrom bcc.utils import printb\n\n# 1) 加载eBPF代码\nb = BPF(src_file=\"execsnoop.c\")\n\n# 2) 输出头\nprint(\"%-6s %-16s %-3s %s\" % (\"PID\", \"COMM\", \"RET\", \"ARGS\"))\n\n# 3) 定义性能事件打印函数\ndef print_event(cpu, data, size):\n    # BCC自动根据\"struct data_t\"生成数据结构\n    event = b[\"events\"].event(data)\n    printb(b\"%-6d %-16s %-3d %-16s\" % (event.pid, event.comm, event.retval, event.argv))\n\n# 4) 绑定性能事件映射和输出函数，并从映射中循环读取数据\nb[\"events\"].open_perf_buffer(print_event)\nwhile 1:\n    try:\n        b.perf_buffer_poll()\n    except KeyboardInterrupt:\n        exit()\n</code></pre><p>把上述的代码保存到&nbsp;<code>execsnoop.py</code>&nbsp;中，然后通过 Python 运行，并在另一个终端中执行&nbsp;<code>ls</code>&nbsp;命令，你就可以得到如下的输出：</p><pre><code class=\"language-bash\">$ sudo python3 execsnoop.py\nPID    COMM             RET ARGS\n249134 zsh              0   ls--color=tty\n</code></pre><p>恭喜，到这里你已经开发了一个新的 eBPF 程序，并且它可以帮你排查短时进程相关的性能问题。</p><p>不过，在你想要分发这个程序到生产环境时，又会碰到一个新的难题：BCC 依赖于 LLVM 和内核头文件才可以动态编译和加载 eBPF 程序，而出于安全策略的需要，在生产环境中通常又不允许安装这些开发工具。</p><p>这个难题应该怎么克服呢？一种很容易想到的方法是把 BCC 和开发工具都安装到容器中，容器本身不提供对外服务，这样可以降低安全风险。另外一种方法就是参考内核中的&nbsp;<a href=\"https://elixir.bootlin.com/linux/v5.13/source/samples/bpf\">eBPF 示例</a>，开发一个匹配当前内核版本的 eBPF 程序，并编译为字节码，再分发到生产环境中。</p><p>除此之外，如果你的内核已经支持了 BPF 类型格式 (BTF)，我推荐你使用从内核源码中抽离出来的 libbpf 进行开发，这样可以借助 BTF 和 CO-RE 获得更好的移植性。实际上，BCC 的很多工具都在向 BTF 迁移中，相信未来 libbpf 会成为最受欢迎的 eBPF 程序开发基础库，甚至 Windows eBPF 也会支持 libbpf。</p><h2><strong>libbpf 方法</strong></h2><p>那么，如何用 libbpf 来开发一个 eBPF 程序呢？跟刚才的 BCC 程序类似，使用 libbpf 开发 eBPF 程序也是分为两部分：第一，内核态的 eBPF 程序；第二，用户态的加载、挂载、映射读取以及输出程序等。</p><p><strong>在 eBPF 程序中，由于内核已经支持了 BTF，你不再需要引入众多的内核头文件来获取内核数据结构的定义。</strong>取而代之的是一个通过 bpftool 生成的&nbsp;<strong><code>vmlinux.h</code></strong>&nbsp;头文件，其中包含了内核数据结构的定义。</p><p>这样，使用 libbpf 开发 eBPF 程序就可以通过以下四个步骤完成：</p><ol>\n<li>使用 bpftool 生成内核数据结构定义头文件。BTF 开启后，你可以在系统中找到&nbsp;<code>/sys/kernel/btf/vmlinux</code>&nbsp;这个文件，bpftool 正是从它生成了内核数据结构头文件。</li>\n<li>开发 eBPF 程序部分。为了方便后续通过统一的 Makefile 编译，eBPF 程序的源码文件一般命名为&nbsp;<code>&lt;程序名&gt;.bpf.c</code>。</li>\n<li>编译 eBPF 程序为字节码，然后再调用&nbsp;<code>bpftool gen skeleton</code>&nbsp;为 eBPF 字节码生成脚手架头文件（Skeleton Header）。这个头文件包含了 eBPF 字节码以及相关的加载、挂载和卸载函数，可在用户态程序中直接调用。</li>\n<li>最后就是用户态程序引入上一步生成的头文件，开发用户态程序，包括 eBPF 程序加载、挂载到内核函数和跟踪点，以及通过 BPF 映射获取和打印执行结果等。</li>\n</ol><p>通常，这几个步骤里面的编译、库链接、执行&nbsp;<code>bpftool</code>&nbsp;命令等，都可以放到 Makefile 中，这样就可以通过一个&nbsp;<code>make</code>&nbsp;命令去执行所有的步骤。比如，下面是一个简化版本的 Makefile：</p><pre><code class=\"language-makefile\">APPS = execsnoop\n\n.PHONY: all\nall: $(APPS)\n\n$(APPS):\n    clang -g -O2 -target bpf -D__TARGET_ARCH_x86_64 -I/usr/include/x86_64-linux-gnu -I. -c $@.bpf.c -o $@.bpf.o\n    bpftool gen skeleton $@.bpf.o &gt; $@.skel.h\n    clang -g -O2 -Wall -I . -c $@.c -o $@.o\n    clang -Wall -O2 -g $@.o -static -lbpf -lelf -lz -o $@\n\nvmlinux:\n    $(bpftool) btf dump file /sys/kernel/btf/vmlinux format c &gt; vmlinux.h\n</code></pre><p>有了这个 Makefile 之后，你执行&nbsp;<code>make vmlinux</code>&nbsp;命令就可以生成&nbsp;<code>vmlinux.h</code>&nbsp;文件，再执行&nbsp;<code>make</code>&nbsp;就可以编译&nbsp;<code>APPS</code>&nbsp;里面配置的所有 eBPF 程序（多个程序之间以空格分隔）。</p><p>接下来，我就带你一起通过上述四个步骤开发跟踪短时进程的 eBPF 程序。</p><h3><strong>内核头文件生成</strong></h3><p>首先，对于第一步，我们只需要执行下面的命令，即可生成内核数据结构的头文件：</p><pre><code class=\"language-bash\">sudo bpftool btf dump file /sys/kernel/btf/vmlinux format c &gt; vmlinux.h\n</code></pre><p>如果命令执行失败了，并且错误说 BTF 不存在，那说明当前系统内核没有开启 BTF 特性。这时候，你需要开启&nbsp;<code>CONFIG_DEBUG_INFO_BTF=y</code>&nbsp;和&nbsp;<code>CONFIG_DEBUG_INFO=y</code>&nbsp;这两个编译选项，然后重新编译和安装内核。</p><h3><strong>eBPF 程序定义</strong></h3><p>第二步就是开发 eBPF 程序，包括定义哈希映射、性能事件映射以及跟踪点的处理函数等，而对这些数据结构和跟踪函数的定义都可以通过&nbsp;<code>SEC()</code>&nbsp;宏定义来完成。在编译时，<strong>通过 <code>SEC()</code> 宏定义的数据结构和函数会放到特定的 ELF 段中，这样后续在加载 BPF 字节码时，就可以从这些段中获取所需的元数据。</strong></p><p>比如，你可以使用下面的代码来定义映射和跟踪点处理函数：</p><pre><code class=\"language-c++\">// 包含头文件\n#include \"vmlinux.h\"\n#include &lt;bpf/bpf_helpers.h&gt;\n\n// 定义进程基本信息数据结构\nstruct event {\n    char comm[TASK_COMM_LEN];\n    pid_t pid;\n    int retval;\n    int args_count;\n    unsigned int args_size;\n    char args[FULL_MAX_ARGS_ARR];\n};\n\n// 定义哈希映射\nstruct {\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __uint(max_entries, 10240);\n    __type(key, pid_t);\n    __type(value, struct event);\n} execs SEC(\".maps\");\n\n// 定义性能事件映射\nstruct {\n    __uint(type, BPF_MAP_TYPE_PERF_EVENT_ARRAY);\n    __uint(key_size, sizeof(u32));\n    __uint(value_size, sizeof(u32));\n} events SEC(\".maps\");\n\n// sys_enter_execve跟踪点\nSEC(\"tracepoint/syscalls/sys_enter_execve\")\nint tracepoint__syscalls__sys_enter_execve(struct trace_event_raw_sys_enter *ctx)\n{\n  // 待实现处理逻辑\n}\n\n// sys_exit_execve跟踪点\nSEC(\"tracepoint/syscalls/sys_exit_execve\")\nint tracepoint__syscalls__sys_exit_execve(struct trace_event_raw_sys_exit *ctx)\n{\n  // 待实现处理逻辑\n}\n\n// 定义许可证（前述的BCC默认使用GPL）\nchar LICENSE[] SEC(\"license\") = \"Dual BSD/GPL\";\n</code></pre><p>让我们来看看这段代码的具体含义：</p><ul>\n<li>头文件&nbsp;<code>vmlinux.h</code>&nbsp;包含了内核数据结构，而&nbsp;<code>bpf/bpf_helpers.h</code>&nbsp;包含了 <a href=\"https://time.geekbang.org/column/article/482459\">05 讲</a> 提到的 BPF 辅助函数；</li>\n<li><code>struct event</code>&nbsp;定义了进程基本信息数据结构，它会用在后面的哈希映射中；</li>\n<li><code>SEC(\".maps\")</code>&nbsp;定义了哈希映射和性能事件映射；</li>\n<li><code>SEC(\"tracepoint/&lt;跟踪点名称&gt;\")</code>&nbsp;定义了跟踪点处理函数，系统调用跟踪点的格式是&nbsp;<code>tracepoint/syscalls/&lt;系统调用名称&gt;\"</code>。以后你需要定义内核插桩和用户插桩的时候，也是以类似的格式定义，比如&nbsp;<code>kprobe/do_unlinkat</code>&nbsp;或&nbsp;<code>uprobe/func</code>；</li>\n<li>最后的&nbsp;<code>SEC(\"license\")</code>&nbsp;定义了 eBPF 程序的许可证。在上述的 BCC eBPF 程序中，我们并没有定义许可证，这是因为 BCC 自动帮你使用了 GPL 许可。</li>\n</ul><p>有了基本的程序结构，接下来就是<strong>实现系统调用入口和出口跟踪点的处理函数</strong>。它们的基本过程跟上述的 BCC 程序是类似的。</p><h3><strong>入口跟踪点处理</strong></h3><p>对于入口跟踪点&nbsp;<code>sys_enter_execve</code>&nbsp;的处理，还是按照上述 BCC 程序的逻辑，先获取进程的 PID、进程名称和参数列表之后，再存入刚刚定义的哈希映射中。完整代码如下所示，具体每一步的内容我都加了详细的注释：</p><pre><code class=\"language-c++\">SEC(\"tracepoint/syscalls/sys_enter_execve\")\nint tracepoint__syscalls__sys_enter_execve(struct trace_event_raw_sys_enter\n                       *ctx)\n{\n    struct event *event;\n    const char **args = (const char **)(ctx-&gt;args[1]);\n    const char *argp;\n\n    // 查询PID\n    u64 id = bpf_get_current_pid_tgid();\n    pid_t pid = (pid_t) id;\n\n    // 保存一个空的event到哈希映射中\n    if (bpf_map_update_elem(&amp;execs, &amp;pid, &amp;empty_event, BPF_NOEXIST)) {\n        return 0;\n    }\n    event = bpf_map_lookup_elem(&amp;execs, &amp;pid);\n    if (!event) {\n        return 0;\n    }\n\n    // 初始化event变量\n    event-&gt;pid = pid;\n    event-&gt;args_count = 0;\n    event-&gt;args_size = 0;\n\n    // 查询第一个参数\n    unsigned int ret = bpf_probe_read_user_str(event-&gt;args, ARGSIZE,\n                           (const char *)ctx-&gt;args[0]);\n    if (ret &lt;= ARGSIZE) {\n        event-&gt;args_size += ret;\n    }\n\n    // 查询其他参数\n    event-&gt;args_count++;\n    #pragma unrollfor (int i = 1; i &lt; TOTAL_MAX_ARGS; i++) {\n        bpf_probe_read_user(&amp;argp, sizeof(argp), &amp;args[i]);\n        if (!argp)\n            return 0;\n\n        if (event-&gt;args_size &gt; LAST_ARG)\n            return 0;\n\n        ret =\n            bpf_probe_read_user_str(&amp;event-&gt;args[event-&gt;args_size],\n                        ARGSIZE, argp);\n        if (ret &gt; ARGSIZE)\n            return 0;\n\n        event-&gt;args_count++;\n        event-&gt;args_size += ret;\n    }\n\n    // 再尝试一次，确认是否还有未读取的参数\n    bpf_probe_read_user(&amp;argp, sizeof(argp), &amp;args[TOTAL_MAX_ARGS]);\n    if (!argp)\n        return 0;\n\n    // 如果还有未读取参数，则增加参数数量（用于输出\"...\"）\n    event-&gt;args_count++;\n\n    return 0;\n}\n</code></pre><p>其中，你需要注意这三点：</p><ul>\n<li>第一，程序使用了&nbsp;<code>bpf_probe_read_user()</code>&nbsp;来查询参数。由于它把&nbsp;<code>\\0</code>&nbsp;也算到了已读取参数的长度里面，所以最终&nbsp;<code>event-&gt;args</code>&nbsp;中保存的各个参数是以&nbsp;<code>\\0</code>&nbsp;分隔的。在用户态程序输出参数之前，需要用空格替换&nbsp;<code>\\0</code>。</li>\n<li>第二，程序在一开始的时候向哈希映射存入了一个空事件，在后续出口跟踪点处理的时候需要确保空事件也能正确清理。</li>\n<li>第三，程序在最后又尝试多读取了一次参数列表。如果还有未读取参数，参数数量增加了 1。用户态程序可以根据参数数量来决定是不是需要在参数结尾输出一个&nbsp;<code>...</code>。</li>\n</ul><h3><strong>出口跟踪点处理</strong></h3><p>入口跟踪点处理好之后，再来看看出口跟踪点的处理方法。它的步骤跟 BCC 程序也是类似的，也是查询进程基本信息、填充返回值、提交到性能事件映射这三个步骤。</p><p>除此之外，由于刚才入口跟踪点的处理中没有读取进程名称，所以在提交性能事件之前还需要先查询一下进程名称。完整的程序如下所示，具体每一步的内容我也加了详细的注释：</p><pre><code class=\"language-c++\">SEC(\"tracepoint/syscalls/sys_exit_execve\")\nint tracepoint__syscalls__sys_exit_execve(struct trace_event_raw_sys_exit *ctx)\n{\n    u64 id;\n    pid_t pid;\n    int ret;\n    struct event *event;\n\n    // 从哈希映射中查询进程基本信息\n    id = bpf_get_current_pid_tgid();\n    pid = (pid_t) id;\n    event = bpf_map_lookup_elem(&amp;execs, &amp;pid);\n    if (!event)\n        return 0;\n\n    // 更新返回值和进程名称\n    ret = ctx-&gt;ret;\n    event-&gt;retval = ret;\n    bpf_get_current_comm(&amp;event-&gt;comm, sizeof(event-&gt;comm));\n\n    // 提交性能事件\n    size_t len = EVENT_SIZE(event);\n    if (len &lt;= sizeof(*event))\n        bpf_perf_event_output(ctx, &amp;events, BPF_F_CURRENT_CPU, event,\n                      len);\n\n    // 清理哈希映射\n    bpf_map_delete_elem(&amp;execs, &amp;pid);\n    return 0;\n}\n</code></pre><p>从这些代码中你可以看到，它的处理逻辑跟上述的 BCC 程序基本上是相同的。不过，详细对比一下，你会发现它们之间还是有不同的，不同点主要在两个方面：</p><ul>\n<li>第一，函数名的定义格式不同。BCC 程序使用的是&nbsp;<code>TRACEPOINT_PROBE</code>&nbsp;宏，而 libbpf 程序用的则是&nbsp;<code>SEC</code>&nbsp;宏。</li>\n<li>第二，映射的访问方法不同。BCC 封装了很多更易用的映射访问函数（如&nbsp;<code>tasks.lookup()</code>），而 libbpf 程序则需要调用 <a href=\"https://time.geekbang.org/column/article/482459\">05 讲</a> 提到过的 BPF 辅助函数（比如查询要使用&nbsp;<code>bpf_map_lookup_elem()</code>）。</li>\n</ul><p>到这里，新建一个目录，并把上述代码存入&nbsp;<code>execsnoop.bpf.c</code>&nbsp;文件中，eBPF 部分的代码也就开发好了。</p><h3><strong>编译并生成脚手架头文件</strong></h3><p>有了 eBPF 程序，执行下面的命令，你就可以使用 clang 和 bpftool 将其编译成 BPF 字节码，然后再生成其脚手架头文件&nbsp;<code>execsnoop.skel.h</code>&nbsp;（注意，脚手架头文件的名字一般定义为&nbsp;<code>&lt;程序名&gt;.skel.h</code>）：</p><pre><code class=\"language-bash\">clang -g -O2 -target bpf -D__TARGET_ARCH_x86_64 -I/usr/include/x86_64-linux-gnu -I. -c execsnoop.bpf.c -o execsnoop.bpf.o\nbpftool gen skeleton execsnoop.bpf.o &gt; execsnoop.skel.h\n</code></pre><p>其中，clang 的参数&nbsp;<code>-target bpf</code>&nbsp;表示要生成 BPF 字节码，<code>-D__TARGET_ARCH_x86_64</code>&nbsp;表示目标的体系结构是 x86_64，而&nbsp;<code>-I</code>&nbsp;则是引入头文件路径。</p><p>命令执行后，脚手架头文件会放到&nbsp;<code>execsnoop.skel.h</code>&nbsp;中，这个头文件包含了 BPF 字节码和相关的管理函数。因而，当用户态程序引入这个头文件并编译之后，只需要分发最终用户态程序生成的二进制文件到生产环境即可（如果用户态程序使用了其他的动态库，还需要分发动态库）。</p><h3><strong>开发用户态程序</strong></h3><p>有了脚手架头文件之后，还剩下最后一步，也就是用户态程序的开发。</p><p>同 BCC 的 Python 前端程序类似，libbpf 用户态程序也需要 eBPF 程序加载、挂载到跟踪点，以及通过 BPF 映射获取和打印执行结果等几个步骤。虽然 C 语言听起来可能比 Python 语言麻烦一些，但实际上，这几个步骤都可以通过脚手架头文件中自动生成的函数来完成。</p><p>下面是忽略了错误处理逻辑之后，用户态程序的一个基本框架：</p><pre><code class=\"language-c++\">// 引入脚手架头文件\n#include \"execsnoop.skel.h\"\n\n// C语言主函数\nint main(int argc, char **argv)\n{\n    // 定义BPF程序和性能事件缓冲区\n    struct execsnoop_bpf *skel;\n    struct perf_buffer_opts pb_opts;\n    struct perf_buffer *pb = NULL;\n    int err;\n\n    // 1. 设置调试输出函数\n    libbpf_set_print(libbpf_print_fn);\n\n    // 2. 增大 RLIMIT_MEMLOCK（默认值通常太小，不足以存入BPF映射的内容）\n    bump_memlock_rlimit();\n\n    // 3. 初始化BPF程序\n    skel = execsnoop_bpf__open();\n\n    // 4. 加载BPF字节码\n    err = execsnoop_bpf__load(skel);\n\n    // 5. 挂载BPF字节码到跟踪点\n    err = execsnoop_bpf__attach(skel);\n\n    // 6. 配置性能事件回调函数\n    pb_opts.sample_cb = handle_event;\n    pb = perf_buffer__new(bpf_map__fd(skel-&gt;maps.events), 64, &amp;pb_opts);\n\n    // 7. 从缓冲区中循环读取数据\n    while ((err = perf_buffer__poll(pb, 100)) &gt;= 0) ;\n}\n</code></pre><p>其中，<code>execsnoop_</code>&nbsp;开头的数据结构和函数都包含在脚手架头文件&nbsp;<code>execsnoop.skel.h</code>&nbsp;中。而具体到每一步的含义如下：</p><ul>\n<li>第 1 步的调试输出函数中，可以调用&nbsp;<code>printf()</code>&nbsp;把调试信息输出到终端中。</li>\n<li>第 2 步增大锁定内存限制&nbsp;<code>RLIMIT_MEMLOCK</code>&nbsp;是必要的，因为系统默认的锁定内存通常过小，无法满足 BPF 映射的需要。</li>\n<li>第 3~5 步，直接调用脚手架头文件中的函数，加载 BPF 字节码并挂载到跟踪点。</li>\n<li>第 6~7 步为性能事件设置回调函数，并从缓冲区中循环读取数据。注意，性能事件映射&nbsp;<code>skel-&gt;maps.events</code>&nbsp;也是 bpftool 自动帮你生成好的。</li>\n</ul><p>接下来，在性能事件回调函数中，把数据格式转换为&nbsp;<code>struct event</code>&nbsp;格式之后，由于参数列表是使用&nbsp;<code>\\0</code>&nbsp;来分割的，并不能直接向终端打印所有参数。所以，还需要把&nbsp;<code>\\0</code>&nbsp;先替换为空格，然后再打印。完整的回调函数如下所示：</p><pre><code class=\"language-c++\">// 性能事件回调函数(向终端中打印进程名、PID、返回值以及参数)\nvoid handle_event(void *ctx, int cpu, void *data, __u32 data_sz)\n{\n    const struct event *e = data;\n    printf(\"%-16s %-6d %3d \", e-&gt;comm, e-&gt;pid, e-&gt;retval);\n    print_args(e);\n    putchar('\\n');\n}\n\n// 打印参数（替换'\\0'为空格）\nstatic void print_args(const struct event *e)\n{\n    int args_counter = 0;\n\n    for (int i = 0; i &lt; e-&gt;args_size &amp;&amp; args_counter &lt; e-&gt;args_count; i++) {\n        char c = e-&gt;args[i];\n        if (c == '\\0') {\n            // 把'\\0'替换为空格\n            args_counter++;\n            putchar(' ');\n        } else {\n            putchar(c);\n        }\n    }\n    if (e-&gt;args_count &gt; TOTAL_MAX_ARGS) {\n        // 过长的参数输出\"...\"替代\n        fputs(\" ...\", stdout);\n    }\n}\n</code></pre><p>把上面的代码保存到&nbsp;<code>execsnoop.c</code>&nbsp;文件中（你也可以在&nbsp;<a href=\"https://github.com/feiskyer/ebpf-apps/blob/main/bpf-apps/execsnoop.c\">GitHub</a>&nbsp;上找到完整的代码），然后执行下面的命令，将其编译为可执行文件：</p><pre><code class=\"language-bash\">clang -g -O2 -Wall -I . -c execsnoop.c -o execsnoop.o\nclang -Wall -O2 -g execsnoop.o -static -lbpf -lelf -lz -o execsnoop\n</code></pre><p>最后，执行&nbsp;<code>execsnoop</code>，你就可以得到如下的结果：</p><pre><code class=\"language-bash\">$ sudo ./execsnoop\nCOMM             PID    RET ARGS\nsh               276871   0 /bin/sh -c which ps\nwhich            276872   0 /usr/bin/which ps\n</code></pre><p>你还可以直接把这个文件复制到开启了 BTF 的其他机器中，无需安装额外的 LLVM 开发工具和内核头文件，也可以直接执行。</p><p>如果命令失败，并且你看到如下的错误，这说明当前机器没有开启 BTF，需要重新编译内核开启 BTF 才可以运行：</p><pre><code class=\"language-plain\">Failed to load and verify BPF skeleton\n</code></pre><p>恭喜，加上上一讲的内容，到这里你就通过 bpftrace、BCC 和 libbpf 这三种方法，实现了短时进程的跟踪。虽然这三种方法的步骤和实现代码各不相同，但实际上它们的实现逻辑都是类似的，无非就是<strong>找出跟踪点，然后在 eBPF 部分获取想要的数据并保存到 BPF 映射中，最后在用户空间程序中读取 BPF 映射的内容并输出出来</strong>。</p><h2><strong>小结</strong></h2><p>今天，我以短时进程的跟踪为例，通过 BCC 和 libbpf 这两种方法实现了短时进程的跟踪程序（你可以在 GitHub 的<a href=\"https://github.com/feiskyer/ebpf-apps\">这个链接</a>中，找到今天的案例中提到的所有源码）。加上上一讲介绍的 bpftrace 方法，我已经带你掌握了目前最常用的三种 eBPF 程序开发方法，在这里我一起总结下。</p><p>在实际的应用中，这三种方法有不同的使用场景：</p><ul>\n<li>bpftrace 通常用在<strong>快速排查和定位系统</strong>上，它支持用单行脚本的方式来快速开发并执行一个 eBPF 程序；</li>\n<li>BCC 通常用在<strong>开发复杂的 eBPF 程序</strong>中，它内置的各种小工具也是目前应用最为广泛的 eBPF 小程序；</li>\n<li>libbpf 是<strong>从内核中抽离出来的标准库</strong>，用它开发的 eBPF 程序可以直接分发执行，不再需要在每台机器上都安装 LLVM 和内核头文件。</li>\n</ul><p>通常情况下，你可以用 bpftrace 或 BCC 做一些快速原型，验证你的设计思路是不是可行，然后再切换到 libbpf ，开发完善的 eBPF 程序后再去分发执行。这样，不仅 eBPF 程序运行得更快（无需编译步骤），还避免了在运行环境中安装开发工具和内核头文件。</p><p>在不支持 BTF 的机器中，如果不想在运行 eBPF 时依赖于 LLVM 编译和内核头文件，你还可以参考内核中的&nbsp;<a href=\"https://elixir.bootlin.com/linux/v5.13/source/samples/bpf\">BPF 示例</a>，直接引用内核源码中的&nbsp;<code>tools/lib/bpf/</code>&nbsp;库，以及内核头文件中的数据结构，来开发 eBPF 程序。</p><h2><strong>思考题</strong></h2><p>今天使用 BCC 和 libbpf 开发的 eBPF 程序虽然可以正常运行，但是我相信细心的你一定发现了，它还有不少小问题，比如：</p><ul>\n<li>单个参数过长，或者总的参数数量比较多时，都会被截断，没法完整显示所有的参数列表；</li>\n<li>在调试短时进程问题时，很多情况下我们可能还需要父进程的信息，这样才能更快定位它们都是被哪些进程创建出来的。</li>\n</ul><p>学习完最近这两讲的内容，你觉得该如何解决这些问题呢？你可以在&nbsp;<a href=\"https://github.com/feiskyer/ebpf-apps/blob/main/bcc-apps/python/execsnoop.c\">execsnoop</a>&nbsp;的基础上改进，开发一个更完善的 eBPF 程序吗？欢迎在评论区和我分享你的思路和解决方法。</p><p>期待你在留言区和我讨论，也欢迎把这节课分享给你的同事、朋友。让我们一起在实战中演练，在交流中进步。</p>","neighbors":{"left":{"article_title":"07 | 内核跟踪（上）：如何查询内核中的跟踪点？","id":484207},"right":{"article_title":"09 | 用户态跟踪：如何使用 eBPF 排查应用程序？","id":484458}},"comments":[{"had_liked":false,"id":332884,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1643785035,"is_pvip":false,"replies":[{"id":"121737","content":"非常棒的答案，赞一个👍","user_name":"作者回复","comment_id":332884,"uid":"1001282","ip_address":"","utype":1,"ctime":1644117853,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"36003523403","product_id":100104501,"comment_content":"1、对于参数问题，当前 BPF 程序尝试把所有参数一次性放入，受限于栈最大长度 512，很容易出现被截断现象。以 BCC 程序为例的解决方法：遍历参数列表 argv 时，每个参数读取之后直接调用 perf_submit 提交至 ringbuf，而不是读取所有参数后仅提交一次，最后用户态程序负责把这些字符串拼接起来。这样可以做到参数最大个数不受限制，且每个参数长度可接近栈最大长度 512（当前 BPF 程序限制 64 容易被截断）。<br><br>另一个解决方式应该可以采用 perf-cpu array 映射类型，避免占用有限的栈空间，具体没尝试过。<br><br>2、以 BCC 程序为例获取父进程，struct data_t 增加 ppid 字段，然后由 task-&gt;real_parent-&gt;tgid 赋值。<br><br>struct task_struct *task;<br><br>task = (struct task_struct *)bpf_get_current_task();<br>data.ppid = task-&gt;real_parent-&gt;tgid;","like_count":8,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549599,"discussion_content":"非常棒的答案，赞一个👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644117853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1769084,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/fe/7c/2756292d.jpg","nickname":"code","note":"","ucode":"5E79F1D5C3A1CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550335,"discussion_content":"能给一个通过映射类型 突破栈最大长度限制 的example吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644486098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338208,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1647354056,"is_pvip":true,"replies":[{"id":"123956","content":"从最终部署的角度来看是的，但对入门者来说BCC更简单一些","user_name":"作者回复","comment_id":338208,"uid":"1001282","ip_address":"","utype":1,"ctime":1647958765,"user_name_real":"编辑"}],"discussion_count":4,"race_medal":0,"score":"5942321352","product_id":100104501,"comment_content":"golang + libbpf 是不是比BCC 方案更好？","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557768,"discussion_content":"从最终部署的角度来看是的，但对入门者来说BCC更简单一些","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647958765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYWRmibTZj9pb3d5ibfVQHFS9shvJmgMgtN3BM3r9qiaL5YTZSFdLvPZiaEHfBia4dFODVqw/132","nickname":"北国骑士","note":"","ucode":"AC657FCA2014ED","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559815,"discussion_content":"又看到皮总了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648986771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYWRmibTZj9pb3d5ibfVQHFS9shvJmgMgtN3BM3r9qiaL5YTZSFdLvPZiaEHfBia4dFODVqw/132","nickname":"北国骑士","note":"","ucode":"AC657FCA2014ED","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559814,"discussion_content":"又看到皮总了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648986770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1047637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYWRmibTZj9pb3d5ibfVQHFS9shvJmgMgtN3BM3r9qiaL5YTZSFdLvPZiaEHfBia4dFODVqw/132","nickname":"北国骑士","note":"","ucode":"AC657FCA2014ED","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":564042,"discussion_content":"又看到涛哥了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650150710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":559814,"ip_address":""},"score":564042,"extra":""}]}]},{"had_liked":false,"id":335251,"user_name":"不了峰","can_delete":false,"product_type":"c1","uid":1013424,"ip_address":"","ucode":"E23B96D6A3D4EC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/b0/14fec62f.jpg","comment_is_top":false,"comment_ctime":1645427027,"is_pvip":false,"replies":[{"id":"122627","content":"这个文件的内容不是自动生成的，跟C语言一样，头文件用来放类型定义和常量定义。<br><br>文件的源码见 https:&#47;&#47;github.com&#47;feiskyer&#47;ebpf-apps&#47;blob&#47;main&#47;bpf-apps&#47;execsnoop.h","user_name":"作者回复","comment_id":335251,"uid":"1001282","ip_address":"","utype":1,"ctime":1645615565,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5940394323","product_id":100104501,"comment_content":"请教一下文章中关于 「libbpf 方法」<br>为什么 文章中没有提及  execsnoop.h  这个文件。。<br>而  execsnoop.bpf.c 要 #include &quot;execsnoop.h&quot;  这个文件 ？<br> 关于  execsnoop.h  文件内容生成，是不是在前面的几章有涉及？","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552858,"discussion_content":"这个文件的内容不是自动生成的，跟C语言一样，头文件用来放类型定义和常量定义。\n\n文件的源码见 https://github.com/feiskyer/ebpf-apps/blob/main/bpf-apps/execsnoop.h","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645615565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360048,"user_name":"彭东林","can_delete":false,"product_type":"c1","uid":1252080,"ip_address":"山西","ucode":"C163053098CD91","user_header":"https://static001.geekbang.org/account/avatar/00/13/1a/f0/29721362.jpg","comment_is_top":false,"comment_ctime":1666151746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666151746","product_id":100104501,"comment_content":"老师，我在看pwru代码是看到：<br>SEC(&quot;kprobe&#47;skb-1&quot;)<br>int kprobe_skb_1(struct pt_regs *ctx) {<br>\tstruct sk_buff *skb = (struct sk_buff *) PT_REGS_PARM1(ctx);<br><br>\treturn handle_everything(skb, ctx);<br>}<br><br>SEC(&quot;kprobe&#47;skb-2&quot;)<br>int kprobe_skb_2(struct pt_regs *ctx) {<br>\tstruct sk_buff *skb = (struct sk_buff *) PT_REGS_PARM2(ctx);<br><br>\treturn handle_everything(skb, ctx);<br>}<br><br>您知道上面SEC(&quot;kprobe&#47;skb-1&quot;)是什么意思吗？从内核代码里并没有看到有&quot;skb-1&quot;这个函数","like_count":0},{"had_liked":false,"id":359006,"user_name":"宋祥","can_delete":false,"product_type":"c1","uid":2024201,"ip_address":"福建","ucode":"2C0B8C40B52A17","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJicp0Ifiax9ibAduMW3SXibfvRkhC0lpPBZ6tEn7iaXIIK0VrG2VUibO1AFq4kDvGsbNqYia5gd7ZqgMnSw/132","comment_is_top":false,"comment_ctime":1665143956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665143956","product_id":100104501,"comment_content":"对于这段代码：<br>    &#47;&#47; submit to perf event<br>    size_t len = EVENT_SIZE(event);<br>    if (len &lt;= sizeof(*event))<br>        bpf_perf_event_output(ctx, &amp;events, BPF_F_CURRENT_CPU, event,<br>                              len);<br><br><br>#define BASE_EVENT_SIZE (size_t)(&amp;((struct event*)0)-&gt;args)<br>#define EVENT_SIZE(e) (BASE_EVENT_SIZE + e-&gt;args_size)<br><br><br>有什么特殊的含义吗？为什么提交只提交EVENT_SIZE大小","like_count":0},{"had_liked":false,"id":356840,"user_name":"嘿！我的gakki","can_delete":false,"product_type":"c1","uid":1375996,"ip_address":"北京","ucode":"86ABC9754D287B","user_header":"https://static001.geekbang.org/account/avatar/00/14/fe/fc/e56c9c4a.jpg","comment_is_top":false,"comment_ctime":1662630267,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662630267","product_id":100104501,"comment_content":"老师您好，想请问下，我在代码定义 .maps 映射时，只要我加了 SEC(&quot;.maps&quot;) 最后在给 tc 去 attach 的时候就会报错：<br>struct {<br>  __uint(type, BPF_MAP_TYPE_HASH);<br>  __uint(key_size, sizeof(__u32));<br>  __uint(value_size, sizeof(__u32));<br>} events SEC(&quot;.maps&quot;); &#47;&#47; 加了这个 SEC(&quot;.maps&quot;) 下边就一定会报错<br><br><br>root@ding-test-2:~&#47;go&#47;src&#47;tmp&#47;test_c# tc filter add dev test_veth1 ingress bpf direct-action obj test.o<br>libbpf: BTF is required, but is missing or corrupted.<br>ERROR: opening BPF object file failed<br>Unable to load program<br><br><br>请问下老师知道这是什么原因导致的么？","like_count":0},{"had_liked":false,"id":347432,"user_name":"卢承灏","can_delete":false,"product_type":"c1","uid":1672266,"ip_address":"","ucode":"80805A03308CA4","user_header":"https://static001.geekbang.org/account/avatar/00/19/84/4a/50940078.jpg","comment_is_top":false,"comment_ctime":1654010892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654010892","product_id":100104501,"comment_content":"求助老师，有没有最优雅的突破512个字节的办法推荐，或者代码库供参考","like_count":0},{"had_liked":false,"id":346205,"user_name":"Geek_007","can_delete":false,"product_type":"c1","uid":1467182,"ip_address":"","ucode":"C80107538EAA7F","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/2e/e49116d1.jpg","comment_is_top":false,"comment_ctime":1652892439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652892439","product_id":100104501,"comment_content":"libbpf 例子中，vmlinux.h 是生成的，但是下面的三个头文件在哪呢，我这里报错找不到呢。。<br>#include &lt;bpf&#47;bpf_core_read.h&gt;<br>#include &lt;bpf&#47;bpf_helpers.h&gt;<br>#include &lt;bpf&#47;bpf_tracing.h&gt;","like_count":0},{"had_liked":false,"id":341694,"user_name":"CaptainZhao","can_delete":false,"product_type":"c1","uid":1062544,"ip_address":"","ucode":"5F3FB0F1B8D0EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/90/55e8cb1b.jpg","comment_is_top":false,"comment_ctime":1649772514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649772514","product_id":100104501,"comment_content":"您好，我最近尝试用iovisor&#47;gobpf写golang的bcc程序，用bcc的runqlat改成了用户态是golang的实现，考虑长时间跑可能会对cfs性能有影响，于是尝试写成每15秒开始采集，然后跑100毫秒关闭的方式。大概是bcc.NewModule -&gt; load -&gt; attach -&gt; module.Close()，但是发现内存持续地上涨，用pprof看了一下确定不是golang的内存在上涨，用memleak看了一下好像是NewModule编译阶段llvm&#47;clang很多内存没释放，这个问题该怎么解决呢？","like_count":1},{"had_liked":false,"id":338419,"user_name":"从远方过来","can_delete":false,"product_type":"c1","uid":1797551,"ip_address":"","ucode":"4791DBC7E05B1D","user_header":"","comment_is_top":false,"comment_ctime":1647492514,"is_pvip":false,"replies":[{"id":"124033","content":"有时候命令名跟syscall名字不是一致的，比如chmod命令很可能使用的是fchmodat而不是chmod系统调用","user_name":"作者回复","comment_id":338419,"uid":"1001282","ip_address":"","utype":1,"ctime":1648038559,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1647492514","product_id":100104501,"comment_content":"老师，我运行下面的代码，在另外一个shell上面执行chmod命令，但是bcc却没有输出，请问这个是什么原因?<br><br>内核版本： 4.14.15-1.el7.elrepo.x86_64<br>操作系统： CentOS Linux release 7.9.2009 (Core)<br>bcc版本：bcc-0.21.0-1.el7.x86_64<br>               bcc-tools-0.21.0-1.el7.x86_64<br>               python-bcc-0.21.0-1.el7.noarch<br><br><br>#!&#47;usr&#47;bin&#47;env python3<br># Tracing execve() system call.<br>from bcc import BPF<br>from bcc.utils import printb<br><br><br>chmod_prog = &quot;&quot;&quot;<br>&#47;* Tracing execve system call. *&#47;<br>#include &lt;uapi&#47;linux&#47;ptrace.h&gt;<br>#include &lt;linux&#47;sched.h&gt;<br>#include &lt;linux&#47;fs.h&gt;<br><br><br>&#47;&#47; perf event map (sharing data to userspace) and hash map (sharing data between tracepoints)<br>struct data_t {<br>\tu32 pid;<br>\tumode_t mode;<br>\tchar * filename;<br>};<br>BPF_PERF_OUTPUT(events);  &#47;&#47; 生成一个event事件<br>&#47;&#47; BPF_HASH(tasks, u32, struct data_t);<br><br><br>&#47;&#47; sys_enter_chmod tracepoint.<br>TRACEPOINT_PROBE(syscalls, sys_enter_chmod)<br>{<br><br><br>\tstruct data_t data = {};<br>\tu32 pid = bpf_get_current_pid_tgid();<br>\tumode_t mode = args-&gt;mode;<br>\tchar * filename = (char *)args-&gt;filename;<br>\tdata.pid = pid ;<br>\tdata.mode = mode; <br>\tdata.filename = filename;<br><br>\tevents.perf_submit(args, &amp;data, sizeof(data)); <br>\treturn 0;<br>}<br><br><br>&quot;&quot;&quot;<br><br># 1) load BPF program<br>b = BPF(text=chmod_prog)<br># b = BPF(src_file=&quot;chmod.c&quot;)<br><br># 2) print header<br>print(&quot;%-6s %-16s %-3s %s&quot; % (&quot;PID&quot;, &quot;COMM&quot;, &quot;RET&quot;, &quot;ARGS&quot;))<br><br><br># 3) define the callback for perf event<br>def print_event(cpu, data, size):<br>    # event data struct is generated from &quot;struct data_t&quot; by bcc<br>    event = b[&quot;events&quot;].event(data)<br>    printb(b&quot;%-6d %-16s %-3d&quot; % (event.pid, event.mode, event.filename))<br><br><br># 4) loop with callback to print_event<br>b[&quot;events&quot;].open_perf_buffer(print_event)<br>while 1:<br>    try:<br>        b.perf_buffer_poll()<br>    except KeyboardInterrupt:<br>        exit()<br><br><br><br><br><br>","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557991,"discussion_content":"有时候命令名跟syscall名字不是一致的，比如chmod命令很可能使用的是fchmodat而不是chmod系统调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648038559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2025073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIurXewVibKmjwSZW8JLrXuMEuxcHEZKD1fxFOctj3eR7KliceyRzsDqib0khtlVpOJTnucM9mzLsVYg/132","nickname":"黄龙","note":"","ucode":"120B05F427CB4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575238,"discussion_content":"老师，您好，filename 和 进程名，如何在ebpf程序中，转换成绝对路径呢？ 搞了几天 都没有搞定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654680653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335058,"user_name":"heyhd9475","can_delete":false,"product_type":"c1","uid":2682873,"ip_address":"","ucode":"3CDB4DC5BF0FEB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq30mvo0eATZ3Yfm5POktwic3NJSRkiagtJt1vaxyvCS22PJRm8xrulXqaLJRWQWb6zNI4zL0G2QkCA/132","comment_is_top":false,"comment_ctime":1645277292,"is_pvip":true,"replies":[{"id":"122629","content":"看起来是验证器认为它是一个无界的变量，你的内核版本和BCC版本是什么？","user_name":"作者回复","comment_id":335058,"uid":"1001282","ip_address":"","utype":1,"ctime":1645615943,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645277292","product_id":100104501,"comment_content":"老师你好，我想请问为什么每次使用bpf_probe_read_user_str()读取后不在每次读取到的参数中间加上一个空格呢，我这边尝试加这个空格，为什么会提示如下的无效无限制可变偏移量栈写入呢：<br>invalid unbounded variable-offset write to stack R2<br><br>报错的源码为: data.args[data.next_arg_index-1]=&#39; &#39;;<br>是因为bcc认为参数data.next_arg_index是没有限制范围的，不安全的吗。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552860,"discussion_content":"看起来是验证器认为它是一个无界的变量，你的内核版本和BCC版本是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645615943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334621,"user_name":"hjydxy","can_delete":false,"product_type":"c1","uid":1258714,"ip_address":"","ucode":"A1340360926734","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibYCL2nbctJDpBLwZXlKIX7Z4XUicBm1ibIbLd0dWMYibxtshnEzOWAl5LC7JgMcjSet5B30s2HUpiabhYyyFWiaWd1Q/132","comment_is_top":false,"comment_ctime":1645021343,"is_pvip":false,"replies":[{"id":"122617","content":"这是一个封装后的函数，使用起来更简单（当然直接用bpf_object__load也是没问题的)。","user_name":"作者回复","comment_id":334621,"uid":"1001282","ip_address":"","utype":1,"ctime":1645611135,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645021343","product_id":100104501,"comment_content":"老师好：<br>       在这个 execsnoop.skel.h 文件中，有一个“execsnoop_bpf__load”函数，你在说明中也说了这个函数是加载ebpf程序用的，我想请教下这个函数和&#47;samples&#47;bpf&#47;下例子中使用的“bpf_object__load”有什么区别和联系，我的理解是这两个函数的作用差不多，都是加载ebpf程序用的，既然如此，使用“execsnoop_bpf__load”的意义或者好处在哪里？谢谢。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552843,"discussion_content":"这是一个封装后的函数，使用起来更简单（当然直接用bpf_object__load也是没问题的)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645611136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333533,"user_name":"c1","can_delete":false,"product_type":"c1","uid":2658454,"ip_address":"","ucode":"27E704C694D710","user_header":"http://thirdwx.qlogo.cn/mmopen/KFgDEHIEpnT0EXnh02VHqHfsle3u6lJUYWjdOtBovSrfHyLwQcKiaicibGia2MJBX8uyicw3prPrcqWhJy9fUCCz1DVFYH0QHAYXc/132","comment_is_top":false,"comment_ctime":1644396356,"is_pvip":true,"replies":[{"id":"122039","content":"有没有引入头文件？完整的程序可以参考Github： https:&#47;&#47;github.com&#47;feiskyer&#47;ebpf-apps&#47;blob&#47;main&#47;bcc-apps&#47;python&#47;execsnoop.c#L2-L4。","user_name":"作者回复","comment_id":333533,"uid":"1001282","ip_address":"","utype":1,"ctime":1644732296,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1644396356","product_id":100104501,"comment_content":"请教：<br>Ubuntu 21.10<br>Linux u21 5.13.0-28-generic #31-Ubuntu SMP Thu Jan 13 17:41:06 UTC 2022 x86_64 x86_64 x86_64 GNU&#47;Linux<br><br>执行execsnoop.py报错：<br>...<br>&#47;virtual&#47;main.c:47:42: error: incomplete definition of type &#39;struct tracepoint__syscalls__sys_enter_execve&#39;<br>        const char **argv = (const char **)(args-&gt;argv);<br>...<br>&#47;virtual&#47;main.c:82:22: error: incomplete definition of type &#39;struct tracepoint__syscalls__sys_exit_execve&#39;<br>                data-&gt;retval = args-&gt;ret;<br>...","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550793,"discussion_content":"有没有引入头文件？完整的程序可以参考Github： https://github.com/feiskyer/ebpf-apps/blob/main/bcc-apps/python/execsnoop.c#L2-L4。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644732296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332935,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1643854693,"is_pvip":false,"replies":[{"id":"121733","content":"1. eBPF程序是在内核空间执行，可以在内核空间获得进程的上下文信息。<br>2. 这些具体的步骤可以参考 https:&#47;&#47;github.com&#47;libbpf&#47;libbpf。比如，https:&#47;&#47;github.com&#47;libbpf&#47;libbpf&#47;blob&#47;master&#47;src&#47;libbpf.c#L8599-L8675 这儿定义了所有不同程序类型所对应的 SEC 名称及挂载方式。","user_name":"作者回复","comment_id":332935,"uid":"1001282","ip_address":"","utype":1,"ctime":1644117461,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1643854693","product_id":100104501,"comment_content":"请教下老师：<br>1. bpf的辅助函数执行上下文是在当前进程下么，因为我看像execsnoop例子中get_current_pid_tgid调用能拿到的是新启动进程pid。<br>2. libbpf的开发模式能看到从编译器到bpf在背后做了很多工作，如果想了解bpf程序的实现，比如宏是如何定义了映射和挂载点，程序加载的时候如何从程序段中的信息实现的映射创建和挂载，老师能否给指一个学习路径？谢谢啦","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549593,"discussion_content":"1. eBPF程序是在内核空间执行，可以在内核空间获得进程的上下文信息。\n2. 这些具体的步骤可以参考 https://github.com/libbpf/libbpf。比如，https://github.com/libbpf/libbpf/blob/master/src/libbpf.c#L8599-L8675 这儿定义了所有不同程序类型所对应的 SEC 名称及挂载方式。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644117461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1065272,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","nickname":"写点啥呢","note":"","ucode":"C19032CF1C41BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":549602,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644119436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":549593,"ip_address":""},"score":549602,"extra":""}]}]},{"had_liked":false,"id":332934,"user_name":"Haric","can_delete":false,"product_type":"c1","uid":1317508,"ip_address":"","ucode":"E2E7977ECC83A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/1a/84/c6316817.jpg","comment_is_top":false,"comment_ctime":1643850673,"is_pvip":false,"replies":[{"id":"121734","content":"如果内核也支持BTF的话，理论上应该是可以运行的；但如果内核版本比较旧的话，可能不支持BTF，这时候可以使用条件编译的方式，为旧版本内核关闭BTF。","user_name":"作者回复","comment_id":332934,"uid":"1001282","ip_address":"","utype":1,"ctime":1644117537,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1643850673","product_id":100104501,"comment_content":"文章提到，使用libbfp方式在开启了 BTF 的其他机器都可以运行，请问在嵌入式设备（需要交叉编译）能运行吗？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549594,"discussion_content":"如果内核也支持BTF的话，理论上应该是可以运行的；但如果内核版本比较旧的话，可能不支持BTF，这时候可以使用条件编译的方式，为旧版本内核关闭BTF。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644117537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}