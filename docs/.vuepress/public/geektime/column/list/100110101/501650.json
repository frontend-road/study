{"id":501650,"title":"03｜Style：关于样式你需要知道的三件事","content":"<p>你好，我是蒋宏伟。</p><p>上一讲我们说到，搭建页面的第一步是搭建静态页面，拿到设计稿后要从上往下拆成组件，再从下往上把组件进行实现。</p><p>但组件只是页面的架子。如果你不使用任何样式，组件只能遵循默认的布局规则、默认字号颜色，铺在屏幕上，看起来就像调试的 log 信息一样，也没有什么体验可言。</p><p>俗话说人靠衣装、佛靠金装，页面体验要好就离不开样式的帮助。大家对 App 的第一印象，就是对页面样式的第一印象。虽说样式设计上是由设计师负责，但最终落地还得靠代码。如何把设计师给的设计稿在不同大小的机型上还原实现，通过验收，是工作中实实在在要面对的考验。</p><p>还原设计稿还只是最基本的要求，作为开发者，你还得要关心开发成本、可维护性、布局性能等事情。比如，有哪些样式库可以节约开发成本？代码量大了需求有变动，样式怎么改起来更方便？React Native 的布局性能究竟怎样，多层嵌套的复杂布局会不会导致性能问题？</p><p>所以今天，围绕着上面这些话题，我和你一起聊聊，关于样式你需要知道的三件事：</p><ul>\n<li>React Native 组件样式都有哪些？</li>\n<li>React Native 的 Flex 布局有哪些特点？</li>\n<li>React Native 样式代码如何管理？</li>\n</ul><h2>组件样式 = 通用样式 + “私有”样式</h2><!-- [[[read_end]]] --><p>我们先来说说，React Native 组件样式都有哪些。</p><p>还原设计稿离不开样式的支持，样式决定了组件在屏幕中的样子。大部分 React Native 提供的框架组件都有样式属性，也就是 style 属性。比如，你要改变文字的颜色，就需要给 Text 组件的 style 属性传一个 <code>{color: 'red'}</code> 对象。如果要设置文字一个圆角边框，那就要稍微复杂一点了，需要三个样式值：边框颜色 borderColor、边框宽度 borderWidth、边框半径 borderRadius，比如这段示例代码：</p><pre><code class=\"language-plain\">// 文字颜色\n&lt;Text style={{color:'red'}}&gt;\n// 圆角边框 \n&lt;Text style={{borderColor:'green', borderWidth: 1, borderRadius: 5}}&gt;  \n</code></pre><p>不过，不同组件的支持的样式可能会有些不同。比如，上面这段代码中，文字颜色 color 只有 Text 和 TextInput 组件有，图片组件  Image 没有文字也不需要 color 样式。而边框样式 border*（比如 borderColor、borderWidth、boderRadius 等等），容器组件 View、文字组件 Text、图片组件 Image 都有。</p><p>那我们怎么知道哪个组件都有哪些样式？要死记硬背吗？当然不用。</p><p>一方面，通过 TypeScript 声明文件，编辑器会提醒你某个组件都有哪些样式。另一方面，React Native 的组件样式是有规则的，你只需要把那些高频样式用会就可以了，其他低频样式，等要用到的时候再翻文档也不迟。</p><p>组件样式是有继承关系的，可以分为三层：</p><ul>\n<li>第一层是通用样式；</li>\n<li>第二层是 View 组件样式；</li>\n<li>第三层是 Text、Image 等其他组件样式。</li>\n</ul><p>我把组件样式的三层继承规则整理成了一张图片，相信你看完之后会有更深刻的理解：</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/9c/2d0dbe2764f676b3bac28330b7ba969c.jpg?wh=1920x1047\" alt=\"图片\"></p><p>通用样式包括布局 Layout、变换 Transform 和阴影 Shadow。容器组件要不要展示归布局 Layout 管，位置确定后要往左边挪点还是旋转个角度归变换 Transform 管，要立体感要加个阴影归 Shadow 管。</p><p>View 组件样式继承了所有通用样式，包括布局 Layout、变换 Transform、阴影 Shadow，除此之外，还有自己的“私有”样式，比如背景颜色 backgroundColor、透明度 opacity、背面可见 backfaceVisibility。另外，Android API 28 以下用的阴影属性 elevation 也是 View 的“私有”样式，为了记忆方便，你也可以将其归类到阴影 Shadow 上。</p><p>大部分组件，比如 Text、Image 组件，都继承了 View 组件样式。因此 View 组件的背景色 backgroundColor、Android 低版本阴影 elevation 等“私有”样式，其实也可以算作通用样式。</p><p>但 Text 组件、Image 组件的“私有”样式，就不能相互通用了。文字颜色 color、字体大小 fontSize、文字行高 lineHeight，这些是文字组件独有的，图片组件就不能用。图片大小模型样式 resizeMode 是图片独有的，文字组件也不能用。</p><p>简而言之，组件样式 = 通用样式 + “私有”样式，View 组件样式可以算作通用样式，而Text 和 Image 组件各有各的“私有”样式。</p><h2>Flex：跨平台、高性能、易上手</h2><p>在所有样式中，你用的最多一定是布局样式（Layout），而布局样式中大部分都是 Flex 相关的弹性布局。</p><p>React Native 在 2015 年诞生之初，就选择使用 Flex 作为默认的布局方式，到现在为止也仅仅只支持了 Flex 弹性盒子布局和 Absolute 绝对定位这两种布局方法。而 Flex 这种布局方式，也经受住了时间的考验，得到更多开发者的认同。</p><p>Flex 布局有三个特点：<strong>跨平台</strong>、<strong>高性能</strong>、<strong>易上手</strong>。</p><p>首先 Flex 布局是跨平台的，这里说的跨平台有两层含义。第一层含义是 Flex 布局并不是 React Native 所独有的，在 Web、Android、iOS 平台也都在用，Flex 布局知识的可迁移性很强。无论是前端开发还是客户端开发，你在你当前领域掌握的 Flex 知识，可以直接拿到 React Native 上用，反之亦然。</p><p>跨平台的第二层含义是，React Native 的布局引擎 Yoga 是 Android、iOS 通用的。你给组件写的 Flex 布局代码，最终都会被 Yoga 引擎计算为精确的坐标系，然后按照计算后的坐标系把组件渲染到屏幕上，这个布局计算在双端是一致。</p><p>有些同学写代码的时候，可能一开始就担心，“这么写是不是会嵌套太深了，会不会引起布局性能问题？”，“设计师给的布局太复杂了，性能会不会不好啊？”。其实这些性能问题大可不必担心，正常写就行，Flex 布局用的 Yoga 引擎性能很好。</p><p>我这里放了一张布局引擎性能对比图，图片来源于 Github 开源仓库<a href=\"https://github.com/layoutBox/LayoutFrameworkBenchmark\"> 《Layout Framework Benchmark》</a>。核心代码贡献者 Luc Dion 是一位 iOS 开发工程，他用 100 次 UICollectionView 布局耗时作为基准，横向对比了多款 iOS 布局引擎性能。其中就包括由苹果官方提供了 UIStackViews 和 Auto layout 布局引擎，还有使用 Yoga 实现 FlexLayout 布局引擎。</p><p><img src=\"https://static001.geekbang.org/resource/image/61/f7/612209db97553841a1d49bf207e7eef7.png?wh=1000x736\" alt=\"图片\"></p><p>在图中你可以看出，虽然 iPhone 每代的性能越来越好，100 次 UICollectionView 的布局耗时越来越少。但从框架性能角度看，<strong>使用 Yoga 实现的FlexLayout 布局引擎比苹果官方提供了 UIStackViews 和 Auto layout 布局引擎，耗时减少了将近一个量级。</strong></p><p>这样看来，React Native 中的 Flex 布局确实是挺好的，那上手难不难？不难，易学易用，上手就会。</p><p>前面我们也提到过，Flex 其实是一种通用的布局方式，它引入了弹性布局的概念，这个概念在各平台都是一样的。但在具体的写法上，各个平台可能会有一些差异。</p><p>我用最常见三种布局给你举些例子，它们包括从上往下排列布局、左图右文布局、文字居中布局。你可以感受一下，React Native 的 Flex 布局，和你在其他平台使用过的 Flex 布局有什么差异。</p><p><strong>第一个例子，从上往下排列布局。</strong></p><p>在同一个父容器中，放三个子容器 View，父容器不写任何的样式，子容器只给一个固定高度，三个子容器就是从上往下排列的。</p><p>这里强调一下，父容器 VIew 的默认样式是<code>{display: \"flex\",flexDirection:'column'}</code>。也就是说，父容器是弹性盒子，且主轴是纵轴，子元素会沿着纵轴（主轴）方向排列，因此在父元素不写任何样式时，子元素是从上往下排列的。</p><p>示例代码如下：</p><pre><code class=\"language-plain\">&lt;View&gt;\n  &lt;View style={{height: 50, backgroundColor: 'powderblue'}} /&gt;\n  &lt;View style={{height: 50, backgroundColor: 'skyblue'}} /&gt;\n  &lt;View style={{height: 50, backgroundColor: 'steelblue'}} /&gt;\n&lt;/View&gt;\n</code></pre><p><strong>第二个例子，左图右文布局。</strong></p><p>在同一个父容器中，放一个 Image 和一个 Text。为了让图片文字左右排列，我们需要给父容器设置布局样式<code>{flexDirection: 'row'}</code>。为了让图片不拉伸变形，我们需要给图片 Image 设置一个固定宽高。为了让文字将剩余宽度铺满，我们需要给文字 Text 设置 <code>{flex: 1}</code>。这时，父容器的主轴是横轴，子元素会沿着横轴（主轴）方向排列，整体布局是左图右文。具体的代码如下：</p><pre><code class=\"language-plain\">&lt;View style={{flexDirection: 'row'}}&gt;\n  &lt;Image\n    style={{width: 100, height: 100}}\n    source={{\n    uri: 'https://placeimg.com/640/480/cats',\n  }}\n  /&gt;\n  &lt;Text style={{flex: 1,fontSize: 18}}&gt;我是文字&lt;/Text&gt;\n&lt;/View&gt;\n</code></pre><p><strong>第三个例子，文字居中布局。</strong></p><p>曾经有一道经典的面试题，“父容器高度确定，使其子元素 Text 水平垂直方向居中”，不过自从有了 flex 后，这道题的难度降低了很多，问的频率也变低了。</p><p>我们通过 alignItems 和  justifyContent 的配合，很容易实现水平垂直方向的居中布局，示例代码如下：</p><pre><code class=\"language-plain\">&lt;View\n    style={{\n      alignItems: 'center',\n      justifyContent: 'center',\n      // 高度确定\n      height: 60,\n      borderWidth: 1,\n    }}&gt;\n    &lt;Text\n      style={{\n        fontSize: 18,\n        // 文字默认内边距，会导致垂直居中偏下\n        includeFontPadding: false,\n        // 文字默认基于基线对齐，会导致垂直居中偏下\n        textAlignVertical: 'center',\n      }}&gt;\n    我是文字1\n    &lt;/Text&gt;\n&lt;/View&gt;\n</code></pre><p>在这段代码中，你只需要给父容器设置<code>{justifyContent: 'center',alignItems: 'center'}</code>，使子元素分别在主轴（纵轴）和副轴（横轴）方向居中就可以了。这里有个小细节，Android 文字默认会有内边距且基于基线对齐，这会导致文字垂直居中时偏下。<strong>因此垂直居中时，最好把内边距关掉，并把文字放在中线而不是基线上。</strong></p><p>当然，文字水平垂直方向居中，除了 Flex 方案，还有行高方案，感兴趣的同学也可以自己研究一下，这里就不再介绍了。</p><p>讲完这三个例子后，你是否发现 React Native 与你所熟悉的其他平台，在 Flex 布局上的不同点了呢？你可以在心里对照一下，这样做能帮你学得更快。</p><h2>StyleSheet：分离、复用、性能好</h2><p>在前面的几个例子中，我们写样式用的都是内联的方式。内联样式就是直接在 JSX 的元素属性中写样式，这样写起来是很方便，但是却把 JSX 的元素结构和样式混在一起了。</p><p>既然样式属性可以内联，那事件属性也可以内联，甚至所有的属性都可以内联。而且现在 JSX 模板既要声明元素结构，又要写样式、事件、属性逻辑，整一个大杂烩。写起来是很爽，但维护起来就很“酸爽”了。</p><p>此外，内联样式还存在不能复用，性能损耗的问题。首先，即便两个文字组件的样式是一样的，内联样式也不能重复使用，必须在两个组件中各写一套。其次，每次执行自定义组件函数生成元素时，或实例化元素时，样式对象都要重复创建，这导致了性能损耗。你可以看看这段示例代码感受一下：</p><pre><code class=\"language-plain\">// 各种内联，导致 JSX 结构不清楚。\n&lt;View\n      // 普通属性\n      hitSlop={\n      top: 10,\n      bottom: 10,\n      left: 0,\n      right: 0\n    }\n      // 事件属性\n      onLayout={() =&gt; {\n      // 事件逻辑\n      }}\n      // 样式属性\n    style={{\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: 60,\n      borderWidth: 1,\n    }}&gt;\n    &lt;Text\n      style={{\n        fontSize: 18,\n        includeFontPadding: false,\n        textAlignVertical: 'center',\n      }}&gt;\n    我是文字1\n    &lt;/Text&gt;\n    &lt;Text\n      style={{\n        fontSize: 18,\n        includeFontPadding: false,\n        textAlignVertical: 'center',\n      }}&gt;\n    我是文字2\n    &lt;/Text&gt;\n&lt;/View&gt;\n</code></pre><p>所以，我推荐你使用样式表 StyleSheet 来写样式，而不是内联的方式。使用样式表 StyleSheet 有三个好处：</p><ul>\n<li>元素结构和样式分离，可维护性更好；</li>\n<li>样式对象可以复用，能减少重复代码；</li>\n<li>样式对象只创建一次，也减少性能的损耗。</li>\n</ul><p>比如，面对上面这种大杂烩的代码，你可以试着把内联样式等属性抽离出来，没有了冗余的样式和属性，我们一眼就能看出原本的 JSX 结构：</p><pre><code class=\"language-plain\">// JSX 结构\n&lt;View\n      hitSlop={hitSlop}\n      onLayout={handleLayout}\n    style={styles.container}&gt;\n    &lt;Text style={styles.texts}&gt;我是文字1&lt;/Text&gt;\n    &lt;Text style={styles.texts}&gt;我是文字2&lt;/Text&gt;\n&lt;/View&gt;\n\n// 样式表\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 60,\n    borderWidth: 1,\n  },\n  texts: {\n    fontSize: 18,\n    includeFontPadding: false,\n    textAlignVertical: 'center',\n  }\n});\n</code></pre><p>你看，这是一个容器组件 View 嵌套了两个文字组件 Text。样式结构分离后，逻辑也更加清晰，维护起来也会容易很多。</p><p>而且，在这段代码中，两个 Text 组件使用了同一个样式对象 <code>styles.texts</code>，也实现了复用。样式对象在代码初始化时就创建好了，每次执行就不用再创建了，这样减少了性能损耗。</p><h2>课程小结</h2><p>我们前面说了，样式决定了页面的“颜值”，关于样式你需要知道这三件事：</p><ol>\n<li>大部分框架提供的组件都有自己的样式属性 style，包括通用样式和“私有”样式。其中 View 组件样式可以看做通用样式，而 Text 组件、Image 组件各有各的“私有”样式；</li>\n<li>在所有样式中，最常用的是 Flex 布局，也是你的学习重点。React Native 的 Flex 布局和其他平台的 Flex 布局模型基本相同，如果你有过 Flex 的使用经验，只需结合示例掌握 React Native 中的那些不同点就能快学会；</li>\n<li>内联样式写 Demo 是没有问题的，但在实际的生产中我更加推荐你使用样式表 StyleSheet 来进行样式管理。</li>\n</ol><p>React Native 的样式大都是从 Web 中借鉴过来的，并且还进行了“CSS in JS”的改良，相信你学起来会非常快。</p><p>如果你问我学习样式还有什么技巧，那我会告诉你，无他，唯手熟尔。只要多多练习就能学好。学习样式不需要严格的推理逻辑，需要的只有勤加实践，当初我入门的时候，就是通过模仿国内电商的官网，把样式给打通关的，你也赶紧试试吧。</p><h2>补充材料</h2><p><strong>样式学习材料：</strong>React Native 的样式其实很简单，所有的核心样式在的源码中只有 1 份声明文件<a href=\"https://github.com/facebook/react-native/blob/8bd3edec88148d0ab1f225d2119435681fbbba33/Libraries/StyleSheet/StyleSheetTypes.js\">StyleSheetTypes</a>。这一份声明文件对应的是官网的 6 篇文档：<a href=\"https://reactnative.dev/docs/view-style-props\">View Style Props</a>、<a href=\"https://reactnative.dev/docs/text-style-props\">Text Style Props</a>、<a href=\"https://reactnative.dev/docs/image-style-props\">Image Style Props</a>、<a href=\"https://reactnative.dev/docs/layout-props\">Layout Props</a>、<a href=\"https://reactnative.dev/docs/shadow-props\">Shadow Props</a>、<a href=\"https://reactnative.dev/docs/transforms\">Transforms</a>。</p><p><strong>Flex 学习材料</strong>：Yoga 官网提供了 Flex 弹性盒子布局的在线试用应用 <a href=\"https://yogalayout.com/playground\">Playground</a>，你可以动手把玩一下。React Native 官网也为你提供了沙盒环境的相关 <a href=\"https://reactnative.dev/docs/flexbox\">Demo</a>。</p><p><strong>样式管理资料</strong>：今天只介绍了<a href=\"https://reactnative.dev/docs/stylesheet\">样式表 StyleSheet</a>这种最基础的样式管理方案。业内主流的方案还有<a href=\"https://styled-components.com/\">带样式的组件 styledComponent</a> 和<a href=\"https://tailwindcss.com/\">样式简写方案 tailwind</a>，它们虽然是源自浏览器的 CSS 管理方案，但也可以在 React Native 中使用。在推特上也有关于样式管理方案的<a href=\"https://twitter.com/mrousavy/status/1474135375555743750\">讨论</a>，你可以看看大家的看法是什么。业务代码的样式管理没有银弹，选择适合你的就好了。</p><p><a href=\"https://github.com/jiangleo/react-native-classroom/tree/main/src/03_StyleSheet\">今天的 Demo 在这里！</a></p><h2>作业</h2><ol>\n<li>请你使用 View、Text、Image 组件实现一个简易版的瀑布流布局，类似于京东、淘宝首页瀑布流列表，不要求能够无限滚动只要能实现左右等宽、不等高的布局即可。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/36/88/361a7df40bc2a671336fcf44ca560388.png?wh=1170x1140\" alt=\"图片\"></p><ol start=\"2\">\n<li>如果你要给 Text 组件设置全局的默认样式，比如字体，你会怎么设置？</li>\n</ol><p>欢迎在评论区写下你的想法。我是蒋宏伟，咱们下节课见。</p>","neighbors":{"left":{"article_title":"02｜Component：搭建静态页面的正确思路是什么？","id":500633},"right":{"article_title":"04｜State：如何让页面“动”起来？","id":503115}},"comments":[{"had_liked":false,"id":341915,"user_name":"AEPKILL","can_delete":false,"product_type":"c1","uid":1953977,"ip_address":"","ucode":"42443112F5846E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/d0/b9/4870af0b.jpg","comment_is_top":false,"comment_ctime":1649917363,"is_pvip":false,"replies":[{"id":125009,"content":"正确答案👍\n\n这种方案确实是  hack，但好用。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1649995154,"ip_address":"","comment_id":341915,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"设置 Text 默认样式之前我们用的非常 hack 的方案，是这样写的:\n```tsx\n&#47;&#47; fix: 安卓 Text 组件的文字会被截断\n&#47;&#47; issue: https:&#47;&#47;github.com&#47;facebook&#47;react-native&#47;issues&#47;15114\nif (RN.Platform.OS === &#39;android&#39;) {\n  const defaultFontFamily = {\n    fontFamily: &#39;&#39;,\n    &#47;&#47; fix: 部分安卓机器上的主题会设置系统字体颜色为白色\n    color: &#39;#000&#39;,\n  };\n  const OldTextRender = (RN.Text as any).render;\n  (RN.Text as any).render = (props: any, ref: any) =&gt; {\n    const {style} = props;\n    return OldTextRender(\n      {\n        ...props,\n        style: RN.StyleSheet.compose(defaultFontFamily, style),\n      },\n      ref\n    );\n  };\n}\n\n```\n\n","like_count":11,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563443,"discussion_content":"正确答案👍\n\n这种方案确实是  hack，但好用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649995154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274174,"avatar":"","nickname":"Geek_ce9101","note":"","ucode":"818FB7272EA27B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574586,"discussion_content":"我看这个 issues 是好几年前的了，这么外官方一直没修复吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1654161309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346721,"user_name":"大神博士","can_delete":false,"product_type":"c1","uid":1195144,"ip_address":"","ucode":"8C4318095949F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/88/6bef27d6.jpg","comment_is_top":false,"comment_ctime":1653381168,"is_pvip":false,"replies":[{"id":126739,"content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1654255424,"ip_address":"","comment_id":346721,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"includeFontPadding: false, textAlignVertical: &#39;center&#39;,\n\n这是说的android 字体居中的问题的处理吗","like_count":1,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574692,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654255424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341914,"user_name":"AEPKILL","can_delete":false,"product_type":"c1","uid":1953977,"ip_address":"","ucode":"42443112F5846E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/d0/b9/4870af0b.jpg","comment_is_top":false,"comment_ctime":1649916743,"is_pvip":false,"replies":[{"id":125008,"content":"React Native 没有 float 布局，是有 flex 布局，可以通过 flexDirection: &#39;row&#39; 模拟类似图文左右布局的效果，但不能完全实现和 Web 一样的  float:left。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1649994854,"ip_address":"","comment_id":341914,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"请问该如何实现图文混排类似 float: left 这种效果?","like_count":1,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563438,"discussion_content":"React Native 没有 float 布局，是有 flex 布局，可以通过 flexDirection: &#39;row&#39; 模拟类似图文左右布局的效果，但不能完全实现和 Web 一样的  float:left。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649994855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343642,"user_name":"Archer_Shu","can_delete":false,"product_type":"c1","uid":2981085,"ip_address":"","ucode":"28B4B7F02B44FF","user_header":"https://static001.geekbang.org/account/avatar/00/2d/7c/dd/21ab7107.jpg","comment_is_top":false,"comment_ctime":1650964416,"is_pvip":false,"replies":[{"id":125612,"content":"关键看业务 toB 的好复用，toC 的不好复用。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1651208224,"ip_address":"","comment_id":343642,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"设计部门如果缺失开发背景，设计的组件属性不统一（比如文字标题使用多种字体和颜色），导致更多时候只能使用绝对定位。开发和QA也因此难以使用可复用的样式。最终也就导致了代码的冗长以及难以维护。","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568716,"discussion_content":"关键看业务 toB 的好复用，toC 的不好复用。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1651208224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342193,"user_name":"yuxizhe","can_delete":false,"product_type":"c1","uid":1338801,"ip_address":"","ucode":"535BC34222AEF7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ergUHnv5Vl1G10iaSiaGZ2FDJ4f3qCAWvQzLRkmxLAtfMPuDial5fI8tjSOsMNMicUMAeQKTibEbx71EbA/132","comment_is_top":false,"comment_ctime":1650095401,"is_pvip":false,"replies":[{"id":125180,"content":"现在的计算机处理能力很强，类似这种很小的运算逻辑，它都不会带来性能的问题。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1650416539,"ip_address":"","comment_id":342193,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"请问 Text 组件设置全局默认样式，一般是用组件进行封装，相当于每个Text都会重新调用 StyleSheet 来生成样式，会有性能问题么？","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565184,"discussion_content":"现在的计算机处理能力很强，类似这种很小的运算逻辑，它都不会带来性能的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650416539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341870,"user_name":"hawksun","can_delete":false,"product_type":"c1","uid":2614134,"ip_address":"","ucode":"FF229EBA9FA837","user_header":"https://static001.geekbang.org/account/avatar/00/27/e3/76/4c8da01e.jpg","comment_is_top":false,"comment_ctime":1649894802,"is_pvip":false,"replies":[{"id":124891,"content":"RN 很少有机型适配问题，一般遇到了再解决。常见的适配问题是厂商反馈的折叠屏问题。","user_name":"作者回复","user_name_real":"编辑","uid":1088541,"ctime":1649906989,"ip_address":"","comment_id":341870,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"写样式的时候怎么处理不同机型适配的问题呢？","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562912,"discussion_content":"RN 很少有机型适配问题，一般遇到了再解决。常见的适配问题是厂商反馈的折叠屏问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649906989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2614134,"avatar":"https://static001.geekbang.org/account/avatar/00/27/e3/76/4c8da01e.jpg","nickname":"hawksun","note":"","ucode":"FF229EBA9FA837","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":562927,"discussion_content":"拿到750尺寸的设计稿后，针对width和height需要考虑px转dp吗？怎么做到按px尺寸进行开发，而不需要对每个宽高进行px转dp处理？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649908732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562912,"ip_address":"","group_id":0},"score":562927,"extra":""}]}]},{"had_liked":false,"id":350468,"user_name":"大神博士","can_delete":false,"product_type":"c1","uid":1195144,"ip_address":"","ucode":"8C4318095949F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/88/6bef27d6.jpg","comment_is_top":false,"comment_ctime":1656928664,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"作业2:\n方法1. 封装通用 Text 组件\n方法2: 重写 Text 组件的 Render 方法","like_count":2},{"had_liked":false,"id":340349,"user_name":"Geek_e4a05b","can_delete":false,"product_type":"c1","uid":1093010,"ip_address":"","ucode":"C87428F72AF63B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ad/92/98a1fd3c.jpg","comment_is_top":false,"comment_ctime":1648776303,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"瀑布流目前开源的MasonryList使用的是Flatlist嵌套左右两个Flatlist方式。这种方式在数据变多快速滑动情况下白屏现象严重，请问老师有什么好的实现方式吗？","like_count":1,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559565,"discussion_content":"我会在我的课程的 08 讲中介绍 RecyclerListView 的使用，11 讲中讲解如使用 RecyclerListView 实现瀑布流，12 讲中介绍如何实现一个瀑布流+金刚区（Icons）的简易电商首页。敬请期待。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648817567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1395511,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4b/37/97caebe6.jpg","nickname":"D先生","note":"","ucode":"B8E1727D04375F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559503,"discussion_content":"recyclerlistview，现在高性能列表只推荐这个","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648800762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394438,"user_name":"稀饭","can_delete":false,"product_type":"c1","uid":1193462,"ip_address":"上海","ucode":"0EA94C6E98BD73","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/f6/fc3881e7.jpg","comment_is_top":false,"comment_ctime":1726803213,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"作业一没有参考答案吗？","like_count":0},{"had_liked":false,"id":375838,"user_name":"Geek_cf32ac","can_delete":false,"product_type":"c1","uid":3599406,"ip_address":"上海","ucode":"24E0E01C25C157","user_header":"","comment_is_top":false,"comment_ctime":1686044861,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100110101,"comment_content":"使用 React Native 提供的 &quot;Text.defaultProps&quot; 属性。这个属性允许设置 Text 组件的默认属性，包括样式。\nimport { Text } from &#39;react-native&#39;;\n\nText.defaultProps = Text.defaultProps || {};\nText.defaultProps.style = { fontFamily: &#39;Arial&#39;, fontSize: 16 };","like_count":0},{"had_liked":false,"id":369005,"user_name":"风会停息","can_delete":false,"product_type":"c1","uid":1729192,"ip_address":"上海","ucode":"8047AE0948D14E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/62/a8/05dee453.jpg","comment_is_top":false,"comment_ctime":1676990915,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"老师您好，我想问下，RN的原理不是相当于说  用JS描述ui然后底层其实是映射的原生api去实现的吗，原生的api再去进行渲染绘制，也就是说最后运行的时候Android还是绘制的原生View 使用Android的引擎 ios也一样用ios的引擎，那么为什么还说React Native 的布局引擎 Yoga， 是 Android、iOS 通用的，如何做到的呢？","like_count":0,"discussions":[{"author":{"id":1112050,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/f2/83aee314.jpg","nickname":"ypy","note":"","ucode":"4BEAA42E9975C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623822,"discussion_content":"yoga 是一套跨平台的布局方案，虽然在双端使用原生视图渲染，但是布局计算并不是用的原声方案 layout 和 render 是不同的阶段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689863113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359670,"user_name":"王昭策","can_delete":false,"product_type":"c1","uid":2877237,"ip_address":"山东","ucode":"E05401083249F7","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e7/35/ba2cc0d7.jpg","comment_is_top":false,"comment_ctime":1665739748,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"学完react的直接来听老师的这些课可以吗？","like_count":0},{"had_liked":false,"id":349684,"user_name":"黄金分割","can_delete":false,"product_type":"c1","uid":1003398,"ip_address":"","ucode":"8731E0BB38E925","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/86/ba472895.jpg","comment_is_top":false,"comment_ctime":1656228538,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"关于第二个问题, 我们不能直接简单的直接使用react native自带的text组件, 需要对text进行封装.\n这里需要和ui同事沟通好, 定制统一的字体, 字重, 大小的规格.\n在自己的text组件中自己枚举所有的规格参数.\n使用时直接根据ui的规格引用自己的规格参数即可.","like_count":0},{"had_liked":false,"id":349431,"user_name":"浩明啦","can_delete":false,"product_type":"c1","uid":1377422,"ip_address":"","ucode":"120ED8FC45B992","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/8e/e75ecc5e.jpg","comment_is_top":false,"comment_ctime":1655966544,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"老师，使用tailwind 来写会不会更好维护呢","like_count":0},{"had_liked":false,"id":344989,"user_name":"小天儿","can_delete":false,"product_type":"c1","uid":2322128,"ip_address":"","ucode":"F29533891584E3","user_header":"https://static001.geekbang.org/account/avatar/00/23/6e/d0/6875ea5a.jpg","comment_is_top":false,"comment_ctime":1651915746,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"老师，我是初学者，抱歉，这个作业想了很久还是没想出来如何实现，`Image`组件在使用的时候好像必须指定固定宽高，否则图片就不显示了，这个到底是怎么做到的呀","like_count":0,"discussions":[{"author":{"id":2322128,"avatar":"https://static001.geekbang.org/account/avatar/00/23/6e/d0/6875ea5a.jpg","nickname":"小天儿","note":"","ucode":"F29533891584E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571115,"discussion_content":"已经解决啦，在外层的 `View` 组件上添加 `onLayout` 事件监听变化，在 `width` 变化时执行副作用处理，图片是预先缓存的，按照比例进行转化得到对应的显示高度","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652075513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340871,"user_name":"一方天涯","can_delete":false,"product_type":"c1","uid":1380293,"ip_address":"","ucode":"74A6774B36A423","user_header":"https://static001.geekbang.org/account/avatar/00/15/0f/c5/a64b3217.jpg","comment_is_top":false,"comment_ctime":1649208321,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"如果你要给 Text 组件设置全局的默认样式，比如字体，你会怎么设置？\n项目中恰好有这个需求，本来打算重写Text.render方法，然而很奇怪重写的render不生效，最后只能自定义一个Text解决……","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560182,"discussion_content":"非常好的思路。\n再试试，是可以实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649222379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340503,"user_name":"yuxizhe","can_delete":false,"product_type":"c1","uid":1338801,"ip_address":"","ucode":"535BC34222AEF7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ergUHnv5Vl1G10iaSiaGZ2FDJ4f3qCAWvQzLRkmxLAtfMPuDial5fI8tjSOsMNMicUMAeQKTibEbx71EbA/132","comment_is_top":false,"comment_ctime":1648866813,"is_pvip":false,"replies":null,"discussion_count":4,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"请问 inline-block 行内元素怎么实现呢？比如多行文字内加个有样式的tag ，很麻烦。Text也不支持margin","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559849,"discussion_content":"&lt;Text&gt;       \n  &lt;Text&gt;给点&lt;/Text&gt;\n  &lt;Text style={{letterSpacing: 100}}&gt; &lt;/Text&gt; // 中间有个空格文字\n  &lt;Text&gt;空间&lt;/Text&gt;\n&lt;/Text&gt;\n\n嵌套文字，类似于 web 中的 inline 模型，但嵌套文字实际并没有盒模型width/height/margin/padding 等相关属性就是纯文字，对于这种情况我想到的解决方案只有在中间加“伪空格文字”，并给空格设置一个 letterSpacing 文字间距。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648998407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1338801,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ergUHnv5Vl1G10iaSiaGZ2FDJ4f3qCAWvQzLRkmxLAtfMPuDial5fI8tjSOsMNMicUMAeQKTibEbx71EbA/132","nickname":"yuxizhe","note":"","ucode":"535BC34222AEF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":560191,"discussion_content":"赞 letterSpacing 可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649225203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":559849,"ip_address":"","group_id":0},"score":560191,"extra":""}]},{"author":{"id":2958680,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/25/58/9cc7e45e.jpg","nickname":"大猪蹄子","note":"","ucode":"3DA5097391F9F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559806,"discussion_content":"Text支持margin呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648981065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1338801,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ergUHnv5Vl1G10iaSiaGZ2FDJ4f3qCAWvQzLRkmxLAtfMPuDial5fI8tjSOsMNMicUMAeQKTibEbx71EbA/132","nickname":"yuxizhe","note":"","ucode":"535BC34222AEF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2958680,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/25/58/9cc7e45e.jpg","nickname":"大猪蹄子","note":"","ucode":"3DA5097391F9F6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559813,"discussion_content":"说的是行内元素，就是Text 里嵌套Text时，里面的Text不支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648986398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":559806,"ip_address":"","group_id":0},"score":559813,"extra":""}]}]},{"had_liked":false,"id":340402,"user_name":"D先生","can_delete":false,"product_type":"c1","uid":1395511,"ip_address":"","ucode":"B8E1727D04375F","user_header":"https://static001.geekbang.org/account/avatar/00/15/4b/37/97caebe6.jpg","comment_is_top":false,"comment_ctime":1648800826,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100110101,"comment_content":"设置全局默认样式的话，我会默认封装一个MyText组件，然后内置一些样式，同时提供通过props覆盖默认样式的能力","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559851,"discussion_content":"是一种实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648998636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}