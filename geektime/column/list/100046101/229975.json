{"id":229975,"title":"15 | ZAB协议：如何实现操作的顺序性？","content":"<p>你好，我是韩健。</p><p>很多同学应该使用过ZooKeeper，它是一个开源的分布式协调服务，比如你可以用它进行配置管理、名字服务等等。在ZooKeeper中，数据是以节点的形式存储的。如果你要用ZooKeeper做配置管理，那么就需要在里面创建指定配置，假设创建节点\"/geekbang\"和\"/geekbang/time\"，步骤如下：</p><pre><code>[zk: 192.168.0.10:2181(CONNECTED) 0] create /geekbang 123\nCreated /geekbang\n[zk: 192.168.0.10:2181(CONNECTED) 1] create /geekbang/time 456\nCreated /geekbang/time\n</code></pre><p>我们分别创建了配置\"/geekbang\"和\"/geekbang/time\"，对应的值分别为123和456。那么在这里我提个问题：你觉得在ZooKeeper中，能用兰伯特的Multi-Paxos实现各节点数据的共识和一致吗？</p><p>当然不行。因为兰伯特的Multi-Paxos，虽然能保证达成共识后的值不再改变，但它不关心达成共识的值是什么，也无法保证各值（也就是操作）的顺序性。而这就是Zookeeper没有采用Multi-Paxos的原因，又是ZAB协议着力解决的，也是你理解ZAB协议的关键。</p><p>那么为了帮你更好地理解这个协议，接下来，我将分别以如何实现操作的顺序性、领导者选举、故障恢复、处理读写请求为例，具体讲解一下。希望你能在全面理解ZAB协议的同时，加深对Paxos算法的理解。</p><!-- [[[read_end]]] --><p>今天这节课，我会从ZAB协议的最核心设计目标（如何实现操作的顺序性）出发，带你了解它的基础原理。</p><p>老规矩，在开始今天的内容之前，我们先来看一道思考题：</p><p>假如节点A、B、C组成的一个分布式集群，我们要设计一个算法，来保证指令（比如X、Y）执行的顺序性，比如，指令X在指令Y之前执行，那么我们该如何设计这个算法呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/55/c9/55dc6f6bf822db027858b8b4fdb89cc9.jpg?wh=1142*847\" alt=\"\" title=\"图1\"></p><p>带着这个问题，我们进入今天的内容。</p><h2>为什么Multi-Paxos无法保证操作顺序性？</h2><p>刚刚我提到“Multi-Paxos无法保证操作的顺序性”。为了让你真正理解这个问题，我举个具体的例子演示一下（为了演示方便，我们假设当前所有节点上的被选定指令，最大序号都为100，那么新提议的指令对应的序号就会是101）。</p><p>首先节点A是领导者，提案编号为1，提议了指令X、Y，对应的序号分别为101和102，但是因为网络故障，指令只成功复制到了节点A。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/f3/3ed203904d35eaf0bd5162262c1b4ef3.jpg?wh=1142*409\" alt=\"\" title=\"图2\"></p><p>假设这时节点A故障了，新当选的领导者为节点B。节点B当选领导者后，需要先作为学习者了解目前已被选定的指令。节点B学习之后，发现当前被选定指令的最大序号为100（因为节点A故障了，它被选定指令的最大序号102，无法被节点B发现），那么它可以从序号101开始提议新的指令。这时它接收到客户端请求，并提议了指令Z，指令Z被成功复制到节点B、C。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/12/77f94aa5dec044ffc1a61547cb10f112.jpg?wh=1142*365\" alt=\"\" title=\"图3\"></p><p>假设这时节点B故障了，节点A恢复了，选举出领导者C后，节点B故障也恢复了。节点C当选领导者后，需要先作为学习者了解目前已被选定的指令，这时它执行Basic Paxos的准备阶段，就会发现之前选定的值（比如Z、Y），然后发送接受请求，最终在序号101、102处达成共识的指令是Z、Y。就像下图的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/e6/c4/e6c27d879025ef6943a5985da1351bc4.jpg?wh=1142*402\" alt=\"\" title=\"图4\"></p><p>在这里，你可以看到，原本预期的指令是X、Y，最后变成了Z、Y。讲到这儿，你应该可以知道，为什么用Multi-Paxos不能达到我们想要的结果了吧？</p><p>这个过程，其实很明显的验证了“Multi-Paxos虽然能保证达成共识后的值不再改变，但它不关心达成共识的值是什么。”</p><p>那么咱们接着回到开篇的问题，假设在ZooKeeper中直接使用了兰伯特的Multi-Paxos，这时创建节点\"/geekbang\"和\"/geekbang/time\"，那么就可能出现，系统先创建了节点\"/geekbang/time\"，这样肯定就出错了：</p><pre><code>[zk: 192.168.0.10:2181(CONNECTED) 0] create /geekbang/time 456\nNode does not exist: /geekbang/time\n</code></pre><p>因为创建节点\"/geekbang/time\"时，找不到节点\"/geekbang\"，所以就会创建失败。</p><p>在这里我多说几句，除了Multi-Paxos，兰伯特还有很多关于分布式的理论，这些理论都很经典（比如拜占庭将军问题），但也因为太早了，与实际场景结合的不多，所以后续的众多算法是在这个基础之上做了大量的改进（比如，PBFT、Raft等）。关于这一点，我在13讲也强调过，你需要注意一下。</p><p>另外我再延伸一下，其实在<a href=\"https://www.semanticscholar.org/paper/Zab:-High-performance-broadcast-for-primary-backup-Junqueira-Reed/b02c6b00bd5dbdbd951fddb00b906c82fa80f0b3\">ZAB论</a>文中，关于Paxos问题（Figure 1 ​​​​）的分析是有争议的。因为ZooKeeper当时应该考虑的是Multi-Paxos，而不是有多个提议者的Basic Paxos。而在Multi-Paxos中，领导者作为唯一提议者，是不存在同时多个提议者的情况。也就是说，Paxos（更确切的说是Multi-Paxos）无法保证操作的顺序性的问题是存在的，但原因不是ZAB论文中演示的原因，本质上是因为Multi-Paxos实现的是一系列值的共识，不关心最终达成共识的值是什么，不关心各值的顺序，就像我们在上面演示的过程那样。</p><p>那既然Multi-Paxos不行，ZooKeeper怎么实现操作的顺序性的呢?答案是它实现了ZAB协议。</p><p>你可能会说了：Raft可以实现操作的顺序性啊，为什么ZooKeeper不用Raft呢？这个问题其实比较简单，因为Raft出来的比较晚，直到2013年才正式提出，在2007年开发ZooKeeper的时候，还没有Raft呢。</p><h2>ZAB是如何实现操作的顺序性的？</h2><p>如果用一句话解释ZAB协议到底是什么，我觉得它是：能保证操作顺序性的，基于主备模式的原子广播协议。</p><p>接下来，我还是以X、Y指令为例具体演示一下，帮助你更好理解为什么ZAB能实现操作的顺序性（为了演示方便，我们假设节点A为主节点，节点B、C为备份节点）。</p><p>首先，需要你注意的是，在ZAB中，写操作必须在主节点（比如节点A）上执行。如果客户端访问的节点是备份节点（比如节点B），它会将写请求转发给主节点。如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/77/6f/770c39b4ea339799bc3ca4a0b0d8266f.jpg?wh=1142*478\" alt=\"\" title=\"图5\"></p><p>接着，当主节点接收到写请求后，它会基于写请求中的指令（也就是X，Y），来创建一个提案（Proposal），并使用一个唯一的ID来标识这个提案。这里我说的唯一的ID就是指事务标识符（Transaction ID，也就是zxid），就像下图的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/9b/d0063fa9275ce0a114ace27db326d19b.jpg?wh=1142*387\" alt=\"\" title=\"图6\"></p><p>从图中你可以看到，X、Y对应的事务标识符分别为&lt;1, 1&gt;和&lt;1, 2&gt;，这两个标识符是什么含义呢？</p><p>你可以这么理解，事务标识符是64位的long型变量，有任期编号epoch和计数器counter两部分组成（为了形象和方便理解，我把epoch翻译成任期编号），格式为&lt;epoch, counter&gt;，高32位为任期编号，低32位为计数器：</p><ul>\n<li>\n<p>任期编号，就是创建提案时领导者的任期编号，需要你注意的是，当新领导者当选时，任期编号递增，计数器被设置为零。比如，前领导者的任期编号为1，那么新领导者对应的任期编号将为2。</p>\n</li>\n<li>\n<p>计数器，就是具体标识提案的整数，需要你注意的是，每次领导者创建新的提案时，计数器将递增。比如，前一个提案对应的计数器值为1，那么新的提案对应的计数器值将为2。</p>\n</li>\n</ul><p>为什么要设计的这么复杂呢？因为事务标识符必须按照顺序、唯一标识一个提案，也就是说，事务标识符必须是唯一的、递增的。</p><p>在创建完提案之后，主节点会基于TCP协议，并按照顺序将提案广播到其他节点。这样就能保证先发送的消息，会先被收到，保证了消息接收的顺序性。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/96/e525af146900c892e0c002affa77d496.jpg?wh=1142*403\" alt=\"\" title=\"图7\"></p><p>你看这张图，X一定在Y之前到达节点B、C。</p><p>然后，当主节点接收到指定提案的“大多数”的确认响应后，该提案将处于提交状态（Committed），主节点会通知备份节点提交该提案。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/19/1d3950b6d91845789cce1f0569969419.jpg?wh=1142*423\" alt=\"\" title=\"图8\"></p><p>在这里，需要你注意的是，主节点提交提案是有顺序性的。主节点根据事务标识符大小，按照顺序提交提案，如果前一个提案未提交，此时主节点是不会提交后一个提案的。也就是说，指令X一定会在指令Y之前提交。</p><p>最后，主节点返回执行成功的响应给节点B，节点B再转发给客户端。<strong>你看，这样我们就实现了操作的顺序性，保证了指令X一定在指令Y之前执行。</strong></p><p>最后我想补充的是，当写操作执行完后，接下来你可能需要执行读操作了。你需要注意，为了提升读并发能力，Zookeeper提供的是最终一致性，也就是读操作可以在任何节点上执行，客户端会读到旧数据：</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/1c/d405381e5fad12730149baa4fae63e1c.jpg?wh=1142*536\" alt=\"\" title=\"图9\"></p><p>如果客户端必须要读到最新数据，怎么办呢？Zookeeper提供了一个解决办法，那就是sync命令。你可以在执行读操作前，先执行sync命令，这样客户端就能读到最新数据了：</p><pre><code>[zk: 192.168.0.10:2181(CONNECTED) 2] sync /geekbang/time\n[zk: 192.168.0.10:2181(CONNECTED) 3] Sync returned 0\n[zk: 192.168.0.10:2181(CONNECTED) 3] get /geekbang/time\n456\ncZxid = 0x100000005\nctime = Mon Apr 20 21:19:28 HKT 2020\nmZxid = 0x100000005\nmtime = Mon Apr 20 21:19:28 HKT 2020\npZxid = 0x100000005\ncversion = 0\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 3\nnumChildren = 0\n[zk: 192.168.0.10:2181(CONNECTED) 4]\n</code></pre><h2>内容小结</h2><p>本节课我主要带你了解了为什么Multi-Paxos无法实现操作的顺序性，以及ZAB协议如何保证操作的顺序性。我希望你明确这样几个重点。</p><p>1.兰伯特的Multi-Paxos只考虑了如何实现共识，也就是如何就一系列值达成共识，未考虑如何实现各值（也就是操作）的顺序性。</p><p>2.ZAB是通过“一切以领导者为准”的强领导者模型和严格按照顺序处理、提交提案，来实现操作的顺序性的。</p><p>那么说到ZAB，很多同学可能有这样的疑问：为什么ZAB作者宣称<a href=\"https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zab+vs.+Paxos\">ZAB不是Paxos算法，</a>但又有很多资料提到ZAB是Multi-Paxos算法呢？到底该怎么理解呢？</p><p>我的看法是，你可以把它理解为Multi-Paxos算法。因为技术是发展的，概念的内涵也在变化。Raft算法（主备、强领导者模型）与ZAB协议非常类似，它是作为共识算法和Multi-Paxos算法提出的。当它被广泛接受和认可后，共识算法的内涵也就丰富和发展了，不仅能实现一系列值的共识，还能保证值的顺序性。同样，Multi-Paxos算法不仅指代多次执行Basic Paxos的算法，还指代主备、强领导者模型的共识算法。</p><p>当然了，在学习技术过程中，我们不可避免的会遇到有歧义、有争议的信息，就像在11讲留言区中，有同学提到“从网上搜了搜相关资料，发现大部分资料将谣言传播等同于Gossip协议，也有把反熵等同于Gossip协议的，感到很迷惑”。</p><p>这就需要我们不仅要在平时工作和学习中，认真、全面的学习理论，掌握概念的内涵，还要能“包容”和“发展”着理解技术。</p><p>最后，在本节课我们了解了ZAB协议的最核心设计目标（如何实现操作的顺序性），那么既然“所有数据都是以主节点的数据为准的”，主节点（也就是领导者）那么重要，那当它崩溃了，该怎么处理呢？下节课，我会重点带你了解这部分内容。</p><h2>课堂思考</h2><p>既然我提到在ZAB协议中，主节点是基于TCP协议来广播消息的，并保证了消息接收的顺序性。那么你不妨想想，如果ZAB采用的是UDP协议，能保证消息接收的顺序性吗？为什么呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这节课让你有所收获，也欢迎你将它分享给更多的朋友。</p><hr><p><span class=\"orange\">编辑角：目前课程已经结束了，为了交付更好的内容，《分布式协议与算法实战》于2020年4.26日启动迭代计划，15讲为迭代版本，后面也会对ZAB协议进行更细致化的讨论，敬请期待！</span></p>","comments":[{"had_liked":false,"id":211518,"user_name":"Jialin","can_delete":false,"product_type":"c1","uid":1112955,"ip_address":"","ucode":"12583269732A75","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","comment_is_top":false,"comment_ctime":1587976287,"is_pvip":false,"replies":[{"id":"78869","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588075804,"ip_address":"","comment_id":211518,"utype":1}],"discussion_count":5,"race_medal":0,"score":"134731962463","product_id":100046101,"comment_content":"如果 ZAB 采用的是 UDP 协议，无法保证消息接收的顺序性，主要是因为 TCP 协议本身支持按序确认，而 UCP 只能支持尽最大可能交付","like_count":32,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493283,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588075804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158618,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ad/da/31a2eb50.jpg","nickname":"andrewguo","note":"","ucode":"FA9FB829EA2320","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279837,"discussion_content":"没太明白，一个提案不是由<epoch,counter>组成 counter的作用不就是逻辑时钟了吗，为啥需要由tcp协议来保证顺序？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591430265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1204868,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/YicovLZyvibpkfJwuAib1FEyibVDN6Oia1Wsg7jibT0uTj0UDH75KAX6vfSvstjy1IHTW7WpNbMlZZO9SnGoPj3AE2DQ/132","nickname":"要努力的兵长","note":"","ucode":"0144DF1BB82763","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1158618,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ad/da/31a2eb50.jpg","nickname":"andrewguo","note":"","ucode":"FA9FB829EA2320","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304687,"discussion_content":"加一层保护 不是更好， 又不是完全指望TCP来保证顺序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599643103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279837,"ip_address":""},"score":304687,"extra":""}]},{"author":{"id":1007623,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/60/07/c2738be7.jpg","nickname":"Sylar.","note":"","ucode":"CAE26E4C31C967","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279120,"discussion_content":"不一定吧 两个包同事发出去 不见得一定是先发的到吧 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591284322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1019351,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/d7/886e9563.jpg","nickname":"张高","note":"","ucode":"9E5EB8675E4956","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1007623,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/60/07/c2738be7.jpg","nickname":"Sylar.","note":"","ucode":"CAE26E4C31C967","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292760,"discussion_content":"如果用同一个tcp连接发送，应用层收到的数据一定是先发先到的。tcp内部会给每个包编号，就算收到的不是顺序的，tcp也会按编号调整顺序，最终抛给应用层的数据一定是按顺序的。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1595322382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279120,"ip_address":""},"score":292760,"extra":""}]}]},{"had_liked":false,"id":290551,"user_name":"充值一万","can_delete":false,"product_type":"c1","uid":1519086,"ip_address":"","ucode":"1B4B3AEFA9C8C2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epRK5v3IkvSfjicKNKlRLE2nTQUowhMvQkwWWWUSESat8EBbcPvMk4aAjZHGcsE5DCibES9WicHcC9Qw/132","comment_is_top":false,"comment_ctime":1619615617,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"40274321281","product_id":100046101,"comment_content":"这一节看得我一脸懵逼。。按照文中描述，Multi-Paxos 无法保证操作顺序性的原因是各节点可能先后宕机，然后最终恢复时，最终达成一致的提案可能不是预期的（X, Y 变成 Z, Y）。而ZAB 协议能保证顺序，是因为提案提交有序，TCP保证可靠通讯。<br>？？？？？？？？？？？？？？？？？？？？？？？？<br>Multi-Paxos领导节点也可以顺序提案啊，也可以用TCP；<br>ZAB 协议的节点也可能各种宕机啊？！","like_count":10,"discussions":[{"author":{"id":1102062,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","nickname":"LYy","note":"","ucode":"8D5C39B9531E71","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565428,"discussion_content":"我理解zxid是顺序递增的，前一个zxid没有写入状态机的话，后面的zxid是不会写入的(具体是拒绝proposal还是本地缓存得看实现了)。不单单是靠TCP来保序(这简直是在扯淡，TCP顶多能保证批量提交的proposal顺序)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650463619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184046,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/2e/ebb53d59.jpg","nickname":"熙成","note":"","ucode":"4CB28C7C256526","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394885,"discussion_content":"说的对，同问，麻烦老师解答！！！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632121573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242332,"user_name":"爱德华","can_delete":false,"product_type":"c1","uid":1853638,"ip_address":"","ucode":"800E6A9490D90F","user_header":"https://static001.geekbang.org/account/avatar/00/1c/48/c6/3c8d9a0c.jpg","comment_is_top":false,"comment_ctime":1597673941,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40252379605","product_id":100046101,"comment_content":"老韩，课讲的很好，我有不懂的地方，想请教下。<br><br>zab是如何保证proposal提交的顺序型的？单纯的用zxid保证提交到FIFO队列依次广播是实现不了proposal提交的顺序性的。<br><br>zxid只能保证提交到队列顺序性，以及消息广播的顺序性。但是保证不了网络中消息先后到达follower的顺序，这是第一个问题。第二个问题就是，就算按照zxid的顺序依次到达了follower，但是follower处理每个proposal的时间是不一致的，也就是说后到达的proposal有可能先处理完，先给leader返回ack响应。这里除非zab处理是单线程的，才不会有这个问题。<br><br>我觉得zab中应该针对zxid做了特殊判断。<br>比如真正去提交的时候（第二阶段），先判断在此zxid之前proposal有没有提交，有的话等上一个提交了再提交。<br>或者另一个想法，当发现当前的需要提交的zxid之前的还有proposal没有提交，则拒绝提交，进去崩溃恢复模式。但是这样的话，leader很容易失去过半的follower。<br><br>不知道zab是怎么做的呢？","like_count":10,"discussions":[{"author":{"id":1019339,"avatar":"","nickname":"zyz","note":"","ucode":"0092F8C0FFA375","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348474,"discussion_content":"上一个事务zxid没提交，当前事务zxid需要等待才能提交，核心判断代码：outstandingProposals.containsKey(zxid - 1)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612594157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228679,"user_name":"z","can_delete":false,"product_type":"c1","uid":1433688,"ip_address":"","ucode":"113CAF2C7F929B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKB0h2nibEbQKcZ6eHkgkmtwMunlibSibT3YAJ8IbDa834HnTAYiajMd8YCdpyDrfhWibCicfpmDCjJzwlA/132","comment_is_top":false,"comment_ctime":1592787559,"is_pvip":false,"replies":[{"id":"88046","content":"加一颗星:)，存在这样的情况，但这不是问题，因为在实际场景中，如果我们想实现X、Y的顺序性，那么客户端可以连接一个节点，而不是多个节点，执行写操作。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596134797,"ip_address":"","comment_id":228679,"utype":1}],"discussion_count":5,"race_medal":0,"score":"27362591335","product_id":100046101,"comment_content":"&quot;首先，需要你注意的是，在 ZAB 中，写操作必须在主节点（比如节点 A）上执行。如果客户端访问的节点是备份节点（比如节点 B），它会将写请求转发给主节点&quot;<br> 关于这一点写请求会转发到主节点， 如果客户端把X，Y发往了两个不同的备份节点，这时候主节点拿到X，Y的顺序是不是没办法保证？ 那最终执行的顺序还是没法保证呀","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499145,"discussion_content":"加一颗星:)，存在这样的情况，但这不是问题，因为在实际场景中，如果我们想实现X、Y的顺序性，那么客户端可以连接一个节点，而不是多个节点，执行写操作。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596134797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1499380,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/6vz8MgZia6Xwdhayv9Jdnee7HfDYSAMTUtMAAVORMhiaN8bIM0QJibrQ5EDqB8o5pWE6FRuaqguwG86o5Gh90ruDw/132","nickname":"不会爬树的熊","note":"","ucode":"E417D8D9D5FED2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297654,"discussion_content":"好问题，答案的关键是你连接是一个集群中的一个节点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597018444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315527,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/c7/a7a5df8b.jpg","nickname":"达子不一般","note":"","ucode":"A91C8DB45184F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400720,"discussion_content":"对客户端来说，保持顺序性最简单的办法就是写入X收到返回成功后再写入Y","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633398171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113410,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/42/2dacce95.jpg","nickname":"方生","note":"","ucode":"E753E2E028443E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285475,"discussion_content":"我觉得X，Y的发送应该是个原子操作。不能够X发往一个节点，Y又发往另一个节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592840052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/37/b53e190f.jpg","nickname":"薛小O","note":"","ucode":"6F5A0CC03A909A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1113410,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/42/2dacce95.jpg","nickname":"方生","note":"","ucode":"E753E2E028443E","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":387978,"discussion_content":"不太可能原子操作啊，如果X/Y原子操作，那Y/Z也应该原子，那Z/ZA也应该原子，最后就成了所有操作都原子，不太可能吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628518481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":285475,"ip_address":""},"score":387978,"extra":""}]}]},{"had_liked":false,"id":214438,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588749885,"is_pvip":false,"replies":[{"id":"79483","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588806599,"ip_address":"","comment_id":214438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27358553661","product_id":100046101,"comment_content":"本质上讲，zab和raft都是通过强领导者模型实现就多值达成共识的","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494054,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588806599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224531,"user_name":"andrewguo","can_delete":false,"product_type":"c1","uid":1158618,"ip_address":"","ucode":"FA9FB829EA2320","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/da/31a2eb50.jpg","comment_is_top":false,"comment_ctime":1591433154,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23066269634","product_id":100046101,"comment_content":"使用tcp协议来保证顺序的原因是<br>1. tcp协议栈能保证包的先后顺序<br>2. 虽然提案本身有递增的逻辑时钟，但zab里zxid要求不是严格连续，允许空洞。如果传输协议不能保证顺序，从节点获取提案N时无法判断是否还有比N小的提案未收到，从而无法执行。","like_count":5,"discussions":[{"author":{"id":1236023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/37/b53e190f.jpg","nickname":"薛小O","note":"","ucode":"6F5A0CC03A909A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387976,"discussion_content":"允许空洞的话，就算用TCP也不能保证啊，万一上一个包丢了怎么办，follower也不知道丢了包啊；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628518334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214399,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588739675,"is_pvip":false,"replies":[{"id":"79484","content":"加一颗星:)，在接下来的加餐中，我会补充个对比总结。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588806712,"ip_address":"","comment_id":214399,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23063576155","product_id":100046101,"comment_content":"怎么感觉zab和raft如果刨去leader选举之外就一模一样了，希望老师解惑，谢谢！","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494043,"discussion_content":"加一颗星:)，在接下来的加餐中，我会补充个对比总结。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588806712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/7a/ae8c247d.jpg","nickname":"指尖以东","note":"","ucode":"1DEE134FE92FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259264,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588771826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314746,"user_name":"达子不一般","can_delete":false,"product_type":"c1","uid":1315527,"ip_address":"","ucode":"A91C8DB45184F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/c7/a7a5df8b.jpg","comment_is_top":false,"comment_ctime":1633398608,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14518300496","product_id":100046101,"comment_content":"对文中举出的Multi Basic Paxos的实例的几个疑问：<br><br>- 针对不同的key(X)、key(Z)，为何要使用相同的编号101？不同的key之间使用共识判断，有意义吗？<br><br>- 因为网络故障，指令只成功复制到了节点A<br><br>指令只成功复制到了节点A，那么返回给客户端是成功还是失败？如果是失败，那么被占据多数101的Z覆盖似乎也没啥问题<br><br>- A恢复后，102对应的Y涉及的节点不占有多数，为啥学习者C会学到102呢","like_count":4,"discussions":[{"author":{"id":2149133,"avatar":"https://static001.geekbang.org/account/avatar/00/20/cb/0d/11e3e3f6.jpg","nickname":"THE SWORD OF AMBER","note":"","ucode":"BEC2834C1EC165","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559833,"discussion_content":"prepare阶段只需要多数有响应，而不管相应的值是否形成多数派，proposer只认所有响应里proposald最大的accept值，可以回看下之前basic-paxos算法流程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648993285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242453,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597732617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10187667209","product_id":100046101,"comment_content":"1.首先消息的前后性不能保证,因为TCP本质上是在接收和发送的两端都维护了一个栈的机制,模拟出了一条数据流,从而做到了顺序的传输,而UDP是无序的,可以在网上到处开车,可能导致消息前后错乱<br>2.但是消息的前后性我感觉可以从别的地方保证,可以从几点来分析下,对于失败重传,这个可以由发收双方进行手段性质的保证<br>而且在主节点不故障的情况下,是可以知道发送的消息,那么X不会的时候,Y也不会先提交<br>而且对于跟随者,只收到了Y的提交,估计也要等X的提交消息才能生效吧,不然即使是两个消息有依赖性,但是两个消息也不一定在一个TCP里面提交啊<br>最后,即使故障了,任期编号自然会更新,不会出现编号错乱的问题","like_count":2},{"had_liked":false,"id":213712,"user_name":"海连天","can_delete":false,"product_type":"c1","uid":1072690,"ip_address":"","ucode":"8CFAFA59086BFA","user_header":"https://static001.geekbang.org/account/avatar/00/10/5e/32/1ccb2b7c.jpg","comment_is_top":false,"comment_ctime":1588518659,"is_pvip":false,"replies":[{"id":"79320","content":"加一颗星:)，可以对比着理解，理解为简化版的二阶段提交，基于“大多数”确认来提交。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588679634,"ip_address":"","comment_id":213712,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10178453251","product_id":100046101,"comment_content":"感觉过程像极了两阶段提交","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493850,"discussion_content":"加一颗星:)，可以对比着理解，理解为简化版的二阶段提交，基于“大多数”确认来提交。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588679634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292073,"user_name":"--","can_delete":false,"product_type":"c1","uid":1075167,"ip_address":"","ucode":"A262E3991E69DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/df/8b85d0d9.jpg","comment_is_top":false,"comment_ctime":1620661129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5915628425","product_id":100046101,"comment_content":"能否使用UDP得看zxid是不是连续递增的，本质上来说每个节点提案的偏序关系是一样的就能保证顺序。但是主节点故障之后，新主需要能够判断当前要提交的提案是不是第一个未提交的提案，即提案是否存在空洞。如果zxid是连续的，通过对比最后一个已提交的提案的zxid就能判断出是否有空洞，如果不是连续的，那么就无法判断了。","like_count":1},{"had_liked":false,"id":277801,"user_name":"zyz","can_delete":false,"product_type":"c1","uid":1019339,"ip_address":"","ucode":"0092F8C0FFA375","user_header":"","comment_is_top":false,"comment_ctime":1612596296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907563592","product_id":100046101,"comment_content":"老师！“Zookeeper 提供的是最终一致性，也就是读操作可以在任何节点上执行，客户端会读到旧数据”，这句话是不是这样理解，根据zk的单一视图保证客户端不会连接到数据版本比自己之前看到的旧的服务器上。<br>如果这个客户端，指的是当前刚刚发起操作修改数据的客户端，断开连上还没有更新到最新事务的非领导者节点，非领导者节点会拒绝当前连接，因为客户端zxid事务Id，大于当前节点事务Id lastProcessedZxid，因此客户端需要连接其他节点。<br>如果这个客户端，指的是新客户端，不是刚才操作的客户端，连接上非领导者节点，看的的数据可能不是最新的。","like_count":1},{"had_liked":false,"id":275869,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c1","uid":1494491,"ip_address":"","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1611710292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906677588","product_id":100046101,"comment_content":"采用 udp 协议也可以保证消息的顺序性啊，只需要在上层再加一个保证消息顺序性的协议即可，比如 quic","like_count":1},{"had_liked":false,"id":224146,"user_name":"nomoshen","can_delete":false,"product_type":"c1","uid":1043083,"ip_address":"","ucode":"7EA7C4FECFA7C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/8b/613c162e.jpg","comment_is_top":false,"comment_ctime":1591284796,"is_pvip":false,"replies":[{"id":"88041","content":"加一颗星:)，问题1：因为提案已复制到大多数节点上，领导者选举能保证新的领导者一定包含这个未提交的提案，并最终将它提交。<br>问题2：不一定是主节点，也不需要等到committed绝大多数，具体来说，当节点接收到COMMIT消息后，提交提案，如果是自己接收的写请求，那么这时返回成功响应给客户端。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596132817,"ip_address":"","comment_id":224146,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5886252092","product_id":100046101,"comment_content":"第一个阶段提议ok之后，第二个committed阶段主节点挂了，那么在选举的时候这写未提交的提议咋处理？主节点反馈给客户端是否要直到comitted绝大多数才算OK","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497375,"discussion_content":"加一颗星:)，问题1：因为提案已复制到大多数节点上，领导者选举能保证新的领导者一定包含这个未提交的提案，并最终将它提交。\n问题2：不一定是主节点，也不需要等到committed绝大多数，具体来说，当节点接收到COMMIT消息后，提交提案，如果是自己接收的写请求，那么这时返回成功响应给客户端。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596132817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1853638,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/48/c6/3c8d9a0c.jpg","nickname":"爱德华","note":"","ucode":"800E6A9490D90F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289354,"discussion_content":"Zab会确保那些已经在leader上提交的事务最终被所有节点都提交。\nZab会确保丢弃那些只在leader上仅被提出的事务。\n\n这是崩溃恢复模式的规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594080580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337193,"user_name":"tianbingJ","can_delete":false,"product_type":"c1","uid":2163653,"ip_address":"","ucode":"666141CAD8260F","user_header":"https://static001.geekbang.org/account/avatar/00/21/03/c5/600fd645.jpg","comment_is_top":false,"comment_ctime":1646669162,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646669162","product_id":100046101,"comment_content":"不应该强调TCP协议啊，完全没有必要；像Raft那样有index也行啊，比如&lt;1,1&gt; &lt;1,2&gt;这样的序列，&lt;1,2&gt;先到也没关系，&lt;1,1&gt;不到不commit、不apply状态机就是了。<br>即使节点之间有连接也不一定是就一个TCP连接...<br><br>感觉不是一个层面的事情","like_count":0},{"had_liked":false,"id":330463,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1641985648,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641985648","product_id":100046101,"comment_content":"不可以。因为UDP不可以保证数据顺序。","like_count":0},{"had_liked":false,"id":330072,"user_name":"阿kai(aeo","can_delete":false,"product_type":"c1","uid":1147682,"ip_address":"","ucode":"6B1D650D9BFA4C","user_header":"https://static001.geekbang.org/account/avatar/00/11/83/22/c3dae274.jpg","comment_is_top":false,"comment_ctime":1641785704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641785704","product_id":100046101,"comment_content":"&quot;当主节点接收到指定提案的“大多数”的确认响应后，该提案将处于提交状态（Committed），主节点会通知备份节点提交该提案。&quot;<br>我有一个疑问，备份节点各自Commit提案以后 还会告诉主节点吗？<br>","like_count":0},{"had_liked":false,"id":329885,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1641626202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641626202","product_id":100046101,"comment_content":"其实结合工程实现来看,不管是基于Raft还是Paxos的实现,其实已经非常类似了,也就是在读写级别,是否从节点可写等方面有一些取舍罢了,但是本质思想是相同的.","like_count":0},{"had_liked":false,"id":315416,"user_name":"ezekiel","can_delete":false,"product_type":"c1","uid":1158795,"ip_address":"","ucode":"AB4AB6FA8612D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/8b/43ce01ca.jpg","comment_is_top":false,"comment_ctime":1633884431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633884431","product_id":100046101,"comment_content":"老师您好！<br><br>你可以看到，原本预期的指令是 X、Y，最后变成了 Z、Y。讲到这儿，你应该可以知道，为什么用 Multi-Paxos 不能达到我们想要的结果了吧？<br>========================================<br>x、y并没有复制到大多数节点，在客户端角度来说应该是失败的。从服务端角度来说，C当选后为什么会接受A节点的y值呢？没有达成共识呀","like_count":1},{"had_liked":false,"id":314747,"user_name":"达子不一般","can_delete":false,"product_type":"c1","uid":1315527,"ip_address":"","ucode":"A91C8DB45184F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/c7/a7a5df8b.jpg","comment_is_top":false,"comment_ctime":1633398822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633398822","product_id":100046101,"comment_content":"如果 ZAB 采用的是 UDP 协议，能保证消息接收的顺序性吗？<br><br>UDP不能保证消息接收的顺序性，但一定要保证消息接收的顺序性吗？是否只要保证leader上commit的顺序性即可","like_count":0},{"had_liked":false,"id":312903,"user_name":"熙成","can_delete":false,"product_type":"c1","uid":1184046,"ip_address":"","ucode":"4CB28C7C256526","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/2e/ebb53d59.jpg","comment_is_top":false,"comment_ctime":1632111923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632111923","product_id":100046101,"comment_content":"为什么 Multi-Paxos 无法保证操作顺序性？<br>讲述疑惑：<br>提案编号既然是1，那序号101、102是表示什么？是提案内容吗？不应该看提案编号递增+1吗，为什么又搞出来个序号？","like_count":1},{"had_liked":false,"id":309723,"user_name":"乘修","can_delete":false,"product_type":"c1","uid":1745932,"ip_address":"","ucode":"45FB065DDD94D3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a4/0c/be3ac2ca.jpg","comment_is_top":false,"comment_ctime":1630314067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630314067","product_id":100046101,"comment_content":"如果说x没有被选定，那么y也没有被选定啊，不可能出现后续z代替x，将结果从[x,y]变成[z,y]吧？","like_count":0},{"had_liked":false,"id":307484,"user_name":"乘修","can_delete":false,"product_type":"c1","uid":1745932,"ip_address":"","ucode":"45FB065DDD94D3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a4/0c/be3ac2ca.jpg","comment_is_top":false,"comment_ctime":1629120027,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1629120027","product_id":100046101,"comment_content":"使用UDP的话，可以在应用层模拟TCP保证数据接受的顺序性","like_count":0,"discussions":[{"author":{"id":2846704,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4oic741r7ISqxjTg7OYck2bVeRiapEhccoUY4V4zlml2Vy5icKVFkPqJ0ialQ4iaJ0vwswhfJOxQiby8tA/132","nickname":"Geek_9ac9d8","note":"","ucode":"672C5320D16C4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414650,"discussion_content":"overlay","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636823897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304085,"user_name":"黄土高坡","can_delete":false,"product_type":"c1","uid":1064234,"ip_address":"","ucode":"7018F0FAE464A5","user_header":"https://static001.geekbang.org/account/avatar/00/10/3d/2a/16357640.jpg","comment_is_top":false,"comment_ctime":1627224586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627224586","product_id":100046101,"comment_content":"老师，对于【为什么 Multi-Paxos 无法保证操作顺序性？】部分第一张图有些挺关键的疑问：1) 节点 A 如何能够提交两个编号相同而指令不同的提案 101:[1,], 102:[1,] ？这里是不是写错了，第二个提案应该是 102:[2,] ? 2) 如果 A 就是可以提交这样的两个提案，请帮我解惑什么情况下同一个节点可以先后提交两个编号相同的提案？","like_count":0},{"had_liked":false,"id":299971,"user_name":"我可能是个假开发","can_delete":false,"product_type":"c1","uid":1424106,"ip_address":"","ucode":"B4EA4E48D6595A","user_header":"https://static001.geekbang.org/account/avatar/00/15/ba/ea/eb6ec134.jpg","comment_is_top":false,"comment_ctime":1624942448,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1624942448","product_id":100046101,"comment_content":"1.为什么节点A提议XY，没有收到大多数确认仍然选定了<br>2.选出新领导者C后的学习过程是怎么样的呢？为什么会学习到没被大多数节点接受的指令?","like_count":0},{"had_liked":false,"id":288570,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1618541273,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618541273","product_id":100046101,"comment_content":"老师，你好。<br>我的理解是使用UDP也可以保障消息接受的顺序性，不过要在应用层实现，很麻烦。老师，我还有一个疑问就是，如果不保障消息接受的顺序性，因为有事务标识符，也是可以保障操作的顺序性。不知道我的理解对不对？","like_count":0},{"had_liked":false,"id":281003,"user_name":"mateye","can_delete":false,"product_type":"c1","uid":1176599,"ip_address":"","ucode":"C402E6E4590F72","user_header":"https://static001.geekbang.org/account/avatar/00/11/f4/17/fb769d42.jpg","comment_is_top":false,"comment_ctime":1614521748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614521748","product_id":100046101,"comment_content":"因为 TCP是以流的形式进行数据传递的，这是现成的fifo，当然其实也可以使用 UDP，但是会带来额外的开发成本，例如在 follower中再维护一个接受端的队列，保证按照 leader 发送的消息顺序，去顺序的消费这个队列。并且follower 和 leader 之间交换的数据报也会新增很多状态字段起维护这种状态，不知道我说的对不对","like_count":0},{"had_liked":false,"id":257763,"user_name":"ezekiel","can_delete":false,"product_type":"c1","uid":1158795,"ip_address":"","ucode":"AB4AB6FA8612D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/8b/43ce01ca.jpg","comment_is_top":false,"comment_ctime":1604122338,"is_pvip":false,"replies":[{"id":"96279","content":"加一颗星:)，1. 准备阶段是可以省略的，属于优化，但是否省略，对最终结果都没有影响，为了理解方便，演示时，就没有省略。2. 不是赋值不能修改，而是算法保证被“大多数”节点接受的值就不再改变。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606799013,"ip_address":"","comment_id":257763,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604122338","product_id":100046101,"comment_content":"老师您好<br>我有两个疑问<br>图 2、3、4中尚无提案准备，是Mutli-paxos中的步骤吗？我理解领导者直接进入第二阶段赋值，是否正确？<br>图2中接受者已经赋值，后来领导者C执行Basic Paxos中准备阶段，将其修改。不是一旦赋值后就不能修改了吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508443,"discussion_content":"加一颗星:)，1. 准备阶段是可以省略的，属于优化，但是否省略，对最终结果都没有影响，为了理解方便，演示时，就没有省略。2. 不是赋值不能修改，而是算法保证被“大多数”节点接受的值就不再改变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606799013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250326,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1601026072,"is_pvip":false,"replies":[{"id":"91804","content":"加一颗星:)，TCP是能保证消息的顺序的，乱序的数据包会基于seq，进行乱序重组。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1601294365,"ip_address":"","comment_id":250326,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1601026072","product_id":100046101,"comment_content":"我看很多朋友回复是通过tcp来控制顺序，我不认为这样，tcp发送如果中间过程路由发生了变化，仍然会导致后发的消息先到；udp当然更不行了。。后来我看一篇文章说leader为每个flow生成一个先进先出的队列，如果flow去主动取数据的话这个顺序是可以保障的","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506185,"discussion_content":"加一颗星:)，TCP是能保证消息的顺序的，乱序的数据包会基于seq，进行乱序重组。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601294365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315543,"discussion_content":"tcp每端会维护滑动窗口的，tcp包严格按照seq顺序收发，如果中间缺失，tcp会发起重传，整理好顺序后交付给7层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603288149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248839,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1600329741,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1600329741","product_id":100046101,"comment_content":"paxos按日志条目来决议，一条一条决议也是可以保障顺序的，只是效率比一次发多条低，但x，y也可以当成一条日志来决议，这样就效率一样了","like_count":0},{"had_liked":false,"id":248836,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1600329335,"is_pvip":true,"replies":[{"id":"96273","content":"加一颗星:)，加一颗星，这里的“误解”指什么呢？问题2：是的；问题3：能更具体点，或者举个例子吗？","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606798003,"ip_address":"","comment_id":248836,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600329335","product_id":100046101,"comment_content":"这里还是有误解？paxos是为了决议一个不变值，不变的值可以是log item吧？paxos有问题的地方是可能把原先没有成功的值也决议进去了，但如果这个值是个幂等也没关系吧，客户端看到的失败，不代表服务端就一定没写成功，所以只要是一致的日志，跟raft也一样了吧？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505757,"discussion_content":"加一颗星:)，加一颗星，这里的“误解”指什么呢？问题2：是的；问题3：能更具体点，或者举个例子吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606798003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248834,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1600329009,"is_pvip":true,"replies":[{"id":"96274","content":"加一颗星:)，ZAB比paxos实现（chubby）新，比Raft旧，相比Raft，ZAB没有优势，究其原因，技术是不断继承，和发展的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606798184,"ip_address":"","comment_id":248834,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600329009","product_id":100046101,"comment_content":"multipaxos假设就是不相关的吧，相关的数据，应该用paxos来决议log，这样就一致了。fast paxos也可以一次rpc一个提交，不过效率应该不如raft流模式。 zab比raft和paxos没有优势了吧？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505756,"discussion_content":"加一颗星:)，ZAB比paxos实现（chubby）新，比Raft旧，相比Raft，ZAB没有优势，究其原因，技术是不断继承，和发展的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606798184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240247,"user_name":"Gavin","can_delete":false,"product_type":"c1","uid":1616970,"ip_address":"","ucode":"A5735665E303FD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2UXuSevhia94o9Eky4OfMuSictaldxcqpjGuvRCOcvjIIoVBAENLEZbv2lgwmwC8icK1ZrUcneNtiaeFBV8MT3uzNg/132","comment_is_top":false,"comment_ctime":1596808626,"is_pvip":false,"replies":[{"id":"92470","content":"加一颗星:)，不会的，TCP基于seq序号实现了TCP重组，能保证数据被严格按照顺序接收到。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1602600915,"ip_address":"","comment_id":240247,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596808626","product_id":100046101,"comment_content":"在创建完提案之后，主节点会基于 TCP 协议，并按照顺序将提案广播到其他节点。这样就能保证先发送的消息，会先被收到，保证了消息接收的顺序性。<br><br>请问下，tcp协议有可能先发的消息后收到吧？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503388,"discussion_content":"加一颗星:)，不会的，TCP基于seq序号实现了TCP重组，能保证数据被严格按照顺序接收到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602600915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213424,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1588410476,"is_pvip":true,"replies":[{"id":"80030","content":"加一颗星:)，这样会导致性能很低，在实际场景中很难落地。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589233508,"ip_address":"","comment_id":213424,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588410476","product_id":100046101,"comment_content":"multi-paxos中没有形成多数派的值y，为什么要被c选定呢？c应该忽略不是多数派的y吧。还有x和y的顺序性，完全可以在客户端解决啊，等x成功后再提新y啊。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493776,"discussion_content":"加一颗星:)，这样会导致性能很低，在实际场景中很难落地。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589233508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212442,"user_name":"冷笑的花猫","can_delete":false,"product_type":"c1","uid":1119029,"ip_address":"","ucode":"6C368FBB577470","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/35/45391914.jpg","comment_is_top":false,"comment_ctime":1588124607,"is_pvip":false,"replies":[{"id":"80137","content":"加一颗星:)，看到的不是很明白，我按照我的理解，先解答下，如果理解有出入，我再补充。“剔除follower”是指什么呢？是指从集群中将这个节点动态移除吗？如果是这个意思，不需要剔除follower的，如果网络抖动，应该到follower和leader间的长连接，follower可能会读超时，触发领导者选举，也就是处于looking状态，此时这个节点是不能处理读写请求的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589310222,"ip_address":"","comment_id":212442,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1588124607","product_id":100046101,"comment_content":"请教老师一个问题。zk用啥标准剔除follower？比如因网络抖动，zk一段时间内发送给follower的事务信息都是失败。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493507,"discussion_content":"加一颗星:)，看到的不是很明白，我按照我的理解，先解答下，如果理解有出入，我再补充。“剔除follower”是指什么呢？是指从集群中将这个节点动态移除吗？如果是这个意思，不需要剔除follower的，如果网络抖动，应该到follower和leader间的长连接，follower可能会读超时，触发领导者选举，也就是处于looking状态，此时这个节点是不能处理读写请求的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589310222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315548,"discussion_content":"感觉楼主说的应该是zk客户端到zk的连接…网络抖动会导致客户端连接不可用？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603288414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}