{"id":267843,"title":"29 | 战术设计：如何像写故事一样找出模型？","content":"<p>你好，我是郑晔！</p><p>在上一讲中，我们讲了 DDD 中的战略设计，学习如何将识别出来的不同模型放到不同的限界上下文中。那么，接下来，我们就该做更具体的工作了，也就是如何设计模型。在 DDD 中，把具体的模型找出来的做法有一个更响亮的名字：战术设计。</p><p>战术设计同样也包含了很多概念，比如，实体、值对象、聚合、领域服务、应用服务等等。有这么多概念，我们该如何区分和理解他们呢？我们同样需要一根主线。</p><p>其实，我们可以把战术设计理解成写一个故事。你知道怎样去写个故事吗？写故事通常都是有一定套路的。我们要先构建好故事的背景，然后，要设定不同的角色，接下来，创建角色之间的关系，最后，我们要安排人物之间互动起来，形成故事。</p><p>对于战术设计而言，故事的背景就是我们面对的领域问题，剩下的就是我们在这个故事背景下，要找出不同的角色，找出角色之间的关系，让它们互动起来，这样，我们就有了故事，也完成了战术设计。</p><p>接下来，我们就来看看，战术设计这个故事模板，我们应该怎么填？</p><h2>角色：实体、值对象</h2><p>我们的首要任务就是设计角色，在战术设计中，我们的角色就是各种名词。我们在初学面向对象的时候，课本上的内容就告诉我们要识别出一个一个的模型，其实，就是让我们识别名词。</p><!-- [[[read_end]]] --><p>识别名词也是很多人对于面向对象的直觉反应。有一些设计方法会先建立数据库表，这种做法本质上也是从识别名词入手的。<strong>我们在战术设计中，要识别的名词包括了实体和值对象。</strong></p><p>什么是实体呢？<strong>实体（Entity）指的是能够通过唯一标识符标识出来的对象。</strong></p><p>我们都知道，在业务处理中，有一类对象会有一定的生命周期。我以电商平台上的订单为例，它会在一次交易的过程中存在，而在它的生命周期中，它的一些属性可能会有变化，比如说，订单的状态刚开始是下单完成，然后在支付之后，变成了已支付，在发货之后就变成了已发货。</p><p>但是这个订单始终都是这个订单，因为这个订单有唯一的标识符，也就是订单号，订单号作为它的标识符能将它标识出来。你可以通过订单号查询它的状态，可以修改订单的一些信息，比如，配送的地址。像这种通过唯一标识符标识出来的对象，就是实体。</p><p>其实，大多数程序员对于实体并不陌生，因为在各种设计方法中，都有相应的方法识别实体。你甚至可以简单粗暴地将它理解成数据库里存储的对象，虽然这种理解并不完全正确。</p><p><strong>还有一类对象称为值对象，它就表示一个值。</strong>比如，订单地址，它是由省、市、区和具体住址组成。它同实体的差别在于，它没有标识符。之所以它叫值对象，是因为它表现得像一个值。值对象可能会有很多属性，而要想判断值对象是否相等，我们就要判断这些属性是否相等。对于两个订单地址来说，只有省、市、区和具体住址等多个属性都相同，我们才认为它们是同一个地址。</p><p>实体的属性是可以变的，只要标识符不变，它就还是那个实体。但是，值对象的属性却不能变，一旦变了，它就不再是那个对象，所以，我们会把值对象设置成一个不变的对象。在前面讲函数式编程的不变性时，我给你介绍了不变性的诸多好处，这里也完全适用于值对象。</p><p>那你现在应该懂了，<strong>我们为什么要将对象分为实体和值对象？其实主要是为了分出值对象</strong>，也就是把变的对象和不变的对象区分开。在传统的做法中，找出实体是你一定会做的一件事，而在不同的模型中，区分出值对象是我们通常欠缺的考虑。</p><p>一方面，我们会把一些值对象当作实体，但其实这种对象并不需要一个标识符；另一方面，也是更重要的，就是很多值对象我们并没有识别出来，比如，很多人会用一个字符串表示电话号码，会用一个 double 类型表示价格，而这些东西其实都应该是一个值对象。</p><p>之所以说这里缺少了对象，原因就在于，这里用基本类型是没有行为的。在 DDD 的对象设计中，对象应该是有行为的。比如，价格其实要有精度的限制，计算时要有自己的计算规则。如果不用一个类将它封装起来，这种行为就将散落在代码的各处，变得难以维护。</p><p>其实，我们在讨论面向对象的封装时就已经说过了，只有数据的对象是封装没做好的结果，一个好的封装应该是基于行为的。在 DDD 的相关讨论中，经常有人批评所谓的“贫血模型”，说的其实就是这种没有行为的对象。你可以回头复习一下<a href=\"https://time.geekbang.org/column/article/252605\">第15讲</a>，我就不在这里赘述了。</p><h2>关系：聚合和聚合根</h2><p>选定了角色之后，接下来，我们就该考虑它们的关系了。</p><p>在传统的开发中，我们经常会遇到一个难题。比如，如果我有一个订单，它有自己对应的订单项。问题来了，我取订单的时候，该不该把订单项一起取出来呢？取吧，怕一次取出来东西太多；不取吧？要是我用到了，再去一条一条地取，太浪费时间了。</p><p>这就是典型的一对多问题，只不过，在其他场景中，主角就变成了各种其他的对象。</p><p>不过，这也是一种用技术解决业务问题的典型思路。我们之所以这么纠结，主要就是因为我们考虑问题的出发点是技术，如果我们把考虑问题的出发点放到业务上呢？</p><p>战术设计就给了我们这样一个思考的维度：聚合。<strong>聚合（Aggregate）就是多个实体或值对象的组合，这些对象是什么关系呢？你可以理解为它们要同生共死。</strong>比如，一个订单里有很多个订单项，如果这个订单作废了，这些订单项也就没用了。所以，我们基本上可以把订单和订单项看成一个单元，订单和订单项就是一个聚合。</p><p>学习 DDD 时，有人会告诉你，聚合要保证事务（Transaction）一致性。简言之，就是要更新就一起更新，要删除就一起删除。只要你理解了它们是一个整体，你就不难理解为什么这些对象要一起操作了。</p><p>不过，一个聚合里可以包含很多个对象，每个对象里还可以继续包含其它的对象，就像一棵大树一层层展开。但重点是，这是一棵树，所以，它只能有一个树根，这个根就是聚合根。</p><p>聚合根（Aggregate Root），就是从外部访问这个聚合的起点。我还以上面的订单和订单项为例，在订单和订单项组成的这个聚合里，订单就是聚合根。因为你想访问它们，就要从订单入手，你要通过订单号找到订单，然后，把相关的订单项也一并拿出来。</p><p>其实，我们可以把所有的对象都看成是一种聚合。只不过，有一些聚合根下还有其他的对象，有一些没有而已。这样一来，你就有了一个统一的视角看待所有的对象了。所以，我们也可以用统一的标准要求聚合，比如，聚合不能设计得太大。你有没有发现，这其实就是单一职责原则在聚合上的应用。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/f7/7fca1371e0b3443b0bceaa412cd6d2f7.jpg?wh=2284*1285\" alt=\"\"></p><p>那如果不同的聚合之间有关系怎么办？比如，我要在订单项里知道到底买了哪个产品，这个时候，我在订单项里保存的不是完整的产品信息，而是产品ID。还记得吗？我们在前面说过，实体是有唯一标识符的。如果需要，我们就可以根据产品 ID 找出产品信息。</p><p>有了对于聚合的理解，做设计的时候，我们就要识别出哪些对象可以组成聚合。所以，我们的一对多问题也就不再是问题了：是聚合的，我们可以一次都拿出来；不是聚合的，我们就靠标识符按需提取。<strong>当你纠结于技术时，先想想自己是不是解错了问题。</strong></p><h2>互动：工厂、仓库、领域服务、应用服务</h2><p>我们现在有角色了，也确定关系了。接下来，我们就要安排互动了，也就是说，我们要把故事的来龙去脉讲清楚了。</p><p>还记得<a href=\"https://time.geekbang.org/column/article/266819\">第27讲</a>的事件风暴吗？我们在其中识别出了事件和动作，而故事的来龙去脉其实就是这些事件和动作。因为有了各种动作，各种角色才能够生动地活跃起来，整个故事才得以展开。</p><p>动作的结果会产生出各种事件，也就是<strong>领域事件</strong>，领域事件相当于记录了业务过程中最重要的事情。相对于 DDD 中的其他概念，领域事件加入 DDD 大家庭是比较晚的，但因为其价值所在，它迅速地就成了DDD 中不可或缺的一个重要概念。</p><p>因为领域事件是一条很好的主线，可以帮我们梳理出业务上的变化。同时，在如今这个分布式系统此起彼伏的时代，领域事件可以帮助我们让系统达成最终一致的状态。</p><p>那各种动作又是什么呢？那就是我们在写作中常用到的动词。在战术设计中，<strong>领域服务（Domain Service）</strong>就是动词。只不过，它操作的目标是领域对象，更准确地说，它操作的是聚合根。</p><p>动词，是我们在学习面向对象中最为缺少的一个环节，很多教材都会教你如何识别名词。在实际编码中，我们会大量地使用像 Handler、Service之类的名字，它们其实就是动词。</p><p>你可能会问，按照前面的说法，动作不应该在实体或值对象上吗？确实是这样的，能放到这些对象上的动作固然可以，但是，总会有一些动作不适合放在这些对象上面，比如，要在两个账户之间转账，这个操作牵扯到两个账户，肯定不能放到一个实体类中。这样的动作就可以放到领域服务中。</p><p>还有一类动作也比较特殊，就是创建对象的动作。显然，这个时候还没有对象，所以，这一类的动作也要放在领域服务上。这种动作对应的就是<strong>工厂（Factory）</strong>。这个工厂其实就是设计模式中常提到的工厂，有了设计模式的基础之后，你理解起来就容易多了。</p><p>需要注意的是，由于聚合的存在，聚合里的各种子对象都要从聚合根创建出来，以便保证二者之间的关联。比如，订单项的产生应该从订单上的订单项工厂方法创建出来。而聚合根本身的产生，就可以由领域服务来扮演工厂的角色。</p><p>对于这些领域对象，无论是创建，还是修改，我们都需要有一个地方把变更的结果保存下来，而承担这个职责的就是<strong>仓库（Repository）</strong>。你可以简单地把它理解成持久化操作（当然，在不同的项目中，具体的处理还是会有些差别的）。</p><p>其实，很多人熟悉的 CRUD，可以对应成一个一个的领域服务。如果我们用战术设计的做法来表示，应该是这样：</p><ul>\n<li>创建（Create），从工厂中创建出一个对象，然后，保存到仓库中；</li>\n<li>查询（Read），通过仓库进行查询；</li>\n<li>修改（Update），通过仓库找到要修改的对象，修改之后，存回到仓库中；</li>\n<li>删除（Delete），通过仓库找到要删除的对象，然后，在仓库中删除。</li>\n</ul><p>当然，这种简单的映射并不好，没有体现出业务含义，这里只是为了帮助你把已有知识和新知识之间架设起桥梁。</p><p>当我们把领域服务构建起来之后，核心的业务逻辑基本就成型了。但要做一个系统，肯定还会有一些杂七杂八的东西，比如，用户要修改一个订单，但首先要保证这个订单是他的。在 DDD中，承载这些内容的就是<strong>应用服务</strong>。</p><p>应用服务可以扮演协调者的角色，协调不同的领域对象、领域服务等完成客户端所要求的各种业务动作，所以，也有人把它称之为“工作流服务”。一般来说，一些与业务逻辑无关的内容都会放到应用服务中完成，比如，监控、身份认证等等。说到这里，我们已经说出了应用服务和领域服务之间的区别。</p><p><strong>应用服务和领域服务之间最大的区别就在于，领域服务包含业务逻辑，而应用服务不包含。</strong>至于哪些东西算是业务逻辑，就要结合具体的项目来看了。</p><p>至此，我已经把战术设计这个故事模板给你讲了一遍，DDD 也算完整地讲了一遍了。你现在应该对DDD的各种基础概念之间是个什么关系、如果要做领域驱动设计，要有怎样一个步骤等有一个基本的认识了。</p><p>当然，仅凭三讲的篇幅，我们想要完整地理解领域驱动设计几乎是不可能的。但是你现在至少有了一个框架，当你再去学习 DDD 中那些让人眼花缭乱的知识时，你就不会轻易地迷失了。</p><p>Vaughn Vernon 写过两本关于 DDD 的书，是现在市面上比较好的 DDD 学习材料。建议你先阅读《领域驱动设计精粹》，这本书可以帮你快速入门；然后你再看《实现领域驱动设计》，这本书很厚，但讲得要更细致一些。当然，想要真正想学会 DDD，还是需要你在实际项目中进行练习。</p><h2>总结时刻</h2><p>今天，我们讲了DDD 中的战术设计，我们把战术设计当作了一个故事模板。让你先去识别角色，也就是找到<strong>实体和值对象</strong>。一个简单的区分就是，能通过唯一标识符识别出来的就是实体，只能通过字段组合才能识别出来的是值对象。</p><p>然后我们应该找到角色之间的关系，也就是<strong>聚合</strong>。操作聚合关键点在于找到<strong>聚合根</strong>。当聚合根不存在时，聚合中的对象也就不再有价值了。</p><p>有了角色及其关系，接下来就是找到各种动词，让故事生动起来。这里，我们讲到了动作，也就是<strong>领域服务</strong>，以及动作的结果，也就是<strong>领域事件</strong>，还有创建对象的<strong>工厂</strong>和保存对象的<strong>仓库</strong>。这些内容构成了我们最核心的业务逻辑。一些额外的工作，我们可以放到外围来做，这就是<strong>应用服务</strong>。</p><p>通过这几讲关于DDD的学习，你知道了如何识别出各种对象。通过前面设计原则、设计模式的讲解，你知道了如何组织这些对象。至此，我已经把设计相关的主要知识给你讲过一遍了，你现在应该知道如何做设计了。</p><p>那现在我们已经有了这样的基础，我们就可以做自己的设计了。从下一讲开始，我们就来体验一下，如何在真实的项目中做设计。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>战术设计，就是按照模板寻找相应的模型。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/1f/5a/1f4e21934c11a3b984aafe2238745c5a.jpg?wh=2284*2573\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你分享一下，你可以按照战术设计的模板，简要地描述一下你的项目吗？欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"28 | 战略设计：如何划分系统的模块？","id":267837},"right":{"article_title":"30 | 程序库的设计：Moco是如何解决集成问题的？","id":267856}},"comments":[{"had_liked":false,"id":239030,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1596418992,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"126150470576","product_id":100052601,"comment_content":"感觉郑老师最厉害的地方就是讲出了why，而不单是说how。很多文章会说“实体有唯一标识符”，很正确又无用。 只有结合了“是聚合的，我们可以一次都拿出来；不是聚合的，我们就靠标识符按需提取”，我才有了恍然大悟的感觉。","like_count":29,"discussions":[{"author":{"id":1002247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4b/07/992d233f.jpg","nickname":"王大宝","note":"","ucode":"CBFE14C7E672C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297044,"discussion_content":"被你一总结我记的更牢了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596758109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240649,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1597026845,"is_pvip":false,"replies":[{"id":"88842","content":"我和张逸是多年老友，他太能写了。","user_name":"作者回复","comment_id":240649,"uid":"1258861","ip_address":"","utype":1,"ctime":1597037822,"user_name_real":"郑晔"}],"discussion_count":4,"race_medal":0,"score":"74611470877","product_id":100052601,"comment_content":"结合 张逸老师的《领域驱动设计实践》，完美","like_count":18,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503511,"discussion_content":"我和张逸是多年老友，他太能写了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597037822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367196,"discussion_content":"你好，张逸老师的这本书哪里可以买，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618288444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":367306,"discussion_content":"这是Gitchat中的一门课，书预计今年6月份出《解构领域驱动设计》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618317461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":367196,"ip_address":""},"score":367306,"extra":""},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367346,"discussion_content":"多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618325516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":367306,"ip_address":""},"score":367346,"extra":""}]}]},{"had_liked":false,"id":239813,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1596669013,"is_pvip":true,"replies":[{"id":"88731","content":"大家都不容易。","user_name":"作者回复","comment_id":239813,"uid":"1258861","ip_address":"","utype":1,"ctime":1596865268,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"48841309269","product_id":100052601,"comment_content":"设计在我们这个行业实在太缺失，因为几乎没人懂，软件开发人员最多，产品经理这几年也发展下来也多了不少，软件设计大家还在摸着石头过河。","like_count":11,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503229,"discussion_content":"大家都不容易。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596865268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240877,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1597109254,"is_pvip":false,"replies":[{"id":"89054","content":"这个理解没问题，非常棒！","user_name":"作者回复","comment_id":240877,"uid":"1258861","ip_address":"","utype":1,"ctime":1597125823,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":1,"score":"40251814918","product_id":100052601,"comment_content":"想到两点，请老师指正。<br>1. 订单和订单项的例子中，订单项也是一个实体，而不是值对象吧，因为订单项中的各个属性有可能被修改，比如价格或数量，但它还是这个订单项。无论是存储在mongodb的一张table中，还是mysql里面的两张table中。<br>2. 结合老师的分析，我又想到了另一个例子，比如当前这边文章（Article）和文章评论（ArticleComment）。<br>从聚合概念上分析，文章是作者创建的，而评论是读者创建的，但如果文章被删除了，那么这些评论也就跟着要删除，所以他们不同生但共死。从识别聚合上分析，获取文章时，也无法一次性把所有评论获取到。","like_count":9,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503583,"discussion_content":"这个理解没问题，非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597125823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1566803,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIN5CJtk6Hyebmol0KadyXicsHLd0tdndMibrfPsMUtpddwdkGicf52DL6FMTkibOrk7Lfibqiab2IzUfUg/132","nickname":"Sohnny","note":"","ucode":"8876357BCF5CAD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344834,"discussion_content":"在设计模式里有聚合与组合的关系，订单和订单项是组合关系，文章和评论是聚合关系吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611582410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239752,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1596633616,"is_pvip":false,"replies":[{"id":"88546","content":"这种普通的业务系统，用DDD是非常合适的。这和微服务没有关系，你可以把所有子域都放在一个限界上下文里。","user_name":"作者回复","comment_id":239752,"uid":"1258861","ip_address":"","utype":1,"ctime":1596662661,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"23071470096","product_id":100052601,"comment_content":"老师，我们平时工作中的那种不怎么复杂的公司内务管理系统可以用Ddd的思想设计和开发，合适吗？如果没打算微服务的话","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503205,"discussion_content":"这种普通的业务系统，用DDD是非常合适的。这和微服务没有关系，你可以把所有子域都放在一个限界上下文里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596662661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273789,"user_name":"jakimli","can_delete":false,"product_type":"c1","uid":1766189,"ip_address":"","ucode":"0EE5197E08A8C9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/sWJX4YJIuhibOOScX09NbBp2Fn0lItp1a2iaIQQWV5MfULria4jByUlsq4FDsxI9JNEXJibCcNLLib5cPRd4fh8zJ4A/132","comment_is_top":false,"comment_ctime":1610677545,"is_pvip":false,"replies":[{"id":"99203","content":"稳定的部分放到领域服务里，易变的部分放到应用服务里。<br><br>举个例子，下单的过程包括下了商品订单之后，要发起支付。在这个过程里面，下商品订单和下支付订单两个过程就是领域服务，因为它们基本上是不变的，但下商品订单之后就立即下支付订单，这就属于一个过程的协调了，属于易变的部分，也可能下商品订单之后，再经过系列的其他过程再支付，所以，下单过程属于应用服务。","user_name":"作者回复","comment_id":273789,"uid":"1258861","ip_address":"","utype":1,"ctime":1610760638,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":0,"score":"18790546729","product_id":100052601,"comment_content":"请教一下，领域服务和应用服务的区别理解的不是很到位，应用服务负责协调领域对象合领域服务来完成各种业务动作，这种协调是否也是业务逻辑呢？","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513809,"discussion_content":"稳定的部分放到领域服务里，易变的部分放到应用服务里。\n\n举个例子，下单的过程包括下了商品订单之后，要发起支付。在这个过程里面，下商品订单和下支付订单两个过程就是领域服务，因为它们基本上是不变的，但下商品订单之后就立即下支付订单，这就属于一个过程的协调了，属于易变的部分，也可能下商品订单之后，再经过系列的其他过程再支付，所以，下单过程属于应用服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610760638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1766189,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/sWJX4YJIuhibOOScX09NbBp2Fn0lItp1a2iaIQQWV5MfULria4jByUlsq4FDsxI9JNEXJibCcNLLib5cPRd4fh8zJ4A/132","nickname":"jakimli","note":"","ucode":"0EE5197E08A8C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342703,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610783691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239247,"user_name":"三生","can_delete":false,"product_type":"c1","uid":1606669,"ip_address":"","ucode":"1DE1A2693A5E33","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/0d/4e289b94.jpg","comment_is_top":false,"comment_ctime":1596466340,"is_pvip":false,"replies":[{"id":"88401","content":"从大部分人习惯的角度看，确实是这样的，因为应用服务常常对应着你的API。但核心是领域服务才是核心，是不可替换的，而应用服务则可能根据实际的情况发生改变。","user_name":"作者回复","comment_id":239247,"uid":"1258861","ip_address":"","utype":1,"ctime":1596508921,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"18776335524","product_id":100052601,"comment_content":"感觉应用服务才是业务的实现者，领域服务是提供者，老师如何理解上面的","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503032,"discussion_content":"从大部分人习惯的角度看，确实是这样的，因为应用服务常常对应着你的API。但核心是领域服务才是核心，是不可替换的，而应用服务则可能根据实际的情况发生改变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596508921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250752,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1601211118,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"14486113006","product_id":100052601,"comment_content":"关于订单项里面不保存完整的产品信息，只保存产品 ID，是否还需要保存购买时的价格？因为价格是会变的。按照文中的说法，这个产品信息应该是不聚合的，那么价格反而需要聚合在订单项里面。<br><br>那么最终的设计是否是，订单项作为聚合项与订单实体同生共死，而产品 ID 和价格、数量都保存在订单项中，而产品信息是非聚合项，根据产品 ID 查询得到。<br><br>三篇专栏文章，基本上讲明白了领域驱动设计的脉络，也给出了不少继续学习的线索。现在回过头来看领域驱动设计的一些概念，似乎已经有了初步的理解。<br><br>张逸老师的《领域驱动设计实践》是在 GitChat 上的专栏，看上去还不错。感觉现在领域驱动设计的学习材料已经不少了，就差落地实践了。<br><br>看到留言里面说，行业内开发人员和产品经理都不少，而设计比较缺，那么由谁来负责软件设计呢？架构师么。","like_count":3},{"had_liked":false,"id":239680,"user_name":"大米","can_delete":false,"product_type":"c1","uid":1018813,"ip_address":"","ucode":"BE41253E5A77A5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/bd/84e338d3.jpg","comment_is_top":false,"comment_ctime":1596613897,"is_pvip":false,"replies":[{"id":"88514","content":"CQRS的话，你追求的是最终一致性，读这端拿到的你就应该认为它是最新数据。显然，如果你的目标是强一致，就别考虑CQRS。","user_name":"作者回复","comment_id":239680,"uid":"1258861","ip_address":"","utype":1,"ctime":1596620427,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"14481515785","product_id":100052601,"comment_content":"“不是聚合的，我们就靠标识符按需提取”，<br>用CQRS落地DDD的话，如果按标识符去查询模型获取数据，有可能获取的不是最新的数据（因为写模型更新了，但查询模型更新是有延迟的），像这种极限情况会有什么问题吗？难道应该去通过命令去查询写的模型？怎么去理解和解决这种情况呢？","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503184,"discussion_content":"CQRS的话，你追求的是最终一致性，读这端拿到的你就应该认为它是最新数据。显然，如果你的目标是强一致，就别考虑CQRS。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596620427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239328,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1596504993,"is_pvip":false,"replies":[{"id":"88471","content":"需要配合其他更具体的DDD材料进一步学习。","user_name":"作者回复","comment_id":239328,"uid":"1258861","ip_address":"","utype":1,"ctime":1596555132,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"14481406881","product_id":100052601,"comment_content":"总结一下<br>战术设计首先识别角色（名词），也就是实体和值对象，然后理清楚角色之间的关系，也就是聚合。<br>最后寻找动词使用领域服务，领域事件等将各个角色的行为组织起来<br><br>作为客户端开发者，我觉得这几讲我都感觉看懂了，但是又好像没懂，可能是对 DDD 相关概念的理解还不是很深刻，没有实际业务的操作支撑<br>","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503066,"discussion_content":"需要配合其他更具体的DDD材料进一步学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596555132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239039,"user_name":"胖子","can_delete":false,"product_type":"c1","uid":1037760,"ip_address":"","ucode":"E6371346288A87","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIuRQaZX70dsBg6khub2VPM1eQAP9IWRWxgOFed3ia4kXyNJInFRicWJ0ibf2YmLsOvJa1sGygGpmJg/132","comment_is_top":false,"comment_ctime":1596420496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186355088","product_id":100052601,"comment_content":"领域事件可以帮助我们让系统达成最终一致的状态。怎么理解？能举例说明一下吗？","like_count":2},{"had_liked":false,"id":348271,"user_name":"星期一","can_delete":false,"product_type":"c1","uid":1125327,"ip_address":"","ucode":"2957D71C555E43","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/cf/bfb4d21f.jpg","comment_is_top":false,"comment_ctime":1654920839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5949888135","product_id":100052601,"comment_content":"如果一个订单下有很多订单项， 如果一次从仓储取出来会有性能问题<br><br>这种场景下 是否 订单和订单项是否可以独立两个聚合，订单项可以分页取出<br><br>类似的问题，一对多，这个多足够大，这个多是否可以独立为一个聚合","like_count":1},{"had_liked":false,"id":319317,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1635740595,"is_pvip":false,"replies":[{"id":"115816","content":"值对象是车牌号，实体是车牌。","user_name":"作者回复","comment_id":319317,"uid":"1258861","ip_address":"","utype":1,"ctime":1635856508,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":1,"score":"5930707891","product_id":100052601,"comment_content":"想了想，从停车管理系统来看，车牌号（比如：京A123F9），感觉是一个值对象，它的值变化了，就不再是这个车牌了，按车牌进行收费。<br><br>但车子可以换牌，此时我觉得把车牌设计成实体更好，车牌与不同的车有关联关系，在关联表里面有车辆Id，状态，生失效时间等。出入记录表中可以不用记录这个关联 id，只用车牌号，但查询出入历史记录，找到那辆车，需要在关联表上进行状态和时间上的过滤。<br><br>不过，这种换牌的概率很低。老师，您觉得我的理解是否有问题吗？谢谢。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529590,"discussion_content":"值对象是车牌号，实体是车牌。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635856508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411408,"discussion_content":"幡然醒悟，谢谢老师🙏指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635922737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240692,"user_name":"82","can_delete":false,"product_type":"c1","uid":1476080,"ip_address":"","ucode":"F6BD958453701B","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/f0/d603e299.jpg","comment_is_top":false,"comment_ctime":1597035298,"is_pvip":false,"replies":[{"id":"88844","content":"欢迎把它分享给更多的朋友，大家一起前行！","user_name":"作者回复","comment_id":240692,"uid":"1258861","ip_address":"","utype":1,"ctime":1597037896,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"5892002594","product_id":100052601,"comment_content":"老师讲的很棒！有股醍醐灌顶的感觉！这门课已经物超所值！","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503529,"discussion_content":"欢迎把它分享给更多的朋友，大家一起前行！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597037896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356118,"user_name":"甜宝仙女的专属饲养员","can_delete":false,"product_type":"c1","uid":1443145,"ip_address":"北京","ucode":"6D2039BA22551F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eozpyAUaM6ra1hqeIsd4v0fulS4zVmxDM3LQyqGo0BFM141QpQnSib6oHdQricGrRxusp5rflGn54ew/132","comment_is_top":false,"comment_ctime":1661996835,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661996835","product_id":100052601,"comment_content":"DCI感觉特别适合结尾的脑图","like_count":0},{"had_liked":false,"id":346441,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653138920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653138920","product_id":100052601,"comment_content":"战术设计，就是按照模板寻找相应的模型。--记下来","like_count":0},{"had_liked":false,"id":342323,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650190404,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650190404","product_id":100052601,"comment_content":"好像懂了 又好像没懂，还要多花点时间消化下。","like_count":0},{"had_liked":false,"id":315737,"user_name":"Bravery168","can_delete":false,"product_type":"c1","uid":1232973,"ip_address":"","ucode":"DB08AEFBD6DF2B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","comment_is_top":false,"comment_ctime":1633956668,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1633956668","product_id":100052601,"comment_content":"赞，领域驱动设计的基础概念，郑老师的文章不长，不过讲得很透彻。","like_count":0},{"had_liked":false,"id":308328,"user_name":"asusual","can_delete":false,"product_type":"c1","uid":2735468,"ip_address":"","ucode":"AF9AA546D3794F","user_header":"https://static001.geekbang.org/account/avatar/00/29/bd/6c/a988846d.jpg","comment_is_top":false,"comment_ctime":1629537244,"is_pvip":false,"replies":[{"id":"111707","content":"1. 这取决于你的业务，从目前的需求看来，二者之间只有这些区别，放在一起是可以的。<br>2. 你给出的结论是对的，有没有baseRefId与isBase等效，换言之，不需要isBase这个字段。<br>3. 放在一起和分出关系表都可以，现在的需求很简单，等关联关系上有属性的时候再拆开也来得及。","user_name":"作者回复","comment_id":308328,"uid":"1258861","ip_address":"","utype":1,"ctime":1629699402,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":0,"score":"1629537244","product_id":100052601,"comment_content":"郑大请教个问题关于Entity实体设计(假设为Course)<br><br>伪代码:<br>class Course {<br>  id:<br>  name:<br>  baseRefId:<br>  isBase:<br>}<br><br>业务是这样的: <br>   1.超级管理员可以创建出基础数据(base数据).  比如超级管理创建了一门课程叫&quot;设计之美&quot;<br>   2.普通管理员只能根据基础数据创建其他的课程. 比如普通管理员创建课程时,选择&quot;设计之美&quot;并修改名称为&quot;软件设计之美&quot;<br>问题: <br>   1.基础数据和普通数据放在同一张表中是否恰当?. 因为两者其实都是课程,差异在于普通课程里面,两个字段baseRefId指向基础数据(作用是让管理知道“软件设计之美”这门课程是从&quot;设计之美&quot;修改而来),isBase字段为false(作用是用来区别基础课程和非基础课程)<br>   2.baseRefId和isBase都可以表示出课程是否是基础课程. isBase可以从字段修改为方法:isBase(){<br>  baseRefId == null;<br>}. 这样合适吗?<br>   3.baseRefId实际上和Course实体根本没有关系,他只是描述A Course是否是从B Course修改而来. 这样看的话是否使用中间表来出来这个关系更好呢?","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525462,"discussion_content":"1. 这取决于你的业务，从目前的需求看来，二者之间只有这些区别，放在一起是可以的。\n2. 你给出的结论是对的，有没有baseRefId与isBase等效，换言之，不需要isBase这个字段。\n3. 放在一起和分出关系表都可以，现在的需求很简单，等关联关系上有属性的时候再拆开也来得及。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629699402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2735468,"avatar":"https://static001.geekbang.org/account/avatar/00/29/bd/6c/a988846d.jpg","nickname":"asusual","note":"","ucode":"AF9AA546D3794F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390237,"discussion_content":"谢谢 郑大！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629724922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300312,"user_name":"SochiLee","can_delete":false,"product_type":"c1","uid":1537865,"ip_address":"","ucode":"47596594EDF4D7","user_header":"https://static001.geekbang.org/account/avatar/00/17/77/49/445eea2d.jpg","comment_is_top":false,"comment_ctime":1625108668,"is_pvip":false,"replies":[{"id":"109198","content":"对啊，当然可以有行为了。","user_name":"作者回复","comment_id":300312,"uid":"1258861","ip_address":"","utype":1,"ctime":1625810313,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"1625108668","product_id":100052601,"comment_content":"值对象也是可以有行为的，是吗？文中这段“。在 DDD 的对象设计中，对象应该是有行为的。比如，价格其实要有精度的限制，计算时要有自己的计算规则。如果不用一个类将它封装起来，这种行为就将散落在代码的各处，变得难以维护”就是这个意思吧。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522707,"discussion_content":"对啊，当然可以有行为了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625810313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294401,"user_name":"磉盘","can_delete":false,"product_type":"c1","uid":1055624,"ip_address":"","ucode":"1C245991F30A73","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","comment_is_top":false,"comment_ctime":1621928607,"is_pvip":true,"replies":[{"id":"110799","content":"很好的总结","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628426376,"ip_address":"","comment_id":294401,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621928607","product_id":100052601,"comment_content":"战术设计对上下文进行详细设计，找到实体和值对象。确定实体之间的关系，形成高内聚，找到聚合根是对外的入口。在分析模型时不只是关注名词，也应该关注动词，把核心业务以外的逻辑放到应用服务中实现。<br><br>","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520639,"discussion_content":"很好的总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628426376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288066,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1618284886,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"1618284886","product_id":100052601,"comment_content":"老师，想到一个微信红包的例子，发出的红包和抢到的红包都是一个领域里面的，假如要实现的基本功能有：收发红包，以及查询我发出红包和我收到的红包记录，如何设计模型？<br>我是这样想的，发出的红包和抢到的红包不是聚合关系，因为他们生命周期不同，所以主要设计两个实体RedPacket和RedPacketConsume。RedPacket记录红包的基本信息（用户id，总金额，个数，红包的个数，已领取的个数，剩余金额等），而RedPacketConsume则记录抢红包的详情（红包id，抢到的用户id，抢到的金额等），查询发出的红包很简单，只要从RedPacket中获取即可，而收到的红包则需要根据用户id从RedPacketConsume中获取，同时把RedPacket的基本信息一把带回来。这样的话，感觉就像RedPacketConsume把RedPacket给聚合了，有点迷糊，还请老师指正下。","like_count":0,"discussions":[{"author":{"id":1016155,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/5b/768e64c8.jpg","nickname":"kobepeng","note":"","ucode":"59F986491764DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582609,"discussion_content":"感觉红包可以和订单类比，领取红包者相当于订单项，红包和领取红包者是一个聚合。通过好友编号与用户聚合发生关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659525522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259895,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1604883611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604883611","product_id":100052601,"comment_content":"战术设计，就是按照模板寻找相应的模型。","like_count":0},{"had_liked":false,"id":256286,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603592804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603592804","product_id":100052601,"comment_content":"领域服务、领域实体、工厂、仓库等等概念，对应到代码中应该是放到不同的包种吧，标准的做法应该怎么设计这些包的依赖关系呢？<br><br>问这个问题是因为在实际生产中，会有设计出循环依赖的情况。","like_count":0},{"had_liked":false,"id":241081,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1597188077,"is_pvip":true,"replies":[{"id":"100666","content":"自己想明白了，你也能讲清楚。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612432304,"ip_address":"","comment_id":241081,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597188077","product_id":100052601,"comment_content":"老师，总能把复杂问题讲得如此简单明了，实在佩服其功力。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503639,"discussion_content":"自己想明白了，你也能讲清楚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612432304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}