{"id":11523,"title":"03 | Java虚拟机是如何加载Java类的?","content":"<p>听我的意大利同事说，他们那边有个习俗，就是父亲要帮儿子盖栋房子。</p><p>这事要放在以前还挺简单，亲朋好友搭把手，盖个小砖房就可以住人了。现在呢，整个过程要耗费好久的时间。首先你要请建筑师出个方案，然后去市政部门报备、验证，通过后才可以开始盖房子。盖好房子还要装修，之后才能住人。</p><p>盖房子这个事，和Java虚拟机中的类加载还是挺像的。从class文件到内存中的类，按先后顺序需要经过加载、链接以及初始化三大步骤。其中，链接过程中同样需要验证；而内存中的类没有经过初始化，同样不能使用。那么，是否所有的Java类都需要经过这几步呢？</p><p>我们知道Java语言的类型可以分为两大类：基本类型（primitive types）和引用类型（reference types）。在上一篇中，我已经详细介绍过了Java的基本类型，它们是由Java虚拟机预先定义好的。</p><p>至于另一大类引用类型，Java将其细分为四种：类、接口、数组类和泛型参数。由于泛型参数会在编译过程中被擦除（我会在专栏的第二部分详细介绍），因此Java虚拟机实际上只有前三种。在类、接口和数组类中，数组类是由Java虚拟机直接生成的，其他两种则有对应的字节流。</p><p>说到字节流，最常见的形式要属由Java编译器生成的class文件。除此之外，我们也可以在程序内部直接生成，或者从网络中获取（例如网页中内嵌的小程序Java applet）字节流。这些不同形式的字节流，都会被加载到Java虚拟机中，成为类或接口。为了叙述方便，下面我就用“类”来统称它们。</p><!-- [[[read_end]]] --><p>无论是直接生成的数组类，还是加载的类，Java虚拟机都需要对其进行链接和初始化。接下来，我会详细给你介绍一下每个步骤具体都在干些什么。</p><h2>加载</h2><p>加载，是指查找字节流，并且据此创建类的过程。前面提到，对于数组类来说，它并没有对应的字节流，而是由Java虚拟机直接生成的。对于其他的类来说，Java虚拟机则需要借助类加载器来完成查找字节流的过程。</p><p>以盖房子为例，村里的Tony要盖个房子，那么按照流程他得先找个建筑师，跟他说想要设计一个房型，比如说“一房、一厅、四卫”。你或许已经听出来了，这里的房型相当于类，而建筑师，就相当于类加载器。</p><p>村里有许多建筑师，他们等级森严，但有着共同的祖师爷，叫启动类加载器（bootstrap class loader）。启动类加载器是由C++实现的，没有对应的Java对象，因此在Java中只能用null来指代。换句话说，祖师爷不喜欢像Tony这样的小角色来打扰他，所以谁也没有祖师爷的联系方式。</p><p>除了启动类加载器之外，其他的类加载器都是java.lang.ClassLoader的子类，因此有对应的Java对象。这些类加载器需要先由另一个类加载器，比如说启动类加载器，加载至Java虚拟机中，方能执行类加载。</p><p>村里的建筑师有一个潜规则，就是接到单子自己不能着手干，得先给师傅过过目。师傅不接手的情况下，才能自己来。在Java虚拟机中，这个潜规则有个特别的名字，叫双亲委派模型。每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。</p><p>在Java 9之前，启动类加载器负责加载最为基础、最为重要的类，比如存放在JRE的lib目录下jar包中的类（以及由虚拟机参数-Xbootclasspath指定的类）。除了启动类加载器之外，另外两个重要的类加载器是扩展类加载器（extension class loader）和应用类加载器（application class loader），均由Java核心类库提供。</p><p>扩展类加载器的父类加载器是启动类加载器。它负责加载相对次要、但又通用的类，比如存放在JRE的lib/ext目录下jar包中的类（以及由系统变量java.ext.dirs指定的类）。</p><p>应用类加载器的父类加载器则是扩展类加载器。它负责加载应用程序路径下的类。（这里的应用程序路径，便是指虚拟机参数-cp/-classpath、系统变量java.class.path或环境变量CLASSPATH所指定的路径。）默认情况下，应用程序中包含的类便是由应用类加载器加载的。</p><p>Java 9引入了模块系统，并且略微更改了上述的类加载器<a href=\"https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-A868D0B9-026F-4D46-B979-901834343F9E\">1</a>。扩展类加载器被改名为平台类加载器（platform class loader）。Java SE中除了少数几个关键模块，比如说java.base 是由启动类加载器加载之外，其他的模块均由平台类加载器所加载。</p><p>除了由Java核心类库提供的类加载器外，我们还可以加入自定义的类加载器，来实现特殊的加载方式。举例来说，我们可以对class文件进行加密，加载时再利用自定义的类加载器对其解密。</p><p>除了加载功能之外，类加载器还提供了命名空间的作用。这个很好理解，打个比方，咱们这个村不讲究版权，如果你剽窃了另一个建筑师的设计作品，那么只要你标上自己的名字，这两个房型就是不同的。</p><p>在Java虚拟机中，类的唯一性是由类加载器实例以及类的全名一同确定的。即便是同一串字节流，经由不同的类加载器加载，也会得到两个不同的类。在大型应用中，我们往往借助这一特性，来运行同一个类的不同版本。</p><h2>链接</h2><p>链接，是指将创建成的类合并至Java虚拟机中，使之能够执行的过程。它可分为验证、准备以及解析三个阶段。</p><p>验证阶段的目的，在于确保被加载类能够满足Java虚拟机的约束条件。这就好比Tony需要将设计好的房型提交给市政部门审核。只有当审核通过，才能继续下面的建造工作。</p><p>通常而言，Java编译器生成的类文件必然满足Java虚拟机的约束条件。因此，这部分我留到讲解字节码注入时再详细介绍。</p><p>准备阶段的目的，则是为被加载类的静态字段分配内存。Java代码中对静态字段的具体初始化，则会在稍后的初始化阶段中进行。过了这个阶段，咱们算是盖好了毛坯房。虽然结构已经完整，但是在没有装修之前是不能住人的。</p><p>除了分配内存外，部分Java虚拟机还会在此阶段构造其他跟类层次相关的数据结构，比如说用来实现虚方法的动态绑定的方法表。</p><p>在class文件被加载至Java虚拟机之前，这个类无法知道其他类及其方法、字段所对应的具体地址，甚至不知道自己方法、字段的地址。因此，每当需要引用这些成员时，Java编译器会生成一个符号引用。在运行阶段，这个符号引用一般都能够无歧义地定位到具体目标上。</p><p>举例来说，对于一个方法调用，编译器会生成一个包含目标方法所在类的名字、目标方法的名字、接收参数类型以及返回值类型的符号引用，来指代所要调用的方法。</p><p>解析阶段的目的，正是将这些符号引用解析成为实际引用。如果符号引用指向一个未被加载的类，或者未被加载类的字段或方法，那么解析将触发这个类的加载（但未必触发这个类的链接以及初始化。）</p><p>如果将这段话放在盖房子的语境下，那么符号引用就好比“Tony的房子”这种说法，不管它存在不存在，我们都可以用这种说法来指代Tony的房子。实际引用则好比实际的通讯地址，如果我们想要与Tony通信，则需要启动盖房子的过程。</p><p>Java虚拟机规范并没有要求在链接过程中完成解析。它仅规定了：如果某些字节码使用了符号引用，那么在执行这些字节码之前，需要完成对这些符号引用的解析。</p><h2>初始化</h2><p>在Java代码中，如果要初始化一个静态字段，我们可以在声明时直接赋值，也可以在静态代码块中对其赋值。</p><p>如果直接赋值的静态字段被final所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被Java编译器标记成常量值（ConstantValue），其初始化直接由Java虚拟机完成。除此之外的直接赋值操作，以及所有静态代码块中的代码，则会被Java编译器置于同一方法中，并把它命名为&lt; clinit &gt;。</p><p>类加载的最后一步是初始化，便是为标记为常量值的字段赋值，以及执行&lt; clinit &gt;方法的过程。Java虚拟机会通过加锁来确保类的&lt; clinit &gt;方法仅被执行一次。</p><p>只有当初始化完成之后，类才正式成为可执行的状态。这放在我们盖房子的例子中就是，只有当房子装修过后，Tony才能真正地住进去。</p><p>那么，类的初始化何时会被触发呢？JVM规范枚举了下述多种触发情况：</p><ol>\n<li>当虚拟机启动时，初始化用户指定的主类；</li>\n<li>当遇到用以新建目标类实例的new指令时，初始化new指令的目标类；</li>\n<li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li>\n<li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li>\n<li>子类的初始化会触发父类的初始化；</li>\n<li>如果一个接口定义了default方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li>\n<li>使用反射API对某个类进行反射调用时，初始化这个类；</li>\n<li>当初次调用MethodHandle实例时，初始化该MethodHandle指向的方法所在的类。</li>\n</ol><pre><code>public class Singleton {\n  private Singleton() {}\n  private static class LazyHolder {\n    static final Singleton INSTANCE = new Singleton();\n  }\n  public static Singleton getInstance() {\n    return LazyHolder.INSTANCE;\n  }\n}\n</code></pre><p>我在文章中贴了一段代码，这段代码是在著名的单例延迟初始化例子中<a href=\"https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\">2</a>，只有当调用Singleton.getInstance时，程序才会访问LazyHolder.INSTANCE，才会触发对LazyHolder的初始化（对应第4种情况），继而新建一个Singleton的实例。</p><p>由于类初始化是线程安全的，并且仅被执行一次，因此程序可以确保多线程环境下有且仅有一个Singleton实例。</p><h2>总结与实践</h2><p>今天我介绍了Java虚拟机将字节流转化为Java类的过程。这个过程可分为加载、链接以及初始化三大步骤。</p><p>加载是指查找字节流，并且据此创建类的过程。加载需要借助类加载器，在Java虚拟机中，类加载器使用了双亲委派模型，即接收到加载请求时，会先将请求转发给父类加载器。</p><p>链接，是指将创建成的类合并至Java虚拟机中，使之能够执行的过程。链接还分验证、准备和解析三个阶段。其中，解析阶段为非必须的。</p><p>初始化，则是为标记为常量值的字段赋值，以及执行&lt; clinit &gt;方法的过程。类的初始化仅会被执行一次，这个特性被用来实现单例的延迟初始化。</p><p>今天的实践环节，你可以来验证一下本篇中的理论知识。</p><p>通过JVM参数-verbose:class来打印类加载的先后顺序，并且在LazyHolder的初始化方法中打印特定字样。在命令行中运行下述指令（不包含提示符$）：</p><pre><code>\n$ echo '\npublic class Singleton {\n  private Singleton() {}\n  private static class LazyHolder {\n    static final Singleton INSTANCE = new Singleton();\n    static {\n      System.out.println(&quot;LazyHolder.&lt;clinit&gt;&quot;);\n    }\n  }\n  public static Object getInstance(boolean flag) {\n    if (flag) return new LazyHolder[2];\n    return LazyHolder.INSTANCE;\n  }\n  public static void main(String[] args) {\n    getInstance(true);\n    System.out.println(&quot;----&quot;);\n    getInstance(false);\n  }\n}' &gt; Singleton.java\n$ javac Singleton.java\n$ java -verbose:class Singleton\n</code></pre><p>问题1：新建数组（第11行）会导致LazyHolder的加载吗？会导致它的初始化吗？</p><p>在命令行中运行下述指令（不包含提示符$）：</p><pre><code>$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main Singleton\\$LazyHolder.class &gt; Singleton\\$LazyHolder.jasm.1\n$ awk 'NR==1,/stack 1/{sub(/stack 1/, &quot;stack 0&quot;)} 1' Singleton\\$LazyHolder.jasm.1 &gt; Singleton\\$LazyHolder.jasm\n$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main Singleton\\$LazyHolder.jasm\n$ java -verbose:class Singleton\n</code></pre><p>问题2：新建数组会导致LazyHolder的链接吗？</p><p></p>","neighbors":{"left":{"article_title":"02 | Java的基本类型","id":11503},"right":{"article_title":"04 | JVM是如何执行方法调用的？（上）","id":11539}},"comments":[{"had_liked":false,"id":33724,"user_name":"笨鸟","can_delete":false,"product_type":"c1","uid":1236320,"ip_address":"","ucode":"68029ADA76AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_is_top":false,"comment_ctime":1539863992,"is_pvip":false,"replies":[{"id":"12758","content":"对的！","user_name":"作者回复","comment_id":33724,"uid":"1176688","ip_address":"","utype":1,"ctime":1540821639,"user_name_real":"郑雨迪"}],"discussion_count":4,"race_medal":0,"score":"431036593592","product_id":100010301,"comment_content":"1.虚拟机必须知道（加载）有这个类，才能创建这个类的数组（容器），但是这个类并没有被使用到（没有达到初始化的条件），所以不会初始化。<br>2.新建数组的时候并不是要使用这个类（只是定义了放这个类的容器），所以不会被链接，调用getInstance(false)的时候约等于告诉虚拟机，我要使用这个类了，你把这个类造好（链接），然后把static修饰的字符赋予变量（初始化）。<br>老师看看理解对不对，指点一下。","like_count":100,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427036,"discussion_content":"对的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540821639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253529,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/99/8c158560.jpg","nickname":"cxh","note":"","ucode":"912FBA0412E75A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410896,"discussion_content":"新建数组时不会链接，那是如何进行验证的，不会是创建一个未经验证的数组吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635811454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1196962,"avatar":"https://static001.geekbang.org/account/avatar/00/12/43/a2/551bc2de.jpg","nickname":"心无止境","note":"","ucode":"713ACD50EAABE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261525,"discussion_content":"1.new出实例，不是符合JVM规范的第二点：当遇到用以新建目标类实例的new指令时，初始化new指令的目标类？请各位高手指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588981544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1564267,"avatar":"https://static001.geekbang.org/account/avatar/00/17/de/6b/adee88bb.jpg","nickname":"宿臾洛城","note":"","ucode":"362CC728E256F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1196962,"avatar":"https://static001.geekbang.org/account/avatar/00/12/43/a2/551bc2de.jpg","nickname":"心无止境","note":"","ucode":"713ACD50EAABE0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280046,"discussion_content":"new的仅仅是个数组类，而不是当前对象，数组是为了存放当前对面的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591460114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":261525,"ip_address":""},"score":280046,"extra":""}]}]},{"had_liked":false,"id":17196,"user_name":"曲东方","can_delete":false,"product_type":"c1","uid":1177819,"ip_address":"","ucode":"6C3EA2F47A0B98","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/db/c4edf697.jpg","comment_is_top":false,"comment_ctime":1532487487,"is_pvip":false,"replies":[{"id":"5975","content":"多谢指出！","user_name":"作者回复","comment_id":17196,"uid":"1176688","ip_address":"","utype":1,"ctime":1532502097,"user_name_real":"郑雨迪"}],"discussion_count":4,"race_medal":0,"score":"396669478719","product_id":100010301,"comment_content":"1. 新建数组会加载元素类LazyHolder；不会初始化元素类<br><br>2. 新建数组不会链接元素类LazyHolder；在getInstance(false)时才真正链接和初始化<br>-----------------<br>链接的第一步：验证字节码，awk把字节码改为不符合jvm规范<br>初始化调用&lt;clinit&gt;(即class init)<br><br><br><br>PS:好像二个问题包含了第一个问题的答案","like_count":92,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421077,"discussion_content":"多谢指出！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532502097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1730576,"avatar":"","nickname":"27","note":"","ucode":"B5D7A54EA47206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202431,"discussion_content":"new时分配的什么内存，考虑一下，是LazyHolder对象吗？   验证新增数组会不会连接这步，连接的第一步是验证，stack 改为0之后，在验证这一步会抛出错误信息，证明执行连接过程了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583917532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351012,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/64/272dc1b7.jpg","nickname":"圆滚滚","note":"","ucode":"E4D81822A87D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194470,"discussion_content":"2. 新建数组不会链接元素类LazyHolder；在getInstance(false)时才真正链接和初始化\n关于这一点, 如何验证新增数组的时候不会链接 LazyHolder? new 指令创建数组的时候, 不是应该分配内存么, 不链接的话怎么知道LazyHolder的数组应该分配多少内存? 这是我不明白的地方, 求老师解惑.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583223194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1430831,"avatar":"https://static001.geekbang.org/account/avatar/00/15/d5/2f/d9bb5dab.jpg","nickname":"打字员老张","note":"","ucode":"95CB3E8FAFB141","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1351012,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/64/272dc1b7.jpg","nickname":"圆滚滚","note":"","ucode":"E4D81822A87D50","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373139,"discussion_content":"new LazyHolder[2]是为一个类型为LazyHolder的数组对象开辟了空间，不是LazyHolder本身包含的static final等字段需要占用的空间，并没有链接。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620629120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194470,"ip_address":""},"score":373139,"extra":""}]}]},{"had_liked":false,"id":17686,"user_name":"迈克擂","can_delete":false,"product_type":"c1","uid":1191586,"ip_address":"","ucode":"FFA43826FC7526","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/a2/cdd182e5.jpg","comment_is_top":false,"comment_ctime":1532875482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"370900062938","product_id":100010301,"comment_content":"学习了！可以的话希望老师能附上一些图解，便于更理解","like_count":86},{"had_liked":false,"id":17427,"user_name":"akka","can_delete":false,"product_type":"c1","uid":1178108,"ip_address":"","ucode":"71271D17D9695C","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/fc/f01e160f.jpg","comment_is_top":false,"comment_ctime":1532649520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"216281014320","product_id":100010301,"comment_content":"-XX：+TraceClassLoading 可以看到类加载过程","like_count":50},{"had_liked":false,"id":17208,"user_name":"mover","can_delete":false,"product_type":"c1","uid":1183271,"ip_address":"","ucode":"1FAA06D227B4B3","user_header":"","comment_is_top":false,"comment_ctime":1532497250,"is_pvip":false,"replies":[{"id":"5979","content":"谢谢你的建议！前几章不好搞太难，希望后面能够满足你的需求","user_name":"作者回复","comment_id":17208,"uid":"1176688","ip_address":"","utype":1,"ctime":1532503185,"user_name_real":"郑雨迪"}],"discussion_count":2,"race_medal":0,"score":"199100992866","product_id":100010301,"comment_content":"到目前为止，讲解的内容没有超出周志明老师的 深入理解JAVA虚拟机这本书的内容，老师可以讲解的更深入一点吗？可以介绍一下类加载后在meta区的大概布局吗？class类对象与meta区的类数据结构是什么关系？当我们创建类，使用类时，类实例，类对象，meta区类数据结构是如何交互的？","like_count":46,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421083,"discussion_content":"谢谢你的建议！前几章不好搞太难，希望后面能够满足你的需求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532503185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1519547,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2f/bb/4236d712.jpg","nickname":"itschenxiang","note":"","ucode":"7D90194AC52435","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1649,"discussion_content":"你好 请问你问的问题有答案了吗？ 评论有点乱 看不清楚，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562764753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95258,"user_name":"佑儿","can_delete":false,"product_type":"c1","uid":1226196,"ip_address":"","ucode":"0629888E7A5E16","user_header":"https://static001.geekbang.org/account/avatar/00/12/b5/d4/3bd5b77b.jpg","comment_is_top":false,"comment_ctime":1558000281,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"160471790233","product_id":100010301,"comment_content":"总结：<br>jvm加载java类就是将字节流(如.class文件，网络传输的字节流)文件加入到内存中的过程，分为以下三步：加载、链接、初始化<br><br>加载：查找字节流并且据此创建类的过程，每一种类加载器加载一部分类<br>        加载规则：双亲委派机制<br>        类的唯一性：类加载器名称+类全限定名称<br>        类加载器：<br>        启动类加载器：无对应的java对象，负责加载最基础的类。如jre&#47;lib下的类以及有虚拟机参数-Xbootclasspath指定的类，<br>        扩展类加载器：有对应的java对象，父类启动类加载器,负责加载jre&#47;ext下类以及系统变量java.ext.dirs指定的类<br>                              该类加载器被启动类加载器加载之后方能加载其他类，<br>                               <br>        应用类加载器：有对应的java对象，父类是扩展类加载器，负责加载应用程序路径下的类&#47;classpath、系统变量java.class.path或者环境变量classpath指定的类。<br><br>链接：验证、准备、解析<br>        验证：在于确定被加载类满足jvm的约束条件。<br>       准备：为被加载类的静态字段分配内存。<br>       解析：将符号引用解析为实际引用，<br>                符号引用是在编译阶段由编译器生成，包含目标方法所在类的名字、目标方法的名字、接收参数类型以及返回值类型<br><br>初始化：为标记为常量值的字段(基本类型或字符串且被修饰为final)赋值，以及执行&lt;clinit&gt;方法(其他赋值操作和静态代码块)<br>             类的初始化过程是线程安全的，并且只能被初始化一次。jvm会通过加锁来保证&lt;clinit&gt;方法仅被执行一次<br>             初始化的时机（对一个类的主动引用）<br>               <br><br>被动引用并不会引发类的初始化，如引用类的静态常量，引用父类的静态字段不会初始化子类，数组定义来引用类不会导致初始化。","like_count":37,"discussions":[{"author":{"id":1179536,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/90/7c5b7b2c.jpg","nickname":"德鲁大叔","note":"","ucode":"03306EB51C0ECA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414262,"discussion_content":"final修饰的在编译期就赋值了，不是在初始化的时候","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636704206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253529,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/99/8c158560.jpg","nickname":"cxh","note":"","ucode":"912FBA0412E75A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268441,"discussion_content":"你好，请问下什么是主动引用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589777449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1730576,"avatar":"","nickname":"27","note":"","ucode":"B5D7A54EA47206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202448,"discussion_content":"请问下，启动类没java实例，那扩展类是如何实现双亲委派的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583918785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1059674,"avatar":"","nickname":"三行","note":"","ucode":"3BBEA32B643538","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1730576,"avatar":"","nickname":"27","note":"","ucode":"B5D7A54EA47206","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210830,"discussion_content":"是“父”类加载器，而不是“父类”加载器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584779908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":202448,"ip_address":""},"score":210830,"extra":""}]}]},{"had_liked":false,"id":17512,"user_name":"韩恩同","can_delete":false,"product_type":"c1","uid":1178193,"ip_address":"","ucode":"5A6AE340ECC3F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/51/6eef2ad1.jpg","comment_is_top":false,"comment_ctime":1532698468,"is_pvip":false,"replies":[{"id":"6082","content":"多谢建议！","user_name":"作者回复","comment_id":17512,"uid":"1176688","ip_address":"","utype":1,"ctime":1532705809,"user_name_real":"郑雨迪"}],"discussion_count":3,"race_medal":0,"score":"113201848164","product_id":100010301,"comment_content":"忍着瞌睡把内容看完了。<br>全是复习了一遍。<br>作者对 类加载中的 链接(验证、准备、解析)讲解不太到位吧？<br>另外，对一个的初始化发生在第一次主动使用该类时，作者列出的几种情况都属于主动使用类。感觉应该有被动使用的举例，并告知大家这样做是不会执行初始化的。","like_count":26,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421185,"discussion_content":"多谢建议！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532705809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221263,"discussion_content":"什么叫被动使用呢？能举个例子吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585996684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1139413,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/d5/1f5c5ab6.jpg","nickname":"大大大熊myeh","note":"","ucode":"4832C2E7CEB151","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":262792,"discussion_content":"比如访问静态变量，如果它是被final修饰的常量，那么它就会被放在访问静态变量的这个类的常量池中，而不会初始化拥有该静态变量的类。还有比如父类子类的静态变量，接口啊，数组啊等等，好多种被动引用的情况，建议自己去查阅一下。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1589125325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221263,"ip_address":""},"score":262792,"extra":""}]}]},{"had_liked":false,"id":27155,"user_name":"conce2018","can_delete":false,"product_type":"c1","uid":1252299,"ip_address":"","ucode":"365D3192753891","user_header":"","comment_is_top":false,"comment_ctime":1537839786,"is_pvip":false,"replies":[{"id":"10286","content":"其实我也有这个疑问，英文中为parent不带s，照理应该翻译为单亲。但既然约定俗成翻译为双亲，就只好这样叫啦","user_name":"作者回复","comment_id":27155,"uid":"1176688","ip_address":"","utype":1,"ctime":1538114944,"user_name_real":"郑雨迪"}],"discussion_count":6,"race_medal":0,"score":"108912022186","product_id":100010301,"comment_content":"为什么叫双亲委派呀，明明只给了父类加载应该是单亲呀","like_count":25,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424819,"discussion_content":"其实我也有这个疑问，英文中为parent不带s，照理应该翻译为单亲。但既然约定俗成翻译为双亲，就只好这样叫啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538114944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","nickname":"吕","note":"","ucode":"8F08E2CB81C4C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273020,"discussion_content":"我觉得你说的这个双亲委派的过程不对，应该是先去appClassLoder中的内存找，如果找到，就说明已经加载了，如果没找到，就去它的父类extentionClassLoader（注意不是继承中的父类）的内存去找，如果存在，就说明已经加载了，如果没找到，再去它的父类bootstrapClassLoader的内存中去找，如果存在，就说明已经加载了，如果不存在，那bootstrapClassLoader就去它相应的目录去加载，如果加载不了，那就再委派给下一级extentionClassLoader，去它对应的加载目录去加载，如果还加载不了，那么extentionClassLoader就会在委派给appClassLoder去加载，然后加载到内存。\n之所以叫双亲委派，我认为并不是我们说的父母，而是从下往上，然后再从上往下，子到付，父到子，来了两遍，所以叫双亲委派","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1590393752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204168,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5f/c8/13aa8aa9.jpg","nickname":"night","note":"","ucode":"03B3C955092C03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305422,"discussion_content":"个人以为就是中文翻译问题，应该是父类委派才对","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599918724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1385377,"avatar":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","nickname":"何妨","note":"","ucode":"EC3983BFF7992A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287839,"discussion_content":"我理解的是，一般默认我们使用的加载器是 AppClassLoader 他的父加载器是 ExtClassLoader 而 ext 的父加载器是 BootStrapClassLoader 。所以一般加载顺序为 应用类加载器首先查找是否加载该类，未找到则委派给扩展类加载器执行，扩展类加载器未找到则委派给启动类加载器。有两个父加载器，所以叫双亲委派","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593566756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1399853,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5c/2d/226a3631.jpg","nickname":"MZC","note":"","ucode":"46278027D522FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85850,"discussion_content":"老师  是  APP  EXT  跟  platform三个类加载器呗\n那这三个不是父子层级关系吗  这是EXT跟platform是双亲吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576579769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1235320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d9/78/8a328299.jpg","nickname":"佳佳大魔王","note":"","ucode":"D5214903D85A0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1399853,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5c/2d/226a3631.jpg","nickname":"MZC","note":"","ucode":"46278027D522FB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295316,"discussion_content":"platform是在java 9中将ext 替换了吧，他们两个是不共存的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596163810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":85850,"ip_address":""},"score":295316,"extra":""}]}]},{"had_liked":false,"id":17194,"user_name":"熊猫酒仙","can_delete":false,"product_type":"c1","uid":1112078,"ip_address":"","ucode":"17002C7A355EC1","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/0e/de697f9b.jpg","comment_is_top":false,"comment_ctime":1532486729,"is_pvip":false,"replies":[{"id":"5974","content":"1. 可能我翻译得有点瑕疵，导致了你的误解。这里我指的是扩展器类的 父-类加载器，而不是父类-(加载器)。<br>2. Java中所有的非私有实例方法，都算是虚方法。调用这些方法的指令，也区分直接调用和虚调用。下一篇我会讲到。<br>3. 赞一个。被final修饰的静态成员变量，如果不是基本类型或者字符串，也会放在clinit 来做。","user_name":"作者回复","comment_id":17194,"uid":"1176688","ip_address":"","utype":1,"ctime":1532502064,"user_name_real":"郑雨迪"}],"discussion_count":5,"race_medal":0,"score":"83136865353","product_id":100010301,"comment_content":"有几个疑问，请老师指点迷津。<br>1.扩展类加载器的父类，是启动类加载器，而后者是C++实现的，java继承C++的类？不大能理解。<br>2.虚方法的概念在C++中有了解过，java中的虚方法该如何定义呢？以前没接触过java虚方法的概念<br>3.我以前的理解是，有一个零值(0&#47;null)初始化，针对于类的静态成员变量，如果是final修饰的静态成员变量，也就是常量，是初始化为代码中指定的值比如10。非final修饰的静态成员变量，在clint执行过程中赋值为代码中指定的值，请问老师是这样的吗？","like_count":19,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421076,"discussion_content":"1. 可能我翻译得有点瑕疵，导致了你的误解。这里我指的是扩展器类的 父-类加载器，而不是父类-(加载器)。\n2. Java中所有的非私有实例方法，都算是虚方法。调用这些方法的指令，也区分直接调用和虚调用。下一篇我会讲到。\n3. 赞一个。被final修饰的静态成员变量，如果不是基本类型或者字符串，也会放在clinit 来做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532502064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070581,"avatar":"https://static001.geekbang.org/account/avatar/00/10/55/f5/8d1588bd.jpg","nickname":"xfun","note":"","ucode":"A9A08E9EA6E13B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287313,"discussion_content":"所以类加载器根本跟“亲”没半毛钱关系，说成上级委派模型更贴切些！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593414273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115724,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwSoTjHPX5tm4whBSfoZLX6toZxrZGUaLABQywKNf4MDc9toK3QSV7Z99ATcGicFCysoleQ5ISzmw/132","nickname":"乘风","note":"","ucode":"0420C5535DACB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1582,"discussion_content":"类加载中使用组合关系来实现父子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562718316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1730576,"avatar":"","nickname":"27","note":"","ucode":"B5D7A54EA47206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1115724,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwSoTjHPX5tm4whBSfoZLX6toZxrZGUaLABQywKNf4MDc9toK3QSV7Z99ATcGicFCysoleQ5ISzmw/132","nickname":"乘风","note":"","ucode":"0420C5535DACB7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202434,"discussion_content":"扩展类加载器没启动类加载器的引用，那是如何把加载过程交给启动类加载器的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583917742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1582,"ip_address":""},"score":202434,"extra":""},{"author":{"id":1072658,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5e/12/c0c4d6f2.jpg","nickname":"Qiubh","note":"","ucode":"3BC33EC44F2FDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1730576,"avatar":"","nickname":"27","note":"","ucode":"B5D7A54EA47206","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253674,"discussion_content":"判断parent是否为null，如果为null，则会调用native方法，把加载过程交给启动类加载器。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1588251667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":202434,"ip_address":""},"score":253674,"extra":""}]}]},{"had_liked":false,"id":17205,"user_name":"Skysper","can_delete":false,"product_type":"c1","uid":1058800,"ip_address":"","ucode":"164B3CAF81A7C5","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/f0/06ecce19.jpg","comment_is_top":false,"comment_ctime":1532495598,"is_pvip":false,"replies":[{"id":"5978","content":"类的初始化只会发生一次，你可能指的是实例的初始化？<br><br>JVM并不会直接使用.class文件，类加载链接的目的就是在JVM中创建相应的类结构，会存储在元空间(我之前用的老说法”方法区”，感谢某同学指出)。","user_name":"作者回复","comment_id":17205,"uid":"1176688","ip_address":"","utype":1,"ctime":1532502952,"user_name_real":"郑雨迪"}],"discussion_count":4,"race_medal":0,"score":"70251972334","product_id":100010301,"comment_content":"每次new一个类都是一次初始化吧？加载和链接以后生成的是什么样的数据结构？存储在什么地方？<br>","like_count":16,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421081,"discussion_content":"类的初始化只会发生一次，你可能指的是实例的初始化？\n\nJVM并不会直接使用.class文件，类加载链接的目的就是在JVM中创建相应的类结构，会存储在元空间(我之前用的老说法”方法区”，感谢某同学指出)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532502952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398088,"discussion_content":"类的初始化只有一次，实例的初始化会多次\n在hotspot虚拟机中，存在元间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632733457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070581,"avatar":"https://static001.geekbang.org/account/avatar/00/10/55/f5/8d1588bd.jpg","nickname":"xfun","note":"","ucode":"A9A08E9EA6E13B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287316,"discussion_content":"方法区是JVM规范，元空间是规范的实现，所以不存在老说法的说法。老说法是永久代。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593414558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1079811,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/03/c9b43b21.jpg","nickname":"BewhY","note":"","ucode":"4BC26D47A79967","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1070581,"avatar":"https://static001.geekbang.org/account/avatar/00/10/55/f5/8d1588bd.jpg","nickname":"xfun","note":"","ucode":"A9A08E9EA6E13B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556173,"discussion_content":"方法区是JVM的规范，永久代、元空间只是一种实现方式，你自己实现一个也可以叫她少女时代，没有任何问题的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647238396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287316,"ip_address":""},"score":556173,"extra":""}]}]},{"had_liked":false,"id":17154,"user_name":"Super丶X","can_delete":false,"product_type":"c1","uid":1182941,"ip_address":"","ucode":"72C70CE274A105","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/dd/eebeb4ef.jpg","comment_is_top":false,"comment_ctime":1532476641,"is_pvip":false,"replies":[{"id":"5986","content":"你指的是在写代码的时候如何区分对吧？我认为没法区分。如果你有一个类的两个不同版本，而且它们不兼容，那么编译时指向哪个，就按哪个来编译。也就是说，如果要同时使用两个版本，那么你需要分开编译。","user_name":"作者回复","comment_id":17154,"uid":"1176688","ip_address":"","utype":1,"ctime":1532507941,"user_name_real":"郑雨迪"}],"discussion_count":2,"race_medal":0,"score":"48777116897","product_id":100010301,"comment_content":"老师，你说可以通过不同的类加载器加载同一个类得到类的不同版本，我有个疑问，类是通过包名加类名来使用的，那怎么样区分不同的类加载器加载的类呢？","like_count":11,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421060,"discussion_content":"你指的是在写代码的时候如何区分对吧？我认为没法区分。如果你有一个类的两个不同版本，而且它们不兼容，那么编译时指向哪个，就按哪个来编译。也就是说，如果要同时使用两个版本，那么你需要分开编译。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532507941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398090,"discussion_content":"通过类的全限定名+类加载器确定一个类，同一个类，被不同的类加载器加载，就得到了类的不同版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632733711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17236,"user_name":"Geek_dde3ac","can_delete":false,"product_type":"c1","uid":1103055,"ip_address":"","ucode":"6D560A17ADC249","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/cf/e82cd26b.jpg","comment_is_top":false,"comment_ctime":1532517108,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44482190068","product_id":100010301,"comment_content":"请问有什么办法或者工具可以看到类加载的这些过程呢？","like_count":10,"discussions":[{"author":{"id":1019659,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/0b/a438de52.jpg","nickname":"0xTang","note":"","ucode":"82F5282EF3044B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234,"discussion_content":"-XX：+TraceClassLoading","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1561345529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17334,"user_name":"小蛋壳","can_delete":false,"product_type":"c1","uid":1101602,"ip_address":"","ucode":"8344163BF7722E","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/22/5a483755.jpg","comment_is_top":false,"comment_ctime":1532573715,"is_pvip":false,"replies":[{"id":"6071","content":"加载阶段是针对单个类的，一般用到的类才会被加载。大部分情况下，不同类的加载阶段是不同的。","user_name":"作者回复","comment_id":17334,"uid":"1176688","ip_address":"","utype":1,"ctime":1532703502,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"40187279379","product_id":100010301,"comment_content":"加载阶段都加载哪些类呢，那么多类，全部加载吗？","like_count":9,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421116,"discussion_content":"加载阶段是针对单个类的，一般用到的类才会被加载。大部分情况下，不同类的加载阶段是不同的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532703502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17184,"user_name":"L.B.Q.Y","can_delete":false,"product_type":"c1","uid":1069325,"ip_address":"","ucode":"5567989D1CDBBE","user_header":"https://static001.geekbang.org/account/avatar/00/10/51/0d/14d9364a.jpg","comment_is_top":false,"comment_ctime":1532482792,"is_pvip":false,"replies":[{"id":"5984","content":"在加载阶段就已经生成class结构了，所以我认为应该已经写入了方法区，只是被标记为未链接而暂不能使用。","user_name":"作者回复","comment_id":17184,"uid":"1176688","ip_address":"","utype":1,"ctime":1532506826,"user_name_real":"郑雨迪"}],"discussion_count":3,"race_medal":0,"score":"31597253864","product_id":100010301,"comment_content":"从大的方面讲，类加载的结果是把一段字节流变换成Class结构并写方法区，实际写方法区具体是发生在加载、链接、初始化的哪个环节呢？","like_count":7,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421073,"discussion_content":"在加载阶段就已经生成class结构了，所以我认为应该已经写入了方法区，只是被标记为未链接而暂不能使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532506826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41241,"discussion_content":"而且后面解析，要生成直接引用的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572374728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41161,"discussion_content":"加载阶段……后面都检验了，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572360768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52540,"user_name":"Geek_436873","can_delete":false,"product_type":"c1","uid":1180954,"ip_address":"","ucode":"F0357C5025CBF4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh0WW3triak4zFOTBRn8ZNJbWbzRXREJgKqSODicP1dJMvasqGGBicpUcwAeP5hE1GOmW4zUuobfW2w/132","comment_is_top":false,"comment_ctime":1545410297,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"23020246777","product_id":100010301,"comment_content":"看完了整篇文章，其实我还是没搞明白，加载-链接-初始化 这三个步骤的关系。首先我理解加载就是把编译好的.class文件读如jvm内存，存放至方法区。至于链接，我觉得暂时不用去深究。初始化则是比较常见的，我们去new操作或者访问静态变量时会触发类的初始化操作。我的问题是：1.什么时候触发类加载？2:加载-链接-初始化一定是三者都发生的吗，会存在某个累只加载，不链接，不初始化的情况吗","like_count":5,"discussions":[{"author":{"id":1549032,"avatar":"","nickname":"Zzz","note":"","ucode":"9323254354868B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238020,"discussion_content":"我的理解，加载触发时机有：类之间有依赖会加载、代码里显式调用forName或者classloader.load方法会加载，类似使用jdbc驱动获取驱动类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587206091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1548645,"avatar":"https://static001.geekbang.org/account/avatar/00/17/a1/65/44853770.jpg","nickname":"Hi Young","note":"","ucode":"E1E9C88399F3C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159089,"discussion_content":"问题1：个人理解，，需要确定类存在时，先找元空间，没有的话，再进行加载\n问题2： 课后作业已经有答案了，，比如针对数组类，如果只是初始化数组类，没有使用类，则仅进行类的加载，无后续","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580652627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41233,"discussion_content":"我觉得你的问题 1 很好，也是我困惑的地方，感觉这篇文章并没有说明白。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572368432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2354201,"avatar":"","nickname":"perfect","note":"","ucode":"7EB6A38B8EE979","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386009,"discussion_content":"类加载不是在应用启动时触发的吗，是我想简单了？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627381129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41233,"ip_address":""},"score":386009,"extra":""},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2354201,"avatar":"","nickname":"perfect","note":"","ucode":"7EB6A38B8EE979","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387991,"discussion_content":"不全是的，如果代码没执行的话。不会加载的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628520734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386009,"ip_address":""},"score":387991,"extra":""}]}]},{"had_liked":false,"id":17327,"user_name":"scutware","can_delete":false,"product_type":"c1","uid":1103220,"ip_address":"","ucode":"63C37C3CF75C70","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/74/7e787607.jpg","comment_is_top":false,"comment_ctime":1532568683,"is_pvip":false,"replies":[{"id":"6072","content":"链接时取得的不是被加载类的地址，而且被加载类所调用的其它方法的地址","user_name":"作者回复","comment_id":17327,"uid":"1176688","ip_address":"","utype":1,"ctime":1532703617,"user_name_real":"郑雨迪"}],"discussion_count":2,"race_medal":0,"score":"23007405163","product_id":100010301,"comment_content":"您在评论回复说.class在加载后已经写入方法区（元空间），但是我理解在方法区里类代码的方法调用应该是实际的调用地址吧？而取得实际调用地址不是在链接阶段吗？这里不太理解，求解答～","like_count":5,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421114,"discussion_content":"链接时取得的不是被加载类的地址，而且被加载类所调用的其它方法的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532703617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41240,"discussion_content":"加载阶段实际上还是符号引用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572372355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17161,"user_name":"funnyx","can_delete":false,"product_type":"c1","uid":1115049,"ip_address":"","ucode":"A9B8E27919AE4D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoZqcVJzUjfu5noOW6OPAh6ibrBicibLmicibnVyVLHdf7GwAzf2th5s1oQ9pUbLpmq2mlVBauUZn8QUnw/132","comment_is_top":false,"comment_ctime":1532478561,"is_pvip":false,"replies":[{"id":"5985","content":"前面那个问题，你说的没错。这么说的原因是它委派的那个对象名字叫parent。可能翻译为双亲比较不容易混淆。<br><br>后面那个问题，JVM都会分配内存的，只是初始化的过程不一样，一个是JVM直接赋值，一个是在clinit方法中赋值","user_name":"作者回复","comment_id":17161,"uid":"1176688","ip_address":"","utype":1,"ctime":1532507227,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"23007315041","product_id":100010301,"comment_content":"有两个问题想问一下老师，在类加载的过程中，有一个委派模式，这里严格来说应该不是使用的继承方式，应该是组合。另一个就是类中的静态字段，如果没有被jvm标记为常量，那么这部分内存是如何分配的？","like_count":5,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421063,"discussion_content":"前面那个问题，你说的没错。这么说的原因是它委派的那个对象名字叫parent。可能翻译为双亲比较不容易混淆。\n\n后面那个问题，JVM都会分配内存的，只是初始化的过程不一样，一个是JVM直接赋值，一个是在clinit方法中赋值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532507227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71429,"user_name":"airfly","can_delete":false,"product_type":"c1","uid":1170478,"ip_address":"","ucode":"79E4C4E08A846C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLI6icTKbDkttGvNaMrMKdu5PsZwiagtdjn6NTWAlJPHj4cJrUTW4GuicZKFZnX8eJ2Iz319aHLymLibQ/132","comment_is_top":false,"comment_ctime":1551341038,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18731210222","product_id":100010301,"comment_content":"没明白java虚拟机和类加载器的关系,","like_count":4,"discussions":[{"author":{"id":1253529,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/99/8c158560.jpg","nickname":"cxh","note":"","ucode":"912FBA0412E75A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268443,"discussion_content":"jvm是环境，类加载器是在这个环境干活的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589777537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34700,"user_name":"刹那间的永恒","can_delete":false,"product_type":"c1","uid":1114738,"ip_address":"","ucode":"DAB8A1BE22C4EC","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/72/6933412b.jpg","comment_is_top":false,"comment_ctime":1540262164,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18720131348","product_id":100010301,"comment_content":"老师，您好！关于classLoader有点疑问，在看源码时发现AppClassLoader和ExtClassLoader都继承自URLClassLoader，这个URLClassLoader是做什么的？另外“委派”是如何实现的了？在AppClassLoader中也没看到ExtClassLoader。","like_count":4,"discussions":[{"author":{"id":2278795,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKciaXQNJowcrJXkAqOjfmyz8NHroHTUYRuOQ8neECcT17iapLcOgoobXnQmWzDqBKxQ46AkEsZibKHQ/132","nickname":"Geek_c8fa1a","note":"","ucode":"8F9B53F9A1CC24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382975,"discussion_content":"1. URLClassLoader 就是一个从url或者jar包中加载类的一个类加载器。\n2. ExtClassLoader是AppClassLoader的父亲，而不是父类，两个都是继承URLClassLoader。根据不同的URL加载类。只不过AppClassLoader初始化是会指定父亲this.parent = parent;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625814303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17401,"user_name":"Hero","can_delete":false,"product_type":"c1","uid":1140794,"ip_address":"","ucode":"D6B2A29699C12F","user_header":"https://static001.geekbang.org/account/avatar/00/11/68/3a/90912072.jpg","comment_is_top":false,"comment_ctime":1532615157,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18712484341","product_id":100010301,"comment_content":"你该加油了，期待接下来精彩……","like_count":4,"discussions":[{"author":{"id":1312485,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DwZUsQhia0wIWNEfeGZ2srQWzVC04JjLFDwgmicpnNF3mUPdRJD6U6vviceJqMxGYUGtxaiaZWltyNtQ5fZhia7YN3w/132","nickname":"榴芒科技","note":"","ucode":"EC297012B1B942","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23200,"discussion_content":"讲的乱七八糟！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569768508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1208265,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6f/c9/22022094.jpg","nickname":"丁奇老师的粉丝","note":"","ucode":"6341E0D78CF998","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550,"discussion_content":"说的很好，理论比较多，有点干瘪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561694210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17170,"user_name":"志远","can_delete":false,"product_type":"c1","uid":1108762,"ip_address":"","ucode":"11015D14034130","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg","comment_is_top":false,"comment_ctime":1532480191,"is_pvip":false,"replies":[{"id":"5972","content":"lib&#47;ext是由扩展类加载器加载的，我文中应该也是这样讲的。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1532501079,"ip_address":"","comment_id":17170,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18712349375","product_id":100010301,"comment_content":"请问，关于双亲委派类加载器的情况，与周志明的深入理解java虚拟机矛盾啊，到底听哪个呢？周志明书籍中lib&#47;ext是由扩展类加载器加载，你这里是启动类加载器加载，到底哪个是正确的呢？","like_count":4,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421068,"discussion_content":"lib/ext是由扩展类加载器加载的，我文中应该也是这样讲的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532501079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17145,"user_name":"陈树义","can_delete":false,"product_type":"c1","uid":1076264,"ip_address":"","ucode":"AF83C4BDC192B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/6c/28/a1f9f0ad.jpg","comment_is_top":false,"comment_ctime":1532454842,"is_pvip":true,"replies":[{"id":"5973","content":"第二个实践有介绍验证的方法。简单的说就是通过生成一个不能通过链接的验证阶段的类。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1532501436,"ip_address":"","comment_id":17145,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18712324026","product_id":100010301,"comment_content":"新建数组不会导致初始化，但是否会链接不清楚。不知道有什么方式可以验证？","like_count":4,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421057,"discussion_content":"第二个实践有介绍验证的方法。简单的说就是通过生成一个不能通过链接的验证阶段的类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532501436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26876,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1249927,"ip_address":"","ucode":"5EF343ADCB5C60","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/87/765a5366.jpg","comment_is_top":false,"comment_ctime":1537767890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422669778","product_id":100010301,"comment_content":"关于新建数组是否会链接，第二个实践生成一个不能通过链接的验证阶段的类，但是我不明白怎么确定它是在new LazyHolder[2]时验证还是在return LazyHolder.INSTANCE时验证的？运行了指令后得到：<br>Error: A JNI error has occurred, please check your installation and try again<br>Exception in thread &quot;main&quot; java.lang.VerifyError: Operand stack overflow<br>Exception Details:<br>  Location:<br>    Singleton.&lt;init&gt;()V @0: aload_0<br>可不可以这样理解：新建数组new LazyHolder[2]不需要初始化，只有return LazyHolder.INSTANCE才会导致初始化。而验证不通过的地方为初始化部分，所以，可以认为新建数组不会链接元素类LazyHolder；在getInstance(false)时才真正链接和初始化。","like_count":3},{"had_liked":false,"id":17199,"user_name":"Nu11PointerEx","can_delete":false,"product_type":"c1","uid":1177802,"ip_address":"","ucode":"D5C19A98F894B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/ca/1a1e190a.jpg","comment_is_top":false,"comment_ctime":1532488243,"is_pvip":false,"replies":[{"id":"5976","content":"我参照的是Java 10虚拟机规范5.5讲初始化的那一小节，按道理虚拟机实现都应该遵守这个的。有可能是规范变动了？<br><br>从工程实现上讲，在准备阶段赋值常量字段和在初始化阶段赋值没有太大影响。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1532502528,"ip_address":"","comment_id":17199,"utype":1}],"discussion_count":5,"race_medal":0,"score":"14417390131","product_id":100010301,"comment_content":"老师，根据《深入理解Java虚拟机》一书的描述，被static final修饰的常量字段的赋值行为应该发生在&quot;准备&quot;阶段，但文中说是在初始化阶段赋值，与我理解的有出入，麻烦老师解答下","like_count":3,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421078,"discussion_content":"我参照的是Java 10虚拟机规范5.5讲初始化的那一小节，按道理虚拟机实现都应该遵守这个的。有可能是规范变动了？\n\n从工程实现上讲，在准备阶段赋值常量字段和在初始化阶段赋值没有太大影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532502528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103789,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d7/ad/434d320e.jpg","nickname":"猫的脚步声","note":"","ucode":"D708841347B9DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74003,"discussion_content":"可能你没有仔细阅读《深入理解Java虚拟机》相应章节，书里明确说明准备阶段的赋值只是“初始值”，并没有真正赋值。在初始阶段才真正赋值。更符合“准备”阶段的概念。和老师说的并不冲突","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1575622173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1312918,"avatar":"https://static001.geekbang.org/account/avatar/00/14/08/96/231fdd9e.jpg","nickname":"未知","note":"","ucode":"DB389CEBEEE9E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1103789,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d7/ad/434d320e.jpg","nickname":"猫的脚步声","note":"","ucode":"D708841347B9DB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308198,"discussion_content":"可能是你没仔细阅读。第二版，220页左上角部分讲到：final static在准备阶段就会赋为给定值","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600868421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":74003,"ip_address":""},"score":308198,"extra":""},{"author":{"id":1543189,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/4X5U2bbPqyt2rvjsqv5Syxib514BtLO7xmTCeo6eh5Egd1tIhMTD14dP70QCCDiaylGIhS2Nr6NtTH3Z0IMibu26A/132","nickname":"逆流","note":"","ucode":"7AC94D1453928D","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":1312918,"avatar":"https://static001.geekbang.org/account/avatar/00/14/08/96/231fdd9e.jpg","nickname":"未知","note":"","ucode":"DB389CEBEEE9E1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548704,"discussion_content":"我看的第三版，是说的准备阶段给定的零值，初始化才赋具体值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643336209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308198,"ip_address":""},"score":548704,"extra":""}]},{"author":{"id":1855289,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/4f/39/cb4df994.jpg","nickname":"单俊宁","note":"","ucode":"403678A72C3305","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197293,"discussion_content":"我怎么记得是链接中的初始化阶段呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583416214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262840,"user_name":"大熊","can_delete":false,"product_type":"c1","uid":1101491,"ip_address":"","ucode":"DBD3FEE0AA6DB6","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/b3/804aa247.jpg","comment_is_top":false,"comment_ctime":1605857386,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10195791978","product_id":100010301,"comment_content":"老师你好，<br><br>问题1的命令修改的是&lt;init&gt;里面的操作数栈大小为0，执行java -verbose:class Singleton &lt;init&gt;里抛出Exceeded max stack size的异常；<br><br>我的疑问是，LazyHolder.INSTANCE应该是触发内部类LazyHolder的加载（其中的初始化步骤会执行&lt;clinit&gt;）；因为没有new LazyHolder()应该不会执行它的构造方法&lt;init&gt;啊，怎么会抛出异常呢？","like_count":2,"discussions":[{"author":{"id":1101491,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/b3/804aa247.jpg","nickname":"大熊","note":"","ucode":"DBD3FEE0AA6DB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327546,"discussion_content":"我知道了，应该是在链接的验证阶段，JVM发现操作数栈过小，直接验证不通过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605859330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34806,"user_name":"liuyitao","can_delete":false,"product_type":"c1","uid":1048898,"ip_address":"","ucode":"9DAD087C3DD74E","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/42/39fa3b84.jpg","comment_is_top":false,"comment_ctime":1540306140,"is_pvip":false,"replies":[{"id":"12765","content":"虚拟机内部的锁，和synchronized 不一样","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1540822435,"ip_address":"","comment_id":34806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10130240732","product_id":100010301,"comment_content":"clinit执行时的锁，是什么锁，跟synchronized一样吗？","like_count":2,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427345,"discussion_content":"虚拟机内部的锁，和synchronized 不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540822435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274187,"user_name":"hiwon","can_delete":false,"product_type":"c1","uid":1193449,"ip_address":"","ucode":"BE509F375644B0","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/e9/9280de62.jpg","comment_is_top":false,"comment_ctime":1610895652,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5905862948","product_id":100010301,"comment_content":"你好，请问一下单例模式的double check变量一定要加volatile来确保指令重排问题？在类的创建到初始化是原子操作？","like_count":1,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395412,"discussion_content":"非原子性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632301709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242389,"user_name":"xmeng","can_delete":false,"product_type":"c1","uid":1731543,"ip_address":"","ucode":"C0CA2182BA3B4B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","comment_is_top":false,"comment_ctime":1597710789,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5892678085","product_id":100010301,"comment_content":"<br>总结：<br>jvm加载java类就是将字节流(如.class文件，网络传输的字节流)文件加入到内存中的过程，分为以下三步：加载、链接、初始化<br><br>加载：查找字节流并且据此创建类的过程，每一种类加载器加载一部分类<br>        加载规则：双亲委派机制<br>        类的唯一性：类加载器名称+类全限定名称<br>        类加载器：<br>        启动类加载器：无对应的java对象，负责加载最基础的类。如jre&#47;lib下的类以及有虚拟机参数-Xbootclasspath指定的类，<br>        扩展类加载器：有对应的java对象，父类启动类加载器,负责加载jre&#47;ext下类以及系统变量java.ext.dirs指定的类<br>                              该类加载器被启动类加载器加载之后方能加载其他类，<br>                               <br>        应用类加载器：有对应的java对象，父类是扩展类加载器，负责加载应用程序路径下的类&#47;classpath、系统变量java.class.path或者环境变量classpath指定的类。<br><br>链接：验证、准备、解析<br>        验证：在于确定被加载类满足jvm的约束条件。<br>       准备：为被加载类的静态字段分配内存。<br>       解析：将符号引用解析为实际引用，<br>                符号引用是在编译阶段由编译器生成，包含目标方法所在类的名字、目标方法的名字、接收参数类型以及返回值类型<br><br>初始化：为标记为常量值的字段(基本类型或字符串且被修饰为final)赋值，以及执行&lt;clinit&gt;方法(其他赋值操作和静态代码块)<br>             类的初始化过程是线程安全的，并且只能被初始化一次。jvm会通过加锁来保证&lt;clinit&gt;方法仅被执行一次<br>             初始化的时机（对一个类的主动引用）<br>               <br><br>被动引用并不会引发类的初始化，如引用类的静态常量，引用父类的静态字段不会初始化子类，数组定义来引用类不会导致初始化。","like_count":1},{"had_liked":false,"id":213709,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1588518334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883485630","product_id":100010301,"comment_content":"文中说：类加载的最后一步是初始化，便是为标记为常量值的字段赋值...<br>我在《深入理解java虚拟机 第2版》中的第220页，看到的是，常量在准备阶段就被赋上了它所指定的值。","like_count":1},{"had_liked":false,"id":160127,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1575875776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870843072","product_id":100010301,"comment_content":"1、加载阶段，就是将Class结构写入方法区，只是被标记为未链接而暂不能使用，验证失败虚拟机会报错退出。<br>2、实例的初始化和类的初始化是两码事：<br>2.1: 实例初始化在堆中；类初始化在方法区（元空间）中。<br>2.2: 实例可被初始化很多次，单次的称为单例模式；而类只能被初始化一次；<br>2.3: 加载类也不是全部加载，是按需的。实际使用 -XX:+TraceClassLoading打印发现，启动UPM时，加载了很多很多jdk基础类，后来都是访问一个页面，加载当前页面需要用到的，未被加载的类。","like_count":1},{"had_liked":false,"id":68051,"user_name":"麦香小瑜儿","can_delete":false,"product_type":"c1","uid":1410494,"ip_address":"","ucode":"00FBFB8D4528F3","user_header":"https://static001.geekbang.org/account/avatar/00/15/85/be/5795b1b4.jpg","comment_is_top":false,"comment_ctime":1550396760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5845364056","product_id":100010301,"comment_content":"有个疑问，按照周志明的《深入理解Java虚拟机》的类加载一章提到的“被final修饰，已在编译期把结果放入常量池的静态字段除外”，类或者接口的静态常量不会触发类加载，作者介绍初始化阶段却说“类加载的最后一步是初始化，便是为标记为常量值的字段赋值“，这里意思是为常量字段赋值这个动作是cinit方法进行的，两个观点似乎有冲突。","like_count":1},{"had_liked":false,"id":29248,"user_name":"郁柏","can_delete":false,"product_type":"c1","uid":1198127,"ip_address":"","ucode":"622B54C156B4AF","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/2f/6bfaa288.jpg","comment_is_top":false,"comment_ctime":1538303576,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5833270872","product_id":100010301,"comment_content":"不同类加载器加载的类，不影响它们之前互相调用吧？ 同一类存在不同的版本，这个有啥实际应用？<br>","like_count":1,"discussions":[{"author":{"id":1185140,"avatar":"https://static001.geekbang.org/account/avatar/00/12/15/74/a3ad7af7.jpg","nickname":"sunshine","note":"","ucode":"2B1B3967311D64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282922,"discussion_content":"比如一个服务器上部署了两个tomcat","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592120399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1549032,"avatar":"","nickname":"Zzz","note":"","ucode":"9323254354868B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238028,"discussion_content":"不同类加载器加载的类除非是在一个双亲体系里，才可以互调，在实际应用中发现能互调，只是因为一个双亲体系里又加载了一次“外类”，此时就是虚拟机中存在了两个同类，只是双亲体系不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587206772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19284,"user_name":"一个坏人","can_delete":false,"product_type":"c1","uid":1032305,"ip_address":"","ucode":"4AF05BF008095A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","comment_is_top":false,"comment_ctime":1533746332,"is_pvip":true,"replies":[{"id":"6778","content":"验证失败虚拟机会报错退出。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1533894474,"ip_address":"","comment_id":19284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5828713628","product_id":100010301,"comment_content":"老师好，请教一个问题。&quot;在加载阶段就已经生成class结构了，所以我认为应该已经写入了方法区，只是被标记为未链接而暂不能使用。&quot; 如果验证失败怎么办？","like_count":1,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421764,"discussion_content":"验证失败虚拟机会报错退出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533894474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17963,"user_name":"Geek_135148","can_delete":false,"product_type":"c1","uid":1112566,"ip_address":"","ucode":"566A4AF4D79C34","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/f6/108eae01.jpg","comment_is_top":false,"comment_ctime":1533051716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5828019012","product_id":100010301,"comment_content":"老师 你好，你说的这些是一个类的加载流程，那什么样的类会经过这套流程呢？什么样的类会被加载呢？","like_count":1},{"had_liked":false,"id":17461,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1532660463,"is_pvip":false,"replies":[{"id":"6078","content":"是Java8引入的一个新概念，相当于方法指针，后面我会有一篇专门解释","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1532705488,"ip_address":"","comment_id":17461,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5827627759","product_id":100010301,"comment_content":"触发类初始化条件的第八条(“当初次调用MethodHandle”实例时)，这里的MethodHandle是什么意思呢？","like_count":1,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421163,"discussion_content":"是Java8引入的一个新概念，相当于方法指针，后面我会有一篇专门解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532705488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17232,"user_name":"L.B.Q.Y","can_delete":false,"product_type":"c1","uid":1069325,"ip_address":"","ucode":"5567989D1CDBBE","user_header":"https://static001.geekbang.org/account/avatar/00/10/51/0d/14d9364a.jpg","comment_is_top":false,"comment_ctime":1532515017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5827482313","product_id":100010301,"comment_content":"如果class结构是加载阶段写入方法区的，那么如果后面的链接阶段验证失败的话，还需要把已经写入方法区的class擦除是吗","like_count":1},{"had_liked":false,"id":17187,"user_name":"NEO🍋","can_delete":false,"product_type":"c1","uid":1166817,"ip_address":"","ucode":"802C34758A5185","user_header":"https://static001.geekbang.org/account/avatar/00/11/cd/e1/368f872c.jpg","comment_is_top":false,"comment_ctime":1532483668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5827450964","product_id":100010301,"comment_content":"老师<br>疑问1.大型应用中利用 不同的类加载器加载的类不同 的特性，可否具体举例是如何应用？在什么场景下应用<br>疑问2.双亲委派交给父类先查找 但是父类具体是怎么查找的？用的什么算法还是什么设定找到的？","like_count":1},{"had_liked":false,"id":17185,"user_name":"L.B.Q.Y","can_delete":false,"product_type":"c1","uid":1069325,"ip_address":"","ucode":"5567989D1CDBBE","user_header":"https://static001.geekbang.org/account/avatar/00/10/51/0d/14d9364a.jpg","comment_is_top":false,"comment_ctime":1532482928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5827450224","product_id":100010301,"comment_content":"应该是链接阶段是吗？","like_count":1},{"had_liked":false,"id":17169,"user_name":"郑杰","can_delete":false,"product_type":"c1","uid":1014917,"ip_address":"","ucode":"789EAB2A08EBEF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/85/8b221758.jpg","comment_is_top":false,"comment_ctime":1532479975,"is_pvip":true,"replies":[{"id":"5981","content":"把它命名为 小于号clinit大于号。<br>应该是显示问题，猜测某些浏览器给识别成标签了。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1532503574,"ip_address":"","comment_id":17169,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5827447271","product_id":100010301,"comment_content":"”除此之外的直接赋值操作，以及所有静态代码块中的代码，则会被 Java 编译器置于同一方法中，并把它命名为”   这一句是不是没写完啊，应该加上 cinit方法吧","like_count":1,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421067,"discussion_content":"把它命名为 小于号clinit大于号。\n应该是显示问题，猜测某些浏览器给识别成标签了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532503574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17164,"user_name":"左岸🌸开","can_delete":false,"product_type":"c1","uid":1080256,"ip_address":"","ucode":"1BBBBE724ECDE9","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/c0/517781b8.jpg","comment_is_top":false,"comment_ctime":1532479286,"is_pvip":false,"replies":[{"id":"5980","content":"小于号 clinit 大于号<br><br>我手机上看没问题，会不会哪个浏览器给识别成标签了？","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1532503465,"ip_address":"","comment_id":17164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5827446582","product_id":100010301,"comment_content":"“除此之外的直接赋值操作，以及所有静态代码块中的代码，则会被 Java 编译器置于同一方法中，并把它命名为”。请问一下这里是命名是什么？","like_count":1,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421065,"discussion_content":"小于号 clinit 大于号\n\n我手机上看没问题，会不会哪个浏览器给识别成标签了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532503465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17162,"user_name":"以我之姓贯你之名","can_delete":false,"product_type":"c1","uid":1179382,"ip_address":"","ucode":"973D732CF8ABE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/f6/7c943c5f.jpg","comment_is_top":false,"comment_ctime":1532478657,"is_pvip":false,"replies":[{"id":"5982","content":"还是一样的。你可以改下课后实践的代码，自己试一试。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1532504977,"ip_address":"","comment_id":17162,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5827445953","product_id":100010301,"comment_content":"延迟初始化单例那个是因为LazyHolder是静态私有内部类的关系吗 如果我把LazyHolder作为一个public class是不是就不一样了","like_count":1,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421064,"discussion_content":"还是一样的。你可以改下课后实践的代码，自己试一试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532504977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358868,"user_name":"Sanhong","can_delete":false,"product_type":"c1","uid":1005630,"ip_address":"广东","ucode":"0B68D6EE423CA8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/58/3e/77c9b529.jpg","comment_is_top":false,"comment_ctime":1664951693,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664951693","product_id":100010301,"comment_content":"新建数组，会导致数组元素类的类加载，但不会导致其链接，更不会导致其初始化（时序上，初始化在链接后面）。","like_count":0},{"had_liked":false,"id":350477,"user_name":"小鳄鱼","can_delete":false,"product_type":"c1","uid":1178888,"ip_address":"","ucode":"9C30CAFB41A263","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","comment_is_top":false,"comment_ctime":1656937542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656937542","product_id":100010301,"comment_content":"把stack 1改为stack 0是什么意思？会影响执行顺序吗？执行报了你java.lang.VerifyError，所以违反了JVM什么约束了？","like_count":0},{"had_liked":false,"id":339266,"user_name":"כן אני אמריקאי","can_delete":false,"product_type":"c1","uid":1527429,"ip_address":"","ucode":"56C5C2B369121B","user_header":"https://static001.geekbang.org/account/avatar/00/17/4e/85/ef0108cd.jpg","comment_is_top":false,"comment_ctime":1648018115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648018115","product_id":100010301,"comment_content":"感兴趣的朋友可以阅读一下我整理的文章笔记：https:&#47;&#47;juejin.cn&#47;post&#47;7066261471381946382","like_count":0},{"had_liked":false,"id":314267,"user_name":"山海","can_delete":false,"product_type":"c1","uid":1702117,"ip_address":"","ucode":"77FA9967E58FA3","user_header":"https://static001.geekbang.org/account/avatar/00/19/f8/e5/119d5c15.jpg","comment_is_top":false,"comment_ctime":1632923907,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1632923907","product_id":100010301,"comment_content":"老师，有几个问题还是不太清楚，请老师指点。 <br>新建数组会导致 类加载吗？如果加载，会导致它的链接，会导致它的初始化吗。 加载、链接、初始化他们没有严格的上下文关系么，也就是加载不一定链接，链接不一定初始化，他们都会在满足特定条件才会执行么？<br><br>在链接过程的“准备阶段”是给静态变量分配内存，静态字段并没有初始化，分配的内存到底有什么作用？<br><br>验证类所需要满足的约束条件到底是哪些？","like_count":0},{"had_liked":false,"id":311666,"user_name":"技术无止境","can_delete":false,"product_type":"c1","uid":1763139,"ip_address":"","ucode":"A638B554A80DEB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e7/43/cc6b8b5c.jpg","comment_is_top":false,"comment_ctime":1631373040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631373040","product_id":100010301,"comment_content":"学习了，老师讲的很好。","like_count":0},{"had_liked":false,"id":310511,"user_name":"Lin","can_delete":false,"product_type":"c1","uid":2754877,"ip_address":"","ucode":"3E96E2B8262AB0","user_header":"https://static001.geekbang.org/account/avatar/00/2a/09/3d/54ae3311.jpg","comment_is_top":false,"comment_ctime":1630691784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630691784","product_id":100010301,"comment_content":" 想问一下cms垃圾回收器处理漏标用的为什么是增量更新g1用的却是satb 一直没有得到特别标准的答案","like_count":0},{"had_liked":false,"id":307276,"user_name":"zhmacn","can_delete":false,"product_type":"c1","uid":2561868,"ip_address":"","ucode":"91FA8535808CA0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJrZ9ic5vHOVfzqcA3Y454gicI2z7L1Ujp5hzFr9CbfTu6goHE7fUlbl3QjpEvXJj5qlvRAVcGRomw/132","comment_is_top":false,"comment_ctime":1628999911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628999911","product_id":100010301,"comment_content":"郑老师，您好，我想了解下Classloader中的defineClass和resolveClass方法分别在处理类加载的那个阶段<br>看jdk的注释，感觉resolveClass是用来链接的<br>我自定义2个包含错误的类字节码，<br>一个包含两个完全相同的方法，<br>一个包含子类覆写父类final方法的类<br>两个类加载报错都在defineClass阶段，请问defineClass方法会对类进行链接吗","like_count":0},{"had_liked":false,"id":305087,"user_name":"Geek_0f2617","can_delete":false,"product_type":"c1","uid":1176934,"ip_address":"","ucode":"E1C70FA734AD07","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMldux8wkJgwThx9rywLsA5kABncUicHN0JZl0vLnvmCdGn09CPrDgdngjVp4GezicNwaNxjUcaNAA/132","comment_is_top":false,"comment_ctime":1627808218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627808218","product_id":100010301,"comment_content":"加载器的类型，SPI 这些怎么都没涉及","like_count":0},{"had_liked":false,"id":275962,"user_name":"八九","can_delete":false,"product_type":"c1","uid":1191617,"ip_address":"","ucode":"B996A884BFA474","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/c1/0fcd29ab.jpg","comment_is_top":false,"comment_ctime":1611731357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611731357","product_id":100010301,"comment_content":"老师您好，我做了三次试验，发现结果和您说的都不一致，麻烦您帮我看下。<br>1.按示例代码，查看类加载顺序，打印结果：<br>[Loaded Singleton$LazyHolder from file:&#47;E:&#47;dev_src&#47;playjvm&#47;src&#47;]<br>----<br>LazyHolder.<br><br>将源代码改为不符合jvm规范后，打印结果：<br>[Loaded java.util.IdentityHashMap$KeySet from D:\\worktools\\jdk\\jdk1.8.0_131\\jre\\lib\\rt.jar]<br>java.lang.VerifyError: Operand stack overflow<br>Exception Details:<br>  Location:<br>    Singleton.&lt;init&gt;()V @0: aload_0<br>  Reason:<br>    Exceeded max stack size.<br>  Current Frame:<br>    bci: @0<br>    flags: { flagThisUninit }<br>    locals: { uninitializedThis }<br>    stack: { }<br>  Bytecode:<br>    0x0000000: 2ab7 0008 b1<br><br>        at java.lang.Class.getDeclaredMethods0(Native Method)<br>        at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)<br>        at java.lang.Class.privateGetMethodRecursive(Class.java:3048)<br>        at java.lang.Class.getMethod0(Class.java:3018)<br>        at java.lang.Class.getMethod(Class.java:1784)<br>        at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)<br>        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)<br>[Loaded java.lang.Shutdown from D:\\worktools\\jdk\\jdk1.8.0_131\\jre\\lib\\rt.jar]<br><br><br>2.注释 getInstance(true); 查看类加载顺序，打印结果：<br>----<br>[Loaded Singleton$LazyHolder from file:&#47;E:&#47;dev_src&#47;playjvm&#47;src&#47;]<br>LazyHolder.<br><br>将源代码改为不符合jvm规范后，打印结果：【与示例代码的相同】<br>[Loaded java.util.IdentityHashMap$KeySet from D:\\worktools\\jdk\\jdk1.8.0_131\\jre\\lib\\rt.jar]<br>java.lang.VerifyError: Operand stack overflow<br><br><br>3.注释 getInstance(false); 查看类加载顺序，打印结果：<br>[Loaded Singleton$LazyHolder from file:&#47;E:&#47;dev_src&#47;playjvm&#47;src&#47;]<br>----<br><br>将源代码改为不符合jvm规范后，打印结果：【与示例代码的相同】<br>[Loaded java.util.IdentityHashMap$KeySet from D:\\worktools\\jdk\\jdk1.8.0_131\\jre\\lib\\rt.jar]<br>java.lang.VerifyError: Operand stack overflow<br><br><br>总结就是：getInstance(true); 和 getInstance(false); 都会链接元素类。 ","like_count":0},{"had_liked":false,"id":275903,"user_name":"八九","can_delete":false,"product_type":"c1","uid":1191617,"ip_address":"","ucode":"B996A884BFA474","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/c1/0fcd29ab.jpg","comment_is_top":false,"comment_ctime":1611715154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611715154","product_id":100010301,"comment_content":"老师您好，实践环节我有个问题。根据东方大佬的评论，总结是下面这样：<br>getInstance(true)只会加载元素类，不会链接和初始化。<br>getInstance(false)会加载、链接和初始化元素类。<br>可是我实际操作，发现将字节码改成不符合jvm规范后，打印加载顺序，结果为：java.lang.VerifyError:operand stack overflow，但是没有看到“----&quot;。<br>我理解是 如果链接中的验证是getInstance(false);触发的，那么应该打印“----”，麻烦老师帮我看一下，是我弄错了吗？","like_count":0},{"had_liked":false,"id":269166,"user_name":"coderkeep","can_delete":false,"product_type":"c1","uid":1129178,"ip_address":"","ucode":"29EE99F8F19F2E","user_header":"https://static001.geekbang.org/account/avatar/00/11/3a/da/7f9cbbd1.jpg","comment_is_top":false,"comment_ctime":1608542266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608542266","product_id":100010301,"comment_content":"类加载过程：加载，链接，初始化<br><br>构建数组只会触发类加载过程，即JVM只需要知道这个类是什么。<br><br>初始化某个类的时候会触发加载链接初始化全过程，因为此时需要调用该类的数据","like_count":0},{"had_liked":false,"id":261082,"user_name":"~~","can_delete":false,"product_type":"c1","uid":1440024,"ip_address":"","ucode":"4E316822CD8382","user_header":"https://static001.geekbang.org/account/avatar/00/15/f9/18/653a2daa.jpg","comment_is_top":false,"comment_ctime":1605191714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605191714","product_id":100010301,"comment_content":"类加载器是通过类的全限定名（或者说绝对路径）来找到一个class文件的:<br>1. 启动类加载器加载的是jre和jre&#47;lib目录下的核心库<br>2.扩展类加载器加载的是jre&#47;lib&#47;ext目录下的扩展包<br>3.AppClassLoader加载器加载当前java工程的bin目录下的class文件<br><br>运行Java程序, sun.misc.Launcher类就是虚拟机执行的第一段Java代码.<br>在这个类里,拓展类加载器和应用类加载器通过调用自己的静态方法拿到自己的实例.<br><br>自定义加载器的的默认父加载器是应用类加载器<br>应用类加载器的父加载器是拓展类加载器<br>拓展类加载器的父类是启动类加载器<br><br>实际加载类时,类加载器会通过类的绝对路径尝试从缓存里查找,如果没有找到,会交给父加载器去查找,一直找到启动类加载器.如果父加载器没有,则会返回给下一级的类加载器加载,如果底层的类加载器也没有找到,就会抛出异常.<br>这样(双亲委派模型)可以保证在你写了和Java核心类重名的类时,你这个类不会被加载,只有真正的核心类会被加载,保证了类的全局唯一性.","like_count":0},{"had_liked":false,"id":258972,"user_name":"Geek_03a866","can_delete":false,"product_type":"c1","uid":2129795,"ip_address":"","ucode":"204DC1D0C5F2FC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/hQ01GRPRFNTfBWX1Gmz0cqXZxbyJqHmORNJuE8yIqCbg1fXjvaWOGoatVo3Pbib5ZHCEqYFhSHhCVA8zr2Q2WuA/132","comment_is_top":false,"comment_ctime":1604589313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604589313","product_id":100010301,"comment_content":"问题：数组类为什么由java虚拟机直接生成，好处是什么","like_count":0},{"had_liked":false,"id":255323,"user_name":"大龙","can_delete":false,"product_type":"c1","uid":1215489,"ip_address":"","ucode":"723B84BCB21BD4","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/01/d9be4ea3.jpg","comment_is_top":false,"comment_ctime":1603305562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603305562","product_id":100010301,"comment_content":"自定义类加载器能解决多版本jar的问题吗，内部会不会存在类加载器混乱的情况。类加载器加载了两个不同版本的类，但是我们知道我们加载类也有自己的继承关系，继承关系中的类也有其继承关系。并且我们加载的这两个不同版本的类，实用到的类版本也不是相同的。针对上述问题，在类和对象的正常操作中能不能保证其不会越出自己的版本。<br>最后再提两个猜想，一是引入得jar中存在Thread.currentThread.classloader的问题，通过在发调用前&#47;后进行线程持有的classloader进行修改&#47;恢复，应该可以解决问题。二是我们知道类加载器加载类会询问父级，那么类的相关类或父类也存在版本冲突的情况下，会出问题吗","like_count":0},{"had_liked":false,"id":242068,"user_name":"水果刀","can_delete":false,"product_type":"c1","uid":1236586,"ip_address":"","ucode":"CA787A086DAB70","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/6a/4db4a75e.jpg","comment_is_top":false,"comment_ctime":1597583212,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597583212","product_id":100010301,"comment_content":"“加载，是指查找字节流，并且据此创建类的过程” 问：有点迷惑，这个创建类具体是指什么呢？将class文件放入java内存的方法区吗？","like_count":0,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395422,"discussion_content":"将class文件加载进入JVM的方法区，并在方法区中创建java.lang.Class对象作为外界访问这个类的接口。还用于确立这个类在Java虚拟机中的唯一性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632303255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237818,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1595982278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595982278","product_id":100010301,"comment_content":"单例模式那里有点疑问，class非基本类型与string理论上应该在同步方法cinit执行，有且执行一次，为什么还要加final？","like_count":0},{"had_liked":false,"id":235021,"user_name":"行道有德","can_delete":false,"product_type":"c1","uid":1495977,"ip_address":"","ucode":"92B2A5A6E8E7C3","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/a9/36e59707.jpg","comment_is_top":false,"comment_ctime":1594870973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594870973","product_id":100010301,"comment_content":"请问一下老师，双亲委派模式的作用是什么？","like_count":0},{"had_liked":false,"id":231140,"user_name":"鼠里鼠气","can_delete":false,"product_type":"c1","uid":1696883,"ip_address":"","ucode":"4793476BBDB202","user_header":"https://static001.geekbang.org/account/avatar/00/19/e4/73/74dce191.jpg","comment_is_top":false,"comment_ctime":1593592008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593592008","product_id":100010301,"comment_content":"⭐️JAVA虚拟机对于程序员来说就是一台真正的机器，我们不需要管程序在真实机器上到底是怎么运行的，我们只需要关注程序在java虚拟机上是怎么运行的就行了。<br>不知道对不对？","like_count":0},{"had_liked":false,"id":231025,"user_name":"Andot","can_delete":false,"product_type":"c1","uid":1185184,"ip_address":"","ucode":"12BB6AB281C4C9","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/a0/269ee92f.jpg","comment_is_top":false,"comment_ctime":1593567761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593567761","product_id":100010301,"comment_content":"1，会加载，因为要找到那个类，没有使用，所以不会初始化<br>2，当flag为false的是，创建这个类对象，所以要使用这个类，所以进行了链接","like_count":0},{"had_liked":false,"id":230645,"user_name":"li_geekbang","can_delete":false,"product_type":"c1","uid":1130215,"ip_address":"","ucode":"EEC0D4D8483B9F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ5EM9DFic49CCh2Vjliaic4qKAoUEnk4ticmFlhtJRibHGRHW7PUibE74MSgR0rZbia8wR9BfcZCBkoBZwQ/132","comment_is_top":false,"comment_ctime":1593439835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593439835","product_id":100010301,"comment_content":"C语言源代码生成可执行文件的过程中会有链接这一步。在后面执行程序的时候，也会有加载和链接这一步。","like_count":0},{"had_liked":false,"id":229867,"user_name":"Geek_85fa88","can_delete":false,"product_type":"c1","uid":2033191,"ip_address":"","ucode":"B2987B8A28C51D","user_header":"","comment_is_top":false,"comment_ctime":1593169133,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1593169133","product_id":100010301,"comment_content":"老师请教个问题，元数据区的class结构和java中的Class对象是什么关系，Class对象何时初始化你总结得很清楚，那我想问的是，Class对象初始化后的存储位置在哪呢，有的说在堆，有的说在方法区，望能指点迷津。<br>在此先谢谢。","like_count":0,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395423,"discussion_content":"class对象在堆区，class类的元数据在方法区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632303382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224673,"user_name":"SDZ","can_delete":false,"product_type":"c1","uid":1576238,"ip_address":"","ucode":"3353FCAD5B52C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/0d/2e/a6865099.jpg","comment_is_top":false,"comment_ctime":1591502829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591502829","product_id":100010301,"comment_content":"老师，我有个知识点上的疑问，这里的解析阶段的符号引用替换为实际引用，是将字节码中的符号引用指向运行时常量池的实际地址信息吗？","like_count":0},{"had_liked":false,"id":224605,"user_name":"宿臾洛城","can_delete":false,"product_type":"c1","uid":1564267,"ip_address":"","ucode":"362CC728E256F7","user_header":"https://static001.geekbang.org/account/avatar/00/17/de/6b/adee88bb.jpg","comment_is_top":false,"comment_ctime":1591460255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591460255","product_id":100010301,"comment_content":"加载类数组的时候，因为数组是个容器，仅仅是存放了对象，JVM会去寻找这个类，所以需要先初始化。<br>但是在加载后并没有使用这个类，所以不会去链接这个类，因为链接的定义是需要执行这个类。<br>而如果需要初始化的话是需要满足JVM的初始化8条规范里面的一条，只有调用其静态方法才是满足了JVM的第三条，所以那个时候才会初始化<br>","like_count":0},{"had_liked":false,"id":218372,"user_name":"半夏","can_delete":false,"product_type":"c1","uid":1461619,"ip_address":"","ucode":"F5DE4A11120F5F","user_header":"https://static001.geekbang.org/account/avatar/00/16/4d/73/17d3d431.jpg","comment_is_top":false,"comment_ctime":1589791031,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1589791031","product_id":100010301,"comment_content":"老师，有个问题一直没弄明白，类加载过程生成的Class对象是在方法区中还是在堆中呢？网上有的说在方法区，有的说在堆，有点糊涂。","like_count":0,"discussions":[{"author":{"id":1415623,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c7/93e90296.jpg","nickname":"文若","note":"","ucode":"691E79889202D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276286,"discussion_content":"class对象放在堆中,但是class对象就像你c里面的File对象，只是一个执向真实东西的指针,所以class对象对应的方法信息，字段信息，属性表信息都放在方法区吧.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590849202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1461619,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4d/73/17d3d431.jpg","nickname":"半夏","note":"","ucode":"F5DE4A11120F5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268513,"discussion_content":"以普通的类加载而言，将一个.class文件加载到内存后，这部分信息是会一直存在于内存中吗？还是创建完对应的Class对象之后就被丢弃了呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589793950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217509,"user_name":"keygrocery","can_delete":false,"product_type":"c1","uid":1286263,"ip_address":"","ucode":"F50E73298EDEE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/77/3a79b366.jpg","comment_is_top":false,"comment_ctime":1589521049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589521049","product_id":100010301,"comment_content":"&gt;类加载的最后一步是初始化，便是为标记为常量值的字段赋值，以及执行 &lt; clinit &gt; 方法的过程。Java 虚&gt;拟机会通过加锁来确保类的 &lt; clinit &gt; 方法仅被执行一次。<br><br>调用常量值，不会触发初始化，因为没有执行 &lt;clinit&gt; 方法<br>```java<br>public class Test {<br>\t<br>\t<br>\tpublic static void main(String[] args) throws Exception {<br>\t\tSystem.out.println(TestInit.i);<br>\t}<br>}<br><br>class TestInit {<br>\t<br>\tpublic static final String i = &quot;do not trigger init&quot;;<br>\t<br>\tstatic {<br>\t\tSystem.out.println(&quot;TestInit, inited&quot;);<br>\t}<br>}<br>```","like_count":0},{"had_liked":false,"id":216479,"user_name":"wesley","can_delete":false,"product_type":"c1","uid":1439353,"ip_address":"","ucode":"102E5F24FE7EBD","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/79/43fc66d3.jpg","comment_is_top":false,"comment_ctime":1589268393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589268393","product_id":100010301,"comment_content":"请教一下，这里Jvm加载类最后得到的是什么东西？是Spring里的BeanDefinition嘛？","like_count":0},{"had_liked":false,"id":212545,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1588145485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588145485","product_id":100010301,"comment_content":"加载类的触发条件有一条是new对象时，因此，数组的创建会触发加载lazy这个类，但是此时并没有使用这个类，只有真正使用时才会链接和初始化lazy类。","like_count":0},{"had_liked":false,"id":202497,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1585996614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585996614","product_id":100010301,"comment_content":"java -verbose:怎么看出是否链接<br>链接，是指将创建成的类合并至 Java 虚拟机中 没理解，这步操作有什么可视化的方式吗？","like_count":0},{"had_liked":false,"id":202491,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1585995625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585995625","product_id":100010301,"comment_content":"问题1有Singleton$LazyHolder 没有LazyHolder.&lt;clinit&gt; 会加载不会初始化","like_count":0},{"had_liked":false,"id":202476,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1585993944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585993944","product_id":100010301,"comment_content":"老师里面说统一放在&lt;Cinit&gt; 是因为java版本不一样吗？是不是就是如下代码？<br>public Method &quot;&lt;init&gt;&quot;:&quot;()V&quot;<br>\tstack 1 locals 1<br>{<br>\t\taload_0;<br>\t\tinvokespecial\tMethod java&#47;lang&#47;Object.&quot;&lt;init&gt;&quot;:&quot;()V&quot;;<br>\t\treturn;<br>}","like_count":0},{"had_liked":false,"id":201606,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1585810985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585810985","product_id":100010301,"comment_content":"沉浸到例子讲的是一室一厅四卫的设计里，该怎么设计这个房子呢？","like_count":0},{"had_liked":false,"id":201428,"user_name":"幸福就在不远处","can_delete":false,"product_type":"c1","uid":1622408,"ip_address":"","ucode":"1643DE193A7310","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/88/66e1f886.jpg","comment_is_top":false,"comment_ctime":1585788067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585788067","product_id":100010301,"comment_content":"如果这里面加上一张形象的类加载的图，在理解问题上，会少很多麻烦，而且老师都没什么总结，就是从开始说到结束.","like_count":0},{"had_liked":false,"id":201045,"user_name":"花花young","can_delete":false,"product_type":"c1","uid":1338584,"ip_address":"","ucode":"95AD30303C2B21","user_header":"https://static001.geekbang.org/account/avatar/00/14/6c/d8/68fec932.jpg","comment_is_top":false,"comment_ctime":1585708908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585708908","product_id":100010301,"comment_content":"新建数组会导致 LazyHolder 的链接吗？<br>这个问题不知道怎么判断","like_count":0},{"had_liked":false,"id":185794,"user_name":"delu","can_delete":false,"product_type":"c1","uid":1147592,"ip_address":"","ucode":"5678B856C095BF","user_header":"","comment_is_top":false,"comment_ctime":1583680321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583680321","product_id":100010301,"comment_content":"多谢老师！","like_count":0},{"had_liked":false,"id":185777,"user_name":"delu","can_delete":false,"product_type":"c1","uid":1147592,"ip_address":"","ucode":"5678B856C095BF","user_header":"","comment_is_top":false,"comment_ctime":1583678104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583678104","product_id":100010301,"comment_content":"老师，您好！看了下触发类的初始化条件，我这边测试发现关于4，5条，并不能真正触发类的初始化，可以看下面的简单示例：<br>public class Test {<br>    private static final String st1 = &quot;test&quot;;<br>    public static final int[] arr = new int[3];<br><br>    {<br>        System.out.println(arr[0]);<br>        System.out.println(arr[2]);<br>        arr[0] = 1;<br>        arr[1] = 2;<br>    }<br><br>    public static int[] getArr() {<br>        return arr;<br>    }<br><br>    public static void main(String[] args) {<br>        &#47;&#47;Test test = new Test();<br>        System.out.println(Test.arr[0]);<br>        System.out.println(Test.getArr()[1]);<br>    }<br><br>}<br><br>可以看到，打印输出结果都为0，也就是说调用类的静态方法或者静态字段，并不能触发类的初始化。<br>如果我这边示例有问题的话，也请帮忙指出，多谢了！","like_count":0},{"had_liked":false,"id":174332,"user_name":"wakaka","can_delete":false,"product_type":"c1","uid":1471508,"ip_address":"","ucode":"835A7341577D3B","user_header":"https://static001.geekbang.org/account/avatar/00/16/74/14/ea854bfc.jpg","comment_is_top":false,"comment_ctime":1580145753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580145753","product_id":100010301,"comment_content":"宏观上讲得还是比较清楚的。","like_count":0},{"had_liked":false,"id":156717,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1574941834,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574941834","product_id":100010301,"comment_content":"第三次听，终于理解了整个类加载的过程了。感谢","like_count":0},{"had_liked":false,"id":152394,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1573991238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573991238","product_id":100010301,"comment_content":"请问老师，程序是如何控制用哪个ClassLoader的呢？还有假如我自定义了一个ClassLoader，我怎么确定我要加载的类是还没有被上层的ClassLoader加载呢","like_count":0},{"had_liked":false,"id":150367,"user_name":"Mr.Brooks","can_delete":false,"product_type":"c1","uid":1118650,"ip_address":"","ucode":"D47A6B0236A79F","user_header":"https://static001.geekbang.org/account/avatar/00/11/11/ba/2175bc50.jpg","comment_is_top":false,"comment_ctime":1573523275,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573523275","product_id":100010301,"comment_content":"老师能否说一下匿名类jvm是如何处理的呢","like_count":0},{"had_liked":false,"id":145806,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1572375114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572375114","product_id":100010301,"comment_content":"如果没猜错的话，新建数组的的时候，数组元素的类型实际上是一个符号引用，所以这个地方一定会发生转换为直接引用，触发类加载<br><br>否则不能解释为什么会类加载不是吗？因为虚拟机也没有规定类加载的具体场景～～","like_count":0},{"had_liked":false,"id":145805,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1572374502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572374502","product_id":100010301,"comment_content":"- flags 为 false 的情况：<br><br>调用了 Singleton.main 显然会导致 Singleton 类的类加载，在其解析过程中会将所有方法的符号引用转为直接引用，然后通过直接引用执行 main 方法；<br><br>通过直接引用调用了 Singleton.getInstance 方法，访问了 LazyHolder 的静态常量，那么会触发 LazyHolder 的初始化，有初始化，肯定有类加载；<br><br>LazyHolder 的类加载的初始化阶段，会执行 clinit 方法，由于 INSTANCE 是一个类实例（不是基本类型或者 String），所以会在这个阶段初始化，这里会创建 Singleton 实例；<br><br>最后 getInstance 返回该实例；<br><br>- flags 为 true 的情况：<br><br>前面是一样的，依然会导致 LazyHolder 的加载，作为数组的类型元素，但是不满足初始化的条件；","like_count":0},{"had_liked":false,"id":145794,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1572367793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572367793","product_id":100010301,"comment_content":"**符号引用**：以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义的定位到目标即可；<br><br>举例来说，对于一个方法调用，编译器会生成一个包含目标方法所在类的名字、目标方法的名字、接收参数类型以及返回值类型的符号引用，来指代所要调用的方法。<br><br><br><br>**直接引用**：就是程序运行时可以定位到引用的东西（类, 对象, 变量或者方法等）的地址.<br><br>1. **直接指向目标的指针**。（个人理解为：指向方法区中类对象，类变量和类方法的指针）<br>2. **相对偏移量**。（指向实例的变量, 方法的指针）<br>3. **一个间接定位到对象的句柄**。<br><br><br><br>- **为什么要解析？**<br><br>在 class 文件被加载至 Java 虚拟机之前（或者说编译期间），这个类无法知道其他类及其方法、字段所对应的具体地址，甚至不知道自己方法、字段的地址。<br><br>因此只能使用符号引用来代替。<br><br>而在运行阶段，这个符号引用需要转为直接饮用，才能定位到具体目标上。","like_count":0},{"had_liked":false,"id":145791,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1572366646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572366646","product_id":100010301,"comment_content":"链接：是指**将创建成的类合并至 Java 虚拟机中，使之能够执行的过程**。<br><br>这个合并到底是什么操作？该如何理解？？","like_count":0},{"had_liked":false,"id":145703,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1572348691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572348691","product_id":100010301,"comment_content":"那几个是类加载的触发条件吧？ ","like_count":0},{"had_liked":false,"id":145689,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1572344702,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572344702","product_id":100010301,"comment_content":"&quot;在 class 文件被加载至 Java 虚拟机之前，这个类无法知道其他类及其方法、字段所对应的具体地址，甚至不知道自己方法、字段的地址。因此，每当需要引用这些成员时，Java 编译器会生成一个符号引用。在运行阶段，这个符号引用一般都能够无歧义地定位到具体目标上。&quot;<br><br>这句话的意思感觉像是，在加载至虚拟机之前，class 通过符号引用来访问方法。<br>这是什么时候回去访问呢？<br><br>","like_count":0,"discussions":[{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41105,"discussion_content":"没人指导下我吗？那我就死在这里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572353495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144196,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1571878028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571878028","product_id":100010301,"comment_content":"加载什么，链接什么，初始化什么？","like_count":0},{"had_liked":false,"id":140590,"user_name":"Starry","can_delete":false,"product_type":"c1","uid":1574105,"ip_address":"","ucode":"788395373D7B4C","user_header":"https://static001.geekbang.org/account/avatar/00/18/04/d9/47cae6cd.jpg","comment_is_top":false,"comment_ctime":1571012921,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1571012921","product_id":100010301,"comment_content":"坐在公交上，硬着头皮看了两遍，加深了点印象。唉，堵车上班要迟到了","like_count":0,"discussions":[{"author":{"id":1548645,"avatar":"https://static001.geekbang.org/account/avatar/00/17/a1/65/44853770.jpg","nickname":"Hi Young","note":"","ucode":"E1E9C88399F3C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159111,"discussion_content":"这玩意，如果没啥基础，还是静下心再看吧，最好配合写读书笔记，将知识结构化，要不事倍功半","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580652984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136361,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1569415434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569415434","product_id":100010301,"comment_content":"[Loaded lecture3.Singleton from file:&#47;D:&#47;IdeaProject&#47;deepinjvm&#47;src&#47;main&#47;java&#47;]<br>[Loaded java.lang.Class$MethodArray from D:\\Java\\jre1.8.0_91\\lib\\rt.jar]<br>[Loaded java.lang.Void from D:\\Java\\jre1.8.0_91\\lib\\rt.jar]<br>[Loaded lecture3.Singleton$LazyHolder from file:&#47;D:&#47;IdeaProject&#47;deepinjvm&#47;src&#47;main&#47;java&#47;]<br>-----<br>LazyHolder.&lt;clinit&gt;<br>可以通过上面的加载顺序来看出一和二的答案。<br>false的时候，即新建数组，加载是java.lang.Class$MethodArray，不会加载LazyHolder，也就更不会初始化LazyHolder了。<br>true的时候，才会加载LazyHolder和执行初始化，也就是上面的lecture3.Singleton$LazyHolder和LazyHolder.&lt;clinit&gt;两行","like_count":0},{"had_liked":false,"id":133653,"user_name":"丁乐洪","can_delete":false,"product_type":"c1","uid":1264392,"ip_address":"","ucode":"549CE57AB20B49","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/08/52954cd7.jpg","comment_is_top":false,"comment_ctime":1568629257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568629257","product_id":100010301,"comment_content":"双亲委派模型，能具体讲讲","like_count":0},{"had_liked":false,"id":132613,"user_name":"街角","can_delete":false,"product_type":"c1","uid":1045711,"ip_address":"","ucode":"F1085900AF9504","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/cf/001c5728.jpg","comment_is_top":false,"comment_ctime":1568172728,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1568172728","product_id":100010301,"comment_content":"老师，我想问下有个说法是&quot;字节码加载进内存后，会有字节码执行心引擎来执行字节码&quot;。我的问题是  类加载不是有 加载，校验，准备，解析，初始化 阶段嘛，  字节码执行引擎会参与上述其中哪些阶段？对于各阶段的的作用是啥？","like_count":0},{"had_liked":false,"id":131865,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1567942819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567942819","product_id":100010301,"comment_content":"---总结---<br>Java类型：基本类型、引用类型<br>引用类型：类、接口、数组类、泛型参数<br>具有字节流的引用类型：类、接口<br><br>加载：查找字节流并由该字节流创建类的过程<br>加载类的加载器选择：双亲委派模型<br>确定一个类：加载器实例+类全名<br><br>链接：验证、准备、解析<br>验证：确保class符合JVM约束条件<br>准备：静态字段内存分配、JVM层一些数据结构的构建<br>解析：符号引用-&gt;实际引用<br><br>初始化：为标记为常量的字段赋值并执行&lt;clinit&gt;方法<br>初始化的场景：虚拟机启动时的主类、new的目标类、静态方法调用或静态字段访问的所在类、子类初始化触发其父类、实现类调用接口的default触发其接口、反射、MethodHandle","like_count":0},{"had_liked":false,"id":125243,"user_name":"水","can_delete":false,"product_type":"c1","uid":1463129,"ip_address":"","ucode":"BADFE870E0B39E","user_header":"https://static001.geekbang.org/account/avatar/00/16/53/59/9f103ba6.jpg","comment_is_top":false,"comment_ctime":1566129995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566129995","product_id":100010301,"comment_content":"加载类时，类加载器会先给父类加载器过目，对于应用的类来说，加载应用里的类的传递过程，是不是最终只传递到应用类加载器，还是会一路传递到启动类加载器","like_count":0},{"had_liked":false,"id":107392,"user_name":"花花young","can_delete":false,"product_type":"c1","uid":1338584,"ip_address":"","ucode":"95AD30303C2B21","user_header":"https://static001.geekbang.org/account/avatar/00/14/6c/d8/68fec932.jpg","comment_is_top":false,"comment_ctime":1561526775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561526775","product_id":100010301,"comment_content":"解析阶段的目的，正是将这些符号引用解析成为实际引用。但是后续在总结中说到解析为非必须的该怎么理解呢？那初始化阶段也是以符号引用来存在吗？","like_count":0},{"had_liked":false,"id":100210,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1110967,"ip_address":"","ucode":"A14BA4C418315F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/b7/d7377f0c.jpg","comment_is_top":false,"comment_ctime":1559481262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559481262","product_id":100010301,"comment_content":"加载：查找字节流，并据此创建类的过程；（问题1：这里的创建类，是指把类创建到哪里了？）<br>链接：将创建成的类合并至Java虚拟机中，使之能够执行的过程。（问题2：这里所说的合并至Java虚拟机中是什么意思？）<br>","like_count":0},{"had_liked":false,"id":100078,"user_name":"辉仔lovers","can_delete":false,"product_type":"c1","uid":1210219,"ip_address":"","ucode":"3DC5B0CD0B8E71","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVhJRVwJ0eVlC7zjNfWP6PP7VmUkF1X2m6qfh7Wic3NhAOz2fSGibF6LXLcJ59zOz7nBpCcByvtFjw/132","comment_is_top":false,"comment_ctime":1559439293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559439293","product_id":100010301,"comment_content":"老师，这些用文字描述出来能看明白，但是还是感觉不透彻，能通过什么方式具体的看到这个类加载的过程码","like_count":0},{"had_liked":false,"id":99590,"user_name":"calljson","can_delete":false,"product_type":"c1","uid":1505262,"ip_address":"","ucode":"A5F81A6A5B4497","user_header":"https://static001.geekbang.org/account/avatar/00/16/f7/ee/6eeb58a3.jpg","comment_is_top":false,"comment_ctime":1559264161,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1559264161","product_id":100010301,"comment_content":"请问，为何类加载优先使用父加载器？谢谢","like_count":0,"discussions":[{"author":{"id":1243025,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f7/91/27401a3f.jpg","nickname":"kd叛逆","note":"","ucode":"F8870FBA8BB131","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24025,"discussion_content":"为了安全！避免程序员自己写的类覆盖jdk核心的类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569983611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94477,"user_name":"狂风骤雨","can_delete":false,"product_type":"c1","uid":1305749,"ip_address":"","ucode":"5CE9B9438FAB3F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZSibeTatZ2ImL5Xu3QqdTWQs5nyQAxDlsm3m0KicP3TN6icJqYricvhjOFfTB2B3oLInU45CC9LtqMA/132","comment_is_top":false,"comment_ctime":1557821151,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1557821151","product_id":100010301,"comment_content":"老师，我想问下，就是我们实际项目开发当中，tomcat启动了项目，是不是所有spring生成的bean都已经被初始化过了呢","like_count":0,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398063,"discussion_content":"没有，当你getBean的时候才会初始化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632727294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93644,"user_name":"过去、今日","can_delete":false,"product_type":"c1","uid":1097197,"ip_address":"","ucode":"8E171203B06513","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/ed/95e8a314.jpg","comment_is_top":false,"comment_ctime":1557543824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557543824","product_id":100010301,"comment_content":"有个疑问就是双亲委派模型，先是由父类加载器加载，父类加载器没找到请求类，才有子类加载器加载。怎么判断类加载器找到请求的类？还有就是符号引用和实际引用怎么理解？","like_count":0},{"had_liked":false,"id":91886,"user_name":"ning~","can_delete":false,"product_type":"c1","uid":1108374,"ip_address":"","ucode":"0ED5894F05BF90","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/96/38f54972.jpg","comment_is_top":false,"comment_ctime":1557128072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557128072","product_id":100010301,"comment_content":"加载，是指查找字节流，并且据此创建类的过程。<br><br>-----------<br>参考其他文章如下<br>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区中的运行时数据结构，在堆中生成一个代表这个类的java.lang.Class对象，作为方法区类数据的访问入口，这个过程需要类加载器参与。<br><br>","like_count":0},{"had_liked":false,"id":91737,"user_name":"jack Wong","can_delete":false,"product_type":"c1","uid":1356930,"ip_address":"","ucode":"EDF88971815846","user_header":"https://static001.geekbang.org/account/avatar/00/14/b4/82/62548de6.jpg","comment_is_top":false,"comment_ctime":1557103317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557103317","product_id":100010301,"comment_content":"老师想问问，这段代码public class Singleton {<br>  private Singleton() {}<br>  private static class LazyHolder {<br>    static final Singleton INSTANCE = new Singleton();<br>  }<br>  public static Singleton getInstance() {<br>    return LazyHolder.INSTANCE;<br>  }<br>}<br>就是里面那个INSTANCE常量，在初始化的时候jvm会不会加载Singleton这个类？如果触发了加载这个类那么我调用了Singleton这个类的getInstance静态方法还会不会再触发加载Singleton这个类呢？","like_count":0},{"had_liked":false,"id":89305,"user_name":"Hizkijah","can_delete":false,"product_type":"c1","uid":1106569,"ip_address":"","ucode":"C32996967BC5E4","user_header":"https://static001.geekbang.org/account/avatar/00/10/e2/89/2c07a3c1.jpg","comment_is_top":false,"comment_ctime":1556152673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556152673","product_id":100010301,"comment_content":"我觉得那个单例的讲的有问题，那个static的他只执行一次，为什么说他调用那个getInstance方法才会被初始化，才会创建对象，这样怎么保证单例。","like_count":0},{"had_liked":false,"id":88921,"user_name":"改变自己","can_delete":false,"product_type":"c1","uid":1498385,"ip_address":"","ucode":"3B3BC618DB1CF4","user_header":"https://static001.geekbang.org/account/avatar/00/16/dd/11/4a1f0703.jpg","comment_is_top":false,"comment_ctime":1556027237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556027237","product_id":100010301,"comment_content":"准备阶段，会初始化常量即final static修饰的变量吧","like_count":0},{"had_liked":false,"id":82960,"user_name":"换个名字","can_delete":false,"product_type":"c1","uid":1464255,"ip_address":"","ucode":"3AAE7D9124E27E","user_header":"https://static001.geekbang.org/account/avatar/00/16/57/bf/656a57c6.jpg","comment_is_top":false,"comment_ctime":1554359864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554359864","product_id":100010301,"comment_content":"当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类<br><br>这句话不太明白什么意思","like_count":0},{"had_liked":false,"id":79457,"user_name":"longslee","can_delete":false,"product_type":"c1","uid":1465986,"ip_address":"","ucode":"C24E32E5B1B6F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","comment_is_top":false,"comment_ctime":1553486017,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1553486017","product_id":100010301,"comment_content":"“准备阶段的目的，则是为被加载类的静态字段分配内存”<br><br>老师请问，这句话该如何理解呢？因为看到最后的初始化阶段，无论是否“常量值”，还是&lt; clinit &gt;，都在初始化阶段才赋值，那么“准备阶段”如何得知需要分配多大的空间呢？","like_count":0,"discussions":[{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41235,"discussion_content":"怎能不知道呢？？基本类型，这个占用多少字节，虚拟机就规定死了啊，引用类型就是地址，这个也可以知道啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572368953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79142,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1553384466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553384466","product_id":100010301,"comment_content":"请教一下能不能把如何实现对class文件加密又再自定义类加载器对文件解密具体怎么操作, 有没有相关资料的连接?","like_count":0},{"had_liked":false,"id":76994,"user_name":"恒","can_delete":false,"product_type":"c1","uid":1319490,"ip_address":"","ucode":"9D5451DBE2A2B7","user_header":"https://static001.geekbang.org/account/avatar/00/14/22/42/fefcffb8.jpg","comment_is_top":false,"comment_ctime":1552797932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552797932","product_id":100010301,"comment_content":"老师，假如有这么一个类叫Test，在初始化阶段时，有这么一句，static Test test = new Test();  <br>那么为什么结果会显示出这么一种现象，实例变量的初始化反而先于静态变量的初始化呢？","like_count":0},{"had_liked":false,"id":74266,"user_name":"Geek_ebda96","can_delete":false,"product_type":"c1","uid":1134862,"ip_address":"","ucode":"02912E6D95A5A6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoRiaKX0ulEibbbwM4xhjyMeza0Pyp7KO1mqvfJceiaM6ZNtGpXJibI6P2qHGwBP9GKwOt9LgHicHflBXw/132","comment_is_top":false,"comment_ctime":1552149559,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1552149559","product_id":100010301,"comment_content":"老师，请教一个问题，就是常量的静态变量不会触发类的初始化动作，但我实际测试遇到一个问题，如下代码：public class ConstDemo { static final int A = 10; static { System.out.println(&quot;Const init&quot;); } }，调用ConstDemo.A,不会输出 Const init，是正确的,现在把程序的A变量final修饰去掉，会输出Const init，这也是正确的，现在再把A变量加上final修饰，这次还是会输出Const init，这个就不正确，但如果把变量A的值修改一下，又不会输出Const init，请问这是什么原因呢","like_count":0,"discussions":[{"author":{"id":1076899,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6e/a3/bec136c0.jpg","nickname":"cxzm","note":"","ucode":"E94ACEF9D507A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7719,"discussion_content":"我调用常量 也会打印 static代码块的内容  这是咋回事  看网上说调用常量不会初始化类啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567650685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72902,"user_name":"得瑟男神","can_delete":false,"product_type":"c1","uid":1184863,"ip_address":"","ucode":"E103DB70C2BDE5","user_header":"https://static001.geekbang.org/account/avatar/00/12/14/5f/be822cf3.jpg","comment_is_top":false,"comment_ctime":1551753029,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1551753029","product_id":100010301,"comment_content":"前面说，除了启动类加载器外的其他类加载器都是 classloader 的子类。   后面又说扩展类加载器的父类是启动类加载器。  这两句我感觉有点矛盾，能否帮解释一下？","like_count":0,"discussions":[{"author":{"id":1191290,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2d/7a/6d5157d9.jpg","nickname":"旋转跳跃俺闭着眼","note":"","ucode":"F92B7246A9CDBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7598,"discussion_content":"此父非彼父吧，你看看评论，老师的意思应该是除了启动类加载器是c++实现的，其他的加载器类都是继承了classloader实现的，这里说的是类的继承关系，而委派模式中说的父类指的并不是继承关系的父类，这个父类指的是双亲委派的概念吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567581453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69065,"user_name":"bad kid","can_delete":false,"product_type":"c1","uid":1414480,"ip_address":"","ucode":"048302B6A526C6","user_header":"https://static001.geekbang.org/account/avatar/00/15/95/50/d4faed7b.jpg","comment_is_top":false,"comment_ctime":1550654918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550654918","product_id":100010301,"comment_content":"老师及各位大佬：请问下在链接阶段就已经给类变量初始化了；初始化阶段也是对类变量进行初始化，这不是重复了吗？","like_count":0},{"had_liked":false,"id":64254,"user_name":"休息一下马上回来","can_delete":false,"product_type":"c1","uid":1083319,"ip_address":"","ucode":"59F750F962A9B9","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/b7/ba7a841f.jpg","comment_is_top":false,"comment_ctime":1548727457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548727457","product_id":100010301,"comment_content":"老师，问一下什么是虚方法的动态绑定","like_count":0},{"had_liked":false,"id":62612,"user_name":"金龟","can_delete":false,"product_type":"c1","uid":1228500,"ip_address":"","ucode":"1C7D35C8AE8D9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg","comment_is_top":false,"comment_ctime":1548119943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548119943","product_id":100010301,"comment_content":"请教一下，通过不同的classloader能多次加载相同的类到jvm，这样的母的是什么，能举个应用场景吗","like_count":0},{"had_liked":false,"id":61553,"user_name":"余渡","can_delete":false,"product_type":"c1","uid":1384342,"ip_address":"","ucode":"0B2A97BF7E8F9E","user_header":"https://static001.geekbang.org/account/avatar/00/15/1f/96/14a52767.jpg","comment_is_top":false,"comment_ctime":1547721341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547721341","product_id":100010301,"comment_content":"public class Singleton {<br>    &#47;&#47;著名的单例延迟初始化例子<br>    private Singleton(){};<br>    private static class LazyHolder{<br>        static final Singleton INSTANCE = new Singleton();<br>        static {<br>            System.out.println(&quot;LazyHolder .&lt;clinit&gt;&quot;);<br>        }<br>    }<br>    public static Object getInstance(){<br>         return new LazyHolder[2];<br>    }<br>    public static void main(String[] args) {<br>        System.out.println(&quot;------&quot;);<br>        getInstance();<br>    }<br>1：先不更改字节码运行结果是<br>------<br>因此可以看出来是没有初始化的，不然的话就应该出现了LazyHolder .&lt;clinit&gt;<br>第一个问题：会导致LazyHolder的加载么？<br>根据得出的日志来看，是加载了的。<br>第二个问题：新建数组会导致LazyHolder的链接么？<br>在我更改了stack 0 之后，继续运行的代码是没有报错的。<br>链接的三个阶段：验证 准备 解析 解析不是在这个阶段必备的。<br>当更改了字节码之后，如果导致链接那么第一件事儿就是验证，当类加载器检测到字节码不错误时，就会报错，程序没有报错，则说明新建数组不会导致LazyHolder的链接。<br>还有些同学可能在windos上边无法运行asmtools，网上的教程也不是很全面，起码我自己就失败了，只好自己想其他办法解决了这个问题，有同学感兴趣可以email我MonkeyNull@163.com<br>","like_count":0},{"had_liked":false,"id":61319,"user_name":"张钊","can_delete":false,"product_type":"c1","uid":1349716,"ip_address":"","ucode":"62E4940B3B90AA","user_header":"https://static001.geekbang.org/account/avatar/00/14/98/54/85b4224d.jpg","comment_is_top":false,"comment_ctime":1547658712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547658712","product_id":100010301,"comment_content":"老师，能讲一下单例的恶汉模式为什么在加载时会完成初始化吗","like_count":0},{"had_liked":false,"id":57764,"user_name":"hughieyu","can_delete":false,"product_type":"c1","uid":1206690,"ip_address":"","ucode":"FC1A64B2BAB784","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/a2/c30ac459.jpg","comment_is_top":false,"comment_ctime":1546906702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546906702","product_id":100010301,"comment_content":"链接，初始化这些动作是在堆中的Class对象中进行的吗，还是在方法区中？","like_count":0},{"had_liked":false,"id":56667,"user_name":"亮出","can_delete":false,"product_type":"c1","uid":1014289,"ip_address":"","ucode":"A7673283D03656","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/11/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1546519026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546519026","product_id":100010301,"comment_content":"对比打印的不同点<br><br>修改前:<br>LazyHolder.&lt;clinit&gt;<br><br>修改后:<br>[Loaded java.lang.VerifyError from &#47;Library&#47;Java&#47;JavaVirtualMachines&#47;jdk1.8.0_101.jdk&#47;Contents&#47;Home&#47;jre&#47;lib&#47;rt.jar]<br>[Loaded java.lang.Throwable$PrintStreamOrWriter from &#47;Library&#47;Java&#47;JavaVirtualMachines&#47;jdk1.8.0_101.jdk&#47;Contents&#47;Home&#47;jre&#47;lib&#47;rt.jar]<br>[Loaded java.lang.Throwable$WrappedPrintStream from &#47;Library&#47;Java&#47;JavaVirtualMachines&#47;jdk1.8.0_101.jdk&#47;Contents&#47;Home&#47;jre&#47;lib&#47;rt.jar]<br>[Loaded java.util.IdentityHashMap from &#47;Library&#47;Java&#47;JavaVirtualMachines&#47;jdk1.8.0_101.jdk&#47;Contents&#47;Home&#47;jre&#47;lib&#47;rt.jar]<br>[Loaded java.util.IdentityHashMap$KeySet from &#47;Library&#47;Java&#47;JavaVirtualMachines&#47;jdk1.8.0_101.jdk&#47;Contents&#47;Home&#47;jre&#47;lib&#47;rt.jar]<br><br>不知道是否正确<br><br>","like_count":0},{"had_liked":false,"id":55539,"user_name":"尔东","can_delete":false,"product_type":"c1","uid":1360829,"ip_address":"","ucode":"C0983536C63E2A","user_header":"https://static001.geekbang.org/account/avatar/00/14/c3/bd/ec8b3044.jpg","comment_is_top":false,"comment_ctime":1546226779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546226779","product_id":100010301,"comment_content":"Class文件到内存中的类，加载、链接、初始化<br>加载，查找字节流，通过类加载器创建类，使用双亲委托模型。加载后类的唯一性由类的全名和加载类实例共同决定。<br>链接，将创建成的类合并至java虚拟机，使之可以被执行。链接分为验证、准备和解析。验证判断加载的字节流合法性，准备是为静态字段分配内存及创建方法字段的符号引用。解析是将符号引用解析为实际引用。<br>初始化，就是初始化静态字段和静态代码块，类的初始化只会被执行一次，是线程安全的，所以可以被用于实现单例的延迟初始化。<br><br>新建数组会加载LazyHolder类，但不会触发初始化<br>新建数组不会链接元素，也不会初始化","like_count":0},{"had_liked":false,"id":51566,"user_name":"木头疙瘩","can_delete":false,"product_type":"c1","uid":1025529,"ip_address":"","ucode":"FAA5C23F0C4BC3","user_header":"","comment_is_top":false,"comment_ctime":1545200777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545200777","product_id":100010301,"comment_content":"郑博士好，<br>“如果直接赋值的静态字段被 final 所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被 Java 编译器标记成常量值（ConstantValue）”，对于这段描述有个问题，如下代码:static final String a = System.currentTimeMillis()+&quot;&quot;，这里面的变量a也会被视为常量值吗？谢谢","like_count":0},{"had_liked":false,"id":48524,"user_name":"小泷哥","can_delete":false,"product_type":"c1","uid":1255252,"ip_address":"","ucode":"128C9C4B0AFE7F","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/54/d38c34a0.jpg","comment_is_top":false,"comment_ctime":1544462914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544462914","product_id":100010301,"comment_content":"常量难道不应该是字面量吗？还要需要赋值？","like_count":0},{"had_liked":false,"id":42047,"user_name":"橙生北国","can_delete":false,"product_type":"c1","uid":1251905,"ip_address":"","ucode":"13E32479E111B7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1a/41/3d87f7ac.jpg","comment_is_top":false,"comment_ctime":1542897686,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1542897686","product_id":100010301,"comment_content":"老师，您好。我想问一下关于双亲委派模型的问题，为什么双亲委派模型是用组合而不用继承？这个问题是我在面试的时候面试官问我的，我当时说的是继承与组合的好处与坏处，面试官说不对。","like_count":0},{"had_liked":false,"id":40253,"user_name":"小和尚笨南北","can_delete":false,"product_type":"c1","uid":1204628,"ip_address":"","ucode":"17C9BBB6DD25D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/61/94/713b38ef.jpg","comment_is_top":false,"comment_ctime":1542586383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542586383","product_id":100010301,"comment_content":"深入理解Java虚拟机中描述到常量值在准备阶段就会被赋值，老师所讲也是在初始化阶段。<br>哪位大佬解惑一下。","like_count":0},{"had_liked":false,"id":38699,"user_name":"是我","can_delete":false,"product_type":"c1","uid":1297235,"ip_address":"","ucode":"0AC816A2FBD4F4","user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/53/262a8ce2.jpg","comment_is_top":false,"comment_ctime":1542109615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542109615","product_id":100010301,"comment_content":"老师代码是直接用工具编写运行？还是用cmd或者是linux下运行？","like_count":0},{"had_liked":false,"id":37483,"user_name":"茫农","can_delete":false,"product_type":"c1","uid":1206365,"ip_address":"","ucode":"71F7143644C9CB","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/5d/1ccee378.jpg","comment_is_top":false,"comment_ctime":1541603742,"is_pvip":false,"replies":[{"id":"14126","content":"有道理！","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1542281307,"ip_address":"","comment_id":37483,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541603742","product_id":100010301,"comment_content":"叫双亲委派应该是为了遵从男女平等,貌似以前在哪看过","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428360,"discussion_content":"有道理！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542281307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36455,"user_name":"雨木","can_delete":false,"product_type":"c1","uid":1270946,"ip_address":"","ucode":"88767017F5F124","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJorsc1l1REnllw2FJRGm21fPic5wickHmZxUf4dgrfKtT3D2p67vUs1R3tpvZMsABYJP7jpEOExoag/132","comment_is_top":false,"comment_ctime":1541120377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541120377","product_id":100010301,"comment_content":"加载链接初始化三个步骤是一起执行的吗？还是说存在加载链接了，但是还没有初始化的情况？","like_count":0},{"had_liked":false,"id":35753,"user_name":"杨春鹏","can_delete":false,"product_type":"c1","uid":1172056,"ip_address":"","ucode":"518F38232F97B5","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg","comment_is_top":false,"comment_ctime":1540782775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540782775","product_id":100010301,"comment_content":"关于热部署实现:自定义了一个类加载器，然后在测试类一直运行过程中修改了class文件，结果输出信息还是没有发生变化(对象使用new创建，然后调用toString())","like_count":0},{"had_liked":false,"id":34705,"user_name":"北纬30⁰","can_delete":false,"product_type":"c1","uid":1212858,"ip_address":"","ucode":"BB7DB0DD57F252","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/ba/0a423b3c.jpg","comment_is_top":false,"comment_ctime":1540263242,"is_pvip":false,"replies":[{"id":"12764","content":"英文parent翻译过来的，不含爷爷辈分。<br><br>另你自定义的class loader，会委派给爸爸，爷爷，太爷爷的 :)","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1540822393,"ip_address":"","comment_id":34705,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1540263242","product_id":100010301,"comment_content":"双亲委派模式，因该是指的爸爸辈分和爷爷辈分这两个亲人吧<br>","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427304,"discussion_content":"英文parent翻译过来的，不含爷爷辈分。\n\n另你自定义的class loader，会委派给爸爸，爷爷，太爷爷的 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540822393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31483,"user_name":"小白粥粥","can_delete":false,"product_type":"c1","uid":1192710,"ip_address":"","ucode":"7A6E2F6E045DFB","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/06/ebfac609.jpg","comment_is_top":false,"comment_ctime":1539217278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539217278","product_id":100010301,"comment_content":"看不懂啊，半道出家太难，像天书一样，我还得多读几遍理解理解","like_count":0},{"had_liked":false,"id":30472,"user_name":"赵纬龙","can_delete":false,"product_type":"c1","uid":1178396,"ip_address":"","ucode":"FEFB38BEC16A0F","user_header":"","comment_is_top":false,"comment_ctime":1538879945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538879945","product_id":100010301,"comment_content":"老师，工作当中经常遇到编译没有问题，但是在部署的时候出现class not found的报错，不需要重新编译，只要重新部署就不报会报错且可以正常启动了，这种情况是什么原因呢，有没有可能是类加载器的问题呢？","like_count":0},{"had_liked":false,"id":30103,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1538663032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538663032","product_id":100010301,"comment_content":"老师您好，关于类在什么时候加载还是没搞清楚，请问是由应用类加载器一下子加载classpath下的所有类吗？还是有什么规则呢","like_count":0},{"had_liked":false,"id":29794,"user_name":"动稽不纯","can_delete":false,"product_type":"c1","uid":1258803,"ip_address":"","ucode":"9E74A28AA603B3","user_header":"https://static001.geekbang.org/account/avatar/00/13/35/33/7797074f.jpg","comment_is_top":false,"comment_ctime":1538543046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538543046","product_id":100010301,"comment_content":"数组类是啥 list?","like_count":0},{"had_liked":false,"id":29649,"user_name":"wessonwang","can_delete":false,"product_type":"c1","uid":1000441,"ip_address":"","ucode":"A9BA5E3A3F278E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f9/723ee153.jpg","comment_is_top":false,"comment_ctime":1538469396,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1538469396","product_id":100010301,"comment_content":"郑老师，有个问题不解，为什么验证在加载之前？如果验证不合法，加载这一步不是白做了嘛？","like_count":0,"discussions":[{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107790,"discussion_content":"不加载，怎么验证呢？😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577607669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28291,"user_name":"培","can_delete":false,"product_type":"c1","uid":1015606,"ip_address":"","ucode":"4131A0B293A6B5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/36/518601f6.jpg","comment_is_top":false,"comment_ctime":1538044470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538044470","product_id":100010301,"comment_content":"感觉好深奥呀……是我的水平太低了吗😯","like_count":0},{"had_liked":false,"id":25550,"user_name":"杨春鹏","can_delete":false,"product_type":"c1","uid":1172056,"ip_address":"","ucode":"518F38232F97B5","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/58/8c8897c8.jpg","comment_is_top":false,"comment_ctime":1537361607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537361607","product_id":100010301,"comment_content":"类的加载过程中的 “初始化”为类的静态变量赋值，那么没有被static修饰的字段，有没有被赋值呢。<br>比如：<br>public Test{<br>  public String name;<br>  public void fun(){<br>      System.out.println(name);<br>}<br>}<br>依然可以输出null;那么这个name是在哪个阶段赋值的","like_count":0},{"had_liked":false,"id":25234,"user_name":"遥远的旅程","can_delete":false,"product_type":"c1","uid":1178150,"ip_address":"","ucode":"018BC1E6AC9DC9","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/26/c3037680.jpg","comment_is_top":false,"comment_ctime":1537274594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537274594","product_id":100010301,"comment_content":"请问new指令执行的时候，是根据class对象来创建对象开辟内存和吗","like_count":0},{"had_liked":false,"id":24593,"user_name":"hpfish","can_delete":false,"product_type":"c1","uid":1217377,"ip_address":"","ucode":"86DB066E5B6D89","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/61/3e4607c7.jpg","comment_is_top":false,"comment_ctime":1537158678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537158678","product_id":100010301,"comment_content":"有个问题，常量不是在准备阶段就直接赋值的吗？","like_count":0},{"had_liked":false,"id":24148,"user_name":"hailowell","can_delete":false,"product_type":"c1","uid":1195572,"ip_address":"","ucode":"557DCAB01710AB","user_header":"","comment_is_top":false,"comment_ctime":1536824196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536824196","product_id":100010301,"comment_content":"老师 您讲的延迟单例那里<br>如果先通过反射触发初始化，再触发LayzyHolder的初始化 会不会导致LazyHolder的父类初始化两次？","like_count":0},{"had_liked":false,"id":23803,"user_name":"darling","can_delete":false,"product_type":"c1","uid":1181258,"ip_address":"","ucode":"78BA685D7B71A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/4a/e8519ff4.jpg","comment_is_top":false,"comment_ctime":1536667569,"is_pvip":false,"replies":[{"id":"8720","content":"新建长度为2的数组","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1536680070,"ip_address":"","comment_id":23803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536667569","product_id":100010301,"comment_content":"new LazyHolder[2] 是什么意思啊???没这么用过","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423736,"discussion_content":"新建长度为2的数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536680070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21942,"user_name":"bhfjf","can_delete":false,"product_type":"c1","uid":1105557,"ip_address":"","ucode":"45A1A1AA698750","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/95/4948f80f.jpg","comment_is_top":false,"comment_ctime":1535417562,"is_pvip":false,"replies":[{"id":"7901","content":"之所以用初始化，就是为了解决你列出来的这段代码的潜在问题。你可以搜一下double checked locking的wiki","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1535465256,"ip_address":"","comment_id":21942,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1535417562","product_id":100010301,"comment_content":"老师你好，我有个问题，既然初始化是线程安全的，那为什么我当时学的时候老师要让我们这么写单例模式来保证安全呢？这样再加锁是不是就多余了呀？<br>public class Single{<br>     private Single(){}<br>     private Single single;<br>     public static Single getInstance(){<br>          if(single==null){<br>              synchronized(Single.class){<br>                   if(single==null){<br>                      single = new Single();<br>                   }<br>              }<br>          }<br>          return single;<br>     }<br>}","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422931,"discussion_content":"之所以用初始化，就是为了解决你列出来的这段代码的潜在问题。你可以搜一下double checked locking的wiki","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535465256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179184,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","nickname":"NullPointer","note":"","ucode":"83B7DA926A0411","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294793,"discussion_content":"这段代码有问题， single 必须用volatile 修饰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596001185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21562,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1535168108,"is_pvip":false,"replies":[{"id":"7815","content":"这一篇的留言中我已经回答过一样的问题了。我是按照最新版的Java虚拟机规范来写的。不过从实现的角度来看，我觉得都可以。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1535357670,"ip_address":"","comment_id":21562,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1535168108","product_id":100010301,"comment_content":"老师你好，有个问题特来请教，《深入理解Java虚拟机》一书中提到ConstantValue是在准备阶段赋值（不仅仅是初始化为0值），而您这边说ConstantValue是在类加载的最后一步即初始化阶段中赋值，请问哪一个说法是正确的呢？","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422741,"discussion_content":"这一篇的留言中我已经回答过一样的问题了。我是按照最新版的Java虚拟机规范来写的。不过从实现的角度来看，我觉得都可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535357670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21517,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1535132049,"is_pvip":true,"replies":[{"id":"7816","content":"通过加锁实现的。所以稍有不慎这一部分很容易造成死锁。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1535357821,"ip_address":"","comment_id":21517,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1535132049","product_id":100010301,"comment_content":"您好，文中提到类初始化是线程安全的，请我虚拟机是如何实现这一点的呢","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422716,"discussion_content":"通过加锁实现的。所以稍有不慎这一部分很容易造成死锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535357821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21152,"user_name":"dingwood","can_delete":false,"product_type":"c1","uid":1153828,"ip_address":"","ucode":"460EB0C6E8C611","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/24/1e4883c6.jpg","comment_is_top":false,"comment_ctime":1534941475,"is_pvip":false,"replies":[{"id":"7622","content":"Java 8","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1535117376,"ip_address":"","comment_id":21152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534941475","product_id":100010301,"comment_content":"java -cp &#47;path&#47;to&#47;asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm.1，执行这句报错：java.lang.UnsupportedClassVersionError: org&#47;openjdk&#47;asmtools&#47;jdis&#47;Main : Unsupported major.minor version 52.0。。支持什么版本的jdk啊。","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422554,"discussion_content":"Java 8","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535117376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20318,"user_name":"猿工匠","can_delete":false,"product_type":"c1","uid":1112986,"ip_address":"","ucode":"82FA8DE6C28936","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/9a/72f7b184.jpg","comment_is_top":false,"comment_ctime":1534379287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1534379287","product_id":100010301,"comment_content":"学习了，由浅入深","like_count":0},{"had_liked":false,"id":19283,"user_name":"一个坏人","can_delete":false,"product_type":"c1","uid":1032305,"ip_address":"","ucode":"4AF05BF008095A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","comment_is_top":false,"comment_ctime":1533745611,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1533745611","product_id":100010301,"comment_content":"老师好，请假一个问题。“Java 虚拟机规范并没有要求在链接过程中完成解析。它仅规定了：如果某些字节码使用了符号引用，那么在执行这些字节码之前，需要完成对这些符号引用的解析。” 这个 解析符合引用的具体过程是？当前阶段还是没法知道方法具体的信息 ，感觉还是只能是符号引用？谢谢老师。","like_count":0},{"had_liked":false,"id":18515,"user_name":"王刚","can_delete":false,"product_type":"c1","uid":1103821,"ip_address":"","ucode":"4763CC9A937C38","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/cd/6ebfc468.jpg","comment_is_top":false,"comment_ctime":1533398356,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1533398356","product_id":100010301,"comment_content":"你好，老师，我想问一个问题～类加载的过程可以总结为：<br>1、加载class字节码文件到虚拟机中<br>2、验证<br>3、准备<br>4、解析<br>5、初始化<br><br>我想问的是在加载class文件时，在没有到达虚拟机方法区中时，是不是已经完成了验证？只有验证通过的class字节码文件才会加载到方法区中？","like_count":0},{"had_liked":false,"id":18388,"user_name":"I","can_delete":false,"product_type":"c1","uid":1028272,"ip_address":"","ucode":"6F6367210ED44A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/b0/9335798e.jpg","comment_is_top":false,"comment_ctime":1533285527,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1533285527","product_id":100010301,"comment_content":"最近碰到一个问题，想请教下作者<br>tomcat是自定义类加载器加载应用类的，我用的是8.5版本，但是使用并行流的时候，获取并行流中的类加载器返回的是null，这个是为什么啊","like_count":0},{"had_liked":false,"id":17872,"user_name":"张大彪","can_delete":false,"product_type":"c1","uid":1101497,"ip_address":"","ucode":"A5EC3A52D674BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/b9/856392ce.jpg","comment_is_top":false,"comment_ctime":1533000837,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1533000837","product_id":100010301,"comment_content":"对于字节码不了解，不知道改字节码到底改了啥。只要只改字节码后面的东西都不知道怎么回事了。","like_count":0},{"had_liked":false,"id":17867,"user_name":"Mk","can_delete":false,"product_type":"c1","uid":1111162,"ip_address":"","ucode":"47B5A800BA8065","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/7a/c24cc939.jpg","comment_is_top":false,"comment_ctime":1533000056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533000056","product_id":100010301,"comment_content":"类加载时候加锁 如果在里面进行多线程回出现死锁 请老师具体讲解下。","like_count":0},{"had_liked":false,"id":17859,"user_name":"倪有才","can_delete":false,"product_type":"c1","uid":1185995,"ip_address":"","ucode":"21D0015A56FDE1","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/cb/b60a7e57.jpg","comment_is_top":false,"comment_ctime":1532998661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532998661","product_id":100010301,"comment_content":"这些内容确实没有离开深入了解jvm那本书的内容，希望老师能够加深讲解","like_count":0},{"had_liked":false,"id":17812,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1532963330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532963330","product_id":100010301,"comment_content":"mover说了我想说的话","like_count":0},{"had_liked":false,"id":17617,"user_name":"silver-lrs","can_delete":false,"product_type":"c1","uid":1100852,"ip_address":"","ucode":"9E7F46E955CC77","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/34/295d6f80.jpg","comment_is_top":false,"comment_ctime":1532786990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532786990","product_id":100010301,"comment_content":"类加载时如果引用另外一个类，那么这个类会先加载，那么请教一下，如果循环引用呢，会发生什么事？","like_count":0},{"had_liked":false,"id":17541,"user_name":"赌神很低调","can_delete":false,"product_type":"c1","uid":1168545,"ip_address":"","ucode":"1066778E1EDF26","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/a1/8bc8e7e1.jpg","comment_is_top":false,"comment_ctime":1532738335,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1532738335","product_id":100010301,"comment_content":"老师说了初始化发生的时间，请问老师类加载和链接是在什么时候发生的","like_count":0},{"had_liked":false,"id":17524,"user_name":"、","can_delete":false,"product_type":"c1","uid":1162040,"ip_address":"","ucode":"9BA80F04C1D5E2","user_header":"https://static001.geekbang.org/account/avatar/00/11/bb/38/2fb5c4ce.jpg","comment_is_top":false,"comment_ctime":1532707310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532707310","product_id":100010301,"comment_content":"操作字节码文件还挺有成就感 谢谢老师  虽然大部分看不懂字节码","like_count":0},{"had_liked":false,"id":17403,"user_name":"Bmo","can_delete":false,"product_type":"c1","uid":1183832,"ip_address":"","ucode":"EDED4DB4E7FC3B","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/58/4672a724.jpg","comment_is_top":false,"comment_ctime":1532616734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532616734","product_id":100010301,"comment_content":"静态内部类(或者内部类？)在外部类初始化的时候不会被加载，然后当调用getInstance的时候，才会加载内部类，然后因为内部那个初始化是同步的，所以这个单例实现了懒加载线程安全，我这么理解有问题吗","like_count":0},{"had_liked":false,"id":17338,"user_name":"Kenneth","can_delete":false,"product_type":"c1","uid":1183069,"ip_address":"","ucode":"AF46C8EEBDA3D0","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/5d/e50cf9c7.jpg","comment_is_top":false,"comment_ctime":1532575771,"is_pvip":false,"replies":[{"id":"6070","content":"这一段直接文本编辑也可以，并不一定要用awk。直接man awk应该有用法的。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1532703344,"ip_address":"","comment_id":17338,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532575771","product_id":100010301,"comment_content":"老师你好，awk……这些在哪里可以学习呢？指令看不懂怎么办，谢谢！","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421118,"discussion_content":"这一段直接文本编辑也可以，并不一定要用awk。直接man awk应该有用法的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532703344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17320,"user_name":"WolvesLeader","can_delete":false,"product_type":"c1","uid":1103839,"ip_address":"","ucode":"33610E19CA2E96","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/df/fc0a6709.jpg","comment_is_top":false,"comment_ctime":1532567562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532567562","product_id":100010301,"comment_content":"想问哈，类的class文件中的所有内容全部会被加载到方法区中，还是class中的方法被加载到方法区","like_count":0},{"had_liked":false,"id":17264,"user_name":"cxzm","can_delete":false,"product_type":"c1","uid":1076899,"ip_address":"","ucode":"E94ACEF9D507A6","user_header":"https://static001.geekbang.org/account/avatar/00/10/6e/a3/bec136c0.jpg","comment_is_top":false,"comment_ctime":1532529968,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532529968","product_id":100010301,"comment_content":"老师，关于类初始化和类实例化有哪些区别呢？","like_count":0},{"had_liked":false,"id":17261,"user_name":"加多","can_delete":false,"product_type":"c1","uid":1101824,"ip_address":"","ucode":"B2192A2D58C444","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/00/9d05af66.jpg","comment_is_top":false,"comment_ctime":1532528645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532528645","product_id":100010301,"comment_content":"期待老师讲解，加载的字节码最终都被转换为了那些内容，都放到了哪里，执行时候如何进行链接的，如何去查找到的引用对象的","like_count":0},{"had_liked":false,"id":17249,"user_name":"ajianzheng","can_delete":false,"product_type":"c1","uid":1183730,"ip_address":"","ucode":"91AE5DB544A820","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/f2/e935c719.jpg","comment_is_top":false,"comment_ctime":1532521357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532521357","product_id":100010301,"comment_content":"老师，我现在遇到一个问题，在调用jni接口时第一次是正常的，但是后续偶现找不到jni接口，请问这个问题该怎么排查？<br>","like_count":0},{"had_liked":false,"id":17235,"user_name":"观海雲遠","can_delete":false,"product_type":"c1","uid":1182910,"ip_address":"","ucode":"76680C70AF4B2C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/be/e0563e93.jpg","comment_is_top":false,"comment_ctime":1532516497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532516497","product_id":100010301,"comment_content":"在 Java 虚拟机中，类的唯一性是由类加载器实例以及类的全名一同确定的。即便是同一串字节流，经由不同的类加载器加载，也会得到两个不同的类。在大型应用中，我们往往借助这一特性，来运行同一个类的不同版本。<br>按照双亲委派模式 一个类怎么会被不同的加载器加载呢","like_count":0},{"had_liked":false,"id":17215,"user_name":"Thomas","can_delete":false,"product_type":"c1","uid":1178585,"ip_address":"","ucode":"36950010DB3D29","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/d9/055e5383.jpg","comment_is_top":false,"comment_ctime":1532502818,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532502818","product_id":100010301,"comment_content":"子类继承父类重写是怎么实现的我挺好奇的老师其他看明白了","like_count":0},{"had_liked":false,"id":17214,"user_name":"Thomas","can_delete":false,"product_type":"c1","uid":1178585,"ip_address":"","ucode":"36950010DB3D29","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/d9/055e5383.jpg","comment_is_top":false,"comment_ctime":1532502817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532502817","product_id":100010301,"comment_content":"子类继承父类重写是怎么实现的我挺好奇的老师其他看明白了","like_count":0}]}