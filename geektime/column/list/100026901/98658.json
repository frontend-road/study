{"id":98658,"title":"11 | 面向对象（上）：从生活中的类比说起","content":"<p>你好，我是景霄。</p><p>很多朋友最开始学编程的时候，是从 C++ 或者 JAVA 语言入手的。他们好不容易磕磕绊绊地搞懂了最基本的数据类型、赋值判断和循环，却又迎面撞上了 OOP (object oriented programming) 的大墙，一头扎进公有私有保护、多重继承、多态派生、纯函数、抽象类、友元函数等一堆专有名词的汪洋大海中找不到彼岸，于是就放弃了进阶之路。</p><p>相比之下，Python 是一门相对友好的语言，它在创立之初就鼓励命令交互式的轻量级编程。理论上，Python 的命令式语言是<a href=\"https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E5%AE%8C%E5%82%99%E6%80%A7\">图灵完备</a>的, 也就是说命令式语言，理论上可以做到其他任何语言能够做到的所有的事情，甚至进一步，仅仅依靠汇编语言的 MOV 指令，就能实现<a href=\"http://stedolan.net/research/mov.pdf\">图灵完备编程</a>。</p><p>那么为什么不这样做呢？其实，“上古时代”的程序员就是这么做的，可是随着程序功能复杂性的逐步提升，以及需求的不断迭代，很多老旧的代码修改起来麻烦无比，牵一发而动全身，根本无法迭代和维护，甚至只能推倒重来，这也是很多古老的代码被称为“屎山”的原因。</p><p>传统的命令式语言有无数重复性代码，虽然函数的诞生减缓了许多重复性，但随着计算机的发展，只有函数依然不够，需要把更加抽象的概念引入计算机才能缓解（而不是解决）这个问题，于是 OOP 应运而生。</p><!-- [[[read_end]]] --><p>Python 在 1989 年被一位程序员打发时间创立之后，一步步攻城掠地飞速发展，从最基础的脚本程序，到后来可以编写系统程序、大型工程、数据科学运算、人工智能，早已脱离了当初的设计，因此一些其他语言的优秀设计之处依然需要引入。我们必须花费一定的代价掌握面向对象编程，才能跨越学习道路中的瓶颈期，走向下一步。</p><p>接下来，我将用两节课来讲解面向对象编程，从基础到实战。第一讲，我将带你快速但清晰地疏通最基础的知识，确保你能够迅速领略面向对象的基本思想；第二讲，我们从零开始写一个搜索引擎，将前面所学知识融会贯通。</p><p>这些内容可能和你以往看到的所有教程都不太一样，我会尽可能从一个初学者的角度来审视这些难点。同时我们面向实战、面向工程，不求大而全，但是对最核心的思想会有足够的勾勒。我可以保证内容清晰易懂，但想要真正掌握，仍要求你能用心去阅读和思考。真正的提高，永远要靠自己才能做到。</p><h2>对象，你找到了吗？</h2><p>我们先来学习，面向对象编程中最基本的概念。</p><p>为了方便你理解其中的抽象概念，我先打个比方带你感受一下。生物课上，我们学过“界门纲目科属种”的概念，核心思想是科学家们根据各种动植物、微生物的相似之处，将其分化为不同的类型方便研究。生活中我们也是如此，习惯对身边的事物进行分类：</p><ul>\n<li>猫和狗都是动物；</li>\n<li>直线和圆都是平面几何的图形；</li>\n<li>《哈利波特》和《冰与火之歌》（即《权力的游戏》）都是小说。</li>\n</ul><p>自然，同一类事物便会有着相似的特性：</p><ul>\n<li>动物会动；</li>\n<li>平面图形有面积和周长；</li>\n<li>小说也都有相应的作者和大致情节等各种元素。</li>\n</ul><p>那回到我们的Python上，又对应哪些内容呢？这里，我们先来看一段最基本的 Python 面向对象的应用代码，不要被它的长度吓到，你无需立刻看懂所有代码，跟着节奏来，我会一点点为你剖析。</p><pre><code>class Document():\n    def __init__(self, title, author, context):\n        print('init function called')\n        self.title = title\n        self.author = author\n        self.__context = context # __开头的属性是私有属性\n\n    def get_context_length(self):\n        return len(self.__context)\n\n    def intercept_context(self, length):\n        self.__context = self.__context[:length]\n\nharry_potter_book = Document('Harry Potter', 'J. K. Rowling', '... Forever Do not believe any thing is capable of thinking independently ...')\n\nprint(harry_potter_book.title)\nprint(harry_potter_book.author)\nprint(harry_potter_book.get_context_length())\n\nharry_potter_book.intercept_context(10)\n\nprint(harry_potter_book.get_context_length())\n\nprint(harry_potter_book.__context)\n\n########## 输出 ##########\n\ninit function called\nHarry Potter\nJ. K. Rowling\n77\n10\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n&lt;ipython-input-5-b4d048d75003&gt; in &lt;module&gt;()\n     22 print(harry_potter_book.get_context_length())\n     23 \n---&gt; 24 print(harry_potter_book.__context)\n\nAttributeError: 'Document' object has no attribute '__context'\n</code></pre><p>参照着这段代码，我先来简单解释几个概念。</p><ul>\n<li>类：一群有着相似性的事物的集合，这里对应 Python 的 class。</li>\n<li>对象：集合中的一个事物，这里对应由 class 生成的某一个 object，比如代码中的 harry_potter_book。</li>\n<li>属性：对象的某个静态特征，比如上述代码中的 title、author 和 __context。</li>\n<li>函数：对象的某个动态能力，比如上述代码中的 intercept_context ()函数。</li>\n</ul><p>当然，这样的说法既不严谨，也不充分，但如果你对面向对象编程完全不了解，它们可以让你迅速有一个直观的了解。</p><p>这里我想多说两句。回想起当年参加数学竞赛时，我曾和一个大佬交流数学的学习，我清楚记得我们对数学有着相似的观点：很多数学概念非常抽象，如果纯粹从数理逻辑而不是更高的角度去解题，很容易陷入僵局；而具体、直观的想象和类比，才是迅速打开数学大门的钥匙。虽然这些想象和类比不严谨也不充分，很多时候甚至是错误或者异想天开的，但它们确实能帮我们快速找到正确的大门。</p><p>就像很多人都有过的一个疑惑，“学霸是怎样想到这个答案的？”。德国数学家克莱因曾说过，“推进数学的，主要是那些有卓越直觉的人，而不是以严格的证明方法见长的人。”编程世界同样如此，如果你不满足于只做一个CRUD“码农”，而是想成为一个优秀的工程师，那就一定要积极锻炼直觉思考和快速类比的能力，尤其是在找不到 bug 的时候。这才是编程学习中能给人最快进步的方法和路径。</p><p>言归正传，继续回到我们的主题，还是通过刚刚那段代码，我想再给类下一个更为严谨的定义。</p><p><strong>类，一群有着相同属性和函数的对象的集合。</strong></p><p>虽然有循环论证之嫌（lol），但是反复强调，还是希望你能对面向对象的最基础的思想，有更真实的了解。清楚记住这一点后，接下来，我们来具体解读刚刚这段代码。为了方便你的阅读学习，我把它重新放在了这段文字下方。</p><pre><code>class Document():\n    def __init__(self, title, author, context):\n        print('init function called')\n        self.title = title\n        self.author = author\n        self.__context = context # __开头的属性是私有属性\n\n    def get_context_length(self):\n        return len(self.__context)\n\n    def intercept_context(self, length):\n        self.__context = self.__context[:length]\n\nharry_potter_book = Document('Harry Potter', 'J. K. Rowling', '... Forever Do not believe any thing is capable of thinking independently ...')\n\nprint(harry_potter_book.title)\nprint(harry_potter_book.author)\nprint(harry_potter_book.get_context_length())\n\nharry_potter_book.intercept_context(10)\n\nprint(harry_potter_book.get_context_length())\n\nprint(harry_potter_book.__context)\n\n########## 输出 ##########\n\ninit function called\nHarry Potter\nJ. K. Rowling\n77\n10\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n&lt;ipython-input-5-b4d048d75003&gt; in &lt;module&gt;()\n     22 print(harry_potter_book.get_context_length())\n     23 \n---&gt; 24 print(harry_potter_book.__context)\n\nAttributeError: 'Document' object has no attribute '__context'\n</code></pre><p>可以看到，class Document 定义了 Document 类，再往下能看到它有三个函数，这三个函数即为 Document 类的三个函数。</p><p>其中，<strong>init</strong> 表示构造函数，意即一个对象生成时会被自动调用的函数。我们能看到，  <code>harry_potter_book = Document(...)</code>这一行代码被执行的时候，<code>'init function called'</code>字符串会被打印出来。而 get_context_length()和 intercept_context()则为类的普通函数，我们调用它们来对对象的属性做一些事情。</p><p>class Document 还有三个属性，title、author和 __context 分别表示标题、作者和内容，通过构造函数传入。这里代码很直观，我们可以看到， intercept_context 能修改对象 harry_potter_book 的 __context 属性。</p><p>这里唯一需要强调的一点是，如果一个属性以 __ （注意，此处有两个_） 开头，我们就默认这个属性是私有属性。私有属性，是指不希望在类的函数之外的地方被访问和修改的属性。所以，你可以看到，title 和 author 能够很自由地被打印出来，但是 <code>print(harry_potter_book.__context)</code>就会报错。</p><h2>老师，能不能再给力点？</h2><p>掌握了最基础的概念，其实我们已经能做很多很多的事情了。不过，在工程实践中，随着复杂度继续提升，你可能会想到一些问题：</p><ul>\n<li>如何在一个类中定义一些常量，每个对象都可以方便访问这些常量而不用重新构造？</li>\n<li>如果一个函数不涉及到访问修改这个类的属性，而放到类外面有点不恰当，怎么做才能更优雅呢？</li>\n<li>既然类是一群相似的对象的集合，那么可不可以是一群相似的类的集合呢？</li>\n</ul><p>前两个问题很好解决，不过，它们涉及到一些常用的代码规范，这里我放了一段代码示例。同样的，你无需一口气读完这段代码，跟着我的节奏慢慢学习即可。</p><pre><code>class Document():\n    \n    WELCOME_STR = 'Welcome! The context for this book is {}.'\n    \n    def __init__(self, title, author, context):\n        print('init function called')\n        self.title = title\n        self.author = author\n        self.__context = context\n    \n    # 类函数\n    @classmethod\n    def create_empty_book(cls, title, author):\n        return cls(title=title, author=author, context='nothing')\n    \n    # 成员函数\n    def get_context_length(self):\n        return len(self.__context)\n    \n    # 静态函数\n    @staticmethod\n    def get_welcome(context):\n        return Document.WELCOME_STR.format(context)\n\n\nempty_book = Document.create_empty_book('What Every Man Thinks About Apart from Sex', 'Professor Sheridan Simove')\n\n\nprint(empty_book.get_context_length())\nprint(empty_book.get_welcome('indeed nothing'))\n\n########## 输出 ##########\n\ninit function called\n7\nWelcome! The context for this book is indeed nothing.\n</code></pre><p>第一个问题，在 Python 的类里，你只需要和函数并列地声明并赋值，就可以实现这一点，例如这段代码中的 WELCOME_STR。一种很常规的做法，是用全大写来表示常量，因此我们可以在类中使用 self.WELCOME_STR ，或者在类外使用 Entity.WELCOME_STR ，来表达这个字符串。</p><p>而针对第二个问题，我们提出了类函数、成员函数和静态函数三个概念。它们其实很好理解，前两者产生的影响是动态的，能够访问或者修改对象的属性；而静态函数则与类没有什么关联，最明显的特征便是，静态函数的第一个参数没有任何特殊性。</p><p>具体来看这几种函数。一般而言，静态函数可以用来做一些简单独立的任务，既方便测试，也能优化代码结构。静态函数还可以通过在函数前一行加上 @staticmethod 来表示，代码中也有相应的示例。这其实使用了装饰器的概念，我们会在后面的章节中详细讲解。</p><p>而类函数的第一个参数一般为 cls，表示必须传一个类进来。类函数最常用的功能是实现不同的 <strong>init</strong> 构造函数，比如上文代码中，我们使用 create_empty_book 类函数，来创造新的书籍对象，其 context 一定为 <code>'nothing'</code>。这样的代码，就比你直接构造要清晰一些。类似的，类函数需要装饰器 @classmethod 来声明。</p><p>成员函数则是我们最正常的类的函数，它不需要任何装饰器声明，第一个参数 self 代表当前对象的引用，可以通过此函数，来实现想要的查询/修改类的属性等功能。</p><h2>继承，是每个富二代的梦想</h2><p>接下来，我们来看第三个问题，既然类是一群相似的对象的集合，那么可不可以是一群相似的类的集合呢？</p><p>答案是，当然可以。只要抽象得好，类可以描述成任何事物的集合。当然你要小心、严谨地去定义它，不然一不小心就会引起<a href=\"https://en.wikipedia.org/wiki/Russell%27s_paradox\">第三次数学危机</a>  XD。</p><p>类的继承，顾名思义，指的是一个类既拥有另一个类的特征，也拥有不同于另一个类的独特特征。在这里的第一个类叫做子类，另一个叫做父类，特征其实就是类的属性和函数。</p><pre><code>class Entity():\n    def __init__(self, object_type):\n        print('parent class init called')\n        self.object_type = object_type\n    \n    def get_context_length(self):\n        raise Exception('get_context_length not implemented')\n    \n    def print_title(self):\n        print(self.title)\n\nclass Document(Entity):\n    def __init__(self, title, author, context):\n        print('Document class init called')\n        Entity.__init__(self, 'document')\n        self.title = title\n        self.author = author\n        self.__context = context\n    \n    def get_context_length(self):\n        return len(self.__context)\n    \nclass Video(Entity):\n    def __init__(self, title, author, video_length):\n        print('Video class init called')\n        Entity.__init__(self, 'video')\n        self.title = title\n        self.author = author\n        self.__video_length = video_length\n    \n    def get_context_length(self):\n        return self.__video_length\n\nharry_potter_book = Document('Harry Potter(Book)', 'J. K. Rowling', '... Forever Do not believe any thing is capable of thinking independently ...')\nharry_potter_movie = Video('Harry Potter(Movie)', 'J. K. Rowling', 120)\n\nprint(harry_potter_book.object_type)\nprint(harry_potter_movie.object_type)\n\nharry_potter_book.print_title()\nharry_potter_movie.print_title()\n\nprint(harry_potter_book.get_context_length())\nprint(harry_potter_movie.get_context_length())\n\n########## 输出 ##########\n\nDocument class init called\nparent class init called\nVideo class init called\nparent class init called\ndocument\nvideo\nHarry Potter(Book)\nHarry Potter(Movie)\n77\n120\n</code></pre><p>我们同样结合代码来学习这些概念。在这段代码中，Document 和 Video 它们有相似的地方，都有相应的标题、作者和内容等属性。我们可以从中抽象出一个叫做 Entity 的类，来作为它俩的父类。</p><p>首先需要注意的是构造函数。每个类都有构造函数，继承类在生成对象的时候，是不会自动调用父类的构造函数的，因此你必须在 <strong>init</strong>()函数中显式调用父类的构造函数。它们的执行顺序是 子类的构造函数 -&gt; 父类的构造函数。</p><p>其次需要注意父类 get_context_length()函数。如果使用 Entity 直接生成对象，调用 get_context_length()函数，就会 raise error 中断程序的执行。这其实是一种很好的写法，叫做函数重写，可以使子类必须重新写一遍 get_context_length()函数，来覆盖掉原有函数。</p><p>最后需要注意到 print_title()函数，这个函数定义在父类中，但是子类的对象可以毫无阻力地使用它来打印 title，这也就体现了继承的优势：减少重复的代码，降低系统的熵值（即复杂度）。</p><p>到这里，你对继承就有了比较详细的了解了，面向对象编程也可以说已经入门了。当然，如果你想达到更高的层次，大量练习编程，学习更多的细节知识，都是必不可少的。</p><p>最后，我想再为你扩展一下抽象函数和抽象类，我同样会用一段代码来辅助讲解。</p><pre><code>from abc import ABCMeta, abstractmethod\n\nclass Entity(metaclass=ABCMeta):\n    @abstractmethod\n    def get_title(self):\n        pass\n\n    @abstractmethod\n    def set_title(self, title):\n        pass\n\nclass Document(Entity):\n    def get_title(self):\n        return self.title\n    \n    def set_title(self, title):\n        self.title = title\n\ndocument = Document()\ndocument.set_title('Harry Potter')\nprint(document.get_title())\n\nentity = Entity()\n\n########## 输出 ##########\n\nHarry Potter\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-7-266b2aa47bad&gt; in &lt;module&gt;()\n     21 print(document.get_title())\n     22 \n---&gt; 23 entity = Entity()\n     24 entity.set_title('Test')\n\nTypeError: Can't instantiate abstract class Entity with abstract methods get_title, set_title\n</code></pre><p>你应该发现了，Entity 本身是没有什么用的，只需拿来定义 Document 和 Video 的一些基本元素就够了。不过，万一你不小心生成 Entity 的对象该怎么办呢？为了防止这样的手误，必须要介绍一下抽象类。</p><p>抽象类是一种特殊的类，它生下来就是作为父类存在的，一旦对象化就会报错。同样，抽象函数定义在抽象类之中，子类必须重写该函数才能使用。相应的抽象函数，则是使用装饰器 @abstractmethod 来表示。</p><p>我们可以看到，代码中<code>entity = Entity()</code>直接报错，只有通过 Document 继承 Entity  才能正常使用。</p><p>这其实正是软件工程中一个很重要的概念，定义接口。大型工程往往需要很多人合作开发，比如在 Facebook 中，在 idea 提出之后，开发组和产品组首先会召开产品设计会，PM（Product Manager，产品经理） 写出产品需求文档，然后迭代；TL（Team Leader，项目经理）编写开发文档，开发文档中会定义不同模块的大致功能和接口、每个模块之间如何协作、单元测试和集成测试、线上灰度测试、监测和日志等等一系列开发流程。</p><p>抽象类就是这么一种存在，它是一种自上而下的设计风范，你只需要用少量的代码描述清楚要做的事情，定义好接口，然后就可以交给不同开发人员去开发和对接。</p><h2>总结</h2><p>到目前为止，我们一直在强调一件事情：面向对象编程是软件工程中重要的思想。正如动态规划是算法中的重要思想一样，它不是某一种非常具体的技术，而是一种综合能力的体现，是将大型工程解耦化、模块化的重要方法。在实践中要多想，尤其是抽象地想，才能更快掌握这个技巧。</p><p>回顾一下今天的内容，我希望你能自己回答下面两个问题，作为今天内容的总结，写在留言区里。</p><p>第一个问题，面向对象编程四要素是什么？它们的关系又是什么？</p><p>第二个问题，讲了这么久的继承，继承究竟是什么呢？你能用三个字表达出来吗？</p><blockquote>\n<p>这里不开玩笑，Facebook 很多 Launch Doc （上线文档）中要求用五个单词总结你的文档，因为你的文档不仅仅是你的团队要看，往上走甚至会到 VP 或者 CTO 那里，你需要言简意赅，让他们快速理解你想要表达的意思。</p>\n</blockquote><h2>思考题</h2><p>最后，再给你留一道思考题。既然你能通过继承一个类，来获得父类的函数和属性，那么你能继承两个吗？答案自是能的，这就叫做多重继承。那么问题来了。</p><p>我们使用单一继承的时候，构造函数的执行顺序很好确定，即子类-&gt;父类-&gt;爷类-&gt;… 的链式关系。不过，多重继承的时候呢？比如下面这个例子。</p><pre><code> ---&gt;B---\nA-      --&gt;D\n ---&gt;C---\n</code></pre><p>这种继承方式，叫做菱形继承，BC 继承了 A，然后 D 继承了 BC，创造一个 D 的对象。那么，构造函数调用顺序又是怎样的呢？</p><p>欢迎在留言区写下你的答案想法，与我讨论，也欢迎你把这篇文章分享给你的同事、朋友。</p><p></p>","comments":[{"had_liked":false,"id":100736,"user_name":"Jingxiao","can_delete":false,"product_type":"c1","uid":1259521,"ip_address":"","ucode":"EB966BB87132F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","comment_is_top":true,"comment_ctime":1559629023,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"9.2233726482998006e+18","product_id":100026901,"comment_content":"思考题答案：庄小P 同学的写法很好，非常明确的表明了菱形继承潜在的问题：一个基类的初始化函数可能被调用两次。在一般的工程中，这显然不是我们所希望的。正确的做法应该是使用 super 来召唤父类的构造函数，而且 python 使用一种叫做方法解析顺序的算法（具体实现算法叫做 C3），来保证一个类只会被初始化一次。<br><br>class A():<br>    def __init__(self):<br>        print(&#39;enter A&#39;)<br>        print(&#39;leave A&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;enter B&#39;)<br>        super().__init__()<br>        print(&#39;leave B&#39;)<br><br>class C(A):<br>    def __init__(self):<br>        print(&#39;enter C&#39;)<br>        super().__init__()<br>        print(&#39;leave C&#39;)<br><br>class D(B, C):<br>    def __init__(self):<br>        print(&#39;enter D&#39;)<br>        super().__init__()<br>        print(&#39;leave D&#39;)<br><br>D()<br><br>enter D<br>enter B<br>enter C<br>enter A<br>leave A<br>leave C<br>leave B<br>leave D","like_count":142,"discussions":[{"author":{"id":1448126,"avatar":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","nickname":"慕高迪","note":"","ucode":"EB1CB5EA4E3A90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372704,"discussion_content":"按层遍历，从左到右进入。类似于进栈；反之，则为出栈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620439216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1764941,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ee/4d/5d021e4c.jpg","nickname":"向左看齐","note":"","ucode":"2E0AC7D59AF85C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232364,"discussion_content":"leave C B的顺序不是和理解，请指导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586867550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1319215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/21/2f/b29e8af8.jpg","nickname":"轻风悠扬","note":"","ucode":"F2276CE113BED1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1764941,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ee/4d/5d021e4c.jpg","nickname":"向左看齐","note":"","ucode":"2E0AC7D59AF85C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252442,"discussion_content":"就和你的名字一样，从左边开始","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588165557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":232364,"ip_address":""},"score":252442,"extra":""},{"author":{"id":1531029,"avatar":"https://static001.geekbang.org/account/avatar/00/17/5c/95/553956fb.jpg","nickname":"Liam","note":"","ucode":"0C66D7707BFD1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1764941,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ee/4d/5d021e4c.jpg","nickname":"向左看齐","note":"","ucode":"2E0AC7D59AF85C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279868,"discussion_content":"就是一个出栈的过程","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1591438180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":232364,"ip_address":""},"score":279868,"extra":""},{"author":{"id":1000076,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/8c/373d4027.jpg","nickname":"龍蝦","note":"","ucode":"BE1D500833F070","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1764941,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ee/4d/5d021e4c.jpg","nickname":"向左看齐","note":"","ucode":"2E0AC7D59AF85C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307870,"discussion_content":"调用关系是 D->B->C->A，B 中的 super().__init__() 调用 C 的 __init__()，而不是 A ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600776848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":232364,"ip_address":""},"score":307870,"extra":""}]}]},{"had_liked":false,"id":100350,"user_name":"hlz-123","can_delete":false,"product_type":"c1","uid":1433586,"ip_address":"","ucode":"B7E5EF0C260BD2","user_header":"","comment_is_top":false,"comment_ctime":1559533215,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"624329791135","product_id":100026901,"comment_content":"第一个问题，面向对象编程四要素是什么？它们的关系又是什么？<br>答：面向对象编程四要素是类，属性，函数，对象，<br>       它们关系可以总结为：类是一群具有相同属性和函数的对象的集合。<br>第二个问题，讲了这么久的继承，继承究竟是什么呢？你能用三个字表达出来吗？<br>三个字：父与子。儿子可以使用自己的东西，没有的可以使用父亲的东西。","like_count":146,"discussions":[{"author":{"id":1087877,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/85/12a7cc69.jpg","nickname":"Linsto","note":"","ucode":"AE3797AB0521DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363713,"discussion_content":"不错!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617268359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100321,"user_name":"庄小P","can_delete":false,"product_type":"c1","uid":1489063,"ip_address":"","ucode":"A71FA01F713790","user_header":"","comment_is_top":false,"comment_ctime":1559528229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"280732402469","product_id":100026901,"comment_content":"class A():<br>    def __init__(self):<br>        print(&#39;A class called&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;B class called&#39;)<br>        A.__init__(self)<br>class C(A):<br>    def __init__(self):<br>        print(&#39;C class called&#39;)<br>        A.__init__(self)<br>class D(B,C):<br>    def __init__(self):<br>        print(&#39;D class called&#39;)<br>        B.__init__(self)<br>        C.__init__(self)<br>d = D()<br>####输出<br>D class called<br>B class called<br>A class called<br>C class called<br>A class called","like_count":66},{"had_liked":false,"id":100806,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1559642187,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"237782843467","product_id":100026901,"comment_content":"面向对象编程的四要素： 类、属性、函数（方法）、对象（实例）<br><br>下面来展开总结：<br><br>类： 一群有着相同属性和函数(方法)的对象(实例)的集合，也可以具象化的理解为是一群有着相似特征的事物的集合；用class来声明。<br>抽象类：是一种特殊的类，只能作为父类存在，一旦对象化（或叫实例化）就会报错；一般使用class Classname(metaclass=ABCMeta)来声明。<br>类的继承：子类继承父类，子类可以使用父类的属性和函数，同时子类可以有自己独特的属性和函数；子类在生成对象的时候（实例化时），是不会自动调用父类的构造函数的，必须在子类的构造函数中显示的调用父类的构造函数；继承的优势是减少重复代码，降低系统熵值（即复杂度）。<br><br>属性：用&quot;self.属性名&quot;来表示，通过构造函数传入；表示对象(实例)的某个静态特征。<br>私有属性：以__开头的属性，举例：self.__属性名，只能在类内部调用，类外部无法访问。<br>公有属性：和函数并列声明的属性，可以理解为常量，一般用全大写表示；在类中通过&quot;self.常量名&quot;来调用，在类外使用&quot;对象名.常量名&quot;或者&quot;类名.常量名&quot;来调用。<br><br>函数：表示对象(实例)的某个动态能力。<br>构造函数：用def __init__（self, args...）声明，第一个参数self代表当前对象的引用，其他参数是在对象化时需要传入的属性值；构造函数在一个对象生成时(即实例化时)会被自动调用。<br>成员函数：是正常的类的函数，第一个参数必须是self；可通过此函数来实现查询或修改类的属性等功能。<br>静态函数：静态函数和类没有什么关联，第一个参数也没有什么特殊性；一般用来做一些简单独立的任务，既方便测试也能优化代码结构；一般使用装饰器@staticmethod来声明。<br>类函数：类函数的第一个参数一般为cls，表示必须传一个类进来；最常用的功能是实现不同的init构造函数；需要装饰器@classmethod来声明。<br>抽象函数：一般定义在抽象类中，主要目的是要求子类必须重载该函数才能正常使用；使用装饰器@abstractmethod来声明。<br>函数重载：父类的某函数通过raise Exception的方式要求子类必须重写该函数来覆盖父类原有函数。<br><br>对象：类对象化(实例化)后的某一个具体事物。","like_count":55,"discussions":[{"author":{"id":1073136,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/f0/a73607b3.jpg","nickname":"victor666","note":"","ucode":"20C9BE10E07D55","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6532,"discussion_content":"严格说不应该叫函数重载 就是函数重写 python仅仅根据函数名区分函数 不看参数列表的","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1566958915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118976,"avatar":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","nickname":"Michael","note":"","ucode":"35F4FFAC4A4B15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":712,"discussion_content":"对象抽象方法一般返回 NotImplementedError() 或者 NotImplemented ，抽象方法在具体类里面叫做实现，不叫做重载，是有区别的。关于重载请看 typing 模块提供的 typing.overload 装饰器","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1561972867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118976,"avatar":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","nickname":"Michael","note":"","ucode":"35F4FFAC4A4B15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":711,"discussion_content":"静态函数不是和类没关联，而是属于当前类的命名空间下，且对第一个参数没有要求","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1561972609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118976,"avatar":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","nickname":"Michael","note":"","ucode":"35F4FFAC4A4B15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":708,"discussion_content":"关于私有属性，以 __ 开始，但不以 __ 结束的属性才是私有属性","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1561972267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1118976,"avatar":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","nickname":"Michael","note":"","ucode":"35F4FFAC4A4B15","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2083,"discussion_content":"赞，学习了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563250673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":708,"ip_address":""},"score":2083,"extra":""}]}]},{"had_liked":false,"id":100317,"user_name":"不瘦到140不改名","can_delete":false,"product_type":"c1","uid":1528298,"ip_address":"","ucode":"31DA063A17FC27","user_header":"https://static001.geekbang.org/account/avatar/00/17/51/ea/2ce84d5a.jpg","comment_is_top":false,"comment_ctime":1559527563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"164768284811","product_id":100026901,"comment_content":"思考题：多重继承，是基于mro进行查找，使用的是一种C3的算法。总结一下规律就是：<br>B   F<br><br>C   G<br><br>D   H<br><br>E   I<br><br>  J <br>在python3中，如果最顶层的两个类没有继承共同的类，那么查找顺序是，先从左找到头，再从右找到头，即，J-&gt;E-&gt;D-&gt;C-&gt;B-&gt;I-&gt;H-&gt;G-&gt;F<br><br>  A<br>B   F<br><br>C   G<br><br>D   H<br><br>E   I<br><br>  J  <br>如果继承了共同的类，也就是形成了菱形结构，那么查找顺序为，先从左找，只找到倒数第二层，然后从右找到头，即J-&gt;E-&gt;D-&gt;C-&gt;B-&gt;I-&gt;H-&gt;G-&gt;F-&gt;A","like_count":39},{"had_liked":false,"id":100356,"user_name":"奔跑的蜗牛","can_delete":false,"product_type":"c1","uid":1394019,"ip_address":"","ucode":"88D855ED42F134","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/63/d3319b80.jpg","comment_is_top":false,"comment_ctime":1559534032,"is_pvip":false,"replies":[{"id":"36316","content":"👍","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1559629156,"ip_address":"","comment_id":100356,"utype":1}],"discussion_count":3,"race_medal":0,"score":"121818618320","product_id":100026901,"comment_content":"经典类：深度优先，F-&gt;D-&gt;B-&gt;A-&gt;E-&gt;C-&gt;H<br>新式类：广度优先，F-&gt;D-&gt;B-&gt;E-&gt;C-&gt;H-&gt;A<br><br>class A:<br>    # def test(self):<br>    #     print(&#39;from A&#39;)<br>    pass<br>class B(A):<br>    # def test(self):<br>    #     print(&#39;from B&#39;)<br>    pass<br>class C(A):<br>    # def test(self):<br>    #     print(&#39;from C&#39;)<br>    pass<br><br>class D(B):<br>    # def test(self):<br>    #     print(&#39;from D&#39;)<br>    pass<br><br>class E(C):<br>    # def test(self):<br>    #     print(&#39;from E&#39;)<br>    pass<br><br>class H(A):<br>    def test(self):<br>        print(&#39;from H&#39;)<br>    pass<br>class F(D,E,H):<br>    # def test(self):<br>    #     print(&#39;from F&#39;)<br>    pass<br>f=F()<br>f.test()<br>print(F.mro())","like_count":28,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452513,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559629156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200667,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/1b/978d93ac.jpg","nickname":"颜若儒","note":"","ucode":"F29C52BA01E9BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288408,"discussion_content":"广度优先不是这个顺序吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593744392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1814191,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ae/af/b63df93a.jpg","nickname":"望月","note":"","ucode":"1922F817B19FB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159690,"discussion_content":"大神问个问题哈，F D B，接下来不是B调用A么，B还继承了A啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580724145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101699,"user_name":"爬行的蜗牛","can_delete":false,"product_type":"c1","uid":1033956,"ip_address":"","ucode":"6623B62DE63CE9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QD6bf8hkS5dHrabdW7M7Oo9An1Oo3QSxqoySJMDh7GTraxFRX77VZ2HZ13x3R4EVYddIGXicRRDAc7V9z5cLDlA/132","comment_is_top":false,"comment_ctime":1559919148,"is_pvip":false,"replies":[{"id":"36713","content":"👍","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1560032736,"ip_address":"","comment_id":101699,"utype":1}],"discussion_count":2,"race_medal":0,"score":"113229068844","product_id":100026901,"comment_content":"1. 面向对象编程的四要素是什么， 它们的关系是什么<br>- 抽象<br>- 封装<br>- 继承<br>- 多态<br>个人理解： <br>-抽象的本质是抽取不同类的的相同方法（函数）和属性， 作为父类的属性和方法；<br>- 封装就是把功能封装抽象的方法和其他属性和方法；<br>-  子类继承父类的抽象出来的属性和方法； <br>-  多态就是重写抽象的方法（函数）。<br><br>2. 继承是什么？ 用三个字表示出来； <br>子类继承父类的属性和方法（函数）减少代码量和复杂度；<br>三个字：承接：属性&amp;函数","like_count":26,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453076,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560032736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2565173,"avatar":"https://static001.geekbang.org/account/avatar/00/27/24/35/03603e95.jpg","nickname":"牛哥","note":"","ucode":"27D8619DC2B946","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413580,"discussion_content":"您这是说的java吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636516137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100241,"user_name":"LiANGZE","can_delete":false,"product_type":"c1","uid":1031867,"ip_address":"","ucode":"62AA285D8E8DDE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/bb/c089f246.jpg","comment_is_top":false,"comment_ctime":1559494266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"70278971002","product_id":100026901,"comment_content":"只知道多重继承时会通过mro算法生成一个顺序，可以通过  xxx.__mro__ 查看继承的顺序，但其中原理确实没深入研究过 🤔","like_count":16},{"had_liked":false,"id":100595,"user_name":"Geek_59f23e","can_delete":false,"product_type":"c1","uid":1513783,"ip_address":"","ucode":"A463C6EB7447FD","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/37/e0a9bf99.jpg","comment_is_top":false,"comment_ctime":1559604393,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"40214310057","product_id":100026901,"comment_content":"哥，能不能教教怎么搭梯子？给的链接都是国外的，进不了咋整。。","like_count":9,"discussions":[{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1745,"discussion_content":"这个要面向搜索引擎搞定，这里肯定不能明目张胆搞这个。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1562861972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041989,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/28/85/3ae5efed.jpg","nickname":"Silence°","note":"","ucode":"1782A115C603FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377742,"discussion_content":"开VPN啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622801902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100475,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1559561727,"is_pvip":false,"replies":[{"id":"36229","content":"正解，设置这道思考题的另一个意图是，对于自己不熟悉的地方，不要想当然就用在生产线上，能用简单的思路解决问题，就不要用自己不熟悉的复杂的特性。","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1559584060,"ip_address":"","comment_id":100475,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31624332799","product_id":100026901,"comment_content":"写的真好，立马搞清楚了Python中的面向对象和抽象类，昨天还在看abcmeta怎么用，另外我觉得最佳实践里不提倡多重继承，感觉这样是代码坏味道","like_count":7,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452565,"discussion_content":"正解，设置这道思考题的另一个意图是，对于自己不熟悉的地方，不要想当然就用在生产线上，能用简单的思路解决问题，就不要用自己不熟悉的复杂的特性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559584060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100263,"user_name":"DX3906","can_delete":false,"product_type":"c1","uid":1476583,"ip_address":"","ucode":"9C3349FC04968D","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/e7/7088f2cf.jpg","comment_is_top":false,"comment_ctime":1559519277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31624290349","product_id":100026901,"comment_content":"init双下方法是初始化方法，构造方法是双下new","like_count":7},{"had_liked":false,"id":196008,"user_name":"单色","can_delete":false,"product_type":"c1","uid":1907486,"ip_address":"","ucode":"A1DA6E497FD74C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/1e/f5c16f7e.jpg","comment_is_top":false,"comment_ctime":1585230112,"is_pvip":false,"replies":[{"id":"75937","content":"👍","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1586150608,"ip_address":"","comment_id":196008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27355033888","product_id":100026901,"comment_content":"问题1：<br>封装，继承，多态，抽象<br>封装使得代码更加模块化，代码复用度更高<br>继承使得子类不仅拥有自己的属性和方法，还能使用父类的属性和方法<br>多态可以实现函数重写，使得相同方法具有不同功能<br>抽象不同子类的相同方法和属性形成父类，在通过继承，多态，封装使得代码更加紧凑，简洁易读<br>问题2：<br>父与子<br><br>思考题：<br>旧式类（经典类）：深度优先<br>新式类：广度优先","like_count":6,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489201,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586150608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151464,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573725680,"is_pvip":false,"replies":[{"id":"63101","content":"👍","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1577251543,"ip_address":"","comment_id":151464,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27343529456","product_id":100026901,"comment_content":"类是对象的集合<br>问题1<br>面向对象四要素是，封装，抽象，继承，多态。封装是区分类内和类外的信息。抽象是区分接口和实现的信息，继承是一个类拓展其他类。多态是，一个接口多个实现。封装是基础。抽象和多态有赖于继承实现。<br><br>问题2<br>继承 -- 类生子<br><br>思考题<br>多重继承，同一个超类会被构建多次。","like_count":6,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474481,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577251543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101932,"user_name":"清风","can_delete":false,"product_type":"c1","uid":1260138,"ip_address":"","ucode":"75FE83C1309C2D","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/6a/daf11ddd.jpg","comment_is_top":false,"comment_ctime":1560060382,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18739929566","product_id":100026901,"comment_content":"我到底该叫方法还是叫函数","like_count":4,"discussions":[{"author":{"id":1611663,"avatar":"https://static001.geekbang.org/account/avatar/00/18/97/8f/ccce7df1.jpg","nickname":"小匚","note":"","ucode":"78E800B23C457A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388578,"discussion_content":"函数出现在类里面就可以叫 方法。当然具体叫啥，只要理解一致就不用过分纠结啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628839886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1742968,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/98/78/6459e29e.jpg","nickname":"麦芽科技学堂","note":"","ucode":"A90DDE4B6696BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186652,"discussion_content":"都一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582702993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155887,"user_name":"自主","can_delete":false,"product_type":"c1","uid":1074940,"ip_address":"","ucode":"E66649583EE7C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/fc/11c7eb80.jpg","comment_is_top":false,"comment_ctime":1574774506,"is_pvip":false,"replies":[{"id":"63095","content":"简单的说是为了调用类成员和成员函数。","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1577249349,"ip_address":"","comment_id":155887,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14459676394","product_id":100026901,"comment_content":"老师:我一直有个疑问，我查了一些答案讲得都不是很清楚，我想知道类中self参数的设计思想是什么？","like_count":3,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475911,"discussion_content":"简单的说是为了调用类成员和成员函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577249349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101454,"user_name":"Geek_00bd9e","can_delete":false,"product_type":"c1","uid":1371778,"ip_address":"","ucode":"FCE3D8C3BD7453","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLD4ova4WtWFny30Sw52Aicn2k0AmYxm2DAzKO91mic6MpGE6kqpESARbcK4uzicwqODI9NILPFlibTLg/132","comment_is_top":false,"comment_ctime":1559812118,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14444714006","product_id":100026901,"comment_content":"作者您好，引用您的例子，我想问个问题，执行到enter B的时候为什么没有输出enter A，B类不是继承了A类了吗？ 反而输出enter C，然后才输出enter A。这个地方比较疑惑？<br>class A():<br>    def __init__(self):<br>        print(&#39;enter A&#39;)<br>        print(&#39;leave A&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;enter B&#39;)<br>        super().__init__()<br>        print(&#39;leave B&#39;)<br><br>class C(A):<br>    def __init__(self):<br>        print(&#39;enter C&#39;)<br>        super().__init__()<br>        print(&#39;leave C&#39;)<br><br>class D(B, C):<br>    def __init__(self):<br>        print(&#39;enter D&#39;)<br>        super().__init__()<br>        print(&#39;leave D&#39;)<br><br>D()<br><br>enter D<br>enter B<br>enter C<br>enter A<br>leave A<br>leave C<br>leave B<br>leave D","like_count":3,"discussions":[{"author":{"id":1349749,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6mh3xlaMoGtWjmVJh2LutdLcQcPbKNjRlVru3bx8ynPhgwuGhhdzTkwEMoXbvBtgkcDSfom1kZg/132","nickname":"夜雨声烦","note":"","ucode":"87D8DB1E32522A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25300,"discussion_content":"“而且 python 使用一种叫做方法解析顺序的算法（具体实现算法叫做 C3）”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570498773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526614,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4b/56/6e4fa81b.jpg","nickname":"Leo","note":"","ucode":"A8C97D54966476","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2690,"discussion_content":"使用super()调用父类的初始化函数可以保证同一个类的初始化函数只被调用一次。作者在这里就用了super()，所以总共只出现了一次enter A 和 leave A。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563864625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1581705,"avatar":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","nickname":"响雨","note":"","ucode":"C5FB3A3BC68F92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325,"discussion_content":"为了让enter A只执行一个，所以使用__mro__调整了执行顺序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561450533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100507,"user_name":"Fergus","can_delete":false,"product_type":"c1","uid":1277066,"ip_address":"","ucode":"3A8AC741C49CEB","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/8a/bdeb76ac.jpg","comment_is_top":false,"comment_ctime":1559568212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14444470100","product_id":100026901,"comment_content":"先写答案再看答案：<br>Q1.面向对象编程四要素是什么？它们的关系又是什么？<br><br>A. 类，实例（对象），属性，方法（函数）；<br><br>一般情况下，使用类前需要先实例化，即创建对象；属性是类实例化时由构造函数\\_\\_init__定义完成，表示类的静态特性，方法是类获取&#47;修改类的属性的动作，表示类的动态能力；<br><br><br><br>Q2.继承究竟是什么？<br><br>A. “拿来用”<br><br>Q3.菱形继承，BC 继承了 A，然后 D 继承了 BC，创造一个D 的对象。那么，构造函数调用顺序又是怎样的呢？<br><br>A. <br><br>```<br>class A():<br>    pass<br><br>class B(A):<br>    pass<br><br>class C(A):<br>    pass<br><br>class D(B, C):<br>    pass<br><br>d = D()<br>```<br><br>","like_count":3},{"had_liked":false,"id":109469,"user_name":"React","can_delete":false,"product_type":"c1","uid":1100554,"ip_address":"","ucode":"A176EF0AA242B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/0a/6a9e6602.jpg","comment_is_top":false,"comment_ctime":1562038320,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10151972912","product_id":100026901,"comment_content":"建议示例代码中添加   # -- coding: utf-8 --","like_count":2,"discussions":[{"author":{"id":1561971,"avatar":"https://static001.geekbang.org/account/avatar/00/17/d5/73/e5cfe267.jpg","nickname":"Y","note":"","ucode":"57E29545FC7936","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269746,"discussion_content":"python3已经不需要这个了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589945110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101197,"user_name":"Fergus","can_delete":false,"product_type":"c1","uid":1277066,"ip_address":"","ucode":"3A8AC741C49CEB","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/8a/bdeb76ac.jpg","comment_is_top":false,"comment_ctime":1559739276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10149673868","product_id":100026901,"comment_content":"感谢老师对答案的补充，回头复习看到答案又增加了新知。<br>","like_count":2},{"had_liked":false,"id":100716,"user_name":"lllong33","can_delete":false,"product_type":"c1","uid":1528751,"ip_address":"","ucode":"5D012385994C3D","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/af/e5bf5d08.jpg","comment_is_top":false,"comment_ctime":1559625512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10149560104","product_id":100026901,"comment_content":"1、面向对象的四要素，关系？<br>- 类、对象，属性，函数<br>- 类是一群具有相同属性和函数的对象的集合。<br><br>2、用三个词描述继承<br>- 重构、多态、复用性<br><br>3、多重继承，函数执行顺序<br>- 遵循MRO(method resolution order)原则，从左至右使用顺序。<br>参考：[调用父类方法](https:&#47;&#47;python3-cookbook.readthedocs.io&#47;zh_CN&#47;latest&#47;c08&#47;p07_calling_method_on_parent_class.html)","like_count":2},{"had_liked":false,"id":100405,"user_name":"Lone","can_delete":false,"product_type":"c1","uid":1543230,"ip_address":"","ucode":"7EDE7F9407F1BF","user_header":"https://static001.geekbang.org/account/avatar/00/17/8c/3e/b4ae5ae2.jpg","comment_is_top":false,"comment_ctime":1559548040,"is_pvip":false,"replies":[{"id":"36231","content":"说的对，英语用 override 应该翻译成重写，而 overload 对应于中文的重载，在 python 中并不提供原生支持","user_name":"作者回复","comment_id":100405,"uid":"1513504","ip_address":"","utype":1,"ctime":1559584736,"user_name_real":"高山流水"}],"discussion_count":1,"race_medal":0,"score":"10149482632","product_id":100026901,"comment_content":"文中的重载是不是都应该改为重写","like_count":2,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452530,"discussion_content":"说的对，英语用 override 应该翻译成重写，而 overload 对应于中文的重载，在 python 中并不提供原生支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559584736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100375,"user_name":"GentleCP","can_delete":false,"product_type":"c1","uid":1525440,"ip_address":"","ucode":"BB1EE3720D44F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/c0/01292b08.jpg","comment_is_top":false,"comment_ctime":1559540632,"is_pvip":false,"replies":[{"id":"36230","content":"正如文中所说，类函数最常见的用法在于提供不同的构造函数：类函数可以显式被外界调用，第一个参数 cls 表示类本身，因此可以使用 cls 调用类本身的构造函数来完成初始化。","user_name":"作者回复","comment_id":100375,"uid":"1513504","ip_address":"","utype":1,"ctime":1559584564,"user_name_real":"高山流水"}],"discussion_count":1,"race_medal":0,"score":"10149475224","product_id":100026901,"comment_content":"老师，对于类函数还是不太懂，一般在什么情况下才需要对类函数进行定义呢","like_count":2,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452523,"discussion_content":"正如文中所说，类函数最常见的用法在于提供不同的构造函数：类函数可以显式被外界调用，第一个参数 cls 表示类本身，因此可以使用 cls 调用类本身的构造函数来完成初始化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559584564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100340,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1559531461,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10149466053","product_id":100026901,"comment_content":"类函数有什么特别之处？","like_count":2,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411199,"discussion_content":"不需要实例化即可访问，但又不像静态函数似的不需要额外参数，它有一个cls参数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635863386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332909,"user_name":"AI悦创","can_delete":false,"product_type":"c1","uid":1525309,"ip_address":"","ucode":"D1007711CB0A79","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/3d/55653953.jpg","comment_is_top":false,"comment_ctime":1643798570,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5938765866","product_id":100026901,"comment_content":"http:&#47;&#47;stedolan.net&#47;research&#47;mov.pdf 链接已经不行了，能否再补充一下？长期等待","like_count":1},{"had_liked":false,"id":103006,"user_name":"GLADIATOR","can_delete":false,"product_type":"c1","uid":1448564,"ip_address":"","ucode":"6FE14E0BCD6240","user_header":"https://static001.geekbang.org/account/avatar/00/16/1a/74/8f7f8786.jpg","comment_is_top":false,"comment_ctime":1560347202,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5855314498","product_id":100026901,"comment_content":"老师，我有一个疑问：从C++和java来看，构造函数肯定是先执行父类再构造子类，根据您的例子只是把print放在了父类构造函数之前，所以看起来单继承是先子后父，单实际上通过调试可以看出，其实仍然是先父后子。","like_count":1,"discussions":[{"author":{"id":1526614,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4b/56/6e4fa81b.jpg","nickname":"Leo","note":"","ucode":"A8C97D54966476","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2691,"discussion_content":"我感觉还是单纯的按顺序执行代码，如果子类有自己的init函数，并且不去使用super()调用父类的初始化函数，那父类的初始化函数根本就不会被执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563864997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100721,"user_name":"Geek_59f23e","can_delete":false,"product_type":"c1","uid":1513783,"ip_address":"","ucode":"A463C6EB7447FD","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/37/e0a9bf99.jpg","comment_is_top":false,"comment_ctime":1559627164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854594460","product_id":100026901,"comment_content":"1. 类 对象 属性 函数<br>2. DRY (don&#39;t repeat yourself)<br>3. D B A C (C3算法)","like_count":1},{"had_liked":false,"id":100510,"user_name":"Fergus","can_delete":false,"product_type":"c1","uid":1277066,"ip_address":"","ucode":"3A8AC741C49CEB","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/8a/bdeb76ac.jpg","comment_is_top":false,"comment_ctime":1559568490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854535786","product_id":100026901,"comment_content":"对于思考题，感谢提到c3算法的小伙伴，给补充了知识。但可能过度解读老师的意图了吧","like_count":1},{"had_liked":false,"id":100429,"user_name":"kevinsu","can_delete":false,"product_type":"c1","uid":1078506,"ip_address":"","ucode":"BAD46B815D6A5C","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/ea/10661bdc.jpg","comment_is_top":false,"comment_ctime":1559555504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854522800","product_id":100026901,"comment_content":"第一题<br>由类，属性，函数，对象联想到了哺乳动物这块儿例如猴子和人，人的特征属性和行为，猴子的特征属性和行为，以及根据物种起源学说我们可能有共同的老祖先且继承了老祖先的一些属性和函数。这样来理解这几个概念非常深刻。<br>第二题<br>父与子，不管是不是富二代，儿子都从父亲那里继承很多属性和函数。","like_count":1},{"had_liked":false,"id":100398,"user_name":"catshitfive","can_delete":false,"product_type":"c1","uid":1542973,"ip_address":"","ucode":"E030B61F3D0811","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/3d/2a3b67f8.jpg","comment_is_top":false,"comment_ctime":1559546313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854513609","product_id":100026901,"comment_content":"1.面向对象编程的四要素:抽象，封装，继承，多态<br>抽象：就是将拥有某些共性feature(eg:attributes,method)的对象们抽象化为类(class)，在抽象为类的过程中对这些feature进行了封装(eg:设置私有属性方法&#47;提供外部接口等)<br>继承：因为继承机制使得子类可以拥有父类的所有属性和方法(init构造函数中属性需要显式表达才可获得)，可以在子类中添加父类没有的属性和方法,也可以覆写调用父类中既有的方法，python可以类的多继承。多态则是继承的一种表现，是不同类对同一方法实现的不同表现(eg:object是所有类的父类，int类和str类是它的子类，但是对于__add__方法，根据子类的不同方法的实现也不同)<br>2.继承究竟是什么？<br>扩展类 (extend parent class to children class)<br>","like_count":1},{"had_liked":false,"id":100391,"user_name":"SCAR","can_delete":false,"product_type":"c1","uid":1031209,"ip_address":"","ucode":"38C0927FA3C5FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/29/022905e6.jpg","comment_is_top":false,"comment_ctime":1559544441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854511737","product_id":100026901,"comment_content":"总结的两问题：<br>1.oop的四要素：类，对象(实例)，属性，方法(函数)，其中的关系是类是产生对象的工厂，从类产生的对象都继承该类的属性和方法。<br>2.继承究竟是什么？用三个字表达就是“逆搜索”，意思是实例对象需要的属性或者方法是对象逆着从父类爬取出来的。<br><br>思考题：<br>菱形继承的调用顺序是D-&gt;B-&gt;C-&gt;A，python中继承原则是由下至上，由左至右。<br><br>","like_count":1},{"had_liked":false,"id":100252,"user_name":"开心","can_delete":false,"product_type":"c1","uid":1273224,"ip_address":"","ucode":"9ECFB8642D42A3","user_header":"https://static001.geekbang.org/account/avatar/00/13/6d/88/d6e6ddcf.jpg","comment_is_top":false,"comment_ctime":1559514181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854481477","product_id":100026901,"comment_content":"python也有抽像类  ","like_count":1},{"had_liked":false,"id":358211,"user_name":"不会MATLAB","can_delete":false,"product_type":"c1","uid":2613059,"ip_address":"广东","ucode":"725795EDB38F5A","user_header":"https://static001.geekbang.org/account/avatar/00/27/df/43/0773c064.jpg","comment_is_top":false,"comment_ctime":1664059489,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664059489","product_id":100026901,"comment_content":"图灵完备编程的链接网站没了。我后面再找找，看能不能补全。","like_count":0},{"had_liked":false,"id":351842,"user_name":"楚天行","can_delete":false,"product_type":"c1","uid":1100648,"ip_address":"","ucode":"B4DD986060ECD4","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/68/d8a4f907.jpg","comment_is_top":false,"comment_ctime":1658224259,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658224259","product_id":100026901,"comment_content":"class A():<br>    def __init__(self):<br>        print(&#39;enter A&#39;)<br>        print(&#39;leave A&#39;)<br><br>class AA():<br>    def __init__(self):<br>        print(&#39;enter AA&#39;)<br>        print(&#39;leave AA&#39;)<br><br>class B(AA):<br>    def __init__(self):<br>        print(&#39;enter B&#39;)<br>        super().__init__()<br>        print(&#39;leave B&#39;)<br><br>class C(A):<br>    def __init__(self):<br>        print(&#39;enter C&#39;)<br>        super().__init__()<br>        print(&#39;leave C&#39;)<br><br>class D(B, C):<br>    def __init__(self):<br>        print(&#39;enter D&#39;)<br>        super().__init__()<br>        print(&#39;leave D&#39;)<br>D()<br><br>print(D.__mro__)<br><br>返回：<br>enter D<br>enter B<br>enter AA<br>leave AA<br>leave B<br>leave D<br>(&lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.AA&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;object&#39;&gt;)<br>，为什么C和A 并没有执行呢","like_count":0},{"had_liked":false,"id":342020,"user_name":"ynFrank","can_delete":false,"product_type":"c1","uid":2843583,"ip_address":"","ucode":"C67E7B83BD1EBF","user_header":"https://static001.geekbang.org/account/avatar/00/2b/63/bf/427c3e88.jpg","comment_is_top":false,"comment_ctime":1649979323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649979323","product_id":100026901,"comment_content":"平行队列","like_count":0},{"had_liked":false,"id":339593,"user_name":"三年二班邱小东","can_delete":false,"product_type":"c1","uid":2922136,"ip_address":"","ucode":"909B49C63C8EC6","user_header":"https://static001.geekbang.org/account/avatar/00/2c/96/98/89b96cda.jpg","comment_is_top":false,"comment_ctime":1648210032,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648210032","product_id":100026901,"comment_content":"干觉类中的静态变量没有讲清楚，用常量一笔带过来，我是没看懂。不是说静态变量与对象无关吗？对象1如果改变了静态变量，那Entity的静态变量是变化还是没变化？为什么静态变量也可以被对象改变？不是说一个类只有一个静态变量吗？","like_count":0},{"had_liked":false,"id":337757,"user_name":"Quincy","can_delete":false,"product_type":"c1","uid":2918031,"ip_address":"","ucode":"C9D955E712B573","user_header":"https://static001.geekbang.org/account/avatar/00/2c/86/8f/7ac1dae0.jpg","comment_is_top":false,"comment_ctime":1647012350,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647012350","product_id":100026901,"comment_content":"第一个问题，面向对象编程四要素是什么？它们的关系又是什么？<br>类、对象、函数、属性<br>类是函数和属性的集合；对象是类的实现方式；函数是类的动态功能；属性是类的静态特征<br><br>第二个问题，讲了这么久的继承，继承究竟是什么呢？你能用三个字表达出来吗？<br>传下来~<br>","like_count":0},{"had_liked":false,"id":333425,"user_name":"sakura","can_delete":false,"product_type":"c1","uid":2510260,"ip_address":"","ucode":"51BE50DA1ED196","user_header":"https://static001.geekbang.org/account/avatar/00/26/4d/b4/6b8e320e.jpg","comment_is_top":false,"comment_ctime":1644337393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644337393","product_id":100026901,"comment_content":"加上@abc.abstractmethod装饰器后严格控制子类必须实现这个方法","like_count":0},{"had_liked":false,"id":328753,"user_name":"方案应用中心","can_delete":false,"product_type":"c1","uid":2848496,"ip_address":"","ucode":"B48895CBC7200B","user_header":"","comment_is_top":false,"comment_ctime":1640864342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640864342","product_id":100026901,"comment_content":"运行以下代码，可以说明为什么尽量不要用静态变量<br>class AA:<br>    DD = -1<br>    def __init__(self) -&gt; None:<br>        # self.DD = 1<br>        pass<br><br>aa = AA()<br>print(aa.DD)<br>print(AA.DD)<br><br>AA.DD = 0<br>print(aa.DD)<br>print(AA.DD)<br><br>aa.DD = 1<br>aa.ee = 0<br>print(aa.DD)<br>print(AA.DD)<br>print(aa.ee)<br><br>AA.DD = 2<br>print(aa.DD)<br>print(AA.DD)","like_count":0},{"had_liked":false,"id":325248,"user_name":"哇塞","can_delete":false,"product_type":"c1","uid":2639609,"ip_address":"","ucode":"C7340DD79BF02E","user_header":"","comment_is_top":false,"comment_ctime":1638878565,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638878565","product_id":100026901,"comment_content":"继承类在生成对象的时候，是不会自动调用父类的构造函数的，必须在 init() 函数中显式调用父类的构造函数。它们的执行顺序是 子类的构造函数 -&gt; 父类的构造函数","like_count":0},{"had_liked":false,"id":316585,"user_name":"Geek_e59af9","can_delete":false,"product_type":"c1","uid":2813086,"ip_address":"","ucode":"F645443EF08610","user_header":"","comment_is_top":false,"comment_ctime":1634434817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634434817","product_id":100026901,"comment_content":"抽象类和抽象函数 讲的太好了 一下子就明白了<br>","like_count":0},{"had_liked":false,"id":313018,"user_name":"lyt","can_delete":false,"product_type":"c1","uid":1526706,"ip_address":"","ucode":"8C179F339C2A27","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OwolYO3ppfrxTcX81cswxNkD4tIlHM7vrnfroMzoTx878mDCnfJ3esicvbhm7ricUAbR7T9DjEDstVklh9z6uzjQ/132","comment_is_top":false,"comment_ctime":1632210732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632210732","product_id":100026901,"comment_content":"面向对象编程四要素：类 对象 属性 函数，继承即拿来用","like_count":0},{"had_liked":false,"id":293875,"user_name":"Geek_974cd5","can_delete":false,"product_type":"c1","uid":1528654,"ip_address":"","ucode":"5A6BC28919AD4D","user_header":"","comment_is_top":false,"comment_ctime":1621585085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621585085","product_id":100026901,"comment_content":"第一个问题：类，对象，属性，方法（函数）。","like_count":0},{"had_liked":false,"id":289531,"user_name":"叶丶空","can_delete":false,"product_type":"c1","uid":2317370,"ip_address":"","ucode":"CC75913CF1A6FF","user_header":"","comment_is_top":false,"comment_ctime":1619063650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619063650","product_id":100026901,"comment_content":"好像没人注意到文中例子里的书名：What Every Man Thinks About Apart from Sex，这本书有200页，都是白纸，老师埋的彩蛋，哈哈","like_count":0},{"had_liked":false,"id":277236,"user_name":"王震","can_delete":false,"product_type":"c1","uid":1194568,"ip_address":"","ucode":"691C40D45510B3","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/48/fbacc564.jpg","comment_is_top":false,"comment_ctime":1612325315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612325315","product_id":100026901,"comment_content":"求解惑：如下写法中，类C没有被初始化，原因为？<br><br>class A():<br>    def __init__(self):<br>        print(&#39;enter A&#39;)<br>        print(&#39;leave A&#39;)<br>        <br>class B(A):<br>    def __init__(self):<br>        print(&#39;enter B&#39;)<br>        A.__init__(self)<br>        print(&#39;leave B&#39;)<br>        <br>class C(A):<br>    def __init__(self):<br>        print(&#39;enter C&#39;)<br>        super().__init__()<br>        print(&#39;leave C&#39;)<br><br>class D(B, C):<br>    def __init__(self):<br>        print(&#39;enter D&#39;)<br>        super().__init__()<br>        print(&#39;leave D&#39;)<br><br>        <br>d = D()<br>&#39;&#39;&#39; output: 类C没有被初始化<br>enter D<br>enter B<br>enter A<br>leave A<br>leave B<br>leave D<br>&#39;&#39;&#39;","like_count":0},{"had_liked":false,"id":273079,"user_name":"crystal","can_delete":false,"product_type":"c1","uid":1936027,"ip_address":"","ucode":"FCC6292F7545FE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8a/9b/26e172e6.jpg","comment_is_top":false,"comment_ctime":1610433260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610433260","product_id":100026901,"comment_content":"面向对象四要素：<br>1.继承<br>2.封装<br>3.多态<br><br>什么是继承？<br>若A继承B，则A拥有了B的所有属性和方法<br><br><br>","like_count":0},{"had_liked":false,"id":272458,"user_name":"米勒","can_delete":false,"product_type":"c1","uid":2344816,"ip_address":"","ucode":"9C02A167B593A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLCbnGYOhwYmBwytX5e8Dd3ll9JwjUgaS5QK2JnbxrNdwJiaFksjsKQXBw9OuLZicrCB7unnS3ZGLOw/132","comment_is_top":false,"comment_ctime":1610093889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610093889","product_id":100026901,"comment_content":"老师，有个问题请教下，静态函数和普通的成员函数的区别是不是在调用时，静态函数不需要参数和实例化类就可外部调用，而成员函数必须实例化类才可外部调用。<br><br>class check():<br>    def __init__(self, a, b, c):<br>        print(&#39;__init__&#39;)<br><br>    @staticmethod<br>    def static_m():<br>        print(&quot;static_m&quot;)<br><br>    def member_f(self):<br>        print(&#39;member_m&#39;)<br><br>v = check(1, 2, 3)<br>v.static_m()<br>v.member_f()<br>check.static_m()<br>check.member_f()<br><br>#   输出<br>__init__<br>static_m<br>member_m<br>static_m<br>Traceback (most recent call last):<br>  File &quot;&lt;input&gt;&quot;, line 16, in &lt;module&gt;<br>TypeError: member_f() missing 1 required positional argument: &#39;self&#39;<br>","like_count":0},{"had_liked":false,"id":272260,"user_name":"米勒","can_delete":false,"product_type":"c1","uid":2344816,"ip_address":"","ucode":"9C02A167B593A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLCbnGYOhwYmBwytX5e8Dd3ll9JwjUgaS5QK2JnbxrNdwJiaFksjsKQXBw9OuLZicrCB7unnS3ZGLOw/132","comment_is_top":false,"comment_ctime":1610009607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610009607","product_id":100026901,"comment_content":"第一个问题：面向对象编程的四要素-抽象-继承-封装-多态<br>第二个问题：继承就像“关联词“","like_count":0},{"had_liked":false,"id":264960,"user_name":"karofsky","can_delete":false,"product_type":"c1","uid":1191529,"ip_address":"","ucode":"4AFBEDE22F9652","user_header":"","comment_is_top":false,"comment_ctime":1606722109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606722109","product_id":100026901,"comment_content":"class a(): pass<br>class b(a): pass<br>class c(a): pass<br>class d(b, c): pass<br>[x.__name__ for x in d.__mro__]<br><br># output<br>[&#39;d&#39;, &#39;b&#39;, &#39;c&#39;, &#39;a&#39;, &#39;object&#39;]","like_count":0},{"had_liked":false,"id":263739,"user_name":"Leolee","can_delete":false,"product_type":"c1","uid":1928428,"ip_address":"","ucode":"2EC31B0AE5B03D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/8SdpYbicwXVXt0fIN7L0f2TSGIScQIhWXT7vTze9GHBsjTvDyyQW9KEPsKBpRNs4anV61oF59BZqHf586b3o4ibw/132","comment_is_top":false,"comment_ctime":1606243179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606243179","product_id":100026901,"comment_content":"第一个问题：抽象、继承、封装、多态<br>第二个问题：父与子<br>越靠近子类（即越靠左）的父类，越亲近，越优先考虑。子类调用属性和方法时，会先在靠左的父类里找，找不到才往右找。","like_count":0},{"had_liked":false,"id":247477,"user_name":"黄争辉","can_delete":false,"product_type":"c1","uid":1070692,"ip_address":"","ucode":"970DD0C5D876FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/64/7d80093c.jpg","comment_is_top":false,"comment_ctime":1599718557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599718557","product_id":100026901,"comment_content":"一个基类的初始化函数可能被调用两次。正确的做法应该是使用 super 来召唤父类的构造函数，而且 python 使用一种叫做方法解析顺序的算法（具体实现算法叫做 C3），来保证一个类只会被初始化一次。","like_count":0},{"had_liked":false,"id":234190,"user_name":"Geek_dd8bc9","can_delete":false,"product_type":"c1","uid":2059859,"ip_address":"","ucode":"02E7F45306D622","user_header":"","comment_is_top":false,"comment_ctime":1594615128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594615128","product_id":100026901,"comment_content":"比较了一下super和直接继承的区别：<br>class A():<br>    def __init__(self):<br>        print(&#39;This is a A&#39;)<br>        print(&#39;Leave A&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;This is a B&#39;)<br>        A.__init__(self)<br>        print(&#39;Leave B&#39;)<br>        <br>class C(A):    <br>     def __init__(self):<br>        print(&#39;This is a C&#39;)<br>        A.__init__(self)<br>        print(&#39;Leave C&#39;)<br><br>class D(B,C):<br>    def __init__(self):<br>        print(&#39;This is a D&#39;)<br>        B.__init__(self)<br>        C.__init__(self)<br>        print(&#39;Leave D&#39;)<br><br>D()<br>### output<br>This is a D<br>This is a B<br>This is a A<br>Leave A<br>Leave B<br>This is a C<br>This is a A<br>Leave A<br>Leave C<br>Leave D<br><br>class A():<br>    def __init__(self):<br>        print(&#39;This is a A&#39;)<br>        print(&#39;Leave A&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;This is a B&#39;)<br>        super().__init__()<br>        print(&#39;Leave B&#39;)<br>        <br>class C(A):    <br>     def __init__(self):<br>        print(&#39;This is a C&#39;)<br>        super().__init__()<br>        print(&#39;Leave C&#39;)<br><br>class D(B,C):<br>    def __init__(self):<br>        print(&#39;This is a D&#39;)<br>        super().__init__()<br>        print(&#39;Leave D&#39;)<br>D()<br><br>####<br>This is a D<br>This is a B<br>This is a C<br>This is a A<br>Leave A<br>Leave C<br>Leave B<br>Leave D","like_count":0},{"had_liked":false,"id":229620,"user_name":"xiaochuan","can_delete":false,"product_type":"c1","uid":2043891,"ip_address":"","ucode":"FF720EEB4B4EA7","user_header":"https://static001.geekbang.org/account/avatar/00/1f/2f/f3/3a3cc6a1.jpg","comment_is_top":false,"comment_ctime":1593075908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593075908","product_id":100026901,"comment_content":"Python的MRO发展史:https:&#47;&#47;hanjianwei.com&#47;2013&#47;07&#47;25&#47;python-mro&#47;","like_count":0},{"had_liked":false,"id":225814,"user_name":"Geek_216fd5","can_delete":false,"product_type":"c1","uid":1602049,"ip_address":"","ucode":"EA6804E9E974B3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLb5UK2u6RyS48ia8H2lUSlUyQEaBiclDlqpbQUWqTWeuf3Djl3ruHRN3U37GXYuWAfAW5d1xkm6F7w/132","comment_is_top":false,"comment_ctime":1591866014,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591866014","product_id":100026901,"comment_content":"老师，请教一下，下面代码为啥报错？<br>class A():<br>    def __init__(self, str):<br>        print(&#39;from&#39;, str, &#39;enter A&#39;)<br>        print(&#39;leave A&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;enter B&#39;)<br>        super().__init__(&#39;B&#39;)<br>        print(&#39;leave B&#39;)<br><br>class C(A):<br>    def __init__(self):<br>        print(&#39;enter C&#39;)<br>        super().__init__(&#39;C&#39;)<br>        print(&#39;leave C&#39;)<br><br>class D(B, C):<br>    def __init__(self):<br>        print(&#39;enter D&#39;)<br>        super().__init__()<br>        print(&#39;leave D&#39;)<br><br>D()","like_count":0,"discussions":[{"author":{"id":1000076,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/8c/373d4027.jpg","nickname":"龍蝦","note":"","ucode":"BE1D500833F070","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307867,"discussion_content":"把 class A __init__() 的 str 相关参数去掉，调试下会发现 __init__ 的调用顺序是 D->B->C->A\nB 中 super().__init__() 调用的其实是 C 的 __init__()，不是 A 的 __init__()","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600776658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220453,"user_name":"ShmilyVidian","can_delete":false,"product_type":"c1","uid":1177103,"ip_address":"","ucode":"2B2485B48B8D33","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/0f/0499db2c.jpg","comment_is_top":false,"comment_ctime":1590245050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590245050","product_id":100026901,"comment_content":"类的很多方法第一个参数是self，就是上下文，有机制直接这个函数或类有一个this一样的变量可供访问吗？而不需要每次方法中读取第一个self，而且不写还会报错。","like_count":0},{"had_liked":false,"id":209327,"user_name":"LiuJ","can_delete":false,"product_type":"c1","uid":1937496,"ip_address":"","ucode":"EE4896E8E96B95","user_header":"https://static001.geekbang.org/account/avatar/00/1d/90/58/e2ab3dfe.jpg","comment_is_top":false,"comment_ctime":1587536774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587536774","product_id":100026901,"comment_content":"class A():<br>    def __init__(self):<br>        print(&#39;A start&#39;)<br>        print(&#39;A&#39;, self)<br>        print(&#39;A end&#39;)<br><br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;B start&#39;)<br>        print(&#39;B&#39;, self)<br>        super().__init__()<br>        print(&#39;B end&#39;)<br><br><br>class C(A):<br>    def __init__(self):<br>        print(&#39;C start&#39;)<br>        print(&#39;C&#39;, self)<br>        super().__init__()<br>        print(&#39;C end&#39;)<br><br><br>class D(B, C):<br>    def __init__(self):<br>        print(&#39;D start&#39;)<br>        print(&#39;D&#39;, self)<br>        super().__init__()<br>        print(&#39;D end&#39;)<br><br><br>d = D()<br><br><br>###### 输出 ######<br>D start<br>D &lt;__main__.D object at 0x7fbc71579b50&gt;<br>B start<br>B &lt;__main__.D object at 0x7fbc71579b50&gt;<br>C start<br>C &lt;__main__.D object at 0x7fbc71579b50&gt;<br>A start<br>A &lt;__main__.D object at 0x7fbc71579b50&gt;<br>A end<br>C end<br>B end<br>D end","like_count":0},{"had_liked":false,"id":197651,"user_name":"徐旭","can_delete":false,"product_type":"c1","uid":1814806,"ip_address":"","ucode":"1D3091D15373E5","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b1/16/dd11930c.jpg","comment_is_top":false,"comment_ctime":1585389750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585389750","product_id":100026901,"comment_content":"赞赞，老师讲得不错","like_count":0},{"had_liked":false,"id":189936,"user_name":"mithril","can_delete":false,"product_type":"c1","uid":1845882,"ip_address":"","ucode":"DA7B4268142FFE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfdTR27z4sNKbjicmWz03jzdibfRBleq0E3YZvDpSKU2Yy9nzQlDAqsaodmPVticzkA6FHDicmrFJwKQ/132","comment_is_top":false,"comment_ctime":1584583970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584583970","product_id":100026901,"comment_content":"搞过java的表示这种东西自己知道，但是很难用语言去概括。最贴近的恐怕是各种游戏了吧","like_count":0},{"had_liked":false,"id":179281,"user_name":"Geek_7777","can_delete":false,"product_type":"c1","uid":1578271,"ip_address":"","ucode":"FC5FFB3DE50BB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLTOaSibFSEnoB5c0qdG7g9Eia5f2xONMbWYmnpQZTYrSqUUMnG984jFVGyVG8px3oSDVUIXj185VEA/132","comment_is_top":false,"comment_ctime":1581950891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581950891","product_id":100026901,"comment_content":"再利用","like_count":0},{"had_liked":false,"id":143682,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1571755781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571755781","product_id":100026901,"comment_content":"1。类。属性。 函数。对象。   <br>2。子类可以复用父类的方法 也可以在此基础上增加自己独有的方法 属性等","like_count":0},{"had_liked":false,"id":142579,"user_name":"🐬Innocence","can_delete":false,"product_type":"c1","uid":1199670,"ip_address":"","ucode":"7CBAB4976FACE0","user_header":"https://static001.geekbang.org/account/avatar/00/12/4e/36/de029ebf.jpg","comment_is_top":false,"comment_ctime":1571401725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571401725","product_id":100026901,"comment_content":"https:&#47;&#47;www.heroyf.club&#47;2019&#47;04&#47;25&#47;python_c3&#47;<br>我的这篇博客有讲！","like_count":0},{"had_liked":false,"id":142578,"user_name":"🐬Innocence","can_delete":false,"product_type":"c1","uid":1199670,"ip_address":"","ucode":"7CBAB4976FACE0","user_header":"https://static001.geekbang.org/account/avatar/00/12/4e/36/de029ebf.jpg","comment_is_top":false,"comment_ctime":1571401688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571401688","product_id":100026901,"comment_content":"我之前研究过python多重继承排序算法，可以具体看我的博客","like_count":0},{"had_liked":false,"id":137078,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1569592166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569592166","product_id":100026901,"comment_content":"总结:<br>1.面向对象的四要素:类，对象，属性(成员变量)，函数(成员函数)。属性和函数组成类，对象是类的实例。<br>2.拿来用(嘿嘿)<br>思考题<br>构造函数调用顺序:DBAC，编程验证一下吧。<br>ABACD<br>最后对比一下跟C++的不同:①类成员是默认公有的，要私有用__变量名;②子类不会自动调用父类的构造函数;③貌似没有析构函数;④类函数，静态函数是新东西，对其用途还不是太清楚;⑤抽象函数，就是C++的虚函数吧。(C++也好久不用了，不知道总结的对不。)<br>课程的练习代码: https:&#47;&#47;github.com&#47;zwdnet&#47;PythonPractice","like_count":0},{"had_liked":false,"id":132888,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1252639,"ip_address":"","ucode":"2F3959A717BE10","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/1f/6bc10297.jpg","comment_is_top":false,"comment_ctime":1568260197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568260197","product_id":100026901,"comment_content":"print(cls.__mro__)","like_count":0},{"had_liked":false,"id":130947,"user_name":"卢三","can_delete":false,"product_type":"c1","uid":1234141,"ip_address":"","ucode":"BE8D61A0422741","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/dd/cc78f200.jpg","comment_is_top":false,"comment_ctime":1567582143,"is_pvip":false,"replies":[{"id":"49793","content":"大型工程可以用pycharm，jupyter适合小型得程序","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1567707264,"ip_address":"","comment_id":130947,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567582143","product_id":100026901,"comment_content":"写代码用什么IDE呢，jupyter没有代码补全啊","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466208,"discussion_content":"大型工程可以用pycharm，jupyter适合小型得程序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567707264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1028523,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b1/ab/f2660028.jpg","nickname":"东瓜","note":"","ucode":"E847E73B77C0A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88862,"discussion_content":"https://blog.csdn.net/weixin_37595559/article/details/81540482，jupyter也可以代码补全","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576735870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123008,"user_name":"Geek_1c4660","can_delete":false,"product_type":"c1","uid":1545826,"ip_address":"","ucode":"D4A39EC2D42FAD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyuuhxu0HH4Ttz27tlBONzBHrrWwlM4mPgns0p0CMecFcHPZtvkkN9rqc5wkKPiaianRxwVe7u6Vkg/132","comment_is_top":false,"comment_ctime":1565587870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565587870","product_id":100026901,"comment_content":"老师，有时间可以讲解下 Python 内置函数 super() 和 super 这个类吗。最好能够通过源码分析下。","like_count":0},{"had_liked":false,"id":121279,"user_name":"以马内利","can_delete":false,"product_type":"c1","uid":1544109,"ip_address":"","ucode":"50A96FCD843015","user_header":"https://static001.geekbang.org/account/avatar/00/17/8f/ad/f8a31449.jpg","comment_is_top":false,"comment_ctime":1565092983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565092983","product_id":100026901,"comment_content":"以前在哪看过，在Python2中经典类是按照深度优先来继承，新式类是广度优先的继承策略；而在Python3中经典类和新式类都是按照广度优先的继承策略","like_count":0},{"had_liked":false,"id":119439,"user_name":"beiler","can_delete":false,"product_type":"c1","uid":1192989,"ip_address":"","ucode":"0A62FE86617486","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","comment_is_top":false,"comment_ctime":1564587907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564587907","product_id":100026901,"comment_content":"老师我想问个问题，我写一个类，为什么要用到成员函数呢？完全可以用类函数代替成员函数，还不需要实例化，所有变量都用局部变量即可，为什么要用成员变量？这样调用也方便","like_count":0},{"had_liked":false,"id":118241,"user_name":"张洪阆","can_delete":false,"product_type":"c1","uid":1001954,"ip_address":"","ucode":"CFF7035D0DF059","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/e2/1fad12eb.jpg","comment_is_top":false,"comment_ctime":1564299838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564299838","product_id":100026901,"comment_content":"继承用三个词表示是，获得特征能力","like_count":0},{"had_liked":false,"id":116107,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1563786808,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563786808","product_id":100026901,"comment_content":"1.面向对象编程四要素：<br>(1)类：一群有着相似事物的集合，即一群有着相同属性和函数的对象的集合。<br>(2)对象：类中的每一个具体个体即为对象<br>(3)属性：对象具有的某个静态特征<br>(4)函数：对象具有的某个动态能力<br><br>2.继承的含义用三个字表达：遗传术<br><br>3.如果一个类继承了多个父类，则构造函数的调用方式为按父类的书写顺序从右到左依次调用，以下是一个简单的多重继承测试程序：<br><br>#多重继承构造函数调用测试<br>class A:<br>    def __init__(self):<br>        print(&#39;This is class A&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        super().__init__()<br>        print(&#39;This is class B&#39;)<br><br>class C(A):<br>    def __init__(self):<br>        super().__init__()<br>        print(&#39;This is class C&#39;)<br><br>class D(C,B):<br>    def __init__(self):<br>        super().__init__()<br>        print(&#39;This is class D&#39;)<br><br>o = D()<br><br>########## 输出 ##########<br>This is class A<br>This is class B<br>This is class C<br>This is class D","like_count":0,"discussions":[{"author":{"id":1526614,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4b/56/6e4fa81b.jpg","nickname":"Leo","note":"","ucode":"A8C97D54966476","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2693,"discussion_content":"你把class D(C,B):中的BC调换下顺序就发现不是从右到左了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563865300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108535,"user_name":"至尊宝","can_delete":false,"product_type":"c1","uid":1389537,"ip_address":"","ucode":"DA24D200054026","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqPljnIrvyGQyBhJ3lnqJPGmvO6HrD4MzhjSerjNEiagic6QjGeSIR8AG0F8OoxYGMFWjQrE4ZInxJQ/132","comment_is_top":false,"comment_ctime":1561795392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561795392","product_id":100026901,"comment_content":"打卡，涨姿势","like_count":0},{"had_liked":false,"id":104833,"user_name":"cuikt","can_delete":false,"product_type":"c1","uid":1242702,"ip_address":"","ucode":"9A1DB426CEFEEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/4e/0066303c.jpg","comment_is_top":false,"comment_ctime":1560850280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560850280","product_id":100026901,"comment_content":"老师，问个问题，在类中通过构造函数创建的属性值，相对于类内部的函数之间是共享的吗？","like_count":0},{"had_liked":false,"id":104521,"user_name":"Monroe  He","can_delete":false,"product_type":"c1","uid":1348219,"ip_address":"","ucode":"D04ECB2EF2E0DA","user_header":"https://static001.geekbang.org/account/avatar/00/14/92/7b/8c7e3e61.jpg","comment_is_top":false,"comment_ctime":1560771997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560771997","product_id":100026901,"comment_content":"问题：<br>1、面向对象编程四要素：抽象、封装、继承、多态<br>抽象：对多个事物进行观察，提取出其共同特征即属性。并提取出共有行为即函数。<br>封装：在类内部对属性进行操作，有些属性外部可以操作，有些则不可以。规定了类属性方法的可见性<br>继承:可以通过复用代码实现代码的简洁性<br>2、继承：复用性<br>思考题：<br>1、D内部先继承那个类，先调用B类构造函数的话:D调用B构造函数，B调用A构造函数;D调用C构造函数，C调用A构造函数。","like_count":0},{"had_liked":false,"id":103917,"user_name":"Shawn.C","can_delete":false,"product_type":"c1","uid":1046295,"ip_address":"","ucode":"9CE004D0325320","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/17/f94e987f.jpg","comment_is_top":false,"comment_ctime":1560565386,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560565386","product_id":100026901,"comment_content":"三个字表达 是一个 a 继承 b。那么a就是一个b。<br>例如兔子继承动物，兔子就是一个动物。","like_count":0},{"had_liked":false,"id":103715,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1542384,"ip_address":"","ucode":"D647035C27599D","user_header":"https://static001.geekbang.org/account/avatar/00/17/88/f0/f59a8a5e.jpg","comment_is_top":false,"comment_ctime":1560496549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560496549","product_id":100026901,"comment_content":"面向对象四特征：<br>1，抽象<br>2，封装<br>3，继承<br>4，多态<br>面向对象四要素：<br>类<br>属性<br>函数<br>对象<br>到底是“要素”还是“特征” @_@！","like_count":0},{"had_liked":false,"id":102790,"user_name":"知行","can_delete":false,"product_type":"c1","uid":1088922,"ip_address":"","ucode":"395093B476FA11","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/9a/dd0be774.jpg","comment_is_top":false,"comment_ctime":1560305700,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560305700","product_id":100026901,"comment_content":"class A():<br>    def __init__(self):<br>        print(&#39;enter A&#39;)<br>        print(&#39;leave A&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;enter B&#39;)<br>        super().__init__()<br>        print(&#39;leave B&#39;)<br><br>class C(A):<br>    def __init__(self):<br>        print(&#39;enter C&#39;)<br>        super().__init__()<br>        print(&#39;leave C&#39;)<br><br>class D(B, C):<br>    def __init__(self):<br>        print(&#39;enter D&#39;)<br>        super().__init__()<br>        print(&#39;leave D&#39;)<br><br>D()<br><br><br>这个程序，行不通啊","like_count":0},{"had_liked":false,"id":102774,"user_name":"知行","can_delete":false,"product_type":"c1","uid":1088922,"ip_address":"","ucode":"395093B476FA11","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/9a/dd0be774.jpg","comment_is_top":false,"comment_ctime":1560304034,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560304034","product_id":100026901,"comment_content":"类，方法，属性，对象","like_count":0},{"had_liked":false,"id":101828,"user_name":"春之绿野","can_delete":false,"product_type":"c1","uid":1057216,"ip_address":"","ucode":"296003F7D2B086","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/c0/38816c31.jpg","comment_is_top":false,"comment_ctime":1559985113,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1559985113","product_id":100026901,"comment_content":"不是显式调用才会调用父类的构造函数的么？所以得看显式调用的顺序吧","like_count":0},{"had_liked":false,"id":101681,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1559914602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559914602","product_id":100026901,"comment_content":"1.封装 继承 多态 抽象<br>2.父与子<br>思考题：在多重继承的情况下，super查找的是__mro__的顺序，python3用广度优先C3算法。<br>请老师详述静态方法和类方法的应用场景。","like_count":0},{"had_liked":false,"id":101518,"user_name":"Eline","can_delete":false,"product_type":"c1","uid":1164589,"ip_address":"","ucode":"936EF16B8C08FB","user_header":"https://static001.geekbang.org/account/avatar/00/11/c5/2d/3f658d3f.jpg","comment_is_top":false,"comment_ctime":1559836458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559836458","product_id":100026901,"comment_content":"python3用的是新式类，C3算法计算MRO，<br>class D(object):<br>    def __init__(self):<br>        print(&#39;Base D&#39;)<br><br><br>class E(object):<br>    def __init__(self):<br>        print(&#39;Base E&#39;)<br><br><br>class F(object):<br>    def __init__(self):<br>        print(&#39;Base F&#39;)<br><br><br>class C(D, F):<br>    def __init__(self):<br>        print(&#39;start C&#39;)<br>        # D.__init__(self)<br>        # F.__init__(self)<br>        super(C, self).__init__()<br>        print(&#39;end C&#39;)<br><br><br>class B(E, D):<br>    def __init__(self):<br>        print(&#39;start B&#39;)<br>        # E.__init__(self)<br>        # D.__init__(self)<br>        super(B, self).__init__()<br>        print(&#39;end B&#39;)<br><br><br>class A(B, C):<br>    def __init__(self):<br>        print(&#39;start A&#39;)<br>        # B.__init__(self)<br>        # C.__init__(self)<br>        super(A, self).__init__()<br>        print(&#39;end A&#39;)<br><br><br>if __name__ == &#39;__main__&#39;:<br>    a=A()<br>    print(A.__mro__)<br>__init__方法：<br>####输出###<br>start A<br>start B<br>Base E<br>Base D<br>end B<br>start C<br>Base D<br>Base F<br>end C<br>end A<br>(&lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.F&#39;&gt;, &lt;class &#39;object&#39;&gt;)<br><br>super方法：<br>###输出###<br>start A<br>start B<br>Base E<br>end B<br>end A<br>(&lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.F&#39;&gt;, &lt;class &#39;object&#39;&gt;)<br>","like_count":0},{"had_liked":false,"id":101088,"user_name":"羽翼1982","can_delete":false,"product_type":"c1","uid":1130194,"ip_address":"","ucode":"1C7362888B7E3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/d2/5f9d3fa7.jpg","comment_is_top":false,"comment_ctime":1559714487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559714487","product_id":100026901,"comment_content":"有一个问题，Java中没有classmethod和staticmethod的区分，感觉python中classmethod能做更多的事情，包括用来实现工厂类，设置和访问类变量等等，为什么python要有staticmethod呢？ 有哪些场景是一定要用staticmethod的呢？","like_count":0},{"had_liked":false,"id":100966,"user_name":"GentleCP","can_delete":false,"product_type":"c1","uid":1525440,"ip_address":"","ucode":"BB1EE3720D44F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/c0/01292b08.jpg","comment_is_top":false,"comment_ctime":1559696686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559696686","product_id":100026901,"comment_content":"老师，我理解类函数可以用来调用本身构造函数进行初始化，但是初始化这项工程init不是已经做好了吗。在什么情况下还需要该类函数进行初始化而不是直接在init中初始化就行？","like_count":0},{"had_liked":false,"id":100776,"user_name":"John Si","can_delete":false,"product_type":"c1","uid":1526611,"ip_address":"","ucode":"705B90724A4BD4","user_header":"https://static001.geekbang.org/account/avatar/00/17/4b/53/67c08006.jpg","comment_is_top":false,"comment_ctime":1559636570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559636570","product_id":100026901,"comment_content":"老师，各位同学好，请问在创建一个类时, 下列写法分别是什么？<br>1. class A(object):<br>    print(&#39;A is being Initialized&#39;)<br>   a = A()<br>2.class A():<br>    def __init__(self):<br>        print(&#39;A is being initialized&#39;)<br>  a = A()<br>两者都可以生成物件a，请问两种初始化方法有何分别呢？","like_count":0},{"had_liked":false,"id":100719,"user_name":"lllong33","can_delete":false,"product_type":"c1","uid":1528751,"ip_address":"","ucode":"5D012385994C3D","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/af/e5bf5d08.jpg","comment_is_top":false,"comment_ctime":1559626026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559626026","product_id":100026901,"comment_content":"def ex1():<br>    class A():<br>        def __init__(self):<br>            print(&#39;____A____&#39;)<br><br>    class B(A):<br>        def __init__(self):<br>            print(&#39;____B____&#39;)<br>            super().__init__()<br><br><br>    class C(A):<br>        def __init__(self):<br>            print(&#39;____C____&#39;)<br>            super().__init__()<br><br><br>    class D(B, C):<br>        def __init__(self):<br>            print(&#39;____D____&#39;)<br>            super().__init__()<br><br><br>    d = D()<br><br>if __name__ == &#39;__main__&#39;:<br>    ex1()","like_count":0},{"had_liked":false,"id":100618,"user_name":"轲小吴","can_delete":false,"product_type":"c1","uid":1528801,"ip_address":"","ucode":"7042365AB4108B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ers2FSBYibgS8kiagZ8R8USicW6IYHqFXeAJRdCChOnomkOrHgibMdTTb5x44RC3rzu8iaUCZlKZ8BUAKQ/132","comment_is_top":false,"comment_ctime":1559607279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559607279","product_id":100026901,"comment_content":"借楼问个不相关的问题<br>HTTPSConnectionPool(host=&#39;xxx&#39;, port=443): Max retries exceeded with url: xxx(Caused by ProtocolError(&#39;Connection aborted.&#39;, RemoteDisconnected(&#39;Remote end closed connection without response&#39;,)))<br>爬虫时遇见这个错误，网上说是http连接太多没关闭的原因，按着网上的加了<br>s = requests.session()<br>s.keep_alive = False<br>即断开连接<br>但还是会出错，随机出现错误，有没有知道这个应该怎么解决","like_count":0},{"had_liked":false,"id":100597,"user_name":"AllenGFLiu","can_delete":false,"product_type":"c1","uid":1221991,"ip_address":"","ucode":"90FA8A619A2629","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","comment_is_top":false,"comment_ctime":1559604745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559604745","product_id":100026901,"comment_content":"我看老师写的继承代码中子类初始化的时候实现父类的构造函数是用的父类的类名的方式,Python中也是能用super这种方式来代替父类类名的吧？但老师好像没有提这一点。","like_count":0},{"had_liked":false,"id":100588,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1559602249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559602249","product_id":100026901,"comment_content":"class A():<br>    def __init__(self):<br>        print(&#39;我是祖先类&#39;)<br><br><br>class B(A):<br>    def __init__(self):<br>        print(&#39;我是第1代B&#39;)<br>        super().__init__()<br><br><br>class C(A):<br>    def __init__(self):<br>        print(&#39;我是第一代C&#39;)<br>        super().__init__()<br><br>class D(B):<br>    def __init__(self):<br>        print(&#39;我是第二代D-》B&#39;)<br>        super().__init__()<br><br>class F(C):<br>    def __init__(self):<br>        print(&#39;我是第二代F-》C&#39;)<br>        super().__init__()<br><br>class E(D,F):<br>    def __init__(self):<br>        print(&#39;我是E&#39;)<br>        super().__init__()<br>        # B.__init__()<br>        # C.__init__()<br><br><br>print(E())<br>print(E.mro())<br>两者打印是一样的：E-》D -〉B-》F-〉C-》A 运行环境 3.7","like_count":0},{"had_liked":false,"id":100566,"user_name":"yshan","can_delete":false,"product_type":"c1","uid":1136788,"ip_address":"","ucode":"A2ECDCDA52B8EE","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/94/c8bc2b59.jpg","comment_is_top":false,"comment_ctime":1559578455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559578455","product_id":100026901,"comment_content":"封装，继承，抽象，多态<br>多重继承，需要看BC的顺序","like_count":0},{"had_liked":false,"id":100559,"user_name":"周平","can_delete":false,"product_type":"c1","uid":1047936,"ip_address":"","ucode":"CA1869B139A4F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fd/80/52763d62.jpg","comment_is_top":false,"comment_ctime":1559577139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559577139","product_id":100026901,"comment_content":"1. 四要素：封装、继承、抽象、多态；<br>2. 父与子<br>","like_count":0},{"had_liked":false,"id":100553,"user_name":"voc","can_delete":false,"product_type":"c1","uid":1526888,"ip_address":"","ucode":"EDAFFBA02550FF","user_header":"https://static001.geekbang.org/account/avatar/00/17/4c/68/77a0ac2d.jpg","comment_is_top":false,"comment_ctime":1559576354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559576354","product_id":100026901,"comment_content":"写好类继承关系<br>print（D.__mro__）<br>D,B,C,A","like_count":0},{"had_liked":false,"id":100531,"user_name":"Geek_d848f7","can_delete":false,"product_type":"c1","uid":1524021,"ip_address":"","ucode":"F24BC59B6E9E6B","user_header":"","comment_is_top":false,"comment_ctime":1559571808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559571808","product_id":100026901,"comment_content":"1. 四要素：封装、继承、抽象、多态；<br>   封装：一组相似特征对象的集合，即类<br>   继承：子类继承父类<br>   抽象：接口，通过继承实现具体方法或初始化属性<br>   多态：同一个父类函数可在子类中实现不同的过程<br>2. 父与子","like_count":0},{"had_liked":false,"id":100497,"user_name":"Wing·三金","can_delete":false,"product_type":"c1","uid":1341402,"ip_address":"","ucode":"6B9F5822C3717F","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/da/54c663f3.jpg","comment_is_top":false,"comment_ctime":1559567540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559567540","product_id":100026901,"comment_content":"1. 面向对象编程四要素：<br>\ta. 类，对象，属性，函数<br>\tb. 文绉绉地说，类是有着相同属性和函数的对象的集合。但这样说对初学者并不容易理解。<br>\tc. 换个说法：如果类是设计蓝图，那么对象就是根据这个类建造出来的实体，所有由此类生成的的对象都有相同的属性的函数。<br>\td. 属性和函数其实都是“写”在类里面的，但是由于在生成对象之前，这个类并不会发挥任何具体的作用，所以通常说到这两者都是相对【对象】来说，即属性是对象所包含的内部变量，函数是对象所拥有的内部函数。<br>2. 三个字概括继承：类扩展。<br>3. 思考题：前面已经提到了，父类的构造函数不会自动调用，所以这种情况下 B 和 C 的先后取决于 D 类的构造函数是怎么写的，之后就类似于 DFS 的过程了。比如如果 D 中写成先调用 B 类的构造函数再调用 C 类的构造函数，那么调用顺序就是 D-B-A-C-A。","like_count":0},{"had_liked":false,"id":100492,"user_name":"Hoo-Ah","can_delete":false,"product_type":"c1","uid":1306913,"ip_address":"","ucode":"823093A6C7DEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/21/52e8267b.jpg","comment_is_top":false,"comment_ctime":1559565969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559565969","product_id":100026901,"comment_content":"思考题：多重继承有两种属性查找方式。一种是广度优先查找，在查找属性的时候先不找顶层继承类，最后在找顶层继承类中是否有；一种是深度优先查找，在查找属性的时候先根据继承顺序一直找到顶层继承类。","like_count":0},{"had_liked":false,"id":100486,"user_name":"小胖","can_delete":false,"product_type":"c1","uid":1022958,"ip_address":"","ucode":"1B8D884D254070","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/ee/8950c240.jpg","comment_is_top":false,"comment_ctime":1559564368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559564368","product_id":100026901,"comment_content":"面向对象4要素：抽象、封装、继承、多态。<br>继承：父与子<br>思考题：<br>D-&gt;C-&gt;A-&gt;B-&gt;A   <br>或者<br>D-&gt;B-&gt;A-&gt;C-&gt;A<br>B和C是同级，就看在D中B、C调用的顺序","like_count":0},{"had_liked":false,"id":100462,"user_name":"鱼_XueTr","can_delete":false,"product_type":"c1","uid":1506691,"ip_address":"","ucode":"A164D2540F251D","user_header":"https://static001.geekbang.org/account/avatar/00/16/fd/83/b432b125.jpg","comment_is_top":false,"comment_ctime":1559559049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559559049","product_id":100026901,"comment_content":"第一个问题：类，对象，属性，方法。<br>第二个问题：共享（共享属性和方法的调用权）","like_count":0},{"had_liked":false,"id":100438,"user_name":"NG","can_delete":false,"product_type":"c1","uid":1356009,"ip_address":"","ucode":"7CF4CCE677BB55","user_header":"https://static001.geekbang.org/account/avatar/00/14/b0/e9/d72b9674.jpg","comment_is_top":false,"comment_ctime":1559556065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559556065","product_id":100026901,"comment_content":"四大元素：<br>1、类<br>2、对象<br>3、属性<br>4、函数<br>其中，类是一群具有相同属性和函数的对象的集合。<br><br>父与子的关系。儿子继承父亲的东西，同时可以拥有父亲没有的东西","like_count":0},{"had_liked":false,"id":100400,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1559546688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559546688","product_id":100026901,"comment_content":"代码：<br>class A():<br>    def __init__(self):<br>        print(&#39;A init&#39;)<br><br>    def printName(self):<br>        print(&#39;Name A print&#39;)<br><br>class B(A):<br>    def __init__(self):<br>        A.__init__(self)<br>        print(&#39;B init&#39;)<br><br><br>class C(A):<br>    def __init__(self):<br>        A.__init__(self)<br>        print(&#39;C init&#39;)<br><br><br>class D(B,C):<br>    def __init__(self):<br>       B.__init__(self)<br>       C.__init__(self)<br>       print(&#39;D init&#39;)<br><br><br>d = D()<br><br>运行结果：<br>A init<br>B init<br>A init<br>C init<br>D init<br><br>哈哈，我就是跟庄小P反了一下","like_count":0},{"had_liked":false,"id":100386,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1559543705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559543705","product_id":100026901,"comment_content":"构造函数调用顺序 D--B--C--A","like_count":0},{"had_liked":false,"id":100384,"user_name":"益达","can_delete":false,"product_type":"c1","uid":1229123,"ip_address":"","ucode":"AFE48F453851B2","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/43/50c4cd22.jpg","comment_is_top":false,"comment_ctime":1559543546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559543546","product_id":100026901,"comment_content":"面向对象四要素：<br>1，抽象<br>2，封装<br>3，继承<br>4，多态","like_count":0},{"had_liked":false,"id":100374,"user_name":"稳","can_delete":false,"product_type":"c1","uid":1284626,"ip_address":"","ucode":"BF5723E63E4115","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/12/06863960.jpg","comment_is_top":false,"comment_ctime":1559540497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559540497","product_id":100026901,"comment_content":"多重继承，python2里分深度优先(经典类)和广度优先(新式类)，3里所有类都是新式类，广度优先。至于原理，只知道是用图来存储的","like_count":0},{"had_liked":false,"id":100344,"user_name":"hlz-123","can_delete":false,"product_type":"c1","uid":1433586,"ip_address":"","ucode":"B7E5EF0C260BD2","user_header":"","comment_is_top":false,"comment_ctime":1559531715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559531715","product_id":100026901,"comment_content":"通过下面程序运行，D的构造函数运行顺序是DBACA<br>class A():<br>    def __init__(self,value=&#39;a&#39;):<br>        print(&#39;class A init called&#39;)<br>        self.value = value<br><br>    def print_value(self):<br>        print(&#39;A value={}&#39;.format(self.value))<br><br>class B(A):<br>    def __init__(self,value=&#39;b&#39;):<br>        print(&#39;class B init called&#39;)<br>        A.__init__(self)<br>        self.value = value<br><br>    def print_value(self):<br>        print(&#39;B value={}&#39;.format(self.value))<br><br>class C(A):<br>    def __init__(self,value=&#39;c&#39;):<br>        print(&#39;class C init called&#39;)<br>        A.__init__(self)<br>        self.value = value<br><br>    def print_value(self):<br>        print(&#39;C value={}&#39;.format(self.value))<br><br>class D(B,C):<br>    def __init__(self,value):<br>        print(&#39;class D init called&#39;)<br>        B.__init__(self)<br>        C.__init__(self)<br>        self.value = value<br><br>    def print_value(self):<br>        print(&#39;D value={}&#39;.format(self.value))<br><br>class_A=A(&#39;a&#39;)<br>class_B=B(&#39;b&#39;)<br>class_C=C(&#39;c&#39;)<br>class_D=D(&#39;d&#39;)","like_count":0},{"had_liked":false,"id":100333,"user_name":"airong","can_delete":false,"product_type":"c1","uid":1317199,"ip_address":"","ucode":"0082FFF6C679A7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6KJcYf8PnO0knxk6EDCETYQHc19KMiaBW2U6EVdPKYNOjObiaibm46KjbJtL5WS5cg7HVY7nEIqiakCgWEg137Okbw/132","comment_is_top":false,"comment_ctime":1559529911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559529911","product_id":100026901,"comment_content":"class A(object):<br><br> def __init__(self):<br>   print &quot;INTI A&quot;<br>   super(A, self).__init__()<br><br>class B(A):<br> def __init__(self):<br>  print &quot;INIT B&quot;<br>  super(B, self).__init__()<br><br>class C(A):<br><br> def __init__(self):<br>  print &quot;INIT C&quot;<br>  super(C, self).__init__()<br><br>class D(B,C):<br><br> def __init__(self):<br>  print &quot;INIT D&quot;<br>  super(D, self).__init__()<br><br>d=D()<br><br># output<br># INIT D<br># INIT B<br># INIT C<br># INTI A","like_count":0},{"had_liked":false,"id":100323,"user_name":"乔克","can_delete":false,"product_type":"c1","uid":1315273,"ip_address":"","ucode":"28A797A4235B78","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/c9/c3eae895.jpg","comment_is_top":false,"comment_ctime":1559528928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559528928","product_id":100026901,"comment_content":"思考题最后一个：<br>如果B,C中有相同的方法，谁在左边谁的优先级高；A是最后再找的类，也就是BC都没有，再到A里去找。","like_count":0},{"had_liked":false,"id":100312,"user_name":"吴晓辉","can_delete":false,"product_type":"c1","uid":1111658,"ip_address":"","ucode":"A22FBC5EB1FE8E","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/6a/28c7572f.jpg","comment_is_top":false,"comment_ctime":1559526730,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1559526730","product_id":100026901,"comment_content":"或者在类外使用 Entity.WELCOME_STR ，来表达这个字符串。应该是Document.WELCOME_STR。思考题应该是DBCA吧，因为python3的类都是新式类，它多继承是广度优先，如果是python2的经典类的话应该是DBAC吧，因为是深度优先(新式类指继承object的类)","like_count":0},{"had_liked":false,"id":100289,"user_name":"付达","can_delete":false,"product_type":"c1","uid":1143123,"ip_address":"","ucode":"87CBE033766983","user_header":"https://static001.geekbang.org/account/avatar/00/11/71/53/b6702c38.jpg","comment_is_top":false,"comment_ctime":1559522930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559522930","product_id":100026901,"comment_content":"涨姿势","like_count":0},{"had_liked":false,"id":100269,"user_name":"zx钟 💤","can_delete":false,"product_type":"c1","uid":1398032,"ip_address":"","ucode":"193DF60890BE88","user_header":"https://static001.geekbang.org/account/avatar/00/15/55/10/f2f81983.jpg","comment_is_top":false,"comment_ctime":1559520308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559520308","product_id":100026901,"comment_content":"多重继承 先左后右","like_count":0}]}