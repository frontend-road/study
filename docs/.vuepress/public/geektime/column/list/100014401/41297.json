{"id":41297,"title":"21 | 服务调用失败时有哪些处理手段？","content":"<p>通过前面的学习你应该可以理解，微服务相比于单体应用最大的不同之处在于，服务的调用从同一台机器内部的本地调用变成了不同机器之间的远程方法调用，但是这个过程也引入了两个不确定的因素。</p>\n<p>一个是调用的执行是在服务提供者一端，即使服务消费者本身是正常的，服务提供者也可能由于诸如CPU、网络I/O、磁盘、内存、网卡等硬件原因导致调用失败，还有可能由于本身程序执行问题比如GC暂停导致调用失败。</p>\n<p>另一个不确定因素是调用发生在两台机器之间，所以要经过网络传输，而网络的复杂性是不可控的，网络丢包、延迟以及随时可能发生的瞬间抖动都有可能造成调用失败。</p>\n<p>所以，单体应用改造为微服务架构后，要针对服务调用失败进行特殊处理。那具体来说有哪些处理手段呢？下面我就结合自己的实战经验，一起来聊聊<span class=\"orange\">服务调用失败都有哪些处理手段。</span></p>\n<h2>超时</h2>\n<p>首先你要知道的是，单体应用被改造成微服务架构后，一次用户调用可能会被拆分成多个系统之间的服务调用，任何一次服务调用如果发生问题都可能会导致最后用户调用失败。而且在微服务架构下，一个系统的问题会影响所有调用这个系统所提供服务的服务消费者，如果不加以控制，严重的话会引起整个系统雪崩。</p>\n<p>所以在实际项目中，针对服务调用都要设置一个超时时间，以避免依赖的服务迟迟没有返回调用结果，把服务消费者拖死。这其中，超时时间的设定也是有讲究的，不是越短越好，因为太短可能会导致有些服务调用还没有来得及执行完就被丢弃了；当然时间也不能太长，太长有可能导致服务消费者被拖垮。根据我的经验，找到比较合适的超时时间需要根据正常情况下，服务提供者的服务水平来决定。具体来说，就是按照服务提供者线上真实的服务水平，取P999或者P9999的值，也就是以99.9%或者99.99%的调用都在多少毫秒内返回为准。</p><!-- [[[read_end]]] -->\n<h2>重试</h2>\n<p>虽然设置超时时间可以起到及时止损的效果，但是服务调用的结果毕竟是失败了，而大部分情况下，调用失败都是因为偶发的网络问题或者个别服务提供者节点有问题导致的，如果能换个节点再次访问说不定就能成功。而且从概率论的角度来讲，假如一次服务调用失败的概率为1%，那么连续两次服务调用失败的概率就是0.01%，失败率降低到原来的1%。</p>\n<p>所以，在实际服务调用时，经常还要设置一个服务调用超时后的重试次数。假如某个服务调用的超时时间设置为100ms，重试次数设置为1，那么当服务调用超过100ms后，服务消费者就会立即发起第二次服务调用，而不会再等待第一次调用返回的结果了。</p>\n<h2>双发</h2>\n<p>正如我刚才讲的那样，假如一次调用不成功的概率为1%，那么连续两次调用都不成功的概率就是0.01%，根据这个推论，一个简单的提高服务调用成功率的办法就是每次服务消费者要发起服务调用的时候，都同时发起两次服务调用，一方面可以提高调用的成功率，另一方面两次服务调用哪个先返回就采用哪次的返回结果，平均响应时间也要比一次调用更快，这就是双发。</p>\n<p>但是这样的话，一次调用会给后端服务两倍的压力，所要消耗的资源也是加倍的，所以一般情况下，这种“鲁莽”的双发是不可取的。我这里讲一个更为聪明的双发，即“备份请求”（Backup Requests），它的大致思想是服务消费者发起一次服务调用后，在给定的时间内如果没有返回请求结果，那么服务消费者就立刻发起另一次服务调用。这里需要注意的是，这个设定的时间通常要比超时时间短得多，比如超时时间取的是P999，那么备份请求时间取的可能是P99或者P90，这是因为如果在P99或者P90的时间内调用还没有返回结果，那么大概率可以认为这次请求属于慢请求了，再次发起调用理论上返回要更快一些。</p>\n<p>在实际线上服务运行时，P999由于长尾请求时间较长的缘故，可能要远远大于P99和P90。在我经历的一个项目中，一个服务的P999是1s，而P99只有200ms、P90只有50ms，这样的话，如果备份请求时间取的是P90，那么第二次请求等待的时间只有50ms。不过这里需要注意的是，备份请求要设置一个最大重试比例，以避免在服务端出现问题的时，大部分请求响应时间都会超过P90的值，导致请求量几乎翻倍，给服务提供者造成更大的压力。我的经验是这个最大重试比例可以设置成15%，一方面能尽量体现备份请求的优势，另一方面不会给服务提供者额外增加太大的压力。</p>\n<h2>熔断</h2>\n<p>前面讲得一些手段在服务提供者偶发异常时会十分管用，但是假如服务提供者出现故障，短时间内无法恢复时，无论是超时重试还是双发不但不能提高服务调用的成功率，反而会因为重试给服务提供者带来更大的压力，从而加剧故障。</p>\n<p>针对这种情况，就需要服务消费者能够探测到服务提供者发生故障，并短时间内停止请求，给服务提供者故障恢复的时间，待服务提供者恢复后，再继续请求。这就好比一条电路，电流负载过高的话，保险丝就会熔断，以防止火灾的发生，所以这种手段就被叫作“熔断”。</p>\n<p>首先我们先来简单了解一下熔断的工作原理。</p>\n<p>简单来讲，熔断就是把客户端的每一次服务调用用断路器封装起来，通过断路器来监控每一次服务调用。如果某一段时间内，服务调用失败的次数达到一定阈值，那么断路器就会被触发，后续的服务调用就直接返回，也就不会再向服务提供者发起请求了。</p>\n<p>再来看下面这张图，熔断之后，一旦服务提供者恢复之后，服务调用如何恢复呢？这就牵扯到熔断中断路器的几种状态。</p>\n<ul>\n<li>\n<p>Closed状态：正常情况下，断路器是处于关闭状态的，偶发的调用失败也不影响。</p>\n</li>\n<li>\n<p>Open状态：当服务调用失败次数达到一定阈值时，断路器就会处于开启状态，后续的服务调用就直接返回，不会向服务提供者发起请求。</p>\n</li>\n<li>\n<p>Half Open状态：当断路器开启后，每隔一段时间，会进入半打开状态，这时候会向服务提供者发起探测调用，以确定服务提供者是否恢复正常。如果调用成功了，断路器就关闭；如果没有成功，断路器就继续保持开启状态，并等待下一个周期重新进入半打开状态。</p>\n</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/ca/8a/caf39c417373e0261da5717d1442958a.png?wh=450*406\" alt=\"\" /><br />\n（图片来源：<a href=\"https://martinfowler.com/bliki/images/circuitBreaker/state.png\">https://martinfowler.com/bliki/images/circuitBreaker/state.png</a>）</p>\n<p>关于断路器的实现，最经典也是使用最广泛的莫过于Netflix开源的Hystrix了，下面我来给你介绍下Hystrix是如何实现断路器的。</p>\n<p>Hystrix的断路器也包含三种状态：关闭、打开、半打开。Hystrix会把每一次服务调用都用HystrixCommand封装起来，它会实时记录每一次服务调用的状态，包括成功、失败、超时还是被线程拒绝。当一段时间内服务调用的失败率高于设定的阈值后，Hystrix的断路器就会进入进入打开状态，新的服务调用就会直接返回，不会向服务提供者发起调用。再等待设定的时间间隔后，Hystrix的断路器又会进入半打开状态，新的服务调用又可以重新发给服务提供者了；如果一段时间内服务调用的失败率依然高于设定的阈值的话，断路器会重新进入打开状态，否则的话，断路器会被重置为关闭状态。</p>\n<p>其中决定断路器是否打开的失败率阈值可以通过下面这个参数来设定：</p>\n<pre><code>HystrixCommandProperties.circuitBreakerErrorThresholdPercentage()\n</code></pre>\n<p>而决定断路器何时进入半打开的状态的时间间隔可以通过下面这个参数来设定：</p>\n<pre><code>HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds()\n</code></pre>\n<p>断路器实现的关键就在于如何计算一段时间内服务调用的失败率，那么Hystrix是如何做的呢？</p>\n<p>答案就是下图所示的滑动窗口算法，下面我来解释一下具体原理。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/ab/31/ab8715bb51480098449ffe5b44db9c31.png?wh=904*332\" alt=\"\" /><br />\n（图片来源：<a href=\"https://raw.githubusercontent.com/wiki/Netflix/Hystrix/images/circuit-breaker-1280.png\">https://raw.githubusercontent.com/wiki/Netflix/Hystrix/images/circuit-breaker-1280.png</a>）</p>\n<p>Hystrix通过滑动窗口来对数据进行统计，默认情况下，滑动窗口包含10个桶，每个桶时间宽度为1秒，每个桶内记录了这1秒内所有服务调用中成功的、失败的、超时的以及被线程拒绝的次数。当新的1秒到来时，滑动窗口就会往前滑动，丢弃掉最旧的1个桶，把最新1个桶包含进来。</p>\n<p>任意时刻，Hystrix都会取滑动窗口内所有服务调用的失败率作为断路器开关状态的判断依据，这10个桶内记录的所有失败的、超时的、被线程拒绝的调用次数之和除以总的调用次数就是滑动窗口内所有服务的调用的失败率。</p>\n<h2>总结</h2>\n<p>今天我给你讲解了微服务架构下服务调用失败的几种常见手段：超时、重试、双发以及熔断，实际使用时，具体选择哪种手段要根据具体业务情况来决定。</p>\n<p>根据我的经验，大部分的服务调用都需要设置超时时间以及重试次数，当然对于非幂等的也就是同一个服务调用重复多次返回结果不一样的来说，不可以重试，比如大部分上行请求都是非幂等的。至于双发，它是在重试基础上进行一定程度的优化，减少了超时等待的时间，对于长尾请求的场景十分有效。采用双发策略后，服务调用的P999能大幅减少，经过我的实践证明是提高服务调用成功率非常有效的手段。而熔断能很好地解决依赖服务故障引起的连锁反应，对于线上存在大规模服务调用的情况是必不可少的，尤其是对非关键路径的调用，也就是说即使调用失败也对最终结果影响不大的情况下，更加应该引入熔断。</p>\n<h2>思考题</h2>\n<p>Hystrix采用了线程池隔离的方式来实现不同的服务调用相互之间不影响，你认为这种方式的优缺点有哪些？</p>\n<p>欢迎你在留言区写下自己的思考，与我一起讨论。</p>\n<hr />\n<p><strong>拓展阅读：</strong></p>\n<p>关于熔断的解释：<a href=\"https://martinfowler.com/bliki/CircuitBreaker.html\">https://martinfowler.com/bliki/CircuitBreaker.html</a></p>\n<p>Hystrix的使用方法：<a href=\"https://github.com/Netflix/Hystrix/wiki/How-To-Use\">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p>\n<p></p>\n","neighbors":{"left":{"article_title":"20 | 服务端出现故障时该如何应对？","id":40908},"right":{"article_title":"22 | 如何管理服务配置？","id":41509}},"comments":[{"had_liked":false,"id":32292,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1539515160,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"121798599448","product_id":100014401,"comment_content":"（1）线程池隔离模式：使用一个线程池来存储当前的请求，线程池对请求作处理，设置任务返回处理超时时间，堆积的请求堆积入线程池队列。这种方式需要为每个依赖的服务申请线程池，有一定的资源消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）<br>（2）信号量隔离模式：使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，请求来先判断计数器的数值，若超过设置的最大线程个数则丢弃改类型的新请求，若不超过则执行计数操作请求来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，无法应对突发流量（流量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）","like_count":28},{"had_liked":false,"id":103956,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1560573065,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"65985082505","product_id":100014401,"comment_content":"不是很精彩呀😄<br>来个比喻：<br>张三喊李四一起出去玩<br>1：超时，喊一嗓子，等五分钟，不去就算啦<br>2：重试，喊一嗓子，不出来，就再喊一嗓子<br>3：双发，喊一嗓子，不出来，就喊王五<br>4：熔断，喊一嗓子，不出来，不喊了","like_count":15,"discussions":[{"author":{"id":2224894,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epzialibpA6iaiaSyicziawiciauBJUfqVicFp8NPXUZKwAic057no97ljkrwhAB42InR2Y94Fq6rVSy3fhCUMA/132","nickname":"Geek_7e139d","note":"","ucode":"F233E16D5479EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330730,"discussion_content":"对双发有些异议，是不是应该这样。\n鲁莽双发：直接喊了两嗓子，喉咙有点难受。但李四经常在张三喊第一声就听到了，人声嘈杂的时候一般能听到第二声\n备份双发：喊一嗓子，心理默念1秒不出来，就再喊一嗓子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606699047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1123011,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/c3/5c69ab81.jpg","nickname":"Lucky Dog","note":"","ucode":"C71C5D24200CCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2224894,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epzialibpA6iaiaSyicziawiciauBJUfqVicFp8NPXUZKwAic057no97ljkrwhAB42InR2Y94Fq6rVSy3fhCUMA/132","nickname":"Geek_7e139d","note":"","ucode":"F233E16D5479EA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341767,"discussion_content":"两种双发的差别貌似在于发起重试的超时时间和最大重试比例，\n鲁莽双发：喊一嗓子，默念1秒，再喊一嗓子，再默念1秒，。。。，直到达到重试次数，不喊了。\n备份双发：喊一嗓子，默念1秒，看下喊了没应的次数是否超过一定比例，如果超过，则不喊了，如果未超过，则再喊一嗓子，再默念1秒，。。。，直到达到重试次数或达到最大重试比例，不喊了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610518323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":330730,"ip_address":""},"score":341767,"extra":""}]},{"author":{"id":2224894,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epzialibpA6iaiaSyicziawiciauBJUfqVicFp8NPXUZKwAic057no97ljkrwhAB42InR2Y94Fq6rVSy3fhCUMA/132","nickname":"Geek_7e139d","note":"","ucode":"F233E16D5479EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330727,"discussion_content":"这个老师傅貌似还没有使用这种趣味的方式讲述","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606698570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31022,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1539070264,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"40193775928","product_id":100014401,"comment_content":"双发策略完全没想明白，当遇到慢请求的时候，你就算新发一个请求，也应该是大概率的慢请求，而且你并不能保证新请求的响应时间会比之前请求短。也就是双发请求大部分时间实际只是做了两次请求而已，这两次请求中有一次被浪费掉了。双发策略的意义到底在哪里呢，我看不出有实际可应用的场景","like_count":9,"discussions":[{"author":{"id":1136329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/56/c9/7b3cd3e0.jpg","nickname":"马振","note":"","ucode":"94234F533219C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277187,"discussion_content":"与直接熔断相比，增加调用成功的概率；与重试相比，成功的概率不变，以增加请求次数的代价加快结果的返回","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591014185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2847322,"avatar":"","nickname":"Geek_8c98ad","note":"","ucode":"6C52CD28C6053E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543810,"discussion_content":"双发的时候第一个请求并没有中断，两个请求谁先成功谁返回，另一个中断，我们一般叫对冲，不是重发的意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641305802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123011,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/c3/5c69ab81.jpg","nickname":"Lucky Dog","note":"","ucode":"C71C5D24200CCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341751,"discussion_content":"双发策略，主要使用场景是长尾请求，需要根据具体业务场景分析，慢请求具体慢在哪里，双发是否能提高调用成功率，结合备份请求和最大重试比例，做一个权衡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610512498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38845,"user_name":"feimeng0532","can_delete":false,"product_type":"c1","uid":1182786,"ip_address":"","ucode":"427B5C9D65C62A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/42/fbd028c2.jpg","comment_is_top":false,"comment_ctime":1542154226,"is_pvip":false,"replies":[{"id":"13965","content":"熔断可以理解为间歇性的降级，之后会探测服务是否恢复自动恢复降级，而降级一般指的是一次性的中断对服务的调用，需要人为再主动恢复降级","user_name":"作者回复","comment_id":38845,"uid":"1010144","ip_address":"","utype":1,"ctime":1542196493,"user_name_real":"古月中心相心"}],"discussion_count":2,"race_medal":0,"score":"31606925298","product_id":100014401,"comment_content":"服务熔断和降级区别？","like_count":7,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428828,"discussion_content":"熔断可以理解为间歇性的降级，之后会探测服务是否恢复自动恢复降级，而降级一般指的是一次性的中断对服务的调用，需要人为再主动恢复降级","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542196493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071771,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5a/9b/215cd2e0.jpg","nickname":"Rebby","note":"","ucode":"C2723F5FF14483","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396450,"discussion_content":"我倒觉得降级是熔断的补偿，比如说接口因为超时过高熔断了，我可以预设一些假数据。返回给用户，不至于返回异常。这就是降级！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632444348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31503,"user_name":"Douglas","can_delete":false,"product_type":"c1","uid":1073027,"ip_address":"","ucode":"CFDE3D76B9DAE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/83/bb728e53.jpg","comment_is_top":false,"comment_ctime":1539219754,"is_pvip":false,"replies":[{"id":"11320","content":"对，必须是幂等的调用才可以重试","user_name":"作者回复","comment_id":31503,"uid":"1010144","ip_address":"","utype":1,"ctime":1539223397,"user_name_real":"古月中心相心"}],"discussion_count":1,"race_medal":0,"score":"23014056234","product_id":100014401,"comment_content":"重试的前提是不是请求是幂等的？客户端还没拿到返回的情况下","like_count":5,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426377,"discussion_content":"对，必须是幂等的调用才可以重试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539223397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30915,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1539047165,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18718916349","product_id":100014401,"comment_content":"线程池隔离可以实现故障隔离，避免雪崩<br>但是由于由于线程频烦上下文切换，开销较大<br>","like_count":4},{"had_liked":false,"id":73229,"user_name":"滚键盘","can_delete":false,"product_type":"c1","uid":1351570,"ip_address":"","ucode":"F073E8FB8C83D2","user_header":"https://wx.qlogo.cn/mmopen/vi_32/tArJBBE5vlf1lZia78ZlNoeyJyXoppvXOFUtEsOqETfiamWsH51asUox1amKAOGeSjU3kwyNkKFrZTeoY2ibddJ0A/132","comment_is_top":false,"comment_ctime":1551843290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14436745178","product_id":100014401,"comment_content":"双发是减少因为网络I&#47;O 或者抖动引起的请求失败 降低本来所需要的等待重试时延","like_count":3},{"had_liked":false,"id":33750,"user_name":"楼下小黑哥","can_delete":false,"product_type":"c1","uid":1014680,"ip_address":"","ucode":"453B099B0EE52E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/98/8f1aecf4.jpg","comment_is_top":false,"comment_ctime":1539871418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14424773306","product_id":100014401,"comment_content":"优点：可以防止某个服务占满可以使用的线程，影响其他服务<br><br>缺点：如果运行线程特别多，线程上下文切换成本较高。","like_count":3},{"had_liked":false,"id":31306,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1539145990,"is_pvip":true,"replies":[{"id":"11330","content":"这里指的是每一种服务调用，如果提供了三个服务，每一种服务有各自的command对象和对应的线程池。","user_name":"作者回复","comment_id":31306,"uid":"1010144","ip_address":"","utype":1,"ctime":1539223748,"user_name_real":"古月中心相心"}],"discussion_count":1,"race_medal":0,"score":"14424047878","product_id":100014401,"comment_content":"hystrix会对每个服务请求都封装成一个hystrix command吗？如果是的话，服务请求量非常多的时候，会创建非常多的command对象吗？","like_count":3,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426285,"discussion_content":"这里指的是每一种服务调用，如果提供了三个服务，每一种服务有各自的command对象和对应的线程池。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539223748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30954,"user_name":"蔡呆呆","can_delete":false,"product_type":"c1","uid":1074818,"ip_address":"","ucode":"51EDDEFB274CB3","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/82/c2acd57e.jpg","comment_is_top":false,"comment_ctime":1539052308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10128986900","product_id":100014401,"comment_content":"线程池隔离也就是每个服务对应一个线程池，好处是各个服务隔离的很干净，不会相互影响。坏处在于对资源的需求量比较大，利用率会比较低。","like_count":2},{"had_liked":false,"id":30893,"user_name":"盘木","can_delete":false,"product_type":"c1","uid":1044248,"ip_address":"","ucode":"6ADBFFF670DBFF","user_header":"","comment_is_top":false,"comment_ctime":1539044924,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10128979516","product_id":100014401,"comment_content":"线程池隔离啥意思？","like_count":2,"discussions":[{"author":{"id":1123011,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/c3/5c69ab81.jpg","nickname":"Lucky Dog","note":"","ucode":"C71C5D24200CCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341768,"discussion_content":"若场景为A调用B，A调用C，则会有两个线程池分别管理A调用B和调用C的请求，实现A调B和A调C的请求隔离，避免相互影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610518586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622655,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/7f/7b22f12b.jpg","nickname":"乔","note":"","ucode":"1286F8742B4A01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297317,"discussion_content":"同问，什么是线程池隔离","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596873337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30884,"user_name":"echo＿陈","can_delete":false,"product_type":"c1","uid":1080794,"ip_address":"","ucode":"EFAEADA8A05906","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/da/780f149e.jpg","comment_is_top":false,"comment_ctime":1539041922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10128976514","product_id":100014401,"comment_content":"我们编写API网关时，使用了Hystrix，作为熔断实现，为了不使得ThreadLocal编程变得困难，使用了信号量隔离，直接复用工作线程。但是发现了问题，就是，如果使用信号量隔离，请求超时无法做到立即返回。","like_count":2},{"had_liked":false,"id":45238,"user_name":"刘炳乾","can_delete":false,"product_type":"c1","uid":1087023,"ip_address":"","ucode":"D30EA89FD53DB2","user_header":"https://static001.geekbang.org/account/avatar/00/10/96/2f/4ec7607e.jpg","comment_is_top":false,"comment_ctime":1543564858,"is_pvip":false,"replies":[{"id":"18051","content":"目前功能足够稳定了吧，如果需要持续更新，可以关注下netflix用于替代hystrix的框架resillience4j","user_name":"作者回复","comment_id":45238,"uid":"1010144","ip_address":"","utype":1,"ctime":1544944368,"user_name_real":"古月中心相心"}],"discussion_count":1,"race_medal":0,"score":"5838532154","product_id":100014401,"comment_content":"Hystrix已经不再更新了，有其他比较优秀替代框架么？","like_count":1,"discussions":[{"author":{"id":1010144,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/69/e0/ff8ee2e2.jpg","nickname":"胡忠想","note":"","ucode":"0792605FC265B4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430964,"discussion_content":"目前功能足够稳定了吧，如果需要持续更新，可以关注下netflix用于替代hystrix的框架resillience4j","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544944368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31458,"user_name":"莲花","can_delete":false,"product_type":"c1","uid":1220494,"ip_address":"","ucode":"3260F7DA59332D","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/8e/45ffff8f.jpg","comment_is_top":false,"comment_ctime":1539184972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834152268","product_id":100014401,"comment_content":"dubbo中怎么判断服务调用成功或超时了？<br>","like_count":1},{"had_liked":false,"id":30916,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1539047460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834014756","product_id":100014401,"comment_content":"线程池隔离可以确保不同接口的问题不相互影响，但是会增加应用的线程数量，即资源消耗会增加","like_count":1},{"had_liked":false,"id":357619,"user_name":"王维","can_delete":false,"product_type":"c1","uid":1091684,"ip_address":"湖南","ucode":"836E6CDB1A56BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/64/965e0d9b.jpg","comment_is_top":false,"comment_ctime":1663493167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663493167","product_id":100014401,"comment_content":"envoy用做熔断circuit-breaking","like_count":0},{"had_liked":false,"id":315066,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1633678356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633678356","product_id":100014401,"comment_content":"由于服务提供者本身出现问题或者服务提供者和服务消费者之间的网络出现问题，都会导致服务调用失败。<br><br>服务提供者本身出现问题一般是由于自身计算资源被沾满，导致没有余力处理更多请求。这时候，服务消费者可以采取“超时重试”的策略，也可以采取“双发”的策略。<br><br>如果服务提供者已经无法提供服务了，这时候就需要采取“熔断”策略，熔断策略的实现需要断路器，具体是收集一段时间内的请求数据进行统计，如果异常概率超过阀值，断路器会进入打开状态，直接返回。然后等待设定的时间间隔后，又会进入半打开状态，新的服务调用就可以重新发给服务提供者了。如果一段时间内服务调用的失败率依然高于设定的阈值的话，断路器会重新进入打开状态，否则的话，断路器会被重置为关闭状态。","like_count":0},{"had_liked":false,"id":139076,"user_name":"白晨","can_delete":false,"product_type":"c1","uid":1272026,"ip_address":"","ucode":"6D6171B8ECEDDD","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/da/5bcb83b1.jpg","comment_is_top":false,"comment_ctime":1570541946,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1570541946","product_id":100014401,"comment_content":"P999是啥意思","like_count":0,"discussions":[{"author":{"id":1438037,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/55/8ac4f169.jpg","nickname":"陈国林","note":"","ucode":"83D12F3E79F197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212811,"discussion_content":"99.9%的请求耗时时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585019717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/49/ef/02401473.jpg","nickname":"月迷津渡","note":"","ucode":"2B18B2FE3DAC3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107733,"discussion_content":"99.9%的最快请求用时阈值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577603249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86701,"user_name":"张小男","can_delete":false,"product_type":"c1","uid":1207296,"ip_address":"","ucode":"1C4198B30EA5EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/00/de0e5800.jpg","comment_is_top":false,"comment_ctime":1555427816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555427816","product_id":100014401,"comment_content":"“聪明的双发”这个思路太神奇了啊！<br>我们的服务就是不知道什么原因导致服务超时，还有这种连续5秒没有日志的情况，正常每秒都要上千行的日志，感觉是cpu不工作了…<br>我们平均响应也就几十毫秒，超时设置的500毫秒！但是只能达到99.88左右，qps 2000<br>问下motan可以设置重试超时时间吗？","like_count":0},{"had_liked":false,"id":30943,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1539050913,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1539050913","product_id":100014401,"comment_content":"“P999 由于长尾请求时间较长的缘故“ 这句话没看明白，可以解释下吗？","like_count":0,"discussions":[{"author":{"id":1177289,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/c9/4da2a82a.jpg","nickname":"黄大仙","note":"","ucode":"337B6E811CF47D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3074,"discussion_content":"比如99%的请求都是100ms，0.9%的请求是100s，99.9%（P999）请求时间变长了，这个0.9%就是所谓的长尾请求时间较长","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564147256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}