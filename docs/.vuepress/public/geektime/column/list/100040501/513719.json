{"id":513719,"title":"36｜访问对象的代理对象：视图类型","content":"<p>你好，我是吴咏炜。</p><p>前面我们用连续五讲讨论了内存相关的很多问题，这是因为在 C++ 里，开发人员需要认真考虑对象的生命周期，包括对其内存进行管理。我们需要保证对象使用的内存，不会在对象还在使用时就会被释放。在其他一些语言里，或者使用跟踪垃圾收集，或者使用引用计数，可以自动化这一过程。C++ 理论上来讲也可以这样做，如到处使用 <code>shared_ptr</code>，但这样的话，程序的执行性能就会受到影响。我们之所以有这么多灵活的机制来控制内存的使用，就是为了让程序员对内存的分配和释放有最大的控制权，在需要的场合下得到最高的效率。付出的代价当然就是语言的复杂性了。</p><p>但我们还有另外一类问题，我们在使用一个对象时，明确知道这个对象在使用过程中一直存在，它的生命周期一定会超出我们的使用时间。在这种情况下，如果我们要使用这个对象，或者这个对象的一部分，就没有必要进行内存分配和对象创建、复制、销毁了。按引用或指针来访问这类对象是一种可能性，但通过一个代理对象来访问底层数据往往更加灵活和方便，并可以提供接口上的一致性。这类代理对象我们通常以值的方式进行传参和返回，非常简单、也非常高效。<code>string_view</code> 就是这样的一种对象类型。</p><!-- [[[read_end]]] --><h2>string_view</h2><p><code>string_view</code> 是 C++17 引入的一种新类型，它提供了非常方便的传递字符串（或其中一部分）的方式 <span class=\"orange\">[1]</span>。我们先来看看它的基本用法。</p><h3>示例</h3><p>下面是一个非常简单的使用 <code>string_view</code> 的例子：</p><pre><code class=\"language-cpp\">string greet(string_view name)\n{\n  string result(\"Hi, \");\n  result += name;\n  result += '!';\n  return result;\n}\n</code></pre><p>这个 <code>greet</code> 函数接受一个 <code>string_view</code>，然后生成一个字符串返回。显然，我们可以传递一个 <code>string_view</code> 对象给这个函数，但更重要的是，我们可以传递其他更常用的字符串类对象，包括字符串字面量和 <code>string</code>。</p><p>这样是可以的：</p><pre><code class=\"language-cpp\">auto greeting = greet(\"C++\");\n</code></pre><p>这样也是可以的：</p><pre><code class=\"language-cpp\">string name;\ngetline(cin, name);\nauto greeting = greet(name);\n</code></pre><h3>原理</h3><p>我们可以这样做的原因，是因为 <code>string_view</code> 可以通过（常）字符指针来构造，而 <code>string</code> 也能自动转换成 <code>string_view</code>。究其本质，<code>string_view</code> 只保存两样东西：</p><ul>\n<li>一个 <code>const char*</code>，指向字符串的开头</li>\n<li>一个 <code>size_t</code>，表示字符串的长度</li>\n</ul><p>换句话说，<code>string_view</code> 是一个字符串的视图，不保存字符串，而只保存字符串的指针和长度。使用者需要确保在使用 <code>string_view</code> 的时候，底层的字符串一直存在。</p><p>想要构造一个 <code>string_view</code>，你可以提供一个指针加一个长度。不过，更常见的用法，仍然是通过字符串字面量来构造 <code>string_view</code>，及把 <code>string</code> 自动转换成 <code>string_view</code>。</p><p>这里顺便提一下<a href=\"https://time.geekbang.org/column/article/169268\">第 3 讲</a>里说过的字符串字面量是左值的原因。对于一个字符串字面量，编译器实际上是会默认生成一个静态的字符串对象的，即上面的前一种写法基本等效于：</p><pre><code class=\"language-cpp\">static const char _str1[] = \"C++\";\nauto greeting = greet(_str1);\n</code></pre><p>无论使用上面的前一种写法（使用字符串字面量作为实参）还是后一种写法（使用 <code>string</code> 作为实参），显然，在 <code>greet</code> 函数的运行期间，我们都完全不需要担心字符串的生命周期。</p><h3>生命周期问题</h3><p>反过来，当然我们也会有一些可能出问题的场合。比如，下面这种写法就是有问题的：</p><pre><code class=\"language-cpp\">string_view name = \"C++\"s;\n</code></pre><p>估计这种代码一般不会有人写，但这个代码在语法上是完全合法的。它的意思是从一个临时 <code>string</code> 对象来生成一个 <code>string_view</code>，而问题在于，在这行语句执行结束时，临时 <code>string</code> 对象就已经不存在。因此 <code>string_view</code> 对象会指向已经被销毁的字符串对象，导致未定义行为。你后面再去使用 <code>name</code> 的话，会发现它有时有你期望的内容，有时则是乱码，有时甚至可能导致程序崩溃。遗憾的是，目前（2022 年）的主流 C++ 编译器里，只有 Clang 会对这样的代码进行告警。</p><p>另外一种可能的出错场景是把 <code>string_view</code> 存下来或返回。在 <code>greet</code> 的执行期间，正常的代码没有任何理由会修改底层字符串或发生生命周期问题；即使我们用类似上面错误的方式写 <code>greet(\"C++\"s)</code>，代码仍然是完全合法的，因为临时字符串对象的析构动作会发生在 <code>greet</code> 函数返回之后。但如果这个函数把 <code>string_view</code> 存下来或返回，则又是另外一个故事——类似于上面的错误就又可能发生了。</p><h3>string_view 的好处</h3><p>你可能会想，既然有生命周期的陷阱，那我们为什么要使用 <code>string_view</code> 呢？</p><p>因为好处也是很大的。我们可以检查一下上面这个函数的替换接口形式：</p><ol>\n<li>我们可以使用 <code>greet(const string&amp;)</code> 这样的按引用传参方式。这样的参数形式对 <code>string</code> 实参当然很友好，但对于字符串字面量就不友好了。虽然使用字符串字面量看起完全自动很正常，但编译器产生的代码是相当无聊和低效的：它会生成一个临时 <code>string</code> 对象，把字符串字面量中的内容全部复制进去，然后拿这个临时对象去调用 <code>greet</code> 函数，并在函数返回之后销毁这个临时的 <code>string</code> 对象。</li>\n<li>我们可以使用 <code>greet(const char*)</code> 这样的传统接口。这样的参数形式对字符串字面量实参很友好，但对 <code>string</code> 对象来讲，就不方便了——我们会需要使用 <code>s.c_str()</code> 这样的形式来传参。还有，如果这个字符串很长，获取字符串的长度也会是一个低效的 O(n) 操作。此外，我们也没法直接使用 <code>string</code> 类提供的方便方法了，如 <code>find</code>、<code>substr</code> 等。</li>\n</ol><p>如果我们把形参替换成 <code>string_view</code> 的话：</p><ol>\n<li>当我们传递的实参为 <code>string</code> 时，<code>string</code> 会使用内部指针和长度高效地生成 <code>string_view</code> 对象。</li>\n<li>当我们传递的实参可退化为 <code>const char*</code> 时，那编译器会自动获取这个字符串的长度（通过调用 <code>char_traits&lt;char&gt;::length(s)</code>）。这里又可以细分为两种情况：字符串内容在编译时确定（即字符串字面量），及字符串内容在编译时不确定。当字符串内容在编译时可确定时，<code>string_view</code> 具有最大的优势：不仅我们没有任何额外的开销，而且目前的主流优化编译器都可以在编译时算出字符串的长度，因而可以产生最高效的代码。否则，<code>string_view</code> 会在代码执行时去动态获取字符串的长度，在你后续需要字符串长度时也非常合适，不算额外开销。</li>\n</ol><p>此外，虽然 <code>string_view</code> 不是 <code>string</code>，它的成员函数跟 <code>string</code> 还是非常相似的。我们同样有 <code>data</code>、<code>size</code>、<code>begin</code>、<code>end</code>、<code>find</code> 等方法。它跟 <code>string</code> 最为显著的不同点是：</p><ul>\n<li>你不能修改字符串的内容。<code>data</code> 成员函数返回的是 <code>const char*</code>，而不像 <code>string</code> 的 <code>data</code> 成员函数从 C++17 开始可以返回 <code>char*</code>，允许程序员直接通过指针修改底层的字符串（当然，不允许超过尾部）。</li>\n<li>没有 <code>c_str</code> 成员函数。从语义上说，<code>string</code> 的 <code>data</code> 成员函数只是返回指针，在 C++11 之前甚至不保证字符串会零结尾；而只有 <code>c_str</code> 是从 C++98 开始就一直保证返回的字符串是零结尾的。<code>string_view</code> 的 <code>data</code> 成员函数返回的字符串又不保证零结尾了，即使我们构造 <code>string_view</code> 使用的字符串是零结尾的——因为只有这样，我们才能高效地取出 <code>string_view</code> 的一部分，形成一个新的 <code>string_view</code> 对象。这也意味着，我们在需要把字符串指针传到期待零结尾字符串的 C 函数接口里去时，使用 <code>string_view</code> 是不合适的。</li>\n<li><code>substr</code> 成员函数返回的是一个新的 <code>string_view</code>，而非 <code>string</code>。产生新的指针和长度只是简单的加减运算，当然也就很高效，但别忘了，刚说过的，产生的结果可能不是零结尾，即使原始的 <code>string_view</code> 是零结尾。</li>\n<li>我们额外有成员函数 <code>remove_prefix</code> 和 <code>remove_suffix</code>，可以修改当前 <code>string_view</code> 对象（但不会动底下的字符串）。<code>remove_prefix</code> 去掉开头的若干字符，因而如果 <code>string_view</code> 原先是零结尾的话，现在仍然是零结尾；<code>remove_suffix</code> 去掉结尾的若干字符，显然，即使 <code>string_view</code> 原先是零结尾的，在这个操作之后就不再是零结尾的了。</li>\n</ul><p>最后，强调一点，我上面一直在讲 <code>string_view</code>，那主要是因为对于不开发 Windows 应用的人来说，<code>string_view</code> 一般就已经够用了。实际上，<code>string_view</code> 跟 <code>string</code> 一样，是一个类型别名：<code>std::string_view</code> 相当于 <code>std::basic_string_view&lt;char&gt;</code>。我们是可以使用其他字符类型去特化 <code>basic_string_view</code> 的，系统也已经帮我们定义了相应的别名，如 <code>wstring_view</code>、<code>u32string_view</code> 等等。你可以根据自己的需要进行选用。</p><h2>span</h2><p>C++20 引入的 <code>span</code> 是另外一个非常有用的视图类型 <span class=\"orange\">[2]</span>。如果你想在 C++14/17 的环境里使用 <code>span</code> 的话，则可以使用微软 GSL 库中定义的 <code>gsl::span</code> <span class=\"orange\">[3]</span>。除了名空间的不同（<code>std</code> 还是 <code>gsl</code>），它们目前行为基本一致，除了一点：<code>gsl::span</code> 会做越界检查，因而更安全，但也可能因此带来一些性能问题。我们后面会再来讨论这一点。</p><h3>示例</h3><p>同样，我们先通过一些例子来对 <code>span</code> 有一些直观的了解。</p><p>假设我们有一个通用的打印整数序列的函数：</p><pre><code class=\"language-cpp\">void print(span&lt;int&gt; sp)\n{\n  for (int n : sp) {\n    cout &lt;&lt; n &lt;&lt; ' ';\n  }\n  cout &lt;&lt; '\\n';\n}\n</code></pre><p>我们可以使用各种各样提供连续存储的整数“容器”作为实参传给 <code>print</code> 函数。比如，下面这些变量都是可以传递给 <code>print</code> 的：</p><pre><code class=\"language-cpp\">array a{1, 2, 3, 4, 5};\nint b[]{1, 2, 3, 4, 5};\nvector v{1, 2, 3, 4, 5};\n</code></pre><p>而不提供连续存储的容器则不能这么用，如：</p><pre><code class=\"language-cpp\">list lst{1, 2, 3, 4, 5};\n</code></pre><p>但是，如果你认为 <code>span&lt;char&gt;</code> 和 <code>string_view</code> 有对应关系的话，那就错了。最核心的区别在于，<code>span&lt;char&gt;</code> 会允许你更改底层的数据，而 <code>string_view</code> 不允许。刨除接口上的区别，<code>span&lt;const char&gt;</code> 跟 <code>string_view</code> 有相似之处。我上面给出的 <code>print</code> 实际是 const 不正确的，你如果有一个容器的 const 引用的话，将无法使用 <code>print</code> 函数来打印。</p><p>正确的 <code>print</code> 版本和另外一个修改容器内容的 <code>increase</code> 函数如下所示：</p><pre><code class=\"language-cpp\">void print(span&lt;const int&gt; sp)\n{\n  for (int n : sp) {\n    cout &lt;&lt; n &lt;&lt; ' ';\n  }\n  cout &lt;&lt; '\\n';\n}\n\nvoid increase(span&lt;int&gt; sp,\n              int value = 1)\n{\n  for (int&amp; n : sp) {\n    n += value;\n  }\n}\n</code></pre><p>如果我们调用 <code>increase(a)</code> 的话，<code>a</code> 的内容就会变为 <code>{2, 3, 4, 5, 6}</code>。</p><h3>一些技术细节</h3><p>我们可以直接使用指针加长度来构造 <code>span</code>，我们也可以用连续存储的序列范围作为参数来构造 <code>span</code>（GSL 和 C++20 使用了不同的方法来限制容器类型，但结果仍是基本一致的），一般有：</p><ul>\n<li>C 风格数组</li>\n<li><code>array</code></li>\n<li><code>vector</code></li>\n<li>其他 <code>span</code></li>\n</ul><p>跟连续存储的序列容器（如 <code>vector</code>）及 <code>string_view</code> 一样，<code>span</code> 具有一些标准的 STL 成员函数，如：</p><ul>\n<li><code>begin</code></li>\n<li><code>end</code></li>\n<li><code>front</code></li>\n<li><code>back</code></li>\n<li><code>size</code></li>\n<li><code>empty</code></li>\n<li><code>data</code></li>\n<li><code>operator[]</code></li>\n<li>……</li>\n</ul><p><code>span</code> 也有一些自己特有的成员函数：</p><ul>\n<li><code>size_bytes</code>：字节数来计算的序列大小（而非元素数）</li>\n<li><code>first</code>：开头若干项组成的新 <code>span</code>（注意这和 <code>string_view::remove_prefix</code> 和 <code>string_view::remove_suffix</code> 代码风格不同，不修改自身）</li>\n<li><code>last</code>：结尾若干项组成的新 <code>span</code>（注意这和 <code>string_view::remove_prefix</code> 和 <code>string_view::remove_suffix</code> 代码风格不同，不修改自身）</li>\n<li><code>subspan</code>：根据给定的偏移量和长度组成的新 <code>span</code>（这和 <code>string_view::substr</code> 就比较类似了）</li>\n</ul><p><code>span</code> 还有一个特点，它的长度可以是编译期确定的。它有第二个模板参数 <code>extent</code>，默认值是 <code>dynamic_extent</code>，代表动态的长度，这种方式较为常用和灵活。但如果你的 <code>span</code> 可以在编译期确定长度的话，你也完全可以利用这一特性来对代码进行进一步的优化。事实上，对于数组和 <code>array</code> 的情况，如果你不指定模板参数的话，默认推导就会得出一个编译期固定的长度。</p><p>比如，对于我们前面定义的变量 <code>a</code>，我们使用 <code>span sp{a};</code> 这样的声明会产生的实际类型不是 <code>span&lt;int, dynamic_extent&gt;</code>，而是 <code>span&lt;int, 5&gt;</code>。由于长度编码在类型里，长度不占用内存空间，因而它比 <code>span&lt;int&gt;</code> 一般要少占用一半内存（虽然这通常不重要）。同时，动态长度的 <code>span</code> 能通过静态长度的 <code>span</code> 构造出来，因此把这个静态长度的 <code>sp</code> 传给 <code>print</code> 函数也没有问题。</p><p>最后，再重复一遍，<code>span</code> 本质上就是指针加长度的一个语法糖，程序员必须保证在使用 <code>span</code> 时，底层的数据一直合法地存在，否则会导致未定义行为。我曾经见过一个很隐晦的 bug，本质上代码差不多是下面这个样子（<code>Data</code> 是某个结构体）：</p><pre><code class=\"language-cpp\">span&lt;Data&gt; sp;\n…\nif (…) {\n  vector&lt;Data&gt; v = …;\n  sp = v;\n}\nDoSomething(sp);\n</code></pre><p>这就是一个典型的释放后使用。麻烦的是，在单线程的情况下，代码运行通常不会出错，你很难发现里面的问题。问题通常在多线程环境才会暴露出来：有其他线程正好分配到了被释放的内存，并在 <code>DoSomething</code> 执行完之前往里写入了其他内容。这显然不是一个可以非常容易复现的问题，你可以想象一下测试人员在抓这个虫子的时候有多么的苦恼……</p><h3>gsl::span 的性能问题</h3><p>前面我提到过，<code>gsl::span</code> 会做越界检查，更安全，但也因此可能带来一些性能问题。最典型的情况就是把一个 <code>span</code> 的内容复制到另一个 <code>span</code> 里去，如：</p><pre><code class=\"language-cpp\">std::copy(sp1.begin(),\n          sp1.end(),\n          sp2.begin());\n</code></pre><p>目前测试下来，除了 MSVC 标准库的 <code>copy</code> 实现对 <code>span</code> 有特殊的处理逻辑，其他环境都会因为每拷贝一个元素都要执行越界检查而导致巨大的性能损失。当然，取决于具体的编译器，产生的影响也各不相同。在最坏的情况下，我看到过使用 <code>gsl::span</code> 要比使用 <code>std::span</code> 性能劣化几十倍！</p><p>所幸，这个问题有一个非常简单的解决方法，使用 <code>gsl::copy</code> 即可：</p><pre><code class=\"language-cpp\">gsl::copy(sp1, sp2);\n</code></pre><p>这个写法简单、有边界检查，也没有额外的开销，看一下 <code>gsl::copy</code> 的源代码，你就知道它是先检查边界，再使用指针和长度进行拷贝：</p><pre><code class=\"language-cpp\">Expects(dest.size() &gt;= src.size());\nstd::copy_n(src.data(), src.size(), dest.data());\n</code></pre><p>有兴趣的话，你可以拿我放在<a href=\"https://github.com/adah1972/geek_time_cpp\">代码库</a>的测试程序来自行测试一下。</p><h2>视图类型</h2><p>通过以上两个例子，我想你基本已经知道视图类型是怎么回事了。一般而言，视图类型：</p><ul>\n<li>是个小对象，可以在常数时间拷贝、移动或赋值</li>\n<li>一般以传值方式来使用（除非你想修改视图本身，如将其缩小）</li>\n<li>跟容器一样支持遍历操作</li>\n<li>不持有数据，使用者需要保证在视图存续期间其指向的数据一直存在（不过，像 <code>shared_ptr</code> 一样通过引用计数来持有底层对象在实现上也是允许的）</li>\n</ul><p>到 C++17 为止，<strong>视图</strong>还不是一个语言层面能真正表达的概念。而到了 C++20，我们就真正有了 <code>view</code> 这个概念，来支持对视图的表达 <span class=\"orange\">[4]</span>。</p><p>不过，从实用的角度，程序员更高兴的应该是 C++20 范围库里提供的各种有用的视图了 <span class=\"orange\">[5]</span>。我在<a href=\"https://time.geekbang.org/column/article/195553\">第 29 讲</a>里介绍过一些，今天我再讲一个 <code>elements_view</code> 作为例子 <span class=\"orange\">[6]</span>。</p><p>对于一个有类 <code>tuple</code> 元素类型的容器（包括 <code>map</code>、<code>unordered_map</code>、<code>vector&lt;tuple&lt;…&gt;&gt;</code> 等），<code>elements_view</code> 的作用是形成所有元素中的某一项的视图。特别地，取第 0 项的也被称为 <code>keys_view</code>（<code>keys_view&lt;R&gt;</code> 相当于 <code>elements_view&lt;R, 0&gt;</code>），取第 1 项的也被称为 <code>values_view</code>（<code>values_view&lt;R&gt;</code> 相当于 <code>elements_view&lt;R, 1&gt;</code>）。这就使得我们访问一个 <code>map</code> 中的所有“键”（keys）或所有“值”（values）变得非常方便。</p><p>比如，如果使用我之前介绍的 output_container 的“升级”版本 output_range <span class=\"orange\">[7]</span>，我们可以用下面的代码来输出 <code>map</code> 中的第二项：</p><pre><code class=\"language-cpp\">map&lt;int, string&gt; mp{{1, \"one\"},\n                    {2, \"two\"},\n                    {3, \"three\"}};\nauto vv = mp | views::values;\ncout &lt;&lt; vv &lt;&lt; endl;\n</code></pre><p><code>vv</code> 就是一个 <code>mp</code> 里所有“值”的视图，它的实际类型相当复杂，你不会想手工把它写出来的——这点上，范围库里的视图跟我们前面介绍的 <code>string_view</code> 和 <code>span</code> 不同。不过，你仍然可以用 <code>auto</code> 来对它进行接收和复制，这些都是非常轻量的操作。程序实际产生的输出为：</p><blockquote>\n<p><code>{ one, two, three }</code></p>\n</blockquote><h2>内容小结</h2><p>本讲我们介绍了几个有用的视图类型。使用它们，你可以简化代码、统一函数的接口，同时保持程序的高效执行。这些类型的对象可以高效返回和复制，你唯一需要考虑的，就是保证视图里面实际指向的对象在视图的使用期间仍然一直存在。</p><h2>课后思考</h2><p>在很多使用视图类型的场景下（如 <code>print</code> 和 <code>increase</code>），我们可以使用一个函数模板来代替，把参数从 <code>span&lt;int&gt;</code> 变成类型模板参数（<code>const T&amp;</code> 和 <code>T&amp;</code>）即可。请你想一想，两种方式各有什么优缺点？</p><p>你能不能利用迭代器（参考<a href=\"https://time.geekbang.org/column/article/176842\">第 7 讲</a>）和模板，在 C++17 下自行实现出一个 <code>elements_view</code>？这会是一个不错的小练习。</p><p>最后，别忘了<a href=\"https://github.com/adah1972/geek_time_cpp\">代码库</a>里有示例代码可供运行和参考。如有任何问题，欢迎留言和我讨论。</p><h2><span class=\"reference\">参考资料</span></h2><p><span class=\"reference\">[1] cppreference.com, “std::basic_string_view”. <a href=\"https://en.cppreference.com/w/cpp/string/basic_string_view\">https://en.cppreference.com/w/cpp/string/basic_string_view</a></span></p><p><span class=\"reference\">[1a] cppreference.com, “std::basic_string_view”. <a href=\"https://zh.cppreference.com/w/cpp/string/basic_string_view\">https://zh.cppreference.com/w/cpp/string/basic_string_view</a></span></p><p><span class=\"reference\">[2] cppreference.com, “std::span”. <a href=\"https://en.cppreference.com/w/cpp/container/span\">https://en.cppreference.com/w/cpp/container/span</a></span></p><p><span class=\"reference\">[2a] cppreference.com, “std::span”. <a href=\"https://zh.cppreference.com/w/cpp/container/span\">https://zh.cppreference.com/w/cpp/container/span</a></span></p><p><span class=\"reference\">[3] Microsoft, “GSL”. <a href=\"https://github.com/microsoft/GSL\">https://github.com/microsoft/GSL</a></span></p><p><span class=\"reference\">[4] cppreference.com, “std::ranges::view”. <a href=\"https://en.cppreference.com/w/cpp/ranges/view\">https://en.cppreference.com/w/cpp/ranges/view</a></span></p><p><span class=\"reference\">[4a] cppreference.com, “std::ranges::view”. <a href=\"https://zh.cppreference.com/w/cpp/ranges/view\">https://zh.cppreference.com/w/cpp/ranges/view</a></span></p><p><span class=\"reference\">[5] cppreference.com, “Ranges library”. <a href=\"https://en.cppreference.com/w/cpp/ranges\">https://en.cppreference.com/w/cpp/ranges</a></span></p><p><span class=\"reference\">[5a] cppreference.com, “范围库”. <a href=\"https://zh.cppreference.com/w/cpp/ranges\">https://zh.cppreference.com/w/cpp/ranges</a></span></p><p><span class=\"reference\">[6] cppreference.com, “std::ranges::elements_view”. <a href=\"https://en.cppreference.com/w/cpp/ranges/elements_view\">https://en.cppreference.com/w/cpp/ranges/elements_view</a></span></p><p><span class=\"reference\">[6a] cppreference.com, “std::ranges::elements_view”. <a href=\"https://zh.cppreference.com/w/cpp/ranges/elements_view\">https://zh.cppreference.com/w/cpp/ranges/elements_view</a></span></p><p><span class=\"reference\">[7] 吴咏炜, output_range. <a href=\"https://github.com/adah1972/output_range\">https://github.com/adah1972/output_range</a></span></p>","neighbors":{"left":{"article_title":"35 | 发现和识别内存问题：内存调试实践","id":508706},"right":{"article_title":"37｜参数传递的正确方法和模板的二进制膨胀","id":517514}},"comments":[]}