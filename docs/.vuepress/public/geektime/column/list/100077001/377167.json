{"id":377167,"title":"14 | Spring Web 过滤器使用常见错误（下）","content":"<p>你好，我是傅健。</p><p>通过上节课的两个案例，我们了解了容器运行时过滤器的工作原理，那么这节课我们还是通过两个错误案例，来学习下容器启动时过滤器初始化以及排序注册等相关逻辑。了解了它们，你会对如何使用好过滤器更有信心。下面，我们具体来看一下。</p><h2>案例1：@WebFilter过滤器使用@Order无效</h2><p>假设我们还是基于Spring Boot去开发上节课的学籍管理系统，这里我们简单复习下上节课用到的代码。</p><p>首先，创建启动程序的代码如下：</p><pre><code>@SpringBootApplication\n@ServletComponentScan\n@Slf4j\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n        log.info(&quot;启动成功&quot;);\n    }\n}\n</code></pre><p>实现的Controller代码如下：</p><pre><code>@Controller\n@Slf4j\npublic class StudentController {\n    @PostMapping(&quot;/regStudent/{name)}&quot;)\n    @ResponseBody\n    public String saveUser(String name) throws Exception {\n        System.out.println(&quot;......用户注册成功&quot;);\n        return &quot;success&quot;;\n    }\n}\n</code></pre><p>上述代码提供了一个 Restful 接口 \"/regStudent\"。该接口只有一个参数 name，注册成功会返回\"success\"。</p><p>现在，我们来实现两个新的过滤器，代码如下：</p><p>AuthFilter：例如，限制特定IP地址段（例如校园网内）的用户方可注册为新用户，当然这里我们仅仅Sleep 1秒来模拟这个过程。</p><pre><code>@WebFilter\n@Slf4j\n@Order(2)\npublic class AuthFilter implements Filter {\n    @SneakyThrows\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n        if(isPassAuth()){\n            System.out.println(&quot;通过授权&quot;);\n            chain.doFilter(request, response);\n        }else{\n            System.out.println(&quot;未通过授权&quot;);\n            ((HttpServletResponse)response).sendError(401);\n        }\n    }\n    private boolean isPassAuth() throws InterruptedException {\n        System.out.println(&quot;执行检查权限&quot;);\n        Thread.sleep(1000);\n        return true;\n    }\n}\n</code></pre><p>TimeCostFilter：计算注册学生的执行耗时，需要包括授权过程。</p><pre><code>@WebFilter\n@Slf4j\n@Order(1)\npublic class TimeCostFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(&quot;#开始计算接口耗时&quot;);\n        long start = System.currentTimeMillis();\n        chain.doFilter(request, response);\n        long end = System.currentTimeMillis();\n        long time = end - start;\n        System.out.println(&quot;#执行时间(ms)：&quot; + time);\n    }\n}\n</code></pre><p>在上述代码中，我们使用了@Order，期望TimeCostFilter先被执行，因为TimeCostFilter设计的初衷是统计这个接口的性能，所以是需要统计AuthFilter执行的授权过程的。</p><!-- [[[read_end]]] --><p>全部代码实现完毕，执行结果如下：</p><pre><code>执行检查权限\n通过授权\n#开始计算接口耗时\n......用户注册成功\n#执行时间(ms)：33\n</code></pre><p>从结果来看，执行时间并不包含授权过程，所以这并不符合我们的预期，毕竟我们是加了@Order的。但是如果我们交换Order指定的值，你会发现也不见效果，为什么会如此？难道Order不能用来排序WebFilter么？下面我们来具体解析下这个问题及其背后的原理。</p><h3>案例解析</h3><p>通过上节课的学习，我们得知：当一个请求来临时，会执行到 StandardWrapperValve 的 invoke()，这个方法会创建 ApplicationFilterChain，并通过ApplicationFilterChain#doFilter() 触发过滤器执行，并最终执行到内部私有方法internalDoFilter()， 我们可以尝试在internalDoFilter()中寻找一些启示：</p><pre><code>private void internalDoFilter(ServletRequest request,\n                              ServletResponse response)\n    throws IOException, ServletException {\n\n    // Call the next filter if there is one\n    if (pos &lt; n) {\n        ApplicationFilterConfig filterConfig = filters[pos++];\n        try {\n            Filter filter = filterConfig.getFilter();\n</code></pre><p>从上述代码我们得知：过滤器的执行顺序是由类成员变量Filters决定的，而Filters变量则是createFilterChain()在容器启动时顺序遍历StandardContext中的成员变量FilterMaps获得的：</p><pre><code>public static ApplicationFilterChain createFilterChain(ServletRequest request,\n        Wrapper wrapper, Servlet servlet) {\n\n    // 省略非关键代码\n    // Acquire the filter mappings for this Context\n    StandardContext context = (StandardContext) wrapper.getParent();\n    FilterMap filterMaps[] = context.findFilterMaps();\n    // 省略非关键代码\n    // Add the relevant path-mapped filters to this filter chain\n    for (int i = 0; i &lt; filterMaps.length; i++) {\n        if (!matchDispatcher(filterMaps[i] ,dispatcher)) {\n            continue;\n        }\n        if (!matchFiltersURL(filterMaps[i], requestPath))\n            continue;\n        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig)\n            context.findFilterConfig(filterMaps[i].getFilterName());\n        if (filterConfig == null) {\n            continue;\n        }\n        filterChain.addFilter(filterConfig);\n    }\n    // 省略非关键代码\n    // Return the completed filter chain\n    return filterChain;\n}\n</code></pre><p>下面继续查找对StandardContext成员变量FilterMaps的写入引用，我们找到了addFilterMapBefore()：</p><pre><code>public void addFilterMapBefore(FilterMap filterMap) {\n    validateFilterMap(filterMap);\n    // Add this filter mapping to our registered set\n    filterMaps.addBefore(filterMap);\n    fireContainerEvent(&quot;addFilterMap&quot;, filterMap);\n}\n</code></pre><p>到这，我们已经知道过滤器的执行顺序是由StandardContext类成员变量FilterMaps的顺序决定，而FilterMaps则是一个包装过的数组，所以我们只要进一步弄清楚<strong>FilterMaps中各元素的排列顺序</strong>即可。</p><p>我们继续在addFilterMapBefore()中加入断点，尝试从调用栈中找到一些线索：</p><pre><code>addFilterMapBefore:2992, StandardContext\naddMappingForUrlPatterns:107, ApplicationFilterRegistration\nconfigure:229, AbstractFilterRegistrationBean\nconfigure:44, AbstractFilterRegistrationBean\nregister:113, DynamicRegistrationBean\nonStartup:53, RegistrationBean\nselfInitialize:228, ServletWebServerApplicationContext\n// 省略非关键代码\n</code></pre><p>可知，Spring从selfInitialize()一直依次调用到addFilterMapBefore()，稍微分析下selfInitialize()，我们可以了解到，这里是通过调用getServletContextInitializerBeans()，获取所有的ServletContextInitializer类型的Bean，并调用该Bean的onStartup()，从而一步步以调用栈显示的顺序，最终调用到 addFilterMapBefore()。</p><pre><code>private void selfInitialize(ServletContext servletContext) throws ServletException {\n   prepareWebApplicationContext(servletContext);\n   registerApplicationScope(servletContext);\n   WebApplicationContextUtils.registerEnvironmentBeans(getBeanFactory(), servletContext);\n   for (ServletContextInitializer beans : getServletContextInitializerBeans()) {\n      beans.onStartup(servletContext);\n   }\n}\n</code></pre><p>那么上述的selfInitialize()又从何处调用过来呢？这里你可以先想想，我会在思考题中给你做进一步解释。</p><p>现在我们继续查看selfInitialize()的细节。</p><p>首先，查看上述代码中的getServletContextInitializerBeans()，因为此方法返回的ServletContextInitializer类型的Bean集合顺序决定了addFilterMapBefore()调用的顺序，从而决定了FilterMaps内元素的顺序，最终决定了过滤器的执行顺序。</p><p>getServletContextInitializerBeans()的实现非常简单，只是返回了ServletContextInitializerBeans类的一个实例，参考代码如下：</p><pre><code>protected Collection&lt;ServletContextInitializer&gt; getServletContextInitializerBeans() {\n   return new ServletContextInitializerBeans(getBeanFactory());\n}\n</code></pre><p>上述方法的返回值是个Collection，可见ServletContextInitializerBeans类是一个集合类，它继承了AbstractCollection抽象类。也因为如此，上述selfInitialize()才可以遍历 ServletContextInitializerBeans的实例对象。</p><p>既然ServletContextInitializerBeans是集合类，那么我们就可以先查看其iterator()，看看它遍历的是什么。</p><pre><code>@Override\npublic Iterator&lt;ServletContextInitializer&gt; iterator() {\n   return this.sortedList.iterator();\n}\n</code></pre><p>此集合类对外暴露的集合遍历元素为sortedList成员变量，也就是说，上述selfInitialize()最终遍历的即为sortedList成员变量。</p><p>到这，我们可以进一步确定下结论：selfInitialize()中是通过getServletContextInitializerBeans()获取到的ServletContextInitializer类型的Beans集合，即为ServletContextInitializerBeans的类型成员变量sortedList。反过来说，<strong>sortedList中的过滤器Bean元素顺序，决定了最终过滤器的执行顺序</strong>。</p><p>现在我们继续查看ServletContextInitializerBeans的构造方法如下：</p><pre><code>public ServletContextInitializerBeans(ListableBeanFactory beanFactory,\n      Class&lt;? extends ServletContextInitializer&gt;... initializerTypes) {\n   this.initializers = new LinkedMultiValueMap&lt;&gt;();\n   this.initializerTypes = (initializerTypes.length != 0) ? Arrays.asList(initializerTypes)\n         : Collections.singletonList(ServletContextInitializer.class);\n   addServletContextInitializerBeans(beanFactory);\n   addAdaptableBeans(beanFactory);\n   List&lt;ServletContextInitializer&gt; sortedInitializers = this.initializers.values().stream()\n         .flatMap((value) -&gt; value.stream().sorted(AnnotationAwareOrderComparator.INSTANCE))\n         .collect(Collectors.toList());\n   this.sortedList = Collections.unmodifiableList(sortedInitializers);\n   logMappings(this.initializers);\n}\n</code></pre><p>通过第8行，可以得知：我们关心的类成员变量this.sortedList，其元素顺序是由类成员变量this.initializers的values通过比较器AnnotationAwareOrderComparator进行排序的。</p><p>继续查看AnnotationAwareOrderComparator比较器，忽略比较器调用的细节过程，其最终是通过两种方式获取比较器需要的order值，来决定sortedInitializers的排列顺序：</p><ul>\n<li>待排序的对象元素自身实现了Order接口，则直接通过getOrder()获取order值；</li>\n<li>否则执行OrderUtils.findOrder()获取该对象类@Order的属性。</li>\n</ul><p>这里多解释一句，因为this.initializers的values类型为ServletContextInitializer，其实现了Ordered接口，所以这里的比较器显然是使用了getOrder()获取比较器所需的order值，对应的类成员变量即为order。</p><p>继续查看this.initializers中的元素在何处被添加，我们最终得知，addServletContextInitializerBeans()以及addAdaptableBeans()这两个方法均构建了ServletContextInitializer子类的实例，并添加到了this.initializers成员变量中。在这里，我们只研究addServletContextInitializerBeans，毕竟我们使用的添加过滤器方式（使用@WebFilter标记）最终只会通过这个方法生效。</p><p>在这个方法中，Spring通过getOrderedBeansOfType()实例化了所有ServletContextInitializer的子类：</p><pre><code>private void addServletContextInitializerBeans(ListableBeanFactory beanFactory) {\n   for (Class&lt;? extends ServletContextInitializer&gt; initializerType : this.initializerTypes) {\n      for (Entry&lt;String, ? extends ServletContextInitializer&gt; initializerBean : getOrderedBeansOfType(beanFactory,\n            initializerType)) {\n         addServletContextInitializerBean(initializerBean.getKey(), initializerBean.getValue(), beanFactory);\n      }\n   }\n}\n</code></pre><p>根据其不同类型，调用addServletContextInitializerBean()，我们可以看出ServletContextInitializer的子类包括了ServletRegistrationBean、FilterRegistrationBean以及ServletListenerRegistrationBean，正好对应了Servlet的三大要素。</p><p>而这里我们只需要关心对应于Filter的FilterRegistrationBean，显然，FilterRegistrationBean是ServletContextInitializer的子类（实现了Ordered接口），同样由<strong>成员变量order的值决定其执行的优先级。</strong></p><pre><code>private void addServletContextInitializerBean(String beanName, ServletContextInitializer initializer,\n      ListableBeanFactory beanFactory) {\n   if (initializer instanceof ServletRegistrationBean) {\n      Servlet source = ((ServletRegistrationBean&lt;?&gt;) initializer).getServlet();\n      addServletContextInitializerBean(Servlet.class, beanName, initializer, beanFactory, source);\n   }\n   else if (initializer instanceof FilterRegistrationBean) {\n      Filter source = ((FilterRegistrationBean&lt;?&gt;) initializer).getFilter();\n      addServletContextInitializerBean(Filter.class, beanName, initializer, beanFactory, source);\n   }\n   else if (initializer instanceof DelegatingFilterProxyRegistrationBean) {\n      String source = ((DelegatingFilterProxyRegistrationBean) initializer).getTargetBeanName();\n      addServletContextInitializerBean(Filter.class, beanName, initializer, beanFactory, source);\n   }\n   else if (initializer instanceof ServletListenerRegistrationBean) {\n      EventListener source = ((ServletListenerRegistrationBean&lt;?&gt;) initializer).getListener();\n      addServletContextInitializerBean(EventListener.class, beanName, initializer, beanFactory, source);\n   }\n   else {\n      addServletContextInitializerBean(ServletContextInitializer.class, beanName, initializer, beanFactory,\n            initializer);\n   }\n}\n</code></pre><p>最终添加到this.initializers成员变量中：</p><pre><code>private void addServletContextInitializerBean(Class&lt;?&gt; type, String beanName, ServletContextInitializer initializer,\n      ListableBeanFactory beanFactory, Object source) {\n   this.initializers.add(type, initializer);\n// 省略非关键代码\n}\n</code></pre><p>通过上述代码，我们再次看到了FilterRegistrationBean。但问题来了，我们没有定义FilterRegistrationBean，那么这里的FilterRegistrationBean是在哪里被定义的呢？其order类成员变量是否有特定的取值逻辑？</p><p>不妨回想下上节课的案例1，它是在WebFilterHandler类的doHandle()动态构建了FilterRegistrationBean的BeanDefinition：</p><pre><code>class WebFilterHandler extends ServletComponentHandler {\n\n   WebFilterHandler() {\n      super(WebFilter.class);\n   }\n\n   @Override\n   public void doHandle(Map&lt;String, Object&gt; attributes, AnnotatedBeanDefinition beanDefinition,\n         BeanDefinitionRegistry registry) {\n      BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(FilterRegistrationBean.class);\n      builder.addPropertyValue(&quot;asyncSupported&quot;, attributes.get(&quot;asyncSupported&quot;));\n      builder.addPropertyValue(&quot;dispatcherTypes&quot;, extractDispatcherTypes(attributes));\n      builder.addPropertyValue(&quot;filter&quot;, beanDefinition);\n      builder.addPropertyValue(&quot;initParameters&quot;, extractInitParameters(attributes));\n      String name = determineName(attributes, beanDefinition);\n      builder.addPropertyValue(&quot;name&quot;, name);\n      builder.addPropertyValue(&quot;servletNames&quot;, attributes.get(&quot;servletNames&quot;));\n      builder.addPropertyValue(&quot;urlPatterns&quot;, extractUrlPatterns(attributes));\n      registry.registerBeanDefinition(name, builder.getBeanDefinition());\n   }\n   // 省略非关键代码\n</code></pre><p>这里我再次贴出了WebFilterHandler中doHandle()的逻辑（即通过 BeanDefinitionBuilder动态构建了FilterRegistrationBean类型的BeanDefinition）。然而遗憾的是，<strong>此处并没有设置order的值，更没有根据@Order指定的值去设置。</strong></p><p>到这里我们终于看清楚了问题的本质，所有被@WebFilter注解的类，最终都会在此处被包装为FilterRegistrationBean类的BeanDefinition。虽然FilterRegistrationBean也拥有Ordered接口，但此处却并没有填充值，因为这里所有的属性都是从@WebFilter对应的属性获取的，而@WebFilter本身没有指定可以辅助排序的属性。</p><p>现在我们来总结下，过滤器的执行顺序是由下面这个串联决定的：</p><blockquote>\n<p>RegistrationBean中order属性的值-&gt;<br>\nServletContextInitializerBeans类成员变量sortedList中元素的顺序-&gt;<br>\nServletWebServerApplicationContext 中selfInitialize()遍历FilterRegistrationBean的顺序-&gt;<br>\naddFilterMapBefore()调用的顺序-&gt;<br>\nfilterMaps内元素的顺序-&gt;<br>\n过滤器的执行顺序</p>\n</blockquote><p>可见，RegistrationBean中order属性的值最终可以决定过滤器的执行顺序。但是可惜的是：当使用@WebFilter时，构建的FilterRegistrationBean并没有依据@Order的值去设置order属性，所以@Order失效了。</p><h3>问题修正</h3><p>现在，我们理清了Spring启动Web服务之前的一些必要类的初始化流程，同时也弄清楚了@Order和@WebFilter同时使用失效的原因，但这个问题想要解决却并非那么简单。</p><p>这里我先提供给你一个常见的做法，即实现自己的FilterRegistrationBean来配置添加过滤器，不再使用@WebFilter。具体代码如下：</p><pre><code>@Configuration\npublic class FilterConfiguration {\n    @Bean\n    public FilterRegistrationBean authFilter() {\n        FilterRegistrationBean registration = new FilterRegistrationBean();\n        registration.setFilter(new AuthFilter());\n        registration.addUrlPatterns(&quot;/*&quot;);\n        registration.setOrder(2);\n        return registration;\n    }\n\n    @Bean\n    public FilterRegistrationBean timeCostFilter() {\n        FilterRegistrationBean registration = new FilterRegistrationBean();\n        registration.setFilter(new TimeCostFilter());\n        registration.addUrlPatterns(&quot;/*&quot;);\n        registration.setOrder(1);\n        return registration;\n    }\n}\n</code></pre><p>按照我们查看的源码中的逻辑，虽然WebFilterHandler中doHandle()构建了FilterRegistrationBean类型的BeanDefinition，但<strong>没有设置order的值</strong>。</p><p>所以在这里，我们直接手工实例化了FilterRegistrationBean实例，而且设置了其setOrder()。同时不要忘记去掉AuthFilter和TimeCostFilter类中的@WebFilter，这样问题就得以解决了。</p><h2>案例2：过滤器被多次执行</h2><p>我们继续沿用上面的案例代码，要解决排序问题，可能有人就想了是不是有其他的解决方案呢？比如我们能否在两个过滤器中增加@Component，从而让@Order生效呢？代码如下。</p><p>AuthFilter：</p><pre><code>@WebFilter\n@Slf4j\n@Order(2)\n@Component\npublic class AuthFilter implements Filter {\n    @SneakyThrows\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain){\n        if(isPassAuth()){\n            System.out.println(&quot;通过授权&quot;);\n            chain.doFilter(request, response);\n        }else{\n            System.out.println(&quot;未通过授权&quot;);\n            ((HttpServletResponse)response).sendError(401);\n        }\n    }\n    private boolean isPassAuth() throws InterruptedException {\n        System.out.println(&quot;执行检查权限&quot;);\n        Thread.sleep(1000);\n        return true;\n    }\n}\n</code></pre><p>TimeCostFilter类如下：</p><pre><code>@WebFilter\n@Slf4j\n@Order(1)\n@Component\npublic class TimeCostFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(&quot;#开始计算接口耗时&quot;);\n        long start = System.currentTimeMillis();\n        chain.doFilter(request, response);\n        long end = System.currentTimeMillis();\n        long time = end - start;\n        System.out.println(&quot;#执行时间(ms)：&quot; + time);\n    }\n}\n</code></pre><p>最终执行结果如下：</p><pre><code>#开始计算接口耗时\n执行检查权限\n通过授权\n执行检查权限\n通过授权\n#开始计算接口耗时\n......用户注册成功\n#执行时间(ms)：73\n#执行时间(ms)：2075\n</code></pre><p>更改 AuthFilter 类中的Order值为0，继续测试，得到结果如下：</p><pre><code>执行检查权限\n通过授权\n#开始计算接口耗时\n执行检查权限\n通过授权\n#开始计算接口耗时\n......用户注册成功\n#执行时间(ms)：96\n#执行时间(ms)：1100\n</code></pre><p>显然，通过Order的值，我们已经可以随意调整Filter的执行顺序，但是我们会惊奇地发现，过滤器本身被执行了2次，这明显不符合我们的预期！那么如何理解这个现象呢？</p><h3>案例解析</h3><p>从案例1中我们已经得知被@WebFilter的过滤器，会在WebServletHandler类中被重新包装为FilterRegistrationBean类的BeanDefinition，而并非是Filter类型。</p><p>而当我们在自定义过滤器中增加@Component时，我们可以大胆猜测下：理论上Spring会根据当前类再次包装一个新的过滤器，因而doFIlter()被执行两次。因此看似奇怪的测试结果，也在情理之中了。</p><p>我们继续从源码中寻找真相，继续查阅ServletContextInitializerBeans的构造方法如下：</p><pre><code>public ServletContextInitializerBeans(ListableBeanFactory beanFactory,\n      Class&lt;? extends ServletContextInitializer&gt;... initializerTypes) {\n   this.initializers = new LinkedMultiValueMap&lt;&gt;();\n   this.initializerTypes = (initializerTypes.length != 0) ? Arrays.asList(initializerTypes)\n         : Collections.singletonList(ServletContextInitializer.class);\n   addServletContextInitializerBeans(beanFactory);\n   addAdaptableBeans(beanFactory);\n   List&lt;ServletContextInitializer&gt; sortedInitializers = this.initializers.values().stream()\n         .flatMap((value) -&gt; value.stream().sorted(AnnotationAwareOrderComparator.INSTANCE))\n         .collect(Collectors.toList());\n   this.sortedList = Collections.unmodifiableList(sortedInitializers);\n   logMappings(this.initializers);\n}\n</code></pre><p>上一个案例中，我们关注了addServletContextInitializerBeans()，了解了它的作用是实例化并注册了所有FilterRegistrationBean类型的过滤器（严格说，是实例化并注册了所有的ServletRegistrationBean、FilterRegistrationBean以及ServletListenerRegistrationBean，但这里我们只关注FilterRegistrationBean）。</p><p>而第7行的addAdaptableBeans()，其作用则是实例化所有实现Filter接口的类（严格说，是实例化并注册了所有实现Servlet、Filter以及EventListener接口的类），然后再逐一包装为FilterRegistrationBean。</p><p>之所以Spring能够直接实例化FilterRegistrationBean类型的过滤器，这是因为：</p><ul>\n<li>WebFilterHandler相关类通过扫描@WebFilter，动态构建了FilterRegistrationBean类型的BeanDefinition，并注册到Spring；</li>\n<li>或者我们自己使用@Bean来显式实例化FilterRegistrationBean并注册到Spring，如案例1中的解决方案。</li>\n</ul><p>但Filter类型的过滤器如何才能被Spring直接实例化呢？相信你已经有答案了：<strong>任何通过@Component修饰的的类，都可以自动注册到Spring，且能被Spring直接实例化。</strong></p><p>现在我们直接查看addAdaptableBeans()，其调用了addAsRegistrationBean()，其beanType为Filter.class：</p><pre><code>protected void addAdaptableBeans(ListableBeanFactory beanFactory) {\n   // 省略非关键代码\n   addAsRegistrationBean(beanFactory, Filter.class, new FilterRegistrationBeanAdapter());\n   // 省略非关键代码\n}\n</code></pre><p>继续查看最终调用到的方法addAsRegistrationBean()：</p><pre><code>private &lt;T, B extends T&gt; void addAsRegistrationBean(ListableBeanFactory beanFactory, Class&lt;T&gt; type,\n      Class&lt;B&gt; beanType, RegistrationBeanAdapter&lt;T&gt; adapter) {\n   List&lt;Map.Entry&lt;String, B&gt;&gt; entries = getOrderedBeansOfType(beanFactory, beanType, this.seen);\n   for (Entry&lt;String, B&gt; entry : entries) {\n      String beanName = entry.getKey();\n      B bean = entry.getValue();\n      if (this.seen.add(bean)) {\n         // One that we haven't already seen\n         RegistrationBean registration = adapter.createRegistrationBean(beanName, bean, entries.size());\n         int order = getOrder(bean);\n         registration.setOrder(order);\n         this.initializers.add(type, registration);\n         if (logger.isTraceEnabled()) {\n            logger.trace(&quot;Created &quot; + type.getSimpleName() + &quot; initializer for bean '&quot; + beanName + &quot;'; order=&quot;\n                  + order + &quot;, resource=&quot; + getResourceDescription(beanName, beanFactory));\n         }\n      }\n   }\n}\n</code></pre><p>主要逻辑如下：</p><ul>\n<li>通过getOrderedBeansOfType()创建了所有 Filter 子类的实例，即所有实现Filter接口且被@Component修饰的类；</li>\n<li>依次遍历这些Filter类实例，并通过RegistrationBeanAdapter将这些类包装为RegistrationBean；</li>\n<li>获取Filter类实例的Order值，并设置到包装类 RegistrationBean中；</li>\n<li>将RegistrationBean添加到this.initializers。</li>\n</ul><p>到这，我们了解到，当过滤器同时被@WebFilter和@Component修饰时，会导致两个FilterRegistrationBean实例的产生。addServletContextInitializerBeans()和addAdaptableBeans()最终都会创建FilterRegistrationBean的实例，但不同的是：</p><ul>\n<li>@WebFilter会让addServletContextInitializerBeans()实例化，并注册所有动态生成的FilterRegistrationBean类型的过滤器；</li>\n<li>@Component会让addAdaptableBeans()实例化所有实现Filter接口的类，然后再逐一包装为FilterRegistrationBean类型的过滤器。</li>\n</ul><h3>问题修正</h3><p>解决这个问题提及的顺序问题，自然可以继续参考案例1的问题修正部分。另外我们也可以去掉@WebFilter保留@Component的方式进行修改，修改后的Filter示例如下：</p><pre><code>//@WebFilter\n@Slf4j\n@Order(1)\n@Component\npublic class TimeCostFilter implements Filter {\n   //省略非关键代码\n}\n</code></pre><h2>重点回顾</h2><p>这节课我们分析了过滤器在Spring框架中注册、包装以及实例化的整个流程，最后我们再次回顾下重点。</p><p>@WebFilter和@Component的相同点是：</p><ul>\n<li>它们最终都被包装并实例化成为了FilterRegistrationBean；</li>\n<li>它们最终都是在 ServletContextInitializerBeans的构造器中开始被实例化。</li>\n</ul><p>@WebFilter和@Component的不同点是：</p><ul>\n<li>被@WebFilter修饰的过滤器会被提前在BeanFactoryPostProcessors扩展点包装成FilterRegistrationBean类型的BeanDefinition，然后在ServletContextInitializerBeans.addServletContextInitializerBeans() 进行实例化；而使用@Component修饰的过滤器类，是在ServletContextInitializerBeans.addAdaptableBeans() 中被实例化成Filter类型后，再包装为RegistrationBean类型。</li>\n<li>被@WebFilter修饰的过滤器不会注入Order属性，但被@Component修饰的过滤器会在ServletContextInitializerBeans.addAdaptableBeans() 中注入Order属性。</li>\n</ul><h2>思考题</h2><p>这节课的两个案例，它们都是在Tomcat容器启动时发生的，但你了解Spring是如何整合Tomcat，使其在启动时注册这些过滤器吗？</p><p>期待你的思考，我们留言区见！</p>","neighbors":{"left":{"article_title":"13 | Spring Web 过滤器使用常见错误（上）","id":376115},"right":{"article_title":"15 | Spring Security 常见错误","id":378170}},"comments":[{"had_liked":false,"id":294176,"user_name":"码畜","can_delete":false,"product_type":"c1","uid":2064584,"ip_address":"","ucode":"44A5E9679E8EAA","user_header":"https://static001.geekbang.org/account/avatar/00/1f/80/c8/ac09f52c.jpg","comment_is_top":false,"comment_ctime":1621818765,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"108996001165","product_id":100077001,"comment_content":"过滤器这两章给我一个启发，能不用@WebFilter就不用，没啥大用还出一堆问题","like_count":25,"discussions":[{"author":{"id":1666025,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6b/e9/7620ae7e.jpg","nickname":"雨落～紫竹","note":"","ucode":"33CED2F34E708F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576774,"discussion_content":"正经人谁用这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655787130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384545,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626659482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1197925,"avatar":"https://static001.geekbang.org/account/avatar/00/12/47/65/cce8eb34.jpg","nickname":"nimil","note":"","ucode":"19933068972746","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378562,"discussion_content":"我觉得也是，直接使用新方式就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623288794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1750549,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b6/15/e2cfd10d.jpg","nickname":"ImYours°","note":"","ucode":"51F653129034C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1197925,"avatar":"https://static001.geekbang.org/account/avatar/00/12/47/65/cce8eb34.jpg","nickname":"nimil","note":"","ucode":"19933068972746","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383586,"discussion_content":"新的方式是指直接使用@Component吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626170500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":378562,"ip_address":""},"score":383586,"extra":""}]},{"author":{"id":1463987,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cQVffRuscdhnF5vnQjgAZnbLwHDALl3TsAQsgEYCYPVfuFMSkyaTUXHs2aA0ORpx7AjI3LTR2ibKw2Q0VepymqA/132","nickname":"Geek_66158e","note":"","ucode":"8C3A579A715726","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377452,"discussion_content":"老哥有才","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622647192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1568485,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ee/e5/b2a9a746.jpg","nickname":"望舒","note":"","ucode":"8B69BDFB3D93AC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376540,"discussion_content":"还是要用的，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622183203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320331,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1636257790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5931225086","product_id":100077001,"comment_content":"秀啊","like_count":1},{"had_liked":false,"id":314375,"user_name":"Geek1591","can_delete":false,"product_type":"c1","uid":2028942,"ip_address":"","ucode":"A65CFAE8B3F857","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/8e/1d68db9a.jpg","comment_is_top":false,"comment_ctime":1632989899,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5927957195","product_id":100077001,"comment_content":"不知道你是哪个版本的Spring。<br>对于你说@WebFilter + @Order不生效的问题，亲测是生效的。<br>spring-boot-1.5.1.RELEASE.jar的<br>org.springframework.boot.web.servlet.ServletContextInitializerBeans#getOrderedBeansOfType(org.springframework.beans.factory.ListableBeanFactory, java.lang.Class&lt;T&gt;, java.util.Set&lt;?&gt;)<br>此版本的这个方法的返回内容，已经是根据指定的order排序后的BeanList，并且设置了order属性的值，以便后续（多种类型Filter的大范围）再次排序。","like_count":1,"discussions":[{"author":{"id":2871835,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/d2/1b/c694a5d0.jpg","nickname":"泼洒","note":"","ucode":"5EE2FB58F005B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546022,"discussion_content":"老哥，我不知道你是怎么亲测有效的，我亲测了一下，无论是1.5.1.RELEASE还是2.4.1下，@WebFilter + @Order都是不生效的，不要误导人啊","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1642131459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2871835,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/d2/1b/c694a5d0.jpg","nickname":"泼洒","note":"","ucode":"5EE2FB58F005B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546023,"discussion_content":"看了下源码，getOrderedBeansOfType确实对bean用AnnotationAwareOrderComparator做了排序，但是这些bean是被包装过后的FilterRegistrationBean，而FilterRegistrationBean就像老师说的并没有@Order注解，也拿不到@WebFilter标记的原始类的@Order注解，所以对FilterRegistrationBean排序没效果....至于你说的设置了order属性的值，实在不知道是哪，你该不会是看到@Component的处理逻辑里去了吧...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642131860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359312,"user_name":"虚竹","can_delete":false,"product_type":"c1","uid":1691109,"ip_address":"北京","ucode":"8D8C96C793724E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIocn8OMjfSGqyeSJEV3ID2rquLR0S6xo0ibdNYQgzicib6L6VlqWjhgxOqD2iaicX1KhbWXWCsmBTskA/132","comment_is_top":false,"comment_ctime":1665407507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665407507","product_id":100077001,"comment_content":"@WebFilterbu最终实际没设置order是spring的bug吗？","like_count":0},{"had_liked":false,"id":308785,"user_name":"黑白颠倒","can_delete":false,"product_type":"c1","uid":2167240,"ip_address":"","ucode":"E79D2540C3F668","user_header":"https://static001.geekbang.org/account/avatar/00/21/11/c8/889846a7.jpg","comment_is_top":false,"comment_ctime":1629796836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629796836","product_id":100077001,"comment_content":"@WebFilter问题真多","like_count":0},{"had_liked":false,"id":302404,"user_name":"ImYours°","can_delete":false,"product_type":"c1","uid":1750549,"ip_address":"","ucode":"51F653129034C9","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b6/15/e2cfd10d.jpg","comment_is_top":false,"comment_ctime":1626192327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626192327","product_id":100077001,"comment_content":"实现order接口的话是有效的吗？","like_count":0},{"had_liked":false,"id":302228,"user_name":"xiaomifeng1010","can_delete":false,"product_type":"c1","uid":1586324,"ip_address":"","ucode":"8DB2840889EAF4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcBRhqN1lpk5Kk9OJuM6XL6epbJXGMZOL1no1RyBjwycEzJU4L1TIUAoRUSoNG4pDsnN9wLrRqbg/132","comment_is_top":false,"comment_ctime":1626141458,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1626141458","product_id":100077001,"comment_content":"使用@Component注解替换@WebFilter，是不是启动类上的@ServletComponentScan注解也要去掉呢？","like_count":0,"discussions":[{"author":{"id":2167240,"avatar":"https://static001.geekbang.org/account/avatar/00/21/11/c8/889846a7.jpg","nickname":"黑白颠倒","note":"","ucode":"E79D2540C3F668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390348,"discussion_content":"可以不去掉，但是既然没有了WebFilter，那么ServletComponentScan也扫描不到对应的类，本质上并不生效，冗余代码。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629793083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2632273,"avatar":"https://static001.geekbang.org/account/avatar/00/28/2a/51/4694740b.jpg","nickname":"根音战士","note":"","ucode":"F2EBE390E32480","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571576,"discussion_content":"上节课给了你答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652275879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}