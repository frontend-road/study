{"id":2239,"title":"27 | 小议Java语言","content":"<p>今天我和你聊聊 Java 语言，这也是我使用最久最熟悉的编程语言之一。</p>\n<p>读博士的时候我做过两个领域。刚刚进入莱斯大学的时候进的是程序语言设计组。组里当时有两个教授，分别做两个领域。</p>\n<p>一个是瓦利德·塔哈（ Walid Taha ），主要研究领域是类型系统和嵌入式系统的程序语言设计。另一个是罗伯特·卡特赖特（ Robert Cartwright），他喜欢大家叫他 Corky，主要研究的是 Java 的理论和实现。</p>\n<p>Corky 教授的研究项目中，有一个叫做 DrJava 的项目。DrJava 是一个轻量级的 Java 开发环境。主要是给在校学生用的，它提供了一个简单直观的交互界面，可以实现类似 Shell 的交互式 Java 代码执行方式。DrJava 在美国大学里有很多人使用，目前已经超过两百万的下载量。</p>\n<p>Corky 是个典型的美国教授，与生俱来的花白卷发，清癯的脸庞上一双眼睛炯炯有神，高挺的鼻梁。他常年都是和学生一样的打扮：T恤牛仔裤加运动鞋。出入的时候，背上总是背着一个蓝灰色的电脑包。</p>\n<p>当他不谈学术的时候，你会觉得他有着与年龄不相称的单纯和童真。他会和一群学生一起吃系里免费的披萨和点心，也会和其他教授一起站在系里走廊上聊天和哈哈大笑；然而一旦你和他讨论起 Java，他就变得滔滔不绝，整个人散发出特别的魅力。他对 Java 的理解十分深入，我每次和他对话都颇有收益。</p>\n<p>虽然我的导师是瓦利德（Walid），但同在一个语言组，平时的研讨班都在一起，我也就有了很多的机会和 Corky 一起讨论各种程序语言的特性和实现。也就是在那个时候，我对 Java 语言有了比较多深层次的了解。</p>\n<h2>我和 Java 语言的开发者</h2>\n<p>我的硕士论文是独立实现的一个程序设计语言，包括它的解释编译和用户界面。这个语言主要用于机器人系统的嵌入式编程和仿真，曾经在一家石油公司的井下控制系统开发中被使用。不过因为我导师的离开和种种其他原因，我博士生涯的后三年转了另一个导师做生物信息学的数据分析和建模。</p>\n<p>因为有程序设计语言的研究经验，博士毕业找工作的时候，也投了份简历在 Oracle 的 Java 语言开发组。也因为有这样相应的背景，我很顺利地拿到了Java核心类库 （Java Core Library） 开发小组的 Onsite 面试机会。</p>\n<p>我去面试的时候应该是 2012 年底，当时面试的那个小组一共好像只有七八个人的样子。Oracle 的面试大部分是白板和聊天，和现在比较主流的面试，上机做题并无 Bug 运行的体验很不相同。我介绍了自己的硕士毕业设计，然后就谈起 Java 新的库或版本可能会增加哪些支持。</p>\n<p>2012 年底的时候，Scala 和 Clojure 刚刚火起来不太久，Java 还没有对Lambda 的支持。而当时整个Java团队也正在考虑这件事。话题牵扯到了 Lambda 的实现，正好是我非常熟悉的话题，因为我的导师瓦利德（ Walid ）主要的研究领域就是函数式语言，而对 Lambda 的实现，也是函数式编程语言的核心。</p>\n<p>具体的讨论细节我已经不记得了，不过有两点感触颇深：一是他们对于选择哪些函数进核心库（ Core Libarary ）非常谨慎。Java 早期是很轻量级的，后来的版本功能越来越强大，但是语言本身也越来越沉重，这也是很多人喜欢 Scala 的原因。</p>\n<p>二是实现函数库的语言开发者对每个函数的精度和运行时间的要求到了令人发指的程度，听说他们有时候读无数的论文，看无数的实现，作大量的比较，就只是为了敲定到底应该在最终的函数中使用哪一种实现方式。</p>\n<p>比如浮点数是有舍入误差（ Rounding Error ）的，那么一个数值计算中先算哪一步、后算哪一步带来结果都可能是不同的；而实现中的考虑，往往为了小数点后面十几位以后的一个 1，组里也要反复斟酌很久。</p>\n<!-- [[[read_end]]] -->\n<h2>为什么到了 Java 8 才有 Lambda？</h2>\n<p>很多人抱怨 Java 滞重，语法升级缓慢，过度封装，尤其是对函数式编程支持的不友好等等，其实都和这种谨慎有关。为什么 Lambda 的概念到 Java 8 才有了实现，之前的 Java 版本，包括很多其他语言都没有真正的 Lambda 实现呢？这其实和程序设计语言里的基本概念有关系。</p>\n<p>假如我有一个 Lambda 表达式，用伪代码来写，可以写成：</p>\n<pre><code>def f(x)\n    def g()\n        return x\n    end\n    return g\nend\n</code></pre>\n<p>这个 Lambda 表达式可以看到 f(10) = 10，f(20) = 20。</p>\n<p>在一个没有 Lambda 支持，或者嵌套式函数定义支持的语言中 —— 比如 C 语言，这个可能会实现成：</p>\n<pre><code>typedef int (*fp_t)() ;\n\nint g () {\n    return x ;\n}\n\nfp_t f(int x) {\n    return g ;\n}\n</code></pre>\n<p>但是问题就在于，g 函数中的 x 是没有定义的，程序不可能编译运行。解决这个问题，我们可以引入一个全局的 x 变量，在对函数 f 进行定义的时候，给这个全局 x 赋值。但是由于 C语言不能每次运行时定义一个新的函数，因此，如果赋值：</p>\n<pre><code>a = f(10)\nb = f(20)\n</code></pre>\n<p>那么，虽然我们希望得到 a=10，b=20，但是上面的实现只能给我们 a=20，b=20。</p>\n<p>由此可以看出，仅仅的一个匿名函数（ Anonymous Function）， 或者函数指针，是不足以正确地实现 Lambda 的；而正确实现 Lambda，或者说允许把 Lambda 表示的函数作为一个像其他类型的值一样作为参数来传递，语言必须要有对 Lambda 的函数表达，以及一个用来在各层中传递参数值的“参数定义环境”两者同时的实现。这也就是函数语言中的闭包的概念。</p>\n<p>换句话说，实现 Lambda 可以作为一个普通类型一样的值来存储和传递，我们需要一个闭包（ Closure ），而闭包（ Closure ）可以看成：</p>\n<p>闭包= Lambda 表达式 ＋记录所有函数局部变量值在每一层 Lambda 中的赋值的一个环境。</p>\n<p>实现闭包大体有两种方式。一种叫做“自底向上”的闭包转变，也称为 Flat Closure。它从函数定义的最里层，将每一层的局部函数变量值拷贝到次里层。每一层的变量可能重名，而这就需要变量名解析的技术，对变量按层重命名。这样逐层拷贝，最后形成一个 Lambda 对应的单层的变量赋值环境。</p>\n<p>另一种叫做“自顶向下”的闭包转变，也称为共享闭包（ Shared Closure）。它从函数定义的最外层，将每一层的局部函数变量赋值用类似指针的方式传播共享到里层的 Lambda。这种实现的好处是避免重命名和拷贝，但是实现赋值环境的共享其实是很棘手的。</p>\n<p>总而言之，Lambda 在语言中的实现是复杂并且昂贵的。不仅容易出错，还会给语言的垃圾收集（GC）带来新的挑战。它也让语言的类型系统的所有证明和推导变得复杂无比。虽然现在主流的语言都提供了Lambda 的实现，但用起来还是有一定限制也需要一些谨慎的。</p>\n<p>比如， C 语言仍然不支持嵌套式的函数定义。C++11 增加了对闭包的支持，但是因为语言本身没有垃圾收集的原因，使用起来需要异常谨慎，很容易引起悬挂引用（Dangling References） 。</p>\n<p>比如，Ruby函数不能直接作为参数传递，而是通过 Method 或者 Proc 来使用。且函数的嵌套定义并没有很好的对作用域进行嵌套；而 Java 8，虽然有了对Lambda 的支持，但是 Java 类型系统（ Type System ）并没有对函数类型有任何的支持。换句话说，Java 8 中其实并没有对函数类型的类型系统的实现，这就意味着一些 Lambda 相关的类型错误，在编译时间可能无法被发现。</p>\n<p>看完了这些你就会知道，一门编程语言的变革是多么艰难和复杂。好在 Java 9 已经发布了，Java 语言有了更高和更新的起点。</p>\n<h2>Java 开发中的常见问题</h2>\n<p>很多新人入门会要求我推荐编程语言，Java 属于我推荐的语言之一，因为 Java 标准、规范，是面向对象编程的代表，Class、Object、Interface、Abstract、Public、Private、Override 等关键词显式清晰，一旦使用就不会混淆，在学习其他编程语言的时候还可以参考互通。</p>\n<p>另外，由于 Java 的流行和开放性，围绕 Java 语言形成了最为广泛的开发平台，不仅有 Spring 这样开源生态社区，在 Java 平台之上还衍生出了很多轻量级的编程语言，比如 Scala、Groovy、Clojure 、Kotlin，这些语言都可以运行在 JVM 之上，形成了非常有生命力的生态环境。</p>\n<p>那么在用 Java 开发的过程中需要注意哪些问题呢？</p>\n<p>这里的问题并不是指哪些常见的“Java编程最常犯的错误”，比如：</p>\n<ol>\n<li>如何正确地将数组转化为列表；</li>\n<li>如何判断一个数组是否包含一个值；</li>\n<li>如何在一个循环中删除一个列表中的元素；</li>\n<li>什么时候用哈希表（ HashTable），什么时候用哈希映射（ HashMap）；</li>\n<li>不要在集合中使用原始类型；</li>\n<li>如何正确设定访问级别；</li>\n<li>ArrayList 与 LinkedList 的对比；</li>\n<li>可变与不可变；</li>\n<li>JUnit 中@Before 和@After行为的顺序；</li>\n<li>SPI 中参数如何设定；</li>\n<li>API 不要返回空值。</li>\n</ol>\n<p>这里想说的是，从架构和规范的角度，如果你选择了使用 Java 进行开发后，应该注意的那些问题。</p>\n<h3>1 不要重复造轮子，也不要搬太多不同型号的轮子来用</h3>\n<p>Java 语言有非常成熟的技术社区，在 Java 的生态里有很多相关的库、插件和工具，大部分是成熟技术。比如DW（ Dropwizard），基于 Java 生态中稳定的库构建了一个轻量级的框架，可以支持系统中的配置、日志、序列化等操作，还能构建基于 RESTful 的微服务架构。</p>\n<p>如果一个公司内有不同背景的 Java 工程师，有时他们会根据之前公司的工作经验，选取自己熟悉的库和工具，这时就有可能会引起系统中（比如序列化）使用了两种“轮子”。</p>\n<p>如何确保大家使用统一的库和工具呢？有很多途径，比如指定编程规划，或是使用工具完成某个服务的初始化，自动配置公司常用的库，或者通过统一的代码审核，让一些资深程序员把关等等。</p>\n<h3>2 深入了解依赖注入，选择一个好框架</h3>\n<p>稍具规模的 Java 代码库，都会有复杂的类和对象之间的相关性和依赖性。确保所有工程师理解并使用一个统一的依赖注入框架（比如 Guice）会让很多代码的风格保持一致，避免类的初始化过于复杂。</p>\n<p>(注：Guice 是谷歌推出的一个轻量级依赖注入框架，帮助开发者解决 Java 项目中的依赖注入问题。如果你使用过 Spring 的话，会了解到依赖注入是个非常方便的功能。不过，假如你只想在项目中使用依赖注入，那么引入 Spring 就显得太重了，这时候可以考虑采用 Guice。)</p>\n<h3>3 所有项目使用统一的文件夹结构</h3>\n<p>在构建项目的时候，工程师们争论最多的问题之一，就是代码文件怎么组织。库放哪里，工具类Utils 文件夹放哪里，哪些做成单独的 Service文件夹，哪些是 Client文件夹，分别又有哪些类。这个需要早期的工程师或者资深工程师统一协调，保证代码库的整体结构自顶而下都结构清晰，不同项目里的文件结构也尽可能遵循同样的组织方式。</p>\n<p>（注：utils、service 和 client 都是常用的代码文件夹名称。）</p>\n<h3>4 规范所有项目的 API，保持统一的风格和模式</h3>\n<p>API 的接口定义是不是使用 了 IDL（Interface Description Language），服务器（Service） 之间的交互协议是不是一致的，比如基于 HTTPS，内部功能模块和数据 Schema 之间的分层和转化是否有统一的标准。如果在开发过程中，不同服务器或者模块采取了不同的接口模式，让集成变得异常复杂。</p>\n<h3>5 规范开发环境，提供合适的工具</h3>\n<p>可能每个人都经历过这样的场景，用自己的编辑器打开代码库的代码之后，做一下自动格式化，或者新增一些代码，结果缩进、空行、括号等等，突然都不一样了。在协同开发的时候，经常会出现多人修改同一批代码的状况，如果频繁遇到代码不规范会非常麻烦，并且会出现很多无效格式的提交（ Commit ）。</p>\n<p>要保证所有人的代码格式设置一致，才能避免这样的问题。定义一些标准的格式文件，做成编辑器插件，要求每个开发者使用统一的格式定义，就能避免上述的问题。</p>\n<p>总结一下，今天我和你谈了我上学时是如何接触和使用 Java 语言的，讲述了 Java 语言开发者的故事，探讨了为什么 Java 很晚才支持 Lambda 这样的语言特性，最后介绍了在实际开发过程中应该注意的一些问题，希望对你有帮助。</p>\n<p>如果你还不知道应该学习哪一门编程语言，那么就从 Java 开始吧。感谢你的收听，我们下期再见。</p>\n<p><br> </p>\n<p><a href=\"https://time.geekbang.org/activity/sale-poster?utm_source=app&amp;utm_medium=zhuyun-article&amp;utm_campaign=zhuyun-saleposter&amp;utm_content=zhuyun0416\">戳此获取你的专属海报</a></p>\n","neighbors":{"left":{"article_title":"26 | 如何做自己的职场规划？","id":2206},"right":{"article_title":"28 | 如何激发团队人员的责任心","id":2452}},"comments":[{"had_liked":false,"id":2069,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1515722868,"is_pvip":false,"replies":[{"id":"409","content":"我去劝劝，看是否有第二季","user_name":"池建强回复","user_name_real":"卖桃者","uid":"1000012","ctime":1515822343,"ip_address":"","comment_id":2069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74530166900","product_id":100002401,"comment_content":"Java看了两周，找了一份工作，以战养兵。期待安姐开设Java系列的技术高阶课程！","like_count":18,"discussions":[{"author":{"id":1000012,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4c/1d5c1263.jpg","nickname":"池建强","note":"","ucode":"0E359BFB3AC329","race_medal":1,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415633,"discussion_content":"我去劝劝，看是否有第二季","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1515822343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2072,"user_name":"子悠","can_delete":false,"product_type":"c1","uid":1000383,"ip_address":"","ucode":"070BB09477E8A8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/bf/9a982bc1.jpg","comment_is_top":false,"comment_ctime":1515731927,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"35875470295","product_id":100002401,"comment_content":"每过段时间看自己以前写的代码都有一种，“我去，这代码哪个傻瓜写的，肯定不是我”的感觉","like_count":9},{"had_liked":false,"id":7700,"user_name":"白白白小白","can_delete":false,"product_type":"c1","uid":1112242,"ip_address":"","ucode":"CF23169A4F7DC3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvJDBrTrESPwZhQkoibT0NYdasIia7ZOCbU0oKgY2icrE9flAbzMsI7CZoiblTpqukMEzTfzrQU0ibPBg/132","comment_is_top":false,"comment_ctime":1525655832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18705525016","product_id":100002401,"comment_content":"虽然我是php开发，但是我还是认真的读完就！","like_count":5},{"had_liked":false,"id":2098,"user_name":"飓风","can_delete":false,"product_type":"c1","uid":1006197,"ip_address":"","ucode":"18D4E8139CD7B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/75/4e0d7419.jpg","comment_is_top":false,"comment_ctime":1515835005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18695704189","product_id":100002401,"comment_content":"工具文件夹可能叫util比较合适，个人偏见。","like_count":4},{"had_liked":false,"id":2128,"user_name":"有福","can_delete":false,"product_type":"c1","uid":1045377,"ip_address":"","ucode":"3DEAB5CEBE0F85","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/81/42e29d40.jpg","comment_is_top":false,"comment_ctime":1516000104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14400901992","product_id":100002401,"comment_content":"为了这个文章直接订阅了专栏","like_count":4},{"had_liked":false,"id":2083,"user_name":"闫飞","can_delete":false,"product_type":"c1","uid":1013162,"ip_address":"","ucode":"30C782D30108D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/aa/21275b9d.jpg","comment_is_top":false,"comment_ctime":1515807548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14400709436","product_id":100002401,"comment_content":"第一个例子好像有点不对啊，f返回的是一个匿名函数，所以f(10)得到的是个函数对象，必需要再加一层括号才能求值，得到调用值。<br><br>Java用接口的概念和多态来封装函数对象，和C++某些方面有异曲同工之处，但是其stream api和optional类型提供了极好的monad实现。<br><br>c++的类型系统对函数式支持更加严格一些，尤其是fp和自动类型推断以及泛型元编程的支持水乳交融，非常巧妙，不像Java尝试用OO来搞定一切。","like_count":3},{"had_liked":false,"id":2090,"user_name":"极客时间攻城狮","can_delete":false,"product_type":"c1","uid":1015812,"ip_address":"","ucode":"E279553F00309F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/04/e6989d2a.jpg","comment_is_top":false,"comment_ctime":1515825312,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"5810792608","product_id":100002401,"comment_content":"吉利","like_count":1,"discussions":[{"author":{"id":1015812,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/04/e6989d2a.jpg","nickname":"极客时间攻城狮","note":"","ucode":"E279553F00309F","race_medal":1,"user_type":8,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4850,"discussion_content":"破广告","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565772975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2063,"user_name":"王建Tyrion","can_delete":false,"product_type":"c1","uid":1009595,"ip_address":"","ucode":"0A24883F0FB197","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/bb/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1515714714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5810682010","product_id":100002401,"comment_content":"上个月刚刚把代码重构一番，按照标准的文件夹规范，上个版本真是自己能把自己看晕(=_=)","like_count":1},{"had_liked":false,"id":244961,"user_name":"何慧成","can_delete":false,"product_type":"c1","uid":2060270,"ip_address":"","ucode":"B7E076B1BEF1D5","user_header":"","comment_is_top":false,"comment_ctime":1598763497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598763497","product_id":100002401,"comment_content":"组织级的规范很重要","like_count":0},{"had_liked":false,"id":158973,"user_name":"爱学习的大叔","can_delete":false,"product_type":"c1","uid":1085152,"ip_address":"","ucode":"91F9ABF1EC98D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","comment_is_top":false,"comment_ctime":1575508687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575508687","product_id":100002401,"comment_content":"我们在开发时基本只停留在语言表面上，只是手到擒来的拿来用，原来在背后有这么多的故事。学习了.","like_count":0},{"had_liked":false,"id":155057,"user_name":"mikejiang","can_delete":false,"product_type":"c1","uid":1396090,"ip_address":"","ucode":"9350F6DC7BC0E8","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/7a/106c3745.jpg","comment_is_top":false,"comment_ctime":1574642168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574642168","product_id":100002401,"comment_content":"java语言用得不多，没想到居然也支持Lamda了","like_count":0},{"had_liked":false,"id":130918,"user_name":"JasonYe","can_delete":false,"product_type":"c1","uid":1131560,"ip_address":"","ucode":"05841AD4B65C99","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/28/948cab86.jpg","comment_is_top":false,"comment_ctime":1567574934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567574934","product_id":100002401,"comment_content":"Scala语言怎样","like_count":0},{"had_liked":false,"id":30573,"user_name":"军舰","can_delete":false,"product_type":"c1","uid":1221705,"ip_address":"","ucode":"C7E97415F5196A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/49/1c8598d1.jpg","comment_is_top":false,"comment_ctime":1538929072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538929072","product_id":100002401,"comment_content":"实现闭包大体有两种方式。能不能用源代码展示一下？","like_count":0},{"had_liked":false,"id":24145,"user_name":"michael","can_delete":false,"product_type":"c1","uid":1005835,"ip_address":"","ucode":"69738B5801F0FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/0b/fb876077.jpg","comment_is_top":false,"comment_ctime":1536823855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536823855","product_id":100002401,"comment_content":"参与设计一门语言再学习应用语言，真是得心应手","like_count":0},{"had_liked":false,"id":9419,"user_name":"iLeGeND","can_delete":false,"product_type":"c1","uid":1055475,"ip_address":"","ucode":"4055A628A6E97C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/f3/41d5ba7d.jpg","comment_is_top":false,"comment_ctime":1526864986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526864986","product_id":100002401,"comment_content":"为什么留言不显示呢","like_count":0}]}