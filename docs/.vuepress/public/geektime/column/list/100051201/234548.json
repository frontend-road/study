{"id":234548,"title":"06 | 锁：如何根据业务场景选择合适的锁？","content":"<p>你好，我是陶辉。</p><p>上一讲我们谈到了实现高并发的不同方案，这一讲我们来谈谈如何根据业务场景选择合适的锁。</p><p>我们知道，多线程下为了确保数据不会出错，必须加锁后才能访问共享资源。我们最常用的是互斥锁，然而，还有很多种不同的锁，比如自旋锁、读写锁等等，它们分别适用于不同的场景。</p><p>比如高并发场景下，要求每个函数的执行时间必须都足够得短，这样所有请求才能及时得到响应，如果你选择了错误的锁，数万请求同时争抢下，很容易导致大量请求长期取不到锁而处理超时，系统吞吐量始终维持在很低的水平，用户体验非常差，最终“高并发”成了一句空谈。</p><p>怎样选择最合适的锁呢？首先我们必须清楚加锁的成本究竟有多大，其次我们要分析业务场景中访问共享资源的方式，最后则要预估并发访问时发生锁冲突的概率。这样，我们才能选对锁，同时实现高并发和高吞吐量这两个目标。</p><p>今天，我们就针对不同的应用场景，了解下锁的选择和使用，从而减少锁对高并发性能的影响。</p><h2>互斥锁与自旋锁：休眠还是“忙等待”？</h2><p>我们常见的各种锁是有层级的，最底层的两种锁就是互斥锁和自旋锁，其他锁都是基于它们实现的。互斥锁的加锁成本更高，但它在加锁失败时会释放CPU给其他线程；自旋锁则刚好相反。</p><!-- [[[read_end]]] --><p><strong>当你无法判断锁住的代码会执行多久时，应该首选互斥锁，互斥锁是一种独占锁。</strong>什么意思呢？当A线程取到锁后，互斥锁将被A线程独自占有，当A没有释放这把锁时，其他线程的取锁代码都会被阻塞。</p><p>阻塞是怎样进行的呢？<strong>对于99%的线程级互斥锁而言，阻塞都是由操作系统内核实现的</strong>（比如Linux下它通常由内核提供的信号量实现）。当获取锁失败时，内核会将线程置为休眠状态，等到锁被释放后，内核会在合适的时机唤醒线程，而这个线程成功拿到锁后才能继续执行。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/74/8a/749fc674c55136bd455725b79c9e0c8a.jpg?wh=1198*1144\" alt=\"\"></p><p>互斥锁通过内核帮忙切换线程，简化了业务代码使用锁的难度。</p><p>但是，线程获取锁失败时，增加了两次上下文切换的成本：从运行中切换为休眠，以及锁释放时从休眠状态切换为运行中。上下文切换耗时在几十纳秒到几微秒之间，或许这段时间比锁住的代码段执行时间还长。而且，线程主动进入休眠是高并发服务无法容忍的行为，这让其他异步请求都无法执行。</p><p>如果你能确定被锁住的代码执行时间很短，就应该用自旋锁取代互斥锁。</p><p>自旋锁比互斥锁快得多，因为它通过CPU提供的CAS函数（全称Compare And Swap），在用户态代码中完成加锁与解锁操作。</p><p>我们知道，加锁流程包括2个步骤：第1步查看锁的状态，如果锁是空闲的，第2步将锁设置为当前线程持有。</p><p>在没有CAS操作前，多个线程同时执行这2个步骤是会出错的。比如线程A执行第1步发现锁是空闲的，但它在执行第2步前，线程B也执行了第1步，B也发现锁是空闲的，于是线程A、B会同时认为它们获得了锁。</p><p>CAS函数把这2个步骤合并为一条硬件级指令。这样，第1步比较锁状态和第2步锁变量赋值，将变为不可分割的原子指令。于是，设锁为变量lock，整数0表示锁是空闲状态，整数pid表示线程ID，那么CAS(lock, 0, pid)就表示自旋锁的加锁操作，CAS(lock, pid, 0)则表示解锁操作。</p><p>多线程竞争锁的时候，加锁失败的线程会“忙等待”，直到它拿到锁。什么叫“忙等待”呢？它并不意味着一直执行CAS函数，生产级的自旋锁在“忙等待”时，会与CPU紧密配合 ，它通过CPU提供的PAUSE指令，减少循环等待时的耗电量；对于单核CPU，忙等待并没有意义，此时它会主动把线程休眠。</p><p>如果你对此感兴趣，可以阅读下面这段生产级的自旋锁，看看它是怎么执行“忙等待”的：</p><pre><code>while (true) {\n  //因为判断lock变量的值比CAS操作更快，所以先判断lock再调用CAS效率更高\n  if (lock == 0 &amp;&amp;  CAS(lock, 0, pid) == 1) return;\n  \n  if (CPU_count &gt; 1 ) { //如果是多核CPU，“忙等待”才有意义\n      for (n = 1; n &lt; 2048; n &lt;&lt;= 1) {//pause的时间，应当越来越长\n        for (i = 0; i &lt; n; i++) pause();//CPU专为自旋锁设计了pause指令\n        if (lock == 0 &amp;&amp; CAS(lock, 0, pid)) return;//pause后再尝试获取锁\n      }\n  }\n  sched_yield();//单核CPU，或者长时间不能获取到锁，应主动休眠，让出CPU\n}\n</code></pre><p>在使用层面上，自旋锁与互斥锁很相似，实现层面上它们又完全不同。自旋锁开销少，在多核系统下一般不会主动产生线程切换，很适合在用户态切换请求的编程方式，有助于高并发服务充分利用多颗CPU。但如果被锁住的代码执行时间过长，CPU资源将被其他线程在“忙等待”中长时间占用。</p><p>当取不到锁时，互斥锁用“线程切换”来面对，自旋锁则用“忙等待”来面对。<strong>这是两种最基本的处理方式，更高级别的锁都会选择其中一种来实现，比如读写锁就既可以基于互斥锁实现，也可以基于自旋锁实现。</strong></p><p>下面我们来看一看读写锁能带来怎样的性能提升。</p><h2>允许并发持有的读写锁</h2><p><strong>如果你能够明确区分出读和写两种场景，可以选择读写锁。</strong></p><p>读写锁由读锁和写锁两部分构成，仅读取共享资源的代码段用读锁来加锁，会修改资源的代码段则用写锁来加锁。</p><p>读写锁的优势在于，当写锁未被持有时，多个线程能够并发地持有读锁，这提高了共享资源的使用率。多个读锁被同时持有时，读线程并不会修改共享资源，所以它们的并发执行不会产生数据错误。</p><p>而一旦写锁被持有后，不只读线程必须阻塞在获取读锁的环节，其他获取写锁的写线程也要被阻塞。写锁就像互斥锁和自旋锁一样，是一种独占锁；而读锁允许并发持有，则是一种共享锁。</p><p><strong>因此，读写锁真正发挥优势的场景，必然是读多写少的场景，否则读锁将很难并发持有。</strong></p><p>实际上，读写锁既可以倾向于读线程，又可以倾向于写线程。前者我们称为读优先锁，后者称为写优先锁。</p><p>读优先锁更强调效率，它期待锁能被更多的线程持有。简单看下它的工作特点：当线程A先持有读锁后，即使线程B在等待写锁，后续前来获取读锁的线程C仍然可以立刻加锁成功，因为这样就有A、C 这2个读线程在并发持有锁，效率更高。</p><p>我们再来看写优先的读写锁。同样的情况下，线程C获取读锁会失败，它将被阻塞在获取锁的代码中，这样，只要线程A释放读锁后，线程B马上就可以获取到写锁。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/c6/7b5f4e4bb3370b89b90c1bf83cb58fc6.jpg?wh=1202*1496\" alt=\"\"></p><p>读优先锁并发性更好，但问题也很明显。如果读线程源源不断地获取读锁，写线程将永远获取不到写锁。写优先锁可以保证写线程不会饿死，但如果新的写线程源源不断地到来，读线程也可能被饿死。</p><p>那么，能否兼顾二者，避免读、写线程饿死呢？</p><p><strong>用队列把请求锁的线程排队，按照先来后到的顺序加锁即可，当然读线程仍然可以并发，只不过不能插队到写线程之前。</strong>Java中的ReentrantReadWriteLock读写锁，就支持这种排队的公平读写锁。</p><p>如果不希望取锁时线程主动休眠，还可以用自旋锁实现读写锁。到底应该选择“线程切换”还是“忙等待”方式实现读写锁呢？除去读写场景外，这与选择互斥锁和自旋锁的方法相同，就是根据加锁代码执行时间的长短来选择，这里就不再赘述了。</p><h2>乐观锁：不使用锁也能同步</h2><p>事实上，无论互斥锁、自旋锁还是读写锁，都属于悲观锁。</p><p>什么叫悲观锁呢？它认为同时修改资源的概率很高，很容易出现冲突，所以访问共享资源前，先加上锁，总体效率会更优。然而，如果并发产生冲突的概率很低，就不必使用悲观锁，而是使用乐观锁。</p><p>所谓“乐观”，就是假定冲突的概率很低，所以它采用的“加锁”方式是，先修改完共享资源，再验证这段时间内有没有发生冲突。如果没有其他线程在修改资源，那么操作完成。如果发现其他线程已经修改了这个资源，就放弃本次操作。</p><p>至于放弃后如何重试，则与业务场景相关，虽然重试的成本很高，但出现冲突的概率足够低的话，还是可以接受的。可见，<strong>乐观锁全程并没有加锁，所以它也叫无锁编程。</strong></p><p>无锁编程中，验证是否发生了冲突是关键。该怎么验证呢？这与具体的场景有关。</p><p>比如说在线文档。Web中的在线文档是怎么实现多人编辑的？用户A先在浏览器中编辑某个文档，之后用户B也打开了相同的页面开始编辑，可是，用户B最先编辑完成提交，这一过程用户A却不知道。当A提交他改完的内容时，A、B之间的并行修改引发了冲突。</p><p>Web服务是怎么解决这种冲突的呢？它并没有限制用户先拿到锁后才能编辑文档，这既因为冲突的概率非常低，也因为加解锁的代价很高。Web中的方案是这样的：让用户先改着，但需要浏览器记录下修改前的文档版本号，这通过下载文档时，返回的HTTP ETag头部实现。</p><p>当用户提交修改时，浏览器在请求中通过HTTP If-Match头部携带原版本号，服务器将它与文档的当前版本号比较，一致后新的修改才能生效，否则提交失败。如下图所示（如果你想了解这一过程的细节，可以阅读 <a href=\"https://time.geekbang.org/course/detail/175-98914\">《Web协议详解与抓包实战》第28课</a>）：</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/f0/1db3bb24d896fabeebf68359384214f0.jpg?wh=1578*1150\" alt=\"\"></p><p>乐观锁除了应用在Web分布式场景，在数据库等单机上也有广泛的应用。只是面向多线程时，最后的验证步骤是通过CPU提供的CAS操作完成的。</p><p>乐观锁虽然去除了锁操作，但是一旦发生冲突，重试的成本非常高。所以，<strong>只有在冲突概率非常低，且加锁成本较高时，才考虑使用乐观锁。</strong></p><h2>小结</h2><p>这一讲我们介绍了高并发下同步资源时，如何根据应用场景选择合适的锁，来优化服务的性能。</p><p>互斥锁能够满足各类功能性要求，特别是被锁住的代码执行时间不可控时，它通过内核执行线程切换及时释放了资源，但它的性能消耗最大。需要注意的是，协程的互斥锁实现原理完全不同，它并不与内核打交道，虽然不能跨线程工作，但效率很高。（如果你希望进一步了解协程，可以阅读<a href=\"https://time.geekbang.org/column/article/233629\">[第5讲]</a>。）</p><p>如果能够确定被锁住的代码取到锁后很快就能释放，应该使用更高效的自旋锁，它特别适合基于异步编程实现的高并发服务。</p><p>如果能区分出读写操作，读写锁就是第一选择，它允许多个读线程同时持有读锁，提高了并发性。读写锁是有倾向性的，读优先锁很高效，但容易让写线程饿死，而写优先锁会优先服务写线程，但对读线程亲和性差一些。还有一种公平读写锁，它通过把等待锁的线程排队，以略微牺牲性能的方式，保证了某种线程不会饿死，通用性更佳。</p><p>另外，读写锁既可以使用互斥锁实现，也可以使用自旋锁实现，我们应根据场景来选择合适的实现。</p><p>当并发访问共享资源，冲突概率非常低的时候，可以选择无锁编程。它在Web和数据库中有广泛的应用。然而，一旦冲突概率上升，就不适合使用它，因为它解决冲突的重试成本非常高。</p><p>总之，不管使用哪种锁，锁范围内的代码都应尽量的少，执行速度要快。在此之上，选择更合适的锁能够大幅提升高并发服务的性能！</p><h2>思考题</h2><p>最后，留给你一道思考题，上一讲我们提到协程中也有各种锁，你觉得协程中可以用自旋锁或者互斥锁吗？如果不可以，那协程中的锁是怎么实现的？欢迎你在留言区与我探讨。</p><p>感谢阅读，如果你觉得这节课对你有一些启发，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"05 | 协程：如何快速地实现高并发服务？","id":233629},"right":{"article_title":"07 | 性能好，效率高的一对多通讯该如何实现？","id":235302}},"comments":[{"had_liked":false,"id":217636,"user_name":"王超","can_delete":false,"product_type":"c1","uid":1107559,"ip_address":"","ucode":"653A7A49A3090F","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/67/59e81206.jpg","comment_is_top":false,"comment_ctime":1589553379,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"229222820067","product_id":100051201,"comment_content":"老师，有一个建议，是否可以在每一讲的第一个评论里讲解一下上一讲的思考问题","like_count":54},{"had_liked":false,"id":216275,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1589212897,"is_pvip":true,"replies":[{"id":"90960","content":"完全正确！","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599811332,"ip_address":"","comment_id":216275,"utype":1}],"discussion_count":7,"race_medal":0,"score":"83193591521","product_id":100051201,"comment_content":"总结下,我的理解 不对的欢迎指出:<br>四种IO模型<br>同步阻塞: 调用了阻塞的系统调用,内核会将线程置于休眠状态,并进行调度<br>同步非阻塞: 调用了非阻塞的系统调用,系统调用会立刻返回结果.通过重试的方式来不断获取结果,直到满足条件<br>异步阻塞:  会通过注册回调函数来实现结果的通知,注册完成线程会被内核挂起进入休眠状态<br>异步非阻塞: 同上,但注册完成后线程可以继续执行.<br><br>同步: 等待结果的返回才能进行下一步操作<br>异步:不一直等待结果的返回,而是通过向IO调度框架注册回调函数的方式来进行通知.通过框架来实现<br>阻塞: 不会立刻返回结果,此时线程会被内核挂起,让出cpu<br>非阻塞: 立刻返回结果<br>异步非阻塞放在一起用才能起到并发的作用.<br>同步非阻塞也可以实现并发.<br>同步与异步是针对编程方式的<br>阻塞与非阻塞的因为系统调用的实现方式导致的<br><br>协程: 将异步的注册回调函数以及非阻塞的系统调用来封装成一个阻塞的协程,即将等待回调时通过线程中的上下文切换来实现线程的无感知切换,感觉有点类似于异步阻塞,但阻塞是用户态的,也就是是由用户态来进行线程的虚拟的休眠(通过线程上下文的切换)<br><br>锁<br>两种基本锁<br>自旋锁 : 通过CAS函数来实现,将观察锁的状态与获取锁合并为一个硬件级的指令,通过在用户态来观察锁的状态,并进行获取锁,来避免因获取锁失败导致的线程休眠.获取锁失败会忙等待,即过一段时间在去获取锁(通过循环实现等待时间),通过pause指令来减少循环等待时的耗电量.<br><br>互斥锁: 一种独占锁,获取失败的线程会被内核置为休眠状态.<br><br>其他锁都是通过这两种锁实现的<br>读写锁<br>读优先锁<br>写优先锁<br><br>乐观锁:乐观锁并没有加锁,而是通过执行完成后的版本号对比来实现","like_count":20,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494744,"discussion_content":"完全正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599811332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1271724,"avatar":"https://static001.geekbang.org/account/avatar/00/13/67/ac/af895343.jpg","nickname":"刘耳总","note":"","ucode":"6D157E6E960075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264461,"discussion_content":"在Python里的协程await db call 这种应该算是异步阻塞吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589328737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1446375,"avatar":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","nickname":"book尾汁","note":"","ucode":"AE2B8DFC643ACC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1271724,"avatar":"https://static001.geekbang.org/account/avatar/00/13/67/ac/af895343.jpg","nickname":"刘耳总","note":"","ucode":"6D157E6E960075","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264757,"discussion_content":"我觉得是异步非阻塞，在用户态完成了上下文的切换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589346477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":264461,"ip_address":""},"score":264757,"extra":""}]},{"author":{"id":1271724,"avatar":"https://static001.geekbang.org/account/avatar/00/13/67/ac/af895343.jpg","nickname":"刘耳总","note":"","ucode":"6D157E6E960075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264460,"discussion_content":"非阻塞: 立刻返回结果\n这个非阻塞怎么理解呢？返回的是什么数据？用户线程继续干别的之后怎么拿到之前调用的结果呢，通过之前的异步函数回调？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589328690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261959,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","nickname":"Better me","note":"","ucode":"CADF08D357489A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264285,"discussion_content":"对非阻塞：立刻返回结果有点疑问，那异步非阻塞还需要注册回调函数等待通知返回结果吗？这样看注册回调函数是不是显得很多余","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589296889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1446375,"avatar":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","nickname":"book尾汁","note":"","ucode":"AE2B8DFC643ACC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1261959,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","nickname":"Better me","note":"","ucode":"CADF08D357489A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":264402,"discussion_content":"额，我说的非阻塞立刻返回结果是指这次系统调用的结果，此时不一定有数据，如果没有数据就会返回错误信息，需要调用者来做出判断是否重试，异步非阻塞是注册完回调函数后，系统调用立刻返回用户态函数，我是这样理解的线程也就是一个taskstruct结构里面有线程对应的线程栈以及内核栈，线程调用系统调用从用户态切换到内核态，如果是阻塞的io调用那么此时该线程会schedule被挂起，将CPU让给其他程序等到io满足时会将该线程标记为running状态放到调度队列里，等到该线程获得cpu时会从内核态返回到用户态，从挂起到再次获得cpu这个过程就是被阻塞的，然后如果是非阻塞的系统调用那么线程进入内核态的函数栈经过层层调用最终会得到一个结果，此时立刻返回用户态的函数栈，这样线程就不会阻塞了，异步io我也不太理解老师图中说的那个向异步框架注册回调函数，我的理解是线程调用了异步框架的函数，由异步框架向内核注册处理函数，注册使用的是非阻塞的系统调用这样就能立刻返回结果，而系统调用返回后进入的是异步框架函数的处理逻辑，这里面可能会切换到别的请求的上下文去，这样就完成了用户态的函数切换，如果是异步阻塞的话，那么这个taskstruct就会被schedule，让出cpu，线程会被置为sleeping状态，等到io满足时，当这个线程获得cpu时会从系统调用返回到异步框架的函数，就进入了异步框架处理函数的逻辑了，但因为系统调用是阻塞的，所以整个线程函数会被阻塞","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589305026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":264285,"ip_address":""},"score":264402,"extra":""},{"author":{"id":1446375,"avatar":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","nickname":"book尾汁","note":"","ucode":"AE2B8DFC643ACC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1261959,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","nickname":"Better me","note":"","ucode":"CADF08D357489A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":264405,"discussion_content":"感觉io满足时通知也是异步框架，异步框架在来决定何时调用处理函数，不清楚可以直接向内核注册io处理函数吗，有知道的同学说下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589306608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":264285,"ip_address":""},"score":264405,"extra":""}]}]},{"had_liked":false,"id":218305,"user_name":"分清云淡","can_delete":false,"product_type":"c1","uid":1269873,"ip_address":"","ucode":"7045AE6BF72D31","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/71/895ee6cf.jpg","comment_is_top":false,"comment_ctime":1589774788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78899186116","product_id":100051201,"comment_content":"CPU 提供的 PAUSE 指令，减少循环等待时的耗电量---- 这个减少耗电量只是一个小原因，更主要的是为了避免 cache ping-pong. mysql的innodb在抢锁失败后还将 pause * innodb_spin_wait_delay（也就是pause更久） ，然后再再次抢锁。 不同的cpu型号 pause 的指令周期也不一样，这样换了cpu的话 innodb的这种设计问题很大。","like_count":19},{"had_liked":false,"id":216441,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1589259558,"is_pvip":false,"replies":[{"id":"90965","content":"谢谢那时刻的分享","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599813233,"ip_address":"","comment_id":216441,"utype":1}],"discussion_count":3,"race_medal":0,"score":"35948997926","product_id":100051201,"comment_content":"Go里的自旋锁需要自己实现，方便协程调度。协程使用自旋锁的时候，这是spinLock 的Lock方法<br><br>for !atomic.CompareAndSwapUint32(sl, 0, 1) {<br>    runtime.Gosched()<br>}<br><br>其中runtime.Gosched，是把阻塞的协程调度出去，这样调度器可以执行其他协程。","like_count":9,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494818,"discussion_content":"谢谢那时刻的分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599813233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1356589,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh73kPzAKhz7YxUribqF6QKFiahhVAbwpgVLSRicA68c6ZFA7vUBJY1ves3LVvibrypROyI7awv47eSA/132","nickname":"ZYecho","note":"","ucode":"9D156DD30C581E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269018,"discussion_content":"这么实现感觉很奇怪 你可以看看官方mutex的实现 他也是内部包含自旋锁的实现，但是这个锁确实是堵塞的 而不是切换走的让出 我觉得自旋锁的使用场景不就是临界区短么 请问为什么会有这样的实现呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589857198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1593681,"avatar":"https://static001.geekbang.org/account/avatar/00/18/51/51/381876ab.jpg","nickname":"文康","note":"","ucode":"E1952B9DFB5DF4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1356589,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh73kPzAKhz7YxUribqF6QKFiahhVAbwpgVLSRicA68c6ZFA7vUBJY1ves3LVvibrypROyI7awv47eSA/132","nickname":"ZYecho","note":"","ucode":"9D156DD30C581E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398795,"discussion_content":"临界区短的通过自旋可以避免上下文切换带来的消耗，如果长时间自旋获取不到锁会进行休眠的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632842354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":269018,"ip_address":""},"score":398795,"extra":""}]}]},{"had_liked":false,"id":216155,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1589197655,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31653968727","product_id":100051201,"comment_content":"首先要知道，协程是用户态运行的，所以减少内核切换。而自旋锁和互斥锁其实都是有内核控制线程的访问，所以协程肯定不是使用互斥锁Mutex和自旋锁SpinLock实现的。<br>我想，协程之间的互相协作肯定也是有一种协商机制，之前在一篇博客看到好像是使用yield实现的，从而共享CPU使用权。","like_count":7,"discussions":[{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263579,"discussion_content":"协程是协作式的，不会抢占，只会主动让出，所以一般协程都是用在IO密集型场景，发起IO操作时，就会&#34;阻塞&#34;，主动让出，所以协程库要有能拦截这些IO操作api的能力，不能让操作系统去拦截，否则整个线程就挂起了。具体实现细节应该很多坑，我也没读过具体的库。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1589212206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362866,"discussion_content":"自璇锁也是内核控制访问？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617065887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216348,"user_name":"myrfy","can_delete":false,"product_type":"c1","uid":1169401,"ip_address":"","ucode":"2814BAE5D70098","user_header":"","comment_is_top":false,"comment_ctime":1589245366,"is_pvip":false,"replies":[{"id":"90964","content":"你好myrfy，谢谢你的提醒，这里确实没有表达清楚。协程用户态是不会用到自旋锁的，协程框架的锁常用CAS函数实现，当时想表达是这个意思，这里确实会让人误解，我马上联系编辑修改下。","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599812670,"ip_address":"","comment_id":216348,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23064081846","product_id":100051201,"comment_content":"“自旋锁开销少，在多核系统下一般不会主动产生线程切换，很适合异步、协程等在用户态切换请求的编程方式，有助于高并发服务充分利用多颗 CPU。“<br><br>这段描述是不是不太准确？协程在用户态由协程框架调度，自旋锁只会阻塞当前协程，导致其他协程不能获得执行权。<br><br>协程框架下的sleep等函数，都是框架提供的而不是操作系统提供的，其工作原理是将当前协程的唤醒时间告知协程框架调度器后主动让出当前协程，让其他协程有机会运行，当每一个协程发生主动切换时，协程框架会检测是否有等待唤醒的协程，若有则会按照一定的策略唤醒睡眠的协程。<br>","like_count":5,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494786,"discussion_content":"你好myrfy，谢谢你的提醒，这里确实没有表达清楚。协程用户态是不会用到自旋锁的，协程框架的锁常用CAS函数实现，当时想表达是这个意思，这里确实会让人误解，我马上联系编辑修改下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599812670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239570,"user_name":"abc","can_delete":false,"product_type":"c1","uid":1669811,"ip_address":"","ucode":"F043D17A5586F1","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK7zFlGjbeoWQjkTkOic6vWu0dXCudEia7GbyTpLuKfTj3sqCib1tIAqqx526ZzzKniauVghHDZTpCZFQ/132","comment_is_top":false,"comment_ctime":1596590073,"is_pvip":false,"replies":[{"id":"88717","content":"深度优化通常都与业务强相关。举个例子，当多个线程是基于范围（非争抢）消费数据时，那么有可能（或者就设计成这样）每个线程只处理数组中的部分数据，线程间互相不重合，这样就无须加锁。","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1596843232,"ip_address":"","comment_id":239570,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18776459257","product_id":100051201,"comment_content":"老师，我有一个问题请教一下，就是多线程对一个数组进行读写，除了加锁之外，怎么深度优化呢？","like_count":4,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503143,"discussion_content":"深度优化通常都与业务强相关。举个例子，当多个线程是基于范围（非争抢）消费数据时，那么有可能（或者就设计成这样）每个线程只处理数组中的部分数据，线程间互相不重合，这样就无须加锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596843232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1669811,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK7zFlGjbeoWQjkTkOic6vWu0dXCudEia7GbyTpLuKfTj3sqCib1tIAqqx526ZzzKniauVghHDZTpCZFQ/132","nickname":"abc","note":"","ucode":"F043D17A5586F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297591,"discussion_content":"谢谢老师，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596979525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222065,"user_name":"fancion","can_delete":false,"product_type":"c1","uid":1121584,"ip_address":"","ucode":"9000895F6BE0E4","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/30/4a82c7af.jpg","comment_is_top":false,"comment_ctime":1590668307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18770537491","product_id":100051201,"comment_content":"协程的实现不是锁吧。是消息驱动排队处理的吧，基于akka思想","like_count":4},{"had_liked":false,"id":215978,"user_name":"孙志强","can_delete":false,"product_type":"c1","uid":1325997,"ip_address":"","ucode":"9C070F1E4EC6FF","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/ad/31193b83.jpg","comment_is_top":false,"comment_ctime":1589162325,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"18769031509","product_id":100051201,"comment_content":"一直以为CAS是乐观锁","like_count":4,"discussions":[{"author":{"id":1048433,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/71/c492b7fa.jpg","nickname":"来","note":"","ucode":"2612C1D888ED03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293975,"discussion_content":"CAS更像是一种思想，一种算法，在更新的时候只有条件中的值和原值相等才更新成功，否则更新不成功。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595749902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215934,"user_name":"陈政璋","can_delete":false,"product_type":"c1","uid":1220034,"ip_address":"","ucode":"168857D7414E5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/9d/c2/d35f89b0.jpg","comment_is_top":false,"comment_ctime":1589155676,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14474057564","product_id":100051201,"comment_content":"老师你好，文中开头提到必须弄清加锁成本以及锁发生概率，有没有可以量化的方法或者工具呢？","like_count":3},{"had_liked":false,"id":219067,"user_name":"Robust","can_delete":false,"product_type":"c1","uid":1113088,"ip_address":"","ucode":"79EA73E325945E","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/00/50b5cb51.jpg","comment_is_top":false,"comment_ctime":1589938989,"is_pvip":false,"replies":[{"id":"81096","content":"算，需要事先拿到锁才能修改数据的都算","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1590059834,"ip_address":"","comment_id":219067,"utype":1}],"discussion_count":5,"race_medal":0,"score":"10179873581","product_id":100051201,"comment_content":"自旋锁属于悲观锁吗？","like_count":2,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495669,"discussion_content":"算，需要事先拿到锁才能修改数据的都算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590059834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130666,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","nickname":"нáпの゛","note":"","ucode":"834FA877EFBAF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277651,"discussion_content":"面试刚好问到乐观锁和悲观锁，按老师说的互斥锁和自旋锁都是悲观锁，面试官好像不认同。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591086560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344609,"discussion_content":"我一直认为自璇锁是属于乐观锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611536459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1461264,"avatar":"","nickname":"InfoQ_e8fa90f8b254","note":"","ucode":"048C487477F0AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293369,"discussion_content":"一开始就认为数据不安全，要拿到锁才能执行是悲观锁，而开始认为数据是安全的，尝试执行属于乐观锁，这样看，自旋属于乐观锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595512345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285826,"discussion_content":"原来是这么定义悲观锁的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592963422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216016,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1589168292,"is_pvip":false,"replies":[{"id":"90971","content":"操作共享资源的代码段都要加锁","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599814561,"ip_address":"","comment_id":216016,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10179102884","product_id":100051201,"comment_content":"协程有些操作是使用线程池来实现的，需要加锁","like_count":2,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494638,"discussion_content":"操作共享资源的代码段都要加锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599814561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218441,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1589802359,"is_pvip":false,"replies":[{"id":"80913","content":"你好范闲，很久以前追过庆余年这部小说，好熟的名字。<br>是的，用户态协程需要用户态的代码，将锁重新实现一遍，其中实现时不能用到内核提供的系统调用","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1589935566,"ip_address":"","comment_id":218441,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884769655","product_id":100051201,"comment_content":"用户态的协程不能用互斥或者自旋，会进入内核态与其设计初衷相悖。Python里面用的yield","like_count":1,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495458,"discussion_content":"你好范闲，很久以前追过庆余年这部小说，好熟的名字。\n是的，用户态协程需要用户态的代码，将锁重新实现一遍，其中实现时不能用到内核提供的系统调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589935566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216706,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1589330788,"is_pvip":false,"replies":[{"id":"90927","content":"^_^","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1599786427,"ip_address":"","comment_id":216706,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884298084","product_id":100051201,"comment_content":"看的很带劲，就好像吃了个美妙的西瓜。","like_count":1,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494920,"discussion_content":"^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599786427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341339,"user_name":"凌云","can_delete":false,"product_type":"c1","uid":2677952,"ip_address":"","ucode":"069BE53EBA8BF7","user_header":"https://static001.geekbang.org/account/avatar/00/28/dc/c0/64bc9673.jpg","comment_is_top":false,"comment_ctime":1649556980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649556980","product_id":100051201,"comment_content":"当并发访问共享资源，冲突概率非常低的时候，可以选择无锁编程。但是生产上如何评估冲突概率？是根据并发量评估，还是根据什么？","like_count":0},{"had_liked":false,"id":340458,"user_name":"肥low","can_delete":false,"product_type":"c1","uid":1043480,"ip_address":"","ucode":"A158AFAAB8C742","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/18/bf7254d3.jpg","comment_is_top":false,"comment_ctime":1648822099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648822099","product_id":100051201,"comment_content":"我猜协程肯定是要用自旋锁的，因为用互斥锁不就违背协程的初衷了嘛","like_count":0},{"had_liked":false,"id":320953,"user_name":"李沛霖-程序猿","can_delete":false,"product_type":"c1","uid":1063957,"ip_address":"","ucode":"10CF0DBED2D220","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/15/71a2aca9.jpg","comment_is_top":false,"comment_ctime":1636596435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636596435","product_id":100051201,"comment_content":"锁的进入临界区要原子。在临界区怎么操作就自由了。","like_count":0},{"had_liked":false,"id":286021,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1617108833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617108833","product_id":100051201,"comment_content":"共享文档原来如此","like_count":0},{"had_liked":false,"id":230993,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1593561800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593561800","product_id":100051201,"comment_content":"自旋锁是因为需要拿到锁才能工作，所以是一种悲观锁，但里面的CAS指令应该是一种乐观锁的实现方式，这么理解是否正确？","like_count":0},{"had_liked":false,"id":229142,"user_name":"战斗机二虎🐯","can_delete":false,"product_type":"c1","uid":1157201,"ip_address":"","ucode":"8AB69AD2D76784","user_header":"https://static001.geekbang.org/account/avatar/00/11/a8/51/46a788b1.jpg","comment_is_top":false,"comment_ctime":1592906311,"is_pvip":false,"replies":[{"id":"84588","content":"没错^_^","user_name":"作者回复","user_name_real":"陶辉","uid":"1283912","ctime":1592956525,"ip_address":"","comment_id":229142,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592906311","product_id":100051201,"comment_content":"发现这段自旋锁代码用的nginx的实现😁","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499351,"discussion_content":"没错^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592956525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217075,"user_name":"小一日一","can_delete":false,"product_type":"c1","uid":1301097,"ip_address":"","ucode":"0A506C2B918C14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtVXiaJbfkpeXH4udkPUIlFte7z3HWMebdogk8jFpgFEkJ0ruGiawUMUcZj9RLpLkIWxV7QOzbHoSg/132","comment_is_top":false,"comment_ctime":1589417222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589417222","product_id":100051201,"comment_content":"当并发访问共享资源，冲突概率非常低的时候，可以选择无锁编程。<br><br>多低算非常低？能否给出个经验值？谢谢老师","like_count":0},{"had_liked":false,"id":216682,"user_name":"刘耳总","can_delete":false,"product_type":"c1","uid":1271724,"ip_address":"","ucode":"6D157E6E960075","user_header":"https://static001.geekbang.org/account/avatar/00/13/67/ac/af895343.jpg","comment_is_top":false,"comment_ctime":1589328742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589328742","product_id":100051201,"comment_content":"在Python里的协程await db call 这种应该算是异步阻塞吧？","like_count":0},{"had_liked":false,"id":216648,"user_name":"阿鼎","can_delete":false,"product_type":"c1","uid":1042634,"ip_address":"","ucode":"EE763513563F50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/ca/2a7cc193.jpg","comment_is_top":false,"comment_ctime":1589301086,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589301086","product_id":100051201,"comment_content":"请问老师<br>1，Windows下的临界区，先自旋，再互斥，这是最佳实践吗？<br>2，无锁队列，虽然队列本身使用cas，但队列的压入事件是不是还需要条件变量+锁。","like_count":0},{"had_liked":false,"id":216334,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1589244016,"is_pvip":false,"replies":[{"id":"90958","content":"主要是为了提升性能，当场景不同时，特别是加、解锁的成本不同，锁调用的频率不同时，换把合适的锁可以提升很大性能","user_name":"作者回复","comment_id":216334,"uid":"1283912","ip_address":"","utype":1,"ctime":1599811148,"user_name_real":"陶辉"}],"discussion_count":1,"race_medal":0,"score":"1589244016","product_id":100051201,"comment_content":"老师，锁为什么分类那么多，是从哪些维度来分的，比如从数据库来分，可以分为悲观和乐观锁，以及为什么这么分类呢？","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494780,"discussion_content":"主要是为了提升性能，当场景不同时，特别是加、解锁的成本不同，锁调用的频率不同时，换把合适的锁可以提升很大性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599811148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216278,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1589213540,"is_pvip":true,"replies":[{"id":"90957","content":"对的","user_name":"作者回复","comment_id":216278,"uid":"1283912","ip_address":"","utype":1,"ctime":1599811037,"user_name_real":"陶辉"}],"discussion_count":1,"race_medal":0,"score":"1589213540","product_id":100051201,"comment_content":"老师文中提到自旋锁通过在用户态来实现观察锁加锁解锁的操作,感觉协程中的锁可以通过CAS函数来实现,如果获取锁失败则进行协程的切换.","like_count":0,"discussions":[{"author":{"id":1283912,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","nickname":"陶辉","note":"","ucode":"F81A9087435953","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494747,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599811037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215939,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1589156355,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589156355","product_id":100051201,"comment_content":"在线程竞争不激烈的情况下乐观锁cas效率才会高，而且cas存在ABA问题，不过类似文中的CAS(lock, 0, pid)如果保证pid唯一，则不存在ABA问题。<br>请教一下老师，这里的pid代表的这个数可以是任意宽度的吗？我看有的解决ABA问题的方案是加版本号，这个具体怎么实现呢？有没有demo参考？","like_count":0,"discussions":[{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263305,"discussion_content":"每个线程有一个tid值，这是一个uint32类型的数字，在linux中使用pthread_self() 这样的syscall获取到现场tid，这个tid可以保证在进程内唯一的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589197850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}