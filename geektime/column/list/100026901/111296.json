{"id":111296,"title":"36 | Pandas & Numpy：策略与回测系统","content":"<p>大家好，我是景霄。</p><p>上节课，我们介绍了交易所的数据抓取，特别是orderbook和tick数据的抓取。今天这节课，我们考虑的是，怎么在这些历史数据上测试一个交易策略。</p><p>首先我们要明确，对于很多策略来说，我们上节课抓取的密集的orderbook和tick数据，并不能简单地直接使用。因为数据量太密集，包含了太多细节；而且长时间连接时，网络随机出现的不稳定，会导致丢失部分tick数据。因此，我们还需要进行合适的清洗、聚合等操作。</p><p>此外，为了进行回测，我们需要一个交易策略，还需要一个测试框架。目前已存在很多成熟的回测框架，但是为了Python学习，我决定带你搭建一个简单的回测框架，并且从中简单一窥Pandas的优势。</p><h2>OHLCV数据</h2><p>了解过一些股票交易的同学，可能知道K线这种东西。K线又称“蜡烛线”，是一种反映价格走势的图线。它的特色在于，一个线段内记录了多项讯息，相当易读易懂且实用有效，因此被广泛用于股票、期货、贵金属、数字货币等行情的技术分析。下面便是一个K线示意图。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/9b/470a68b8eaff3807efd89bc616e5659b.png?wh=730*320\" alt=\"\"></p><center>K线示意图</center><p>其中，每一个小蜡烛，都代表着当天的开盘价（Open）、最高价（High）、最低价（Low）和收盘价（Close），也就是我画的第二张图表示的这样。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/58/57/58ce87e32aa4655211da02ce88223757.png?wh=1200*1200\" alt=\"\"></p><center>K线的“小蜡烛” -- OHLC</center><p>类似的，除了日K线之外，还有周K线、小时K线、分钟K线等等。那么这个K线是怎么计算来的呢？</p><p>我们以小时K线图为例，还记得我们当时抓取的tick数据吗？也就是每一笔交易的价格和数量。那么，如果从上午10:00开始，我们开始积累tick的交易数据，以10:00开始的第一个交易作为Open数据，11:00前的最后一笔交易作为Close值，并把这一个小时最低和最高的成交价格分别作为High和Low的值，我们就可以绘制出这一个小时对应的“小蜡烛”形状了。</p><p>如果再加上这一个小时总的成交量（Volumn），就得到了OHLCV数据。</p><p>所以，如果我们一直抓取着tick底层原始数据，我们就能在上层聚合出1分钟K线、小时K线以及日、周k线等等。如果你对这一部分操作有兴趣，可以把此作为今天的课后作业来实践。</p><p>接下来，我们将使用Gemini从2015年到2019年7月这个时间内，BTC对USD每个小时的OHLCV数据，作为策略和回测的输入。你可以在<a href=\"https://github.com/caunion/simple_backtesting/blob/master/BTCUSD_GEMINI.csv\">这里</a>下载数据。</p><p>数据下载完成后，我们可以利用Pandas读取，比如下面这段代码。</p><pre><code>def assert_msg(condition, msg):\n    if not condition:\n        raise Exception(msg)\n    \ndef read_file(filename):\n    # 获得文件绝对路径\n    filepath = path.join(path.dirname(__file__), filename)\n    \n    # 判定文件是否存在\n    assert_msg(path.exists(filepath), &quot;文件不存在&quot;)\n    \n    # 读取CSV文件并返回\n    return pd.read_csv(filepath,\n                       index_col=0, \n                       parse_dates=True,\n                       infer_datetime_format=True)\n\nBTCUSD = read_file('BTCUSD_GEMINI.csv')\nassert_msg(BTCUSD.__len__() &gt; 0, '读取失败')\nprint(BTCUSD.head())\n\n\n########## 输出 ##########\nTime                 Symbol      Open      High       Low     Close     Volume\nDate                                                                          \n2019-07-08 00:00:00  BTCUSD  11475.07  11540.33  11469.53  11506.43  10.770731\n2019-07-07 23:00:00  BTCUSD  11423.00  11482.72  11423.00  11475.07  32.996559\n2019-07-07 22:00:00  BTCUSD  11526.25  11572.74  11333.59  11423.00  48.937730\n2019-07-07 21:00:00  BTCUSD  11515.80  11562.65  11478.20  11526.25  25.323908\n2019-07-07 20:00:00  BTCUSD  11547.98  11624.88  11423.94  11515.80  63.211972\n</code></pre><p>这段代码提供了两个工具函数。</p><ul>\n<li>一个是read_file，它的作用是，用pandas读取csv文件。</li>\n<li>另一个是assert_msg，它的作用类似于assert，如果传入的条件（contidtion）为否，就会抛出异常。不过，你需要提供一个参数，用于指定要抛出的异常信息。</li>\n</ul><h2>回测框架</h2><p>说完了数据，我们接着来看回测数据。常见的回测框架有两类。一类是向量化回测框架，它通常基于Pandas+Numpy来自己搭建计算核心；后端则是用MySQL或者MongoDB作为源。这种框架通过Pandas+Numpy对OHLC数组进行向量运算，可以在较长的历史数据上进行回测。不过，因为这类框架一般只用OHLC，所以模拟会比较粗糙。</p><p>另一类则是事件驱动型回测框架。这类框架，本质上是针对每一个tick的变动或者orderbook的变动生成事件；然后，再把一个个事件交给策略进行执行。因此，虽然它的拓展性很强，可以允许更加灵活的策略，但回测速度是很慢的。</p><p>我们想要学习量化交易，使用大型成熟的回测框架，自然是第一选择。</p><ul>\n<li>比如Zipline，就是一个热门的事件驱动型回测框架，背后有大型社区和文档的支持。</li>\n<li>PyAlgoTrade也是事件驱动的回测框架，文档相对完整，整合了知名的技术分析（Techique Analysis）库TA-Lib。在速度和灵活方面，它比Zipline 强。不过，它的一大硬伤是不支持 Pandas 的模块和对象。</li>\n</ul><p>显然，对于我们Python学习者来说，第一类也就是向量型回测框架，才是最适合我们练手的项目了。那么，我们就开始吧。</p><p>首先，我先为你梳理下回测流程，也就是下面五步：</p><ol>\n<li>读取OHLC数据；</li>\n<li>对OHLC进行指标运算；</li>\n<li>策略根据指标向量决定买卖；</li>\n<li>发给模拟的”交易所“进行交易；</li>\n<li>最后，统计结果。</li>\n</ol><p>对此，使用之前学到的面向对象思维方式，我们可以大致抽取三个类：</p><ul>\n<li>交易所类（ ExchangeAPI）：负责维护账户的资金和仓位，以及进行模拟的买卖；</li>\n<li>策略类（Strategy）：负责根据市场信息生成指标，根据指标决定买卖；</li>\n<li>回测类框架（Backtest）：包含一个策略类和一个交易所类，负责迭代地对每个数据点调用策略执行。</li>\n</ul><p>接下来，我们先从最外层的大框架开始。这样的好处在于，我们是从上到下、从外往内地思考，虽然还没有开始设计依赖项（Backtest的依赖项是ExchangeAPI和Strategy），但我们可以推测出它们应有的接口形式。推测接口的本质，其实就是推测程序的输入。</p><p>这也是我在一开始提到过的，对于程序这个“黑箱”，你在一开始设计的时候，就要想好输入和输出。</p><p>回到最外层Backtest类。我们需要知道，输出是最后的收益，那么显然，输入应该是初始输入的资金数量（cash）。</p><p>此外，为了模拟得更加真实，我们还要考虑交易所的手续费（commission）。手续费的多少取决于券商（broker）或者交易所，比如我们买卖股票的券商手续费可能是万七，那么就是0.0007。但是在比特币交易领域，手续费通常会稍微高一点，可能是千分之二左右。当然，无论怎么多，一般也不会超过5 %。否则我们大家交易几次就破产了，也就不会有人去交易了。</p><p>这里说一句题外话，不知道你有没有发现，无论数字货币的价格是涨还是跌，总有一方永远不亏，那就是交易所。因为只要有人交易，他们就有白花花的银子进账。</p><p>回到正题，至此，我们就确定了Backtest的输入和输出。</p><p>它的输入是：</p><ul>\n<li>OHLC数据；</li>\n<li>初始资金；</li>\n<li>手续费率；</li>\n<li>交易所类；</li>\n<li>策略类。</li>\n</ul><p>输出则是：</p><ul>\n<li>最后剩余市值。</li>\n</ul><p>对此，你可以参考下面这段代码：</p><pre><code>class Backtest:\n    &quot;&quot;&quot;\n    Backtest回测类，用于读取历史行情数据、执行策略、模拟交易并估计\n    收益。\n\n    初始化的时候调用Backtest.run来时回测\n\n    instance, or `backtesting.backtesting.Backtest.optimize` to\n    optimize it.\n    &quot;&quot;&quot;\n\n    def __init__(self,\n                 data: pd.DataFrame,\n                 strategy_type: type(Strategy),\n                 broker_type: type(ExchangeAPI),\n                 cash: float = 10000,\n                 commission: float = .0):\n        &quot;&quot;&quot;\n        构造回测对象。需要的参数包括：历史数据，策略对象，初始资金数量，手续费率等。\n        初始化过程包括检测输入类型，填充数据空值等。\n\n        参数：\n        :param data:            pd.DataFrame        pandas Dataframe格式的历史OHLCV数据\n        :param broker_type:     type(ExchangeAPI)   交易所API类型，负责执行买卖操作以及账户状态的维护\n        :param strategy_type:   type(Strategy)      策略类型\n        :param cash:            float               初始资金数量\n        :param commission:       float               每次交易手续费率。如2%的手续费此处为0.02\n        &quot;&quot;&quot;\n\n        assert_msg(issubclass(strategy_type, Strategy), 'strategy_type不是一个Strategy类型')\n        assert_msg(issubclass(broker_type, ExchangeAPI), 'strategy_type不是一个Strategy类型')\n        assert_msg(isinstance(commission, Number), 'commission不是浮点数值类型')\n\n        data = data.copy(False)\n\n        # 如果没有Volumn列，填充NaN\n        if 'Volume' not in data:\n            data['Volume'] = np.nan\n\n        # 验证OHLC数据格式\n        assert_msg(len(data.columns &amp; {'Open', 'High', 'Low', 'Close', 'Volume'}) == 5,\n                   (&quot;输入的`data`格式不正确，至少需要包含这些列：&quot;\n                    &quot;'Open', 'High', 'Low', 'Close'&quot;))\n\n        # 检查缺失值\n        assert_msg(not data[['Open', 'High', 'Low', 'Close']].max().isnull().any(),\n            ('部分OHLC包含缺失值，请去掉那些行或者通过差值填充. '))\n\n        # 如果行情数据没有按照时间排序，重新排序一下\n        if not data.index.is_monotonic_increasing:\n            data = data.sort_index()\n\n        # 利用数据，初始化交易所对象和策略对象。\n        self._data = data  # type: pd.DataFrame\n        self._broker = broker_type(data, cash, commission)\n        self._strategy = strategy_type(self._broker, self._data)\n        self._results = None\n\n    def run(self):\n        &quot;&quot;&quot;\n        运行回测，迭代历史数据，执行模拟交易并返回回测结果。\n        Run the backtest. Returns `pd.Series` with results and statistics.\n\n        Keyword arguments are interpreted as strategy parameters.\n        &quot;&quot;&quot;\n        strategy = self._strategy\n        broker = self._broker\n\n        # 策略初始化\n        strategy.init()\n\n        # 设定回测开始和结束位置\n        start = 100\n        end = len(self._data)\n\n        # 回测主循环，更新市场状态，然后执行策略\n        for i in range(start, end):\n            # 注意要先把市场状态移动到第i时刻，然后再执行策略。\n            broker.next(i)\n            strategy.next(i)\n\n        # 完成策略执行之后，计算结果并返回\n        self._results = self._compute_result(broker)\n        return self._results\n\n    def _compute_result(self, broker):\n        s = pd.Series()\n        s['初始市值'] = broker.initial_cash\n        s['结束市值'] = broker.market_value\n        s['收益'] = broker.market_value - broker.initial_cash\n        return s\n</code></pre><p>这段代码有点长，但是核心其实就两部分。</p><ul>\n<li>初始化函数（<strong>init</strong>）：传入必要参数，对OHLC数据进行简单清洗、排序和验证。我们从不同地方下载的数据，可能格式不一样；而排序的方式也可能是从前往后。所以，这里我们把数据统一设置为按照时间从之前往现在的排序。</li>\n<li>执行函数（run）：这是回测框架的主要循环部分，核心是更新市场还有更新策略的时间。迭代完成所有的历史数据后，它会计算收益并返回。</li>\n</ul><p>你应该注意到了，此时，我们还没有定义策略和交易所API的结构。不过，通过回测的执行函数，我们可以确定这两个类的接口形式。</p><p>策略类（Strategy）的接口形式为：</p><ul>\n<li>初始化函数init()，根据历史数据进行指标（Indicator）计算。</li>\n<li>步进函数next()，根据当前时间和指标，决定买卖操作，并发给交易所类执行。</li>\n</ul><p>交易所类（ExchangeAPI）的接口形式为：</p><ul>\n<li>步进函数next()，根据当前时间，更新最新的价格；</li>\n<li>买入操作buy()，买入资产；</li>\n<li>卖出操作sell()，卖出资产。</li>\n</ul><h2>交易策略</h2><p>接下来我们来看交易策略。交易策略的开发是一个非常复杂的学问。为了达到学习的目的，我们来想一个简单的策略——移动均值交叉策略。</p><p>为了了解这个策略，我们先了解一下，什么叫做简单移动均值（Simple Moving Average，简称为SMA，以下皆用SMA表示简单移动均值）。我们知道，N个数的序列  x[0]、x[1] .……  x[N]  的均值，就是这N个数的和除以N。</p><p>现在，我假设一个比较小的数K，比N小很多。我们用一个K大小的滑动窗口，在原始的数组上滑动。通过对每次框住的K个元素求均值，我们就可以得到，原始数组的窗口大小为K的SMA了。</p><p>SMA，实质上就是对原始数组进行了一个简单平滑处理。比如，某支股票的价格波动很大，那么，我们用SMA平滑之后，就会得到下面这张图的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/0f/b543927903fbbaa33980a2046651530f.png?wh=1204*706\" alt=\"\"></p><center>某个投资品价格的SMA，窗口大小为50</center><p>你可以看出，如果窗口大小越大，那么SMA应该越平滑，变化越慢；反之，如果SMA比较小，那么短期的变化也会越快地反映在SMA上。</p><p>于是，我们想到，能不能对投资品的价格设置两个指标呢？这俩指标，一个是小窗口的SMA，一个是大窗口的SMA。</p><ul>\n<li>如果小窗口的SMA曲线从下面刺破或者穿过大窗口SMA，那么说明，这个投资品的价格在短期内快速上涨，同时这个趋势很强烈，可能是一个买入的信号；</li>\n<li>反之，如果大窗口的SMA从下方突破小窗口SMA，那么说明，投资品的价格在短期内快速下跌，我们应该考虑卖出。</li>\n</ul><p>下面这幅图，就展示了这两种情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/66/408ff342683f6ac1af798ba3d488c266.png?wh=1161*841\" alt=\"\"></p><p>明白了这里的概念和原理后，接下来的操作就不难了。利用Pandas，我们可以非常简单地计算SMA和SMA交叉。比如，你可以引入下面两个工具函数：</p><pre><code>def SMA(values, n):\n    &quot;&quot;&quot;\n    返回简单滑动平均\n    &quot;&quot;&quot;\n    return pd.Series(values).rolling(n).mean()\n\ndef crossover(series1, series2) -&gt; bool:\n    &quot;&quot;&quot;\n    检查两个序列是否在结尾交叉\n    :param series1:  序列1\n    :param series2:  序列2\n    :return:         如果交叉返回True，反之False\n    &quot;&quot;&quot;\n    return series1[-2] &lt; series2[-2] and series1[-1] &gt; series2[-1]\n</code></pre><p>如代码所示，对于输入的一个数组，Pandas的rolling(k)函数，可以方便地计算窗内口大小为K的SMA数组；而想要检查某个时刻两个SMA是否交叉，你只需要查看两个数组末尾的两个元素即可。</p><p>那么，基于此，我们就可以开发出一个简单的策略了。下面这段代码表示策略的核心思想，我做了详细的注释，你理解起来应该没有问题：</p><pre><code>    def next(self, tick):\n        # 如果此时快线刚好越过慢线，买入全部\n        if crossover(self.sma1[:tick], self.sma2[:tick]):\n            self.buy()\n\n        # 如果是慢线刚好越过快线，卖出全部\n        elif crossover(self.sma2[:tick], self.sma1[:tick]):\n            self.sell()\n\n        # 否则，这个时刻不执行任何操作。\n        else:\n            pass\n</code></pre><p>说完策略的核心思想，我们开始搭建策略类的框子。</p><p>首先，我们要考虑到，策略类Strategy应该是一个可以被继承的类，同时应该包含一些固定的接口。这样，回测器才能方便地调用。</p><p>于是，我们可以定义一个Strategy抽象类，包含两个接口方法init和next，分别对应我们前面说的指标计算和步进函数。不过注意，抽象类是不能被实例化的。所以，我们必须定义一个具体的子类，同时实现了init和next方法才可以。</p><p>这个类的定义，你可以参考下面代码的实现：</p><pre><code>import abc\nimport numpy as np\nfrom typing import Callable\n\nclass Strategy(metaclass=abc.ABCMeta):\n    &quot;&quot;&quot;\n    抽象策略类，用于定义交易策略。\n\n    如果要定义自己的策略类，需要继承这个基类，并实现两个抽象方法：\n    Strategy.init\n    Strategy.next\n    &quot;&quot;&quot;\n    def __init__(self, broker, data):\n        &quot;&quot;&quot;\n        构造策略对象。\n\n        @params broker:  ExchangeAPI    交易API接口，用于模拟交易\n        @params data:    list           行情数据数据\n        &quot;&quot;&quot;\n        self._indicators = []\n        self._broker = broker  # type: _Broker\n        self._data = data  # type: _Data\n        self._tick = 0\n\n    def I(self, func: Callable, *args) -&gt; np.ndarray:\n        &quot;&quot;&quot;\n        计算买卖指标向量。买卖指标向量是一个数组，长度和历史数据对应；\n        用于判定这个时间点上需要进行&quot;买&quot;还是&quot;卖&quot;。\n\n        例如计算滑动平均：\n        def init():\n            self.sma = self.I(utils.SMA, self.data.Close, N)\n        &quot;&quot;&quot;\n        value = func(*args)\n        value = np.asarray(value)\n        assert_msg(value.shape[-1] == len(self._data.Close), '指示器长度必须和data长度相同')\n\n        self._indicators.append(value)\n        return value\n\n    @property\n    def tick(self):\n        return self._tick\n\n    @abc.abstractmethod\n    def init(self):\n        &quot;&quot;&quot;\n        初始化策略。在策略回测/执行过程中调用一次，用于初始化策略内部状态。\n        这里也可以预计算策略的辅助参数。比如根据历史行情数据：\n        计算买卖的指示器向量；\n        训练模型/初始化模型参数\n        &quot;&quot;&quot;\n        pass\n\n    @abc.abstractmethod\n    def next(self, tick):\n        &quot;&quot;&quot;\n        步进函数，执行第tick步的策略。tick代表当前的&quot;时间&quot;。比如data[tick]用于访问当前的市场价格。\n        &quot;&quot;&quot;\n        pass\n\n    def buy(self):\n        self._broker.buy()\n\n    def sell(self):\n        self._broker.sell()\n\n    @property\n    def data(self):\n        return self._data\n</code></pre><p>为了方便访问成员，我们还定义了一些Python property。同时，我们的买卖请求是由策略类发出、由交易所API来执行的，所以我们的策略类里依赖于ExchangeAPI类。</p><p>现在，有了这个框架，我们实现移动均线交叉策略就很简单了。你只需要在init函数中，定义计算大小窗口SMA的逻辑；同时，在next函数中完成交叉检测和买卖调用就行了。具体实现，你可以参考下面这段代码：</p><pre><code>from utils import assert_msg, crossover, SMA\n\nclass SmaCross(Strategy):\n    # 小窗口SMA的窗口大小，用于计算SMA快线\n    fast = 10\n\n    # 大窗口SMA的窗口大小，用于计算SMA慢线\n    slow = 20\n\n    def init(self):\n        # 计算历史上每个时刻的快线和慢线\n        self.sma1 = self.I(SMA, self.data.Close, self.fast)\n        self.sma2 = self.I(SMA, self.data.Close, self.slow)\n\n    def next(self, tick):\n        # 如果此时快线刚好越过慢线，买入全部\n        if crossover(self.sma1[:tick], self.sma2[:tick]):\n            self.buy()\n\n        # 如果是慢线刚好越过快线，卖出全部\n        elif crossover(self.sma2[:tick], self.sma1[:tick]):\n            self.sell()\n\n        # 否则，这个时刻不执行任何操作。\n        else:\n            pass\n</code></pre><h2>模拟交易</h2><p>到这里，我们的回测就只差最后一块儿了。胜利就在眼前，我们继续加油。</p><p>我们前面提到过，交易所类负责模拟交易，而模拟的基础，就是需要当前市场的价格。这里，我们可以用OHLC中的Close，作为那个时刻的价格。</p><p>此外，为了简化设计，我们假设买卖操作都利用的是当前账户的所有资金、仓位，且市场容量足够大。这样，我们的下单请求就能够马上完全执行。</p><p>也别忘了手续费这个大头。考虑到有手续费的情况，此时，我们最核心的买卖函数应该怎么来写呢？</p><p>我们一起来想这个问题。假设，我们现在有1000.0元，此时BTC的价格是100.00元（当然没有这么好的事情啊，这里只是假设），并且交易手续费为1%。那么，我们能买到多少BTC呢？</p><p>我们可以采用这种算法：</p><pre><code>买到的数量 = 投入的资金 * (1.0 - 手续费) / 价格\n</code></pre><p>那么此时，你就能收到9.9个BTC。</p><p>类似的，卖出的时候结算方式如下，也不难理解：</p><pre><code>卖出的收益 = 持有的数量 * 价格 *  (1.0 - 手续费)\n</code></pre><p>所以，最终模拟交易所类的实现，你可以参考下面这段代码：</p><pre><code>from utils import read_file, assert_msg, crossover, SMA\n\nclass ExchangeAPI:\n    def __init__(self, data, cash, commission):\n        assert_msg(0 &lt; cash, &quot;初始现金数量大于0，输入的现金数量：{}&quot;.format(cash))\n        assert_msg(0 &lt;= commission &lt;= 0.05, &quot;合理的手续费率一般不会超过5%，输入的费率：{}&quot;.format(commission))\n        self._inital_cash = cash\n        self._data = data\n        self._commission = commission\n        self._position = 0\n        self._cash = cash\n        self._i = 0\n\n    @property\n    def cash(self):\n        &quot;&quot;&quot;\n        :return: 返回当前账户现金数量\n        &quot;&quot;&quot;\n        return self._cash\n\n    @property\n    def position(self):\n        &quot;&quot;&quot;\n        :return: 返回当前账户仓位\n        &quot;&quot;&quot;\n        return self._position\n\n    @property\n    def initial_cash(self):\n        &quot;&quot;&quot;\n        :return: 返回初始现金数量\n        &quot;&quot;&quot;\n        return self._inital_cash\n\n    @property\n    def market_value(self):\n        &quot;&quot;&quot;\n        :return: 返回当前市值\n        &quot;&quot;&quot;\n        return self._cash + self._position * self.current_price\n\n    @property\n    def current_price(self):\n        &quot;&quot;&quot;\n        :return: 返回当前市场价格\n        &quot;&quot;&quot;\n        return self._data.Close[self._i]\n\n    def buy(self):\n        &quot;&quot;&quot;\n        用当前账户剩余资金，按照市场价格全部买入\n        &quot;&quot;&quot;\n        self._position = float(self._cash / (self.current_price * (1 + self._commission)))\n        self._cash = 0.0\n\n    def sell(self):\n        &quot;&quot;&quot;\n        卖出当前账户剩余持仓\n        &quot;&quot;&quot;\n        self._cash += float(self._position * self.current_price * (1 - self._commission))\n        self._position = 0.0\n\n    def next(self, tick):\n        self._i = tick\n</code></pre><p>其中的current_price（当前价格），可以方便地获得模拟交易所当前时刻的商品价格；而market_value，则可以获得当前总市值。在初始化函数的时候，我们检查手续费率和输入的现金数量，是不是在一个合理的范围。</p><p>有了所有的这些部分，我们就可以来模拟回测啦！</p><p>首先，我们设置初始资金量为10000.00美元，交易所手续费率为0。这里你可以猜一下，如果我们从2015年到现在，都按照SMA来买卖，现在应该有多少钱呢？</p><pre><code>def main():\n    BTCUSD = read_file('BTCUSD_GEMINI.csv')\n    ret = Backtest(BTCUSD, SmaCross, ExchangeAPI, 10000.0, 0.00).run()\n    print(ret)\n\nif __name__ == '__main__':\n    main()\n</code></pre><p>铛铛铛，答案揭晓，程序将输出：</p><pre><code>初始市值     10000.000000\n结束市值     576361.772884\n收益         566361.772884\n</code></pre><p>哇，结束时，我们将有57万美元，翻了整整57倍啊！简直不要太爽。不过，等等，这个手续费率为0，实在是有点碍眼，因为根本不可能啊。我们现在来设一个比较真实的值吧，大概千分之三，然后再来试试：</p><pre><code>初始市值    10000.000000\n结束市值     2036.562001\n收益      -7963.437999\n</code></pre><p>什么鬼？我们变成赔钱了，只剩下2000美元了！这是真的吗？</p><p>这是真的，也是假的。</p><p>我说的“真”是指，如果你真的用SMA交叉这种简单的方法去交易，那么手续费摩擦和滑点等因素，确实可能让你的高频策略赔钱。</p><p>而我说是“假”是指，这种模拟交易的方式非常粗糙。真实的市场情况，并非这么理想——比如买卖请求永远马上执行；再比如，我们在市场中进行交易的同时不会影响市场价格等，这些理想情况都是不可能的。所以，很多时候，回测永远赚钱，但实盘马上赔钱。</p><h2>总结</h2><p>这节课，我们继承上一节，介绍了回测框架的分类、数据的格式，并且带你从头开始写了一个简单的回测系统。你可以把今天的代码片段“拼”起来，这样就会得到一个简化的回测系统样例。同时，我们实现了一个简单的交易策略，并且在真实的历史数据上运行了回测结果。我们观察到，在加入手续费后，策略的收益情况发生了显著的变化。</p><h2>思考题</h2><p>最后，给你留一个思考题。之前我们介绍了如何抓取tick数据，你可以根据抓取的tick数据，生成5分钟、每小时和每天的OHLCV数据吗？欢迎在留言区写下你的答案和问题，也欢迎你把这篇文章分享出去。</p>","comments":[{"had_liked":false,"id":119465,"user_name":"Jingxiao","can_delete":false,"product_type":"c1","uid":1259521,"ip_address":"","ucode":"EB966BB87132F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","comment_is_top":true,"comment_ctime":1564601627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"9.2233722102181007e+18","product_id":100026901,"comment_content":"整理后的代码在这里：https:&#47;&#47;github.com&#47;Eyelidstl&#47;GeekTimePythonClass","like_count":41},{"had_liked":false,"id":119157,"user_name":"方向","can_delete":false,"product_type":"c1","uid":1261031,"ip_address":"","ucode":"CBB283D30C8C09","user_header":"https://static001.geekbang.org/account/avatar/00/13/3d/e7/e4b4afcc.jpg","comment_is_top":false,"comment_ctime":1564532657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31629303729","product_id":100026901,"comment_content":"有没有整理后的源代码，想统一查看","like_count":8},{"had_liked":false,"id":119270,"user_name":"fy","can_delete":false,"product_type":"c1","uid":1152186,"ip_address":"","ucode":"EDB661C3A05910","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jsMMDDzhbsTzhicsGZiaeV0PWSnAS0fBlb1r6CsuB32vr3hRwV9UubmfHQx45v7jtaXajPlQ8kQ17b3zpQzHmqVw/132","comment_is_top":false,"comment_ctime":1564546967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18744416151","product_id":100026901,"comment_content":"老师，可以用git管理每次分析的代码么？","like_count":5},{"had_liked":false,"id":240926,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1597120930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10187055522","product_id":100026901,"comment_content":"    def buy(self):<br>        &quot;&quot;&quot;<br>        用当前账户剩余资金，按照市场价格全部买入<br>        :return:<br>        &quot;&quot;&quot;<br>        self._position = float(self._cash &#47; (self.current_price * (1 + self._commission)))<br>        self._cash = 0.0<br><br>老师，这里应该是：self._position = float(self._cash * (1-self._commission) &#47; (self.current_price))吧？","like_count":2},{"had_liked":false,"id":240607,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1597003503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186938095","product_id":100026901,"comment_content":"assert_msg(isinstance(commission, Number), &#39;commission不是浮点数值类型&#39;)为何不是用float而是number","like_count":3},{"had_liked":false,"id":188852,"user_name":"Geek_kuntena","can_delete":false,"product_type":"c1","uid":1910301,"ip_address":"","ucode":"AC13029CB7473F","user_header":"","comment_is_top":false,"comment_ctime":1584426546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174361138","product_id":100026901,"comment_content":"pandas 的 resample 函数方便的进行合成大周期的k线数据","like_count":3},{"had_liked":false,"id":177512,"user_name":"宋强","can_delete":false,"product_type":"c1","uid":1564605,"ip_address":"","ucode":"119A0B00ABDA7B","user_header":"","comment_is_top":false,"comment_ctime":1581408196,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5876375492","product_id":100026901,"comment_content":"按照代码逻辑实现了一遍，发现即便是交易经手费是0，最后的收益也很大取决于数据本身。策略并不一定能盈利","like_count":2,"discussions":[{"author":{"id":2117451,"avatar":"https://static001.geekbang.org/account/avatar/00/20/4f/4b/74696428.jpg","nickname":"肖国强","note":"","ucode":"96979DB3F497F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298236,"discussion_content":"嗯嗯，从245涨到10000多，本身就涨了40多倍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597225232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146699,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1572610517,"is_pvip":false,"replies":[{"id":"56795","content":"加油","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1572803933,"ip_address":"","comment_id":146699,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867577813","product_id":100026901,"comment_content":"这章比较难了，照着课程敲代码，调了半天可以运行了，结果却不对。把老师的代码下载回来仔细研究，终于清楚一些了。","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472981,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572803933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129930,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1567329095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862296391","product_id":100026901,"comment_content":"SMA函数只做了一件事：pd.Series(values).rolling(n).mean()<br>将传入的values转成一位数组以n个数据为单位滚动切分取平均值，返回一个均值数组<br>SMA的调用位置：<br>SmaCross在继承Strategy后必须要重写的抽象方法init中：<br>self.sma1 = self.I(SMA, self.data.Close, self.fast)  # 用收盘价计算的10日均线<br>self.sma2 = self.I(SMA, self.data.Close, self.slow)  # 用收盘价计算的20日均线<br><br>提议：数据可视化更能直观表达实现策略的方案。","like_count":1},{"had_liked":false,"id":129917,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1567325887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862293183","product_id":100026901,"comment_content":"30日均线、10日均线、5日均线、小时、分钟...<br>大窗口SMA -&gt; 小窗口SMA<br>策略：小窗口SMA从下穿过大窗口SMA，买入。大窗口SMA从下方突破小窗口 SMA，卖出。<br>这要先看看股市的简单策略分析才能明白。刚开始看，完全不懂。。。","like_count":1},{"had_liked":false,"id":123165,"user_name":"长青","can_delete":false,"product_type":"c1","uid":1546235,"ip_address":"","ucode":"4B85C10B8D3DBA","user_header":"https://static001.geekbang.org/account/avatar/00/17/97/fb/7cfc315e.jpg","comment_is_top":false,"comment_ctime":1565618947,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5860586243","product_id":100026901,"comment_content":"老师iself._indicators.append(value)这一步有有什么意义呢   没大看明白。还有<br>buy和sell是不是应该在下一根K线执行才对？比如我指标计算时用的15分钟K线   在10:15分出现买卖信号后，应该在10:30执行操作 ，因为指标时根据收盘价计算的<br><br>","like_count":1,"discussions":[{"author":{"id":2117451,"avatar":"https://static001.geekbang.org/account/avatar/00/20/4f/4b/74696428.jpg","nickname":"肖国强","note":"","ucode":"96979DB3F497F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298237,"discussion_content":"你说的确实是，不过对回测结果应该影响不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597225350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324920,"user_name":"杨宇","can_delete":false,"product_type":"c1","uid":1014665,"ip_address":"","ucode":"EB74DF6E269F03","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","comment_is_top":false,"comment_ctime":1638717065,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638717065","product_id":100026901,"comment_content":"def __init__(self, data: pd.DataFrame, ...)<br>def crossover(series1, series2) -&gt; bool: ...<br>——方法参数、返回值，怎么带类型了，之前的课没教过这种写法吧？","like_count":0},{"had_liked":false,"id":311151,"user_name":"rock feng","can_delete":false,"product_type":"c1","uid":2693432,"ip_address":"","ucode":"8BEC1A0AF9BF9D","user_header":"","comment_is_top":false,"comment_ctime":1631089158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631089158","product_id":100026901,"comment_content":"这堂课，看得我迷糊，第一次接触量化交易，太多知识点....","like_count":0},{"had_liked":false,"id":292204,"user_name":"忧伤的胡萝卜","can_delete":false,"product_type":"c1","uid":2352625,"ip_address":"","ucode":"6881B0A6AED809","user_header":"https://static001.geekbang.org/account/avatar/00/23/e5/f1/880994da.jpg","comment_is_top":false,"comment_ctime":1620720673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620720673","product_id":100026901,"comment_content":"assert_msg(not data[[&#39;Open&#39;, &#39;High&#39;, &#39;Low&#39;, &#39;Close&#39;]].max().isnull().any(), (&#39;部分OHLC包含缺失值，请去掉那些行或者通过差值填充. &#39;)) 请问这里为什么要用.max().isnull().any()来进行判空？","like_count":0},{"had_liked":false,"id":121605,"user_name":"啟俊","can_delete":false,"product_type":"c1","uid":1524344,"ip_address":"","ucode":"9B723929A2E78A","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/78/212d3762.jpg","comment_is_top":false,"comment_ctime":1565165684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565165684","product_id":100026901,"comment_content":"老师可以讲一下pandas中apply的应用，有什么方法可以替代，优化提升运行效率","like_count":0},{"had_liked":false,"id":119948,"user_name":"瞳梦","can_delete":false,"product_type":"c1","uid":1596386,"ip_address":"","ucode":"A86FC44F6321BD","user_header":"","comment_is_top":false,"comment_ctime":1564735262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564735262","product_id":100026901,"comment_content":"assert_msg(not data[[&#39;Open&#39;, &#39;High&#39;, &#39;Low&#39;, &#39;Close&#39;]].max(skipna=False).isnull().any()这一行max()方法应该要加一个参数: skipna=False","like_count":0},{"had_liked":false,"id":119925,"user_name":"无才不肖生","can_delete":false,"product_type":"c1","uid":1065687,"ip_address":"","ucode":"A2F83FC7405792","user_header":"https://static001.geekbang.org/account/avatar/00/10/42/d7/1f1634af.jpg","comment_is_top":false,"comment_ctime":1564732165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564732165","product_id":100026901,"comment_content":"而想要检查某个时刻两个 SMA 是否交叉，你只需要查看两个数...<br>这个我理解的有问题吗，只拿最后两人数作比较不能确定吧，窗口设置10个数时，可能在1到8个数时相等，不是判断不准确？","like_count":0},{"had_liked":false,"id":119316,"user_name":"TKbook","can_delete":false,"product_type":"c1","uid":1073829,"ip_address":"","ucode":"F6E0E99CC79059","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/a5/43aa0c27.jpg","comment_is_top":false,"comment_ctime":1564560156,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1564560156","product_id":100026901,"comment_content":"    def buy(self):<br>        &quot;&quot;&quot;<br>        用当前账户剩余资金，按照市场价格全部买入<br>        &quot;&quot;&quot;<br>        self._position = float(self._cash &#47; (self.current_price * (1 + self._commission)))<br>        self._cash = 0.0<br><br>老师，你这里手续费的计算方式有问题吧？ 手续费是针对每次交易来算，不是针对每个比特币来算的吧","like_count":0,"discussions":[{"author":{"id":2117451,"avatar":"https://static001.geekbang.org/account/avatar/00/20/4f/4b/74696428.jpg","nickname":"肖国强","note":"","ucode":"96979DB3F497F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298240,"discussion_content":"是按成交金额算的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597225454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012697,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/73/d9/da9349fd.jpg","nickname":"yang","note":"","ucode":"C1E91D5F9ABD42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3801,"discussion_content":"我也以为是按成交金额收取手续费的，网上查了下，国内大部分也是按成交金额算，不知道国外是不是按老师讲的这种算，没搞过金融[捂脸]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564823295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119303,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1564555292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564555292","product_id":100026901,"comment_content":"看了老师的文章，对金融又感兴趣了。","like_count":0}]}