{"id":740385,"title":"结束语｜未来让Rust带你“锈”到起飞","content":"<p>你好，我是你的老朋友 Mike。</p><p>30讲的课程很快就结束了，感谢你一路的支持与陪伴，每一次评论区的互动都能让我感觉到写这门课的重要意义。我看到了你在不断思考中对Rust的理解越来越深，畏难情绪也随之一分分减少，很长一段时间我一起床就会打开评论，看看你有哪些新思考、新困惑，这也成了我每天的动力来源。</p><p>看到越来越多的朋友加入学习，逐渐“锈”化，我想我写这门课程最基本的目标达到了——让你以比较轻松的心态去掌握Rust的基础知识，为你以后用Rust去解决生产上的难题打下坚实的基础。</p><p>在这几个月里我们了解了Rust很多非常重要的特性，对所有权、Trait、类型还有异步编程和Unsafe编程等重要概念有了更深的理解，此外还转变了对Rust小助手的态度，真正把它当成了我们的好伙伴。这都是我们共同努力的结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/f6/e47a32cf1b0c9561f2994ff5f04154f6.jpg?wh=6924x4500\" alt=\"图片\"></p><p>而这最后一节课也同样珍贵，所以我还是想再“唠叨唠叨”，带你回顾我们课程里最重要的一些东西。希望你不仅能够掌握基本的Rust代码应该怎么写，还能理解Rust为什么要这样设计。</p><h2>Rust所有权是怎么来的？</h2><p>要说 Rust 里最重要的东西，一定少不了所有权，都说重要的事情说三遍，在课程中我说了又何止三遍，所以我想用这最后一点点宝贵的时间再来讲一讲所有权从何而来，又何以至此的。我们都知道Rust成长于巨人的肩膀上，所以我们可以从C语言说起。</p><!-- [[[read_end]]] --><h3>C语言的手动内存管理</h3><p>C的做法是完全交给程序员自己来管理堆内存，也就是分配内存及释放内存。比如：</p><ul>\n<li>你malloc了一块内存，但是如果忘了写 free 的话，就会造成内存泄露。</li>\n<li>如果你在不同的地方 free 了两次的话（指针的多次free），就会造成未定义行为，比如段错误。</li>\n<li>你定义了一个指针，但是没有初始化的话，对指针的解引用（未初始化指针访问）也会生成未定义行为。</li>\n<li>你用一个指针指向了一个分配的堆内存，但是在某个地方被free掉了，但是你又对这个指针解引用的话（释放后访问），又会出现未定义行为。</li>\n<li>……</li>\n</ul><p>因此在C语言中，出现了一套避坑的最佳实践总结，其中最重要的一条原则就是<strong>谁分配谁释放</strong>，这是一条人为的约定。</p><p>看起来C语言里的内存管理完全是手动的，其实不尽然，手动管理的主要是堆内存部分。栈上内存的管理其实是自动的。因为栈上的内存管理只涉及到一个栈顶指针和计算偏移量，会以函数栈帧为单元压栈出栈，这块儿内存会随着函数层次的调用自动分配和回收。编译器保证了这块的内存不会发生错误的管理。</p><h3>Java的GC</h3><p>由于C语言内存管理非常痛苦，总是避免不了各种内存崩溃的问题。人们想出了另一种方案，用一个管家自动帮我们清理那些不要的“垃圾”，这正是Java 等后面一系列语言的做法。这个管家就是 GC（垃圾回收器）。这种方案的思路就是，程序员只管分配内存，用完就不管了，GC会自动跟踪这些资源，在适当的时候自动回收。这大大释放了程序员的心智负担，有人给你负责收尾了，多大的好事儿呀！</p><p>但是GC方案的代价也是明显的，比如不管使用什么跟踪回收算法，它始终存在STW（Stop the World）的问题。它总是在程序员与底层之间隔离了一层，很难做到精确控制。这两点在做上层应用开发的时候问题不明显。但是在涉及到一些关键系统的时候，影响就很大了。大部分情况下，运行性能也会有影响。</p><h3>C++的智能指针</h3><p>C++是一门很牛的语言，它一方面做到了完全兼容C。另一方面又在现代语言的方向上做了很多探索。<a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\">RAII</a>（Resource acquisition is initialization）或者 SBRM（Scope-based Resource Management）就是在C++里面提出的。</p><p>它的思路其实就基于上面提到的那个情况：<strong>既然栈上的内存管理是自动的，那如果找到一种办法将堆上的资源与栈上的内存资源绑定，那不就可以自动管理堆上的内存资源了吗？</strong>让堆上的内存资源随着栈上的资源一起创建一起回收，同时这也是使用固定尺寸的结构管理非固定尺寸的结构的方法。</p><p>既然是绑定，那就会存在一个指向的关系，也就是需要在栈上的一个固定尺寸的结构中有一个指向待管理的堆内存资源的指针，这个指针存的就是那个堆内存资源的内存地址。这个固定尺寸的结构就是<strong>智能指针</strong>。因此在C++中你会看到 <code>unique_ptr</code>、<code>shared_ptr</code> 等智能指针。</p><h3>Rust的所有权</h3><p>Rust完全沿用了这个优秀的思想和方法，却没有从语法上兼容C的负担。Rust进一步把这个负责管理资源的智能指针冠以<strong>所有权</strong>。对应的，Rust中的原始指针raw pointer就没有所有权的概念，因为它并不参与负责释放的工作。</p><p>智能指针有很多种策略，与C++版本对应的，Rust的 <code>Box&lt;T&gt;</code> 就对应 <code>unique_ptr</code>，独占所有权，<code>Arc&lt;T&gt;</code> 就对应 <code>shared_ptr</code>，共享所有权。从前面的学习可以看到，String、Vec其实也是智能指针，它们具有所有权属性。Box就是泛化版本的String、Vec，String、Vec 是特化版本的 Box。当然还存在其他智能指针，你甚至可以构思自定义策略，定义自己的智能指针。</p><p>当然所有权不仅涵盖智能指针和堆上的资源。栈上的资源也有所有权。比如 i8、固定尺寸的结构体等等，默认都放在栈上，它们也是具有所有权的。所有权概念的核心在于一个栈上变量（当然是固定尺寸的）是否负责管理资源。对于i8这样固定尺寸的结构体等类型来说，它们本身的值就存在栈上分配的那一小块内存空间中，因此会随着栈的回收自动被回收掉，因此也相当于这些变量也管理了资源。因此它们也是具有所有权的。</p><h4>所有权之上：Move与Copy</h4><p>而Move语义与Copy语义是另一码事，你可以把它理解成所有权之上的上层概念。在Rust中，只要某种类型实现了Copy trait，那么在使用 = 号再赋值时，就会执行 Copy 语义。反之，会执行Move语义。</p><p>为了方便操作，Rust对语言和标准库里很多固定尺寸的基础类型实现了 Copy 语义，而对同样是固定尺寸的结构体却默认没有实现Copy语义。<strong>Move语义就是移动所有权，防止过大的内存复制开销。Copy语义就是复制所有权，创建新的所有权，原来那个所有权仍然被原来的变量持有。</strong></p><h4><strong>'a 生命期标注</strong></h4><p>Rust通过所有权机制，实现了对资源的“自动”管理。但是这种管理方式也会带来一些新的负担，那就是对所有权变量的引用生命期的有效性分析就会比较复杂，因为需要确保这些引用不能超出所有权型变量的生命期。这块目前业界还无法做到逻辑级别的分析，只是从函数的签名定义上进行分析。<strong>因此在必要的时候，Rust编译器还需要程序员来提供一些信息，这就是 'a 生命期标注的来源。</strong></p><p>严格的引用生命期分析是Rust开辟的新领域，比C++更进一步。所以说Rust不仅是工程上的创新，也在计算机语言理论上做了一些创新。</p><p>所有权有三态：<strong>所有权变量、不可变引用、可变引用。</strong>这三种形态几乎贯穿Rust语言的所有方面。<code>Box&lt;Self&gt;</code>、 <code>Arc&lt;Self&gt;</code> 等实际只是所有权变量的变体。其实Rust的所有权就是这么一回事儿，就是这些内容了。</p><h2>Rust难学的点在哪儿？</h2><p>除了所有权这一块之外，Rust普遍被认为难学的还有它<strong>严格的类型系统</strong>，很多人不习惯。</p><ol>\n<li>类型化与类型参数（泛型）各种形式的组合。</li>\n<li>类型嵌套的洋葱结构会让类型变得很长，一旦出现类型不匹配的问题，初学者容易被编译器给出的信息吓住。</li>\n<li>全新的trait理念。</li>\n</ol><p>Rust中的类型确实比较严格，比如字符串，C里就一个 <code>char *</code>，而Rust中有那么多不同的分类。但是实际上，C 的 <code>char *</code> 在真正在使用的时候，还需要在不同的场景中学习那个场景中的知识，并在 <code>char *</code> 基础上继续小心翼翼地处理。而Rust中的这些字符串类型其实已经包含了很多场景信息了，你直接用就行了，如果用得不对，在编译期间就会被指出。<strong>类型化其实就是囊括更多规范信息的过程，让我们在编程的时候减少出错的几率。</strong></p><p>Rust的错误处理也完全建立在标准化的类型系统上（<code>Result&lt;T, E&gt;</code>），这是一种与之前的主流语言完全不同的思路，因此开始学起来可能不太适应。但是其实一旦思路转换过来，会发现Rust的这套标准的错误处理思想更优美，更能降低我们的心智负担。</p><h3>类型系统与传统的OOP</h3><p>trait理论是一种平铺的理念，它与传统的OOP理念完全不同，甚至是完全对立的。你可以这样来理解，OOP就像传统血缘社会，做什么都要看出身，而trait是现代法治社会，大家都平等。<strong>在 Rust中，所有 trait 都是平等的。</strong>不管是std标准库中的trait，还是你自定义的trait，它们都是平等关系，不存在什么继承。</p><p>trait可以类比为社会中的法律，给实体（自然人、法人等）以约束。法律约束你的同时，其实也给你界定了能做的事情，也就是你具有某些能力。因此类比过来，trait 体系实际是一种约束 + 能力体系。从社会的发展来看，Rust 这种 trait 架构下的类型体系，相比于OOP，生产力可以更高。或者说 <strong>Rust 的 trait 体系，实际更容易准确描述现实世界，因为现代世界主体就是按这种方式运行的</strong>。</p><p>当然我们并不是说 OOP 就是错的。在某些场合，比如族谱模型、GUI界面描述等，它确实是更适合的抽象方法。因此你可以看到Slint这种GUI框架，在Rust中造出一个具有继承能力的描述性语言slint。这就相当于把两种抽象方法的优势结合起来了。</p><p>从难度来讲，其实trait体系比完整的OOP体系更简单、知识点更少。开始时感觉难学，可能主要是思维需要转变。毕竟OOP思想占据了软件开发核心地位几十年了。</p><p>因此<strong>学习Rust的两大核心就是所有权体系与trait 体系</strong>。它们就好像一根绳子的两头，只要你把两个头提起来了，那么其他东西很快就跟着起来了。并不是说其他东西不重要，它们都是构成Rust这个整体的重要组成部分。我们这里说的是学习方法，一定要把这两个主要的东西搞懂，其他的知识点相对比较独立，可以被这两样特性有效地串起来。</p><h2>最后的寄语</h2><p>你学习Rust的时候更重要的是学会转变思维，毕竟前面几十年的主流语言都采用了不同的思维模型。只要你花上一定时间适应了它，你就会发现Rust是如此优美、高效、富有创意。</p><p>Rust是一位多面手，知识点很多。你可以先选择一个方向切入，使用Rust实现你最熟悉的或者最感兴趣的业务系统，产生价值回馈，然后再扩展到其他感兴趣的方面。就像我常说的，<strong>学习和应用 Rust 没有天花板，天花板就是你的想象力。</strong></p><p>Rust能应用在广泛的行业，我们这门课程只是刚起了个头，后面还有大量的知识点需要深入探索。学Rust就是学CS计算机科学，希望你与我一起持续探索，用Rust赋能各行各业。</p><p>听我说了这么多，最后我也想听听你的想法，这里我特别准备了一份<a href=\"http://jinshuju.net/f/eeZQnc\">结课问卷</a>，你可以花几分钟填写一下，希望能够听到你的“声音”。</p><p><a href=\"http://jinshuju.net/f/eeZQnc\"><img src=\"https://static001.geekbang.org/resource/image/4e/24/4e1ea06ac81bee2e4fa290732f81c824.jpg?wh=1142x801\" alt=\"\"></a></p>","neighbors":{"left":{"article_title":"30｜Unsafe编程（下）：使用Rust为Python写一个扩展","id":739360},"right":{"article_title":"结课测试｜来赴一场满分之约","id":740086}},"comments":[{"had_liked":false,"id":386956,"user_name":"小虎子🐯","can_delete":false,"product_type":"c1","uid":2843479,"ip_address":"北京","ucode":"4C9530B3FB407B","user_header":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","comment_is_top":true,"comment_ctime":1705998335,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"Mike 老师的公众号：跟着 MT 学 Rust，欢迎关注～","like_count":2},{"had_liked":false,"id":386280,"user_name":"长林啊","can_delete":false,"product_type":"c1","uid":1707743,"ip_address":"四川","ucode":"B75CB4919FF25A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/df/a64b3146.jpg","comment_is_top":false,"comment_ctime":1704435920,"is_pvip":false,"replies":[{"id":140796,"content":"研究研究🧐","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1704497639,"ip_address":"重庆","comment_id":386280,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100626901,"comment_content":"再来个系统性进阶实战课吧","like_count":3,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635174,"discussion_content":"研究研究🧐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704497639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386576,"user_name":"Jack Xin","can_delete":false,"product_type":"c1","uid":1425444,"ip_address":"上海","ucode":"BEC98A1F437239","user_header":"https://static001.geekbang.org/account/avatar/00/15/c0/24/01699070.jpg","comment_is_top":false,"comment_ctime":1705133195,"is_pvip":false,"replies":[{"id":140942,"content":"谢谢肯定，共勉🙏","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1705326555,"ip_address":"重庆","comment_id":386576,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"我觉得唐老师有一种特别的能力，rust一些复杂难懂的概念在老师的讲述下，却变得通俗易懂，让人觉得兴趣盎然，谢谢老师，学完老师的课让我喜欢上了rust ","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635883,"discussion_content":"谢谢肯定，共勉🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705326555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390448,"user_name":"冷石","can_delete":false,"product_type":"c1","uid":1523432,"ip_address":"广东","ucode":"2A2B056A83E963","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/e8/3736f3cd.jpg","comment_is_top":false,"comment_ctime":1715366331,"is_pvip":false,"replies":[{"id":142025,"content":"总归是学完了嘛！不错的","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1715397522,"ip_address":"北京","comment_id":390448,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"拖延症晚期总于学完啦！啊啊啊","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644635,"discussion_content":"总归是学完了嘛！不错的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715397523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387385,"user_name":"Geek_042531","can_delete":false,"product_type":"c1","uid":1541870,"ip_address":"广东","ucode":"A42530B8592C77","user_header":"","comment_is_top":false,"comment_ctime":1707143393,"is_pvip":false,"replies":[{"id":141249,"content":"可以，后面有机会可以继续展开讲讲这块儿","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1708627421,"ip_address":"加拿大","comment_id":387385,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"终于看完了一遍，收获很大，有点意犹未尽。Mike老师，是否可以讲解一些高级点的知识点？比如性能优化相关的东西。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637560,"discussion_content":"可以，后面有机会可以继续展开讲讲这块儿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708627421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386514,"user_name":"Noya","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"浙江","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","comment_is_top":false,"comment_ctime":1705013609,"is_pvip":false,"replies":[{"id":140911,"content":"泰酷辣","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1705068299,"ip_address":"重庆","comment_id":386514,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"Over!","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635716,"discussion_content":"泰酷辣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705068299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386369,"user_name":"superggn","can_delete":false,"product_type":"c1","uid":3623568,"ip_address":"北京","ucode":"831CCD98B393FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/7Q403U68Oy4lXG5sFBPVKLrfwaRzBqpBZibpEBXcPf9UOO3qrnh7RELoByTLzBZLkN9Nukfsj7DibynbZjKAKgag/132","comment_is_top":false,"comment_ctime":1704695069,"is_pvip":false,"replies":[{"id":140815,"content":"看到啦，谢谢你这么认真的反馈🌹","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1704695615,"ip_address":"北京","comment_id":386369,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"问卷里搞了一波关于迭代的看法， 有点长， 希望能看到， 有精力有时间的话可以考虑搞一波（笑）","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635283,"discussion_content":"看到啦，谢谢你这么认真的反馈🌹","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1704695615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386288,"user_name":"安","can_delete":false,"product_type":"c1","uid":3554532,"ip_address":"广东","ucode":"F6C46F533F5982","user_header":"https://static001.geekbang.org/account/avatar/00/36/3c/e4/b262e14c.jpg","comment_is_top":false,"comment_ctime":1704445274,"is_pvip":false,"replies":[{"id":140797,"content":"谢谢，好讷","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1704497659,"ip_address":"重庆","comment_id":386288,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"期待后续,我的老朋友","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635175,"discussion_content":"谢谢，好讷","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704497659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386255,"user_name":"倪步烤","can_delete":false,"product_type":"c1","uid":2187797,"ip_address":"浙江","ucode":"AEC400C7CD9A2C","user_header":"https://static001.geekbang.org/account/avatar/00/21/62/15/c1c4c8d6.jpg","comment_is_top":false,"comment_ctime":1704411962,"is_pvip":false,"replies":[{"id":140787,"content":"30讲正文+3篇课后题+开篇词结束语测试题，一共36讲，你再看看，是不是显示已学35呀，还有一节未学","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1704420096,"ip_address":"北京","comment_id":386255,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"好像少一讲，显示是35&#47;36","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635101,"discussion_content":"30讲正文+3篇课后题+开篇词结束语测试题，一共36讲，你再看看，是不是显示已学35呀，还有一节未学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704420097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386267,"user_name":"小虎子🐯","can_delete":false,"product_type":"c1","uid":2843479,"ip_address":"北京","ucode":"4C9530B3FB407B","user_header":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","comment_is_top":false,"comment_ctime":1704422684,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"我已经拿到结课证书了，谁有我快～","like_count":2},{"had_liked":false,"id":386254,"user_name":"一带一路","can_delete":false,"product_type":"c1","uid":1633613,"ip_address":"四川","ucode":"BD3E750A9EBF25","user_header":"https://static001.geekbang.org/account/avatar/00/18/ed/4d/7df516d5.jpg","comment_is_top":false,"comment_ctime":1704391925,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"太棒了，期待后续课程(◍•ᴗ•◍)","like_count":1},{"had_liked":false,"id":390386,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"广东","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1715237762,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"缺少的单测和集测如果一并介绍就好了","like_count":0}]}