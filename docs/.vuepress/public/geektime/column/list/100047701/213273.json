{"id":213273,"title":"05 | HTTP调用：你考虑到超时、重试、并发了吗？","content":"<p>你好，我是朱晔。今天，我们一起聊聊进行HTTP调用需要注意的超时、重试、并发等问题。</p><p>与执行本地方法不同，进行HTTP调用本质上是通过HTTP协议进行一次网络请求。网络请求必然有超时的可能性，因此我们必须考虑到这三点：</p><ul>\n<li>首先，框架设置的默认超时是否合理；</li>\n<li>其次，考虑到网络的不稳定，超时后的请求重试是一个不错的选择，但需要考虑服务端接口的幂等性设计是否允许我们重试；</li>\n<li>最后，需要考虑框架是否会像浏览器那样限制并发连接数，以免在服务并发很大的情况下，HTTP调用的并发数限制成为瓶颈。</li>\n</ul><p>Spring Cloud是Java微服务架构的代表性框架。如果使用Spring Cloud进行微服务开发，就会使用Feign进行声明式的服务调用。如果不使用Spring Cloud，而直接使用Spring Boot进行微服务开发的话，可能会直接使用Java中最常用的HTTP客户端Apache HttpClient进行服务调用。</p><p>接下来，我们就看看使用Feign和Apache HttpClient进行HTTP接口调用时，可能会遇到的超时、重试和并发方面的坑。</p><h2>配置连接超时和读取超时参数的学问</h2><p>对于HTTP调用，虽然应用层走的是HTTP协议，但网络层面始终是TCP/IP协议。TCP/IP是面向连接的协议，在传输数据之前需要建立连接。几乎所有的网络框架都会提供这么两个超时参数：</p><!-- [[[read_end]]] --><ul>\n<li>连接超时参数ConnectTimeout，让用户配置建连阶段的最长等待时间；</li>\n<li>读取超时参数ReadTimeout，用来控制从Socket上读取数据的最长等待时间。</li>\n</ul><p>这两个参数看似是网络层偏底层的配置参数，不足以引起开发同学的重视。但，正确理解和配置这两个参数，对业务应用特别重要，毕竟超时不是单方面的事情，需要客户端和服务端对超时有一致的估计，协同配合方能平衡吞吐量和错误率。</p><p><strong>连接超时参数和连接超时的误区有这么两个：</strong></p><ul>\n<li><strong>连接超时配置得特别长，比如60秒。</strong>一般来说，TCP三次握手建立连接需要的时间非常短，通常在毫秒级最多到秒级，不可能需要十几秒甚至几十秒。如果很久都无法建连，很可能是网络或防火墙配置的问题。这种情况下，如果几秒连接不上，那么可能永远也连接不上。因此，设置特别长的连接超时意义不大，将其配置得短一些（比如1~5秒）即可。如果是纯内网调用的话，这个参数可以设置得更短，在下游服务离线无法连接的时候，可以快速失败。</li>\n<li><strong>排查连接超时问题，却没理清连的是哪里。</strong>通常情况下，我们的服务会有多个节点，如果别的客户端通过客户端负载均衡技术来连接服务端，那么客户端和服务端会直接建立连接，此时出现连接超时大概率是服务端的问题；而如果服务端通过类似Nginx的反向代理来负载均衡，客户端连接的其实是Nginx，而不是服务端，此时出现连接超时应该排查Nginx。</li>\n</ul><p><strong>读取超时参数和读取超时则会有更多的误区，我将其归纳为如下三个。</strong></p><p><strong>第一个误区：</strong>认为出现了读取超时，服务端的执行就会中断。</p><p>我们来简单测试下。定义一个client接口，内部通过HttpClient调用服务端接口server，客户端读取超时2秒，服务端接口执行耗时5秒。</p><pre><code>@RestController\n@RequestMapping(&quot;clientreadtimeout&quot;)\n@Slf4j\npublic class ClientReadTimeoutController {\n    private String getResponse(String url, int connectTimeout, int readTimeout) throws IOException {\n        return Request.Get(&quot;http://localhost:45678/clientreadtimeout&quot; + url)\n                .connectTimeout(connectTimeout)\n                .socketTimeout(readTimeout)\n                .execute()\n                .returnContent()\n                .asString();\n    }\n    \n    @GetMapping(&quot;client&quot;)\n    public String client() throws IOException {\n        log.info(&quot;client1 called&quot;);\n        //服务端5s超时，客户端读取超时2秒\n        return getResponse(&quot;/server?timeout=5000&quot;, 1000, 2000);\n    }\n\n    @GetMapping(&quot;server&quot;)\n    public void server(@RequestParam(&quot;timeout&quot;) int timeout) throws InterruptedException {\n        log.info(&quot;server called&quot;);\n        TimeUnit.MILLISECONDS.sleep(timeout);\n        log.info(&quot;Done&quot;);\n    }\n}\n</code></pre><p>调用client接口后，从日志中可以看到，客户端2秒后出现了SocketTimeoutException，原因是读取超时，服务端却丝毫没受影响在3秒后执行完成。</p><pre><code>[11:35:11.943] [http-nio-45678-exec-1] [INFO ] [.t.c.c.d.ClientReadTimeoutController:29  ] - client1 called\n[11:35:12.032] [http-nio-45678-exec-2] [INFO ] [.t.c.c.d.ClientReadTimeoutController:36  ] - server called\n[11:35:14.042] [http-nio-45678-exec-1] [ERROR] [.a.c.c.C.[.[.[/].[dispatcherServlet]:175 ] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception\njava.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\t...\n[11:35:17.036] [http-nio-45678-exec-2] [INFO ] [.t.c.c.d.ClientReadTimeoutController:38  ] - Done\n</code></pre><p>我们知道，类似Tomcat的Web服务器都是把服务端请求提交到线程池处理的，只要服务端收到了请求，网络层面的超时和断开便不会影响服务端的执行。因此，出现读取超时不能随意假设服务端的处理情况，需要根据业务状态考虑如何进行后续处理。</p><p><strong>第二个误区：</strong>认为读取超时只是Socket网络层面的概念，是数据传输的最长耗时，故将其配置得非常短，比如100毫秒。</p><p>其实，发生了读取超时，网络层面无法区分是服务端没有把数据返回给客户端，还是数据在网络上耗时较久或丢包。</p><p>但，因为TCP是先建立连接后传输数据，对于网络情况不是特别糟糕的服务调用，通常可以认为出现连接超时是网络问题或服务不在线，而出现读取超时是服务处理超时。确切地说，读取超时指的是，向Socket写入数据后，我们等到Socket返回数据的超时时间，其中包含的时间或者说绝大部分的时间，是服务端处理业务逻辑的时间。</p><p><strong>第三个误区：</strong>认为超时时间越长任务接口成功率就越高，将读取超时参数配置得太长。</p><p>进行HTTP请求一般是需要获得结果的，属于同步调用。如果超时时间很长，在等待服务端返回数据的同时，客户端线程（通常是Tomcat线程）也在等待，当下游服务出现大量超时的时候，程序可能也会受到拖累创建大量线程，最终崩溃。</p><p>对定时任务或异步任务来说，读取超时配置得长些问题不大。但面向用户响应的请求或是微服务短平快的同步接口调用，并发量一般较大，我们应该设置一个较短的读取超时时间，以防止被下游服务拖慢，通常不会设置超过30秒的读取超时。</p><p>你可能会说，如果把读取超时设置为2秒，服务端接口需要3秒，岂不是永远都拿不到执行结果了？的确是这样，因此设置读取超时一定要根据实际情况，过长可能会让下游抖动影响到自己，过短又可能影响成功率。甚至，有些时候我们还要根据下游服务的SLA，为不同的服务端接口设置不同的客户端读取超时。</p><h2>Feign和Ribbon配合使用，你知道怎么配置超时吗？</h2><p>刚才我强调了根据自己的需求配置连接超时和读取超时的重要性，你是否尝试过为Spring Cloud的Feign配置超时参数呢，有没有被网上的各种资料绕晕呢？</p><p>在我看来，为Feign配置超时参数的复杂之处在于，Feign自己有两个超时参数，它使用的负载均衡组件Ribbon本身还有相关配置。那么，这些配置的优先级是怎样的，又哪些什么坑呢？接下来，我们做一些实验吧。</p><p>为测试服务端的超时，假设有这么一个服务端接口，什么都不干只休眠10分钟：</p><pre><code>@PostMapping(&quot;/server&quot;)\npublic void server() throws InterruptedException {\n    TimeUnit.MINUTES.sleep(10);\n}\n</code></pre><p>首先，定义一个Feign来调用这个接口：</p><pre><code>@FeignClient(name = &quot;clientsdk&quot;)\npublic interface Client {\n    @PostMapping(&quot;/feignandribbon/server&quot;)\n    void server();\n}\n</code></pre><p>然后，通过Feign Client进行接口调用：</p><pre><code>@GetMapping(&quot;client&quot;)\npublic void timeout() {\n    long begin=System.currentTimeMillis();\n    try{\n        client.server();\n    }catch (Exception ex){\n        log.warn(&quot;执行耗时：{}ms 错误：{}&quot;, System.currentTimeMillis() - begin, ex.getMessage());\n    }\n}\n</code></pre><p>在配置文件仅指定服务端地址的情况下：</p><pre><code>clientsdk.ribbon.listOfServers=localhost:45678\n</code></pre><p>得到如下输出：</p><pre><code>[15:40:16.094] [http-nio-45678-exec-3] [WARN ] [o.g.t.c.h.f.FeignAndRibbonController    :26  ] - 执行耗时：1007ms 错误：Read timed out executing POST http://clientsdk/feignandribbon/server\n</code></pre><p>从这个输出中，我们可以得到<strong>结论一，默认情况下Feign的读取超时是1秒，如此短的读取超时算是坑点一</strong>。</p><p>我们来分析一下源码。打开RibbonClientConfiguration类后，会看到DefaultClientConfigImpl被创建出来之后，ReadTimeout和ConnectTimeout被设置为1s：</p><pre><code>/**\n * Ribbon client default connect timeout.\n */\npublic static final int DEFAULT_CONNECT_TIMEOUT = 1000;\n\n/**\n * Ribbon client default read timeout.\n */\npublic static final int DEFAULT_READ_TIMEOUT = 1000;\n\n@Bean\n@ConditionalOnMissingBean\npublic IClientConfig ribbonClientConfig() {\n   DefaultClientConfigImpl config = new DefaultClientConfigImpl();\n   config.loadProperties(this.name);\n   config.set(CommonClientConfigKey.ConnectTimeout, DEFAULT_CONNECT_TIMEOUT);\n   config.set(CommonClientConfigKey.ReadTimeout, DEFAULT_READ_TIMEOUT);\n   config.set(CommonClientConfigKey.GZipPayload, DEFAULT_GZIP_PAYLOAD);\n   return config;\n}\n</code></pre><p>如果要修改Feign客户端默认的两个全局超时时间，你可以设置feign.client.config.default.readTimeout和feign.client.config.default.connectTimeout参数：</p><pre><code>feign.client.config.default.readTimeout=3000\nfeign.client.config.default.connectTimeout=3000\n</code></pre><p>修改配置后重试，得到如下日志：</p><pre><code>[15:43:39.955] [http-nio-45678-exec-3] [WARN ] [o.g.t.c.h.f.FeignAndRibbonController    :26  ] - 执行耗时：3006ms 错误：Read timed out executing POST http://clientsdk/feignandribbon/server\n</code></pre><p>可见，3秒读取超时生效了。注意：这里有一个大坑，如果你希望只修改读取超时，可能会只配置这么一行：</p><pre><code>feign.client.config.default.readTimeout=3000\n</code></pre><p>测试一下你就会发现，这样的配置是无法生效的！</p><p><strong>结论二，也是坑点二，如果要配置Feign的读取超时，就必须同时配置连接超时，才能生效</strong>。</p><p>打开FeignClientFactoryBean可以看到，只有同时设置ConnectTimeout和ReadTimeout，Request.Options才会被覆盖：</p><pre><code>if (config.getConnectTimeout() != null &amp;&amp; config.getReadTimeout() != null) {\n   builder.options(new Request.Options(config.getConnectTimeout(),\n         config.getReadTimeout()));\n}\n</code></pre><p>更进一步，如果你希望针对单独的Feign Client设置超时时间，可以把default替换为Client的name：</p><pre><code>feign.client.config.default.readTimeout=3000\nfeign.client.config.default.connectTimeout=3000\nfeign.client.config.clientsdk.readTimeout=2000\nfeign.client.config.clientsdk.connectTimeout=2000\n</code></pre><p>可以得出<strong>结论三，单独的超时可以覆盖全局超时，这符合预期，不算坑</strong>：</p><pre><code>[15:45:51.708] [http-nio-45678-exec-3] [WARN ] [o.g.t.c.h.f.FeignAndRibbonController    :26  ] - 执行耗时：2006ms 错误：Read timed out executing POST http://clientsdk/feignandribbon/server\n</code></pre><p><strong>结论四，除了可以配置Feign，也可以配置Ribbon组件的参数来修改两个超时时间。这里的坑点三是，参数首字母要大写，和Feign的配置不同</strong>。</p><pre><code>ribbon.ReadTimeout=4000\nribbon.ConnectTimeout=4000\n</code></pre><p>可以通过日志证明参数生效：</p><pre><code>[15:55:18.019] [http-nio-45678-exec-3] [WARN ] [o.g.t.c.h.f.FeignAndRibbonController    :26  ] - 执行耗时：4003ms 错误：Read timed out executing POST http://clientsdk/feignandribbon/server\n</code></pre><p>最后，我们来看看同时配置Feign和Ribbon的参数，最终谁会生效？如下代码的参数配置：</p><pre><code>clientsdk.ribbon.listOfServers=localhost:45678\nfeign.client.config.default.readTimeout=3000\nfeign.client.config.default.connectTimeout=3000\nribbon.ReadTimeout=4000\nribbon.ConnectTimeout=4000\n</code></pre><p>日志输出证明，最终生效的是Feign的超时：</p><pre><code>[16:01:19.972] [http-nio-45678-exec-3] [WARN ] [o.g.t.c.h.f.FeignAndRibbonController    :26  ] - 执行耗时：3006ms 错误：Read timed out executing POST http://clientsdk/feignandribbon/server\n</code></pre><p><strong>结论五，同时配置Feign和Ribbon的超时，以Feign为准</strong>。这有点反直觉，因为Ribbon更底层所以你会觉得后者的配置会生效，但其实不是这样的。</p><p>在LoadBalancerFeignClient源码中可以看到，如果Request.Options不是默认值，就会创建一个FeignOptionsClientConfig代替原来Ribbon的DefaultClientConfigImpl，导致Ribbon的配置被Feign覆盖：</p><pre><code>IClientConfig getClientConfig(Request.Options options, String clientName) {\n   IClientConfig requestConfig;\n   if (options == DEFAULT_OPTIONS) {\n      requestConfig = this.clientFactory.getClientConfig(clientName);\n   }\n   else {\n      requestConfig = new FeignOptionsClientConfig(options);\n   }\n   return requestConfig;\n}\n</code></pre><p>但如果这么配置最终生效的还是Ribbon的超时（4秒），这容易让人产生Ribbon覆盖了Feign的错觉，其实这还是因为坑二所致，单独配置Feign的读取超时并不能生效：</p><pre><code>clientsdk.ribbon.listOfServers=localhost:45678\nfeign.client.config.default.readTimeout=3000\nfeign.client.config.clientsdk.readTimeout=2000\nribbon.ReadTimeout=4000\n</code></pre><h2>你是否知道Ribbon会自动重试请求呢？</h2><p>一些HTTP客户端往往会内置一些重试策略，其初衷是好的，毕竟因为网络问题导致丢包虽然频繁但持续时间短，往往重试下第二次就能成功，但一定要小心这种自作主张是否符合我们的预期。</p><p>之前遇到过一个短信重复发送的问题，但短信服务的调用方用户服务，反复确认代码里没有重试逻辑。那问题究竟出在哪里了？我们来重现一下这个案例。</p><p>首先，定义一个Get请求的发送短信接口，里面没有任何逻辑，休眠2秒模拟耗时：</p><pre><code>@RestController\n@RequestMapping(&quot;ribbonretryissueserver&quot;)\n@Slf4j\npublic class RibbonRetryIssueServerController {\n    @GetMapping(&quot;sms&quot;)\n    public void sendSmsWrong(@RequestParam(&quot;mobile&quot;) String mobile, @RequestParam(&quot;message&quot;) String message, HttpServletRequest request) throws InterruptedException {\n        //输出调用参数后休眠2秒\n        log.info(&quot;{} is called, {}=&gt;{}&quot;, request.getRequestURL().toString(), mobile, message);\n        TimeUnit.SECONDS.sleep(2);\n    }\n}\n</code></pre><p>配置一个Feign供客户端调用：</p><pre><code>@FeignClient(name = &quot;SmsClient&quot;)\npublic interface SmsClient {\n    @GetMapping(&quot;/ribbonretryissueserver/sms&quot;)\n    void sendSmsWrong(@RequestParam(&quot;mobile&quot;) String mobile, @RequestParam(&quot;message&quot;) String message);\n}\n</code></pre><p>Feign内部有一个Ribbon组件负责客户端负载均衡，通过配置文件设置其调用的服务端为两个节点：</p><pre><code>SmsClient.ribbon.listOfServers=localhost:45679,localhost:45678\n</code></pre><p>写一个客户端接口，通过Feign调用服务端：</p><pre><code>@RestController\n@RequestMapping(&quot;ribbonretryissueclient&quot;)\n@Slf4j\npublic class RibbonRetryIssueClientController {\n    @Autowired\n    private SmsClient smsClient;\n\n    @GetMapping(&quot;wrong&quot;)\n    public String wrong() {\n        log.info(&quot;client is called&quot;);\n        try{\n            //通过Feign调用发送短信接口\n            smsClient.sendSmsWrong(&quot;13600000000&quot;, UUID.randomUUID().toString());\n        } catch (Exception ex) {\n            //捕获可能出现的网络错误\n            log.error(&quot;send sms failed : {}&quot;, ex.getMessage());\n        }\n        return &quot;done&quot;;\n    }\n}\n</code></pre><p>在45678和45679两个端口上分别启动服务端，然后访问45678的客户端接口进行测试。因为客户端和服务端控制器在一个应用中，所以45678同时扮演了客户端和服务端的角色。</p><p>在45678日志中可以看到，29秒时客户端收到请求开始调用服务端接口发短信，同时服务端收到了请求，2秒后（注意对比第一条日志和第三条日志）客户端输出了读取超时的错误信息：</p><pre><code>[12:49:29.020] [http-nio-45678-exec-4] [INFO ] [c.d.RibbonRetryIssueClientController:23  ] - client is called\n[12:49:29.026] [http-nio-45678-exec-5] [INFO ] [c.d.RibbonRetryIssueServerController:16  ] - http://localhost:45678/ribbonretryissueserver/sms is called, 13600000000=&gt;a2aa1b32-a044-40e9-8950-7f0189582418\n[12:49:31.029] [http-nio-45678-exec-4] [ERROR] [c.d.RibbonRetryIssueClientController:27  ] - send sms failed : Read timed out executing GET http://SmsClient/ribbonretryissueserver/sms?mobile=13600000000&amp;message=a2aa1b32-a044-40e9-8950-7f0189582418\n</code></pre><p>而在另一个服务端45679的日志中还可以看到一条请求，30秒时收到请求，也就是客户端接口调用后的1秒：</p><pre><code>[12:49:30.029] [http-nio-45679-exec-2] [INFO ] [c.d.RibbonRetryIssueServerController:16  ] - http://localhost:45679/ribbonretryissueserver/sms is called, 13600000000=&gt;a2aa1b32-a044-40e9-8950-7f0189582418\n</code></pre><p>客户端接口被调用的日志只输出了一次，而服务端的日志输出了两次。虽然Feign的默认读取超时时间是1秒，但客户端2秒后才出现超时错误。<strong>显然，这说明客户端自作主张进行了一次重试，导致短信重复发送。</strong></p><p>翻看Ribbon的源码可以发现，MaxAutoRetriesNextServer参数默认为1，也就是Get请求在某个服务端节点出现问题（比如读取超时）时，Ribbon会自动重试一次：</p><pre><code>// DefaultClientConfigImpl\npublic static final int DEFAULT_MAX_AUTO_RETRIES_NEXT_SERVER = 1;\npublic static final int DEFAULT_MAX_AUTO_RETRIES = 0;\n\n// RibbonLoadBalancedRetryPolicy\npublic boolean canRetry(LoadBalancedRetryContext context) {\n   HttpMethod method = context.getRequest().getMethod();\n   return HttpMethod.GET == method || lbContext.isOkToRetryOnAllOperations();\n}\n\n@Override\npublic boolean canRetrySameServer(LoadBalancedRetryContext context) {\n   return sameServerCount &lt; lbContext.getRetryHandler().getMaxRetriesOnSameServer()\n         &amp;&amp; canRetry(context);\n}\n\n@Override\npublic boolean canRetryNextServer(LoadBalancedRetryContext context) {\n   // this will be called after a failure occurs and we increment the counter\n   // so we check that the count is less than or equals to too make sure\n   // we try the next server the right number of times\n   return nextServerCount &lt;= lbContext.getRetryHandler().getMaxRetriesOnNextServer()\n         &amp;&amp; canRetry(context);\n}\n</code></pre><p>解决办法有两个：</p><ul>\n<li>一是，把发短信接口从Get改为Post。其实，这里还有一个API设计问题，有状态的API接口不应该定义为Get。根据HTTP协议的规范，Get请求用于数据查询，而Post才是把数据提交到服务端用于修改或新增。选择Get还是Post的依据，应该是API的行为，而不是参数大小。<strong>这里的一个误区是，Get请求的参数包含在Url QueryString中，会受浏览器长度限制，所以一些同学会选择使用JSON以Post提交大参数，使用Get提交小参数。</strong></li>\n<li>二是，将MaxAutoRetriesNextServer参数配置为0，禁用服务调用失败后在下一个服务端节点的自动重试。在配置文件中添加一行即可：</li>\n</ul><pre><code>ribbon.MaxAutoRetriesNextServer=0\n</code></pre><p>看到这里，你觉得问题出在用户服务还是短信服务呢？</p><p>在我看来，双方都有问题。就像之前说的，Get请求应该是无状态或者幂等的，短信接口可以设计为支持幂等调用的；而用户服务的开发同学，如果对Ribbon的重试机制有所了解的话，或许就能在排查问题上少走些弯路。</p><h2>并发限制了爬虫的抓取能力</h2><p>除了超时和重试的坑，进行HTTP请求调用还有一个常见的问题是，并发数的限制导致程序的处理能力上不去。</p><p>我之前遇到过一个爬虫项目，整体爬取数据的效率很低，增加线程池数量也无济于事，只能堆更多的机器做分布式的爬虫。现在，我们就来模拟下这个场景，看看问题出在了哪里。</p><p>假设要爬取的服务端是这样的一个简单实现，休眠1秒返回数字1：</p><pre><code>@GetMapping(&quot;server&quot;)\npublic int server() throws InterruptedException {\n    TimeUnit.SECONDS.sleep(1);\n    return 1;\n}\n</code></pre><p>爬虫需要多次调用这个接口进行数据抓取，为了确保线程池不是并发的瓶颈，我们使用一个没有线程上限的newCachedThreadPool作为爬取任务的线程池（再次强调，除非你非常清楚自己的需求，否则一般不要使用没有线程数量上限的线程池），然后使用HttpClient实现HTTP请求，把请求任务循环提交到线程池处理，最后等待所有任务执行完成后输出执行耗时：</p><pre><code>private int sendRequest(int count, Supplier&lt;CloseableHttpClient&gt; client) throws InterruptedException {\n    //用于计数发送的请求个数\n    AtomicInteger atomicInteger = new AtomicInteger();\n    //使用HttpClient从server接口查询数据的任务提交到线程池并行处理\n    ExecutorService threadPool = Executors.newCachedThreadPool();\n    long begin = System.currentTimeMillis();\n    IntStream.rangeClosed(1, count).forEach(i -&gt; {\n        threadPool.execute(() -&gt; {\n            try (CloseableHttpResponse response = client.get().execute(new HttpGet(&quot;http://127.0.0.1:45678/routelimit/server&quot;))) {\n                atomicInteger.addAndGet(Integer.parseInt(EntityUtils.toString(response.getEntity())));\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        });\n    });\n    //等到count个任务全部执行完毕\n    threadPool.shutdown();\n    threadPool.awaitTermination(1, TimeUnit.HOURS);\n    log.info(&quot;发送 {} 次请求，耗时 {} ms&quot;, atomicInteger.get(), System.currentTimeMillis() - begin);\n    return atomicInteger.get();\n}\n</code></pre><p>首先，使用默认的PoolingHttpClientConnectionManager构造的CloseableHttpClient，测试一下爬取10次的耗时：</p><pre><code>static CloseableHttpClient httpClient1;\n\nstatic {\n    httpClient1 = HttpClients.custom().setConnectionManager(new PoolingHttpClientConnectionManager()).build();\n}\n\n@GetMapping(&quot;wrong&quot;)\npublic int wrong(@RequestParam(value = &quot;count&quot;, defaultValue = &quot;10&quot;) int count) throws InterruptedException {\n    return sendRequest(count, () -&gt; httpClient1);\n}\n</code></pre><p>虽然一个请求需要1秒执行完成，但我们的线程池是可以扩张使用任意数量线程的。按道理说，10个请求并发处理的时间基本相当于1个请求的处理时间，也就是1秒，但日志中显示实际耗时5秒：</p><pre><code>[12:48:48.122] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.h.r.RouteLimitController        :54  ] - 发送 10 次请求，耗时 5265 ms\n</code></pre><p>查看PoolingHttpClientConnectionManager源码，可以注意到有两个重要参数：</p><ul>\n<li><strong>defaultMaxPerRoute=2，也就是同一个主机/域名的最大并发请求数为2。我们的爬虫需要10个并发，显然是默认值太小限制了爬虫的效率。</strong></li>\n<li>maxTotal=20，也就是所有主机整体最大并发为20，这也是HttpClient整体的并发度。目前，我们请求数是10最大并发是10，20不会成为瓶颈。举一个例子，使用同一个HttpClient访问10个域名，defaultMaxPerRoute设置为10，为确保每一个域名都能达到10并发，需要把maxTotal设置为100。</li>\n</ul><pre><code>public PoolingHttpClientConnectionManager(\n    final HttpClientConnectionOperator httpClientConnectionOperator,\n    final HttpConnectionFactory&lt;HttpRoute, ManagedHttpClientConnection&gt; connFactory,\n    final long timeToLive, final TimeUnit timeUnit) {\n    ...    \n    this.pool = new CPool(new InternalConnectionFactory(\n            this.configData, connFactory), 2, 20, timeToLive, timeUnit);\n   ...\n} \n\npublic CPool(\n        final ConnFactory&lt;HttpRoute, ManagedHttpClientConnection&gt; connFactory,\n        final int defaultMaxPerRoute, final int maxTotal,\n        final long timeToLive, final TimeUnit timeUnit) {\n    ...\n}}\n</code></pre><p>HttpClient是Java非常常用的HTTP客户端，这个问题经常出现。你可能会问，为什么默认值限制得这么小。</p><p>其实，这不能完全怪HttpClient，很多早期的浏览器也限制了同一个域名两个并发请求。对于同一个域名并发连接的限制，其实是HTTP 1.1协议要求的，<a href=\"http://w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4\">这里</a>有这么一段话：</p><pre><code>Clients that use persistent connections SHOULD limit the number of simultaneous connections that they maintain to a given server. A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy. A proxy SHOULD use up to 2*N connections to another server or proxy, where N is the number of simultaneously active users. These guidelines are intended to improve HTTP response times and avoid congestion.\n</code></pre><p>HTTP 1.1协议是20年前制定的，现在HTTP服务器的能力强很多了，所以有些新的浏览器没有完全遵从2并发这个限制，放开并发数到了8甚至更大。如果需要通过HTTP客户端发起大量并发请求，不管使用什么客户端，请务必确认客户端的实现默认的并发度是否满足需求。</p><p>既然知道了问题所在，我们就尝试声明一个新的HttpClient放开相关限制，设置maxPerRoute为50、maxTotal为100，然后修改一下刚才的wrong方法，使用新的客户端进行测试：</p><pre><code>httpClient2 = HttpClients.custom().setMaxConnPerRoute(10).setMaxConnTotal(20).build();\n</code></pre><p>输出如下，10次请求在1秒左右执行完成。可以看到，因为放开了一个Host 2个并发的默认限制，爬虫效率得到了大幅提升：</p><pre><code>[12:58:11.333] [http-nio-45678-exec-3] [INFO ] [o.g.t.c.h.r.RouteLimitController        :54  ] - 发送 10 次请求，耗时 1023 ms\n</code></pre><h2>重点回顾</h2><p>今天，我和你分享了HTTP调用最常遇到的超时、重试和并发问题。</p><p>连接超时代表建立TCP连接的时间，读取超时代表了等待远端返回数据的时间，也包括远端程序处理的时间。在解决连接超时问题时，我们要搞清楚连的是谁；在遇到读取超时问题的时候，我们要综合考虑下游服务的服务标准和自己的服务标准，设置合适的读取超时时间。此外，在使用诸如Spring Cloud Feign等框架时务必确认，连接和读取超时参数的配置是否正确生效。</p><p>对于重试，因为HTTP协议认为Get请求是数据查询操作，是无状态的，又考虑到网络出现丢包是比较常见的事情，有些HTTP客户端或代理服务器会自动重试Get/Head请求。如果你的接口设计不支持幂等，需要关闭自动重试。但，更好的解决方案是，<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">遵从HTTP协议</a>的建议来使用合适的HTTP方法。</p><p>最后我们看到，包括HttpClient在内的HTTP客户端以及浏览器，都会限制客户端调用的最大并发数。如果你的客户端有比较大的请求调用并发，比如做爬虫，或是扮演类似代理的角色，又或者是程序本身并发较高，如此小的默认值很容易成为吞吐量的瓶颈，需要及时调整。</p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href=\"https://github.com/JosephZhu1983/java-common-mistakes\">这个链接</a>查看。</p><h2>思考与讨论</h2><ol>\n<li>第一节中我们强调了要注意连接超时和读取超时参数的配置，大多数的HTTP客户端也都有这两个参数。有读就有写，但为什么我们很少看到“写入超时”的概念呢？</li>\n<li>除了Ribbon的AutoRetriesNextServer重试机制，Nginx也有类似的重试功能。你了解Nginx相关的配置吗？</li>\n</ol><p>针对HTTP调用，你还遇到过什么坑吗？我是朱晔，欢迎在评论区与我留言分享你的想法，也欢迎你把这篇文章分享给你的朋友或同事，一起交流。</p>","neighbors":{"left":{"article_title":"04 | 连接池：别让连接池帮了倒忙","id":211388},"right":{"article_title":"06 | 20%的业务代码的Spring声明式事务，可能都没处理正确","id":213295}},"comments":[{"had_liked":false,"id":189963,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":true,"comment_ctime":1584586341,"is_pvip":true,"replies":[{"id":"73077","content":"👍🏻","user_name":"作者回复","comment_id":189963,"uid":"1001470","ip_address":"","utype":1,"ctime":1584588601,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"9.2233722746626007e+18","product_id":100047701,"comment_content":"试着回答下问题：<br>1、为什么很少见到写入超时，客户端发送数据到服务端，首先接力连接（TCP），然后写入TCP缓冲区，TCP缓冲区根据时间窗口，发送数据到服务端，因此写入操作可以任务是自己本地的操作，本地操作是不需要什么超时时间的，如果真的有什么异常，那也是连接（TCP）不上，或者超时的问题，连接超时和读取超时就能覆盖这种场景。<br>2、proxy_next_upstream：语法: proxy_next_upstream <br>      [error|timeout|invalid_header|http_500|http_503|http_404|off]<br>      默认值: proxy_next_upstream error timeout<br>      即 error timeout会自动重试<br>可以修改默认值，在去掉error和timeout，这样在发生错误和超时时，不会重试<br>proxy_next_upstream_tries 这个参数决定重试的次数，0表示关闭该参数<br>Limits the number of possible tries for passing a request to the next server. The 0 value turns off this limitation.","like_count":55,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487843,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584588601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207438,"user_name":"徐典阳✔️","can_delete":false,"product_type":"c1","uid":1565569,"ip_address":"","ucode":"41DA01FBBD8D29","user_header":"https://static001.geekbang.org/account/avatar/00/17/e3/81/29dd8167.jpg","comment_is_top":true,"comment_ctime":1587086822,"is_pvip":false,"replies":[{"id":"77480","content":"可以，补充了一个例子：<br>https:&#47;&#47;github.com&#47;JosephZhu1983&#47;java-common-mistakes&#47;blob&#47;master&#47;src&#47;main&#47;java&#47;org&#47;geekbang&#47;time&#47;commonmistakes&#47;httpinvoke&#47;feignpermethodtimeout&#47;FeignPerMethodTimeoutController.java<br><br>Feign比较新的版本才会支持：<br>https:&#47;&#47;github.com&#47;OpenFeign&#47;feign&#47;pull&#47;970<br><br>相关源码：<br>SynchronousMethodHandler<br><br>Options findOptions(Object[] argv) {<br>    if (argv == null || argv.length == 0) {<br>      return this.options;<br>    }<br>    return (Options) Stream.of(argv)<br>        .filter(o -&gt; o instanceof Options)<br>        .findFirst()<br>        .orElse(this.options);<br>  }","user_name":"作者回复","comment_id":207438,"uid":"1001470","ip_address":"","utype":1,"ctime":1587093283,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"9.2233721329311007e+18","product_id":100047701,"comment_content":"朱老师，请问Feign声明式HTTP接口调用可以针对某服务单个接口配置读取超时参数吗？我们这边一个微服务有n个接口，有一些接口处理耗时长有一些处理耗时短，但调用方又不期望针对同一个微服务声明多个Feign client。我简单翻了源码没有找到。","like_count":22,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492125,"discussion_content":"可以，补充了一个例子：\nhttps://github.com/JosephZhu1983/java-common-mistakes/blob/master/src/main/java/org/geekbang/time/commonmistakes/httpinvoke/feignpermethodtimeout/FeignPerMethodTimeoutController.java\n\nFeign比较新的版本才会支持：\nhttps://github.com/OpenFeign/feign/pull/970\n\n相关源码：\nSynchronousMethodHandler\n\nOptions findOptions(Object[] argv) {\n    if (argv == null || argv.length == 0) {\n      return this.options;\n    }\n    return (Options) Stream.of(argv)\n        .filter(o -&amp;gt; o instanceof Options)\n        .findFirst()\n        .orElse(this.options);\n  }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587093283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1564465,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/31/fdb1fb09.jpg","nickname":"余松","note":"","ucode":"08E69DC444CF70","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330818,"discussion_content":"你好 我这边看到只是GET请求可以采用这种模式来做 如果调用外游是post请求 改怎么处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606715822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190034,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":true,"comment_ctime":1584596346,"is_pvip":false,"replies":[{"id":"73133","content":"499情况比较特殊，虽然表现为服务端（一般为代理，比如nginx）记录和返回499状态码，但是其实是因为处理时间太长，客户端超时主动关闭连接，排查两点：<br>1、客户端读取超时时间多久<br>2、服务端为什么处理这么慢超过了客户端的读取超时<br><br>如果希望不要499的话，对于nginx可以开启<br>proxy_ignore_client_abort，这样可以让请求在服务端执行完成","user_name":"作者回复","comment_id":190034,"uid":"1001470","ip_address":"","utype":1,"ctime":1584598946,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"9.2233721157488005e+18","product_id":100047701,"comment_content":"老师，我这边工作过程中遇到服务端 499 这块要怎么从链接超时和读取超时设置去分析呢？","like_count":19,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487861,"discussion_content":"499情况比较特殊，虽然表现为服务端（一般为代理，比如nginx）记录和返回499状态码，但是其实是因为处理时间太长，客户端超时主动关闭连接，排查两点：\n1、客户端读取超时时间多久\n2、服务端为什么处理这么慢超过了客户端的读取超时\n\n如果希望不要499的话，对于nginx可以开启\nproxy_ignore_client_abort，这样可以让请求在服务端执行完成","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584598946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190923,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":true,"comment_ctime":1584709673,"is_pvip":false,"replies":[{"id":"73340","content":"1、启动时不进断点不代表不是，执行后会进断点，原因是LoadBalancerFeignClient.execute()，运行时注入依赖的，这个方法一路追下去：<br><br>IClientConfig getClientConfig(Request.Options options, String clientName) {<br>\t\tIClientConfig requestConfig;<br>\t\tif (options == DEFAULT_OPTIONS) {<br>\t\t\trequestConfig = this.clientFactory.getClientConfig(clientName);<br>\t\t}<br>\t\telse {<br>\t\t\trequestConfig = new FeignOptionsClientConfig(options);<br>\t\t}<br>\t\treturn requestConfig;<br>\t}<br><br><br>2、ribbon是netflix的三方库，不是spring boot @ConfigurationProperties玩法，Key定义在：<br><br>com.netflix.client.config.CommonClientConfigKey","user_name":"作者回复","comment_id":190923,"uid":"1001470","ip_address":"","utype":1,"ctime":1584714385,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"9.2233720856840991e+18","product_id":100047701,"comment_content":"我们来分析一下源码。打开 RibbonClientConfiguration 类后，会看到 DefaultClientConfigImpl 被创建出来之后，ReadTimeout 和 ConnectTimeout 被设置为 1s：<br><br>&#47;**<br> * Ribbon client default connect timeout.<br> *&#47;<br>public static final int DEFAULT_CONNECT_TIMEOUT = 1000;<br><br>&#47;**<br> * Ribbon client default read timeout.<br> *&#47;<br>public static final int DEFAULT_READ_TIMEOUT = 1000;<br><br>@Bean<br>@ConditionalOnMissingBean<br>public IClientConfig ribbonClientConfig() {<br>   DefaultClientConfigImpl config = new DefaultClientConfigImpl();   &#47;&#47;此行打断点<br>   config.loadProperties(this.name);<br>   config.set(CommonClientConfigKey.ConnectTimeout, DEFAULT_CONNECT_TIMEOUT);<br>   config.set(CommonClientConfigKey.ReadTimeout, DEFAULT_READ_TIMEOUT);<br>   config.set(CommonClientConfigKey.GZipPayload, DEFAULT_GZIP_PAYLOAD);<br>   return config;<br>}<br><br>被死扣的毛病折腾着，以上这段描述和代码中，有两个疑问，烦老师解惑，谢谢。<br>1、使用默认配置，我在标注行打了断点，debug启动时未进断点。是不是表明默认值不是在此段代码设置的？<br>2、找到了feign配置的原始类FeignClientProperties，但是没找到ribbon的。","like_count":11,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488079,"discussion_content":"1、启动时不进断点不代表不是，执行后会进断点，原因是LoadBalancerFeignClient.execute()，运行时注入依赖的，这个方法一路追下去：\n\nIClientConfig getClientConfig(Request.Options options, String clientName) {\n\t\tIClientConfig requestConfig;\n\t\tif (options == DEFAULT_OPTIONS) {\n\t\t\trequestConfig = this.clientFactory.getClientConfig(clientName);\n\t\t}\n\t\telse {\n\t\t\trequestConfig = new FeignOptionsClientConfig(options);\n\t\t}\n\t\treturn requestConfig;\n\t}\n\n\n2、ribbon是netflix的三方库，不是spring boot @ConfigurationProperties玩法，Key定义在：\n\ncom.netflix.client.config.CommonClientConfigKey","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584714385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189930,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1584582936,"is_pvip":false,"replies":[{"id":"73081","content":"总结的不错","user_name":"作者回复","comment_id":189930,"uid":"1001470","ip_address":"","utype":1,"ctime":1584589392,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"121843667224","product_id":100047701,"comment_content":"这已经不单单是一个坑了，而是N一个场景下，多种多样的坑。<br>Spring Boot 带来了【约定大于配置】的说法，但是，本文告诉我们，越是约定大于配置，越是要对那些“默认配置”心里有数才行。<br>HTTP请求，说到底，还是网络调用。某个老师曾说过，网络，就是不靠谱的。就存在拥塞，丢包等各种情况。从而使得排查的难度更大。要考虑的角度，宽度，都更广。不单是客户端，服务端，甚至还要考虑网络环境。这对程序员具备的技术深度，广度都有了更高的要求。<br>今天的收货：<br>首先，增长了经验。知道了有这么些坑，虽然不一定能记得住，最起码留个印象。以后碰到类似的问题了能想起来。<br>然后，不能盲目相信默认配置。条件允许的情况下，还是需要了解关注那些默认配置以及默认实现。<br>最后，对HTTP调用，的测试方式与模拟方式，也了解到了测试方式。如何分别设置超时时间来找问题。<br><br>其实，还希望能听听老师讲讲HTTP调用出问题的排查思路与方案。","like_count":28,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487831,"discussion_content":"总结的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584589392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200842,"user_name":"Geek_d7ede4","can_delete":false,"product_type":"c1","uid":1432741,"ip_address":"","ucode":"71915DDFEE1901","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFgmmBXRltzTkfeajYGLptvvwEsMyiaCT5nJZNg4TZJWh02cgwxtrEIk6TWSbGpBibE7Bbvoicjciaiag/132","comment_is_top":false,"comment_ctime":1585659924,"is_pvip":false,"replies":[{"id":"75159","content":"很典型的问题：<br>1、先创建支付订单，再提交外部，创建订单的操作独立事务，不要回滚（否则出异常了，订单都没了，补偿的依据都没有）<br>2、只有外部接口告诉你明确成功或失败了，你才能认为操作成功或失败<br>3、否则由定时任务调用外部查询接口查询交易结果，然后根据查到的结果补偿本地状态<br>","user_name":"作者回复","comment_id":200842,"uid":"1001470","ip_address":"","utype":1,"ctime":1585662013,"user_name_real":"朱晔"}],"discussion_count":7,"race_medal":0,"score":"117549776916","product_id":100047701,"comment_content":"老师您好，我之前对接过一个第三方支付接口，调用支付接口a账户对b账户进行了转账操作，我业务数据库也要做一个记账操作在数据库中，如何保证调用第三方支付接口和我本地的业务是一致性的呢？就是第三方支付接口有可能已经转账成功了，但是我业务代码可能抛异常，导致回滚了。","like_count":27,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490150,"discussion_content":"很典型的问题：\n1、先创建支付订单，再提交外部，创建订单的操作独立事务，不要回滚（否则出异常了，订单都没了，补偿的依据都没有）\n2、只有外部接口告诉你明确成功或失败了，你才能认为操作成功或失败\n3、否则由定时任务调用外部查询接口查询交易结果，然后根据查到的结果补偿本地状态\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585662013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2370429,"avatar":"https://static001.geekbang.org/account/avatar/00/24/2b/7d/51ae3a79.jpg","nickname":"Old_Young","note":"","ucode":"5B6D69A7390D91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":554453,"discussion_content":"老师您好，有一种极限场景是查询一直不返回结果，那么补偿就无法实现，这笔订单该怎么处理？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646386056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":490150,"ip_address":""},"score":554453,"extra":""}]},{"author":{"id":1161352,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/88/5c5d854c.jpg","nickname":"kelly0524","note":"","ucode":"2D24B8974B8E58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293228,"discussion_content":"创建订单的操作独立事务，不要回滚。。。 这段话不是很理解，老师或者同学们可以解答一下吗，谢谢！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1595487707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1302360,"avatar":"https://static001.geekbang.org/account/avatar/00/13/df/58/5b73780a.jpg","nickname":"星空","note":"","ucode":"0F6A556FC7B40F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1161352,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/88/5c5d854c.jpg","nickname":"kelly0524","note":"","ucode":"2D24B8974B8E58","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299076,"discussion_content":"本方和第三方对数据的时候有个依据，你不能用日志去和对方对数据吧。假如放在一个事物里面，任何一个环节出问题了，库里都是空的。放在独立事物里面，等独立事物提交成功了，你再操作接下来的业务，后续只是改状态的问题了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597555806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":293228,"ip_address":""},"score":299076,"extra":""}]},{"author":{"id":1225974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b4/f6/e39d5af1.jpg","nickname":"钱米","note":"","ucode":"07AA44C6A40D34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388643,"discussion_content":"加中间态，tcc，结果消息回调，结果异步查询处理，日账单核对，最终一致性。可以参考。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628864791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1350991,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/4f/273ffb51.jpg","nickname":"小哪吒","note":"","ucode":"252087A733355C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392480,"discussion_content":"支付接口理论上都有回调的，，定时轮询补偿+回调，足够了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631015988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230912,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c8/40/0342dca5.jpg","nickname":"刘光裕","note":"","ucode":"33091984F240E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333180,"discussion_content":"手动点赞，我们也碰到了这种问题，可以参考老师的方式来处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607474793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191003,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1584717099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57419291947","product_id":100047701,"comment_content":"里面说的坑也许过了一段时间就忘了 当时有四个字是我学到的 那就是“查看源码”","like_count":13},{"had_liked":false,"id":195283,"user_name":"Unravel👾","can_delete":false,"product_type":"c1","uid":1078512,"ip_address":"","ucode":"9442FF23E783A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/f0/708189aa.jpg","comment_is_top":false,"comment_ctime":1585153547,"is_pvip":false,"replies":[{"id":"74237","content":"既然你是遇到偶尔出现连接失败，说明对端端口是开的，这种连接超时偶发问题一般是网络问题，丢包、防火墙、带宽打满、网卡配置问题，甚至是硬件问题（网线网口）等引起的，链路上任何一个环节的软件和硬件都可能引起问题，抓包分析吧。<br><br>另外ping一次是成功的，长ping一下看看。curl一次是成功的，做一个监控10s一次curl一次试试。","user_name":"作者回复","comment_id":195283,"uid":"1001470","ip_address":"","utype":1,"ctime":1585183468,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"35944891915","product_id":100047701,"comment_content":"老师您好<br>前段时间遇到过一个连接超时的问题，在springboot中使用restTemplate(无论是不配置还是增大超时时间或是加入apache http client连接池)在业务中请求另外一个服务的接口经常会出connect timeout(经过nginx或是直接连接tomcat都会出现)<br>此时ping、telnet、curl都是成功的<br>但是如果另有一个任务定时一直请求接口，那么在业务中就不会出现connect timeout了。<br>一直没有成功解决这个问题，想问下老师可以从哪方面入手，谢谢老师","like_count":8,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489014,"discussion_content":"既然你是遇到偶尔出现连接失败，说明对端端口是开的，这种连接超时偶发问题一般是网络问题，丢包、防火墙、带宽打满、网卡配置问题，甚至是硬件问题（网线网口）等引起的，链路上任何一个环节的软件和硬件都可能引起问题，抓包分析吧。\n\n另外ping一次是成功的，长ping一下看看。curl一次是成功的，做一个监控10s一次curl一次试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585183468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074897,"avatar":"https://static001.geekbang.org/account/avatar/00/10/66/d1/8664c464.jpg","nickname":"flyCoder","note":"","ucode":"82FB7B60775978","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283574,"discussion_content":"这个问题，我也遇到了，我这边增加带宽就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592299390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190998,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1584716905,"is_pvip":false,"replies":[{"id":"73358","content":"如果觉得有用可以多转发分享","user_name":"作者回复","comment_id":190998,"uid":"1001470","ip_address":"","utype":1,"ctime":1584749513,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"23059553385","product_id":100047701,"comment_content":"花了两个晚上终于还是把这节啃了下来，准备运行环境，重现所有问题，翻看相关源码。<br>终于等到你，还好我没放弃。<br>个人感悟，这些坑对以后快速排查问题，肯定有帮助。就算以后淡忘了这节的内容，但至少还会有些许记忆的，哪个专栏，哪个老师，哪篇文章。感谢老师！","like_count":5,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488097,"discussion_content":"如果觉得有用可以多转发分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584749513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190831,"user_name":"陈天柱","can_delete":false,"product_type":"c1","uid":1696225,"ip_address":"","ucode":"917BFDC845760D","user_header":"https://static001.geekbang.org/account/avatar/00/19/e1/e1/441df85d.jpg","comment_is_top":false,"comment_ctime":1584696743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23059533223","product_id":100047701,"comment_content":"之前用Spring Cloud就遇到过feign调用超时的坑，始终配置readTimeout值都不生效。虽然后面网上查阅了资料暂时性解决了，但是看了老师的解决问题思路才发现，这个时候就需要带着问题去阅读源码找寻答案，提高自己阅读源码的能力。 ","like_count":5},{"had_liked":false,"id":190346,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1584631164,"is_pvip":false,"replies":[{"id":"73218","content":"源码里面有，在clientreadtimeout里<br>Request是在这里：<br>&lt;dependency&gt;<br>            &lt;groupId&gt;org.apache.httpcomponents&lt;&#47;groupId&gt;<br>            &lt;artifactId&gt;fluent-hc&lt;&#47;artifactId&gt;<br>            &lt;version&gt;4.5.9&lt;&#47;version&gt;<br>        &lt;&#47;dependency&gt;","user_name":"作者回复","comment_id":190346,"uid":"1001470","ip_address":"","utype":1,"ctime":1584665096,"user_name_real":"朱晔"}],"discussion_count":3,"race_medal":0,"score":"14469533052","product_id":100047701,"comment_content":"public class ClientReadTimeoutController {<br>    private String getResponse(String url, int connectTimeout, int readTimeout) throws IOException {<br>        return Request.Get(&quot;http:&#47;&#47;localhost:45678&#47;clientreadtimeout&quot; + url)<br>                .connectTimeout(connectTimeout)<br>                .socketTimeout(readTimeout)<br>                .execute()<br>                .returnContent()<br>                .asString();<br>    }<br>....<br>}<br><br><br>这第一段代码中Request这个类，是引用哪个包下的？找得好辛苦，老师第5节的代码也没上传到git","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487956,"discussion_content":"源码里面有，在clientreadtimeout里\nRequest是在这里：\n&amp;lt;dependency&amp;gt;\n            &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;\n            &amp;lt;artifactId&amp;gt;fluent-hc&amp;lt;/artifactId&amp;gt;\n            &amp;lt;version&amp;gt;4.5.9&amp;lt;/version&amp;gt;\n        &amp;lt;/dependency&amp;gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584665096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382878,"discussion_content":"这个写法，用老师上一节的知识压测了一下。每发起一次请求，会创建一个TCP连接。随着请求数增大，连接数也会增大，生产这么写会有问题的。还是搞那种线程池复用的，更靠谱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625752718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250907,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","nickname":"Monday","note":"","ucode":"77B9BACC783598","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209554,"discussion_content":"从老pom.xml中找到了那个依赖包","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584634547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190318,"user_name":"终结者999号","can_delete":false,"product_type":"c1","uid":1055854,"ip_address":"","ucode":"33ADE61580B6DD","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/6e/6c5f5734.jpg","comment_is_top":false,"comment_ctime":1584628684,"is_pvip":true,"replies":[{"id":"73278","content":"我个人觉得okhttp易用性更高一点，不过okhttp应该在安卓领域更火一点，后端使用okhttp的应该不多。万变不离其宗，使用任何httpclient都要考虑连接池、超时配置、自动重试和并发问题","user_name":"作者回复","comment_id":190318,"uid":"1001470","ip_address":"","utype":1,"ctime":1584675783,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"14469530572","product_id":100047701,"comment_content":"老师，对于Http Client和Ok Http相比，是不是OkHttp支持得更好，而且HTTP2相比于HTTP1.1的新特性是不是也使得我们不用过去的一些配置了啊","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487948,"discussion_content":"我个人觉得okhttp易用性更高一点，不过okhttp应该在安卓领域更火一点，后端使用okhttp的应该不多。万变不离其宗，使用任何httpclient都要考虑连接池、超时配置、自动重试和并发问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584675783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189826,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1584573496,"is_pvip":false,"replies":[{"id":"73140","content":"如果觉得好，可以多分享转发","user_name":"作者回复","comment_id":189826,"uid":"1001470","ip_address":"","utype":1,"ctime":1584599889,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"14469475384","product_id":100047701,"comment_content":"好文章，好“坑”。","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487806,"discussion_content":"如果觉得好，可以多分享转发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584599889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232744,"user_name":"Whale","can_delete":false,"product_type":"c1","uid":1485161,"ip_address":"","ucode":"33DEA25F913C6B","user_header":"https://static001.geekbang.org/account/avatar/00/16/a9/69/7fe99f4e.jpg","comment_is_top":false,"comment_ctime":1594106798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10184041390","product_id":100047701,"comment_content":"学到了 feign和httpclient都用过，只停留在其他人搭建好我使用的状态，但这次对feign和httpclient的一些配置都有了新的认识，接下来打算自己去试着搭建。很有收获，继续前进！","like_count":2},{"had_liked":false,"id":198627,"user_name":"看不到de颜色","can_delete":false,"product_type":"c1","uid":1162714,"ip_address":"","ucode":"88348CCAE81931","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","comment_is_top":false,"comment_ctime":1585460759,"is_pvip":false,"replies":[{"id":"74711","content":"是的 除非send buffer满了","user_name":"作者回复","comment_id":198627,"uid":"1001470","ip_address":"","utype":1,"ctime":1585467617,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"10175395351","product_id":100047701,"comment_content":"处理超时一定要搞清楚超时的阶段。到底是建连超时还是等待响应超时(读取超时)。针对不同的问题针对解决。对于写超时这个相当于写本地TCP缓冲区，速度应该很快，很少会出现socket无法写入导致的写超时问题。<br>很久没用用过HttpClient了。回忆了一下，以前确实没有搞清楚总并发(maxTotal)和单域名并发(defaultMaxPerRoute)的区别。通过这篇文章总算搞明白了，收货颇丰。","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489730,"discussion_content":"是的 除非send buffer满了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585467617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190978,"user_name":"一个想偷懒的程序坑","can_delete":false,"product_type":"c1","uid":1013223,"ip_address":"","ucode":"C5F221A7065B74","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/e7/326d7515.jpg","comment_is_top":false,"comment_ctime":1584715580,"is_pvip":false,"replies":[{"id":"73359","content":"如果觉得有用可以多转发分享","user_name":"作者回复","comment_id":190978,"uid":"1001470","ip_address":"","utype":1,"ctime":1584749518,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"10174650172","product_id":100047701,"comment_content":"虽然没处理过这块儿的东西，但看完了解了许多知识，赞！","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488092,"discussion_content":"如果觉得有用可以多转发分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584749518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190393,"user_name":"Alpha","can_delete":false,"product_type":"c1","uid":1001861,"ip_address":"","ucode":"60CA15A25EC796","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/85/3f161d95.jpg","comment_is_top":false,"comment_ctime":1584636565,"is_pvip":false,"replies":[{"id":"73216","content":"这么长的参数看看是否合理，对于有一些数据它可能并不是查询参数可以放头里传","user_name":"作者回复","comment_id":190393,"uid":"1001470","ip_address":"","utype":1,"ctime":1584664783,"user_name_real":"朱晔"}],"discussion_count":3,"race_medal":0,"score":"10174571157","product_id":100047701,"comment_content":"非常同意选择Get还是Post应该依据API的行为。<br>但是有时数据查询的API参数确实不得已很长，会导致浏览器的长度限制，老师有好的办法吗？","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487969,"discussion_content":"这么长的参数看看是否合理，对于有一些数据它可能并不是查询参数可以放头里传","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584664783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b4/f6/e39d5af1.jpg","nickname":"钱米","note":"","ucode":"07AA44C6A40D34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388647,"discussion_content":"虽然不太合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628865194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b4/f6/e39d5af1.jpg","nickname":"钱米","note":"","ucode":"07AA44C6A40D34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388646,"discussion_content":"犹豫不决选POST，有的公司为了统一避坑等，所有接口用POST","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628865171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190241,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1584621301,"is_pvip":false,"replies":[{"id":"73187","content":"这就不清楚了","user_name":"作者回复","comment_id":190241,"uid":"1001470","ip_address":"","utype":1,"ctime":1584625134,"user_name_real":"朱晔"}],"discussion_count":3,"race_medal":0,"score":"10174555893","product_id":100047701,"comment_content":"ribbon.ReadTimeout=4000<br>ribbon.ConnectTimeout=4000<br><br>这个参数的key命名不规范，是有故事，还是开发人员不够专业？","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487924,"discussion_content":"这就不清楚了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584625134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356958,"discussion_content":"实习生写的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615713741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/ff/f71034e9.jpg","nickname":"悟空WuKong","note":"","ucode":"49AFD2B048C1BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298367,"discussion_content":"新手写的吧，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597281664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233960,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1594535956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889503252","product_id":100047701,"comment_content":"已解决,是pom.xml文件没有将配置文件包含到class目录下.","like_count":1},{"had_liked":false,"id":218783,"user_name":"姜 某某","can_delete":false,"product_type":"c1","uid":1525637,"ip_address":"","ucode":"20BF62290A9B4A","user_header":"https://static001.geekbang.org/account/avatar/00/17/47/85/5ee73eb1.jpg","comment_is_top":false,"comment_ctime":1589874893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884842189","product_id":100047701,"comment_content":"demo程序 怎么跑起来 ？","like_count":1},{"had_liked":false,"id":217679,"user_name":"星辰大海","can_delete":false,"product_type":"c1","uid":1265881,"ip_address":"","ucode":"6A1134533337FA","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/d9/18acc2ee.jpg","comment_is_top":false,"comment_ctime":1589583638,"is_pvip":false,"replies":[{"id":"80504","content":"虽然都包装为了ResourceAccessException，但是具体的cause都是不同的","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1589592804,"ip_address":"","comment_id":217679,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884550934","product_id":100047701,"comment_content":"老师你好 想问下resttemplate可以单独针对sockettimeout exception进行处理吗 最近的一个项目中使用resttemplate方式调用下游 针对读取超时的情况不再进行重试 但resttemplate对异常进行了重新封装 无法进行单独识别 ","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495217,"discussion_content":"虽然都包装为了ResourceAccessException，但是具体的cause都是不同的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589592804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199235,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1585483387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880450683","product_id":100047701,"comment_content":"只考虑过超时。","like_count":1},{"had_liked":false,"id":191929,"user_name":"justinzhong","can_delete":false,"product_type":"c1","uid":1903397,"ip_address":"","ucode":"54E0F38FDE713F","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0b/25/bee12452.jpg","comment_is_top":false,"comment_ctime":1584804078,"is_pvip":false,"replies":[{"id":"73490","content":"1. 确定没看错，也就是RibbonRetryIssueServerController只看到一次输出<br>2. 确定参数ribbon.OkToRetryOnAllOperations没有设置为true","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1584836631,"ip_address":"","comment_id":191929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879771374","product_id":100047701,"comment_content":"老师，针对发送短信的那个例子，解决重试问题的方法一：就是get请求换成post请求，我试了几次都是不行的，还是会重试一次，但是方法二是完全可以的。可以针对方法一的解决重试问题的思路再描述的清楚一些吗？","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488288,"discussion_content":"1. 确定没看错，也就是RibbonRetryIssueServerController只看到一次输出\n2. 确定参数ribbon.OkToRetryOnAllOperations没有设置为true","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584836631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190800,"user_name":"汝林外史","can_delete":false,"product_type":"c1","uid":1188906,"ip_address":"","ucode":"3C66C0F0537A99","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/2a/33441e2b.jpg","comment_is_top":false,"comment_ctime":1584693249,"is_pvip":false,"replies":[{"id":"73319","content":"这里是可以直接传CloseableHttpClient的","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1584696927,"ip_address":"","comment_id":190800,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879660545","product_id":100047701,"comment_content":"sendRequest(int count, Supplier&lt;CloseableHttpClient&gt; client) 这个方法中第二个参数为什么要用一个函数接口而不是直接用CloseableHttpClient类型呢？ 我看也没用到什么特性，只是调用了execute方法而已？<br>课后问题：1. 感觉写入超时已经包含在读取超时这个里面，没必要单独定义这么细的超时。<br>2. nginx真不是很了解，老师想加餐了吗？哈哈","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488057,"discussion_content":"这里是可以直接传CloseableHttpClient的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584696927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190243,"user_name":"大尾巴老猫","can_delete":false,"product_type":"c1","uid":1260089,"ip_address":"","ucode":"246AB375244773","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/39/72d81605.jpg","comment_is_top":false,"comment_ctime":1584621439,"is_pvip":true,"replies":[{"id":"73183","content":"就是模拟一个服务端接口","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1584624567,"ip_address":"","comment_id":190243,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879588735","product_id":100047701,"comment_content":"void server();<br>这一句什么意思？","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487925,"discussion_content":"就是模拟一个服务端接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584624567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190035,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1584596382,"is_pvip":false,"replies":[{"id":"73132","content":"其实也就是到socket sendbuffer的超时（满的话等待空间释放的超时）","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1584598816,"ip_address":"","comment_id":190035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879563678","product_id":100047701,"comment_content":"老师我是做客户端的 ，我们这边还有个写超时概念这块老师方便分享下不","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487862,"discussion_content":"其实也就是到socket sendbuffer的超时（满的话等待空间释放的超时）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584598816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189859,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1584577914,"is_pvip":true,"replies":[{"id":"73139","content":"如果觉得好，可以多分享","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1584599878,"ip_address":"","comment_id":189859,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879545210","product_id":100047701,"comment_content":"老师总结的很有深度、很全面、很有业务实战","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487815,"discussion_content":"如果觉得好，可以多分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584599878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189838,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1584575426,"is_pvip":false,"replies":[{"id":"73070","content":"嗯大概意思对 可以再搜一下相关资料继续研究一下","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1584580540,"ip_address":"","comment_id":189838,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879542722","product_id":100047701,"comment_content":"对于数据写入，开发者都可以直接控制，要么先write然后再一次性flush，要么边write边flush，至于最后socket缓冲区中的数据如何发送，都交给了tcp。","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487808,"discussion_content":"嗯大概意思对 可以再搜一下相关资料继续研究一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584580540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189817,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1584570368,"is_pvip":false,"replies":[{"id":"73069","content":"嗯大概意思对 可以再搜一下相关资料继续研究一下","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1584580534,"ip_address":"","comment_id":189817,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5879537664","product_id":100047701,"comment_content":"按照老师解释的读取超时的概念：字节流放入socket---&gt;服务端处理-------&gt;服务端返回---&gt;取出字节流。<br>那写入超时估计就是字节流放入socket的时间，这个属于自己主动控制的可能没有必要吧，具体可能还需要了解一下网络编程才能知道。","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487804,"discussion_content":"嗯大概意思对 可以再搜一下相关资料继续研究一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584580534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623626,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/4a/3bd896fc.jpg","nickname":"Heiky","note":"","ucode":"03AA79E1BC4AE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258727,"discussion_content":"我怎么感觉这样理解不对，老师说的是读取超时，应该是服务端处理——>服务端写回socket——>客户端读取，这样的一个流程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588725544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356824,"user_name":"katalya","can_delete":false,"product_type":"c1","uid":1367464,"ip_address":"广东","ucode":"CCD1FE6C4F8C1E","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/a8/a2c910b6.jpg","comment_is_top":false,"comment_ctime":1662619406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662619406","product_id":100047701,"comment_content":"牛逼","like_count":0},{"had_liked":false,"id":347426,"user_name":"放学后的小林同学","can_delete":false,"product_type":"c1","uid":2271534,"ip_address":"","ucode":"D8D6D8292ED816","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/3cm60SpHkFkZwoUIGguZl3mm3YyObVs8Rl0J4ibJ4ExhBaJUluGVxTfE0RdKSiaWLx5eFkos2BDA8aQQ8xuTOy3Q/132","comment_is_top":false,"comment_ctime":1654006524,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654006524","product_id":100047701,"comment_content":"真的是让我越发感觉到底层学习的重要性","like_count":0},{"had_liked":false,"id":342163,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1650077487,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650077487","product_id":100047701,"comment_content":"之前有遇到一个问题，上传营业执照的一个接口，每次都会超时，但是客户端和服务端处理的时间都不长，最后发现是带宽太小，相当大一部分时间浪费在数据传输上了。。。","like_count":0},{"had_liked":false,"id":324517,"user_name":"老地平线","can_delete":false,"product_type":"c1","uid":1116077,"ip_address":"","ucode":"C0308B3AA50BF0","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/ad/d8ca4249.jpg","comment_is_top":false,"comment_ctime":1638486588,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638486588","product_id":100047701,"comment_content":"老师好，想请教一下，如果是每次调用方法都要创建一个HttpClients，那是不是可以理解并没有用上httpClient连接池。<br><br>public static String sendRawJSON(String url, String JSON) {<br>        .....<br>        CloseableHttpClient httpClient = null;<br>        HttpPost httpPost = null;<br>        String result = null;<br>        try {<br>            httpClient = HttpClients.createDefault();<br>            httpPost = new HttpPost(url);<br>            &#47;&#47;设置参数<br>             .... <br>            HttpResponse response = httpClient.execute(httpPost); <br>            ....<br>        } catch (Exception ex) { <br>            ex.printStackTrace();<br>        }<br>      <br>        return result;<br>    }","like_count":0},{"had_liked":false,"id":315183,"user_name":"纵不朽","can_delete":false,"product_type":"c1","uid":1877862,"ip_address":"","ucode":"DB2CA2C46B2EF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","comment_is_top":false,"comment_ctime":1633744713,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1633744713","product_id":100047701,"comment_content":"老师说的都理解了，但是看源码这个技能怎么学会😭。经常自己看着网上的教程大概知道这个框架的配置和大致逻辑在哪里了， 然后版本一更新源码变动了，就不知道怎么点进去了","like_count":0},{"had_liked":false,"id":312386,"user_name":"恒星","can_delete":false,"product_type":"c1","uid":2715095,"ip_address":"","ucode":"C17DD00239780D","user_header":"","comment_is_top":false,"comment_ctime":1631782661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631782661","product_id":100047701,"comment_content":"老师，有个疑惑，ribbon默认的重试对超时时间没有要求吗，案例中ribbon默认重试了一次，超时时间是1s，但是服务调用要2s，如果超时时间对重试有影响，那就不会调用成功了","like_count":0},{"had_liked":false,"id":302697,"user_name":"防腐基","can_delete":false,"product_type":"c1","uid":2696605,"ip_address":"","ucode":"0FF3BF30631995","user_header":"https://static001.geekbang.org/account/avatar/00/29/25/9d/d612cbf8.jpg","comment_is_top":false,"comment_ctime":1626338394,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1626338394","product_id":100047701,"comment_content":"那个HTTP客户端工具调用时设置的并发数，有什么计算公式吗，我没看明白实际工作中如何设置的方法。","like_count":0},{"had_liked":false,"id":300129,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1625017817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625017817","product_id":100047701,"comment_content":"openfeign 优化了不少。其实超时时间已经修改为默认60秒，但是填写配置有一些不太合理的地方。而且建议feign要加上 ribbon hystrix 一块玩。。。配置也是类似。<br>参考如下：<br>https:&#47;&#47;www.cnblogs.com&#47;kancy&#47;p&#47;13033021.html<br>https:&#47;&#47;www.cnblogs.com&#47;qingmuchuanqi48&#47;p&#47;13138428.html<br>","like_count":0},{"had_liked":false,"id":300018,"user_name":"Z. w","can_delete":false,"product_type":"c1","uid":2671015,"ip_address":"","ucode":"E3066ADE516B6A","user_header":"https://static001.geekbang.org/account/avatar/00/28/c1/a7/67c8530d.jpg","comment_is_top":false,"comment_ctime":1624956774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624956774","product_id":100047701,"comment_content":"httpclient默认的retry也是很烦人，之前碰到相关问题，日志找了半天才发现。","like_count":0},{"had_liked":false,"id":295775,"user_name":"听雨","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1622597033,"is_pvip":false,"replies":[{"id":"107450","content":"哦？","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1622717385,"ip_address":"","comment_id":295775,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1622597033","product_id":100047701,"comment_content":"关于Feign读取超时必须同时配置连接超时才能生效的问题，貌似在spring-cloud-openfeign:2.2.4.RELEASE版本修复了，对应的springcloud版本Hoxton.SR7","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521211,"discussion_content":"哦？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622717385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382882,"discussion_content":"亲测，老哥说的没错，我试了一下Hoxton.SR7是可以的，其他版本没试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625753489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283377,"user_name":"mghio","can_delete":false,"product_type":"c1","uid":1213078,"ip_address":"","ucode":"74883EDE4FD0DC","user_header":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","comment_is_top":false,"comment_ctime":1615733903,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615733903","product_id":100047701,"comment_content":"spring-cloud-starter-openfeign:3.0.1 版本的 connectTimeout 和 readTimeout 是分开配置的，具体源码可以看 FeignClientFactoryBean#configureUsingProperties 方法。","like_count":0},{"had_liked":false,"id":253746,"user_name":"I","can_delete":false,"product_type":"c1","uid":1028272,"ip_address":"","ucode":"6F6367210ED44A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/b0/9335798e.jpg","comment_is_top":false,"comment_ctime":1602851729,"is_pvip":true,"replies":[{"id":"92797","content":"没有太看懂啥意思","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1603076106,"ip_address":"","comment_id":253746,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1602851729","product_id":100047701,"comment_content":"想提一个ribbon的问题<br>文章中 有个配置 SmsClient.ribbon.listOfServers=localhost:45679,localhost:45678<br>是指定服务调用地址，不过这个配置在使用eureka做服务发现的时候就不生效了，有没有办法，在使用eureka的时候也可以指定服务调用地址呢，这个问题有点奇葩，不过还是想知道有办法吗","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507164,"discussion_content":"没有太看懂啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603076106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377939,"discussion_content":"Ribbon既可以配合Eureka使用，也可以脱离Eureka使用。\n当Eureka与Ribbon一起使用时(两者都存在于ClassPath)，ribbonServerList将被DiscoveryEnabledNIWSServerList的扩展覆盖。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622973000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249768,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1140967,"ip_address":"","ucode":"E4C9A417653A3F","user_header":"https://static001.geekbang.org/account/avatar/00/11/68/e7/b29afd20.jpg","comment_is_top":false,"comment_ctime":1600784893,"is_pvip":false,"replies":[{"id":"91565","content":"最简单的方式使用多个 resttemplate bean，一般你的超时也就几种不可能精确到毫秒的<br><br>或者可以直接使用 HttpClient，通过RequestConfig实现每一个请求独立的超时时间配置","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1600825687,"ip_address":"","comment_id":249768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600784893","product_id":100047701,"comment_content":"请教老师spring resttemplate如何设置单次请求的超时时间。比如不同的接口需要设置不同的读取超时时间。","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506009,"discussion_content":"最简单的方式使用多个 resttemplate bean，一般你的超时也就几种不可能精确到毫秒的\n\n或者可以直接使用 HttpClient，通过RequestConfig实现每一个请求独立的超时时间配置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600825687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242317,"user_name":"Geek_9d0e04","can_delete":false,"product_type":"c1","uid":1902220,"ip_address":"","ucode":"F5560CE5BDB125","user_header":"","comment_is_top":false,"comment_ctime":1597668567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597668567","product_id":100047701,"comment_content":"Httpclient最大并发数的限制，最大并发数是指等待应答的请求数吗？如果采用异步发送的方式，也是绕不过这个限制吗？","like_count":0},{"had_liked":false,"id":240405,"user_name":"2019","can_delete":false,"product_type":"c1","uid":1025580,"ip_address":"","ucode":"6514258263FC00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/2c/b73b9dfe.jpg","comment_is_top":false,"comment_ctime":1596891559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596891559","product_id":100047701,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":233959,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1594535785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594535785","product_id":100047701,"comment_content":"为了不让redis等无关代码影响;<br>我单独创建项目来跑这节的代码.<br>为啥Utils.loadPropertySource(FeignAndRibbonController.class, &quot;default.properties&quot;);会报空指针","like_count":0},{"had_liked":false,"id":232182,"user_name":"VIC","can_delete":false,"product_type":"c1","uid":1114064,"ip_address":"","ucode":"3B3E6D344488B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/d0/402be1e9.jpg","comment_is_top":false,"comment_ctime":1593907898,"is_pvip":false,"replies":[{"id":"85734","content":"urlconnection默认开启keepalive并且通过http.maxConnections控制每个目标host缓存socket连接的最大数，也就是5个，我没有测试过这个参数是否就会真正限制并发连接数，这个你可以自己测一下","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1593955924,"ip_address":"","comment_id":232182,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1593907898","product_id":100047701,"comment_content":"feign默认用的urlconnection，有并发限制吗","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500549,"discussion_content":"urlconnection默认开启keepalive并且通过http.maxConnections控制每个目标host缓存socket连接的最大数，也就是5个，我没有测试过这个参数是否就会真正限制并发连接数，这个你可以自己测一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593955924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383014,"discussion_content":"把爬虫的例子改造成Feign调用。我测试了100并发调用，总用时1秒。所以,Feign没有单域名并发限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625822779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230331,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1593349191,"is_pvip":false,"replies":[{"id":"85048","content":"我的理解，上游服务对于当前服务是调用者，下游服务对于当前服务是被调用者","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1593397033,"ip_address":"","comment_id":230331,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1593349191","product_id":100047701,"comment_content":"老师是怎么理解上下游服务的，我一般将被调用方称为上游服务，查资料一般说两种叫法都是正确的，理解方式不同。","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499842,"discussion_content":"我的理解，上游服务对于当前服务是调用者，下游服务对于当前服务是被调用者","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593397033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012843,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/6b/a98162a1.jpg","nickname":"winner_0715","note":"","ucode":"A033A30539181F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291030,"discussion_content":"提供服务的叫上游","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594687249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225504,"user_name":"hwnly","can_delete":false,"product_type":"c1","uid":1890341,"ip_address":"","ucode":"BBD94DF2B6BCE5","user_header":"","comment_is_top":false,"comment_ctime":1591772246,"is_pvip":false,"replies":[{"id":"83057","content":"要看RibbonClientConfiguration类","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1591782654,"ip_address":"","comment_id":225504,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591772246","product_id":100047701,"comment_content":"\t我看了下我们这边的项目源码spring-cloud-netflix-core-1.3.5.RELEASE  jar版本是这样写的<br>        @Bean<br>\t@ConditionalOnMissingBean<br>\tpublic IClientConfig ribbonClientConfig() {<br>\t\tDefaultClientConfigImpl config = new DefaultClientConfigImpl();<br>\t\tconfig.loadProperties(this.name);<br>\t\treturn config;<br>\t}<br><br>DefaultClientConfigImpl中设置的<br>public static final int DEFAULT_CONNECT_TIMEOUT = 2000;<br>public static final int DEFAULT_READ_TIMEOUT = 5000;<br>不知道作者用的什么版本呢","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497871,"discussion_content":"要看RibbonClientConfiguration类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591782654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203310,"user_name":"just code it","can_delete":false,"product_type":"c1","uid":1140836,"ip_address":"","ucode":"9953DAD398F33D","user_header":"https://static001.geekbang.org/account/avatar/00/11/68/64/756ba667.jpg","comment_is_top":false,"comment_ctime":1586169493,"is_pvip":false,"replies":[{"id":"75964","content":"为了防止参数在方法内重新赋值，或者说不小心被重新赋值，比如没有加final的时候希望给字段赋值可能误改了参数没发现，加了final后重新赋值会出现编译错误，那么就提醒我们应该加上this。。。。","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1586179516,"ip_address":"","comment_id":203310,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1586169493","product_id":100047701,"comment_content":"老师我有点疑惑，为何很多jdk源码,比如httpclient里边的方法参数为啥大多数都要声明为final ？这样做又什么好处吗？<br> private E getPoolEntryBlocking(  <br>            final T route, final Object state,<br>            final long timeout, final TimeUnit tunit,<br>            final Future&lt;E&gt; future) throws IOException, InterruptedException, TimeoutException {.....}<br>从连接池中取连接","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490827,"discussion_content":"为了防止参数在方法内重新赋值，或者说不小心被重新赋值，比如没有加final的时候希望给字段赋值可能误改了参数没发现，加了final后重新赋值会出现编译错误，那么就提醒我们应该加上this。。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586179516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140836,"avatar":"https://static001.geekbang.org/account/avatar/00/11/68/64/756ba667.jpg","nickname":"just code it","note":"","ucode":"9953DAD398F33D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223354,"discussion_content":"我之前也是这么理解的，就是不太确定，谢谢哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586218895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198640,"user_name":"大可","can_delete":false,"product_type":"c1","uid":1020927,"ip_address":"","ucode":"D0D7F9D670FF07","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/ff/42432276.jpg","comment_is_top":false,"comment_ctime":1585461287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585461287","product_id":100047701,"comment_content":"好文章 正好最近入坑了","like_count":0},{"had_liked":false,"id":196295,"user_name":"hellojd","can_delete":false,"product_type":"c1","uid":1341697,"ip_address":"","ucode":"4E51807AE7E472","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/01/e71510dc.jpg","comment_is_top":false,"comment_ctime":1585270542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585270542","product_id":100047701,"comment_content":"这节课，得多读几遍。尤其使用spring  cloud技术栈的同学。老师总结的几点都很实在，由于都由于springboot 默认配置的关系，不追求细节，容易踩坑","like_count":0},{"had_liked":false,"id":196001,"user_name":"梓城","can_delete":false,"product_type":"c1","uid":1632679,"ip_address":"","ucode":"0838935461FD57","user_header":"https://static001.geekbang.org/account/avatar/00/18/e9/a7/c1a26a36.jpg","comment_is_top":false,"comment_ctime":1585229224,"is_pvip":false,"replies":[{"id":"74356","content":"连接池？具体是指什么连接池，之前有一篇文章不是介绍了连接池吗？","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585232437,"ip_address":"","comment_id":196001,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1585229224","product_id":100047701,"comment_content":"老师能不能顺便讲讲连接池，我项目就要用到了，源码里修改参数后，可以直接复制用吗？    <br><br>private static CloseableHttpClient httpClient = null;<br><br>    static {<br>        httpClient = HttpClients.custom().setMaxConnPerRoute(1).setMaxConnTotal(1).evictIdleConnections(60, TimeUnit.SECONDS).build();<br><br>        Runtime.getRuntime().addShutdownHook(new Thread(() -&gt; {<br>            try {<br>                httpClient.close();<br>            } catch (IOException ignored) {<br>            }<br>        }));<br>    }","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489197,"discussion_content":"连接池？具体是指什么连接池，之前有一篇文章不是介绍了连接池吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585232437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236760,"discussion_content":"不能 需要根据需求调整并发限制","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587121389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632679,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e9/a7/c1a26a36.jpg","nickname":"梓城","note":"","ucode":"0838935461FD57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215459,"discussion_content":"我说的是http连接池，可以拷贝这段代码直接用吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585323752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195682,"user_name":"雅然风懿","can_delete":false,"product_type":"c1","uid":1007242,"ip_address":"","ucode":"32ED4550305D0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/8a/0c1f9635.jpg","comment_is_top":false,"comment_ctime":1585211727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585211727","product_id":100047701,"comment_content":"好文章，又多踩了几个坑","like_count":0},{"had_liked":false,"id":192377,"user_name":"大橘为重","can_delete":false,"product_type":"c1","uid":1106152,"ip_address":"","ucode":"96479F205B8384","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/e8/66439469.jpg","comment_is_top":false,"comment_ctime":1584848119,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584848119","product_id":100047701,"comment_content":"学习打卡~","like_count":0},{"had_liked":false,"id":192029,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1584818475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584818475","product_id":100047701,"comment_content":"之前没有考虑到超时重试并发谢谢老师","like_count":0},{"had_liked":false,"id":190245,"user_name":"Husiun","can_delete":false,"product_type":"c1","uid":1448664,"ip_address":"","ucode":"F783484743BFE4","user_header":"https://static001.geekbang.org/account/avatar/00/16/1a/d8/9ae1bdb9.jpg","comment_is_top":false,"comment_ctime":1584621932,"is_pvip":false,"replies":[{"id":"73184","content":"没看明白问题","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1584624606,"ip_address":"","comment_id":190245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584621932","product_id":100047701,"comment_content":"老师，请教个问题，在spring cloud微服务A调用微服务B的过程，微服务A的超时timeoutA 和微服务B的超时timeoutB两者数值大小产生的差异，","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487926,"discussion_content":"没看明白问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584624606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190220,"user_name":"杨杨杨杨、","can_delete":false,"product_type":"c1","uid":1461885,"ip_address":"","ucode":"A736A9BB3FD506","user_header":"https://static001.geekbang.org/account/avatar/00/16/4e/7d/b34f5251.jpg","comment_is_top":false,"comment_ctime":1584617888,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1584617888","product_id":100047701,"comment_content":"ReadTimeout 是不是可以翻译成请求超时。写入操作服务器也是会有个反馈的，客户端也读取这个反馈","like_count":0,"discussions":[{"author":{"id":1341697,"avatar":"https://static001.geekbang.org/account/avatar/00/14/79/01/e71510dc.jpg","nickname":"hellojd","note":"","ucode":"4E51807AE7E472","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214987,"discussion_content":"不可以。readtimeout 是从tcp三次握手成功后，客户端等待接受数据包的时间。过了这个时间，数据包即使到了，也被丢弃了。尤其是报文比较大的时候这个参数有用了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585270780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189975,"user_name":"mgs2002","can_delete":false,"product_type":"c1","uid":1812970,"ip_address":"","ucode":"F5931108BD509B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","comment_is_top":false,"comment_ctime":1584587606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584587606","product_id":100047701,"comment_content":"查询了一下资料,nginx超时重试语法是这样的：<br>proxy_next_upstream http_500 error timeout invalid_header;<br>意思发起请求到服务端后如果出读取应答错误(error),500错误(http_500),超时(timeout),返回空的或者错误的应答（invalid_header）这几种情况下nginx会把请求转发到下一台服务器，也可以关闭重试机制，<br>使用的话还是要小心点注意接口的幂等性","like_count":0}]}