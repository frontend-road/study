{"id":7511,"title":"23 | 下一代微服务安全架构","content":"无","comments":[{"had_liked":false,"id":54966,"user_name":"小猴子","can_delete":false,"product_type":"c3","uid":1297538,"ip_address":"","ucode":"0BC6903BBEC7B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/82/cbf38ad4.jpg","comment_is_top":false,"comment_ctime":1545989602,"is_pvip":false,"replies":[{"id":19934,"content":"jwt是无状态自包含自验证，实现比较轻量，目前业界蛮流行的，很多应用采用jwt，因为大部分应用场景安全并不非常严格，另外jwt也可合理缩短有效期，或在网关上进一步定制加强安全验证。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1546004651,"ip_address":"","comment_id":54966,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"老师你的下一代微服务安全架构中第二种模式用户带着JWT到网关不经过授权服务器再次验证完全就是有问题不安全的为啥还讲这种？为啥要省一步操作埋下这么大的隐患？这是企业级应用？","like_count":4,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434632,"discussion_content":"jwt是无状态自包含自验证，实现比较轻量，目前业界蛮流行的，很多应用采用jwt，因为大部分应用场景安全并不非常严格，另外jwt也可合理缩短有效期，或在网关上进一步定制加强安全验证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546004651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1388421,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2f/85/9d1230c9.jpg","nickname":"Bootis","note":"","ucode":"834251DC0FE2E7","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5631,"discussion_content":"所以说JWT也是经过加密的啊...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566393202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24511,"user_name":"shine","can_delete":false,"product_type":"c3","uid":1071839,"ip_address":"","ucode":"433D7B2527DA31","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/df/bdf673f7.jpg","comment_is_top":false,"comment_ctime":1537095689,"is_pvip":false,"replies":[{"id":9639,"content":"oauth2是一个授权框架和规范，这个规范试图覆盖主要的微服务安全场景（第三方访问，无线应用，企业内部应用），目前在第三方访问和无线应用用得比较多，企业内部（包括内部微服务间调用）其实没有这么严格，各种不同做法（传统token，key，用户名&#47;密码，ip黑白名单等）。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1537678886,"ip_address":"","comment_id":24511,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"OAuth是为访问第三方资源设计的，微服务架构下，访问的都是自身的资源，传统基于Token授权框架完全适用，整体实现比OAuth要简化不少，那么引入OAuth作为应用的授权框架的意义是什么？","like_count":3,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424013,"discussion_content":"oauth2是一个授权框架和规范，这个规范试图覆盖主要的微服务安全场景（第三方访问，无线应用，企业内部应用），目前在第三方访问和无线应用用得比较多，企业内部（包括内部微服务间调用）其实没有这么严格，各种不同做法（传统token，key，用户名/密码，ip黑白名单等）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537678886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9637,"user_name":"张顺青","can_delete":false,"product_type":"c3","uid":1134920,"ip_address":"","ucode":"C706CB3C7A242A","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/48/b650e854.jpg","comment_is_top":false,"comment_ctime":1526997969,"is_pvip":false,"replies":[{"id":3051,"content":"谢谢反馈🌹会反馈给极客时间","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1527162937,"ip_address":"","comment_id":9637,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"不能缓存下来看吗","like_count":3,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418144,"discussion_content":"谢谢反馈🌹会反馈给极客时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527162937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24510,"user_name":"shine","can_delete":false,"product_type":"c3","uid":1071839,"ip_address":"","ucode":"433D7B2527DA31","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/df/bdf673f7.jpg","comment_is_top":false,"comment_ctime":1537095293,"is_pvip":false,"replies":[{"id":9640,"content":"ppt中，网关上的OAuth Filter主要用于access token校验，获取jwt token；服务上的OAuth Filter，主要用于jwt的解释，获取用户和权限等信息，填充SecurityContext类似构件。用户权限在哪里做？既可以在网关上集中做，也可以在服务端自己做，都能做到，各有优劣，视企业和架构上下文选择即可。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1537679188,"ip_address":"","comment_id":24510,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"网关的OAuth Filter和服务的OAuth Filter具体分别处理什么？请求资源服务接口时，权限访问控制的步骤应该是放在网关还是具体的服务上？感觉使用网关统一控制处理，能覆盖大部分场景，应该会有一些场景还是难以满足，比如一些数据级的权限。比如论坛删帖的场景，用户可以删除自己的帖子，版主可以删管理的版块下的帖子，系统管理员可以删所有帖子，如果要在网关统一处理，需要分成3个独立的服务接口，如果在服务自身处理，可以在一个接口内提供。","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424012,"discussion_content":"ppt中，网关上的OAuth Filter主要用于access token校验，获取jwt token；服务上的OAuth Filter，主要用于jwt的解释，获取用户和权限等信息，填充SecurityContext类似构件。用户权限在哪里做？既可以在网关上集中做，也可以在服务端自己做，都能做到，各有优劣，视企业和架构上下文选择即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537679188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22080,"user_name":"宛珩","can_delete":false,"product_type":"c3","uid":1215965,"ip_address":"","ucode":"1DB61C7B54F6DC","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/dd/61f67f99.jpg","comment_is_top":false,"comment_ctime":1535472804,"is_pvip":false,"replies":[{"id":8126,"content":"access token如果是bearer的话，就像钱一样，别人偷走也可以用的，没有绝对的安全，一般传输层用https防截取，然后缩短token过期时间到安全可接受范围。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1535865357,"ip_address":"","comment_id":22080,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"access token 被他们截取后，如何保证其安全性？","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422991,"discussion_content":"access token如果是bearer的话，就像钱一样，别人偷走也可以用的，没有绝对的安全，一般传输层用https防截取，然后缩短token过期时间到安全可接受范围。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535865357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20098,"user_name":"学明","can_delete":false,"product_type":"c3","uid":1033677,"ip_address":"","ucode":"1A499A2557F74D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/cd/7d3e4355.jpg","comment_is_top":false,"comment_ctime":1534259544,"is_pvip":false,"replies":[{"id":7235,"content":"传统单块web应用常用session式会话，现代微服务一般用基于令牌的分布式会话。令牌token有有效期，可在资源端（或通过网关集中）通过授权服务器集中校验，过期校验不通过。如果用jwt令牌，内含过期时间，资源端可自校验。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1534650201,"ip_address":"","comment_id":20098,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"哎，这个留言点半天才点开。\n请教问题，以前使用session来管理会话，同事控制5分钟无活跃请求失效，重新登录。如果使用token的方式，如何方便实现呢？","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422107,"discussion_content":"传统单块web应用常用session式会话，现代微服务一般用基于令牌的分布式会话。令牌token有有效期，可在资源端（或通过网关集中）通过授权服务器集中校验，过期校验不通过。如果用jwt令牌，内含过期时间，资源端可自校验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534650201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231540,"user_name":"Cutler","can_delete":false,"product_type":"c3","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1593701213,"is_pvip":false,"replies":[{"id":85640,"content":"很专业👍\n\n在我的另外一门课《Spring Boot和Kubernetes云原生微服务实践》中，专门讲解了基于JWT令牌的微服务认证授权机制。JWT支持对称或者公私钥签名。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1593870862,"ip_address":"","comment_id":231540,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"如果用户被诱导安装了非法的证书，https也是可以被劫持的，用户的access_token会被泄露，黑客就可以做任何事情了。\n这种情况可以对请求参数进行签名，为防止重放攻击还可以在参数中加入随机nonce值。\n金融级产品应该采用非对称签名+对称加密的方式对请求参数进行保护。","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500341,"discussion_content":"很专业👍\n\n在我的另外一门课《Spring Boot和Kubernetes云原生微服务实践》中，专门讲解了基于JWT令牌的微服务认证授权机制。JWT支持对称或者公私钥签名。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593870862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103787,"user_name":"rajon","can_delete":false,"product_type":"c3","uid":1519647,"ip_address":"","ucode":"13A2875D54F3E4","user_header":"https://static001.geekbang.org/account/avatar/00/17/30/1f/4942fea3.jpg","comment_is_top":false,"comment_ctime":1560510329,"is_pvip":false,"replies":[{"id":37709,"content":"Spring Cloud Gateway比较新，这个我还没有实现过，找了一些样例供你参考，你自己需要进一步调研和尝试：\n\nhttps:&#47;&#47;github.com&#47;artemMartynenko&#47;spring-cloud-gateway-oauth2-sso-sample-application\n\nhttps:&#47;&#47;github.com&#47;spring-cloud-samples&#47;sample-gateway-oauth2login\n\nhttps:&#47;&#47;github.com&#47;spring-cloud&#47;spring-cloud-gateway&#47;issues&#47;179#issuecomment-406238177","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1560681898,"ip_address":"","comment_id":103787,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"有spring cloud gateway网关集成oauth2的例子吗","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454004,"discussion_content":"Spring Cloud Gateway比较新，这个我还没有实现过，找了一些样例供你参考，你自己需要进一步调研和尝试：\n\nhttps://github.com/artemMartynenko/spring-cloud-gateway-oauth2-sso-sample-application\n\nhttps://github.com/spring-cloud-samples/sample-gateway-oauth2login\n\nhttps://github.com/spring-cloud/spring-cloud-gateway/issues/179#issuecomment-406238177","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560681898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101085,"user_name":"大鹏","can_delete":false,"product_type":"c3","uid":1270632,"ip_address":"","ucode":"F4611B80B08A3A","user_header":"https://static001.geekbang.org/account/avatar/00/13/63/68/14b98bbc.jpg","comment_is_top":false,"comment_ctime":1559712168,"is_pvip":false,"replies":[{"id":36633,"content":"你好，1，如果采用网关统一认证，那么所有API请求必须经过网关，这个在物理部署架构上可以做到。2，access token换成jwt token，是因为传统访问令牌access token一般是无意义的随机字符串，一般不包含用户名&#47;角色等用户信息（后台服务通常需要这些信息），转成jwt的话，里头可以包含这些信息。当然也可以不转jwt，直接把用户名等信息通过HTTP Header往后传递，更简单一点。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1559912726,"ip_address":"","comment_id":101085,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"老师，有两个问题:\n1.客户有没有可能绕过网关，直接访问后台微服务。这样即使token被gateway在redis中掉销了，也能访问到后台数据。后台微服务jwt自检验对这种情况不起作用。\n2.为什么颁发的是access token ,经过gateway的时候再换成jwt token ，因为access token更轻量级吗？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452797,"discussion_content":"你好，1，如果采用网关统一认证，那么所有API请求必须经过网关，这个在物理部署架构上可以做到。2，access token换成jwt token，是因为传统访问令牌access token一般是无意义的随机字符串，一般不包含用户名/角色等用户信息（后台服务通常需要这些信息），转成jwt的话，里头可以包含这些信息。当然也可以不转jwt，直接把用户名等信息通过HTTP Header往后传递，更简单一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559912726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49452,"user_name":"王盛武","can_delete":false,"product_type":"c3","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1544691264,"is_pvip":false,"replies":[{"id":17793,"content":"不用经网关，直要能通过http header往后传递即可，比如在spring中很容易做到，比如从request context里头获取jwt，通过http client再以http header方式往后传递。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1544704697,"ip_address":"","comment_id":49452,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"波波老师，请问，如果网关-&gt;A服务,  A服务调用B服务；\n网关把JWT传给了A， 但是A调用了B服务的时候如何带JWT呢？  是否A-&gt;B也要经过网关呢？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432623,"discussion_content":"不用经网关，直要能通过http header往后传递即可，比如在spring中很容易做到，比如从request context里头获取jwt，通过http client再以http header方式往后传递。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544704697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16738,"user_name":"chengUFO","can_delete":false,"product_type":"c3","uid":1046589,"ip_address":"","ucode":"C9EB74F153815C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/3d/f911fa4c.jpg","comment_is_top":false,"comment_ctime":1532145643,"is_pvip":false,"replies":[{"id":5935,"content":"token正常过期用户一般需重新登录获取新令牌，也可采用refreshtoken直接获取新令牌。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1532424699,"ip_address":"","comment_id":16738,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"token过期怎么办？  ","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420914,"discussion_content":"token正常过期用户一般需重新登录获取新令牌，也可采用refreshtoken直接获取新令牌。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532424699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13831,"user_name":"冯褚","can_delete":false,"product_type":"c3","uid":1112991,"ip_address":"","ucode":"CE07E4267E3039","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/9f/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1530009952,"is_pvip":false,"replies":[{"id":4642,"content":"恩，我计划把这块放在第9模块案例分析部分讲解，一种思路是生成token时同时生成jw-token存起来，通过token校验端点换取jwt-token","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1530109140,"ip_address":"","comment_id":13831,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"老师您好，您之前回复其他人说之后会写token换jwt的文章，不知道现在可不可以看？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419775,"discussion_content":"恩，我计划把这块放在第9模块案例分析部分讲解，一种思路是生成token时同时生成jw-token存起来，通过token校验端点换取jwt-token","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530109140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10623,"user_name":"Coder Cat","can_delete":false,"product_type":"c3","uid":1136920,"ip_address":"","ucode":"AF0291604CCB11","user_header":"https://static001.geekbang.org/account/avatar/00/11/59/18/87898f15.jpg","comment_is_top":false,"comment_ctime":1527636619,"is_pvip":false,"replies":[{"id":3662,"content":"有点类似用户名密码模式，不能算严格的OAUTH2。现实中有不少场景未必用oauth2，用户名密码登录获得jwt是一种看见较流行的无状态认证方式。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1528130145,"ip_address":"","comment_id":10623,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"老师您好，我们现在前后端分离也是用的jwt 但并不是OAuth2 。那我们这个模式也是授权吗。我们是用户输入账号密码以后返回一个token,app再拿着这个token 去后台访问数据。","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418543,"discussion_content":"有点类似用户名密码模式，不能算严格的OAUTH2。现实中有不少场景未必用oauth2，用户名密码登录获得jwt是一种看见较流行的无状态认证方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528130145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9328,"user_name":"frog3","can_delete":false,"product_type":"c3","uid":1029029,"ip_address":"","ucode":"D48C88F87A83EB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b3/a5/f712dd94.jpg","comment_is_top":false,"comment_ctime":1526788784,"is_pvip":false,"replies":[{"id":2851,"content":"按oauth2标准做法，内部服务间调用可以采用客户凭证方式（client credentials）获取令牌并访问目标服务，服务端校验令牌。如果用简单做法，可以做白名单，在网关或服务器端过滤。还有一种常见办法，生产环境隔离。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1526913182,"ip_address":"","comment_id":9328,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"波波老师，能否讲下微服务内部调用的安全问题，如何解决呢?主要是两种，1，微服务内部相互调用，2,非微服务体系下既有存量系统也要调用微服务的某接口如何保证安全问题","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418032,"discussion_content":"按oauth2标准做法，内部服务间调用可以采用客户凭证方式（client credentials）获取令牌并访问目标服务，服务端校验令牌。如果用简单做法，可以做白名单，在网关或服务器端过滤。还有一种常见办法，生产环境隔离。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526913182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106365,"user_name":"Song","can_delete":false,"product_type":"c3","uid":1111252,"ip_address":"","ucode":"666CFF5C00E543","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/d4/39858da0.jpg","comment_is_top":false,"comment_ctime":1561280807,"is_pvip":false,"replies":[{"id":38583,"content":"加油！","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1561383289,"ip_address":"","comment_id":106365,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"感谢波波老师的讲解，对OAuth2的理论以及企业里的一些场景应用有了一定的了解。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455062,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561383289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102088,"user_name":"大鹏","can_delete":false,"product_type":"c3","uid":1270632,"ip_address":"","ucode":"F4611B80B08A3A","user_header":"https://static001.geekbang.org/account/avatar/00/13/63/68/14b98bbc.jpg","comment_is_top":false,"comment_ctime":1560133447,"is_pvip":false,"replies":[{"id":36858,"content":"1，如果网关做了集中校验，后台服务再自校验并非必须，假设网关和后台服务在同一个信任域。但也有公司网关和后台服务可能并不一定完全信任，或者后台服务安全特别敏感(比如交易相关)，需要严格再次校验。\n2， jwt有个问题是令牌里头编码的信息是可见的，有些场景下，不想让用户端看见jwt里头信息（比如用户名角色等），所以对外可以用透明令牌，对内可以再转成jwt。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1560169385,"ip_address":"","comment_id":102088,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"谢谢老师回答，还有点疑惑：\n1.既然能控制client必须通过gateway去访问后台微服务，那么只要在gateway上进行一次token校验就可以了，后台服务为什么还要再进行一次自校验？如果后台服务不进行自校验，这样的安全缺陷是什么。\n2.为什么不直接颁发jwt，而是存储access token和jwt，并且在后面交换。是因为gateway上的校验access token就够了，access token更轻量吗？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453254,"discussion_content":"1，如果网关做了集中校验，后台服务再自校验并非必须，假设网关和后台服务在同一个信任域。但也有公司网关和后台服务可能并不一定完全信任，或者后台服务安全特别敏感(比如交易相关)，需要严格再次校验。\n2， jwt有个问题是令牌里头编码的信息是可见的，有些场景下，不想让用户端看见jwt里头信息（比如用户名角色等），所以对外可以用透明令牌，对内可以再转成jwt。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560169385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78390,"user_name":"萬物一馬","can_delete":false,"product_type":"c3","uid":1041405,"ip_address":"","ucode":"A28AC9B37ADCB7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e3/fd/499bbb36.jpg","comment_is_top":false,"comment_ctime":1553138149,"is_pvip":false,"replies":[{"id":29010,"content":"内部调用(定时任务之类)，可以采用OAuth2的客户端模式（client credentials），由机器直接发起，不需要人的参与。当然，对于内部调用，你也需要评估是否需要oauth2这种较严格安全授权机制，毕竟会引入很多复杂性。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1553518860,"ip_address":"","comment_id":78390,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"波波老师,请教 同一个B服务提供的方法, 从网关-A服务-B服务 可以通过OAuth2 进行认证...但如果A服务-B服务,内部调用(诸如,定时任务)这样没有条件进行oauth2认证的...这2种情况怎么区分?","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444077,"discussion_content":"内部调用(定时任务之类)，可以采用OAuth2的客户端模式（client credentials），由机器直接发起，不需要人的参与。当然，对于内部调用，你也需要评估是否需要oauth2这种较严格安全授权机制，毕竟会引入很多复杂性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553518860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73724,"user_name":"行知","can_delete":false,"product_type":"c3","uid":1220593,"ip_address":"","ucode":"A5D46908B73E5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/f1/5808246a.jpg","comment_is_top":false,"comment_ctime":1551964564,"is_pvip":false,"replies":[{"id":27653,"content":"其实acces token没有应用的和用户的之分，它是授权服务器授予应用(正式叫客户应用)的凭证，通过这个凭证应用就可以代表用户去访问用户的资源，这个是官方定义。实际应用中，企业一般会基于oauth2协议做一些定制扩展，微信的做法我认为就是一种定制扩展。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1552481583,"ip_address":"","comment_id":73724,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"应用的access token 和用户的 access token 只是针对的对象不同，但使用oauth2.0的协议可以相同的。应用的access token 更多的使用client 这种flow。不知道，我的理解对吗？\n微信的二维码登录，生成的二维码的流程:1、更加授权码flow获取应用access token；2、根据access token生成时效性的ticket；3、在对这些信息进行加密(这其实就是jwt）生成对应的二维码；","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442246,"discussion_content":"其实acces token没有应用的和用户的之分，它是授权服务器授予应用(正式叫客户应用)的凭证，通过这个凭证应用就可以代表用户去访问用户的资源，这个是官方定义。实际应用中，企业一般会基于oauth2协议做一些定制扩展，微信的做法我认为就是一种定制扩展。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552481583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63230,"user_name":"james","can_delete":false,"product_type":"c3","uid":1049208,"ip_address":"","ucode":"5701899403917C","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/78/23c56bce.jpg","comment_is_top":false,"comment_ctime":1548302360,"is_pvip":false,"replies":[{"id":22555,"content":"对，方案3主要就是增加redis缓存，提升令牌校验性能，因为网关集中校验令牌会比较频繁。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1548507239,"ip_address":"","comment_id":63230,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"您好, 方案3其实就是授权服务器这个微服务将accessToken存储到了自己的MySQL, 并缓存到了自己的Redis的意思是把?  Redis属于授权服务器的范畴,  而不属于网关范畴, 网关是通过http&#47;rpc调用授权服务器的接口来实现这一步","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437509,"discussion_content":"对，方案3主要就是增加redis缓存，提升令牌校验性能，因为网关集中校验令牌会比较频繁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548507239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34354,"user_name":"张振华","can_delete":false,"product_type":"c3","uid":1201810,"ip_address":"","ucode":"292EFD886FC55A","user_header":"https://static001.geekbang.org/account/avatar/00/12/56/92/5cea89e6.jpg","comment_is_top":false,"comment_ctime":1540123825,"is_pvip":false,"replies":[{"id":12658,"content":"oauth2就是针对无线&#47;单页&#47;第三方等场景访问微服务而设计的授权协议。如果自己实现，具体实现哪几种授权方式，可根据需求定。也可基于spring security oauth2等组件扩展，它内置已实现4种主要的oauth2授权方式。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1540732579,"ip_address":"","comment_id":34354,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"如果一个比较大点的企业，想做一个统一的认证授权系统（假如说叫三统一系统），其他软件（多种形式的，单页的或者手机端的，也有微服务）的认证授权都对接这个三统一系统，请问老师，用OAuth2可以满足需求吗？是不是4中授权方式都需要进行实现？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427183,"discussion_content":"oauth2就是针对无线/单页/第三方等场景访问微服务而设计的授权协议。如果自己实现，具体实现哪几种授权方式，可根据需求定。也可基于spring security oauth2等组件扩展，它内置已实现4种主要的oauth2授权方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540732579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26306,"user_name":"安静","can_delete":false,"product_type":"c3","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1537540827,"is_pvip":false,"replies":[{"id":9627,"content":"恩，最后一个模块（第9模块），会有一个综合案例，会讲解oauth2服务器和zuul网关的集成，使用类似第三种方案，网关集中验令牌，验通过则将用户信息向后台服务传递","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1537674397,"ip_address":"","comment_id":26306,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"细细想来，自己之前的公司也是使用的第三种方案，以前在公司没有细细深入了解这块。波波老师案例写好后，文章地址贴出来我来参考下。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424594,"discussion_content":"恩，最后一个模块（第9模块），会有一个综合案例，会讲解oauth2服务器和zuul网关的集成，使用类似第三种方案，网关集中验令牌，验通过则将用户信息向后台服务传递","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537674397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24592,"user_name":"shine","can_delete":false,"product_type":"c3","uid":1071839,"ip_address":"","ucode":"433D7B2527DA31","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/df/bdf673f7.jpg","comment_is_top":false,"comment_ctime":1537158201,"is_pvip":false,"replies":[{"id":9636,"content":"你好，你的回复很长，应该对oauth2有自己的理解和思考，如需进一步交流，可以加我微信号bulldog2015(注明来自极客时间的客户)。我这边简单回复几点：1)refresh token一般只在授权码模式才有，OAuth Client Web服务器需要保存相关映射关系(比如可以存用户表中)，主要目的是避免用户每次都要走一个完整的授权码模式流程去获取access token，这个很烦，refresh token可以简化这个流程，Web服务器后台用refresh token自动获取新的access token。2）在授权码模式中，access token&#47;refresh token只在OAuth Client Web服务器上，一般不会流到用户浏览器User Agent上去，保证安全性，3）在通过网关集中校验token的场景中（方式一和三），有了access token后，jwt确实没有特别必要的，很多公司通过access token校验后，直接获取用户信息(比如userId），直接向后台服务传递，没有必要jwt，这个在视频中也有说明，如果使用jwt也可以，对内部服务调用会更规范和安全，当然成本更高一点。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1537677787,"ip_address":"","comment_id":24592,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"1.Refresh Token应该保存在用户客户端（用户的浏览器&#47;App，对应OAuth中的User Agent）还是发起请求的服务器（对应OAuth中的Client）：\n（1）如果保存在用户客户端，有泄露风险，安全性如何保证？\n（2）如果保存在服务器，用户客户端和服务器之间只用access token，服务器判断access token是否过期（jwt的场景）或者发送资源请求发现token过期，再拿Refresh Token去刷新，那么服务器需要长期保存access token和refresh token的对应关系，即使access token已过期，access token的保存时间需要与refresh token一致，直到获取新的access token为止才能清除，否则用户后续请求时就无法用过期的access token找到对应的refresh token，如果是上述场景，那么区分access token&#47;refresh token事实上毫无意义，使用一个token就可以了\n\n2.JWT与OAuth结合的场景，如果仍需要对每次请求做中心化的验证，也就是1、3两种架构，那么JWT的意义是什么，感觉没有必要采用JWT，直接使用无意义随机字符串做Token就行了，前提是请求参数已做了签名，防止篡改\n\n对于上面两个问题，个人理解OAuth2引入Refresh Token的本意是缩短access token的时效，实现access token的“及时”回收，包含了一个隐藏条件就是认证服务器给client的access token一定是资源服务器可以识别和校验的，也就是JWT这类自包含业务信息、过期时间、不可伪造的Token，采用第2种架构才符合OAuth2的设计理念，当然因为没有中心化的验证，access token的回收其实并不“及时”，需要等到JWT设置的过期时间。如果业务要求access token能够实时撤销，那么应采用中心化的验证，这个时候没有必要用refresh token和JWT了。\n\n如果采用refresh token，对于微服务架构采用OAuth为自身应用提供授权框架的场景，refresh token存用户客户端，通过加密存储保障存储安全性，只在调用刷新接口时解密，并用HTTPS保障传输安全性，但客户端天然不能完全避免风险，如有必要可以通过2种方式强化：\n1.与设备指纹的绑定，调用刷新接口时在服务器端检测refresh token是否与颁发时的设备环境一致，是否已存在泄露隐患\n2.每次调用刷新接口，同时更换新的refresh token，如果用户端拿旧的refresh token再次调用刷新接口，提示用户存在泄露的可能\n\n对于调用第三方平台的场景，用户客户端并不需要与第三方的access token&#47;refresh token直接打交道，所以access token&#47;refresh token都应该保存在服务器上。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424049,"discussion_content":"你好，你的回复很长，应该对oauth2有自己的理解和思考，如需进一步交流，可以加我微信号bulldog2015(注明来自极客时间的客户)。我这边简单回复几点：1)refresh token一般只在授权码模式才有，OAuth Client Web服务器需要保存相关映射关系(比如可以存用户表中)，主要目的是避免用户每次都要走一个完整的授权码模式流程去获取access token，这个很烦，refresh token可以简化这个流程，Web服务器后台用refresh token自动获取新的access token。2）在授权码模式中，access token/refresh token只在OAuth Client Web服务器上，一般不会流到用户浏览器User Agent上去，保证安全性，3）在通过网关集中校验token的场景中（方式一和三），有了access token后，jwt确实没有特别必要的，很多公司通过access token校验后，直接获取用户信息(比如userId），直接向后台服务传递，没有必要jwt，这个在视频中也有说明，如果使用jwt也可以，对内部服务调用会更规范和安全，当然成本更高一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537677787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2230909,"avatar":"https://static001.geekbang.org/account/avatar/00/22/0a/7d/ac715471.jpg","nickname":"独孤九剑","note":"","ucode":"6C1253E2B8C1D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374829,"discussion_content":"波波老师的微信号变更了吗？申请添加 bulldog2015 好几天了无响应","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621384738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22587,"user_name":"siesteven","can_delete":false,"product_type":"c3","uid":1223746,"ip_address":"","ucode":"29F6B11EE074A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ac/42/740ff7e6.jpg","comment_is_top":false,"comment_ctime":1535808979,"is_pvip":false,"replies":[{"id":8130,"content":"谢支持🌹加油💪","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1535865961,"ip_address":"","comment_id":22587,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"想缓存，路上看。。。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423176,"discussion_content":"谢支持🌹加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535865961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15928,"user_name":"钓鱼的猫","can_delete":false,"product_type":"c3","uid":1048675,"ip_address":"","ucode":"D9308507843FCB","user_header":"https://static001.geekbang.org/account/avatar/00/10/00/63/b0a2e411.jpg","comment_is_top":false,"comment_ctime":1531658693,"is_pvip":false,"replies":[{"id":5715,"content":"谢谢支持🌹","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1531973007,"ip_address":"","comment_id":15928,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"波波老师讲的真好，之前了解oauth2，现在老师系统的帮我梳理清晰了，谢谢波波老师。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420603,"discussion_content":"谢谢支持🌹","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531973007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15609,"user_name":"海阔天空","can_delete":false,"product_type":"c3","uid":1104511,"ip_address":"","ucode":"1FCE7980B0832E","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/7f/e3b9bc05.jpg","comment_is_top":false,"comment_ctime":1531323908,"is_pvip":false,"replies":[{"id":5394,"content":"这个你们的具体做法要看代码和配置才能看出，光从你描述还无法判断，原理可能类似oauth2中的某种flow","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1531404821,"ip_address":"","comment_id":15609,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"波波老师，我们微服务框架不知道怎么做的，就让在配置目录中加一些配置文件，然后就能实现认证，也有jwt文件，但是我们配置调用端时却没有用到这个jwt文件，这是怎么实现的？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420471,"discussion_content":"这个你们的具体做法要看代码和配置才能看出，光从你描述还无法判断，原理可能类似oauth2中的某种flow","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531404821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12236,"user_name":"钟森","can_delete":false,"product_type":"c3","uid":1122030,"ip_address":"","ucode":"C55141BF30064A","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/ee/f42b5cf8.jpg","comment_is_top":false,"comment_ctime":1528709680,"is_pvip":false,"replies":[{"id":4135,"content":"可以一起用，spring security oauth2本身也依赖spring security，可以让spring security保护一部分path，另一部分path由spring security oauth2保护。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1528906175,"ip_address":"","comment_id":12236,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"老师您好，oauth2是不是不能和springsecurity 同时使用，因为一次请求只会被filterproxychain中最多一个过滤器拦截。我本来想做一个单体服务器，web端用Springsecurity来控制权限，APP用auth2的安全模式。这种混用模式可以做吗？或者是否有其他解决方案","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419173,"discussion_content":"可以一起用，spring security oauth2本身也依赖spring security，可以让spring security保护一部分path，另一部分path由spring security oauth2保护。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528906175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":11360,"user_name":"麦..","can_delete":false,"product_type":"c3","uid":1085358,"ip_address":"","ucode":"486676F7950287","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/ae/c048fd8e.jpg","comment_is_top":false,"comment_ctime":1528087005,"is_pvip":false,"replies":[{"id":3658,"content":"网关作为一个透明代理，授权服务躲在网关后面，技术上是可以做到的。授权服务器独立布署，和网关平行，也是常见做法。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1528129208,"ip_address":"","comment_id":11360,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"授权服务器是否能对客户端透明？意思是说：授权服务器作为一个微服务，客户端获取accept token 可以直接通过网关无条件（一个特例）放权路由到授权服务器，授权服务器一系列操作后，最后返回accept token给客户端","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418805,"discussion_content":"网关作为一个透明代理，授权服务躲在网关后面，技术上是可以做到的。授权服务器独立布署，和网关平行，也是常见做法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528129208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10357,"user_name":"钟森","can_delete":false,"product_type":"c3","uid":1122030,"ip_address":"","ucode":"C55141BF30064A","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/ee/f42b5cf8.jpg","comment_is_top":false,"comment_ctime":1527502563,"is_pvip":false,"replies":[{"id":3366,"content":"👌正在努力制作中","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1527610666,"ip_address":"","comment_id":10357,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"波波老师，期待您第三方案相关的文章和实例。最近刚好要做相应的东西","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418454,"discussion_content":"👌正在努力制作中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527610666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9724,"user_name":"居尚","can_delete":false,"product_type":"c3","uid":1072817,"ip_address":"","ucode":"8AEF26AEE125B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/5e/b1/7d1b29ca.jpg","comment_is_top":false,"comment_ctime":1527047533,"is_pvip":false,"replies":[{"id":3049,"content":"可以同时生成，存在DB，或缓存起来，key是access token，value是jwt token，后面会写文章+案例","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1527162766,"ip_address":"","comment_id":9724,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100007001,"comment_content":"波波老师，我想问一下，怎样才能通过token换取jwt，是同时生成还是怎么样，如何实现","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418180,"discussion_content":"可以同时生成，存在DB，或缓存起来，key是access token，value是jwt token，后面会写文章+案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527162766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}