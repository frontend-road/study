{"id":784106,"title":"09｜关于机器学习，你需要了解的基本概念（二）","content":"<p>你好，我是独行。</p><p>上一节课我们了解了机器学习的基本概念，学习了线性回归和逻辑回归，相信你对机器学习有了初步理解，这节课我们继续讲解机器学习的经典算法，先从决策树开始。</p><h2>经典算法</h2><h3>决策树</h3><p>决策树是一种常用的机器学习算法，用于<strong>分类和回归任务</strong>。通过从数据中学习决策规则来预测目标变量的值。想象你在玩一个“是或否”的猜谜游戏，每次你只能问一个问题，对方只能回答是或否，你的目标就是用最少的问题猜出对方心中的答案。在实际应用中，决策树有很多场景，比如客户分类、信用评分、医疗诊断等等，下面我举一个简单的例子。</p><p>我们要根据天气情况、温度和风速来决定进行什么活动，比如宅在家还是出去玩，我们准备一些简单的数据集。</p><ul>\n<li>天气状况：晴天（0）、阴天（1）、雨天（2）</li>\n<li>温度：低（0）、中（1）、高（2）</li>\n<li>风速：无风（0）、微风（1）、强风（2）</li>\n</ul><p>活动：</p><ul>\n<li>去野餐（0）</li>\n<li>去博物馆（1）</li>\n<li>在家看书（2）</li>\n</ul><p>我们看一下使用sklearn库提供的决策树算法和模型的示例代码。</p><pre><code class=\"language-python\">from sklearn.tree import DecisionTreeClassifier, plot_tree\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 创建数据集\nX = np.array([\n&nbsp; &nbsp; [0, 2, 0],&nbsp; # 晴天，高温，无风\n&nbsp; &nbsp; [1, 1, 1],&nbsp; # 阴天，中温，微风\n&nbsp; &nbsp; [2, 0, 2],&nbsp; # 雨天，低温，强风\n&nbsp; &nbsp; # ... 添加更多样本以增加模型的准确性\n])\ny = np.array([0, 1, 2])&nbsp; # 分别对应去野餐、去博物馆、在家看书\n\n# 初始化决策树模型，设置最大深度为5\nclf = DecisionTreeClassifier(max_depth=5, random_state=42)\n\n# 训练模型\nclf.fit(X, y)\n\n# 可视化决策树\nplt.figure(figsize=(20, 10))\nplot_tree(clf, filled=True, feature_names=[\"天气状况\", \"温度\", \"风速\"], class_names=[\"去野餐\", \"去博物馆\", \"在家看书\"], rounded=True, fontsize=12)\nplt.show()\n\n</code></pre><!-- [[[read_end]]] --><p>程序运行结果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/28/7b/282cfa32356179a9afb3aa75739e1b7b.png?wh=3358x2136\" alt=\"图片\"></p><p>我来简单解释下这几个信息指标。</p><ul>\n<li>Gini指数：一个衡量节点纯度的指标，用于分类问题。一个节点的Gini指数越低，表示这个节点包含的样本越倾向于属于同一个类别，0表示所有样本都属于同一类别，即完全纯净。</li>\n<li>samples：表示到达这个节点的样本数量。这个数值提供了关于树的分支如何基于数据集进行分割的直观理解，也可以帮助我们评估决策树各个部分的数据覆盖范围。</li>\n<li>value：表示这个节点每个类别的样本数量。对于二分类问题，它可能显示为[value1, value2]，代表了属于第一类和第二类的样本数量。这个数组提供了节点分类分布的具体信息，有助于我们了解在每个决策节点处数据是如何被分割的。</li>\n<li>class：代表了在当前节点样本中占多数的类别。如果一个节点是叶节点，那么这个类别就是这个节点的预测类别。即使在非叶节点，class也可以显示该节点样本的主要类别。</li>\n</ul><p>通过这些信息，我们不仅可以理解决策树是如何根据特征分割数据的，还可以评估树的深度、每个节点的决策质量，以及模型是否可能出现过拟合，比如某些叶节点只有很少的样本，具体原因我一会儿就会讲到。这些指标也是调整模型参数来优化模型性能的重要依据，比如树的最大深度、节点分割的最小样本数等。</p><h3>随机森林</h3><p>随机森林是一种流行的机器学习算法，属于集成学习家族。简单来说，随机森林通过构建多个决策树来进行预测，其基本思想是<strong>集体智慧——单个模型可能有限，但多个模型集合起来可以作出更好的判断</strong>。随机森林算法的关键在于它的随机性。</p><ol>\n<li>样本随机性：每棵树训练的数据通过从原始数据中进行随机抽样得到，这种方法称为自助采样。</li>\n<li>特征随机性：在分裂决策树的节点时，算法会从所有特征中随机选取一部分特征，然后只在这些随机选取的特征中寻找最优分裂特征。</li>\n</ol><p>这种随机性使随机森林模型具有很高的准确性，同时也能防止模型过拟合。这里我解释下什么叫过拟合？过拟合是机器学习领域一个非常重要的概念，简单来讲就是<strong>因为训练数据或者模型参数导致模型缺乏泛化能力。</strong></p><p>这里泛化能力可以理解为通用能力。我们训练模型的目的是希望模型解决通用问题。比如训练一个模型，用来识别一个照片中有没有狗。喂了1000张狗的照片进行训练，结果识别的时候只有尾巴直直的狗可以被识别出来。原因是有一个参数描述尾巴是直的还是弯的，这个参数的存在使模型额外识别狗的某一个特征，失去了泛化能力，导致了过拟合问题。</p><p>前面我们讲的决策树为什么会出现过拟合呢？如果决策条件中有一个非常不通用的条件，分类后这个分支节点只有一个样本，说明这个决策没有通用性（泛化能力），那么这个决策树模型就会存在过拟合问题。</p><p>随机森林怎么解决决策树过拟合的问题呢？我们先来看下随机森林的工作原理。</p><ol>\n<li>从原始数据集中随机抽样选取多个子集。</li>\n<li>对每个子集训练一个决策树。</li>\n<li>每棵树独立进行预测。</li>\n<li>最终预测结果是所有的树预测结果的投票或平均。</li>\n</ol><p>简易代码如下：</p><pre><code class=\"language-python\">import matplotlib.pyplot as plt\nfrom sklearn.tree import plot_tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_iris\n\n# 加载数据集\niris = load_iris()\nX, y = iris.data, iris.target\n\n# 训练随机森林模型\nrf = RandomForestClassifier(n_estimators=3, random_state=42) # 使用3棵树以便于可视化\nrf.fit(X, y)\n\n# 绘制随机森林中的决策树\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 5), dpi=100)\nfor index in range(0, 3):\n&nbsp; &nbsp; plot_tree(rf.estimators_[index],&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; feature_names=iris.feature_names,&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; class_names=iris.target_names,&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; filled=True,&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ax=axes[index])\n\n&nbsp; &nbsp; axes[index].set_title(f'Tree {index + 1}')\n\nplt.tight_layout()\nplt.show()\n\n</code></pre><p>程序运行结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/93/dc/937357e901fd8350abe66dfcfa9183dc.png?wh=5600x2200\" alt=\"图片\"></p><p>这3棵树会通过投票的方式来配合使用。具体来说，对于分类问题，每棵树在接收到一个输入样本后都会独立做出一个预测。最终，整个随机森林的预测结果是基于所有树的预测结果进行多数投票得到的。也就是说，被最多棵树预测为某一类别的类别将成为随机森林的最终预测结果。</p><p>具体步骤如下：</p><ol>\n<li>预测：对于每个输入样本，随机森林中的每棵树都会独立做出自己的预测。</li>\n<li>投票：收集所有树对每个样本的预测结果，并对这些结果进行计数。</li>\n<li>决定最终预测结果：对于每个样本，被预测次数最多的类别将成为随机森林的最终预测结果。</li>\n</ol><p>在实际应用过程中，我们可以构造更多的决策树进行预测，比如100，甚至更多，这样可以使模型更准确更稳定。</p><h3>支持向量机</h3><p>支持向量机（Support Vector Machine，简称SVM）是一种强大的分类算法，在数据科学和机器学习领域广泛应用。SVM的核心思想是，<strong>找到一个最优的决策边界，或者称为“超平面”，这个边界能够以最大的间隔将不同类别的数据分开</strong>。这里有几个关键点需要好好理解一下。</p><ol>\n<li>超平面：在二维空间中，这个边界就是一条线；在三维空间中，是一个平面；而在更高维度的空间中，我们称之为“超平面”。这个超平面的任务就是尽可能准确地分隔开不同类别的数据点。</li>\n<li>最大间隔：SVM不仅仅寻找一个能够将数据分类的边界，它寻找的是能够以最大间隔分开数据的边界。这个间隔是指不同类别的数据点到这个边界的最近距离，SVM试图使这个距离尽可能大。直观上，这样的边界更能抵抗数据中的小变动，提高模型的泛化能力。</li>\n<li>支持向量：决定这个最优超平面位置的几个关键数据点被称为支持向量。它们是最靠近决策边界的点，实际上这个最大间隔的边界就是通过这些点来确定的。</li>\n<li>核技巧：当数据不是线性可分时，也就是说无法通过一个直线或平面来分隔，SVM可以利用所谓的核技巧将数据映射到一个更高维的空间，在这个空间中数据可能是线性可分的。这使得SVM在处理非线性数据时非常强大。</li>\n</ol><p>简单来说，你可以将SVM想象成一个尽可能在不同类别间画一条粗的、清晰的界线，而这条界线是由距离它最近的几个点（支持向量）决定的。这种方法使得分类决策不仅仅依赖于数据的分布，而且具有很好的泛化能力，能够应对未见过的新数据。</p><p>我们简单看下示例代码：</p><pre><code class=\"language-python\">from sklearn import datasets\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 生成模拟数据\nX, y = datasets.make_blobs(n_samples=50, centers=2, random_state=6)\n\n# 划分训练集和测试集\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# 创建 SVM 模型\nmodel = SVC(kernel='linear')\nmodel.fit(X_train, y_train)\n\n# 绘制数据点和分类边界\nplt.figure(figsize=(8, 6))\nplt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='autumn')\n\n# 绘制决策边界\nax = plt.gca()\nxlim = ax.get_xlim()\nylim = ax.get_ylim()\n\n# 创建网格点\nxx = np.linspace(xlim[0], xlim[1], 30)\nyy = np.linspace(ylim[0], ylim[1], 30)\nYY, XX = np.meshgrid(yy, xx)\nxy = np.vstack([XX.ravel(), YY.ravel()]).T\nZ = model.decision_function(xy).reshape(XX.shape)\n\n# 绘制决策边界和间隔\nax.contour(XX, YY, Z, colors='k', levels=[-1, 0, 1], alpha=0.5, linestyles=['--', '-', '--'])\nplt.scatter(model.support_vectors_[:, 0], model.support_vectors_[:, 1], s=100, linewidth=1, facecolors='none', edgecolors='k')\nplt.title(\"支持向量机分类示例\")\nplt.xlabel(\"特征1\")\nplt.ylabel(\"特征2\")\nplt.show()\n\n</code></pre><p>程序运行结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/87/e7/8765a4011edf491ed1e0706fa1265ee7.png?wh=1848x1374\" alt=\"图片\"></p><p>这个例子比较简单，我们使用一个线性核的SVM模型来分类模拟生成的数据点。数据点用橙色和黄色表示，分别代表两个不同的类别。</p><p>图中的黑色实线表示决策边界，这是SVM找到的最佳超平面，用于将两类数据分开。虚线表示决策边界的边缘，这些边缘之间的区域是模型的间隔。支持向量在图中已经用黑色圆圈圈出，它们是离决策边界最近的几个点，对于确定决策边界至关重要。</p><p>这个例子通过直线就可以完成分类，假设这些点在一个平面上混合在一起，那么通过直线是无法进行分类的，这时候我们需要进行升维，再加一个维度，在三维空间里，通过一个面进行分类。在实际应用中，SVM可以通过选择不同的核函数来处理更复杂的数据集。</p><h3>神经网络</h3><p>神经网络应该说是目前最火的机器学习算法模型，现在主流的大部分大模型都是基于深度神经网络的。主要设计思路是模仿人的大脑，由许多小的、处理信息的单位组成，这些单位就是神经元，各神经元之间彼此连接，每个神经元可以向其他神经元发送和接收信号。通过这种方式，神经网络能够执行各种复杂的计算任务，比如图像和语音识别、自然语言处理以及许多其他类型的机器学习任务。</p><p>一个简单的神经网络包含三层：输入层、隐藏层和输出层。一般情况下，一个神经网络输入层和输出层仅有一层，隐藏层可以有多层，不过也有特殊情况，我们后面再讲。</p><ul>\n<li>输入层：接收原始数据输入，例如图片的像素值或者一段文本的编码。</li>\n<li>隐藏层：处理输入数据，可以有一个或多个隐藏层。隐藏层的神经元会对输入数据进行加权和，应用激活函数，这个过程可以捕捉输入数据中的复杂模式和关系。</li>\n<li>输出层：根据隐藏层的处理结果，输出一个值或一组值，代表了神经网络的最终预测结果。</li>\n</ul><p>我们来看一个示例。</p><pre><code class=\"language-python\">import matplotlib.pyplot as plt\n\n# 创建一个简单的神经网络图，并调整文字标签的位置\ndef plot_neural_network_adjusted():\n&nbsp; &nbsp; fig, ax = plt.subplots(figsize=(10, 6))&nbsp; # 创建绘图对象\n\n&nbsp; &nbsp; # 输入层、隐藏层、输出层的神经元数量\n&nbsp; &nbsp; input_neurons = 3\n&nbsp; &nbsp; hidden_neurons = 4\n&nbsp; &nbsp; output_neurons = 2\n\n&nbsp; &nbsp; # 绘制神经元\n&nbsp; &nbsp; layer_names = ['输入层', '隐藏层', '输出层']\n&nbsp; &nbsp; for layer, neurons in enumerate([input_neurons, hidden_neurons, output_neurons]):\n&nbsp; &nbsp; &nbsp; &nbsp; for neuron in range(neurons):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; circle = plt.Circle((layer*2, neuron*1.5 - neurons*0.75 + 0.75), 0.5, color='skyblue', ec='black', lw=1.5, zorder=4)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ax.add_artist(circle)\n\n&nbsp; &nbsp; # 绘制连接线\n&nbsp; &nbsp; for input_neuron in range(input_neurons):\n&nbsp; &nbsp; &nbsp; &nbsp; for hidden_neuron in range(hidden_neurons):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; line = plt.Line2D([0*2, 1*2], [input_neuron*1.5 - input_neurons*0.75 + 0.75, hidden_neuron*1.5 - hidden_neurons*0.75 + 0.75], c='gray', lw=1, zorder=1)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ax.add_artist(line)\n&nbsp; &nbsp; for hidden_neuron in range(hidden_neurons):\n&nbsp; &nbsp; &nbsp; &nbsp; for output_neuron in range(output_neurons):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; line = plt.Line2D([1*2, 2*2], [hidden_neuron*1.5 - hidden_neurons*0.75 + 0.75, output_neuron*1.5 - output_neurons*0.75 + 0.75], c='gray', lw=1, zorder=1)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ax.add_artist(line)\n\n&nbsp; &nbsp; # 设置图参数\n&nbsp; &nbsp; ax.set_xlim(-1, 5)\n&nbsp; &nbsp; ax.set_ylim(-2, max(input_neurons, hidden_neurons, output_neurons)*1.5)\n&nbsp; &nbsp; plt.axis('off')&nbsp; # 不显示坐标轴\n\n&nbsp; &nbsp; # 调整层名称的绘制位置，确保不被遮挡\n&nbsp; &nbsp; for i, name in enumerate(layer_names):\n&nbsp; &nbsp; &nbsp; &nbsp; plt.text(i*2, max(input_neurons, hidden_neurons, output_neurons)*0.75 + 1, name, horizontalalignment='center', fontsize=14, zorder=5)\n\n&nbsp; &nbsp; plt.title(\"简单神经网络图解\", fontsize=16)\n&nbsp; &nbsp; return fig\n\nfig = plot_neural_network_adjusted()\nplt.show()\n\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/81/7a/8141a9yyb159dcd65dbc64058a9a777a.png?wh=2824x1656\" alt=\"图片\"></p><p>神经网络之所以强，是因为它是非线性的，它可以理解非常复杂的逻辑关系。另外，在深度神经网络中，不同的层可以学习不同的特征，较低的层可能学习简单的特征，较高的层则可以学到更复杂的概念。这种从简单到复杂的学习过程使得神经网络非常适合处理复杂的数据结构。当然，还有一些其他概念，如激活函数、前向传播、反向传播、梯度下降等，我们通过一个例子来说明这些概念。</p><p>假设你在做一道菜，而神经网络就像是你的厨房，厨房里有各种炊具和调料，代表着神经网络的各个组成部分。</p><ol>\n<li>食材：输入数据，这是你要做菜所需的原材料，类比神经网络的输入数据。</li>\n<li>调料：激活函数，赋予了食材不同的特性和味道。</li>\n<li>烹饪过程：前向传播，这是你根据菜谱和经验，按照一定的步骤和方法进行的烹饪过程。在前向传播中，神经网络逐层处理输入数据，通过各种操作和激活函数的作用，逐渐提取并组合数据的特征，最终得到输出结果。</li>\n<li>味道调整：训练过程，在烹饪过程中，你会尝试不同的调料和烹饪技巧，不断调整菜的味道，直到达到满意的效果。而在神经网络的训练过程中，我们通过反向传播算法来调整网络参数，使得网络的输出尽可能接近真实标签，达到最佳的预测效果。</li>\n<li>品尝和反馈：反向传播，在烹饪中，你会尝试做好的菜品，并根据味道来调整调料的用量和烹饪方法。而在神经网络中，反向传播就像是品尝和反馈过程，通过计算模型输出与真实标签之间的差距（损失函数），并利用链式法则逆向传播这个误差，以调整每一层的参数，使得网络的输出更接近真实标签。</li>\n<li>调整火候：梯度下降，在烹饪过程中，你还会根据实际情况调整火候，使菜肴烹饪得更加均匀和完美。而在神经网络的训练中，梯度下降就像是调整火候，它是一种优化算法，通过不断沿着梯度的反方向调整参数，逐步降低损失函数，使得网络的预测效果逐渐提升，达到最优的训练效果。</li>\n<li>评价口感：损失函数，在烹饪过程中，你可能会根据菜肴的味道、口感等因素来评价菜品的好坏。而在神经网络中，损失函数就像是评价口感的标准，它衡量了模型的输出与真实标签之间的差距，即模型的预测效果，损失函数越小表示模型的预测越接近真实标签。</li>\n</ol><p>通过这个示例，我们基本把常见的几个关于神经网络的概念都解释清楚了，技术相关的细节我们会在后面的课程中继续学习。</p><h2>小结</h2><p>这节课我们只是进行概念性的介绍，目的在于认识基本的机器学习算法，对于初学者而言，理解这些基本的概念至关重要，通过这两节课的学习，我们了解了一些比较常见的机器学习算法，通过一些简单的代码示例，理解了各个算法的实际应用案例。虽然有些抽象，但是慢慢看还是能够理解的。建议你深入研究下sklearn这个库，里面包含这类场景的机器学习算法，然后自己动手敲一下这些示例代码感受一下。</p><h2>思考题</h2><p>实际上我们上面讲的神经网络之所以强大，就是因为有激活函数，使神经网络呈现为非线性的，那么你可以思考一下，为什么激活函数可以使神经网络呈非线性？如果没有激活函数，神经网络会出现什么问题？欢迎你把你思考后的结果分享到评论区，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"08｜关于机器学习，你需要了解的基本概念（一）","id":783348},"right":{"article_title":"10｜经典算法之RNN：开发人员绕不开的循环神经网络","id":784130}},"comments":[{"had_liked":false,"id":391655,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1718764829,"is_pvip":false,"replies":[{"id":142419,"content":"没错","user_name":"作者回复","user_name_real":"编辑","uid":2083554,"ctime":1718796827,"ip_address":"浙江","comment_id":391655,"utype":1}],"discussion_count":3,"race_medal":2,"score":2,"product_id":100770601,"comment_content":"第9讲打卡~\n思考题：激活函数可以使神经网络呈现非线性，是因为激活函数中引入了复合函数和非线性转换，简单来说就是针对每层网络，激活函数可以控制有哪些特征值、经过什么样的转换之后，再传递到下一层。如果没有激活函数，那么输入层的所有特征值都会按照固定的权重依次传递到隐藏层和输出层，经过换算之后，本质上就相当于只经历了一个线性的隐藏层。","like_count":10,"discussions":[{"author":{"id":2083554,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erZP8e2vqiaACFaDxruOzUTPbPv2uRUTp9UuEg98Ib9aYddjZK2kastqf0B14Ec7uXx7CCSXr0fhAA/132","nickname":"Geek_cf2545","note":"","ucode":"B69DF1E734FBA2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646826,"discussion_content":"没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718796827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1195258,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","nickname":"文敦复","note":"","ucode":"B8F4A6BD5D7805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647140,"discussion_content":"激活函数带来了随机性？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1719545082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1182372,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","nickname":"张申傲","note":"","ucode":"22D46BC529BA8A","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":1195258,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","nickname":"文敦复","note":"","ucode":"B8F4A6BD5D7805","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647144,"discussion_content":"只要还是非线性。如果没有激活函数对特征值的提取和转换，那么每一层网络的特征值都是经过加权后直接传递到一下层，即使权重可以动态调整，但是最终的结果还是线性变换。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1719552178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":647140,"ip_address":"北京","group_id":0},"score":647144,"extra":""}]}]},{"had_liked":false,"id":392238,"user_name":"阿斯蒂芬","can_delete":false,"product_type":"c1","uid":1024164,"ip_address":"广东","ucode":"61D5E3BDA4EBC5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/a4/b060c723.jpg","comment_is_top":false,"comment_ctime":1720355740,"is_pvip":false,"replies":[{"id":142586,"content":"加油👏","user_name":"作者回复","user_name_real":"编辑","uid":2083554,"ctime":1720519174,"ip_address":"浙江","comment_id":392238,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100770601,"comment_content":"老师这个做菜的比喻很妙啊，生动形象。","like_count":1,"discussions":[{"author":{"id":2083554,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erZP8e2vqiaACFaDxruOzUTPbPv2uRUTp9UuEg98Ib9aYddjZK2kastqf0B14Ec7uXx7CCSXr0fhAA/132","nickname":"Geek_cf2545","note":"","ucode":"B69DF1E734FBA2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647722,"discussion_content":"加油👏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1720519174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391935,"user_name":"charlott","can_delete":false,"product_type":"c1","uid":3917879,"ip_address":"江苏","ucode":"BB1F368CAE76ED","user_header":"https://static001.geekbang.org/account/avatar/00/3b/c8/37/64f10938.jpg","comment_is_top":false,"comment_ctime":1719450491,"is_pvip":false,"replies":[{"id":142478,"content":"你说的是自回归的无监督训练吗？","user_name":"作者回复","user_name_real":"编辑","uid":2083554,"ctime":1719556785,"ip_address":"浙江","comment_id":391935,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100770601,"comment_content":"老师您好，机器学习适合宽表数据集吗，尤其是在预测场景下，感觉目前的预测手段都是手写规则十分不便，如果使用机器学习的方式理论上是不是能达到更优良的效果？","like_count":0,"discussions":[{"author":{"id":2083554,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erZP8e2vqiaACFaDxruOzUTPbPv2uRUTp9UuEg98Ib9aYddjZK2kastqf0B14Ec7uXx7CCSXr0fhAA/132","nickname":"Geek_cf2545","note":"","ucode":"B69DF1E734FBA2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647148,"discussion_content":"你说的是自回归的无监督训练吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1719556785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391668,"user_name":"方梁","can_delete":false,"product_type":"c1","uid":1899249,"ip_address":"北京","ucode":"80FA42955D250E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fa/f1/7d21b2b0.jpg","comment_is_top":false,"comment_ctime":1718779150,"is_pvip":false,"replies":[{"id":142421,"content":"有一定的道理","user_name":"作者回复","user_name_real":"编辑","uid":2083554,"ctime":1718797024,"ip_address":"浙江","comment_id":391668,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100770601,"comment_content":"如果没有激活函数，那么下层的节点和参数会几何级增长。","like_count":0,"discussions":[{"author":{"id":2083554,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erZP8e2vqiaACFaDxruOzUTPbPv2uRUTp9UuEg98Ib9aYddjZK2kastqf0B14Ec7uXx7CCSXr0fhAA/132","nickname":"Geek_cf2545","note":"","ucode":"B69DF1E734FBA2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646828,"discussion_content":"有一定的道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718797024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393766,"user_name":"石云升","can_delete":false,"product_type":"c1","uid":1024195,"ip_address":"广东","ucode":"78F1DD33EFD000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/c3/c5db35df.jpg","comment_is_top":false,"comment_ctime":1724818189,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":2,"product_id":100770601,"comment_content":"学习概念性东西，还是要结合一些实际案例来学会比较好。有了AI之后，这个事情变得很简单了。举例：\n1.产品评论情感分析（使用SVM）\n2.客户流失预测（使用随机森林）\n3.产品推荐系统（使用神经网络）\n\n任务：对用户提交的产品评论进行情感分析，判断评论是正面、负面还是中性。\n为什么选择SVM：\n- 文本数据通常是高维的（每个单词都是一个维度）\n- SVM在处理高维稀疏数据方面表现出色\n- 我们主要关注二分类（正面vs负面）或三分类问题\n实施步骤：\na) 数据预处理：\n- 收集大量带标签的产品评论\n- 进行文本清洗（去除标点、转换为小写等）\n- 使用词袋模型或TF-IDF将文本转换为向量\nb) 特征工程：\n- 选择最相关的特征（如最常见的1000个词）\n- 可能会使用词性标注或命名实体识别等技术增强特征\nc) 模型训练：\n- 选择合适的核函数（如线性核或RBF核）\n- 使用网格搜索和交叉验证找到最佳参数\nd) 模型评估：\n- 使用准确率、精确率、召回率和F1分数评估模型\n- 分析错误分类的案例以进一步改进\ne) 部署和监控：\n- 将模型集成到评论系统中\n- 定期用新数据更新模型\n\n任务：预测哪些客户可能在近期停止使用你的平台。\n为什么选择随机森林：\n- 可以处理各种类型的特征（数值型、类别型）\n- 能处理大量特征，并提供特征重要性\n- 对类别不平衡（流失客户通常是少数）有较好的处理能力\n实施步骤：\na) 数据收集和预处理：\n- 收集客户的历史行为数据（如购买频率、客户服务互动、浏览记录等）\n- 处理缺失值和异常值\n- 对类别特征进行编码\nb) 特征工程：\n- 创建新特征，如客户生命周期价值、最近一次购买到现在的时间等\n- 标准化数值特征\nc) 模型训练：\n- 设置合适的树的数量和深度\n- 使用交叉验证来调整参数\nd) 模型评估：\n- 使用 AUC-ROC 曲线评估模型性能\n- 分析特征重要性，了解哪些因素最影响客户流失\ne) 模型应用：\n- 对可能流失的客户进行预警\n- 制定针对性的留存策略\n\n任务：基于用户行为和产品特征，为用户推荐可能感兴趣的产品。\n为什么选择神经网络：\n- 可以处理复杂的非线性关系\n- 能够学习用户和产品的潜在特征\n- 适合处理大规模数据和实时预测\n实施步骤：\na) 数据收集：\n- 用户历史行为数据（浏览、购买、评分等）\n- 产品特征数据（类别、价格、品牌等）\n- 用户特征数据（年龄、性别、位置等）\nb) 数据预处理：\n将用户和产品ID转换为嵌入向量\n对数值特征进行归一化\n对类别特征进行one-hot\nc) 模型设计：\nd) 模型训练：\ne) 模型评估：\nf) 模型部署和更新：\n","like_count":3},{"had_liked":false,"id":395653,"user_name":"福禄妹妹","can_delete":false,"product_type":"c1","uid":1237438,"ip_address":"北京","ucode":"8E235B85E2BE50","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/be/e7c7bb94.jpg","comment_is_top":false,"comment_ctime":1731580622,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100770601,"comment_content":"激活函数进一步提高了网络的表现力。这是因为向网络添加了基于激活函数的“非线性” 表现力，通过非线性函数的叠加，可以表现更加复杂的东西。所以从另一个维度说，激活函数必须使用非线性的，比如ReLU","like_count":1},{"had_liked":false,"id":395557,"user_name":"like life","can_delete":false,"product_type":"c1","uid":3017830,"ip_address":"湖南","ucode":"8D82CD400FC155","user_header":"https://static001.geekbang.org/account/avatar/00/2e/0c/66/51161385.jpg","comment_is_top":false,"comment_ctime":1731229926,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100770601,"comment_content":"激活函数可以使神经网络呈非线性是因为在训练的过程中得益于自反馈的机制来不断调整参数从而导致每次得出的结果和特征都不一样，如果没有激活函数，神经网络则就是一个简单的预测模型","like_count":1}]}