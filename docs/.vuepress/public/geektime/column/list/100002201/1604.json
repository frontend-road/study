{"id":1604,"title":"25 | 分布式系统关键技术：服务调度","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p>\n<p>服务治理，你应该听得很多了。但是我想说，你所听到的服务治理可能混合了流量调度等其它内容。我们这里会把服务治理和流量调度分开来讲。所以，今天这节课只涉及服务治理上的一些关键技术，主要有以下几点。</p>\n<ul>\n<li>服务关键程度</li>\n<li>服务依赖关系</li>\n<li>服务发现</li>\n<li>整个架构的版本管理</li>\n<li>服务应用生命周期全管理</li>\n</ul>\n<h1>服务关键程度和服务的依赖关系</h1>\n<p>下面，我们先看看服务关键程度和服务的依赖关系。关于服务关键程度，主要是要我们梳理和定义服务的重要程度。这不是使用技术可以完成的，它需要细致地管理对业务的理解，才能定义出架构中各个服务的重要程度。</p>\n<p>然后，我们还要梳理出服务间的依赖关系，这点也非常重要。我们常说，“没有依赖，就没有伤害”。这句话的意思就是说，服务间的依赖是一件很易碎的事。依赖越多，依赖越复杂，我们的系统就越易碎。</p>\n<p>因为依赖关系就像“铁锁连环”一样，一个服务的问题很容易出现一条链上的问题。因此，传统的SOA希望通过ESB来解决服务间的依赖关系，这也是为什么微服务中希望服务间是没有依赖的，而让上层或是前端业务来整合这些后台服务。</p>\n<p>但是要真正做到服务无依赖，我认为还是比较有困难的，总是会有一些公有服务会被依赖。我们只能是降低服务依赖的深度和广度，从而让管理更为简单和简洁。在这一点上，以Spring Boot为首的微服务开发框架就开了一个好头。</p>\n<p><strong>微服务是服务依赖最优解的上限，而服务依赖的下限是千万不要有依赖环</strong>。如果系统架构中有服务依赖环，那么表明你的架构设计是错误的。循环依赖有很多的副作用，最大的问题是这是一种极强的耦合，会导致服务部署相当复杂和难解，而且会导致无穷尽的递归故障和一些你意想不到的问题。</p>\n<!-- [[[read_end]]] -->\n<p>解决服务依赖环的方案一般是，依赖倒置的设计模式。在分布式架构上，你可以使用一个第三方的服务来解决这个事。比如，通过订阅或发布消息到一个消息中间件，或是把其中的依赖关系抽到一个第三方的服务中，然后由这个第三方的服务来调用这些原本循环依赖的服务。</p>\n<p>服务的依赖关系是可以通过技术的手段来发现的，其中，<a href=\"https://zipkin.io/\">Zipkin</a>是一个很不错的服务调用跟踪系统，它是通过 <a href=\"https://research.google.com/pubs/pub36356.html\">Google Dapper</a>这篇论文来实现的。这个工具可以帮你梳理服务的依赖关系，以及了解各个服务的性能。</p>\n<p>在梳理完服务的重要程度和服务依赖关系之后，我们就相当于知道了整个架构的全局。就好像我们得到了一张城市地图，在这张地图上可以看到城市的关键设施，以及城市的主干道。再加上相关的监控，我们就可以看到城市各条道路上的工作和拥堵情况。这对于我们整个分布式架构是非常非常关键的。</p>\n<p>我给很多公司做过相关的咨询。当他们需要我帮忙解决一些高并发或是架构问题的时候，我一般都会向他们要一张这样的“地图”，但是几乎所有的公司都没有这样的地图。</p>\n<h1>服务状态和生命周期的管理</h1>\n<p>有了上面这张地图后，我们还需要有一个服务发现的中间件，这个中间件是非常非常关键的。因为这个“架构城市”是非常动态的，有的服务会新加进来，有的会离开，有的会增加更多的实例，有的会减少，有的服务在维护过程中（发布、伸缩等），所以我们需要有一个服务注册中心，来知道这么几个事。</p>\n<ul>\n<li>整个架构中有多少种服务？</li>\n<li>这些服务的版本是什么样的？</li>\n<li>每个服务的实例数有多少个，它们的状态是什么样的?</li>\n<li>每个服务的状态是什么样的？是在部署中，运行中，故障中，升级中，还是在回滚中，伸缩中，或者是在下线中……</li>\n</ul>\n<p>这个服务注册中心有点像我们系统运维同学说的CMDB这样的东西，它也是非常之关键的，因为没有它，我们将无法知道这些服务运作的状态和情况。</p>\n<p>有了这些服务的状态和运行情况之后，你就需要对这些服务的生命周期进行管理了。服务的生命周期通常会有以下几个状态：</p>\n<ul>\n<li>Provision，代表在供应一个新的服务；</li>\n<li>Ready，表示启动成功了；</li>\n<li>Run，表示通过了服务健康检查；</li>\n<li>Update，表示在升级中；</li>\n<li>Rollback，表示在回滚中；</li>\n<li>Scale，表示正在伸缩中（可以有Scale-in和Scale-out两种）；</li>\n<li>Destroy，表示在销毁中；</li>\n<li>Failed，表示失败状态。</li>\n</ul>\n<p>这几个状态需要管理好，不然的话，你将不知道这些服务在什么样的状态下。不知道在什么样的状态下，你对整个分布式架构也就无法控制了。</p>\n<p>有了这些服务的状态和生命周期的管理，以及服务的重要程度和服务的依赖关系，再加上一个服务运行状态的拟合控制（后面会提到），你一下子就有了管理整个分布式服务的手段了。</p>\n<p>一个纷乱无比的世界从此就可以干干净净地管理起来了。</p>\n<h1>整个架构的版本管理</h1>\n<p>对于整个架构的版本管理这个事，我只见到亚马逊有这个东西，叫VersionSet，也就是由一堆服务的版本集所形成的整个架构的版本控制。</p>\n<p>除了各个项目的版本管理之外，还需要在上面再盖一层版本管理。如果Build过Linux分发包，那么你就会知道，Linux分发包中各个软件的版本上会再盖一层版本控制。毕竟，这些分发包也是有版本依赖的，这样可以解决各个包的版本兼容性问题。</p>\n<p>所以，在分布式架构中，我们也需要一个架构的版本，用来控制其中各个服务的版本兼容。比如，A服务的1.2版本只能和B服务的2.2版本一起工作，A服务的上个版本1.1只能和B服务的2.0一起工作。这就是版本兼容性。</p>\n<p>如果架构中有这样的问题，那么我们就需要一个上层架构的版本管理。这样，如果我们要回滚一个服务的版本，就可以把与之有版本依赖的服务也一起回滚掉。</p>\n<p>当然，一般来说，在设计过程中，我们希望没有版本的依赖性问题。但可能有些时候，我们会有这样的问题，那么就需要在架构版本中记录下这个事，以便可以回滚到上一次相互兼容的版本。</p>\n<p>要做到这个事，你需要一个架构的manifest，一个服务清单，这个服务清单定义了所有服务的版本运行环境，其中包括但不限于：</p>\n<ul>\n<li>服务的软件版本；</li>\n<li>服务的运行环境——环境变量、CPU、内存、可以运行的节点、文件系统等；</li>\n<li>服务运行的最大最小实例数。</li>\n</ul>\n<p>每一次对这个清单的变更都需要被记录下来，算是一个架构的版本管理。而我们上面所说的那个集群控制系统需要能够解读并执行这个清单中的变更，以操作和管理整个集群中的相关变更。</p>\n<h1>资源/服务调度</h1>\n<p>服务和资源的调度有点像操作系统。操作系统一方面把用户进程在硬件资源上进行调度，另一方面提供进程间的通信方式，可以让不同的进程在一起协同工作。服务和资源调度的过程，与操作系统调度进程的方式很相似，主要有以下一些关键技术。</p>\n<ul>\n<li>服务状态的维持和拟合。</li>\n<li>服务的弹性伸缩和故障迁移。</li>\n<li>作业和应用调度。</li>\n<li>作业工作流编排。</li>\n<li>服务编排。</li>\n</ul>\n<h2>服务状态的维持和拟合</h2>\n<p>所谓服务状态不是服务中的数据状态，而是服务的运行状态，换句话说就是服务的Status，而不是State。也就是上述服务运行时生命周期中的状态——Provision，Ready，Run，Scale，Rollback，Update，Destroy，Failed……</p>\n<p>服务运行时的状态是非常关键的。服务运行过程中，状态也是会有变化的，这样的变化有两种。</p>\n<ul>\n<li>\n<p>一种是没有预期的变化。比如，服务运行因为故障导致一些服务挂掉，或是别的什么原因出现了服务不健康的状态。而一个好的集群管理控制器应该能够强行维护服务的状态。在健康的实例数变少时，控制器会把不健康的服务给摘除，而又启动几个新的，强行维护健康的服务实例数。</p>\n</li>\n<li>\n<p>另外一种是预期的变化。比如，我们需要发布新版本，需要伸缩，需要回滚。这时，集群管理控制器就应该把集群从现有状态迁移到另一个新的状态。这个过程并不是一蹴而就的，集群控制器需要一步一步地向集群发送若干控制命令。这个过程叫“拟合”——从一个状态拟合到另一个状态，而且要穷尽所有的可能，玩命地不断地拟合，直到达到目的。</p>\n</li>\n</ul>\n<p>详细说明一下，对于分布式系统的服务管理来说，当需要把一个状态变成另一个状态时，我们需要对集群进行一系列的操作。比如，当需要对集群进行Scale的时候，我们需要：</p>\n<ul>\n<li>先扩展出几个结点；</li>\n<li>再往上部署服务；</li>\n<li>然后启动服务；</li>\n<li>再检查服务的健康情况；</li>\n<li>最后把新扩展出来的服务实例加入服务发现中提供服务。</li>\n</ul>\n<p>可以看到，这是一个比较稳健和严谨的Scale过程，这需要集群控制器往生产集群中进行若干次操作。</p>\n<p>这个操作的过程一定是比较“慢”的。一方面，需要对其它操作排它；另一方面，在整个过程中，我们的控制系统需要努力地逼近最终状态，直到完全达到。此外，正在运行的服务可能也会出现问题，离开了我们想要的状态，而控制系统检测到后，会强行地维持服务的状态。</p>\n<p><strong>我们把这个过程就叫做“拟合”</strong>。基本上来说，集群控制系统都是要干这个事的。没有这种设计的控制系统都不能算作设计精良的控制系统，而且在运行时一定会有很多的坑和bug。</p>\n<p>如果研究过Kubernetes这个调度控制系统，你就会看到它的思路就是这个样子的。</p>\n<h2>服务的弹性伸缩和故障迁移</h2>\n<p>有了上述的服务状态拟合的基础工作之后，我们就能很容易地管理服务的生命周期了，甚至可以通过底层的支持进行便利的服务弹性伸缩和故障迁移。</p>\n<p>对于弹性伸缩，在上面我已经给出了一个服务伸缩所需要的操作步骤。还是比较复杂的，其中涉及到了：</p>\n<ul>\n<li>底层资源的伸缩；</li>\n<li>服务的自动化部署；</li>\n<li>服务的健康检查；</li>\n<li>服务发现的注册；</li>\n<li>服务流量的调度。</li>\n</ul>\n<p>而对于故障迁移，也就是服务的某个实例出现问题时，我们需要自动地恢复它。对于服务来说，有两种模式，一种是宠物模式，一种是奶牛模式。</p>\n<ul>\n<li>所谓宠物模式，就是一定要救活，主要是对于stateful 的服务。</li>\n<li>而奶牛模式，就是不用救活了，重新生成一个实例。</li>\n</ul>\n<p>对于这两种模式，在运行中也是比较复杂的，其中涉及到了：</p>\n<ul>\n<li>服务的健康监控（这可能需要一个APM的监控）。</li>\n<li>如果是宠物模式，需要：服务的重新启动和服务的监控报警（如果重试恢复不成功，需要人工介入）。</li>\n<li>如果是奶牛模式，需要：服务的资源申请，服务的自动化部署，服务发现的注册，以及服务的流量调度。</li>\n</ul>\n<p>我们可以看到，弹性伸缩和故障恢复需要很相似的技术步骤。但是，要完成这些事情并不容易，你需要做很多工作，而且有很多细节上的问题会让你感到焦头烂额。</p>\n<p>当然，好消息是，我们非常幸运地生活在了一个比较不错的时代，因为有Docker和Kubernetes这样的技术，可以非常容易地让我们做这个工作。</p>\n<p>但是，需要把传统的服务迁移到Docker和Kubernetes上来，再加上更上层的对服务生命周期的控制系统的调度，我们就可以做到一个完全自动化的运维架构了。</p>\n<h2>服务工作流和编排</h2>\n<p>正如上面和操作系统做的类比一样，一个好的操作系统需要能够通过一定的机制把一堆独立工作的进程给协同起来。在分布式的服务调度中，这个工作叫做Orchestration，国内把这个词翻译成“编排”。</p>\n<p>从《分布式系统架构的冰与火》一文中的SOA架构演化图来看，要完成这个编排工作，传统的SOA是通过ESB（Enterprise Service Bus）——企业服务总线来完成的。ESB的主要功能是服务通信路由、协议转换、服务编制和业务规则应用等。</p>\n<p>注意，ESB的服务编制叫Choreography，与我们说的Orchestration是不一样的。</p>\n<ul>\n<li>\n<p>Orchestration的意思是，一个服务像大脑一样来告诉大家应该怎么交互，就跟乐队的指挥一样。（查看<a href=\"https://eprints.qut.edu.au/622/1/SOD_%28revised%29.pdf\">Service-oriented Design：A Multi-viewpoint Approach</a>，了解更多信息）。</p>\n</li>\n<li>\n<p>Choreography的意思是，在各自完成专属自己的工作的基础上，怎样互相协作，就跟芭蕾舞团的舞者一样。</p>\n</li>\n</ul>\n<p>而在微服务中，我们希望使用更为轻量的中间件来取代ESB的服务编排功能。</p>\n<p>简单来说，这需要一个API Gateway或一个简单的消息队列来做相应的编排工作。在Spring Cloud中，所有的请求都统一通过API Gateway（Zuul）来访问内部的服务。这个和Kubernetes中的Ingress相似。</p>\n<p>我觉得，关于服务的编排会直接导致一个服务编排的工作流引擎中间件的产生，这可能是因为我受到了亚马逊的软件工程文化的影响所致——亚马逊是一家超级喜欢工作流引擎的公司。通过工作流引擎，可以非常快速地将若干个服务编排起来形成一个业务流程。（你可以看一下AWS上的Simple Workflow服务。）</p>\n<p>这就是所谓的Orchestration中的conductor 指挥了。</p>\n<h1>小结</h1>\n<p>好了，今天的分享就这些。总结一下今天的主要内容：我们从服务关键程度、服务依赖关系、整个架构的版本管理等多个方面，全面阐述了分布式系统架构五大关键技术之一——服务资源调度。希望这些内容能对你有所启发。</p>\n<p>你现在的公司中是怎样管理和运维线上的服务的呢？欢迎分享一下你的经验和方法。</p>\n<p>下一讲，我们将从流量调度和状态数据调度两个方面，来接着聊分布式系统关键技术。</p>\n<p>文末有系列文章《分布式系统架构的本质》的目录，供你查看，方便你找到自己感兴趣的内容。</p>\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/1411\">分布式系统架构的冰与火</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1505\">从亚马逊的实践，谈分布式系统的难点</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1512\">分布式系统的技术栈</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1513\">分布式系统关键技术：全栈监控</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1604\">分布式系统关键技术：服务调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1609\">分布式系统关键技术：流量与数据调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1610\">洞悉PaaS平台的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2080\">推荐阅读：分布式系统架构经典资料</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2421\">推荐阅读：分布式数据调度相关论文</a></li>\n</ul>\n","comments":[{"had_liked":false,"id":1655,"user_name":"夜行观星","can_delete":false,"product_type":"c1","uid":1010389,"ip_address":"","ucode":"C880CB39033929","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/d5/73c75eb3.jpg","comment_is_top":false,"comment_ctime":1513943029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"108888125429","product_id":100002201,"comment_content":"每篇文章都看好几次","like_count":26},{"had_liked":false,"id":13613,"user_name":"菩提树下的杨过","can_delete":false,"product_type":"c1","uid":1155048,"ip_address":"","ucode":"614CDFA3A9B161","user_header":"https://static001.geekbang.org/account/avatar/00/11/9f/e8/26004860.jpg","comment_is_top":false,"comment_ctime":1529853464,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"96019133976","product_id":100002201,"comment_content":"服务的循环依赖，有时候是公司组织结构和管理不合理导致的，比如几个相对独立的部门，A部门要搞一个新需求，依赖B部门提供的服务，B部门又依赖C部门的服务，而C又依赖A部门的服务。如果没有能站在上帝视角俯视全局的明白人指路（通常是公司最熟悉技术及业务的资深人士或xx委员会），部门之间沟通又不顺畅的情况下，服务依赖环就这么产生了，甚至还可以顺利上线，为将来又添新坑","like_count":22,"discussions":[{"author":{"id":1104818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","nickname":"JasonZ","note":"","ucode":"992193AE44C39C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8231,"discussion_content":"服务为什么不能循环依赖？有哪些坏处？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567845344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","nickname":"JasonZ","note":"","ucode":"992193AE44C39C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361577,"discussion_content":"死循环","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616688374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8231,"ip_address":""},"score":361577,"extra":""},{"author":{"id":2309641,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4IPqj4H3jQHq4C1lgKh6ZroK3CVmGLiadic7S1rxbuy09JM9x8Aib6VkozPkO4lrUTHAhicX1z9Cg2w/132","nickname":"seedjyh","note":"","ucode":"D590E526A9A1D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","nickname":"JasonZ","note":"","ucode":"992193AE44C39C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404023,"discussion_content":"可以参考领域驱动里的限界上下文的依赖。主要是修改一个服务A时，依赖A的服务B需要做一些对应修改，然后依赖服务B的服务C也需要做对应修改，最后绕了一圈服务A也要做修改，而A的修改再度触发服务B的修改需求……","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1634211305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8231,"ip_address":""},"score":404023,"extra":""}]}]},{"had_liked":false,"id":6016,"user_name":"白","can_delete":false,"product_type":"c1","uid":1086829,"ip_address":"","ucode":"B7790059DD43B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/95/6d/bc01fdf7.jpg","comment_is_top":false,"comment_ctime":1524278072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65948787512","product_id":100002201,"comment_content":"zipkin好像对代码侵入性有点大","like_count":15},{"had_liked":false,"id":21261,"user_name":"ytz","can_delete":false,"product_type":"c1","uid":1210694,"ip_address":"","ucode":"AB1C2F295E6425","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/46/0d4bfcdd.jpg","comment_is_top":false,"comment_ctime":1534987118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35894725486","product_id":100002201,"comment_content":"腾讯的tars也带有versionset，配合序列化协议实现兼容和升级也是非常便利。","like_count":8},{"had_liked":false,"id":1837,"user_name":"architect-lc","can_delete":false,"product_type":"c1","uid":1018004,"ip_address":"","ucode":"365E1B6DA6D309","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/94/57b3d984.jpg","comment_is_top":false,"comment_ctime":1514748815,"is_pvip":true,"replies":[{"id":"314","content":"主要是社区和、跨语言、轻量、可扩展性这几个方面","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1514955897,"ip_address":"","comment_id":1837,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35874487183","product_id":100002201,"comment_content":"关于分布式调用监控，为什么您推荐zipkin？skywalking和pinpoint您有什么评价吗？目前项目正在考虑分布式调用监控的问题，谢谢","like_count":8,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415548,"discussion_content":"主要是社区和、跨语言、轻量、可扩展性这几个方面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1514955897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","nickname":"JasonZ","note":"","ucode":"992193AE44C39C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8230,"discussion_content":"skywalking也挺不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567845308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111733,"user_name":"Vance","can_delete":false,"product_type":"c1","uid":1174028,"ip_address":"","ucode":"D9659824312D87","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/0c/d79ae60d.jpg","comment_is_top":false,"comment_ctime":1562591269,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23037427749","product_id":100002201,"comment_content":"作为一个App开发，看的是一脸懵逼，但是感觉后台的架构，分布式系统，还有自动运维这些技术是真的牛逼！希望有机会可以更深入学习一下。","like_count":5,"discussions":[{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361578,"discussion_content":"微服务有学过就不会了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616688401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1703,"user_name":"恩言","can_delete":false,"product_type":"c1","uid":1026855,"ip_address":"","ucode":"79771A313B9CCC","user_header":"","comment_is_top":false,"comment_ctime":1514190140,"is_pvip":false,"replies":[{"id":"315","content":"后面的文章会有","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1514955952,"ip_address":"","comment_id":1703,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18694059324","product_id":100002201,"comment_content":"皓哥，能推荐一两本相关书籍么","like_count":4,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415508,"discussion_content":"后面的文章会有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1514955952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131686,"user_name":"JasonZ","can_delete":false,"product_type":"c1","uid":1104818,"ip_address":"","ucode":"992193AE44C39C","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","comment_is_top":false,"comment_ctime":1567845522,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14452747410","product_id":100002201,"comment_content":"如果系统架构中有服务依赖环，那么表明你的架构设计是错误的。循环依赖有很多的副作用，最大的问题是这是一种极强的耦合，会导致服务部署相当复杂和难解<br><br>这个能举例说明下么？而不是结论","like_count":3,"discussions":[{"author":{"id":1148262,"avatar":"","nickname":"delete is create","note":"","ucode":"12A64AF8D50C00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100607,"discussion_content":"A依赖B  B依赖C  而C依赖A，  其中一个服务更新了都可能会导致全盘用不了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577272356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23265,"user_name":"AT","can_delete":false,"product_type":"c1","uid":1125168,"ip_address":"","ucode":"B53F91A4521806","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/30/3be5c7bf.jpg","comment_is_top":false,"comment_ctime":1536241874,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14421143762","product_id":100002201,"comment_content":"关于分布式调用监控，为什么您推荐zipkin？skywalking和pinpoint您有什么评价吗？目前项目正在考虑分布式调用监控的问题，谢谢<br>2018-01-01","like_count":3},{"had_liked":false,"id":14505,"user_name":"蟹蟹","can_delete":false,"product_type":"c1","uid":1058859,"ip_address":"","ucode":"9DCD9F177AC203","user_header":"https://static001.geekbang.org/account/avatar/00/10/28/2b/818c8b85.jpg","comment_is_top":false,"comment_ctime":1530497527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14415399415","product_id":100002201,"comment_content":"前面都看懂 但是最后的服务编排没明白…","like_count":3},{"had_liked":false,"id":164561,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1577027503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10166962095","product_id":100002201,"comment_content":"服务关键程度，服务依赖梳理，服务发现，服务治理，服务监控，服务扩缩容。这些道理，在我们生活中也是很朴素适用的。<br>找到生活工作的关键目标，确定关键的事情，厘清事物先后顺序，采取措施执行，并持续监控状态，刷新调整，最终向目标迈进。<br>而在开发的世界里，通过构建这样一套服务的管理系统，我们就可以对外提供一个稳定可靠的服务。在遇到服务故障，服务更新，回退以及突发事件时候可以及时感知并采取措施。<br>要做到这一点还是感谢开源的力量，有一整套思路来指引我们采取措施，也有一系列工具可以提供我们采用。docker和k8s，目前在云开发中已经是新的开发基础，这里面也有很多坑，前人在总结和优化，开发者只要能把工具用好都已经可以实现自我的提升了。","like_count":1},{"had_liked":false,"id":59395,"user_name":"Dale","can_delete":false,"product_type":"c1","uid":1010056,"ip_address":"","ucode":"DD4717C06E417D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/69/88/528442b0.jpg","comment_is_top":false,"comment_ctime":1547362779,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10137297371","product_id":100002201,"comment_content":"我们工作中使用kubernetes进行服务部署，镜像带上版本信息，服务升级只需要更新镜像，对POD点进行灰度发布。使用容器化，kubernetes集群管理大大提高工作效率","like_count":2,"discussions":[{"author":{"id":1146507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7e/8b/3cc461b3.jpg","nickname":"宋晓明","note":"","ucode":"DC866DCE2FBA9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10233,"discussion_content":"kubernetes怎么灰度发布的？借助istio吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568278243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55537,"user_name":"幼儿编程教学","can_delete":false,"product_type":"c1","uid":1237199,"ip_address":"","ucode":"F13F3150E6CAE9","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/cf/43f201f2.jpg","comment_is_top":false,"comment_ctime":1546225666,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10136160258","product_id":100002201,"comment_content":"请教。state和status的区别是什么?","like_count":3,"discussions":[{"author":{"id":1053485,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/2d/ad1bfe92.jpg","nickname":"江湖中人","note":"","ucode":"9E464AE9CC62EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88594,"discussion_content":"用 state 描述时，其取值是彼此独立的枚举值，没有因果上的前后关系。如一个房间可以是单人房、标准间、豪华总统房等，这时就用state表示。\n用 status 时，其取值是存在前后状态依赖关系的。如建造一个房间的过程，该房间经历设计中、材料准备、施工、验收等过程，这个过程中的房间状态就用status来表示。\n详细说明及例子可以参考这篇文章：\nhttps://www.cnblogs.com/Ting-log/p/9114768.html","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1576719832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182146,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/c2/8c5442bf.jpg","nickname":"老庄道人","note":"","ucode":"C102EA323A69B4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535328,"discussion_content":"State是有数据的状态，Status是单纯的运行状态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638413466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403654,"discussion_content":"好问题！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634126360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55392,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1546157246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10136091838","product_id":100002201,"comment_content":"zipkin，长见识了","like_count":2},{"had_liked":false,"id":166893,"user_name":"realwuxing","can_delete":false,"product_type":"c1","uid":1276397,"ip_address":"","ucode":"AFDF169A4E0328","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJowicLVgt4uscjBFa2jG7WyBZ0G9ID9JibHdCiafpl7j01txMMXlEiayQjNkw70QKtJAtJ35XAI5voCg/132","comment_is_top":false,"comment_ctime":1577626858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872594154","product_id":100002201,"comment_content":"有个疑问是zipkin应该对代码侵入相对pinpoint来讲有些大，这个是怎么更好的解决的？尤其是已有的系统。","like_count":1},{"had_liked":false,"id":165845,"user_name":"Geek_110","can_delete":false,"product_type":"c1","uid":1785130,"ip_address":"","ucode":"963458FD9BE044","user_header":"","comment_is_top":false,"comment_ctime":1577331638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872298934","product_id":100002201,"comment_content":"请教一下，ESB为什么是Choreography，之前SOA服务之间调用不应该是通过ESC路由，消息协议转换么，我怎么感觉更应该像Orchestration的一个指挥者啊，文中的意思是API Gateway来取代ESC么，他们两个的功能不一样啊？而且gateway和服务内部之间调用没有关系吧","like_count":1},{"had_liked":false,"id":163387,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1593949,"ip_address":"","ucode":"EF3E124B05D42D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIia1btmwb5hhTazpu2OxaiaGwavXPQrsp5QVIlSF5jczsq3PS3siaUiazSErAKuiangahTjVpXCNV1W6A/132","comment_is_top":false,"comment_ctime":1576716150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871683446","product_id":100002201,"comment_content":"介绍的很详细，自己实践后会理解更深","like_count":1},{"had_liked":false,"id":163364,"user_name":"Haan","can_delete":false,"product_type":"c1","uid":1388133,"ip_address":"","ucode":"7A7BBE0D0CD39E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq8qpSvBoZz89u3BhGXWLibs2OibCkZl8bx74aLSJ58f467bR8anNaTiccJklcqjBdhfvvJpvLVmYesA/132","comment_is_top":false,"comment_ctime":1576713618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871680914","product_id":100002201,"comment_content":"实践➕阅读","like_count":1},{"had_liked":false,"id":162163,"user_name":"Aaron_涛","can_delete":false,"product_type":"c1","uid":1180617,"ip_address":"","ucode":"067F3CBB1F036C","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/c9/9a9d82ab.jpg","comment_is_top":false,"comment_ctime":1576468723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871436019","product_id":100002201,"comment_content":"对于spring cloud是 zuul，那么对于dubbo和thrift类比是什么呢。","like_count":1},{"had_liked":false,"id":102047,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1560126416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855093712","product_id":100002201,"comment_content":"从服务关键程度、服务依赖关系、整个架构的版本管理，服务和资源的调度，服务的故障恢复和动态扩容，全面阐述了分布式系统架构五大关键技术之——服务资源调度。","like_count":1},{"had_liked":false,"id":97357,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1558660094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853627390","product_id":100002201,"comment_content":"真知灼见和学富五车的感觉，皓哥的内力真的是深厚","like_count":1},{"had_liked":false,"id":41742,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1542848065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5837815361","product_id":100002201,"comment_content":"服务直接不能循环依赖","like_count":1},{"had_liked":false,"id":10927,"user_name":"几叶星辰","can_delete":false,"product_type":"c1","uid":1145486,"ip_address":"","ucode":"F85CB0459217DA","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/8e/934cbcbc.jpg","comment_is_top":false,"comment_ctime":1527745025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5822712321","product_id":100002201,"comment_content":"老师可否讲下，负载均衡,比如一个主机通过负载均衡器到达服务器A，在已建立路由表的情况下，那台主机到负载均衡器的所有包都是路由给服务器A吗","like_count":1},{"had_liked":false,"id":348646,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1655276758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655276758","product_id":100002201,"comment_content":"每一篇文章都是涵盖大量的知识，这一篇文章就需要学习好久才能领会文章的真谛","like_count":0},{"had_liked":false,"id":316708,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1634520377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634520377","product_id":100002201,"comment_content":"提供了不少聚合的思路，目前在做弹性扩缩容，有非常大的收益！","like_count":0},{"had_liked":false,"id":316234,"user_name":"seedjyh","can_delete":false,"product_type":"c1","uid":2309641,"ip_address":"","ucode":"D590E526A9A1D7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4IPqj4H3jQHq4C1lgKh6ZroK3CVmGLiadic7S1rxbuy09JM9x8Aib6VkozPkO4lrUTHAhicX1z9Cg2w/132","comment_is_top":false,"comment_ctime":1634211153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634211153","product_id":100002201,"comment_content":"公司太小，服务只有很少几个，且每种服务的实例也只有很少几个，也可以上kubernetes吗","like_count":0},{"had_liked":false,"id":262458,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1605745448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605745448","product_id":100002201,"comment_content":"【服务关键程度<br>服务依赖关系<br>服务发现<br>整个架构的版本管理<br>服务应用生命周期全管理】<br>我对这个关键技术理解是这样的。就好比我们要做成一件事情，那事情呢肯定不是一蹴而就的。需要给这个事情进行一些关键点的设置，这就类似于服务发现。<br>那这些关键点呢，肯定有一些比较重要的，那这些呢就是关键服务了。<br>那这些服务之间是不是还应该得有点前后顺序呀。<br>那在做事情的途中就需要我们对这些小事儿进行思考起来那个完成了，那个没完成。完成会怎样没完成又会怎样。有时呢，在做的过程中。我们可能还会对整个做事情大思路进行下调整。这个思路就是我们做事情大的架构了","like_count":0},{"had_liked":false,"id":238766,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1596288633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596288633","product_id":100002201,"comment_content":"看了此文，才发觉离喜玛拉雅顶峰，还远得很","like_count":0},{"had_liked":false,"id":210602,"user_name":"高科","can_delete":false,"product_type":"c1","uid":1107568,"ip_address":"","ucode":"81A4DDF41D3C1C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/70/b9907b0e.jpg","comment_is_top":false,"comment_ctime":1587794713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587794713","product_id":100002201,"comment_content":"对服务流程编排这块内容很感兴趣，目前我们的业务中也在做这方面的尝试，目前感觉原子服务的抽象是有一定难度的，并不能总是适应需求","like_count":0},{"had_liked":false,"id":198536,"user_name":"xxyyyboy","can_delete":false,"product_type":"c1","uid":1916113,"ip_address":"","ucode":"C8F0E08ED1C1D9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJu684YiafbNTjJNZ0BpxD2wVzW9mSdBEQd6ALfnqQJDcfntiatOmRribgngn31JIsibgQUF7t2q1ibIkQ/132","comment_is_top":false,"comment_ctime":1585455696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585455696","product_id":100002201,"comment_content":"受益匪浅啊","like_count":0},{"had_liked":false,"id":187897,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1584270101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584270101","product_id":100002201,"comment_content":"服务调度前，需要梳理服务的关键程度、依赖关系图，监控服务的状态，在服务弹性伸缩或故障迁移时进行调度。调度的过程还是很复杂的，先扩展出几个结点，再往上部署服务，然后启动服务，检查服务的监控情况，如果健康，则添加到服务发现中，每个操作都可能失败，重试也可能失败，幸好 Kubernetes 搞定了这些。<br>感谢 Kubernetes 这样集群调度系统的帮助，可以多关注业务的逻辑，复杂度降低一个量级。","like_count":0},{"had_liked":false,"id":163825,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1576808511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576808511","product_id":100002201,"comment_content":"这个操作的过程一定是比较“慢”的。一方面，需要对其它操作排它；什么意思？","like_count":0},{"had_liked":false,"id":131685,"user_name":"JasonZ","can_delete":false,"product_type":"c1","uid":1104818,"ip_address":"","ucode":"992193AE44C39C","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","comment_is_top":false,"comment_ctime":1567845452,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1567845452","product_id":100002201,"comment_content":"服务循环依赖的有什么大的问题么？","like_count":0,"discussions":[{"author":{"id":1045945,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","nickname":"不记年","note":"","ucode":"287E40C68356DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372401,"discussion_content":"系统难以理解，版本发布困难，团队协作困难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620308744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}