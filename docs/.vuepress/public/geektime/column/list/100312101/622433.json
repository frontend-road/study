{"id":622433,"title":"22｜协议编解码：接口调用的数据是如何发到网络中的？","content":"<p>你好，我是何辉。今天我们深入研究Dubbo源码的最后一篇，协议编解码。</p><p>你已经学过了 Dubbo 框架的十大模块（<a href=\"https://time.geekbang.org/column/article/611355\">01讲</a>），上一讲也掌握消费方调用的整体框架流程，基本把 Dubbo 框架纵向走了一遍，但依然在单进程中转悠。而 Dubbo 的本质就是网络通信，要想把数据发到网络送往提供方，默认用 Netty 网络通信框架完成的。</p><p>那发起接口调用时，你创建出来的一个普普通通的请求对象，到底是如何被编解码后发到网络中的呢？如果你平常不怎么接触底层，这个问题想回答好确实有点难。不过不用担心，我们也研究了不少源码，按套路，根据一些蛛丝马迹顺着研究，解答这个问题其实就是一层窗户纸的事。</p><h2>什么是帧格式？</h2><p>想回答清楚今天的问题，我们从一个概念开始，帧格式。</p><p>所谓的“帧格式”，就是指根据不同协议规定的数据传输的格式。举个常见的 TCP/IP 模型，分别有应用层、传输层、网络层、数据链路层，以及物理层，每一层都有着对应的数据帧格式。</p><p>我们以数据封装的过程为例。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/ef/4ab9241ef2acf486fdfd3b2a13e005ef.jpg?wh=1920x1290\" alt=\"图片\"></p><p>比如，应用层的数据包+TCP头部就是传输层的帧格式，传输层的数据包+IP头部就是网络层的帧格式，网络层的数据包+MAC头部就是数据链路层的帧格式，最后，会把数据链路层的整个数据包，变成比特流，通过工作在物理层的网卡、网线或光纤发送出去。</p><!-- [[[read_end]]] --><p>这是我们从 TCP/IP 模型层面认识帧格式，那对于<strong>这样的数据传输格式，在客户端向服务端发送数据的实际交互过程中，又是如何体现的呢？</strong></p><p>我们看一个日常开发的交互案例。</p><p><img src=\"https://static001.geekbang.org/resource/image/6e/94/6e38ed12356ce27b725a2e961e8fdf94.jpg?wh=1920x818\" alt=\"图片\"></p><p>client 把数据发往 server，这种交互形式估计你是再熟悉不过了。我们模拟一下数据的收发过程。</p><h3>1. 固定长度</h3><p>现在我们有 100 字节的数据，需要通过 client 发送出去，可是 client 的发送缓冲区太小了，缓冲区每次只能容纳 50 字节大小。所以，client 利用 socket 进行了 2 次 write 操作，才把 100 字节发送出去。</p><p>但是对于收数据的 server 来说，什么时候才认为数据接收齐全了呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/65/9d4cbe300010c2f727db794b75d7de65.jpg?wh=1920x819\" alt=\"图片\"></p><p>server 其实是很疑惑的，接收 client 第一次发来的数据后，到底该不该收 client 第二次发来的数据呢？若是不收的话，会不会造成少收数据？若是收，到底收多少数据才算完整呢？</p><p>为了解决种种疑惑，<strong>client 和 server 进行了双方的约定，按照固定长度直接进行收发。</strong></p><p>在这个场景里约定 client 发起的一次短链接请求，server 收满 100 个字节就可以结束了。如果 client 发了 120 个字节，server 已经收下 100 个字节后，再继续收到 20 个字节时，发现 client 结束会话了，那么，server 会认为这20字节没有满 100 个字节，就干脆丢弃不要了。</p><h3>2. 分隔符</h3><p>看来长度的约定很重要，但是，这个长度到底该定义多少合适呢？</p><p>若短了，会增加通信的次数，增加双方的通信压力；若长了，比如定义为 1000 个字节，但是大多数情况下数据都是 1000 ~ 1100 个长度，岂不是 client 每次都要多发 900 ~ 1000 个没有意义的内容给到 server，不然 server 就会抛弃掉 client 第二次发送的数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/79/f7/79e00b4e4b48aa422b59b801f9b922f7.jpg?wh=1920x841\" alt=\"图片\"></p><p>所以 client 又和 server 进行了约定，约定按照特殊字符切割。比如 client 给 server 发了一堆的数据，server 先一股脑全接收，当 server 碰到特殊字符时就切割开，然后继续接收新的一个数据包。</p><p>这也不失为一种办法，总比数据被丢弃好得多。</p><h3>3. 定长+变长</h3><p>可是试行了一段时间后，client 还是觉得有问题，因为有些数据内容如果含有分隔符，也被切割了。如果能有一种特殊的前缀标识就好了，识别到这种标识，就读多少数据，貌似更可行。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/fd/e241209c04691dd7aec394ba90e34afd.jpg?wh=1920x684\" alt=\"图片\"></p><p>于是 client 又和 server 进行了约定，约定数据格式由两部分组成，报文头、报文体。报文头是固定长度，里面有特殊的前缀标识、报文体的总长度；而报文体，长度是可变的，有多少数据就有多少长度。</p><p>好，我们从固定长度，到分隔符，到定长+变长，梳理了三种 client 与 server 的约定传输数据方式，你也应该发现了，其实这就是<strong>约定数据如何传输的协议格式</strong>，约定是怎样的格式，那就按照怎样的格式进行收发处理。而这种约定数据包格式的方式，<strong>就是我们俗称的“数据帧格式”</strong>。</p><p>那 Dubbo 框架把对象编解码后变成了什么样的帧格式呢？</p><h2>Dubbo 帧格式</h2><p>问题来了，偌大的 Dubbo 源码工程，我们该怎么从源码层面找到底层是如何编解码的呢？</p><p>其实之前我们已经见过了，“<a href=\"https://time.geekbang.org/column/article/615369\">源码框架</a>”中的 Serialize 模块属于哪个层次？“<a href=\"https://time.geekbang.org/column/article/621733\">调用流程</a>”中将对象进行序列化的代码入口在哪里？</p><p>没错，想必你也想到了，我们可以顺着 NettyCodecAdapter 这个类的 encode 方法看源码，应该就可以找到了。</p><p>实践是检验真理的唯一标准，我们打个断点去 Debug 调试一下。启动 ZooKeeper 和提供方，然后 Debug 启动消费方，一会就来到了 encode 方法：</p><p><img src=\"https://static001.geekbang.org/resource/image/74/42/74349480cb7da8c260b0fc5b845d2d42.jpg?wh=1920x533\" alt=\"图片\"></p><p>我们单步调试进去，先经过了 DubboCountCodec 类，然后经过了 ExchangeCodec 类，结果发现了一段惊喜的代码。</p><pre><code class=\"language-java\">///////////////////////////////////////////////////                  \n// org.apache.dubbo.remoting.exchange.codec.ExchangeCodec#encode\n// 交换信息编解码操作，主要是将 Request、Response 对象按照 Dubbo 协议格式编码为字节流\n///////////////////////////////////////////////////\n@Override\npublic void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException {\n    // 如果是需要发送给提供方的对象，那么就调用 encodeRequest 进行编码\n    if (msg instanceof Request) {\n        encodeRequest(channel, buffer, (Request) msg);\n    } \n    // 如果是响应给提供方的对象，那么就调用 encodeResponse 进行编码\n    else if (msg instanceof Response) {\n        encodeResponse(channel, buffer, (Response) msg);\n    } \n    // 如果是其他类型对象的话，那么就调用父类的通用 encode 方法进行编码操作\n    else {\n        super.encode(channel, buffer, msg);\n    }\n}\n</code></pre><p>从这段代码中，确实发现了一段非常有亮点的代码，逻辑也不多，就 3 条分支逻辑，一条是针对请求对象进行编码的分支，一条是针对响应对象进行编码的分支，最后一条是调用了父类的 encode 方法进行编码的分支。</p><p>虽然分支逻辑不多，但是我们从方法名上已经发现了端倪，这不就是即将要对 Request 和 Response 对象进行编码操作么？继续前进，我们进入 encodeRequest 方法看个究竟。</p><pre><code class=\"language-java\">///////////////////////////////////////////////////                  \n// 1、org.apache.dubbo.remoting.exchange.codec.ExchangeCodec#encodeRequest\n// 2、将 Request 对象按照 Dubbo 协议格式编码为字节流\n// 3、重点关注我在代码中描述的 ①②③④⑤⑥ 几个关键位置\n///////////////////////////////////////////////////\n// header length.\nprotected static final int HEADER_LENGTH = 16;\n// magic header.\nprotected static final short MAGIC = (short) 0xdabb;\nprotected static final byte MAGIC_HIGH = Bytes.short2bytes(MAGIC)[0];\nprotected static final byte MAGIC_LOW = Bytes.short2bytes(MAGIC)[1];\n// message flag.\nprotected static final byte FLAG_REQUEST = (byte) 0x80;\nprotected static final byte FLAG_TWOWAY = (byte) 0x40;\nprotected static final byte FLAG_EVENT = (byte) 0x20;\nprotected static final int SERIALIZATION_MASK = 0x1f;\n\n// 将 Request 对象按照 Dubbo 协议格式编码为字节流\nprotected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req) throws IOException {\n    Serialization serialization = getSerialization(channel, req);\n    // header.\n    // ① 针对 header 字节数组赋值一个 0xdabb 魔术值\n    byte[] header = new byte[HEADER_LENGTH];\n    // set magic number.\n    Bytes.short2bytes(MAGIC, header);\n    \n    // set request and serialization flag.\n    // ② 设置序列化方式，序列化方式从 channel 的 url 取出 serialization 对应的参数值，\n    // 默认是 hessian2 方式，\n    // 而 org.apache.dubbo.common.serialize.hessian2.Hessian2Serialization#getContentTypeId 的值为 2\n    // \n    // serialization 属性值，在源码中有如下这些值：\n    // byte HESSIAN2_SERIALIZATION_ID = 2;\n    // byte JAVA_SERIALIZATION_ID = 3;\n    // byte COMPACTED_JAVA_SERIALIZATION_ID = 4;\n    // byte FASTJSON_SERIALIZATION_ID = 6;\n    // byte NATIVE_JAVA_SERIALIZATION_ID = 7;\n    // byte KRYO_SERIALIZATION_ID = 8;\n    // byte FST_SERIALIZATION_ID = 9;\n    // byte NATIVE_HESSIAN_SERIALIZATION_ID = 10;\n    // byte PROTOSTUFF_SERIALIZATION_ID = 12;\n    // byte AVRO_SERIALIZATION_ID = 11;\n    // byte GSON_SERIALIZATION_ID = 16;\n    // byte PROTOBUF_JSON_SERIALIZATION_ID = 21;\n    // byte PROTOBUF_SERIALIZATION_ID = 22;\n    // byte KRYO_SERIALIZATION2_ID = 25;\n    // byte MSGPACK_SERIALIZATION_ID = 27;    \n    header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId());\n    \n    // ③ 设置请求类型，根据 mTwoWay、mEvent 来决定是怎样的请求类型\n    if (req.isTwoWay()) {\n        header[2] |= FLAG_TWOWAY;\n    }\n    if (req.isEvent()) {\n        header[2] |= FLAG_EVENT;\n    }\n    \n    // ④ 设置请求唯一ID；\n    // set request id.\n    Bytes.long2bytes(req.getId(), header, 4);\n    // encode request data.\n    int savedWriteIndex = buffer.writerIndex();\n    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);\n    ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer);\n    \n    // ⑤ 构建一个输出流，根据 mEvent 的值来将 mData 进行序列化转为字节数组\n    if (req.isHeartbeat()) {\n        // heartbeat request data is always null\n        bos.write(CodecSupport.getNullBytesOf(serialization));\n    } else {\n        ObjectOutput out = serialization.serialize(channel.getUrl(), bos);\n        if (req.isEvent()) {\n            encodeEventData(channel, out, req.getData());\n        } else {\n            encodeRequestData(channel, out, req.getData(), req.getVersion());\n        }\n        out.flushBuffer();\n        if (out instanceof Cleanable) {\n            ((Cleanable) out).cleanup();\n        }\n    }\n    bos.flush();\n    bos.close();\n    int len = bos.writtenBytes();\n    checkPayload(channel, len);\n    Bytes.int2bytes(len, header, 12);\n    // write\n    buffer.writerIndex(savedWriteIndex);\n    buffer.writeBytes(header); // write header.\n    \n    // ⑥ 最终将序列化出来的字节数组的长度填充至报文体长度位置\n    buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);\n}\n</code></pre><p>对这个 encodeRequest 方法仔细研读后，恍然大悟，原来 Dubbo 协议帧格式如此简单，正好就是我们协议约定中“定长 + 变长”的实现版本。</p><p>光从代码上不好看出“定长 + 变长”的可视化效果，这里我也根据源码的编写逻辑，总结了下代码所表达的数据帧格式。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/fb/28b10a1005ab622c8865e6693a17f8fb.jpg?wh=1920x733\" alt=\"图片\"></p><p>图中写的 0 ~ 7、8 ~ 15 这些数字表示的是一些 bit 位对应位置，也就是，各个方块占据了多少 bit，除以 8 得到的结果，就是占据了多少 byte（字节）。接下来，我们挨个认识一下每个小方块是什么含义：</p><ul>\n<li>​magic&nbsp;high：魔术高位，占用 8 bit，也就是 1 byte。该值固定为 0xda，是一种标识符。</li>\n<li>magic&nbsp;low：魔术低位，占用 8 bit，也就是 1 byte。该值固定为 0xbb，也是一种标识符。</li>\n</ul><p><strong>魔术低位和魔术高位合并起来就是 0xdabb，代表着 dubbo 数据协议报文的开始</strong>。如果从通信 socket 收到的报文不是以 0xdabb 开始的，可以认为是非法报文。</p><ul>\n<li>request flag and serialization id：请求类型和序列化方式，占用 8 bit，也就是 1 byte。前面 4 bit 是请求类型，后面 4 bit 是序列化方式，合起来用 1 个 byte 来表示。</li>\n<li>response status：响应码，占用 8 bit，也是 1 byte。因为已经明确是响应码了，所以一个请求发送出去的时候，不用填充这个值，响应回来的时候，这里就有值了。</li>\n</ul><p><strong>但是这个响应码，并不是那些真实业务数据功能的响应码，而是 Dubbo 通信层面的错误码</strong>，比如通信响应成功码、消费方超时码、服务方超时码、请求格式错误码等等，都是一些 Dubbo 框架自己易于通信识别错误的码，并非那些真正上层业务功能的错误码。</p><ul>\n<li>request&nbsp;id：请求唯一ID，占用 64 bit，也就是 8 byte。标识请求的唯一性，用来证明你收到的响应，就是你曾经发出去的请求返回来的数据。</li>\n<li>​body&nbsp;length：报文体长度，占用 32 bit，也就是 4 byte。体现真正的业务报文数据到底有多长。</li>\n</ul><p><strong>因为真实的业务数据有大有小，如果报文里不告知业务数据的长度，服务方就不知道要读取多长的字节</strong>，所以，就需要知道业务报文数据到底有多长。当客户端发送数据时，把要发送的业务数据报文计算一下长度后，放到这个位置，服务方看到该长度后，就会读取指定长度的字节，读完就结束，也就收到了一个完整的报文数据。</p><ul>\n<li>body&nbsp;content：报文体数据，占用的 bit 未知，占用的 byte 字节个数也未知。这里是我们真正业务数据的内容，至于真正的业务数据的长度有多长，完全由报文体长度决定。</li>\n</ul><p>了解了 Dubbo 的协议帧格式，是不是并没有那么难，我们只需要按照上面的帧格式一步步构建出这样的字节数组，然后利用 socket，write 出去就可以了。服务方在接收数据的时候，也是一样，严格按照报文格式进行解析，不是 oxdabb 开头的就直接丢弃，是的话就继续往后读取，按照数据帧格式，直到读完整个报文为止。</p><p>好，到这里，我们详读了 encodeRequest 源码，反推出了 Dubbo 的协议帧格式，另外一个 encodeResponse 方法想必对你来说是小菜一碟了，课后你可以自己研究一下。</p><h2>协议编解码的应用</h2><p>Dubbo 协议的数据帧格式，是一个非常典型的协议格式案例，你以后在实际开发中，如果需要自定义数据传输报文格式，也可以参照 Dubbo 的协议数据格式，稍加改造一番，然后自行通过代码编码和解码就可以了。</p><p>除了 Dubbo 协议有这样的协议编解码的操作，其实市面上还有许许多多的应用案例，我们看 3 个常见的。</p><p>第一，HTTP 协议，是由请求行 + 请求头 + 请求体构成的，比如我们熟知的 Tomcat 容器就有这样一个 Http11Processor 的类，按照 HTTP 协议规范，来解析 HTTP 请求报文。</p><p>第二，RESP 协议，Redis 通信使用的协议，通过首字节的字符，来区分不同数据类型的序列化协议，甚至你都可以直接手写 Socket，把一段事先准备好的 RESP 报文调用 write 方法，就可以对 Redis 进行操作了。</p><p>第三，WebSocket 协议，是 HTML5 的一种新型协议，实现了浏览器与服务器的全双工通信，本质还是基于 HTTP 协议的基础之上，借助 HTTP 协议来完成握手工作的。</p><h2>总结</h2><p>今天，我们从已经学过的知识点中挑出一个从未深究的细节，一个接口调用时“所创建的请求对象”是如何编码发到网络中的？</p><p>针对这个问题，我们梳理了帧格式的概念，借助 client 向 server 发送数据的简单模型案例，引出了 client 与 server 约定了三种类型的协议格式，分别是固定长度、分隔符、定长+变长。</p><p>然后回忆所学的知识点，找到了 Dubbo 框架进行编码的入口，通过 Debug 模式步步深入，阅读 encodeRequest 方法后，挖掘出了把对象按照 Dubbo 协议进行编码的核心代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/fe/145dbc98e8d990f2a53a8e00296b92fe.png?wh=1250x391\" alt=\"图片\"></p><p>类似协议编解码的常见应用案例比如HTTP 协议、RESP 协议、WebSocket 协议等。</p><h3>思考题</h3><p>留个作业给你，我们已经分析了 encodeRequest 方法，你尝试自己研究一下 encodeResponse 方法的逻辑，总结一下与 encodeRequest 的异同。</p><p>期待看到你的思考，如果觉得今天的内容对你有帮助，也欢迎分享给身边的朋友一起讨论。我们下一讲见。</p><h3>21 思考题参考</h3><p>上一期留了个作业，研究下消费方进行泛化调用时会经历哪些流程，泛化调用的底层是如何实现的。</p><h4>1.泛化调用流程</h4><p>想要解答第一个问题，我们得首先有拥有一套消费方泛化调用的代码，这里我已经给你准备好了。</p><pre><code class=\"language-java\">///////////////////////////////////////////////////                  \n// org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter.InternalEncoder#encode\n// 将对象按照一定的序列化方式发送出去\n///////////////////////////////////////////////////\n@Component\npublic class GenericDemoService {\n    public String invokeDemo() {\n        return stringStyleRpcInvoke();\n    }\n    \n    public static String stringStyleRpcInvoke() {\n        ReferenceConfig&lt;GenericService&gt; referenceConfig =\n                buildReferenceConfig(\"com.hmilyylimh.cloud.facade.demo.DemoFacade\");\n        referenceConfig.setGeneric(\"true\");\n        // 获取泛化引用对象\n        GenericService genericService = referenceConfig.get();\n        // 返回调用\n        Object rpcResult = genericService.$invoke(\n                \"sayHello\",\n                new String[]{\"java.lang.String\"},\n                new Object[]{\"Generic Demo\"});\n        // 返回结果\n        return (String) rpcResult;\n    }\n    \n    private static ReferenceConfig&lt;GenericService&gt; buildReferenceConfig(String interfaceName) {\n        DubboBootstrap dubboBootstrap = DubboBootstrap.getInstance();\n        // 设置应用服务名称\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(dubboBootstrap.getApplicationModel().getApplicationName());\n        // 设置注册中心的地址\n        String address = dubboBootstrap.getConfigManager().getRegistries().iterator().next().getAddress();\n        RegistryConfig registryConfig = new RegistryConfig(address);\n        ReferenceConfig&lt;GenericService&gt; referenceConfig = new ReferenceConfig&lt;&gt;();\n        referenceConfig.setApplication(applicationConfig);\n        referenceConfig.setRegistry(registryConfig);\n        referenceConfig.setInterface(interfaceName);\n        return referenceConfig;\n    }\n}\n</code></pre><p>代码其实非常简单，通过创建 ReferenceConfig 得到泛化引用对象，也就是泛化服务对象，然后调用泛化服务对象的 $invoke 方法，实现远程调用，并最终泛化调用的结果。</p><p>有了消费方的泛化调用代码后，学过了“<a href=\"https://time.geekbang.org/column/article/621733\">调用流程</a>”巧妙打断点的方式，想必你已经想到了，可以直接在 NettyClient 的 send 方法打个断点，然后启动提供方，Debug 启动消费方，静候断点的到来。</p><p><img src=\"https://static001.geekbang.org/resource/image/00/eb/00fe1e290b0fe48fd0c60dbe1f77daeb.png?wh=1470x826\" alt=\"图片\"></p><p>我们观察左侧的调用堆栈，很明显就找到了泛化实现类的过滤器，再细看其他环节的调用，可以发现，泛化调用和普通调用的区别就在于，泛化调用会经过一个泛化实现类过滤器（GenericImplFilter），其他环节的流程基本上没啥异样。</p><h4>2.泛化调用内幕</h4><p>既然要弄懂泛化调用的核心内幕逻辑，那就自然少不了去拜读一下源码的细节。</p><pre><code class=\"language-java\">///////////////////////////////////////////////////                  \n// org.apache.dubbo.rpc.filter.GenericImplFilter#invoke\n// 泛化调用的核心 invoke 处理逻辑\n///////////////////////////////////////////////////\n@Override\npublic Result invoke(Invoker&lt;?&gt; invoker, Invocation invocation) throws RpcException {\n    // 获取 url 上的 generic 属性值，目前得到的值是 true\n    String generic = invoker.getUrl().getParameter(GENERIC_KEY);\n    // calling a generic impl service\n    // 1、如果是泛化调用所认可的标识（ProtocolUtils.isGeneric(generic)）\n    // 2、且调用下游接口的方法名不是 \"$invoke\"\n    // 3、且调用下游接口的方法名不是 \"$invokeAsync\"\n    // 4、且 invocation 对象的类型还必须属于 RpcInvocation 类型\n    // 如果刚刚的 4 点都符合的话，那么就会进入 isCallingGenericImpl 方法逻辑\n    if (isCallingGenericImpl(generic, invocation)) {\n        // 将入参的 invocation 重新拷贝一份新的对象为 invocation2\n        RpcInvocation invocation2 = new RpcInvocation(invocation);\n        invocation2.put(\"GENERIC_IMPL\", true);\n        String methodName = invocation2.getMethodName();\n        Class&lt;?&gt;[] parameterTypes = invocation2.getParameterTypes();\n        Object[] arguments = invocation2.getArguments();\n        String[] types = new String[parameterTypes.length];\n        for (int i = 0; i &lt; parameterTypes.length; i++) {\n            types[i] = ReflectUtils.getName(parameterTypes[i]);\n        }\n        Object[] args;\n        // 如果 generic = bean，则调用 JavaBeanSerializeUtil 工具类进行序列化操作\n        if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n            args = new Object[arguments.length];\n            for (int i = 0; i &lt; arguments.length; i++) {\n                args[i] = JavaBeanSerializeUtil.serialize(arguments[i], JavaBeanAccessor.METHOD);\n            }\n        } \n        // 如果 generic != bean 的话，则调用默认的序列化操作\n        else {\n            args = PojoUtils.generalize(arguments);\n        }\n        // 然后把一些调用所需的一些参数都全部放到这个新的 invocation2 对象中\n        if (RpcUtils.isReturnTypeFuture(invocation)) {\n            invocation2.setMethodName(\"$invokeAsync\");\n        } else {\n            invocation2.setMethodName(\"$invoke\");\n        }\n        invocation2.setParameterTypes(new Class&lt;?&gt;[]{String.class, String[].class, Object[].class});\n        invocation2.setParameterTypesDesc(\"Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;\");\n        invocation2.setArguments(new Object[]{methodName, types, args});\n        // 最终传递给下一步进行后续调用操作\n        return invoker.invoke(invocation2);\n    }\n    \n    // making a generic call to a normal service\n    // 1、如果调用下游接口的方法名是 \"$invoke\" 或 \"$invokeAsync\"\n    // 2、如果 invocation 的入参数据不为空，且入参的个数恰好是 3 个\n    // 3、如果是泛化调用所认可的标识（ProtocolUtils.isGeneric(generic)）\n    // 如果刚刚的 3 点都符合的话，那么就会进入 isMakingGenericCall 方法逻辑\n    else if (isMakingGenericCall(generic, invocation)) {\n        Object[] args = (Object[]) invocation.getArguments()[2];\n        // 如果 generic = nativejava\n        if (ProtocolUtils.isJavaGenericSerialization(generic)) {\n            for (Object arg : args) {\n                if (byte[].class != arg.getClass()) {\n                    error(generic, byte[].class.getName(), arg.getClass().getName());\n                }\n            }\n        } \n        // 如果 generic = bean\n        else if (ProtocolUtils.isBeanGenericSerialization(generic)) {\n            for (Object arg : args) {\n                if (!(arg instanceof JavaBeanDescriptor)) {\n                    error(generic, JavaBeanDescriptor.class.getName(), arg.getClass().getName());\n                }\n            }\n        }\n        invocation.setAttachment(\n                \"generic\", invoker.getUrl().getParameter(\"generic\"));\n    }\n    return invoker.invoke(invocation);\n}\n                  ↓\n///////////////////////////////////////////////////                  \n// org.apache.dubbo.rpc.filter.GenericImplFilter#isCallingGenericImpl\n// 1、如果是泛化调用所认可的标识（ProtocolUtils.isGeneric(generic)）\n// 2、且调用下游接口的方法名不是 \"$invoke\"\n// 3、且调用下游接口的方法名不是 \"$invokeAsync\"\n// 4、且 invocation 对象的类型还必须属于 RpcInvocation 类型\n///////////////////////////////////////////////////                  \nprivate boolean isCallingGenericImpl(String generic, Invocation invocation) {\n    return ProtocolUtils.isGeneric(generic)\n            &amp;&amp; (!\"$invoke\".equals(invocation.getMethodName()) &amp;&amp; !\"$invokeAsync\".equals(invocation.getMethodName()))\n            &amp;&amp; invocation instanceof RpcInvocation;\n}\n                  ↓\n///////////////////////////////////////////////////                  \n// org.apache.dubbo.rpc.filter.GenericImplFilter#isMakingGenericCall\n// 1、如果调用下游接口的方法名是 \"$invoke\" 或 \"$invokeAsync\"\n// 2、如果 invocation 的入参数据不为空，且入参的个数恰好是 3 个\n// 3、如果是泛化调用所认可的标识（ProtocolUtils.isGeneric(generic)）\n///////////////////////////////////////////////////                    \nprivate boolean isMakingGenericCall(String generic, Invocation invocation) {\n    return (invocation.getMethodName().equals(\"$invoke\") || invocation.getMethodName().equals(\"$invokeAsync\"))\n            &amp;&amp; invocation.getArguments() != null\n            &amp;&amp; invocation.getArguments().length == 3\n            &amp;&amp; ProtocolUtils.isGeneric(generic);\n}\n                  ↓\n///////////////////////////////////////////////////                  \n// org.apache.dubbo.rpc.support.ProtocolUtils#isGeneric\n// generic 的属性值可以有以下 6 种值：\n// 1、true\n// 2、nativejava\n// 3、bean\n// 4、protobuf-json\n// 5、gson\n// 6、raw.return\n///////////////////////////////////////////////////                    \npublic static boolean isGeneric(String generic) {\n    return StringUtils.isNotEmpty(generic)\n            &amp;&amp; (\"true\".equalsIgnoreCase(generic)  /* Normal generalization cal */\n            || \"nativejava\".equalsIgnoreCase(generic) /* Streaming generalization call supporting jdk serialization */\n            || \"bean\".equalsIgnoreCase(generic)\n            || \"protobuf-json\".equalsIgnoreCase(generic)\n            || \"gson\".equalsIgnoreCase(generic)\n            || \"raw.return\".equalsIgnoreCase(generic));\n}\n</code></pre><p>翻看消费方泛化调用的源码，由于我们调用的是下游 sayHello 方法，但是通过泛化形式调用的话，从 invocation 中获取的 methodName 却是 $invoke，自然跳过了 isCallingGenericImpl 逻辑的判断，然后进入到 isMakingGenericCall 的分支逻辑中，只是赋值了一个属性就完事了，所以，我们可以得知设置 generic = true 进行泛化调用是最简单的泛化调用形式。</p><p>当然，我们从源码中了解了以前不知道的一些细节逻辑。</p><ol>\n<li>设置 generic 属性的值时，有六种设置方法，分别为 true、nativejava、bean、protobuf-json、gson、raw.return。</li>\n<li>从 isCallingGenericImpl 分支逻辑中，我们发现进行普通的远程调用时，也可以在 @DubboReference 注解中加上 generic 属性值。</li>\n</ol><p>总的来说，消费方的泛化服务过滤器，也确实没有干什么非常特别的事情，关键就是将 generic 属性值传到了提供方那边，至于提供方拿到 generic 的不同属性值，会按照怎样的处理逻辑，有兴趣的话你可以自行研究 GenericFilter，这个类是专门处理提供方接收泛化请求的泛化过滤器。</p>","neighbors":{"left":{"article_title":"21｜调用流程：消费方的调用流程体系，你知道多少？","id":621733},"right":{"article_title":"23｜集群扩展：发送请求遇到服务不可用，怎么办？","id":622440}},"comments":[{"had_liked":false,"id":370801,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"北京","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1679292210,"is_pvip":false,"replies":[{"id":135816,"content":"你好，张三丰：\n1、这个20字节的消息会像100字节的消息那样包括请求头吗？\n答：不会。\n2、第一次处理消息时肯定是先解析请求头再解析请求体，第二次也是这样解析吗？\n答：第二次直接 read 后面的 20 字节的。\n3、服务端怎么确认第二次收到的消息是第一次消息的接续？\n答：简单点理解服务端也是一次连接的读取，端到端的Socket连接读取，读取的时候就可以计数直到读取到整个包。短链接socket包读完即可，长连接计数读数据包。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1680791143,"ip_address":"广东","comment_id":370801,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，这里我有个疑问，在定长+变长这个协议格式传输的时候，如果服务端第一次接收的不完整，比如120字节的消息，第一次接收100字节，第二次接收20字节，对于服务端来说，如果第二次接收20字节的时候，这个20字节的消息会像100字节的消息那样包括请求头吗？ 比如请求头+100字节请求体、请求头+20字节请求体，如果包括请求头，那么第一次处理消息和第二次处理消息在逻辑上有什么不同？第一次处理消息时肯定是先解析请求头再解析请求体，第二次也是这样解析吗？服务端怎么确认第二次收到的消息是第一次消息的接续？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612584,"discussion_content":"你好，张三丰：\n1、这个20字节的消息会像100字节的消息那样包括请求头吗？\n答：不会。\n2、第一次处理消息时肯定是先解析请求头再解析请求体，第二次也是这样解析吗？\n答：第二次直接 read 后面的 20 字节的。\n3、服务端怎么确认第二次收到的消息是第一次消息的接续？\n答：简单点理解服务端也是一次连接的读取，端到端的Socket连接读取，读取的时候就可以计数直到读取到整个包。短链接socket包读完即可，长连接计数读数据包。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680791143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3091525,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/2c/45/1573b158.jpg","nickname":"不萌只撩我","note":"","ucode":"5C7190CAE4A982","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647069,"discussion_content":"我理解的这个过程是找到每个数据报文的起始位置（魔数），然后知道报文的len，就到缓冲区中读取len长的数据，解决粘包问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1719396927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1322463,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/df/4949b250.jpg","nickname":"Six Days","note":"","ucode":"8587F2EEFFFD11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641330,"discussion_content":"老师你好，请问长链接是如何处理计数读数据包的，服务端处理的数据包的时候会有并发问题吗？比如说处理第二个请求20字节的时候，服务端接收到的包时其他请求的包，并不是第一个数据包的续包，会有这种情况嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712504477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369873,"user_name":"Lum","can_delete":false,"product_type":"c1","uid":3231352,"ip_address":"北京","ucode":"7EF828425E685A","user_header":"https://static001.geekbang.org/account/avatar/00/31/4e/78/ee4e12cc.jpg","comment_is_top":false,"comment_ctime":1678083323,"is_pvip":false,"replies":[{"id":134831,"content":"你好，Lum：服务端接收并返回，路子其实是一样的，NettySever 里面可以设置好断点收数据，收到数据后会调用服务端自身的Dubbo接口，接口返回数据后一路断点下去，最终还是会调用 Netty 的类 write 出去，而write 出去势必会进行编码处理，你可以试着按照我刚说的几个节点，带着条件断点看看，也许你很快就明白了～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1678115293,"ip_address":"广东","comment_id":369873,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"希望老师出一章消费端发送请求后，服务端是如何接收消息并返回的章节~","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607772,"discussion_content":"你好，Lum：服务端接收并返回，路子其实是一样的，NettySever 里面可以设置好断点收数据，收到数据后会调用服务端自身的Dubbo接口，接口返回数据后一路断点下去，最终还是会调用 Netty 的类 write 出去，而write 出去势必会进行编码处理，你可以试着按照我刚说的几个节点，带着条件断点看看，也许你很快就明白了～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678115293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3231352,"avatar":"https://static001.geekbang.org/account/avatar/00/31/4e/78/ee4e12cc.jpg","nickname":"Lum","note":"","ucode":"7EF828425E685A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":638892,"discussion_content":"去年做了一段时间的通信层编程，现在再看这里对dubbo恍然大悟了。等温故知新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1710072121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":607772,"ip_address":"山东","group_id":0},"score":638892,"extra":""}]}]},{"had_liked":false,"id":368478,"user_name":"BraveSky","can_delete":false,"product_type":"c1","uid":1297713,"ip_address":"上海","ucode":"1B7F85FBCE020B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ah6TsnTicIec63cKgJxick0AdGk6Xo9njt1DDdPicxZ2HN7DmSWckicA3FzTSLwWmacEVUA3ApTO7ptuicAR9xFjIGw/132","comment_is_top":false,"comment_ctime":1676373686,"is_pvip":false,"replies":[{"id":134294,"content":"你好，BraveSky：不好意思，你问的这个问题，我并没有在生产上切实使用过 kryo 进行序列化处理。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1676626844,"ip_address":"广东","comment_id":368478,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师你好，请教个dubbo序列化问题，目前线上服务用的kryo 序列化，kryo序列化对象dto 加字段，调用方反序列化就会报错，重新部署服务才行，这个有什么好的解决方案吗？如果换序列化方式的话，如何不影响现有服务情况下，平滑切换？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605442,"discussion_content":"你好，BraveSky：不好意思，你问的这个问题，我并没有在生产上切实使用过 kryo 进行序列化处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676626844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389422,"user_name":"Six Days","can_delete":false,"product_type":"c1","uid":1322463,"ip_address":"广东","ucode":"8587F2EEFFFD11","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/df/4949b250.jpg","comment_is_top":false,"comment_ctime":1712504716,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"本章能稍微讲下服务端如何接收处理数据包就更好了","like_count":0}]}