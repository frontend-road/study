{"id":73786,"title":"不定期福利第三期 | 测一测你的算法阶段学习成果","content":"<p>专栏最重要的基础篇马上就要讲完了，不知道你掌握了多少？我从前面的文章中挑选了一些案例，稍加修改，组成了一套测试题。</p><p>你先不要着急看答案，自己先想一想怎么解决，测一测自己对之前的知识掌握的程度。如果有哪里卡壳或者不怎么清楚的，可以回过头再复习一下。</p><p>正所谓温故知新，这种通过实际问题查缺补漏的学习方法，非常利于你巩固前面讲的知识点，你可要好好珍惜这次机会哦！</p><h2>实战测试题（一）</h2><p>假设猎聘网有10万名猎头顾问，每个猎头顾问都可以通过做任务（比如发布职位），来积累积分，然后通过积分来下载简历。<strong>假设你是猎聘网的一名工程师，如何在内存中存储这10万个猎头ID和积分信息，让它能够支持这样几个操作：</strong></p><ul>\n<li>\n<p>根据猎头的ID快速查找、删除、更新这个猎头的积分信息；</p>\n</li>\n<li>\n<p>查找积分在某个区间的猎头ID列表；</p>\n</li>\n<li>\n<p>查询积分从小到大排在第x位的猎头ID信息；</p>\n</li>\n<li>\n<p>查找按照积分从小到大排名在第x位到第y位之间的猎头ID列表。</p>\n</li>\n</ul><h3>相关章节</h3><p><a href=\"https://time.geekbang.org/column/article/42896\">17 | 跳表：为什么Redis一定要用跳表来实现有序集合？</a></p><p><a href=\"https://time.geekbang.org/column/article/64858\">20 | 散列表（下）：为什么散列表和链表经常会一起使用？</a></p><p><a href=\"https://time.geekbang.org/column/article/68638\">25 | 红黑树：为什么工程中都用红黑树这种二叉树？</a></p><h3>题目解析</h3><p>这个问题既要通过ID来查询，又要通过积分来查询，所以，对于猎头这样一个对象，我们需要将其组织成两种数据结构，才能支持这两类操作。</p><!-- [[[read_end]]] --><p>我们按照ID，将猎头信息组织成散列表。这样，就可以根据ID信息快速地查找、删除、更新猎头的信息。我们按照积分，将猎头信息组织成跳表这种数据结构，按照积分来查找猎头信息，就非常高效，时间复杂度是O(logn)。</p><p>我刚刚讲的是针对第一个、第二个操作的解决方案。第三个、第四个操作是类似的，按照排名来查询，这两个操作该如何实现呢？</p><p>我们可以对刚刚的跳表进行改造，每个索引结点中加入一个span字段，记录这个索引结点到下一个索引结点的包含的链表结点的个数。这样就可以利用跳表索引，快速计算出排名在某一位的猎头或者排名在某个区间的猎头列表。</p><p>实际上，这些就是Redis中有序集合这种数据类型的实现原理。在开发中，我们并不需要从零开始代码实现一个散列表和跳表，我们可以直接利用Redis的有序集合来完成。</p><h2>实战测试题（二）</h2><p>电商交易系统中，订单数据一般都会很大，我们一般都分库分表来存储。假设我们分了10个库并存储在不同的机器上，在不引入复杂的分库分表中间件的情况下，我们希望开发一个小的功能，能够快速地查询金额最大的前K个订单（K是输入参数，可能是1、10、1000、10000，假设最大不会超过10万）。<strong>如果你是这个功能的设计开发负责人，你会如何设计一个比较详细的、可以落地执行的设计方案呢？</strong></p><p>为了方便你设计，我先交代一些必要的背景，在设计过程中，如果有其他需要明确的背景，你可以自行假设。</p><ul>\n<li>\n<p>数据库中，订单表的金额字段上建有索引，我们可以通过select order by limit语句来获取数据库中的数据；</p>\n</li>\n<li>\n<p>我们的机器的可用内存有限，比如只有几百M剩余可用内存。希望你的设计尽量节省内存，不要发生Out of Memory Error。</p>\n</li>\n</ul><h3>相关章节</h3><p><a href=\"https://time.geekbang.org/column/article/41913\">12 | 排序（下）：如何用快排思想在O(n)内查找第K大元素？</a></p><p><a href=\"https://time.geekbang.org/column/article/69913\">28 | 堆和堆排序：为什么说堆排序没有快速排序快？</a></p><p><a href=\"https://time.geekbang.org/column/article/70187\">29 | 堆的应用：如何快速获取到Top 10最热门的搜索关键词？</a></p><h3>题目解析</h3><p>解决这个题目的基本思路我想你应该能想到，就是借助归并排序中的合并函数，这个我们在排序（下）以及堆的应用那一节中讲过。</p><p>我们从每个数据库中，通过select order by limit语句，各取局部金额最大的订单，把取出来的10个订单放到优先级队列中，取出最大值（也就是大顶堆堆顶数据），就是全局金额最大的订单。然后再从这个全局金额最大订单对应的数据库中，取出下一条订单（按照订单金额从大到小排列的），然后放到优先级队列中。一直重复上面的过程，直到找到金额前K（K是用户输入的）大订单。</p><p>从算法的角度看起来，这个方案非常完美，但是，从实战的角度来说，这个方案并不高效，甚至很低效。因为我们忽略了，数据库读取数据的性能才是这个问题的性能瓶颈。所以，我们要尽量减少SQL请求，每次多取一些数据出来，那一次性取出多少才合适呢？这就比较灵活、比较有技巧了。一次性取太多，会导致数据量太大，SQL执行很慢，还有可能触发超时，而且，我们题目中也说了，内存有限，太多的数据加载到内存中，还有可能导致Out of Memory Error。</p><p>所以，一次性不能取太多数据，也不能取太少数据，到底是多少，还要根据实际的硬件环境做benchmark测试去找最合适的。</p><h2>实战测试题（三）</h2><p>我们知道，CPU资源是有限的，任务的处理速度与线程个数并不是线性正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点和硬件环境，来事先设置的。</p><p><strong>当我们向固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是怎么实现的呢？</strong></p><h3>相关章节</h3><p><a href=\"https://time.geekbang.org/column/article/41330\">09 | 队列：队列在线程池等有限资源池中的应用</a></p><h3>题目解析</h3><p>这个问题的答案涉及队列这种数据结构。队列可以应用在任何有限资源池中，用于排队请求，比如数据库连接池等。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。</p><p>这个问题的具体答案，在队列那一节我已经讲得非常详细了，你可以回去看看，这里我就不赘述了。</p><h2>实战测试题（四）</h2><p>通过IP地址来查找IP归属地的功能，不知道你有没有用过？没用过也没关系，你现在可以打开百度，在搜索框里随便输一个IP地址，就会看到它的归属地。</p><p>这个功能并不复杂，它是通过维护一个很大的IP地址库来实现的。地址库中包括IP地址范围和归属地的对应关系。比如，当我们想要查询202.102.133.13这个IP地址的归属地时，我们就在地址库中搜索，发现这个IP地址落在[202.102.133.0, 202.102.133.255]这个地址范围内，那我们就可以将这个IP地址范围对应的归属地“山东东营市”显示给用户了。</p><pre><code>[202.102.133.0, 202.102.133.255]  山东东营市 \n[202.102.135.0, 202.102.136.255]  山东烟台 \n[202.102.156.34, 202.102.157.255] 山东青岛 \n[202.102.48.0, 202.102.48.255] 江苏宿迁 \n[202.102.49.15, 202.102.51.251] 江苏泰州 \n[202.102.56.0, 202.102.56.255] 江苏连云港\n</code></pre><p>在庞大的地址库中逐一比对IP地址所在的区间，是非常耗时的。<strong>假设在内存中有12万条这样的IP区间与归属地的对应关系，如何快速定位出一个IP地址的归属地呢？</strong></p><h3>相关章节</h3><p><a href=\"https://time.geekbang.org/column/article/42520\">15 | 二分查找（上）：如何用最省内存的方式实现快速查找功能？</a></p><p><a href=\"https://time.geekbang.org/column/article/42733\">16 | 二分查找（下）：如何快速定位IP对应的省份地址？</a></p><h3>题目解析</h3><p>这个问题可以用二分查找来解决，不过，普通的二分查找是不行的，我们需要用到二分查找的变形算法，查找最后一个小于等于某个给定值的数据。不过，二分查找最难的不是原理，而是实现。要实现一个二分查找的变形算法，并且实现的代码没有bug，可不是一件容易的事情，不信你自己写写试试。</p><p>关于这个问题的解答以及写出bug free的二分查找代码的技巧，我们在二分查找（下）那一节有非常详细的讲解，你可以回去看看，我这里就不赘述了。</p><h2>实战测试题（五）</h2><p>假设我们现在希望设计一个简单的海量图片存储系统，最大预期能够存储1亿张图片，并且希望这个海量图片存储系统具有下面这样几个功能：</p><ul>\n<li>\n<p>存储一张图片及其它的元信息，主要的元信息有：图片名称以及一组tag信息。比如图片名称叫玫瑰花，tag信息是{红色，花，情人节}；</p>\n</li>\n<li>\n<p>根据关键词搜索一张图片，比如关键词是“情人节 花”“玫瑰花”；</p>\n</li>\n<li>\n<p>避免重复插入相同的图片。这里，我们不能单纯地用图片的元信息，来比对是否是同一张图片，因为有可能存在名称相同但图片内容不同，或者名称不同图片内容相同的情况。</p>\n</li>\n</ul><p>我们希望自主开发一个简单的系统，不希望借助和维护过于复杂的三方系统，比如数据库（MySQL、Redis等）、分布式存储系统（GFS、Bigtable等），并且我们单台机器的性能有限，比如硬盘只有1TB，内存只有2GB，<strong>如何设计一个符合我们上面要求，操作高效，且使用机器资源最少的存储系统呢？</strong></p><h3>相关章节</h3><p><a href=\"https://time.geekbang.org/column/article/65312\">21 | 哈希算法（上）：如何防止数据库中的用户信息被脱库？</a></p><p><a href=\"https://time.geekbang.org/column/article/67388\">22 | 哈希算法（下）：哈希算法在分布式系统中有哪些应用？</a></p><h3>题目解析</h3><p>这个问题可以分成两部分，第一部分是根据元信息的搜索功能，第二部分是图片判重。</p><p>第一部分，我们可以借助搜索引擎中的倒排索引结构。关于倒排索引我会在实战篇详细讲解，我这里先简要说下。</p><p>如题目中所说，一个图片会对应一组元信息，比如玫瑰花对应{红色，花，情人节}，牡丹花对应{白色，花}，我们可以将这种图片与元信息之间的关系，倒置过来建立索引。“花”这个关键词对应{玫瑰花，牡丹花}，“红色”对应{玫瑰花}，“白色”对应{牡丹花}，“情人节”对应{玫瑰花}。</p><p>当我们搜索“情人节 花”的时候，我们拿两个搜索关键词分别在倒排索引中查找，“花”查找到了{玫瑰花，牡丹花}，“情人节”查找到了{玫瑰花}，两个关键词对应的结果取交集，就是最终的结果了。</p><p>第二部分关于图片判重，我们要基于图片本身来判重，所以可以用哈希算法，对图片内容取哈希值。我们对哈希值建立散列表，这样就可以通过哈希值以及散列表，快速判断图片是否存在。</p><p>我这里只说说我的思路，这个问题中还有详细的内存和硬盘的限制。要想给出更加详细的设计思路，还需要根据这些限制，给出一个估算。详细的解答，我都放在哈希算法（下）那一节里了，你可以自己回去看。</p><h2>实战测试题（六）</h2><p>我们知道，散列表的查询效率并不能笼统地说成是O(1)。它跟散列函数、装载因子、散列冲突等都有关系。如果散列函数设计得不好，或者装载因子过高，都可能导致散列冲突发生的概率升高，查询效率下降。</p><p>在极端情况下，有些恶意的攻击者，还有可能通过精心构造的数据，使得所有的数据经过散列函数之后，都散列到同一个槽里。如果我们使用的是基于链表的冲突解决方法，那这个时候，散列表就会退化为链表，查询的时间复杂度就从O(1)急剧退化为O(n)。</p><p>如果散列表中有10万个数据，退化后的散列表查询的效率就下降了10万倍。更直观点说，如果之前运行100次查询只需要0.1秒，那现在就需要1万秒。这样就有可能因为查询操作消耗大量CPU或者线程资源，导致系统无法响应其他请求，从而达到拒绝服务攻击（DoS）的目的。这也就是散列表碰撞攻击的基本原理。</p><p><strong>如何设计一个可以应对各种异常情况的工业级散列表，来避免在散列冲突的情况下，散列表性能的急剧下降，并且能抵抗散列碰撞攻击？</strong></p><h3>相关章节</h3><p><a href=\"https://time.geekbang.org/column/article/64233\">18 | 散列表（上）：Word文档中的单词拼写检查功能是如何实现的？</a></p><p><a href=\"https://time.geekbang.org/column/article/64586\">19 | 散列表（中）：如何打造一个工业级水平的散列表？</a></p><h3>题目解析</h3><p>我经常把这道题拿来作为面试题考察候选人。散列表可以说是我们最常用的一种数据结构了，编程语言中很多数据类型，都是用散列表来实现的。尽管很多人能对散列表都知道一二，知道有几种散列表冲突解决方案，知道散列表操作的时间复杂度，但是理论跟实践还是有一定距离的。光知道这些基础的理论并不足以开发一个工业级的散列表。</p><p>所以，我在散列表（中）那一节中详细给你展示了一个工业级的散列表要处理哪些问题，以及如何处理的，也就是这个问题的详细答案。</p><hr><p>这六道题你回答得怎么样呢？或许你还无法100%回答正确，没关系。其实只要你看了解析之后，有比较深的印象，能立马想到哪节课里讲过，这已经说明你掌握得不错了。毕竟想要完全掌握我讲的全部内容还是需要时间沉淀的。对于这门课的学习，你一定不要心急，慢慢来。只要方向对了就都对了，剩下就交给时间和努力吧！</p><p>通过这套题，你对自己的学习状况应该有了一个了解。从专栏开始到现在，三个月过去了，我们的内容也更新了大半。<strong>你在专栏开始的时候设定的目标是什么？现在实施得如何了？<strong>你可以在留言区给这三个月的学习做个</strong><span class=\"orange\">阶段性学习复盘</span></strong>。重新整理，继续出发！</p>","neighbors":{"left":{"article_title":"不定期福利第二期 | 王争：羁绊前行的，不是肆虐的狂风，而是内心的迷茫","id":69607},"right":{"article_title":"不定期福利第四期 | 刘超：我是怎么学习《数据结构与算法之美》的？","id":75197}},"comments":[{"had_liked":false,"id":52356,"user_name":"vuuihc","can_delete":false,"product_type":"c1","uid":1083741,"ip_address":"","ucode":"A1A26C842DDF8F","user_header":"https://static001.geekbang.org/account/avatar/00/10/89/5d/a607659a.jpg","comment_is_top":false,"comment_ctime":1545366812,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"250653469980","product_id":100017301,"comment_content":"老师是高手，把这么多其他人甚至课本上讲的蹩脚难懂的知识，娓娓道来，深入浅出。<br>买了这门课一开始没怎么看，最近两天有空就看，觉得是一种享受！","like_count":59},{"had_liked":false,"id":52294,"user_name":"陈阿票","can_delete":false,"product_type":"c1","uid":1239984,"ip_address":"","ucode":"4781AE97748533","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/b0/2af13c30.jpg","comment_is_top":false,"comment_ctime":1545359564,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"190523920588","product_id":100017301,"comment_content":"基本上一下子都知道用什么数据结构和算法去解决，但是实际代码我肯定写不出来，心里总有一种纸上谈兵的感觉。","like_count":45,"discussions":[{"author":{"id":1311458,"avatar":"https://static001.geekbang.org/account/avatar/00/14/02/e2/f646601b.jpg","nickname":"爱烤火的鱼","note":"","ucode":"A12B4551D3B086","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50869,"discussion_content":"很认同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573781080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52663,"user_name":"alic","can_delete":false,"product_type":"c1","uid":1240077,"ip_address":"","ucode":"47E9D22030CA01","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/0d/43d46889.jpg","comment_is_top":false,"comment_ctime":1545469381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65969978821","product_id":100017301,"comment_content":"这门课程以后也会反复看的，希望老师也不要因为掉队人多了就松懈了，加油。","like_count":16},{"had_liked":false,"id":53769,"user_name":"一川","can_delete":false,"product_type":"c1","uid":1125790,"ip_address":"","ucode":"0E34B99FD1D42E","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/9e/f41bee94.jpg","comment_is_top":false,"comment_ctime":1545721900,"is_pvip":false,"replies":[{"id":"19678","content":"哈哈哈 过奖了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545829450,"ip_address":"","comment_id":53769,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40200427564","product_id":100017301,"comment_content":"学习的老师的这门课程，总有种相见恨晚的感觉，真正体悟到了算法之美。举重若轻，方为大师，老师真可谓大师。","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434235,"discussion_content":"哈哈哈 过奖了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545829450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64173,"user_name":"渔人","can_delete":false,"product_type":"c1","uid":1122650,"ip_address":"","ucode":"1A9C6AD6797AED","user_header":"","comment_is_top":false,"comment_ctime":1548685833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31613456905","product_id":100017301,"comment_content":"第二题，前K大的订单，您的描述有些简略，不容易理解，我重复描述一下，您看对不对哈。 10个库，取前K大的订单， 第一次从各个库中分别取出最大的订单，组成一个数量为10的大顶堆。另外维护一个数组，刚开始是空的。 这时从大顶堆中弹出堆顶元素(堆中最大值)，将堆顶元素写入数组，然后在该元素所在的库中按序拿出第二个元素写入大顶堆填上空缺，大顶堆会重新平衡，堆顶元素可能会变。 这时重复上面的步骤，继续弹出堆顶写入数组，并在弹出元素所在库中按序拿下一个值填入大顶堆，大顶堆又会重新平衡，接着继续弹出堆顶元素写入数组····直到数组的长度为K时，整个过程结束。<br><br>大顶堆的大小一直为10，堆每次平衡后，就将堆顶搞出来，重新写入一个值，周而复始，取K次堆顶就是前K大的集合了。<br>@ban","like_count":8},{"had_liked":false,"id":52237,"user_name":"jiemoon","can_delete":false,"product_type":"c1","uid":1202343,"ip_address":"","ucode":"A7461400AFF41C","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/a7/7c972eb1.jpg","comment_is_top":false,"comment_ctime":1545353776,"is_pvip":false,"replies":[{"id":"18981","content":"加个锁？主要还是看操作是不是对数据一致性敏感吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545356620,"ip_address":"","comment_id":52237,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23020190256","product_id":100017301,"comment_content":"老师，像那个猎头的题目，用多个数据结构的话，更新操作会出现数据不一致的情况？","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433798,"discussion_content":"加个锁？主要还是看操作是不是对数据一致性敏感吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545356620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65717,"user_name":"Neo_Zhang","can_delete":false,"product_type":"c1","uid":1175689,"ip_address":"","ucode":"92FFEFE7905AE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/89/25899406.jpg","comment_is_top":false,"comment_ctime":1549599590,"is_pvip":false,"replies":[{"id":"24289","content":"是的，好好写写，收获会很大。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550542248,"ip_address":"","comment_id":65717,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10139534182","product_id":100017301,"comment_content":"认真看了老师六个实战题目和详细解析，我觉得每道题可以当做一个小项目来练手了。同时也真实感受到基础的重要性！","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438563,"discussion_content":"是的，好好写写，收获会很大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550542248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58206,"user_name":"怀特","can_delete":false,"product_type":"c1","uid":1072331,"ip_address":"","ucode":"3DACB205798ED3","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/cb/3ebdcc49.jpg","comment_is_top":false,"comment_ctime":1547010276,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10136944868","product_id":100017301,"comment_content":"实战测试题一：<br>其实算法问题，可以笼统的归纳为：数据以及数据之上的索引。<br>有的数据是自带索引的，比如数组其实自带了下标的索引<br>如果数据没有索引，就需要自建索引。如果我们自己建，那就是采取各种数据结构来构造一个索引；否则，比如据库的索引，也是建了与数据分离的索引的数据结构。<br>从这个角度讲：<br>1、根据id来查找猎头信息： 猎头信息存储到数组中就可以，这样很快<br>2、根据积分来查找猎头信息：可以旁边建立基于积分的数组来作为索引，节点数据就是猎头id<br>这样：<br>1、猎头信息存储在数组中<br>2、自建一个索引，分别是 积分+id的有序数组<br>注意积分变化时维护自建索引的有效性，就可以了。<br>这样没有用高深的数据结构，可能会费一些内存和费一些cpu，但实现简单，基本够用了，比较通用。","like_count":2,"discussions":[{"author":{"id":1250922,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIzGGthScz54sECZJKX3lgyjCATkgrvSt5N3eOsYB34jibCr3SkAX88QaZ5IVmME9Ec7VdkQGwRSPw/132","nickname":"哈哈哈","note":"","ucode":"8AC20A1C9C7DF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309165,"discussion_content":"你这积分相同咋整？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601203330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52777,"user_name":"挨踢菜鸟","can_delete":false,"product_type":"c1","uid":1195409,"ip_address":"","ucode":"CC208C8749B228","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZuwMDaoJviaf3lZ5BOgAvTzLzmbGrMrCZ22krLSRyxpKUrVicU9pSnWsyuSHjksyNldBpXrRzUqeA/132","comment_is_top":false,"comment_ctime":1545526359,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10135460951","product_id":100017301,"comment_content":"老师，我想问一下，您除了讲数据结构之外，本专栏之后还会讲一些其他的吗，比如设计模式之类的，看您的课程真是一种享受，非常期待您其他的专栏","like_count":2,"discussions":[{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47705,"discussion_content":"现在有设计模式了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573394273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52293,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1545359500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135294092","product_id":100017301,"comment_content":"我以前是完全没有接触过数据结构和算法，是一个半路出家的和尚，到如今学了这么多，我觉得真心成长了很多，我会一如既往的努力的！","like_count":2},{"had_liked":false,"id":52290,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1545359337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135293929","product_id":100017301,"comment_content":"实战测试1：<br>     本来想的用树来维护通过ID的增删改查， 用积分做成一个hash表 每个hash下标对应多个猎头ID， 也可以用跳表实现增删改查<br><br>实战测试2：<br>维护一个大小为k的小顶堆  每次读一个库的数据 然后维护这个小顶堆<br><br>实战测试3：<br>      维护一个优先队列，根据优先级来判定 突然到来的线程请求是否该执行，也就是该线程是否在优先队列优先级高的区域<br><br>实战测试4：<br>       能想到二分法<br><br>实战测试5：<br>        不会<br><br>实战测试6：<br>        不会<br>以上题目是未看过任何答案和提示想出来的<br><br>看了解答 除了测试6没多大印象以外，其他的都能有很深刻的印象<br><br>学习目标: 最开始学习数据结构和算法的目标就是说要掌握好树和图，但是实际上却发现了更多需要我去掌握的数据结构和算法<br>实施情况， 坚持了三个月 每一篇文章都认真仔细的学习了 ，总得来说收获颇多，尤其是了解很多以前都不了解的数据结果和算法，扩充了自己的知识面<br><br>接下来的目标还是以本位为测试基准，优先针对性的复习，然后再把课程过一遍，坚持自己的学习初衷 我一定要把数据结果和算法学好！<br> 还是谢谢老师<br><br>","like_count":3},{"had_liked":false,"id":71349,"user_name":"Phoenix","can_delete":false,"product_type":"c1","uid":1005368,"ip_address":"","ucode":"C51BE4C948755B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/38/ba6a106f.jpg","comment_is_top":false,"comment_ctime":1551325360,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5846292656","product_id":100017301,"comment_content":"老师，第二题，我有另一条思路，想请老师教导和指点<br>正如老师所说，数据库最大性能瓶颈就是在IO，所以反复执行DB的IO操作是低效的<br>我想法是要高效实现第二题的要求，又尽量对数据库的IO操作，有以下思路<br>1 借助桶排序的思想，将订单按金额从小到大的规则分布在10个库中<br>2 要查找金额最大的前k订单，就先从第10个库中检索订单，满足K数量就直接返回<br>3 不满足k数量，在从第9个库中查找，以此类推，直到满足k数量，返回结果<br>","like_count":2,"discussions":[{"author":{"id":1310452,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fe/f4/78376973.jpg","nickname":"小白","note":"","ucode":"21B63AEFC8BF16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226112,"discussion_content":"订单场景来说，根据用户id查询订单的需求是最频繁的，因此采用用户id分库对大部分业务场景更有效率。按你思路可手动维护一个有序的金额索引表，牺牲部分写性能，提高该场景读取性能。具体还得根据业务去做取舍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586421659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52711,"user_name":"ban","can_delete":false,"product_type":"c1","uid":1034204,"ip_address":"","ucode":"E523CE97E48266","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/dc/9408c8c2.jpg","comment_is_top":false,"comment_ctime":1545485214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840452510","product_id":100017301,"comment_content":"把取出来的10个订单放到优先级队列中，取出最大值（也就是大顶堆堆顶数据），就是全局金额最大的订单。然后再从这个全局金额最大订单对应的数据库中，取出下一条订单（按照订单金额从大到小排列的），然后放到优先级队列中。一直重复上面的过程。<br><br>老师这段话我看到好多遍，想了好多次一直没搞懂，为什么取出最大金额的数据库查到下一条订单放到队列能理解，但是下次重复这个过程还是从队列中取出最大金额的下一个订单，这样每次最大的金额不是同一个吗，取出的订单还是同一个？<br><br>还有另外一个问题就是全部取出来后怎么判断这个队列是 top k的订单金额？<br><br>第二次回复，求老师讲解，自己研究好久没搞透","like_count":1},{"had_liked":false,"id":52401,"user_name":"才才","can_delete":false,"product_type":"c1","uid":1242373,"ip_address":"","ucode":"94D76106261987","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/05/d6547381.jpg","comment_is_top":false,"comment_ctime":1545375938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840343234","product_id":100017301,"comment_content":"还得看好几遍，还得练习","like_count":1},{"had_liked":false,"id":175499,"user_name":"丁乐洪","can_delete":false,"product_type":"c1","uid":1264392,"ip_address":"","ucode":"549CE57AB20B49","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/08/52954cd7.jpg","comment_is_top":false,"comment_ctime":1580735063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580735063","product_id":100017301,"comment_content":"感觉我太难了","like_count":0},{"had_liked":false,"id":135323,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1569126159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569126159","product_id":100017301,"comment_content":"老师讲的非常好，但是我们不能光凭老师的文章去看懂数据结构，还要自己实战，搜索文章学习才行","like_count":0},{"had_liked":false,"id":121698,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1565186436,"is_pvip":true,"replies":[{"id":"44726","content":"知其所以然看里面的文章链接呢，毕竟是测试题，限于篇幅，不可能讲解太多。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565218761,"ip_address":"","comment_id":121698,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565186436","product_id":100017301,"comment_content":"看了这些题目，怎么说呢，有点知其然，不知其所以然的感觉。应该是没有实际应用过的缘故吧，这个彩蛋很好，适合动手实践实践，不然过段时间又忘了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461908,"discussion_content":"知其所以然看里面的文章链接呢，毕竟是测试题，限于篇幅，不可能讲解太多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565218761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89367,"user_name":"不去彼岸","can_delete":false,"product_type":"c1","uid":1210257,"ip_address":"","ucode":"9F5542CE7AA371","user_header":"https://static001.geekbang.org/account/avatar/00/12/77/91/73429bdd.jpg","comment_is_top":false,"comment_ctime":1556159168,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556159168","product_id":100017301,"comment_content":"实战测试题二：<br>如果k的值很大，用归并排序merge的方法时间复杂度会很高，是不是可以用二分查找的思想<br>取每个库中第k位的金额，然后根据这些金额中的最大金额max与最小金额min，得到中间值mid，再用这个中间值去各个库中查大于这个值的数量，加起来就是这个中间值的排名ki，ki&gt;k则说明中间值比要找的金额大，递归查找(min,mid)中间值的排名，ki&lt;k,递归查找(mid,max)中间值的排名，这样时间复杂度就是10*logn 也就是O(logn)","like_count":0},{"had_liked":false,"id":89078,"user_name":"路上的始终","can_delete":false,"product_type":"c1","uid":1241900,"ip_address":"","ucode":"33B6A2A0E83B3A","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/2c/b9bf6e7b.jpg","comment_is_top":false,"comment_ctime":1556072382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556072382","product_id":100017301,"comment_content":"涉及到一定的需求场景时虽然不能立刻写出代码，但是有很多思路，能写伪代码","like_count":0},{"had_liked":false,"id":87896,"user_name":"天空只能仰望？","can_delete":false,"product_type":"c1","uid":1102357,"ip_address":"","ucode":"D87BF6A57DAB42","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/15/4d43d05a.jpg","comment_is_top":false,"comment_ctime":1555746096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555746096","product_id":100017301,"comment_content":"哈哈，第二遍刷过来很多例子多写了一遍，还是有很多的印象，测试相关题目不一定想到的都是最优解但是也都能联想到相关数据结构和问题解决办法，感谢老师👨‍🏫！","like_count":0},{"had_liked":false,"id":85470,"user_name":"H.L.","can_delete":false,"product_type":"c1","uid":1207529,"ip_address":"","ucode":"125D13548A0CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/e9/377a3b09.jpg","comment_is_top":false,"comment_ctime":1555069332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555069332","product_id":100017301,"comment_content":"题目2: 从10个库中分别取n条数据，放在内存中，再构建一个堆，不断的删堆顶，从内存中的数据放到堆，再堆化，如果其中一个库在内存中没数据了，就触发一次sql操作，取下一批数据回来放到内存","like_count":0},{"had_liked":false,"id":79464,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1553489150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553489150","product_id":100017301,"comment_content":"最近在找实习，恶补基础知识，正在努力追赶老师的步伐，感觉超值的课程","like_count":0},{"had_liked":false,"id":62954,"user_name":"睡痴儿😑","can_delete":false,"product_type":"c1","uid":1187204,"ip_address":"","ucode":"750EF858EF2042","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/84/d0ec0064.jpg","comment_is_top":false,"comment_ctime":1548213032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548213032","product_id":100017301,"comment_content":"查找ip地址是否可以使用tire树呢。毕竟有着大量相同的后缀","like_count":0},{"had_liked":false,"id":62620,"user_name":"逆流的鱼","can_delete":false,"product_type":"c1","uid":1258399,"ip_address":"","ucode":"AA3DDE44A83C40","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg","comment_is_top":false,"comment_ctime":1548121436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548121436","product_id":100017301,"comment_content":"这节的意思是说，就知道你没写作业","like_count":0},{"had_liked":false,"id":60946,"user_name":"健健","can_delete":false,"product_type":"c1","uid":1236365,"ip_address":"","ucode":"33E4F5E07F3F67","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/8d/3e3dbe47.jpg","comment_is_top":false,"comment_ctime":1547597786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547597786","product_id":100017301,"comment_content":"这节课的设计真的很棒，温故而知新","like_count":0},{"had_liked":false,"id":58802,"user_name":"keshawn","can_delete":false,"product_type":"c1","uid":1319270,"ip_address":"","ucode":"CFCC24F58D1651","user_header":"https://static001.geekbang.org/account/avatar/00/14/21/66/f9125286.jpg","comment_is_top":false,"comment_ctime":1547195797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547195797","product_id":100017301,"comment_content":"第一题：可以使用散列表加有序跳跃表结合，类似于LinkedHashMap的结构，只是链表换成了有序跳跃表。这样的话比散列表和有序链表各存一份数据结点要好一点。<br>第二题：使用大顶堆求Top K，这里说下可以优化的点。<br>1.首先是分别从10个库select orderby amout desc limit K可以使用流式查询<br>2.大顶堆的size可以设置为K<br>3.创建一个小顶堆在大顶堆开始记录最深层的子节点的时候开始记录<br>4.当大顶堆是满的时候，查询到的数据如果小于等于最小值，中断流式查询。<br>5.当大顶堆是满的时候，查询到的数据如果大于最小值，和最小值做替换，自下往上堆化，更新小顶堆","like_count":0},{"had_liked":false,"id":57005,"user_name":"Geek_987169","can_delete":false,"product_type":"c1","uid":1180853,"ip_address":"","ucode":"4B2955A044805D","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg","comment_is_top":false,"comment_ctime":1546598248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546598248","product_id":100017301,"comment_content":"老师，猎头的例子有一点想不明白，每一个索引节点增加一个span，事实上每个索引节点有一个指向后续节点的数组（forwards），那么就是&quot;指向的下一个节点&quot;并不是唯一的，所以是不是每个索引节点也要有和后续节点数组对应的一个span数组啊，这样才能准确的知道向后走几步啊？望老师解惑！！！","like_count":0},{"had_liked":false,"id":54261,"user_name":"小情绪","can_delete":false,"product_type":"c1","uid":1020311,"ip_address":"","ucode":"92D8081DB8DB45","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","comment_is_top":false,"comment_ctime":1545817638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545817638","product_id":100017301,"comment_content":"一节一节跟到现在、每次遇到困难都会努力跨越，从看不明白到能够理解的时候，心里面突然会觉得想要看懂真的不难，一定要勤思考，多总结。当然看懂和灵活运用是完全不同的俩个层次。到现在的感觉就是：学会用数学或者说算法的思维去思考问题并解决问题。前段时间遇个一个很痛苦的问题、放到以前虽然想解决但是不一定有思路，通过这段时间的学习，最终将遇到的问题抽象化，并顺利解决。学会对问题进行抽象，找出痛点和规律真的是这段时间最大的收获，感谢王老师。","like_count":0},{"had_liked":false,"id":54196,"user_name":"Zero","can_delete":false,"product_type":"c1","uid":1246799,"ip_address":"","ucode":"309EB120D5C3FF","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/4f/de1e5a54.jpg","comment_is_top":false,"comment_ctime":1545802781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545802781","product_id":100017301,"comment_content":"永不掉队！","like_count":0},{"had_liked":false,"id":53808,"user_name":"杨智晓 ✟","can_delete":false,"product_type":"c1","uid":1024263,"ip_address":"","ucode":"E3B56F4A38F63D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/07/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1545731112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545731112","product_id":100017301,"comment_content":"前面的数据结构算法都跟得上，后面从字符串匹配开始那些就跟不上了","like_count":0},{"had_liked":false,"id":53241,"user_name":"DebugDog","can_delete":false,"product_type":"c1","uid":1027798,"ip_address":"","ucode":"1664D37CE03B9D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/d6/fbb8236d.jpg","comment_is_top":false,"comment_ctime":1545618660,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545618660","product_id":100017301,"comment_content":"代码写的少，还是比较虚啊，还是需要反复理解，动手写。","like_count":0},{"had_liked":false,"id":53069,"user_name":"dapaul","can_delete":false,"product_type":"c1","uid":1239335,"ip_address":"","ucode":"A53E0018F138A1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/27/2aa8fb31.jpg","comment_is_top":false,"comment_ctime":1545578554,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545578554","product_id":100017301,"comment_content":"老师，我一直比较纳闷，什么时候先载入数据在内存中计算比较好，什么时候直接利用数据库的增删改查比较好。如在第一个案例的情景，如果数据一边在变动，我们一边要做题目要求的哪些操作，那我们是先把数据载入内存，后面的数据变动同步更新内存数据，然后做计算;还是直接利用数据库的增删改查操作比较好？","like_count":0},{"had_liked":false,"id":53015,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1545570348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545570348","product_id":100017301,"comment_content":"老师讲的东西都理解了，也基本知道用什么方法解决。但估计是自己写代码比较少，感觉比较虚，看来需要多多实践写代码。","like_count":0},{"had_liked":false,"id":53013,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1545569743,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545569743","product_id":100017301,"comment_content":"能回忆起来每道题是源自哪个算法知识点或哪个章节的，相关的处理思路也能回忆起来，不过很多细节不看看之前文章真是忘了。","like_count":0},{"had_liked":false,"id":52787,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1545529148,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545529148","product_id":100017301,"comment_content":"报老师的课时，就是想着能够去学习下基础的数据结构和算法，加深对它们的理解并尝试如何在开发中使用到它们，到现在基本的数据结构和算法基本上都了解，但在如何使用上可能还有点欠缺，希望能跟紧老师的步伐，加强自己的实际应用能力。","like_count":0},{"had_liked":false,"id":52758,"user_name":"alan","can_delete":false,"product_type":"c1","uid":1083425,"ip_address":"","ucode":"2CA8D0B6B7D5A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/21/50b2418a.jpg","comment_is_top":false,"comment_ctime":1545497923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545497923","product_id":100017301,"comment_content":"老师的讲解水平真的很厉害，感谢！","like_count":0},{"had_liked":false,"id":52708,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1545483910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545483910","product_id":100017301,"comment_content":"基本能讲出对应的数据结构和算法的思路，虽说代码都没实现过，但退而求其次，能有解决思路已经蛮好的了。<br>不说了，回去补没看的那几期了。。","like_count":0},{"had_liked":false,"id":52695,"user_name":"luxinfeng","can_delete":false,"product_type":"c1","uid":1259853,"ip_address":"","ucode":"51D0046C4D31AD","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/4d/9ce28826.jpg","comment_is_top":false,"comment_ctime":1545478884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545478884","product_id":100017301,"comment_content":"通过这几个题，发现自己对于数据结构的细节掌握的不太好，而且，对于具体问题，即使知道该用什么数据结构，也不知道怎么用代码解决实际问题。（关于IP地址的那个测试题，用跳表是不是也挺好的啊？）","like_count":0},{"had_liked":false,"id":52483,"user_name":"bro.","can_delete":false,"product_type":"c1","uid":1124948,"ip_address":"","ucode":"D65283CD869804","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/54/c9990105.jpg","comment_is_top":false,"comment_ctime":1545391722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545391722","product_id":100017301,"comment_content":"第二个例子，10个库取前1000个最大订单金额的话，我们每个库一次取200个最大向下排序的订单，然后加入队列中总共有2000条数据，建立一个长度为10的数组，当从队列中去取数据排序的时候一旦发现该数据不在前1000位需要舍弃将对应的库标记出来不在取新数据，完成以后从数组中未标记的库中再取200进行比较，直到10的数组全部被标记，找到前1000的数据","like_count":0},{"had_liked":false,"id":52466,"user_name":"K战神","can_delete":false,"product_type":"c1","uid":1139367,"ip_address":"","ucode":"527E6BB26BB766","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/a7/3e6fee86.jpg","comment_is_top":false,"comment_ctime":1545387905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545387905","product_id":100017301,"comment_content":"打卡留言","like_count":0},{"had_liked":false,"id":52460,"user_name":"起点·终站","can_delete":false,"product_type":"c1","uid":1239857,"ip_address":"","ucode":"A5AD31F28C240E","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/31/96b76ca8.jpg","comment_is_top":false,"comment_ctime":1545386254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545386254","product_id":100017301,"comment_content":"都三个月了，时间过得这么快啊","like_count":0},{"had_liked":false,"id":52395,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1545375152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545375152","product_id":100017301,"comment_content":"老师,三个月了,我还在!😁","like_count":0},{"had_liked":false,"id":52297,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1545359843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545359843","product_id":100017301,"comment_content":"报老师的课时就是想着能加深数据结构和算法的认识以及对于数据结构算法的实际应用进一步了解。现在课程已经上了这么多我还没有掉队，而且感觉自己进步特别大，最后就是期待一波老师是如何讲“动态规划”的。  给自己加个油！","like_count":1}]}