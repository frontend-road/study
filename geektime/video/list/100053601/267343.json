{"id":267343,"title":"33 | 如何设计一个高性能基于内存的LRU Cache？","content":"<p><strong>课件和Demo地址</strong><br>\n<a href=\"https://gitee.com/geektime-geekbang/geektime-distributed\">https://gitee.com/geektime-geekbang/geektime-distributed</a></p>","comments":[{"had_liked":false,"id":240175,"user_name":"Elective9095","can_delete":false,"product_type":"c3","uid":1595002,"ip_address":"","ucode":"2AC2F9B0A6D823","user_header":"https://static001.geekbang.org/account/avatar/00/18/56/7a/382538dc.jpg","comment_is_top":false,"comment_ctime":1596779033,"is_pvip":false,"replies":[{"id":88708,"content":"是的，okCache还有优化空间，锁的粒度还可以细化。但是目前对于SessionServer来说，它的性能已经足够了，瓶颈已经不在Cache层，而是在网络传输&#47;序列化层，所以单独优化okCache对提升SessionServer总体性能影响不大。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1596815062,"ip_address":"","comment_id":240175,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"okCache实现很巧妙，通过链表实现了o(1)复杂度的删除节点，同时通过哈希表避免了链表随机访问o（n）的时间复杂度。这里同时对okCache发现可以优化的点，对于链表的加锁操作可以细粒度化，比如，头节点和尾节点比较特殊，可以单独搞把cas锁，就是还没有想到如何保证数据的一致性，比如，删除指定节点，并添加到头节点这是一个原子操作，不允许中间状态。","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503364,"discussion_content":"是的，okCache还有优化空间，锁的粒度还可以细化。但是目前对于SessionServer来说，它的性能已经足够了，瓶颈已经不在Cache层，而是在网络传输/序列化层，所以单独优化okCache对提升SessionServer总体性能影响不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596815062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247534,"user_name":"人在江湖飘","can_delete":false,"product_type":"c3","uid":1130934,"ip_address":"","ucode":"FF0D992B5EFCDE","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/b6/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1599733751,"is_pvip":false,"replies":[{"id":91016,"content":"看后面的代码样例：\nprivate Map&lt;K, Node&lt;K, V&gt;&gt; map;\n这里的Node节点是作为值Value存在Map中的，前面的K是Key，如果Key有hash冲突，那么根据Java中的HashMap做法是会用链表法来存储key冲突的Value(也就是Node)。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1599918147,"ip_address":"","comment_id":247534,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"老师 map来存放list中的节点，如果存在hash冲突怎么办呢？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505428,"discussion_content":"看后面的代码样例：\nprivate Map&amp;lt;K, Node&amp;lt;K, V&amp;gt;&amp;gt; map;\n这里的Node节点是作为值Value存在Map中的，前面的K是Key，如果Key有hash冲突，那么根据Java中的HashMap做法是会用链表法来存储key冲突的Value(也就是Node)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599918147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239374,"user_name":"飞翔","can_delete":false,"product_type":"c3","uid":1068571,"ip_address":"","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1596516423,"is_pvip":false,"replies":[{"id":88630,"content":"请看代码实现：\nhttps:&#47;&#47;github.com&#47;spring2go&#47;okcache&#47;blob&#47;master&#47;src&#47;main&#47;java&#47;com&#47;spring2go&#47;okcache&#47;impl&#47;SegmentAccessQueue.java\n\nSegmentAccessQueue扩展自AbstractDeque，对很多方法进行了重载，实现复杂度是O(1)的。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1596728816,"ip_address":"","comment_id":239374,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"老师 为啥guava cache 用deque实现呀 用双向列表 可以移动任何元素到末尾， deque只能前后端移除元素呀 我要有一个中间的元素要移除 deque实现 不就是o(n) 的时间复杂度了嘛？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503085,"discussion_content":"请看代码实现：\nhttps://github.com/spring2go/okcache/blob/master/src/main/java/com/spring2go/okcache/impl/SegmentAccessQueue.java\n\nSegmentAccessQueue扩展自AbstractDeque，对很多方法进行了重载，实现复杂度是O(1)的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596728816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239006,"user_name":"tt","can_delete":false,"product_type":"c3","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1596414333,"is_pvip":false,"replies":[{"id":89083,"content":"SessionServer主要用于集中存放用户的Web Session会话数据。SessionServer的设计挑战在高性能&#47;高可用&#47;可扩展性。它的高性能设计采用内存LUR缓存 + 可持久化缓存两级缓存机制。后台DB的主要作用是备份，通过后台DB可以实现故障恢复，保障高可用性。SessionServer通过客户端浏览器cookie记住SessionServer IP地址的方式，可以实现简单的集群按需扩展。\n\n","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1597160357,"ip_address":"","comment_id":239006,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"听完这节课，是不是可以对SessionServer座如下理解？\n\nSessionServer的定位应该就是普通业务系统中的本地缓存，存放极热点的数据，后面还要接容量更大的集中式缓存。\n\n只是正好因为在本章的上下文中，当前的“业务”是保存具有一定全局属性的会话，所以给“当前业务本地缓存”的设计带来了特殊性。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502934,"discussion_content":"SessionServer主要用于集中存放用户的Web Session会话数据。SessionServer的设计挑战在高性能/高可用/可扩展性。它的高性能设计采用内存LUR缓存 + 可持久化缓存两级缓存机制。后台DB的主要作用是备份，通过后台DB可以实现故障恢复，保障高可用性。SessionServer通过客户端浏览器cookie记住SessionServer IP地址的方式，可以实现简单的集群按需扩展。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597160357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351245,"user_name":"青阳","can_delete":false,"product_type":"c3","uid":2139807,"ip_address":"","ucode":"3591D366BAB0B9","user_header":"https://static001.geekbang.org/account/avatar/00/20/a6/9f/3c60fffd.jpg","comment_is_top":false,"comment_ctime":1657637608,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"力扣算法题就是一个HashMap（O(1)判断是否存在），加上一个双向链表（O(1)的头尾添加和删除）实现","like_count":0},{"had_liked":false,"id":276104,"user_name":"白小龙","can_delete":false,"product_type":"c3","uid":1230191,"ip_address":"","ucode":"34BFCBA8D98AB8","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/6f/8ba27eab.jpg","comment_is_top":false,"comment_ctime":1611795649,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"读代码的时候不刻意去看给谁赋值，而是把=理解为让指向会更容易理解","like_count":0}]}