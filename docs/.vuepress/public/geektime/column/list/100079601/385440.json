{"id":385440,"title":"特别放送 | 给你一份清晰、可直接套用的Go编码规范","content":"<p>你好，我是孔令飞。</p><p>我们在上一讲学习了“写出优雅Go项目的方法论”，那一讲内容很丰富，是我多年Go项目开发的经验沉淀，需要你多花一些时间好好消化吸收。吃完大餐之后，咱们今天来一期特别放送，就是上一讲我提到过的编码规范。这一讲里，为了帮你节省时间和精力，我会给你一份清晰、可直接套用的 Go 编码规范，帮助你编写一个高质量的 Go 应用。</p><p>这份规范，是我参考了Go官方提供的编码规范，以及Go社区沉淀的一些比较合理的规范之后，加入自己的理解总结出的，它比很多公司内部的规范更全面，你掌握了，以后在面试大厂的时候，或者在大厂里写代码的时候，都会让人高看你一眼，觉得你code很专业。</p><p>这份编码规范中包含代码风格、命名规范、注释规范、类型、控制结构、函数、GOPATH 设置规范、依赖管理和最佳实践九类规范。如果你觉得这些规范内容太多了，看完一遍也记不住，这完全没关系。你可以多看几遍，也可以在用到时把它翻出来，在实际应用中掌握。这篇特别放送的内容，更多是作为写代码时候的一个参考手册。</p><h2>1. 代码风格</h2><h3>1.1 代码格式</h3><ul>\n<li>\n<p>代码都必须用 <code>gofmt</code> 进行格式化。</p>\n</li>\n<li>\n<p>运算符和操作数之间要留空格。</p>\n</li>\n<li>\n<p>建议一行代码不超过120个字符，超过部分，请采用合适的换行方式换行。但也有些例外场景，例如import行、工具自动生成的代码、带tag的struct字段。</p>\n</li>\n<li>\n<p>文件长度不能超过800行。</p>\n</li>\n<li>\n<p>函数长度不能超过80行。</p>\n</li>\n<li>\n<p>import规范</p>\n<ul>\n<li>代码都必须用 goimports进行格式化（建议将代码Go代码编辑器设置为：保存时运行 goimports）。<br>\n- 不要使用相对路径引入包，例如 import …/util/net 。<br>\n- 包名称与导入路径的最后一个目录名不匹配时，或者多个相同包名冲突时，则必须使用导入别名。</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><pre><code>// bad\n\t&quot;github.com/dgrijalva/jwt-go/v4&quot;\n\n\t//good\n\tjwt &quot;github.com/dgrijalva/jwt-go/v4&quot;\n</code></pre><ul style=\"list-style: none;\">\n   <li>\n      <ul>\n<li style=\"margin-left: 23px; padding-left: 17px\">导入的包建议进行分组，匿名包的引用使用一个新的分组，并对匿名包引用进行说明。</li>\n      </ul>\n   </li>\n</ul><pre><code>\timport (\n\t\t// go 标准包\n\t\t&quot;fmt&quot;\n\n\t\t// 第三方包\n\t    &quot;github.com/jinzhu/gorm&quot;\n\t    &quot;github.com/spf13/cobra&quot;\n\t    &quot;github.com/spf13/viper&quot;\n\n\t\t// 匿名包单独分组，并对匿名包引用进行说明\n\t    // import mysql driver\n\t    _ &quot;github.com/jinzhu/gorm/dialects/mysql&quot;\n\n\t\t// 内部包\n\t    v1 &quot;github.com/marmotedu/api/apiserver/v1&quot;\n\t    metav1 &quot;github.com/marmotedu/apimachinery/pkg/meta/v1&quot;\n\t    &quot;github.com/marmotedu/iam/pkg/cli/genericclioptions&quot;\n\t)\n</code></pre><h3>1.2 声明、初始化和定义</h3><ul>\n<li>当函数中需要使用到多个变量时，可以在函数开始处使用var声明。在函数外部声明必须使用 <code>var</code> ，不要采用 <code>:=</code> ，容易踩到变量的作用域的问题。</li>\n</ul><pre><code>var (\n\tWidth  int\n\tHeight int\n)\n</code></pre><ul>\n<li>在初始化结构引用时，请使用&amp;T{}代替new(T)，以使其与结构体初始化一致。</li>\n</ul><pre><code>// bad\nsptr := new(T)\nsptr.Name = &quot;bar&quot;\n\n// good\nsptr := &amp;T{Name: &quot;bar&quot;}\n</code></pre><ul>\n<li>struct 声明和初始化格式采用多行，定义如下。</li>\n</ul><pre><code>type User struct{\n    Username  string\n    Email     string\n}\n\nuser := User{\n\tUsername: &quot;colin&quot;,\n\tEmail: &quot;colin404@foxmail.com&quot;,\n}\n</code></pre><ul>\n<li>相似的声明放在一组，同样适用于常量、变量和类型声明。</li>\n</ul><pre><code>// bad\nimport &quot;a&quot;\nimport &quot;b&quot;\n\n// good\nimport (\n  &quot;a&quot;\n  &quot;b&quot;\n)\n</code></pre><ul>\n<li>尽可能指定容器容量，以便为容器预先分配内存，例如：</li>\n</ul><pre><code>v := make(map[int]string, 4)\nv := make([]string, 0, 4)\n</code></pre><ul>\n<li>在顶层，使用标准var关键字。请勿指定类型，除非它与表达式的类型不同。</li>\n</ul><pre><code>// bad\nvar _s string = F()\n\nfunc F() string { return &quot;A&quot; }\n\n// good\nvar _s = F()\n// 由于 F 已经明确了返回一个字符串类型，因此我们没有必要显式指定_s 的类型\n// 还是那种类型\n\nfunc F() string { return &quot;A&quot; }\n</code></pre><ul>\n<li>对于未导出的顶层常量和变量，使用_作为前缀。</li>\n</ul><pre><code>// bad\nconst (\n  defaultHost = &quot;127.0.0.1&quot;\n  defaultPort = 8080\n)\n\n// good\nconst (\n  _defaultHost = &quot;127.0.0.1&quot;\n  _defaultPort = 8080\n)\n</code></pre><ul>\n<li>嵌入式类型（例如 mutex）应位于结构体内的字段列表的顶部，并且必须有一个空行将嵌入式字段与常规字段分隔开。</li>\n</ul><pre><code>// bad\ntype Client struct {\n  version int\n  http.Client\n}\n\n// good\ntype Client struct {\n  http.Client\n\n  version int\n}\n</code></pre><h3>1.3 错误处理</h3><ul>\n<li><code>error</code>作为函数的值返回，必须对<code>error</code>进行处理，或将返回值赋值给明确忽略。对于<code>defer xx.Close()</code>可以不用显式处理。</li>\n</ul><pre><code>func load() error {\n\t// normal code\n}\n\n// bad\nload()\n\n// good\n _ = load()\n</code></pre><ul>\n<li><code>error</code>作为函数的值返回且有多个返回值的时候，<code>error</code>必须是最后一个参数。</li>\n</ul><pre><code>// bad\nfunc load() (error, int) {\n\t// normal code\n}\n\n// good\nfunc load() (int, error) {\n\t// normal code\n}\n</code></pre><ul>\n<li>尽早进行错误处理，并尽早返回，减少嵌套。</li>\n</ul><pre><code>// bad\nif err != nil {\n\t// error code\n} else {\n\t// normal code\n}\n\n// good\nif err != nil {\n\t// error handling\n\treturn err\n}\n// normal code\n</code></pre><ul>\n<li>如果需要在 if 之外使用函数调用的结果，则应采用下面的方式。</li>\n</ul><pre><code>// bad\nif v, err := foo(); err != nil {\n\t// error handling\n}\n\n// good\nv, err := foo()\nif err != nil {\n\t// error handling\n}\n</code></pre><ul>\n<li>错误要单独判断，不与其他逻辑组合判断。</li>\n</ul><pre><code>// bad\nv, err := foo()\nif err != nil || v  == nil {\n\t// error handling\n\treturn err\n}\n\n// good\nv, err := foo()\nif err != nil {\n\t// error handling\n\treturn err\n}\n\nif v == nil {\n\t// error handling\n\treturn errors.New(&quot;invalid value v&quot;)\n}\n</code></pre><ul>\n<li>如果返回值需要初始化，则采用下面的方式。</li>\n</ul><pre><code>v, err := f()\nif err != nil {\n    // error handling\n    return // or continue.\n}\n// use v\n</code></pre><ul>\n<li>\n<p>错误描述建议</p>\n<ul>\n<li>告诉用户他们可以做什么，而不是告诉他们不能做什么。</li>\n<li>当声明一个需求时，用must 而不是should。例如，must be greater than 0、must match regex ‘[a-z]+’。</li>\n<li>当声明一个格式不对时，用must not。例如，must not contain。</li>\n<li>当声明一个动作时用may not。例如，may not be specified when otherField is empty、only name may be specified。</li>\n<li>引用文字字符串值时，请在单引号中指示文字。例如，ust not contain ‘…’。</li>\n<li>当引用另一个字段名称时，请在反引号中指定该名称。例如，must be greater than <code>request</code>。</li>\n<li>指定不等时，请使用单词而不是符号。例如，must be less than 256、must be greater than or equal to 0 (不要用 larger than、bigger than、more than、higher than)。</li>\n<li>指定数字范围时，请尽可能使用包含范围。</li>\n<li>建议 Go 1.13 以上，error 生成方式为 <code>fmt.Errorf(\"module xxx: %w\", err)</code>。</li>\n<li>错误描述用小写字母开头，结尾不要加标点符号，例如：</li>\n</ul>\n</li>\n</ul><pre><code>\t// bad\n\terrors.New(&quot;Redis connection failed&quot;)\n\terrors.New(&quot;redis connection failed.&quot;)\n\n\t// good\n\terrors.New(&quot;redis connection failed&quot;)\n</code></pre><h3>1.4 panic处理</h3><ul>\n<li>在业务逻辑处理中禁止使用panic。</li>\n<li>在main包中，只有当程序完全不可运行时使用panic，例如无法打开文件、无法连接数据库导致程序无法正常运行。</li>\n<li>在main包中，使用 <code>log.Fatal</code> 来记录错误，这样就可以由log来结束程序，或者将panic抛出的异常记录到日志文件中，方便排查问题。</li>\n<li>可导出的接口一定不能有panic。</li>\n<li>包内建议采用error而不是panic来传递错误。</li>\n</ul><h3>1.5 单元测试</h3><ul>\n<li>单元测试文件名命名规范为 <code>example_test.go</code>。</li>\n<li>每个重要的可导出函数都要编写测试用例。</li>\n<li>因为单元测试文件内的函数都是不对外的，所以可导出的结构体、函数等可以不带注释。</li>\n<li>如果存在 <code>func (b *Bar) Foo</code> ，单测函数可以为 <code>func TestBar_Foo</code>。</li>\n</ul><h3>1.6 类型断言失败处理</h3><p>type assertion 的单个返回值针对不正确的类型将产生 panic。请始终使用 “comma ok”的惯用法。</p><pre><code>// bad\nt := n.(int)\n\n// good\nt, ok := n.(int)\nif !ok {\n\t// error handling\n}\n// normal code\n</code></pre><h2>2. 命名规范</h2><p>命名规范是代码规范中非常重要的一部分，一个统一的、短小的、精确的命名规范可以大大提高代码的可读性，也可以借此规避一些不必要的Bug。</p><h3>2.1 包命名</h3><ul>\n<li>包名必须和目录名一致，尽量采取有意义、简短的包名，不要和标准库冲突。</li>\n<li>包名全部小写，没有大写或下划线，使用多级目录来划分层级。</li>\n<li>项目名可以通过中划线来连接多个单词。</li>\n<li>包名以及包所在的目录名，不要使用复数，例如，是<code>net/url</code>，而不是<code>net/urls</code>。</li>\n<li>不要用 common、util、shared 或者 lib 这类宽泛的、无意义的包名。</li>\n<li>包名要简单明了，例如 net、time、log。</li>\n</ul><h3>2.2 函数命名</h3><ul>\n<li>函数名采用驼峰式，首字母根据访问控制决定使用大写或小写，例如：MixedCaps或者mixedCaps。</li>\n<li>代码生成工具自动生成的代码(如xxxx.pb.go)和为了对相关测试用例进行分组，而采用的下划线(如TestMyFunction_WhatIsBeingTested)排除此规则。</li>\n</ul><h3>2.3 文件命名</h3><ul>\n<li>文件名要简短有意义。</li>\n<li>文件名应小写，并使用下划线分割单词。</li>\n</ul><h3>2.4 结构体命名</h3><ul>\n<li>采用驼峰命名方式，首字母根据访问控制决定使用大写或小写，例如MixedCaps或者mixedCaps。</li>\n<li>结构体名不应该是动词，应该是名词，比如 Node、NodeSpec。</li>\n<li>避免使用Data、Info这类无意义的结构体名。</li>\n<li>结构体的声明和初始化应采用多行，例如：</li>\n</ul><pre><code>// User 多行声明\ntype User struct {\n    Name  string\n    Email string\n}\n\n// 多行初始化\nu := User{\n    UserName: &quot;colin&quot;,\n    Email:    &quot;colin404@foxmail.com&quot;,\n}\n</code></pre><h3>2.5 接口命名</h3><ul>\n<li>\n<p>接口命名的规则，基本和结构体命名规则保持一致：</p>\n<ul>\n<li>单个函数的接口名以 “er\"”作为后缀（例如Reader，Writer），有时候可能导致蹩脚的英文，但是没关系。</li>\n<li>两个函数的接口名以两个函数名命名，例如ReadWriter。</li>\n<li>三个以上函数的接口名，类似于结构体名。</li>\n</ul>\n</li>\n</ul><p>例如：</p><pre><code>\t// Seeking to an offset before the start of the file is an error.\n\t// Seeking to any positive offset is legal, but the behavior of subsequent\n\t// I/O operations on the underlying object is implementation-dependent.\n\ttype Seeker interface {\n\t    Seek(offset int64, whence int) (int64, error)\n\t}\n\n\t// ReadWriter is the interface that groups the basic Read and Write methods.\n\ttype ReadWriter interface {\n\t    Reader\n\t    Writer\n\t}\n</code></pre><h3>2.6 变量命名</h3><ul>\n<li>\n<p>变量名必须遵循<strong>驼峰式</strong>，首字母根据访问控制决定使用大写或小写。</p>\n</li>\n<li>\n<p>在相对简单（对象数量少、针对性强）的环境中，可以将一些名称由完整单词简写为单个字母，例如：</p>\n<ul>\n<li>user 可以简写为 u；</li>\n<li>userID 可以简写 uid。</li>\n</ul>\n</li>\n<li>\n<p>特有名词时，需要遵循以下规则：</p>\n<ul>\n<li>如果变量为私有，且特有名词为首个单词，则使用小写，如 apiClient。</li>\n<li>其他情况都应当使用该名词原有的写法，如 APIClient、repoID、UserID。</li>\n</ul>\n</li>\n</ul><p>下面列举了一些常见的特有名词。</p><pre><code>// A GonicMapper that contains a list of common initialisms taken from golang/lint\nvar LintGonicMapper = GonicMapper{\n    &quot;API&quot;:   true,\n    &quot;ASCII&quot;: true,\n    &quot;CPU&quot;:   true,\n    &quot;CSS&quot;:   true,\n    &quot;DNS&quot;:   true,\n    &quot;EOF&quot;:   true,\n    &quot;GUID&quot;:  true,\n    &quot;HTML&quot;:  true,\n    &quot;HTTP&quot;:  true,\n    &quot;HTTPS&quot;: true,\n    &quot;ID&quot;:    true,\n    &quot;IP&quot;:    true,\n    &quot;JSON&quot;:  true,\n    &quot;LHS&quot;:   true,\n    &quot;QPS&quot;:   true,\n    &quot;RAM&quot;:   true,\n    &quot;RHS&quot;:   true,\n    &quot;RPC&quot;:   true,\n    &quot;SLA&quot;:   true,\n    &quot;SMTP&quot;:  true,\n    &quot;SSH&quot;:   true,\n    &quot;TLS&quot;:   true,\n    &quot;TTL&quot;:   true,\n    &quot;UI&quot;:    true,\n    &quot;UID&quot;:   true,\n    &quot;UUID&quot;:  true,\n    &quot;URI&quot;:   true,\n    &quot;URL&quot;:   true,\n    &quot;UTF8&quot;:  true,\n    &quot;VM&quot;:    true,\n    &quot;XML&quot;:   true,\n    &quot;XSRF&quot;:  true,\n    &quot;XSS&quot;:   true,\n}\n</code></pre><ul>\n<li>若变量类型为bool类型，则名称应以Has，Is，Can或Allow开头，例如：</li>\n</ul><pre><code>var hasConflict bool\nvar isExist bool\nvar canManage bool\nvar allowGitHook bool\n</code></pre><ul>\n<li>局部变量应当尽可能短小，比如使用buf指代buffer，使用i指代index。</li>\n<li>代码生成工具自动生成的代码可排除此规则(如xxx.pb.go里面的Id)</li>\n</ul><h3>2.7 常量命名</h3><ul>\n<li>常量名必须遵循驼峰式，首字母根据访问控制决定使用大写或小写。</li>\n<li>如果是枚举类型的常量，需要先创建相应类型：</li>\n</ul><pre><code>// Code defines an error code type.\ntype Code int\n\n// Internal errors.\nconst (\n    // ErrUnknown - 0: An unknown error occurred.\n    ErrUnknown Code = iota\n    // ErrFatal - 1: An fatal error occurred.\n    ErrFatal\n)\n</code></pre><h3>2.8 Error的命名</h3><ul>\n<li>Error类型应该写成FooError的形式。</li>\n</ul><pre><code>type ExitError struct {\n\t// ....\n}\n</code></pre><ul>\n<li>Error变量写成ErrFoo的形式。</li>\n</ul><pre><code>var ErrFormat = errors.New(&quot;unknown format&quot;)\n</code></pre><h2>3. 注释规范</h2><ul>\n<li>每个可导出的名字都要有注释，该注释对导出的变量、函数、结构体、接口等进行简要介绍。</li>\n<li>全部使用单行注释，禁止使用多行注释。</li>\n<li>和代码的规范一样，单行注释不要过长，禁止超过 120 字符，超过的请使用换行展示，尽量保持格式优雅。</li>\n<li>注释必须是完整的句子，以需要注释的内容作为开头，句点作为结尾，格式为 <code>// 名称 描述.</code> 。例如：</li>\n</ul><pre><code>// bad\n// logs the flags in the flagset.\nfunc PrintFlags(flags *pflag.FlagSet) {\n\t// normal code\n}\n\n// good\n// PrintFlags logs the flags in the flagset.\nfunc PrintFlags(flags *pflag.FlagSet) {\n\t// normal code\n}\n</code></pre><ul>\n<li>\n<p>所有注释掉的代码在提交code review前都应该被删除，否则应该说明为什么不删除，并给出后续处理建议。</p>\n</li>\n<li>\n<p>在多段注释之间可以使用空行分隔加以区分，如下所示：</p>\n</li>\n</ul><pre><code>// Package superman implements methods for saving the world.\n//\n// Experience has shown that a small number of procedures can prove\n// helpful when attempting to save the world.\npackage superman\n</code></pre><h3>3.1 包注释</h3><ul>\n<li>每个包都有且仅有一个包级别的注释。</li>\n<li>包注释统一用 <code>//</code> 进行注释，格式为 <code>// Package 包名 包描述</code> ，例如：</li>\n</ul><pre><code>// Package genericclioptions contains flags which can be added to you command, bound, completed, and produce\n// useful helper functions.\npackage genericclioptions\n</code></pre><h3>3.2 变量/常量注释</h3><ul>\n<li>每个可导出的变量/常量都必须有注释说明，格式为<code>// 变量名 变量描述</code>，例如：</li>\n</ul><pre><code>// ErrSigningMethod defines invalid signing method error.\nvar ErrSigningMethod = errors.New(&quot;Invalid signing method&quot;)\n</code></pre><ul>\n<li>出现大块常量或变量定义时，可在前面注释一个总的说明，然后在每一行常量的前一行或末尾详细注释该常量的定义，例如：</li>\n</ul><pre><code>// Code must start with 1xxxxx.    \nconst (                         \n    // ErrSuccess - 200: OK.          \n    ErrSuccess int = iota + 100001    \n                                                   \n    // ErrUnknown - 500: Internal server error.    \n    ErrUnknown    \n\n    // ErrBind - 400: Error occurred while binding the request body to the struct.    \n    ErrBind    \n                                                  \n    // ErrValidation - 400: Validation failed.    \n    ErrValidation \n)\n</code></pre><h3>3.3 结构体注释</h3><ul>\n<li>每个需要导出的结构体或者接口都必须有注释说明，格式为 <code>// 结构体名 结构体描述.</code>。</li>\n<li>结构体内的可导出成员变量名，如果意义不明确，必须要给出注释，放在成员变量的前一行或同一行的末尾。例如：</li>\n</ul><pre><code>// User represents a user restful resource. It is also used as gorm model.\ntype User struct {\n    // Standard object's metadata.\n    metav1.ObjectMeta `json:&quot;metadata,omitempty&quot;`\n\n    Nickname string `json:&quot;nickname&quot; gorm:&quot;column:nickname&quot;`\n    Password string `json:&quot;password&quot; gorm:&quot;column:password&quot;`\n    Email    string `json:&quot;email&quot; gorm:&quot;column:email&quot;`\n    Phone    string `json:&quot;phone&quot; gorm:&quot;column:phone&quot;`\n    IsAdmin  int    `json:&quot;isAdmin,omitempty&quot; gorm:&quot;column:isAdmin&quot;`\n}\n</code></pre><h3>3.4 方法注释</h3><ul>\n<li>每个需要导出的函数或者方法都必须有注释，格式为<code>// 函数名 函数描述.</code>，例如：</li>\n</ul><pre><code>// BeforeUpdate run before update database record.\nfunc (p *Policy) BeforeUpdate() (err error) {\n\t// normal code\n\treturn nil\n}\n</code></pre><h3>3.5 类型注释</h3><ul>\n<li>每个需要导出的类型定义和类型别名都必须有注释说明，格式为 <code>// 类型名 类型描述.</code> ，例如：</li>\n</ul><pre><code>// Code defines an error code type.\ntype Code int\n</code></pre><h2>4. 类型</h2><h3>4.1 字符串</h3><ul>\n<li>空字符串判断。</li>\n</ul><pre><code>// bad\nif s == &quot;&quot; {\n    // normal code\n}\n\n// good\nif len(s) == 0 {\n    // normal code\n}\n</code></pre><ul>\n<li>[]byte/string相等比较。</li>\n</ul><pre><code>// bad\nvar s1 []byte\nvar s2 []byte\n...\nbytes.Equal(s1, s2) == 0\nbytes.Equal(s1, s2) != 0\n\n// good\nvar s1 []byte\nvar s2 []byte\n...\nbytes.Compare(s1, s2) == 0\nbytes.Compare(s1, s2) != 0\n</code></pre><ul>\n<li>复杂字符串使用raw字符串避免字符转义。</li>\n</ul><pre><code>// bad\nregexp.MustCompile(&quot;\\\\.&quot;)\n\n// good\nregexp.MustCompile(`\\.`)\n</code></pre><h3>4.2 切片</h3><ul>\n<li>空slice判断。</li>\n</ul><pre><code>// bad\nif len(slice) = 0 {\n    // normal code\n}\n\n// good\nif slice != nil &amp;&amp; len(slice) == 0 {\n    // normal code\n}\n</code></pre><p>上面判断同样适用于map、channel。</p><ul>\n<li>声明slice。</li>\n</ul><pre><code>// bad\ns := []string{}\ns := make([]string, 0)\n\n// good\nvar s []string\n</code></pre><ul>\n<li>slice复制。</li>\n</ul><pre><code>// bad\nvar b1, b2 []byte\nfor i, v := range b1 {\n   b2[i] = v\n}\nfor i := range b1 {\n   b2[i] = b1[i]\n}\n\n// good\ncopy(b2, b1)\n</code></pre><ul>\n<li>slice新增。</li>\n</ul><pre><code>// bad\nvar a, b []int\nfor _, v := range a {\n    b = append(b, v)\n}\n\n// good\nvar a, b []int\nb = append(b, a...)\n</code></pre><h3>4.3 结构体</h3><ul>\n<li>struct初始化。</li>\n</ul><p>struct以多行格式初始化。</p><pre><code>type user struct {\n\tId   int64\n\tName string\n}\n\nu1 := user{100, &quot;Colin&quot;}\n\nu2 := user{\n    Id:   200,\n    Name: &quot;Lex&quot;,\n}\n</code></pre><h2>5. 控制结构</h2><h3>5.1 if</h3><ul>\n<li>if 接受初始化语句，约定如下方式建立局部变量。</li>\n</ul><pre><code>if err := loadConfig(); err != nil {\n\t// error handling\n\treturn err\n}\n</code></pre><ul>\n<li>if 对于bool类型的变量，应直接进行真假判断。</li>\n</ul><pre><code>var isAllow bool\nif isAllow {\n\t// normal code\n}\n</code></pre><h3>5.2 for</h3><ul>\n<li>采用短声明建立局部变量。</li>\n</ul><pre><code>sum := 0\nfor i := 0; i &lt; 10; i++ {\n    sum += 1\n}\n</code></pre><ul>\n<li>不要在 for 循环里面使用 defer，defer只有在函数退出时才会执行。</li>\n</ul><pre><code>// bad\nfor file := range files {\n\tfd, err := os.Open(file)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fd.Close()\n\t// normal code\n}\n\n// good\nfor file := range files {\n\tfunc() {\n\t\tfd, err := os.Open(file)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer fd.Close()\n\t\t// normal code\n\t}()\n}\n</code></pre><h3>5.3 range</h3><ul>\n<li>如果只需要第一项（key），就丢弃第二个。</li>\n</ul><pre><code>for key := range keys {\n// normal code\n}\n</code></pre><ul>\n<li>如果只需要第二项，则把第一项置为下划线。</li>\n</ul><pre><code>sum := 0\nfor _, value := range array {\n    sum += value\n}\n</code></pre><h3>5.4 switch</h3><ul>\n<li>必须要有default。</li>\n</ul><pre><code>switch os := runtime.GOOS; os {\n    case &quot;linux&quot;:\n        fmt.Println(&quot;Linux.&quot;)\n    case &quot;darwin&quot;:\n        fmt.Println(&quot;OS X.&quot;)\n    default:\n        fmt.Printf(&quot;%s.\\n&quot;, os)\n}\n</code></pre><h3>5.5 goto</h3><ul>\n<li>业务代码禁止使用 <code>goto</code> 。</li>\n<li>框架或其他底层源码尽量不用。</li>\n</ul><h2>6. 函数</h2><ul>\n<li>\n<p>传入变量和返回变量以小写字母开头。</p>\n</li>\n<li>\n<p>函数参数个数不能超过5个。</p>\n</li>\n<li>\n<p>函数分组与顺序</p>\n<ul>\n<li>函数应按粗略的调用顺序排序。</li>\n<li>同一文件中的函数应按接收者分组。</li>\n</ul>\n</li>\n<li>\n<p>尽量采用值传递，而非指针传递。</p>\n</li>\n<li>\n<p>传入参数是 map、slice、chan、interface ，不要传递指针。</p>\n</li>\n</ul><h3>6.1 函数参数</h3><ul>\n<li>如果函数返回相同类型的两个或三个参数，或者如果从上下文中不清楚结果的含义，使用命名返回，其他情况不建议使用命名返回，例如：</li>\n</ul><pre><code>func coordinate() (x, y float64, err error) {\n\t// normal code\n}\n</code></pre><ul>\n<li>传入变量和返回变量都以小写字母开头。</li>\n<li>尽量用值传递，非指针传递。</li>\n<li>参数数量均不能超过5个。</li>\n<li>多返回值最多返回三个，超过三个请使用 struct。</li>\n</ul><h3>6.2 defer</h3><ul>\n<li>当存在资源创建时，应紧跟defer释放资源(可以大胆使用defer，defer在Go1.14版本中，性能大幅提升，defer的性能损耗即使在性能敏感型的业务中，也可以忽略)。</li>\n<li>先判断是否错误，再defer释放资源，例如：</li>\n</ul><pre><code>rep, err := http.Get(url)\nif err != nil {\n    return err\n}\n\ndefer resp.Body.Close()\n</code></pre><h3>6.3 方法的接收器</h3><ul>\n<li>推荐以类名第一个英文首字母的小写作为接收器的命名。</li>\n<li>接收器的命名在函数超过20行的时候不要用单字符。</li>\n<li>接收器的命名不能采用me、this、self这类易混淆名称。</li>\n</ul><h3>6.4 嵌套</h3><ul>\n<li>嵌套深度不能超过4层。</li>\n</ul><h3>6.5 变量命名</h3><ul>\n<li>变量声明尽量放在变量第一次使用的前面，遵循就近原则。</li>\n<li>如果魔法数字出现超过两次，则禁止使用，改用一个常量代替，例如：</li>\n</ul><pre><code>// PI ...\nconst Prise = 3.14\n\nfunc getAppleCost(n float64) float64 {\n\treturn Prise * n\n}\n\nfunc getOrangeCost(n float64) float64 {\n\treturn Prise * n\n}\n</code></pre><h2>7.   GOPATH 设置规范</h2><ul>\n<li>Go 1.11 之后，弱化了 GOPATH 规则，已有代码（很多库肯定是在1.11之前建立的）肯定符合这个规则，建议保留 GOPATH 规则，便于维护代码。</li>\n<li>建议只使用一个 GOPATH，不建议使用多个 GOPATH。如果使用多个GOPATH，编译生效的 bin 目录是在第一个 GOPATH 下。</li>\n</ul><h2>8. 依赖管理</h2><ul>\n<li>Go 1.11 以上必须使用 Go Modules。</li>\n<li>使用Go Modules作为依赖管理的项目时，不建议提交vendor目录。</li>\n<li>使用Go Modules作为依赖管理的项目时，必须提交go.sum文件。</li>\n</ul><h2>9. 最佳实践</h2><ul>\n<li>尽量少用全局变量，而是通过参数传递，使每个函数都是“无状态”的。这样可以减少耦合，也方便分工和单元测试。</li>\n<li>在编译时验证接口的符合性，例如：</li>\n</ul><pre><code>type LogHandler struct {\n  h   http.Handler\n  log *zap.Logger\n}\nvar _ http.Handler = LogHandler{}\n</code></pre><ul>\n<li>服务器处理请求时，应该创建一个context，保存该请求的相关信息（如requestID），并在函数调用链中传递。</li>\n</ul><h3>9.1 性能</h3><ul>\n<li>string 表示的是不可变的字符串变量，对 string 的修改是比较重的操作，基本上都需要重新申请内存。所以，如果没有特殊需要，需要修改时多使用 []byte。</li>\n<li>优先使用 strconv 而不是 fmt。</li>\n</ul><h3>9.2 注意事项</h3><ul>\n<li>append 要小心自动分配内存，append 返回的可能是新分配的地址。</li>\n<li>如果要直接修改 map 的 value 值，则 value 只能是指针，否则要覆盖原来的值。</li>\n<li>map 在并发中需要加锁。</li>\n<li>编译过程无法检查 interface{} 的转换，只能在运行时检查，小心引起 panic。</li>\n</ul><h2>总结</h2><p>这一讲，我向你介绍了九类常用的编码规范。但今天的最后，我要在这里提醒你一句：规范是人定的，你也可以根据需要，制定符合你项目的规范。这也是我在之前的课程里一直强调的思路。但同时我也建议你采纳这些业界沉淀下来的规范，并通过工具来确保规范的执行。</p><p>今天的内容就到这里啦，欢迎你在下面的留言区谈谈自己的看法，我们下一讲见。</p>","neighbors":{"left":{"article_title":"51 | 基于 GitHub Actions 的 CI 实战","id":422735},"right":{"article_title":"特别放送 | 给你一份Go项目中最常用的Makefile核心语法","id":389115}},"comments":[{"had_liked":false,"id":298102,"user_name":"叫我去学习好么","can_delete":false,"product_type":"c1","uid":2074982,"ip_address":"","ucode":"C51B86D507E887","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a9/66/2df6b3fe.jpg","comment_is_top":false,"comment_ctime":1623913799,"is_pvip":false,"replies":[{"id":"108224","content":"如果传指针存在被意外修改的风险，如果结构体很大，也可以传指针","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623993746,"ip_address":"","comment_id":298102,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44573586759","product_id":100079601,"comment_content":"为什么函数参数尽量不用指针传递？如果是一个比较大的结构体，传指针不是更好吗？","like_count":11,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522016,"discussion_content":"如果传指针存在被意外修改的风险，如果结构体很大，也可以传指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623993746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353114,"user_name":"NULL","can_delete":false,"product_type":"c1","uid":1191550,"ip_address":"陕西","ucode":"2A323DD05352BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/7e/ebc28e10.jpg","comment_is_top":false,"comment_ctime":1659177903,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14544079791","product_id":100079601,"comment_content":"不认同的地方:<br>4.1字符串, 空字符串的判断<br>两种方式都可以<br>详见: https:&#47;&#47;stackoverflow.com&#47;questions&#47;18594330&#47;what-is-the-best-way-to-test-for-an-empty-string-in-go<br><br>4.2切片, 空 slice 判断<br>应该是&quot;如果你需要测试一个slice是否是空的，使用len(s) == 0来判断，而不应该用s == nil来判断&quot;<br>详见Go语言圣经: https:&#47;&#47;books.studygolang.com&#47;gopl-zh&#47;ch4&#47;ch4-02.html<br><br>描述不够准确定地方:<br>4.2切片, 声明 slice<br>描述不够准确<br>详见: https:&#47;&#47;github.com&#47;golang&#47;go&#47;wiki&#47;CodeReviewComments#declaring-empty-slices<br>补充: 可以根据需要指定cap, 减少内存分配次数, 降低gc压力, 如 make([]int, 0, 100)<br><br>6.函数, 尽量采用值传递，而非指针传递。<br>描述不够准确<br>详见: https:&#47;&#47;github.com&#47;golang&#47;go&#47;wiki&#47;CodeReviewComments#pass-values<br><br>6.1 函数参数, 尽量用值传递，非指针传递。<br>描述不够准确<br>详见: https:&#47;&#47;github.com&#47;golang&#47;go&#47;wiki&#47;CodeReviewComments#pass-values<br><br>6.函数, 传入参数是 map、slice、chan、interface ，不要传递指针。<br>描述不够准确, 如果是slice, 并且有append操作, 并且期望改变可以影响原函数, 应当传递指针<br>这与slice的底层结构有关, 两个value, 一个 pointer<br>这在&quot;9.2 注意事项&quot;第一条也有说明<br>详见: https:&#47;&#47;github.com&#47;golang&#47;go&#47;blob&#47;master&#47;src&#47;runtime&#47;slice.go#L22<br><br>9. 最佳实践, 在编译时验证接口的符合性，例如：<br>描述不够准确<br>详见: https:&#47;&#47;github.com&#47;xxjwxc&#47;uber_go_guide_cn#toc8","like_count":4,"discussions":[{"author":{"id":1191550,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2e/7e/ebc28e10.jpg","nickname":"NULL","note":"","ucode":"2A323DD05352BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582309,"discussion_content":"4.2切片, 空 slice 判断\n&#34;When designing interfaces, avoid making a distinction between a nil slice and a non-nil, zero-length slice, as this can lead to subtle programming errors.&#34;\n详见: https://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-slices","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659361416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298059,"user_name":"Vackine","can_delete":false,"product_type":"c1","uid":1139588,"ip_address":"","ucode":"8E412EE82D3B59","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/84/f45c4af9.jpg","comment_is_top":false,"comment_ctime":1623898510,"is_pvip":false,"replies":[{"id":"108228","content":"如果不指定切片的cap，建议用var s []string","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623994220,"ip_address":"","comment_id":298059,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14508800398","product_id":100079601,"comment_content":"在1.2初始化结构体引用时，给的案例里面bad 和good的sval的方式是一模一样的啊？还有在切片初始化时不都建议提前制定容量，然后后面为什么在声明slice是时候，又不建议make的方式而用var 的方式？","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522001,"discussion_content":"如果不指定切片的cap，建议用var s []string","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623994220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305791,"user_name":"josephzxy","can_delete":false,"product_type":"c1","uid":2628969,"ip_address":"","ucode":"71E8006733420D","user_header":"https://static001.geekbang.org/account/avatar/00/28/1d/69/c21d2644.jpg","comment_is_top":false,"comment_ctime":1628164041,"is_pvip":false,"replies":[{"id":"110909","content":"比如：_version，看到这种命令方式，你就知道：这是个全局的未导出的变量。可以协助你使用变量，也就是通过变量名，你能知道该变量的作用域以及是否可导出。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1628525440,"ip_address":"","comment_id":305791,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10218098633","product_id":100079601,"comment_content":"想问1.2节里为什么“对于未导出的顶层常量和变量，使用 _ 作为前缀。”，有什么作用吗？首字母小写不是已经表明是未导出(unexported)了吗？谢谢！","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524514,"discussion_content":"比如：_version，看到这种命令方式，你就知道：这是个全局的未导出的变量。可以协助你使用变量，也就是通过变量名，你能知道该变量的作用域以及是否可导出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628525440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2970338,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/52/e2/e77b4cd4.jpg","nickname":"智点互融","note":"","ucode":"E4BE93FEA7920B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":561873,"discussion_content":"看到小写字母不就知道作用域和不能导出了嘛，感觉这样多此一举呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649734588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":524514,"ip_address":""},"score":561873,"extra":""}]},{"author":{"id":1037891,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/43/0704d7db.jpg","nickname":"cc","note":"","ucode":"68E69205A7D5BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559968,"discussion_content":"这个我也感觉很莫名其妙，go 里小写字母开头的不都已经限制了作用域了么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649085156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299490,"user_name":"Seven","can_delete":false,"product_type":"c1","uid":1002276,"ip_address":"","ucode":"7527C875C8A938","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/24/8c9eaf7f.jpg","comment_is_top":false,"comment_ctime":1624676306,"is_pvip":false,"replies":[{"id":"108622","content":"目前没有Github链接。我们考虑下，感谢建议。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624705098,"ip_address":"","comment_id":299490,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10214610898","product_id":100079601,"comment_content":"为方便团队都使用这份规范，需要写到开发文档里。请问这篇规范可以给个GitHub链接吗？这样方便更多人用，当然注明来自本课程也可以让更多人慕名学习。","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522453,"discussion_content":"目前没有Github链接。我们考虑下，感谢建议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624705098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299209,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c1","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":false,"comment_ctime":1624513942,"is_pvip":false,"replies":[{"id":"108632","content":"有的，看下iam项目&#47;README，有我微信号，加我，我拉你","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624708674,"ip_address":"","comment_id":299209,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10214448534","product_id":100079601,"comment_content":"老师，请问有学习班的群吗？","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522364,"discussion_content":"有的，看下iam项目/README，有我微信号，加我，我拉你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624708674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264401,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4b/11/d7e08b5b.jpg","nickname":"dll","note":"","ucode":"5773CBC8BFB91F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381420,"discussion_content":"还有班群，nice，一会加起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625045335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298426,"user_name":"Q","can_delete":false,"product_type":"c1","uid":2438942,"ip_address":"","ucode":"1A20AD48EE2B8C","user_header":"https://static001.geekbang.org/account/avatar/00/25/37/1e/9b6554b6.jpg","comment_is_top":false,"comment_ctime":1624095868,"is_pvip":false,"replies":[{"id":"108313","content":"因为nil的silce，len(slice)也是0。<br><br>空slice指的是：slice=make([]int,0)这种情况，也即是：slice不为nil，但长度为0的slice。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624209115,"ip_address":"","comment_id":298426,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10214030460","product_id":100079601,"comment_content":"空slice那里为啥要 先判断slice != nil 再判断 len(slice) &gt; 0 呢？不判断不可以吗？","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522136,"discussion_content":"因为nil的silce，len(slice)也是0。\n\n空slice指的是：slice=make([]int,0)这种情况，也即是：slice不为nil，但长度为0的slice。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624209115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1037891,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/43/0704d7db.jpg","nickname":"cc","note":"","ucode":"68E69205A7D5BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559969,"discussion_content":"这个又有些奇怪了，在 go 里经常是不需要区分 nil slice 和 empty slice 的。有什么场景下是需要检查 slice 是 empty 但不是 nil 的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649085307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1191550,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2e/7e/ebc28e10.jpg","nickname":"NULL","note":"","ucode":"2A323DD05352BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1037891,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/43/0704d7db.jpg","nickname":"cc","note":"","ucode":"68E69205A7D5BC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582072,"discussion_content":"&#34;When designing interfaces, avoid making a distinction between a nil slice and a non-nil, zero-length slice, as this can lead to subtle programming errors.&#34;\nhttps://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-slices","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659177983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":559969,"ip_address":"陕西"},"score":582072,"extra":""},{"author":{"id":1191550,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2e/7e/ebc28e10.jpg","nickname":"NULL","note":"","ucode":"2A323DD05352BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1037891,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/43/0704d7db.jpg","nickname":"cc","note":"","ucode":"68E69205A7D5BC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582073,"discussion_content":"&#34;如果你需要测试一个slice是否是空的，使用len(s) == 0来判断，而不应该用s == nil来判断&#34;\n详见Go语言圣经: https://books.studygolang.com/gopl-zh/ch4/ch4-02.html","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659178644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":559969,"ip_address":"陕西"},"score":582073,"extra":""}]}]},{"had_liked":false,"id":298117,"user_name":"不明真相的群众","can_delete":false,"product_type":"c1","uid":2267730,"ip_address":"","ucode":"046A7D345171B8","user_header":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","comment_is_top":false,"comment_ctime":1623916862,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10213851454","product_id":100079601,"comment_content":"作为一个新手，只能在实际应用的时候 再看翻看这章节","like_count":2},{"had_liked":false,"id":298096,"user_name":"Geek_b797c1","can_delete":false,"product_type":"c1","uid":2652269,"ip_address":"","ucode":"A70678DCF7EA72","user_header":"","comment_is_top":false,"comment_ctime":1623911160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10213845752","product_id":100079601,"comment_content":"催更：更新太慢了","like_count":2},{"had_liked":false,"id":298009,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1623889454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10213824046","product_id":100079601,"comment_content":"终极规范：当遇到规范问题不知道如何处理时，立马查看文档！","like_count":2},{"had_liked":false,"id":304314,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1058920,"ip_address":"","ucode":"F00ADED91FC429","user_header":"https://static001.geekbang.org/account/avatar/00/10/28/68/774b1619.jpg","comment_is_top":false,"comment_ctime":1627352477,"is_pvip":false,"replies":[{"id":"110219","content":"基本上与这个项目保持一致：https:&#47;&#47;github.com&#47;golang-standards&#47;project-layout<br><br>可以加我微信，我们详细交流下。项目根目录下的README文件中，有我微信号","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627597790,"ip_address":"","comment_id":304314,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5922319773","product_id":100079601,"comment_content":"请问go web 的项目结构目录有标准吗？ 查资料查到一个社区标准（https:&#47;&#47;github.com&#47;golang-standards&#47;project-layout），但是褒贬不一。所以想问问您那的结构目录是怎么标准化的？","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524011,"discussion_content":"基本上与这个项目保持一致：https://github.com/golang-standards/project-layout\n\n可以加我微信，我们详细交流下。项目根目录下的README文件中，有我微信号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627597790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300203,"user_name":"dll","can_delete":false,"product_type":"c1","uid":1264401,"ip_address":"","ucode":"5773CBC8BFB91F","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/11/d7e08b5b.jpg","comment_is_top":false,"comment_ctime":1625045307,"is_pvip":true,"replies":[{"id":"108922","content":"统一规范即可，要么全写中文，要么全写英文","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1625273292,"ip_address":"","comment_id":300203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920012603","product_id":100079601,"comment_content":"注释写中文才能说清楚的情况，该怎么规范注释呢","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522675,"discussion_content":"统一规范即可，要么全写中文，要么全写英文","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625273292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299173,"user_name":"苳冬","can_delete":false,"product_type":"c1","uid":2450405,"ip_address":"","ucode":"747AFE11F36D10","user_header":"","comment_is_top":false,"comment_ctime":1624499394,"is_pvip":false,"replies":[{"id":"108633","content":"那是不是可以把API换成更具体的API名字呢","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624708703,"ip_address":"","comment_id":299173,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5919466690","product_id":100079601,"comment_content":"驼峰命名 APIClient、UserID，如果遇到API+ID就是APIID这样连续两个全大写可读性很低啊","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522353,"discussion_content":"那是不是可以把API换成更具体的API名字呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624708703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298592,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1624208484,"is_pvip":false,"replies":[{"id":"108354","content":"都不可以","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624286399,"ip_address":"","comment_id":298592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5919175780","product_id":100079601,"comment_content":"不要使用相对路径引入包，例如 import ..&#47;util&#47;net 。<br>请问这里是不是指不要用.或者..这种符号？引用内部子目录下的其他package应该还是允许的吧？","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522180,"discussion_content":"都不可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624286399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298249,"user_name":"不明真相的群众","can_delete":false,"product_type":"c1","uid":2267730,"ip_address":"","ucode":"046A7D345171B8","user_header":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","comment_is_top":false,"comment_ctime":1623981563,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5918948859","product_id":100079601,"comment_content":"日常催更","like_count":1},{"had_liked":false,"id":298093,"user_name":"dch666","can_delete":false,"product_type":"c1","uid":1318336,"ip_address":"","ucode":"21E3890CD66485","user_header":"https://static001.geekbang.org/account/avatar/00/14/1d/c0/978fc470.jpg","comment_is_top":false,"comment_ctime":1623909683,"is_pvip":true,"replies":[{"id":"108227","content":"用 s == &quot;&quot;","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623993866,"ip_address":"","comment_id":298093,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5918876979","product_id":100079601,"comment_content":"判断空字符串用 len(s) == 0 比 s == &quot;&quot; 好在哪呢","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522012,"discussion_content":"用 s == &amp;quot;&amp;quot;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623993866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109522,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/12/77ddaeb8.jpg","nickname":"Yabo","note":"","ucode":"D193B6AB9686D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379672,"discussion_content":"https://stackoverflow.com/questions/18594330/what-is-the-best-way-to-test-for-an-empty-string-in-go  这里有一份说明，编译器针对这两种情况，编译出来的代码是相同的，所以这两种怎么用都行。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1624068919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385186,"discussion_content":"同问，好在哪里呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626935973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1143338,"avatar":"https://static001.geekbang.org/account/avatar/00/11/72/2a/c4042a20.jpg","nickname":"骑蜗牛的勇士","note":"","ucode":"2702AEEA14BC4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380351,"discussion_content":"其实本质是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624451848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298034,"user_name":"雪洛","can_delete":false,"product_type":"c1","uid":2647554,"ip_address":"","ucode":"61F9B63C77F8A5","user_header":"https://static001.geekbang.org/account/avatar/00/28/66/02/ff4638dc.jpg","comment_is_top":false,"comment_ctime":1623894127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5918861423","product_id":100079601,"comment_content":"站在巨人的肩膀，get ！","like_count":1},{"had_liked":false,"id":298029,"user_name":"夏夜星语","can_delete":false,"product_type":"c1","uid":1017644,"ip_address":"","ucode":"586BF3149A9D1D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/2c/013afd74.jpg","comment_is_top":false,"comment_ctime":1623893586,"is_pvip":false,"replies":[{"id":"108229","content":"也不算是理论课，会介绍iam背后的设计思路、开发经验、知识等","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623994269,"ip_address":"","comment_id":298029,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5918860882","product_id":100079601,"comment_content":"请问我们现在的iam 项目代码已经完全写完了嘛，以后就都是这种理论课嘛？","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521993,"discussion_content":"也不算是理论课，会介绍iam背后的设计思路、开发经验、知识等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623994269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1017644,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/2c/013afd74.jpg","nickname":"夏夜星语","note":"","ucode":"586BF3149A9D1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379589,"discussion_content":"后期是否会讲解代码呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624002083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346197,"user_name":"oneWalker","can_delete":false,"product_type":"c1","uid":1368775,"ip_address":"","ucode":"0FC573E3243760","user_header":"https://static001.geekbang.org/account/avatar/00/14/e2/c7/3e1d396e.jpg","comment_is_top":false,"comment_ctime":1652886389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652886389","product_id":100079601,"comment_content":"这个规范可以给一份word版本的吗？或者推荐一下来源，我好做成flashcard培养编码规范习惯。","like_count":0},{"had_liked":false,"id":340629,"user_name":"Geek_f23c82","can_delete":false,"product_type":"c1","uid":2725008,"ip_address":"","ucode":"40BABEF7078F37","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIW5xLKMIwlibBXdP5sGVqhXAGuLYk7XFBrhzkFytlKicjNpSHIKXQclDUlSbD9s2HDuOiaBXslCqVbg/132","comment_is_top":false,"comment_ctime":1648979914,"is_pvip":false,"replies":[{"id":"125548","content":"不冲突的","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1651079618,"ip_address":"","comment_id":340629,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648979914","product_id":100079601,"comment_content":"1.2和6.5的第一条似乎是冲突的","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568244,"discussion_content":"不冲突的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651079618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340622,"user_name":"Geek_f23c82","can_delete":false,"product_type":"c1","uid":2725008,"ip_address":"","ucode":"40BABEF7078F37","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIW5xLKMIwlibBXdP5sGVqhXAGuLYk7XFBrhzkFytlKicjNpSHIKXQclDUlSbD9s2HDuOiaBXslCqVbg/132","comment_is_top":false,"comment_ctime":1648974989,"is_pvip":false,"replies":[{"id":"125547","content":"bytes.Compare性能更高","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1651079553,"ip_address":"","comment_id":340622,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648974989","product_id":100079601,"comment_content":"麻烦问下为什么在判断字符串是否相等时，bytes.Compare比bytes.Equal好？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568243,"discussion_content":"bytes.Compare性能更高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651079553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337619,"user_name":"Geek_d63f2e","can_delete":false,"product_type":"c1","uid":2676077,"ip_address":"","ucode":"697E05E20C4AA1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJObaUyY2wD0l1dvw72MHHEZTyse5zQicr7QmOpc9ydNg73yseUICfUMQ5libfkHcDriaslnh6nB1LZw/132","comment_is_top":false,"comment_ctime":1646918847,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1646918847","product_id":100079601,"comment_content":"&#47;&#47; goodfor file := range files {  func() {    fd, err := os.Open(file)    if err != nil {      return err    }    defer fd.Close()    &#47;&#47; normal code  }()}<br>这段代码有bug，for 内部func是不是仅仅会打开最后一个","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555714,"discussion_content":"这里是串行打开的，没有使用go func(){}()这种调用。所以都会打开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647040269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329992,"user_name":"小灰","can_delete":false,"product_type":"c1","uid":1130729,"ip_address":"","ucode":"1AB4E3AEDEE7FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/e9/29dfa621.jpg","comment_is_top":false,"comment_ctime":1641716774,"is_pvip":true,"replies":[{"id":"120947","content":"可以按你觉得方便理解的名字来","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1642434238,"ip_address":"","comment_id":329992,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641716774","product_id":100079601,"comment_content":"不太明白，为什么 &quot;pi&quot; 示例那里的变量名是 Price,不是 &quot;PI&quot; 这个变量名更好理解吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546850,"discussion_content":"可以按你觉得方便理解的名字来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642434238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325355,"user_name":"jxs1211","can_delete":false,"product_type":"c1","uid":1101006,"ip_address":"","ucode":"B7F1F2D84389E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","comment_is_top":false,"comment_ctime":1638930090,"is_pvip":false,"replies":[{"id":"118477","content":"没太理解问题，建议你写个简单的测试函数测试下。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639455127,"ip_address":"","comment_id":325355,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638930090","product_id":100079601,"comment_content":"如果要直接修改 map 的 value 值，则 value 只能是指针，否则要覆盖原来的值。<br>传入时会复制的map的副本，类型为指针的value被修改，原map对应的value也被修改，如果这个value不是指针类型，修改后不是也会覆盖掉原来map的value吗","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538617,"discussion_content":"没太理解问题，建议你写个简单的测试函数测试下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639455127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325346,"user_name":"jxs1211","can_delete":false,"product_type":"c1","uid":1101006,"ip_address":"","ucode":"B7F1F2D84389E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","comment_is_top":false,"comment_ctime":1638928699,"is_pvip":false,"replies":[{"id":"118338","content":"http.Handler：<br>type Handler interface {     <br>    ServeHTTP(ResponseWriter, *Request)     <br>} <br><br>通过var _ http.Handler = LogHandler{}可以确保LogHandler实现了ServeHTTP方法，如果没有实现编译会报错。<br><br>使用var _ http.Handler = LogHandler{}有以下2个好处：<br>1. 确保LogHandler实现ServeHTTP方法，如果没有实现，在编译阶段就发现问题，提前发现问题。<br>2. 有一定的文档说明功能，说明LogHandler的期望的用途。<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639399036,"ip_address":"","comment_id":325346,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1638928699","product_id":100079601,"comment_content":"在编译时验证接口的符合性，例如：<br>type LogHandler struct {<br>  h   http.Handler<br>  log *zap.Logger<br>}<br>var _ http.Handler = LogHandler{}<br>这里说的接口是指什么，没有太理解，能否给一个更具体的例子<br>","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538331,"discussion_content":"http.Handler：\ntype Handler interface {     \n    ServeHTTP(ResponseWriter, *Request)     \n} \n\n通过var _ http.Handler = LogHandler{}可以确保LogHandler实现了ServeHTTP方法，如果没有实现编译会报错。\n\n使用var _ http.Handler = LogHandler{}有以下2个好处：\n1. 确保LogHandler实现ServeHTTP方法，如果没有实现，在编译阶段就发现问题，提前发现问题。\n2. 有一定的文档说明功能，说明LogHandler的期望的用途。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639399037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1101006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","nickname":"jxs1211","note":"","ucode":"B7F1F2D84389E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":538666,"discussion_content":"这里说的具备文档说明功能，是指loghandler使用者提供内部嵌套的接口提供的功能吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639479622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538331,"ip_address":""},"score":538666,"extra":""}]}]},{"had_liked":false,"id":324652,"user_name":"不平凡的路","can_delete":false,"product_type":"c1","uid":2263313,"ip_address":"","ucode":"D17385D5DDC84B","user_header":"https://static001.geekbang.org/account/avatar/00/22/89/11/4300024e.jpg","comment_is_top":false,"comment_ctime":1638526920,"is_pvip":false,"replies":[{"id":"118474","content":" &amp;T{}和new(T)二者没有什么不同。一定要区别下，就是下面的区别：<br>1. &amp;T{}只能用来初始化结构体，new(T)可以初始化结构体之外的类型<br>2. new(T)可以直接用在表达式中。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639454719,"ip_address":"","comment_id":324652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638526920","product_id":100079601,"comment_content":"在初始化结构引用时，请使用 &amp;T{}代替 new(T)，以使其与结构体初始化一致。  为什么使用&amp;T 而不是new <br>","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538613,"discussion_content":" &amp;T{}和new(T)二者没有什么不同。一定要区别下，就是下面的区别：\n1. &amp;T{}只能用来初始化结构体，new(T)可以初始化结构体之外的类型\n2. new(T)可以直接用在表达式中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639454719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323225,"user_name":"Archer","can_delete":false,"product_type":"c1","uid":1318227,"ip_address":"","ucode":"D15D84627F1E3E","user_header":"https://static001.geekbang.org/account/avatar/00/14/1d/53/224591fb.jpg","comment_is_top":false,"comment_ctime":1637769421,"is_pvip":true,"replies":[{"id":"117678","content":"我改下哈，改写反馈","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1638362024,"ip_address":"","comment_id":323225,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637769421","product_id":100079601,"comment_content":"包名以及包所在的目录名，不要使用复数，例如，是net&#47;utl，而不是net&#47;urls 这里写错成utl了","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535158,"discussion_content":"我改下哈，改写反馈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638362024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321407,"user_name":"Geek_a15aca","can_delete":false,"product_type":"c1","uid":2435485,"ip_address":"","ucode":"A7FEDA27B029BA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLJ86tichGXtZMLLhicb8V0wJE92xdpQmVW1u06ZkT7BkvxyZMfWcVluyUdMrz0cBIkuX9MhXm2PZOQ/132","comment_is_top":false,"comment_ctime":1636857486,"is_pvip":false,"replies":[{"id":"116883","content":"如果不判断切片 != nil，后面的len(slice)=0，可能是因为slice是nil造成的。<br><br>不过实际开发中，其实len(slice) == 0能满足绝大部分的情况","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1637077234,"ip_address":"","comment_id":321407,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636857486","product_id":100079601,"comment_content":"老师，之前课程中规范提到切片判空始终用len就好了，因为nil切片是一个有效的len为0的切片。所以判断是否为nil是bad的做法，为什么这里需要先判断nil呢？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530490,"discussion_content":"如果不判断切片 != nil，后面的len(slice)=0，可能是因为slice是nil造成的。\n\n不过实际开发中，其实len(slice) == 0能满足绝大部分的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637077234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320145,"user_name":"知鱼君","can_delete":false,"product_type":"c1","uid":1076719,"ip_address":"","ucode":"8B1958BEB5FB2C","user_header":"https://static001.geekbang.org/account/avatar/00/10/6d/ef/08132ab2.jpg","comment_is_top":false,"comment_ctime":1636098745,"is_pvip":false,"replies":[{"id":"116891","content":"其实这个地方都可以，我后面把这个地方优化掉","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1637078495,"ip_address":"","comment_id":320145,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1636098745","product_id":100079601,"comment_content":"老师好，判断空字符串用 len(s) == 0 比 s == &quot;&quot; 好在哪呢","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530520,"discussion_content":"其实这个地方都可以，我后面把这个地方优化掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637078495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314582,"user_name":"Juniper","can_delete":false,"product_type":"c1","uid":1174794,"ip_address":"","ucode":"1BC24554034BD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/0a/18201290.jpg","comment_is_top":false,"comment_ctime":1633241884,"is_pvip":false,"replies":[{"id":"114097","content":"good示例是一个bug，我把这个示例去掉了","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1633666047,"ip_address":"","comment_id":314582,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633241884","product_id":100079601,"comment_content":"字符串去除前后子串的bad示例，strings.TrimPrefix(s1,s2)函数实现：<br>func TrimPrefix(s, prefix string) string {<br>\tif HasPrefix(s, prefix) {<br>\t\treturn s[len(prefix):]<br>\t}<br>\treturn s<br>}<br>可以看到，其实也是调用HasPrefix，然后做字符串切割操作，跟good示例的核心逻辑是一样的。但是当s2不是s1的子串时，bad示例s3就是s1的值，good示例s3是空字符串。我个人反而觉得bad示例更合理点，请老师解答下","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527726,"discussion_content":"good示例是一个bug，我把这个示例去掉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633666047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314059,"user_name":"o9","can_delete":false,"product_type":"c1","uid":1101332,"ip_address":"","ucode":"E373E82A39BBFE","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/14/b488f241.jpg","comment_is_top":false,"comment_ctime":1632821321,"is_pvip":false,"replies":[{"id":"113774","content":"性能差异太小了，可能benchmark还感知不到。<br><br>建议直接看源码实现吧，通过实现能知道性能优劣的","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632846989,"ip_address":"","comment_id":314059,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1632821321","product_id":100079601,"comment_content":"大佬您好 【字符串是否包含子串或字符】 和 【去除前后子串】 <br>我使用 1.16.6 版本 benchmark 了一下 性能几乎没有差别啊","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527561,"discussion_content":"性能差异太小了，可能benchmark还感知不到。\n\n建议直接看源码实现吧，通过实现能知道性能优劣的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632846989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101332,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/14/b488f241.jpg","nickname":"o9","note":"","ucode":"E373E82A39BBFE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398889,"discussion_content":"好的 感谢大佬回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632873694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298395,"user_name":"文涛","can_delete":false,"product_type":"c1","uid":1017692,"ip_address":"","ucode":"891CB44B2155DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/5c/919c1262.jpg","comment_is_top":false,"comment_ctime":1624077486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624077486","product_id":100079601,"comment_content":"最近刚入坑go不久，就尴尬了，不知道为什么go.mod 没有类似package.json或者pom.xml之类，可以定义引入的依赖包范围，这样子可以将test 用例用到的包仅仅用于测试，不是在build里体现。谢谢","like_count":0},{"had_liked":false,"id":298125,"user_name":"action","can_delete":false,"product_type":"c1","uid":1715384,"ip_address":"","ucode":"B40FB6EE37C917","user_header":"","comment_is_top":false,"comment_ctime":1623918434,"is_pvip":false,"replies":[{"id":"108223","content":"typo，我们更新下","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1623993707,"ip_address":"","comment_id":298125,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623918434","product_id":100079601,"comment_content":"建议一行代码不超过 120 行？？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522024,"discussion_content":"typo，我们更新下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623993707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298013,"user_name":"Geek_eedcba","can_delete":false,"product_type":"c1","uid":2532677,"ip_address":"","ucode":"79A7C876116DB0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIHTcUel4NasX3O6RuALtKPIIEMEwSe9dWEicPmUL7cJbRNNnaaRwY9W3E9Wz9KrDA2qYHZ1u3S37Q/132","comment_is_top":false,"comment_ctime":1623891128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623891128","product_id":100079601,"comment_content":"老师要是能提供相关的反例就更好了","like_count":0}]}