{"id":494526,"title":"24 | 实战：让KtHttp支持Flow","content":"<p>你好，我是朱涛。又到了熟悉的实战环节，这一次我们接着来改造KtHttp，让它能够支持协程的Flow API。</p><p>有了前面两次实战的基础，这次我们应该就轻车熟路了。在之前的<a href=\"https://time.geekbang.org/column/article/488985\">4.0版本</a>中，为了让KtHttp支持挂起函数，我们有两种思路，一种是<strong>改造内部</strong>，另一种是<strong>扩展外部</strong>。同理，为了让KtHttp支持Flow，这次的实战也是这两种思路。</p><p>因此，这节课我们仍然会分为两个版本。</p><ul>\n<li>5.0版本，基于4.0版本的代码，从KtHttp的<strong>外部扩展</strong>出Flow的能力。</li>\n<li>6.0版本，<strong>修改KtHttp内部</strong>，让它支持Flow API。</li>\n</ul><p>其实在实际的工作中，我们往往没有权限修改第三方提供的SDK，那么这时候，如果想要让SDK获得Flow的能力，我们就只能借助Kotlin的扩展函数，为它<strong>扩展</strong>出Flow的能力。而对于工程内部的代码，我们希望某个功能模块获得Flow的能力，就可以<strong>直接修改它的源代码</strong>，让它直接支持Flow。</p><p>那么在这节课里，我会同时用这两种手段来扩展并改造KtHttp，为你演示其中的关键步骤。在这个过程中，我也会为你讲解其中的常见误区和陷阱，这样一来，你就可以放心地将Flow应用到你的实际工作中了。</p><p>OK，让我们正式开始吧！</p><h2>5.0版本：Callback转Flow</h2><!-- [[[read_end]]] --><p>在上次的实战课当中，我们在3.0版本里，实现了KtHttp的异步Callback请求。之后在4.0版本里，我们并没有改动KtHttp的源代码，而是直接在KtCall的基础上扩展了<strong>挂起函数</strong>的支持。让我们重新回顾一下之前的代码：</p><pre><code class=\"language-plain\">// 代码段1\n\n// 扩展函数\nsuspend fun &lt;T : Any&gt; KtCall&lt;T&gt;.await(): T =\n//      暴露挂起函数的continuation\n//              ↓\n    suspendCancellableCoroutine { continuation -&gt;\n        val call = call(object : Callback&lt;T&gt; {\n            override fun onSuccess(data: T) {\n                println(\"Request success!\")\n                continuation.resume(data)\n            }\n\n            override fun onFail(throwable: Throwable) {\n                println(\"Request fail!：$throwable\")\n                continuation.resumeWithException(throwable)\n            }\n        })\n\n//          响应取消事件\n//              ↓\n        continuation.invokeOnCancellation {\n            println(\"Call cancelled!\")\n            call.cancel()\n        }\n    }\n</code></pre><p>我们知道，上面这种做法非常适合针对第三方SDK的扩展，而这一切，都要归功于Kotlin的<strong>扩展函数</strong>特性。那么这节课里，我们希望KtHttp支持Flow，其实也同样可以借助扩展函数来实现。Kotlin官方提供了一个API：<strong>callbackFlow</strong>，它就是专门用于将Callback转为Flow的。</p><p>Callback转Flow，用法跟Callback转挂起函数是差不多的。如果你去分析代码段1当中的代码模式，会发现Callback转挂起函数，主要有三个步骤。</p><ul>\n<li>第一步：使用suspendCancellableCoroutine执行Callback代码，等待Callback回调；</li>\n<li>第二步：将Callback回调结果传出去，onSuccess的情况就传结果，onFail的情况就传异常；</li>\n<li>第三步：响应协程取消事件invokeOnCancellation{}。</li>\n</ul><p>所以使用callbackFlow，也是这样三个步骤。如果你看过Google官方写的<a href=\"https://developer.android.com/kotlin/flow#callback\">文档</a>，你可能会写出这样的代码：</p><pre><code class=\"language-plain\">// 代码段2\n\nfun &lt;T : Any&gt; KtCall&lt;T&gt;.asFlow(): Flow&lt;T&gt; = callbackFlow {\n    // 调用Callback\n    val call = call(object : Callback&lt;T&gt; {\n        override fun onSuccess(data: T) {\n            // 1，传递成功数据，报错！\n            offer(data)\n        }\n\n        override fun onFail(throwable: Throwable) {\n            // 2，传递失败数据\n            close(throwable)\n        }\n\n    })\n\n    // 3，响应协程取消\n    awaitClose {\n        call.cancel()\n    }\n}\n</code></pre><p>在这段代码里，callbackFlow的使用步骤也是分了三步。不过，由于Google官方写的文档已经有些过时了，如果你按照文档来写，会发现注释1处的代码其实会报错，IDE会提示应该使用trySend()替代offer()。</p><p>所以我们要再来改一改：</p><pre><code class=\"language-plain\">// 代码段3\n\nfun &lt;T : Any&gt; KtCall&lt;T&gt;.asFlow(): Flow&lt;T&gt; = callbackFlow {\n    val call = call(object : Callback&lt;T&gt; {\n        override fun onSuccess(data: T) {\n            // 1\n            trySend(data)\n        }\n\n        override fun onFail(throwable: Throwable) {\n            // 2\n            close(throwable)\n        }\n\n    })\n\n    awaitClose {\n        call.cancel()\n    }\n}\n</code></pre><p>那么从上面的代码中，你会发现，callbackFlow的底层用到了Channel，所以你才可以使用trySend()这样的API。这个API我在<a href=\"https://time.geekbang.org/column/article/491021\">第19讲</a>里提到过，它其实就是Channel.send()的<strong>非挂起函数</strong>版本的API。</p><p>这样改完以后，我们的代码就已经没有明显报错了。但，它仍然还有优化空间，对应的地方我已经用注释标记出来了。</p><p>我们来看一下注释1，这里使用trySend()，虽然在这个案例当中用这个API确实没问题，但在大部分场景下，它其实是不够稳妥的。你可以查看一下它的源码文档，会看到它的返回值类型是<strong>ChannelResult</strong>，代表trySend()的执行结果是成功还是失败。</p><pre><code class=\"language-plain\">// 代码段4\npublic fun trySend(element: E): ChannelResult&lt;Unit&gt;\n</code></pre><p>也就是说，如果我们往Channel当中成功地添加了元素，那么trySend()的返回值就是成功，如果当前的Channel管道已经满了，那么trySend()的返回值就是失败。</p><p>其实，当Channel管道容量已满的时候，我们更希望trySend()可以多等等，直到管道容量空闲以后再返回成功。所以这时候，我们可以使用 <strong>trySendBlocking()</strong> 来替代它。它是Kotlin协程1.5出现的一个新的API。</p><pre><code class=\"language-plain\">// 代码段5\n\nfun &lt;T : Any&gt; KtCall&lt;T&gt;.asFlow(): Flow&lt;T&gt; = callbackFlow {\n    val call = call(object : Callback&lt;T&gt; {\n        override fun onSuccess(data: T) {\n            // 1，变化在这里\n            trySendBlocking(data)\n        }\n\n        override fun onFail(throwable: Throwable) {\n            // 2\n            close(throwable)\n        }\n\n    })\n\n    awaitClose {\n        call.cancel()\n    }\n}\n</code></pre><p>不过，这里我们仅仅只是改为trySendBlocking()仍然还不够，让我们来运行一下程序，看看问题出在哪里：</p><pre><code class=\"language-plain\">// 代码段6\n\ninterface ApiServiceV5 {\n    @GET(\"/repo\")\n    fun repos(\n        @Field(\"lang\") lang: String,\n        @Field(\"since\") since: String\n    ): KtCall&lt;RepoList&gt;\n}\n\nfun main() = runBlocking {\n    testFlow()\n}\n\nprivate suspend fun testFlow() =\n    KtHttpV5.create(ApiServiceV5::class.java)\n        .repos(lang = \"Kotlin\", since = \"weekly\")\n        .asFlow()\n        .catch { println(\"Catch: $it\") }\n        .collect {\n        println(it)\n    }\n\n\n\n/*\n输出正常\n程序不会终止\n*/\n</code></pre><p>其实，问题的原因也很简单，由于callbackFlow的底层是Channel实现的，在我们用完它以后，应该主动将其关闭或者释放。不然的话，它就会一直<strong>占用计算机资源</strong>。所以这时候，我们可以进一步完善trySendBlocking()这部分的代码。</p><pre><code class=\"language-plain\">// 代码段7\n\nfun &lt;T : Any&gt; KtCall&lt;T&gt;.asFlow(): Flow&lt;T&gt; = callbackFlow {\n    val call = call(object : Callback&lt;T&gt; {\n        override fun onSuccess(data: T) {\n            // 1，变化在这里\n            trySendBlocking(data)\n                .onSuccess { close() }\n                .onFailure { close(it) }\n        }\n\n        override fun onFail(throwable: Throwable) {\n            close(throwable)\n        }\n\n    })\n\n    awaitClose {\n        call.cancel()\n    }\n}\n\n/*\n输出结果\n输出正常\n程序等待一会后自动终止\n*/\n</code></pre><p>上面代码中的onSuccess、onFailure其实就相当于回调，在这里，不管是成功还是失败，我们都主动把callbackFlow当中的Channel关闭。这样一来，程序就可以正常终止了。</p><blockquote>\n<p>提示：在大部分场景下trySendBlocking()会比trySend()更稳妥一些，因为它会尽可能发送成功。但在某些特殊情况下，trySend()也有它的优势，因为它不会出现阻塞问题。</p>\n</blockquote><p>好，现在，5.0版本的代码其实就已经算是合格了。不过，我还想给你介绍下callbackFlow的一些使用细节：<strong>close()与close(throwable)</strong>。</p><p>close()这个方法，我们既可以传入异常，也可以不传入。不过，这两者在callbackFlow当中是有差异的。如果你将代码段7当中所有的close(throwable)都改为不传异常的话，程序代码也会出现问题。</p><pre><code class=\"language-plain\">// 代码段8\n// 错误示范！错误示范！错误示范！\n\nfun main() = runBlocking {\n    testFlow()\n}\n\nprivate suspend fun testFlow() =\n    KtHttpV5.create(ApiServiceV5::class.java)\n        .repos(lang = \"Kotlin\", since = \"weekly\")\n        .asFlow()\n        .catch { println(\"Catch: $it\") }\n        .collect {\n            println(it)\n        }\n\nfun &lt;T : Any&gt; KtCall&lt;T&gt;.asFlow(): Flow&lt;T&gt; = callbackFlow {\n    val call = call(object : Callback&lt;T&gt; {\n        override fun onSuccess(data: T) {\n            trySendBlocking(data)\n                .onSuccess { close() }\n                .onFailure {\n                    // 变化在这里\n                    close()\n                }\n        }\n\n        override fun onFail(throwable: Throwable) {\n            // 变化在这里\n            close()\n        }\n    })\n\n    awaitClose {\n        call.cancel()\n    }\n}\n\n/*\n断网执行以上代码：\n不会有任何结果，连异常信息都没有\n*/\n</code></pre><p>在以上代码中，我们断网执行了这段程序，但在控制台上看不到任何异常的输出信息。这就是因为，我们调用close()的时候没有传入异常信息。</p><p>所以，在callbackFlow当中的异常分支里，我们如果使用close()，一定要<strong>带上对应的异常</strong>，就像代码段7的那样“close(throwable)”。或者，为了防止在开发的过程中忘记传入异常信息，我们可以使用 <strong>cancel()方法</strong>。就像下面这样：</p><pre><code class=\"language-plain\">// 代码段9\n\nfun &lt;T : Any&gt; KtCall&lt;T&gt;.asFlow(): Flow&lt;T&gt; = callbackFlow {\n    val call = call(object : Callback&lt;T&gt; {\n        override fun onSuccess(data: T) {\n            trySendBlocking(data)\n                .onSuccess { close() }\n                .onFailure {\n                    // 变化在这里\n                    cancel(CancellationException(\"Send channel fail!\", it))\n                }\n        }\n\n        override fun onFail(throwable: Throwable) {\n            // 变化在这里\n            cancel(CancellationException(\"Request fail!\", throwable))\n        }\n    })\n\n    awaitClose {\n        call.cancel()\n    }\n}\n\n/*\n断网执行\nCatch: java.util.concurrent.CancellationException: Request fail!\n*/\n</code></pre><p>根据这里的运行结果，我们可以看到，把close()改成cancel()以后，程序运行结果也符合预期。而cancel其实还有一个优势：就算不小心忘记传throwable，我们还是可以看到一个CancellationException。</p><p>不过总的来说，只要我们可以记住传入异常信息，close()和cancel()两者的差别并不大。</p><p>另外还有一点，如果我们在callbackFlow当中还启动了其他的协程任务，close()和cancel()也同样可以取消对应的协程。如下所示：</p><pre><code class=\"language-plain\">// 代码段10\n\nfun main() = runBlocking {\n    testFlow()\n}\n\nprivate suspend fun testFlow() =\n    KtHttpV5.create(ApiServiceV5::class.java)\n        .repos(lang = \"Kotlin\", since = \"weekly\")\n        .asFlow() // 注意这里\n        .catch { println(\"Catch: $it\") }\n        .collect {\n        println(it)\n    }\n\nfun &lt;T : Any&gt; KtCall&lt;T&gt;.asFlow(): Flow&lt;T&gt; = callbackFlow {\n\n    val job = launch {\n        println(\"Coroutine start\")\n        delay(3000L)\n        println(\"Coroutine end\") // 没有机会执行\n    }\n\n    job.invokeOnCompletion {\n        println(\"Coroutine completed $it\")\n    }\n\n    val call = call(object : Callback&lt;T&gt; {\n        override fun onSuccess(data: T) {\n            trySendBlocking(data)\n                .onSuccess { close() }\n                .onFailure {\n                    cancel(CancellationException(\"Send channel fail!\", it))\n                }\n        }\n\n        override fun onFail(throwable: Throwable) {\n            cancel(CancellationException(\"Request fail!\", throwable))\n        }\n    })\n\n    awaitClose {\n        call.cancel()\n    }\n}\n\n/*\n断网执行\nCoroutine start\nCoroutine completed java.util.concurrent.CancellationException: Request fail!\nCatch: java.util.concurrent.CancellationException: Request fail!\n*/\n</code></pre><p>可以看到，由于协程是结构化的，所以，当我们取消callbackFlow的时候，在它内部创建的协程job，也会跟着被取消。而且，它的异常信息也是一样的。</p><p>不过，如果我们把上面的launch{} 改成了“launch(Job()){}”，那么，协程任务就不会跟随callbackFlow一起被取消了。我相信，如果你还记得上节课讲的第二条准则，那你一定可以轻松理解这句话。因为，<strong>它们的协程的父子关系已经被破坏了</strong>！</p><p>最后，我还想再提一下 <strong>awaitClose{}</strong> 这个挂起函数，它的作用其实就是监听callbackFlow的生命周期，当它被关闭或者取消的时候，我们应该同时把OkHttp当中的网络请求也取消掉。它的作用，跟代码段1当中的continuation.invokeOnCancellation{} 是类似的。</p><p>好，callbackFlow的用法我们就讲解完了，有了它，以后我们就可以轻松地把第三方SDK的Callback扩展成Flow了。</p><p>那么接下来，我们就进入6.0版本的开发吧！</p><h2>6.0版本：直接支持Flow</h2><p>实际上，对于KtHttp来说，4.0版本、5.0版本都只是外部扩展，我们对KtHttp的内部源代码并没有做改动。</p><p>而对于6.0版本的开发，我们其实是希望KtHttp可以直接支持返回Flow类型的数据，也就是这样：</p><pre><code class=\"language-plain\">// 代码段11\n\ninterface ApiServiceV5 {\n    @GET(\"/repo\")\n    fun repos(\n        @Field(\"lang\") lang: String,\n        @Field(\"since\") since: String\n    ): KtCall&lt;RepoList&gt;\n\n    @GET(\"/repo\")\n    fun reposFlow(\n        @Field(\"lang\") lang: String,\n        @Field(\"since\") since: String\n    ): Flow&lt;RepoList&gt; // 注意这里\n}\n</code></pre><p>请你留意上面的代码注释，在ApiServiceV5当中，我定义了一个接口方法reposFlow()，它的返回值类型是 <code>Flow&lt;RepoList&gt;</code>，而不是之前的 <code>KtCall&lt;RepoList&gt;</code>。这样一来，我们在main()函数当中使用它的时候，就不需要使用asFlow()这个扩展函数了。就像下面这样：</p><pre><code class=\"language-plain\">// 代码段12\n\nprivate suspend fun testFlow() =\n    KtHttpV5.create(ApiServiceV5::class.java)\n        .reposFlow(lang = \"Kotlin\", since = \"weekly\")\n        // 注意这里不需要asFlow，因为reposFlow()返回值类型就是Flow\n        .catch { println(\"Catch: $it\") }\n        .collect {\n            println(it)\n        }\n\nfun main() = runBlocking {\n    testFlow()\n}\n</code></pre><p>可以看到，当我们把reposFlow()的返回值类型定义成 <code>Flow&lt;RepoList&gt;</code> 以后，就需要改动KtHttp的源代码了。因为，它的内部需要根据这种情况做一些特殊的判断。</p><p>其实，在前面3.0版本的开发中，我们就已经做过一次判断了。当时，我们特地判断了一下，返回值类型是 <code>KtCall&lt;T&gt;</code> 还是<code>T</code>。让我们来重新回顾一下当时的代码细节：</p><pre><code class=\"language-plain\">// 代码段13\n\nprivate fun &lt;T: Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n    // 省略部分代码\n    return if (isKtCallReturn(method)) {\n        // 返回值类型是KtCall&lt;RepoList&gt;\n\n        val genericReturnType = getTypeArgument(method)\n        KtCall&lt;T&gt;(call, gson, genericReturnType)\n    } else {\n        // 返回值类型是 RepoList\n\n        val response = okHttpClient.newCall(request).execute()\n        val genericReturnType = method.genericReturnType\n        val json = response.body?.string()\n        gson.fromJson&lt;Any?&gt;(json, genericReturnType)\n    }\n}\n</code></pre><p>看到上面的代码，相信你马上就能想明白了，如果要支持Flow，我们只需要在这里判断一下，返回值类型是不是 <code>Flow&lt;T&gt;</code> 即可。比如说：</p><pre><code class=\"language-plain\">// 代码段14\n\nprivate fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n    // 省略部分代码\n    return when {\n        isKtCallReturn(method) -&gt; {\n            val genericReturnType = getTypeArgument(method)\n            KtCall&lt;T&gt;(call, gson, genericReturnType)\n        }\n        isFlowReturn(method) -&gt; {\n            // 直接返回Flow\n            flow&lt;T&gt; {\n                // 请求API\n                val genericReturnType = getTypeArgument(method)\n                val response = okHttpClient.newCall(request).execute()\n                val json = response.body?.string()\n                val result = gson.fromJson&lt;T&gt;(json, genericReturnType)\n\n                // 传出结果\n                emit(result)\n\n            }\n        }\n        else -&gt; {\n            val response = okHttpClient.newCall(request).execute()\n\n            val genericReturnType = method.genericReturnType\n            val json = response.body?.string()\n            gson.fromJson&lt;Any?&gt;(json, genericReturnType)\n        }\n    }\n}\n\n// 判断返回值类型是不是 Flow&lt;T&gt;\nprivate fun isFlowReturn(method: Method) =\n        getRawType(method.genericReturnType) == Flow::class.java\n</code></pre><p>由于代码段13当中已经有了if、else两个条件分支了，再增加一个分支的话，我们选择了when表达式。这里，我们增加了一个isFlowReturn(method)的分支，意思就是判断返回值类型是不是Flow，如果是的话，我们就直接使用flow{} 创建一个Flow返回了。</p><p>至此，我们6.0版本的开发工作，其实就已经完成了。是不是觉得非常轻松？<strong>对比起Callback转Flow，让KtHttp直接支持Flow确实要简单很多</strong>。从这一点上，我们也可以看到Flow的强大和易用性。</p><p>那么在这时候，我们就可以写一些简单的测试代码，来验证我们的代码是否可靠了。</p><pre><code class=\"language-plain\">// 代码段15\n\nprivate fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n    // 省略部分代码\n    return when {\n        isKtCallReturn(method) -&gt; {\n            val genericReturnType = getTypeArgument(method)\n            KtCall&lt;T&gt;(call, gson, genericReturnType)\n        }\n        isFlowReturn(method) -&gt; {\n            // 增加日志\n            logX(\"Start out\")\n            flow&lt;T&gt; {\n                logX(\"Start in\")\n                val genericReturnType = getTypeArgument(method)\n                val response = okHttpClient.newCall(request).execute()\n                val json = response.body?.string()\n                val result = gson.fromJson&lt;T&gt;(json, genericReturnType)\n                logX(\"Start emit\")\n                emit(result)\n                logX(\"End emit\")\n            }\n        }\n        else -&gt; {\n            val response = okHttpClient.newCall(request).execute()\n\n            val genericReturnType = method.genericReturnType\n            val json = response.body?.string()\n            gson.fromJson&lt;Any?&gt;(json, genericReturnType)\n        }\n    }\n}\n\nprivate suspend fun testFlow() =\n    KtHttpV5.create(ApiServiceV5::class.java)\n        .reposFlow(lang = \"Kotlin\", since = \"weekly\")\n        .flowOn(Dispatchers.IO) //切换线程\n        .catch { println(\"Catch: $it\") }\n        .collect {\n            logX(\"${it.count}\")\n        }\n/*\n输出结果\n================================\nStart out\nThread:main @coroutine#1\n================================\n================================\nStart in\nThread:DefaultDispatcher-worker-1 @coroutine#2\n================================\n================================\nStart emit\nThread:DefaultDispatcher-worker-1 @coroutine#2\n================================\n================================\nEnd emit\nThread:DefaultDispatcher-worker-1 @coroutine#2\n================================\n================================\n25\nThread:main @coroutine#1\n================================\n\n程序结束\n*/\n</code></pre><p>在上面的代码中，我们增加了一些日志，同时在调用处增加了“flowOn(Dispatchers.IO)”。可以看到，这样一来整个网络请求就执行在了DefaultDispatcher这个线程池当中，而其他部分的代码，仍然执行在main()线程。这也是符合预期的。</p><p>然后，我们可以通过断网来模拟出现异常的情况：</p><pre><code class=\"language-plain\">// 代码段16\n\n/*\n输出结果：\n================================\nStart out\nThread:main @coroutine#1\n================================\n================================\nStart in\nThread:DefaultDispatcher-worker-1 @coroutine#2\n================================\nCatch: java.net.UnknownHostException:  nodename nor servname provided, or not known\n\n程序结束\n*/\n</code></pre><p>可以看到，程序的运行结果仍然是符合预期的。<br>\n下面，我们再来看看6.0完整的代码：</p><pre><code class=\"language-plain\">// 代码段17\n\ninterface ApiServiceV5 {\n    @GET(\"/repo\")\n    fun repos(\n        @Field(\"lang\") lang: String,\n        @Field(\"since\") since: String\n    ): KtCall&lt;RepoList&gt;\n\n    // 注释1\n    @GET(\"/repo\")\n    fun reposFlow(\n        @Field(\"lang\") lang: String,\n        @Field(\"since\") since: String\n    ): Flow&lt;RepoList&gt;\n}\n\nobject KtHttpV5 {\n\n    private var okHttpClient: OkHttpClient = OkHttpClient()\n    private var gson: Gson = Gson()\n    var baseUrl = \"https://baseUrl.com\"\n\n    fun &lt;T : Any&gt; create(service: Class&lt;T&gt;): T {\n        return Proxy.newProxyInstance(\n            service.classLoader,\n            arrayOf&lt;Class&lt;*&gt;&gt;(service)\n        ) { proxy, method, args -&gt;\n            val annotations = method.annotations\n            for (annotation in annotations) {\n                if (annotation is GET) {\n                    val url = baseUrl + annotation.value\n                    return@newProxyInstance invoke&lt;T&gt;(url, method, args!!)\n                }\n            }\n            return@newProxyInstance null\n\n        } as T\n    }\n\n    private fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n        if (method.parameterAnnotations.size != args.size) return null\n\n        var url = path\n        val parameterAnnotations = method.parameterAnnotations\n        for (i in parameterAnnotations.indices) {\n            for (parameterAnnotation in parameterAnnotations[i]) {\n                if (parameterAnnotation is Field) {\n                    val key = parameterAnnotation.value\n                    val value = args[i].toString()\n                    if (!url.contains(\"?\")) {\n                        url += \"?$key=$value\"\n                    } else {\n                        url += \"&amp;$key=$value\"\n                    }\n\n                }\n            }\n        }\n\n        val request = Request.Builder()\n            .url(url)\n            .build()\n\n        val call = okHttpClient.newCall(request)\n\n        return when {\n            isKtCallReturn(method) -&gt; {\n                val genericReturnType = getTypeArgument(method)\n                KtCall&lt;T&gt;(call, gson, genericReturnType)\n            }\n            isFlowReturn(method) -&gt; {\n                logX(\"Start out\")\n\n                // 注释2\n                flow&lt;T&gt; {\n                    logX(\"Start in\")\n                    val genericReturnType = getTypeArgument(method)\n                    val response = okHttpClient.newCall(request).execute()\n                    val json = response.body?.string()\n                    val result = gson.fromJson&lt;T&gt;(json, genericReturnType)\n                    logX(\"Start emit\")\n                    emit(result)\n                    logX(\"End emit\")\n                }\n            }\n            else -&gt; {\n                val response = okHttpClient.newCall(request).execute()\n\n                val genericReturnType = method.genericReturnType\n                val json = response.body?.string()\n                gson.fromJson&lt;Any?&gt;(json, genericReturnType)\n            }\n        }\n    }\n\n    private fun getTypeArgument(method: Method) =\n        (method.genericReturnType as ParameterizedType).actualTypeArguments[0]\n\n    private fun isKtCallReturn(method: Method) =\n        getRawType(method.genericReturnType) == KtCall::class.java\n\n    private fun isFlowReturn(method: Method) =\n        getRawType(method.genericReturnType) == Flow::class.java\n\n}\n\nfun main() = runBlocking {\n    testFlow()\n}\n\nprivate suspend fun testFlow() =\n    KtHttpV5.create(ApiServiceV5::class.java)\n        .reposFlow(lang = \"Kotlin\", since = \"weekly\")\n        .flowOn(Dispatchers.IO)\n        .catch { println(\"Catch: $it\") }\n        .collect {\n            logX(\"${it.count}\")\n        }\n</code></pre><p>最后，我们也再来分析一下，为什么6.0的代码可以这么简单。这里有两个关键的地方，我也分别用注释标记了。</p><p>请你留意注释1处的 <strong>reposFlow()</strong> 方法的定义，它其实是一个普通的函数，并不是挂起函数。换言之，虽然它的返回值类型是Flow，但我们并不要求它在协程当中被调用。</p><p>另外，请留意注释2处，<strong>flow{}</strong> 这个高阶函数，它也只是一个普通函数，同样也不是挂起函数，这就意味着，它可以在普通函数里面直接调用。我们可以看看flow{} 的定义：</p><pre><code class=\"language-plain\">// 代码段18\n\n// 不是挂起函数\npublic fun &lt;T&gt; flow(@BuilderInference block: suspend FlowCollector&lt;T&gt;.() -&gt; Unit): Flow&lt;T&gt; = SafeFlow(block)\n</code></pre><p>所以，正因为以上这两点，就使得Flow的易用性非常高，还记得我们在<a href=\"https://time.geekbang.org/column/article/491632\">第20讲</a>当中看过的那张Flow“上游、下游”的示意图吗？我们其实可以进一步完善它：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/20/370553ac768913a0702fda89a85b8120.jpg?wh=2000x1125\" alt=\"\"></p><p>也就是说，对于Flow的<strong>上游、中间操作符</strong>而言，它们其实根本就不需要协程作用域，只有在下游调用collect{} 的时候，才需要协程作用域。</p><p>因此，我们前面在写main()函数的时候，也可以换成这样的写法：</p><pre><code class=\"language-plain\">// 代码段19\nfun main() {\n    // 协程作用域外\n    val flow = KtHttpV5.create(ApiServiceV5::class.java)\n        .reposFlow(lang = \"Kotlin\", since = \"weekly\")\n        .flowOn(Dispatchers.IO)\n        .catch { println(\"Catch: $it\") }\n\n    runBlocking {\n        // 协程作用域内\n        flow.collect {\n            logX(\"${it.count}\")\n        }\n    }\n}\n</code></pre><p>可见，正因为Flow的上游不需要协程作用域，我们才可以轻松完成6.0版本的代码。</p><h2>小结</h2><p>这节实战课，为了让KtHttp支持Flow API，我们使用了两种方法。第一种，是从KtHttp的外部进行扩展，用这种思路，我们完成了5.0版本的开发；第二种，是修改KtHttp的内部，让ApiService当中的方法可以直接以Flow作为返回值类型，利用这种思路，我们完成了6.0的开发。</p><p>具体来说，我们是用到了这几个知识点，你可以重点关注一下：</p><ul>\n<li><strong>callbackFlow{}</strong>，它的作用就是把Callback转换成Flow。它的底层其实用到了Channel，因此，我们可以在callbackFlow{} 当中调用trySend()、trySendBlocking()，这两个方法都是Channel当中的“非挂起函数”的方法。需要注意的是，这里我们不能直接使用Channel的挂起函数send()，因为它必须要在协程体当中执行。</li>\n<li>在callbackFlow{} 里，出现异常的逻辑分支当中，如果我们需要关闭callbackFlow，那么在调用close()的时候，一定要传入对应的异常参数 <strong>close(throwable)</strong>。不然的话，Flow的下游就无法收到任何的异常信息。</li>\n<li>在callbackFlow{} 当中创建的<strong>协程任务</strong>，也可以跟随callbackFlow一同被取消，只要我们不打破它原有的协程父子关系。</li>\n<li>由于<strong>Flow的上游、中间操作符不需要协程作用域</strong>，因此，我们可以在非协程当中执行创建Flow。这就导致我们6.0版本的代码轻松就可以实现。</li>\n</ul><h2>思考题</h2><p>在5.0版本的代码中，awaitClose{} 的作用是响应协程的取消，同时取消OkHttp的请求。其实，它除了这个作用以外，还有另外一个作用。</p><p>你可以把5.0版本代码中的awaitClose删掉，看看会发生什么。对于这样的现象，你能想到awaitClose{} 的另一个作用吗？</p><pre><code class=\"language-plain\">// 代码段20\nfun &lt;T : Any&gt; KtCall&lt;T&gt;.asFlow(): Flow&lt;T&gt; = callbackFlow {\n    val call = call(object : Callback&lt;T&gt; {\n        override fun onSuccess(data: T) {\n            trySendBlocking(data)\n                .onSuccess { close() }\n                .onFailure {\n                    cancel(CancellationException(\"Send channel fail!\", it))\n                }\n        }\n\n        override fun onFail(throwable: Throwable) {\n            cancel(CancellationException(\"Request fail!\", throwable))\n        }\n    })\n\n    // 注意这里\n    // awaitClose {\n    //     call.cancel()\n    // }\n}\n</code></pre>","neighbors":{"left":{"article_title":"23 | 异常：try-catch居然会不起作用？坑！","id":493666},"right":{"article_title":"答疑（一）| Java和Kotlin到底谁好谁坏？","id":498437}},"comments":[]}