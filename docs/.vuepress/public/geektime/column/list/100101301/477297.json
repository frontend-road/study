{"id":477297,"title":"14 | OpenFeign 实战：OpenFeign 组件有哪些高级玩法？","content":"<p>你好，我是姚秋辰。</p><p>在上一讲中，我们已经将OpenFeign组件集成到了实战项目中。今天我们来进一步深入OpenFeign的功能特性，学习几个OpenFeign的进阶使用技巧：异常信息排查、超时判定和服务降级。</p><p>异常信息排查是我们开发人员每天都要面对的事情。如果你正在开发一个大型微服务应用，你经常需要集成一些由其他团队开发的API，这就免不了要参与各种联调和问题排查。如果你是一个经验丰富的老码农，那你一定经常说这样一句话：“你的Request参数是什么？”这句台词在我们平时的API联调和线上异常排查中出镜率很高，因为<strong>服务请求的入参和出参是分析和排查问题的重要线索</strong>。</p><p>为了获得服务请求的参数和返回值，我们经常使用的一个做法就是<strong>打印日志</strong>。你可以在程序中使用log.info或者log.debug方法将服务请求的入参和返回值一一打印出来。但是，对一些复杂的业务场景来说就没有那么轻松了。</p><p>假如你在开发的是一个下单服务，执行一次下单流程前前后后要调用十多个微服务。你需要在请求发送的前后分别打印Request和Response，不仅麻烦不说，我们还未必能把包括Header在内的完整请求信息打印出来。</p><p>那我们如何才能引入一个既简单又不需要硬编码的日志打印功能，让它自动打印所有远程方法的Request和Response，方便我们做异常信息排查呢？接下来，我就来给你介绍一个OpenFeign的小功能，轻松实现<strong>远程调用参数的日志打印</strong>。</p><!-- [[[read_end]]] --><h2>日志信息打印</h2><p>为了让OpenFeign可以主动将请求参数打印到日志中，我们需要做两个代码层面的改动。</p><p>首先，你需要在配置文件中<strong>指定FeignClient接口的日志级别为Debug</strong>。这样做是因为OpenFeign组件默认将日志信息以debug模式输出，而默认情况下Spring Boot的日志级别是Info，因此我们必须将应用日志的打印级别改为debug后才能看到OpenFeign的日志。</p><p>我们打开coupon-customer-impl模块的application.yml配置文件，在其中加上以下几行logging配置项。</p><pre><code>logging:\n  level:\n    com.geekbang.coupon.customer.feign.TemplateService: debug\n    com.geekbang.coupon.customer.feign.CalculationService: debug\n</code></pre><p>在上面的配置项中，我指定了TemplateService和CalculationService的日志级别为debug，而其它类的日志级别不变，仍然是默认的Info级别。</p><p>接下来，你还需要在应用的上下文中使用代码的方式<strong>声明Feign组件的日志级别</strong>。这里的日志级别并不是我们传统意义上的Log Level，它是OpenFeign组件自定义的一种日志级别，用来控制OpenFeign组件向日志中写入什么内容。你可以打开coupon-customer-impl模块的Configuration配置类，在其中添加这样一段代码。</p><pre><code>@Bean\nLogger.Level feignLogger() {\n    return Logger.Level.FULL;\n}\n</code></pre><p>在上面这段代码中，我指定了OpenFeign的日志级别为Full，在这个级别下所输出的日志文件将会包含最详细的服务调用信息。OpenFeign总共有四种不同的日志级别，我来带你了解一下这四种级别下OpenFeign向日志中写入的内容。</p><ul>\n<li><strong>NONE</strong>：不记录任何信息，这是OpenFeign默认的日志级别；</li>\n<li><strong>BASIC</strong>：只记录服务请求的URL、HTTP Method、响应状态码（如200、404等）和服务调用的执行时间；</li>\n<li><strong>HEADERS</strong>：在BASIC的基础上，还记录了请求和响应中的HTTP Headers；</li>\n<li><strong>FULL</strong>：在HEADERS级别的基础上，还记录了服务请求和服务响应中的Body和metadata，FULL级别记录了最完整的调用信息。</li>\n</ul><p>我们将Feign的日志级别指定为Full，并启动项目发起一个远程调用，你就可以在日志中看到整个调用请求的信息，包括请求路径、Header参数、Request Payload和Response Body。我拿了一个调用日志作为示例，你可以参考一下。</p><pre><code> ---&gt; POST http://coupon-calculation-serv/calculator/simulate HTTP/1.1\n Content-Length: 458\n Content-Type: application/json\n \n {&quot;products&quot;:[{&quot;productId&quot;:null,&quot;price&quot;:3000, xxxx省略请求参数\n ---&gt; END HTTP (458-byte body)\n &lt;--- HTTP/1.1 200 (29ms)\n connection: keep-alive\n content-type: application/json\n date: Sat, 27 Nov 2021 15:11:26 GMT\n keep-alive: timeout=60\n transfer-encoding: chunked\n \n {&quot;bestCouponId&quot;:26,&quot;couponToOrderPrice&quot;:{&quot;26&quot;:15000}}\n &lt;--- END HTTP (53-byte body)\n</code></pre><p>有了这些详细的日志信息，你在开发联调阶段排查异常问题就易如反掌了。</p><p>到这里，我们就详细了解了OpenFeign的日志级别设置。接下来，我带你了解如何在OpenFeign中配置超时判定条件。</p><h2>OpenFeign超时判定</h2><p>超时判定是一种保障可用性的手段。如果你要调用的目标服务的RT（Response Time）值非常高，那么你的调用请求也会处于一个长时间挂起的状态，这是造成服务雪崩的一个重要因素。为了隔离下游接口调用超时所带来的的影响，我们可以在程序中设置一个<strong>超时判定的阈值</strong>，一旦下游接口的响应时间超过了这个阈值，那么程序会自动取消此次调用并返回一个异常。</p><p>我们以coupon-customer-serv为例，customer服务依赖template服务来读取优惠券模板的信息，如果你想要对template的远程服务调用添加超时判定配置，那么我们可以在coupon-customer-impl模块下的application.yml文件中添加下面的配置项。</p><pre><code>feign:\n  client:\n    config:\n      # 全局超时配置\n      default:\n        # 网络连接阶段1秒超时\n        connectTimeout: 1000\n        # 服务请求响应阶段5秒超时\n        readTimeout: 5000\n      # 针对某个特定服务的超时配置\n      coupon-template-serv:\n        connectTimeout: 1000\n        readTimeout: 2000\n</code></pre><p>从上面这段代码中可以看出，所有超时配置都放在feign.client.config路径之下，我在这个路径下面声明了两个节点：default和coupon-template-serv。</p><p>default节点配置了全局层面的超时判定规则，它的生效范围是所有OpenFeign发起的远程调用。</p><p>coupon-template-serv下面配置的超时规则只针对向template服务发起的远程调用。如果你想要对某个特定服务配置单独的超时判定规则，那么可以用同样的方法，在feign.client.config下添加目标服务名称和超时判定规则。</p><p>这里需要你注意的一点是，如果你同时配置了全局超时规则和针对某个特定服务的超时规则，那么后者的配置会覆盖全局配置，并且优先生效。</p><p>在超时判定的规则中我定义了两个属性：connectTimeout和readTimeout。其中，connectTimeout的超时判定作用于“建立网络连接”的阶段；而readTimeout的超时判定则作用于“服务请求响应”的阶段（在网络连接建立之后）。我们常说的RT（即服务响应时间）受后者影响比较大。另外，这两个属性对应的超时<strong>时间单位都是毫秒</strong>。</p><p>配置好超时规则之后，我们可以验证一下。你可以在template服务中使用Thread.sleep方法强行让线程挂起几秒钟，制造一个超时场景。这时如果你通过customer服务调用了template服务，那么在日志中可以看到下面的报错信息，提示你服务请求超时。</p><pre><code>[TemplateService#getTemplate] &lt;--- ERROR SocketTimeoutException: Read timed out (2077ms)\n[TemplateService#getTemplate] java.net.SocketTimeoutException: Read timed out\n</code></pre><p>到这里，相信你已经清楚如何通过OpenFeign的配置项来设置超时判定规则了。接下来，我带你了解一下OpenFeign是如何通过降级来处理服务异常的。</p><h2>OpenFeign降级</h2><p>降级逻辑是在远程服务调用发生超时或者异常（比如400、500 Error Code）的时候，自动执行的一段业务逻辑。你可以根据具体的业务需要编写降级逻辑，比如执行一段兜底逻辑将服务请求从失败状态中恢复，或者发送一个失败通知到相关团队提醒它们来线上排查问题。</p><p>在后面课程中，我将会使用Spring Cloud Alibaba的组件Sentinel跟你讲解如何搭建中心化的服务容错控制逻辑，这是一种重量级的服务容错手段。</p><p>但在这节课中，我采用了一种完全不同的服务容错手段，那就是借助OpenFeign实现Client端的服务降级。尽管它的功能远不如Sentinel强大，但它相比于Sentinel而言<strong>更加轻量级且容易实现，</strong>足以满足一些简单的服务降级业务需求。</p><p>OpenFeign对服务降级的支持是借助Hystrix组件实现的，由于Hystrix已经从Spring Cloud组件库中被移除，所以我们需要在coupon-customer-impl子模块的pom文件中手动添加hystrix项目的依赖。</p><pre><code>&lt;!-- hystrix组件，专门用来演示OpenFeign降级 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;\n    &lt;version&gt;2.2.10.RELEASE&lt;/version&gt;\n    &lt;exclusions&gt;\n        &lt;!-- 移除Ribbon负载均衡器，避免冲突 --&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-netflix-ribbon&lt;/artifactId&gt;\n        &lt;/exclusion&gt;\n    &lt;/exclusions&gt;\n&lt;/dependency&gt;\n</code></pre><p>添加好依赖项之后，我们就可以编写OpenFeign的降级类了。OpenFeign支持两种不同的方式来指定降级逻辑，一种是定义fallback类，另一种是定义fallback工厂。</p><p>通过fallback类实现降级是最为简单的一种途径，如果你想要为TemplateService这个FeignClient接口指定一段降级流程，那么我们可以定义一个降级类并实现TemplateService接口。我写了一个TemplateServiceFallback类，你可以参考一下。</p><pre><code>@Slf4j\n@Component\npublic class TemplateServiceFallback implements TemplateService {\n\n    @Override\n    public CouponTemplateInfo getTemplate(Long id) {\n        log.info(&quot;fallback getTemplate&quot;);\n        return null;\n    }\n\n    @Override\n    public Map&lt;Long, CouponTemplateInfo&gt; getTemplateInBatch(Collection&lt;Long&gt; ids) {\n        log.info(&quot;fallback getTemplateInBatch&quot;);\n        return null;\n    }\n}\n</code></pre><p>在上面的代码中，我们可以看出TemplateServiceFallback实现了TemplateService中的所有方法。</p><p>我们以其中的getTemplate方法为例，如果在实际的方法调用过程中，OpenFeign接口的getTemplate远程调用发生了异常或者超时的情况，那么OpenFeign会主动执行对应的降级方法，也就是TemplateServiceFallback类中的getTemplate方法。</p><p>你可以根据具体的业务场景，编写合适的降级逻辑。</p><p>降级类定义好之后，你还需要在TemplateService接口中将TemplateServiceFallback类指定为降级类，这里你可以借助FeignClient接口的fallback属性来配置，你可以参考下面的代码。</p><pre><code>@FeignClient(value = &quot;coupon-template-serv&quot;, path = &quot;/template&quot;,\n       // 通过fallback指定降级逻辑\n       fallback = TemplateServiceFallback.class)\npublic interface TemplateService {\n      // ... 省略方法定义\n}\n</code></pre><p>如果你想要在降级方法中获取到<strong>异常的具体原因</strong>，那么你就要借助<strong>fallback工厂</strong>的方式来指定降级逻辑了。按照OpenFeign的规范，自定义的fallback工厂需要实现FallbackFactory接口，我写了一个TemplateServiceFallbackFactory类，你可以参考一下。</p><pre><code>@Slf4j\n@Component\npublic class TemplateServiceFallbackFactory implements FallbackFactory&lt;TemplateService&gt; {\n\n    @Override\n    public TemplateService create(Throwable cause) {\n        // 使用这种方法你可以捕捉到具体的异常cause\n        return new TemplateService() {\n\n            @Override\n            public CouponTemplateInfo getTemplate(Long id) {\n                log.info(&quot;fallback factory method test&quot;);\n                return null;\n            }\n\n            @Override\n            public Map&lt;Long, CouponTemplateInfo&gt; getTemplateInBatch(Collection&lt;Long&gt; ids) {\n                log.info(&quot;fallback factory method test&quot;);\n                return Maps.newHashMap();\n            }\n        };\n    }\n}\n</code></pre><p>从上面的代码中，你可以看出，抽象工厂create方法的入参是一个Throwable对象。这样一来，我们在降级方法中就可以获取到原始请求的具体报错异常信息了。</p><p>当然了，你还需要将这个工厂类添加到TemplateService注解中，这个过程和指定fallback类的过程有一点不一样，你需要借助FeignClient注解的fallbackFactory属性来完成。你可以参考下面的代码。</p><pre><code>@FeignClient(value = &quot;coupon-template-serv&quot;, path = &quot;/template&quot;,\n        // 通过抽象工厂来定义降级逻辑\n        fallbackFactory = TemplateServiceFallbackFactory.class)\npublic interface TemplateService {\n        // ... 省略方法定义\n}\n</code></pre><p>到这里，我们就完成了OpenFeign进阶功能的学习。针对这里面的某些功能，我想从日志打印和超时判定这两个方面给你一些实践层面的建议。</p><p><strong>在日志打印方面</strong>，OpenFeign的日志信息是测试开发联调过程中的好帮手，但是在生产环境中你是用不上的，因为几乎所有公司的生产环境都不会使用Debug级别的日志，最多是Info级别。</p><p><strong>在超时判定方面</strong>，有时候我们在线上会使用多维度的超时判定，比如OpenFeign + 网关层超时判定 + Sentinel等等判定。它们可以互相作为兜底方案，一旦某个环节突然发生故障，另一个可以顶上去。但这就形成了一个木桶理论，也就是几种判定规则中最严格的那个规则会优先生效。</p><h2>总结</h2><p>今天我们了解了OpenFeign的三个进阶小技巧。首先，你使用OpenFeign的日志模块打印了完整的远程服务调用信息，我们可以利用这个功能大幅提高线下联调测试的效率。然后，我带你了解了OpenFeign组件如何设置超时判定规则，通过全局配置+局部配置的方式对远程接口进行超时判定，这是一种有效的防止服务雪崩的可用性保障手段。最后，我们动手搭建了OpenFeign的降级业务，通过fallback类和fallback工厂两种方式实现了服务降级。</p><p>关于<strong>服务降级的方案选型</strong>，我想分享一些自己的见解。很多开发人员过于追求功能强大的新技术，但我们<strong>做技术选型的时候也要考虑开发成本和维护成本</strong>。</p><p>比如像Sentinel这类中心化的服务容错控制台，它的功能固然强大，各种花式玩法它都考虑到了。但相对应地，如果你要在项目中引入Sentinel，在运维层面你要多维护一个Sentinel服务集群，并且在代码中接入Sentinel也是一个成本项。如果你只需要一些简单的降级功能，那OpenFeign+Hystrix的Client端降级方案就完全可以满足你的要求，我认为没必要拿大炮打苍蝇，过于追求一步到位的高大上方案。</p><p>到这里，我们OpenFeign组件的课程就结束了，下一节课程我将带你学习如何使用Nacos实现配置管理。</p><h2>思考题</h2><p>结合这节课的OpenFeign超时判定功能，你知道有哪些超时判定的算法吗？它们的底层原理是什么？欢迎在留言区写下自己的思考，与我一起讨论。</p><p>好啦，这节课就结束啦。欢迎你把这节课分享给更多对Spring Cloud感兴趣的朋友。我是姚秋辰，我们下节课再见！</p>","neighbors":{"left":{"article_title":"13 | OpenFeign 实战：如何实现服务间调用功能？","id":476552},"right":{"article_title":"15 | 配置中心在微服务中发挥着怎样的作用？","id":477806}},"comments":[{"had_liked":false,"id":330401,"user_name":"gallifrey","can_delete":false,"product_type":"c1","uid":1366631,"ip_address":"","ucode":"A4E5E0E7E2DEF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/da/67/73a0c754.jpg","comment_is_top":false,"comment_ctime":1641968286,"is_pvip":false,"replies":[{"id":"120455","content":"是的，源码里带上了这行配置","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1642006318,"ip_address":"","comment_id":330401,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48886608542","product_id":100101301,"comment_content":"hystrix使用2.2.10.RELEASE的版本时，貌似需要在配置文件里面加上feign.circuitbreaker.enabled: true才行","like_count":11,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545642,"discussion_content":"是的，源码里带上了这行配置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642006318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332460,"user_name":"Avalon","can_delete":false,"product_type":"c1","uid":1908872,"ip_address":"","ucode":"820523E3C519F0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/20/88/41212eb9.jpg","comment_is_top":false,"comment_ctime":1643264340,"is_pvip":false,"replies":[{"id":"121824","content":"FeignClient注解里面有个玄机，决定了让框架注入哪个类。同学点进去这个注解的源代码，会发现一个神奇的boolean变量，好了我点到为止了哈，等同学自己摸索出来之后来分享下答案吧","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1644326286,"ip_address":"","comment_id":332460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14528166228","product_id":100101301,"comment_content":"老师，如果 TemplateServiceFallback 实现了 TemplateService 接口，那使用注解注入 TemplateService 时，Spring 如何判断要注入的是这个实现类还是动态代理类？","like_count":4,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549992,"discussion_content":"FeignClient注解里面有个玄机，决定了让框架注入哪个类。同学点进去这个注解的源代码，会发现一个神奇的boolean变量，好了我点到为止了哈，等同学自己摸索出来之后来分享下答案吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644326286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330518,"user_name":"alex_lai","can_delete":false,"product_type":"c1","uid":1903459,"ip_address":"","ucode":"3057F2A593A6DB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/m7fLWyJrnwEPoIefiaxusQRh6D1Nq7PCXA8RiaxkmzdNEmFARr5q8L4qouKNaziceXia92an8hzYa5MLic6N6cNMEoQ/132","comment_is_top":false,"comment_ctime":1642006357,"is_pvip":true,"replies":[{"id":"120589","content":"feign本质是spring mvc模式的封装，如果项目需要大量使用non blocking功能建议用webflux之类的方案。也有民间热心群众开源的ReactiveFeign版本可以作为一个选择","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1642092854,"ip_address":"","comment_id":330518,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14526908245","product_id":100101301,"comment_content":"Openfeign client 不是non block的？如果我的框架基于reactive 风格写的是不是没有必要introduce openfeign了，我可以自己写wrap加future在client side。社区未来会提供支持么？openfeign的业界地位是什么样的, nice to have？","like_count":3,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545960,"discussion_content":"feign本质是spring mvc模式的封装，如果项目需要大量使用non blocking功能建议用webflux之类的方案。也有民间热心群众开源的ReactiveFeign版本可以作为一个选择","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642092854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330360,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1641951238,"is_pvip":false,"replies":[{"id":"120458","content":"Bingo","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1642006715,"ip_address":"","comment_id":330360,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14526853126","product_id":100101301,"comment_content":"好像是滑动窗口算法","like_count":3,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545645,"discussion_content":"Bingo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642006715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347291,"user_name":"Geek_0b93c0","can_delete":false,"product_type":"c1","uid":2971019,"ip_address":"","ucode":"ACAA7817AD2C61","user_header":"","comment_is_top":false,"comment_ctime":1653904061,"is_pvip":false,"replies":[{"id":"126732","content":"各有利弊吧。比如Hystrix是client端降级，廉价好用省资源，只不过不能从全局视角做资源控制，只能在“单机”这个维度来做控制。Sentinel这种中心化的流控工具会增加部署成本和项目复杂度，但也提供了更加灵活+多维度的资源控制方式","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1654238239,"ip_address":"","comment_id":347291,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10243838653","product_id":100101301,"comment_content":"降级 放在客户端还是服务端好","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574672,"discussion_content":"各有利弊吧。比如Hystrix是client端降级，廉价好用省资源，只不过不能从全局视角做资源控制，只能在“单机”这个维度来做控制。Sentinel这种中心化的流控工具会增加部署成本和项目复杂度，但也提供了更加灵活+多维度的资源控制方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654238239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330379,"user_name":"被圣光照黑了","can_delete":false,"product_type":"c1","uid":1400926,"ip_address":"","ucode":"60B4F4F67700E1","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/5e/b9624166.jpg","comment_is_top":false,"comment_ctime":1641958344,"is_pvip":false,"replies":[{"id":"120452","content":"在专栏里使用的这个spring cloud版本中已经不推荐使用hystrix作为熔断器了，hystrix依赖项已经从SC项目中全面剔除了，同学可以等后面介绍到sentinel的时候学习更强大的降级熔断组件。<br><br>这里介绍的feign降级是一个简化版的降级方案，配置文件里添加feign.circuitbreaker.enabled=true试试","user_name":"作者回复","user_name_real":"作者","uid":"2819998","ctime":1642005989,"ip_address":"","comment_id":330379,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10231892936","product_id":100101301,"comment_content":"我在coupon-customer-serv的启动类上加了@EnableHystrix，yml里加了feign:hystrix:enabled: true，coupon-template-serv里有个自定义异常，调用报错了怎么不触发熔断啊","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545638,"discussion_content":"在专栏里使用的这个spring cloud版本中已经不推荐使用hystrix作为熔断器了，hystrix依赖项已经从SC项目中全面剔除了，同学可以等后面介绍到sentinel的时候学习更强大的降级熔断组件。\n\n这里介绍的feign降级是一个简化版的降级方案，配置文件里添加feign.circuitbreaker.enabled=true试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642005989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330348,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1641946306,"is_pvip":true,"replies":[{"id":"120459","content":"Q1：没错，完全可以搭配Resilience4j，后面还会介绍一个中心化容错组件sentinel<br>Q2：06篇作为到微服务的过渡，我们设想这三个服务都变成了微服务之后，是如何发起调用的<br>Q3：后面会介绍Sentinel服务容错组件做限流+服务熔断，提供了一定的大盘监控能力。但这个不是专业的仪表监控系统，同学如果感兴趣的话可以了解下grafana，很多公司用这个监控k8s集群<br>Q4：CICD部分没有包含在专栏里面<br>","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1642007068,"ip_address":"","comment_id":330348,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10231880898","product_id":100101301,"comment_content":"请教老师3个问题：<br>Q1 容错时用Hystrix，是因为OpenFeign在基于Feign而Feign本来就能和Hystrix集成吗？  除了搭配Hystrix，OpenFeign能搭配Resilience4j吗？  <br>Q2 &quot;06&quot;篇中，思考题提到“3个模块分别部署到不同的集群上”，如果能分别部署，就不是单体应用了啊，而是像微服务了啊。单体应用就是难以分开部署，不是吗？<br>Q3：微服务需要有“监控系统”，这个专栏会讲“监控系统”吗？ 或者“02篇”中提到的某个组件充当了“监控系统”？（没有明确说它是监控系统，但具有此功能）<br>Q4：本专栏会讲“持续集成”吗？ 好像本专栏没有提这个方面。","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545646,"discussion_content":"Q1：没错，完全可以搭配Resilience4j，后面还会介绍一个中心化容错组件sentinel\nQ2：06篇作为到微服务的过渡，我们设想这三个服务都变成了微服务之后，是如何发起调用的\nQ3：后面会介绍Sentinel服务容错组件做限流+服务熔断，提供了一定的大盘监控能力。但这个不是专业的仪表监控系统，同学如果感兴趣的话可以了解下grafana，很多公司用这个监控k8s集群\nQ4：CICD部分没有包含在专栏里面\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642007068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341607,"user_name":"简","can_delete":false,"product_type":"c1","uid":2549620,"ip_address":"","ucode":"B02D1DF353F2F3","user_header":"https://static001.geekbang.org/account/avatar/00/26/e7/74/69fe068c.jpg","comment_is_top":false,"comment_ctime":1649732568,"is_pvip":true,"replies":[{"id":"125189","content":"单独把API抽离出来的目的是减少包污染，也是大部分RPC框架推荐的一种方式。<br><br>第三方API jar也是单独抽离出来的一个maven依赖项，和我们剥离API子模块供给其他业务方使用是一个道理","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1650417100,"ip_address":"","comment_id":341607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5944699864","product_id":100101301,"comment_content":"我有点不明白，这个项目结构单独的把API给抽离出来了，如果说引入了第三方的API JAR包后，为什么不能直接使用这个API呢？这个引入的第三方API和我们实现的 @FeignClients 接口几乎一模一样，能利用起来吗？","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565218,"discussion_content":"单独把API抽离出来的目的是减少包污染，也是大部分RPC框架推荐的一种方式。\n\n第三方API jar也是单独抽离出来的一个maven依赖项，和我们剥离API子模块供给其他业务方使用是一个道理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650417100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330458,"user_name":"逝影落枫","can_delete":false,"product_type":"c1","uid":1064489,"ip_address":"","ucode":"34788B4A504CD1","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/29/cc30bd9d.jpg","comment_is_top":false,"comment_ctime":1641984430,"is_pvip":false,"replies":[{"id":"120449","content":"熔断器的设置会在sentinel相关章节讲到，熔断是指在一段时间内，服务调用直接走降级逻辑","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1642005606,"ip_address":"","comment_id":330458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936951726","product_id":100101301,"comment_content":"是先有熔断，才有降级吗？熔断条件如何配置？","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545635,"discussion_content":"熔断器的设置会在sentinel相关章节讲到，熔断是指在一段时间内，服务调用直接走降级逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642005606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360870,"user_name":"楚翔style","can_delete":false,"product_type":"c1","uid":1174846,"ip_address":"内蒙古","ucode":"E715F82C34A9AA","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/3e/c1725237.jpg","comment_is_top":false,"comment_ctime":1666926071,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1666926071","product_id":100101301,"comment_content":"老师,整个项目有github链接吗? 想clone下来跑跑看","like_count":0},{"had_liked":false,"id":347375,"user_name":"Geek_0b93c0","can_delete":false,"product_type":"c1","uid":2971019,"ip_address":"","ucode":"ACAA7817AD2C61","user_header":"","comment_is_top":false,"comment_ctime":1653978183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653978183","product_id":100101301,"comment_content":"超时判定应该是加了个Timer 计时器 从配置读取超时时间 计时器在超时时间后过去该次请求的状态 未执行置为超时状态","like_count":0},{"had_liked":false,"id":336119,"user_name":"一个想偷懒的程序坑","can_delete":false,"product_type":"c1","uid":1013223,"ip_address":"","ucode":"C5F221A7065B74","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/e7/326d7515.jpg","comment_is_top":false,"comment_ctime":1645936594,"is_pvip":false,"replies":[{"id":"122851","content":"@编辑小姐姐 改错别字了","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1645969528,"ip_address":"","comment_id":336119,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1645936594","product_id":100101301,"comment_content":"“FULL：在 HEADERS 级别的基础上，还记录了服务请求和服务响应中的 Body 和 metadata，FULL 级别记录了最完成的调用信息。”，这句话中应该是“记录了最完整的调用信息”吧。","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553576,"discussion_content":"@编辑小姐姐 改错别字了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645969528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2843182,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/62/2e/6cd7e076.jpg","nickname":"Angela","note":"","ucode":"0C144DE7ECB865","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":553592,"discussion_content":"Yes sir！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645973267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553576,"ip_address":""},"score":553592,"extra":""}]},{"author":{"id":2843182,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/62/2e/6cd7e076.jpg","nickname":"Angela","note":"","ucode":"0C144DE7ECB865","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553593,"discussion_content":"感谢热心同学的提醒，已修改~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645973542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331781,"user_name":"咬尖月牙儿","can_delete":false,"product_type":"c1","uid":1325661,"ip_address":"","ucode":"A6223A6B713109","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/5d/c5dc789a.jpg","comment_is_top":false,"comment_ctime":1642757193,"is_pvip":false,"replies":[{"id":"121283","content":"可以把代码和配置贴出来看一下，估计是某个很小的地方漏了","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1642921136,"ip_address":"","comment_id":331781,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1642757193","product_id":100101301,"comment_content":"按步骤配置了fallback, 且customer服务配置了feign.circuitbreaker.enabled=true <br>template模块里面让线程sleep之后，还是之前readTimeout 没有触发降级。这是缺少了啥么？","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547884,"discussion_content":"可以把代码和配置贴出来看一下，估计是某个很小的地方漏了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642921136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1325661,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/5d/c5dc789a.jpg","nickname":"咬尖月牙儿","note":"","ucode":"A6223A6B713109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":547905,"discussion_content":"是我自己弄错了，是降级之后返回null引起的报错，我看的不够仔细，一开始是没有配置feign.circuitbreaker.enabled=true。配置之后就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642927217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547884,"ip_address":""},"score":547905,"extra":""}]}]},{"had_liked":false,"id":330375,"user_name":"so long","can_delete":false,"product_type":"c1","uid":1449679,"ip_address":"","ucode":"2A6B47BB32FC18","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/cf/97cd8be1.jpg","comment_is_top":false,"comment_ctime":1641957433,"is_pvip":false,"replies":[{"id":"120456","content":"sentinel的降级对象可以是任何资源，可以把openfeign接口服务作为一个“资源”托管给sentinel实现降级","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1642006484,"ip_address":"","comment_id":330375,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641957433","product_id":100101301,"comment_content":"OpenFeign+spring-cloud-starter-alibaba-sentinel 的 Client 端降级方案也可以吧","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545643,"discussion_content":"sentinel的降级对象可以是任何资源，可以把openfeign接口服务作为一个“资源”托管给sentinel实现降级","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642006484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330371,"user_name":"小仙","can_delete":false,"product_type":"c1","uid":1866677,"ip_address":"","ucode":"9F94043DFCEC3A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq6pWvKsV4rzQ62z5MDEjaEU5MbDfmzbA62kUgoqia2tgKIIxw4ibkDhF7W48iat5dT8UB9Adky2NuzQ/132","comment_is_top":false,"comment_ctime":1641955535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641955535","product_id":100101301,"comment_content":"超时判定<br>res = future.get(timeout, TimeUnit.MILLISECONDS);<br>信号量<br>semaphore = new Semaphore(semaphoreValue);","like_count":0}]}