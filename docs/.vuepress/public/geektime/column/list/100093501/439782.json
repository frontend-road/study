{"id":439782,"title":"12｜基本数据类型：Go原生支持的数值类型有哪些？","content":"<p>你好，我是Tony Bai。</p><p>在上一课中，我们学习了Go变量的声明形式，知道了变量所绑定的内存区域应该有明确的边界，而这个边界信息呢，是由变量的类型赋予的。那么，顺着这个脉络，从这一节课开始，我们就来深入讲解Go语言类型。</p><p>你可能会有点不解，类型是每个语言都有的东西，我们有必要花那么多时长、讲那么详细吗？</p><p>有必要。对像Go这样的静态编程语言来说，类型是十分重要的。因为它不仅是静态语言编译器的要求，更是我们对现实事物进行抽象的基础。对这一方面的学习，可以让你逐渐建立起代码设计的意识。</p><p>Go语言的类型大体可分为基本数据类型、复合数据类型和接口类型这三种。其中，我们日常Go编码中使用最多的就是基本数据类型，而基本数据类型中使用占比最大的又是数值类型。</p><p>那么，我们今天就先来讲数字类型。Go语言原生支持的数值类型包括整型、浮点型以及复数类型，它们适用于不同的场景。我们依次来看一下。</p><h2>被广泛使用的整型</h2><p>Go语言的整型，主要用来表示现实世界中整型数量，比如：人的年龄、班级人数等。它可以分为<strong>平台无关整型</strong>和<strong>平台相关整型</strong>这两种，它们的区别主要就在，这些整数类型在不同CPU架构或操作系统下面，它们的长度是否是一致的。</p><p>我们先来看<strong>平台无关整型</strong>，它们在任何CPU架构或任何操作系统下面，长度都是固定不变的。我在下面这张表中总结了Go提供的平台无关整型：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/06/f6/06b6f40dd25ed4296b5bae6fa8d890f6.jpg?wh=1920x1047\" alt=\"图片\"></p><p>你可以看到，这些平台无关的整型也可以分成两类：有符号整型（int8~int64）和无符号整型（uint8~uint64）。两者的本质差别在于最高二进制位（bit位）是否被解释为符号位，这点会影响到无符号整型与有符号整型的取值范围。</p><p>我们以下图中的这个8比特（一个字节）的整型值为例，当它被解释为无符号整型uint8时，和它被解释为有符号整型int8时表示的值是不同的：</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/26/0b9890673b05aa168b7bf6031d7f6926.jpg?wh=1611x859\" alt=\"图片\"></p><p>在同样的比特位表示下，当最高比特位被解释为符号位时，它代表一个有符号整型（int8），它表示的值为-127；当最高比特位不被解释为符号位时，它代表一个无符号整型(uint8)，它表示的值为129。</p><p>这里你可能就会问了：即便最高比特位被解释为符号位，上面的有符号整型所表示值也应该为-1啊，怎么会是-127呢？</p><p>这是因为Go采用<strong>2的补码</strong>（Two’s Complement）作为整型的比特位编码方法。因此，我们不能简单地将最高比特位看成负号，把其余比特位表示的值看成负号后面的数值。Go的补码是通过原码逐位取反后再加1得到的，比如，我们以-127这个值为例，它的补码转换过程就是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/3c/5bfe6c399f9cb192dd3cc43f180e4b3c.jpg?wh=1731x907\" alt=\"图片\"></p><p>与平台无关整型对应的就是平台相关整型，它们的长度会根据运行平台的改变而改变。Go语言原生提供了三个<strong>平台相关整型</strong>，它们是int、uint与uintptr，我同样也列了一张表：</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/e3/bb54f92e201e950e7977f98d2be52fe3.jpg?wh=1731x907\" alt=\"图片\"></p><p>在这里我们要特别注意一点，由于这三个类型的长度是平台相关的，所以我们<strong>在编写有移植性要求的代码时，千万不要强依赖这些类型的长度</strong>。如果你不知道这三个类型在目标运行平台上的长度，可以通过unsafe包提供的SizeOf函数来获取，比如在x86-64平台上，它们的长度均为8：</p><pre><code class=\"language-plain\">var a, b = int(5), uint(6)\nvar p uintptr = 0x12345678\nfmt.Println(\"signed integer a's length is\", unsafe.Sizeof(a)) // 8\nfmt.Println(\"unsigned integer b's length is\", unsafe.Sizeof(b)) // 8\nfmt.Println(\"uintptr's length is\", unsafe.Sizeof(p)) // 8\n</code></pre><p>现在我们已经搞清楚Go语言中整型的分类和长度了，但是在使用整型的过程中，我们还会遇到一个常见问题：整型溢出。</p><h3>整型的溢出问题</h3><p>无论哪种整型，都有它的取值范围，也就是有它可以表示的值边界。如果这个整型因为参与某个运算，导致结果超出了这个整型的值边界，我们就说发生了<strong>整型溢出</strong>的问题。由于整型无法表示它溢出后的那个“结果”，所以出现溢出情况后，对应的整型变量的值依然会落到它的取值范围内，只是结果值与我们的预期不符，导致程序逻辑出错。比如这就是一个无符号整型与一个有符号整型的溢出情况：</p><pre><code class=\"language-plain\">var s int8 = 127\ns += 1 // 预期128，实际结果-128\n\nvar u uint8 = 1\nu -= 2 // 预期-1，实际结果255\n</code></pre><p>你看，有符号整型变量s初始值为127，在加1操作后，我们预期得到128，但由于128超出了int8的取值边界，其实际结果变成了-128。无符号整型变量u也是一样的道理，它的初值为1，在进行减2操作后，我们预期得到-1，但由于-1超出了uint8的取值边界，它的实际结果变成了255。</p><p>这个问题最容易发生在循环语句的结束条件判断中，因为这也是经常使用整型变量的地方。无论无符号整型，还是有符号整型都存在溢出的问题，所以我们要十分小心地选择参与循环语句结束判断的整型变量类型，以及与之比较的边界值。</p><p>在了解了整型的这些基本信息后，我们再来看看整型支持的不同进制形式的字面值，以及如何输出不同进制形式的数值。</p><h3>字面值与格式化输出</h3><p>Go语言在设计开始，就继承了C语言关于<strong>数值字面值（Number Literal）</strong>的语法形式。早期Go版本支持十进制、八进制、十六进制的数值字面值形式，比如：</p><pre><code class=\"language-plain\">a := 53        // 十进制\nb := 0700      // 八进制，以\"0\"为前缀\nc1 := 0xaabbcc // 十六进制，以\"0x\"为前缀\nc2 := 0Xddeeff // 十六进制，以\"0X\"为前缀\n</code></pre><p>Go 1.13版本中，Go又增加了对二进制字面值的支持和两种八进制字面值的形式，比如：</p><pre><code class=\"language-plain\">d1 := 0b10000001 // 二进制，以\"0b\"为前缀\nd2 := 0B10000001 // 二进制，以\"0B\"为前缀\ne1 := 0o700      // 八进制，以\"0o\"为前缀\ne2 := 0O700      // 八进制，以\"0O\"为前缀\n</code></pre><p>为提升字面值的可读性，Go 1.13版本还支持在字面值中增加数字分隔符“_”，分隔符可以用来将数字分组以提高可读性。比如每3个数字一组，也可以用来分隔前缀与字面值中的第一个数字：</p><pre><code class=\"language-plain\">a := 5_3_7   // 十进制: 537\nb := 0b_1000_0111  // 二进制位表示为10000111 \nc1 := 0_700  // 八进制: 0700\nc2 := 0o_700 // 八进制: 0700\nd1 := 0x_5c_6d // 十六进制：0x5c6d\n</code></pre><p>不过，这里你要注意一下，Go 1.13中增加的二进制字面值以及数字分隔符，只在go.mod中的go version指示字段为Go 1.13以及以后版本的时候，才会生效，否则编译器会报错。</p><p>反过来，我们也可以通过标准库fmt包的格式化输出函数，将一个整型变量输出为不同进制的形式。比如下面就是将十进制整型值59，格式化输出为二进制、八进制和十六进制的代码：</p><pre><code class=\"language-plain\">var a int8 = 59\nfmt.Printf(\"%b\\n\", a) //输出二进制：111011\nfmt.Printf(\"%d\\n\", a) //输出十进制：59\nfmt.Printf(\"%o\\n\", a) //输出八进制：73\nfmt.Printf(\"%O\\n\", a) //输出八进制(带0o前缀)：0o73\nfmt.Printf(\"%x\\n\", a) //输出十六进制(小写)：3b\nfmt.Printf(\"%X\\n\", a) //输出十六进制(大写)：3B\n</code></pre><p>到这里，我们对整型的学习就先告一段落了。我们接下来看另外一个数值类型：浮点型。</p><h2>浮点型</h2><p>和使用广泛的整型相比，浮点型的使用场景就相对聚焦了，主要集中在科学数值计算、图形图像处理和仿真、多媒体游戏以及人工智能等领域。我们这一部分对于浮点型的学习，主要是讲解Go语言中浮点类型在内存中的表示方法，这可以帮你建立应用浮点类型的理论基础。</p><h3>浮点型的二进制表示</h3><p>要想知道Go语言中的浮点类型的二进制表示是怎样的，我们首先要来了解<a href=\"https://zh.wikipedia.org/wiki/IEEE_754\">IEEE 754标准</a>。</p><p>IEEE 754是IEEE制定的二进制浮点数算术标准，它是20世纪80年代以来最广泛使用的浮点数运算标准，被许多CPU与浮点运算器采用。现存的大部分主流编程语言，包括Go语言，都提供了符合IEEE 754标准的浮点数格式与算术运算。</p><p>IEEE 754标准规定了四种表示浮点数值的方式：单精度（32位）、双精度（64位）、扩展单精度（43比特以上）与扩展双精度（79比特以上，通常以80位实现）。后两种其实很少使用，我们重点关注前面两个就好了。</p><p>Go语言提供了float32与float64两种浮点类型，它们分别对应的就是IEEE 754中的单精度与双精度浮点数值类型。不过，这里要注意，Go语言中没有提供float类型。这不像整型那样，Go既提供了int16、int32等类型，又有int类型。换句话说，Go提供的浮点类型都是平台无关的。</p><p>那float32与float64这两种浮点类型有什么异同点呢？</p><p>无论是float32还是float64，它们的变量的默认值都为0.0，不同的是它们占用的内存空间大小是不一样的，可以表示的浮点数的范围与精度也不同。那么浮点数在内存中的二进制表示究竟是怎么样的呢？</p><p>浮点数在内存中的二进制表示（Bit Representation）要比整型复杂得多，IEEE 754规范给出了在内存中存储和表示一个浮点数的标准形式，见下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/71/59/71ec0ab2749d077eb8ae1451f7823859.jpg?wh=1731x718\" alt=\"图片\"></p><p>我们看到浮点数在内存中的二进制表示分三个部分：符号位、阶码（即经过换算的指数），以及尾数。这样表示的一个浮点数，它的值等于：</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/27/d5bd785155a998bccd0e913f66024e27.jpg?wh=1100x307\" alt=\"图片\"></p><p>其中浮点值的符号由符号位决定：当符号位为1时，浮点值为负值；当符号位为0时，浮点值为正值。公式中offset被称为阶码偏移值，这个我们待会再讲。</p><p><strong>我们首先来看单精度（float32）与双精度（float64）浮点数在阶码和尾数上的不同。</strong>这两种浮点数的阶码与尾数所使用的位数是不一样的，你可以看下IEEE 754标准中单精度和双精度浮点数的各个部分的长度规定：</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/ce/0b6c1bf3d12cf270e29a79db0c342bce.jpg?wh=1731x907\" alt=\"图片\"></p><p>我们看到，单精度浮点类型（float32）为符号位分配了1个bit，为阶码分配了8个bit，剩下的23个bit分给了尾数。而双精度浮点类型，除了符号位的长度与单精度一样之外，其余两个部分的长度都要远大于单精度浮点型，阶码可用的bit位数量为11，尾数则更是拥有了52个bit位。</p><p><strong>接着，我们再来看前面提到的“阶码偏移值”，我想用一个例子直观地让你感受一下。</strong>在这个例子中，我们来看看如何将一个十进制形式的浮点值139.8125，转换为IEEE 754规定中的那种单精度二进制表示。</p><p><strong>步骤一：我们要把这个浮点数值的整数部分和小数 部分，分别转换为二进制形式</strong>（后缀d表示十进制数，后缀b表示二进制数）：</p><ul>\n<li>整数部分：139d =&gt; 10001011b；</li>\n<li>小数部分：0.8125d =&gt; 0.1101b（十进制小数转换为二进制可采用“乘2取整”的竖式计算）。</li>\n</ul><p>这样，原浮点值<strong>139.8125d</strong>进行二进制转换后，就变成<strong>10001011.1101b</strong>。</p><p><strong>步骤二：移动小数点，直到整数部分仅有一个1，</strong>也就是10001011.1101b =&gt; 1.00010111101b。我们看到，为了整数部分仅保留一个1，小数点向左移了7位，这样指数就为7，尾数为00010111101b。</p><p><strong>步骤三：计算阶码。</strong></p><p>IEEE754规定不能将小数点移动得到的指数，直接填到阶码部分，指数到阶码还需要一个转换过程。对于float32的单精度浮点数而言，阶码 = 指数 + 偏移值。偏移值的计算公式为2^(e-1)-1，其中e为阶码部分的bit位数，这里为8，于是<strong>单精度浮点数的阶码偏移值</strong>就为2^(8-1)-1 = 127。这样在这个例子中，阶码 = 7 + 127 = 134d = 10000110b。float64的双精度浮点数的阶码计算也是这样的。</p><p><strong>步骤四：将符号位、阶码和尾数填到各自位置，得到最终浮点数的二进制表示。</strong>尾数位数不足23位，可在后面补0。</p><p><img src=\"https://static001.geekbang.org/resource/image/f9/a7/f9292fe5bdc5f24938bab691ea5451a7.jpg?wh=1731x566\" alt=\"图片\"></p><p>这样，最终浮点数<strong>139.8125d</strong>的二进制表示就为<strong>0b_0_10000110_00010111101_000000000000</strong>。</p><p>最后，我们再通过Go代码输出浮点数<strong>139.8125d</strong>的二进制表示，和前面我们手工转换的做一下比对，看是否一致。</p><pre><code class=\"language-plain\">func main() {\n    var f float32 = 139.8125\n    bits := math.Float32bits(f)\n    fmt.Printf(\"%b\\n\", bits)\n}\n</code></pre><p>在这段代码中，我们通过标准库的math包，将float32转换为整型。在这种转换过程中，float32的内存表示是不会被改变的。然后我们再通过前面提过的整型值的格式化输出，将它以二进制形式输出出来。运行这个程序，我们得到下面的结果：</p><pre><code>1000011000010111101000000000000\n</code></pre><p>我们看到这个值在填上省去的最高位的0后，与我们手工得到的浮点数的二进制表示一模一样。这就说明我们手工推导的思路并没有错。</p><p>而且，你可以从这个例子中感受到，阶码和尾数的长度决定了浮点类型可以表示的浮点数范围与精度。因为双精度浮点类型（float64）阶码与尾数使用的比特位数更多，它可以表示的精度要远超单精度浮点类型，所以在日常开发中，我们使用双精度浮点类型（float64）的情况更多，这也是Go语言中浮点常量或字面值的默认类型。</p><p>而float32由于表示范围与精度有限，经常会给开发者造成一些困扰。比如我们可能会因为float32精度不足，导致输出结果与常识不符。比如下面这个例子就是这样，f1与f2两个浮点类型变量被两个不同的浮点字面值初始化，但逻辑比较的结果却是两个变量的值相等。至于其中原因，我将作为思考题留给你，你可以结合前面讲解的浮点类型表示方法，对这个例子进行分析：</p><pre><code class=\"language-plain\">var f1 float32 = 16777216.0\nvar f2 float32 = 16777217.0\nfmt.Println(f1 == f2) // true\n</code></pre><p>看到这里，你是不是觉得浮点类型很神奇？和易用易理解的整型相比，浮点类型无论在二进制表示层面，还是在使用层面都要复杂得多。即便是浮点字面值，有时候也不是一眼就能看出其真实的浮点值是多少的。下面我们就接着来分析一下浮点型的字面值。</p><h3>字面值与格式化输出</h3><p>Go浮点类型字面值大体可分为两类，一类是<strong>直白地用十进制表示的浮点值形式</strong>。这一类，我们通过字面值就可直接确定它的浮点值，比如：</p><pre><code class=\"language-plain\">3.1415\n.15  // 整数部分如果为0，整数部分可以省略不写\n81.80\n82. // 小数部分如果为0，小数点后的0可以省略不写\n</code></pre><p>另一类则是<strong>科学计数法形式</strong>。采用科学计数法表示的浮点字面值，我们需要通过一定的换算才能确定其浮点值。而且在这里，科学计数法形式又分为十进制形式表示的，和十六进制形式表示的两种。</p><p>我们先来看十进制科学计数法形式的浮点数字面值，这里字面值中的e/E代表的幂运算的底数为10：</p><pre><code class=\"language-plain\">6674.28e-2 // 6674.28 * 10^(-2) = 66.742800\n.12345E+5  // 0.12345 * 10^5 = 12345.000000\n</code></pre><p>接着是十六进制科学计数法形式的浮点数：</p><pre><code class=\"language-plain\">0x2.p10  // 2.0 * 2^10 = 2048.000000\n0x1.Fp+0 // 1.9375 * 2^0 = 1.937500\n</code></pre><p>这里，我们要注意，十六进制科学计数法的整数部分、小数部分用的都是十六进制形式，但指数部分依然是十进制形式，并且字面值中的p/P代表的幂运算的底数为2。</p><p>知道了浮点型的字面值后，和整型一样，fmt包也提供了针对浮点数的格式化输出。我们最常使用的格式化输出形式是%f。通过%f，我们可以输出浮点数最直观的原值形式。</p><pre><code class=\"language-plain\">var f float64 = 123.45678\nfmt.Printf(\"%f\\n\", f) // 123.456780\n</code></pre><p>我们也可以将浮点数输出为科学计数法形式，如下面代码：</p><pre><code class=\"language-plain\">fmt.Printf(\"%e\\n\", f) // 1.234568e+02\nfmt.Printf(\"%x\\n\", f) // 0x1.edd3be22e5de1p+06\n</code></pre><p>其中%e输出的是十进制的科学计数法形式，而%x输出的则是十六进制的科学计数法形式。</p><p>到这里，关于浮点类型的内容就告一段落了。有了整型和浮点型的基础，接下来我们再进行复数类型的学习就容易多了。</p><h2>复数类型</h2><p>数学课本上将形如z=a+bi（a、b均为实数，a称为实部，b称为虚部）的数称为<strong>复数</strong>，这里我们也可以这么理解。相比C语言直到采用C99标准，才在complex.h中引入了对复数类型的支持，Go语言则原生支持复数类型。不过，和整型、浮点型相比，复数类型在Go中的应用就更为局限和小众，主要用于专业领域的计算，比如矢量计算等。我们简单了解一下就可以了。</p><p>Go提供两种复数类型，它们分别是complex64和complex128，complex64的实部与虚部都是float32类型，而complex128的实部与虚部都是float64类型。如果一个复数没有显示赋予类型，那么它的默认类型为complex128。</p><p>关于复数字面值的表示，我们其实有三种方法。</p><p><strong>第一种，我们可以通过复数字面值直接初始化一个复数类型变量：</strong></p><pre><code class=\"language-plain\">var c = 5 + 6i\nvar d = 0o123 + .12345E+5i // 83+12345i\n</code></pre><p><strong>第二种，Go还提供了complex函数，方便我们创建一个complex128类型值：</strong></p><pre><code class=\"language-plain\">var c = complex(5, 6) // 5 + 6i\nvar d = complex(0o123, .12345E+5) // 83+12345i\n</code></pre><p><strong>第三种，你还可以通过Go提供的预定义的函数real和imag，来获取一个复数的实部与虚部，返回值为一个浮点类型：</strong></p><pre><code class=\"language-plain\">var c = complex(5, 6) // 5 + 6i\nr := real(c) // 5.000000\ni := imag(c) // 6.000000\n</code></pre><p>至于复数形式的格式化输出的问题，由于complex类型的实部与虚部都是浮点类型，所以我们可以直接运用浮点型的格式化输出方法，来输出复数类型，你直接参考前面的讲解就好了。</p><p>到这里，其实我们已经把Go原生支持的数值类型都讲完了。但是，在原生数值类型不满足我们对现实世界的抽象的情况下，你可能还需要通过Go提供的类型定义语法来创建自定义的数值类型，这里我们也适当延展一下，看看这种情况怎么做。</p><h2>延展：创建自定义的数值类型</h2><p>如果我们要通过Go提供的类型定义语法，来创建自定义的数值类型，我们可以通过type关键字基于原生数值类型来声明一个新类型。</p><p>但是自定义的数值类型，在和其他类型相互赋值时容易出现一些问题。下面我们就来建立一个名为MyInt的新的数值类型看看：</p><pre><code class=\"language-plain\">type MyInt int32\n</code></pre><p>这里，因为MyInt类型的底层类型是int32，所以它的数值性质与int32完全相同，但它们仍然是完全不同的两种类型。根据Go的类型安全规则，我们无法直接让它们相互赋值，或者是把它们放在同一个运算中直接计算，这样编译器就会报错。</p><pre><code>var m int = 5\nvar n int32 = 6\nvar a MyInt = m // 错误：在赋值中不能将m（int类型）作为MyInt类型使用\nvar a MyInt = n // 错误：在赋值中不能将n（int32类型）作为MyInt类型使用\n</code></pre><p>要避免这个错误，我们需要借助<strong>显式转型</strong>，让赋值操作符左右两边的操作数保持类型一致，像下面代码中这样做：</p><pre><code class=\"language-plain\">var m int = 5\nvar n int32 = 6\nvar a MyInt = MyInt(m) // ok\nvar a MyInt = MyInt(n) // ok\n</code></pre><p><strong>我们也可以通过Go提供的类型别名（Type Alias）语法来自定义数值类型</strong>。和上面使用标准type语法的定义不同的是，通过类型别名语法定义的新类型与原类型别无二致，可以完全相互替代。我们来看下面代码：</p><pre><code class=\"language-plain\">type MyInt = int32\n\nvar n int32 = 6\nvar a MyInt = n // ok\n</code></pre><p>你可以看到，通过类型别名定义的MyInt与int32完全等价，所以这个时候两种类型就是同一种类型，不再需要显式转型，就可以相互赋值。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>在这一讲中，我们开始学习Go的数据类型了。我们从最简单且最常用的数值类型开始学起。Go的原生数值类型有三类：整型、浮点型和复数型。</p><p>首先，整数类型包含的具体类型比较多，我这里用一个表格做个总结：</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/a7/8dab473d89930744d721dfa48e9723a7.jpg?wh=1637x1119\" alt=\"图片\"></p><p>Go语言中的整型的二进制表示采用2的补码形式，你可以回忆一下如何计算一个负数的补码，其实很简单！记住“原码取反加1”即可。</p><p>另外，学习整型时你要特别注意，每个整型都有自己的取值范围和表示边界，一旦超出边界，便会出现溢出问题。溢出问题多出现在循环语句中进行结束条件判断的位置，我们在选择参与循环语句结束判断的整型变量类型以及比较边界值时要尤其小心。</p><p>接下来，我们还讲了Go语言实现了IEEE 754标准中的浮点类型二进制表示。在这种表示中，一个浮点数被分为符号位、阶码与尾数三个部分，我们用一个实例讲解了如何推导出一个浮点值的二进制表示。如果你理解了那个推导过程，你就基本掌握浮点类型了。虽然我们在例子中使用的是float32类型做的演示，但日常使用中我们尽量使用float64，这样不容易出现浮点溢出的问题。复数类型也是基于浮点型实现的，日常使用较少，你简单了解就可以了。</p><p>最后，我们还了解了如何利用类型定义语法与类型别名语法创建自定义数值类型。通过类型定义语法实现的自定义数值类型虽然在数值性质上与原类型是一致的，但它们却是完全不同的类型，不能相互赋值，比如通过显式转型才能避免编译错误。而通过类型别名创建的新类型则等价于原类型，可以互相替代。</p><h2>思考题</h2><p>今天的思考题，我想请你分析一下：下面例子中f1为何会与f2相等？欢迎在留言区留下你的答案。</p><pre><code class=\"language-plain\">var f1 float32 = 16777216.0\nvar f2 float32 = 16777217.0\nf1 == f2 // true\n</code></pre><p>欢迎把这节课分享给更多对Go语言感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","neighbors":{"left":{"article_title":"11｜代码块与作用域：如何保证变量不会被遮蔽？","id":436915},"right":{"article_title":"13｜基本数据类型：为什么Go要原生支持字符串类型？","id":440804}},"comments":[{"had_liked":false,"id":320450,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1636336403,"is_pvip":false,"replies":[{"id":116274,"content":"嗯，是这样的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636427291,"ip_address":"","comment_id":320450,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"float 其实相当复杂，开发中如果能避开就避开，例如金钱单位只有美元或者人民币我建议以分作为单位。","like_count":60},{"had_liked":false,"id":320622,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1636426132,"is_pvip":false,"replies":[{"id":116488,"content":"👍","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636629397,"ip_address":"","comment_id":320622,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"\nvar f1 float32 = 16777216.0\nvar f2 float32 = 16777217.0\nf1 == f2 &#47;&#47; true\n\nf1 转换成二进制是：1266679808\nf2 转换成二进制也是：1266679808\n这个为什么是相等的，是因为转换成二进制的数据是相等的。","like_count":39,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529994,"discussion_content":"嗯，是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636427291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2812380,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/e9/dc/cc05ebc7.jpg","nickname":"小明","note":"","ucode":"F10955FF010368","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582419,"discussion_content":"这章看你这评论就够了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1659429417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003581,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/MlmSR4YXUfrNlZdMv7bv1ic64HaxxVKcVtaxjzhXCvNC4XByICCmYUTprhOESzIV8p59N6DnSJ7HywfvGr5nicgA/132","nickname":"mz","note":"","ucode":"1D714C23F78446","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600103,"discussion_content":"也可以用 bigdecimal","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674012909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019807,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","nickname":"幽弥狂","note":"","ucode":"5AECEA7D6ADF33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568459,"discussion_content":"我也是这么认为的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651142290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1509119,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/ff/e4828765.jpg","nickname":"LiLian","note":"","ucode":"9807877F1A9224","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567338,"discussion_content":"不过为啥呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650891882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1509119,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/ff/e4828765.jpg","nickname":"LiLian","note":"","ucode":"9807877F1A9224","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567370,"discussion_content":"可以研究一下 IEEE754 对于浮点数的定义，再研究一下各种语言里面 0.1+0.2 是否等于 0.3 你就知道了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1650896742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":567338,"ip_address":"","group_id":0},"score":567370,"extra":""}]}]},{"had_liked":false,"id":320838,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1636527384,"is_pvip":false,"replies":[{"id":116753,"content":"采用自定义类型时，我们考虑的角度不是优劣，而是需求。以type Myint int32为例，我们这么做，显然是因为int32不能满足我们的需求。哪些需求不能满足呢？第一个就是抽象，我们要建立更高级的抽象；第二个是我们不能为go原生类型int32增加我们想要的方法，只有通过自定义类型来实现。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636929199,"ip_address":"","comment_id":320838,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"type Myint int32 这种自定义类型在实际应用中有什么优势吗？","like_count":33,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530066,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636629397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2885173,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","nickname":"五彩斑斓的輝","note":"","ucode":"43F11424417E06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634721,"discussion_content":"为啥不同的float类型，允许转成二进制时相等呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703836650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320563,"user_name":"羊羊","can_delete":false,"product_type":"c1","uid":1162597,"ip_address":"","ucode":"B220CE8D1CA5DA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/65/fbdf4fc1.jpg","comment_is_top":false,"comment_ctime":1636381008,"is_pvip":false,"replies":[{"id":116276,"content":"0x1.Fp+0中的F是十六进制数，它的十进制值为15。F在小数点后一位，因此上面数字的小数部分0.F转换为10进制小数就是15 x 16^(-1)=0.9375","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636429035,"ip_address":"","comment_id":320563,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"0x1.Fp+0 &#47;&#47; 1.9375 * 2^0 = 1.937500这个是如何计算得到的？0x1.F=1.9375是如何得到的？","like_count":15,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530049,"discussion_content":"0x1.Fp+0中的F是十六进制数，它的十进制值为15。F在小数点后一位，因此上面数字的小数部分0.F转换为10进制小数就是15 x 16^(-1)=0.9375","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636429035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323818,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1638174197,"is_pvip":false,"replies":[{"id":117550,"content":"int与map[string]int虽然都是go原生类型，但它们却有不同。int在go中被归为defined type一类，而map[string]int则不是defined type。因此两个defined type: int与MyInt相互赋值必须显式转型。而map[string]int与MyMapp中，前者不是defined type，go语言有规定：这种情况下，可以直接赋值。具体参考这里：https:&#47;&#47;golang.google.cn&#47;ref&#47;spec#Assignability","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638255057,"ip_address":"","comment_id":323818,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"type Myint int\ntype MyMapp map[string]int\nfunc main(){\nvar x Myint\nvar y int\nx=y&#47;&#47;会报错\nmp1:=make(MyMapp)\nmp2:=make(map[string]int)\nmp1=mp2 &#47;&#47;不会报错\n} \n老师为甚么map就不会报错","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534668,"discussion_content":"int与map[string]int虽然都是go原生类型，但它们却有不同。int在go中被归为defined type一类，而map[string]int则不是defined type。因此两个defined type: int与MyInt相互赋值必须显式转型。而map[string]int与MyMapp中，前者不是defined type，go语言有规定：这种情况下，可以直接赋值。具体参考这里：https://golang.google.cn/ref/spec#Assignability","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638255057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332599,"user_name":"松","can_delete":false,"product_type":"c1","uid":2003771,"ip_address":"","ucode":"B8C0D2DEFE28DF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epj6jUIlYtOeSy6oLH6sDIj5TQqp375oD2njhmsSZ5Imr1KNbc9eZFEIsF9DFzWC12QffUcq6R5AQ/132","comment_is_top":false,"comment_ctime":1643360338,"is_pvip":false,"replies":[{"id":121541,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643442726,"ip_address":"","comment_id":332599,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"func main() {\n\tvar f2 float32 = 16777216.0\n\tvar f3 float32 = 16777217.0\n\t&#47;&#47; 1001011100000000000000000000000\n\tfmt.Printf(&quot;%b\\n&quot;, math.Float32bits(f2))\n\t&#47;&#47; 1001011100000000000000000000000\n\tfmt.Printf(&quot;%b\\n&quot;, math.Float32bits(f3))\n}\n变量的二进制表示一样，所以相同了","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548905,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643442726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328570,"user_name":"运维夜谈","can_delete":false,"product_type":"c1","uid":1054300,"ip_address":"","ucode":"E2E93375FF5A07","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/5c/d0476f9f.jpg","comment_is_top":false,"comment_ctime":1640774534,"is_pvip":true,"replies":[{"id":120425,"content":"原生的int32不能有方法，但自定义类型可以有方法哦。比如我定义一个名为Age的类型：type Age int32。Age可以作为“年龄”的抽象。我们可以为Age定义方法。至于类型别名，更多用于重构代码或基于已有包的二次封装。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641997235,"ip_address":"","comment_id":328570,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，自定义类型和类型别名有什么样的应用场景？比如自定义一个类型，本质还是int32，那为啥不直接用int32，看起来感觉有点语法糖的意思，用处不大，特别是类型别名😢","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548905,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643442726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342061,"user_name":"ryanxw","can_delete":false,"product_type":"c1","uid":2119325,"ip_address":"","ucode":"0B91EAC8D06EED","user_header":"https://static001.geekbang.org/account/avatar/00/20/56/9d/4b2a7d29.jpg","comment_is_top":false,"comment_ctime":1649994844,"is_pvip":false,"replies":[{"id":125014,"content":"浮点用起来的确坑挺多。当然这也和其他实现原理有关。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650009954,"ip_address":"","comment_id":342061,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"工程开发中尽量不用浮点，像我们都要求用string来存价格","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563489,"discussion_content":"浮点用起来的确坑挺多。当然这也和其他实现原理有关。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650009954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337030,"user_name":"Kepler","can_delete":false,"product_type":"c1","uid":1214303,"ip_address":"","ucode":"0C9CA3DB8B3CF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/87/5f/6bf8b74a.jpg","comment_is_top":false,"comment_ctime":1646558205,"is_pvip":false,"replies":[{"id":123237,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646722570,"ip_address":"","comment_id":337030,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"因为两个浮点数的差异在尾数M的第24位，超了","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555018,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646722570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320707,"user_name":"tequ1lAneio","can_delete":false,"product_type":"c1","uid":1936087,"ip_address":"","ucode":"41336E87FF2E1A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8a/d7/daabec34.jpg","comment_is_top":false,"comment_ctime":1636464104,"is_pvip":false,"replies":[{"id":116717,"content":"类型别名加入go的初衷就是为了重构，这也是其主要场景。在第17讲中还会有提及。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636899733,"ip_address":"","comment_id":320707,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师好，类型别名具体会在哪些场景用得到呢？","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555018,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646722570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320450,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1636336403,"is_pvip":false,"replies":[{"id":116274,"content":"嗯，是这样的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636427291,"ip_address":"","comment_id":320450,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"float 其实相当复杂，开发中如果能避开就避开，例如金钱单位只有美元或者人民币我建议以分作为单位。","like_count":60,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529994,"discussion_content":"嗯，是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636427291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2812380,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/e9/dc/cc05ebc7.jpg","nickname":"小明","note":"","ucode":"F10955FF010368","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582419,"discussion_content":"这章看你这评论就够了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1659429417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003581,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/MlmSR4YXUfrNlZdMv7bv1ic64HaxxVKcVtaxjzhXCvNC4XByICCmYUTprhOESzIV8p59N6DnSJ7HywfvGr5nicgA/132","nickname":"mz","note":"","ucode":"1D714C23F78446","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600103,"discussion_content":"也可以用 bigdecimal","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674012909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019807,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","nickname":"幽弥狂","note":"","ucode":"5AECEA7D6ADF33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568459,"discussion_content":"我也是这么认为的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651142290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1509119,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/ff/e4828765.jpg","nickname":"LiLian","note":"","ucode":"9807877F1A9224","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567338,"discussion_content":"不过为啥呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650891882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1509119,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/ff/e4828765.jpg","nickname":"LiLian","note":"","ucode":"9807877F1A9224","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567370,"discussion_content":"可以研究一下 IEEE754 对于浮点数的定义，再研究一下各种语言里面 0.1+0.2 是否等于 0.3 你就知道了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1650896742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":567338,"ip_address":"","group_id":0},"score":567370,"extra":""}]}]},{"had_liked":false,"id":320622,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1636426132,"is_pvip":false,"replies":[{"id":116488,"content":"👍","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636629397,"ip_address":"","comment_id":320622,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"\nvar f1 float32 = 16777216.0\nvar f2 float32 = 16777217.0\nf1 == f2 &#47;&#47; true\n\nf1 转换成二进制是：1266679808\nf2 转换成二进制也是：1266679808\n这个为什么是相等的，是因为转换成二进制的数据是相等的。","like_count":39,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530066,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636629397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2885173,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","nickname":"五彩斑斓的輝","note":"","ucode":"43F11424417E06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634721,"discussion_content":"为啥不同的float类型，允许转成二进制时相等呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703836650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320838,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1636527384,"is_pvip":false,"replies":[{"id":116753,"content":"采用自定义类型时，我们考虑的角度不是优劣，而是需求。以type Myint int32为例，我们这么做，显然是因为int32不能满足我们的需求。哪些需求不能满足呢？第一个就是抽象，我们要建立更高级的抽象；第二个是我们不能为go原生类型int32增加我们想要的方法，只有通过自定义类型来实现。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636929199,"ip_address":"","comment_id":320838,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"type Myint int32 这种自定义类型在实际应用中有什么优势吗？","like_count":33,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530137,"discussion_content":"采用自定义类型时，我们考虑的角度不是优劣，而是需求。以type Myint int32为例，我们这么做，显然是因为int32不能满足我们的需求。哪些需求不能满足呢？第一个就是抽象，我们要建立更高级的抽象；第二个是我们不能为go原生类型int32增加我们想要的方法，只有通过自定义类型来实现。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1636929199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320563,"user_name":"羊羊","can_delete":false,"product_type":"c1","uid":1162597,"ip_address":"","ucode":"B220CE8D1CA5DA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/65/fbdf4fc1.jpg","comment_is_top":false,"comment_ctime":1636381008,"is_pvip":false,"replies":[{"id":116276,"content":"0x1.Fp+0中的F是十六进制数，它的十进制值为15。F在小数点后一位，因此上面数字的小数部分0.F转换为10进制小数就是15 x 16^(-1)=0.9375","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636429035,"ip_address":"","comment_id":320563,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"0x1.Fp+0 &#47;&#47; 1.9375 * 2^0 = 1.937500这个是如何计算得到的？0x1.F=1.9375是如何得到的？","like_count":15,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530137,"discussion_content":"采用自定义类型时，我们考虑的角度不是优劣，而是需求。以type Myint int32为例，我们这么做，显然是因为int32不能满足我们的需求。哪些需求不能满足呢？第一个就是抽象，我们要建立更高级的抽象；第二个是我们不能为go原生类型int32增加我们想要的方法，只有通过自定义类型来实现。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1636929199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323818,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1638174197,"is_pvip":false,"replies":[{"id":117550,"content":"int与map[string]int虽然都是go原生类型，但它们却有不同。int在go中被归为defined type一类，而map[string]int则不是defined type。因此两个defined type: int与MyInt相互赋值必须显式转型。而map[string]int与MyMapp中，前者不是defined type，go语言有规定：这种情况下，可以直接赋值。具体参考这里：https:&#47;&#47;golang.google.cn&#47;ref&#47;spec#Assignability","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638255057,"ip_address":"","comment_id":323818,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"type Myint int\ntype MyMapp map[string]int\nfunc main(){\nvar x Myint\nvar y int\nx=y&#47;&#47;会报错\nmp1:=make(MyMapp)\nmp2:=make(map[string]int)\nmp1=mp2 &#47;&#47;不会报错\n} \n老师为甚么map就不会报错","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530049,"discussion_content":"0x1.Fp+0中的F是十六进制数，它的十进制值为15。F在小数点后一位，因此上面数字的小数部分0.F转换为10进制小数就是15 x 16^(-1)=0.9375","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636429035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332599,"user_name":"松","can_delete":false,"product_type":"c1","uid":2003771,"ip_address":"","ucode":"B8C0D2DEFE28DF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epj6jUIlYtOeSy6oLH6sDIj5TQqp375oD2njhmsSZ5Imr1KNbc9eZFEIsF9DFzWC12QffUcq6R5AQ/132","comment_is_top":false,"comment_ctime":1643360338,"is_pvip":false,"replies":[{"id":121541,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643442726,"ip_address":"","comment_id":332599,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"func main() {\n\tvar f2 float32 = 16777216.0\n\tvar f3 float32 = 16777217.0\n\t&#47;&#47; 1001011100000000000000000000000\n\tfmt.Printf(&quot;%b\\n&quot;, math.Float32bits(f2))\n\t&#47;&#47; 1001011100000000000000000000000\n\tfmt.Printf(&quot;%b\\n&quot;, math.Float32bits(f3))\n}\n变量的二进制表示一样，所以相同了","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534668,"discussion_content":"int与map[string]int虽然都是go原生类型，但它们却有不同。int在go中被归为defined type一类，而map[string]int则不是defined type。因此两个defined type: int与MyInt相互赋值必须显式转型。而map[string]int与MyMapp中，前者不是defined type，go语言有规定：这种情况下，可以直接赋值。具体参考这里：https://golang.google.cn/ref/spec#Assignability","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638255057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328570,"user_name":"运维夜谈","can_delete":false,"product_type":"c1","uid":1054300,"ip_address":"","ucode":"E2E93375FF5A07","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/5c/d0476f9f.jpg","comment_is_top":false,"comment_ctime":1640774534,"is_pvip":true,"replies":[{"id":120425,"content":"原生的int32不能有方法，但自定义类型可以有方法哦。比如我定义一个名为Age的类型：type Age int32。Age可以作为“年龄”的抽象。我们可以为Age定义方法。至于类型别名，更多用于重构代码或基于已有包的二次封装。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641997235,"ip_address":"","comment_id":328570,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，自定义类型和类型别名有什么样的应用场景？比如自定义一个类型，本质还是int32，那为啥不直接用int32，看起来感觉有点语法糖的意思，用处不大，特别是类型别名😢","like_count":6,"discussions":[{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619566,"discussion_content":"原生的init32不能有方法，但是自定义类型可以有方法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1685276826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545584,"discussion_content":"原生的int32不能有方法，但自定义类型可以有方法哦。比如我定义一个名为Age的类型：type Age int32。Age可以作为“年龄”的抽象。我们可以为Age定义方法。至于类型别名，更多用于重构代码或基于已有包的二次封装。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641997236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342061,"user_name":"ryanxw","can_delete":false,"product_type":"c1","uid":2119325,"ip_address":"","ucode":"0B91EAC8D06EED","user_header":"https://static001.geekbang.org/account/avatar/00/20/56/9d/4b2a7d29.jpg","comment_is_top":false,"comment_ctime":1649994844,"is_pvip":false,"replies":[{"id":125014,"content":"浮点用起来的确坑挺多。当然这也和其他实现原理有关。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650009954,"ip_address":"","comment_id":342061,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"工程开发中尽量不用浮点，像我们都要求用string来存价格","like_count":4,"discussions":[{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619566,"discussion_content":"原生的init32不能有方法，但是自定义类型可以有方法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1685276826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545584,"discussion_content":"原生的int32不能有方法，但自定义类型可以有方法哦。比如我定义一个名为Age的类型：type Age int32。Age可以作为“年龄”的抽象。我们可以为Age定义方法。至于类型别名，更多用于重构代码或基于已有包的二次封装。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641997236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337030,"user_name":"Kepler","can_delete":false,"product_type":"c1","uid":1214303,"ip_address":"","ucode":"0C9CA3DB8B3CF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/87/5f/6bf8b74a.jpg","comment_is_top":false,"comment_ctime":1646558205,"is_pvip":false,"replies":[{"id":123237,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646722570,"ip_address":"","comment_id":337030,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"因为两个浮点数的差异在尾数M的第24位，超了","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563489,"discussion_content":"浮点用起来的确坑挺多。当然这也和其他实现原理有关。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650009954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320707,"user_name":"tequ1lAneio","can_delete":false,"product_type":"c1","uid":1936087,"ip_address":"","ucode":"41336E87FF2E1A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8a/d7/daabec34.jpg","comment_is_top":false,"comment_ctime":1636464104,"is_pvip":false,"replies":[{"id":116717,"content":"类型别名加入go的初衷就是为了重构，这也是其主要场景。在第17讲中还会有提及。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636899733,"ip_address":"","comment_id":320707,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师好，类型别名具体会在哪些场景用得到呢？","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530090,"discussion_content":"类型别名加入go的初衷就是为了重构，这也是其主要场景。在第17讲中还会有提及。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636899733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339729,"user_name":"顾海","can_delete":false,"product_type":"c1","uid":1103602,"ip_address":"","ucode":"13F4E0A21975CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/f2/0601a60e.jpg","comment_is_top":false,"comment_ctime":1648344128,"is_pvip":false,"replies":[{"id":124187,"content":"你是指本专栏的对应的示例代码仓库么？专栏的普通章节 示例代码都很短，没有放到代码仓库中。对于实战小项目，仓库地址在https:&#47;&#47;github.com&#47;bigwhite&#47;publication&#47;tree&#47;master&#47;column&#47;timegeek&#47;go-first-course。\n\n我个人github是：https:&#47;&#47;github.com&#47;bigwhite\n\n不知道是否回答了你的问题:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1648424884,"ip_address":"","comment_id":339729,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"白老师，github地址是什么","like_count":3},{"had_liked":false,"id":330022,"user_name":"Vfeelit","can_delete":false,"product_type":"c1","uid":1501818,"ip_address":"","ucode":"F3FF2B069F347F","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/7a/d857723d.jpg","comment_is_top":false,"comment_ctime":1641736143,"is_pvip":false,"replies":[{"id":120490,"content":"1. 日常编码时，无符号整型使用频度相对于有符号的确小很多，并且无符号数溢出的问题很难检测。无符号唯一的优势在于其最大值表示范围比有符号整型大。\n2. 从浮点类型的表示原理上讲似乎的确没有必要。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642043328,"ip_address":"","comment_id":330022,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"有很多语言没有无符号整数  无符号整数是否必要？ 另外，没有无符号浮点数，是没有必要吗","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545710,"discussion_content":"1. 日常编码时，无符号整型使用频度相对于有符号的确小很多，并且无符号数溢出的问题很难检测。无符号唯一的优势在于其最大值表示范围比有符号整型大。\n2. 从浮点类型的表示原理上讲似乎的确没有必要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642043328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366621,"user_name":"邹志鹏.Joey ⁷⁷⁷","can_delete":false,"product_type":"c1","uid":1011311,"ip_address":"广东","ucode":"5DE4B9097D95AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/6f/44da923f.jpg","comment_is_top":false,"comment_ctime":1674003138,"is_pvip":false,"replies":[{"id":133603,"content":"“缺陷”？言过了。平台相关类型在go中有广泛应用，只是在编写64bit和32bit平台都兼容的应用时，要注意一下而已。你翻一下go的runtime和标准库代码，能看到好多。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1674097646,"ip_address":"北京","comment_id":366621,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"平台相关整型感觉是设计缺陷, 真的会有人使用么? 很容易出错吧","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545710,"discussion_content":"1. 日常编码时，无符号整型使用频度相对于有符号的确小很多，并且无符号数溢出的问题很难检测。无符号唯一的优势在于其最大值表示范围比有符号整型大。\n2. 从浮点类型的表示原理上讲似乎的确没有必要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642043328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350539,"user_name":"WoodyYip鲜森","can_delete":false,"product_type":"c1","uid":1077809,"ip_address":"","ucode":"C9C02983E0A012","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/31/06f8ada8.jpg","comment_is_top":false,"comment_ctime":1656993275,"is_pvip":false,"replies":[{"id":127548,"content":"可进一步考虑：why 二进制格式相同呢？","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657091632,"ip_address":"","comment_id":350539,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"var f1 float32 = 16777216.0\nvar f2 float32 = 16777217.0\nfmt.Println(math.Float32bits(f1))\nfmt.Println(math.Float32bits(f2))\n输出观察二进制格式，可发现二者相等","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578917,"discussion_content":"可进一步考虑：why 二进制格式相同呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657091632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331744,"user_name":"Niverkk","can_delete":false,"product_type":"c1","uid":2179875,"ip_address":"","ucode":"F9220C10107E44","user_header":"https://static001.geekbang.org/account/avatar/00/21/43/23/d98fb8f7.jpg","comment_is_top":false,"comment_ctime":1642747714,"is_pvip":false,"replies":[{"id":121607,"content":"似乎是。可能是go团队认为这这样的输出的结果更易于人类阅读:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643539729,"ip_address":"","comment_id":331744,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"文中说Go 采用 2 的补码（Two’s Complement）作为整型的比特位编码方法\n\td1 := 0b10000001\n\tfmt.Println(int8(d1)) &#47;&#47;-127\n\tfmt.Printf(&quot;%b\\n&quot;, int8(-127)) &#47;&#47; -1111111\n但是格式化字面值仍是用原码吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578917,"discussion_content":"可进一步考虑：why 二进制格式相同呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657091632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328988,"user_name":"步比天下","can_delete":false,"product_type":"c1","uid":2295138,"ip_address":"","ucode":"120CC75E183441","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoibQLsjsrjiasFUaPdjib95Jk4y3ZMD6zXyEud7bCvibrjrPia3RCib0zTD7MahQJ41icOicIWXfbq8JpnGQ/132","comment_is_top":false,"comment_ctime":1640993131,"is_pvip":false,"replies":[{"id":120308,"content":"e是阶码的bit位数，这个位数是规范定好的。见文中单精度与双精度的那张表。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641871052,"ip_address":"","comment_id":328988,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，您在介绍单精度浮点数的时候提到“偏移值的计算公式为 2^(e-1)-1，其中 e 为阶码部分的 bit 位数，这里为 8”，这个e是怎么计算得到的呢？我没有看懂啊","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549067,"discussion_content":"似乎是。可能是go团队认为这这样的输出的结果更易于人类阅读:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643539729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078931,"avatar":"https://static001.geekbang.org/account/avatar/00/10/76/93/2e9bf8ab.jpg","nickname":"arch","note":"","ucode":"A69EBFE0520B85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641164,"discussion_content":"但是实际存储的是补码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712287351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383843,"user_name":"Geek_73c432","can_delete":false,"product_type":"c1","uid":2869118,"ip_address":"广东","ucode":"3E11EB02B14DE0","user_header":"","comment_is_top":false,"comment_ctime":1699789055,"is_pvip":false,"replies":[{"id":140046,"content":"1. 很可能，如果要确认，可以查看go源码\n2. ✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1699924908,"ip_address":"北京","comment_id":383843,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，我有两个问题请教：\n\n1. 关于文章中整数溢出的例子\na := int8(127) &#47;&#47; 0b01111111\nb := int8(1)   &#47;&#47; 0b00000001\nc := a + b\nfmt.Printf(&quot;%d\\n&quot;, c) &#47;&#47; -128\n\n这里有意思的是，-128 和 128 的二进制表示都为 0b10000000，c 的值为 -128 是因为编译器想明确告诉我们溢出了么？\n\n2. 文章提到了转型，让我想到了一个问题\na := int8(-11)\nfmt.Printf(&quot;%b\\n&quot;, a) &#47;&#47; -1011\n\n这里打印出来 a 的二进制表示为其绝对值的原码\n\n要想知道 a 的二进制表示，可以显式转型\nfmt.Printf(&quot;%b\\n&quot;, uint8(a)) &#47;&#47; 11110101\n\n关于转型，我的理解是告诉编译器以另一种眼光（uint8）看待内存上的 &quot;11110101&quot; 这个数据，并不改变 a 在内存中的值，不知我是否理解正确呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545185,"discussion_content":"e是阶码的bit位数，这个位数是规范定好的。见文中单精度与双精度的那张表。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641871052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369643,"user_name":"代迪","can_delete":false,"product_type":"c1","uid":2941822,"ip_address":"广东","ucode":"DF89B0592727A2","user_header":"","comment_is_top":false,"comment_ctime":1677747587,"is_pvip":false,"replies":[{"id":134806,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1677994227,"ip_address":"辽宁","comment_id":369643,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"可以引入decimal来用于金额计算吧","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607594,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677994228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367190,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"广东","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1675000244,"is_pvip":false,"replies":[{"id":133807,"content":"有熟悉和经常使用goland的么，帮忙解答一下:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1675148665,"ip_address":"北京","comment_id":367190,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"有个小问题，我在正常代码中 判断 `int==int64`，能正常判断，但是使用goland打断点时的Alt+F8来运行这个`int==int64`却会报错，这是什么情况呀","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607594,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677994228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354191,"user_name":"c340","can_delete":false,"product_type":"c1","uid":1111176,"ip_address":"辽宁","ucode":"D64CC3DDD09A0F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/88/133bc14b.jpg","comment_is_top":false,"comment_ctime":1660177089,"is_pvip":false,"replies":[{"id":128843,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1660224888,"ip_address":"辽宁","comment_id":354191,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"Mark，类型别名等价于类型自身，自定义类型是一个全新类型","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583596,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660224888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339729,"user_name":"顾海","can_delete":false,"product_type":"c1","uid":1103602,"ip_address":"","ucode":"13F4E0A21975CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/f2/0601a60e.jpg","comment_is_top":false,"comment_ctime":1648344128,"is_pvip":false,"replies":[{"id":124187,"content":"你是指本专栏的对应的示例代码仓库么？专栏的普通章节 示例代码都很短，没有放到代码仓库中。对于实战小项目，仓库地址在https:&#47;&#47;github.com&#47;bigwhite&#47;publication&#47;tree&#47;master&#47;column&#47;timegeek&#47;go-first-course。\n\n我个人github是：https:&#47;&#47;github.com&#47;bigwhite\n\n不知道是否回答了你的问题:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1648424884,"ip_address":"","comment_id":339729,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"白老师，github地址是什么","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558627,"discussion_content":"你是指本专栏的对应的示例代码仓库么？专栏的普通章节 示例代码都很短，没有放到代码仓库中。对于实战小项目，仓库地址在https://github.com/bigwhite/publication/tree/master/column/timegeek/go-first-course。\n\n我个人github是：https://github.com/bigwhite\n\n不知道是否回答了你的问题:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648424885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330022,"user_name":"Vfeelit","can_delete":false,"product_type":"c1","uid":1501818,"ip_address":"","ucode":"F3FF2B069F347F","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/7a/d857723d.jpg","comment_is_top":false,"comment_ctime":1641736143,"is_pvip":false,"replies":[{"id":120490,"content":"1. 日常编码时，无符号整型使用频度相对于有符号的确小很多，并且无符号数溢出的问题很难检测。无符号唯一的优势在于其最大值表示范围比有符号整型大。\n2. 从浮点类型的表示原理上讲似乎的确没有必要。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642043328,"ip_address":"","comment_id":330022,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"有很多语言没有无符号整数  无符号整数是否必要？ 另外，没有无符号浮点数，是没有必要吗","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558627,"discussion_content":"你是指本专栏的对应的示例代码仓库么？专栏的普通章节 示例代码都很短，没有放到代码仓库中。对于实战小项目，仓库地址在https://github.com/bigwhite/publication/tree/master/column/timegeek/go-first-course。\n\n我个人github是：https://github.com/bigwhite\n\n不知道是否回答了你的问题:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648424885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366621,"user_name":"邹志鹏.Joey ⁷⁷⁷","can_delete":false,"product_type":"c1","uid":1011311,"ip_address":"广东","ucode":"5DE4B9097D95AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/6f/44da923f.jpg","comment_is_top":false,"comment_ctime":1674003138,"is_pvip":false,"replies":[{"id":133603,"content":"“缺陷”？言过了。平台相关类型在go中有广泛应用，只是在编写64bit和32bit平台都兼容的应用时，要注意一下而已。你翻一下go的runtime和标准库代码，能看到好多。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1674097646,"ip_address":"北京","comment_id":366621,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"平台相关整型感觉是设计缺陷, 真的会有人使用么? 很容易出错吧","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600191,"discussion_content":"“缺陷”？言过了。平台相关类型在go中有广泛应用，只是在编写64bit和32bit平台都兼容的应用时，要注意一下而已。你翻一下go的runtime和标准库代码，能看到好多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674097646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350539,"user_name":"WoodyYip鲜森","can_delete":false,"product_type":"c1","uid":1077809,"ip_address":"","ucode":"C9C02983E0A012","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/31/06f8ada8.jpg","comment_is_top":false,"comment_ctime":1656993275,"is_pvip":false,"replies":[{"id":127548,"content":"可进一步考虑：why 二进制格式相同呢？","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657091632,"ip_address":"","comment_id":350539,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"var f1 float32 = 16777216.0\nvar f2 float32 = 16777217.0\nfmt.Println(math.Float32bits(f1))\nfmt.Println(math.Float32bits(f2))\n输出观察二进制格式，可发现二者相等","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600191,"discussion_content":"“缺陷”？言过了。平台相关类型在go中有广泛应用，只是在编写64bit和32bit平台都兼容的应用时，要注意一下而已。你翻一下go的runtime和标准库代码，能看到好多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674097646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331744,"user_name":"Niverkk","can_delete":false,"product_type":"c1","uid":2179875,"ip_address":"","ucode":"F9220C10107E44","user_header":"https://static001.geekbang.org/account/avatar/00/21/43/23/d98fb8f7.jpg","comment_is_top":false,"comment_ctime":1642747714,"is_pvip":false,"replies":[{"id":121607,"content":"似乎是。可能是go团队认为这这样的输出的结果更易于人类阅读:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643539729,"ip_address":"","comment_id":331744,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"文中说Go 采用 2 的补码（Two’s Complement）作为整型的比特位编码方法\n\td1 := 0b10000001\n\tfmt.Println(int8(d1)) &#47;&#47;-127\n\tfmt.Printf(&quot;%b\\n&quot;, int8(-127)) &#47;&#47; -1111111\n但是格式化字面值仍是用原码吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549067,"discussion_content":"似乎是。可能是go团队认为这这样的输出的结果更易于人类阅读:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643539729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078931,"avatar":"https://static001.geekbang.org/account/avatar/00/10/76/93/2e9bf8ab.jpg","nickname":"arch","note":"","ucode":"A69EBFE0520B85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641164,"discussion_content":"但是实际存储的是补码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712287351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328988,"user_name":"步比天下","can_delete":false,"product_type":"c1","uid":2295138,"ip_address":"","ucode":"120CC75E183441","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoibQLsjsrjiasFUaPdjib95Jk4y3ZMD6zXyEud7bCvibrjrPia3RCib0zTD7MahQJ41icOicIWXfbq8JpnGQ/132","comment_is_top":false,"comment_ctime":1640993131,"is_pvip":false,"replies":[{"id":120308,"content":"e是阶码的bit位数，这个位数是规范定好的。见文中单精度与双精度的那张表。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641871052,"ip_address":"","comment_id":328988,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，您在介绍单精度浮点数的时候提到“偏移值的计算公式为 2^(e-1)-1，其中 e 为阶码部分的 bit 位数，这里为 8”，这个e是怎么计算得到的呢？我没有看懂啊","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545185,"discussion_content":"e是阶码的bit位数，这个位数是规范定好的。见文中单精度与双精度的那张表。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641871052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383843,"user_name":"Geek_73c432","can_delete":false,"product_type":"c1","uid":2869118,"ip_address":"广东","ucode":"3E11EB02B14DE0","user_header":"","comment_is_top":false,"comment_ctime":1699789055,"is_pvip":false,"replies":[{"id":140046,"content":"1. 很可能，如果要确认，可以查看go源码\n2. ✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1699924908,"ip_address":"北京","comment_id":383843,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，我有两个问题请教：\n\n1. 关于文章中整数溢出的例子\na := int8(127) &#47;&#47; 0b01111111\nb := int8(1)   &#47;&#47; 0b00000001\nc := a + b\nfmt.Printf(&quot;%d\\n&quot;, c) &#47;&#47; -128\n\n这里有意思的是，-128 和 128 的二进制表示都为 0b10000000，c 的值为 -128 是因为编译器想明确告诉我们溢出了么？\n\n2. 文章提到了转型，让我想到了一个问题\na := int8(-11)\nfmt.Printf(&quot;%b\\n&quot;, a) &#47;&#47; -1011\n\n这里打印出来 a 的二进制表示为其绝对值的原码\n\n要想知道 a 的二进制表示，可以显式转型\nfmt.Printf(&quot;%b\\n&quot;, uint8(a)) &#47;&#47; 11110101\n\n关于转型，我的理解是告诉编译器以另一种眼光（uint8）看待内存上的 &quot;11110101&quot; 这个数据，并不改变 a 在内存中的值，不知我是否理解正确呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631717,"discussion_content":"1. 很可能，如果要确认，可以查看go源码\n2. ✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699924908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2869118,"avatar":"","nickname":"Geek_73c432","note":"","ucode":"3E11EB02B14DE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631784,"discussion_content":"其实例子的完整表述应该是：\nb := uint8(a)\nfmt.Printf（&#39;&#39;%b\\n&#39;&#39;, b)\n\n结合老师的回答，这是官网关于转型的描述\n（https://go.dev/ref/spec#Conversions），以供参考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699955025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2869118,"avatar":"","nickname":"Geek_73c432","note":"","ucode":"3E11EB02B14DE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631701,"discussion_content":"补充问题 2\na := int32(16777216)\nb := float32(a)\n\n这里声明了一个类型为 float32 的变量 b\nb 的原码：0000_0001_0000_0000_0000_0000_0000_0000a 的原码：0_1001_0111_0000_0000_0000_0000_0000_000\n\n这里就是把 int32 转型为 float32，跟我前面说的矛盾了……\n\n老师求解惑，我对这个点没有理解\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699885592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369643,"user_name":"代迪","can_delete":false,"product_type":"c1","uid":2941822,"ip_address":"广东","ucode":"DF89B0592727A2","user_header":"","comment_is_top":false,"comment_ctime":1677747587,"is_pvip":false,"replies":[{"id":134806,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1677994227,"ip_address":"辽宁","comment_id":369643,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"可以引入decimal来用于金额计算吧","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631717,"discussion_content":"1. 很可能，如果要确认，可以查看go源码\n2. ✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699924908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2869118,"avatar":"","nickname":"Geek_73c432","note":"","ucode":"3E11EB02B14DE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631784,"discussion_content":"其实例子的完整表述应该是：\nb := uint8(a)\nfmt.Printf（&#39;&#39;%b\\n&#39;&#39;, b)\n\n结合老师的回答，这是官网关于转型的描述\n（https://go.dev/ref/spec#Conversions），以供参考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699955025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2869118,"avatar":"","nickname":"Geek_73c432","note":"","ucode":"3E11EB02B14DE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631701,"discussion_content":"补充问题 2\na := int32(16777216)\nb := float32(a)\n\n这里声明了一个类型为 float32 的变量 b\nb 的原码：0000_0001_0000_0000_0000_0000_0000_0000a 的原码：0_1001_0111_0000_0000_0000_0000_0000_000\n\n这里就是把 int32 转型为 float32，跟我前面说的矛盾了……\n\n老师求解惑，我对这个点没有理解\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699885592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367190,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"广东","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1675000244,"is_pvip":false,"replies":[{"id":133807,"content":"有熟悉和经常使用goland的么，帮忙解答一下:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1675148665,"ip_address":"北京","comment_id":367190,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"有个小问题，我在正常代码中 判断 `int==int64`，能正常判断，但是使用goland打断点时的Alt+F8来运行这个`int==int64`却会报错，这是什么情况呀","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601218,"discussion_content":"有熟悉和经常使用goland的么，帮忙解答一下:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675148665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354191,"user_name":"c340","can_delete":false,"product_type":"c1","uid":1111176,"ip_address":"辽宁","ucode":"D64CC3DDD09A0F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/88/133bc14b.jpg","comment_is_top":false,"comment_ctime":1660177089,"is_pvip":false,"replies":[{"id":128843,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1660224888,"ip_address":"辽宁","comment_id":354191,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"Mark，类型别名等价于类型自身，自定义类型是一个全新类型","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601218,"discussion_content":"有熟悉和经常使用goland的么，帮忙解答一下:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675148665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390469,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715404114,"is_pvip":false,"replies":[{"id":142040,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715419004,"ip_address":"北京","comment_id":390469,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"本节讲解了原生数值类型——整数、浮点数、复数\n1. 整数分为平台无关型（指定内存字节数的int32、uint32，1、2、4、8个字节不同）和平台有关型（int），一般跨平台编写用前者更好\n2.浮点数分为float32和float64（字面值默认），没有float。一般用float64较多避免精度差异导致数值比较问题。\n3.复数运用较少，有complex64和complex128（字面值默认）\n4.自定义类型可以自定义一个新类型，也可以是别名，区别在于前者是完全新类型，后者是等价。\n5.思考题为什么两个不同字面值的float32数值相等，需要按浮点数表示法算一遍\n16777216d=0x1.0p24，阶码是24+127=151，尾数有24个0，截取前23位全部是0\n16777217d=0x1.0p24+1，阶码一样是151，尾数有23个0和1个1，截取前23位仍是0.\n所以在32位精度下两个二进制表示完全一致\n","like_count":0},{"had_liked":false,"id":385764,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"广东","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/eba78e43.jpg","comment_is_top":false,"comment_ctime":1703303575,"is_pvip":false,"replies":[{"id":140612,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1703539544,"ip_address":"英国","comment_id":385764,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"16777216二进制表示：1000000000000000000000000，后面24个0，float位数23位，因此23位之后的都显示不出差异。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644678,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715419004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383279,"user_name":"Geek_754270","can_delete":false,"product_type":"c1","uid":3735875,"ip_address":"重庆","ucode":"2297D9F5B14618","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qwqPnn095yDuc6uycMwCt7TIBibFXriaPS9BrMXic6tcNg1OlAiaR8YDeiaO5uDictZJFfnaL81rVflyeibTTR5qNibFCg/132","comment_is_top":false,"comment_ctime":1698811333,"is_pvip":false,"replies":[{"id":139712,"content":"没有影响，既然int64是架构无关的类型，go编译器就会保证其size和表示的范围。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1699092224,"ip_address":"辽宁","comment_id":383279,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师 如果int64在32位的系统上运行的话int64的最大和最小值有没有影响","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634456,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703539545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"英国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381959,"user_name":"贾维斯Echo","can_delete":false,"product_type":"c1","uid":2820504,"ip_address":"甘肃","ucode":"BB8C507E46A9E5","user_header":"https://static001.geekbang.org/account/avatar/00/2b/09/98/397c2c81.jpg","comment_is_top":false,"comment_ctime":1696335006,"is_pvip":true,"replies":[{"id":139176,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1696670531,"ip_address":"北京","comment_id":381959,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这个例子比较 tricky。\n\n主要原因是 float32 类型的精度问题。float32 最多只能精确表示 2^24 个不同的值。\n\n16777216 和 16777217 超出了 float32 能够精确表示的范围,因此它们在转换为 float32 时会丢失精度,变成了相同的值。\n\n要避免这种情况,可以使用 float64类型,它的精度是 float32 的两倍:\n\n```\nvar f1 float64 = 16777216\nvar f2 float64 = 16777217 \n\nfmt.Println(f1 == f2) &#47;&#47; false\n```\n\n或者你也可以显式地转换为 int 来比较:\n\n```\nfmt.Println(int(f1) == int(f2)) &#47;&#47; false\n```\n\n总结一下:\n\n1. float32 类型精度有限,超出一定范围会丢失精度\n2. 使用 float64 更高精度的类型或转为 int 比较可以避免精度问题\n3. 对于精度比较敏感的计算,不要使用 float32","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630945,"discussion_content":"没有影响，既然int64是架构无关的类型，go编译器就会保证其size和表示的范围。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699092225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380285,"user_name":"哲里哲里","can_delete":false,"product_type":"c1","uid":1606741,"ip_address":"上海","ucode":"E43FA22B52F3B4","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/55/34055533.jpg","comment_is_top":false,"comment_ctime":1693312052,"is_pvip":false,"replies":[{"id":138491,"content":"计算机中负数用的是补码表示。\n\n负数的补码是其绝对值取反码，再加1.\n\n以-1为例，其二进制表示形式的计算过程是：取其绝对值1，二进制为00000001，取反码为11111110。加1后为00000000。\n\n如果Printf输出00000000显然不适当。\n\n不过这是一个特例。如果是-11，那么你会看到输出-1011。似乎%b对于负数来说，Printf只是输出了其绝对值的原码，前面再加上一个负号。\n\n如果想看真实的二进制layout，可以用encoding&#47;hex的Dump函数：\n\nfunc main() {\n    var a1 int8 = -11\n    fmt.Println(hex.Dump([]byte{byte(a1)}))\n    fmt.Printf(&quot;%b\\n&quot;, a1)\n}\n\n这样输出的是：\n\n00000000  f5                                                |.|\n\n-1011","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1693370372,"ip_address":"北京","comment_id":380285,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"var a1 int8 = -1\nfmt.Printf(&quot;%b\\n&quot;, a1)\n为啥输出是-1？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629105,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696670531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341989,"user_name":"ryanxw","can_delete":false,"product_type":"c1","uid":2119325,"ip_address":"","ucode":"0B91EAC8D06EED","user_header":"https://static001.geekbang.org/account/avatar/00/20/56/9d/4b2a7d29.jpg","comment_is_top":false,"comment_ctime":1649943021,"is_pvip":false,"replies":[{"id":124983,"content":"手动抱拳:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649985634,"ip_address":"","comment_id":341989,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"不错，点赞","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563356,"discussion_content":"手动抱拳:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649985634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336369,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1646116893,"is_pvip":false,"replies":[{"id":122930,"content":"加油💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646118838,"ip_address":"","comment_id":336369,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"浮点型看得有些懵，还需要继续看下，学习思考。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563356,"discussion_content":"手动抱拳:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649985634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320928,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1636561439,"is_pvip":true,"replies":null,"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"16777216.0 = 2^24 = (1+.0) * 2^24\n因为float32的尾数只有23bit，能够表示的下一个数是 (1+2^(-23))*2^24 = 2^24+2 = 16777218.0\n而16777217.0 = 2^24 + 1 = (1+2^(-24)) * 2^24，尾数得是2^(-24)，需要24bit才能表示\n\n直观上理解的话，实数是无限的，浮点数的二进制表示是有限的，所以必然有实数是无法用浮点数表示的。在实数轴上标出浮点数的话，相邻的浮点数之间就存在空洞。而且随着指数的增加，相邻浮点数之间的空洞也会越来越大。比如对于float32来说，2^24+1是第一个落在这样的空洞上的整数。而从2^25开始，下一个能表示的数就是(1+2^(-23))*2^25 = 2^25 + 4，中间会有3个整数无法表示。\n\n同理，对于float64来说第一个无法表示的整数就是2^53+1（因为尾数只有52bit）：\n\n```go\n\tf1 := 9_007_199_254_740_992.0\n\tf2 := 9_007_199_254_740_993.0\n\tfmt.Println(f1 == f2)\n```\n\n（js程序员们表示这已经大于Number.MAX_SAFE_INTEGER了）","like_count":22,"discussions":[{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413908,"discussion_content":"通常可能会把浮点数理解为可以用来表示整数之间的小数，但浮点数的格式决定了相邻浮点数之间的间隔会随着浮点数变大而变大。以float32为例，随着指数增加到接近尾数的bit数，浮点数之间的间隔从2^(-23)，逐步上升到2^(-3)=1/8、1/4、1/2和2^0=1，继续增加的话间隔就继续扩大为2^1=2、4、8，…，这样就开始跳过一些整数了。这时就与通常用浮点数来表示小数的认知相违背了。\n\n只要程序设计语言使用的是硬件提供的浮点数类型(IEEE 754)，都会有这样的现象，跟具体的语言无关。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1636602718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3222094,"avatar":"https://static001.geekbang.org/account/avatar/00/31/2a/4e/a3f53cae.jpg","nickname":"撕影","note":"","ucode":"8DC169F8B8E653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594233,"discussion_content":"你有做老师的潜质","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1668916407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320423,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1636305481,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"很有意思，需要注意以下两者区别（两者语法很像，不注意空间混淆）：\n1）type MyInt int32\n2）type MyInt = int32\n\n1）比 2）少了一个“=”，两者含义却不同：1）是自定义了一个新类型 MyInt（底层类型是 int32），新类型与底层类型不能直接相互赋值和运算，如果需要，需要显式转换；2）是给 int32 类型定义了一个别名 MyInt（与 int32 完全等价），可以直接相互赋值和运算。","like_count":10,"discussions":[{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413908,"discussion_content":"通常可能会把浮点数理解为可以用来表示整数之间的小数，但浮点数的格式决定了相邻浮点数之间的间隔会随着浮点数变大而变大。以float32为例，随着指数增加到接近尾数的bit数，浮点数之间的间隔从2^(-23)，逐步上升到2^(-3)=1/8、1/4、1/2和2^0=1，继续增加的话间隔就继续扩大为2^1=2、4、8，…，这样就开始跳过一些整数了。这时就与通常用浮点数来表示小数的认知相违背了。\n\n只要程序设计语言使用的是硬件提供的浮点数类型(IEEE 754)，都会有这样的现象，跟具体的语言无关。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1636602718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3222094,"avatar":"https://static001.geekbang.org/account/avatar/00/31/2a/4e/a3f53cae.jpg","nickname":"撕影","note":"","ucode":"8DC169F8B8E653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594233,"discussion_content":"你有做老师的潜质","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1668916407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321442,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1636879558,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"16777216=00000001 00000000 00000000 00000000\n16777217=00000001 00000000 00000000 00000001\n尾数只能放23位，但是需要24位才能表达16777217","like_count":7,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584962,"discussion_content":"带=的是类型别名，与原类型完全一致，可以相互赋值；不带=的是新的类型，与原类型之间不能直接赋值，需要显式进行转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661248176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1669586,"avatar":"https://static001.geekbang.org/account/avatar/00/19/79/d2/a3fbad97.jpg","nickname":"chachae","note":"","ucode":"F9FB01803C0F1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576789,"discussion_content":"翻总好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655791351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412939,"discussion_content":"空间=容易，打错字😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636336572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390469,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715404114,"is_pvip":false,"replies":[{"id":142040,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715419004,"ip_address":"北京","comment_id":390469,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"本节讲解了原生数值类型——整数、浮点数、复数\n1. 整数分为平台无关型（指定内存字节数的int32、uint32，1、2、4、8个字节不同）和平台有关型（int），一般跨平台编写用前者更好\n2.浮点数分为float32和float64（字面值默认），没有float。一般用float64较多避免精度差异导致数值比较问题。\n3.复数运用较少，有complex64和complex128（字面值默认）\n4.自定义类型可以自定义一个新类型，也可以是别名，区别在于前者是完全新类型，后者是等价。\n5.思考题为什么两个不同字面值的float32数值相等，需要按浮点数表示法算一遍\n16777216d=0x1.0p24，阶码是24+127=151，尾数有24个0，截取前23位全部是0\n16777217d=0x1.0p24+1，阶码一样是151，尾数有23个0和1个1，截取前23位仍是0.\n所以在32位精度下两个二进制表示完全一致\n","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644678,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715419004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385764,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"广东","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/eba78e43.jpg","comment_is_top":false,"comment_ctime":1703303575,"is_pvip":false,"replies":[{"id":140612,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1703539544,"ip_address":"英国","comment_id":385764,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"16777216二进制表示：1000000000000000000000000，后面24个0，float位数23位，因此23位之后的都显示不出差异。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634456,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703539545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"英国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383279,"user_name":"Geek_754270","can_delete":false,"product_type":"c1","uid":3735875,"ip_address":"重庆","ucode":"2297D9F5B14618","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qwqPnn095yDuc6uycMwCt7TIBibFXriaPS9BrMXic6tcNg1OlAiaR8YDeiaO5uDictZJFfnaL81rVflyeibTTR5qNibFCg/132","comment_is_top":false,"comment_ctime":1698811333,"is_pvip":false,"replies":[{"id":139712,"content":"没有影响，既然int64是架构无关的类型，go编译器就会保证其size和表示的范围。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1699092224,"ip_address":"辽宁","comment_id":383279,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师 如果int64在32位的系统上运行的话int64的最大和最小值有没有影响","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630945,"discussion_content":"没有影响，既然int64是架构无关的类型，go编译器就会保证其size和表示的范围。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699092225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381959,"user_name":"贾维斯Echo","can_delete":false,"product_type":"c1","uid":2820504,"ip_address":"甘肃","ucode":"BB8C507E46A9E5","user_header":"https://static001.geekbang.org/account/avatar/00/2b/09/98/397c2c81.jpg","comment_is_top":false,"comment_ctime":1696335006,"is_pvip":true,"replies":[{"id":139176,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1696670531,"ip_address":"北京","comment_id":381959,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这个例子比较 tricky。\n\n主要原因是 float32 类型的精度问题。float32 最多只能精确表示 2^24 个不同的值。\n\n16777216 和 16777217 超出了 float32 能够精确表示的范围,因此它们在转换为 float32 时会丢失精度,变成了相同的值。\n\n要避免这种情况,可以使用 float64类型,它的精度是 float32 的两倍:\n\n```\nvar f1 float64 = 16777216\nvar f2 float64 = 16777217 \n\nfmt.Println(f1 == f2) &#47;&#47; false\n```\n\n或者你也可以显式地转换为 int 来比较:\n\n```\nfmt.Println(int(f1) == int(f2)) &#47;&#47; false\n```\n\n总结一下:\n\n1. float32 类型精度有限,超出一定范围会丢失精度\n2. 使用 float64 更高精度的类型或转为 int 比较可以避免精度问题\n3. 对于精度比较敏感的计算,不要使用 float32","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629105,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696670531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380285,"user_name":"哲里哲里","can_delete":false,"product_type":"c1","uid":1606741,"ip_address":"上海","ucode":"E43FA22B52F3B4","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/55/34055533.jpg","comment_is_top":false,"comment_ctime":1693312052,"is_pvip":false,"replies":[{"id":138491,"content":"计算机中负数用的是补码表示。\n\n负数的补码是其绝对值取反码，再加1.\n\n以-1为例，其二进制表示形式的计算过程是：取其绝对值1，二进制为00000001，取反码为11111110。加1后为00000000。\n\n如果Printf输出00000000显然不适当。\n\n不过这是一个特例。如果是-11，那么你会看到输出-1011。似乎%b对于负数来说，Printf只是输出了其绝对值的原码，前面再加上一个负号。\n\n如果想看真实的二进制layout，可以用encoding&#47;hex的Dump函数：\n\nfunc main() {\n    var a1 int8 = -11\n    fmt.Println(hex.Dump([]byte{byte(a1)}))\n    fmt.Printf(&quot;%b\\n&quot;, a1)\n}\n\n这样输出的是：\n\n00000000  f5                                                |.|\n\n-1011","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1693370372,"ip_address":"北京","comment_id":380285,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"var a1 int8 = -1\nfmt.Printf(&quot;%b\\n&quot;, a1)\n为啥输出是-1？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626759,"discussion_content":"计算机中负数用的是补码表示。\n\n负数的补码是其绝对值取反码，再加1.\n\n以-1为例，其二进制表示形式的计算过程是：取其绝对值1，二进制为00000001，取反码为11111110。加1后为00000000。\n\n如果Printf输出00000000显然不适当。\n\n不过这是一个特例。如果是-11，那么你会看到输出-1011。似乎%b对于负数来说，Printf只是输出了其绝对值的原码，前面再加上一个负号。\n\n如果想看真实的二进制layout，可以用encoding/hex的Dump函数：\n\nfunc main() {\n    var a1 int8 = -11\n    fmt.Println(hex.Dump([]byte{byte(a1)}))\n    fmt.Printf(&#34;%b\\n&#34;, a1)\n}\n\n这样输出的是：\n\n00000000  f5                                                |.|\n\n-1011","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693370372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341989,"user_name":"ryanxw","can_delete":false,"product_type":"c1","uid":2119325,"ip_address":"","ucode":"0B91EAC8D06EED","user_header":"https://static001.geekbang.org/account/avatar/00/20/56/9d/4b2a7d29.jpg","comment_is_top":false,"comment_ctime":1649943021,"is_pvip":false,"replies":[{"id":124983,"content":"手动抱拳:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649985634,"ip_address":"","comment_id":341989,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"不错，点赞","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626759,"discussion_content":"计算机中负数用的是补码表示。\n\n负数的补码是其绝对值取反码，再加1.\n\n以-1为例，其二进制表示形式的计算过程是：取其绝对值1，二进制为00000001，取反码为11111110。加1后为00000000。\n\n如果Printf输出00000000显然不适当。\n\n不过这是一个特例。如果是-11，那么你会看到输出-1011。似乎%b对于负数来说，Printf只是输出了其绝对值的原码，前面再加上一个负号。\n\n如果想看真实的二进制layout，可以用encoding/hex的Dump函数：\n\nfunc main() {\n    var a1 int8 = -11\n    fmt.Println(hex.Dump([]byte{byte(a1)}))\n    fmt.Printf(&#34;%b\\n&#34;, a1)\n}\n\n这样输出的是：\n\n00000000  f5                                                |.|\n\n-1011","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693370372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336369,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1646116893,"is_pvip":false,"replies":[{"id":122930,"content":"加油💪","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646118838,"ip_address":"","comment_id":336369,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"浮点型看得有些懵，还需要继续看下，学习思考。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553856,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646118838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320928,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1636561439,"is_pvip":true,"replies":null,"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"16777216.0 = 2^24 = (1+.0) * 2^24\n因为float32的尾数只有23bit，能够表示的下一个数是 (1+2^(-23))*2^24 = 2^24+2 = 16777218.0\n而16777217.0 = 2^24 + 1 = (1+2^(-24)) * 2^24，尾数得是2^(-24)，需要24bit才能表示\n\n直观上理解的话，实数是无限的，浮点数的二进制表示是有限的，所以必然有实数是无法用浮点数表示的。在实数轴上标出浮点数的话，相邻的浮点数之间就存在空洞。而且随着指数的增加，相邻浮点数之间的空洞也会越来越大。比如对于float32来说，2^24+1是第一个落在这样的空洞上的整数。而从2^25开始，下一个能表示的数就是(1+2^(-23))*2^25 = 2^25 + 4，中间会有3个整数无法表示。\n\n同理，对于float64来说第一个无法表示的整数就是2^53+1（因为尾数只有52bit）：\n\n```go\n\tf1 := 9_007_199_254_740_992.0\n\tf2 := 9_007_199_254_740_993.0\n\tfmt.Println(f1 == f2)\n```\n\n（js程序员们表示这已经大于Number.MAX_SAFE_INTEGER了）","like_count":22,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553856,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646118838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320423,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1636305481,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"很有意思，需要注意以下两者区别（两者语法很像，不注意空间混淆）：\n1）type MyInt int32\n2）type MyInt = int32\n\n1）比 2）少了一个“=”，两者含义却不同：1）是自定义了一个新类型 MyInt（底层类型是 int32），新类型与底层类型不能直接相互赋值和运算，如果需要，需要显式转换；2）是给 int32 类型定义了一个别名 MyInt（与 int32 完全等价），可以直接相互赋值和运算。","like_count":10,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584962,"discussion_content":"带=的是类型别名，与原类型完全一致，可以相互赋值；不带=的是新的类型，与原类型之间不能直接赋值，需要显式进行转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661248176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1669586,"avatar":"https://static001.geekbang.org/account/avatar/00/19/79/d2/a3fbad97.jpg","nickname":"chachae","note":"","ucode":"F9FB01803C0F1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576789,"discussion_content":"翻总好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655791351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412939,"discussion_content":"空间=容易，打错字😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636336572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321442,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1636879558,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"16777216=00000001 00000000 00000000 00000000\n16777217=00000001 00000000 00000000 00000001\n尾数只能放23位，但是需要24位才能表达16777217","like_count":7},{"had_liked":false,"id":320455,"user_name":"JabariH","can_delete":false,"product_type":"c1","uid":1983181,"ip_address":"","ucode":"F7CC3390CDB6AA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/42/cd/09b568fc.jpg","comment_is_top":false,"comment_ctime":1636339078,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"package main\n\nimport (\n    &quot;fmt&quot;\n    &quot;math&quot;\n)\n\nfunc main() {\n    &#47;&#47; 验证floate32类型精度不够导致的结果与常识不符合\n    var f1, f2 = float32(16777216.0), float32(16777217.0)\n    var f11, f22 = float64(16777216.0), float64(16777217.0)\n\n    if f1 == f2 {\n        fmt.Println(&quot;float32 judge f1 == f2&quot;)\n    }\n    if f11 != f22 {\n        fmt.Println(&quot;float64 judge f1 != f2&quot;)\n    }\n\n    f1_bits, f2_bits := math.Float32bits(f1), math.Float32bits(f2)\n    fmt.Printf(&quot;float32 f1 convert to bits: %b\\n&quot;, f1_bits)\n    fmt.Printf(&quot;float32 f2 convert to bits: %b\\n&quot;, f2_bits)\n\n    f11_bits, f22_bits := math.Float64bits(f11), math.Float64bits(f22)\n    fmt.Printf(&quot;float64 f1 convert to bits: %b\\n&quot;, f11_bits)\n    fmt.Printf(&quot;float64 f2 convert to bits: %b\\n&quot;, f22_bits)\n}\n\n\n➜  floatPrecision go run main.go\nfloat32 judge f1 == f2\nfloat64 judge f1 != f2\nfloat32 f1 convert to bits: 1001011100000000000000000000000\nfloat32 f2 convert to bits: 1001011100000000000000000000000\nfloat64 f1 convert to bits: 100000101110000000000000000000000000000000000000000000000000000\nfloat64 f2 convert to bits: 100000101110000000000000000000000010000000000000000000000000000","like_count":3},{"had_liked":false,"id":320422,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1636305362,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"float和double都存在精度差。我在c语言里做过0.999999和1比也相等","like_count":2},{"had_liked":false,"id":372711,"user_name":"℡人见人爱浩然君゜","can_delete":false,"product_type":"c1","uid":1592298,"ip_address":"北京","ucode":"D042A622533C72","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/ea/a9e7bc50.jpg","comment_is_top":false,"comment_ctime":1681460828,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"func main() {\n\tnumber := float32(16777217.0)\n\tmyBits := math.Float32bits(number)\n\tresult := math.Float32frombits(myBits) &#47;&#47;result=1.6777216e+07\n\tfmt.Println(result)\n\n}\n结果是16777216.0，这个就比较有意思","like_count":1},{"had_liked":false,"id":362805,"user_name":"撕影","can_delete":false,"product_type":"c1","uid":3222094,"ip_address":"湖南","ucode":"8DC169F8B8E653","user_header":"https://static001.geekbang.org/account/avatar/00/31/2a/4e/a3f53cae.jpg","comment_is_top":false,"comment_ctime":1668927081,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"其实就是尾数的位不够了，+1 也只是改动最后一位，终究会被舍去。所以相等","like_count":1},{"had_liked":false,"id":321842,"user_name":"轻微","can_delete":false,"product_type":"c1","uid":1259795,"ip_address":"","ucode":"FDED053A594F8C","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/13/9a7f5415.jpg","comment_is_top":false,"comment_ctime":1637062345,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"这节课，从原理上讲精度丢失问题，大大的赞。以前只知道精度丢失，不理解底层是为什么。比如常见的 js 问题 &quot;0.1+0.2 不等于 0.3&quot; ，学完这节课就明白了。","like_count":0},{"had_liked":false,"id":321225,"user_name":"Ransang","can_delete":false,"product_type":"c1","uid":1133041,"ip_address":"","ucode":"DB67566A627DF2","user_header":"https://static001.geekbang.org/account/avatar/00/11/49/f1/bd61dbb1.jpg","comment_is_top":false,"comment_ctime":1636714318,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"浮点型真的看懵了  蛤 还有这些操作？？","like_count":0},{"had_liked":false,"id":320711,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1636464699,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":5,"product_id":100093501,"comment_content":"浮点数的精度问题，也算是程序里的见怪不怪的事件了。\n不过，go整那么多int类型，着实让人选择有所顾忌啊~","like_count":0,"discussions":[{"author":{"id":1519230,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","nickname":"Noya","note":"","ucode":"52EEB72E80BAF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535071,"discussion_content":"double a, b;\nif (fabs(a - b) &lt; eps) return true;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638345214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2827964,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","nickname":"TonyGao","note":"","ucode":"75E9F13CB7C66D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413586,"discussion_content":"C语言比较double，要用EPS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636517254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320455,"user_name":"JabariH","can_delete":false,"product_type":"c1","uid":1983181,"ip_address":"","ucode":"F7CC3390CDB6AA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/42/cd/09b568fc.jpg","comment_is_top":false,"comment_ctime":1636339078,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"package main\n\nimport (\n    &quot;fmt&quot;\n    &quot;math&quot;\n)\n\nfunc main() {\n    &#47;&#47; 验证floate32类型精度不够导致的结果与常识不符合\n    var f1, f2 = float32(16777216.0), float32(16777217.0)\n    var f11, f22 = float64(16777216.0), float64(16777217.0)\n\n    if f1 == f2 {\n        fmt.Println(&quot;float32 judge f1 == f2&quot;)\n    }\n    if f11 != f22 {\n        fmt.Println(&quot;float64 judge f1 != f2&quot;)\n    }\n\n    f1_bits, f2_bits := math.Float32bits(f1), math.Float32bits(f2)\n    fmt.Printf(&quot;float32 f1 convert to bits: %b\\n&quot;, f1_bits)\n    fmt.Printf(&quot;float32 f2 convert to bits: %b\\n&quot;, f2_bits)\n\n    f11_bits, f22_bits := math.Float64bits(f11), math.Float64bits(f22)\n    fmt.Printf(&quot;float64 f1 convert to bits: %b\\n&quot;, f11_bits)\n    fmt.Printf(&quot;float64 f2 convert to bits: %b\\n&quot;, f22_bits)\n}\n\n\n➜  floatPrecision go run main.go\nfloat32 judge f1 == f2\nfloat64 judge f1 != f2\nfloat32 f1 convert to bits: 1001011100000000000000000000000\nfloat32 f2 convert to bits: 1001011100000000000000000000000\nfloat64 f1 convert to bits: 100000101110000000000000000000000000000000000000000000000000000\nfloat64 f2 convert to bits: 100000101110000000000000000000000010000000000000000000000000000","like_count":3},{"had_liked":false,"id":320422,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1636305362,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"float和double都存在精度差。我在c语言里做过0.999999和1比也相等","like_count":2,"discussions":[{"author":{"id":1519230,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","nickname":"Noya","note":"","ucode":"52EEB72E80BAF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535071,"discussion_content":"double a, b;\nif (fabs(a - b) &lt; eps) return true;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638345214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2827964,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","nickname":"TonyGao","note":"","ucode":"75E9F13CB7C66D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413586,"discussion_content":"C语言比较double，要用EPS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636517254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372711,"user_name":"℡人见人爱浩然君゜","can_delete":false,"product_type":"c1","uid":1592298,"ip_address":"北京","ucode":"D042A622533C72","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/ea/a9e7bc50.jpg","comment_is_top":false,"comment_ctime":1681460828,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"func main() {\n\tnumber := float32(16777217.0)\n\tmyBits := math.Float32bits(number)\n\tresult := math.Float32frombits(myBits) &#47;&#47;result=1.6777216e+07\n\tfmt.Println(result)\n\n}\n结果是16777216.0，这个就比较有意思","like_count":1},{"had_liked":false,"id":362805,"user_name":"撕影","can_delete":false,"product_type":"c1","uid":3222094,"ip_address":"湖南","ucode":"8DC169F8B8E653","user_header":"https://static001.geekbang.org/account/avatar/00/31/2a/4e/a3f53cae.jpg","comment_is_top":false,"comment_ctime":1668927081,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"其实就是尾数的位不够了，+1 也只是改动最后一位，终究会被舍去。所以相等","like_count":1},{"had_liked":false,"id":321842,"user_name":"轻微","can_delete":false,"product_type":"c1","uid":1259795,"ip_address":"","ucode":"FDED053A594F8C","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/13/9a7f5415.jpg","comment_is_top":false,"comment_ctime":1637062345,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"这节课，从原理上讲精度丢失问题，大大的赞。以前只知道精度丢失，不理解底层是为什么。比如常见的 js 问题 &quot;0.1+0.2 不等于 0.3&quot; ，学完这节课就明白了。","like_count":0},{"had_liked":false,"id":321225,"user_name":"Ransang","can_delete":false,"product_type":"c1","uid":1133041,"ip_address":"","ucode":"DB67566A627DF2","user_header":"https://static001.geekbang.org/account/avatar/00/11/49/f1/bd61dbb1.jpg","comment_is_top":false,"comment_ctime":1636714318,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"浮点型真的看懵了  蛤 还有这些操作？？","like_count":0},{"had_liked":false,"id":320711,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1636464699,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":5,"product_id":100093501,"comment_content":"浮点数的精度问题，也算是程序里的见怪不怪的事件了。\n不过，go整那么多int类型，着实让人选择有所顾忌啊~","like_count":0}]}