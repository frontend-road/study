{"id":116369,"title":"35 | MySQL调优之索引：索引的失效与优化","content":"<p>你好，我是刘超。</p><p>不知道你是否跟我有过同样的经历，那就是作为一个开发工程师，经常被DBA叫过去“批评”，而最常见的就是申请创建新的索引或发现慢SQL日志了。</p><p>记得之前有一次迭代一个业务模块的开发，涉及到了一个新的查询业务，需要根据商品类型、订单状态筛选出需要的订单，并以订单时间进行排序。由于sku的索引已经存在了，我在完成业务开发之后，提交了一个创建status的索引的需求，理由是SQL查询需要使用到这两个索引：</p><blockquote>\n<p>select * from order where status =1 and sku=10001 order by create_time asc</p>\n</blockquote><p>然而，DBA很快就将这个需求驳回了，并给出了重建一个sku、status以及create_time组合索引的建议，查询顺序也改成了 sku=10001 and status=1。当时我是知道为什么要重建组合索引，但却无法理解为什么要添加create_time这列进行组合。</p><p>从执行计划中，我们可以发现使用到了索引，那为什么DBA还要求将create_time这一列加入到组合索引中呢？这个问题我们在<a href=\"https://time.geekbang.org/column/article/113440\">第33讲</a>中提到过，相信你也已经知道答案了。通过故事我们可以发现索引知识在平时开发时的重要性，然而它又很容易被我们忽略，所以今天我们就来详细聊一聊索引。</p><!-- [[[read_end]]] --><h2>MySQL索引存储结构</h2><p>索引是优化数据库查询最重要的方式之一，它是在MySQL的存储引擎层中实现的，所以每一种存储引擎对应的索引不一定相同。我们可以通过下面这张表格，看看不同的存储引擎分别支持哪种索引类型：</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/1b/f6dc2c083b30377628b3699322f6611b.jpg?wh=1334*342\" alt=\"\"></p><p>B+Tree索引和Hash索引是我们比较常用的两个索引数据存储结构，B+Tree索引是通过B+树实现的，是有序排列存储，所以在排序和范围查找方面都比较有优势。如果你对B+Tree索引不够了解，可以通过该<a href=\"https://zhuanlan.zhihu.com/p/27700617\">链接</a>了解下它的数据结构原理。</p><p>Hash索引相对简单些，只有Memory存储引擎支持Hash索引。Hash索引适合key-value键值对查询，无论表数据多大，查询数据的复杂度都是O(1)，且直接通过Hash索引查询的性能比其它索引都要优越。</p><p>在创建表时，无论使用InnoDB还是MyISAM存储引擎，默认都会创建一个主键索引，而创建的主键索引默认使用的是B+Tree索引。不过虽然这两个存储引擎都支持B+Tree索引，但它们在具体的数据存储结构方面却有所不同。</p><p>InnoDB默认创建的主键索引是聚簇索引（Clustered Index），其它索引都属于辅助索引（Secondary Index），也被称为二级索引或非聚簇索引。接下来我们通过一个简单的例子，说明下这两种索引在存储数据中的具体实现。</p><p>首先创建一张商品表，如下：</p><pre><code>CREATE TABLE `merchandise`  (\n  `id` int(11) NOT NULL,\n  `serial_no` varchar(20)  DEFAULT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `unit_price` decimal(10, 2) DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\n</code></pre><p>然后新增了以下几行数据，如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/52/c8/524d7510e8c3ec264f274798d72b99c8.jpg?wh=1166*406\" alt=\"\"></p><p>如果我们使用的是MyISAM存储引擎，由于MyISAM使用的是辅助索引，索引中每一个叶子节点仅仅记录的是每行数据的物理地址，即行指针，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/43/eacb96b876a4db6f3f020bd1efd39243.jpg?wh=2352*962\" alt=\"\"></p><p>如果我们使用的是InnoDB存储引擎，由于InnoDB使用的是聚簇索引，聚簇索引中的叶子节点则记录了主键值、事务id、用于事务和MVCC的回流指针以及所有的剩余列，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/42/9a98b5abb7ff82530b02c6aeb15b6242.jpg?wh=2326*1012\" alt=\"\"></p><p>基于上面的图示，如果我们需要根据商品编码查询商品，我们就需要将商品编码serial_no列作为一个索引列。此时创建的索引是一个辅助索引，与MyISAM存储引擎的主键索引的存储方式是一致的，但叶子节点存储的就不是行指针了，而是主键值，并以此来作为指向行的指针。这样的好处就是当行发生移动或者数据分裂时，不用再维护索引的变更。</p><p>如果我们使用主键索引查询商品，则会按照B+树的索引找到对应的叶子节点，直接获取到行数据：</p><blockquote>\n<p>select * from merchandise where id=7</p>\n</blockquote><p>如果我们使用商品编码查询商品，即使用辅助索引进行查询，则会先检索辅助索引中的B+树的serial_no，找到对应的叶子节点，获取主键值，然后再通过聚簇索引中的B+树检索到对应的叶子节点，然后获取整行数据。这个过程叫做回表。</p><p>在了解了索引的实现原理后，我们再来详细了解下平时建立和使用索引时，都有哪些调优方法呢？</p><h2>1.覆盖索引优化查询</h2><p>假设我们只需要查询商品的名称、价格信息，我们有什么方式来避免回表呢？我们可以建立一个组合索引，即商品编码、名称、价格作为一个组合索引。如果索引中存在这些数据，查询将不会再次检索主键索引，从而避免回表。</p><p>从辅助索引中查询得到记录，而不需要通过聚簇索引查询获得，MySQL中将其称为覆盖索引。使用覆盖索引的好处很明显，我们不需要查询出包含整行记录的所有信息，因此可以减少大量的I/O操作。</p><p>通常在InnoDB中，除了查询部分字段可以使用覆盖索引来优化查询性能之外，统计数量也会用到。例如，在<a href=\"https://time.geekbang.org/column/article/113440\">第32讲</a>我们讲 SELECT  COUNT(*)时，如果不存在辅助索引，此时会通过查询聚簇索引来统计行数，如果此时正好存在一个辅助索引，则会通过查询辅助索引来统计行数，减少I/O操作。</p><p>通过EXPLAIN，我们可以看到 InnoDB  存储引擎使用了idx_order索引列来统计行数，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c6/6f/c689b2fd284c19fd2049b1f73091226f.jpg?wh=2588*370\" alt=\"\"></p><h2>2.自增字段作主键优化查询</h2><p>上面我们讲了 InnoDB  创建主键索引默认为聚簇索引，数据被存放在了B+树的叶子节点上。也就是说，同一个叶子节点内的各个数据是按主键顺序存放的，因此，每当有一条新的数据插入时，数据库会根据主键将其插入到对应的叶子节点中。</p><p>如果我们使用自增主键，那么每次插入的新数据就会按顺序添加到当前索引节点的位置，不需要移动已有的数据，当页面写满，就会自动开辟一个新页面。因为不需要重新移动数据，因此这种插入数据的方法效率非常高。</p><p>如果我们使用非自增主键，由于每次插入主键的索引值都是随机的，因此每次插入新的数据时，就可能会插入到现有数据页中间的某个位置，这将不得不移动其它数据来满足新数据的插入，甚至需要从一个页面复制数据到另外一个页面，我们通常将这种情况称为页分裂。页分裂还有可能会造成大量的内存碎片，导致索引结构不紧凑，从而影响查询效率。</p><p>因此，在使用InnoDB存储引擎时，如果没有特别的业务需求，建议使用自增字段作为主键。</p><h2>3.前缀索引优化</h2><p>前缀索引顾名思义就是使用某个字段中字符串的前几个字符建立索引，那我们为什么需要使用前缀来建立索引呢？</p><p>我们知道，索引文件是存储在磁盘中的，而磁盘中最小分配单元是页，通常一个页的默认大小为16KB，假设我们建立的索引的每个索引值大小为2KB，则在一个页中，我们能记录8个索引值，假设我们有8000行记录，则需要1000个页来存储索引。如果我们使用该索引查询数据，可能需要遍历大量页，这显然会降低查询效率。</p><p>减小索引字段大小，可以增加一个页中存储的索引项，有效提高索引的查询速度。在一些大字符串的字段作为索引时，使用前缀索引可以帮助我们减小索引项的大小。</p><p>不过，前缀索引是有一定的局限性的，例如order by就无法使用前缀索引，无法把前缀索引用作覆盖索引。</p><h2>4.防止索引失效</h2><p>当我们习惯建立索引来实现查询SQL的性能优化后，是不是就万事大吉了呢？当然不是，有时候我们看似使用到了索引，但实际上并没有被优化器选择使用。</p><p>对于Hash索引实现的列，如果使用到范围查询，那么该索引将无法被优化器使用到。也就是说Memory引擎实现的Hash索引只有在“=”的查询条件下，索引才会生效。我们将order表设置为Memory存储引擎，分析查询条件为id&lt;10的SQL，可以发现没有使用到索引。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/d0/8eaac54829f3c99337e481d833a93dd0.jpg?wh=1986*310\" alt=\"\"></p><p>如果是以%开头的LIKE查询将无法利用节点查询数据：</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/bb/0b20dbd8274be269779989b3df546dbb.jpg?wh=1932*376\" alt=\"\"></p><p>当我们在使用复合索引时，需要使用索引中的最左边的列进行查询，才能使用到复合索引。例如我们在order表中建立一个复合索引idx_user_order_status(<code>order_no</code>, <code>status</code>, <code>user_id</code>)，如果我们使用order_no、order_no+status、order_no+status+user_id以及order_no+user_id组合查询，则能利用到索引；而如果我们用status、status+user_id查询，将无法使用到索引，这也是我们经常听过的最左匹配原则。</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/f0/4cebb097ea9a1d2db2c3cfc98bf611f0.jpg?wh=2122*302\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/18/65/18b7427c6d7e65821284fe90ec461565.jpg?wh=2202*302\" alt=\"\"></p><p>如果查询条件中使用or，且or的前后条件中有一个列没有索引，那么涉及的索引都不会被使用到。</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/35/2b8f194d32bf2387264d50258c1f2235.jpg?wh=2236*308\" alt=\"\"></p><p>所以，你懂了吗？作为一名开发人员，如果没有熟悉MySQL，特别是MySQL索引的基础知识，很多时候都将被DBA批评到怀疑人生。</p><h2>总结</h2><p>在大多数情况下，我们习惯使用默认的 InnoDB 作为表存储引擎。在使用InnoDB作为存储引擎时，创建的索引默认为B+树数据结构，如果是主键索引，则属于聚簇索引，非主键索引则属于辅助索引。基于主键查询可以直接获取到行信息，而基于辅助索引作为查询条件，则需要进行回表，然后再通过主键索引获取到数据。</p><p>如果只是查询一列或少部分列的信息，我们可以基于覆盖索引来避免回表。覆盖索引只需要读取索引，且由于索引是顺序存储，对于范围或排序查询来说，可以极大地极少磁盘I/O操作。</p><p>除了了解索引的具体实现和一些特性，我们还需要注意索引失效的情况发生。如果觉得这些规则太多，难以记住，我们就要养成经常检查SQL执行计划的习惯。</p><h2>思考题</h2><p>假设我们有一个订单表order_detail，其中有主键id、主订单order_id、商品sku等字段，其中该表有主键索引、主订单id索引。</p><p>现在有一个查询订单详情的SQL如下，查询订单号范围在5000~10000，请问该查询选择的索引是什么？有什么方式可以强制使用我们期望的索引呢？</p><pre><code>select * from order_detail where order_id between 5000 and 10000；\n</code></pre><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/67/bbe343640d6b708832c4133ec53ed967.jpg?wh=1110*659\" alt=\"unpreview\"></p>","neighbors":{"left":{"article_title":"34 | MySQL调优之事务：高并发场景下的数据库事务调优","id":114194},"right":{"article_title":"36 | 记一次线上SQL死锁事故：如何避免死锁？","id":117247}},"comments":[{"had_liked":false,"id":122530,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1565418198,"is_pvip":false,"replies":[{"id":"45095","content":"因为order_id索引不能覆盖我们要查询的信息，所以在对order_id查询之后还需要一次回表来查找到整行数据，虽然order_id索引是顺序存放的，但是相对于主键id存放的数据顺序是不一致的，所以存在每次回表都是随机获取整行数据，如果在获取大量数据时，通过这种方式获取数据性能肯定是不理想的。<br><br>所以mysql一般判断在查询超过整个表20%的数据时，就会考虑使用聚族索引来查找数据，这种方式顺序读取数据的可能性要大于使用辅助索引的随机读。<br><br>在查询少量数据的情况下，使用辅助索引性能更加，而查询大量数据时，就未必了。<br><br>如果我们发现在查询一定量数据使用辅助索引要比主键索引快，而数据库又没有按照我们期望的去使用辅助索引，则我们可以通过子查询或force index来强制使用辅助索引。<br>","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565574445,"ip_address":"","comment_id":122530,"utype":1}],"discussion_count":5,"race_medal":0,"score":"297918161622","product_id":100028001,"comment_content":"回答老师问题：<br>按照老师的操作了一遍，实验小部分区间是会走order_id索引的，但是查询范围继续增大 ，反而不走索引而是全表扫描，大概我估摸着的是小于全表5分之一区间能够走索引，超过5分之一会全表扫描，可以使用force index（索引名）强制使用该索引，这就是有些sql表开始跑的挺快的，后面越来越慢的原因吧。。但不清楚mysql优化器为啥要这样选择，希望老师解惑？","like_count":70,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462294,"discussion_content":"因为order_id索引不能覆盖我们要查询的信息，所以在对order_id查询之后还需要一次回表来查找到整行数据，虽然order_id索引是顺序存放的，但是相对于主键id存放的数据顺序是不一致的，所以存在每次回表都是随机获取整行数据，如果在获取大量数据时，通过这种方式获取数据性能肯定是不理想的。\n\n所以mysql一般判断在查询超过整个表20%的数据时，就会考虑使用聚族索引来查找数据，这种方式顺序读取数据的可能性要大于使用辅助索引的随机读。\n\n在查询少量数据的情况下，使用辅助索引性能更加，而查询大量数据时，就未必了。\n\n如果我们发现在查询一定量数据使用辅助索引要比主键索引快，而数据库又没有按照我们期望的去使用辅助索引，则我们可以通过子查询或force index来强制使用辅助索引。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565574445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1928441,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cfNtHoAbHvia1O0jIopiafYbnppEPiawgicKa8vdI2FxMMEdqORB4VLzkYTuGJGA7HibustnU0hDTOD7YSDAWuxhmrg/132","nickname":"Geek_299a34","note":"","ucode":"79AECE06F08E87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308090,"discussion_content":"优化器根据成本考虑走不走索引啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600844260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451141,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIu1n1DhUGGKdbP3ib8aoBDIbzaDXM9YzyowcJDTnCOLNJc3CP6dCYVmibHe7LMK37WXSicsFMicLuLBw/132","nickname":"Geek__ad4af7fe01f4","note":"","ucode":"C911D3E120964E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6375,"discussion_content":"请问老师，既然使用辅助索引效率低，mysql默认超出20%又使用主键索引优化，而优化的效果又变低，为何还要强制使用辅助索引？\n\n这里强制使用辅助索引的优化 和下面您的描述不是冲突吗？\n\n因为order_id索引不能覆盖我们要查询的信息，所以在对order_id查询之后还需要一次回表来查找到整行数据，虽然order_id索引是顺序存放的，但是相对于主键id存放的数据顺序是不一致的，所以存在每次回表都是随机获取整行数据，如果在获取大量数据时，通过这种方式获取数据性能肯定是不理想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566873294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1451141,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIu1n1DhUGGKdbP3ib8aoBDIbzaDXM9YzyowcJDTnCOLNJc3CP6dCYVmibHe7LMK37WXSicsFMicLuLBw/132","nickname":"Geek__ad4af7fe01f4","note":"","ucode":"C911D3E120964E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306483,"discussion_content":"优化器的估算结果是这样，所以才不走order_id索引，其实order_id索引效果好得多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600300256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6375,"ip_address":""},"score":306483,"extra":""}]},{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4593,"discussion_content":"老师666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565583149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122440,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":1259814,"ip_address":"","ucode":"1608E84D2F0655","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/26/61e46afe.jpg","comment_is_top":false,"comment_ctime":1565369070,"is_pvip":false,"replies":[{"id":"45096","content":"对的，点赞补充","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565574483,"ip_address":"","comment_id":122440,"utype":1}],"discussion_count":1,"race_medal":0,"score":"91759682286","product_id":100028001,"comment_content":"对索引进行函数操作或者表达式计算也会导致索引的失效","like_count":22,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462253,"discussion_content":"对的，点赞补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565574483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122739,"user_name":"Loubobooo","can_delete":false,"product_type":"c1","uid":1108306,"ip_address":"","ucode":"7B2543A80EBDEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/52/aa3be800.jpg","comment_is_top":false,"comment_ctime":1565510013,"is_pvip":false,"replies":[{"id":"45089","content":"思路是对的，这种方式可以解决。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565573702,"ip_address":"","comment_id":122739,"utype":1}],"discussion_count":3,"race_medal":0,"score":"74579954045","product_id":100028001,"comment_content":"我的想法是，可以利用子查询去减少回表操作，既然有主键自增id，便可以利用聚簇索引的优势来强制走索引。代码方法如下：select * from order_detail where id in (select id from order_detail where order_id between 5000 and 10000)","like_count":17,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462382,"discussion_content":"思路是对的，这种方式可以解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565573702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2922769,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/99/11/12ef5f6d.jpg","nickname":"OUu","note":"","ucode":"06E84F52B1619E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565776,"discussion_content":"in后边的范围不能太大，不定会走索引。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650542015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2742520,"avatar":"https://static001.geekbang.org/account/avatar/00/29/d8/f8/a775cde7.jpg","nickname":"太阳与冰","note":"","ucode":"C2B97279BD66C7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556255,"discussion_content":"感觉这种方式不就是回表的手动版么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647265068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138329,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1570166166,"is_pvip":false,"replies":[{"id":"53306","content":"区别在于聚簇索引存储了其他数据，而辅助索引只保存了索引列和主键，所以通过查询辅助索引统计行检索的数据量会更少，I&#47;O操作会更少","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1570345271,"ip_address":"","comment_id":138329,"utype":1}],"discussion_count":2,"race_medal":0,"score":"57404741014","product_id":100028001,"comment_content":"”如果不存在辅助索引，此时会通过查询聚簇索引来统计行数，如果此时正好存在一个辅助索引，则会通过查询辅助索引来统计行数，减少 I&#47;O 操作。“<br>这有什么区别吗？都是通过索引统计行数","like_count":13,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469488,"discussion_content":"区别在于聚簇索引存储了其他数据，而辅助索引只保存了索引列和主键，所以通过查询辅助索引统计行检索的数据量会更少，I/O操作会更少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570345271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306482,"discussion_content":"这个要看总数据量了，数据量大了以后才是这个效果；其实想想数据量小的时候也不会有性能问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600300187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122603,"user_name":"张学磊","can_delete":false,"product_type":"c1","uid":1250029,"ip_address":"","ucode":"F545F384A6F1E1","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","comment_is_top":false,"comment_ctime":1565432778,"is_pvip":false,"replies":[{"id":"45090","content":"分析到位，答案正确。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565573823,"ip_address":"","comment_id":122603,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57400007626","product_id":100028001,"comment_content":"由于是select *操作，所以每条记录都需进行回表，当server层分析器发现between的范围太大时，使用辅助索引存在大量回表操作，所以觉得得不偿失，故而直接使用主键索引。如果想使用我们期望的索引，需要给server层分析器一个hint，force index(idx_order_id)","like_count":13,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462327,"discussion_content":"分析到位，答案正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565573823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133601,"user_name":"man1s","can_delete":false,"product_type":"c1","uid":1466953,"ip_address":"","ucode":"FFDB6B52F65A1B","user_header":"https://static001.geekbang.org/account/avatar/00/16/62/49/6332c99b.jpg","comment_is_top":false,"comment_ctime":1568619093,"is_pvip":false,"replies":[{"id":"51393","content":"👍","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568721237,"ip_address":"","comment_id":133601,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27338422869","product_id":100028001,"comment_content":"走主键索引，优化器认为5000数据+回表5000次性能消耗要大于全表扫描<br>force index ","like_count":6,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467444,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568721237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186444,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1583845981,"is_pvip":false,"replies":[{"id":"72176","content":"innodb不能手动设置哈希索引，但有自适应哈希索引的功能，也就是如果发现树的查询路径太长时，会记录到一个哈希缓存中，这个时候会用到哈希索引。<br><br>哈希索引在关键字查询时非常快，但也有很多缺点，例如无法进行范围查询、无法排序等。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1584013835,"ip_address":"","comment_id":186444,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23058682461","product_id":100028001,"comment_content":"为什么innodb存储引擎没有支持哈希索引？","like_count":6,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486756,"discussion_content":"innodb不能手动设置哈希索引，但有自适应哈希索引的功能，也就是如果发现树的查询路径太长时，会记录到一个哈希缓存中，这个时候会用到哈希索引。\n\n哈希索引在关键字查询时非常快，但也有很多缺点，例如无法进行范围查询、无法排序等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584013835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159129,"user_name":"某、 ","can_delete":false,"product_type":"c1","uid":1221247,"ip_address":"","ucode":"44360946CCAC8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a2/7f/cf86eef9.jpg","comment_is_top":false,"comment_ctime":1575544543,"is_pvip":false,"replies":[{"id":"61471","content":"身份证前几位一般在相同城市或省都是一样的，所以作为前缀索引区分度不大，如果倒序存储，以原来后六位作为首位区分度更大，alert table xxx add index index_idno(idno(6));","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1576153634,"ip_address":"","comment_id":159129,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23050381023","product_id":100028001,"comment_content":"使用某个字段中字符串的前几个字符建立索引？这句不是很明白，能否细讲一下，能否以身份证这个字段作个栗子？<br>","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476961,"discussion_content":"身份证前几位一般在相同城市或省都是一样的，所以作为前缀索引区分度不大，如果倒序存储，以原来后六位作为首位区分度更大，alert table xxx add index index_idno(idno(6));","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576153634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306484,"discussion_content":"也可以倒着存 做索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600300375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123691,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1027892,"ip_address":"","ucode":"F0605C817C36D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/34/c7081824.jpg","comment_is_top":false,"comment_ctime":1565743963,"is_pvip":false,"replies":[{"id":"51151","content":"回表就相当于两次索引树扫描操作了，而主键查询只有一次。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568541878,"ip_address":"","comment_id":123691,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23040580443","product_id":100028001,"comment_content":"想问下老师为什么回表查询的速度会慢于直接用主键查询，因为回表也是使用主键ID去查询的，就算查询的数据量大，用不用子查询都是使用主键ID去回表或是查询，速度应该一样吧","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462772,"discussion_content":"回表就相当于两次索引树扫描操作了，而主键查询只有一次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568541878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101929,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","nickname":"张德","note":"","ucode":"31FE63E8725EFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6961,"discussion_content":"这个是因为多访问了一次磁盘  而且每次回表都是磁盘的随机IO","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567222941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1926759,"avatar":"","nickname":"赵玉闯","note":"","ucode":"82E85AC08206EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1101929,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","nickname":"张德","note":"","ucode":"31FE63E8725EFC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284560,"discussion_content":"我认为不是多了一次回表啊，是多了很多次啊，每拿到一个order_id都需要根据其存储的主键回表查询整行数据。而子查询是先把所有的主键都拿到再一起回表查询，只需要一次回表，我说的对吗？？？？你是怎么想的只是多了一次而已呢？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592556245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6961,"ip_address":""},"score":284560,"extra":""}]}]},{"had_liked":false,"id":172190,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1579105693,"is_pvip":false,"replies":[{"id":"67214","content":"如果其中有一个没有索引，这个没有索引的列就会涉及到全表扫描","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1579523092,"ip_address":"","comment_id":172190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18758974877","product_id":100028001,"comment_content":"如果查询条件中使用 or，且 or 的前后条件中有一个列没有索引，那么涉及的索引都不会被使用到。想知道为什么涉及到的索引都不会被用到，原理是什么呢？","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481657,"discussion_content":"如果其中有一个没有索引，这个没有索引的列就会涉及到全表扫描","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579523092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186361,"user_name":"张振宇","can_delete":false,"product_type":"c1","uid":1130691,"ip_address":"","ucode":"7A6FD7294E65FF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/c3/e545ba80.jpg","comment_is_top":false,"comment_ctime":1583829963,"is_pvip":false,"replies":[{"id":"72177","content":"为了避免文件排序的发生。因为查询时我们只能用到status索引，如果要对create_time进行排序，则需要使用文件排序filesort。<br><br>filesort是通过相应的排序算法将取得的数据在内存中进行排序，如果内存不够则会使用磁盘文件作为辅助。虽然在一些场景中，filesort并不是特别消耗性能，但是我们可以避免filesort就尽量避免。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1584013985,"ip_address":"","comment_id":186361,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14468731851","product_id":100028001,"comment_content":"老师，没明白开头那段，为什么要添加 create_time 这列进行组合索引啊","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486727,"discussion_content":"为了避免文件排序的发生。因为查询时我们只能用到status索引，如果要对create_time进行排序，则需要使用文件排序filesort。\n\nfilesort是通过相应的排序算法将取得的数据在内存中进行排序，如果内存不够则会使用磁盘文件作为辅助。虽然在一些场景中，filesort并不是特别消耗性能，但是我们可以避免filesort就尽量避免。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584013985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130691,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/c3/e545ba80.jpg","nickname":"张振宇","note":"","ucode":"7A6FD7294E65FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203224,"discussion_content":"谢谢老师这么专业的答复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584014177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171810,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1579016996,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10168951588","product_id":100028001,"comment_content":"order 表中建立一个复合索引 idx_user_order_status(order_no, status, user_id)，使用 order_no+user_id 组合查询，只有order_no会用到索引，user_id并不会","like_count":2,"discussions":[{"author":{"id":1926759,"avatar":"","nickname":"赵玉闯","note":"","ucode":"82E85AC08206EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284564,"discussion_content":"我也觉得你说的对呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592557006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168158,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1618607,"ip_address":"","ucode":"8179D167D99CB9","user_header":"https://static001.geekbang.org/account/avatar/00/18/b2/af/81303f5a.jpg","comment_is_top":false,"comment_ctime":1578022295,"is_pvip":false,"replies":[{"id":"65925","content":"赞","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1578483650,"ip_address":"","comment_id":168158,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10167956887","product_id":100028001,"comment_content":"索引失效一句话总结，字段a有索引，那么只能匹配字段a，除此之外均会导致索引失效，比如所有对字段a的函数计算（如reverse、crc32），类型转换（如bigint转vachar，也就是SQL中有没有单引号），前置模糊搜索（like &quot;%张三&quot;，因为后置模糊匹配可以使用前缀索引），where子句的多条件组合不当（需要根据情况的分析是否会用索引）","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480155,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578483650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128349,"user_name":"Geek__ad4af7fe01f4","can_delete":false,"product_type":"c1","uid":1451141,"ip_address":"","ucode":"C911D3E120964E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIu1n1DhUGGKdbP3ib8aoBDIbzaDXM9YzyowcJDTnCOLNJc3CP6dCYVmibHe7LMK37WXSicsFMicLuLBw/132","comment_is_top":false,"comment_ctime":1566873343,"is_pvip":false,"replies":[{"id":"47775","content":"这个跟具体场景有关系，在数据量非常大的情况下，可能使用辅助索引会效率更高些。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566956966,"ip_address":"","comment_id":128349,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10156807935","product_id":100028001,"comment_content":"请问老师，既然使用辅助索引效率低，mysql默认超出20%又使用主键索引优化，而优化的效果又变低，为何还要强制使用辅助索引？<br><br>这里强制使用辅助索引的优化 和下面您的描述不是冲突吗？<br><br>因为order_id索引不能覆盖我们要查询的信息，所以在对order_id查询之后还需要一次回表来查找到整行数据，虽然order_id索引是顺序存放的，但是相对于主键id存放的数据顺序是不一致的，所以存在每次回表都是随机获取整行数据，如果在获取大量数据时，通过这种方式获取数据性能肯定是不理想","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464911,"discussion_content":"这个跟具体场景有关系，在数据量非常大的情况下，可能使用辅助索引会效率更高些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566956966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171824,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1579019908,"is_pvip":false,"replies":[{"id":"67218","content":"这里指的是无条件搜索，如果有条件搜索，则会根据搜索条件的索引来统计行数。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1579523405,"ip_address":"","comment_id":171824,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873987204","product_id":100028001,"comment_content":"SELECT  COUNT(*) 时，如果不存在辅助索引，此时会通过查询聚簇索引来统计行数，如果此时正好存在一个辅助索引，则会通过查询辅助索引来统计行数，减少 I&#47;O 操作。 这里说的正好存在一个辅助索引，指的是where条件中正好存在辅助索引吗？","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481524,"discussion_content":"这里指的是无条件搜索，如果有条件搜索，则会根据搜索条件的索引来统计行数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579523405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147936,"user_name":"传传传传传传奇","can_delete":false,"product_type":"c1","uid":1515160,"ip_address":"","ucode":"4078C07257ADA0","user_header":"https://static001.geekbang.org/account/avatar/00/17/1e/98/51a2bb5f.jpg","comment_is_top":false,"comment_ctime":1572920246,"is_pvip":false,"replies":[{"id":"74195","content":"覆盖索引中的叶子节点是主键索引，但是非叶子节点中包含了覆盖索引的值，所以不需要进行回表操作","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1585139894,"ip_address":"","comment_id":147936,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867887542","product_id":100028001,"comment_content":"来晚了<br>有一事不明，通过创建覆盖索引（如文中将商品编码、名称、价格作为一个组合索引）在某些情况下可以避免回表。但是非主键索引存储的却是主键的值，并以此来作为指向行的指针。在查询商品编码的时候，怎么理解避免回表吗？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473344,"discussion_content":"覆盖索引中的叶子节点是主键索引，但是非叶子节点中包含了覆盖索引的值，所以不需要进行回表操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585139894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131742,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1567871227,"is_pvip":false,"replies":[{"id":"50649","content":"如果与id索引的排序是一致的，会走索引，可以动手实践一下","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568124815,"ip_address":"","comment_id":131742,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5862838523","product_id":100028001,"comment_content":" 老师，你这个表里的order id和id不是一起递增的么？如果orderid也是递增的，那情况又是怎呢","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466606,"discussion_content":"如果与id索引的排序是一致的，会走索引，可以动手实践一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568124815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2742520,"avatar":"https://static001.geekbang.org/account/avatar/00/29/d8/f8/a775cde7.jpg","nickname":"太阳与冰","note":"","ucode":"C2B97279BD66C7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556256,"discussion_content":"如果是一起递增的就可以用上次那种limit的查询优化方式吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647265156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123493,"user_name":"我行我素","can_delete":false,"product_type":"c1","uid":1224678,"ip_address":"","ucode":"4C69542FAB0671","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/e6/9c77acff.jpg","comment_is_top":false,"comment_ctime":1565686292,"is_pvip":false,"replies":[{"id":"45306","content":"官网给出的是不支持自创建hash数据结构的索引，但是它是自适应的，也就是我们不能人为的干预使用hash索引。具体的可以参考官网：https:&#47;&#47;dev.mysql.com&#47;doc&#47;refman&#47;8.0&#47;en&#47;create-index.html","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565694519,"ip_address":"","comment_id":123493,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860653588","product_id":100028001,"comment_content":"老师，想请问下InnoDB引擎下使用HASH索引也可以啊，但是文中的图InnoDB索引Hash是no","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462696,"discussion_content":"官网给出的是不支持自创建hash数据结构的索引，但是它是自适应的，也就是我们不能人为的干预使用hash索引。具体的可以参考官网：https://dev.mysql.com/doc/refman/8.0/en/create-index.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565694519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350983,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1657438422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657438422","product_id":100028001,"comment_content":"索引实现可以分为以下几种<br>1. 没有遵循最左前缀原则<br>2. 使用破坏索引的函数<br>3. 组合索引失效<br>4. 字段存储为null，这个比较特殊，null是不走索引的，这也是为什么很多DBA让我们设计表的时候给默认值。一是节省存储空间，二是走索引.<br>5. 还有比较特殊的一个函数，in ，这里测试过，in里面的参数超过5个好像就不走索引了，不知道为什么。","like_count":0},{"had_liked":false,"id":336867,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1646411493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646411493","product_id":100028001,"comment_content":"老师,你好。看了文章收益匪浅。但我看到”在创建表时，无论使用 InnoDB 还是 MyISAM 存储引擎，默认都会创建一个主键索引，而创建的主键索引默认使用的是 B+Tree 索引。”时，想到 MySQL 官方文档中说，每个 InnoDB 的表都会创建一个聚簇索引，通常来说聚簇索引就是主键索引。但是有种情况是，我创建表的时候不指定主键就不会就主键索引了，那么在这种情况下，聚簇索引就是第一个非空的唯一索引，如果主键索引和合适的唯一索引的话，就会创建一个隐藏的聚簇索引。所以的描述是不是不太妥当？请老师指点。https:&#47;&#47;dev.mysql.com&#47;doc&#47;refman&#47;5.7&#47;en&#47;innodb-index-types.html","like_count":0},{"had_liked":false,"id":272498,"user_name":"哦","can_delete":false,"product_type":"c1","uid":1444469,"ip_address":"","ucode":"A634888525305B","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/75/24764b3f.jpg","comment_is_top":false,"comment_ctime":1610100092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610100092","product_id":100028001,"comment_content":"老师，在测试使用 status、status+user_id 查询，仍然能够使用索引树，只不过type=index，是因为高版本mysql优化了吗","like_count":1},{"had_liked":false,"id":248749,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1600300889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600300889","product_id":100028001,"comment_content":"数据量小的时候不需要优化，数据量特别大的时候做优化成本很高，比如加索引；索引上线最开始数据量初具规模的时候要多看看数据库，早优化","like_count":0},{"had_liked":false,"id":243335,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1441812,"ip_address":"","ucode":"35C0133563EEB1","user_header":"https://static001.geekbang.org/account/avatar/00/16/00/14/84a976e7.jpg","comment_is_top":false,"comment_ctime":1598064412,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598064412","product_id":100028001,"comment_content":"老师您好，想请教一个问题，我们平时写sql的时候，经常要进行时间范围查询，但是对时间字段用了时间转换函数之后，索引就会失效，应该怎么做？","like_count":0,"discussions":[{"author":{"id":1039225,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/79/9426c6ce.jpg","nickname":"Super~琪琪","note":"","ucode":"5A0FCD19B24EAF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336432,"discussion_content":"对值进行函数操作，不要对数据库字段进行函数操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608595264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228558,"user_name":"wkq2786130","can_delete":false,"product_type":"c1","uid":1256821,"ip_address":"","ucode":"0F3A9DF9928C67","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/75/e7c29de4.jpg","comment_is_top":false,"comment_ctime":1592734362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592734362","product_id":100028001,"comment_content":"```<br>当我们在使用复合索引时，需要使用索引中的最左边的列进行查询，才能使用到复合索引。例如我们在 order 表中建立一个复合索引 idx_user_order_status(order_no, status, user_id)，如果我们使用 order_no、order_no+status、order_no+status+user_id 以及 order_no+user_id 组合查询，则能利用到索引；而如果我们用 status、status+user_id 查询，将无法使用到索引，这也是我们经常听过的最左匹配原则。<br>```<br>老师，和你确认下，我记得书上说的是 order_no+user_id 在查询时order_no字段可以用到复合索引 idx_user_order_status(order_no, status, user_id)，user_id用不到索引<br>","like_count":0},{"had_liked":false,"id":216770,"user_name":"Geek_521fd2","can_delete":false,"product_type":"c1","uid":1980706,"ip_address":"","ucode":"2D32831FCACBFA","user_header":"","comment_is_top":false,"comment_ctime":1589339817,"is_pvip":false,"replies":[{"id":"80537","content":"SQL执行过程中是通过优化器选择索引的，通常是基于扫描行数，即找到扫描行数最少的索引。而扫描行数通常是由COUNT(DISTINCT(field)) &#47; COUNT(field)计算所得，即基数&#47;数据总数，基数代表不相同值的数量，而这个基数也是通过采样获取的。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1589617825,"ip_address":"","comment_id":216770,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589339817","product_id":100028001,"comment_content":"sql执行的时候如何选择表中索引，会自动合并多个吗？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494942,"discussion_content":"SQL执行过程中是通过优化器选择索引的，通常是基于扫描行数，即找到扫描行数最少的索引。而扫描行数通常是由COUNT(DISTINCT(field)) / COUNT(field)计算所得，即基数/数据总数，基数代表不相同值的数量，而这个基数也是通过采样获取的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589617825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199380,"user_name":"10年以后","can_delete":false,"product_type":"c1","uid":1297421,"ip_address":"","ucode":"FE58CA7E5C2AF9","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/0d/89435926.jpg","comment_is_top":false,"comment_ctime":1585488051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585488051","product_id":100028001,"comment_content":"mysql优化","like_count":0},{"had_liked":false,"id":171823,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1579019140,"is_pvip":false,"replies":[{"id":"67221","content":"因为辅助索引order_id索引不能覆盖我们要查询的信息，所以在对order_id查询之后还需要一次回表来查找到整行数据，虽然order_id索引是顺序存放的，但是相对于主键id存放的数据顺序是不一致的，所以存在每次回表都是随机获取整行数据，如果在获取大量数据时，通过这种方式获取数据性能肯定是不理想的。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1579524170,"ip_address":"","comment_id":171823,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579019140","product_id":100028001,"comment_content":"在对“QQ怪”的回复中，老师说：在查询少量数据的情况下，使用辅助索引性能更加，而查询大量数据时，就未必了。为什么？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481523,"discussion_content":"因为辅助索引order_id索引不能覆盖我们要查询的信息，所以在对order_id查询之后还需要一次回表来查找到整行数据，虽然order_id索引是顺序存放的，但是相对于主键id存放的数据顺序是不一致的，所以存在每次回表都是随机获取整行数据，如果在获取大量数据时，通过这种方式获取数据性能肯定是不理想的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579524170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161799,"user_name":"阿杜","can_delete":false,"product_type":"c1","uid":1066705,"ip_address":"","ucode":"349D3572F5ABE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/d1/a1ddf49f.jpg","comment_is_top":false,"comment_ctime":1576333460,"is_pvip":false,"replies":[{"id":"61961","content":"具体要看查询status的值的数据量，例如如果数据大部分是status=1的，而且我们也是查询status=1的数据，那建立status+code的联合索引就没有很大意义，这个时候建议只建立code索引就可以，如果我们是要查询少量status=0，这个时候我们需要建立status+code联合索引。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1576668379,"ip_address":"","comment_id":161799,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576333460","product_id":100028001,"comment_content":"status这种字段也需要加入到联合索引中吗？比如查询status和code，是建status+code的联合索引好还是只建立code索引？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477866,"discussion_content":"具体要看查询status的值的数据量，例如如果数据大部分是status=1的，而且我们也是查询status=1的数据，那建立status+code的联合索引就没有很大意义，这个时候建议只建立code索引就可以，如果我们是要查询少量status=0，这个时候我们需要建立status+code联合索引。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576668379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066705,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/d1/a1ddf49f.jpg","nickname":"阿杜","note":"","ucode":"349D3572F5ABE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90767,"discussion_content":"status多与少都有可能查询，所以还是加入到联合索引比较好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576773831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135687,"user_name":"行则将至","can_delete":false,"product_type":"c1","uid":1542987,"ip_address":"","ucode":"DB972F2DF059C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","comment_is_top":false,"comment_ctime":1569241255,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"1569241255","product_id":100028001,"comment_content":"老师，我试了一下最左匹配原则。按照您的例子试了一下，发现有的时候，and两端的表达式交换顺序，依然可以使用到复合索引。查了查，是因为mysql的优化器会自己优化。这是怎么回事呢？网上的解释没有看懂。。。。。。","like_count":0,"discussions":[{"author":{"id":1377572,"avatar":"https://static001.geekbang.org/account/avatar/00/15/05/24/1cc3d337.jpg","nickname":"李坤","note":"","ucode":"66686DF9700A17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48687,"discussion_content":"最左匹配原则指的是你的where条件中要出现创建组合索引时放在最左边的列","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573520317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1348830,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","nickname":"td901105","note":"","ucode":"32D42A4F36FA02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1377572,"avatar":"https://static001.geekbang.org/account/avatar/00/15/05/24/1cc3d337.jpg","nickname":"李坤","note":"","ucode":"66686DF9700A17","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271261,"discussion_content":"对的，用你的索引的最左列去where条件中去找","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590110746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":48687,"ip_address":""},"score":271261,"extra":""}]}]},{"had_liked":false,"id":133534,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1568598379,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1568598379","product_id":100028001,"comment_content":"Key Point:<br><br>如果觉得这些规则太多，难以记住，我们就要养成经常检查 SQL 执行计划的习惯。","like_count":0},{"had_liked":false,"id":133210,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1568444506,"is_pvip":false,"replies":[{"id":"51104","content":"mysql查询优化是基于检索成本考虑，而不是基于时间成本考虑，假设我们读取的是随机行的数据，在磁盘中存储是无序的，有可能在扫描少数行的情况下，所需时间更长，这种情况下会出现误选择索引。<br><br>通常在一些in操作时，在数据量比较小的情况下，会使用我们建立的索引，当数据量超过一定量时，会改走主键索引。我们一般是通过慢日志来排查这些问题，一旦发现不是走的我们想要的索引，可以使用force index来强制走期望的索引。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568533705,"ip_address":"","comment_id":133210,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568444506","product_id":100028001,"comment_content":"老师，请问存储引擎具体判断使用什么索引的原则是啥?大体的原则肯定是怎么快怎么走?不过也存在一定的误判，请问老师清楚误判的原因和具体都有那些场景嘛？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467296,"discussion_content":"mysql查询优化是基于检索成本考虑，而不是基于时间成本考虑，假设我们读取的是随机行的数据，在磁盘中存储是无序的，有可能在扫描少数行的情况下，所需时间更长，这种情况下会出现误选择索引。\n\n通常在一些in操作时，在数据量比较小的情况下，会使用我们建立的索引，当数据量超过一定量时，会改走主键索引。我们一般是通过慢日志来排查这些问题，一旦发现不是走的我们想要的索引，可以使用force index来强制走期望的索引。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568533705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132342,"user_name":"DY","can_delete":false,"product_type":"c1","uid":1459006,"ip_address":"","ucode":"55536A524A99B4","user_header":"https://static001.geekbang.org/account/avatar/00/16/43/3e/960d12cb.jpg","comment_is_top":false,"comment_ctime":1568092617,"is_pvip":false,"replies":[{"id":"50646","content":"我们这里讨论的是索引失效","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568123641,"ip_address":"","comment_id":132342,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1568092617","product_id":100028001,"comment_content":"老师，你好。 select * from order_detail where id in (select id from order_detail where order_id between 5000 and 10000)； 这种优化方式我试了试， 没起到什么优化作用。问了下DBA，说都回表了， 先查询主键ID也回表， 感觉和自己理解的不一样，但是又没法反驳。看了下执行计划这条sql也确实回表了","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466887,"discussion_content":"我们这里讨论的是索引失效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568123641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/43/3e/960d12cb.jpg","nickname":"DY","note":"","ucode":"55536A524A99B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9426,"discussion_content":"老师，你好。我验证了下，select * from order_detail where id in (select id from order_detail where order_id between 5000 and 10000)； 发现子sql如果是区间段查询的话会回表，直接用=不会回表。区间段查询主键会回表，有点不太知道原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568167737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123215,"user_name":"和你一起搬砖的胡大爷","can_delete":false,"product_type":"c1","uid":1008587,"ip_address":"","ucode":"54607F4E17917A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/cb/7c004188.jpg","comment_is_top":false,"comment_ctime":1565627515,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565627515","product_id":100028001,"comment_content":"好几个都同学都提到 select * from order_detail where id in (select id from order_detail where order_id between 5000 and 10000)，至少mysql 57里这样写","like_count":0,"discussions":[{"author":{"id":1008587,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/cb/7c004188.jpg","nickname":"和你一起搬砖的胡大爷","note":"","ucode":"54607F4E17917A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4659,"discussion_content":"索引是失效的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565627559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122882,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1565569165,"is_pvip":false,"replies":[{"id":"45083","content":"多熟悉一门数据库也是好的，知己知彼","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565572943,"ip_address":"","comment_id":122882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565569165","product_id":100028001,"comment_content":"我这一直用的都是oracle，看到mysql就想，快快跳过。后来发现，和数据库关系不大，很多都是通用的。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462438,"discussion_content":"多熟悉一门数据库也是好的，知己知彼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565572943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122537,"user_name":"新世界","can_delete":false,"product_type":"c1","uid":1079495,"ip_address":"","ucode":"4473DC1505F158","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","comment_is_top":false,"comment_ctime":1565419799,"is_pvip":false,"replies":[{"id":"45091","content":"对的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565573835,"ip_address":"","comment_id":122537,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565419799","product_id":100028001,"comment_content":"查询用order_id索引，然后进行回表查询","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462298,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565573835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122532,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565418975,"is_pvip":false,"replies":[{"id":"45092","content":"正解！","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565573952,"ip_address":"","comment_id":122532,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565418975","product_id":100028001,"comment_content":"请问该查询选择的索引是什么？有什么方式可以强制使用我们期望的索引呢？<br>会直接查询主键索引进行全表扫描，因为数据库优化器在判断SQL语句执行使用哪个索引时会计算代价，如果使用主订单 id 索引回表太多，代价太大，还不如用主键索引进行全表扫描。<br>我觉得SQL改为以下方式可以使用主订单 id 索引，并提高查询效率。<br>select * from order_detail where id in (select id from order_detail where order_id between 5000 and 10000)","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462295,"discussion_content":"正解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565573952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/43/3e/960d12cb.jpg","nickname":"DY","note":"","ucode":"55536A524A99B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9072,"discussion_content":"这种方式怎么优化了啊？看着都明白，但是一看执行计划，发现这种方式也回表了。 而且两个sql 哪个后执行哪个用时少，起不到优化作用啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568128181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122487,"user_name":"undifined","can_delete":false,"product_type":"c1","uid":1068920,"ip_address":"","ucode":"449CB4CD2DC089","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/78/c3d8ecb0.jpg","comment_is_top":false,"comment_ctime":1565405851,"is_pvip":false,"replies":[{"id":"45100","content":"对的，思路就是强制使用辅助索引","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565574681,"ip_address":"","comment_id":122487,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565405851","product_id":100028001,"comment_content":"可以用子查询实现，因为order_id 的索引中有主键id，先使用order_id 的索引查询到主键id，然后通过主键再从表里查询<br>SELECT *<br>FROM order_detail<br>WHERE id IN (SELECT id FROM order_detail WHERE order_id BETWEEN 5000 AND 10000);<br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462272,"discussion_content":"对的，思路就是强制使用辅助索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565574681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122481,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1565403707,"is_pvip":false,"replies":[{"id":"45102","content":"已经给出答案，请转至QQ怪的问答题","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565574758,"ip_address":"","comment_id":122481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565403707","product_id":100028001,"comment_content":"索引失效:这个操作在索引树上满足不了需求。就会导致索引失效，b+树的特性就是有序(最左可以理解为高位有效)。<br>课后习题，感觉老师这么问肯定不会走主订单id的索引了，原因待老师解答。<br>如果有分布式id生成系统能保证生成的id有序递增的话。可以不用自增的id做主键，直接用生成的oreder_id做主键，可少一次回表。愚见期待老师的答案","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462270,"discussion_content":"已经给出答案，请转至QQ怪的问答题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565574758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122474,"user_name":"门窗小二","can_delete":false,"product_type":"c1","uid":1006424,"ip_address":"","ucode":"0BF3780C247F22","user_header":"","comment_is_top":false,"comment_ctime":1565401463,"is_pvip":true,"replies":[{"id":"45098","content":"正解！","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565574604,"ip_address":"","comment_id":122474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565401463","product_id":100028001,"comment_content":"看查询优化器计算出来的代价！不知道数据量小的时候会不会直接使用id索引这样相比order_id而言是少了回表的代价！正常情况应该还是使用主订单id的索引！最终还是需要结合执行计划看下是不是可以优化或者说指定需要查询出来的列而不是*。强制使用某个索引是force index吧","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462268,"discussion_content":"正解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565574604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}