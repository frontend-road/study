{"id":279649,"title":"11 | “万金油”的String，为什么不好用了？","content":"<p>你好，我是蒋德钧。</p><p>从今天开始，我们就要进入“实践篇”了。接下来，我们会用5节课的时间学习“数据结构”。我会介绍节省内存开销以及保存和统计海量数据的数据类型及其底层数据结构，还会围绕典型的应用场景（例如地址位置查询、时间序列数据库读写和消息队列存取），跟你分享使用Redis的数据类型和module扩展功能来满足需求的具体方案。</p><p>今天，我们先了解下String类型的内存空间消耗问题，以及选择节省内存开销的数据类型的解决方案。</p><p>先跟你分享一个我曾经遇到的需求。</p><p>当时，我们要开发一个图片存储系统，要求这个系统能快速地记录图片ID和图片在存储系统中保存时的ID（可以直接叫作图片存储对象ID）。同时，还要能够根据图片ID快速查找到图片存储对象ID。</p><p>因为图片数量巨大，所以我们就用10位数来表示图片ID和图片存储对象ID，例如，图片ID为1101000051，它在存储系统中对应的ID号是3301000051。</p><pre><code>photo_id: 1101000051\nphoto_obj_id: 3301000051\n</code></pre><p>可以看到，图片ID和图片存储对象ID正好一一对应，是典型的“键-单值”模式。所谓的“单值”，就是指键值对中的值就是一个值，而不是一个集合，这和String类型提供的“一个键对应一个值的数据”的保存形式刚好契合。</p><!-- [[[read_end]]] --><p>而且，String类型可以保存二进制字节流，就像“万金油”一样，只要把数据转成二进制字节数组，就可以保存了。</p><p>所以，我们的第一个方案就是用String保存数据。我们把图片ID和图片存储对象ID分别作为键值对的key和value来保存，其中，图片存储对象ID用了String类型。</p><p>刚开始，我们保存了1亿张图片，大约用了6.4GB的内存。但是，随着图片数据量的不断增加，我们的Redis内存使用量也在增加，结果就遇到了大内存Redis实例因为生成RDB而响应变慢的问题。很显然，String类型并不是一种好的选择，我们还需要进一步寻找能节省内存开销的数据类型方案。</p><p>在这个过程中，我深入地研究了String类型的底层结构，找到了它内存开销大的原因，对“万金油”的String类型有了全新的认知：String类型并不是适用于所有场合的，它有一个明显的短板，就是它保存数据时所消耗的内存空间较多。</p><p>同时，我还仔细研究了集合类型的数据结构。我发现，集合类型有非常节省内存空间的底层实现结构，但是，集合类型保存的数据模式，是一个键对应一系列值，并不适合直接保存单值的键值对。所以，我们就使用二级编码的方法，实现了用集合类型保存单值键值对，Redis实例的内存空间消耗明显下降了。</p><p>这节课，我就把在解决这个问题时学到的经验和方法分享给你，包括String类型的内存空间消耗在哪儿了、用什么数据结构可以节省内存，以及如何用集合类型保存单值键值对。如果你在使用String类型时也遇到了内存空间消耗较多的问题，就可以尝试下今天的解决方案了。</p><p>接下来，我们先来看看String类型的内存都消耗在哪里了。</p><h2>为什么String类型内存开销大？</h2><p>在刚才的案例中，我们保存了1亿张图片的信息，用了约6.4GB的内存，一个图片ID和图片存储对象ID的记录平均用了64字节。</p><p>但问题是，一组图片ID及其存储对象ID的记录，实际只需要16字节就可以了。</p><p>我们来分析一下。图片ID和图片存储对象ID都是10位数，我们可以用两个8字节的Long类型表示这两个ID。因为8字节的Long类型最大可以表示2的64次方的数值，所以肯定可以表示10位数。但是，为什么String类型却用了64字节呢？</p><p>其实，除了记录实际数据，String类型还需要额外的内存空间记录数据长度、空间使用等信息，这些信息也叫作元数据。当实际保存的数据较小时，元数据的空间开销就显得比较大了，有点“喧宾夺主”的意思。</p><p>那么，String类型具体是怎么保存数据的呢？我来解释一下。</p><p>当你保存64位有符号整数时，String类型会把它保存为一个8字节的Long类型整数，这种保存方式通常也叫作int编码方式。</p><p>但是，当你保存的数据中包含字符时，String类型就会用简单动态字符串（Simple Dynamic String，SDS）结构体来保存，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/57/37c6a8d5abd65906368e7c4a6b938657.jpg?wh=1926*1400\" alt=\"\"></p><ul>\n<li><strong>buf</strong>：字节数组，保存实际数据。为了表示字节数组的结束，Redis会自动在数组最后加一个“\\0”，这就会额外占用1个字节的开销。</li>\n<li><strong>len</strong>：占4个字节，表示buf的已用长度。</li>\n<li><strong>alloc</strong>：也占个4字节，表示buf的实际分配长度，一般大于len。</li>\n</ul><p>可以看到，在SDS中，buf保存实际数据，而len和alloc本身其实是SDS结构体的额外开销。</p><p>另外，对于String类型来说，除了SDS的额外开销，还有一个来自于RedisObject结构体的开销。</p><p>因为Redis的数据类型有很多，而且，不同数据类型都有些相同的元数据要记录（比如最后一次访问的时间、被引用的次数等），所以，Redis会用一个RedisObject结构体来统一记录这些元数据，同时指向实际数据。</p><p>一个RedisObject包含了8字节的元数据和一个8字节指针，这个指针再进一步指向具体数据类型的实际数据所在，例如指向String类型的SDS结构所在的内存地址，可以看一下下面的示意图。关于RedisObject的具体结构细节，我会在后面的课程中详细介绍，现在你只要了解它的基本结构和元数据开销就行了。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/57/3409948e9d3e8aa5cd7cafb9b66c2857.jpg?wh=2214*1656\" alt=\"\"></p><p>为了节省内存空间，Redis还对Long类型整数和SDS的内存布局做了专门的设计。</p><p>一方面，当保存的是Long类型整数时，RedisObject中的指针就直接赋值为整数数据了，这样就不用额外的指针再指向整数了，节省了指针的空间开销。</p><p>另一方面，当保存的是字符串数据，并且字符串小于等于44字节时，RedisObject中的元数据、指针和SDS是一块连续的内存区域，这样就可以避免内存碎片。这种布局方式也被称为embstr编码方式。</p><p>当然，当字符串大于44字节时，SDS的数据量就开始变多了，Redis就不再把SDS和RedisObject布局在一起了，而是会给SDS分配独立的空间，并用指针指向SDS结构。这种布局方式被称为raw编码模式。</p><p>为了帮助你理解int、embstr和raw这三种编码模式，我画了一张示意图，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/e3/ce83d1346c9642fdbbf5ffbe701bfbe3.jpg?wh=3072*1938\" alt=\"\"></p><p>好了，知道了RedisObject所包含的额外元数据开销，现在，我们就可以计算String类型的内存使用量了。</p><p>因为10位数的图片ID和图片存储对象ID是Long类型整数，所以可以直接用int编码的RedisObject保存。每个int编码的RedisObject元数据部分占8字节，指针部分被直接赋值为8字节的整数了。此时，每个ID会使用16字节，加起来一共是32字节。但是，另外的32字节去哪儿了呢？</p><p>我在<a href=\"https://time.geekbang.org/column/article/268253\">第2讲</a>中说过，Redis会使用一个全局哈希表保存所有键值对，哈希表的每一项是一个dictEntry的结构体，用来指向一个键值对。dictEntry结构中有三个8字节的指针，分别指向key、value以及下一个dictEntry，三个指针共24字节，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/e7/b6cbc5161388fdf4c9b49f3802ef53e7.jpg?wh=2219*1371\" alt=\"\"></p><p>但是，这三个指针只有24字节，为什么会占用了32字节呢？这就要提到Redis使用的内存分配库jemalloc了。</p><p>jemalloc在分配内存时，会根据我们申请的字节数N，找一个比N大，但是最接近N的2的幂次数作为分配的空间，这样可以减少频繁分配的次数。</p><p>举个例子。如果你申请6字节空间，jemalloc实际会分配8字节空间；如果你申请24字节空间，jemalloc则会分配32字节。所以，在我们刚刚说的场景里，dictEntry结构就占用了32字节。</p><p>好了，到这儿，你应该就能理解，为什么用String类型保存图片ID和图片存储对象ID时需要用64个字节了。</p><p>你看，明明有效信息只有16字节，使用String类型保存时，却需要64字节的内存空间，有48字节都没有用于保存实际的数据。我们来换算下，如果要保存的图片有1亿张，那么1亿条的图片ID记录就需要6.4GB内存空间，其中有4.8GB的内存空间都用来保存元数据了，额外的内存空间开销很大。那么，有没有更加节省内存的方法呢？</p><h2>用什么数据结构可以节省内存？</h2><p>Redis有一种底层数据结构，叫压缩列表（ziplist），这是一种非常节省内存的结构。</p><p>我们先回顾下压缩列表的构成。表头有三个字段zlbytes、zltail和zllen，分别表示列表长度、列表尾的偏移量，以及列表中的entry个数。压缩列表尾还有一个zlend，表示列表结束。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/9f/f6d4df5f7d6e80de29e2c6446b02429f.jpg?wh=3457*972\" alt=\"\"></p><p>压缩列表之所以能节省内存，就在于它是用一系列连续的entry保存数据。每个entry的元数据包括下面几部分。</p><ul>\n<li><strong>prev_len</strong>，表示前一个entry的长度。prev_len有两种取值情况：1字节或5字节。取值1字节时，表示上一个entry的长度小于254字节。虽然1字节的值能表示的数值范围是0到255，但是压缩列表中zlend的取值默认是255，因此，就默认用255表示整个压缩列表的结束，其他表示长度的地方就不能再用255这个值了。所以，当上一个entry长度小于254字节时，prev_len取值为1字节，否则，就取值为5字节。</li>\n<li><strong>len</strong>：表示自身长度，4字节；</li>\n<li><strong>encoding</strong>：表示编码方式，1字节；</li>\n<li><strong>content</strong>：保存实际数据。</li>\n</ul><p>这些entry会挨个儿放置在内存中，不需要再用额外的指针进行连接，这样就可以节省指针所占用的空间。</p><p>我们以保存图片存储对象ID为例，来分析一下压缩列表是如何节省内存空间的。</p><p>每个entry保存一个图片存储对象ID（8字节），此时，每个entry的prev_len只需要1个字节就行，因为每个entry的前一个entry长度都只有8字节，小于254字节。这样一来，一个图片的存储对象ID所占用的内存大小是14字节（1+4+1+8=14），实际分配16字节。</p><p>Redis基于压缩列表实现了List、Hash和Sorted Set这样的集合类型，这样做的最大好处就是节省了dictEntry的开销。当你用String类型时，一个键值对就有一个dictEntry，要用32字节空间。但采用集合类型时，一个key就对应一个集合的数据，能保存的数据多了很多，但也只用了一个dictEntry，这样就节省了内存。</p><p>这个方案听起来很好，但还存在一个问题：在用集合类型保存键值对时，一个键对应了一个集合的数据，但是在我们的场景中，一个图片ID只对应一个图片的存储对象ID，我们该怎么用集合类型呢？换句话说，在一个键对应一个值（也就是单值键值对）的情况下，我们该怎么用集合类型来保存这种单值键值对呢？</p><h2>如何用集合类型保存单值的键值对？</h2><p>在保存单值的键值对时，可以采用基于Hash类型的二级编码方法。这里说的二级编码，就是把一个单值的数据拆分成两部分，前一部分作为Hash集合的key，后一部分作为Hash集合的value，这样一来，我们就可以把单值数据保存到Hash集合中了。</p><p>以图片ID 1101000060和图片存储对象ID 3302000080为例，我们可以把图片ID的前7位（1101000）作为Hash类型的键，把图片ID的最后3位（060）和图片存储对象ID分别作为Hash类型值中的key和value。</p><p>按照这种设计方法，我在Redis中插入了一组图片ID及其存储对象ID的记录，并且用info命令查看了内存开销，我发现，增加一条记录后，内存占用只增加了16字节，如下所示：</p><pre><code>127.0.0.1:6379&gt; info memory\n# Memory\nused_memory:1039120\n127.0.0.1:6379&gt; hset 1101000 060 3302000080\n(integer) 1\n127.0.0.1:6379&gt; info memory\n# Memory\nused_memory:1039136\n</code></pre><p>在使用String类型时，每个记录需要消耗64字节，这种方式却只用了16字节，所使用的内存空间是原来的1/4，满足了我们节省内存空间的需求。</p><p>不过，你可能也会有疑惑：“二级编码一定要把图片ID的前7位作为Hash类型的键，把最后3位作为Hash类型值中的key吗？”<strong>其实，二级编码方法中采用的ID长度是有讲究的</strong>。</p><p>在<a href=\"https://time.geekbang.org/column/article/268253\">第2讲</a>中，我介绍过Redis Hash类型的两种底层实现结构，分别是压缩列表和哈希表。</p><p>那么，Hash类型底层结构什么时候使用压缩列表，什么时候使用哈希表呢？其实，Hash类型设置了用压缩列表保存数据时的两个阈值，一旦超过了阈值，Hash类型就会用哈希表来保存数据了。</p><p>这两个阈值分别对应以下两个配置项：</p><ul>\n<li>hash-max-ziplist-entries：表示用压缩列表保存时哈希集合中的最大元素个数。</li>\n<li>hash-max-ziplist-value：表示用压缩列表保存时哈希集合中单个元素的最大长度。</li>\n</ul><p>如果我们往Hash集合中写入的元素个数超过了hash-max-ziplist-entries，或者写入的单个元素大小超过了hash-max-ziplist-value，Redis就会自动把Hash类型的实现结构由压缩列表转为哈希表。</p><p>一旦从压缩列表转为了哈希表，Hash类型就会一直用哈希表进行保存，而不会再转回压缩列表了。在节省内存空间方面，哈希表就没有压缩列表那么高效了。</p><p><strong>为了能充分使用压缩列表的精简内存布局，我们一般要控制保存在Hash集合中的元素个数</strong>。所以，在刚才的二级编码中，我们只用图片ID最后3位作为Hash集合的key，也就保证了Hash集合的元素个数不超过1000，同时，我们把hash-max-ziplist-entries设置为1000，这样一来，Hash集合就可以一直使用压缩列表来节省内存空间了。</p><h2>小结</h2><p>这节课，我们打破了对String的认知误区，以前，我们认为String是“万金油”，什么场合都适用，但是，在保存的键值对本身占用的内存空间不大时（例如这节课里提到的的图片ID和图片存储对象ID），String类型的元数据开销就占据主导了，这里面包括了RedisObject结构、SDS结构、dictEntry结构的内存开销。</p><p>针对这种情况，我们可以使用压缩列表保存数据。当然，使用Hash这种集合类型保存单值键值对的数据时，我们需要将单值数据拆分成两部分，分别作为Hash集合的键和值，就像刚才案例中用二级编码来表示图片ID，希望你能把这个方法用到自己的场景中。</p><p>最后，我还想再给你提供一个小方法：如果你想知道键值对采用不同类型保存时的内存开销，可以在<a href=\"http://www.redis.cn/redis_memory/\">这个网址</a>里输入你的键值对长度和使用的数据类型，这样就能知道实际消耗的内存大小了。建议你把这个小工具用起来，它可以帮助你充分地节省内存。</p><h2>每课一问</h2><p>按照惯例，给你提个小问题：除了String类型和Hash类型，你觉得，还有其他合适的类型可以应用在这节课所说的保存图片的例子吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论，也欢迎你把今天的内容分享给你的朋友。</p>","comments":[{"had_liked":false,"id":245145,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1598845017,"is_pvip":true,"discussion_count":45,"race_medal":0,"score":"2050298245209","product_id":100056701,"comment_content":"保存图片的例子，除了用String和Hash存储之外，还可以用Sorted Set存储（勉强）。<br><br>Sorted Set与Hash类似，当元素数量少于zset-max-ziplist-entries，并且每个元素内存占用小于zset-max-ziplist-value时，默认也采用ziplist结构存储。我们可以把zset-max-ziplist-entries参数设置为1000，这样Sorted Set默认就会使用ziplist存储了，member和score也会紧凑排列存储，可以节省内存空间。<br><br>使用zadd 1101000 3302000080 060命令存储图片ID和对象ID的映射关系，查询时使用zscore 1101000 060获取结果。<br><br>但是Sorted Set使用ziplist存储时的缺点是，这个ziplist是需要按照score排序的（为了方便zrange和zrevrange命令的使用），所以在插入一个元素时，需要先根据score找到对应的位置，然后把member和score插入进去，这也意味着Sorted Set插入元素的性能没有Hash高（这也是前面说勉强能用Sorte Set存储的原因）。而Hash在插入元素时，只需要将新的元素插入到ziplist的尾部即可，不需要定位到指定位置。<br><br>不管是使用Hash还是Sorted Set，当采用ziplist方式存储时，虽然可以节省内存空间，但是在查询指定元素时，都要遍历整个ziplist，找到指定的元素。所以使用ziplist方式存储时，虽然可以利用CPU高速缓存，但也不适合存储过多的数据（hash-max-ziplist-entries和zset-max-ziplist-entries不宜设置过大），否则查询性能就会下降比较厉害。整体来说，这样的方案就是时间换空间，我们需要权衡使用。<br><br>当使用ziplist存储时，我们尽量存储int数据，ziplist在设计时每个entry都进行了优化，针对要存储的数据，会尽量选择占用内存小的方式存储（整数比字符串在存储时占用内存更小），这也有利于我们节省Redis的内存。还有，因为ziplist是每个元素紧凑排列，而且每个元素存储了上一个元素的长度，所以当修改其中一个元素超过一定大小时，会引发多个元素的级联调整（前面一个元素发生大的变动，后面的元素都要重新排列位置，重新分配内存），这也会引发性能问题，需要注意。<br><br>另外，使用Hash和Sorted Set存储时，虽然节省了内存空间，但是设置过期变得困难（无法控制每个元素的过期，只能整个key设置过期，或者业务层单独维护每个元素过期删除的逻辑，但比较复杂）。而使用String虽然占用内存多，但是每个key都可以单独设置过期时间，还可以设置maxmemory和淘汰策略，以这种方式控制整个实例的内存上限。<br><br>所以在选用Hash和Sorted Set存储时，意味着把Redis当做数据库使用，这样就需要务必保证Redis的可靠性（做好备份、主从副本），防止实例宕机引发数据丢失的风险。而采用String存储时，可以把Redis当做缓存使用，每个key设置过期时间，同时设置maxmemory和淘汰策略，控制整个实例的内存上限，这种方案需要在数据库层（例如MySQL）也存储一份映射关系，当Redis中的缓存过期或被淘汰时，需要从数据库中重新查询重建缓存，同时需要保证数据库和缓存的一致性，这些逻辑也需要编写业务代码实现。<br><br>总之，各有利弊，我们需要根据实际场景进行选择。","like_count":478,"discussions":[{"author":{"id":1815185,"avatar":"","nickname":"松鼠鱼","note":"","ucode":"C0E87CCF71DB44","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332775,"discussion_content":"花一份钱上两门课 基础概念+实战调优 老哥稳！","likes_number":46,"is_delete":false,"is_hidden":false,"ctime":1607336267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1815185,"avatar":"","nickname":"松鼠鱼","note":"","ucode":"C0E87CCF71DB44","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332774,"discussion_content":"花一份钱上两门课 基础概念+实战调优 老哥稳！","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1607336266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2548016,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e1/30/56151c95.jpg","nickname":"徐大雷","note":"","ucode":"4D6F0D4C58CE93","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562908,"discussion_content":"k神，请教一下，hash存储使用压缩列表的时候对于hash的key和value都会占用压缩列表里面的一个entry么？如果是是如何遍历查询hash中的key呢？谢谢回复","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649906385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2565436,"avatar":"","nickname":"Geek_8438e4","note":"","ucode":"055FDB9BF4D366","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2548016,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e1/30/56151c95.jpg","nickname":"徐大雷","note":"","ucode":"4D6F0D4C58CE93","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":570974,"discussion_content":"ziplist 循环遍历","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652017382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562908,"ip_address":""},"score":570974,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2548016,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e1/30/56151c95.jpg","nickname":"徐大雷","note":"","ucode":"4D6F0D4C58CE93","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":576717,"discussion_content":"挨个找啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655748501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562908,"ip_address":""},"score":576717,"extra":""},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2548016,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e1/30/56151c95.jpg","nickname":"徐大雷","note":"","ucode":"4D6F0D4C58CE93","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":584718,"discussion_content":"hash的key和value都会占用压缩列表里面的一个entry，通过循环遍历，进行查找，这也是限制数量不能太多的原因～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661060460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562908,"ip_address":"浙江"},"score":584718,"extra":""}]},{"author":{"id":1205752,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/f8/e7ae3297.jpg","nickname":"sown","note":"","ucode":"A5C7EB3EF6465C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553997,"discussion_content":"花一份钱上两门课 基础概念+实战调优 老哥稳！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646183381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2676330,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d6/6a/1d844a27.jpg","nickname":"冲冲冲","note":"","ucode":"4DA7596B5AFD51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389122,"discussion_content":"大神，ziplist光一个value就16字节了，那么加上key不就不止了吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629125604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1675882,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/6a/dd37a054.jpg","nickname":"张y .","note":"","ucode":"85918469492F4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2676330,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d6/6a/1d844a27.jpg","nickname":"冲冲冲","note":"","ucode":"4DA7596B5AFD51","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406639,"discussion_content":"ziplist就是 value的一种数据结构实现， key是上层的。   hash  key  value ; value才涉及ziplist","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1634812303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389122,"ip_address":""},"score":406639,"extra":""},{"author":{"id":1801058,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7b/62/ec94cee4.jpg","nickname":"彭文达","note":"","ucode":"8DCC27EC5AF263","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1675882,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/6a/dd37a054.jpg","nickname":"张y .","note":"","ucode":"85918469492F4C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588525,"discussion_content":"有点答非所问呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663813807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":406639,"ip_address":"上海"},"score":588525,"extra":""}]},{"author":{"id":1647771,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJJNh6ic7z3qb7TricgnZjUXALAibLPYszdfBCIQDLgEnKRpiavP4ZD3RvxicSiaCM41vXicHzNouWSiaaOEg/132","nickname":"Geek_a9d243","note":"","ucode":"E837C1F6F71659","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335088,"discussion_content":"太赞了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608088035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332046,"discussion_content":"以实战为准，此方法是以时间换空间，用了以后redis速度会下降，适当使用，适当的压缩，达到平衡即可。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607052377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2105292,"avatar":"","nickname":"gopher","note":"","ucode":"EF9DAB533A858C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318937,"discussion_content":"实战类评论，赞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603886544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1977474,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","nickname":"Reborn 2.0","note":"","ucode":"BA506E7455D91C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318585,"discussion_content":"scored set 用 ziplist方式存储是不是就不需要维护 skiplist这个分数的排序了啊?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603787563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1977474,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","nickname":"Reborn 2.0","note":"","ucode":"BA506E7455D91C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318589,"discussion_content":"需要，用ziplist存储时，也是按照顺序排好的。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1603788299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318585,"ip_address":""},"score":318589,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1977474,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","nickname":"Reborn 2.0","note":"","ucode":"BA506E7455D91C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576718,"discussion_content":"肯定也需要, zsort顺序必须得保证, 不管啥结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655748592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318585,"ip_address":""},"score":576718,"extra":""}]},{"author":{"id":1194858,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","nickname":"RD","note":"","ucode":"E3947B6E1681AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589281,"discussion_content":"福尔摩斯·K","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664618541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1527581,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/270T9KAFd4oCxXXB1giaMDaJuTQVib8gPt77VkM5dbS3hW60kwTNnxMYpVibwWVdnASCrymBbwT7HI77URia0KUylw/132","nickname":"Geek_7ee455","note":"","ucode":"76C69F26B0F653","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583686,"discussion_content":"k神，我的超人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660294024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2763473,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKuBBITVkpA7y3OarK7d7ch9YtVpiaDfzoQEcJFOE8PHjdKcVQvy9ZkCfA7Kgr6HupVS9luic3mQ5DA/132","nickname":"WADE","note":"","ucode":"55C3E6615B0A9F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575450,"discussion_content":"为什么选用hash和sorted hash存储时会是当做数据库使用了，而string也当做缓存使用，是因为string的操作效率更高吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654842612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178946,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/42/9e065ac3.jpg","nickname":"舍得","note":"","ucode":"98877E44DBA688","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558083,"discussion_content":"大开眼界，太厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648088661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1729533,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/63/fd/d700d6ac.jpg","nickname":"尽人事","note":"","ucode":"F73B8CFD83E0F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556402,"discussion_content":"zset-max-ziplist-entries 这个是不是对所有sorted set生效啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647341262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553371,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645865415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2660316,"avatar":"https://static001.geekbang.org/account/avatar/00/28/97/dc/8eacc8f1.jpg","nickname":"漠博嵩","note":"","ucode":"33704880E9790F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552249,"discussion_content":"我嘞个去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645369135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2729003,"avatar":"https://static001.geekbang.org/account/avatar/00/29/a4/2b/0e1bab59.jpg","nickname":"senda","note":"","ucode":"74541011088AFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543092,"discussion_content":"大佬，什么时候能分享一下redis集群完整的搭建过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640947196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1779061,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/25/75/d38dacaf.jpg","nickname":"李安民","note":"","ucode":"B5C45FD56E652B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398334,"discussion_content":"大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632757930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381946,"discussion_content":"厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625312777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1192724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","nickname":"Just Do IT","note":"","ucode":"1EAD92510FA7BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354775,"discussion_content":"请教课代表，“当上一个 entry 长度小于 254 字节时，prev_len 取值为 1 字节，否则，就取值为 5 字节。“ 老师这句话是否有问题，为何是小于254呢，一个字节可以表示256个数值，255这个数被表尾占用，那还剩255个数，应该是小于或等于254，而不只是小于。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615340500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1498155,"avatar":"https://static001.geekbang.org/account/avatar/00/16/dc/2b/b16aa5b6.jpg","nickname":"intelliYY","note":"","ucode":"375B28CE130CBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1192724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","nickname":"Just Do IT","note":"","ucode":"1EAD92510FA7BE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356539,"discussion_content":"因为5个字节的prev_len的第一个字节就是254，如果1个字节的prev_len能够等于254，那就无法判断prev_len的长度究竟是1个字节还是5个字节了，所以是255作为是否结束的标识数，254作为prev_len占用空间是1个字节还是5个字节的标识数，这样就只剩254个数了","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1615619503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":354775,"ip_address":""},"score":356539,"extra":""},{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1192724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","nickname":"Just Do IT","note":"","ucode":"1EAD92510FA7BE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370021,"discussion_content":"prev_len就是254啊，256个长度减去255减去0，你总不能在这个字节里存一个0吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619253981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":354775,"ip_address":""},"score":370021,"extra":""},{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1192724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","nickname":"Just Do IT","note":"","ucode":"1EAD92510FA7BE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373980,"discussion_content":"prev_len 字段是为了从后往前遍历 entry 的时候，通过这个字段快速定位到前一个 entry 的位置。该字段是一个变长的整数，当字符串长度小于 254 时，使用一个字节表示；但大于 254 的时候采用 5 个字节表示，其中第一个字节是 0xFF(254)，剩下四个表示长度。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1620957124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":354775,"ip_address":""},"score":373980,"extra":""}]},{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335698,"discussion_content":"请教下k神，redis的key和vaule为什么都要用RedisObject进行包装呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608277255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2041396,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","nickname":"宙斯","note":"","ucode":"80DF36BAD298AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388122,"discussion_content":"RedisObject 这是为了记录一些普遍使用的一些信息，像长度，容量等参数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628601293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335698,"ip_address":""},"score":388122,"extra":""}]},{"author":{"id":1033425,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c4/d1/209abdd6.jpg","nickname":"小狼","note":"","ucode":"FEAC7864FC1D20","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314469,"discussion_content":"太精华了，学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603159554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140276,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/34/0508d9e4.jpg","nickname":"u","note":"","ucode":"88FA7BA089807C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306051,"discussion_content":"不管是使用Hash还是Sorted Set，当采用ziplist方式存储时，虽然可以节省内存空间，但是在查询指定元素时，都要遍历整个ziplist，找到指定的元素。\n\nhash查询不用遍历吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600156908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1140276,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/34/0508d9e4.jpg","nickname":"u","note":"","ucode":"88FA7BA089807C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306059,"discussion_content":"哈希类型底层可能是ziplist，也可能是哈希表存储。如果是ziplist存储，需要遍历。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1600158283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306051,"ip_address":""},"score":306059,"extra":""},{"author":{"id":1265707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","nickname":"第一装甲集群司令克莱斯特","note":"","ucode":"4E8FBB23AD860B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":336375,"discussion_content":"大佬，zipList遍历，在不同级别的索引之间跳跃查找，时间复杂度O(nlogn)吧！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608559806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306059,"ip_address":""},"score":336375,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1265707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","nickname":"第一装甲集群司令克莱斯特","note":"","ucode":"4E8FBB23AD860B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336378,"discussion_content":"ziplist只能遍历，O(N)。转换为跳表，O(logN)+M。\n\n所以元素少用ziplist存，多了就转为跳表。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1608560245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336375,"ip_address":""},"score":336378,"extra":""}]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302576,"discussion_content":"dictEntry 这个里面的 3个指针到底指向的是哪啊？  key 的指针， value 指针 ,nextDictEntry 指针， 指向的是 SDS 或者 RedisObject 中的哪个位置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598964216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":303111,"discussion_content":"1. 一个键值对 在底层实现 对应一个dictEntry结构体\n2. dictEntry的3个指针分别指向键，值，下一个dictEntry（因为全局哈希表为链式哈希表）\n3. 键，值在底层实现上都对应一个RedisObject结构体\n4. String类型键的值 对应RedisObject结构体的字段ptr指向SDS（实际数据存在SDS结构体的buf中）\n\n这样解释，应该清晰了\n","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1599143552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302576,"ip_address":""},"score":303111,"extra":""},{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340085,"discussion_content":"key为什么要用redisObject进行包装呢？我看源码 dictEntry的key没有用redisObject包装啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609901150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303111,"ip_address":""},"score":340085,"extra":""},{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349914,"discussion_content":"next准确说应该是指向同一个哈希桶中的下一个enry","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613628818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303111,"ip_address":""},"score":349914,"extra":""}]}]},{"had_liked":false,"id":245225,"user_name":"Wangxi","can_delete":false,"product_type":"c1","uid":1211790,"ip_address":"","ucode":"C25A9A14179930","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","comment_is_top":false,"comment_ctime":1598868390,"is_pvip":true,"replies":[{"id":"90288","content":"赞 实践的态度！","user_name":"作者回复","comment_id":245225,"uid":"1609687","ip_address":"","utype":1,"ctime":1598966332,"user_name_real":"蒋德钧"}],"discussion_count":11,"race_medal":0,"score":"632959060902","product_id":100056701,"comment_content":"实测老师的例子，长度7位数，共100万条数据。使用string占用70mb，使用hash ziplist只占用9mb。效果非常明显。redis版本6.0.6","like_count":148,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504814,"discussion_content":"赞 实践的态度！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598966332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1768852,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/fd/94/8704d2b0.jpg","nickname":"spoofer","note":"","ucode":"6723F64ACC3F27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322700,"discussion_content":"一个entity16字节，增加100w 就 16 * 100w = 15.2m， 还没有算其他的结果消耗的空间也不等于9mb，难道内部还有压缩机制？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604802091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1124979,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/73/abb7bfe3.jpg","nickname":"husky","note":"","ucode":"E3F170075E86B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1768852,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/fd/94/8704d2b0.jpg","nickname":"spoofer","note":"","ucode":"6723F64ACC3F27","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350525,"discussion_content":"我用了15.7M","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613902867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322700,"ip_address":""},"score":350525,"extra":""}]},{"author":{"id":1113818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/da/01cfbdc6.jpg","nickname":"念","note":"","ucode":"866A800D49C498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351958,"discussion_content":"生成的脚本测试的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614526817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1584786,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2e/92/e1c38ca6.jpg","nickname":"KamTo  Hung","note":"","ucode":"00D5A6479DB784","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340143,"discussion_content":"如果key-value占用不少字节,用string也没额外占用很多内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609916073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124439,"avatar":"https://static001.geekbang.org/account/avatar/00/11/28/57/665a68bf.jpg","nickname":"阿行","note":"","ucode":"9DD700E37103D1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338488,"discussion_content":"取决于二级编码的个数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609299788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332047,"discussion_content":"应该还要统计一下 查询速度的变化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607052397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349913,"discussion_content":"查询速度不会差很多，总共也就遍历1000个数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613628605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332047,"ip_address":""},"score":349913,"extra":""},{"author":{"id":2342014,"avatar":"https://static001.geekbang.org/account/avatar/00/23/bc/7e/c1422d90.jpg","nickname":"打工人的精神领袖","note":"","ucode":"8EC3864768368D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553248,"discussion_content":"hash不需要遍历吧,把10位的图片id取前7位找到数据集合,后三位是压缩列表的索引.相当于两次查找?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645784605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":349913,"ip_address":""},"score":553248,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2342014,"avatar":"https://static001.geekbang.org/account/avatar/00/23/bc/7e/c1422d90.jpg","nickname":"打工人的精神领袖","note":"","ucode":"8EC3864768368D","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":576720,"discussion_content":"你都说了压缩列表了, 还不需要遍历.....","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655748875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553248,"ip_address":""},"score":576720,"extra":""}]},{"author":{"id":2125409,"avatar":"https://static001.geekbang.org/account/avatar/00/20/6e/61/617c2ddf.jpg","nickname":"Stone","note":"","ucode":"FA2A597DA9101A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313235,"discussion_content":"算下来，一条数据占用72字节：一个string的key，是占用8字节，value占用64字节，跟老师的理论分析是一致的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603009763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247178,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1599626053,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"383851715397","product_id":100056701,"comment_content":"一，作者讲了什么？<br>    Redis的String类型数据结构，及其底层实现<br>二，作者是怎么把这事给说明白的？<br>    1，通过一个图片存储的案例，讲通过合理利用Redis的数据结构，降低资源消耗<br><br>三，为了讲明白，作者讲了哪些要点？有哪些亮点？<br>1，亮点1：String类型的数据占用内存，分别是被谁占用了<br>2，亮点2：可以巧妙的利用Redis的底层数据结构特性，降低资源消耗<br>3，要点1： Simple Dynamic String结构体（<br>                  buf：字节数组，为了表示字节结束，会在结尾增加“\\0”<br>                  len： 占4个字节，表示buf的已用长度<br>                  alloc：占4个字节，表示buf实际分配的长度，一般大于len）<br><br>4，要点2： RedisObject 结构体（<br>                   元数据：8字节（用于记录最后一次访问时间，被引用次数。。。）<br>                   指针：8字节，指向具体数据类型的实际数据所在 ）<br><br>5，要点3：dicEntry 结构体（    <br>                  key：8个字节指针，指向key<br>                  value：8个字节指针，指向value<br>                  next：指向下一个dicEntry）<br>6，要点4：ziplist(压缩列表)（<br>                 zlbytes：在表头，表示列表长度<br>                 zltail：在表头，表示列尾偏移量<br>                 zllen：在表头，表示列表中<br>                 entry：保存数据对象模型<br>                 zlend：在表尾，表示列表结束）<br>entry：（<br>              prev_len：表示一个entry的长度，有两种取值方式：1字节或5字节。<br>                     1字节表示一个entry小于254字节，255是zlend的默认值，所以不使用。<br>              len：表示自身长度，4字节<br>              encodeing：表示编码方式，1字节<br>              content：保存实际数据）<br><br>5，要点4：String类型的内存空间消耗<br>①，保存Long类型时，指针直接保存整数数据值，可以节省空间开销（被称为：int编码）<br>②，保存字符串，且不大于44字节时，RedisObject的元数据，指针和SDS是连续的，可以避免内存碎片（被称为：embstr编码）<br>③，当保存的字符串大于44字节时，SDS的数据量变多，Redis会给SDS分配独立的空间，并用指针指向SDS结构（被称为：raw编码）<br>④，Redis使用一个全局哈希表保存所以键值对，哈希表的每一项都是一个dicEntry，每个dicEntry占用32字节空间<br>⑤，dicEntry自身24字节，但会占用32字节空间，是因为Redis使用了内存分配库jemalloc。<br>                    jemalloc在分配内存时，会根据申请的字节数N，找一个比N大，但最接近N的2的幂次数作为分配空间，这样可以减少频繁分配内存的次数<br><br>4，要点5：使用什么数据结构可以节省内存？<br>①， 压缩列表，是一种非常节省内存的数据结构，因为他使用连续的内存空间保存数据，不需要额外的指针进行连接<br>②，Redis基于压缩列表实现List，Hash，Sorted Set集合类型，最大的好处是节省了dicEntry开销<br><br>5，要点6：如何使用集合类型保存键值对？<br>①，Hash类型设置了用压缩列表保存数据时的两个阀值，一旦超过就会将压缩列表转为哈希表，且不可回退<br>②，hash-max-ziplist-entries：表示用压缩列表保存哈希集合中的最大元素个数 <br>③，hash-max-ziplist-value：表示用压缩列表保存时，哈希集合中单个元素的最大长度<br><br>四，对于作者所讲，我有哪些发散性思考？<br>    看了老师讲解，做了笔记，又看了黄建宏写的《Redis 设计与实现》<br>有这样的讲解： <br>        当哈希对象可以同时满足以下两个条件时， 哈希对象使用 ziplist 编码：<br>\t1. 哈希对象保存的所有键值对的键和值的字符串长度都小于 64 字节；<br>\t2. 哈希对象保存的键值对数量小于 512 个；<br><br>五，在将来的哪些场景中，我能够使用它？<br>    这次学习Redis数据结构特性有了更多了解，在以后可以更加有信心根据业务需要，选取特定的数据结构<br>","like_count":90,"discussions":[{"author":{"id":1113597,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","nickname":"注定非凡","note":"","ucode":"80673056E131B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308629,"discussion_content":"这种方式的使用前提，是比较严格的，如果你的key特别分散，使用hash也是没有意义的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601013279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113597,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","nickname":"注定非凡","note":"","ucode":"80673056E131B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308452,"discussion_content":"初始：\n# Memory\nused_memory:727568\nused_memory_human:710.52K\nused_memory_rss:686536\nused_memory_rss_human:670.45K\n\n使用string\n# Memory\nused_memory:73116664\nused_memory_human:69.00M\nused_memory_rss:73075640\nused_memory_rss_human:69.00M\n\n使用hash\n# Memory\nused_memory:15142000\nused_memory_human:14.00M\nused_memory_rss:15100992\nused_memory_rss_human:14.00M","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600955022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2797976,"avatar":"","nickname":"Geek_323a60","note":"","ucode":"CDC276EC255411","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581774,"discussion_content":"关于第四点所述的哈希对象使用 ziplist 的条件应该是默认的吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658988775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2290675,"avatar":"","nickname":"Geek_adb2cc","note":"","ucode":"594312AF07F955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339104,"discussion_content":"总结的相当到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609504893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247672,"user_name":"super BB💨🐷","can_delete":false,"product_type":"c1","uid":2033698,"ip_address":"","ucode":"8D1298E597A2F1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/08/22/ac1b8a34.jpg","comment_is_top":false,"comment_ctime":1599789953,"is_pvip":false,"replies":[{"id":"90995","content":"学习的很仔细！<br><br>《Redis设计与实现》这本书分析的代码是Redis3.0的源码，在Redis3.0.4源码中，SDS结构体里还是用的free表示未使用空间。<br><br>但是应该差不多是Redis3.2.0开始，SDS结构体开始使用alloc字段了。","user_name":"作者回复","comment_id":247672,"uid":"1609687","ip_address":"","utype":1,"ctime":1599882539,"user_name_real":"蒋德钧"}],"discussion_count":4,"race_medal":0,"score":"259297827713","product_id":100056701,"comment_content":"老师，我之前看到《redis设计与实现》中提出SDS 的结构体的中没有alloc字段，书中的提到的是free,用来表示buf数组未使用的字节长度","like_count":61,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505466,"discussion_content":"学习的很仔细！\n\n《Redis设计与实现》这本书分析的代码是Redis3.0的源码，在Redis3.0.4源码中，SDS结构体里还是用的free表示未使用空间。\n\n但是应该差不多是Redis3.2.0开始，SDS结构体开始使用alloc字段了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599882539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245915,"avatar":"https://static001.geekbang.org/account/avatar/00/13/02/db/5d227be5.jpg","nickname":"xiaoyu","note":"","ucode":"477617C15FB5CC","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356938,"discussion_content":"\n\ntypedef char *sds;\n\n/* Note: sdshdr5 is never used, we just access the flags byte directly.\n * However is here to document the layout of type 5 SDS strings. */\nstruct __attribute__ ((__packed__)) sdshdr5 {\n    unsigned char flags; /* 3 lsb of type, and 5 msb of string length */\n    char buf[];\n};\nstruct __attribute__ ((__packed__)) sdshdr8 {\n    uint8_t len; /* used */\n    uint8_t alloc; /* excluding the header and null terminator */\n    unsigned char flags; /* 3 lsb of type, 5 unused bits */\n    char buf[];\n};\nstruct __attribute__ ((__packed__)) sdshdr16 {\n    uint16_t len; /* used */\n    uint16_t alloc; /* excluding the header and null terminator */\n    unsigned char flags; /* 3 lsb of type, 5 unused bits */\n    char buf[];\n};\nstruct __attribute__ ((__packed__)) sdshdr32 {\n    uint32_t len; /* used */\n    uint32_t alloc; /* excluding the header and null terminator */\n    unsigned char flags; /* 3 lsb of type, 5 unused bits */\n    char buf[];\n};\nstruct __attribute__ ((__packed__)) sdshdr64 {\n    uint64_t len; /* used */\n    uint64_t alloc; /* excluding the header and null terminator */\n    unsigned char flags; /* 3 lsb of type, 5 unused bits */\n    char buf[];\n};\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615710802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2178854,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zd9lKwHQVM5REftBjzsjN3iazWTia1vdeJKowqARP6ib4gwYZZicRxHQaKRmX0hrgOanQbW0b6FH8r4dXIexIZFd8w/132","nickname":"目曰目","note":"","ucode":"74C3BD490FE72D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1245915,"avatar":"https://static001.geekbang.org/account/avatar/00/13/02/db/5d227be5.jpg","nickname":"xiaoyu","note":"","ucode":"477617C15FB5CC","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":385939,"discussion_content":"我还在疑惑为何会是44Byte，在看完你这个源码之后，原来是有一个char类型的flags占用了1Byte","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627356856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":356938,"ip_address":""},"score":385939,"extra":""}]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320147,"discussion_content":" 向两位大佬致敬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604275338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245334,"user_name":"吕","can_delete":false,"product_type":"c1","uid":1210890,"ip_address":"","ucode":"8F08E2CB81C4C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","comment_is_top":false,"comment_ctime":1598917522,"is_pvip":false,"replies":[{"id":"90285","content":"这是个好问题。<br><br>其实这个图片ID和存储对象ID对应关系的存储，就是用在分布式存储系统中的一个小的元数据服务，访问模式也比较简单，key-value的PUT、GET就行，但是要求请求响应快。Redis很轻量级，而且速度也快，所以用的Redis。<br><br>MySQL用在这个场景中显得有些太重了，这个场景里面没有关系模型，也没有事务需求和复杂查询，上MySQL不太需要。图片数量再增加时，MySQL的表就太大了，插入效率会降低。","user_name":"作者回复","comment_id":245334,"uid":"1609687","ip_address":"","utype":1,"ctime":1598966066,"user_name_real":"蒋德钧"}],"discussion_count":5,"race_medal":0,"score":"177692576658","product_id":100056701,"comment_content":"我有一个疑惑，老师，文中的案例，这么大的数据量，为什么采用redis这种内存数据库来存储数据么呢，感觉它的业务场景还是不很清楚？直接采用mysql存储会有什么问题么？","like_count":41,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504856,"discussion_content":"这是个好问题。\n\n其实这个图片ID和存储对象ID对应关系的存储，就是用在分布式存储系统中的一个小的元数据服务，访问模式也比较简单，key-value的PUT、GET就行，但是要求请求响应快。Redis很轻量级，而且速度也快，所以用的Redis。\n\nMySQL用在这个场景中显得有些太重了，这个场景里面没有关系模型，也没有事务需求和复杂查询，上MySQL不太需要。图片数量再增加时，MySQL的表就太大了，插入效率会降低。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598966066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2637643,"avatar":"","nickname":"先生","note":"","ucode":"85B89FAF2519BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564975,"discussion_content":"主键为hash","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650366411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2637643,"avatar":"","nickname":"先生","note":"","ucode":"85B89FAF2519BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564973,"discussion_content":"可以使用mysql将表的存储引擎改完hash更快更可靠","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650366383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557599,"discussion_content":"把redis当作数据库使用，不是还要考虑数据可靠性？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647876654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1295126,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erw2xoaJngrKibcGm7kHgpoTuoIZHvSQu0nhvib9ibEib4X4orXjbjUlCMr4CRLp7om0XU7NS61MTfkLA/132","nickname":"贾博岩","note":"","ucode":"52E748E772C2D2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550297,"discussion_content":"如果没有特别高的查询效率上的要求，也没有保存数据事务上的要求，使用mongodb也可以的，MongoDB可以存的数据量也很大，mysql存这么大的数据，需要考虑分库分表的需求太高了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644477803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253252,"user_name":"吴永祺","can_delete":false,"product_type":"c1","uid":1169431,"ip_address":"","ucode":"294ADA49541AAE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d8/17/367943f4.jpg","comment_is_top":false,"comment_ctime":1602663298,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"117566780290","product_id":100056701,"comment_content":"hset 1101000 060 3302000080 操作为何只占用16字节？哈希键（060）、值（3302000080）两者各占用一个entry，按文中介绍，应该至少占用28字节。<br><br>其中原因，我认为很可能是文中对ziplist entry的介绍有误，参考下面GitHub文章，entry中并没有len字段，entry长度由encoding表示。所以例子中虽然创建两个entry，但总长度是小于16的。<br><br>参考：https:&#47;&#47;github.com&#47;zpoint&#47;Redis-Internals&#47;blob&#47;5.0&#47;Object&#47;hash&#47;hash_cn.md","like_count":27,"discussions":[{"author":{"id":1322247,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/07/1f6274fd.jpg","nickname":"🌰🌰🌰","note":"","ucode":"F4135846A0FB86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351802,"discussion_content":"你解决了我的困惑。应该是文中有误，如果没有 len 字段就应该正确了。\nint_32 4字节 10位数  是 10亿级别，有符号 int 能表示 21 亿。\nkey (1 + 1 + 4 + 2(8字节对齐)) + value (1 + 1 + 4 + 2 )  = 16 字节","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1614440898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2720577,"avatar":"https://static001.geekbang.org/account/avatar/00/29/83/41/53fd3ba1.jpg","nickname":"gimtom","note":"","ucode":"1AF1A7D777F590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1322247,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/07/1f6274fd.jpg","nickname":"🌰🌰🌰","note":"","ucode":"F4135846A0FB86","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539516,"discussion_content":"试了一下 如value 123456789123456还是为16","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639735668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351802,"ip_address":""},"score":539516,"extra":""},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1322247,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/07/1f6274fd.jpg","nickname":"🌰🌰🌰","note":"","ucode":"F4135846A0FB86","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554184,"discussion_content":"key应该是1+1+1(8位整数)+字节对齐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646243296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351802,"ip_address":""},"score":554184,"extra":""},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2720577,"avatar":"https://static001.geekbang.org/account/avatar/00/29/83/41/53fd3ba1.jpg","nickname":"gimtom","note":"","ucode":"1AF1A7D777F590","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554185,"discussion_content":"123456789123456是64位整数，value的content占8字节 key=1+1+1 value=1+1+8","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646243400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539516,"ip_address":""},"score":554185,"extra":""}]},{"author":{"id":1926222,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/64/4e/83c61c7f.jpg","nickname":"靓仔","note":"","ucode":"077A290A2DCF42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579152,"discussion_content":"大哥 你好好看看文章啊 key value  都是RedisObject啊 再看 value 为ziplist的数据结构里每个entry的结构 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657200364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1473953,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7d/a1/d03c445b.jpg","nickname":"熊猫拍板砖","note":"","ucode":"C0F4BBE4AE5C88","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387700,"discussion_content":"你好，ziplist 的 entry 是有 len 这个字段的，要以源码为主，https://github.com/redis/redis/blob/unstable/src/ziplist.c","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628352672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1125628,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2c/fc/0264d511.jpg","nickname":"creep","note":"","ucode":"9C6C185AB9CA21","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1473953,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7d/a1/d03c445b.jpg","nickname":"熊猫拍板砖","note":"","ucode":"C0F4BBE4AE5C88","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":400717,"discussion_content":"zlentry结构上有注释写着：\n/* We use this function to receive information about a ziplist entry.\n * Note that this is not how the data is actually encoded, is just what we\n * get filled by a function in order to operate more easily. */","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633397950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387700,"ip_address":""},"score":400717,"extra":""},{"author":{"id":2948634,"avatar":"","nickname":"Geek_275fa9","note":"","ucode":"E08AB55F59EF59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1473953,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7d/a1/d03c445b.jpg","nickname":"熊猫拍板砖","note":"","ucode":"C0F4BBE4AE5C88","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":557753,"discussion_content":"一会儿说没有 一会儿说有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647955451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387700,"ip_address":""},"score":557753,"extra":""}]}]},{"had_liked":false,"id":245425,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1065310,"ip_address":"","ucode":"E5D21F2A3359CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/5e/9d2953a3.jpg","comment_is_top":false,"comment_ctime":1598942205,"is_pvip":false,"discussion_count":36,"race_medal":0,"score":"83203320829","product_id":100056701,"comment_content":"hset 1101000 060 3302000080<br>这条记录只消耗 16 字节没明白，压缩列表保存一个对象需要 14 字节，060、3302000080 都需要保存，那应该至少大于 28 字节","like_count":19,"discussions":[{"author":{"id":1106418,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e1/f2/c3aef303.jpg","nickname":"Ween","note":"","ucode":"151822D02A107B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334422,"discussion_content":"首次使用 hset 1101000 060 3302000080，dictObject 32bytes + 2个redisObject 32bytes(key 和value各一个) + ziplist的zlbyte、zltail、zllen、zlendg共8bytes + 1个entry 16bytes。共88bytes\n下次添加 hset 1101000 061 3302000081，只需要1个entry 16bytes","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1607843265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1649662,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2b/fe/7925eb7e.jpg","nickname":"pdf","note":"","ucode":"A44250955878BB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1106418,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e1/f2/c3aef303.jpg","nickname":"Ween","note":"","ucode":"151822D02A107B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336094,"discussion_content":"061怎么存的？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608475373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334422,"ip_address":""},"score":336094,"extra":""},{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1649662,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2b/fe/7925eb7e.jpg","nickname":"pdf","note":"","ucode":"A44250955878BB","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":370023,"discussion_content":"下标","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619254175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336094,"ip_address":""},"score":370023,"extra":""},{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387764,"discussion_content":"是这样么。。看源码是分别在ziplist的两个entry中存啊。怎么就只占16字节了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628406164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":370023,"ip_address":""},"score":387764,"extra":""}]},{"author":{"id":1357937,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/71/552e4afb.jpg","nickname":"next station","note":"","ucode":"ABF39067778FD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314513,"discussion_content":"我来稍微解释一下：\n\n注意老师文中的描述“增加一条记录后，内存占用只增加了 16 字节”。是增加，而不是新增。如若新增，那么大小大约为：dictEntry为32字节+数据本身为16字节（不计算压缩列表的描述信息zlbytes、zltail、zllen、zlend），此后再增加，那么将共用一个dictEntry，只是数据本身占用的内存量在增加，故为16字节。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1603164633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1084993,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","nickname":"袁帅","note":"","ucode":"A71A89B9F1BD69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1357937,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/71/552e4afb.jpg","nickname":"next station","note":"","ucode":"ABF39067778FD6","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":327713,"discussion_content":"value 增加一条，是一个entry 16个字节，那key是怎么存的，不占用字节码？","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1605924786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":314513,"ip_address":""},"score":327713,"extra":""},{"author":{"id":2212143,"avatar":"https://static001.geekbang.org/account/avatar/00/21/c1/2f/5c8167aa.jpg","nickname":"油纸伞","note":"","ucode":"C2655B9F8874E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1084993,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","nickname":"袁帅","note":"","ucode":"A71A89B9F1BD69","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":327784,"discussion_content":"同问\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605948084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327713,"ip_address":""},"score":327784,"extra":""},{"author":{"id":1102838,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/f6/d9ecf4ea.jpg","nickname":"小睡睡","note":"","ucode":"049091D752DE29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1357937,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/71/552e4afb.jpg","nickname":"next station","note":"","ucode":"ABF39067778FD6","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":368055,"discussion_content":"不是吧  前7位不同  所以不是共用一个 dictEntry吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618553032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":314513,"ip_address":""},"score":368055,"extra":""}]},{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303755,"discussion_content":"刚才测试了下，新增一个hash类型键值都是long类的数据，确实只增加了16b；按理来说，如果压缩列表在保存键值对类型的数据时，如果键和值都分配一个entry，那么就需要28，当然实际是分配32；但是跟我测试的并不相符；所以我猜测压缩列表在保存键值对时，可能另外使用了什么手段来进一步压缩空间","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1599373659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554187,"discussion_content":"老师讲解的有问题，ziplist entry的结构应该是 https://github.com/zpoint/Redis-Internals/blob/5.0/Object/hash/hash_cn.md\n没有len这个字段","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1646243771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303755,"ip_address":""},"score":554187,"extra":""}]},{"author":{"id":1309908,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fc/d4/743d3f02.jpg","nickname":"Anthony","note":"","ucode":"9E0C98A9123365","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302623,"discussion_content":"老师的意思是在前面dictEntry键相同，插入后面value键值对的情况下，每次插入，增长的是16字节，其实这个在本机上做个实验就可以看的出","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1598972277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1309908,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fc/d4/743d3f02.jpg","nickname":"Anthony","note":"","ucode":"9E0C98A9123365","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303118,"discussion_content":"没理解，可以举例说明下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599144681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302623,"ip_address":""},"score":303118,"extra":""},{"author":{"id":1508662,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqic8BwOdWJDVBy2H7X7N77ha6mm2kkJOaBqqcSBfphhTYv16KKuhBicN08pAxYmShTJYKMMwrDs6iaw/132","nickname":"Geek_51cc93","note":"","ucode":"DB1588A47E8B32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1309908,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fc/d4/743d3f02.jpg","nickname":"Anthony","note":"","ucode":"9E0C98A9123365","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306430,"discussion_content":"老师没表达清楚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600266843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302623,"ip_address":""},"score":306430,"extra":""},{"author":{"id":2342029,"avatar":"","nickname":"Geek_f6a7c7","note":"","ucode":"3927E94C25A552","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332120,"discussion_content":"hset 1101000 060 3302000080 , set  1101000要占用32byte， set 060 3302000080  16byte，但是&#34;060 3302000080&#34;只是ziplist中的一个entry,增加一个entry是16byte没毛病，一个ziplist还还有zlbyte,zldetail,zllen,zlend等属性也要占用内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607069465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303118,"ip_address":""},"score":332120,"extra":""}]},{"author":{"id":2950829,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/06/ad/38301d7f.jpg","nickname":"飘絮","note":"","ucode":"F350A5512CF35C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561133,"discussion_content":"这块确实没搞明白，fieldkey和fieldvalue到底是怎么存的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1649559177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1889877,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/d6/55/2b922033.jpg","nickname":"听风","note":"","ucode":"67EF7749380FBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337079,"discussion_content":"，网上说 ziplist key value 分两个 entry 来存，但是这样子就是32 字节呀，老师这说的不细致\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608793026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1889877,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/d6/55/2b922033.jpg","nickname":"听风","note":"","ucode":"67EF7749380FBE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387762,"discussion_content":"所以为啥实践中16啊。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628406111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337079,"ip_address":""},"score":387762,"extra":""},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1889877,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/d6/55/2b922033.jpg","nickname":"听风","note":"","ucode":"67EF7749380FBE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554189,"discussion_content":"fieldkey和fieldvalue各一个entry，hset时，先把fieldkey放到ziplist表尾，然后再放fieldvalue。之所以是16字节，是老师讲解的有问题，ziplist entry的结构应该是 https://github.com/zpoint/Redis-Internals/blob/5.0/Object/hash/hash_cn.md\n没有len这个字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646243979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337079,"ip_address":""},"score":554189,"extra":""}]},{"author":{"id":1525522,"avatar":"https://static001.geekbang.org/account/avatar/00/17/47/12/2c47bf36.jpg","nickname":"Geek_2b3614","note":"","ucode":"6208AB2C5FD4C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304648,"discussion_content":"同问，不明白啊！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599634780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589246,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3f/fe/35d1afbd.jpg","nickname":"阿鸡","note":"","ucode":"F181422D4EB444","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538871,"discussion_content":"是的，这块根本没讲清楚好吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639544285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373922,"discussion_content":"往后看，老师最后举例为啥取后三位，因为最大1000个数量，对比redis里的配置，也可以推导出其实压缩链表的entry是统一存redis ht的field和value","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620915987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387760,"discussion_content":"他问的是在ziplist里，按老师讲的光村value就花了1+4+1+8，并且用16字节存了，那这个hash结构的filed 060存哪了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628406032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":373922,"ip_address":""},"score":387760,"extra":""},{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387761,"discussion_content":"再源码中，是连续的两个entry分别存field和value。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1628406084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":373922,"ip_address":""},"score":387761,"extra":""},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554188,"discussion_content":"fieldkey和fieldvalue各一个entry，hset时，先把fieldkey放到ziplist表尾，然后再放fieldvalue。之所以是16字节，是老师讲解的有问题，ziplist entry的结构应该是 https://github.com/zpoint/Redis-Internals/blob/5.0/Object/hash/hash_cn.md\n没有len这个字段","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1646243969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387761,"ip_address":""},"score":554188,"extra":""}]},{"author":{"id":1113883,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/1b/09b4d12f.jpg","nickname":"花开季末","note":"","ucode":"5D44075AEB737D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329260,"discussion_content":"同问，请问你明白了吗⊙ω⊙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606354532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1113883,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/1b/09b4d12f.jpg","nickname":"花开季末","note":"","ucode":"5D44075AEB737D","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":554190,"discussion_content":"fieldkey和fieldvalue各一个entry，hset时，先把fieldkey放到ziplist表尾，然后再放fieldvalue。之所以是16字节，是老师讲解的有问题，ziplist entry的结构应该是 https://github.com/zpoint/Redis-Internals/blob/5.0/Object/hash/hash_cn.md\n没有len这个字段","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1646243985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329260,"ip_address":""},"score":554190,"extra":""}]}]},{"had_liked":false,"id":245727,"user_name":"蓝魔丶","can_delete":false,"product_type":"c1","uid":1219438,"ip_address":"","ucode":"2AE4359E263558","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","comment_is_top":false,"comment_ctime":1599035945,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"53138643497","product_id":100056701,"comment_content":"老师，测试环境：redis5.0.4<br>1.实践采用String方案：set 1101000052 3301000051，查看内存增加的72，而不是64，是为什么？<br>2.实践采用Hash方案：hset 1101000 060 3302000080 查看内存增加88，再次添加key-value，才是满足增加16","like_count":12,"discussions":[{"author":{"id":2108971,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ddHq6BGjrZhgYx6KZsRMKPQjpCZnVPD7L3PVWNH7nnOPPwC8cfvRSbuseTeHSEpuAiagtAfOibfMRuRRYktFwqnA/132","nickname":"Geek_d7d7d1","note":"","ucode":"C9C9BB75105A62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367797,"discussion_content":"set 1101000052 3301000051，我redis.3.2.1增加的是80","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618471338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2307575,"avatar":"https://static001.geekbang.org/account/avatar/00/23/35/f7/79bed519.jpg","nickname":"大懒王","note":"","ucode":"1C01131B61DEEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329500,"discussion_content":"我的也是，首次hset，内存增加的是128，再次hset，增加16。所以我猜首次应该是包含申明了这个哈希表本身的一些信息吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606394392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1747184,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","nickname":"第四单元","note":"","ucode":"3ED9D553E1DE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2307575,"avatar":"https://static001.geekbang.org/account/avatar/00/23/35/f7/79bed519.jpg","nickname":"大懒王","note":"","ucode":"1C01131B61DEEC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368687,"discussion_content":"首次hset时要申请全局哈希表中的dictEntry（文中说了要32字节），还有当前操作的哈希表RedisObject的一些数据，内存自然就增加的多了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1618802485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329500,"ip_address":""},"score":368687,"extra":""}]},{"author":{"id":2224520,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f1/88/cca5335f.jpg","nickname":"神清气爽海波东","note":"","ucode":"E5F45675DC059F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538275,"discussion_content":"哈希表也要用地方的。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639393171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110189,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/ad/653db0f4.jpg","nickname":"王九荣","note":"","ucode":"3C87DF4F7CEE10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388257,"discussion_content":"我的6.0.6,用string时增加的是80，用hash时第一次增加是96，第二次是16","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628671303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2313353,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4c/89/82a3ee04.jpg","nickname":"going","note":"","ucode":"3AA83F9B07BE8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342073,"discussion_content":"别忘了hash还有自己本身的一些元信息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610590199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267865,"user_name":"Hm_","can_delete":false,"product_type":"c1","uid":1124495,"ip_address":"","ucode":"24C176E95EEA3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/28/8f/f4d14c03.jpg","comment_is_top":false,"comment_ctime":1607956677,"is_pvip":false,"replies":[{"id":"98128","content":"dictEntry是Redis全局哈希表中的表项，包含了key和value的指针，这里的value可以是String，List，Hash等数据类型。<br><br>你说的hash结构最外层的key，如果是指全局哈希表中的key的话，指向key的指针是已经包含在dictEntry这个结构中了，同时key本身的数据结构是RedisObject。","user_name":"作者回复","comment_id":267865,"uid":"1609687","ip_address":"","utype":1,"ctime":1609170622,"user_name_real":"蒋德钧"}],"discussion_count":3,"race_medal":0,"score":"48852596933","product_id":100056701,"comment_content":"老师有个地方不是很理解，文中讲到String需要dictEntry来保存键值关系，那么hash结构最外层的那个key没有dictEntry来维护吗？因为我记得之前讲得Redis是用一个大的hash来维护所有的键值对的，所以感觉这和dictEntry所占用的内存是一样的吧","like_count":11,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511768,"discussion_content":"dictEntry是Redis全局哈希表中的表项，包含了key和value的指针，这里的value可以是String，List，Hash等数据类型。\n\n你说的hash结构最外层的key，如果是指全局哈希表中的key的话，指向key的指针是已经包含在dictEntry这个结构中了，同时key本身的数据结构是RedisObject。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1609170622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1622448,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","nickname":"苏彧","note":"","ucode":"C016B28DF7449C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":558210,"discussion_content":"老师 这等于是抵消了是吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648136289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":511768,"ip_address":""},"score":558210,"extra":""}]},{"author":{"id":1622448,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","nickname":"苏彧","note":"","ucode":"C016B28DF7449C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558215,"discussion_content":"这个你理解了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648136725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246042,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1599142217,"is_pvip":false,"replies":[{"id":"90439","content":"其实，在Redis的设计和使用上，是一个典型的“系统”思维，也就是权衡（trade-off），根据自己的业务场景、数据量、访问特征，来进行选择。<br>我们自己做系统研发，这是个核心思想 ：）","user_name":"作者回复","comment_id":246042,"uid":"1609687","ip_address":"","utype":1,"ctime":1599180479,"user_name_real":"蒋德钧"}],"discussion_count":3,"race_medal":0,"score":"44548815177","product_id":100056701,"comment_content":"“在节省内存空间方面，哈希表就没有压缩列表那么高效了”<br>在内存空间的开销上，也许哈希表没有压缩列表高效<br>但是哈希表的查询效率，要比压缩列表高。<br>在对查询效率高的场景中，可以考虑空间换时间<br><br>","like_count":10,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505043,"discussion_content":"其实，在Redis的设计和使用上，是一个典型的“系统”思维，也就是权衡（trade-off），根据自己的业务场景、数据量、访问特征，来进行选择。\n我们自己做系统研发，这是个核心思想 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599180479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1298139,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ce/db/bb1821b3.jpg","nickname":"王      慈","note":"","ucode":"EACC3D086674D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303328,"discussion_content":"要是硬说的话, 在压缩列表 entry 长度限制为小于某固定值时, 这个遍历查询也是 O(1) 的, 所以在规模较小时区别不大.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599212162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1298139,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ce/db/bb1821b3.jpg","nickname":"王      慈","note":"","ucode":"EACC3D086674D8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304410,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599567503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303328,"ip_address":""},"score":304410,"extra":""}]}]},{"had_liked":false,"id":245379,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1598928239,"is_pvip":false,"replies":[{"id":"90282","content":"我们是会把图片 ID 的前7位作为键值对的key，Hash集合是键值对的value，在你举的例子中，图片ID 1101000060和1101001060。它们的前7位分别是1101000和1101001，对应了两个键值对。所以，它们图片ID的后3位虽然相同，都是060，也是在两个Hash集合中的，不会冲突的。<br><br>你看看是不是呢？","user_name":"作者回复","comment_id":245379,"uid":"1609687","ip_address":"","utype":1,"ctime":1598965187,"user_name_real":"蒋德钧"}],"discussion_count":10,"race_medal":0,"score":"44548601199","product_id":100056701,"comment_content":"老师，请教下，这样拆分的话，如何重复了咋办呢？<br>以图片 ID 1101000060 和图片存储对象 ID 3302000080 为例，我们可以把图片 ID 的前 7 位（1101000）作为 Hash 类型的键，把图片 ID 的最后 3 位（060）和图片存储对象 ID 分别作为 Hash 类型值中的 key 和 value。<br>比如：两张图片分别为：图片 ID 1101000060 图片存储对象 ID 3302000080；<br>                                     图片 ID 1101001060 图片存储对象 ID 3302000081<br>这个时候最后 3 位（060）的key是冲突的的，但是它的图片存储对象 ID不同。","like_count":10,"discussions":[{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303760,"discussion_content":"只要你的图片id不重复，那么就肯定不会冲突；如果前7位相同，那么后3位肯定不同，也就是一个key下的field没有重复；如果前7位不同，后3位相同；那么就会产生另一个key2，即使key2下的有field跟其他key冲突也无所谓，因为我们要定位一个数据，打的是一套组合拳","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1599374100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1336634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","nickname":"mqray","note":"","ucode":"15664507AD7033","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304190,"discussion_content":"秒呀 我还在想是怎么实现用集合存储单值键值对 还在纳闷这有啥精妙的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599492648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303760,"ip_address":""},"score":304190,"extra":""},{"author":{"id":2169577,"avatar":"","nickname":"Geek_f9d1e9","note":"","ucode":"4336D6A3A957ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307295,"discussion_content":"解释的到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600592493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303760,"ip_address":""},"score":307295,"extra":""},{"author":{"id":2377406,"avatar":"","nickname":"杨毅","note":"","ucode":"189923D892549F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343955,"discussion_content":"不得不赞你一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611217520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303760,"ip_address":""},"score":343955,"extra":""}]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303123,"discussion_content":"其实一般都是这样理解的：Hash类型的键值，其中值由字段名称和字段值组成\n1. 图片ID的前7位（1101000）是 Hash 类型的键\n2. 图片ID的后3位（060）和图片存储对象ID分别是值的字段和字段值","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599144912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504867,"discussion_content":"我们是会把图片 ID 的前7位作为键值对的key，Hash集合是键值对的value，在你举的例子中，图片ID 1101000060和1101001060。它们的前7位分别是1101000和1101001，对应了两个键值对。所以，它们图片ID的后3位虽然相同，都是060，也是在两个Hash集合中的，不会冲突的。\n\n你看看是不是呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598965187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1805805,"avatar":"","nickname":"renee","note":"","ucode":"3821D9296CD19F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342191,"discussion_content":"如果前七位相同呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610611435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2415904,"avatar":"","nickname":"Geek_2c46f4","note":"","ucode":"B322B63772885D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1805805,"avatar":"","nickname":"renee","note":"","ucode":"3821D9296CD19F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365356,"discussion_content":"前七位一样? 后三位一样? 这必然是一张图片了. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617782424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":342191,"ip_address":""},"score":365356,"extra":""}]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302578,"discussion_content":"你这里的 key 已经不一样的，使不同的 hash 了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598964325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1797149,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6c/1d/3e834742.jpg","nickname":"Mr.Cool","note":"","ucode":"1347C0F297F0B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302531,"discussion_content":"如果没理解错的话，由于前面7位不一致，那么key对应的hash也是不一样的。针对这种情况，应该是产生了两组 key->hash 的数据（两个压缩列表）。只不过这两组hash里的key都是060。当然希望老师给出最正确的答复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598946291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291467,"user_name":"aworker","can_delete":false,"product_type":"c1","uid":1896933,"ip_address":"","ucode":"DCF95BC2087D35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZBe7lmwPf33yS7btnXuwv2bvfC7zfKibcZfPUQKTlbJgZeKY0wX70LUsej8EX14rYcCZ5Gk02YTQ/132","comment_is_top":false,"comment_ctime":1620297250,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"40275002914","product_id":100056701,"comment_content":"看好多小伙伴里面对embstr的临界点是44字节的算法有疑问，给大家解释下：<br><br>首先说下redisObject的数据结构包含如下字段：<br>type：表明redisobjct的类型如果string，hash，set等，占4字节。<br>encoding：编码类型，占4字节。<br>lru:记录此object最近被访问的时间数据和过期逻辑有关，4字节。<br>refcount:记录指向此object的指针数量，用来表示不同指针相同数据的情况，4个字节。<br>ptr：真正指向具体数据的指针，8字节。<br><br>在3.2版本以前的sds结构如下：<br>len：表示sds中buf已经使用的长度，4个字节。<br>free：表示sds中buf没有使用的长度，4个字节。<br>buf：数组，真正存储数据的地方，会有1字节的‘\\0’，表示数据的结尾。<br><br>如果想让string类型用embstr编码那么需要满足如下条件：<br><br>64-16（redisObjct除去ptr后最小使用的内存）-（4+4+1）（sds最小内存需求）=39 。<br><br>redis 3.2及其以后的版本sds会根据实际使用的buf长度，采用不同的sds对象表示，这里只说下小于等64字节的sds对象结构：<br>len：表示buf的使用长度，1字节。<br>alloc：表示分配给buf的总长度，1字节。<br>flag：表示具体的sds类型，1个字节。<br>buf：真正存储数据的地方，肯定有1字节的‘\\0’表示结束符。<br><br>如果想让redis3.2以后的版本使用embstr编码的string需要buf满足的最大值为：<br>64-16（redisObject最小值）-（1+1+1+1）（sds最小用的内存）= 44字节。<br><br>这里需要澄清一点：相较于raw编码，当redis采用 embstr编码的时候，redis会吧redisObjct的元数据和sds连续存在，这就节约了ptr指针的内存使用，这也是redis要分embstr和raw的原因。老师的图中embstr编码也有8字节的指针，这个应该是不准确的。<br><br>随着版本升级也能看出redis开发者对高效数据结构的极致追求：在3.2版本以前的sds中用4个字节表示buf的已用长度和未使用长度，但对于embstr编码的sds是有些浪费的，因为buf最大值是39字节，1字节就可以表示255的长度了，所以3.2以后的embstr编码的sds的 len和alloc都是一个字节。<br><br><br><br>","like_count":10,"discussions":[{"author":{"id":1815374,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4ibibOsboHycltqqicSIkm9eibSBu86BRNc0LQnTRTMEPGDvJXYpBicWOW4srMt7c9iaUT7b5mTmicgkjw/132","nickname":"Geek_6a58c7","note":"","ucode":"37900229ED9B3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536489,"discussion_content":"请问一下，sds数据结构中的flag作用是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638795083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1411419,"avatar":"https://static001.geekbang.org/account/avatar/00/15/89/5b/b014ce14.jpg","nickname":"小五","note":"","ucode":"B7B1F121837CD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379341,"discussion_content":"探讨下！\n当 Redis 采用 embstr 编码时，虽然 redisObject 和 sdshdr 两个结构在一块连续的内存空间，但是两者都有各自单独的内存空间，因此 ptr 指针是省不了的。字符串对象保存长整数时，是直接将数值保存在 redisObject 接口的 ptr 属性里面，ptr指针充当变量保存数值的角色。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623835570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1896933,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZBe7lmwPf33yS7btnXuwv2bvfC7zfKibcZfPUQKTlbJgZeKY0wX70LUsej8EX14rYcCZ5Gk02YTQ/132","nickname":"aworker","note":"","ucode":"DCF95BC2087D35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1411419,"avatar":"https://static001.geekbang.org/account/avatar/00/15/89/5b/b014ce14.jpg","nickname":"小五","note":"","ucode":"B7B1F121837CD9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383400,"discussion_content":"感觉int编码时，不是直接用ptr的8byte来存储int值，理由如下：\nredisObject的最小元数据量为16byte（type（4bit）+encoding（4bit）+lru（24bit）+refcount（4byte）+ptr（8byte）），\nredis3.2以后sds的embstr编码方式最大的buf为64-16（redisobject元数据）-（1（len）+1（alloc）+1（flag）+1（end flag））=44byte\n如果int编码把ptr作为int值的存储位置，那么对应到embstr时也可以把ptr的8byte给sds使用，那么buf最大值为 44+8=52byte了，但是我们只要这个最大值是44不是52，对于embstr，ptr没有使用，推测int编码时ptr也没有使用，保证代码逻辑的一致性，降低负责度。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626079669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":379341,"ip_address":""},"score":383400,"extra":""}]}]},{"had_liked":false,"id":245509,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1598963310,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"40253668974","product_id":100056701,"comment_content":"使用 http:&#47;&#47;www.redis.cn&#47;redis_memory&#47; 这个网站来计算 文章中 一亿张图片ID消耗的内存， 为什么得出来 9269.71M,  9点多个 G呢？ 1亿个 string , string 的 key 和 value 分别是 8个 字节<br>","like_count":9},{"had_liked":false,"id":245795,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1599055637,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"35958794005","product_id":100056701,"comment_content":"虽然压缩列表可以节约内存，但是set和get的时间复杂度为O(N)，一个时间换空间的方法。","like_count":8,"discussions":[{"author":{"id":1044220,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ee/fc/e1078d9c.jpg","nickname":"Donne","note":"","ucode":"C24CEEE55DF24E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384465,"discussion_content":"ziplist 是 1000，时间复杂度不能算 O(N) 吧","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1626604855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2916835,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTId5SbkueSscicsj3Glar0cicCOJruyy69iaRsiaFg6N9ywT1LfSA1oIDkHRWECVLCcSy9BSqictLNJoHw/132","nickname":"Geek_674401","note":"","ucode":"C1799DB3C750AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578044,"discussion_content":"一亿和1000相比几乎可以近似O(1)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1656485460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576721,"discussion_content":"O(1000)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655749501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250694,"user_name":"wwj","can_delete":false,"product_type":"c1","uid":1053787,"ip_address":"","ucode":"B98AE5F5D85A87","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzvaL724GwtzZ5mcldUnlicicSlI8BXL9icRZbUOB10qjRMlmog7UTvwxSBHXagnPGGR1BYdjWcGGSg/132","comment_is_top":false,"comment_ctime":1601198014,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27371001790","product_id":100056701,"comment_content":"这样是不是有点本位倒置了，缓存本来就是以空间换时间的，这样节省了空间，但是时间复杂度也上去了","like_count":6,"discussions":[{"author":{"id":1446512,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/70/10faf04b.jpg","nickname":"Lywane","note":"","ucode":"2B0027AA069CE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311276,"discussion_content":"寻找两者之间的平衡","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602296141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1749088,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b0/60/5dca5629.jpg","nickname":"希爱望","note":"","ucode":"FC357FDA3BD726","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331448,"discussion_content":"老师把redis当数据库用了，如果当缓存用的话，是需要设置缓存失效时间，以及有持久化数据库来兜底缓存miss，而老师的例子中显然没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606877074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328218,"discussion_content":"但是也不能以太多的空间，换取少量的时间，不划算，优化后的方案，算是找一个划算的平衡点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606108014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245093,"user_name":"MClink","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","comment_is_top":false,"comment_ctime":1598833485,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27368637261","product_id":100056701,"comment_content":"老师，底层数据结构的转换是怎么实现的呢？是单纯的开一个新的数据结构再把数据复制过去吗？再释放之前的数据结构的内存，复制过程中有修改值的话要怎么处理，复制过程中不就两倍内存消耗了","like_count":6},{"had_liked":false,"id":245089,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1598831942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27368635718","product_id":100056701,"comment_content":"看了Redis设计与实现，有讲SDS这一块，对于老师分析的内容，自己心里有印象，再结合老师今天的实践案例，前面的知识还没有吃透<br>😂😂","like_count":6},{"had_liked":false,"id":336618,"user_name":"HappyHasson","can_delete":false,"product_type":"c1","uid":2911084,"ip_address":"","ucode":"B84CC43E349CFA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","comment_is_top":false,"comment_ctime":1646244603,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23121081083","product_id":100056701,"comment_content":"hset 1101000 060 3302000080  为什么这条语句执行之后内存增加了16B？<br><br>老师的前提是执行命令之前已经有了hash key 1101000。然后插入fieldkey:060   fieldvalue:3302000080<br>fieldkey和fieldvalue各分配一个ziplist entry，hset时，会调用ziplistPush函数先把fieldkey放到ziplist表尾，然后再放fieldvalue。之所以是16字节，是老师讲解的有点问题。ziplist entry包含三个字段previous_entry_length、encoding、content。没有老师说的len这个固定4字节的字段<br>previous_entry_length取值规则：https:&#47;&#47;github.com&#47;zpoint&#47;Redis-Internals&#47;blob&#47;5.0&#47;Object&#47;hash&#47;prevlen.png<br>encoding取值规则：https:&#47;&#47;github.com&#47;zpoint&#47;Redis-Internals&#47;blob&#47;5.0&#47;Object&#47;hash&#47;encoding.png<br>所以这个命令的fieldkey占用字节：1+1+1=3、fieldvalue占用字节：1+1+8(64位整数表示3302000080)","like_count":5,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572744,"discussion_content":"老师说的len应该是抽象出来的，ziplist没有明确的数据结构定义，是一段连续的内存拼接，就拿你提到的这几张图来说，完全可以把encoding的前面一段说成encoding，后面一段说成len\n至于老师说的len=4字节，确实是不对的，这要根据不同数据取不同长度\n另外060可不会被当成整数哦，会被当成3字节的字符串，来自源码的一段注释：First digit should be 1-9, otherwise the string should just be 0.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652945092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249247,"user_name":"我不用网名","can_delete":false,"product_type":"c1","uid":1066411,"ip_address":"","ucode":"B1C921455BF44F","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/ab/7dec2448.jpg","comment_is_top":false,"comment_ctime":1600522787,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23075359267","product_id":100056701,"comment_content":"看了很久, 一直没有静下心来仔细品味, 今天又重新将课程内容梳理了一遍,有几个问题, 希望老师能解答一下:<br>1.  redis把sds使用raw编码还是embstr编码的临界值是44, 这个44是如何计算出来的呢? 按文档中sds len(4) + alloc(4) + 1(\\0)  + redisObject(元素数据8+指针8) = 25, jemalloc 将超过64字节的使用raw编码, 这样的话, buff 的最大值 64-25=39.    这也是我看网上其它资料时写的reids.3.2版本之前使用的值. 3.2及以后使用44.  老师文档中sds各字段的大小是不是标错了?<br>2.  hash类型使用ziplist存储数据时, key&#47;value的映射关系是发何保持的呢?<br>     我自己有如下猜想,存储结构是不是这样?<br>     zlbytes zltail zllen key1 value1 key2 value2 ...  zlend<br>     如果是这样存储的话, 又有以下两个问题困绕着我:<br>     在hash中通过某个key获取对应value时,需要遍历整个压缩列表吧. 这会不会有性能影响?<br>     key与value都紧挨着存储, entry里面并没有字段用于标记该entry是key还是value, 假如 key与value是相同的字段串时, 即有两个相同的entry, reids如何识别哪个是key,哪个是value呢?<br>     对于后面一个问题,我自己可以猜想一下的, 就是key与value是成对出现的, key 永远是在寄数位 value永远是在偶数位. 这样也可以分辨, 如果是我来实现的话,可能会这样. 但我不懂c,没看过源码, 请老师专业解答我才放心.<br>    感谢!<br>     ","like_count":5,"discussions":[{"author":{"id":1446512,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/70/10faf04b.jpg","nickname":"Lywane","note":"","ucode":"2B0027AA069CE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311981,"discussion_content":"确实，按文章中的sds计算出来应该是39；新版的sds做了优化，len、cap以及新增的flag使用的都是int8类型，只占用1个字节，这样64-16（ReadObj头部）-3（sds头部）-1（buf末尾\\0）= 44。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1602555417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299419,"user_name":"zachary","can_delete":false,"product_type":"c1","uid":2640551,"ip_address":"","ucode":"B22B95FCECD6E7","user_header":"https://static001.geekbang.org/account/avatar/00/28/4a/a7/ab7998b1.jpg","comment_is_top":false,"comment_ctime":1624617857,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18804487041","product_id":100056701,"comment_content":"通过查看redis的源码，sds数据结构这块老师讲的不是很对。可能跟redis的版本有关吧。redis在高版本对sds做了优化，sds将不再直接使用结构体。sds底层通过sdshdr_5, sdshdr_8, sdshdr_16, sdshdr_32, sdshdr_64来实现。这么做的目的明显是为了更加节省空间。以下是源码，版本4.0.9， 文件sds.h。<br><br>typedef char *sds;<br><br>&#47;* Note: sdshdr5 is never used, we just access the flags byte directly.<br> * However is here to document the layout of type 5 SDS strings. *&#47;<br>struct __attribute__ ((__packed__)) sdshdr5 {<br>    unsigned char flags; &#47;* 3 lsb of type, and 5 msb of string length *&#47;<br>    char buf[];<br>};<br>struct __attribute__ ((__packed__)) sdshdr8 {<br>    uint8_t len; &#47;* used *&#47;<br>    uint8_t alloc; &#47;* excluding the header and null terminator *&#47;<br>    unsigned char flags; &#47;* 3 lsb of type, 5 unused bits *&#47;<br>    char buf[];<br>};<br>struct __attribute__ ((__packed__)) sdshdr16 {<br>    uint16_t len; &#47;* used *&#47;<br>    uint16_t alloc; &#47;* excluding the header and null terminator *&#47;<br>    unsigned char flags; &#47;* 3 lsb of type, 5 unused bits *&#47;<br>    char buf[];<br>};<br>struct __attribute__ ((__packed__)) sdshdr32 {<br>    uint32_t len; &#47;* used *&#47;<br>    uint32_t alloc; &#47;* excluding the header and null terminator *&#47;<br>    unsigned char flags; &#47;* 3 lsb of type, 5 unused bits *&#47;<br>    char buf[];<br>};<br>struct __attribute__ ((__packed__)) sdshdr64 {<br>    uint64_t len; &#47;* used *&#47;<br>    uint64_t alloc; &#47;* excluding the header and null terminator *&#47;<br>    unsigned char flags; &#47;* 3 lsb of type, 5 unused bits *&#47;<br>    char buf[];<br>};<br>","like_count":4,"discussions":[{"author":{"id":2948634,"avatar":"","nickname":"Geek_275fa9","note":"","ucode":"E08AB55F59EF59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557738,"discussion_content":"不能说不对 而是版本不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647947750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160144,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/d0/2f2e830b.jpg","nickname":"计冉","note":"","ucode":"2DB618E6A1DDF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385334,"discussion_content":"对，已经和老师说的不一样了，老师的版本可能比较低","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627006162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279221,"user_name":"while (1)等;","can_delete":false,"product_type":"c1","uid":1061991,"ip_address":"","ucode":"BAEC7258D65B69","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","comment_is_top":false,"comment_ctime":1613659665,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"18793528849","product_id":100056701,"comment_content":"老师，压缩列表里的prev_len有什么作用，记录上一个的长度意义在哪？","like_count":4,"discussions":[{"author":{"id":1405755,"avatar":"https://static001.geekbang.org/account/avatar/00/15/73/3b/a7b5ed95.jpg","nickname":"香樟树","note":"","ucode":"0E0E236E716123","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369387,"discussion_content":"因为节点的previous_entry_length属性记录了前一个节点的长度，所以程序可以通过指针运算，根据当前节点的起始地址来计算出前一个节点的起始地址。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1619015153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554039,"discussion_content":"倒序遍历","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646193563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277190,"user_name":"ytyee","can_delete":false,"product_type":"c1","uid":2018869,"ip_address":"","ucode":"05079CE049A8FA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FQQA0icGXUvJZicd7jX1r85MmH2XgpQUlkXNpB2u9OibCc1k3ITJwaqbZm7WQiaT93hWYDRBCJMsThuL62PLTaP5hQ/132","comment_is_top":false,"comment_ctime":1612314395,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"18792183579","product_id":100056701,"comment_content":"老师，这里真不太理解。<br><br>所以，在刚才的二级编码中，我们只用图片 ID 最后 3 位作为 Hash 集合的 key，也就保证了 Hash 集合的元素个数不超过 1000，同时，我们把 hash-max-ziplist-entries 设置为 1000，这样一来，Hash 集合就可以一直使用压缩列表来节省内存空间了。<br><br>这里我不太理解，entries不是指元素的个数吗？跟元数的值的长度有什么关系呢，我用后3位，后4位不都是1个元素吗？","like_count":4,"discussions":[{"author":{"id":2224520,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f1/88/cca5335f.jpg","nickname":"神清气爽海波东","note":"","ucode":"E5F45675DC059F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538276,"discussion_content":"四位不就能到9999了么，那个配置就没用了，就会用哈希存储了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639393407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1405755,"avatar":"https://static001.geekbang.org/account/avatar/00/15/73/3b/a7b5ed95.jpg","nickname":"香樟树","note":"","ucode":"0E0E236E716123","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369389,"discussion_content":"如果使用后4位做为 Hash 集合的 key，则最多会有0000-9999 这10000个key。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619015464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360705,"discussion_content":"蒙圈中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616507565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2383502,"avatar":"https://static001.geekbang.org/account/avatar/00/24/5e/8e/12ca2e15.jpg","nickname":"考拉还没醒","note":"","ucode":"6BCF84324CB730","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350242,"discussion_content":"因为三位数从000到999刚好是1000个数字","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613783501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622754,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/e2/c131e9d6.jpg","nickname":"灯无焰","note":"","ucode":"3FD28BBE1CDBD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347797,"discussion_content":"同问，我也觉得这里表述得不太清楚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612324350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305276,"user_name":"bigben","can_delete":false,"product_type":"c1","uid":1169313,"ip_address":"","ucode":"DBD15A6C8E2590","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","comment_is_top":false,"comment_ctime":1627900302,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10217834894","product_id":100056701,"comment_content":"感觉ziplist这里讲的不对啊，二级索引的key也占空间啊","like_count":2,"discussions":[{"author":{"id":2850942,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/80/7e/b4f2ca40.jpg","nickname":"元永健","note":"","ucode":"8D004C9FC67F33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582668,"discussion_content":"是呀我也不懂，一脸懵逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659583987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2653715,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKib3vNM6TPT1umvR3TictnLurJPKuQq4iblH5upgBB3kHL9hoN3Pgh3MaR2rjz6fWgMiaDpicd8R5wsAQ/132","nickname":"陈阳","note":"","ucode":"C8E676C967D23A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387550,"discussion_content":"我也觉得， 可能是作者认为 例子中的二级索引的key只占3位，还不满一个字节，就忽略不计了吧， 但至少应该说明一下， 不知道我理解的对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628238853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277424,"user_name":"gen","can_delete":false,"product_type":"c1","uid":1312014,"ip_address":"","ucode":"EF889E6CC7BB7F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Etr1TYTsMiazWFoGnReIVP9ic9Na38BFkTOKbdgiaicwBLgHBnS980Xn03FJ1UPWAyiaONEMtyiaU7vNw2RlhSkUsYDQ/132","comment_is_top":false,"comment_ctime":1612409048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10202343640","product_id":100056701,"comment_content":"hash用ziplist实现时，插入键值对的时候，不是应该插入两个entry吗？如果键为三位数，那占用8个字节；值为16个字节，还是需要24个字节的单位。为什么每次插入只增加16个字节呢？","like_count":2},{"had_liked":false,"id":264475,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1300285,"ip_address":"","ucode":"A99C9C890F95E4","user_header":"https://static001.geekbang.org/account/avatar/00/13/d7/3d/a076faf1.jpg","comment_is_top":false,"comment_ctime":1606473413,"is_pvip":false,"replies":[{"id":"97927","content":"这里的prev_len取值情况是指用几个字节来表示prev_len。<br><br>prev_len是表示前一个entry的长度，如果前一个entry的长度小于254字节，那么prev_len就用1个字节来表示。否则的话，prev_len就使用5个字节表示。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608996226,"ip_address":"","comment_id":264475,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10196408005","product_id":100056701,"comment_content":"有大佬能解释下 “prev_len 有两种取值情况：1 字节或 5 字节” 这一句吗？取值的话不应该是具体的某一个值吗？这里取值为1字节或5字节 是啥意思呢？小菜鸟想不太明白。","like_count":2,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510576,"discussion_content":"这里的prev_len取值情况是指用几个字节来表示prev_len。\n\nprev_len是表示前一个entry的长度，如果前一个entry的长度小于254字节，那么prev_len就用1个字节来表示。否则的话，prev_len就使用5个字节表示。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608996226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061991,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","nickname":"while (1)等;","note":"","ucode":"BAEC7258D65B69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350380,"discussion_content":"看了老师的回复，还是不明白什么意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613831413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1498155,"avatar":"https://static001.geekbang.org/account/avatar/00/16/dc/2b/b16aa5b6.jpg","nickname":"intelliYY","note":"","ucode":"375B28CE130CBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1061991,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","nickname":"while (1)等;","note":"","ucode":"BAEC7258D65B69","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":356537,"discussion_content":"prev_len的第一个字节表示一个entry的开始，如果等于255表示列表结束，如果等于254那后四个字节才是prev_len的实际值，如果小于254，那就不需要后四个字节，直接使用这一个字节表示prev_len的实际值","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1615619105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350380,"ip_address":""},"score":356537,"extra":""}]}]},{"had_liked":false,"id":262967,"user_name":"袁帅","can_delete":false,"product_type":"c1","uid":1084993,"ip_address":"","ucode":"A71A89B9F1BD69","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","comment_is_top":false,"comment_ctime":1605927068,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10195861660","product_id":100056701,"comment_content":"hset 1101000 060 3302000080<br><br>增加一条，key(060)  value(3302000080) 都要存储在ziplist中吧<br><br>value(3302000080)  这个entry 占用 14个字节， <br>key(060) 也需要占用8个字节呀 （1+4+1+4）= 10<br>事实上我实践有的时候也有占用24个字节的情况， 但是大部分增加一条占用 16个字节<br>请老师同学们解惑一下呀","like_count":2},{"had_liked":false,"id":248312,"user_name":"13761642169","can_delete":false,"product_type":"c1","uid":1232334,"ip_address":"","ucode":"68137695FC2120","user_header":"","comment_is_top":false,"comment_ctime":1600098278,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10190032870","product_id":100056701,"comment_content":"有个疑问：（测试redis版本6.0.7）<br>执行命令：hset 1101000 060 3302000080，执行之前，通过info memory得到used_memory：353968，第1次执行后，同样得到used_memory：354056，这里增加了88，再一次执行并存储不同的hash key（hset 1101000 061 3302000081），就是老师所分析的16个字节了，那88个字节我分析了下，但始终分析不出来：<br>（1）全局hash的key为8个字节的指针，指向一个dictEntry结构<br>（2）dictEntry占用32个字节<br>（2.1）dictEntry-key指向一个RedisObject结构，占用16个字节（8位元数据+8为long型1101000）<br>（2.2）dictEntry-value指向一个RedisObject结构，占用16个字节（8为元数据+8为指向压缩列表的指针）<br>（3）压缩列表：zlbytes、zltail、zllen、zlend占用4+4+2+1=11个字节；数据entry项：prev_len、len、encoding、content（3302000081）为1+4+1+8=14字节，共计25个字节，而根据jemalloc的分配策略，实际会分配32个字节<br><br>综上，新增加一个只有一个元素的hash表，共计增加：8+32+16+16+32=104，和实际增加的88个字节不等？？？？？","like_count":2,"discussions":[{"author":{"id":1978838,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/31/d6/4bfaa08c.jpg","nickname":"阿川Arc","note":"","ucode":"4D990D6E3152A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367815,"discussion_content":"我觉得是因为ziplist是连续存储的，所以第一次分配的时候是所有数据长度加一起后再根据2的幂次方进行分配，后续添加数据只需要计算key跟value两个entry的长度之和进行2的幂次分配","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618474483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2108971,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ddHq6BGjrZhgYx6KZsRMKPQjpCZnVPD7L3PVWNH7nnOPPwC8cfvRSbuseTeHSEpuAiagtAfOibfMRuRRYktFwqnA/132","nickname":"Geek_d7d7d1","note":"","ucode":"C9C9BB75105A62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367791,"discussion_content":"这里我没明白，hash结构里的061这个key去哪了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618470762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1718746,"avatar":"","nickname":"林新潜","note":"","ucode":"386EA326AD1009","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344523,"discussion_content":"是不是2.1被优化掉了，直接存整型key值？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611485054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2266823,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImStnqqs4z5GTm0HX6AibtvFA54RalYHfiaFwZTBEQ5rCfe46FcLsdEtmH8ePuDHGT9eBj4703aJXA/132","nickname":"Geek_691992","note":"","ucode":"0DE462AE9D75A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321910,"discussion_content":"不精通，个人理解\n（1）这个应该是数组建好的时候就分配好的吧\n（2.2）或许压缩列表和元数据是连续的，不需要指针\n\nzlbytes、zltail、zllen、zlend这几个占用空间是哪里看的呀，源码吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604649893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246905,"user_name":"子非鱼","can_delete":false,"product_type":"c1","uid":1099288,"ip_address":"","ucode":"9D351A6EC8A4B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/18/2a9c0ff6.jpg","comment_is_top":false,"comment_ctime":1599528086,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10189462678","product_id":100056701,"comment_content":"为啥只增了16字节，图片 ID 的前 7 位作为 Hash 类型的键这个不是也要占用空间么","like_count":2},{"had_liked":false,"id":245172,"user_name":"拥有两个端点是线段","can_delete":false,"product_type":"c1","uid":2107278,"ip_address":"","ucode":"92C2F52A5D2846","user_header":"https://static001.geekbang.org/account/avatar/00/20/27/8e/9f1edfc5.jpg","comment_is_top":false,"comment_ctime":1598854594,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10188789186","product_id":100056701,"comment_content":"老师，在字符串长度不超过44字节时是使用embstr编码，那为何规定是44字节呢？","like_count":2,"discussions":[{"author":{"id":1382003,"avatar":"https://static001.geekbang.org/account/avatar/00/15/16/73/c3aa4992.jpg","nickname":"Joker","note":"","ucode":"BD5B1AF491D60C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304204,"discussion_content":"这个我觉得应该是和内存分配器jemalloc有关的，根据small的缓存分配规律，如果分配64B连续空间，理论上在embstr编码上最大存储长度是48B，但是为了刚好转换raw编码之后不要产生更多的碎片（转换后string需要独立开辟新空间）就把embstr的最大限度设置低一点比较合理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599497255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342571,"user_name":"Niverkk","can_delete":false,"product_type":"c1","uid":2179875,"ip_address":"","ucode":"F9220C10107E44","user_header":"https://static001.geekbang.org/account/avatar/00/21/43/23/d98fb8f7.jpg","comment_is_top":false,"comment_ctime":1650349225,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5945316521","product_id":100056701,"comment_content":"老师，按照Redis设计与实现,Hash使用ziplist时 field 和 value要各站一个entry，跟专栏里的不一样，这以哪个为准，如果没有field 的entry了，那是怎么通过filed 找对应的value的，或者说field存哪里去了？","like_count":1,"discussions":[{"author":{"id":2850942,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/80/7e/b4f2ca40.jpg","nickname":"元永健","note":"","ucode":"8D004C9FC67F33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582665,"discussion_content":"对，我也想问这个，他增加了一个value16字节，field呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659583785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315867,"user_name":"书豪","can_delete":false,"product_type":"c1","uid":1068091,"ip_address":"","ucode":"212FBDE59E8457","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/3b/2780fc51.jpg","comment_is_top":false,"comment_ctime":1634026581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5928993877","product_id":100056701,"comment_content":"老师好，我有一个需求就是要把文章id和文章特征向量以key:value的形式保存到一个HASH中，比如Model_all，大约有一万篇文章，value存储的是5000维的特征向量。存的时候是python转为json之后存到redis，然后我用python每次要去获取Model_all存储的这1万篇数据，但获取后要将value向量重新转为python中得dict,这个转换有点耗时，想问一下老师有没有较好的方式不用转换。","like_count":1},{"had_liked":false,"id":309892,"user_name":"科科","can_delete":false,"product_type":"c1","uid":1647304,"ip_address":"","ucode":"7DAE6FE781172E","user_header":"https://static001.geekbang.org/account/avatar/00/19/22/c8/f2892022.jpg","comment_is_top":false,"comment_ctime":1630385495,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5925352791","product_id":100056701,"comment_content":"老师你看大家对于16byte这个问题有很多歧义？能方便解答一下么？","like_count":1},{"had_liked":false,"id":300394,"user_name":"肥猫不开心","can_delete":false,"product_type":"c1","uid":2357566,"ip_address":"","ucode":"FA9204B84913C0","user_header":"https://static001.geekbang.org/account/avatar/00/23/f9/3e/0d5f27c4.jpg","comment_is_top":false,"comment_ctime":1625138443,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"5920105739","product_id":100056701,"comment_content":"老师，为什么我执行set 1101000060 3302000080看到用了80Byte呢。。。","like_count":1,"discussions":[{"author":{"id":1160144,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/d0/2f2e830b.jpg","nickname":"计冉","note":"","ucode":"2DB618E6A1DDF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385333,"discussion_content":"80是对的，64是不正确的，redis接收到请求后，会对请求入参value创建redisObject字符串，此时他的规则是大于44为raw编码，小于等于44位embstr编码，这种场景下，运行时的value是embstr编码格式，尽管他是数值型的，在setCommand函数中，会再次对value进行编码，此时会将redisObject的ptr指针直接赋值3302000080 value值，但是应该是基于内存碎片的考虑，并未释放embstr编码格式下的sds字符串所占用的空间，因此计算公式应该为  32(dictEntry)+16(key sds)+16(value redisObject )+ 16(value sds) = 80byte。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627006102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2708541,"avatar":"","nickname":"LWQ","note":"","ucode":"6500780D16DD04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1160144,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/d0/2f2e830b.jpg","nickname":"计冉","note":"","ucode":"2DB618E6A1DDF3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386794,"discussion_content":"key redisObject  的值呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627805059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":385333,"ip_address":""},"score":386794,"extra":""}]}]},{"had_liked":false,"id":298299,"user_name":"徐周兴","can_delete":false,"product_type":"c1","uid":2368772,"ip_address":"","ucode":"8FE47F29113F50","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/K84ibNDDuAecLVcHPnvSRlYVM9iaRLRfoMs7evBT1ngmYliasqVJvnbLUx3pskF0g3ILKDapOOnXibYq3ue2CEsdTg/132","comment_is_top":false,"comment_ctime":1624005624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5918972920","product_id":100056701,"comment_content":"老师，请教下，hash采用ziplist实现，那么您上面所说的“以图片 ID 1101000060 和图片存储对象 ID 3302000080 为例，我们可以把图片 ID 的前 7 位（1101000）作为 Hash 类型的键，把图片 ID 的最后 3 位（060）和图片存储对象 ID 分别作为 Hash 类型值中的 key 和 value。”是否可以理解为： 前面7位作为hash的键，这个没有个数要求；但是hash的键对应的hash集合采用压缩列表，是对hash集合中的键值对的键个数有要求，需要个数小于hash-max-ziplist-entries，因此采用key的前三位作为hash集合中的键","like_count":1},{"had_liked":false,"id":271867,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1609846061,"is_pvip":false,"discussion_count":2,"race_medal":2,"score":"5904813357","product_id":100056701,"comment_content":"老师，压缩列表这块没有看懂，图上是prev_len、enconding、len、key，但是文字描述是pre_len、enconding、len、content，请问一下key是不是就是content？另外“一个图片的存储对象 ID 所占用的内存大小是 14 字节（1+4+1+8=14”，里面只算了key或者value，请问一下使用压缩表的时候，全局哈希是怎么存储的？","like_count":1,"discussions":[{"author":{"id":1300602,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIbLh86ic9KR6bfGRCYQrxdheqV9R9IDRiaOibFfGUVZiaqVHgwcw4Le2YprVicLKiakStGLfGRibCggBicHw/132","nickname":"KoalaRun1024","note":"","ucode":"7EE284EE743DA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340969,"discussion_content":"我也想了很久，老师这边没讲到。后来我在《redis设计与实现》的8.4节“哈希对象”里找到了答案：“ziplist 编码的哈希对象使用压缩列表作为底层实现， 每当有新的键值对要加入到哈希对象时， 程序会先将保存了键的压缩列表节点推入到压缩列表表尾， 然后再将保存了值的压缩列表节点推入到压缩列表表尾， 因此：保存了同一键值对的两个节点总是紧挨在一起， 保存键的节点在前， 保存值的节点在后”","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1610247200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1300602,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIbLh86ic9KR6bfGRCYQrxdheqV9R9IDRiaOibFfGUVZiaqVHgwcw4Le2YprVicLKiakStGLfGRibCggBicHw/132","nickname":"KoalaRun1024","note":"","ucode":"7EE284EE743DA5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387769,"discussion_content":"按照老师的讲解，光value就14字节，补齐用16存储，那field的空间被老师吃了么。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628407124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340969,"ip_address":""},"score":387769,"extra":""}]}]},{"had_liked":false,"id":270837,"user_name":"wbpIsWin","can_delete":false,"product_type":"c1","uid":1796138,"ip_address":"","ucode":"02E2B370D4C205","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/uVzfFCoHSicB4UgsIic1NBd3aeTaGHWQQiaTXJHTNzM1f0IMkFqq02eEfdHb58IMSL796tkdguGDECnmcb8jV2Uaw/132","comment_is_top":false,"comment_ctime":1609296084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5904263380","product_id":100056701,"comment_content":"dicEntry结构体是否画错了？怎么value指针都同时指向key的redisObject和value的redisObject？","like_count":1},{"had_liked":false,"id":270575,"user_name":"Front","can_delete":false,"product_type":"c1","uid":1565396,"ip_address":"","ucode":"35593EA52F2EA6","user_header":"https://static001.geekbang.org/account/avatar/00/17/e2/d4/ef86ea64.jpg","comment_is_top":false,"comment_ctime":1609163217,"is_pvip":true,"replies":[{"id":"98417","content":"一个数据库可以粗略分成访问接口和底层存储，从访问接口来看，NoSQL和RDBMS还是有区别的，RDBMS是SQL接口，NoSQL是PUT&#47;GET&#47;DELETE&#47;SCAN。但是从底层存储来看，一些NoSQL的存储机制开始被RDBMS采用，例如MySQL就使用RocksDB作为底层的存储引擎，叫做MyRocks。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609720948,"ip_address":"","comment_id":270575,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5904130513","product_id":100056701,"comment_content":"如果你刚好读过Database System Implemenation, 这篇正解释了NoSQL Database越来越像RDBMS","like_count":1,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512675,"discussion_content":"一个数据库可以粗略分成访问接口和底层存储，从访问接口来看，NoSQL和RDBMS还是有区别的，RDBMS是SQL接口，NoSQL是PUT/GET/DELETE/SCAN。但是从底层存储来看，一些NoSQL的存储机制开始被RDBMS采用，例如MySQL就使用RocksDB作为底层的存储引擎，叫做MyRocks。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609720948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264484,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1300285,"ip_address":"","ucode":"A99C9C890F95E4","user_header":"https://static001.geekbang.org/account/avatar/00/13/d7/3d/a076faf1.jpg","comment_is_top":false,"comment_ctime":1606474880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5901442176","product_id":100056701,"comment_content":"在本地实验 zplist  ：  hset 1101000 060 3302000080<br>实验结果为什么是增加了128？<br><br>我本地的设置，并且为了防止之前hash已经转化成了哈希表，我flushall之后又重启了redis服务，是有哪里我没有注意的地方吗？<br>127.0.0.1:6379&gt; config get hash*<br>1) &quot;hash-max-ziplist-entries&quot;<br>2) &quot;512&quot;<br>3) &quot;hash-max-ziplist-value&quot;<br>4) &quot;64&quot;<br>","like_count":1},{"had_liked":false,"id":248906,"user_name":"Geek3443","can_delete":false,"product_type":"c1","uid":2028946,"ip_address":"","ucode":"C6351639FD0633","user_header":"","comment_is_top":false,"comment_ctime":1600353002,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5895320298","product_id":100056701,"comment_content":"老师好，有两个问题想请教：<br>1、我看《Redis设计与实现》entry的结构只包含：previous_entry_length、encoding、content三个字段，没有len字段？<br>2、我实践了一下hset增加一个键值对数据，内存会增加16字节，但是我理解应该是把key的entry和value的entry依次加入压缩链表的尾部，按文章的计算方式key和value的entry分别是16个字节，那最终应该是增加32个字节？<br>","like_count":1,"discussions":[{"author":{"id":2269044,"avatar":"","nickname":"Geek_c21177","note":"","ucode":"7263F004BD88FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318322,"discussion_content":"同样感觉很奇怪，感觉老师讲错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603704820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1067570,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/32/23db38ab.jpg","nickname":"Sunny","note":"","ucode":"FE57B69A9CF91D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307800,"discussion_content":"第一个问题：  encoding字段里面 前几个字节是content类型， 后几个字节是content长度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600762053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246474,"user_name":"楼下小黑哥","can_delete":false,"product_type":"c1","uid":1014680,"ip_address":"","ucode":"453B099B0EE52E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/98/8f1aecf4.jpg","comment_is_top":false,"comment_ctime":1599366619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894333915","product_id":100056701,"comment_content":"有一个问题，hset 1101000 060 3302000080 命令，应该将键 entry 与值的 entry 都增加到了压缩列表，那为什么内存增加大小仅仅是 值 entry 的大小那？<br>做了下实验，同一个 hash 键的前提下，设置值，比如 hset 1101000 160 3302000080<br>有时候内存大小不变。<br>但是有时候内存增加不止 16 ，碰到过 24，也有 32，有点疑惑。<br>这是不是因为内存重新分配，申请内存大了，然后下次增加 entry，就复用上次申请的空间有关那？","like_count":1},{"had_liked":false,"id":246324,"user_name":"阳明","can_delete":false,"product_type":"c1","uid":1052818,"ip_address":"","ucode":"BA0F5AF0E5A27A","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/92/760f0964.jpg","comment_is_top":false,"comment_ctime":1599277711,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5894245007","product_id":100056701,"comment_content":"请问老师，在我们设置hash-max-ziplist-entries为1000的时候，这样每次使用hget查询的时候耗时是不是会增加? 因为压缩列表的查询时间复杂度为O(N)，现在是把N提高到了1000","like_count":1,"discussions":[{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303762,"discussion_content":"可能会有所增加。压缩列表的查找算法虽然时间复杂度是O(n)，但这里也就1000个entries，内存中遍历1000个数据肯定还是很快的；但如果使用的是哈希表来保存键值对的话，虽然明面上时间复杂度是O(1)，但是O(1)并不一定就比O(n)快，首先要计算哈希函数，装载因子过大了你还要动态扩容，会涉及到rehash，冲突了还要考虑冲突的解决。。。这一系列操作下来，谁快谁慢就说不准了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599374729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246303,"user_name":"欧雄虎(Badguy）","can_delete":false,"product_type":"c1","uid":1573307,"ip_address":"","ucode":"D72B1CC455AA56","user_header":"https://static001.geekbang.org/account/avatar/00/18/01/bb/7d15d44a.jpg","comment_is_top":false,"comment_ctime":1599271947,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5894239243","product_id":100056701,"comment_content":"老师我这边用redis5.0.9测试。hset 1101000 060 3302000080之后内存不止增加16，老师帮忙看下是我这边的测试方法不对吗？测试方法如下！<br><br>[root@redis02 src]# .&#47;redis-cli <br>127.0.0.1:6379&gt; info memory<br># Memory<br>used_memory:853656<br>used_memory_human:833.65K<br>used_memory_rss:14651392<br>used_memory_rss_human:13.97M<br>used_memory_peak:853656<br>used_memory_peak_human:833.65K<br>used_memory_peak_perc:100.01%<br>used_memory_overhead:841102<br>used_memory_startup:791408<br>used_memory_dataset:12554<br>used_memory_dataset_perc:20.17%<br>allocator_allocated:1363560<br>allocator_active:1728512<br>allocator_resident:11149312<br>total_system_memory:1023688704<br>total_system_memory_human:976.27M<br>used_memory_lua:37888<br>used_memory_lua_human:37.00K<br>used_memory_scripts:0<br>used_memory_scripts_human:0B<br>number_of_cached_scripts:0<br>maxmemory:0<br>maxmemory_human:0B<br>maxmemory_policy:noeviction<br>allocator_frag_ratio:1.27<br>allocator_frag_bytes:364952<br>allocator_rss_ratio:6.45<br>allocator_rss_bytes:9420800<br>rss_overhead_ratio:1.31<br>rss_overhead_bytes:3502080<br>mem_fragmentation_ratio:18.03<br>mem_fragmentation_bytes:13838760<br>mem_not_counted_for_evict:0<br>mem_replication_backlog:0<br>mem_clients_slaves:0<br>mem_clients_normal:49694<br>mem_aof_buffer:0<br>mem_allocator:jemalloc-5.1.0<br>active_defrag_running:0<br>lazyfree_pending_objects:0<br>127.0.0.1:6379&gt; <br>127.0.0.1:6379&gt; <br>127.0.0.1:6379&gt; <br>127.0.0.1:6379&gt; <br>127.0.0.1:6379&gt; <br>127.0.0.1:6379&gt; hset 1101000 060 3302000080<br>(integer) 1<br>127.0.0.1:6379&gt; info memory<br># Memory<br>used_memory:853776<br>used_memory_human:833.77K<br>","like_count":1,"discussions":[{"author":{"id":1014680,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/98/8f1aecf4.jpg","nickname":"楼下小黑哥","note":"","ucode":"453B099B0EE52E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303724,"discussion_content":"因为第一次增加 hash 表中还有其他元数据呀，也是要占用空间的。后面再往这个 hash 表增加元素，增加大小就是 16 了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599361943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245141,"user_name":"伟伟哦","can_delete":false,"product_type":"c1","uid":1394961,"ip_address":"","ucode":"51E5FC28E6F0B3","user_header":"https://static001.geekbang.org/account/avatar/00/15/49/11/31d961a1.jpg","comment_is_top":false,"comment_ctime":1598844866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893812162","product_id":100056701,"comment_content":"老师今天讲的可以给个代码，配置了选项 如何实现把图片 ID 的最后 3 位（060）和图片存储对象 ID 分别作为 Hash 类型值中的 key 和 value。 代码操作下","like_count":1},{"had_liked":false,"id":357621,"user_name":"无尽蔚蓝","can_delete":false,"product_type":"c1","uid":2721761,"ip_address":"上海","ucode":"A665DF46833A81","user_header":"https://static001.geekbang.org/account/avatar/00/29/87/e1/b85dce85.jpg","comment_is_top":false,"comment_ctime":1663495373,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1663495373","product_id":100056701,"comment_content":"压缩列表的图片的key不对，应该是content","like_count":0},{"had_liked":false,"id":355187,"user_name":"Tank","can_delete":false,"product_type":"c1","uid":2262986,"ip_address":"吉林","ucode":"A7108E83D2D199","user_header":"https://static001.geekbang.org/account/avatar/00/22/87/ca/00cc5a1a.jpg","comment_is_top":false,"comment_ctime":1661160529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661160529","product_id":100056701,"comment_content":"如果每一个图片ID的前7位都不一样，那这个节省内存的方法是不是就没有意义了？","like_count":0},{"had_liked":false,"id":355084,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"浙江","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1661068167,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661068167","product_id":100056701,"comment_content":"个人实践：<br>Redis-Local:0&gt;hset 1101000 063 3302000083<br>...<br><br>在第一次写入hash之后，开始第二次，第三次写入，第四次写入，每次都是增加16KB，16KB， 24KB，另外有点奇怪的地方，使用Redis Desktop Manager中的redis-cli与使用终端redis-cli获取到的used_memory值并不相同。相差的值，不是很大，但是并不恒等。<br><br>具体原因TBD","like_count":0},{"had_liked":false,"id":353606,"user_name":"粽","can_delete":false,"product_type":"c1","uid":3039904,"ip_address":"上海","ucode":"7BD43464776385","user_header":"https://static001.geekbang.org/account/avatar/00/2e/62/a0/e46bdbeb.jpg","comment_is_top":false,"comment_ctime":1659598438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659598438","product_id":100056701,"comment_content":"我想问下，为什么set ab 123456789,我这里占用了内存是48B。如果反过来","like_count":0},{"had_liked":false,"id":352465,"user_name":"going","can_delete":false,"product_type":"c1","uid":2313353,"ip_address":"","ucode":"3AA83F9B07BE8B","user_header":"https://static001.geekbang.org/account/avatar/00/23/4c/89/82a3ee04.jpg","comment_is_top":false,"comment_ctime":1658712933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658712933","product_id":100056701,"comment_content":"老师有个问题没太明白，上文讲解String避免内存碎片的阈值44字节是值得sds的总大小还是只是buf的大小","like_count":0},{"had_liked":false,"id":352127,"user_name":"A 拽丫头","can_delete":false,"product_type":"c1","uid":1470434,"ip_address":"","ucode":"F875D99D18DF6E","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/e2/f3b05833.jpg","comment_is_top":false,"comment_ctime":1658393847,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658393847","product_id":100056701,"comment_content":"redis 有全局的  hash 來存儲  鍵值對，在文中   string 計算的存儲空間的時候計算了這個全局的存儲消耗，但是在 計算 hash 存儲占用内存大小時，沒有計算  全局hash 的消耗","like_count":0},{"had_liked":false,"id":347926,"user_name":"Mr.yan","can_delete":false,"product_type":"c1","uid":1463528,"ip_address":"","ucode":"9A23BC04EE0B5A","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/e8/8861f86d.jpg","comment_is_top":false,"comment_ctime":1654587371,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654587371","product_id":100056701,"comment_content":"老师，你好，我在redis7.0.0版本上实测，使用String类型的时候，内存增加是72，而不是您说的64，这是为什么呢？？","like_count":0},{"had_liked":false,"id":345691,"user_name":"极客酱酱","can_delete":false,"product_type":"c1","uid":2934665,"ip_address":"","ucode":"18CDC1DB754D58","user_header":"https://static001.geekbang.org/account/avatar/00/2c/c7/89/16437396.jpg","comment_is_top":false,"comment_ctime":1652512205,"is_pvip":true,"discussion_count":1,"race_medal":2,"score":"1652512205","product_id":100056701,"comment_content":"redis是如何判断string要写入的是字符串还是整型的呢？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572745,"discussion_content":"先尝试转整型，能转则转，不能转就是字符串","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652945301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344096,"user_name":"X","can_delete":false,"product_type":"c1","uid":2027258,"ip_address":"","ucode":"688D816A4931CA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ee/fa/31361552.jpg","comment_is_top":false,"comment_ctime":1651237963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651237963","product_id":100056701,"comment_content":"这节课收获很多，谢谢老师","like_count":0},{"had_liked":false,"id":341348,"user_name":"飘絮","can_delete":false,"product_type":"c1","uid":2950829,"ip_address":"","ucode":"F350A5512CF35C","user_header":"https://static001.geekbang.org/account/avatar/00/2d/06/ad/38301d7f.jpg","comment_is_top":false,"comment_ctime":1649559688,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1649559688","product_id":100056701,"comment_content":"hset 1101000 060 3302000080<br>这条记录只消耗 16 字节没明白，老师解释一下吧","like_count":0,"discussions":[{"author":{"id":2850942,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/80/7e/b4f2ca40.jpg","nickname":"元永健","note":"","ucode":"8D004C9FC67F33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582666,"discussion_content":"对呀，field的空间消耗去哪里了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659583833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339551,"user_name":"张潇赟","can_delete":false,"product_type":"c1","uid":1132192,"ip_address":"","ucode":"1A45B57F9E0723","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/a0/aa6d4ecd.jpg","comment_is_top":false,"comment_ctime":1648184043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648184043","product_id":100056701,"comment_content":"这种方式巧妙的利用hash数据结构的特点，以牺牲一点点的性能为代价换区了大量的空间。","like_count":0},{"had_liked":false,"id":336972,"user_name":"H.H","can_delete":false,"product_type":"c1","uid":2668479,"ip_address":"","ucode":"3C0BB1E2A3EC51","user_header":"https://static001.geekbang.org/account/avatar/00/28/b7/bf/815f0ec6.jpg","comment_is_top":false,"comment_ctime":1646501959,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646501959","product_id":100056701,"comment_content":"有一个疑问，Key到底是SDS存储还是redisObject存储？我看源码上似乎是全都转成了redisObject,但好多地方说key是SDS存储，个人感觉也没必要用redisObject存储key。尝试set 8个字节以内的key value，计算前后的内存使用差值为80B，没想通。","like_count":0},{"had_liked":false,"id":333688,"user_name":"Donkey","can_delete":false,"product_type":"c1","uid":2753834,"ip_address":"","ucode":"3DB4DFF6D99035","user_header":"https://static001.geekbang.org/account/avatar/00/2a/05/2a/cfbcb0b2.jpg","comment_is_top":false,"comment_ctime":1644474751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644474751","product_id":100056701,"comment_content":"能压缩能前提是：有很多元素共用一个key吧？适合递增的数据，一千个元素划分到同一个大key。具体数量取决于hash-max-ziplist-entries的配置。另外查询是需要遍历集合元素的，hash-max-ziplist-entries越大，查询越慢，优点在于省空间。","like_count":0},{"had_liked":false,"id":333327,"user_name":"Geek_064e72","can_delete":false,"product_type":"c1","uid":2900973,"ip_address":"","ucode":"D627BACE46C37C","user_header":"","comment_is_top":false,"comment_ctime":1644291014,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1644291014","product_id":100056701,"comment_content":"用ziplist作为hash的底层数据结构，内存是节省了，但查找与插入效率呢？这点也很重要吧？","like_count":0,"discussions":[{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554191,"discussion_content":"trade-off","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646244704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333158,"user_name":"A 拽丫头","can_delete":false,"product_type":"c1","uid":1470434,"ip_address":"","ucode":"F875D99D18DF6E","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/e2/f3b05833.jpg","comment_is_top":false,"comment_ctime":1644144619,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1644144619","product_id":100056701,"comment_content":"看完疑问：<br>redis 的字节数是怎么算的了，或者说有什么规范了，例如 mysql 中的 int 类型占4个字节 tinyint 占一个字节 一样，redis  有没有这样明确的规定了","like_count":0,"discussions":[{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554192,"discussion_content":"有，redis源码中很多使用int16  int32等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646244740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328892,"user_name":"fjpcode","can_delete":false,"product_type":"c1","uid":1306092,"ip_address":"","ucode":"C32C5E3ECB9A90","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","comment_is_top":false,"comment_ctime":1640928048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640928048","product_id":100056701,"comment_content":"关于ziplist利用hash类型存储数据这部分，老师文中案例增加一个键值对 整体只多了16字节，这个是考虑了hash数据的键和值的总和吗？ 如果是总和 这个肯定解释不通为什么只多了16字节；","like_count":0},{"had_liked":false,"id":326894,"user_name":"正在输入。。。","can_delete":false,"product_type":"c1","uid":1562475,"ip_address":"","ucode":"117DBF50BCD0C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/d7/6b/ea7b1265.jpg","comment_is_top":false,"comment_ctime":1639734947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639734947","product_id":100056701,"comment_content":"老师，读了文章后，发现String类型无论value的大小都存在额外的空间占用，既然这样String是否只适合用来做分布式锁和计数。其他场景使用hash就行","like_count":0},{"had_liked":false,"id":325412,"user_name":"天马行空","can_delete":false,"product_type":"c1","uid":2837472,"ip_address":"","ucode":"B43E6B5C8F83A5","user_header":"https://static001.geekbang.org/account/avatar/00/2b/4b/e0/8ce62b4c.jpg","comment_is_top":false,"comment_ctime":1638949721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638949721","product_id":100056701,"comment_content":"老师您好 我有个疑问  你用hash结构二级编码保存 图片id 和图片对象id 只用了16字节 但是即使是hash结构应该也有个全局哈希表中的 dictEntry对象啊 光是这个对象就占了32字节了 加上实际数据key和value共 16 字节 ziplist也有一些元数据也要占用空间 为什么可以只使用了16字节","like_count":0},{"had_liked":false,"id":324571,"user_name":"Geek_fe35f6","can_delete":false,"product_type":"c1","uid":2859490,"ip_address":"","ucode":"C30CC2E1BF4EDA","user_header":"","comment_is_top":false,"comment_ctime":1638503429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638503429","product_id":100056701,"comment_content":"有点不是很理解的地方。<br>原文：当保存的是 Long 类型整数时，RedisObject 中的指针就直接赋值为整数数据了，这样就不用额外的指针再指向整数了，节省了指针的空间开销。<br>这里说指针直接赋值为整数数据，这个数据指的是不是SDS？<br><br>接下来的原文：每个 int 编码的 RedisObject 元数据部分占 8 字节，指针部分被直接赋值为 8 字节的整数了。此时，每个 ID 会使用 16 字节，加起来一共是 32 字节。<br>这里又说指针部分赋值为8B整数了，再加16字节SDS，那么这个8B整数是什么？上面不是说了int编码指针部分已经被节省了吗？<br><br>希望老师解答一下","like_count":0},{"had_liked":false,"id":322557,"user_name":"赴","can_delete":false,"product_type":"c1","uid":2675954,"ip_address":"","ucode":"D47B3179BE3950","user_header":"https://static001.geekbang.org/account/avatar/00/28/d4/f2/3c0bfa0e.jpg","comment_is_top":false,"comment_ctime":1637481156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637481156","product_id":100056701,"comment_content":"我有个疑问，全局哈希表中，key为什么还是指向redis object的，他不是指向sds就行了吗","like_count":0},{"had_liked":false,"id":320633,"user_name":"于庆鹏","can_delete":false,"product_type":"c1","uid":1194534,"ip_address":"","ucode":"D542C8F9EF1C1E","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/26/163a52d2.jpg","comment_is_top":false,"comment_ctime":1636428607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636428607","product_id":100056701,"comment_content":"ziplist 的如果存储 1000个 键值对 数据应该需要2000 个entry，hash-max-ziplist-entries  不是应该设置成2000 吗？","like_count":0},{"had_liked":false,"id":314333,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1632972947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632972947","product_id":100056701,"comment_content":"redis中的String类型能够保存单值的键值对，但是却不适合用来保存体积小数目多的单值键值对数据。<br>  1、每一个String键值对需要一个dictEntry结构体，占据32个字节的空间；<br>  2、使用String保存数据需要用到RedisObject结构体，而每个RedisObject至少需要占用8个字节来保存元数据。<br>这样，使用String类型保存一个8字节的key和一个8字节的value，需要占用64个字节的空间。有效使用的内存只有25%，效率非常低。<br><br>而使用压缩列表就会很高效。<br>  1、集合数据类型只需要一个dictEntry结构体，占用空间可以忽略不计。<br>  2、压缩列表的底层数据结构是数组，数据在物理空间上是顺序排列的，节省了使用指针的空间。<br>  3、一个8字节的数据元素在压缩列表上占用的空间是1+4+1+8=14字节，实际分配16字节，内存有效使用率接近90%。<br><br>如何通过结合保存单键值对呢？<br>  可以采用基于 Hash 类型的二级编码方法。把一个单值的数据拆分成两部分，前一部分作为 Redis索引的 key，后一部分作为 Hash 集合的 key，Hash集合的value 是要存储的值。<br>  如把set 1101000060 3302000080 改为：hset 1101000 060 3302000080。","like_count":0},{"had_liked":false,"id":313008,"user_name":"猪小擎","can_delete":false,"product_type":"c1","uid":1370959,"ip_address":"","ucode":"D9552746AE3327","user_header":"https://static001.geekbang.org/account/avatar/00/14/eb/4f/6a97b1cd.jpg","comment_is_top":false,"comment_ctime":1632198036,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1632198036","product_id":100056701,"comment_content":"hash类型中的key，这个应该称呼为member吧，redis-cli里的代码提示，这个片段就叫member","like_count":0},{"had_liked":false,"id":308779,"user_name":"赴","can_delete":false,"product_type":"c1","uid":2675954,"ip_address":"","ucode":"D47B3179BE3950","user_header":"https://static001.geekbang.org/account/avatar/00/28/d4/f2/3c0bfa0e.jpg","comment_is_top":false,"comment_ctime":1629795057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629795057","product_id":100056701,"comment_content":"老师用的是哪个版本?有什么工具可以查看分配的内存的? rdbtools 跟命令行的 memory usage key 好像都不太对","like_count":0},{"had_liked":false,"id":306219,"user_name":"末日，成欢","can_delete":false,"product_type":"c1","uid":1812201,"ip_address":"","ucode":"BBAEBB9C93558A","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLm8skz4F7FGGBTXWUMia6qVEc00BddeXapicv5FkAx62GmOnUNEcE4scSR60AmappQoNdIQhccKsBA/132","comment_is_top":false,"comment_ctime":1628436548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628436548","product_id":100056701,"comment_content":"老师，我看了下zlentry这个类型的源码，发现里面里面有7个字段，而图里只有4个字段，如果按照7个字段的，是不是几天不是16个字节了？麻烦老师解惑下","like_count":0},{"had_liked":false,"id":305492,"user_name":"酷酷的嵩","can_delete":false,"product_type":"c1","uid":1357315,"ip_address":"","ucode":"EF249E96F42491","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoVRER40LhyAhBK6YgPYibRzWARkc3efUquib4j9BPru4y8FfvXK2sBPbXej9314pZdfdcxb07RcjZw/132","comment_is_top":false,"comment_ctime":1627996017,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627996017","product_id":100056701,"comment_content":"用工具计算，使用给一个hash来存储图片id和存储对象 ID，比单纯的用string来也是可以节省内存的。不用太留意hash里面的key的长度了","like_count":0,"discussions":[{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387770,"discussion_content":"对于定量分析的情况要有根据，不能不留意新增field和value时的内存大小。。文章关键细节漏讲了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628407505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305412,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1627962367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627962367","product_id":100056701,"comment_content":"看来只有sorted sort了,因为从上面看,我们应该考虑能节省的内存空间,应该是dictEntry结构体带来的额外开销,故尽可能的减少Key,剩下的数据结构中,唯一能做到的,应该只有sorted key了,但是其数据结构有一个弊端,就是压缩列表情况下,查询非常麻烦,需要进行遍历操作,所以也不适合","like_count":0},{"had_liked":false,"id":304776,"user_name":"Erwin2simple","can_delete":false,"product_type":"c1","uid":1283260,"ip_address":"","ucode":"EAA13DA7FAF949","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/bc/21b9758a.jpg","comment_is_top":false,"comment_ctime":1627610415,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1627610415","product_id":100056701,"comment_content":"有个疑问，为什么要存储图片id和图片对象id的映射呢，直接在存储系统里面用图片对象id查想要的图片数据不可以吗？","like_count":0},{"had_liked":false,"id":303201,"user_name":"Just Do IT","can_delete":false,"product_type":"c1","uid":1192724,"ip_address":"","ucode":"1EAD92510FA7BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","comment_is_top":false,"comment_ctime":1626662839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626662839","product_id":100056701,"comment_content":"如果转成压缩列表，此时的dictEntry存的是什么？","like_count":0},{"had_liked":false,"id":302530,"user_name":"Geek_0923e3","can_delete":false,"product_type":"c1","uid":2675986,"ip_address":"","ucode":"1AF957E919089D","user_header":"","comment_is_top":false,"comment_ctime":1626252261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626252261","product_id":100056701,"comment_content":"，我们就使用二级编码的方法，实现了用集合类型保存单值键值对，Redis 实例的内存空间消耗明显下降了。 这里用的二级编码是什么意思，不太明白？","like_count":0},{"had_liked":false,"id":300199,"user_name":"ivhong","can_delete":false,"product_type":"c1","uid":2659871,"ip_address":"","ucode":"9947B228807AC9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ic8eLTo5rnqIMJicUfpkVBrOUJAW4fANicKIbHdC54O9SOdwSoeK6o8icibaUbh7ZUXAkGF9zwHqo0Q/132","comment_is_top":false,"comment_ctime":1625044299,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1625044299","product_id":100056701,"comment_content":"每个 entry 保存一个图片存储对象 ID（8 字节），此时，每个 entry 的 prev_len 只需要 1 个字节就行，因为每个 entry 的前一个 entry 长度都只有 8 字节，小于 254 字节。这样一来，一个图片的存储对象 ID 所占用的内存大小是 14 字节（1+4+1+8=14），实际分配 16 字节。","like_count":0,"discussions":[{"author":{"id":1391010,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/mWicFKgbjL29nvDpmV0E1bTBRgiaPYbJDXXAGdmo7pSlwxcsytgcnkyTJBiatggD6RZmjBpHlSDXhQQNh6asXlujQ/132","nickname":"kaikai","note":"","ucode":"55B767AD69F7C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548016,"discussion_content":"3字节的二级key存在哪里啊，求教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642994815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299556,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1624704263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624704263","product_id":100056701,"comment_content":"这种实践的方式讲解知识，实在是太棒了，很硬。","like_count":0},{"had_liked":false,"id":295795,"user_name":"Ac、","can_delete":false,"product_type":"c1","uid":1610575,"ip_address":"","ucode":"7E7A8458372F33","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/4f/61edeea6.jpg","comment_is_top":false,"comment_ctime":1622600400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622600400","product_id":100056701,"comment_content":"以图片 ID 1101000060 和图片存储对象 ID 3302000080 为例，我们可以把图片 ID 的前 7 位（1101000）作为 Hash 类型的键，把图片 ID 的最后 3 位（060）和图片存储对象 ID 分别作为 Hash 类型值中的 key 和 value<br><br>这里只拆分图片ID，那么图片存储对是ID该如何保存？","like_count":0},{"had_liked":false,"id":295675,"user_name":"金时","can_delete":false,"product_type":"c1","uid":1120428,"ip_address":"","ucode":"3491B2367A7238","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/ac/4d68ba46.jpg","comment_is_top":false,"comment_ctime":1622540371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622540371","product_id":100056701,"comment_content":"这种 用用ziplist 替换hash 的方法，节省了空间，是不是时间就增加了，ziplist 只能遍历了吧？","like_count":0},{"had_liked":false,"id":295161,"user_name":"凌霄","can_delete":false,"product_type":"c1","uid":1107786,"ip_address":"","ucode":"19C4BFB0298276","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/4a/4dfb565a.jpg","comment_is_top":false,"comment_ctime":1622276725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622276725","product_id":100056701,"comment_content":"补充一个大家的疑惑，String 存储，是一亿个KEY,所以每个KEY 都需要使用dictEntry存储，占用32个字节,相当于1亿*32 。而作者中用压缩列表我理解是所有图片共用一个KEY，不同的图片区分是靠hash 中的field 来区分，也就是1*32。 一个是1亿*32,一个是32，想想是不是这样能节省大量存储。","like_count":0},{"had_liked":false,"id":294384,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1621923365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621923365","product_id":100056701,"comment_content":"这里有个问题老师没有点出来 就是改变hash-max-ziplist-value会影响到缓存行的读取 。因为默认是一个缓存行可以抓取到的 但是如果涉及多个缓存行 一亿的数据量需要做测试。这种情况下还是不是空间换时间的问题。如果需要两个缓存行来配合抓取 那么一次抓到的数据可能需要几个时钟片才能做完","like_count":0},{"had_liked":false,"id":293594,"user_name":"LQS  KF","can_delete":false,"product_type":"c1","uid":1364737,"ip_address":"","ucode":"3C0A07A8220094","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/01/716d45b6.jpg","comment_is_top":false,"comment_ctime":1621438736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621438736","product_id":100056701,"comment_content":"感觉这里要使用hash来存储的话，要确保在hash-max-ziplist-value范围内尽可能少的创建hash。不然可能会事得其反。比如一百万个图片，分布在了一百万个hash里面。","like_count":0},{"had_liked":false,"id":293078,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1621206404,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621206404","product_id":100056701,"comment_content":"文中的 ziplist 的 entry 结构，图中是由 key组成，而下面文字说明又是 content，是不是矛盾了？","like_count":0},{"had_liked":false,"id":292758,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1620964414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620964414","product_id":100056701,"comment_content":"# Server<br>redis_version:5.0.7<br>redis_mode:standalone<br>os:Linux 4.19.121-linuxkit x86_64<br>arch_bits:64<br>multiplexing_api:epoll<br>atomicvar_api:atomic-builtin<br>gcc_version:8.3.0<br><br>----------<br><br># 初始值<br>used_memory:853264<br><br># hset 1101000 060 3302000081（+120）<br>used_memory:853384<br><br># hset 1101000 061 3302000081（+16）<br>used_memory:853400<br><br>老师，请教一下，第一次添加时，为什么分配了 120B？<br><br>dictEntry：8+8+8=24，实际分配 32。<br>key.RedisObject：8+8=16，int 编码。<br>value.RedisObject：8+8=16，raw 编码。<br><br>ziplist：zlbytes+zltail+zllen+zlend+entry=4+4+2+1+16=27，实际分配 32B。<br><br>综上：120-32-16-16-32=24，还有 24 bytes 开销在哪吖？<br><br>谢谢老师！","like_count":0},{"had_liked":false,"id":292713,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1620949273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620949273","product_id":100056701,"comment_content":"embstr RedisObject 中的元数据、指针和 SDS 是一块连续的内存区域，那 ptr 是不是就没必要分配内存了，或者像 int 编码那样，把 ptr 的内存分给 SDS，这样不就能省 8B 了么？","like_count":0},{"had_liked":false,"id":292407,"user_name":"初学者","can_delete":false,"product_type":"c1","uid":2052670,"ip_address":"","ucode":"5E404009761B90","user_header":"https://static001.geekbang.org/account/avatar/00/1f/52/3e/f74da7bd.jpg","comment_is_top":false,"comment_ctime":1620808550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620808550","product_id":100056701,"comment_content":"老师，在压缩列表的那个图，entry数据结构那里，里面包含了key，但是你下面描述写的是content，这个地方的图是否有问题啊","like_count":0},{"had_liked":false,"id":290537,"user_name":"S.","can_delete":false,"product_type":"c1","uid":1629556,"ip_address":"","ucode":"78CD1C8682A403","user_header":"https://static001.geekbang.org/account/avatar/00/18/dd/74/cc1b215f.jpg","comment_is_top":false,"comment_ctime":1619604525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619604525","product_id":100056701,"comment_content":"所以hash的底层有的是压缩列表，有的是哈希表，那get的时候压缩列表的复杂度不就高了么。","like_count":0},{"had_liked":false,"id":290306,"user_name":"Geek2014","can_delete":false,"product_type":"c1","uid":2028957,"ip_address":"","ucode":"9EB356D8DF287E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","comment_is_top":false,"comment_ctime":1619492743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619492743","product_id":100056701,"comment_content":"在同等key（1101000）的情况下，value发生变化，需要16字节吧。<br>但是这样设计，会有大key的问题吧？","like_count":0},{"had_liked":false,"id":289221,"user_name":"Khirye","can_delete":false,"product_type":"c1","uid":1080985,"ip_address":"","ucode":"6C54C126FA54B8","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/99/c4302030.jpg","comment_is_top":false,"comment_ctime":1618922506,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1618922506","product_id":100056701,"comment_content":"老师，我想问下，直接用redis做存储，可靠性如何保证，万一丢数据了怎么处理？","like_count":0,"discussions":[{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387772,"discussion_content":"证明你前面没看，通过aof和rdb保证","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628407777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289026,"user_name":"will_liu","can_delete":false,"product_type":"c1","uid":1790757,"ip_address":"","ucode":"B6902365D90798","user_header":"https://static001.geekbang.org/account/avatar/00/1b/53/25/91e7485e.jpg","comment_is_top":false,"comment_ctime":1618822684,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618822684","product_id":100056701,"comment_content":"jemalloc每次会为dictEntry分配32个字节，实际占用24个字节。因为dictEntry本身是固定的，这不就固定造成每次浪费8个字节么","like_count":0},{"had_liked":false,"id":288213,"user_name":"老大不小","can_delete":false,"product_type":"c1","uid":1295609,"ip_address":"","ucode":"35BCDD3CB13467","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","comment_is_top":false,"comment_ctime":1618366239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618366239","product_id":100056701,"comment_content":"hset 1101000 060 3302000080 , set 1101000要占用32byte， set 060 3302000080 16byte，但是&quot;060 3302000080&quot;只是ziplist中的一个entry,增加一个entry是16byte没毛病，一个ziplist还还有zlbyte,zldetail,zllen,zlend等属性也要占用内存","like_count":0},{"had_liked":false,"id":286086,"user_name":"吃喵的鱼","can_delete":false,"product_type":"c1","uid":1764203,"ip_address":"","ucode":"2033896FE35929","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qeL7fNxa4BVTGH53Wwr7gJOjPT9buwFKAZfGmwVibMoBnoQjlqssr9AAUCbz5b2L9k6zEvHyhL1t8Ys3mibt5Xow/132","comment_is_top":false,"comment_ctime":1617153984,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1617153984","product_id":100056701,"comment_content":"老师，我用的是redis6.2.0，发现set 1101000060 3302000080这个占用了56个字节数，并不是64字节，使用的info memory命令，是什么原因呢？","like_count":0,"discussions":[{"author":{"id":1160144,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/d0/2f2e830b.jpg","nickname":"计冉","note":"","ucode":"2DB618E6A1DDF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385335,"discussion_content":"redis6.2.0的sdshdr数据结构已经和老师不一样了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627006281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284624,"user_name":"c梦","can_delete":false,"product_type":"c1","uid":1616385,"ip_address":"","ucode":"E860801B197DBA","user_header":"https://static001.geekbang.org/account/avatar/00/18/aa/01/641f3c3a.jpg","comment_is_top":false,"comment_ctime":1616392971,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616392971","product_id":100056701,"comment_content":"想问一下使用压缩列表实现哈希时，entry的key和value是怎么保存的？","like_count":0},{"had_liked":false,"id":284413,"user_name":"临暗","can_delete":false,"product_type":"c1","uid":2500805,"ip_address":"","ucode":"E3E5825C12D009","user_header":"","comment_is_top":false,"comment_ctime":1616233401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616233401","product_id":100056701,"comment_content":"各位好兄弟们，有几个问题我没太理解还望能点拨一下<br>1. redis的键值对是通过哈希表来存储，那么在string类型的时候哈希表中是通过这个键的哈希值找到对应下标然后里面存储的就是一个指针指向了第一个dictEntry,因为哈希表可能会出现冲突所以dictEntry中会有个next的指针冲突的时候会通过链表的方式来存储。但是压缩列表中存储的时候我理解也会有冲突，是不是在压缩列表里面也会有一个next的指针","like_count":0},{"had_liked":false,"id":282796,"user_name":"Trident","can_delete":false,"product_type":"c1","uid":1609530,"ip_address":"","ucode":"53E6788CF33398","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/l4nngwyggBGqeMXC0micwO8bM1hSttgQXa1Y5frJSqWa8NibDhia5icwPcHM5wOpV3hfsf0UicDY0ypFqnQ3iarG0T1w/132","comment_is_top":false,"comment_ctime":1615423111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615423111","product_id":100056701,"comment_content":"文中字符串长度小于等于44,这个44是怎么来的？","like_count":0},{"had_liked":false,"id":281986,"user_name":"PangYY","can_delete":false,"product_type":"c1","uid":1625297,"ip_address":"","ucode":"3E64C7C1BBD979","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL0iaUNGFzP3l28nPHuMiaQoGZK1ibCMrTHibMbiaRPMLoHicYGCQiaXibt8EWVwgFX0apRZyNoKpN5u1RoibQ/132","comment_is_top":false,"comment_ctime":1615002681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615002681","product_id":100056701,"comment_content":"“dictEntry 结构中有三个 8 字节的指针，分别指向 key、value 以及下一个 dictEntry”，但是对应图中的两个RedisObject都是由value指向的，是否是画错了 ？","like_count":0},{"had_liked":false,"id":278200,"user_name":"Geek_f5d467","can_delete":false,"product_type":"c1","uid":2439983,"ip_address":"","ucode":"C381DBD092FD74","user_header":"","comment_is_top":false,"comment_ctime":1612799029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612799029","product_id":100056701,"comment_content":"我记得hash用压缩列表作为底层数据结构时，取值时需要遍历整个压缩列表","like_count":0},{"had_liked":false,"id":276701,"user_name":"Geek_1e8830","can_delete":false,"product_type":"c1","uid":1506574,"ip_address":"","ucode":"CD84A5AAAE6872","user_header":"","comment_is_top":false,"comment_ctime":1612083437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612083437","product_id":100056701,"comment_content":"embstr 这种编码方式的时候，数据和ptr指针是连续的空间，那这个ptr好像就没事用了吧？这是不是有点浪费空间呢？","like_count":0},{"had_liked":false,"id":276675,"user_name":"Just Do IT","can_delete":false,"product_type":"c1","uid":1192724,"ip_address":"","ucode":"1EAD92510FA7BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","comment_is_top":false,"comment_ctime":1612074808,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1612074808","product_id":100056701,"comment_content":"这句话实在没看懂，想说明什么呢？<br>为何小于254 ，prev_len为1字节，大于254就是5字节呢？<br><br><br><br>虽然 1 字节的值能表示的数值范围是 0 到 255，但是压缩列表中 zlend 的取值默认是 255，因此，就默认用 255 表示整个压缩列表的结束，其他表示长度的地方就不能再用 255 这个值了。所以，当上一个 entry 长度小于 254 字节时，prev_len 取值为 1 字节，否则，就取值为 5 字节。","like_count":0,"discussions":[{"author":{"id":1342429,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7b/dd/f33a0855.jpg","nickname":"机智的小俊俊","note":"","ucode":"16DFBC3A9E60AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368754,"discussion_content":"zlend结束标识是255,如果读到255就认为读到了压缩列表的末尾","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618823622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272956,"user_name":"KamTo  Hung","can_delete":false,"product_type":"c1","uid":1584786,"ip_address":"","ucode":"00D5A6479DB784","user_header":"https://static001.geekbang.org/account/avatar/00/18/2e/92/e1c38ca6.jpg","comment_is_top":false,"comment_ctime":1610363585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610363585","product_id":100056701,"comment_content":"请问下如果某个value更新后长度改变了，是否需要时间复杂度O(n)的重整","like_count":0},{"had_liked":false,"id":272514,"user_name":"KamTo  Hung","can_delete":false,"product_type":"c1","uid":1584786,"ip_address":"","ucode":"00D5A6479DB784","user_header":"https://static001.geekbang.org/account/avatar/00/18/2e/92/e1c38ca6.jpg","comment_is_top":false,"comment_ctime":1610105348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610105348","product_id":100056701,"comment_content":"用hash存有什么办法设置ttl嘛","like_count":0},{"had_liked":false,"id":270949,"user_name":"有生之年","can_delete":false,"product_type":"c1","uid":1020719,"ip_address":"","ucode":"B713335DE9D37F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/2f/1e193dcc.jpg","comment_is_top":false,"comment_ctime":1609327147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609327147","product_id":100056701,"comment_content":"老师，您好，Redis源码文件t_string.c中setrangeCommand方法和appendCommand方法都有校验最终value长度，也就是调用checkStringLength方法， 但是在setCommand方法中却没有调用checkStringLength来校验，请问， 这是为什么？","like_count":0},{"had_liked":false,"id":270792,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1609258355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609258355","product_id":100056701,"comment_content":"最难的一课，也是收获最大的一课。","like_count":0},{"had_liked":false,"id":268169,"user_name":"Geek_a9d243","can_delete":false,"product_type":"c1","uid":1647771,"ip_address":"","ucode":"E837C1F6F71659","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJJNh6ic7z3qb7TricgnZjUXALAibLPYszdfBCIQDLgEnKRpiavP4ZD3RvxicSiaCM41vXicHzNouWSiaaOEg/132","comment_is_top":false,"comment_ctime":1608088076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608088076","product_id":100056701,"comment_content":"老师讲的太好了 ","like_count":0},{"had_liked":false,"id":267336,"user_name":"thomas","can_delete":false,"product_type":"c1","uid":1016777,"ip_address":"","ucode":"9AB945308F1B50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/c9/5d03981a.jpg","comment_is_top":false,"comment_ctime":1607682880,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1607682880","product_id":100056701,"comment_content":"当字符串大于 44 字节时，SDS 的数据量就开始变多了，Redis 就不再把 SDS 和 RedisObject 布局在一起了，而是会给 SDS 分配独立的空间，并用指针指向 SDS 结构。这种布局方式被称为 raw 编码模式。<br>------------------------》<br>为什么是44字节，而不是48字节，元数据（8byte）+ptr(8byte) +44byte = 60byte; 理论上还可以用4字节","like_count":0},{"had_liked":false,"id":265639,"user_name":"Spike","can_delete":false,"product_type":"c1","uid":1340702,"ip_address":"","ucode":"9CE0EE743A89C2","user_header":"https://static001.geekbang.org/account/avatar/00/14/75/1e/356dbf4a.jpg","comment_is_top":false,"comment_ctime":1606967397,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606967397","product_id":100056701,"comment_content":" Hashes, Lists, Sets composed of just integers, and Sorted Sets, when smaller than a given number of elements, and up to a maximum element size, are encoded in a very memory efficient way that uses up to 10 times less memory (with 5 time less memory used being the average saving).<br><br>我看 redis 官方文档上写着只有存储的元素是 integers 时才会使用压缩列表。那么如果存储的是字符就不会使用压缩列表了吗？有办法验证吗?","like_count":0,"discussions":[{"author":{"id":1584786,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2e/92/e1c38ca6.jpg","nickname":"KamTo  Hung","note":"","ucode":"00D5A6479DB784","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340139,"discussion_content":"object encoding key","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609915383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261592,"user_name":"袁东昊的电信手机","can_delete":false,"product_type":"c1","uid":2300724,"ip_address":"","ucode":"938393B2C47702","user_header":"","comment_is_top":false,"comment_ctime":1605435287,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605435287","product_id":100056701,"comment_content":"你好，老师，我在redis 6.0中实验的时候。<br><br>初始：<br>127.0.0.1:6379&gt; info memory<br># Memory<br>used_memory:865168<br><br>string类型消耗56字节<br>127.0.0.1:6379&gt; set 1101000051 &quot;3301000051&quot;<br>OK<br>127.0.0.1:6379&gt; info memory<br># Memory<br>used_memory:865224<br><br>hash保存<br>127.0.0.1:6379&gt; hset 1101000 060 3302000080<br>(integer) 1<br>127.0.0.1:6379&gt; info memory<br># Memory<br>used_memory:865256<br><br>127.0.0.1:6379&gt; object encoding 1101000<br>&quot;ziplist&quot;<br>显示消耗88字节","like_count":0,"discussions":[{"author":{"id":2351949,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/4d/8a26dbb2.jpg","nickname":"枫中浪子","note":"","ucode":"860BEA32059B37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351831,"discussion_content":"我的string测试的也是56字节，版本是5.0.11","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614481339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260436,"user_name":"数学汤家凤","can_delete":false,"product_type":"c1","uid":2029485,"ip_address":"","ucode":"DE84E777C384AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","comment_is_top":false,"comment_ctime":1605004735,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605004735","product_id":100056701,"comment_content":"某些情况下，每个键都不一样<br>那么键所对应的kv都需要32字节的DictEntry，辣么不久半斤八两了嘛","like_count":0},{"had_liked":false,"id":259472,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604734457,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604734457","product_id":100056701,"comment_content":"老师你好，之前看其他的，关于redisObject更复杂，之后有这一块的介绍吗？","like_count":0},{"had_liked":false,"id":258901,"user_name":"hao","can_delete":false,"product_type":"c1","uid":1148845,"ip_address":"","ucode":"997F2B57E2F556","user_header":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","comment_is_top":false,"comment_ctime":1604577970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604577970","product_id":100056701,"comment_content":"根据业务规则选择二级编码的策略","like_count":0},{"had_liked":false,"id":257296,"user_name":"猴子胖胖","can_delete":false,"product_type":"c1","uid":1997465,"ip_address":"","ucode":"EFFE195C126E00","user_header":"https://static001.geekbang.org/account/avatar/00/1e/7a/99/4ac1d891.jpg","comment_is_top":false,"comment_ctime":1603931804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603931804","product_id":100056701,"comment_content":"有个疑惑哈。这里将最大元素个数由64改为1000，没有分析读场景下的性能。请问这个1000的数据是根据实践得出来的可以保证读取速度和内存存储空间的平衡点吗？ziplist在使用hmget时的读取速度是要比hash要慢的。","like_count":0},{"had_liked":false,"id":253403,"user_name":"Lywane","can_delete":false,"product_type":"c1","uid":1446512,"ip_address":"","ucode":"2B0027AA069CE9","user_header":"https://static001.geekbang.org/account/avatar/00/16/12/70/10faf04b.jpg","comment_is_top":false,"comment_ctime":1602728879,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1602728879","product_id":100056701,"comment_content":"redis hash结构使用压缩列表存储时，key保存在哪？","like_count":0,"discussions":[{"author":{"id":1333763,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5a/03/a8398985.jpg","nickname":"王文博","note":"","ucode":"E79E90B9547DD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312719,"discussion_content":"依次是key value key value这样存储 列表的大小除以二就是键值对的大小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602778497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253180,"user_name":"Lywane","can_delete":false,"product_type":"c1","uid":1446512,"ip_address":"","ucode":"2B0027AA069CE9","user_header":"https://static001.geekbang.org/account/avatar/00/16/12/70/10faf04b.jpg","comment_is_top":false,"comment_ctime":1602643384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602643384","product_id":100056701,"comment_content":"我还有一种想法，使用List，也是按照前7位为key，每个list长1000，后3位表示位置","like_count":0},{"had_liked":false,"id":253120,"user_name":"iamjohnnyzhuang","can_delete":false,"product_type":"c1","uid":1015327,"ip_address":"","ucode":"E694C1828907F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/1f/b1d458a9.jpg","comment_is_top":false,"comment_ctime":1602603797,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1602603797","product_id":100056701,"comment_content":"我觉得这节课会更偏向于理论的学习。在实战中，内存往往还是比较廉价的，通过这样的改造虽然降低了内存，但是CPU却会上升 O（1）操作升级为 O（n），另外Hash表存储在单机上，数据也可能有一定倾斜（但是老师设计中后三位限制了Hash的大小，所以应该还好）；更主要的是业务开发的复杂度会上升很多，在大部分业务（特殊业务除外）开发复杂度，维护成本非常重要","like_count":0,"discussions":[{"author":{"id":1073940,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/14/ce95452e.jpg","nickname":"Geek_6da9a5","note":"","ucode":"A75920FC282F93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317284,"discussion_content":"数据量的大小决定了你要选择的方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603527980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251334,"user_name":"sid","can_delete":false,"product_type":"c1","uid":1388092,"ip_address":"","ucode":"3D1F9169A19D29","user_header":"https://static001.geekbang.org/account/avatar/00/15/2e/3c/eae43616.jpg","comment_is_top":false,"comment_ctime":1601469714,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1601469714","product_id":100056701,"comment_content":"”每个 int 编码的 RedisObject 元数据部分占 8 字节，指针部分被直接赋值为 8 字节的整数了。此时，每个 ID 会使用 16 字节，加起来一共是 32 字节。“<br><br>这里是不是算错了？这里一共应该是24字节吧？<br>redisObejct=8字节<br>指针部分被赋值为8字节的整数，这个整数就是photo_obj_id。<br>然后photo_id=8字节<br>一共24字节。<br>老师说的 “指针部分被复制为8字节的整数了。此时，每个ID会使用16个字节”这里重复计算了两次photo_obj_id占用的字节数。<br>所以我觉得一共是24字节,好兄弟们，帮忙看看，是不是我想错了，还是老师写错了?<br><br>","like_count":0,"discussions":[{"author":{"id":1333763,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5a/03/a8398985.jpg","nickname":"王文博","note":"","ucode":"E79E90B9547DD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312720,"discussion_content":"每个id表示的是图片id和图片存储id 就是key 和value 每个16字节 两个就是32字节。另外dictentry中存储的是key value next的指针分别占用8字节 一共24字节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602778788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249743,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1067570,"ip_address":"","ucode":"FE57B69A9CF91D","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/32/23db38ab.jpg","comment_is_top":false,"comment_ctime":1600777341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600777341","product_id":100056701,"comment_content":"学习了","like_count":0},{"had_liked":false,"id":249395,"user_name":"David","can_delete":false,"product_type":"c1","uid":1509145,"ip_address":"","ucode":"EB1306748F7A86","user_header":"https://static001.geekbang.org/account/avatar/00/17/07/19/76943b89.jpg","comment_is_top":false,"comment_ctime":1600647773,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"1600647773","product_id":100056701,"comment_content":"因为 10 位数的图片 ID 和图片存储对象 ID 是 Long 类型整数，所以可以直接用 int 编码的 RedisObject 保存。每个 int 编码的 RedisObject 元数据部分占 8 字节，指针部分被直接赋值为 8 字节的整数了。此时，每个 ID 会使用 16 字节，加起来一共是 32 字节。但是，另外的 32 字节去哪儿了呢？<br>这段话不太理解：<br>上面讲的，int 编码类型针对的是保存的string类型的vlaue值。图片ID 是key和图片存储ID value， int编码时，RedisObject 元数据部分占 8 字节，加上图片存储ID的8字节，总共是16字节。这块为什么说是加起来一共是32字节，难道key也是用int编码的吗？望解答。","like_count":0,"discussions":[{"author":{"id":1581980,"avatar":"https://static001.geekbang.org/account/avatar/00/18/23/9c/5988da90.jpg","nickname":"Tien","note":"","ucode":"629CBCF7213D22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308259,"discussion_content":"每个 id 16 字节。key 是一个 id，val 也是一个 id。那么两个加起来就是 32 字节了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600876967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249157,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1600482913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600482913","product_id":100056701,"comment_content":"底层用压缩列表的数据类型都可保存图片id，List、Set、Sorted Set，这些集合类型保存单值的方法：每个集合类型中保存的个数不要超过转为其它类型的阈值，在对图片id和图片对象编码，使得一个key对应一个集合，部分图片id和图片对象id编码为唯一value。","like_count":0},{"had_liked":false,"id":248698,"user_name":"Geek_51cc93","can_delete":false,"product_type":"c1","uid":1508662,"ip_address":"","ucode":"DB1588A47E8B32","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqic8BwOdWJDVBy2H7X7N77ha6mm2kkJOaBqqcSBfphhTYv16KKuhBicN08pAxYmShTJYKMMwrDs6iaw/132","comment_is_top":false,"comment_ctime":1600265499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600265499","product_id":100056701,"comment_content":"我在第 2 讲中说过，Redis 会使用一个全局哈希表保存所有键值对，哈希表的每一项是一个 dictEntry 的结构体，用来指向一个键值对。dictEntry 结构中有三个 8 字节的指针，分别指向 key、value 以及下一个 dictEntry，三个指针共 24 字节<br><br><br>这个地方说消耗键值对关系就消耗32个字节。  <br> 但是用hash保存的时候却只用16个字节，消耗的不应该是32字节(键值对关系）+实际消耗(存储数据消耗)","like_count":0},{"had_liked":false,"id":248321,"user_name":"托尼斯威特","can_delete":false,"product_type":"c1","uid":1729060,"ip_address":"","ucode":"98A1035527292E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","comment_is_top":false,"comment_ctime":1600101274,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1600101274","product_id":100056701,"comment_content":"对老师的使用场景感兴趣。为什么选用redis存大量的图片id，这些图片都是活跃的吗？如果1亿图片的kv用6.4g 内存，感觉成本挺低的啊，在老师的项目中，最终有多少kv要存？","like_count":0},{"had_liked":false,"id":247700,"user_name":"小白","can_delete":false,"product_type":"c1","uid":1518793,"ip_address":"","ucode":"11FC209D9ED65F","user_header":"https://static001.geekbang.org/account/avatar/00/17/2c/c9/462afe28.jpg","comment_is_top":false,"comment_ctime":1599797587,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1599797587","product_id":100056701,"comment_content":"通过老师的文章学到很多，但是有个小建议，一样把文章中的图片都标一下序号，评论区讨论问题时方便引用。有个疑问，RedisObject是占用16byte，SDS结构体的头部len和alloc分别占总4byte,buff字节数组结尾固定占用1byte，那embstr的临界值不应该是64byte-16byte-4byte-4byte-1byte＝39byte吗，为啥会是44byte？","like_count":0,"discussions":[{"author":{"id":1124495,"avatar":"https://static001.geekbang.org/account/avatar/00/11/28/8f/f4d14c03.jpg","nickname":"Hm_","note":"","ucode":"24C176E95EEA3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343253,"discussion_content":"新版本会根据不同情况使用不同的头部编码方式，压缩了大小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610974753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338413,"discussion_content":"因为新版本的临界值为  64byte-16byte-1byte-1byte -1byte= 45","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609258025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247433,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","comment_is_top":false,"comment_ctime":1599708122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599708122","product_id":100056701,"comment_content":"redis为什么要使用SDS呢？原因如下：<br>对比 C 字符串， sds 有以下特性：<br>可以高效地执行长度计算（strlen）；<br>可以高效地执行追加操作（append）；<br>二进制安全；<br>sds 会为追加操作进行优化：加快追加操作的速度，并降低内存分配的次数，代价是多占用了一些内存，而且这些内存不会被主动释放。<br><br>我的问题：sds的这些优化有意义吗？换句话说大家在使用redis的String时做追加操作、计算字符串长度的频率高吗？如果不高的话其实使用C原生的字符串是不是更好？","like_count":0},{"had_liked":false,"id":246393,"user_name":"篮球不是这么打的","can_delete":false,"product_type":"c1","uid":1749078,"ip_address":"","ucode":"5DC354E8541C6B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/56/fc077ef8.jpg","comment_is_top":false,"comment_ctime":1599306975,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1599306975","product_id":100056701,"comment_content":"老师你好，我想知道用压缩列表的新方案后，内存是节省了，那有没有带来什么缺点呢？","like_count":0,"discussions":[{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303761,"discussion_content":"我猜测是牺牲了性能。比如我们要通过一个field定位value，那么就需要先找到field，而要找到field，则只能遍历压缩列表，时间复杂度是O(n)，value应该是跟在field后面的，所以通过field找value的时间可以忽略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599374370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246032,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1599139028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599139028","product_id":100056701,"comment_content":"如何用集合类型保存单值的键值对？<br>针对文章中的案例场景，有二级编码的解决方案；其他的应用场景，是否也有一些巧妙的解决方案呢？这个我觉得可以多列举些实际案例，我们大多数人还是缺乏这种实践认知的，而且也更能启发我们产生一些新的思路","like_count":0},{"had_liked":false,"id":245551,"user_name":"skying","can_delete":false,"product_type":"c1","uid":1041865,"ip_address":"","ucode":"E7CFF50AB64BB1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/c9/1061582b.jpg","comment_is_top":false,"comment_ctime":1598974793,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598974793","product_id":100056701,"comment_content":"老师你好，后面会有涉及到 redis事件机制相关的讲解吗","like_count":0},{"had_liked":false,"id":245512,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1598964219,"is_pvip":true,"discussion_count":2,"race_medal":1,"score":"1598964219","product_id":100056701,"comment_content":"dictEntry 这个里面的 3个指针到底指向的是哪啊？  key 的指针， value 指针 ,nextDictEntry 指针， 指向的是 SDS 或者 RedisObject 中的哪个位置","like_count":0,"discussions":[{"author":{"id":1552912,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b2/10/0b8afe39.jpg","nickname":"Future","note":"","ucode":"BBB0542C9BBDF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303096,"discussion_content":"redis是用链表来处理hash冲突的，next指向下一个dictEntry的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599140071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1552912,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b2/10/0b8afe39.jpg","nickname":"Future","note":"","ucode":"BBB0542C9BBDF7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303109,"discussion_content":"主要是dictEntry里面的3个指针到底指向的哪个地方的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599143332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303096,"ip_address":""},"score":303109,"extra":""}]}]},{"had_liked":false,"id":245348,"user_name":"yeek","can_delete":false,"product_type":"c1","uid":1020629,"ip_address":"","ucode":"A1C71023113CB9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/d5/699384a0.jpg","comment_is_top":false,"comment_ctime":1598921501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598921501","product_id":100056701,"comment_content":"再一个问题：每个hash存储1000个数据，那么redis的主hash表中 dicEntry 是不是要有十万个，也会占据一部分内存空间吧？","like_count":0},{"had_liked":false,"id":245288,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1598884609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598884609","product_id":100056701,"comment_content":"老师最后给的网址链接打不开<br>既然用压缩列表可以节省内存空间，那么另外两种底层由压缩列表实现的list和sortedset 应该都可以吧，同样应该也要用二级编码的方式来存储吧。使每一个list或sortedset的大小不要超过阈值（对应小于512个或128个），并且value的大小也不要超过阈值（64字节）。","like_count":0},{"had_liked":false,"id":245280,"user_name":"学友的情书","can_delete":false,"product_type":"c1","uid":1273991,"ip_address":"","ucode":"260960EF2B7241","user_header":"https://static001.geekbang.org/account/avatar/00/13/70/87/f60f5cf9.jpg","comment_is_top":false,"comment_ctime":1598883358,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598883358","product_id":100056701,"comment_content":"第一篇基础能理解，数据结构有点顶不住了🤩","like_count":0},{"had_liked":false,"id":245277,"user_name":"老纪","can_delete":false,"product_type":"c1","uid":1227735,"ip_address":"","ucode":"BECF11D225D260","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/d7/91da132b.jpg","comment_is_top":false,"comment_ctime":1598882696,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1598882696","product_id":100056701,"comment_content":"我想知道最后那个保证了 Hash 集合的元素个数不超过 1000，是怎么算出来的","like_count":0,"discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302579,"discussion_content":"去了 后三位，最大值是 999.。。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598964392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","nickname":"mqray","note":"","ucode":"15664507AD7033","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304194,"discussion_content":"我也想问这个问题来着... 看楼上的意思是 这个集合中最多存在1000个entry 图片id的前七位相同导致他们在同一个集合中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599492883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1298139,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ce/db/bb1821b3.jpg","nickname":"王      慈","note":"","ucode":"EACC3D086674D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303329,"discussion_content":"000 - 999 => 1000 个数...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599212213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245261,"user_name":"吕","can_delete":false,"product_type":"c1","uid":1210890,"ip_address":"","ucode":"8F08E2CB81C4C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","comment_is_top":false,"comment_ctime":1598878808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598878808","product_id":100056701,"comment_content":"其实我认为这就是解决实际问题中的实现方法的选择，怎么能够根据实际的业务场景，选择一个合适或者说各方面都比较均衡的方式，不能说是为了省内存，就直接抛弃字符串了","like_count":0},{"had_liked":false,"id":245226,"user_name":"一大只😴","can_delete":false,"product_type":"c1","uid":1310960,"ip_address":"","ucode":"92F3D2B7F63568","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/f0/08409e78.jpg","comment_is_top":false,"comment_ctime":1598868605,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1598868605","product_id":100056701,"comment_content":"不懂就问，老师，以photo_id:1101000051为例，key（photo_id）是字符串，那应该按SDS算，那元数据（8）+ptr（8）+SDS（4+4+8+1）应该是33，key+value+hash表 应该是49+32=81","like_count":0,"discussions":[{"author":{"id":1310960,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/f0/08409e78.jpg","nickname":"一大只😴","note":"","ucode":"92F3D2B7F63568","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302444,"discussion_content":"我看key是字符串，value是int，所以想,key应该是怎么存的？老师在下面全局hash表中value对应的key是16b，就有点儿不明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598926553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302321,"discussion_content":"老师讲的案例为整数，所以底层存储的省int编码类型，你计算的省raw类型；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598878794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245168,"user_name":"叶子。","can_delete":false,"product_type":"c1","uid":1393004,"ip_address":"","ucode":"3EF2CC36F0D09A","user_header":"https://static001.geekbang.org/account/avatar/00/15/41/6c/687c5dfb.jpg","comment_is_top":false,"comment_ctime":1598853154,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598853154","product_id":100056701,"comment_content":"我记得之前讲的是<br>1）字典中保存的键和值的大小都小于64字节<br>2）字典中键值对的个数小于512个<br>这两个是配置的默认值吗，为什么这里又可以设置为1000呢？","like_count":0,"discussions":[{"author":{"id":1336634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","nickname":"mqray","note":"","ucode":"15664507AD7033","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304195,"discussion_content":"可以修改的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599492920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245166,"user_name":"土豆白菜","can_delete":false,"product_type":"c1","uid":1029749,"ip_address":"","ucode":"D1551C729D33E0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/75/32c19395.jpg","comment_is_top":false,"comment_ctime":1598852787,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598852787","product_id":100056701,"comment_content":"1101000 060 3302000080<br>前七位相同的图片id放进一个hash,也就是说每个hash有999个key-value<br>键是1101000<br>key-value是:001-3302000080<br>key-value是:002-..........<br>.....<br>key-value是:060-..........<br>key-value是:062-..........<br>.......<br>key-value是:998-..........<br>key-value是:999-..........<br><br>下一个hash就是1101001了","like_count":0},{"had_liked":false,"id":245163,"user_name":"可怜大灰狼","can_delete":false,"product_type":"c1","uid":1928373,"ip_address":"","ucode":"6CA9D6D460B967","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/b5/32374f93.jpg","comment_is_top":false,"comment_ctime":1598852494,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598852494","product_id":100056701,"comment_content":"老师今天说的，在看源码时都发现了，很高兴。同时也看到redis在计算used_memory，使用了一个小手段来对齐8字节。<br> zmalloc.c中有这样的代码：if (_n&amp;(sizeof(long)-1)) _n += sizeof(long)-(_n&amp;(sizeof(long)-1));","like_count":0},{"had_liked":false,"id":245112,"user_name":"Spring4J","can_delete":false,"product_type":"c1","uid":1645430,"ip_address":"","ucode":"06F056085A2564","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","comment_is_top":false,"comment_ctime":1598839311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598839311","product_id":100056701,"comment_content":"老师，dictEntry中的next指针是指向全局哈希表中为了解决哈希冲突而生成的拉链的next吗？<br>","like_count":0},{"had_liked":false,"id":245106,"user_name":"君哥聊技术","can_delete":false,"product_type":"c1","uid":1325816,"ip_address":"","ucode":"2C9A22BCE4C79E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","comment_is_top":false,"comment_ctime":1598837074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598837074","product_id":100056701,"comment_content":"我觉得hash就是最好的保存方式了，列表、集合、有序集合也都可以存，但是查找的时间复杂度都高于hash","like_count":0},{"had_liked":false,"id":245091,"user_name":"服务器宕机了","can_delete":false,"product_type":"c1","uid":1136769,"ip_address":"","ucode":"E3444EF0DF4350","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/81/10e629e8.jpg","comment_is_top":false,"comment_ctime":1598832688,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598832688","product_id":100056701,"comment_content":"请问如果使用二级编码这种方式，为了一定程度减少hash冲突。是不是又需要适当改变图片ID的生成方式，比如加长或者加入字符串的形式","like_count":0},{"had_liked":false,"id":245078,"user_name":"Spring4J","can_delete":false,"product_type":"c1","uid":1645430,"ip_address":"","ucode":"06F056085A2564","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","comment_is_top":false,"comment_ctime":1598809508,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1598809508","product_id":100056701,"comment_content":"压缩列表实现哈希类型的数据时，一个键值对应该占用压缩列表的两个entry吧老师？","like_count":0,"discussions":[{"author":{"id":2028946,"avatar":"","nickname":"Geek3443","note":"","ucode":"C6351639FD0633","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306716,"discussion_content":"           /* Push new field/value pair onto the tail of the ziplist */\n            zl = ziplistPush(zl, (unsigned char*)field, sdslen(field),\n                    ZIPLIST_TAIL);\n            zl = ziplistPush(zl, (unsigned char*)value, sdslen(value),\n                    ZIPLIST_TAIL);\n看Redis源码是会分别把key和value的entry放入压缩链表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600353351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1169313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","nickname":"bigben","note":"","ucode":"DBD15A6C8E2590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2028946,"avatar":"","nickname":"Geek3443","note":"","ucode":"C6351639FD0633","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386940,"discussion_content":"这样的话不会只占16个字节了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627900227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306716,"ip_address":""},"score":386940,"extra":""}]},{"author":{"id":1013093,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/75/65/2a7f8212.jpg","nickname":"小明","note":"","ucode":"31A24C60B4CC5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389909,"discussion_content":"这个例子作为数据长度的分析非常好, 但是在实际的项目组中不要这么做, 将string改成 hash会引入大key,会带来其他的问题,  在项目中遇到过这个问题,最后把hash拆成string 才解决. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629490455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}