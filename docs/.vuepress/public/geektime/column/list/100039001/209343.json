{"id":209343,"title":"55 | 享元模式（下）：剖析享元模式在Java Integer、String中的应用","content":"<p>上一节课，我们通过棋牌游戏和文本编辑器这样两个实际的例子，学习了享元模式的原理、实现以及应用场景。用一句话总结一下，享元模式中的“享元”指被共享的单元。享元模式通过复用对象，以达到节省内存的目的。</p><p>今天，我再用一节课的时间带你剖析一下，享元模式在Java Integer、String中的应用。如果你不熟悉Java编程语言，那也不用担心看不懂，因为今天的内容主要还是介绍设计思路，跟语言本身关系不大。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>享元模式在Java Integer中的应用</h2><p>我们先来看下面这样一段代码。你可以先思考下，这段代码会输出什么样的结果。</p><pre><code>Integer i1 = 56;\nInteger i2 = 56;\nInteger i3 = 129;\nInteger i4 = 129;\nSystem.out.println(i1 == i2);\nSystem.out.println(i3 == i4);\n</code></pre><p>如果不熟悉Java语言，你可能会觉得，i1和i2值都是56，i3和i4值都是129，i1跟i2值相等，i3跟i4值相等，所以输出结果应该是两个true。这样的分析是不对的，主要还是因为你对Java语法不熟悉。要正确地分析上面的代码，我们需要弄清楚下面两个问题：</p><ul>\n<li>如何判定两个Java对象是否相等（也就代码中的“==”操作符的含义）？</li>\n<li>什么是自动装箱（Autoboxing）和自动拆箱（Unboxing）？</li>\n</ul><p>在<a href=\"https://time.geekbang.org/column/article/166698\">加餐一</a>中，我们讲到，Java为基本数据类型提供了对应的包装器类型。具体如下所示：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/5f/a0/5f93c0412c9ee8b563383c3583693ba0.jpg?wh=1543*1303\" alt=\"\"></p><p>所谓的自动装箱，就是自动将基本数据类型转换为包装器类型。所谓的自动拆箱，也就是自动将包装器类型转化为基本数据类型。具体的代码示例如下所示：</p><pre><code>Integer i = 56; //自动装箱\nint j = i; //自动拆箱\n</code></pre><p>数值56是基本数据类型int，当赋值给包装器类型（Integer）变量的时候，触发自动装箱操作，创建一个Integer类型的对象，并且赋值给变量i。其底层相当于执行了下面这条语句：</p><pre><code>Integer i = 59；底层执行了：Integer i = Integer.valueOf(59);\n</code></pre><p>反过来，当把包装器类型的变量i，赋值给基本数据类型变量j的时候，触发自动拆箱操作，将i中的数据取出，赋值给j。其底层相当于执行了下面这条语句：</p><pre><code>int j = i; 底层执行了：int j = i.intValue();\n</code></pre><p>弄清楚了自动装箱和自动拆箱，我们再来看，如何判定两个对象是否相等？不过，在此之前，我们先要搞清楚，Java对象在内存中是如何存储的。我们通过下面这个例子来说明一下。</p><pre><code>User a = new User(123, 23); // id=123, age=23\n</code></pre><p>针对这条语句，我画了一张内存存储结构图，如下所示。a存储的值是User对象的内存地址，在图中就表现为a指向User对象。</p><p><img src=\"https://static001.geekbang.org/resource/image/04/dc/04f879d7d72b96965f4e06a21ff13bdc.jpg?wh=2103*524\" alt=\"\"></p><p>当我们通过“==”来判定两个对象是否相等的时候，实际上是在判断两个局部变量存储的地址是否相同，换句话说，是在判断两个局部变量是否指向相同的对象。</p><p>了解了Java的这几个语法之后，我们重新看一下开头的那段代码。</p><pre><code>Integer i1 = 56;\nInteger i2 = 56;\nInteger i3 = 129;\nInteger i4 = 129;\nSystem.out.println(i1 == i2);\nSystem.out.println(i3 == i4);\n</code></pre><p>前4行赋值语句都会触发自动装箱操作，也就是会创建Integer对象并且赋值给i1、i2、i3、i4这四个变量。根据刚刚的讲解，i1、i2尽管存储的数值相同，都是56，但是指向不同的Integer对象，所以通过“==”来判定是否相同的时候，会返回false。同理，i3==i4判定语句也会返回false。</p><p>不过，上面的分析还是不对，答案并非是两个false，而是一个true，一个false。看到这里，你可能会比较纳闷了。实际上，这正是因为Integer用到了享元模式来复用对象，才导致了这样的运行结果。当我们通过自动装箱，也就是调用valueOf()来创建Integer对象的时候，如果要创建的Integer对象的值在-128到127之间，会从IntegerCache类中直接返回，否则才调用new方法创建。看代码更加清晰一些，Integer类的valueOf()函数的具体代码如下所示：</p><pre><code>public static Integer valueOf(int i) {\n    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n</code></pre><p>实际上，这里的IntegerCache相当于，我们上一节课中讲的生成享元对象的工厂类，只不过名字不叫xxxFactory而已。我们来看它的具体代码实现。这个类是Integer的内部类，你也可以自行查看JDK源码。</p><pre><code>/**\n * Cache to support the object identity semantics of autoboxing for values between\n * -128 and 127 (inclusive) as required by JLS.\n *\n * The cache is initialized on first usage.  The size of the cache\n * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option.\n * During VM initialization, java.lang.Integer.IntegerCache.high property\n * may be set and saved in the private system properties in the\n * sun.misc.VM class.\n */\nprivate static class IntegerCache {\n    static final int low = -128;\n    static final int high;\n    static final Integer cache[];\n\n    static {\n        // high value may be configured by property\n        int h = 127;\n        String integerCacheHighPropValue =\n            sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);\n        if (integerCacheHighPropValue != null) {\n            try {\n                int i = parseInt(integerCacheHighPropValue);\n                i = Math.max(i, 127);\n                // Maximum array size is Integer.MAX_VALUE\n                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            } catch( NumberFormatException nfe) {\n                // If the property cannot be parsed into an int, ignore it.\n            }\n        }\n        high = h;\n\n        cache = new Integer[(high - low) + 1];\n        int j = low;\n        for(int k = 0; k &lt; cache.length; k++)\n            cache[k] = new Integer(j++);\n\n        // range [-128, 127] must be interned (JLS7 5.1.7)\n        assert IntegerCache.high &gt;= 127;\n    }\n\n    private IntegerCache() {}\n}\n</code></pre><p>为什么IntegerCache只缓存-128到127之间的整型值呢？</p><p>在IntegerCache的代码实现中，当这个类被加载的时候，缓存的享元对象会被集中一次性创建好。毕竟整型值太多了，我们不可能在IntegerCache类中预先创建好所有的整型值，这样既占用太多内存，也使得加载IntegerCache类的时间过长。所以，我们只能选择缓存对于大部分应用来说最常用的整型值，也就是一个字节的大小（-128到127之间的数据）。</p><p>实际上，JDK也提供了方法来让我们可以自定义缓存的最大值，有下面两种方式。如果你通过分析应用的JVM内存占用情况，发现-128到255之间的数据占用的内存比较多，你就可以用如下方式，将缓存的最大值从127调整到255。不过，这里注意一下，JDK并没有提供设置最小值的方法。</p><pre><code>//方法一：\n-Djava.lang.Integer.IntegerCache.high=255\n//方法二：\n-XX:AutoBoxCacheMax=255\n</code></pre><p>现在，让我们再回到最开始的问题，因为56处于-128和127之间，i1和i2会指向相同的享元对象，所以i1==i2返回true。而129大于127，并不会被缓存，每次都会创建一个全新的对象，也就是说，i3和i4指向不同的Integer对象，所以i3==i4返回false。</p><p>实际上，除了Integer类型之外，其他包装器类型，比如Long、Short、Byte等，也都利用了享元模式来缓存-128到127之间的数据。比如，Long类型对应的LongCache享元工厂类及valueOf()函数代码如下所示：</p><pre><code>private static class LongCache {\n    private LongCache(){}\n\n    static final Long cache[] = new Long[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i &lt; cache.length; i++)\n            cache[i] = new Long(i - 128);\n    }\n}\n\npublic static Long valueOf(long l) {\n    final int offset = 128;\n    if (l &gt;= -128 &amp;&amp; l &lt;= 127) { // will cache\n        return LongCache.cache[(int)l + offset];\n    }\n    return new Long(l);\n}\n</code></pre><p>在我们平时的开发中，对于下面这样三种创建整型对象的方式，我们优先使用后两种。</p><pre><code>Integer a = new Integer(123);\nInteger a = 123;\nInteger a = Integer.valueOf(123);\n</code></pre><p>第一种创建方式并不会使用到IntegerCache，而后面两种创建方法可以利用IntegerCache缓存，返回共享的对象，以达到节省内存的目的。举一个极端一点的例子，假设程序需要创建1万个-128到127之间的Integer对象。使用第一种创建方式，我们需要分配1万个Integer对象的内存空间；使用后两种创建方式，我们最多只需要分配256个Integer对象的内存空间。</p><h2>享元模式在Java String中的应用</h2><p>刚刚我们讲了享元模式在Java Integer类中的应用，现在，我们再来看下，享元模式在Java String类中的应用。同样，我们还是先来看一段代码，你觉得这段代码输出的结果是什么呢？</p><pre><code>String s1 = &quot;小争哥&quot;;\nString s2 = &quot;小争哥&quot;;\nString s3 = new String(&quot;小争哥&quot;);\n\nSystem.out.println(s1 == s2);\nSystem.out.println(s1 == s3);\n</code></pre><p>上面代码的运行结果是：一个true，一个false。跟Integer类的设计思路相似，String类利用享元模式来复用相同的字符串常量（也就是代码中的“小争哥”）。JVM会专门开辟一块存储区来存储字符串常量，这块存储区叫作“字符串常量池”。上面代码对应的内存存储结构如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/2d/2dfc18575c22efccca191c566b24a22d.jpg?wh=1963*1393\" alt=\"\"></p><p>不过，String类的享元模式的设计，跟Integer类稍微有些不同。Integer类中要共享的对象，是在类加载的时候，就集中一次性创建好的。但是，对于字符串来说，我们没法事先知道要共享哪些字符串常量，所以没办法事先创建好，只能在某个字符串常量第一次被用到的时候，存储到常量池中，当之后再用到的时候，直接引用常量池中已经存在的即可，就不需要再重新创建了。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>在Java Integer的实现中，-128到127之间的整型对象会被事先创建好，缓存在IntegerCache类中。当我们使用自动装箱或者valueOf()来创建这个数值区间的整型对象时，会复用IntegerCache类事先创建好的对象。这里的IntegerCache类就是享元工厂类，事先创建好的整型对象就是享元对象。</p><p>在Java String类的实现中，JVM开辟一块存储区专门存储字符串常量，这块存储区叫作字符串常量池，类似于Integer中的IntegerCache。不过，跟IntegerCache不同的是，它并非事先创建好需要共享的对象，而是在程序的运行期间，根据需要来创建和缓存字符串常量。</p><p>除此之外，这里我再补充强调一下。</p><p>实际上，享元模式对JVM的垃圾回收并不友好。因为享元工厂类一直保存了对享元对象的引用，这就导致享元对象在没有任何代码使用的情况下，也并不会被JVM垃圾回收机制自动回收掉。因此，在某些情况下，如果对象的生命周期很短，也不会被密集使用，利用享元模式反倒可能会浪费更多的内存。所以，除非经过线上验证，利用享元模式真的可以大大节省内存，否则，就不要过度使用这个模式，为了一点点内存的节省而引入一个复杂的设计模式，得不偿失啊。</p><h2>课堂讨论</h2><p>IntegerCache只能缓存事先指定好的整型对象，那我们是否可以借鉴String的设计思路，不事先指定需要缓存哪些整型对象，而是在程序的运行过程中，当用到某个整型对象的时候，创建好放置到IntegerCache，下次再被用到的时候，直接从IntegerCache中返回呢？</p><p>如果可以这么做，请你按照这个思路重新实现一下IntegerCache类，并且能够做到在某个对象没有任何代码使用的时候，能被JVM垃圾回收机制回收掉。</p><p>欢迎留言和我分享你的想法，如果有收获，欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":185867,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1583716960,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"306526394976","product_id":100039001,"comment_content":"享元池用weak reference持有享元对象","like_count":72,"discussions":[{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252288,"discussion_content":"从学术上是的，从使用上，大部分人碰不到这么严苛的场景啦。如果真的玩字符串之类的优化，还有很多玩法，类似用ThreadLocal做线程安全的StringBuilder char[]数组复用，等等。\n首先现在的内存是一个比较低价的资源，其次gc相关的优化越来越多，用g1回收器的应该就没有full gc了（g1情况下还有full gc一般是代码有问题）,如果说ygc比较慢，11的zgc直接一步到位了。反正我生产从g1切zgc,ygc差不多从80ms直接到20ms以下。\n\n权衡一下利弊就好了，现在比起20年前，留给我们开发的选择已经多了很多，服务器资源说白了变得宽松很多了。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1588148838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","nickname":"小情绪","note":"","ucode":"92D8081DB8DB45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309808,"discussion_content":"没太理解哦，被weak reference持有的对象只要遇到gc就会被回收，可题目的问题是：不被使用的时候可以被回收。如果gc的时候，对象还在使用当中，也被回收了，感觉答案对不上呀～","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1601449930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","nickname":"小情绪","note":"","ucode":"92D8081DB8DB45","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328342,"discussion_content":"这里的不被使用应该是对象的引用是null吧，对象被使用应该是有强引用。所以被使用的时候发生gc不会被回收。\n下面栗子来证明我的说法\n\nStudent s = new Student(&#34;张三&#34;,11);\nWeakReference<Student> reference = new WeakReference<Student>(s);\nSystem.gc();\nSystem.out.println(reference.get());//返回不是null\ns = null;\nSystem.gc();\nSystem.out.println(reference.get());//返回null","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1606124872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309808,"ip_address":""},"score":328342,"extra":""},{"author":{"id":1836737,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epzyvicVqHsRUxUYgibPeicUibELEAH64hUxG9kMgQ7bmlsVnKK5hYW1XMic6uGxmRWFb2rRwKey0rIVlw/132","nickname":"刘凯旋","note":"","ucode":"C803A93E22B90B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","nickname":"小情绪","note":"","ucode":"92D8081DB8DB45","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571648,"discussion_content":"对象被业务代码使用时,业务代码持有对象强引用,对象不会被回收; 当业务代码都不持有对象引用时, 对象只被享元池持有,享元池设计成WeakHashMap, 是weak引用,可以被JVM回收.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652328565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309808,"ip_address":""},"score":571648,"extra":""}]},{"author":{"id":1123103,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/1f/6452b2e8.jpg","nickname":"刘清斌","note":"","ucode":"775B053AF87B53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200805,"discussion_content":"是不是应该软引用更好一点，因为感觉弱应用太容易被回收","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583725458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1123103,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/1f/6452b2e8.jpg","nickname":"刘清斌","note":"","ucode":"775B053AF87B53","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200931,"discussion_content":"我偏向使用弱引用。因为我们是老项目，fgc的开销大，所以会希望尽量少的fgc。另外也希望减少缓存空间整体的大小，以便更快定位到目标缓存对象的ref。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583742773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":200805,"ip_address":""},"score":200931,"extra":""}]}]},{"had_liked":false,"id":186740,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1583915969,"is_pvip":true,"discussion_count":6,"race_medal":0,"score":"194857444289","product_id":100039001,"comment_content":"谢谢各位的讨论，今天学到了软引用，弱引用，和WeakHashMap。内存吃紧的时候可以考虑使用WeakHashMap。<br>https:&#47;&#47;www.baeldung.com&#47;java-weakhashmap<br>https:&#47;&#47;www.baeldung.com&#47;java-soft-references<br>https:&#47;&#47;www.baeldung.com&#47;java-weak-reference","like_count":46,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476580,"discussion_content":"是有这个问题 我改下 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575428793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1173894,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","nickname":"heyman","note":"","ucode":"92EF9EF1B1B1B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210858,"discussion_content":"假如发起一次站内转账，A转账给B。按照文章里的设计，能保证金额数据一致性，但是只有一笔帐单。如果A和B都需要看到这一笔转账记录，这要怎么设计呢？有人来讨论一下吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584783930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1064149,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2PtNr4sjKLYNnibicnwWcZicmQbTguUK9ZaCVBLYmiaSYFRjRrUP08jHO9N7KB2adDw87ywccexMJh8yCQ84q5gEzg/132","nickname":"阿固","note":"","ucode":"F16B99FED58993","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1173894,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","nickname":"heyman","note":"","ucode":"92EF9EF1B1B1B3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264895,"discussion_content":"AND（fromWalletId = walletId OR toWalletId = walletId）这样收付帐户都能查到这条记录，如果要分类再加 AND type = ?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589356611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":210858,"ip_address":""},"score":264895,"extra":""}]},{"author":{"id":1266233,"avatar":"https://static001.geekbang.org/account/avatar/00/13/52/39/2211b1a2.jpg","nickname":"Z-ll","note":"","ucode":"68A75A53D1455E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87204,"discussion_content":"我也想问，目前的是改过的吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576652273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283998,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/9e/bea3530a.jpg","nickname":"︶ㄣж孤月☆┑oоО","note":"","ucode":"B0518642880348","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72765,"discussion_content":"虚拟钱包的交易流水表  改好了吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575525562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1282715,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/9b/65f98192.jpg","nickname":"Wh1","note":"","ucode":"6D28506B99A285","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1283998,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/9e/bea3530a.jpg","nickname":"︶ㄣж孤月☆┑oоО","note":"","ucode":"B0518642880348","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193602,"discussion_content":"并没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583158413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72765,"ip_address":""},"score":193602,"extra":""}]},{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544246,"discussion_content":"现在是已经删除表1了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641448357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2339329,"avatar":"https://static001.geekbang.org/account/avatar/00/23/b2/01/c6ecebb6.jpg","nickname":"Hyzwh","note":"","ucode":"6F30C77F8E5B1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392361,"discussion_content":"看他怎么耍就好了，不一定全是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630981904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1537865,"avatar":"https://static001.geekbang.org/account/avatar/00/17/77/49/445eea2d.jpg","nickname":"SochiLee","note":"","ucode":"47596594EDF4D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353682,"discussion_content":"好像作者修改的结果是：两种表设计方案比较和实现最终一致性的部分直接被删除了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615189108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1537865,"avatar":"https://static001.geekbang.org/account/avatar/00/17/77/49/445eea2d.jpg","nickname":"SochiLee","note":"","ucode":"47596594EDF4D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371227,"discussion_content":"没有看到之前的方案，好像现在意思表达还比较直观","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619688322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353682,"ip_address":""},"score":371227,"extra":""}]},{"author":{"id":1031734,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/36/abb7bfe3.jpg","nickname":"xenoblade3","note":"","ucode":"620DD0491EEFF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263124,"discussion_content":"我也有这个疑问，这里的repository命名为transaction，那看来就是要把上层流水和底层虚拟钱包流水做原子操作，即便底层增加一种类型表示转账，那也不是存储一条记录，涉及之前说的分布式事务问题。还有先记录流水，打上未执行完标志，对钱包账号进行操作，如果钱包操作失败抛出异常，这时候已经成功的钱包操作的数据库记录回滚也会有分布式事务问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589176082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257737,"discussion_content":"嗯，感觉这个有点自相矛盾了，希望争哥尽快修复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588602430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/a6/69907ec1.jpg","nickname":"李伟","note":"","ucode":"F0EF60EB250B20","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231995,"discussion_content":"其实这个问题不影响观感，在代码里可以体现from...和to...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586844607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005381,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/45/c418ea5c.jpg","nickname":"指尖流逝","note":"","ucode":"417009F674FAF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208724,"discussion_content":"我也有这个疑问，目前的图好像还没改？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584578294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272492,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6a/ac/e9e2e880.jpg","nickname":"ろろ💫","note":"","ucode":"7E683E8DE17B6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204722,"discussion_content":"如果这里要改的话，虚拟钱包交易流水应该怎么改呢？把一个虚拟钱包账号改成入账钱包账号和出账钱包账号吗？这样的话算不算底层虚拟钱包感知到了交易类型呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584200737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023980,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9f/ec/97c0f68c.jpg","nickname":"所长是我小李","note":"","ucode":"0764C0BDC710F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193693,"discussion_content":"从这一节开始凌乱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583160205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116144,"discussion_content":"我和你一样有种断层感，前后对应的不紧凑。不过，关于贫血、充血模型的思考还是很有启发的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578055010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1730626,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvm1JYIDcS74s4cEYxA1PXMqjortVXEjUKyGQcPvibNJ4EAuksIa6uoHgr6G1yRqAM2KtP3yicKgTA/132","nickname":"小妖","note":"","ucode":"49C01DBFADF101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87365,"discussion_content":"我也有疑问，看到那个地方的表设计当时就蒙圈了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576664481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186139,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1583765310,"is_pvip":false,"discussion_count":7,"race_medal":1,"score":"194857293630","product_id":100039001,"comment_content":"如果IntegerCache不事先指定缓存哪些整形对象，那么每次用到的时候去new一个，这样会稍微影响一些效率，尤其在某些情况下如果常用到-128~127之间的数，可能会不停的new&#47;delete, 不过这个性能问题在大部分时候影响不是很大，所以按照string的设计思路也是可行的，<br>按照这个思路设计IntegerCache类的话，如下<br>private static class IntegerCache {<br><br>    public static final WeakHashMap&lt;Integer, WeakReference&lt;Integer&gt;&gt; cache = <br>        new WeakHashMap&lt;Integer, WeakReference&lt;Integer&gt;&gt;(); &#47;&#47;也可以提前分配容量<br><br>    private IntegerCache(){}<br>}<br><br>public static Integer valueOf(int i) { <br>    final WeakReference&lt;Integer&gt; cached = IntegerCache.cache.get(i);<br>    if (cached != null) {<br>        final Integer value = cached.get(i);<br>        if (value != null) {<br>            return value;<br>        }<br>    }<br>    WeakReference&lt;Integer&gt; val = new WeakReference&lt;Integer&gt;(i);<br>    IntegerCache.cache.put(i, val);<br>    return val.get(); <br>}","like_count":46,"discussions":[{"author":{"id":1119593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","nickname":"南山","note":"","ucode":"94656FE4A6C378","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67268,"discussion_content":"个人理解是可以在应用层有对应的assember，由他来做do和dto之间的转换，do可以在领域服务内部完善其他不需要暴露出去的信息，进一步执行业务逻辑，再由assember 转成dto给到用户接口层","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575126019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65667,"discussion_content":"这里有个小问题，就是do转为dto这个过程，应该是在应用层完成还是领域层完成\n\n这里应该是po(persist object) --> bo(business object)的过程吧,个人认为应该放在应用层完成,Domain层仅专注自身业务.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575019501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1139645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","nickname":"丿淡忘","note":"","ucode":"604AE01961A026","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66518,"discussion_content":"。。。ddd里面没有bo  领域模型  po和do的的转换是在领域服务里面实现，这样保证了do的解耦可移植性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575080683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65667,"ip_address":""},"score":66518,"extra":""},{"author":{"id":1236163,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","nickname":"Flash","note":"","ucode":"E285075C9E0B02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1139645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","nickname":"丿淡忘","note":"","ucode":"604AE01961A026","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":72466,"discussion_content":"意思是do和po转换放在do里面吗？那do也只是说跟service多解耦了一个covert函数，do还要依赖po，这样做有必要吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575475762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66518,"ip_address":""},"score":72466,"extra":""},{"author":{"id":1139645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","nickname":"丿淡忘","note":"","ucode":"604AE01961A026","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1236163,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","nickname":"Flash","note":"","ucode":"E285075C9E0B02","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72525,"discussion_content":"不是呀，在domainservice转换，domain model 是独立的 处理自身业务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575500989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72466,"ip_address":""},"score":72525,"extra":""}]},{"author":{"id":1620113,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b8/91/8a5c3ec6.jpg","nickname":"王一之","note":"","ucode":"7E13332BAEC2F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72685,"discussion_content":"这里重点应该是充血模型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575515705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077406,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","nickname":"jaryoung","note":"","ucode":"6E72D107DB7E51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68976,"discussion_content":"ddd课程也不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575249190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1139645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","nickname":"丿淡忘","note":"","ucode":"604AE01961A026","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1077406,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","nickname":"jaryoung","note":"","ucode":"6E72D107DB7E51","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70491,"discussion_content":"不瞒你说  我也看了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575361713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":68976,"ip_address":""},"score":70491,"extra":""}]},{"author":{"id":1746026,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJgXIicettSIeIDpL2zt39Zb0fdBwOlibdia5AjWITYQZCWPGDPdFKKe9UiahgROkAyoES7niaobZatvQA/132","nickname":"乐观的鹏程","note":"","ucode":"FA527FA2C4204B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65532,"discussion_content":"同希望老师指点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575009761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188907,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1584432988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"108958615388","product_id":100039001,"comment_content":"设计模式_55:<br># 作业<br>原来还有个WeakHashMap，学习了。<br><br># 感想<br>自己尝试了写了一个，然后分别测试了10,000次、100,000次，1,000,000次创建，value从1-100，100-200，10000-10100，发现不管哪个场景，总是JVM的Integer时间更短，我写的要3倍左右的时间，不禁感叹，Java二十几年了，大部分的优化应该都做了，不要期望自己花20分钟能改出超过JVM的性能。","like_count":26},{"had_liked":false,"id":185908,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1583723431,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"104662938535","product_id":100039001,"comment_content":"课后题。因为整型对象长度固定，且内容固定，可以直接申请一块连续的内存地址，可以加快访问，节省内存？而String类不行。","like_count":25,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206714,"discussion_content":"integer频繁的创建、回收，会造成内存碎片，还不如申请一块连续内存，事先创建好。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1584432585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186386,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1583833145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44533506105","product_id":100039001,"comment_content":"我勒个擦 ,这好像是我碰到的两道面试题,包装和拆箱这道题简直就是个坑,有踩坑的举个手","like_count":11},{"had_liked":false,"id":185974,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1583735456,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"40238441120","product_id":100039001,"comment_content":"抛砖引玉实现了一个有限范围的缓存（-128~2048383(127 * 127 * 127)）<br>public class IntegerCache {<br>    private static final int bucketSize = 127;<br>    private static final int level1Max = bucketSize * bucketSize;<br>    private static final int max = bucketSize * bucketSize * bucketSize;<br>    private static final WeakHashMap&lt;Integer, WeakHashMap&lt;Integer, WeakHashMap&lt;Integer,WeakReference&lt;Integer&gt;&gt;&gt;&gt; CACHE = new WeakHashMap&lt;&gt;();<br><br>    public static Integer intern(int integer) {<br>        if (integer &lt;= 127) {<br>            return integer;<br>        }<br><br>        if (integer &gt; max) {<br>            return integer;<br>        }<br><br>        synchronized (CACHE) {<br>            Integer l1 = 0;<br>            int tmp = integer;<br>            if(integer &gt;= level1Max){<br>                l1 = integer &#47; level1Max;<br>                integer -= level1Max;<br>            }<br>            Integer l2 = integer &#47; bucketSize;<br>            Integer mod = integer % bucketSize;<br>            WeakHashMap&lt;Integer, WeakHashMap&lt;Integer,WeakReference&lt;Integer&gt;&gt;&gt; level1 = CACHE.computeIfAbsent(l1, val -&gt; new WeakHashMap&lt;&gt;());<br>            WeakHashMap&lt;Integer,WeakReference&lt;Integer&gt;&gt; level2 =  level1.computeIfAbsent(l2, val -&gt; new WeakHashMap&lt;&gt;());<br>            WeakReference&lt;Integer&gt; cache = level2.computeIfAbsent(mod, val -&gt; new WeakReference&lt;&gt;(tmp));<br>            Integer val = cache.get();<br>            if (val == null) {<br>                val = integer;<br>                level2.put(mod, new WeakReference&lt;&gt;(val));<br>            }<br>            return val;<br>        }<br><br>    }<br><br>    public static int integersInCache() {<br>        synchronized (CACHE) {<br>            int sum = CACHE.size();<br>            for (Integer key : CACHE.keySet()) {<br>                WeakHashMap&lt;Integer, WeakHashMap&lt;Integer,WeakReference&lt;Integer&gt;&gt;&gt; tmp = CACHE.get(key);<br>                sum += tmp.size();<br>                for(Integer l2Key : tmp.keySet()) {<br>                    sum += tmp.get(l2Key).size();<br>                }<br>            }<br>            return sum;<br>        }<br>    }<br>}","like_count":10,"discussions":[{"author":{"id":2703237,"avatar":"","nickname":"sean","note":"","ucode":"B517C6A09A4F07","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401743,"discussion_content":"加锁效率是不是会很慢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633709176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185900,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1583722432,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"35943460800","product_id":100039001,"comment_content":"突然理解OC中NSString等也用到了享元设计模式.","like_count":9,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204265,"discussion_content":"好像大部分语言都是这样设计的，那种硬编码的字符串，编译器会分配同一块内存存放数据。只不过我以前也不知道他就叫这个名字:享元模式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584148948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325514,"discussion_content":"知识互通的美感出来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605335346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185927,"user_name":"，","can_delete":false,"product_type":"c1","uid":1701867,"ip_address":"","ucode":"A5543C8DFEB198","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","comment_is_top":false,"comment_ctime":1583725520,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"27353529296","product_id":100039001,"comment_content":"补充 深入理解java虚拟机 里的两道有意思的题,请思考输出结果:<br>自动装箱 拆箱:<br> public static void main(String[] args){<br>        Integer a = 1;<br>        Integer b = 2;<br>        Integer c = 3;<br>        Integer d = 3;<br>        Integer e = 321;<br>        Integer f = 321;<br>        Long g = 3L;<br>        System.out.println(c==d);<br>        System.out.println(e==f);<br>        System.out.println(c==(a+b));<br>        System.out.println(c.equals(a+b));<br>        System.out.println(g ==(a+b));<br>        System.out.println(g.equals(a+b));<br>    }<br><br>考察知识点:Integer缓存,equals和==<br>字符串:<br> public static void main(String[] args) {<br>        String str1 = new StringBuilder(&quot;计算机&quot;).append(&quot;软件&quot;).toString();<br>        System.out.println(str1==str1.intern());<br>        String str2 = new StringBuilder(&quot;ja&quot;).append(&quot;va&quot;).toString();<br>        System.out.println(str2==str2.intern());<br>    }<br>考察知识点:1.intern的作用;2.玩","like_count":7,"discussions":[{"author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324877,"discussion_content":"反编译之后的结果：\nInteger a = Integer.valueOf(1); \n        Integer b = Integer.valueOf(2);\n        Integer c = Integer.valueOf(3);\n        Integer d = Integer.valueOf(3);\n        Integer e = Integer.valueOf(321);\n        Integer f = Integer.valueOf(321);\n        Long g = Long.valueOf(3L);\n        System.out.println(c == d); //true\n        System.out.println(e == f);  //false\n        System.out.println(c.intValue() == a.intValue() + b.intValue()); //true\n        System.out.println(c.equals(Integer.valueOf(a.intValue() + b.intValue()))); //true\n        System.out.println(g.longValue() == (long)(a.intValue() + b.intValue()));  //true\n        System.out.println(g.equals(Integer.valueOf(a.intValue() + b.intValue()))); //false","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1605183963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":384815,"discussion_content":"这种反编译显示 怎么弄得?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626763532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":324877,"ip_address":""},"score":384815,"extra":""}]},{"author":{"id":1315968,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZIqY4cs6YKNx0OqeMrbjLIicqiafLNtLYJTN2zTtVPlwXZ7qlJ7xrGQictk1xCq5pEsIyqnkiaCib4zQ/132","nickname":"全炸攻城狮","note":"","ucode":"DB437F9190575C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219913,"discussion_content":"哦，明白了，==比较会让Interger对象强转成Long对象，然后就是用的LongCache了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585823607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1315968,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZIqY4cs6YKNx0OqeMrbjLIicqiafLNtLYJTN2zTtVPlwXZ7qlJ7xrGQictk1xCq5pEsIyqnkiaCib4zQ/132","nickname":"全炸攻城狮","note":"","ucode":"DB437F9190575C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324880,"discussion_content":"g.longValue() == (long)(a.intValue() + b.intValue())","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605184086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219913,"ip_address":""},"score":324880,"extra":""}]},{"author":{"id":1189884,"avatar":"https://static001.geekbang.org/account/avatar/00/12/27/fc/2169bf4a.jpg","nickname":"阿    鲍","note":"","ucode":"7418826B7986E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205612,"discussion_content":"最后两个做错了，g ==(a+b)，g.equals(a+b)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584326192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279778,"discussion_content":"byte,shrot,char 计算 会自动转换为int，\nint 与long  计算 会自动转为long\n以此类推.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591414778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315968,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZIqY4cs6YKNx0OqeMrbjLIicqiafLNtLYJTN2zTtVPlwXZ7qlJ7xrGQictk1xCq5pEsIyqnkiaCib4zQ/132","nickname":"全炸攻城狮","note":"","ucode":"DB437F9190575C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219907,"discussion_content":"为什么g ==(a+b)是true呢，LongCache和IntegerCache不一样啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585823210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315968,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZIqY4cs6YKNx0OqeMrbjLIicqiafLNtLYJTN2zTtVPlwXZ7qlJ7xrGQictk1xCq5pEsIyqnkiaCib4zQ/132","nickname":"全炸攻城狮","note":"","ucode":"DB437F9190575C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279005,"discussion_content":"这里面包含了隐式类型转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591271797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219907,"ip_address":""},"score":279005,"extra":""}]}]},{"had_liked":false,"id":187608,"user_name":"柠檬C","can_delete":false,"product_type":"c1","uid":1181505,"ip_address":"","ucode":"BC0EE704D952A4","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/41/2d477385.jpg","comment_is_top":false,"comment_ctime":1584170922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18764040106","product_id":100039001,"comment_content":"可以使用weakReference，当没有其他变量引用时，被JVM回收","like_count":5},{"had_liked":false,"id":185859,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1583714654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18763583838","product_id":100039001,"comment_content":"这节的例子可以拿来做笔试的题目😃","like_count":5},{"had_liked":false,"id":194321,"user_name":"Q罗","can_delete":false,"product_type":"c1","uid":1792098,"ip_address":"","ucode":"E797378F4DA1F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","comment_is_top":false,"comment_ctime":1585050064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14469951952","product_id":100039001,"comment_content":"享元模式讲解很透彻，赞👍","like_count":4},{"had_liked":false,"id":228111,"user_name":"李德政","can_delete":false,"product_type":"c1","uid":1023885,"ip_address":"","ucode":"3AC49F5671485C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/8d/d725d32c.jpg","comment_is_top":false,"comment_ctime":1592558584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182493176","product_id":100039001,"comment_content":"终于明白了Python中[-5,256)之间的整数的地址id都是一样的","like_count":3},{"had_liked":false,"id":185858,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1583714499,"is_pvip":false,"discussion_count":4,"race_medal":1,"score":"10173649091","product_id":100039001,"comment_content":"新的一周开始了，坚持跟下去","like_count":2,"discussions":[{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65389,"discussion_content":"我也是这种感觉,我们项目只有controller,model,repository，业务逻辑写在repository里面，好像没有bo,vo这些\n\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574999628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190718,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2b/3e/7ef8f24c.jpg","nickname":"howdyli","note":"","ucode":"DD949639D29F5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71362,"discussion_content":"获益匪浅，打通二脉的感觉。看了很多书籍，一直没有理解DDD。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575416413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286435,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a1/23/2b527dc4.jpg","nickname":"逐风随想","note":"","ucode":"A91C191EE82FCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158939,"discussion_content":"作者回复： 设计模式落实到具体的编程语言代码实现的时候，必然有个适配的过程，没法保证每种语言的实现思路都一模一样。Java是一种静态语言，那一些设计模式实现从Java搬到静态语言，比如C# C++是相对比较容易的，但是搬到动态语言，比如PHP，可能就要做些调整。同理，面向过程、面向对象、函数式编程中，设计模式也都有不同的实现方式。\n编程语言有自成一体的设计，会阉割掉很多它觉得不重要的语法，加强它看重的语法，这就导致有些设计思想、原则、模式，并不能很容易地在这种语言下实现。\nPHP更多的偏向网站开发，而且像facebook 用php可能更偏向于网站后端中的前端部分的开发。从应用场景上来说 可能面向过程更合适些，而设计模式的应用场景更多的是面向对象的设计，这也是为什么 《设计模式》一书的副标题提到面向对象的原因。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580640936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254875,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/db/7c71ef4b.jpg","nickname":"青阳魂","note":"","ucode":"4F04ADAB6D870A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66665,"discussion_content":"其实没有的 php可以看看yii2和Laravel的源码 会看到完全两种不同的设计模式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575096382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1859572,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/5f/f4/811c8d6f.jpg","nickname":"绝版小饭团","note":"","ucode":"B24813D98B49EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580690,"discussion_content":"如果你用laravel或者hyperf就容易多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658320032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1905357,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/cd/55e25527.jpg","nickname":"咕咕噜噜","note":"","ucode":"E9045BF11FAB7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213932,"discussion_content":"因为php一个array就搞定了，没有那么多条条框框","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585135439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193298,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/52/bc63d1ef.jpg","nickname":"nick","note":"","ucode":"12A522100DE574","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91386,"discussion_content":"同感。。phper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576831280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1173894,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","nickname":"heyman","note":"","ucode":"92EF9EF1B1B1B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66715,"discussion_content":"同感，我是用Thinkphp的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575100888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","nickname":"冰糕不冰","note":"","ucode":"B754FE464BA426","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66654,"discussion_content":"其实php和java语法比较相似。gokang才是完全不一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575095284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65513,"discussion_content":"哈哈，Java稍微了解下，对这门课的学习会有帮助的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575008283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1322880,"avatar":"","nickname":"小畅","note":"","ucode":"D031CC07CD564E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65490,"discussion_content":"手机上看代码都一脸懵逼 只能到打开电脑端看了 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575006008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65392,"discussion_content":"https://www.cnblogs.com/lyjin/p/6389349.html可以看下这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574999830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1591293,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","nickname":"Cy23","note":"","ucode":"8DC561C5151758","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67341,"discussion_content":"谢啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575127451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65392,"ip_address":""},"score":67341,"extra":""}]},{"author":{"id":1370705,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ea/51/9132e9cc.jpg","nickname":"土豆哪里挖","note":"","ucode":"F27B3BA0477050","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65280,"discussion_content":"看到上篇的 bo vo的时候 一脸蒙蔽。。。phper太难了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574993082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1370705,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ea/51/9132e9cc.jpg","nickname":"土豆哪里挖","note":"","ucode":"F27B3BA0477050","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74889,"discussion_content":"同是一脸懵逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575702305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65280,"ip_address":""},"score":74889,"extra":""}]},{"author":{"id":1245531,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/5b/56e4d28e.jpg","nickname":"愿星～","note":"","ucode":"92F6C85CCEB2BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65236,"discussion_content":"我也是这种感觉\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574990710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185843,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1583711479,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10173646071","product_id":100039001,"comment_content":"打卡 <br>做java 的我第一题竟然做错了<br>如果定义为int 就返回ture 了吧😂","like_count":2,"discussions":[{"author":{"id":1002849,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4d/61/48b65197.jpg","nickname":"菡萏如佳人","note":"","ucode":"8DC3B29C9D2049","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200933,"discussion_content":"从你的单据名称可以猜到你的系统差不多应该是个ERP系统，ERP系统业务逻辑较复杂，不同的企业还存在一些差异，所以使用DDD是合适的。你所说的DDD更适合复杂操作，其实是不准确的，DDD不能降低复杂度，只是更能让你控制好复杂度。课程的例子只是一个充血和贫血的例子，和DDD全貌其实还相差很远。你提的问题不是三言两语说的清的哈，建议待你更进一步理解了DDD后应该能提出更加具体的问题，这样大家可能也更好回答你了。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583743278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1247039,"avatar":"https://static001.geekbang.org/account/avatar/00/13/07/3f/53ae01f6.jpg","nickname":"Kevin.zhang🌏","note":"","ucode":"5C52AE51538906","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212442,"discussion_content":"不管多复杂，把握一个核心：业务逻辑独立出来作为一个对象群，与数据库、界面、服务接口解耦。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584972137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257744,"discussion_content":"其实充血模型说白了，就是将你对象应用的属性和方法 放在domain中去做，而不是service","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588602689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371228,"discussion_content":"我思考的是这个是不是可以分为以库存为核心的库存域，对应出入库，和已财务为核心的资金域。有机会希望可以深入讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619688611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640974,"avatar":"","nickname":"大风","note":"","ucode":"583873CCAA2A67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359612,"discussion_content":"我增试图这样按域划分：核心域：销售。支撑域：客户域、价格域，物流域。通用域：商品类别、商品档案、仓库信息、人员信息 。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616240460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316005,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1634105053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5929072349","product_id":100039001,"comment_content":"思考：<br>1.这里借鉴字符串常量池的话，我想到可以用一个HashMap保存使用过的Integer对象，其中key和value都是该Integer。在要创建Integer时，先判断Map中是否已经存在，如果有就复用，如果没有就新建一个，并放入Map.<br>2.考虑到很多Integer对象可能使用一次，随着时间推移，Map中会保存大量不会再使用的对象，而Map对其的引用如果是强引用，这些对象就不会被JVM垃圾回收。按照思考题的要求：要在没有任何代码使用时，进行回收，这种行为如果用软引用，可以减轻内存压力，但是jvm的垃圾回收并不保证一定回收软引用，只是在内存不够时，会优先回收软引用。","like_count":1},{"had_liked":false,"id":287340,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1617889612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5912856908","product_id":100039001,"comment_content":"听说过很多次字符串的常量池，却没有真正去理解过。原来就是享元模式","like_count":2},{"had_liked":false,"id":237439,"user_name":"图灵机","can_delete":false,"product_type":"c1","uid":2034632,"ip_address":"","ucode":"EB02DB653AD591","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0b/c8/15f055d3.jpg","comment_is_top":false,"comment_ctime":1595831870,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5890799166","product_id":100039001,"comment_content":"曾经用== 比较两个Integer的值，用小于127的数测的仿佛没问题，险些酿成大祸","like_count":1},{"had_liked":false,"id":237166,"user_name":"DY","can_delete":false,"product_type":"c1","uid":1459006,"ip_address":"","ucode":"55536A524A99B4","user_header":"https://static001.geekbang.org/account/avatar/00/16/43/3e/960d12cb.jpg","comment_is_top":false,"comment_ctime":1595695828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890663124","product_id":100039001,"comment_content":"老师的文章越往后面越牛","like_count":1},{"had_liked":false,"id":215008,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1588867955,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5883835251","product_id":100039001,"comment_content":"我倒是想了解一下 String 常量池的最大能缓存的大小","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476268,"discussion_content":"完整案例代码可能就太多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575015681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80012,"discussion_content":"代码可以不全，希望注释多一点。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576137086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530719,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637133862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1988170,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3giaicn2VaDJicDD7WnaT9mB5VbaF6J7aQszN4W9BVmSWmKoVFxTuN7iaDDgrKhlFp49k1iacvjMYSH3eejVbaH0Vhw/132","nickname":"sam","note":"","ucode":"D9DFFABC941E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293161,"discussion_content":"完整代码+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595466350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145168,"avatar":"https://static001.geekbang.org/account/avatar/00/11/79/50/93f85cd6.jpg","nickname":"燎沉香","note":"","ucode":"4CA5403FFF3489","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229154,"discussion_content":"十1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586612681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312130,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/82/51cd0a50.jpg","nickname":"zhimin","note":"","ucode":"DF6DFBEF6FA297","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109487,"discussion_content":"+1 对于非java的同学来说，理解起来有点吃力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577697367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018061,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","nickname":"Yangjing","note":"","ucode":"D88DFD4958D07C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107467,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577583006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69899,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575300716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","nickname":"weineel","note":"","ucode":"6DC6EF4F256A53","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65374,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574998732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200572,"user_name":"junshuaizhang","can_delete":false,"product_type":"c1","uid":1101502,"ip_address":"","ucode":"5734A9BEA03149","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/be/5cf3f1a0.jpg","comment_is_top":false,"comment_ctime":1585619656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880586952","product_id":100039001,"comment_content":"终于弄明白困扰我多年的问题了。另外评论区很多精华呀","like_count":1},{"had_liked":false,"id":185975,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1583735478,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5878702774","product_id":100039001,"comment_content":"&#47;&#47;调用例子<br>public class FlyweightExample {<br>    public static void main(String[] args) {<br>        Integer i = IntegerCache.intern(16129);<br>        System.out.println(&quot;16129:&quot; + i);<br><br>        i = IntegerCache.intern(1612);<br>        System.out.println(&quot;1612:&quot; + i);<br><br>        i = IntegerCache.intern(161);<br>        System.out.println(&quot;161:&quot; + i);<br><br>        i = IntegerCache.intern(127);<br>        System.out.println(&quot;127:&quot; + i);<br><br>        i = IntegerCache.intern(100);<br>        System.out.println(&quot;100:&quot; + i);<br><br>        i = IntegerCache.intern(16129);<br>        System.out.println(&quot;16129:&quot; + i);<br><br>        i = IntegerCache.intern(1612);<br>        System.out.println(&quot;1612:&quot; + i);<br><br>        i = IntegerCache.intern(161);<br>        System.out.println(&quot;161:&quot; + i);<br><br>        i = IntegerCache.intern(2048383);<br>        System.out.println(&quot;2048383:&quot; + i);<br><br>        i = IntegerCache.intern(16130);<br>        System.out.println(&quot;16130:&quot; + i);<br><br>        i = IntegerCache.intern(2048383);<br>        System.out.println(&quot;2048383:&quot; + i);<br><br>        i = IntegerCache.intern(16130);<br>        System.out.println(&quot;16130:&quot; + i);<br><br>        System.out.println(&quot;Integer objects in cache: &quot; + IntegerCache.integersInCache());<br>    }<br>}","like_count":1},{"had_liked":false,"id":185860,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1583715070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878682366","product_id":100039001,"comment_content":"打卡 今天学习享元模式（下），收获进一步加深了对String类的字符串常量池的理解。在jdk中Integer和String都使用了享元模式来存储享元对象。<br>Integer类会存储-128~127之间的数字对应的包装类型对象，这些对象的创建时在类初始化阶段就创建好的。String类在运行时使用JVM提供的一块称之为“字符串常量池”的区域中来存储首次使用到的字符串常量，当后面再次使用到该常量时，直接去字符串常量池中取出引用使用即可。由于使用工厂来来存储享元对象，使得享元对象在JVM的根搜索算法中GC Roots可达，因此垃圾回收效果不友好。<br>课堂讨论题中的“并且能够做到在某个对象没有任何代码使用的时候，能被 JVM 垃圾回收机制回收掉” 对垃圾回收机制理解不深，不知道有啥好办法。","like_count":1},{"had_liked":false,"id":340184,"user_name":"一杯绿绿","can_delete":false,"product_type":"c1","uid":2551566,"ip_address":"","ucode":"1ADE60EAC76167","user_header":"https://static001.geekbang.org/account/avatar/00/26/ef/0e/bbc35830.jpg","comment_is_top":false,"comment_ctime":1648646515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648646515","product_id":100039001,"comment_content":"性能的角度来看 IntegerCache，JDK 的加载类时创建好 Integer 缓存有如下的优势：<br>1. 不需要考虑并发问题（加锁）。<br>2. 可以直接使用 Integer cache[] 数组来存储，数组在计算机上有天然的空间、时间局部性，这对性能的提升会很大。<br><br>而且 JDK 的 Integer 有了上述优势后，设计上也简化了很多，不需要引入 map 等复杂的数据结构和考虑并发问题，只需要一个数组即可。","like_count":1},{"had_liked":false,"id":326001,"user_name":"HomeyLiu","can_delete":false,"product_type":"c1","uid":1330141,"ip_address":"","ucode":"EF4CCB92C369B4","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/dd/41614582.jpg","comment_is_top":false,"comment_ctime":1639301364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639301364","product_id":100039001,"comment_content":"最牛逼的做法是 linkHashMap&lt; Integer, SoftReference&lt; Integer &gt;&gt; ,实现LRU淘汰算法.<br>防止OOM.<br>Weak引用太弱了,gc就被回收,重复创建浪费cpu.<br>","like_count":0},{"had_liked":false,"id":311461,"user_name":"dexia","can_delete":false,"product_type":"c1","uid":2723850,"ip_address":"","ucode":"5C60E049F7E7D5","user_header":"https://static001.geekbang.org/account/avatar/00/29/90/0a/50f89814.jpg","comment_is_top":false,"comment_ctime":1631243527,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1631243527","product_id":100039001,"comment_content":"字符串常量池满了之后会OOM吗，GC不清理常量池的话那常量池满了怎么办？","like_count":0,"discussions":[{"author":{"id":1529210,"avatar":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","nickname":"freesocean","note":"","ucode":"CAD4C80CF569D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403540,"discussion_content":"在jdk6，字符串常量池是放在方法区的永久代实现，如果满了，就会OOM，而jdk7之后，字符串常量池移到了堆中，字符串常量池的内存瓶颈就是堆大小的瓶颈，如果堆内存太小，会发生OOM。当然发生OOM的前提是JVM进行GC后，发现内存依然不可用，字符串常量池也会被GC管理，只是回收的门槛较高，要求该常量没有被任何一个对象引用。而且只发生在内存不够时才会回收。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634104898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307852,"user_name":"Geek_b7eb88","can_delete":false,"product_type":"c1","uid":1573715,"ip_address":"","ucode":"0EB46381D9B1CB","user_header":"","comment_is_top":false,"comment_ctime":1629280631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629280631","product_id":100039001,"comment_content":"Integer i = 59；底层执行了：Integer i = Integer.valueOf(59); 这行代码如果是为了解释上面的代码，59应该换成56吧？","like_count":0},{"had_liked":false,"id":307048,"user_name":"达叔灬","can_delete":false,"product_type":"c1","uid":2404887,"ip_address":"","ucode":"5CCBAF13548F02","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/17/3161b49c.jpg","comment_is_top":false,"comment_ctime":1628839967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628839967","product_id":100039001,"comment_content":"如果 我有个String  或者 Integer  修改了 是不是 会重新分配 或者 创建一个，如果还是修改同一个对象的话  不是会发生线程安全的问题吗 也不符合 享元 存储不变对象的 原理","like_count":0},{"had_liked":false,"id":307046,"user_name":"达叔灬","can_delete":false,"product_type":"c1","uid":2404887,"ip_address":"","ucode":"5CCBAF13548F02","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/17/3161b49c.jpg","comment_is_top":false,"comment_ctime":1628839838,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1628839838","product_id":100039001,"comment_content":"这不会出险线程安全的问题吗？","like_count":0,"discussions":[{"author":{"id":1644104,"avatar":"https://static001.geekbang.org/account/avatar/00/19/16/48/09493874.jpg","nickname":"茶没喝完","note":"","ucode":"D72D88C42A1258","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537401,"discussion_content":"享元的前提就是不可变对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639052906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305959,"user_name":"Lingo","can_delete":false,"product_type":"c1","uid":1075334,"ip_address":"","ucode":"82ECA2E0533B78","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/86/348be7f8.jpg","comment_is_top":false,"comment_ctime":1628243478,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1628243478","product_id":100039001,"comment_content":"上节课的思考期，棋子的位置有两个整型，我觉得没有必要使用享元模式，这节课说的int的包装类Integer，为什么就使用到了享元模式呢？是否棋子的位置也应该使用享元模式呢？","like_count":0},{"had_liked":false,"id":302555,"user_name":"赤茗","can_delete":false,"product_type":"c1","uid":1596136,"ip_address":"","ucode":"A9AFD1F718C6E5","user_header":"https://static001.geekbang.org/account/avatar/00/18/5a/e8/c31e06a8.jpg","comment_is_top":false,"comment_ctime":1626260601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626260601","product_id":100039001,"comment_content":"我觉得android message的obtain方法更能体现享元的意义","like_count":0},{"had_liked":false,"id":301856,"user_name":"歪歪在学习","can_delete":false,"product_type":"c1","uid":1618198,"ip_address":"","ucode":"889032C02D2D26","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/16/ba221660.jpg","comment_is_top":false,"comment_ctime":1625917852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625917852","product_id":100039001,"comment_content":"第一次坚持了两个月的学习，虽然每天的学习时间也不算很长，期间还断断续续，但起码是坚持下来了！算是迈出了学习的第一步，接下来我会一直坚持的！","like_count":0},{"had_liked":false,"id":285695,"user_name":"刘章","can_delete":false,"product_type":"c1","uid":1009693,"ip_address":"","ucode":"7608C518D49AE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLxEbhSEziblPNVkr9XFIAzPCib0TQvBxHYwiaKiaib7ExZ8dmUWyqWoibSedACTHCf52INMib80ic92G6wQ/132","comment_is_top":false,"comment_ctime":1616983090,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616983090","product_id":100039001,"comment_content":"感觉享元本质思想还是 cache","like_count":0},{"had_liked":false,"id":285528,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1616857683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616857683","product_id":100039001,"comment_content":"享元模式中int 如果要做数值更改操作 岂不是都会影响？还是原先的引用会重新引用一个新地址 ","like_count":0},{"had_liked":false,"id":279514,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1613810502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613810502","product_id":100039001,"comment_content":"可以类比C&#47;C++的指针，来理解Java中的引用。<br>但两者还是有不同，参见：<br>https:&#47;&#47;softwareengineering.stackexchange.com&#47;questions&#47;141834&#47;how-is-a-java-reference-different-from-a-c-pointer<br>https:&#47;&#47;www.geeksforgeeks.org&#47;is-there-any-concept-of-pointers-in-java&#47;","like_count":0},{"had_liked":false,"id":277303,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1612350411,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1612350411","product_id":100039001,"comment_content":"牛， 看设计模式 学Java","like_count":0,"discussions":[{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543023,"discussion_content":"我也是这样的感觉， 就是在学java，可是我现在看不惯java代码了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640934482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276565,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1612007471,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1612007471","product_id":100039001,"comment_content":"作为CPP选手，首先不懂封装内置类型的Class用来干啥...","like_count":0,"discussions":[{"author":{"id":1104601,"avatar":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","nickname":"曾泽浩","note":"","ucode":"A7E5CF9E1571A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350359,"discussion_content":"一切皆为对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613824297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262227,"user_name":"一丨丿丶乙","can_delete":false,"product_type":"c1","uid":1647936,"ip_address":"","ucode":"D859BB4F9F3341","user_header":"https://static001.geekbang.org/account/avatar/00/19/25/40/4d68fa96.jpg","comment_is_top":false,"comment_ctime":1605668720,"is_pvip":false,"replies":[{"id":"96124","content":"嗯嗯 ������","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700958,"ip_address":"","comment_id":262227,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605668720","product_id":100039001,"comment_content":"享元---&gt;复用，线程池等。通过复用对象，以达到节省内存的目的<br>1.懒加载，dubble check<br>2.weak reference持有享元对象","like_count":0},{"had_liked":false,"id":238391,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1596158619,"is_pvip":false,"replies":[{"id":"88109","content":"有引用，就是在被使用啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1596193726,"ip_address":"","comment_id":238391,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596158619","product_id":100039001,"comment_content":"为什么说垃圾回收的时候如果保存了对象的&quot;引用&quot;就不友好，垃圾回收的依据不是只看这个对象还有没有被&quot;使用&quot;吗？ ","like_count":0,"discussions":[{"author":{"id":1048367,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/2f/172b942b.jpg","nickname":"扬帆起航","note":"","ucode":"708B686F19B8DE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112582,"discussion_content":"可以抽成一个工具类 , 进行泛型转换 .","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577873018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048367,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/2f/172b942b.jpg","nickname":"扬帆起航","note":"","ucode":"708B686F19B8DE","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":277167,"discussion_content":"对，转换可以抽象出来，可以多处使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591011696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":112582,"ip_address":""},"score":277167,"extra":""}]},{"author":{"id":1528931,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/63/3a3f7d4c.jpg","nickname":"Giraffe","note":"","ucode":"2F272FFD6CD0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571831,"discussion_content":"你需要一个工厂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652425829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1538604,"avatar":"https://static001.geekbang.org/account/avatar/00/17/7a/2c/54b48459.jpg","nickname":"Vincent.X","note":"","ucode":"8A40B5B2F4B102","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333198,"discussion_content":"如果domain是读取entity数据创建的话，可以使用构造函数创建domain","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607477400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1369757,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","nickname":"早起不吃虫","note":"","ucode":"13CD3B5E1F9435","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65608,"discussion_content":"entity转domain可以封装在domain中，借助domain中包含业务规则的Set方法进行赋值，保证domain对象的业务规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575015408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1579768,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1a/f8/bd3bc7c3.jpg","nickname":"💜💜奔跑的犀牛🦏🦏","note":"","ucode":"D88334E4875397","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1369757,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","nickname":"早起不吃虫","note":"","ucode":"13CD3B5E1F9435","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158345,"discussion_content":"domain没有set","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580569193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65608,"ip_address":""},"score":158345,"extra":""}]}]},{"had_liked":false,"id":231727,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1593760203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593760203","product_id":100039001,"comment_content":"如果IntegerCache利用String 的思路，每次用到在new ，然后放IntegerCache中，因为Integer在代码中是很频繁的操作，这些数字，不断的new，虽然都是小对象，但是积小成多，也会影响垃圾回收频繁执行","like_count":0,"discussions":[{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286793,"discussion_content":"Domain层其实可以有reposity的，不过reposity是个接口，这样可以使domain不依赖于具体实现。\n个人感觉这样的话整体domain就有具体业务逻辑实现及完整的领域生命周期(含状态变更及持久化)\nservice层则专注于跨领域实体，消息等事情","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593298123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066381,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/8d/09789253.jpg","nickname":"Hank","note":"","ucode":"0FF3FF62291918","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77339,"discussion_content":"我也感觉到了，是不是业务架构还是比较适合贫血模式，而复杂的技术架构才能把DDD的价值体现出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575901040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231440,"user_name":"向往的生活","can_delete":false,"product_type":"c1","uid":1397298,"ip_address":"","ucode":"0E8DB45357820F","user_header":"https://static001.geekbang.org/account/avatar/00/15/52/32/bb570f48.jpg","comment_is_top":false,"comment_ctime":1593677116,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593677116","product_id":100039001,"comment_content":"学习设计模式的过程又可以夯实基础，以设计模式课程为点，串起来一个又一个的知识线，不错不错。","like_count":0},{"had_liked":false,"id":196236,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1585265419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585265419","product_id":100039001,"comment_content":"对于string 的缓存池也是用的弱引用或者软引用吗？<br>不然怎么知道何时回收呢？","like_count":0},{"had_liked":false,"id":188519,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1584363833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584363833","product_id":100039001,"comment_content":"打卡, 学习了, integer 和 string 的题都答对了, 不过, 具体的原理还是看了源码才知道的😂","like_count":0},{"had_liked":false,"id":188043,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1584317976,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584317976","product_id":100039001,"comment_content":"get了","like_count":0},{"had_liked":false,"id":186992,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583984443,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1583984443","product_id":100039001,"comment_content":"Java的String内部维持的常量池是放在了我们的永久代空间，现在来说也可能被称为元空间的地方，是方法区的一部分，我们所以现在所熟知HotVM也对其拥有的合理的垃圾回收，我们没法像String那样在永久代空间当中开辟一片内存地址的话，我们就只能考虑使用JVM当中的弱引用去实现它，利用弱引用然后在valueOf(()函数当中将其添加到我们的对象池中，并且提供一个intern()函数来让用户手动的讲这个int对象塞进我们的常量池","like_count":0,"discussions":[{"author":{"id":1100064,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","nickname":"zj","note":"","ucode":"E3329CCF694AC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284072,"discussion_content":"字符串常量池现在在堆里\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592441331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278971,"discussion_content":"JVM规范里那个叫方法区，永久代和元空间都是他的具体实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591265959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186507,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1583854050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583854050","product_id":100039001,"comment_content":"总结: <br><br>1. 享元模式在JDK Integer等包装类型中有作为缓存使用(在String类中也有使用), 在类被ClassLoader加载时即初始化常用的值.<br><br>2. 除非经过验证使用享元模式作为缓存能提升效率, 否则应慎用享元模式, 避免过度设计.","like_count":0},{"had_liked":false,"id":186175,"user_name":"Vicent🍀","can_delete":false,"product_type":"c1","uid":1589894,"ip_address":"","ucode":"70AEA72A0B6F0E","user_header":"https://static001.geekbang.org/account/avatar/00/18/42/86/6b2e81ba.jpg","comment_is_top":false,"comment_ctime":1583771203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583771203","product_id":100039001,"comment_content":"突然想到一个问题，池技术有没有类似享元设计模式的存在，公用对象，不过会增加一些使用限制","like_count":0}]}