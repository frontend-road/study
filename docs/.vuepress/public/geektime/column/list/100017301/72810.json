{"id":72810,"title":"36 | AC自动机：如何用多模式串匹配实现敏感词过滤功能？","content":"<p>很多支持用户发表文本内容的网站，比如BBS，大都会有敏感词过滤功能，用来过滤掉用户输入的一些淫秽、反动、谩骂等内容。你有没有想过，这个功能是怎么实现的呢？</p><p>实际上，这些功能最基本的原理就是字符串匹配算法，也就是通过维护一个敏感词的字典，当用户输入一段文字内容之后，通过字符串匹配算法，来查找用户输入的这段文字，是否包含敏感词。如果有，就用“***”把它替代掉。</p><p>我们前面讲过好几种字符串匹配算法了，它们都可以处理这个问题。但是，对于访问量巨大的网站来说，比如淘宝，用户每天的评论数有几亿、甚至几十亿。这时候，我们对敏感词过滤系统的性能要求就要很高。毕竟，我们也不想，用户输入内容之后，要等几秒才能发送出去吧？我们也不想，为了这个功能耗费过多的机器吧？<strong>那如何才能实现一个高性能的敏感词过滤系统呢</strong>？这就要用到今天的<strong>多模式串匹配算法</strong>。</p><h2>基于单模式串和Trie树实现的敏感词过滤</h2><p>我们前面几节讲了好几种字符串匹配算法，有BF算法、RK算法、BM算法、KMP算法，还有Trie树。前面四种算法都是单模式串匹配算法，只有Trie树是多模式串匹配算法。</p><p>我说过，单模式串匹配算法，是在一个模式串和一个主串之间进行匹配，也就是说，在一个主串中查找一个模式串。多模式串匹配算法，就是在多个模式串和一个主串之间做匹配，也就是说，在一个主串中查找多个模式串。</p><!-- [[[read_end]]] --><p>尽管，单模式串匹配算法也能完成多模式串的匹配工作。例如开篇的思考题，我们可以针对每个敏感词，通过单模式串匹配算法（比如KMP算法）与用户输入的文字内容进行匹配。但是，这样做的话，每个匹配过程都需要扫描一遍用户输入的内容。整个过程下来就要扫描很多遍用户输入的内容。如果敏感词很多，比如几千个，并且用户输入的内容很长，假如有上千个字符，那我们就需要扫描几千遍这样的输入内容。很显然，这种处理思路比较低效。</p><p>与单模式匹配算法相比，多模式匹配算法在这个问题的处理上就很高效了。它只需要扫描一遍主串，就能在主串中一次性查找多个模式串是否存在，从而大大提高匹配效率。我们知道，Trie树就是一种多模式串匹配算法。那如何用Trie树实现敏感词过滤功能呢？</p><p>我们可以对敏感词字典进行预处理，构建成Trie树结构。这个预处理的操作只需要做一次，如果敏感词字典动态更新了，比如删除、添加了一个敏感词，那我们只需要动态更新一下Trie树就可以了。</p><p>当用户输入一个文本内容后，我们把用户输入的内容作为主串，从第一个字符（假设是字符C）开始，在Trie树中匹配。当匹配到Trie树的叶子节点，或者中途遇到不匹配字符的时候，我们将主串的开始匹配位置后移一位，也就是从字符C的下一个字符开始，重新在Trie树中匹配。</p><p>基于Trie树的这种处理方法，有点类似单模式串匹配的BF算法。我们知道，单模式串匹配算法中，KMP算法对BF算法进行改进，引入了next数组，让匹配失败时，尽可能将模式串往后多滑动几位。借鉴单模式串的优化改进方法，能否对多模式串Trie树进行改进，进一步提高Trie树的效率呢？这就要用到AC自动机算法了。</p><h2>经典的多模式串匹配算法：AC自动机</h2><p>AC自动机算法，全称是Aho-Corasick算法。其实，Trie树跟AC自动机之间的关系，就像单串匹配中朴素的串匹配算法，跟KMP算法之间的关系一样，只不过前者针对的是多模式串而已。所以，<strong>AC自动机实际上就是在Trie树之上，加了类似KMP的next数组，只不过此处的next数组是构建在树上罢了</strong>。如果代码表示，就是下面这个样子：</p><pre><code>public class AcNode {\n  public char data; \n  public AcNode[] children = new AcNode[26]; // 字符集只包含a~z这26个字符\n  public boolean isEndingChar = false; // 结尾字符为true\n  public int length = -1; // 当isEndingChar=true时，记录模式串长度\n  public AcNode fail; // 失败指针\n  public AcNode(char data) {\n    this.data = data;\n  }\n}\n</code></pre><p>所以，AC自动机的构建，包含两个操作：</p><ul>\n<li>\n<p>将多个模式串构建成Trie树；</p>\n</li>\n<li>\n<p>在Trie树上构建失败指针（相当于KMP中的失效函数next数组）。</p>\n</li>\n</ul><p>关于如何构建Trie树，我们上一节已经讲过了。所以，这里我们就重点看下，<strong>构建好Trie树之后，如何在它之上构建失败指针？</strong></p><p>我用一个例子给你讲解。这里有4个模式串，分别是c，bc，bcd，abcd；主串是abcd。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/f1/f80487051d8f44cabf488195de8db1f1.jpg?wh=1142*607\" alt=\"\"></p><p>Trie树中的每一个节点都有一个失败指针，它的作用和构建过程，跟KMP算法中的next数组极其相似。所以<strong>要想看懂这节内容，你要先理解KMP算法中next数组的构建过程</strong>。如果你还有点不清楚，建议你先回头去弄懂KMP算法。</p><p>假设我们沿Trie树走到p节点，也就是下图中的紫色节点，那p的失败指针就是从root走到紫色节点形成的字符串abc，跟所有模式串前缀匹配的最长可匹配后缀子串，就是箭头指的bc模式串。</p><p>这里的最长可匹配后缀子串，我稍微解释一下。字符串abc的后缀子串有两个bc，c，我们拿它们与其他模式串匹配，如果某个后缀子串可以匹配某个模式串的前缀，那我们就把这个后缀子串叫作<strong>可匹配后缀子串</strong>。</p><p>我们从可匹配后缀子串中，找出最长的一个，就是刚刚讲到的最长可匹配后缀子串。我们将p节点的失败指针指向那个最长匹配后缀子串对应的模式串的前缀的最后一个节点，就是下图中箭头指向的节点。</p><p><img src=\"https://static001.geekbang.org/resource/image/58/ca/582ec4651948b4cdc1e1b49235e4f8ca.jpg?wh=1142*650\" alt=\"\"></p><p>计算每个节点的失败指针这个过程看起来有些复杂。其实，如果我们把树中相同深度的节点放到同一层，那么某个节点的失败指针只有可能出现在它所在层的上一层。</p><p>我们可以像KMP算法那样，当我们要求某个节点的失败指针的时候，我们通过已经求得的、深度更小的那些节点的失败指针来推导。也就是说，我们可以逐层依次来求解每个节点的失败指针。所以，失败指针的构建过程，是一个按层遍历树的过程。</p><p>首先root的失败指针为NULL，也就是指向自己。<strong>当我们已经求得某个节点p的失败指针之后，如何寻找它的子节点的失败指针呢？</strong></p><p>我们假设节点p的失败指针指向节点q，我们看节点p的子节点pc对应的字符，是否也可以在节点q的子节点中找到。如果找到了节点q的一个子节点qc，对应的字符跟节点pc对应的字符相同，则将节点pc的失败指针指向节点qc。</p><p><img src=\"https://static001.geekbang.org/resource/image/da/1f/da685b7ac5f7dc41b2db6cf5d9a35a1f.jpg?wh=1142*650\" alt=\"\"></p><p>如果节点q中没有子节点的字符等于节点pc包含的字符，则令q=q-&gt;fail（fail表示失败指针，这里有没有很像KMP算法里求next的过程？），继续上面的查找，直到q是root为止，如果还没有找到相同字符的子节点，就让节点pc的失败指针指向root。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/61/91123d8c38a050d32ca730a93c7aa061.jpg?wh=1142*650\" alt=\"\"></p><p>我将构建失败指针的代码贴在这里，你可以对照着讲解一块看下，应该更容易理解。这里面，构建Trie树的代码我并没有贴出来，你可以参看上一节的代码，自己实现。</p><pre><code>public void buildFailurePointer() {\n  Queue&lt;AcNode&gt; queue = new LinkedList&lt;&gt;();\n  root.fail = null;\n  queue.add(root);\n  while (!queue.isEmpty()) {\n    AcNode p = queue.remove();\n    for (int i = 0; i &lt; 26; ++i) {\n      AcNode pc = p.children[i];\n      if (pc == null) continue;\n      if (p == root) {\n        pc.fail = root;\n      } else {\n        AcNode q = p.fail;\n        while (q != null) {\n          AcNode qc = q.children[pc.data - 'a'];\n          if (qc != null) {\n            pc.fail = qc;\n            break;\n          }\n          q = q.fail;\n        }\n        if (q == null) {\n          pc.fail = root;\n        }\n      }\n      queue.add(pc);\n    }\n  }\n}\n</code></pre><p>通过按层来计算每个节点的子节点的失效指针，刚刚举的那个例子，最后构建完成之后的AC自动机就是下面这个样子：</p><p><img src=\"https://static001.geekbang.org/resource/image/51/3c/5150d176502dda4adfc63e9b2915b23c.jpg?wh=1142*650\" alt=\"\"></p><p>AC自动机到此就构建完成了。我们现在来看下，<strong>如何在AC自动机上匹配主串？</strong></p><p>我们还是拿之前的例子来讲解。在匹配过程中，主串从i=0开始，AC自动机从指针p=root开始，假设模式串是b，主串是a。</p><ul>\n<li>\n<p>如果p指向的节点有一个等于b[i]的子节点x，我们就更新p指向x，这个时候我们需要通过失败指针，检测一系列失败指针为结尾的路径是否是模式串。这一句不好理解，你可以结合代码看。处理完之后，我们将i加一，继续这两个过程；</p>\n</li>\n<li>\n<p>如果p指向的节点没有等于b[i]的子节点，那失败指针就派上用场了，我们让p=p-&gt;fail，然后继续这2个过程。</p>\n</li>\n</ul><p>关于匹配的这部分，文字描述不如代码看得清楚，所以我把代码贴了出来，非常简短，并且添加了详细的注释，你可以对照着看下。这段代码输出的就是，在主串中每个可以匹配的模式串出现的位置。</p><pre><code>public void match(char[] text) { // text是主串\n  int n = text.length;\n  AcNode p = root;\n  for (int i = 0; i &lt; n; ++i) {\n    int idx = text[i] - 'a';\n    while (p.children[idx] == null &amp;&amp; p != root) {\n      p = p.fail; // 失败指针发挥作用的地方\n    }\n    p = p.children[idx];\n    if (p == null) p = root; // 如果没有匹配的，从root开始重新匹配\n    AcNode tmp = p;\n    while (tmp != root) { // 打印出可以匹配的模式串\n      if (tmp.isEndingChar == true) {\n        int pos = i-tmp.length+1;\n        System.out.println(&quot;匹配起始下标&quot; + pos + &quot;; 长度&quot; + tmp.length);\n      }\n      tmp = tmp.fail;\n    }\n  }\n}\n</code></pre><h2>解答开篇</h2><p>AC自动机的内容讲完了，关于开篇的问题，你应该能解答了吧？实际上，我上面贴出来的代码，已经是一个敏感词过滤的原型代码了。它可以找到所有敏感词出现的位置（在用户输入的文本中的起始下标）。你只需要稍加改造，再遍历一遍文本内容（主串），就可以将文本中的所有敏感词替换成“***”。</p><p>所以我这里着重讲一下，<strong>AC自动机实现的敏感词过滤系统，是否比单模式串匹配方法更高效呢？</strong></p><p>首先，我们需要将敏感词构建成AC自动机，包括构建Trie树以及构建失败指针。</p><p>我们上一节讲过，Trie树构建的时间复杂度是O(m*len)，其中len表示敏感词的平均长度，m表示敏感词的个数。那构建失败指针的时间复杂度是多少呢？我这里给出一个不是很紧确的上界。</p><p>假设Trie树中总的节点个数是k，每个节点构建失败指针的时候，（你可以看下代码）最耗时的环节是while循环中的q=q-&gt;fail，每运行一次这个语句，q指向节点的深度都会减少1，而树的高度最高也不会超过len，所以每个节点构建失败指针的时间复杂度是O(len)。整个失败指针的构建过程就是O(k*len)。</p><p>不过，AC自动机的构建过程都是预先处理好的，构建好之后，并不会频繁地更新，所以不会影响到敏感词过滤的运行效率。</p><p>我们再来看下，<strong>用AC自动机做匹配的时间复杂度是多少？</strong></p><p>跟刚刚构建失败指针的分析类似，for循环依次遍历主串中的每个字符，for循环内部最耗时的部分也是while循环，而这一部分的时间复杂度也是O(len)，所以总的匹配的时间复杂度就是O(n*len)。因为敏感词并不会很长，而且这个时间复杂度只是一个非常宽泛的上限，实际情况下，可能近似于O(n)，所以AC自动机做敏感词过滤，性能非常高。</p><p>你可以会说，从时间复杂度上看，AC自动机匹配的效率跟Trie树一样啊。实际上，因为失效指针可能大部分情况下都指向root节点，所以绝大部分情况下，在AC自动机上做匹配的效率要远高于刚刚计算出的比较宽泛的时间复杂度。只有在极端情况下，如图所示，AC自动机的性能才会退化的跟Trie树一样。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8cd064ab3103f9f38b02f298fc01c237.jpg?wh=1142*650\" alt=\"\"></p><h2>内容小结</h2><p>今天我们讲了多模式串匹配算法，AC自动机。单模式串匹配算法是为了快速在主串中查找一个模式串，而多模式串匹配算法是为了快速在主串中查找多个模式串。</p><p>AC自动机是基于Trie树的一种改进算法，它跟Trie树的关系，就像单模式串中，KMP算法与BF算法的关系一样。KMP算法中有一个非常关键的next数组，类比到AC自动机中就是失败指针。而且，AC自动机失败指针的构建过程，跟KMP算法中计算next数组极其相似。所以，要理解AC自动机，最好先掌握KMP算法，因为AC自动机其实就是KMP算法在多模式串上的改造。</p><p>整个AC自动机算法包含两个部分，第一部分是将多个模式串构建成AC自动机，第二部分是在AC自动机中匹配主串。第一部分又分为两个小的步骤，一个是将模式串构建成Trie树，另一个是在Trie树上构建失败指针。</p><h2>课后思考</h2><p>到此为止，字符串匹配算法我们全都讲完了，你能试着分析总结一下，各个字符串匹配算法的特点和比较适合的应用场景吗？</p><p>欢迎留言和我分享，也欢迎点击“<span class=\"orange\">请朋友读</span>”，把今天的内容分享给你的好友，和他一起讨论、学习。</p>","neighbors":{"left":{"article_title":"35 | Trie树：如何实现搜索引擎的搜索关键词提示功能？","id":72414},"right":{"article_title":"37 | 贪心算法：如何用贪心算法实现Huffman压缩编码？","id":73188}},"comments":[{"had_liked":false,"id":49968,"user_name":"zixuan","can_delete":false,"product_type":"c1","uid":1131300,"ip_address":"","ucode":"C72920DD05B074","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","comment_is_top":false,"comment_ctime":1544801280,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"808998652928","product_id":100017301,"comment_content":"思考题:<br>一、单模式串匹配：<br>1. BF： 简单场景，主串和模式串都不太长, O(m*n)<br>2. KP：\b字符集范围不要太大且模式串不要太长， 否则hash值可能冲突，O(n)<br>3. naive-BM：模式串最好不要太长（因为预处理较重），比如IDE编辑器里的查找场景； 预处理O(m*m), 匹配O(n)， 实现较复杂，需要较多额外空间.<br>4. KMP：适合所有场景，整体实现起来也比BM简单，O(n+m)，仅需一个next数组的O(n)额外空间；但统计意义下似乎BM更快，原因不明.<br>5. 另外查资料的时候还看到一种比BM&#47;KMP更快，且实现+理解起来都更容易的的Sunday算法，有兴趣的可以看这里:<br>http:&#47;&#47;www.inf.fh-flensburg.de&#47;lang&#47;algorithmen&#47;pattern&#47;sundayen.htm<br>https:&#47;&#47;www.jianshu.com&#47;p&#47;2e6eb7386cd3<br><br>二、多模式串匹配：<br>1. naive-Trie: 适合多模式串公共前缀较多的匹配(O(n*k)) 或者 根据公共前缀进行查找(O(k))的场景，比如搜索框的自动补全提示.<br>2. AC自动机: 适合大量文本中多模式串的精确匹配查找, 可以到O(n).<br>  ","like_count":189,"discussions":[{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":89064,"discussion_content":"kp打错了吧应该是rk吧","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1576748203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166915,"discussion_content":"kmp只移动了一个最大一致的子串，bm除了最大还依次缩短，移动机会增加，所以统计下更快","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581432738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363822,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/uktgj5R0p78c67oLib8EuRMRCgP8yjxnZ1ibVOuibhRZvjJpKSJNaTl0UlEfGyiaaiaGyPmqpGYpibTt0QopX1qtWfQQ/132","nickname":"杨大小最嗨皮","note":"","ucode":"7DFACF1414AE16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358063,"discussion_content":"谢谢分享 Sunday算法太友好了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615907160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69020,"discussion_content":"Sunday算法，简单高效，这是非常好的一个算法，学到了，多谢。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575251548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128420,"avatar":"https://static001.geekbang.org/account/avatar/00/11/37/e4/5d7a32c6.jpg","nickname":"creasylai19","note":"","ucode":"F9B04060FCFD3F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583223,"discussion_content":"sunday算法太简单的，学习了，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659962621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806578,"avatar":"","nickname":"CV9527","note":"","ucode":"E26FA16CE7CCBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412954,"discussion_content":"确实，33-36课，应该分为：课程名应该以：单模字符匹配和多模字符匹配，分类；不然看起来有点乱；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636340752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49726,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1544757974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"405271683798","product_id":100017301,"comment_content":"我只想说，老师你真牛X","like_count":95},{"had_liked":false,"id":49794,"user_name":"润鑫","can_delete":false,"product_type":"c1","uid":1122107,"ip_address":"","ucode":"6EDBE45B0508CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/3b/173b6660.jpg","comment_is_top":false,"comment_ctime":1544770320,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"242062938896","product_id":100017301,"comment_content":"红黑树、KPM跟AC自动机这几节有点跟不上。。","like_count":57,"discussions":[{"author":{"id":1402127,"avatar":"https://static001.geekbang.org/account/avatar/00/15/65/0f/770eba2d.jpg","nickname":"Kay","note":"","ucode":"A5A6E3655FEC2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538625,"discussion_content":"字符串的只看懂第一节课后面根本看不懂，看天书一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639457586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113150,"avatar":"https://static001.geekbang.org/account/avatar/00/20/3e/7e/3dac54fa.jpg","nickname":"曾益达","note":"","ucode":"AC20D6F5EF01C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297801,"discussion_content":"KMP建议去看下大话数据结构的讲解，跟着把代码复现，就好理解了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597061451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297241,"discussion_content":"红黑树还好理解，从kmp我就有点费劲了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596838735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325827,"discussion_content":"我已经放弃了..以面试为主..","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605440284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297241,"ip_address":""},"score":325827,"extra":""},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327858,"discussion_content":"红黑实在没看懂。kmp要容易些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605970446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297241,"ip_address":""},"score":327858,"extra":""}]},{"author":{"id":1758028,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d3/4c/6b25406c.jpg","nickname":"刘志材","note":"","ucode":"A5F4690F2B8B52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583954,"discussion_content":"你不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660526683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1401847,"avatar":"https://static001.geekbang.org/account/avatar/00/15/63/f7/31429e9a.jpg","nickname":"尼古拉斯赵四","note":"","ucode":"EB08189EEC7AD3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573521,"discussion_content":"原来不止我一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653472450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897788,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f5/3c/0a0247d9.jpg","nickname":"ShawnZ","note":"","ucode":"1A37744CCE0DD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559152,"discussion_content":"我也跟不上，不过第一遍学，也用不着学这么深，先过去面试，以后再来研究不懂的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648628910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2813766,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erX65FTLyn3JMbqLKdFkkv9okdx7qmVIibl1zKB7pnCIbtElSgibULma5cTsSMyS5KGMBy5MRdXtN8g/132","nickname":"小竹子","note":"","ucode":"D20F56114426EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536733,"discussion_content":"KMP可以看看《漫画算法2》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638859143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061991,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","nickname":"while (1)等;","note":"","ucode":"BAEC7258D65B69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398953,"discussion_content":"我也是，完全看不懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632879545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1159530,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b1/6a/b1e05143.jpg","nickname":"inmo","note":"","ucode":"A9590E563C93CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393260,"discussion_content":"如果没有基础，听不懂正常。建议看视频后，再来看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631331869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244845,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fe/ad/7fa85a7d.jpg","nickname":"放飞心情","note":"","ucode":"75A2192D91D86C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385908,"discussion_content":"看来不仅仅我一个，这几个算法平均每个看差不多5天左右","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627347453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1800243,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/78/33/4a91bf3d.jpg","nickname":"吴里斯蒂亚诺.翀纳尔多","note":"","ucode":"8DB9EC2AC456E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378299,"discussion_content":"我也是，作孽啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623154657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50692,"user_name":"O_o","can_delete":false,"product_type":"c1","uid":1253029,"ip_address":"","ucode":"D3781909854B7D","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/a5/c0ab907d.jpg","comment_is_top":false,"comment_ctime":1545030197,"is_pvip":false,"replies":[{"id":"18334","content":"👍 厉害。最近这几讲不讲的话 知识就有缺陷 你可以不用太费劲看懂 知道有这个东西就行 ","user_name":"作者回复","comment_id":50692,"uid":"1190123","ip_address":"","utype":1,"ctime":1545098112,"user_name_real":"gg"}],"discussion_count":4,"race_medal":0,"score":"220588362293","product_id":100017301,"comment_content":"做安卓开发的，前边全部都理解+可动手手写。跟到最近几章感到面试可能确实用不到这些了，平时工作也确实用不到了。感谢老师最近的授课，通俗易懂！","like_count":52,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433061,"discussion_content":"👍 厉害。最近这几讲不讲的话 知识就有缺陷 你可以不用太费劲看懂 知道有这个东西就行 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545098112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80730,"discussion_content":"同android，比你迟了一年看这个，看到这儿开始吃力了…一下就是几个小时才能理解","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576175352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2760780,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","nickname":"Geek_94045a","note":"","ucode":"B8F23BA9D1411B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409191,"discussion_content":"这部分感觉属于基本的数据结构的高级应用了 我反而觉得更重要 因为我感觉多数项目都需要一个敏感词过滤的功能...只不过大部分项目都是凑合着用语言自带的字符串检索方法暴力实现而已 并没有做的很高效 也就没有用到这些科学的算法 但是我们了解掌握这些后 嗯 就是我们比其他人有价值的地方了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1635390206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2760780,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","nickname":"Geek_94045a","note":"","ucode":"B8F23BA9D1411B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409192,"discussion_content":"同吃力 我每天看一篇 最近每天想看完并且看懂 也低3小时左右了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635390298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51625,"user_name":"bboy孙晨杰","can_delete":false,"product_type":"c1","uid":1178683,"ip_address":"","ucode":"D7389FB3368749","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/3b/c6b5b64f.jpg","comment_is_top":false,"comment_ctime":1545210703,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"194818739023","product_id":100017301,"comment_content":"在看kmp和本节的ac自动机，很多文字描述我也理解不了，于是我就在纸上画一些具体的例子，然后按代码一步步的debug下去，虽然方法笨，但是很有助于理解。","like_count":46,"discussions":[{"author":{"id":1779061,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/25/75/d38dacaf.jpg","nickname":"李安民","note":"","ucode":"B5C45FD56E652B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334692,"discussion_content":"牛逼\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607938394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665373,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/5d/b60d2629.jpg","nickname":"Orient","note":"","ucode":"FAC57EA1F4382C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30044,"discussion_content":"bboy牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570796598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49722,"user_name":"深蓝...","can_delete":false,"product_type":"c1","uid":1067358,"ip_address":"","ucode":"4FCF94BC87CB49","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/5e/855768b0.jpg","comment_is_top":false,"comment_ctime":1544757517,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"91739070733","product_id":100017301,"comment_content":"完犊子了 从字符串匹配开始就掉队了  之前红黑树也是一脸懵逼。","like_count":22,"discussions":[{"author":{"id":1504652,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","nickname":"抱小星","note":"","ucode":"BA7B0DAFDA4AF5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158544,"discussion_content":"啃的很慢，但是我全学会了，嘻嘻。接下来就是做题全实现一遍。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580603192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1207038,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/fe/7566542f.jpg","nickname":"布衣","note":"","ucode":"BFAD9049508330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5352,"discussion_content":"借红点   就是 红黑树的本质所在 .会借了  就会实现了.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566201065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1401847,"avatar":"https://static001.geekbang.org/account/avatar/00/15/63/f7/31429e9a.jpg","nickname":"尼古拉斯赵四","note":"","ucode":"EB08189EEC7AD3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573522,"discussion_content":"兄弟，不止你一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653472548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2252211,"avatar":"https://static001.geekbang.org/account/avatar/00/22/5d/b3/aa2c17f0.jpg","nickname":"🔥 如初之光","note":"","ucode":"0FB2BA12D4B15A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324886,"discussion_content":"你不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605185258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135217,"discussion_content":"能坚持到现在的都已经不错了，老铁们","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579078016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23876,"discussion_content":"一样，我是图和字符串匹配这一块懵逼，没事不要试图一次100%都会，一次能会50%就不错了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569933573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135216,"discussion_content":"大实话","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579077998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":23876,"ip_address":""},"score":135216,"extra":""},{"author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164502,"discussion_content":"用python跑一下，看下知乎的文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581176326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":23876,"ip_address":""},"score":164502,"extra":""}]},{"author":{"id":1207038,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/fe/7566542f.jpg","nickname":"布衣","note":"","ucode":"BFAD9049508330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5351,"discussion_content":"哈哈哈哈  红黑树 我断断续续 用了接近一周,自己实现了一下. 首先不要去管什么左旋右旋,你的第一思想就是接红节点, 至于有几种情况 你分析出来, 就是不知道啥是左旋 右旋,你本着接红节点的思想  你也会自己实现出左右旋的操作.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566201025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49955,"user_name":"zixuan","can_delete":false,"product_type":"c1","uid":1131300,"ip_address":"","ucode":"C72920DD05B074","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","comment_is_top":false,"comment_ctime":1544797594,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"87444143514","product_id":100017301,"comment_content":"前面激动说错了哈 ，跟DATrie没有半毛钱关系，后者只是一种Trie的具体实现.<br>&quot;其实，如果我们把树中相同深度的节点放到同一层，那么某个节点的失败指针只有可能出现在它所在层的上一层&quot;， 这里改成 &quot;那么某个节点的失败指针只有可能指向比他所在层更小的层数的节点&quot; 似乎更精确，虽然例子里刚好都是差一层，但实际应该可以往前跨多层的.<br>和KMP算法一样，这个通过层次遍历来编织failNode数组的过程非常精妙，真的就像是织网一样。","like_count":21,"discussions":[{"author":{"id":1027507,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epS4BWsMOb1Bq28XGZkwmrKiczb5QgRor6kjXRUaDqF10pqomriazaheFCZjaXe8aOPibItU4EeTep9g/132","nickname":"小欢子","note":"","ucode":"387DEBAAAF414A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320022,"discussion_content":"刚看到这里的时候也有困惑，为啥一定是上一层呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604225877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49845,"user_name":"roc","can_delete":false,"product_type":"c1","uid":1068263,"ip_address":"","ucode":"7F861184C52CB1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/e7/28fb0ddb.jpg","comment_is_top":false,"comment_ctime":1544778991,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"74559223023","product_id":100017301,"comment_content":"王争老师，想问一下，我前面的内容掌握了有80%，如果不是面试算法岗，应该还算过关吧？","like_count":18,"discussions":[{"author":{"id":1713288,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/24/88/6d39c9de.jpg","nickname":"o.captain.my.captain","note":"","ucode":"5256803BF3BD74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218733,"discussion_content":"老师说：我就写了10%，准备给你们开一扇窗，结果你还说窗户大了...","likes_number":27,"is_delete":false,"is_hidden":false,"ctime":1585673400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306950,"discussion_content":"面试看缘分。。兄弟 多面面就知道了。。不管我面别人 还是别人面我  3 400场是有了。。。这玩意看缘分多。。但是运气基于实力，实力基于平时积累，所以平时多看书学习，数据结构与算法是一方面，我作为面试官更想知道你在工作中有没有其他的一些idea提升效率，人效或者技术效率都可以，从这个可以推出你在工作中是否有积极性或者性格中是否有自驱的成分","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1600427455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41115,"discussion_content":"老师都不敢明确回答...","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1572356402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1488020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","nickname":"追风筝的人","note":"","ucode":"2993D60F94C396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86427,"discussion_content":"哈哈  ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576595567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41115,"ip_address":""},"score":86427,"extra":""}]},{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325828,"discussion_content":"leetcode先刷400题再说吧..","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605440354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135215,"discussion_content":"给你过了！现在放心了吧，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579077963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138314,"user_name":"coldpark","can_delete":false,"product_type":"c1","uid":1058331,"ip_address":"","ucode":"D1B0F343B384F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/26/1b/4caf36bd.jpg","comment_is_top":false,"comment_ctime":1570160380,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"70289637116","product_id":100017301,"comment_content":"fail数组的构建的作用我是这么理解的，请老师看看是不是对的：<br>1. 在已经匹配上的敏感词中找到是否还有子集包含敏感词<br>2.看这个子集的后续节点能否进一步匹配。<br>举个例子：<br>1. 敏感词是abc和bc，主串是abc，那么按照fail指针算法，abc中的c会链接到bc中的c，那么我匹配上了abc自然就相当于匹配上了bc，不用单独在主串中找是否含有bc。<br>2. 主串是abcd，敏感词是abc，bcd，如果我匹配上abc，但是发现abc后面没有d，然后发现abc的c链接到bcd中的c，转过去一看，果然后面有d，就不用单独在主串中找是否含有bcd了。","like_count":17,"discussions":[{"author":{"id":1270780,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er8AdNibZHbZriaqLQZrNPcX8hVOpY91o0ELl7eOq7qy3aTibjia10ymIsKUKW6Ucs9SuXBDWlg6sjahw/132","nickname":"逆舟","note":"","ucode":"B303B4B8E10E0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235107,"discussion_content":"牛B，感觉你总结得很到位了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587020190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1058331,"avatar":"https://static001.geekbang.org/account/avatar/00/10/26/1b/4caf36bd.jpg","nickname":"coldpark","note":"","ucode":"D1B0F343B384F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1270780,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er8AdNibZHbZriaqLQZrNPcX8hVOpY91o0ELl7eOq7qy3aTibjia10ymIsKUKW6Ucs9SuXBDWlg6sjahw/132","nickname":"逆舟","note":"","ucode":"B303B4B8E10E0C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244538,"discussion_content":"谢谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587609710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":235107,"ip_address":""},"score":244538,"extra":""}]}]},{"had_liked":false,"id":171347,"user_name":"张阔","can_delete":false,"product_type":"c1","uid":1338247,"ip_address":"","ucode":"404E4431B03836","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/87/20527fa0.jpg","comment_is_top":false,"comment_ctime":1578906222,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"48823546478","product_id":100017301,"comment_content":"贴一个感觉不错的视频，可以结合着来看。https:&#47;&#47;www.bilibili.com&#47;video&#47;av81263689?p=1  ","like_count":12,"discussions":[{"author":{"id":1142739,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6f/d3/4384a4e5.jpg","nickname":"莫念","note":"","ucode":"4C079403645BBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387496,"discussion_content":"这个视频绝绝子，一下子懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628216588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684113,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b2/91/fbc34225.jpg","nickname":"zero","note":"","ucode":"27019747CA63FF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258478,"discussion_content":"压根也不是Ac","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588689451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1318404,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/04/f902047e.jpg","nickname":"你在不远的未来","note":"","ucode":"5B34C8BD03B71A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1684113,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b2/91/fbc34225.jpg","nickname":"zero","note":"","ucode":"27019747CA63FF","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":284556,"discussion_content":"怎么不是，trie树 + 失败指针，只是没有代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592555824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":258478,"ip_address":""},"score":284556,"extra":""}]},{"author":{"id":1393004,"avatar":"https://static001.geekbang.org/account/avatar/00/15/41/6c/687c5dfb.jpg","nickname":"叶子。","note":"","ucode":"3EF2CC36F0D09A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224808,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586333606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1138759,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/47/fa06038b.jpg","nickname":"人生入戏须尽欢","note":"","ucode":"E5B7EAAECEFB03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159993,"discussion_content":"没有查找过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580741864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134980,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1568968008,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44518640968","product_id":100017301,"comment_content":"https:&#47;&#47;www.cnblogs.com&#47;sclbgw7&#47;p&#47;9260756.html，这篇文章跟老师写的文章互相补充着看，ac自动机的概念就一目了然了","like_count":11,"discussions":[{"author":{"id":1030657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","nickname":"Leoorz","note":"","ucode":"8912628AD6ADE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110621,"discussion_content":"很清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577748632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52915,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1545551736,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"40200257400","product_id":100017301,"comment_content":"终于完全看懂了。<br>有几个疑问：<br>1，“首先 root 的失败指针为 NULL，也就是指向自己。”后半句是不准确或错误的，root的失败指针并非指向自身，因为root不等于null。<br>2，“如果 p 指向的节点有一个等于 b[i] 的子节点 x……”以及下文中提到的b[i]，是笔误吗？应该为a[i]吧，因为a才是主串。","like_count":10,"discussions":[{"author":{"id":1602652,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzSRrK59sydlOmgvqIFm1pjHA55RcM5ttWvHdOZyibZhFCr7picy4Xf5Bf9dLOW8d2DGUwA1zormzw/132","nickname":"钱勇","note":"","ucode":"BA2796F17E54E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51819,"discussion_content":"也是看了半天没看懂，如果是a，就好理解了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573956626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547322,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/3a/bfd73920.jpg","nickname":"junjun","note":"","ucode":"1F7EE146B9BE04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20737,"discussion_content":"对，应该是等于a[i]","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569370484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570142,"discussion_content":"这个比把评论放出来也不修正，我特么后面看的还要来看评论才知道特么的比写错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651675291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016786,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c6/12/7c36aa3a.jpg","nickname":"Black船长","note":"","ucode":"B0B73E8DEB56C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292523,"discussion_content":"赞同。就像KMP里，模式串计算next的时候，第一个字符肯定没有最长可匹配后缀子串一样，那里的next[0]结果是-1，只是说不存在这个后缀字符串。这里的root节点失败指针为null，也是意味着不存在。即使root.data=null，但是root是个存在的节点，失败指针指向null就是 不指向任何节点，这和指向一个节点，它的data为null还是有区别的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595250157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1195489,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3d/e1/5279ea2f.jpg","nickname":"鱼鱼鱼培填","note":"","ucode":"5D99ED5A01AB3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":134206,"discussion_content":"Trie树的root是不包含字符的，所以是NULL吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579012657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61341,"user_name":"闫飞","can_delete":false,"product_type":"c1","uid":1013162,"ip_address":"","ucode":"30C782D30108D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/aa/21275b9d.jpg","comment_is_top":false,"comment_ctime":1547684074,"is_pvip":false,"replies":[{"id":"26782","content":"么机会了。专栏已经更新完了。不过，你的问题我记下来了，我会更新到我的公众号里，你可以关注我的公众号：“小争哥”","user_name":"作者回复","comment_id":61341,"uid":"1190123","ip_address":"","utype":1,"ctime":1551923759,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"35907422442","product_id":100017301,"comment_content":"可以讲讲自动机的概念吧，否则总有些感觉突兀","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436839,"discussion_content":"么机会了。专栏已经更新完了。不过，你的问题我记下来了，我会更新到我的公众号里，你可以关注我的公众号：“小争哥”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551923759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49856,"user_name":"EidLeung","can_delete":false,"product_type":"c1","uid":1120259,"ip_address":"","ucode":"0F16DDB4779D1F","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/03/ef0efcc4.jpg","comment_is_top":false,"comment_ctime":1544780335,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35904518703","product_id":100017301,"comment_content":"老师，如果要添加模式串，怎么改fail指针啊？","like_count":8,"discussions":[{"author":{"id":1182731,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/0b/1ccc90b7.jpg","nickname":"-Violet Evergarden-","note":"","ucode":"B483A3ACFB36F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236041,"discussion_content":"添加模式串的话会重新build Trie树和重新建立失败指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587052376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51595,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1545205332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31609976404","product_id":100017301,"comment_content":"老师，我觉得学你这个课之后除了学习新的知识之外，还能够让我能够了解平时间那些常见应用背后的操作，最关键的时候在激发我的好奇心，让我能够去思考那些技术。嗯……我觉得很多时候好奇心就是学好知识的基础","like_count":8},{"had_liked":false,"id":85006,"user_name":"懒猫","can_delete":false,"product_type":"c1","uid":1206544,"ip_address":"","ucode":"B4B567A11B491D","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/10/275ae749.jpg","comment_is_top":false,"comment_ctime":1554954765,"is_pvip":false,"replies":[{"id":"31013","content":"你理解错了。这里说的最长可匹配后缀子串是：其他模式串可以匹配到abc的最长后缀子串。并不是abc自己的后缀子串匹配自己。","user_name":"作者回复","comment_id":85006,"uid":"1190123","ip_address":"","utype":1,"ctime":1555381098,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"27324758541","product_id":100017301,"comment_content":"老师，这里求最长可匹配后缀子串没理解，您举的例子：abc的最长可匹配后缀子串为bc，但是按照kmp的思想，abc的前缀子串为a、ab，后缀子串为c、bc，这里bc就不是最长可匹配后缀子串了呀，而且abc的最长可匹配后缀子串长度应该为0，不是吗","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446528,"discussion_content":"你理解错了。这里说的最长可匹配后缀子串是：其他模式串可以匹配到abc的最长后缀子串。并不是abc自己的后缀子串匹配自己。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555381098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206466,"discussion_content":"kmp是自己和自己比，ac自动机是和别的模式串比较。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584407325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73060,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551787080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23026623560","product_id":100017301,"comment_content":"正好要做这个敏感词过滤系统😂","like_count":6},{"had_liked":false,"id":131036,"user_name":"森鱼","can_delete":false,"product_type":"c1","uid":1638587,"ip_address":"","ucode":"6AF86EB05088F4","user_header":"https://static001.geekbang.org/account/avatar/00/19/00/bb/25a29311.jpg","comment_is_top":false,"comment_ctime":1567605900,"is_pvip":false,"replies":[{"id":"49795","content":"那就看看https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;t8z4KQMrTrR3NljtWJm2zg","user_name":"作者回复","comment_id":131036,"uid":"1190123","ip_address":"","utype":1,"ctime":1567723482,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"18747475084","product_id":100017301,"comment_content":"字符串这几节真烧脑……","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466259,"discussion_content":"那就看看https://mp.weixin.qq.com/s/t8z4KQMrTrR3NljtWJm2zg","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567723482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135226,"discussion_content":"老师专门写了篇文章来安慰大家了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1579078336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78165,"user_name":"文祥","can_delete":false,"product_type":"c1","uid":1396893,"ip_address":"","ucode":"D38B0CD7926894","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/9d/b1305f4d.jpg","comment_is_top":false,"comment_ctime":1553083899,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18732953083","product_id":100017301,"comment_content":"之前没看代码，一直在想到底怎么一层一层的给失败指针赋值，想破头也想不到。这一手linkedlist用也太巧妙了吧，保证了一层一层，从左到右给失败指针赋值，感动的我都哭了。","like_count":5,"discussions":[{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575264,"discussion_content":"层次遍历","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654693801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809885,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/bcIibiaSu84wkP1kD9iaWpSriaBVmXJDvOFg22jjsy9GBdx9L9eGzHmAA0ZbFnohdLl2c0WYXMvoDiaq99ANxI298Rg/132","nickname":"Geek_6cf199","note":"","ucode":"CDD7D46D3D9FAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390925,"discussion_content":"其实就是利用队列来实现树的分层遍历啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630144826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344973,"discussion_content":"感动只是一时的，一会你就忘了，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611632417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184656,"user_name":"佳娃","can_delete":false,"product_type":"c1","uid":1806618,"ip_address":"","ucode":"47004C40CBE019","user_header":"https://static001.geekbang.org/account/avatar/00/1b/91/1a/c51b24f4.jpg","comment_is_top":false,"comment_ctime":1583378267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14468280155","product_id":100017301,"comment_content":"知道有这个东西就行，以后遇到再来看！","like_count":4},{"had_liked":false,"id":247572,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599744396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189678988","product_id":100017301,"comment_content":"我这种给人类凑数的智商，只配看的懂第一个暴力匹配， 其他几种根本不知道在讲什么，完全领会不到老师要传达的意思","like_count":2},{"had_liked":false,"id":170976,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1578808206,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10168742798","product_id":100017301,"comment_content":"问：如何才能实现一个高性能的敏感词过滤系统？<br><br>一：基于单模式串和Trie树实现的敏感词过滤<br>\t1，BF算法，RK算法，BM算法，KMP算法都是单模式算法，只有Trie树是多模式串匹配算法。<br>\t2，单模式串匹配算法，是在一个模式串和一个主串之间进行匹配，即一个主串中查找一个模式串。<br>\t3，多模式串匹配算法，就是在多个模式串和一个主串之间做匹配，即在一个主串中查找多个模式串。<br>\t4，单模式串匹配算法也能完成多模式串的匹配工作，但每个匹配过程都要遍历一遍用户输入的内容，效率低下。相比较多模匹配算法在这个问题的处理上，他只需要扫描一遍主串，就能在主串中一次性查找多个模式串是否存在，从而大大提高匹配效率。<br>\t<br>\t5，用Trie实现敏感词过滤，可以对敏感词进行预处理，构建成Trie树结构。这个预处理只需要做一次，如果敏感词字典更新了，只需要动态更新一下Trie数就可以了。<br>\t6，基于Trie树子这种处理方法，有点类似单模式串匹配的BF算法。单模式串匹配算法中，KMP算法对BF算法进行改进，引入了next数组，让匹配失败时，尽可能的将模式串往后多滑动几位。对模式串Trie树进行改进，进一步提升Trie的效率，就要用到AC自动机算法。<br><br>二：经典的多模式串匹配算法：AC自动机<br>\t1，AC自动机算法，全称是Aho-Corasick算法。Trie树跟AC自动机之间的关系，就像单串匹配中朴素的串匹配算法，跟KMP算法之间的关系一样，只不过前者针对的是多模式串而已。<br>\t2，AC自动机实际上就是Trie树之上，加了类似KMP的next数组，只不过此处多的next数组是构建在树上罢了。<br>\t3，AC自动机的构建，包含两个操作：<br>\t\t（1）：将多个模式串构建成Trie树；<br>\t\t（2）：在Trie树上构建失败指针（相当于KMP中的失效函数next数组）<br>\t4，构建好Trie数之后，如何在它之上构建失败指针？<br> <br>①：Trie树中的每个节点都有一个失败指针，他的作用和构建过程，跟KMP算法中的next数组极其相似。<br> <br>假设沿Trie树走到p节点(紫色节点)，那p的失败指针就是从root走到紫色节点形成的字符串abc，跟所有模式串前缀匹配的最长可匹配后缀子串，就是箭头指的bc模式串。<br>最长可匹配后缀子串，字符串abc的后缀子串有两个bc，c我们拿它们于其他模式串匹配，如果某个后缀子串可以匹配某个模式串的前缀，就把那个后缀子串叫做可匹配后缀子串。<br>\t\t\t<br>②：从可匹配后缀子串中，找出最长的一个，将p节点的失败指针指向那个最长匹配后缀子串对应的模式串的前缀的最后一个节点。<br>③：计算每个节点的失败指针这个过程看起来有些复杂，其实，如果把树中中相同深度的节点放到同一层，那么某个节点的失败指针只有可能出现在它所在层的上一层。<br>④：可以像KMP算法那样，当要求某个节点的失败指针时，通过已经求得的，深度更小的那些节点的失败指针来推导。即可以逐层依次来求解每个节点的失败指针。所以，失败指针的构建过程，是一个按层遍历树的过程。<br><br>\t5，当已经求得某个节点p的失败指针之后，如何寻找他的子节点的失败指针？<br>\t\t①：假设节点p的失败指针指向节点q,看节点p的子节点pc对应的字符，是否也可以在节点q的子节点中找到。如果找到了节点q的一个子节点qc，对应的字符跟节点pc对应的字符相同，则将节点pc的失败指针指向节点qc。<br>\t\t②：如果节点q中没有子节点的字符等于节点pc包含的字符，则令q=q-&gt;fail，继续上面的查找，直到q是root为止，如果没有找到相同字符的子节点，就让节点pc的失败指针指向root。<br> <br>\t6 如何在AC自动机上匹配主串？<br>\t\t①：在匹配过程中，主串从i=0开始，AC自动机从指针p=root开始，假设模式串是b，主串是a。<br>\t如果p指向的节点有一个等于b[i]的子节点x,我们就更新p指向x，这个时候我们需要通过失败指针，检测一系列失败指针为结尾的路径是否是模式串。<br>\t如果p指向的节点没有等于b[i]的子节点，那失败指针就派上了用场了，我们让p=p-&gt;fail，然后继续这两个过程。<br><br>7，AC自动机做匹配的时间复杂度是多少？<br>\tFor循环依次遍历主串的每个字符，for循环内部最耗时的部分也是while循环，而这一部分的时间复杂度也是O(len)，所以总的时间复杂度就是O(n*len)。因为敏感词不会很长，而且这个时间复杂度只是一个非常宽泛的上限，实际情况下，可能近似于O(n)，所以AC自动机做敏感词过滤，性能非常高。<br><br>\t因为失效指针可能大部分情况下都指向root节点，所以绝大部分情况下，在AC自动机上做匹配的效率要远高于刚刚计算出的比较宽泛的时间复杂度，只有在极端情况下，AC自动机的性能才会退化的根Trie树一样。<br>","like_count":2},{"had_liked":false,"id":138062,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1570004894,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10159939486","product_id":100017301,"comment_content":"单模式串匹配算法：<br>1 BF算法实现简单，但性能较差，适合主串和模式串比较小的场景<br>2 RK算法对BF算法进行了改进，通过构造巧妙的哈希函数减少匹配的次数。适合主串和模式串较短，且字符集合范围较小的场景<br>3 BM算法对BF进行了改进，性能较高，适合大部分文本查询场景。但是其中的坏字符规则比较耗费内存，当内存比较紧张时，可以仅使用好后缀规则，或者使用KMP算法<br>4 KMP算法空间和时间复杂度都较优，在主串较长时，应该选用kmp算法<br>多模字符串匹配算法：<br>1 Trie树：空间换时间，当各个模式串之间具有公共前缀时，空间利用率较高，适合前缀匹配。对于精确匹配，其性能低于红黑树和哈希表<br>2 AC自动机：基于Trie树的多模式串匹配算法，在Trie树节点引入了失效指针，使得一次遍历即可求得所有匹配的模式串。非常适用于多模式串匹配的场景","like_count":3,"discussions":[{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575265,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654693847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97592,"user_name":"wahaha","can_delete":false,"product_type":"c1","uid":1051402,"ip_address":"","ucode":"E60166599CF31D","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/0a/fa152399.jpg","comment_is_top":false,"comment_ctime":1558704109,"is_pvip":false,"replies":[{"id":"34889","content":"没问题的 就是紧确 意思和精确类似 你可以查一查","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1558706117,"ip_address":"","comment_id":97592,"utype":2}],"discussion_count":1,"race_medal":0,"score":"10148638701","product_id":100017301,"comment_content":"“我这里给出一个不是很紧确的上界。”<br>不是“紧确”应该是“精确”","like_count":3,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451336,"discussion_content":"没问题的 就是紧确 意思和精确类似 你可以查一查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558706117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73059,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551787056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10141721648","product_id":100017301,"comment_content":"ac自动机跟DFA算法有啥不同?","like_count":2},{"had_liked":false,"id":49632,"user_name":"吴宇晨","can_delete":false,"product_type":"c1","uid":1199968,"ip_address":"","ucode":"F8F45B7067DF6D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/60/049a20e9.jpg","comment_is_top":false,"comment_ctime":1544748551,"is_pvip":false,"replies":[{"id":"17897","content":"不是指向上一层 而是上层 上几层都有哦可能","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544754287,"ip_address":"","comment_id":49632,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134683143","product_id":100017301,"comment_content":"请教下老师，第三幅图，如果把d换成e，那pc的失败指针是不是要指向root了，但是和之前说的只会指向上一层节点不一样啊，希望老师解答下","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432694,"discussion_content":"不是指向上一层 而是上层 上几层都有哦可能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544754287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338619,"user_name":"Null","can_delete":false,"product_type":"c1","uid":1382587,"ip_address":"","ucode":"A7D4DF2A43C7D8","user_header":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","comment_is_top":false,"comment_ctime":1647603021,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5942570317","product_id":100017301,"comment_content":"老师的课程讲的很棒，只是说实话最近几篇的内容首先没有从根本思路的屡清楚，更不用说具体的步骤和代码了。<br><br>比如，AC机到底要做一件什么事儿，其实就是《它表示文本串在当前节点失配后，我们应该到哪个节点去继续匹配。<br><br>很显然，对于每个节点，其失配指针应该指向其他子树中的表示同一字符的那些节点，并且它与其子树能构成剩下的最长后缀》。这是基本思路，然后才有后续的具体步骤和代码表达。<br><br>关于ac，知乎上有一篇跟老师一样棒的文章：https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;80325757。希望可以帮助到大家。","like_count":2,"discussions":[{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575266,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654693990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277468,"user_name":"邵光泽","can_delete":false,"product_type":"c1","uid":1985537,"ip_address":"","ucode":"45088A0F5DF384","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4c/01/72203f00.jpg","comment_is_top":false,"comment_ctime":1612424750,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5907392046","product_id":100017301,"comment_content":"郁闷啊，我写了一大长串笔记，点提交告诉我有敏感词......我学的就是屏蔽敏感词啊...<br>关键是...没了。。。 都没了。。。。","like_count":1,"discussions":[{"author":{"id":1342000,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7a/30/23fc4089.jpg","nickname":"24隋心所欲","note":"","ucode":"1B8B2789F68C94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352780,"discussion_content":"是文章开头的那三个词语吧，hhh","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614847437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150577,"user_name":"+@+","can_delete":false,"product_type":"c1","uid":1137873,"ip_address":"","ucode":"58067127007683","user_header":"https://static001.geekbang.org/account/avatar/00/11/5c/d1/9bdd6906.jpg","comment_is_top":false,"comment_ctime":1573561484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868528780","product_id":100017301,"comment_content":"计算每个节点的失败指针这个过程看起来有些复杂。其实，如果我们把树中相同深度的节点放到同一层，那么某个节点的失败指针只有可能出现在它所在层的上一层。    为什么只有可能出现在他所在层的上一层呢","like_count":1},{"had_liked":false,"id":102588,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1560258639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855225935","product_id":100017301,"comment_content":"BF: 实现简单，效率低，时间复杂高O(n*m)<br>KMP: 实现稍微复杂，效率高，时间复杂度O(n+m)<br>Tire: 适合前缀重复性高场景.<br>ac自动机: 多字符串匹配效率高, O(n)","like_count":1},{"had_liked":false,"id":49738,"user_name":"zixuan","can_delete":false,"product_type":"c1","uid":1131300,"ip_address":"","ucode":"C72920DD05B074","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","comment_is_top":false,"comment_ctime":1544759398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839726694","product_id":100017301,"comment_content":"这是不是就是Double Array Trie (DATrie)？之前一直看不太理解，感谢老师解惑。<br>For More: https:&#47;&#47;linux.thai.net&#47;~thep&#47;datrie&#47;","like_count":2},{"had_liked":false,"id":347812,"user_name":"人间四月天","can_delete":false,"product_type":"c1","uid":1048314,"ip_address":"","ucode":"11BE219C23EEBC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","comment_is_top":false,"comment_ctime":1654477401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654477401","product_id":100017301,"comment_content":"正则表达式做字符串匹配用的是什么算法？","like_count":0},{"had_liked":false,"id":343625,"user_name":"王杰","can_delete":false,"product_type":"c1","uid":2027259,"ip_address":"","ucode":"663050BB20C230","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ee/fb/d5265897.jpg","comment_is_top":false,"comment_ctime":1650959441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650959441","product_id":100017301,"comment_content":"不知道大家有没有同感，跟着代码调试可以把构建失败指定队列和匹配的模型在脑海里面回溯一遍。但是完全靠自己的思维，写不出匹配的代码。。","like_count":0},{"had_liked":false,"id":338199,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1647350112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647350112","product_id":100017301,"comment_content":"AC自动机: 多模式串匹配， 多模式串有公共的后缀最好<br>Trie 树：适合字符串的公共前缀匹配， 并且是动态匹配过程 （空间复杂度高）<br>KMP 算法、BM 算法：高效的静态匹配方法（空间复杂度低）<br>BF 算法：工程实践首选","like_count":1},{"had_liked":false,"id":333605,"user_name":"morning","can_delete":false,"product_type":"c1","uid":2489094,"ip_address":"","ucode":"7D0768A06489B7","user_header":"https://static001.geekbang.org/account/avatar/00/25/fb/06/4a5d6cc5.jpg","comment_is_top":false,"comment_ctime":1644420942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644420942","product_id":100017301,"comment_content":"请问，为什么大部分的失效指针是指向root？","like_count":0},{"had_liked":false,"id":320405,"user_name":"Geek_bbbda3","can_delete":false,"product_type":"c1","uid":1504651,"ip_address":"","ucode":"737394CE472C21","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKNDKOCoZvCqoYVM1t97Q77QPLmRBGvOLYzFsh8073RicycoIuwGrIsCXpAFEyVBOxcyE3Ih1mr6Vw/132","comment_is_top":false,"comment_ctime":1636295733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636295733","product_id":100017301,"comment_content":"老师，如果匹配不到的时候，不需要考虑好前缀子串吗？ 不然匹配不到的时候往后滑动的字符是不是太多了，  针对每一个敏感词是不是还需要单独构建自己的next数组","like_count":0},{"had_liked":false,"id":319771,"user_name":"王同学","can_delete":false,"product_type":"c1","uid":1748742,"ip_address":"","ucode":"E2FE15452816D2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/af/06/2478c354.jpg","comment_is_top":false,"comment_ctime":1635935799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635935799","product_id":100017301,"comment_content":"老师为什么某个节点的失败指针只有可能出现在它所在层的上一层，上n层也是可以的吧，为什么只会出现在上一层呢","like_count":0},{"had_liked":false,"id":316769,"user_name":"书旅","can_delete":false,"product_type":"c1","uid":1497097,"ip_address":"","ucode":"B7E3FD4EF199D4","user_header":"https://static001.geekbang.org/account/avatar/00/16/d8/09/908cb229.jpg","comment_is_top":false,"comment_ctime":1634546348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634546348","product_id":100017301,"comment_content":"要理解AC具体是从哪里提高了匹配的效率，我觉得要能捋清楚用Trie树实现敏感词过滤的过程（最好是知道怎么敲），然后再以敏感词过滤的例子来看AC的实现，真的轻松很多。熬了两天，可算是看明白了！老师真的太棒了！","like_count":0},{"had_liked":false,"id":302876,"user_name":"cook","can_delete":false,"product_type":"c1","uid":1161868,"ip_address":"","ucode":"CCF96218105804","user_header":"https://static001.geekbang.org/account/avatar/00/11/ba/8c/f8e56e1c.jpg","comment_is_top":false,"comment_ctime":1626419228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626419228","product_id":100017301,"comment_content":"原文中 “假设 Trie 树中总的节点个数是 k，每个节点构建失败指针的时候，（你可以看下代码）最耗时的环节是 while 循环中的 q=q-&gt;fail，每运行一次这个语句，q 指向节点的深度都会减少 1，而树的高度最高也不会超过 len，所以每个节点构建失败指针的时间复杂度是 O(len)。整个失败指针的构建过程就是 O(k*len)。”  这里的 “q 指向节点的深度都会减少 1” 应该是“q 指向节点的深度至少都会减少1”。","like_count":0},{"had_liked":false,"id":294827,"user_name":"马克图布","can_delete":false,"product_type":"c1","uid":1019274,"ip_address":"","ucode":"9E3879D6A55244","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/8a/ec29ca4a.jpg","comment_is_top":false,"comment_ctime":1622103336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622103336","product_id":100017301,"comment_content":"去年面试字节被问到这道题，那会还没学，完全不知道怎么做，还在用BF暴力去解决，今天才知道有这种方法","like_count":1},{"had_liked":false,"id":294338,"user_name":"13439875290","can_delete":false,"product_type":"c1","uid":1367818,"ip_address":"","ucode":"4C4D956ACDF356","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/KBGky9icM5vrprxE2uiaKd774eBBur0YlV6icURcPkdKACPsJ0LUEKH8GfIq8chdic7OqRkAZQicXdibYICx5odEIg2w/132","comment_is_top":false,"comment_ctime":1621904510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621904510","product_id":100017301,"comment_content":"老师您好！如果是中文敏感词过滤，不像26个英文字母这么好处理吧，还能用Trie树吗","like_count":0},{"had_liked":false,"id":288645,"user_name":"Ivan.Qi","can_delete":false,"product_type":"c1","uid":1099170,"ip_address":"","ucode":"36F46A4D1F0EAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/a2/4ece341b.jpg","comment_is_top":false,"comment_ctime":1618577552,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1618577552","product_id":100017301,"comment_content":"中文AC 自动机<br>https:&#47;&#47;github.com&#47;Ivanqi&#47;algorithm&#47;tree&#47;master&#47;ac_automata&#47;AcAutomata&#47;tests&#47;AcAutoMata_test","like_count":1,"discussions":[{"author":{"id":1982711,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","nickname":"zh","note":"","ucode":"98772B1B6C6E06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584514,"discussion_content":"这个算法有个小问题，没法匹配连续的模式串，从p = root;后要再find一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660890438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287130,"user_name":"littlegao","can_delete":false,"product_type":"c1","uid":2526304,"ip_address":"","ucode":"6ADD1E74ADAD29","user_header":"https://static001.geekbang.org/account/avatar/00/26/8c/60/705da7f8.jpg","comment_is_top":false,"comment_ctime":1617786237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617786237","product_id":100017301,"comment_content":"看到这里已经彻底晕了！但是匹配算法(中)的BM算法今天动手之后，还是比之前要稍微看懂了一些，这一块已经看了好几天了。","like_count":0},{"had_liked":false,"id":285736,"user_name":"Geek_4b663c","can_delete":false,"product_type":"c1","uid":2470314,"ip_address":"","ucode":"5E3B17B38534D6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLC6iaP3kibgNvG9oeolUqEYw8YIXz1tOicvgVyoqY7N54CsV26ljfLwVgibtqo80btO5AShpXRMTCexmQ/132","comment_is_top":false,"comment_ctime":1616996461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616996461","product_id":100017301,"comment_content":"int pos = i-tmp.length+1;这里的tmp.length在创建Trie 树时需要进行设置吧？上一节的Trie 树代码没有提及","like_count":0},{"had_liked":false,"id":281056,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614565359,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614565359","product_id":100017301,"comment_content":"茶艺师学编程<br><br>思考题<br>BF ：单模式算法，适用于最简单的场景，但代码简单，可靠性高。在能满足性能的情况下就可以用。<br>RK ：单模式算法，复合了哈希算法的BF，在理论上能比BF更快，但如果发生了哈希碰撞，时间花销还是会回到BF水平。<br>BM ：单模式算法，运用了规则使模式串在主串上更大跨度地“遍历”，从而达到加速的效果。适用于文本编辑器场景。<br>KMP ：单模式算法，优化了规则的使用，从而能比BM更快。<br>Trie ：多模式算法，适用于搜索提示，只是建树比较费劲。<br>AC自动机 ：KMP + Trie，适用于敏感词过滤。大工程。","like_count":0},{"had_liked":false,"id":278176,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1612788840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612788840","product_id":100017301,"comment_content":"吃饭听","like_count":0},{"had_liked":false,"id":276499,"user_name":"ant","can_delete":false,"product_type":"c1","uid":1556708,"ip_address":"","ucode":"A39A03AF257471","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYLPAlGUWic4yAqsGtEYBSRR7gDjyg9yiaJicNhMwiaNw4rMKQ5DHTfp7gmic0gpqEwCZaou8G6CdHKCg/132","comment_is_top":false,"comment_ctime":1611975236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611975236","product_id":100017301,"comment_content":"作为一个游戏行业从业者，我觉得字符串匹配这一块是受益匪浅。感谢王争老师的经验传授。利用ac自动机我也对我们游戏屏蔽字过滤做了一个相关的优化。","like_count":0},{"had_liked":false,"id":263646,"user_name":"杨","can_delete":false,"product_type":"c1","uid":1971269,"ip_address":"","ucode":"7EFEFE285975C6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/oltLEqTrmHm2aJP99BK6tHu5h7hp4aj08wR5Wt6H31iadFduDAVvjYKmhQ2nvGbLV3lkVdiat2GRasgWXoJeTibUg/132","comment_is_top":false,"comment_ctime":1606206499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606206499","product_id":100017301,"comment_content":"老师我想知道dfa算法和ca算法哪个性能更优秀呀","like_count":0},{"had_liked":false,"id":263190,"user_name":"庄坤","can_delete":false,"product_type":"c1","uid":1610407,"ip_address":"","ucode":"5E1C3E234BB793","user_header":"https://static001.geekbang.org/account/avatar/00/18/92/a7/b16dfff3.jpg","comment_is_top":false,"comment_ctime":1606037654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606037654","product_id":100017301,"comment_content":"英语的单词都是用空格或标点符号做分隔，对于这种敏感词过滤是不是直接分割后hash表进行查询即可。毕竟没有必要在abcdfuckabcd里面去提取fuck作为敏感词。<br>这里的AC自动机每个顶点应该存放一个英文单词或者一个中文作为数据，过滤敏感的语句，我们不能把草作为敏感词，但是草**，则会被过滤。","like_count":0},{"had_liked":false,"id":256420,"user_name":"Geek_636e46","can_delete":false,"product_type":"c1","uid":2164554,"ip_address":"","ucode":"E27F2B037B4C41","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLc8iay7SThjDaND4WNn4jlK2L7fyPaFibzxUyS6UiaypQsMibIjhxONeChTuTHZEdjXk0CHEgRRjJKbA/132","comment_is_top":false,"comment_ctime":1603620349,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603620349","product_id":100017301,"comment_content":"如果节点 q 中没有子节点的字符等于节点 pc 包含的字符，则令 q=q-&gt;fail（fail 表示失败指针）<br><br>这句话是不是没说清楚。。。失败指针又是哪里来的，指向哪里","like_count":0,"discussions":[{"author":{"id":1260104,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3a/48/6b1cca18.jpg","nickname":"casera","note":"","ucode":"3D77CE5BD8B9F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331438,"discussion_content":"q>fail在上一层的时候已经计算好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606875360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255112,"user_name":"youyou.L","can_delete":false,"product_type":"c1","uid":1796438,"ip_address":"","ucode":"B3DB0D0700EEAC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/zlWt0lPDicdib5BTUbuwA3wLLUuejtZ5icGu3DHMBPd6PicXOdhZ3zYFts8VkXjjyQuxzUJas2w5OTmx3icWKiaZM1Vg/132","comment_is_top":false,"comment_ctime":1603267993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603267993","product_id":100017301,"comment_content":"二刷才看懂主干逻辑，还是看代码看懂的，文字真的看傻了。<br>主干逻辑：<br>把主串分为[0,1],[0,2]....[0,i]...[0,n-1]共n个子串（包含主串本身），然后判断每个子串是否与模式串匹配，若匹配则记录对应下标和长度，并且通过失败指针查找该子串中是否有后缀子串与其它模式串前缀子串匹配或部分匹配，直到把该子串通过失败指针回到root节点则结束；若不匹配直接走失败指针。这个过程重点是把每一个子串包含的后缀子串是否与模式串中的前缀子串重合。<br>老师的这个代码，复杂度不低的n个子串，每个子串走失败指针最大操作数是树高len，时间复杂度是O(nlen)","like_count":0},{"had_liked":false,"id":250738,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1601207006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601207006","product_id":100017301,"comment_content":"1. BF、RK算法适合简单的字符串查找，例如Java常用的String.indexOf()；<br>2. BM、KMP算法适合在很长字符串查找某个短字符串，例如文本编辑器的查找功能；<br>3. Trie树适合做输入提示；<br>4. AC自动机适合做多模式串匹配，如敏感词过滤","like_count":0},{"had_liked":false,"id":248982,"user_name":"l c","can_delete":false,"product_type":"c1","uid":1245596,"ip_address":"","ucode":"7D43CC471595EC","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/9c/1a750bc7.jpg","comment_is_top":false,"comment_ctime":1600394236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600394236","product_id":100017301,"comment_content":"其实，如果我们把树中相同深度的节点放到同一层，那么某个节点的失败指针只有可能出现在它所在层的上一层。 <br>想问为什么啊。<br>假设模式串第一个为A-&gt;F-&gt;G-&gt;B-&gt;C<br>第二个为B-&gt;C<br>这样明显不在上面一层啊","like_count":0},{"had_liked":false,"id":240777,"user_name":"曾益达","can_delete":false,"product_type":"c1","uid":2113150,"ip_address":"","ucode":"AC20D6F5EF01C4","user_header":"https://static001.geekbang.org/account/avatar/00/20/3e/7e/3dac54fa.jpg","comment_is_top":false,"comment_ctime":1597061380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597061380","product_id":100017301,"comment_content":"妙啊！","like_count":0},{"had_liked":false,"id":240046,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1596725660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596725660","product_id":100017301,"comment_content":"其实，AC 自动机的比较过程就是跟单模式下的情况差不多。单模式下会有两个指针，i 和 j，只要相等就会一直移下去。同理 AC 自动机中也是一样的，有 i 和 p 两个指针，只要相等就会一直移下去。当移动不相等之后，单模式下的 KMP 算法是借助 next 数组来寻找移动的步数，如果不存在则直接将模式串的指针置为开始的地方。而 AC 自动机也是类似的，它是借助失败指针来实现，如果一直都不存在，那么同样将模式串的指针置为开始的地方，相当于重新开始进行比较。","like_count":0},{"had_liked":false,"id":239704,"user_name":"Geek_b52974","can_delete":false,"product_type":"c1","uid":1298252,"ip_address":"","ucode":"59884399646620","user_header":"","comment_is_top":false,"comment_ctime":1596620666,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596620666","product_id":100017301,"comment_content":"假如过滤字有公共前缀子串该怎么办？<br>目前的想法是：在节点上加入一个 flag 来判断是否是一个完整的词的结尾，继续往后匹配，失败的话一样换到失败指针所指向的，直到失败指针的指向的字比先前匹配到的字串短，返回之前匹配到的最长词，不知这样做靠不靠谱","like_count":0},{"had_liked":false,"id":225868,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1591878350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591878350","product_id":100017301,"comment_content":"KMP和AC自动机终于看懂了！前年看的时候完全看不懂，就没进行下去了。今年再认真看，花了四天把原理搞懂了，接下来准备实现一下AC自动机敏感词过滤（汉字）","like_count":0},{"had_liked":false,"id":219966,"user_name":"John","can_delete":false,"product_type":"c1","uid":1020861,"ip_address":"","ucode":"E4ADF8488953FB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/bd/f3977ebb.jpg","comment_is_top":false,"comment_ctime":1590127117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590127117","product_id":100017301,"comment_content":"讲真 这样的算法更适合用视频讲出来 语音和文字很容易有表述不清的地方.","like_count":0},{"had_liked":false,"id":219415,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1590024058,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1590024058","product_id":100017301,"comment_content":"AC 自动机的实现原理并不难（被之前的 BM 和 KMP 洗脑&#47;蹂躏了）。<br><br>看了一下留言里面 @张阔 推荐的 B 站 邋遢大哥233 的视频讲解，果然讲的很清楚，而且还有前面关于 KR 和 KMP 的，可以一起看一下 https:&#47;&#47;www.bilibili.com&#47;video&#47;BV1uJ411Y7Eg<br><br>照着敲了一下文中的代码，感觉还是能够理解。","like_count":0},{"had_liked":false,"id":217474,"user_name":"阿蛋","can_delete":false,"product_type":"c1","uid":1992401,"ip_address":"","ucode":"37C870D1ACC57A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/66/d1/6e82cc7a.jpg","comment_is_top":false,"comment_ctime":1589511123,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589511123","product_id":100017301,"comment_content":"老师，如果面对的是中文匹配的话，应该如何处理呢","like_count":0,"discussions":[{"author":{"id":1613052,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9c/fc/0aa200b5.jpg","nickname":"Java课代表","note":"","ucode":"F17E4A1807FB12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274339,"discussion_content":"用hashmap存储中文，可以参考我的实现：https://github.com/zhengxl5566/algorithm","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590570491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217243,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1589446965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589446965","product_id":100017301,"comment_content":"学习笔记:<br>最近几节课太硬核了，了解下字符串匹配、多模式字符串匹配这个东西就行了，我就想不深究了。<br>AC自动机: 敏感词过滤功能。<br>BF RK BM KMP匹配算法也大致能完成，但是效率不行。关键在于敏感词很多，这是个多模式串匹配问题。<br>trie树也是个多模式串匹配算法。对敏感字串集进行预处理，形成trie树，就可以完成一个类似BF算法的多模式串匹配算法了。<br>ac自动机类似于BF算法向KMP算法的优化，需要建立trie树和失败指针。<br>失败指针也就是kmp算法中的next数组，也叫失败数组。<br>非常高效，实际运行中时间复杂度是O(n)。<br>思考题:<br>BF : 主串和模式串都不长O(M*N)<br>RK: 字符集范围不能太大，哈希函数难弄<br>naive-BM： 用于文本编辑器的查找功能。预处理模式串O(m2）。匹配O(n)<br>KMP:  适用于所有场景，实现比BM简单，O(n+m)<br>trie树：前缀重复较多的匹配O(n*k), 公共前缀的查找(O(K)).<br>AC自动机：大量文本中多模式串精确匹配查找。应用中O(n)<br>naive-trie<br>ac自动机","like_count":0},{"had_liked":false,"id":216176,"user_name":"李润东","can_delete":false,"product_type":"c1","uid":1972505,"ip_address":"","ucode":"65CFEA3C8B27C4","user_header":"https://static001.geekbang.org/account/avatar/00/1e/19/19/d82e24fb.jpg","comment_is_top":false,"comment_ctime":1589200472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589200472","product_id":100017301,"comment_content":"&quot;那么某个节点的失败指针只有可能出现在它所在层的上一层&quot;<br>感觉这里有问题吧...不一定非得是上一层，可能是上好几层啊...","like_count":0},{"had_liked":false,"id":215627,"user_name":"涛哥哥","can_delete":false,"product_type":"c1","uid":1361159,"ip_address":"","ucode":"329A1384E3AB5E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","comment_is_top":false,"comment_ctime":1589035453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589035453","product_id":100017301,"comment_content":"致此，以上所有章节全部搞懂，哎呀，真的是废了不少脑细胞。这是第二遍刷了，去年刷了一遍，但是很多只有个印象。相信这一刷“抗体更多”，。mark一下，同学们一起加油","like_count":0},{"had_liked":false,"id":212351,"user_name":"社会你强哥","can_delete":false,"product_type":"c1","uid":1243570,"ip_address":"","ucode":"325B9005588D9B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","comment_is_top":false,"comment_ctime":1588088402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588088402","product_id":100017301,"comment_content":"1. match函数中while循环，预处理的时候，就把到达该字符时，所有可匹配的长度给算出来放到一个数组里面，这个这个while循环中遍历数组，用i-长度，就可以打印了。如果在Match里面做，做了重复的工作。从追求时间复杂度小方面来说，这个是可以改进的，也不麻烦。<br>2. 这里面match匹配，感觉讲得不够清晰。<br>3. fail指针的本质是啥，为什么可以这么用，感觉要讲得更细致一点，不然根本看不懂。(考虑到我这种初学者啊，而且要找其它的AC自动机对照着看，才明白老师写的意思)。<br>  <br>","like_count":0},{"had_liked":false,"id":207489,"user_name":"-Violet Evergarden-","can_delete":false,"product_type":"c1","uid":1182731,"ip_address":"","ucode":"B483A3ACFB36F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/0b/1ccc90b7.jpg","comment_is_top":false,"comment_ctime":1587092038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587092038","product_id":100017301,"comment_content":"AC自动机和DFA实现多模式串匹配相比怎么样？","like_count":0},{"had_liked":false,"id":201214,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1585733567,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585733567","product_id":100017301,"comment_content":"第三段：<br><br>    def match(self, s):<br>        &#39;&#39;&#39;<br>        在这里完成匹配敏感词的操作，如果你要替换敏感词，可以很简单地实现替换<br>        :param s: 要匹配的字符串，它是主串<br>        :return: None<br>        &#39;&#39;&#39;<br>        p = self.root<br>        for i, v in enumerate(s):<br>            index = ord(v) - ord(&#39;a&#39;)<br>            while p.children[index] == None and p is not self.root:  # 寻找下一个节点值为当前字符的结点，如果没有，就最终传递到root<br>                p = p.fail<br><br>            p = p.children[index]  # 如果匹配到了，p更新为下一个节点，如果没有匹配到，p为root，它对应的孩子会是 None<br><br>            if p == None:  # 处理匹配失败的情况<br>                p = self.root<br><br>            temp = p<br>            while not (temp is self.root):  # 如果 p 匹配成功，需要看当前的节点是否为最终节点，如果是最终节点，代表匹配成功，输出信息<br>                if temp.isEndingChar:<br>                    print(&#39;匹配到敏感词汇：起始位置{}，长度{}&#39;.format(i - temp.length + 1, temp.length))<br>                temp = temp.fail<br><br><br>if __name__ == &#39;__main__&#39;:<br>    x = Trie()<br>    x.addChar(&#39;sb&#39;)<br>    x.addChar(&#39;shabi&#39;)<br>    x.addChar(&#39;cao&#39;)<br>    x.buildFailurePointer()<br>    x.match(&#39;nishigesbcao&#39;)<br>    # x.prin()","like_count":0},{"had_liked":false,"id":201213,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1585733547,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585733547","product_id":100017301,"comment_content":"第二段：<br>    def buildFailurePointer(self):<br>        &#39;&#39;&#39;<br>        在这里，我们将 Trie 树的所有节点构建出 fail 指针<br>        :return: None<br>        &#39;&#39;&#39;<br>        self.root.fail = None  # 初始化操作<br>        que = []<br>        que.append(self.root)<br><br>        while que:<br>            p = que.pop(0)<br>            # 在队列中取出一个数据作为 p ，在接下来的过程中，我们会为 p 的孩子节点 pc 构造 fail 指针，指针指向 qc（如果存在的话）<br><br>            for pc in p.children:<br>                if pc == None:  # 如果没有当前字符的子节点，跳过<br>                    continue<br>                if p is self.root:  # 如果 p 是root，pc 的fail 指向 root，注意，在这里已经通过 pc 构建了 root 外第一层的 fail 指针。<br>                    # 我们要保证每个节点都有fail指针，这个操作是必需的。<br>                    pc.fail = self.root<br><br>                else:  # 如果 p 不是根节点，那么 p 已经有了 fail 指针。<br>                    # 注意，因为上面的那个判断，第一层树节点已经有了 fail，之后的逻辑就比较简单了。<br>                    q = p.fail  # q 是 p-&gt;fail 指向的另一个节点。<br><br>                    while q != None:<br>                        qc = q.children[ord(pc.data) - ord(&#39;a&#39;)]  # 如果 qc 拥有和 pc 相同的 data，则可以构建 pc-&gt;fail 指向 qc<br>                        if qc:<br>                            pc.fail = qc<br>                            break  # pc 的 fail 构建成功以后就没有必要继续查找了<br><br>                        q = q.fail  # q-&gt;fail 也指向 data 为 p.data 的结点，可能这个结点也会有符合条件的子节点<br><br>                    if q == None:  # 如果 q 为 None，证明最终 pc 没有匹配到 fail 节点。<br>                        # 它只能指向 root （所有没有fail的结点的fail都指向root）<br>                        pc.fail = self.root<br><br>                que.append(pc)","like_count":0},{"had_liked":false,"id":201211,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1585733419,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585733419","product_id":100017301,"comment_content":"自己用Python实现了这个功能，个人感觉还是要先理解算法的思想和内容才能更好的理解代码。<br>由于字数限制，这里先放出一半代码：<br>class AcNonde():<br>    def __init__(self, data):<br>        self.data = data<br>        self.children = [None for i in range(26)]<br>        self.isEndingChar = False<br>        self.length = 0<br>        self.fail = None<br><br><br>class Trie:<br>    def __init__(self):<br>        self.root = AcNonde(&#39;root&#39;)<br><br>    def addChar(self, s):<br>        &#39;&#39;&#39;<br>        在 Trie树中创建一个字符串<br>        :param s: 要创建的字符串<br>        :return:<br>        &#39;&#39;&#39;<br>        cur = self.root<br>        l = 0<br>        for i in s:<br>            l += 1<br><br>            if cur.children[ord(i) - ord(&#39;a&#39;)]:<br>                cur = cur.children[ord(i) - ord(&#39;a&#39;)]<br>            else:<br>                temp = AcNonde(i)<br>                temp.length = l<br><br>                cur.children[ord(i) - ord(&#39;a&#39;)] = temp<br>                cur = temp<br><br>        cur.isEndingChar = True<br><br>    def prin(self):<br>        cur = self.root<br>        for i in cur.children:<br>            if i:<br>                self.dg(i, mark=[])<br>                <br>    @staticmethod<br>    def dg(root, mark=[]):<br><br>        if mark:<br>            mark[0] += root.data<br>        else:<br>            mark.append(root.data)<br><br>        if root.isEndingChar:<br>            print(mark[0] + &#39; length:&#39;, root.length)<br><br>        for i in root.children:<br>            if i:<br>                Trie.dg(i, mark=mark.copy())<br>            else:<br>                continue","like_count":0},{"had_liked":false,"id":185314,"user_name":"追风者","can_delete":false,"product_type":"c1","uid":1055092,"ip_address":"","ucode":"879BC372A6B605","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRiciax3Wo78c5rVjuWDiaw4ibcCiby8xiaMXJh5ibjU5242vfCGOK4ehibe1IKyxex2A4IX4XSA/132","comment_is_top":false,"comment_ctime":1583559963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583559963","product_id":100017301,"comment_content":"KMP构建next数组和AC自动机构建失效指针的共同点，在于二者都是在寻找最长公共前后缀，以避免遗漏主串中某些可以匹配的模式串。","like_count":0},{"had_liked":false,"id":179243,"user_name":"Geek_94adb8","can_delete":false,"product_type":"c1","uid":1638187,"ip_address":"","ucode":"B142F473E1A0B3","user_header":"","comment_is_top":false,"comment_ctime":1581942457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581942457","product_id":100017301,"comment_content":"1. “我们从可匹配后缀子串中，找出最长的一个，就是刚刚讲到的最长可匹配后缀子串。我们将 p 节点的失败指针指向那个最长匹配后缀子串对应的模式串的前缀的最后一个节点，就是下图中箭头指向的节点。”为什么找最长的？原因没有说明，而且这个原因和KMP选最长后缀的原因不一样吧！<br>2. “也就是说，我们可以逐层依次来求解每个节点的失败指针。所以，失败指针的构建过程，是一个按层遍历树的过程。”？？？直接给结论？<br>3.如果节点 q 中没有子节点的字符等于节点 pc 包含的字符，则令 q=q-&gt;fail（fail 表示失败指针，这里有没有很像 KMP 算法里求 next 的过程？）其实真不像...<br>没有挑刺儿之意，很多地方并没有解释清楚，这篇大概是写得最差的一篇！","like_count":0},{"had_liked":false,"id":176198,"user_name":"发霉的宅大人","can_delete":false,"product_type":"c1","uid":1738243,"ip_address":"","ucode":"6757E30FE5E48D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/03/95004954.jpg","comment_is_top":false,"comment_ctime":1580986331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580986331","product_id":100017301,"comment_content":"第一：fail指针为什么逐层<br>是为了寻找最大的匹配子串；<br>第二：举个例子<br>比如：敏感词 W C N M Y 和 C N M X和 N M D三个，构建Trie树和AC自动机<br>然后用户输入了W C N M D作为主串<br>匹配的时候先是匹配到 W C N M 下一个字符匹配失败，fail指针指向另一个M字符（ C N M D）的M<br>再匹配&#39;X&#39;失败，再指向N M D的‘M’，匹配‘D’成功<br>结果就是W C * * *","like_count":0},{"had_liked":false,"id":172444,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1579177963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579177963","product_id":100017301,"comment_content":"1  对照代码，画例子理解，代码简洁但信息量还是蛮大的；<br>2 多模式匹配中，失败指针就是指长模式串匹配失败，用短一点的模式串再往后匹配，但长和短模式串有相同后缀。失败指针==短模式串结尾指针","like_count":0},{"had_liked":false,"id":172314,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1579149495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579149495","product_id":100017301,"comment_content":"while (tmp != root) { &#47;&#47; 打印出可以匹配的模式串 <br>if (tmp.isEndingChar == true) { 如果主串很短，只匹配模式串的一部分，如主串ab,模式串abc,是不是不打印System.out.println(&quot;匹配起始下标&quot; + pos + &quot;; 长度&quot; + tmp.length);","like_count":0},{"had_liked":false,"id":170097,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1578530538,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1578530538","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":168525,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1578104666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578104666","product_id":100017301,"comment_content":"BF：暴力求解，适用于简短的匹配。RK：采用散列计算，适用于字符集不大模式串不长的匹配。BM：采用坏字符和好后缀规则。KMP：使用是失效函数，next数组。Trie：通过构建树结构进行多模式串匹配，常用于自动补齐。AC自动机：在Trie的基础上加入了失败指针提高查找效率，常用于敏感字匹配。","like_count":0},{"had_liked":false,"id":166803,"user_name":"小牛","can_delete":false,"product_type":"c1","uid":1751707,"ip_address":"","ucode":"FCA935208783AB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ba/9b/a419f867.jpg","comment_is_top":false,"comment_ctime":1577603023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577603023","product_id":100017301,"comment_content":"敏感词过滤，见Leetcode 1065 ","like_count":0},{"had_liked":false,"id":162451,"user_name":"千锤百炼的大器","can_delete":false,"product_type":"c1","uid":1528160,"ip_address":"","ucode":"4DE6083592C80D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vopk2JZ3QqRytUbiaiacj1yIytM4VTvE9xxaLnv5ozYug77KcC2gDzgEcd0Gu9L871ibfErFGC725Ria14xXqUdYibg/132","comment_is_top":false,"comment_ctime":1576540996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576540996","product_id":100017301,"comment_content":"思考：如果改成中文匹配，需要将中文转成数字，可以利用hash表嵌套的方式","like_count":0},{"had_liked":false,"id":161389,"user_name":"9527","can_delete":false,"product_type":"c1","uid":1464136,"ip_address":"","ucode":"2ABADBB53445D1","user_header":"https://static001.geekbang.org/account/avatar/00/16/57/48/1c824b5c.jpg","comment_is_top":false,"comment_ctime":1576200878,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576200878","product_id":100017301,"comment_content":"最后代码的 int pos = i-tmp.length+1; 不明白，每个acNode的length什么时候维护的，难道都是定值-1吗？","like_count":0,"discussions":[{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276163,"discussion_content":"插入字符的时候你得赋值，文章里面给的代码没有处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590830897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153701,"user_name":"7","can_delete":false,"product_type":"c1","uid":1688111,"ip_address":"","ucode":"A75B5A4EBD1EA4","user_header":"https://static001.geekbang.org/account/avatar/00/19/c2/2f/4f42e5ce.jpg","comment_is_top":false,"comment_ctime":1574298395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574298395","product_id":100017301,"comment_content":"我有一个小小的建议，在match函数的第一个while中，我个人感觉应该先判断p!=root，再判断pchild［idx］==Null，这样和KMP的过程是一样的了，先看是不是到头，不是的话再看和坏字符一不一样，当然老师这么写没有错.","like_count":0},{"had_liked":false,"id":138286,"user_name":"coldpark","can_delete":false,"product_type":"c1","uid":1058331,"ip_address":"","ucode":"D1B0F343B384F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/26/1b/4caf36bd.jpg","comment_is_top":false,"comment_ctime":1570155083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570155083","product_id":100017301,"comment_content":"首先 root 的失败指针为 NULL<br>这句话文稿和录音不符合啊，类似问题提过多次了，都没上过精选留言","like_count":0},{"had_liked":false,"id":136116,"user_name":"junjun","can_delete":false,"product_type":"c1","uid":1547322,"ip_address":"","ucode":"1F7EE146B9BE04","user_header":"https://static001.geekbang.org/account/avatar/00/17/9c/3a/bfd73920.jpg","comment_is_top":false,"comment_ctime":1569370374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569370374","product_id":100017301,"comment_content":"ac自动机的算法其实也很简单，首先根据模式串构建出trie树，然后根据trie树构建出fail指针，当遍历的时候，先走完一个树的分支，查找出所有的以当前的字符为结尾的匹配的模式串，当走完一个分支后，开始另外一个分支，或者不用走完当前分支，只有下面的字符不匹配就可以去另外的分支。","like_count":0},{"had_liked":false,"id":133608,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1568620177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568620177","product_id":100017301,"comment_content":"刚好前面的kmp略过了，这里又用上，下一遍再来吧","like_count":0},{"had_liked":false,"id":131379,"user_name":"野猪佩奇","can_delete":false,"product_type":"c1","uid":1130942,"ip_address":"","ucode":"B1803FFE251E1A","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/be/4893497a.jpg","comment_is_top":false,"comment_ctime":1567734212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567734212","product_id":100017301,"comment_content":"AC自动机在某个字符的匹配的过程就好像俄罗斯方块一样，都是在前人的基础上去寻找自己的匹配模式串。底下随着主串参与匹配的字符越来越多，而越来越水涨船高（匹配到的模式串越来越长），突然来一根棍子，往缝隙中一插（代表主串某个字符在前人的基础上不匹配模式串后面的子节点了），就砍掉模式串底下一截，也就是使用模式串的一部分后缀再去尝试匹配，再没找到就再砍（这个砍的过程就是根据fail指针重新找模式串的过程）。然后随着后头又来字符，又慢慢水涨船高。如果棍子太给力，一下子消掉了所有的砖块，就要从头开始了，头就是root","like_count":0},{"had_liked":false,"id":130532,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1567479886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567479886","product_id":100017301,"comment_content":"既然学会了就要实现一下<br>AC 自动机的实现可以通过 leetcode 1032. Stream of Characters 练习<br>https:&#47;&#47;leetcode.com&#47;problems&#47;stream-of-characters&#47;<br><br>我的实现：<br>https:&#47;&#47;leetcode.com&#47;problems&#47;stream-of-characters&#47;discuss&#47;372367&#47;Java-Aho-Corasick-Implement","like_count":0},{"had_liked":false,"id":126041,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1566300245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566300245","product_id":100017301,"comment_content":"匹配的部分不应该是b[i]吧，主串是a，所以应该是a[i]，我错了吗？","like_count":0},{"had_liked":false,"id":126039,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1566300160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566300160","product_id":100017301,"comment_content":"匹配的部分，主串是a，从i开始，为什么p和b【i】","like_count":0},{"had_liked":false,"id":125887,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1566268548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566268548","product_id":100017301,"comment_content":"学习了两天终于看懂了 AC 自动机，怎么感觉与 KMP 的 next[] 关联学习，我反而理解不了 : (<br>当然了，最难理解的是 fail 指针的预处理，看到 i j p q 的变量，注定就是一场硬丈。<br><br>有个疑问是，对于字典树的删除及新增是否需要重新构建整颗字典树的 fail 指针呢？","like_count":0},{"had_liked":false,"id":125063,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1566053353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566053353","product_id":100017301,"comment_content":"老师，我觉得看懂了，trie和ac自动机反而比前面好理解，这种树状结构的反而更好理解！谢谢老师。回头再多看看加深理解。","like_count":0},{"had_liked":false,"id":97077,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1558581366,"is_pvip":false,"replies":[{"id":"34794","content":"👍可以加，不加逻辑也没错","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1558661034,"ip_address":"","comment_id":97077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558581366","product_id":100017301,"comment_content":"if (p == null) p = root; &#47;&#47; 这里能否在p = root之后就直接continue？？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451127,"discussion_content":"👍可以加，不加逻辑也没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558661034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94484,"user_name":"yelin","can_delete":false,"product_type":"c1","uid":1416262,"ip_address":"","ucode":"4341B2F4C513FE","user_header":"https://static001.geekbang.org/account/avatar/00/15/9c/46/a2c1a99f.jpg","comment_is_top":false,"comment_ctime":1557822495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557822495","product_id":100017301,"comment_content":"第一遍没看懂，硬着头皮看。。看了两个小时好一点了。大体是和kmp一样。<br>我的理解ac自动机可以分为三部分，trie树构造，失败指针计算以及匹配三个模块。<br>1）trie 树构造不多说，看上一篇。<br>2）失败指针计算，kmp中next[i]是去找前next[i-1]的值来辅助计算，ac自动机是利用父节点的失败指针来辅助计算：<br>假设这个节点为 pc = “c”，找到其父节点p的失败节点 q1 ，寻找 q1 是否存在 q1c == “c”，<br>若存在则令 pc.fail = q1c,否则 则寻找q1的失败指针 q2.重复前面的动作，直到存在qXc == “c” 或者 qX == root 终止；<br><br>3）匹配（https:&#47;&#47;blog.csdn.net&#47;LaoJiu_&#47;article&#47;details&#47;50858649 ）：<br><br>0.匹配过程分两种情况：<br>1.匹配不成功，则一直回溯选择其不是 root 的失败指针 p = p.fail。<br>\t1.1若均未找到，则trie 树回到 root ，主串向后移动一位继续匹配；<br>\t1.2若找到，则跳转到匹配成功的步骤2；<br>2.匹配成功，<br>\t2.1匹配成功的模式串指向其匹配成功的子节点，<br>\t2.2然后要进行判断后续包括其本身在内的失败指针（若存在失败指针的话，则必然会存在这个匹配节点）是否为模式串的尾节点，<br>\t这里主要是避免进行下一个字符串的匹配，会“漏掉”当前已经匹配完成的模式串的情况。<br>\t2.3若匹配完成则，打印；否则继续下一个直到失败指针指向root；<br>\t2.4主串下移一位与匹配成功的子节点的模式串，继续尝试匹配，即回到第0步；<br><br>(1) 当前字符匹配成功，表示从当前节点沿着树边有一条路径可以到达目标字符，此时只需沿该路径走向下一个节点继续匹配即可，目标字符串指针移向下个字符继续匹配；<br>(2) 当前字符不匹配，则去当前节点失败指针所指向的字符继续匹配，匹配过程随着指针指向root结束。重复这2个过程中的任意一个，直到模式串走到结尾为止。<br><br><br><br>C++ trie 树实现代码以及 ac 自动机可以跑一跑帮助一下理解：<br>https:&#47;&#47;blog.csdn.net&#47;hgqqtql&#47;article&#47;details&#47;44313087","like_count":0},{"had_liked":false,"id":72723,"user_name":"自信来自成功的体验","can_delete":false,"product_type":"c1","uid":1358428,"ip_address":"","ucode":"BD12277AF8BC45","user_header":"https://static001.geekbang.org/account/avatar/00/14/ba/5c/b666bce0.jpg","comment_is_top":false,"comment_ctime":1551704890,"is_pvip":false,"replies":[{"id":"26804","content":"ac自动机的跳转是通过fail指针来实现的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551925423,"ip_address":"","comment_id":72723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551704890","product_id":100017301,"comment_content":"老师您好！  如果ac算法里面有好多需要跳转的  是每个都会跳转吗？  比如  she  her  hee  hea  会怎么实现 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441709,"discussion_content":"ac自动机的跳转是通过fail指针来实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551925423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71640,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1551405368,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1551405368","product_id":100017301,"comment_content":"收藏，后续结合KMP，边手绘边理解。","like_count":0},{"had_liked":false,"id":67080,"user_name":"且听疯吟","can_delete":false,"product_type":"c1","uid":1159459,"ip_address":"","ucode":"B010B16E5465F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/23/5df1f341.jpg","comment_is_top":false,"comment_ctime":1550068512,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1550068512","product_id":100017301,"comment_content":"在匹配过程这句一直不太理解。<br>1.每匹配一个字符难道不是判断该字符是否是结束符吗？如果是结束符则直接输出匹配到的字符串即可吧。<br> <br> acNode * tmp = p;<br>        while(tmp!=NULL){<br>            if(tmp-&gt;_isEnd){<br>                cout&lt;&lt;&quot;start:&quot;&lt;&lt;i-tmp-&gt;_length+1&lt;&lt;&quot;:&quot;&lt;&lt;target.substr(i-tmp-&gt;_length+1,tmp-&gt;_length)&lt;&lt;endl;<br>            }<br>            tmp = tmp-&gt;_fail;<br>        }","like_count":0,"discussions":[{"author":{"id":1438352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4akcIyIOXB2OqibTe7FF90hwsBicxkjdicUNTMorGeIictdr3OoMxhc20yznmZWwAvQVThKPFWgOyMw/132","nickname":"Chuan","note":"","ucode":"FACEC5DAC36A7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69374,"discussion_content":"这个地方我敲了一遍，也遇到这个问题，其实我觉得应该是去掉while循环，直接进行if判断即可，而且我测过一遍确实没有问题，也不用创建tmp变量：\nif (node != root &amp;&amp; node.isEnding) {\n    System.out.println(&#34;Start from: &#34; + (i-node.length+1) + &#34;,  Length is: &#34; + node.length);\n       res = true;\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575283938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66920,"user_name":"阿宽","can_delete":false,"product_type":"c1","uid":1135847,"ip_address":"","ucode":"D835BF01D1A68B","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/e7/4422a5cf.jpg","comment_is_top":false,"comment_ctime":1550042267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550042267","product_id":100017301,"comment_content":"真的有意思，开工看了一天，终于看懂代码是怎么运行的了。<br><br>能发明这个算法的人真牛逼，嫉妒如此强悍的大脑。","like_count":0},{"had_liked":false,"id":64957,"user_name":"silent","can_delete":false,"product_type":"c1","uid":1162450,"ip_address":"","ucode":"575366953E6F30","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/d2/2e73a3cb.jpg","comment_is_top":false,"comment_ctime":1548985295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548985295","product_id":100017301,"comment_content":"老师  如果是针对模式串是正则表达式的情况  算法复杂度是否会增加很多呢","like_count":0},{"had_liked":false,"id":62454,"user_name":"San","can_delete":false,"product_type":"c1","uid":1333186,"ip_address":"","ucode":"FC14488D3EA074","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/c2/feb6b75b.jpg","comment_is_top":false,"comment_ctime":1548061861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548061861","product_id":100017301,"comment_content":"老师您好。match函数那里，<br>第10行是不是应该 if (p != NULL) ？<br>以及<br>第15行之后，是不是要加  break ？<br><br>如果是的话，请老师夸奖我一下，我居然看懂了！~","like_count":0},{"had_liked":false,"id":62281,"user_name":"一修💤","can_delete":false,"product_type":"c1","uid":1014211,"ip_address":"","ucode":"CE3CB2E9A67DB5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/c3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1548000532,"is_pvip":false,"replies":[{"id":"24173","content":"正则表达式是基于回溯搜索。效率这个东西要在大规模数据的情况下才能比较出来。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550479707,"ip_address":"","comment_id":62281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548000532","product_id":100017301,"comment_content":"在工作中遇到过这个问题 当时我是把敏感词表甚至一些正则的pattern组合在一起用或相连，编译成一个大的pattern对象，然后对字符串进行验证。效率似乎也不低哎 不知道和这个AC自动机的差距在哪里 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437158,"discussion_content":"正则表达式是基于回溯搜索。效率这个东西要在大规模数据的情况下才能比较出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550479707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60913,"user_name":"__qms","can_delete":false,"product_type":"c1","uid":1271438,"ip_address":"","ucode":"E220BFD272A54B","user_header":"https://static001.geekbang.org/account/avatar/00/13/66/8e/99c0c5a3.jpg","comment_is_top":false,"comment_ctime":1547577619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547577619","product_id":100017301,"comment_content":"匹配过程有些two pointers的意思","like_count":0},{"had_liked":false,"id":60522,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1547484420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547484420","product_id":100017301,"comment_content":"public void match(char[] text) { &#47;&#47; text 是主串<br>    int n = text.length; &#47;&#47; 主串的长度<br>    AcNode p = root; &#47;&#47; 自动机从 root 节点开始<br>    <br>    for (int i=0; i&lt;n; ++i) {<br>        <br>        int idx = text[i] - &#39;a&#39;;&#47;&#47;计算字符数组下标<br>        while (p.children[idx] == null &amp;&amp; p != root){&#47;&#47; 如果 p.children[idx] == null 则说明主串中的这个字符不等于 p.children[idx]<br>            p = p.fail; &#47;&#47; 失败指针发挥作用的地方，指向失败指针对应的节点<br>        }&#47;&#47;循环，直到找到主串的这个节点，或者直到root节点为止<br>        <br>        p = p.children[idx];&#47;&#47;取子节点，下次循环<br>        if(p==null) p=root; &#47;&#47; 如果没有匹配的，从 root 开始重新匹配<br>        <br>        AcNode tmp = p;<br>        while(tmp != root) { &#47;&#47; 打印出可以匹配的模式串<br>            if(tmp.isEndingChar == true) {&#47;&#47;是结尾字符<br>                int pos = i-tmp.length+1;<br>                System.out.println(&quot; 匹配起始下标 &quot; + pos + &quot;; 长度&quot; + tmp.length);<br>            }<br>            tmp = tmp.fail;&#47;&#47;<br>        }<br>        <br>    }<br>    <br>}","like_count":0},{"had_liked":false,"id":53654,"user_name":"The Sword of Damocles","can_delete":false,"product_type":"c1","uid":1188527,"ip_address":"","ucode":"42B462FC572F24","user_header":"https://static001.geekbang.org/account/avatar/00/12/22/af/1a31bc11.jpg","comment_is_top":false,"comment_ctime":1545705597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545705597","product_id":100017301,"comment_content":"看懂这一篇的前提，是看懂了前面的KMP 和 BM。这俩啃得很费劲，不过懂了之后，再来看这个就很easy了（同样的思路）","like_count":0},{"had_liked":false,"id":53367,"user_name":"小情绪","can_delete":false,"product_type":"c1","uid":1020311,"ip_address":"","ucode":"92D8081DB8DB45","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","comment_is_top":false,"comment_ctime":1545633542,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1545633542","product_id":100017301,"comment_content":"王老师，buildFailurePointer方法中while循环里面if中应该是qc ！= null &amp;&amp; qc.data == pc.data。您说呢？","like_count":0,"discussions":[{"author":{"id":1009651,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f3/04ae9565.jpg","nickname":"diorhuang","note":"","ucode":"5F4E196FCCACB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257626,"discussion_content":"不用加，因为这一句里已经用pc的值去判断了->AcNode qc = q.children[pc.data - &#39;a&#39;];下面一句就是判断qc是否为null，如果不是null，那么说明和pc.data相同，否则就是不同。没必要再判断qc.data==pc.data","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588596060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52027,"user_name":"樱桃子77","can_delete":false,"product_type":"c1","uid":1260146,"ip_address":"","ucode":"676894101A6652","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJicwphCoQ0S1DaibWNarUJq3DrGOeADY02AreVbKCLkm0PWJmZR0f1rMrrXDRzOwLCmIQbqeibQ4uHQ/132","comment_is_top":false,"comment_ctime":1545297311,"is_pvip":false,"replies":[{"id":"18988","content":"可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545357352,"ip_address":"","comment_id":52027,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1545297311","product_id":100017301,"comment_content":"想请教一点：即便没有AC自动机，单纯Trie，也可以多模式匹配吧？就像你文章开始说的那样，无论匹配成不成功，下一个主串里的词从新开始，而指向Trie的指针也重新指向root. 这样可以吗？<br><br>多谢。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433708,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545357352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51912,"user_name":"Ricky","can_delete":false,"product_type":"c1","uid":1238256,"ip_address":"","ucode":"0B29C730CAD29C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/f0/82281239.jpg","comment_is_top":false,"comment_ctime":1545275545,"is_pvip":false,"replies":[{"id":"18990","content":"上几层 我表述的不好 我改下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545358014,"ip_address":"","comment_id":51912,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1545275545","product_id":100017301,"comment_content":"老师，如果模式串为abcd和d，那abcd对应的d节点的fail指针应该指向第一层的d，并非文章中所说的对应的上一层","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433668,"discussion_content":"上几层 我表述的不好 我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545358014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":570147,"discussion_content":"你特么倒是改呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651676305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":433668,"ip_address":""},"score":570147,"extra":""}]}]},{"had_liked":false,"id":51492,"user_name":"slvher","can_delete":false,"product_type":"c1","uid":1018964,"ip_address":"","ucode":"F4ED6980C8248B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/54/deb19880.jpg","comment_is_top":false,"comment_ctime":1545189477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545189477","product_id":100017301,"comment_content":"「如果我们把树中相同深度的节点放到同一层，那么某个节点的失败指针只有可能出现在它所在层的上一层。」<br><br>===========================<br>感觉这里有些歧义，失败指针指向的节点不一定只能在上“一”层吧？<br><br>更严谨的说法应该是：某节点的失败指针只可能出现在深度小于当前节点深度的那些层","like_count":0},{"had_liked":false,"id":50790,"user_name":"一道阳光","can_delete":false,"product_type":"c1","uid":1239557,"ip_address":"","ucode":"F35207CCCEC6E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/05/c0d8014d.jpg","comment_is_top":false,"comment_ctime":1545046470,"is_pvip":false,"replies":[{"id":"18327","content":"q为啥一直是null呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545097501,"ip_address":"","comment_id":50790,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545046470","product_id":100017301,"comment_content":"构建指针失败函数中，AcNode q = p.fail;按照逻辑q一直是null，怎么指向另一个模式串？请老师解答下。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433103,"discussion_content":"q为啥一直是null呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545097501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50173,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1544884803,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1544884803","product_id":100017301,"comment_content":"“zixuan”同学的总结太到位了，为了方便复习直接保存到留言里。以下是转述。<br><br>思考题:<br>一、单模式串匹配：<br>1. BF： 简单场景，主串和模式串都不太长, O(m*n)<br>2. KP：\b字符集范围不要太大且模式串不要太长， 否则hash值可能冲突，O(n)<br>3. naive-BM：模式串最好不要太长（因为预处理较重），比如IDE编辑器里的查找场景； 预处理O(m*m), 匹配O(n)， 实现较复杂，需要较多额外空间。PS：如果用动态规划思想优化预处理算法，模式串长度的瓶颈会得到很大缓解。<br>4. KMP：适合所有场景，整体实现起来也比BM简单，O(n+m)，仅需一个next数组的O(n)额外空间；但统计意义下似乎BM更快，原因不明.<br>5. 另外查资料的时候还看到一种比BM&#47;KMP更快，且实现+理解起来都更容易的的Sunday算法，有兴趣的可以看这里:<br>http:&#47;&#47;www.inf.fh-flensburg.de&#47;lang&#47;algorithmen&#47;pattern&#47;sundayen.htm<br>https:&#47;&#47;www.jianshu.com&#47;p&#47;2e6eb7386cd3<br><br>二、多模式串匹配：<br>1. naive-Trie: 适合多模式串公共前缀较多的匹配(O(n*k)) 或者 根据公共前缀进行查找(O(k))的场景，比如搜索框的自动补全提示.<br>2. AC自动机: 适合大量文本中多模式串的精确匹配查找, 可以到O(n).","like_count":0},{"had_liked":false,"id":50170,"user_name":"微秒","can_delete":false,"product_type":"c1","uid":1249195,"ip_address":"","ucode":"65A2E8B565B191","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","comment_is_top":false,"comment_ctime":1544884621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544884621","product_id":100017301,"comment_content":"字符串这部分感觉好繁杂，认真看应该都能看懂，就是很容易忘，需要不断的复习巩固知识点才行。","like_count":0},{"had_liked":false,"id":49944,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1544795562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544795562","product_id":100017301,"comment_content":"老师讲指针运动那一段得结合上一章Trie的构建一起看，看懂了老师口述运作那一部分基本上就都明白了。","like_count":0},{"had_liked":false,"id":49906,"user_name":"喵吉豆豆","can_delete":false,"product_type":"c1","uid":1144651,"ip_address":"","ucode":"1F3322FF5EDF58","user_header":"https://static001.geekbang.org/account/avatar/00/11/77/4b/ede8aa13.jpg","comment_is_top":false,"comment_ctime":1544786977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544786977","product_id":100017301,"comment_content":"每次都是在地铁上看完（通勤时间太长_(:3」∠)_），看的时候理解的好好的，可惜回去没有花时间再去实现，特别容易忘。像今天就忘了kmp，只好又回去看，真怕课程上完了又全忘了…以后真得抽时间自己实现才能记得牢","like_count":0},{"had_liked":false,"id":49798,"user_name":"一块跑跑","can_delete":false,"product_type":"c1","uid":1177796,"ip_address":"","ucode":"576EC5A37721FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/c4/c7f665df.jpg","comment_is_top":false,"comment_ctime":1544771415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544771415","product_id":100017301,"comment_content":"字符串匹配感觉已经跟不上了，但是现在还真的有个需求，是做反垃圾机制的，如果他们将字符串替换，或者用同义转义字等等，老师有什么建议呢","like_count":0},{"had_liked":false,"id":49751,"user_name":"刘远通","can_delete":false,"product_type":"c1","uid":1253307,"ip_address":"","ucode":"4D3EE819E4B235","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bb/c488d5db.jpg","comment_is_top":false,"comment_ctime":1544762730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544762730","product_id":100017301,"comment_content":"老师写的是26叉树 对于存储要求很高<br>然而红黑树什么的代码会更加复杂吧","like_count":0},{"had_liked":false,"id":49747,"user_name":"刘远通","can_delete":false,"product_type":"c1","uid":1253307,"ip_address":"","ucode":"4D3EE819E4B235","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bb/c488d5db.jpg","comment_is_top":false,"comment_ctime":1544762090,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544762090","product_id":100017301,"comment_content":"输出的那一段 <br>是为了避免有短的关键词没有被发现<br>不断地fail去找最近的短<br><br>所以可能的情况就是输出<br>BCD  CD D  当然是位置加长度的形式","like_count":0},{"had_liked":false,"id":49673,"user_name":"Dream.","can_delete":false,"product_type":"c1","uid":1187286,"ip_address":"","ucode":"49B94CE5BA0D21","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/d6/76fe5259.jpg","comment_is_top":false,"comment_ctime":1544751502,"is_pvip":false,"replies":[{"id":"17892","content":"可以选择跳过这一节","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544753699,"ip_address":"","comment_id":49673,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544751502","product_id":100017301,"comment_content":"哎，不得不承认。已经跟不上步伐了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432714,"discussion_content":"可以选择跳过这一节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544753699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49579,"user_name":"Laughing_Lz","can_delete":false,"product_type":"c1","uid":1251342,"ip_address":"","ucode":"7A7445E96F2978","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/0e/39307052.jpg","comment_is_top":false,"comment_ctime":1544720174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544720174","product_id":100017301,"comment_content":"老师这是夜里更新的呀，就快跟上了~坚持！","like_count":0}]}