{"id":532162,"title":"47｜RESTful Web Services（11）：如何通过Spike来验证架构愿景？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前，我们的任务列表是这样的：</p><ul>\n<li>\n<p>RuntimeDelegate</p>\n<ul>\n<li>为MediaType提供HeaderDelegate</li>\n<li>为CacheControl提供HeaderDelegate</li>\n<li>为Cookie提供HeaderDelegates</li>\n<li>为EntityTag提供HeaderDelegate</li>\n<li>为Link提供HeaderDelegate</li>\n<li>为NewCookie提供HeaderDelegate</li>\n<li>为Date提供HeaderDelegate</li>\n<li>提供OutboundResponseBuilder</li>\n</ul>\n</li>\n<li>\n<p>OutboundResponseBuilder</p>\n<ul>\n<li>可按照不同的Status生成Resposne</li>\n</ul>\n</li>\n<li>\n<p>OutboundResponse</p>\n</li>\n<li>\n<p>ResourceDispatcher</p>\n<ul>\n<li>将Resource Method的返回值包装为Response对象</li>\n</ul>\n</li>\n<li>\n<p>Providers</p>\n<ul>\n<li>可获取MessageBodyWriter</li>\n<li>可获取ExceptionMapper</li>\n</ul>\n</li>\n<li>\n<p>Runtimes</p>\n<ul>\n<li>可获取ResourceDispatcher</li>\n<li>可获取Providers</li>\n</ul>\n</li>\n<li>\n<p>MessageBodyWriter</p>\n</li>\n<li>\n<p>ExceptionMapper</p>\n<ul>\n<li>需要提供默认的ExceptionMapper</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><h2>通过Spike验证架构愿景</h2><p>上节课我们讨论到，当使用伦敦学派时，能不能直接进入经典模式继续开发，对于如何继续拆分任务起到了关键作用。在目前的任务列表中，ResourceDispatcher显然难以直接进入经典模式（也不是不可以，如果你对重构足够自信的话，已经算是恰当的粒度了），那么我们可以围绕ResourceDispatcher继续构建架构愿景，澄清调用栈，然后采用伦敦学派继续开发。</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/cb/a2e9416a553cea8a5ab079a716eb30cb.jpg?wh=2072x1215\" alt=\"\"></p><p>如上图所示，是一个非常简单的架构构想：</p><ul>\n<li>将所有的RootResource的Path转化为正则表达式的Pattern；</li>\n<li>ResourceRouter拿到HttpServletRequest之后，尝试与Pattern匹配；</li>\n<li>匹配到的RootResource通过Context实例化；</li>\n<li>调用实例化后的RootResource，处理请求，过程中把中间信息存入UriInfo；</li>\n<li>ResourceRouter拿到结果后，转化为Response对象返回。</li>\n</ul><p>接下来我们需要通过Spike验证架构愿景：</p><p><video poster=\"https://media001.geekbang.org/81c30d99919c4ab8b683efe6cca6803c/snapshots/4f563ae013e148b2a3f02ee2a52ee323-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/912f38a-18199e67a46-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/3af7b9295875471c951311ee835f2efc/79cadab064dc4bf3983c4f0d5c73eef5-8bbd525672eb637a38cbffbc9d6456a6-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>在进入下节课之前，希望你能认真思考如下两个问题。</p><ol>\n<li>要如何调整架构愿景？</li>\n<li>进入项目三的学习后，你有什么有意思的收获吗？</li>\n</ol><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p>","comments":[{"had_liked":false,"id":364501,"user_name":"临风","can_delete":false,"product_type":"c1","uid":1145430,"ip_address":"广东","ucode":"59A7F3DDD94D76","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/56/29877cb9.jpg","comment_is_top":false,"comment_ctime":1671035320,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"我觉得RootResource下的每个method对应的path可以以每个&#39;&#47;&#39;为分隔，一个segment为一个node，按图的方式进行保存，match的时候就可以按图的方式进行遍历，查找出满足条件的RootResource和方法。","like_count":1},{"had_liked":false,"id":392916,"user_name":"范特西","can_delete":false,"product_type":"c1","uid":1359210,"ip_address":"广东","ucode":"6F57092D832D7F","user_header":"https://static001.geekbang.org/account/avatar/00/14/bd/6a/abe84a16.jpg","comment_is_top":false,"comment_ctime":1722155251,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"进入项目三的学习后，你有什么有意思的收获吗？\n\n总的来说就是当我们面对一个需求时，刚开始我们可以按照一个小需求的方式去开发，代码可以快速成型并且满足需求需要。但是问题又来了，可能刚开始我们只是考虑得少，以后这个需求可能会变得非常复杂，我们怎么可以在最开始就识别到这些点，并且充分考虑如何设计我们的抽象层而不是依赖于后面一次次“大规模”重构呢？\n\n很期待后面老师的讲解！","like_count":0},{"had_liked":false,"id":350806,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1015222,"ip_address":"","ucode":"27EB4A725CE14E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/b6/abdebdeb.jpg","comment_is_top":false,"comment_ctime":1657213141,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"老师能讲一下对于Context这种设计么？比如Spring的ApplicationContext, 我们什么情况下会想到可以抽象出一个Context对象？以及为什么是Context去做实例化而不是其他的去做实例化呢？这里面有些什么考量么？","like_count":0}]}