{"id":472154,"title":"01 | Kotlin基础语法：正式开启学习之旅","content":"<p>你好，我是朱涛。从今天开始，我们就正式踏上Kotlin语言学习与实践的旅途了。这节课，我想先带你来学习下Kotlin的基础语法，包括变量、基础类型、函数和流程控制。这些基础语法是程序最基本的元素。</p><p>不过，如果你有使用Java的经验，可能会觉得今天的内容有点多余，毕竟Kotlin和Java的基础语法是比较相似的，它们都是基于JVM的语言。但其实不然，Kotlin作为一门新的语言，它包含了许多新的特性，由此也决定着Kotlin的代码风格。<strong>如果你不够了解Kotlin的这些新特性，你会发现自己只是换了种方式在写Java而已。</strong></p><p>并且，在具备Java语言的知识基础上，这节课的内容也可以帮你快速将已有的经验迁移过来。这样的话，针对相似的语法，你可以直接建立Kotlin与Java的对应关系，进而加深理解。当然，即使你没有其他编程经验也没关系，从头学即可，Kotlin的语法足够简洁，也非常适合作为第一门计算机语言来学习。</p><p>在课程中，我会用最通俗易懂的语言，来给你解释Kotlin的基础知识，并且会结合一些Java和Kotlin的代码案例，来帮助你直观地体会两种语言的异同点。而针对新的语法，我也会详细解释它存在的意义，以及都填补了Java的哪些短板，让你可以对Kotlin新语法的使用场景做到心中基本有数。</p><!-- [[[read_end]]] --><h2>开发环境</h2><p>在正式开始学习基础语法之前，我们还需要配置一下Kotlin语言的环境，因为直接从代码开始学能给我们带来最直观的体验。</p><p>那么要运行Kotlin代码，最快的方式，就是<strong>使用Kotlin官方的</strong><a href=\"https://play.kotlinlang.org/\">PlayGround</a>。通过这个在线工具，我们可以非常方便地运行Kotlin代码片段。当然，这种方式用来临时测试一小段代码是没有问题的，但对于复杂的工程就有些力不从心了。</p><p>另一种方式，也是<strong>我个人比较推荐的方式，那就是安装</strong><a href=\"https://www.jetbrains.com/idea/download/\">IntelliJ IDEA</a>。它是Kotlin官方提供的集成开发工具，也是世界上最好的IDE之一，如果你用过Android Studio，你一定会对它很熟悉，因为Android Studio就是由IntelliJ IDEA改造的。</p><p>如果你的电脑没有Java环境，在安装完最新版的IntelliJ IDEA以后，通过“File -&gt; Project Structure -&gt; SDKs”，然后点击“加号按钮”就可以选择第三方提供的OpenJDK 1.8版本进行下载了。</p><p><img src=\"https://static001.geekbang.org/resource/image/04/a7/04cf1b899574ceff2ecd099e41af1fa7.gif?wh=1000x770\" alt=\"图片\"></p><p>当然，这里我更推荐你可以自己手动从<a href=\"https://www.oracle.com/java/technologies/downloads/\">Oracle官网</a>下载JDK 1.6、1.7、1.8、11这几个版本，然后再安装、配置Java多版本环境。这在实际工作中也是必备的。</p><p>需要注意的是，IntelliJ IDEA分为Ultimate付费版和Community免费版，对于我们的Kotlin学习来说，免费版完全够用。</p><p>这样，在配置好了开发环境之后，我们就可以试着一边敲代码，一边体会、思考和学习Kotlin语言中这些最基础的语法知识了。那么下面我们就来看下，在Kotlin语言中是如何定义变量的吧。</p><h2>变量</h2><p>在Java/C当中，如果我们要声明变量，我们必须要声明它的类型，后面跟着变量的名称和对应的值，然后以分号结尾。就像这样：</p><pre><code class=\"language-java\">Integer price = 100;\n</code></pre><p>而Kotlin则不一样，我们要使用“<strong>val</strong>”或者是“<strong>var</strong>”这样的关键字作为开头，后面跟“变量名称”，接着是“变量类型”和“赋值语句”，最后是分号结尾。就像这样：</p><pre><code class=\"language-plain\">/*\n关键字     变量类型\n ↓          ↓           */\nvar price: Int = 100;   /*\n     ↑            ↑\n   变量名        变量值   */\n</code></pre><p>不过，像Java那样每写一行代码就写一个分号，其实也挺麻烦的。所以为了省事，在Kotlin里面，我们一般会把代码末尾的分号省略，就像这样：</p><pre><code class=\"language-plain\">var price: Int = 100\n</code></pre><p>另外，由于Kotlin支持<strong>类型推导</strong>，大部分情况下，我们的变量类型可以省略不写，就像这样：</p><pre><code class=\"language-plain\">var price = 100 // 默认推导类型为： Int\n</code></pre><p>还有一点我们要注意，就是在Kotlin当中，我们应该尽可能避免使用var，<strong>尽可能多地去使用val</strong>。</p><pre><code class=\"language-plain\">var price = 100\nprice = 101\n\nval i = 0\ni = 1 // 编译器报错\n</code></pre><p>原因其实很简单：</p><ul>\n<li>val声明的变量，我们叫做<strong>不可变变量</strong>，它的值在初始化以后就无法再次被修改，它相当于Java里面的final变量。</li>\n<li>var声明的变量，我们叫做<strong>可变变量</strong>，它对应Java里的普通变量。</li>\n</ul><h2>基础类型</h2><p>了解了变量类型如何声明之后，我们再来看下Kotlin中的基础类型。</p><p>基础类型，包括我们常见的数字类型、布尔类型、字符类型，以及前面这些类型组成的数组。这些类型是我们经常会遇到的概念，因此我们把它统一归为“基础类型”。</p><h3>一切都是对象</h3><p>在Java里面，基础类型分为原始类型（Primitive Types）和包装类型（Wrapper Type）。比如，整型会有对应的int和Integer，前者是原始类型，后者是包装类型。</p><pre><code class=\"language-java\">int i = 0; // 原始类型\nInteger j = 1; // 包装类型\n</code></pre><p>Java之所以要这样做，是因为原始类型的开销小、性能高，但它不是对象，无法很好地融入到面向对象的系统中。而包装类型的开销大、性能相对较差，但它是对象，可以很好地发挥面向对象的特性。在 <a href=\"https://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/lang/Integer.java\">JDK源码</a>当中，我们可以看到Integer作为包装类型，它是有成员变量以及成员方法的，这就是它作为对象的优势。</p><p>然而，在Kotlin语言体系当中，是没有原始类型这个概念的。这也就意味着，<strong>在Kotlin里，一切都是对象。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/yy/3b/yyd95b04616943878351867c4d1e063b.jpg?wh=2000x1077\" alt=\"\"></p><p>实际上，从某种程度上讲，Java的类型系统并不是完全面向对象的，因为它存在原始类型，而原始类型并不属于对象。而Kotlin则不一样，它从语言设计的层面上就规避了这个问题，类型系统则是完全面向对象的。</p><p>我们看一段代码，来更直观地感受Kotlin的独特之处：</p><pre><code class=\"language-plain\">val i: Double = 1.toDouble()\n</code></pre><p>可以发现，由于在Kotlin中，整型数字“1”被看作是对象了，所以我们可以调用它的成员方法toDouble()，而这样的代码在Java中是无法实现的。</p><h3>空安全</h3><p>既然Kotlin中的一切都是对象，那么对象就有可能为空。也许你会想到写这样的代码：</p><pre><code class=\"language-plain\">val i: Double = null // 编译器报错\n</code></pre><p>可事实上，以上的代码并不能通过Kotlin编译。这是因为Kotlin强制要求开发者<strong>在定义变量的时候，指定这个变量是否可能为null</strong>。对于可能为null的变量，我们需要在声明的时候，在变量类型后面加一个问号“?”：</p><pre><code class=\"language-plain\">val i: Double = null // 编译器报错\nval j: Double? = null // 编译通过\n</code></pre><p>并且由于Kotlin对可能为空的变量类型做了强制区分，这就意味着，“可能为空的变量”无法直接赋值给“不可为空的变量”，当然，反向赋值是没有问题的。</p><pre><code class=\"language-plain\">var i: Double = 1.0\nvar j: Double? = null\n\ni = j  // 编译器报错\nj = i  // 编译通过\n</code></pre><p>Kotlin这么设计的原因也很简单，如果我们将“可能为空的变量”直接赋值给了“不可为空的变量”，这会跟它自身的定义产生冲突。而如果我们实在有这样的需求，也不难实现，只要做个判断即可：</p><pre><code class=\"language-plain\">var i: Double = 1.0\nval j: Double? = null\n\nif (j != null) {\n    i = j  // 编译通过\n}\n</code></pre><p>好，在了解了Kotlin和Java这两种语言的主要区别后，下面就让我们来全面认识下Kotlin的基础类型。</p><h3>数字类型</h3><p>首先，在数字类型上，Kotlin和Java几乎是一致的，包括它们对数字“字面量”的定义方式。</p><pre><code class=\"language-plain\">val int = 1\nval long = 1234567L\nval double = 13.14\nval float = 13.14F\nval hexadecimal = 0xAF\nval binary = 0b01010101\n</code></pre><p>这里我也来给你具体介绍下：</p><ul>\n<li>整数默认会被推导为“Int”类型；</li>\n<li>Long类型，我们则需要使用“L”后缀；</li>\n<li>小数默认会被推导为“Double”，我们不需要使用“D”后缀；</li>\n<li>Float类型，我们需要使用“F”后缀；</li>\n<li>使用“0x”，来代表十六进制字面量；</li>\n<li>使用“0b”，来代表二进制字面量。</li>\n</ul><p>但是，对于数字类型的转换，Kotlin与Java的转换行为是不一样的。<strong>Java可以隐式转换数字类型，而Kotlin更推崇显式转换。</strong></p><p>举个简单的例子，在Java和C当中，我们经常直接把int类型赋值给long类型，编译器会自动为我们做类型转换，如下所示：</p><pre><code class=\"language-java\">int i = 100;\nlong j = i;\n</code></pre><p>这段代码按照Java的编程思维方式来看，的确好像是OK的。但是你要注意，虽然Java编译器不会报错，可它仍然可能会带来问题，因为它们本质上不是一个类型，int、long、float、double这些类型之间的互相转换是存在精度问题的。尤其是当这样的代码掺杂在复杂的逻辑中时，在碰到一些边界条件的情况下，即使出现了Bug也不容易排查出来。</p><p>所以，同样的代码，在Kotlin当中是行不通的：</p><pre><code class=\"language-plain\">val i = 100\nval j: Long = i // 编译器报错\n</code></pre><p>在Kotlin里，这样的隐式转换被抛弃了。正确的做法应该是显式调用Int类型的toLong()函数：</p><pre><code class=\"language-plain\">val i = 100\nval j: Long = i.toLong() // 编译通过\n</code></pre><p>其实，如果我们仔细翻看Kotlin的源代码，会发现更多类似的函数，比如toByte()、toShort()、toInt()、toLong()、toFloat()、toDouble()、toChar()等等。Kotlin这样设计的优势也是显而易见的，<strong>我们代码的可读性更强了，将来也更容易维护了</strong>。</p><h3>布尔类型</h3><p>然后我们再来了解下Kotlin中布尔类型的变量，它只有两种值，分别是<strong>true<strong><strong>和</strong></strong>false</strong>。布尔类型支持一些逻辑操作，比如说：</p><ul>\n<li>“&amp;”代表“与运算”；</li>\n<li>“|”代表“或运算”；</li>\n<li>“!”代表“非运算”；</li>\n<li>“&amp;&amp;”和“||”分别代表它们对应的“短路逻辑运算”。</li>\n</ul><pre><code class=\"language-plain\">val i = 1\nval j = 2\nval k = 3\n\nval isTrue: Boolean = i &lt; j &amp;&amp; j &lt; k\n</code></pre><h3>字符：Char</h3><p>Char用于代表单个的字符，比如<code>'A'</code>、<code>'B'</code>、<code>'C'</code>，字符应该用单引号括起来。</p><pre><code class=\"language-plain\">val c: Char = 'A'\n</code></pre><p>如果你有Java或C的使用经验，也许会写出这样的代码：</p><pre><code class=\"language-plain\">val c: Char = 'A'\nval i: Int = c // 编译器报错\n</code></pre><p>这个问题其实跟前面Java的数字类型隐式转换的问题类似，所以针对这种情况，我们应该调用对应的函数来做类型转换。这一点我们一定要牢记在心。</p><pre><code class=\"language-plain\">val c: Char = 'A'\nval i: Int = c.toInt() // 编译通过\n</code></pre><h3>字符串：String</h3><p>字符串（String），顾名思义，就是一连串的字符。和Java一样，Kotlin中的字符串也是不可变的。在大部分情况下，我们会使用双引号来表示字符串的字面量，这一点跟Java也是一样的。</p><pre><code class=\"language-plain\">val s = \"Hello Kotlin!\"\n</code></pre><p>不过与此同时，Kotlin还为我们提供了非常简洁的<strong>字符串模板</strong>：</p><pre><code class=\"language-plain\">val name = \"Kotlin\"\nprint(\"Hello $name!\")\n/*            ↑\n    直接在字符串中访问变量\n*/\n// 输出结果：\nHello Kotlin!\n</code></pre><p>这样的特性，在Java当中是没有的，这是Kotlin提供的新特性。虽然说这个字符串模板功能，我们用Java也同样可以实现，但它远没有Kotlin这么简洁。在Java当中，我们必须使用两个“+”进行拼接，比如说<code>(\"Hello\" + name + \"!\")</code>。这样一来，在字符串格式更复杂的情况下，代码就会很臃肿。</p><p>当然，如果我们需要在字符串当中引用更加复杂的变量，则需要使用花括号将变量括起来：</p><pre><code class=\"language-plain\">val array = arrayOf(\"Java\", \"Kotlin\")\nprint(\"Hello ${array.get(1)}!\")\n/*            ↑\n      复杂的变量，使用${}\n*/\n// 输出结果：\nHello Kotlin!\n</code></pre><p>另外，Kotlin还新增了一个<strong>原始字符串</strong>，是用三个引号来表示的。它可以用于存放复杂的多行文本，并且它定义的时候是什么格式，最终打印也会是对应的格式。所以当我们需要复杂文本的时候，就不需要像Java那样写一堆的加号和换行符了。</p><pre><code class=\"language-plain\">val s = \"\"\"\n       当我们的字符串有复杂的格式时\n       原始字符串非常的方便\n       因为它可以做到所见即所得。 \"\"\"\n\nprint(s)\n</code></pre><h3>数组</h3><p>最后，我们再来看看Kotlin中数组的一些改变。</p><p>在Kotlin当中，我们一般会使用<strong>arrayOf()</strong>来创建数组，括号当中可以用于传递数组元素进行初始化，同时，Kotlin编译器也会根据传入的参数进行类型推导。</p><pre><code class=\"language-plain\">val arrayInt = arrayOf(1, 2, 3)\nval arrayString = arrayOf(\"apple\", \"pear\")\n</code></pre><p>比如说，针对这里的arrayInt，由于我们赋值的时候传入了整数，所以它的类型会被推导为整型数组；对于arrayString，它的类型会被推导为字符串数组。</p><p>而你应该也知道，在Java当中，数组和其他集合的操作是不一样的。举个例子，如果要获取数组的长度，Java中应该使用“array.length”；但如果是获取List的大小，那么Java中则应该使用“list.size”。这主要是因为数组不属于Java集合。</p><p>不过，Kotlin在这个问题的处理上并不一样。<strong>虽然Kotlin的数组仍然不属于集合，但它的一些操作是跟集合统一的。</strong></p><pre><code class=\"language-plain\">val array = arrayOf(\"apple\", \"pear\")\nprintln(\"Size is ${array.size}\")\nprintln(\"First element is ${array[0]}\")\n\n// 输出结果：\nSize is 2\nFirst element is apple\n</code></pre><p>就比如说，以上代码中，我们直接使用array.size就能拿到数组的长度。</p><h2>函数声明</h2><p>好，了解了Kotlin中变量和基础类型的相关概念之后，我们再来看看它的函数是如何定义的。</p><p>在Kotlin当中，函数的声明与Java不太一样，让我们看一段简单的Kotlin代码：</p><pre><code class=\"language-plain\">/*\n关键字    函数名          参数类型   返回值类型\n ↓        ↓                ↓       ↓      */\nfun helloFunction(name: String): String {\n    return \"Hello $name !\"\n}/*   ↑\n   花括号内为：函数体\n*/\n</code></pre><p>可以看到，在这段代码中：</p><ul>\n<li>使用了<strong>fun关键字</strong>来定义函数；</li>\n<li><strong>函数名称</strong>，使用的是<a href=\"https://zh.wikipedia.org/zh/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB\">驼峰命名法</a>（大部分情况下）；</li>\n<li><strong>函数参数</strong>，是以(name: String)这样的形式传递的，这代表了参数类型为String类型；</li>\n<li><strong>返回值类型</strong>，紧跟在参数的后面；</li>\n<li>最后是<strong>花括号内的函数体</strong>，它代表了整个函数的逻辑。</li>\n</ul><p>另外你可以再注意一个地方，前面代码中的helloFunction函数，它的函数体实际上只有一行代码。那么针对这种情况，我们其实就可以省略函数体的花括号，直接使用“=”来连接，将其变成一种类似变量赋值的函数形式：</p><pre><code class=\"language-plain\">fun helloFunction(name: String): String = \"Hello $name !\"\n</code></pre><p>这种写法，我们称之为<strong>单一表达式函数</strong>。需要注意的是，在这种情况下，表达式当中的“return”是需要去掉的。</p><p>另外，由于Kotlin支持类型推导，我们在使用单一表达式形式的时候，返回值的类型也可以省略：</p><pre><code class=\"language-plain\">fun helloFunction(name: String) = \"Hello $name !\"\n</code></pre><p>看到这里，你一定能体会到Kotlin的魅力。它的语法非常得简洁，并且是符合人类的阅读直觉的，我们读这样的代码，就跟读自然语言一样轻松。</p><p>然而，Kotlin的优势不仅仅体现在函数声明上，在函数调用的地方，它也有很多独到之处。</p><h3>函数调用</h3><p>以我们前面定义的函数为例子，如果我们想要调用它，代码的风格和Java基本一致：</p><pre><code class=\"language-plain\">helloFunction(\"Kotlin\")\n</code></pre><p>不过，Kotlin提供了一些新的特性，那就是<strong>命名参数</strong>。简单理解，就是它允许我们在调用函数的时候传入“形参的名字”。</p><pre><code class=\"language-plain\">helloFunction(name = \"Kotlin\")\n</code></pre><p>让我们看一个更具体的使用场景：</p><pre><code class=\"language-plain\">fun createUser(\n    name: String,\n    age: Int,\n    gender: Int,\n    friendCount: Int,\n    feedCount: Int,\n    likeCount: Long,\n    commentCount: Int\n) {\n    //..\n}\n</code></pre><p>这是一个包含了很多参数的函数，在Kotlin当中，针对参数较多的函数，我们一般会<strong>以纵向的方式排列</strong>，这样的代码更符合我们从上到下的阅读习惯，省去从左往右翻的麻烦。</p><p>但是，如果我们像Java那样调用createUser，代码就会非常难以阅读：</p><pre><code class=\"language-plain\">createUser(\"Tom\", 30, 1, 78, 2093, 10937, 3285)\n</code></pre><p>这里代码中的第一个参数，我们知道肯定是name，但是到了后面那一堆的数字，就会让人迷惑了。这样的代码不仅难懂，同时还不好维护。</p><p>但如果我们这样写呢？</p><pre><code class=\"language-plain\">createUser(\n    name = \"Tom\",\n    age = 30,\n    gender = 1,\n    friendCount = 78,\n    feedCount = 2093,\n    likeCount = 10937,\n    commentCount = 3285\n)\n</code></pre><p>可以看到，在这段代码中，我们把函数的形参加了进来，形参和实参用“=”连接，建立了两者的对应关系。对比前面Java风格的写法，这样的代码可读性更强了。如果将来你想修改likeCount这个参数，也可以轻松做到。这其实就体现出了Kotlin命名参数的<strong>可读性</strong>与<strong>易维护性</strong>两个优势。</p><p>而除了命名参数这个特性，Kotlin还支持<strong>参数默认值</strong>，这个特性在参数较多的情况下同样有很大的优势：</p><pre><code class=\"language-plain\">fun createUser(\n    name: String,\n    age: Int,\n    gender: Int = 1,\n    friendCount: Int = 0,\n    feedCount: Int = 0,\n    likeCount: Long = 0L,\n    commentCount: Int = 0\n) {\n    //..\n}\n</code></pre><p>我们可以看到，gender、friendCount、feedCount、likeCount、commentCount这几个参数都被赋予了默认值。这样做的好处就在于，我们在调用的时候可以省很多事情。比如说，下面这段代码就只需要传3个参数，剩余的4个参数没有传，但是Kotlin编译器会自动帮我们填上默认值。</p><pre><code class=\"language-plain\">createUser(\n    name = \"Tom\",\n    age = 30,\n    commentCount = 3285\n)\n</code></pre><p>对于无默认值的参数，编译器会强制要求我们在调用处传参；对于有默认值的参数，则可传可不传。Kotlin这样的特性，在一些场景下就可以极大地提升我们的开发效率。</p><p>而如果是在Java当中要实现类似的事情，我们就必须手动定义“3个参数的createUser函数”，或者是使用Builder设计模式。</p><h2>流程控制</h2><p>在Kotlin当中，流程控制主要有if、when、for、 while，这些语句可以控制代码的执行流程。它们也是体现代码逻辑的关键。下面我们就来一一学习下。</p><h3>if</h3><p>if语句，在程序当中主要是用于逻辑判断。Kotlin当中的if与Java当中的基本一致：</p><pre><code class=\"language-plain\">val i = 1\nif (i &gt; 0) {\n    print(\"Big\")\n} else {\n    print(\"Small\")\n}\n\n输出结果：\nBig\n</code></pre><p>可以看到，由于i大于0，所以程序会输出“Big”，这很好理解。不过Kotlin的if，并不是程序语句（Statement）那么简单，它还可以作为<strong>表达式</strong>（Expression）来使用。</p><pre><code class=\"language-plain\">val i = 1\nval message = if (i &gt; 0) \"Big\" else \"Small\"\n\nprint(message)\n\n输出结果：\nBig\n</code></pre><p>以上的代码其实跟之前的代码差不多，它们做的是同一件事。不同的是，我们把if当作表达式在用，将if判断的结果，赋值给了一个变量。同时，Kotlin编译会根据if表达式的结果自动推导出变量“message”的类型为“String”。这种方式就使得Kotlin的代码更加简洁。</p><p>而类似的逻辑，如果要用Java来实现的话，我们就必须先在if外面定义一个变量message，然后分别在两个分支内对message赋值：</p><pre><code class=\"language-java\">int i = 1\nString message = \"\"\nif (i &gt; 0) {\n    message = \"Big\"\n} else {\n    message = \"Small\"\n}\n\nprint(message)\n</code></pre><p>这样两相对比下，我们会发现Java的实现方式明显丑陋一些：<strong>不仅代码行数更多，逻辑也松散了</strong>。</p><p>另外，由于Kotlin当中明确规定了类型分为“可空类型”“不可空类型”，因此，我们会经常遇到可空的变量，并且要判断它们是否为空。我们直接来看个例子：</p><pre><code class=\"language-plain\">fun getLength(text: String?): Int {\n  return if (text != null) text.length else 0\n}\n</code></pre><p>在这个例子当中，我们把if当作表达式，如果text不为空，我们就算出它的长度；如果它为空，长度就取0。</p><p>但是，如果你实际使用Kotlin写过代码，你会发现：在Kotlin中，类似这样的判断逻辑出现得非常频繁，如果每次都要写一个完整的if else分支，其实也很麻烦。</p><p>为此，Kotlin针对这种情况就提供了一种简写，叫做<strong>Elvis表达式</strong>。</p><pre><code class=\"language-plain\">fun getLength(text: String?): Int {\n  return text?.length ?: 0\n}\n</code></pre><p>可以看到，通过Elvis表达式，我们就再也不必写“<code>if (xxx != null) xxx else xxx</code>”这样的赋值代码了。它在提高代码可读性的同时，还能提高我们的编码效率。</p><h3>when</h3><p>when语句，在程序当中主要也是用于逻辑判断的。当我们的代码逻辑只有两个分支的时候，我们一般会使用if/else，而在大于两个逻辑分支的情况下，我们使用when。</p><pre><code class=\"language-plain\">val i: Int = 1\n\nwhen(i) {\n    1 -&gt; print(\"一\")\n    2 -&gt; print(\"二\")\n    else -&gt; print(\"i 不是一也不是二\")\n}\n\n输出结果：\n一\n</code></pre><p>when语句有点像Java里的switch case语句，不过Kotlin的when更加强大，它同时也可以<strong>作为表达式，为变量赋值</strong>，如下所示：</p><pre><code class=\"language-plain\">val i: Int = 1\n\nval message = when(i) {\n    1 -&gt; \"一\"\n    2 -&gt; \"二\"\n    else -&gt; \"i 不是一也不是二\" // 如果去掉这行，会报错\n}\n\nprint(message)\n</code></pre><p>另外，与switch不一样的是，when表达式要求它里面的逻辑分支必须是完整的。举个例子，以上的代码，如果去掉else分支，编译器将报错，原因是：i的值不仅仅只有1和2，这两个分支并没有覆盖所有的情况，所以会报错。</p><h3>循环迭代：while与for</h3><p>首先while循环，我们一般是用于重复执行某些代码，它在使用上和Java也没有什么区别：</p><pre><code class=\"language-plain\">var i = 0\nwhile (i &lt;= 2) {\n    println(i)\n    i++\n}\n\nvar j = 0\ndo {\n    println(j)\n    j++\n} while (j &lt;= 2)\n\n输出结果：\n0\n1\n2\n0\n1\n2\n</code></pre><p>但是对于for语句，Kotlin和Java的用法就明显不一样了。</p><p>在Java当中，for也会经常被用于循环，经常被用来替代while。不过，<strong>Kotlin的for语句更多的是用于“迭代”。</strong>比如，以下代码就代表了迭代array这个数组里的所有元素，程序会依次打印出：“1、2、3”。</p><pre><code class=\"language-plain\">val array = arrayOf(1, 2, 3)\nfor (i in array) {\n    println(i)\n}\n</code></pre><p>而除了迭代数组和集合以外，Kotlin还支持迭代一个“区间”。</p><p>首先，要定义一个区间，我们可以使用“<code>..</code>”来连接数值区间的两端，比如“<code>1..3</code>”就代表从1到3的闭区间，左闭右闭：</p><pre><code class=\"language-plain\">val oneToThree = 1..3 // 代表 [1, 3]\n</code></pre><p>接着，我们就可以使用for语句，来对这个闭区间范围进行迭代：</p><pre><code class=\"language-plain\">for (i in oneToThree) {\n    println(i)\n}\n\n输出结果：\n1\n2\n3\n</code></pre><p>甚至，我们还可以<strong>逆序迭代</strong>一个区间，比如：</p><pre><code class=\"language-plain\">for (i in 6 downTo 0 step 2) {\n    println(i)\n}\n\n输出结果：\n6\n4\n2\n0\n</code></pre><p>以上代码的含义就是逆序迭代一个区间，从6到0，每次迭代的步长是2，这意味着6迭代过后，到4、2，最后到0。<strong>需要特别注意的是</strong>，逆序区间我们不能使用“<code>6..0</code>”来定义，如果用这样的方式来定义的话，代码将无法正常运行。</p><p>好了，那么到目前为止，Kotlin的变量、基础类型、函数、流程控制，我们就都已经介绍完了。掌握好这些知识点，我们就已经可以写出简单的程序了。当然，我们的Kotlin学习之路才刚刚开始，在下节课，我会带你来学习Kotlin面向对象相关的知识点。</p><h2>小结</h2><p>学完了这节课，现在我们知道虽然Kotlin和Java的语法很像，但在一些细节之处，Kotlin总会有一些新的东西。如果你仔细琢磨这些不同点，你会发现它正是大部分程序员所需要的。举个例子，作为开发者，我们都讨厌写冗余的代码，喜欢简洁易懂的代码。那么在今天学完了基础语法之后，我们可以来看看Kotlin在这方面都做了哪些改进：</p><ul>\n<li>支持类型推导；</li>\n<li>代码末尾不需要分号；</li>\n<li>字符串模板；</li>\n<li>原始字符串，支持复杂文本格式；</li>\n<li>单一表达式函数，简洁且符合直觉；</li>\n<li>函数参数支持默认值，替代Builder模式的同时，可读性还很强；</li>\n<li>if和when可以作为表达式。</li>\n</ul><p>同时，JetBrains也非常清楚开发者在什么情况下容易出错，所以，它在语言层面也做了很多改进：</p><ul>\n<li>强制区分“可为空变量类型”和“不可为空变量类型”，规避空指针异常；</li>\n<li>推崇不可变性（val），对于没有修改需求的变量，IDE会智能提示开发者将“var”改为“val”；</li>\n<li>基础类型不支持隐式类型转换，这能避免很多隐藏的问题；</li>\n<li>数组访问行为与集合统一，不会出现array.length、list.size这种恼人的情况；</li>\n<li>函数调用支持命名参数，提高可读性，在后续维护代码的时候不易出错；</li>\n<li>when表达式，强制要求逻辑分支完整，让你写出来的逻辑永远不会有漏洞。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/32/67/32ab3d37cd7f9650f4cba17736305c67.jpg?wh=1920x1983\" alt=\"图片\"></p><p>这些都是Kotlin的<strong>闪光点</strong>，也是它最珍贵的地方。</p><p>这一切，都得益于Kotlin的发明者JetBrains。作为最负盛名的IDE创造者，JetBrains能深刻捕捉到开发者的需求。它知道开发者喜欢什么、讨厌什么，它甚至知道开发者容易犯什么样的错误，从而在语言设计的层面规避错误。站在这个角度看，JetBrains能够创造出炙手可热的Kotlin语言，就一点都不奇怪了。</p><p>以上这么多的“闪光点”还仅仅只是局限于我们这节课的内容，如果放眼全局，这样的例子更是数不胜数。<strong>Kotlin对比Java的提升，如果独立去看其中的某一个点，都不足以让一个开发者心动。不过，一旦这样的改善积少成多，Kotlin的优势就会显得尤为明显。</strong>这也是很多程序员表示“Kotlin用过了就回不去”的原因。</p><h2>思考题</h2><p>虽然Kotlin在语法层面摒弃了“原始类型”，但有时候为了性能考虑，我们确实需要用“原始类型”。这时候我们应该怎么办？</p><p>欢迎在评论区分享你的思路，这个问题我会在第三节课给出答案，我们下节课再见。</p>","neighbors":{"left":{"article_title":"开篇词 | 入门Kotlin有多容易，精通Kotlin就有多难","id":472129},"right":{"article_title":"02 | 面向对象：理解Kotlin设计者的良苦用心","id":473349}},"comments":[{"had_liked":false,"id":328464,"user_name":"PoPlus","can_delete":false,"product_type":"c1","uid":1574765,"ip_address":"","ucode":"5F0927921317F2","user_header":"https://static001.geekbang.org/account/avatar/00/18/07/6d/4c1909be.jpg","comment_is_top":false,"comment_ctime":1640745125,"is_pvip":false,"replies":[{"id":"119747","content":"记下了。<br><br>大家还有哪些比较关心的问题，都可以提出来，我找时间给你们加餐。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640829558,"ip_address":"","comment_id":328464,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44590418085","product_id":100103401,"comment_content":"可以补充下 Unit、Any、Nothing 这三个数据类型的区别吗？","like_count":11,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542713,"discussion_content":"记下了。\n\n大家还有哪些比较关心的问题，都可以提出来，我找时间给你们加餐。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640829559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1640700,"avatar":"https://static001.geekbang.org/account/avatar/00/19/08/fc/9a5fb5c5.jpg","nickname":"小王同学","note":"","ucode":"87C39D384F8991","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":543013,"discussion_content":"赞老师👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640932058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":542713,"ip_address":""},"score":543013,"extra":""}]}]},{"had_liked":false,"id":330044,"user_name":"郑峰","can_delete":false,"product_type":"c1","uid":1112517,"ip_address":"","ucode":"4D4C0C020E507C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/c5/95b97dfa.jpg","comment_is_top":false,"comment_ctime":1641764670,"is_pvip":false,"replies":[{"id":"120251","content":"赞~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641791452,"ip_address":"","comment_id":330044,"utype":1}],"discussion_count":3,"race_medal":0,"score":"36001503038","product_id":100103401,"comment_content":"虽然 Kotlin 在语法层面摒弃了“原始类型”，但有时候为了性能考虑，我们确实需要用“原始类型”？<br><br>使用非空“原始类型”，编译器会自动编译成Java的原始类型。","like_count":9,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544965,"discussion_content":"赞~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641791453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2463777,"avatar":"https://static001.geekbang.org/account/avatar/00/25/98/21/88b5112e.jpg","nickname":"Ray","note":"","ucode":"1FAAD0C5A73233","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550390,"discussion_content":"感谢大佬指路，贴一下Kotlin代码反编译为Java代码的实验结果。\n  //Kotin\n  fun increaseInt(x:Int) = x.plus(1)\n  fun increaseInt(x:Int?) = x?.plus(1)\n  fun increaseFloat(x:Float) = x.plus(1)\n  fun increaseFloat(x:Float?) = x?.plus(1)\n  fun toggleBoolean(x:Boolean) = x.not()\n  fun toggleBoolean(x:Boolean?) = x?.not()\n\n//Java\n   public final int increaseInt(int x) {\n      return x + 1;\n   }\n\n   @Nullable\n   public final Integer increaseInt(@Nullable Integer x) {\n      return x != null ? x + 1 : null;\n   }\n\n   public final float increaseFloat(float x) {\n      return x + (float)1;\n   }\n\n   @Nullable\n   public final Float increaseFloat(@Nullable Float x) {\n      return x != null ? x + (float)1 : null;\n   }\n\n   public final boolean toggleBoolean(boolean x) {\n      return !x;\n   }\n\n   @Nullable\n   public final Boolean toggleBoolean(@Nullable Boolean x) {\n      return x != null ? !x : null;\n   }\n\n结论：\n在Kotlin中使用Java的基本类型可以使用非空类型声明。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644504516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1441783,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ff/f7/fbab42ce.jpg","nickname":"co","note":"","ucode":"99E1237D7F1907","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581229,"discussion_content":"编译器会干这个工作是吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658644626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329972,"user_name":"陳乔陳先森","can_delete":false,"product_type":"c1","uid":1133461,"ip_address":"","ucode":"C2A2579FF5FD90","user_header":"https://static001.geekbang.org/account/avatar/00/11/4b/95/2356bb41.jpg","comment_is_top":false,"comment_ctime":1641706524,"is_pvip":false,"replies":[{"id":"120249","content":"确实如此哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641791425,"ip_address":"","comment_id":329972,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14526608412","product_id":100103401,"comment_content":"关于 Elvis 表达式 ?: , Elvis Presley 埃尔维斯·普雷斯利 又名 : 猫王， 把 ?: 顺时针旋转 90 度，像不像猫王标志性的头发？ 哈哈 QAQ～","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544963,"discussion_content":"确实如此哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641791425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2315213,"avatar":"https://static001.geekbang.org/account/avatar/00/23/53/cd/8182c827.jpg","nickname":"风在树梢","note":"","ucode":"26F724DF62566F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591054,"discussion_content":"像徐志胜~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666250954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1342000,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7a/30/23fc4089.jpg","nickname":"24隋心所欲","note":"","ucode":"1B8B2789F68C94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2315213,"avatar":"https://static001.geekbang.org/account/avatar/00/23/53/cd/8182c827.jpg","nickname":"风在树梢","note":"","ucode":"26F724DF62566F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591713,"discussion_content":"的确是 win 号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666774709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":591054,"ip_address":"河北"},"score":591713,"extra":""}]}]},{"had_liked":false,"id":329324,"user_name":"衣知世 与 计知白","can_delete":false,"product_type":"c1","uid":1547557,"ip_address":"","ucode":"D8926B316DA378","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/25/cc8a81c8.jpg","comment_is_top":false,"comment_ctime":1641284707,"is_pvip":false,"replies":[{"id":"119944","content":"嗯，这是Kotlin的另一个优势。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641303945,"ip_address":"","comment_id":329324,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14526186595","product_id":100103401,"comment_content":"kotlin 中提供了一个叫做内联类的 inline关键字，Kotlin 编译器为每个内联类保留一个包装器。内联类的实例可以在运行时表示为包装器或者基础类型。","like_count":4,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543793,"discussion_content":"嗯，这是Kotlin的另一个优势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641303945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329412,"user_name":"魏全运","can_delete":false,"product_type":"c1","uid":1090798,"ip_address":"","ucode":"3FED702C724E2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","comment_is_top":false,"comment_ctime":1641343978,"is_pvip":false,"replies":[{"id":"119972","content":"记下了，有机会在后面的内容中介绍一下。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641352140,"ip_address":"","comment_id":329412,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10231278570","product_id":100103401,"comment_content":"循环那里可以补充下类似java 的break和continue关键字么？kotlin想要实现break还挺麻烦的","like_count":3,"discussions":[{"author":{"id":1357882,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epW39iazElic8B436AHhEePqOibvHr2lSXJ0LMwiavicmCPtXwXxBuxyy6l7pEiblo198fTpFiayCoyoj8Jw/132","nickname":"tedzyc","note":"","ucode":"3419900FBBE2A5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545455,"discussion_content":"能不能不要卖关子，这些零零碎碎的小问题如果知道答案就在评论区给出不好吗？要加餐就讲专门的topic，有必要在这里收集一波吗？都是要上班的人，抽时间在来看评论已经不容易了，现在倒好，这条看了相当于白看。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1641967241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1120940,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1a/ac/cec17283.jpg","nickname":"zhangdroid","note":"","ucode":"6254CEAEC274D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1357882,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epW39iazElic8B436AHhEePqOibvHr2lSXJ0LMwiavicmCPtXwXxBuxyy6l7pEiblo198fTpFiayCoyoj8Jw/132","nickname":"tedzyc","note":"","ucode":"3419900FBBE2A5","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":550588,"discussion_content":"确实，进来找答案结果白看了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644625909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545455,"ip_address":""},"score":550588,"extra":""}]},{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543924,"discussion_content":"记下了，有机会在后面的内容中介绍一下。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641352140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328386,"user_name":"$Kotlin","can_delete":false,"product_type":"c1","uid":2148188,"ip_address":"","ucode":"098E9C8F60D865","user_header":"https://static001.geekbang.org/account/avatar/00/20/c7/5c/94cb3a1a.jpg","comment_is_top":false,"comment_ctime":1640698158,"is_pvip":false,"replies":[{"id":"119734","content":"是的，学了Kotlin以后，我看Python、JS、Swift都会觉得亲切。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640828745,"ip_address":"","comment_id":328386,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10230632750","product_id":100103401,"comment_content":"语法和Swift很像，讲的也很通熟易懂，学起来很舒服，催更催更，迫不及待想继续学习了。","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542698,"discussion_content":"是的，学了Kotlin以后，我看Python、JS、Swift都会觉得亲切。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640828746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338092,"user_name":"我有一条鱼","can_delete":false,"product_type":"c1","uid":2143357,"ip_address":"","ucode":"9581A06A0EAF3B","user_header":"https://static001.geekbang.org/account/avatar/00/20/b4/7d/9455f31a.jpg","comment_is_top":false,"comment_ctime":1647274154,"is_pvip":true,"replies":[{"id":"123608","content":"因为Kotlin当中的“区间”只能是：右边大于等于左边。如果你写出下面的代码，它是无法正常工作的：<br><br>```<br>fun main() {<br>    for (i in 6..0) {<br>        println(i) &#47;&#47; 无法执行<br>    }<br>}<br>```","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1647306980,"ip_address":"","comment_id":338092,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5942241450","product_id":100103401,"comment_content":"求问for 循环为什么6..0是不可以的？","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556306,"discussion_content":"因为Kotlin当中的“区间”只能是：右边大于等于左边。如果你写出下面的代码，它是无法正常工作的：\n\n```\nfun main() {\n    for (i in 6..0) {\n        println(i) // 无法执行\n    }\n}\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647306980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329430,"user_name":"zerofield","can_delete":false,"product_type":"c1","uid":2167211,"ip_address":"","ucode":"27F76BC94A299C","user_header":"https://static001.geekbang.org/account/avatar/00/21/11/ab/c0541b3c.jpg","comment_is_top":false,"comment_ctime":1641349184,"is_pvip":false,"replies":[{"id":"119974","content":"赞~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641366981,"ip_address":"","comment_id":329430,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936316480","product_id":100103401,"comment_content":"编译器根据代码编译时，发现不需要使用包装类型就优化为原始类型","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543953,"discussion_content":"赞~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641366981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329411,"user_name":"Enoch","can_delete":false,"product_type":"c1","uid":2883775,"ip_address":"","ucode":"94C521B1BF7B3D","user_header":"https://static001.geekbang.org/account/avatar/00/2c/00/bf/cc5765d8.jpg","comment_is_top":false,"comment_ctime":1641343949,"is_pvip":false,"replies":[{"id":"119971","content":"加油~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641351989,"ip_address":"","comment_id":329411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936311245","product_id":100103401,"comment_content":"比起自己找资料学习  系统了很多","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543923,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641351989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328784,"user_name":"Hongyi Yan","can_delete":false,"product_type":"c1","uid":2878100,"ip_address":"","ucode":"133CDBCC3659E7","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ea/94/77a8acdf.jpg","comment_is_top":false,"comment_ctime":1640879961,"is_pvip":false,"replies":[{"id":"119795","content":"Kotlin的for循环确实不如Java来的直观。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640913316,"ip_address":"","comment_id":328784,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5935847257","product_id":100103401,"comment_content":"kotlin别的语法简单，唯有for循环，真心感觉不如Java","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542952,"discussion_content":"Kotlin的for循环确实不如Java来的直观。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640913316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328777,"user_name":"Geek_70c6da","can_delete":false,"product_type":"c1","uid":2881073,"ip_address":"","ucode":"F5A1AFCE4E71D0","user_header":"","comment_is_top":false,"comment_ctime":1640876971,"is_pvip":false,"replies":[{"id":"119793","content":"你指的是JSON解析的场景是吗？这种情况确实会有问题，不过我们是可以想办法解决的。解决方案我会在后面的Android实战课里讲到，请留意哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640912962,"ip_address":"","comment_id":328777,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5935844267","product_id":100103401,"comment_content":"定义了一个数据类，有一个变量类型是Int，后台返回的是null。不过编译后还是int，默认值0😂","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542950,"discussion_content":"你指的是JSON解析的场景是吗？这种情况确实会有问题，不过我们是可以想办法解决的。解决方案我会在后面的Android实战课里讲到，请留意哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640912962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356302,"user_name":"Geek_fba3f9","can_delete":false,"product_type":"c1","uid":2825983,"ip_address":"广东","ucode":"23C56BEB3E65ED","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/F4wluvVn7PE5nUyHptWZTIuCdKHicWybrmrrb8hd9IKw8ialyaKSMkMvHiboHn4VlPiaq3B7VgA7k6xNznTAuhj04A/132","comment_is_top":false,"comment_ctime":1662119176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662119176","product_id":100103401,"comment_content":"思考题：kotlin默认使用得Int就是原始数据类型，不过编译器会根据Int使用地方进行编译处理，如果使用了是Int？那么编译器就会把它变成Integer包装类型了","like_count":0},{"had_liked":false,"id":348661,"user_name":"天网_beta","can_delete":false,"product_type":"c1","uid":1191117,"ip_address":"","ucode":"57F334F9AA8EAF","user_header":"https://static001.geekbang.org/account/avatar/00/12/2c/cd/314156af.jpg","comment_is_top":false,"comment_ctime":1655285130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655285130","product_id":100103401,"comment_content":"课后思考<br>\t对比java的优势<br>\t\t更安全<br>\t\t\t一切都是对象是的kotlin是个完全面向对象的语言，而不是像java那样留有原始类型<br>\t\t\t有了空安全，kotlin就在写的时候避免了很多遗忘的判空操作，更少犯错<br>\t\t\t不支持隐式转换，这样一些java的难以发现小错误就不会犯了，不过不是每个类型都有转换类型的成员函数<br>\t\t\twhen的逻辑分支必须是完整的<br>\t\t更简洁<br>\t\t\t多了字符串模板，更简洁了<br>\t\t\t原始字符串这个和Python一样<br>\t\t\t单一函数跟Python的lambda差不多<br>\t\t\t命名参数，java不支持，但是python支持<br>\t\t\t参数默认值，java不支持，但是python支持<br>\t\t\tif表达式，Java不支持，但是Python虽然也不支持，但是支持if在一行之内写完，这样使用稍微不一样的语法是支持的<br>\t对比python的优势<br>\t\t更安全<br>\t\t\t有了空安全，kotlin就在写的时候避免了很多遗忘的判空操作，更少犯错<br>\t\t\t不支持隐式转换，这样一些java的难以发现小错误就不会犯了，不过不是每个类型都有转换类型的成员函数<br>\t\t更简洁<br>\t\t\tif表达式，Java不支持，但是Python虽然也不支持，但是支持if在一行之内写完，这样使用稍微不一样的语法是支持的","like_count":0},{"had_liked":false,"id":334664,"user_name":"Geek_e75e71","can_delete":false,"product_type":"c1","uid":2225143,"ip_address":"","ucode":"E775D82CE5E0B8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/xJj4NYWkg3EBHiauW0aTk2f0Pud3po40et3eDsAdmc4a2IrtymTCVjmrY54L4A9jxQR29HK09h5rdLH2922iaSibw/132","comment_is_top":false,"comment_ctime":1645064474,"is_pvip":false,"replies":[{"id":"122297","content":"你说得对，由于Kotlin会默认将小数识别为Double，所以D这个后缀其实是没有存在意义的。比如：<br><br>```<br>val a = 1.0      &#47;&#47; 整数加上小数点即可<br>val b = 13.14   &#47;&#47; 小数正常写即可<br>```<br><br>感谢指出了这个问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645150778,"ip_address":"","comment_id":334664,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645064474","product_id":100103401,"comment_content":"val number = 1.234D , Double 类型 后缀D编辑器报错呀？","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551832,"discussion_content":"你说得对，由于Kotlin会默认将小数识别为Double，所以D这个后缀其实是没有存在意义的。比如：\n\n```\nval a = 1.0      // 整数加上小数点即可\nval b = 13.14   // 小数正常写即可\n```\n\n感谢指出了这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645150778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332425,"user_name":"l-zesong","can_delete":false,"product_type":"c1","uid":2880199,"ip_address":"","ucode":"7BE93E5AAA3616","user_header":"https://static001.geekbang.org/account/avatar/00/2b/f2/c7/c5855ff3.jpg","comment_is_top":false,"comment_ctime":1643245505,"is_pvip":false,"replies":[{"id":"121444","content":"过年期间我也安排了“特别放送环节”，请留意哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1643253628,"ip_address":"","comment_id":332425,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643245505","product_id":100103401,"comment_content":"对于写了很久java的我来说这是一个启发，要改变原有的编程思维，换个角度去思考。涛哥，新春快乐，过年还更新吗？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548550,"discussion_content":"过年期间我也安排了“特别放送环节”，请留意哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643253628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330968,"user_name":"vox","can_delete":false,"product_type":"c1","uid":2466331,"ip_address":"","ucode":"0A433DF2BC1D5F","user_header":"https://static001.geekbang.org/account/avatar/00/25/a2/1b/0a4f9177.jpg","comment_is_top":false,"comment_ctime":1642329421,"is_pvip":false,"replies":[{"id":"120994","content":"一起加油~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642479272,"ip_address":"","comment_id":330968,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642329421","product_id":100103401,"comment_content":"不错， 不错，很干练","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546962,"discussion_content":"一起加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642479272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329704,"user_name":"大龙龙龙","can_delete":false,"product_type":"c1","uid":2435368,"ip_address":"","ucode":"26C1A7C8A22AFA","user_header":"https://static001.geekbang.org/account/avatar/00/25/29/28/b6b73f57.jpg","comment_is_top":false,"comment_ctime":1641482841,"is_pvip":false,"replies":[{"id":"120160","content":"感谢你的鼓励，我们一起加油~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641607511,"ip_address":"","comment_id":329704,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641482841","product_id":100103401,"comment_content":"单词发音标准，听着很舒服，优秀！ ","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544618,"discussion_content":"感谢你的鼓励，我们一起加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641607511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329663,"user_name":"晓刚学代码","can_delete":false,"product_type":"c1","uid":1024743,"ip_address":"","ucode":"1E77DB86DB82BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/e7/3d96ea93.jpg","comment_is_top":false,"comment_ctime":1641461187,"is_pvip":true,"replies":[{"id":"120162","content":"嗯，没错~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641607548,"ip_address":"","comment_id":329663,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641461187","product_id":100103401,"comment_content":"编译器会默默的帮我们转类型，或者我们直接调用 Java 方法，这也是 Kotlin 和 Java 互调的好处哈。😄","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544620,"discussion_content":"嗯，没错~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641607548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329506,"user_name":"故事与酒","can_delete":false,"product_type":"c1","uid":2788244,"ip_address":"","ucode":"1A0CCAA2C31D3C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8b/94/09dca97d.jpg","comment_is_top":false,"comment_ctime":1641377181,"is_pvip":false,"replies":[{"id":"120052","content":"还有其他字符的话，就放到${}外面即可。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641440245,"ip_address":"","comment_id":329506,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1641377181","product_id":100103401,"comment_content":"我还有个好奇的地方，那个${}如果我有需要就要打印这样的里面还有字符，那该怎么办呢","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544209,"discussion_content":"还有其他字符的话，就放到${}外面即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641440245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276376,"avatar":"https://static001.geekbang.org/account/avatar/00/13/79/d8/54a1fe83.jpg","nickname":"乐","note":"","ucode":"23335A9162FF3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544156,"discussion_content":"转义加反斜杠\\","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641431647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329504,"user_name":"故事与酒","can_delete":false,"product_type":"c1","uid":2788244,"ip_address":"","ucode":"1A0CCAA2C31D3C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8b/94/09dca97d.jpg","comment_is_top":false,"comment_ctime":1641376621,"is_pvip":false,"replies":[{"id":"120051","content":"靠的是换行符哈~不需要强制的缩进。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641440219,"ip_address":"","comment_id":329504,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1641376621","product_id":100103401,"comment_content":"我很好奇 kotlin是怎么知道语句的结束的在没有了分号的请况下  不会要强制缩进吧! ","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544208,"discussion_content":"靠的是换行符哈~不需要强制的缩进。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641440219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1879348,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ad/34/59578190.jpg","nickname":"Mr_Gao","note":"","ucode":"6BE7796BD78A07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574774,"discussion_content":"那如果我第一行太长了，我想换行接着写呢？这会被识别为新逻辑嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654329642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328830,"user_name":"Renext","can_delete":false,"product_type":"c1","uid":1020838,"ip_address":"","ucode":"3C4418F7E86CD6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","comment_is_top":false,"comment_ctime":1640915300,"is_pvip":false,"replies":[{"id":"119858","content":"加油哈","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641004920,"ip_address":"","comment_id":328830,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640915300","product_id":100103401,"comment_content":"通俗易懂，简洁","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543198,"discussion_content":"加油哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641004920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328828,"user_name":"Renext","can_delete":false,"product_type":"c1","uid":1020838,"ip_address":"","ucode":"3C4418F7E86CD6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","comment_is_top":false,"comment_ctime":1640915200,"is_pvip":false,"replies":[{"id":"119857","content":"这个问题记下了。<br><br>后面我找机会加餐。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641004908,"ip_address":"","comment_id":328828,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640915200","product_id":100103401,"comment_content":"对于list arraylist multilist使用以及与java结合时候感觉很混乱，可以解释一下吗","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543197,"discussion_content":"这个问题记下了。\n\n后面我找机会加餐。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641004908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328822,"user_name":"夜月","can_delete":false,"product_type":"c1","uid":1121740,"ip_address":"","ucode":"0C05F42E94F76C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Iofqk26ibmjFxAZKRibgUmwc9p5RDDArr9Jt0NTrwTKOhtPTuuia77OxOwyEUpeqp2fvU5HPpY8sK0vBejJNA3ib3w/132","comment_is_top":false,"comment_ctime":1640912893,"is_pvip":false,"replies":[{"id":"119856","content":"这个思路也不错，不过也可以再想想有没有更接近本质的方法。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641004823,"ip_address":"","comment_id":328822,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640912893","product_id":100103401,"comment_content":"关于思考题，我的想法是，使用java来写需要使用原始类型的部分","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543196,"discussion_content":"这个思路也不错，不过也可以再想想有没有更接近本质的方法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641004823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2381406,"avatar":"https://static001.geekbang.org/account/avatar/00/24/56/5e/7d2c40c0.jpg","nickname":"春待気流","note":"","ucode":"F8E83A5378BCF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543112,"discussion_content":"我在用一个三方tabbar时，必须传int数组，苦思冥想许久，还是写了个Java再调用。虽然成功了，但总感觉别扭，难受。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640951072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328657,"user_name":"年年有🐳ྀི","can_delete":false,"product_type":"c1","uid":1961311,"ip_address":"","ucode":"A4A0600A89D7A4","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ed/5f/908080bd.jpg","comment_is_top":false,"comment_ctime":1640828747,"is_pvip":false,"replies":[{"id":"119744","content":"是的，现代化的语言，都有很多相似之处。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640829344,"ip_address":"","comment_id":328657,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640828747","product_id":100103401,"comment_content":"和dart有很多相似之处，不过这个非空判断有一定差别","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542709,"discussion_content":"是的，现代化的语言，都有很多相似之处。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640829344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1961311,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/ed/5f/908080bd.jpg","nickname":"年年有🐳ྀི","note":"","ucode":"A4A0600A89D7A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542711,"discussion_content":"嗯是的，还有TypeScript ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640829381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":542709,"ip_address":""},"score":542711,"extra":""}]}]},{"had_liked":false,"id":328640,"user_name":"没有昵称","can_delete":false,"product_type":"c1","uid":1123802,"ip_address":"","ucode":"4D19353A27F35D","user_header":"https://static001.geekbang.org/account/avatar/00/11/25/da/f8eb4742.jpg","comment_is_top":false,"comment_ctime":1640825784,"is_pvip":false,"replies":[{"id":"119798","content":"因为我们要推崇不变性。意思就是变量初始化以后，就再也不变了，这有利于我们写出更加稳定的程序。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640913491,"ip_address":"","comment_id":328640,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640825784","product_id":100103401,"comment_content":"老师，既然val是初始化以后不能改变，为啥声明变量时推荐使用val","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542955,"discussion_content":"因为我们要推崇不变性。意思就是变量初始化以后，就再也不变了，这有利于我们写出更加稳定的程序。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640913491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592670,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4d/5e/5e66ca3f.jpg","nickname":"Xeon","note":"","ucode":"F2017D934B6AF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542761,"discussion_content":"个人理解val大多数情况下跟java里的final类似，我们在写代码时大多数情况下可能都是对对象中的某个属性做更改，并不会更改对象本身，这种就推荐用val. 如果你心知肚明变量本身会被更改，那就用var. 建议声明时用val，后面真的要改了，编译器会提示你改成var。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640836123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328593,"user_name":"Marten","can_delete":false,"product_type":"c1","uid":2879124,"ip_address":"","ucode":"726A68B7D6470E","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/94/5f3460cd.jpg","comment_is_top":false,"comment_ctime":1640782830,"is_pvip":false,"replies":[{"id":"119724","content":"加油，冲冲冲！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640827738,"ip_address":"","comment_id":328593,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640782830","product_id":100103401,"comment_content":"老师讲的通俗易懂，并且把关键点都总结的很到位！","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542684,"discussion_content":"加油，冲冲冲！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640827738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328289,"user_name":"Badb0y","can_delete":false,"product_type":"c1","uid":1022861,"ip_address":"","ucode":"7CF859100B53F8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/8d/784ca17e.jpg","comment_is_top":false,"comment_ctime":1640655121,"is_pvip":false,"replies":[{"id":"119576","content":"对！Kotlin 可以说是集百家之长。有 Python，Swift 等现代语言经验的话，会觉得Kotlin 很亲切。反过来，有Kotlin 经验以后，再去学习其他现代语言，也会很轻松。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640673718,"ip_address":"","comment_id":328289,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640655121","product_id":100103401,"comment_content":"感觉在学py","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542165,"discussion_content":"对！Kotlin 可以说是集百家之长。有 Python，Swift 等现代语言经验的话，会觉得Kotlin 很亲切。反过来，有Kotlin 经验以后，再去学习其他现代语言，也会很轻松。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640673718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575036,"discussion_content":"编程语言会相互借鉴，好的东西会融入到新的编程语言中来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654566501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328267,"user_name":"耳東🍃","can_delete":false,"product_type":"c1","uid":2277384,"ip_address":"","ucode":"EA1719CD60153D","user_header":"https://static001.geekbang.org/account/avatar/00/22/c0/08/a65e8a17.jpg","comment_is_top":false,"comment_ctime":1640649437,"is_pvip":false,"replies":[{"id":"119577","content":"加油哈！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640673745,"ip_address":"","comment_id":328267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640649437","product_id":100103401,"comment_content":"真的，通俗易懂","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542166,"discussion_content":"加油哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640673746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328250,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1640621807,"is_pvip":true,"replies":[{"id":"119572","content":"函数参数越少越好，这肯定是没错的。但在一些复杂场景下，我们是很难做到每个函数的参数都三个以内。这时候Kotlin 的这些特性就能发挥出优势了。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640673520,"ip_address":"","comment_id":328250,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1640621807","product_id":100103401,"comment_content":"根据重构的原则，函数的参数越少越好，尽量在三个以内。<br><br>Kotlin 的默认参数和命名参数隐约在支持多参数时，代码变坏的情况，但是感觉还是要尽量保持函数参数少。<br><br>想听听老师的看法，谢谢～","like_count":0,"discussions":[{"author":{"id":1444319,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIGkZuZuEIG3NZ0iauu4IXyiajegZgSoSEm0hhScicaiaa5j6Hgb34r2tyOt7eGuUricTjvwYV12YCAcww/132","nickname":"YJ.Song","note":"","ucode":"7479215BE4E108","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543882,"discussion_content":"看过安卓framework源码，就知道，他们的函数参数数量有多恐怖了，看过有28个参数的函数。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641346655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542159,"discussion_content":"函数参数越少越好，这肯定是没错的。但在一些复杂场景下，我们是很难做到每个函数的参数都三个以内。这时候Kotlin 的这些特性就能发挥出优势了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640673520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155062,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9f/f6/7431e82e.jpg","nickname":"xueerfei007","note":"","ucode":"EF3FE821E5B54A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590692,"discussion_content":"把参数包装成bean对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666007341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1290690,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b1/c2/32be398a.jpg","nickname":"小刘子可以用","note":"","ucode":"EF0F82EBF8A2E2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544779,"discussion_content":"超过三个直接变成对象参数，函数只有一个参数，但是对象属性可以有N个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641709967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}