[{"article_id":559852,"article_title":"开篇词｜Serverless是降本增效浪潮下的必然选择","article_content":"<p>你好，我是静远。</p><p>先和你简单介绍一下自己。我现在是一家互联网公司的云原生资深技术专家，负责Serverless相关的业务和技术，主要为公有云和私有化的客户提供Serverless相关的落地解决方案，同时，我也是中国信通院在Serverless领域的标准专家。</p><p>伴随着云原生的日渐火热，Serverless作为云原生架构的核心组成部分，现在已然成为近年来技术圈内的当红炸子鸡。到底有多火呢？我们来看看下面的数据。</p><blockquote>\n<p>Datadog的数据显示，在使用云服务的机构和组织中，有半数以上采用了Serverless技术。信通院2021年的最新报告也显示：在核心业务中使用Serverless的用户占到18.11%，已经开始和计划使用Serverless技术的用户超过了70%。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/ff/63/ff819209a8a89aeacd46d8146459b563.jpg?wh=1103x653\" alt=\"图片\" title=\"资源来源于网络\"></p><p>目前，行业内云原生、Kubernetes、容器工程师供不应求。各一线大厂都在加急招聘云原生工程师，在这种情况下，<strong>让自己成为会Serverless、懂Serverless的工程师，能够助力我们弯道超车，向目前大热的云原生技术要红利。</strong></p><h2>让人“又爱又恨”的Serverless</h2><p><strong>Serverless的持续升温，得益于它在“快速的开发交付”“极高的运维效率”“极低的资源成本”这三个方面上的优势。</strong></p><!-- [[[read_end]]] --><p>从容器、应用、函数等不同维度，Serverless可以让自己的业务更快上云，让我们享受云带来的便利性。把管理机器资源、网络资源这些繁琐的事情交给更专业的平台去处理，更加专注于业务和产品自身，进而更好地提升产品和业务的核心竞争力，让专业的人做专业的事。最后，也可以逃脱被产品挑战“这个功能这么简单，要这么长的时间才能开发完吗？”的质疑。</p><p>虽说Serverless有这么大的优势，经历过这几年的发展，关于Serverless的公众号、书籍和社区资料也不少，但真正落地使用的时候，不管是客户、团队的同学还是我，都还像是在摸着石头过河。</p><p>经历了N个令人头秃的夜晚后，我才发现，<strong>Serverless不断延伸发展的特性，极大地提升了我们学习和使用的难度</strong>。</p><p>所以接下来，我们就一块来看看，怎么从Serverless不断发展的“变”中去把握“不变”，在Serverless领域快速的成长进阶。</p><h2>课程设计</h2><p>我把整个课程设计为了“核心技术”“拓展能力”“实战进阶”三大模块，希望通过<strong>循序渐进</strong>的方式让你一步一步成为Serverless领域的专家。</p><h3>导读</h3><p>在课程开始，我会详细的介绍Serverless的前世今生，在学习之前把我和团队同学总结的成长路径分享给你。同时，我会结合中国信通院最新的标准，把Serverless的完整解决方案平铺在你面前。最后，我会讲解一下在<strong>Serverless道路上的学习方法，让你升级打怪的道路更加平坦，最终成为王者。</strong></p><h3>核心技术</h3><p>这一模块，我会通过具象的FaaS产品和技术，将抽象的Serverless的核心要点梳理清楚，包括触发器、冷启动、扩缩容、流量转发、运行时等核心技术的实现机制。同时，我也会在原理中穿插案例和一线经验，让你能够即学即用，拨开云雾见青天。</p><p>有了核心技术的储备，就好像一棵大树有了“主干”。<strong>当你明白了Serverless的架构原理、核心特性以及技术细节之后，对设计一个同样Serverless形态的云计算产品就能做到心中有谱了</strong>。</p><h3>拓展能力</h3><p>这一模块我会讲解Serverless的延伸能力，让你了解Serverless的整体解决方案。它包括如何将WebIDE的能力在FaaS中具体实施起来、如何构建多任务的编排能力、如何构建多维度的Serverless可观测体系等6个小节。</p><p>这一模块的内容，相当于Serverless这棵大树的枝叶。<strong>如果之后让你主导一个新的Serverless形态的云原生产品的技术架构设计工作，你应该也能触类旁通，游刃有余了。</strong>我想，你离架构师的目标就进了一步。</p><h3>实战进阶</h3><p>通过前面几个模块的学习以及贯穿在课程中的实操，一般的场景实战和一线问题应该难不倒你了。</p><p>但纸上得来终觉浅，在实战进阶中，我会和你分享我<strong>作为业务方和平台方两种角色下的亲身经历，跟你聊聊一线的经验，也会通过几个典型的案例，帮你把前面学到的知识点用“活”起来</strong>。</p><p>另外，<strong>Serverless的发展离不开开源生态和社区的贡献</strong>。在这里，我还会跟你一起探讨开源引擎的那些事，并且结合我和客户、用户打交道总结下来的经验，分享一下落地思考的过程，并以如何基于核心引擎构建属于自己的Serverless平台作为这个模块的结束，也是整个专栏的升华。</p><p>通过这样“三位一体”的学习路径，我更希望你能领会到Serverless的“意”，而不是“形”，因为随着Serverless的发展越来越热，云上的产品也会越来越丰富。</p><p>如果你是Serverless平台的使用者，通过专栏的学习，一定会在应用上更加得心应手，知其然，也知其所以然。如果你是Serverless平台的开发者，通过专栏的学习，在云原生产品的开发和创新上，你的思路也一定会越来越开阔。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/b2/a5c431324781410d7a82358447d8fab2.jpg?wh=1180x790\" alt=\"图片\"></p><p>在你踏上Serverless的学习进阶之路之前，我再送你一张课程的知识地图，希望在接下来的学习中，它能作为你提前预习和课后复习的知识脉络，帮助你将以FaaS为起点的Serverless的技术融会贯通。</p><h2>写在最后</h2><p>这门课我最终选择了<strong>以FaaS形态的Serverless为切入点</strong>，来跟你剖析这里面的核心技术、拓展能力和实战经验。</p><p>为什么会这么选择呢？给你分享一下我的想法，当然，也欢迎你在留言区和我一块讨论。</p><p>Serverless现在还在快速成长的阶段，功能、产品、面向的领域也在延伸。想要在这个快速迭代、动态发展的技术领域里构建自己的知识体系实在是难上加难。况且，Serverless发展到今天，<strong>已经不是一两个明确的技术或者产品了，它包含着一整套的产品体系和技术理念</strong>。</p><p>我们可以从两个层面来看待。一个层面是理论学术层面，包括FaaS（Function as a Service）和BaaS（Backend as a Service），其中BaaS有Serverless化的消息中间件、对象存储、数据库等。另一个层面是产品技术层面，包括函数计算FaaS、弹性应用托管服务、弹性的容器服务等产品，以及一整套配套的工具链。</p><p>试想一下，难道我们要每拓展一个产品、功能或者领域，就要从0开始学习吗？</p><p>那么，我们是不是能<strong>找到一个较为成熟的切入点，在了解技术本身的同时，掌握学习它的方法</strong>呢？</p><p>FaaS作为Serverless意识形态的“元老”级别产品，从AWS Lambda发布，再到众多厂商开始紧跟潮流，发展到目前已经有8个多年头了。自定义运行时、自定义镜像、编排、应用中心等也都是基于FaaS打造和延伸的功能。因此，我觉得FaaS形态的Serverless是非常好的入手选择。</p><p>希望<strong>这样的聚焦方式，能够帮你养成<strong><strong>举一反三</strong></strong>的习惯和能力</strong>。这几年和Serverless打交道的一线经验、解决的问题，以及平台设计上抽象出来的方法让我获益良多，我希望这些经验也能够以案例和实战相结合的方式交到你手上，让我们一起推进Serverless向前迈进。</p><p>在伯克利大学发表的新论文中，预言了 Serverless 将主导云计算下一个十年的发展。我坚信，通过这样的方式，你一定可以成为Serverless的一员干将，在未来的十年里站得更稳。</p><p>接下来，让我们一起开启Serverless的学习之旅吧！</p>","neighbors":{"left":[],"right":{"article_title":"思维构建｜如何在新赛道下进阶Serverless能力？","id":559863}}},{"article_id":559863,"article_title":"思维构建｜如何在新赛道下进阶Serverless能力？","article_content":"<p>你好，我是静远。</p><p>Serverless发展到现今，<strong>大部分的技术人已经对 Serverless 将引领云计算的下一个十年达成了共识</strong>。作为一名技术研发人员，“Serverless”对你来说大概率并不陌生，甚至，你已经在不知不觉中用上了，但是，它的快速发展也让我们很难对它形成一个较为全面的认知。</p><p>那么这节课，我们就一起了解Serverless的前世今生，重构Serverless思维，并选择一个具象化的Serverless形态作为切入点，开启后续的学习。最后，我也会和你探讨后续学习“升级打怪”的各个阶段，让我们的进阶目标更加清晰。</p><h2>新赛道：Serverless的具象化表达</h2><p>简单来说，<strong>Serverless是一种架构设计的理念</strong>，它不是一个具体的编程框架、类库或者工具。随着大家对于Serverless理解的深入，用词也越来越精准、具象。从之前“<strong>无服务器</strong>”的直译到目前“<strong>服务器无感知</strong>”的理解，是各界对Serverless这几年发展和使用的一个跨度的体现。</p><p>我们从头看一遍这个新赛道的发展历程。用Martin Fowler的观点来说，<strong>Serverless是FaaS和BaaS的组合</strong>，这个简单明了的定义，奠定了 Serverless 组成结构的基础。</p><!-- [[[read_end]]] --><p>CNCF在认定这个理念的同时，也在它的白皮书V1.0中对 Serverless 架构的定义有了进一步地完善描述，它指出：Serverless Computing 是<strong>构建和运行不需要服务器管理的应用程序。<strong>它描述了一种更细粒度的部署模型，将一个或多个功能的应用程序打包上传到Serverless平台，然后</strong>根据实际的需求，执行、扩展和计费。</strong></p><p>我们发现，这个描述从执行路径和更细的角度进行了具象化的表述。</p><p>在2022年7月的云原生产业大会上，信通院发布的最新的云计算白皮书针对Serverless的描述中提到，“通过多种<strong>服务器无感知</strong>技术，将基础设施抽象成各种<strong>开箱即用</strong>的服务，以API接口的方式提供给用户按需调用，真正做到<strong>按需伸缩、按使用量收费</strong>”，又进一步从业务和基础设施服务的协作角度，凸显了Serverless的特性。</p><p>我沿用信通院白皮书的话来体现这种思想，也希望我们能够达成一个共识：“<strong>Serverless是能够实现业务和基础设施分离，提升用户业务创新能力的理念</strong>”。</p><h2>发展历程：从单一到多元</h2><p>除了理念上的落地，我们再说一下Serverless的技术和应用场景向多元化发展的历程。以史为镜可以知兴替，理解Serverless多元化的历程，才能更完整地构建你的Serverless思维。</p><h3><strong>雏形阶段</strong></h3><p>国外可以追溯到2006年，Fotango公司推出的PaaS平台Zimki，提出了<strong>按需使用、按量付费</strong>的概念，从那时Serverless的核心特征就已见雏形了。到2012年，基础设施服务提供商Iron.io的副总裁Ken在《Why The Future of Software and Apps is Serverless》中首次提到“Serverless”这个词，它正式走进历史的舞台。我们可以认为，这一阶段就是Serverless发展的“<strong>雏形阶段</strong>”。</p><h3><strong>发展阶段</strong></h3><p>AWS 于2014年发布第一款函数计算产品 —— Lambda预览版，并于2015年正式商用，使用量随后一路飙升，随后，IMB、Google、Micosoft也于2016年相继发布FaaS产品，开源项目也同时出现，这里包括比较知名的OpenWisk、Fission、Kubeless、OpenFaaS等。</p><p>到2017年，国内头部的四朵云（阿里、腾讯、华为、百度）也相继发布了FaaS产品。同年，Azure发布了首个Serverless容器ACI，AWS发布Serverless容器服务Fargate。</p><p>可以说，Serverless的领域内，大家追逐和创新的劲头彰显得非常明显。这一段时间出现了函数计算、容器实例、容器服务等产品。从下面的Google Trends也可以看出，人们对于无服务器和Lambda的关注度是不断提升的。我们可以认为，这是Serverless的<strong>发展阶段</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/41/4a/4196875158bdec12533859a54a95c14a.jpg?wh=1435x693\" alt=\"图片\"></p><h3>成熟阶段</h3><p>2018年，华为云发布了Serverless容器服务CCI，阿里云发布面向应用的Serverless托管服务SAE。在开源方面，Knative发布，并于2022年3月成为CNCF孵化项目。</p><p>时隔一年，阿里云、Google、腾讯云先后发布了Serverless容器服务，截止到去年，各大公司又相继推出了Serverless应用托管服务，旨在进一步为用户提供全托管、免运维和高弹性的服务能力，一方面可以解决存量的微服务应用上云，另一方面可以高效地集成和持续交付等。这一期间直接把Serverless推到了一个相对<strong>成熟的阶段</strong>。</p><p>可以说，随着Serverelss技术和价值的体现，各大公司都在你追我赶地发展，国内厂商虽然是后来者，但追赶势头迅猛，目前的竞争力也能够和国外大公司相互比肩。</p><p>从发展历程中，我们也可以看出，<strong>以函数为起点，Serverless的技术和产品逐步趋于多元化</strong><strong>。</strong>多种形态相互补充，为解决更复杂、更多样化的业务场景提供支撑，我们通常会把场景分为三类：</p><ul>\n<li><strong>函数计算（FaaS）：面向函数</strong>，用户只需关注函数层级的代码，用于解决轻量型、无状态、有时效的任务；</li>\n<li><strong>Serverless应用托管：面向应用</strong>，用户只需要更关注应用本身，与微服务结合，它融合应用治理、可观测，降低了新应用的构建成本、老应用的适配改造成本；</li>\n<li><strong>Serverelss容器服务：面向容器</strong>，在不改变当前Kubernetes的前提下，由于不再需要关注节点，大大提升了前期资源的准备过程，降低了维护成本，使得应用的全生命周期管理更高效。</li>\n</ul><p>随着Serverless的内涵持续外延，计算的Serverless化要求BaaS服务也具备与之配套的托管能力和极致弹性，全链路完整支撑真正Serverless化的应用构建。</p><p>那么，我们讨论的“Serverless”已经不再是原来狭义上的Serverless——函数即服务了。广义上，<strong>Serverless的特性应该同时体现在Serverless DB、Serverless消息队列、工作流、工具链等等方面。</strong>如今，在资源层的Serverless上，各大公司也相继研究发布了各种产品，如数据库层面的<a href=\"https://aws.amazon.com/cn/getting-started/hands-on/amazon-aurora-serverless/\">Amazon Aurora Serverless</a>、<a href=\"https://cloud.tencent.com/document/product/1154/43004\">PostgreSQL for Serverless</a>、<a href=\"https://help.aliyun.com/document_detail/58764.html\">PolarDB Serverless</a>等。</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/e0/d8be6b092de3cb2d5f970b180edfc9e0.jpeg?wh=1636x1018\" alt=\"\" title=\"资料来源于信通院\"></p><p>除了定义内涵在不断的丰富，Serverless的应用场景也在迅猛扩展。它不再局限在小程序、定时任务、简单事件的触发、批量场景的处理了，基于AI的集成、大规模数据的处理、IOT数据处理、微服务托管上云等领域都随处可见Serverless的身影。</p><p>我再附上一张信通院标准书中的Serverless解决方案图，帮助你更好地梳理Serverless的知识要点，在课程的开始，构建起Serverless的模型和思维。</p><p><img src=\"https://static001.geekbang.org/resource/image/61/e0/61d68f51ce723c5c951e861e0e3yy8e0.jpeg?wh=1800x732\" alt=\"\" title=\"资料来源于信通院标准书\"></p><h2>切入点：升级打怪的进阶之路</h2><p>了解了Serverless的发展、价值和架构模式，具备了Serverless的意识形态之后，相信你已经对Serverless这个新赛道脱离了之前的印象了。</p><p>Serverless的多而杂，一方面让我们更期待它未来的发展，但另一方面，也的确提升了我们学习的难度。那我们要怎么切入这个新赛道，紧跟云计算下一个十年的发展趋势呢？</p><p>正如开篇词中所说，我不希望你面面俱到地学习很多具象化的技术，那样只会“杂而不纯，博而不精”。我建议你从FaaS形态的Serverless入手，为什么要给出这个建议呢？</p><p>首先，Serverless如同太极，确实讲究“用意不用力”，但学习“太极”也讲究前期的武功招式，只是练就到最后，应该忘形存神。那么选择一个具象化的产品来学习新赛道下的Serverless是非常有必要的。</p><p>其次，FaaS作为Serverless意识形态的“元老”级别产品，从AWS Lambda的发布，到众多厂商的跟进，已经发展8个年头了。自定义运行时、自定义镜像、编排、应用中心等也都是基于FaaS打造和延伸的功能。因此，FaaS形态的Serverless是你入手的不二选择。</p><p>那么，我们如何学习Serverelss FaaS这一套“拳法”呢，我列了这一个简单示意图，下面我依次来跟你讲一下如何<strong>达到<strong><strong>每一个</strong></strong>层级</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/6a/7f4b9f968b397a7bf65a23a30797546a.jpeg?wh=1724x1062\" alt=\"\"></p><ul>\n<li><strong>Hello</strong> <strong>Wo<strong><strong>r</strong></strong>ld</strong></li>\n</ul><p>这个层面最简单，你只要具备任意一个云厂商的账号，创建一个函数运行起来，就算是迈出了Serverless学习的第一步。</p><p>在学习的过程中也不需要任何的成本，云厂商一般都有免费的额度，不用担心费用问题，直接上手练习、使用就好。</p><ul>\n<li><strong>能用</strong></li>\n</ul><p>要想达到这一层，你需要经常去云厂商的网站浏览，学习手册，再找一些公众号等博文资料了解。</p><p>完成这一次进阶的你，一定已经基本了解了一个Serverless的平台都有哪些功能，也能够简单的实操，可以做一般的售前解决方案了。不过，还并不具备很强的开发能力。</p><ul>\n<li><strong>会开发简单业务</strong></li>\n</ul><p>这一层开始，就是针对开发层面的学习了。</p><p>一方面，你需要掌握一门比较流行的编程语言，比如Python、Golang等，另一方面，你还需要持续关注业界公布的各种案例和云厂商的手册，跟着来改造你的代码。做到这两方面，这一层进阶也就完成了。</p><ul>\n<li><strong>会开发复杂业务</strong></li>\n</ul><p>达到这一层次的开发同学，必须将函数计算的各种技能融会贯通，知道什么情况用什么策略更好，当然，在社区和云厂商的答疑上也会有一些分享，可以持续关注。</p><ul>\n<li><strong>能沉淀公共能力</strong></li>\n</ul><p>这个层级属于业务开发的最高级。简单来说，你在开发自己业务代码的时候，能够沉淀出相关的类库、层供你和其他同学或者平台上的其他开发者使用的能力，这是抽象能力的体现。</p><p>在达成进阶之前，你应该就已经具备能撰写类库的能力，且学习过相关的抽象思维、设计相关的知识，并有这种意识去执行。</p><ul>\n<li><strong>计量计费</strong></li>\n</ul><p>作为一个平台，计量计费是少不了的。这个层级，也可以说是希望具备平台开发能力的同学需要达到的初级阶段。</p><p>你需要提前具备Kubernetes、Docker、架构设计、中间件的基础知识，在此基础上，你还需要系统性地吸收Serverless的一线实战案例和经验，才有可能避免踩坑。</p><ul>\n<li><strong>平台可迁移</strong></li>\n</ul><p>这个层级属于平台开发的王者阶段。你开发的平台不仅可以在你的云上使用，还可以帮助私有化企业部署，甚至可以组件化的方式输出。</p><p>想要完成这个层级的进阶，我的建议是加入一个云原生的Serverless团队，在里面打磨一万小时以上，扎扎实实地搞清楚每个点，假以时日，你才能在这个领域崭露头角。</p><h2>写在最后</h2><p>到这里，你应该已经对Serverless有了不一样的理解。</p><p><strong>Serverless是能够实现业务和基础设施分离，提升用户业务创新能力的理念</strong><strong>。</strong>我给你整理了一个图，突出几个核心特征组成了它的形式：</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/8b/ea1afe0bdc6dcb7e100fc829e38d5e8b.jpeg?wh=1788x936\" alt=\"\"></p><p>其中，从物理组成上，FaaS和BaaS组成了Serverless的基本构成，这就跟汽车由车身和车轮构成一个道理；而通过开箱即用、API形式调用等动作描述了Serverless的运作形态，这就跟汽车需要发动引擎、脚踩刹车的使用逻辑类似；最后，按需调用、按量收费的几个核心特征体现了Serverless的“最大卖点”，好比似汽车的自动驾驶、自动泊车功能一样。</p><p>这样了解下来，你是不是对Serverless的理解更亲切了呢？</p><p>Serverless发展到今天形成了以<strong>函数计算、弹性应用、容器服务</strong>为核心的产品形态，并逐步<strong>泛化和外延</strong>，使得其形态趋于<strong>多元化</strong>，形成互补之力，能够满足更多的场景。</p><p>但是，Serverless思维的建立一定不是一蹴而就的。在它未来发展的几年中，也一定会越来越泛化，它一定会继续融合更多的生态，更多的Serverless产品形态也将会不断涌现。我们要做的，就是“保持一颗拥抱变化的心”，扎根于Serverless的本质精髓，透过产品了解背后的技术原理和初衷。</p><p>在后面的课程中，我希望你不仅跟着学习文章中的理论知识，也能够随着课程中提到的实战去自己动手练习，积极地参与讨论和思考，通过“学习-实践-总结-表达”的过程去探索这门不断延伸的技术。</p><p>在这样的学习下，我相信你一定可以触类旁通，<strong>“随敌而变，随招而变</strong>”，达到真正的“<strong>用意不用力</strong>”。</p><h2>思考题</h2><p>你在步入Serverless领域的时候，有没有遇到什么困惑呢？欢迎分享出来，我们一起讨论解决。</p><p>感谢你的阅读，也欢迎你把这节课分享给更多的朋友一起阅读和交流。我们下一讲见。</p>","neighbors":{"left":{"article_title":"开篇词｜Serverless是降本增效浪潮下的必然选择","id":559852},"right":{"article_title":"01 | 生命周期：函数计算的基本流程是如何执行的？","id":559891}}},{"article_id":559891,"article_title":"01 | 生命周期：函数计算的基本流程是如何执行的？","article_content":"<p>你好，我是静远。</p><p>看过上一节思维储备的内容之后，相信你对Serverless的认知已经越来越清晰了。它是一种服务设计的理念，只需关注业务逻辑的开发，无需关注环境运维和机器的管理，同时具备弹性、按需付费等特点。</p><p>FaaS（函数即服务）作为我推荐给你的第一个步入Serverless世界的技术，今天，我想跟你介绍一下它的基本流程，让你从整体上对FaaS有一个初步的了解，心中能够勾勒出函数计算开发、调试、部署和运行的轮廓。</p><p>这样，在你后续碰到某一个困惑，例如“函数上传到哪里去了？”“函数运行为什么超时？”等流程问题时，就能快速知道自己需要深入了解哪一块的知识点。</p><p>这节课，我就以“Hello Serverless”为例，选取百度智能云函数计算CFC作为操作平台，分别从用户使用与平台服务两个视角，梳理一遍 FaaS 执行的流程和原理，这其中包括函数创建、存储、执行等一个生命周期的始终，同时，我也会带你体验一次开发、运行函数计算的流程。</p><h1><strong>初次体验推荐用云厂商平台</strong></h1><p>一般初次接触Serverless，我推荐先去公有云厂商的云平台上跟着他们的教程来体验，从使用角度上能够有一些认识，再看开源的框架或者找一些资料深入研究。</p><p>为什么这么推荐呢？</p><!-- [[[read_end]]] --><p>首先，云厂商的函数计算平台为用户提供了多种运行环境（Python、Java、PHP、Node.js、Golang 等），可以满足不同技术栈的开发需求。你可以选择任何你擅长的语言来体验，避免了语言的切换成本。如果选择的是解释性语言，可以直接在云平台上开发、调试、部署，非常方便。这样，通过<strong>低成本的学习</strong>，你可以快速地理解Serverless的产品形态。</p><p>其次，如果你自己要部署一套开源的框架，是要有机器资源的，而云厂商一般都会提供免费的额度。拿函数计算来说，像百度智能云、阿里云、华为云，每个月都有大概100万额度的调用次数，以及40万GB-秒的内存资源使用，基本上<strong>足够我们体验</strong>了。腾讯云做了一些调整，新人前3个月有一定的免费额度。当然，你在使用的时候，最好提前看一下云厂商的使用说明，避免多花冤枉钱。</p><p>最后，你也可以比较方便地通过云厂商提供的各类API/SDK、触发器集成、开发工具来<strong>了解整个Serverless的生态和解决方案。</strong>这也正是我们常说的“遇到新事物，先看看别人是怎么干的”，也是学习的一条捷径。</p><p>了解了大致的体验方式和流程之后，下面我们就要从用户角度来看函数计算是如何使用的了。</p><h1><strong>从用户视角看函数计算的生命周期</strong></h1><p>函数整个生命周期会经过“开发设置”“打包上传”“事件绑定与触发”“弹性执行”“实例销毁”五个过程。下面这张图片，就展示了用户视角下的函数计算的过程。我们一起来体验一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/98/a6/98afb14f1fd3757f635cd87be81682a6.jpeg?wh=1812x864\" alt=\"图片\"></p><p><strong>第一步</strong>，需要你编写相应的函数代码。我们以 Python3.6 为例，撰写一个“Hello Serverless”的Demo，函数运行时选择 Python3.6，执行内存选择 128MB，超时时间选择 3s，并发度设置为1。下图展示的就是我们创建好的函数信息概览。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/bd/e2ff935f9e22dce0cf8bdc09ec35d3bd.jpg?wh=1253x384\" alt=\"图片\"></p><p>然后，我们点击编辑函数，进入在线编辑模式，编写Demo案例代码。你也可以下载到本地进行代码开发。</p><pre><code class=\"language-python\"># -*- coding: utf-8 -*-&nbsp;\ndef handler(event, context):\n&nbsp;&nbsp; return \"Hello Serverless\"\n</code></pre><p>编写完成之后，你还需要指定函数执行的入口，例如：填写 “index.handler”，就是指调用主程序文件 index.py 中定义的 handler 方法。当有事件触发函数执行时，就会先从handler方法开始执行。</p><p><strong>第二步</strong>，需要将代码上传到函数计算平台上。你可以直接在界面提交并保存你的代码，也可以将代码打包成 zip 文件。上传的方式包括函数计算API/SDK、前端界面上传，还可以通过命令行工具 CLI 上传。</p><p><strong>第三步</strong>，执行你刚刚上传的函数。通常可以利用 API/SDK 调用，或者在前端界面手动点击来执行函数，另外，你也可以通过各种触发器来触发函数的执行。</p><p>你可能会对触发器感到陌生，这里我简单说一下。</p><p>FaaS可以通过事件触发器打通众多的上下游服务，当触发源服务发出请求时，函数就会响应运行，作出处理和反馈。以 HTTP 触发器为例，当用户访问 HTTP 触发器的 URL 时，会向指定的云函数发出HTTP处理请求，随后平台会启动一个函数实例来对请求进行处理。</p><p>我们继续操作函数helloServerless，从平台中选择创建一个HTTP触发器，将URL路径设定为“/hello/serverless”，选择“GET”方式作为HTTP的请求方法。</p><p><img src=\"https://static001.geekbang.org/resource/image/12/ac/125e522c936b74ca3879dd73cf5382ac.jpg?wh=643x419\" alt=\"图片\"></p><p>创建完触发器后，函数计算平台会帮助你生成一个可访问的URL地址，你就可以通过这个URL地址进行触发函数的执行了。如果你是要上生产环境，最好能增加身份验证，以确保服务的安全可靠。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/77/f4dbc723bfa5f52b4682de0610cfd877.jpg?wh=782x229\" alt=\"图片\"></p><p><strong>第四步</strong>，当函数执行完毕，函数计算平台会返回函数的执行结果。通常可以通过日志或者请求返回的信息来查看函数的执行结果。</p><pre><code class=\"language-python\">curl https://$HTTP_TRIGGER_URL/hello/serverless\n\n#输出结果\nHello Serverless\n</code></pre><p>经过上面的步骤，你已经完成了一个“Hello Serverless”的小Demo。对于用户而言，只需要关注开发的代码本身，而不需要去关注环境的部署和维护。看到这里，你可能会有疑问，执行结果和传统代码执行没有区别，为什么要选择 FaaS 呢？</p><p>其实，<strong>FaaS最大的特点在于弹性扩缩容和缩容至0的能力，当你没有调用函数，FaaS是没有任何实例在计费的</strong>。也就是说，当你创建上传函数后，并没有产生计费，只有当你产生调用量才会开始计费。当流量达到一个阈值的时候，系统自动进行扩容。当流量变小时，系统会自动进行缩容。</p><p>另外，一般云厂商的 FaaS 都会有一定的免费额度，如果你的应用是基于事件触发或者流量的波峰波谷比较明显，那么 FaaS 绝对是你的明智之选。</p><h1><strong>从平台视角看函数计算的执行过程</strong></h1><p>前面我们已经从开发者的角度了解了函数计算的生命周期，但我相信你肯定不会只满足于表面的使用。 那么，函数计算内部具体是如何实现的呢？</p><p>简单来说，事件的请求，首先会到达路由服务，路由服务在缓存Cache中查看是否有准备就绪的实例。如果有就绪的实例，也就是热启动，直接使用该实例执行函数即可。如果没有就绪的实例，就会进入冷启动过程。函数计算引擎会启动容器的初始化流程，做一些准备工作：下载函数的代码包或者镜像、准备网络环境、加载运行时Runtime，进而执行函数，并将实例信息放入到Cache中，下次请求再过来的时候，就进入热启动流程。</p><p>执行完毕之后，实例会保留一定时间（通常是1-2分钟），随后被回收。</p><p>以上是正常的执行流量，当流量突增到一定阈值的时候，函数计算服务会快速扩容实例来满足提升的并发量。而空闲的实例太多的时候，也会缩容实例。</p><p>到这里你肯定会有疑问，很多新名词好像很陌生，冷启动、热启动、运行时等等。下面我将带你从开发态和运行态两个视角来梳理函数计算的生命周期，便于你理解它们的含义。</p><h2><strong>函数计算的开发态</strong></h2><p>当我们上传代码到FaaS平台后，后端服务会将代码包上传到对象存储中，并将函数相关信息，包括函数代码链接、Runtime信息、运行内存、超时时间等信息存储起来。</p><p>当我们再次修改函数相关信息，或者在线编写函数代码的时候，FaaS平台会将存储好的代码和附属信息读取出来，展示在界面上，供你修改。</p><p>这里需要注意的是，目前各大云厂商还只支持解释性语言的在线编译和调试，<strong>对于编译型语言，你还得下载到本地进行开发</strong>。所幸，目前有的云厂商（如阿里云）已经发布了端云联调能力的工具，从一定程度上来说，也便于你快速本地开发、调试和发布。后面的章节中，我也会跟你详细介绍这个技术的实现。</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/84/a9c42a64957ecca3d0bfd2346ae60a84.jpeg?wh=1666x928\" alt=\"图片\"></p><h2><strong>函数计算的运行态</strong></h2><p>那在你上传好代码之后，FaaS平台是如何执行函数代码的呢？我们还是以“Hello Serverless”为例来说明。</p><p>在开头，我们已经创建了一个函数、编写了相应的代码，并保存到了云厂商的平台上。</p><p>我们再次回到 HTTP 触发器的方式执行来讲解。当事件请求访问触发器的URL时，请求会被路由到相关函数实例，<strong>依据是否是第一次请求，会分为冷启动和热启动两种情况；根据流量的大小，会进行动态的扩缩容</strong>。</p><p>我将这个过程抽象成下面的函数计算架构示意图，通过这个示意图，我们来依次看一下“Hello Serverless”云函数是怎么执行的。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/ef/d11cc42c16c0f133ede84c1469c52cef.jpeg?wh=1920x1006\" alt=\"图片\"></p><h3>流量转发：热启动和冷启动</h3><p>首先，当HTTP事件请求到来之时，流量转发服务负责接收转发请求，也就是图中的Route服务。当Route接收到请求后，首先就要在自己的缓存Cache里查看是否已经存在当前Hello Serverless函数和实例的对应信息。</p><p>如果有，那么根据存储的信息，直接在实例池（instance pool）中获取执行实例，这时请求就以热启动方式被执行。具体什么是热启动呢？就是<strong>当你的函数执行完成后，容器实例会保留1-2min的时间，如果此时触发执行函数，那么无需新增实例和执行函数 runtime 的挂载，直接复用</strong>。因此它的响应速度要快得多。</p><p>如果找不到相关的信息呢？那么就会<strong>通过一个类似激活器（如Activator）的组件，来创建并申请一个实例，<strong><strong>执行本次请求</strong></strong>，接着，<strong><strong>将实例的相关信息存储到Route的缓存中，这就是冷启动</strong></strong>的执行过程</strong>。</p><p>在冷启动过程中会有哪些操作呢？一般来说，包括实例调度和容器创建、下载并解压代码、准备函数执行环境、挂载用户代码、VPC网络准备、初始化运行时和用户代码，这一系列过程结束后，函数才开始执行。所以冷启动的消耗时间受到很多因素的影响，主要包括：</p><ul>\n<li><strong>不同语言的冷启动时间不同</strong>：一般 GoLang、Python的速度较快，而Java的速度相对较慢一些。</li>\n<li><strong>代码包大小</strong>：下载解压代码的过程在冷启动过程中比较耗时，一般体积越大，耗时越多。</li>\n<li><strong>容器创建速度和VPC网络的准备</strong>：这个过程的耗时往往取决于云服务商，不同平台的速度也是不一样的。</li>\n</ul><p>当然，各云厂商对于冷启动也在不断地优化，推出了预留实例、通过缓存加快代码下载速度、VPC代理和IP隧道技术等方式来解决冷启动问题。你也可以通过一些方式来自行解决，例如：</p><ul>\n<li><strong>精简代码包</strong>，减少掉一些不必要的配置和依赖。</li>\n<li>用<strong>预热</strong>请求的方式来确保代码实例常驻在容器池中，比如用定时器触发代码实例进行一个非常快的空响应。</li>\n<li>选择冷启动时间较少<strong>语言</strong>，尽量避免使用 Java 等启动较慢的语言运行时。</li>\n<li>尽量选择较大的<strong>内存</strong>：函数的内存越大，冷启动速度越快。<br>\n后面的冷启动章节，我会详细地跟你聊一聊这一块的技术要点和一线实战经验。</li>\n</ul><h3><strong>动态扩缩容</strong></h3><p>那么什么时候需要扩容和缩容呢？当我们首次通过HTTP触发器请求的时候，此时由于函数实例池里面没有已经加载好的Pod，需要进行一个从0到1的容器扩容过程。</p><p>此时，还需要将Hello Serverless的包从对象存储中加载到容器中运行起来。当执行结果返回后，一般FaaS平台会将函数实例保留一段时间再进行销毁。如果被保留的时间段内有请求再次进来，那么就可以直接复用，不需要扩容。但如果此时并发超过我们前面设置的1次请求，函数计算引擎监听到相关指标后，就会自动扩容。</p><p>当然，我这里举的情况比较极端了，通常的函数计算引擎会根据设定的监控阈值，提前就要扩容了。</p><p><strong>扩缩容算法包含Node级别和Pod级别的扩缩容</strong>。Node和Pod一般会监控自定义的指标，如果指标有变化，会进行相应的扩缩容操作。</p><p>例如 ，Kubernetes 中的 HPA 扩缩容算法，通过安装一个 metrics-server 的监控组件，提供 HPA 和基础资源监控的能力。对CPU和Memory等指标进行监控，保证其维持在可控的范围内。这里先卖个小关子，函数计算的扩所容是否可以通过Kubernetes的HPA来直接进行，需不需要改动？可以先思考一下，我们在扩缩容一节中会详细跟你来探讨。</p><p>而Node级别的扩缩容，一般会根据Node的整体使用率，来判断Node数量是否需要扩容。一旦需要扩缩容，就会向Scheduler发送扩缩容请求，Scheduler调用相关接口执行扩容操作。</p><h3><strong>函数实例释放</strong></h3><p>最后，我还是要提一句，运行也是有始有终的。当函数执行完毕，并且在 1~2min 内没有再次执行时，FaaS 平台就会回收该实例。</p><p><strong>各云厂商<strong><strong>的</strong></strong>回收时间各不相同</strong>，这里注意一下就行，以便我们将来基于云平台开发的时候，可以提前优化函数，确保请求在热请求的情况下执行。</p><h3>Runtime</h3><p>通过之前的步骤，你已经可以获得一个函数实例来执行你编写的函数Hello Serverless了。下面我们来重点看一下函数执行的关键底座：Runtime。Runtime 是为函数提供运行框架，并真正执行函数的进程。</p><p>云厂商一般将不同语言的执行环境打包为基础镜像。容器镜像包含多层镜像，第一层基础镜像为 ubuntu、alpine之类的文件系统；第二层镜像为代码的依赖库，如Python 代码需要使用 pip 库 , Node.js 代码需要使用 npm 库。也有的函数计算引擎，直接支持Docker镜像来运行。</p><p>我们以上述“Hello Serverless”的运行语言Python3为例来说明runtime的执行过程。Python3-runtime通常会开放一个handler的接口给开发者实现具体的业务逻辑。当一次请求到来之时，Python的运行时会通过动态加载的方式对你刚才定义的文件方法进行调用。</p><p>这里需要注意的是，对于编译型语言，需要引入FaaS平台提供的代码库，基于一套现成的框架来开发业务逻辑代码，不过思路一样，只是运行的方式不一样罢了。</p><p>具体的的实现过程，我会在运行时一节中跟你细聊。</p><h1><strong>小结</strong></h1><p>最后我们来小结一下。今天，我通过一个“Hello Serverless”的例子，带你了解了函数计算在不同视角下的运作过程。</p><p>从用户视角，通过四个步骤的实操，我们可以了解到作为一个业务开发人员，需要重点关心的部分是开发设置、打包上传、事件绑定与触发以及函数上线后的按需付费。对于函数如何执行、如何扩缩容、如何销毁等一系列函数计算引擎去做的事情，可以让平台运维人员更多的关注。</p><p>从平台视角，基于开发态，我们可以清晰地了解到函数计算控制面做的事情在于提供给业务人员一个好的操作平台；基于运行态，我们从整体上对运行期各环节的协作有了一定的了解。</p><p>一方面，事件初次请求时，函数计算平台有一个从0到1的扩容过程，随着流量的增加，平台会继续扩容以确保请求的正常执行。随着请求的减少，平台会通过释放实例来缩容。</p><p>另一方面，真正支持函数执行的运行时，也有着不同的实现方法，主要来源于语言本身特性的不一样。</p><p><img src=\"https://static001.geekbang.org/resource/image/58/d2/58cb677ee7ca80d53e700c95943499d2.jpeg?wh=1920x557\" alt=\"图片\"></p><p>通过今天的介绍，相信你对函数计算有了一个整体上的了解，已经摸到了这个领域的大门了。</p><p>接下来的课程，我也会详细地把本节提到的这些技术要点和你一一道来。</p><h1><strong>思考题</strong></h1><p>好了，这节课到这里也就结束了，最后我给你留了一个问题。</p><p>FaaS提高了开发人员的生产效率，使得产品能够快速地推向市场进行试错，你是否接触过FaaS，哪些业务已经在使用了，有遇到过什么问题么？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。感谢你的阅读，也欢迎你把这篇文章分享给更多的朋友一起交流进步。</p><p></p>","neighbors":{"left":{"article_title":"思维构建｜如何在新赛道下进阶Serverless能力？","id":559863},"right":[]}}]