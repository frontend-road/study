{"id":479163,"title":"03 | 握手：TCP连接都是用TCP协议沟通的吗？","content":"<p>你好，我是胜辉。</p><p>在前面预习篇的两节课里，我们一起回顾和学习了网络分层模型与排查工具，也初步学习了一下抓包分析技术。相信现在的你，已经比刚开始的时候多了不少底气了。那么从今天开始，我们就要正式进入TCP这本大部头，而首先要攻破的，就是握手和挥手。</p><p>TCP的三次握手非常有名，我们工作中也时常能用到，所以这块知识的实用性是很强的。更不用说，技术面试里面，无论是什么岗位，似乎只要是技术岗，都可能会问到TCP握手。可见，它跟操作系统基础、编程基础等类似，同属于计算机技术的底座之一。</p><p>握手，说简单也简单，不就是三次握手嘛。说复杂也复杂，别看只是三次握手，中间还是有不少学问的，有些看似复杂的问题，也能用握手的技术来解决。不信你就跟我看这几个案例。</p><h2>TCP连接都是用TCP协议沟通的吗？</h2><p>看到这个小标题，可能你都觉得奇怪了：TCP连接不用TCP协议沟通还用什么呢？</p><p>确实，一般来说TCP连接是标准的TCP三次握手完成的：</p><ol>\n<li>客户端发送SYN；</li>\n<li>服务端收到SYN后，回复SYN+ACK；</li>\n<li>客户端收到SYN+ACK后，回复ACK。</li>\n</ol><p>这里面SYN会在两端各发送一次，表示“我准备好了，可以开始连接了”。ACK也是两端各发送了一次，表示“我知道你准备好了，我们开始通信吧”。</p><!-- [[[read_end]]] --><p>那既然是4个报文，为什么是三次发送呢？显然，服务端的SYN和ACK是合并在一起发送的，就节省了一次发送。这个在英文里叫Piggybacking，就是背着走，搭顺风车的意思。</p><p>如果服务端不想接受这次握手，它会怎么做呢？可能会出现这么几种情况：</p><ol>\n<li>不搭理这次连接，就当什么都没收到，什么都没发生。这种行为，也可以说是“装聋作哑”。</li>\n<li>给予回复，明确拒绝。相当于有人伸手过来想握手，你一巴掌拍掉，真的是非常刚了。</li>\n</ol><p>第一种情况，因为服务端做了“<strong>静默丢包</strong>”，也就是虽然收到了SYN，但是它直接丢弃了，也不给客户端回复任何消息。这也导致了一个问题，就是客户端无法分清楚这个SYN到底是下面哪种情况：</p><ol>\n<li>在网络上丢失了，服务端收不到，自然不会有回复；</li>\n<li>对端收到了但没回，就是刚才说的“静默丢包”；</li>\n<li>对端收到了也回了，但这个回包在网络中丢了。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/43/5a/43eaba402d816fb9eac71de24062695a.jpg?wh=2000x777\" alt=\"\"></p><p>你看，就这么简单的一个SYN，还能引申出三种状况出来。感觉什么东西一沾上网络，就要变成麻烦事啊。所以，跟我们在<a href=\"https://time.geekbang.org/column/article/477510\">第1讲</a>里学过的一样：设计网络协议真的不简单。</p><p>那么，从客户端的角度，对于SYN包发出去之后迟迟没有回应的情况，它的策略是做<strong>重试</strong>，而且不止一次。那会重试几次呢？重试多久呢？这个问题，一下子还不太好回答。不过，有tcpdump帮忙，我们可以搞清楚重试的问题，也可以搞清楚“TCP连接是否都用TCP协议沟通”的问题。</p><h3>动手实验</h3><p>你可以借助iptables和tcpdump做个实验，来验证这件事。你需要一台测试用的服务端，安装Ubuntu等Linux类系统，然后用你的笔记本作为客户端发起测试。这里我也放了一个视频，展示了这个实验过程，你可以结合着对照来看。</p><p><video poster=\"https://media001.geekbang.org/8182de625b084859a9c4a0b294528730/snapshots/2423524caf814063bfc94b8e03df7bf6-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/3ecf30cd-17e63c17e92-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/6d45e3e01cdc4a38a52f112f2a9094ba/afa53eaae3254628bfb9f4499232d026-a5eb420ed8725cc8ca8e05545e274b0b-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><blockquote>\n<p>注意：在这个视频中，我是直接在tcpdump窗口里解读抓包结果的，而在下面我们是用Wireshark来解读，思路其实是一样的，只是操作方式略有不同，正好你可以都学习一下。</p>\n</blockquote><p>第一步，在服务端，执行下面的这条命令，让iptables静默丢弃掉发往自己80端口的数据包：</p><pre><code class=\"language-plain\">iptables -I INPUT -p tcp --dport 80 -j DROP\n</code></pre><p>第二步，在客户端启动tcpdump抓包：</p><pre><code class=\"language-plain\">sudo tcpdump -i any -w telnet-80.pcap port 80\n</code></pre><p>第三步，从客户端发起一次telnet：</p><pre><code class=\"language-plain\">telnet 服务端IP 80\n</code></pre><p>这个时候，这个telnet会挂起：</p><p><img src=\"https://static001.geekbang.org/resource/image/be/79/bea7a95e1c15c9abcd6d14bcb2a90979.jpg?wh=644x104\" alt=\"\"></p><p>大约一两分钟后才会失败退出，你随后就会明白背后发生了什么。</p><p>这时，你可以把客户端的tcpdump停掉了（按下Ctrl+C）。然后用Wireshark打开这个抓包文件，看看里面是什么：</p><p><img src=\"https://static001.geekbang.org/resource/image/55/8d/552e7cb1263ffe018c3bc5cf946b3f8d.jpg?wh=1740x330\" alt=\"\"></p><p>telnet挂起的原因就在这里：<strong>握手请求一直没成功</strong>。客户端一共有7个SYN包发出，或者说，除了第一次SYN，后续还有6次重试。客户端当然也不是“傻子”，这么多次都失败，就放弃了连接尝试，把失败的消息传递给了用户空间程序，然后就是telnet退出。</p><p>这里有个信息很值得我们关注。第二列是数据包之间的时间间隔，也就是1秒，2秒，4.2秒，8.2秒，16.1秒，33秒，每个间隔是上一个的<strong>两倍</strong>左右。到第6次重试失败后，客户端就彻底放弃了。</p><p>显然，这里的翻倍时间，就是“<strong>指数退避</strong>”（<a href=\"https://en.wikipedia.org/wiki/Exponential_backoff\">Exponential backoff</a>）原则的体现。这里的时间不是精确的整秒，因为指数退避原则本身就不建议在精确的整秒做重试，最好是有所浮动，这样可以让重试成功的机会变得更大一些。</p><p>这里实际上也是一个知识点了：<strong>TCP握手没响应的话，操作系统会做重试</strong>。在Linux中，这个设置是由内核参数net.ipv4.tcp_syn_retries控制的，默认值为6，也就是我们前面刚观察到的现象。以下就是我的Ubuntu 20.04测试机的配置：</p><pre><code class=\"language-plain\">$ sudo sysctl net.ipv4.tcp_syn_retries\nnet.ipv4.tcp_syn_retries = 6\n</code></pre><p>还有另外好几个有关TCP重试的设置值，也都可以调整。更全面的内容呢，你可以直接<strong>man tcp</strong>，查看tcp的内核手册的信息。比如下面就是对于tcp_syn_retries的解释：</p><pre><code class=\"language-plain\">tcp_syn_retries (integer; default: 5; since Linux 2.2)\n&nbsp; &nbsp; &nbsp; &nbsp;The&nbsp; maximum&nbsp; number of times initial SYNs for an active TCP connection attempt will be retransmitted.&nbsp; This value should not be higher than 255.&nbsp; The default value is 5, which corresponds to approximately 180 seconds.\n</code></pre><p>既然静默丢包会引起客户端空等待的问题，那我们直接拒绝，应该就能解决这个问题了吧？</p><p>正好，iptables的规则动作有好几种，前面我们用DROP，那这次我们用REJECT，这应该能让客户端立刻退出了。执行下面的这条命令，让iptables拒绝发到80端口的数据包：</p><pre><code class=\"language-plain\">iptables -I INPUT -p tcp --dport 80 -j REJECT\n</code></pre><p>跟前面的实验一样，我们在客户端发起telnet 服务端IP 80。果然，telnet立刻退出，显示：</p><pre><code class=\"language-plain\">$ telnet 47.94.129.219 80\nTrying 47.94.129.219...\ntelnet: connect to address 47.94.129.219: Connection refused\ntelnet: Unable to connect to remote host\n</code></pre><p>可见，连接请求确实被拒绝了。我在telnet同时也抓了包，我们来看一下抓包文件：</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/36/cd7228b8a38ec807263d980d5887d136.jpg?wh=1556x184\" alt=\"\"></p><p>奇怪，抓包文件里并没有期望的TCP RST？是我们抓包命令没写对吗？下面是这条命令，你已经初步学过tcpdump抓包命令了，看看有没有什么问题？</p><pre><code class=\"language-plain\">sudo tcpdump -i any -w telnet-80-reject.pcap host 47.94.129.219 and port 80\n</code></pre><p>命令语法没问题，要不然命令都无法执行。那过滤条件呢？指定了远端IP和端口，这是很常见的用法，应该也没什么问题。</p><p>但是，<strong>这里隐藏了一个假设的前提</strong>，也就是我们认为，这次握手的所有过程都是通过这个80端口进行的。但事实上呢？我们稍微改一下抓包条件，只保留远端IP，去掉端口的限制：</p><pre><code class=\"language-plain\">sudo tcpdump -i any -w telnet-80-reject.pcap host 47.94.129.219\n</code></pre><p>然后再来看看，我们抓到的报文是怎样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/83/e2b17ee170d80dbdbb0efb9d0828a183.jpg?wh=1542x126\" alt=\"\"></p><p>很意外，居然对端回复了一个<strong>ICMP消息：Destination unreachable (Port unreachable)</strong>。这还不是最意外的，我们选中这个报文，进一步看它的详情，可能会更惊讶：</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/e9/1e63ce285a59f917149d4d55fed5a1e9.jpg?wh=1646x1200\" alt=\"\"></p><p>原来，这个ICMP消息不仅通过type=3表示，这是一个“端口不可达”的错误消息，而且在它的payload里面，还携带了完整的TCP握手包的信息。而这个握手包，可是客户端发过来的。</p><blockquote>\n<p>补充一下：如果我们回头再检查一下前面生成的iptables规则，它是这样的：</p>\n</blockquote><pre><code>-A INPUT -p tcp -m tcp --dport 80 -j REJECT --reject-with icmp-port-unreachable\n</code></pre><blockquote>\n<p>原来，它自动补上了–reject-with icmp-port-unreachable，也就是说确实用ICMP消息做了回复。当然，你还可以把这个动作定义为–reject-with tcp-reset，那样的话就符合我们一开始的期望了。<br>\n&nbsp;<br>\n事实上，无论是收到TCP RST还是ICMP port unreachable消息，客户端的connect()调用都是返回ECONNREFUSED，这就是telnet都报“connection refused”的深层次原因。</p>\n</blockquote><p>所以，这个握手失败的情况终于搞清楚了，它是这么发生的：</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/29/3af3ae7d7ed9a6662dd66a6beafd1829.jpg?wh=2000x702\" alt=\"\"></p><p>TCP握手拒绝这个事，竟然可以是<strong>ICMP报文</strong>来达成的。“握手过程用TCP协议做沟通”，看起来这么理所当然的事情居然也会反转，你是不是也有点自我怀疑了：是不是其他网络知识，也未必是我自己认为的那样呢？</p><p>这个知识点，其实是几年前我在处理一个客户的TCP连接问题时遇到的。剧情么，前面已经给你“演”过一遍了。当时我也深感TCP的水太深，快没过脖子了，甚至有点喘不过气来……从此以后，我再也不敢小看任何知识点，同时也领教了tcpdump和Wireshark在网络分析方面的威力。有了这两个大杀器的帮助，我的网络水平提高很快。这个经验我也分享给你，相信你也一定能从中受益。</p><h2>Windows服务器加域报RPC service unavailable?</h2><p>虽然tcpdump + Wireshark的组合威力强大，但用起来总是会稍微花点时间。<strong>有没有不用抓包分析，也能做排查TCP连接问题的方法呢？</strong>这样也好快一点啊。接下来这个例子，就是这样的。</p><p>我们eBay也有不少Windows服务器，这些机器都由Active Directory（简称AD）管理。有一次，我们有一台Windows服务器加入AD失败，相关同事已经排查了好久，一直没找到原因。操作过程就是最普通的加域动作：</p><p><img src=\"https://static001.geekbang.org/resource/image/76/aa/76770d2be1c188dfafd69c906cb5b1aa.jpg?wh=325x365\" alt=\"\"></p><p>然后，一开始显示加域成功，但是过一两分钟后，又会来个“回马枪”，冒出来一个The RPC server is unavailable的报错：</p><p><img src=\"https://static001.geekbang.org/resource/image/59/7f/59793b82eyy0e8855e1879e5943f057f.jpg?wh=255x138\" alt=\"\"></p><p>在Windows的体系里面，这个报错大体意思是连不上RPC服务器。同事检查过RPC服务端并没有问题，然后其他Windows客户端加域呢，也都正常，唯独这台就不行。</p><p>单独一台机器加不了域，本身也不是特别大的麻烦，但是同事还是想找一下根因，于是就让我帮忙。很幸运，当时我只用了大概十分钟就找到了原因（这里我有点不谦虚了，我对你扔过来的鸡蛋和番茄表示接受）。</p><p>这倒不是我对Windows多么精通，<strong>主要是正确的排查思路帮助了我</strong>。给你分享一下我当时的思路：</p><ol>\n<li>既然报错是RPC unavailable，那可能意味着有一个RPC服务没有得到响应。</li>\n<li>没有得到服务端的响应，那多半是跟网络有关系，特别是跟端口的连通性有关系。</li>\n<li>要知道，RPC使用的是动态端口，每次连接都可能连接到不同的服务端口。所以，我也<strong>没办法预先知道是具体哪几个端口</strong>，如果我知道的话，直接找防火墙团队去把那几个服务端口打开就好了，但这个做不到。这一点也是同事卡了许久的原因之一，他也不知道如何找到这些“动态会变的RPC端口”。</li>\n<li>要找到<strong>实时在用</strong>的动态RPC端口，最方便的方法就是<strong>运行netstat命令</strong>。无论连接是处在什么状态，比如是在传输数据的ESTABLISHED状态、新近关闭端口的TIME_WAIT状态，都可以用netstat命令看到。</li>\n<li>我运行了netstat，在当时的命令输出中，我注意到有一个 <strong>SYN_SENT状态</strong>的连接，它要连的就是服务端的一个高端口。</li>\n</ol><p>那么，这个SYN_SENT状态究竟说明了什么呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/bd/46/bdd5af2530ef0b810863947af22be046.jpg?wh=633x23\" alt=\"\"></p><p>SYN_SENT是TCP的11个状态之一。要理解SYN_SENT的含义，我们首先要把整个TCP状态机的机制搞清楚。关于TCP状态机，目前流传比较广的是下面这张图。我没有考证过这张图的出处，不过在Stevens的<a href=\"https://book.douban.com/subject/4859464\">《UNIX网络编程：套接字联网API》</a>里就有这张图，很有可能最早就是来自于Stevens：</p><p><img src=\"https://static001.geekbang.org/resource/image/69/55/6918091f084186bb968180c2e7aacf55.jpg?wh=754x858\" alt=\"\"></p><p>这张图浓缩了TCP状态转换的所有知识点，确实值得反复研读。不过，我鸡蛋里挑个骨头：这张图也有个小小的问题，就是对于初学者来说，它并不容易理解。</p><p>比如，多年前我自己在学习TCP的时候，就一直没有彻底看懂这张图。好笑的是，我经常假装自己看懂了，还拿这张图跟别人侃侃而谈，而对方还被我唬住了呢。所以你也要学会了：当大家都不是很懂的时候，你对自己的话越相信，你就越有说服力哦。</p><p>好了，当然是跟你开个玩笑，做学问还是要严谨。那么，这张图的难点在哪呢？我觉得主要是视角不固定，一会是发送方，一会是接收方，对初学者来说很容易混淆。实际上，在Stevens的这本书中，还有另外一张图，我认为更加清晰明了，也是我想推荐给你的：</p><p><img src=\"https://static001.geekbang.org/resource/image/4b/99/4b5dbdf4365d467cce222c9cf6707099.jpg?wh=607x513\" alt=\"\"></p><p>在上面这张图里，无论是客户端还是服务端，我们从上往下看，它要经历的各个TCP状态，都展示得十分清楚。我把这个过程解读如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/ec/ce/ec2f7ee67f560420bced033059c31ece.jpg?wh=2000x1125\" alt=\"\"></p><p>后续的过程，不用我继续解读，你也会看得很清楚了：<strong>分别沿着左边和右边的垂直线从上往下看，就经历了客户端和服务端的TCP生命周期里的各种状态</strong>，这个过程中，视角保持一致。你觉得是否比前面那张转换图，更加容易理解呢？</p><p>看懂了这张图，你应该就明白了：SYN_SENT这个状态，意味着当时这个连接请求（SYN包），已经从这台Windows服务器发出，试图跟远端的AD域控制器进行连接。但由于对端迟迟没有回应SYN+ACK报文，那么客户端这个连接的状态，就只能“停留”在SYN_SENT状态，无法转化为ESTABLISHED状态。</p><p>等到达了SYN timeout时间后，Windows操作系统会放弃这次连接，而这个SYN_SENT状态的连接也会消失不见。所以，前面提到的“<strong>实时</strong>”两字，也是很关键的。如果不是在问题发生时运行netstat，哪怕是过了几分钟再去运行netstat，错过了这个SYN_SENT，我也不能发现这个失败的TCP连接企图，也就无法定位到真正的原因了。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/18/8357d8df335042e2d781f540c9e85a18.jpg?wh=2000x920\" alt=\"\"></p><p>然后我们拿着这个端口去找防火墙团队，对方检查了配置，发现这个端口确实是禁止的。在开通后，问题就解决了。</p><p>所以说，<strong>真的不要小看任何知识点和小工具，你掌握以后，完全可以起到关键性的作用</strong>（对了，排查防火墙也时常是我们工作的痛点，我在第5和第6讲会专门讲解这方面的排查技巧，敬请期待）。</p><p>这里还有一个技术点我想给你展开一下。我们在前面已经讨论过了SYN重试的问题，显然，这次Windows的SYN_SENT的背后，我们相信，应该也是有数次的SYN重试的情况。同时，因为我观察到，这个SYN_SENT停留了大约有十几二十秒，所以我判断应该也有指数退避的存在，所以这个状态才保留了那么长时间。</p><p>也就是说，无论是Linux还是Windows，都实现了类似的TCP握手方面的容错手段。还是那句话：设计网络不容易。<strong>理解了设计者的初心</strong>，很多问题就不会那么模糊了，可能你一下子就能看清。</p><h2>发送的数据还能超过接收窗口？</h2><p>最后一个案例表面上并不直接跟握手相关，但背地里就……不剧透了，看剧情。</p><p>前段时间，有个朋友找到我咨询一个问题。他们最近处理了一个Redis相关的技术问题，让他们既开心又“闹心”。开心的是整体分析是正确的，问题也得以解决；“闹心”的是，唯独有个技术点好像无法自圆其说，所以想让我看看到底是怎么回事。</p><p>这个问题是：Redis服务告诉客户端它的接收窗口是190字节，但是客户端居然会发送308字节，<strong>大大超出了接收窗口</strong>。下图是他们用Wireshark打开抓包文件后的界面：</p><p><img src=\"https://static001.geekbang.org/resource/image/10/yy/1042be623e0390e3c96a9675a73a45yy.jpg?wh=2122x522\" alt=\"\"></p><p>我一开始也懵了：难道TCP的深水又到我脖子这儿了？在我多年的抓包分析经历中，数据超过接收窗口的情况，好像还没有遇到过，这次算是TCP准备再次让我“开开眼”吗？</p><p>不过我很快又稳定了下来，因为我想到了一个朋友他们没有注意到的细节。在说到TCP窗口的时候，一般都会提到一个很重要的概念：<strong>Window Scale</strong>。这是因为，TCP最初是七八十年代的产物，1981年9月定稿的<a href=\"https://datatracker.ietf.org/doc/html/rfc793\">RFC793</a>才第一次正式确定了TCP的标准。当时的网络带宽还处于“石器时代”，机器的带宽只有现在的百分之一，那么TCP接收窗口自然也没必要很大，2个字节长度代表的65535字节的窗口足矣。</p><p>但是后来网络带宽越来越大，65535字节的窗口慢慢就不够用了，于是设计者们又想出了一个巧妙的办法。原先的Window字段还是保持不变，在TCP扩展部分也就是TCP Options里面，增加一个Window Scale的字段，它表示原始Window值的左移位数，最高可以左移14位。</p><p>如果你还没有完全忘记计算机课的基本知识，那么应该明白这是一个非常大的提升了（扩大了2的14次方，即16384倍）。16384乘以65535，这个数字就是1G字节，也就是说，一个启用了Window Scale特性的TCP连接，最大的接收窗口可以达到1GB。可以说，这个数字至今都是够用的。</p><p>说了这么多，我们用Wireshark来看看它究竟长啥样。找一个包含了SYN报文的抓包文件，选中SYN报文，在Wireshark窗口中部找到TCP的部分，展开Options就能看到了：</p><p><img src=\"https://static001.geekbang.org/resource/image/88/17/8818106efb1bd4313928bd66302ef417.jpg?wh=865x626\" alt=\"\"></p><p>我们逐一理解下。</p><ul>\n<li>Kind：这个值是3，每个TCP Option都有自己的编号，3代表这是Window Scale类型。</li>\n<li>Length：3字节，含Kind、Length（自己）、Shift count。</li>\n<li>Shift count：6，也就是我们最为关心的窗口将要被左移的位数，2的6次方就是64。</li>\n</ul><blockquote>\n<p>小小提醒：SYN包里的Window是不会被Scale放大的，只有握手后的报文才会。</p>\n</blockquote><p>当然，TCP的窗口也是TCP知识体系里一块挺大的分支领域，我会在当前这个“实战一”模块的传输效率部分，也就是第9~11讲里，详细讲解这方面的知识，帮你把这块的东西真正搞透。</p><p>回到握手。既然Window Scale这么有用，那每个TCP报文应该都是带上这个信息的吧，因为它在TCP头部里面嘛，而每个TCP报文都有头部的，不是吗？</p><p>你要这样想就错了。事实上，Window Scale只出现在TCP握手里面。你再想想就明白了：这个是“控制面”的信息，说一次让双方明白就够了，每次都说，不光显得“话痨”，也很浪费带宽啊。一般传输过程中的报文，完全不需要再浪费这3个字节来传送一个已经同步过的信息。所以，握手之后的TCP报文里面，是不带Window Scale的。</p><p>比如，我们来看一个抓取到握手阶段的抓包文件。下图是客户端在数据传输阶段发送的报文，它是一个TLS Client Hello报文。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/fe/b8b79b774695579a065b2da5f62a33fe.jpg?wh=1478x800\" alt=\"\"></p><p>可见，原始窗口502字节，放大128倍后就是64256字节了。</p><p>说到这里，想必你已经明白了：我朋友这次的疑惑，其实就是<strong>缺少TCP握手包</strong>造成的。要知道，Wireshark也一样要依赖握手包，才能了解到这次连接用的Window Scale值，然后才好在原始Window值的基础上，对Window值进行左移（放大），得出真正的窗口值。于是，因为这次他们的抓包没有抓取到握手报文，所以Wireshark里看到的窗口，就是190字节，而不是190字节的某个倍数了！</p><p>当时通信的另一端当然知道这个信息，所以它发送308字节一点都不意外，因为这个值根本就没超出接收窗口。</p><p>那么，<strong>是不是没有抓取到握手包的话，Wireshark里读取到的Window就一定不对呢？</strong>大部分时候是这样的。不过，还有一部分老系统的TCP栈并没有启用Window Scale，那么抓包文件中有没有握手包都没关系，只要看基本Window就好了。</p><p>说到这里，你对TCP握手的印象，是不是又有改变呢？它简单，也丰富；它靠谱，也调皮。你只有真的读懂它，才不会被它牵着鼻子走。而读懂它的方法是什么呢？</p><p>就是多读些TCP理论，就是多做些抓包分析，就是多处理些案例，更是多走走，多看看。只要有心，你总有机会可以学会，可以成长。</p><h2>小结</h2><p>作为这个模块的第一课，这次我们围绕TCP握手展开了几个有趣的案例，并从中梳理了以下知识点：</p><ol>\n<li>客户端发起的连接请求可能因为各种原因没有回复，这时客户端会做<strong>重试</strong>。一般在Linux里，重试次数默认是6次，内核参数是net.ipv4.tcp_syn_retries。重试间隔遵循了<strong>指数退避原则</strong>。</li>\n<li>服务端拒绝TCP握手，除了用TCP RST，另外一种方式是通过<strong>ICMP Destination unreachable（Port unreachable）消息</strong>。从客户端应用程序看，这两种回复都属于“对端拒绝”，所以应用表面看不出区别，但我们在抓包的时候要注意，如果单纯抓取服务端口的报文，就会漏过这个ICMP消息，可能对排查不利。</li>\n<li>对于连通性相关的问题，除了用tcpdump+Wireshark这个黄金组合，我们还可以在理解TCP握手原理的基础上，使用小工具（比如netstat）来排查。特别是对于RPC服务场景，在问题发生时及时<strong>执行netstat -ant，找到SYN_SENT状态的连接</strong>，这个很可能是突破口。</li>\n<li>我们也学习了如何在Wireshark中查看Window Scale。握手包中的Window Scale信息十分重要，这会帮助我们知道正确的接收窗口。在分析抓包文件时，<strong>要注意是否连接的握手包被抓取到</strong>，没有握手包，这个Window值一般就不准。</li>\n</ol><p>可以说，<strong>应用都靠连接，连接都靠握手。</strong>掌握好了握手，你的TCP就算入门了。学完这节课之后，你有没有觉得，今天的你比昨天的你，要强一些了呢？加油！后面更多的知识在等你来发现。</p><h2>思考题</h2><p>最后，还是按照惯例，还是给你留几道思考题：</p><ol>\n<li>在Linux中，还有一个内核参数也是关于握手的，net.ipv4.tcp_synack_retries。你知道这个参数是用来做什么的吗？</li>\n<li>如果握手双方，一方支持Window Scale，一方不支持，那么在这个连接里，Window Scale最终会被启用吗？你可以参考<a href=\"https://datatracker.ietf.org/doc/html/rfc1323\">RFC1323</a>，给出你的解答。</li>\n</ol><p>欢迎在留言区分享你的答案，如果觉得有收获，也欢迎你把今天的内容分享给更多的朋友。</p><h2>扩展知识：聊聊几个常见误区</h2><p>很多时候，我们的成长不仅是由于学到了正确的知识，更是由于纠正了“错误的认知”。下面列几个常见误区，你看看自己有没有“中招”。</p><h3>UDP也有握手?</h3><p>有些同学会有这个误解，可能是跟nc这个命令有关。我们来看一个TCP端口22的测试：</p><pre><code class=\"language-plain\">victor@victorebpf:~$ nc -v -w 2 47.94.129.219 22\nConnection to 47.94.129.219 22 port [tcp/ssh] succeeded!\n</code></pre><p>同一时间的tcpdump抓包，显示这个TCP经历了成功的握手和挥手：</p><pre><code class=\"language-plain\">$ sudo tcpdump -i any host 47.94.129.219\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on any, link-type LINUX_SLL (Linux cooked v1), capture size 262144 bytes\n11:58:10.749372 IP victorebpf.51072 &gt; 47.94.129.219.ssh: Flags [S], seq 966857509, win 64240, options [mss 1460,sackOK,TS val 1565897461 ecr 0,nop,wscale 7], length 0\n11:58:10.781734 IP 47.94.129.219.ssh &gt; victorebpf.51072: Flags [S.], seq 3170176001, ack 966857510, win 65535, options [mss 1460], length 0\n11:58:10.781880 IP victorebpf.51072 &gt; 47.94.129.219.ssh: Flags [.], ack 1, win 64240, length 0\n11:58:10.782344 IP victorebpf.51072 &gt; 47.94.129.219.ssh: Flags [F.], seq 1, ack 1, win 64240, length 0\n11:58:10.782586 IP 47.94.129.219.ssh &gt; victorebpf.51072: Flags [.], ack 2, win 65535, length 0\n11:58:10.821202 IP 47.94.129.219.ssh &gt; victorebpf.51072: Flags [P.], seq 1:42, ack 2, win 65535, length 41\n11:58:10.821292 IP victorebpf.51072 &gt; 47.94.129.219.ssh: Flags [R], seq 966857511, win 0, length 0\n</code></pre><p>如果我们用nc测试 <strong>UDP</strong> 22端口，看看会发生什么。注意，UDP 22是没有服务在监听的。但是nc一样告诉我们succeeded！这似乎在告诉我们，这个UDP 22端口确实是在监听的：</p><pre><code class=\"language-plain\">$ nc -v -w 2 47.94.129.219 22\nConnection to 47.94.129.219 22 port [tcp/ssh] succeeded!\nvictor@victorebpf:~$ nc -v -w 2 47.94.129.219 -u 22\nConnection to 47.94.129.219 22 port [udp/*] succeeded!\n</code></pre><p>同一时间的抓包，显示客户端发送了4个UDP报文，但服务端没有任何回复：</p><pre><code class=\"language-plain\">11:59:05.605556 IP victorebpf.54145 &gt; 47.94.129.219.22: UDP, length 1\n11:59:05.605995 IP victorebpf.54145 &gt; 47.94.129.219.22: UDP, length 1\n11:59:06.606436 IP victorebpf.54145 &gt; 47.94.129.219.22: UDP, length 1\n11:59:07.607134 IP victorebpf.54145 &gt; 47.94.129.219.22: UDP, length 1\n</code></pre><p>从表象上看，nc告诉我们：这个跟UDP 22端口的“连接”是成功的，这是nc的Bug吗？可能并不算是。原因就在于，<strong>UDP本身不是面向连接的</strong>，所以没有一个确定的UDP协议层面的“答复”。这种答复，需要由调用UDP的应用程序自己去实现。</p><p>那为什么在这里，nc还是要告诉我们成功呢？可能只是因为对端没有回复ICMP port unreachable。nc的逻辑是：</p><ul>\n<li>对于UDP来说，除非明确拒绝，否则可视为“连通”；</li>\n<li>对TCP来说，除非明确接受，否则视为“不连通”。</li>\n</ul><p>所以，当你下次用nc探测UDP端口，不通的结果是可信的，而能通（succeeded）的结果并不准确，只能作为参考。</p><h3>一台机器最多65535个TCP连接?</h3><p>这也是很常见的误区了。我还是小白的时候，也曾经深信不疑。当时读到一篇讨论服务器可以承受多少TCP连接（就是C10k问题）的文章时，还觉得奇怪，不是端口范围只有0~65535吗？为什么还会有几十万上百万连接呢？</p><p>这就是没有意识到，连接是四元组（咱们在<a href=\"https://time.geekbang.org/column/article/477510\">第一节课</a>讲到过），并不是单纯的源端口或者目的端口。那么多个数相乘，这个乘积当然可以远远超过65535了。先不谈论海量级网站的场景，就算我们维护一台Web服务器，假如当前有10万台客户端连着你，平均每个客户端跟你有6个连接（这很常见），那么就是60万个连接了，是不是也早就超过6万了？</p><p>当然，在限定场景下，一个客户端（假设只有一个出口IP）和一个服务端（假设也只有一个IP和一个服务端口），那么确实只能最多发起6万多个连接。但你自己也已经明白，这跟前面的误解，已经是两回事了。</p><h3>不能同时发起握手?</h3><p>如果两端同时发送了SYN给对方，也就是双方都收到了一个SYN，那么接下来，它们会进入什么状态呢？你可能觉得这应该不行。</p><p>其实，通信双方还真的可以同时向对方发送SYN，也能建立起连接。你可以参考这节课里我提到的<strong>TCP状态转换图</strong>。在Richard Stevens的<a href=\"https://book.douban.com/subject/1088054\">《TCP/IP详解（第一卷）》</a>里，也提到了这个知识点，参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/02/12/0218c45cf90c06983e6e0fa6211f6912.jpg?wh=1384x614\" alt=\"\"></p><p>当然，这种情况是很罕见的，你可以参考一下，也丰富一下你对TCP握手的理解。</p>","comments":[{"had_liked":false,"id":331191,"user_name":"某人","can_delete":false,"product_type":"c1","uid":1364940,"ip_address":"","ucode":"0FF93D71D567E7","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/cc/bc01a9ef.jpg","comment_is_top":false,"comment_ctime":1642478854,"is_pvip":false,"replies":[{"id":"121027","content":"假设这样一个场景：<br>1. 接收端有个定时任务，比如每隔1秒、2秒、4秒。。。这样反复运行，正好发送端的SYN包卡在第1秒，因为定时任务占用了全部CPU资源，导致SYN+ACK没有及时发出<br>2. 发送端接着正好也卡着2秒、4秒。。。这种时间点，每次都赶上对端那个定时任务，所以每次SYN都没有响应<br>3. 握手失败<br><br>这就是双方都精确翻倍的话，可能遇到的问题。同样的道理，对于一般的应用逻辑，其“重试”也最好是随机时间，或者是翻倍时间附近有一定的浮动，这样可以避免每次都“撞车”。不知道我这样说清楚没有：）","user_name":"作者回复","comment_id":331191,"uid":"1662117","ip_address":"","utype":1,"ctime":1642510543,"user_name_real":"编辑"}],"discussion_count":4,"race_medal":0,"score":"78951890182","product_id":100104301,"comment_content":"数退避原则本身就不建议在精确的整秒做重试，为什么？","like_count":19,"discussions":[{"author":{"id":1029328,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b4/d0/8c5756be.jpg","nickname":"湘问海","note":"","ucode":"620592602C0E3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547397,"discussion_content":"不是精确整秒的问题，而是不能每次都一样……错位重试的成功率会高很多","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1642657175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":1029328,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b4/d0/8c5756be.jpg","nickname":"湘问海","note":"","ucode":"620592602C0E3A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549553,"discussion_content":"是的，这个做法在应用程序开发里也会用到~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644073616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547397,"ip_address":""},"score":549553,"extra":""}]},{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547057,"discussion_content":"假设这样一个场景：\n1. 接收端有个定时任务，比如每隔1秒、2秒、4秒。。。这样反复运行，正好发送端的SYN包卡在第1秒，因为定时任务占用了全部CPU资源，导致SYN+ACK没有及时发出\n2. 发送端接着正好也卡着2秒、4秒。。。这种时间点，每次都赶上对端那个定时任务，所以每次SYN都没有响应\n3. 握手失败\n\n这就是双方都精确翻倍的话，可能遇到的问题。同样的道理，对于一般的应用逻辑，其“重试”也最好是随机时间，或者是翻倍时间附近有一定的浮动，这样可以避免每次都“撞车”。不知道我这样说清楚没有：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642510543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581315,"discussion_content":"如果是客户端请求多, 后台压力大,  客户端一块1秒失败,  客户端一块2秒重试接着失败, 如果有错位, 就还有机会成功.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658719876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333543,"user_name":"MeowTvづ","can_delete":false,"product_type":"c1","uid":2406152,"ip_address":"","ucode":"0155231D61D6A7","user_header":"https://static001.geekbang.org/account/avatar/00/24/b7/08/a6493073.jpg","comment_is_top":false,"comment_ctime":1644400113,"is_pvip":true,"replies":[{"id":"122493","content":"是的，所以C10K, C100K等经典问题就是讨论了这个主题~","user_name":"作者回复","comment_id":333543,"uid":"1662117","ip_address":"","utype":1,"ctime":1645516980,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"31709171185","product_id":100104301,"comment_content":"对于服务器端最多65535确实是个误区，其实这个跟很多都有关系的，比如服务器端的CPU、内存、fd数以及连接的情况，fd数是前提。一个连接会牵扯到服务端的接收缓冲区(net.ipv4.tcp_rmem)以及发送缓冲区(net.ipv4.tcp_wmem)，一个空的TCP连接会消耗3.3KB左右的内存，如果发数据的话，一个连接占用的内存会更大。所以理论上4GB的机器理论上支持的空TCP连接可以达到100W个。此外数据经过内核协议栈的处理需要CPU，所以CPU的好坏也会影响连接数。","like_count":8,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552582,"discussion_content":"是的，所以C10K, C100K等经典问题就是讨论了这个主题~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645516980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331637,"user_name":"Geek_cad238","can_delete":false,"product_type":"c1","uid":2897882,"ip_address":"","ucode":"E0B3979565886F","user_header":"","comment_is_top":false,"comment_ctime":1642681103,"is_pvip":false,"replies":[{"id":"121154","content":"👍林老师是这方面的先行者，非常厉害！","user_name":"作者回复","comment_id":331637,"uid":"1662117","ip_address":"","utype":1,"ctime":1642732657,"user_name_real":"作者"}],"discussion_count":3,"race_medal":0,"score":"31707452175","product_id":100104301,"comment_content":"其实Window Scale是常识，并不是冷门，😂，关于这个，在林沛满大佬的《wireshark网络分析就这么简单》一书里有详细说明，大家可以一看。","like_count":8,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547521,"discussion_content":"👍林老师是这方面的先行者，非常厉害！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642732657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391143,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","nickname":"八台上","note":"","ucode":"FB3D74B522C720","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577147,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655950059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363671,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","nickname":"不负青春不负己🤘","note":"","ucode":"A6DD8E8B20EA6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576087,"discussion_content":"M","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655274744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331636,"user_name":"魏玉会 Gabby","can_delete":false,"product_type":"c1","uid":1923990,"ip_address":"","ucode":"4D6D8FB1895B53","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/96/57d4970d.jpg","comment_is_top":false,"comment_ctime":1642680780,"is_pvip":false,"replies":[{"id":"121155","content":"对我也是很好的鼓励，大家一起加油：）","user_name":"作者回复","comment_id":331636,"uid":"1662117","ip_address":"","utype":1,"ctime":1642732681,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"18822549964","product_id":100104301,"comment_content":"老师讲的真好，我一个前端人员也能看的懂","like_count":5,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547522,"discussion_content":"对我也是很好的鼓励，大家一起加油：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642732681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331141,"user_name":"首富手记","can_delete":false,"product_type":"c1","uid":1286588,"ip_address":"","ucode":"879DED4078303C","user_header":"https://static001.geekbang.org/account/avatar/00/13/a1/bc/ef0f26fa.jpg","comment_is_top":false,"comment_ctime":1642458770,"is_pvip":true,"replies":[{"id":"121032","content":"嗯 6万多连接是纯理论的讨论，从TCP协议规范来说，最大确实有这么大。操作系统也在进化，在很早以前，1024以上的端口都可以用作动态源端口，但现在确实窄了很多了。<br>理论知识（比如TCP的端口最大范围），现实知识（比如当前linux普遍支持的local port range）并不矛盾，也最好都知道。","user_name":"作者回复","comment_id":331141,"uid":"1662117","ip_address":"","utype":1,"ctime":1642512645,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"18822327954","product_id":100104301,"comment_content":"一个客户端（假设只有一个出口 IP）和一个服务端（假设也只有一个 IP 和一个服务端口），那么确实只能最多发起 6 万多个连接。针对这句话，在centos 和ubuntu系统默认的情况下，tcp是没有办法建立起6万多个链接的，因为 net.ipv4.ip_local_port_range 这个参数固定了机器当做client 发起请求的时候使用的端口范围，所以默认的情况下，单向智能建立28231 个链接，这个是我们真实生产服务器上发生过的问题；<br>因为程序释放tcp有问题，所以机器上的timewite 过多，然后把这两万多个端口用完了，导致了服务之间链接异常；","like_count":5,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547063,"discussion_content":"嗯 6万多连接是纯理论的讨论，从TCP协议规范来说，最大确实有这么大。操作系统也在进化，在很早以前，1024以上的端口都可以用作动态源端口，但现在确实窄了很多了。\n理论知识（比如TCP的端口最大范围），现实知识（比如当前linux普遍支持的local port range）并不矛盾，也最好都知道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642512645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337784,"user_name":"steven","can_delete":false,"product_type":"c1","uid":1560619,"ip_address":"","ucode":"3F5231607CB40E","user_header":"https://static001.geekbang.org/account/avatar/00/17/d0/2b/c571c59f.jpg","comment_is_top":false,"comment_ctime":1647062630,"is_pvip":true,"replies":[{"id":"123534","content":"对呀，握手期间，也就是发送SYN, SYN+ACK, ACK这段时间里，窗口是不放大的，也就是最大也只有65535。握手完成后也就是传输开始后，就可以应用这个放大系数了，跟你描述的现象很符合啊：）","user_name":"作者回复","comment_id":337784,"uid":"1662117","ip_address":"","utype":1,"ctime":1647158453,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14531964518","product_id":100104301,"comment_content":"在握手期间window是不会被scale放大的，但是我发现在传输过程中的window有260000+，但是握手的时候我客户端最大只有65535，服务端只有8000+，和我理解的有点不太一样呀","like_count":4,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555988,"discussion_content":"对呀，握手期间，也就是发送SYN, SYN+ACK, ACK这段时间里，窗口是不放大的，也就是最大也只有65535。握手完成后也就是传输开始后，就可以应用这个放大系数了，跟你描述的现象很符合啊：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647158453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331249,"user_name":"beanSeedling","can_delete":false,"product_type":"c1","uid":1623019,"ip_address":"","ucode":"66C46E399BC191","user_header":"https://static001.geekbang.org/account/avatar/00/18/c3/eb/528a1d68.jpg","comment_is_top":false,"comment_ctime":1642501176,"is_pvip":false,"replies":[{"id":"121026","content":"很好，也看得出来做了功课：）","user_name":"作者回复","comment_id":331249,"uid":"1662117","ip_address":"","utype":1,"ctime":1642510261,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14527403064","product_id":100104301,"comment_content":"<br>1.<br>第二次握手最大重传次数<br>tcp_synack_retries (integer; default: 5; since Linux 2.2)<br>              The maximum number of times a SYN&#47;ACK segment for a<br>              passive TCP connection will be retransmitted.  This number<br>              should not be higher than 255.<br>2.<br>This option is an offer, not a promise; both sides must send Window Scale options in their SYN segments to enable window scaling in either direction.<br>This option may be sent in an initial &lt;SYN&gt; segment (i.e., a segment with the SYN bit on and the ACK bit off).  It may also be sent in a &lt;SYN,ACK&gt; segment, but only if a Window Scale option was received in the initial &lt;SYN&gt; segment. <br>不会，从上诉RFC原文可以看出是必须双方都支持Window Scale，才会启用<br>","like_count":3,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547056,"discussion_content":"很好，也看得出来做了功课：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642510262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331654,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1642688209,"is_pvip":true,"replies":[{"id":"121435","content":"这个问题有意思，我找个时间搭个环境测试一下。不过我推测，有可能其中几次是TCP retransmission，是syn_retries控制次数以外的~","user_name":"作者回复","comment_id":331654,"uid":"1662117","ip_address":"","utype":1,"ctime":1643214046,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"10232622801","product_id":100104301,"comment_content":"CentOS Linux release 7.6 , net.ipv4.tcp_syn_retries = 6  设置静默丢包，客户端重试的时候，发现尝试了 11次，前5次是每隔1s 后面几次就根据指数退避原则了，我这个环境为什么会多了 4次呢？","like_count":2,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548498,"discussion_content":"这个问题有意思，我找个时间搭个环境测试一下。不过我推测，有可能其中几次是TCP retransmission，是syn_retries控制次数以外的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643214046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521568,"avatar":"https://static001.geekbang.org/account/avatar/00/17/37/a0/032d0828.jpg","nickname":"上杉夏香","note":"","ucode":"9FDDE0979BCC8C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577419,"discussion_content":"我的是mac，也是重试了11次，时间间隔与层主一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656086819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347747,"user_name":"Geek_0d1ecd","can_delete":false,"product_type":"c1","uid":3016433,"ip_address":"","ucode":"52408FFC56A857","user_header":"","comment_is_top":false,"comment_ctime":1654395528,"is_pvip":false,"replies":[{"id":"126919","content":"谢谢支持！有具体的案例讨论的话，可以通过专栏首页的信息，加入学习讨论群~","user_name":"作者回复","comment_id":347747,"uid":"1662117","ip_address":"","utype":1,"ctime":1655021427,"user_name_real":"作者"}],"discussion_count":2,"race_medal":0,"score":"5949362824","product_id":100104301,"comment_content":"对我们7年运维，5年TAM静下心看还是收获满满，已经强推荐给伙伴，不介意加个微信，讨论下一个10年","like_count":1,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575677,"discussion_content":"谢谢支持！有具体的案例讨论的话，可以通过专栏首页的信息，加入学习讨论群~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655021428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363671,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","nickname":"不负青春不负己🤘","note":"","ucode":"A6DD8E8B20EA6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576088,"discussion_content":"没有找到学习讨论群的信息，在首页","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655275064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331144,"user_name":"氢气球","can_delete":false,"product_type":"c1","uid":2232313,"ip_address":"","ucode":"C77BD2A02F3794","user_header":"https://static001.geekbang.org/account/avatar/00/22/0f/f9/95d1537d.jpg","comment_is_top":false,"comment_ctime":1642463876,"is_pvip":true,"replies":[{"id":"121029","content":"坚持学习，一定有收获，我们一起进步！","user_name":"作者回复","comment_id":331144,"uid":"1662117","ip_address":"","utype":1,"ctime":1642510694,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5937431172","product_id":100104301,"comment_content":"老师讲的真好，收益匪浅！","like_count":1,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547060,"discussion_content":"坚持学习，一定有收获，我们一起进步！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642510694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331105,"user_name":"江山如画","can_delete":false,"product_type":"c1","uid":1188280,"ip_address":"","ucode":"BEB6228E6135B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/b8/aca814dd.jpg","comment_is_top":false,"comment_ctime":1642426644,"is_pvip":false,"replies":[{"id":"121272","content":"回答正确！<br>对于问题2，RFC1323的以下陈述可能更加明确一些：只有SYN里带这个option，那么接收端回复的SYN+ACK里才可以带上这个option；如果SYN里没有，SYN+ACK是不应该带这个option的（当然，因为客户度本身不支持，所以SYN+ACK带不带，效果都一样）：<br><br>This option may be sent in an initial &lt;SYN&gt; segment (i.e., a segment with the SYN bit on and the ACK bit off). It may also be sent in a &lt;SYN,ACK&gt; segment, but only if a Window Scale option was received in the initial &lt;SYN&gt; segment. A Window Scale option in a segment without a SYN bit should be ignored.","user_name":"作者回复","comment_id":331105,"uid":"1662117","ip_address":"","utype":1,"ctime":1642912022,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"5937393940","product_id":100104301,"comment_content":"问题1:<br>因为 net.ipv4.tcp_syn_retries 是三次握手的 SYN 包的重试次数，猜测 net.ipv4.tcp_synack_retries 是 SYN+ACK 包的重试次数，在 centos 上看了下，这个值默认是2.<br><br>问题2:<br>在RFC1332的2.2节 Window Scale Option中有一段 &quot;Upon receiving a SYN segment with a Window Scale option containing shift.cnt = S, a TCP sets Snd.Wind.Scale to S and sets Rcv.Wind.Scale to R; otherwise, it sets both Snd.Wind.Scale and Rcv.Wind.Scale to zero.&quot;<br><br>所以当通信双方一方支持 windows scale, 另一方不支持时，再之后的通信中，发送窗口和接口窗口的缩放比例都是0，相当于双方的 Shift Count 的值都是0.","like_count":2,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547855,"discussion_content":"回答正确！\n对于问题2，RFC1323的以下陈述可能更加明确一些：只有SYN里带这个option，那么接收端回复的SYN+ACK里才可以带上这个option；如果SYN里没有，SYN+ACK是不应该带这个option的（当然，因为客户度本身不支持，所以SYN+ACK带不带，效果都一样）：\n\nThis option may be sent in an initial &lt;SYN&gt; segment (i.e., a segment with the SYN bit on and the ACK bit off). It may also be sent in a &lt;SYN,ACK&gt; segment, but only if a Window Scale option was received in the initial &lt;SYN&gt; segment. A Window Scale option in a segment without a SYN bit should be ignored.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642912023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1188280,"avatar":"https://static001.geekbang.org/account/avatar/00/12/21/b8/aca814dd.jpg","nickname":"江山如画","note":"","ucode":"BEB6228E6135B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":547931,"discussion_content":"学习了，谢谢老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642942845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547855,"ip_address":""},"score":547931,"extra":""}]}]},{"had_liked":false,"id":331025,"user_name":"Barry Yan","can_delete":false,"product_type":"c1","uid":2415188,"ip_address":"","ucode":"739F505066AFE0","user_header":"https://static001.geekbang.org/account/avatar/00/24/da/54/feb32c3f.jpg","comment_is_top":false,"comment_ctime":1642384405,"is_pvip":false,"discussion_count":7,"race_medal":2,"score":"5937351701","product_id":100104301,"comment_content":"我看其他文章说<br>“最大 TCP 连接数 = 客户端 IP 数×客户端端口数。对于 IPv4，客户端的 IP 数最多为 2 的 32 次方，客户端的端口数最多为 2 的 16 次方，也就是服务端单机最大 TCP 连接数约为 2 的 48 次方。”<br>跟老师您文章里说的65535不太一样，我们都知道端口只能被一个进程使用，但是又能被多个线程连接，所以我想问下到底是哪个正确呢？","like_count":2,"discussions":[{"author":{"id":2401033,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJTQEV4friaCib0eOAuF8sA5hnDkccCMuZn5ibmrx5xoENzwRUKwId4O6rPRyOiaYgO2274SsEHglCsOw/132","nickname":"WEI","note":"","ucode":"8A086837D6BD48","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546697,"discussion_content":"您好，对于您的问题我的理解是老师这里说的65535指的是只站在服务端的目的端口这个维度考虑，并不考虑源ip,源端口和目的ip变化的情况下，由于一个ip的端口数范围是0~65535，所以只有这么多个连接。您反馈的这个就是在同时考虑源ip和源端口变化的情况下得出的数值，正是老师这里所说的连接要考虑的是四元组的，所以仅根据其中一个来确认连接数是不全面的，谢谢！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642395072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":2401033,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJTQEV4friaCib0eOAuF8sA5hnDkccCMuZn5ibmrx5xoENzwRUKwId4O6rPRyOiaYgO2274SsEHglCsOw/132","nickname":"WEI","note":"","ucode":"8A086837D6BD48","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546884,"discussion_content":"嗯 只有65535个连接是“误区”，所以我放在这节课的补充部分给到大家，如果有“中奖”的情况，赶快纠正这些误区：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642440948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546697,"ip_address":""},"score":546884,"extra":""}]},{"author":{"id":1286588,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a1/bc/ef0f26fa.jpg","nickname":"首富手记","note":"","ucode":"879DED4078303C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546896,"discussion_content":"https://blog.51cto.com/shoufu/3654102  我觉得你可以看一下我之前记录的这篇文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642458849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1349823,"avatar":"https://static001.geekbang.org/account/avatar/00/14/98/bf/d526db50.jpg","nickname":"范林杰","note":"","ucode":"DE08C8846FFD9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1286588,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a1/bc/ef0f26fa.jpg","nickname":"首富手记","note":"","ucode":"879DED4078303C","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":584032,"discussion_content":"这个文章太给力了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660567979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546896,"ip_address":"北京"},"score":584032,"extra":""}]},{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546881,"discussion_content":"最多65535个连接是误区，也列在“几个常见误区”部分，不要当做正确的知识去理解哦：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642439677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1621494,"avatar":"https://static001.geekbang.org/account/avatar/00/18/bd/f6/558bb119.jpg","nickname":"ᯤ⁵ᴳ","note":"","ucode":"BA8F60B05D1389","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546768,"discussion_content":"一台服务器最多有多少个进程呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642419298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1133975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/97/82e652a4.jpg","nickname":"加了盐海盗","note":"","ucode":"D985E4A81153F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1621494,"avatar":"https://static001.geekbang.org/account/avatar/00/18/bd/f6/558bb119.jpg","nickname":"ᯤ⁵ᴳ","note":"","ucode":"BA8F60B05D1389","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546812,"discussion_content":"linux系统 cat /proc/sys/kernel/pid_max来查看系统中可创建的进程数实际值","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642430826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546768,"ip_address":""},"score":546812,"extra":""}]}]},{"had_liked":false,"id":352900,"user_name":"walker","can_delete":false,"product_type":"c1","uid":1324219,"ip_address":"陕西","ucode":"FA5B2400A53730","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/bb/0b971fca.jpg","comment_is_top":false,"comment_ctime":1659000089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659000089","product_id":100104301,"comment_content":"1,net.ipv4.tcp_synack_retries和 net.ipv4.tcp_syn_retries类似，只不过是控制syn ack重传次数<br>2，根据文档，应该是需要两边都支持。 Therefore, for each of the<br>      extensions defined below, TCP options will be sent on non-SYN<br>      segments only when an exchange of options on the SYN segments has<br>      indicated that both sides understand the extension.  Furthermore,<br>      an extension option will be sent in a &lt;SYN,ACK&gt; segment only if<br>      the corresponding option was received in the initial &lt;SYN&gt;<br>      segment.","like_count":0},{"had_liked":false,"id":352234,"user_name":"有识之士","can_delete":false,"product_type":"c1","uid":1120024,"ip_address":"","ucode":"23F5594193D200","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/18/e4382a8e.jpg","comment_is_top":false,"comment_ctime":1658472465,"is_pvip":false,"replies":[{"id":"128189","content":"只要开始就不晚！","user_name":"作者回复","comment_id":352234,"uid":"1662117","ip_address":"","utype":1,"ctime":1658630283,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1658472465","product_id":100104301,"comment_content":"打开学习，迟到的学习，不晚。","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581213,"discussion_content":"只要开始就不晚！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658630284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346620,"user_name":"kakashi","can_delete":false,"product_type":"c1","uid":1939373,"ip_address":"","ucode":"A5B7867A2FAF87","user_header":"https://static001.geekbang.org/account/avatar/00/1d/97/ad/cdb3c420.jpg","comment_is_top":false,"comment_ctime":1653294446,"is_pvip":false,"replies":[{"id":"126543","content":"是的，这个是误解，拎出来批判的：）","user_name":"作者回复","comment_id":346620,"uid":"1662117","ip_address":"","utype":1,"ctime":1653669666,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1653294446","product_id":100104301,"comment_content":"“一台机器最多65535个TCP连接”，确实让我懵逼了下，差点就着了你的道了哈哈，确实，一台机器有65535个端口，但不表示最多有65535个连接，连接数是按五元组定义的，一个五元组表示一个连接。不知道我理解的对不对(✿◡‿◡)","like_count":1,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573839,"discussion_content":"是的，这个是误解，拎出来批判的：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653669666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345819,"user_name":"ACT","can_delete":false,"product_type":"c1","uid":2600235,"ip_address":"","ucode":"8E5747D75045A7","user_header":"https://static001.geekbang.org/account/avatar/00/27/ad/2b/46b4a196.jpg","comment_is_top":false,"comment_ctime":1652612481,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1652612481","product_id":100104301,"comment_content":"<br>老师，实验环境的搭建有没有详细一些的教程","like_count":0,"discussions":[{"author":{"id":1521568,"avatar":"https://static001.geekbang.org/account/avatar/00/17/37/a0/032d0828.jpg","nickname":"上杉夏香","note":"","ucode":"9FDDE0979BCC8C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577420,"discussion_content":"提供个思路。我的就是mac电脑装了一个虚拟机，里面放了一个ubuntu，直接局域网本地ip相互调用，也能抓包。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656087016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344895,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":2763179,"ip_address":"","ucode":"3588850B3370C8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","comment_is_top":false,"comment_ctime":1651839827,"is_pvip":true,"replies":[{"id":"125917","content":"好的，能感觉到你有收获：）","user_name":"作者回复","comment_id":344895,"uid":"1662117","ip_address":"","utype":1,"ctime":1651977316,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":5,"score":"1651839827","product_id":100104301,"comment_content":"厉害了，瞬间感觉自己的网络底层知识翻倍了。谢谢老师的倾囊相授。","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570872,"discussion_content":"好的，能感觉到你有收获：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651977316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343348,"user_name":"web","can_delete":false,"product_type":"c1","uid":2295037,"ip_address":"","ucode":"0FA494C7B6E069","user_header":"","comment_is_top":false,"comment_ctime":1650792279,"is_pvip":false,"replies":[{"id":"125667","content":"您好，是指这一讲的拓展部分的“UDP也有握手？”那个知识点吗？如果有不同的nc命令和返回信息，也可以这里回复一下，我们一起看看~","user_name":"作者回复","comment_id":343348,"uid":"1662117","ip_address":"","utype":1,"ctime":1651335258,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1650792279","product_id":100104301,"comment_content":"感觉大佬对nc有很多误会，大佬可以用下centos下的nc，这样就可以避免很多误会了。：-）","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569167,"discussion_content":"您好，是指这一讲的拓展部分的“UDP也有握手？”那个知识点吗？如果有不同的nc命令和返回信息，也可以这里回复一下，我们一起看看~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651335258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339860,"user_name":"晓波","can_delete":false,"product_type":"c1","uid":1118693,"ip_address":"","ucode":"069A04EC5DF49D","user_header":"https://static001.geekbang.org/account/avatar/00/11/11/e5/ebd56b05.jpg","comment_is_top":false,"comment_ctime":1648438685,"is_pvip":false,"replies":[{"id":"124498","content":"你的linux是什么发行版，是centos, ubuntu, 还是其他？<br>然后你可以发一下iptables -nL的结果发出来，我们一起分析一下：）","user_name":"作者回复","comment_id":339860,"uid":"1662117","ip_address":"","utype":1,"ctime":1648828076,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1648438685","product_id":100104301,"comment_content":"iptables 限制80端口 reject 【-A INPUT -p tcp -m tcp --dport 80 -j REJECT --reject-with icmp-port-unreachable】<br>没生效<br>服务端是按照drop方式处理的<br>默认不加iptables规则，是按照REJECT --reject-with tcp-reset 方式处理的<br><br>是不是还有其他什么地方的规则起作用了","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559603,"discussion_content":"你的linux是什么发行版，是centos, ubuntu, 还是其他？\n然后你可以发一下iptables -nL的结果发出来，我们一起分析一下：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648828076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118693,"avatar":"https://static001.geekbang.org/account/avatar/00/11/11/e5/ebd56b05.jpg","nickname":"晓波","note":"","ucode":"069A04EC5DF49D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558757,"discussion_content":"代理的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648454309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338866,"user_name":"仄言","can_delete":false,"product_type":"c1","uid":2052700,"ip_address":"","ucode":"D35DD3AF65A0BE","user_header":"https://static001.geekbang.org/account/avatar/00/1f/52/5c/d4a9accb.jpg","comment_is_top":false,"comment_ctime":1647765968,"is_pvip":false,"replies":[{"id":"126108","content":"是的~","user_name":"作者回复","comment_id":338866,"uid":"1662117","ip_address":"","utype":1,"ctime":1652372557,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1647765968","product_id":100104301,"comment_content":"静默丢包 可能还会涉及到 应用层面的队列打满","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571742,"discussion_content":"是的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652372557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337788,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1647065019,"is_pvip":false,"replies":[{"id":"123535","content":"嗯嗯后面是给了另外的例子，只是为了说明这个WS“长什么样子”，那个redis的例子里并没有SYN报文~","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1647158497,"ip_address":"","comment_id":337788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647065019","product_id":100104301,"comment_content":"杨老师，那个Redis 的例子没有理解，实际上并没有问题对吗？只是Tcpdump 是在链接建立以后发起的，所以看不到一开始的window scale 导致显示有问题？而后面给的SYNC 里面看到window scale 是另一个链接？","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555989,"discussion_content":"嗯嗯后面是给了另外的例子，只是为了说明这个WS“长什么样子”，那个redis的例子里并没有SYN报文~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647158497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337769,"user_name":"po","can_delete":false,"product_type":"c1","uid":1023905,"ip_address":"","ucode":"7DB36C278F34D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/a1/d75219ee.jpg","comment_is_top":false,"comment_ctime":1647052590,"is_pvip":true,"replies":[{"id":"123531","content":"你好，关于你的两个疑问：<br>1. 原始窗口最大确实是65535，但窗口是动态的，随着读写的情况以及资源情况不断调整，也就是不是每次都宣告这么大的窗口的，比如截图里就是190字节（当然这还要乘以系数）。我的朋友的疑问就在于：他以为接收窗口就是没有乘上系数的原始的190字节，而对方发了308字节，显然308&gt;190，貌似违规了。<br>2. 刚才说过，服务端（也包括客户端）宣告的接收窗口是可以动态变化的，具体宣告多少，主要取决于多个因素，比如：<br>a. 系统配置的TCP接收缓冲区参数（最小值&#47;中间值&#47;最大值）<br>b. 当时的系统资源的情况<br>c. 收到的报文大小等等<br>为什么不是240或者其他字节，这是系统根据实际情况做的决定。我们只能设置上面说的阈值参数，但不能决定动态运行中每个时刻的窗口大小。<br>关于TCP窗口的知识点，在09、10、11讲里有详细的展开，你学到那里应该能解开很多疑惑：）","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1647156782,"ip_address":"","comment_id":337769,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1647052590","product_id":100104301,"comment_content":"对于redis的案例有几个疑问，1.原始的窗口65535字节不是已经满足308字节大小了吗？还需要用到Windows scale？2.为什么服务端是通知190字节呢？为什么不是240或者其他字节大小呢？","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555981,"discussion_content":"你好，关于你的两个疑问：\n1. 原始窗口最大确实是65535，但窗口是动态的，随着读写的情况以及资源情况不断调整，也就是不是每次都宣告这么大的窗口的，比如截图里就是190字节（当然这还要乘以系数）。我的朋友的疑问就在于：他以为接收窗口就是没有乘上系数的原始的190字节，而对方发了308字节，显然308&gt;190，貌似违规了。\n2. 刚才说过，服务端（也包括客户端）宣告的接收窗口是可以动态变化的，具体宣告多少，主要取决于多个因素，比如：\na. 系统配置的TCP接收缓冲区参数（最小值/中间值/最大值）\nb. 当时的系统资源的情况\nc. 收到的报文大小等等\n为什么不是240或者其他字节，这是系统根据实际情况做的决定。我们只能设置上面说的阈值参数，但不能决定动态运行中每个时刻的窗口大小。\n关于TCP窗口的知识点，在09、10、11讲里有详细的展开，你学到那里应该能解开很多疑惑：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647156782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9f/a1/d75219ee.jpg","nickname":"po","note":"","ucode":"7DB36C278F34D7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556245,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647262631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337584,"user_name":"1000AP大德玛","can_delete":false,"product_type":"c1","uid":2578928,"ip_address":"","ucode":"AAF4E8629770B0","user_header":"https://static001.geekbang.org/account/avatar/00/27/59/f0/09b50521.jpg","comment_is_top":false,"comment_ctime":1646903581,"is_pvip":false,"replies":[{"id":"123352","content":"你好，这个是误区，也就是错误的。三个问题的正解分别是：<br>1. UDP并没有握手<br>2. 一台机器能支持的TCP连接数远超过65535个<br>3. TCP可以同时发起握手<br>所以具体到你的问题，nginx作为反向代理，因为可以监听多个VIP，也可以处理各个不同的客户端源IP，所以五元组可以远超过65535：）","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1646922524,"ip_address":"","comment_id":337584,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1646903581","product_id":100104301,"comment_content":"一台机器最多 65535 个 TCP 连接<br>所以如果是作为客户端（单个IP）理论上最大连接数就是65535 个，比如Nginx作为客户端（反向代理），理论上的反向代理的最大连接数65535 个？","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555480,"discussion_content":"你好，这个是误区，也就是错误的。三个问题的正解分别是：\n1. UDP并没有握手\n2. 一台机器能支持的TCP连接数远超过65535个\n3. TCP可以同时发起握手\n所以具体到你的问题，nginx作为反向代理，因为可以监听多个VIP，也可以处理各个不同的客户端源IP，所以五元组可以远超过65535：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646922525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2578928,"avatar":"https://static001.geekbang.org/account/avatar/00/27/59/f0/09b50521.jpg","nickname":"1000AP大德玛","note":"","ucode":"AAF4E8629770B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556177,"discussion_content":"感谢老师回答，我的意思是如果监听单个ip的Nginx与反向代理的后端应用（IP端口固定），因为源IP、目的ip、目的端口都固定了，所以反向代理的连接数就由端口数决定，所以是65535？那如果要解决这个问题，常见方法是用Nginx监听多个VIP吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647240274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":2578928,"avatar":"https://static001.geekbang.org/account/avatar/00/27/59/f0/09b50521.jpg","nickname":"1000AP大德玛","note":"","ucode":"AAF4E8629770B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574717,"discussion_content":"你这里指的是nginx跟它后面upstream的连接数是吧？一般会有多个upstream，于是这一侧的连接数就是655335乘以upstream的个数。当然这只是理论值。实际上源端口肯定是不能用全部这65535个端口的，而是有一个小得多的范围，定义在/proc/sys/net/ipv4/ip_local_port_range里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654276255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":556177,"ip_address":""},"score":574717,"extra":""}]}]},{"had_liked":false,"id":336455,"user_name":"三三","can_delete":false,"product_type":"c1","uid":1189553,"ip_address":"","ucode":"EF2991CAAB2FA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/26/b1/cc902a24.jpg","comment_is_top":false,"comment_ctime":1646150008,"is_pvip":false,"replies":[{"id":"123001","content":"没事，看看留言区的回复，很多同学的回答也很好：）","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1646228722,"ip_address":"","comment_id":336455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646150008","product_id":100104301,"comment_content":"思考题依回不知道，同志还需努力","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554147,"discussion_content":"没事，看看留言区的回复，很多同学的回答也很好：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646228722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335333,"user_name":"费曼先生","can_delete":false,"product_type":"c1","uid":1325150,"ip_address":"","ucode":"C65DC8746F98E6","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/5e/f0394817.jpg","comment_is_top":false,"comment_ctime":1645454490,"is_pvip":false,"replies":[{"id":"122705","content":"谢谢：）","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1645712440,"ip_address":"","comment_id":335333,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645454490","product_id":100104301,"comment_content":"看的出来，老师写的专栏真的很用心，内容真的很充实，收获很多！！！","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553091,"discussion_content":"谢谢：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645712440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335034,"user_name":"罗进","can_delete":false,"product_type":"c1","uid":1012735,"ip_address":"","ucode":"2E14721531A07C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/73/ff/e5423989.jpg","comment_is_top":false,"comment_ctime":1645261829,"is_pvip":false,"replies":[{"id":"122708","content":"嗯Linux和Window的参数位置都正确：）<br>对的，理论上，TCP允许同时连接，需要两边正好用同样的五元组~","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1645712780,"ip_address":"","comment_id":335034,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645261829","product_id":100104301,"comment_content":"TCP参数路径<br>Linux: &#47;proc&#47;sys&#47;net&#47;ipv4&#47;xxx<br>Windows: HKLM\\SYSTEM\\CurrentControlSet\\Tcpip\\Parameters\\xxx<br>❯ netsh interface tcp show global<br><br>DHCP时的ICMP不可达很常用<br>两端同时SYN，类似微信两端同一WIFI下同时对呼，会立即接通","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553094,"discussion_content":"嗯Linux和Window的参数位置都正确：）\n对的，理论上，TCP允许同时连接，需要两边正好用同样的五元组~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645712780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334910,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1645177190,"is_pvip":false,"replies":[{"id":"122385","content":"正确，而且你去查手册确认了这些知识，赞～","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1645362947,"ip_address":"","comment_id":334910,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645177190","product_id":100104301,"comment_content":"1.第二次握手最大重传次数<br>tcp_synack_retries (integer; default: 5; since Linux 2.2)<br>              The maximum number of times a SYN&#47;ACK segment for a<br>              passive TCP connection will be retransmitted. This number<br>              should not be higher than 255.<br><br>2. 不会     both sides must support window Scale","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552233,"discussion_content":"正确，而且你去查手册确认了这些知识，赞～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645362948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334902,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1645175469,"is_pvip":false,"replies":[{"id":"122443","content":"是的，可以用一下～","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1645452673,"ip_address":"","comment_id":334902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645175469","product_id":100104301,"comment_content":"在问题发生时及时执行 netstat -ant，找到 SYN_SENT 状态的连接，这个很可能是突破口。","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552413,"discussion_content":"是的，可以用一下～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645452673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334896,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1645173508,"is_pvip":false,"replies":[{"id":"122444","content":"每次这种情况也是继续成长的机会：）","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1645452696,"ip_address":"","comment_id":334896,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645173508","product_id":100104301,"comment_content":"难道 TCP 的深水又到我脖子这儿了？","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552414,"discussion_content":"每次这种情况也是继续成长的机会：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645452696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333537,"user_name":"MeowTvづ","can_delete":false,"product_type":"c1","uid":2406152,"ip_address":"","ucode":"0155231D61D6A7","user_header":"https://static001.geekbang.org/account/avatar/00/24/b7/08/a6493073.jpg","comment_is_top":false,"comment_ctime":1644399138,"is_pvip":true,"replies":[{"id":"121970","content":"如果不是iptables规则写的有问题，那我怀疑是你云主机前面有一道防火墙代理了这次TCP连接，所以这次握手是这个设备代理的，没有到你的主机。要验证这一点，你可以在云主机上抓包，看看有没有从你mac电脑发过去的报文？","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1644585184,"ip_address":"","comment_id":333537,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1644399138","product_id":100104301,"comment_content":"向评论区的大佬以及作者大大问一下，我在腾讯云上买了一台机器，也按照作者的命令(iptables)操作了，但是我Mac上telnet还是能连通，wireshark的结果也能看出了是连通的，这是为什么呀？苦恼了我好久","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550553,"discussion_content":"如果不是iptables规则写的有问题，那我怀疑是你云主机前面有一道防火墙代理了这次TCP连接，所以这次握手是这个设备代理的，没有到你的主机。要验证这一点，你可以在云主机上抓包，看看有没有从你mac电脑发过去的报文？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644585185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1054300,"avatar":"https://static001.geekbang.org/account/avatar/00/10/16/5c/c0322969.jpg","nickname":"Howe","note":"","ucode":"E2E93375FF5A07","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":563073,"discussion_content":"老师，代理又是怎么知道我要连接这台主机的？代理应该也需要配我连接要代理到哪台主机的哪个端口吧？还有就是他这属于从主机上就把防火墙限制了，即便是公司的代理也不应该能连上吧？还是说，他是请求被代理接了，代理做了回应，只是没有把请求转发到云主机上？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649935965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":550553,"ip_address":""},"score":563073,"extra":""}]},{"author":{"id":2406152,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b7/08/a6493073.jpg","nickname":"MeowTvづ","note":"","ucode":"0155231D61D6A7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550448,"discussion_content":"破案了，我连的公司内网，公司内部做了一些操作。。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644548135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":2406152,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b7/08/a6493073.jpg","nickname":"MeowTvづ","note":"","ucode":"0155231D61D6A7","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":551736,"discussion_content":"刚看到你的二次回复，我的极客时间app不会提醒我这种二次回复，我必须得回到留言区一个个翻才能看到。。。\n这种代理握手的行为，在防火墙等设备上比较多见，这可能发生在近端（离你电脑近的），也可能在远端（云主机前面）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645101276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":550448,"ip_address":""},"score":551736,"extra":""}]}]},{"had_liked":false,"id":331671,"user_name":"罗辑思维","can_delete":false,"product_type":"c1","uid":1318941,"ip_address":"","ucode":"D257A06EDE928E","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/1d/0c1a184c.jpg","comment_is_top":false,"comment_ctime":1642696887,"is_pvip":false,"replies":[{"id":"121213","content":"正确！","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1642825354,"ip_address":"","comment_id":331671,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1642696887","product_id":100104301,"comment_content":"思考题 2022.01.21<br>1.Server 向 Client 发送的 SYNACK 包也可能会被丢弃，或者因为某些原因而收不到 Client 的响应，这个时候 Server 也会重传 SYNACK 包。<br><br>2.不会。仅当两端都包含选项时，缩放才有效;如果只有连接的一端支持窗口缩放，则不会在任一方向上启用它。","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547687,"discussion_content":"正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642825354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549730,"discussion_content":"是否第一个SYN 和对方的ACK报文中都会带上windows scale的option?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644221087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":551737,"discussion_content":"这里分两种情况：\n1. 客户端支持WS，发送的SYN里带上WS，那么：\n   1.1 服务端也支持WS, 那么回复的SYN+ACK里带WS\n   1.2 服务端不支持WS, 那么回复的SYN+ACK里不带WS\n2. 客户端不支持WS，发送的SYN里不带WS，那么无论服务端是否支持WS, 回复的SYN+ACK里都不带WS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645101520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":549730,"ip_address":""},"score":551737,"extra":""}]}]},{"had_liked":false,"id":331135,"user_name":"includestdio.h","can_delete":false,"product_type":"c1","uid":2314854,"ip_address":"","ucode":"5027BACE9319CD","user_header":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","comment_is_top":false,"comment_ctime":1642438389,"is_pvip":true,"replies":[{"id":"121031","content":"tcp有握手的规范，操作系统本身就会做这件事，所以无论应用程序怎么写，握手总会被确保完成，这就是为什么 tcp端口的服务是可以被准确的探测的。<br>udp非常简单，如果想实现类似握手这样的交互，应用程序需要实现这个功能。你看看这个基于udp的应用程序有没有类似echo-reply这样的通信机制，可以借助这种机制来实现可靠的探测。","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1642512471,"ip_address":"","comment_id":331135,"utype":1}],"discussion_count":6,"race_medal":1,"score":"1642438389","product_id":100104301,"comment_content":"另外想请教老师一个问题，如果nc无法有效判断udp 端口监听情况，那还有什么方法可以从外部探测服务端udp端口监听情况吗，公有云排障经常会遇见这种场景，用户又不懂技术，只能从外部先探测","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547062,"discussion_content":"tcp有握手的规范，操作系统本身就会做这件事，所以无论应用程序怎么写，握手总会被确保完成，这就是为什么 tcp端口的服务是可以被准确的探测的。\nudp非常简单，如果想实现类似握手这样的交互，应用程序需要实现这个功能。你看看这个基于udp的应用程序有没有类似echo-reply这样的通信机制，可以借助这种机制来实现可靠的探测。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642512471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188280,"avatar":"https://static001.geekbang.org/account/avatar/00/12/21/b8/aca814dd.jpg","nickname":"江山如画","note":"","ucode":"BEB6228E6135B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546997,"discussion_content":"我是先停掉原先的 UDP 服务，然后用 nc 监听一个相同的 UDP 的端口，然后再在 client 端用 nc 测试这个 UDP 端口的连通性，这种方法可以排出中间的防火墙等因素的影响","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642489976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549731,"discussion_content":"可以实现类似GTP-U 的echo-request/echo-reply, 不过需要用户自己写代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644221483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2055993,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5f/39/8d2c61d3.jpg","nickname":"Kiddy","note":"","ucode":"D07AAEE69BE504","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547418,"discussion_content":"udp的状态是open|filtered 就是标明探测端口可能是打开的，也可能被过滤了。当然实际中也有可能在网络中就丢了，所以使用nmap探测端口结果不准确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642666365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2893355,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ewr0KSmB9yNd6gsV9FCjh9x80VFqtplKuicjwEpmU6ptZuxia9YNLgCibxHibVBiamHw9oum3w7zxYxZHSLo8wWT3vQ/132","nickname":"Geek_34a9d6","note":"","ucode":"ED3AE44A7CABAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547025,"discussion_content":"探测方法：nmap -nsU 【目地IP】 -p 【目的端口】\n\nclose状态表明服务器端口没开放，\nopen状态表明服务器端口开放了\nopen/flitered状态表明路由不可达或者防火墙阻挡了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642498929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2314854,"avatar":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","nickname":"includestdio.h","note":"","ucode":"5027BACE9319CD","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":2893355,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ewr0KSmB9yNd6gsV9FCjh9x80VFqtplKuicjwEpmU6ptZuxia9YNLgCibxHibVBiamHw9oum3w7zxYxZHSLo8wWT3vQ/132","nickname":"Geek_34a9d6","note":"","ucode":"ED3AE44A7CABAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547072,"discussion_content":"测了下确实是这样，不过第三个这个状态是咋探测出来的，我理解要么到了要么没到🤦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642516001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547025,"ip_address":""},"score":547072,"extra":""}]}]},{"had_liked":false,"id":331126,"user_name":"includestdio.h","can_delete":false,"product_type":"c1","uid":2314854,"ip_address":"","ucode":"5027BACE9319CD","user_header":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","comment_is_top":false,"comment_ctime":1642435195,"is_pvip":true,"replies":[{"id":"121271","content":"1. 应该是因为本身客户端在重试SYN，所以你服务端SYN+ACK的总次数=客户端SYN次数*2<br>2. 正确：）","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1642911336,"ip_address":"","comment_id":331126,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1642435195","product_id":100104301,"comment_content":"1.应该是服务端在给客户端发送synack时的重试次数。但是我在客户端drop了sport 80的请求，从客户端发起连接时，通过修改这个内核参数，并没有改变服务端 synack的重试次数，看起来有20来次了，不知道哪里搞错了<br><br>2.我理解不能，因为对端不支持就无法识别这个扩展字段的含义，可能会忽略","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547854,"discussion_content":"1. 应该是因为本身客户端在重试SYN，所以你服务端SYN+ACK的总次数=客户端SYN次数*2\n2. 正确：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642911336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331117,"user_name":"baalchina","can_delete":false,"product_type":"c1","uid":1026009,"ip_address":"","ucode":"19D147084567F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/d9/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1642430825,"is_pvip":true,"replies":[{"id":"121030","content":"不是，“只支持65535个连接”这是误解，我也放在常见误区里，不过好像有几个同学以为这个是正确的知识了，真是误会了。<br>同时能处理多少连接，主要看内存能存放多少这样的连接结构体和相应的应用层数据，以及当并发访问处理的时候，采用什么样的机制来支撑好这么多并发连接。<br>现在单机情况，如果是作为服务端，已经可以支持百万连接的级别；如果是作为负载均衡，会再高上至少一个数量级。","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1642512216,"ip_address":"","comment_id":331117,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1642430825","product_id":100104301,"comment_content":"如果加上同时呢？可否简单地理解为，同一时间，一台服务器只能处理65535个连接---虽然客户端的ip、端口都不同，但是服务器本地ip就一个，一个服务器ip+一个服务器端口只能对应一个客户端ip+端口？","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547061,"discussion_content":"不是，“只支持65535个连接”这是误解，我也放在常见误区里，不过好像有几个同学以为这个是正确的知识了，真是误会了。\n同时能处理多少连接，主要看内存能存放多少这样的连接结构体和相应的应用层数据，以及当并发访问处理的时候，采用什么样的机制来支撑好这么多并发连接。\n现在单机情况，如果是作为服务端，已经可以支持百万连接的级别；如果是作为负载均衡，会再高上至少一个数量级。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642512216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2562558,"avatar":"https://static001.geekbang.org/account/avatar/00/27/19/fe/d31344db.jpg","nickname":"lJ","note":"","ucode":"CC29D06A16FF93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547227,"discussion_content":"TCP服务器监听在指定端口接收客户端连接后，创建一个新的socket用于同客户端进行读写数据，但该socket并不需要也不会绑定一个新的端口，所以对于TCP服务器来说，不存在端口不够用的情况，TCP服务器能够保持多少个并发连接取决于服务器性能、内存大小、带宽大小以及服务器端设置（例如：进程能打开的文件数等）。\n摘自https://www.jianshu.com/p/aba94478596e","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642589493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331043,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1642393592,"is_pvip":true,"replies":[{"id":"120918","content":"嗯所以一台机器只能支持6万多个连接，这是一个误区，我放在“聊聊几个常见误区”部分，供大家参考","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1642424960,"ip_address":"","comment_id":331043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642393592","product_id":100104301,"comment_content":"“65535 个 TCP 连接”<br>一个连接是由五元组来确定，协议（TCP，UDP），src ip,src port,dest ip,dest port<br>dest ip是用来在网络中寻径的，数据包到达目的地机器后，dest port是帮助dest ip的OS找到相应的处理程序的，由此反过来的回应包，是通过来路的src ip找路回目标机器，src port是帮助src ip的OS找到处理回应包的程序，了解这个过程有助于推出可以有多少个连接数。","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546785,"discussion_content":"嗯所以一台机器只能支持6万多个连接，这是一个误区，我放在“聊聊几个常见误区”部分，供大家参考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642424960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331035,"user_name":"yayiyaya","can_delete":false,"product_type":"c1","uid":1615156,"ip_address":"","ucode":"38532C740FA186","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/34/6e3e962f.jpg","comment_is_top":false,"comment_ctime":1642389639,"is_pvip":true,"replies":[{"id":"120969","content":"1. 正确<br>2. 正确。在RFC1323中，以下信息就能回答这个问题，供大家参考：<br>This option may be sent in an initial &lt;SYN&gt; segment (i.e., a segment with the SYN bit on and the ACK bit off).  It may also be sent in a &lt;SYN,ACK&gt; segment, but only if a Window Scale option was received in the initial &lt;SYN&gt; segment.  A Window Scale option in a segment without a SYN bit should be ignored.","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1642441362,"ip_address":"","comment_id":331035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642389639","product_id":100104301,"comment_content":"1. 在tcp 第二次握手中， 内核放弃连接之前发送SYN+ACK包的次数<br>2. 不会。 <br>客户端发送 SYN 时， 会发送  Window Scale 的大小； （如果客户端不支持， 如何发送给服务端确认？）<br>服务端在接收Window Scale 的大小时， 则会将当前可用的大小告诉客户端， 客户端之后发送的数据不能超过这个大小，防止窗口满了， 缓存溢出。<br>","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546885,"discussion_content":"1. 正确\n2. 正确。在RFC1323中，以下信息就能回答这个问题，供大家参考：\nThis option may be sent in an initial &lt;SYN&gt; segment (i.e., a segment with the SYN bit on and the ACK bit off).  It may also be sent in a &lt;SYN,ACK&gt; segment, but only if a Window Scale option was received in the initial &lt;SYN&gt; segment.  A Window Scale option in a segment without a SYN bit should be ignored.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642441362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331023,"user_name":"orange","can_delete":false,"product_type":"c1","uid":1069002,"ip_address":"","ucode":"BD004762AEEB5A","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/ca/3ac60658.jpg","comment_is_top":false,"comment_ctime":1642382998,"is_pvip":false,"replies":[{"id":"120916","content":"多谢指出 已经修正了 欢迎你坚持打卡和学习 移动会有收获！","user_name":"作者回复","user_name_real":"编辑","uid":"1662117","ctime":1642423000,"ip_address":"","comment_id":331023,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1642382998","product_id":100104301,"comment_content":"Shift count：6，也就是我们最为关心的窗口将要被右移的位数，2 的 6 次方就是 64。<br><br>这里图上是7次","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546781,"discussion_content":"多谢指出 已经修正了 欢迎你坚持打卡和学习 移动会有收获！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642423000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1133975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/97/82e652a4.jpg","nickname":"加了盐海盗","note":"","ucode":"D985E4A81153F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":546813,"discussion_content":"一定(doge)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642430871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546781,"ip_address":""},"score":546813,"extra":""}]}]}]}