{"id":740773,"title":"第 10 章 双端 Diff 算法","content":"<p>上一章，我们介绍了简单 Diff 算法的实现原理。简单 Diff 算法利用虚拟节点的 <code>key</code> 属性，尽可能地复用 DOM 元素，并通过移动 DOM 的方式来完成更新，从而减少不断地创建和销毁 DOM 元素带来的性能开销。但是，简单 Diff 算法仍然存在很多缺陷，这些缺陷可以通过本章将要介绍的双端 Diff 算法解决。</p>\n<h2 id=\"nav_point_97\">10.1　双端比较的原理</h2>\n<p>简单 Diff 算法的问题在于，它对 DOM 的移动操作并不是最优的。我们拿上一章的例子来看，如图 10-1 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00547.jpeg\" alt=\"\" width=\"65%\" style=\"width: 65%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-1　新旧两组子节点及索引</strong></p>\n<p>在这个例子中，如果使用简单 Diff 算法来更新它，则会发生两次 DOM 移动操作，如图 10-2 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00548.jpeg\" alt=\"\" width=\"70%\" style=\"width: 70%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-2　两次 DOM 移动操作完成更新</strong></p>\n<p>第一次 DOM 移动操作会将真实 DOM 节点 <code>p-1</code> 移动到真实 DOM 节点 <code>p-3</code> 后面。第二次移动操作会将真实 DOM 节点 <code>p-2</code> 移动到真实 DOM 节点 <code>p-1</code> 后面。最终，真实 DOM 节点的顺序与新的一组子节点顺序一致：<code>p-3</code>、<code>p-1</code>、<code>p-2</code>。</p>\n<p>然而，上述更新过程并非最优解。在这个例子中，其实只需要通过一步 DOM 节点的移动操作即可完成更新，即只需要把真实 DOM 节点 <code>p-3</code> 移动到真实 DOM 节点 <code>p-1</code> 前面，如图 10-3 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00549.jpeg\" alt=\"\" width=\"75%\" style=\"width: 75%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-3　把真实 DOM 节点 <code>p-3</code> 移动到真实 DOM 节点 <code>p-1</code> 前面</strong></p>\n<p>可以看到，理论上只需要一次 DOM 移动操作即可完成更新。但简单 Diff 算法做不到这一点，不过本章我们要介绍的双端 Diff 算法可以做到。接下来，我们就来讨论双端 Diff 算法的原理。</p><!-- [[[read_end]]] -->\n<p>顾名思义，双端 Diff 算法是一种同时对新旧两组子节点的两个端点进行比较的算法。因此，我们需要四个索引值，分别指向新旧两组子节点的端点，如图 10-4 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00550.jpeg\" alt=\"\" width=\"80%\" style=\"width: 80%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-4　四个索引值，分别指向新旧两组子节点的端点</strong></p>\n<p>用代码来表达四个端点，如下面 <code>patchChildren</code> 和 <code>patchKeyedChildren</code> 函数的代码所示：</p>\n<pre class=\"code-rows\"><code> function patchChildren(n1, n2, container) {\n   if (typeof n2.children === 'string') {\n     // 省略部分代码\n   } else if (Array.isArray(n2.children)) {\n     // 封装 patchKeyedChildren 函数处理两组子节点\n     patchKeyedChildren(n1, n2, container)\n   } else {\n     // 省略部分代码\n   }\n }\n<p>function patchKeyedChildren(n1, n2, container) {<br />\nconst oldChildren = n1.children<br />\nconst newChildren = n2.children<br />\n// 四个索引值<br />\nlet oldStartIdx = 0<br />\nlet oldEndIdx = oldChildren.length - 1<br />\nlet newStartIdx = 0<br />\nlet newEndIdx = newChildren.length - 1<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们将两组子节点的打补丁工作封装到了 <code>patchKeyedChildren</code> 函数中。在该函数内，首先获取新旧两组子节点 <code>oldChildren</code> 和 <code>newChildren</code>，接着创建四个索引值，分别指向新旧两组子节点的头和尾，即 <code>oldStartIdx</code>、<code>oldEndIdx</code>、<code>newStartIdx</code> 和 <code>newEndIdx</code>。有了索引后，就可以找到它所指向的虚拟节点了，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function patchKeyedChildren(n1, n2, container) {\n   const oldChildren = n1.children\n   const newChildren = n2.children\n   // 四个索引值\n   let oldStartIdx = 0\n   let oldEndIdx = oldChildren.length - 1\n   let newStartIdx = 0\n   let newEndIdx = newChildren.length - 1\n   // 四个索引指向的 vnode 节点\n   let oldStartVNode = oldChildren[oldStartIdx]\n   let oldEndVNode = oldChildren[oldEndIdx]\n   let newStartVNode = newChildren[newStartIdx]\n   let newEndVNode = newChildren[newEndIdx]\n }\n</code></pre>\n<p>其中，<code>oldStartVNode</code> 和 <code>oldEndVNode</code> 是旧的一组子节点中的第一个节点和最后一个节点，<code>newStartVNode</code> 和 <code>newEndVNode</code> 则是新的一组子节点的第一个节点和最后一个节点。有了这些信息之后，我们就可以开始进行双端比较了。怎么比较呢？如图 10-5 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00551.jpeg\" alt=\"\" width=\"85%\" style=\"width: 85%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-5　双端比较的方式</strong></p>\n<p>在双端比较中，每一轮比较都分为四个步骤，如图 10-5 中的连线所示。</p>\n<ul>\n<li>第一步：比较旧的一组子节点中的第一个子节点 <code>p-1</code> 与新的一组子节点中的第一个子节点 <code>p-4</code>，看看它们是否相同。由于两者的 <code>key</code> 值不同，因此不相同，不可复用，于是什么都不做。</li>\n<li>第二步：比较旧的一组子节点中的最后一个子节点 <code>p-4</code> 与新的一组子节点中的最后一个子节点 <code>p-3</code>，看看它们是否相同。由于两者的 <code>key</code> 值不同，因此不相同，不可复用，于是什么都不做。</li>\n<li>第三步：比较旧的一组子节点中的第一个子节点 <code>p-1</code> 与新的一组子节点中的最后一个子节点 <code>p-3</code>，看看它们是否相同。由于两者的 <code>key</code> 值不同，因此不相同，不可复用，于是什么都不做。</li>\n<li>第四步：比较旧的一组子节点中的最后一个子节点 <code>p-4</code> 与新的一组子节点中的第一个子节点 <code>p-4</code>。由于它们的 <code>key</code> 值相同，因此可以进行 DOM 复用。</li>\n</ul>\n<p>可以看到，我们在第四步时找到了相同的节点，这说明它们对应的真实 DOM 节点可以复用。对于可复用的 DOM 节点，我们只需要通过 DOM 移动操作完成更新即可。那么应该如何移动 DOM 元素呢？为了搞清楚这个问题，我们需要分析第四步比较过程中的细节。我们注意到，第四步是比较旧的一组子节点的最后一个子节点与新的一组子节点的第一个子节点，发现两者相同。这说明：<strong>节点</strong> <code>p-4</code> <strong>原本是最后一个子节点，但在新的顺序中，它变成了第一个子节点</strong>。换句话说，节点 <code>p-4</code> 在更新之后应该是第一个子节点。对应到程序的逻辑，可以将其翻译为：<strong>将索引</strong> <code>oldEndIdx</code> <strong>指向的虚拟节点所对应的真实 DOM 移动到索引</strong> <code>oldStartIdx</code> <strong>指向的虚拟节点所对应的真实 DOM 前面</strong>。如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function patchKeyedChildren(n1, n2, container) {\n   const oldChildren = n1.children\n   const newChildren = n2.children\n   // 四个索引值\n   let oldStartIdx = 0\n   let oldEndIdx = oldChildren.length - 1\n   let newStartIdx = 0\n   let newEndIdx = newChildren.length - 1\n   // 四个索引指向的 vnode 节点\n   let oldStartVNode = oldChildren[oldStartIdx]\n   let oldEndVNode = oldChildren[oldEndIdx]\n   let newStartVNode = newChildren[newStartIdx]\n   let newEndVNode = newChildren[newEndIdx]\n<p>if (oldStartVNode.key === newStartVNode.key) {<br />\n// 第一步：oldStartVNode 和 newStartVNode 比较<br />\n} else if (oldEndVNode.key === newEndVNode.key) {<br />\n// 第二步：oldEndVNode 和 newEndVNode 比较<br />\n} else if (oldStartVNode.key === newEndVNode.key) {<br />\n// 第三步：oldStartVNode 和 newEndVNode 比较<br />\n} else if (oldEndVNode.key === newStartVNode.key) {<br />\n// 第四步：oldEndVNode 和 newStartVNode 比较<br />\n// 仍然需要调用 patch 函数进行打补丁<br />\npatch(oldEndVNode, newStartVNode, container)<br />\n// 移动 DOM 操作<br />\n// oldEndVNode.el 移动到 oldStartVNode.el 前面<br />\ninsert(oldEndVNode.el, container, oldStartVNode.el)</p>\n<pre><code> // 移动 DOM 完成后，更新索引值，并指向下一个位置\n oldEndVNode = oldChildren[--oldEndIdx]\n newStartVNode = newChildren[++newStartIdx]\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>在这段代码中，我们增加了一系列的 <code>if...else if...</code> 语句，用来实现四个索引指向的虚拟节点之间的比较。拿上例来说，在第四步中，我们找到了具有相同 <code>key</code> 值的节点。这说明，原来处于尾部的节点在新的顺序中应该处于头部。于是，我们只需要以头部元素 <code>oldStartVNode.el</code> 作为锚点，将尾部元素 <code>oldEndVNode.el</code> 移动到锚点前面即可。但需要注意的是，在进行 DOM 的移动操作之前，仍然需要调用 <code>patch</code> 函数在新旧虚拟节点之间打补丁。</p>\n<p>在这一步 DOM 的移动操作完成后，接下来是比较关键的步骤，即更新索引值。由于第四步中涉及的两个索引分别是 <code>oldEndIdx</code> 和 <code>newStartIdx</code>，所以我们需要更新两者的值，让它们各自朝正确的方向前进一步，并指向下一个节点。图 10-6 给出了更新前新旧两组子节点以及真实 DOM 节点的状态。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00552.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-6　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>图 10-7 给出了在第四步的比较中，第一步 DOM 移动操作完成后，新旧两组子节点以及真实 DOM 节点的状态。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00553.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-7　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>此时，真实 DOM 节点顺序为 <code>p-4</code>、<code>p-1</code>、<code>p-2</code>、<code>p-3</code>，这与新的一组子节点顺序不一致。这是因为 Diff 算法还没有结束，还需要进行下一轮更新。因此，我们需要将更新逻辑封装到一个 <code>while</code> 循环中，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   if (oldStartVNode.key === newStartVNode.key) {\n     // 步骤一：oldStartVNode 和 newStartVNode 比较\n   } else if (oldEndVNode.key === newEndVNode.key) {\n     // 步骤二：oldEndVNode 和 newEndVNode 比较\n   } else if (oldStartVNode.key === newEndVNode.key) {\n     // 步骤三：oldStartVNode 和 newEndVNode 比较\n   } else if (oldEndVNode.key === newStartVNode.key) {\n     // 步骤四：oldEndVNode 和 newStartVNode 比较\n     // 仍然需要调用 patch 函数进行打补丁\n     patch(oldEndVNode, newStartVNode, container)\n     // 移动 DOM 操作\n     // oldEndVNode.el 移动到 oldStartVNode.el 前面\n     insert(oldEndVNode.el, container, oldStartVNode.el)\n<pre><code> // 移动 DOM 完成后，更新索引值，指向下一个位置\n oldEndVNode = oldChildren[--oldEndIdx]\n newStartVNode = newChildren[++newStartIdx]\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>由于在每一轮更新完成之后，紧接着都会更新四个索引中与当前更新轮次相关联的索引，所以整个 <code>while</code> 循环执行的条件是：头部索引值要小于等于尾部索引值。</p>\n<p>在第一轮更新结束后循环条件仍然成立，因此需要进行下一轮的比较，如图 10-7 所示。</p>\n<ul>\n<li><p>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-2</code>，看看它们是否相同。由于两者的 <code>key</code> 值不同，不可复用，所以什么都不做。</p>\n<p>这里，我们使用了新的名词：<strong>头部节点</strong>。它指的是头部索引 <code>oldStartIdx</code> 和 <code>newStartIdx</code> 所指向的节点。</p>\n</li>\n<li><p>第二步：比较旧的一组子节点中的尾部节点 <code>p-3</code> 与新的一组子节点中的尾部节点 <code>p-3</code>，两者的 <code>key</code> 值相同，可以复用。另外，由于两者都处于尾部，因此不需要对真实 DOM 进行移动操作，只需要打补丁即可，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   if (oldStartVNode.key === newStartVNode.key) {\n     // 步骤一：oldStartVNode 和 newStartVNode 比较\n   } else if (oldEndVNode.key === newEndVNode.key) {\n     // 步骤二：oldEndVNode 和 newEndVNode 比较\n     // 节点在新的顺序中仍然处于尾部，不需要移动，但仍需打补丁\n     patch(oldEndVNode, newEndVNode, container)\n     // 更新索引和头尾部节点变量\n     oldEndVNode = oldChildren[--oldEndIdx]\n     newEndVNode = newChildren[--newEndIdx]\n   } else if (oldStartVNode.key === newEndVNode.key) {\n     // 步骤三：oldStartVNode 和 newEndVNode 比较\n   } else if (oldEndVNode.key === newStartVNode.key) {\n     // 步骤四：oldEndVNode 和 newStartVNode 比较\n     patch(oldEndVNode, newStartVNode, container)\n     insert(oldEndVNode.el, container, oldStartVNode.el)\n     oldEndVNode = oldChildren[--oldEndIdx]\n     newStartVNode = newChildren[++newStartIdx]\n   }\n }\n</code></pre>\n</li>\n</ul>\n<p>在这一轮更新完成之后，新旧两组子节点与真实 DOM 节点的状态如图 10-8 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00554.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-8　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>真实 DOM 的顺序相比上一轮没有变化，因为在这一轮的比较中没有对 DOM 节点进行移动，只是对 <code>p-3</code> 节点打补丁。接下来，我们再根据图 10-8 所示的状态执行下一轮的比较。</p>\n<ul>\n<li>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-2</code>，看看它们是否相同。由于两者的 <code>key</code> 值不同，不可复用，因此什么都不做。</li>\n<li>第二步：比较旧的一组子节点中的尾部节点 <code>p-2</code> 与新的一组子节点中的尾部节点 <code>p-1</code>，看看它们是否相同，由于两者的 <code>key</code> 值不同，不可复用，因此什么都不做。</li>\n<li>第三步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的尾部节点 <code>p-1</code>。两者的 <code>key</code> 值相同，可以复用。</li>\n</ul>\n<p>在第三步的比较中，我们找到了相同的节点，这说明：<strong>节点</strong> <code>p-1</code> <strong>原本是头部节点，但在新的顺序中，它变成了尾部节点</strong>。因此，我们需要将节点 <code>p-1</code> 对应的真实 DOM 移动到旧的一组子节点的尾部节点 <code>p-2</code> 所对应的真实 DOM 后面，同时还需要更新相应的索引到下一个位置，如图 10-9 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00555.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-9　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>这一步的代码实现如下：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   if (oldStartVNode.key === newStartVNode.key) {\n   } else if (oldEndVNode.key === newEndVNode.key) {\n     patch(oldEndVNode, newEndVNode, container)\n     oldEndVNode = oldChildren[--oldEndIdx]\n     newEndVNode = newChildren[--newEndIdx]\n   } else if (oldStartVNode.key === newEndVNode.key) {\n     // 调用 patch 函数在 oldStartVNode 和 newEndVNode 之间打补丁\n     patch(oldStartVNode, newEndVNode, container)\n     // 将旧的一组子节点的头部节点对应的真实 DOM 节点 oldStartVNode.el 移动到\n     // 旧的一组子节点的尾部节点对应的真实 DOM 节点后面\n     insert(oldStartVNode.el, container, oldEndVNode.el.nextSibling)\n     // 更新相关索引到下一个位置\n     oldStartVNode = oldChildren[++oldStartIdx]\n     newEndVNode = newChildren[--newEndIdx]\n   } else if (oldEndVNode.key === newStartVNode.key) {\n     patch(oldEndVNode, newStartVNode, container)\n     insert(oldEndVNode.el, container, oldStartVNode.el)\n<pre><code> oldEndVNode = oldChildren[--oldEndIdx]\n newStartVNode = newChildren[++newStartIdx]\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>如上面的代码所示，如果旧的一组子节点的头部节点与新的一组子节点的尾部节点匹配，则说明该旧节点所对应的真实 DOM 节点需要移动到尾部。因此，我们需要获取当前尾部节点的下一个兄弟节点作为锚点，即 <code>oldEndVNode.el.nextSibling</code>。最后，更新相关索引到下一个位置。</p>\n<p>通过图 10-9 可知，此时，新旧两组子节点的头部索引和尾部索引发生重合，但仍然满足循环的条件，所以还会进行下一轮的更新。而在接下来的这一轮的更新中，更新步骤也发生了重合。</p>\n<blockquote>\n<p>第一步：比较旧的一组子节点中的头部节点 <code>p-2</code> 与新的一组子节点中的头部节点 <code>p-2</code>。发现两者 <code>key</code> 值相同，可以复用。但两者在新旧两组子节点中都是头部节点，因此不需要移动，只需要调用 <code>patch</code> 函数进行打补丁即可。</p>\n</blockquote>\n<p>代码实现如下：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   if (oldStartVNode.key === newStartVNode.key) {\n     // 调用 patch 函数在 oldStartVNode 与 newStartVNode 之间打补丁\n     patch(oldStartVNode, newStartVNode, container)\n     // 更新相关索引，指向下一个位置\n     oldStartVNode = oldChildren[++oldStartIdx]\n     newStartVNode = newChildren[++newStartIdx]\n   } else if (oldEndVNode.key === newEndVNode.key) {\n     patch(oldEndVNode, newEndVNode, container)\n     oldEndVNode = oldChildren[--oldEndIdx]\n     newEndVNode = newChildren[--newEndIdx]\n   } else if (oldStartVNode.key === newEndVNode.key) {\n     patch(oldStartVNode, newEndVNode, container)\n     insert(oldStartVNode.el, container, oldEndVNode.el.nextSibling)\n<pre><code> oldStartVNode = oldChildren[++oldStartIdx]\n newEndVNode = newChildren[--newEndIdx]\n</code></pre>\n<p>} else if (oldEndVNode.key === newStartVNode.key) {<br />\npatch(oldEndVNode, newStartVNode, container)<br />\ninsert(oldEndVNode.el, container, oldStartVNode.el)</p>\n<pre><code> oldEndVNode = oldChildren[--oldEndIdx]\n newStartVNode = newChildren[++newStartIdx]\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>在这一轮更新之后，新旧两组子节点与真实 DOM 节点的状态如图 10-10 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00556.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-10　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>此时，真实 DOM 节点的顺序与新的一组子节点的顺序相同了：<code>p-4</code>、<code>p-2</code>、<code>p-1</code>、<code>p-3</code>。另外，在这一轮更新完成之后，索引 <code>newStartIdx</code> 和索引 <code>oldStartIdx</code> 的值都小于 <code>newEndIdx</code> 和 <code>oldEndIdx</code>，所以循环终止，双端 Diff 算法执行完毕。</p>\n<h2 id=\"nav_point_98\">10.2　双端比较的优势</h2>\n<p>理解了双端比较的原理之后，我们来看看与简单 Diff 算法相比，双端 Diff 算法具有怎样的优势。我们拿第 9 章的例子来看，如图 10-11 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00557.jpeg\" alt=\"\" width=\"45%\" style=\"width: 45%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-11　新旧两组子节点</strong></p>\n<p>图 10-11 给出了新旧两组子节点的节点顺序。当使用简单 Diff 算法对此例进行更新时，会发生两次 DOM 移动操作，如图 10-12 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00558.jpeg\" alt=\"\" width=\"75%\" style=\"width: 75%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-12　两次 DOM 移动</strong></p>\n<p>如果使用双端 Diff 算法对此例进行更新，会有怎样的表现呢？接下来，我们就以双端比较的思路来完成此例的更新，看一看双端 Diff 算法能否减少 DOM 移动操作次数。</p>\n<p>图 10-13 给出了算法执行之前新旧两组子节点与真实 DOM 节点的状态。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00559.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-13　新旧两组子节点与真实 DOM 节点的状态</strong></p>\n<p>接下来，我们按照双端比较的步骤执行更新。</p>\n<ul>\n<li>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-3</code>，两者 <code>key</code> 值不同，不可复用。</li>\n<li>第二步：比较旧的一组子节点中的尾部节点 <code>p-3</code> 与新的一组子节点中的尾部节点 <code>p-2</code>，两者 <code>key</code> 值不同，不可复用。</li>\n<li>第三步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的尾部节点 <code>p-2</code>，两者 <code>key</code> 值不同，不可复用。</li>\n<li>第四步：比较旧的一组子节点中的尾部节点 <code>p-3</code> 与新的一组子节点中的头部节点 <code>p-3</code>，发现可以进行复用。</li>\n</ul>\n<p>可以看到，在第四步的比较中，我们找到了可复用的节点 <code>p-3</code>。该节点原本处于所有子节点的尾部，但在新的一组子节点中它处于头部。因此，只需要让节点 <code>p-3</code> 对应的真实 DOM 变成新的头部节点即可。在这一步移动操作之后，新旧两组子节点以及真实 DOM 节点的状态如图 10-14 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00560.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-14　新旧两组子节点与真实 DOM 节点的状态</strong></p>\n<p>观察图 10-14 能够发现，在这一轮比较过后，真实 DOM 节点的顺序已经与新的一组子节点的顺序一致了。换句话说，我们完成了更新，不过算法仍然会继续执行。开始下一轮的比较。</p>\n<blockquote>\n<p>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-1</code>，两者的 <code>key</code> 值相同，可以复用。但由于两者都处于头部，因此不需要移动，只需要打补丁即可。</p>\n</blockquote>\n<p>在这一轮比较过后，新旧两组子节点与真实 DOM 节点的状态如图 10-15 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00561.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-15　新旧两组子节点与真实 DOM 节点的状态</strong></p>\n<p>此时，双端 Diff 算法仍然没有停止，开始新一轮的比较。</p>\n<blockquote>\n<p>第一步：比较旧的一组子节点中的头部节点 <code>p-2</code> 与新的一组子节点中的头部节点 <code>p-2</code>，两者的 <code>key</code> 值相同，可以复用。但由于两者都处于头部，因此不需要移动，只需要打补丁即可。</p>\n</blockquote>\n<p>在这一轮比较过后，新旧两组子节点与真实 DOM 节点的状态如图 10-16 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00562.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-16　新旧两组子节点与真实 DOM 节点的状态</strong></p>\n<p>到这一步后，索引 <code>newStartIdx</code> 和 <code>oldStartIdx</code> 的值比索引 <code>newEndIdx</code> 和 <code>oldEndIdx</code> 的值大，于是更新结束。可以看到，对于同样的例子，采用简单 Diff 算法需要两次 DOM 移动操作才能完成更新，而使用双端 Diff 算法只需要一次 DOM 移动操作即可完成更新。</p>\n<h2 id=\"nav_point_99\">10.3　非理想状况的处理方式</h2>\n<p>在上一节的讲解中，我们用了一个比较理想的例子。我们知道，双端 Diff 算法的每一轮比较的过程都分为四个步骤。在上一节的例子中，每一轮比较都会命中四个步骤中的一个，这是非常理想的情况。但实际上，并非所有情况都这么理想，如图 10-17 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00563.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-17　第一轮比较都无法命中</strong></p>\n<p>在这个例子中，新旧两组子节点的顺序如下。</p>\n<ul>\n<li>旧的一组子节点：<code>p-1</code>、<code>p-2</code>、<code>p-3</code>、<code>p-4</code>。</li>\n<li>新的一组子节点：<code>p-2</code>、<code>p-4</code>、<code>p-1</code>、<code>p-3</code>。</li>\n</ul>\n<p>当我们尝试按照双端 Diff 算法的思路进行第一轮比较时，会发现无法命中四个步骤中的任何一步。</p>\n<ul>\n<li>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-2</code>，不可复用。</li>\n<li>第二步：比较旧的一组子节点中的尾部节点 <code>p-4</code> 与新的一组子节点中的尾部节点 <code>p-3</code>，不可复用。</li>\n<li>第三步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的尾部节点 <code>p-3</code>，不可复用。</li>\n<li>第四步：比较旧的一组子节点中的尾部节点 <code>p-4</code> 与新的一组子节点中的头部节点 <code>p-2</code>，不可复用。</li>\n</ul>\n<p>在四个步骤的比较过程中，都无法找到可复用的节点，应该怎么办呢？这时，我们只能通过增加额外的处理步骤来处理这种非理想情况。既然两个头部和两个尾部的四个节点中都没有可复用的节点，那么我们就尝试看看非头部、非尾部的节点能否复用。具体做法是，拿新的一组子节点中的头部节点去旧的一组子节点中寻找，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   if (oldStartVNode.key === newStartVNode.key) {\n     // 省略部分代码\n   } else if (oldEndVNode.key === newEndVNode.key) {\n     // 省略部分代码\n   } else if (oldStartVNode.key === newEndVNode.key) {\n     // 省略部分代码\n   } else if (oldEndVNode.key === newStartVNode.key) {\n     // 省略部分代码\n   } else {\n     // 遍历旧的一组子节点，试图寻找与 newStartVNode 拥有相同 key 值的节点\n     // idxInOld 就是新的一组子节点的头部节点在旧的一组子节点中的索引\n     const idxInOld = oldChildren.findIndex(\n       node =&gt; node.key === newStartVNode.key\n     )\n   }\n }\n</code></pre>\n<p>在上面这段代码中，我们遍历旧的一组子节点，尝试在其中寻找与新的一组子节点的头部节点具有相同 <code>key</code> 值的节点，并将该节点在旧的一组子节点中的索引存储到变量 <code>idxInOld</code> 中。这么做的目的是什么呢？想要搞清楚这个问题，本质上需要我们先搞清楚：在旧的一组子节点中，找到与新的一组子节点的头部节点具有相同 <code>key</code> 值的节点意味着什么？如图 10-18 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00564.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-18　在旧子节点中寻找可复用节点</strong></p>\n<p>观察图 10-18，当我们拿新的一组子节点的头部节点 <code>p-2</code> 去旧的一组子节点中查找时，会在索引为 <code>1</code> 的位置找到可复用的节点。这意味着，节点 <code>p-2</code> 原本不是头部节点，但在更新之后，它应该变成头部节点。所以我们需要将节点 <code>p-2</code> 对应的真实 DOM 节点移动到当前旧的一组子节点的头部节点 <code>p-1</code> 所对应的真实 DOM 节点之前。具体实现如下：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   if (oldStartVNode.key === newStartVNode.key) {\n     // 省略部分代码\n   } else if (oldEndVNode.key === newEndVNode.key) {\n     // 省略部分代码\n   } else if (oldStartVNode.key === newEndVNode.key) {\n     // 省略部分代码\n   } else if (oldEndVNode.key === newStartVNode.key) {\n     // 省略部分代码\n   } else {\n     // 遍历旧 children，试图寻找与 newStartVNode 拥有相同 key 值的元素\n     const idxInOld = oldChildren.findIndex(\n       node =&gt; node.key === newStartVNode.key\n     )\n     // idxInOld 大于 0，说明找到了可复用的节点，并且需要将其对应的真实 DOM 移动到头部\n     if (idxInOld &gt; 0) {\n       // idxInOld 位置对应的 vnode 就是需要移动的节点\n       const vnodeToMove = oldChildren[idxInOld]\n       // 不要忘记除移动操作外还应该打补丁\n       patch(vnodeToMove, newStartVNode, container)\n       // 将 vnodeToMove.el 移动到头部节点 oldStartVNode.el 之前，因此使用后者作为锚点\n       insert(vnodeToMove.el, container, oldStartVNode.el)\n       // 由于位置 idxInOld 处的节点所对应的真实 DOM 已经移动到了别处，因此将其设置为 undefined\n       oldChildren[idxInOld] = undefined\n       // 最后更新 newStartIdx 到下一个位置\n       newStartVNode = newChildren[++newStartIdx]\n     }\n   }\n }\n</code></pre>\n<p>在上面这段代码中，首先判断 <code>idxInOld</code> 是否大于 <code>0</code>。如果条件成立，则说明找到了可复用的节点，然后将该节点对应的真实 DOM 移动到头部。为此，我们先要获取需要移动的节点，这里的 <code>oldChildren[idxInOld]</code> 所指向的节点就是需要移动的节点。在移动节点之前，不要忘记调用 <code>patch</code> 函数进行打补丁。接着，调用 <code>insert</code> 函数，并以现在的头部节点对应的真实 DOM 节点 <code>oldStartVNode.el</code> 作为锚点参数来完成节点的移动操作。当节点移动完成后，还有两步工作需要做。</p>\n<ul>\n<li>由于处于 <code>idxInOld</code> 处的节点已经处理过了（对应的真实 DOM 移到了别处），因此我们应该将 <code>oldChildren[idxInOld]</code> 设置为 <code>undefined</code>。</li>\n<li>新的一组子节点中的头部节点已经处理完毕，因此将 <code>newStartIdx</code> 前进到下一个位置。</li>\n</ul>\n<p>经过上述两个步骤的操作后，新旧两组子节点以及真实 DOM 节点的状态如图 10-19 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00565.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-19　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>此时，真实 DOM 的顺序为：<code>p-2</code>、<code>p-1</code>、<code>p-3</code>、<code>p-4</code>。接着，双端 Diff 算法会继续进行，如图 10-20 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00566.jpeg\" alt=\"\" width=\"95%\" style=\"width: 95%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-20　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<ul>\n<li>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-4</code>，两者 <code>key</code> 值不同，不可复用。</li>\n<li>第二步：比较旧的一组子节点中的尾部节点 <code>p-4</code> 与新的一组子节点中的尾部节点 <code>p-3</code>，两者 <code>key</code> 值不同，不可复用。</li>\n<li>第三步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的尾部节点 <code>p-3</code>，两者 <code>key</code> 值不同，不可复用。</li>\n<li>第四步：比较旧的一组子节点中的尾部节点 <code>p-4</code> 与新的一组子节点中的头部节点 <code>p-4</code>，两者的 <code>key</code> 值相同，可以复用。</li>\n</ul>\n<p>在这一轮比较的第四步中，我们找到了可复用的节点。因此，按照双端 Diff 算法的逻辑移动真实 DOM，即把节点 <code>p-4</code> 对应的真实 DOM 移动到旧的一组子节点中头部节点 <code>p-1</code> 所对应的真实 DOM 前面，如图 10-21 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00567.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-21　移动节点 <code>p-4</code></strong></p>\n<p>此时，真实 DOM 节点的顺序是：<code>p-2</code>、<code>p-4</code>、<code>p-1</code>、<code>p-3</code>。接着，开始下一轮的比较。</p>\n<blockquote>\n<p>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-1</code>，两者的 <code>key</code> 值相同，可以复用。</p>\n</blockquote>\n<p>在这一轮比较中，第一步就找到了可复用的节点。由于两者都处于头部，所以不需要对真实 DOM 进行移动，只需要打补丁即可。在这一步操作过后，新旧两组子节点与真实 DOM 节点的状态如图 10-22 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00568.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-22　新旧两组子节点与真实 DOM 节点的状态</strong></p>\n<p>此时，真实 DOM 节点的顺序是：<code>p-2</code>、<code>p-4</code>、<code>p-1</code>、<code>p-3</code>。接着，进行下一轮的比较。需要注意的一点是，此时旧的一组子节点的头部节点是 <code>undefined</code>。这说明该节点已经被处理过了，因此不需要再处理它了，直接跳过即可。为此，我们需要补充这部分逻辑的代码，具体实现如下：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   // 增加两个判断分支，如果头尾部节点为 undefined，则说明该节点已经被处理过了，直接跳到下一个位置\n   if (!oldStartVNode) {\n     oldStartVNode = oldChildren[++oldStartIdx]\n   } else if (!oldEndVNode) {\n     oldEndVNode = oldChildren[--oldEndIdx]\n   } else if (oldStartVNode.key === newStartVNode.key) {\n     // 省略部分代码\n   } else if (oldEndVNode.key === newEndVNode.key) {\n     // 省略部分代码\n   } else if (oldStartVNode.key === newEndVNode.key) {\n     // 省略部分代码\n   } else if (oldEndVNode.key === newStartVNode.key) {\n     // 省略部分代码\n   } else {\n     const idxInOld = oldChildren.findIndex(\n       node =&gt; node.key === newStartVNode.key\n     )\n     if (idxInOld &gt; 0) {\n       const vnodeToMove = oldChildren[idxInOld]\n       patch(vnodeToMove, newStartVNode, container)\n       insert(vnodeToMove.el, container, oldStartVNode.el)\n       oldChildren[idxInOld] = undefined\n       newStartVNode = newChildren[++newStartIdx]\n     }\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>观察上面的代码，在循环开始时，我们优先判断头部节点和尾部节点是否存在。如果不存在，则说明它们已经被处理过了，直接跳到下一个位置即可。在这一轮比较过后，新旧两组子节点与真实 DOM 节点的状态如图 10-23 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00569.jpeg\" alt=\"\" width=\"90%\" style=\"width: 90%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-23　新旧两组子节点与真实 DOM 节点的状态</strong></p>\n<p>现在，四个步骤又重合了，接着进行最后一轮的比较。</p>\n<blockquote>\n<p>第一步：比较旧的一组子节点中的头部节点 <code>p-3</code> 与新的一组子节点中的头部节点 <code>p-3</code>，两者的 <code>key</code> 值相同，可以复用。</p>\n</blockquote>\n<p>在第一步中找到了可复用的节点。由于两者都是头部节点，因此不需要进行 DOM 移动操作，直接打补丁即可。在这一轮比较过后，最终状态如图 10-24 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00570.jpeg\" alt=\"\" width=\"90%\" style=\"width: 90%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-24　新旧两组子节点与真实 DOM 节点的状态</strong></p>\n<p>这时，满足循环停止的条件，于是更新完成。最终，真实 DOM 节点的顺序与新的一组子节点的顺序一致，都是：<code>p-2</code>、<code>p-4</code>、<code>p-1</code>、<code>p-3</code>。</p>\n<h2 id=\"nav_point_100\">10.4　添加新元素</h2>\n<p>在 10.3 节中，我们讲解了非理想情况的处理，即在一轮比较过程中，不会命中四个步骤中的任何一步。这时，我们会拿新的一组子节点中的头部节点去旧的一组子节点中寻找可复用的节点，然而并非总能找得到，如图 10-25 的例子所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00571.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-25　新增节点的情况</strong></p>\n<p>在这个例子中，新旧两组子节点的顺序如下。</p>\n<ul>\n<li>旧的一组子节点：<code>p-1</code>、<code>p-2</code>、<code>p-3</code>。</li>\n<li>新的一组子节点：<code>p-4</code>、<code>p-1</code>、<code>p-3</code>、<code>p-2</code>。</li>\n</ul>\n<p>首先，我们尝试进行第一轮比较，发现在四个步骤的比较中都找不到可复用的节点。于是我们尝试拿新的一组子节点中的头部节点 <code>p-4</code> 去旧的一组子节点中寻找具有相同 <code>key</code> 值的节点，但在旧的一组子节点中根本就没有 <code>p-4</code> 节点，如图 10-26 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00572.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-26　在旧的一组子节点中找不到可复用的节点</strong></p>\n<p>这说明节点 <code>p-4</code> 是一个新增节点，我们应该将它挂载到正确的位置。那么应该挂载到哪里呢？很简单，因为节点 <code>p-4</code> 是新的一组子节点中的头部节点，所以只需要将它挂载到当前头部节点之前即可。“当前”头部节点指的是，旧的一组子节点中的头部节点所对应的真实 DOM 节点 <code>p-1</code>。下面是用来完成挂载操作的代码：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   // 增加两个判断分支，如果头尾部节点为 undefined，则说明该节点已经被处理过了，直接跳到下一个位置\n   if (!oldStartVNode) {\n     oldStartVNode = oldChildren[++oldStartIdx]\n   } else if (!oldEndVNode) {\n     oldEndVNode = newChildren[--oldEndIdx]\n   } else if (oldStartVNode.key === newStartVNode.key) {\n     // 省略部分代码\n   } else if (oldEndVNode.key === newEndVNode.key) {\n     // 省略部分代码\n   } else if (oldStartVNode.key === newEndVNode.key) {\n     // 省略部分代码\n   } else if (oldEndVNode.key === newStartVNode.key) {\n     // 省略部分代码\n   } else {\n     const idxInOld = oldChildren.findIndex(\n       node =&gt; node.key === newStartVNode.key\n     )\n     if (idxInOld &gt; 0) {\n       const vnodeToMove = oldChildren[idxInOld]\n       patch(vnodeToMove, newStartVNode, container)\n       insert(vnodeToMove.el, container, oldStartVNode.el)\n       oldChildren[idxInOld] = undefined\n     } else {\n       // 将 newStartVNode 作为新节点挂载到头部，使用当前头部节点 oldStartVNode.el 作为锚点\n       patch(null, newStartVNode, container, oldStartVNode.el)\n     }\n     newStartVNode = newChildren[++newStartIdx]\n   }\n }\n</code></pre>\n<p>如上面的代码所示，当条件 <code>idxInOld &gt; 0</code> 不成立时，说明 <code>newStartVNode</code> 节点是全新的节点。又由于 <code>newStartVNode</code> 节点是头部节点，因此我们应该将其作为新的头部节点进行挂载。所以，在调用 <code>patch</code> 函数挂载节点时，我们使用 <code>oldStartVNode.el</code> 作为锚点。在这一步操作完成之后，新旧两组子节点以及真实 DOM 节点的状态如图 10-27 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00573.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-27　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>当新节点 <code>p-4</code> 挂载完成后，会进行后续的更新，直到全部更新完成为止。但这样就完美了吗？答案是否定的，我们再来看另外一个例子，如图 10-28 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00574.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-28　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>这个例子与上一个的例子的不同之处在于，我们调整了新的一组子节点的顺序：<code>p-4</code>、<code>p-1</code>、<code>p-2</code>、<code>p-3</code>。下面我们按照双端 Diff 算法的思路来执行更新，看看会发生什么。</p>\n<ul>\n<li>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-4</code>，两者的 <code>key</code> 值不同，不可以复用。</li>\n<li>第二步：比较旧的一组子节点中的尾部节点 <code>p-3</code> 与新的一组子节点中的尾部节点 <code>p-3</code>，两者的 <code>key</code> 值相同，可以复用。</li>\n</ul>\n<p>在第二步中找到了可复用的节点，因此进行更新。更新后的新旧两组子节点以及真实 DOM 节点的状态如图 10-29 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00575.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-29　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>接着进行下一轮的比较。</p>\n<ul>\n<li>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-4</code>，两者的 <code>key</code> 值不同，不可以复用。</li>\n<li>第二步：比较旧的一组子节点中的尾部节点 <code>p-2</code> 与新的一组子节点中的尾部节点 <code>p-2</code>，两者的 <code>key</code> 值相同，可以复用。</li>\n</ul>\n<p>我们又在第二步找到了可复用的节点，于是再次进行更新。更新后的新旧两组子节点以及真实 DOM 节点的状态如图 10-30 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00576.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-30　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>接着，进行下一轮的更新。</p>\n<ul>\n<li>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-4</code>，两者的 <code>key</code> 值不同，不可以复用。</li>\n<li>第二步：比较旧的一组子节点中的尾部节点 <code>p-1</code> 与新的一组子节点中的尾部节点 <code>p-1</code>，两者的 <code>key</code> 值相同，可以复用。</li>\n</ul>\n<p>还是在第二步找到了可复用的节点，再次进行更新。更新后的新旧两组子节点以及真实 DOM 节点的状态如图 10-31 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00577.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-31　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>当这一轮更新完毕后，由于变量 <code>oldStartIdx</code> 的值大于 <code>oldEndIdx</code> 的值，满足更新停止的条件，因此更新停止。但通过观察可知，节点 <code>p-4</code> 在整个更新过程中被遗漏了，没有得到任何处理，这说明我们的算法是有缺陷的。为了弥补这个缺陷，我们需要添加额外的处理代码，如下所示：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   // 省略部分代码\n }\n<p>// 循环结束后检查索引值的情况，<br />\nif (oldEndIdx &lt; oldStartIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {<br />\n// 如果满足条件，则说明有新的节点遗留，需要挂载它们<br />\nfor (let i = newStartIdx; i &lt;= newEndIdx; i++) {<br />\nconst anchor = newChildren[newEndIdx + 1] ? newChildren[newEndIdx + 1].el : null;<br />\npatch(null, newChildren[i], container, anchor);<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>我们在 <code>while</code> 循环结束后增加了一个 <code>if</code> 条件语句，检查四个索引值的情况。根据图 10-31 可知，如果条件 <code>oldEndIdx &lt; oldStartIdx &amp;&amp; newStartIdx &lt;= newEndIdx</code> 成立，说明新的一组子节点中有遗留的节点需要作为新节点挂载。哪些节点是新节点呢？索引值位于 <code>newStartIdx</code> 和 <code>newEndIdx</code> 这个区间内的节点都是新节点。于是我们开启一个 <code>for</code> 循环来遍历这个区间内的节点并逐一挂载。挂载时的锚点仍然使用当前的头部节点 <code>oldStartVNode.el</code>，这样就完成了对新增元素的处理。</p>\n<h2 id=\"nav_point_101\">10.5　移除不存在的元素</h2>\n<p>解决了新增节点的问题后，我们再来讨论关于移除元素的情况，如图 10-32 的例子所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00578.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-32　移除节点的情况</strong></p>\n<p>在这个例子中，新旧两组子节点的顺序如下。</p>\n<ul>\n<li>旧的一组子节点：<code>p-1</code>、<code>p-2</code>、<code>p-3</code>。</li>\n<li>新的一组子节点：<code>p-1</code>、<code>p-3</code>。</li>\n</ul>\n<p>可以看到，在新的一组子节点中 <code>p-2</code> 节点已经不存在了。为了搞清楚应该如何处理节点被移除的情况，我们还是按照双端 Diff 算法的思路执行更新。</p>\n<blockquote>\n<p>第一步：比较旧的一组子节点中的头部节点 <code>p-1</code> 与新的一组子节点中的头部节点 <code>p-1</code>，两者的 <code>key</code> 值相同，可以复用。</p>\n</blockquote>\n<p>在第一步的比较中找到了可复用的节点，于是执行更新。在这一轮比较过后，新旧两组子节点以及真实 DOM 节点的状态如图 10-33 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00579.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-33　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>接着，执行下一轮更新。</p>\n<ul>\n<li>第一步：比较旧的一组子节点中的头部节点 <code>p-2</code> 与新的一组子节点中的头部节点 <code>p-3</code>，两者的 <code>key</code> 值不同，不可以复用。</li>\n<li>第二步：比较旧的一组子节点中的尾部节点 <code>p-3</code> 与新的一组子节点中的尾部节点 <code>p-3</code>，两者的 <code>key</code> 值相同，可以复用。</li>\n</ul>\n<p>在第二步中找到了可复用的节点，于是进行更新。更新后的新旧两组子节点以及真实 DOM 节点的状态如图 10-34 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00580.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 10-34　新旧两组子节点以及真实 DOM 节点的状态</strong></p>\n<p>此时变量 <code>newStartIdx</code> 的值大于变量 <code>newEndIdx</code> 的值，满足更新停止的条件，于是更新结束。但观察图 10-34 可知，旧的一组子节点中存在未被处理的节点，应该将其移除。因此，我们需要增加额外的代码来处理它，如下所示：</p>\n<pre class=\"code-rows\"><code> while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {\n   // 省略部分代码\n }\n<p>if (oldEndIdx &lt; oldStartIdx &amp;&amp; newStartIdx &lt;= newEndIdx) {<br />\n// 添加新节点<br />\n// 省略部分代码<br />\n} else if (newEndIdx &lt; newStartIdx &amp;&amp; oldStartIdx &lt;= oldEndIdx) {<br />\n// 移除操作<br />\nfor (let i = oldStartIdx; i &lt;= oldEndIdx; i++) {<br />\nunmount(oldChildren[i])<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>与处理新增节点类似，我们在 <code>while</code> 循环结束后又增加了一个 <code>else...if</code> 分支，用于卸载已经不存在的节点。由图 10-34 可知，索引值位于 <code>oldStartIdx</code> 和 <code>oldEndIdx</code> 这个区间内的节点都应该被卸载，于是我们开启一个 <code>for</code> 循环将它们逐一卸载。</p>\n<h2 id=\"nav_point_102\">10.6　总结</h2>\n<p>本章我们介绍了双端 Diff 算法的原理及其优势。顾名思义，双端 Diff 算法指的是，在新旧两组子节点的四个端点之间分别进行比较，并试图找到可复用的节点。相比简单 Diff 算法，双端 Diff 算法的优势在于，对于同样的更新场景，执行的 DOM 移动操作次数更少。</p>\n<br style=\"page-break-after:always\" />","neighbors":{"left":{"article_title":"第 9 章 简单 Diff 算法","id":740772},"right":{"article_title":"第 11 章 快速 Diff 算法","id":740774}},"comments":[]}