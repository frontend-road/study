{"id":699280,"title":"10｜对象模型：JVM对象的内部机制和存在方式是怎样的？","content":"<p>你好，我是康杨。</p><p>这节课，我们一起来分析下微观环境下的JVM“分子”——对象。我们会先从 Everything &nbsp;is &nbsp;object 中的 object讲起，通过协议、模型、应用三部曲带你重新认识JVM中的对象。</p><p>对象是我们使用Java的基础，是所有方法和数据的载体，也是我们和Java世界交互的媒介，区别于以往的C、C++语言，即使我们实现一个最简单的“Hello World” 程序，也需要先创建一个Java对象。那这个我们再熟悉不过的对象，在JVM中是以怎样的形态存在的？又是如何影响到我们的日常编码和调优的？带着这些问题，我们一起来开启JVM对象的探索之旅。</p><h2>JVM 对象基础协议</h2><h3>Java 对象的大小</h3><p>首先请你思考一个问题：一个Java对象有多大？你可能下意识地会觉得一个Java对象的大小没法评估，这取决于它管理了多少属性，而JVM并没有限制一个对象所管理的属性的数量和大小。但其实一个Java对象的大小在JVM中是有一个要求的，那就是 Java对象的大小必须是8字节的整数倍。</p><p><strong>JVM为什么这么要求？又是如何做到的呢？</strong>这就涉及到了Java对象的基础协议。Java对象协议是JVM对Java对象在JVM中如何存储的规定，协议中规定，在JVM中对象由三个部分构成，分别是对象头、实例数据、对齐区。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/8d/c4/8dd01e6aba41677759be5de3fdf6bac4.png?wh=1745x885\" alt=\"图片\"></p><h3>对象头</h3><p>对象头也叫 Instance Header，是整个Java对象协议中最复杂的一部分，这部分的协议格式是通过C++定义的。对象头本身又由三部分构成，分别是存储运行时数据的Mark word、指向元数据指针的Klass 以及当对象是数组时，记录数组长度的length。在 32位系统中，对象头的大小是8字节，而在64位的系统中，对象头的大小是16个字节，当然也可以通过指针压缩的方式，压缩到12个字节。当你的JVM中存在大量的对象时，通过指针压缩减少对象的空间占用是一个非常重要的提升性能的手段。</p><h4>对象运行时数据</h4><p>对象运行时数据也叫做 Mark word，它是整个对象头中最复杂的部分。首先Mark word是一个非固定的数据结构，以便在最小的空间里存储更多的信息。它的格式就像图中展示的这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/ed/9dc7f15194edd89bea5b0e074e9ca1ed.png?wh=1920x1012\" alt=\"图片\"></p><p>对象HashCode是一个25位的对象标识码，通过 System.identifyHashCode() 生成，我们知道Object类也有一个生成HashCode的方法hashCode() ，它们之间的区别是无论对象是否重写了hashCode方法，identityHashCode都会返回对象的HashCode。</p><p>对象分代年龄这个部分需要关注的是这个值占用的空间大小是4位，这意味着它的最大值是15。那什么时候用它呢？在JVM采用分代收集的垃圾回收算法时，它会记录对象在Survivor区被复制的次数。在YGC中，伴随着每次GC，对象在Survivor区被复制一次，这个值也会加1。当对象被复制的次数超过一定的阈值时，它就会被复制到老年代，这个阈值是通过 <code>-XX:MaxTenuringThreshold</code> 来设置的&nbsp;。默认情况下并行GC时的阈值是15。关于对象垃圾回收的更多信息，我后面介绍对象回收时也会再详细讲解，这里你留个印象就好。</p><p>偏向锁用来标识对象是否启用偏向锁标记，这个只占用 1 位二进制，0表示对象没有使用偏向锁，1 表示对象使用了偏向锁。</p><h4>元数据指针</h4><p>JVM采用的是OOP-Klass对象模型，这个地方存储的就是指向Klass的指针，正是通过这个指针，JVM 知道当前这个对象是哪一个类的实例。</p><h3>实例数据</h3><p>实例数据也叫做&nbsp;Instance Data，这个地方维护着我们在代码中创建的对象的实例字段。在JVM中对象字段主要分为<strong>基本数据类型</strong>和<strong>引用类型</strong>两种<strong>。</strong></p><p>表格里的都是基本数据类型。</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/da/5fcfcb9f81cf1a596b2a0c56344bc3da.png?wh=1832x1015\" alt=\"图片\"></p><p>引用类型是一个类似C++的地址指针，在32位的机器上占用4个字节，在64位的机器上占用8个字节，它指向的是JVM对象在运行时内存中实际的地址。虽然我们日常使用Java编程时，会遇到或者会自己创造各种各样的类型，但是最终在JVM里，只有这8个基本类型和引用类型。</p><p>为了简化编程，在Java层我们可以用对象等类型来编程，但是当JVM实际运行的时候在JVM层面的数据类型只有8个基本数据类型和引用类型，也就是说它会把Java层的对象转化成它这层能识别的类型来执行。</p><p>当然这不是终点，真正执行的硬件在执行的时候又会转换成硬件层能识别的数据类型来执行。正是因为这样的运行机制，JDK 8 通过引入对象的逃逸分析、标量替换以及栈上分配实现性能的优化，背后依赖的原理正是如此，我们下一讲会详细介绍这部分内容。</p><p><img src=\"https://static001.geekbang.org/resource/image/41/fb/41d979a162665dd463cb244d49d908fb.png?wh=1920x1062\" alt=\"图片\"></p><h3>对象填充区域</h3><p>为了讲清楚对象填充区域的来龙去脉，我们不得不从CPU开始讲起，就像<a href=\"https://time.geekbang.org/column/article/688563\">第 1 讲</a>我们聊的，JVM是一个虚拟机，它的能力来源于底层的CPU、操作系统，同时这些底层基础设施的特性又会反过来影响JVM中的特性。</p><p>首先我们要明确一点，CPU是以字为单位读取数据的，而缓存中的数据是以cacheline为单位从内存中同步到CPU缓存中的。所以内存里数据的存储和存取方式会对CPU的读取产生影响。</p><p><img src=\"https://static001.geekbang.org/resource/image/df/yy/df7857aa4842ce1cc40f8cyyc23aa5yy.png?wh=1920x995\" alt=\"图片\"></p><p>如果数据存储的时候未按照地址对齐，很可能出现一种情况，就是当CPU读取的数据存在于0x0002-0x0005的地址空间，而CPU要想读取该数据时，需要先要把地址空间是0x0000-0x0003的数据读取出来，再把地址空间是0x0004-0x0007的部分读取出来，把不需要的数据去掉才能读取到需要的数据，显然这种方式是非常低效的，所以为了提升CPU的效率，在虚拟机里一般会设置默认对齐位。</p><p>在HotSpot里这个值是8。HotSpot虚拟机要求所有的对象大小都是8字节的倍数，对象填充区域起到的就是<strong>补齐填充</strong>的作用，这也是一个很经典的以空间换时间思想的应用，关于这个思想的其他应用和案例，我也会在后面ThreadLocal部分进一步展开介绍。</p><p>刚刚我们了解了JVM中对象的协议，知道JVM中对象的数据是如何存储的，以及JVM对象运行时的信息，比如GC年龄、锁信息是如何被存储的。你也许发现了JVM对象协议和Java中的锁机制，尤其是synchronized的实现，和JVM的GC机制息息相关。</p><p>其实这里还隐含着另一个问题，在实例数据部分，数据如何存储和排列也和JVM的伪共享机制密切相关，伪共享的部分我会在第21讲深入讲解，这里你只需要仔细体会刚刚我们讲的这些内容，铭记于心，这样才能在日后遇到基于它的实现的时候豁然开朗。但是想要真正全面掌握JVM对象，我们还需要了解JVM的OOP-Klass模型。</p><h2>OOP-Klass模型</h2><pre><code class=\"language-plain\">public class Book {\n    private String  name ;\n    public Book(){\n    }\n    public Book(String  bookName){\n        name = bookName;\n    }\n    public String getName(){\n        return  name;\n    }\n    public void print(){\n        System.out.println(\"Common Book\");\n    }\n    public static void main(String[] args) {\n        int  bookCnt = 0;\n        Book book1 = new Book(\"Java Programming Book \");\n    }\n}\n</code></pre><p>我们先来看一下上面这段代码 ，通过代码的内容我们能够知道Book对象的运行时数据是如何存储的，但是Book对象的方法是如何存储的呢？JVM又是如何知道内存中的某一个对象具体是哪个类的呢？这就涉及到了JVM的OOP-Klass模型。这里的oop是ordinary object pointer的缩写，意思就是普通对象指针。相比于C++，JVM通过oop实现指针的对象化，并且使用直接指针，JVM定位到内存中对象的效率非常高。</p><p>Klass用来表示JVM层里某一个对象的具体类型，也就是我们在Java语言层面定义的对象的类型，也可以认为Klass是Java语言层面类型的VM层，表示.KLASS存储了类的元数据，包括类的继承关系、方法表、字段表等信息。</p><p>通过刚刚的介绍，相信这个时候你对JVM对象有了更全面的认知，总结一下就是JVM对象是按照如下方式存储的。</p><ul>\n<li>对象实例（oop）保存在堆上</li>\n<li>对象元数据（Klass）保存在方法区上</li>\n<li>对象的引用则保存在栈上</li>\n</ul><p>具体如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/17/ed8a3652fa9b21ecebf3d8bc6960d717.png?wh=1920x500\" alt=\"图片\"></p><p>对应到上面Book的例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/da/1d/da2ba2db0d80773242172e9cfbba191d.png?wh=1920x511\" alt=\"图片\"></p><h2>应用</h2><p>OOP-Klass和Java对象模型是很多实现的基础，其中一个很重要的应用就是多态。我们知道面向对象编程有三大特性，分别是封装、继承和多态。而OOP-Klass就是多态的底层实现原理。</p><p>Java中的多态有三种写法，分别是重写、接口实现、抽象方法实现。下面我就通过重写来介绍下JVM背后是如何通过OOP-Klass和Java对象模型来实现的。还是以上面的Book为例，我们来实现一个Book的子类。</p><pre><code class=\"language-plain\">public class ColorBook extends Book {\n    public void print(){\n        System.out.println(\"Color Book\");\n    }\n    public static void main(String[] args) {\n        Book book = new Book();\n        Book colorBook = new ColorBook();\n        book.print();\n        colorBook.print();\n    }\n}\n</code></pre><p>我们发现这个地方打印出来的分别是Common Book和Color Book。也就是说，我们虽然定义colorBook的类型是Book，但是它还是准确定位到了ColorBook这个类，那它是如何做到的呢？这就涉及到了Klass模型里的函数表功能。</p><p>函数表（Function Table）也叫做方法表（Method Table），是Klass的一部分。它是一个数组，存储了类的方法的地址指针。每个方法在函数表里都有一个条目，用来表示该方法的地址。通过函数表，Java虚拟机能够根据方法的索引或名称来查找并调用相应的方法。Klass里的函数表和Java类里的方法是一一对应的关系。函数表里的每个条目都对应着Java类里的一个方法，它存储了方法的地址，以便在运行时进行动态绑定和方法调用。</p><p>通过Klass里的函数表，Java虚拟机可以实现多态性。当通过父类的引用调用方法的时候，Java虚拟机会根据实际对象的类型，在函数表里查找对应的方法地址，然后进行方法调用。Java 采用的这种动态绑定机制，是实现多态特性的重要手段之一。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/22/42356005e69a5b2bfc604050eb652422.png?wh=1920x700\" alt=\"图片\"></p><p>你可以结合图示来理解，ColorBook拷贝了一份Book函数表，使它的函数表指针指向新的函数表，因为ColorBook覆写了Book的函数print()，所以把函数表里覆写函数的函数指针替换成了ColorBook覆写的函数指针，而被调用函数在函数表里偏移量是固定的，这就是多态功能的原理。</p><h2>重点回顾</h2><p>好了，这就是今天的主要内容，JVM对象协议和OOP-Klass相关的知识确实比较繁杂，所以我总结了一些要点，来帮你梳理。</p><p>JVM通过OOP-Klass模型在虚拟机层面实现了Java中的类和对象，其中Klass是虚拟机层面的Java类，它通过函数表的功能实现了Java语言的多态，Java对象协议规定了虚拟机层面Java对象是如何存储的，熟练掌握Java对象协议对我们后面理解和掌握Java的GC机制、锁机制，尤其是synchronized的实现，有很大帮助。</p><p>同时我们也了解了JVM里的数据类型，知道在Java语言层面种目繁多的类型在虚拟机层面是如何收敛到8个基础类型以及引用的，同时我们也看到了以空间换时间的思想在JVM层面的应用，还有Java对象的大小设置成 8 字节的整数倍的原因。这些知识点都是我们后面实战环节性能优化部分的理论基础。</p><h2>思考题</h2><p>学完这节课的内容，你能说一说JVM的对象模型以及JVM层的数据类型有哪些吗？欢迎你把自己的所得所思分享到评论区，我们一起探讨，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p><p>💡点亮你的知识框架图</p><p><img src=\"https://static001.geekbang.org/resource/image/27/3b/27635340e9dcb6df7b3b1d438994523b.jpg?wh=6666x4728\" alt=\"\"></p>","neighbors":{"left":{"article_title":"09｜SPI机制：如何打造一个属于你的SPI程序？","id":698494},"right":{"article_title":"11｜对象创建 ：JVM中的对象是怎么生产出来的？","id":700492}},"comments":[{"had_liked":false,"id":380877,"user_name":"Nico","can_delete":false,"product_type":"c1","uid":1563904,"ip_address":"浙江","ucode":"4A847EA6A2A1AB","user_header":"https://static001.geekbang.org/account/avatar/00/17/dd/00/4a7b9a9f.jpg","comment_is_top":false,"comment_ctime":1694394634,"is_pvip":false,"replies":[{"id":139139,"content":"在 Java 中，当我们调用一个方法的时候，JVM 会根据这个方法在代码中的声明类型在类的方法表中查找对应的方法。这就是 `invokevirtual` 字节码指令所要做的事情。例如，在你的代码中，`colorBook.print()` 这个调用，虽然在字节码中看起来是要调用 `Book.print`，但实际上 JVM 会在运行时刻决定具体执行哪个方法。这是怎么做到的呢？我们知道，在 Java 中，方法可以被子类重写。所以，当 JVM 看到 `invokevirtual` 指令时，它会首先查看栈顶的对象引用，然后再根据这个引用具体的类型，去类的方法表中查找对应的方法。如果找到了就调用，如果没有找到就会向上（父类）查找，直到找到为止。所以说，`ColorBook.print()` 这个调用，虽然在字节码中表示的是 `Book.print`，但在运行时，JVM 会根据 `colorBook` 对象的实际类型 (`ColorBook`)，最终会找到并执行 `ColorBook.print` 方法。如果 `ColorBook` 类没有重写 `print` 方法，那么它会去执行 `Book.print` 方法。这就是 Java 的动态绑定和运行时多态的一部分，也是面向对象编程的重要特性之一。","user_name":"作者回复","user_name_real":"编辑","uid":1366588,"ctime":1696515990,"ip_address":"北京","comment_id":380877,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"public class Main {\n    public static void main(String[] args) {\n        Book book =  new Book();\n        Book colorBook = new ColorBook();\n        book.print();\n        colorBook.print();\n    }\n}\n针对这段代码的主要字节码如下：\nCode:\n  stack=2, locals=3, args_size=1\n    0: new           #2                  &#47;&#47; class com&#47;minis&#47;jvm&#47;Book\n    3: dup\n    4: invokespecial #3                  &#47;&#47; Method com&#47;minis&#47;jvm&#47;Book.&quot;&lt;init&gt;&quot;:()V\n    7: astore_1\n    8: new           #4                  &#47;&#47; class com&#47;minis&#47;jvm&#47;ColorBook\n   11: dup\n   12: invokespecial #5                  &#47;&#47; Method com&#47;minis&#47;jvm&#47;ColorBook.&quot;&lt;init&gt;&quot;:()V\n   15: astore_2\n   16: aload_1\n   17: invokevirtual #6                  &#47;&#47; Method com&#47;minis&#47;jvm&#47;Book.print:()V\n   20: aload_2\n   21: invokevirtual #6                  &#47;&#47; Method com&#47;minis&#47;jvm&#47;Book.print:()V\n   24: return\n之前看JVM类加载阶段时说 “解析” 在某些情况下可以在初始化阶段之后开始，这是为了支持 Java 语言的运行时绑定，从这个字节码上看 ColorBook.print 执行的是 Book.print，那这个初始化阶段之后，是如何把 Book.print 换成了 ColorBook.print，这一段一直有点模糊，辛苦老师空了帮忙解答下，感谢！","like_count":5,"discussions":[{"author":{"id":1366588,"avatar":"https://static001.geekbang.org/account/avatar/00/14/da/3c/6ca50139.jpg","nickname":"Arthur king 微信超級會員","note":"","ucode":"79637F55F0ED85","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629023,"discussion_content":"在 Java 中，当我们调用一个方法的时候，JVM 会根据这个方法在代码中的声明类型在类的方法表中查找对应的方法。这就是 `invokevirtual` 字节码指令所要做的事情。例如，在你的代码中，`colorBook.print()` 这个调用，虽然在字节码中看起来是要调用 `Book.print`，但实际上 JVM 会在运行时刻决定具体执行哪个方法。这是怎么做到的呢？我们知道，在 Java 中，方法可以被子类重写。所以，当 JVM 看到 `invokevirtual` 指令时，它会首先查看栈顶的对象引用，然后再根据这个引用具体的类型，去类的方法表中查找对应的方法。如果找到了就调用，如果没有找到就会向上（父类）查找，直到找到为止。所以说，`ColorBook.print()` 这个调用，虽然在字节码中表示的是 `Book.print`，但在运行时，JVM 会根据 `colorBook` 对象的实际类型 (`ColorBook`)，最终会找到并执行 `ColorBook.print` 方法。如果 `ColorBook` 类没有重写 `print` 方法，那么它会去执行 `Book.print` 方法。这就是 Java 的动态绑定和运行时多态的一部分，也是面向对象编程的重要特性之一。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1696515990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381727,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1695739975,"is_pvip":false,"replies":[{"id":139124,"content":"当对象进入重量级锁状态的时候，其对象头（Mark Word部分）是不再直接存储哈希码的。但这并不影响我们获取对象的哈希码，因为JVM有其自己的处理机制。之后，对象头就不再存储hashcode。当需要hashcode的时候，会去Monitor中查找之前储存的hashcode。存储hashcode的操作发生在阻塞前，所以即使阻塞后对象头的信息被覆盖，hashcode依然可以从Monitor中找到。 ","user_name":"作者回复","user_name_real":"编辑","uid":1366588,"ctime":1696512865,"ip_address":"北京","comment_id":381727,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"老师，你好！对象头的mark world有些不理解，在图中展示的意思一个对象在不同的状态存储不同的状态吗？比如在重量级锁的时候就没有储存hashcode？","like_count":3,"discussions":[{"author":{"id":1366588,"avatar":"https://static001.geekbang.org/account/avatar/00/14/da/3c/6ca50139.jpg","nickname":"Arthur king 微信超級會員","note":"","ucode":"79637F55F0ED85","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629004,"discussion_content":"当对象进入重量级锁状态的时候，其对象头（Mark Word部分）是不再直接存储哈希码的。但这并不影响我们获取对象的哈希码，因为JVM有其自己的处理机制。之后，对象头就不再存储hashcode。当需要hashcode的时候，会去Monitor中查找之前储存的hashcode。存储hashcode的操作发生在阻塞前，所以即使阻塞后对象头的信息被覆盖，hashcode依然可以从Monitor中找到。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696512866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380924,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1694445919,"is_pvip":false,"replies":[{"id":139132,"content":"A1:  CPU读取数据的单位根据机器体系结构和具体CPU的设计来决定，通常是以&quot;字(word)&quot;作为单位。&quot;字&quot;是数据总线一次能够传输的二进制代码的位数，这取决于CPU的内部数据总线的宽度。对于32位的CPU来说，一个字就是32位即4个字节，64位CPU中，一个字是64位即8个字节。举例来说，对于一个字长为32位的机器，我们通常说一次读写操作可以读写4个字节，这是因为32位等于4个字节（每个字节为8位）。然而，还需要根据实际情况来确定，*&quot;字&quot;* 这个术语在不同的环境和上下文中可能会有所不同，有时候也可能指单个字符（在字符编码中），因此最好根据特定环境和具体文档来确定 *&quot;字&quot;* 的具体大小。 \nA2:不是，klass不是方法的内存地址，而是代表Java类在JVM内部的表示。","user_name":"作者回复","user_name_real":"编辑","uid":1366588,"ctime":1696515112,"ip_address":"北京","comment_id":380924,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"请教老师两个问题：\nQ1：CPU读的“字”是四个字节吗？\nQ2：klass是方法的内存地址吗？","like_count":1,"discussions":[{"author":{"id":1366588,"avatar":"https://static001.geekbang.org/account/avatar/00/14/da/3c/6ca50139.jpg","nickname":"Arthur king 微信超級會員","note":"","ucode":"79637F55F0ED85","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629016,"discussion_content":"A1:  CPU读取数据的单位根据机器体系结构和具体CPU的设计来决定，通常是以&#34;字(word)&#34;作为单位。&#34;字&#34;是数据总线一次能够传输的二进制代码的位数，这取决于CPU的内部数据总线的宽度。对于32位的CPU来说，一个字就是32位即4个字节，64位CPU中，一个字是64位即8个字节。举例来说，对于一个字长为32位的机器，我们通常说一次读写操作可以读写4个字节，这是因为32位等于4个字节（每个字节为8位）。然而，还需要根据实际情况来确定，*&#34;字&#34;* 这个术语在不同的环境和上下文中可能会有所不同，有时候也可能指单个字符（在字符编码中），因此最好根据特定环境和具体文档来确定 *&#34;字&#34;* 的具体大小。 \nA2:不是，klass不是方法的内存地址，而是代表Java类在JVM内部的表示。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696515113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380889,"user_name":"^_^","can_delete":false,"product_type":"c1","uid":1682012,"ip_address":"北京","ucode":"05E7C6F1DD6E77","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/5c/d2c1c7ce.jpg","comment_is_top":false,"comment_ctime":1694414161,"is_pvip":false,"replies":[{"id":139129,"content":" JVM的方法表是在类加载的解析阶段创建的","user_name":"作者回复","user_name_real":"编辑","uid":1366588,"ctime":1696514409,"ip_address":"北京","comment_id":380889,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"方法表是在准备阶段还是解析阶段创建的呢？","like_count":1,"discussions":[{"author":{"id":1366588,"avatar":"https://static001.geekbang.org/account/avatar/00/14/da/3c/6ca50139.jpg","nickname":"Arthur king 微信超級會員","note":"","ucode":"79637F55F0ED85","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629010,"discussion_content":" JVM的方法表是在类加载的解析阶段创建的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696514409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394063,"user_name":"哪有什么胜利可言","can_delete":false,"product_type":"c1","uid":3199552,"ip_address":"北京","ucode":"3B981C62706E57","user_header":"https://static001.geekbang.org/account/avatar/00/30/d2/40/02139069.jpg","comment_is_top":false,"comment_ctime":1725694407,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"JVM 采用的是 OOP-Klass 对象模型，这个地方存储的就是指向 Klass 的指针，正是通过这个指针，JVM 知道当前这个对象是哪一个类的实例。\n这个地方指的是哪个地方呢？没有讲清楚啊！！！","like_count":0},{"had_liked":false,"id":387328,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"山西","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/45ffdca3.jpg","comment_is_top":false,"comment_ctime":1707008024,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"也不知道是我的基本不够，还是理解有点差。总感觉没太完全理解。比如，Markword中几种锁的数据，是每个对象都会预留各种锁的数据？还是会根据情况切换不同的锁数据存储结构？","like_count":0},{"had_liked":false,"id":386380,"user_name":"等风来🎧","can_delete":false,"product_type":"c1","uid":1804087,"ip_address":"江苏","ucode":"B6BB8714A0B019","user_header":"https://static001.geekbang.org/account/avatar/00/1b/87/37/b071398c.jpg","comment_is_top":false,"comment_ctime":1704719624,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"最后一张图，对象实例数据和类指针的位置是不是画反了？类指针不该再对象头里面吗？老师都用英文表示吧比如Book 的 Klass 指针，而不是 Book 的类指针。因为 java 的 Class 和 Klass&#39;很容易让人混淆。","like_count":0},{"had_liked":false,"id":380885,"user_name":"C.","can_delete":false,"product_type":"c1","uid":1444698,"ip_address":"江苏","ucode":"5AE269220EFD73","user_header":"https://static001.geekbang.org/account/avatar/00/16/0b/5a/453ad411.jpg","comment_is_top":false,"comment_ctime":1694410711,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"JVM 的对象模型：对象、类、类加载器和类型信息。\nJVM 层的数据类型：基本数据类型、引用类型、数组类型、接口类型、枚举类型。\n特殊的数据类型和机制：泛型、注解、反射。","like_count":0}]}