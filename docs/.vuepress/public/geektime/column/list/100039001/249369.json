{"id":249369,"title":"98 | 项目实战三：设计实现一个支持自定义规则的灰度发布组件（实现）","content":"<p>上两节课，我们讲解了灰度组件的需求和设计思路。不管是之前讲过的限流、幂等框架，还是现在正在讲的灰度组件，这些框架、组件、类库的功能性需求都不复杂，相反，非功能性需求是开发的重点、难点。</p><p>今天，我们按照上节课给出的灰度组件的设计思路，讲解如何进行编码实现。不过今天对实现的讲解，跟前面两个实战项目有所不同。在前面两个项目中，我都是手把手地从最基础的MVP代码讲起，然后讲解如何review代码发现问题、重构代码解决问题，最终得到一份还算高质量的代码。考虑到已经有前面两个项目的学习和锻炼了，你应该对开发套路、思考路径很熟悉了，所以，今天我们换个讲法，就不从最基础的讲起了，而是重点讲解实现思路。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>灰度组件功能需求整理</h2><p>针对上两节课给出的开发需求和设计思路，我们还是按照老套路，从中剥离出V1版本要实现的内容。为了方便我讲解和你查看，我把灰度组件的开发需求和设计思路，重新整理罗列了一下，放到了这里。</p><h3>1.灰度规则的格式和存储方式</h3><p>我们希望支持不同格式（JSON、YAML、XML等）、不同存储方式（本地配置文件、Redis、Zookeeper、或者自研配置中心等）的灰度规则配置方式。实际上，这一点跟之前的限流框架中限流规则的格式和存储方式完全一致，代码实现也是相同的，所以在接下来的讲解中，就不重复啰嗦了，你可以回过头去看下<a href=\"https://time.geekbang.org/column/article/243961\">第92讲</a>。</p><!-- [[[read_end]]] --><h3>2.灰度规则的语法格式</h3><p>我们支持三种灰度规则语法格式：具体值（比如893）、区间值（比如1020-1120）、比例值（比如%30）。除此之外，对于更加复杂的灰度规则，比如只对30天内购买过某某商品并且退货次数少于10次的用户进行灰度，我们通过编程的方式来实现。</p><h3>3.灰度规则的内存组织方式</h3><p>类似于限流框架中的限流规则，我们需要把灰度规则组织成支持快速查找的数据结构，能够快速判定某个灰度对象（darkTarget，比如用户ID），是否落在灰度规则设定的范围内。</p><h3>4.灰度规则热更新</h3><p>修改了灰度规则之后，我们希望不重新部署和重启系统，新的灰度规则就能生效，所以，我们需要支持灰度规则热更新。</p><p>在V1版本中，对于第一点灰度规则的格式和存储方式，我们只支持YAML格式本地文件的配置存储方式。对于剩下的三点，我们都要进行实现。考虑到V1版本要实现的内容比较多，我们分两步来实现代码，第一步先将大的流程、框架搭建好，第二步再进一步添加、丰富、优化功能。</p><h2>实现灰度组件基本功能</h2><p>在第一步中，我们先实现基于YAML格式的本地文件的灰度规则配置方式，以及灰度规则热更新，并且只支持三种基本的灰度规则语法格式。基于编程实现灰度规则的方式，我们留在第二步实现。</p><p>我们先把这个基本功能的开发需求，用代码实现出来。它的目录结构及其Demo示例如下所示。代码非常简单，只包含4个类。接下来，我们针对每个类再详细讲解一下。</p><pre><code>// 代码目录结构\ncom.xzg.darklaunch\n  --DarkLaunch(框架的最顶层入口类)\n  --DarkFeature(每个feature的灰度规则)\n  --DarkRule(灰度规则)\n  --DarkRuleConfig(用来映射配置到内存中)\n\n// Demo示例\npublic class DarkDemo {\n  public static void main(String[] args) {\n    DarkLaunch darkLaunch = new DarkLaunch();\n    DarkFeature darkFeature = darkLaunch.getDarkFeature(&quot;call_newapi_getUserById&quot;);\n    System.out.println(darkFeature.enabled());\n    System.out.println(darkFeature.dark(893));\n  }\n}\n\n// 灰度规则配置(dark-rule.yaml)放置在classpath路径下\nfeatures:\n- key: call_newapi_getUserById\n  enabled: true\n  rule: {893,342,1020-1120,%30}\n- key: call_newapi_registerUser\n  enabled: true\n  rule: {1391198723, %10}\n- key: newalgo_loan\n  enabled: true\n  rule: {0-1000}\n</code></pre><p>从Demo代码中，我们可以看出，对于业务系统来说，灰度组件的两个直接使用的类是DarkLaunch类和DarkFeature类。</p><p><strong>我们先来看DarkLaunch类。</strong>这个类是灰度组件的最顶层入口类。它用来组装其他类对象，串联整个操作流程，提供外部调用的接口。</p><p>DarkLaunch类先读取灰度规则配置文件，映射为内存中的Java对象（DarkRuleConfig），然后再将这个中间结构，构建成一个支持快速查询的数据结构（DarkRule）。除此之外，它还负责定期更新灰度规则，也就是前面提到的灰度规则热更新。</p><p>为了避免更新规则和查询规则的并发执行冲突，在更新灰度规则的时候，我们并非直接操作老的DarkRule，而是先创建一个新的DarkRule，然后等新的DarkRule都构建好之后，再“瞬间”赋值给老的DarkRule。你可以结合着下面的代码一块看下。</p><pre><code>public class DarkLaunch {\n  private static final Logger log = LoggerFactory.getLogger(DarkLaunch.class);\n  private static final int DEFAULT_RULE_UPDATE_TIME_INTERVAL = 60; // in seconds\n  private DarkRule rule;\n  private ScheduledExecutorService executor;\n\n  public DarkLaunch(int ruleUpdateTimeInterval) {\n    loadRule();\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n    this.executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        loadRule();\n      }\n    }, ruleUpdateTimeInterval, ruleUpdateTimeInterval, TimeUnit.SECONDS);\n  }\n\n  public DarkLaunch() {\n    this(DEFAULT_RULE_UPDATE_TIME_INTERVAL);\n  }\n\n  private void loadRule() {\n    // 将灰度规则配置文件dark-rule.yaml中的内容读取DarkRuleConfig中\n    InputStream in = null;\n    DarkRuleConfig ruleConfig = null;\n    try {\n      in = this.getClass().getResourceAsStream(&quot;/dark-rule.yaml&quot;);\n      if (in != null) {\n        Yaml yaml = new Yaml();\n        ruleConfig = yaml.loadAs(in, DarkRuleConfig.class);\n      }\n    } finally {\n      if (in != null) {\n        try {\n          in.close();\n        } catch (IOException e) {\n          log.error(&quot;close file error:{}&quot;, e);\n        }\n      }\n    }\n\n    if (ruleConfig == null) {\n      throw new RuntimeException(&quot;Can not load dark rule.&quot;);\n    }\n    // 更新规则并非直接在this.rule上进行，\n    // 而是通过创建一个新的DarkRule，然后赋值给this.rule，\n    // 来避免更新规则和规则查询的并发冲突问题\n    DarkRule newRule = new DarkRule(ruleConfig);\n    this.rule = newRule;\n  }\n\n  public DarkFeature getDarkFeature(String featureKey) {\n    DarkFeature darkFeature = this.rule.getDarkFeature(featureKey);\n    return darkFeature;\n  }\n}\n</code></pre><p><strong>我们再来看下DarkRuleConfig类。</strong>这个类功能非常简单，只是用来将灰度规则映射到内存中。具体的代码如下所示：</p><pre><code>public class DarkRuleConfig {\n  private List&lt;DarkFeatureConfig&gt; features;\n\n  public List&lt;DarkFeatureConfig&gt; getFeatures() {\n    return this.features;\n  }\n\n  public void setFeatures(List&lt;DarkFeatureConfig&gt; features) {\n    this.features = features;\n  }\n\n  public static class DarkFeatureConfig {\n    private String key;\n    private boolean enabled;\n    private String rule;\n    // 省略getter、setter方法\n  }\n}\n</code></pre><p>从代码中，我们可以看出来，DarkRuleConfig类嵌套了一个内部类DarkFeatureConfig。这两个类跟配置文件的两层嵌套结构完全对应。我把对应关系标注在了下面的示例中，你可以对照着代码看下。</p><pre><code>&lt;!--对应DarkRuleConfig--&gt;\nfeatures:                       \n- key: call_newapi_getUserById  &lt;!--对应DarkFeatureConfig--&gt;\n  enabled: true\n  rule: {893,342,1020-1120,%30}\n- key: call_newapi_registerUser &lt;!--对应DarkFeatureConfig--&gt;\n  enabled: true\n  rule: {1391198723, %10}\n- key: newalgo_loan             &lt;!--对应DarkFeatureConfig--&gt;\n  enabled: true\n  rule: {0-1000}\n</code></pre><p><strong>我们再来看下DarkRule。</strong>DarkRule包含所有要灰度的业务功能的灰度规则。它用来支持根据业务功能标识（feature key），快速查询灰度规则（DarkFeature）。代码也比较简单，具体如下所示：</p><pre><code>public class DarkRule {\n  private Map&lt;String, DarkFeature&gt; darkFeatures = new HashMap&lt;&gt;();\n\n  public DarkRule(DarkRuleConfig darkRuleConfig) {\n    List&lt;DarkRuleConfig.DarkFeatureConfig&gt; darkFeatureConfigs = darkRuleConfig.getFeatures();\n    for (DarkRuleConfig.DarkFeatureConfig darkFeatureConfig : darkFeatureConfigs) {\n      darkFeatures.put(darkFeatureConfig.getKey(), new DarkFeature(darkFeatureConfig));\n    }\n  }\n\n  public DarkFeature getDarkFeature(String featureKey) {\n    return darkFeatures.get(featureKey);\n  }\n}\n</code></pre><p><strong>我们最后来看下DarkFeature类。</strong>DarkFeature类表示每个要灰度的业务功能的灰度规则。DarkFeature将配置文件中灰度规则，解析成一定的结构（比如RangeSet），方便快速判定某个灰度对象是否落在灰度规则范围内。具体的代码如下所示：</p><pre><code>public class DarkFeature {\n  private String key;\n  private boolean enabled;\n  private int percentage;\n  private RangeSet&lt;Long&gt; rangeSet = TreeRangeSet.create();\n\n  public DarkFeature(DarkRuleConfig.DarkFeatureConfig darkFeatureConfig) {\n    this.key = darkFeatureConfig.getKey();\n    this.enabled = darkFeatureConfig.getEnabled();\n    String darkRule = darkFeatureConfig.getRule().trim();\n    parseDarkRule(darkRule);\n  }\n\n  @VisibleForTesting\n  protected void parseDarkRule(String darkRule) {\n    if (!darkRule.startsWith(&quot;{&quot;) || !darkRule.endsWith(&quot;}&quot;)) {\n      throw new RuntimeException(&quot;Failed to parse dark rule: &quot; + darkRule);\n    }\n\n    String[] rules = darkRule.substring(1, darkRule.length() - 1).split(&quot;,&quot;);\n    this.rangeSet.clear();\n    this.percentage = 0;\n    for (String rule : rules) {\n      rule = rule.trim();\n      if (StringUtils.isEmpty(rule)) {\n        continue;\n      }\n\n      if (rule.startsWith(&quot;%&quot;)) {\n        int newPercentage = Integer.parseInt(rule.substring(1));\n        if (newPercentage &gt; this.percentage) {\n          this.percentage = newPercentage;\n        }\n      } else if (rule.contains(&quot;-&quot;)) {\n        String[] parts = rule.split(&quot;-&quot;);\n        if (parts.length != 2) {\n          throw new RuntimeException(&quot;Failed to parse dark rule: &quot; + darkRule);\n        }\n        long start = Long.parseLong(parts[0]);\n        long end = Long.parseLong(parts[1]);\n        if (start &gt; end) {\n          throw new RuntimeException(&quot;Failed to parse dark rule: &quot; + darkRule);\n        }\n        this.rangeSet.add(Range.closed(start, end));\n      } else {\n        long val = Long.parseLong(rule);\n        this.rangeSet.add(Range.closed(val, val));\n      }\n    }\n  }\n\n  public boolean enabled() {\n    return this.enabled;\n  }\n\n  public boolean dark(long darkTarget) {\n    boolean selected = this.rangeSet.contains(darkTarget);\n    if (selected) {\n      return true;\n    }\n\n    long reminder = darkTarget % 100;\n    if (reminder &gt;= 0 &amp;&amp; reminder &lt; this.percentage) {\n      return true;\n    }\n\n    return false;\n  }\n\n  public boolean dark(String darkTarget) {\n    long target = Long.parseLong(darkTarget);\n    return dark(target);\n  }\n}\n</code></pre><h2>添加、优化灰度组件功能</h2><p>在第一步中，我们完成了灰度组件的基本功能。在第二步中，我们再实现基于编程的灰度规则配置方式，用来支持更加复杂、更加灵活的灰度规则。</p><p>我们需要对于第一步实现的代码，进行一些改造。改造之后的代码目录结构如下所示。其中，DarkFeature、DarkRuleConfig的基本代码不变，新增了IDarkFeature接口，DarkLaunch、DarkRule的代码有所改动，用来支持编程实现灰度规则。</p><pre><code>// 第一步的代码目录结构\ncom.xzg.darklaunch\n  --DarkLaunch(框架的最顶层入口类)\n  --DarkFeature(每个feature的灰度规则)\n  --DarkRule(灰度规则)\n  --DarkRuleConfig(用来映射配置到内存中)\n\n// 第二步的代码目录结构\ncom.xzg.darklaunch\n  --DarkLaunch(框架的最顶层入口类，代码有改动)\n  --IDarkFeature(抽象接口)\n  --DarkFeature(实现IDarkFeature接口，基于配置文件的灰度规则，代码不变)\n  --DarkRule(灰度规则，代码有改动)\n  --DarkRuleConfig(用来映射配置到内存中，代码不变)\n</code></pre><p>我们先来看下IDarkFeature接口，它用来抽象从配置文件中得到的灰度规则，以及编程实现的灰度规则。具体代码如下所示：</p><pre><code>public interface IDarkFeature {\n  boolean enabled();\n  boolean dark(long darkTarget);\n  boolean dark(String darkTarget);\n}\n</code></pre><p>基于这个抽象接口，业务系统可以自己编程实现复杂的灰度规则，然后添加到DarkRule中。为了避免配置文件中的灰度规则热更新时，覆盖掉编程实现的灰度规则，在DarkRule中，我们对从配置文件中加载的灰度规则和编程实现的灰度规则分开存储。按照这个设计思路，我们对DarkRule类进行重构。重构之后的代码如下所示：</p><pre><code>public class DarkRule {\n  // 从配置文件中加载的灰度规则\n  private Map&lt;String, IDarkFeature&gt; darkFeatures = new HashMap&lt;&gt;();\n  // 编程实现的灰度规则\n  private ConcurrentHashMap&lt;String, IDarkFeature&gt; programmedDarkFeatures = new ConcurrentHashMap&lt;&gt;();\n\n  public void addProgrammedDarkFeature(String featureKey, IDarkFeature darkFeature) {\n    programmedDarkFeatures.put(featureKey, darkFeature);\n  }\n\n  public void setDarkFeatures(Map&lt;String, IDarkFeature&gt; newDarkFeatures) {\n    this.darkFeatures = newDarkFeatures;\n  }\n\n  public IDarkFeature getDarkFeature(String featureKey) {\n    IDarkFeature darkFeature = programmedDarkFeatures.get(featureKey);\n    if (darkFeature != null) {\n      return darkFeature;\n    }\n    return darkFeatures.get(featureKey);\n  }\n}\n</code></pre><p>因为DarkRule代码有所修改，对应地，DarkLaunch的代码也需要做少许改动，主要有一处修改和一处新增代码，具体如下所示，我在代码中都做了注释，就不再重复解释了。</p><pre><code>public class DarkLaunch {\n  private static final Logger log = LoggerFactory.getLogger(DarkLaunch.class);\n  private static final int DEFAULT_RULE_UPDATE_TIME_INTERVAL = 60; // in seconds\n  private DarkRule rule = new DarkRule();\n  private ScheduledExecutorService executor;\n\n  public DarkLaunch(int ruleUpdateTimeInterval) {\n    loadRule();\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n    this.executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        loadRule();\n      }\n    }, ruleUpdateTimeInterval, ruleUpdateTimeInterval, TimeUnit.SECONDS);\n  }\n\n  public DarkLaunch() {\n    this(DEFAULT_RULE_UPDATE_TIME_INTERVAL);\n  }\n\n  private void loadRule() {\n    InputStream in = null;\n    DarkRuleConfig ruleConfig = null;\n    try {\n      in = this.getClass().getResourceAsStream(&quot;/dark-rule.yaml&quot;);\n      if (in != null) {\n        Yaml yaml = new Yaml();\n        ruleConfig = yaml.loadAs(in, DarkRuleConfig.class);\n      }\n    } finally {\n      if (in != null) {\n        try {\n          in.close();\n        } catch (IOException e) {\n          log.error(&quot;close file error:{}&quot;, e);\n        }\n      }\n    }\n\n    if (ruleConfig == null) {\n      throw new RuntimeException(&quot;Can not load dark rule.&quot;);\n    }\n    \n    // 修改：单独更新从配置文件中得到的灰度规则，不覆盖编程实现的灰度规则\n    Map&lt;String, IDarkFeature&gt; darkFeatures = new HashMap&lt;&gt;();\n    List&lt;DarkRuleConfig.DarkFeatureConfig&gt; darkFeatureConfigs = ruleConfig.getFeatures();\n    for (DarkRuleConfig.DarkFeatureConfig darkFeatureConfig : darkFeatureConfigs) {\n      darkFeatures.put(darkFeatureConfig.getKey(), new DarkFeature(darkFeatureConfig));\n    }\n    this.rule.setDarkFeatures(darkFeatures);\n  }\n\n  // 新增：添加编程实现的灰度规则的接口\n  public void addProgrammedDarkFeature(String featureKey, IDarkFeature darkFeature) {\n    this.rule.addProgrammedDarkFeature(featureKey, darkFeature);\n  }\n\n  public IDarkFeature getDarkFeature(String featureKey) {\n    IDarkFeature darkFeature = this.rule.getDarkFeature(featureKey);\n    return darkFeature;\n  }\n}\n</code></pre><p>灰度组件的代码实现就讲完了。我们再通过一个Demo来看下，目前实现的灰度组件该如何使用。结合着Demo，再去理解上面的代码，会更容易些。Demo代码如下所示：</p><pre><code>// 灰度规则配置(dark-rule.yaml)，放到classpath路径下\nfeatures:\n- key: call_newapi_getUserById\n  enabled: true\n  rule: {893,342,1020-1120,%30}\n- key: call_newapi_registerUser\n  enabled: true\n  rule: {1391198723, %10}\n- key: newalgo_loan\n  enabled: true\n  rule: {0-100}\n  \n// 编程实现的灰度规则\npublic class UserPromotionDarkRule implements IDarkFeature {\n  @Override\n  public boolean enabled() {\n    return true;\n  }\n\n  @Override\n  public boolean dark(long darkTarget) {\n    // 灰度规则自己想怎么写就怎么写\n    return false;\n  }\n\n  @Override\n  public boolean dark(String darkTarget) {\n    // 灰度规则自己想怎么写就怎么写\n    return false;\n  }\n}\n\n// Demo\npublic class Demo {\n  public static void main(String[] args) {\n    DarkLaunch darkLaunch = new DarkLaunch(); // 默认加载classpath下dark-rule.yaml文件中的灰度规则\n    darkLaunch.addProgrammedDarkFeature(&quot;user_promotion&quot;, new UserPromotionDarkRule()); // 添加编程实现的灰度规则\n    IDarkFeature darkFeature = darkLaunch.getDarkFeature(&quot;user_promotion&quot;);\n    System.out.println(darkFeature.enabled());\n    System.out.println(darkFeature.dark(893));\n  }\n}\n</code></pre><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>到今天为止，项目实战环节就彻底结束了。在这一部分中，我们通过限流、幂等、灰度这三个实战项目，带你从需求分析、系统设计、代码实现这三个环节，学习了如何进行功能性、非功能性需求分析，如何通过合理的设计，完成功能性需求的同时，满足非功能性需求，以及如何编写高质量的代码实现。</p><p>实际上，项目本身的分析、设计、实现并不重要，不必对细节过于纠结。我希望通过这三个例子，分享我的思考路径、开发套路，让你借鉴并举一反三地应用到你平时的项目开发中。我觉得这才是最有价值的，才是你学习的重点。</p><p>如果你学完这一部分之后，对于项目中的一些通用的功能，能够开始下意识地主动思考代码复用的问题，考虑如何抽象成框架、类库、组件，并且对于如何开发，也不再觉得无从下手，而是觉得有章可循，那我觉得你就学到了这一部分的精髓。</p><h2>课堂讨论</h2><p>在DarkFeature类中，灰度规则的解析代码设计的不够优雅，你觉得问题在哪里呢？又该如何重构呢？</p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":227355,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1592362281,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"169096086825","product_id":100039001,"comment_content":"这个DarkFeature类中灰度规则的解析代码不优雅的地方在于不够灵活，如果有新的灰度规则要加入，就需要再添加if else作处理，破坏了开闭原则，为了解决这一问题，可以使用工厂模式➕策略模式来保证开闭原则和消除if&#47;else，使用工厂模式来实现针对每个灰度规则的处理，使用“查表法”的策略模式来消除if&#47;else！","like_count":40,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304672,"discussion_content":"顶上去，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599639179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227292,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1153239,"ip_address":"","ucode":"459D3303717703","user_header":"https://static001.geekbang.org/account/avatar/00/11/98/d7/7f7a0e6f.jpg","comment_is_top":false,"comment_ctime":1592354153,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"74606798185","product_id":100039001,"comment_content":"可以使用解释器模式，将不同类型的规则解析拆分到不同的类中。","like_count":17,"discussions":[{"author":{"id":1598564,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","nickname":"劳码识途","note":"","ucode":"7AEF4D9407F097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310602,"discussion_content":"不好弄，因为灰度组件和业务是强相关的，有时候规则可能需要查询数据库，这个一个简单的语言解释器是无法实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601945924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227274,"user_name":"tingye","can_delete":false,"product_type":"c1","uid":1391463,"ip_address":"","ucode":"54F7A44066DF5D","user_header":"https://static001.geekbang.org/account/avatar/00/15/3b/67/c188d3bc.jpg","comment_is_top":false,"comment_ctime":1592351584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61721893728","product_id":100039001,"comment_content":"可以考虑用职责链模式，将不同规则字符串的解析抽象为单独的handle类，依次解析直到完成处理，也方便扩展对新规则编写语法的解析","like_count":14},{"had_liked":false,"id":240263,"user_name":"Jagger","can_delete":false,"product_type":"c1","uid":1914208,"ip_address":"","ucode":"0BD13223AEE076","user_header":"https://static001.geekbang.org/account/avatar/00/1d/35/60/d3e723a7.jpg","comment_is_top":false,"comment_ctime":1596814376,"is_pvip":true,"replies":[{"id":"89263","content":"嗯嗯，会，最好是再声明一个构造函数，传递executor进去","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1597453559,"ip_address":"","comment_id":240263,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44546487336","product_id":100039001,"comment_content":"DarkLaunch 构造器包含定时轮询，会不会影响单元测试？","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503392,"discussion_content":"嗯嗯，会，最好是再声明一个构造函数，传递executor进去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597453559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227261,"user_name":"robincoin","can_delete":false,"product_type":"c1","uid":1053243,"ip_address":"","ucode":"BA89BCEA1D6B9D","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/3b/969eedf2.jpg","comment_is_top":false,"comment_ctime":1592340483,"is_pvip":false,"replies":[{"id":"83994","content":"支持! 封装来进一步简化开发！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1592525645,"ip_address":"","comment_id":227261,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27362144259","product_id":100039001,"comment_content":"mq和数据库灰度是不是要对mq和数据库再封装一层，方便aop处理？","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498558,"discussion_content":"支持! 封装来进一步简化开发！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592525645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803858,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/86/52/b92dc111.jpg","nickname":"Tobias","note":"","ucode":"F3225639EDA193","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296392,"discussion_content":"数据库灰度是不是可以考虑使用mybatis plugin 的方式实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596531092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227375,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1592365572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23067202052","product_id":100039001,"comment_content":"在此类场景下,我们可以简单的使用工厂类去封装规则的解析,<br>但是我个人觉着,应该以配置文件中配置的规则为主,所以,第二版需要在配置文件中写上实现接口的全限定类名,反射获取实例,同样支持更新,这样配置文件的Map就可以移除了,而且可以将简单的原生三种解析规则也抽象为接口,利用策略类进行区分调用<br>","like_count":5},{"had_liked":false,"id":228579,"user_name":"强哥","can_delete":false,"product_type":"c1","uid":1206726,"ip_address":"","ucode":"3B8DC780FE4EF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/c6/513df085.jpg","comment_is_top":false,"comment_ctime":1592743036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18772612220","product_id":100039001,"comment_content":"这个灰度组件感觉适用简单场景，规则之间的表达式、优先级等组合方式不支持，规则的定义很重要。热更新可以通过zk下放到服务器上，通过sdk将配置信息加载到内存中。","like_count":4},{"had_liked":false,"id":227399,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1592371607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14477273495","product_id":100039001,"comment_content":"1.定时任务在方法内部创建和使用，这样就没办法手动调定时任务的退出方法了。<br><br>2.感觉业务接口的路由规则的选型和路由规则的具体实现应该分离。DarkFear里面应该只要表明，哪个业务接口用哪个灰度规则，这个意图就好。至于灰度规则的具体实现，包括dsl的解析和灰度规则的执行都应该剥离出来单独封装。","like_count":3},{"had_liked":false,"id":227310,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1592356282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14477258170","product_id":100039001,"comment_content":"可以考虑引入策略模式和工厂模式，消除if else","like_count":3},{"had_liked":false,"id":247240,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1599639117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189573709","product_id":100039001,"comment_content":"DarkFeature类扩展性、灵活性都较弱，如果feature配置新增了字段，那么就要修改类内部的解析代码，不满足开闭原则。可以把parse函数单独拿出来，抽象成一个Parser接口，针对不同的feature配置格式，实现不同的parser。这样的话，对于配置格式的改动，只要修改或扩展相应的parser类就行了，不用改动DarkFeature类的代码，达到了对于修改的隔离。","like_count":2},{"had_liked":false,"id":227349,"user_name":"罗 乾 林","can_delete":false,"product_type":"c1","uid":1188222,"ip_address":"","ucode":"D0406F95176ABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7e/fb725950.jpg","comment_is_top":false,"comment_ctime":1592360998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182295590","product_id":100039001,"comment_content":" “DarkFeature 类中，灰度规则的解析代码“，是我能想到最直接简单的方式。我想可以抽象出规则解析类，对规则的解析交个解析类处理，将解析类对象注入到DarkFeature 类中。这样DarkFeature职责更单一","like_count":2},{"had_liked":false,"id":227307,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1592355951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182290543","product_id":100039001,"comment_content":"parsedarkrule的代码可以单独出来","like_count":2},{"had_liked":false,"id":322391,"user_name":"果果果","can_delete":false,"product_type":"c1","uid":1016631,"ip_address":"","ucode":"219713AAA12FE7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/37/7e18b532.jpg","comment_is_top":false,"comment_ctime":1637339189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5932306485","product_id":100039001,"comment_content":"感谢王争老师，看完这本书后的最大收获是，自己动手完成了一个功能更为丰富的灰度组件，支持动态数据源、以及数据源的扩展、支持规则执行结果跟踪。<br>github地址<br>https:&#47;&#47;github.com&#47;TangGuoGuoR&#47;ab-gray","like_count":1},{"had_liked":false,"id":274036,"user_name":"Leaf","can_delete":false,"product_type":"c1","uid":1102194,"ip_address":"","ucode":"9AB56B7971237D","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/72/4cc8475c.jpg","comment_is_top":false,"comment_ctime":1610794068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905761364","product_id":100039001,"comment_content":"如果要集成到 spring 框架中，有些地方的设计和实现是否需要调整？比如：<br>1. ruleUpdateInterval 是要放到配置中，这样便于依赖注入？<br>2. loadRules 是否使用 spring 的 configuration 来替代？<br>3. addProgrammedDarkFeature 是否需要做成配置的方式？<br>","like_count":1},{"had_liked":false,"id":245608,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1599008584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893975880","product_id":100039001,"comment_content":"震撼，其实思考方式就是最大的收获，这是作者多年的经验。","like_count":1},{"had_liked":false,"id":239434,"user_name":"Tobias","can_delete":false,"product_type":"c1","uid":1803858,"ip_address":"","ucode":"F3225639EDA193","user_header":"https://static001.geekbang.org/account/avatar/00/1b/86/52/b92dc111.jpg","comment_is_top":false,"comment_ctime":1596530906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891498202","product_id":100039001,"comment_content":"问：在 DarkFeature 类中，灰度规则的解析代码设计的不够优雅，你觉得问题在哪里呢？又该如何重构呢？<br>答：首先，parseDarkRule方法可读性和可测试性不好：方法代码偏多，if-else比较多。其次，可扩展性不好，如果将来又新增一种规则格式，需要在parseDarkRule插入代码解析规则，违背开闭原则。<br>解决方法：将parseDarkRule规则解析继续拆分成更小的类，每个类对不同的规则定义进行解析(e.g. 范围规则，百分比规则 etc.) 。相信解析器模式可以很好的解决这个问题。","like_count":1},{"had_liked":false,"id":234824,"user_name":"汝林外史","can_delete":false,"product_type":"c1","uid":1188906,"ip_address":"","ucode":"3C66C0F0537A99","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/2a/33441e2b.jpg","comment_is_top":false,"comment_ctime":1594804929,"is_pvip":false,"replies":[{"id":"86782","content":"有呀，你说没有是指的哪部分？能详细说说吗","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594903391,"ip_address":"","comment_id":234824,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5889772225","product_id":100039001,"comment_content":"好像dark方法中没有对区间的规则进行处理","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501519,"discussion_content":"有呀，你说没有是指的哪部分？能详细说说吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594903391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1463740,"avatar":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","nickname":"Yeyw","note":"","ucode":"C9D20DB91C3BE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371630,"discussion_content":"rangeSet就是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619878767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232001,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1593828608,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5888795904","product_id":100039001,"comment_content":"利用spi机制+热加载实现编程规则会更加优雅写","like_count":1},{"had_liked":false,"id":227302,"user_name":"leezer","can_delete":false,"product_type":"c1","uid":1111111,"ip_address":"","ucode":"427DE9CD21E1EC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/TEzJ59GslVXQeZqwFgGhABF7K8bFFlud2pcsEPvEyruP7NGQTuh38IbiajdVYUSViaDJrIkJVnv3vdjPA9YENp5w/132","comment_is_top":false,"comment_ctime":1592355331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887322627","product_id":100039001,"comment_content":"解析规则可以参考之前，使用工厂模式回去解析器，通过对应的解析器进行解析对应的配置文件.","like_count":1},{"had_liked":false,"id":357862,"user_name":"郑卫林","can_delete":false,"product_type":"c1","uid":1941858,"ip_address":"广东","ucode":"13D14BDDCBC7AC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ff70ZuQbiaP0aUkNPasRkHfyIEyGLsMBd1EYQgQYZRoH85c4SsibWHJgA3u0X4Z8QyxHs17ausF2V4oN9hdYyfRg/132","comment_is_top":false,"comment_ctime":1663690822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663690822","product_id":100039001,"comment_content":"打开完成！<br>","like_count":0},{"had_liked":false,"id":328726,"user_name":"idiot","can_delete":false,"product_type":"c1","uid":2526391,"ip_address":"","ucode":"D7A6E980B530B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fcftgBsticCicEEkuzB0GTkHIocX62YVTSvnhR1c94sccj42lVaYXrmcZyhzUI3l9NcvuN1rXLhXt2eBrZZ0Tw7A/132","comment_is_top":false,"comment_ctime":1640853285,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640853285","product_id":100039001,"comment_content":"darkrule和darkfeature的包含关系不明显，要仔细看注释或者说明才知道。第一个改darkrules，或者第二个改darkruleoffeature？","like_count":0},{"had_liked":false,"id":326988,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1639815714,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639815714","product_id":100039001,"comment_content":"可以抽象出一个解析接口，解析实现类，外部依赖注入到dark future。","like_count":0},{"had_liked":false,"id":314837,"user_name":"makermade","can_delete":false,"product_type":"c1","uid":1133194,"ip_address":"","ucode":"03386B90CB8F20","user_header":"https://static001.geekbang.org/account/avatar/00/11/4a/8a/c1069412.jpg","comment_is_top":false,"comment_ctime":1633491703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633491703","product_id":100039001,"comment_content":"有GitHub仓库链接吗","like_count":0},{"had_liked":false,"id":290959,"user_name":"Yeyw","can_delete":false,"product_type":"c1","uid":1463740,"ip_address":"","ucode":"C9D20DB91C3BE5","user_header":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","comment_is_top":false,"comment_ctime":1619878505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619878505","product_id":100039001,"comment_content":"规则扩展复杂的话可以用解释器，但是加载配置的话 我觉得定时会重复加载，定时加载加个判断吧，也可以暴露重新加载配置的方法，供开发提供自己自主刷新的接口","like_count":0},{"had_liked":false,"id":244175,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1598418177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598418177","product_id":100039001,"comment_content":"舍不得结束","like_count":0},{"had_liked":false,"id":232275,"user_name":"学渣！！！","can_delete":false,"product_type":"c1","uid":1224654,"ip_address":"","ucode":"A224265D9E7CCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/ce/d7ae8da9.jpg","comment_is_top":false,"comment_ctime":1593940745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593940745","product_id":100039001,"comment_content":"更新的查询的并发冲突问题是指的什么呢？新建一个对象赋值就可以解决","like_count":0}]}