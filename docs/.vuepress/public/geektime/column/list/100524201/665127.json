{"id":665127,"title":"50｜折半插入、2路插入、表插入：3种插入类排序类排序有哪些异同？","content":"<p>你好，我是王健伟。</p><p>在插入类排序中，除了我们以往学习过的直接插入排序和希尔排序之外，比较重点的还有折半插入排序、2路插入排序和表插入排序。考虑到在面试中，这几种插入类排序的出现频率与直接插入排序、希尔排序相比要低一些，也为了防止你一直学习各种排序算法感觉太枯燥，所以我将它们放到了后面这里来讲解。</p><p>这节课，我们就专注理解这三种排序算法。</p><h2>折半（二分）插入排序（Binary Insertion Sort）</h2><p>前面我们学习的直接插入排序，是将一个待插入数据与一个已经排好序的序列中的数据进行逐个比较来确定插入数据的位置。</p><p>其实，我们完全可以用折半查找（Binary Search，也叫二分查找）的方式找到应该插入的位置，而后再移动元素。如图1所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/72/yy/72cd820f9117426c87a24ee30794b5yy.jpg?wh=1379x408\" alt=\"图片\" title=\"图1 折半插入排序示意图\"></p><p>在图1中，元素1、16、23、45、99已经排好序了。现在，即将对元素2进行排序。如果按以往的直接插入排序算法进行排序，2要依次和99、45、23、16、1比较，直至发现值比1大，才算找到了自己的插入位置应该为下标为[1]的位置。而且每次比较时还要进行元素的移动操作，比如元素99要移动到[5]位置，45要移动到[4]位置，23要移动到[3]位置16要移动到[2]位置。</p><p>而对于折半插入排序，指的是在已经排好序的序列（有序区）中，使用折半查找的方式去确定待排序元素的插入位置。看一看如果即将对元素2进行排序，是怎样操作的呢？</p><!-- [[[read_end]]] --><ul>\n<li>因为元素2的位置是[5]，这表示位置为[0]到位置为[4]这5个元素是排好序的了。所以找到这5个已经排好序的元素的中间位置，即(4-0)/2 = 2。</li>\n<li>因为第2个下标位置的元素是23，显然根据从小到大的排序规则，元素2是要插入到元素23左边的。所以接下来，在下标位置[0]到[1]之间寻找元素2要插入的位置即可。</li>\n<li>继续取位置[0]到位置[1]的中间位置，即(1-0)/2 = 0。</li>\n<li>因为第0个下标位置的元素是1，显然元素2是要插入到元素1右边的。其实也就是在位置[0]到位置[1]之间。</li>\n<li>就这样不断利用折半查找法寻找要插入的位置，直到左侧位置的下标值比右侧位置的下标值大的时候停止查找，此时插入位置就确定了，然后进行元素的右移和复制操作即可。</li>\n</ul><p>折半插入排序的实现代码同样有很多种，但在这里我依旧采用逻辑上更为简单、好理解的代码实现方式。</p><pre><code class=\"language-plain\">//折半插入排序（从小到大）\ntemplate&lt;typename T&gt;\nvoid HalfInsertSort(T myarray[], int length)\n{\n\tif (length &lt;= 1) //不超过1个元素的数组，没必要排序\n\t\treturn;\n\t\n\tfor (int i = 1; i &lt; length; ++i) //从第2个元素（下标为1）开始比较\n\t{\n\t\tif (myarray[i] &lt; myarray[i - 1])\n\t\t{\n\t\t\tT temp = myarray[i];&nbsp; &nbsp;//暂存a[i]值，防止后续移动元素时值被覆盖\n\t\t\t\t\n\t\t\t//记录查找的左右区间范围\n\t\t\tint left = 0;\n\t\t\tint right = i - 1;\n\t\t\t\n\t\t\twhile (left &lt;= right) //注意while结束条件\n\t\t\t{\n\t\t\t\t//取得中间元素\n\t\t\t\tint mid = (right - left) / 2 + left;\n\t\t\t\tif (myarray[mid] &gt; temp)\n\t\t\t\t{\n\t\t\t\t\t//待排的元素值更小，将搜索的区间缩小到左边的一半区域\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//待排的元素值更大，将搜索区间你缩小到右边的一半区域\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t}\n\t\t\t} //end while\n\t\t\t\n\t\t\tint j;\n\t\t\tfor (j = i - 1; j &gt;= right + 1; --j)&nbsp;\n\t\t\t{\n\t\t\t\tmyarray[j + 1] = myarray[j];\n\t\t\t} //end for j\n\t\t\tmyarray[right + 1] = temp;\n\t\t} //end if\n\t} //end for i\n\treturn;\n}\n</code></pre><p>在main主函数中，加入测试代码。</p><pre><code class=\"language-plain\">int arr[] = {16,1,45,23,99,2,18,67,42,10};\n\t\nint length = sizeof(arr) / sizeof(arr[0]);&nbsp; &nbsp;//数组中元素个数\nHalfInsertSort(arr, length);//对数组元素进行折半插入排序\n\n//输出排好序的数组中元素内容\ncout &lt;&lt;\"折半插入排序结果为：\";\nfor (int i = 0; i &lt; length; ++i)\n{\n\tcout &lt;&lt; arr[i] &lt;&lt;\"\";\n}\ncout &lt;&lt; endl; //换行\n</code></pre><p>下面是具体的执行结果。<br>\n<img src=\"https://static001.geekbang.org/resource/image/28/c5/28a04232a6a8e52483fcbaf823cdd0c5.jpg?wh=1920x82\" alt=\"图片\"></p><p>从上述代码可以看到，<strong>折半插入排序算法只减少了关键字的比较次数，并没有减少记录的移动次数</strong><strong>。</strong>所以时间复杂度仍旧为O($n^{2}$)，此排序算法也是稳定的。</p><h2>2路插入排序（Two-Way Insertion Sort）</h2><p>上述折半插入排序中，只减少了关键字的比较次数，并没有减少记录的移动次数。而2路插入排序是对折半插入排序的改进，目的是减少排序过程中记录的移动次数，但需要n个记录的辅助数组空间（与原数组空间大小一致），而且这个辅助数组空间其实是被当成了一个环状空间来使用的。</p><p>看下图2，2路插入排序示意图。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/9d/475fa1340ae2d861302a3fe9c0807d9d.jpg?wh=1920x1002\" alt=\"图片\" title=\"图2&nbsp; 2路插入排序示意图\"></p><p>在图2中，首先开辟出了一个与原数组空间大小相同的辅助数组空间，用于存放排序后的结果，2路插入排序要经历这么几个步骤。</p><ul>\n<li><strong>子图1</strong>：将原始数组空间的第一个元素16放入辅助数组空间的第1个位置。设置两个指针，一个代表头指针，命名为head，另一个代表尾指针，命名为tail，开始都指向辅助数组空间的第1个位置元素16。</li>\n<li><strong>子图2</strong>：拿出原始数组空间的第2个元素1，与辅助数组空间的元素16作比较，因为1&lt;16，所以应该放到16的左边，但因为辅助数组空间中元素16左边已经没位置了，此时就把辅助数组空间看成一个环形空间，这意味着元素16左边的位置其实就是辅助数组空间的最后一个位置，于是把元素1放到最后一个位置（下标为9），同时让head指针指向该位置。</li>\n<li><strong>子图3</strong>：继续拿出原始空间的第3个元素45，先与head（元素1）所指元素作比较看是否更小，结果发现并没有更小，于是又与tail（元素16）作比较看是否更大，是更大，于是把元素45放到tail所指位置后面的位置，同时让tail指针指向元素45所在位置。</li>\n<li><strong>子图4</strong>：继续拿出原始空间的第4个元素23，先与head（元素1）所指元素比看是否更小，并没有更小，于是又与tail相比看（元素45）是否更大，并没有更大。此时原始空间中的数据既不小于辅助数组空间中的头元素，也不大于辅助空间中的尾元素，那就真的需要在辅助数组空间中移动数据了。找到23应该插入的位置并插入23，45向后移动，同时注意更改tail的指针让其保持指向元素45。</li>\n<li><strong>子图5到子图10</strong>的情况与前面这几个子图所介绍的情况类似，这里就不赘述。</li>\n<li><strong>子图11</strong>：排序完毕后，还要把辅助数组空间中的数据（从head指针开始到tail指针之间的数据）依次拷贝回原始空间中从下标0开始的位置。</li>\n</ul><p>从上述步骤可以看到，只要向辅助数组中插入的元素值比head所指向的元素数值小或者比tail指向的元素数值大，那么插入的元素就不会导致辅助数组中其他元素的移动。</p><pre><code class=\"language-plain\">//2路插入排序（从小到大）\ntemplate&lt;typename T&gt;\nvoid TwoWayInsertSort(T myarray[], int length)\n{\n\tif (length &lt;= 1) //不超过1个元素的数组，没必要排序\n\t\treturn;\n\t\n\tT* pfzarray = new T[length]; //创建辅助数组空间\n\tpfzarray[0] = myarray[0];&nbsp; //将原始数组空间的第一个元素放入辅助数组空间第1个位置\n\tint head = 0; //头指针指向第一个位置（下标为0的元素）\n\tint tail = 0; //尾指针指向第一个位置（下标为0的元素）\n\t\t\n\tfor (int i = 1; i &lt; length; ++i)\n\t{\n\t\tif (myarray[i] &lt; pfzarray[head]) //小于头\n\t\t{\n\t\t\t//往头前面插入\n\t\t\thead = (head - 1 + length) % length; //要保证head值在0到(length-1)之间\n\t\t\tpfzarray[head] = myarray[i];\n\t\t}\n\t\telse if (myarray[i] &gt; pfzarray[tail]) //大于尾\n\t\t{\n\t\t\ttail++;\n\t\t\tpfzarray[tail] = myarray[i];\n\t\t}\n\t\telse //数据既不小于头，也不大于尾，要往中间插入\n\t\t{\n\t\t\t//这里要移动数据了\n\t\t\ttail++;\n\t\t\tpfzarray[tail] = pfzarray[tail - 1];\n\t\t\tint j;\n\t\t\tfor (j = tail - 1; myarray[i] &lt; pfzarray[(j - 1 + length) % length]; j = (j - 1 + length) % length)\n\t\t\t{\n\t\t\t\tpfzarray[j] = pfzarray[(j - 1 + length) % length];\n\t\t\t}//end for j\n\t\t\tpfzarray[j] = myarray[i];\n\t\t} //end if\n\t} //end for i\n\t\t\n\tfor (int i = 0; i &lt; length; ++i)\n\t{\n\t\tmyarray[i] = pfzarray[head];\n\t\thead = (head + 1) % length;\n\t} //end for i\n\t\n\tdelete[] pfzarray;\n\treturn;\n}\n</code></pre><p>在main主函数中，把对HalfInsertSort函数的调用修改为对TwoWayInsertSort函数的调用。</p><pre><code class=\"language-plain\">......\n//HalfInsertSort(arr, length); //对数组元素进行折半插入排序\nTwoWayInsertSort(arr, length);//对数组元素进行2路插入排序\n\n//输出排好序的数组中元素内容\ncout &lt;&lt;\"2路插入排序结果为：\";\n......\n</code></pre><p>下面是执行结果。<br>\n<img src=\"https://static001.geekbang.org/resource/image/12/fe/128e863f256b17f8d54aa2d2041839fe.jpg?wh=1920x83\" alt=\"图片\"></p><p>从上述代码可以看到，<strong>2路插入排序虽然可以减少移动记录的次数，但无法绝对避免移动记录</strong>。而且，如果原数组中第一个元素本来就是最小值或最大值（意味着不可能在其前面或后面插入其他元素），此时2路插入排序算法的优势就无法体现了。</p><p>当然，上述2路插入排序算法中可以融合折半插入排序算法中的代码，从而达到减少关键字比较次数的目的，但实现代码可能会比较繁琐和不易理解，有兴趣可以自行实现。</p><p>不难看到，2路插入排序算法时间复杂度仍旧为O($n^{2}$)，空间复杂度为O(n)，体现了空间换时间以提高算法执行效率的编程思想。这个排序算法也是稳定的。</p><h2>表插入排序（Table Insertion Sort）</h2><p>前面叙述的各种插入类排序算法，在排序过程中不可避免地要移动记录。但是，<strong>如果希望在排序的过程中不移动记录，就要通过表插入排序来达成</strong>。</p><p>表插入排序可以使用静态链表（前面讲解过）作为待排序记录的存储结构。我们先回顾一下静态链表的每个节点定义，这里就要用到下面这些代码。</p><pre><code class=\"language-plain\">//静态链表中每个节点的定义\ntemplate &lt;typename T&gt;//T代表数据元素的类型\nstruct SLNode&nbsp; &nbsp;\n{\n\tT&nbsp; &nbsp; &nbsp; &nbsp; data;&nbsp; //元素数据域，存放数据元素\n\tint&nbsp; &nbsp; &nbsp; cur;&nbsp; &nbsp;//游标，记录下个静态链表节点的数组下标\n};\n</code></pre><p>看下图3，表插入排序示意图。</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/ab/a29c5a7908013b55b8ac4aa46c40a7ab.jpg?wh=1920x1143\" alt=\"图片\" title=\"图3&nbsp; 表插入排序示意图\"></p><p>在图3中，表插入排序要经历如下步骤。</p><ul>\n<li>将下标为[0]的位置留出来用于代表静态链表头节点。将所有游标先设置为0，并假设第一个数据16是排序好的。头节点永远会指向值最小的数据。所以把头节点的游标修改为1，这表示头节点指向下标为1的位置即16。而数据16的游标是0（缺省值），这也代表数据16指向的下个元素是头节点，头节点和数据16互相指向构成一个循环链表的感觉。</li>\n<li><strong>子图1</strong>：从16的下个数据即元素1开始进入到真正的排序。元素1目前是最小的元素，所以只能将头节点所代表的元素作为元素1的前趋元素。所以头节点的游标1先作为元素1的游标值，然后再将元素1对应的下标位置（2）作为头节点的新游标值。</li>\n<li><strong>子图2</strong>：继续观察下个元素45，因为元素16是45的前趋元素。所以元素16的游标值0先作为元素45的游标值，然后再将元素45对应的下标位置（3）作为元素16的新游标值。</li>\n<li><strong>子图3</strong>：继续观察下个元素23，因为元素16是23的前趋元素。所以元素16的游标值3先作为元素23的游标值，然后再将元素23对应的下标位置（4）作为元素16的新游标值。</li>\n<li><strong>子图4</strong>：重复上面这两个步骤，最后会得到一个排好序的静态链表结构。<br>\n从上述步骤可以看到，表插入排序并不需要真正移动元素的位置。</li>\n</ul><pre><code class=\"language-plain\">//表插入排序（从小到大）\ntemplate&lt;typename T&gt;\t\nvoid TableInsertSort(T myarray[], int length)\n{\n\tif (length &lt;= 1) //不超过1个元素的数组，没必要排序\n\t\treturn;\n\t\n\tSLNode&lt;T&gt; *tbl = new SLNode&lt;T&gt;[length + 1];\n\tfor (int i = 1; i &lt; (length + 1); ++i) //注意i的开始值\n\t{\n\t\ttbl[i].data = myarray[i-1];\n\t\ttbl[i].cur = 0;\n\t} //end for i\t\t\n\ttbl[0].cur = 1; //头节点指向下标为1的位置\n\tfor (int i = 2; i &lt; (length + 1); ++i)\n\t{\t\n\t\tint tmpcur = tbl[0].cur; //1\n\t\tint tmpcur_prev = 0; //前趋\n\t\t\n\t\twhile (tmpcur != 0 &amp;&amp; tbl[tmpcur].data &lt; tbl[i].data)\n\t\t{\n\t\t\ttmpcur_prev = tmpcur;\n\t\t\ttmpcur = tbl[tmpcur].cur;\n\t\t} //end while\n\t\ttbl[i].cur = tbl[tmpcur_prev].cur;\n\t\ttbl[tmpcur_prev].cur = i;\n\t} //end for i\n\t\n\tint tmpcur = tbl[0].cur;\n\tint curridx = 0; //数组下标\n\twhile (tmpcur != 0)\n\t{\n\t\tmyarray[curridx] = tbl[tmpcur].data;\n\t\t++curridx;\n\t\ttmpcur = tbl[tmpcur].cur;\n\t} //end while\n\t\t\n\tdelete[] tbl;\n\treturn;\n}\n</code></pre><p>在main主函数中，把对TwoWayInsertSort函数的调用修改为对TableInsertSort函数的调用。</p><pre><code class=\"language-plain\">......\n//HalfInsertSort(arr, length); //对数组元素进行折半插入排序\n//TwoWayInsertSort(arr, length);//对数组元素进行2路插入排序\nTableInsertSort(arr, length);//对数组元素进行表插入排序\n\n//输出排好序的数组中元素内容\ncout &lt;&lt;\"表插入排序结果为：\";\n......\n</code></pre><p>下面是执行结果。<br>\n<img src=\"https://static001.geekbang.org/resource/image/94/98/94892e7e6cf3dfb01c58e582cyy71198.jpg?wh=1920x79\" alt=\"图片\"></p><p>从上述代码可以看到，<strong>表插入排序算法主要是通过修改指针值代替移动记录，但关键字的比较次数并没有减少</strong>，所以时间复杂度仍旧为O($n^{2}$)，空间复杂度为O(n)，此排序算法也是稳定的。</p><h2>小结</h2><p>本节课我带你学习了三种新的插入类排序，折半插入排序、2路插入排序以及表插入排序。</p><p>折半插入排序指的是在已经排好序的序列中使用折半查找的方式确定待排序元素的插入位置，而后再移动元素。文中我向你详细描述了确定一个元素的插入位置过程，并提供了完整的实现代码和测试代码。</p><p>因为折半插入排序只减少了关键字的比较次数而没有减少记录的移动次数。所以对该排序算法进行改进从而引出2路插入排序，2路插入排序的目的是减少排序过程中记录的移动次数，这种排序需要n个记录的辅助数组空间。同样，我也向你详细描述了这种排序算法的实现方式，提供了完整的实现代码和测试代码。</p><p>绝大多数插入类排序都需要在排序过程中移动记录，这无疑影响了排序算法的执行效率。通过引入表插入排序，可以通过修改指针值代替移动记录，这也就等于在排序的过程中不移动记录。当然，这种排序记录也需要额外的辅助空间。这种排序算法的实现方式我也详细描述过一遍，提供了完整的实现代码和测试代码。</p><p>本节介绍的三种插入类排序方式都属于插入类排序的一种变体。它们的共同点是将待排序元素逐个插入到已经排好序的序列中，差别在于寻找插入位置的方法不同并且使用不同的数据结构来存储已经排好序的序列。总结一下就是下面的内容。</p><ul>\n<li>折半插入排序减少了待排序元素的比较次数。</li>\n<li>2路插入排序减少了待排序元素的移动次数。</li>\n<li>表插入排序在每次插入时只需要修改指针，而不进行实际元素的移动，因此效率更高。</li>\n</ul><h2>思考题</h2><ol>\n<li>折半插入排序的思想是什么？该算法的时间复杂度是多少？算法稳定吗？</li>\n<li>2路插入排序算法的思想是什么，该算法是否稳定？</li>\n<li>表插入排序算法的时间复杂度和空间复杂度分别是多少？</li>\n</ol><p>欢迎你在留言区和我互动，如果觉得有所收获，也可以把课程分享给更多的朋友一起学习，我们下节课见！</p>","neighbors":{"left":{"article_title":"49｜多路查找树：B树、B+树在数据库中的应用有何不同？","id":664722},"right":{"article_title":"51｜树形选择排序：按照锦标赛的思想进行排序","id":666028}},"comments":[]}