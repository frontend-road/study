{"id":6937,"title":"05 | OAuth2 有哪些典型模式","content":"无","comments":[{"had_liked":false,"id":15203,"user_name":"立地成佛","can_delete":false,"product_type":"c3","uid":1172516,"ip_address":"","ucode":"0D0D9B245752C3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e4/24/9f38e28d.jpg","comment_is_top":false,"comment_ctime":1531000589,"is_pvip":false,"replies":[{"id":5326,"content":"user-agent一般指浏览器，client是客户应用，比方授权码模式中客户应用一般是一个服务器端应用（如java web app），资源拥有者通过这个应用(间接也通过浏览器)去访问他在其它服务器上的资源。简化模式中，客户应用常是住在浏览器中的JS单页面应用。建议细看前面课程oauth2最简向导","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1531325808,"ip_address":"","comment_id":15203,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"授权码模式和简化模式里的，user-agent和client分别是什么呢？感觉讲的不太清楚，您讲的user-agent是浏览器，那client是什么？","like_count":7,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420284,"discussion_content":"user-agent一般指浏览器，client是客户应用，比方授权码模式中客户应用一般是一个服务器端应用（如java web app），资源拥有者通过这个应用(间接也通过浏览器)去访问他在其它服务器上的资源。简化模式中，客户应用常是住在浏览器中的JS单页面应用。建议细看前面课程oauth2最简向导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531325808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34663,"user_name":"红红的大苹果","can_delete":false,"product_type":"c3","uid":1151871,"ip_address":"","ucode":"1661CFB73EA2C3","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/7f/7626aecb.jpg","comment_is_top":false,"comment_ctime":1540256152,"is_pvip":false,"replies":[{"id":12655,"content":"refresh token主要用途是在授权码模式中，access token到期方便换新，否则要走一个完整oauth2授权码流程，它不是主要用来解决安全问题，安全由oauth2流程+规范本身部分解决。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1540731811,"ip_address":"","comment_id":34663,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"access token和refresh token的适用场景是什么？我的理解是为了控制access token的有效时间，从而控制token泄露后风险敞口时间。但是refresh token不是一样可能泄露么，只要同时拿到access token + refresh token，恶意方一样可以去申请新的access token啊。最终只能通过PoP的方式防止非token所有者非法适用token。所以我对access token + refresh token的适用业务场景有些疑惑。希望波波老师指点。","like_count":3,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427288,"discussion_content":"refresh token主要用途是在授权码模式中，access token到期方便换新，否则要走一个完整oauth2授权码流程，它不是主要用来解决安全问题，安全由oauth2流程+规范本身部分解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540731811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72416,"user_name":"CLMOOK🐾","can_delete":false,"product_type":"c3","uid":1321526,"ip_address":"","ucode":"F6C75A32A59A34","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/36/c5d1a120.jpg","comment_is_top":false,"comment_ctime":1551618341,"is_pvip":false,"replies":[{"id":26326,"content":"你好，OAuth2授权码流程中，第一次(浏览器-&gt;oauth2服务器)传递redirect url是客户应用(client app)回调地址，oauth2服务器返回code时会通过重定向调用这个地址，相当于向客户应用传递code。第二次(客户应用-&gt;oauth2服务器)传递redirect url是给oauth2服务器进行校验用，确保过来请求token的是之前请求code的那个客户应用。第一次redirect url可选，因为向oauth2服务器注册客户应用时可以直接提供，也就是说oauth2服务器已经知道要重定向到哪里，参考https:&#47;&#47;stackoverflow.com&#47;questions&#47;47050255&#47;when-oauth2-authoration-code-grant-flow-redirect-uri-parameter-is-really-option","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1551706153,"ip_address":"","comment_id":72416,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"老师好，请问授权码模式中的redirection URI是什么? 是指向要访问的资源服务器的用户数据？授权码与客户端ID和重定向URI，是一一对应关系，但重定向URI是可选项，如何保证这种对应关系呢？谢谢","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441582,"discussion_content":"你好，OAuth2授权码流程中，第一次(浏览器-&amp;gt;oauth2服务器)传递redirect url是客户应用(client app)回调地址，oauth2服务器返回code时会通过重定向调用这个地址，相当于向客户应用传递code。第二次(客户应用-&amp;gt;oauth2服务器)传递redirect url是给oauth2服务器进行校验用，确保过来请求token的是之前请求code的那个客户应用。第一次redirect url可选，因为向oauth2服务器注册客户应用时可以直接提供，也就是说oauth2服务器已经知道要重定向到哪里，参考https://stackoverflow.com/questions/47050255/when-oauth2-authoration-code-grant-flow-redirect-uri-parameter-is-really-option","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551706153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36260,"user_name":"makerTrouble","can_delete":false,"product_type":"c3","uid":1093509,"ip_address":"","ucode":"827B252B93EC31","user_header":"https://static001.geekbang.org/account/avatar/00/10/af/85/94c3e631.jpg","comment_is_top":false,"comment_ctime":1541002951,"is_pvip":false,"replies":[{"id":13032,"content":"accesstoken过期时间一般在oauth2服务器上设置，在注册client的时候设。在授权码模式中，token一般不会流到用户流览器中，要存的话也是存web服务器上。在简化模式和单页应用中，accesstoken可存localstorage或cookie中，但仅限安全不严格场景。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1541338518,"ip_address":"","comment_id":36260,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"想问一下accesstoken过期时间怎么配置？这个token一般是保存在浏览器的cookie中吗？","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427802,"discussion_content":"accesstoken过期时间一般在oauth2服务器上设置，在注册client的时候设。在授权码模式中，token一般不会流到用户流览器中，要存的话也是存web服务器上。在简化模式和单页应用中，accesstoken可存localstorage或cookie中，但仅限安全不严格场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541338518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28827,"user_name":"mh","can_delete":false,"product_type":"c3","uid":1139878,"ip_address":"","ucode":"9179BBA1792CD2","user_header":"https://static001.geekbang.org/account/avatar/00/11/64/a6/e5f674a9.jpg","comment_is_top":false,"comment_ctime":1538154231,"is_pvip":false,"replies":[{"id":11289,"content":"你可以再看下rfc6749的官方文档，URI fragment里头就是access token，一般也不加密，用URI fragment而不是query string，是为安全，浏览器接收到授权服务器的重定向指令向Web-Host Client Resource所在服务器发起请求时，会剥离URI fragment（但浏览器会保留），这样access token就没机会通过网络被发到Web-Host Client Resource所在服务器上，这样更安全，当Web-Host Client Resource服务器上js脚本返回到浏览器，js脚本仍可解析出URI fragment中的access token，因为浏览器有保留","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1539176906,"ip_address":"","comment_id":28827,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"老师好，请问下简化的授权码模式中返回的Fragment是指的什么？有具体的案例说明吗？这里不太明白。我可以这样理解吗？比如客户端的请求地址是client.com,授权服务器授权后重定向到client.com?#access_token=access_token_with_secret; 然后客户端再通过Ajax请求Web-Host Client Resource获取解密的脚本，执行这个脚本得到真正的access_token","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425385,"discussion_content":"你可以再看下rfc6749的官方文档，URI fragment里头就是access token，一般也不加密，用URI fragment而不是query string，是为安全，浏览器接收到授权服务器的重定向指令向Web-Host Client Resource所在服务器发起请求时，会剥离URI fragment（但浏览器会保留），这样access token就没机会通过网络被发到Web-Host Client Resource所在服务器上，这样更安全，当Web-Host Client Resource服务器上js脚本返回到浏览器，js脚本仍可解析出URI fragment中的access token，因为浏览器有保留","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539176906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239187,"user_name":"点点","can_delete":false,"product_type":"c3","uid":1222823,"ip_address":"","ucode":"2E29A4DC027A16","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/a7/4d8cb9cf.jpg","comment_is_top":false,"comment_ctime":1596455396,"is_pvip":false,"replies":[{"id":88628,"content":"https + 合理设置token过期时间，另外如果涉及交易，可以在交易发生时再加双因素(手机验证码)校验。\n\n对于安全更严格的场景，也可以考虑更安全的Proof of Possession(PoP) token，它需要验证令牌拥有者身份，参考：\nhttps:&#47;&#47;tools.ietf.org&#47;html&#47;draft-ietf-oauth-pop-architecture-08","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1596728226,"ip_address":"","comment_id":239187,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"密码模式如果把token浏览器端，那么token的安全性怎么保证","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503013,"discussion_content":"https + 合理设置token过期时间，另外如果涉及交易，可以在交易发生时再加双因素(手机验证码)校验。\n\n对于安全更严格的场景，也可以考虑更安全的Proof of Possession(PoP) token，它需要验证令牌拥有者身份，参考：\nhttps://tools.ietf.org/html/draft-ietf-oauth-pop-architecture-08","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596728226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78068,"user_name":"绫夜","can_delete":false,"product_type":"c3","uid":1228814,"ip_address":"","ucode":"F694100A9FA73E","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/0e/8dbaf501.jpg","comment_is_top":false,"comment_ctime":1553066660,"is_pvip":false,"replies":[{"id":29012,"content":"对，如果没有采用网关集中令牌校验方式，那么可以让resource owner分别拿access token去认证服务器认证。如果用jwt自包含令牌的话，则可以实现resource owner自校验，不一定需要去认证服务器集中校验。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1553519339,"ip_address":"","comment_id":78068,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"resource owner 拿到access token后 应该要去 认证服务器认证吧?","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443955,"discussion_content":"对，如果没有采用网关集中令牌校验方式，那么可以让resource owner分别拿access token去认证服务器认证。如果用jwt自包含令牌的话，则可以实现resource owner自校验，不一定需要去认证服务器集中校验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553519339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31074,"user_name":"Geek_61d75a","can_delete":false,"product_type":"c3","uid":1259049,"ip_address":"","ucode":"F0496B978EBBFF","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/29/a83adea2.jpg","comment_is_top":false,"comment_ctime":1539082513,"is_pvip":false,"replies":[{"id":11564,"content":"做好生产环境隔离的话，一般内部服务之间调用也不走oauth，可以直接调。安全要求严格时可以考虑采用客户端凭证模式(Client Credential Grant)。oauth主要场景是开放api第三方调用，无线或H5 app调用。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1539356216,"ip_address":"","comment_id":31074,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"老师，微服务间通过feign相互调用，需要用到oauth吗，如果用到应该使用那种模式呢。","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426216,"discussion_content":"做好生产环境隔离的话，一般内部服务之间调用也不走oauth，可以直接调。安全要求严格时可以考虑采用客户端凭证模式(Client Credential Grant)。oauth主要场景是开放api第三方调用，无线或H5 app调用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539356216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23257,"user_name":"小肥牛","can_delete":false,"product_type":"c3","uid":1028461,"ip_address":"","ucode":"1E1FD5A4712668","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/6d/651e2f4d.jpg","comment_is_top":false,"comment_ctime":1536235929,"is_pvip":false,"replies":[{"id":8564,"content":"全流程的授权码flow最安全， 1）,第二步拿到auth code后，client需要提供client id&#47;secret + authcode去换token，相当于授权服务器需要校验client是不是那个发起授权请求的client，因为第一步浏览器发起的授权请求是不提供client secret的。2)，token只在client端，不会流到user agent去，client secret也不能流到user agent去","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1536546887,"ip_address":"","comment_id":23257,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"老师好，想问一下授权码模式中设计auth code的意义是什么？为什么验证用户后不直接把access token返回回来呢？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423482,"discussion_content":"全流程的授权码flow最安全， 1）,第二步拿到auth code后，client需要提供client id/secret + authcode去换token，相当于授权服务器需要校验client是不是那个发起授权请求的client，因为第一步浏览器发起的授权请求是不提供client secret的。2)，token只在client端，不会流到user agent去，client secret也不能流到user agent去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536546887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124390,"user_name":"Bob","can_delete":false,"product_type":"c3","uid":1112072,"ip_address":"","ucode":"BF65F7AE61A1C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/08/ada2efac.jpg","comment_is_top":false,"comment_ctime":1565875204,"is_pvip":false,"replies":[{"id":45799,"content":"认证鉴权是微服务重要环节，oauth2则是服务授权的业界标准协议。一般中大型的互联网公司都有独立的认证鉴权中心，大都支持oauth2协议。另外，后续企业的服务如果要开放出来(比如建开放平台)，一般都需要支持oauth2协议。\n\n当然，对于一些小规模的企业场景，oauth2会显得比较重。如果暂时不感兴趣，可以先跳过第一章，等后面有需要再回头看。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1565962672,"ip_address":"","comment_id":124390,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"这个oauth2听起来有点不感兴趣，跟后续的微服务架构有什么重要的关系吗？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463151,"discussion_content":"认证鉴权是微服务重要环节，oauth2则是服务授权的业界标准协议。一般中大型的互联网公司都有独立的认证鉴权中心，大都支持oauth2协议。另外，后续企业的服务如果要开放出来(比如建开放平台)，一般都需要支持oauth2协议。\n\n当然，对于一些小规模的企业场景，oauth2会显得比较重。如果暂时不感兴趣，可以先跳过第一章，等后面有需要再回头看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565962672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81696,"user_name":"9080","can_delete":false,"product_type":"c3","uid":1114072,"ip_address":"","ucode":"D4DFBBC1B8394D","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/d8/fa77b4eb.jpg","comment_is_top":false,"comment_ctime":1554009690,"is_pvip":false,"replies":[{"id":29844,"content":"你好，在OAuth2的基础上要实现SSO还是比较复杂的，要看你的具体应用场景，还有应用类型等(Web&#47;Mobile&#47;SPA)，做法有很多。因为我不清楚你的具体上下文，所以暂不好给明确建议，不过我正在开发一个端到端的微服务案例应用，里头会实现简单SSO机制，你可以加我微信(bulldog2015)，到时会通知你。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1554210623,"ip_address":"","comment_id":81696,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"老师，注册客户端的时候要配置redirectUrl属性，那么通过流程看这个属性是固定值，如果我想实现登录并授权完成后回跳到来源页（这个来源页不一定是注册配置的redirectUrl）如何做呢？还有用户授权页是否可以略过呢，因为我想通过Oauth2协议实现SSO机制，有些场景是不需要弹出授权页的，请老师空闲时帮看下我的问题，谢谢~","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445302,"discussion_content":"你好，在OAuth2的基础上要实现SSO还是比较复杂的，要看你的具体应用场景，还有应用类型等(Web/Mobile/SPA)，做法有很多。因为我不清楚你的具体上下文，所以暂不好给明确建议，不过我正在开发一个端到端的微服务案例应用，里头会实现简单SSO机制，你可以加我微信(bulldog2015)，到时会通知你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554210623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24692,"user_name":"文敦复","can_delete":false,"product_type":"c3","uid":1195258,"ip_address":"","ucode":"B8F4A6BD5D7805","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","comment_is_top":false,"comment_ctime":1537186368,"is_pvip":false,"replies":[{"id":9635,"content":"建议阅读阮一峰的理解oauth2，http:&#47;&#47;www.ruanyifeng.com&#47;blog&#47;2014&#47;05&#47;oauth_2_0.html","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1537676481,"ip_address":"","comment_id":24692,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"这节第一种和第二种我有点懵逼…😂","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424087,"discussion_content":"建议阅读阮一峰的理解oauth2，http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537676481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360162,"user_name":"德里克","can_delete":false,"product_type":"c3","uid":1031678,"ip_address":"山东","ucode":"D3683E39D446A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bd/fe/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1666246128,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100007001,"comment_content":"老师好，公司内部服务使用，无对外提供接口api，是否有必要使用oauth2呢？","like_count":0}]}