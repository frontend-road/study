{"id":252076,"title":"01 | 浏览器中实现可视化的四种方式","content":"<p>你好，我是月影。</p><p>上一节课我们了解了什么是可视化。可视化用一句话来说，本质上就是将数据信息组织起来后，以图形的方式呈现出来。在Web上，图形通常是通过浏览器绘制的。现代浏览器是一个复杂的系统，其中负责绘制图形的部分是渲染引擎。渲染引擎绘制图形的方式，我总结了一下，大体上有4种。</p><p>第1种是传统的<strong>HTML+CSS</strong>。这种方式通常用来呈现普通的Web网页。</p><p>第2种是使用<strong>SVG</strong>。SVG和传统的<strong>HTML+CSS的绘图方式差别不大</strong>。只不过，HTML元素在绘制矢量图形方面的能力有些不足（我们后面会讲到），而SVG恰好弥补了这方面的缺陷。</p><p>第3种是使用<strong>Canvas2D</strong>。这是浏览器提供的Canvas API中的其中一种上下文，使用它可以非常方便地绘制出基础的几何图形。在可视化中，Canvas比较常用，下一节课我们会学习它的基本用法。</p><p>第4种是使用<strong>WebGL</strong>。这是浏览器提供的Canvas API中的另一种上下文，它是OpenGL ES规范在Web端的实现。我们可以通过它，用GPU渲染各种复杂的2D和3D图形。值得一提的是，WebGL利用了GPU并行处理的特性，这让它在处理大量数据展现的时候，性能大大优于前3种绘图方式。因此，在可视化的应用中，一些数据量大、视觉效果要求高的特殊场景，使用WebGL渲染是一种比较合适的选择。</p><!-- [[[read_end]]] --><p>这4种方式各有利弊，今天我就从宏观层面带你了解这些图形系统，为我们后面更深入的学习打好基础。</p><h2>方式一：HTML+CSS</h2><p>与传统的Web应用相比，可视化项目，尤其是PC端的可视化大屏展现，不只是使用HTML与CSS相对较少，而且使用方式也不太一样。于是，有些同学就会认为，可视化只能使用SVG、Canvas这些方式，不能使用HTML与CSS。当然了，这个想法是不对。具体的原因是什么呢？我一起来看看。</p><p>实际上，现代浏览器的HTML、CSS表现能力很强大，完全可以实现常规的图表展现，比如，我们常见的柱状图、饼图和折线图。</p><p>虽然我们后面的课程会主要使用Canvas和WebGL绘图，少数会涉及部分CSS。但是，你可不要觉得它不重要。为啥呢？理由有两个：</p><ul>\n<li>一些简单的可视化图表，用CSS来实现很有好处，既能简化开发，又不需要引入额外的库，可以节省资源，提高网页打开的速度。</li>\n<li>理解CSS的绘图思想对于可视化也是很有帮助的，比如，CSS的很多理论就和视觉相关，可视化中都可以拿来借鉴。</li>\n</ul><p>所以呢，这一节里我们多讲一点，你一定要好好听。接下来，我们就来说一说，CSS是如何实现常规图表的。</p><h3>1. HTML与CSS是如何实现可视化的？</h3><p>用CSS实现柱状图其实很简单，原理就是使用网格布局（Grid Layout）加上线性渐变（Linear-gradient），我就不多说了，你可以直接看我这里给出的CSS代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/31/68d43be360923664f2a3d8c2c65fbc31.jpg?wh=1920*1080\" alt=\"\" title=\"用HTML+CSS绘制的柱状图\"></p><pre><code>/**\n   dataset = {\n     current: [15, 11, 17, 25, 37],\n     total: [25, 26, 40, 45, 68],\n   }\n */\n.bargraph {\n  display: grid;\n  width: 150px;\n  height: 100px;\n  padding: 10px;\n  transform: scaleY(3);\n  grid-template-columns: repeat(5, 20%);\n}\n.bargraph div {\n  margin: 0 2px;\n}\n.bargraph div:nth-child(1) {\n background: linear-gradient(to bottom, transparent 75%, #37c 0, #37c 85%, #3c7 0);\n}\n.bargraph div:nth-child(2) {\n background: linear-gradient(to bottom, transparent 74%, #37c 0, #37c 89%, #3c7 0);\n}\n.bargraph div:nth-child(3) {\n background: linear-gradient(to bottom, transparent 60%, #37c 0, #37c 83%, #3c7 0);\n}\n.bargraph div:nth-child(4) {\n background: linear-gradient(to bottom, transparent 55%, #37c 0, #37c 75%, #3c7 0);\n}\n.bargraph div:nth-child(5) {\n background: linear-gradient(to bottom, transparent 32%, #37c 0, #37c 63%, #3c7 0);\n}\n</code></pre><p>而要实现饼图，我们可以使用圆锥渐变，方法也很简单，你直接看代码就可以理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/58/6d/58c6ea6ffce4e47446c0c9636d47226d.jpg?wh=1920*1080\" alt=\"\" title=\"使用圆锥渐变绘制的饼图\"></p><pre><code>.piegraph {\n  display: inline-block;\n  width: 250px;\n  height: 250px;\n  border-radius: 50%;\n  background-image: conic-gradient(#37c 30deg, #3c7 30deg, #3c7 65deg, orange 65deg, orange 110deg, #f73 110deg, #f73 200deg, #ccc 200deg);\n}\n</code></pre><p>柱状图和饼图都比较简单，所以我带你快速过了一下。除此之外，我们用HTML和CSS也可以实现折线图。</p><p>我们可以用高度很小的Div元素来模拟线段，然后用transform改变角度和位置，这样就能拼成折线图了。 另外，如果使用clip-path这样的高级属性，我们还能实现更复杂的图表，比如，用不同的颜色表示两个不同折线的面积。</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/c9/cc4d0f6d9260d508758c8043a14ea1c9.jpg?wh=1920*1080\" alt=\"\" title=\"折线图和面积图\"></p><p>实际上很多常见的可视化图表我们都可以用HTML和CSS来实现，不需要用其他的绘图方式。但是，为什么在可视化领域很少有人直接用HTML和CSS来绘制图表呢？这主要是因为，使用HTML和CSS绘图，有2个缺点。</p><h3>2.用HTML+CSS实现可视化的缺点</h3><p>首先，HTML和CSS主要还是为网页布局而创造的，使用它们虽然能绘制可视化图表，但是绘制的方式并不简洁。这是因为，从CSS代码里，我们很难看出数据与图形的对应关系，有很多换算也需要开发人员自己来做。这样一来，一旦图表或数据发生改动，就需要我们重新计算，维护起来会很麻烦。</p><p>其次，HTML和CSS作为浏览器渲染引擎的一部分，为了完成页面渲染的工作，除了绘制图形外，还要做很多额外的工作。比如说，浏览器的渲染引擎在工作时，要先解析HTML、SVG、CSS，构建DOM树、RenderObject树和RenderLayer树，然后用HTML（或SVG）绘图。当图形发生变化时，我们很可能要重新执行全部的工作，这样的性能开销是非常大的。</p><p>而且传统的Web开发，因为涉及UI构建和内容组织，所以这些额外的解析和构建工作都是必须做的。而可视化与传统网页不同，它不太需要复杂的布局，更多的工作是在绘图和数据计算。所以，对于可视化来说，这些额外的工作反而相当于白白消耗了性能。</p><p>因此，相比于HTML和CSS，Canvas2D和WebGL更适合去做可视化这一领域的绘图工作。它们的绘图API能够直接操作绘图上下文，一般不涉及引擎的其他部分，在重绘图像时，也不会发生重新解析文档和构建结构的过程，开销要小很多。</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/9d/d49d2fb673a7fb9f8de329c12fab009d.jpg?wh=1920*1080\" alt=\"\" title=\"图形系统与浏览器渲染引擎工作对比\"></p><h2>方式二：SVG</h2><p>在介绍Canvas2D和WebGL之前，我们先来说一说SVG。现代浏览器支持SVG（Scalable Vector Graphics，可缩放矢量图），SVG是一种基于 XML 语法的图像格式，可以用图片（img元素）的src属性加载。而且，浏览器更强大的是，它还可以内嵌SVG标签，并且像操作普通的HTML元素一样，利用DOM API操作SVG元素。甚至，CSS也可以作用于内嵌的SVG元素。</p><p>比如，上面的柱状图，如果用SVG实现的话，我们可以用如下所示的代码来实现：</p><pre><code> &lt;!--\n      dataset = {\n        total: [25, 26, 40, 45, 68],\n        current: [15, 11, 17, 25, 37],\n      }\n  --&gt;\n  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;120px&quot; height=&quot;240px&quot; viewBox=&quot;0 0 60 100&quot;&gt;\n    &lt;g transform=&quot;translate(0, 100) scale(1, -1)&quot;&gt;\n      &lt;g&gt;\n        &lt;rect x=&quot;1&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;25&quot; fill=&quot;#37c&quot;/&gt;\n        &lt;rect x=&quot;13&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;26&quot; fill=&quot;#37c&quot;/&gt;\n        &lt;rect x=&quot;25&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;40&quot; fill=&quot;#37c&quot;/&gt;\n        &lt;rect x=&quot;37&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;45&quot; fill=&quot;#37c&quot;/&gt;\n        &lt;rect x=&quot;49&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;68&quot; fill=&quot;#37c&quot;/&gt;\n      &lt;/g&gt;\n      &lt;g&gt;\n        &lt;rect x=&quot;1&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;15&quot; fill=&quot;#3c7&quot;/&gt;\n        &lt;rect x=&quot;13&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;11&quot; fill=&quot;#3c7&quot;/&gt;\n        &lt;rect x=&quot;25&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;17&quot; fill=&quot;#3c7&quot;/&gt;\n        &lt;rect x=&quot;37&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;25&quot; fill=&quot;#3c7&quot;/&gt;\n        &lt;rect x=&quot;49&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;37&quot; fill=&quot;#3c7&quot;/&gt;\n      &lt;/g&gt;\n    &lt;/g&gt;\n  &lt;/svg&gt;\n</code></pre><p>从上面的SVG代码中，我们可以一目了然地看出，数据total和current分别对应SVG中两个g元素下的rect元素的高度。也就是说，元素的属性和数值可以直接对应起来。而CSS代码并不能直观体现出数据的数值，需要进行CSS规则转换。具体如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/62/c9716f8c3768a2384c3baf5f8ec87362.jpg?wh=1920*1080\" alt=\"\"></p><p>在上面这段SVG代码中，g表示分组，rect表示绘制一个矩形元素。除了rect外，SVG还提供了丰富的图形元素，可以绘制矩形、圆弧、椭圆、多边形和贝塞尔曲线等等。由于SVG比较复杂，我们会在第4节课专门介绍，如何用SVG绘制可视化图表。在那之前，你也可以通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial\">MDN官方文档</a>，来学习更多的SVG的API。</p><p>SVG绘制图表与HTML和CSS绘制图表的方式差别不大，只不过是将HTML标签替换成SVG标签，运用了一些SVG支持的特殊属性。</p><p>HTML的不足之处在于HTML元素的形状一般是矩形，虽然用CSS辅助，也能够绘制出各种其它形状的图形，甚至不规则图形，但是总体而言还是非常麻烦的。而SVG则弥补了这方面的不足，让不规则图形的绘制变得更简单了。因此，用SVG绘图比用HTML和CSS要便利得多。</p><p>但是，SVG图表也有缺点。在渲染引擎中，SVG元素和HTML元素一样，在输出图形前都需要经过引擎的解析、布局计算和渲染树生成。而且，一个SVG元素只表示一种基本图形，如果展示的数据很复杂，生成图形的SVG元素就会很多。这样一来，大量的SVG元素不仅会占用很多内存空间，还会增加引擎、布局计算和渲染树生成的开销，降低性能，减慢渲染速度。这也就注定了SVG只适合应用于元素较少的简单可视化场景。</p><h2>方式三：Canvas2D</h2><p>除了SVG，使用Canvas2D上下文来绘制可视化图表也很方便，但是在绘制方式上，Canvas2D和HTML/CSS、SVG又有些不同。</p><p>无论是使用HTML/CSS还是SVG，它们都属于<strong>声明式</strong>绘图系统，也就是我们根据数据创建各种不同的图形元素（或者CSS规则），然后利用浏览器渲染引擎解析它们并渲染出来。但是Canvas2D不同，它是浏览器提供的一种可以直接用代码在一块平面的“画布”上绘制图形的API，使用它来绘图更像是传统的“编写代码”，简单来说就是调用绘图指令，然后引擎直接在页面上绘制图形。这是一种<strong>指令式</strong>的绘图系统。</p><p>那Canvas到底是怎么绘制可视化图表的呢？我们一起来看。</p><p>首先，Canvas元素在浏览器上创造一个空白的画布，通过提供渲染上下文，赋予我们绘制内容的能力。然后，我们只需要调用渲染上下文，设置各种属性，然后调用绘图指令完成输出，就能在画布上呈现各种各样的图形了。</p><p>为了实现更加复杂的效果，Canvas还提供了非常丰富的设置和绘图API，我们可以通过操作上下文，来改变填充和描边颜色，对画布进行几何变换，调用各种绘图指令，然后将绘制的图形输出到画布上。</p><p>总结来说，Canvas能够直接操作绘图上下文，不需要经过HTML、CSS解析、构建渲染树、布局等一系列操作。因此单纯绘图的话，Canvas比HTML/CSS和SVG要快得多。</p><p>但是，因为HTML和SVG一个元素对应一个基本图形，所以我们可以很方便地操作它们，比如在柱状图的某个柱子上注册点击事件。而同样的功能在Canvas上就比较难实现了，因为对于Canvas来说，绘制整个柱状图的过程就是一系列指令的执行过程，其中并没有区分“A柱子”、“B柱子”，这让我们很难单独对Canvas绘图的局部进行控制。不过，这并不代表我们就不能控制Canvas的局部了。实际上，通过数学计算我们是可以通过定位的方式来获取局部图形的，在后续的课程中我们会解决这个问题。</p><p>这里有一点需要你注意，Canvas和SVG的使用也不是非此即彼的，它们可以结合使用。因为SVG作为一种图形格式，也可以作为image元素绘制到Canvas中。举个例子，我们可以先使用SVG生成某些图形，然后用Canvas来渲染。这样，我们就既可以享受SVG的便利性，又可以享受Canvas的高性能了。</p><h2>方式四：WebGL</h2><p>WebGL绘制比前三种方式要复杂一些，因为WebGL是基于OpenGL ES规范的浏览器实现的，API相对更底层，使用起来不如前三种那么简单直接。关于WebGL的使用内容，我会在3D篇详细来说。</p><p>一般情况下，Canvas2D绘制图形的性能已经足够高了，但是在三种情况下我们有必要直接操作更强大的GPU来实现绘图。</p><p>第一种情况，如果我们<strong>要绘制的图形数量非常多</strong>，比如有多达数万个几何图形需要绘制，而且它们的位置和方向都在不停地变化，那我们即使用Canvas2D绘制了，性能还是会达到瓶颈。这个时候，我们就需要使用GPU能力，直接用WebGL来绘制。</p><p>第二种情况，如果我们要<strong>对较大图像的细节做像素处理</strong>，比如，实现物体的光影、流体效果和一些复杂的像素滤镜。由于这些效果往往要精准地改变一个图像全局或局部区域的所有像素点，要计算的像素点数量非常的多（一般是数十万甚至上百万数量级的）。这时，即使采用Canvas2D操作，也会达到性能瓶颈，所以我们也要用WebGL来绘制。</p><p>第三种情况是<strong>绘制3D物体</strong>。因为WebGL内置了对3D物体的投影、深度检测等特性，所以用它来渲染3D物体就不需要我们自己对坐标做底层的处理了。那在这种情况下，WebGL无论是在使用上还是性能上都有很大优势。</p><h2>要点总结</h2><p>今天，我们介绍了四种可视化实现方式和它们的优缺点。</p><p>HTML+CSS的优点是方便，不需要第三方依赖，甚至不需要JavaScript代码。如果我们要绘制少量常见的图表，可以直接采用HTML和CSS。它的缺点是CSS属性不能直观体现数据，绘制起来也相对麻烦，图形复杂会导致HTML元素多，而消耗性能。</p><p>SVG 是对HTML/CSS的增强，弥补了HTML绘制不规则图形的能力。它通过属性设置图形，可以直观地体现数据，使用起来非常方便。但是SVG也有和HTML/CSS同样的问题，图形复杂时需要的SVG元素太多，也非常消耗性能。</p><p>Canvas2D 是浏览器提供的简便快捷的指令式图形系统，它通过一些简单的指令就能快速绘制出复杂的图形。由于它直接操作绘图上下文，因此没有HTML/CSS和SVG绘图因为元素多导致消耗性能的问题，性能要比前两者快得多。但是如果要绘制的图形太多，或者处理大量的像素计算时，Canvas2D依然会遇到性能瓶颈。</p><p>WebGL 是浏览器提供的功能强大的绘图系统，它使用比较复杂，但是功能强大，能够充分利用GPU并行计算的能力，来快速、精准地操作图像的像素，在同一时间完成数十万或数百万次计算。另外，它还内置了对3D物体的投影、深度检测等处理，这让它更适合绘制3D场景。</p><p>知道了这些优缺点，在实际面对可视化需求的时候，我们就可以根据具体项目的特点来选择合适的方案实现可视化了。那具体来说，我们应该怎么选择呢？我这里梳理了一张技术方案的选择图，你可以看一看。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/6f/3bf11fcf520504a4e342dd335698c76f.jpg?wh=1920*1080\" alt=\"\"></p><h2>小试牛刀</h2><p>我们在文中实现了SVG版本的柱状图，你可以尝试用SVG实现同HTML/CSS版本一样的饼图、折线图和面积图，体会一下使用SVG实现和HTML/CSS实现的不同点。</p><p>另外，下一节课我们会介绍Canvas2D绘制可视化图表，你可以提前预习一下，试一试能否用Canvas2D来绘制文中的柱状图。</p><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这节课分享给你的朋友，我们下节课见！</p>","neighbors":{"left":{"article_title":"预习 | Web前端与可视化到底有什么区别？","id":252090},"right":{"article_title":"02 |  指令式绘图系统：如何用Canvas绘制层次关系图？","id":252705}},"comments":[{"had_liked":false,"id":229208,"user_name":"Meow戴","can_delete":false,"product_type":"c1","uid":1901198,"ip_address":"","ucode":"562C8A736A201D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/02/8e/67ccf859.jpg","comment_is_top":false,"comment_ctime":1592923658,"is_pvip":false,"replies":[{"id":"84660","content":"这个问题问得挺好的，说明自己思考了。我之前也有疑问。不过后来我自己尝试实践了一下，发现是因为canvas2d渲染只能由浏览器底层控制，并不能自己控制gpu，而很多优化其实浏览器并不能代替开发者去做。比如说同时绘制几万个小圆形，因为图形都一样，自己写webgl的话，可以用instanced drawing的方式批量绘制，而canvas2d写浏览器不会帮你去这么做。可以说webgl在渲染大量元素的时候手段要更多得多，所以性能差别就明显了。你可以看我spritejs的文档中的示例https:&#47;&#47;spritejs.org&#47;demo 里面的benchmark子目录下的例子，里面有几个用canvas2d无法实现的case。","user_name":"作者回复","comment_id":229208,"uid":"1159792","ip_address":"","utype":1,"ctime":1592986072,"user_name_real":"月影"}],"discussion_count":5,"race_medal":0,"score":"340895340042","product_id":100053801,"comment_content":"canvas2d绘制出来的图形最终也是渲染到gpu中的吧，和webgl渲染到底区别在哪里，为啥webgl性能好啊，请问月影团长～～","like_count":80,"discussions":[{"author":{"id":1511744,"avatar":"https://static001.geekbang.org/account/avatar/00/17/11/40/ee498a86.jpg","nickname":"scqilin","note":"","ucode":"F572FD9CA79F17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293300,"discussion_content":" 比如用cancas2d来生成灰度图，需要自己写大量的计算，这些计算都是在cpu中运行的。而用webgl就简单多了，他可以在gpu中去运行，效率是天差地别的。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1595500812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1315133,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/3d/d0d5914c.jpg","nickname":"风小楼WindJack","note":"","ucode":"F63006A738B7A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1511744,"avatar":"https://static001.geekbang.org/account/avatar/00/17/11/40/ee498a86.jpg","nickname":"scqilin","note":"","ucode":"F572FD9CA79F17","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299193,"discussion_content":"例子简单易懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597589907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":293300,"ip_address":""},"score":299193,"extra":""}]},{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499378,"discussion_content":"这个问题问得挺好的，说明自己思考了。我之前也有疑问。不过后来我自己尝试实践了一下，发现是因为canvas2d渲染只能由浏览器底层控制，并不能自己控制gpu，而很多优化其实浏览器并不能代替开发者去做。比如说同时绘制几万个小圆形，因为图形都一样，自己写webgl的话，可以用instanced drawing的方式批量绘制，而canvas2d写浏览器不会帮你去这么做。可以说webgl在渲染大量元素的时候手段要更多得多，所以性能差别就明显了。你可以看我spritejs的文档中的示例https://spritejs.org/demo 里面的benchmark子目录下的例子，里面有几个用canvas2d无法实现的case。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592986072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1340246,"avatar":"https://static001.geekbang.org/account/avatar/00/14/73/56/9cfb1e43.jpg","nickname":"sheeeeep","note":"","ucode":"218AA77BAA73C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288806,"discussion_content":"所以意思是webgl提供了更多手段可以去优化性能，而不是做同样事情的时候，webgl比canvas性能要好么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593876265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1387704,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eriaIgoPa8abNTaUm7o6oa6mvL9iagRTdD1vhovWPyfiaS82f409Sz3kMFzYLNa4ibnHagA7M33l8XnIQ/132","nickname":"Bufan","note":"","ucode":"A5EC0391C412DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286690,"discussion_content":"这个问题我也想问，看完后就明白了，月影大大真牛人也","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593262376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229485,"user_name":"工号996","can_delete":false,"product_type":"c1","uid":1067475,"ip_address":"","ucode":"11B796961139E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/d3/8948e6e6.jpg","comment_is_top":false,"comment_ctime":1593011510,"is_pvip":false,"replies":[{"id":"84727","content":"这个问题很好。这个牵扯到设备像素比dpr了。我们知道mac和iphone的dpr是2，也就是说一个如果你在这样的设备上绘制canvas，应当将它的画布坐标设置为样式坐标的2倍，才可以清晰地显示图像。浏览器的window.devicePixelRatio属性可以读取设备像素比。","user_name":"作者回复","comment_id":229485,"uid":"1159792","ip_address":"","utype":1,"ctime":1593047932,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"139031964982","product_id":100053801,"comment_content":"Canvas绘出圆形颜色渐变的倒计时图形有种朦胧感，怎么回事","like_count":33,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499501,"discussion_content":"这个问题很好。这个牵扯到设备像素比dpr了。我们知道mac和iphone的dpr是2，也就是说一个如果你在这样的设备上绘制canvas，应当将它的画布坐标设置为样式坐标的2倍，才可以清晰地显示图像。浏览器的window.devicePixelRatio属性可以读取设备像素比。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593047932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228830,"user_name":"寻找海蓝","can_delete":false,"product_type":"c1","uid":1012176,"ip_address":"","ucode":"773CBE19EAB33C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/71/d0/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1592819145,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"113261968841","product_id":100053801,"comment_content":"所以 Canvas 实际上是比 svg 更底层的API：<br><br>1. svg 本质上是 Dom，是一种具有特殊属性的 Dom，Dom的优势和缺点它都具备，我们虽然可以像操作Dom那样方便地操作Canvas，但是不得不面对Dom性能低下的事实，所以 svg 只适合低动画需求、少元素数量需求的场景。<br>2. Canvas 本质上是基于底层图形系统的封装，在浏览器上形成的是一张图片，但是它只提供了绘制功能，因此它非常简陋，没有事件系统意味着我们无法像操作Dom一样绑定事件，每个Dom对应着一个具体图形，而 Canvas 中只有绘图指令，并没有单个图形的概念，我们无法操作单个图形，只有一张整体的图片，也正因此Canvas任何小的改动都会导致整个画布的重绘。<br><br>因此后面月影大佬讲的内容会非常干货，中文互联网上很少有的内容，比如通过数学计算捕获Canvas中的局部图形、通过分层or局部渲染避免整体的画布重绘等等，订阅的同学捡到宝了。","like_count":27,"discussions":[{"author":{"id":1162218,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq3Jf3dlkbTRUjl182DFWyvUQJuhibPboQ8EBlEqOLgRPZC8KSbiakmrIK9NYKn0WJCZWWOR5s6ksnw/132","nickname":"ryan","note":"","ucode":"87C85752A0FA19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285728,"discussion_content":"不是来杠，一般css对dom操作性能，绝对比你自己玩canvas高。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592921946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1294367,"avatar":"https://static001.geekbang.org/account/avatar/00/13/c0/1f/8b7fc17c.jpg","nickname":"Boswell","note":"","ucode":"B10586AB93F010","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285596,"discussion_content":"别激动，你看看第一条你是不是有点问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592888886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547470,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/ce/430af28a.jpg","nickname":"七弦","note":"","ucode":"460097EC6CBB02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285444,"discussion_content":"emm,canvas是帧绘制，所以改动东西只能重绘。也算是有个状态机的概念吧。只了解有分层的做法来实现局部渲染但是没实践过。正好可以向老师学习下。好东西，后面还有很多问题需要请教，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592837215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":230233,"user_name":"皮特尔","can_delete":false,"product_type":"c1","uid":1017161,"ip_address":"","ucode":"313862C91DD325","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","comment_is_top":false,"comment_ctime":1593319537,"is_pvip":false,"replies":[{"id":"85009","content":"Canvas画布大小有限制，不同的浏览器不同，最新的Chrome下应该是不超过16384 X 16384，单个宽高不超过 32767像素，一般的可视化大屏足够用了。检测设备的Canvas大小可以用这个项目：https:&#47;&#47;github.com&#47;jhildenbiddle&#47;canvas-size","user_name":"作者回复","comment_id":230233,"uid":"1159792","ip_address":"","utype":1,"ctime":1593337421,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"70312796273","product_id":100053801,"comment_content":"Canvas 是不是有5M的大小限制？这个问题怎么解决呢？","like_count":17,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499810,"discussion_content":"Canvas画布大小有限制，不同的浏览器不同，最新的Chrome下应该是不超过16384 X 16384，单个宽高不超过 32767像素，一般的可视化大屏足够用了。检测设备的Canvas大小可以用这个项目：https://github.com/jhildenbiddle/canvas-size","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593337421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229192,"user_name":"浮生若梦","can_delete":false,"product_type":"c1","uid":1161676,"ip_address":"","ucode":"71553F5974F8D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/b9/cc/80f6bf88.jpg","comment_is_top":false,"comment_ctime":1592920580,"is_pvip":false,"replies":[{"id":"84667","content":"canvas2d绘图是通过自身的api，gpu是浏览器底层调用的，不受开发者控制。webgl不一样，将数据写入帧缓冲之后，最终通过WebGLProgram来执行shader完成图形渲染，所以webgl能够自己控制gpu渲染。有很多图形计算，webgl是可以放在shader里面去计算的，这样比用js计算快，这就是gpu和cpu计算的区别。另外为什么threejs的自定义的shader会更好，也是因为我们可以在shader中完成一些计算，还有threejs精灵默认的shader是根据材质生成的，里面的计算也是依照一些规则来给出的。自定义shader更灵活。","user_name":"作者回复","comment_id":229192,"uid":"1159792","ip_address":"","utype":1,"ctime":1592987145,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"61722462724","product_id":100053801,"comment_content":"canvas和webgl都是GPU绘图，但是他们在代码中都是以js的形式来写的。那么首先需要解析js然后才能绘制，这里是CPU在起作用。但是后期更改图像（js代码）的时候，还是纯GPU操作吗？会不会插入js的CPU操作，最后绘制才进入GPU操作？相比html和css只是少了前期布局和绘制的步骤，因为浏览器最后将html和css的图像展现在页面最终也是会到GPU里。另外，threejs中的shader貌似比一般的threejs（如精灵）效果更好，这又是什么原理呢？","like_count":15,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499368,"discussion_content":"canvas2d绘图是通过自身的api，gpu是浏览器底层调用的，不受开发者控制。webgl不一样，将数据写入帧缓冲之后，最终通过WebGLProgram来执行shader完成图形渲染，所以webgl能够自己控制gpu渲染。有很多图形计算，webgl是可以放在shader里面去计算的，这样比用js计算快，这就是gpu和cpu计算的区别。另外为什么threejs的自定义的shader会更好，也是因为我们可以在shader中完成一些计算，还有threejs精灵默认的shader是根据材质生成的，里面的计算也是依照一些规则来给出的。自定义shader更灵活。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592987145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2049021,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/43/fd/cf190699.jpg","nickname":"Geek_frank","note":"","ucode":"CF973E61ED2E59","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287178,"discussion_content":"你们都这么深入的吗？！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593396148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":229248,"user_name":"gltjk","can_delete":false,"product_type":"c1","uid":1341515,"ip_address":"","ucode":"A2ACFE7D8A32C5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7hqBj1WIXVJgRwxVEg7fREAwI04BKRM8ibzVA8DIOaLSLqIrjw8UYr9GDUFFZW7mhBLC4hSp5r9g/132","comment_is_top":false,"comment_ctime":1592930634,"is_pvip":false,"replies":[{"id":"84708","content":"写得挺好的呀。声明式和指令式只是和图形系统本身特性有关，是相对而言的。这里这个具体问题即使用svg也可以用指令式的思路来写，总体挺好的","user_name":"作者回复","comment_id":229248,"uid":"1159792","ip_address":"","utype":1,"ctime":1593010113,"user_name_real":"月影"}],"discussion_count":4,"race_medal":0,"score":"35952669002","product_id":100053801,"comment_content":"按老师的建议用 &lt;path&gt; 重构了 SVG 饼图（不过由声明式变成了命令式😂），同时把数据与视图分离了。https:&#47;&#47;codepen.io&#47;gltjk&#47;pen&#47;vYLmdvJ","like_count":8,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499398,"discussion_content":"写得挺好的呀。声明式和指令式只是和图形系统本身特性有关，是相对而言的。这里这个具体问题即使用svg也可以用指令式的思路来写，总体挺好的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593010113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1747383,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a9/b7/b1ae1deb.jpg","nickname":"Geek_6cd24e","note":"","ucode":"7DD1B435EF2860","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549088,"discussion_content":"很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161233,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/11/26838646.jpg","nickname":"彧豪","note":"","ucode":"8979F477E0BC5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374817,"discussion_content":"可以可以, 666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621378522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046639,"avatar":"","nickname":"Geek_13e8db","note":"","ucode":"3E214016FC2862","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285787,"discussion_content":"Good job!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592945953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229424,"user_name":"陈启年","can_delete":false,"product_type":"c1","uid":1101007,"ip_address":"","ucode":"EE34FC76AE3C9B","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/cf/1c19ad6d.jpg","comment_is_top":false,"comment_ctime":1592990407,"is_pvip":false,"replies":[{"id":"84732","content":"css代码里很难直观看出数据的对应关系，用var和calc是可以解决一部分问题，不过还是比较麻烦。<br>1没有特别好的办法，可以用js或者用css预处理器来解决。<br>2也确实是如此，所以一般可视化不用html&#47;css，只有最简单的存展示类的才用一下。<br>3的话动态数据项自然没法直接用css属性定义，用编译工具结合预处理器可以做，比较麻烦，估计还是要依靠css<br>所以结论就是html&#47;css在可视化中适应很少，但是可以用来展示一些简单的图表，一般适合静态展示。<br>","user_name":"作者回复","comment_id":229424,"uid":"1159792","ip_address":"","utype":1,"ctime":1593050399,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"27362794183","product_id":100053801,"comment_content":"在使用HTML+CSS实现可视化章节中，月影说“从 CSS 代码里，我们很难看出数据与图形的对应关系”。那么使用variable还是能做到对应关系的，比如：<br>.bargraph div{<br>&#47;&#47; 初始值<br>--start: 100%;<br>--end: 100%;<br>background-image: linear-gradient(<br>to top,<br>pink var(--start),<br>orange 0,<br>orange var(--end),<br>transparent 0<br>);<br><br>有几个问题请教：<br>1，background-image无法使用transition，动画很硬；  <br>2，柱子内部是画出来的，子色块无法交互；<br>3，数据项不定的情况下，没办法在css中以字面量去定义，只能在js中写一堆css；","like_count":6,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499476,"discussion_content":"css代码里很难直观看出数据的对应关系，用var和calc是可以解决一部分问题，不过还是比较麻烦。\n1没有特别好的办法，可以用js或者用css预处理器来解决。\n2也确实是如此，所以一般可视化不用html/css，只有最简单的存展示类的才用一下。\n3的话动态数据项自然没法直接用css属性定义，用编译工具结合预处理器可以做，比较麻烦，估计还是要依靠css\n所以结论就是html/css在可视化中适应很少，但是可以用来展示一些简单的图表，一般适合静态展示。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593050399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229144,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1592906965,"is_pvip":true,"replies":[{"id":"84674","content":"现在浏览器的canvas一般有webgl2、webgl和2d三种上下文。它们并不是一个完整的canvas api规范，而是分成了2d规范和webgl规范。webgl规范是opengl es规范在web端的实现，其中webgl2对应opengl es 3.0，而webgl对应的是opengl es 2.0。","user_name":"作者回复","comment_id":229144,"uid":"1159792","ip_address":"","utype":1,"ctime":1592987895,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"27362710741","product_id":100053801,"comment_content":"Canvas 2D 和 WebGL 都是 Canvas API 的一种上下文， 那么 Canvas API 到底有多少中上下文 API 呢？ <br><br>还有问题就是 Canvas API  是不是就是一个接口规范， Canvas 2D 和  WebGL 只是其中的一种实现？","like_count":7,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499352,"discussion_content":"现在浏览器的canvas一般有webgl2、webgl和2d三种上下文。它们并不是一个完整的canvas api规范，而是分成了2d规范和webgl规范。webgl规范是opengl es规范在web端的实现，其中webgl2对应opengl es 3.0，而webgl对应的是opengl es 2.0。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592987895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240778,"user_name":"KeilingZhuang","can_delete":false,"product_type":"c1","uid":2114442,"ip_address":"","ucode":"CDBA0336FE3E26","user_header":"https://static001.geekbang.org/account/avatar/00/20/43/8a/9380fe92.jpg","comment_is_top":false,"comment_ctime":1597061540,"is_pvip":false,"replies":[{"id":"89830","content":"是的","user_name":"作者回复","comment_id":240778,"uid":"1159792","ip_address":"","utype":1,"ctime":1598313915,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"14481963428","product_id":100053801,"comment_content":"请问canvas是间接控制GPU渲染，webGL是直接控制GPU渲染吗？","like_count":3,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503555,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598313915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230109,"user_name":"温润玉","can_delete":false,"product_type":"c1","uid":2026802,"ip_address":"","ucode":"8088793A1DBFF7","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ed/32/3f0a93de.jpg","comment_is_top":false,"comment_ctime":1593264386,"is_pvip":false,"replies":[{"id":"85072","content":"前沿技术只要有兴趣我还是鼓励大家多关注的。而且这些技术与可视化也能紧密结合。","user_name":"作者回复","comment_id":230109,"uid":"1159792","ip_address":"","utype":1,"ctime":1593404664,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"14478166274","product_id":100053801,"comment_content":"请问月影老师对WebXR这种新技术有什么看法呢？非常感谢╰(*´︶`*)╯","like_count":3,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499767,"discussion_content":"前沿技术只要有兴趣我还是鼓励大家多关注的。而且这些技术与可视化也能紧密结合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593404664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229233,"user_name":"潘pan","can_delete":false,"product_type":"c1","uid":1500535,"ip_address":"","ucode":"5C7A04F1F79210","user_header":"","comment_is_top":false,"comment_ctime":1592927886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14477829774","product_id":100053801,"comment_content":"月影爸爸~~ 我来报道了","like_count":3},{"had_liked":false,"id":229190,"user_name":"啊啊啊黑猫警长","can_delete":false,"product_type":"c1","uid":1332196,"ip_address":"","ucode":"17AD678AB908C6","user_header":"https://static001.geekbang.org/account/avatar/00/14/53/e4/05d3a210.jpg","comment_is_top":false,"comment_ctime":1592920312,"is_pvip":false,"replies":[{"id":"84670","content":"可以系统地看一些资料，这里推荐油管上3blue1brown大神的视频。","user_name":"作者回复","comment_id":229190,"uid":"1159792","ip_address":"","utype":1,"ctime":1592987368,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"14477822200","product_id":100053801,"comment_content":"图形中运用到的数学知识,除了后面要讲的以外.平时应该通过什么来学习积累呢.典型案例吗","like_count":3,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499367,"discussion_content":"可以系统地看一些资料，这里推荐油管上3blue1brown大神的视频。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592987368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228833,"user_name":"宗麒麟","can_delete":false,"product_type":"c1","uid":1385772,"ip_address":"","ucode":"AC15E3AFAECE3B","user_header":"https://static001.geekbang.org/account/avatar/00/15/25/2c/8f61089f.jpg","comment_is_top":false,"comment_ctime":1592819592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14477721480","product_id":100053801,"comment_content":"月影大佬，我来报道了","like_count":3},{"had_liked":false,"id":280247,"user_name":"Hong","can_delete":false,"product_type":"c1","uid":1162862,"ip_address":"","ucode":"2E7FB03BFEC8F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/be/6e/46a5da10.jpg","comment_is_top":false,"comment_ctime":1614141710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10204076302","product_id":100053801,"comment_content":"终于找到源码，在作者github中找到<br>https:&#47;&#47;github.com&#47;akira-cn&#47;graphics&#47;tree&#47;master&#47;data-graph-css<br>https:&#47;&#47;github.com&#47;akira-cn&#47;graphics 中有线上可访问链接 数据图表-css","like_count":2},{"had_liked":false,"id":229140,"user_name":"王子晨","can_delete":false,"product_type":"c1","uid":1390005,"ip_address":"","ucode":"4A207E2AB34253","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/b5/a139a821.jpg","comment_is_top":false,"comment_ctime":1592906111,"is_pvip":false,"replies":[{"id":"84675","content":"不是，性能要看具体的使用场景。svg可以作为图像来绘制到canvas内，这可以带来一些使用上的便利。","user_name":"作者回复","comment_id":229140,"uid":"1159792","ip_address":"","utype":1,"ctime":1592987957,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"10182840703","product_id":100053801,"comment_content":"大佬请问，svg和canvas的混合使用，对于性能的消耗怎样的，可以理解为这种混合模式在性能上优于canvas，低于webGL么？","like_count":2,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499350,"discussion_content":"不是，性能要看具体的使用场景。svg可以作为图像来绘制到canvas内，这可以带来一些使用上的便利。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592987957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1390005,"avatar":"https://static001.geekbang.org/account/avatar/00/15/35/b5/a139a821.jpg","nickname":"王子晨","note":"","ucode":"4A207E2AB34253","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286080,"discussion_content":"明白了老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593048807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229055,"user_name":".a_c.","can_delete":false,"product_type":"c1","uid":2045919,"ip_address":"","ucode":"E4EBD78345B1AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/37/df/2eba9eb3.jpg","comment_is_top":false,"comment_ctime":1592889291,"is_pvip":false,"replies":[{"id":"84676","content":"出书这个现在暂时还没有想，后面看一下～","user_name":"作者回复","comment_id":229055,"uid":"1159792","ip_address":"","utype":1,"ctime":1592988041,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"10182823883","product_id":100053801,"comment_content":"老师期待继续的课程<br><br>顺便问问有计划出书不？[调皮]","like_count":2,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499316,"discussion_content":"出书这个现在暂时还没有想，后面看一下～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592988041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300843,"user_name":"想去看海","can_delete":false,"product_type":"c1","uid":2675089,"ip_address":"","ucode":"8B181130E3D6EE","user_header":"https://static001.geekbang.org/account/avatar/00/28/d1/91/0cb215b7.jpg","comment_is_top":false,"comment_ctime":1625402700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5920369996","product_id":100053801,"comment_content":"视频流推送webrtc应该算是第五种，UE4里用到了这个技术在浏览器呈现可视化，性能比webGL更好，当然也有缺点","like_count":1},{"had_liked":false,"id":247580,"user_name":"机智帅气的小雨","can_delete":false,"product_type":"c1","uid":1608963,"ip_address":"","ucode":"E2CDEB9D7F43F5","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/03/2cfad860.jpg","comment_is_top":false,"comment_ctime":1599747494,"is_pvip":false,"replies":[{"id":"94969","content":"加油","user_name":"作者回复","comment_id":247580,"uid":"1159792","ip_address":"","utype":1,"ctime":1605493365,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5894714790","product_id":100053801,"comment_content":"第一天报道，希望能够在月影大大的帮助下入门可视化，蟹蟹","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505440,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605493365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229198,"user_name":"浮生若梦","can_delete":false,"product_type":"c1","uid":1161676,"ip_address":"","ucode":"71553F5974F8D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/b9/cc/80f6bf88.jpg","comment_is_top":false,"comment_ctime":1592921373,"is_pvip":false,"replies":[{"id":"84665","content":"整体课程会更注重原理一些，毕竟对于入门来说，打好基础才是最重要的。","user_name":"作者回复","comment_id":229198,"uid":"1159792","ip_address":"","utype":1,"ctime":1592986661,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5887888669","product_id":100053801,"comment_content":"希望老师后面讲具体技术的时候多结合项目的难点、前沿趋势、底层原理讲解，不要讲成入门demo","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499373,"discussion_content":"整体课程会更注重原理一些，毕竟对于入门来说，打好基础才是最重要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592986661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229033,"user_name":"gltjk","can_delete":false,"product_type":"c1","uid":1341515,"ip_address":"","ucode":"A2ACFE7D8A32C5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7hqBj1WIXVJgRwxVEg7fREAwI04BKRM8ibzVA8DIOaLSLqIrjw8UYr9GDUFFZW7mhBLC4hSp5r9g/132","comment_is_top":false,"comment_ctime":1592882599,"is_pvip":false,"replies":[{"id":"84510","content":"棒！看了一下代码，写得挺好的。不过SVG用circle和stroke-dasharray来做，一般来说双色的饼图这样做简单，多色的感觉直接用path来做是不是会简单些呢？","user_name":"作者回复","comment_id":229033,"uid":"1159792","ip_address":"","utype":1,"ctime":1592906507,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"5887849895","product_id":100053801,"comment_content":"用 SVG 做了文章里 HTML+CSS 实现的饼图，感觉麻烦多了，要自己计算极坐标……https:&#47;&#47;codepen.io&#47;gltjk&#47;pen&#47;XWXRdVr","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499304,"discussion_content":"棒！看了一下代码，写得挺好的。不过SVG用circle和stroke-dasharray来做，一般来说双色的饼图这样做简单，多色的感觉直接用path来做是不是会简单些呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592906507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1341515,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7hqBj1WIXVJgRwxVEg7fREAwI04BKRM8ibzVA8DIOaLSLqIrjw8UYr9GDUFFZW7mhBLC4hSp5r9g/132","nickname":"gltjk","note":"","ucode":"A2ACFE7D8A32C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285618,"discussion_content":"Canvas 的也做出来放进去了，数学上相对简单，但就是有种从函数式编程倒退回去的感觉……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592896197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229002,"user_name":"CPPAlien","can_delete":false,"product_type":"c1","uid":1161632,"ip_address":"","ucode":"CF07F891E7E75D","user_header":"https://static001.geekbang.org/account/avatar/00/11/b9/a0/54d8fc6d.jpg","comment_is_top":false,"comment_ctime":1592878258,"is_pvip":false,"replies":[{"id":"84512","content":"不是用WebGL，但是肯定用了GPU渲染。","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1592906836,"ip_address":"","comment_id":229002,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5887845554","product_id":100053801,"comment_content":"所以 Canvas 是怎么实现的呢？也是用webgl吗？dom节点的渲染最终也是webgl吗？","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499294,"discussion_content":"不是用WebGL，但是肯定用了GPU渲染。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592906836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008087,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/61/d7/a31f6526.jpg","nickname":"ryannz","note":"","ucode":"AB810C88F66D5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551111,"discussion_content":"很好的问题，在chrome里面，dom svg canvas都是由skia这个库来渲染的，这个库就是c++加强版的canvas，webgl由angle项目来实现，webgpu由dawn来实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644901815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2675089,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d1/91/0cb215b7.jpg","nickname":"想去看海","note":"","ucode":"8B181130E3D6EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382071,"discussion_content":"是用的Skia引擎，打开浏览器控制台，选择Layers就可以看到网页具体绘制情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625401336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228899,"user_name":"TYY💭","can_delete":false,"product_type":"c1","uid":1951035,"ip_address":"","ucode":"1D979CFE460BBB","user_header":"https://static001.geekbang.org/account/avatar/00/1d/c5/3b/d9160ddb.jpg","comment_is_top":false,"comment_ctime":1592835756,"is_pvip":false,"replies":[{"id":"84516","content":"谢谢~","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1592907321,"ip_address":"","comment_id":228899,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887803052","product_id":100053801,"comment_content":"老师讲的非常有条理了","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499242,"discussion_content":"谢谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592907321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347099,"user_name":"微微","can_delete":false,"product_type":"c1","uid":2045593,"ip_address":"","ucode":"F0002DBEFAF425","user_header":"","comment_is_top":false,"comment_ctime":1653713275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653713275","product_id":100053801,"comment_content":"老师，想问下，canvas 与 svg 的结合是指利用svg的绘图灵活性，然后作为image绘制进canvas，但是操作单个svg的能力还是需要去计算，是么。","like_count":0},{"had_liked":false,"id":303652,"user_name":"苏茂林","can_delete":false,"product_type":"c1","uid":1065086,"ip_address":"","ucode":"6098F5F1754A8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/40/7e/2084e17c.jpg","comment_is_top":false,"comment_ctime":1626917122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626917122","product_id":100053801,"comment_content":"每天学习一篇打卡","like_count":0},{"had_liked":false,"id":300840,"user_name":"想去看海","can_delete":false,"product_type":"c1","uid":2675089,"ip_address":"","ucode":"8B181130E3D6EE","user_header":"https://static001.geekbang.org/account/avatar/00/28/d1/91/0cb215b7.jpg","comment_is_top":false,"comment_ctime":1625401741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625401741","product_id":100053801,"comment_content":"2021年7月4号第一次来学习，收获满满，感谢分享知识^_^","like_count":0},{"had_liked":false,"id":295491,"user_name":"Tinker Bell","can_delete":false,"product_type":"c1","uid":1383297,"ip_address":"","ucode":"B43BFC0D45168E","user_header":"https://static001.geekbang.org/account/avatar/00/15/1b/81/51d4e5aa.jpg","comment_is_top":false,"comment_ctime":1622449171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622449171","product_id":100053801,"comment_content":"噢，终止点小于前一个颜色的终止点就可以实现硬转换","like_count":0},{"had_liked":false,"id":295485,"user_name":"Tinker Bell","can_delete":false,"product_type":"c1","uid":1383297,"ip_address":"","ucode":"B43BFC0D45168E","user_header":"https://static001.geekbang.org/account/avatar/00/15/1b/81/51d4e5aa.jpg","comment_is_top":false,"comment_ctime":1622447659,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1622447659","product_id":100053801,"comment_content":"background: linear-gradient(to bottom, transparent 75%, #37c 0, #37c 85%, #3c7 0);<br>为什么最后一个颜色值的百分比设为0之后可以实现85%～100%直接就是最后一个颜色","like_count":0,"discussions":[{"author":{"id":2675089,"avatar":"https://static001.geekbang.org/account/avatar/00/28/d1/91/0cb215b7.jpg","nickname":"想去看海","note":"","ucode":"8B181130E3D6EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382072,"discussion_content":"这个时候的应该0是个起始值，当它小于前一个颜色的百分比的话，会以前一个颜色的百分比为开始，之后的都是这个颜色","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625401595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293389,"user_name":"彧豪","can_delete":false,"product_type":"c1","uid":1161233,"ip_address":"","ucode":"8979F477E0BC5B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/11/26838646.jpg","comment_is_top":false,"comment_ctime":1621380119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621380119","product_id":100053801,"comment_content":"去年09月就买的课了, 一直没看, 最近才开始看, 希望能从传统前端开发转可视化开发<br>话说月影大大, 这个canvas和webgl有什么关系啊?<br>我之前用krpano做过全景项目, 运行在浏览器里也是canvas渲染的, 但当在ie9下的时候会报错:<br>&quot;HTML5 Browser with WebGL or CSS3D support required!&quot;, 所以canvas将webgl封装了一下?还是从krpano的这个报错并不能看出canvas和webgl的关系?<br>","like_count":0},{"had_liked":false,"id":289360,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1060892,"ip_address":"","ucode":"B29CA98AC45F88","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/1c/e160955d.jpg","comment_is_top":false,"comment_ctime":1618989217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618989217","product_id":100053801,"comment_content":"几十个元素到上百个元素，用svg会影响性能吗","like_count":0},{"had_liked":false,"id":267264,"user_name":"undefined","can_delete":false,"product_type":"c1","uid":2046753,"ip_address":"","ucode":"0CDDEFC591E3AF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3b/21/69b8cebe.jpg","comment_is_top":false,"comment_ctime":1607663634,"is_pvip":false,"replies":[{"id":"101095","content":"谢谢","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1612875930,"ip_address":"","comment_id":267264,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607663634","product_id":100053801,"comment_content":"课程物超所值，赞！","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511569,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612875930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231108,"user_name":"张飞蓬","can_delete":false,"product_type":"c1","uid":1435687,"ip_address":"","ucode":"79F000358F85FD","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/27/0472c557.jpg","comment_is_top":false,"comment_ctime":1593585521,"is_pvip":false,"replies":[{"id":"85411","content":"文末有链接啊","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593654681,"ip_address":"","comment_id":231108,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593585521","product_id":100053801,"comment_content":"月影老师这个详细代码在哪里，我看看","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500162,"discussion_content":"文末有链接啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593654681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}