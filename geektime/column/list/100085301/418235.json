{"id":418235,"title":"11｜内存管理：从创建到消亡，值都经历了什么？","content":"<p>你好，我是陈天。</p><p>初探 Rust 以来，我们一直在学习有关所有权和生命周期的内容，想必现在，你对 Rust 内存管理的核心思想已经有足够理解了。</p><p>通过单一所有权模式，Rust 解决了堆内存过于灵活、不容易安全高效地释放的问题，既避免了手工释放内存带来的巨大心智负担和潜在的错误；又避免了全局引入追踪式 GC 或者 ARC 这样的额外机制带来的效率问题。</p><p>不过所有权模型也引入了很多新概念，从 Move / Copy / Borrow 语义到生命周期管理，所以学起来有些难度。</p><p>但是，你发现了吗，其实大部分新引入的概念，包括 Copy 语义和值的生命周期，在其它语言中都是隐式存在的，只不过 Rust <strong>把它们定义得更清晰，更明确地界定了使用的范围而已</strong>。</p><p>今天我们沿着之前的思路，先梳理和总结 Rust 内存管理的基本内容，然后从一个值的奇幻之旅讲起，看看在内存中，一个值，从创建到消亡都经历了什么，把之前讲的融会贯通。</p><p>到这里你可能有点不耐烦了吧，怎么今天又要讲内存的知识。其实是因为，<strong>内存管理是任何编程语言的核心</strong>，重要性就像武学中的内功。只有当我们把数据在内存中如何创建、如何存放、如何销毁弄明白，之后阅读代码、分析问题才会有一种游刃有余的感觉。</p><h2>内存管理</h2><!-- [[[read_end]]] --><p>我们在<a href=\"https://time.geekbang.org/column/article/408409\">第一讲</a>说过堆和栈，它们是代码中使用内存的主要场合。</p><p>栈内存“分配”和“释放”都很高效，在编译期就确定好了，因而它无法安全承载动态大小或者生命周期超出帧存活范围外的值。所以，我们需要运行时可以自由操控的内存，也就是堆内存，来弥补栈的缺点。</p><p>堆内存足够灵活，然而堆上数据的生命周期该如何管理，成为了各门语言的心头大患。</p><p>C 采用了未定义的方式，由开发者手工控制；C++ 在 C 的基础上改进，引入智能指针，半手工半自动。Java 和 DotNet 使用 GC 对堆内存全面接管，堆内存进入了受控（managed）时代。所谓受控代码（managed code），就是代码在一个“运行时”下工作，由运行时来保证堆内存的安全访问。</p><p>整个堆内存生命周期管理的发展史如下图所示：<img src=\"https://static001.geekbang.org/resource/image/c7/d7/c7eec71df0fdc85c905c60ab78db15d7.jpg?wh=3624x1574\" alt=\"\"></p><p>而Rust 的创造者们，重新审视了堆内存的生命周期，发现<strong>大部分堆内存的需求在于动态大小，小部分需求是更长的生命周期</strong>。所以它默认将堆内存的生命周期和使用它的栈内存的生命周期绑在一起，并留了个小口子 leaked机制，让堆内存在需要的时候，可以有超出帧存活期的生命周期。</p><p>我们看下图的对比总结：<br>\n<img src=\"https://static001.geekbang.org/resource/image/e3/b1/e381fa9ab73036480df9c8a182dab4b1.jpg?wh=2562x1394\" alt=\"\"></p><p>有了这些基本的认知，我们再看看在值的创建、使用和销毁的过程中， Rust 是如何管理内存的。</p><p>希望学完今天的内容之后，看到一个 Rust 的数据结构，你就可以在脑海中大致浮现出，这个数据结构在内存中的布局：哪些字段在栈上、哪些在堆上，以及它大致的大小。</p><h2>值的创建</h2><p>当我们为数据结构创建一个值，并将其赋给一个变量时，根据值的性质，它有可能被创建在栈上，也有可能被创建在堆上。</p><p>简单回顾一下，我们在<a href=\"https://time.geekbang.org/column/article/408409\">第一</a>、<a href=\"https://time.geekbang.org/column/article/410038\">第二讲</a>说过，理论上，编译时可以确定大小的值都会放在栈上，包括 Rust 提供的原生类型比如字符、数组、元组（tuple）等，以及开发者自定义的固定大小的结构体（struct）、枚举（enum） 等。</p><p>如果数据结构的大小无法确定，或者它的大小确定但是在使用时需要更长的生命周期，就最好放在堆上。</p><p>接下来我们来看 struct / enum / vec&lt;T&gt; / String 这几种重要的数据结构在创建时的内存布局。</p><h3>struct</h3><p>Rust 在内存中排布数据时，<strong>会根据每个域的对齐（aligment）对数据进行重排</strong>，使其内存大小和访问效率最好。比如，一个包含 A、B、C 三个域的 struct，它在内存中的布局可能是 A、C、B：<img src=\"https://static001.geekbang.org/resource/image/0a/c4/0a1151168af2a19a23f8db16df101cc4.jpg?wh=2483x979\" alt=\"\"></p><p>为什么 Rust 编译器会这么做呢？</p><p>我们先看看 C 语言在内存中表述一个结构体时遇到的问题。来写一段代码，其中两个数据结构 S1 和 S2 都有三个域 a、b、c，其中 a 和 c 是 u8，占用一个字节，b 是 u16，占用两个字节。S1 在定义时顺序是 a、b、c，而 S2 在定义时顺序是 a、c、b：</p><p>猜猜看 S1 和 S2 的大小是多少？</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n\nstruct S1 {\n    u_int8_t a;\n    u_int16_t b;\n    u_int8_t c;\n};\n\nstruct S2 {\n    u_int8_t a;\n    u_int8_t c;\n    u_int16_t b;\n};\n\nvoid main() {\n    printf(\"size of S1: %d, S2: %d\", sizeof(struct S1), sizeof(struct S2));\n    }\n</code></pre><p>正确答案是：6 和 4。</p><p>为什么明明只用了 4 个字节，S1 的大小却是 6 呢？这是因为 CPU 在加载不对齐的内存时，性能会急剧下降，所以<strong>要避免用户定义不对齐的数据结构时，造成的性能影响</strong>。</p><p>对于这个问题，C 语言会对结构体会做这样的处理：</p><ol>\n<li>首先确定每个域的长度和对齐长度，原始类型的对齐长度和类型的长度一致。</li>\n<li>每个域的起始位置要和其对齐长度对齐，如果无法对齐，则添加 padding 直至对齐。</li>\n<li>结构体的对齐大小和其最大域的对齐大小相同，而结构体的长度则四舍五入到其对齐的倍数。</li>\n</ol><p>字面上看这三条规则，你是不是觉得像绕口令，别担心，我们结合刚才的代码再来看，其实很容易理解。</p><p>对于 S1，字段 a 是 u8 类型，所以其长度和对齐都是 1，b 是 u16，其长度和对齐是 2。然而因为 a 只占了一个字节，b 的偏移是 1，根据第二条规则，起始位置和 b 的长度无法对齐，所以编译器会添加一个字节的 padding，让 b 的偏移为 2，这样 b 就对齐了。<img src=\"https://static001.geekbang.org/resource/image/f7/37/f724ce693e12745d7ba976044e5aa937.jpg?wh=2956x1113\" alt=\"\"></p><p>随后 c 长度和对齐都是 1，不需要 padding。这样算下来，S1 的大小是 5，但根据上面的第三条规则，S1 的对齐是 2，和 5 最接近的“2 的倍数”是 6，所以 S1 最终的长度是 6。其实，这最后一条规则是为了让 S1 放在数组中，可以有效对齐。</p><p>所以，<strong>如果结构体的定义考虑地不够周全，会为了对齐浪费很多空间</strong>。我们看到，保存同样的数据，S1 和 S2 的大小相差了 50%。</p><p>使用 C 语言时，定义结构体的最佳实践是，充分考虑每一个域的对齐，合理地排列它们，使其内存使用最高效。这个工作由开发者做会很费劲，尤其是嵌套的结构体，需要仔细地计算才能得到最优解。</p><p>而 Rust 编译器替我们自动完成了这个优化，这就是为什么 Rust 会自动重排你定义的结构体，来达到最高效率。我们看同样的代码，在 Rust 下，S1 和 S2 大小都是 4（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c82908a73aedc9b0d8ac2be0b43f6f6d\">代码</a>）：</p><pre><code class=\"language-rust\">use std::mem::{align_of, size_of};\n\nstruct S1 {\n    a: u8,\n    b: u16,\n    c: u8,\n}\n\nstruct S2 {\n    a: u8,\n    c: u8,\n    b: u16,\n}\n\nfn main() {\n    println!(\"sizeof S1: {}, S2: {}\", size_of::&lt;S1&gt;(), size_of::&lt;S2&gt;());\n    println!(\"alignof S1: {}, S2: {}\", align_of::&lt;S1&gt;(), align_of::&lt;S2&gt;());\n}\n</code></pre><p>你也可以看这张图来直观对比， C 和 Rust 的行为：<img src=\"https://static001.geekbang.org/resource/image/3d/42/3db1a2ccebf936aa10d9c1bd7fcf8a42.jpg?wh=3612x2093\" alt=\"\"></p><p>虽然，Rust 编译器默认为开发者优化结构体的排列，但你也可以使用<code>#[repr]</code> 宏，强制让 Rust 编译器不做优化，和 C 的行为一致，这样，Rust 代码可以方便地和 C 代码无缝交互。</p><p>在明白了 Rust 下 struct 的布局后（ tuple 类似），我们看看 enum 。</p><h3>enum</h3><p>enum 我们之前讲过，在 Rust 下它是一个标签联合体（tagged union），它的大小是标签的大小，加上最大类型的长度。</p><p><a href=\"https://time.geekbang.org/column/article/411632\">第三讲</a>基础语法中，我们定义 enum 数据结构时，简单提到有 Option&lt;T&gt; 和 Result&lt;T, E&gt; 两种设计举例， Option 是有值/无值这种最简单的枚举类型，Result 包括成功返回数据和错误返回数据的枚举类型，后面会详细讲到。这里我们理解其内存设计就可以了。</p><p>根据刚才说的三条对齐规则，tag 后的内存，会根据其对齐大小进行对齐，所以对于 Option&lt;u8&gt;，其长度是 1 + 1 = 2 字节，而 Option&lt;f64&gt;，长度是 8 + 8 =16 字节。一般而言，64 位 CPU 下，enum 的最大长度是：最大类型的长度 + 8，因为 64 位 CPU 的最大对齐是 64bit，也就是 8 个字节。</p><p>下图展示了 enum、Option&lt;T&gt;以及Result&lt;T, E&gt; 的布局：<img src=\"https://static001.geekbang.org/resource/image/f2/82/f22b2700de556385efbc44f04dd6b982.jpg?wh=2956x996\" alt=\"\"></p><p>值得注意的是，Rust 编译器会对 enum 做一些额外的优化，让某些常用结构的内存布局更紧凑。我们先来写一段代码，帮你更好地了解不同数据结构占用的大小（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=34c66e50a56c5e4bb3a3dd97c3a90358\">代码</a>）：</p><pre><code class=\"language-rust\">use std::collections::HashMap;\nuse std::mem::size_of;\n\nenum E {\n    A(f64),\n    B(HashMap&lt;String, String&gt;),\n    C(Result&lt;Vec&lt;u8&gt;, String&gt;),\n}\n\n// 这是一个声明宏，它会打印各种数据结构本身的大小，在 Option 中的大小，以及在 Result 中的大小\nmacro_rules! show_size {\n    (header) =&gt; {\n        println!(\n            \"{:&lt;24} {:&gt;4}    {}    {}\",\n            \"Type\", \"T\", \"Option&lt;T&gt;\", \"Result&lt;T, io::Error&gt;\"\n        );\n        println!(\"{}\", \"-\".repeat(64));\n    };\n    ($t:ty) =&gt; {\n        println!(\n            \"{:&lt;24} {:4} {:8} {:12}\",\n            stringify!($t),\n            size_of::&lt;$t&gt;(),\n            size_of::&lt;Option&lt;$t&gt;&gt;(),\n            size_of::&lt;Result&lt;$t, std::io::Error&gt;&gt;(),\n        )\n    };\n}\n\nfn main() {\n    show_size!(header);\n    show_size!(u8);\n    show_size!(f64);\n    show_size!(&amp;u8);\n    show_size!(Box&lt;u8&gt;);\n    show_size!(&amp;[u8]);\n\n    show_size!(String);\n    show_size!(Vec&lt;u8&gt;);\n    show_size!(HashMap&lt;String, String&gt;);\n    show_size!(E);\n}\n</code></pre><p>这段代码包含了一个声明宏（declarative macro）show_size，我们先不必管它。运行这段代码时，你会发现，Option 配合带有引用类型的数据结构，比如 &amp;u8、Box、Vec、HashMap ，<strong>没有额外占用空间</strong>，这就很有意思了。</p><pre><code class=\"language-plain\">Type&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; T&nbsp; &nbsp; Option&lt;T&gt;&nbsp; &nbsp; Result&lt;T, io::Error&gt;\n----------------------------------------------------------------\nu8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;24\nf64&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8&nbsp; &nbsp; &nbsp; &nbsp;16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;24\n&amp;u8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8&nbsp; &nbsp; &nbsp; &nbsp; 8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;24\nBox&lt;u8&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;8&nbsp; &nbsp; &nbsp; &nbsp; 8&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;24\n&amp;[u8]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 16&nbsp; &nbsp; &nbsp; &nbsp;16&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;24\nString&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;24&nbsp; &nbsp; &nbsp; &nbsp;24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;32\nVec&lt;u8&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 24&nbsp; &nbsp; &nbsp; &nbsp;24&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;32\nHashMap&lt;String, String&gt;&nbsp; &nbsp; 48&nbsp; &nbsp; &nbsp; &nbsp;48&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;56\nE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 56&nbsp; &nbsp; &nbsp; &nbsp;56&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;64\n</code></pre><p>对于 Option 结构而言，它的 tag 只有两种情况：0 或 1， tag 为 0 时，表示 None，tag 为 1 时，表示 Some。</p><p>正常来说，当我们把它和一个引用放在一起时，虽然 tag 只占 1 个 bit，但 64 位 CPU 下，引用结构的对齐是 8，所以它自己加上额外的 padding，会占据 8 个字节，一共16字节，这非常浪费内存。怎么办呢？</p><p>Rust 是这么处理的，我们知道，引用类型的第一个域是个指针，而指针是不可能等于 0 的，但是我们<strong>可以复用这个指针：当其为 0 时，表示 None，否则是 Some</strong>，减少了内存占用，这是个非常巧妙的优化，我们可以学习。</p><h3>vec&lt;T&gt; 和 String</h3><p>从刚才代码的结果中，我们也看到 String 和 Vec&lt;u8&gt; 占用相同的大小，都是 24 个字节。其实，如果你打开 String 结构的<a href=\"https://doc.rust-lang.org/src/alloc/string.rs.html#279-281\">源码</a>，可以看到，它内部就是一个 Vec&lt;u8&gt;。</p><p>而 <a href=\"https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#294-302\">Vec&lt;T&gt;结构</a>是 3 个 word 的胖指针，包含：一个指向堆内存的指针pointer、分配的堆内存的容量capacity，以及数据在堆内存的长度length，如下图所示：<img src=\"https://static001.geekbang.org/resource/image/c2/37/c2234ab79c2eaf2c76698c8f11b24d37.jpg?wh=2368x977\" alt=\"\"></p><p>很多动态大小的数据结构，在创建时都有类似的内存布局：<strong>栈内存放的胖指针，指向堆内存分配出来的数据</strong>，我们之前介绍的 Rc 也是如此。</p><p>关于值在创建时的内存布局，今天就先讲这么多。如果你对其它数据结构的内存布局感兴趣，可以访问 <a href=\"https://cheats.rs/#data-layout\">cheats.rs</a>，它是 Rust 语言的备忘清单，非常适合随时翻阅。比如，引用类型的内存布局：<img src=\"https://static001.geekbang.org/resource/image/98/a5/98e80265d8fbe77a9c6e53df22efafa5.png?wh=1640x402\" alt=\"\"></p><p>现在，值已经创建成功了，我们对它的内存布局有了足够的认识。那在使用期间，它的内存会发生什么样的变化呢，我们接着看。</p><h2>值的使用</h2><p>在讲所有权的时候，我们知道了，对 Rust 而言，一个值如果没有实现 Copy，在赋值、传参以及函数返回时会被 Move。</p><p><strong>其实 Copy 和 Move 在内部实现上，都是浅层的按位做内存复制</strong>，只不过 Copy 允许你访问之前的变量，而 Move 不允许。我们看图：<img src=\"https://static001.geekbang.org/resource/image/4a/55/4a0fd813e6722c9efef3c8be91b3d155.jpg?wh=2547x1578\" alt=\"\"></p><p>在我们的认知中，内存复制是个很重的操作，效率很低。确实是这样，如果你的关键路径中的每次调用，都要复制几百 k 的数据，比如一个大数组，是很低效的。</p><p>但是，如果你要复制的只是原生类型（Copy）或者栈上的胖指针（Move），不涉及堆内存的复制也就是深拷贝（deep copy），那这个效率是非常高的，我们不必担心每次赋值或者每次传参带来的性能损失。</p><p>所以，无论是 Copy 还是 Move，它的效率都是非常高的。</p><p>不过也有一个例外，要说明：对栈上的大数组传参，由于需要复制整个数组，会影响效率。所以，一般我们<strong>建议在栈上不要放大数组</strong>，如果实在需要，那么传递这个数组时，最好用传引用而不是传值。</p><p>在使用值的过程中，除了 Move，你还需要注意值的动态增长。因为Rust 下，集合类型的数据结构，都会在使用过程中自动扩展。</p><p>以一个 Vec&lt;T&gt; 为例，当你使用完堆内存目前的容量后，还继续添加新的内容，就会触发堆内存的自动增长。有时候，集合类型里的数据不断进进出出，导致集合一直增长，但只使用了很小部分的容量，内存的使用效率很低，所以你要考虑使用，比如  <code>shrink_to_fit</code> 方法，来节约对内存的使用。</p><h2>值的销毁</h2><p>好，这个值的旅程已经过半，创建和使用都已经讲完了，最后我们谈谈值的销毁。</p><p>之前笼统地谈到，当所有者离开作用域，它拥有的值会被丢弃。那从代码层面讲，Rust 到底是如何丢弃的呢？</p><p>这里用到了 Drop trait。Drop trait 类似面向对象编程中的析构函数，<strong>当一个值要被释放，它的 Drop trait 会被调用</strong>。比如下面的代码，变量 greeting 是一个字符串，在退出作用域时，其 drop() 函数被自动调用，释放堆上包含 “hello world” 的内存，然后再释放栈上的内存：<img src=\"https://static001.geekbang.org/resource/image/0c/ae/0c0d83776e12a099453c837c997d93ae.jpg?wh=2170x1207\" alt=\"\"></p><p>如果要释放的值是一个复杂的数据结构，比如一个结构体，那么这个结构体在调用 drop() 时，会依次调用每一个域的 drop() 函数，如果域又是一个复杂的结构或者集合类型，就会递归下去，直到每一个域都释放干净。</p><p>我们可以看这个例子：<img src=\"https://static001.geekbang.org/resource/image/b8/94/b80ec8eac77944512626bdfc3byy0094.jpg?wh=2170x1207\" alt=\"\"></p><p>代码中的 student 变量是一个结构体，有 name、age、scores。其中 name 是 String，scores 是 HashMap，它们本身需要额外 drop()。又因为 HashMap 的 key 是 String，所以还需要进一步调用这些 key 的 drop()。整个释放顺序从内到外是：先释放 HashMap 下的 key，然后释放 HashMap 堆上的表结构，最后释放栈上的内存。</p><h3>堆内存释放</h3><p>所有权机制规定了，一个值只能有一个所有者，所以在释放堆内存的时候，整个过程简单清晰，就是单纯调用 Drop trait，不需要有其他顾虑。这种对值安全，也没有额外负担的释放能力，是 Rust 独有的。</p><p>我觉得 Rust 在内存管理方面的设计特别像蚁群。在蚁群中，每个个体的行为都遵循着非常简单死板的规范，最终，<strong>大量简单的个体能构造出一个高效且不出错的系统</strong>。</p><p>反观其它语言，每个个体或者说值，都非常灵活，引用传来传去，最终却构造出来一个很难分析的复杂系统。单靠编译器无法决定，每个值在各个作用域中究竟能不能安全地释放，导致系统，要么像 C/C++ 一样将这个重担部分或者全部地交给开发者，要么像 Java 那样构建另一个系统来专门应对内存安全释放的问题。</p><p>在Rust里，你自定义的数据结构，绝大多数情况下，不需要实现自己的 Drop trait，编译器缺省的行为就足够了。但是，如果你想自己控制 drop 行为，你也可以为这些数据结构实现它。</p><p>如果你定义的 drop() 函数和系统自定义的 drop() 函数都 drop() 某个域，Rust 编译器会确保，这个域只会被 drop 一次。至于 Drop trait 怎么实现、有什么注意事项、什么场合下需要自定义，我们在后续的课程中会再详细展开。</p><h3>释放其他资源</h3><p>我们刚才讲 Rust 的 Drop trait 主要是为了应对堆内存释放的问题，其实，它还可以释放任何资源，比如 socket、文件、锁等等。Rust 对所有的资源都有很好的 <a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\">RAII 支持</a>。</p><p>比如我们创建一个文件 file，往里面写入 “hello world”，当 file 离开作用域时，不但它的内存会被释放，它占用的资源、操作系统打开的文件描述符，也会被释放，也就是文件会自动被关闭。（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f24400d9341994809c8e568d4a54fc62\">代码</a>）</p><pre><code class=\"language-rust\">use std::fs::File;\nuse std::io::prelude::*;\nfn main() -&gt; std::io::Result&lt;()&gt; {\n    let mut file = File::create(\"foo.txt\")?;\n    file.write_all(b\"hello world\")?;\n    Ok(())\n}\n</code></pre><p>在其他语言中，无论 Java、Python 还是 Golang，你都需要显式地关闭文件，避免资源的泄露。这是因为，即便 GC 能够帮助开发者最终释放不再引用的内存，它并不能释放除内存外的其它资源。</p><p>而 Rust，再一次地，因为其清晰的所有权界定，使编译器清楚地知道：当一个值离开作用域的时候，这个值不会有任何人引用，它占用的任何资源，包括内存资源，都可以立即释放，而不会导致问题（也有例外，感兴趣可以看这个<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/3128-io-safety.md\"> RFC</a>）。</p><p>说到这，你也许觉得不用显式地关闭文件、关闭 socket、释放锁，不过是省了一句 “close()” 而已，有什么大不了的？</p><p>然而，不要忘了，在庞大的业务代码中，还有很大一部分要用来处理错误。当错误处理搅和进来，我们面对的代码，逻辑更复杂，需要添加 close() 调用的上下文更多。虽然Python 的 with、Golang 的 defer，可以一定程度上解决资源释放的问题，但还不够完美。</p><p><strong>一旦，多个变量和多种异常或者错误叠加，我们忘记释放资源的风险敞口会成倍增加</strong>，很多死锁或者资源泄露就是这么产生的。</p><p>从 Drop trait 中我们再一次看到，从事物的本原出发解决问题，会极其优雅地解决掉很多其他关联问题。好比，所有权，几个简单规则，就让我们顺带处理掉了资源释放的大难题。</p><h2>小结</h2><p>我们进一步探讨了 Rust 的内存管理，在所有权和生命周期管理的基础上，介绍了一个值在内存中创建、使用和销毁的过程，学习了数据结构在创建时，是如何在内存中布局的，大小和对齐之间的关系；数据在使用过程中，是如何 Move 和自动增长的；以及数据是如何销毁的。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/9b/7d3760f88297fc5900c74193cae5e39b.jpg?wh=1920x900\" alt=\"\"></p><p>数据结构在内存中的布局，尤其是哪些部分放在栈上，哪些部分放在堆上，非常有助于我们理解代码的结构和效率。</p><p>你不必强行记忆这些内容，只要有个思路，在需要的时候，翻阅本文或者 <a href=\"https://cheats.rs\">cheats.rs</a> 即可。当我们掌握了数据结构如何创建、在使用过程中如何 Move 或者 Copy、最后如何销毁，我们在阅读别人的代码或者自己撰写代码时就会更加游刃有余。</p><h2>思考题</h2><p><code>Result&lt;String, ()&gt;</code> 占用多少内存？为什么？</p><p>感谢你的收听，如果你觉得有收获，也欢迎你分享给你身边的朋友，邀他一起讨论。你的Rust学习第11次打卡完成，我们下节课见。</p><h2>参考资料</h2><ol>\n<li>Rust 语言的备忘清单 <a href=\"https://cheats.rs\">cheats.rs</a></li>\n<li>代码受这个<a href=\"https://stackoverflow.com/questions/27324821/why-does-an-enum-require-extra-memory-size\">Stack Overflow 帖子</a>启发，有删改</li>\n<li>String 结构的<a href=\"https://doc.rust-lang.org/src/alloc/string.rs.html#279-281\">源码</a></li>\n<li>Vec&lt;T&gt; 结构<a href=\"https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#294-302\">源码</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\">RAII</a> 是一个拗口的名词，中文意思是“资源获取即初始化”。</li>\n</ol>","comments":[{"had_liked":false,"id":316088,"user_name":"dotfiles","can_delete":false,"product_type":"c1","uid":1217723,"ip_address":"","ucode":"F915599EC2F6E5","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/bb/1c8384a0.jpg","comment_is_top":true,"comment_ctime":1634128491,"is_pvip":false,"replies":[{"id":"115275","content":"非常棒！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1635131344,"ip_address":"","comment_id":316088,"utype":1}],"discussion_count":2,"race_medal":0,"score":"9.2233721157983007e+18","product_id":100085301,"comment_content":"1. 每个内存对象仅有一个所有者<br>所有堆上的内存一定在栈上有对应的变量.堆上的内存是不能独立存在的,否则无法管理也无法使用.那么除了静态加载的那部分内存,真正需要管理的内存可以分为两种: 数据都在栈上, 部分数据在堆上部分数据在栈上.比如i32都在栈上, string则部分在堆上部分在栈上.<br><br>对于数据都在栈上的内存对象,我们可以实现copy Trait,这样用起来很方便.类似其他语言的值拷贝.在传递的时候,内存对象会拷贝一份.标准提供的很多基本类型都实现了copy Trait,比如i32, usize, &amp;str<br>当然自定义的数据结构,比如结构体,你也可以不实现copy Trait,那么这里就牵扯到内存对象所有权move的问题.无论内存对象是仅在栈上还是混合的,在转移对象所有权时,栈上的内容是完整复制过去的,指向堆的指针也会复制过去.同时,旧的栈对象无法再使用.<br><br>实现Copy Trait的对象,不能实现Drop Trait; 在内存对象超出其作用域时,会自动调用其Drop Trait.当然rust为了保留完整的功能,也通过mem::ManuallyDrop提供了不受限的内存.<br>这里也能看出rust内存管理的一些设计理念,在够用的情况下,尽量把内存管理交给rust编译器去检查; 在需要更强的扩展时,通过留的小口子获得功能增强; 在审视安全问题时,需要check的代码就非常少.<br><br>2. 每个借用都不能超出其引用对象的作用域范围<br>这里还有另一个问题,有一些比较大的内存对象,我们不希望经常拷贝来拷贝去,那么就需要实现类似引用的功能. rust为了避免悬垂指针,就引入了生命周期的概念.<br>每个对象和每个借用都有其生命周期标注. 在大多数情况下,该标注都是编译器自动添加和检查的.<br>但是还是有部分场景是编译器无法在编译期确定的,这就需要开发者手动添加生命周期标注,来指明各借用及其对象间的关系.<br>编译器则会在函数调用方和实现方两侧进行检查,只要能通过检查,至少是内存安全的.<br><br>为什么需要生命周期标注? <br>我想可能还有种原因是为了编译的速度,rust是按各函数单元编译的.因此无法按照调用链做全局分析,所以有些从上下文很容易看出来的生命周期标注,rust依然需要开发者去标注.<br><br>在标注的时候,还是要牢记: 可读不可写,可写不可读.可变引用有且只能有一个;<br><br>关于生命周期这块发现个不错的帖子: https:&#47;&#47;github.com&#47;pretzelhammer&#47;rust-blog&#47;blob&#47;master&#47;posts&#47;common-rust-lifetime-misconceptions.md&#47;","like_count":18,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528260,"discussion_content":"非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635131344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020529,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/71/9fd7cd7a.jpg","nickname":"Daniel","note":"","ucode":"282E09B3146501","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564919,"discussion_content":"感谢分享哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650355347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312155,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1631668223,"is_pvip":false,"replies":[{"id":"113128","content":"对！首先 () 的确不占内存。然后在文中我也提到，Rust 编译器会做一些优化：<br><br>&gt; Rust 是这么处理的，我们知道，引用类型的第一个域是个指针，而指针是不可能等于 0 的，但是我们可以复用这个指针：当其为 0 时，表示 None，否则是 Some。<br><br>对于 Result&lt;String, ()&gt; 也是如此，String 第一个域是指针，而指针不能为空，所以当它为空的时候，正好可以表述 Err(())。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631671440,"ip_address":"","comment_id":312155,"utype":1}],"discussion_count":5,"race_medal":0,"score":"57466243071","product_id":100085301,"comment_content":"Result&lt;String, ()&gt; 占用多少内存？为什么？<br><br>还是 24，也就是说 () 压根不占内存，至于为什么，猜测应该是编译器优化，避免了内存浪费。","like_count":13,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526883,"discussion_content":"对！首先 () 的确不占内存。然后在文中我也提到，Rust 编译器会做一些优化：\n\n&amp;gt; Rust 是这么处理的，我们知道，引用类型的第一个域是个指针，而指针是不可能等于 0 的，但是我们可以复用这个指针：当其为 0 时，表示 None，否则是 Some。\n\n对于 Result&amp;lt;String, ()&amp;gt; 也是如此，String 第一个域是指针，而指针不能为空，所以当它为空的时候，正好可以表述 Err(())。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1631671440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2851308,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epEexjZIhNpYNiaAibdLD0Jsl797U6hianjrDs2QT4Q4HOicIEeILxjOcEF7gXGyQeJRJHaeenibb3N9QQ/132","nickname":"enbool","note":"","ucode":"BB460DCCA87099","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535087,"discussion_content":"当Err不是()时，Result是不是需要1个tag标识是OK还是Err？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638348615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111835,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","nickname":"Marvichov","note":"","ucode":"7482099415C41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394103,"discussion_content":"但是String不是引用类型啊?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631721577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1201350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","nickname":"lisiur","note":"","ucode":"CEB2DBCE29CAA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111835,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","nickname":"Marvichov","note":"","ucode":"7482099415C41C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395334,"discussion_content":"如果你对 String 的定义进行层层分解，你会发现 String 本质上就是由 ptr,cap,len 三个字段构成，第一域 ptr 就是 *const u8 裸指针","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1632283435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":394103,"ip_address":""},"score":395334,"extra":""},{"author":{"id":2755534,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/0b/ce/f0c520d1.jpg","nickname":"鹅帮逮","note":"","ucode":"A6DB1BEFDA5D9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111835,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","nickname":"Marvichov","note":"","ucode":"7482099415C41C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567004,"discussion_content":"String是引用类型吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650811840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":394103,"ip_address":""},"score":567004,"extra":""}]}]},{"had_liked":false,"id":312200,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1631680238,"is_pvip":false,"replies":[{"id":"113168","content":"1. 你引用的文字写的很清楚：which generally means that the data&#39;s memory address is a multiple of the *data size*。你想想一个 struct A {a: u8}，它的 data size 是多少？如果要把它 align 在 64bit 上，那所有的 network buffer （相当于 Vec&lt;u8&gt;）都完蛋了，需要膨胀 8 倍。<br><br>这里有段代码，你可以看看，思考一下每个打印地址都如何对齐，然后运行感受一下：<br><br>```rust<br>#[derive(Default)]<br>struct Align1 {<br>    a: u8,<br>    b: usize,<br>    c: u32<br>}<br><br>#[derive(Default)]<br>struct Align2 {<br>    a: u8,<br>}<br><br><br>fn main() {<br>    let s1 = &quot;a&quot;;<br>    let s2 = &quot;aaaa&quot;;<br>    let s3 = &quot;hello&quot;;<br>    let a = Align1::default();<br>    let b = Align2::default();<br>    <br>    println!(&quot;{:p}&quot;, s1);<br>    println!(&quot;{:p}&quot;, s2);<br>    println!(&quot;{:p}&quot;, s3);<br>    <br>    println!(&quot;Align1.a: {:p}&quot;, &amp;a.a);<br>    println!(&quot;Align1.b: {:p}&quot;, &amp;a.b);<br>    println!(&quot;Align1.c: {:p}&quot;, &amp;a.c);<br>    println!(&quot;Align2.a: {:p}&quot;, &amp;b.a);<br>    <br>}<br>```<br><br>playground: https:&#47;&#47;play.rust-lang.org&#47;?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9ab8c85b7065fb0374b046548517821f<br><br>2. c 对齐是 1，b 对齐是 2，所以 s2 是 2。注意 align 是对齐，不是长度，切记。就像 [u8; 1024] 长度是 1024，对齐依旧是 1。<br><br>3. Rust 目前不对外提供稳定的 ABI。所以如果要想以二进制形式分发，需要提供 C ABI 的接口。比如 struct 需要使用 #[repr(c)]，很多标准库的数据结构需要使用对应的 C 结构（如 String）。所有的泛型函数，trait 方法，struct 方法，都需要对应的 C 函数封装。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631761624,"ip_address":"","comment_id":312200,"utype":1}],"discussion_count":5,"race_medal":0,"score":"44581353198","product_id":100085301,"comment_content":"1. align和padding不应该和bus size有关吗? 如果32bit机器, struct的起始地址需要是4的倍数嘛? 还是说随便从哪里开始都可以? align为啥不是4的倍数呢?<br><br>wiki: The CPU in modern computer hardware performs reads and writes to memory most efficiently when the data is **naturally** aligned, which generally means that the data&#39;s memory address is a multiple of the data size. For instance, in a 32-bit architecture, the data may be aligned if the data is stored in four consecutive bytes and the first byte lies on a 4-byte boundary.<br><br>    fn main() {<br>        &#47;&#47; 4, 4<br>        println!(&quot;sizeof S1: {}, S2: {}&quot;, size_of::&lt;S1&gt;(), size_of::&lt;S2&gt;());<br>        &#47;&#47; 2, 2<br>        println!(&quot;alignof S1: {}, S2: {}&quot;, align_of::&lt;S1&gt;(), align_of::&lt;S2&gt;());<br>        &#47;&#47; 4, 8<br>        println!(<br>            &quot;alignof i32: {}, i64: {}&quot;,<br>            align_of::&lt;i32&gt;(),<br>            align_of::&lt;i64&gt;()<br>        );<br>    }<br><br>2. 为啥不是3的倍数呢?<br>    struct S2 {<br>        c: [u8; 3],<br>        b: u16,<br>    }<br>    &#47;&#47; align_of&lt;S2&gt; is 2<br><br>3. rust能自动帮人reorder memory layout, 会不会导致struct的abi不稳定?<br>","like_count":10,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526893,"discussion_content":"1. 你引用的文字写的很清楚：which generally means that the data&amp;#39;s memory address is a multiple of the *data size*。你想想一个 struct A {a: u8}，它的 data size 是多少？如果要把它 align 在 64bit 上，那所有的 network buffer （相当于 Vec&amp;lt;u8&amp;gt;）都完蛋了，需要膨胀 8 倍。\n\n这里有段代码，你可以看看，思考一下每个打印地址都如何对齐，然后运行感受一下：\n\n```rust\n#[derive(Default)]\nstruct Align1 {\n    a: u8,\n    b: usize,\n    c: u32\n}\n\n#[derive(Default)]\nstruct Align2 {\n    a: u8,\n}\n\n\nfn main() {\n    let s1 = &amp;quot;a&amp;quot;;\n    let s2 = &amp;quot;aaaa&amp;quot;;\n    let s3 = &amp;quot;hello&amp;quot;;\n    let a = Align1::default();\n    let b = Align2::default();\n    \n    println!(&amp;quot;{:p}&amp;quot;, s1);\n    println!(&amp;quot;{:p}&amp;quot;, s2);\n    println!(&amp;quot;{:p}&amp;quot;, s3);\n    \n    println!(&amp;quot;Align1.a: {:p}&amp;quot;, &amp;amp;a.a);\n    println!(&amp;quot;Align1.b: {:p}&amp;quot;, &amp;amp;a.b);\n    println!(&amp;quot;Align1.c: {:p}&amp;quot;, &amp;amp;a.c);\n    println!(&amp;quot;Align2.a: {:p}&amp;quot;, &amp;amp;b.a);\n    \n}\n```\n\nplayground: https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=9ab8c85b7065fb0374b046548517821f\n\n2. c 对齐是 1，b 对齐是 2，所以 s2 是 2。注意 align 是对齐，不是长度，切记。就像 [u8; 1024] 长度是 1024，对齐依旧是 1。\n\n3. Rust 目前不对外提供稳定的 ABI。所以如果要想以二进制形式分发，需要提供 C ABI 的接口。比如 struct 需要使用 #[repr(c)]，很多标准库的数据结构需要使用对应的 C 结构（如 String）。所有的泛型函数，trait 方法，struct 方法，都需要对应的 C 函数封装。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631761624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111835,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","nickname":"Marvichov","note":"","ucode":"7482099415C41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394870,"discussion_content":"感谢老师的example! run了一下, 有点明白了! 分享一个关于alignment的SO给需要的朋友们: https://stackoverflow.com/questions/381244/purpose-of-memory-alignment","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632108689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133945,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/79/803537db.jpg","nickname":"慢动作","note":"","ucode":"62C944F4A4D8AC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409036,"discussion_content":"Align1.a: 0x7ffe2c88092c\nAlign1.b: 0x7ffe2c880920\nAlign1.c: 0x7ffe2c880928\nAlign2.a: 0x7ffe2c880937\n老师例子，1是8字节对齐，栈上是从高位开始分配，那2的地址后8位37(00110111)往前的8字节对齐地址是分别是30(00110000)，28(00101000)，20(00100000)等，1占16字节(1+4+8，13 加上对齐)，刚好占据了20到30这个空间，是这样吗？28到38会和2冲突。栈对齐不知道是不是这么一回事，😄\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635355975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111835,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","nickname":"Marvichov","note":"","ucode":"7482099415C41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394101,"discussion_content":"good point! 加了也是一样的结果! 这个结构体而言, reorder结果一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631721121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394052,"discussion_content":"我猜你需要#[repr(C)]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631700634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312561,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1631865372,"is_pvip":false,"replies":[{"id":"113267","content":"Result&lt;T, E&gt; 需要提供一个 E 类型代表错误，而在 show_size! 宏中，我们只传入了 T 的类型，所以这里就随便把 E 写死成 std::io::Error 了。std::io::Error 是 16 个字节，所以 Result&lt;T, E&gt;，如果不能优化的话，要么是 T + 8 个字节（T &gt; 16），要么是 24 个字节（16 + 8）。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631927135,"ip_address":"","comment_id":312561,"utype":1}],"discussion_count":2,"race_medal":2,"score":"23106701852","product_id":100085301,"comment_content":"对于 Result&lt;T, io::Error&gt; 这一列的值不是特别理解，老师可能解释一下吗？","like_count":5,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527025,"discussion_content":"Result&amp;lt;T, E&amp;gt; 需要提供一个 E 类型代表错误，而在 show_size! 宏中，我们只传入了 T 的类型，所以这里就随便把 E 写死成 std::io::Error 了。std::io::Error 是 16 个字节，所以 Result&amp;lt;T, E&amp;gt;，如果不能优化的话，要么是 T + 8 个字节（T &amp;gt; 16），要么是 24 个字节（16 + 8）。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631927135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2372564,"avatar":"https://static001.geekbang.org/account/avatar/00/24/33/d4/02774d66.jpg","nickname":"沐佑","note":"","ucode":"2643B3CB341906","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548320,"discussion_content":"为什么Std::io::Error是16个字节？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643124302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312299,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1118976,"ip_address":"","ucode":"35F4FFAC4A4B15","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","comment_is_top":false,"comment_ctime":1631722289,"is_pvip":false,"replies":[{"id":"113161","content":"feature 用作条件编译，你可以根据需要选择使用库的某些 feature。它的好处是可以让编译出的二进制比较灵活，根据需要装入不同的功能。在 docs.rs 下的某个库的文档中，你可以看到它都有哪些 feature。<br><br>定义 feature，你可以看 cargo book：https:&#47;&#47;doc.rust-lang.org&#47;cargo&#47;reference&#47;features.html。下面是一个简单的例子：<br><br>在 cargo.toml 中，可以定义：<br><br>[features]<br>filter = [&quot;futures-util&quot;] &#47;&#47; 定义 filter feature，它有额外对 futures-util 的依赖。<br><br>[dependencies]<br>futures-util = { version = &quot;0.3&quot;, optional = true } &#47;&#47; 这个 dep 声明成 optional<br><br>在 lib.rs 中：<br>#[cfg(feature = &quot;filter&quot;)]<br>pub mod filter_all; &#47;&#47; 只有编译 feature filter 时，才引入 mod feature_all 编译","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631758397,"ip_address":"","comment_id":312299,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18811591473","product_id":100085301,"comment_content":"老师，想知道 rust 中的 feature 是干什么用的，怎么开发？现在能看到经常有标准库中的：<br><br>#[stable(feature = &quot;rust1&quot;, since = &quot;1.0.0&quot;)]<br><br>或者 Cargo.toml中的<br><br>tokio = { version = &quot;1&quot;, features = [&quot;full&quot;] } <br><br>这些都是什么意思？怎么自己定义","like_count":4,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526930,"discussion_content":"feature 用作条件编译，你可以根据需要选择使用库的某些 feature。它的好处是可以让编译出的二进制比较灵活，根据需要装入不同的功能。在 docs.rs 下的某个库的文档中，你可以看到它都有哪些 feature。\n\n定义 feature，你可以看 cargo book：https://doc.rust-lang.org/cargo/reference/features.html。下面是一个简单的例子：\n\n在 cargo.toml 中，可以定义：\n\n[features]\nfilter = [&amp;quot;futures-util&amp;quot;] // 定义 filter feature，它有额外对 futures-util 的依赖。\n\n[dependencies]\nfutures-util = { version = &amp;quot;0.3&amp;quot;, optional = true } // 这个 dep 声明成 optional\n\n在 lib.rs 中：\n#[cfg(feature = &amp;quot;filter&amp;quot;)]\npub mod filter_all; // 只有编译 feature filter 时，才引入 mod feature_all 编译","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631758397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118976,"avatar":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","nickname":"Michael","note":"","ucode":"35F4FFAC4A4B15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394275,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631806356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312174,"user_name":"Christian","can_delete":false,"product_type":"c1","uid":1089000,"ip_address":"","ucode":"D84F866015BA07","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/e8/39433235.jpg","comment_is_top":false,"comment_ctime":1631672403,"is_pvip":false,"replies":[{"id":"113171","content":"正确！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631761713,"ip_address":"","comment_id":312174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14516574291","product_id":100085301,"comment_content":"三个字长➕一个字节，这种情况下这个字节可能会被优化掉，原理同 Option。","like_count":3,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526888,"discussion_content":"正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631761713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312622,"user_name":"0@1","can_delete":false,"product_type":"c1","uid":1549191,"ip_address":"","ucode":"932A4139DB8169","user_header":"https://static001.geekbang.org/account/avatar/00/17/a3/87/eb923eb3.jpg","comment_is_top":false,"comment_ctime":1631894288,"is_pvip":false,"replies":[{"id":"113274","content":"A 不需要显示实现 Drop。文中已经说过编译器会依次为数据结构的每个字段调用其 Drop（如果有 Drop 实现的话）。你可以认为当一个需要 drop 的值 a 退出作用域时，都会进行类似 drop(a) 的操作。<br><br>你可以看这个代码：https:&#47;&#47;play.rust-lang.org&#47;?version=nightly&amp;mode=debug&amp;edition=2018。把 playground 切到 Show MIR 再运行看插入的 drop。 ","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631928511,"ip_address":"","comment_id":312622,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10221828880","product_id":100085301,"comment_content":"老师下面的代码，A没实现Drop, 编译器是不是会给他生成个默认的实现，如果不是，那编译器内部是不是有另外一种类似的机制比如xx callback，当某个结构体生命结束时，都会调用，只不过不向开发者开放?<br>struct A(B);<br>struct B;<br><br>impl Drop for B {<br>    fn drop(&amp;mut self) {<br>        println!(&quot;B droped&quot;);<br>    }<br>}","like_count":2,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527050,"discussion_content":"A 不需要显示实现 Drop。文中已经说过编译器会依次为数据结构的每个字段调用其 Drop（如果有 Drop 实现的话）。你可以认为当一个需要 drop 的值 a 退出作用域时，都会进行类似 drop(a) 的操作。\n\n你可以看这个代码：https://play.rust-lang.org/?version=nightly&amp;amp;mode=debug&amp;amp;edition=2018。把 playground 切到 Show MIR 再运行看插入的 drop。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631928511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1037669,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d5/65/1c9f1530.jpg","nickname":"NorthWind","note":"","ucode":"459ADF3B0945E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576247,"discussion_content":"在花括号关闭处 drop","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655371254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328939,"user_name":"nobel","can_delete":false,"product_type":"c1","uid":1130651,"ip_address":"","ucode":"29274748E1E5FA","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/9b/c5b0029a.jpg","comment_is_top":false,"comment_ctime":1640945340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5935912636","product_id":100085301,"comment_content":"好难","like_count":1},{"had_liked":false,"id":316593,"user_name":"overheat","can_delete":false,"product_type":"c1","uid":2675695,"ip_address":"","ucode":"DD82D9194C26D0","user_header":"https://static001.geekbang.org/account/avatar/00/28/d3/ef/b3b88181.jpg","comment_is_top":false,"comment_ctime":1634438289,"is_pvip":true,"replies":[{"id":"114666","content":"啊确实是，已经修改过来啦，感谢反馈～","user_name":"编辑回复","user_name_real":"叶如芊","uid":"2547771","ctime":1634522583,"ip_address":"","comment_id":316593,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5929405585","product_id":100085301,"comment_content":"正文中第一次提到cheats.rs的时候，写成了cheat.rs。","like_count":1,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528426,"discussion_content":"啊确实是，已经修改过来啦，感谢反馈～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634522583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312274,"user_name":"慢动作","can_delete":false,"product_type":"c1","uid":1133945,"ip_address":"","ucode":"62C944F4A4D8AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/79/803537db.jpg","comment_is_top":false,"comment_ctime":1631712960,"is_pvip":true,"replies":[{"id":"113163","content":"对","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631758513,"ip_address":"","comment_id":312274,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5926680256","product_id":100085301,"comment_content":"“一般而言，64 位 CPU 下，enum 的最大长度是：最大类型的长度 + 8，因为 64 位 CPU 的最大对齐是 64bit，也就是 8 个字节。”，如果最大类型是10，那是18对齐到24吗？","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526922,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631758513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042983,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","nickname":"Shanks-王冲","note":"","ucode":"C4B90A17850E20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584499,"discussion_content":"你好，我来尝试理解，需要你给个反馈：最大类型是10，对齐到24，那能理解你这个 enum 大小是 24字节，还是18字节呢？谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660883238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312264,"user_name":"Arthur","can_delete":false,"product_type":"c1","uid":1784009,"ip_address":"","ucode":"1C064405490769","user_header":"https://static001.geekbang.org/account/avatar/00/1b/38/c9/63ea8fe6.jpg","comment_is_top":false,"comment_ctime":1631708763,"is_pvip":true,"replies":[{"id":"113165","content":"非常棒！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631758583,"ip_address":"","comment_id":312264,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926676059","product_id":100085301,"comment_content":"`()`为unit type，属于Zero Sized Types, https:&#47;&#47;doc.rust-lang.org&#47;nightly&#47;nomicon&#47;exotic-sizes.html#zero-sized-types-zsts;<br>因此根据`Result&lt;T, E&gt;`的内存布局，优化前应该为最大长度+8，但是如果E为()，那么Rust可以将`Result&lt;String, ()&gt;`优化为：在非零时为String，为0时则为`()`；所以`Result&lt;String, ()&gt;`的大小应该同`Option&lt;String&gt;`的大小一样，为24字节","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526916,"discussion_content":"非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631758583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312176,"user_name":"GengTeng","can_delete":false,"product_type":"c1","uid":1224623,"ip_address":"","ucode":"3F926F5EF1D075","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/af/8b03ce2c.jpg","comment_is_top":false,"comment_ctime":1631672916,"is_pvip":false,"replies":[{"id":"113170","content":"是的！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631761704,"ip_address":"","comment_id":312176,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926640212","product_id":100085301,"comment_content":"```<br>struct S(String);<br>struct U;<br>println!(&quot;{}&quot;, size_of::&lt;Result&lt;(), ()&gt;&gt;());         &#47;&#47; 1<br>println!(&quot;{}&quot;, size_of::&lt;String&gt;());                  &#47;&#47; 24<br>println!(&quot;{}&quot;, size_of::&lt;Result&lt;String, ()&gt;&gt;());  &#47;&#47; 24<br>println!(&quot;{}&quot;, size_of::&lt;Result&lt;String, U&gt;&gt;());  &#47;&#47; 24<br>println!(&quot;{}&quot;, size_of::&lt;Result&lt;S, U&gt;&gt;());        &#47;&#47; 24<br>println!(&quot;{}&quot;, size_of::&lt;Result&lt;String, u8&gt;&gt;());  &#47;&#47; 32<br>println!(&quot;{}&quot;, size_of::&lt;Result&lt;S, u8&gt;&gt;());       &#47;&#47; 32<br>```<br><br>Rust编译器对这个做了优化。<br><br>但是如果类型E的大小不是0，或者两者大小都是0，就无法通过值内容来区分枚举，无法优化掉这一个字节了。","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526889,"discussion_content":"是的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631761704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355650,"user_name":"Geek_16633d","can_delete":false,"product_type":"c1","uid":1473599,"ip_address":"北京","ucode":"B3D6A698D05694","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erboZHuicZ2Cyj4RheyFialwYta32RLQrFbfGuEcvib5segWEq9hp07amCibEZX8a7eGlMNN3xpaqMicWA/132","comment_is_top":false,"comment_ctime":1661591995,"is_pvip":true,"replies":[{"id":"129424","content":"excalidraw，画图很好用","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1661611417,"ip_address":"北京","comment_id":355650,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1661591995","product_id":100085301,"comment_content":"很想知道陈老师用的是什么画图工具，很是方便做笔记学习呢！","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585504,"discussion_content":"excalidraw，画图很好用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661611417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354926,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"广东","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1660886804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660886804","product_id":100085301,"comment_content":"Result&lt;T, io::Error&gt;，T=u8，在2021版已经优化了，size是16，而非文章中表述的24；评论下方老师也提过，有优化的情况会是16，否则就得加上对齐长度8（一般而言 64位8字节对齐）。","like_count":0},{"had_liked":false,"id":348749,"user_name":"NorthWind","can_delete":false,"product_type":"c1","uid":1037669,"ip_address":"","ucode":"459ADF3B0945E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d5/65/1c9f1530.jpg","comment_is_top":false,"comment_ctime":1655367215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655367215","product_id":100085301,"comment_content":"核心思想感觉是：用栈上内存可知大小的结构来隔离堆内存可变结构，隔离变化。","like_count":0},{"had_liked":false,"id":333092,"user_name":"Geek_05de53","can_delete":false,"product_type":"c1","uid":1494311,"ip_address":"","ucode":"20872B89D6A782","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epdUKuOV21hnfTmXPibv5ReJCCIxiamtzXkibh9p41sSJeYQ87swreLWlTNEibh5ibefsoJfFppOvR088Q/132","comment_is_top":false,"comment_ctime":1644060699,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1644060699","product_id":100085301,"comment_content":"&gt; std::io::Error 是 16 个字节，所以 Result&lt;T, E&gt;，如果不能优化的话，要么是 T + 8 个字节（T &gt; 16），要么是 24 个字节（16 + 8）。<br><br>老师，Result列为什么 当T &gt; 16时就只需要+8字节了？而T &lt; 16时需要+16字节，这里没太理解。是因为当T &gt; 16时复用了T尾部的字节么？","like_count":0,"discussions":[{"author":{"id":2905523,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIDqHQQByGiaXcAk94MdDn3ftupZLXyR6bAKibxOzMxy5h3uBwZ7QiaCiaIfbCMK0cIQfGNax8iawoiaQAg/132","nickname":"nuan","note":"","ucode":"55FF98EB85404D","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549818,"discussion_content":"T&gt;16 时 是 T+8， T&lt;=16 时是 16+8","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644245039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321285,"user_name":"Ignis","can_delete":false,"product_type":"c1","uid":2837051,"ip_address":"","ucode":"94A55C81E2F86C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL7ibAFViaJqhTRquzLKhS0SebmHON4RKeaL9I9R9wKHWt6ehcu0QtN8icvmPicU8wvDYIZiaaxqGWSxlw/132","comment_is_top":false,"comment_ctime":1636738897,"is_pvip":false,"replies":[{"id":"118932","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639853797,"ip_address":"","comment_id":321285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636738897","product_id":100085301,"comment_content":"文中给出的C代码示例，不太符合C语言标准，可能有些同学的环境编译会有问题。主要问题：<br><br>1. 定长整数类型定义在&lt;stdint.h&gt;头文件中；<br>2. main函数的返回值是int；<br>3. sizeof返回的类型是size_t，应该用%zu来格式化；<br><br>建议改的更规范一些：<br><br>```c<br>#include &lt;stdio.h&gt;<br>#include &lt;stdint.h&gt;<br><br>struct S1 {<br>    uint8_t a;<br>    uint16_t b;<br>    uint8_t c;<br>};<br><br>struct S2 {<br>    uint8_t a;<br>    uint8_t c;<br>    uint16_t b;<br>};<br><br>int main(void) {<br>    printf(&quot;size of S1: %zu, S2: %zu\\n&quot;, sizeof(struct S1), sizeof(struct S2));<br>    return 0;<br>}<br>```","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539893,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639853797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321284,"user_name":"Ignis","can_delete":false,"product_type":"c1","uid":2837051,"ip_address":"","ucode":"94A55C81E2F86C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL7ibAFViaJqhTRquzLKhS0SebmHON4RKeaL9I9R9wKHWt6ehcu0QtN8icvmPicU8wvDYIZiaaxqGWSxlw/132","comment_is_top":false,"comment_ctime":1636738642,"is_pvip":false,"replies":[{"id":"118931","content":"对","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639853785,"ip_address":"","comment_id":321284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636738642","product_id":100085301,"comment_content":"Result&lt;String,()&gt;占用的内存和String一样大小，当ptr为空时，就是()，否则是一个字符串。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539892,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639853785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315757,"user_name":"枸杞红茶","can_delete":false,"product_type":"c1","uid":2738941,"ip_address":"","ucode":"03D80953AF984E","user_header":"https://static001.geekbang.org/account/avatar/00/29/ca/fd/4e6dd31c.jpg","comment_is_top":false,"comment_ctime":1633964771,"is_pvip":false,"replies":[{"id":"115290","content":"域：field<br>对齐：align<br>长度：length","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1635132911,"ip_address":"","comment_id":315757,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1633964771","product_id":100085301,"comment_content":"域 对齐长度 这些概念是什么意思呢，如果能放出英文或者资料链接，能更好理解的","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528161,"discussion_content":"域：field\n对齐：align\n长度：length","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635132911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2738941,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ca/fd/4e6dd31c.jpg","nickname":"枸杞红茶","note":"","ucode":"03D80953AF984E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403199,"discussion_content":"这里的域是struct里各成分变量，英文是field. \nwe define the names and types of the pieces of data, which we call fields. \nhttps://doc.rust-lang.org/book/ch05-01-defining-structs.html\n跟内存域的概念是不一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634030807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315292,"user_name":"蟋蟀大叔","can_delete":false,"product_type":"c1","uid":2186045,"ip_address":"","ucode":"0FB40046EC3596","user_header":"https://static001.geekbang.org/account/avatar/00/21/5b/3d/634776c9.jpg","comment_is_top":false,"comment_ctime":1633788574,"is_pvip":false,"replies":[{"id":"115301","content":"用 gcc 可以编过（有一些 warning）。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1635133666,"ip_address":"","comment_id":315292,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633788574","product_id":100085301,"comment_content":"C 代码没有编译通过， 改成下面编译过了<br>#include &lt;stdio.h&gt;<br>#include &lt;stdint.h&gt;<br><br>struct S1 { uint8_t a; uint16_t b; uint8_t c;};<br>struct S2 { uint8_t a; uint8_t c; uint16_t b;};<br><br>void main()  { <br>    printf(&quot;size of S1: %d, S2: %d&quot;, sizeof(struct S1), sizeof(struct S2)); <br>}","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527926,"discussion_content":"用 gcc 可以编过（有一些 warning）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635133666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312784,"user_name":"newzai","can_delete":false,"product_type":"c1","uid":1102367,"ip_address":"","ucode":"D5E34D427D65FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/1f/2ef2514b.jpg","comment_is_top":false,"comment_ctime":1632012540,"is_pvip":false,"replies":[{"id":"113407","content":"嗯。这段时间关系不对，应该把「随后」二字去掉。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1632240453,"ip_address":"","comment_id":312784,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1632012540","product_id":100085301,"comment_content":"C 采用了未定义的方式，由开发者手工控制；C++ 在 C 的基础上改进，引入智能指针，半手工半自动。随后 Java 和 DotNet 使用 GC 对堆内存全面接管，堆内存进入了受控（managed）时代。所谓受控代码（managed code），就是代码在一个“运行时”下工作，由运行时来保证堆内存的安全访问。<br><br><br>这段话描述错误，C++智能指针在11版本引入，在之前虽然有tr版本，那也是2008年前后的事情，而java，C#一开局就引入了GC，javaC#怎么就变成了在C++之后呢？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527111,"discussion_content":"嗯。这段时间关系不对，应该把「随后」二字去掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632240453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1154366,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9d/3e/a4112830.jpg","nickname":"峰","note":"","ucode":"96F6667A57AF3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399561,"discussion_content":"C++相比C应该是一开始有构造析构, 让栈上的对象可以有机会自动释放内存.\n后来引入智能指针, 让内存管理更&#34;自动&#34;一些.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632991969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312531,"user_name":"茶底","can_delete":false,"product_type":"c1","uid":1188926,"ip_address":"","ucode":"687DD3686A84D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg","comment_is_top":false,"comment_ctime":1631850381,"is_pvip":false,"replies":[{"id":"113269","content":"正确！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631927334,"ip_address":"","comment_id":312531,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1631850381","product_id":100085301,"comment_content":"string ptr 为0 表示 (),所以是24","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527004,"discussion_content":"正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631927334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2755534,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/0b/ce/f0c520d1.jpg","nickname":"鹅帮逮","note":"","ucode":"A6DB1BEFDA5D9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533643,"discussion_content":"String为什么是8个字节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637922943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312335,"user_name":"Kerry","can_delete":false,"product_type":"c1","uid":2061524,"ip_address":"","ucode":"92F809EC998FC6","user_header":"https://static001.geekbang.org/account/avatar/00/1f/74/d4/38d813f0.jpg","comment_is_top":false,"comment_ctime":1631758500,"is_pvip":false,"replies":[{"id":"113198","content":"对！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631802337,"ip_address":"","comment_id":312335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631758500","product_id":100085301,"comment_content":"println!(&quot;sizeof Result&lt;String, ()&gt;: {}&quot;, size_of::&lt;Result&lt;String, ()&gt;&gt;());<br><br>sizeof Result&lt;String, ()&gt;: 24<br><br>优化思路应该是跟Option&lt;T&gt;类似。Result&lt;String, ()&gt;的false case是()，就相当于是Option&lt;String&gt;，可以用String里的ptr的值来实现零成本抽象？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526942,"discussion_content":"对！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631802337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312273,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1401568,"ip_address":"","ucode":"FA942636EE0CC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/e0/d2ff52da.jpg","comment_is_top":false,"comment_ctime":1631712951,"is_pvip":false,"replies":[{"id":"113164","content":"你可以运行一下文中的代码，看看它多大（24 字节）。我在之前的回复中详细讲了为什么是 24。你可以看看。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631758569,"ip_address":"","comment_id":312273,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631712951","product_id":100085301,"comment_content":"Result&lt;String, ()&gt; 占用多少内存？为什么？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526921,"discussion_content":"你可以运行一下文中的代码，看看它多大（24 字节）。我在之前的回复中详细讲了为什么是 24。你可以看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631758569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312195,"user_name":"noisyes","can_delete":false,"product_type":"c1","uid":2538540,"ip_address":"","ucode":"94EC310B284AD2","user_header":"https://static001.geekbang.org/account/avatar/00/26/bc/2c/963688bb.jpg","comment_is_top":false,"comment_ctime":1631677589,"is_pvip":false,"replies":[{"id":"113169","content":"不会。move 出现的场合都发生在栈帧上。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631761675,"ip_address":"","comment_id":312195,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1631677589","product_id":100085301,"comment_content":"move是会把栈内存对象转移到堆内存上吗？还是只是所有权的交接呢？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526892,"discussion_content":"不会。move 出现的场合都发生在栈帧上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631761675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206690,"avatar":"https://static001.geekbang.org/account/avatar/00/12/69/a2/c30ac459.jpg","nickname":"hughieyu","note":"","ucode":"FC1A64B2BAB784","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394053,"discussion_content":"move也是栈上按位复制，只是限制了对原始值的访问。也可以理解为所有权的交接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631700939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312148,"user_name":"Arthur","can_delete":false,"product_type":"c1","uid":1784009,"ip_address":"","ucode":"1C064405490769","user_header":"https://static001.geekbang.org/account/avatar/00/1b/38/c9/63ea8fe6.jpg","comment_is_top":false,"comment_ctime":1631665938,"is_pvip":true,"replies":[{"id":"113121","content":"所以对于 Option&lt;u8&gt;，其长度是 1 + 1 = 2 字节，而 Option&lt;f64&gt;，长度是 8 + 8 =16 字节。应该是更新的问题，我跟编辑说一下。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631670343,"ip_address":"","comment_id":312148,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1631665938","product_id":100085301,"comment_content":"&quot;根据刚才说的三条对齐规则，tag 后的内存，会根据其对齐大小进行对齐，所以对于 Option，其长度是 1 + 1 = 2 字节，而 Option，长度是 8 + 8 =16 字节。&quot;<br><br>此处是不是有笔误，并没有看懂两个Option为什么大小不一样了？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526879,"discussion_content":"所以对于 Option&amp;lt;u8&amp;gt;，其长度是 1 + 1 = 2 字节，而 Option&amp;lt;f64&amp;gt;，长度是 8 + 8 =16 字节。应该是更新的问题，我跟编辑说一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631670343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024788,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/14/1f03f07d.jpg","nickname":"懒蝈蝈","note":"","ucode":"574F2CF1A705F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393956,"discussion_content":"对于u8的  Option，其长度是 1 + 1 = 2 字节，而 f64的Option，长度是 8 + 8 =16 字节。 对于引用型类型的Option 长度并没有增加字段，是因为做了优化，复用引用类型中的指针：当其为 0 时，表示 None，否则是 Some。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631670570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393952,"discussion_content":"嗯 好像是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631669804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}