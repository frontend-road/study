{"id":97622,"title":"39 | 案例分析（二）：高性能网络应用框架Netty","content":"<p>Netty是一个高性能网络应用框架，应用非常普遍，目前在Java领域里，Netty基本上成为网络程序的标配了。Netty框架功能丰富，也非常复杂，今天我们主要分析Netty框架中的线程模型，而<strong>线程模型直接影响着网络程序的性能</strong>。</p><p>在介绍Netty的线程模型之前，我们首先需要把问题搞清楚，了解网络编程性能的瓶颈在哪里，然后再看Netty的线程模型是如何解决这个问题的。</p><h2>网络编程性能的瓶颈</h2><p>在<a href=\"https://time.geekbang.org/column/article/95098\">《33 | Thread-Per-Message模式：最简单实用的分工方法》</a>中，我们写过一个简单的网络程序echo，采用的是阻塞式I/O（BIO）。BIO模型里，所有read()操作和write()操作都会阻塞当前线程的，如果客户端已经和服务端建立了一个连接，而迟迟不发送数据，那么服务端的read()操作会一直阻塞，所以<strong>使用BIO模型，一般都会为每个socket分配一个独立的线程</strong>，这样就不会因为线程阻塞在一个socket上而影响对其他socket的读写。BIO的线程模型如下图所示，每一个socket都对应一个独立的线程；为了避免频繁创建、消耗线程，可以采用线程池，但是socket和线程之间的对应关系并不会变化。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/e2/e712c37ea0483e9dde0d6efe76e687e2.png?wh=1138*393\" alt=\"\"></p><center><span class=\"reference\">BIO的线程模型</span></center><!-- [[[read_end]]] --><p>BIO这种线程模型适用于socket连接不是很多的场景；但是现在的互联网场景，往往需要服务器能够支撑十万甚至百万连接，而创建十万甚至上百万个线程显然并不现实，所以BIO线程模型无法解决百万连接的问题。如果仔细观察，你会发现互联网场景中，虽然连接多，但是每个连接上的请求并不频繁，所以线程大部分时间都在等待I/O就绪。也就是说线程大部分时间都阻塞在那里，这完全是浪费，如果我们能够解决这个问题，那就不需要这么多线程了。</p><p>顺着这个思路，我们可以将线程模型优化为下图这个样子，可以用一个线程来处理多个连接，这样线程的利用率就上来了，同时所需的线程数量也跟着降下来了。这个思路很好，可是使用BIO相关的API是无法实现的，这是为什么呢？因为BIO相关的socket读写操作都是阻塞式的，而一旦调用了阻塞式API，在I/O就绪前，调用线程会一直阻塞，也就无法处理其他的socket连接了。</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/1f/eafed0787b82b0b428e1ec0927029f1f.png?wh=1135*448\" alt=\"\"></p><center><span class=\"reference\">理想的线程模型图</span></center><p>好在Java里还提供了非阻塞式（NIO）API，<strong>利用非阻塞式API就能够实现一个线程处理多个连接了</strong>。那具体如何实现呢？现在普遍都是<strong>采用Reactor模式</strong>，包括Netty的实现。所以，要想理解Netty的实现，接下来我们就需要先了解一下Reactor模式。</p><h2>Reactor模式</h2><p>下面是Reactor模式的类结构图，其中Handle指的是I/O句柄，在Java网络编程里，它本质上就是一个网络连接。Event Handler很容易理解，就是一个事件处理器，其中handle_event()方法处理I/O事件，也就是每个Event Handler处理一个I/O Handle；get_handle()方法可以返回这个I/O的Handle。Synchronous Event Demultiplexer可以理解为操作系统提供的I/O多路复用API，例如POSIX标准里的select()以及Linux里面的epoll()。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/40/a7ba3c8d6c49e50d9288baf0c03fa240.png?wh=1142*571\" alt=\"\"></p><center><span class=\"reference\">Reactor模式类结构图</span></center><p>Reactor模式的核心自然是<strong>Reactor这个类</strong>，其中register_handler()和remove_handler()这两个方法可以注册和删除一个事件处理器；<strong>handle_events()方式是核心</strong>，也是Reactor模式的发动机，这个方法的核心逻辑如下：首先通过同步事件多路选择器提供的select()方法监听网络事件，当有网络事件就绪后，就遍历事件处理器来处理该网络事件。由于网络事件是源源不断的，所以在主程序中启动Reactor模式，需要以 <code>while(true){}</code> 的方式调用handle_events()方法。</p><pre><code>void Reactor::handle_events(){\n  //通过同步事件多路选择器提供的\n  //select()方法监听网络事件\n  select(handlers);\n  //处理网络事件\n  for(h in handlers){\n    h.handle_event();\n  }\n}\n// 在主程序中启动事件循环\nwhile (true) {\n  handle_events();\n</code></pre><h2>Netty中的线程模型</h2><p>Netty的实现虽然参考了Reactor模式，但是并没有完全照搬，<strong>Netty中最核心的概念是事件循环（EventLoop）</strong>，其实也就是Reactor模式中的Reactor，<strong>负责监听网络事件并调用事件处理器进行处理</strong>。在4.x版本的Netty中，网络连接和EventLoop是稳定的多对1关系，而EventLoop和Java线程是1对1关系，这里的稳定指的是关系一旦确定就不再发生变化。也就是说一个网络连接只会对应唯一的一个EventLoop，而一个EventLoop也只会对应到一个Java线程，所以<strong>一个网络连接只会对应到一个Java线程</strong>。</p><p>一个网络连接对应到一个Java线程上，有什么好处呢？最大的好处就是对于一个网络连接的事件处理是单线程的，这样就<strong>避免了各种并发问题</strong>。</p><p>Netty中的线程模型可以参考下图，这个图和前面我们提到的理想的线程模型图非常相似，核心目标都是用一个线程处理多个网络连接。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/04/034756f1d76bb3af09e125de9f3c2f04.png?wh=1137*563\" alt=\"\"></p><center><span class=\"reference\">Netty中的线程模型</span></center><p>Netty中还有一个核心概念是<strong>EventLoopGroup</strong>，顾名思义，一个EventLoopGroup由一组EventLoop组成。实际使用中，一般都会创建两个EventLoopGroup，一个称为bossGroup，一个称为workerGroup。为什么会有两个EventLoopGroup呢？</p><p>这个和socket处理网络请求的机制有关，socket处理TCP网络连接请求，是在一个独立的socket中，每当有一个TCP连接成功建立，都会创建一个新的socket，之后对TCP连接的读写都是由新创建处理的socket完成的。也就是说<strong>处理TCP连接请求和读写请求是通过两个不同的socket完成的</strong>。上面我们在讨论网络请求的时候，为了简化模型，只是讨论了读写请求，而没有讨论连接请求。</p><p><strong>在Netty中，bossGroup就用来处理连接请求的，而workerGroup是用来处理读写请求的</strong>。bossGroup处理完连接请求后，会将这个连接提交给workerGroup来处理， workerGroup里面有多个EventLoop，那新的连接会交给哪个EventLoop来处理呢？这就需要一个负载均衡算法，Netty中目前使用的是<strong>轮询算法</strong>。</p><p>下面我们用Netty重新实现以下echo程序的服务端，近距离感受一下Netty。</p><h2>用Netty实现Echo程序服务端</h2><p>下面的示例代码基于Netty实现了echo程序服务端：首先创建了一个事件处理器（等同于Reactor模式中的事件处理器），然后创建了bossGroup和workerGroup，再之后创建并初始化了ServerBootstrap，代码还是很简单的，不过有两个地方需要注意一下。</p><p>第一个，如果NettybossGroup只监听一个端口，那bossGroup只需要1个EventLoop就可以了，多了纯属浪费。</p><p>第二个，默认情况下，Netty会创建“2*CPU核数”个EventLoop，由于网络连接与EventLoop有稳定的关系，所以事件处理器在处理网络事件的时候是不能有阻塞操作的，否则很容易导致请求大面积超时。如果实在无法避免使用阻塞操作，那可以通过线程池来异步处理。</p><pre><code>//事件处理器\nfinal EchoServerHandler serverHandler \n  = new EchoServerHandler();\n//boss线程组  \nEventLoopGroup bossGroup \n  = new NioEventLoopGroup(1); \n//worker线程组  \nEventLoopGroup workerGroup \n  = new NioEventLoopGroup();\ntry {\n  ServerBootstrap b = new ServerBootstrap();\n  b.group(bossGroup, workerGroup)\n   .channel(NioServerSocketChannel.class)\n   .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {\n     @Override\n     public void initChannel(SocketChannel ch){\n       ch.pipeline().addLast(serverHandler);\n     }\n    });\n  //bind服务端端口  \n  ChannelFuture f = b.bind(9090).sync();\n  f.channel().closeFuture().sync();\n} finally {\n  //终止工作线程组\n  workerGroup.shutdownGracefully();\n  //终止boss线程组\n  bossGroup.shutdownGracefully();\n}\n\n//socket连接处理器\nclass EchoServerHandler extends \n    ChannelInboundHandlerAdapter {\n  //处理读事件  \n  @Override\n  public void channelRead(\n    ChannelHandlerContext ctx, Object msg){\n      ctx.write(msg);\n  }\n  //处理读完成事件\n  @Override\n  public void channelReadComplete(\n    ChannelHandlerContext ctx){\n      ctx.flush();\n  }\n  //处理异常事件\n  @Override\n  public void exceptionCaught(\n    ChannelHandlerContext ctx,  Throwable cause) {\n      cause.printStackTrace();\n      ctx.close();\n  }\n}\n</code></pre><h2>总结</h2><p>Netty是一个款优秀的网络编程框架，性能非常好，为了实现高性能的目标，Netty做了很多优化，例如优化了ByteBuffer、支持零拷贝等等，和并发编程相关的就是它的线程模型了。Netty的线程模型设计得很精巧，每个网络连接都关联到了一个线程上，这样做的好处是：对于一个网络连接，读写操作都是单线程执行的，从而避免了并发程序的各种问题。</p><p>你要想深入理解Netty的线程模型，还需要对网络相关知识有一定的理解，关于Java IO的演进过程，你可以参考<a href=\"http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf\">Scalable IO in Java</a>，至于TCP/IP网络编程的知识你可以参考韩国尹圣雨写的经典教程——《TCP/IP网络编程》。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":98777,"user_name":"王维","can_delete":false,"product_type":"c1","uid":1001099,"ip_address":"","ucode":"3C1FE3153BBDA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/8b/97601f22.jpg","comment_is_top":false,"comment_ctime":1559093998,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"242077262574","product_id":100023901,"comment_content":"分享一下我之前学Netty的学习笔记，主要是源码分析：https:&#47;&#47;wangwei.one&#47;tags&#47;Netty&#47;","like_count":55,"discussions":[{"author":{"id":2756739,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/10/83/0facd0eb.jpg","nickname":"利威尔兵长","note":"","ucode":"FDE0BD5BFB1B4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538226,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639374375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1214499,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/23/a0966b4d.jpg","nickname":"Tim Zhang","note":"","ucode":"4956AC5FE45EE1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274279,"discussion_content":"请教下，你的博客模板的地址能提供下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590561799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98455,"user_name":"那只羊","can_delete":false,"product_type":"c1","uid":1104184,"ip_address":"","ucode":"9F2C0E12E7A463","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/38/853be0c3.jpg","comment_is_top":false,"comment_ctime":1559005914,"is_pvip":false,"replies":[{"id":"35269","content":"👍感谢回复！","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559044339,"ip_address":"","comment_id":98455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"134702992090","product_id":100023901,"comment_content":"QQ怪：Netty可以先从《Netty实战》开始，虽然翻译得一般，但是对于它的整体及各个组件你都能了解到；再就是调试源码来了解它了；最后应用到项目中去啦，比如实现一个简单的RPC，一个IM之类的","like_count":32,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451694,"discussion_content":"👍感谢回复！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559044339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209708,"user_name":"侧耳倾听","can_delete":false,"product_type":"c1","uid":1512642,"ip_address":"","ucode":"5BF2A2440B54F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","comment_is_top":false,"comment_ctime":1587603553,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"104666818657","product_id":100023901,"comment_content":"你如果对java nio比较了解的话，应该就明白netty的线程模型。tomcat是在收到请求的时候，为每一个请求创建一个线程处理该次请求，消耗的是服务器的线程池，当并发连接数大的时候，性能下降很快。ngix相较于tomcat的区别就在于处理请求连接的线程只有一个，相当于一个分发器，只负责接受请求，不负责处理请求，连接建立成功后，为该连接分发一个工作线程处理请求和返回结果。这样子的话，服务器的最大并发数就没有了限制，受限的就是服务器的硬件所能支持的最大并发，这一块可以通过横向或者纵向扩展来解决。netty的线程模型也是如此，一个负责接受，一个负责处理，就是之前讲述的Work thread模式","like_count":25,"discussions":[{"author":{"id":1144091,"avatar":"https://static001.geekbang.org/account/avatar/00/11/75/1b/8e3f2ee8.jpg","nickname":"陆大锤","note":"","ucode":"80C2AFEFC218AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320276,"discussion_content":"我看的tomcat9做了优化了，新来任务也是放线程池，不新建线程，都依赖线程池处理。也是一个线程接受请求，一个负责分发。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1604306710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2683430,"avatar":"https://static001.geekbang.org/account/avatar/00/28/f2/26/a8ac6b42.jpg","nickname":"听风有信","note":"","ucode":"2CCB467114FF5C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392660,"discussion_content":"tomcat也是线程池","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631091203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810156,"avatar":"","nickname":"poordickey","note":"","ucode":"2A436EC813AF97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340979,"discussion_content":"springboot集成了tomcat  也就是说  支持的并发并不会太高  是吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610248768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98388,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1558974181,"is_pvip":false,"replies":[{"id":"35270","content":"热心同学回复了，我再加一点就是把网络编程的基础搞好","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559044628,"ip_address":"","comment_id":98388,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65983483621","product_id":100023901,"comment_content":"老师，学习netty除了学习老师的专栏还有什么从入门到专精的学习路线吗？","like_count":16,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451671,"discussion_content":"热心同学回复了，我再加一点就是把网络编程的基础搞好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559044628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132170,"user_name":"墙角儿的花","can_delete":false,"product_type":"c1","uid":1258474,"ip_address":"","ucode":"EE5CAD76175CCF","user_header":"","comment_is_top":false,"comment_ctime":1568035548,"is_pvip":false,"replies":[{"id":"50591","content":"😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568083340,"ip_address":"","comment_id":132170,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40222741212","product_id":100023901,"comment_content":"这是我读过的最好的netty基本原理介绍","like_count":10,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466798,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568083340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98475,"user_name":"周治慧","can_delete":false,"product_type":"c1","uid":1335293,"ip_address":"","ucode":"7D56C4E66BEE17","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKR3ibELhjgVicCNShZCBwvaDxibnzibggG4wUzVkS2mkDxUBZyIs87nDEdJ7PiahJBVoZcuhQ84RxAziag/132","comment_is_top":false,"comment_ctime":1559008193,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"27328811969","product_id":100023901,"comment_content":"没太明白netty的线程模型，老师说一个socket对应一个Java线程，一个Java线程对应一个eventGroup，那图中不应该是一个socket对应一个eventgroup吗","like_count":7,"discussions":[{"author":{"id":1226462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b6/de/95dc7537.jpg","nickname":"双","note":"","ucode":"9A6A370DAD648E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":951,"discussion_content":"以下内容并不精确，但是可以帮助你理解：你可以简单的理解eventGroup就是一个线程，1个连接只能对应到一个线程(eventGroup)上，但是反过来一个eventGroup可以同时处理多个连接的。netty的线程模型设计很优雅的，串行化的设计，就是为了避免上下文切换开销和线程安全等系列问题...","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1562203595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1010192,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6a/10/4d2d6e64.jpg","nickname":"劳动维权","note":"","ucode":"1D5CEB96618E01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1226462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b6/de/95dc7537.jpg","nickname":"双","note":"","ucode":"9A6A370DAD648E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102620,"discussion_content":"你理解错了，在netty中一个singleThreadEventExecutor，也就是各种EventLoop的基类，才是由一个线程支撑，可以很明显看到该类里有一个Thread类型的成员变量，而EventLoopGroup是EventLoop的数组","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577357129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":951,"ip_address":""},"score":102620,"extra":""},{"author":{"id":1325994,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3b/aa/e8dfcd7e.jpg","nickname":"AAA_叶子","note":"","ucode":"1E93617D308EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1226462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b6/de/95dc7537.jpg","nickname":"双","note":"","ucode":"9A6A370DAD648E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296407,"discussion_content":"是eventLoop  不是eventGroup","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596533763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":951,"ip_address":""},"score":296407,"extra":""}]},{"author":{"id":1810156,"avatar":"","nickname":"poordickey","note":"","ucode":"2A436EC813AF97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340980,"discussion_content":"你没理解老师的话   你顺着理解就对了 就是每个socket的请求一定在一个eventLoop里","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610249218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b6/de/95dc7537.jpg","nickname":"双","note":"","ucode":"9A6A370DAD648E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":950,"discussion_content":"1 个 NIO 线程可以同时处理 N 条链路，但是 1 个链路只对应 1 个 NIO 线程，防止发生并发操作问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562203135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169708,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1578408931,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18758278115","product_id":100023901,"comment_content":"网络编程和文件操作是我的疼，今天又疼了…希望疼着疼着就好了","like_count":5,"discussions":[{"author":{"id":2288362,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/ea/77a59153.jpg","nickname":"耶马","note":"","ucode":"3A3CF67B016CDB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547017,"discussion_content":"正常头疼 ,经常的头疼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642496373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98619,"user_name":"Sunqc","can_delete":false,"product_type":"c1","uid":1473717,"ip_address":"","ucode":"2C54659635403F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7c/b5/4a7a2bd4.jpg","comment_is_top":false,"comment_ctime":1559043291,"is_pvip":false,"replies":[{"id":"35298","content":"感谢信任😄写不动了😂😂😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559055556,"ip_address":"","comment_id":98619,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18738912475","product_id":100023901,"comment_content":"我想知道老师后续有发布新的课程吗，喜欢你的课程","like_count":5,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451756,"discussion_content":"感谢信任😄写不动了😂😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559055556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2502,"discussion_content":"老师可以写网络编程","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563727892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99011,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1559130109,"is_pvip":false,"replies":[{"id":"35577","content":"对你有帮助就好😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559138926,"ip_address":"","comment_id":99011,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14444031997","product_id":100023901,"comment_content":"谢谢老师讲这个reactor模式  我最近要优化的系统主体就是采用这个模式  今天看了一天都云里雾里的  看到这篇文章瞬间有了一种有章可循的感觉","like_count":4,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451937,"discussion_content":"对你有帮助就好😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559138926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245543,"user_name":"蓝山","can_delete":false,"product_type":"c1","uid":1066264,"ip_address":"","ucode":"FBF673D51FF644","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/18/3d05adb4.jpg","comment_is_top":false,"comment_ctime":1598972519,"is_pvip":false,"replies":[{"id":"90437","content":"👍🏻","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1599176405,"ip_address":"","comment_id":245543,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5893939815","product_id":100023901,"comment_content":"网络通信程序性能设计重点要关注三个方面：<br>1、网络传输方式：同步阻塞方式、异步非阻塞方式；<br>2、数据序列化：Java序列化（基本不能考虑）、protobuf、jason、Avro等等；<br>3、网络IO处理线程模型：同步阻塞IO、同步非阻塞IO、IO多路复用（Reactor模式）、AIO异步IO；<br>Netty在应对解决上述三个问题中提供了比较完善的方案。采用IO多路复用机制实现网络传输，同时配合灵活的reactor实现模式，支持通过编码灵活选择不同的reactor模式以应对不同负载和性能要求的场景。同时提供了完善的异步事件驱动实现和API，为开发人员提供了如何获取数据、数据编解码、编解码之后业务处理线程具体在哪个线程执行、编解码之后消息如何派发等等灵活且方便的机制。同时在协议层面直接支持了通用的网络通讯协议，同时对于扩展针对个性化性能需求的私有化协议定制提供了便利的开发工具支持。","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504913,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599176405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198018,"user_name":"0xTang","can_delete":false,"product_type":"c1","uid":1019659,"ip_address":"","ucode":"82F5282EF3044B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/0b/a438de52.jpg","comment_is_top":false,"comment_ctime":1585406958,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5880374254","product_id":100023901,"comment_content":"Tcp处理连接和io分2个socket这个知识点有用。","like_count":1,"discussions":[{"author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319421,"discussion_content":"可以看一下网络编程实战这个专栏，不过要求有点c语言基础","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604026489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100791,"user_name":"潭州太守","can_delete":false,"product_type":"c1","uid":1178824,"ip_address":"","ucode":"1DA953B8DCA3C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/c8/15c85ee4.jpg","comment_is_top":false,"comment_ctime":1559640080,"is_pvip":false,"replies":[{"id":"36789","content":"我没这么想过😂思路上好像也有相通的地方，不过感觉还不是","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560129131,"ip_address":"","comment_id":100791,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854607376","product_id":100023901,"comment_content":"老师，Reactor可以理解是Actor模式的一种吗","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452680,"discussion_content":"我没这么想过😂思路上好像也有相通的地方，不过感觉还不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560129131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98655,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1559051278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854018574","product_id":100023901,"comment_content":"打卡！了解皮毛是不够的。","like_count":1},{"had_liked":false,"id":272712,"user_name":"poordickey","can_delete":false,"product_type":"c1","uid":1810156,"ip_address":"","ucode":"2A436EC813AF97","user_header":"","comment_is_top":false,"comment_ctime":1610249516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610249516","product_id":100023901,"comment_content":"这是渊博的人  写的文章和一般人写的博客区别真的太大了  跟着学习思维不断发散 感觉可以串起来好多知识点  怪不得老师强调让我们有操作系统的基础呢 ","like_count":1},{"had_liked":false,"id":258082,"user_name":"coder","can_delete":false,"product_type":"c1","uid":1656956,"ip_address":"","ucode":"3A0940EBF94577","user_header":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","comment_is_top":false,"comment_ctime":1604289078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604289078","product_id":100023901,"comment_content":"写得太好了吧","like_count":0},{"had_liked":false,"id":257174,"user_name":"mgs2002","can_delete":false,"product_type":"c1","uid":1812970,"ip_address":"","ucode":"F5931108BD509B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","comment_is_top":false,"comment_ctime":1603872777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603872777","product_id":100023901,"comment_content":"受教了，去看netty实战去了","like_count":0},{"had_liked":false,"id":199828,"user_name":"😜哈哈","can_delete":false,"product_type":"c1","uid":1069001,"ip_address":"","ucode":"1FF58FB3A91135","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/c9/88837387.jpg","comment_is_top":false,"comment_ctime":1585496611,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585496611","product_id":100023901,"comment_content":"netty中使用reactor事件驱动并发编程模型","like_count":0},{"had_liked":false,"id":178871,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1581843117,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581843117","product_id":100023901,"comment_content":"<br>void Reactor::handle_events(){<br>  &#47;&#47;通过同步事件多路选择器提供的<br>  &#47;&#47;select()方法监听网络事件<br>  select(handlers);<br>  &#47;&#47;处理网络事件<br>  for(h in handlers){<br>    h.handle_event();<br>  }<br>}<br>&#47;&#47; 在主程序中启动事件循环<br>while (true) {<br>  handle_events();<br><br>老师，这段代码是否应该在for循环里加一个if判断是否是该handler事件发生，无需对每一个hander遍历？<br>for(h in handlers){<br>   if(h事件发生)<br>         h.handle_event();<br>  }<br>或者我理解是事件注册到select（）中时也会有个socket编号，事件发生，select会直接回调该编号线程，但这时候也不需要遍历事件处理器了？","like_count":0,"discussions":[{"author":{"id":1134567,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/e7/7e51052a.jpg","nickname":"fumeck.com🍋🌴summer sky","note":"","ucode":"6349BF32257990","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198264,"discussion_content":"老哥，你这问题解决了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583495877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177858,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1581515737,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1581515737","product_id":100023901,"comment_content":"同一个EventLoop连接很多客户端会不会造成线程切换严重？","like_count":0,"discussions":[{"author":{"id":1134567,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/e7/7e51052a.jpg","nickname":"fumeck.com🍋🌴summer sky","note":"","ucode":"6349BF32257990","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198267,"discussion_content":"每个连接对应一个管道.多个管道对应一条线程，线程往管道里取数据就好，没有切换线程","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583495971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810156,"avatar":"","nickname":"poordickey","note":"","ucode":"2A436EC813AF97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340987,"discussion_content":"这已经大大减少了一个socket对应一个线程  所带来的线程切换开销了   如果你不想切换改成一个eventLoop处理所有socket连接好了   默认创建的是core*2的线程数  线程切换还好吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610249918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167057,"user_name":"我有切糕","can_delete":false,"product_type":"c1","uid":1104447,"ip_address":"","ucode":"B02DB48B30ED47","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/3f/155d81ef.jpg","comment_is_top":false,"comment_ctime":1577678648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577678648","product_id":100023901,"comment_content":"bossGroup和workerGroup是不是就是生产者-消费者的模式？","like_count":0},{"had_liked":false,"id":157497,"user_name":"sswrock","can_delete":false,"product_type":"c1","uid":1683896,"ip_address":"","ucode":"9D8DA794D7378D","user_header":"https://static001.geekbang.org/account/avatar/00/19/b1/b8/9ff50118.jpg","comment_is_top":false,"comment_ctime":1575179502,"is_pvip":false,"replies":[{"id":"62407","content":"客气客气，我就是借花献佛😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1576911090,"ip_address":"","comment_id":157497,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575179502","product_id":100023901,"comment_content":"看了 Doug Lee的 “Scalable IO in Java”，对于做个Swing GUI开发的人豁然开朗，<br>感谢宝哥 和 DougLee","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476447,"discussion_content":"客气客气，我就是借花献佛😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576911090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135928,"user_name":"党","can_delete":false,"product_type":"c1","uid":1071974,"ip_address":"","ucode":"EE531DB3EA124D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/66/ad35bc68.jpg","comment_is_top":false,"comment_ctime":1569306505,"is_pvip":false,"replies":[{"id":"52706","content":"EventLoop 和 Java 线程是 1 对 1 关系","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1569667269,"ip_address":"","comment_id":135928,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569306505","product_id":100023901,"comment_content":"反过来说的话就是一个线程有多个EventLoop 一个EventLoop有多个网络连接 对吧","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468388,"discussion_content":"EventLoop 和 Java 线程是 1 对 1 关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569667269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132171,"user_name":"墙角儿的花","can_delete":false,"product_type":"c1","uid":1258474,"ip_address":"","ucode":"EE5CAD76175CCF","user_header":"","comment_is_top":false,"comment_ctime":1568035792,"is_pvip":false,"replies":[{"id":"50588","content":"协程最终也是依靠线程执行，所以理论上没有这种结论","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568083034,"ip_address":"","comment_id":132171,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568035792","product_id":100023901,"comment_content":"问下老师，im服务端除了用netty，是不是用go的协程也好，连接和协程1对1服务，感觉这个场景下go协程并发能力绝对在netty之上啊","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466799,"discussion_content":"协程最终也是依靠线程执行，所以理论上没有这种结论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568083034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126472,"user_name":"豪哥笑了","can_delete":false,"product_type":"c1","uid":1445782,"ip_address":"","ucode":"617D3DEFE7413C","user_header":"https://static001.geekbang.org/account/avatar/00/16/0f/96/be53e80f.jpg","comment_is_top":false,"comment_ctime":1566391644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566391644","product_id":100023901,"comment_content":"后台采用Mina，单机16核，用c++测并发数目只有20个，可能什么问题","like_count":0},{"had_liked":false,"id":117358,"user_name":"宝石山","can_delete":false,"product_type":"c1","uid":1295061,"ip_address":"","ucode":"3ADF20E12EBF99","user_header":"https://static001.geekbang.org/account/avatar/00/13/c2/d5/126eac1a.jpg","comment_is_top":false,"comment_ctime":1564030902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564030902","product_id":100023901,"comment_content":"在netty4中, 业务线程执行以下代码, name字段不是volatile, 根据happens-before原则, 在序列化层可能看不到name值. 我这理解有问题吗? 请老师指正<br><br>User user = new User(); &#47;&#47;business thread<br>user.setName(&quot;admin&quot;);<br>channel.write(user); <br>...<br>encoder.encode(user); &#47;&#47;io thread<br>...","like_count":0},{"had_liked":false,"id":116601,"user_name":"楊_宵夜","can_delete":false,"product_type":"c1","uid":1019302,"ip_address":"","ucode":"7BA0CADC5F23BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","comment_is_top":false,"comment_ctime":1563877644,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563877644","product_id":100023901,"comment_content":"老师好，bossGroup多于一条线程，纯属浪费这一点。能否扩展地说说呢？我稍微思考了一下，是否与TCP协议紧相关呢？例如滑动窗口机制那些？<br>之前有说过一个限流器的案例，里面接受连接也是阻塞式API，如果bossGroup只有一条线程，而同一时刻又有10个人进行连接的话，那第十个人不就要等个一段时间（即使人类感官上基本无感知）？","like_count":0,"discussions":[{"author":{"id":1019659,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/0b/a438de52.jpg","nickname":"0xTang","note":"","ucode":"82F5282EF3044B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216133,"discussion_content":"Bossgroup监听端口就1个，当然就1条线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585406999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106002,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1561123503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561123503","product_id":100023901,"comment_content":"老师提到事件处理器是不能有阻塞操作的，实在需要就通过线程池异步处理，感觉这里的线程池避免不了，因为很难保证业务没有阻塞操作","like_count":0},{"had_liked":false,"id":99488,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1559227241,"is_pvip":false,"replies":[{"id":"54022","content":"java nio有API","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1570766846,"ip_address":"","comment_id":99488,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1559227241","product_id":100023901,"comment_content":"问下老师零拷贝是怎么实现的呢？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452134,"discussion_content":"java nio有API","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570766846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542037,"avatar":"https://static001.geekbang.org/account/avatar/00/17/87/95/cba0a896.jpg","nickname":"卢","note":"","ucode":"B6A9F41AEE348C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405746,"discussion_content":"是不是 MappedByteBuffer","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634636059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98686,"user_name":"ban","can_delete":false,"product_type":"c1","uid":1034204,"ip_address":"","ucode":"E523CE97E48266","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/dc/9408c8c2.jpg","comment_is_top":false,"comment_ctime":1559057595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559057595","product_id":100023901,"comment_content":"文章说的echo那篇文章应该是<br>34 | Worker Thread模式：如何避免重复创建线程？<br>才对。","like_count":0},{"had_liked":false,"id":98470,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1559007640,"is_pvip":false,"replies":[{"id":"35267","content":"没太明白你的痛点，你可以在客户端做负载均衡","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559044294,"ip_address":"","comment_id":98470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559007640","product_id":100023901,"comment_content":"之前做的充电桩也是用的netty，但是只能单机部署，因为netty用的是长连接，但是在分布式框架中网络连接是随机的，请问老师这种情况怎么解决","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451701,"discussion_content":"没太明白你的痛点，你可以在客户端做负载均衡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559044294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98449,"user_name":"苏志辉","can_delete":false,"product_type":"c1","uid":1068927,"ip_address":"","ucode":"39B25CE21C04EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/7f/5dc11380.jpg","comment_is_top":false,"comment_ctime":1559005684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559005684","product_id":100023901,"comment_content":"netty中eventloop是延迟创建的","like_count":1},{"had_liked":false,"id":98417,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1559002272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559002272","product_id":100023901,"comment_content":"netty可以开设另一门课啦","like_count":1}]}