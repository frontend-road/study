{"id":400314,"title":"02 | 键值对中字符串的实现，用char*还是结构体？","content":"<p>你好，我是蒋德钧。</p><p>字符串在我们平时的应用开发中十分常见，比如我们要记录用户信息、商品信息、状态信息等等，这些都会用到字符串。</p><p>而对于Redis来说，键值对中的键是字符串，值有时也是字符串。我们在Redis中写入一条用户信息，记录了用户姓名、性别、所在城市等，这些都是字符串，如下所示：</p><pre><code>SET user:id:100 {“name”: “zhangsan”, “gender”: “M”,“city”:&quot;beijing&quot;}\n</code></pre><p>此外，Redis实例和客户端交互的命令和数据，也都是用字符串表示的。</p><p>那么，既然字符串的使用如此广泛和关键，就使得我们在实现字符串时，需要尽量满足以下三个要求：</p><ul>\n<li>能支持丰富且高效的字符串操作，比如字符串追加、拷贝、比较、获取长度等；</li>\n<li>能保存任意的二进制数据，比如图片等；</li>\n<li>能尽可能地节省内存开销。</li>\n</ul><p>其实，如果你开发过C语言程序，你应该就知道，在C语言中可以使用<strong>char*字符数组</strong>来实现字符串。同时，C语言标准库string.h中也定义了多种字符串的操作函数，比如字符串比较函数strcmp、字符串长度计算函数strlen、字符串追加函数strcat等，这样就便于开发者直接调用这些函数来完成字符串操作。</p><p>所以这样看起来，<strong>Redis好像完全可以复用C语言中对字符串的实现呀？</strong></p><p>但实际上，我们在使用C语言字符串时，经常需要手动检查和分配字符串空间，而这就会增加代码开发的工作量。而且，图片等数据还无法用字符串保存，也就限制了应用范围。</p><!-- [[[read_end]]] --><p>那么，从系统设计的角度来看，我们该如何设计实现字符串呢？</p><p>其实，Redis设计了<strong>简单动态字符串</strong>（Simple Dynamic String，SDS）的结构，用来表示字符串。相比于C语言中的字符串实现，SDS这种字符串的实现方式，会<strong>提升字符串的操作效率，并且可以用来保存二进制数据</strong>。</p><p>所以今天这节课，我就来给你介绍下SDS结构的设计思想和实现技巧，这样你就既可以掌握char*实现方法的不足和SDS的优势，还能学习到紧凑型内存结构的实现技巧。如果你要在自己的系统软件中实现字符串类型，就可以参考Redis的设计思想，来更好地提升操作效率，节省内存开销。</p><p>好，接下来，我们先来了解下为什么Redis没有复用C语言的字符串实现方法。</p><h2>为什么Redis不用char*？</h2><p>实际上，要想解答这个问题，我们需要先知道char*字符串数组的结构特点，还有Redis对字符串的需求是什么，所以下面我们就来具体分析一下。</p><h3>char*的结构设计</h3><p>首先，我们来看看char*字符数组的结构。</p><p><code>char*</code>字符数组的结构很简单，就是<strong>一块连续的内存空间，依次存放了字符串中的每一个字符</strong>。比如，下图显示的就是字符串“redis”的<code>char*</code>数组结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/03/0f8b2de0dc4b30392e155f0bdca0d003.jpg?wh=2000x608\" alt=\"\"></p><p>从图中可以看到，字符数组的最后一个字符是“\\0”，这个字符的作用是什么呢？其实，C语言在对字符串进行操作时，char*指针只是指向字符数组的起始位置，而<strong>字符数组的结尾位置就用“\\0”表示，意思是指字符串的结束</strong>。</p><p>这样一来，C语言标准库中字符串的操作函数，就会通过检查字符数组中是否有“\\0”，来判断字符串是否结束。比如，strlen函数就是一种字符串操作函数，它可以返回一个字符串的长度。这个函数会遍历字符数组中的每一个字符，并进行计数，直到检查的字符为“\\0”。此时，strlen函数会停止计数，返回已经统计到的字符个数。下图显示了strlen函数的执行流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/41/7de1b18d30280645c17yydf14afde541.jpg?wh=2000x1125\" alt=\"\"></p><p>我们再通过一段代码，来看下<strong>“\\0”结束字符对字符串长度的影响</strong>。这里我创建了两个字符串变量a和b，分别给它们赋值为“red\\0is”和“redis\\0”。然后，我用strlen函数计算这两个字符串长度，如下所示：</p><pre><code>\t#include &lt;stdio.h&gt;\n\t#include &lt;string.h&gt;\n\tint main()\n\t{\n\t   char *a = &quot;red\\0is&quot;;\n\t   char *b = &quot;redis\\0&quot;;\n\t   printf(&quot;%lu\\n&quot;, strlen(a));\n\t   printf(&quot;%lu\\n&quot;, strlen(b));\n\t   return 0;\n\t}\n</code></pre><p>当程序执行完这段代码后，输出的结果分别是3和5，表示a和b的长度分别是3个字符和5个字符。这是因为a中在“red”这3个字符后，就有了结束字符“\\0”，而b中的结束字符是在“redis”5个字符后。</p><p>也就是说，char*字符串以“\\0”表示字符串的结束，其实会给我们保存数据带来一定的负面影响。如果我们要保存的数据中，本身就有“\\0”，那么数据在“\\0”处就会被截断，而这就<strong>不符合Redis希望能保存任意二进制数据的需求</strong>了。</p><h3>操作函数复杂度</h3><p>而除了char*字符数组结构的设计问题以外，使用“\\0”作为字符串的结束字符，虽然可以让字符串操作函数判断字符串的结束位置，但它也会带来另一方面的负面影响，也就是会导致操作函数的复杂度增加。</p><p>我还是以strlen函数为例，该函数需要遍历字符数组中的每一个字符，才能得到字符串长度，所以这个操作函数的复杂度是O(N)。</p><p>我们再来看另一个常用的操作函数：<strong>字符串追加函数strcat</strong>。strcat函数是将一个源字符串src追加到一个目标字符串的末尾。该函数的代码如下所示：</p><pre><code>\tchar *strcat(char *dest, const char *src) {\n\t   //将目标字符串复制给tmp变量\n\t   char *tmp = dest;\n\t   //用一个while循环遍历目标字符串，直到遇到“\\0”跳出循环，指向目标字符串的末尾\n\t   while(*dest)\n\t      dest++;\n\t   //将源字符串中的每个字符逐一赋值到目标字符串中，直到遇到结束字符\n\t   while((*dest++ = *src++) != '\\0' )\n\t   return tmp;\n\t}\n</code></pre><p>从代码中可以看到，strcat函数和strlen函数类似，复杂度都很高，也都需要先通过遍历字符串才能得到目标字符串的末尾。然后对于strcat函数来说，还要再遍历源字符串才能完成追加。另外，它在把源字符串追加到目标字符串末尾时，还需要确认目标字符串具有足够的可用空间，否则就无法追加。</p><p>所以，这就要求开发人员在调用strcat时，要保证目标字符串有足够的空间，不然就需要开发人员动态分配空间，从而增加了编程的复杂度。而操作函数的复杂度一旦增加，就会影响字符串的操作效率，这就<strong>不符合Redis对字符串高效操作的需求</strong>了。</p><p>好了，综合以上在C语言中使用char*实现字符串的两大不足之处以后，我们现在就需要找到新的实现字符串的方式了。所以接下来，我们就来学习下，Redis是如何对字符串的实现进行设计考虑的。</p><h2>SDS的设计思想</h2><p>因为Redis是使用C语言开发的，所以为了保证能尽量复用C标准库中的字符串操作函数，Redis保留了使用字符数组来保存实际的数据。但是，和C语言仅用字符数组不同，Redis还专门设计了SDS（即简单动态字符串）的数据结构。下面我们一起来看看。</p><h3>SDS结构设计</h3><p>首先，SDS结构里包含了一个字符数组buf[]，用来保存实际数据。同时，SDS结构里还包含了三个元数据，分别是<strong>字符数组现有长度len</strong>、<strong>分配给字符数组的空间长度alloc</strong>，以及<strong>SDS类型flags</strong>。其中，Redis给len和alloc这两个元数据定义了多种数据类型，进而可以用来表示不同类型的SDS，稍后我会给你具体介绍。下图显示了SDS的结构，你可以先看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/a3/772d340bfbfe52de3a66fbb011ac22a3.jpg?wh=1891x647\" alt=\"\"></p><p>另外，如果你在Redis源码中查找过SDS的定义，那你可能会看到，Redis使用typedef给char*类型定义了一个别名，这个别名就是sds，如下所示：</p><pre><code>typedef char *sds;\n</code></pre><p>其实，这是因为SDS本质还是字符数组，只是在字符数组基础上增加了额外的元数据。在Redis中需要用到字符数组时，就直接使用sds这个别名。</p><p>同时，在创建新的字符串时，Redis会调用SDS创建函数sdsnewlen。sdsnewlen函数会新建sds类型变量（也就是char*类型变量），并新建SDS结构体，把SDS结构体中的数组buf[] 赋给sds类型变量。最后，sdsnewlen函数会把要创建的字符串拷贝给sds变量。下面的代码就显示了sdsnewlen函数的这个操作逻辑，你可以看下。</p><pre><code>sds sdsnewlen(const void *init, size_t initlen) {\n    void *sh;  //指向SDS结构体的指针\n    sds s;     //sds类型变量，即char*字符数组\n\n    ...\n    sh = s_malloc(hdrlen+initlen+1);   //新建SDS结构，并分配内存空间\n    ...\n    s = (char*)sh+hdrlen;              //sds类型变量指向SDS结构体中的buf数组，sh指向SDS结构体起始位置，hdrlen是SDS结构体中元数据的长度\n    ...\n    if (initlen &amp;&amp; init)\n        memcpy(s, init, initlen);    //将要传入的字符串拷贝给sds变量s\n    s[initlen] = '\\0';               //变量s末尾增加\\0，表示字符串结束\n    return s;\n</code></pre><p>好了，了解了SDS结构的定义后，我们再来看看，相比传统C语言字符串，SDS操作效率的改进之处。</p><h3>SDS操作效率</h3><p>因为SDS结构中记录了字符数组已占用的空间和被分配的空间，这就比传统C语言实现的字符串能带来更高的操作效率。</p><p>我还是以字符串追加操作为例。Redis中实现字符串追加的函数是sds.c文件中的<strong>sdscatlen函数</strong>。这个函数的参数一共有三个，分别是目标字符串s、源字符串t和要追加的长度len，源码如下所示：</p><pre><code>sds sdscatlen(sds s, const void *t, size_t len) {\n    //获取目标字符串s的当前长度\n    size_t curlen = sdslen(s);\n    //根据要追加的长度len和目标字符串s的现有长度，判断是否要增加新的空间\n    s = sdsMakeRoomFor(s,len);\n    if (s == NULL) return NULL;\n    //将源字符串t中len长度的数据拷贝到目标字符串结尾\n    memcpy(s+curlen, t, len);\n    //设置目标字符串的最新长度：拷贝前长度curlen加上拷贝长度\n    sdssetlen(s, curlen+len);\n    //拷贝后，在目标字符串结尾加上\\0\n    s[curlen+len] = '\\0';\n    return s;\n}\n</code></pre><p>通过分析这个函数的源码，我们可以看到sdscatlen的实现较为简单，其执行过程分为三步：</p><ul>\n<li>首先，获取目标字符串的当前长度，并调用sdsMakeRoomFor函数，根据当前长度和要追加的长度，判断是否要给目标字符串新增空间。这一步主要是保证，目标字符串有足够的空间接收追加的字符串。</li>\n<li>其次，在保证了目标字符串的空间足够后，将源字符串中指定长度len的数据追加到目标字符串。</li>\n<li>最后，设置目标字符串的最新长度。</li>\n</ul><p>我画了一张图，显示了sdscatlen的执行过程，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/3d/845fd7e227f419b1e6c084cdf051ec3d.jpg?wh=2000x1125\" alt=\"\"></p><p>所以，到这里你就能发现，和C语言中的字符串操作相比，SDS通过记录字符数组的使用长度和分配空间大小，避免了对字符串的遍历操作，降低了操作开销，进一步就可以帮助诸多字符串操作更加高效地完成，比如创建、追加、复制、比较等，这一设计思想非常值得我们学习。</p><p>此外，SDS把目标字符串的<strong>空间检查和扩容封装在了sdsMakeRoomFor函数中</strong>，并且在涉及字符串空间变化的操作中，如追加、复制等，会直接调用该函数。</p><p>这一设计实现，就避免了开发人员因忘记给目标字符串扩容，而导致操作失败的情况。比如，我们使用函数strcpy (char *dest, const char *src)时，如果src的长度大于dest的长度，代码中我们也没有做检查的话，就会造成内存溢出。所以这种封装操作的设计思想，同样值得我们学习。</p><p>那么，除了使用元数据记录字符串数组长度和封装操作的设计思想，SDS还有什么优秀的设计与实现值得我们学习呢？这就和我刚才给你介绍的Redis对内存节省的需求相关了。</p><p>所以接下来，我们就来看看SDS在编程技巧上是如何实现节省内存的。</p><h2>紧凑型字符串结构的编程技巧</h2><p>前面我提到，SDS结构中有一个元数据flags，表示的是SDS类型。事实上，SDS一共设计了5种类型，分别是sdshdr5、sdshdr8、sdshdr16、sdshdr32和sdshdr64。这5种类型的<strong>主要区别就在于</strong>，它们数据结构中的字符数组现有长度len和分配空间长度alloc，这两个元数据的数据类型不同。</p><p>因为sdshdr5这一类型Redis已经不再使用了，所以我们这里主要来了解下剩余的4种类型。以sdshdr8为例，它的定义如下所示：</p><pre><code>struct __attribute__ ((__packed__)) sdshdr8 {\n    uint8_t len; /* 字符数组现有长度*/\n    uint8_t alloc; /* 字符数组的已分配空间，不包括结构体和\\0结束字符*/\n    unsigned char flags; /* SDS类型*/\n    char buf[]; /*字符数组*/\n};\n</code></pre><p>我们可以看到，现有长度len和已分配空间alloc的数据类型都是uint8_t。<strong>uint8_t是8位无符号整型</strong>，会占用1字节的内存空间。当字符串类型是sdshdr8时，它能表示的字符数组长度（包括数组最后一位\\0）不会超过256字节（2的8次方等于256）。</p><p>而对于sdshdr16、sdshdr32、sdshdr64三种类型来说，它们的len和alloc数据类型分别是uint16_t、uint32_t、uint64_t，即它们能表示的字符数组长度，分别不超过2的16次方、32次方和64次方。这两个元数据各自占用的内存空间在sdshdr16、sdshdr32、sdshdr64类型中，则分别是2字节、4字节和8字节。</p><p>实际上，<strong>SDS之所以设计不同的结构头（即不同类型），是为了能灵活保存不同大小的字符串，从而有效节省内存空间。</strong>因为在保存不同大小的字符串时，结构头占用的内存空间也不一样，这样一来，在保存小字符串时，结构头占用空间也比较少。</p><p>否则，假设SDS都设计一样大小的结构头，比如都使用uint64_t类型表示len和alloc，那么假设要保存的字符串是10个字节，而此时结构头中len和alloc本身就占用了16个字节了，比保存的数据都多了。所以这样的设计对内存并不友好，也不满足Redis节省内存的需求。</p><p>好了，除了设计不同类型的结构头，Redis在编程上还<strong>使用了专门的编译优化来节省内存空间</strong>。在刚才介绍的sdshdr8结构定义中，我们可以看到，在struct和sdshdr8之间使用了<code>__attribute__ ((__packed__))</code>，如下所示：</p><pre><code>struct __attribute__ ((__packed__)) sdshdr8\n</code></pre><p>其实这里，<code>__attribute__ ((__packed__))</code>的作用就是告诉编译器，在编译sdshdr8结构时，不要使用字节对齐的方式，而是<strong>采用紧凑的方式分配内存</strong>。这是因为在默认情况下，编译器会按照8字节对齐的方式，给变量分配内存。也就是说，即使一个变量的大小不到8个字节，编译器也会给它分配8个字节。</p><p>为了方便你理解，我给你举个例子。假设我定义了一个结构体s1，它有两个成员变量，类型分别是char和int，如下所示：</p><pre><code>\t#include &lt;stdio.h&gt;\n\tint main() {\n\t   struct s1 {\n\t      char a;\n\t      int b;\n\t   } ts1;\n\t   printf(&quot;%lu\\n&quot;, sizeof(ts1));\n\t   return 0;\n\t}\n</code></pre><p>虽然char类型占用1个字节，int类型占用4个字节，但是如果你运行这段代码，就会发现打印出来的结果是8。这就是因为在默认情况下，编译器会给s1结构体分配8个字节的空间，而这样其中就有3个字节被浪费掉了。</p><p>为了节省内存，Redis在这方面的设计上可以说是精打细算的。所以，Redis采用了<code>__attribute__ ((__packed__))</code>属性定义结构体，这样一来，结构体实际占用多少内存空间，编译器就分配多少空间。</p><p>比如，我用<code>__attribute__ ((__packed__))</code>属性定义结构体s2，同样包含char和int两个类型的成员变量，代码如下所示：</p><pre><code>\t#include &lt;stdio.h&gt;\n\tint main() {\n\t   struct __attribute__((packed)) s2{\n\t      char a;\n\t      int b;\n\t   } ts2;\n\t   printf(&quot;%lu\\n&quot;, sizeof(ts2));\n\t   return 0;\n\t}\n</code></pre><p>当你运行这段代码时，你可以看到，打印的结果是5，表示编译器用了紧凑型内存分配，s2结构体只占用5个字节的空间。</p><p>好了，总而言之，如果你在开发程序时，希望能节省数据结构的内存开销，就可以把<code>__attribute__ ((__packed__))</code>这个编程方法用起来。</p><h2>小结</h2><p>这节课我主要给你介绍了Redis中字符串的设计与实现。你要知道，字符串的实现需要考虑操作高效、能保存任意二进制数据，以及节省内存的需求。而Redis中设计实现字符串的方式，就非常值得你学习和借鉴。</p><p>因此这节课，你需要重点关注三个要点，分别是：</p><ul>\n<li>C语言中使用char*实现字符串的不足，主要是因为使用“\\0”表示字符串结束，操作时需遍历字符串，效率不高，并且无法完整表示包含“\\0”的数据，因而这就无法满足Redis的需求。</li>\n<li>Redis中字符串的设计思想与实现方法。Redis专门设计了SDS数据结构，在字符数组的基础上，增加了字符数组长度和分配空间大小等元数据。这样一来，需要基于字符串长度进行的追加、复制、比较等操作，就可以直接读取元数据，效率也就提升了。而且，SDS不通过字符串中的“\\0”字符判断字符串结束，而是直接将其作为二进制数据处理，可以用来保存图片等二进制数据。</li>\n<li>SDS中是通过设计不同SDS类型来表示不同大小的字符串，并使用<code>__attribute__ ((__packed__))</code>这个编程小技巧，来实现紧凑型内存布局，达到节省内存的目的。</li>\n</ul><p>字符串看起来简单，但通过今天这节课的学习，你可以看到实现字符串有很多需要精巧设计的地方。C语言字符串的实现方法和SDS的联系与区别，也是Redis面试时经常会被问到的问题，所以我也希望你能通过今天这节课，掌握好它俩的区别。</p><h2>每课一问</h2><p>SDS字符串在Redis内部模块实现中也被广泛使用，你能在Redis server和客户端的实现中，找到使用SDS字符串的地方么？</p><p>欢迎在留言区分享你的思考和操作过程，我们一起交流讨论。如果觉得有收获，也欢迎你把今天的内容分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":304593,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1627494871,"is_pvip":true,"discussion_count":14,"race_medal":0,"score":"379584616919","product_id":100084301,"comment_content":"char* 的不足：<br>- 操作效率低：获取长度需遍历，O(N)复杂度<br>- 二进制不安全：无法存储包含 \\0 的数据<br><br>SDS 的优势：<br>- 操作效率高：获取长度无需遍历，O(1)复杂度<br>- 二进制安全：因单独记录长度字段，所以可存储包含 \\0 的数据<br>- 兼容 C 字符串函数，可直接使用字符串 API<br><br>另外 Redis 在操作 SDS 时，为了避免频繁操作字符串时，每次「申请、释放」内存的开销，还做了这些优化：<br>- 内存预分配：SDS 扩容，会多申请一些内存（小于 1MB 翻倍扩容，大于 1MB 按 1MB 扩容）<br>- 多余内存不释放：SDS 缩容，不释放多余的内存，下次使用可直接复用这些内存<br><br>这种策略，是以多占一些内存的方式，换取「追加」操作的速度。<br><br>这个内存预分配策略，详细逻辑可以看 sds.c 的 sdsMakeRoomFor 函数。<br><br>课后题：SDS 字符串在 Redis 内部模块实现中也被广泛使用，你能在 Redis server 和客户端的实现中，找到使用 SDS 字符串的地方么？<br><br>1、Redis 中所有 key 的类型就是 SDS（详见 db.c 的 dbAdd 函数）<br><br>2、Redis Server 在读取 Client 发来的请求时，会先读到一个缓冲区中，这个缓冲区也是 SDS（详见 server.h 中 struct client 的 querybuf 字段）<br><br>3、写操作追加到 AOF 时，也会先写到 AOF 缓冲区，这个缓冲区也是 SDS （详见 server.h 中 struct client 的 aof_buf 字段）<br>","like_count":88,"discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386386,"discussion_content":"string 限制 512M 和 sds 的结构没有直接关系的，512M 这个值是 Redis 作者人为限制的长度，你可以看看 t_string.c 的 checkStringLength 函数：\n\nstatic int checkStringLength(redisClient *c, long long size) {\n    if (size > 512*1024*1024) {\n        addReplyError(c,&#34;string exceeds maximum allowed size (512MB)&#34;);\n        return REDIS_ERR;\n    }\n    return REDIS_OK;\n}","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1627560441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2328010,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/FKYLNOAwgmAddtEAleFTgv0vvbibummCWW7CZsAKEABMqgB79JHrejzy5eic6T6XLa9HBcz4yCIlr81Na00YEAIQ/132","nickname":"听闻","note":"","ucode":"64AD4D8249DFA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":540034,"discussion_content":"可能和setbit有关？512m的bit最大位到了uint32最大数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639924195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386386,"ip_address":""},"score":540034,"extra":""}]},{"author":{"id":2743620,"avatar":"","nickname":"Geek_8d3e0a","note":"","ucode":"D387929EE2B37B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557586,"discussion_content":"我爱课代表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647871845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2532285,"avatar":"","nickname":"Geek_926921","note":"","ucode":"51C3B0178D77E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393784,"discussion_content":"课代表总结必看系列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631599960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812201,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLm8skz4F7FGGBTXWUMia6qVEc00BddeXapicv5FkAx62GmOnUNEcE4scSR60AmappQoNdIQhccKsBA/132","nickname":"末日，成欢","note":"","ucode":"BBAEBB9C93558A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387687,"discussion_content":"我想问下sds的char buf[]和char *p有啥区别吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628347172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1009002,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/65/6a/be36c108.jpg","nickname":"ikel","note":"","ucode":"1D5CE7803C1C2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1812201,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLm8skz4F7FGGBTXWUMia6qVEc00BddeXapicv5FkAx62GmOnUNEcE4scSR60AmappQoNdIQhccKsBA/132","nickname":"末日，成欢","note":"","ucode":"BBAEBB9C93558A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391363,"discussion_content":"应该大小不一样，你可以打印出看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630418628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387687,"ip_address":""},"score":391363,"extra":""}]},{"author":{"id":1390997,"avatar":"https://static001.geekbang.org/account/avatar/00/15/39/95/a72ef023.jpg","nickname":"木子","note":"","ucode":"66B9C493F25B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386775,"discussion_content":"课代表的评论每次必看，跟着课代表好好学习，好想成为课代表这样的大牛😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627792323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095445,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b7/15/6a2b6b83.jpg","nickname":"董宗磊","note":"","ucode":"D7005A328BC2EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386482,"discussion_content":"static int checkStringLength(client *c, long long size) {\n    if (!(c->flags &amp; CLIENT_MASTER) &amp;&amp; size > server.proto_max_bulk_len) {\n        addReplyError(c,&#34;string exceeds maximum allowed size (proto-max-bulk-len)&#34;);\n        return C_ERR;\n    }\n    return C_OK;\n}\n\n6.2.4 源码中用 server.proto_max_bulk_len   这个内容，没太看懂呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627609529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1095445,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b7/15/6a2b6b83.jpg","nickname":"董宗磊","note":"","ucode":"D7005A328BC2EE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386486,"discussion_content":"说明这里不在硬编码写死限制了，变成可配置的了，可以看看配置文件：proto-max-bulk-len，默认 512mb，可修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627612117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386482,"ip_address":""},"score":386486,"extra":""}]},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386387,"discussion_content":"另外 2^9 不是 512M ... 这里的单位是字节哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627560507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":386395,"discussion_content":"写错，2^29， 哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627562002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386387,"ip_address":""},"score":386395,"extra":""}]},{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386342,"discussion_content":"课代表你好，我看的是3.0的源码，sds结构中字符数组长度用int表示，int最大可表示2^31-1，但是string中限制最大长度是512M（2^9），请问下这是为什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627541286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1105387,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/eb/80f9d212.jpg","nickname":"lttzzlll","note":"","ucode":"FA160F7C02ABAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"discussion":{"id":389976,"discussion_content":"2 ^ 10 ^ 9 = 2 ^ 19","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629551865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386342,"ip_address":""},"score":389976,"extra":""},{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"discussion":{"id":551049,"discussion_content":"没啥含义，512m就是作者给了个经验值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644886658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386342,"ip_address":""},"score":551049,"extra":""}]}]},{"had_liked":false,"id":304685,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1627549636,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"53167157188","product_id":100084301,"comment_content":"课后题：使用 SDS 字符串的地方？<br><br>1. server.h 文件中的 `redisObject` 对象，key 和 value 都是对象，key （键对象）都是 SDS 简单动态字符串对象<br>2. cluter.c 的 clusterGenNodesDescription 函数中。这个函数代表以 csv 格式记录当前节点已知所有节点的信息。<br>3. client.h 的 clusterLink 结构体中。clusterLink 包含了与其他节点进行通讯所需的全部信息，用 SDS 来存储输出缓冲区和输入缓冲区。<br>4. server.h 的 client 结构体中。缓冲区 querybuf、pending_querybuf 用的 sds 数据结构。<br>5. networking.c 中的 catClientInfoString 函数。获取客户端的各项信息，将它们储存到 sds 值 s 里面，并返回。<br>6. sentinel.c 中的 sentinelGetMasterByName 函数。根据名字查找主服务器，而参数名字会先转化为 SDS 后再去找主服务器。<br>7. server.h 中的结构体 redisServer，aof_buf 缓存区用的 是 sds。<br>8. slowlog.h 中的结构体 slowlogEntry，用来记录慢查询日志，其他 client 的名字和 ip 地址用的是 sds。<br><br>还有很多地方用到了，这里就不一一列举了，感兴趣的同学加我好友交流：passjava。<br><br>----------------------------------<br><br>详细说明：<br><br>（1）Redis 使用对象来表示数据库中的键和值，每次创建一个键值对时，都会创建两个对象：一个键对象，一个值对象。而键对象都是 SDS 简单动态字符串对象，值对象可以字符串对象、列表对象、哈希对象、集合对象或者有序集合对象。<br><br>对象的数据结构：<br><br>server.h 文件中的 `redisObject` 结构体定义如下：<br><br>```c<br>typedef struct redisObject {<br>    &#47;&#47; 类型<br>    unsigned type:4;<br>    &#47;&#47; 编码<br>    unsigned encoding:4;<br>    &#47;&#47; 对象最后一次被访问的时间<br>    unsigned lru:LRU_BITS; &#47;* LRU time (relative to global lru_clock) or<br>                            * LFU data (least significant 8 bits frequency<br>                            * and most significant 16 bits access time). *&#47;<br>    &#47;&#47; 引用计数<br>    int refcount;<br>    &#47;&#47; 指向实际值的指针<br>    void *ptr;<br>} robj;<br>```<br><br>再来看添加键值对的操作，在文件 db.c&#47;<br><br>```C<br>void dbAdd(redisDb *db, robj *key, robj *val)<br>```<br><br>第一个参数代表要添加到哪个数据库（Redis 默认会创建 16 个数据库，第二个代表键对象，第三个参数代表值对象。<br><br>dbAdd 函数会被很多 Redis 命令调用，比如 sadd 命令。<br><br>（Redis sadd 命令将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。<br><br>假如集合 key 不存在，则创建一个只包含添加的元素作成员的集合。<br><br>当集合 key 不是集合类型时，返回一个错误。2）<br><br>类似这样的命令：myset 就是一个字符串。<br>```SH<br>redis 127.0.0.1:6379&gt; SADD myset &quot;hello&quot;<br>```<br><br>（2）集群中也会用到，代码路径： cluter.c&#47;clusterGenNodesDescription<br><br>所有节点的信息（包括当前节点自身）被保存到一个 sds 里面，以 csv 格式返回。<br><br>（3）cluster.h 的 clusterLink 结构体中。clusterLink 包含了与其他节点进行通讯所需的全部信息<br><br>```C<br>&#47;&#47; 输出缓冲区，保存着等待发送给其他节点的消息（message）。<br>sds sndbuf;                 &#47;* Packet send buffer *&#47;<br><br>&#47;&#47; 输入缓冲区，保存着从其他节点接收到的消息。<br>sds rcvbuf;     <br>```<br><br>（4）Redis 会维护每个 Client 的状态，Client 发送的请求，会被缓存到 querybuf 中。","like_count":12,"discussions":[{"author":{"id":1123163,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","nickname":"悟空聊架构","note":"","ucode":"C2F482A0CF8AF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386379,"discussion_content":"---------------------------------------\n\n补充下 SDS 和 C 字符串的知识：\n\n（1）Redis 也会使用 C 字符串作为字面量，大多数情况下，Redis 使用 SDS 作为字符串表示。\n\n（2）SDS 和 C 字符串相比具有哪些优势：\n\n- 通过常数来获取字符串的长度，时间复杂度O(1)。\n- 空间预分配，杜绝缓冲区溢出。自动扩容的方式。具体看这个函数 sds.c/sdsMakeRoomFor。\n- 减少修改字符串长度时所需的内存重分配次数，因为扩容的时候会提前多分配一些空间，所以不是每次都扩容。将内存重分配次数从必定 N 次降低为最多 N 次。\n- 惰性空间释放。当缩短字符串时，不会立即执行内存重分配，减少内存分配造成的开销。\n- 二进制安全，也就是说可以保存空字符 `\\0`。而 C 字符串只能保存文本数据，SDS 可以保存像图片、音频、视频、压缩文件这样的二进制数据。\n- 兼容部分的 C 字符串函数。为什么能兼容？因为 SDS 遵循 C 字符串以空字符结尾的惯例，这样可以让 SDS 可以重用一部分 <string.h>库定义的函数。\n\n（3）SDS 分配内存的算法\n\n- 如果扩容时，计算扩容后 SDS 的长度将小于 1MB，则翻倍扩容。\n- 如果扩容时，计算扩容后 SDS 的长度将大于 1MB，则分配 1 MB 的空间。\n- 如果需要缩容时，不会立即释放内存（内存重分配），而是将内存留给以后使用，避免了内存重分配，未将来可能有的增长操作提供了优化。在有需要时，调用释放内存的 API 即可释放。\n\n（4）SDS常用的函数\n\n- sdsnew：创建一个包含给定 C 字符串的 SDS，O(N)\n- sdsempty：创建一个不包含任何内容的空 SDS，O(1)\n- sdsfree：释放给定的 SDS，O(N)\n- sdslen：返回 SDS 的已使用空间字节数，O(1)\n- sdsavail：返回 SDS 的未使用空间字节数，O(1)\n- sdsdup：创建一个给定 SDS 的副本，O(N)\n- sdsclear：清空 SDS 保存的字符串内容，O(1)\n- sdscat：将给定 C 字符串拼接到 SDS 字符串的末尾，O(N)\n- sdscatsds：将给定 SDS 字符串拼接到另一个 SDS 字符串的末尾，O(N)\n- sdscpy：将给定的 C 字符串赋值到 SDS 里面，覆盖 SDS 原有的字符串，O(N)\n- sdsgrowzeo：用空字符将 SDS 扩展至给定长度，O(N)\n- sdsrange：保留 SDS 给定区间内的数据，不在区间内的数据会被覆盖或清楚，O(N)\n- sdstrim：接受一个 SDS 和一个 C 字符串作为参数，从 SDS 左右两端分别移除所有在 C 字符串中出现过的字符，OM*N)\n- sdscmp：对比两个字符串是否相同。O(N)\n\n（5）Redis 3.0 和 5.0 的区别\n\n- 3.0  SDS 源码\n\n```C\n/*\n * 类型别名，用于指向 sdshdr 的 buf 属性\n */\ntypedef char *sds;\n\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n```\n\n- 5.0 SDS 源码\n\n```C\nstruct __attribute__ ((__packed__)) sdshdr8 {\n    uint8_t len; /* 字符数组现有长度*/\n    uint8_t alloc; /* 字符数组的已分配空间，不包括结构体和\\0结束字符*/\n    unsigned char flags; /* SDS类型SDS 一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64*/\n    char buf[];/*字符数组*/\n};\n```\n\n另外之前写过一篇用故事讲解 SDS 的文章，但是是基于 3.0 源码的，看了 5.0 源码后，数据结构还是有比较大的区别的。https://mp.weixin.qq.com/s/qtiE6ddYzMcalf3OfVeRGA。\n\n吐槽下：Github 上下载源码总是下载失败，为了其他同学们方便下载，我整理了多套源码的下载地址，包含了本专栏的配套源码，都是国内的网盘链接，只有几MB 大小，下载比较快的。\n\nhttp://www.passjava.cn/#/12.Redis/0","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1627557070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123163,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","nickname":"悟空聊架构","note":"","ucode":"C2F482A0CF8AF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386378,"discussion_content":"字数超限了，接着上条：\n\n这个文件：server.h/typedef struct client，有两个缓冲区 querybuf、pending_querybuf用的 sds 数据结构。还有一个 peerid。\n\n```c\nsds querybuf;           /* Buffer we use to accumulate client queries. */\nsds pending_querybuf;   /* If this client is flagged as master, this buffer represents the                           yet not applied portion of the replication stream that we are                               receiving from the master. */\nsds peerid;             /* Cached peer ID. */\n```\n\n（5）networking.c 中的 catClientInfoString 函数。获取客户端的各项信息，将它们储存到 sds 值 s 里面，并返回。\n\n（6）sentinel.c 中的 sentinelGetMasterByName 函数。根据名字查找主服务器，而参数名字会先转化为 SDS 后再去找主服务器。\n\n（7）server.h 中的结构体 redisServer，aof_buf 缓存区用的 是 sds。\n\n```c\nsds aof_buf;      /* AOF buffer, written before entering the event loop */\nsds aof_child_diff;             /* AOF diff accumulator child side. */\n```\n\n（8）slowlog.h 中的结构体 slowlogEntry，用来记录慢查询日志，其他 client 的名字和 ip 地址用的是 sds。\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1627556977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744412,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLFzTL7n7a5wmZ7NicjTFGLk2CdM8t0iaUwm6ZHZ6ZaEfvwgTey9LBmPWA5Yq8kK6cGgPVgbgL24Q6Q/132","nickname":"chutianxia","note":"","ucode":"DE575E94EDEE91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387111,"discussion_content":"得到了很好的补充哇！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627992117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305144,"user_name":"lzh2nix","can_delete":false,"product_type":"c1","uid":1066191,"ip_address":"","ucode":"2B9AC282082F7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","comment_is_top":false,"comment_ctime":1627860842,"is_pvip":false,"replies":[{"id":"110470","content":"是的，这个是SDS设计得非常巧妙的地方，后续给大家加餐讲讲：）","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1627981752,"ip_address":"","comment_id":305144,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48872501098","product_id":100084301,"comment_content":"个人觉得这里使用__attribute__ ((__packed__))除了节省内存空间之外，还有一个很精妙的设计就是在packed之后可以通过以下的方式来获取flags字段<br><br>\tunsigned char flags = s[-1];<br>    <br>    switch(flags&amp;SDS_TYPE_MASK) {<br>        case SDS_TYPE_5:<br>            return SDS_TYPE_5_LEN(flags);<br>        case SDS_TYPE_8:<br>            return SDS_HDR(8,s)-&gt;len;<br>        case SDS_TYPE_16:<br>            return SDS_HDR(16,s)-&gt;len;<br>        case SDS_TYPE_32:<br>            return SDS_HDR(32,s)-&gt;len;<br>        case SDS_TYPE_64:<br>            return SDS_HDR(64,s)-&gt;len;<br>    }<br><br>从而更进一步的得到struct的具体类型，如果是非1字节对齐的话，这里就不能这样操作。而sds中通过原始的char* 定位到sds的Header是设计的的**灵魂**","like_count":11,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524295,"discussion_content":"是的，这个是SDS设计得非常巧妙的地方，后续给大家加餐讲讲：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627981752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1732366,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKkFvuiaEntOvrP5Pv2CSBiayjRULB7QdoaDeozRl4hhSbWSP9flNhHu1lPCwM1Yg22bGyEI5iaIS3icQ/132","nickname":"Geek1173","note":"","ucode":"865F0E493E7EDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387552,"discussion_content":"我也觉得这些部分应该要介绍一下， 发现这个地方有缺失！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628239592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305018,"user_name":"lzh2nix","can_delete":false,"product_type":"c1","uid":1066191,"ip_address":"","ucode":"2B9AC282082F7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","comment_is_top":false,"comment_ctime":1627772927,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40282478591","product_id":100084301,"comment_content":"个人觉得sds有一个很优秀的设计是对外和char*保持一致，在sds外面可以像使用char*一样来使用sds，但是使用sds相关函数操作的时候又可以发挥sds的特性(通过偏移量来找到sds的header)。<br><br>我们可以看到在sdsnewlen中返回的是char*<br><br>sds sdsnewlen(const void *init, size_t initlen) {<br>    sds s;<br>    sh = s_malloc(hdrlen+initlen+1);<br>    s = (char*)sh+hdrlen;<br>    return s;<br>}<br>这样的实际对外面的使用着来说就很友好很友好的。","like_count":9},{"had_liked":false,"id":304855,"user_name":"frankylee","can_delete":false,"product_type":"c1","uid":1215578,"ip_address":"","ucode":"7C1D04B4E8E9B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLgsx7Jic0oLzyKcEtk675vnicehGIQGqZiaedh9fdaQjKv6ZJsWviclFakKJicabC2ibV3bibm3gIic5hvtA/132","comment_is_top":false,"comment_ctime":1627639817,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27397443593","product_id":100084301,"comment_content":"既然这篇是讲解SDS的,那按道理来说   SDS内存空间分配策略,以及空间释放册罗 这块就应该讲清楚,但是通篇读下来好像并没提到这块,读完下面的精选留言部分读者可能仍然云里雾里","like_count":6,"discussions":[{"author":{"id":2427363,"avatar":"https://static001.geekbang.org/account/avatar/00/25/09/e3/c9622ddd.jpg","nickname":"summy","note":"","ucode":"8CBA92AFFB55BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583956,"discussion_content":"内存的申请和释放应该是通过jemalloc来管理的，redis这一块应该是封装了jemalloc的操作接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660527979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1417682,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a1/d2/58110e27.jpg","nickname":"慧慧给冲的会员","note":"","ucode":"E81475678299F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390111,"discussion_content":"是的，感觉讲的一半","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629678097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312635,"avatar":"https://static001.geekbang.org/account/avatar/00/14/07/7b/db7fa67e.jpg","nickname":"阿梵杰～","note":"","ucode":"EBF291933B16E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386630,"discussion_content":"目前看，确实没有想象中的好。。。老师也不回复评论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627700847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304648,"user_name":"Milittle","can_delete":false,"product_type":"c1","uid":1045455,"ip_address":"","ucode":"80E566639A8ABB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","comment_is_top":false,"comment_ctime":1627532588,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18807401772","product_id":100084301,"comment_content":"设计着实牛逼：<br>1. 使用sds这个字符数组保存所有8 16 32 64的结构体。<br>2. 结构体中的len alloc 对应不同类型占不同字节数，flags始终是相同的，后面char buf[]就是真实的字符串。<br>3. SDS_HDR 这个宏定义，一键让sds回到指针初始的地方，对变量进行设置。<br>4. 一开始纳闷在取flags的时候，直接使用s[-1],不会数据越界么，但是你仔细瞧一瞧，发现这个s指向的位置，刚好是char buf[]这里，-1 的位置刚好是flags。害，还是发现c牛逼。一个指针掌控的死死的。<br><br>望赐教<br>","like_count":4},{"had_liked":false,"id":305141,"user_name":"lzh2nix","can_delete":false,"product_type":"c1","uid":1066191,"ip_address":"","ucode":"2B9AC282082F7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","comment_is_top":false,"comment_ctime":1627859612,"is_pvip":false,"replies":[{"id":"110469","content":"应该是这两个元数据各自占用的内存空间是2字节。。。不好意思，引起误解了。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1627981600,"ip_address":"","comment_id":305141,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10217794204","product_id":100084301,"comment_content":"&quot;这两个元数据占用的内存空间在 sdshdr16、sdshdr32、sdshdr64 类型中，则分别是 2 字节、4 字节和 8 字节&quot;<br><br>这里的描述是是否有问题， sdshdr16中len， alloc这两个元数据占用的空间应该是4字节，其他两个类推。<br>struct __attribute__((__packed__))sdshdr16 {<br>        uint16_t len; &#47;*2字节*&#47;<br>        uint16_t alloc; &#47;* 2字节*&#47;<br>        unsigned char flags; &#47;* 1字节 *&#47;<br>        char buf[];<br>    };","like_count":2,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524292,"discussion_content":"应该是这两个元数据各自占用的内存空间是2字节。。。不好意思，引起误解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627981600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304634,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1627527358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10217461950","product_id":100084301,"comment_content":"Redis设计sds的意图：<br>    1、满足存储传输二进制的条件（避免\\0歧义）<br>    2、高效操作字符串（通过len和alloc,快速获取字符长度大小以及跳转到字符串末尾）<br>    3、紧凑型内存设计（按照字符串类型，len和alloc使用不同的类型节约内存，并且关闭内存对齐来达到内存高效利用，在redis中除了sds，intset和ziplist也有类似的目底）<br>    4、避免频繁的内存分配，除了sds部分类型存在预留空间，sds设计了sdsfree和sdsclear两种字符串清理函数，其中sdsclear，只是修改len为0以及buf为&#39;\\0&#39;，并不会实际释放内存，避免下次使用带来的内存开销（老师可能忘记提及了）<br><br><br>此外sds的使用几乎可以贯穿整个redis，在server.h文件中以redisServer 和 client 为例子（client既可以是普通客户端，也可以是slave）<br><br>client:<br>    1、querybuf（查询缓冲区使用sds，RESP的协议数据）<br>    2、pending_querybuf（易主时候的等待同步缓冲区）<br>    等等<br><br><br>redisServer：<br>    1、aof_buf（aof缓冲区）<br>    等等","like_count":2},{"had_liked":false,"id":347840,"user_name":"J²","can_delete":false,"product_type":"c1","uid":1100048,"ip_address":"","ucode":"17D9D30F90F97C","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/10/65fe5b06.jpg","comment_is_top":false,"comment_ctime":1654507494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5949474790","product_id":100084301,"comment_content":"&#47;&#47;将源字符串中的每个字符逐一赋值到目标字符串中，直到遇到结束字符 <br>while((*dest++ = *src++) != &#39;\\0&#39; )<br>这里少了个分号，应该是while((*dest++ = *src++) != &#39;\\0&#39; );","like_count":1},{"had_liked":false,"id":309970,"user_name":"ikel","can_delete":false,"product_type":"c1","uid":1009002,"ip_address":"","ucode":"1D5CE7803C1C2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/6a/be36c108.jpg","comment_is_top":false,"comment_ctime":1630418771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5925386067","product_id":100084301,"comment_content":"5年前看redis源码，当时把sds结构用到了项目中来处理字符串，也没出过啥幺蛾子，只可惜后来没有再继续看源码了","like_count":1},{"had_liked":false,"id":305648,"user_name":"Geek4452","can_delete":false,"product_type":"c1","uid":2206777,"ip_address":"","ucode":"7D0B97B58010BA","user_header":"","comment_is_top":false,"comment_ctime":1628087217,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"5923054513","product_id":100084301,"comment_content":"和c++ string一样？std string也能满足上述的需求啊，为啥不直接用","like_count":1,"discussions":[{"author":{"id":2488913,"avatar":"https://static001.geekbang.org/account/avatar/00/25/fa/51/5da91010.jpg","nickname":"Miroticwillbeforever","note":"","ucode":"1DDD8AECD93EA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388471,"discussion_content":"redis是纯c写的。而且 c++的 std::string都不咋用，很多企业都会自行实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628776519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2488913,"avatar":"https://static001.geekbang.org/account/avatar/00/25/fa/51/5da91010.jpg","nickname":"Miroticwillbeforever","note":"","ucode":"1DDD8AECD93EA8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391535,"discussion_content":"自行实习的大部分都能比标准库的好么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630501765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388471,"ip_address":""},"score":391535,"extra":""},{"author":{"id":2488913,"avatar":"https://static001.geekbang.org/account/avatar/00/25/fa/51/5da91010.jpg","nickname":"Miroticwillbeforever","note":"","ucode":"1DDD8AECD93EA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413052,"discussion_content":"也不能这样说，还是看需求来的吧。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636372216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":391535,"ip_address":""},"score":413052,"extra":""},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534566,"discussion_content":"看是谁自行实现的吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638233864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":391535,"ip_address":""},"score":534566,"extra":""}]}]},{"had_liked":false,"id":357923,"user_name":"ly","can_delete":false,"product_type":"c1","uid":2081789,"ip_address":"广东","ucode":"79F6C3DB9663D1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/c3/fd/8a2a69f2.jpg","comment_is_top":false,"comment_ctime":1663749418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663749418","product_id":100084301,"comment_content":"请问一下，sds采用的紧凑模型会不会和内存对齐矛盾呢，换句话说就是紧凑模型会不会产生大量碎片造成性能下降","like_count":0},{"had_liked":false,"id":353651,"user_name":"kobe","can_delete":false,"product_type":"c1","uid":1165831,"ip_address":"浙江","ucode":"AB8B599F3D5521","user_header":"https://static001.geekbang.org/account/avatar/00/11/ca/07/22dd76bf.jpg","comment_is_top":false,"comment_ctime":1659663304,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1659663304","product_id":100084301,"comment_content":"uint8_t 是 8 位无符号整型，会占用 1 字节的内存空间。当字符串类型是 sdshdr8 时，它能表示的字符数组长度（包括数组最后一位\\0）不会超过 256 字节（2 的 8 次方等于 256）。这里的字符数组长度应该是256 而不是256字节吧？","like_count":0},{"had_liked":false,"id":352087,"user_name":"🤐","can_delete":false,"product_type":"c1","uid":1804626,"ip_address":"","ucode":"17D997E499E651","user_header":"https://static001.geekbang.org/account/avatar/00/1b/89/52/b96c272d.jpg","comment_is_top":false,"comment_ctime":1658380596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658380596","product_id":100084301,"comment_content":"省内存感觉出来了 对于一开始就用JAVA的人来说 就觉得c的这个字符串设计很奇怪 读长度居然是on","like_count":0},{"had_liked":false,"id":348626,"user_name":"伊诺","can_delete":false,"product_type":"c1","uid":1281857,"ip_address":"","ucode":"709E038DD01C17","user_header":"https://static001.geekbang.org/account/avatar/00/13/8f/41/307555ff.jpg","comment_is_top":false,"comment_ctime":1655262513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655262513","product_id":100084301,"comment_content":"打扰一下，SDS 不通过字符串中的“\\0”字符判断字符串结束，但是源码里面老师说最后会拼接上&quot;\\o&quot;字符。","like_count":0},{"had_liked":false,"id":347192,"user_name":"Young","can_delete":false,"product_type":"c1","uid":2106939,"ip_address":"","ucode":"DCC32A4FC64422","user_header":"https://static001.geekbang.org/account/avatar/00/20/26/3b/c71c197a.jpg","comment_is_top":false,"comment_ctime":1653807706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653807706","product_id":100084301,"comment_content":"回头看了一下Redis核心技术与实战的第11节“万金油的string...”，可能之前讲原理讲的比较浅一点吧、在计算内存占用的时候，都是按最大分配的？看了这一节、会更好理解","like_count":0},{"had_liked":false,"id":344757,"user_name":"数学汤家凤","can_delete":false,"product_type":"c1","uid":2029485,"ip_address":"","ucode":"DE84E777C384AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","comment_is_top":false,"comment_ctime":1651753228,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1651753228","product_id":100084301,"comment_content":"说到结构体！就不得不提到一道经典题目<br>typedef struct {<br>    char*  a; &#47;&#47; 8 个字节<br>    short  b; &#47;&#47; 2 个字节<br>\tdouble c; &#47;&#47; 8 个字节<br>\tchar   d; &#47;&#47; 1 个字节<br>\tfloat  e; &#47;&#47; 4 个字节<br>\tchar   f; &#47;&#47; 1 个字节<br>\tlong   g; &#47;&#47; 8 个字节<br>\tint    h; &#47;&#47; 4 个字节<br>} A;<br>问：该结构体占多少字节。并优化该结构体使得该结构体所占空间最小","like_count":0,"discussions":[{"author":{"id":1166969,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ce/79/673f4268.jpg","nickname":"小杰","note":"","ucode":"09E29168D53178","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579278,"discussion_content":"求答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657275044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341572,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1649697116,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649697116","product_id":100084301,"comment_content":"根据字符串的大小，通过flag为len和alloc设置不同的数据类型，内存的合理利用","like_count":0},{"had_liked":false,"id":341571,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1649696979,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649696979","product_id":100084301,"comment_content":"Sds简单动态字符串<br>可以存储二进制数据，图片数据<br>通过len直接获取字符串长度，而不是通过查找&#47;0<br>预分配内存，防止字符串操作的频繁申请内存，将字符串操作变为安全操作。防止边界溢出。","like_count":0},{"had_liked":false,"id":330714,"user_name":"nul","can_delete":false,"product_type":"c1","uid":1043499,"ip_address":"","ucode":"2DBF03B2193B76","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/2b/1e059a0f.jpg","comment_is_top":false,"comment_ctime":1642130154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642130154","product_id":100084301,"comment_content":"优化方案：<br>1. 引入元数据<br>2. 编译优化<br>优化了啥：<br>1. 二进制安全问题<br>2. 操作效率问题<br>3. 内存资源优化","like_count":0},{"had_liked":false,"id":327707,"user_name":"白菜","can_delete":false,"product_type":"c1","uid":2230467,"ip_address":"","ucode":"C3AE527ECE970E","user_header":"https://static001.geekbang.org/account/avatar/00/22/08/c3/bf4fe285.jpg","comment_is_top":false,"comment_ctime":1640244971,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640244971","product_id":100084301,"comment_content":"有个疑问希望老师能解答：<br>Redis 字符串类型最大长度应该是 512M，sdshdr32 结构 的 len 和 alloc 刚好能够存储 512M 的长度，那么什么情况下才可能用到 sdshdr64 呢？","like_count":0},{"had_liked":false,"id":312431,"user_name":"Geek_4f06ca","can_delete":false,"product_type":"c1","uid":2331842,"ip_address":"","ucode":"69B37349DE3EC5","user_header":"","comment_is_top":false,"comment_ctime":1631797037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631797037","product_id":100084301,"comment_content":"在一次set操作中，key 在dbAdd的时候会调用sds copy = sdsdup(key-&gt;ptr) 生成sds ，但是value 没有没有看到转成sds的操作，在tryObjectEncoding 会对小于44字节的进行编码，但是大于44的情况并没有转成sds ，为什么值不转sds？有谁能解答下吗？<br>","like_count":0},{"had_liked":false,"id":308574,"user_name":"Alba","can_delete":false,"product_type":"c1","uid":2427143,"ip_address":"","ucode":"4963AB08A4AEBC","user_header":"https://static001.geekbang.org/account/avatar/00/25/09/07/44625105.jpg","comment_is_top":false,"comment_ctime":1629687800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629687800","product_id":100084301,"comment_content":"写一下自己看代码的疑惑和解决。<br>1. sdsnewlen 函数返回的是 sds 类型，也就是 char * 类型，而sdsnewlen 函数内部申请了sdshdr 加上 字符串的内存大小。这里利用了指针偏移。<br>2. 使用__attribute__((packed)) 确实能够实现内存紧凑，但是我们日常普遍用的都是结构体内存对齐。结构体内存对齐的意义在于防止访问一个数据时内存访问两次，相当于用空间换时间。那 redis 放弃了结构体内存对齐，对影响内存访问的效率吗？目前看的代码还很少，猜想是对 sdshdr 里的字段访问的比较少，所以不会影响内存访问的效率。如果工作中对内存优化需求不是很强烈，还是没必要使用内存紧凑的。<br>3. 结构体末端0长度数组相比指针的好处。一、方便申请和释放。如果用指针，就需要先申请结构体的内存，再申请指针指向字符串的内存；先释放指针指向字符串的内存，再释放结构体的内存。而用数组，只申请和释放结构体的内存就可以了。二、数组长度为 0 的时候不占用内存大小，而使用指针，指针本身就占用一个字长。","like_count":0},{"had_liked":false,"id":308451,"user_name":"熊猫№.47","can_delete":false,"product_type":"c1","uid":1073203,"ip_address":"","ucode":"380F1D26380EF2","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/33/b17c8fb7.jpg","comment_is_top":false,"comment_ctime":1629624582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629624582","product_id":100084301,"comment_content":"Strings类型：一个String类型的value最大可以存储512M<br><br>Lists类型：list的元素个数最多为2^32-1个，也就是4294967295个。<br><br>Sets类型：元素个数最多为2^32-1个，也就是4294967295个。<br><br>Hashes类型：键值对个数最多为2^32-1个，也就是4294967295个。<br><br>Sorted sets类型：跟Sets类型相似。","like_count":0},{"had_liked":false,"id":305660,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1628089507,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1628089507","product_id":100084301,"comment_content":"__attribute__ ((__packed__)) 是这么做到紧凑型内存布局的呢，还有作者大大，有没有啥工具能更好的看redis源码呢，谢谢","like_count":0,"discussions":[{"author":{"id":2029485,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","nickname":"数学汤家凤","note":"","ucode":"DE84E777C384AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570390,"discussion_content":"这是个宏，编译器看到了，就不对该结构体做对齐优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651753327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391537,"discussion_content":"看代码用sourceinside","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630501990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305341,"user_name":"命运女神在微笑","can_delete":false,"product_type":"c1","uid":1492301,"ip_address":"","ucode":"249172371DA9F2","user_header":"https://static001.geekbang.org/account/avatar/00/16/c5/4d/3e75e5f1.jpg","comment_is_top":false,"comment_ctime":1627912184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627912184","product_id":100084301,"comment_content":"sdshdr5结构会被使用，if (type == SDS_TYPE_5 &amp;&amp; initlen == 0)，当长度小于sdshdr8且不为空的时候就会被使用，具体的解释可以看这个issue  https:&#47;&#47;github.com&#47;redis&#47;redis&#47;issues&#47;7581，","like_count":0},{"had_liked":false,"id":305104,"user_name":".","can_delete":false,"product_type":"c1","uid":2460839,"ip_address":"","ucode":"1D7B236E828571","user_header":"https://static001.geekbang.org/account/avatar/00/25/8c/a7/3a696385.jpg","comment_is_top":false,"comment_ctime":1627816903,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627816903","product_id":100084301,"comment_content":"为什么\\0就不符合redis存储二进制数据的要求呢？","like_count":0,"discussions":[{"author":{"id":1053934,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/ee/d72a8222.jpg","nickname":"攻城拔寨","note":"","ucode":"CBC37183DAB6B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387326,"discussion_content":"二进制数据里面可能包含 \\0，而中间 \\0 的位置就会被当成结尾，相当于 \\0 后面的都被忽略了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628126659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304847,"user_name":"BrightLoong","can_delete":false,"product_type":"c1","uid":1165304,"ip_address":"","ucode":"361FB1840C2977","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/f8/6b311ad9.jpg","comment_is_top":false,"comment_ctime":1627638367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627638367","product_id":100084301,"comment_content":"mac版本过高，5.0.8编译因为debug.c文件报错的问题，我这边参照最新版本的源文件修改了下，现在可以编译成功了，有需要可以自己下载替换<br>链接: https:&#47;&#47;pan.baidu.com&#47;s&#47;1dKC9n2a9CmaQCkxn2OuZPw 提取码: 6d6v","like_count":0},{"had_liked":false,"id":304846,"user_name":"ZmJ","can_delete":false,"product_type":"c1","uid":1231959,"ip_address":"","ucode":"904BA721E735CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/cc/57/ca6c7740.jpg","comment_is_top":false,"comment_ctime":1627637993,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627637993","product_id":100084301,"comment_content":"我记得sds还用到了c中的柔性数组","like_count":0,"discussions":[{"author":{"id":1051873,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0c/e1/f663213e.jpg","nickname":"拾掇拾掇","note":"","ucode":"D775F374C2A1D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386953,"discussion_content":"不就是[]buf吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627908820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304843,"user_name":"BrightLoong","can_delete":false,"product_type":"c1","uid":1165304,"ip_address":"","ucode":"361FB1840C2977","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/f8/6b311ad9.jpg","comment_is_top":false,"comment_ctime":1627637040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627637040","product_id":100084301,"comment_content":"Mac系统太新，无法成功编译老版本的源码，最新版本的可以编译，看到最新版本debug.c里面如下<br>#if defined(__APPLE__) &amp;&amp; !defined(MAC_OS_X_VERSION_10_6)<br>    &#47;* OSX &lt; 10.6 *&#47;<br>    #if defined(__x86_64__)<br>    return (void*) uc-&gt;uc_mcontext-&gt;__ss.__rip;<br>    #elif defined(__i386__)<br>    return (void*) uc-&gt;uc_mcontext-&gt;__ss.__eip;<br>    #else<br>    return (void*) uc-&gt;uc_mcontext-&gt;__ss.__srr0;<br>    #endif<br>#elif defined(__APPLE__) &amp;&amp; defined(MAC_OS_X_VERSION_10_6)<br>    &#47;* OSX &gt;= 10.6 *&#47;<br>    #if defined(_STRUCT_X86_THREAD_STATE64) &amp;&amp; !defined(__i386__)<br>    return (void*) uc-&gt;uc_mcontext-&gt;__ss.__rip;<br>    #elif defined(__i386__)<br>    return (void*) uc-&gt;uc_mcontext-&gt;__ss.__eip;<br>    #else<br>    &#47;* OSX ARM64 *&#47;<br>    return (void*) arm_thread_state64_get_pc(uc-&gt;uc_mcontext-&gt;__ss);<br>    #endif<br>#elif defined(__linux__)<br>    &#47;* Linux *&#47;<br>    #if defined(__i386__) || ((defined(__X86_64__) || defined(__x86_64__)) &amp;&amp; defined(__ILP32__))<br>    return (void*) uc-&gt;uc_mcontext.gregs[14]; &#47;* Linux 32 *&#47;<br>    #elif defined(__X86_64__) || defined(__x86_64__)<br>    return (void*) uc-&gt;uc_mcontext.gregs[16]; &#47;* Linux 64 *&#47;<br>    #elif defined(__ia64__) &#47;* Linux IA64 *&#47;<br>    return (void*) uc-&gt;uc_mcontext.sc_ip;<br>    #elif defined(__arm__) &#47;* Linux ARM *&#47;<br>    return (void*) uc-&gt;uc_mcontext.arm_pc;<br>    #elif defined(__aarch64__) &#47;* Linux AArch64 *&#47;<br>    return (void*) uc-&gt;uc_mcontext.pc;<br>    #endif<br>#elif defined(__FreeBSD__)<br>    &#47;* FreeBSD *&#47;<br>    #if defined(__i386__)<br>    return (void*) uc-&gt;uc_mcontext.mc_eip;<br>    #elif defined(__x86_64__)<br>    return (void*) uc-&gt;uc_mcontext.mc_rip;<br>    #endif<br>#elif defined(__OpenBSD__)<br>    &#47;* OpenBSD *&#47;<br>    #if defined(__i386__)<br>    return (void*) uc-&gt;sc_eip;<br>    #elif defined(__x86_64__)<br>    return (void*) uc-&gt;sc_rip;<br>    #endif<br>#elif defined(__NetBSD__)<br>    #if defined(__i386__)<br>    return (void*) uc-&gt;uc_mcontext.__gregs[_REG_EIP];<br>    #elif defined(__x86_64__)<br>    return (void*) uc-&gt;uc_mcontext.__gregs[_REG_RIP];<br>    #endif<br>#elif defined(__DragonFly__)<br>    return (void*) uc-&gt;uc_mcontext.mc_rip;<br>#else<br>    return NULL;<br>请问老师有什么解决办法吗","like_count":0},{"had_liked":false,"id":304721,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1627567089,"is_pvip":true,"discussion_count":3,"race_medal":1,"score":"1627567089","product_id":100084301,"comment_content":"SDS 的定义中 如 sdshdr16 中的 hdr 代表什么意思的？","like_count":0,"discussions":[{"author":{"id":1041584,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUmskEvtO5IBPmfuVVwmMTdG9iavOk4LuxXibiaEick4VoSE2Siav5ibL8lGgtKd0jmyd8ENkjxoLN7LnA/132","nickname":"shishao","note":"","ucode":"E6219D33CDBF58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386889,"discussion_content":"对，header 的缩写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627878726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386776,"discussion_content":"hdr代表sds结构体的头部，你可以查下源码中有一个sdslen代表的就是去掉 buf[]后的结构体长度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627793671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152678,"avatar":"https://static001.geekbang.org/account/avatar/00/11/96/a6/aac2a550.jpg","nickname":"陌","note":"","ucode":"13FF1D4B3181F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386514,"discussion_content":"更像是 Header 的缩写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627624760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304695,"user_name":"可怜大灰狼","can_delete":false,"product_type":"c1","uid":1928373,"ip_address":"","ucode":"6CA9D6D460B967","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/b5/32374f93.jpg","comment_is_top":false,"comment_ctime":1627553082,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1627553082","product_id":100084301,"comment_content":"对比之前3.0版本改变：1.考虑字符串不同长度的场景。2.支持最大长度由4字节到8字节。3.free变成了alloc。<br>代码比之前复杂些，味道还是之前的味道","like_count":0},{"had_liked":false,"id":304638,"user_name":"Milittle","can_delete":false,"product_type":"c1","uid":1045455,"ip_address":"","ucode":"80E566639A8ABB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","comment_is_top":false,"comment_ctime":1627528518,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1627528518","product_id":100084301,"comment_content":"第一行set 命令后面的dict可以设置进去么？ 为啥我的报了格式错误：<br>1. 文中命令存在中文双引号<br>2. 文中的value，没有进行字符串的序列化，无法识别。<br>望赐教","like_count":0,"discussions":[{"author":{"id":1045455,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","nickname":"Milittle","note":"","ucode":"80E566639A8ABB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386481,"discussion_content":"字符串需要转译，加单引号的形式或者双引号转译：\nset user:id:100 &#39;{&#34;name&#34;:&#34;zhangsan&#34;,&#34;gender&#34;:&#34;M&#34;,&#34;city&#34;:&#34;beijinng&#34;}&#39;","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627609213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304619,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1627524419,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"1627524419","product_id":100084301,"comment_content":"看redis源代码用什么工具比较好用呢？","like_count":0,"discussions":[{"author":{"id":2675181,"avatar":"","nickname":"Geek_66617b","note":"","ucode":"D5B468568B8F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575785,"discussion_content":"使用CLion在Windows下调试Redis详细教程\nhttps://www.maoyingdong.com/redis/debug_redis/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655107237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1271812,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/04/a5d81cb1.jpg","nickname":"尹政","note":"","ucode":"D98663ABE1723C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386503,"discussion_content":"建议 understand  针对c语言的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627617397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123163,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","nickname":"悟空聊架构","note":"","ucode":"C2F482A0CF8AF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386362,"discussion_content":"vscode 就可以啊\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627549663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","nickname":"曾轼麟","note":"","ucode":"D418371AC11270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386324,"discussion_content":"clion可以考虑一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627527397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1165304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c7/f8/6b311ad9.jpg","nickname":"BrightLoong","note":"","ucode":"361FB1840C2977","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1451391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","nickname":"曾轼麟","note":"","ucode":"D418371AC11270","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386555,"discussion_content":"搞Java的用惯了idea，确实用clion不错，快捷键几乎通用，而且现在的clion已经支持makefile了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627635081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386324,"ip_address":""},"score":386555,"extra":""}]}]},{"had_liked":false,"id":304591,"user_name":"Geek_f71330","can_delete":false,"product_type":"c1","uid":1617615,"ip_address":"","ucode":"40F8CD661E8F59","user_header":"https://static001.geekbang.org/account/avatar/00/18/ae/cf/6186d936.jpg","comment_is_top":false,"comment_ctime":1627493453,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"1627493453","product_id":100084301,"comment_content":"老师你好，对今天这节课的理解有下:<br>1. \\0会导致无法存储包含\\0的字符串<br>2. sds加了当前字符串长度，分配的空间大小，主要作用是为了在对字符串进行修改时的方法能够更高效，同时也解决了\\0字符无法存储的问题。当然，这样相对于char*的方式，这应该是增加了内存消耗，但这是值得的。<br>3. 在结构体中设置flag标记位，区别不同长度的字符串，是为了减少空间浪费。<br>4. 告诉编译器打包时更紧凑，能节约更多空间。<br><br>我想请问老师:<br>关于第4点，让编译器不以8个字节作为单位去生成结构体定义，固然优化了空间，但是不是会导致读写变慢？这里不理解，如果以8个字节为单位没有好处，为什么编译器会这么去做？","like_count":0,"discussions":[{"author":{"id":1066191,"avatar":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","nickname":"lzh2nix","note":"","ucode":"2B9AC282082F7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386785,"discussion_content":"可以考虑下为啥默认要字节对齐(4 bytes，8 bytes)，这里是由于cpu的总线宽度，如果字节对齐的话一个变量的读取可以在一个cpu cycle中完成(可以想象一个int64在两个8 bytes中间的场景)。\n\n这里__attribute__ ((__packed__))之后struct之间仍然遵循字节对齐，再加上这些header占有的内存有很小，都能在一个cpu cycle取出来，所以在内存压缩的前提下并没有损失性能。\n\n个人的一点理解，如果有错误还帮忙指正。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1627799813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1818163,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLXDG2ux03bmIyEu9cR1SGX9QnDLJmSpYBg6CcfL6uUiaL90ypGIdmjXaj9uYLaxkQVoKSDeuAiaobQ/132","nickname":"Geek_lijia","note":"","ucode":"321E594550BDEB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1066191,"avatar":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","nickname":"lzh2nix","note":"","ucode":"2B9AC282082F7D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554743,"discussion_content":"是的，整个结构体的起始地址还是会字节对齐，只是结构体内部的成员，会连续存储","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646577055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386785,"ip_address":""},"score":554743,"extra":""}]},{"author":{"id":1045455,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","nickname":"Milittle","note":"","ucode":"80E566639A8ABB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386334,"discussion_content":"编译器对齐应该是为了cpu访问内存的时候，能一次把相关数据加载进来，但是这里redis本身是内存占用大户，其实应该可以避免这个问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627531244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051873,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0c/e1/f663213e.jpg","nickname":"拾掇拾掇","note":"","ucode":"D775F374C2A1D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386954,"discussion_content":"可以看下redis设计与实现，讲的详细","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627908913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1386902,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/96/99344bf1.jpg","nickname":"努力与减肥","note":"","ucode":"C69D08E7EEDCE4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1051873,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0c/e1/f663213e.jpg","nickname":"拾掇拾掇","note":"","ucode":"D775F374C2A1D3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":410069,"discussion_content":"辛苦告知一下，这本书那一页讲解了问题4， 没有找到？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635586313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386954,"ip_address":""},"score":410069,"extra":""}]}]}]}