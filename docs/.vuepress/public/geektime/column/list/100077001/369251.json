{"id":369251,"title":"05｜Spring AOP 常见错误（上）","content":"<p>你好，我是傅健。这节课开始，我们聊聊Spring AOP使用中常遇到的一些问题。</p><p>Spring AOP是Spring中除了依赖注入外（DI）最为核心的功能，顾名思义，AOP即Aspect Oriented Programming，翻译为面向切面编程。</p><p>而Spring AOP则利用CGlib和JDK动态代理等方式来实现运行期动态方法增强，其目的是将与业务无关的代码单独抽离出来，使其逻辑不再与业务代码耦合，从而降低系统的耦合性，提高程序的可重用性和开发效率。因而AOP便成为了日志记录、监控管理、性能统计、异常处理、权限管理、统一认证等各个方面被广泛使用的技术。</p><p>追根溯源，我们之所以能无感知地在容器对象方法前后任意添加代码片段，那是由于Spring在运行期帮我们把切面中的代码逻辑动态“织入”到了容器对象方法内，所以说<strong>AOP本质上就是一个代理模式</strong>。然而在使用这种代理模式时，我们常常会用不好，那么这节课我们就来解析下有哪些常见的问题，以及背后的原理是什么。</p><h2>案例1：this调用的当前类方法无法被拦截</h2><p>假设我们正在开发一个宿舍管理系统，这个模块包含一个负责电费充值的类ElectricService，它含有一个充电方法charge()：</p><!-- [[[read_end]]] --><pre><code>@Service\npublic class ElectricService {\n\n    public void charge() throws Exception {\n        System.out.println(&quot;Electric charging ...&quot;);\n        this.pay();\n    }\n\n    public void pay() throws Exception {\n        System.out.println(&quot;Pay with alipay ...&quot;);\n        Thread.sleep(1000);\n    }\n\n}\n</code></pre><p>在这个电费充值方法charge()中，我们会使用支付宝进行充值。因此在这个方法中，我加入了pay()方法。为了模拟pay()方法调用耗时，代码执行了休眠1秒，并在charge()方法里使用 this.pay()的方式调用这种支付方法。</p><p>但是因为支付宝支付是第三方接口，我们需要记录下接口调用时间。这时候我们就引入了一个@Around的增强 ，分别记录在pay()方法执行前后的时间，并计算出执行pay()方法的耗时。</p><pre><code>@Aspect\n@Service\n@Slf4j\npublic class AopConfig {\n    @Around(&quot;execution(* com.spring.puzzle.class5.example1.ElectricService.pay()) &quot;)\n    public void recordPayPerformance(ProceedingJoinPoint joinPoint) throws Throwable {\n        long start = System.currentTimeMillis();\n        joinPoint.proceed();\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;Pay method time cost（ms）: &quot; + (end - start));\n    }\n}\n</code></pre><p>最后我们再通过定义一个Controller来提供电费充值接口，定义如下：</p><pre><code>@RestController\npublic class HelloWorldController {\n    @Autowired\n    ElectricService electricService;\n    @RequestMapping(path = &quot;charge&quot;, method = RequestMethod.GET)\n    public void charge() throws Exception{\n          electricService.charge();\n    };\n}\n</code></pre><p>完成代码后，我们访问上述接口，会发现这段计算时间的切面并没有执行到，输出日志如下：</p><blockquote>\n<p>Electric charging ...<br>\nPay with alipay ...</p>\n</blockquote><p>回溯之前的代码可知，在@Around的切面类中，我们很清晰地定义了切面对应的方法，但是却没有被执行到。这说明了在类的内部，通过this方式调用的方法，是没有被Spring AOP增强的。这是为什么呢？我们来分析一下。</p><h3>案例解析</h3><p>我们可以从源码中找到真相。首先来设置个断点，调试看看this对应的对象是什么样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/5f/e0f4b047228fac437d57f56dcd18185f.png?wh=700*332\" alt=\"\"></p><p>可以看到，this对应的就是一个普通的ElectricService对象，并没有什么特别的地方。再看看在Controller层中自动装配的ElectricService对象是什么样：</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/f9/b24f00b4b96c46983295da05180174f9.png?wh=1112*258\" alt=\"\"></p><p>可以看到，这是一个被Spring增强过的Bean，所以执行charge()方法时，会执行记录接口调用时间的增强操作。而this对应的对象只是一个普通的对象，并没有做任何额外的增强。</p><p>为什么this引用的对象只是一个普通对象呢？这还要从Spring AOP增强对象的过程来看。但在此之前，有些基础我需要在这里强调下。</p><p><strong>1.  Spring AOP的实现</strong></p><p>Spring AOP的底层是动态代理。而创建代理的方式有两种，<strong>JDK的方式和CGLIB的方式</strong>。JDK动态代理只能对实现了接口的类生成代理，而不能针对普通类。而CGLIB是可以针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，来实现代理对象。具体区别可参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/99/a1/99c74d82d811ec567b28a24ccd6e85a1.png?wh=1191*573\" alt=\"\"></p><p><strong>2.  如何使用Spring AOP</strong></p><p>在Spring Boot中，我们一般只要添加以下依赖就可以直接使用AOP功能：</p><blockquote>\n<p>&lt;dependency&gt;<br>\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\n&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;<br>\n&lt;/dependency&gt;</p>\n</blockquote><p>而对于非Spring Boot程序，除了添加相关AOP依赖项外，我们还常常会使用@EnableAspectJAutoProxy来开启AOP功能。这个注解类引入（Import）AspectJAutoProxyRegistrar，它通过实现ImportBeanDefinitionRegistrar的接口方法来完成AOP相关Bean的准备工作。</p><p>补充完最基本的Spring底层知识和使用知识后，我们具体看下创建代理对象的过程。先来看下调用栈：</p><p><img src=\"https://static001.geekbang.org/resource/image/1f/2a/1fb3735e51a8e06833f065a175517c2a.png?wh=1565*570\" alt=\"\"></p><p>创建代理对象的时机就是创建一个Bean的时候，而创建的的关键工作其实是由AnnotationAwareAspectJAutoProxyCreator完成的。它本质上是一种BeanPostProcessor。所以它的执行是在完成原始Bean构建后的初始化Bean（initializeBean）过程中。而它到底完成了什么工作呢？我们可以看下它的postProcessAfterInitialization方法：</p><pre><code>public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {\n   if (bean != null) {\n      Object cacheKey = getCacheKey(bean.getClass(), beanName);\n      if (this.earlyProxyReferences.remove(cacheKey) != bean) {\n         return wrapIfNecessary(bean, beanName, cacheKey);\n      }\n   }\n   return bean;\n}\n</code></pre><p>上述代码中的关键方法是wrapIfNecessary，顾名思义，<strong>在需要使用AOP时，它会把创建的原始的Bean对象wrap成代理对象作为Bean返回</strong>。具体到这个wrap过程，可参考下面的关键代码行：</p><pre><code>protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {\n   // 省略非关键代码\n   Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);\n   if (specificInterceptors != DO_NOT_PROXY) {\n      this.advisedBeans.put(cacheKey, Boolean.TRUE);\n      Object proxy = createProxy(\n            bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));\n      this.proxyTypes.put(cacheKey, proxy.getClass());\n      return proxy;\n   }\n   // 省略非关键代码 \n}\n\n</code></pre><p>上述代码中，第6行的createProxy调用是创建代理对象的关键。具体到执行过程，它首先会创建一个代理工厂，然后将通知器（advisors）、被代理对象等信息加入到代理工厂，最后通过这个代理工厂来获取代理对象。一些关键过程参考下面的方法：</p><pre><code>protected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName,\n      @Nullable Object[] specificInterceptors, TargetSource targetSource) {\n  // 省略非关键代码\n  ProxyFactory proxyFactory = new ProxyFactory();\n  if (!proxyFactory.isProxyTargetClass()) {\n   if (shouldProxyTargetClass(beanClass, beanName)) {\n      proxyFactory.setProxyTargetClass(true);\n   }\n   else {\n      evaluateProxyInterfaces(beanClass, proxyFactory);\n   }\n  }\n  Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);\n  proxyFactory.addAdvisors(advisors);\n  proxyFactory.setTargetSource(targetSource);\n  customizeProxyFactory(proxyFactory);\n   // 省略非关键代码\n  return proxyFactory.getProxy(getProxyClassLoader());\n}\n</code></pre><p>经过这样一个过程，一个代理对象就被创建出来了。我们从Spring中获取到的对象都是这个代理对象，所以具有AOP功能。而之前直接使用this引用到的只是一个普通对象，自然也就没办法实现AOP的功能了。</p><h3>问题修正</h3><p>从上述案例解析中，我们知道，<strong>只有引用的是被动态代理创建出来的对象，才会被Spring增强，具备AOP该有的功能</strong>。那什么样的对象具备这样的条件呢？</p><p>有两种。一种是被@Autowired注解的，于是我们的代码可以改成这样，即通过@Autowired的方式，在类的内部，自己引用自己：</p><pre><code>@Service\npublic class ElectricService {\n    @Autowired\n    ElectricService electricService;\n    public void charge() throws Exception {\n        System.out.println(&quot;Electric charging ...&quot;);\n        //this.pay();\n        electricService.pay();\n    }\n    public void pay() throws Exception {\n        System.out.println(&quot;Pay with alipay ...&quot;);\n        Thread.sleep(1000);\n    }\n}\n</code></pre><p>另一种方法就是直接从AopContext获取当前的Proxy。那你可能会问了，AopContext是什么？简单说，它的核心就是通过一个ThreadLocal来将Proxy和线程绑定起来，这样就可以随时拿出当前线程绑定的Proxy。</p><p>不过使用这种方法有个小前提，就是需要在@EnableAspectJAutoProxy里加一个配置项exposeProxy = true，表示将代理对象放入到ThreadLocal，这样才可以直接通过 AopContext.currentProxy()的方式获取到，否则会报错如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/98/0e42f3129e1c098b0f860f1f7f2e6298.png?wh=1489*563\" alt=\"\"></p><p>按这个思路，我们修改下相关代码：</p><pre><code>import org.springframework.aop.framework.AopContext;\nimport org.springframework.stereotype.Service;\n@Service\npublic class ElectricService {\n    public void charge() throws Exception {\n        System.out.println(&quot;Electric charging ...&quot;);\n        ElectricService electric = ((ElectricService) AopContext.currentProxy());\n        electric.pay();\n    }\n    public void pay() throws Exception {\n        System.out.println(&quot;Pay with alipay ...&quot;);\n        Thread.sleep(1000);\n    }\n}\n</code></pre><p>同时，不要忘记修改EnableAspectJAutoProxy注解的exposeProxy属性，示例如下：</p><pre><code>@SpringBootApplication\n@EnableAspectJAutoProxy(exposeProxy = true)\npublic class Application {\n    // 省略非关键代码\n}\n</code></pre><p>这两种方法的效果其实是一样的，最终我们打印出了期待的日志，到这，问题顺利解决了。</p><pre><code>Electric charging ...\nPay with alipay ...\nPay method time cost(ms): 1005\n</code></pre><h2>案例2：直接访问被拦截类的属性抛空指针异常</h2><p>接上一个案例，在宿舍管理系统中，我们使用了charge()方法进行支付。在统一结算的时候我们会用到一个管理员用户付款编号，这时候就用到了几个新的类。</p><p>User类，包含用户的付款编号信息：</p><pre><code>public class User {\n    private String payNum;\n    public User(String payNum) {\n        this.payNum = payNum;\n    }\n    public String getPayNum() {\n        return payNum;\n    }\n    public void setPayNum(String payNum) {\n        this.payNum = payNum;\n    }\n}\n</code></pre><p>AdminUserService类，包含一个管理员用户（User），其付款编号为202101166；另外，这个服务类有一个login()方法，用来登录系统。</p><pre><code>@Service\npublic class AdminUserService {\n    public final User adminUser = new User(&quot;202101166&quot;);\n    \n    public void login() {\n        System.out.println(&quot;admin user login...&quot;);\n    }\n}\n</code></pre><p>我们需要修改ElectricService类实现这个需求：在电费充值时，需要管理员登录并使用其编号进行结算。完整代码如下：</p><pre><code>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class ElectricService {\n    @Autowired\n    private AdminUserService adminUserService;\n    public void charge() throws Exception {\n        System.out.println(&quot;Electric charging ...&quot;);\n        this.pay();\n    }\n\n    public void pay() throws Exception {\n        adminUserService.login();\n        String payNum = adminUserService.adminUser.getPayNum();\n        System.out.println(&quot;User pay num : &quot; + payNum);\n        System.out.println(&quot;Pay with alipay ...&quot;);\n        Thread.sleep(1000);\n    }\n}\n</code></pre><p>代码完成后，执行charge()操作，一切正常：</p><pre><code>Electric charging ...\nadmin user login...\nUser pay num : 202101166\nPay with alipay ...\n</code></pre><p>这时候，由于安全需要，就需要管理员在登录时，记录一行日志以便于以后审计管理员操作。所以我们添加一个AOP相关配置类，具体如下：</p><pre><code>@Aspect\n@Service\n@Slf4j\npublic class AopConfig {\n    @Before(&quot;execution(* com.spring.puzzle.class5.example2.AdminUserService.login(..)) &quot;)\n    public void logAdminLogin(JoinPoint pjp) throws Throwable {\n        System.out.println(&quot;! admin login ...&quot;);\n    }\n}\n</code></pre><p>添加这段代码后，我们执行charge()操作，发现不仅没有相关日志，而且在执行下面这一行代码的时候直接抛出了NullPointerException：</p><blockquote>\n<p>String payNum = dminUserService.user.getPayNum();</p>\n</blockquote><p>本来一切正常的代码，因为引入了一个AOP切面，抛出了NullPointerException。这会是什么原因呢？我们先debug一下，来看看加入AOP后调用的对象是什么样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/a2/cd48479a45c2b06621c2e07a33f519a2.png?wh=917*419\" alt=\"\"></p><p>可以看出，加入AOP后，我们的对象已经是一个代理对象了，如果你眼尖的话，就会发现在上图中，属性adminUser确实为null。为什么会这样？为了解答这个诡异的问题，我们需要进一步理解Spring使用CGLIB生成Proxy的原理。</p><h3>案例解析</h3><p>我们在上一个案例中解析了创建Spring Proxy的大体过程，在这里，我们需要进一步研究一下通过Proxy创建出来的是一个什么样的对象。正常情况下，AdminUserService只是一个普通的对象，而AOP增强过的则是一个AdminUserService <span dollar=\"\">$</span>$EnhancerBySpringCGLIB<span dollar=\"\">$</span>$xxxx。</p><p>这个类实际上是AdminUserService的一个子类。它会overwrite所有public和protected方法，并在内部将调用委托给原始的AdminUserService实例。</p><p>从具体实现角度看，CGLIB中AOP的实现是基于org.springframework.cglib.proxy包中  Enhancer和MethodInterceptor两个接口来实现的。</p><p><strong>整个过程，我们可以概括为三个步骤：</strong></p><ul>\n<li>定义自定义的MethodInterceptor负责委托方法执行；</li>\n<li>创建Enhance并设置Callback为上述MethodInterceptor；</li>\n<li>enhancer.create()创建代理。</li>\n</ul><p>接下来，我们来具体分析一下Spring的相关实现源码。</p><p>在上个案例分析里，我们简要提及了Spring的动态代理对象的初始化机制。在得到Advisors之后，会通过ProxyFactory.getProxy获取代理对象：</p><pre><code>public Object getProxy(ClassLoader classLoader) {\n\treturn createAopProxy().getProxy(classLoader);\n}\n</code></pre><p>在这里，我们以CGLIB的Proxy的实现类CglibAopProxy为例，来看看具体的流程：</p><pre><code>public Object getProxy(@Nullable ClassLoader classLoader) {\n    // 省略非关键代码\n    // 创建及配置 Enhancer\n    Enhancer enhancer = createEnhancer();\n    // 省略非关键代码\n    // 获取Callback：包含DynamicAdvisedInterceptor，亦是MethodInterceptor\n    Callback[] callbacks = getCallbacks(rootClass);\n    // 省略非关键代码\n    // 生成代理对象并创建代理（设置 enhancer 的 callback 值）\n    return createProxyClassAndInstance(enhancer, callbacks);\n    // 省略非关键代码\n}\n</code></pre><p>上述代码中的几个关键步骤大体符合之前提及的三个步骤，其中最后一步一般都会执行到CglibAopProxy子类ObjenesisCglibAopProxy的createProxyClassAndInstance()方法：</p><pre><code>protected Object createProxyClassAndInstance(Enhancer enhancer, Callback[] callbacks) {\n   //创建代理类Class\n   Class&lt;?&gt; proxyClass = enhancer.createClass();\n   Object proxyInstance = null;\n   //spring.objenesis.ignore默认为false\n   //所以objenesis.isWorthTrying()一般为true\n   if (objenesis.isWorthTrying()) {\n      try {\n         // 创建实例\n         proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());\n      }\n      catch (Throwable ex) {\n          // 省略非关键代码\n      }\n   }\n       \n    if (proxyInstance == null) {\n       // 尝试普通反射方式创建实例\n       try {\n          Constructor&lt;?&gt; ctor = (this.constructorArgs != null ?\n                proxyClass.getDeclaredConstructor(this.constructorArgTypes) :\n                proxyClass.getDeclaredConstructor());\n          ReflectionUtils.makeAccessible(ctor);\n          proxyInstance = (this.constructorArgs != null ?\n                ctor.newInstance(this.constructorArgs) : ctor.newInstance());\n      //省略非关键代码\n       }\n    }\n   // 省略非关键代码\n   ((Factory) proxyInstance).setCallbacks(callbacks);\n   return proxyInstance;\n}\n</code></pre><p>这里我们可以了解到，Spring会默认尝试使用objenesis方式实例化对象，如果失败则再次尝试使用常规方式实例化对象。现在，我们可以进一步查看objenesis方式实例化对象的流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/34/422160a6fd0c3ee1af8b05769a015834.png?wh=1027*397\" alt=\"\"></p><p>参照上述截图所示调用栈，objenesis方式最后使用了JDK的ReflectionFactory.newConstructorForSerialization()完成了代理对象的实例化。而如果你稍微研究下这个方法，你会惊讶地发现，这种方式创建出来的对象是不会初始化类成员变量的。</p><p>所以说到这里，聪明的你可能已经觉察到真相已经暴露了，我们这个案例的核心是代理类实例的默认构建方式很特别。在这里，我们可以总结和对比下通过反射来实例化对象的方式，包括：</p><ul>\n<li>java.lang.Class.newInsance()</li>\n<li>java.lang.reflect.Constructor.newInstance()</li>\n<li>sun.reflect.ReflectionFactory.newConstructorForSerialization().newInstance()</li>\n</ul><p>前两种初始化方式都会同时初始化类成员变量，但是最后一种通过ReflectionFactory.newConstructorForSerialization().newInstance()实例化类则不会初始化类成员变量，这就是当前问题的最终答案了。</p><h3>问题修正</h3><p>了解了问题的根本原因后，修正起来也就不困难了。既然是无法直接访问被拦截类的成员变量，那我们就换个方式，在UserService里写个getUser()方法，从内部访问获取变量。</p><p>我们在AdminUserService里加了个getUser()方法：</p><pre><code>public User getUser() {\n    return user;\n}\n</code></pre><p>在ElectricService里通过getUser()获取User对象：</p><blockquote>\n<p>//原来出错的方式：<br>\n//String payNum = = adminUserService.adminUser.getPayNum();<br>\n//修改后的方式：<br>\nString payNum = adminUserService.getAdminUser().getPayNum();</p>\n</blockquote><p>运行下来，一切正常，可以看到管理员登录日志了：</p><pre><code>Electric charging ...\n! admin login ...\nadmin user login...\nUser pay num : 202101166\nPay with alipay ...\n</code></pre><p>但你有没有产生另一个困惑呢？既然代理类的类属性不会被初始化，那为什么可以通过在AdminUserService里写个getUser()方法来获取代理类实例的属性呢？</p><p>我们再次回顾createProxyClassAndInstance的代码逻辑，创建代理类后，我们会调用setCallbacks来设置拦截后需要注入的代码：</p><pre><code>protected Object createProxyClassAndInstance(Enhancer enhancer, Callback[] callbacks) {\n   Class&lt;?&gt; proxyClass = enhancer.createClass();\n   Object proxyInstance = null;\n   if (objenesis.isWorthTrying()) {\n      try {\n         proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());\n      }\n   // 省略非关键代码\n   ((Factory) proxyInstance).setCallbacks(callbacks);\n   return proxyInstance;\n}\n</code></pre><p>通过代码调试和分析，我们可以得知上述的callbacks中会存在一种服务于AOP的DynamicAdvisedInterceptor，它的接口是MethodInterceptor（callback的子接口），实现了拦截方法intercept()。我们可以看下它是如何实现这个方法的：</p><pre><code>public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n   // 省略非关键代码\n    TargetSource targetSource = this.advised.getTargetSource();\n    // 省略非关键代码 \n      if (chain.isEmpty() &amp;&amp; Modifier.isPublic(method.getModifiers())) {\n         Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);\n         retVal = methodProxy.invoke(target, argsToUse);\n      }\n      else {\n         // We need to create a method invocation...\n         retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n      }\n      retVal = processReturnType(proxy, target, method, retVal);\n      return retVal;\n   }\n   //省略非关键代码\n}\n</code></pre><p>当代理类方法被调用，会被Spring拦截，从而进入此intercept()，并在此方法中获取被代理的原始对象。而在原始对象中，类属性是被实例化过且存在的。因此代理类是可以通过方法拦截获取被代理对象实例的属性。</p><p>说到这里，我们已经解决了问题。但如果你看得仔细，就会发现，其实你改变一个属性，也可以让产生的代理对象的属性值不为null。例如修改启动参数spring.objenesis.ignore如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/83/7e/83e34cbd460ac74c5d623905dce0497e.png?wh=933*185\" alt=\"\"></p><p>此时再调试程序，你会发现adminUser已经不为null了：</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/b1/3b2dd77392c3b439d0a182f5817045b1.png?wh=801*294\" alt=\"\"></p><p>所以这也是解决这个问题的一种方法，相信聪明的你已经能从前文贴出的代码中找出它能够工作起来的原理了。</p><h2>重点回顾</h2><p>通过以上两个案例的介绍，相信你对Spring AOP动态代理的初始化机制已经有了进一步的了解，这里总结重点如下：</p><ol>\n<li>\n<p>使用AOP，实际上就是让Spring自动为我们创建一个Proxy，使得调用者能无感知地调用指定方法。而Spring有助于我们在运行期里动态织入其它逻辑，因此，AOP本质上就是一个动态代理。</p>\n</li>\n<li>\n<p>我们只有访问这些代理对象的方法，才能获得AOP实现的功能，所以通过this引用是无法正确使用AOP功能的。在不能改变代码结果前提下，我们可以通过@Autowired、AopContext.currentProxy()等方式获取相应的代理对象来实现所需的功能。</p>\n</li>\n<li>\n<p>我们一般不能直接从代理类中去拿被代理类的属性，这是因为除非我们显示设置spring.objenesis.ignore为true，否则代理类的属性是不会被Spring初始化的，我们可以通过在被代理类中增加一个方法来间接获取其属性。</p>\n</li>\n</ol><h2>思考题</h2><p>第二个案例中，我们提到了通过反射来实例化类的三种方式：</p><ul>\n<li>java.lang.Class.newInsance()</li>\n<li>java.lang.reflect.Constructor.newInstance()</li>\n<li>sun.reflect.ReflectionFactory.newConstructorForSerialization().newInstance()</li>\n</ul><p>其中第三种方式不会初始化类属性，你能够写一个例子来证明这一点吗？</p><p>期待你的思考，我们留言区见！</p>","neighbors":{"left":{"article_title":"04｜Spring Bean 生命周期常见错误","id":367876},"right":{"article_title":"06｜Spring AOP 常见错误（下）","id":369989}},"comments":[{"had_liked":false,"id":327902,"user_name":"阿璐4r","can_delete":false,"product_type":"c1","uid":1504590,"ip_address":"","ucode":"AF711CD4B24236","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/4e/87f4faee.jpg","comment_is_top":false,"comment_ctime":1640348319,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61769890463","product_id":100077001,"comment_content":"我一点也不聪明","like_count":15,"discussions":[{"author":{"id":1331611,"avatar":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","nickname":"安迪密恩","note":"","ucode":"A6F3F67CF8E6F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555164,"discussion_content":"你找一下这个地方：\n\n//spring.objenesis.ignore默认为false   \n//所以objenesis.isWorthTrying()一般为true","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646790966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337371,"user_name":"安迪密恩","can_delete":false,"product_type":"c1","uid":1331611,"ip_address":"","ucode":"A6F3F67CF8E6F8","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","comment_is_top":false,"comment_ctime":1646793299,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23121629779","product_id":100077001,"comment_content":"hi 傅哥， 案例一的解决方案一，需要加@Lazy否则会出现循环依赖。<br>  @Lazy<br>  @Autowired private ElectricService electricService;","like_count":5,"discussions":[{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582707,"discussion_content":"spring允许字段注入的循环依赖，不过还是有一定影响，导致提前aop","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659603362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290771,"user_name":"Ball","can_delete":false,"product_type":"c1","uid":1521451,"ip_address":"","ucode":"1EE949E68D84CA","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/2b/b32f1d66.jpg","comment_is_top":false,"comment_ctime":1619747804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18799616988","product_id":100077001,"comment_content":"🤔总结一下，今天以两个 AOP 场景下的问题为线索，深入 Spring 源码探讨了 Spring 的动态代理机制，还分享了 AOP 场景下问题的 debug 技巧。结合问题定位的过程，最终给出了问题的多种解决方案。👍","like_count":4},{"had_liked":false,"id":298391,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1624074496,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14508976384","product_id":100077001,"comment_content":"案例2：user的命名一会user一会adminUser，不统一啊","like_count":3,"discussions":[{"author":{"id":1331611,"avatar":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","nickname":"安迪密恩","note":"","ucode":"A6F3F67CF8E6F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555173,"discussion_content":"没毛病，adminUser 是 User 的子类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646794570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291724,"user_name":"子房","can_delete":false,"product_type":"c1","uid":1438860,"ip_address":"","ucode":"CB05938C248BB3","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","comment_is_top":false,"comment_ctime":1620450511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14505352399","product_id":100077001,"comment_content":"本质原因是 bean 初始化后被创建为代理 bean ，只有访问代理对象 方法才会被拦截","like_count":4},{"had_liked":false,"id":348188,"user_name":"Geek_930ce1","can_delete":false,"product_type":"c1","uid":2979489,"ip_address":"","ucode":"A0530EF5CAB3A5","user_header":"","comment_is_top":false,"comment_ctime":1654831210,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5949798506","product_id":100077001,"comment_content":"ReflectionFactory reflectionFactory = ReflectionFactory.getReflectionFactory();<br>        Constructor&lt;AdminUserService&gt; constructor1  = AdminUserService.class.getConstructor();<br>        Constructor constructor2 = reflectionFactory.newConstructorForSerialization(AdminUserService.class,constructor1);<br>        AdminUserService adminUserService3 = (AdminUserService)constructor2.newInstance();<br>        System.out.println(&quot;sun.reflect.ReflectionFactory.newConstructorForSerialization().newInstance()&quot;+adminUserService3);<br>经过尝试，还是存在成员变量，是为什么","like_count":1,"discussions":[{"author":{"id":2118988,"avatar":"https://static001.geekbang.org/account/avatar/00/20/55/4c/a3b696fd.jpg","nickname":"饮水偲源","note":"","ucode":"1E6DC35E3509D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586162,"discussion_content":"reflectionFactory.newConstructorForSerialization(AdminUserService.class,constructor1);\n实际使用的另外个api，不含构造器的reflectionFactory.newConstructorForSerialization(AdminUserService.class）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662014492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582717,"discussion_content":"AdminUserService 需要实现 Serializable","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659604070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356151,"user_name":"饮水偲源","can_delete":false,"product_type":"c1","uid":2118988,"ip_address":"北京","ucode":"1E6DC35E3509D3","user_header":"https://static001.geekbang.org/account/avatar/00/20/55/4c/a3b696fd.jpg","comment_is_top":false,"comment_ctime":1662014388,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662014388","product_id":100077001,"comment_content":"第3种构造方式，成员属性不会初始化的代码<br>       <br> ReflectionFactory reflectionFactory = ReflectionFactory.getReflectionFactory();<br>        Constructor constructor = reflectionFactory.newConstructorForSerialization(AdminUserService.class);<br>        AdminUserService adminUserService = (AdminUserService) constructor.newInstance();<br>        System.out.println(adminUserService.adminUser.payNum);<br><br>但是<br>reflectionFactory.newConstructorForSerialization这个方法还有种入参，传入指定构造方法时，其可以完成成员属性初始化。<br>Constructor&lt;?&gt; newConstructorForSerialization(Class&lt;?&gt; var1, Constructor&lt;?&gt; var2)","like_count":0},{"had_liked":false,"id":351425,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1657781447,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657781447","product_id":100077001,"comment_content":"        Constructor&lt;Object&gt; constructor = Object.class.getDeclaredConstructor();<br>        Constructor&lt;?&gt; constructor1 = ReflectionFactory.getReflectionFactory()<br>                .newConstructorForSerialization(Person.class, constructor);<br><br>        constructor1.s        Constructor&lt;Object&gt; constructor = Object.class.getDeclaredConstructor();<br>        Constructor&lt;?&gt; constructor1 = ReflectionFactory.getReflectionFactory()<br>                .newConstructorForSerialization(Person.class, constructor);<br><br>        constructor1.setAccessible(true);<br>        Person personByReflection = (Person) constructor1.newInstance();<br>        <br>        System.out.println(personByReflection);etAccessible(true);<br>        Person personByReflection = (Person) constructor1.newInstance();<br>        <br>        System.out.println(personByReflection);","like_count":0},{"had_liked":false,"id":351424,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1657781427,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657781427","product_id":100077001,"comment_content":"        Constructor&lt;Object&gt; constructor = Object.class.getDeclaredConstructor();<br>        Constructor&lt;?&gt; constructor1 = ReflectionFactory.getReflectionFactory()<br>                .newConstructorForSerialization(Person.class, constructor);<br><br>        constructor1.setAccessible(true);<br>        Person personByReflection = (        Constructor&lt;Object&gt; constructor = Object.class.getDeclaredConstructor();<br>        Constructor&lt;?&gt; constructor1 = ReflectionFactory.getReflectionFactory()<br>                .newConstructorForSerialization(Person.class, constructor);<br><br>        constructor1.setAccessible(true);<br>        Person personByReflection = (Person) constructor1.newInstance();<br>                Constructor&lt;Object&gt; constructor = Object.class.getDeclaredConstructor();<br>        Constructor&lt;?&gt; constructor1 = ReflectionFactory.getReflectionFactory()<br>                .newConstructorForSerialization(Person.class, constructor);<br><br>        constructor1.setAccessible(true);<br>        Person personByReflection = (Person) constructor1.newInstance();<br>        11111<br>        System.out.println(personByReflectio11n);<br>        System.out.println(personByReflection);) constructor1.newInstance();<br>        <br>        System.out.println(personByReflection);","like_count":0},{"had_liked":false,"id":347315,"user_name":"Bumblebee","can_delete":false,"product_type":"c1","uid":2051293,"ip_address":"","ucode":"B879C8A511D08D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","comment_is_top":false,"comment_ctime":1653918328,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653918328","product_id":100077001,"comment_content":"今日收获（总结的不对的希望老师同学们多多指正）<br><br>① JDK 动态代理只能对实现了接口的类生成代理，而不能针对普通类。而 CGLIB 是可以针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，来实现代理对象。<br><br>② this调用的当前类方法无法被拦截（可以通过@Autowired、AopContext.currentProxy() 方式解决）；<br><br>③ 我们一般不能直接从代理类中去拿被代理类的属性，这是因为除非我们显示设置 spring.objenesis.ignore 为 true，否则代理类的属性是不会被 Spring 初始化的，我们可以通过在被代理类中增加一个方法来间接获取其属性。<br><br><br>总结：我觉得SpringAop生成的代理类是对被代理类的一个包装，代理类对象仅被代理对象方法执行前后进行增强，原始方法的调用还是由被代理对象自己执行；","like_count":0},{"had_liked":false,"id":345584,"user_name":"懵逼猴","can_delete":false,"product_type":"c1","uid":1204947,"ip_address":"","ucode":"BDC748A96AC316","user_header":"https://static001.geekbang.org/account/avatar/00/12/62/d3/663de972.jpg","comment_is_top":false,"comment_ctime":1652413235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652413235","product_id":100077001,"comment_content":"@@Lookup 也可以实现案例一","like_count":0},{"had_liked":false,"id":338889,"user_name":"jerry guo","can_delete":false,"product_type":"c1","uid":1267753,"ip_address":"","ucode":"179943AFCB93F8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo2GMhevabZrjINs2TKvIeGC7TJkicNlLvqTticuM5KL8ZN80OC2CnrsUyzPcZXO4uptj4Q1S4jT2lQ/132","comment_is_top":false,"comment_ctime":1647775980,"is_pvip":true,"replies":[{"id":"123900","content":"同学具体哪里没看懂，可否具体？方便小编迭代。","user_name":"编辑回复","user_name_real":"编辑","uid":"1356014","ctime":1647858481,"ip_address":"","comment_id":338889,"utype":2}],"discussion_count":2,"race_medal":0,"score":"1647775980","product_id":100077001,"comment_content":"这篇太难了 没看懂","like_count":0,"discussions":[{"author":{"id":1356014,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/ee/d0871efd.jpg","nickname":"冬青","note":"","ucode":"14576781B499FB","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557548,"discussion_content":"同学具体哪里没看懂，可否具体？方便小编迭代。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647858482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582708,"discussion_content":"有钱真好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659603452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337366,"user_name":"安迪密恩","can_delete":false,"product_type":"c1","uid":1331611,"ip_address":"","ucode":"A6F3F67CF8E6F8","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","comment_is_top":false,"comment_ctime":1646791588,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1646791588","product_id":100077001,"comment_content":"hi 傅哥， 那是不是说 private 方法无法被AOP 增强？","like_count":0,"discussions":[{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582710,"discussion_content":"应该是因为private方法无法被继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659603483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335429,"user_name":"开卷","can_delete":false,"product_type":"c1","uid":2754166,"ip_address":"","ucode":"21A9D6CE85EF58","user_header":"https://static001.geekbang.org/account/avatar/00/2a/06/76/c2d807bf.jpg","comment_is_top":false,"comment_ctime":1645516327,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1645516327","product_id":100077001,"comment_content":"案例一里，自己引用自己，我报了循环依赖的错误","like_count":0,"discussions":[{"author":{"id":1331611,"avatar":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","nickname":"安迪密恩","note":"","ucode":"A6F3F67CF8E6F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555168,"discussion_content":"在@Autowired 上面加@Lazy","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646793207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323262,"user_name":"豆泥丸","can_delete":false,"product_type":"c1","uid":1186828,"ip_address":"","ucode":"D1638AFD21A224","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/0c/b5b2cd51.jpg","comment_is_top":false,"comment_ctime":1637806429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637806429","product_id":100077001,"comment_content":"案例二，成员变量我如果不声明成final，是不是就可以继承到了啊","like_count":0},{"had_liked":false,"id":319570,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1635852872,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635852872","product_id":100077001,"comment_content":"String payNum = dminUserService.user.getPayNum(); 有两个拼写错误，dminUserService 不对，应该是adminUserService，adminUserService里属性名是adminUser,不是user","like_count":0},{"had_liked":false,"id":304243,"user_name":"Geek_5aec96","can_delete":false,"product_type":"c1","uid":2591874,"ip_address":"","ucode":"45345D53041E42","user_header":"","comment_is_top":false,"comment_ctime":1627302705,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627302705","product_id":100077001,"comment_content":"老师 你好 this为什么不是代理对象？","like_count":0,"discussions":[{"author":{"id":1079495,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","nickname":"新世界","note":"","ucode":"4473DC1505F158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394307,"discussion_content":"因为调用真正被代理的方法，是通过原始对象调用的，而不是代理对象，所以在被代理方法的内部用this，就是被代理对象，代理对象只是重写了被代理对象方法，当真正调用被代理对象方法时，需要原对象的，你可以实现MethodInterceptor，调试一下真正的方法执行，就明白了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1631838895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298915,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1624372119,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1624372119","product_id":100077001,"comment_content":"案例2如果getUser()也被AOP拦截的话，ElectricService中调用adminUserService.getUser()还是会报NPE。我理解AdminUserService的代理类的getUser()方法会调用AdminUserService.getUser()应该会返回非空对象才对啊","like_count":0,"discussions":[{"author":{"id":1079495,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","nickname":"新世界","note":"","ucode":"4473DC1505F158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394308,"discussion_content":"如果getUser被拦截，那么调用get User的依然是代理对象，和原问题一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631839009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291976,"user_name":"TANMIYOO","can_delete":false,"product_type":"c1","uid":1375256,"ip_address":"","ucode":"BC3556131D4D61","user_header":"https://static001.geekbang.org/account/avatar/00/14/fc/18/8e69f7cf.jpg","comment_is_top":false,"comment_ctime":1620633607,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620633607","product_id":100077001,"comment_content":"老师我有个问题注解@EnableAspectJAutoProxy的属性proxyTargetClass默认是false，ElectricService并没有实现接口，为什么还可以创建动态代理对象？","like_count":0,"discussions":[{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582713,"discussion_content":"如果为true，一定是cglib，如果为false，spring会看有没有接口，没有就还是cglib","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659603588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290836,"user_name":"哦吼掉了","can_delete":false,"product_type":"c1","uid":1232599,"ip_address":"","ucode":"1F89B1BA1EEF52","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/d7/8168e1bf.jpg","comment_is_top":false,"comment_ctime":1619774923,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1619774923","product_id":100077001,"comment_content":"System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, &quot;.&#47;cglib&quot;); &#47;&#47;代理类持久化到文件<br>思考题：<br>AdminUserServiceSon继承AdminUserService，看起来父类都没有加载。但是为啥还是希望老师解答下<br>        SunReflectionFactoryInstantiator instantiator = new SunReflectionFactoryInstantiator(AdminUserServiceSon.class);<br>        System.out.println(instantiator.newInstance());<br><br>        Constructor&lt;AdminUserServiceSon&gt; constructor = AdminUserServiceSon.class.getConstructor(null);<br>        System.out.println(constructor.newInstance().adminUser);<br><br>        AdminUserServiceSon adminUserServiceSon = AdminUserServiceSon.class.newInstance();<br>        System.out.println(adminUserServiceSon.adminUser);","like_count":0}]}