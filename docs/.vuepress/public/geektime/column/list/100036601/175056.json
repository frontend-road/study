{"id":175056,"title":"23 | 持续交付平台：现代流水线必备的十大特征（上）","content":"<p>你好，我是石雪峰。</p><p>作为DevOps工程实践的集大成者和软件交付的“理想国”，持续交付对企业的DevOps落地起到了举足轻重的作用。我接触过的企业全都在建设自己的流水线平台，由此可见，<strong>流水线是持续交付中最核心的实践，也是持续交付实践最直接的体现</strong>。</p><p>那么，如何建设一个现代流水线平台呢？这个平台，应该具备哪些特性呢？</p><p>根据我自己在企业内部建设落地流水线平台的经验，以及业界各家公司的平台设计理念，我提取、总结了现代流水线设计的十大特性。</p><p>在接下来的两讲中，我会结合平台设计，给你逐一拆解这些特性背后的理念，以及如何把这些理念落地在平台设计中。我把这十个特性汇总在了下面的这张图片里。今天，我先给你介绍下前五个特性。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/b0/dd73fb488bc5fb93e0148107e1e470b0.png?wh=2605*2605\" alt=\"\"></p><h2>特性一：打造平台而非能力中心</h2><p>与其他DevOps平台相比，流水线平台有一个非常典型的特征，那就是，<strong>它是唯一一个贯穿软件交付端到端完整流程的平台</strong>。正因为这样，流水线平台承载了整个软件交付过程方方面面的能力，比如，持续集成能力、自动化测试能力、部署发布能力，甚至是人工审批的能力等。</p><p>那么，我们把软件交付过程中所需要的能力都直接做到流水线平台上，是不是就可以了呢？</p><p>这个想法是好的，但是在企业中，这并不具备可操作性。因为软件交付的每一个环节都是一项非常专业的工作，比如，仅仅是自动化测试能力这一项做好，就需要一个具备专业技能的团队的长期投入。</p><!-- [[[read_end]]] --><p>而且，把所有能力都做到流水线平台中，会使平台变得非常臃肿。再说了，我们也很难组建一个这么大的团队，来实现这个想法。</p><p>另外，企业的DevOps平台建设并不是一两天的事情。每家企业内部都有很多固有平台，这些平台长期存在，已经成为了团队软件交付日常操作的一部分。如果全部推倒重来，不仅会打破团队的习惯，影响短期效率，还会带来重复建设的巨大成本，这并不利于流水线平台的快速落地。</p><p>那么，既然这条路走不通，流水线平台如何定位才比较合理呢？我认为，<strong>正确的做法是，将持续交付流水线平台和垂直业务平台分开，并定义彼此的边界</strong>。</p><p>所谓的垂直业务平台，就是指<strong>单一专业领域的能力平台</strong>，比如自动化测试平台、代码质量平台、运维发布平台等等，这些也是软件交付团队日常打交道最频繁的平台。</p><p>流水线平台只专注于<strong>流程编排、过程可视化，并提供底层可复用的基础能力</strong>。比如，像是运行资源池、用户权限管控、任务编排调度流程等等。</p><p>垂直业务平台则专注于<strong>专业能力的建设、一些核心业务的逻辑处理、局部环节的精细化数据管理等</strong>。垂直业务平台可以独立对外服务，也可以以插件的形式，将平台能力提供给流水线平台。</p><p>这样一来，我们就可以<strong>快速复用现有的能力，做到最小成本的建设</strong>。随着能力的不断扩展，流水线平台支持的交付流程也会变得非常灵活。</p><p>借用《持续交付2.0》中的一句话来说，<strong>流水线平台仅作为任务的调度者、执行者和记录者，并不需要侵入垂直业务平台内部</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/fd/c9f4c396592a37694fbbe05e354ea7fd.png?wh=1140*590\" alt=\"\"></p><p>这样设计的好处很明显。</p><p>从流水线平台的角度来看，通过集成和复用现有的垂直业务能力，可以快速拓展能力图谱，满足不同用户的需求。</p><p>从垂直业务平台的角度来看，它们可以持续向技术纵深方向发展，把每一块的能力都做精、做透，这有助于企业积累核心竞争力。另外，流水线可以将更多用户导流到平台中，让垂直业务平台接触更多的用户使用场景。</p><p>不仅如此，在执行过程中，流水线携带了大量的软件开发过程信息，比如本次任务包含哪些需求，有哪些变更，这些信息可以在第一时间通知垂直业务平台。垂直业务平台拿到这些过程信息之后，可以通过精准测试等手段，大大提升运行效率。这里的核心就是<strong>构建一个企业内部DevOps平台的良好生态</strong>。</p><p>业界很多知名的软件设计都体现了这个思路。比如，Jenkins的插件中心、GitHub的Marketplace。它们背后的理念，都是基于平台，建立一种生态。</p><p>我之所以把这个特性放在第一个来介绍，就是因为，<strong>这直接决定了流水线平台的定位和后续的设计理念</strong>。关于具体怎么设计平台实现能力的快速接入，我会在第八个特性中进行深入介绍。</p><h2>特性二：可编排和可视化</h2><p>在现代软件开发中，多种技术栈并存，渐渐成为了一种常态。</p><p>举个最简单的例子，对于一个前后端分离的项目来说，前端技术栈和后端技术栈显然是不一样的；对于微服务风格的软件架构来说，每个模块都应该具备持续交付的能力。</p><p>所以，传统的标准化软件构建发布路径已经很难满足多样化开发模式的需要了。这样看来，流水线平台作为软件交付的过程载体，流程可编排的能力就变得必不可少了。</p><p><strong>所谓的流程可编排能力，就是指用户可以自行定义软件交付过程的每一个步骤，以及各个步骤之间的先后执行顺序</strong>。说白了，就是“我的模块我做主，我需要增加哪些交付环节，我自己说了算”。</p><p>但是，很多现有的“流水线”平台采用的还是几个“写死”的固定阶段，比如构建、测试、发布，以至于即便有些技术栈不需要进行编译，也不能跳过这个环节。</p><p>我之前就见过一家企业，他们把生成版本标签的动作放在了上线检查阶段。我问了之后才知道，这个步骤没有地方可以放了，只能被临时扔在这里。你看，这样一来，整个交付过程看起来的样子和实际的样子可能并不一样，这显然不是可视化所期待的结果。</p><p>流程可编排，需要平台前端提供一个可视化的界面，来方便用户定义流水线过程。典型的方式就是，<strong>将流水线过程定义为几个阶段，每个阶段按顺序执行。在每个阶段，可以按需添加步骤，这些步骤可以并行执行，也可以串行执行</strong>。</p><p>前端将编排结果以一种标准化的格式进行保存（一般都是以JSON的形式），传递给后端处理。后端流程引擎需要对用户编排的内容进行翻译处理，并传递给执行器，来解释运行即可。</p><p>你可以参考一下下面这张流程编排的示意图。在实际运行的过程中，你可以点击每一个步骤，查看对应的运行结果、日志和状态信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/e1/765961df0fff0efd529cc5d1f70a62e1.png?wh=1268*514\" alt=\"\"></p><p>从表面上看，这主要是在考验平台前端的开发能力，但实际上，<strong>编排的前提是系统提供了可编排的对象，这个对象一般称为原子</strong>。</p><p>所谓原子，就是一个能完成一项具体的独立任务的组件。这些组件要具备一定的通用性，尽量与业务无关。</p><p>比如下载代码这个动作，无论是前端项目，还是后端项目，做的事情其实都差不多，<strong>核心要实现的就是通过几个参数，完成从版本控制系统拉取代码的动作</strong>。那么，这就很适合成为一项原子。</p><p><strong>原子的设计是流水线平台的精髓，因为原子体现了平台的通用性、可复用性和独立性</strong>。</p><p>以我们比较熟悉的Jenkins为例，一个原子就是流水线中的一个代码片段。通过封装特性，将实现隐藏在函数实现内部，对外暴露调用方法。用户只需要知道如何使用，不需要关心内部实现。</p><p>要想自己实现一个原子，其实并不复杂，在Jenkins中添加一段Groovy代码就行了。示例代码如下：</p><pre><code>// sample_atom_entrance.groovy\ndef Sample_Atom(Map map) {\n    new SampleAtom(this).callExecution(map)\n}\n\n\n// src/com/sample/atoms/SampleAtom.groovy\nclass SampleAtom extends AbstractAtom {\n\n\n    SampleAtom(steps) {\n        super(steps)\n    }\n\n\n    @Override\n    def execute() {\n        // Override execute function from AbstractAtom\n        useAtom()\n    }\n  \n    private def useAtom(){\n        steps.echo &quot;RUNNING SAMPLE ATOM FUNCTION...&quot;\n    }\n</code></pre><h2>特性三：流水线即代码</h2><p>这些年来，“什么什么即代码”的理念已经深入人心了。在应用配置领域，有 Configuration As Code，在服务器领域，有 Infrastructure As Code……流水线的设计与实现，同样需要做到 Pipeline As Code，也就是流水线即代码。</p><p>比如，Jenkins 2.0 中引入的 Jenkinsfile 就是一个典型的实现。另外，Gitlab中提供的GitlabCI，同样是通过一种代码化的方式和描述式的语言，来展示流水线的业务逻辑和运行方式。</p><p>流水线代码化的好处不言而喻：<strong>借助版本控制系统的强大功能，流水线代码和业务代码一样纳入版本控制系统，可以简单追溯每次流水线的变更记录</strong>。</p><p>在执行流水线的过程中，如果流水线配置发生了变化，同样需要体现在本次流水线的变更日志里面。甚至是，在版本的Release Notes中也增加流水线、环境的变更记录信息。一旦发生异常，这些信息会大大提升问题的定位速度。</p><p>当然，如果只是想要实现流水线变更追溯，你也可以采用其他方式。比如，将流水线配置存放在后台数据库中，并在每次流水线任务执行时，记录当时数据库中的版本信息。</p><p>实际上，流水线即代码的好处远不止于此。因为<strong>它大大地简化了流水线的配置成本，和原子一样，是构成现代流水线的另外一个支柱</strong>。</p><p>我跟你分享一个流水线即代码的示例。在这个例子中，你可以看到，整个软件交付流程，都以一种非常清晰的方式描述出来了。即便你不是流水线的专家，也能看懂和使用。</p><pre><code>image: maven:latest\n\n\nstages:\n  - build\n  - test\n  - run\n\n\nvariables:\n  MAVEN_CLI_OPTS: &quot;--batch-mode&quot;\n  GITLAB_BASE_URL: &quot;https://gitlab.com&quot;\n  DEP_PROJECT_ID: 8873767\n\n\nbuild:\n  stage: build\n  script:\n    - mvn $MAVEN_CLI_OPTS compile\n\n\ntest:\n  stage: test\n  script:\n    - mvn $MAVEN_CLI_OPTS test\n\n\nrun:\n  stage: run\n  script:\n    - mvn $MAVEN_CLI_OPTS package\n    - mvn $MAVEN_CLI_OPTS exec:java -Dexec.mainClass=&quot;com.example.app.A\n</code></pre><h2>特性四：流水线实例化</h2><p>作为软件交付流程的建模，流水线跟面向对象语言里面的类和实例非常相似。一个类可以初始化多个对象，每个对象都有自己的内存空间，可以独立存在，流水线也要具备这种能力。</p><p><strong>首先，流水线需要支持参数化执行</strong>。</p><p>通过输入不同的参数，控制流水线的运行结果，甚至是控制流水线的执行过程。</p><p>比如，一条流水线应该满足不同分支的构建需要，那么，这就需要将分支作为参数提取出来，在运行时，根据不同的需要，手动或者自动获取。</p><p>考虑到这种场景，在平台设计中，你可以事先约定一种参数的格式。这里定义的标准格式，就是<strong>以“#”开头，后面加上参数名称</strong>。通过在流水线模板中定义这样的参数，一个业务可以快速复用已有的流水线，不需要重新编排，只要修改运行参数即可。</p><p><strong>其次，流水线的每一次执行，都可以理解为是一个实例化的过程。</strong></p><p>每个实例基于执行时间点的流水线配置，生成一个快照，这个快照不会因为流水线配置的变更而变更。如果想要重新触发这次任务，就需要根据当时的快照运行，从而实现回溯历史的需求。</p><p><strong>最后，流水线需要支持并发执行能力。</strong></p><p>这就是说，流水线可以触发多次，生成多个运行实例。这考察的不仅是流水线的调度能力、队列能力，还有持久化数据的管理能力。</p><p>因为，每次执行都需要有独立的工作空间。为了加速流水线运行，需要在空间中完成静态数据的挂载，比如代码缓存、构建缓存等。有些流水线平台不支持并发，其实就是因为没有解决好这个问题。</p><h2>特性五：有限支持原则</h2><p>流水线的设计目标，应该是满足<strong>大多数、常见场景下的快速</strong>使用，并提供一定程度的定制化可扩展能力，而不是满足所有需求。</p><p>在设计流水线功能的时候，我们往往会陷入一个怪圈：我们想要去抽象一个通用的模型，满足所有的业务场景，但是我们会发现，业务总是有这样或者那样的特殊需求。这就像是拿着一张大网下水捞鱼，总是会有漏网之鱼，于是，网做得越来越大。对于平台来说，平台最后会变得非常复杂。</p><p>比如，拿最常见的安卓应用构建来说，目前绝大多数企业都在使用Gradle工具，通用命令其实只有两步：</p><pre><code>gradle clean\ngradle assemblerelease / gradle assembledebug\n</code></pre><p>但是，在实际的业务场景中，应用A用到了Node.js，需要安装npm；应用B用到了Git-lfs大文件，需要先执行安装指令；应用C更甚，需要根据选项，配置执行Patch模式和完整打包模式。</p><p>如果试图在一个框架中满足所有人的需求，就会让配置和逻辑变得非常复杂。无论是开发实现，还是用户使用，都会变得难以上手。</p><p>以Jenkins原生的Xcode编译步骤为例，这个步骤提供了53个参数选项，满足了绝大多数场景的需求，但是也陷入到了参数的汪洋大海中。</p><p>所以，<strong>流水线设计要提供有限的可能性，而非穷举所有变量因素</strong>。</p><p>在设计参数接口的时候，我们要遵循“奥卡姆剃刀法则”，也就是，“如无必要，勿增实体”。如果有用户希望给原子增加一个变量参数，那么，我们首先要想的是，这个需求是不是90%的人都会用到的功能。如果不是，就不要轻易放在原子设计中。</p><p>你可能会问，这样的话，用户的差异化诉求，该如何满足呢？其实，这很简单，你可以<strong>在平台中提供一些通用类原子能力</strong>，比如，执行自定义脚本的能力、调用http接口的能力、用户自定义原子的能力，等等。只要能提供这些能力，就可以满足用户的差异化需求了。</p><h2>总结</h2><p>在这一讲中，我给你介绍了现代流水线设计的前五大特性，分别是打造平台而非能力中心、可编排和可视化、流水线即代码、流水线实例化，以及有限支持原则。在下一讲中，我会继续介绍剩余的五大特性，敬请期待。</p><h2>思考题</h2><p>你所在的企业有在使用流水线吗？你觉得，流水线还有什么必不可少的特性吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起讨论，共同学习进步。如果你觉得这篇文章对你有所帮助，也欢迎你把文章分享给你的朋友。</p><p></p>","neighbors":{"left":{"article_title":"22 | 产品设计之道：DevOps产品设计的五个层次","id":174732},"right":{"article_title":"24 | 持续交付平台：现代流水线必备的十大特征（下）","id":176632}},"comments":[{"had_liked":false,"id":161591,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1576241030,"is_pvip":false,"replies":[{"id":"61596","content":"哈哈，欢迎来我们公司参观呀😄","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1576314359,"ip_address":"","comment_id":161591,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18756110214","product_id":100036601,"comment_content":"真想去哪个大公司看看他们的Jenkins是怎么用的…","like_count":5,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477775,"discussion_content":"哈哈，欢迎来我们公司参观呀😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576314359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160580,"user_name":"iiiqueena","can_delete":false,"product_type":"c1","uid":1247327,"ip_address":"","ucode":"5553B21A31836F","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/5f/b8dc0e5b.jpg","comment_is_top":false,"comment_ctime":1575979447,"is_pvip":false,"replies":[{"id":"61601","content":"呵呵，我们内部的平台也是叫做Bamboo，原来不是特别理解，后来才想明白，原来是指代竹子一节节的好像流水线一样哈。其实，我这里讲的很多内容都融入了我们自己的产品设计中，部分参考代码也是我们真实项目中的哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1576314896,"ip_address":"","comment_id":160580,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14460881335","product_id":100036601,"comment_content":"atlassian的Bamboo也做得挺好的","like_count":4,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477420,"discussion_content":"呵呵，我们内部的平台也是叫做Bamboo，原来不是特别理解，后来才想明白，原来是指代竹子一节节的好像流水线一样哈。其实，我这里讲的很多内容都融入了我们自己的产品设计中，部分参考代码也是我们真实项目中的哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576314896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163059,"user_name":"小谢同学","can_delete":false,"product_type":"c1","uid":1032544,"ip_address":"","ucode":"E809E6BC470631","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/60/fc3689d0.jpg","comment_is_top":false,"comment_ctime":1576649419,"is_pvip":false,"replies":[{"id":"62865","content":"我理解同质化是必然的，你没发现每个工具都试图把自己打造成一个端到端的平台吗？但是，就我的观察和企业中的交流来看，往往这种大而全的平台反而不容易落地，相反那些能解决一个点的问题，或者能够串联已有能力平台的方案则更加受欢迎。我觉得回答这个问题要看站在哪个视角，大公司视角和初创公司视角肯定是不一样的。如果是我来选择，除了你提到的功能和价格，更加关注的是可扩展性和连通性方面哈！","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1577146133,"ip_address":"","comment_id":163059,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166584011","product_id":100036601,"comment_content":"想问老师如果对于外部市场需求的devops产品发生了同质化效应，无论核心功能还是价格，这怎么办？拼服务？","like_count":2,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478232,"discussion_content":"我理解同质化是必然的，你没发现每个工具都试图把自己打造成一个端到端的平台吗？但是，就我的观察和企业中的交流来看，往往这种大而全的平台反而不容易落地，相反那些能解决一个点的问题，或者能够串联已有能力平台的方案则更加受欢迎。我觉得回答这个问题要看站在哪个视角，大公司视角和初创公司视角肯定是不一样的。如果是我来选择，除了你提到的功能和价格，更加关注的是可扩展性和连通性方面哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577146133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159548,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1575679734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870647030","product_id":100036601,"comment_content":"     流水线中嵌套流水线：DevOps其实只是大流水线中的一个小流水线。<br>      记得曾经在老师的课程中提及过DevOps是研发团队内部的ERP或进销存，只不过其关注的点不同而已。学到现在终于明白为何DevOps会被称为效率部门了，上次大会对DevOps定位有各种称呼了。<br>       谢谢老师的教诲，期待后续的分享。<br>      ","like_count":1},{"had_liked":false,"id":322137,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c1","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":false,"comment_ctime":1637203561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637203561","product_id":100036601,"comment_content":"关于有限支持原则这个点，我们其实也碰到了，但是如果不满足业务的所有需求，这玩意就是看来没有落地的，推动不起来，没产生效益；另外，我想请问下老师，对于一个规模不是很大的团队，例如5人做流水线这块的设计，请问用通过jenkins能做到这种流水线编排吗？","like_count":0},{"had_liked":false,"id":316848,"user_name":"快手阿修","can_delete":false,"product_type":"c1","uid":1381325,"ip_address":"","ucode":"D9E1B87B0EAA9A","user_header":"https://static001.geekbang.org/account/avatar/00/15/13/cd/a1429abe.jpg","comment_is_top":false,"comment_ctime":1634567955,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1634567955","product_id":100036601,"comment_content":"看完这一章，我有两个关于流水线局部的细节设计，想跟石老师一起探讨一下。这也是我认为，团队目前在使用的流水线中，两个容易引发问题的点。<br><br>在说具体的特性设计之前，先简单介绍下相关信息。目前我们使用的流水线，部署方式为shell 部署，包括停止服务、卸载老代码、安装新代码、启动服务4个操作步骤，分别由代码仓中4个shell 脚本控制步骤执行逻辑。(灰度切流相关操作与部署任务独立)<br><br>另外，每一条流水线会对应若干台部署机器，这些机器位于另外一个叫做CMDB 的微服务上管理，一条流水线对应CMDB 上一个组件，一个组件下管理着上面提到的若干台机器。一个组件可以对应若干条流水线。<br><br>接着，来说一下上面提到的我认为两个影响使用的特性设计。<br>1、停止服务、卸载老代码2个步骤，使用上一次部署包中的脚本，之后的步骤使用这一次部署包中的脚本。<br>2、流水线构建时打的包的名字，必须与CMDB 上对应的组件名一致。<br><br>上面的两个设计在日常工作中会带来两个问题(目前遇到的)。<br><br>第1个问题，如果你改动到了部署脚本中的前2个步骤，那么需要连续部署两次才能看到你的最新修改。假设某一次的改动，不小心把上述2个步骤改错了导致任务失败(当然部署脚本改动的频","like_count":1,"discussions":[{"author":{"id":2504378,"avatar":"https://static001.geekbang.org/account/avatar/00/26/36/ba/b177d176.jpg","nickname":"可观测性无声笛","note":"","ucode":"709CE03E7EFCC4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585545,"discussion_content":"石老师建学习群啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661674180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1381325,"avatar":"https://static001.geekbang.org/account/avatar/00/15/13/cd/a1429abe.jpg","nickname":"快手阿修","note":"","ucode":"D9E1B87B0EAA9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405456,"discussion_content":"(当然部署脚本改动的频率很低，通常只是在新环境搭建的时候)。那么从这之后的所有部署，都会失败，因为它会卡在那个失败的包。这个时候，只能通过跳过相关步骤，先让本次部署任务成功执行完(我不知道跳过这个功能，是不是特意为这种场景设计的)。\n\n第2个问题，构建包必须与CMDB 组件名一致，就导致我们给组件改名时很麻烦。因为你一旦改了组件名，流水线运行就会失败，会提醒你，部署包的名字必须与组件名一致。但是如果你把部署包的名字也改成跟组件名一致的话，部署任务又跑不起来了。因为上面提到过，部署任务的前2个步骤会去找上一次的包，而上一次的包的名字，是跟你修改之前的组件名对应的，你把包的名字改了，就匹配不上了。\n\n不知道我有没有把自己的问题描述清楚，也想问下石老师，你们所用的流水线这两个方面的设计是什么样子的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634568417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293191,"user_name":"JamonJou","can_delete":false,"product_type":"c1","uid":2589474,"ip_address":"","ucode":"C77E647E2FA7A7","user_header":"https://static001.geekbang.org/account/avatar/00/27/83/22/a44b65f5.jpg","comment_is_top":false,"comment_ctime":1621259488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621259488","product_id":100036601,"comment_content":"石老师 有pdf&#47;ppt版本吗？","like_count":0},{"had_liked":false,"id":249319,"user_name":"Geek_d4f2e7","can_delete":false,"product_type":"c1","uid":1922848,"ip_address":"","ucode":"2AB5EA1AE83630","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/oxgSvjSvdQUwhUNiagmd7rjJibdY5HXibTEb556mwLicTUgrZFsvibGicCkGoBWIGiaYlVozPiauNmPib4PneNt5CnRqJ5g/132","comment_is_top":false,"comment_ctime":1600590805,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1600590805","product_id":100036601,"comment_content":"老师，你好，我想请教哪些类型的应用系统可以使用devops流水线工具？哪些应用系统不适应？<br>我们部门正在支持传统的ERP供应链软件，有2到4个模块。现在用SVN管理代码，自研了一个非常简单的部署工具，我想尝试用microsoft azure devops的repo和pipeline来管理代码和流水线，正在探索中。我不确定这种情形使用microsoft azure devops是否可行，是否有一些关键要素没有考虑到。<br>谢谢老师！","like_count":0,"discussions":[{"author":{"id":1447903,"avatar":"https://static001.geekbang.org/account/avatar/00/16/17/df/3aba2d8e.jpg","nickname":"DevOps在路上","note":"","ucode":"577E324546893C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362285,"discussion_content":"azure devops放心用，最牛逼的devops，当然你要有钱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616907315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160925,"user_name":"swordman","can_delete":false,"product_type":"c1","uid":1002980,"ip_address":"","ucode":"F6719BD5E20B37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/e4/94b543c3.jpg","comment_is_top":false,"comment_ctime":1576061504,"is_pvip":false,"replies":[{"id":"61599","content":"你好，关于Jira和Jenkins 的集成实践，我会在27讲中给大家分享一个完整的案例哈，敬请期待","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1576314716,"ip_address":"","comment_id":160925,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576061504","product_id":100036601,"comment_content":"老师，是否有主流项目管理平台和jenins集成的实战分享？比如jira和jenkins。","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477533,"discussion_content":"你好，关于Jira和Jenkins 的集成实践，我会在27讲中给大家分享一个完整的案例哈，敬请期待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576314716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160361,"user_name":"t86","can_delete":false,"product_type":"c1","uid":1261927,"ip_address":"","ucode":"B336666DC5FFFA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIo6P1BKTjzM5QagaoM99aFmiaTIzpJ7hMG81Hhx9PwCsNjkrpmDPxVHAbQ2MWIKJEYSf5cES9dA7Q/132","comment_is_top":false,"comment_ctime":1575941193,"is_pvip":false,"replies":[{"id":"61602","content":"你好，27讲中会结合一个开源解决方案给大家串一下工具哈，敬请期待！","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1576314943,"ip_address":"","comment_id":160361,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575941193","product_id":100036601,"comment_content":"期待老师有结合实战的讲解","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477353,"discussion_content":"你好，27讲中会结合一个开源解决方案给大家串一下工具哈，敬请期待！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576314943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160324,"user_name":"阿硕","can_delete":false,"product_type":"c1","uid":1210978,"ip_address":"","ucode":"39856C29E6614B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/62/9b248708.jpg","comment_is_top":false,"comment_ctime":1575936697,"is_pvip":false,"replies":[{"id":"67654","content":"你好，这么泛泛的说很难知道你的问题所在哈，你可以添加我的微信线下沟通，关于Jenkins的任何问题都可以随时找我哈，我的微信号码：cendrier，提前祝你新年快乐！","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1579853573,"ip_address":"","comment_id":160324,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1575936697","product_id":100036601,"comment_content":"石老师，您好，请教下在jenkins的流水线中，多种不同工具的参数和变量传递有什么最佳实践方法吗？","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477336,"discussion_content":"你好，这么泛泛的说很难知道你的问题所在哈，你可以添加我的微信线下沟通，关于Jenkins的任何问题都可以随时找我哈，我的微信号码：cendrier，提前祝你新年快乐！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579853573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2333678,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/iaRiaKz5VweoRNz2NibVZh6N63MMh1s5evKBfaMXZTBwSoZcib10h1Me4SpZjZv95krQxMpvDxTrN3ia9VNG56icnk7w/132","nickname":"Geek_bc63a1","note":"","ucode":"450F120047252E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340560,"discussion_content":"石老师，你微信号更新了吗？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610034577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159639,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1575711328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575711328","product_id":100036601,"comment_content":"老师讲得很好，这五大特征，在我平时使用一些持续交付平台很有感触，这样做确实可以很好的满足一个持续将会平台的各种需求。","like_count":0}]}