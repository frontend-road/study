{"id":78175,"title":"49 | 搜索：如何用A*搜索算法实现游戏中的寻路功能？","content":"<p>魔兽世界、仙剑奇侠传这类MMRPG游戏，不知道你有没有玩过？在这些游戏中，有一个非常重要的功能，那就是人物角色自动寻路。<strong><span class=\"orange\">当人物处于游戏地图中的某个位置的时候，我们用鼠标点击另外一个相对较远的位置，人物就会自动地绕过障碍物走过去。玩过这么多游戏，不知你是否思考过，这个功能是怎么实现的呢？</span></strong></p><h2>算法解析</h2><p>实际上，这是一个非常典型的搜索问题。人物的起点就是他当下所在的位置，终点就是鼠标点击的位置。我们需要在地图中，找一条从起点到终点的路径。这条路径要绕过地图中所有障碍物，并且看起来要是一种非常聪明的走法。所谓“聪明”，笼统地解释就是，走的路不能太绕。理论上讲，最短路径显然是最聪明的走法，是这个问题的最优解。</p><p>不过，在<a href=\"https://time.geekbang.org/column/article/76468\">第44节</a>最优出行路线规划问题中，我们也讲过，如果图非常大，那Dijkstra最短路径算法的执行耗时会很多。在真实的软件开发中，我们面对的是超级大的地图和海量的寻路请求，算法的执行效率太低，这显然是无法接受的。</p><p>实际上，像出行路线规划、游戏寻路，这些真实软件开发中的问题，一般情况下，我们都不需要非得求最优解（也就是最短路径）。在权衡路线规划质量和执行效率的情况下，我们只需要寻求一个次优解就足够了。那<strong>如何快速找出一条接近于最短路线的次优路线呢？</strong></p><!-- [[[read_end]]] --><p>这个快速的路径规划算法，就是我们今天要学习的<strong>A*算法</strong>。实际上，A*算法是对Dijkstra算法的优化和改造。如何将Dijkstra算法改造成A*算法呢？为了更好地理解接下来要讲的内容，我建议你先温习下第44节中的Dijkstra算法的实现原理。</p><p>Dijkstra算法有点儿类似BFS算法，它每次找到跟起点最近的顶点，往外扩展。这种往外扩展的思路，其实有些盲目。为什么这么说呢？我举一个例子来给你解释一下。下面这个图对应一个真实的地图，每个顶点在地图中的位置，我们用一个二维坐标（x，y）来表示，其中，x表示横坐标，y表示纵坐标。</p><p><img src=\"https://static001.geekbang.org/resource/image/11/dd/11840cc13071fe2da67675338e46cadd.jpg?wh=1142*856\" alt=\"\"></p><p>在Dijkstra算法的实现思路中，我们用一个优先级队列，来记录已经遍历到的顶点以及这个顶点与起点的路径长度。顶点与起点路径长度越小，就越先被从优先级队列中取出来扩展，从图中举的例子可以看出，尽管我们找的是从s到t的路线，但是最先被搜索到的顶点依次是1，2，3。通过肉眼来观察，这个搜索方向跟我们期望的路线方向（s到t是从西向东）是反着的，路线搜索的方向明显“跑偏”了。</p><p>之所以会“跑偏”，那是因为我们是按照顶点与起点的路径长度的大小，来安排出队列顺序的。与起点越近的顶点，就会越早出队列。我们并没有考虑到这个顶点到终点的距离，所以，在地图中，尽管1，2，3三个顶点离起始顶点最近，但离终点却越来越远。</p><p>如果我们综合更多的因素，把这个顶点到终点可能还要走多远，也考虑进去，综合来判断哪个顶点该先出队列，那是不是就可以避免“跑偏”呢？</p><p>当我们遍历到某个顶点的时候，从起点走到这个顶点的路径长度是确定的，我们记作g(i)（i表示顶点编号）。但是，从这个顶点到终点的路径长度，我们是未知的。虽然确切的值无法提前知道，但是我们可以用其他估计值来代替。</p><p>这里我们可以通过这个顶点跟终点之间的直线距离，也就是欧几里得距离，来近似地估计这个顶点跟终点的路径长度（注意：路径长度跟直线距离是两个概念）。我们把这个距离记作h(i)（i表示这个顶点的编号），专业的叫法是<strong>启发函数</strong>（heuristic function）。因为欧几里得距离的计算公式，会涉及比较耗时的开根号计算，所以，我们一般通过另外一个更加简单的距离计算公式，那就是<strong>曼哈顿距离</strong>（Manhattan distance）。曼哈顿距离是两点之间横纵坐标的距离之和。计算的过程只涉及加减法、符号位反转，所以比欧几里得距离更加高效。</p><pre><code>int hManhattan(Vertex v1, Vertex v2) { // Vertex表示顶点，后面有定义\n  return Math.abs(v1.x - v2.x) + Math.abs(v1.y - v2.y);\n}\n</code></pre><p>原来只是单纯地通过顶点与起点之间的路径长度g(i)，来判断谁先出队列，现在有了顶点到终点的路径长度估计值，我们通过两者之和f(i)=g(i)+h(i)，来判断哪个顶点该最先出队列。综合两部分，我们就能有效避免刚刚讲的“跑偏”。这里f(i)的专业叫法是<strong>估价函数</strong>（evaluation function）。</p><p>从刚刚的描述，我们可以发现，A*算法就是对Dijkstra算法的简单改造。实际上，代码实现方面，我们也只需要稍微改动几行代码，就能把Dijkstra算法的代码实现，改成A*算法的代码实现。</p><p>在A*算法的代码实现中，顶点Vertex类的定义，跟Dijkstra算法中的定义，稍微有点儿区别，多了x，y坐标，以及刚刚提到的f(i)值。图Graph类的定义跟Dijkstra算法中的定义一样。为了避免重复，我这里就没有再贴出来了。</p><pre><code>private class Vertex {\n  public int id; // 顶点编号ID\n  public int dist; // 从起始顶点，到这个顶点的距离，也就是g(i)\n  public int f; // 新增：f(i)=g(i)+h(i)\n  public int x, y; // 新增：顶点在地图中的坐标（x, y）\n  public Vertex(int id, int x, int y) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.f = Integer.MAX_VALUE;\n    this.dist = Integer.MAX_VALUE;\n  }\n}\n// Graph类的成员变量，在构造函数中初始化\nVertex[] vertexes = new Vertex[this.v];\n// 新增一个方法，添加顶点的坐标\npublic void addVetex(int id, int x, int y) {\n  vertexes[id] = new Vertex(id, x, y)\n}\n</code></pre><p>A*算法的代码实现的主要逻辑是下面这段代码。它跟Dijkstra算法的代码实现，主要有3点区别：</p><ul>\n<li>\n<p>优先级队列构建的方式不同。A*算法是根据f值（也就是刚刚讲到的f(i)=g(i)+h(i)）来构建优先级队列，而Dijkstra算法是根据dist值（也就是刚刚讲到的g(i)）来构建优先级队列；</p>\n</li>\n<li>\n<p>A*算法在更新顶点dist值的时候，会同步更新f值；</p>\n</li>\n<li>\n<p>循环结束的条件也不一样。Dijkstra算法是在终点出队列的时候才结束，A*算法是一旦遍历到终点就结束。</p>\n</li>\n</ul><pre><code>public void astar(int s, int t) { // 从顶点s到顶点t的路径\n  int[] predecessor = new int[this.v]; // 用来还原路径\n  // 按照vertex的f值构建的小顶堆，而不是按照dist\n  PriorityQueue queue = new PriorityQueue(this.v);\n  boolean[] inqueue = new boolean[this.v]; // 标记是否进入过队列\n  vertexes[s].dist = 0;\n  vertexes[s].f = 0;\n  queue.add(vertexes[s]);\n  inqueue[s] = true;\n  while (!queue.isEmpty()) {\n    Vertex minVertex = queue.poll(); // 取堆顶元素并删除\n    for (int i = 0; i &lt; adj[minVertex.id].size(); ++i) {\n      Edge e = adj[minVertex.id].get(i); // 取出一条minVetex相连的边\n      Vertex nextVertex = vertexes[e.tid]; // minVertex--&gt;nextVertex\n      if (minVertex.dist + e.w &lt; nextVertex.dist) { // 更新next的dist,f\n        nextVertex.dist = minVertex.dist + e.w;\n        nextVertex.f \n           = nextVertex.dist+hManhattan(nextVertex, vertexes[t]);\n        predecessor[nextVertex.id] = minVertex.id;\n        if (inqueue[nextVertex.id] == true) {\n          queue.update(nextVertex);\n        } else {\n          queue.add(nextVertex);\n          inqueue[nextVertex.id] = true;\n        }\n      }\n      if (nextVertex.id == t) { // 只要到达t就可以结束while了\n        queue.clear(); // 清空queue，才能推出while循环\n        break; \n      }\n    }\n  }\n  // 输出路径\n  System.out.print(s);\n  print(s, t, predecessor); // print函数请参看Dijkstra算法的实现\n}\n</code></pre><p><strong>尽管A*算法可以更加快速地找到从起点到终点的路线，但是它并不能像Dijkstra算法那样，找到最短路线。这是为什么呢？</strong></p><p>要找出起点s到终点t的最短路径，最简单的方法是，通过回溯穷举所有从s到达t的不同路径，然后对比找出最短的那个。不过很显然，回溯算法的执行效率非常低，是指数级的。</p><p><img src=\"https://static001.geekbang.org/resource/image/38/4a/38ebd9aab387669465226fc7f644064a.jpg?wh=1142*692\" alt=\"\"></p><p>Dijkstra算法在此基础之上，利用动态规划的思想，对回溯搜索进行了剪枝，只保留起点到某个顶点的最短路径，继续往外扩展搜索。动态规划相较于回溯搜索，只是换了一个实现思路，但它实际上也考察到了所有从起点到终点的路线，所以才能得到最优解。</p><p><img src=\"https://static001.geekbang.org/resource/image/ca/77/caad286fc67333b77e8ed5c85ce2e377.jpg?wh=1142*699\" alt=\"\"></p><p>A*算法之所以不能像Dijkstra算法那样，找到最短路径，主要原因是两者的while循环结束条件不一样。刚刚我们讲过，Dijkstra算法是在终点出队列的时候才结束，A*算法是一旦遍历到终点就结束。对于Dijkstra算法来说，当终点出队列的时候，终点的dist值是优先级队列中所有顶点的最小值，即便再运行下去，终点的dist值也不会再被更新了。对于A*算法来说，一旦遍历到终点，我们就结束while循环，这个时候，终点的dist值未必是最小值。</p><p>A*算法利用贪心算法的思路，每次都找f值最小的顶点出队列，一旦搜索到终点就不在继续考察其他顶点和路线了。所以，它并没有考察所有的路线，也就不可能找出最短路径了。</p><p>搞懂了A*算法，我们再来看下，<strong>如何借助A*算法解决今天的游戏寻路问题？</strong></p><p>要利用A*算法解决这个问题，我们只需要把地图，抽象成图就可以了。不过，游戏中的地图跟第44节中讲的我们平常用的地图是不一样的。因为游戏中的地图并不像我们现实生活中那样，存在规划非常清晰的道路，更多的是宽阔的荒野、草坪等。所以，我们没法利用44节中讲到的抽象方法，把岔路口抽象成顶点，把道路抽象成边。</p><p>实际上，我们可以换一种抽象的思路，把整个地图分割成一个一个的小方块。在某一个方块上的人物，只能往上下左右四个方向的方块上移动。我们可以把每个方块看作一个顶点。两个方块相邻，我们就在它们之间，连两条有向边，并且边的权值都是1。所以，这个问题就转化成了，在一个有向有权图中，找某个顶点到另一个顶点的路径问题。将地图抽象成边权值为1的有向图之后，我们就可以套用A*算法，来实现游戏中人物的自动寻路功能了。</p><h2>总结引申</h2><p>我们今天讲的A*算法属于一种<strong>启发式搜索算法</strong>（Heuristically Search Algorithm）。实际上，启发式搜索算法并不仅仅只有A*算法，还有很多其他算法，比如IDA*算法、蚁群算法、遗传算法、模拟退火算法等。如果感兴趣，你可以自行研究下。</p><p>启发式搜索算法利用估价函数，避免“跑偏”，贪心地朝着最有可能到达终点的方向前进。这种算法找出的路线，并不是最短路线。但是，实际的软件开发中的路线规划问题，我们往往并不需要非得找最短路线。所以，鉴于启发式搜索算法能很好地平衡路线质量和执行效率，它在实际的软件开发中的应用更加广泛。实际上，在第44节中，我们讲到的地图App中的出行路线规划问题，也可以利用启发式搜索算法来实现。</p><h2>课后思考</h2><p>我们之前讲的“迷宫问题”是否可以借助A*算法来更快速地找到一个走出去的路线呢？如果可以，请具体讲讲该怎么来做；如果不可以，请说说原因。</p><p>欢迎留言和我分享，也欢迎点击“<span class=\"orange\">请朋友读</span>”，把今天的内容分享给你的好友，和他一起讨论、学习。</p>","neighbors":{"left":{"article_title":"48 | B+树：MySQL数据库索引是如何实现的？","id":77830},"right":{"article_title":"50 | 索引：如何在海量数据中快速查找某个数据？","id":78449}},"comments":[{"had_liked":false,"id":62068,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1547901535,"is_pvip":false,"replies":[{"id":"22372","content":"看得到@hua168同学对职业规划很迷茫。<br><br>我来逐一回答一下你的问题：<br><br>1. 自考学历对你来说没用。绝大部分卡学历的公司，只看第一学历；不卡学历的那部分公司，你自考本科也没必要。自考学历对一小部分人有用，具体哪部分人适合我就不展开讲了，总之不适合你。但是，你没有因为学历自卑，公司这么多，总有不卡学历的。我见过很多大专文凭，技术去贼拉子好的，照样去大公司。<br><br>2. 不管是大公司还是小公司，都会卡年龄。不过所谓的卡年龄并不是说年龄大了就没人要了。而是能力跟年龄不符，年龄一大把却跟人家工作两三年经验能力差不多，要钱还贼高，那估计确实没人要。<br><br>3. 不要再去学java了。如果你还想走技术路线，那就要专精尖，这个我前一条回复说过了。<br><br>4. 我还是说了，对于技术一般的人来说，如果要升管理岗，还是那句话“要有领导气质”，另外，你要包装一下简历，一些很小公司的领导是识别不出来的：）听起来是不入流的建议，但是，我确实是认真的。<br><br>5. 实际上，年龄大了，技术没有太大竞争力，去个安稳的公司很好，比如国企性质的一些互联网保险公司，具体你自己搜搜吧，我这里不方便说公司名字。<br><br>以上建议只针对你本人的情况，并且是我的个人建议。如有不投，你自己斟酌。","user_name":"作者回复","comment_id":62068,"uid":"1190123","ip_address":"","utype":1,"ctime":1548293002,"user_name_real":"gg"}],"discussion_count":7,"race_medal":0,"score":"594253388383","product_id":100017301,"comment_content":"我之前是打算生管理，去个小公司，发现也要会开发，去年就毅然去学java，维护懂java会有帮助，也可以搞下大数据……再学一门本职运维开发需要python……<br>我就是这样打算的…<br>同学说我们学历低只要大专，问我要大家考研究生不？我感觉我不去大公司的话没什么用吧？但一想很多要求本科，自考研究生不知道承认不？尤其公司，再说就算看完都老了吧……意义有多大？","like_count":139,"discussions":[{"author":{"id":1424419,"avatar":"https://static001.geekbang.org/account/avatar/00/15/bc/23/f3b55227.jpg","nickname":"Winter","note":"","ucode":"E81CC8178C9E4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126577,"discussion_content":"说个亲身经历，我在阿里的时候坐我旁边那哥们高中毕业，技术贼好","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1578530475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332262,"discussion_content":"王老师的建议真的是非常真诚，接地气。不扯什么高调子和道德范","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1607135507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437083,"discussion_content":"看得到@hua168同学对职业规划很迷茫。\n\n我来逐一回答一下你的问题：\n\n1. 自考学历对你来说没用。绝大部分卡学历的公司，只看第一学历；不卡学历的那部分公司，你自考本科也没必要。自考学历对一小部分人有用，具体哪部分人适合我就不展开讲了，总之不适合你。但是，你没有因为学历自卑，公司这么多，总有不卡学历的。我见过很多大专文凭，技术去贼拉子好的，照样去大公司。\n\n2. 不管是大公司还是小公司，都会卡年龄。不过所谓的卡年龄并不是说年龄大了就没人要了。而是能力跟年龄不符，年龄一大把却跟人家工作两三年经验能力差不多，要钱还贼高，那估计确实没人要。\n\n3. 不要再去学java了。如果你还想走技术路线，那就要专精尖，这个我前一条回复说过了。\n\n4. 我还是说了，对于技术一般的人来说，如果要升管理岗，还是那句话“要有领导气质”，另外，你要包装一下简历，一些很小公司的领导是识别不出来的：）听起来是不入流的建议，但是，我确实是认真的。\n\n5. 实际上，年龄大了，技术没有太大竞争力，去个安稳的公司很好，比如国企性质的一些互联网保险公司，具体你自己搜搜吧，我这里不方便说公司名字。\n\n以上建议只针对你本人的情况，并且是我的个人建议。如有不投，你自己斟酌。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1548293002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1118952,"avatar":"https://static001.geekbang.org/account/avatar/00/11/12/e8/aa60f7f1.jpg","nickname":"赵存金","note":"","ucode":"89D69F8D2DF269","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":532117,"discussion_content":"哈哈。争哥 现在还在回复呀。良心专栏","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637540592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":437083,"ip_address":""},"score":532117,"extra":"{\"user_type\":1}"}]},{"author":{"id":1030070,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b7/b6/17103195.jpg","nickname":"Elliot","note":"","ucode":"CC58A6FD2F338C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545248,"discussion_content":"人最难的是摆脱所处的环境，给人成就最大的也是摆脱当下的处境。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641886974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385953,"discussion_content":"争哥yyds","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627359155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182731,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/0b/1ccc90b7.jpg","nickname":"-Violet Evergarden-","note":"","ucode":"B483A3ACFB36F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369339,"discussion_content":"我有个认识的哥们现在在某2线教育互联网公司做类似CTO的职位，别人只有大专学历。BTW，作者大大总结的非常好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619008632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61891,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1547829826,"is_pvip":false,"replies":[{"id":"21954","content":"我下面说的话，可能会伤害到你，不过，我是非常认真的。<br><br>从你对运维相关的技术点的描述上，可以看出，你应该没有在一个稍微大点的公司工作过吧，所以，很多技术都用的不够深，都只是略知一二，没有自己拿得出手的东西。<br><br>建议你去稍微大点公司锻炼一下技术，同时，也能给你的履历加分。<br><br>不过，以你的年龄和履历，去稍微大点的公司可能也不现实了，因为现在好点的公司都卡学历、背景，更别说技术了。<br><br>所以，我建议你找一个运维领域的风口技术去研究，比如你提到的k8s。这种技术才兴起，会的人不多，所以招聘公司都不会太卡学历、经历，只要会，是个人都要，可以借机去个大点的公司。这会是你的一个转折点。<br><br>而且。现在，经济下行，互联网行业都压缩招聘。你正好利用这1、2年，沉下心来，抓住一个技术方向，研究深、研究透。<br><br>还有一条路，那就是做管理岗位。这个要看你有没有领导气质了：）如果有领导范，年龄大，工作经历多，也可以忽悠到一些小公司的管理岗。实际上，对你来说，这条路也是不错的。<br><br>还有一条路，那就是靠去天使轮的创业公司逆袭。这条路有点赌博的意思。不过，如果公司搞大了，你也会青云直上，这辈子都不愁了：）","user_name":"作者回复","comment_id":61891,"uid":"1190123","ip_address":"","utype":1,"ctime":1547867751,"user_name_real":"gg"}],"discussion_count":8,"race_medal":0,"score":"392389853762","product_id":100017301,"comment_content":"大神，能问一个题外话吗，关于自己人生规划，水平和眼界所限，想不通，<br>都说大神级见识很广也多，能给我这个35岁只维护过四五十台linux服务器的运维指条路吗？<br>现在很迷茫和压力大~~<br>能力如下：<br>一.网络：CCNA水平，自过了CCNP忘记了，当过2年网管<br>二、维护过asp.net电商网站，3年，只有简单的，兼职网管<br>三、linux运维，只在一家电商做了3年多，会<br>1.web：nginx、tomcat配置（少用）+php:nignx的rewirte和反代<br>2.数据库：mysql、mongoDB、redis 配置及主从，不会mycat、Cetus之类<br>3.反代：会nginx、haproxy简单配置<br>4.存储：NFS、fastDFS、hadoop简单看了一下<br>5.版本控制：只会git及搭建gitlab+jenkins（简单的CI&#47;CD）<br>6.监控：简单配置zabbix+shell脚本<br>7.虚拟化：kvm安装及配置、docker(k8s还没学)<br>8.云计算：openstack只会安装做过实验<br>9.测试：只会ab工具<br>10.日志：ELK安装配置，还没结合java（在学中）<br>11.大数据：没使用过（不会flume、storm、spark、flink、kafka）<br>12.脚本：主要是shell为主、会点python<br><br>四、编程能力：自学，没项目经验<br>1.前端：<br>  1）HTML（HTML5不怎看）<br>  2）css（laiui、学了一下vue）<br>  3) js、jquery框架、ES6简单看了一下  <br>2.PHP：语法简单的thinkphp5框架<br>3.java：考虑要维护java web在学<br>\t只看了java、jsp及servet、spring、springMVC、spring Boot（这个为主）<br>4.python：考虑运维用到<br>\tpython：会简单的脚本<br>\tdjango：只会官网简单的<br>\t<br>问题是：现在已35岁了，失业，怎办？年龄摆在那里，能力好像不强，学历大专。<br>能给个建议吗？非常感谢~~","like_count":92,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437028,"discussion_content":"我下面说的话，可能会伤害到你，不过，我是非常认真的。\n\n从你对运维相关的技术点的描述上，可以看出，你应该没有在一个稍微大点的公司工作过吧，所以，很多技术都用的不够深，都只是略知一二，没有自己拿得出手的东西。\n\n建议你去稍微大点公司锻炼一下技术，同时，也能给你的履历加分。\n\n不过，以你的年龄和履历，去稍微大点的公司可能也不现实了，因为现在好点的公司都卡学历、背景，更别说技术了。\n\n所以，我建议你找一个运维领域的风口技术去研究，比如你提到的k8s。这种技术才兴起，会的人不多，所以招聘公司都不会太卡学历、经历，只要会，是个人都要，可以借机去个大点的公司。这会是你的一个转折点。\n\n而且。现在，经济下行，互联网行业都压缩招聘。你正好利用这1、2年，沉下心来，抓住一个技术方向，研究深、研究透。\n\n还有一条路，那就是做管理岗位。这个要看你有没有领导气质了：）如果有领导范，年龄大，工作经历多，也可以忽悠到一些小公司的管理岗。实际上，对你来说，这条路也是不错的。\n\n还有一条路，那就是靠去天使轮的创业公司逆袭。这条路有点赌博的意思。不过，如果公司搞大了，你也会青云直上，这辈子都不愁了：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547867751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1971269,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oltLEqTrmHm2aJP99BK6tHu5h7hp4aj08wR5Wt6H31iadFduDAVvjYKmhQ2nvGbLV3lkVdiat2GRasgWXoJeTibUg/132","nickname":"杨","note":"","ucode":"7EFEFE285975C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586326,"discussion_content":"加油  如果不走管理岗  走技术线  就把技术学精  而不是杂   运维躲不过docker和k8s","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662108163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2007489,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaSLzlzBvESwqNTtgatpqYUsFibm1I5lh0iaiaBGGq6zYywIrOnClqeIDNDticXKuSBL39ZedxaHuImjmuwBF3rFZrA/132","nickname":"Geek_e8b7c7","note":"","ucode":"BDC9E7E9FC461D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384431,"discussion_content":"请问现在工作怎么样了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626588904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690772,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cc/94/2381f962.jpg","nickname":"月下独酌","note":"","ucode":"C6DE5808ED31C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366944,"discussion_content":"加油!!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618221956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1808713,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/99/49/43bd37b4.jpg","nickname":"孙瑜","note":"","ucode":"D57C35FF311B8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257604,"discussion_content":"加油 时隔一年 比你大一岁 其他类似 虽然在岗也倍感压力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588593937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504956,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/mkcNxKyJibOd8bsLpQRJ9Yjsew5yTBm2GTXUSkvwbwibMqPPMV9GbmXPzFIRC9iaX2s7HxvSryTLhGnrSogYqB7NQ/132","nickname":"kaisheng","note":"","ucode":"FD9EFEBEB7BFDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215849,"discussion_content":"加油，都不容易","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585390319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180307,"avatar":"https://static001.geekbang.org/account/avatar/00/12/02/93/44672231.jpg","nickname":"seven","note":"","ucode":"55CE5F60051F89","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":108550,"discussion_content":"加油！！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577631869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609102,"avatar":"","nickname":"极客cto","note":"","ucode":"2C790DD23541F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46199,"discussion_content":"同感！！！！！！！！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573130460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61715,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1547781162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"199116276778","product_id":100017301,"comment_content":"今天看了A*算法 反而对dijkstra算法理解得更透彻了....","like_count":47},{"had_liked":false,"id":169900,"user_name":"Panda🐟","can_delete":false,"product_type":"c1","uid":1002401,"ip_address":"","ucode":"C6007A3192516A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/a1/c2719a5a.jpg","comment_is_top":false,"comment_ctime":1578470178,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"104657685282","product_id":100017301,"comment_content":"思考：A*算法求解迷宫问题路径可能不会更效率，A*算法中的贪心策略是基于方向，而迷宫会设计很多折返，路径和方向相关性不强。","like_count":25,"discussions":[{"author":{"id":1274464,"avatar":"https://static001.geekbang.org/account/avatar/00/13/72/60/288023be.jpg","nickname":"YU","note":"","ucode":"4EE45D6FC2862F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386748,"discussion_content":"实际来说a*可以做到，碰到死胡同就把距离加大。并且记录下走过的路，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627780703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2304810,"avatar":"https://static001.geekbang.org/account/avatar/00/23/2b/2a/51e51255.jpg","nickname":"Superh","note":"","ucode":"B6394479A3AB1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363336,"discussion_content":"你说的对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617172405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250825,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1601255049,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"70320731785","product_id":100017301,"comment_content":"针对下边的hua168同学，我觉得王老师给的建议挺好，我们也可以从中学到很多经验。。。我觉得最大的经验就是，一定不要被温水煮青蛙了，有一些危机意识，我自己个人的建议是，过1年左右，要重新写下简历，出去面试下<br>1、写简历，是在审视自己这1年做了什么没，对自己的审视往往很有意思，也会催生自己的危机感<br>2、出去面试，不要抱着谁虐谁的态度，就是相互交流学习，当然，遇到挑刺的面试官，该虐虐，我觉得单纯就技术这种拼刺刀，能虐绝大部分一面面试官其实表示你的技术水平整体上已经可以了。如果能在案例分析等二面考察中继续脱颖而出，说明哥们你工作经验加技术很可以的。<br>3、出去面试最大的收获应该是，最后几轮面试，vp或者总监面试，把工作中遇到的一些技术疑惑，技术与业务疑惑，或者技术规划记录下来，这个时候拿出来问，一般固定15~30分钟的面试，你总有机会提出问题的，与高level的人单独交流，收获非常大。<br>","like_count":17,"discussions":[{"author":{"id":1547090,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9b/52/cb97162e.jpg","nickname":"Sarai李","note":"","ucode":"F8104FC4639804","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574311,"discussion_content":"非常赞成，我是文科背景，偶然有机会面IT行业大佬+交流问题和想法，收到的启发很大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653966412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332315,"discussion_content":"学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607156058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332314,"discussion_content":"高手，这是大佬！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607156052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544448,"discussion_content":"持续进步🤝🤝🤝🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641525033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332314,"ip_address":""},"score":544448,"extra":""}]}]},{"had_liked":false,"id":125800,"user_name":"1","can_delete":false,"product_type":"c1","uid":1340241,"ip_address":"","ucode":"5ADBA094E7E932","user_header":"https://static001.geekbang.org/account/avatar/00/14/73/51/e3e45b3f.jpg","comment_is_top":false,"comment_ctime":1566261352,"is_pvip":false,"replies":[{"id":"47250","content":"也可以，你这个抽象成二维数组喽，那就是邻接矩阵的表示方法，可以站人的用1表示，不能站人的方块用0表示，bfs就能得到最优解。","user_name":"作者回复","comment_id":125800,"uid":"1190123","ip_address":"","utype":1,"ctime":1566774385,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"61695803496","product_id":100017301,"comment_content":"有一点不明白，希望老师能解答一下。实际上，我们可以换一种抽象的思路，把整个地图分割成一个一个的小方块。在某一个方块上的人物，只能往上下左右四个方向的方块上移动。请问障碍物是怎么绕过的呢？","like_count":15,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463696,"discussion_content":"也可以，你这个抽象成二维数组喽，那就是邻接矩阵的表示方法，可以站人的用1表示，不能站人的方块用0表示，bfs就能得到最优解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566774385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61690,"user_name":"『LHCY』","can_delete":false,"product_type":"c1","uid":1188449,"ip_address":"","ucode":"A8B5E0467B5F25","user_header":"https://static001.geekbang.org/account/avatar/00/12/22/61/bbfb2d4a.jpg","comment_is_top":false,"comment_ctime":1547776050,"is_pvip":false,"replies":[{"id":"23156","content":"是的，你说的没错！<br>","user_name":"作者回复","comment_id":61690,"uid":"1190123","ip_address":"","utype":1,"ctime":1549179688,"user_name_real":"gg"}],"discussion_count":3,"race_medal":0,"score":"57382350898","product_id":100017301,"comment_content":"真实游戏中也是用的小方块来做的吗？比如要往(1，1)方向走，先把模型角度调整，然后移动是一个个小方格走的，因为方格太小使肉眼分辨不出？","like_count":14,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436953,"discussion_content":"是的，你说的没错！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549179688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2760780,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","nickname":"Geek_94045a","note":"","ucode":"B8F23BA9D1411B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532403,"discussion_content":"5年游戏程序员告诉你 是的，只不过你说的小方格在我们这叫做坐标点，你没发现所有游戏显示器角落里都有坐标么，没这玩意一步路都走不动的，障碍物的地方只是坐标点的一个属性，可达与不可达而已    游戏其实没那么神秘","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637594303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2760780,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","nickname":"Geek_94045a","note":"","ucode":"B8F23BA9D1411B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532406,"discussion_content":"游戏项目 一般有一个工种叫做 算法工程师   基本都是应用数学专业或者之前干分析师的   他们代码写的很烂甚至不会写代码  就是公式写的好，不过人家产出的都是游戏的精髓，还有一种产品岗叫数值策划 ，这个才是真正的神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637594445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83547,"user_name":"Bryce","can_delete":false,"product_type":"c1","uid":1286669,"ip_address":"","ucode":"E504AB8F2CA1A1","user_header":"https://static001.geekbang.org/account/avatar/00/13/a2/0d/e72f5e75.jpg","comment_is_top":false,"comment_ctime":1554645945,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"44504318905","product_id":100017301,"comment_content":"我来解释一下更新条件仍然和 dijkstra 算法一致的原因，有错误还请大家指出<br>实际上不管当前点从哪一个点经过，它与终点的曼哈顿距离都是不变的，所以这部分不需要管，具体到不等式里就是左右都有这一项，故可以消去：<br>if ( minVertex.dist + e.w + nextVertex.g &lt; nextVertex.dist + nextVertex.g )","like_count":11,"discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332304,"discussion_content":"没有理解。若距离采用估价函数, 应该是两边f比较，minV.f+e.w < nextV.f; minV.dist+minV.h+e.w<nextV.dist+nextV.h, 其中g=dist(i)；minV.dist+minV.h+e.W<nextV.dist+nextV.h 除非minV.h==nextV.h 否则两边怎么可以消掉？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607154716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2413294,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqfEZles2ojt0PC6Spic4zRRjWvS90KKqjmMib9kNOd6uOPicD6sbQudgs3DSkWQ2lKSickCvUSAsibHpg/132","nickname":"Geek_9ae5e2","note":"","ucode":"AA3FB86E372F6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355537,"discussion_content":"我感觉这个f只是用来决定你优先往那边跑,防止跑偏,而不是用来决定往不往这个方向跑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615449222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332304,"ip_address":""},"score":355537,"extra":""},{"author":{"id":2490478,"avatar":"https://static001.geekbang.org/account/avatar/00/26/00/6e/dad56b2e.jpg","nickname":"……","note":"","ucode":"872ECE212E8441","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364802,"discussion_content":"这个比较的表达式左边也应该用nextVertex.h，因为左边计算的也应该是尝试从minVertex走到nextVertex的f值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617612200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332304,"ip_address":""},"score":364802,"extra":""}]},{"author":{"id":1564605,"avatar":"","nickname":"宋强","note":"","ucode":"119A0B00ABDA7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219032,"discussion_content":"感觉不消去比较好理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585725987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169075,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1578271216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40232976880","product_id":100017301,"comment_content":"不能，因为走出迷宫并没有一个“更近”的需求，每个点都是机会均等的","like_count":10},{"had_liked":false,"id":62024,"user_name":"yongxiang","can_delete":false,"product_type":"c1","uid":1082351,"ip_address":"","ucode":"16D826814D4C4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/ef/445e1421.jpg","comment_is_top":false,"comment_ctime":1547885184,"is_pvip":false,"replies":[{"id":"23149","content":"嗯嗯 我更新下，是个bug：）","user_name":"作者回复","comment_id":62024,"uid":"1190123","ip_address":"","utype":1,"ctime":1549178895,"user_name_real":"gg"}],"discussion_count":1,"race_medal":3,"score":"40202590848","product_id":100017301,"comment_content":"王争老师，我把代码输入运行，并把过程打印出来，发现代码运行的过程跟您说的A*算法的三点区别中的第三点不一样，不会在遍历到目标顶点时退出while循环。您看是不是27行的break只是退出了for循环，无法退出while循环，是不是需要增加以下的修改：<br>                if (nextVertex.id == t) {<br>                    queue.clear();<br>                    break;<br>                }","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437073,"discussion_content":"嗯嗯 我更新下，是个bug：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549178895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263848,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1986041,"ip_address":"","ucode":"5FBFE9772F2B1D","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4d/f9/1ce5555b.jpg","comment_is_top":false,"comment_ctime":1606280361,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31671051433","product_id":100017301,"comment_content":"忘记发链接了。A*和IDA*可视化对比。https:&#47;&#47;qiao.github.io&#47;PathFinding.js&#47;visual&#47;","like_count":8,"discussions":[{"author":{"id":2636068,"avatar":"https://static001.geekbang.org/account/avatar/00/28/39/24/59506950.jpg","nickname":"HelloWorld","note":"","ucode":"F12D1D582D8690","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389811,"discussion_content":"太帅了，这个可视化。一比较，就发现迪杰斯特拉的尴尬","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629438961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176077,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1580951715,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18760820899","product_id":100017301,"comment_content":"算法解析<br>\t* 这是一个非常典型的搜索问题。<br>\t* 人物的起点就是他当下所在的位置，终点就是鼠标点击的位置。<br>\t* 我们需要在地图中，找一条从起点到终点的路径。<br>\t* 这条路径要绕过地图中所有障碍物，并且看起来要是一种非常聪明的走法。所谓“聪明”，笼统地解释就是，走的路不能太绕。理论上讲，最短路径显然是最聪明的走法，是这个问题的最优解。<br><br>实际上，像出行路线规划、游戏寻路，这些真实软件开发中的问题，一般情况下都不需要非得求最优解（也就是最短路径）。<br>在权衡路线规划质量和执行效率的情况下，我们只需要寻求一个次优解就足够了。<br>如何快速找出一条接近于最短路线的次优路线呢？<br>A* 算法：A* 算法是对 Dijkstra 算法的优化和改造。最优出行路线规划问题中，如果图非常大，Dijkstra 最短路径算法的执行耗时会很多<br>Dijkstra 算法有点儿类似 BFS 算法，它每次找到跟起点最近的顶点，往外扩展。这种往外扩展的思路，其实有些盲目。<br><br>可以避免“跑偏”吗？<br>当遍历到某个顶点时，从起点到这个顶点的路径长度是确定的，记作 g(i)（i 表示顶点编号）<br>\t* 虽然从这个顶点到终点的路径长度是未知的，但可以用其他估计值来代替。<br>\t* 可以通过这个顶点跟终点之间的直线距离(欧几里得距离)，近似估算这个顶点跟终点的路径长度（注意：路径长度跟直线距离是两个概念）<br>\t* 把这个距离记作 h(i)（i 表示这个顶点的编号），专业的叫法是启发函数（heuristic function）。<br>\t* 因为欧几里得距离的计算公式，会涉及比较耗时的开根号计算，所以一般通过另外一个更加简单的距离计算公式，那就是曼哈顿距离（Manhattan distance）。<br>\t* 曼哈顿距离是两点之间横纵坐标的距离之和。计算的过程只涉及加减法、符号位反转，所以比欧几里得距离更加高效。<br><br>原来只是单纯地通过顶点与起点之间的路径长度 g(i)，来判断谁先出队列，现在有了顶点到终点的路径长度估计值，通过两者之和 f(i)=g(i)+h(i)，来判断哪个顶点该最先出队列。<br>综合两部分，就能有效避免“跑偏”。f(i) 的专业叫法是估价函数（evaluation function）<br><br>A* 算法就是对 Dijkstra 算法的简单改造<br>在 A* 算法的代码实现中，顶点 Vertex 类的定义，跟 Dijkstra 算法中的定义，稍微有点儿区别，多了 x，y 坐标，以及刚刚提到的 f(i) 值。图 Graph 类的定义跟 Dijkstra 算法中的定义一样。<br><br>A* 算法的代码主要有 3 点区别：<br><br> * 优先级队列构建的方式不同，<br>            A* 算法是根据 f 值（ f(i)=g(i)+h(i)）来构建优先级队列，<br>            Dijkstra 算法是根据 dist 值（g(i)）来构建优先级队列；<br><br>  * A* 算法在更新顶点 dist 值的时候，会同步更新 f 值；<br>  * 循环结束的条件也不一样。Dijkstra 算法是在终点出队列的时候才结束，A* 算法是一旦遍历到终点就结束。<br><br><br> A* 这是为什么不能找到最短路线呢？<br>要找出起点 s 到终点 t 的最短路径，最简单的方法是，通过回溯穷举所有从 s 到达 t 的不同路径，然后对比找出最短的那个。但回溯算法的执行效率非常低，是指数级的。<br><br>Dijkstra 算法在此基础之上，利用动态规划的思想，对回溯搜索进行了剪枝，只保留起点到某个顶点的最短路径，继续往外扩展搜索。动态规划相较于回溯搜索，只是换了一个实现思路，但它实际上也考察到了所有从起点到终点的路线，所以才能得到最优解。<br><br>\t* A* 算法之所以不能像 Dijkstra 算法那样，找到最短路径，主要原因是两者的 while 循环结束条件不一样<br>\t* Dijkstra 算法是在终点出队列的时候才结束，A* 算法是一旦遍历到终点就结束<br>\t* 对于 Dijkstra 算法，当终点出队列时，终点的 dist 值是优先级队列中所有顶点的最小值，即便再运行下去，终点的 dist 值也不会再被更新了。<br>\t* 对于 A* 算法，一旦遍历到终点，我们就结束 while 循环，这个时候，终点的 dist 值未必是最小值。<br>\t* A* 算法利用贪心算法的思路，每次都找 f 值最小的顶点出队列，一旦搜索到终点就不在继续考察其他顶点和路线了。<br><br>所以，它并没有考察所有的路线，也就不可能找出最短路径了。<br>","like_count":4},{"had_liked":false,"id":121380,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1565127834,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18744997018","product_id":100017301,"comment_content":"思考题<br>迷宫算法不适合A＊算法，A＊算法的本质是利用了终点的距离这一信息来辅助解决问题。离终点的距离对于能否走出迷宫不是一个有效信息。迷宫问题还是采用经典的遍历算法。","like_count":5},{"had_liked":false,"id":77732,"user_name":"且听疯吟","can_delete":false,"product_type":"c1","uid":1159459,"ip_address":"","ucode":"B010B16E5465F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/23/5df1f341.jpg","comment_is_top":false,"comment_ctime":1552987906,"is_pvip":false,"replies":[{"id":"28521","content":"你搞错了，f=g+h， g=dist, h=hManhattan","user_name":"作者回复","comment_id":77732,"uid":"1190123","ip_address":"","utype":1,"ctime":1553133863,"user_name_real":"gg"}],"discussion_count":4,"race_medal":0,"score":"18732857090","product_id":100017301,"comment_content":"仔细阅读了下代码，感觉代码中存在错误点，每次应该是取最小的 min(e.w + e.f)，但是在下面的代码中只看到了计算出了估值量f，并没有看到对其进行比较大小，不知道争哥觉得对不对？<br><br><br>if (minVertex.dist + e.w &lt; nextVertex.dist) { &#47;&#47; 更新 next 的 dist,f<br>        nextVertex.dist = minVertex.dist + e.w;<br>        nextVertex.f  = nextVertex.dist+hManhattan(nextVertex, vertexes[t]);<br>        predecessor[nextVertex.id] = minVertex.id;<br>\t\t<br>        if (inqueue[nextVertex.id] == true) {<br>          queue.update(nextVertex);<br>        } else {<br>          queue.add(nextVertex);<br>          inqueue[nextVertex.id] = true;<br>        }<br>      }<br>","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443829,"discussion_content":"你搞错了，f=g+h， g=dist, h=hManhattan","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553133863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109038,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ec/2e/49d13bd2.jpg","nickname":"SMTCode","note":"","ucode":"0D837A753E4FAB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53226,"discussion_content":"f是被隐含使用的：A*的优先队列是通过f值来构建的，Dijkstra的优先队列是通过dist值构建的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574147027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1010957,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6d/0d/e3fa096f.jpg","nickname":"拓","note":"","ucode":"AC1940ECC25436","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1109038,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ec/2e/49d13bd2.jpg","nickname":"SMTCode","note":"","ucode":"0D837A753E4FAB","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":157136,"discussion_content":"原来如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580445338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53226,"ip_address":""},"score":157136,"extra":""}]},{"author":{"id":1242092,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLnQfCfmXCPI1icrD2mVlIkY5AVY6MT3VMAYKjDXZYlBgUk6wxBj61vpK1Om3aRlj27R0RYbVoALGw/132","nickname":"张瑞浩","note":"","ucode":"3F37052E1D00FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272924,"discussion_content":"代码里的优先级队列的compare函数没有体现出来是用f比较的吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590377172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61669,"user_name":"皇家救星","can_delete":false,"product_type":"c1","uid":1326106,"ip_address":"","ucode":"89F1274A3835FE","user_header":"https://static001.geekbang.org/account/avatar/00/14/3c/1a/1806ef25.jpg","comment_is_top":false,"comment_ctime":1547771377,"is_pvip":false,"replies":[{"id":"21882","content":"那就是俩人造的概念 并没有太大意义。","user_name":"作者回复","comment_id":61669,"uid":"1190123","ip_address":"","utype":1,"ctime":1547773976,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"18727640561","product_id":100017301,"comment_content":"我记得以前看过的a*算法介绍还有close和open表，这里好像没提到？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436945,"discussion_content":"那就是俩人造的概念 并没有太大意义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547773976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66846,"user_name":"隆隆","can_delete":false,"product_type":"c1","uid":1407593,"ip_address":"","ucode":"2BE25EFF6C241F","user_header":"https://static001.geekbang.org/account/avatar/00/15/7a/69/0d54418c.jpg","comment_is_top":false,"comment_ctime":1550028948,"is_pvip":false,"replies":[{"id":"25403","content":"这个各有利弊，要具体看呢","user_name":"作者回复","comment_id":66846,"uid":"1190123","ip_address":"","utype":1,"ctime":1551232624,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"14434930836","product_id":100017301,"comment_content":"优化a*的话 是走扩大方块好 还是设置中转点好呢？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438942,"discussion_content":"这个各有利弊，要具体看呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551232624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143592,"user_name":"Geek_18b741","can_delete":false,"product_type":"c1","uid":1368496,"ip_address":"","ucode":"097BA0C2F44150","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlztvlBgajZMEph8AvkP2pfoqNCGtYSalIKgrCbCg0MWDZJgJwqVRfWA6cgIoZicL6dKibfK0zjsWg/132","comment_is_top":false,"comment_ctime":1571739485,"is_pvip":false,"replies":[{"id":"55993","content":"赞","user_name":"作者回复","comment_id":143592,"uid":"1190123","ip_address":"","utype":1,"ctime":1572231062,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10161674077","product_id":100017301,"comment_content":"对于dijkastra算法来说，当终点出队列的时候dist已经是最小值。所以找到的是最短路径。终于知道为什么bfs得到的是最短路径了。谢谢老师。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471612,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572231062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140989,"user_name":"蛋黄酱","can_delete":false,"product_type":"c1","uid":1050196,"ip_address":"","ucode":"2351562F282B68","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/54/16bb64d0.jpg","comment_is_top":false,"comment_ctime":1571101439,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"5866068735","product_id":100017301,"comment_content":"这篇代码还是没想起明白，来回看了几遍，发现更新的f始终没有被用到，但理论部分指出f用来替换更新的条件。<br>","like_count":1,"discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91317,"discussion_content":"em\nf 是 用来控制优先级队列出队的 ，就是 后面 queue.poll() 堆顶数据 那个操作\n你看了之前的dijkstra算法了吗。。。\n\n至于怎么影响的，就是 优先级队列的内部实现了--》用的小顶堆，意味着 堆顶元素是 堆中的最小数据（这里 就是最小 f 值）,queue的add和update、甚至del操作 都要进行堆化，更新堆的结构，保持 堆顶 始终是 最小 f 值 \n\n这么解释 不知道你理解没。。。\n","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1576826621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332313,"discussion_content":"赞！实际就是优先级小顶堆用到了f而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607155958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":91317,"ip_address":""},"score":332313,"extra":""}]},{"author":{"id":1901818,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eowbI239DoIfte0aXibrEGgU6n1Jl1ib1FJaK4mVUSOkQYsfqrdISf2JtiabqJ7iaPib36xJ35XAKd4syA/132","nickname":"Geek_519725","note":"","ucode":"AA55172CE0D50F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275489,"discussion_content":"看一下之前dijkstra的算法，里面有一个自定义的优先级队列实现，A*算法也是用的自定义优先级队列，两者一个是根据dist、另一个是根据f构建和更新队列的，所以在队列实现里面用到了f。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590721308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1677187,"avatar":"https://static001.geekbang.org/account/avatar/00/19/97/83/845b48e2.jpg","nickname":"Allen_","note":"","ucode":"CA5E00E4644CD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170927,"discussion_content":"代码里面没明显表示，priorityqueue里面用f来置顶下一个探索的点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581689046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61815,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1547808350,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5842775646","product_id":100017301,"comment_content":"对于有大片无变化的地形环境，是否可以采用更大的方块表示，同时增加其与邻接顶点的权值，已表示距离更远。这样可以减少顶点数，简化图的复杂程度，提高执行效率。不过可能造成行走路线中折线过多，不够平滑。","like_count":2},{"had_liked":false,"id":312859,"user_name":"Levon","can_delete":false,"product_type":"c1","uid":1472097,"ip_address":"","ucode":"F112832F5FDC73","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/61/33d13087.jpg","comment_is_top":false,"comment_ctime":1632062548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632062548","product_id":100017301,"comment_content":"老师，如果不能走斜线呢，该怎么处理","like_count":0},{"had_liked":false,"id":297174,"user_name":"ou no","can_delete":false,"product_type":"c1","uid":1107263,"ip_address":"","ucode":"64993ED20894B0","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/3f/7ab513e3.jpg","comment_is_top":false,"comment_ctime":1623342234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623342234","product_id":100017301,"comment_content":"有人研究跳表算法吗？如果是六边形地图用跳表算法怎么找跳点呢？","like_count":0},{"had_liked":false,"id":280917,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1614482196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614482196","product_id":100017301,"comment_content":"这篇讲得A星算法，比较了寻路算法，<br>总体比较清晰，但是每次想到要实现一个，<br>或者用它来解决某类问题，还是比较束手无策。","like_count":0},{"had_liked":false,"id":263847,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1986041,"ip_address":"","ucode":"5FBFE9772F2B1D","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4d/f9/1ce5555b.jpg","comment_is_top":false,"comment_ctime":1606280295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606280295","product_id":100017301,"comment_content":"老师提到了IDA*算法，原以为IDA*是A*的加强版，后来找到一个A*和IDA*可视化对比的网站，发现A*适应性很强，而IDA*在起点到终点间有障碍物情况下很难找到解。个人觉得还是比IDA*算法好用。","like_count":0},{"had_liked":false,"id":249686,"user_name":"🐻🔫🐸","can_delete":false,"product_type":"c1","uid":1308880,"ip_address":"","ucode":"40BABFD9D358BF","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/d0/ecc68a4f.jpg","comment_is_top":false,"comment_ctime":1600760738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600760738","product_id":100017301,"comment_content":"启发式算法还有个 GA 遗传算法，在 MTSP 问题上有不错的效果，最近正好接触了，感兴趣的可以去看看。有时候真的觉得这种仿生学算法太天才了！能想出这种方法，太牛逼了！","like_count":0},{"had_liked":false,"id":244804,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1598685357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598685357","product_id":100017301,"comment_content":"对于启发式，我的理解是告诉你一个优化的方向，朝哪个方向优化。实际生活中，我们找两个点之间最短距离，一般都是尽量沿着两点之间的直线走，所以启发式就是尽量让你沿着这条直线走。dijkstra 网上给的几乎所有的图例都是跟生活中地图的抽象是不一样的，假如把 dijkstra 用于生活中地图的抽象的话，那么其实就是回溯+剪枝的感觉，我要遍历那些不可能的方向，而加上启发式之后，就相当于把那些不可能的方向先直接给剪掉了。<br><br>接下去该怎么启发呢？那就加一个启发函数，针对生活中地图的抽象，直线距离告诉你怎么启发再合适不过了。<br>","like_count":0},{"had_liked":false,"id":226544,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1592136271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592136271","product_id":100017301,"comment_content":"思考题：用A*算法也可用于辅助求解迷宫问题，具体做法是：<br>(1)首先用A*算法求出与当前节点相邻，且离出口最近的那个节点，走到那个节点中；<br>(2)如果该节点可行，则继续用A*来寻找下一个离出口最近的节点<br>(3)如果该节点不可行，则仍回溯到上一个节点中，继续在剩余的相邻节点中，寻找下一个离出口最近的节点。","like_count":0},{"had_liked":false,"id":225564,"user_name":"林墨染","can_delete":false,"product_type":"c1","uid":1002945,"ip_address":"","ucode":"C90D508ABB9962","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/c1/d1337337.jpg","comment_is_top":false,"comment_ctime":1591788594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591788594","product_id":100017301,"comment_content":"一个题外话，很多算法或者数据结构的优化，都是基础的数据结构与算法与实际需求的结合，抽象出的针对某些特定场景的更优解。比如A*算法就是利用有终点距离这一个特性，提升了Dijkstra算法。","like_count":0},{"had_liked":false,"id":221352,"user_name":"郭星","can_delete":false,"product_type":"c1","uid":1182219,"ip_address":"","ucode":"8A0F5DF80E0C61","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/0b/985d3800.jpg","comment_is_top":false,"comment_ctime":1590480400,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1590480400","product_id":100017301,"comment_content":"在astar 方法 第15行代码中 为什么只对比 g(i)  不进行 f(i)的对比? f(i)的作用只是为了构建小顶堆使用吗?","like_count":0,"discussions":[{"author":{"id":1901818,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eowbI239DoIfte0aXibrEGgU6n1Jl1ib1FJaK4mVUSOkQYsfqrdISf2JtiabqJ7iaPib36xJ35XAKd4syA/132","nickname":"Geek_519725","note":"","ucode":"AA55172CE0D50F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275496,"discussion_content":"f在队列的构建、新增、更新时候都用到了，保证堆顶的是f值最小的元素，所以poll()出来的就是f值最小的元素。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590721814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220047,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1590143210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590143210","product_id":100017301,"comment_content":"迷宫问题感觉不太能用A*算法。困难在于定义顶点到终点之间的距离，因为某些顶点与终点是不可达的，不能用曼哈顿距离标识顶点到终点的距离。","like_count":0},{"had_liked":false,"id":207381,"user_name":"王      慈","can_delete":false,"product_type":"c1","uid":1298139,"ip_address":"","ucode":"EACC3D086674D8","user_header":"https://static001.geekbang.org/account/avatar/00/13/ce/db/bb1821b3.jpg","comment_is_top":false,"comment_ctime":1587076874,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587076874","product_id":100017301,"comment_content":"刨坑。思考题个人认为分为两部分，能不能找到解和能不能更快找到解。这里对迷宫做一个定义指起点到终点有唯一路径的图。<br>1. 能找到解。从起点入队列到访问到终点退出，说明访问的顶点集合中存在一子集能够构建出路径。这个毋庸置疑。<br>2. 能更快找到解。暴力和djistra的问题在于在找到一个可行解后并不会返回，而是试图继续找更优解。在唯一解问题中意义不大（甚至个人认为在大部分实际应用中意义都不大，能摸出去就不错了，差那三米两米的？）<br>对于A*算法，相比其他两种算法只是损失了最优性的保证，换来小部分时间成本（最坏情况下&#47;迷宫问题中复杂度没变，还是O(V+E)）。与其他算法的选用也需要权衡。但结果的优劣还与启发函数f的选用有关。举例，如果将启发函数换为和距离成负相关的函数，算法正常运行没有问题，但得到的结果大概率是“故意绕远路”的结果。但从另一个角度来看这也是一个优点，这带给了相比其他两种算法而言的灵活性（比如争哥之前举的考虑最短路径最少红绿灯最优路况等情况，可以通过实践得出不同的）","like_count":0},{"had_liked":false,"id":201986,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585884890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585884890","product_id":100017301,"comment_content":"应该也可以，虽然入口和出口在部分图里面可能没有直接相关性，可能还有相反方向走。但是再大方向上没问题，小方向上，那就采用回溯思想去解决了","like_count":0},{"had_liked":false,"id":179724,"user_name":"发霉的宅大人","can_delete":false,"product_type":"c1","uid":1738243,"ip_address":"","ucode":"6757E30FE5E48D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/03/95004954.jpg","comment_is_top":false,"comment_ctime":1582083861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582083861","product_id":100017301,"comment_content":"思考题：<br>迷宫问题我之前做过用A*算法，在计算f(i) = g(i) +h(i)的时候，g(i) 照常计算，但是h(i)我是忽略的障碍物去计算，这样依旧直选f(i)最小的路去走，不过会添加一个判断，判断下一步是不是障碍物，如果是障碍物就不走（跳过）。<br>会走不少死胡同......","like_count":0},{"had_liked":false,"id":174086,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1579957397,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1579957397","product_id":100017301,"comment_content":"谁能告诉我queue.Clear（）为什么一定要清理之后才能推出？？？？","like_count":0,"discussions":[{"author":{"id":1901818,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eowbI239DoIfte0aXibrEGgU6n1Jl1ib1FJaK4mVUSOkQYsfqrdISf2JtiabqJ7iaPib36xJ35XAKd4syA/132","nickname":"Geek_519725","note":"","ucode":"AA55172CE0D50F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275491,"discussion_content":"while循环条件，队列不为空一直循环。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590721559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1677187,"avatar":"https://static001.geekbang.org/account/avatar/00/19/97/83/845b48e2.jpg","nickname":"Allen_","note":"","ucode":"CA5E00E4644CD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170931,"discussion_content":"外面还有一个while loop呢 大兄弟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581689110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239546,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKWiaZb7a2JAcIVlXYuZ3iaPfSF6vBbg3yUps6LKpsZarftyXufMHYKJmMKzH3bIpVkDAVNXE9q0oOw/132","nickname":"Mr_scx","note":"","ucode":"28B5CE68A5A339","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159638,"discussion_content":"因为代码中的break 只能退出for循环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580718706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172653,"user_name":"zzq","can_delete":false,"product_type":"c1","uid":1234584,"ip_address":"","ucode":"03FE20B812D15D","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/98/e2d8f2a9.jpg","comment_is_top":false,"comment_ctime":1579246289,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579246289","product_id":100017301,"comment_content":"A*是否可以理解为通过启发函数引导算法的搜索方向，Dijkstra并不能引导方向只是在查找最短路径","like_count":0},{"had_liked":false,"id":170991,"user_name":"AllenGFLiu","can_delete":false,"product_type":"c1","uid":1221991,"ip_address":"","ucode":"90FA8A619A2629","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","comment_is_top":false,"comment_ctime":1578814096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578814096","product_id":100017301,"comment_content":"按照争哥给的原理和Java代码范例改写出Python的代码，在debug的时候，发现A*这种方式跟Dijkstra方式一样都会在0之后加入了1，也就说队列中排名靠前的还是那几个distance比较近的那些，只不过，A*代码中把判定是否等于to_vertex 放在了最后，所以最后打印出来的路径是0-&gt;5-&gt;10。感觉效率没提升多少，只是保证不跑偏而已。","like_count":0},{"had_liked":false,"id":168610,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1578122549,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1578122549","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":168463,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1578076930,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578076930","product_id":100017301,"comment_content":"迷宫问题可以借助A*算法来更快找到一个可以出去的路线，因为A*算法只是更改了试探路线的优先级，如果终止条件不变所有的路线还是会被试探到的，就比如本节的最短路线问题，如果终止条件还是终点从优先级队列中push出去，还是会找到最短路径，不对不一定，因为pop条件变了，不能保证t被pop出去时，比他里源点更近的都已经pop出去，很有可能某个到源点进但是离t远的点还没pop出去。 迷宫算法只要能出去就可以，如果能找到一个好的估价函数迷宫算法使用A*是可以更快的，但迷宫没什么规律，估价函数想不出来。","like_count":0},{"had_liked":false,"id":161214,"user_name":"Mew151","can_delete":false,"product_type":"c1","uid":1002201,"ip_address":"","ucode":"D4793F5874F345","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","comment_is_top":false,"comment_ctime":1576149490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576149490","product_id":100017301,"comment_content":"魔兽世界没有自动寻路功能","like_count":0},{"had_liked":false,"id":133275,"user_name":"Leedom","can_delete":false,"product_type":"c1","uid":1301344,"ip_address":"","ucode":"BC1240F2364DAD","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/60/17c224f6.jpg","comment_is_top":false,"comment_ctime":1568473331,"is_pvip":false,"replies":[{"id":"51218","content":"加油，多准备准备，一定有机会！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568588336,"ip_address":"","comment_id":133275,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1568473331","product_id":100017301,"comment_content":"真的好想去阿里巴巴啊，最近几天疯狂看你讲的东西，阿里三面hash table我理解成Java中的HashTable，所以回答的很烂，这几天看到你讲的才更加深刻，算法和数据结构真的很美妙，好想找到一份满意的工作啊，真的祈求上天让我能更靠近阿里一点，也不知道三面有没有过","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467331,"discussion_content":"加油，多准备准备，一定有机会！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568588336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1831324,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/f1/9c/cd12361d.jpg","nickname":"黑客时间","note":"","ucode":"7E22D76EECAC4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289728,"discussion_content":"楼主去阿里了没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594192377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504956,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/mkcNxKyJibOd8bsLpQRJ9Yjsew5yTBm2GTXUSkvwbwibMqPPMV9GbmXPzFIRC9iaX2s7HxvSryTLhGnrSogYqB7NQ/132","nickname":"kaisheng","note":"","ucode":"FD9EFEBEB7BFDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215852,"discussion_content":"最近我也在面阿里春招","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585390408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91322,"discussion_content":"“三面hash table我理解成Java中的HashTable，所以回答的很烂，”\n老铁 怎么说？？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576826903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70846,"discussion_content":"其实你准备了一番，准备去面阿里的话，不如去上海面一下Google","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575382048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1196864,"avatar":"https://static001.geekbang.org/account/avatar/00/12/43/40/e7ef18de.jpg","nickname":"嘉一","note":"","ucode":"8D16BD0B75B019","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34656,"discussion_content":"楼主去了阿里没有？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571212840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121383,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1565128730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565128730","product_id":100017301,"comment_content":"Dijkstra复杂度分为两部分，一部分是顶点，每个顶点最多入队列和出队列一次，复杂度是Vlog V，每条边最多更新一次，复杂度是E log V，和起来是(V+E)logV ,老师这样的分析是否正确？","like_count":0},{"had_liked":false,"id":115624,"user_name":"mrlay","can_delete":false,"product_type":"c1","uid":1041640,"ip_address":"","ucode":"385A1954ED3317","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e4/e8/a1703783.jpg","comment_is_top":false,"comment_ctime":1563677472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563677472","product_id":100017301,"comment_content":"A* 算法得到的结果不一定是最优解的原因是构建最小优先队列的条件从 dist 变成了 f(i), f(i)的大小是由 dist 和 Manhattan 共同决定的。","like_count":0},{"had_liked":false,"id":100665,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1559613282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559613282","product_id":100017301,"comment_content":"回头路：如果顶点之间路径是双向的，某个顶点的下一步有可能走到之前已经访问过的顶点","like_count":0},{"had_liked":false,"id":99775,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1559296884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559296884","product_id":100017301,"comment_content":"个人感觉迷宫问题，可以把A*算法稍微改造下：不用再求f值了，直接用dist就行，构建优先队列也用dist，循环结束条件同A*算法，遍历到终点就结束","like_count":0},{"had_liked":false,"id":99770,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1559295223,"is_pvip":false,"replies":[{"id":"36263","content":"回头路怎么定义的呢？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559611848,"ip_address":"","comment_id":99770,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559295223","product_id":100017301,"comment_content":"老师您好，if (minVertex.dist + e.w &lt; nextVertex.dist)这个条件是不是可以避免走回头路？？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452265,"discussion_content":"回头路怎么定义的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559611848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84150,"user_name":"xuery","can_delete":false,"product_type":"c1","uid":1027584,"ip_address":"","ucode":"F461B61BE06131","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/00/025f37e7.jpg","comment_is_top":false,"comment_ctime":1554794621,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1554794621","product_id":100017301,"comment_content":"迷宫问题应该也是可以借助A*算法。<br>首先建模让其能够使用A*算法，迷宫跟游戏地图我感觉还是有区别，对于迷宫的每个拐角抽象成一个顶点，相邻拐点之间的距离作为边；然后画一个（x,y）的坐标计算出每个点的坐标，这样就抽象成图了，<br>之后就可以使用A*算法快速的求解一条出路","like_count":0},{"had_liked":false,"id":84119,"user_name":"ldd","can_delete":false,"product_type":"c1","uid":1208157,"ip_address":"","ucode":"E8344FAFFE5CF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/5d/f0a19f09.jpg","comment_is_top":false,"comment_ctime":1554788542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554788542","product_id":100017301,"comment_content":"课后思考：<br>可以。迷宫问题原型是个二维数组 a[n][m]，0代表可以走通，1代表走不通；<br>第一步：先把二维数组转化带序号的二维数组 b[n][m]，a[i][j] 等于0，在b[n][m] 用序号表示，比如：a[0][1] = 0，a[1][1] = 0，那么 b[0][1] = 1，b[1][1] = 2；依次类推；<br>第二步：把数组b转化成图结构；因为“A*算法”实际是一种针对“图”的算法；比如 b[0][1] = 1，b[1][1] = 2，b[0][1] 跟 b[1][1] 是通的，就建立 1-&gt;2、2-&gt;1 的有向边；<br>第三步：给每个图的顶点构建坐标系，因为每一步的权重都是一样的，所以构建坐标系的时候直接用二维数组的下标即可。比如：顶点1 的坐标系 {0, 1}；顶点2 的坐标系 {1, 1}<br>至此，”迷宫问题“就转化成了“图的路径问题”，带入“A*算法”即可<br><br>不知道对不对，思考不对的地方，往争哥指出","like_count":0},{"had_liked":false,"id":82045,"user_name":"eleven","can_delete":false,"product_type":"c1","uid":1201374,"ip_address":"","ucode":"0DCA65A32F10C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/54/de/a439473b.jpg","comment_is_top":false,"comment_ctime":1554109387,"is_pvip":false,"replies":[{"id":"29789","content":"不是的，f用来构建小顶堆用的，更新dist值还是要通过原来dijkstra的松弛函数，也就是我的if判断语句","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554162303,"ip_address":"","comment_id":82045,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554109387","product_id":100017301,"comment_content":"看了多遍代码，发现@且听疯吟说的问题确实存在，在更新next 的 dist,f时的if判断应该是minVertex.f + e.w &lt; nextVertex.f，这样才符合a*算法的根据f 值（也就是刚刚讲到的 f(i)=g(i)+h(i)）来构建优先级队列吧，希望王争老师解答","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445442,"discussion_content":"不是的，f用来构建小顶堆用的，更新dist值还是要通过原来dijkstra的松弛函数，也就是我的if判断语句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554162303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78628,"user_name":"且听疯吟","can_delete":false,"product_type":"c1","uid":1159459,"ip_address":"","ucode":"B010B16E5465F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/23/5df1f341.jpg","comment_is_top":false,"comment_ctime":1553185766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553185766","product_id":100017301,"comment_content":"了解了，你前面用的是priority_queue，晓得了。","like_count":0},{"had_liked":false,"id":76174,"user_name":"🌟 我係冬阳 🐑","can_delete":false,"product_type":"c1","uid":1236337,"ip_address":"","ucode":"F811DB35BE4109","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/71/806bd4a8.jpg","comment_is_top":false,"comment_ctime":1552544379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552544379","product_id":100017301,"comment_content":"建议没接触过Astar算法的，可以先去youtube看看其他人的Astar作为入门。然后再来这里看，就能理解了。","like_count":0},{"had_liked":false,"id":73504,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551918761,"is_pvip":false,"replies":[{"id":"26785","content":"有障碍的就不会有连线，也就不存在路径。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551923888,"ip_address":"","comment_id":73504,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1551918761","product_id":100017301,"comment_content":"中间有障碍物怎办","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442118,"discussion_content":"有障碍的就不会有连线，也就不存在路径。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551923888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/53/1ed0ee40.jpg","nickname":"Hanhui","note":"","ucode":"2D951D89E6ED4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543536,"discussion_content":"问了想问的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641198396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73051,"user_name":"Lucus","can_delete":false,"product_type":"c1","uid":1198800,"ip_address":"","ucode":"CE8EB70CB9D9F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/d0/d319c44a.jpg","comment_is_top":false,"comment_ctime":1551785683,"is_pvip":false,"replies":[{"id":"26796","content":"不错的想法，我记下来了，我分享到我的公众号“小争哥”里","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551924560,"ip_address":"","comment_id":73051,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551785683","product_id":100017301,"comment_content":"我知道有索引的mysql，mongodb，pg，es，hive<br>哪位大神给总结一下完整的","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441891,"discussion_content":"不错的想法，我记下来了，我分享到我的公众号“小争哥”里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551924560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62180,"user_name":"辰陌","can_delete":false,"product_type":"c1","uid":1245043,"ip_address":"","ucode":"961C874D36C958","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/73/8c64ed7f.jpg","comment_is_top":false,"comment_ctime":1547971168,"is_pvip":false,"replies":[{"id":"24176","content":"Astar算法设计的初衷可能就不是找最优解吧。当然，不排除在某些场景下、针对特殊的启发式函数设计，可以找到最优解。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550479865,"ip_address":"","comment_id":62180,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547971168","product_id":100017301,"comment_content":"请问一下老师，Astar算法，启发式距离的设置好像是有一定原则的，如果在满足一致性原则的基础之上，然后再抛除最后一步停止准则的影响的情况下，应该是可以找到最优解的吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437125,"discussion_content":"Astar算法设计的初衷可能就不是找最优解吧。当然，不排除在某些场景下、针对特殊的启发式函数设计，可以找到最优解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550479865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62063,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1547900291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547900291","product_id":100017301,"comment_content":"像我年龄35岁，学历是大专，您觉得有必须自考研究生之类的么？升级一下学历？自考类不知道去大公司是都承认？<br>英语不太好，只能勉强看懂……","like_count":0},{"had_liked":false,"id":62060,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1547899755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547899755","product_id":100017301,"comment_content":"非常感谢……","like_count":0},{"had_liked":false,"id":62025,"user_name":"yongxiang","can_delete":false,"product_type":"c1","uid":1082351,"ip_address":"","ucode":"16D826814D4C4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/ef/445e1421.jpg","comment_is_top":false,"comment_ctime":1547885437,"is_pvip":false,"replies":[{"id":"23148","content":"没有关系的。你可以类比地图中两个点的坐标，直线距离，已经两点之间的路径长度。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1549178876,"ip_address":"","comment_id":62025,"utype":1}],"discussion_count":1,"race_medal":3,"score":"1547885437","product_id":100017301,"comment_content":"王争老师，这里的每条边的权重 w 跟两个顶点之间的 x ，y 有相关关系吗？还是说可以随意定义？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437074,"discussion_content":"没有关系的。你可以类比地图中两个点的坐标，直线距离，已经两点之间的路径长度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549178876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61956,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1547865577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547865577","product_id":100017301,"comment_content":"老师，我在网上看到说a star算法启发函数选的好的话，估计路径比实际路径短的话，是可以找到最短路径的。老师，你能举个例子说明找到的不是最短路径吗，在估计路径比实践路径短的情况下？","like_count":0},{"had_liked":false,"id":61865,"user_name":"fy","can_delete":false,"product_type":"c1","uid":1152186,"ip_address":"","ucode":"EDB661C3A05910","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jsMMDDzhbsTzhicsGZiaeV0PWSnAS0fBlb1r6CsuB32vr3hRwV9UubmfHQx45v7jtaXajPlQ8kQ17b3zpQzHmqVw/132","comment_is_top":false,"comment_ctime":1547822529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547822529","product_id":100017301,"comment_content":"老师，刷leetcode刷的有点苦逼，刷不动，你的专栏就看到排序就中断了，但都记好了笔记。","like_count":0},{"had_liked":false,"id":61711,"user_name":"蓝心","can_delete":false,"product_type":"c1","uid":1236484,"ip_address":"","ucode":"2230EB2DEB6DF6","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/04/a597d056.jpg","comment_is_top":false,"comment_ctime":1547780074,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1547780074","product_id":100017301,"comment_content":"21行代码：queue.update(nextVertex); 是不是没有这个API 。要删除在插入呢<br>","like_count":0,"discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91327,"discussion_content":"这个queue是要自己实现的。。。利用小顶堆","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576827408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}