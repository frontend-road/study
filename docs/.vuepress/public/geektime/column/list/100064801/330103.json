{"id":330103,"title":"20 | 综合案例：如何解决约会难题？","content":"<p>你好，我是范学雷。</p><p>今天是我们正式篇的最后一讲了，我们这场密码学之旅就要暂时结束了。还记得我们第一次的讨论吗？那时候，我们讨论了牛郎织女约会会碰到的困难，详细地分析了每一个障碍。</p><p>当时，我们说密码学可以解决牛郎织女的约会难题。这一路走来，每多学习一点知识，我都会再提一次这个难题，不知道你对这个问题，是不是有了很多新的认识和想法？</p><p>现在，我们已经学习了对称密码系统的基本框架了，一切有终有始，我们是时候回头看看，能不能使用我们学到的知识，来帮助牛郎织女解决好他们的约会问题了。</p><h2>回顾一下约会难题</h2><p>我们先来看一看第一次讨论时，我们罗列出来的问题。牛郎和织女需要考虑的问题主要有五点：</p><ul>\n<li>问题一：怎么证明双方的身份？</li>\n<li>问题二：怎么能使消息不泄露？</li>\n<li>问题三：怎么防止内容被篡改？</li>\n<li>问题四：怎么确保信件能收到？</li>\n<li>问题五：怎么防止翻脸不认账？</li>\n</ul><p>然后，我们通过这五个问题，分析出来了信息安全的六个需求：</p><ul>\n<li>需求一：识别身份，确定牛郎就是牛郎；</li>\n<li>需求二：认证身份，验证牛郎就是牛郎；</li>\n<li>需求三：管理特权，授予织女看信权利；</li>\n<li>需求四：信息保密，没有权限不能看信；</li>\n<li>需求五：信息完整，保护内容不被篡改；</li>\n<li>需求六：信息可用，保持信息获取能力。</li>\n</ul><p>我们还提到，一般地，对称密码技术可以通过加密、解密，解决“机密性”的问题；单向散列函数可以解决“完整性”问题；非对称密码技术可以解决授权和认证的问题。</p><!-- [[[read_end]]] --><p>我们通过对这三项基础技术的综合运用，就可以提高系统的“可用性”。虽然，非对称密码技术不在这个专栏的讨论范围，不过，这并不妨碍我们在对称密码技术里寻找替代方案。</p><p>下面，我们就分别来看看这些问题可以怎么解决。</p><h2>怎么解决机密性问题？</h2><p>既然，对称密码技术可以解决“机密性”的问题，那么，想要使用对称密码技术，首先就要有对称密钥，而且牛郎和织女都要持有相同的密钥。接下来的问题是，对称密钥怎么来的呢？</p><h3>对称密钥怎么来的？</h3><p>对称密钥的两个来源，一个是用户持有的秘密，另一个是计算机持有的秘密。</p><p>对于计算机持有的秘密来说，每一个计算机持有的秘密都是不同的。即使牛郎和织女都有计算机，独自使用各自的计算机持有的秘密也不能直接演化出两个相同的对称密钥。</p><p>所以，我们能想到的，就是从用户持有的秘密着手，看看有没有两个人都知道的秘密，然后各自演化出两个相同的对称密钥。</p><p>牛郎和织女有没有共同的秘密呢？这个我们当然无法知晓，但是，我们就假设他们有共同的秘密，比如两个孩子的生辰八字。一般来说，一个人的生辰八字是敏感信息，是需要保密的。</p><p>牛郎和织女有一个男孩一个女孩，我们假设男孩的生辰八字是“庚子辛巳乙亥丙子”（庚子年，辛巳月，乙亥日，丙子时），女孩的生辰八字是“戊戌庚申甲申甲子”（戊戌年，庚申月，甲申日，甲子时）。</p><p>这样，这个共同的秘密就可以用来推演对称密钥了。怎么推演这个对称密钥呢？</p><p>还记得我们说过的，怎么使用口令生成对称密钥吗？在这里，生辰八字就可以当作口令用，基于口令的密钥推导算法可以使用PBKDF2。下一步面临的问题是，两个人共有的小秘密可能很多，织女怎么才能知道牛郎选择使用孩子的生辰八字这个两人共有的秘密？</p><p>还有，使用的是哪一个孩子的生辰八字？生辰八字又是怎么推演出密钥的？</p><p>其实，问题很好解决，牛郎在信件里告诉织女这些信息就行了。这些信息并不需要加密，使用人人都能看的明文就行，这就是所谓的算法公开。我们讲过，算法公开并不会影响数据的安全性。</p><p>好，现在，让我们把基本思路整理一下：</p><ul>\n<li>牛郎要给织女发送约会信息，“织女，七月初七晚七点，鹊桥相会。不见不散。牛郎字”。这部分是私密信息，需要保密。</li>\n<li>牛郎要告诉织女怎么解密信息，这一部分是公开信息。这部分信息包括：</li>\n</ul><p>1.使用两个孩子的生辰八字作为推导对称密钥的秘密；<br>\n2.使用什么密钥推导算法来从共有的秘密推导对称密钥；<br>\n3.使用什么对称密钥算法来加密、解密约会信息。</p><p>现在有了推演对称密钥的基本思路了，接下来，我们要考虑算法的细节问题了。那么，牛郎该选用哪些基本的密码学算法？</p><h3>怎么选择密码学算法？</h3><p>这个问题，其实就是说，在算法的选择上，我们要考虑什么问题。</p><p>首先，我们要确定所需的安全强度。如果牛郎希望约会信息的秘密维持得越长越好，256位的安全强度是首选。</p><p>然后，我们来确定所需的密码算法。牛郎要发送的信息，既包含私密信息，又包含公开信息。私密信息和公开信息，都不能被篡改。这种情况下，我们可以使用带关联数据的认证加密算法，也就是AEAD算法。AEAD算法可以从现在流行的三种算法里面挑选一个。</p><p>结合安全强度的要求，我们可以选择ChaCha20/Poly1305算法。</p><p>然后，我们去查查ChaCha20/Poly1305算法需要的条件。这个算法需要四个输入数据：</p><ol>\n<li>一个256位的对称密钥；</li>\n<li>一个96位的随机数；</li>\n<li>代加密数据明文，也就是私密信息；</li>\n<li>关联数据，也就是公开信息。</li>\n</ol><p>怎么推导出这个256位的对称密钥呢？也就是使用我们上面说到的基于口令的密钥推导算法。</p><p>这个推导算法，我们可以挑选PBKDF2，接着，我们要再去查查PBKDF2算法需要的条件。这个算法需要五个输入数据：</p><ol>\n<li>用户的口令；</li>\n<li>HMAC算法；</li>\n<li>盐值，类似于我们讨论过的初始化向量；</li>\n<li>迭代次数;</li>\n<li>导出密钥长度。</li>\n</ol><p>接下来，我们还要选择PBKDF2使用的HMAC算法。先看看安全强度，我们需要选择至少256位安全强度的算法。HMAC算法的强度，通常是由对称密钥决定。所以，我们可以选用最流行的HmacSHA256算法，推导出256位的密钥。</p><p>PBKDF2算法需要的盐值，我们随机选取一个数值就可以了，迭代次数不妨就选用一次。这样，我们就可以使用PBKDF2算法了。它的输入数据看起来像下面的样子：</p><ol>\n<li>用户的口令：“庚子辛巳乙亥丙子戊戌庚申甲申甲子”；</li>\n<li>HMAC算法：“HmacSHA256”；</li>\n<li>盐值：“3B 07 A6 CB CF 98 48 F0 68 11 28 40 E7 6F 98 66”</li>\n<li>迭代次数: 1；</li>\n<li>导出密钥长度：256位。</li>\n</ol><p>有了这些输入数据，我们就可以根据PBKDF2算法推导出256位的对称密钥了。</p><pre><code>37 af 4f bd dd 22 7c f3 bc 66 d4 c0 2c 3d e4 5a\ne4 b0 da f4 58 0f 37 19 b2 31 93 63 fc 61 61 9d\n</code></pre><p>有了对称密钥，我们再去看ChaCha20/Poly1305的运算。在ChaCha20/Poly1305算法里，96位的随机数，还是随机生成一个就可以了。它的输入数据看起来像下面的样子：</p><ol>\n<li>一个256位的对称密钥：使用上面PBKDF2算法推导的对称密钥；</li>\n<li>一个96位的随机数：“0A 00 00 00 00 00 00 4B 00 00 00 ED”；</li>\n<li>数据明文：“织女，七月初七晚七点，鹊桥相会。不见不散。牛郎字”；</li>\n<li>关联数据：未知。</li>\n</ol><p>除了关联数据外，我们其他的数据都已经就绪了。那么，关联数据该怎么定义呢？</p><h3>怎么定义通信协议？</h3><p>其实，这就需要自己定义关联数据，也就意味着我们要定义自己的通信协议。通信协议里，我们一定要定义清楚通信双方都要遵循的格式和规范。在这个案例里，关键就是要告诉织女这封信件的格式，以及怎么解密这封信件。</p><p>其中，需要包含我们上述提到的算法的选择，以及对应的参数。</p><p>大致地，我们可以这么写这封信：</p><blockquote>\n<p>这封信使用ChaCha20/Poly1305算法加密，随机数选取的是“0A 00 00 00 00 00 00 4B 00 00 00 ED”(十六进制表示)，关联数据是本信件内容除去加密数据之外的所有数据，加密密钥是使用PBKDF2算法推导出256位的对称密钥。PBKDF2算法的用户口令，使用的男孩和女孩的生辰八字，HMAC算法使用的是HmacSHA256算法，盐值选取的是“3B 07 A6 CB CF 98 48 F0 68 11 28 40 E7 6F 98 66”(十六进制表示)，迭代一次。此后为加密数据。6E 2E 35 9A 25 68 F9 80 41 BA 07 28 DD 0D 69 81 …… 5A F9 0B BF 74 A3 5B E6 B4 0B 8E ED</p>\n</blockquote><p>有了这封信，ChaCha20/Poly1305算法要使用的关联数据也就确定下来了。就是信件里，除了加密数据之外所有的数据。有了关联数据，我们就可以执行ChaCha20/Poly1305的运算了。</p><p>织女收到这封信后，就可以按照信件明文部分的描述，结合自己掌握的两个孩子的生辰八字，解密加密信息，获取私密的约会信息了。</p><p>很明显，私密的约会信息被隐藏了起来，即使有人截获了这封信，也不会知道私密信息的内容。这个协议很好地解决了第二个问题，也就是怎么能使消息不泄露的问题。</p><h2>约会问题都解决了吗？</h2><p>那么，其他的问题呢？我们依次来看一看其他的四个问题。</p><p>第一个问题，怎么证明双方的身份？</p><p>由于孩子的生辰八字只有孩子的父母知道，牛郎知道，只有织女才能读到这封信的约会信息；而织女也知道，只有牛郎才能这样加密约会信息。身份证明的问题，我们就解决了。</p><p>第三个问题，怎么防止内容被篡改？</p><p>由于这封信采用的是带关联数据的认证加密算法，无论是信的私密内容，还是公开内容，都没有办法被篡改而不被察觉。信息完整的问题，我们也解决了。</p><p>第四个问题，怎么确保信件能收到？</p><p>遗憾的是，这个问题并没有彻底地得到解决。由于发信人、收信人以及信件的真实内容都没有泄露，别人截留这封信件的动机可能就没有那么强烈，传递信件的喜鹊被请去吃酒喝茶的概率也会急剧减少。</p><p>即便喜鹊被请去了，也不能解密私密信息的内容，无论是利诱还是威逼，都没有用。这样，喜鹊的人身安全风险急剧降低。从这个方面说，这个方案提高了信件送达的概率。剩下的，就要依靠喜鹊飞越银河的能力了。</p><p>第五个问题，怎么防止翻脸不认账？</p><p>由于孩子的生辰八字只有孩子父母知道，织女收到信后，她就知道，只有牛郎才能这样加密约会信息。因为使用的是只有这两个人才知道的共同秘密，牛郎就不能抵赖说不是自己发送的信件。</p><p>可是，牛郎怎么能够确认，织女收到了信，还不能抵赖说没收到呢？我们把这个悬念留作今天的思考题。你可以好好地思考一下。</p><h2>Take Away（今日收获）</h2><p>今天，我们回顾了一下牛郎织女约会这个案例，讨论了怎么使用我们前面学过的密码学知识来解决具体的问题。</p><p>为什么我们讨论的方案能解决牛郎织女约会的问题呢？最基本的原因主要有两点：</p><ul>\n<li>使用共有的秘密，这样就解决了身份认证的问题；</li>\n<li>使用AEAD算法，这样就同时解决了数据完整性问题和数据机密性问题，同时提高了信息的可用性。</li>\n</ul><p>其实，更流行的方案是使用基于非对称密钥的密钥交换技术，或者类似于Kerberos的基于对称密钥的密钥交换技术，不过，这两个方案都不在我们的讨论范围里。</p><p>有兴趣的话，你可以找一下相关的资料看一看，想一想基本的思路。今天的讨论，主要是让你感受一下密码学解决问题的思路，尤其是怎么把多种算法结合起来解决具体的问题。</p><h2>思考题</h2><p>正如我们前面提到的，今天我们讨论的方案，只能解决牛郎不能翻脸不认账的问题，还没有解决织女翻脸不认账的问题。织女翻脸不认账的问题，该怎么解决呢？</p><p>也就是说，牛郎怎么能够确认，织女收到了信，还不能抵赖说没收到呢？我们上述的方案该怎么改进？或者你有没有其他的方案？</p><p>欢迎在留言区留言，记录、讨论你的想法。</p><p>好了，课程到这里，就基本结束了，下一次我们结束语见。</p>","neighbors":{"left":{"article_title":"19 | 量子时代，你准备好了吗？","id":329292},"right":{"article_title":"结束语 | 深挖坑、广积粮","id":331653}},"comments":[{"had_liked":false,"id":322917,"user_name":"草帽寒风","can_delete":false,"product_type":"c1","uid":1216984,"ip_address":"","ucode":"49251EE81F4E58","user_header":"","comment_is_top":false,"comment_ctime":1637657933,"is_pvip":false,"replies":[{"id":"117244","content":"是的。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1637681948,"ip_address":"","comment_id":322917,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5932625229","product_id":100064801,"comment_content":"用对称密钥实现不可抵赖性感觉还是不太行，还是得用非对称加密，不然织女可以利用共同知识伪造信息，说是牛郎发来的。","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532776,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637681948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274901,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1611214954,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5906182250","product_id":100064801,"comment_content":"在实际应用不可抵赖性更多是发送方发的信息不可抵赖，也就是说发送方A把信息发送给接收方B了，那么A是不可抵赖的，AEAD的话就是我们具有共同的秘密，非对称加密的私钥只有发送方有可以确认身份不可抵赖的。但对于接收方是否收到信息不可抵赖在实际场景很少涉及。在网络里面会选中是否可靠的通信协议来保证通信的质量。","like_count":2},{"had_liked":false,"id":296473,"user_name":"Pure White","can_delete":false,"product_type":"c1","uid":1000780,"ip_address":"","ucode":"9E5D7BCB6E08EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/4c/cdf337ac.jpg","comment_is_top":false,"comment_ctime":1622990565,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1622990565","product_id":100064801,"comment_content":"感觉仍然没办法传递，中间人直接截获信件，重新写一封信给织女就完事了","like_count":0,"discussions":[{"author":{"id":2325111,"avatar":"https://static001.geekbang.org/account/avatar/00/23/7a/77/bb17e879.jpg","nickname":"往事,优雅而已","note":"","ucode":"737776381821F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531593,"discussion_content":"很容易被察觉是假的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637336853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272840,"user_name":"John","can_delete":false,"product_type":"c1","uid":1122618,"ip_address":"","ucode":"7E8E915C547725","user_header":"https://static001.geekbang.org/account/avatar/00/11/21/3a/2d8b765a.jpg","comment_is_top":false,"comment_ctime":1610329310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610329310","product_id":100064801,"comment_content":"&gt; 牛郎和织女有没有共同的秘密呢？这个我们当然无法知晓，<br>&gt; 但是，我们就假设他们有共同的秘密，比如两个孩子的生辰八字。<br>&gt; 一般来说，一个人的生辰八字是敏感信息，是需要保密的。<br>能知道孩子生辰八字(出生时间)的人可能会很多，除了其父母，还可能有稳婆，邻居，亲戚，朋友，甚至是一直监视牛郎织女的王母娘娘的手下...<br>也许可以在附加信息中提示对方以某年月日说过的某句不同寻常的对话作为共同秘密。<br><br>这个情况似乎也正说明要事先维护一个共同的秘密比较困难。<br>与现实应用比，牛郎和织女就是没有(也不可能有)CA帮助他们确认彼此的身份。","like_count":0},{"had_liked":false,"id":272396,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1610076842,"is_pvip":true,"replies":[{"id":"98750","content":"+ 如果收信地址不详，一律截留。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1610084940,"ip_address":"","comment_id":272396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610076842","product_id":100064801,"comment_content":"王母娘娘的对策：<br><br>* 把指向织女住所的路标改成指向别的地方<br>* 发现是飞往织女住所的喜鹊一律请去喝茶<br>* 发现有些地方在偷偷给织女转发二次打包的信件，于是规定收信的单位必须先报备，不报备不允许收信<br>* 发现运送采用未知加密手段的信件的喜鹊一律请去喝茶，宁可错杀不可放过<br>","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513265,"discussion_content":"+ 如果收信地址不详，一律截留。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610084940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272389,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1610075477,"is_pvip":true,"replies":[{"id":"98749","content":"哈哈，常用的迭代数目是1万。我选用1次的时候，还在想，会不会有人问1次安全强度够不够？1次的安全强度是不够的，但是要讲清楚迭代次数的影响，需要很多篇幅。要了解更深入，自己去查查PBKDF2的规范吧。具体到这个例子，迭代次数还不是最大的安全问题。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1610084688,"ip_address":"","comment_id":272389,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610075477","product_id":100064801,"comment_content":"PBKDF2只迭代一次是认真的吗...","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513262,"discussion_content":"哈哈，常用的迭代数目是1万。我选用1次的时候，还在想，会不会有人问1次安全强度够不够？1次的安全强度是不够的，但是要讲清楚迭代次数的影响，需要很多篇幅。要了解更深入，自己去查查PBKDF2的规范吧。具体到这个例子，迭代次数还不是最大的安全问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610084688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272364,"user_name":"小动物","can_delete":false,"product_type":"c1","uid":1031683,"ip_address":"","ucode":"BCC35CE768EB99","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/03/404edf37.jpg","comment_is_top":false,"comment_ctime":1610069535,"is_pvip":false,"replies":[{"id":"98751","content":"看看TCP协议怎么设计的？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1610085034,"ip_address":"","comment_id":272364,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1610069535","product_id":100064801,"comment_content":"通过回执来回确认来判断是否都收到了信息。但这会有鸡生蛋蛋生鸡的问题，我怎么知道对方知道我知道了。所以要多次确认。但具体几次确认才能完全确认有些绕迷糊了。<br>若真的无限循环了，那就可以通过概率来确认，每次消息发送时附带上时间戳，目的是让双方都知道每次消息传输的耗时。然后通过耗时来估计最后一条消息是否在预定时间前送达了。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513256,"discussion_content":"看看TCP协议怎么设计的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610085034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031683,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/03/404edf37.jpg","nickname":"小动物","note":"","ucode":"BCC35CE768EB99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340728,"discussion_content":"Tcp的最后一次握手若没送达，后续是会有补救措施的。但牛郎织女已无补救了，若第三次没有送达，这织女并不知道牛郎已经知道自己收到信了。日期到了后，不一定能见到面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610110127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272338,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1610037680,"is_pvip":true,"replies":[{"id":"98882","content":"哈哈，织女关喜鹊的动机是什么？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1610302025,"ip_address":"","comment_id":272338,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610037680","product_id":100064801,"comment_content":"让喜鹊带一封回执信回去。但是如果织女收到信后把喜鹊关起来，那就没办法了。","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513246,"discussion_content":"哈哈，织女关喜鹊的动机是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610302025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}