{"id":571986,"title":"03 | 相互对比：可观测性和传统监控有什么区别？","content":"<p>你好，我是翁一磊。</p><p>上节课，我们了解了可观测性的基本概念，这节课我们重点介绍在进行调试或者问题排查的时候，使用可观测性工具和使用传统监控工具有什么不同。通过这种对比，相信你可以更好地理解可观测性和传统监控的区别。</p><h2>传统监控的问题排查方法</h2><h3>构建仪表盘</h3><p>从运维的角度来看，肯定少不了通过仪表盘来对系统进行监控。传统的监控系统主要用于收集和汇总一定时间间隔内的性能指标，运维同学需要依靠这些指标的变化趋势来分析系统的性能，基于过往的经验判断系统是否正常，哪里可能有问题；或者通过设定监控指标的阈值进行告警。</p><p>将这些指标以图表形式展现出来，各种各样图表的组合以及自定义的视图便构成了一个个仪表盘。我们通常会为每一个系统服务设置一个静态的仪表盘，通过它了解系统的运行状态。</p><p>然而，当我们在审视仪表盘的各项视图，或是收到告警的时候，我们知道某项指标超出了阈值（比如生产环境的集群 CPU 平均使用率超过了 90%），但却不能完全了解系统究竟发生了什么。换句话说，不知道是什么导致了 CPU 的平均使用率过高。</p><p>另一方面，当我们想使用仪表盘来进一步分析问题的时候，会受制于这些仪表盘的预设条件，只能查看预设的维度；如果想分析其他的维度，可能就进行不下去了。因为这个维度的标签很可能并没有提前被添加进来，也就不能提供数据的聚合了。</p><!-- [[[read_end]]] --><h3>使用仪表盘定位故障</h3><p>让我们再来看一个更加具体的例子。如果你是运维工程师，你应该会很熟悉下面这样的场景。</p><p>这是一个工作日的早晨，你坐到办公桌前，打开电脑，首先要做的事情就是看一下目前系统的整体情况。于是你开始浏览一组配置好的仪表盘，或者一个大屏，希望可以快速地看到系统的各个方面、各种组件以及它们的健康状态。</p><p>你查看着仪表盘上的各个图表和相关指标，突然发现仪表盘左下角某个区域的曲线超过了设定的基线，根据你的经验，你会感觉这是数据库的问题，因为之前也发生过类似的症状。于是你快速地查看了一下数据库的状态，想要确认你的怀疑。果不其然，你的怀疑被证实了，紧接着你马上处理和解决了问题。</p><p>类似地，你的脑海中可能还记录了很多发现问题模式的组合。随着时间的推移，你已经学会了通过观测仪表盘中的各种特定指标来预测问题的来源。你可以问问自己，在排查故障的全过程中，当你在系统的各个组件之间跳转的时候，你在多大的程度上依赖这些模式的组合甚至说是你的直觉？通常，我们重视这种直觉，多年来也确实证实它可以给我们带来很多便利和好处。</p><h3>使用传统监控排查故障的局限性</h3><p>然而现如今，随着容器化的趋势、容器编排平台（例如 Kubernetes）的兴起、系统架构向微服务的转变、混合持久化（多种数据库，消息队列）的普遍使用，同时服务网格的引入、自动弹性伸缩实例的流行，甚至是无服务器（Serverless）的出现以及无数相关的 SaaS 服务的涌现，要将这些不同的工具串在一起形成一个现代系统体系结构，可能意味着一个请求在到达你控制的代码时，已经执行了多次跳转。</p><p>在云原生系统中，进行调试最困难的不再是理解代码的运行方式，而是找到有问题的代码在系统中的位置。这时候，通过仪表盘来查看哪个节点或服务速度较慢是不太可能的，因为这些系统中的分布式请求经常在不同的节点中循环，要在这些系统中找到性能瓶颈非常具有挑战性。当某个组件或者服务变慢了，一切都变慢了。</p><p>更有挑战性的是，因为云原生系统通常作为平台运行，代码可能存在于你甚至无法控制的系统中（比如云上的云原生服务或是 PaaS 资源）。</p><p>在现代世界中，每个请求都有可能跨越任意数量的服务和机器，这让与这些请求相关的几十个指标产生分裂，如果我们想推断在这个过程中各种请求跳转发生了什么，就必须将这些相关的指标都连接起来。而如果继续通过传统的设定阈值的方式进行故障定位，除非你能提前了解可能会在哪些节点出现问题，否则你将完全不知道故障是如何发生的，甚至都没法设定相关的阈值。</p><h3>传统监控只能解决 Known-Unknowns的问题</h3><p>这种传统的监控方法是完全被动的，但是许多团队接受并且一直在使用这种最简单的方法排除故障。所以你会发现，有时候自己总是在被动响应、不停地四处灭火。</p><p>由于业务架构微服务化，加上日益普及的敏捷开发模式，业务的迭代速度变得非常快，这会导致仪表盘中配置的各种指标随着时间快速失效。结果就是，以往的告警和经验模式逐渐失去作用。每次出现故障，复盘的结果就是再增加一些指标或是一些告警，然而这些告警将来可能再也不会被触发。</p><p>因为本质上来说，依赖传统的监控系统，解决的是 Known-Unknowns 的问题（即你能够感知、但是不理解的问题）。比如说 CPU 使用率达到 90% 触发了告警，但却不清楚是什么原因导致了 CPU 的使用率如此之高。对于越来越多第一次发生的事情，你不可能知道这些本来你就不知道的情况，即 Unknown-Unknowns（即你既不理解、也没有感知的问题）。</p><p>从过去的经验来看，我们面对的系统往往是一个单一的应用，系统的所有组件可能都是我们自己部署的，我们对它们非常熟悉和了解。你可以把不同来源的数据通过直觉整合起来，形成自己对问题的判断。</p><p>在过去很长一段时间里，我们都认为它是最正常的运维行为。然而，监控毕竟是一种被动反应性方法，它最适合检测已知的问题和过去遇到过的情况。但是，随着系统复杂性的不断增加，系统性能问题的背后，涉及越来越繁多的相关性和可能性，很多问题超出了任何个人或团队能够直观理解的范畴，所以是时候引入突破这种被动和限制性的工具和方法了。</p><h2>通过可观测性进行问题排查</h2><p>这时候可观测性就该出场了。可观测性的概念我们前面也讲过，它的重点就是通过查看和分析高维度和高基数数据，发现埋藏在复杂系统架构中的隐藏问题，而且<strong>不需要事先预测问题可能发生在哪里，以及问题发生的模式，这是可观测性和监控的第一个区别。</strong></p><h3>针对应用软件监测，而不仅仅是基础设施</h3><p><strong>可观测性和监控的第二个区别是，关注的维度不一样。</strong>监控更加关注基础设施的资源情况，因为监控工具实在太多了。中大型的企业可能要部署多套监控软件，针对不同基础设施、不同的产品组件（例如中间件、数据库等）来使用不同的产品或工具。这种就造成了资源浪费，还会出现学习曲线太长，认知成本、协同成本、系统更新成本太高等一系列问题。</p><p>将一切整合起来的可观测性就和原来的监控不同了：可观测平台瞄准的恰恰是应用软件本身。可观测性的目标是保障应用软件的可靠性和稳定性，解决的是应用软件在运行时的调试问题。我相信除了运维需要通过可观测性解决系统的问题之外，开发人员也都希望自己能够随时随地调试自己的代码，尤其是生产环境，从而确保系统的可靠性（有关团队合作的一些最佳实践，在后面的课程中我会进一步详细说明）。</p><p>对于应用程序代码，最重要的指标是用户的体验。底层系统可能基本上是健康的，但用户请求仍然可能因为多种原因而失败。如前几讲所述，分布式系统使这些类型的问题更难检测和理解。所以，使用高基数字段（用户 ID、购物车 ID 等）作为观察特定客户体验的一种方式的能力变得至关重要。尤其是在持续交付的现代世界中，随着新版本代码的不断部署，软件关注点总是在变化和变化。可观测性提供了一种提出适当问题的方法，可以实时解决这些问题。</p><h3>全面收集和关联数据</h3><p><strong>可观测性和监控的第三个区别，体现在数据收集的全面性（不仅仅是指标数据）和关联性上。</strong></p><p>不论你是运维工程师，还是开发工程师，都可以通过工具或者产品构建自己在线系统的可观测性，我们的最终目标都是用实时的数据来调试自己的线上环境。</p><p>构建自身系统完整的可观测性需要的能力非常广泛，一般情况下，对于大部分企业来说，这是一个包括数据收集、集成、展示在内的综合性系统工程。它可能涵盖的技术从底层操作系统，到各种语言环境网络协议，甚至还涉及前端用户访问数据，eBPF，Profiling 等等，这是一个非常庞大的知识结构。而且，仅仅收集数据也是不够的，利用数据所提供的可视化、交互性来真正意义上让可观测性落地才是核心。</p><p>所以从构建可观测性的角度来说，它不仅包括数据收集，还包括数据的一致性和关联关系，这样才能更好地让不同维度的数据通过可视化友好地进行交互。而传统的监控主要还是关注基础设施层面的资源状态和使用情况。</p><h3>通过数据来进行故障排查</h3><p>有了数据，我们就要在这个基础上进行故障排查了。</p><p>如果只是站在运维监控的角度，可观测性似乎是一个数据量更大更全的、但反而让运维不知道从哪开始的监控系统。但我认为，可观测性强调的是从应用和业务维度，用各种数据垂直且实时地描述这个应用的全貌，它采用的不是传统的分层逻辑，不是用不同的独立的监控系统分开关注每一层的情况（例如基础设施、中间件、数据库、应用服务端代码、客户端等等）。</p><p>可观测性和传统监控的差异，也解释了为什么很多传统运维的仪表盘在分布式架构中用处越来越小，因为对于复杂系统来说，很多之前没有发生过的问题，单靠仪表盘并不能有效地发现根本原因。而可观测性强调的是高维度和高基数的数据，通过这些数据的关联，可观测允许我们从任何一个角度分析问题，而不是依靠直觉和经验。</p><p>举个例子，针对一个内存溢出（即我们常说的 OOM）的问题，临时增加内存可能可以解决问题，但这种方式并没有找到问题的根源，下一次这个问题很可能还会出现；根本的解决方法，还是通过可观测性找到导致内存溢出的根本原因，知道是哪个进程有问题，甚至是哪段代码导致的这个问题。</p><p>可观测性提供了一种不同的诊断方法，它能够帮助你研究任何系统，无论这个系统多么复杂，不需要依靠经验或“直觉”。有了可观测性工具，我们不再只能依赖团队中最有经验的工程师，而是可以全面收集和关联数据，通过探索性的问题来询问系统和应用，通过数据分析和发现来进一步开放式地查询和下钻，直到找到问题或故障的根本原因。</p><h2>小结</h2><p>这节课就讲到这里，我们小结一下。</p><p>基于监控的调试方法（包括使用指标和仪表盘，结合专家知识对生产环境中的问题进行分类）是软件行业多年以来的一种普遍实践。在数据量有限的单一应用架构时代，考虑到传统系统较为简单，依靠人类的经验和直觉来检测系统问题是高效和有意义的。然而，现代应用基础系统的复杂性和大规模，已经让这种方法越来越站不住脚了。</p><p>相比较而言，可观测性工具将高基数、高维度的遥测数据放在一起展现，方便我们轻松地进行切片、放大、缩小，或跟随“面包屑”找到最终答案。此外，通过在一个工具中保持这种上下文，问题的分析依靠的就是明确的数据，而不再是经验和直觉了。可观测性将关键知识从最有经验的工程师的头脑中转移到共享现实中，任何工程师都可以根据需要进行探索。</p><p>在下一节中，我将为你讲解开源和厂商中立的 OpenTelemetry 项目，以及如何通过它来建立可观测性。</p><h2>思考题</h2><p>在这节课的最后，留给你一道思考题。</p><p>你在平时的工作中，有没有依靠直觉和经验来解决问题的经历？后来问题重现了吗，有没有彻底解决？如果有，你又是如何找到根本原因的？</p><p>另外，我也想给你推荐一本有关可观测性的书籍，<em>Observability Engineering</em>，这个专栏也参考了书中的一些内容。当然，国内外对可观测性的理解和实践都有所不同，我也更多地在专栏中加入了我自己的理解与感悟。有英文功底的同学可以从<a href=\"https://www.honeycomb.io/wp-content/uploads/2022/05/Honeycomb-OReilly-Book-on-Observability-Engineering.pdf\">这里</a>下载电子版进行阅读，相信这本书可以让你了解到可观测性更多维度的知识。</p><p>如果你有什么新的收获，也欢迎在留言区和我交流，我们下节课见！</p>","neighbors":{"left":{"article_title":"02 | 基本概念：指标+日志+链路追踪=可观测性？","id":567891},"right":{"article_title":"04 | OpenTelemetry：如何利用OpenTelemetry采集可观测数据？","id":572793}},"comments":[{"had_liked":false,"id":359693,"user_name":"LYy","can_delete":false,"product_type":"c1","uid":1102062,"ip_address":"上海","ucode":"8D5C39B9531E71","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","comment_is_top":false,"comment_ctime":1665755701,"is_pvip":false,"replies":[{"id":130917,"content":"没错，很好的理解！","user_name":"作者回复","user_name_real":"编辑","uid":1044522,"ctime":1666052815,"ip_address":"上海","comment_id":359693,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"可观测性聚焦于业务层与应用层，区别于传统监控大多局限于基础设施层。\n随着微服务化、云原生化的普及，故障产生的原因越来越多的集中在应用层、表现在业务层，而传统监控关注的基础设施层很难反向推出应用、业务的具体问题，造成了&quot;我知道有问题，但不知道具体是哪里出了问题&quot;的&quot;known-unknowns&quot;的窘境。","like_count":4,"discussions":[{"author":{"id":1044522,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/2a/8d6c3957.jpg","nickname":"Coffee Cat","note":"","ucode":"979B24B995F8DE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590723,"discussion_content":"没错，很好的理解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666052815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442169,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKY0vYd4ZEKyGnq9pDI0hBPfVpYdoYlhW2hd8wHIq9yk5nxXMnrp3EXj9F5hq63npu0CCATBc1wGA/132","nickname":"bug0day","note":"","ucode":"9FCA0FC50958F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637296,"discussion_content":"公司内部的监控系统，包括开源的监控系统， 都支持打点(业务数据上报)， 所以很早就支持业务监控了。所以这里看不出可观测性和监控的区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708307861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357852,"user_name":"wsp","can_delete":false,"product_type":"c1","uid":2639304,"ip_address":"上海","ucode":"960E675BFB047F","user_header":"https://static001.geekbang.org/account/avatar/00/28/45/c8/3849d04f.jpg","comment_is_top":false,"comment_ctime":1663683279,"is_pvip":false,"replies":[{"id":130261,"content":"业务的可观测可以关注后续的课程，会讲到SLO的构建，保障业务可靠性","user_name":"作者回复","user_name_real":"编辑","uid":1044522,"ctime":1663769574,"ip_address":"上海","comment_id":357852,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"老师，我们做业务的可观测性监控。初期试验通过业务逻辑硬编码异常点直接告警，这种有相应案例吗。如何去定义业务的可观测性那，有没有方法论","like_count":2,"discussions":[{"author":{"id":1044522,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/2a/8d6c3957.jpg","nickname":"Coffee Cat","note":"","ucode":"979B24B995F8DE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588458,"discussion_content":"业务的可观测可以关注后续的课程，会讲到SLO的构建，保障业务可靠性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663769574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360274,"user_name":"penng","can_delete":false,"product_type":"c1","uid":1033169,"ip_address":"上海","ucode":"6087CFCB0AC434","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/d1/bdf895bf.jpg","comment_is_top":false,"comment_ctime":1666363878,"is_pvip":false,"replies":[{"id":131213,"content":"链接没错，是个国外的网站，看是否能够访问 https:&#47;&#47;www.honeycomb.io，然后从 Learn 菜单进 Blog，搜素 Observability Engineering","user_name":"作者回复","user_name_real":"编辑","uid":1044522,"ctime":1666759499,"ip_address":"上海","comment_id":360274,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"电子书打不开","like_count":1,"discussions":[{"author":{"id":1044522,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/2a/8d6c3957.jpg","nickname":"Coffee Cat","note":"","ucode":"979B24B995F8DE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591674,"discussion_content":"链接没错，是个国外的网站，看是否能够访问 https://www.honeycomb.io，然后从 Learn 菜单进 Blog，搜素 Observability Engineering","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666759499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359650,"user_name":"kaizen","can_delete":false,"product_type":"c1","uid":1675966,"ip_address":"上海","ucode":"313EEA97AEC7C3","user_header":"https://static001.geekbang.org/account/avatar/00/19/92/be/8de4e1fe.jpg","comment_is_top":false,"comment_ctime":1665728760,"is_pvip":false,"replies":[{"id":130849,"content":"你的理解是个很好的角度！可能再过一段时间，大家的理解可观测性就是一个整体概念，不用再分监控还是应用链路这些","user_name":"作者回复","user_name_real":"编辑","uid":1044522,"ctime":1665812110,"ip_address":"上海","comment_id":359650,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"个人觉得可观测性是个程度词，是形容一个复杂系统的可观测程度，也就是系统各个切面以及各个Signal关联程度，而不是将传统监控与可观测直接割裂开，也许两三年后就会出现可观测=监控，毕竟现在都在炒可观测性。\nSLO 这个方法论，并不依赖可观测性，甚至可以说 有传统监控就可以有 SLO。","like_count":1,"discussions":[{"author":{"id":1044522,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/2a/8d6c3957.jpg","nickname":"Coffee Cat","note":"","ucode":"979B24B995F8DE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590486,"discussion_content":"你的理解是个很好的角度！可能再过一段时间，大家的理解可观测性就是一个整体概念，不用再分监控还是应用链路这些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665812110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357658,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"上海","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1663546490,"is_pvip":false,"replies":[{"id":130222,"content":"对基础设施还是需要的，能够了解性能的瓶颈，但只要业务仍然能够正常运行，基础设施维度的监控告警不会影响服务可靠性.SLO，有关SLO的内容会在第8讲中介绍","user_name":"作者回复","user_name_real":"编辑","uid":1044522,"ctime":1663602577,"ip_address":"上海","comment_id":357658,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"请教老师一个问题：\nQ1：可观测性是否还需要对基础设施进行监测？","like_count":1,"discussions":[{"author":{"id":1044522,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/2a/8d6c3957.jpg","nickname":"Coffee Cat","note":"","ucode":"979B24B995F8DE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588235,"discussion_content":"对基础设施还是需要的，能够了解性能的瓶颈，但只要业务仍然能够正常运行，基础设施维度的监控告警不会影响服务可靠性.SLO，有关SLO的内容会在第8讲中介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663602577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357654,"user_name":"includestdio.h","can_delete":false,"product_type":"c1","uid":2314854,"ip_address":"上海","ucode":"5027BACE9319CD","user_header":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","comment_is_top":false,"comment_ctime":1663544263,"is_pvip":true,"replies":[{"id":130263,"content":"这时候就需要通过可观测性的建立来找到根本原因，比如通过一些指标发现问题，结合日志进行分析","user_name":"作者回复","user_name_real":"编辑","uid":1044522,"ctime":1663770821,"ip_address":"上海","comment_id":357654,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"Java服务器的突然宕机问题我好像经常是用直觉排查和解决的，宕机后第一反应是进机器看系统日志，发现是oom，我们使用的是jenkins，但是好像没有彻底解决过这个问题，我一直归结于是我不太了解jenkins ，应该可以通过某些设置限制","like_count":1,"discussions":[{"author":{"id":1044522,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/2a/8d6c3957.jpg","nickname":"Coffee Cat","note":"","ucode":"979B24B995F8DE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588463,"discussion_content":"这时候就需要通过可观测性的建立来找到根本原因，比如通过一些指标发现问题，结合日志进行分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663770821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361058,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"上海","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1667176700,"is_pvip":true,"replies":[{"id":132127,"content":"这块可以考虑使用 Profiling，来更细颗粒度的分析 CPU 性能，定位具体代码","user_name":"作者回复","user_name_real":"编辑","uid":1044522,"ctime":1669785246,"ip_address":"上海","comment_id":361058,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"最近也有处理运行时pod吃cpu资源飙高的情况，主要还是依靠自己的直觉自己线程栈的日志，确实显著改善了，但是并没有彻底解决，只是部分场景下，cpu还是会偶发的飙升下！！根因还是业务代码的书写问题，在整点大流量请求背景下，出现了资源瓶颈问题","like_count":0,"discussions":[{"author":{"id":1044522,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/2a/8d6c3957.jpg","nickname":"Coffee Cat","note":"","ucode":"979B24B995F8DE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595147,"discussion_content":"这块可以考虑使用 Profiling，来更细颗粒度的分析 CPU 性能，定位具体代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669785247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358042,"user_name":"wilburJiang","can_delete":false,"product_type":"c1","uid":1107836,"ip_address":"上海","ucode":"F83D474D692C06","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI5uDOruARAmFZr49ic2nib3ibj1TSBUKydMH2H3XHUniaR0FHeNVkOI9dfndxtJIOOrY2w5nhrHjX3UQ/132","comment_is_top":false,"comment_ctime":1663842997,"is_pvip":false,"replies":[{"id":130326,"content":"是的，后面会有 4 节实战的环节，具体可以参考课程大纲","user_name":"作者回复","user_name_real":"编辑","uid":1044522,"ctime":1663941553,"ip_address":"上海","comment_id":358042,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"对于可观测性有了基本的了解。但是与传统监控具体的区别没有真地动手实践，感觉很难体会到，期待后边的实践环节。","like_count":0,"discussions":[{"author":{"id":1044522,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/2a/8d6c3957.jpg","nickname":"Coffee Cat","note":"","ucode":"979B24B995F8DE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588663,"discussion_content":"是的，后面会有 4 节实战的环节，具体可以参考课程大纲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663941554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391207,"user_name":"__PlasticMan","can_delete":false,"product_type":"c1","uid":1676074,"ip_address":"四川","ucode":"329D3E71E613F0","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/2a/08675e68.jpg","comment_is_top":false,"comment_ctime":1717589992,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"总结：可观测的背景是高复杂度的弹性环境和微服务架构，或者说DevOps，因此需要从终极目标应用稳定性出发，也就是从应用出发建立全栈分析能力，以往的监控由于系统复杂度有限，经验是生效的，往往基于分层、职能等建立多个监控系统，有不同的关注点。","like_count":0},{"had_liked":false,"id":385005,"user_name":"郑奥学","can_delete":false,"product_type":"c1","uid":1012010,"ip_address":"上海","ucode":"CF1B20DBBE1D57","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLAxTB7VjiboJLKujMGtj9EeTSX8yPStoqsjzqjeuBQkWd1IMQvicOMQhZEPZemBFBeoQupGz4UsSic7g/132","comment_is_top":false,"comment_ctime":1701927321,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100121701,"comment_content":"医生看病要望闻问切、仪器检测、看度量化验单，然后综合判断精细点哪个地方好，那个地方坏有问题了，开什么药\n\n这玩意也一样，只是用于诊断生产系统的一套检测工具了，数据越全，检索工具越快，能快速的判断出问题并止血就行了，甚至不用太细，场景实用就行，非核心的业务都能降级掉。\n\n而且很多现在都是公有云，很多底层信息你是拿不到的，对于企业的业务来说，对稳定性的容忍度有多少？\n\n可观测性确实是个程度词\n","like_count":0},{"had_liked":false,"id":357766,"user_name":"stackWarn","can_delete":false,"product_type":"c1","uid":1002005,"ip_address":"北京","ucode":"89672E452DEBA5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","comment_is_top":false,"comment_ctime":1663630772,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100121701,"comment_content":"如果继续通过传统的设定阈值的方式进行故障定位，除非你能提前了解可能会在哪些节点出现问题，否则你将完全不知道故障是如何发生的，甚至都没法设定相关的阈值。\n传统监控解决known unknown的事情，对于unknown unknown问题需要引入可观测性","like_count":0},{"had_liked":false,"id":357653,"user_name":"E","can_delete":false,"product_type":"c1","uid":1075666,"ip_address":"广东","ucode":"80B68506B590EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/69/d2/8a53f0a3.jpg","comment_is_top":false,"comment_ctime":1663527654,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100121701,"comment_content":"醍醐灌顶","like_count":0}]}