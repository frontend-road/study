{"id":170912,"title":"60 | 架构分解：边界，不断重新审视边界","content":"<p>你好，我是七牛云许式伟。</p><p>在上一讲 “<a href=\"https://time.geekbang.org/column/article/169113\">59 | 少谈点框架，多谈点业务</a>” 中，我们强调：</p><blockquote>\n<p>架构就是业务的正交分解。每个模块都有它自己的业务。</p>\n</blockquote><p>这里我们说的模块是一种泛指，它包括：函数、类、接口、包、子系统、网络服务程序、桌面程序等等。</p><p>接口是业务的抽象，同时也是它与使用方的耦合方式。在业务分解的过程中，我们需要认真审视模块的接口，发现其中 “过度的（或多余的）” 约束条件，把它提高到足够通用的、普适的场景来看。</p><h2>IO 子系统的需求与初始架构</h2><p>这样说太抽象了，今天我们拿一个实际的例子来说明我们在审视模块的业务边界时，需要用什么样的思维方式来思考。</p><p>我们选的例子，是办公软件的 IO 子系统。从需求来说，我们首先考虑支持的是：</p><ul>\n<li>读盘、存盘；</li>\n<li>剪贴板的拷贝（存盘）、粘贴（读盘）。</li>\n</ul><p>读盘功能不只是要能够加载自定义格式的文件，也要支持业界主流的文件格式，如：</p><ul>\n<li>Word 文档、RTF 文档；</li>\n<li>HTML 文档、纯文本文档。</li>\n</ul><p>存盘功能更复杂一些，它不只是要支持保存为以上基于文本逻辑的流式文档，还要支持基于分页显示的文档格式，如：</p><ul>\n<li>PDF 文档；</li>\n<li>PS 文档。</li>\n</ul><p>对于这样的业务需求，我们应该怎么做架构设计？</p><p>我第一次看到的设计大概是这样的：</p><pre><code>type Span struct {\n  ...\n\n  SaveWord(ctx *SaveWordContext) error\n  SaveRTF(ctx *SaveRTFContext) error\n\n  LoadWord(ctx *LoadWordContext) error\n  LoadRTF(ctx *LoadRTFContext) error\n}\n\ntype Paragraph struct {\n  ...\n  SpanCount() int\n  GetSpan(i int) *Span\n\n  SaveWord(ctx *SaveWordContext) error\n  SaveRTF(ctx *SaveRTFContext) error\n\n  LoadWord(ctx *LoadWordContext) error\n  LoadRTF(ctx *LoadRTFContext) error\n}\n\ntype TextPool struct {\n  ...\n  ParagraphCount() int\n  GetParagraph(i int) *Paragraph\n\n  SaveWord(ctx *SaveWordContext) error\n  SaveRTF(ctx *SaveRTFContext) error\n\n  LoadWord(ctx *LoadWordContext) error\n  LoadRTF(ctx *LoadRTFContext) error\n}\n\ntype Document struct {\n  ...\n  TextPool() *TextPool\n\n  SaveWord(stg IStorage) error\n  SaveRTF(f *os.File) error\n  SaveFile(file string, format string) error\n\n  LoadWord(stg IStorage) error\n  LoadRTF(f *os.File) error\n  LoadFile(file string) error\n}\n</code></pre><p>从上面的设计可以看出，读盘存盘的代码散落在核心系统的各处，几乎每个类都需要进行相关的修改。这类功能我们把它叫做 “全局性功能”。我们下一讲将专门讨论全局性功能怎么做设计。</p><!-- [[[read_end]]] --><p>全局性功能的架构设计要非常小心。如果按上面这种设计，我们无法称之为一个独立的子系统，它完完全全是核心系统的一部分。</p><p>某种程度上来说，这个架构是受了 OOP 思想的毒害，以为一切都应该以对象为中心，况且在微软的 MFC 框架里面有 Serialization 机制支持，进一步加剧了写这类存盘读盘代码的倾向。</p><p>这当然是不太好的。在良好的设计中，一方面核心系统功能要少，少到只有最小子集；另一方面核心功能要能够收敛，不能越加越多。</p><p>但读盘存盘的需求是开放的，今天支持 Word 和 RTF 文档，明天支持 HTML，后天微软又出来新的 docx 格式。文件格式总是层出不穷，难以收敛。</p><h2>Visitor 模式</h2><p>所以，以上读盘存盘的架构设计不是一个好的架构设计。那么应该怎么办呢？可能有人会想到设计模式中的 Visitor 模式。</p><p>什么是 Visitor 模式？简单来说，它的目的是为核心系统的 Model 层提供一套遍历数据的接口，数据最终是通过事件的方式接收。如下：</p><pre><code>type Visitor interface {\n  StartDocument(attrs *DocumentAttrs) error\n  StartParagraph(attrs *ParagraphAttrs) error\n  StartSpan(attrs *SpanAttrs) error\n  Characters(chars []byte) error \n  EndSpan() error\n  EndParagraph() error\n  EndDocument() error\n}\n\ntype VisitableDoc interface {\n  Visit(visitor Visitor) error\n}\n\ntype Document struct {\n  ...\n  Visit(visitor Visitor) error\n}\n\nfunc NewDocument() *Document\nfunc LoadDocument(doc VisitableDoc) (*Document, error)\n\nfunc SaveWord(stg IStorage, doc VisitableDoc) error\nfunc SaveRTF(f *os.File, doc VisitableDoc) error\nfunc SaveFile(file string, format string, doc VisitableDoc) error\n\nfunc LoadWord(stg IStorage) (VisitableDoc, error)\nfunc LoadRTF(f *os.File) (VisitableDoc, error)\nfunc LoadFile(file string) (VisitableDoc, error)\n</code></pre><p>这样做的好处是显然的。</p><p>一方面，核心系统为 IO 系统提供了统一的数据访问接口。这样 IO 子系统就从核心系统中抽离出来了。</p><p>另一方面，Word 文档的支持、RTF 文档的支持这些模块在 IO 子系统中也彼此完全独立，却又相互可以非常融洽地进行配合。比如我们可以很方便将 RTF 文件转为 Word 文件，代码如下：</p><pre><code>func ConvRTF2Word(rtf *os.File, word IStorage) error {\n  doc, err := LoadRTF(rtf)\n  if err != nil {\n    return err\n  }\n  return SaveWord(word, doc)\n}\n</code></pre><p>类似地，加载一个 Word 文件的代码如下：</p><pre><code>func LoadWordDocument(stg IStorage) (*Document, error) {\n  vdoc, err := LoadWord(stg)\n  if err != nil {\n    return nil, err\n  }\n  return LoadDocument(vdoc)\n}\n</code></pre><p>那么这个设计有什么问题？</p><p>如果你对比上一讲 “<a href=\"/https://time.geekbang.org/column/article/169113\">59 | 少谈点框架，多谈点业务</a>” 提到的 SAX 和 DOM 模式，很容易看出这里的  Visitor 模式本质上就是 SAX 模式，只不过数据源不再是磁盘中的文件，而是换成了核心系统的 Model 层而已。</p><p>所以我前面讲的 SAX 模式的缺点它一样有。它最大的问题是有预设的数据访问逻辑，其客户未必期望以相同的逻辑访问数据。</p><p>基于事件模型是一个非常简陋的编程框架，与大部分 IO 子系统的需求方，比如我们这里的 Word 文档存盘、RTF 文档存盘的诉求并不那么匹配。解决这种不匹配的常规做法是把数据先缓存下来，等到我当前步骤所有需要的数据都已经发送过来了，再进行处理。</p><p>这个设计并不是假想的，实际上我当年在做 WPS Office IO 子系统第一版本的架构设计时，就采用了这个架构。但最终实践下来，我自己总结的时候认为它是一个非常失败的设计。</p><p>一方面，虽然 Visitor 或者 SAX 模式看起来是 “简洁而高效” 的，但是实际编码中程序员的心智负担比较大，有大量的冗余代码纯粹就是为了缓存数据，等待更多有效的数据。</p><p>另一方面，这个接口仍然是抽象而难以理解的。比如，不同事件的次序是什么样的，需要较长的文档说明。</p><p>这也是给架构师们提了个醒，我们架构设计的 KISS 原则提倡的简单，并不是接口外观上的简洁，而是业务语义表达上的准确无歧义。</p><h2>IO DOM 模式</h2><p>所以第二次的架构迭代，我们调整为基于 DOM 模式，如下：</p><pre><code>type IoSpan interface {\n  Text() []byte\n  Attributes() IoSpanAttrs\n}\n\ntype IoSpans interface {\n  Len() int\n  Elem(i int) IoSpan\n}\n\ntype IoParagraph interface {\n  Spans() IoSpans\n  Attributes() IoParagraphAttrs\n}\n\ntype IoParagraphs interface {\n  Len() int\n  Elem(i int) IoParagraph\n}\n\ntype IoDocument interface {\n  Paragraphs() IoParagraphs\n  Attributes() IoDocumentAttrs\n}\n\nfunc NewIoDocument() IoDocument \n\ntype Document struct {\n  ...\n  Io() IoDocument\n}\n\nfunc NewDocument() *Document\n\nfunc SaveWord(stg IStorage, doc IoDocument) error\nfunc SaveRTF(f *os.File, doc IoDocument) error\nfunc SaveFile(file string, format string, doc IoDocument) error\n\nfunc LoadWord(stg IStorage, doc IoDocument) error\nfunc LoadRTF(f *os.File, doc IoDocument) error\nfunc LoadFile(file string, doc IoDocument) error\n</code></pre><p>在这个架构，我们认为有两套 DOM，一套是 IO DOM，即 IoDocument 接口及其相关的接口。一套是核心系统自己的 DOM，也就是 Document 类及其相关的接口。这两套接口几乎是雷同的，理论上 Document 只是 IoDocument 这个 DOM 的超集。</p><p>那么为什么不是直接在接口上体现出超集关系？从语法表达上很难，毕竟这是一个接口族，而不是一个接口。这里我们通过在 Document 类引入 Io() 函数来将其转为 IoDocument 接口，以体现双方的超集关系。</p><p>在这个方案下，将 RTF 文件转为 Word 文件的代码如下：</p><pre><code>func ConvRTF2Word(rtf *os.File, word IStorage) error {\n  doc := NewIoDocument()\n  err := LoadRTF(rtf, doc)\n  if err != nil {\n    return err\n  }\n  return SaveWord(word, doc)\n}\n</code></pre><p>类似地，加载一个 Word 文件的代码如下：</p><pre><code>func LoadWordDocument(stg IStorage) (*Document, error) {\n  doc := NewDocument()\n  err := LoadWord(stg, doc.Io())\n  if err != nil {\n    return nil, err\n  }\n  return doc, nil\n}\n</code></pre><p>相比前面的 Visitor 模式，采用 IO DOM 除了让所有存盘读盘的模块代码工程量变低，接口的理解一致性更好外，还有一个额外的好处，是 IO DOM 更自然，避免了惊异。因为核心系统的 Model 层通常就是通过 DOM 接口暴露的，而 IO DOM 从概念上只是一个子集关系，显然对客户的理解成本来说是最低的。而 Visitor 模式你可以理解为它是核心系统 Model 层为 IO 子系统提供的专用插件机制，它对核心系统来说是额外的成本。</p><p>事实上，在 DOM 模式基础上提供 Visitor 模式是有点多余的。DOM 模式通常提供了极度灵活的数据访问接口，可以适应几乎所有的数据读取场景。</p><h2>回到最初的需求</h2><p>我们是否解决了最初 IO 子系统的所有需求？</p><p>我们简单分析下各类用户故事（User Story）就能够发现其实并没有。我们解决了所有流式文档的存盘读盘，但是没有解决基于分页显示的文档格式支持，如：</p><ul>\n<li>PDF 文档；</li>\n<li>PS 文档。</li>\n</ul><p>因为从核心系统 DOM 得到的文档，或者我们抽象的 IO DOM，都是流式文档，并没有分页信息。如果我们 PDF、PS 文档的存盘接口是这样的：</p><pre><code>func SavePDF(f *os.File, doc IoDocument) error\nfunc SavePS(f *os.File, doc IoDocument) error\n</code></pre><p>那么意味着这些存盘模块的实现者需要对 IO DOM 进行排版（Render），得到具备分页信息的数据结构，然后以此进行存盘。</p><p>这意味着 IO 子系统在特定的场景下，其实与排版与绘制子系统相关，包括：</p><ul>\n<li>屏幕绘制（onPaint）；</li>\n<li>打印（onPrint）。</li>\n</ul><p>可能有些人能够回忆起来，前面在 “<a href=\"https://time.geekbang.org/column/article/105356\">22 | 桌面程序的架构建议</a>” 一讲介绍 Model 和 ViewModel 之间的关系时，我也是拿 Office 文档举例。核心系统的 DOM，或者 IO 子系统的 IO DOM，通过排版（Render）功能，可以渲染出 View 层所需的显示数据，我们不妨称之为 View DOM。</p><p>而有了 View DOM，我们就不只是可以进行屏幕绘制和打印，也可以支持 PDF/PS 文档的存盘了。代码如下：</p><pre><code>func Render(doc IoDocument) (ViewDocument, error)\n\nfunc SavePDF(f *os.File, doc ViewDocument) error\nfunc SavePS(f *os.File, doc ViewDocument) error\n</code></pre><p>如果你做需求分析的时候，没有把这些需求关联性找到，那就不是一次合格的需求分析过程。</p><h2>不断重新审视边界</h2><p>到此为止，我们的分析是否已经足够细致，把所有关键细节都想得足够清楚？</p><p>其实并没有，我们在理需求时，我们首先要考虑支持的是：</p><ul>\n<li>剪贴板的拷贝（存盘）、粘贴（读盘）。</li>\n</ul><p>但是我们在整理用户故事（User Story）的时候仍然把它给漏了。当然，剪贴板带来的影响没有 PDF/PS 文档大，它只是意味着我们的数据流不再是 *os.File 可以表达，而是需要用更抽象的 io.Reader/Writer 来表示。也就是说，以下接口：</p><pre><code>func SaveRTF(f *os.File, doc IoDocument) error\nfunc LoadRTF(f *os.File, doc IoDocument) error\n\nfunc SavePDF(f *os.File, doc ViewDocument) error\nfunc SavePS(f *os.File, doc ViewDocument) error\n</code></pre><p>要改为：</p><pre><code>func SaveRTF(f io.Writer, doc IoDocument) error\nfunc LoadRTF(f io.Reader, doc IoDocument) error\n\nfunc SavePDF(f io.Writer, doc ViewDocument) error\nfunc SavePS(f io.Writer, doc ViewDocument) error\n</code></pre><p>这其实就是我前面强调的 “发现模块接口中多余的约束”的一种典型表现。在我们模块提高到足够通用的、普适的场景来看时，实际上并不需要剪贴板这样具体的用户场景，也能够及时地发现这种过度约束。</p><p>另外，我们的 IO 子系统的入口级的接口：</p><pre><code>func SaveFile(file string, format string, doc IoDocument) error\nfunc LoadFile(file string, doc IoDocument) error\n</code></pre><p>我们且不说这里面怎么实现插件机制，以便于我们非常方便就能够不修改任何代码，就增加一种新的文件格式的读写支持。我们单就它的边界来看，也需要进一步探讨。</p><p>其一，LoadFile 方法我们可能希望知道加载的文件具体是文档格式，所以应该改为：</p><pre><code>func LoadFile(file string, doc IoDocument) (format string, err error)\n</code></pre><p>其二，考虑到剪贴板的支持，我们输入的数据源不一定是文件，还可能是 io.Reader、IStorage 等，在 Windows 平台下有 STGMEDIUM 结构体来表达通用的介质类型，可以参考。从跨平台的角度，也可以考虑直接用 Go 语言中的任意类型。如下：</p><pre><code>func Save(src interface{}, format string, doc IoDocument) error\nfunc Load(src interface{}, doc IoDocument) (format string, err error)\n</code></pre><p>既然用了 interface{} 这样的任意类型，就意味着我们需要在文档层面上补充清楚我们都支持些什么，不支持些什么，避免在团队共识上遇到麻烦。</p><p>其三，考虑 PDF/PS 这类非流式文档的支持，我们不能用 IoDocument 作为输入文档的类型。也就是说，以下接口：</p><pre><code>func Save(dest interface{}, format string, doc IoDocument) error\n</code></pre><p>需要作出适当的调整。具体应该怎么调？欢迎留言发表你的观点。</p><h2>结语</h2><p>这一讲我们通过一个实际的例子，来剖析架构设计过程中我们如何在思考模块边界。</p><p>最重要的，当然是职责。不同的业务模块，分别做什么，它们之间通过什么样的方式耦合在一起。这种耦合方式的需求适应性如何，开发人员实现上的心智负担如何，是我们决策的影响因素。</p><p>为了避免留下难以调整的架构缺陷，我们强烈建议你认真细致做好需求分析，并且在架构设计时，认真细致地过一遍所有的用户故事（User Story），以确认我们的架构适应性。</p><p>最后，我们在具体接口的每个输入输出参数的类型选择上，一样要非常考究，尽可能去发现其中 “过度的（或多余的）” 约束。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们的话题按照大纲是 “全局性功能的架构设计”，但我计划做一篇加餐，内容是架构思维实战，把前面我们的实战案例 “画图程序” 和这几讲的理论知识结合起来。</p><p>大家可以提前思考以下内容：对画图程序进行子系统的划分，我们的哪些代码是核心系统，哪些是周边系统？从判断架构设计的优劣的角度，我们如何评判它好还是不好？</p><p>如果你自己也实现了一个 “画图程序”，可以根据这几讲的内容，对比一下我们给出的样例，和自己写的有哪些架构思想上的不同，怎么评价它们的好坏？</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":155926,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1574779217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35934517585","product_id":100025201,"comment_content":"这下好了，满脑子架构就是业务的正交分解了。。。。。","like_count":9},{"had_liked":false,"id":156180,"user_name":"Sam","can_delete":false,"product_type":"c1","uid":1314195,"ip_address":"","ucode":"C6454F1D848055","user_header":"","comment_is_top":false,"comment_ctime":1574829488,"is_pvip":false,"replies":[{"id":"60037","content":"1、format就是要保存的文件格式；<br>2、其实你说的是一个好方法，我也用的是这个方法。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574855789,"ip_address":"","comment_id":156180,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23049665968","product_id":100025201,"comment_content":"许大，请教您一个问题。文中提到的如下代码片段：<br>func Save(src interface{}, format string, doc IoDocument) error<br>func Load(src interface{}, doc IoDocument) (format string, err error)<br>其中format参数有何用意，麻烦指点下。<br>第二个： func Save(dest interface{}, format string, doc IoDocument) error<br>我没想到改造方法，只想到了增加了 func Export(dest interface{}, format string, doc ViewDocument) error，这种方式，感觉好Low","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476020,"discussion_content":"1、format就是要保存的文件格式；\n2、其实你说的是一个好方法，我也用的是这个方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574855789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155715,"user_name":"许式伟-七牛云(已满)","can_delete":false,"product_type":"c1","uid":1228022,"ip_address":"","ucode":"1A2F8AA6F6DB54","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","comment_is_top":false,"comment_ctime":1574742019,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"23049578499","product_id":100025201,"comment_content":"其实，这里面有一个隐含的决策没有交代，为什么有引入 IO DOM，直接拿核心系统的 DOM 来作为 IO 系统依赖行不行？欢迎留言探讨。","like_count":6,"discussions":[{"author":{"id":1181942,"avatar":"https://static001.geekbang.org/account/avatar/00/12/08/f6/76285598.jpg","nickname":"小风","note":"","ucode":"03D2FF9A81AC98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304470,"discussion_content":"核心dom理解为面向业务的数据结构，io dom理解为面向存储的数据结构，核心dom依赖io dom。在已经划分核心系统和io系统的前提下，核心系统处在高层面向业务，io系统处在低层处理io，核心系统依赖io系统，所以io系统直接使用核心dom形成反向依赖不合适。进一步看，假如一定要让io系统依赖核心dom，形成了双向依赖，说明这两部分关系紧密，可以认为都属于核心系统。这样io相关接口直接使用核心dom也是可以的。但这种方案有两个问题。第一，违反了核心系统尽量小和稳定的原则，io部分是多样和易变的。第二，即使io相关接口使用核心dom，在实现时不可避免会用到和io有关的信息，这些信息在核心dom中是没有的，还是需要在内部进行转换处理，引入类似io dom的数据结构，区别在于隐藏在内部实现还是暴露在接口定义。综合来看，还是原文的方案更合理。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599576849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2559716,"avatar":"https://static001.geekbang.org/account/avatar/00/27/0e/e4/7444469a.jpg","nickname":"阿白","note":"","ucode":"2140DAC07B8B10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573247,"discussion_content":"两个原则：1.单向依赖；2.稳定与变化分离；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653294370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2059610,"avatar":"","nickname":"guxiaobai","note":"","ucode":"6B34EE2DC2BFAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305679,"discussion_content":"接口隔离原则？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600053883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368648,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/48/6c066714.jpg","nickname":"信了","note":"","ucode":"EA188A1DD1D390","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126953,"discussion_content":"因为不可过度依赖核心系统的 原因吗？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578552764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155664,"user_name":"吴","can_delete":false,"product_type":"c1","uid":1495840,"ip_address":"","ucode":"4807FB811B2EDC","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","comment_is_top":false,"comment_ctime":1574734226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18754603410","product_id":100025201,"comment_content":"越来越有味，这系列文章需要反复研究","like_count":5},{"had_liked":false,"id":288529,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1618531000,"is_pvip":false,"replies":[{"id":"104736","content":"1、走进用户；2、整理&#47;梳理需求，做需求分析，千万别跳过需求分析这个关键步骤就设计","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1618555643,"ip_address":"","comment_id":288529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5913498296","product_id":100025201,"comment_content":"项目经常在开始前，根本不知道具体业务需求，而是不断迭代的，请问怎么进行 良好的架构设计呢？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518651,"discussion_content":"1、走进用户；2、整理/梳理需求，做需求分析，千万别跳过需求分析这个关键步骤就设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618555643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159589,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c1","uid":1494491,"ip_address":"","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1575696196,"is_pvip":false,"replies":[{"id":"60980","content":"是这样。大部分情况下不应该用 any 类型，除非有什么让人信服的特殊理由。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1575703065,"ip_address":"","comment_id":159589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870663492","product_id":100025201,"comment_content":"感觉什么约束都没有的 interface｛｝ 不该出现在重要的接口里 不可能真的什么约束都没有 肯定会要求实现某些接口或者约定了某种反射方式 还是应该在接口里体现出具体的约束细节","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477109,"discussion_content":"是这样。大部分情况下不应该用 any 类型，除非有什么让人信服的特殊理由。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575703065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155879,"user_name":"吴","can_delete":false,"product_type":"c1","uid":1495840,"ip_address":"","ucode":"4807FB811B2EDC","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","comment_is_top":false,"comment_ctime":1574772146,"is_pvip":false,"replies":[{"id":"59898","content":"网上随意买一本都可以，Go语法确定性较强，掌握门槛比较低，关键在用起来。Go能够用的领域可以很广泛，主要做后端开发，单我甚至也用它做过游戏。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574776494,"ip_address":"","comment_id":155879,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869739442","product_id":100025201,"comment_content":"老大，go语言的入门书介绍一下，go语言擅长做啥了","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475907,"discussion_content":"网上随意买一本都可以，Go语法确定性较强，掌握门槛比较低，关键在用起来。Go能够用的领域可以很广泛，主要做后端开发，单我甚至也用它做过游戏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574776494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321380,"user_name":"哲","can_delete":false,"product_type":"c1","uid":2581217,"ip_address":"","ucode":"2616478F11E457","user_header":"https://static001.geekbang.org/account/avatar/00/27/62/e1/764aca72.jpg","comment_is_top":false,"comment_ctime":1636818195,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636818195","product_id":100025201,"comment_content":"软件架构设计中有一个很大的痛点是老逻辑加新功能，发现越来越难，最后像屎山一样改不动。而好的业务代码应该像插件一样即插即用的。怎么达到这种效果呢，就是本章所讲的，要求每一个细分的模块儿足够简单且脱离耦合性，那么就需要在架构或者小步重构的过程中，做到定义好模块的边界了。","like_count":0},{"had_liked":false,"id":284235,"user_name":"Run","can_delete":false,"product_type":"c1","uid":1371941,"ip_address":"","ucode":"6738D2F36ACFF6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMDBq7lqg9ZasC4f21R0axKJRVCBImPKlQF8yOicLLXIsNgsZxsVyN1mbvFOL6eVPluTNgJofwZeA/132","comment_is_top":false,"comment_ctime":1616131435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616131435","product_id":100025201,"comment_content":"术语啊","like_count":0},{"had_liked":false,"id":222136,"user_name":"will","can_delete":false,"product_type":"c1","uid":1071114,"ip_address":"","ucode":"FDEBE8C288AB6F","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/0a/1a96a681.jpg","comment_is_top":false,"comment_ctime":1590685752,"is_pvip":false,"replies":[{"id":"81886","content":"一般来说，业务dom和io dom是超集关系","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1590714241,"ip_address":"","comment_id":222136,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590685752","product_id":100025201,"comment_content":"介绍IO DOM 模式时提到有两套DOM，一套是 IO DOM我可以看到在代码中反映，但是说另外一套是Document 类及其相关的接口，实在理解不来... 相关接口是什么接口，好像示例代码省略了很多？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496681,"discussion_content":"一般来说，业务dom和io dom是超集关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590714241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212286,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1588084239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588084239","product_id":100025201,"comment_content":"架构设计时，认真细致地过一遍所有的用户故事，这一点太重要了。实际设计过程中，经常遗留一些重要的点，导致改动模块接口，一定要多下功夫，减少开发的成本。","like_count":0},{"had_liked":false,"id":210912,"user_name":"不在调上","can_delete":false,"product_type":"c1","uid":1110733,"ip_address":"","ucode":"A1E82663DA37D2","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/cd/d412a403.jpg","comment_is_top":false,"comment_ctime":1587864504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587864504","product_id":100025201,"comment_content":"许大，想请教一个问题，文章中的代码，怎么界定使用方和提供方的功能呢？","like_count":0},{"had_liked":false,"id":181383,"user_name":"Bravery168","can_delete":false,"product_type":"c1","uid":1232973,"ip_address":"","ucode":"DB08AEFBD6DF2B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","comment_is_top":false,"comment_ctime":1582532597,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1582532597","product_id":100025201,"comment_content":"看这章的体会：架构师要把握道（心法），也要深入术（武器，或者说解决问题的具体方式方法），手中能拿出的武器很多，心里形成运用的法则，做到道术一体，最后的境界就是达到心中有法，手中无剑胜有剑的境界。","like_count":0},{"had_liked":false,"id":155929,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1574779844,"is_pvip":false,"replies":[{"id":"59960","content":"pdf 转 word 的确比较复杂，这里没有讨论。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574829318,"ip_address":"","comment_id":155929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574779844","product_id":100025201,"comment_content":"最近买了打印机，pdf  打出来模糊，wps pdf 转word 想的挺好，实施起来各种坑。<br>思来想去，还是github 上找找pdf 转html的代码，毕竟ai 很成熟了。<br>然后html 打印。<br>毕竟对开发来说，调html样式 比编写word 容易太多。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475929,"discussion_content":"pdf 转 word 的确比较复杂，这里没有讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574829318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155726,"user_name":"落石","can_delete":false,"product_type":"c1","uid":1184061,"ip_address":"","ucode":"11F60E700E96B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/3d/7b9161ca.jpg","comment_is_top":false,"comment_ctime":1574745172,"is_pvip":false,"replies":[{"id":"59779","content":"仔细想想，是否可以解决问题","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574747491,"ip_address":"","comment_id":155726,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574745172","product_id":100025201,"comment_content":"func Save(dest interface{}, format string, func () interface{} docmentLoader) error<br><br>由调用方决定 document 的类型。<br>1. 将document也调整为父子类的形式。但隐约感觉到老师好像不太赞同继承？<br>2. 或者在调用时强转为 SaveWord 或 SavePDF 中的 IoDocument 和 ViewDocument ","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475849,"discussion_content":"仔细想想，是否可以解决问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574747491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155653,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1574733001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574733001","product_id":100025201,"comment_content":"模块边界 受教了 <br><br>期待架构思维实战篇👍","like_count":0},{"had_liked":false,"id":155574,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1574702386,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574702386","product_id":100025201,"comment_content":"     期待老师的《架构思维设计》：希望老师可以在阳历年之前分享出来，这样可以更好的用在自己的将来新项目上。<br>    一路跟着老师学习还是觉得受益匪浅，许多思路梳理清楚了。看到很多扩展性的坑、边界有时需要自己不断的调整到更高的高度，完成了一个类似看到了、审清还要做清，例如：架构的分级乱、接口乱、代码的效率&#47;规范化乱、执行乱。<br>      整体架构的思维设计确实可以梳理出许多：老师讲《中间件存储》时，根据老师的内容梳理清楚了数据系统这块，总体的架构思维还是期待老师的加课能够提供不一样的思维方式吧，这样自己可以做的更好。期待老师的《架构思维设计》，谢谢老师的分享。","like_count":1,"discussions":[{"author":{"id":1188023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","nickname":"Eternal","note":"","ucode":"EA6FE7CC98F740","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157864,"discussion_content":"在另外一个课程看到你\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580527730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}