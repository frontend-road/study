{"id":449798,"title":"05 | 类型匹配：怎么切除臃肿的强制转换？","content":"<p>你好，我是范学雷。今天，我们聊一聊Java模式匹配，主要是类型匹配。</p><p>Java的模式匹配是一个新型的、而且还在持续快速演进的领域。类型匹配是模式匹配的一个规范。类型匹配这个特性，首先在JDK 14中以预览版的形式发布。在JDK 15中，改进的类型匹配再次以预览版的形式发布。最后，类型匹配在JDK 16正式发布。</p><p>那么，什么是模式匹配，什么又是类型匹配呢？这就要说到模式的组成。通常，一个模式是匹配谓词和匹配变量的组合。其中，匹配谓词用来确定模式和目标是否匹配。在模式和目标匹配的情况下，匹配变量是从匹配目标里提取出来的一个或者多个变量。</p><p>对于类型匹配来说，匹配谓词用来指定模式的数据类型，而匹配变量就是一个属于该类型的数据变量。需要注意的是，对于类型匹配来说，匹配变量只有一个。</p><p>这样的描述还是太抽象，太难理解。我们还是通过案例和代码，一点一点地来理解类型匹配吧。</p><h2>阅读案例</h2><p>在程序员的日常工作中，一个重要的事情，就是把相似的东西抽象出来，设计成一个通用的、可以复用的接口。</p><p>比如说，我们从正方形、长方形、圆形这些看起来差异巨大的东西出发，抽象出了形状这个接口。我们希望使用一个实例时，如果我们不能确定它是正方形还是长方形，我们至少还能确定它是一个形状。这种模模糊糊的确定性（其实也是不确定性），其实对我们编写代码有巨大的帮助，包括但是不限于简化代码逻辑，减少代码错误。</p><!-- [[[read_end]]] --><p>但要注意的是，每一个实例都是具体的形状。它可以是正方形的对象，可以是长方形的对象，就是不能是一个抽象的形状。也就是说，抽象的类和接口不能直接实例化。</p><p>一个方法的规范，它的输入参数可能是一个表示形状的对象，也可能是一个更一般化的对象。比如说吧，我们要设计一个方法，来判断一个形状是不是正方形。那么，就需要一个表示形状的对象，作为这个方法的输入参数。而实现这个方法的代码，仅仅知道形状这个一般化的对象是远远不够的。下面的代码，就是一个这种方法的实现代码。</p><pre><code class=\"language-java\">static boolean isSquare(Shape shape) {\n    if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        return (rect.length == rect.width);\n    }\n\n    return (shape instanceof Square);\n}\n</code></pre><p>在这个isSquare方法的实现代码里，我们需要使用instanceof运算符，来判断输入参数是不是一个长方形的实例；如果判断成立，再使用类型转换运算符，把这个实例投射成长方形的实例；最后，我们开始使用这个长方形的实例，进行更多的运算。</p><p>其实，这样的操作是一个模式化的过程。如果我们把它揉碎了来看，这个模式有三个部分。</p><p>第一个部分是类型判断语句，也就是匹配谓词，使用的代码是“instanceof Rectangle”。第二个部分是类型转换语句，使用的是类型转换运算符（(Rectangle) shape）。第三个部分是声明一个新的本地变量，也就是匹配变量，来承载转换后的数据，使用的是变量声明和赋值运算符（Rectangle rect =）。第二个部分和第三个部分，只有在类型判断成立的情况下，才能够执行。</p><p>使用这样的模式化操作，是一个Java程序员的基本功。这个模式直观而且便于理解。可是，这个模式很乏味，也很臃肿。调用了instanceof之后，除了类型转换之外，我们还可以做什么呢？一般情况下，在类型判断之后，我们总是紧跟着就进行类型转换。</p><p>把类型判断和类型转换切割成两个部分，增加了错误潜入的机会，平添了许多烦恼。比如说，一个活生生的程序员或者冷冰冰的机器，有可能无意地使用了错误的类型。下面例子中的两段代码，就是两个常见的类型转换错误。第一段代码误用了变量类型，第二段代码误用了判断结果。</p><pre><code class=\"language-java\">if (shape instanceof Rectangle) {\n    Rectangle rect = (Rectangle) shape;\n        return (rect.length == rect.width);\n}\n</code></pre><pre><code class=\"language-java\">if (!(shape instanceof Rectangle) {\n    Rectangle rect = (Rectangle) shape;\n        return (rect.length == rect.width);\n}\n</code></pre><p>类型判断之后，我们原本就可以开始关注更重要的后续代码逻辑了，但现在不得不停下来编写类型转化代码，或者审视类型转换代码是否恰当。这当然影响力了生产效率。</p><p>我们可以用什么方法改进这个模式，提高生产效率呢？ 这个问题的答案就是类型匹配。</p><h2>类型匹配</h2><p>那么，类型匹配是怎么改进这个模式的呢？我们先来看看使用了类型匹配的代码的样子。下面的例子，就是使用类型匹配的一段代码。</p><pre><code class=\"language-java\">if (shape instanceof Rectangle rect) {\n    return (rect.length == rect.width);\n}\n</code></pre><p>为了便于更直观地比较，我把传统的实现代码和使用了类型匹配的实现代码列在了下面的表格里。你可以找找其中的差异，体会下类型匹配带来的改进。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/18/cd2bd3314d8efdf8887a2ebde87de818.jpg?wh=1920x729\" alt=\"图片\"></p><p>就像我们前面拆解的一样，传统的实现代码有三个部分；而使用类型匹配的代码，只有匹配谓词和本地变量两个部分，而且是在同一个语句里。为了帮助你理解这些概念，我画了下面的这张图，标记出了类型匹配的组成部分和关键概念。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/d1/d9882c077deb68b2675f68c5794840d1.jpg?wh=1920x1085\" alt=\"图片\"></p><p>你可能已经注意到了，使用类型转换运算符的语句，没有出现在使用类型匹配的代码里。但是，这并不影响类型匹配代码所要表达的基本逻辑。</p><p>这个基本逻辑就是：如果目标变量是一个长方形的实例，那么这个目标变量就会被赋值给一个本地的长方形变量，也就是我们所说的匹配变量；相反，如果目标变量不是一个长方形的实例，那么这个匹配变量就不会被赋值。</p><p>前面，我们讨论了两个常见的类型转换错误：误用变量类型和误用判断结果。在使用类型匹配的代码里，不再需要重复使用匹配类型，也不再需要使用强制类型转换符。所以，使用类型匹配的代码，不用再担心误用变量类型的错误了。</p><p>误用判断结果的错误，是不是也被解决了呢？ 似乎，我们还能写出下面的代码。在这样的代码里，如果目标变量不是一个长方形的实例，我们是不是也有可能使用匹配的变量呢？</p><pre><code class=\"language-java\">if (!(shape instanceof Rectangle rect)) {\n    return (rect.length == rect.width);\n}\n</code></pre><p>幸运的是，类型匹配已经考虑到了这个问题，Java编译器能够检测出上面的错误，不会允许使用没有赋值的匹配变量。这样，在代码编译期间，就有机会纠正代码的错误。比如说，我们可以尝试修改成下面的逻辑：如果目标变量不是一个长方形的实例，我们就不使用匹配变量；否则，我们就使用匹配变量。把这个逻辑映射到代码，大致是下面的样子。</p><pre><code class=\"language-java\">if (!(shape instanceof Rectangle rect)) {\n    return false;\n} else {\n    return (rect.length == rect.width);\n}\n</code></pre><p>在上面的代码里，使用匹配变量的条件语句else分支并没有声明这个匹配变量。为什么if语句声明的变量，可以在else语句里使用呢？要弄清楚这个问题，我们还要了解匹配变量的作用域。掌握匹配变量的作用域，是学会使用类型匹配的关键。</p><h2>匹配变量的作用域</h2><p>匹配变量的作用域，就是目标变量可以被确认匹配的范围。如果在一个范围内，无法确认目标变量是否被匹配，或者目标变量不能被匹配，都不能使用匹配变量。 如果我们从编译器的角度去理解，也就是说，在一个范围里，如果编译器能够确定匹配变量已经被赋值了，那么它就可以在这个范围内使用；如果编译器不能够确定匹配变量是否被赋值，或者确定没有被赋值，那么他就不能在这个范围内使用。</p><p>我们还是通过代码来理解这个有点抽象的概念吧。</p><p>第一段代码，我们看看最常规的使用。我们可以在确认类型匹配的条件语句之内使用匹配变量。这个条件语句之外，不是匹配变量的作用域。</p><pre><code class=\"language-java\">public static boolean isSquareImplA(Shape shape) {\n    if (shape instanceof Rectangle rect) {\n        // rect is in scope\n        return rect.length() == rect.width();\n    }\n    // rect is not in scope here\n    return shape instanceof Square;\n}\n</code></pre><p>第二段代码，我们看看有点意外的使用。我们可以在确认类型不匹配的条件语句之后使用匹配变量。这个条件语句之内，不是匹配变量的作用域。</p><pre><code class=\"language-java\">public static boolean isSquareImplB(Shape shape) {\n    if (!(shape instanceof Rectangle rect)) {\n        // rect is not in scope here\n        return shape instanceof Square;\n    }\n\n    // rect is in scope\n    return rect.length() == rect.width();\n}\n</code></pre><p>第三段代码，我们看看紧凑的方式。这一段代码的逻辑，和第一段代码一样，我们只是换成了一种更紧凑的表示方法。</p><p>在这一段代码里，我们使用逻辑与运算符表示第一段里的条件语句：类型匹配并且匹配变量满足某一个条件。这样的表示是符合匹配变量的作用域规则的。逻辑与运算符从左到右计算，只有第一个运算成立，也就是类型匹配，才能进行下一个运算。所以，我们可以在逻辑与运算的第二部分，使用匹配变量。</p><pre><code class=\"language-java\">public static boolean isSquareImplC(Shape shape) {\n    return shape instanceof Square ||  // rect is not in scope here\n          (shape instanceof Rectangle rect &amp;&amp;\n           rect.length() == rect.width());   // rect is in scope here\n}\n</code></pre><p>第四段代码，我们看看逻辑或运算。它类似于第三段代码，只是我们把逻辑与运算符替换成了逻辑或运算符。这时候的逻辑，就变成了“类型匹配或者匹配变量满足某一个条件”。逻辑或运算符也是从左到右计算。</p><p>不过和逻辑与运算符不同的是，一般来说，只有第一个运算不成立，也就是说类型不匹配时，才能进行下一步的运算。下一步的运算，匹配变量并没有被赋值，我们不能够在这一部分使用匹配变量。所以，这一段代码并不能通过编译器的审查。</p><pre><code class=\"language-java\">public static boolean isSquareImplD(Shape shape) {\n    return shape instanceof Square ||  // rect is not in scope here\n          (shape instanceof Rectangle rect ||\n           rect.length() == rect.width());   // rect is not in scope here\n}\n</code></pre><p>第五段代码，我们看看位与运算。</p><p>这段代码和第三段代码类似，只是我们把逻辑与运算符（&amp;&amp;）替换成了位与运算符（&amp;）。</p><p>和第三段代码相比，这一段代码的逻辑其实并没有变化。只不过，位与运算符两侧的表达式都要参与计算。也就是说，不管位与运算符左侧的运算是否成立，位与运算符右侧的运算都要计算出来。换句话说，无论左侧的类型匹配不匹配，右侧的匹配变量都要使用。这就违反了匹配变量的作用域原则，编译器不能够确定匹配变量是否被赋值。所以，这一段代码，也不能通过编译器的审查。</p><pre><code class=\"language-java\">public static boolean isSquareImplE(Shape shape) {\n    return shape instanceof Square |  // rect is not in scope here\n          (shape instanceof Rectangle rect &amp;\n           rect.length() == rect.width());   // rect is in scope here\n}\n</code></pre><p>第六段代码，我们把匹配变量的作用域的影响延展一下，看看它对影子变量（Shadowed Variable）的影响。</p><p>既然我们讨论变量的作用域，我们就不能不看看影子变量。假设我们定义了一个静态变量，它和匹配变量使用相同的名字。在匹配变量的作用域内，除非特殊处理，这个静态变量就被遮掩住了。这时候，这个变量名字代表的就是匹配变量；而不是静态变量。类似地，在匹配变量的作用域之外，这个变量名字代表的就是这个静态变量。</p><p>在这段代码里，我们使用类似于第一段代码的代码组织方式，来表述类型匹配部分的逻辑。另外，我在代码里标注了变量的作用域。你可以看看，这两个变量的作用域，和你想象的作用域是不是一样的？</p><pre><code class=\"language-java\">public final class Shadow {\n    private static final Rectangle rect = null;\n\n    public static boolean isSquare(Shape shape) {\n        if (shape instanceof Rectangle rect) {\n            // Field rect is shadowed, local rect is in scope\n            System.out.println(\"This should be the local rect: \" + rect);\n            return rect.length() == rect.width();\n        }\n\n        // Field rect is in scope, local rect is not in scope here\n        System.out.println(\"This should be the field rect: \" + rect);\n        return shape instanceof Shape.Square;\n    }\n}\n</code></pre><p>第七段代码，我们还是来看一看影子变量。只不过，这一次，我们使用类似于第二段代码的代码组织方式，来表述类型匹配部分的逻辑。我在代码里标出的这两个变量的作用域，和你想象的作用域是一样的吗？</p><pre><code class=\"language-java\">public final class Shadow {\n    private static final Rectangle rect = null;\n\n    public static boolean isSquare(Shape shape) {\n        if (!(shape instanceof Rectangle rect)) {\n            // Field rect is in scope, local rect is not in scope here\n            System.out.println(\"This should be the field rect: \" + rect);\n            return shape instanceof Shape.Square;\n        }\n\n        // Field rect is shadowed, local rect is in scope\n        System.out.println(\"This should be the local rect: \" + rect);\n        return rect.length() == rect.width();\n    }\n}\n</code></pre><p>如果回头看看这七段代码，你会倾向于哪一种编码的风格？我们把这些代码放在一起，分析一下它们的特点。</p><p>第四段和第五段代码，不能通过编译器的审查，所以我们不能使用这两种编码方式。</p><p>第二段和第七段代码，匹配变量的作用域，远离了类型匹配语句。这种距离上的疏远，无论在视觉上还是心理上，都不是很舒适的选择。不舒适，就给错误留下了空间，不容易编码，也不容易排错。这种代码逻辑和语法上都没有问题，但是不太容易阅读。</p><p>第一段和第六段代码，匹配变量的作用域，紧跟着类型匹配语句。这是我们感觉舒适的代码布局，也是最安全的代码布局，不容易出错，也容易阅读。</p><p>第三段代码，它的匹配变量的作用域也是紧跟着类型匹配语句。只不过，这种代码的编排方式不太容易阅读，阅读者需要认真拆解每一个条件，才能确认逻辑是正确的。相对于第一段和第六段代码，第三段代码的组织方式，是一个次优的选择。</p><p>如果你学习过《代码精进之路》专栏，我想你会理解代码组织方式的重要性，并且能够有意识地选择简单、安全的组织方式。对于类型匹配来说，第一段和第六段代码的组织方式，是我们喜欢的方式。</p><h2>实例匹配的红利</h2><p>在快要结束本文写作的时候，我还是忍不住测试了一下实例匹配的性能。在我自己的笔记本电脑上，和使用类型转换运算符的代码相比，使用实例匹配代码的吞吐量提高了将近20%。这是一个巨大的性能提升。我知道使用实例匹配会提高性能，但是没想到有这么大的提升。除了主要目标之外，这也算是使用实例匹配的一个红利吧。</p><pre><code class=\"language-plain\">Benchmark&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Mode&nbsp; Cnt&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Score&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Error&nbsp; Units\nPatternBench.useCast&nbsp; &nbsp; &nbsp;thrpt&nbsp; &nbsp;15&nbsp; 263559326.599 ± 78815341.366&nbsp; ops/s\nPatternBench.usePattern&nbsp; thrpt&nbsp; &nbsp;15&nbsp; 313458467.044 ±&nbsp; 2666412.767&nbsp; ops/s\n</code></pre><h2>总结</h2><p>好，这节课的内容到这里就要结束了，我来做个小结。从前面的讨论中，我们了解了Java的模式匹配和Java的类型匹配，讨论了Java类型匹配要解决的问题、表现的形式，以及匹配变量的作用域。顺便，我们还讨论了我们喜欢的类型匹配代码的组织方式。</p><p>在我们日常的编码实践中，为了简化代码逻辑，减少代码错误，提高生产效率，我们应该优先考虑使用类型匹配，而不是传统的强制类型转换运算符。</p><p>如果你想要丰富你的代码评审清单，有了Java类型匹配后，你可以加入下面这一条：</p><blockquote>\n<p>如果需要类型转换，是不是可以使用类型匹配？</p>\n</blockquote><p>另外，我在今天的讨论中拎出了几个技术要点，这些都可能在你们面试中出现哦。通过这一次学习，你应该能够：</p><ul>\n<li>知道Java支持类型匹配，并且能够使用类型匹配，替换掉传统的强制类型转换运算。\n<ul>\n<li>面试问题：你知道类型匹配吗？会不会使用它？</li>\n</ul>\n</li>\n<li>了解类型匹配的原理和它要解决的问题，知道匹配变量的作用域。\n<ul>\n<li>面试问题：使用类型匹配有哪些好处？匹配变量什么时候可以使用？</li>\n</ul>\n</li>\n<li>了解类型匹配的代码组织方式，能够有意识地使用简单、安全的代码组织方式。\n<ul>\n<li>面试问题：你写的这段代码（如果使用了类型匹配），还有更好的表达方式吗？</li>\n</ul>\n</li>\n</ul><p>如果你能够有意识地使用Java的类型匹配，并且有能力选择简单、安全的代码组织方式，你应该能够大幅度提高编码的效率和质量，提高代码的性能。毫无疑问，在面试的时候，这也是一个能够让你与众不同的知识点。</p><h2>思考题</h2><p>在“匹配变量的作用域”这一小节里，我们列举了7种实例匹配的代码组织方式。除了第四段代码和第五段代码，其他的五种代码都可以通过编译。为了加深你的印象，我们要动动手，验证一下每一种代码组织方式下，匹配变量的作用域。</p><p>我在下面的例子中写了一个代码小样，使用打印语句输出来验证结果。你可以试着修改成你喜欢的样子，添加更多的代码组织方式。</p><pre><code class=\"language-java\">/*\n * Copyright (c) 2021, Xuelei Fan. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n */\n\npackage co.ivi.jus.instance.review.xuelei;\n\npublic sealed interface Shape\n        permits Shape.Circle, Shape.Rectangle, Shape.Square {\n    Shape.Rectangle rect = null;    // field variable\n\n    record Circle(double radius) implements Shape {\n        // blank\n    }\n\n    record Square(double side) implements Shape {\n        // blank\n    }\n\n    record Rectangle(double length, double width) implements Shape {\n        // blank\n    }\n\n    static void main(String[] args) {\n        Shape shape = new Shape.Rectangle(10, 10);\n        System.out.println(\"It should be ture that \" + shape +\n                \" is a square: \" + isSquare(shape));\n\n        System.out.println();\n\n        shape = new Shape.Circle(10);\n        System.out.println(\"It cannot be ture that \" + shape +\n                \" is a square: \" + (!isSquare(shape)));\n    }\n\n    static boolean isSquare(Shape shape) {\n        if (shape instanceof Rectangle rect) {\n            // Field rect is shadowed, local rect is in scope\n            System.out.println(\n                    \"This should be the local rect: \" +\n                     rect.equals(shape));\n            return (rect.length == rect.width);\n        }\n\n        // Field rect is in scope, local rect is not in scope here\n        System.out.println(\n                \"This should be the field rect: \" + (rect == null));\n        return (shape instanceof Square);\n    }\n}\n</code></pre><p>欢迎你在留言区留言、讨论，分享你的阅读体验以及验证的代码和结果。</p><p>注：本文使用的完整的代码可以从<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/instance\">GitHub</a>下载，你可以通过修改<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/instance\">GitHub</a>上<a href=\"https://github.com/XueleiFan/java-up/blob/main/src/main/java/co/ivi/jus/instance/review/xuelei/Shape.java\">review template</a>代码，完成这次的思考题。如果你想要分享你的修改或者想听听评审的意见，请提交一个 GitHub的拉取请求（Pull Request），并把拉取请求的地址贴到留言里。这一小节的拉取请求代码，请在<a href=\"https://github.com/XueleiFan/java-up/blob/main/src/main/java/co/ivi/jus/instance/review\">实例匹配专用的代码评审目录</a>下，建一个以你的名字命名的子目录，代码放到你专有的子目录里。比如，我的代码，就放在instance/review/xuelei的目录下面。</p><p>注：本文使用的基准性能测试代码，你也可以从<a href=\"https://github.com/XueleiFan/code-bench/blob/main/src/main/java/code/bench/PatternBench.java\">GitHub</a>上下载，试试你的机器是不是也有相似的性能表现。</p>","neighbors":{"left":{"article_title":"04 | 封闭类：怎么刹住失控的扩展性？","id":447486},"right":{"article_title":"06 | switch表达式：怎么简化多情景操作？","id":454523}},"comments":[{"had_liked":false,"id":323411,"user_name":"许灵","can_delete":false,"product_type":"c1","uid":1059926,"ip_address":"","ucode":"0296EC9929B570","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/56/ff7a9730.jpg","comment_is_top":true,"comment_ctime":1637893847,"is_pvip":true,"replies":[{"id":"117339","content":"这个发现很好。小伙伴们，咱们点赞把它置顶好吗？这样，更多的小伙伴能够看得到这种情况。","user_name":"作者回复","comment_id":323411,"uid":"1111315","ip_address":"","utype":1,"ctime":1637905916,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"9.2233720943271997e+18","product_id":100097301,"comment_content":"https:&#47;&#47;github.com&#47;XueleiFan&#47;java-up&#47;pull&#47;11<br>老师你好！匹配变量的作用域有一种情况，在文章中没有提到。<br>if (!(shape instanceof Rectangle rect)) { <br>&#47;&#47; Field rect is in scope, local rect is not in scope here <br> }<br>else {<br>&#47;&#47; Field rect is shadowed, local rect is in scope<br>}<br><br>&#47;&#47; Field rect is in scope, local rect is not in scope here ","like_count":13,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533562,"discussion_content":"这个发现很好。小伙伴们，咱们点赞把它置顶好吗？这样，更多的小伙伴能够看得到这种情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637905916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323209,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1637762806,"is_pvip":false,"replies":[{"id":"117297","content":"嗯， 我还没联系到try-with-resource。 你这么一说，还真是有那么点意思。","user_name":"作者回复","comment_id":323209,"uid":"1111315","ip_address":"","utype":1,"ctime":1637822519,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14522664694","product_id":100097301,"comment_content":"之前第一眼看到就觉得和try-with-resource有异曲同工之妙,减少模板代码,优化性能.","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533238,"discussion_content":"嗯， 我还没联系到try-with-resource。 你这么一说，还真是有那么点意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637822519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323101,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1637727858,"is_pvip":false,"replies":[{"id":"117278","content":"有办法做到JVM里，就不仅仅是语法糖了。这也是JDK能够给基于JVM的其他编程语言带来的好处。","user_name":"作者回复","comment_id":323101,"uid":"1111315","ip_address":"","utype":1,"ctime":1637771233,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14522629746","product_id":100097301,"comment_content":"类型匹配语法糖真甜，还能提升性能，很意外很惊喜！","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533110,"discussion_content":"有办法做到JVM里，就不仅仅是语法糖了。这也是JDK能够给基于JVM的其他编程语言带来的好处。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637771233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323035,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1637714110,"is_pvip":false,"replies":[{"id":"117255","content":"请参考这里，https:&amp;#47;&amp;#47;github.com&amp;#47;openjdk&amp;#47;jmh。这是一个很有用的工具，建议看一看，写写性能测试。用熟了，你可能也会像我一样，喜欢上这个小工具。专栏的代码库里，也有性能测试的代码。","user_name":"作者回复","comment_id":323035,"uid":"1111315","ip_address":"","utype":1,"ctime":1637724174,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"14522615998","product_id":100097301,"comment_content":"请问老师这个性能测试是用什么工具与方法做的？","like_count":3,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532898,"discussion_content":"尝试修复乱码 https://github.com/openjdk/jmh","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637728102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":1,"child_discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533172,"discussion_content":"谢谢！web页面回复的乱码真实头疼。 应该在极客时间开发工程师的计划里了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637807564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":532898,"ip_address":""},"score":533172,"extra":"{\"user_type\":2}"}]},{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532877,"discussion_content":"请参考这里，https:&amp;#47;&amp;#47;github.com&amp;#47;openjdk&amp;#47;jmh。这是一个很有用的工具，建议看一看，写写性能测试。用熟了，你可能也会像我一样，喜欢上这个小工具。专栏的代码库里，也有性能测试的代码。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637724174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342630,"user_name":"yihang","can_delete":false,"product_type":"c1","uid":1012361,"ip_address":"","ucode":"A5506F085D1793","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/89/1a83120a.jpg","comment_is_top":false,"comment_ctime":1650371657,"is_pvip":false,"replies":[{"id":"125299","content":"哦，你快来帮我看看，是不是性能测试的用例写错了？https:&#47;&#47;github.com&#47;XueleiFan&#47;code-bench&#47;blob&#47;main&#47;src&#47;main&#47;java&#47;code&#47;bench&#47;PatternBench.","user_name":"作者回复","comment_id":342630,"uid":"1111315","ip_address":"","utype":1,"ctime":1650607592,"user_name_real":"作者"}],"discussion_count":1,"race_medal":0,"score":"5945338953","product_id":100097301,"comment_content":"老师你好，【我知道使用实例匹配会提高性能，但是没想到有这么大的提升】但反编译后的字节码都一样啊：<br>if (obj instanceof Student stu) {<br>            System.out.println(stu);<br>        }<br>        if (obj instanceof Student) {<br>            Student stu = (Student) obj;<br>            System.out.println(stu);<br>        }<br>为什么会有性能提升，能看到你测试用例代码吗","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566126,"discussion_content":"哦，你快来帮我看看，是不是性能测试的用例写错了？https://github.com/XueleiFan/code-bench/blob/main/src/main/java/code/bench/PatternBench.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650607592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323003,"user_name":"Clark","can_delete":false,"product_type":"c1","uid":1393121,"ip_address":"","ucode":"3026E8EDDA2AC9","user_header":"https://static001.geekbang.org/account/avatar/00/15/41/e1/91bf4837.jpg","comment_is_top":false,"comment_ctime":1637683875,"is_pvip":false,"replies":[{"id":"117254","content":"这就牵扯到另外一个问题了，就是强类型还是弱类型的编程语言。ts这里可以做到更优雅。","user_name":"作者回复","comment_id":323003,"uid":"1111315","ip_address":"","utype":1,"ctime":1637723997,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5932651171","product_id":100097301,"comment_content":"与typescript在instanceof直接把类型确定了比，Java这个新语法还是不够优雅。<br>typescript：<br>if (a instanceof Rect) {<br> a.area(); &#47;&#47; a is Rect<br>}<br>是不是觉得ts这样挺优雅的","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532876,"discussion_content":"这就牵扯到另外一个问题了，就是强类型还是弱类型的编程语言。ts这里可以做到更优雅。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637723997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361282,"user_name":"I    PYJ","can_delete":false,"product_type":"c1","uid":1235727,"ip_address":"四川","ucode":"19699EF09D23AF","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/0f/20edf7a6.jpg","comment_is_top":false,"comment_ctime":1667381589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667381589","product_id":100097301,"comment_content":"老师，您好。文章中的这一段：下面例子中的两段代码，就是两个常见的类型转换错误。第一段代码误用了变量类型，第二段代码误用了判断结果。<br>我看了举例的第一段代码不存在误用来变量类型呀，您这边应该是想展示一个错误的例子，但是没有改到吧","like_count":0},{"had_liked":false,"id":359069,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1665220336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665220336","product_id":100097301,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":358793,"user_name":"xueerfei007","can_delete":false,"product_type":"c1","uid":1155062,"ip_address":"浙江","ucode":"EF3FE821E5B54A","user_header":"https://static001.geekbang.org/account/avatar/00/11/9f/f6/7431e82e.jpg","comment_is_top":false,"comment_ctime":1664781490,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664781490","product_id":100097301,"comment_content":"关于类型转换这块，我自己做了下实验，对比了用JDD1.8编译普通类型转换代码，用JDK17编译新的类型转换代码，生成的字节码几乎是一样的，通过javap查看，用JDK17编译出来的字节码中，方法的代码里没有了局部变量表，难道说性能提升是因为优化了局部变量表? <br><br>对比出来，1.8编译的有局部变量表<br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>           12      17     1  rect   LShadow$Rectangle;<br>            0      34     0 shape   LShadow$Shape;","like_count":0},{"had_liked":false,"id":339620,"user_name":"rocedu","can_delete":false,"product_type":"c1","uid":1013097,"ip_address":"","ucode":"E46E29CBBB94A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/69/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1648243742,"is_pvip":true,"replies":[{"id":"124154","content":"谢谢。链接应该是： https:&#47;&#47;github.com&#47;XueleiFan&#47;code-bench&#47;blob&#47;main&#47;src&#47;main&#47;java&#47;code&#47;bench&#47;PatternBench.java。编辑能把链接修改成一下吗？","user_name":"作者回复","comment_id":339620,"uid":"1111315","ip_address":"","utype":1,"ctime":1648331038,"user_name_real":"作者"}],"discussion_count":1,"race_medal":0,"score":"1648243742","product_id":100097301,"comment_content":"https:&#47;&#47;github.com&#47;XueleiFan&#47;code-bench&#47;blob&#47;main&#47;src&#47;main&#47;java&#47;crypto&#47;bench&#47;PatternBench.java 最后一个链接404了","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558472,"discussion_content":"谢谢。链接应该是： https://github.com/XueleiFan/code-bench/blob/main/src/main/java/code/bench/PatternBench.java。编辑能把链接修改成一下吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648331038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324003,"user_name":"王硕🤖","can_delete":false,"product_type":"c1","uid":2850134,"ip_address":"","ucode":"FA5F66CC1D0442","user_header":"https://static001.geekbang.org/account/avatar/00/2b/7d/56/10e92ae9.jpg","comment_is_top":false,"comment_ctime":1638254383,"is_pvip":false,"replies":[{"id":"117611","content":"有没有else语句，逻辑似乎都是一样的。你有没有碰到编译错误，或者运行错误？ 错误信息是什么样的？","user_name":"作者回复","comment_id":324003,"uid":"1111315","ip_address":"","utype":1,"ctime":1638291202,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638254383","product_id":100097301,"comment_content":"匹配变量作用域的第二段代码是有问题的，只有下面跟 else 的时候，才能在 else 的代码块范围内使用 rect。<br>```<br>public static boolean isSquareImplB(Shape shape) {<br>    if (!(shape instanceof Rectangle rect)) {<br>        &#47;&#47; rect is not in scope here<br>        return shape instanceof Square;<br>    } else {<br>        &#47;&#47; rect is in scope<br>        return rect.length() == rect.width();<br>    }<br>}<br>```","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534892,"discussion_content":"有没有else语句，逻辑似乎都是一样的。你有没有碰到编译错误，或者运行错误？ 错误信息是什么样的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638291202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323316,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1637830215,"is_pvip":false,"replies":[{"id":"117312","content":"1. 类库使用新特性， 要滞后一段时间， 甚至很多年。 希望有朋友贡献代码。<br><br>2. 这个的意思是使用CPU指令加速， 需要在JVM里嵌入特殊的代码。 等到第11讲， 我们讨论矢量计算的时候， 应用程序的代码就也能使用硬件加速了，不再需要JVM的特殊代码了。","user_name":"作者回复","comment_id":323316,"uid":"1111315","ip_address":"","utype":1,"ctime":1637855436,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1637830215","product_id":100097301,"comment_content":"我的转换一般是map(Class::cast)。所以去翻了下17的Class类。<br>1.Class类还是（T）obj强转，看来新特性出了，却没有去替换。毕竟有性能提升，还是可以换下的。<br>2.@IntrinsicCandidate 多了这个注解，请问是做啥用的？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533442,"discussion_content":"1. 类库使用新特性， 要滞后一段时间， 甚至很多年。 希望有朋友贡献代码。\n\n2. 这个的意思是使用CPU指令加速， 需要在JVM里嵌入特殊的代码。 等到第11讲， 我们讨论矢量计算的时候， 应用程序的代码就也能使用硬件加速了，不再需要JVM的特殊代码了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637855436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323278,"user_name":"fatme","can_delete":false,"product_type":"c1","uid":1034451,"ip_address":"","ucode":"75A805D2BB2AD1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","comment_is_top":false,"comment_ctime":1637813391,"is_pvip":false,"replies":[{"id":"117296","content":"理论上应该可以这样， 但是不一定更有利于代码阅读。","user_name":"作者回复","comment_id":323278,"uid":"1111315","ip_address":"","utype":1,"ctime":1637822442,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1637813391","product_id":100097301,"comment_content":"能不能提供隐含的匹配变量呢，类似 groovy 闭包的 it 隐含参数(https:&#47;&#47;groovy-lang.org&#47;closures.html#implicit-it)。这样我们就可以写下面的代码：<br><br>if (shape instanceof Rectangle) {     <br>    return it.length() == it.width();<br>}","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533237,"discussion_content":"理论上应该可以这样， 但是不一定更有利于代码阅读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637822442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323216,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1637764864,"is_pvip":false,"replies":[{"id":"117301","content":"哦，我想你有可能会想去看看我的另外一个专栏“代码精进之路”。 我在PR留言了，为什么这样的格式感觉好，但是实际不好，说起来话长。 你看看有没有“代码精进之路”的试读权限，看看第一个模块的相关章节。","user_name":"作者回复","comment_id":323216,"uid":"1111315","ip_address":"","utype":1,"ctime":1637823480,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1637764864","product_id":100097301,"comment_content":"https:&#47;&#47;github.com&#47;XueleiFan&#47;java-up&#47;pull&#47;12<br><br>在方法3(isSquare)基础上去除了多余的括号,感觉这种方式更好,更简洁.当然为了维护,需要在方法中做好注释.<br><br>另外移除了方法1(isSquareA)和方法6(isSquareF)多余的括号,方法1和方法6只是判断顺序有所差异.但略比方法3显得冗长了一些.","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533243,"discussion_content":"哦，我想你有可能会想去看看我的另外一个专栏“代码精进之路”。 我在PR留言了，为什么这样的格式感觉好，但是实际不好，说起来话长。 你看看有没有“代码精进之路”的试读权限，看看第一个模块的相关章节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637823480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533376,"discussion_content":"好的,谢谢老师.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637848777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]}]}