{"id":257767,"title":"05 | 如何安全、快速地接入OAuth 2.0？","content":"<p>你好，我是王新栋。</p><p>在<a href=\"https://time.geekbang.org/column/article/257101\">第3讲</a>，我已经讲了授权服务的流程，如果你还记得的话，当时我特意强调了一点，就是<strong>授权服务将OAuth 2.0的复杂性都揽在了自己身上</strong>，这也是授权服务为什么是OAuth 2.0体系的核心的原因之一。</p><p>虽然授权服务做了大部分工作，但是呢，在OAuth 2.0的体系里面，除了资源拥有者是作为用户参与，还有另外两个系统角色，也就是第三方软件和受保护资源服务。那么今天这一讲，我们就站在这两个角色的角度，看看它们应该做哪些工作，才能接入到OAuth 2.0的体系里面呢？</p><p>现在，就让我们来看看，作为第三方软件的小兔和京东的受保护资源服务，具体需要着重处理哪些工作吧。</p><blockquote>\n<p>注：另外说明一点，为了脱敏的需要，在下面的讲述中，我只是把京东商家开放平台作为一个角色使用，以便有场景感，来帮助你理解。</p>\n</blockquote><h2>构建第三方软件应用</h2><p>我们先来思考一下：如果要基于京东商家开放平台构建一个小兔打单软件的应用，小兔软件的研发人员应该做哪些工作？</p><p>是不是要到京东商家开放平台申请注册为开发者，在成为开发者以后再创建一个应用，之后我们就开始开发了，对吧？没错，一定是这样的流程。那么，开发第三方软件应用的过程中，我们需要重点关注哪些内容呢？</p><p>我先来和你总结下，这些内容包括4部分，分别是：<strong>注册信息、引导授权、使用访问令牌、使用刷新令牌。</strong></p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/ee/78/ee18ea7aab4fbee26cf23d7613801078.png?wh=1606*460\" alt=\"\" title=\"图1 开发第三方软件应用，应该关注的内容\"></p><p>第一点，注册信息。</p><p>首先，小兔软件只有先有了身份，才可以参与到OAuth 2.0的流程中去。也就是说，小兔软件需要先拥有自己的app_id和app_serect等信息，同时还要填写自己的回调地址redirect_uri、申请权限等信息。</p><p>这种方式的注册呢，我们有时候也称它为<strong>静态注册</strong>，也就是小兔软件的研发人员提前登录到京东商家开放平台进行手动注册，以便后续使用这些注册的相关信息来请求访问令牌。</p><p>第二点，引导授权。</p><p>当用户需要使用第三方软件，来操作其在受保护资源上的数据，就需要第三方软件来引导授权。比如，小明要使用小兔打单软件来对店铺里面的订单发货打印，那小明首先访问的一定是小兔软件（原则上是直接访问第三方软件，不过我们在后面讲到服务市场这种场景的时候，会有稍微不同），不会是授权服务，更不会是受保护资源服务。</p><p>但是呢，小兔软件需要小明的授权，只有授权服务才能允许小明这样做。所以呢，小兔软件需要 “配合” 小明做的第一件事儿，就是将小明引导至授权服务，如下面代码所示。</p><p>那去做什么呢？其实就是让用户为第三方软件授权，得到了授权之后，第三方软件才可以代表用户去访问数据。也就是说，小兔打单软件获得授权之后，才能够代表小明处理其在京东店铺上的订单数据。</p><pre><code>String oauthUrl = &quot;http://localhost:8081/OauthServlet-ch03?reqType=oauth&quot;;\n\nresponse.sendRedirect(toOauthUrl);\n</code></pre><p>第三点，使用访问令牌。</p><p><strong>拿到令牌后去使用令牌，才是第三方软件的最终目的</strong>。然后我们看看如何使用令牌。目前OAuth 2.0的令牌只支持一种类型，那就是bearer令牌，也就是我之前讲到的可以是任意字符串格式的令牌。</p><p>官方规范给出的使用访问令牌请求的方式，有三种，分别是：</p><ul>\n<li>Form-Encoded Body Parameter（表单参数）</li>\n</ul><pre><code>POST /resource HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\n\naccess_token=b1a64d5c-5e0c-4a70-9711-7af6568a61fb\n</code></pre><ul>\n<li>URI Query Parameter（URI查询参数）</li>\n</ul><pre><code>GET /resource?access_token=b1a64d5c-5e0c-4a70-9711-7af6568a61fb HTTP/1.1\nHost: server.example.com\n</code></pre><ul>\n<li>Authorization Request Header Field（授权请求头部字段）</li>\n</ul><pre><code>GET /resource HTTP/1.1\nHost: server.example.com\nAuthorization: Bearer b1a64d5c-5e0c-4a70-9711-7af6568a61fb\n</code></pre><p>也就是说，这三种方式都可以请求到受保护资源服务。那么，我们采用哪种方式最合适呢？</p><p>根据 OAuth 2.0 的官方建议，系统在接入OAuth 2.0之前信息传递的请求载体是JSON格式的，那么如果继续采用表单参数提交的方式，令牌就无法加入进去了，因为格式不符。如果这时采用参数传递的方式呢，整个URI会被整体复制，安全性是最差的。而请求头部字段的方式就没有上述的这些“烦恼”，因此官方的建议是采用Authorization的方式来传递令牌。</p><p>但是，<strong>我建议你采用表单提交，也就是POST的方式来提交令牌，</strong>类似如下代码所示。原因是这样的，从官方的建议中也可以看出，它指的是在接入OAuth 2.0之前，如果你已经采用了JSON数据格式请求体的情况下，不建议使用表单提交。但是，刚开始的时候，只要三方软件和平台之间约束好了，大家一致采用表单提交，就没有任何问题了。<strong>因为表单提交的方式在保证安全传输的同时，还不需要去额外处理Authorization头部信息</strong>。</p><pre><code>String protectedURl=&quot;http://localhost:8082/ProtectedServlet-ch03&quot;;\nMap&lt;String, String&gt; paramsMap = new HashMap&lt;String, String&gt;();\n\nparamsMap.put(&quot;app_id&quot;,&quot;APPID_RABBIT&quot;);\nparamsMap.put(&quot;app_secret&quot;,&quot;APPSECRET_RABBIT&quot;);\nparamsMap.put(&quot;token&quot;,accessToken);\n\nString result = HttpURLClient.doPost(protectedURl,HttpURLClient.mapToStr(paramsMap));\n</code></pre><p>第四点，使用刷新令牌。</p><p>我在讲授权服务的时候提到过，如果访问令牌过期了，小兔软件总不能立马提示并让小明重新授权一次，否则小明的体验将会非常不好。为了解决这个问题呢，就用到了刷新令牌。</p><p>使用刷新令牌的方式跟使用访问令牌是一样的，具体可以参照上面我们讲的访问令牌的方式。关于刷新令牌的使用，你最需要关心的是，什么时候你会来决定使用刷新令牌。</p><p>在小兔打单软件收到访问令牌的同时，也会收到访问令牌的过期时间expires_in。一个设计良好的第三方应用，<strong>应该将expires_in值保存下来并定时检测</strong>；如果发现expires_in即将过期，则需要利用refresh_token去重新请求授权服务，以便获取新的、有效的访问令牌。</p><p>这种定时检测的方法可以提前发现访问令牌是否即将过期。此外，还有一种方法是“现场”发现。也就是说，比如小兔软件访问小明店铺订单的时候，突然收到一个访问令牌失效的响应，此时小兔软件立即使用refresh_token来请求一个访问令牌，以便继续代表小明使用他的数据。</p><p>综合来看的话，定时检测的方式，需要我们额外开发一个定时任务；而“现场”发现，就没有这种额外的工作量啦。具体采用哪一种方式，你可以结合自己的实际情况。不过呢，我还是建议你采用定时检测这种方式，因为它可以带来“提前量”，以便让我们有更好的主动性，而现场发现就有点被动了。</p><p>说到这里，我要再次提醒你注意的是，<strong>刷新令牌是一次性的，使用之后就会失效</strong>，但是它的有效期会比访问令牌要长。这个时候我们可能会想到，如果刷新令牌也过期了怎么办？在这种情况下，我们就需要将刷新令牌和访问令牌都放弃，相当于回到了系统的初始状态，只能让用户小明重新授权了。</p><p>到这里，我们来总结下，在构建第三方应用时，你需要重点关注的就是注册、授权、访问令牌、刷新令牌。只要你掌握了这四部分内容，在类似京东这样的开放平台上开发小兔软件，就不再是什么困难的事情了。</p><h2>服务市场中的第三方应用软件</h2><p>在构建第三方应用的引导授权时，我们说用户第一次“触摸”到的一定是第三方软件，但这并不是绝对的。这个不绝对，就发生在服务市场这样的场景里。</p><p>那什么是服务市场呢？说白了，就是你开发的软件，比如小兔打单软件、店铺装修软件等，都发布到这样一个“市场”里面售卖。这样，当用户购买了这些软件之后，就可以在服务市场里面看到有个“立即使用”的按钮。点击这个按钮，用户就可以直接访问自己购买的第三方软件了。</p><p>比如，京东的京麦服务市场里有个“我的服务”目录，里面就存放了我购买的打单软件。小明就可以直接点击“立即使用”，继而进入小兔打单软件，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/15/140a4efb622e21b21fcc4ff57653a915.png?wh=1598*648\" alt=\"\" title=\"图2 京麦服务市场“我的服务”\"></p><p>那么，这里需要注意的是，作为第三方开发者来构建第三方软件的时候，在授权码环节除了要接收授权码code值之外，还要接收用户的订购相关信息，比如服务的版本号、服务代码标识等信息。</p><p>好了，以上就是关于构建第三方软件时需要注意的一些细节问题了。接下来，我们再谈谈构建受保护资源服务的时候，又需要重点处理哪些工作呢。</p><h2>构建受保护资源服务</h2><p>你先想一想，实际上在整个开放授权的环境中，受保护资源最终指的还是Web API，比如说，访问头像的API、访问昵称的API。对应到我们的打单软件中，受保护资源就是订单查询API、批量查询API等。</p><p>在互联网上的系统之间的通信，基本都是以Web API为载体的形式进行。因此呢，当我们说受保护资源被授权服务保护着时，实际上说的是授权服务最终保护的是这些Web API。我们在构建受保护资源服务的时候，除了基本的要检查令牌的合法性，还需要做些什么呢？我认为<strong>最重要的就是权限范围了。</strong></p><p>在我们处理受保护资源服务中的逻辑的时候，校验权限的处理会占据很大的比重。你想啊，访问令牌递过来，你肯定要多看看令牌到底能操作哪些功能、又能访问哪些数据吧。现在，我们把这些权限的类别总结归纳下来，最常见的大概有以下几类。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/f6/e7b134686b9f2e824ffa8410e20f59f6.jpg?wh=1456*630\" alt=\"\" title=\"图3 3类权限类别\"></p><p>接下来，我和你具体说说这些权限是如何使用的。</p><ol>\n<li>不同的权限对应不同的操作。</li>\n</ol><p>这里的操作，其实对应的是Web API，比如目前京东商家开放平台提供有查询商品API、新增商品API、删除商品API这三种。如果小兔软件请求过来的一个访问令牌access_token的scope权限范围只对应了查询商品API、新增商品API，那么包含这个access_token值的请求，就不能执行删除商品API的操作。</p><pre><code>//不同的权限对应不同的操作\nString[] scope = OauthServlet.tokenScopeMap.get(accessToken);\n\nStringBuffer sbuf = new StringBuffer();\nfor(int i=0;i&lt;scope.length;i++){\n    sbuf.append(scope[i]).append(&quot;|&quot;);\n}\n\nif(sbuf.toString().indexOf(&quot;query&quot;)&gt;0){\n    queryGoods(&quot;&quot;);\n}\n\nif(sbuf.toString().indexOf(&quot;add&quot;)&gt;0){\n    addGoods(&quot;&quot;);\n}\n\nif(sbuf.toString().indexOf(&quot;del&quot;)&gt;0){\n    delGoods(&quot;&quot;);\n}\n</code></pre><ol start=\"2\">\n<li>不同的权限对应不同的数据。</li>\n</ol><p>这里的数据，就是指某一个API里包含的属性字段信息。比如，有一个查询小明信息的API，返回的信息包括Contact（email、phone、qq）、Like（Basketball、Swimming）、Personal Data（sex、age、nickname）。如果小兔软件请求过来的一个访问令牌access_token的scope权限范围只对应了Personal Data，那么包含该access_token值的请求就不能获取到Contact和Like的信息，关于这部分的代码，实际跟不同权限对应不同操作的代码类似。</p><p>看到这里，你就明白了，这种权限范围的粒度要比“不同的权限对应不同的操作”的粒度要小。这正是遵循了最小权限范围原则。</p><ol start=\"3\">\n<li>不同的用户对应不同的数据。</li>\n</ol><p>这种权限是什么意思呢？其实，这种权限实际上只是换了一种维度，将其定位到了用户上面。</p><p>一些基础类信息，比如获取地理位置、获取天气预报等，不会带有用户归属属性，也就是说这些信息并不归属于某个用户，是一类公有信息。对于这样的信息，平台提供出去的API接口都是“中性”的，没有用户属性。</p><p>但是，更多的场景却是基于用户属性的。还是以小兔打单软件为例，商家每次打印物流面单的时候，小兔打单软件都要知道是哪个商家的订单。这种情况下，商家为小兔软件授权，小兔软件获取的access_token实际上就包含了商家这个用户属性。</p><p>京东商家开放平台的受保护资源服务每次接收到小兔软件的请求时，都会根据该请求中access_token的值找到对应的商家ID，继而根据商家ID查询到商家的订单信息，也就是不同的商家对应不同的订单数据。</p><pre><code>//不同的用户对应不同的数据\nString user = OauthServlet.tokenMap.get(accessToken);\nqueryOrders(user);\n</code></pre><p>在上面讲三种权限的时候，我举的例子实际上都属于一个系统提供了查询、添加、删除这样的所有服务。此时你可能会想到，现在的系统不已经是分布式系统环境了么，如果有很多个受保护资源服务，比如提供用户信息查询的用户资源服务、提供商品查询的商品资源服务、提供订单查询的订单资源服务，那么每个受保护资源服务岂不是都要把上述的权限范围校验执行一遍吗，这样不就会有大量的重复工作产生么？</p><p>在这里，我特别高兴你能想到这一点。为了应对这种情况，我们应该有一个统一的网关层来处理这样的校验，所有的请求都会经过API GATEWAY 跳转到不同的受保护资源服务。这样呢，我们就不需要在每一个受保护资源服务上都做一遍权限校验的工作了，而只需要在API GATEWAY 这一层做权限校验就可以了。系统结构如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/b0/a5175438e76411c808dd5e72d3d3dbb0.png?wh=1562*594\" alt=\"\" title=\"图4 由统一的网关层处理权限校验\"></p><h2>总结</h2><p>截止到这一讲呢，我们已经把OAuth 2.0 中授权码相关的流程所涉及到的内容都讲完了。通过02到05这4讲，你可以很清晰地理解授权码流程的核心原理了，也可以弄清楚如何使用以及如何接入这一授权流程了。</p><p>我在本讲开始的时候，提到OAuth 2.0的复杂性实际上都给了授权服务来承担，接着我从第三方软件和受保护资源的角度，分别介绍了这两部分系统在接入OAuth 2.0的时候应该注意哪些方面。总结下来，我其实希望你能够记住以下两点。</p><ol>\n<li>对于第三方软件，比如小兔打单软件来讲，<strong>它的主要目的就是获取访问令牌，使用访问令牌</strong>，这当然也是整个OAuth 2.0的目的，就是让第三方软件来做这两件事。在这个过程中需要强调的是，第三方软件在使用访问令牌的时候有三种方式，我们建议在平台和第三方软件约定好的前提下，<strong>优先采用Post表单提交的方式</strong>。</li>\n<li>受保护资源系统，比如小兔软件要访问开放平台的订单数据服务，它需要注意的是权限的问题，这个权限范围主要包括，<strong>不同的权限会有不同的操作，不同的权限也会对应不同的数据，不同的用户也会对应不同的数据</strong>。</li>\n</ol><h2>思考题</h2><p>如果使用刷新令牌refresh_token请求回来一个新的访问令牌access_token，按照一般规则授权服务上旧的访问令牌应该要立即失效，但是如果在这之前已经有使用旧的访问令牌发出去的请求，不就受到影响了吗，这种情况下应该如何处理呢？</p><p>欢迎你在留言区分享你的观点，也欢迎你把今天的内容分享给其他朋友，我们一起交流。</p>","comments":[{"had_liked":false,"id":233256,"user_name":"马以","can_delete":false,"product_type":"c1","uid":1344431,"ip_address":"","ucode":"3FEA06CA14DE28","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/af/1cb42cd3.jpg","comment_is_top":false,"comment_ctime":1594272461,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"74608716493","product_id":100053901,"comment_content":"思考题：方法1：根据服务的响应时间，两个access_token要有一个重叠窗口期，过了重叠窗口期，旧的token就失效了；方法2：或者说和mysql数据库事务控制一样，在用refresh_token 换取 access_token 这里记录一个节点（水位线）；如果请求在这个节点之前，那么就的token就还有效，如果请求在这个节点之后，旧的token就失效；","like_count":17,"discussions":[{"author":{"id":1616954,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ODqoBdTKsL1jW4m72BZ0ibECEtWPq0N1tAIlbzjsq6mcJiavT2CKtx0ejpIqQdHbRXdMWH0I1jpI2ZiawFIkF1icsQ/132","nickname":"白中白","note":"","ucode":"95F9DABEBEFAAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310257,"discussion_content":"授权服务可以不用管，交给第三方软件处理（比如刷新令牌请求和其他需要令牌的请求用读写锁控制），降低授权服务复杂度并提高安全性（以免两个令牌同时生效）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601717161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233862,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1594482044,"is_pvip":true,"replies":[{"id":"86346","content":"刷新令牌的有效期不会变，而且它本来就比访问令牌的有效期长；刷新令牌的值变是为了安全，因为你已经使用过一次了。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594563368,"ip_address":"","comment_id":233862,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27364285820","product_id":100053901,"comment_content":"刷新令牌是一次性的，使用之后就会失效<br>----------------------<br>在获取访问令牌的时候同时也会把 刷新令牌 返回， 后面可以使用 刷新令牌 重新获取访问令牌，然后也会同时获取新的刷新令牌，这样的话不是可以一直获取访问令牌了吗？","like_count":6,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501194,"discussion_content":"刷新令牌的有效期不会变，而且它本来就比访问令牌的有效期长；刷新令牌的值变是为了安全，因为你已经使用过一次了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594563368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2653715,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKib3vNM6TPT1umvR3TictnLurJPKuQq4iblH5upgBB3kHL9hoN3Pgh3MaR2rjz6fWgMiaDpicd8R5wsAQ/132","nickname":"陈阳","note":"","ucode":"C8E676C967D23A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551183,"discussion_content":"如果第三方软件都能在访问令牌过期时间点到刷新令牌过期时间点区间内上有访问， 那就会不断的生成新的访问令牌和刷新令牌，永远不会过期","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644919806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233139,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1594245291,"is_pvip":false,"replies":[{"id":"86015","content":"是的","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594251306,"ip_address":"","comment_id":233139,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23069081771","product_id":100053901,"comment_content":"“建议在平台和第三方软件约定好的前提下，优先采用 Post 表单提交的方式。”，如果这样，每个请求都需要带有token，那三方软件和开放平台只能使用post方式通信了吗？","like_count":5,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500906,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594251306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014806,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","nickname":"mgxian","note":"","ucode":"7B7E77E6A83B87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290578,"discussion_content":"那restful风格api就没有办法做了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594540001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1264481,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4b/61/762ec306.jpg","nickname":"我们的时光__","note":"","ucode":"5184EDC5CA1625","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1014806,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","nickname":"mgxian","note":"","ucode":"7B7E77E6A83B87","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346577,"discussion_content":"这里只是请求受保护资源的时候需要用这种方式，第三方自己的服务不受影响呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611996661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290578,"ip_address":""},"score":346577,"extra":""}]}]},{"had_liked":false,"id":233258,"user_name":"罗 乾 林","can_delete":false,"product_type":"c1","uid":1188222,"ip_address":"","ucode":"D0406F95176ABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7e/fb725950.jpg","comment_is_top":false,"comment_ctime":1594273027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18774142211","product_id":100053901,"comment_content":"课后题：<br>access_token失效后请求必定失败，比较本地access_token是否更新或是否正在刷新access_token,若已更新，采用新的access_token 重新请求。若正在刷新将请求放入队列作为挂起任务，待access_token更新后重新发出请求","like_count":4},{"had_liked":false,"id":233151,"user_name":"iLeGeND","can_delete":false,"product_type":"c1","uid":1055475,"ip_address":"","ucode":"4055A628A6E97C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/f3/41d5ba7d.jpg","comment_is_top":false,"comment_ctime":1594253141,"is_pvip":false,"replies":[{"id":"86018","content":"暂时 还没有计划哈","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594256217,"ip_address":"","comment_id":233151,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18774122325","product_id":100053901,"comment_content":"老师以后要不要出一门spring security的课<br>","like_count":4,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500916,"discussion_content":"暂时 还没有计划哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594256217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051135,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/3f/5a343ddd.jpg","nickname":"远航","note":"","ucode":"A16171F1EAF7A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300652,"discussion_content":"还是很有必要，即有理论也有实践","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598224966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236417,"user_name":"自在如风","can_delete":false,"product_type":"c1","uid":1441618,"ip_address":"","ucode":"2373291BD0C455","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/52/cdb633a8.jpg","comment_is_top":false,"comment_ctime":1595411081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14480312969","product_id":100053901,"comment_content":"查询通过redis去查。在调用refresh接口之后,新的access_token插入到redis中,同时设置过期时间为access_token的过期时间。同时老的access_token可以重新插入redis中,设置过期时间为1min,这样应该能解决那个思考题的问题","like_count":3},{"had_liked":false,"id":233169,"user_name":"bigben","can_delete":false,"product_type":"c1","uid":1169313,"ip_address":"","ucode":"DBD15A6C8E2590","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","comment_is_top":false,"comment_ctime":1594255038,"is_pvip":false,"replies":[{"id":"86021","content":"开放平台对外主要有两个系统一个是API网关，一个是授权系统。授权（生成TOKEN）是通过请求授权系统，鉴权（识别TOKEN）是调用到API网关，因为使用TOKEN的时候就是发生在通过API网关调用开放API的时候，API网关再去跟授权系统通信。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594256546,"ip_address":"","comment_id":233169,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10184189630","product_id":100053901,"comment_content":"第三方调用授权服务也是通过api网关的吧？","like_count":2,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500924,"discussion_content":"开放平台对外主要有两个系统一个是API网关，一个是授权系统。授权（生成TOKEN）是通过请求授权系统，鉴权（识别TOKEN）是调用到API网关，因为使用TOKEN的时候就是发生在通过API网关调用开放API的时候，API网关再去跟授权系统通信。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594256546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2232976,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIq15Qq887bH7Z5aQHfXu5vHUj4Iz68RotmUIR12vG5Y3L7icUcYgL4hicwAKYyicAmPTtoZPNPfDPOg/132","nickname":"流云","note":"","ucode":"5C31C34F8B9236","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315846,"discussion_content":"老师您好，授权服务为什么不通过api网关路由呢？这样对第三方提供统一的域名了，不然要提供两个域名吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603331445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2232976,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIq15Qq887bH7Z5aQHfXu5vHUj4Iz68RotmUIR12vG5Y3L7icUcYgL4hicwAKYyicAmPTtoZPNPfDPOg/132","nickname":"流云","note":"","ucode":"5C31C34F8B9236","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585080,"discussion_content":"此网关非彼网关？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661328425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":315846,"ip_address":"江苏"},"score":585080,"extra":""}]}]},{"had_liked":false,"id":251252,"user_name":"郭嵩阳","can_delete":false,"product_type":"c1","uid":1080998,"ip_address":"","ucode":"9DC42C7B73F580","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/a6/188817b6.jpg","comment_is_top":false,"comment_ctime":1601436197,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5896403493","product_id":100053901,"comment_content":"想问下老师,你们的平台是否后台持久化了access_token,如果存储数据存储选用的是那种数据库,或者建议是那种数据库,比如mongodb 或mysql 或者其他类型的数据库","like_count":1},{"had_liked":false,"id":248383,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1600142031,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5895109327","product_id":100053901,"comment_content":"“按照一般规则授权服务上旧的访问令牌应该要立即失效，但是如果在这之前已经有使用旧的访问令牌发出去的请求，不就受到影响了吗，这种情况下应该如何处理呢？”  这个有点类似缓存的处理机制，如果是随机字符串的访问令牌，受保护资源服务网关层，应该在缓存数据库和持久化数据库都保存该访问令牌，一旦有刷新令牌请求（授权服务通知资源层网关刷新令牌），就直接更新缓存令牌，然后记录日志，异步更新持久化数据库。<br>如果此时有旧的访问令牌过来，先和缓存令牌比对，缓存找不到就拒绝请求。<br>如果资源服务先接收旧访问令牌请求，后刷新令牌，那旧访问请求应该正常返回（也可以在返回前，再校验一次访问令牌，缓存变更就不返回结果）。<br><br>如果是JWT访问令牌，由于令牌信息不保存，第三方应用发出旧令牌和新令牌时，如果是按用户粒度的密码管理系统分配密码，资源服务需要提供密码系统获取密钥（刷新令牌时，同时刷新密钥），旧令牌会被拒绝；如果是按用户登录密码，那旧令牌只能等它自动过期了，存在新旧令牌同时存在的情况。","like_count":1,"discussions":[{"author":{"id":1702886,"avatar":"https://static001.geekbang.org/account/avatar/00/19/fb/e6/1b9edb91.jpg","nickname":"练习生","note":"","ucode":"60203A2AA0EA36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391958,"discussion_content":"&#34;如果是按用户粒度的密码管理系统分配密码 &#34; 你这里应该是说错了 是按用户粒度的密钥管理系统分配密钥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630730115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235604,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1215139,"ip_address":"","ucode":"258880ACE79448","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/a3/aee7ded7.jpg","comment_is_top":false,"comment_ctime":1595123678,"is_pvip":false,"replies":[{"id":"87235","content":"刷新令牌也有有效期，所以不会有访问令牌永远不过期的情况发生的。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1595337324,"ip_address":"","comment_id":235604,"utype":1}],"discussion_count":6,"race_medal":0,"score":"5890090974","product_id":100053901,"comment_content":"老师  令牌采用定时刷新的方式，令牌永远不会过期，除非用户主动操作，这样理解是都正确。","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501786,"discussion_content":"刷新令牌也有有效期，所以不会有访问令牌永远不过期的情况发生的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595337324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2653715,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKib3vNM6TPT1umvR3TictnLurJPKuQq4iblH5upgBB3kHL9hoN3Pgh3MaR2rjz6fWgMiaDpicd8R5wsAQ/132","nickname":"陈阳","note":"","ucode":"C8E676C967D23A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":551184,"discussion_content":"每个令牌都有有效期， 但在有效期内不断的重置新的令牌， 那不就是对用户来说永远不会到期， 老师的回答真让人急死。说不到重点上\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644920113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":501786,"ip_address":""},"score":551184,"extra":""},{"author":{"id":2826561,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/21/41/8156099f.jpg","nickname":"西谷老湿","note":"","ucode":"29E99E5EFAA087","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2653715,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKib3vNM6TPT1umvR3TictnLurJPKuQq4iblH5upgBB3kHL9hoN3Pgh3MaR2rjz6fWgMiaDpicd8R5wsAQ/132","nickname":"陈阳","note":"","ucode":"C8E676C967D23A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":553059,"discussion_content":"已经回答了，你有没有考虑到：刷新令牌使用时实际是创建了新的访问令牌和新的刷新令牌，旧的一对令牌已经无效了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645702634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":551184,"ip_address":""},"score":553059,"extra":""}]},{"author":{"id":1102126,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/2e/ad6315ab.jpg","nickname":"聂士伟","note":"","ucode":"C1624B259BB34E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562549,"discussion_content":"刷新令牌时返回一对新的令牌，但是，过期时间并没有变，仍然是上一对令牌的过期时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649849589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068819,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","nickname":"永旭","note":"","ucode":"C9C74BE32C8F46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321338,"discussion_content":"但对用户来讲是永远不过期了吧 ? ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604566100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2826561,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/21/41/8156099f.jpg","nickname":"西谷老湿","note":"","ucode":"29E99E5EFAA087","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1068819,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","nickname":"永旭","note":"","ucode":"C9C74BE32C8F46","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553060,"discussion_content":"这不就是我们要刷新令牌的目的吗？严格来说也不是无限不过期，要看业务情况，比如文中说的用户改密码了会“踢出”旧的令牌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645702705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321338,"ip_address":""},"score":553060,"extra":""}]}]},{"had_liked":false,"id":233170,"user_name":"暖色浮余生","can_delete":false,"product_type":"c1","uid":1593126,"ip_address":"","ucode":"ED943F2DF88896","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/26/f21afb83.jpg","comment_is_top":false,"comment_ctime":1594255151,"is_pvip":false,"replies":[{"id":"86085","content":"Oauth2，是一种【协议】，安全授权协议；<br>Spring Security Oauth2，是一种技术【框架】，它是依据Oauth2协议开发出来的；<br>Spring Security，是一种技术【框架】，一种提供声明式的安全访问控制解决方案的安全框架，跟OAuth没有直接关系；<br>scope权限检验，大家思想方式都是解决权限访问问题。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594291443,"ip_address":"","comment_id":233170,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5889222447","product_id":100053901,"comment_content":"Oauth2 的 scope权限检验和springsecurity的权限检验有什么区别呢，这两个不是通常放在一块么，做的东西应该差不多吧","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500925,"discussion_content":"Oauth2，是一种【协议】，安全授权协议；\nSpring Security Oauth2，是一种技术【框架】，它是依据Oauth2协议开发出来的；\nSpring Security，是一种技术【框架】，一种提供声明式的安全访问控制解决方案的安全框架，跟OAuth没有直接关系；\nscope权限检验，大家思想方式都是解决权限访问问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594291443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047356,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fb/3c/3dfd5cd0.jpg","nickname":"curtiseng","note":"","ucode":"C094DBC31C120F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289889,"discussion_content":"忘了从哪里摘录的了：\nThe OAuth 2.0 Scope do not express a user&#39;s permissions. They express what an OAuth 2.0 Client may do on the user&#39;s behalf - independently of whether or not the user is actually allowed to do that. For example, the user could lie and say that the client is allowed to access some protected resource which he does not have access to (&#34;Read all classified documents&#34;, but he is not allowed to view any classified documents).","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594259179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360339,"user_name":"阿左不是蜗牛","can_delete":false,"product_type":"c1","uid":1518717,"ip_address":"北京","ucode":"A18289B3265ED4","user_header":"https://static001.geekbang.org/account/avatar/00/17/2c/7d/840cdc02.jpg","comment_is_top":false,"comment_ctime":1666450960,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666450960","product_id":100053901,"comment_content":"如果使用刷新令牌 refresh_token 请求回来一个新的访问令牌 access_token，按照一般规则授权服务上旧的访问令牌应该要立即失效...<br>------------------------------------<br>有个疑问，这个访问令牌前提是非结结构令牌，是存储在后端数据库或缓存中。要是像JWT这种令牌，它做不到让旧的令牌立即失效吧。","like_count":0},{"had_liked":false,"id":359209,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"广东","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1665326319,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1665326319","product_id":100053901,"comment_content":"现在我们有一个这种的场景,就是不返回还有过期一分钟的token,我们这边是,在判断当前token过期时间少于等于60的时候,就用refresh_token 在重新生成一个 access_token,老的access_token 还会有一分钟存活时间,感觉是不是影响的","like_count":0},{"had_liked":false,"id":351833,"user_name":"Geek_cha","can_delete":false,"product_type":"c1","uid":1510045,"ip_address":"","ucode":"6AB056704FF22E","user_header":"","comment_is_top":false,"comment_ctime":1658219852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658219852","product_id":100053901,"comment_content":"老师，想请教一下第三方软件获取了accesstoken之后，存在哪里。浏览器会存Accesstoken吗？<br>我的理解是： 因为获取accesstoken是通过后端通信获取的，那么后端应该是会存储这个accesstoken，那浏览器端也会存储吗，如果不存储的话，下一次用户通过浏览器访问第三方软件的时候，是通过什么标识让第三方软件知道他已经通过授权流程了（这个场景是在accesstoken没过期的情况下）。","like_count":0},{"had_liked":false,"id":345758,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1652573719,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1652573719","product_id":100053901,"comment_content":"三方应用开发者要做的注册信息、引导授权、使用访问令牌、使用刷新令牌；受保护资源最终指的还是 Web API，不同的权限会有不同的操作，不同的权限也会对应不同的数据，不同的用户也会对应不同的数据。","like_count":0},{"had_liked":false,"id":330667,"user_name":"Apologize","can_delete":false,"product_type":"c1","uid":1503320,"ip_address":"","ucode":"F2F179241EDA4F","user_header":"https://static001.geekbang.org/account/avatar/00/16/f0/58/87104eab.jpg","comment_is_top":false,"comment_ctime":1642089861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642089861","product_id":100053901,"comment_content":"我的处理方式是将所有失败的请求（因为access token失效导致）使用新的access token进行重试，理由如下：<br>1、请求失败是很正常的，资源服务器无法或者很困难保证请求100%正确响应，面向失败编程是一种积极应对策略。<br>2、基于面向失败编程的思想，即使access token没有失效请求也可能失败，只是失败的原因不同，因此请求失败重试（有条件重试）是一种可靠的编程模型。<br>3、既然失败需要重试，那么因为access token失效导致的失败进行重试也是比较自然的操作。<br>下面我可能会写的简单代码：<br>public class ThirdPartClient {<br>    private AccessTokenProvider accessTokenProvider;<br>    private OkHttpClient okHttpClient;<br><br>    public ThirdPartClient(AccessTokenProvider accessTokenProvider) {<br>        this.accessTokenProvider = accessTokenProvider;<br>        this.okHttpClient = new OkHttpClient.Builder()<br>                .addInterceptor(chain -&gt; {<br>                    Request request = chain.request();<br><br>                    Response response = chain.proceed(request);<br>                    &#47;&#47; 假设返回401表示access token失效<br>                    if (response.code() == 401) {<br>                        request = request.newBuilder()<br>                                .addHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + accessTokenProvider.get())<br>                                .build();<br>                        return chain.proceed(request);<br>                    }<br>                    <br>                    return response;<br>                })<br>                .build();<br>    }<br>}","like_count":0},{"had_liked":false,"id":319878,"user_name":"达叔灬","can_delete":false,"product_type":"c1","uid":2404887,"ip_address":"","ucode":"5CCBAF13548F02","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/17/3161b49c.jpg","comment_is_top":false,"comment_ctime":1635995618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635995618","product_id":100053901,"comment_content":"针对权限校验存放网关的问题，若是采用 Authorization Request Header Field 方式使用访问令牌那么网关需要怎么处理呢？<br>我们现在网关只是做了验证的需求 具体的权限还是下放到了具体的API服务，不同的API 其实也是做了重复性的权限相关工作？<br>针对这种情况 不知道 老师 或者 同学们都是怎么处理的(net 程序员)。","like_count":0},{"had_liked":false,"id":319206,"user_name":"熊能","can_delete":false,"product_type":"c1","uid":1135024,"ip_address":"","ucode":"1019EA97062AC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/b0/d32c895d.jpg","comment_is_top":false,"comment_ctime":1635674847,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635674847","product_id":100053901,"comment_content":"思考题，最简单的方式是请求失败后的重试机制吧。","like_count":0},{"had_liked":false,"id":303592,"user_name":"Geek_f586a6","can_delete":false,"product_type":"c1","uid":2051922,"ip_address":"","ucode":"DC5668EB87C3EA","user_header":"","comment_is_top":false,"comment_ctime":1626866221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626866221","product_id":100053901,"comment_content":"思考题，一般客户端会缓存accessToken，过期了就直接失败，添加重试机制机制即可。不需特别的处理。","like_count":0},{"had_liked":false,"id":287200,"user_name":"Geek_9f3b9b","can_delete":false,"product_type":"c1","uid":2530414,"ip_address":"","ucode":"34D456354EC5BE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er8I0UfHsvn66T1BxW7sniaWXpTLqQ5X2qNlwuEWFfw9666dt1kAKmoScgRkjGfbRIpbDXY5dgEAnw/132","comment_is_top":false,"comment_ctime":1617814713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617814713","product_id":100053901,"comment_content":"为什么Spring cloud服务之间调用接口，没有共用到权限，加到请求头中，另一个服务验证的时候得不到请求头数据","like_count":0},{"had_liked":false,"id":260272,"user_name":"永旭","can_delete":false,"product_type":"c1","uid":1068819,"ip_address":"","ucode":"C9C74BE32C8F46","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","comment_is_top":false,"comment_ctime":1604974037,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1604974037","product_id":100053901,"comment_content":"请问老师<br>oauth2中 调动刷新令牌服务, 会发放新的访问令牌和刷新令牌, 这时刷新令牌的过期时间也是重置吗 ? 还是用原来的过期时间 ??","like_count":0,"discussions":[{"author":{"id":2653715,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKib3vNM6TPT1umvR3TictnLurJPKuQq4iblH5upgBB3kHL9hoN3Pgh3MaR2rjz6fWgMiaDpicd8R5wsAQ/132","nickname":"陈阳","note":"","ucode":"C8E676C967D23A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551186,"discussion_content":"重置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644920189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255140,"user_name":"zil","can_delete":false,"product_type":"c1","uid":1000697,"ip_address":"","ucode":"DA3F77C9D23F9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/f9/6ed6cb43.jpg","comment_is_top":false,"comment_ctime":1603272333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603272333","product_id":100053901,"comment_content":"在网关做校验，可以针对外部请求。<br><br>资源服务间的请求是否也需要权限校验呢？","like_count":0},{"had_liked":false,"id":254891,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1603207046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603207046","product_id":100053901,"comment_content":"我在本讲开始的时候，提到 OAuth 2.0 的复杂性实际上都给了授权服务来承担，接着我从第三方软件和受保护资源的角度，分别介绍了这两部分系统在接入 OAuth 2.0 的时候应该注意哪些方面。总结下来，我其实希望你能够记住以下两点。<br>对于第三方软件，比如小兔打单软件来讲，它的主要目的就是获取访问令牌，使用访问令牌，这当然也是整个 OAuth 2.0 的目的，就是让第三方软件来做这两件事。在这个过程中需要强调的是，第三方软件在使用访问令牌的时候有三种方式，我们建议在平台和第三方软件约定好的前提下，优先采用 Post 表单提交的方式。<br>受保护资源系统，比如小兔软件要访问开放平台的订单数据服务，它需要注意的是权限的问题，这个权限范围主要包括，不同的权限会有不同的操作，不同的权限也会对应不同的数据，不同的用户也会对应不同的数据。","like_count":0},{"had_liked":false,"id":248218,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1600067727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600067727","product_id":100053901,"comment_content":"“如果这时采用参数传递的方式呢，整个 URI 会被整体复制，安全性是最差的。”   这个是指access_token会整体复制到URI后面么？","like_count":0},{"had_liked":false,"id":244316,"user_name":"文正","can_delete":false,"product_type":"c1","uid":1103745,"ip_address":"","ucode":"755DDB8A00B7A4","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/81/2727b475.jpg","comment_is_top":false,"comment_ctime":1598458073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598458073","product_id":100053901,"comment_content":"一般情况下，刷新token，都是因为请求返回token已经过期了，才会启动refreshtoken。授权服务一般情况下是不允许2个token同时存在的。","like_count":0},{"had_liked":false,"id":239858,"user_name":"心浮天空","can_delete":false,"product_type":"c1","uid":1051609,"ip_address":"","ucode":"3B2D0E6CC51EE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/d9/3328dd12.jpg","comment_is_top":false,"comment_ctime":1596678640,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596678640","product_id":100053901,"comment_content":"有两个问题，希望老师解答：<br>1. 第一次获取令牌和后续通过刷新令牌获得令牌，授权服务器都会返回访问令牌和新的刷新令牌，只要第三方应用在刷新令牌过期之前刷新令牌，就可以获得新的访问令牌和刷新令牌，所以只要第三方应用一直在运行，不断的刷新令牌，就可以无休止的拥有访问权限了？<br>2.课程中提到，访问令牌本身是有权限设定的(可能存储在token中，也可能存储在授权服务器中)，例如，token被授予了删除订单的权限，当第三方应用调用删除订单操作时，需要验证token是否有删除订单的权限，这个验证应该是由授权服务器验证，还是资源服务器验证？同时，除了验证是否删除订单权限外，还应该验证要删除的订单是否为token关联用户的订单，防止恶意删除其他用户的数据，这种验证应该由谁验证？","like_count":0},{"had_liked":false,"id":235015,"user_name":"土豆","can_delete":false,"product_type":"c1","uid":1263295,"ip_address":"","ucode":"83B08B068AA267","user_header":"https://static001.geekbang.org/account/avatar/00/13/46/bf/87a57b8e.jpg","comment_is_top":false,"comment_ctime":1594869641,"is_pvip":false,"replies":[{"id":"88364","content":"JWT也是有失效时间的。如果有多资源服务器的时候，这种情况下最好有一个网关层来统一处理。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1596463833,"ip_address":"","comment_id":235015,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594869641","product_id":100053901,"comment_content":"老师我想请下，redistoken的缺点是只能单点，不支持多点，jwt是在认证服务器加密一次，在各个资源服务器随时解密，没有失效时间，如果配置多资源服务器，是不是要考虑私钥的区分，两个都有缺点，现在主流的使用方式是哪种，希望老师解惑","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501578,"discussion_content":"JWT也是有失效时间的。如果有多资源服务器的时候，这种情况下最好有一个网关层来统一处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596463833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234853,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1594812672,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1594812672","product_id":100053901,"comment_content":"缩短之前access token和refresh token的超时时间为几秒，这样可以让换token失败的三方软件有机会重试。重试的时候返回上次成功的新token","like_count":0,"discussions":[{"author":{"id":1047637,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYWRmibTZj9pb3d5ibfVQHFS9shvJmgMgtN3BM3r9qiaL5YTZSFdLvPZiaEHfBia4dFODVqw/132","nickname":"北国骑士","note":"","ucode":"AC657FCA2014ED","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573112,"discussion_content":"微信实现方式是让之前老的access_token再保留5分钟的有效期","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653207100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234816,"user_name":"suhuijie","can_delete":false,"product_type":"c1","uid":1999277,"ip_address":"","ucode":"DC5A2F27E11DB2","user_header":"","comment_is_top":false,"comment_ctime":1594803729,"is_pvip":false,"replies":[{"id":"86696","content":"服务市场这个是补充了一块内容，服务市场的定义咱们课程里面就是说小兔打单软件放在上面售卖，小明购买了之后就可以直接通过服务市场的【我的服务】使用，因为咱们之前一直是讲小明直接访问小兔的地址。<br><br>“作为第三方开发者来构建第三方软件的时候，在授权码环节除了要接收授权码 code 值之外，还要接收用户的订购相关信息，比如服务的版本号、服务代码标识等信息。”<br>OAuth 2.0 的授权码流程不会变，是跟我们已知的一样，只不过这次是从【我的服务】点进去的，补充上面版本号、服务代码等信息是服务相关的属性。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594823740,"ip_address":"","comment_id":234816,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594803729","product_id":100053901,"comment_content":"对于服务市场的第三方软件，流程如何处理的，那块讲述的不清晰","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501517,"discussion_content":"服务市场这个是补充了一块内容，服务市场的定义咱们课程里面就是说小兔打单软件放在上面售卖，小明购买了之后就可以直接通过服务市场的【我的服务】使用，因为咱们之前一直是讲小明直接访问小兔的地址。\n\n“作为第三方开发者来构建第三方软件的时候，在授权码环节除了要接收授权码 code 值之外，还要接收用户的订购相关信息，比如服务的版本号、服务代码标识等信息。”\nOAuth 2.0 的授权码流程不会变，是跟我们已知的一样，只不过这次是从【我的服务】点进去的，补充上面版本号、服务代码等信息是服务相关的属性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594823740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234417,"user_name":"hom","can_delete":false,"product_type":"c1","uid":1105009,"ip_address":"","ucode":"9966B2F78EF479","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/71/5e1944e8.jpg","comment_is_top":false,"comment_ctime":1594688482,"is_pvip":false,"replies":[{"id":"86518","content":"出于安全的考虑我们让访问令牌的有效时间一般比较短，刷新令牌的作用是在访问令牌失效的情况下来请求获取新的访问令牌。<br>","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594703483,"ip_address":"","comment_id":234417,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594688482","product_id":100053901,"comment_content":"请问下老师：刷新令牌的作用是什么？为什么不直接延长访问令牌的初始化时效，而是需要去手工刷新呢？  ","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501382,"discussion_content":"出于安全的考虑我们让访问令牌的有效时间一般比较短，刷新令牌的作用是在访问令牌失效的情况下来请求获取新的访问令牌。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594703483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233713,"user_name":"杨浩宇","can_delete":false,"product_type":"c1","uid":1693465,"ip_address":"","ucode":"8D0811CAAC2CBF","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/19/fc0c75dd.jpg","comment_is_top":false,"comment_ctime":1594399481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594399481","product_id":100053901,"comment_content":"对于思考题，我觉得比较简单的方式是刷新完后的令牌和刷新前的令牌保持一致，只是延长了服务器这边的生命周期，但是对于jwt令牌，就只能是缩短access_token的生命周期了","like_count":0},{"had_liked":false,"id":233712,"user_name":"杨浩宇","can_delete":false,"product_type":"c1","uid":1693465,"ip_address":"","ucode":"8D0811CAAC2CBF","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/19/fc0c75dd.jpg","comment_is_top":false,"comment_ctime":1594399243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594399243","product_id":100053901,"comment_content":"对于现在前后端分离的应用，用post方式来使用访问令牌，是不是就没有办法保护前端页面了？而且是不是还得要求后台的接口设计上更新删除操作也得用post方式才可以？","like_count":0},{"had_liked":false,"id":233198,"user_name":"curtiseng","can_delete":false,"product_type":"c1","uid":1047356,"ip_address":"","ucode":"C094DBC31C120F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/3c/3dfd5cd0.jpg","comment_is_top":false,"comment_ctime":1594258579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594258579","product_id":100053901,"comment_content":"之前用刷新令牌，策略是access_token快要过期使用refresh_token返回新的access_token，考虑系统调用的延迟，一般快要过期的时间窗口设为30秒。","like_count":0},{"had_liked":false,"id":233168,"user_name":"bigben","can_delete":false,"product_type":"c1","uid":1169313,"ip_address":"","ucode":"DBD15A6C8E2590","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","comment_is_top":false,"comment_ctime":1594254887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594254887","product_id":100053901,"comment_content":"对于思考题，旧的access_token,还是有效的，可以缩短其有效期，但如果是jwt实现的话，只能等待它过期了","like_count":0}]}