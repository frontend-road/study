{"id":89417,"title":"06 | x86架构：有了开放的架构，才能打造开放的营商环境","content":"<p>做生意的人最喜欢开放的营商环境，也就是说，我的这家公司，只要符合国家的法律，到哪里做生意，都能受到公平的对待，这样就不用为了适配各个地方的规则煞费苦心，只要集中精力优化自己的服务就可以了。</p><p>作为Linux操作系统，何尝不是这样。如果下面的硬件环境千差万别，就会很难集中精力做出让用户易用的产品。毕竟天天适配不同的平台，就已经够头大了。x86架构就是这样一个开放的平台。今天我们就来解析一下它。</p><h2>计算机的工作模式是什么样的？</h2><p>还记得咱们攒电脑时买的那堆硬件吗？虽然你可以根据经验，把那些复杂的设备和连接线安装起来，但是你真的了解它们为什么要这么连接吗？</p><p>现在我就把硬件图和计算机的逻辑图对应起来，带你看看计算机的工作模式。</p><p><img src=\"https://static001.geekbang.org/resource/image/fa/9b/fa6c2b6166d02ac37637d7da4e4b579b.jpeg?wh=2144*995\" alt=\"\"></p><p>对于一个计算机来讲，最核心的就是<strong>CPU</strong>（Central Processing Unit，中央处理器）。这是这台计算机的大脑，所有的设备都围绕它展开。</p><p>对于公司来说，CPU是真正干活的，将来执行项目都要靠它。</p><p>CPU就相当于咱们公司的程序员，我们常说，二十一世纪最缺的是什么？是人才！所以，大量水平高、干活快的程序员，才是营商环境中最重要的部分。</p><p>CPU和其他设备连接，要靠一种叫做<strong>总线</strong>（Bus）的东西，其实就是主板上密密麻麻的集成电路，这些东西组成了CPU和其他设备的高速通道。</p><!-- [[[read_end]]] --><p>在这些设备中，最重要的是<strong>内存</strong>（Memory）。因为单靠CPU是没办法完成计算任务的，很多复杂的计算任务都需要将中间结果保存下来，然后基于中间结果进行进一步的计算。CPU本身没办法保存这么多中间结果，这就要依赖内存了。</p><p>内存就相当于办公室，我们要看看方不方便租到办公室，有没有什么创新科技园之类的。有了共享的、便宜的办公位，公司就有注册地了。</p><p>当然总线上还有一些其他设备，例如显卡会连接显示器、磁盘控制器会连接硬盘、USB控制器会连接键盘和鼠标等等。</p><p>CPU和内存是完成计算任务的核心组件，所以这里我们重点介绍一下<strong>CPU和内存是如何配合工作的</strong>。</p><p>CPU其实也不是单纯的一块，它包括三个部分，运算单元、数据单元和控制单元。</p><p><strong>运算单元</strong>只管算，例如做加法、做位移等等。但是，它不知道应该算哪些数据，运算结果应该放在哪里。</p><p>运算单元计算的数据如果每次都要经过总线，到内存里面现拿，这样就太慢了，所以就有了<strong>数据单元</strong>。数据单元包括CPU内部的缓存和寄存器组，空间很小，但是速度飞快，可以暂时存放数据和运算结果。</p><p>有了放数据的地方，也有了算的地方，还需要有个指挥到底做什么运算的地方，这就是<strong>控制单元</strong>。控制单元是一个统一的指挥中心，它可以获得下一条指令，然后执行这条指令。这个指令会指导运算单元取出数据单元中的某几个数据，计算出个结果，然后放在数据单元的某个地方。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/23/3afda18fc38e7e53604e9ebf9cb42023.jpeg?wh=2749*1882\" alt=\"\"></p><p>每个项目都有一个项目执行计划书，里面是一行行项目执行的指令，这些都是放在档案库里面的。每个进程都有一个程序放在硬盘上，是二进制的，再里面就是一行行的指令，会操作一些数据。</p><p>进程一旦运行，比如图中两个进程A和B，会有独立的内存空间，互相隔离，程序会分别加载到进程A和进程B的内存空间里面，形成各自的代码段。当然真实情况肯定比我说的要复杂的多，进程的内存虽然隔离但不连续，除了简单的区分代码段和数据段，还会分得更细。</p><p>程序运行的过程中要操作的数据和产生的计算结果，都会放在数据段里面。<strong>那CPU怎么执行这些程序，操作这些数据，产生一些结果，<strong><strong>并</strong></strong>写入回内存呢？</strong></p><p>CPU的控制单元里面，有一个<strong>指令指针寄存器</strong>，它里面存放的是下一条指令在内存中的地址。控制单元会不停地将代码段的指令拿进来，先放入指令寄存器。</p><p>当前的指令分两部分，一部分是做什么操作，例如是加法还是位移；一部分是操作哪些数据。</p><p>要执行这条指令，就要把第一部分交给运算单元，第二部分交给数据单元。</p><p>数据单元根据数据的地址，从数据段里读到数据寄存器里，就可以参与运算了。运算单元做完运算，产生的结果会暂存在数据单元的数据寄存器里。最终，会有指令将数据写回内存中的数据段。</p><p>你可能会问，上面算来算去执行的都是进程A里的指令，那进程B呢？CPU里有两个寄存器，专门保存当前处理进程的代码段的起始地址，以及数据段的起始地址。这里面写的都是进程A，那当前执行的就是进程A的指令，等切换成进程B，就会执行B的指令了，这个过程叫作<strong>进程切换</strong>（Process Switch）。这是一个多任务系统的必备操作，我们后面有专门的章节讲这个内容，这里你先有个印象。</p><p>到这里，你会发现，CPU和内存来来回回传数据，靠的都是总线。其实总线上主要有两类数据，一个是地址数据，也就是我想拿内存中哪个位置的数据，这类总线叫<strong>地址总线</strong>（Address Bus）；另一类是真正的数据，这类总线叫<strong>数据总线</strong>（Data Bus）。</p><p>所以说，总线其实有点像连接CPU和内存这两个设备的高速公路，说总线到底是多少位，就类似说高速公路有几个车道。但是这两种总线的位数意义是不同的。</p><p>地址总线的位数，决定了能访问的地址范围到底有多广。例如只有两位，那CPU就只能认00，01，10，11四个位置，超过四个位置，就区分不出来了。位数越多，能够访问的位置就越多，能管理的内存的范围也就越广。</p><p>而数据总线的位数，决定了一次能拿多少个数据进来。例如只有两位，那CPU一次只能从内存拿两位数。要想拿八位，就要拿四次。位数越多，一次拿的数据就越多，访问速度也就越快。</p><h2>x86成为开放平台历史中的重要一笔</h2><p>那CPU中总线的位数有没有个标准呢？如果没有标准，那操作系统作为软件就很难办了，因为软件层没办法实现通用的运算逻辑。这就像很多非标准的元器件一样，你烧你的电路板，我烧我的电路板，谁都不能用彼此的。</p><p>早期的IBM凭借大型机技术成为计算机市场的领头羊，直到后来个人计算机兴起，苹果公司诞生。但是，那个时候，无论是大型机还是个人计算机，每家的CPU架构都不一样。如果一直是这样，个人电脑、平板电脑、手机等等，都没办法形成统一的体系，就不会有我们现在通用的计算机了，更别提什么云计算、大数据这些统一的大平台了。</p><p>好在历史将x86平台推到了<strong>开放、统一、兼容</strong>的位置。我们继续来看IBM和x86的故事。</p><p>IBM开始做IBM PC时，一开始并没有让最牛的华生实验室去研发，而是交给另一个团队。一年时间，软硬件全部自研根本不可能完成，于是他们采用了英特尔的8088芯片作为CPU，使用微软的MS-DOS做操作系统。</p><p>谁能想到IBM PC卖得超级好，好到因为垄断市场而被起诉。IBM就在被逼的情况下公开了一些技术，使得后来无数IBM-PC兼容机公司的出现，也就有了后来占据市场的惠普、康柏、戴尔等等。</p><p>能够开放自己的技术是一件了不起的事。从技术和发展的层面来讲，它会使得一项技术大面积铺开，形成行业标准。就比如现在常用的Android手机，如果没有开放的Android系统，我们也没办法享受到这么多不同类型的手机。</p><p>对于当年的PC机来说，其实也是这样。英特尔的技术因此成为了行业的开放事实标准。由于这个系列开端于8086，因此称为x86架构。</p><p>后来英特尔的CPU数据总线和地址总线越来越宽，处理能力越来越强。但是一直不能忘记三点，一是标准，二是开放，三是兼容。因为要想如此大的一个软硬件生态都基于这个架构，符合它的标准，如果是封闭或者不兼容的，那谁都不答应。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/8a/548dfd163066d061d1e882c73e7c2b8a.jpg?wh=2049*741\" alt=\"\"></p><h2>从8086的原理说起</h2><p>说完了x86的历史，我们再来看x86中最经典的一款处理器，8086处理器。虽然它已经很老了，但是咱们现在操作系统中的很多特性都和它有关，并且一直保持兼容。</p><p>我们把CPU里面的组件放大之后来看。你可以看我画的这幅图。</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/1c/2dc8237e996e699a0361a6b5ffd4871c.jpeg?wh=2770*1849\" alt=\"\"></p><p>我们先来看数据单元。</p><p>为了暂存数据，8086处理器内部有8个16位的通用寄存器，也就是刚才说的CPU内部的数据单元，分别是AX、BX、CX、DX、SP、BP、SI、DI。这些寄存器主要用于在计算过程中暂存数据。</p><p>这些寄存器比较灵活，其中AX、BX、CX、DX可以分成两个8位的寄存器来使用，分别是AH、AL、BH、BL、CH、CL、DH、DL，其中H就是High（高位），L就是Low（低位）的意思。</p><p>这样，比较长的数据也能暂存，比较短的数据也能暂存。你可能会说16位并不长啊，你可别忘了，那是在计算机刚刚起步的时代。</p><p>接着我们来看控制单元。</p><p>IP寄存器就是指令指针寄存器（Instruction Pointer Register)，指向代码段中下一条指令的位置。CPU会根据它来不断地将指令从内存的代码段中，加载到CPU的指令队列中，然后交给运算单元去执行。</p><p>如果需要切换进程呢？每个进程都分代码段和数据段，为了指向不同进程的地址空间，有四个16位的段寄存器，分别是CS、DS、SS、ES。</p><p>其中，CS就是代码段寄存器（Code Segment Register），通过它可以找到代码在内存中的位置；DS是数据段的寄存器，通过它可以找到数据在内存中的位置。</p><p>SS是栈寄存器（Stack Register）。栈是程序运行中一个特殊的数据结构，数据的存取只能从一端进行，秉承后进先出的原则，push就是入栈，pop就是出栈。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/47/08ea4adb633f114d788d5c6a9dae0f47.jpeg?wh=2003*1013\" alt=\"\"></p><p>凡是与函数调用相关的操作，都与栈紧密相关。例如，A调用B，B调用C。当A调用B的时候，要执行B函数的逻辑，因而A运行的相关信息就会被push到栈里面。当B调用C的时候，同样，B运行相关信息会被push到栈里面，然后才运行C函数的逻辑。当C运行完毕的时候，先pop出来的是B，B就接着调用C之后的指令运行下去。B运行完了，再pop出来的就是A，A接着运行，直到结束。</p><p>如果运算中需要加载内存中的数据，需要通过DS找到内存中的数据，加载到通用寄存器中，应该如何加载呢？对于一个段，有一个起始的地址，而段内的具体位置，我们称为<strong>偏移量</strong>（Offset）。例如8号会议室的第三排，8号会议室就是起始地址，第三排就是偏移量。</p><p>在CS和DS中都存放着一个段的起始地址。代码段的偏移量在IP寄存器中，数据段的偏移量会放在通用寄存器中。</p><p>这时候问题来了，CS和DS都是16位的，也就是说，起始地址都是16位的，IP寄存器和通用寄存器都是16位的，偏移量也是16位的，但是8086的地址总线地址是20位。怎么凑够这20位呢？方法就是“<strong>起始地址*16+偏移量</strong>”，也就是把CS和DS中的值左移4位，变成20位的，加上16位的偏移量，这样就可以得到最终20位的数据地址。</p><p>从这个计算方式可以算出，无论真正的内存多么大，对于只有20位地址总线的8086来讲，能够区分出的地址也就2^20=1M，超过这个空间就访问不到了。这又是为啥呢？如果你想访问1M+X的地方，这个位置已经超过20位了，由于地址总线只有20位，在总线上超过20位的部分根本是发不出去的，所以发出去的还是X，最后还是会访问1M内的X的位置。</p><p>那一个段最大能有多大呢？因为偏移量只能是16位的，所以一个段最大的大小是2^16=64k。</p><p>是不是好可怜？对于8086CPU，最多只能访问1M的内存空间，还要分成多个段，每个段最多64K。尽管我们现在看来这不可想象得小，根本没法儿用，但是在当时其实够用了。</p><h2>再来说32位处理器</h2><p>当然，后来计算机的发展日新月异，内存越来越大，总线也越来越宽。在32位处理器中，有32根地址总线，可以访问2^32=4G的内存。使用原来的模式肯定不行了，但是又不能完全抛弃原来的模式，因为这个架构是开放的。</p><p>“开放”，意味着有大量其他公司的软硬件是基于这个架构来实现的，不能为所欲为，想怎么改怎么改，一定要和原来的架构兼容，而且要一直兼容，这样大家才愿意跟着你这个开放平台一直玩下去。如果你朝令夕改，那其他厂商就惨了。</p><p>如果是不开放的架构，那就没有问题。硬件、操作系统，甚至上面的软件都是自己搞的，你想怎么改就可以怎么改。</p><p>我们下面来说说，在开放架构的基础上，如何保持兼容呢？</p><p>首先，通用寄存器有扩展，可以将8个16位的扩展到8个32位的，但是依然可以保留16位的和8位的使用方式。你可能会问，为什么高16位不分成两个8位使用呢？因为这样就不兼容了呀！</p><p>其中，指向下一条指令的指令指针寄存器IP，就会扩展成32位的，同样也兼容16位的。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/84/e3f4f64e6dfe5591b7d8ef346e8e8884.jpeg?wh=2575*1192\" alt=\"\"></p><p>而改动比较大，有点不兼容的就是<strong>段寄存器</strong>（Segment Register）。</p><p>因为原来的模式其实有点不伦不类，因为它没有把16位当成一个段的起始地址，也没有按8位或者16位扩展的形式，而是根据当时的硬件，弄了一个不上不下的20位的地址。这样每次都要左移四位，也就意味着段的起始地址不能是任何一个地方，只是能整除16的地方。</p><p>如果新的段寄存器都改成32位的，明明4G的内存全部都能访问到，还左移不左移四位呢？</p><p>那我们索性就重新定义一把吧。CS、SS、DS、ES仍然是16位的，但是不再是段的起始地址。段的起始地址放在内存的某个地方。这个地方是一个表格，表格中的一项一项是<strong>段描述符</strong>（Segment Descriptor）。这里面才是真正的段的起始地址。而段寄存器里面保存的是在这个表格中的哪一项，称为<strong>选择子</strong>（Selector）。</p><p>这样，将一个从段寄存器直接拿到的段起始地址，就变成了先间接地从段寄存器找到表格中的一项，再从表格中的一项中拿到段起始地址。</p><p>这样段起始地址就会很灵活了。当然为了快速拿到段起始地址，段寄存器会从内存中拿到CPU的描述符高速缓存器中。</p><p>这样就不兼容了，咋办呢？好在后面这种模式灵活度非常高，可以保持将来一直兼容下去。前面的模式出现的时候，没想到自己能够成为一个标准，所以设计就没这么灵活。</p><p>因而到了32位的系统架构下，我们将前一种模式称为<strong>实模式</strong>（Real Pattern），后一种模式称为<strong>保护模式</strong>（Protected Pattern）。</p><p>当系统刚刚启动的时候，CPU是处于实模式的，这个时候和原来的模式是兼容的。也就是说，哪怕你买了32位的CPU，也支持在原来的模式下运行，只不过快了一点而已。</p><p>当需要更多内存的时候，你可以遵循一定的规则，进行一系列的操作，然后切换到保护模式，就能够用到32位CPU更强大的能力。</p><p>这也就是说，不能无缝兼容，但是通过切换模式兼容，也是可以接受的。</p><p>在接下来的几节，我们就来看一下，CPU如何从启动开始，逐渐从实模式变为保护模式的。</p><h2>总结时刻</h2><p>这一节，我们讲了x86架构。在以后的操作系统讲解中，我们也是主要基于x86架构进行讲解，只有了解了底层硬件的基本工作原理，将来才能理解操作系统的工作模式。</p><p>x86架构总体来说还是很复杂的，其中和操作系统交互比较密切的部分，我画了个图。在这个图中，建议你重点牢记这些寄存器的作用，以及段的工作模式，后面我们马上就能够用到了。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/76/e2e92f2239fe9b4c024d300046536d76.jpeg?wh=4042*1705\" alt=\"\"></p><h2>课堂练习</h2><p>操作这些底层的寄存器往往需要使用汇编语言，操作系统的一些底层的模块也是用汇编语言写的，因而你需要简单回顾一些汇编语言中的一些简单的命令的作用。所以，今天给你留个练习题，简单了解一下这些命令。</p><p>mov, call, jmp, int, ret, add, or, xor, shl, shr, push, pop, inc, dec, sub, cmp。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","neighbors":{"left":{"article_title":"05 | 学会几个系统调用：咱们公司能接哪些类型的项目？","id":89251},"right":{"article_title":"07 | 从BIOS到bootloader：创业伊始，有活儿老板自己上","id":89739}},"comments":[{"had_liked":false,"id":83632,"user_name":"一命赌快乐","can_delete":false,"product_type":"c1","uid":1331869,"ip_address":"","ucode":"BB7CE5D3056C87","user_header":"https://static001.geekbang.org/account/avatar/00/14/52/9d/5d51fda4.jpg","comment_is_top":true,"comment_ctime":1554687442,"is_pvip":false,"replies":[{"id":"30251","content":"赞，认真学习的典范","user_name":"作者回复","comment_id":83632,"uid":"1001590","ip_address":"","utype":1,"ctime":1554688689,"user_name_real":"刘超@网易云"}],"discussion_count":4,"race_medal":0,"score":"9.2233732452953006e+18","product_id":100024701,"comment_content":"move a b :把b值赋给a,使a=b<br>call和ret :call调用子程序，子程序以ret结尾<br>jmp :无条件跳<br>int :中断指令<br>add a b : 加法,a=a+b<br>or :或运算<br>xor :异或运算<br>shl :算术左移<br>ahr :算术右移<br>push xxx :压xxx入栈<br>pop xxx: xxx出栈<br>inc: 加1<br>dec: 减1<br>sub a b : a=a-b<br>cmp: 减法比较，修改标志位<br>","like_count":282,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446106,"discussion_content":"赞，认真学习的典范","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554688689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388919,"discussion_content":"pop错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629042166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042983,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","nickname":"Shanks-王冲","note":"","ucode":"C4B90A17850E20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196996,"discussion_content":"ahr -> shr 算术右移🤔","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583393167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1701725,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiabrzic7IeQJDfV4m3BdIia9aYdpR3icxdnPSrBoJwyzbn5XGeInZAJETumLCec1sibia2WOE3FSVoBcg/132","nickname":"Geek_11377b","note":"","ucode":"3F461DF8FB3B20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98273,"discussion_content":"move a b :把b值赋给a,使a=b解释的不对吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577152325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83715,"user_name":"Frank_51","can_delete":false,"product_type":"c1","uid":1135841,"ip_address":"","ucode":"3976DEC3EF25B5","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/e1/bdbe3e29.jpg","comment_is_top":false,"comment_ctime":1554707555,"is_pvip":false,"replies":[{"id":"30272","content":"推荐书籍","user_name":"作者回复","comment_id":83715,"uid":"1001590","ip_address":"","utype":1,"ctime":1554716345,"user_name_real":"刘超@网易云"}],"discussion_count":6,"race_medal":0,"score":"474001110115","product_id":100024701,"comment_content":"作为一个搞硬件的，这章是我学习最轻松的，推荐一个入门的系统学习汇编的视频课，网易云课堂上的一个课程，《汇编从零开始到C语言》，通俗易懂，小白入门必备","like_count":111,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446132,"discussion_content":"推荐书籍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554716345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1353456,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a6/f0/50d0931d.jpg","nickname":"木易杨","note":"","ucode":"3C6EFF05AFFACA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163316,"discussion_content":"在推荐很经典一本书《汇编语言第三版》王爽著","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1581069938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026608,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/30/acc91f01.jpg","nickname":"honnkyou","note":"","ucode":"FD5EC4120EE803","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211727,"discussion_content":"底层汇编躲不掉啊(つд⊂)","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584884219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005310,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/fe/b17bf7e8.jpg","nickname":"omg-fly","note":"","ucode":"4A7404F19A7FCD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362871,"discussion_content":"你好，大佬，想问一个小白问题：总线在硬件上是怎么体现的？在CPU里还是主板里呀，希望能看到--","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617066170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2440687,"avatar":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhJwzHXwWwxWXUtL6gpnNrCu2El7h2EgETZpNK1VHU4iaQpa3jLVDNFE7kawwdCV6VVD6wl7tzKyau5y2DDmuyIYx/132","nickname":"Geek_400592","note":"","ucode":"FA87D436C663EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351981,"discussion_content":"这里的指令地址或者内存地址的概念是不是内存编号。根据内存编号进行取里面的指令。根据指令（操作码和地址码）通过指令译码器进行解析属于哪种指令的操作比如从内存取数据，或者寄存器取值赋值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614556924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103058,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d4/d2/96dbfa5a.jpg","nickname":"云辉","note":"","ucode":"0E67E8E8421294","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22030,"discussion_content":"收藏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569563164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84476,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1554869035,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"289317677867","product_id":100024701,"comment_content":"- CPU 包括: 运算单元, 数据单元, 控制单元<br>    - 运算单元 不知道算哪些数据, 结果放哪<br>    - 数据单元 包括 CPU 内部缓存和寄存器, 暂时存放数据和结果<br>    - 控制单元 获取下一条指令, 指导运算单元取数据, 计算, 存放结果<br>- 进程包含代码段, 数据段等, 以下为 CPU 执行过程:<br>    - 控制单元 通过指令指针寄存器(IP), 取下一条指令, 放入指令寄存器中<br>        - 指令包括操作和目标数据<br>    - 数据单元 根据控制单元的指令, 从数据段读数据到数据寄存器中<br>    - 运算单元 开始计算, 结果暂时存放到数据寄存器<br>- 两个寄存器, 存当前进程代码段和数据段起始地址, 在进程间切换<br>- 总线包含两类数据: 地址总线和数据总线<br>---<br>- x86 开放, 统一, 兼容<br>- 数据单元 包含 8个 16位通用寄存器, 可分为 2个 8位使用<br>- 控制单元 包含 IP(指令指针寄存器) 以及 4个段寄存器 CS DS SS ES<br>    - IP 存放指令偏移量<br>    - 数据偏移量存放在通用寄存器中<br>    - `段地址&lt;&lt;4 + 偏移量` 得到地址<br>---<br>- 32 位处理器<br>- 通用寄存器 从 8个 16位拓展为 8个 32位, 保留 16位和 8位使用方式<br>- IP 从 16位扩展为 32位, 保持兼容<br>- 段寄存器仍为 16位, 由段描述符(表格, 缓存到 CPU 中)存储段的起始地址, 由段寄存器选择其中一项<br>    - 保证段地址灵活性与兼容性<br>---<br>- 16位为实模式, 32位为保护模式<br>- 刚开机为实模式, 需要更多内存切换到保护模式","like_count":68,"discussions":[{"author":{"id":2762604,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/27/6c/5abd5e9f.jpg","nickname":"AKEI","note":"","ucode":"D6836002F27010","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587108,"discussion_content":"谢谢老哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662798341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1189290,"avatar":"https://static001.geekbang.org/account/avatar/00/12/25/aa/ced0170d.jpg","nickname":"杨宝强","note":"","ucode":"B2352D7EA24F31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248675,"discussion_content":"您好，我有个疑问，处于实模式下的应该是20位吧，虽然文章中说了段寄存器是16位的，但是由于当时的硬件原因，地址总线是20位的，每次寻址的时候都需要左移四位，那个多少位的处理器取决于地址总线的数量吧，如果您看到的话能否帮我解答一下。谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587886609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266698,"avatar":"https://static001.geekbang.org/account/avatar/00/13/54/0a/9a002ad5.jpg","nickname":"Adam Lau","note":"","ucode":"7E542D6E789500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242750,"discussion_content":"感觉比老师讲的还清楚呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587484041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738699,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/87/cb/221d3c64.jpg","nickname":"frank_uu","note":"","ucode":"D688AC66389C6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220458,"discussion_content":"多谢总结~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585879059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83572,"user_name":"TaoLR","can_delete":false,"product_type":"c1","uid":1004102,"ip_address":"","ucode":"1BAE96AA8E6229","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/46/3d4f32f7.jpg","comment_is_top":false,"comment_ctime":1554654588,"is_pvip":false,"replies":[{"id":"30246","content":"后面很多地方要用到寄存器，所以必须先讲一下","user_name":"作者回复","comment_id":83572,"uid":"1001590","ip_address":"","utype":1,"ctime":1554688398,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"220597986684","product_id":100024701,"comment_content":"妥妥地复习了一把“计算机体系结构”🌹","like_count":52,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446075,"discussion_content":"后面很多地方要用到寄存器，所以必须先讲一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1554688398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83787,"user_name":"谭","can_delete":false,"product_type":"c1","uid":1227259,"ip_address":"","ucode":"CD07EE015D6582","user_header":"https://static001.geekbang.org/account/avatar/00/12/b9/fb/2e9432e3.jpg","comment_is_top":false,"comment_ctime":1554715584,"is_pvip":false,"replies":[{"id":"30275","content":"1.会有指令起始地址，后面讲ELF格式的时候会说这个事情。当执行一个程序的时候，会加载ELF格式，加载的时候会设置指令指针<br>2.多线程共享同一个进程内存空间，所以代码段的起始地址还是一样的。只不过每个线程执行不同的func，指令指针会不一样，在内核中，线程也是有独立的task_struct<br>3.寄存器是有限的，如果把程序编译成汇编看的话，再大的数据，也是要转换为对寄存器的操作。当然寄存器里面可以包含对内存的访问地址，这样内存里面的数据就很多了","user_name":"作者回复","comment_id":83787,"uid":"1001590","ip_address":"","utype":1,"ctime":1554717055,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"130403734464","product_id":100024701,"comment_content":"老师讲地太精彩了 点赞。由于基础弱，还有几个问题希望老师万忙中答疑一下，谢谢：<br><br>问题1：程序编译成二进制代码的时候，包含有指令起始地址吗？若包含那么后续每一行指令的涉及到的指令地址是计算出来的？   或者说加载进程的程序的时候才会确定起始地址？很好奇这个指令的指针寄存器里的值是什么时候、怎么放进去的？<br><br>问题2： CPU两个寄存器处理保存当前进程代码段的起始地址，已经数据起始地址。切换进程时会将这两个寄存器里的值一并切换，那么同一个进程出现多线程的时候了？<br><br>问题3：数据总线拿数据的时候没有限制大小吗，若数据很大，数据单元里的数据寄存器放不下怎么办的？","like_count":31,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446148,"discussion_content":"1.会有指令起始地址，后面讲ELF格式的时候会说这个事情。当执行一个程序的时候，会加载ELF格式，加载的时候会设置指令指针\n2.多线程共享同一个进程内存空间，所以代码段的起始地址还是一样的。只不过每个线程执行不同的func，指令指针会不一样，在内核中，线程也是有独立的task_struct\n3.寄存器是有限的，如果把程序编译成汇编看的话，再大的数据，也是要转换为对寄存器的操作。当然寄存器里面可以包含对内存的访问地址，这样内存里面的数据就很多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554717055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83777,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1554714846,"is_pvip":false,"replies":[{"id":"49856","content":"赞","user_name":"作者回复","comment_id":83777,"uid":"1001590","ip_address":"","utype":1,"ctime":1567764278,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"126108766430","product_id":100024701,"comment_content":"Guide to x86 Assembly: http:&#47;&#47;www.cs.virginia.edu&#47;~evans&#47;cs216&#47;guides&#47;x86.html","like_count":30,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446143,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567764278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83699,"user_name":"微秒","can_delete":false,"product_type":"c1","uid":1249195,"ip_address":"","ucode":"65A2E8B565B191","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","comment_is_top":false,"comment_ctime":1554706079,"is_pvip":false,"replies":[{"id":"30274","content":"首先先建立一个观念，CPU里面的比内存块很多，内存比硬盘快很多。原来段的起始地址是放在寄存器里面的，所以速度就比在内存里面快很多，但是到了保护模式下，端起始地址放到内存里面了，就慢了，怎么办呢？将内存中的段描述符拿到CPU内的高速缓存中，就又快了。","user_name":"作者回复","comment_id":83699,"uid":"1001590","ip_address":"","utype":1,"ctime":1554716714,"user_name_real":"刘超@网易云"}],"discussion_count":4,"race_medal":0,"score":"121813790367","product_id":100024701,"comment_content":"当然为了快速拿到段起始地址，段寄存器会从内存中拿到 CPU 的描述符高速缓存器中。<br>这句话感觉有点语义不通啊，能否详细解释下？？？","like_count":29,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446129,"discussion_content":"首先先建立一个观念，CPU里面的比内存块很多，内存比硬盘快很多。原来段的起始地址是放在寄存器里面的，所以速度就比在内存里面快很多，但是到了保护模式下，端起始地址放到内存里面了，就慢了，怎么办呢？将内存中的段描述符拿到CPU内的高速缓存中，就又快了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554716714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/c6/38195ec4.jpg","nickname":"wong","note":"","ucode":"3A82EEA1A55F26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286418,"discussion_content":"段寄存器会从内存中拿到 CPU 的描述符（然后放到 CPU 内的）高速缓存器中。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593167404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291057,"discussion_content":"将内存中的段描述符拿到CPU内的高速缓存中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594693378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1044169,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ee/c9/abb7bfe3.jpg","nickname":"Jianfeihit","note":"","ucode":"14366085596425","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288135,"discussion_content":"请问这个CPU内的告诉缓存是什么？L2 cache吗？另外L1 cache和L2 cache跟上面的寄存器有关系吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593657793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83763,"user_name":"佳佳大魔王","can_delete":false,"product_type":"c1","uid":1235320,"ip_address":"","ucode":"D5214903D85A0F","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/78/8a328299.jpg","comment_is_top":false,"comment_ctime":1554712149,"is_pvip":false,"replies":[{"id":"30276","content":"可以理解为，CPU和操作系统的一起干活的模式，在实模式下，两者约定好了这些寄存器是干这个的，总线是这样的，内存访问是这样的，在保护模式下，两者约定好了这些寄存器是干那个的，总线是那样的，内存访问是那样的。这样操作系统给CPU下命令，CPU按照约定好的，就能得到操作系统预料的结果，操作系统也按照约定好的，将一些数据结构，例如段描述符表放在一个约定好的地方，这样CPU就能找到。两者就可以配合工作了。","user_name":"作者回复","comment_id":83763,"uid":"1001590","ip_address":"","utype":1,"ctime":1554717284,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"100338959957","product_id":100024701,"comment_content":"实模式和保护模式的英文中模式应该为pattern吧，另外这两个模式不太理解。","like_count":23,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446137,"discussion_content":"可以理解为，CPU和操作系统的一起干活的模式，在实模式下，两者约定好了这些寄存器是干这个的，总线是这样的，内存访问是这样的，在保护模式下，两者约定好了这些寄存器是干那个的，总线是那样的，内存访问是那样的。这样操作系统给CPU下命令，CPU按照约定好的，就能得到操作系统预料的结果，操作系统也按照约定好的，将一些数据结构，例如段描述符表放在一个约定好的地方，这样CPU就能找到。两者就可以配合工作了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554717284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84056,"user_name":"马上想好","can_delete":false,"product_type":"c1","uid":1193316,"ip_address":"","ucode":"053C41AE647E30","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/64/1ad5530d.jpg","comment_is_top":false,"comment_ctime":1554776045,"is_pvip":false,"replies":[{"id":"49783","content":"没有人写程序用高位的","user_name":"作者回复","comment_id":84056,"uid":"1001590","ip_address":"","utype":1,"ctime":1567701424,"user_name_real":"刘超@网易云"}],"discussion_count":4,"race_medal":0,"score":"96044056557","product_id":100024701,"comment_content":"老师您好，我想问下 为什么高16位分成两个8位就不兼容列呀。","like_count":22,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446234,"discussion_content":"没有人写程序用高位的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622696,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","nickname":"一格状语","note":"","ucode":"EBA9ED5F97416D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576156,"discussion_content":"老师的意思是，32位寄存器，你把高16位拆成2个8位寄存器和把低16位拆成2个8位寄存器，后者才兼容，前者不兼容，因为之前的指令都是8或者16位的，用低位地址编的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655305086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2418188,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e6/0c/e904de12.jpg","nickname":"简简单单","note":"","ucode":"EDFE8A23494F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350172,"discussion_content":"啥意思呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613731873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1590912,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/80/45d989e5.jpg","nickname":"ZHU～JM","note":"","ucode":"1B29556D705C0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2418188,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e6/0c/e904de12.jpg","nickname":"简简单单","note":"","ucode":"EDFE8A23494F24","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370688,"discussion_content":"由低地址指向高地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619509974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350172,"ip_address":""},"score":370688,"extra":""}]}]},{"had_liked":false,"id":83639,"user_name":"Pluto","can_delete":false,"product_type":"c1","uid":1038251,"ip_address":"","ucode":"E292AFAD428135","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d7/ab/15c9b94e.jpg","comment_is_top":false,"comment_ctime":1554688756,"is_pvip":true,"replies":[{"id":"49861","content":"哈哈","user_name":"作者回复","comment_id":83639,"uid":"1001590","ip_address":"","utype":1,"ctime":1567764386,"user_name_real":"刘超@网易云"}],"discussion_count":3,"race_medal":0,"score":"78864100084","product_id":100024701,"comment_content":"原来 x86 架构是指 8086 ，而 x86 是代表 32 位操作系统是因为 80386，原来这两个 x86 不是同一个意思啊，以前学操作系统的时候一直想不明白 x86 为什么是指代 32 位操作系统","like_count":18,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446109,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567764386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1798979,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/73/43/ae139b1f.jpg","nickname":"博","note":"","ucode":"F7CA69FF5D09BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211293,"discussion_content":"臆测，没有什么联系吧，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584839178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1470635,"avatar":"https://static001.geekbang.org/account/avatar/00/16/70/ab/7a7399a7.jpg","nickname":"tj.•","note":"","ucode":"078D80A68491E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116138,"discussion_content":"这位朋友，你的评论没听懂诶。你的意思是：如果x86后面没跟“架构”两个字，就是指8086；如果跟了“架构”两字，就是指32位操作系统吗？  为什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578054773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83588,"user_name":"MJ","can_delete":false,"product_type":"c1","uid":1237145,"ip_address":"","ucode":"FCEC0C21444D2A","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/99/5d603697.jpg","comment_is_top":false,"comment_ctime":1554680263,"is_pvip":false,"replies":[{"id":"30245","content":"就是乘以十六","user_name":"作者回复","comment_id":83588,"uid":"1001590","ip_address":"","utype":1,"ctime":1554688349,"user_name_real":"刘超@网易云"}],"discussion_count":3,"race_medal":0,"score":"74569124295","product_id":100024701,"comment_content":"“起始地址 *16+ 偏移量”，也就是把 CS 和 DS 中的值左移 4 位，变成 20 位的，加上 16 位的偏移量，这样就可以得到最终 20 位的数据地址。<br><br>求问老师，左移四位，如何理解？","like_count":17,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446083,"discussion_content":"就是乘以十六","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554688349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144080,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJtl3p4gcguAZy580SyoQAic79Z7QAvTcibnicV9K8x2Yzbxa8BlknwhquzTPPklaWPDDbrECQG3uurg/132","nickname":"lumence","note":"","ucode":"00BA0ECFA6F002","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5098,"discussion_content":"左移四位就是，向左边移动4个bit位，一个bit位就是一个2进制位，左移 4 位等于 乘以 2 的 4 次方。 2的4次方就是 16.\n所以 起始地址 *16 就是说 起始地址左移4位","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1565944043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1456964,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3b/44/dd534c9b.jpg","nickname":"菜头","note":"","ucode":"C5E95519F9EA21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2818,"discussion_content":"1111 2^3+2^2+2^1+2^0\n11110000 = 2^7 + 2^6+2^5+2^4 = 2^4(2^3+2^2+2^1+2^0) = 16 * (1111) \n\n1111 0000 = 1111 * 16","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1563956065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84638,"user_name":"尚墨","can_delete":false,"product_type":"c1","uid":1300116,"ip_address":"","ucode":"114EE139168CB9","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhJ6t1z92XYEzXpqpgpS1veBc5DNGhfRHFsHgE19qHqG0cevcIJRRsjIKxsSEcIPVP1nOkaVKLibb2xFq04A4KMY3/132","comment_is_top":false,"comment_ctime":1554888592,"is_pvip":false,"replies":[{"id":"30538","content":"呜哇，没想到能和go联系在一起，看来底层原理比较容易互通","user_name":"作者回复","comment_id":84638,"uid":"1001590","ip_address":"","utype":1,"ctime":1554990524,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"70274365328","product_id":100024701,"comment_content":"上周看了 Go 夜读社区 《Go Plan 9汇编入门》https:&#47;&#47;www.bilibili.com&#47;video&#47;av46494102 听的云里雾里的，在来看这篇文章好像感觉出了点门道。","like_count":17,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446410,"discussion_content":"呜哇，没想到能和go联系在一起，看来底层原理比较容易互通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554990524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142242,"user_name":"心浮天空","can_delete":false,"product_type":"c1","uid":1051609,"ip_address":"","ucode":"3B2D0E6CC51EE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/d9/3328dd12.jpg","comment_is_top":false,"comment_ctime":1571319331,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"65995828771","product_id":100024701,"comment_content":"实模式和保护模式的区别不知道理解的对不对，<br>1. 实模式下, 地址总线最大可寻地址空间大小仍为1M<br>2. 实模式下, 虽然通用寄存器和 IP寄存器在32CPU里已经扩展成32位, 但仍然只使用低16位<br>3. 实模式下, CS,DS,SS,ES寄存器仍段起始地址, 而在保护模式下实际指向的是段描述符位置<br>4. 实模式下, 没有特权等级和访问边界校验<br>5. 实模式下, 是直接对物理地址进行寻址, 没有虚拟地址和分页","like_count":16},{"had_liked":false,"id":84888,"user_name":"Matnix","can_delete":false,"product_type":"c1","uid":1238948,"ip_address":"","ucode":"8259BE4D127DA8","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/a4/4fc3c2d4.jpg","comment_is_top":false,"comment_ctime":1554943241,"is_pvip":false,"replies":[{"id":"30532","content":"这本书值得推荐","user_name":"作者回复","comment_id":84888,"uid":"1001590","ip_address":"","utype":1,"ctime":1554990356,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"57389518089","product_id":100024701,"comment_content":"结合《深入理解计算机系统》第三章，受益匪浅","like_count":13,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446488,"discussion_content":"这本书值得推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554990356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227370,"user_name":"做一个积极的跳蚤","can_delete":false,"product_type":"c1","uid":2035956,"ip_address":"","ucode":"BBE367BBCB6C28","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ecruTrMgzvqIs5iaWVibZw4Rxic42ZXGTflvOFHiaZEkf32Su01gDCWT8tdIcEoybg0ibAYU2Q8f9bleL7Q37fKguxQ/132","comment_is_top":false,"comment_ctime":1592365057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53131972609","product_id":100024701,"comment_content":"听刘老师的课程，相信有基础都听得明白，但是要让自己再清晰的说出来，估计过一天后就说的模模糊糊吧。相信这是没有认真总结的学习的后果，导致后面随着时间就慢慢淡忘了，只记得个大概了。就像我某次面试一样，以前优化一个时间轮的数据结构，后面面试提到了，我一下想不起来就没回答清楚。知识常用常新，不常用就得经常回顾总结。<br>1.cpu的组成：<br> 运算单元，数据单元，控制单元构成<br>   运算单元负责程序代码段的运算；<br>   数据单元由cpu内部缓存和寄存器组成，存储运算单元计算的需要的临时数据和运算结果；<br>   控制单元控制运算单元执行哪条代码段指令，指导计算单元取数据、计算以及存放结果；<br><br>2.cpu如何执行程序、操作程序数据、产生结果并写回内存呢？<br>通过cpu控制单元中的指令指针寄存器（IP），不断取下一条内存代码段指令，放入指令寄存器。<br>指令分为两部分，一部分是指示操作类型（加，减等），一部分目标数据在数据段的地址；<br>要执行一条指令，就把操作交给运算单元，把对象数据地址交给数据单元。<br>数据单元根据控制单元指令，从内存中的数据段读数据到的寄存器，然后运算单元进行运算。<br>产生的结果暂存数据单元的寄存器，最后控制单元根据指令将数据写回内存中的数据段；<br><br>3.cpu进程切换<br>cpu有两个寄存器，存放当前进程代码段起始地址、数据段的起始地址，当前进程A就存放A的，切换到B就存的是B的；<br><br>4.总线包括数据总线和地址总线<br><br>5.x86 16位8086经典cpu，现在cpu大部分兼容继承它。<br>\t数据单元 包含8个16位通用寄存器（AX、BX、CX、DX、SP、BP、SI、DI），用于计算过程中暂存数据，前4个可分为高低两个8位使用。<br>\t控制单元 包含 IP(指令指针寄存器) 以及 4个16位段寄存器 CS DS SS ES；<br>\t\tIP 寄存器，存放指令偏移量，指向下一条指令位置。<br>\t\tCS 代码段寄存器，存代码段开始地址；DS是数据段寄存器，存数据段开始地址；<br>\t\tSS 是栈寄存器，栈是程序运行中特殊数据结构，先进后出，函数调用就是栈的结构。<br>\t\tCS DS存放各自开始地址，代码段偏移量在IP寄存器中，数据段偏移地址存放通用寄存器中；<br>\t\t8086地址总线20位，CS,DS都是16位，通过“起始地址 *16+ 偏移量”来支持<br>\t\t<br>6.x86 32位cpu，可访问2^32=4G内存\t<br>\t 通用寄存器 从 8个 16位拓展为 8个 32位, 保留 16位和 8位使用方式<br>\t IP 寄存器从 16位扩展为 32位, 保持兼容<br>\t 变化最大的段寄存器，为兼容仍是16位，但不再是段起始地址，段起始地址在内存中以表格存在，<br>\t 表格中是段描述符，这里面才是真正段其实地址，而段寄存器中保存选择子指明是哪个描述符。<br>\t 为了加速拿到其实地址，段寄存器会从内存中拿到 CPU 的描述符到高速缓存器中。<br><br>7.实模式、保护模式<br>\t16位为实模式, 32位为保护模式；<br>\t刚开机为实模式，当运行需要更多内存和更多操作时候就是保护模式，通过切换模式实现cpu兼容<br>\t ","like_count":12},{"had_liked":false,"id":83586,"user_name":"TinnyFlames","can_delete":false,"product_type":"c1","uid":1234723,"ip_address":"","ucode":"0067EFC4210104","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/23/14b98ea5.jpg","comment_is_top":false,"comment_ctime":1554679475,"is_pvip":false,"replies":[{"id":"30247","content":"是的，所以兼容比优雅要重要","user_name":"作者回复","comment_id":83586,"uid":"1001590","ip_address":"","utype":1,"ctime":1554688467,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"53094287027","product_id":100024701,"comment_content":"x86是甜蜜的历史包袱，它的兼容性让它一统市场，但是当时很多性能上更好的尝试在商业上都失败了，因为兼容性的问题客户不买单……","like_count":12,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446081,"discussion_content":"是的，所以兼容比优雅要重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554688467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83813,"user_name":"MARK","can_delete":false,"product_type":"c1","uid":1126900,"ip_address":"","ucode":"9F429C9C5FEE6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/f4/467cf5d7.jpg","comment_is_top":false,"comment_ctime":1554719754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48799360010","product_id":100024701,"comment_content":"已经有童鞋回复，再补充点<br>MOV: load value.  this instruction name is misnomer, resulting in some confusion (data is not movedbut copied), in other architectures the same instructions is usually named “LOAD” and&#47;or “STORE”or something like that.One important thing: if you set the low 16-bit part of a 32-bit register in 32-bit mode, the high 16bits remains as they were. But if you modify the low 32-bit part of the register in 64-bit mode, thehigh 32 bits of the register will be cleared.Supposedly, it was done to simplify porting code to x86-64.<br><br>CALL:call another function:PUSH address_after_CALL_instruction; JMP label.<br>JMP: jump to another address. The opcode has ajump offset.<br><br>INT(M):INT x is analogous to PUSHF; CALL dword ptr [x*4]in 16-bit environment.  It was widely used in MS-DOS, functioning as a syscall vector. The registers AX&#47;BX&#47;CX&#47;DX&#47;SI&#47;DI were filled with the arguments and then the flow jumped to the address in the Interrupt Vector Table (located at thebeginning of the address space). It was popular because INT has a short opcode (2 bytes) and the program which needs some MS-DOS services is not bother to determine the address of the service’sentry point. The interrupt handler returns the control flow to caller using the IRET instruction.The most busy MS-DOS interrupt number was 0x21, serving a huge part of itsAPI. In the post-MS-DOS era, this instruction was still used as syscall both in Linux and Windows (6.3 onpage 750), but was later replaced by the SYSENTER or SYSCALL instructions.<br><br>RET: return from subroutine:POP tmp; JMP tmp.<br>    In fact, RET is an assembly language macro, in Windows and *NIX environment it is translated into RETN (“return near”) or, in MS-DOS times, where the memory was addressed differently, into RETF (“return far”).<br>\tRET can have an operand. Then it works like this:<br>\tPOP tmp; ADD ESP op1; JMP tmp.RETwith an operand usually ends functions in the stdcall calling convention.","like_count":11},{"had_liked":false,"id":83657,"user_name":"YoungMarshual_besos","can_delete":false,"product_type":"c1","uid":1343985,"ip_address":"","ucode":"3AC6CEDE7A4543","user_header":"https://static001.geekbang.org/account/avatar/00/14/81/f1/79efbb65.jpg","comment_is_top":false,"comment_ctime":1554691132,"is_pvip":false,"replies":[{"id":"49859","content":"补充完再看，可以看看计算机组成与系统结构","user_name":"作者回复","comment_id":83657,"uid":"1001590","ip_address":"","utype":1,"ctime":1567764339,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"48799331388","product_id":100024701,"comment_content":"几乎完全看懵了，发现基础知识极其匮乏，努力补课，夯实根基太重要了。","like_count":12,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446117,"discussion_content":"补充完再看，可以看看计算机组成与系统结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567764339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85413,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1555055721,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40209761385","product_id":100024701,"comment_content":"本文结构：https:&#47;&#47;www.cnblogs.com&#47;bindot&#47;p&#47;linux6.html","like_count":9,"discussions":[{"author":{"id":1101556,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/f4/5bfc786a.jpg","nickname":"Vilochen.","note":"","ucode":"19D9BF8534B480","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297531,"discussion_content":"你的ES英文写错了。\nSS 是 Stack Register","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596960734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283597,"user_name":"GivenCui","can_delete":false,"product_type":"c1","uid":1216617,"ip_address":"","ucode":"C075A3876942CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/69/76f68596.jpg","comment_is_top":false,"comment_ctime":1615853746,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"35975592114","product_id":100024701,"comment_content":"AH&amp;AL=AX（accumulator）累加寄存器<br>BH&amp;BL=BX（base）基址寄存器<br>CH&amp;CL=CX（count）计数寄存器<br>DH&amp;DL=DX（data）数据寄存器<br>SP（Stack Pointer）堆栈指针寄存器<br>BP（Base Pointer）基址指针寄存器<br>SI（Source Pointer）源变址寄存器<br>DI（Destination Index）目的变址寄存器<br><br>IP（Instruction Pointer）指令指针寄存器<br><br>CS（Code Segment）代码段寄存器<br>DS（Data Segment）数据段寄存器<br>SS（Stack Segment）堆栈段寄存器<br>ES（Extra Segment）附加段寄存器","like_count":9},{"had_liked":false,"id":92776,"user_name":"楽天","can_delete":false,"product_type":"c1","uid":1518282,"ip_address":"","ucode":"4AB8C4BC1AAA36","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/ca/f39386b7.jpg","comment_is_top":false,"comment_ctime":1557324453,"is_pvip":false,"replies":[{"id":"49416","content":"有的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567660474,"ip_address":"","comment_id":92776,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35917062821","product_id":100024701,"comment_content":"那64位的还有实模式吗？","like_count":8,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449379,"discussion_content":"有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567660474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161269,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1576160682,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31640931754","product_id":100024701,"comment_content":"大部分pc机都是用的x86架构的CPU，为什么会形成这样的格局？<br><br>建议看看吴军老师的《浪潮之巅》上册第5章","like_count":7,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291044,"discussion_content":"怎么哪都有你","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594689233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266698,"avatar":"https://static001.geekbang.org/account/avatar/00/13/54/0a/9a002ad5.jpg","nickname":"Adam Lau","note":"","ucode":"7E542D6E789500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242791,"discussion_content":"你也可以粘贴点精华过来让大家一饱眼福","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587484542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91591,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1557057750,"is_pvip":false,"replies":[{"id":"32851","content":"一个是段的起始地址，一个是栈顶指针","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1557154510,"ip_address":"","comment_id":91591,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31621828822","product_id":100024701,"comment_content":"sp是栈指针，ss是栈寄存器 ，这两个有什么区别和关联呢？","like_count":7,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448955,"discussion_content":"一个是段的起始地址，一个是栈顶指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557154510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131173,"user_name":"沧月寒心","can_delete":false,"product_type":"c1","uid":1003995,"ip_address":"","ucode":"08952A2928AABA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/db/36041c7d.jpg","comment_is_top":false,"comment_ctime":1567660901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27337464677","product_id":100024701,"comment_content":"CPU包括运算单元、控制单元和数据单元。<br>编程=逻辑+控制+数据结构<br><br>大道至简，万变不离其宗","like_count":6},{"had_liked":false,"id":120186,"user_name":"凌尘","can_delete":false,"product_type":"c1","uid":1487541,"ip_address":"","ucode":"972B8CEF3C9C20","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/b5/b1b42785.jpg","comment_is_top":false,"comment_ctime":1564804578,"is_pvip":false,"replies":[{"id":"46370","content":"加油，啃下来","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566297316,"ip_address":"","comment_id":120186,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27334608354","product_id":100024701,"comment_content":"干货满满啊，花了一天半时间来立即这一讲的内容，第一天看完有点蒙，都想跳过这一讲了，但是看到最后老师说后面会用到这一讲的知识，今天花了一上午咬咬牙重新梳理了一遍这一讲的知识，收货颇丰，给自己加油，一定要冲到最后～","like_count":6,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461229,"discussion_content":"加油，啃下来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566297316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84776,"user_name":"学徒王小明","can_delete":false,"product_type":"c1","uid":1146223,"ip_address":"","ucode":"B3AE202003E415","user_header":"https://static001.geekbang.org/account/avatar/00/11/7d/6f/c1ceb673.jpg","comment_is_top":false,"comment_ctime":1554905888,"is_pvip":false,"replies":[{"id":"30536","content":"好久没用vs了，只要能够帮助理解，就是好工具","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554990446,"ip_address":"","comment_id":84776,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27324709664","product_id":100024701,"comment_content":"微软的IDE visual studio，可以查看C语言编译后的汇编语言，内存，寄存器，非常方便。","like_count":6,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446444,"discussion_content":"好久没用vs了，只要能够帮助理解，就是好工具","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554990446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100136,"user_name":"Geek_CCTV","can_delete":false,"product_type":"c1","uid":1563384,"ip_address":"","ucode":"9FCCECC5B6F735","user_header":"","comment_is_top":false,"comment_ctime":1559456115,"is_pvip":false,"replies":[{"id":"49209","content":"实模式地址要求20位，寄存器是16位。16位没办法装的下20位，所以用偏移四位再加的方法凑够20位。<br><br>保护模式地址要求32位，段寄存器放不下了，所以要让描述符存放32位。","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567603358,"ip_address":"","comment_id":100136,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23034292595","product_id":100024701,"comment_content":"接我前一个问题，CS DS SS ES 四个寄存器的位数是多少，看 8086 那部分员工是16位，那在 x86 部分，这4个寄存器应该是 段寄存器，有句话 “弄了个不上不下的20位的地址”，那到底是多少位啊？另外，在x86 设计新 段寄存器为 32位的，不也包含了20位吗？加上偏移量，怎么也不会超过 32位吧？为什么要弄个段描述符呢？<br>","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452424,"discussion_content":"实模式地址要求20位，寄存器是16位。16位没办法装的下20位，所以用偏移四位再加的方法凑够20位。\n\n保护模式地址要求32位，段寄存器放不下了，所以要让描述符存放32位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567603358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89791,"user_name":"airfly","can_delete":false,"product_type":"c1","uid":1170478,"ip_address":"","ucode":"79E4C4E08A846C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLI6icTKbDkttGvNaMrMKdu5PsZwiagtdjn6NTWAlJPHj4cJrUTW4GuicZKFZnX8eJ2Iz319aHLymLibQ/132","comment_is_top":false,"comment_ctime":1556266104,"is_pvip":false,"replies":[{"id":"49560","content":"不会超过呀，溢出而已，又回来了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567688354,"ip_address":"","comment_id":89791,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23031102584","product_id":100024701,"comment_content":"有个问题请教下老师，在20位地址总线下，数据地址 =  起始地址 *16+ 偏移量<br><br>如果段地址为 0xffff,段内偏移为0xffff ，数据地址会超过1M范围，这个问题是怎么解决的。","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448261,"discussion_content":"不会超过呀，溢出而已，又回来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567688354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2365071,"avatar":"https://static001.geekbang.org/account/avatar/00/24/16/8f/c1baee96.jpg","nickname":"muse","note":"","ucode":"43B0C82639E39F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368146,"discussion_content":"溢出来了，不就找不道正确的地址了吗。这部分一直没想明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618581287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1616728,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ab/58/ae036dfc.jpg","nickname":"月成FUN","note":"","ucode":"75EE9B951D73CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7162,"discussion_content":"这没有超出1M的范围吧，最后的地址不是 0xffffffff吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567409938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1120408,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/98/6567af28.jpg","nickname":"胡雪松","note":"","ucode":"958103BCC03C65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1616728,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ab/58/ae036dfc.jpg","nickname":"月成FUN","note":"","ucode":"75EE9B951D73CF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47824,"discussion_content":"你这个明显错了 都32位了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573430313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7162,"ip_address":""},"score":47824,"extra":""}]}]},{"had_liked":false,"id":84815,"user_name":"一笔一画","can_delete":false,"product_type":"c1","uid":1495254,"ip_address":"","ucode":"2B9BC8ADF97106","user_header":"https://static001.geekbang.org/account/avatar/00/16/d0/d6/f335954b.jpg","comment_is_top":false,"comment_ctime":1554911785,"is_pvip":false,"replies":[{"id":"30529","content":"段的起始地址后面会特别讲，linux的处理有些特别，其实不分段，是linux事先放在初始化为固定值的。和elf没有关系。elf看到的是虚拟地址","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554990209,"ip_address":"","comment_id":84815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23029748265","product_id":100024701,"comment_content":"“段的起始地址放在内存的某个地方。”<br>请问下老师，这个地方具体在哪里？有什么方法设置和查看吗？跟elf格式有关系吗？","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446457,"discussion_content":"段的起始地址后面会特别讲，linux的处理有些特别，其实不分段，是linux事先放在初始化为固定值的。和elf没有关系。elf看到的是虚拟地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554990209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83882,"user_name":"Arthur","can_delete":false,"product_type":"c1","uid":1475327,"ip_address":"","ucode":"968C4E50FCCE4B","user_header":"https://static001.geekbang.org/account/avatar/00/16/82/ff/3672e7e9.jpg","comment_is_top":false,"comment_ctime":1554728619,"is_pvip":false,"replies":[{"id":"30319","content":"ALU的确没讲，因为和操作系统的关系不大，操作系统是看不到ALU怎么工作的，操作系统里面能看到对于寄存器的操作，所以重点讲了寄存器","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554774069,"ip_address":"","comment_id":83882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23029565099","product_id":100024701,"comment_content":"8086中的运算单元 老师好像没有讲到，通用寄存器是数据单元，IP寄存器是控制单元，四个16位段寄存器是加载的  但是运算是在那？","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446168,"discussion_content":"ALU的确没讲，因为和操作系统的关系不大，操作系统是看不到ALU怎么工作的，操作系统里面能看到对于寄存器的操作，所以重点讲了寄存器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554774069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168720,"user_name":"凯","can_delete":false,"product_type":"c1","uid":1405256,"ip_address":"","ucode":"60DB11CF72C7B0","user_header":"https://static001.geekbang.org/account/avatar/00/15/71/48/44df7f4e.jpg","comment_is_top":false,"comment_ctime":1578146382,"is_pvip":false,"replies":[{"id":"66303","content":"是Byte，不会对每一位都可以寻址的。这里讲的是硬件，是和物理内存一个概念","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1578827144,"ip_address":"","comment_id":168720,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14463048270","product_id":100024701,"comment_content":"问一个比较low的问题，总线20位，2^20=1M 这个Mb是吧。不是MB吧，现在物理内存的单位都是MB吧。文章里的内存和物理内存不是同一个概念么？","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480312,"discussion_content":"是Byte，不会对每一位都可以寻址的。这里讲的是硬件，是和物理内存一个概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578827144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1405256,"avatar":"https://static001.geekbang.org/account/avatar/00/15/71/48/44df7f4e.jpg","nickname":"凯","note":"","ucode":"60DB11CF72C7B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190889,"discussion_content":"处理机字长是指处理机能同时处理（或运算）的位数，即同时处理多少位（bit）数据。比如Intel Pentium 4处理器字长为32位，它能同时处理32位的数据，也即它的数据总线为32位。以前的处理器比如8086，则为16位处理器，现在新兴的64位处理器，它的数据吞吐能力更强，即能同时对64位数据进行运算。处理器的字长越大，说明它的运算能力越强。\n\n如果讲处理器的寻址范围，则要看处理器的地址总线的位数，而不是它的字长！这个要明白！比如Intel Pentium 4处理器的数据总线为32位，地址总线也是32位。8086的数据总线为16位，地址总线为20位。新兴的64位处理器的数据总线为64位，地址总线大部分是32位。这个清楚之后，\n\n再看地址总线与寻址范围的关系。存储单元是以字节（byte）为单位，N根地址总线能访问2的N次方个存储单元。于是有32位地址总线可以访问2的32次方个存储单元，即4GB。 8086处理器字长是16位，它的地址总线是20位，所以能访问2的20次方个存储单元，即1MB。 另外一点需要注意的就是，如果有些题目说：按“字”寻址，就说明是存储单元大小为字长的位数，按“字节”寻址，说明存储单元式字节的大小 。\n\n补充一下，知识点，给自己扫盲😊","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1582981479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1405256,"avatar":"https://static001.geekbang.org/account/avatar/00/15/71/48/44df7f4e.jpg","nickname":"凯","note":"","ucode":"60DB11CF72C7B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387188,"discussion_content":"“有些题目”，感情这是复习资料啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628041109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":190889,"ip_address":""},"score":387188,"extra":""}]},{"author":{"id":1080985,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7e/99/c4302030.jpg","nickname":"Khirye","note":"","ucode":"6C54C126FA54B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296065,"discussion_content":"老哥牛逼，多谢解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596442812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165997,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1577359895,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14462261783","product_id":100024701,"comment_content":"Linux_06<br><br>对于汇编语言，我好像已经完全忘了。。。<br>参考@一命赌快乐 同学<br><br>mov： mov obj source 把source赋值给obj<br>call: 调用子程序<br>ret: 子程序以ret结尾<br>jmp: 无条件跳转<br>int: 中断指令<br>add: add a b ==&gt; a +=b<br>or: 或<br>xor: 异或<br>shl: 算数左移<br>shr: 算数右移<br>push: push a ==&gt; 将a压栈<br>pop: pop a ==&gt; a出栈<br>inc: 加1<br>dec: 减1<br>sub: sub a b ==&gt; a = a - b<br>cmp: 减法比较，修改标志位","like_count":3,"discussions":[{"author":{"id":1755674,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ca/1a/53229822.jpg","nickname":"exec","note":"","ucode":"31AA6E7BF7B13A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139852,"discussion_content":"pop A  :意思是将栈顶元素pop出来存放在寄存器A中。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579322725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87308,"user_name":"庄小P","can_delete":false,"product_type":"c1","uid":1489063,"ip_address":"","ucode":"A71FA01F713790","user_header":"","comment_is_top":false,"comment_ctime":1555564568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14440466456","product_id":100024701,"comment_content":"这门课真的是全干货，很干，一点水都没啊","like_count":3},{"had_liked":false,"id":86848,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1555466210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14440368098","product_id":100024701,"comment_content":"置顶答案里面 shl 应该为逻辑左移，算术左移是 sal。","like_count":3},{"had_liked":false,"id":83815,"user_name":"MARK","can_delete":false,"product_type":"c1","uid":1126900,"ip_address":"","ucode":"9F429C9C5FEE6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/f4/467cf5d7.jpg","comment_is_top":false,"comment_ctime":1554719811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14439621699","product_id":100024701,"comment_content":"补充2<br>ADD: add two values.\t<br>OR: logical “or”.<br>XOR op1, op2:is in fact just “eXclusive OR”,but the compilers often use it instead of MOV EAX, 0—again becauseit is a slightly shorter opcode (2 bytes for XOR against 5 for MOV).<br><br>SHL&#47;SHR: shift value left&#47;right.<br>   Bit shifts in C&#47;C++ are implemented using≪and≫operators. The x86 ISA has the SHL (SHift Left) and SHR (SHift Right) instructions for this. Shift instructions are often used in division and multiplications bypowers of two:2n(e.g., 1, 2, 4, 8, etc.): Shifting operations are also so important because they are often used for specific bit isolation or forconstructing a value of several scattered bits.<br><br>PUSH: push a value into the stack:ESP=ESP-4 (or 8); SS:[ESP]=value.   <br>POP: get a value from the stack:value=SS:[ESP]; ESP=ESP+4 (or 8).<br>\tThe most frequently used stack access instructions are PUSH and POP(in both x86 and ARM Thumb-mode).PUSH subtracts from ESP&#47;RSP&#47;SP4 in 32-bit mode (or 8 in 64-bit mode) and then writes the contents of its sole operand to the memory address pointed by ESP&#47;RSP&#47;SP.<br>\tPOP is the reverse operation: retrieve the data from the memory location that SP points to, load it into the instruction operand (often a register) and then add 4 (or 8) to the stack pointer.<br><br>INC: increment. Unlike other arithmetic instructions,INC doesn’t modify CF flag.<br>DEC: decrement. Unlike other arithmetic instructions,DEC doesn’t modify CF flag.<br>SUB: subtract values. A frequently occurring pattern is SUB reg.<br>CMP: compare values and set flags, the same as SUB but without writing the result.","like_count":3},{"had_liked":false,"id":83566,"user_name":"Luciano李鑫","can_delete":false,"product_type":"c1","uid":1329995,"ip_address":"","ucode":"5FBE5F86FD5B2C","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/4b/97926cba.jpg","comment_is_top":false,"comment_ctime":1554652830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14439554718","product_id":100024701,"comment_content":"准时","like_count":3},{"had_liked":false,"id":165910,"user_name":"_stuView","can_delete":false,"product_type":"c1","uid":1244561,"ip_address":"","ucode":"C2D4AAB08515F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","comment_is_top":false,"comment_ctime":1577344016,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10167278608","product_id":100024701,"comment_content":"CS 和 DS 中的值是段的起始地址，左移 4 位，就是乘上 2 ^4=16<br>即：段地址&lt;&lt;4 + 偏移量 == 地址<br>这里有个疑问，如果段地址是 0000 0000 0000 0001，偏移量是 1000 0000 0000 0000，那么计算得到的地址是 0000 1000 0000 0001 0000，这个地址也可以解析成段地址为 0000 1000 0000 0000，偏移量为 0000 0000 0001 0000，虽然得到的地址是一样的，但解析是不同的，不知道会不会存在问题，这里先存疑","like_count":2,"discussions":[{"author":{"id":1099379,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/73/abb7bfe3.jpg","nickname":"疯琴","note":"","ucode":"82ACAA4A27753D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287599,"discussion_content":"我也不太明白，探讨一下，我理解相当于从0开始走5步和从2开始走3步，到达的位置一样。但是分好了每段2步的话，通常会从第3段开始走，也就是从4走1步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593488925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244561,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","nickname":"_stuView","note":"","ucode":"C2D4AAB08515F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102487,"discussion_content":"过了这么久，也不知道还会不会有人解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577349932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244561,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","nickname":"_stuView","note":"","ucode":"C2D4AAB08515F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102486,"discussion_content":"也就是说，有两种方式可以访问到同一块地址，这会带来安全问题的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577349914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144364,"user_name":"David.","can_delete":false,"product_type":"c1","uid":1703111,"ip_address":"","ucode":"72831A76F329F3","user_header":"https://static001.geekbang.org/account/avatar/00/19/fc/c7/c0daa0cf.jpg","comment_is_top":false,"comment_ctime":1571904092,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10161838684","product_id":100024701,"comment_content":"文中说到 “对于 8086CPU，最多只能访问 1M 的内存空间，还要分成多个段，每个段最多 64K。”<br><br>请问“分成多个段”应该怎么理解呢？一个进程是否可以存在多个代码段呢？<br><br>比如代码超过64k，会分成两个代码段吗？ 第一个64k，超出64k的在下一个代码段中。<br>还是，一个进程只能有一个代码段，而且代码必须小于64k呢？","like_count":2,"discussions":[{"author":{"id":1476675,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/43/31641bf0.jpg","nickname":"布朗老熊","note":"","ucode":"A8AF82550AFF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52101,"discussion_content":"分代码段，数据段，当时的代码量，应该超不过64KB，即使超过了，只能再开一个新的段了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573995420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108527,"user_name":"瓜瓜","can_delete":false,"product_type":"c1","uid":1108505,"ip_address":"","ucode":"F90A5135A9BB4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ea/19/14018371.jpg","comment_is_top":false,"comment_ctime":1561792652,"is_pvip":false,"replies":[{"id":"48823","content":"都放1，当然溢出了呀。真实的地址不是都是1的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567499665,"ip_address":"","comment_id":108527,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10151727244","product_id":100024701,"comment_content":"起始地址 *16+ 偏移量，也就是把 CS 和 DS 中的值左移 4 位，变成 20 位的，加上 16 位的偏移量，这样就可以得到最终 20 位的数据地址。<br>比如 1,11111,11111,11111,0000 + 1,11111,11111,11111，结果不就溢出了吗？？不是很懂，望解答","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456026,"discussion_content":"都放1，当然溢出了呀。真实的地址不是都是1的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567499665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120408,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/98/6567af28.jpg","nickname":"胡雪松","note":"","ucode":"958103BCC03C65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47826,"discussion_content":"真实地址估计就是个0-f的数吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573430570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85689,"user_name":"lookzy","can_delete":false,"product_type":"c1","uid":1476469,"ip_address":"","ucode":"46783C1EE9A117","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/75/03aa0ab6.jpg","comment_is_top":false,"comment_ctime":1555195287,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10145129879","product_id":100024701,"comment_content":"20位地址方式下，感觉一个地址会有两种表示啊。就是10010001可以是1001起始地址左移4位+1偏移地址，也可以是1000起始地址左移4位+10001的偏移？？？","like_count":2,"discussions":[{"author":{"id":1476675,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/43/31641bf0.jpg","nickname":"布朗老熊","note":"","ucode":"A8AF82550AFF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52092,"discussion_content":"从数据计算本身来讲可以这样拆。但是偏移地址寄存器是16位的，这里的10001如果是16进制的，换算成二进制就是20位的0001 0000 0000 0000 0001，已经超过了一个寄存器能容纳的范围。    20位的地址，如果段基地址是0x1001，偏移地址是0x0001，那么最终的寻址的物理地址应该是，0x10010+0x0001=0x10011。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573994484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84089,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1554780837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10144715429","product_id":100024701,"comment_content":"总结：X86架构是开放的架构，硬件环境基本上都是一样的，这样操作系统做适配很简单。计算机的工作模式，CPU 是大脑，类似于公司的程序员，通过系统总线和其他组件相连，内存通过内存总线和IO桥芯片相连，总线就是主板上密密麻麻的集成电路，内存就相当于办公室，IO总线上还有一些其他设备，具体CPU和内存的工作原理，CPU包括运算单元，数据单元，控制单元，运算单元只管计算，运算单元每次都通过系统总线去内存拿数据的话，会很慢，有了数据单元，数据单元包括CPU内部的缓存寄存器组，空间小，速度快，可以暂时存放中间结果，控制单元是个统一的控制中心，他能获得下一条指令，然后执行这条指令，这个指令会指导运算单元取出几条数据运算，然后放在数据单元的某个地方。每个项目都有执行计划书，就是程序，作为二进制文件存储在硬盘里面，里面是一条条的指令。进程运行，会分配独立的内存空间，都是隔离的，但是不连续，分代码段和内存段。<br><br>控制单元里面有个指令指针寄存器，存的是下一条指令的地址，一条指令执行完之后，根据这个指令，去获取新的指令。 指令寄存器存的是代码段的指令，代码段的指令分为操作指令和数据指令，操作指令交给运算单元，数据指令<br>交给数据单元，数据单元根据数据的地址（数据指令拿到），把数据读到数据寄存器里，运算单元开始做运算，产生的结果会暂存到数据单元的数据寄存器里，<br>最终会有指令把寄存器里面的数据写入到内存里。<br>进程切换，CPU里有2个寄存器，都是当前线程的寄存器，一个寄存器保存当前处理进程的代码段的起始地址，一个寄存器保存数据段的起始地址，<br>切换成进程B，寄存器里面的地址也会换成B的地址。<br>CPU和内存，来回传输数据，用的都是总线，分成地址总线和数据总线，地址总线是CPU根据地址去内存找数据，数据总线是把数据从内存拿回到CPU。","like_count":2},{"had_liked":false,"id":83962,"user_name":"咕咕咕","can_delete":false,"product_type":"c1","uid":1388479,"ip_address":"","ucode":"5D35932F7118EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/2f/bf/85b957fc.jpg","comment_is_top":false,"comment_ctime":1554740150,"is_pvip":false,"replies":[{"id":"30314","content":"es用处不大。超过就溢出了，地址就绕回来了，所以安排起始地址也是要想好","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554773624,"ip_address":"","comment_id":83962,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10144674742","product_id":100024701,"comment_content":"老师您好我有两个问题<br>1.es这个附加段数据寄存器有什么作用；<br>2.地址总线 = 16位段起始地址左移4位 + 16位偏移量 这样不会超过20位么？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446193,"discussion_content":"es用处不大。超过就溢出了，地址就绕回来了，所以安排起始地址也是要想好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554773624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83616,"user_name":"羽","can_delete":false,"product_type":"c1","uid":1258724,"ip_address":"","ucode":"27574A5685D557","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/e4/1ebe1c7e.jpg","comment_is_top":false,"comment_ctime":1554685656,"is_pvip":false,"replies":[{"id":"30249","content":"是的，操作系统和这个比较接近","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554688579,"ip_address":"","comment_id":83616,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10144620248","product_id":100024701,"comment_content":"看了第一遍有点懵，这不是机组原理吗？又看了一遍，是用机组原理来解释x86架构，感觉很详细了，回去和书的相关内容一起再研读几遍。","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446097,"discussion_content":"是的，操作系统和这个比较接近","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554688579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83603,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1554683891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10144618483","product_id":100024701,"comment_content":"哇，超哥这么一讲，温习了大二学的数字逻辑，想起当时设计模型机的痛苦，也发现当初学的知识是有用的。还有，超哥画的图太棒了","like_count":2},{"had_liked":false,"id":288227,"user_name":"胡小涵","can_delete":false,"product_type":"c1","uid":2004538,"ip_address":"","ucode":"2E750C65EC282C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/3a/e06f8367.jpg","comment_is_top":false,"comment_ctime":1618370669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913337965","product_id":100024701,"comment_content":"ES寄存器是干嘛的？这个好像没说。。。","like_count":1},{"had_liked":false,"id":276151,"user_name":"Dunbreak","can_delete":false,"product_type":"c1","uid":1155210,"ip_address":"","ucode":"A64010733754BF","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/8a/69f4023c.jpg","comment_is_top":false,"comment_ctime":1611815217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906782513","product_id":100024701,"comment_content":"好家伙，回顾了一遍《计算机组成原理》","like_count":1},{"had_liked":false,"id":248932,"user_name":"rocedu","can_delete":false,"product_type":"c1","uid":1013097,"ip_address":"","ucode":"E46E29CBBB94A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/69/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1600380881,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5895348177","product_id":100024701,"comment_content":"linux 汇编：深入理解程序设计https:&#47;&#47;book.douban.com&#47;subject&#47;25789594&#47;，汇编语言程序设计https:&#47;&#47;book.douban.com&#47;subject&#47;1446250&#47;","like_count":1},{"had_liked":false,"id":200601,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585623252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880590548","product_id":100024701,"comment_content":"把大一时候老师讲的计算机组成原理，和汇编串起来了，内存中有一个个运行的进程，进程中有若干个运行的程序，程序由代码段和数据段组成，而要加载在硬盘上的代码，就得找cpu的控制单元指令寄存器，而要加载数据就得用数据单元中的指令找数据，而数据需要运算，则需要运算单元，而cpu就是控制单元，运算单元，数据单元组成，从代码运行角度看，代码运行一直在cpu，内存，硬盘来回切换，从微观的角度看，cpu是如何调度把有限的资源加以利用的<br>","like_count":1},{"had_liked":false,"id":101608,"user_name":"杨陆伟","can_delete":false,"product_type":"c1","uid":1108457,"ip_address":"","ucode":"3BC968447406EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/e9/1f95e422.jpg","comment_is_top":false,"comment_ctime":1559882385,"is_pvip":true,"replies":[{"id":"37026","content":"多几个寄存器，切换的时候，切换寄存器就更多了。","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1560253260,"ip_address":"","comment_id":101608,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854849681","product_id":100024701,"comment_content":"为什么不多搞几个寄存器，减少进程切换？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453033,"discussion_content":"多几个寄存器，切换的时候，切换寄存器就更多了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560253260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100226,"user_name":"Geek_CCTV","can_delete":false,"product_type":"c1","uid":1563384,"ip_address":"","ucode":"9FCCECC5B6F735","user_header":"","comment_is_top":false,"comment_ctime":1559486542,"is_pvip":false,"replies":[{"id":"49205","content":"需要的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567603058,"ip_address":"","comment_id":100226,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854453838","product_id":100024701,"comment_content":"想问一下，Linux内核是c写的么？那看样子要熟悉一下c语言","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452463,"discussion_content":"需要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567603058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98366,"user_name":"L.","can_delete":false,"product_type":"c1","uid":1543396,"ip_address":"","ucode":"9803C2EDC799DC","user_header":"https://static001.geekbang.org/account/avatar/00/17/8c/e4/ad3e7c39.jpg","comment_is_top":false,"comment_ctime":1558968780,"is_pvip":false,"replies":[{"id":"35382","content":"赞，再复习一把","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1559100426,"ip_address":"","comment_id":98366,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5853936076","product_id":100024701,"comment_content":"看到cpu那张图的时候想起了考研的时候对着图手写指令，然而现在都忘了","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451661,"discussion_content":"赞，再复习一把","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559100426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91087,"user_name":"勤劳的小胖子-libo","can_delete":false,"product_type":"c1","uid":1158344,"ip_address":"","ucode":"5BB20CD5A56568","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/c8/4b1c0d40.jpg","comment_is_top":false,"comment_ctime":1556852134,"is_pvip":false,"replies":[{"id":"49491","content":"这个汇编里面会学到，是间接的方式取内存中的变量的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567675669,"ip_address":"","comment_id":91087,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851819430","product_id":100024701,"comment_content":"请教指针变址寄存器用来干什么的？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448797,"discussion_content":"这个汇编里面会学到，是间接的方式取内存中的变量的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567675669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89411,"user_name":"海军上校","can_delete":false,"product_type":"c1","uid":1104290,"ip_address":"","ucode":"7B0D9EC01A3F36","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/a2/afbc447c.jpg","comment_is_top":false,"comment_ctime":1556166306,"is_pvip":false,"replies":[{"id":"32016","content":"有啊","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1556194164,"ip_address":"","comment_id":89411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851133602","product_id":100024701,"comment_content":"控制单元里ES好像漏啦～","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448120,"discussion_content":"有啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556194164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84477,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1554869828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5849837124","product_id":100024701,"comment_content":"总线运行流程: https:&#47;&#47;www.quora.com&#47;What-is-the-function-of-an-address-bus-and-a-data-bus-in-a-microprocessor-8085. 根据老师的图, 地址总线 20 位地址应该是, 直接在控制单元取两部分的地址直接计算得出.","like_count":1},{"had_liked":false,"id":84314,"user_name":"Jian","can_delete":false,"product_type":"c1","uid":1107305,"ip_address":"","ucode":"17ED4919F22DEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/69/719ec5d0.jpg","comment_is_top":false,"comment_ctime":1554825550,"is_pvip":false,"replies":[{"id":"49763","content":"赞","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567700280,"ip_address":"","comment_id":84314,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5849792846","product_id":100024701,"comment_content":"虽然不是计算机科班出身，但大学时学的微机原理这个时候终于能用上了，这一讲相当于复习了","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446313,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567700280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84216,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1554805850,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5849773146","product_id":100024701,"comment_content":"数据传输 move<br>流程控制<br>   函数调用<br>   call， ret<br>   跳转<br>   jmp<br>   比较<br>   cmp<br>数学卝运算<br>sub&#47;inc&#47;dec&#47;add，<br>逻辑处理<br>or&#47;xor<br>移动旋转<br>shl&#47;shr<br>栈操作<br>push&#47; pop<br>X86中断<br>int<br>语法上 Intel 与AT&amp;T 存在一些差异<br>","like_count":1},{"had_liked":false,"id":83930,"user_name":"devna","can_delete":false,"product_type":"c1","uid":1014408,"ip_address":"","ucode":"A175FE9B73D773","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/88/b787338a.jpg","comment_is_top":false,"comment_ctime":1554734739,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5849702035","product_id":100024701,"comment_content":"老师，关于总线，有点疑惑：<br>1. 地址总线和数据总线是逻辑上的概念吗？8086总线位宽是16位，就是说地址和数据一次只能传输一个吗？不能同时传输？<br>2. 8086地址是通过起始地址和偏移量计算出来的，就是要在总线上传输两次（起始地址一次，偏移地址一次），才能算出最终地址，是不？<br><br>问题可能比较小白，希望老师帮忙解惑，谢谢！","like_count":1,"discussions":[{"author":{"id":1476675,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/43/31641bf0.jpg","nickname":"布朗老熊","note":"","ucode":"A8AF82550AFF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52093,"discussion_content":"根据中间的8086cpu结构框图，地址和数据是分开传输的。地址总线是20位的，地址是基地址加上偏移地址之后传输的；数据总线是16位的，数据16位是直接传输的。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573994740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83750,"user_name":"看不懂的你","can_delete":false,"product_type":"c1","uid":1131725,"ip_address":"","ucode":"02BBD9928060F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/cd/04f3a16c.jpg","comment_is_top":false,"comment_ctime":1554710108,"is_pvip":false,"replies":[{"id":"49857","content":"是的，c语言要会一些","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567764296,"ip_address":"","comment_id":83750,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5849677404","product_id":100024701,"comment_content":"非计算机专业看的有点蒙，果然还是需要一定的基础么","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446133,"discussion_content":"是的，c语言要会一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567764296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350658,"user_name":"常振华","can_delete":false,"product_type":"c1","uid":2062252,"ip_address":"","ucode":"D61B40E1CCEFD5","user_header":"","comment_is_top":false,"comment_ctime":1657076670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657076670","product_id":100024701,"comment_content":"把 CS 和 DS 中的值左移 4 位，变成 20 位的，加上 16 位的偏移量，这样就可以得到最终 20 位的数据地址。<br>当偏移量超过4位的时候，和移位过的CS&#47;DS地址不就冲突了？","like_count":0},{"had_liked":false,"id":350564,"user_name":"琴女你又空大啦","can_delete":false,"product_type":"c1","uid":3033693,"ip_address":"","ucode":"70E95AECC551D3","user_header":"https://static001.geekbang.org/account/avatar/00/2e/4a/5d/792021d2.jpg","comment_is_top":false,"comment_ctime":1657005830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657005830","product_id":100024701,"comment_content":"我问个问题，那CS里面存放的段得起始地址，是虚拟机内存的地址还是物理内存的地址呢","like_count":0},{"had_liked":false,"id":344579,"user_name":"wx_","can_delete":false,"product_type":"c1","uid":2990186,"ip_address":"","ucode":"BE5EEF602901C4","user_header":"https://static001.geekbang.org/account/avatar/00/2d/a0/6a/c377ba56.jpg","comment_is_top":false,"comment_ctime":1651654650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651654650","product_id":100024701,"comment_content":"有对比才有效果，看过其他讲实模式和保护模式，完全就是照本宣科，太难懂了，还是老师你厉害，易懂很多，至少对于他们有个初步概念了。","like_count":0},{"had_liked":false,"id":342595,"user_name":"Geek_783504","can_delete":false,"product_type":"c1","uid":2743789,"ip_address":"","ucode":"549D3F0549743C","user_header":"https://static001.geekbang.org/account/avatar/00/29/dd/ed/f6c5432b.jpg","comment_is_top":false,"comment_ctime":1650359361,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650359361","product_id":100024701,"comment_content":"mov：传送，将source赋值给target<br>call和ret：call调用子程序，子程序以ret结尾<br>jmp：无条件转移<br>int：中断指令<br>add：加法<br>or：或运算<br>xor：异或运算，不同为1，相同为0<br>shl：逻辑左移<br>shr：逻辑右移<br>push：入栈<br>pop：出栈<br>inc：+1<br>dec：-1<br>sub：减法<br>cmp：减法比较，修改标志位","like_count":0},{"had_liked":false,"id":339603,"user_name":"王睿","can_delete":false,"product_type":"c1","uid":2867913,"ip_address":"","ucode":"9E4C1D6C247356","user_header":"","comment_is_top":false,"comment_ctime":1648217976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648217976","product_id":100024701,"comment_content":"看完这节课，让我瞬间想起了大学的专业选修课微机原理，好多基础","like_count":0},{"had_liked":false,"id":326823,"user_name":"Geek_cb32fb","can_delete":false,"product_type":"c1","uid":2720637,"ip_address":"","ucode":"BDB1BCA86E04B9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/TPytCiaEtAiaEEYbpHGuZbhvQHkxbxaaCEDbmW7QEibniaAcX6FpkO4YzG0wic0tW5riciciaZJxx9vRFUk9Wr1dyCEvXg/132","comment_is_top":false,"comment_ctime":1639710733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639710733","product_id":100024701,"comment_content":"老师，5纳米芯片与28纳米芯片，CPU算力怎么体现出来的？有什么因果关系？","like_count":0},{"had_liked":false,"id":322563,"user_name":"Penn","can_delete":false,"product_type":"c1","uid":1107879,"ip_address":"","ucode":"2D73D9C2AED26F","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/a7/9825371e.jpg","comment_is_top":false,"comment_ctime":1637483237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637483237","product_id":100024701,"comment_content":"工作四年的非科班学生，第一遍看得一脸懵，多啃几遍才行。","like_count":0},{"had_liked":false,"id":321080,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1636650704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636650704","product_id":100024701,"comment_content":"学习这篇文章没有搞明白，停下来梳理一下，多用脑瓜思考。<br>学习的目标是掌握知识，不是看完一个专栏。","like_count":0},{"had_liked":false,"id":320979,"user_name":"达叔灬","can_delete":false,"product_type":"c1","uid":2404887,"ip_address":"","ucode":"5CCBAF13548F02","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/17/3161b49c.jpg","comment_is_top":false,"comment_ctime":1636608502,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1636608502","product_id":100024701,"comment_content":"2^16=64k 怎么算的？<br>2^16 单位不是位(bit)吗？转换成 kb 不是应该 2^16 &#47; 8 &#47; 1024 = 8kb吗？ 菜鸡挠头","like_count":0,"discussions":[{"author":{"id":1661181,"avatar":"https://static001.geekbang.org/account/avatar/00/19/58/fd/bd58dfe2.jpg","nickname":"BBG","note":"","ucode":"B75E0B7BEEF7B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539478,"discussion_content":"应该根带宽是一个算法，使用bit，不是byte","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639727167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318487,"user_name":"黄思航","can_delete":false,"product_type":"c1","uid":2438567,"ip_address":"","ucode":"2391A171C008CD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5aM3A2uOeFIESWicU9GfJffHhic92PvkPdtvveHvFfsOOPVczd4FW8Xhkh2qPuribzzmKc7vYtZIxHKuibiclLe95gA/132","comment_is_top":false,"comment_ctime":1635312589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635312589","product_id":100024701,"comment_content":"“起始地址 *16+ 偏移量”，也就是把 CS 和 DS 中的值左移 4 位，变成 20 位的，加上 16 位的偏移量，这样就可以得到最终 20 位的数据地址。<br><br>起始地址为什么需要左移4位呢？难道不是“起始地址 + 偏移量  = 真正的地址”吗？<br>好比起始地址为100，偏移量为5，那么真正的地址是105；如果把100左移4位，计算出来的结果就不是105了。","like_count":0},{"had_liked":false,"id":314872,"user_name":"凌波微步","can_delete":false,"product_type":"c1","uid":2726987,"ip_address":"","ucode":"F3E709D5F1826D","user_header":"https://static001.geekbang.org/account/avatar/00/29/9c/4b/c48f7f2c.jpg","comment_is_top":false,"comment_ctime":1633521842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633521842","product_id":100024701,"comment_content":"段寄存器中不再存放段基地址，而是具体段描述符的索引，访问一个内存地址时，段寄存器中的索引首先会结合 GDTR 寄存器找到内存中的段描述符，再根据其中的段信息判断能不能访问成功。","like_count":0},{"had_liked":false,"id":313593,"user_name":"夏晨","can_delete":false,"product_type":"c1","uid":2759881,"ip_address":"","ucode":"835AB8ED39D048","user_header":"https://static001.geekbang.org/account/avatar/00/2a/1c/c9/8f571382.jpg","comment_is_top":false,"comment_ctime":1632541438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632541438","product_id":100024701,"comment_content":"实模式是否意味着全内存可寻址使用，保护模式则是内存空间有了权限划分，程序不能访问某些空间了？","like_count":0},{"had_liked":false,"id":312458,"user_name":"luo","can_delete":false,"product_type":"c1","uid":1716827,"ip_address":"","ucode":"1A1DA8EB916ECF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/32/5b/d0c7e813.jpg","comment_is_top":false,"comment_ctime":1631807456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631807456","product_id":100024701,"comment_content":"这一篇是硬干货，建议啃多几遍，懂了再往下走，否则后面会不好理解。","like_count":0},{"had_liked":false,"id":312283,"user_name":"杏林之虎","can_delete":false,"product_type":"c1","uid":1926338,"ip_address":"","ucode":"C0EA8B698390E7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/64/c2/12308f04.jpg","comment_is_top":false,"comment_ctime":1631715851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631715851","product_id":100024701,"comment_content":"arm架构，更x86架构区别大嘛？课程内容适用嘛？","like_count":0},{"had_liked":false,"id":307361,"user_name":"兔嘟嘟","can_delete":false,"product_type":"c1","uid":2028811,"ip_address":"","ucode":"5A9042B4C7670C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","comment_is_top":false,"comment_ctime":1629042192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629042192","product_id":100024701,"comment_content":"r：register，m：memory，c：Constant，a、b分别是第一二个操作数，括号内代表操作数支持的类型。<br><br>- `mov a(rm) b(rmc)`：把b的数据复制到a上。<br><br>- `push a(rmc)`：将a压入内存栈，在x86中，栈自高位向低位增长。<br><br>- `pop a(rm)`：将栈顶出栈，放到a中  <br><br>- `add a(rm) b(rmc)`：将b加到a上<br><br>- `sub a(rm) b(rmc)`：将a减去b  <br><br>- `inc&#47;dec a(rm)`：将a加&#47;减1<br><br>- `and&#47;or&#47;xor a(rm) b(rmc)`：将a与b做与&#47;或&#47;亦或运算，结果保存在a中。  <br><br>- `shl&#47;shr  a(rm) b(rc)`：逻辑左&#47;右移，对于b来说，register只能是cl。<br><br>- `jmp label`：将程序控制流跳转到标签指代的内存地址  <br><br>- `cmp a(rm) b(rmc)`：等同于减法，进行大小比较，用结果设置标志寄存器。<br><br>- `call label`：子程序调用，call指令会将当前代码位置压入栈中（push），然后执行无条件跳转（jmp），跳转到标签指代的内存地址。<br><br>- `int`：是CALL指令的一种特殊形式，call指令调用的子程序是用户程序的一部分，而INT指令调用的是操作系统提供的子程序或者其他特殊的子程序。<br><br>- `ret`从子程序中返回，执行pop指令获得地址，然后进行jmp。","like_count":0},{"had_liked":false,"id":294650,"user_name":"安德森先生","can_delete":false,"product_type":"c1","uid":2564411,"ip_address":"","ucode":"482BAF82DB7390","user_header":"https://static001.geekbang.org/account/avatar/00/27/21/3b/e3edea37.jpg","comment_is_top":false,"comment_ctime":1622032686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622032686","product_id":100024701,"comment_content":"虽然读的有点艰难，但还是反复看学到了不少","like_count":0},{"had_liked":false,"id":291621,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1620390040,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620390040","product_id":100024701,"comment_content":"这一章节，看几遍都是懵懵的～","like_count":0},{"had_liked":false,"id":291364,"user_name":"吃饭","can_delete":false,"product_type":"c1","uid":1692756,"ip_address":"","ucode":"AF0D7165D5F049","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/54/7263deb2.jpg","comment_is_top":false,"comment_ctime":1620229321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620229321","product_id":100024701,"comment_content":"栈寄存器不是就16位吗，怎么表达栈的数据结构的？","like_count":0},{"had_liked":false,"id":289986,"user_name":"喜剧。","can_delete":false,"product_type":"c1","uid":1042681,"ip_address":"","ucode":"5F9CF567792B8A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/f9/4412b473.jpg","comment_is_top":false,"comment_ctime":1619310892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619310892","product_id":100024701,"comment_content":"计算机的快速发展过程中，为了保持其开发，统一，兼容，尤其是兼容，在数据总线上做了一些大的变化，反而成为后面的一种标准。我们说的操作系统多少位，应该指的也是地址总线多少位吧。","like_count":0},{"had_liked":false,"id":289745,"user_name":"Geek_eee73e","can_delete":false,"product_type":"c1","uid":2579512,"ip_address":"","ucode":"AE84DC572E1A9F","user_header":"","comment_is_top":false,"comment_ctime":1619162193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619162193","product_id":100024701,"comment_content":"1、本节知识点梳理<br>cpu：运算单元（做加法做位移等但是不知道需要运算哪些数据，结果需要放到哪里）<br>数据单元（cpu的缓存和寄存器，速度飞速暂时存放中间运算数据）<br>控制单元（统一的指挥中心，获取下一条指令；指导运算中心取数据单元的哪几个数据，计算出结果，放到数据单元的哪个位置）<br>内存：单靠cpu是无法完成运算的，复杂的任务需要将中间结果保存下来，cpu无法本身没有办法保存这么多中间结果，就需要内存来支撑<br><br>CPU内部构造，工作原理<br>控制单元：<br>切换进程时，使用到**段寄存器**<br>cs（code segment register）：当前进程代码段在内存中的起始地址<br>ds（data segment register）：当前进程数据段在内存中的起始地址<br>ss（stack register）<br>es<br>ip（instruction pointer register）：指向下条指令在内存中的地址<br>运算中需要加载数据：<br>根据当前段数据寄存器，取出段数据的起始位置，offset（偏移量）从通用寄存器中取出，起始位置+偏移量得到具体地址，从内存中取出数据<br><br>数据单元：<br>通用寄存器：保存当前进程数据段的偏移量<br>指令变址寄存器：<br><br>运算单元：<br><br>2、CPU基本工作原理<br><br>段描述符+（ip寄存器地址或者普通寄存器地址）是，当前指令或者数据的真实地址<br><br><br>","like_count":0},{"had_liked":false,"id":289744,"user_name":"Geek_eee73e","can_delete":false,"product_type":"c1","uid":2579512,"ip_address":"","ucode":"AE84DC572E1A9F","user_header":"","comment_is_top":false,"comment_ctime":1619162172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619162172","product_id":100024701,"comment_content":"学习学习","like_count":0},{"had_liked":false,"id":288812,"user_name":"王骞","can_delete":false,"product_type":"c1","uid":1407983,"ip_address":"","ucode":"E5A88F3BA2634E","user_header":"https://static001.geekbang.org/account/avatar/00/15/7b/ef/ae5458c7.jpg","comment_is_top":false,"comment_ctime":1618712911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618712911","product_id":100024701,"comment_content":"一直有一个疑惑：为什么16位系统的地址总线设计为20位呢？感觉这个设计跟突兀，仅是为了增大一点地址总线吗？","like_count":0},{"had_liked":false,"id":287877,"user_name":"烤鹅看看p","can_delete":false,"product_type":"c1","uid":1956938,"ip_address":"","ucode":"A3300F3722CAF3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/dc/4a/ad4d630b.jpg","comment_is_top":false,"comment_ctime":1618204753,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618204753","product_id":100024701,"comment_content":"一趣谈更抽象了  又是办公室又是科技园的  把抽象的东西趣谈我不觉得是个好方式","like_count":0},{"had_liked":false,"id":283596,"user_name":"GivenCui","can_delete":false,"product_type":"c1","uid":1216617,"ip_address":"","ucode":"C075A3876942CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/69/76f68596.jpg","comment_is_top":false,"comment_ctime":1615853207,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615853207","product_id":100024701,"comment_content":"1. 有人比喻寄存器是 CPU 的零级缓存, 存取数据速度最快<br>2. 寄存器不依靠地址而是名字区分数据<br>3. 现在寄存器很多, 是通用寄存器, x86时寄存器只有8个, 而且每个有不同的用途<br>4. esp是栈顶指针<br>----<br>call   f      &#47;&#47; 调用函数f, 并建立新的帧<br>push a     &#47;&#47; a入栈  ( 栈从高位向低位发展 , 如int类型 esp地址 - 4 再写回esp)<br>mov  %eax, [%esp+8]    &#47;&#47; esp偏移8地址取出的数据存入 eax寄存器<br>add   %eax, %ebx   &#47;&#47; 两个数据相加后, 存入 eax寄存器<br>pop %ebx      &#47;&#47; 出栈数据写入 ebx<br>ret   &#47;&#47; 终止当前函数执行","like_count":0},{"had_liked":false,"id":281034,"user_name":"Geek_400592","can_delete":false,"product_type":"c1","uid":2440687,"ip_address":"","ucode":"FA87D436C663EA","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhJwzHXwWwxWXUtL6gpnNrCu2El7h2EgETZpNK1VHU4iaQpa3jLVDNFE7kawwdCV6VVD6wl7tzKyau5y2DDmuyIYx/132","comment_is_top":false,"comment_ctime":1614557881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614557881","product_id":100024701,"comment_content":"老师文中讲有两个寄存器用于保存进程A，进程B的代码段起始地址和数据段起始地址。<br><br>当进程A切换成B的时候<br>为什么不是保存进程A当时执行的那个代码段起始地址，是不是有别的寄存器或者存储器进行存储这个进程A当前执行到哪条指令的？","like_count":0},{"had_liked":false,"id":281032,"user_name":"Geek_400592","can_delete":false,"product_type":"c1","uid":2440687,"ip_address":"","ucode":"FA87D436C663EA","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhJwzHXwWwxWXUtL6gpnNrCu2El7h2EgETZpNK1VHU4iaQpa3jLVDNFE7kawwdCV6VVD6wl7tzKyau5y2DDmuyIYx/132","comment_is_top":false,"comment_ctime":1614556637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614556637","product_id":100024701,"comment_content":"指令指针寄存器相当于PC寄存器，存储下一条指令地址。指令寄存器存储当前执行的指令。关于指令的操作码和地址码老师后面有讲到吗？","like_count":0},{"had_liked":false,"id":278426,"user_name":"大土豆","can_delete":false,"product_type":"c1","uid":1121636,"ip_address":"","ucode":"67445DC3EC9DB0","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/64/52a5863b.jpg","comment_is_top":false,"comment_ctime":1612939403,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612939403","product_id":100024701,"comment_content":"老师，错了，ELF里面怎么会是一行行的指令。。。。ELF指令段内存储的是汇编指令对应的机器码，可不是用\\r\\n来分割不同指令的，应该说是一段段的机器指令比较合适些","like_count":0},{"had_liked":false,"id":265258,"user_name":"robonix","can_delete":false,"product_type":"c1","uid":1212323,"ip_address":"","ucode":"866EC82EDA455B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7f/a3/23540579.jpg","comment_is_top":false,"comment_ctime":1606833031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606833031","product_id":100024701,"comment_content":"老师，8086的16位寄存器怎么发出去20位的地址数据呢？左移四位的话 高四位不是丢失了吗","like_count":0},{"had_liked":false,"id":254464,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1603118703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603118703","product_id":100024701,"comment_content":"20位寻址的话，会存在几个不同的（段地址+偏移量），结果为同一个地址吧，还是说段地址的粒度是64K所以不会存在上面那种情况","like_count":0},{"had_liked":false,"id":252985,"user_name":"Ethan","can_delete":false,"product_type":"c1","uid":1810189,"ip_address":"","ucode":"75F613D58909DB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ZHw73tgCqGKhvticUWGRz4icgicu4hFWfKtacoFJeItH7maNuNUmjnEgDTJvOibwUWgGV0p6guNPibMVWDV4BUmEmlA/132","comment_is_top":false,"comment_ctime":1602554705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602554705","product_id":100024701,"comment_content":"老师你好：“这时候问题来了，CS 和 DS 都是 16 位的，也就是说，起始地址都是 16 位的，IP 寄存器和通用寄存器都是 16 位的，偏移量也是 16 位的，但是 8086 的地址总线地址是 20 位。怎么凑够这 20 位呢？方法就是“起始地址 *16+ 偏移量”，也就是把 CS 和 DS 中的值左移 4 位，变成 20 位的，加上 16 位的偏移量，这样就可以得到最终 20 位的数据地址。”这段讲解中，8086的总线位宽是16位的，即使凑够了20位，总线位宽也能支持吗？","like_count":0},{"had_liked":false,"id":246798,"user_name":"我是谁","can_delete":false,"product_type":"c1","uid":1131907,"ip_address":"","ucode":"AE3996142811F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/83/93d389ba.jpg","comment_is_top":false,"comment_ctime":1599479695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599479695","product_id":100024701,"comment_content":"前前后后读了三遍，终于理解一些啦","like_count":0},{"had_liked":false,"id":240638,"user_name":"Geek_b52974","can_delete":false,"product_type":"c1","uid":1298252,"ip_address":"","ucode":"59884399646620","user_header":"","comment_is_top":false,"comment_ctime":1597024990,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597024990","product_id":100024701,"comment_content":"「方法就是“起始地址 *16+ 偏移量”，也就是把 CS 和 DS 中的值左移 4 位，变成 20 位的，加上 16 位的偏移量，这样就可以得到最终 20 位的数据地址。」<br>這樣不是會有重疊的地址嗎？","like_count":0},{"had_liked":false,"id":234450,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1594694387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594694387","product_id":100024701,"comment_content":"早上地铁上看了一遍，后面有点懵逼。<br>然后白天有前后贯穿着看了一遍，主要为疑点寻找线索。<br>一共花了2个小时多马马虎虎搞懂了这篇！<br>在这立下个flag，每篇文档起码俩小时消化，坚持！<br>----------------------------------------<br>条条道路通罗马，只要心中有罗马！","like_count":0},{"had_liked":false,"id":231776,"user_name":"Mångata","can_delete":false,"product_type":"c1","uid":2046424,"ip_address":"","ucode":"18F1CA45F4A646","user_header":"https://static001.geekbang.org/account/avatar/00/1f/39/d8/9727b45c.jpg","comment_is_top":false,"comment_ctime":1593767682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593767682","product_id":100024701,"comment_content":"老师，实模式下的每个程序能够拥有几个段呢？如果只有一个的话，那是不是就是说这个程序在进程中只能占64kb空间，并且程序的堆空间和栈空间都在这64kb里呢？","like_count":0},{"had_liked":false,"id":231774,"user_name":"Mångata","can_delete":false,"product_type":"c1","uid":2046424,"ip_address":"","ucode":"18F1CA45F4A646","user_header":"https://static001.geekbang.org/account/avatar/00/1f/39/d8/9727b45c.jpg","comment_is_top":false,"comment_ctime":1593767558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593767558","product_id":100024701,"comment_content":"老师，实模式最多只能有16个段吗，我是这么想的，段寄存器偏移4位，每个段空间64kb，那么最多也就16个段了，这样计算对吗？","like_count":0},{"had_liked":false,"id":223356,"user_name":"Geek_84971a","can_delete":false,"product_type":"c1","uid":1744776,"ip_address":"","ucode":"5F79D841FE6F61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIiao0orF0gDeDCwnAEicrCgY6NickyOJ8ialw0GiavInZL0DMctRYlZicj4bLMNTtBmFtH4eIiaVfr8DPVw/132","comment_is_top":false,"comment_ctime":1591070715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591070715","product_id":100024701,"comment_content":"干货满满！","like_count":0},{"had_liked":false,"id":216952,"user_name":"注意力$","can_delete":false,"product_type":"c1","uid":1142316,"ip_address":"","ucode":"7FB3399A1EAB72","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","comment_is_top":false,"comment_ctime":1589375213,"is_pvip":false,"replies":[{"id":"83470","content":"计算机组成","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1592186424,"ip_address":"","comment_id":216952,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1589375213","product_id":100024701,"comment_content":"超哥好，请问  8 个 16 位，后面的32位 这个是怎么理解，是关于什么的基础知识啊","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494992,"discussion_content":"计算机组成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592186424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142316,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","nickname":"注意力$","note":"","ucode":"7FB3399A1EAB72","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274103,"discussion_content":"那位帮忙解答下？谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590542212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216375,"user_name":"LiYanbin","can_delete":false,"product_type":"c1","uid":1129976,"ip_address":"","ucode":"2F50493F818909","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/f8/b13674e6.jpg","comment_is_top":false,"comment_ctime":1589248620,"is_pvip":false,"replies":[{"id":"83472","content":"如果能够枚举一共几种类型，就可以if else，但是如果没标准，谁知道if else哪些呢","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1592186644,"ip_address":"","comment_id":216375,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589248620","product_id":100024701,"comment_content":"那 CPU 中总线的位数有没有个标准呢？如果没有标准，那操作系统作为软件就很难办了，因为软件层没办法实现通用的运算逻辑。<br>这个怎么理解呢？软件层 不能加个类似if 的判断吗？还是因为不同CPU架构有不同的CPU指令集？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494793,"discussion_content":"如果能够枚举一共几种类型，就可以if else，但是如果没标准，谁知道if else哪些呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592186644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199237,"user_name":"IT橘子","can_delete":false,"product_type":"c1","uid":1066932,"ip_address":"","ucode":"1DBEE96BAF8B0B","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/b4/e8b3f53f.jpg","comment_is_top":false,"comment_ctime":1585483872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585483872","product_id":100024701,"comment_content":"汇编语言忘得差不多了。。。","like_count":0},{"had_liked":false,"id":194278,"user_name":"等待⒈嗰﹌晴天","can_delete":false,"product_type":"c1","uid":1888132,"ip_address":"","ucode":"BCE5E620210B84","user_header":"https://static001.geekbang.org/account/avatar/00/1c/cf/84/88a54107.jpg","comment_is_top":false,"comment_ctime":1585044945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585044945","product_id":100024701,"comment_content":"16位全1的时候，左移4位+偏移量，仍然会溢出么？","like_count":0},{"had_liked":false,"id":193121,"user_name":"honnkyou","can_delete":false,"product_type":"c1","uid":1026608,"ip_address":"","ucode":"FD5EC4120EE803","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/30/acc91f01.jpg","comment_is_top":false,"comment_ctime":1584884138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584884138","product_id":100024701,"comment_content":"ES寄存器是干什么的呢？","like_count":0},{"had_liked":false,"id":192894,"user_name":"你曾是少年","can_delete":false,"product_type":"c1","uid":1326701,"ip_address":"","ucode":"83BBA0754EA1C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/3e/6d/323995f4.jpg","comment_is_top":false,"comment_ctime":1584877809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584877809","product_id":100024701,"comment_content":"好评","like_count":0},{"had_liked":false,"id":191592,"user_name":"胡化敏","can_delete":false,"product_type":"c1","uid":1717937,"ip_address":"","ucode":"D6574E9AAFC294","user_header":"","comment_is_top":false,"comment_ctime":1584783628,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1584783628","product_id":100024701,"comment_content":"看2遍了","like_count":0,"discussions":[{"author":{"id":1717937,"avatar":"","nickname":"胡化敏","note":"","ucode":"D6574E9AAFC294","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243149,"discussion_content":"看真多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587524846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266698,"avatar":"https://static001.geekbang.org/account/avatar/00/13/54/0a/9a002ad5.jpg","nickname":"Adam Lau","note":"","ucode":"7E542D6E789500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242840,"discussion_content":"我看5遍了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587485410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190133,"user_name":"焰火","can_delete":false,"product_type":"c1","uid":1244606,"ip_address":"","ucode":"D3353B386DE3B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/be/079c78c7.jpg","comment_is_top":false,"comment_ctime":1584605788,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584605788","product_id":100024701,"comment_content":"nice，终于和ELF的段表以及描述符结构数组的作用联系起来了，初步了解了32位的段选择子寄存器的工作模式，谢谢~~","like_count":0},{"had_liked":false,"id":190008,"user_name":"迟强","can_delete":false,"product_type":"c1","uid":1809239,"ip_address":"","ucode":"423405DD9E420E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/9b/57/9b58b541.jpg","comment_is_top":false,"comment_ctime":1584591975,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584591975","product_id":100024701,"comment_content":"复习计算机组成原理ing","like_count":0},{"had_liked":false,"id":179021,"user_name":"永远的草莓地","can_delete":false,"product_type":"c1","uid":1034001,"ip_address":"","ucode":"D4BD8DD42350CC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/11/89ba9915.jpg","comment_is_top":false,"comment_ctime":1581875080,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581875080","product_id":100024701,"comment_content":"老师具体是哪本《计算机组成与系统结构》？希望老师可以可以推一些书，或者干脆出一个针对非科班出身的程序员一些，计算机组成的课，给像我等非科班的同学指条明路😀","like_count":0},{"had_liked":false,"id":176356,"user_name":"hinzer","can_delete":false,"product_type":"c1","uid":1708157,"ip_address":"","ucode":"021A687DF49F02","user_header":"https://static001.geekbang.org/account/avatar/00/1a/10/7d/e2e9d222.jpg","comment_is_top":false,"comment_ctime":1581041736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581041736","product_id":100024701,"comment_content":"斗胆问老师一个问题，一个进程的栈空间是在进程的数据段分配的，还是操作系统在物理内存中单独分配的一块空间呢？","like_count":0},{"had_liked":false,"id":175607,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1580780554,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580780554","product_id":100024701,"comment_content":"day6打卡，请问老师，也就是说IP寄存器有两个作用?1.在执行指令前，存储下一条指令的地址2.在生成地址之前，和CS一起计算出20位要访问的地址<br><br>总结，总线位数的兼容性问题引入了x86架构，经典的CPU,Memeory图片展示了交互过程，这个过程可以处理:取出数据，指令。执行指令去操作数据","like_count":0},{"had_liked":false,"id":170787,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1578717104,"is_pvip":false,"replies":[{"id":"66267","content":"是的，更细的可以看《计算机组成与系统结构》，学习操作系统，对于CPU和内存的结构，以及寄存器，有个概念","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1578823274,"ip_address":"","comment_id":170787,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578717104","product_id":100024701,"comment_content":"能看懂个大概，内存和cpu交互哪儿，细节有点儿跟不上，只知道个大概流程。<br>感觉是时候再去看看 计算机组成与系统结构 了","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481112,"discussion_content":"是的，更细的可以看《计算机组成与系统结构》，学习操作系统，对于CPU和内存的结构，以及寄存器，有个概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578823274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161164,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1576134909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576134909","product_id":100024701,"comment_content":"CPU的运算改变状态，其他寄存器内存都是扩散CPU的运算结果。","like_count":0},{"had_liked":false,"id":160916,"user_name":"鹅鹅鹅","can_delete":false,"product_type":"c1","uid":1348721,"ip_address":"","ucode":"C6372567C83738","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/71/e8ec9843.jpg","comment_is_top":false,"comment_ctime":1576060097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576060097","product_id":100024701,"comment_content":"偏移量设置为16位是不是有两种考虑？(理论上来说，20位可以拆成一个16位和一个4位)一是8086的总线和寄存器是16位，这样效率比较高，二是单个段的最大容量可以达到64k，相比偏移量设置为4位，可以避免一个程序被多个段拆分。","like_count":0},{"had_liked":false,"id":158138,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1575337188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575337188","product_id":100024701,"comment_content":"CPU和内存的工作模式：<br>CPU中分为控制单元、数据单元、运算单元。<br>控制单元通过指令寄存器、程序计数器等部分组件，将加载到内存中的程序运行为进程，并根据其中的指令，加载数据到数据单元，指导运算单元从数据单元中获取数据，并进行运算后放回数据单元。<br><br>8086中的寄存器：<br>指令指针寄存器、代码段寄存器、数据段寄存器、栈寄存器<br>通用寄存器（存放偏移量等）<br><br>实模式和保护模式的区别：<br>其实是对段起始地址的直接寻址变成了间接寻址，而两者的差别可以从这两种寻址方式的区别来谈，比如直接寻址访问速度更快，而间接寻址能扩大可访问空间，拓展性更高<br>","like_count":0},{"had_liked":false,"id":149211,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1573175416,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573175416","product_id":100024701,"comment_content":"知道为什么32位操作系统最大只能4G内存了。","like_count":0,"discussions":[{"author":{"id":1476675,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/43/31641bf0.jpg","nickname":"布朗老熊","note":"","ucode":"A8AF82550AFF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52094,"discussion_content":"2^32=4GByte","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573994839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147890,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1572917390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917390","product_id":100024701,"comment_content":"这样每次都要左移四位，也就意味着段的起始地址不能是任何一个地方，只是能整除 16 的地方。<br><br>其因为为了兼容以前的 16 位，所以要左移4 位嘛……","like_count":0},{"had_liked":false,"id":147866,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1572915034,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1572915034","product_id":100024701,"comment_content":"对于 8086CPU，最多只能访问 1M 的内存空间，还要分成多个段，每个段最多 64K。尽管我们现在看来这不可想象的小，根本没法儿用，但是在当时其实够用了。<br><br>这个 1M 为什么是内存空间呢？<br><br>他不是地址嘛？<br><br>段的 64 k 不也是段寄存器中的基因吗？<br><br><br>我不太理解","like_count":0,"discussions":[{"author":{"id":1476675,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/43/31641bf0.jpg","nickname":"布朗老熊","note":"","ucode":"A8AF82550AFF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52100,"discussion_content":"访存访的就是内存，地址就有20位，2^20=1MB=1024*1024Byte。将1M切分成64K大小的段（64KByte是因为偏移地址的位数是16，2^16=64Kbyte），也就是能切16个段。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573995194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1476675,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/43/31641bf0.jpg","nickname":"布朗老熊","note":"","ucode":"A8AF82550AFF9C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52992,"discussion_content":"你的意思是地址就是内存？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574121716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52100,"ip_address":""},"score":52992,"extra":""}]}]},{"had_liked":false,"id":139547,"user_name":"Geek_933e5f","can_delete":false,"product_type":"c1","uid":1692293,"ip_address":"","ucode":"B83287B3C5AF3C","user_header":"https://static001.geekbang.org/account/avatar/00/19/d2/85/0a5bc2c4.jpg","comment_is_top":false,"comment_ctime":1570676964,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1570676964","product_id":100024701,"comment_content":"老师，8086的CD和DS不是固定成16位了吗？通过左移4位将CS和DS扩充到20位，这个过程不会有溢出吗？","like_count":0},{"had_liked":false,"id":132008,"user_name":"tj.•","can_delete":false,"product_type":"c1","uid":1470635,"ip_address":"","ucode":"078D80A68491E8","user_header":"https://static001.geekbang.org/account/avatar/00/16/70/ab/7a7399a7.jpg","comment_is_top":false,"comment_ctime":1568004047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568004047","product_id":100024701,"comment_content":"文中有一句不理解：“当然为了快速拿到段起始地址，段寄存器会从内存中拿到 CPU的描述符高速缓存器中”，难道段寄存器不是本来就在CPU里面吗？不是属于CPU的控制单元吗？请老师解释一下？","like_count":0},{"had_liked":false,"id":118749,"user_name":"宋桓公","can_delete":false,"product_type":"c1","uid":1151948,"ip_address":"","ucode":"04235C2B87AB0E","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/cc/dfe92ee1.jpg","comment_is_top":false,"comment_ctime":1564445190,"is_pvip":false,"replies":[{"id":"46392","content":"arm的不太一样","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566298165,"ip_address":"","comment_id":118749,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564445190","product_id":100024701,"comment_content":"感觉会到学arm的时候了","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460557,"discussion_content":"arm的不太一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566298165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117673,"user_name":"潇是潇洒的洒","can_delete":false,"product_type":"c1","uid":1250652,"ip_address":"","ucode":"CB950E0A655AA0","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/5c/aa3f8306.jpg","comment_is_top":false,"comment_ctime":1564109176,"is_pvip":true,"replies":[{"id":"46409","content":"多次取，也要有区分才能取呀","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566299106,"ip_address":"","comment_id":117673,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564109176","product_id":100024701,"comment_content":"老师，我想问，为什么地址总线单次访问的最大地址范围就决定了寻址能力，数据总线拿数据却可以分多次取，如果地址总线分多次取的地址算一个地址，寻址能力不就大大增加了么","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460081,"discussion_content":"多次取，也要有区分才能取呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566299106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111586,"user_name":"董懂","can_delete":false,"product_type":"c1","uid":1545789,"ip_address":"","ucode":"EDF4CAB275A69B","user_header":"https://static001.geekbang.org/account/avatar/00/17/96/3d/99c58108.jpg","comment_is_top":false,"comment_ctime":1562569330,"is_pvip":false,"replies":[{"id":"46738","content":"计算机组成是基础，所以先普及了一下知识，但是做不到很详尽。","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566387637,"ip_address":"","comment_id":111586,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562569330","product_id":100024701,"comment_content":"我是非科班生，工作4年深感基础薄弱，最近在用408复习参考资料学习计算机专业基础知识，买了几门极客时间的专栏配合着一起学。<br>我看这篇文章第一遍时候很懵逼，隐约觉得在讲计算机组成原理，很多都不理解，后来看到同学们的留言的确是这样。读完一遍再听了一遍老师的音频，对着文稿一字不漏的看的，这一遍就理解的比上一遍好多了。<br>因为老师的图在上面，讲解文字在下面，第一次读的时候，由于大脑“高速缓存”不够，看完一段就忘了，再看下一段依旧懵逼。但对着文稿听老师讲解的时候，就能对着图，听老师讲，理解起来就容易了很多。<br>根据这个阅读方法，可以让理解加强不少，推荐和我一样在第一遍懵逼的同学使用。😹","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457381,"discussion_content":"计算机组成是基础，所以先普及了一下知识，但是做不到很详尽。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566387637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100132,"user_name":"Geek_CCTV","can_delete":false,"product_type":"c1","uid":1563384,"ip_address":"","ucode":"9FCCECC5B6F735","user_header":"","comment_is_top":false,"comment_ctime":1559454876,"is_pvip":false,"replies":[{"id":"49210","content":"寄存器16位，地址总线20位。20位就只能访问1M这么点儿了，小于20位，那空间就更小了，放不下什么了呀","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567603433,"ip_address":"","comment_id":100132,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1559454876","product_id":100024701,"comment_content":"在 8086 原理那部分，控制单元 的 CS DS SS ES 4个寄存器是 20位的吗？是因为地址总线的位数是20位所以4个寄存器的位数设置为20位？但是我下面看到这4个寄存器是16位的说法。嗯，说明这4个寄存器是16位的，不过为什么要凑足 20 位？只要不大于地址总线20位不就可以了？<br>","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452422,"discussion_content":"寄存器16位，地址总线20位。20位就只能访问1M这么点儿了，小于20位，那空间就更小了，放不下什么了呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567603433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1616728,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ab/58/ae036dfc.jpg","nickname":"月成FUN","note":"","ucode":"75EE9B951D73CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7163,"discussion_content":"凑足20位不是为了最大化利用内存吗？本来可以用1M的，结果只用了64K，不亏吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567410081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99244,"user_name":"Stubborn","can_delete":false,"product_type":"c1","uid":1441930,"ip_address":"","ucode":"B1988D761B55FD","user_header":"https://static001.geekbang.org/account/avatar/00/16/00/8a/7576f354.jpg","comment_is_top":false,"comment_ctime":1559181681,"is_pvip":false,"replies":[{"id":"49236","content":"是的，在公有云上创建一个就可以玩啦，很便宜的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567605004,"ip_address":"","comment_id":99244,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559181681","product_id":100024701,"comment_content":"课堂练习的命令是需要在Linux服务器上操作是吧？刘老师","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452033,"discussion_content":"是的，在公有云上创建一个就可以玩啦，很便宜的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567605004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96333,"user_name":"李沛霖-程序猿","can_delete":false,"product_type":"c1","uid":1063957,"ip_address":"","ucode":"10CF0DBED2D220","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/15/71a2aca9.jpg","comment_is_top":false,"comment_ctime":1558400095,"is_pvip":false,"replies":[{"id":"34862","content":"后面用到就会展开","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1558681131,"ip_address":"","comment_id":96333,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558400095","product_id":100024701,"comment_content":"那么64位的呢","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450835,"discussion_content":"后面用到就会展开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558681131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91409,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1557028366,"is_pvip":false,"replies":[{"id":"49482","content":"是的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567674906,"ip_address":"","comment_id":91409,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557028366","product_id":100024701,"comment_content":"当前的指令分两部分，一部分是做什么操作，例如是加法还是位移；<br>要执行这条指令，就要把第一部分交给运算单元，第二部分交给数据<br><br>这里请问一下,<br>是否是指令里面有立即数的时候，才有“第二部分交给数据”，如 add %ax $0x23;<br>如果指令里面只有寄存器操作，就只要“交给运算单元”，如 add %ax %bx;","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448910,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567674906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89633,"user_name":"chapin","can_delete":false,"product_type":"c1","uid":1070020,"ip_address":"","ucode":"BB1800A771A8E9","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/c4/dea5d7f3.jpg","comment_is_top":false,"comment_ctime":1556238451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556238451","product_id":100024701,"comment_content":"刘老师厉害了","like_count":0},{"had_liked":false,"id":88916,"user_name":"zhouzg","can_delete":false,"product_type":"c1","uid":1060614,"ip_address":"","ucode":"40C8A4E115A5AE","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/06/aabd37b4.jpg","comment_is_top":false,"comment_ctime":1556026505,"is_pvip":false,"replies":[{"id":"32027","content":"16位的系统","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1556195373,"ip_address":"","comment_id":88916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556026505","product_id":100024701,"comment_content":"想问一下为什么“那一个段最大能有多大呢？因为偏移量只能是 16 位的，所以一个段最大的大小是 2^16=64k。”这里说的 偏移量只能是 16 位呢？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447945,"discussion_content":"16位的系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556195373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88477,"user_name":"nil","can_delete":false,"product_type":"c1","uid":1507193,"ip_address":"","ucode":"0F5D298C1CBB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/79/3b38c9e1.jpg","comment_is_top":false,"comment_ctime":1555926808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555926808","product_id":100024701,"comment_content":"老师讲的太棒了，提到的内容上学的时候都有学过，但是从来没有串起来过，看了老师今天的内容受益匪浅，跟着老师学，将知识梳理成一个体系，攒！","like_count":0},{"had_liked":false,"id":88114,"user_name":"爱吃锅巴的沐泡","can_delete":false,"product_type":"c1","uid":1244560,"ip_address":"","ucode":"27451E4F1A22D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/90/ae39017f.jpg","comment_is_top":false,"comment_ctime":1555852840,"is_pvip":false,"replies":[{"id":"32058","content":"不是的，原来有南北桥的，现在北桥集成化了，但是逻辑上还是有的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1556197994,"ip_address":"","comment_id":88114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555852840","product_id":100024701,"comment_content":"老师，总线的那个图是不是有问题，M(内存)总线应该在cpu和内存之间呀！","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447735,"discussion_content":"不是的，原来有南北桥的，现在北桥集成化了，但是逻辑上还是有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556197994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87466,"user_name":"h","can_delete":false,"product_type":"c1","uid":1478011,"ip_address":"","ucode":"26D8D71529D553","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/7b/a09a9cb3.jpg","comment_is_top":false,"comment_ctime":1555600144,"is_pvip":false,"replies":[{"id":"49606","content":"对的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567691387,"ip_address":"","comment_id":87466,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1555600144","product_id":100024701,"comment_content":"因为按照这样的方式，他的程序认不出来啊。就好比你两个房间。一个高号房间一个低号房。然后程序是打开高号房门取数据。某天高高号房弄了个隔板(模拟高16位分为两个8位)  但是程序是死的啊。程序打开门发现咋这里有个隔板，脑子蒙圈了。所以不兼容了。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447466,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567691387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099379,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/73/abb7bfe3.jpg","nickname":"疯琴","note":"","ucode":"82ACAA4A27753D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287602,"discussion_content":"是不是我写程序只会用16位，那扩展出来的16位谁用和怎么用呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593489273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86826,"user_name":"周平","can_delete":false,"product_type":"c1","uid":1047936,"ip_address":"","ucode":"CA1869B139A4F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fd/80/52763d62.jpg","comment_is_top":false,"comment_ctime":1555464642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555464642","product_id":100024701,"comment_content":"学习了，加油","like_count":0},{"had_liked":false,"id":86389,"user_name":"灯盖","can_delete":false,"product_type":"c1","uid":1482839,"ip_address":"","ucode":"0F8455A593D60C","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/57/3a729755.jpg","comment_is_top":false,"comment_ctime":1555374820,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1555374820","product_id":100024701,"comment_content":"如何理解一个段呢？现在windows共享内存做映射的时候依然有这个限制，是不是源头也是这？","like_count":0},{"had_liked":false,"id":86372,"user_name":"灯盖","can_delete":false,"product_type":"c1","uid":1482839,"ip_address":"","ucode":"0F8455A593D60C","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/57/3a729755.jpg","comment_is_top":false,"comment_ctime":1555374161,"is_pvip":false,"replies":[{"id":"49646","content":"是的是的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695654,"ip_address":"","comment_id":86372,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1555374161","product_id":100024701,"comment_content":"基础是地基，真是颠扑不破的真理啊","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446993,"discussion_content":"是的是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86275,"user_name":"灯盖","can_delete":false,"product_type":"c1","uid":1482839,"ip_address":"","ucode":"0F8455A593D60C","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/57/3a729755.jpg","comment_is_top":false,"comment_ctime":1555336904,"is_pvip":false,"replies":[{"id":"49651","content":"赞","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695734,"ip_address":"","comment_id":86275,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1555336904","product_id":100024701,"comment_content":"写的好，x86，汇编走起","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446953,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85940,"user_name":"天降祥瑞","can_delete":false,"product_type":"c1","uid":1131732,"ip_address":"","ucode":"005E475B4D1A54","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/d4/542ad2c6.jpg","comment_is_top":false,"comment_ctime":1555296890,"is_pvip":false,"replies":[{"id":"49673","content":"16位太浪费了，早期可没这么多内存。早期恨不得按位用","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696619,"ip_address":"","comment_id":85940,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555296890","product_id":100024701,"comment_content":"老师，8086的数据总线是16位的，为什么一个地址空间对应一个字节（8位），而不是对应两个字节（16）位，和数据总线长度一致？<br>这样1M的寻址空间就可以对应2M的内存了。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446874,"discussion_content":"16位太浪费了，早期可没这么多内存。早期恨不得按位用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85836,"user_name":"tt716","can_delete":false,"product_type":"c1","uid":1022990,"ip_address":"","ucode":"16B3DCA5E18AC1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/0e/0db41dda.jpg","comment_is_top":false,"comment_ctime":1555253280,"is_pvip":false,"replies":[{"id":"49685","content":"原来的程序里面，没有用高位存东西的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567697214,"ip_address":"","comment_id":85836,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555253280","product_id":100024701,"comment_content":"32位的CPU里通用寄存器高16位如果拆分成两个8位为什么会导致不兼容呢？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446830,"discussion_content":"原来的程序里面，没有用高位存东西的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567697214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85406,"user_name":"对不起，其实你对我不熟悉","can_delete":false,"product_type":"c1","uid":1443540,"ip_address":"","ucode":"0E1BE51ECBF8FA","user_header":"https://static001.geekbang.org/account/avatar/00/16/06/d4/8cb2e05c.jpg","comment_is_top":false,"comment_ctime":1555053915,"is_pvip":false,"replies":[{"id":"49706","content":"c挺好学的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567698138,"ip_address":"","comment_id":85406,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555053915","product_id":100024701,"comment_content":"我不会C ，感觉听着不太懂","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446661,"discussion_content":"c挺好学的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567698138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84879,"user_name":"Untitled","can_delete":false,"product_type":"c1","uid":1039464,"ip_address":"","ucode":"8DD6ABA3E81A2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/68/006ba72c.jpg","comment_is_top":false,"comment_ctime":1554942759,"is_pvip":false,"replies":[{"id":"30526","content":"这个要研究一下","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554989954,"ip_address":"","comment_id":84879,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1554942759","product_id":100024701,"comment_content":"老师，x86的确很经典，但希望可以再拿一个目前很流行的架构来分析，例如现在大数据用到的GPU，内部又是怎么样的？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446483,"discussion_content":"这个要研究一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554989954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84542,"user_name":"明月","can_delete":false,"product_type":"c1","uid":1476588,"ip_address":"","ucode":"D3C649B954A519","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJayib1ZcRfOaoLsdsWZokiaO5tLAdC4uNAicQJRIVXrz9fIchib7QwXibnRrsJaoh5TUlia7faUf36g8Bw/132","comment_is_top":false,"comment_ctime":1554873317,"is_pvip":false,"replies":[{"id":"49748","content":"学过汇编，很牛","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567699391,"ip_address":"","comment_id":84542,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554873317","product_id":100024701,"comment_content":"复习了一遍汇编语言。。。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446384,"discussion_content":"学过汇编，很牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567699391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84450,"user_name":"酥合","can_delete":false,"product_type":"c1","uid":1362649,"ip_address":"","ucode":"5E45992A4D1539","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo7hiaszDx6BpRV4bkSsTwyPurKW5mSvawsibhjic36c8GS3ctJib1RbiaVC2OLIThIbROV3B8g8xQTpSA/132","comment_is_top":false,"comment_ctime":1554865510,"is_pvip":false,"replies":[{"id":"49752","content":"赞","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567699454,"ip_address":"","comment_id":84450,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554865510","product_id":100024701,"comment_content":"当时学汇编语言讲各种寄存器的时候非常痛苦，看了这篇后很多地方突然明白了，继续努力","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446367,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567699454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84282,"user_name":"Egos","can_delete":false,"product_type":"c1","uid":1071143,"ip_address":"","ucode":"9F0055B140E935","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/27/1188e017.jpg","comment_is_top":false,"comment_ctime":1554819295,"is_pvip":false,"replies":[{"id":"49766","content":"是的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567700321,"ip_address":"","comment_id":84282,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554819295","product_id":100024701,"comment_content":"一个进程的内存空间是很大的，32 位的是 4G。<br>––––––––<br>看了后面的x86 的内容。这个4G 是根据地址总线的位数决定的？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446301,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567700321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84266,"user_name":"上邪忘川","can_delete":false,"product_type":"c1","uid":1276588,"ip_address":"","ucode":"1C4459917B038D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIz9dKN1C8rKQoaVtmEGdzObhlia6zAfTsPYOm4ibz39VjTbu7Aia1LyeedHR26b6nxUtcCufpichcYgw/132","comment_is_top":false,"comment_ctime":1554816525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554816525","product_id":100024701,"comment_content":"这也是当初小于4G内存装WIN XP，大于4G内存装WIN7的原因吧","like_count":0},{"had_liked":false,"id":84265,"user_name":"Egos","can_delete":false,"product_type":"c1","uid":1071143,"ip_address":"","ucode":"9F0055B140E935","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/27/1188e017.jpg","comment_is_top":false,"comment_ctime":1554816460,"is_pvip":false,"replies":[{"id":"49767","content":"放在起始位置，能够得着的地方","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567700425,"ip_address":"","comment_id":84265,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554816460","product_id":100024701,"comment_content":"还有一个问题想问问😄。保护模式下的寻址是怎么一一对应的？32 位的x86 为了兼容CS、DS 依旧是16位的，但是存的不再是段的起始地址，而是保存的一个对应关系的表格，表格中存着最终的起始地址。16 位的CS、DS 是怎么对应到32 位的呢？2^16 &lt; 2^32","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446300,"discussion_content":"放在起始位置，能够得着的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567700425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84241,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1554811736,"is_pvip":false,"replies":[{"id":"49770","content":"汇编里面经常用的，访问内存的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567700523,"ip_address":"","comment_id":84241,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554811736","product_id":100024701,"comment_content":"还有一个问题老师, 在8086原理的这个图中, 在数据单元中的指针变址寄存器是做什么用的, 为什么也属于通用寄存器?","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446287,"discussion_content":"汇编里面经常用的，访问内存的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567700523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84237,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1554811351,"is_pvip":false,"replies":[{"id":"49771","content":"地址和数据","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567700672,"ip_address":"","comment_id":84237,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554811351","product_id":100024701,"comment_content":"请教一下老师8086原理的图示有点没看懂, 想问一下图中的实线箭头和虚线箭头有什么区别,  箭头具体是表达的是数据的传输方向吗?","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446286,"discussion_content":"地址和数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567700672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84236,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1554811140,"is_pvip":false,"replies":[{"id":"49772","content":"寄存器中保存的是地址","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567700740,"ip_address":"","comment_id":84236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554811140","product_id":100024701,"comment_content":"请问一下老师控制单元中栈寄存器只有16位, 那这个栈是不是只能存一个一条语句, 那进栈和出栈的操作不是没什么意义了吗, 再有,只能存一条语句或几条语句的话不是很快就栈溢出了吗?<br>","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446285,"discussion_content":"寄存器中保存的是地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567700740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84128,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1554789523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554789523","product_id":100024701,"comment_content":"x86平台，intel8086是intel系列的16位处理器，是x86架构的鼻祖。<br>x86平台，开放，统一，兼容，IBM由于垄断被起诉，所以开放了CPU的标准，英特尔的技术成了行业的标准。<br><br>8086处理器的原理：<br>8086处理器的组件包括以下几个：<br>数据单元： 1 通用寄存器\t8个16位的通用寄存器，分别是AX,BX,CX,DX,SP,SB,SI,DI,这些寄存器用于在计算过程中暂存数据。<br>控制单元：IP寄存器就是指令指针寄存器，指向代码段中下一条指令的位置，CPU会根据IP寄存器，不断的把指令从内存的代码段读到CPU<br>的指令队列中，交给运算单元去执行。<br><br>切换进程： 每个进程都有代码段的寄存器和数据段的寄存器，为了指向不同进程的地址空间，有4个16位的段寄存器。<br>分别是CS（代码段寄存器），通过他可以获取到代码在内存的位置，DS(数据段的寄存器)，可以找到数据在内存的位置。<br>SS是栈寄存器，<br><br>运算中，需要加载内存中的数据，需要通过DS寄存器，找到内存中的位置，讲数据加载到通用寄存器中，<br>CS和DS中，都存放着一个段的起始位置，代码段的偏移量在IP寄存器中，数据段的偏移量在通用寄存器中。<br>20位的数据地址=起始地址*16+偏移量","like_count":0},{"had_liked":false,"id":84105,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1554785718,"is_pvip":false,"replies":[{"id":"49777","content":"新功能，但是不兼容，原来的代码没有用高位的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567701231,"ip_address":"","comment_id":84105,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554785718","product_id":100024701,"comment_content":"和另外一个同学的问题一样: 为什么扩展后的高16位 不能分成两个8位来用啊？ 这不是扩展后的嘛？ 之前只有16位，现在多了高16位，当两个8位来用，不应该是新功能嘛？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446254,"discussion_content":"新功能，但是不兼容，原来的代码没有用高位的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84084,"user_name":"ayf755","can_delete":false,"product_type":"c1","uid":1307235,"ip_address":"","ucode":"74DFF122FD75E1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yDRwYmEV1J4T3CVCgvcUDjLNicFUo7dXLEicIhRD7jicicfnBtlib8TZd6hmaK5O44zQvzNYkc7A4PzNQkDlFxsDxEA/132","comment_is_top":false,"comment_ctime":1554780054,"is_pvip":false,"replies":[{"id":"49779","content":"补回来好","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567701260,"ip_address":"","comment_id":84084,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554780054","product_id":100024701,"comment_content":"感觉回到了大学上课的时光，那时候经常翘课，是时候补回来了。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446247,"discussion_content":"补回来好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84083,"user_name":"z","can_delete":false,"product_type":"c1","uid":1479864,"ip_address":"","ucode":"C5F4123280C4AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/94/b8/5902e7fe.jpg","comment_is_top":false,"comment_ctime":1554780006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554780006","product_id":100024701,"comment_content":"微机原理……毕了业全还给老师了","like_count":0},{"had_liked":false,"id":84074,"user_name":"江南皮革厂研发中心保安队长","can_delete":false,"product_type":"c1","uid":1099584,"ip_address":"","ucode":"231419643A5CC5","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/40/66a203cd.jpg","comment_is_top":false,"comment_ctime":1554778589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554778589","product_id":100024701,"comment_content":"瞬间想起了大学学《微机原理》的场景。基础真的好重要啊。","like_count":0},{"had_liked":false,"id":84072,"user_name":"后台哥中哥","can_delete":false,"product_type":"c1","uid":1299217,"ip_address":"","ucode":"41CC2397B45D05","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIh9yUhKHyRXTrAtxQs6WGeicLTohOgoDIeHZzvrIQsPChAEwKTqFEWeDHjBYt4EkoWogSic8orCKmw/132","comment_is_top":false,"comment_ctime":1554777995,"is_pvip":false,"replies":[{"id":"49780","content":"不是cpu描述符，是段描述符，在缓存里面就能快速拿到了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567701370,"ip_address":"","comment_id":84072,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554777995","product_id":100024701,"comment_content":"这样段起始地址就会很灵活了。当然为了快速拿到段起始地址，段寄存器会从内存中拿到 CPU 的描述符高速缓存器中。     这句话没看懂。   什么是cpu描述符，通过其为啥就可以快速拿到起始地址？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446242,"discussion_content":"不是cpu描述符，是段描述符，在缓存里面就能快速拿到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84065,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1554776774,"is_pvip":false,"replies":[{"id":"49781","content":"是的，就前几节汇编多","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567701402,"ip_address":"","comment_id":84065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554776774","product_id":100024701,"comment_content":"我是操作系统小白，明显能感觉到讲师的功力深厚。读了两边才理解了，关于图的记忆能记5成。那张，cpu的微观图有点难记，还没记住。<br><br>刚才搜x86架构，无意中看到了x86与arm架构的区别与联系的 文章。 涉及汇编比较多啊……","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446238,"discussion_content":"是的，就前几节汇编多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84013,"user_name":"曼塔特","can_delete":false,"product_type":"c1","uid":1250970,"ip_address":"","ucode":"8122724CA16FC5","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/9a/573d46b3.jpg","comment_is_top":false,"comment_ctime":1554769483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554769483","product_id":100024701,"comment_content":"讲的很清晰明了，当初学计算机组成原理真是一脸懵逼","like_count":0},{"had_liked":false,"id":84010,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1554769367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554769367","product_id":100024701,"comment_content":"打卡day7<br>发现以前计算机原理白学了～","like_count":0},{"had_liked":false,"id":83966,"user_name":"张晟","can_delete":false,"product_type":"c1","uid":1332192,"ip_address":"","ucode":"77EBEAB9DD9ED6","user_header":"https://static001.geekbang.org/account/avatar/00/14/53/e0/2b8fd02d.jpg","comment_is_top":false,"comment_ctime":1554740468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554740468","product_id":100024701,"comment_content":"老师 关于CPU寻址与取数据这块想问下<br>CPU一次取数据应该是一个字长吧？  32位就取4B, 64位就取8B; 寻址范围就是 2的CPU位数的次方？ 可以这样理解吗","like_count":0},{"had_liked":false,"id":83954,"user_name":"Geek_ll","can_delete":false,"product_type":"c1","uid":1478237,"ip_address":"","ucode":"84835DD33C5484","user_header":"","comment_is_top":false,"comment_ctime":1554737992,"is_pvip":false,"replies":[{"id":"49788","content":"不会的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567701605,"ip_address":"","comment_id":83954,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1554737992","product_id":100024701,"comment_content":"起始×16＋偏移量，这样得到的20位地址不会重复嘛？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446189,"discussion_content":"不会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140276,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/34/0508d9e4.jpg","nickname":"u","note":"","ucode":"88FA7BA089807C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261463,"discussion_content":"我觉得理论上肯定会有重复，但操作系统在分配段地址时刻意规避了这个问题，保证了段地址左移4位后和偏移量的位数不重复！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588954951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140276,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/34/0508d9e4.jpg","nickname":"u","note":"","ucode":"88FA7BA089807C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261453,"discussion_content":"你弄懂了没？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588954135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140276,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/34/0508d9e4.jpg","nickname":"u","note":"","ucode":"88FA7BA089807C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261452,"discussion_content":"我也觉得会重复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588954120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83950,"user_name":"Egos","can_delete":false,"product_type":"c1","uid":1071143,"ip_address":"","ucode":"9F0055B140E935","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/27/1188e017.jpg","comment_is_top":false,"comment_ctime":1554737185,"is_pvip":false,"replies":[{"id":"30316","content":"都按最大的，会超过二十位，但是段起始地址是不会这样安排的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554773842,"ip_address":"","comment_id":83950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554737185","product_id":100024701,"comment_content":"起始地址 *16+ 偏移量: <br>粗略计算最大值的话是FFFF*4 + FFFF = FFFF0 + FFFF &gt; FFFFF<br>这样的话应该是超过20位的呢？<br><br><br>","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446187,"discussion_content":"都按最大的，会超过二十位，但是段起始地址是不会这样安排的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554773842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83932,"user_name":"小辉辉","can_delete":false,"product_type":"c1","uid":1189661,"ip_address":"","ucode":"9FF25E25C85350","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/1d/1cb36854.jpg","comment_is_top":false,"comment_ctime":1554735177,"is_pvip":false,"replies":[{"id":"30317","content":"到了底层原理，很多机制都很像","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554773874,"ip_address":"","comment_id":83932,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554735177","product_id":100024701,"comment_content":"基础太差，看得一脸懵，得好好打基础了，里面有很多东西跟JVM还是很像的","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446180,"discussion_content":"到了底层原理，很多机制都很像","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554773874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83897,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1554730699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554730699","product_id":100024701,"comment_content":"现在发现大二开的那门汇编语言还是很有用的啊 学操作系统理解一些概念的时候轻松多了","like_count":0},{"had_liked":false,"id":83868,"user_name":"小武","can_delete":false,"product_type":"c1","uid":1031888,"ip_address":"","ucode":"F47B5D220161E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/d0/7f37f35f.jpg","comment_is_top":false,"comment_ctime":1554726627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554726627","product_id":100024701,"comment_content":"看的还有有些懵，需要补的课太多","like_count":0},{"had_liked":false,"id":83866,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1554726400,"is_pvip":false,"replies":[{"id":"30320","content":"不一定是实参，也有可能是内存中的地址。是不是实参要看汇编语言的定义了，并不在硬件这一层","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554774204,"ip_address":"","comment_id":83866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554726400","product_id":100024701,"comment_content":"请问一下老师, 对于数据总线的位数决定一次性可以拿多少数据到cpu, 这个一次性拿的数据是指向CPU传递实参吗?","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446166,"discussion_content":"不一定是实参，也有可能是内存中的地址。是不是实参要看汇编语言的定义了，并不在硬件这一层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554774204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83864,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1554726240,"is_pvip":false,"replies":[{"id":"49853","content":"就是总线的宽度，如果总线16，地址20，则要传输两次才能满足","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567764213,"ip_address":"","comment_id":83864,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554726240","product_id":100024701,"comment_content":"请问一下老师在CPU型号对比的图中, 中间一列总线位宽这个字段是做什么用的?","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446165,"discussion_content":"就是总线的宽度，如果总线16，地址20，则要传输两次才能满足","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567764213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83856,"user_name":"EINDEX","can_delete":false,"product_type":"c1","uid":1207843,"ip_address":"","ucode":"9CF41679E8A901","user_header":"https://static001.geekbang.org/account/avatar/00/12/6e/23/c0b5c950.jpg","comment_is_top":false,"comment_ctime":1554725099,"is_pvip":false,"replies":[{"id":"49790","content":"会的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567701713,"ip_address":"","comment_id":83856,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554725099","product_id":100024701,"comment_content":"问题<br>操作系统在处理多核多进程的时候也是通过进程调度来分配任务吗？在切换得时候是否会切换数据空间与寄存器呢？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446163,"discussion_content":"会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83838,"user_name":"茂留","can_delete":false,"product_type":"c1","uid":1299012,"ip_address":"","ucode":"74AEE922688D18","user_header":"https://static001.geekbang.org/account/avatar/00/13/d2/44/73d14717.jpg","comment_is_top":false,"comment_ctime":1554723030,"is_pvip":false,"replies":[{"id":"49791","content":"下一节就看到了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567701728,"ip_address":"","comment_id":83838,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554723030","product_id":100024701,"comment_content":"系统运行在保护模式下，是不是在启动时要从实模式过度一下再切换到保护模式；在实模式里面会做什么；boot是在实模式做的嘛？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446159,"discussion_content":"下一节就看到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83704,"user_name":"Roger","can_delete":false,"product_type":"c1","uid":1350628,"ip_address":"","ucode":"A1EA3FAFA2AFAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoZU29OgA5ssuB7jicNXGlo2FHkibs0VZJoZ2fOgYjCoiaibz7qaic6JA0NWgOniaDqRkExA7Wt9pmd1SKw/132","comment_is_top":false,"comment_ctime":1554706613,"is_pvip":false,"replies":[{"id":"30273","content":"是的，原来有北桥和南桥，现在北桥融合进去了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554716402,"ip_address":"","comment_id":83704,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554706613","product_id":100024701,"comment_content":"感谢，文章写得非常好。<br>第一幅图，从Nehalem架构开始，CPU已经集成了内存控制器，取消了北桥和前端总线的概念，第一幅图内存画在CPU上会比较好？<br>我理解第一幅图的IO桥，是南桥PCH芯片，用来连接低速设备。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446131,"discussion_content":"是的，原来有北桥和南桥，现在北桥融合进去了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554716402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83621,"user_name":"学习者","can_delete":false,"product_type":"c1","uid":1017684,"ip_address":"","ucode":"3BF2B29656C1CF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/54/727379d8.jpg","comment_is_top":false,"comment_ctime":1554686061,"is_pvip":false,"replies":[{"id":"30250","content":"就是将一些功能变了作用，从而可以支持更大的内存空间","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1554688664,"ip_address":"","comment_id":83621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554686061","product_id":100024701,"comment_content":"实模式和保护模式没怎么看懂。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446100,"discussion_content":"就是将一些功能变了作用，从而可以支持更大的内存空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554688664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83617,"user_name":"风起云涌","can_delete":false,"product_type":"c1","uid":1477956,"ip_address":"","ucode":"778054EE24E31B","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/44/a4784bcc.jpg","comment_is_top":false,"comment_ctime":1554685760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554685760","product_id":100024701,"comment_content":"讲的很有深度。","like_count":0},{"had_liked":false,"id":83610,"user_name":"我不是郭靖","can_delete":false,"product_type":"c1","uid":1475146,"ip_address":"","ucode":"C6C72EBBFF87EB","user_header":"https://static001.geekbang.org/account/avatar/00/16/82/4a/065e6681.jpg","comment_is_top":false,"comment_ctime":1554685144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554685144","product_id":100024701,"comment_content":"复习了一把微机原理，点赞！","like_count":0},{"had_liked":false,"id":83601,"user_name":"Dionysoslai","can_delete":false,"product_type":"c1","uid":1034262,"ip_address":"","ucode":"A2251D04CFD0EB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/16/1d055826.jpg","comment_is_top":false,"comment_ctime":1554683391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554683391","product_id":100024701,"comment_content":"把以前知识温故而知新","like_count":0},{"had_liked":false,"id":83597,"user_name":"Emir","can_delete":false,"product_type":"c1","uid":1157185,"ip_address":"","ucode":"A7A346FF235C39","user_header":"https://static001.geekbang.org/account/avatar/00/11/a8/41/f20fa3ca.jpg","comment_is_top":false,"comment_ctime":1554682770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554682770","product_id":100024701,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":83592,"user_name":"idioticbear","can_delete":false,"product_type":"c1","uid":1125988,"ip_address":"","ucode":"E0ED5F497440F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/64/df1a587b.jpg","comment_is_top":false,"comment_ctime":1554682028,"is_pvip":false,"replies":[{"id":"49886","content":"可以买个课程，哈哈哈","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567779917,"ip_address":"","comment_id":83592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554682028","product_id":100024701,"comment_content":"模模糊糊想起当初计算机组成原理的课程内容","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446085,"discussion_content":"可以买个课程，哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567779917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83587,"user_name":"刘得淼","can_delete":false,"product_type":"c1","uid":1030555,"ip_address":"","ucode":"2C76F394266D97","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b9/9b/a842776c.jpg","comment_is_top":false,"comment_ctime":1554679828,"is_pvip":false,"replies":[{"id":"49887","content":"赞，三遍是王道","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567779929,"ip_address":"","comment_id":83587,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554679828","product_id":100024701,"comment_content":"读3遍以上。写的太好了","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446082,"discussion_content":"赞，三遍是王道","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567779929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}