{"id":643536,"title":"07｜原始MVC：如何通过单一的Servlet拦截请求分派任务？","content":"<p>你好，我是郭屹。从这节课开始，我们开启一个新的部分：MVC。</p><p>前面一章，我们实现了一个简单的IoC。麻雀虽小，五脏俱全，相比原生Spring框架而言，我们写的MiniSpring功能简单，但其核心功能已具备。我们会在这个基础上进一步扩展我们的框架。</p><p>这一章我们来实现Spring MVC。MVC，全名对应Model（模型）、View（视图）、Controller（控制器）。它的基本流程是：前端发送请求到控制器，控制器寻找对应模型，找到模型后返回结果，渲染视图返回给前端生成页面。这是标准的前端请求数据的模型。实现了MVC之后，我们会把MVC和之前我们已经实现的IoC结合起来，这是我们这一章的整体思路。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/41/a79dc2ca9b96c2f4904c2f389926fb41.png?wh=1660x916\" alt=\"图片\"></p><p>这节课我们就开启Spring MVC的第一步，先实现一个原始的MVC。目标是通过一个Controller来拦截用户请求，找到相应的处理类进行逻辑处理，然后将处理的结果发送给客户端。</p><h2>调整目录</h2><p>按照惯例，我们还是参照Spring的目录结构来调整。MVC是Web模型，所以我们先调整一下目前的项目结构，采用Web的项目结构。同时，我们还要引入Tomcat服务器以及Tomcat的jar包。</p><p>你可以看一下项目目录结构，主要是新增一个和src目录同级的WebContent目录，在这个目录里存储部分前端页面需要的静态资源，还有各项XML配置文件。</p><!-- [[[read_end]]] --><pre><code class=\"language-java\">src\n└── com\n│ ├── minis\n│ │ ├── web\n│ │ ├── util\n│ │ └── test\nWebContent\n├── WEB-INF\n│ ├── lib\n│ ├── web.xml\n│ ├── minisMVC-servlet.xml\n└── META-INF\n│ └── MANIFEST.MF\n</code></pre><p>参考Spring MVC，我们定义web.xml和minisMVC-servlet.xml这两个配置文件的内容。</p><ol>\n<li>minisMVC-servlet.xml</li>\n</ol><pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;beans&gt;\n  &lt;bean id=\"/helloworld\" class=\"com.minis.test.HelloWorldBean\" value=\"doGet\"/&gt;\n&lt;/beans&gt;\n</code></pre><ol start=\"2\">\n<li>web.xml</li>\n</ol><pre><code class=\"language-java\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:web=\"http://xmlns.jcp.org/xml/ns/javaee\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\nhttp://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\"&gt;\n  &lt;servlet&gt;\n    &lt;servlet-name&gt;minisMVC&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.minis.web.DispatcherServlet&lt;/servlet-class&gt;\n      &lt;init-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/minisMVC-servlet.xml&lt;/param-value&gt;\n      &lt;/init-param&gt;\n      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n  &lt;/servlet&gt;\n  &lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;minisMVC&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n  &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;\n</code></pre><p>这两个XML文件里，minisMVC-servlet.xml是我们很熟悉的Bean配置，只是把id设置成了一个URL的形式，来匹配后端的程序，访问/helloworld的时候，对应调用HelloWorldBean类里的doGet()方法。</p><h2>Servlet</h2><p>接下来我们重点关注web.xml。MVC里有一个核心概念是Servlet，通俗理解成运行在Web服务器上的程序。针对上面的XML配置，我们解读一下里面几个标签的含义。</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/f6/3f618deba5608e66ca0174ac1ba82ef6.png?wh=2554x1102\" alt=\"\"></p><p>整个结构就是一个标准的JavaEE结构，我们按照规范解释它，就是当Servlet容器启动的时候，先读取web.xml配置，加载配置文件中的servlet，也就是DispatcherServlet，并规定它拦截所有的HTTP请求，所以它就是控制器。</p><p>我们注意到这个控制器DispatcherServlet有一个参数 contextConfigLocation，它配置了控制器要找的逻辑处理类的文件minisMVC-servlet.xml。</p><pre><code class=\"language-java\">      &lt;init-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/minisMVC-servlet.xml&lt;/param-value&gt;\n      &lt;/init-param&gt;\n</code></pre><p>因此，为了启动这个servlet，我们要提前解析minisMVC-servlet.xml文件。</p><h3>解析servlet.xml</h3><p>首先定义实体类MappingValue里的三个属性：uri、clz与method，分别与minisMVC-servlet.xml中<bean>标签的属性id、class与value对应。</bean></p><pre><code class=\"language-java\">package com.minis.web;\n\npublic class MappingValue {\n\tString uri;\n\tpublic String getUri() {\n\t\treturn uri;\n\t}\n\tpublic void setUri(String uri) {\n\t\tthis.uri = uri;\n\t}\n\tString clz;\n\tpublic String getClz() {\n\t\treturn clz;\n\t}\n\tpublic void setClz(String clz) {\n\t\tthis.clz = clz;\n\t}\n\tString method;\n\tpublic String getMethod() {\n\t\treturn method;\n\t}\n\tpublic void setMethod(String method) {\n\t\tthis.method = method;\n\t}\n\t\n\tpublic MappingValue(String uri, String clz, String method) {\n\t\tthis.uri = uri;\n\t\tthis.clz = clz;\n\t\tthis.method = method;\n\t}\n}\n</code></pre><p>然后我们定义Resource用来加载配置文件。</p><pre><code class=\"language-java\">package com.minis.web;\nimport java.util.Iterator;\npublic interface Resource extends Iterator&lt;Object&gt;{\n}\n</code></pre><p>这是具体的实现。</p><pre><code class=\"language-java\">package com.minis.web;\n\nimport java.net.URL;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\n\npublic class ClassPathXmlResource implements Resource {\n\tDocument document;\n\tElement rootElement;\n\tIterator&lt;Element&gt; elementIterator;\n\t\n\tpublic ClassPathXmlResource(URL xmlPath) {\n&nbsp; &nbsp; &nbsp; &nbsp; SAXReader saxReader=new SAXReader();\n&nbsp; &nbsp; &nbsp; &nbsp; try {\n\t\t\tthis.document = saxReader.read(xmlPath);\n\t\t\tthis.rootElement=document.getRootElement();\n\t\t\tthis.elementIterator=this.rootElement.elementIterator();\n\t\t} catch (DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t}\n\t@Override\n\tpublic boolean hasNext() {\n\t\treturn this.elementIterator.hasNext();\n\t}\n\t@Override\n\tpublic Object next() {\n\t\treturn this.elementIterator.next();\n\t}\n}\n</code></pre><pre><code class=\"language-java\">package com.minis.web;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.dom4j.Element;\n\npublic class XmlConfigReader {\n\tpublic XmlConfigReader() {\n\t}\n\tpublic Map&lt;String,MappingValue&gt; loadConfig(Resource res) {\n\t\tMap&lt;String,MappingValue&gt; mappings = new HashMap&lt;&gt;();\n\t\t\n&nbsp; &nbsp; &nbsp; &nbsp; while (res.hasNext()) { //读所有的节点，解析id, class和value\n&nbsp; &nbsp; &nbsp; &nbsp; \tElement element = (Element)res.next();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String beanID=element.attributeValue(\"id\");\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String beanClassName=element.attributeValue(\"class\");\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String beanMethod=element.attributeValue(\"value\");\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mappings.put(beanID, new MappingValue(beanID,beanClassName,beanMethod));\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; return mappings;\n\t}\n}\n</code></pre><p>上述几段代码，是不是似曾相识？和我们前一部分编写的解析IoC的配置文件基本没什么差别，通过这些方法就能把XML里配置的Bean加载到内存里了，这里我就不再多说了。</p><h3>实现MVC的核心启动类DispatcherSevlet</h3><p>现在项目的搭建和前期准备工作已经完成，我们开始着手实现web.xml中配置的com.minis.web.DispatcherServlet这个MVC的核心启动类，完成URL映射机制。</p><p><strong>MVC的基本思路是屏蔽Servlet的概念，让程序员主要写业务逻辑代码</strong>。浏览器访问的URL通过映射机制找到实际的业务逻辑方法。按照Servlet规范，可以通过Filter拦截，也可以通过Servlet拦截。MiniSpring的实现过程中，我模仿Spring MVC通过Servlet拦截所有请求，处理映射关系，调用业务逻辑代码，处理返回值回递给浏览器。程序员写的业务逻辑程序，也叫做Bean。</p><p>在DispatcherSevlet内，定义了三个Map，分别记录URL对应的MappingValue对象、对应的类和对应的方法。</p><pre><code class=\"language-java\">private Map&lt;String, MappingValue&gt; mappingValues;\nprivate Map&lt;String, Class&lt;?&gt;&gt; mappingClz = new HashMap&lt;&gt;();\nprivate Map&lt;String, Object&gt; mappingObjs = new HashMap&lt;&gt;();\n</code></pre><p>随后实现Servlet初始化方法，初始化主要处理从外部传入的资源，将XML文件内容解析后存入mappingValues内。最后调用Refresh()函数创建Bean，这节课的例子就是HelloWorldBean，这些Bean的类和实例存放在mappingClz和mappingObjs里。</p><pre><code class=\"language-java\">&nbsp; &nbsp; public void init(ServletConfig config) throws ServletException {\n&nbsp; &nbsp; \tsuper.init(config);\n&nbsp; &nbsp; \t\n&nbsp; &nbsp; &nbsp; &nbsp; sContextConfigLocation = config.getInitParameter(\"contextConfigLocation\"); &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; URL xmlPath = null;\n\t\ttry {\n\t\t\txmlPath = this.getServletContext().getResource(sContextConfigLocation);\n\t\t} catch (MalformedURLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tResource rs = new ClassPathXmlResource(xmlPath);\n&nbsp; &nbsp; &nbsp; &nbsp; XmlConfigReader reader = new XmlConfigReader();\n&nbsp; &nbsp; &nbsp; &nbsp; mappingValues = reader.loadConfig(rs);\n&nbsp; &nbsp; &nbsp; &nbsp; Refresh();\n&nbsp; &nbsp; }\n</code></pre><p>下面是Refresh()方法。</p><pre><code class=\"language-plain\">//对所有的mappingValues中注册的类进行实例化，默认构造函数\nprotected void Refresh() {\n \tfor (Map.Entry&lt;String,MappingValue&gt; entry : mappingValues.entrySet()) {\n&nbsp; &nbsp; \tString id = entry.getKey();\n&nbsp; &nbsp; \tString className = entry.getValue().getClz();\n&nbsp; &nbsp; \tObject obj = null;\n&nbsp; &nbsp; \tClass&lt;?&gt; clz = null;\n\t\ttry {\n\t\t\tclz = Class.forName(className);\n\t\t\tobj = clz.newInstance();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tmappingClz.put(id, clz);\n&nbsp; &nbsp; \tmappingObjs.put(id, obj);\n&nbsp; &nbsp; }\n}\n</code></pre><p>Refresh()就是通过读取mappingValues中的Bean定义，加载类，创建实例。这个方法完成之后，整个DispatcherSevlet就准备好了。</p><p>DispatcherSevlet用来处理所有的Web请求，但是目前我们只是简单地实现了Get请求的处理，通过Bean的id获取其对应的类和方法，依赖反射机制进行调用。你可以看一下相关代码。</p><pre><code class=\"language-java\">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String sPath = request.getServletPath(); //获取请求的path\n\tif (this.mappingValues.get(sPath) == null) {\n\t\treturn;\n\t}\n\n    Class&lt;?&gt; clz = this.mappingClz.get(sPath); //获取bean类定义\n    Object obj = this.mappingObjs.get(sPath);  //获取bean实例\n    String methodName = this.mappingValues.get(sPath).getMethod(); //获取调用方法名\n    Object objResult = null;\n    try {\n        Method method = clz.getMethod(methodName);\n        objResult = method.invoke(obj); //方法调用\n    } catch (Exception e) {\n    }\n    //将方法返回值写入response\n    response.getWriter().append(objResult.toString());\n}\n</code></pre><p>到这里，一个最简单的DispatcherServlet就完成了，DispatcherServlet就是一个普通的Servlet，并不神秘，只要我们有一个Servlet容器，比如Tomcat，它就能跑起来。</p><p>这个实现很简陋，调用的方法没有参数，返回值只是String，直接通过response回写。</p><p>我们试一个简单的测试类。</p><pre><code class=\"language-java\">package com.minis.test;\n\npublic class HelloWorldBean {\n\tpublic String doGet() {\n\t\treturn \"hello world!\";\n\t}\n\tpublic String doPost() {\n\t\treturn \"hello world!\";\n\t}\n}\n</code></pre><p>启动Tomcat，在浏览器内键入localhost:8080/helloworld，就能显示返回结果\"hello world for doGet!\"。</p><p>到这里，我们初步实现了MVC的框架，支持了一个简单的请求由Controller控制器（DispatcherServlet），到底层查找模型结构Model（helloWorldBean），最后返回前端渲染视图View（response.getWriter().append()）的过程。</p><h2>扩展MVC</h2><p>在这个简陋的模型基础之上，我们一步步扩展，引入@RequestMapping，还会实现ComponentScan，简化配置工作。</p><h3>简化配置</h3><p>首先我们来简化XML中的繁琐配置，在minisMVC-servlet.xml里新增<components>和<component-scan>两个标签，分别表示组件配置以及组件的扫描配置。也就是说，扫描一个包，自动配置包内满足条件的类，省去手工配置过程。你可以参考下面的代码。</component-scan></components></p><pre><code class=\"language-xml\">(minisMVC-servlet.xml)\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;components&gt;\n&nbsp; &nbsp; &lt;component-scan base-package=\"com.minis.test\" /&gt;\n&lt;/components&gt;\n</code></pre><p>上述文件将扫描com.minis.test里所有的类文件，加载并实例化它们。</p><h3>引入@RequestMapping</h3><p>接下来我们引入@RequestMapping，将 URL 和业务处理类中的某个方法对应起来，这样也就不再需要手工地将映射关系写到XML配置文件里，省去我们的手工配置工作。在Spring框架里，&nbsp;@RequestMapping 注解可支持定义在类上，但我们这里暂时不支持该注解定义在类上，只定义在方法上。我们看一下注解定义。</p><pre><code class=\"language-java\">package com.minis.web;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.RetentionPolicy;\n\n@Target(value={ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface RequestMapping {\n&nbsp; &nbsp; String value() default \"\";\n}\n\n</code></pre><p>@RequestMapping定义很简单，现在只有value一个字段，用来接收配置的URL。</p><p>有了注解定义，我们就可以动手编程实现了。因为修改了minisMVC-servlet.xml这个文件内的标签结构，因此我们提供一个新类 XmlScanComponentHelper，专门用来解析新定义的标签结构。</p><pre><code class=\"language-java\">package com.minis.web;\n\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.SAXReader;\n\npublic class XmlScanComponentHelper {\n&nbsp; &nbsp; public static List&lt;String&gt; getNodeValue(URL xmlPath) {\n&nbsp; &nbsp; &nbsp; &nbsp; List&lt;String&gt; packages = new ArrayList&lt;&gt;();\n&nbsp; &nbsp; &nbsp; &nbsp; SAXReader saxReader = new SAXReader();\n&nbsp; &nbsp; &nbsp; &nbsp; Document document = null;\n&nbsp; &nbsp; &nbsp; &nbsp; try {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; document = saxReader.read(xmlPath); //加载配置文件\n&nbsp; &nbsp; &nbsp; &nbsp; } catch (DocumentException e) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.printStackTrace();\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; Element root = document.getRootElement();\n&nbsp; &nbsp; &nbsp; &nbsp; Iterator it = root.elementIterator();\n&nbsp; &nbsp; &nbsp; &nbsp; while (it.hasNext()) { //得到XML中所有的base-package节点\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Element element = (Element) it.next();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packages.add(element.attributeValue(\"base-package\"));&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     }\n&nbsp; &nbsp; &nbsp; &nbsp; return packages;\n&nbsp; &nbsp; }\n}\n</code></pre><p>程序也很简单，原有的XmlConfigReadder 、Resource 、MappingValue 和ClassPathXmlResource 不再需要使用，取而代之的是XmlScanComponentHelper ，把扫描到的package 存储在List<string> packages 这个结构里。代码的核心就是获取“base-package”参数值，加载到内存里。</string></p><h3>修改&nbsp;DispatcherServlet</h3><p>经过上面这些步骤之后，接下来我们需要进一步修改&nbsp;DispatcherServlet ，因为最终一切的落脚点都在这个类里，这个类承载了所有请求的解析和处理请求的步骤。我们在&nbsp;DispatcherServlet 里使用下面的数据结构来存储配置。</p><pre><code class=\"language-java\">private List&lt;String&gt; packageNames = new ArrayList&lt;&gt;();\nprivate Map&lt;String,Object&gt; controllerObjs = new HashMap&lt;&gt;();\nprivate List&lt;String&gt; controllerNames = new ArrayList&lt;&gt;();\nprivate Map&lt;String,Class&lt;?&gt;&gt; controllerClasses = new HashMap&lt;&gt;();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;private List&lt;String&gt; urlMappingNames = new ArrayList&lt;&gt;();\nprivate Map&lt;String,Object&gt; mappingObjs = new HashMap&lt;&gt;();\nprivate Map&lt;String,Method&gt; mappingMethods = new HashMap&lt;&gt;();\n</code></pre><p>我们看下这些变量的作用。</p><p><img src=\"https://static001.geekbang.org/resource/image/2a/c9/2ae701e90ef7b180646a1a9f3fa6bac9.png?wh=1936x906\" alt=\"\"></p><p>接下来，Servlet初始化时我们把&nbsp;minisMVC-servlet.xml 里扫描出来的&nbsp;package 名称存入&nbsp;packageNames 列表，初始化方法&nbsp;init 中增加以下这行代码。</p><pre><code class=\"language-java\">this.packageNames = XmlScanComponentHelper.getNodeValue(xmlPath);\n</code></pre><p><span class=\"reference\">注：原有的与&nbsp;ClassPathXmlResource 、Resource 相关代码要清除。</span></p><p>我们再将&nbsp;refresh()方法分成两步：第一步初始化&nbsp;controller ，第二步则是初始化&nbsp;URL 映射。</p><p>对应的&nbsp;refresh() 方法进行如下抽象：</p><pre><code class=\"language-java\">protected void refresh() {\n&nbsp; &nbsp; initController(); // 初始化 controller&nbsp; &nbsp; &nbsp;\n    initMapping(); // 初始化 url 映射\n}\n</code></pre><p>接下来完善initController() ，其主要功能是对扫描到的每一个类进行加载和实例化，与类的名字建立映射关系，分别存在&nbsp;controllerClasses 和&nbsp;controllerObjs 这两个map里，类名就是key的值。</p><pre><code class=\"language-java\">protected void initController() {\n    //扫描包，获取所有类名&nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; this.controllerNames = scanPackages(this.packageNames);&nbsp; \n    for (String controllerName : this.controllerNames) {\n&nbsp; &nbsp; &nbsp; &nbsp; Object obj = null;\n&nbsp; &nbsp; &nbsp; &nbsp; Class&lt;?&gt; clz = null;\n&nbsp; &nbsp; &nbsp; &nbsp; try {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clz = Class.forName(controllerName); //加载类\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.controllerClasses.put(controllerName, clz);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n        } catch (Exception e) {\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; try {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; obj = clz.newInstance(); //实例化bean\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.controllerObjs.put(controllerName, obj);&nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;} catch (Exception e) {\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n</code></pre><p>扫描程序是对文件目录的递归处理，最后的结果就是把所有的类文件扫描出来。</p><pre><code class=\"language-java\">private List&lt;String&gt; scanPackages(List&lt;String&gt; packages) {\n &nbsp; &nbsp;List&lt;String&gt; tempControllerNames = new ArrayList&lt;&gt;();\n&nbsp; &nbsp; for (String packageName : packages) {\n&nbsp; &nbsp; &nbsp; &nbsp; tempControllerNames.addAll(scanPackage(packageName));&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n    }\n &nbsp; &nbsp;return tempControllerNames;\n}\nprivate List&lt;String&gt; scanPackage(String packageName) {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n    List&lt;String&gt; tempControllerNames = new ArrayList&lt;&gt;();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n    URI uri = null;\n    //将以.分隔的包名换成以/分隔的uri\n&nbsp; &nbsp; try {\n&nbsp; &nbsp; &nbsp; &nbsp; uri = this.getClass().getResource(\"/\" +&nbsp;\npackageName.replaceAll(\"\\\\.\", \"/\")).toURI();\n&nbsp;   } catch (Exception e) {\n&nbsp; &nbsp; }\n&nbsp; &nbsp; File dir = new File(uri);\n    //处理对应的文件目录\n&nbsp; &nbsp; for (File file : dir.listFiles()) { //目录下的文件或者子目录\n&nbsp; &nbsp; &nbsp; &nbsp; if(file.isDirectory()){ //对子目录递归扫描\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scanPackage(packageName+\".\"+file.getName());\n &nbsp; &nbsp; &nbsp; &nbsp;}else{ //类文件\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String controllerName = packageName +\".\"&nbsp;\n+file.getName().replace(\".class\", \"\");\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tempControllerNames.add(controllerName);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; &nbsp; return tempControllerNames;\n}\n</code></pre><p>然后完善initMapping() ，功能是初始化&nbsp;URL 映射，找到使用了注解@RequestMapping 的方法，URL 存放到&nbsp;urlMappingNames 里，映射的对象存放到&nbsp;mappingObjs 里，映射的方法存放到&nbsp;mappingMethods 里。用这个方法取代了过去解析&nbsp;Bean 得到的映射。</p><pre><code class=\"language-java\">protected void initMapping() {\n&nbsp; &nbsp; for (String controllerName : this.controllerNames) {\n&nbsp; &nbsp; &nbsp; &nbsp; Class&lt;?&gt; clazz = this.controllerClasses.get(controllerName);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Object obj = this.controllerObjs.get(controllerName);\n&nbsp; &nbsp; &nbsp; &nbsp; Method[] methods = clazz.getDeclaredMethods();\n&nbsp; &nbsp; &nbsp; &nbsp; if (methods != null) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (Method method : methods) {\n                //检查所有的方法\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; boolean isRequestMapping =&nbsp;\nmethod.isAnnotationPresent(RequestMapping.class);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (isRequestMapping) { //有RequestMapping注解\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String methodName = method.getName();\n                    //建立方法名和URL的映射\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String urlMapping =&nbsp;\nmethod.getAnnotation(RequestMapping.class).value();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.urlMappingNames.add(urlMapping);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.mappingObjs.put(urlMapping, obj);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.mappingMethods.put(urlMapping, method);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n</code></pre><p>最后略微调整&nbsp;doGet() 方法内的代码，去除不再使用的结构。</p><pre><code class=\"language-java\">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n&nbsp; &nbsp; String sPath = request.getServletPath();\n\tif (!this.urlMappingNames.contains(sPath)) {\n\t\treturn;\n\t}\n&nbsp; &nbsp; Object obj = null;\n&nbsp; &nbsp; Object objResult = null;\n&nbsp; &nbsp; try {\n&nbsp; &nbsp; &nbsp; &nbsp; Method method = this.mappingMethods.get(sPath);\n&nbsp; &nbsp; &nbsp; &nbsp; obj = this.mappingObjs.get(sPath);\n&nbsp; &nbsp; &nbsp; &nbsp; objResult = method.invoke(obj);\n    } catch (Exception e) {\n&nbsp; &nbsp; }\n&nbsp; &nbsp; response.getWriter().append(objResult.toString());&nbsp; &nbsp; &nbsp;\n}\n</code></pre><p>修改一下测试类，在com.minis.test.HelloworldBean内的测试方法上，增加@RequestMapping注解。</p><pre><code class=\"language-java\">package com.minis.test;\n\nimport com.minis.web.RequestMapping;\n\npublic class HelloWorldBean {\n&nbsp; &nbsp; @RequestMapping(\"/test\")\n&nbsp; &nbsp; public String doTest() {\n&nbsp; &nbsp; &nbsp; &nbsp; return \"hello world for doGet!\";&nbsp; &nbsp; &nbsp;\n    }\n}\n</code></pre><p>启动Tomcat进行测试，在浏览器输入框内键入：localhost:8080/test。</p><h2>小结</h2><p><img src=\"https://static001.geekbang.org/resource/image/a3/64/a36a0e7a21cdb86d7d9975d932b99364.jpg?wh=3250x3064\" alt=\"\"></p><p>我们这节课构建了一个DispatcherServlet，它是Tomcat中注册的唯一的Servlet，它承担了所有请求的处理功能。由它来解析请求中的路径与业务类Bean中方法的映射关系，调用Bean的相应方法，返回给response。</p><p>这种映射关系的建立，我们一开始是让用户自己在XML配置文件中手动声明，然后我们引入RequestMapping注解，扫描包中的类，检查注解，自动注册映射关系。这样我们初步实现了比较原始的MVC。在这个框架下，应用程序员不用再关心Servlet的使用，他们可以直接建立业务类，加上注解就可以运行。</p><p>完整源代码参见 <a href=\"https://github.com/YaleGuo/minis\">https://github.com/YaleGuo/minis</a>，mvc分支。</p><h2>课后题</h2><p>学完这节课，我也给你留一道思考题。我们在MVC中也使用了Bean这个概念，它跟我们以前章节中的Bean是什么关系？欢迎你在留言区与我交流讨论，也欢迎你把这节课分享给需要的朋友。我们下节课见！</p>","neighbors":{"left":{"article_title":"06｜再回首：如何实现一个IoC容器？","id":642367},"right":{"article_title":"08｜整合IoC和MVC：如何在Web环境中启动IoC容器？","id":643539}},"comments":[{"had_liked":false,"id":387992,"user_name":"Geek4329","can_delete":false,"product_type":"c1","uid":2028951,"ip_address":"北京","ucode":"D6FB8D1B2D5DAC","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/97/9a7ee7b3.jpg","comment_is_top":false,"comment_ctime":1709107244,"is_pvip":false,"replies":[{"id":141335,"content":"我就是用的递归啊","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1709630318,"ip_address":"澳大利亚","comment_id":387992,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"    private List&lt;String&gt; scanPackage(String packageName) {\n    \tList&lt;String&gt; tempControllerNames = new ArrayList&lt;&gt;();\n        URL url  =this.getClass().getClassLoader().getResource(&quot;&#47;&quot;+packageName.replaceAll(&quot;\\\\.&quot;, &quot;&#47;&quot;));\n        File dir = new File(url.getFile());\n        for (File file : dir.listFiles()) {\n            if(file.isDirectory()){\n            \tscanPackage(packageName+&quot;.&quot;+file.getName());\n            }else{\n                String controllerName = packageName +&quot;.&quot; +file.getName().replace(&quot;.class&quot;, &quot;&quot;);\n                tempControllerNames.add(controllerName);\n            }\n        }\n        return tempControllerNames;\n    }\n这个方法写的没问题么？照理说应该是递归把所有的类文件都加载进去，应该是tempControllerNames.addAll(scanPackage(packageName+&quot;.&quot;+file.getName()))\n是我理解有问题么？","like_count":2,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638492,"discussion_content":"我就是用的递归啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709630318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":2,"child_discussions":[{"author":{"id":2277396,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0NDY4UtG3BYWVKicTqFPRMGpFyuE6NFPSibz2kxBwC0a8KTyvEmembjQfZnx6DTTSTukm1ibicTDSj9PTTSbhV4dA/132","nickname":"撇目双人聿","note":"","ucode":"79AF3AA4122649","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":653551,"discussion_content":"我debug了一下，子目录虽然递归了，但递归结果其实没有被加入到最终结果集中。\n\nprivate List&lt;String&gt; scanPackage(String packageName) {\n        final List&lt;String&gt; tempControllerNames = new ArrayList&lt;&gt;();\n        URI uri = null;\n        try {\n            uri = this.getClass().getResource(&#34;/&#34; + packageName.replaceAll(&#34;\\\\.&#34;, &#34;/&#34;)).toURI();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        final File dir = new File(uri);\n        for (File file : dir.listFiles()) {\n            if (file.isDirectory()) { // 对子目录进行递归扫描\n                final List&lt;String&gt; dirRe = scanPackage(packageName + &#34;.&#34; + file.getName());\n                // 将递归结果放入结果集\n                tempControllerNames.addAll(dirRe);\n            } else { // 类文件\n                final String controllerName = packageName + &#34;.&#34; + file.getName().replaceAll(&#34;.class&#34;, &#34;&#34;);\n                tempControllerNames.add(controllerName);\n            }\n        }\n        return tempControllerNames;\n    }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731112656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":638492,"ip_address":"上海","group_id":0},"score":653551,"extra":""},{"author":{"id":2559052,"avatar":"https://static001.geekbang.org/account/avatar/00/27/0c/4c/2bbb7c9e.jpg","nickname":"读多多","note":"","ucode":"DF0ECE6A37DCB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2277396,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0NDY4UtG3BYWVKicTqFPRMGpFyuE6NFPSibz2kxBwC0a8KTyvEmembjQfZnx6DTTSTukm1ibicTDSj9PTTSbhV4dA/132","nickname":"撇目双人聿","note":"","ucode":"79AF3AA4122649","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655024,"discussion_content":"是的，永远只有最外层的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1733999205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":653551,"ip_address":"吉林","group_id":0},"score":655024,"extra":""}]}]},{"had_liked":false,"id":371847,"user_name":"风轻扬","can_delete":false,"product_type":"c1","uid":1542987,"ip_address":"北京","ucode":"DB972F2DF059C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/15ab499a.jpg","comment_is_top":false,"comment_ctime":1680422866,"is_pvip":false,"replies":[{"id":135656,"content":"你的理解是对的。代码问题，MiniSpring是为了学习构建的，不是工业级的。线下听课的几波学生，要对照代码进行扩展练习，自己增加功能特性增加鲁棒性。","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1680500207,"ip_address":"澳大利亚","comment_id":371847,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"思考题。我理解：MVC中的bean是为了标识这是一个controller，用来接收处理web层请求，而Spring中的bean感觉是一种服务能力，哪个地方需要这种能力，注入后就可以使用。不知道理解的对不对。\n另外，跟代码的过程中，发现一个问题，如果包下有接口，Class.newInstance就会报错的。老师，将controller实例化处的代码是不是应该加个Class.isInstance()的判断呢？","like_count":2,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612043,"discussion_content":"你的理解是对的。代码问题，MiniSpring是为了学习构建的，不是工业级的。线下听课的几波学生，要对照代码进行扩展练习，自己增加功能特性增加鲁棒性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680500207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/15ab499a.jpg","nickname":"风轻扬","note":"","ucode":"DB972F2DF059C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":612059,"discussion_content":"嗯嗯，明白了，老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680506897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":612043,"ip_address":"北京","group_id":0},"score":612059,"extra":""}]},{"author":{"id":2108088,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2a/b8/dc924db4.jpg","nickname":"木  昜","note":"","ucode":"84951C2E0B8DF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611955,"discussion_content":"感觉这个后续可以用注解来标识是否为controller，就像Spring里面的@Controller","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1680438925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/15ab499a.jpg","nickname":"风轻扬","note":"","ucode":"DB972F2DF059C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2108088,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2a/b8/dc924db4.jpg","nickname":"木  昜","note":"","ucode":"84951C2E0B8DF9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611964,"discussion_content":"对，我也是这么想的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680441059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":611955,"ip_address":"北京","group_id":0},"score":611964,"extra":""}]}]},{"had_liked":false,"id":375647,"user_name":"KernelStone","can_delete":false,"product_type":"c1","uid":2736140,"ip_address":"俄罗斯","ucode":"B75C0100AD52B8","user_header":"https://static001.geekbang.org/account/avatar/00/29/c0/0c/f726d4d0.jpg","comment_is_top":false,"comment_ctime":1685784852,"is_pvip":false,"replies":[{"id":137111,"content":"也感谢你的分享","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1685836027,"ip_address":"澳大利亚","comment_id":375647,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"搞了半天这节内容对我这种工程小白而言，难是难在从IDEA中进行项目部署。终于跑通了，参考链接如下：\n1、https:&#47;&#47;blog.csdn.net&#47;Wxy971122&#47;article&#47;details&#47;123508532\n2、https:&#47;&#47;blog.csdn.net&#47;fannyoona&#47;article&#47;details&#47;113933113\n3、另外有需要可以搜一下Tomcat控制台乱码问题\n\n还有感谢评论区的帮助！","like_count":1,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620110,"discussion_content":"也感谢你的分享","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1685836028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374315,"user_name":"零零后糖豆豆","can_delete":false,"product_type":"c1","uid":1614090,"ip_address":"中国香港","ucode":"B83235955294C7","user_header":"https://static001.geekbang.org/account/avatar/00/18/a1/0a/b1f68315.jpg","comment_is_top":false,"comment_ctime":1683886128,"is_pvip":false,"replies":[{"id":136721,"content":"赞","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1684154048,"ip_address":"澳大利亚","comment_id":374315,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"response设置contentType避免返回中文乱码\nresponse.setContentType(&quot;text&#47;html; charset=UTF-8&quot;);","like_count":1,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618237,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684154048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371583,"user_name":"云韵","can_delete":false,"product_type":"c1","uid":1025622,"ip_address":"浙江","ucode":"3DE26DBAAAEDE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/56/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1680078287,"is_pvip":false,"replies":[{"id":135577,"content":"结果是对的上的。这一节中的开始的代码后面被重写了。你手工跟一遍最后就是一样的。不想跟的话，看文稿知道怎么演变过来的也可以。","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1680087243,"ip_address":"澳大利亚","comment_id":371583,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"老师 文中的代码和下载的代码分支geek-mvc1 对应不上","like_count":1,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611437,"discussion_content":"结果是对的上的。这一节中的开始的代码后面被重写了。你手工跟一遍最后就是一样的。不想跟的话，看文稿知道怎么演变过来的也可以。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1680087243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371525,"user_name":"x-arts","can_delete":false,"product_type":"c1","uid":1024223,"ip_address":"北京","ucode":"415FBFAC7D0108","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/df/43a260d1.jpg","comment_is_top":false,"comment_ctime":1680014448,"is_pvip":false,"replies":[{"id":135578,"content":"你看下Github上的，文稿中的开始部分的代码后面都重写过了，文稿是要展示演变的过程。minispring的目的是供理解框架的结构用的，便于以后读Spring框架源代码的时候理解。感谢你的指教。","user_name":"作者回复","user_name_real":"作者","uid":1864890,"ctime":1680087371,"ip_address":"澳大利亚","comment_id":371525,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"源码给的过于随意了。。。。","like_count":1,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611438,"discussion_content":"你看下Github上的，文稿中的开始部分的代码后面都重写过了，文稿是要展示演变的过程。minispring的目的是供理解框架的结构用的，便于以后读Spring框架源代码的时候理解。感谢你的指教。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1680087371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2389433,"avatar":"https://static001.geekbang.org/account/avatar/00/24/75/b9/837d89af.jpg","nickname":"Godffy","note":"","ucode":"AC9B1108380E47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626495,"discussion_content":"确实随意。DispatcherServlet里的initController()方法，扫描test包下面的类，混了个ASerive接口，newInstance()报错，不过不影响文章表达的意思。这小节感觉核心还是在扫描包找到Controller下的注解请求。debug看了下才理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692989093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371412,"user_name":"睿智的仓鼠","can_delete":false,"product_type":"c1","uid":2781305,"ip_address":"湖北","ucode":"914D56E47B01F2","user_header":"https://static001.geekbang.org/account/avatar/00/2a/70/79/bb591140.jpg","comment_is_top":false,"comment_ctime":1679909178,"is_pvip":false,"replies":[{"id":135497,"content":"感谢。文稿中排版有点问题。","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1679915812,"ip_address":"澳大利亚","comment_id":371412,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"加入注解后改造的initMapping()方法中\nClass&lt;?&gt; clazz = this.controllerClasses.get(controllerName);下面缺少了一行：\nObject obj = this.controllerObjs.get(controllerName);","like_count":1,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611063,"discussion_content":"感谢。文稿中排版有点问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679915812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372330,"user_name":"Yangjing","can_delete":false,"product_type":"c1","uid":1018061,"ip_address":"广东","ucode":"D88DFD4958D07C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","comment_is_top":false,"comment_ctime":1681002956,"is_pvip":false,"replies":[{"id":135909,"content":"你要配web.xml,下载GitHub上的代码看看","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1681043508,"ip_address":"澳大利亚","comment_id":372330,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"老师，扩展MVC前，启动 Tomcat，是要怎么配置 Tomcat、MiniS 配合启动的呢","like_count":0,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612965,"discussion_content":"你要配web.xml,下载GitHub上的代码看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681043508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2381768,"avatar":"https://static001.geekbang.org/account/avatar/00/24/57/c8/dd26d0de.jpg","nickname":"PCZ","note":"","ucode":"AF24F1999E5676","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":615769,"discussion_content":"需要web.xml\n方式一：可以将整个项目目录复制到tomcat下的webapps目录下，启动tomcat，通过url http://localhost:8080/{application_context}/helloworld即可访问\n方式二：将整个项目打包war包（maven下需要配置一下，否则打包会忽略xml文件），复制到tomcat下的webapps目录下，启动tomcat，通过url http://localhost:8080/{application_context}/helloworld即可访问","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1682426896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371486,"user_name":"睿智的仓鼠","can_delete":false,"product_type":"c1","uid":2781305,"ip_address":"湖北","ucode":"914D56E47B01F2","user_header":"https://static001.geekbang.org/account/avatar/00/2a/70/79/bb591140.jpg","comment_is_top":false,"comment_ctime":1679985369,"is_pvip":false,"replies":[{"id":135571,"content":"不一样啊，一个是servletname另一个是URLMapping。","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1680003336,"ip_address":"澳大利亚","comment_id":371486,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"请问郭老师，最后DispatcherServlet中的controllerObjs和mappingObjs这两个map，存储的都是请求地址和处理请求的bean的映射关系，这里为什么要维护两份？我能理解它们的思想不同，但也想不出维护两份后期会有什么扩展。后期会体现出这样做的好处吗？","like_count":0,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611275,"discussion_content":"不一样啊，一个是servletname另一个是URLMapping。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680003336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377702,"user_name":"Ben Guo","can_delete":false,"product_type":"c1","uid":2974700,"ip_address":"广东","ucode":"A8BD34C25D50DB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/8HibfYTXFWaeXsujL7j1ZEulbibhiaMrTxkm3PticiaP9q3fGv8vkp1XHo9zsVE7Bh9HzkNicOnicd9QHFR73cefiaR7Qg/132","comment_is_top":false,"comment_ctime":1689061711,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"关于启动Tomcat，可以加入 embeded tomcat的依赖，然后用下面的代码 跑起来\n\npublic class App \n{\n    public static void main( String[] args ) throws LifecycleException {\n        System.out.println( &quot;Hello World!&quot; );\n        Tomcat tomcat = new Tomcat();\n        String webappDirLocation = &quot;WebContent&quot;;\n        StandardContext context = (StandardContext) tomcat.addWebapp(&quot;&#47;&quot;, new File(webappDirLocation).getAbsolutePath());\n        Connector connector = new Connector();\n        connector.setPort(8080);\n        tomcat.setConnector(connector);\n        tomcat.start();\n        tomcat.getServer().await();\n    }\n}","like_count":5,"discussions":[{"author":{"id":1423699,"avatar":"https://static001.geekbang.org/account/avatar/00/15/b9/53/a72bebcc.jpg","nickname":"赵欣","note":"","ucode":"6066BD20C6123E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638756,"discussion_content":"DispatcherServlet.java还要改下这段代码，才能运行\n原来\nURL url = this.getClass().getClassLoader().getResource(&#34;/&#34; + packageName.replaceAll(&#34;\\\\.&#34;, &#34;/&#34;));\n替换成：\nURL url = this.getClass().getResource(&#34;/&#34; + packageName.replaceAll(&#34;\\\\.&#34;, &#34;/&#34;));","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709878831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372346,"user_name":"adelyn","can_delete":false,"product_type":"c1","uid":2981014,"ip_address":"北京","ucode":"E7DD2F47EBD6DA","user_header":"https://static001.geekbang.org/account/avatar/00/2d/7c/96/079a158d.jpg","comment_is_top":false,"comment_ctime":1681011186,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100536701,"comment_content":"感谢老师，之前没注意过requestMapping为什么是mapping，今天恍然大悟，原来是用url做key维护了一个mapping，","like_count":2},{"had_liked":false,"id":372348,"user_name":"adelyn","can_delete":false,"product_type":"c1","uid":2981014,"ip_address":"北京","ucode":"E7DD2F47EBD6DA","user_header":"https://static001.geekbang.org/account/avatar/00/2d/7c/96/079a158d.jpg","comment_is_top":false,"comment_ctime":1681011319,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100536701,"comment_content":"上条写错了，维护了三个mapping，三个mapping正好提供了反射的三个条件，看源码太爽了","like_count":1},{"had_liked":false,"id":371441,"user_name":"马儿","can_delete":false,"product_type":"c1","uid":2247080,"ip_address":"四川","ucode":"542E23D7B6AB01","user_header":"","comment_is_top":false,"comment_ctime":1679936347,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100536701,"comment_content":"思考题：mvc中的bean只是项目中的一种bean，而ioc管理的是整个项目的bean。可以说mvc中的bean是整个ioc bean的子集","like_count":1},{"had_liked":false,"id":395530,"user_name":"撇目双人聿","can_delete":false,"product_type":"c1","uid":2277396,"ip_address":"上海","ucode":"79AF3AA4122649","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0NDY4UtG3BYWVKicTqFPRMGpFyuE6NFPSibz2kxBwC0a8KTyvEmembjQfZnx6DTTSTukm1ibicTDSj9PTTSbhV4dA/132","comment_is_top":false,"comment_ctime":1731110004,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100536701,"comment_content":"Mac OS 上 Tomcat的启动参考：https:&#47;&#47;medium.com&#47;@raju6508&#47;a-beginners-guide-installing-apache-tomcat-on-your-mac-11fa0995f3c7 (一步\n一步照着做就可以正常启动，特别要注意的是去官网下载 tomcat 的 tar 文件不要下载错了!)\n","like_count":0},{"had_liked":false,"id":390754,"user_name":"dirtychill","can_delete":false,"product_type":"c1","uid":3866578,"ip_address":"江苏","ucode":"4D3172C60E522A","user_header":"https://static001.geekbang.org/account/avatar/00/3a/ff/d2/c1f5334d.jpg","comment_is_top":false,"comment_ctime":1716191454,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100536701,"comment_content":"MVC的bean指的是controller，是一种特殊的bean","like_count":0},{"had_liked":false,"id":389514,"user_name":"Geek_28bb47","can_delete":false,"product_type":"c1","uid":3173602,"ip_address":"陕西","ucode":"86F5DCFFDDB723","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BBaAkryVSFImaoWL5QcRbSpB8IfUbUZGfzGH4xUz0qicJGU1vREvcFedgWAXJlYX9ibkzG3BlnJEQDzejZ5ibLCGA/132","comment_is_top":false,"comment_ctime":1712757261,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100536701,"comment_content":"https:&#47;&#47;github.com&#47;ykexc&#47;minispring每节课对应一个分支，使用嵌入式tomcat,无需IDEA配置。每节课代码都可以运行欢迎大家来参考补充。","like_count":0},{"had_liked":false,"id":385673,"user_name":"Geek_08c860","can_delete":false,"product_type":"c1","uid":3008282,"ip_address":"北京","ucode":"40AE7BE12B4E51","user_header":"","comment_is_top":false,"comment_ctime":1703075255,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100536701,"comment_content":"idea项目设置-工件-修复-设置右下方的路径为 WebContent，默认的 web 是不存在的。然后启动 tomcat，即可解决 404 问题","like_count":0},{"had_liked":false,"id":376101,"user_name":"云从","can_delete":false,"product_type":"c1","uid":2682971,"ip_address":"四川","ucode":"96442F21D37C0F","user_header":"https://static001.geekbang.org/account/avatar/00/28/f0/5b/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1686290134,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100536701,"comment_content":"omcat:HTTP状态 404 - 未找到解决方法:\nhttps:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;493657861?utm_id=0","like_count":0}]}