{"id":40447,"title":"04 | 复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度","content":"<p>上一节，我们讲了复杂度的大O表示法和几个分析技巧，还举了一些常见复杂度分析的例子，比如O(1)、O(logn)、O(n)、O(nlogn)复杂度分析。掌握了这些内容，对于复杂度分析这个知识点，你已经可以到及格线了。但是，我想你肯定不会满足于此。</p><p>今天我会继续给你讲四个复杂度分析方面的知识点，<strong><span class=\"orange\">最好情况时间复杂度</span></strong>（best case time complexity）、<strong><span class=\"orange\">最坏情况时间复杂度</span></strong>（worst case time complexity）、<strong><span class=\"orange\">平均情况时间复杂度</span></strong>（average case time complexity）、<strong><span class=\"orange\">均摊时间复杂度</span></strong>（amortized time complexity）。如果这几个概念你都能掌握，那对你来说，复杂度分析这部分内容就没什么大问题了。</p><h2>最好、最坏情况时间复杂度</h2><p>上一节我举的分析复杂度的例子都很简单，今天我们来看一个稍微复杂的。你可以用我上节教你的分析技巧，自己先试着分析一下这段代码的时间复杂度。</p><pre><code>// n表示数组array的长度\nint find(int[] array, int n, int x) {\n  int i = 0;\n  int pos = -1;\n  for (; i &lt; n; ++i) {\n    if (array[i] == x) pos = i;\n  }\n  return pos;\n}\n</code></pre><p>你应该可以看出来，这段代码要实现的功能是，在一个无序的数组（array）中，查找变量x出现的位置。如果没有找到，就返回-1。按照上节课讲的分析方法，这段代码的复杂度是O(n)，其中，n代表数组的长度。</p><!-- [[[read_end]]] --><p>我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，因为有可能中途找到就可以提前结束循环了。但是，这段代码写得不够高效。我们可以这样优化一下这段查找代码。</p><pre><code>// n表示数组array的长度\nint find(int[] array, int n, int x) {\n  int i = 0;\n  int pos = -1;\n  for (; i &lt; n; ++i) {\n    if (array[i] == x) {\n       pos = i;\n       break;\n    }\n  }\n  return pos;\n}\n</code></pre><p>这个时候，问题就来了。我们优化完之后，这段代码的时间复杂度还是O(n)吗？很显然，咱们上一节讲的分析方法，解决不了这个问题。</p><p>因为，要查找的变量x可能出现在数组的任意位置。如果数组中第一个元素正好是要查找的变量x，那就不需要继续遍历剩下的n-1个数据了，那时间复杂度就是O(1)。但如果数组中不存在变量x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了O(n)。所以，不同的情况下，这段代码的时间复杂度是不一样的。</p><p>为了表示代码在不同情况下的不同时间复杂度，我们需要引入三个概念：最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度。</p><p>顾名思义，<strong>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度</strong>。就像我们刚刚讲到的，在最理想的情况下，要查找的变量x正好是数组的第一个元素，这个时候对应的时间复杂度就是最好情况时间复杂度。</p><p>同理，<strong>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度</strong>。就像刚举的那个例子，如果数组中没有要查找的变量x，我们需要把整个数组都遍历一遍才行，所以这种最糟糕情况下对应的时间复杂度就是最坏情况时间复杂度。</p><h2>平均情况时间复杂度</h2><p>我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率其实并不大。为了更好地表示平均情况下的复杂度，我们需要引入另一个概念：平均情况时间复杂度，后面我简称为平均时间复杂度。</p><p>平均时间复杂度又该怎么分析呢？我还是借助刚才查找变量x的例子来给你解释。</p><p>要查找的变量x在数组中的位置，有n+1种情况：<strong>在数组的0～n-1位置中</strong>和<strong>不在数组中</strong>。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以n+1，就可以得到需要遍历的元素个数的平均值，即：</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/2f/d889a358b8eccc5bbb90fc16e327a22f.jpg?wh=1138*214\" alt=\"\"></p><p>我们知道，时间复杂度的大O标记法中，可以省略掉系数、低阶、常量，所以，咱们把刚刚这个公式简化之后，得到的平均时间复杂度就是O(n)。</p><p>这个结论虽然是正确的，但是计算过程稍微有点儿问题。究竟是什么问题呢？我们刚讲的这n+1种情况，出现的概率并不是一样的。我带你具体分析一下。（这里要稍微用到一点儿概率论的知识，不过非常简单，你不用担心。）</p><p>我们知道，要查找的变量x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为1/2。另外，要查找的数据出现在0～n-1这n个位置的概率也是一样的，为1/n。所以，根据概率乘法法则，要查找的数据出现在0～n-1中任意位置的概率就是1/(2n)。</p><p>因此，前面的推导过程中存在的最大问题就是，没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/36/7f/36c0aabdac69032f8a43368f5e90c67f.jpg?wh=718*214\" alt=\"\"></p><p>这个值就是概率论中的<strong>加权平均值</strong>，也叫作<strong>期望值</strong>，所以平均时间复杂度的全称应该叫<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。</p><p>引入概率之后，前面那段代码的加权平均值为(3n+1)/4。用大O表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是O(n)。</p><p>你可能会说，平均时间复杂度分析好复杂啊，还要涉及概率论的知识。实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。像我们上一节课举的那些例子那样，很多时候，我们使用一个复杂度就可以满足需求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p><h2>均摊时间复杂度</h2><p>到此为止，你应该已经掌握了算法复杂度分析的大部分内容了。下面我要给你讲一个更加高级的概念，均摊时间复杂度，以及它对应的分析方法，摊还分析（或者叫平摊分析）。</p><p>均摊时间复杂度，听起来跟平均时间复杂度有点儿像。对于初学者来说，这两个概念确实非常容易弄混。我前面说了，大部分情况下，我们并不需要区分最好、最坏、平均三种复杂度。平均复杂度只在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。</p><p>老规矩，我还是借助一个具体的例子来帮助你理解。（当然，这个例子只是我为了方便讲解想出来的，实际上没人会这么写。）</p><pre><code> // array表示一个长度为n的数组\n // 代码中的array.length就等于n\n int[] array = new int[n];\n int count = 0;\n \n void insert(int val) {\n    if (count == array.length) {\n       int sum = 0;\n       for (int i = 0; i &lt; array.length; ++i) {\n          sum = sum + array[i];\n       }\n       array[0] = sum;\n       count = 1;\n    }\n\n    array[count] = val;\n    ++count;\n }\n</code></pre><p>我先来解释一下这段代码。这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的count == array.length时，我们用for循环遍历数组求和，并清空数组，将求和之后的sum值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p><p>那这段代码的时间复杂度是多少呢？你可以先用我们刚讲到的三种时间复杂度的分析方法来分析一下。</p><p>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为count的位置就可以了，所以最好情况时间复杂度为O(1)。最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为O(n)。</p><p>那平均时间复杂度是多少呢？答案是O(1)。我们还是可以通过前面讲的概率论的方法来分析。</p><p>假设数组的长度是n，根据数据插入的位置的不同，我们可以分为n种情况，每种情况的时间复杂度是O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是O(n)。而且，这n+1种情况发生的概率一样，都是1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p><p><img src=\"https://static001.geekbang.org/resource/image/6d/ed/6df62366a60336d9de3bc34f488d8bed.jpg?wh=1142*156\" alt=\"\"></p><p>至此为止，前面的最好、最坏、平均时间复杂度的计算，理解起来应该都没有问题。但是这个例子里的平均复杂度分析其实并不需要这么复杂，不需要引入概率论的知识。这是为什么呢？我们先来对比一下这个insert()的例子和前面那个find()的例子，你就会发现这两者有很大差别。</p><p>首先，find()函数在极端情况下，复杂度才为O(1)。但insert()在大部分情况下，时间复杂度都为O(1)。只有个别情况下，复杂度才比较高，为O(n)。这是insert()<strong>第一个</strong>区别于find()的地方。</p><p>我们再来看<strong>第二个</strong>不同的地方。对于insert()函数来说，O(1)时间复杂度的插入和O(n)时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个O(n)插入之后，紧跟着n-1个O(1)的插入操作，循环往复。</p><p>所以，针对这样一种特殊场景的复杂度分析，我们并不需要像之前讲平均复杂度分析方法那样，找出所有的输入情况及相应的发生概率，然后再计算加权平均值。</p><p>针对这种特殊的场景，我们引入了一种更加简单的分析方法：<strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字，叫<strong>均摊时间复杂度</strong>。</p><p>那究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p><p>我们还是继续看在数组中插入数据的这个例子。每一次O(n)的插入操作，都会跟着n-1次O(1)的插入操作，所以把耗时多的那次操作均摊到接下来的n-1次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是O(1)。这就是均摊分析的大致思路。你都理解了吗？</p><p>均摊时间复杂度和摊还分析应用场景比较特殊，所以我们并不会经常用到。为了方便你理解、记忆，我这里简单总结一下它们的应用场景。如果你遇到了，知道是怎么回事儿就行了。</p><p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p><p>尽管很多数据结构和算法书籍都花了很大力气来区分平均时间复杂度和均摊时间复杂度，但其实我个人认为，<strong>均摊时间复杂度就是一种特殊的平均时间复杂度</strong>，我们没必要花太多精力去区分它们。你最应该掌握的是它的分析方法，摊还分析。至于分析出来的结果是叫平均还是叫均摊，这只是个说法，并不重要。</p><h2>内容小结</h2><p>今天我们学习了几个复杂度分析相关的概念，分别有：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。之所以引入这几个复杂度概念，是因为，同一段代码，在不同输入的情况下，复杂度量级有可能是不一样的。</p><p>在引入这几个概念之后，我们可以更加全面地表示一段代码的执行效率。而且，这几个概念理解起来都不难。最好、最坏情况下的时间复杂度分析起来比较简单，但平均、均摊两个复杂度分析相对比较复杂。如果你觉得理解得还不是很深入，不用担心，在后续具体的数据结构和算法学习中，我们可以继续慢慢实践！</p><h2>课后思考</h2><p>我们今天学的几个复杂度分析方法，你都掌握了吗？你可以用今天学习的知识，来分析一下下面这个add()函数的时间复杂度。</p><pre><code>// 全局变量，大小为10的数组array，长度len，下标i。\nint array[] = new int[10]; \nint len = 10;\nint i = 0;\n\n// 往数组中添加一个元素\nvoid add(int element) {\n   if (i &gt;= len) { // 数组空间不够了\n     // 重新申请一个2倍大小的数组空间\n     int new_array[] = new int[len*2];\n     // 把原来array数组中的数据依次copy到new_array\n     for (int j = 0; j &lt; len; ++j) {\n       new_array[j] = array[j];\n     }\n     // new_array复制给array，array现在大小就是2倍len了\n     array = new_array;\n     len = 2 * len;\n   }\n   // 将element放到下标为i的位置，下标i加一\n   array[i] = element;\n   ++i;\n}\n</code></pre><p>欢迎留言和我分享，我会第一时间给你反馈。</p>","comments":[{"had_liked":true,"id":28532,"user_name":"Alvin","can_delete":false,"product_type":"c1","uid":1026960,"ip_address":"","ucode":"BAC5FDAF1E3E5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/90/52d85edf.jpg","comment_is_top":false,"comment_ctime":1538099769,"is_pvip":false,"replies":[{"id":"10255","content":"嗯嗯 是的 多谢你。同学们帮把这一条顶上去吧 可以让其他同学都看看","user_name":"作者回复","comment_id":28532,"uid":"1190123","ip_address":"","utype":1,"ctime":1538100446,"user_name_real":"gg"}],"discussion_count":29,"race_medal":0,"score":"10713186535993","product_id":100017301,"comment_content":"老师讲的很好，练习题最好是O(1)，最差是O(n), 均摊是O(1)。<br><br>看到好多人纠结于清空数组的问题: 对于可反复读写的存储空间，使用者认为它是空的它就是空的。如果你定义清空是全部重写为0或者某个值，那也可以！但是老师举的例子完全没必要啊！写某个值和写任意值在这里有区别吗，使用值只关心要存的新值！所以老师的例子，清空把下标指到第一个位置就可以了！","like_count":2495,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425296,"discussion_content":"嗯嗯 是的 多谢你。同学们帮把这一条顶上去吧 可以让其他同学都看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538100446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899911,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fd/87/24a3553c.jpg","nickname":"小福","note":"","ucode":"C5D78EAD860498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371940,"discussion_content":"大多数时候看文章就只是看文章，基本不看评论。但是在这里，看评论的收获能和文章是等同的","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1620091436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2441106,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3f/92/f4a1c192.jpg","nickname":"GO","note":"","ucode":"F04DF8FA713EF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359050,"discussion_content":"作为一个初学者（对于数据结构与算法还没有什么大的概念），对于数组扩容这些概念没有任何的想法，因为根本不知道。但是，理解小争哥的代码，我认为可以类似的看作n（与数学中的一些概念相似），因为重点是分析时间复杂度。\n如果我的理解有什么不对的地方，欢迎指正。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616110511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/02/a5/3b777a1d.jpg","nickname":"Colin","note":"","ucode":"BE31A244CFC696","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159293,"discussion_content":"倒数第三句应该是“使用者只关心要存的新值”。看了留言能意会，但总感觉清空数组得让这个Array的length为0才算，emmmm，JS写多了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580660049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1245861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/02/a5/3b777a1d.jpg","nickname":"Colin","note":"","ucode":"BE31A244CFC696","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302210,"discussion_content":"没有delete []，内存泄漏了吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598843015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":159293,"ip_address":""},"score":302210,"extra":""}]},{"author":{"id":1603640,"avatar":"https://static001.geekbang.org/account/avatar/00/18/78/38/da3959cc.jpg","nickname":"一","note":"","ucode":"BCC6241C4CC6D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33712,"discussion_content":"为啥我留不了言。。。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571140952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1603640,"avatar":"https://static001.geekbang.org/account/avatar/00/18/78/38/da3959cc.jpg","nickname":"一","note":"","ucode":"BCC6241C4CC6D1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60841,"discussion_content":"兄弟你可以啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574759453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":33712,"ip_address":""},"score":60841,"extra":""}]},{"author":{"id":1981574,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3c/86/f964868c.jpg","nickname":"Guanjm","note":"","ucode":"E472FA918DF9E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573634,"discussion_content":"清空数组，这么讲是不是有点不合适？ 数组怎么清空？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653557097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1679480,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a0/78/3e591452.jpg","nickname":"wild._b","note":"","ucode":"3B101DF318F1ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338674,"discussion_content":"这是高手","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609336209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1183261,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/IVPDicrgEUa8z0gWIw9DDXXcgFIZViaWf2KTJgW9Y3sAVea8crCDvRRxboOIZbPjEHDiaTTX0Tyr4Qxqk1GocibSAA/132","nickname":"zYoung","note":"","ucode":"667F136DEE54FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32432,"discussion_content":"是的,用一两个变量确定数组内有效数据范围比每次都清空数据性能更好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571036412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1183261,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/IVPDicrgEUa8z0gWIw9DDXXcgFIZViaWf2KTJgW9Y3sAVea8crCDvRRxboOIZbPjEHDiaTTX0Tyr4Qxqk1GocibSAA/132","nickname":"zYoung","note":"","ucode":"667F136DEE54FF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302212,"discussion_content":"没有delete []，内存泄漏了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598843027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":32432,"ip_address":""},"score":302212,"extra":""}]},{"author":{"id":1520494,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLpsABx1fRPibRzHve9BGpLRvoC8X2V5rFBxSKEmbSplYSLElic2JrpFk44wy8D7PncPa9rvJ5aOoaw/132","nickname":"styun","note":"","ucode":"7DF15A6E7BC5B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2873,"discussion_content":"不明白，len不是已经是确定的常量10么？n从哪里来。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564006847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1689190,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c6/66/e3bb1434.jpg","nickname":"(^3^)","note":"","ucode":"B5DB5FD614BED6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1520494,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLpsABx1fRPibRzHve9BGpLRvoC8X2V5rFBxSKEmbSplYSLElic2JrpFk44wy8D7PncPa9rvJ5aOoaw/132","nickname":"styun","note":"","ucode":"7DF15A6E7BC5B7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24606,"discussion_content":"方法被调用2n次的时候 数组不就被扩容n次了吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570194892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2873,"ip_address":""},"score":24606,"extra":""},{"author":{"id":1690431,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cb/3f/3d044d18.jpg","nickname":"贵子","note":"","ucode":"A94801C05CB07E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1520494,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLpsABx1fRPibRzHve9BGpLRvoC8X2V5rFBxSKEmbSplYSLElic2JrpFk44wy8D7PncPa9rvJ5aOoaw/132","nickname":"styun","note":"","ucode":"7DF15A6E7BC5B7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25113,"discussion_content":"这其实是动态数组的一个扩容策略，n就是插入的元素个数，len是capacity","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570423213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2873,"ip_address":""},"score":25113,"extra":""},{"author":{"id":1266597,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/oseia6IjJIPziamTI2EQ0Bpr8icUicXTea2UuH105t4Bia4yFwBHld49cIQbjORvDdTtMCVdL39H9WxFwzyXspqqHUg/132","nickname":"groot888","note":"","ucode":"50E50681D6BE0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1520494,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLpsABx1fRPibRzHve9BGpLRvoC8X2V5rFBxSKEmbSplYSLElic2JrpFk44wy8D7PncPa9rvJ5aOoaw/132","nickname":"styun","note":"","ucode":"7DF15A6E7BC5B7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":154768,"discussion_content":"我也有同样的疑问，插入例子是用n表示长度，这里用常数10表示长度，是两回事阿，插入业没涉及到扩容阿","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580181536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2873,"ip_address":""},"score":154768,"extra":""}]},{"author":{"id":2973403,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/5e/db/fd751769.jpg","nickname":"繁华落尽","note":"","ucode":"95299159D2947B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590951,"discussion_content":"6","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666184883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1548569,"avatar":"https://static001.geekbang.org/account/avatar/00/17/a1/19/a9d50cc0.jpg","nickname":"黎明的雾","note":"","ucode":"6BE3737F0E7067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588079,"discussion_content":"知识点:\n1. 最好情况时间复杂度  \n2. 最坏情况时间复杂度\n3. 平均时间复杂度（加权）\n\n练习题:\n1. o（1）,o（1），o（n）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663546678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2853200,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/89/50/aee9fdab.jpg","nickname":"小杰","note":"","ucode":"BBDF8E9F348F65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543266,"discussion_content":"是的，你解答了我看这篇文章的疑惑，不需要关心清不清空。对于老师的代码，我们只需要分析复杂度，以及最后你想存什么就存什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641038047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2708062,"avatar":"","nickname":"Geek_20bf23","note":"","ucode":"A4BC7B8DD16A2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398006,"discussion_content":"我大喊一声:卧槽!牛逼!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632713458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1492762,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c7/1a/8175ff37.jpg","nickname":"alvin","note":"","ucode":"110A84E800CF17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314910,"discussion_content":"厉害😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603208216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302207,"discussion_content":"没有delete []，内存泄漏了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598842839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1666451,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6d/93/49260328.jpg","nickname":"黄小六","note":"","ucode":"454B410C4030DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302437,"discussion_content":"小伙子。跑偏了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598923695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302207,"ip_address":""},"score":302437,"extra":""},{"author":{"id":2729802,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/D62JX0VEX0yhnWxgbiaXMUnEqdsVxc8JMxUBibVicbLSZ6zia606EG0zI9oosiceHsdiavDZGUyHzcvsEExFGxwP4mDg/132","nickname":"Geek_828b39","note":"","ucode":"DE2A5F215A3C1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402206,"discussion_content":"没有内存泄漏。这就是个测试代码，定义了一个全局的数据，进程退出后内存就会释放了。又不是频繁申请了内存不释放，所以不存在内存泄漏。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633831258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302207,"ip_address":""},"score":402206,"extra":""}]},{"author":{"id":1585737,"avatar":"https://static001.geekbang.org/account/avatar/00/18/32/49/a97fc6df.jpg","nickname":"Mr. Cheng","note":"","ucode":"A6D81A7D92160E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45690,"discussion_content":"就是上面那个例子的变形","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573055539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1585737,"avatar":"https://static001.geekbang.org/account/avatar/00/18/32/49/a97fc6df.jpg","nickname":"Mr. Cheng","note":"","ucode":"A6D81A7D92160E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302211,"discussion_content":"没有delete []，内存泄漏了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598843019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":45690,"ip_address":""},"score":302211,"extra":""}]},{"author":{"id":1656343,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLCg9gt3G2L7DRZ2uXKdUIF7Avx5JDhX7c5TkhkczXzkjnprPEuILUQvKxmMvqqgxZeYyExa1jQ4w/132","nickname":"小树苗","note":"","ucode":"90A0A11285B2A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38613,"discussion_content":"感觉这种数组的扩展还是有必要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571809409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":28420,"user_name":"阿杜S考特","can_delete":false,"product_type":"c1","uid":1080257,"ip_address":"","ucode":"0107E78B815B66","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/c1/22fbcab2.jpg","comment_is_top":false,"comment_ctime":1538092494,"is_pvip":false,"discussion_count":54,"race_medal":0,"score":"3746749574606","product_id":100017301,"comment_content":"当i &lt; len时, 即 i = 0,1,2,...,n-1的时候，for循环不走，所以这n次的时间复杂度都是O(1);<br>当i &gt;= len时, 即 i = n的时候，for循环进行数组的copy，所以只有这1次的时间复杂度是O(n);<br>由此可知:<br>该算法的最好情况时间复杂度(best case time complexity)为O(1);<br>最坏情况时间复杂度(worst case time complexity)为O(n);<br>平均情况时间复杂度(average case time complexity),<br>第一种计算方式: (1+1+...+1+n)&#47;(n+1) = 2n&#47;(n+1) 【注: 式子中1+1+...+1中有n个1】,所以平均复杂度为O(1);<br>第二种计算方式(加权平均法，又称期望): 1*(1&#47;n+1)+1*(1&#47;n+1)+...+1*(1&#47;n+1)+n*(1&#47;(n+1))=1，所以加权平均时间复杂度为O(1);<br>第三种计算方式(均摊时间复杂度): 前n个操作复杂度都是O(1)，第n+1次操作的复杂度是O(n)，所以把最后一次的复杂度分摊到前n次上，那么均摊下来每次操作的复杂度为O(1)","like_count":873,"discussions":[{"author":{"id":1689425,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/51/88dcbf26.jpg","nickname":"DZ小枫","note":"","ucode":"2603BF5C777389","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246054,"discussion_content":"老铁，请问，最后的均摊时间复杂度结果没有问题，但分析过程是否值得商榷。\n\n1.您的初始评论：\n“第三种计算方式(均摊时间复杂度): 前n个操作复杂度都是O(1)，第n+1次操作的复杂度是O(n)，所以把最后一次的复杂度分摊到前n次上，那么均摊下来每次操作的复杂度为O(1)“\n\n2.向前均摊变为向后均摊，如何。\n请问，如果变为\n “把每一次O(n)时间复杂度，用后面的 n -1 次 O(1) 均摊一下“，\n是否合适。\n\n3.向后均摊分析\n① n==10\n初始len等于10\n当i 等于 10时，满足if (i >= len)，触发for循环执行10次，\narray[10]等于element（array[i] = element;++i;）也会被执行，调用完add()方法后，\ni等于11，len 变为了20，此时时间复杂度是O(n)-->(循环开始前len等于10，把len当作n)。\n\n后面继续执行add()方法，i的值 从 11 12 到 19，均不满足if (i >= len)，\n累计 执行了9次(最近的一次的for循环执行了10次，认定为n次。那么9次，可认为 n -1 次)。\n\n②n==20\n当i 等于 20时，满足if (i >= len)，触发for循环执行20次，\narray[20]等于element（array[i] = element;++i;）也会被执行，调用完add()方法后，\ni等于21，len 变为了40，此时时间复杂度是O(n)-->(循环开始前len等于20，把len当作n)。\n\n后面继续执行add()方法，i的值 从 21 22 到 39，均不满足if (i >= len)，\n累计 执行了19次(最近的一次for循环执行了20次，认定为n次。那么19次，可认为 n -1 次)。\n\n③ 小结\n大部分情况下，时间复杂度是O(1)，且每执行一次O(n)时间复杂度的操作，都会接着 n -1 次 O(1)时间复杂度的操作。那么就可以把每一次O(n)时间复杂度，用后面的 n -1 次 O(1) 均摊一下。\n均摊时间复杂度就变成O(1)了\n\n4.向前均摊分析\n如果按照您的观点，\n&#34;前n个操作复杂度都是O(1)，第n+1次操作的复杂度是O(n)，所以把最后一次的复杂度分摊到前n次上，那么均摊下来每次操作的复杂度为O(1)&#34;\n\n① n==10\n当n 等于 10时，第n+1次（即第11次）操作的复杂度是O(n)，把第11次的操作的10次循环分摊到前10次操作上，这是没有问题的。\n\n② n==20\n当n 等于 20时，第n+1次（即第21次）操作的复杂度是O(n)，把第21次的操作的20次循环分摊到前20次操作上，这里是否有操作重复分摊的问题？\n\n5.向前均摊规律\n5.1\n首先，确定20次操作分别对应的时间复杂度。\n前11次之前已经分析过了，第11次是O(n)，前10次都是O(1),并且已经把第11次的操作的10次循环分摊到前10次操作上了。\n第11到第20次的时间复杂度都是O(1)，\n5.2\n如果把第21次的操作的20次循环分摊到前20次操作上，\n那么前10次操作上就被了两次了。\n\n5.3\n随着数据规模的增长，前10次操作会被重复分摊\n\n第n次操作：\t\t\t  11\t21\t41\t81\n对应的循环次数：\t  10\t20\t40\t80\n前10次操作分摊的次数：1\t\t2\t3\t4\t\n\n前10次操作分摊的次数log₂(n/10)\n第10~19次操作分摊的次数[log₂(n/10)]-1\n第20~39次操作分摊的次数[log₂(n/10)]-2\n...\n\n6. 作者之前的观点(insert方法我感觉向前、向后均摊 都可以)\n\n&#34;我们还是继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。你都理解了吗？&#34;\n\n7.谢谢观看。","likes_number":48,"is_delete":false,"is_hidden":false,"ctime":1587722458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":10,"child_discussions":[{"author":{"id":1451229,"avatar":"https://static001.geekbang.org/account/avatar/00/16/24/dd/4afbff3a.jpg","nickname":"Last Quarter","note":"","ucode":"E8E56B4305A5F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1689425,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/51/88dcbf26.jpg","nickname":"DZ小枫","note":"","ucode":"2603BF5C777389","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253138,"discussion_content":"受教了，赞一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588218957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":246054,"ip_address":""},"score":253138,"extra":""},{"author":{"id":2037714,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/17/d2/68cdbd75.jpg","nickname":"海狮","note":"","ucode":"18FDDF5841F282","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1689425,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/51/88dcbf26.jpg","nickname":"DZ小枫","note":"","ucode":"2603BF5C777389","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283192,"discussion_content":"很极客","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592208492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":246054,"ip_address":""},"score":283192,"extra":""},{"author":{"id":1901017,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/01/d9/1af49040.jpg","nickname":"不二","note":"","ucode":"A076216488A6D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1689425,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/51/88dcbf26.jpg","nickname":"DZ小枫","note":"","ucode":"2603BF5C777389","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297730,"discussion_content":"向前均摊是有重复叠加的，向后均摊的分析才能得到o（1），你这个才是正确的思路，赞👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597037830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":246054,"ip_address":""},"score":297730,"extra":""}]},{"author":{"id":1802622,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/81/7e/fb688b5c.jpg","nickname":"落尘","note":"","ucode":"7B76B94CA301D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348479,"discussion_content":"大家注意一下，这里有点误导性。本题中，平均情况复杂度不需要区分“第一种计算方式”和“加权概率计算方式”，本题默认每种情况的概率应该都是一样的“1/n”，因此这种情况下“(1+1...+10...+n)/n”的算法和“1/n+1/n...+10/n...+n/n”的算法，结果是一致的。“加权”就是针对存在权重不同（可以理解为概率不同）的“情况”（case）才需要“加权”计算，如果所有“情况”概率相同则无所谓是否加权。争哥前面举例的题目中说了“计算方式”第一种其实是默认所有“情况”概率相同的计算方式，第二种计算方式的背景是，存在与不存在数组的概率为1/2，于是，有n种存在于数组中的情况概率为“1/2*1/n”，有一种不存在于数组中的“额外的情况”的概率为“1/2*1”。\n","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1612595622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2514369,"avatar":"https://static001.geekbang.org/account/avatar/00/26/5d/c1/af483dc6.jpg","nickname":"孙明建","note":"","ucode":"1C17C97325E8BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1802622,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/81/7e/fb688b5c.jpg","nickname":"落尘","note":"","ucode":"7B76B94CA301D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360503,"discussion_content":"加权平均显然包含了你说的不考虑加权的情况，我觉得考虑问题直接从加权考虑没有问题，在概率论范畴内也是如此","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1616465028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348479,"ip_address":""},"score":360503,"extra":""}]},{"author":{"id":2228151,"avatar":"","nickname":"Geek从不换行","note":"","ucode":"FD791D375C5CEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312621,"discussion_content":"第二种计算方式(加权平均法，又称期望): 1*(1/n+1)+1*(1/n+1)+...+1*(1/n+1)+n*(1/(n+1))  上面说的这个, 前面是n个 1*(1/n+1) 相加最后才加上 n*(1/(n+1)), 所以应该是 n*(1/(n+1)) + n*(1/(n+1)) = 2n/(n+1), 所以结果不是等于1, 是最终去除系数和常数之后才是1, 我的理解是这样子","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1602750998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1733203,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/72/53/2981800f.jpg","nickname":"Crush","note":"","ucode":"E96BD09A575595","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49957,"discussion_content":"唉~我想知道你的这第二种计算方式是怎么加出1的呢。。。。还有你这和第一种有区别吗？很明显没有啊。。。。\n","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1573653190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1262237,"avatar":"https://static001.geekbang.org/account/avatar/00/13/42/9d/dc645c1a.jpg","nickname":"夕_夕","note":"","ucode":"DC01246C231965","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1733203,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/72/53/2981800f.jpg","nickname":"Crush","note":"","ucode":"E96BD09A575595","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53257,"discussion_content":"主要是加权和不加权的区别，第二种相比第一种会更科学一点而已，作者文章中也讲到过.\n第二种n+1种情况，也就是每种情况出现的概率1/(n+1), 前n种情况的时间复杂度是O(1)，第n+1种情况时间复杂度O(n)，所以累加就是加权后的复杂度去除常数就是O(1)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574151226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49957,"ip_address":""},"score":53257,"extra":""}]},{"author":{"id":1073306,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/9a/95a29f98.jpg","nickname":"Felix Yin","note":"","ucode":"39667D1772D0E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193,"discussion_content":"这个应该使用均摊时间复杂度计算","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1561269069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1631982,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDCC4yia65GicuukzgdZv34Zib2tXcfuBhkG3iaYBzJJRWQRPBLysR95WRD6RBibQfwHQvyDyP8fHAhkrA/132","nickname":"Geek_8a7668","note":"","ucode":"BBDBE125345CF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5091,"discussion_content":"都可以，只不过贪还分析法简单点","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565938217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2601436,"avatar":"https://static001.geekbang.org/account/avatar/00/27/b1/dc/a7d4ec9d.jpg","nickname":"种花家的糖心鱼","note":"","ucode":"4E34A38496AF52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373751,"discussion_content":"问题练习题给定的初始数组大小是10不是n，insert中是n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620865343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2613917,"avatar":"https://static001.geekbang.org/account/avatar/00/27/e2/9d/12832a86.jpg","nickname":"Zack","note":"","ucode":"1CEB15A44E117F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2601436,"avatar":"https://static001.geekbang.org/account/avatar/00/27/b1/dc/a7d4ec9d.jpg","nickname":"种花家的糖心鱼","note":"","ucode":"4E34A38496AF52","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374229,"discussion_content":"给定数组大小是会随着输入数据大小的不同而改变的，并不是一个固定的数，所以可以看成是n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1621069110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":373751,"ip_address":""},"score":374229,"extra":""}]},{"author":{"id":1373334,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f4/96/94985c6b.jpg","nickname":"云淡风轻","note":"","ucode":"DE5A3565F001E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281273,"discussion_content":"加权那里为什么是1/n+1。如果按照概率论。不应该是1/2吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591704090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":9,"child_discussions":[{"author":{"id":1640670,"avatar":"https://static001.geekbang.org/account/avatar/00/19/08/de/3eea926d.jpg","nickname":"追风","note":"","ucode":"A9659BA22E4C85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1373334,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f4/96/94985c6b.jpg","nickname":"云淡风轻","note":"","ucode":"DE5A3565F001E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290009,"discussion_content":"兄弟搞懂了吗， 这个地方我也不太明白，感觉应该是1/2n 和 最后求和的n/2(n+1)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594300803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281273,"ip_address":""},"score":290009,"extra":""},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1373334,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f4/96/94985c6b.jpg","nickname":"云淡风轻","note":"","ucode":"DE5A3565F001E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331164,"discussion_content":"你这概率论是不是理解有问题，又不是像硬币的正反面，往数组中插入数据能和查找情况一样吗？自己想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606798570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281273,"ip_address":""},"score":331164,"extra":""},{"author":{"id":2348555,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d6/0b/bdc05634.jpg","nickname":"咳咳","note":"","ucode":"524199AC1E02ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":336071,"discussion_content":"为啥查找数据要先分数据在和不在两种情况，而插入数据就不用先分数组满了和不满的两种情况啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608469598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331164,"ip_address":""},"score":336071,"extra":""}]},{"author":{"id":1326707,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3e/73/4f728d90.jpg","nickname":"官沛","note":"","ucode":"E49A0224E8BC7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177343,"discussion_content":"这才是正解！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582096583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605058,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7d/c2/e6332a1b.jpg","nickname":"东方拓睿","note":"","ucode":"1FD25D75CAC7C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576004,"discussion_content":"第一种2n/(n+1)怎么看也是O(n)啊怎么得出O(1)的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655222063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2212143,"avatar":"https://static001.geekbang.org/account/avatar/00/21/c1/2f/5c8167aa.jpg","nickname":"油纸伞","note":"","ucode":"C2655B9F8874E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333044,"discussion_content":"第一种计算方式: (1+1+...+1+n)/(n+1) = 2n/(n+1) 【注: 式子中1+1+...+1中有n个1】,所以平均复杂度为O(1);  -------- 不太明白为什么是(1+1+...+1+n)/(n+1)这么计算的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607421081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1547466,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/ca/1b01098e.jpg","nickname":"Lee","note":"","ucode":"45CDD6604732AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2212143,"avatar":"https://static001.geekbang.org/account/avatar/00/21/c1/2f/5c8167aa.jpg","nickname":"油纸伞","note":"","ucode":"C2655B9F8874E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346032,"discussion_content":"这个没有加概论","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611843820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333044,"ip_address":""},"score":346032,"extra":""}]},{"author":{"id":1943619,"avatar":"","nickname":"进击的小菜","note":"","ucode":"DEDC4D31DA0DF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312276,"discussion_content":"为什么上面老师讲的加权平均时间复杂度是1*1/n+2*1/n+3*1/n.......n*1/n,而您这边是1*1/n+1*1/n+1*1/n.......n*1/n呢，小白求解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602647392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1936196,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/dGGx1XP9f5P5IB1cicobP4yooic2KH3KNPbfwMbIIGOf8x5LgSUzfzib4MhPRx3tiaGvV8zV3L5Jg1c82Ekb4If4WQ/132","nickname":"Geek_4517c4","note":"","ucode":"071166D57ABEF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1943619,"avatar":"","nickname":"进击的小菜","note":"","ucode":"DEDC4D31DA0DF1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357391,"discussion_content":"因为上面老师讲的是查找，这里是插入（我的理解）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615799826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312276,"ip_address":""},"score":357391,"extra":""},{"author":{"id":2613917,"avatar":"https://static001.geekbang.org/account/avatar/00/27/e2/9d/12832a86.jpg","nickname":"Zack","note":"","ucode":"1CEB15A44E117F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1943619,"avatar":"","nickname":"进击的小菜","note":"","ucode":"DEDC4D31DA0DF1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374230,"discussion_content":"查找的逻辑和插入不一样啊，查找在不同位置循环的次数不一样，插入只要没有触发边界条件都是一次完成","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1621069237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312276,"ip_address":""},"score":374230,"extra":""},{"author":{"id":2677526,"avatar":"https://static001.geekbang.org/account/avatar/00/28/db/16/09272144.jpg","nickname":"wanglujie","note":"","ucode":"F159095E7D4B31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1943619,"avatar":"","nickname":"进击的小菜","note":"","ucode":"DEDC4D31DA0DF1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386354,"discussion_content":"查照时需要从头便利，所以每次查找到第n个位置需要从头开始一直遍历到第n个位置，即需要n次操作（即为什么加权是是1、2、3...）。而插入时位置已知，只是一次操作（不需从头遍历）；只有触发扩容时有一次全局遍历（即操作n次），所以就是（1、1、1...n）。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627547014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312276,"ip_address":""},"score":386354,"extra":""}]},{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303002,"discussion_content":"第一种很好理解 2n/(n+1)  因为系数和常量都可以省略 所以剩下 n/n 结果为 1 所以为O(1)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599110778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302208,"discussion_content":"没有delete []，内存泄漏了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598842980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1855137,"avatar":"","nickname":"Geek_e6f358","note":"","ucode":"C21E94A90258A2","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307314,"discussion_content":"不会，原来的数组不再被引用，所以会被垃圾回收器回收","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600600387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302208,"ip_address":""},"score":307314,"extra":""},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1855137,"avatar":"","nickname":"Geek_e6f358","note":"","ucode":"C21E94A90258A2","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":331159,"discussion_content":"对方以为是c++.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606798388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307314,"ip_address":""},"score":331159,"extra":""},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1855137,"avatar":"","nickname":"Geek_e6f358","note":"","ucode":"C21E94A90258A2","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":331162,"discussion_content":"看这种语法就知道不是C++，java才有这种语法，当然不排除其他语言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606798461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307314,"ip_address":""},"score":331162,"extra":""}]},{"author":{"id":1274666,"avatar":"https://static001.geekbang.org/account/avatar/00/13/73/2a/a671ea84.jpg","nickname":"王航","note":"","ucode":"5E315EA8F71DAF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298776,"discussion_content":"第二种加权分母为什么要加1,作者说的n+1的情况是判断一个数是否在数组中,而作业的情况,就是前n-1个是n分之1,第n个是n分之再乘n,没有第n+1种情况啊,我的理解是这样,不知道对不对.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597396624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1080660,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7d/54/0ae86230.jpg","nickname":"Kevin~","note":"","ucode":"361EC624BD8F83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288655,"discussion_content":"差不多理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593832876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1594518,"avatar":"https://static001.geekbang.org/account/avatar/00/18/54/96/a40714d8.jpg","nickname":"HELLO_","note":"","ucode":"A16852D05B43E2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215941,"discussion_content":"问一下，2n/(n+1) 时间复杂度不应该是O(n)吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585399083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1880159,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/b0/5f/950cc8a9.jpg","nickname":"SpiritLing","note":"","ucode":"5B9586F2C9C0A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1594518,"avatar":"https://static001.geekbang.org/account/avatar/00/18/54/96/a40714d8.jpg","nickname":"HELLO_","note":"","ucode":"A16852D05B43E2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":217257,"discussion_content":"当然不是了，你把系数都去掉就变成n/n了，所以为 O(1)","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1585533436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215941,"ip_address":""},"score":217257,"extra":""},{"author":{"id":1126809,"avatar":"https://static001.geekbang.org/account/avatar/00/11/31/99/18740047.jpg","nickname":"LoverぜJing_","note":"","ucode":"A690EC751A8DB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1880159,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/b0/5f/950cc8a9.jpg","nickname":"SpiritLing","note":"","ucode":"5B9586F2C9C0A5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286202,"discussion_content":"我也不明白，2n/(n+1) = (2(n+1)-2)/n+1=2-2/n+1，假设n无穷大，求个极限也是1/n哪，是我哪理解错了么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593086925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":217257,"ip_address":""},"score":286202,"extra":""},{"author":{"id":2054527,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/bFaldpeHffSdNTtgib3bDaa3dq1ibJQrqon9ION1AKZSSGZphG2gUNCrSroq0SgxEB7nTYNcJDVG97luoNL0ZAzg/132","nickname":"Geek_6bdfc8","note":"","ucode":"9940EB559AF505","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1126809,"avatar":"https://static001.geekbang.org/account/avatar/00/11/31/99/18740047.jpg","nickname":"LoverぜJing_","note":"","ucode":"A690EC751A8DB7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288545,"discussion_content":"n无穷大1/n不是趋向于0吗?增长趋势和常数相比谁的大呢?好好想想。而且在分析时间复杂度的时候系数是不要考虑的,不要去凑然后再约分啥的没必要啊。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593783680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":286202,"ip_address":""},"score":288545,"extra":""}]},{"author":{"id":1833344,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/f9/80/54106d1d.jpg","nickname":"王朋","note":"","ucode":"7907D8A1E6CE60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207454,"discussion_content":"有一点不理解，平均时间复杂度的第一种方式，为什么分子是2n呢？能解惑下吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584498042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1916654,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3e/ee/82c2ef12.jpg","nickname":"是海港呀","note":"","ucode":"32AD09DB7B1F3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1833344,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/f9/80/54106d1d.jpg","nickname":"王朋","note":"","ucode":"7907D8A1E6CE60","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212064,"discussion_content":"n个1相加 再加n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584929827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":207454,"ip_address":""},"score":212064,"extra":""}]}]},{"had_liked":false,"id":28819,"user_name":"好吃二师兄","can_delete":false,"product_type":"c1","uid":1242173,"ip_address":"","ucode":"A367B52BC79199","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/3d/ec3d6348.jpg","comment_is_top":false,"comment_ctime":1538151014,"is_pvip":false,"replies":[{"id":"10386","content":"留言看似很平淡 但透漏着高手的气息。说的没错。高手就是凭感觉👍","user_name":"作者回复","comment_id":28819,"uid":"1190123","ip_address":"","utype":1,"ctime":1538185388,"user_name_real":"gg"}],"discussion_count":19,"race_medal":0,"score":"2595698397798","product_id":100017301,"comment_content":"最好是O(1),最坏是O(n),平均平摊是O(1).<br><br><br>不要纠结add和insert在哪儿被调用了。。。代码都写出来反而不好看。<br><br>个人体会: 平均和平摊基本就是一个概念，平摊是特殊的平均。在分析时间复杂度是O(1)还是O(n)的时候最简单就是凭感觉，，，，，，，，出现O(1)的次数远大于出现O(n)出现的次数，那么平均平摊时间复杂度就是O(1)。。。。","like_count":605,"discussions":[{"author":{"id":1236601,"avatar":"https://static001.geekbang.org/account/avatar/00/12/de/79/4eb236d7.jpg","nickname":"clare","note":"","ucode":"41D449E239126E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347434,"discussion_content":"我也是这么感觉的，哈哈。这个专栏两年前就买了，最近才开始看。其实发现有了两年实际经验之后，再看这些算法问题，更容易理解了。不像之前读算法书，一头雾水，感谢作者。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1612231525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2136116,"avatar":"https://static001.geekbang.org/account/avatar/00/20/98/34/5a6994c9.jpg","nickname":"kofzhang","note":"","ucode":"F7FCDCB4498615","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340196,"discussion_content":"我也是用这种方法。而且好像还没出过错","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1609925471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302782,"discussion_content":"就感觉老板交代任务, 然后最好就是 一个 哦 结束后去完成掉, 最坏的情况就是 一直叫你哦了很多次结果还没完成, 那么平摊的话 虽然有叫那么几次,不过归根下来还是完成了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599030084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2343086,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c0/ae/e5e62510.jpg","nickname":"徐志超-Klaus","note":"","ucode":"CF26B39965F2A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330829,"discussion_content":"数学高手啊，理解起来简单，分析还能一步到位","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606717860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683130,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","nickname":"乾坤瞬间","note":"","ucode":"15BDCF29CBF8EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28790,"discussion_content":"总结一下，不用刻意去区分均摊和平均复杂度。而是在什么时候会使用到均摊。用数学的连续间断点来分析，只有在有规律的几个点，随时可微分但是不连续的点的时候才会使用到均摊平均法","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570712480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425382,"discussion_content":"留言看似很平淡 但透漏着高手的气息。说的没错。高手就是凭感觉👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1538185388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302781,"discussion_content":"真的看很多遍后会发现 最好是O(1),最坏是O(n),平均平摊是O(1) 哈哈哈 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599029974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302209,"discussion_content":"没有delete []，内存泄漏了吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598842989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2702193,"avatar":"https://static001.geekbang.org/account/avatar/00/29/3b/71/a690b71f.jpg","nickname":"zhengby","note":"","ucode":"5984647C8C8776","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385821,"discussion_content":"找存在感的么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627288006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302209,"ip_address":""},"score":385821,"extra":""}]},{"author":{"id":1543162,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/fa/103e6900.jpg","nickname":"山鬼谣","note":"","ucode":"E25F498B85A01B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201719,"discussion_content":"和我感觉一样，add中就是因为O(1)出现很极端，所以平摊下来是O(n)。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583830028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1647345,"avatar":"https://static001.geekbang.org/account/avatar/00/19/22/f1/11d1f383.jpg","nickname":"疯情","note":"","ucode":"785237367A9B33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1543162,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/fa/103e6900.jpg","nickname":"山鬼谣","note":"","ucode":"E25F498B85A01B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292366,"discussion_content":"再看一遍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595207047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":201719,"ip_address":""},"score":292366,"extra":""}]},{"author":{"id":1690568,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/iclloMUx1mWeicrY0WuxVotpIEiciczJXGpzQ40v4BuxXtFic8byfUQGMpzyeic8rA68RXvcZJHQybbBtM2rVt2kUNEw/132","nickname":"Geek_175506","note":"","ucode":"15397D44A39987","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24939,"discussion_content":"我是菜鸟 我也是凭感觉😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570337929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1691776,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLibX06ACicicBdkD4hkSTkVm9fIT1xwdXV52GvQahFmTVSFHhxbDWjNOk5mdwE3hRFLO6QjRYIKoffA/132","nickname":"Geek_272a2e","note":"","ucode":"C3F82497030D0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1690568,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/iclloMUx1mWeicrY0WuxVotpIEiciczJXGpzQ40v4BuxXtFic8byfUQGMpzyeic8rA68RXvcZJHQybbBtM2rVt2kUNEw/132","nickname":"Geek_175506","note":"","ucode":"15397D44A39987","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33230,"discussion_content":"虽然我们是毫无水平的评感觉😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571110742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":24939,"ip_address":""},"score":33230,"extra":""},{"author":{"id":1648705,"avatar":"https://static001.geekbang.org/account/avatar/00/19/28/41/a29d08a7.jpg","nickname":"Geek_c437e6","note":"","ucode":"A2E6C02CD5AA4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1691776,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLibX06ACicicBdkD4hkSTkVm9fIT1xwdXV52GvQahFmTVSFHhxbDWjNOk5mdwE3hRFLO6QjRYIKoffA/132","nickname":"Geek_272a2e","note":"","ucode":"C3F82497030D0C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186633,"discussion_content":"我也是....懵懵懂懂..初高中数学基本在玩中忘记了..但是能听得懂作者所说","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582701383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":33230,"ip_address":""},"score":186633,"extra":""}]},{"author":{"id":1273044,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6c/d4/85ef1463.jpg","nickname":"路漫漫","note":"","ucode":"F70F1DC612DE9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532958,"discussion_content":"留言果然很精彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637740659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2527210,"avatar":"https://static001.geekbang.org/account/avatar/00/26/8f/ea/03811dc8.jpg","nickname":"帆浆扭","note":"","ucode":"65742F8F26F4FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366655,"discussion_content":"嗅到了高手气息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618145990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232056,"discussion_content":"凡哥好\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586849155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1465310,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","nickname":"Warn","note":"","ucode":"F2F7FCDB0940D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51592,"discussion_content":"虽然思考题能考虑到是O(1)，但是还是有点懵懵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573905811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1112210,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/92/eaafff96.jpg","nickname":"Amos","note":"","ucode":"61DB72D99AF9EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1465310,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","nickname":"Warn","note":"","ucode":"F2F7FCDB0940D0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277451,"discussion_content":"i和len不相等的时候，不会执行for循环，也就是代码只执行一次，当i和len相等的时候（len翻倍之前只有出现一次），会执行for循环，均摊下来就是o(1)了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591059283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51592,"ip_address":""},"score":277451,"extra":""}]}]},{"had_liked":false,"id":28414,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1538091967,"is_pvip":false,"discussion_count":14,"race_medal":0,"score":"1698050173887","product_id":100017301,"comment_content":"总结<br><br>一、复杂度分析的4个概念<br>1.最坏情况时间复杂度：代码在最理想情况下执行的时间复杂度。<br>2.最好情况时间复杂度：代码在最坏情况下执行的时间复杂度。<br>3.平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。<br>4.均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。<br><br>二、为什么要引入这4个概念？<br>1.同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，更准确的描述代码的时间复杂度，所以引入这4个概念。<br>2.代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度。大多数情况下，是不需要区别分析它们的。<br><br>三、如何分析平均、均摊时间复杂度？<br>1.平均时间复杂度<br>代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。<br>2.均摊时间复杂度<br>两个条件满足时使用：1）代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；2）低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。","like_count":395,"discussions":[{"author":{"id":1006312,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5a/e8/6a73208c.jpg","nickname":"老友@极客时间","note":"","ucode":"BA96C0D6200590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5467,"discussion_content":"最好最坏反着了","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1566287622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2704386,"avatar":"","nickname":"Geek_987420","note":"","ucode":"2F62515E491F62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384337,"discussion_content":"为啥可以这样均摊的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626506729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181653,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVsa1ehtjC4lMj0nFESwMIBd723O8fD2w9ibzFQqwExU2ANINMKOAwamicqDVc3ibe6jIDShwN2iajcQ/132","nickname":"Geek_99bd09","note":"","ucode":"DB16E1BEA969CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370866,"discussion_content":"最坏最好写反了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619571582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2532714,"avatar":"","nickname":"Geek_169994","note":"","ucode":"BE7E1D94986F9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363442,"discussion_content":"确定总结 1 2 没写反？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617196198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317847,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/d7/868d26ce.jpg","nickname":"songhyunmin","note":"","ucode":"D5A98668CD8532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351114,"discussion_content":"是做游戏的姜威吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614156754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1292087,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b7/37/0290ff6e.jpg","nickname":"Veitor","note":"","ucode":"3397AC6D239195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310642,"discussion_content":"哎。。这种总结真的没啥帮助，真正有用的应该是如何去分析会出现几种情况？怎么没人补充的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601967328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293792,"discussion_content":"平均时间复杂度总结得很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595669030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1911134,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/29/5e/5867bd26.jpg","nickname":"bemyself","note":"","ucode":"DDEF9CAF9481A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290019,"discussion_content":"姜哥，是你么？😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594303514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1753115,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/c0/1b/319baf9d.jpg","nickname":"ZMH.","note":"","ucode":"D45D6CEDFDF8F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202571,"discussion_content":"大佬,总结的很完善","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583934143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1093541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/af/a5/afa1d7d7.jpg","nickname":"hasWhere","note":"","ucode":"2C2B2988107489","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189399,"discussion_content":"mark备着","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582876730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1285153,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9c/21/5e087146.jpg","nickname":"且听风行","note":"","ucode":"BA55B13EB64F34","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":118863,"discussion_content":"这个总结的得很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578195519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035769,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/f9/64acc113.jpg","nickname":"Gyro","note":"","ucode":"5E34622D408091","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61116,"discussion_content":"课代表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574773373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317847,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/d7/868d26ce.jpg","nickname":"songhyunmin","note":"","ucode":"D5A98668CD8532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48600,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573497466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052749,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/4d/efe9e272.jpg","nickname":"易水","note":"","ucode":"B677F978CE054E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32442,"discussion_content":"总结得真好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571037400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":28874,"user_name":"赤身马可","can_delete":false,"product_type":"c1","uid":1175643,"ip_address":"","ucode":"B1137CDFA858C6","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/5b/a1250859.jpg","comment_is_top":false,"comment_ctime":1538184722,"is_pvip":false,"replies":[{"id":"10445","content":"嗯嗯，同学你好.<br><br> 你说了刚学完python，可能代码还没写熟练，所以我建议把python书上的所有实例代码都自己敲一遍，默写一遍。学编程，光看不写肯定是不行的。<br><br>等你python代码写熟练了，你可以再开始学我这个专栏。 因为你没有数据结构和算法的基础，所以我建议，配合着《大话数据结构》《算法图解》两本书一块来学习。<br><br>学习这个专栏的过程中，你可以把我讲到的数据结构和算法都用python代码实现一遍，如果实现不了，可以参照我放在Github上的代码，自己看懂之后，默写一遍。这个步骤非常锻炼你的编程能力，不要忽视！<br><br>在学习专栏的过程中，不要一觉得看不懂就放弃，师傅领进门，修行靠个人。这里没有葵花宝典一样的捷径。学习还要靠自己。看不懂？那就自己多百度一下，看不懂也可以问问你同学、同事、学长，用一个星期来看一篇文章，狠下心来，别怕麻烦，不会学不会的。<br><br>还有很多时候看不懂，你就硬着头皮看，都看完一遍，就会有感觉。之后再等有空了，再来看一遍，慢慢的都懂了。这门课很难，对于初学者来说，应该是计算机里最难的之一了，所以不要期望轻松就学会，这是不现实的。<br>","user_name":"作者回复","comment_id":28874,"uid":"1190123","ip_address":"","utype":1,"ctime":1538219978,"user_name_real":"gg"}],"discussion_count":14,"race_medal":0,"score":"1169769289234","product_id":100017301,"comment_content":"报告老师，我好像走错了教室。<br><br>我是一个文科转行过来的菜鸟，刚刚学完Python，基本搞懂了“遍历”、“循环”、“判断”等概念。<br><br>您开篇讲的课，我都基本都能明白，也提起了兴趣和信心，准备好好跟您学习。但这两次课听完，我又晕菜了。<br><br>想请问一下，如果听不太懂(也可以去掉“太”)，需要补哪些课？您能告诉我进入您课程的坡道和垫脚石么？有没有稍低一点年级的资料，让我可以补补课呢？<br><br>还请抽时间回答，谢谢。","like_count":272,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425403,"discussion_content":"嗯嗯，同学你好.\n\n 你说了刚学完python，可能代码还没写熟练，所以我建议把python书上的所有实例代码都自己敲一遍，默写一遍。学编程，光看不写肯定是不行的。\n\n等你python代码写熟练了，你可以再开始学我这个专栏。 因为你没有数据结构和算法的基础，所以我建议，配合着《大话数据结构》《算法图解》两本书一块来学习。\n\n学习这个专栏的过程中，你可以把我讲到的数据结构和算法都用python代码实现一遍，如果实现不了，可以参照我放在Github上的代码，自己看懂之后，默写一遍。这个步骤非常锻炼你的编程能力，不要忽视！\n\n在学习专栏的过程中，不要一觉得看不懂就放弃，师傅领进门，修行靠个人。这里没有葵花宝典一样的捷径。学习还要靠自己。看不懂？那就自己多百度一下，看不懂也可以问问你同学、同事、学长，用一个星期来看一篇文章，狠下心来，别怕麻烦，不会学不会的。\n\n还有很多时候看不懂，你就硬着头皮看，都看完一遍，就会有感觉。之后再等有空了，再来看一遍，慢慢的都懂了。这门课很难，对于初学者来说，应该是计算机里最难的之一了，所以不要期望轻松就学会，这是不现实的。\n","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1538219978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078833,"avatar":"https://static001.geekbang.org/account/avatar/00/10/76/31/c84a9f39.jpg","nickname":"雷健雄","note":"","ucode":"BFCD014B1754F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353891,"discussion_content":"我去年看到一半这个课程也是没坚持下来，开始看的时候基本上两个小时才能看完一篇文章。现在再来看好多了，一起加油吧","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1615211663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1916654,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3e/ee/82c2ef12.jpg","nickname":"是海港呀","note":"","ucode":"32AD09DB7B1F3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212065,"discussion_content":"可能是因为 代码是C语言的缘故，你最好学点C语言，跟python还是有区别的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584929949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1585737,"avatar":"https://static001.geekbang.org/account/avatar/00/18/32/49/a97fc6df.jpg","nickname":"Mr. Cheng","note":"","ucode":"A6D81A7D92160E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45693,"discussion_content":"老师真的很认真看完每一条评论👍","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573055864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2612826,"avatar":"https://static001.geekbang.org/account/avatar/00/27/de/5a/1f2f3513.jpg","nickname":"可乐加冰","note":"","ucode":"4E58D685C37418","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373409,"discussion_content":"看到老师这么认真的回复，觉得自己买的真值，加油！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620720614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2336388,"avatar":"https://static001.geekbang.org/account/avatar/00/23/a6/84/5ca855d6.jpg","nickname":"zzzz","note":"","ucode":"1E84C07366CBB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328682,"discussion_content":"小争哥好暖呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606208665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1621122,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/0EeQjRktD1fQ6r1qPuxpmQqRl55RnfDA7yjOznQricsWlbAafru8e048sXHP3KiajfV6TsqSM37s4JyZkicG6dlFA/132","nickname":"TOBY WONG","note":"","ucode":"76A4A4B797E7B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265817,"discussion_content":"老师你您的github地址在哪里？？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589442066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1621122,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/0EeQjRktD1fQ6r1qPuxpmQqRl55RnfDA7yjOznQricsWlbAafru8e048sXHP3KiajfV6TsqSM37s4JyZkicG6dlFA/132","nickname":"TOBY WONG","note":"","ucode":"76A4A4B797E7B9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293187,"discussion_content":"https://github.com/wangzheng0822","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595471557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":265817,"ip_address":""},"score":293187,"extra":""}]},{"author":{"id":1189080,"avatar":"https://static001.geekbang.org/account/avatar/00/12/24/d8/aa41d743.jpg","nickname":"🐒🐱🐭🐮🐯🐰🐶","note":"","ucode":"52426AE36A9A39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225096,"discussion_content":"多看几遍就好了，第一遍起来我也是很蒙，隔段时间再看，就会发现，知道老师再说什么了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586348406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2648994,"avatar":"https://static001.geekbang.org/account/avatar/00/28/6b/a2/714b693d.jpg","nickname":"LWJ","note":"","ucode":"7DF003FDCB0526","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402751,"discussion_content":"楼主现在是大佬了吗~~正在你3年前的阶段，感觉路途深远呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633943642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1948026,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/b9/7a/425f9c1c.jpg","nickname":"praetor","note":"","ucode":"4A8A8D132E7260","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395065,"discussion_content":"把c学了，或者c++也行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632211665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2155736,"avatar":"https://static001.geekbang.org/account/avatar/00/20/e4/d8/90cfde0c.jpg","nickname":"韩金龙","note":"","ucode":"AA05019FE01710","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343761,"discussion_content":"建议先过遍c/cpp，这样看代码不会心虚，数据结构大致过一遍，理解专栏会快起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611150115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1256066,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2a/82/81cf93bb.jpg","nickname":"珈艺","note":"","ucode":"A29D6E7E6BC9AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256229,"discussion_content":"我17年学校学了python入门之后，2018年底听这门课完全听不懂；后来工作里开始用python建模预测了，同时跟着《python编程：从入门到实践》敲了一遍，又在学校接触了Java。今年再回来听突然才感觉有点能听懂了。当然也发现自己以前的代码完全是乱写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588454210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1256066,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2a/82/81cf93bb.jpg","nickname":"珈艺","note":"","ucode":"A29D6E7E6BC9AA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256370,"discussion_content":"亲亲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588475892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":256229,"ip_address":""},"score":256370,"extra":""}]}]},{"had_liked":false,"id":29441,"user_name":"jon","can_delete":false,"product_type":"c1","uid":1253287,"ip_address":"","ucode":"5768A34E292CAA","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/a7/d379ca4f.jpg","comment_is_top":false,"comment_ctime":1538374114,"is_pvip":false,"replies":[{"id":"10608","content":"👍","user_name":"作者回复","comment_id":29441,"uid":"1190123","ip_address":"","utype":1,"ctime":1538401517,"user_name_real":"gg"}],"discussion_count":22,"race_medal":0,"score":"731682814434","product_id":100017301,"comment_content":"看了大家的留言总结的很好，自己把练习题的答案整理了一下与大家分享：<br>1. 最好情况时间复杂度为 O(1)<br>2.最坏情况分析： <br>最坏情况代码执行的次数跟每次数组的长度有关<br>第1次调用insert的执行的次数为 n ,<br>第2次调用insert的执行的次数为 2n ,<br>第3次调用insert的执行的次数为 2^2 * n <br>第k次调用insert的执行的次数为 2^(k-1) * n <br>最坏时间复杂度为 O(n)。<br>3. 平均情况分析<br>当每次遇到最坏情况时数组会进行2倍扩容，原数组被导入新数组，虽然数组的长度变大了，但是插入操作落在的区间的长度是一样的，分别是0~len-1, len~(2len-1),....；<br>插入的情况仍是len+1种：0~len-1和插满之后的O(len)；所以每次插入的概率是：p= 1&#47;len+1，<br>最后求出加权平均时间复杂度为 1*p + 2*p+ ▪▪▪ + len*p + len * p = O(1) ; <br>4. 均摊时间复杂度 O(1)<br>而均摊复杂度由于每次O(len)的出现都跟着len次O(1)，是前后连贯的，因而将O(len)平摊到前len次上，得出平摊复杂度是O(1)","like_count":171,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425606,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538401517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476013,"avatar":"https://static001.geekbang.org/account/avatar/00/16/85/ad/800f6b67.jpg","nickname":"Zyt","note":"","ucode":"17EE44017A4CFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6106,"discussion_content":"感觉你这个加权平均复杂度算法不对","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1566697868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253287,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/a7/d379ca4f.jpg","nickname":"jon","note":"","ucode":"5768A34E292CAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60310,"discussion_content":"修正：加权复杂度前n-1都是1p只有最后一项是np","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1574726861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476013,"avatar":"https://static001.geekbang.org/account/avatar/00/16/85/ad/800f6b67.jpg","nickname":"Zyt","note":"","ucode":"17EE44017A4CFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6107,"discussion_content":"应该都是1*p，因为i定义的是全局变量，所以不会累加。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1566698266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061306,"avatar":"https://static001.geekbang.org/account/avatar/00/10/31/ba/35b3b16c.jpg","nickname":"Marsman","note":"","ucode":"A108E7A0A59FAC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367517,"discussion_content":"平均复杂度分析， 结论是O(1)没问题，但我感觉推导过程应该是：\n1 * p + 1 * p + ... + 1 * p(第len个1*p) + len * p = O(1)，平均复杂度的每一次执行的计算公式应该是  每次执行的操作次数 * 概率","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618385426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1244282,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/7a/f4dec0b9.jpg","nickname":"didi迪迪","note":"","ucode":"0FF1C8A5162695","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1061306,"avatar":"https://static001.geekbang.org/account/avatar/00/10/31/ba/35b3b16c.jpg","nickname":"Marsman","note":"","ucode":"A108E7A0A59FAC","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":384977,"discussion_content":"我也觉得应该是这样，而不是1*p+2*p+3*p.......","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626836905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":367517,"ip_address":""},"score":384977,"extra":""}]},{"author":{"id":2053397,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/55/15/54073172.jpg","nickname":"18/18/178","note":"","ucode":"4A7E8BB0D0C249","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363955,"discussion_content":"分母len+1不合理，因为只是前10次，起点是0，到9的时候恰巧有十次；但是从11到19，只有9次（len-1），一次类推，21到39也只有19次（len-1），所以分目应该取len,而不是len+1","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617333118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1781154,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2d/a2/7ebfa4a5.jpg","nickname":"嘻哈大盗","note":"","ucode":"6C6BE28C1D004B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2053397,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/55/15/54073172.jpg","nickname":"18/18/178","note":"","ucode":"4A7E8BB0D0C249","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401491,"discussion_content":"我也","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633682949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":363955,"ip_address":""},"score":401491,"extra":""}]},{"author":{"id":2017876,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/ca/54/fecdc655.jpg","nickname":"鲸鱼少年丶","note":"","ucode":"552898FF528561","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277227,"discussion_content":"插入区间会变得吧0-n,n-2n,2n-4n......不知道是不是","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591018588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2017876,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/ca/54/fecdc655.jpg","nickname":"鲸鱼少年丶","note":"","ucode":"552898FF528561","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354490,"discussion_content":"区间长度会变～，上面的回答这点有问题。不过省略掉系数，常量后，答案的确是一样的，常量阶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615296804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":277227,"ip_address":""},"score":354490,"extra":""}]},{"author":{"id":1054201,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/f9/0b14785a.jpg","nickname":"三三","note":"","ucode":"4A76933C29BDA1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63709,"discussion_content":"这个是数组插入就是O(1)吧，不应当使用概率","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574904238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2530332,"avatar":"https://static001.geekbang.org/account/avatar/00/26/9c/1c/0432228a.jpg","nickname":"橘子宇橙子","note":"","ucode":"2E75D8428D2FE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369678,"discussion_content":"后面2得k次方*n，时间复杂度不应该是2的n次方吗？为什么是n呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619126706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2132323,"avatar":"https://static001.geekbang.org/account/avatar/00/20/89/63/ca423855.jpg","nickname":"JabinLi","note":"","ucode":"FA75D74418DBEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2530332,"avatar":"https://static001.geekbang.org/account/avatar/00/26/9c/1c/0432228a.jpg","nickname":"橘子宇橙子","note":"","ucode":"2E75D8428D2FE3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388099,"discussion_content":"同样有点疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628588807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":369678,"ip_address":""},"score":388099,"extra":""},{"author":{"id":1334321,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5c/31/d7b92b6b.jpg","nickname":"癡癡的等你歸","note":"","ucode":"AF950FDE0C736C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2132323,"avatar":"https://static001.geekbang.org/account/avatar/00/20/89/63/ca423855.jpg","nickname":"JabinLi","note":"","ucode":"FA75D74418DBEA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389728,"discussion_content":"这个我刚刚想明白了，2^k * n,  2的k次方乘以n， 然后2^k是一个常量，去掉就是n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629393751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388099,"ip_address":""},"score":389728,"extra":""},{"author":{"id":2011671,"avatar":"","nickname":"tsubasawzj","note":"","ucode":"69504F447C1E8D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1334321,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5c/31/d7b92b6b.jpg","nickname":"癡癡的等你歸","note":"","ucode":"AF950FDE0C736C","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":394051,"discussion_content":"k=log2(n/10) 为什么不直接算成 O(nlogn)?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631700034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389728,"ip_address":""},"score":394051,"extra":""}]},{"author":{"id":2524447,"avatar":"https://static001.geekbang.org/account/avatar/00/26/85/1f/85c69fa5.jpg","nickname":"红与银之诗","note":"","ucode":"4BBB8BF2033E1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359150,"discussion_content":"按1*p + 2*p+ ▪▪▪ + len*p + len * p 这样算出的加权平均复杂度不是O(n)吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616122869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547466,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/ca/1b01098e.jpg","nickname":"Lee","note":"","ucode":"45CDD6604732AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346037,"discussion_content":"最坏分析的很好，学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611844228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2085828,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/hppe9PzkmhUnok73Aub0BLBxufficYiaOTNOnBmTIf9A47SYiaOHMqMGsna4F2XSxBGD1upcEcscflhEuicv4mzEfg/132","nickname":"阿彭彭","note":"","ucode":"206E48ECFDEA86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329226,"discussion_content":"这位同学的想法和我一样，找到知己啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606351484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2307241,"avatar":"https://static001.geekbang.org/account/avatar/00/23/34/a9/63c06f8c.jpg","nickname":"G r e e。","note":"","ucode":"B15F5D42EB5A7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324499,"discussion_content":"虽然看不懂 但是感觉很正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605106224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1705240,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/7ib4VHuXnhAdZ1Tu8VeJxAHTko2COl4vVP6Ds68eKSjhfPaTSYstrfzhLupGaw8hMlvenIOd1svmBpiaKxqxZOdA/132","nickname":"kevin","note":"","ucode":"3AD79F7E7A6B73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36486,"discussion_content":"数组控件不断变大，数组长度不断趋于n，其中，p= 1/len+1=1/n+1，最后求出加权平均时间复杂度应该为: 1*p + 2*p+ ...+ len*p + len * p = (1+2+...+n+n)/(n+1) = (n2+2n)/2*(n+1) =O(n)，忽略了公式中的常量和系数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571383117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690686,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2W9wzKElsgDLLNQPxWpGonwpL9dIeVRnCBJicKXjSksRicLukcxGDQDGOHQjnH754nicnwib7bwQSRdS8rvib1W4YCw/132","nickname":"Sfixy","note":"","ucode":"76553F45870359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25077,"discussion_content":"哦，这是add（）函数吧。谢谢，代码种我有一些看的不仔细的地方，你给解决了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570415180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690686,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2W9wzKElsgDLLNQPxWpGonwpL9dIeVRnCBJicKXjSksRicLukcxGDQDGOHQjnH754nicnwib7bwQSRdS8rvib1W4YCw/132","nickname":"Sfixy","note":"","ucode":"76553F45870359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25076,"discussion_content":"为什么执行次数会改变，数组的长度不就是n吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570414916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54921,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1336966,"ip_address":"","ucode":"A54227DD997643","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/86/47184fdf.jpg","comment_is_top":false,"comment_ctime":1545982086,"is_pvip":false,"discussion_count":23,"race_medal":0,"score":"525531992198","product_id":100017301,"comment_content":"高中的数学已经忘光了，又回去补了下， 现在将推导的结果分享给大家<br>1、1+2+3+....+n+n   首先知道这是一个等差数列，等差数列的定义：每一项与前一个项的差都等于一个常数，这就是等差数列<br>2、计算等差数列的求和公式：  n(1+n)&#47;2    ，这是一个已经推导出来的公式，至于怎么推导出来的，自行去学习吧<br>好了， 现在开始推导：<br>1、主要就是推导分子，1+2+3+...+n+n   =  n(1+n)&#47;2 + n  = n(1+n)+2n &#47;2 = n+n²+2n&#47;2 = n² + 3n &#47;2 = n(n+3)&#47;2<br>2、将 n(n+3)&#47;2 代入式子中，就成了  n(n+3)&#47;2 &#47; n+1   =   n(n+3) &#47;2(n+1)<br><br>好了，打完收功","like_count":122,"discussions":[{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350714,"discussion_content":"你们要的【等差数列求和公式】推导来啦：\n方法是倒序相加\nSn=1+2+3+……+(n-1)+n\nSn=n+(n-1)+(n-2)+……+2+1\n将上下两式相加\n2Sn=(1+n)+(2+n-1)+(3+n-2)+……+(n-1+2)+(n+1)=(n+1)+(n+1)+(n+1)+……+(n+1)+(n+1)\n一共n项(n+1)\n2Sn=n(n+1)\nSn=n(n+1)/2\n倒序相加是数列求和中一种常规方法","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1613985411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2264679,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","nickname":"陈威洋","note":"","ucode":"DCF84B4D3A7354","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351022,"discussion_content":"不错的方法，这样就可以得到通项式，不错，貌似在台湾的课程有讲过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614126189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350714,"ip_address":""},"score":351022,"extra":""},{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2264679,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","nickname":"陈威洋","note":"","ucode":"DCF84B4D3A7354","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356963,"discussion_content":"你是台湾人？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615715314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351022,"ip_address":""},"score":356963,"extra":""},{"author":{"id":2264679,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","nickname":"陈威洋","note":"","ucode":"DCF84B4D3A7354","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357187,"discussion_content":"不是呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615738153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":356963,"ip_address":""},"score":357187,"extra":""}]},{"author":{"id":2034735,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0c/2f/a9cbcb76.jpg","nickname":"小青年","note":"","ucode":"7168E10235A2E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352339,"discussion_content":"我以为只有我忘了😭","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1614690309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124982,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/76/36fdddb3.jpg","nickname":"低调","note":"","ucode":"7D29B371BE9A46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306360,"discussion_content":"n+n 最后一个n是不是数组中没有这个元素，也得找一遍","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600255453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547466,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/ca/1b01098e.jpg","nickname":"Lee","note":"","ucode":"45CDD6604732AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16622,"discussion_content":"谢谢懂了，不过开始有点疑惑是，为什么是n+n，后来理解是因为要遍历n+1次，后面的那1次，其实也是遍历了n遍，所以分母的算法是1+2+....+n+n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568902202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1711748,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1e/84/935835d5.jpg","nickname":"YhPopulus","note":"","ucode":"D0533FB7BABF4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1547466,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/ca/1b01098e.jpg","nickname":"Lee","note":"","ucode":"45CDD6604732AE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44171,"discussion_content":"如果x再第一个位置，那需要1次比对，如果再第二个位置，就需要比对2次，一次类推，如果在第n个位置，就需要比对n次。如果不在数组中，也需要比对n次。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1572937260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":16622,"ip_address":""},"score":44171,"extra":""},{"author":{"id":1524154,"avatar":"https://static001.geekbang.org/account/avatar/00/17/41/ba/ae028565.jpg","nickname":"YqY","note":"","ucode":"73FB936045DCB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1547466,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/ca/1b01098e.jpg","nickname":"Lee","note":"","ucode":"45CDD6604732AE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98941,"discussion_content":"你写错了吧 应该是分子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577192102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":16622,"ip_address":""},"score":98941,"extra":""},{"author":{"id":1524154,"avatar":"https://static001.geekbang.org/account/avatar/00/17/41/ba/ae028565.jpg","nickname":"YqY","note":"","ucode":"73FB936045DCB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1711748,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1e/84/935835d5.jpg","nickname":"YhPopulus","note":"","ucode":"D0533FB7BABF4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98963,"discussion_content":"我觉得应该是这样，如果在数组中应该是n，不在数组中应该是1+2+3+。。+n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577192592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44171,"ip_address":""},"score":98963,"extra":""}]},{"author":{"id":1124982,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/76/36fdddb3.jpg","nickname":"低调","note":"","ucode":"7D29B371BE9A46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306521,"discussion_content":"加权平均时间复杂度, 公式 (d*n(n+1))/2, d=1/2n，代入得 (n+1)/4, 加的 n/2 是不在数组中概率，两者相加 (n+1)/4 + 2n/4 = (3n+1)/4 ，应该是这么算吧������","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600309890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/24/cd/576583b2.jpg","nickname":"依然","note":"","ucode":"B36AFB9A4F6D76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60781,"discussion_content":"少个括号\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574755030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1298739,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d1/33/736f9277.jpg","nickname":"林一","note":"","ucode":"AB85CC36185A04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358862,"discussion_content":"感谢推导！ 看完终于懂了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616065828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2277558,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c0/b6/9aca1886.jpg","nickname":"达达利亚","note":"","ucode":"D9755F79846142","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358743,"discussion_content":"大佬 可以教下加权平均值那个公式的推导过程么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616041556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1800923,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7a/db/5c51a72e.jpg","nickname":"一溢孤行","note":"","ucode":"27DDEB08081BBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297106,"discussion_content":"看懂了，感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596778280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632052,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e7/34/66289bd6.jpg","nickname":"Tokiomi","note":"","ucode":"E2C0A59D1B1D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292443,"discussion_content":"忘完了忘完了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595227974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1502969,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ee/f9/1dcffdc0.jpg","nickname":"Geek_919d2f","note":"","ucode":"C160495F3F609A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195829,"discussion_content":"我想问一下，这段话“把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1”，为什么是1+2+3+···+n+n？数组不是直接用下标取的值，不应该是 n 吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583313605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1438845,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/7d/b3efcd95.jpg","nickname":"王某","note":"","ucode":"E98BA1A4FF70E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1502969,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ee/f9/1dcffdc0.jpg","nickname":"Geek_919d2f","note":"","ucode":"C160495F3F609A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251683,"discussion_content":"注意看，是遍历的元素个数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588094023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":195829,"ip_address":""},"score":251683,"extra":""}]},{"author":{"id":1461874,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep9YJn3TCo32eYDJpgoNGSHNs4nqWGKre6K5E2hMaPMHicfz8nibx1f1Re75qAKyPVJGSlBAQ5bibAlw/132","nickname":"william","note":"","ucode":"071ACBACCE917E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163320,"discussion_content":"腻害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581069979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366453,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d9/b5/47ca1f17.jpg","nickname":"大於一","note":"","ucode":"E28D79126F9684","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":153022,"discussion_content":"括号里的 1+n 换成a1+an会比较好懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580016083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1340128,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8m96uYNX9WcJLXJGic3F9StzdjPyZhKW0RzpvYkVfgsuM9q4GuCSvJ5rslJgClEJg3ImXUEHXkbmNxmrAOiaxKtw/132","nickname":"don","note":"","ucode":"82BACA83063B57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15405,"discussion_content":"感谢提供等差数列公式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568818684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1646248,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1e/a8/b6d901a6.jpg","nickname":"浮生","note":"","ucode":"2D3256F7595E1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7325,"discussion_content":"斯国一~~~~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567493400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1568171,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ed/ab/c616bde0.jpg","nickname":"林墨 zszudo","note":"","ucode":"8E04BDA592771B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4849,"discussion_content":"看懂了！谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565771633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":28398,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1538072497,"is_pvip":true,"replies":[{"id":"10227","content":"count=1；count被重置为1。之后再插入的数据就会覆盖掉原来的数据。就相当于将原数组清空了。并不需要显示的去清空","user_name":"作者回复","comment_id":28398,"uid":"1190123","ip_address":"","utype":1,"ctime":1538094490,"user_name_real":"gg"}],"discussion_count":6,"race_medal":0,"score":"478279442353","product_id":100017301,"comment_content":"insert方法中有清空数组吗？抱歉，能指出哪行吗？真不明白😂","like_count":111,"discussions":[{"author":{"id":2101301,"avatar":"https://static001.geekbang.org/account/avatar/00/20/10/35/7ec42733.jpg","nickname":"朱国柱","note":"","ucode":"189572BB06F74E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324881,"discussion_content":"这就是逻辑删除与物理删除的意思了，哈哈！","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1605184326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425255,"discussion_content":"count=1；count被重置为1。之后再插入的数据就会覆盖掉原来的数据。就相当于将原数组清空了。并不需要显示的去清空","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1538094490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1763395,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","nickname":"小童","note":"","ucode":"300444B520E79D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73016,"discussion_content":"原来是这样啊，正好我这句也是没有懂！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575549183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2809373,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/KYdfKriaVxKe7P0Hk5e0eDwOoqjEPE4HYGqWlmTq8R7SibjyOKAhc95P13uAfH9ltGW8ib8SgfSwCnPEszicv2hXYA/132","nickname":"Geek_a94d7b","note":"","ucode":"8D438069B7DF5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590925,"discussion_content":"俺也一样，不过现在懂了 只是之后的insert覆盖了之前的数据，相当于清空了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666170954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2925388,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/uoPXcBWTSV3IeBlc3vqMY1QwSJeKv9DvytpVSkPX5pC6W3Y2ljo06ugDPKt50coGaialia8RIFh3btMnNKV7sGmw/132","nickname":"陈素琴","note":"","ucode":"7FC2AC00758F2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564200,"discussion_content":"我也是这里没懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650186725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2340235,"avatar":"https://static001.geekbang.org/account/avatar/00/23/b5/8b/92549066.jpg","nickname":"Geek_8183d5","note":"","ucode":"D06E69FC7737A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414536,"discussion_content":"俺也是。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636807648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30045,"user_name":"Kealina.","can_delete":false,"product_type":"c1","uid":1233490,"ip_address":"","ucode":"BBEA1A06CD67A4","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/52/c1665be6.jpg","comment_is_top":false,"comment_ctime":1538633853,"is_pvip":false,"replies":[{"id":"10842","content":"哈哈，写的太好了。留言区卧虎藏龙啊~","user_name":"作者回复","comment_id":30045,"uid":"1190123","ip_address":"","utype":1,"ctime":1538660278,"user_name_real":"gg"}],"discussion_count":10,"race_medal":0,"score":"443920265341","product_id":100017301,"comment_content":"调皮一下，还请老师来衡量下这例子恰当不。<br><br>举个栗子🌰：<br>今天你准备去老王家拜访下，可惜老王的爱人叫他去打个酱油，她告诉你说她限时n分钟🕒给他去买。那么你想着以他家到楼下小卖部来回最多一分钟，那么 “最好的情况”就是你只用等他一分钟。那么也有可能遇到突发情况，比如说电梯人多吖，路上摔了一胶，天知道他去干了什么，用了n分钟，没办法👐，主上有令，n分钟限时，那这就是“最坏的情况”。难点，平均时间复杂度 就是他有可能是第1.2.3...n，中的某个分钟回来，那平均就是1+2+3+...n&#47;n，把 所有可能出现的情况的时间复杂度 相加除以 情况数 。均摊的话就是把花时间多的分给花时间少的，得到一个中间值，所以说这就会和平均混淆，个人觉得主要还是概念不同。假如n是10分钟，那么9分钟分4分钟到1分钟那，8分3给2...，那均摊下来就是5分钟.编不下去了🤦🏼‍♀️","like_count":103,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425831,"discussion_content":"哈哈，写的太好了。留言区卧虎藏龙啊~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538660278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1740063,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8d/1f/383fbb5f.jpg","nickname":"小七","note":"","ucode":"B7F4F8BD7BCB75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48805,"discussion_content":"我比较关心的是，为什么你去老王家拜访，老王的爱人就马上叫老王去打酱油？默认你也姓王？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573528569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1188627,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/13/6ba35b43.jpg","nickname":"leejunhui","note":"","ucode":"A957C0034B9F4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1740063,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8d/1f/383fbb5f.jpg","nickname":"小七","note":"","ucode":"B7F4F8BD7BCB75","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240417,"discussion_content":"我也想知道","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587361420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":48805,"ip_address":""},"score":240417,"extra":""}]},{"author":{"id":1317847,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/d7/868d26ce.jpg","nickname":"songhyunmin","note":"","ucode":"D5A98668CD8532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351120,"discussion_content":"老王兴许去隔壁借酱油了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614157386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2264679,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","nickname":"陈威洋","note":"","ucode":"DCF84B4D3A7354","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351023,"discussion_content":"第一次看到有人把编程步骤比如成生活例子，学习到不少东西，接下来老王会很忙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614126435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2073374,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/v7XamvrSVaRkJsMhbKsZR5cMJktpPZUM4TpQAPJHZ4vtUHLSCTjdDibibCuffVxWhj5B9n8fjCmgFrDicfOHFwXSw/132","nickname":"Geek_fe5897","note":"","ucode":"8A78E005383288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293020,"discussion_content":"是不是忘记算上回不来的概率","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595413612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1648705,"avatar":"https://static001.geekbang.org/account/avatar/00/19/28/41/a29d08a7.jpg","nickname":"Geek_c437e6","note":"","ucode":"A2E6C02CD5AA4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186644,"discussion_content":"感觉摊分有点像2分查找``哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582702731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1648705,"avatar":"https://static001.geekbang.org/account/avatar/00/19/28/41/a29d08a7.jpg","nickname":"Geek_c437e6","note":"","ucode":"A2E6C02CD5AA4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186642,"discussion_content":"主要是卡在 平均和摊分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582702666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1648705,"avatar":"https://static001.geekbang.org/account/avatar/00/19/28/41/a29d08a7.jpg","nickname":"Geek_c437e6","note":"","ucode":"A2E6C02CD5AA4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186641,"discussion_content":"本来有点懵..但是看同学你的 评论.貌似有点明白了 感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582702651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1416002,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9b/42/4755b125.jpg","nickname":"krutoi","note":"","ucode":"343958B40082E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179244,"discussion_content":"这题只能用最坏情况时间复杂度分析，其他的都没意义，不然老王这个朋友不用交了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582210900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28463,"user_name":"Stalary","can_delete":false,"product_type":"c1","uid":1101749,"ip_address":"","ucode":"F69AFF7C958D31","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/b5/d1ec6a7d.jpg","comment_is_top":false,"comment_ctime":1538095239,"is_pvip":false,"replies":[{"id":"10369","content":"这个话题有点大 要具体看了 重点应该分析递归调用的次数吧。然后再看每次调用的耗时。综合考虑","user_name":"作者回复","comment_id":28463,"uid":"1190123","ip_address":"","utype":1,"ctime":1538143660,"user_name_real":"gg"}],"discussion_count":3,"race_medal":0,"score":"340840511623","product_id":100017301,"comment_content":"递归的时间复杂度怎么算呀","like_count":79,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425270,"discussion_content":"这个话题有点大 要具体看了 重点应该分析递归调用的次数吧。然后再看每次调用的耗时。综合考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318633,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/e9/dcc63d8f.jpg","nickname":"怕什么，抱紧我","note":"","ucode":"CBCEA76E9EF33B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266959,"discussion_content":"最好O（1）不用解释吧！递归的深度，不满足条件的那一刻就是最坏时间复杂度！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589571862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1754279,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/QlHaicGZOD7c68A6gHC5dGuukQ4VJtVpGCeHHc8ANvHxQ8K9GibVwLHQVURQeWGed8yOWcMqKDnibaSd7S6Y4WKSQ/132","nickname":"Geek rick","note":"","ucode":"1A9216B2A47E92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":59352,"discussion_content":"master method","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574687380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":28983,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1538213893,"is_pvip":false,"replies":[{"id":"10434","content":"公式是求平均比对多少个数组元素才能找到x。如果x再第一个位置，那需要1次比对，如果再第二个位置，就需要比对2次，一次类推，如果在第n个位置，就需要比对n次。如果不在数组中，也需要比对n次。所有的次数之和除以n+1中情况，就是平均比对元素个数。","user_name":"作者回复","comment_id":28983,"uid":"1190123","ip_address":"","utype":1,"ctime":1538218615,"user_name_real":"gg"}],"discussion_count":9,"race_medal":0,"score":"229171480581","product_id":100017301,"comment_content":"1+2+3....+n+n  ／ n+1  = n(n+3)&#47;2(n+1)  老师这个公式怎么推导出来的   能一步步展示下吗","like_count":53,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425455,"discussion_content":"公式是求平均比对多少个数组元素才能找到x。如果x再第一个位置，那需要1次比对，如果再第二个位置，就需要比对2次，一次类推，如果在第n个位置，就需要比对n次。如果不在数组中，也需要比对n次。所有的次数之和除以n+1中情况，就是平均比对元素个数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538218615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1472092,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/5c/2d058aed.jpg","nickname":"Vesen","note":"","ucode":"4DDC2BB56A70FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201740,"discussion_content":"(1+2+3....+n+n)／(n+1) = ((n*(n+1)/2)+n)/(n+1) = (n*(n+1)+2n)/(2(n+1)) = (n*(n+3))/(2*(n+1))","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1583833131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1609871,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","nickname":"奔跑的码仔","note":"","ucode":"AB3B02B07B8B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1472092,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/5c/2d058aed.jpg","nickname":"Vesen","note":"","ucode":"4DDC2BB56A70FD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210828,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584779665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":201740,"ip_address":""},"score":210828,"extra":""}]},{"author":{"id":1369376,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/RCTLbNQozlibvu0bAdd73L2ndhGywNIHX0ocwyK0VqV7lu6ibLA0zPdbADl0wE4icJjibVxgTqlvzG43ibr6D6AgBhg/132","nickname":"告白气球","note":"","ucode":"F073F0F2CABDEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264921,"discussion_content":"ni an dong秒懂，谢谢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589358477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1648705,"avatar":"https://static001.geekbang.org/account/avatar/00/19/28/41/a29d08a7.jpg","nickname":"Geek_c437e6","note":"","ucode":"A2E6C02CD5AA4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186656,"discussion_content":"这个问题,问题的真好..竟然懂了..","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582703359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088786,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9d/12/af03109d.jpg","nickname":"奥特之光","note":"","ucode":"10EE0B8B839975","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157719,"discussion_content":"1+2+3....+n=n(n+1)/2,那么1+2+3....+n+n=n(n+3)/2,所以(1+2+3....+n+n)/(n+1)= n(n+3)/2(n+1)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580490673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2956720,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/1d/b0/64a31242.jpg","nickname":"tutu的1024","note":"","ucode":"B6371A1919F20C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561917,"discussion_content":"1+....+n+n=n(n+1)/2+n=(n*n+n+2n)/2=n(n+3)/2;  n(n+3)/2/(n+1)=n(n+3)/2(n+1)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649745474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528610,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/22/cce9a2e5.jpg","nickname":"naku","note":"","ucode":"B49EF5B5B38400","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132178,"discussion_content":"为啥我算的结果上面是n+2，不是n+3.。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578885150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2033045,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/05/95/1ea7e529.jpg","nickname":"郑娜","note":"","ucode":"C6BDCB0F82838F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1528610,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/22/cce9a2e5.jpg","nickname":"naku","note":"","ucode":"B49EF5B5B38400","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281965,"discussion_content":"分母为2的时候没通分吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591850160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132178,"ip_address":""},"score":281965,"extra":""}]}]},{"had_liked":false,"id":28616,"user_name":"ppingfann","can_delete":false,"product_type":"c1","uid":1242999,"ip_address":"","ucode":"38DE7D2F6D22E4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo435IStLENgI45dWOow9gPDh8RcqvuCOLp30XqLJK3wqmwO7QKRLx8sMg9eucMKnJdjwickrAQMBw/132","comment_is_top":false,"comment_ctime":1538113209,"is_pvip":false,"replies":[{"id":"10297","content":"因为len并不是个确定量 初始值是10而已","user_name":"作者回复","comment_id":28616,"uid":"1190123","ip_address":"","utype":1,"ctime":1538116460,"user_name_real":"gg"}],"discussion_count":8,"race_medal":0,"score":"181926739641","product_id":100017301,"comment_content":"课后题的最坏时间复杂度不应该是O(1)吗？按照上一节讲的，循环的次数如果是有限次，就算数量极大，那么也应该是O(1)不是吗？<br>如果答案如大家所说的是O(n)，那么原题的len=10这个初始条件就应该改写为len=n。","like_count":42,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425326,"discussion_content":"因为len并不是个确定量 初始值是10而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538116460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233780,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d3/74/578b169d.jpg","nickname":"Yuuuuu","note":"","ucode":"64FD04761D2111","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41694,"discussion_content":"数据规模有两种体现形式，一种是调用方法时传入的参数体现，另一种是算法的调用次数体现。这个题的数据规模就是随着调用次数的增加儿增加。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1572487807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1634890,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f2/4a/613d8ea7.jpg","nickname":"Zak","note":"","ucode":"40EF2AD4928530","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25102,"discussion_content":"我也有这个疑惑，没想到在这里找到答案~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570419765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407552,"discussion_content":"我也有这个疑惑，瞬间明白了，区分n和1的重要一点，就是看len是否会发生变化。如果是固定值，那无论多大，都是1。如果是非固定值，那无论多小，它也是n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635058558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2529445,"avatar":"https://static001.geekbang.org/account/avatar/00/26/98/a5/87dd10e4.jpg","nickname":"Larryleo","note":"","ucode":"7F550E701C854A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365998,"discussion_content":"因为这个len并不是完全固定的，是一个线性增长的值 10，20，30，，，=》（1，2，3，4，，，，n）*10","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617937854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2213304,"avatar":"https://static001.geekbang.org/account/avatar/00/21/c5/b8/481d8a64.jpg","nickname":"Fy","note":"","ucode":"4F4C0617A79083","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310444,"discussion_content":"我也是这个疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601858001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1805565,"avatar":"","nickname":"邵丹丹","note":"","ucode":"54BA126D68ABC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290862,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594627823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39807,"discussion_content":"我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571991389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":28507,"user_name":"Silence","can_delete":false,"product_type":"c1","uid":1190290,"ip_address":"","ucode":"5EA66378BE3B18","user_header":"https://static001.geekbang.org/account/avatar/00/12/29/92/076e0f61.jpg","comment_is_top":false,"comment_ctime":1538097518,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"181926723950","product_id":100017301,"comment_content":"老师，加权平均值那个公式是怎么来的，每个的概率都是 1&#47;2n，平均的不应该也是 1&#47;2n 吗？为什么后面成了 2*（1&#47;2n）+3*（1&#47;2n）+.....n*（1&#47;2n）+n*（1&#47;2）","like_count":42,"discussions":[{"author":{"id":1600999,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/z5OUcd5RD7gMIevhHORHFcQsXNlZ4UxIU2jS6UwyUIM0w0nXI57nZKCXsibmN2o71WLtg5YXuJKeMNkItEzEaGg/132","nickname":"chrisforbt","note":"","ucode":"CA000E8A615001","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31965,"discussion_content":"在概率论和统计学中，数学期望(mean)（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和，是最基本的数学特征之一。它反映随机变量平均取值的大小。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1570973704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1454312,"avatar":"https://static001.geekbang.org/account/avatar/00/16/30/e8/6898e576.jpg","nickname":"季末灬离殇","note":"","ucode":"A40E9146C371FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3201,"discussion_content":"每个的概率是1/2n，但是执行的次数是变化的，从1到n都有可能，不知道这么说你是不是能理解。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1564299506,"is_liked":true,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1450195,"avatar":"https://static001.geekbang.org/account/avatar/00/16/20/d3/d4d7500c.jpg","nickname":"歩T_T歩T_T","note":"","ucode":"DDC2F6A3EA2A4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7878,"discussion_content":"1~n的总概率是在数组中的总概率1/2，平均每一个就是1/2n，所以前面的都是 * 1/2n，最后面一个n是不在数组中的概率独占1/2，所以最后一个是n * 1/2","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567695278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259387,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/7b/58f5d3d1.jpg","nickname":"不知名废物","note":"","ucode":"9CB37342FA7C03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381472,"discussion_content":"这个是数学期望，虽然每个的概率都是1/2n，但是每个需要执行的次数是不一样的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625069659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1600999,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/z5OUcd5RD7gMIevhHORHFcQsXNlZ4UxIU2jS6UwyUIM0w0nXI57nZKCXsibmN2o71WLtg5YXuJKeMNkItEzEaGg/132","nickname":"chrisforbt","note":"","ucode":"CA000E8A615001","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31966,"discussion_content":"因为这里求的是“执行次数”，所以x不在数组的时候的次数也要算进来，因此就有了最后一个“n*1/2”。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570973786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f5/c3/b819b53d.jpg","nickname":"三清","note":"","ucode":"65A052DC8B676A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312514,"discussion_content":"对应n+1种情况，由于每种情况之间是独立的，所以计算概率是加法公式，3n+1/4其实就是遍历次数的期望了。计算公式的每一项的组成是: 遍历次数*对应情况的概率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602726532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28905,"user_name":"leo","can_delete":false,"product_type":"c1","uid":1107385,"ip_address":"","ucode":"0A3D3508398328","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhicDSmL4vicPF4mF9g5icORERwDSqZv5Guk0TyhiacuBsiaVxCdktI6oCrKzcycwFlpyL6Q1nDbvJZzA/132","comment_is_top":false,"comment_ctime":1538190836,"is_pvip":false,"replies":[{"id":"10414","content":"👍","user_name":"作者回复","comment_id":28905,"uid":"1190123","ip_address":"","utype":1,"ctime":1538208520,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"134682177012","product_id":100017301,"comment_content":"画的前两节思维导图：<br>https:&#47;&#47;share.weiyun.com&#47;5D2VFqS","like_count":31,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425415,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538208520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004375,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/57/787a0c7b.jpg","nickname":"刘少科Mico","note":"","ucode":"DD9610AB096D1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61909,"discussion_content":"不清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574786823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70841,"user_name":"冷颜〆","can_delete":false,"product_type":"c1","uid":1237101,"ip_address":"","ucode":"8FE0FB27AFA31C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/6d/a55c6ec4.jpg","comment_is_top":false,"comment_ctime":1551192966,"is_pvip":false,"replies":[{"id":"25391","content":"是一直循环调用insert","user_name":"作者回复","comment_id":70841,"uid":"1190123","ip_address":"","utype":1,"ctime":1551232209,"user_name_real":"gg"}],"discussion_count":11,"race_medal":0,"score":"108925375366","product_id":100017301,"comment_content":" &#47;&#47; array 表示一个长度为 n 的数组<br> &#47;&#47; 代码中的 array.length 就等于 n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }<br>就这段代码而言 count=0 <br>怎么看时间复杂度都是O（1）啊 除非外面有循环一直运行 所以这段一直理解不了 ","like_count":25,"discussions":[{"author":{"id":1143372,"avatar":"https://static001.geekbang.org/account/avatar/00/11/72/4c/4d636a23.jpg","nickname":"在路上","note":"","ucode":"335960F683C23C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":59546,"discussion_content":"那这举例本身就有问题，真是误导别人啊","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1574690546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2223379,"avatar":"https://static001.geekbang.org/account/avatar/00/21/ed/13/5c75a98b.jpg","nickname":"乌呼啦呼","note":"","ucode":"D6B407EB222410","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311568,"discussion_content":"天哪我纠结了半个小时了想不懂怎么循环的直到翻到这儿.....","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1602403634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2080946,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/c0/b2/13d4b5a7.jpg","nickname":"果汁","note":"","ucode":"5EB6734CD84FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309622,"discussion_content":"老师写的是伪代码，只可意会不可言传，哈哈","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601367650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1405020,"avatar":"https://static001.geekbang.org/account/avatar/00/15/70/5c/ebb274eb.jpg","nickname":"板栗饼","note":"","ucode":"2DA25B053D7721","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":27650,"discussion_content":"我也一直想不通，直到看到这条评论","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570673189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440856,"discussion_content":"是一直循环调用insert","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1551232209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161972,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ba/f4/0dda3069.jpg","nickname":"小白","note":"","ucode":"C9BB2ED2B7FB60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300247,"discussion_content":"我也是这里加没懂，就卡住了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597998688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1711872,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1f/00/181f550a.jpg","nickname":"诗情画意","note":"","ucode":"0D7381C112A9C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39882,"discussion_content":"默默的加个1","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572009461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2758697,"avatar":"","nickname":"FayFey","note":"","ucode":"392AEF04A56E68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552768,"discussion_content":"同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645593131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1991279,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/62/6f/06d476f7.jpg","nickname":"Geek_Akara","note":"","ucode":"E86A5A9EEC8BFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260848,"discussion_content":"我还专门跑去查length 的用法，卡的死死的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588908004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1793589,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxppZUun6eqVDbbuyIzSZibcydqnDkdZ96NBDmNYHun484FUcdj3vdaJmuxia9wqEChMRkhj8IpfaA/132","nickname":"Summer","note":"","ucode":"DA2683248EA698","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181149,"discussion_content":"同疑问啊，这里就卡住了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582341522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","nickname":"Purson","note":"","ucode":"5F0C1BB3C0C0A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":178445,"discussion_content":"我也是一直想不通，感觉++count应该有循环的，但实际上没有外层循环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582164737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":28970,"user_name":"刘浩","can_delete":false,"product_type":"c1","uid":1240624,"ip_address":"","ucode":"81F5D6E62751C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/30/cfdd1b86.jpg","comment_is_top":false,"comment_ctime":1538211455,"is_pvip":false,"replies":[{"id":"10430","content":"你理解的很对啊，均摊只是其中一种复杂度度量方法，并不是说我们只关注均摊，不关注最坏。我们评价一段代码或者算法的时候，还是会综合这几种复杂度的。用什么表示复杂度不重要，初衷还是能更好的体现出这个算法或者代码的性能。","user_name":"作者回复","comment_id":28970,"uid":"1190123","ip_address":"","utype":1,"ctime":1538216940,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"104617426559","product_id":100017301,"comment_content":"这道题按照老师所讲的 答案是 O(1)，每次扩容的数量都是原来的2倍，都是经历之前数组长度的次数再次进行扩容，所以完全被均摊开了。<br><br>但是老师我有一个问题，就是按照您讲的确实时间复杂度被均摊成了O(1)，在这是一个理论的平均值，但终究不能忽略O(n)的存在，当n到达一定量级的时候，这个风险还是存在的，如果把他等同于O(1)，真的没关系吗？","like_count":24,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425448,"discussion_content":"你理解的很对啊，均摊只是其中一种复杂度度量方法，并不是说我们只关注均摊，不关注最坏。我们评价一段代码或者算法的时候，还是会综合这几种复杂度的。用什么表示复杂度不重要，初衷还是能更好的体现出这个算法或者代码的性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538216940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28826,"user_name":"molybdenum","can_delete":false,"product_type":"c1","uid":1251208,"ip_address":"","ucode":"DA24BDFCFF416C","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/88/be4fe19e.jpg","comment_is_top":false,"comment_ctime":1538154076,"is_pvip":false,"replies":[{"id":"10385","content":"是的 因为有些编程基础比较差的同学 他可能之前学清空就是一个一个的删 或者置为0","user_name":"作者回复","comment_id":28826,"uid":"1190123","ip_address":"","utype":1,"ctime":1538185282,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"70257630812","product_id":100017301,"comment_content":"答案与add例子相同，<br>至于大家纠结的清空问题，可以看做是标记清除，在同一地址空间上再写上新的值即可，没有必要硬删除，再开辟空间，或者名义上重置成某个数，直接用新的值覆盖即可","like_count":16,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425384,"discussion_content":"是的 因为有些编程基础比较差的同学 他可能之前学清空就是一个一个的删 或者置为0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538185282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28451,"user_name":"厚厚","can_delete":false,"product_type":"c1","uid":1008534,"ip_address":"","ucode":"C95341F5E3E776","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/96/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1538094710,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"57372669558","product_id":100017301,"comment_content":"第二个例子中，为什么是n+1次遍历？","like_count":13,"discussions":[{"author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62329,"discussion_content":"因为变量X在数组中的位置存在两种遍历情况：\n1. 当X是存在数组中的时候，有0 ~ n - 1中可能的位置，即 n种情况；\n2. 当X不在数组中的时候，就是 1 种情况，所以最后总的遍历就是 n + 1次。不知道这样解释你们懂吗？谢谢","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1574834362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1160050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/72/8c6366aa.jpg","nickname":"烈鸟","note":"","ucode":"F568728E862D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168170,"discussion_content":"明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581559564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":62329,"ip_address":""},"score":168170,"extra":""},{"author":{"id":1502969,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ee/f9/1dcffdc0.jpg","nickname":"Geek_919d2f","note":"","ucode":"C160495F3F609A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195832,"discussion_content":"为什么是1+2+3+···+n+n ？求大神讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583313853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":62329,"ip_address":""},"score":195832,"extra":""},{"author":{"id":1472092,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/5c/2d058aed.jpg","nickname":"Vesen","note":"","ucode":"4DDC2BB56A70FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1502969,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ee/f9/1dcffdc0.jpg","nickname":"Geek_919d2f","note":"","ucode":"C160495F3F609A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201743,"discussion_content":"骑行已经解答啦，你好好看看他上面的答案，1就是第一次就出现，2就是第二次出现，n是第n次出现，没有出现也要遍历n次所以还要加n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583833295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":195832,"ip_address":""},"score":201743,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6282,"discussion_content":"我以为只有我有这个疑问，应该是n次遍历吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566821575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28399,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1538072891,"is_pvip":true,"replies":[{"id":"10224","content":"是的 分析正确。不过我们一般情况下平均 均摊说一个就好了","user_name":"作者回复","comment_id":28399,"uid":"1190123","ip_address":"","utype":1,"ctime":1538094173,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"57372647739","product_id":100017301,"comment_content":"我算了下，最小是O(1)，最大是O(n)，平均和分摊都是O(1),对吗？😀","like_count":13,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425256,"discussion_content":"是的 分析正确。不过我们一般情况下平均 均摊说一个就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538094173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004375,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/57/787a0c7b.jpg","nickname":"刘少科Mico","note":"","ucode":"DD9610AB096D1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61910,"discussion_content":"老师说的对，如果能使用均摊时间复杂度就使用均摊，不能，就用平均时间复杂度。 均摊时间复杂度优先级更高。因为他更特殊，更多限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574786953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28596,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1538106676,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"53077714228","product_id":100017301,"comment_content":"最大的疑惑就是，insert()方法和add()方法是如何被调用的？？？","like_count":12,"discussions":[{"author":{"id":1493610,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ca/6a/c0d7dd7c.jpg","nickname":"echo🎶","note":"","ucode":"913A41823FDCEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222607,"discussion_content":"在外面调用，只是他没写而已","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1586162198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1637008,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fa/90/6ff9a256.jpg","nickname":"*","note":"","ucode":"61E466653C4B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1493610,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ca/6a/c0d7dd7c.jpg","nickname":"echo🎶","note":"","ucode":"913A41823FDCEB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280695,"discussion_content":"insert函数他说做了清空，我愣是没找到","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591596369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222607,"ip_address":""},"score":280695,"extra":""},{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1637008,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fa/90/6ff9a256.jpg","nickname":"*","note":"","ucode":"61E466653C4B8C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302770,"discussion_content":"程序里面没有做清空操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599026747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":280695,"ip_address":""},"score":302770,"extra":""},{"author":{"id":2229423,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/wzfYDPPpOicVaibXPwdDhiamC5GK9Hol765KiaibibXiaYUQX74VlFqbpuvuufhicxcGiaSibR8JLyYcAd8HUQ5DqnOTXjicQ/132","nickname":"Geek_0a4a44","note":"","ucode":"166929ACC97C30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1637008,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fa/90/6ff9a256.jpg","nickname":"*","note":"","ucode":"61E466653C4B8C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314382,"discussion_content":"我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603154331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":280695,"ip_address":""},"score":314382,"extra":""}]},{"author":{"id":1472092,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/5c/2d058aed.jpg","nickname":"Vesen","note":"","ucode":"4DDC2BB56A70FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201744,"discussion_content":"哈哈哈哈，一开始我也有这个疑问，后来想想老师只是举了例子并没有调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583833381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000004,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/44/d3d67640.jpg","nickname":"Hills录","note":"","ucode":"779020947ACABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23164,"discussion_content":"额，我理解我们在分析时间复杂度，并不要求程序要运行起来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569764118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28402,"user_name":"木心","can_delete":false,"product_type":"c1","uid":1236483,"ip_address":"","ucode":"742CED0E7F1B15","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKLZWeLLn4WxrMen2icfJVXL86tlicJIe7DqIdpFvCTvr9mUY6WwmnINzlu6yrfe3rK1cicg3sL6ibDxw/132","comment_is_top":false,"comment_ctime":1538089058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48782729314","product_id":100017301,"comment_content":"老师，我是跨行学习Python。希望每次进步一点～早安(^O^)!","like_count":11},{"had_liked":false,"id":28938,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538201810,"is_pvip":false,"replies":[{"id":"10437","content":"你这样说我很高兴 终于得到了你的认可！加油！同学！","user_name":"作者回复","comment_id":28938,"uid":"1190123","ip_address":"","utype":1,"ctime":1538219121,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"44487874770","product_id":100017301,"comment_content":"今天再看一遍我终于把平均时间复杂度给看明白了，果然书读百遍其义自见，我现在也能理解老师为啥不是天天更新了，在深入学习深层次的知识之前我们还有时间复习和强化当前知识点","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425435,"discussion_content":"你这样说我很高兴 终于得到了你的认可！加油！同学！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538219121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28798,"user_name":"小帅b","can_delete":false,"product_type":"c1","uid":1234521,"ip_address":"","ucode":"D866A428967480","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/59/cb4e7ed8.jpg","comment_is_top":false,"comment_ctime":1538146727,"is_pvip":false,"replies":[{"id":"10389","content":"说的很对","user_name":"作者回复","comment_id":28798,"uid":"1190123","ip_address":"","utype":1,"ctime":1538185891,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"40192852391","product_id":100017301,"comment_content":"———总结一下———<br><br>四个复杂度分析知识点<br><br>1. 最好情况时间复杂度<br><br>在最理想的情况下，执行这段代码的时间复杂度<br><br>2. 最坏情况时间复杂度<br><br>在最糟糕的情况下，执行这段代码的时间复杂度<br><br>3. 平均情况时间复杂度<br><br>最好与最坏是在极端情况下发生的，平均情况复杂度引入了概率，所以也叫加权平均时间复杂度或者期望时间复杂度。<br><br>只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。<br><br>4.均摊时间复杂度<br><br>应用的场景特殊、有限。<br><br>出现的频率是非常有规律的，而且有一定的前后时序关系<br><br><br><br><br>—————课后思考—————-<br><br>add函数中最好情况就是数组空间足够，把element赋值给array[i],所以最好情况时间复杂度为 O（1）；<br><br>最坏的情况就是数组不够了，最坏情况时间复杂度为O(n);<br><br>因为这个add方法是每次O(n)之后就会有n-1次O(1),所以可以采用摊还分析法。所以均摊下来的均摊时间复杂度为O(1)。<br><br>老师我说的对么？","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425377,"discussion_content":"说的很对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538185891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34789,"user_name":"OnlyAnywhere","can_delete":false,"product_type":"c1","uid":1004987,"ip_address":"","ucode":"322F4A59BD66F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/bb/3c467293.jpg","comment_is_top":false,"comment_ctime":1540300983,"is_pvip":false,"replies":[{"id":"12506","content":"👍","user_name":"作者回复","comment_id":34789,"uid":"1190123","ip_address":"","utype":1,"ctime":1540394852,"user_name_real":"gg"}],"discussion_count":6,"race_medal":0,"score":"35900039351","product_id":100017301,"comment_content":"1+2+3....+n+n ／ n+1 = n(n+3)&#47;2(n+1) 推导：<br>首先要知道1+2+3....+n = n(n+1)&#47;2<br>然后分母就是 n(n+1)&#47;2 + n = n(n+1)&#47;2 + 2n&#47;2 = (n^2 + n +2n)&#47;2 = (n^2 + 3n)&#47;2 = n(n+3)&#47;2<br>然后 n(n+3)&#47;2 除以 n+1 就等于n(n+3)&#47;n+1","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427339,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2414165,"avatar":"https://static001.geekbang.org/account/avatar/00/24/d6/55/7031ebdc.jpg","nickname":"陈峯","note":"","ucode":"7337EB89B92E99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349225,"discussion_content":"你这个是未加权的算平均复杂度","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613000713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/72/8c6366aa.jpg","nickname":"烈鸟","note":"","ucode":"F568728E862D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168220,"discussion_content":"您好，我想问下，然后 n(n+3)/2 除以 n+1 就等于n(n+3)/n+1 ，这一步，2除没了么？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581562760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350715,"discussion_content":"你们要的【等差数列求和公式】推导来啦：\n方法是倒序相加\nSn=1+2+3+……+(n-1)+n\nSn=n+(n-1)+(n-2)+……+2+1\n将上下两式相加\n2Sn=(1+n)+(2+n-1)+(3+n-2)+……+(n-1+2)+(n+1)=(n+1)+(n+1)+(n+1)+……+(n+1)+(n+1)\n一共n项(n+1)\n2Sn=n(n+1)\nSn=n(n+1)/2\n倒序相加是数列求和中一种常规方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613985459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301822,"discussion_content":"为什么1+2+3  ... +n 突然就 n(n+1)/2 ???","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598671908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1384090,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1e/9a/b130453a.jpg","nickname":"匿名用户","note":"","ucode":"A2B4E14F0F95AE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308094,"discussion_content":"等差数列求和公式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600845190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301822,"ip_address":""},"score":308094,"extra":""}]}]},{"had_liked":false,"id":28404,"user_name":"王婵","can_delete":false,"product_type":"c1","uid":1252171,"ip_address":"","ucode":"2125BEDE4DB773","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/4b/5c04e06c.jpg","comment_is_top":false,"comment_ctime":1538089678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35897828046","product_id":100017301,"comment_content":"和均摊那个例子的各种复杂度都一样","like_count":8},{"had_liked":false,"id":28591,"user_name":"Renext","can_delete":false,"product_type":"c1","uid":1020838,"ip_address":"","ucode":"3C4418F7E86CD6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","comment_is_top":false,"comment_ctime":1538105201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31602876273","product_id":100017301,"comment_content":"最好情况时间复杂度为 O(1)<br>最坏情况代码执行的次数跟每次数组的 长度有关<br>第1次调用insert的执行的次数为 n ,<br>第2次调用insert的执行的次数为 2n ,<br>第3次调用insert的执行的次数为 2^2 * n <br>第k次调用insert的执行的次数为 2^(k-1) * n <br>最好情况时间复杂度为 O(n)。<br><br>均摊时间复杂度 O(1)<br>","like_count":7},{"had_liked":false,"id":144453,"user_name":"小肥羊","can_delete":false,"product_type":"c1","uid":1081582,"ip_address":"","ucode":"9F44BAA1A59FAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/ee/bbee3ec1.jpg","comment_is_top":false,"comment_ctime":1571926690,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27341730466","product_id":100017301,"comment_content":"首先给作者点赞，讲的很细，大学那会没学明白放弃了的，感觉今天都捡回来了。<br>思考题：这个add方法和之前的insert方法很像，照葫芦画瓢就是了。<br>1.最好时间复杂度：数组刚好有空，插，O（1）<br>2.最坏时间复杂度：数组没空，遍历到n，新建扩容数组，并保留i值，插，O（n）<br>3.平均时间复杂度：概率是我最头疼的，我试试吧，（果然不知道咋办，回去瞄了一眼答案😂难点在于不知道怎么找总共有多少种情况）根据插的位置不同，有n种，还有一种是超过数组容量的方式，而每次插入的概率都一样所以是n+1分之1。它们的加权平均值就是O(1)<br>4.均摊时间复杂度：因为插入大部分情况是最好，只有少部分情况是最坏，而且是每隔n来一次，很有规律。那就把这个最坏的分摊到好的上面去，咋摊呢？（又去瞄了眼答案，糟了答案说的很含糊（ &#39;▿ &#39; ））拿成绩举例吧，99个人100分，1个人0分，原来那99个哥们很不幸均摊成绩为99分，那个0分哥们均摊成绩为99分，卧槽！原来这就是班级优秀的好处？所以大家都很牛逼。也就是均摊下来时间复杂度是O（1），还是很像平均数。<br>5.不要觉得别人评论了，自己就不能评论了，人人都这么想，作者该哭了。<br>6.求个赞，继续下一课。👍","like_count":6,"discussions":[{"author":{"id":2348081,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d4/31/7974d7ee.jpg","nickname":"Koibing","note":"","ucode":"68CD04AC923623","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331672,"discussion_content":"我倒觉得99个人0分，1个人100分，均摊了更形象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606924850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28658,"user_name":"big智慧","can_delete":false,"product_type":"c1","uid":1202616,"ip_address":"","ucode":"272C32E19EAE1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/b8/2a4624c3.jpg","comment_is_top":false,"comment_ctime":1538121164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27307924940","product_id":100017301,"comment_content":"add()代码注意点：<br>1、len只是代表常量可以考虑成随机数n，i可以考虑成随机数i<br>2、代码的调用不是一次性的，要考虑各种场景（len长度大或小于i）下的复杂度<br>复杂度分析：<br>最好时间复杂度：即i&lt;len时，复杂度为O(1)<br>最坏时间复杂度：即i&gt;=len时，复杂度为O(n)<br>均摊时间复杂度：即以len为周期，有规律的出现一系列O(1)再出现O(n)，复杂度则为O(1)<br>","like_count":6},{"had_liked":false,"id":28522,"user_name":"how","can_delete":false,"product_type":"c1","uid":1243367,"ip_address":"","ucode":"E4D9BE86AA6BCB","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/e7/25bf2374.jpg","comment_is_top":false,"comment_ctime":1538098769,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27307902545","product_id":100017301,"comment_content":"老师，insert方法里的count和array.length不是一个东西啊，把count置1怎么就清空array了？不明白","like_count":6,"discussions":[{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302771,"discussion_content":"我去跑了下程序 发现其实并没有清空","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599026787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157167,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1575052541,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"23049889021","product_id":100017301,"comment_content":"1 x 1&#47;2n + 2 x 1&#47;2n + 3 x 1&#47;2n + ..... + n x 1&#47;2n + n x 1&#47;2 = 3n+1&#47;4 推导过程如下：<br>1 x 1&#47;2n + 2 x 1&#47;2n + 3 x 1&#47;2n + ..... + n x 1&#47;2n 这里可以转化为 1+2+3+...+n&#47;2n，<br>这里 1+2+3+...+n 是等差数列，等差数列的求和公式： n(1+n)&#47;2 ，将公式套入<br>n(1+n)&#47;4n + n&#47;2 = n(1+n)&#47;4n + n&#47;2 = 1+n&#47;4 + n&#47;2 = 1+n&#47;4 + 2n&#47;4 = 3n+1&#47;4。","like_count":5},{"had_liked":false,"id":28791,"user_name":"饭℡特稀♥","can_delete":false,"product_type":"c1","uid":1241149,"ip_address":"","ucode":"9A58DCA6C979D8","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/3d/0767741a.jpg","comment_is_top":false,"comment_ctime":1538145602,"is_pvip":false,"replies":[{"id":"10393","content":"这几个公式已经很简单的喽。不懂你就得多看几遍 自己上网查查了。学习还得靠自己。同学，你要是哪个公式 具体哪个地方不理解 详细的指出来 我倒是可以再解释一下。","user_name":"作者回复","comment_id":28791,"uid":"1190123","ip_address":"","utype":1,"ctime":1538186698,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"23012982082","product_id":100017301,"comment_content":"有谁跟我一样，不清楚里面的几个公式是怎么导过来的么😂 ","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425374,"discussion_content":"这几个公式已经很简单的喽。不懂你就得多看几遍 自己上网查查了。学习还得靠自己。同学，你要是哪个公式 具体哪个地方不理解 详细的指出来 我倒是可以再解释一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538186698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28720,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1538133634,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23012970114","product_id":100017301,"comment_content":"王争老师好，各位同学们好：<br>    如本节insert()方法，如果count=array.length时，里面的循环是双层n的循环，即时间复杂度为O(n^2)，使用摊还时间复杂度分析得到的结果是O(n)吗？","like_count":5,"discussions":[{"author":{"id":1690686,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2W9wzKElsgDLLNQPxWpGonwpL9dIeVRnCBJicKXjSksRicLukcxGDQDGOHQjnH754nicnwib7bwQSRdS8rvib1W4YCw/132","nickname":"Sfixy","note":"","ucode":"76553F45870359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25079,"discussion_content":"这层循环就是copy数组，加一层循环没有用吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570415896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28464,"user_name":"伟忠","can_delete":false,"product_type":"c1","uid":1112089,"ip_address":"","ucode":"FE77CF20ED6065","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","comment_is_top":false,"comment_ctime":1538095274,"is_pvip":false,"replies":[{"id":"10243","content":"你说的完全正确 但我为了简化讲起来方便 就做了假设。主要是给读者介绍这个平均加权的由来","user_name":"作者回复","comment_id":28464,"uid":"1190123","ip_address":"","utype":1,"ctime":1538096203,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"23012931754","product_id":100017301,"comment_content":"原文：平均复杂度那儿，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1&#47;2。<br><br>问题：数组长度是有限的，要查找的数可能性有很多，这种情况下，在不在数组中概率并不是简单的½ ，这种情况下要根据数组长度，调用时要查找的数据范围种类去做具体分析，才能得到更准确的平均时间复杂度吧？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425271,"discussion_content":"你说的完全正确 但我为了简化讲起来方便 就做了假设。主要是给读者介绍这个平均加权的由来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538096203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123855,"user_name":"林墨 zszudo","can_delete":false,"product_type":"c1","uid":1568171,"ip_address":"","ucode":"8E04BDA592771B","user_header":"https://static001.geekbang.org/account/avatar/00/17/ed/ab/c616bde0.jpg","comment_is_top":false,"comment_ctime":1565772526,"is_pvip":false,"replies":[{"id":"45684","content":"找不到的情况下也是n","user_name":"作者回复","comment_id":123855,"uid":"1190123","ip_address":"","utype":1,"ctime":1565907517,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"18745641710","product_id":100017301,"comment_content":"为什么1+2+3....n+n。我觉得+n就已经是所有概率了，不明为什么+<br>n后还要+n","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462847,"discussion_content":"找不到的情况下也是n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565907517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118371,"user_name":"DUO2.0","can_delete":false,"product_type":"c1","uid":1565172,"ip_address":"","ucode":"B8C1A267F959F1","user_header":"https://static001.geekbang.org/account/avatar/00/17/e1/f4/456752ac.jpg","comment_is_top":false,"comment_ctime":1564349374,"is_pvip":false,"replies":[{"id":"43670","content":"是的，你说的也没错，就是要循环调用那个函数。不过一般情况下，都在讲均摊了，肯定是不止一次调用了。","user_name":"作者回复","comment_id":118371,"uid":"1190123","ip_address":"","utype":1,"ctime":1564530224,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"18744218558","product_id":100017301,"comment_content":"分摊时间复杂度的那个例子是不是应该有一个外循环呢？能不能具体解释一下呢？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460379,"discussion_content":"是的，你说的也没错，就是要循环调用那个函数。不过一般情况下，都在讲均摊了，肯定是不止一次调用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564530224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2687339,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/NGib8v9Lml2JBfP5hIKib85d3jQpWibbXwfjaGnKmmGOzX45a3AQN67E5QnuKwaKc4MPfOe5qqLmW4tJxqZ8RCiawg/132","nickname":"Geek_ting_2021","note":"","ucode":"A6D5C57FA6806F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541771,"discussion_content":"原来这样，有点理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640563357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37713,"user_name":"邵峰","can_delete":false,"product_type":"c1","uid":1240036,"ip_address":"","ucode":"1017E31C6255F7","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/e4/dabff318.jpg","comment_is_top":false,"comment_ctime":1541690301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18721559485","product_id":100017301,"comment_content":"自从学了老师的课程，得了for循环综合症，一看到for循环就不行，就想分析一下，看是否有更优的方案","like_count":4},{"had_liked":false,"id":28644,"user_name":"djane","can_delete":false,"product_type":"c1","uid":1249032,"ip_address":"","ucode":"5315AA246AFDD8","user_header":"","comment_is_top":false,"comment_ctime":1538118834,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18717988018","product_id":100017301,"comment_content":"【笔记】<br>同一段代码，在不同输入的情况下，复杂度量级有可能是不一样的。<br>一、最好、最坏情况时间复杂度<br>1、最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。<br>2、最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。<br><br>二、平均情况时间复杂度<br>全称：加权平均时间复杂度或者期望时间复杂度。<br>（只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。）<br><br>三、均摊时间复杂度<br>分析方法：摊还分析（或者叫平摊分析）<br>均摊时间复杂度就是一种特殊的平均时间复杂度。<br>（将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。）<br><br>【习题】<br>1、最好情况时间复杂度：<br>当i&lt;len时，直接往数组中添加一个元素，时间复杂度是O(1)。<br>2、最坏情况时间复杂度：<br>当i&gt;=len时，数组空间不够，走了for循环，时间复杂度是O(n)。<br>3、平均情况时间复杂度：<br>有n+1种情况，而且，这 n+1 种情况发生的概率一样，都是 1&#47;(n+1)。<br>(1+1+...+1+n)&#47;(n+1) = 2n&#47;(n+1)，所以时间复杂度为O(1)。","like_count":4,"discussions":[{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350854,"discussion_content":"请问这个+n是怎么来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614051694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28622,"user_name":"Dwyane","can_delete":false,"product_type":"c1","uid":1110081,"ip_address":"","ucode":"FD5B9DF96A5BDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/41/f6153c7a.jpg","comment_is_top":false,"comment_ctime":1538114996,"is_pvip":false,"replies":[{"id":"10306","content":"写得不错👍","user_name":"作者回复","comment_id":28622,"uid":"1190123","ip_address":"","utype":1,"ctime":1538121092,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"18717984180","product_id":100017301,"comment_content":"老师以及各位朋友，大家好！<br>这是我的总结：<br>1、摊还分析法，得出课后题答案为 O(1)<br>2、最好最坏情况时间复杂度以及平均情况时间复杂度<br>很多情况下，我们只需利用03课学到的知识，利用大O表示复杂度即可。<br>上面的三种情况复杂度，只是针对同一段代码而言，更具体的才需要这样分析。<br>（自我感觉：难点在于概率论那部分，希望日后老师多加讲解。）<br>3、均摊时间复杂度则是一次引申。因为特殊性很大。<br><br>老规矩：（推导）文中的计算核心是（首项+尾项）*n(次数）&#47;2<br>","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425329,"discussion_content":"写得不错👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538121092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28466,"user_name":"old罗先森","can_delete":false,"product_type":"c1","uid":1219577,"ip_address":"","ucode":"43A9AEC2894130","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/f9/6a9cbcb7.jpg","comment_is_top":false,"comment_ctime":1538095475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18717964659","product_id":100017301,"comment_content":"作业的答案我认为是O(1)。<br><br>个人感悟:时间复杂度的分析一般出现在有循环体的代码块中，难点在于该循环体的代码执行次数依赖或者受某些条件的影响，正确分析这些条件是得出时间复杂度的前提。<br><br>最好情况时间复杂度:判断代码块最快结束的情况<br>最坏情况时间复杂度:判断代码块最慢完成的情况<br>平均情况时间复杂度:考虑每种可能情况执行的次数K及其对应概率P，所有可能情况的次数与概率分别相乘再相加∑Ki*Pi，然后化简取较大项<br>均摊时间复杂度:代码块的执行存在两种截然相反的时间复杂度情况，且这两种情况的出现频率是有规律的，一般取出现频率多的情况作为时间复杂度","like_count":4},{"had_liked":false,"id":28407,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1538091176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18717960360","product_id":100017301,"comment_content":"最好O（1），最坏O（log n），平均O（1）","like_count":4},{"had_liked":false,"id":137288,"user_name":"特图尔","can_delete":false,"product_type":"c1","uid":1664459,"ip_address":"","ucode":"6070209DA8B38D","user_header":"https://static001.geekbang.org/account/avatar/00/19/65/cb/77e176e7.jpg","comment_is_top":false,"comment_ctime":1569677956,"is_pvip":false,"replies":[{"id":"52764","content":"如果一段代码的平均、最好、最坏时间复杂度不相同，我们在评价这段代码的时候，要三个都说一下。","user_name":"作者回复","comment_id":137288,"uid":"1190123","ip_address":"","utype":1,"ctime":1569710358,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"14454579844","product_id":100017301,"comment_content":"老师这句话什么意思：只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469021,"discussion_content":"如果一段代码的平均、最好、最坏时间复杂度不相同，我们在评价这段代码的时候，要三个都说一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569710358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57630,"user_name":"来一碟蛋炒粉吧！","can_delete":false,"product_type":"c1","uid":1353142,"ip_address":"","ucode":"820B710C9822A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/a5/b6/439f7826.jpg","comment_is_top":false,"comment_ctime":1546854812,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14431756700","product_id":100017301,"comment_content":"课后作业： <br>最好情况时间复杂度：O(1) <br>最坏情况时间复杂度：最坏情况即是数组翻倍的时候，而数i组翻倍的话len==i，所以可以记为O（i）<br>平均情况时间复杂度：楼上也说了第k次调用insert() 执行次数为 2^(k-1) * n  也就是 2^(k-1) * len <br>按照len为10的初始值来看，当 i in [0,9]时，直接插入元素的概率为100%，当i in [10,19]时 直接插入元素的概率为 (len-2)&#47;(len-1) 当 i in [20,39]时，此概率为 (2*len-2)&#47;(2*len-1) 当 i in [40，79]时，此概率又变成了：(4*len-2)&#47;(4*len-1), 除了第一次进 if ，之后的概率基本可以归纳为 2^(k-1)*len-2 &#47; 2^(k-1)*len-1<br>那么相应的，数组容量翻倍的概率 就是 1&#47; 2^(k-1)*len-1 <br>那么得到了这些概率，怎么样可以算出平均情况时间复杂度呢？求指教","like_count":3,"discussions":[{"author":{"id":2053397,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/55/15/54073172.jpg","nickname":"18/18/178","note":"","ucode":"4A7E8BB0D0C249","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363995,"discussion_content":"每个场景的代码执行次数 x 这个场景出现的概率；然后累加","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617343917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365666,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/a2/c8978055.jpg","nickname":"lovetyt","note":"","ucode":"04D5D39F9B9DD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139949,"discussion_content":"学到了学到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579333999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365666,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/a2/c8978055.jpg","nickname":"lovetyt","note":"","ucode":"04D5D39F9B9DD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139948,"discussion_content":"终生受用啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579333981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365666,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/a2/c8978055.jpg","nickname":"lovetyt","note":"","ucode":"04D5D39F9B9DD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139946,"discussion_content":"学到了学到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579333972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365666,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/a2/c8978055.jpg","nickname":"lovetyt","note":"","ucode":"04D5D39F9B9DD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139945,"discussion_content":"牛逼啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579333953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28667,"user_name":"Xs.Ten","can_delete":false,"product_type":"c1","uid":1128376,"ip_address":"","ucode":"2368B9BDDDEE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/37/b8/c887a5ea.jpg","comment_is_top":false,"comment_ctime":1538123135,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14423025023","product_id":100017301,"comment_content":"第一个10，O(1)；<br>11-20，11循环前面10个数，12-20为O(1)<br>21-40，21循环前20个数；22-40为O(1)<br>41-80，41循环前40个数；42-80为O(1)<br>...<br>直到n的时候，总是会先填充数据，然后再扩充长度。扩充循环的次数O(n)，又满足后期O(1)的次数，<br>所以总的均摊平均时间复杂度为O(1)，请老师指正。","like_count":3},{"had_liked":false,"id":28580,"user_name":"玉皇大亮","can_delete":false,"product_type":"c1","uid":1019849,"ip_address":"","ucode":"5C4FDF1FDCF8A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/c9/833d5060.jpg","comment_is_top":false,"comment_ctime":1538103963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14423005851","product_id":100017301,"comment_content":"最好时间复杂度：O(1)<br>最坏时间复杂度：O(Len)<br>平均时间复杂度：O(1)<br>均摊时间复杂度：O(1)<br>这道题和insert函数的情况是类似的，如果数组为空，插入元素的次数小于len=10,则add函数都是O(1)的操作，如果插入次数大于len,但是小于2len,此时数组扩容，循环len次，最坏情况O(len)；平均来说，每次数组扩容后，原数组被导入新数组，虽然数组的长度变大了，但是插入次数落在的区间仍是0~len-1, len~2len-1,....,插入的情况仍是len+1种：0~len-1和插满之后的O(len)，也就是每次插入的概率是     <br>p= 1&#47;len+1，所以加权平均时间复杂度为  1*p + 2*p+ ▪▪▪ + len*p + len * p = O(1) ; 而均摊复杂度由于每次O(len)的出现都跟着len次O(1)，是前后连贯的，因而将O(len)平摊到前len次上，得出平摊复杂度是O(1)","like_count":3},{"had_liked":false,"id":28513,"user_name":"jutsu","can_delete":false,"product_type":"c1","uid":1124574,"ip_address":"","ucode":"95CEDEF5D085CF","user_header":"https://static001.geekbang.org/account/avatar/00/11/28/de/54667f13.jpg","comment_is_top":false,"comment_ctime":1538097725,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14422999613","product_id":100017301,"comment_content":"代码都可以复制了，赞👍","like_count":3},{"had_liked":false,"id":28505,"user_name":"登品","can_delete":false,"product_type":"c1","uid":1134511,"ip_address":"","ucode":"DA94DA7A7CFE3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/af/50c3e8dd.jpg","comment_is_top":false,"comment_ctime":1538097493,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14422999381","product_id":100017301,"comment_content":"感觉课后思考题的数组长度和len应该改为n才对，如果是固定的10，按照上一节的讲述，这个时间复杂度应该是O（1）了","like_count":3,"discussions":[{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302993,"discussion_content":"那里有 ++i 而且有扩充 所以还是要分情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599108554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28488,"user_name":"Kermit Sun","can_delete":false,"product_type":"c1","uid":1245430,"ip_address":"","ucode":"9B0560FB228629","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/f6/f6cf138c.jpg","comment_is_top":false,"comment_ctime":1538096675,"is_pvip":false,"replies":[{"id":"10246","content":"那这样子吧 我们抛开insert函数单讲如何置空一个数组。如果当前数组a存储了1 2 3 4 四个元素 count=4。请问如何把数组置空？count设置为0可以吗？","user_name":"作者回复","comment_id":28488,"uid":"1190123","ip_address":"","utype":1,"ctime":1538097730,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"14422998563","product_id":100017301,"comment_content":"insert没有外层循环啊 而且count=1语义上来说并没有清空数组啊 老师用的什么需要编写的？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425281,"discussion_content":"那这样子吧 我们抛开insert函数单讲如何置空一个数组。如果当前数组a存储了1 2 3 4 四个元素 count=4。请问如何把数组置空？count设置为0可以吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538097730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300004,"user_name":"Geek_839aad","can_delete":false,"product_type":"c1","uid":2676931,"ip_address":"","ucode":"52B9025458DD6D","user_header":"","comment_is_top":false,"comment_ctime":1624951638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10214886230","product_id":100017301,"comment_content":"我理解的~<br><br>只要 一次性的动作 重复n次， n次的动作 只做一次， 那么均摊就是 O(1)<br><br>反过来   n次的动作 重复n次， 一次性的动作 只做一次， 那么均摊就是O(n)","like_count":2},{"had_liked":false,"id":279857,"user_name":"Kyle(","can_delete":false,"product_type":"c1","uid":1640978,"ip_address":"","ucode":"0C14C4C086CAA9","user_header":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","comment_is_top":false,"comment_ctime":1613985378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10203919970","product_id":100017301,"comment_content":"你们要的【等差数列求和公式】推导来啦：<br>方法是倒序相加<br>Sn=1+2+3+……+(n-1)+n<br>Sn=n+(n-1)+(n-2)+……+2+1<br>将上下两式相加<br>2Sn=(1+n)+(2+n-1)+(3+n-2)+……+(n-1+2)+(n+1)=(n+1)+(n+1)+(n+1)+……+(n+1)+(n+1)<br>一共n项(n+1)<br>2Sn=n(n+1)<br>Sn=n(n+1)&#47;2<br>倒序相加是数列求和中一种常规方法","like_count":2},{"had_liked":false,"id":275409,"user_name":"小强","can_delete":false,"product_type":"c1","uid":2398148,"ip_address":"","ucode":"C3D1215867302D","user_header":"https://static001.geekbang.org/account/avatar/00/24/97/c4/6c92c78a.jpg","comment_is_top":false,"comment_ctime":1611509404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10201443996","product_id":100017301,"comment_content":"感觉从均摊时间复杂度开始，特别是那个insert函数，特别晕。看了留言，大家也挺多疑问的，不知道能不能更新一下这一部分？看看是否有更好的例子？","like_count":2},{"had_liked":false,"id":212919,"user_name":"iris","can_delete":false,"product_type":"c1","uid":1986106,"ip_address":"","ucode":"8D54D1DBEA6F64","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4e/3a/1932100c.jpg","comment_is_top":false,"comment_ctime":1588238173,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10178172765","product_id":100017301,"comment_content":"思考题：最好是O(1)，最坏是O(n)，均摊是O(n)<br>看评论区学到了加权平均公式里面的1，2，3，去乘以每次的概率P的原因，1，2，3...n这些数字表示每次执行这n次，每次的概率是P，懂了。<br>小记：最好、最坏、平均复杂度还算比较好理解，<br>其中这句话我理解的懵懵懂懂“每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) ”，个人觉得是不是觉得也同价于“每有一次的最坏复杂度，剩下的n-1都是最好复杂度”。<br>摊分复杂度：理解了，属于分摊的概念，又觉得最后计算得到的结果是和平均复杂度是一样的，记了一句话“在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度”。","like_count":2,"discussions":[{"author":{"id":1134511,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/af/50c3e8dd.jpg","nickname":"登品","note":"","ucode":"DA94DA7A7CFE3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338064,"discussion_content":"别人的均摊复杂度为O(1)，你的均摊复杂度为O(n)；后面说的又很在理，看迷糊了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609163681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2687339,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/NGib8v9Lml2JBfP5hIKib85d3jQpWibbXwfjaGnKmmGOzX45a3AQN67E5QnuKwaKc4MPfOe5qqLmW4tJxqZ8RCiawg/132","nickname":"Geek_ting_2021","note":"","ucode":"A6D5C57FA6806F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134511,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/af/50c3e8dd.jpg","nickname":"登品","note":"","ucode":"DA94DA7A7CFE3D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541773,"discussion_content":"我的天","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640563416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338064,"ip_address":""},"score":541773,"extra":""}]}]},{"had_liked":false,"id":161692,"user_name":"ano","can_delete":false,"product_type":"c1","uid":1783342,"ip_address":"","ucode":"7DE64BDFA78550","user_header":"https://static001.geekbang.org/account/avatar/00/1b/36/2e/376a3551.jpg","comment_is_top":false,"comment_ctime":1576297708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10166232300","product_id":100017301,"comment_content":"老师，你说的“清空数组”这句话是代码中哪个语句实现的？我没有看到有清空数据的语句<br><br>--我先来解释一下这段代码。这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。<br><br> &#47;&#47; array表示一个长度为n的数组<br> &#47;&#47; 代码中的array.length就等于n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }","like_count":2},{"had_liked":false,"id":132740,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1568209070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10158143662","product_id":100017301,"comment_content":"听了好多遍，发现还是看效果好些","like_count":2},{"had_liked":false,"id":93953,"user_name":"DY","can_delete":false,"product_type":"c1","uid":1459006,"ip_address":"","ucode":"55536A524A99B4","user_header":"https://static001.geekbang.org/account/avatar/00/16/43/3e/960d12cb.jpg","comment_is_top":false,"comment_ctime":1557675354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10147609946","product_id":100017301,"comment_content":"(1+2+3+...+n+n)&#47;(n+1) = (2+3+...+n+(n+1))&#47;(n+1) = (2+(n+1))*n&#47;(2*(n+1))=(n+3)*n&#47;2*(n+1)","like_count":2},{"had_liked":false,"id":90866,"user_name":"frame_0224","can_delete":false,"product_type":"c1","uid":1514905,"ip_address":"","ucode":"7692DF4EA3607A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF2gTFBleTUJK4BNqia5Ov2yiatpmLiclxibMFmCwXvIUMicL52ajftUxlQS0SIXldUk2n9BiaOczdaqFQ/132","comment_is_top":false,"comment_ctime":1556697367,"is_pvip":false,"replies":[{"id":"32578","content":"是的","user_name":"作者回复","comment_id":90866,"uid":"1190123","ip_address":"","utype":1,"ctime":1556701831,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10146631959","product_id":100017301,"comment_content":"王老师，一般情况下，我们是不是就考虑最坏时间复杂度就可以了","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448700,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556701831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36019,"user_name":"李大飞","can_delete":false,"product_type":"c1","uid":1052889,"ip_address":"","ucode":"3264FA5EE734A6","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/d9/6d456c8e.jpg","comment_is_top":false,"comment_ctime":1540893087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10130827679","product_id":100017301,"comment_content":"2018.10.30，要抓紧了，落后太多了。但是还是要mark一下，终于在今天把“最好、最坏、平均、均摊时间复杂度”弄明白了，感谢王大大精彩的文章和评论里卧虎藏龙的高手们！感谢！其实，大家不用纠结于“清空数组的问题”，我也停留了一会，文章中的意思是：当count等于数组长度时，角标为0是求和的数值，角标1是后面要插入的元素，此时的数组跟原数组不一样了，不就是相当于被“清空”后，重置了吗？不必纠结哈。","like_count":2},{"had_liked":false,"id":29434,"user_name":"nuo-promise","can_delete":false,"product_type":"c1","uid":1116668,"ip_address":"","ucode":"39C48245330A35","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/fc/6f53d426.jpg","comment_is_top":false,"comment_ctime":1538370736,"is_pvip":false,"replies":[{"id":"10607","content":"是n(n+1)&#47;2 你自己举几个例子看看就知道了","user_name":"作者回复","comment_id":29434,"uid":"1190123","ip_address":"","utype":1,"ctime":1538401466,"user_name_real":"gg"}],"discussion_count":1,"race_medal":1,"score":"10128305328","product_id":100017301,"comment_content":"你好，那个复杂度 n(n+3)&#47;2(n+1) 1到n的相加不是n(n+1)么，怎么成+3了","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425600,"discussion_content":"是n(n+1)/2 你自己举几个例子看看就知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538401466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28707,"user_name":"Nirvanaliu","can_delete":false,"product_type":"c1","uid":1255092,"ip_address":"","ucode":"A2576845D5A18E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELVTictrUd4I3icvCtoibG2WibaiaILSxj0TAXvk27evBR6nfnYuEqIfmfW6pRl42IibcZyiaoqrXqDnzymw/132","comment_is_top":false,"comment_ctime":1538130264,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10128064856","product_id":100017301,"comment_content":"我觉得各位关于清空的疑惑，我的理解是这个函数调用很多次后，count也从0开始增加，在没有大于length即数组长度的时候，这时候复杂度就是O（1），大于等于数组长度时执行循环求和，并将count重新置为1，从数组第二个元素开始。这时复杂度为O（n）。<br>函数继续等待调用，这时候执行的就是普通插值，替换数组原有值，相当于清空。复杂度为O（1）。<br>以上过程反反复复，复杂度就是1 1 1 1.....n 1.....n 1...n 。这样的成阶梯函数的复杂度变化规律明显和平均复杂度完全不同。就像老师说的，O（n）一次，后续都是由n个 O（1）来背锅，来均摊。<br>菜鸟的理解，不知道正确预防。🙏🙏🙏","like_count":2,"discussions":[{"author":{"id":2837377,"avatar":"","nickname":"飞尚前端小组（1）","note":"","ucode":"1E750C90F23EED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414371,"discussion_content":"mark一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636729143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28623,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1538115211,"is_pvip":false,"replies":[{"id":"10295","content":"文章里明确写了可以按照平均复杂度的分析方法去分析 同学 再认真看一遍吧","user_name":"作者回复","comment_id":28623,"uid":"1190123","ip_address":"","utype":1,"ctime":1538116375,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"10128049803","product_id":100017301,"comment_content":"均摊复杂度那个例子，为什么不能按照平均复杂度例子里面分为：数组有剩余空间和没剩余空间？为什么不能按照平均复杂度的那种分析方式去分析？感觉没搞懂，希望老师再给我这种笨人解释下","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425330,"discussion_content":"文章里明确写了可以按照平均复杂度的分析方法去分析 同学 再认真看一遍吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538116375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28555,"user_name":"王弘毅","can_delete":false,"product_type":"c1","uid":1243952,"ip_address":"","ucode":"C802339E04315C","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/30/f3633047.jpg","comment_is_top":false,"comment_ctime":1538102224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10128036816","product_id":100017301,"comment_content":"课后思考题<br>最好时间复杂度<br>1<br>最坏时间复杂度<br>n<br>平均时间复杂度<br>（n+1）&#47;2<br>均摊时间复杂度<br>（n+1）&#47;2","like_count":2},{"had_liked":false,"id":28484,"user_name":"韩","can_delete":false,"product_type":"c1","uid":1218674,"ip_address":"","ucode":"75BB3E48AE7E45","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/72/0dccb3e7.jpg","comment_is_top":false,"comment_ctime":1538096487,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10128031079","product_id":100017301,"comment_content":"课后思考题我觉得是和摊还分析的例子类似，时序性的，但在复杂度高一阶的那次操作的复杂度会随着数组长度x2，遍历次数递增了。属于非线性复杂度<br><br>整体来看，复杂度是随着数组初始长度变化的，需要将初始值10定义为一个变量m，这个变量很有用，整个时序是以m为周期的(数组每增加m个原素就扩容m)<br><br>这样可以简化问题，只要把每个周期内的花销以函数的形式表示出来即可。<br><br>每m个操作的复杂度=<br> m -1个O(1)操作 + 1个复制数组元素的操作<br>所以，一个周期的复杂度为:<br>1 &#47; m x ((m -1) &#47; O(1) + O(2^k x m))<br>算到这里，可以看到需要另一个变量k，表示当前是在第几个周期。<br><br>😅算到这里我都懵了，是不是结论可以说这个算法的运行效率主要由当前数组长度决定。<br><br>","like_count":2,"discussions":[{"author":{"id":2312214,"avatar":"https://static001.geekbang.org/account/avatar/00/23/48/16/df9b9f53.jpg","nickname":"纳兰小狐獴","note":"","ucode":"882182192B89FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324664,"discussion_content":"不对吧 复制数组的时候就是O(m)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605149720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28444,"user_name":"科大大👏🏻","can_delete":false,"product_type":"c1","uid":1075392,"ip_address":"","ucode":"F993F7D8FCFA2B","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/c0/178a5b16.jpg","comment_is_top":false,"comment_ctime":1538094154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10128028746","product_id":100017301,"comment_content":"最好最坏和平均都跟 insert 方法一样，均摊的话是每 O(n)  次的操作之后都伴随有 n 次的 O(1) 操作，均摊下去是 n&#47;n+1 所以是 O(1) 对么","like_count":2},{"had_liked":false,"id":28439,"user_name":"五岳寻仙","can_delete":false,"product_type":"c1","uid":1247467,"ip_address":"","ucode":"88A46A4E1832CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/eb/594e9e6c.jpg","comment_is_top":false,"comment_ctime":1538093832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10128028424","product_id":100017301,"comment_content":"① 最好的情况是数组还没满，直接插入一个元素的时间复杂度为 O(1)<br>② 最坏的情况是数组已经满了，插入一个元素前需要先建立一个两倍大的数组，并将原数组的内容拷贝到新数组中，时间复杂度为O(n)<br>③ 最坏和最好情况出现是很有规律的：长度为n的数组，扩容后变成2n，意味着一次O(n)，接着是n次O(1)，均摊时间复杂度还是O(1)","like_count":2},{"had_liked":false,"id":317767,"user_name":"XXR","can_delete":false,"product_type":"c1","uid":1351441,"ip_address":"","ucode":"E201F5BD24E49E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mJYicLxIRVRk7eovjV92DVJruW76FSQRNicA9Z0m0pWM4g540jbZnjMc4vCPHAqTg4IehOxvqRyp0ia7Tl3ibSauSQ/132","comment_is_top":false,"comment_ctime":1634955015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5929922311","product_id":100017301,"comment_content":"练习题最好是O(1)，最坏是O(n)，平均与均摊都是O(1)。<br><br>计算最好时，判断语句内的都可以看做是常量。计算最坏时，判断语句内的 for 都得跑完。计算平均时，需要观察判断条件，触发概率高则向最坏情况靠拢，触发概率低则向最好情况靠拢","like_count":1},{"had_liked":false,"id":315116,"user_name":"付伟","can_delete":false,"product_type":"c1","uid":1397649,"ip_address":"","ucode":"97DC8054E30D97","user_header":"https://static001.geekbang.org/account/avatar/00/15/53/91/5a160371.jpg","comment_is_top":false,"comment_ctime":1633693107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5928660403","product_id":100017301,"comment_content":"O 1出现的概率远大于On出现的概率，平均就是1，这条总结很赞","like_count":1},{"had_liked":false,"id":309793,"user_name":"Geek_ee3685","can_delete":false,"product_type":"c1","uid":2750366,"ip_address":"","ucode":"2E0D5A064F5619","user_header":"","comment_is_top":false,"comment_ctime":1630334974,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5925302270","product_id":100017301,"comment_content":"老师 两个例子里 为什么上一个第n+1个事件概率是2分之1   而后一个 第n+1事件的概率确是<br>n+1分之1","like_count":1,"discussions":[{"author":{"id":2687339,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/NGib8v9Lml2JBfP5hIKib85d3jQpWibbXwfjaGnKmmGOzX45a3AQN67E5QnuKwaKc4MPfOe5qqLmW4tJxqZ8RCiawg/132","nickname":"Geek_ting_2021","note":"","ucode":"A6D5C57FA6806F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541799,"discussion_content":"盆友，你搞明白了嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640571614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301329,"user_name":"晨曦","can_delete":false,"product_type":"c1","uid":2003953,"ip_address":"","ucode":"99802B94C40092","user_header":"https://static001.geekbang.org/account/avatar/00/1e/93/f1/2a867832.jpg","comment_is_top":false,"comment_ctime":1625636932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5920604228","product_id":100017301,"comment_content":"思考题：<br>最好时间复杂度是 O(1) 就是数组空间够不需要扩充之后循环写入<br>最坏时间复杂度是 O(n) 就是当空间正好满了，需要虚幻n次倒入新列表<br>平均是O(1) 因为很规律的每n次O(1) 会产生一次 O(n) 利用均摊的思想。 将一次O(n)均摊到n次O(1)上之后，均摊时间复杂度是O(1)","like_count":1},{"had_liked":false,"id":296184,"user_name":"艺昊","can_delete":false,"product_type":"c1","uid":2619410,"ip_address":"","ucode":"924D789FD754FC","user_header":"https://static001.geekbang.org/account/avatar/00/27/f8/12/6320ea66.jpg","comment_is_top":false,"comment_ctime":1622797011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5917764307","product_id":100017301,"comment_content":"想到HashMap的扩容方法resize","like_count":1},{"had_liked":false,"id":281460,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614756774,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"5909724070","product_id":100017301,"comment_content":"茶艺师学编程<br><br>二刷<br><br>我在《数据结构与算法分析 C语言描述》一书中看到对摊还分析的介绍，觉得很有趣，在这跟大家说说。<br><br>书中构建一个虚拟的位势函数来分析在一段操作中负荷分配。位势可以看成抵抗灾难的潜力，而所谓灾难就是高耗时的操作。<br><br>举个例子，突然来了一个O（n）的操作，但前面有n-1次O(1)操作的铺垫，这个操作序列下来还是能O（1）。打个比方，就是在4人接力赛中，最后一棒的选手的速度也许没有别人的快，但他前面的3棒每个人都是以第一名的完成交棒，那么这个最后一棒也有可能以第一名冲过终点（也许在现实中没人会怎么安排……）<br><br>回过来再看老师的讲解，还是老师说得通俗易懂。","like_count":1},{"had_liked":false,"id":274317,"user_name":"LZ","can_delete":false,"product_type":"c1","uid":2350093,"ip_address":"","ucode":"E13321F115A367","user_header":"https://static001.geekbang.org/account/avatar/00/23/dc/0d/97173185.jpg","comment_is_top":false,"comment_ctime":1610963554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905930850","product_id":100017301,"comment_content":"最好是O(1),最坏是O(n),平均平摊是O(1).","like_count":1},{"had_liked":false,"id":224776,"user_name":"斯巴达克斯♛","can_delete":false,"product_type":"c1","uid":1332583,"ip_address":"","ucode":"99E18A2973EEC0","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/67/2b23d9c7.jpg","comment_is_top":false,"comment_ctime":1591537103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886504399","product_id":100017301,"comment_content":"最好情况时间复杂度:最理想的情况下的时间复杂度。<br>最坏情况时间复杂度:最糟糕的情况下的时间复杂度。<br>平均情况时间复杂度:平均情况下的时间复杂度,也可以加权时间复杂度或者期望时间复杂度。<br>均摊时间复杂度:一种特殊情况下的平均时间复杂度。对一组数据进行一组连续操作中，大部分下情况下时间复杂度都很低，只有个别情况下时间复杂度很高，<br>而且这些操作之间存在着前后连贯的时序关系，这个时候就可以将这一组操作放在一起进行分析，将个别时间复杂度高的操作的耗时分摊到那些时间复杂度比较低<br>的操作上。在能够用均摊时间复杂度进行分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。","like_count":1},{"had_liked":false,"id":186820,"user_name":"ZMH.","can_delete":false,"product_type":"c1","uid":1753115,"ip_address":"","ucode":"D45D6CEDFDF8F5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c0/1b/319baf9d.jpg","comment_is_top":false,"comment_ctime":1583934073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878901369","product_id":100017301,"comment_content":"课后思考:<br>多数情况下时间复杂度为O(1),每10次会有1次时间复杂度为O(n),均摊复杂度为O(1)<br><br>概念小结<br>最好情况时间复杂度<br>    在最理想的情况下,执行代码的时间复杂度<br>最坏情况时间复杂度<br>    在最糟糕的情况下,执行代码的时间复杂度<br>平均时间复杂度<br>    把代码可能发生的情况全部考虑进去,计算一个加权平均值,也叫期望值<br>    平均时间复杂度全称为加权平均时间复杂度或期望时间复杂度<br>均摊时间复杂度<br>    在数据结构中,大部分情况时间复杂度很低,只有少数情况时间复杂度高,这种情况下,看是否能将较高的时间复杂度平摊到时间复杂度较低的操作上<br>","like_count":1},{"had_liked":false,"id":153997,"user_name":"王锦","can_delete":false,"product_type":"c1","uid":1036016,"ip_address":"","ucode":"9E6B8DFBF44A22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/f0/10319e0a.jpg","comment_is_top":false,"comment_ctime":1574345243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869312539","product_id":100017301,"comment_content":"现在的服务器性能已经非常好了，真到了计算量达到一定量级需要考虑时间复杂度的时候，其实更应该考虑的是最坏复杂度下程序的性能问题。","like_count":1},{"had_liked":false,"id":150661,"user_name":"发霉的宅大人","can_delete":false,"product_type":"c1","uid":1738243,"ip_address":"","ucode":"6757E30FE5E48D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/03/95004954.jpg","comment_is_top":false,"comment_ctime":1573576549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868543845","product_id":100017301,"comment_content":"我觉得用平均法也能算那个均摊时间复杂度。<br>用文中例子，<br>n个1&#47;(n+1)加上n&#47;(n+1)<br>=2n&#47;(n+1)<br>=(2n+2-2)&#47;(n+1)<br>=2-2&#47;(n+1)<br>因为n为0无意义，后半部分最大值(n为1)可以取到1<br>2-1=1<br>时间复杂度为O(1)<br>虽然麻烦了一点，不过有助于理解<br>_(:з」∠)_","like_count":1},{"had_liked":false,"id":140191,"user_name":"李贵興","can_delete":false,"product_type":"c1","uid":1540775,"ip_address":"","ucode":"8C8843AE980818","user_header":"https://static001.geekbang.org/account/avatar/00/17/82/a7/d608fced.jpg","comment_is_top":false,"comment_ctime":1570846254,"is_pvip":false,"replies":[{"id":"54240","content":"11月4号上线设计模式 准备好money吧😂","user_name":"作者回复","comment_id":140191,"uid":"1190123","ip_address":"","utype":1,"ctime":1570916554,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5865813550","product_id":100017301,"comment_content":"老师讲得是真的通俗易懂，对很多东西好像真的是豁然开朗了，特别是留言区的回复，也很仔细认真，这是我见过的为数不多的。想问一下，老师有没有出版其他的技术专栏或书籍什么的，想再多看一些","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470290,"discussion_content":"11月4号上线设计模式 准备好money吧😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570916554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135009,"user_name":"楚城","can_delete":false,"product_type":"c1","uid":1666908,"ip_address":"","ucode":"FEC4FD5D2C6952","user_header":"https://static001.geekbang.org/account/avatar/00/19/6f/5c/26131ffa.jpg","comment_is_top":false,"comment_ctime":1568975069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5863942365","product_id":100017301,"comment_content":"希望老师能出版成书，这样纸质看起来的将更好","like_count":1},{"had_liked":false,"id":133395,"user_name":"SweetyTang","can_delete":false,"product_type":"c1","uid":1601101,"ip_address":"","ucode":"5EB1431FA66F1D","user_header":"https://static001.geekbang.org/account/avatar/00/18/6e/4d/22de9c0e.jpg","comment_is_top":false,"comment_ctime":1568548376,"is_pvip":false,"replies":[{"id":"51224","content":"答案对的，分析思路有点类似分析平均的思路，你可以再看下文章里的讲均摊的分析思路。","user_name":"作者回复","comment_id":133395,"uid":"1190123","ip_address":"","utype":1,"ctime":1568588742,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"5863515672","product_id":100017301,"comment_content":"一共n+1种情况，n种最好复杂度是O(1),1个最差复杂度应该是O(n+1)(大O省略常数项，为O(n)),均摊为O(1)，老师，是这样吗","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467378,"discussion_content":"答案对的，分析思路有点类似分析平均的思路，你可以再看下文章里的讲均摊的分析思路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568588742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1601101,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6e/4d/22de9c0e.jpg","nickname":"SweetyTang","note":"","ucode":"5EB1431FA66F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12758,"discussion_content":"老师，均摊的概念理解了，就是满足均摊分析的条件下，把复杂度高的均摊(均分)给复杂度低的。学完感觉平均复杂度试用范围广，因为均摊复杂度是平均复杂度的一种。可是您后面又说有些专家说两者不同，有些蒙了，哪里不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568589881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1601101,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6e/4d/22de9c0e.jpg","nickname":"SweetyTang","note":"","ucode":"5EB1431FA66F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12570,"discussion_content":"老师是不是看不到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568548561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132168,"user_name":"huangzehao","can_delete":false,"product_type":"c1","uid":1386934,"ip_address":"","ucode":"8A6530D82B48E3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/jqDSNBHmPbPGayjtXrm9iciccSKbfg6g8oMgXc147jib4HjoUK1RINorZYfBuiaQBibqJIrQRVG77PKGS0dW5PVAAicw/132","comment_is_top":false,"comment_ctime":1568035252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5863002548","product_id":100017301,"comment_content":"时间复杂度：最好情况 O（1），最坏情况：O（n），均摊情况：O（1）<br>空间复杂度：最好情况O（n）,最坏情况是O（3n）<br>","like_count":1},{"had_liked":false,"id":123635,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1065986,"ip_address":"","ucode":"3D3D10273BED18","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/02/5c8e4b81.jpg","comment_is_top":false,"comment_ctime":1565737718,"is_pvip":true,"replies":[{"id":"45685","content":"你算的是对的","user_name":"作者回复","comment_id":123635,"uid":"1190123","ip_address":"","utype":1,"ctime":1565907685,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"5860705014","product_id":100017301,"comment_content":"咨询下<br>for(i = 0; i &lt; n; i++)<br>{  add(n) };<br>这个平均复杂度怎么算？能否使用  n*add  的平均复杂度 n* 2n&#47;(n+1) 来表示","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462754,"discussion_content":"你算的是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565907685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2312214,"avatar":"https://static001.geekbang.org/account/avatar/00/23/48/16/df9b9f53.jpg","nickname":"纳兰小狐獴","note":"","ucode":"882182192B89FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324665,"discussion_content":"因为n 和 n+1是同阶 可以约掉 剩下2n 常数约掉 所以是O(n)\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605149838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103958,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1560573633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855540929","product_id":100017301,"comment_content":"算法-004<br>1. 作业<br>- 最好: O(1)<br>- 最坏: O(n)<br>- 平均: O(1)<br>思考过程：<br>两部分(执行1次与执行多次)<br>\t- 每一个周期执行一次的部分有n次、n次、2n次、4n次(以数组len为n)<br>\t- 每一个周期执行多次的部分有n+1次、2n+1次，4n+1次<br><br>计算过程：<br>\tn*(1&#47;n+1)+(n+1)*(1&#47;n+1) + (2n-n)*(1&#47;2n-n)+(2n+1)*(1&#47;2n-n) + 2(2n-n)*(1&#47;(2*(2n-n))) + 4n+1*(1&#47;(2*(2n-n))) + ...<br>= \t2 + (1+2) + (1+2) + (1+3) + ...(与n的规模无关的常数)<br>= O(1)<br>- 均摊：O(1)<br><br>2. 知识总结<br>时间复杂度的分类：<br>- 最好<br>- 最坏<br>- 平均：要考概率加权，期望复杂度<br>- 均摊：某种情况下(多次O(1)，单词O(n)，有明显的周期)的平均<br>3. 感悟：<br>划分时间复杂度的详细分类，不是吃饱了撑的，而是用于各种场景。在我的工程实际运行的场景中，数据常常不是完全随机的，而是相对特殊的一些：比如周期性的重复，比如某些范围内的数据占极高比例，等等。。。<br>于是，我们就根据这些场景的数据规律，针对性的做分析和优化，这样就能在该场景下提高性能，或者让行为更易于理解。","like_count":1},{"had_liked":false,"id":84580,"user_name":"Justin","can_delete":false,"product_type":"c1","uid":1463097,"ip_address":"","ucode":"AC83CDD1824050","user_header":"https://static001.geekbang.org/account/avatar/00/16/53/39/4f4a8239.jpg","comment_is_top":false,"comment_ctime":1554879350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5849846646","product_id":100017301,"comment_content":"假设目前数组长度为扩容后的2n;  添加数据会出现n+1种情况(n种直接添加,一种扩容后添加,且概率相同);直接添加复杂度O(1),扩容后添加复杂度O(n),平摊后复杂度O(n)&#47;(n+1),  也就是O(1);","like_count":1},{"had_liked":false,"id":84494,"user_name":"AlexS","can_delete":false,"product_type":"c1","uid":1472051,"ip_address":"","ucode":"3DA81A613CE645","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","comment_is_top":false,"comment_ctime":1554871416,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5849838712","product_id":100017301,"comment_content":"n(n+3)&#47;2(n+1)的由来： 1 + .. + n有高中数学等差数列基本公式得到n(n+1)&#47;2。 那么1 + .. + n + n则有n(n+3)&#47;2。再除以(n+1)则有n(n+3)&#47;2(n+1）。<br>高中数学等差数列基本公式：<br>设a = 1 + .. + n-1 + n<br>a =  n + n-1 + .. + 1<br>2a = (n+1) + (2+n-1) + .. + (n+1)<br>a = n(n+1)&#47;2","like_count":1,"discussions":[{"author":{"id":1233857,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d3/c1/79be7348.jpg","nickname":"samuel37","note":"","ucode":"B074177DEAB3D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267442,"discussion_content":"太跳跃了，因为各位置遍历次数之和等于数列A：1+2+3...n+n，//总项数=n+1\n也等于数列B：2+3+4+...+n+(n+1)，//总项数=n\n数列A的求和公式=n(n+1)/2 +n，\n数列B的求和公式=n((n+1)+2)/2，其中n+1作为末项,2作为首项，故数列B的Sn=n(n+3)/2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589640659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69423,"user_name":"顧念。","can_delete":false,"product_type":"c1","uid":1362954,"ip_address":"","ucode":"96506FE8F345B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/cc/0a/10e703ec.jpg","comment_is_top":false,"comment_ctime":1550739622,"is_pvip":false,"replies":[{"id":"24662","content":"你要想转后台，先别管框架原理。你先把后台java的开发框架用熟练（主要就是spring那套），找个项目练练手，然后把简历搞搞好，去找个后台开发岗（哪怕是小公司的）。只要你踏进后台开发的门，后面就好办了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550740361,"ip_address":"","comment_id":69423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845706918","product_id":100017301,"comment_content":"老师你好，我是一个做了2年Android的现在想转后台，对算法数据结构感兴趣听了你的课有写感触，最近遇到了一些困惑，转后台对于java的东西懂但是对于框架之类的和数据库不是很懂，拿到了框架后理不清楚里面东西是干嘛的，我改怎么去调节，老师有什么好的建议<br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440115,"discussion_content":"你要想转后台，先别管框架原理。你先把后台java的开发框架用熟练（主要就是spring那套），找个项目练练手，然后把简历搞搞好，去找个后台开发岗（哪怕是小公司的）。只要你踏进后台开发的门，后面就好办了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550740361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44387,"user_name":"ccisms","can_delete":false,"product_type":"c1","uid":1325894,"ip_address":"","ucode":"DD281DF3A920B8","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/46/6f8a5ebe.jpg","comment_is_top":false,"comment_ctime":1543418049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838385345","product_id":100017301,"comment_content":"在对array重新赋值之前（array = new_array;）应该先使用delete释放之前的空间吧，否则是不是会造成内存泄漏？","like_count":1},{"had_liked":false,"id":40930,"user_name":"杨蔓","can_delete":false,"product_type":"c1","uid":1198539,"ip_address":"","ucode":"9132EF5507811E","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/cb/7a116fc6.jpg","comment_is_top":false,"comment_ctime":1542697686,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5837664982","product_id":100017301,"comment_content":"一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。<br><br>老师，这句话不理解呢？怎么推导出来的？从哪里推导出来的？望老师解惑哦。","like_count":1,"discussions":[{"author":{"id":1250199,"avatar":"https://static001.geekbang.org/account/avatar/00/13/13/97/641c2e7c.jpg","nickname":"贤哥","note":"","ucode":"4097CCC49E45AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604,"discussion_content":"我跟你一样，开始一直搞不懂，多翻翻评论，就会有不同的角度去理解它了，insert方法总是在被调用,不单是调用一次，就最后一个课后习题来说，1+1+...+1+n ,前面n个1，后面的n可以理解为n+1次，表示说:第（n+1）次的O(n)的插入操作之后，伴随着的是有n个O（1）的插入操作，这两句话可以颠倒，即n个O（1）的插入操作之后，有第（n+1）次的O（n）的操作插入，呼应1+1+...+1+n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561784862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35328,"user_name":"逆光","can_delete":false,"product_type":"c1","uid":1150678,"ip_address":"","ucode":"36A6CC16DC006D","user_header":"https://static001.geekbang.org/account/avatar/00/11/8e/d6/134412af.jpg","comment_is_top":false,"comment_ctime":1540518106,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5835485402","product_id":100017301,"comment_content":"因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)&#47;n=O(n)。<br><br>这个公式去掉常量不是O（1）吗？","like_count":1,"discussions":[{"author":{"id":1419860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/aa/54/a0d379f4.jpg","nickname":"Asia","note":"","ucode":"3198DE712494E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76,"discussion_content":"(n(n -1) / 2 + n) / n = O (n)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561084417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34079,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1539992527,"is_pvip":false,"replies":[{"id":"12197","content":"是的 你想的非常对 还有考虑到这个场景下 每个数字出现的概率分布 非常复杂","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540048059,"ip_address":"","comment_id":34079,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5834959823","product_id":100017301,"comment_content":"平均时间复杂度计算那里，如果要严谨的话，是不是不能简单假设数字在数组和不在数组中的概率都是1&#47;2呢？应该假设integer的整个范围和这个数组的长度，计算比例，才知道数字在数组中的概率。请问我这样想对吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427111,"discussion_content":"是的 你想的非常对 还有考虑到这个场景下 每个数字出现的概率分布 非常复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540048059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28998,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1538219663,"is_pvip":false,"replies":[{"id":"10449","content":"你可以去搜下等差数列求和","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538225057,"ip_address":"","comment_id":28998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833186959","product_id":100017301,"comment_content":"为什么会变成n(n+3)／2(n+1)   这个过程是怎么推导出来的","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425460,"discussion_content":"你可以去搜下等差数列求和","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538225057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28907,"user_name":"Uncle Drew","can_delete":false,"product_type":"c1","uid":1235127,"ip_address":"","ucode":"AB9E163A9386A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/b7/68c29e4c.jpg","comment_is_top":false,"comment_ctime":1538192024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833159320","product_id":100017301,"comment_content":"对于样本数为m，特征数为n的决策树，它的时间复杂度是多少?是O（n*m*log（m））么?<br>求各位大神解答 ","like_count":1},{"had_liked":false,"id":28779,"user_name":"爱玩扑克的猫","can_delete":false,"product_type":"c1","uid":1231730,"ip_address":"","ucode":"03B758B86F3B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/72/f6c4ec0b.jpg","comment_is_top":false,"comment_ctime":1538144199,"is_pvip":false,"replies":[{"id":"10395","content":"是的呢 理解的没错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538187090,"ip_address":"","comment_id":28779,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833111495","product_id":100017301,"comment_content":"老师我有点疑惑，前一个计算平均复杂度的讲法<br>(3n+1)&#47;4。用大 O 表示法来表示，去掉系数和常量，这里复杂度是O(n),<br>那么(1+1+...+1+n)&#47;(n+1) = 2n&#47;(n+1)  这如果用大 O 表示法来表示，去掉系数和常量，那复杂度应该是O(n&#47;n)=O(1),是这样计算出来的么？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425368,"discussion_content":"是的呢 理解的没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538187090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28603,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1538109229,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5833076525","product_id":100017301,"comment_content":"最好 O(1); 最差O(n);平均(1);","like_count":1},{"had_liked":false,"id":28583,"user_name":"caidy","can_delete":false,"product_type":"c1","uid":1188783,"ip_address":"","ucode":"AEFB529C32C7EE","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/af/84f4714e.jpg","comment_is_top":false,"comment_ctime":1538104131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833071427","product_id":100017301,"comment_content":"从均摊时间复杂度来算是O(1)<br>最好时间复杂度是O(1)，只有9个数<br>最差时间复杂度是O(n)，有n个数<br>但是如果列公式证明的话，我有点不知道要怎么写<br>例如：<br>每9次增加元素，有一次扩容，那这个按照平均时间复杂度要怎么计算呢？<br>m次扩容，数据个数n=10*m这样计算吗？可以认为每次扩容的概率都是1&#47;m吗？<br>1&#47;m*[1&#47;10*1+1&#47;10*1+***+1&#47;10*1+1&#47;10*O(n)]=1&#47;m*9&#47;10*O(1)+1&#47;m*1&#47;10*O(10*m)=1&#47;m*9&#47;10*O(1)+O(m)<br>可以认为每10个数的时间复杂度是怎么计算的吗？所以总的计算是<br>m*1&#47;m*9&#47;10*O(1)+O(1)+O(2)+***+O(m)=O(1)+O(m)?<br>这样计算是否正确？","like_count":1},{"had_liked":false,"id":28558,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1538102615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833069911","product_id":100017301,"comment_content":"很赞同摊还时间复杂度就是一种特殊的平均时间复杂度。<br>思考题：<br>将初始数组大小设为n<br>1，最好就是数组未满 O(1)<br>2，最坏数组满了进行扩容 O(n)<br>3，平均(1+1+…+n)&#47;(n+1)=2n&#47;(n+1) 也是O(1)<br>4，摊还，这个函数很有规律都是连续n次O(1)，再一次O(n)，我们将最复杂的摊分到O(1)，最终的结果就是O(1)<br>","like_count":1},{"had_liked":false,"id":28553,"user_name":"王弘毅","can_delete":false,"product_type":"c1","uid":1243952,"ip_address":"","ucode":"C802339E04315C","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/30/f3633047.jpg","comment_is_top":false,"comment_ctime":1538102208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833069504","product_id":100017301,"comment_content":"<br>最好时间复杂度<br>1<br>最坏时间复杂度<br>n<br>平均时间复杂度<br>（n+1）&#47;2<br>均摊时间复杂度<br>（n+1）&#47;2","like_count":1},{"had_liked":false,"id":28448,"user_name":"大大。","can_delete":false,"product_type":"c1","uid":1237399,"ip_address":"","ucode":"A6716E46264AC4","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/97/fec494f2.jpg","comment_is_top":false,"comment_ctime":1538094375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833061671","product_id":100017301,"comment_content":"我怎么算出来是nlogn。","like_count":1},{"had_liked":false,"id":28434,"user_name":"Kong","can_delete":false,"product_type":"c1","uid":1211315,"ip_address":"","ucode":"D1BB2649F1CF84","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/b3/37b2b73d.jpg","comment_is_top":false,"comment_ctime":1538093533,"is_pvip":false,"replies":[{"id":"10370","content":"自己百度一下吧。学习还是自己研究一下体会更深一点","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538143733,"ip_address":"","comment_id":28434,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833060829","product_id":100017301,"comment_content":"老师，请问什么是加权，为什么要加权","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425265,"discussion_content":"自己百度一下吧。学习还是自己研究一下体会更深一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28431,"user_name":"HI","can_delete":false,"product_type":"c1","uid":1238921,"ip_address":"","ucode":"C65218113883E6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/89/207cc841.jpg","comment_is_top":false,"comment_ctime":1538093205,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5833060501","product_id":100017301,"comment_content":"最好情况时间复杂度:是指最理想的情况下出现的次数，所以针对上一题最理想复杂度应该为O(1)<br><br>最坏情况时间复杂度：是指最不理想的情况下出现的次数，所以针对上一题最坏复杂度应该为O(n)<br><br>平均情况复杂度：也称加权平均值，期望值可以通过概率统计算出，针对上一题为O(1)<br><br>均摊复杂度:绝大多数情况下时间复杂度较低，少数情况下时间复杂度较高，而且存在一定的顺序，这种情况下可以较高的复杂度平滩到较低中。针对上一题复杂度为O(1)","like_count":1},{"had_liked":false,"id":28413,"user_name":"不许联想","can_delete":false,"product_type":"c1","uid":1017236,"ip_address":"","ucode":"9EEA5669D091F8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/94/96f28fa0.jpg","comment_is_top":false,"comment_ctime":1538091854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833059150","product_id":100017301,"comment_content":"变换频率是非常有规律的，而且有一定的前后时序关系，应该是均摊时间复杂度","like_count":1},{"had_liked":false,"id":28396,"user_name":"学渣！！！","can_delete":false,"product_type":"c1","uid":1224654,"ip_address":"","ucode":"A224265D9E7CCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/ce/d7ae8da9.jpg","comment_is_top":false,"comment_ctime":1538071347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833038643","product_id":100017301,"comment_content":"课后思考题应该和insert方法一样，最好是O(1)，最坏是O(n)，经过n-1次最好，然后经历一次最坏，所以采用均摊法，复杂度也为O(1)对不对呢？","like_count":1},{"had_liked":false,"id":28390,"user_name":"上进中年","can_delete":false,"product_type":"c1","uid":1086479,"ip_address":"","ucode":"9DE8B4424DF254","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/0f/db0e0344.jpg","comment_is_top":false,"comment_ctime":1538067827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833035123","product_id":100017301,"comment_content":"虽然分段了，但实质还是n个O(1)后伴随一个O(n),所以我觉得最终还是O(1)。","like_count":1},{"had_liked":false,"id":360087,"user_name":"🐙","can_delete":false,"product_type":"c1","uid":2469428,"ip_address":"陕西","ucode":"4659D4B675E9C1","user_header":"https://static001.geekbang.org/account/avatar/00/25/ae/34/a7a5671a.jpg","comment_is_top":false,"comment_ctime":1666169362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666169362","product_id":100017301,"comment_content":"好情况时间复杂度O(1) 、最坏情况时间复杂度O(n)、平均情况时间复杂度O(n)、均摊时间复杂度O(1)。","like_count":0},{"had_liked":false,"id":360044,"user_name":"码狐","can_delete":false,"product_type":"c1","uid":1234879,"ip_address":"英国","ucode":"A4666D3AF30D6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/bf/9d8984b7.jpg","comment_is_top":false,"comment_ctime":1666149872,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1666149872","product_id":100017301,"comment_content":"时间复杂度就是用来评估代码效率，不必执着于具体的计算。","like_count":0},{"had_liked":false,"id":360015,"user_name":"月光蚁族","can_delete":false,"product_type":"c1","uid":1942092,"ip_address":"北京","ucode":"4789C1BCD518B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KX33qBGQUpz8LLVIP0WmzfOw3qnDjUUqicZa5K56xAAlmGsQMzc1lCxMxPT7U8ADEax6XVTvWunnpruSO902FCw/132","comment_is_top":false,"comment_ctime":1666138179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666138179","product_id":100017301,"comment_content":"老师，弱问一下: &quot;要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组的 0～n-1 位置中和不在数组中&quot;  这个是不是考虑复杂了？我的理解是：&quot;变量 x 在数组的最后&quot; 和 &quot;变量 x 不在数组中&quot;，这两种情况其循环查找的次数应该是一样的呢？","like_count":0},{"had_liked":false,"id":358997,"user_name":"Key","can_delete":false,"product_type":"c1","uid":2405715,"ip_address":"中国香港","ucode":"2EC0DC838FA56D","user_header":"https://static001.geekbang.org/account/avatar/00/24/b5/53/61a6b84c.jpg","comment_is_top":false,"comment_ctime":1665134328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665134328","product_id":100017301,"comment_content":"平均情况时间复杂度:<br>10次O(1)，一次O(10)         0&lt; i &lt;= 10  平均复杂度O(1)<br>10次O(1)，一次O(20)        10&lt; i &lt;= 20  平均复杂度O(1)<br>20次O(1)，一次O(40)       20&lt; i &lt;= 40  平均复杂度O(1)<br>40次O(1)，一次O(80)       40&lt; i &lt;= 80  平均复杂度O(1)<br>以此类推<br>n次O(1)，一次O(2n)          n&lt; i &lt;= 2n  平均复杂度O(1)<br>综上所述，无论是加权平均还是均摊分析i在各种范围内的平均复杂度都为O(1)","like_count":0},{"had_liked":false,"id":358723,"user_name":"杨轩","can_delete":false,"product_type":"c1","uid":2534549,"ip_address":"广东","ucode":"666F916AF95A21","user_header":"https://static001.geekbang.org/account/avatar/00/26/ac/95/ead091fc.jpg","comment_is_top":false,"comment_ctime":1664622981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664622981","product_id":100017301,"comment_content":"add和insert一样","like_count":0},{"had_liked":false,"id":358395,"user_name":"Geek_93cecd","can_delete":false,"product_type":"c1","uid":3176219,"ip_address":"浙江","ucode":"1AEA57E57AC174","user_header":"","comment_is_top":false,"comment_ctime":1664268235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664268235","product_id":100017301,"comment_content":"几种复杂度分析：<br><br>- 最好情况时间复杂度<br>- 最坏情况时间复杂度<br>- 平均情况时间复杂度<br>- 均摊时间复杂度<br><br>最好情况时间复杂度：最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度；<br><br>最坏情况时间复杂度：最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度；<br><br>平均情况时间复杂度：对于时间复杂度进行加权平均；<br><br>★均摊时间复杂度：复杂度发生概率是有规律的，而且有一定时序关系，只有个别情况复杂度较高。这种情况下，不必求平均复杂度，直接用均摊，把高复杂度的操作的耗时均摊到其他时间复杂度较低的操作上。<br><br>ps：在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。<br><br>重点掌握摊还分析<br><br>课后思考：最好O（1），最坏O（n）,平均O（1），均摊O（1）<br><br>","like_count":0},{"had_liked":false,"id":358318,"user_name":"tingting","can_delete":false,"product_type":"c1","uid":2035702,"ip_address":"新加坡","ucode":"61E6B0C4EC59C5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0f/f6/609ded9f.jpg","comment_is_top":false,"comment_ctime":1664192785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664192785","product_id":100017301,"comment_content":"数组的初始长度为n， <br>最好情况时间复杂度： O(1) <br>最坏情况时间复杂度： O(n) <br>平均情况时间复杂度： O(1)<br>均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":358160,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1663983684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663983684","product_id":100017301,"comment_content":"除了最差，其他都是O(1)","like_count":0},{"had_liked":false,"id":357721,"user_name":"Geek_aaa571","can_delete":false,"product_type":"c1","uid":2301443,"ip_address":"湖北","ucode":"D79650D8583346","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/56JgLrD2qWSPWus9D2FG2vkSN1sUH8qic4J8ib4WWViaffOWSlxwWHKyStVjSXKAazeWUIYUR8jtxvFmicrGGPb1UA/132","comment_is_top":false,"comment_ctime":1663579663,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1663579663","product_id":100017301,"comment_content":"1*1&#47;(n+1)+2*1&#47;(n+1).....+n*1&#47;(n+1)=n&#47;2=o(n)才对啊不是o（1）","like_count":0},{"had_liked":false,"id":357521,"user_name":"Cooler","can_delete":false,"product_type":"c1","uid":1639184,"ip_address":"上海","ucode":"3D5192BE887A33","user_header":"https://static001.geekbang.org/account/avatar/00/19/03/10/82c56b87.jpg","comment_is_top":false,"comment_ctime":1663328945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663328945","product_id":100017301,"comment_content":"老师，咨询个问题，如果场景满足均摊复杂度的规律，但是最坏复杂度为O(n^2)，最好复杂度为O(1)那么均摊复杂度为多少","like_count":0},{"had_liked":false,"id":356832,"user_name":"liliumss","can_delete":false,"product_type":"c1","uid":1333094,"ip_address":"湖北","ucode":"A52AC5042F3115","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","comment_is_top":false,"comment_ctime":1662625605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662625605","product_id":100017301,"comment_content":"数学知识很重要啊","like_count":0},{"had_liked":false,"id":356710,"user_name":"Geek_16e01a","can_delete":false,"product_type":"c1","uid":1843371,"ip_address":"浙江","ucode":"791D5AA6BAA018","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK5dh80UCnDwic7jHWRGVMbqFBjFbBAKO4bqzB5Sr39iaib5JPmF3d06dV1ibXHflNdQKgcKBsEkfXc6g/132","comment_is_top":false,"comment_ctime":1662521680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662521680","product_id":100017301,"comment_content":"老师好，课后思考中，最好时间复杂度O(1),最坏时间 复杂度是O(n),均摊时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":356708,"user_name":"Geek_16e01a","can_delete":false,"product_type":"c1","uid":1843371,"ip_address":"浙江","ucode":"791D5AA6BAA018","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK5dh80UCnDwic7jHWRGVMbqFBjFbBAKO4bqzB5Sr39iaib5JPmF3d06dV1ibXHflNdQKgcKBsEkfXc6g/132","comment_is_top":false,"comment_ctime":1662520918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662520918","product_id":100017301,"comment_content":"老师好，看到文章里说find()函数的最坏情况时间复杂度是O(1)是不是笔误，应该是O(n）才对吧，不知道我的理解对不对，请老师指正","like_count":0},{"had_liked":false,"id":356526,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1476245,"ip_address":"日本","ucode":"2668A965FA79F2","user_header":"https://static001.geekbang.org/account/avatar/00/16/86/95/b9d960d9.jpg","comment_is_top":false,"comment_ctime":1662381062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662381062","product_id":100017301,"comment_content":"当该方法添加第n个数时到达当前数组的最大长度，循环中的代码需要执行n次，其他代码执行一次。最大时间复杂度为O(n),最好时间复杂度为O(1)，均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":356317,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"重庆","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662132459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662132459","product_id":100017301,"comment_content":"思考题： 时间复杂度（2 * n）, 最好情况O(1), 最复杂情况O(2 * n). 均摊复杂度情况O（1）,平均复杂地O（1)<br><br>这节将讲了什么：<br>    讲了几种不同类型的复杂度，最好复杂度，最坏复杂度，平均复杂度，以及均摊复杂度。可以从不同层面考量复杂度。","like_count":0},{"had_liked":false,"id":356147,"user_name":"woodie","can_delete":false,"product_type":"c1","uid":2004783,"ip_address":"北京","ucode":"1C2925AD8191DA","user_header":"","comment_is_top":false,"comment_ctime":1662011306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662011306","product_id":100017301,"comment_content":"课后思考：最好时间复杂度：O(1) ,最坏时间复杂度：O(n)，平均时间复杂度：O(1)，均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":356079,"user_name":"我和狐狸","can_delete":false,"product_type":"c1","uid":3167968,"ip_address":"广东","ucode":"F27AD8B7B4FBE4","user_header":"https://static001.geekbang.org/account/avatar/00/30/56/e0/44f11a31.jpg","comment_is_top":false,"comment_ctime":1661951358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661951358","product_id":100017301,"comment_content":"均摊时间复杂度是对时间复杂度的加权，平均时间复杂度是遍历元素个数的加权","like_count":0},{"had_liked":false,"id":356078,"user_name":"我和狐狸","can_delete":false,"product_type":"c1","uid":3167968,"ip_address":"广东","ucode":"F27AD8B7B4FBE4","user_header":"https://static001.geekbang.org/account/avatar/00/30/56/e0/44f11a31.jpg","comment_is_top":false,"comment_ctime":1661951083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661951083","product_id":100017301,"comment_content":"设len = n， 则较高时间复杂度O(n) 操作了一次， 较低时间复杂度O(1) 操作了 n &#47; 2 次，则均摊时间复杂度为 O( n * ( 1 &#47; ( 1 + n &#47; 2 ) ) + 1 * ( ( n &#47; 2 ) &#47; ( 1 + n &#47; 2 ) ) )  = O(1)","like_count":0},{"had_liked":false,"id":355708,"user_name":"🐻","can_delete":false,"product_type":"c1","uid":1043072,"ip_address":"北京","ucode":"534EDAD496A0E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/80/8759e4c1.jpg","comment_is_top":false,"comment_ctime":1661678333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661678333","product_id":100017301,"comment_content":"首先定义 n 是调用 add 的次数<br><br>最好的情况 O(1)<br>最坏的情况 O(N)  调用到第10次，20次，40次需要扩大数组<br>平均情况O(N)<br><br>按均摊时间复杂度的方式来计算，<br><br>首先不考虑数组扩容的情况，每次都是 O(1)，n次就是 O(N)<br><br>然后再单独考虑扩容，扩容时执行的复制次数是一个等比数列，等比数列的项数是log_2 M&#47;10 +1，所以扩容时的时间复杂度就是 O(N)。<br><br>等比数列求和公式  S = (a1 - an * q) &#47; (1-q)<br><br>综合可得平均情况下的时间复杂度也是 O(N)","like_count":0},{"had_liked":false,"id":355601,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1661526838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661526838","product_id":100017301,"comment_content":"最好情况时间复杂度 O(1)<br>最坏情况时间复杂度   O(n)<br>平均情况时间复杂度 O(1) = 1* 1&#47;n+1 + 1* 1&#47;n+1 + 1* 1&#47;n+1.....N*1&#47;n+1<br>均摊时间复杂度  O(1)","like_count":0},{"had_liked":false,"id":355600,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1661526603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661526603","product_id":100017301,"comment_content":"同一个算法只可以进一步分析<br>1. 最好情况时间复杂度  最好的情况<br>2. 最坏情况时间复杂度   最坏的情况<br>3. 平均情况时间复杂度   期望值，概率<br>4. 均摊时间复杂度 最复杂平摊到不复杂的操作  List 扩容","like_count":0},{"had_liked":false,"id":354884,"user_name":"许荣","can_delete":false,"product_type":"c1","uid":2561174,"ip_address":"北京","ucode":"4813EB529449CC","user_header":"https://static001.geekbang.org/account/avatar/00/27/14/96/1d43ed98.jpg","comment_is_top":false,"comment_ctime":1660862624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660862624","product_id":100017301,"comment_content":"最好时间复杂度即为数组有足够的空间为其存储数值，容易得到其复杂度为O(1);<br>最坏时间复杂度就是数组分配的内存不够用，也就是进入满足if条件执行for语句循环，其复杂度为O(n);<br>平均时间复杂度分为数组够用时len种情况以及数组不够用时的一种情况，总共len+1种情况，其概率都是1&#47;len+1,根据老师对insert()函数的分析，可知其复杂度为O(1);<br>当数组满时，数组大小变为原来的2倍，前半部分存取原先已经存取的值，后半部分作为均摊继续存数值（理解不透彻）。","like_count":0},{"had_liked":false,"id":354628,"user_name":"我这一次","can_delete":false,"product_type":"c1","uid":3134475,"ip_address":"广东","ucode":"C6EE55B1C3A1AB","user_header":"https://static001.geekbang.org/account/avatar/00/2f/d4/0b/79b60170.jpg","comment_is_top":false,"comment_ctime":1660628344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660628344","product_id":100017301,"comment_content":"最好情况时间复杂度： 直接添加，O(1)； 最坏情况时间复杂度： 需要申请空间，O(n)； 对于是平均情况时间复杂度还是均摊时间复杂度，可以分析为，n个O(1)过后一个O(n)，接着又是n个O(1)过后O(2n)，由于是看增长性，是省略系数的，所以是O(n)，最终就是一个O(n)后面有n个O(1)，符合均摊时间复杂度的应用场景，这里采用均摊时间复杂度，其为O(1)","like_count":0},{"had_liked":false,"id":354444,"user_name":"樹","can_delete":false,"product_type":"c1","uid":3119609,"ip_address":"江苏","ucode":"41E789F4062EAF","user_header":"https://static001.geekbang.org/account/avatar/00/2f/99/f9/10c6d492.jpg","comment_is_top":false,"comment_ctime":1660393460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660393460","product_id":100017301,"comment_content":"最好情况：不执行循环，时间复杂度为O(1)<br>最坏情况：第一次执行10次，第二次执行10*2次，……第n遍执行了10*2^(n-1)次，因此时间复杂度为O(2^n)<br>平均情况：每创建一个新数组，会执行10*2^(n-1)次复制操作，每次概率均为1&#47;(10*2^(n-1))，再执行10次n(1)进行赋值，所以时间复杂度为O(1)<br>均摊和平均一样，也是O(1)","like_count":0},{"had_liked":false,"id":354174,"user_name":"苏慕白i","can_delete":false,"product_type":"c1","uid":3109438,"ip_address":"广东","ucode":"FBFA7B3A876E8C","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/3e/dcf20091.jpg","comment_is_top":false,"comment_ctime":1660143412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660143412","product_id":100017301,"comment_content":"我可以提个小小的建议吗 希望那些代码块可以出一个全屏按钮","like_count":0},{"had_liked":false,"id":354140,"user_name":"阿巴拉度哈","can_delete":false,"product_type":"c1","uid":2386292,"ip_address":"四川","ucode":"33D594AA76BB70","user_header":"https://static001.geekbang.org/account/avatar/00/24/69/74/6a085422.jpg","comment_is_top":false,"comment_ctime":1660121218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660121218","product_id":100017301,"comment_content":"练习题:<br>最好时间复杂度O(1)<br>最坏时间复杂度O(n)<br>平均时间复杂度O(1)<br>均摊时间复杂度O(1)","like_count":0},{"had_liked":false,"id":354053,"user_name":"唐方刚","can_delete":false,"product_type":"c1","uid":3046392,"ip_address":"广东","ucode":"93DA58C3DCCF1B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ugib9sF9icd9dhibQoAA025hibbD5zgZTiaddLoeEH457hrkBBhtQK6qknTWt270rHCtBZqeqsbibtHghgjdkPx3DyIw/132","comment_is_top":false,"comment_ctime":1660044376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660044376","product_id":100017301,"comment_content":"例子有点不好理解，几个概念很绕，数组满了，数组有空闲，清空数组，还有那个代码又没有循环，最后一行++count也很有误导性","like_count":0},{"had_liked":false,"id":352672,"user_name":"Geek_b14c55","can_delete":false,"product_type":"c1","uid":2027632,"ip_address":"","ucode":"C98EAEC045F13D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MOuCWWOnoQjOr8KjicQ84R7xu6DRcfDv3VAuHseGJ1gxXicKJboA24vOcrcJickTJPwFAU38VuwCGGkGq7f8WkTIg/132","comment_is_top":false,"comment_ctime":1658851087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658851087","product_id":100017301,"comment_content":"最坏时间复杂度 O(n) 最好时间复杂度O(n) 平均复杂度O(1)","like_count":0},{"had_liked":false,"id":351865,"user_name":"Loy","can_delete":false,"product_type":"c1","uid":1108225,"ip_address":"","ucode":"CD437EDA754EE0","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/01/6e6d80d1.jpg","comment_is_top":false,"comment_ctime":1658239955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658239955","product_id":100017301,"comment_content":"练习题：n一个O(1)接着一个O(n)（后面2^m * n都一样的，2^m * n个O(1)接着一个O(2^m * n)），把O(n)均摊到前面每个O(1)上去，就是2次，还是常熟，所以最终均摊复杂度就是O(1).","like_count":0},{"had_liked":false,"id":350958,"user_name":"Geek_fcb5fb","can_delete":false,"product_type":"c1","uid":3007105,"ip_address":"","ucode":"4CC934E22B31A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEImTIHZq9XNSXXs3fQtrXEJyqcSapFFV2AWy1yqSfxUW4RVxBkRAzGIgmgeEO83RHUD5PRwt5ZrWg/132","comment_is_top":false,"comment_ctime":1657415191,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1657415191","product_id":100017301,"comment_content":"最后一段代码的复杂度如下：<br>1、最好：O(1)","like_count":0},{"had_liked":false,"id":350805,"user_name":"WangK","can_delete":false,"product_type":"c1","uid":2724977,"ip_address":"","ucode":"245A2C18CC4A16","user_header":"https://static001.geekbang.org/account/avatar/00/29/94/71/b70b2f9d.jpg","comment_is_top":false,"comment_ctime":1657210599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657210599","product_id":100017301,"comment_content":"最好是O(1)，最坏是O(n)，均摊是O(1)","like_count":0},{"had_liked":false,"id":349430,"user_name":"余生还要走多久","can_delete":false,"product_type":"c1","uid":1625743,"ip_address":"","ucode":"F4F53F93FB3320","user_header":"https://static001.geekbang.org/account/avatar/00/18/ce/8f/eec9f6ca.jpg","comment_is_top":false,"comment_ctime":1655966307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655966307","product_id":100017301,"comment_content":"我没学过多少高等数学，除了涉及到数学那块，其他基本看懂了，知道如何进行分析复杂度，均摊、最好、最坏基本是怎么分析，也算收获不少","like_count":0},{"had_liked":false,"id":348596,"user_name":"东方拓睿","can_delete":false,"product_type":"c1","uid":1605058,"ip_address":"","ucode":"1FD25D75CAC7C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/7d/c2/e6332a1b.jpg","comment_is_top":false,"comment_ctime":1655221111,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655221111","product_id":100017301,"comment_content":"最好是O(1)，最差是O(n)，均摊是O(1)","like_count":0},{"had_liked":false,"id":347683,"user_name":"郑力昂","can_delete":false,"product_type":"c1","uid":2818427,"ip_address":"","ucode":"9D2B06BA30ED07","user_header":"https://static001.geekbang.org/account/avatar/00/2b/01/7b/6651481d.jpg","comment_is_top":false,"comment_ctime":1654310463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654310463","product_id":100017301,"comment_content":"最好是O(1),最坏是O(n),平均平摊是O(1).<br>我是一名初学者,C语言没怎么学过,学的多的是Python,老师讲的很透彻,一下子就明白了","like_count":0},{"had_liked":false,"id":347549,"user_name":"史孝开","can_delete":false,"product_type":"c1","uid":1736668,"ip_address":"","ucode":"8F021BD27D3949","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7f/dc/b75b3527.jpg","comment_is_top":false,"comment_ctime":1654142661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654142661","product_id":100017301,"comment_content":"总结<br><br>一、复杂度分析的4个概念<br>1.最坏情况时间复杂度：代码在最理想情况下执行的时间复杂度。<br>2.最好情况时间复杂度：代码在最坏情况下执行的时间复杂度。<br>3.平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。<br>4.均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。<br><br>二、为什么要引入这4个概念？<br>1.同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，更准确的描述代码的时间复杂度，所以引入这4个概念。<br>2.代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度。大多数情况下，是不需要区别分析它们的。<br><br>三、如何分析平均、均摊时间复杂度？<br>1.平均时间复杂度<br>代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。<br>2.均摊时间复杂度<br>两个条件满足时使用：1）代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；2）低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度","like_count":0},{"had_liked":false,"id":346947,"user_name":"Guanjm","can_delete":false,"product_type":"c1","uid":1981574,"ip_address":"","ucode":"E472FA918DF9E7","user_header":"https://static001.geekbang.org/account/avatar/00/1e/3c/86/f964868c.jpg","comment_is_top":false,"comment_ctime":1653555209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653555209","product_id":100017301,"comment_content":"&#47;&#47; array表示一个长度为n的数组 &#47;&#47; 代码中的array.length就等于n <br>    int[] array = new int[n]; <br>    int count = 0;<br>    void insert(int val) {<br>        if (count == array.length) {<br>            int sum = 0;<br>            for (int i = 0; i &lt; array.length; ++i) {<br>                sum = sum + array[i];<br>            }<br>            array[0] = sum;<br>            count = 1;<br>        }<br>        array[count] = val;<br>        ++count;<br>    }<br>这段逻辑不会循环呀？ 什么情况？","like_count":0},{"had_liked":false,"id":346702,"user_name":"bd7xzz","can_delete":false,"product_type":"c1","uid":1003006,"ip_address":"","ucode":"420199A024D4F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fe/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1653369706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653369706","product_id":100017301,"comment_content":"其实练习题跟文章中的数组插入基本没啥差距。分析方法也一模一样。最好O1，最坏On，因为扩容插入也是具有最坏且连续的特性，所以采用均摊分析，均摊后也是O1。","like_count":0},{"had_liked":false,"id":345514,"user_name":"赵小骄","can_delete":false,"product_type":"c1","uid":1801849,"ip_address":"","ucode":"9ADDBA44C22FDA","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7e/79/fe67256e.jpg","comment_is_top":false,"comment_ctime":1652344711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652344711","product_id":100017301,"comment_content":"不是说只要是固定数值就是O(1)吗","like_count":0},{"had_liked":false,"id":345273,"user_name":"随心随欲","can_delete":false,"product_type":"c1","uid":2131481,"ip_address":"","ucode":"016967F9D2D438","user_header":"https://static001.geekbang.org/account/avatar/00/20/86/19/655a12a5.jpg","comment_is_top":false,"comment_ctime":1652167911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652167911","product_id":100017301,"comment_content":"均摊时间复杂度为什么是O(1)呢？不是很理解，n个1&#47;(n+1)再加上n&#47;(n+1)，算出来应该是2n&#47;(n+1) 啊，求解","like_count":0},{"had_liked":false,"id":343529,"user_name":"Geek_53bccf","can_delete":false,"product_type":"c1","uid":1481179,"ip_address":"","ucode":"1818C97E5D1CCC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/UfqEYrR3cQXUhPEibnXD3kPSc8f0ibR4bdz6JnibjOBibfcxWrkVlz4iaCAAutOSotiaP2ROYX5esYfhAB3vj4avnYqQ/132","comment_is_top":false,"comment_ctime":1650893363,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650893363","product_id":100017301,"comment_content":"我的理解是 对均摊时间复杂度的理解是，如上代码示例，由N次O1操作后是O（n)操作，所以均摊时间复杂度是o1","like_count":0},{"had_liked":false,"id":343312,"user_name":"Geek_a592ab","can_delete":false,"product_type":"c1","uid":2986590,"ip_address":"","ucode":"E83D6025714599","user_header":"","comment_is_top":false,"comment_ctime":1650777231,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650777231","product_id":100017301,"comment_content":"请问老师，new_array在赋值给array之后，其内存是被释放掉了吗？还是说它的内存地址转存到array上去了？","like_count":0},{"had_liked":false,"id":338756,"user_name":"林海俭","can_delete":false,"product_type":"c1","uid":1973346,"ip_address":"","ucode":"403020C3201C90","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6ssNfBGQXiafTSCBHtl4L7ykIBjqZMMpWU3v4ibwP0APYzWk88zELRaJXUNMIVcuWpkb0Q3x0CicYxg/132","comment_is_top":false,"comment_ctime":1647701304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647701304","product_id":100017301,"comment_content":"最好是o(1)<br>最坏是o(n)<br>平均或均摊是o(1)，因为大部分执行情况下都是o(1)","like_count":0},{"had_liked":false,"id":337471,"user_name":"Biluota","can_delete":false,"product_type":"c1","uid":1920889,"ip_address":"","ucode":"10D06C0254A245","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4f/79/7b4b08a0.jpg","comment_is_top":false,"comment_ctime":1646837961,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1646837961","product_id":100017301,"comment_content":"最好时间复杂度是O(1)，最坏时间复杂度O(n)，均摊时间复杂度O(1)","like_count":0},{"had_liked":false,"id":336431,"user_name":"黄月亮哇","can_delete":false,"product_type":"c1","uid":2885247,"ip_address":"","ucode":"48F16D9BCFCE7A","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/7f/26a081a8.jpg","comment_is_top":false,"comment_ctime":1646142973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646142973","product_id":100017301,"comment_content":"为什么最坏复杂度是o（n）啊，谁能帮忙解答下，谢谢","like_count":0},{"had_liked":false,"id":336368,"user_name":"谭雪娇","can_delete":false,"product_type":"c1","uid":1375252,"ip_address":"","ucode":"B20AB23E0D20E0","user_header":"https://static001.geekbang.org/account/avatar/00/14/fc/14/b6b50f91.jpg","comment_is_top":false,"comment_ctime":1646115930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646115930","product_id":100017301,"comment_content":"let array = [];<br>array.length = 9;<br>let count = 10;<br>let val = 10;<br>insert(val)<br>function insert(val) {<br>   if (count == array.length) {<br>     let sum = 0;<br>     for (let i = 0; i &lt; array.length; ++i) {<br>         sum = sum + array[i];<br>     }<br>     array[0] = sum;<br>     count = 1; <br>    }<br>   array[count] = val;<br>   ++count; <br>}<br>console.log(array) &#47;&#47;插入值在最后<br>let array = [];<br>array.length = 9;<br>let count = 0;<br>let val = 10;<br>insert(val)<br>function insert(val) {<br>   if (count == array.length) {<br>     let sum = 0;<br>     for (let i = 0; i &lt; array.length; ++i) {<br>         sum = sum + array[i];<br>     }<br>     array[0] = sum;<br>     count = 1; <br>    }<br>   array[count] = val;<br>   ++count; <br>}<br>console.log(array) &#47;&#47; 插入值在第一个","like_count":0},{"had_liked":false,"id":335884,"user_name":"只长知识不长肉","can_delete":false,"product_type":"c1","uid":1920857,"ip_address":"","ucode":"73DDD6E8EB5119","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4f/59/dcf0eec4.jpg","comment_is_top":false,"comment_ctime":1645755021,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645755021","product_id":100017301,"comment_content":"len是常量级，所以最好是O(1),最坏O(n),均摊是O(1)<br>","like_count":0},{"had_liked":false,"id":335687,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1645628029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645628029","product_id":100017301,"comment_content":"课后思考：最好时间复杂度是首次 O(1)， 最坏是 O(n) 迁移 n - 1 个数， 均摊是 O(1)","like_count":0},{"had_liked":false,"id":335286,"user_name":"🐟 🐟 🐟","can_delete":false,"product_type":"c1","uid":2556217,"ip_address":"","ucode":"EB2EDEF667F30F","user_header":"https://static001.geekbang.org/account/avatar/00/27/01/39/bd834cc6.jpg","comment_is_top":false,"comment_ctime":1645441297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645441297","product_id":100017301,"comment_content":"最好复杂度：O（1）<br>最坏复杂度：O（n）<br>前n次的复杂度为O（1），第n+1次的复杂度为O（n），因此均摊复杂度：O（1）","like_count":0},{"had_liked":false,"id":335089,"user_name":"故事与酒","can_delete":false,"product_type":"c1","uid":2788244,"ip_address":"","ucode":"1A0CCAA2C31D3C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8b/94/09dca97d.jpg","comment_is_top":false,"comment_ctime":1645323172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645323172","product_id":100017301,"comment_content":"思考题  最好O(1) 最坏O(n),均摊 O(1)，均摊是种特殊的平均了，那分析了均摊还要分析平均吗","like_count":0},{"had_liked":false,"id":334632,"user_name":"夜空中的咸鱼","can_delete":false,"product_type":"c1","uid":2143489,"ip_address":"","ucode":"D6F1EAF082D000","user_header":"https://static001.geekbang.org/account/avatar/00/20/b5/01/9938349b.jpg","comment_is_top":false,"comment_ctime":1645024976,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1645024976","product_id":100017301,"comment_content":"(一刷)本课小结:<br>本节课主要学习了四个复杂度的概念:最好情况时间复杂度,最坏情况时间复杂度,平均情况时间复杂度,均摊时间复杂度(摊还分析)<br>最好情况时间复杂度:一般指的是该程序(代码)执行效率最高的情况(o(1)&gt;o(logN)&gt;o(n)&gt;o(nlogn)&gt;o(n^2))<br>最坏情况时间复杂度:一般指的是该程序(代码)在极端情况下执行效率的情况<br>平均情况时间复杂度:程序(代码)一般执行效率的情况<br>均摊时间复杂度:就是一种特殊的平均情况时间复杂度<br>平均情况时间复杂度的应用场景:只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分<br>均摊时间复杂度的应用场景:对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。<br>思考题:<br>该程序的时间复杂度为:o(n),最好情况时间复杂度为o(1),最坏情况时间复杂度o(n),均摊复杂度o(1)<br>其他:<br>我需要补充一些高中关于加权法则和概率论的学习<br>","like_count":0},{"had_liked":false,"id":334088,"user_name":"+","can_delete":false,"product_type":"c1","uid":2912368,"ip_address":"","ucode":"EF95F0571EA4AE","user_header":"https://static001.geekbang.org/account/avatar/00/2c/70/70/7ae38b1d.jpg","comment_is_top":false,"comment_ctime":1644737907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644737907","product_id":100017301,"comment_content":"最好是O(1) 最坏是O(n) 平均平摊是O(1)","like_count":0},{"had_liked":false,"id":333751,"user_name":"Ascetic","can_delete":false,"product_type":"c1","uid":2563593,"ip_address":"","ucode":"99B176AA913D41","user_header":"https://static001.geekbang.org/account/avatar/00/27/1e/09/cf540940.jpg","comment_is_top":false,"comment_ctime":1644497261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644497261","product_id":100017301,"comment_content":"最好复杂度 O(1), 最差复杂度O(n), 均摊复杂度O(1)","like_count":0},{"had_liked":false,"id":331300,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1642524822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642524822","product_id":100017301,"comment_content":"这里最好的理解方法是，当i&lt;len的时候，复杂度是O(1)，即最好的情况；当i= len, 复杂度是O(len) = O(n),即最坏的情况；i &gt; len 这种情况不会存在，因为当i = len的时候，len已经翻倍了;均摊的情况只需要计算最坏情况出现的概率, 分子是1,分母俩次扩容的大小差值 = 10 * (2^n - 2^(n-1)),n&gt;=1,n代表扩容第几次, 最坏情况执行次数 = i的值到扩容后的值也是俩次扩容的差值 = 10 *(2^n - 2^(n-1)),所以这样子计算下来均摊的复杂度 O(n) = 1;","like_count":0},{"had_liked":false,"id":329976,"user_name":"endorphin","can_delete":false,"product_type":"c1","uid":2532144,"ip_address":"","ucode":"234043945254DF","user_header":"https://static001.geekbang.org/account/avatar/00/26/a3/30/e0de2ac2.jpg","comment_is_top":false,"comment_ctime":1641708788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641708788","product_id":100017301,"comment_content":"最好情况下数组没满，插入元素O(1)，最坏情况下数组满了，需要将数组扩容到两倍并将旧数组的元素挨个拷贝到新数组，时间复杂度为O(n)，这里符合均摊分析的情况，每进行一次耗时多的操作就要进行多个耗时少的操作，均摊时间复杂度为O(1)，在这里等于最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":328490,"user_name":"YOU","can_delete":false,"product_type":"c1","uid":2878843,"ip_address":"","ucode":"7F4CE735A863C2","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ed/7b/a0e0280c.jpg","comment_is_top":false,"comment_ctime":1640751944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640751944","product_id":100017301,"comment_content":"练习题是O(1),每10个一组，0-9都是一条赋值为O(1)，10的话会发生拷贝为O( n),根据均摊规则是O（1）.<br>本节主要学习了最好时间复杂度，最坏时间复杂度，平均时间复杂度以及均摊时间复杂度°","like_count":0},{"had_liked":false,"id":328119,"user_name":"Geek_ting_2021","can_delete":false,"product_type":"c1","uid":2687339,"ip_address":"","ucode":"A6D5C57FA6806F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NGib8v9Lml2JBfP5hIKib85d3jQpWibbXwfjaGnKmmGOzX45a3AQN67E5QnuKwaKc4MPfOe5qqLmW4tJxqZ8RCiawg/132","comment_is_top":false,"comment_ctime":1640562838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640562838","product_id":100017301,"comment_content":"老师，我有两个问题还请解答疑惑；1、插入函数的n+1种情况发生的概率为什么都一样？ 能插入和不能插入的概率不是1&#47;2吗？ 2、’一个O(n)插入之后，紧跟着n-1个O（1）的插入操作，为什么这么说呢，这种说法的前提是连续插入数据吗‘","like_count":0},{"had_liked":false,"id":327951,"user_name":"尹深","can_delete":false,"product_type":"c1","uid":1664124,"ip_address":"","ucode":"B48812FBA67882","user_header":"https://static001.geekbang.org/account/avatar/00/19/64/7c/dc4304b4.jpg","comment_is_top":false,"comment_ctime":1640419348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640419348","product_id":100017301,"comment_content":"最好为 O(1)  不用扩容 不用移动元素<br>最坏为O(n)   要移动元素<br>均摊是O(1)   掰开来看 O(n)的次数大大小于O(1)<br>空间复杂度有点懵逼 只在 扩容是申请了 一个二倍的数组 ","like_count":0},{"had_liked":false,"id":325990,"user_name":"Geek_8153bb","can_delete":false,"product_type":"c1","uid":2867273,"ip_address":"","ucode":"10E25188899718","user_header":"","comment_is_top":false,"comment_ctime":1639297240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639297240","product_id":100017301,"comment_content":"最好时间复杂度：o(1),最坏时间复杂度0(n),均摊时间复杂度o（1）","like_count":0},{"had_liked":false,"id":324883,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1638702011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638702011","product_id":100017301,"comment_content":"课后问题<br>最好情况时间复杂度是O(1)<br>最坏情况时间复杂度是O(n)<br>平均情况时间复杂度是O(1)<br>均摊情况时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":324566,"user_name":"pig没有i","can_delete":false,"product_type":"c1","uid":1324601,"ip_address":"","ucode":"7934BCF7966AAE","user_header":"https://static001.geekbang.org/account/avatar/00/14/36/39/dba635a2.jpg","comment_is_top":false,"comment_ctime":1638501931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638501931","product_id":100017301,"comment_content":"最好是O(1)，这个好理解；<br><br>最坏是O(n)，add（）这个函数随着在全局范围内被调用次数的增加而变得“复杂”，即在第1至10次（i取值范围是0-9)被调用时，数组无需扩容，时间复杂度都为O（1），但为了求最坏，我们假设这个add()函数被调用了n次，len的变化为10、20、40、80……，同理i在取到10、20、40、80……时数组会发生扩容，又知i值每次在add()执行后都会加1，故add()被调用n次时，i也被加了n次，但这时发生了几次扩容呢？从上面列举不难发现，i取到80时，即add()在被第80次调用时才发生第4次扩容，不难推出，在被第160次调用时会发生第5次扩容，所以add()在被第n次调用时，会发生第log（n&#47;10）次扩容【n只能取10、20、40、80、160、……】，我们又发现，扩容操作的时间复杂度由for循环中的len决定，发生更新时的len=i=n，故时间复杂度为O(n)；<br><br>平均和均摊是O(1)，add()被第m次调用(n≠10、20、40、……）时，不扩容，不妨设语句执行C次，C表示常数，add()被第n(n=10、20、40……)次调用时，扩容，执行语句n次，不难发现总调用次数m+n中，m&gt;&gt;n，故均摊为O(1)，平均就交给小伙伴们自己算啦","like_count":0},{"had_liked":false,"id":322905,"user_name":"Tina","can_delete":false,"product_type":"c1","uid":2851354,"ip_address":"","ucode":"8D6D9F6E3D0A99","user_header":"https://static001.geekbang.org/account/avatar/00/2b/82/1a/30676c2e.jpg","comment_is_top":false,"comment_ctime":1637653740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637653740","product_id":100017301,"comment_content":"add中最好的情况是数组空间够用，直接添加，最好情况时间复杂度为O(1)，最坏的情况是数组的空间不够用了，要申请一个更大的空间，并将之前数组中的元素依次复制到新数组中，最坏时间复杂度为O(n)，均摊复杂度直接分析，根据代码可以得知大部分情况下都是直接添加的，不会经常说空间不够要扩大，这只是极少数的情况，均摊我觉得也就是看大部分情况下的复杂度，偶尔的情况便可以忽略了吧，均摊复杂度便是O(1)","like_count":0},{"had_liked":false,"id":322512,"user_name":"Vincent.X","can_delete":false,"product_type":"c1","uid":1538604,"ip_address":"","ucode":"8A40B5B2F4B102","user_header":"https://static001.geekbang.org/account/avatar/00/17/7a/2c/54b48459.jpg","comment_is_top":false,"comment_ctime":1637452933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637452933","product_id":100017301,"comment_content":"关于均摊时间复杂度，假设前面n次操作是O(1),最后一次操作是O(n平方)，那么这种情况的均摊时间复杂度怎么计算？结果还是o(1)吗？","like_count":0},{"had_liked":false,"id":321952,"user_name":"ByLomo","can_delete":false,"product_type":"c1","uid":1127054,"ip_address":"","ucode":"DAB58C6BE637E7","user_header":"https://static001.geekbang.org/account/avatar/00/11/32/8e/804881c8.jpg","comment_is_top":false,"comment_ctime":1637117039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637117039","product_id":100017301,"comment_content":"第一个例子，优化前后代码逻辑已经不一样了，优化前的代码是要找最后一个，优化后是找第一个，不应该是倒着找到第一个然后break么？","like_count":0},{"had_liked":false,"id":321511,"user_name":"windf1sh","can_delete":false,"product_type":"c1","uid":1157244,"ip_address":"","ucode":"9745EC7820493D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a8/7c/bb08fba5.jpg","comment_is_top":false,"comment_ctime":1636911424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636911424","product_id":100017301,"comment_content":"1.最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。<br>2.最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。<br>3.把每种情况发生的概率也考虑进去，平均时间复杂度的计算结果就是概率论中的加权平均值，也叫作期望值，所以平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度。<br>4.摊还分析法，通过摊还分析得到的时间复杂度我们起了一个名字，叫均摊时间复杂度。<br>","like_count":0},{"had_liked":false,"id":320164,"user_name":"无问西东","can_delete":false,"product_type":"c1","uid":1267525,"ip_address":"","ucode":"FBCBAB3CC262B9","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/45/a3536178.jpg","comment_is_top":false,"comment_ctime":1636104595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636104595","product_id":100017301,"comment_content":"练习题： 最好情况 O(1）  最差情况 O(n)    平摊 O(2) 去除常量 结果为 O(1）","like_count":0},{"had_liked":false,"id":319040,"user_name":"Geek_1d4382","can_delete":false,"product_type":"c1","uid":2826799,"ip_address":"","ucode":"D6C0105FDD01B8","user_header":"","comment_is_top":false,"comment_ctime":1635520276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635520276","product_id":100017301,"comment_content":"练习题最好是O(1)，最差是O(n)，平均是O(1)","like_count":0},{"had_liked":false,"id":318425,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1102355,"ip_address":"","ucode":"7E21F896B98873","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/13/6725a768.jpg","comment_is_top":false,"comment_ctime":1635297705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635297705","product_id":100017301,"comment_content":"从工程的角度讲，n越大，越容易stop the world","like_count":0},{"had_liked":false,"id":317626,"user_name":"Sherry","can_delete":false,"product_type":"c1","uid":2820458,"ip_address":"","ucode":"AC5BF603418527","user_header":"https://static001.geekbang.org/account/avatar/00/2b/09/6a/dc0cf483.jpg","comment_is_top":false,"comment_ctime":1634871855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634871855","product_id":100017301,"comment_content":"add函数好像就是insert的加强版，可以一直循环插入下去，不够就申请，所以各种时间复杂度都是一样的^_^","like_count":0},{"had_liked":false,"id":317400,"user_name":"Tomorrow","can_delete":false,"product_type":"c1","uid":2819802,"ip_address":"","ucode":"25EA0E0D766F76","user_header":"https://static001.geekbang.org/account/avatar/00/2b/06/da/196f9dad.jpg","comment_is_top":false,"comment_ctime":1634785809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634785809","product_id":100017301,"comment_content":"练习题<br>最好时间复杂度O（1）<br>最差时间复杂度O（n）<br>平均时间复杂度O（1）<br>老师讲的很清楚，可以边走路边听，太棒了～","like_count":0},{"had_liked":false,"id":316423,"user_name":"akuma","can_delete":false,"product_type":"c1","uid":2769147,"ip_address":"","ucode":"2C1628C0E74D30","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/eunqL11r55A8WAWlyWs0EnST4bsCKSRLwyUcQWseONEeYaqPlGbjVeeszArQdm9vFsFAGstVgVYibT6cZYlI0iaw/132","comment_is_top":false,"comment_ctime":1634300254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634300254","product_id":100017301,"comment_content":"10个O(1)<br>一个O(n)<br>n = 10<br>20个O(1)<br>一个O(n)<br>n = 20<br>40个O(1)<br>一个O(n)<br>......<br><br>把O(n)均摊到10*2^n个O(1)上，整体的复杂度就是O(1)","like_count":0},{"had_liked":false,"id":315679,"user_name":"纪老猴子","can_delete":false,"product_type":"c1","uid":1468554,"ip_address":"","ucode":"05962FE7279802","user_header":"https://static001.geekbang.org/account/avatar/00/16/68/8a/af8e49a8.jpg","comment_is_top":false,"comment_ctime":1633944000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633944000","product_id":100017301,"comment_content":"C++的std::vector时间复杂度分析用到了摊还分析，我记得之前刷算法导论的时候，摊还分析用的例子就类似于C++的std::vector的实现。","like_count":0},{"had_liked":false,"id":315158,"user_name":"big stone","can_delete":false,"product_type":"c1","uid":1187345,"ip_address":"","ucode":"70C565DDE57233","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/11/c0894529.jpg","comment_is_top":false,"comment_ctime":1633709011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633709011","product_id":100017301,"comment_content":"课后题和老师的例子本质上还是一样的 不同的是一个是求和，一个是扩容，他们都循环了n次，通过摊还分析法可以得到，最好O(1) ,最差O(n),平均O(1)","like_count":0},{"had_liked":false,"id":315072,"user_name":"Json","can_delete":false,"product_type":"c1","uid":2035271,"ip_address":"","ucode":"2C28E0CBEB2FBC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0e/47/cb39bcb1.jpg","comment_is_top":false,"comment_ctime":1633679973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633679973","product_id":100017301,"comment_content":"最好时间复杂度：O(1)<br>最坏时间复杂度：O(n)<br>均摊时间复杂度：O(1)<br><br>均摊时间复杂度计算思路：<br>1、没有扩容的时候<br>设初始的数组容量为n，那么在执行n个O(1)的操作之后就会执行一个O(n)的操作，所以均摊时间复杂度为O(1)<br><br>2、扩容之后<br>假设扩容之前的数据容量为n，那么扩容之后的数据容量为2n。那么在执行n个O(1)的操作之后就会执行一个O(2n)=O(n)的操作，所以均摊时间复杂度为O(1)<br>","like_count":0},{"had_liked":false,"id":312665,"user_name":"lyt","can_delete":false,"product_type":"c1","uid":1526706,"ip_address":"","ucode":"8C179F339C2A27","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OwolYO3ppfrxTcX81cswxNkD4tIlHM7vrnfroMzoTx878mDCnfJ3esicvbhm7ricUAbR7T9DjEDstVklh9z6uzjQ/132","comment_is_top":false,"comment_ctime":1631933773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631933773","product_id":100017301,"comment_content":"思考题均摊时间复杂度为O(1)。均摊时间复杂度分析应用在不同量级时间复杂度出现频率有规律的场景，一般就是最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":312455,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1631806776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631806776","product_id":100017301,"comment_content":"答案是o（1），均摊时间复杂度，就是一次是o (n)，其他是o (1)","like_count":0},{"had_liked":false,"id":312272,"user_name":"tsubasawzj","can_delete":false,"product_type":"c1","uid":2011671,"ip_address":"","ucode":"69504F447C1E8D","user_header":"","comment_is_top":false,"comment_ctime":1631712000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631712000","product_id":100017301,"comment_content":"初始len=10，扩张x次后，len=n，扩张次数 x=log2(n&#47;10)<br>最好情况时间复杂度：O(1)<br>最坏情况时间复杂度：O(n)<br>平均时间复杂度：O(1)<br>9*1&#47;n+10&#47;n + (19-10)*1&#47;n+20&#47;n + (39-20)*1&#47;n+40&#47;n +... +(2^x-2^(x-1)-1)*1&#47;n+10*2^x&#47;n<br>10*(2^0+2^1+...+2^x)&#47;n + (10*2^x-x)&#47;n<br>=10*(3*2^x-1)&#47;n - x&#47;n<br>=(3n-10)&#47;n - log2(n&#47;10)&#47;n<br>均摊时间复杂度：O(1)<br>x次扩张，前有n&#47;10-3次1，后有1次n，均摊后","like_count":0},{"had_liked":false,"id":311438,"user_name":"白白","can_delete":false,"product_type":"c1","uid":2746937,"ip_address":"","ucode":"5E2250A78784EF","user_header":"https://static001.geekbang.org/account/avatar/00/29/ea/39/ba456e2a.jpg","comment_is_top":false,"comment_ctime":1631238238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631238238","product_id":100017301,"comment_content":"平均复杂度和均摊复杂度没有像之前那样推导的细致，对于我而言真的有点吃力甚至不太明白，以为自己数学基础不行，把高中数学大致又复习了一遍，但这篇文章依旧卡了快两天，我与笔记里的大哥们各有各的想法和推法，感觉都是为了结果说服自己，说明白吧自己感觉真的不懂，说不明白吧类似的代码复杂度也都能分析出来🤦🏻‍♂️麻了","like_count":0},{"had_liked":false,"id":311334,"user_name":"爱只只","can_delete":false,"product_type":"c1","uid":2660914,"ip_address":"","ucode":"E115F4D6F14D08","user_header":"https://static001.geekbang.org/account/avatar/00/28/9a/32/692859f2.jpg","comment_is_top":false,"comment_ctime":1631176611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631176611","product_id":100017301,"comment_content":"学完明朗了，大二学的数据结构听的是迷迷糊糊，考试也是突击过的","like_count":0},{"had_liked":false,"id":311215,"user_name":"云会宾","can_delete":false,"product_type":"c1","uid":2696335,"ip_address":"","ucode":"8DFC2DD03D7E51","user_header":"https://static001.geekbang.org/account/avatar/00/29/24/8f/77140e34.jpg","comment_is_top":false,"comment_ctime":1631107921,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631107921","product_id":100017301,"comment_content":"均摊很像一种周期性的波形——方波。","like_count":0},{"had_liked":false,"id":311210,"user_name":"yhj","can_delete":false,"product_type":"c1","uid":1324397,"ip_address":"","ucode":"CBEA5880152BF8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epkDTxCz7fOJQW1205V2usebApTsWqc3XgYdPMIgBOZiadxicx3zm4g16I7rpol0BdTD3HGC3I7FA6g/132","comment_is_top":false,"comment_ctime":1631105564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631105564","product_id":100017301,"comment_content":"均摊时间复杂度类似：P99指标","like_count":0},{"had_liked":false,"id":311162,"user_name":"牛掰的斐","can_delete":false,"product_type":"c1","uid":1337842,"ip_address":"","ucode":"A0265CCE3F4FC0","user_header":"https://static001.geekbang.org/account/avatar/00/14/69/f2/b17d73ff.jpg","comment_is_top":false,"comment_ctime":1631091890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631091890","product_id":100017301,"comment_content":"从数组中查找元素能用均摊的方式算吗？没太想到思路","like_count":0},{"had_liked":false,"id":310640,"user_name":"书有径","can_delete":false,"product_type":"c1","uid":2666247,"ip_address":"","ucode":"887B0414A8E87A","user_header":"https://static001.geekbang.org/account/avatar/00/28/af/07/4553214d.jpg","comment_is_top":false,"comment_ctime":1630815223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630815223","product_id":100017301,"comment_content":"老师讲平均情况时间复杂度没有直接讲考虑发生概率的情况，真的讲的细。让我马上想到在写代码过程中，有一些情况是那分钟考虑不到的，或者是根本不会考虑，那怎么避免呢？","like_count":0},{"had_liked":false,"id":310193,"user_name":"Seven","can_delete":false,"product_type":"c1","uid":2403766,"ip_address":"","ucode":"37D99CF8535CDE","user_header":"https://static001.geekbang.org/account/avatar/00/24/ad/b6/a8caa2c7.jpg","comment_is_top":false,"comment_ctime":1630544585,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1630544585","product_id":100017301,"comment_content":"作业这个题，除了在第n次，当前数组满了的情况下执行了O(n)的一次操作，前面n-1次都是O(1)级别的操作，因此不论是 平均复杂的计算，还是用 均摊分析 都应该是O(1)级别的复杂度","like_count":0},{"had_liked":false,"id":309930,"user_name":"Soopor","can_delete":false,"product_type":"c1","uid":1180151,"ip_address":"","ucode":"DD2C37A9892E9E","user_header":"https://static001.geekbang.org/account/avatar/00/12/01/f7/68e1e521.jpg","comment_is_top":false,"comment_ctime":1630399145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630399145","product_id":100017301,"comment_content":"最好时间复杂度 O(1),最坏时间复杂度O(n),平均时间复杂度O(n)","like_count":0},{"had_liked":false,"id":309823,"user_name":"movesan","can_delete":false,"product_type":"c1","uid":1257422,"ip_address":"","ucode":"29CDF0F2B604C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ce/c72d4c67.jpg","comment_is_top":false,"comment_ctime":1630347036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630347036","product_id":100017301,"comment_content":"均摊O(1)","like_count":0},{"had_liked":false,"id":309792,"user_name":"Geek_ee3685","can_delete":false,"product_type":"c1","uid":2750366,"ip_address":"","ucode":"2E0D5A064F5619","user_header":"","comment_is_top":false,"comment_ctime":1630334692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630334692","product_id":100017301,"comment_content":"老师 上面的两个例子里面的概率 为什么 第一个 在数组里 和不在数组里 是各二分之一   后一个例子 满和不满 也是各二分之一啊","like_count":0},{"had_liked":false,"id":308751,"user_name":"偏执","can_delete":false,"product_type":"c1","uid":2745246,"ip_address":"","ucode":"11158A21E91777","user_header":"https://static001.geekbang.org/account/avatar/00/29/e3/9e/116f94e5.jpg","comment_is_top":false,"comment_ctime":1629783395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629783395","product_id":100017301,"comment_content":"我感觉我还得再看10遍","like_count":0},{"had_liked":false,"id":308295,"user_name":"谷谷雨箐","can_delete":false,"product_type":"c1","uid":2726717,"ip_address":"","ucode":"4E4392B08943A3","user_header":"https://static001.geekbang.org/account/avatar/00/29/9b/3d/4999233f.jpg","comment_is_top":false,"comment_ctime":1629523360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629523360","product_id":100017301,"comment_content":"时间复杂度应该是均摊O(1)吧，绝大多数情况下数组都没满，复杂度是O(1)，小部分情况下数组满了，就要倒一次数据，复杂度=O(n)，所以均摊下来就是O(1)了。<br>emmm。。。。空间复杂度有点不太确定，是O(n)吗？","like_count":0},{"had_liked":false,"id":307054,"user_name":"昌哥","can_delete":false,"product_type":"c1","uid":1340262,"ip_address":"","ucode":"61B042CA79B1DC","user_header":"https://static001.geekbang.org/account/avatar/00/14/73/66/14a855fd.jpg","comment_is_top":false,"comment_ctime":1628841687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628841687","product_id":100017301,"comment_content":"我想知道一下为什么平均情况复杂度加两次n 最大不就是n-1次吗 不是应该1+2+3+4+.......+n-1吗","like_count":0},{"had_liked":false,"id":304626,"user_name":"涛涛哥","can_delete":false,"product_type":"c1","uid":1113532,"ip_address":"","ucode":"7258CFFE525F69","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/bc/bd2fa589.jpg","comment_is_top":false,"comment_ctime":1627525973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627525973","product_id":100017301,"comment_content":"如果使用递归，递归函数的堆栈要不要算在空间复杂度里？","like_count":0},{"had_liked":false,"id":303900,"user_name":"小黄鸭","can_delete":false,"product_type":"c1","uid":2708370,"ip_address":"","ucode":"2800E3A723AEBD","user_header":"https://static001.geekbang.org/account/avatar/00/29/53/92/21c78176.jpg","comment_is_top":false,"comment_ctime":1627058776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627058776","product_id":100017301,"comment_content":"我想知道，练习题里为什么最坏的不是O(2^n)？明明len是2^n*10","like_count":0},{"had_liked":false,"id":303492,"user_name":"Geek_ymm","can_delete":false,"product_type":"c1","uid":1621619,"ip_address":"","ucode":"C5B645DD3D528D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8vYticoRUGtRSpglcsWvnfcjCkb6jhhOE9gH3QokyJkqx23m2vY4bUibEcu7jILejDJCLyuJBCJJA/132","comment_is_top":false,"comment_ctime":1626831429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626831429","product_id":100017301,"comment_content":"打卡，最好是O1，最差是On，均摊是O1","like_count":0},{"had_liked":false,"id":303438,"user_name":"Geek_962f6d","can_delete":false,"product_type":"c1","uid":2705451,"ip_address":"","ucode":"5C9D1499BF10EA","user_header":"","comment_is_top":false,"comment_ctime":1626787640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626787640","product_id":100017301,"comment_content":"练习题，最好O(1)，最坏O(n)，平均O(1)；均摊O(1);<br>除了第一次扩容len→2len时，新插入的长度和扩容前的长度相等，循环遍历可视为向之前每次均摊1个，后面的扩容前的长度为新插入长度的2倍，循环遍历可视为向之前每次均摊2个，整体来看还是O(1)。","like_count":0},{"had_liked":false,"id":303376,"user_name":"Leetion","can_delete":false,"product_type":"c1","uid":2708065,"ip_address":"","ucode":"D7BD236D4C55F0","user_header":"https://static001.geekbang.org/account/avatar/00/29/52/61/0c0a5982.jpg","comment_is_top":false,"comment_ctime":1626761227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626761227","product_id":100017301,"comment_content":"私以为，在第一个例子中，优化前的例子是返回数组中最后一次出现目标元素的索引；而优化后的代码是返回数组中第一次出现目标元数的索引。是不是可以考虑修改优化前的代码从数组末端开始，或者修改优化后的代码从数组末端开始。","like_count":0},{"had_liked":false,"id":303036,"user_name":"Geek_1cc2e9","can_delete":false,"product_type":"c1","uid":2198175,"ip_address":"","ucode":"5759F0635B3A4B","user_header":"","comment_is_top":false,"comment_ctime":1626533686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626533686","product_id":100017301,"comment_content":"复杂度大概为10个1，一个10，然后20个1，一个20，然后40个1，一个40.......这样计算一下大约是O(1)到O（2）的复杂度，所以答案是O(1)","like_count":0},{"had_liked":false,"id":302766,"user_name":"Geek_cd6bbb","can_delete":false,"product_type":"c1","uid":2670329,"ip_address":"","ucode":"9364B927DA35A8","user_header":"","comment_is_top":false,"comment_ctime":1626357407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626357407","product_id":100017301,"comment_content":"思考题长度是个定值为啥会出现O（n）的复杂度","like_count":0},{"had_liked":false,"id":302720,"user_name":"ant","can_delete":false,"product_type":"c1","uid":1556708,"ip_address":"","ucode":"A39A03AF257471","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYLPAlGUWic4yAqsGtEYBSRR7gDjyg9yiaJicNhMwiaNw4rMKQ5DHTfp7gmic0gpqEwCZaou8G6CdHKCg/132","comment_is_top":false,"comment_ctime":1626344665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626344665","product_id":100017301,"comment_content":"二刷数据结构与算法之美<br>------------------<br>最好时间复杂度、最坏时间复杂度、平均时间复杂度、摊还时间复杂度。<br>不是每一种代码结构都具备唯一的执行逻辑，不是每一种逻辑时间复杂度都一致。<br>所以要表示一个代码时间复杂度就需要多个维度来共同表达，那么就引入了最好、最坏和平均时间复杂度。至于摊还时间复杂度，是指特定的代码机构，在有时序性和有规律的多次最好时间复杂度 少次最差时间复杂度的情况下 默认平均时间复杂度应该为最好时间复杂度，把少次的复杂运算均摊到多次的简单运算上。","like_count":0},{"had_liked":false,"id":302704,"user_name":"Alex_GT","can_delete":false,"product_type":"c1","uid":1312926,"ip_address":"","ucode":"86ADB50A2736FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/08/9e/ac07b0c8.jpg","comment_is_top":false,"comment_ctime":1626341249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626341249","product_id":100017301,"comment_content":"1 定义<br>最好情况时间复杂度<br>best case time complexity<br>最坏情况时间复杂度<br>worst case time complexity<br>平均情况时间复杂度<br>average case time complexity<br>均摊时间复杂度<br>amortized time complexity<br><br>2 比较特性<br>大部分情况下，我们并不需要区分最好、最坏、平均三种复杂度。平均复杂度只在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。<br><br>3 均摊复杂度vs.平均复杂度<br>平均复杂度衡量各种情况的可能性（概率）进而加权平均。<br>均摊复杂度是一种页书的平均复杂度，做摊还分析会发现适应的算法具备一定的时序关系，各种情况按照一定的顺序发生。<br><br>思考题：<br>best: O(1)<br>worst: O(n)<br>average: O(1)<br>amortized: O(1)","like_count":0},{"had_liked":false,"id":302529,"user_name":"乌鸦的觉悟","can_delete":false,"product_type":"c1","uid":2436216,"ip_address":"","ucode":"C4701EDB35CCA3","user_header":"https://static001.geekbang.org/account/avatar/00/25/2c/78/4389b1a6.jpg","comment_is_top":false,"comment_ctime":1626251867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626251867","product_id":100017301,"comment_content":"最好：数组有空间将element放在下标i的位置，此时时间复杂度为O(1)<br><br>最差：数组空间满了，此时进行一个for循环，时间复杂度为O(n)<br><br>具体来说，n次O(1)，一次O(n)，n+1中情况，不管复制不复制数组都是n<br><br>加权平均：(1+1+1+1+1+....+1+n)&#47;(n+1) = (2n-1)&#47;n+1 得出 O(1)<br><br>均摊之后为O(1)","like_count":0},{"had_liked":false,"id":301938,"user_name":"Change","can_delete":false,"product_type":"c1","uid":2689013,"ip_address":"","ucode":"D134EFEC1E3A9C","user_header":"https://static001.geekbang.org/account/avatar/00/29/07/f5/236a4904.jpg","comment_is_top":false,"comment_ctime":1625986005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625986005","product_id":100017301,"comment_content":"想问一下，空间复杂度有木有类似的最好、最坏，平均和均摊的分析法呐","like_count":0},{"had_liked":false,"id":301588,"user_name":"白宇灯","can_delete":false,"product_type":"c1","uid":2686020,"ip_address":"","ucode":"86230DD1D46E58","user_header":"https://static001.geekbang.org/account/avatar/00/28/fc/44/018057b7.jpg","comment_is_top":false,"comment_ctime":1625752141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625752141","product_id":100017301,"comment_content":"例如数组的插入，我直接按最坏的情况看是要向后移动n位，所以时间复杂度是O（n)行吗 ","like_count":0},{"had_liked":false,"id":301587,"user_name":"白宇灯","can_delete":false,"product_type":"c1","uid":2686020,"ip_address":"","ucode":"86230DD1D46E58","user_header":"https://static001.geekbang.org/account/avatar/00/28/fc/44/018057b7.jpg","comment_is_top":false,"comment_ctime":1625751897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625751897","product_id":100017301,"comment_content":"老师，我对时间复杂度的计算和理解就是看这个程序最坏的情况是怎样的继而得出大O表示法的时间复杂度。请问这样准确吗","like_count":0},{"had_liked":false,"id":301232,"user_name":"feature","can_delete":false,"product_type":"c1","uid":2685368,"ip_address":"","ucode":"35179415E52E23","user_header":"https://static001.geekbang.org/account/avatar/00/28/f9/b8/32cf0130.jpg","comment_is_top":false,"comment_ctime":1625583039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625583039","product_id":100017301,"comment_content":"交作业：<br>最好时间复杂度：O(1)<br>最坏时间复杂度：O(n)<br>平均时间复杂度(均摊时间复杂度):O(1)","like_count":0},{"had_liked":false,"id":301115,"user_name":"eminem-xiao","can_delete":false,"product_type":"c1","uid":1998512,"ip_address":"","ucode":"CF07B647012514","user_header":"https://static001.geekbang.org/account/avatar/00/1e/7e/b0/7eed6726.jpg","comment_is_top":false,"comment_ctime":1625541820,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625541820","product_id":100017301,"comment_content":"老师您好，我想问一下上边均摊时间复杂度的那段代码的平均时间复杂度计算。<br>我个人认为count 分为在数组的[0, n-1]之间和count = n两种情况，那么这两种情况应该分别为1&#47;2的概率。<br>(1)当count在[0, n-1]之间时，分别的概率为1&#47;n，乘上前边的1&#47;2，即1&#47;(2n)，这种情况下都是执行1次，即n个1&#47;(2n)相加 ===&gt; n * 1&#47;(2n) = 1&#47;2<br>(2)当count等于n时，计算方式为1&#47;2 * n = n&#47;2<br><br>最后的平均时间复杂度是n&#47;2 + 1&#47;2 ===&gt; O(n)，请问我这样的理解有问题么？<br>","like_count":0},{"had_liked":false,"id":299727,"user_name":"Geek_358199","can_delete":false,"product_type":"c1","uid":2529281,"ip_address":"","ucode":"52D5F115373508","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NGib8v9Lml2JBfP5hIKib85dwFJDP5jqxl6IQOn0W6UGLttZLu2MO6Lb4WqlURZEkoncUrab48LkWXw3vZeEPhbA/132","comment_is_top":false,"comment_ctime":1624836777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624836777","product_id":100017301,"comment_content":"最好情况时间复杂度、<br>最坏情况时间复杂度、<br>平均情况时间复杂度、（加权后，乘上每种情况出现的概率，类似于概率上的期望）<br>均摊时间复杂度。（有序的高复杂+低复杂，把高复杂均摊到低复杂就行）","like_count":0},{"had_liked":false,"id":299726,"user_name":"Geek_358199","can_delete":false,"product_type":"c1","uid":2529281,"ip_address":"","ucode":"52D5F115373508","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NGib8v9Lml2JBfP5hIKib85dwFJDP5jqxl6IQOn0W6UGLttZLu2MO6Lb4WqlURZEkoncUrab48LkWXw3vZeEPhbA/132","comment_is_top":false,"comment_ctime":1624836727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624836727","product_id":100017301,"comment_content":"笔记打卡第2天：https:&#47;&#47;www.yuque.com&#47;docs&#47;share&#47;174bbaee-aee2-4863-afaa-7e466a5e4bda?#（密码：rb1s） 《极客时间-数据结构与算法之美》","like_count":0},{"had_liked":false,"id":299565,"user_name":"Herr Liu","can_delete":false,"product_type":"c1","uid":2346914,"ip_address":"","ucode":"D676E6490BD36D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBWKOYYZkkaoJpsvAUxDMhc13ZyG1MBFWm9icf5oOjlLJJKFudQRfUXQ5cmLG7ggIfLY3qOK7bJjA/132","comment_is_top":false,"comment_ctime":1624713585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624713585","product_id":100017301,"comment_content":"时间复杂度的大O标记法中，可以省略掉系数、低阶、常量<br>最好情况时间复杂度：在最理想的情况下，执行这段代码的时间复杂度。<br>最坏情况时间复杂度：在最糟糕的情况下，执行这段代码的时间复杂度。<br>均摊时间复杂度，以及它对应的分析方法，摊还分析（或者叫平摊分析）<br>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上，而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。<br>将耗时多的那次操作均摊到接下来的n-1次耗时少的操作上，均摊下去。。。<br>","like_count":0},{"had_liked":false,"id":299266,"user_name":"爱的神","can_delete":false,"product_type":"c1","uid":1373857,"ip_address":"","ucode":"780400297FB83A","user_header":"https://static001.geekbang.org/account/avatar/00/14/f6/a1/debef255.jpg","comment_is_top":false,"comment_ctime":1624540257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624540257","product_id":100017301,"comment_content":"不知道还会不会有人看到了。我个人觉得课后思考题，均摊时间复杂度应该是和 O(n)同阶。因为数组长度每次 len*2 ，也就是说每次长度不够后，数据搬移需要耗费的时间是随着长度增长而增长的。我们假设 k = 初始数组长度。那么，摊还分析法，如下：<br><br>第一次扩容前 ：O(1) ... O(1) O(k)<br>第二次扩容前 ：O(1) ... O(1) O(2k)<br>......<br>第N次扩容前  ：O(1) ... O(1) O(Nk)<br><br>其中，N=n&#47;k ,n表示插入的数据量<br>[(k-1)*1 + k + (k-1)*1 + 2k + ... + (k-1)*1 + n&#47;k * k ] &#47; n<br>= [(k-1)*n&#47;k + (1+2+...+n&#47;k)*k]&#47;n<br>= (k-1)&#47;k+{[(n&#47;k+1)n&#47;k]&#47;2}&#47;n<br>= (k-1)&#47;k + (n&#47;k+1)&#47;2k<br>= (k-1)&#47;k + n&#47;2k^2 + 1&#47;2k<br>= cn + b  (c,b为和k相关的常数）<br><br>欢迎批评指正！","like_count":0},{"had_liked":false,"id":299248,"user_name":"ripple","can_delete":false,"product_type":"c1","uid":1090051,"ip_address":"","ucode":"99008FD0533F68","user_header":"https://wx.qlogo.cn/mmopen/vi_32/ywSuwVNMKNjRLPMjZmpQOQHWW2usAu8RwRIOlBHaVVU6J3xHdtibgO6FVzYkRIkV50vCr62ia4OwJp07giabiazUGA/132","comment_is_top":false,"comment_ctime":1624528591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624528591","product_id":100017301,"comment_content":"本质上平均和均摊可以类似理解，说白了，为什么发明这两个词？因为用单纯的最好或者最坏，都不太好吧，毕竟，大部分时间都是O(1)级别，对数组操作来说，只有扩容的时候，才是O(n),譬如一共9个元素加入容量是8的数组，前八次都是1，最后一次是9，一共有9+8= 17次一定，17 &#47; 9 = 2,所以均摊下来就是o(1),之所以和平均区分开，是因为每个元素的插入操作，元素执行概率不是平均的，所以，不用平均复杂度","like_count":0},{"had_liked":false,"id":298176,"user_name":"_is妳","can_delete":false,"product_type":"c1","uid":2661519,"ip_address":"","ucode":"87796E9E5D412A","user_header":"https://static001.geekbang.org/account/avatar/00/28/9c/8f/05fe61ca.jpg","comment_is_top":false,"comment_ctime":1623934823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623934823","product_id":100017301,"comment_content":"懂了，再调用函数前count不一定是0了，count表示插入的位置，所以可能赋了新的值，count=0只是初始化而已","like_count":0},{"had_liked":false,"id":298173,"user_name":"_is妳","can_delete":false,"product_type":"c1","uid":2661519,"ip_address":"","ucode":"87796E9E5D412A","user_header":"https://static001.geekbang.org/account/avatar/00/28/9c/8f/05fe61ca.jpg","comment_is_top":false,"comment_ctime":1623934563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623934563","product_id":100017301,"comment_content":"<br> &#47;&#47; array表示一个长度为n的数组<br> &#47;&#47; 代码中的array.length就等于n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }对于这段代码，我看了很多遍，无论如何也想不通为什么是count==array.length,count=0所以要求array.lenth=0才会执行if后的语句，而array.length=0显然for的语句一次循环也不会执行。实在是看懵了，我记得length是返回实际长度，所以是不是if语句里面是count==(n-array.length).求老师解答","like_count":0},{"had_liked":false,"id":297744,"user_name":"Geek_e1351c","can_delete":false,"product_type":"c1","uid":2653514,"ip_address":"","ucode":"A55ECE5D9CCF08","user_header":"","comment_is_top":false,"comment_ctime":1623758126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623758126","product_id":100017301,"comment_content":"是否可以将均摊时间复杂度理解为概率差不多时，平均时间复杂度的简单估算？因为没必要对复杂度做出数理运算，毕竟它只反应时间和数据规模的关系。","like_count":0},{"had_liked":false,"id":297696,"user_name":"虎皮青椒","can_delete":false,"product_type":"c1","uid":1480559,"ip_address":"","ucode":"149A4D69AA5EA1","user_header":"https://static001.geekbang.org/account/avatar/00/16/97/6f/3853f003.jpg","comment_is_top":false,"comment_ctime":1623736848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623736848","product_id":100017301,"comment_content":"最好情况时间复杂度是O(1)。<br>最差情况时间复杂度是O(n)。<br>n * 1&#47;(n+1) + n&#47;(n+1) <br>平均情况时间复杂度是O(1)。<br>2n * 1&#47;(n+1)<br>均摊时间复杂度是O(1)。","like_count":0},{"had_liked":false,"id":297381,"user_name":"hhk","can_delete":false,"product_type":"c1","uid":1138826,"ip_address":"","ucode":"72EC677FBDC79B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gvfibNc3Bol6DzLMG5ia9wSLVYseoq326iae7TczmgmBj9u3Jwt8c0hl9KSzY4GNTFn0ic9m1ibzicqJ3aGzeQemec2Q/132","comment_is_top":false,"comment_ctime":1623491130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623491130","product_id":100017301,"comment_content":"老师, 再给我们科普一下 `P=NP?` 好不好? ","like_count":0},{"had_liked":false,"id":295788,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1413399,"ip_address":"","ucode":"FB3851E3A79C3B","user_header":"https://static001.geekbang.org/account/avatar/00/15/91/17/89c3d249.jpg","comment_is_top":false,"comment_ctime":1622599323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622599323","product_id":100017301,"comment_content":"思考题时间复杂度：O(1)类似于vector的push_back实现原理","like_count":0},{"had_liked":false,"id":295319,"user_name":"旭日东升","can_delete":false,"product_type":"c1","uid":2613454,"ip_address":"","ucode":"AA953C25A25D5C","user_header":"https://static001.geekbang.org/account/avatar/00/27/e0/ce/f25bd91d.jpg","comment_is_top":false,"comment_ctime":1622364609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622364609","product_id":100017301,"comment_content":"对于代码优化而言优化的最多的是对常量系数的优化还是对于O()的优化，这两者选择的的考量方向是什么样的？","like_count":0},{"had_liked":false,"id":295305,"user_name":"攻城狮","can_delete":false,"product_type":"c1","uid":1197444,"ip_address":"","ucode":"7D2C2836052C4C","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/84/4b309ba9.jpg","comment_is_top":false,"comment_ctime":1622358436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622358436","product_id":100017301,"comment_content":"老师，是否有练习题最终答案和解析啊","like_count":0},{"had_liked":false,"id":295293,"user_name":"小Y","can_delete":false,"product_type":"c1","uid":1739621,"ip_address":"","ucode":"24A43BB71805F8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8b/65/0f1f9a10.jpg","comment_is_top":false,"comment_ctime":1622350985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622350985","product_id":100017301,"comment_content":"俺也来。 应该 思考题的 最好时间复杂度是O(1)，最坏时间复杂度是O(n)，均摊复杂度是O(1)。","like_count":0},{"had_liked":false,"id":294463,"user_name":"吾爱有三","can_delete":false,"product_type":"c1","uid":2637176,"ip_address":"","ucode":"3FE9879632B1EF","user_header":"https://static001.geekbang.org/account/avatar/00/28/3d/78/432a91f9.jpg","comment_is_top":false,"comment_ctime":1621950947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621950947","product_id":100017301,"comment_content":"不同的地方。对于 insert() 函数来说，O(1) 时间复杂度的插入和 O(n) 时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。<br><br>老师，这个我看不懂","like_count":0},{"had_liked":false,"id":293991,"user_name":"dreamcasher","can_delete":false,"product_type":"c1","uid":2046980,"ip_address":"","ucode":"2AE26895FC191A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3c/04/398d2157.jpg","comment_is_top":false,"comment_ctime":1621672104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621672104","product_id":100017301,"comment_content":"练习题最小时间复杂度是O(1) 最大时间复杂度是O(n),平均时间复杂度是O(1),均摊时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":293961,"user_name":"学员238","can_delete":false,"product_type":"c1","uid":2559660,"ip_address":"","ucode":"6B03DDC5396B96","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/etH6FJOVI8KESjdCXHfVsEL8afknCvosLWz6EwFqo59G0xia8aibM8icSjpgJedibHQiamo24tSTq79rnNgWvuicpic0w/132","comment_is_top":false,"comment_ctime":1621651419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621651419","product_id":100017301,"comment_content":"非科班被数据结构困惑两年多了，听了老师的课后豁然开朗","like_count":0},{"had_liked":false,"id":293635,"user_name":"M.O(∩_∩)O","can_delete":false,"product_type":"c1","uid":1498641,"ip_address":"","ucode":"B245C2BA20DDA8","user_header":"https://static001.geekbang.org/account/avatar/00/16/de/11/72f96304.jpg","comment_is_top":false,"comment_ctime":1621473156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621473156","product_id":100017301,"comment_content":"最好是O(1)，最差是O(n), 均摊是O(1)。","like_count":0},{"had_liked":false,"id":292897,"user_name":"阿童木","can_delete":false,"product_type":"c1","uid":1433263,"ip_address":"","ucode":"C9749905797E55","user_header":"https://static001.geekbang.org/account/avatar/00/15/de/af/e97cab00.jpg","comment_is_top":false,"comment_ctime":1621061333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621061333","product_id":100017301,"comment_content":"最好：<br>i = 0，跳过判断，直接赋值，时间复杂度为O(1)<br>最坏：<br>i = n，进入判断，循环n次，时间复杂度为O(n)<br>平均：<br>在i &lt; n时，都可以认为是一个可数的数字，时间复杂度都是O(1)，i = n时，时间复杂度为O(n)，计算平均则是(1+1+1+...+n)&#47;(n+1) = 2n&#47;(n+1)，时间复杂度还是O(1)<br>加权平均（针对i已经变成n时）：<br>前n次的概率是1&#47;(n+1)，最后一次则是n&#47;(n+1)，则时间复杂度还是O(1)<br>均摊：<br>将最后一次的时间复杂度平摊到前面n次上，则还是O(1)<br><br>","like_count":0},{"had_liked":false,"id":292761,"user_name":"刘易宁","can_delete":false,"product_type":"c1","uid":1566569,"ip_address":"","ucode":"EE337683D08B9A","user_header":"https://static001.geekbang.org/account/avatar/00/17/e7/69/0c426b52.jpg","comment_is_top":false,"comment_ctime":1620967412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620967412","product_id":100017301,"comment_content":"总结：复杂度分析的四个方面：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度<br>     为什么要从这个几个方面分析复杂度：因为某些代码在不同的情况下，时间复杂度是不一样的","like_count":0},{"had_liked":false,"id":291602,"user_name":"落","can_delete":false,"product_type":"c1","uid":2275817,"ip_address":"","ucode":"79525752D3A1B1","user_header":"https://static001.geekbang.org/account/avatar/00/22/b9/e9/19cd7d9c.jpg","comment_is_top":false,"comment_ctime":1620378768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620378768","product_id":100017301,"comment_content":"最好时间复杂度：O(1)，最坏时间复杂度：O(n)，均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":291357,"user_name":"luna","can_delete":false,"product_type":"c1","uid":1085490,"ip_address":"","ucode":"CC6AB36C5A7378","user_header":"https://static001.geekbang.org/account/avatar/00/10/90/32/621a79c0.jpg","comment_is_top":false,"comment_ctime":1620225773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620225773","product_id":100017301,"comment_content":"练习题最好的情况是O（1），最坏情况还是O（n），均摊是O（1），纠结了好久len是常数，那最坏情况是不是也是O（1），拐了几个弯想到这里的n应该是2的k次方乘len","like_count":0},{"had_liked":false,"id":291232,"user_name":"E.die","can_delete":false,"product_type":"c1","uid":2524874,"ip_address":"","ucode":"BB5C221C66FA49","user_header":"https://static001.geekbang.org/account/avatar/00/26/86/ca/80cf4615.jpg","comment_is_top":false,"comment_ctime":1620132665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620132665","product_id":100017301,"comment_content":"最好时间复杂度：当数组空间足够，时间复杂度是O(1)<br>最差时间复杂度：当数据空间不够，需要经历一个循环，时间复杂度是O(n)。<br>计算平均复杂度，从均摊角度入手，该循环发生的情形是基于原数组已经被填满，假设原数组的大小为n，则循环发生的条件是n+1，在函数经历n&#47;(n+1)运行后，循环才会发生，因此平均时间复杂度为O(1)。<br>个人总结，首先看判断语句触发条件，如果容易触发。。。毫无疑问，以判断语句内的时间复杂度为主。。。如果不容易出发，就是以其他复杂度为主。","like_count":0},{"had_liked":false,"id":291181,"user_name":"Geek_694aed","can_delete":false,"product_type":"c1","uid":2574357,"ip_address":"","ucode":"E8BAE339FC99EC","user_header":"","comment_is_top":false,"comment_ctime":1620100148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620100148","product_id":100017301,"comment_content":"时间复杂度这块是不是还可以介绍一下主定理？","like_count":0},{"had_liked":false,"id":291180,"user_name":"敏","can_delete":false,"product_type":"c1","uid":1608307,"ip_address":"","ucode":"04EAA039553B98","user_header":"https://static001.geekbang.org/account/avatar/00/18/8a/73/e67f5eb8.jpg","comment_is_top":false,"comment_ctime":1620099934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620099934","product_id":100017301,"comment_content":"“首先，find() 函数在极端情况下，复杂度才为 O(1)”这句表述是不是有问题？，理想情况下是O(1),最糟糕情况下是O（n），这里的极端情况是指理想情况还是糟糕情况表述不明？","like_count":0},{"had_liked":false,"id":291173,"user_name":"Geek_694aed","can_delete":false,"product_type":"c1","uid":2574357,"ip_address":"","ucode":"E8BAE339FC99EC","user_header":"","comment_is_top":false,"comment_ctime":1620097558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620097558","product_id":100017301,"comment_content":"最好情况时间复杂度是：O(1)；最坏情况时间复杂度是：O(n)；平均情况时间复杂度是：O(1)；均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":290861,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1619791237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619791237","product_id":100017301,"comment_content":"都会了。留的题目中最好的时间复杂度是o(1)，最坏是o(n)，均摊后时间复杂度是o(1)","like_count":0},{"had_liked":false,"id":290839,"user_name":"焱","can_delete":false,"product_type":"c1","uid":1113301,"ip_address":"","ucode":"677BF1BE4B94D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/d5/1cf5fd56.jpg","comment_is_top":false,"comment_ctime":1619775807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619775807","product_id":100017301,"comment_content":"<br>&#47;&#47; 全局变量，大小为10的数组array，长度len，下标i。<br>int array[] = new int[10]; <br>int len = 10;<br>int i = 0;<br><br>&#47;&#47; 往数组中添加一个元素<br>void add(int element) {<br>   if (i &gt;= len) { &#47;&#47; 数组空间不够了<br>     &#47;&#47; 重新申请一个2倍大小的数组空间<br>     int new_array[] = new int[len*2];<br>     &#47;&#47; 把原来array数组中的数据依次copy到new_array<br>     for (int j = 0; j &lt; len; ++j) {<br>       new_array[j] = array[j];<br>     }<br>     &#47;&#47; new_array复制给array，array现在大小就是2倍len了<br>     array = new_array;<br>     len = 2 * len;<br>   }<br>   &#47;&#47; 将element放到下标为i的位置，下标i加一<br>   array[i] = element;<br>   ++i;<br>}<br><br>第一波数据小于10的时候最好是O（1) 最差是O（n),大于len后每次都要for循环，以len为界限，前面是O（1）后面是O(n)均摊起来是将较高时间复杂度那次操作的耗时（后面的），平摊到其他那些时间复杂度比较低的操作上（前面的）所以是O（1） ？<br><br>","like_count":0},{"had_liked":false,"id":290008,"user_name":"然而然而","can_delete":false,"product_type":"c1","uid":2529121,"ip_address":"","ucode":"311FAC0368FB57","user_header":"https://static001.geekbang.org/account/avatar/00/26/97/61/566bd475.jpg","comment_is_top":false,"comment_ctime":1619319856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619319856","product_id":100017301,"comment_content":"最好时间复杂度为O(1),即在if不满足的情况下，最差为O(n),即在n&gt;=len时，第一个清空数组，虽然只对第一个位置赋值，但是后边count=1就是对下标0后边的位置进行赋值了，其实就是相当于清空数组了","like_count":0},{"had_liked":false,"id":289818,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1619188022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619188022","product_id":100017301,"comment_content":"第三波：课后题<br>1、最好时间复杂度 就是直接给i索引赋值， 所以是 O(1)<br>2、最坏的情况就是正好是数组长度n，那么就需要扩容2n进行n次遍历迁移 O(n)<br>3、平均情况其实就是 每次都是 O(1) 有 n-1次，然后伴随一次 O(n)操作，那么就是 (2n-1)&#47;n，也就是O(1)<br>4、我觉得没有涉及到概率的带权平均情况，对于均摊来说是可以的，因为有 n-1 操作都是O(1),然后伴随一次 O(n)操作，那么可以把多的那个均摊到其他 n-1 次上面就是 n&#47;(n-1) = O(1)","like_count":0},{"had_liked":false,"id":289791,"user_name":"小马哥","can_delete":false,"product_type":"c1","uid":1358045,"ip_address":"","ucode":"B2C0FF38F8C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","comment_is_top":false,"comment_ctime":1619176018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619176018","product_id":100017301,"comment_content":"作业题答案: <br>1, 最好时间复杂度: O(1) -- 情况: 数组空间没满, 直接插入<br>2, 最坏时间复杂度: O(n) -- 情况: 数组空间已经满了, 扩容需要拷贝原始数组, 循环遍历数据n次<br>3, 平均时间复杂度: O(1) -- 计算方法: 最好与最坏的情况一共n+1种, 总共遍历的数据为1*n+n<br>4, 均摊时间复杂度: O(1) -- 计算方法: 摊还分析, 因为有时序, 低阶复杂度的情况为n次, 高阶复杂度的情况为1次, n次时间复杂度为1的均摊到高阶的时间n, 平均掉相当于常数 ","like_count":0},{"had_liked":false,"id":289522,"user_name":"卢克糖","can_delete":false,"product_type":"c1","uid":1897816,"ip_address":"","ucode":"8F3B1D8C2A1423","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f5/58/5c9ba9aa.jpg","comment_is_top":false,"comment_ctime":1619060777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619060777","product_id":100017301,"comment_content":"平均时间复杂度，也叫做加权平均时间复杂度。<br>均摊时间复杂度，可以看作是等概率的平均时间复杂度。","like_count":0},{"had_liked":false,"id":289142,"user_name":"佳辉","can_delete":false,"product_type":"c1","uid":2526065,"ip_address":"","ucode":"8886A1D47A9C18","user_header":"https://static001.geekbang.org/account/avatar/00/26/8b/71/dda6248f.jpg","comment_is_top":false,"comment_ctime":1618887758,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1618887758","product_id":100017301,"comment_content":"练习题：最好O(1)，最坏O(n)，平均O(1)，均摊O(1)","like_count":0},{"had_liked":false,"id":289016,"user_name":"chris","can_delete":false,"product_type":"c1","uid":2549659,"ip_address":"","ucode":"E1F3CB9A4E13A2","user_header":"https://static001.geekbang.org/account/avatar/00/26/e7/9b/a7980371.jpg","comment_is_top":false,"comment_ctime":1618821008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618821008","product_id":100017301,"comment_content":"1.最好情况数组有空，做插入操作，复杂度O(1);<br>2.最差情况数组没空，复杂度O(n);<br>3-1.平均复杂度：1+1+1+...+1+n-&gt;2n&#47;(n+1)，去掉系数，复杂度为O(1);<br>3-2.加权平均复杂度：1* 1&#47;(n+1) + 1* 1&#47;(n+1) + 1* 1&#47;(n+1) + ... + 1 * 1&#47;(n+1) + n * 1&#47;(n+1) = 2n&#47;(n+1)，去掉系统，复杂度为O(1);<br>4.均摊事件复杂度（摊还分析）：每次执行O(n)次，前面都有n次O(1)，总体来说，O(1)执行的比O(n)执行的次数要多的多，是前后连贯的，因此将复杂的O(n)平摊到简单的前n次(1)中，得到平摊复杂度是O(1);","like_count":0},{"had_liked":false,"id":289012,"user_name":"chris","can_delete":false,"product_type":"c1","uid":2549659,"ip_address":"","ucode":"E1F3CB9A4E13A2","user_header":"https://static001.geekbang.org/account/avatar/00/26/e7/9b/a7980371.jpg","comment_is_top":false,"comment_ctime":1618819783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618819783","product_id":100017301,"comment_content":"1.最好的情况是，数组有空，不用循环，i&lt;n，复杂度O(1);<br>2.最坏情况，数组没空，新建扩容2倍数组，循环n次，i=n，复杂度O(n);<br>3.平均复杂度：1+1+1+...+1+n = ","like_count":0},{"had_liked":false,"id":288708,"user_name":"yang","can_delete":false,"product_type":"c1","uid":1940562,"ip_address":"","ucode":"67C86E09BA6E4B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9c/52/dc770378.jpg","comment_is_top":false,"comment_ctime":1618633524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618633524","product_id":100017301,"comment_content":"课后题正好是摊环时间复杂度分析，对吗？均摊时间复杂度为O(1),每当i&gt;len时，就来一波O(n)的加长数组长度的操作。","like_count":0},{"had_liked":false,"id":287438,"user_name":"Geek_bethel","can_delete":false,"product_type":"c1","uid":2541943,"ip_address":"","ucode":"C6313699A95B02","user_header":"https://static001.geekbang.org/account/avatar/00/26/c9/77/bf372419.jpg","comment_is_top":false,"comment_ctime":1617951002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617951002","product_id":100017301,"comment_content":"思考题：<br>最理想的情况下，数组中有空闲空间，只需要将数据插入到数组下标为 i 的位置就可以了，所以最好情况时间复杂度为 O(1)。<br>最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组扩容，再把原来数组中的数据依次复制到新数组，最后再将数据插入，所以最坏情况时间复杂度为 O(n)。<br><br>均摊分析的思路：<br>每一次 O(n) 的插入操作「数组中没有空闲空间了，扩容，遍历复制」，都会跟着 n-1 次 O(1) 的插入操作「数组中有空闲空间，直接插入」，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。","like_count":0},{"had_liked":false,"id":287110,"user_name":"孙思强","can_delete":false,"product_type":"c1","uid":1813790,"ip_address":"","ucode":"6E3F01DDFC1310","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ad/1e/aeb8d6f3.jpg","comment_is_top":false,"comment_ctime":1617780049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617780049","product_id":100017301,"comment_content":"最好时间复杂度为O1，最差时间复杂度为On，平均时间复杂度O1，均摊为O1","like_count":0},{"had_liked":false,"id":286619,"user_name":"hhk","can_delete":false,"product_type":"c1","uid":1138826,"ip_address":"","ucode":"72EC677FBDC79B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gvfibNc3Bol6DzLMG5ia9wSLVYseoq326iae7TczmgmBj9u3Jwt8c0hl9KSzY4GNTFn0ic9m1ibzicqJ3aGzeQemec2Q/132","comment_is_top":false,"comment_ctime":1617432143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617432143","product_id":100017301,"comment_content":"# 04 | 复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度<br><br>同一段代码, 在不同输入的情况下, 复杂度量级有可能不一样<br><br>所以增加以下概念对算法的时间复杂度进一步细分:<br><br>- best case time complexity, 最好情况时间复杂度<br>- worst case time complexity, 最坏情况时间复杂度<br>- average case time complexity, 平均情况时间复杂度<br>- amortized time complexity, 均摊时间复杂度<br><br>best case 和 worst case 很好理解, 平均和均摊要费点功夫<br><br>### 平均情况时间复杂度<br><br>就是求时间复杂度的期望值(expected value), 需要考虑事情发生的概率<br><br>```c<br>&#47;&#47; n表示数组array的长度<br>int find(int[] array, int n, int x) {<br>  int i = 0;<br>  int pos = -1;<br>  for (; i &lt; n; ++i) {<br>    if (array[i] == x) {<br>       pos = i;<br>       break;<br>    }<br>  }<br>  return pos;<br>}<br>```<br><br>比如上面这段在数组中找某个元素的代码<br><br>最好的情况, 第一个就找到了, 那复杂度就是O(1)<br><br>最坏的情况, 全部遍历一遍发现目标不在数组里, 那复杂度就是O(n)<br><br>平均情况, 目标元素在数组中的概率是1&#47;2; 假设目标元素在数组, 则在每个位置上的概率都是1&#47;n, 所以期望值就是:<br><br>```<br>不在数组: (1&#47;2) * n (概率是1&#47;2, 要遍历n次)<br>在数组: <br>1&#47;2 * (1*1&#47;n + 2*1&#47;n + 3*1&#47;n ... + n*1&#47;n) <br>= 1&#47;2 * 1&#47;n * (1+2+3+...+n)<br>= 1&#47;2n * (1+n)n&#47;2<br>= (n+1)&#47;4<br><br>期望值就等于上面两种情况相加:<br>n&#47;2 + (n+1)&#47;4 = (3n+1)&#47;4<br><br>O((3n+1)&#47;4) = O(n)<br>```<br><br><br><br>### 均摊时间复杂度<br><br>用一种均摊的思想来求平均时间复杂度 (均摊时间复杂度就是一种特殊的平均时间复杂度)<br><br>```c<br> &#47;&#47; array表示一个长度为n的数组<br> &#47;&#47; 代码中的array.length就等于n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }<br>```<br><br>比如上面这段代码, 如果count变量等于数组长度, 它就要要循环这个数组求和然后再插入, 复杂度是O(n); 其他情况, 直接插入,复杂度是O(1)<br><br>可以发现, 每次count == arrray.length 以后, count 都会重置为1, 所以这个过程是会循环往复的. 那么可以把O(n)的那次插入的操作时间, 都平摊其他到O(1)的操作上, 这样, 就可以认为这个算法的平均时间复杂度是O(1)的<br><br>.... 不准评论这么多字....<br>https:&#47;&#47;github.com&#47;acfasj&#47;blog&#47;issues&#47;2#issuecomment-812822145<br><br>","like_count":0},{"had_liked":false,"id":285175,"user_name":"Ron","can_delete":false,"product_type":"c1","uid":1159044,"ip_address":"","ucode":"EE78756918FA0A","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/84/c65b43fb.jpg","comment_is_top":false,"comment_ctime":1616656814,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616656814","product_id":100017301,"comment_content":"最好时间复杂度：O(1) <br>最坏时间复杂度：O(n) <br>平均时间复杂度：O(1) <br>均摊时间复杂度：O(1) <br>","like_count":0},{"had_liked":false,"id":285005,"user_name":"AL6","can_delete":false,"product_type":"c1","uid":2109691,"ip_address":"","ucode":"5FD7568234AE80","user_header":"https://static001.geekbang.org/account/avatar/00/20/30/fb/e9b00378.jpg","comment_is_top":false,"comment_ctime":1616576094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616576094","product_id":100017301,"comment_content":"最好是O(1)，最差是O(n),平均是O(1),,均摊是O(1)。均摊是特殊的平均，在于大部分情况下的复杂度相差不大，只有少部分的复杂度差异较大，尝试是否能将这部分的复杂度分摊到其他情况下，来达到一个平均的复杂度。因此均摊复杂度一般为最好复杂度","like_count":0},{"had_liked":false,"id":284966,"user_name":"敲代码的老王","can_delete":false,"product_type":"c1","uid":1042444,"ip_address":"","ucode":"B641FB945F0C04","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/0c/870d2de4.jpg","comment_is_top":false,"comment_ctime":1616564177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616564177","product_id":100017301,"comment_content":"时间、空间复杂度分析：<br><br><br>为什么通过把代码跑一遍，通过统计、监控看算法执行的时间、内存占用的大小有很大的局限性？<br><br>1、测试结果非常依赖测试环境：i9跟i3的结果肯定不一样；<br>2、测试结果受数据规模的影响很大：不同的数据结果也不一样；<br><br>时间复杂度分析方法：<br><br>1、只关注循环执行次数最多的一段代码；<br>2、加法法则：总复杂度等于量级最大的那段代码的复杂度；<br>3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。<br><br><br>￼<br><br>T(n) = O(f(n))<br><br>公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。<br><br><br>公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。<br><br><br><br><br><br><br>几种常见的复杂度：<br><br>O(1)：一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)；<br>O(n)、O(logn)、O(nlogn)、O(m+n)、O(m*n)<br><br><br><br><br><br>四个复杂度分析方面的知识点，最好情况时间复杂度（best case time complexity）、最坏情况时间复杂度（worst case time complexity）、加权平均情况时间复杂度（average case time complexity）、均摊时间复杂度（amortized time complexity）。<br><br><br><br>均摊时间复杂度：<br>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。<br><br><br><br>&#47;&#47; 均摊时间复杂度的一个例子<br> &#47;&#47; array表示一个长度为n的数组<br> &#47;&#47; 代码中的array.length就等于n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }<br><br><br>","like_count":0},{"had_liked":false,"id":284948,"user_name":"当明天来临时","can_delete":false,"product_type":"c1","uid":2331496,"ip_address":"","ucode":"841B6649AE2294","user_header":"https://static001.geekbang.org/account/avatar/00/23/93/68/3928c6f3.jpg","comment_is_top":false,"comment_ctime":1616555980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616555980","product_id":100017301,"comment_content":"练习题：最好是O(1),最坏O(n),均摊O(1)<br><br>大部分是O(1)，只有扩容时是O(n)。且数组下标是逐步增大，当等于数组大小时扩容，扩容后紧接着又是插入数据O(1)，具有前后时序关系，故采用平摊分析法。","like_count":0},{"had_liked":false,"id":284637,"user_name":"keep","can_delete":false,"product_type":"c1","uid":2225566,"ip_address":"","ucode":"9764E27CA40944","user_header":"","comment_is_top":false,"comment_ctime":1616399164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616399164","product_id":100017301,"comment_content":"思考题我算出来是log(n)&#47;n...............","like_count":0},{"had_liked":false,"id":284433,"user_name":"Abner","can_delete":false,"product_type":"c1","uid":2528491,"ip_address":"","ucode":"F880BC555F5D44","user_header":"https://static001.geekbang.org/account/avatar/00/26/94/eb/7d7de4bf.jpg","comment_is_top":false,"comment_ctime":1616247449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616247449","product_id":100017301,"comment_content":"代码理解为数组自动扩容：<br><br>- 当数组空间有空余的情况；时间复杂度为O（1）【最好时间复杂度 】<br>- 当数据空间不够时，将旧数组中数据，复制到新数组中的操作；即时间复杂度为：O（n）【最坏情况时间复杂度 】<br>- 每次的O（n）的扩容可以平摊到2n次的O（1）【2n:扩容前n次，扩容后n次】：即时间复杂度为O（1）","like_count":0},{"had_liked":false,"id":284346,"user_name":"lyng","can_delete":false,"product_type":"c1","uid":2173024,"ip_address":"","ucode":"4FCBDFD59DA3F2","user_header":"https://static001.geekbang.org/account/avatar/00/21/28/60/518d9a42.jpg","comment_is_top":false,"comment_ctime":1616204962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616204962","product_id":100017301,"comment_content":"定义：数组初始空间为n = 10<br>操作：往数组里面添加元素，数组已满时将数组空间扩容为2n<br>分析：<br>第一种情况：数组有空位置，此时可以直接将元素添加到数组中，代码执行一次，所以时间复杂度为O(1)<br>第二种情况：数组已满，此时需要将数组扩容为2n，并将原数组中n个元素添加到扩容数组中，n个元素需要执行n次，因此时间复杂度为O(n)<br>最好时间复杂度：即数组中有空位置，因此时间复杂度为O(1)<br>最坏时间复杂度：即数组已满，需要扩容数组，因此时间复杂度为O(n)<br><br>平均时间复杂度：往数组中添加元素有 n+1 种可能，即在数组中1~n的位置和需要扩容数组 n+1 的位置；<br>1.在数组中：因为每个位置的添加元素只需要执行一次，出现在该位置的概率为 1&#47;（n+1），因为有n个元素，所以将其相加：1&#47;（n+1）+1&#47;（n+1）+……+1&#47;（n+1）；<br>2.扩容数组：n * 1&#47;(n+1)  <br>3.所以平均时间复杂度为：1&#47;（n+1）+1&#47;（n+1）+……+1&#47;(n+1)+n * 1&#47;(n+1) = O(1)<br><br>均摊时间复杂度：每出现一次O(n)的时间复杂度，后面就会跟着n-1次O(1)时间复杂度的操作，所以均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":283936,"user_name":"小quququ蛐","can_delete":false,"product_type":"c1","uid":2526250,"ip_address":"","ucode":"DD69B13BEF3CC1","user_header":"https://static001.geekbang.org/account/avatar/00/26/8c/2a/1af8e067.jpg","comment_is_top":false,"comment_ctime":1615988800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615988800","product_id":100017301,"comment_content":"老师好，练习题的那个我怎么没有看懂啊，最差情况的O(n)是怎么来的啊？它数组的长度最大不是20吗，为什么会出现n呀？我好疑惑","like_count":0},{"had_liked":false,"id":283920,"user_name":"华子","can_delete":false,"product_type":"c1","uid":1399982,"ip_address":"","ucode":"2E839C28441B36","user_header":"https://static001.geekbang.org/account/avatar/00/15/5c/ae/9493229e.jpg","comment_is_top":false,"comment_ctime":1615983893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615983893","product_id":100017301,"comment_content":"最好时间复杂度为 O(1)，最坏时间复杂度为 O(n),均摊时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":283894,"user_name":"到道可道","can_delete":false,"product_type":"c1","uid":1031181,"ip_address":"","ucode":"12B94B6C26BE0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/0d/00424e81.jpg","comment_is_top":false,"comment_ctime":1615973700,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1615973700","product_id":100017301,"comment_content":"采用均摊分析法，add方法的时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":283382,"user_name":"Geek_8866d4","can_delete":false,"product_type":"c1","uid":2435064,"ip_address":"","ucode":"34EAED72C2FAD0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ia5NFICdEuzaQ8Vib0depvkB6UmxPBFib51aClSJYfCIa7tn2nXauddwxDvbxYuQ9UeRGVICLfTtDJysnDJ5EfQcg/132","comment_is_top":false,"comment_ctime":1615736619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615736619","product_id":100017301,"comment_content":"老师，我怎么觉得时间复杂度都是O(1)呢，因为函数的计算时间的趋势，并不依赖于element这个输入","like_count":0},{"had_liked":false,"id":283369,"user_name":"你好，阳光","can_delete":false,"product_type":"c1","uid":2145095,"ip_address":"","ucode":"1A2F487C57F7D9","user_header":"https://static001.geekbang.org/account/avatar/00/20/bb/47/b60ae3eb.jpg","comment_is_top":false,"comment_ctime":1615730790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615730790","product_id":100017301,"comment_content":"最好时间复杂度是O(1)，最坏是O(n)，平均和均摊是O(1)","like_count":0},{"had_liked":false,"id":283248,"user_name":"阿衡","can_delete":false,"product_type":"c1","uid":1107347,"ip_address":"","ucode":"074EB56AAB3B4A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/93/2e51d44a.jpg","comment_is_top":false,"comment_ctime":1615643293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615643293","product_id":100017301,"comment_content":"一直搞不懂复杂度分析这个概念，看了这一篇，懂了一点。","like_count":0},{"had_liked":false,"id":283058,"user_name":"Geek_d78bd5","can_delete":false,"product_type":"c1","uid":2463396,"ip_address":"","ucode":"CEFEF90DC9A84C","user_header":"","comment_is_top":false,"comment_ctime":1615533340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615533340","product_id":100017301,"comment_content":"老师讲的也很好，关于练习题我是这样考虑的：最小肯定是数组有空间，那么是最小复杂度O(1), 最大的是没有空间，需要扩大1倍，需要变量之间放的所有数到新数组中，所以最大复杂度。均摊是将最大分配到每个操作上，所以均摊是O(1)","like_count":0},{"had_liked":false,"id":282943,"user_name":"RoccoLee","can_delete":false,"product_type":"c1","uid":2508667,"ip_address":"","ucode":"C55AD67FF8C2D7","user_header":"https://static001.geekbang.org/account/avatar/00/26/47/7b/c5ec018c.jpg","comment_is_top":false,"comment_ctime":1615471193,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615471193","product_id":100017301,"comment_content":"add函数，在数组没有空闲的情况下，O(1)的复杂度；在没有空闲的情况下，需要O(n)元素的拷贝。每次进行O(n)添加后，进行n次O(1)添加，故将O(n)摊还到n次O(1),均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":282586,"user_name":"isandwind","can_delete":false,"product_type":"c1","uid":1048113,"ip_address":"","ucode":"E8C0AD4FCEE0F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/31/937238cd.jpg","comment_is_top":false,"comment_ctime":1615310658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615310658","product_id":100017301,"comment_content":"最后老师的课后思考，这个题目也是一个均摊复杂度分析，平均复杂度是O(1),最好时间复杂度是O(1)，最坏时间复杂度是O(n)","like_count":0},{"had_liked":false,"id":282564,"user_name":"terrytian","can_delete":false,"product_type":"c1","uid":1235217,"ip_address":"","ucode":"04FA907AEA16AF","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/11/f180f34a.jpg","comment_is_top":false,"comment_ctime":1615302061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615302061","product_id":100017301,"comment_content":"最好是O(1)，最差是O(n), 均摊是O(1)。","like_count":0},{"had_liked":false,"id":282368,"user_name":"米饭噗噗","can_delete":false,"product_type":"c1","uid":1902239,"ip_address":"","ucode":"9E7AECF01CE84C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/9f/5a6e5f17.jpg","comment_is_top":false,"comment_ctime":1615207499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615207499","product_id":100017301,"comment_content":"练习题的均摊时间复杂度是O(1)，最好时间复杂度是O(1)，最坏时间复杂度是O(n)<br>老师的均摊时间复杂度讲的很好，不过仔细一想场景也确实少见，需要连续的相同的时间复杂度，理解过后练习题的均摊时间复杂度就能很快的算出来了。<br>现在也养成了每节课学习完之后发评论以及自己发博客的学习习惯，相信慢慢坚持会有好结果的。","like_count":0},{"had_liked":false,"id":282361,"user_name":"GeekErvin","can_delete":false,"product_type":"c1","uid":2475742,"ip_address":"","ucode":"32EF9769BB903D","user_header":"","comment_is_top":false,"comment_ctime":1615206545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615206545","product_id":100017301,"comment_content":"这里面其实有个问题，对于这个for循环本身而言，它的循环次数其实是固定的（len=10），所以复杂度就是O(1)吧？为什么是O(n)","like_count":0},{"had_liked":false,"id":282343,"user_name":"Geek_9861c5","can_delete":false,"product_type":"c1","uid":2480363,"ip_address":"","ucode":"7724D728FD85B5","user_header":"","comment_is_top":false,"comment_ctime":1615201868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615201868","product_id":100017301,"comment_content":"既然不用分析最好最坏和平均复杂度，那在现实情况下 我们分析代码一般使用那种复杂度去分析呢？","like_count":0},{"had_liked":false,"id":282274,"user_name":"OldFriend","can_delete":false,"product_type":"c1","uid":2464744,"ip_address":"","ucode":"33B88002F684C5","user_header":"https://static001.geekbang.org/account/avatar/00/25/9b/e8/4f0173ef.jpg","comment_is_top":false,"comment_ctime":1615183299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615183299","product_id":100017301,"comment_content":"个人笔记：最好比较好想。最坏就需要考虑最差的情况，比如思考题，当你调用add时，i的值不确定，那自然就是n。比如n=10，此时就要执行一次循环，也就是一个10的循环，10又是此时的n，以此类推，自然就是O（n）。当你思考最坏情况做类推时，你自然就把需要均摊的情况考虑了，然后一均摊，自然也就有均摊复杂度了。而期望就需要想，要么是1、2、3等这种不需要拓展数组的，要么是10、20、30这种需要推展的，概率大家都一样，都是1&#47;n，那么1、2、3这种乘完1&#47;n，最终加起来就是1。而10、20、30这种，遇到了就是n乘1&#47;n，自然也是1，这就是O（1）。先这么写吧，想把感觉描述出来，有些拗口，后面实践中，遇到一个就花一分钟思考一下各种复杂度，自然就固化了","like_count":0},{"had_liked":false,"id":281815,"user_name":"致良知","can_delete":false,"product_type":"c1","uid":2113915,"ip_address":"","ucode":"73C722E31B726A","user_header":"https://static001.geekbang.org/account/avatar/00/20/41/7b/cda2e622.jpg","comment_is_top":false,"comment_ctime":1614911631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614911631","product_id":100017301,"comment_content":"第一个加权时间复杂度 + n *1&#47;2   为什么","like_count":0},{"had_liked":false,"id":281301,"user_name":"十七","can_delete":false,"product_type":"c1","uid":2061208,"ip_address":"","ucode":"038F8EBFA8D2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1f/73/98/60f8d766.jpg","comment_is_top":false,"comment_ctime":1614681892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614681892","product_id":100017301,"comment_content":"最好情况：O(1); 最差情况：O(n); 平均情况：O(1)； 均摊情况：O(1)","like_count":0},{"had_liked":false,"id":280964,"user_name":"Geek_Myrcella_M","can_delete":false,"product_type":"c1","uid":1652853,"ip_address":"","ucode":"37FC8714AC6166","user_header":"","comment_is_top":false,"comment_ctime":1614505024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614505024","product_id":100017301,"comment_content":"老师，没看懂你在“平均情况时间复杂度”这里举的例子：(1+2+3...+(n-1)+n) &#47; (n+1)为啥会等于n(n+3) &#47; 2(n+1)呢？？","like_count":0},{"had_liked":false,"id":280762,"user_name":"songYH","can_delete":false,"product_type":"c1","uid":2382651,"ip_address":"","ucode":"ABB2C4D2518840","user_header":"https://static001.geekbang.org/account/avatar/00/24/5b/3b/397214f2.jpg","comment_is_top":false,"comment_ctime":1614350354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614350354","product_id":100017301,"comment_content":"最好时间复杂度O(1)，最坏时间复杂度O(n)，平均、均摊时间复杂度O(1)","like_count":0},{"had_liked":false,"id":280191,"user_name":"陈威洋","can_delete":false,"product_type":"c1","uid":2264679,"ip_address":"","ucode":"DCF84B4D3A7354","user_header":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","comment_is_top":false,"comment_ctime":1614130334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614130334","product_id":100017301,"comment_content":"看完了所有的答案，答案就不想说哈，想锻炼一下自己对作业的代码打比方的能力：老王是卖鸡蛋的，他买了一箱鸡蛋，想从这箱鸡蛋中挑出好的放在鸡蛋套（假如一个鸡蛋套可以放10颗鸡蛋），然后高价卖出，他开始拿了一个鸡蛋套，开始挑了鸡蛋，一个一个的放在鸡蛋套，当鸡蛋套放满了（10个满了），他便拿出新的鸡蛋套继续存放，超过10个，便又拿出新的鸡蛋套...<br><br>鸡蛋套就是数据结构<br>老王就是算法","like_count":0},{"had_liked":false,"id":280020,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614055663,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614055663","product_id":100017301,"comment_content":"茶艺师学编程：<br><br>我看了一下留言，看到大伙算平均复杂度都是O(1),我还不理解这是为啥，请问是为什么吗？","like_count":0},{"had_liked":false,"id":280019,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614055466,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614055466","product_id":100017301,"comment_content":"茶艺师学编程<br><br>该刷新的知识点：<br>1、最好、最坏、平均比较少用，均摊更少用<br>2、算平均复杂度是要用上概率论，因为它的真名为加权平均时间复杂度，而均摊复杂度就是这样的简便操作，因此它是“特殊的平均复杂度”，而值一般就是最好复杂度<br><br>作业：<br>来小试牛刀了。add的时间复杂度是O（n）。<br>往细点说的话，<br>最好的情况：这数组本身就空的，新元素直接放进去，这是O(1)<br>最坏的情况：数组是满的，要复制一次，复制就要耗掉O(n），总的花销也是O(n)<br>平均的情况：约莫算一下，空数组的1&#47;2 + 满数组要复制的1&#47;2 O(n), 这样下来，应该还是O(n)<br>均摊复杂度：O(1)","like_count":0},{"had_liked":false,"id":279139,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1613634552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613634552","product_id":100017301,"comment_content":"练习题是最好时间复杂度O(1), 因为可能不扩充数组, 最差是O(n), 因为可能扩充数组, 平均是O(1)? 我不清楚了, 我以为是O(logn)","like_count":0},{"had_liked":false,"id":279016,"user_name":"莫小鹏","can_delete":false,"product_type":"c1","uid":1158881,"ip_address":"","ucode":"0EE0654FD0FB85","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/e1/78701ecf.jpg","comment_is_top":false,"comment_ctime":1613547207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613547207","product_id":100017301,"comment_content":"均摊是O（1），在数组有空间的时候，直接插入，算法复杂度是O（1），在没有空间的时候，申请新空间，复制数据，算法复杂读是O（n）， 均摊分析是把这部分操作均摊到n次操作中，一组操作均摊下来的时间复杂度是O（1）","like_count":0},{"had_liked":false,"id":278974,"user_name":"初心不变","can_delete":false,"product_type":"c1","uid":2426517,"ip_address":"","ucode":"B84062A24FB0F7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/u4OemUpkKSvWIo55u5MfCTLXSyxfdxSD2Rc1dXYN9OnHhHKfavQw08BvryebtWZ04z4q2VVbCnNawH1eGrtnYA/132","comment_is_top":false,"comment_ctime":1613497872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613497872","product_id":100017301,"comment_content":"当i小于len的时候，时间复杂度是O(1)，i大于等于len的时候，时间复杂度是O(n)，每一次O(n)的操作都会跟随n-1次的O(1)操作，所以用均摊时间复杂度表示是O(1)","like_count":0},{"had_liked":false,"id":278506,"user_name":"陈峯","can_delete":false,"product_type":"c1","uid":2414165,"ip_address":"","ucode":"7337EB89B92E99","user_header":"https://static001.geekbang.org/account/avatar/00/24/d6/55/7031ebdc.jpg","comment_is_top":false,"comment_ctime":1612999227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612999227","product_id":100017301,"comment_content":"数组长度为n，当i&lt;n时，时间复杂度为O(1),反之，则为O(n). 即存在n+1种情况，之前n种情况复杂度都是O(1),最后一种是O(n),且以先后顺序出现。<br>所以最好复杂度：O(1)<br>最坏复杂度:O(n)<br>平均复杂度:O(1)<br>均摊复杂度:O(1)","like_count":0},{"had_liked":false,"id":278324,"user_name":"Wjx","can_delete":false,"product_type":"c1","uid":2429578,"ip_address":"","ucode":"DAA37E00FD62D7","user_header":"https://static001.geekbang.org/account/avatar/00/25/12/8a/55426ec5.jpg","comment_is_top":false,"comment_ctime":1612880789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612880789","product_id":100017301,"comment_content":"练习题<br>数组长是10<br>程序没有出现n<br>如果循环n次调用add函数<br>最好是O(1)<br>最差是O(2^n)<br>平均是O(2^n)<br>均摊不适合<br> ","like_count":0},{"had_liked":false,"id":278263,"user_name":"八九","can_delete":false,"product_type":"c1","uid":1191617,"ip_address":"","ucode":"B996A884BFA474","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/c1/0fcd29ab.jpg","comment_is_top":false,"comment_ctime":1612850677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612850677","product_id":100017301,"comment_content":"总结：<br>1.最好时间复杂度：遍历数组找元素，第一个位置就找到。<br>2.最坏时间复杂度：遍历数组找元素，到最后位置才找到或到最后也没找到。<br>3.平均时间复杂度：<br>要查找的变量x在数组中的位置，有n+1种情况：在数组的 0～n-1 位置中和不在数组中。<br>把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，<br>\t即：1+2+3+...+n+n&#47;n+1 =n(1+n)&#47;2+n &#47; n+1\t#后面的+n代表的是不在数组时的情况。<br>\t    =n(1+n)+2n&#47;2(n+1)<br>\t\t=n+n^2+2n&#47;2(n+1)<br>\t\t=n^2+3n&#47;2(n+1)<br>\t\t=n(n+3)&#47;2(n+1)\t    <br>\t时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以把这个公式简化之后，得到的平均时间复杂度就是 O(n)。<br>\t<br>上面的推导过程中没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去<br>假设：在数组中与不在数组中的概率都为 1&#47;2。要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1&#47;n。<br>所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1&#47;(2n)。那平均时间复杂度的计算过程就变成了<br>\t即：1*1&#47;2n +2*1&#47;2n +3*1&#47;2n +...+n*1&#47;2n +n*1&#47;2\t#遍历次数*对应情况的概率，后面的n*1&#47;2代表的是不在数组时的情况。<br>\t\t=1+2+3+...+n&#47;2n + n&#47;2<br>\t\t=n(1+n)&#47;2 &#47;2n +n&#47;2<br>\t\t=n(1+n)&#47;4n +n&#47;2<br>\t\t=1+n&#47;4 +n&#47;2<br>\t\t=1+n&#47;4 + 2n&#47;4<br>\t\t=3n+1&#47;4\t\t\t\t\t\t\t\t\t\t<br>\t这个值就是概率论中的加权平均值，也叫作期望值，所以平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度。<br>\t引入概率之后，上面的加权平均值为 (3n+1)&#47;4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。<br><br>实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。很多时候，我们使用一个复杂度就可以满足需求了。<br>只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。<br><br>4.均摊时间复杂度(摊还分析法)：均摊时间复杂度就是一种特殊的平均时间复杂度，具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度。<br>拿成绩举例：99个人100分，1个人0分，拿99个人的成绩每人均摊一分，100分均摊后成绩为99分，0分的人均摊后成绩为99分。（评论区-致良知）<br><br>计算等差数列的求和公式： n(1+n)&#47;2<br>概率乘法法则：（笔记-bula燕京）<br>乘法原理又称分步计数原理：做一件事，完成它需要分成n个步骤，做第一步有m1种不同的方法，做第二步有m2种不同的方法，……，做第n步有mn种不同的方法，那么完成这件事共有N＝m1×m2×m3×…×mn种不同的方法。<br>乘法原理中的每一步都不能独立完成任务，且各步都不可缺少，需要依次完成所有步骤才能完成一个独立事件，只有满足这个条件，才能用乘法原理。每次事件都是独立的互不影响，就用加法原理。<br><br>感谢老师及各位小伙伴！","like_count":0},{"had_liked":false,"id":278055,"user_name":"王建峰","can_delete":false,"product_type":"c1","uid":1968013,"ip_address":"","ucode":"8BF1AEFFA7EA5F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/07/8d/3e76560f.jpg","comment_is_top":false,"comment_ctime":1612742677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612742677","product_id":100017301,"comment_content":"add函数的时间复杂度O(1)吧，因为在函数内len是一个常量","like_count":0},{"had_liked":false,"id":277916,"user_name":"西瓜👑 이 붕","can_delete":false,"product_type":"c1","uid":2284896,"ip_address":"","ucode":"78625262EF2B0A","user_header":"https://static001.geekbang.org/account/avatar/00/22/dd/60/6551e734.jpg","comment_is_top":false,"comment_ctime":1612668628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612668628","product_id":100017301,"comment_content":"最好复杂度是不超标，直接赋值，O(1),最坏是全部循环赋值一遍O(n),平均复杂度是O(1),需要计算推导","like_count":0},{"had_liked":false,"id":277214,"user_name":"Jeremy","can_delete":false,"product_type":"c1","uid":1245507,"ip_address":"","ucode":"93882376F5DC6C","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/43/44255fb5.jpg","comment_is_top":false,"comment_ctime":1612317767,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612317767","product_id":100017301,"comment_content":"最好时间复杂度：O(1)<br>最坏时间复杂度：O(n)<br>平均时间复杂度：O(1)<br>均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":274883,"user_name":"Ting.","can_delete":false,"product_type":"c1","uid":1016882,"ip_address":"","ucode":"9C424A538F7B56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/32/f84d9ca5.jpg","comment_is_top":false,"comment_ctime":1611207318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611207318","product_id":100017301,"comment_content":"数学学得好真的很沾光啊！","like_count":0},{"had_liked":false,"id":274871,"user_name":"Fiona L.","can_delete":false,"product_type":"c1","uid":2419568,"ip_address":"","ucode":"FF47ECC5B54343","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/80jjicmX848PjqYj207rHyDHSr1vhSqKSDCu13OPfZLKCWwz6B6EIore94OyEgXaj1XqVicDqeuPicibT0YQziaJyRA/132","comment_is_top":false,"comment_ctime":1611200879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611200879","product_id":100017301,"comment_content":"老师，我商科转码的菜鸟，这几个月在学JAVA，碰巧之前就下载了《大话数据结构》，《算法图解》在看，又被校友推荐来买你这门课跟着学，可是我发现这两本书都不是JAVA啊，我最近还在恶补Head first-Java的知识点，有什么好的建议给我呢？我这学期上研究生有算法课，上你的课就是为了快点补基础再刷Leetcode，感谢了","like_count":0},{"had_liked":false,"id":274339,"user_name":"包包大人","can_delete":false,"product_type":"c1","uid":2415185,"ip_address":"","ucode":"408A04F2D2FC87","user_header":"https://static001.geekbang.org/account/avatar/00/24/da/51/fab0fa33.jpg","comment_is_top":false,"comment_ctime":1610971487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610971487","product_id":100017301,"comment_content":"最好是O(1)，最坏是O(n)，平均均摊是O(1)。","like_count":0},{"had_liked":false,"id":274283,"user_name":"小龙","can_delete":false,"product_type":"c1","uid":1161254,"ip_address":"","ucode":"521B8CF8F7D9F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/26/f1eca57b.jpg","comment_is_top":false,"comment_ctime":1610953271,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610953271","product_id":100017301,"comment_content":"首先根据初始值i与数组长度len可知，i &lt; en时并不会执行循环语句，只是一个赋值过程，此时的时间复杂度为O(1)，当i &gt;= len时会进入条件语句，此时会执行for循环，但循环之后数组长度扩充一倍，即只有i == len时时间复杂度为O(n)。即：最好是O(1)，最差是O(n), 均摊是O(1)。","like_count":0},{"had_liked":false,"id":273551,"user_name":"CQ","can_delete":false,"product_type":"c1","uid":2067365,"ip_address":"","ucode":"F4899EEBE3CD8D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/8b/a5/4598dc7b.jpg","comment_is_top":false,"comment_ctime":1610635921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610635921","product_id":100017301,"comment_content":"练习题跟上面清空数组的问题类似，最好是O(1)，最差是O(n)，当n+1次，才会是O(n)，所以均摊是O(1).","like_count":0},{"had_liked":false,"id":273515,"user_name":"哈哈","can_delete":false,"product_type":"c1","uid":2412410,"ip_address":"","ucode":"800D79000A4831","user_header":"","comment_is_top":false,"comment_ctime":1610618961,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610618961","product_id":100017301,"comment_content":"已知len = 10<br>假设调用次数记为n<br>1-10次，时间复杂度为O(1)<br>11次，时间复杂度：len<br>12次，时间复杂度：2len<br>13次，时间内复杂度：4len<br>一次类推<br>N次，时间复杂度：（n-10）len<br>根据等比数列通向式求解<br>an = a11 * q^(n-11) (次幂)<br>an = len * 2^(n-11) = 10 *2^(n-11)<br><br>所以，此函数的时间复杂度分情况<br>1-10次O(1)<br>大于11次 O（2^(n)）<br>由此可以看出，最好时间复杂度O（1）<br>最坏的，本题中没有最坏，只有更坏，次数越多，时间复杂度越长<br>希望老是能够指正理解的错误之处","like_count":0},{"had_liked":false,"id":273513,"user_name":"哈哈","can_delete":false,"product_type":"c1","uid":2412410,"ip_address":"","ucode":"800D79000A4831","user_header":"","comment_is_top":false,"comment_ctime":1610618734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610618734","product_id":100017301,"comment_content":"已知len = 10<br>假设调用次数记为n<br>1-10次，时间复杂度为O(1)<br>11次，时间复杂度：len<br>12次，时间复杂度：2len<br>13次，时间内复杂度：4len<br>一次类推<br>N次，时间复杂度：（n-10）len<br>根据等比数列通向式求解<br>an = a11 * q^(n-11) (次幂)<br>an = len * 2^(n-11) = 10 *2^(n-11)<br><br>所以，此函数的时间复杂度分情况<br>1-10次O(1)<br>大于11次 O（2^(n)）<br><br>因此也就得出最好情况O（1）<br><br>希望老是能够指正错误。","like_count":0},{"had_liked":false,"id":273487,"user_name":"Geek_63a016","can_delete":false,"product_type":"c1","uid":2414844,"ip_address":"","ucode":"0D91B9F7033653","user_header":"","comment_is_top":false,"comment_ctime":1610612348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610612348","product_id":100017301,"comment_content":"练习题不是写死了len是10 i是0吗，为什么最坏是O(n)呢，不应该是O(1)吗，还是我理解有问题","like_count":0},{"had_liked":false,"id":271881,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1356978,"ip_address":"","ucode":"E78B1F15BC10F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcLjatV3GHdibZXCTIgL1X2A7jpByIeLH3Zyia8KXdT4JRcicmVSgq5ekRHCFCFenMqicsAwaWYibHkTw/132","comment_is_top":false,"comment_ctime":1609850269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609850269","product_id":100017301,"comment_content":"最好时间复杂度、最坏时间复杂度、平均时间复杂度、均摊时间复杂度。第一次看到均摊时间复杂度这个概念，挺有用处的。<br>最后的练习题我没做出来（还在想是不是O(n&#47;2)），看了评论才明白，利用均摊时间复杂度的概念就很好理解了。","like_count":0},{"had_liked":false,"id":271820,"user_name":"听雪","can_delete":false,"product_type":"c1","uid":1166904,"ip_address":"","ucode":"B11DBBCA97E27E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvMiaxQPnEPicyDQlDCgBxVZxKgWrobtESXswneGqTibTBWZkpNvqPvbic1O7d79JgK5LnqzgucrN7pQ/132","comment_is_top":false,"comment_ctime":1609822678,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609822678","product_id":100017301,"comment_content":"最好是O(1)，最差是O(n),平均是O(1),每次O(n)之前有n-1次O(1)","like_count":0},{"had_liked":false,"id":271545,"user_name":"小明同学","can_delete":false,"product_type":"c1","uid":2268281,"ip_address":"","ucode":"AEF71EB6509C23","user_header":"","comment_is_top":false,"comment_ctime":1609686970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609686970","product_id":100017301,"comment_content":"时间复杂度是O（n)<br>最好是O(1)<br>最坏是O(n)<br>平均是O（1)<br>均摊是O(1)","like_count":0},{"had_liked":false,"id":271111,"user_name":"ll","can_delete":false,"product_type":"c1","uid":1296458,"ip_address":"","ucode":"57C5DAC5B51036","user_header":"https://static001.geekbang.org/account/avatar/00/13/c8/4a/3a322856.jpg","comment_is_top":false,"comment_ctime":1609402388,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609402388","product_id":100017301,"comment_content":"两种情况，数组空间够用时: O(1), 不够用时，新建数组，遍历迁移原数组数据：O(n)，到这里，最好，最坏时间复杂度分别为O(1),  O(n)；但是由于情况特殊，数组在n之前的n-1次每次操作都为O(1)，只有到n时的操作为O(n)，而且此后的n-1次至2n的区间，和原先一样，有特殊的规律，所以这里可以用均摊时间复杂度分析；所以综合考虑为O(1)；这里我的疑问是，这个算法的空间复杂度在较大的数据规模下会比较大，O(n)?","like_count":0},{"had_liked":false,"id":270871,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1609308790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609308790","product_id":100017301,"comment_content":"课后思考: <br><br><br><br>分析: <br>1. 插入一条数据时, 数组空间不够了,需要扩容, 此时要执行第12, 13行代码, 触发最坏时间复杂度O(n).<br>2. 插入一条数据时, 数组空间有剩余, 此时直接插入, 触发最好时间复杂度O(1).<br>3. 均摊时间复杂度的分析: 由于数组初始length=10, 也就是每10次插入触发一次最坏. 均摊后得出O(1)的结论.<br><br>第一次系统的学习复杂度分析, 感觉没有想象的复杂. 希望后面的旅程能够顺利.<br><br><br><br><br>","like_count":0},{"had_liked":false,"id":270150,"user_name":"Geek_2cbcde","can_delete":false,"product_type":"c1","uid":2126339,"ip_address":"","ucode":"A87FC5832D6377","user_header":"","comment_is_top":false,"comment_ctime":1608955549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608955549","product_id":100017301,"comment_content":"感谢老师的讲解，想请问一下两个问题，希望能收到您的解答，或者哪位同学知道也可以告诉我，谢谢<br>1.   练习题为什么最坏情况是O（n）,最坏情况去进行for循环，那个len不是一个常量吗？所以最坏情况不是O（1）吗？<br>2.   一段代码如果最好情况是O（1），最坏情况是O（n）,那它的平均复杂度是固定的吗？","like_count":0},{"had_liked":false,"id":269956,"user_name":"j","can_delete":false,"product_type":"c1","uid":2324722,"ip_address":"","ucode":"96BAF9A9524C9F","user_header":"https://static001.geekbang.org/account/avatar/00/23/78/f2/02eb3b5c.jpg","comment_is_top":false,"comment_ctime":1608863229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608863229","product_id":100017301,"comment_content":"add()函数的时间复杂度，最坏时间复杂度O(n),最好时间复杂度O(1),平均时间复杂度O(1),平摊复杂度O(1)","like_count":0},{"had_liked":false,"id":268994,"user_name":"咳咳","can_delete":false,"product_type":"c1","uid":2348555,"ip_address":"","ucode":"524199AC1E02ED","user_header":"https://static001.geekbang.org/account/avatar/00/23/d6/0b/bdc05634.jpg","comment_is_top":false,"comment_ctime":1608465249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608465249","product_id":100017301,"comment_content":"老师，为什么您在查找的时候会首先分这个数在这个数组和不在这个数组这两种情况，然后在这两种情况的概率基础上计算每种情况发生的概率，但是插入的时候就不先分数组有空闲和数组满了这两种情况呢？","like_count":0},{"had_liked":false,"id":268800,"user_name":"Geek_f9ea21","can_delete":false,"product_type":"c1","uid":1489767,"ip_address":"","ucode":"9893422FD525F6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erQCmNjzBrZj090AicHB8XCicicavUOrHpibhWOe8VibicSACibAnlHLpcunTCNCwGibFh5vrSgGZlIUqiaVXQ/132","comment_is_top":false,"comment_ctime":1608354681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608354681","product_id":100017301,"comment_content":"“尽管很多数据结构和算法书籍都花了很大力气来区分平均时间复杂度和均摊时间复杂度，但其实我个人认为，均摊时间复杂度就是一种特殊的平均时间复杂度，我们没必要花太多精力去区分它们。你最应该掌握的是它的分析方法，摊还分析。至于分析出来的结果是叫平均还是叫均摊，这只是个说法，并不重要”很有道理，专注重点，有的放矢","like_count":0},{"had_liked":false,"id":268478,"user_name":"想晴的天","can_delete":false,"product_type":"c1","uid":2371810,"ip_address":"","ucode":"6C6584BF55CD75","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKxyKrFpzicHoHK5tO1ca14BgpCrmHJ5czZAdN260JdTic5eMnPlt5nGO6yVLfZSy0QKMoe79hhGiaVQ/132","comment_is_top":false,"comment_ctime":1608212325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608212325","product_id":100017301,"comment_content":"课后思考：<br>最好时间复杂度：O(1) ，最坏时间复杂度：O(n)，平均时间复杂度：O(1)<br><br>虽然我觉得应该是这个答案，但是就题目来说，最坏时间复杂度也可以说是O(1)，这里的数组的长度是常量10，循环的次数是已知数。题目就数组长度设置是一个未知数，这题毫无疑问最坏时间复杂度就是O(n)","like_count":0},{"had_liked":false,"id":268159,"user_name":"羽","can_delete":false,"product_type":"c1","uid":2369723,"ip_address":"","ucode":"F841D2EF2A016B","user_header":"https://static001.geekbang.org/account/avatar/00/24/28/bb/5fcd8d73.jpg","comment_is_top":false,"comment_ctime":1608086023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608086023","product_id":100017301,"comment_content":"最好：O（1），有空位直接放<br>最差：O（n），空间不够需要扩容<br>均摊：O（1），同例可得","like_count":0},{"had_liked":false,"id":268047,"user_name":"追梦少年","can_delete":false,"product_type":"c1","uid":2355130,"ip_address":"","ucode":"A9717D1ACC3BE4","user_header":"https://static001.geekbang.org/account/avatar/00/23/ef/ba/3dc5be65.jpg","comment_is_top":false,"comment_ctime":1608038910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608038910","product_id":100017301,"comment_content":"个人理解:平均时间复杂度和平摊时间复杂度问题，在经过n个O（1）之后出现一个O（m）,如果m值要远远大于n值，这种情况可记为O（n）,否则统一O（1）处理","like_count":0},{"had_liked":false,"id":267680,"user_name":"取悦","can_delete":false,"product_type":"c1","uid":1327864,"ip_address":"","ucode":"53BA6AB79C3CED","user_header":"https://static001.geekbang.org/account/avatar/00/14/42/f8/9a22b3aa.jpg","comment_is_top":false,"comment_ctime":1607870137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607870137","product_id":100017301,"comment_content":"我一开始认为既然len=10，那就说明这是个常量呀，既然是常量就算执行10万次也是O1，仔细想了想，这哪是常量呀，这明明是变量，数组满了会重新赋值的，哎，我的基础确实不行呀。","like_count":0},{"had_liked":false,"id":267481,"user_name":"AtlantisGex","can_delete":false,"product_type":"c1","uid":2046934,"ip_address":"","ucode":"05952153BE165D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3b/d6/4e1c05a4.jpg","comment_is_top":false,"comment_ctime":1607762922,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1607762922","product_id":100017301,"comment_content":"最好状况时间复杂度：O(1)<br><br>最坏状况时间复杂度：O(n)，当需要赋值数组到新数组中的情况下，最坏是len次，但是len没有人知道它是多少，相当于一个变量，所以要用n。（不知道理解的对不对）<br>    <br>均摊时间复杂度：O(1)，第11、21、41、81、161...操作的时候，都多执行了该操作前方所有操作的总次数，如果这些是高代价情况的话，那一个高代价情况可以将自己的操作次数均摊到从当前高代价情况开始到下一次高代价情况之前的这些情况中。就好比：<br><br>    1-10： O(1)<br>    11-20：将11复制数组的的操作均摊到11-20中，那么还是O(1)<br>    21-40: 将21复制数组的操作均摊到21-40中，那么依旧是O(1)<br>    ...<br><br>    以此类推，最中的均摊时间复杂度就是O(1)","like_count":0},{"had_liked":false,"id":267126,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1607603891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607603891","product_id":100017301,"comment_content":"最好情况：O(1) 也就是空闲情况；<br>最坏就是 O(n)因为一旦 i &gt;= len 那么就需要先遍历一次数组然后在进行数组接着负值；<br>均摊：O（1），因为有 n-1此的O（1）操作后，就会有一次的 O(n)操作，所以 [（n-1) + n] &#47; n= 1","like_count":0},{"had_liked":false,"id":266122,"user_name":"让你熬夜的那个bug是我写的","can_delete":false,"product_type":"c1","uid":2354984,"ip_address":"","ucode":"976AF2BB4FD6E8","user_header":"https://static001.geekbang.org/account/avatar/00/23/ef/28/96197341.jpg","comment_is_top":false,"comment_ctime":1607176923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607176923","product_id":100017301,"comment_content":"在add中那个len长度是不是可以理解为n","like_count":0},{"had_liked":false,"id":265755,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1607003059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607003059","product_id":100017301,"comment_content":"总结：<br>当相同的算法在不同的情况下，出现的复杂度存在较大差异时。只分析复杂度不能更好的表示算法的表现。需要更多的维度进行评估。其中主要包括：最好情况下的复杂度，最坏情况下的复杂度，平均时间复杂度和均摊时间复杂度。平均时间复杂度和均摊时间复杂度，往往在概念上和含义上较为类似，我们一般情况下只分析其一即可。<br><br>顾名思义：最好情况下的复杂度，就是理想状态下的复杂度；最坏情况下的复杂度，就是最不理想状态下的复杂度。假如我们在数组中进行查找操作，最好的情况下遍历一次就可以找到元素；而最坏的情况下，则需要遍历完整个数组，还不一定找到元素。往往他们的复杂度比较容易分析，前者只需要执行一次，所以是O(1) ，而后者需要遍历完整个集合中的元素，所以是O(n)。<br><br>最好和最坏属于极端情况。算法的运行效率不总是极端情况，往往我们还需要额外分析一个平均时间的复杂度。平均时间复杂度，也很容易理解，就是求平均值。还是以数组查找元素为例，如果是查询第一个元素，需要执行1次，查询的是第二个元素，执行两次。。。。 查询的是第n个元素就是需要执行n次，还有一种情况是要查找的元素不在数组中内，也需要遍历完整个数组，需要执行n次。所以平均时间的复杂度为：1+2 +3 +........+n+n  &#47; (n+1)  = O(n) .所以平均的时间复杂度为O(n) 。<br><br>上述求解平均时间复杂度的过程不够严谨，但是并不影响结果。正常情况下，分析平均时间复杂度，还需要考虑一个概率的问题。比如上述查找元素的例子，集合中每个元素的概率为 1&#47;n 。但是对于不存在于集合中的元素，概率是和集合内的元素是不一样的。如果我们认为在集合中和不在集合中的概率均为1&#47;2，那么集合中元素的概率为1&#47;2n。此时我们再来计算下平均时间复杂度。计算的过程为：1&#47;2n *1 + 1&#47;2n * 2 + 1&#47;2n * n + 1&#47;2*n &#47; (n+1) = O(n) 时间复杂度还是O(n)。<br><br>还有最后一种时间复杂度：均摊时间复杂度，使用的分析方式也被称为摊还分析法。这种算法适用的情况为对同一数据结构进行连续的有规律的操作。计算出每一个操作的复杂度，然后试图用最高的复杂度，平均分摊到其他复杂度上面。看到这里是不是感觉和平均复杂度很像。只不过适用情况没有平均时间复杂度那么宽泛，更像是其的一个子集。<br><br>小技巧：一般情况下，在能用均摊时间复杂度来分析算法的场景中，它的复杂度等于最好情况下的时间复杂度。","like_count":0},{"had_liked":false,"id":265221,"user_name":"大雪山圣地","can_delete":false,"product_type":"c1","uid":1036987,"ip_address":"","ucode":"A161F7E12F1BAF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/bb/3b1a1347.jpg","comment_is_top":false,"comment_ctime":1606815960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606815960","product_id":100017301,"comment_content":"最坏情况分析：<br>最坏情况代码执行的次数跟每次数组的长度有关<br>第 1 次调用 add 的执行的次数为 2^0 * 10,<br>第 2 次调用 add 的执行的次数为 2^1 * 10 ,<br>第 3 次调用 add 的执行的次数为 2^2 * 10<br>第 n 次调用 add 的执行的次数为 2^(n-1) * 10 = 2^n * 5<br>常系数可以省略，所以调用 n 次 add 方法的最差时间复杂度应该时 2^n。<br>你们怎么都把数组的长度假设为 n ，数组的初始长度可是 10 啊? n 应该时调用 add 的次数啊。无法理解。。。。。。","like_count":0},{"had_liked":false,"id":264838,"user_name":"Geek_1ec93e","can_delete":false,"product_type":"c1","uid":2346667,"ip_address":"","ucode":"85933C97A6B191","user_header":"","comment_is_top":false,"comment_ctime":1606666148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606666148","product_id":100017301,"comment_content":"思考题：<br>其实理解逻辑就很简单，这个add方法也就是判断是否满了，然后扩容和转移；因为len一开始就是个定值为10，后面一直是变量，一扩容就*2；<br>最好：当然是没发生扩容，直接插入O（1）<br>最坏：发生了扩容，扩容每次*2，len的变化也是*2，所以对于第一次扩容和第n次扩容，长度只是2*len和2n*len，len是常数10，所以此时扩容是遍历的长度是O(2n*len)=O(20n)=O(n)<br>均摊：符合规律性的大部分时间复杂度很低，个别情况时间复杂度高，且呈连贯的时序关系；<br>每次扩容2n*len的时间复杂度（O（n*len）），扩容前的n*len-1次操作都是插入操作O（1），所以O（n*len）平均在扩容前的n*len-1次操作上，平均每个操作是O（1）","like_count":0},{"had_liked":false,"id":264834,"user_name":"Geek_1ec93e","can_delete":false,"product_type":"c1","uid":2346667,"ip_address":"","ucode":"85933C97A6B191","user_header":"","comment_is_top":false,"comment_ctime":1606664736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606664736","product_id":100017301,"comment_content":"渐进时间四个方向：最好，最坏，平均，均摊（特殊的平均时间复杂度）<br>平均：每一步的消耗；<br>均摊：出现在规律性的大部分时间复杂度很低，个别情况时间复杂度高，且呈连贯的时序关系，可以理解为复杂度高的时间分摊到时间复杂度低的地方的时间<br>思考题：","like_count":0},{"had_liked":false,"id":264240,"user_name":"Geek_b49c9b","can_delete":false,"product_type":"c1","uid":2337732,"ip_address":"","ucode":"5C7C27144A4A07","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJt6TyUk2YZXALOqsd3icJuy8stPNZGWDzLkUJJomKwgtgOYm8p9LBUJ7JCxGOtBU97Z5s98OibVwhQ/132","comment_is_top":false,"comment_ctime":1606387207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606387207","product_id":100017301,"comment_content":"根据均摊时间复杂度来均摊，每次高复杂度n，都是有n-1次 O（1），所以均摊时间复杂度为O（1）；<br>最好复杂度是O（1）；最坏复杂度是O（n）","like_count":0},{"had_liked":false,"id":263835,"user_name":"jeff","can_delete":false,"product_type":"c1","uid":1026894,"ip_address":"","ucode":"68456DD035BDF4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/4e/82e9657c.jpg","comment_is_top":false,"comment_ctime":1606277181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606277181","product_id":100017301,"comment_content":"均摊 一定要满足，n-1个 O(1),出现一个O(n) 才可以吗？","like_count":0},{"had_liked":false,"id":263834,"user_name":"jeff","can_delete":false,"product_type":"c1","uid":1026894,"ip_address":"","ucode":"68456DD035BDF4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/4e/82e9657c.jpg","comment_is_top":false,"comment_ctime":1606277126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606277126","product_id":100017301,"comment_content":"练习题：最好O(1),最坏O(n),均摊 O(1)，这有点类似ArrayList的简单实现了。","like_count":0},{"had_liked":false,"id":263611,"user_name":"OperaX","can_delete":false,"product_type":"c1","uid":1510551,"ip_address":"","ucode":"66947CD04E3B3E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI8mFt5wSkia3yumk409E65JIlGoreva1Q25icTks0XB0EDC7WJ5V0z6zuvgGkI2Zrh5cBXGS5Hea8A/132","comment_is_top":false,"comment_ctime":1606197587,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1606197587","product_id":100017301,"comment_content":"最好与最坏很好理解<br>课后作业最好O(1)，最坏O(n)<br>平均、均摊看不太懂","like_count":0},{"had_liked":false,"id":262904,"user_name":"Geek_2a26e2","can_delete":false,"product_type":"c1","uid":2331566,"ip_address":"","ucode":"D543C7CE508C29","user_header":"","comment_is_top":false,"comment_ctime":1605877644,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605877644","product_id":100017301,"comment_content":"老师你好，我已经工作三年了，在制造行业，由于兴趣爱好现在准备转行做C++编程工作，我现在刚刚学完C++，现在进行数据结构学习，我计划是把数据结构及算法课程学完，然后再做一些项目，可是别人告诉我要先做项目积累经验好早点找工作，不知道那种方式更适合我","like_count":0,"discussions":[{"author":{"id":1196695,"avatar":"https://static001.geekbang.org/account/avatar/00/12/42/97/45334aed.jpg","nickname":"如我所愿","note":"","ucode":"7AFA75F0299DC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349941,"discussion_content":"个人建议：算法工程师的门槛会高于C++，建议按照别人给你的去做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613636147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262120,"user_name":"Geek_abe60b","can_delete":false,"product_type":"c1","uid":2310830,"ip_address":"","ucode":"84DFE9406562BC","user_header":"","comment_is_top":false,"comment_ctime":1605616651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605616651","product_id":100017301,"comment_content":"每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作？？？我数学有点不好，舍意思？","like_count":0},{"had_liked":false,"id":261581,"user_name":"不诉离殇","can_delete":false,"product_type":"c1","uid":2127841,"ip_address":"","ucode":"C5F5BBAA682FA6","user_header":"https://static001.geekbang.org/account/avatar/00/20/77/e1/4a406e03.jpg","comment_is_top":false,"comment_ctime":1605428487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605428487","product_id":100017301,"comment_content":"说实话，没看明白求平均时间复杂度那个公式的转化和简化，然后最后出来个O(n)...我太难了","like_count":0},{"had_liked":false,"id":260956,"user_name":"Geek_34c841","can_delete":false,"product_type":"c1","uid":2300801,"ip_address":"","ucode":"C4E9930026F1CA","user_header":"","comment_is_top":false,"comment_ctime":1605161767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605161767","product_id":100017301,"comment_content":"均摊时间复杂度告诉我们某些场景一个最坏时间复杂度较差的算法不一定就真的比另一个最坏时间复杂度较好的算法差，有可能一次最差跟着很多最优（例如O(1)），均摊得到的时间复杂度更优，更值得被采用。","like_count":0},{"had_liked":false,"id":259235,"user_name":"我的自由飞","can_delete":false,"product_type":"c1","uid":2279850,"ip_address":"","ucode":"3863BB3E11EA24","user_header":"https://static001.geekbang.org/account/avatar/00/22/c9/aa/a996bb32.jpg","comment_is_top":false,"comment_ctime":1604659783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604659783","product_id":100017301,"comment_content":"老师 您好，您的代码实现可否提供一个GitHub链接，希望看到用Python实现的方式。","like_count":0},{"had_liked":false,"id":258522,"user_name":"七","can_delete":false,"product_type":"c1","uid":2285006,"ip_address":"","ucode":"430F9F536EA50A","user_header":"https://static001.geekbang.org/account/avatar/00/22/dd/ce/91aac2e8.jpg","comment_is_top":false,"comment_ctime":1604473176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604473176","product_id":100017301,"comment_content":"时间复杂度：O(1)，和均摊时间复杂度的运用场景很类似：大部分情况时间复杂度都很低，只有个别情况下时间复杂度比较高，每次O(10)之后，接着就是 9 次 O(1)，可以将这次复杂度较高的操作，均摊到每次复杂度低的操作上。均摊时间复杂度等于最好情况时间复杂度O(1)","like_count":0},{"had_liked":false,"id":258480,"user_name":"Z7k","can_delete":false,"product_type":"c1","uid":1238680,"ip_address":"","ucode":"39373D7A6E6EE1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/98/5853eb73.jpg","comment_is_top":false,"comment_ctime":1604456769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604456769","product_id":100017301,"comment_content":"时间复杂度：<br>最好：O(1) <br>最坏：O(n) <br>平均：O(1)<br>","like_count":0},{"had_liked":false,"id":258266,"user_name":"Geek_c66294","can_delete":false,"product_type":"c1","uid":1737874,"ip_address":"","ucode":"CF2011E5AD578E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6dnxU0KTMG0s7ekh7cBSppqA7S2PaHXVUZiaBlKXvA8m69AraMo9g7LxUREIKwdN4POXhFdibGRPst4g5FCicyWwg/132","comment_is_top":false,"comment_ctime":1604365496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604365496","product_id":100017301,"comment_content":"插入的数量范围[1,2,3,...8,9,10]<br>相应的操作次数[1,1,1,...1,1,10]<br>将10均摊到前面的数据上，约为<br>[2,2,2,...2,2,2]<br><br>同理，在[11,20]区间<br>[2,2,2,...2,2,2]<br><br>最终O(2)---&gt;O(1)","like_count":0},{"had_liked":false,"id":258226,"user_name":"klchang","can_delete":false,"product_type":"c1","uid":2281046,"ip_address":"","ucode":"792355B14607ED","user_header":"","comment_is_top":false,"comment_ctime":1604329830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604329830","product_id":100017301,"comment_content":"最好时间复杂度、平均时间复杂度、均摊时间复杂度都是O(1)；<br>最坏时间复杂度为O(n)","like_count":0},{"had_liked":false,"id":258077,"user_name":"超级星AM","can_delete":false,"product_type":"c1","uid":2277598,"ip_address":"","ucode":"2EF503D2BDB3A5","user_header":"https://static001.geekbang.org/account/avatar/00/22/c0/de/b8212616.jpg","comment_is_top":false,"comment_ctime":1604287374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604287374","product_id":100017301,"comment_content":"答案是o(1)","like_count":0},{"had_liked":false,"id":255594,"user_name":"罗泽武","can_delete":false,"product_type":"c1","uid":2252434,"ip_address":"","ucode":"FD6E0D6C2DA14E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/2pjg57ic8bz398tT6S26doffT4ibmVzS6GSQ8dicTRb1gGS2uC93dNYjeODibn29e4oIFPdWw2BvxXFDZFjE2IWX8A/132","comment_is_top":false,"comment_ctime":1603377157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603377157","product_id":100017301,"comment_content":"分两种可能：<br>第一种是存入数据时，数组长度足够，此时直接赋值，时间复杂度为常量级，为最好情况时间复杂度O(1)。<br>第二种是存入数据时，数组长度不够，此时需要拷贝数组（java里的ArrayList扩容机制就是如此），拷贝数组需要一次遍历，遍历次数与数组当前长度正比，为情况最坏时间复杂度O(n)。<br>概率上讲，数组扩容的触发，需要add函数执行n次后，第n+1次才会触发，因此均摊复杂度为O(1)<br>,平均时间复杂度等于（n+n）&#47;(n+1)≈2，常量级O（1）","like_count":0},{"had_liked":false,"id":252632,"user_name":"Geek_1d3fdc","can_delete":false,"product_type":"c1","uid":2223198,"ip_address":"","ucode":"A9E79B272B3608","user_header":"","comment_is_top":false,"comment_ctime":1602410594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602410594","product_id":100017301,"comment_content":"最好时间复杂度O(1)，当刚好不超出数组大小时，执行一遍代码插入即可；<br>最坏时间复杂度O(n)，当超出数组到大小时，执行次数最多的代码for循环里面的拷贝逻辑，因此是O(n)；<br>平均时间复杂度&#47;均摊时间复杂度O(1)；","like_count":0},{"had_liked":false,"id":252575,"user_name":"Berlin","can_delete":false,"product_type":"c1","uid":2223841,"ip_address":"","ucode":"5980861B844BB5","user_header":"https://static001.geekbang.org/account/avatar/00/21/ee/e1/6978f8ba.jpg","comment_is_top":false,"comment_ctime":1602387609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602387609","product_id":100017301,"comment_content":"老师你好，有个疑惑，最后思考题那里，只有当要输入n个数据时（存储n个数据，所以要扩充int(n&#47;10)次数组，循环执行int(n&#47;10)次），复杂度才是O(n)吗，所以相对于n，其他都是常数次，所以就算执行循环，循环的次数也是10而已，所以整个代码来看是O(1),这样理解有什么问题吗？如果我的数组大小变成了k，这时候就是变成O(m+n)类型的问题吗。三个问题哈哈，麻烦老师了","like_count":0},{"had_liked":false,"id":252530,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1149402,"ip_address":"","ucode":"AD6933D125C930","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/da/136cdca6.jpg","comment_is_top":false,"comment_ctime":1602341356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602341356","product_id":100017301,"comment_content":"有些时候，最小和最坏复杂度不足以评判算法绝大时候的表现，引入平均和均摊在极限情况下进行求值，对算法复杂度进行补充说明。这种感觉有点追求99.99%意思，很多时候，我们不苛求满足最坏情况，但也不能只满足最好或者差不多的理想情况，就是尽量好，尽量接近。","like_count":0},{"had_liked":false,"id":252502,"user_name":"洛荨","can_delete":false,"product_type":"c1","uid":2223708,"ip_address":"","ucode":"AF6B042C86B60D","user_header":"https://static001.geekbang.org/account/avatar/00/21/ee/5c/74912bb2.jpg","comment_is_top":false,"comment_ctime":1602321080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602321080","product_id":100017301,"comment_content":"有一个地方不是很理解，find和insert实例的时候未加概率计算平均时间复杂度的时候。find的常数项是取的是循环的次数。而insert取的却是每种情况的时间复杂度来计算的","like_count":0},{"had_liked":false,"id":252415,"user_name":"沙里飞","can_delete":false,"product_type":"c1","uid":2005433,"ip_address":"","ucode":"E68FE314029A3A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/99/b9/96261f86.jpg","comment_is_top":false,"comment_ctime":1602295511,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1602295511","product_id":100017301,"comment_content":"课后思考:<br>最好: O(1) 直接可以插入到数组<br>最坏: O(n) 数组满了,需要扩容<br>平均或者均摊: 共有n+1总情况,前n个数据都顺利插入到数组中,第n+1个数据插入,数组满了.<br>    前n个, 1*1&#47;(n+1)+1*1&#47;(n+1)...1*1&#47;(n+1)=O(1)<br>    第n+1个, n*1&#47;(n+1)=O(1). <br>因为是规律出现的,所以对于这一组均摊下来,就是O(1)+O(1)=O(1)","like_count":0},{"had_liked":false,"id":252048,"user_name":"Conwie.","can_delete":false,"product_type":"c1","uid":2215188,"ip_address":"","ucode":"0C2FBE5FC13E1A","user_header":"https://static001.geekbang.org/account/avatar/00/21/cd/14/26974927.jpg","comment_is_top":false,"comment_ctime":1602078432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602078432","product_id":100017301,"comment_content":"老师，最坏时间复杂度我怎么算出来是O(nlogn)，每次扩容消耗的时间不是logn递增的么，第一次扩容10，第二次20，第三次40...就是10*log2(n-1)，求老师指点...","like_count":0},{"had_liked":false,"id":251900,"user_name":"spencer","can_delete":false,"product_type":"c1","uid":1399304,"ip_address":"","ucode":"BBB22B77DCE987","user_header":"https://static001.geekbang.org/account/avatar/00/15/5a/08/467b3e34.jpg","comment_is_top":false,"comment_ctime":1601958017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601958017","product_id":100017301,"comment_content":"均摊分析这里，那段代码当count == array.length的时候，for循环遍历求和，应该不会清空数组吧，原来数组里面保存的值没有被清空，只是第一个数值放的是sum和，然后count指向第二个","like_count":0},{"had_liked":false,"id":251091,"user_name":"杨","can_delete":false,"product_type":"c1","uid":1971269,"ip_address":"","ucode":"7EFEFE285975C6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/oltLEqTrmHm2aJP99BK6tHu5h7hp4aj08wR5Wt6H31iadFduDAVvjYKmhQ2nvGbLV3lkVdiat2GRasgWXoJeTibUg/132","comment_is_top":false,"comment_ctime":1601362787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601362787","product_id":100017301,"comment_content":"老师 个人觉得练习题最好是最好是O(1)，最差是O(N*2^M) M是扩展次数初始为0, 均摊是O(1) 无论怎么都是n*1&#47;n   大家都说最差O(N)我觉得应该考虑长度扩展每次都为原来的2倍 <br>","like_count":0},{"had_liked":false,"id":250706,"user_name":"go","can_delete":false,"product_type":"c1","uid":2211424,"ip_address":"","ucode":"B9CF0A7F2CF99F","user_header":"https://static001.geekbang.org/account/avatar/00/21/be/60/8aa7f9cb.jpg","comment_is_top":false,"comment_ctime":1601199742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601199742","product_id":100017301,"comment_content":"总结一下：如果在不同位置，存在有相同的复杂度概率O(Temp)，这种场景就适用于均摊分析法，而且均摊分析法的复杂度，就是这个O（Temp）。","like_count":0},{"had_liked":false,"id":249972,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1600871618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600871618","product_id":100017301,"comment_content":"同一段代码，在不同输入的情况下，复杂度量级有可能是不一样的。所以一段代码最终会呈现出有不同的复杂度：最好、最坏、平均、均摊。<br><br>同一段代码由于不同的输入可能会有几种不同的复杂度，而根据不同情况出现的概率进行求和并求平均值，就是平均复杂度。<br><br>一般情况下，不同的输入会出现两种复杂度，如果大多数时候是复杂度T1，偶尔出现复杂度T2,并且呈现规律性变化，就可以用摊还分析法，把T2的复杂度平摊给T1。大多数时候，平摊的结果就是T1。<br><br>均摊时间复杂度就是一种特殊的平均时间复杂度。","like_count":0},{"had_liked":false,"id":249731,"user_name":"顺儿","can_delete":false,"product_type":"c1","uid":1175384,"ip_address":"","ucode":"609ED08F407626","user_header":"https://static001.geekbang.org/account/avatar/00/11/ef/58/643c3e44.jpg","comment_is_top":false,"comment_ctime":1600773175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600773175","product_id":100017301,"comment_content":"最好时间复杂度是O(1)，最坏时间复杂度是O(n)，均摊时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":249185,"user_name":"绝影","can_delete":false,"product_type":"c1","uid":1437760,"ip_address":"","ucode":"EA3C85D21DE210","user_header":"https://static001.geekbang.org/account/avatar/00/15/f0/40/219be32a.jpg","comment_is_top":false,"comment_ctime":1600495634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600495634","product_id":100017301,"comment_content":"思考题：<br>最好时间复杂度：数组还有足够空间时，直接加入，复杂度为O(1)<br><br>  最坏时间复杂度：数组没有有足够空间时，需要扩容拷贝，复杂度为O(n)<br><br>  平均时间复杂度：对于加入一个元素数组空间足够的情况有n种，不够的情况有1种<br>一共有n+1种情况，每种情况的概率为1&#47;(n+1)<br>1*1&#47;(n+1)+1*1&#47;(n+1)+..........+n*1&#47;(n+1)=n&#47;(n+1)+n&#47;(n+1)=2n&#47;(n+1)<br>所以就得到复杂度为O(1)<br><br>均摊时间复杂度：我们可以发现在大小为n的数组中，有n次时间复杂度为O(1)，接下来一次空间不够扩容复制后变为O(n).扩容后，接下来又是n-1次是O(1)，一次是O(n)依次循环。如果把n均摊给复杂度为O(1)的n-1次，那么很容易得出复杂度为O(1).","like_count":0},{"had_liked":false,"id":249170,"user_name":"绝影","can_delete":false,"product_type":"c1","uid":1437760,"ip_address":"","ucode":"EA3C85D21DE210","user_header":"https://static001.geekbang.org/account/avatar/00/15/f0/40/219be32a.jpg","comment_is_top":false,"comment_ctime":1600491882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600491882","product_id":100017301,"comment_content":"对于一个无序数组a,它里面有从位置0开始存储的连续的n-1个元素，现在随机位置i处插入一个新元素，它的均摊时间复杂度是O(N)恰好是最坏时间复杂度,平均时间复杂度是O(1),老师请问这个分析结果对吗？","like_count":0},{"had_liked":false,"id":249120,"user_name":"绝影","can_delete":false,"product_type":"c1","uid":1437760,"ip_address":"","ucode":"EA3C85D21DE210","user_header":"https://static001.geekbang.org/account/avatar/00/15/f0/40/219be32a.jpg","comment_is_top":false,"comment_ctime":1600437592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600437592","product_id":100017301,"comment_content":"文中<br>“有 n+1 种情况：在数组的 0～n-1 位置中和不在数组中。我们把每种情况下，查找需要遍历的元素个数累加起来“   <br> 为什么分子不是1+2+3+.....+n+(n+1),不在数组中时for循环的地方会执行n+1次。","like_count":0},{"had_liked":false,"id":248990,"user_name":"嗯攀","can_delete":false,"product_type":"c1","uid":2059133,"ip_address":"","ucode":"839CA0DC5AE001","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6b/7d/650005f8.jpg","comment_is_top":false,"comment_ctime":1600395746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600395746","product_id":100017301,"comment_content":"nice<br>","like_count":0},{"had_liked":false,"id":247889,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1599902535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599902535","product_id":100017301,"comment_content":"思考题：<br>最好时间复杂度：O(1)<br>最差时间复杂度：O(n)<br>平均时间复杂度：O(2n&#47;n+1) = O(1)<br>均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":247867,"user_name":"张小胖","can_delete":false,"product_type":"c1","uid":1032185,"ip_address":"","ucode":"53186966F693AA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjkebNUccdVM20xKibWokPW2peicW19BkFalU6DPe37HohaXYYeiaibv0ELZyx6JfNDqDsyhpDogfVFQ/132","comment_is_top":false,"comment_ctime":1599897927,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1599897927","product_id":100017301,"comment_content":"记录一下从不懂到懂的过程，看到作业题的过程：<br>1、第一遍尝试解题，这代码啥意思呢？<br>先分配10个的int空间，然后开始往里面插入元素，然后数组满了之后，再把数组的空间扩大2倍，将原来数组的数据全部复制到新的数组中。<br><br>代码都能看懂，但是具体怎样计算复杂度呢？有点儿头晕，完全没有思路。<br><br>2、我又仔细看了上面的均摊复杂度的代码，原来跟均摊复杂度的代码类似，但是又有点儿不同啊。就对照着找一找异同点。<br><br>相同点：<br>都是先O(1)操作，然后过一阵O(n)操作<br><br>不同点：<br>均摊示例的代码是 在一个有限的空间内，一直进行操作，均摊案例是讲的n<br>作业题的代码是过了一阵，内存空间都会扩大一倍。作业题目中内存空间开始为10.<br><br>到了这里，这个10 就可以理解为最开始的n,然后n还能逐渐变成2n，4n、8n<br><br>3、然后我就开始列公式。<br><br>1* 1&#47;(n+1)+1*1&#47;(n+1)  + n * 1&#47;(n+1) + ----下一轮（扩大内存后）-----1 *1&#47;(2n+1) ------- |-------下一轮----|<br><br>我考虑扩充内存的临界点，在前期没有扩充内存的时候，作业题目和案例题都是一样的，均摊复杂度是O(1)<br><br>4、然后我突然意识到所谓的下一轮，扩充内存进行处理后，本质上和之前没有啥区别，O(1)和O(n)的时间占比都是同比扩大了<br><br>所以可以理解为多个O(1)的累加，最终还是O(1)<br><br>然后我翻看留言区大神的评论，很多大神写得言简意赅，我把自己从不懂到懂的过程记录下来<br>","like_count":0,"discussions":[{"author":{"id":2312214,"avatar":"https://static001.geekbang.org/account/avatar/00/23/48/16/df9b9f53.jpg","nickname":"纳兰小狐獴","note":"","ucode":"882182192B89FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324667,"discussion_content":"你和码农翻身的张大胖是什么关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605149933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1032185,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjkebNUccdVM20xKibWokPW2peicW19BkFalU6DPe37HohaXYYeiaibv0ELZyx6JfNDqDsyhpDogfVFQ/132","nickname":"张小胖","note":"","ucode":"53186966F693AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2312214,"avatar":"https://static001.geekbang.org/account/avatar/00/23/48/16/df9b9f53.jpg","nickname":"纳兰小狐獴","note":"","ucode":"882182192B89FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326133,"discussion_content":"不认识，我都没听过他","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605529516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":324667,"ip_address":""},"score":326133,"extra":""}]}]},{"had_liked":false,"id":247784,"user_name":"活久见","can_delete":false,"product_type":"c1","uid":1998006,"ip_address":"","ucode":"252D41F8F80E95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEcrX2YPytOvzE8MHRLjtuuun42ibADzaIaQuYLuDItv5EibuPW8iaiaiahu3IomrDffeGaXv4QumntwA/132","comment_is_top":false,"comment_ctime":1599835710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599835710","product_id":100017301,"comment_content":"int[] array = new int[n]; <br>int count = 0;  <br>void insert(int val) {  <br>  if (count == array.length) { <br>      int sum = 0;   <br>    for (int i = 0; i &lt; array.length; ++i) {   <br>       sum = sum + array[i];       <br>}     <br>  array[0] = sum;    <br>   count = 1;    <br>}   <br> array[count] = val;   <br> ++count; <br>}<br><br>这段代码是不是这个意思，当元素个数与数组长度相等时，将所有元素总和放在下标为0的地方，count =1  然后将新增的元素放在下标为1的地方，这时候count =2 ；紧接着再新增元素，这时候count已经不等于数组长度了，则将新增的元素放在下标为2的地方，这样依次替换以前的旧值，直到下次count再次 等于数组长度，又重新替换","like_count":0},{"had_liked":false,"id":247760,"user_name":"Belizer","can_delete":false,"product_type":"c1","uid":2175243,"ip_address":"","ucode":"17DA133DC0BDDF","user_header":"https://static001.geekbang.org/account/avatar/00/21/31/0b/91f317a0.jpg","comment_is_top":false,"comment_ctime":1599821060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599821060","product_id":100017301,"comment_content":"<br> &#47;&#47; array表示一个长度为n的数组<br> &#47;&#47; 代码中的array.length就等于n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }<br><br>清空数组体现在哪里，没理解？","like_count":0},{"had_liked":false,"id":247661,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1599788343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599788343","product_id":100017301,"comment_content":"最好时间复杂度：O(1)<br>最差时间复杂度：O(logn)<br>均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":247579,"user_name":"秋千岁","can_delete":false,"product_type":"c1","uid":1643123,"ip_address":"","ucode":"7B660ABE780547","user_header":"https://static001.geekbang.org/account/avatar/00/19/12/73/349124f5.jpg","comment_is_top":false,"comment_ctime":1599747271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599747271","product_id":100017301,"comment_content":"老师请问下，为什么在insert()函数中一个O(n)插入之后，紧跟着n-1个O(1)的插入操作，而不是n-2个O(1)？<br>O(n)插入后，array[0]=sum,array[count]=val,此时数组的剩余长度不应该是n-2吗？","like_count":0},{"had_liked":false,"id":247312,"user_name":"歧泽风","can_delete":false,"product_type":"c1","uid":2168529,"ip_address":"","ucode":"1D867746424652","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4LlxT4sS7e4bjxVLRO2qZmjXyvoSeRubrXtgCJIiaia4334RC5GJXhu2q26jcvKNV8iafc7WIDAn8SaialAY0jDC2Q/132","comment_is_top":false,"comment_ctime":1599655804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599655804","product_id":100017301,"comment_content":"其中 len 初始值为 10 ，但随着调用函数次数 k 的增加，数组不断扩大为 10·2^k ，可视为 n<br><br>- 最好时间复杂度  <br>解：直接插入数据的情况即 O(1)<br><br>- 最坏时间复杂度  <br>解：数组满后复制数组的情况即 O(n)<br><br>- 平均时间复杂度 = 加权&#47;期望时间复杂度 = 每种情况的执行次数 * 发生概率  <br>解：n 种直接插入数据的情况， 1 种数组满后复制数组的情况，等概率为 1&#47;(n+1)  <br>即 1 * 1&#47;(n+1) + … 1 * 1&#47;(n+1) + n * 1&#47;(n+1) = O(1)<br><br>- 均摊时间复杂度 = 极特殊的平均时间复杂度  <br>摊还分析法：将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上  <br>解：前 n 次插入数据至数组（O(1)），第 n+1 次复制数组，再插入数据（O(n)），O(1)出现的次数远大于O(n)的次数，均摊得O(1)","like_count":0},{"had_liked":false,"id":247295,"user_name":"Geek_0b819f","can_delete":false,"product_type":"c1","uid":2112661,"ip_address":"","ucode":"F7C0768D90A574","user_header":"","comment_is_top":false,"comment_ctime":1599651743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599651743","product_id":100017301,"comment_content":"len是一个常数吧，最坏时间复杂度难道不因该是O(1)","like_count":0},{"had_liked":false,"id":246215,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599210539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599210539","product_id":100017301,"comment_content":"【要点】<br>1、最好情况时间复杂度(best case time complexity)，在最理想的情况下，执行这段代码的时间复杂度。<br>2、最坏情况时间复杂度(worst case time complexity)，在最糟糕的情况下，执行这段代码的时间复杂度。<br>3、平均情况时间复杂度(average case time complexity)，平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度。<br>4、均摊时间复杂度(amortized time complexity),对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。<br>【思考】<br>最好时间复杂度：O(1)<br>最坏时间复杂度：O(n)<br>平均时间复杂度：O(1)，1*1&#47;(n + 1) + ...(n个) + n&#47;(n + 1) = 2n&#47;(n + 1) -&gt; O(1)<br>均摊时间复杂度：O(1),n个O(1)时间复杂度，1个O(n)时间复杂度，均摊后为O(1)<br>空间复杂度：O(n)","like_count":0},{"had_liked":false,"id":246064,"user_name":"无名道长","can_delete":false,"product_type":"c1","uid":1387960,"ip_address":"","ucode":"0F694D17459CC0","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/b8/7e49a241.jpg","comment_is_top":false,"comment_ctime":1599148396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599148396","product_id":100017301,"comment_content":"最好、最坏情况时间复杂度的第一例子，应该说明数组中的元素不会重复，不然这个函数功能的准确表述应该是 “在一个无序的数组（array）中，查找变量x出现的最后一次位置，如果没有找到就返回-1”","like_count":0},{"had_liked":false,"id":245697,"user_name":"悟者","can_delete":false,"product_type":"c1","uid":2153719,"ip_address":"","ucode":"B50C8FF5CDE045","user_header":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","comment_is_top":false,"comment_ctime":1599029418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599029418","product_id":100017301,"comment_content":"平均、均摊两个复杂度分析相对比较复杂<br>需要多看几遍就会理解了","like_count":0},{"had_liked":false,"id":245690,"user_name":"悟者","can_delete":false,"product_type":"c1","uid":2153719,"ip_address":"","ucode":"B50C8FF5CDE045","user_header":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","comment_is_top":false,"comment_ctime":1599027462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599027462","product_id":100017301,"comment_content":"var arr = []<br>var count = 0;<br><br>function insert(val, arr) {<br>    if (count == arr.length) {<br>        var sum = 0;<br>        for (var i = 0; i &lt; arr.length; ++i) {<br>            sum = sum + arr[i]<br>        }<br>        arr[0] = sum;<br>        count = 1;<br>    }<br>    arr[count] = val <br>    ++count; <br>}<br><br>insert(5, arr) &#47;&#47; 2 [0, 5]<br>insert(3, arr) &#47;&#47; 2 [ 5, 3 ]<br>insert(6, arr) &#47;&#47; 2 [ 8, 6 ]<br>insert(2, arr) &#47;&#47; 2 [ 14, 2 ]<br><br>console.log(count) &#47;&#47; 上面的2 是count<br>console.log(arr) &#47;&#47; 数组 在右边","like_count":0},{"had_liked":false,"id":245674,"user_name":"悟者","can_delete":false,"product_type":"c1","uid":2153719,"ip_address":"","ucode":"B50C8FF5CDE045","user_header":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","comment_is_top":false,"comment_ctime":1599023180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599023180","product_id":100017301,"comment_content":"首先，find() 函数在极端情况下，复杂度才为 O(1)<br>这里的 find() 函数是没有添加break的情况","like_count":0},{"had_liked":false,"id":245132,"user_name":"徐帅","can_delete":false,"product_type":"c1","uid":1448864,"ip_address":"","ucode":"BDF904280E2330","user_header":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","comment_is_top":false,"comment_ctime":1598842947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598842947","product_id":100017301,"comment_content":"没有delete []，内存泄漏了吧","like_count":0},{"had_liked":false,"id":245043,"user_name":"陆元春_deman","can_delete":false,"product_type":"c1","uid":1609018,"ip_address":"","ucode":"56484CA282DC2F","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/3a/b5076a06.jpg","comment_is_top":false,"comment_ctime":1598794024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598794024","product_id":100017301,"comment_content":"## 最好时间复杂度<br>当i在len的范围内，直接赋值，所以复杂度是O(1)<br>## 最坏时间复杂度<br>当i&gt;=len的时候，需要数据重新赋值，O(n)<br>当i&gt;=len，第二次的时候，需要的规模就是O(2n) = O(n)<br>...<br>最坏的情况就是O(n)<br>## 平均时间复杂度<br>i =1，复杂度就是O(1),概率就是1&#47;n+1<br>i=2,复杂度就是O(1),概率就是1&#47;n+1<br>...<br>总的就是1&#47;n+1 +1&#47;n+1 +.... n&#47;n+1 = n-1&#47;n+1+n&#47;n+1= 2n-1&#47;n+1 =&gt;O(1)<br><br>## 均摊时间复杂度<br>这个就是把最后一次n的情况均摊到n-1次上面去，所以就是O(1)的复杂度。<br><br>从最后平均时间复杂度和均摊时间复杂度，真的很像。","like_count":0},{"had_liked":false,"id":244037,"user_name":"我是不是有点","can_delete":false,"product_type":"c1","uid":2144785,"ip_address":"","ucode":"562118E1C8B680","user_header":"https://static001.geekbang.org/account/avatar/00/20/ba/11/389cb512.jpg","comment_is_top":false,"comment_ctime":1598363401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598363401","product_id":100017301,"comment_content":"最好时间复杂度：O(1）<br>最坏时间复杂度：O(n）<br>平均：1<br>均摊:1","like_count":0},{"had_liked":false,"id":243808,"user_name":"snappy","can_delete":false,"product_type":"c1","uid":2125715,"ip_address":"","ucode":"1AEA2F3824C0F2","user_header":"","comment_is_top":false,"comment_ctime":1598280998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598280998","product_id":100017301,"comment_content":"最好时间复杂度O（1），最坏O（n）<br>均摊是O（1）<br>感觉，平均复杂度和均摊复杂度是一个概念，就是把复杂度匀一匀，只不过平均复杂度是通过概率匀，均摊复杂度是把最坏的往最好的匀，不知道这样理解对不对","like_count":0},{"had_liked":false,"id":243732,"user_name":"Geek_f04d81","can_delete":false,"product_type":"c1","uid":1445106,"ip_address":"","ucode":"ECD9F1BE0B2186","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/f2/eff644f9.jpg","comment_is_top":false,"comment_ctime":1598259848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598259848","product_id":100017301,"comment_content":"复杂度分析更多的是给与我们coding时的指引, 抠太细反而没必要, 系数常数都省了, 纠结那么细干嘛.","like_count":0},{"had_liked":false,"id":243520,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598166409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598166409","product_id":100017301,"comment_content":"老师你好， 我是不是可以这么理解 ， 最好最坏复杂度出现的次数， 可以大致分析出均摊时间复杂度的情况， 加入 一次操作最好复杂度O(1) 出现的次数远比 O(n) 出现次数多， 那么它的均摊复杂度就可以理解为O(1) 反之就是 O(n)","like_count":0},{"had_liked":false,"id":243342,"user_name":"小北","can_delete":false,"product_type":"c1","uid":2133309,"ip_address":"","ucode":"8FE84905F0E073","user_header":"https://static001.geekbang.org/account/avatar/00/20/8d/3d/91b1afd3.jpg","comment_is_top":false,"comment_ctime":1598065941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598065941","product_id":100017301,"comment_content":"思路还是没打开 刚讲完这几种 我只想到了最坏 O（n）","like_count":0},{"had_liked":false,"id":243310,"user_name":"🐗Jinx","can_delete":false,"product_type":"c1","uid":1711790,"ip_address":"","ucode":"B5C084F54BF66A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1e/ae/a6d5e24a.jpg","comment_is_top":false,"comment_ctime":1598054482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598054482","product_id":100017301,"comment_content":"老师，想提问一下关于空间复杂度。<br>我感觉空间复杂度的定义很模糊。<br>Space O(1) 的概念是怎样？是无论input的size是多少，只要临时开辟的空间的大小永远是fixed，那么就算O(1)吗？<br>如果我一个input是一个n size的vector，我要找出第一个未出现的最小正整数。例如[3, -9, 1, 17]，那么答案就是2。<br>现在假设我不懂原地哈希，我要借助一个bitset去记录每个正整数是否出现过，有出现过的话就在bitset对应的位置上置为1。别人说这种是O(1)的空间复杂度，因为bitset是固定长度，不会因为input的vector大小改变而改变。我不是很认同，因为我觉得这个跟静态容器还是动态容器没有太大的关系。","like_count":0},{"had_liked":false,"id":242534,"user_name":"wyf","can_delete":false,"product_type":"c1","uid":1478953,"ip_address":"","ucode":"BB7D5A88D89652","user_header":"https://static001.geekbang.org/account/avatar/00/16/91/29/08915ae1.jpg","comment_is_top":false,"comment_ctime":1597752891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597752891","product_id":100017301,"comment_content":"醍醐灌顶<br>","like_count":0},{"had_liked":false,"id":242311,"user_name":"Geek_a814f7","can_delete":false,"product_type":"c1","uid":2129514,"ip_address":"","ucode":"3C0EED9218954B","user_header":"","comment_is_top":false,"comment_ctime":1597667260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597667260","product_id":100017301,"comment_content":"最好O(1)  最坏O(n)  均摊O(1)","like_count":0},{"had_liked":false,"id":242043,"user_name":"西风胡杨","can_delete":false,"product_type":"c1","uid":1488212,"ip_address":"","ucode":"7A35856E27F27B","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/54/3f78e3c8.jpg","comment_is_top":false,"comment_ctime":1597571227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597571227","product_id":100017301,"comment_content":"复杂度分析总结：<br>为什么需要复杂度分析，而不直接用事后统计法。<br>1.事后统计法非常依赖测试环境。<br>2.测试结果受数据规模影响很大<br>时间复杂度分析的实用方法。<br>1.只关注循环执行次数最多的一行代码。<br>2.加法法则，总复杂度等于量级最大的那段代码复杂度。<br>3.乘法法则，嵌套代码复杂度等于嵌套内外复杂度的乘积。<br>常见的复杂度：<br>1.O(1) <br>2.O(logn) , O(nlogn) <br>3.O(m+n)，O(m*n) <br>四个常见复杂度知识点<br>1.最好情况时间复杂度。<br>2.最坏情况时间复杂度。<br>3.平均情况时间复杂度。<br>4.均摊时间复杂度。","like_count":0},{"had_liked":false,"id":241935,"user_name":"Geek_fe0336","can_delete":false,"product_type":"c1","uid":1422144,"ip_address":"","ucode":"09D070BD4EFB57","user_header":"https://static001.geekbang.org/account/avatar/00/15/b3/40/54894c8f.jpg","comment_is_top":false,"comment_ctime":1597505694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597505694","product_id":100017301,"comment_content":"最好是O(1)，最坏是O(n)，均摊是O(1)，均摊按字面理解就是由于最坏情况的O(n)操作（即申请空间的那n次操作）不是每次add都发生，它会在每进行到n次时触发一次，所以可以将这最坏情况下拷贝的n次操作分摊到n次add上，均摊后每次add是2次，所以还是O（1）。","like_count":0},{"had_liked":false,"id":241803,"user_name":"攻城狮","can_delete":false,"product_type":"c1","uid":1197444,"ip_address":"","ucode":"7D2C2836052C4C","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/84/4b309ba9.jpg","comment_is_top":false,"comment_ctime":1597450280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597450280","product_id":100017301,"comment_content":"示例图中  (3n+1)&#47;4  怎么推出来的？？ 我咋觉得是  (n+1)&#47;2，谁能帮我解答一下啊","like_count":0},{"had_liked":false,"id":241683,"user_name":"Nocye","can_delete":false,"product_type":"c1","uid":1984005,"ip_address":"","ucode":"C1B64AE17AEDF8","user_header":"https://static001.geekbang.org/account/avatar/00/1e/46/05/ceae38f3.jpg","comment_is_top":false,"comment_ctime":1597390065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597390065","product_id":100017301,"comment_content":"最好是O(1) 最坏是O(n) 平均是O(1),均摊是O(1) 因为数组大部分时间都在插入操作,只有在数组满的时候才会进行O(n)的扩容操作,且有规律,一定是n次插入,1次扩容的循环","like_count":0},{"had_liked":false,"id":241624,"user_name":"踏歌而行","can_delete":false,"product_type":"c1","uid":1691577,"ip_address":"","ucode":"7C3C3D5896122A","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/b9/2e8217e6.jpg","comment_is_top":false,"comment_ctime":1597373427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597373427","product_id":100017301,"comment_content":"<br> &#47;&#47; array表示一个长度为n的数组<br> &#47;&#47; 代码中的array.length就等于n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }<br><br>但如果数组一开始就有空闲空间，则直接将数据插入数组。<br>一开始就有空闲时间是什么意思？<br>","like_count":0},{"had_liked":false,"id":241377,"user_name":"Mr.埃克斯","can_delete":false,"product_type":"c1","uid":1400806,"ip_address":"","ucode":"855BE5DFD2BB0B","user_header":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","comment_is_top":false,"comment_ctime":1597282066,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597282066","product_id":100017301,"comment_content":"时间复杂度最好的为O(1),最坏的为O(n)，平均为O(1)，均摊为O(1)。","like_count":0},{"had_liked":false,"id":241170,"user_name":"Im me","can_delete":false,"product_type":"c1","uid":1792714,"ip_address":"","ucode":"FF7DEED4BB4C37","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5a/ca/4d5d23d1.jpg","comment_is_top":false,"comment_ctime":1597207647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597207647","product_id":100017301,"comment_content":"内存泄漏了，是吧，哈哈哈","like_count":0},{"had_liked":false,"id":240748,"user_name":"王振华 程序员","can_delete":false,"product_type":"c1","uid":1131957,"ip_address":"","ucode":"31BB337642B882","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/b5/c3cfb198.jpg","comment_is_top":false,"comment_ctime":1597052290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597052290","product_id":100017301,"comment_content":"求平均复杂度的那个公式应该是等于 n(n+2) &#47; 2(n+1) 吧?<br>当然这对理解问题也没什么影响","like_count":0},{"had_liked":false,"id":240585,"user_name":"剑影梦残","can_delete":false,"product_type":"c1","uid":1284481,"ip_address":"","ucode":"A5C5DAA49F6996","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/XSnxM4uP67mVu7ZtPxWqUIvFH15pibGt1rFd34EiblN6NFfgKEKBuibLlI1kUjOIfbY56icwBibn6MmXzSEXm7AHicdQ/132","comment_is_top":false,"comment_ctime":1596985689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596985689","product_id":100017301,"comment_content":"最坏O(n)，最好O(1).同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，更准确的描述代码的时间复杂度，所以引入这4个概念。算平均复杂度有点麻烦，平摊就是O(1)了。","like_count":0},{"had_liked":false,"id":240446,"user_name":"李和桃","can_delete":false,"product_type":"c1","uid":1015877,"ip_address":"","ucode":"97E66953070EE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/45/d719f7df.jpg","comment_is_top":false,"comment_ctime":1596933920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596933920","product_id":100017301,"comment_content":"最好时间复杂读为O(1)，这种情况是不进行扩容的情况。<br>最坏时间复杂度为O(n)，这种情况是进行扩容，需要遍历旧数组的所有元素复制到新的数组。<br>均摊时间复杂读为O(1)，一个O(n)的操作后面跟着n-1个O(1),平均下来就是O(1)","like_count":0},{"had_liked":false,"id":240291,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1596854277,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596854277","product_id":100017301,"comment_content":"最好、最坏情况时间复杂度、平均情况时间复杂度（特殊的：均摊时间复杂度），都是衡量数据结构和算法的执行效率的方法。因为函数的输入不同，每个输入的复杂度也可能不同，也就有了不同的衡量方法。","like_count":0},{"had_liked":false,"id":239961,"user_name":"CptW","can_delete":false,"product_type":"c1","uid":2108743,"ip_address":"","ucode":"A3174302EBD4B2","user_header":"https://static001.geekbang.org/account/avatar/00/20/2d/47/6a5ab601.jpg","comment_is_top":false,"comment_ctime":1596702083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596702083","product_id":100017301,"comment_content":"关于find和sert函数的区别，第一点中，查找函数大部分情况下找不到（如从1-100的数中找一个数），而插入算法大部分情况是有空闲的，这是我的理解。","like_count":0},{"had_liked":false,"id":239408,"user_name":"火很大先生","can_delete":false,"product_type":"c1","uid":1242070,"ip_address":"","ucode":"80746AFCEF5FE7","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/d6/5d55c315.jpg","comment_is_top":false,"comment_ctime":1596525920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596525920","product_id":100017301,"comment_content":"均摊时间复杂度是O(1),这是一组连贯的操作，往数组中加入数据，一般都是O(1)只有出现超出数组长度时才会就行扩容，新建一个2倍的数组，然后将原来的内容复制过去，再添加，最坏的情况O(n）,但是一个O(n)之后又是多个O(1),所以用均摊时间复杂度","like_count":0},{"had_liked":false,"id":238337,"user_name":"奥佛铎","can_delete":false,"product_type":"c1","uid":1234919,"ip_address":"","ucode":"A1D544E5F22B7F","user_header":"","comment_is_top":false,"comment_ctime":1596125041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596125041","product_id":100017301,"comment_content":"哈哈，感觉自己在看stl vector的源码","like_count":0},{"had_liked":false,"id":238307,"user_name":"hicrystal","can_delete":false,"product_type":"c1","uid":1339281,"ip_address":"","ucode":"559C59248E4AF7","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/91/aed01ddf.jpg","comment_is_top":false,"comment_ctime":1596117390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596117390","product_id":100017301,"comment_content":"老师为什么要算平均的时候 要多加一个n呢？","like_count":0},{"had_liked":false,"id":238284,"user_name":"SandCarving","can_delete":false,"product_type":"c1","uid":2056201,"ip_address":"","ucode":"6B97DB71613A46","user_header":"https://static001.geekbang.org/account/avatar/00/1f/60/09/a8e7913b.jpg","comment_is_top":false,"comment_ctime":1596111156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596111156","product_id":100017301,"comment_content":"对复杂度进行分析可以从以下四个方面分析：<br>1、最好时间复杂度<br>2、最坏时间复杂度<br>3、平均时间复杂度<br>4、均摊时间复杂度<br>最好：数组有空间的时候——1，即O(1)<br>最坏：数组没有空间的时候——10，即O(len)<br>平均：假设概率都是相同的<br>则1&#47;len+1*1+…+1&#47;len+1*1+1&#47;len+1*len=2*len&#47;len+1，即为O(1)<br>采用均摊：将没有空间时候的10分摊到各个1中，可得时间复杂度为O(1)<br>在这里，想问一下，这个均摊中的均摊分析具体是如何进行的，如果我前面是m个O(1)的复杂度相加，再紧跟一个O(n)复杂度，那还能进行分摊吗？n=m+3或者n=2m的情况下呢？","like_count":0},{"had_liked":false,"id":238218,"user_name":"Polly","can_delete":false,"product_type":"c1","uid":2066369,"ip_address":"","ucode":"733BE085FE097E","user_header":"https://static001.geekbang.org/account/avatar/00/1f/87/c1/221dbc33.jpg","comment_is_top":false,"comment_ctime":1596096813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596096813","product_id":100017301,"comment_content":"这里分析add 时间复杂度，也许那个len不给具体10更好，因为当n给定不就是循环常数次么？那样子复杂度不都是O(1)嘛😂，我很菜鸡我只是有问题就问了，勿喷哈哈哈","like_count":0},{"had_liked":false,"id":238209,"user_name":"Polly","can_delete":false,"product_type":"c1","uid":2066369,"ip_address":"","ucode":"733BE085FE097E","user_header":"https://static001.geekbang.org/account/avatar/00/1f/87/c1/221dbc33.jpg","comment_is_top":false,"comment_ctime":1596095817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596095817","product_id":100017301,"comment_content":"为什么平均了时间复杂度为O（1）呢？最后算出来是2n&#47;n+1，这里最高阶是n?还是因为类似于求极限么？所以当n无穷大时为2，","like_count":0},{"had_liked":false,"id":236891,"user_name":"Geek_6725b5","can_delete":false,"product_type":"c1","uid":1991426,"ip_address":"","ucode":"379B3DDD67B774","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JuoHr2r7lA9Sh7Phmrw86JVObha0hKsSYraibvicmVHdYe4UibB3htibR3IqdXGbzHYGicViblSseqdzG2hrSMD1OewA/132","comment_is_top":false,"comment_ctime":1595578953,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595578953","product_id":100017301,"comment_content":"最好，最坏，平均，均摊复杂度从不同的角度描述了一个算法在不同情况下对资源的占用。最好情况，可以认为是条件尽可能简单情况下的算法复杂度，最坏情况，可以认为是各种意外都产生的算法复杂度，平均复杂度和均摊复杂度则可以认为是在普通情况下的算法资源占用情况。平均和均摊不同的地方在于，平均假设各种可能相同的情况下，算法的性能，而均摊则是一种平均的特殊情况，类似于一种周期性资源消耗在单位时间内的均摊结果。","like_count":0},{"had_liked":false,"id":236171,"user_name":"寒江雪","can_delete":false,"product_type":"c1","uid":2073453,"ip_address":"","ucode":"0738459213414C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a3/6d/2107f4a0.jpg","comment_is_top":false,"comment_ctime":1595334592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595334592","product_id":100017301,"comment_content":"老师您好，我想问一下最后一道题第十六行那种写法，不是不能把一个数组直接赋值给另一个数组吗？","like_count":0},{"had_liked":false,"id":235718,"user_name":"Geek_2032ea","can_delete":false,"product_type":"c1","uid":2067459,"ip_address":"","ucode":"A0E6CA50814616","user_header":"","comment_is_top":false,"comment_ctime":1595161864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595161864","product_id":100017301,"comment_content":"打卡！每天两讲，希望自己可以坚持下去,大家都是每天几讲呢？练习题：最好是O(1),最差是O(n),均摊是O(n)","like_count":0},{"had_liked":false,"id":235244,"user_name":"老徐","can_delete":false,"product_type":"c1","uid":2063532,"ip_address":"","ucode":"34566E3D28620C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7c/ac/482c6eb4.jpg","comment_is_top":false,"comment_ctime":1594950655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594950655","product_id":100017301,"comment_content":"请问一次O(n^2) + n次O(1)的时间复杂度， 和 一次O(n^2)+n次O(n) 的时间复杂度是多少？","like_count":0},{"had_liked":false,"id":234938,"user_name":"13693113483","can_delete":false,"product_type":"c1","uid":1318913,"ip_address":"","ucode":"39CF3202F58847","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJwicoopV8ZJuxPQUfATepdg7zHQG1vpZpickQYicRN0u9qwibK2lq7MDpt0ZFdofnwshNcibkLdqk9ZRg/132","comment_is_top":false,"comment_ctime":1594832396,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594832396","product_id":100017301,"comment_content":"我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置","like_count":0},{"had_liked":false,"id":234436,"user_name":"Geek_92b89e","can_delete":false,"product_type":"c1","uid":2061044,"ip_address":"","ucode":"6ECC4DC862DEAF","user_header":"","comment_is_top":false,"comment_ctime":1594692103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594692103","product_id":100017301,"comment_content":"最好时间复杂度：O(1)<br>最坏时间复杂度：O(n)<br>平均时间复杂度：O(1)<br>均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":233937,"user_name":"书到用时方恨少","can_delete":false,"product_type":"c1","uid":2062541,"ip_address":"","ucode":"AB4A5B9FED305F","user_header":"","comment_is_top":false,"comment_ctime":1594523649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594523649","product_id":100017301,"comment_content":"思考题最好时间复杂度O(1),最坏时间复杂度O(n),均摊时间复杂度O(1)","like_count":0},{"had_liked":false,"id":233852,"user_name":"Merry","can_delete":false,"product_type":"c1","uid":1024036,"ip_address":"","ucode":"E2A114E10814BA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/24/68c679c8.jpg","comment_is_top":false,"comment_ctime":1594479402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594479402","product_id":100017301,"comment_content":"最好情况时间复杂度：O(1)<br>最坏情况时间复杂度：O(n)<br>平均情况空间复杂度：O(1)","like_count":0},{"had_liked":false,"id":233294,"user_name":"dayday","can_delete":false,"product_type":"c1","uid":1478294,"ip_address":"","ucode":"960C08A6618FE2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/glMH9jUOFS96sukOzshKWgYbZNxOB39RCemvsZ9ziciaWhJIN2GbziavvCR3rthicicGVf9AU5yoH1hrV6rVqE1swLA/132","comment_is_top":false,"comment_ctime":1594280856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594280856","product_id":100017301,"comment_content":"均摊的时间复杂度为o(1)","like_count":0},{"had_liked":false,"id":232246,"user_name":".","can_delete":false,"product_type":"c1","uid":2055898,"ip_address":"","ucode":"77609EE91386C4","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/da/9064df96.jpg","comment_is_top":false,"comment_ctime":1593934175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593934175","product_id":100017301,"comment_content":"- 最好情况时间复杂度（best case time complexity）<br><br>  最好的情况<br><br>- 最坏情况时间复杂度（worst case time complexity）<br><br>  最坏的情况<br><br>- 平均情况时间复杂度（average case time complexity<br><br>  概率上的平均<br><br>- 均摊时间复杂度（amortized time complexity）和 摊还分析。<br><br>  若是在有规律的一系列操作中,在一连串的操作有存在高复杂度的操作,尝试将其分摊到低复杂度的操作上","like_count":0},{"had_liked":false,"id":232015,"user_name":"Kevin~","can_delete":false,"product_type":"c1","uid":1080660,"ip_address":"","ucode":"361EC624BD8F83","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/54/0ae86230.jpg","comment_is_top":false,"comment_ctime":1593831823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593831823","product_id":100017301,"comment_content":"我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1&#47;2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1&#47;n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1&#47;(2n)。<br><br>为什么查找的数据出现在 0～n-1 中任意位置的概率是 1&#47;(2n)？ <br><br>这个有点不理解","like_count":0},{"had_liked":false,"id":231758,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1593765729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593765729","product_id":100017301,"comment_content":"这个符合均摊复杂度，在不超过数组长度的时候，为最好的复杂度 O(1),在超过数组长度的时候，做了数组复制，最坏复杂度为O(n), 复杂度呈现一定的规律性，所以均摊复杂度为O(1)","like_count":0},{"had_liked":false,"id":231425,"user_name":"evan","can_delete":false,"product_type":"c1","uid":2052287,"ip_address":"","ucode":"BCF77FD6AC8651","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/FflZ2nuJwJxMvHGMZVChjejqNjxC75jXIjy7OKNnksRGo7ebT269ZHHTGwaHIEHPHUXVSCWyMWqE2caicvAxgag/132","comment_is_top":false,"comment_ctime":1593673846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593673846","product_id":100017301,"comment_content":"struct queue {<br>    int data[1000];<br>    int head;<br>    int tail;<br>};<br><br>struct stack<br>{<br>    int data[10];<br>    int top;<br>};<br><br><br>int main() {<br><br>    struct queue a, b;<br>    struct stack s;<br><br>    int p[10], i, c = 0,* head,* tail,* r,temp;<br><br>    &#47;&#47;init<br>    a.head = 0;<br>    a.tail = 0;<br>    b.head = 0;<br>    b.tail = 0;<br>    s.top = -1;<br>    <br><br>    cout &lt;&lt; &quot;first array:&quot; &lt;&lt; endl;<br><br>    for (i = 0; i &lt; 6; i++) {<br>        cin &gt;&gt; a.data[a.tail++];<br>    }<br><br>    cout &lt;&lt; &quot;second array:&quot; &lt;&lt; endl;<br>    <br>    for (i = 0; i &lt; 6; i++) {<br>        cin &gt;&gt; b.data[b.tail++];<br>    }<br><br><br><br>    for (i = 0; i &lt; 10; i++) {<br>        p[i] = 0;<br>    }<br><br>    while (a.head != a.tail &amp;&amp; b.head != b.tail) {<br>        <br>        if (c % 2 == 0) {<br>            head = &amp;a.head;<br>            tail = &amp;a.tail;<br>            r = a.data;<br>        }<br>        else {<br>            head = &amp;b.head;<br>            tail = &amp;b.tail;<br>            r = b.data;<br>        }<br><br>        s.data[++s.top] = r[(*head)++];&#47;&#47;³öÅÆ<br>        temp = s.data[s.top];<br>        p[temp]++;&#47;&#47;±êÖ¾ÕâÕÅÅÆµÄÊýÁ¿<br><br>        if (p[temp] &gt; 1) {<br>            r[(*tail)++] = s.data[s.top--];<br>            while (s.data[s.top] != temp) {<br>                p[s.data[s.top]]--;<br>                r[(*tail)++] = s.data[s.top--];<br>            }<br>            p[temp]--;<br>        }<br><br>        c++;<br>    }<br><br>    if (a.head == a.tail) {<br>        cout &lt;&lt; &quot;b victory!&quot; &lt;&lt; endl;<br>    }<br>    else {<br>        cout &lt;&lt; &quot;a victory!&quot; &lt;&lt; endl;<br>    }<br><br>    return 0;<br>}<br><br>求这段代码时间复杂度。。","like_count":0},{"had_liked":false,"id":231039,"user_name":"盘尼西林","can_delete":false,"product_type":"c1","uid":1180922,"ip_address":"","ucode":"303FEC41D65B10","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/fa/76448fa3.jpg","comment_is_top":false,"comment_ctime":1593570640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593570640","product_id":100017301,"comment_content":"最好情况时间复杂度:O(1)<br>最坏情况时间复杂度:O(n)<br>平均情况时间复杂度:O(1)<br>均摊情况时间复杂度:O(1)","like_count":0},{"had_liked":false,"id":230693,"user_name":"航","can_delete":false,"product_type":"c1","uid":2050135,"ip_address":"","ucode":"FFAE304D6D4AD6","user_header":"https://static001.geekbang.org/account/avatar/00/1f/48/57/f81acea8.jpg","comment_is_top":false,"comment_ctime":1593466400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593466400","product_id":100017301,"comment_content":"例题，<br>我们很容得知，一直到第n次才会发生一次for循环，执行n次代码，其他情况为O（1）复杂度<br>1. 所以最好复杂度是O（1）<br>2.最坏复杂度是O（n）<br>3. 平均复杂度我们偏向用加权法，有n+1种情况，前面n种都是O（1），最后一种是O（n），所以有n&#47;n+1 = O（1）<br>4. 均摊法的话就是前面n种都是一，最后一种是n，最好一种均摊到前面n种，所以平均复杂度自然是O（1）","like_count":0},{"had_liked":false,"id":230538,"user_name":"薛锦辉","can_delete":false,"product_type":"c1","uid":1454570,"ip_address":"","ucode":"5535B75604813F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/w5NYxo0AINI1oDHswCXfUmXpwENbiaKibFiaF8x1CMf0QH5HNqAQj9icIkCkzkoN3xWS1ibAg6ILTFGrPSsCicicmWD9A/132","comment_is_top":false,"comment_ctime":1593412722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593412722","product_id":100017301,"comment_content":"最好情况O(1),最坏情况O(n)，平均复杂度：O(1)，均摊复杂度:O(1)","like_count":0},{"had_liked":false,"id":229819,"user_name":"Ray","can_delete":false,"product_type":"c1","uid":2046685,"ip_address":"","ucode":"37E86CE67F004B","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3a/dd/e44bacb8.jpg","comment_is_top":false,"comment_ctime":1593155595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593155595","product_id":100017301,"comment_content":"只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。<br>这句话啥意思，比如什么情况啊？","like_count":0},{"had_liked":false,"id":229652,"user_name":"LoverぜJing_","can_delete":false,"product_type":"c1","uid":1126809,"ip_address":"","ucode":"A690EC751A8DB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/99/18740047.jpg","comment_is_top":false,"comment_ctime":1593088307,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1593088307","product_id":100017301,"comment_content":"老师，2n&#47;(n+1) 时间复杂度为什么是O(1)，一直没看明白，2n&#47;(n+1) = (2(n+1)-2)&#47;n+1=2-2&#47;n+1，而去掉系数和常量，最后也是1&#47;n，是我哪理解错了么","like_count":0,"discussions":[{"author":{"id":2068359,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlAWhNHHibHobicuPs5icsSicId1wq97uElkGhP2bzqa1mAiastFFO4Uj07RkMg1qmmWiawaVowU6Mg79g/132","nickname":"Geek_5080f0","note":"","ucode":"CDEAEDF40DD6BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291769,"discussion_content":"记不清哪里有2n/（n+1）了，但是按照你的问题，n是整数，所以1/n一定小于1，所以可以作为常数处理，也就是忽略不计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594950337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229106,"user_name":"Stone_zhu","can_delete":false,"product_type":"c1","uid":2041676,"ip_address":"","ucode":"E37BB5426B5A82","user_header":"https://static001.geekbang.org/account/avatar/00/1f/27/4c/dccdaa62.jpg","comment_is_top":false,"comment_ctime":1592897982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592897982","product_id":100017301,"comment_content":"最好是O(1),最坏是O(n),这个毫无疑问<br>纠结之处在于均摊的复杂度,第n次,第n+1...第n+m次的复杂度都是O(n).<br>抛开语言的逻辑理解,直接用公式计算理解就很清晰了.<br>第n次,n+1次...n+m次都看为n.<br>根据老师的均摊时间复杂度的公式,前n-1个复杂度都为O(1),最后一个n的复杂度为O(n)<br>得出结论,均摊时间复杂度为O(1)<br><br>","like_count":0},{"had_liked":false,"id":228848,"user_name":"阳光和严谨","can_delete":false,"product_type":"c1","uid":2045307,"ip_address":"","ucode":"9D6AF2F885A865","user_header":"https://static001.geekbang.org/account/avatar/00/1f/35/7b/582bb8b1.jpg","comment_is_top":false,"comment_ctime":1592823928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592823928","product_id":100017301,"comment_content":"现在已是2020年了。还是答一下吧。时间复杂度最好是O1，最坏是On，摊还是O1","like_count":0},{"had_liked":false,"id":227786,"user_name":"Albert Stack","can_delete":false,"product_type":"c1","uid":2038525,"ip_address":"","ucode":"BBC3F3F457985A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/1a/fd/41337d1e.jpg","comment_is_top":false,"comment_ctime":1592479918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592479918","product_id":100017301,"comment_content":"老师，我想请问一下，如果在算均摊时间复杂度的时候，如果普通情况下是O(1)而在某个极端情况是O(n^x),x&gt;2或者是O(2^x)这种情况，均摊时间复杂度应该是多少呢？","like_count":0},{"had_liked":false,"id":227771,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1592474215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592474215","product_id":100017301,"comment_content":"这应该是集合中的add方法吧，新增加扩容，vector，之前看过源码，大致思路一样，反正在插入的时候，基本上，都是o1，有空就插，没空就等，重的来说，一次插入的可能性还是很大的，没必要纠结那些概率","like_count":0},{"had_liked":false,"id":227089,"user_name":"Mamba","can_delete":false,"product_type":"c1","uid":1475049,"ip_address":"","ucode":"8B3EC90736B8EB","user_header":"https://static001.geekbang.org/account/avatar/00/16/81/e9/d131dd81.jpg","comment_is_top":false,"comment_ctime":1592280686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592280686","product_id":100017301,"comment_content":"首先结论：最好O（1）    最坏O（n）    平均O（1）    均摊O（1）<br>最好时间复杂度：这个不用多说，都是在长度范围内插入，每次只需要做一次赋值操作，然后位置加一即可，所以最好时间复杂度为O（1）<br><br>最坏时间复杂度：这个其实是随着数组长度不断变化的，当数组长度足够大（也必须是足够大才能分析复杂度），就把len和n等价吧<br>那么——<br>数组长度为len时    最坏情况下是正好加入第len个数，最耗时的是copy操作，需要重复len次（0~len-1）<br>数组长度为2*len时    最坏情况下是正好加入第2*len个数，最耗时的是copy操作，需要重复len次（len~2len-1）<br>数组长度为4*len时    最坏情况下是正好加入第4*len个数，最耗时的是copy操作，需要重复2len次（2len~4len-1）<br>数组长度为8*len时    最坏情况下是正好加入第8*len个数，最耗时的是copy操作，需要重复4len次（4len~8len-1）<br>```````<br>数组长度为2k*len时    最坏情况下是正好加入第2k*len个数，最耗时的是copy操作，需要重复klen次（klen~2klen-1）<br>总结规律：无论是那一层的最坏情况，重复次数都是len的常数次，所以最坏时间复杂度就是O(n)<br><br>平均时间复杂度：只需要揪出其中一层分析即可，(1+1+1+1+……+1+n)&#47;n=2n&#47;n=2<br>所以平均时间复杂度为O（1）<br><br>均摊时，把最坏均摊到前面n次最好身上，相当于每一个add都要自己赋值一次然后copy自己一次<br>然后均摊时间复杂度为O（1）<br>","like_count":0},{"had_liked":false,"id":227080,"user_name":"Mike Zheng","can_delete":false,"product_type":"c1","uid":2039829,"ip_address":"","ucode":"D7F062DDE2A93A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ccdlzibsv0umJB4QeX0K6JBAas41F3Xobib8rudwic6vNgNYVa4WUdhU9vMKfKRuU3P0u3V0flrn2tlOrDdlCBFmQ/132","comment_is_top":false,"comment_ctime":1592277359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592277359","product_id":100017301,"comment_content":"王老师您好，本节课有以下三点我不太理解（希望您或其他同学看到能解决我的疑惑，非常感谢）：<br><br>1、根据你的讲解，`T(n) = f(n) * unit_time` 又 `T(n) = O(n)`，那么为什么 O 是不是一个函数 `fx = unit_time * x` 呢？如果是的话，时间只与单位时间和代码行数有关，似乎不能反映「规模的变化」。所以，大 O 仅仅是一个记号？<br><br>2、大 O 记号跟进这两节出现的用法：`O(f(n))` 以及 `O(n), O(logn)` 等等，为什么有时表示「代码数量」有时表示「问题规模」呢？<br><br>3、不太理解摊还分析为什么可以用大 O？<br>  3.1、具体来说上面 `insert` 的例子：均摊时间复杂度是 O(1)，但如果按上一节的方法（我以为）这个函数的时间复杂度是 O(n)，那么实际来说讨论此函数「时间复杂度」应该是前者还是后者呢？<br>  3.2、更宽泛来说：各种不同的复杂度分析，是否有其不同的记号？（Theta 之类的？）<br><br>4、算 3.1 的进一步疑问：摊还分析的应用&#47;作用是？比较容易理解其他复杂度背后的含义（个人理解：「最理想情况」、「最差的情况」、「通常的情况」），但是摊还分析的结果代表的是什么呢？<br><br>上面是我个人的理解和疑惑，翻了前几页留言没有找到类似的问题或解答，所以提出。<br>难免有误，望回复的各位高人谅解和指出：）再次感谢！","like_count":0},{"had_liked":false,"id":226730,"user_name":"Kingdom","can_delete":false,"product_type":"c1","uid":1290865,"ip_address":"","ucode":"A45866C5324310","user_header":"https://static001.geekbang.org/account/avatar/00/13/b2/71/76481005.jpg","comment_is_top":false,"comment_ctime":1592191335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592191335","product_id":100017301,"comment_content":"每次循环copy之后不是跟着n次o(1)吗？说明执行了循环内的o(n)+n*(1)啊，为什么概率就变成了1&#47;n+1?","like_count":0},{"had_liked":false,"id":226459,"user_name":"CoderArthur","can_delete":false,"product_type":"c1","uid":1625233,"ip_address":"","ucode":"5B591914F0F67C","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","comment_is_top":false,"comment_ctime":1592110354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592110354","product_id":100017301,"comment_content":"最好情况时间复杂度：O(1)<br>最坏情况时间复杂度：O(n)<br>平均情况时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":226410,"user_name":"L_Ch","can_delete":false,"product_type":"c1","uid":1582935,"ip_address":"","ucode":"5B18D5A99574CD","user_header":"https://static001.geekbang.org/account/avatar/00/18/27/57/811726ba.jpg","comment_is_top":false,"comment_ctime":1592070888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592070888","product_id":100017301,"comment_content":"记得算法导论中对于递归问题的复杂度分析的方法有介绍，觉得可能还需要补充这方面的讲解。主方法介绍。<br>","like_count":0},{"had_liked":false,"id":226072,"user_name":"dream7519","can_delete":false,"product_type":"c1","uid":1098624,"ip_address":"","ucode":"55E229FA55E15C","user_header":"","comment_is_top":false,"comment_ctime":1591945758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591945758","product_id":100017301,"comment_content":"练习题：最好是O(1),最坏是O(n),平均平摊是O(1).","like_count":0},{"had_liked":false,"id":224931,"user_name":"*","can_delete":false,"product_type":"c1","uid":1637008,"ip_address":"","ucode":"61E466653C4B8C","user_header":"https://static001.geekbang.org/account/avatar/00/18/fa/90/6ff9a256.jpg","comment_is_top":false,"comment_ctime":1591595911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591595911","product_id":100017301,"comment_content":"请问insert函数的清空在哪做的，我是没找到","like_count":0},{"had_liked":false,"id":224596,"user_name":"总会有那么一天","can_delete":false,"product_type":"c1","uid":1741846,"ip_address":"","ucode":"5B1A5ED06E6A78","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLrbyvyBdlQfH4qEuPvALXPxbG4qMrLibibntO4WInf7ViaVYcIUmriblbEosNLKoEdATSBTKmrk1YrXw/132","comment_is_top":false,"comment_ctime":1591455828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591455828","product_id":100017301,"comment_content":"每次听课总结一下：<br>最好时间复杂度：在理想情况下，完成一组数据操作时间复杂度；<br>最坏时间复杂度：在最坏情况下，完成一组数据操作时间复杂度；<br>平均时间复杂度：加权平均时间复杂度或者成为期望平均时间复杂度；<br>均摊时间复杂度：是一种特殊的平均时间复杂度。需要满足两个条件 <br>1. 进行一组数据操作，大部分情况的时间复杂度都比较小，只有少部分情况的时间复杂度比较差；<br>2. 两者的出现的次数存在一定的连贯关系。<br>——————————————————————————————————————————<br>课后习题<br>最好时间复杂度：数组未满 O（1）<br>最坏时间复杂度：数组已满，执行循环O（n）<br>平均时间复杂度：和add函数一样 O（1）<br>均摊时间复杂度：把数组满的操作均摊到数组未满的操作下，即O（1）。","like_count":0},{"had_liked":false,"id":224526,"user_name":"阿刚Up","can_delete":false,"product_type":"c1","uid":1247999,"ip_address":"","ucode":"E8FCDD64BF7A93","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GxcRoicI6agtdOpt2WxaAEiaR9E5rIr9km5ibxzs6uiabMqDMwLG5jdkzHo80iaKnYwaPu8mBZCVxtCormT57ibm0Jnw/132","comment_is_top":false,"comment_ctime":1591430801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591430801","product_id":100017301,"comment_content":"求助下各位大佬：思考题中第16行array = new_array;其中arry数组的大小是10，new_array数组大小是20，怎么能直接复制过去呢？ ？？","like_count":0},{"had_liked":false,"id":224465,"user_name":"小马过河","can_delete":false,"product_type":"c1","uid":1990297,"ip_address":"","ucode":"CB8AD608237361","user_header":"https://static001.geekbang.org/account/avatar/00/1e/5e/99/d5488c67.jpg","comment_is_top":false,"comment_ctime":1591411853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591411853","product_id":100017301,"comment_content":"原来大家和我的反应一样，回复中排名第一中的解释。不过我想了一下，自己想通了。把下标写1其实就是清空。但是真正的清空也有好处，防止调用的时候用错喽","like_count":0},{"had_liked":false,"id":224302,"user_name":"keanuhrb","can_delete":false,"product_type":"c1","uid":2030694,"ip_address":"","ucode":"CFE83FF18DD24C","user_header":"","comment_is_top":false,"comment_ctime":1591340673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591340673","product_id":100017301,"comment_content":"从老师的例子上看，摊还就是一种特殊的平均时间复杂度。它的特殊在于它的应用背景具有一些特殊的特点：一次特殊，多次正常，具有周期性。而平均时间复杂度则不管你有几次特殊，几次正常，都给你平均了事。摊还有点像一年一次瘫痪的12306。","like_count":0},{"had_liked":false,"id":224054,"user_name":"世泽松","can_delete":false,"product_type":"c1","uid":1298563,"ip_address":"","ucode":"D87811174DB165","user_header":"https://static001.geekbang.org/account/avatar/00/13/d0/83/3793e5bd.jpg","comment_is_top":false,"comment_ctime":1591263250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591263250","product_id":100017301,"comment_content":"最好是O(1)<br>最差是O(n)<br>平均是1<br>上述值的计算和之前例题计算方法一样，不过是改了例题中的for中的语句。但是语句的时间复杂度依旧都是O(1)。同样时间复杂度的语句替换后根本不影响时间复杂度的计算。<br>","like_count":0},{"had_liked":false,"id":224042,"user_name":"家兴","can_delete":false,"product_type":"c1","uid":1668014,"ip_address":"","ucode":"605CEA5BB876F5","user_header":"https://static001.geekbang.org/account/avatar/00/19/73/ae/59455894.jpg","comment_is_top":false,"comment_ctime":1591261843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591261843","product_id":100017301,"comment_content":"课后题的均摊时间复杂度是O(1)，我是这么理解的，最差时间复杂度O(n)是数组空间不足,是因为前面n-1次O(1)的操作，所以要均摊这次的复杂度。 如果单求时间复杂度的话 还是O（n）吧（不太确定）","like_count":0},{"had_liked":false,"id":223462,"user_name":"Jamy","can_delete":false,"product_type":"c1","uid":1709931,"ip_address":"","ucode":"3FB9A31982FAB9","user_header":"https://static001.geekbang.org/account/avatar/00/1a/17/6b/c35b3108.jpg","comment_is_top":false,"comment_ctime":1591095846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591095846","product_id":100017301,"comment_content":"总结下就是评论和均摊其实没有太大的差异，按概率计算出分子和分母的比（只取带n的参数比，如果比值为常量时间复杂度就为O（1）否则为O(n的次方)）","like_count":0},{"had_liked":false,"id":223196,"user_name":"鲸鱼少年丶","can_delete":false,"product_type":"c1","uid":2017876,"ip_address":"","ucode":"552898FF528561","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ca/54/fecdc655.jpg","comment_is_top":false,"comment_ctime":1591018906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591018906","product_id":100017301,"comment_content":"练习题<br>最好时间复杂度（运气最好）<br>插入时刚好数组有剩余空间，所以复杂度O(1)<br>最坏时间复杂度（运气最差）<br>插入时需要扩大数组到两倍，还需要重新放入新数组，复杂度为O(n)<br>均摊时间复杂度<br>我要考虑下，我这会而会遇到数组空间什么状态，可能是1，2，3，4，....，n 对，还可能满了，那每个出现的概率是什么呢，一共有n+1种情况，哦，那概率p=1&#47;n+1,巧的是每次n次出现一次加倍，虽然插入区间可能会变化，但是概率和仍然不变，因此1+2+3+...+n+...+kn+kn&#47;kn+1=O(1)<br>","like_count":0},{"had_liked":false,"id":223158,"user_name":"刘胜","can_delete":false,"product_type":"c1","uid":1251625,"ip_address":"","ucode":"487374D72543E3","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/29/f9490983.jpg","comment_is_top":false,"comment_ctime":1591012428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591012428","product_id":100017301,"comment_content":"最好O(1),最坏O(n),平均O(1),均摊O(1)均摊是输入一个数，n次只发生了一次。","like_count":0},{"had_liked":false,"id":223153,"user_name":"Geek_849f9f","can_delete":false,"product_type":"c1","uid":2027473,"ip_address":"","ucode":"67601F35A91999","user_header":"","comment_is_top":false,"comment_ctime":1591010274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591010274","product_id":100017301,"comment_content":"课后练习题：最好O(1)，最差O(n)，均摊是O(1)；<br>时间复杂度：最好时间复杂度、最坏时间复杂度、平均时间复杂度及均摊时间复杂度","like_count":0},{"had_liked":false,"id":222636,"user_name":"文康","can_delete":false,"product_type":"c1","uid":2019485,"ip_address":"","ucode":"449AEA16A1ABE7","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d0/9d/1d48fa4d.jpg","comment_is_top":false,"comment_ctime":1590853482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590853482","product_id":100017301,"comment_content":"只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。<br>为啥我感觉这有个小疑惑，就是我不分析，我咋知道这个代码的复杂度有量级的区别呀？","like_count":0},{"had_liked":false,"id":221962,"user_name":"0527","can_delete":false,"product_type":"c1","uid":2010471,"ip_address":"","ucode":"7D4A79580374E7","user_header":"","comment_is_top":false,"comment_ctime":1590643084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590643084","product_id":100017301,"comment_content":"前n次可以直接插入，复杂度为O(1)<br>第n+1次需要先复制一遍，再插入一次，复杂度为O(n)<br>所以最好O(1)，最坏O(n)<br>均摊(1*n+1)&#47;(n+1)，即O(1)<br>这样算对吗？","like_count":0},{"had_liked":false,"id":219763,"user_name":"Monna","can_delete":false,"product_type":"c1","uid":1445939,"ip_address":"","ucode":"5267BF184F9D14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Vk0HnRNNGqJjAP8eC6BuQdap04LgfOdOtUPTx6gicxdS32skDytaHXrDutWTmbUxPMoXQxj6CTBQibPI511DPYHg/132","comment_is_top":false,"comment_ctime":1590075287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590075287","product_id":100017301,"comment_content":"最好时间复杂度 :i&lt;element 直接将元素放到索引处 O(1)<br>最坏时间复杂度:i&gt;element 最大的时间复杂度的计算为for循环 O(n) <br>平均时间复杂度 :i 的插入位置为 n+1 中可能 前n中插入的时间复杂度为O(1) 有n个位置可能  n+1为 O(n) 概率均为1&#47;(n+1)  故平均时间复杂度为O(1) ","like_count":0},{"had_liked":false,"id":219574,"user_name":"wxl","can_delete":false,"product_type":"c1","uid":1593027,"ip_address":"","ucode":"7D6ACC74503380","user_header":"https://static001.geekbang.org/account/avatar/00/18/4e/c3/0ea23ce7.jpg","comment_is_top":false,"comment_ctime":1590045118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590045118","product_id":100017301,"comment_content":"如果使用之前的方法来判断，判断不了，因为这段代码中在if条件语句中有循环，所以得考虑何时通过if语句，何时不能通过，即需要确定if语句通过的概率有多少。通过分析容易知道当count到达n的时候就需要经过一次循环将原来数组中的数据复制到新数组中，而且是有规律的，所以对于每一个轮回都可以将if语句里的循环n次给均摊掉，这样一来就容易分析均摊的情况时间复杂度为O(1)，而最好和最坏的情况分别是O(1)和O(n)","like_count":0},{"had_liked":false,"id":219540,"user_name":"叶子","can_delete":false,"product_type":"c1","uid":2011015,"ip_address":"","ucode":"AD8F10F48AC42F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/af/87/3ef5a450.jpg","comment_is_top":false,"comment_ctime":1590039316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590039316","product_id":100017301,"comment_content":"没有大于len的时候，大于那个符号完全多余","like_count":0},{"had_liked":false,"id":218036,"user_name":"Mason","can_delete":false,"product_type":"c1","uid":2007705,"ip_address":"","ucode":"3F37A0905D08D0","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a2/99/61c24fbd.jpg","comment_is_top":false,"comment_ctime":1589700187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589700187","product_id":100017301,"comment_content":"均摊时间复杂度是有规律的平均时间复杂度。从而可以更加细致地计算出时间复杂度。","like_count":0},{"had_liked":false,"id":217673,"user_name":"怕什么，抱紧我","can_delete":false,"product_type":"c1","uid":1318633,"ip_address":"","ucode":"CBCEA76E9EF33B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/e9/dcc63d8f.jpg","comment_is_top":false,"comment_ctime":1589575606,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589575606","product_id":100017301,"comment_content":"根本就不用n+1次查询，循环内找不到，就代表没有在数组中了，根本不需要额外的那次去数组外找","like_count":0},{"had_liked":false,"id":217670,"user_name":"怕什么，抱紧我","can_delete":false,"product_type":"c1","uid":1318633,"ip_address":"","ucode":"CBCEA76E9EF33B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/e9/dcc63d8f.jpg","comment_is_top":false,"comment_ctime":1589571713,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589571713","product_id":100017301,"comment_content":"任何算法，最好就都是O（1）！嵌套几个for循环，最坏就是O（n的几次方）！代码里面的内容不用看的😂平均和递归另算！","like_count":0},{"had_liked":false,"id":217591,"user_name":"Geek_王","can_delete":false,"product_type":"c1","uid":1514032,"ip_address":"","ucode":"1754BC4EF61EC0","user_header":"https://wx.qlogo.cn/mmopen/vi_32/jTG3YnNckicbFibP61n8sX4ndLz4KeKGXUZAfbxVfWzr0De8lZPLzIyriaRPo4bQzyziaUBVLvlKtDiaWBGvxTbWE8g/132","comment_is_top":false,"comment_ctime":1589539643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589539643","product_id":100017301,"comment_content":"最好O(1), 最坏O(n),均摊平均O(1)","like_count":0},{"had_liked":false,"id":216982,"user_name":"eminem-xiao","can_delete":false,"product_type":"c1","uid":1998512,"ip_address":"","ucode":"CF07B647012514","user_header":"https://static001.geekbang.org/account/avatar/00/1e/7e/b0/7eed6726.jpg","comment_is_top":false,"comment_ctime":1589380902,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589380902","product_id":100017301,"comment_content":"<br><br>关于第三个insert函数，它的均摊复杂度，为什么是1次O(n)的操作跟着n-1次O(1)的操作呢，我的观点是1次O(n)插入跟着n次O(1)插入，不知道是否正确，望解答！<br><br>","like_count":0},{"had_liked":false,"id":216476,"user_name":"程博","can_delete":false,"product_type":"c1","uid":1317420,"ip_address":"","ucode":"F7018BEC94C6ED","user_header":"https://static001.geekbang.org/account/avatar/00/14/1a/2c/f1c58366.jpg","comment_is_top":false,"comment_ctime":1589268150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589268150","product_id":100017301,"comment_content":"O(n)只是一种表示方法。数组长度是10，把数组遍历了一遍，就可以认为是O(n)。<br><br>其实假设成如下所示，就好理解了<br>int array[] = new int[n]; <br>int len = n;<br><br>当i &lt; len时（0~n-1），复杂度是O(1)，所以最好复杂度是O(1)；<br><br>当i = len时（n），复杂度是O(n)，所以最差复杂度是O(n)；<br><br>平均复杂度是：( n * 1&#47;(n+1) ) + ( n&#47;(n+1) ) = 2n&#47;(n+1)，也就是O(1)。","like_count":0},{"had_liked":false,"id":216268,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1589212159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589212159","product_id":100017301,"comment_content":"最好时间复杂度  最坏时间复杂度  平均时间复杂度  均摊时间复杂度。<br>均摊时间复杂度就是平均时间复杂度的一种特殊算法。<br><br>引入这四个概念的原因是: 同一段代码在输入量级不一样时，需要更加全面的评价它的时空复杂度。","like_count":0},{"had_liked":false,"id":216025,"user_name":"Saunak","can_delete":false,"product_type":"c1","uid":1982817,"ip_address":"","ucode":"11881180D0ED5B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/41/61/688c7066.jpg","comment_is_top":false,"comment_ctime":1589170110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589170110","product_id":100017301,"comment_content":"数组名不是常量不能被赋值么？ 16行的array = new_array;是啥意思？","like_count":0},{"had_liked":false,"id":215704,"user_name":"wuwei","can_delete":false,"product_type":"c1","uid":1689329,"ip_address":"","ucode":"DA60894F10C71F","user_header":"https://static001.geekbang.org/account/avatar/00/19/c6/f1/aac154fe.jpg","comment_is_top":false,"comment_ctime":1589080265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589080265","product_id":100017301,"comment_content":"思考题：最好O(1)最坏O(n),平均均摊都是O(1)<br><br>小结<br>看for循环：<br><br>一般都是全部遍历完，结合加法乘法公式即可估算出时间复杂度。<br><br><br>再看for 循环是否执行或有没有终止条件，符合这个情况就要计算平均情况时间复杂度和均摊复杂度。<br>平均情况时间复杂度：将每种情况的执行次数累加除以一共可能发生的情况数量，或者，每种情况出现的概率值相加；<br>均摊复杂度：将所有情况的复杂度加起来求均值，是平均时间复杂度的一种特例。","like_count":0},{"had_liked":false,"id":215501,"user_name":"Geek_216fd5","can_delete":false,"product_type":"c1","uid":1602049,"ip_address":"","ucode":"EA6804E9E974B3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLb5UK2u6RyS48ia8H2lUSlUyQEaBiclDlqpbQUWqTWeuf3Djl3ruHRN3U37GXYuWAfAW5d1xkm6F7w/132","comment_is_top":false,"comment_ctime":1589003902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589003902","product_id":100017301,"comment_content":"感觉是数学的一些东西。<br>1+2+3+。。。+n = n(n+1)&#47;2 ，先有循环，后有if + break跳出<br>1+1+1+1...+1+n = 2n，先有if（设置了进入循环的条件），仅有一种情况才进入循环<br>以上二式差了一个数量级<br>","like_count":0},{"had_liked":false,"id":215463,"user_name":"不经意的未来","can_delete":false,"product_type":"c1","uid":1996156,"ip_address":"","ucode":"230D5419CF2F24","user_header":"https://static001.geekbang.org/account/avatar/00/1e/75/7c/3e186b19.jpg","comment_is_top":false,"comment_ctime":1588995721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588995721","product_id":100017301,"comment_content":"我有一个问题，思考题的时间复杂度是多少呢？是O(n)还是O(1)？","like_count":0},{"had_liked":false,"id":215120,"user_name":"Geek_Akara","can_delete":false,"product_type":"c1","uid":1991279,"ip_address":"","ucode":"E86A5A9EEC8BFF","user_header":"https://static001.geekbang.org/account/avatar/00/1e/62/6f/06d476f7.jpg","comment_is_top":false,"comment_ctime":1588908267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588908267","product_id":100017301,"comment_content":"老师这个代码insert（）是怎么循环的？<br> for (int i = 0; i &lt;n; ++i){<br>insert(val)<br>}<br>不是的话那终止条件是什么呀？<br> &#47;&#47; array表示一个长度为n的数组<br> &#47;&#47; 代码中的array.length就等于n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }","like_count":0},{"had_liked":false,"id":214720,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1588808896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588808896","product_id":100017301,"comment_content":"最好情况的时间复杂的是o(1),最坏情况是插入数据时候，数组满了，从而导致扩充数组长度，形成最坏时间复杂的为o（n），平均时间复杂，跟老师上面的例子是类似的，因此平均时间复杂的为o(1)","like_count":0},{"had_liked":false,"id":214059,"user_name":"嚆同学","can_delete":false,"product_type":"c1","uid":1018329,"ip_address":"","ucode":"5F5BFE47B3302C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/d9/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1588647181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588647181","product_id":100017301,"comment_content":"练习题答案：最好是O(1)，最差是O(n)，均摊是O(1)。<br>时间复杂度分析老师讲的很好！","like_count":0},{"had_liked":false,"id":214024,"user_name":"TiAmo_lyj","can_delete":false,"product_type":"c1","uid":1987923,"ip_address":"","ucode":"6E58CF70A955D1","user_header":"https://static001.geekbang.org/account/avatar/00/1e/55/53/29b4e373.jpg","comment_is_top":false,"comment_ctime":1588637634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588637634","product_id":100017301,"comment_content":"均摊复杂度为O(1)，当执行一次O(n)复杂度后，接下来的n-1次操作的时间复杂度都是O(1)，把复杂度为O(n)的那一次均摊到每一次操作中，所以均摊复杂度为O(1)，最好为O(1)，最坏为O(n)","like_count":0},{"had_liked":false,"id":213271,"user_name":"Silence","can_delete":false,"product_type":"c1","uid":1630343,"ip_address":"","ucode":"831D83F17EE0B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/e0/87/72c0af0c.jpg","comment_is_top":false,"comment_ctime":1588347840,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588347840","product_id":100017301,"comment_content":"最差O(n)，最好O(1)，平均O(1)","like_count":0},{"had_liked":false,"id":212289,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1588084535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588084535","product_id":100017301,"comment_content":"学习笔记：<br>1. 最好、最坏和平均时间复杂度好理解。平均和摊还时间复杂度不好区分也不好算。<br>2. 时间复杂度那么多，很多时候使用一个就行了(这里我认为是平均复杂度)。只有算法在不同情况下，复杂度有量级的差别是，才使用三个。<br>3. 摊还分析的用处是大多数时间简单，个别情况复杂且这两种情况又先后关系。而且分析结果往往是简单的时间复杂度<br>4. 摊还分析是特殊的平均时间复杂度。<br>思考题：<br>大多数是O（1），极少情况是O(len),且数组满了才会出现，所以用摊还分析<br>考虑序列 1,  ..., 1（len个）, len, 1, ...1(len个)，2xlen, 1, ...., 1(2xlen个)，4 x len， .......<br>len ， 2xlen，4xlen 都可以平均分摊到后面接着的序列中，所以摊还时间复杂度是O（1）","like_count":0},{"had_liked":false,"id":211956,"user_name":"guan0078","can_delete":false,"product_type":"c1","uid":1090467,"ip_address":"","ucode":"53B15FF3752A40","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/a3/804fb3e9.jpg","comment_is_top":false,"comment_ctime":1588040564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588040564","product_id":100017301,"comment_content":"作业题：<br>1. 最好时间复杂度是O(1)。当新添加的元素没有超过array size时，时间复杂度都是O(1)。<br>2. 最坏时间复杂度是O(n)。只在当新添加的元素刚好超过10n的size，array需要重新扩容，这时候是O(n)<br>3. 均摊时间复杂度是O(1)。","like_count":0},{"had_liked":false,"id":210557,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1587787446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587787446","product_id":100017301,"comment_content":"平均复杂度分析是比较规范的算出每种情况下的执行次数乘以发生的概率再除以总次数的一种分析方法。<br>均摊时间复杂度分析其实就是找规律，通过心算把最坏情况平摊到最好的情况上的一种简易分析方法。","like_count":0},{"had_liked":false,"id":209835,"user_name":"","can_delete":false,"product_type":"c1","uid":1309832,"ip_address":"","ucode":"3245B0E029B169","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/88/a2925791.jpg","comment_is_top":false,"comment_ctime":1587622862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587622862","product_id":100017301,"comment_content":"想问一下老师，在均摊时间复杂度的示例代码上，我用debug进行运行，我的理解是n只要不为0的情况下，都是只会执行16、17行代码就结束了，即只把数组的第一个位置赋值为val就结束了，根本不会走到for循环，那这个怎么会有后面的讲解呢？又怎么会用这个例子来讲均摊时间复杂度呢，这个看起来毫无意义啊","like_count":0},{"had_liked":false,"id":208112,"user_name":"Miracle","can_delete":false,"product_type":"c1","uid":1373357,"ip_address":"","ucode":"C98378B19CDF1E","user_header":"https://static001.geekbang.org/account/avatar/00/14/f4/ad/33d67855.jpg","comment_is_top":false,"comment_ctime":1587279749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587279749","product_id":100017301,"comment_content":"练习题最好是O(1)，最差是O(n), 均摊是O(1)<br>当前 n 次的复杂度都是 O(1) 的时候， 第 n + 1 次的时间复杂度是 O(n)，均摊就相当于把 O(n) 平均分给前 n 次，因此前 n 次的复杂度近似为 O(1) + O(1)，仍然是 O(1) 的时间复杂度","like_count":0},{"had_liked":false,"id":207712,"user_name":"null","can_delete":false,"product_type":"c1","uid":1180947,"ip_address":"","ucode":"62832FC0896682","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/13/d12a43eb.jpg","comment_is_top":false,"comment_ctime":1587150599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587150599","product_id":100017301,"comment_content":"day1 <br>今晚学习了复杂度分析的推导<br>平均情况时间复杂度,我个人理解为先将所有的情况消耗的时间加起来再除以情况的数量来计算平均情况时间复杂度,在老师的例子中之所以每个值都乘以二分之一是因为每个数组下标内都有一个二分之一的记录存在find方法要搜索的值,我觉得课后答案的add方法的平均情况时间复杂度等于array.length(所有命中数组下标的情况)+array.length(i大于array.leng的情况)除以array.length+1<br>均摊时间复杂度的话,add方法中array.length次o(1)之后会有一次2*array.length,所以均摊复杂度的话等于3*array.length除以array.lenth+1","like_count":0},{"had_liked":false,"id":206953,"user_name":"王晨光","can_delete":false,"product_type":"c1","uid":1914972,"ip_address":"","ucode":"A3EC8815A534C0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/38/5c/2d1de317.jpg","comment_is_top":false,"comment_ctime":1586962537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586962537","product_id":100017301,"comment_content":"最好，最坏，平均，均摊，四种不同分析方式，之前读代码或者写程序时没有想到用多种时间复杂的方式进行评估，以后写程序的时候可以多考虑一下。","like_count":0},{"had_liked":false,"id":206947,"user_name":"万载小笼包","can_delete":false,"product_type":"c1","uid":1256024,"ip_address":"","ucode":"05087BB0B24E0B","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/58/6b44b492.jpg","comment_is_top":false,"comment_ctime":1586961356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586961356","product_id":100017301,"comment_content":"均摊时间复杂度的第一个代码示例，清空数组 是不是应该是count=0  count=1的话，是不是数组[0]的数值还在？","like_count":0},{"had_liked":false,"id":206911,"user_name":"123-sky","can_delete":false,"product_type":"c1","uid":1957632,"ip_address":"","ucode":"2B269A3CBF4382","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZGr575z4WfctOy5wcuNqbUFgdLErXyicWgyBvE8ZETgFsj2vfcKkRicMxet5UjM09mIpCxo99xpXA/132","comment_is_top":false,"comment_ctime":1586956145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586956145","product_id":100017301,"comment_content":"老师讲的很好，深入浅出。但是我要看了评论答案才能自己完全推到出。还是需要继续努力。","like_count":0},{"had_liked":false,"id":206751,"user_name":"rookie","can_delete":false,"product_type":"c1","uid":1573424,"ip_address":"","ucode":"9E28FA97C01F24","user_header":"","comment_is_top":false,"comment_ctime":1586928931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586928931","product_id":100017301,"comment_content":"关于练习题:<br>最理想的情况下是O（1） <br>最坏情况下是O（n）","like_count":0},{"had_liked":false,"id":206747,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1586927812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586927812","product_id":100017301,"comment_content":"最好 o（1）最坏o（n）平均o（1） 加权 1*1&#47;2n +2 *1&#47;2n....每一次都是 o（n）<br>均摊 没明白","like_count":0},{"had_liked":false,"id":206704,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1586918806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586918806","product_id":100017301,"comment_content":"我们今天学的几个复杂度分析方法，你都掌握了吗？<br>平均和均摊还需操练<br>add() 函数的时间复杂度分析：<br>最好 O(1)<br>最坏 O(n)<br>平均 O(1)<br>均摊 O(1)","like_count":0},{"had_liked":false,"id":206536,"user_name":"小永","can_delete":false,"product_type":"c1","uid":1270845,"ip_address":"","ucode":"D0F52385FE4072","user_header":"https://static001.geekbang.org/account/avatar/00/13/64/3d/84cf45f4.jpg","comment_is_top":false,"comment_ctime":1586876589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586876589","product_id":100017301,"comment_content":"从另一个角度来讲，平均复杂度是复杂度的数学期望值，平摊复杂度也是最大概率的一种复杂度，因此，平摊复杂度其实是平均复杂度的在概率上的一个特例。","like_count":0},{"had_liked":false,"id":206508,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1586872068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586872068","product_id":100017301,"comment_content":"练习题：<br>前9次时间复杂度都是O(1)，第10次是O(n)，符合均摊时间复杂度的场景，分摊之后就是O(1)","like_count":0},{"had_liked":false,"id":206375,"user_name":"russellyue","can_delete":false,"product_type":"c1","uid":1541894,"ip_address":"","ucode":"0758ACF772F9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epIMwPE6FwsicZ6bjhu7ZpWLnoib8G76sA1XL8y5W8GxqfQEjBub6g57E60mzjWzrA6icMRw1QT5CpyA/132","comment_is_top":false,"comment_ctime":1586850004,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586850004","product_id":100017301,"comment_content":"对同一段代码，因为数据的不同，时间复杂度的情况也不同。不同的情况分为最好、最坏、平均和均摊情况时间复杂度。一般我们只考虑最坏时间复杂度，因为这是一个算法时间复杂度的上限，涵盖的情况最全面。除非各个情况的时间复杂度存在量级的区别，我们才需要拿出来分析。平均情况时间复杂度是把各个情况的执行时间相加并除以情况的种类的个数，但由于各个情况出现的几率不一样，所以引出加权平均复杂度，即每个情况的执行时间乘以出现几率再相加。均摊时间复杂度是在一种特定情况下，拿来简便计算平均复杂度的方式，即：在对一个数据结构进行的操作中，是一系列低复杂度的操作伴随着个别高复杂度的操作，而且存在先低后高的时序，那么便可以将高复杂度的操作时间摊还到低复杂度的操作中。往往均摊时间复杂度等于最好时间复杂度。","like_count":0},{"had_liked":false,"id":206234,"user_name":"睡觉表演者","can_delete":false,"product_type":"c1","uid":1501198,"ip_address":"","ucode":"57876725FD0C8C","user_header":"https://static001.geekbang.org/account/avatar/00/16/e8/0e/876f850e.jpg","comment_is_top":false,"comment_ctime":1586827164,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586827164","product_id":100017301,"comment_content":"我觉得平摊时间复杂度有利于优化代码，可以分析出代码逻辑中没必要的部分","like_count":0},{"had_liked":false,"id":206177,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1586816858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586816858","product_id":100017301,"comment_content":"最好情况时间复杂度为O(1);<br>当数组空间不够，需要重新申请空间，把原来数组复制到新数组中，这个时候的时间复杂度为O(n);<br>","like_count":0},{"had_liked":false,"id":206176,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1586815845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586815845","product_id":100017301,"comment_content":"我是前端人员，在数组中添加元素，重来没有考虑数组的大小，直接加的。😂 ","like_count":0},{"had_liked":false,"id":206109,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1181486,"ip_address":"","ucode":"E82C58AF2604ED","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/2e/878d3c92.jpg","comment_is_top":false,"comment_ctime":1586787989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586787989","product_id":100017301,"comment_content":"我看这篇文章不下于5遍了，第一次看平均和均摊完全懵逼，现在看了之后已经懂了很多了。基础太薄弱了。难受，希望坚持下去。","like_count":0},{"had_liked":false,"id":205509,"user_name":"爱吃胡萝卜","can_delete":false,"product_type":"c1","uid":1459413,"ip_address":"","ucode":"35FCF84D1E04C5","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/d5/ca522e83.jpg","comment_is_top":false,"comment_ctime":1586658178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586658178","product_id":100017301,"comment_content":"初看大佬的文章，之前看过一段时间的算法导论，期待不同的角度解析数据算法。<br>这题的复杂度O（1） <br>通常情况： 只触发 array[i] = element 赋值语句 复杂度O（1）<br>特殊情况： 触发copy 操作 复杂度O(n)<br>均摊下来就是O（1）<br>事实上很多语言的可扩展数组都是这么实现的， 因为预先分配的内存空间太大的话，内存利用率就会降低，所以会分配一个适当大小的初始内存空间，然后在需要的时候扩展一下<br>事实上","like_count":0},{"had_liked":false,"id":205392,"user_name":"晓森","can_delete":false,"product_type":"c1","uid":1112603,"ip_address":"","ucode":"3D5EB11B9E0FD7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/1b/5d82d759.jpg","comment_is_top":false,"comment_ctime":1586606423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586606423","product_id":100017301,"comment_content":"1. 导图+Markdown  done<br>2. 课后作业 done","like_count":0},{"had_liked":false,"id":205391,"user_name":"晓森","can_delete":false,"product_type":"c1","uid":1112603,"ip_address":"","ucode":"3D5EB11B9E0FD7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/1b/5d82d759.jpg","comment_is_top":false,"comment_ctime":1586606343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586606343","product_id":100017301,"comment_content":"1. 最好时间复杂度：当 i&lt;数组长度的时候，复杂度均为 O(1)<br>2. 最坏时间复杂度：当i等于数组长度时，扩容，复杂度为 O(n)<br>3. 平均时间复杂度：i=1，... ，n 的概率是相同的，因此加权平均时间复杂度为 (n+1)&#47;n 也就是 O(1)<br>4. 均摊时间复杂度：每当 i 等于数组长度时，出现一次O(n)，之后跟着n-1次 O(1) ， 因此均摊时间复杂度为 O(1)","like_count":0},{"had_liked":false,"id":205327,"user_name":"freshbin","can_delete":false,"product_type":"c1","uid":1498811,"ip_address":"","ucode":"08EFEA2CC04F3A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqxPHQ0mFEJ8ia1fLa9ZGqGmvHmuKkuIBCNk4BbIhBvnV4EAqnxdpVBEPuHJOUoyhGewdicNR01GkdA/132","comment_is_top":false,"comment_ctime":1586593775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586593775","product_id":100017301,"comment_content":"平均情况时间复杂度和均摊时间复杂度看得是一脸懵逼。","like_count":0},{"had_liked":false,"id":205157,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1586560699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586560699","product_id":100017301,"comment_content":"1.实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。像我们上一节课举的那些例子那样，很多时候，我们使用一个复杂度就可以满足需求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。<br>2.对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":205045,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1586514827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586514827","product_id":100017301,"comment_content":"不是很理解，老师为什么要要将平均复杂度和均摊复杂度分开来？我的理解是一回事，就是期望复杂度：概率*每次复杂度，两者的值总是相等的吧。","like_count":0},{"had_liked":false,"id":204568,"user_name":"Pinocchio","can_delete":false,"product_type":"c1","uid":1132195,"ip_address":"","ucode":"E878744CC5F590","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/a3/8c3be105.jpg","comment_is_top":false,"comment_ctime":1586422901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586422901","product_id":100017301,"comment_content":"我不是很能看懂作者的出题方式，因为变量以常量的方式给出来，就不知道函数在具体场景下的使用方式；这里就两个关键量，一个是数组大小，一个是下标 i，我可以理解数组大小是决定复杂度的 n，那么下标 i 呢，无论什么情况下都是 0 吗？","like_count":0},{"had_liked":false,"id":204184,"user_name":"🐒🐱🐭🐮🐯🐰🐶","can_delete":false,"product_type":"c1","uid":1189080,"ip_address":"","ucode":"52426AE36A9A39","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d8/aa41d743.jpg","comment_is_top":false,"comment_ctime":1586347772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586347772","product_id":100017301,"comment_content":"总结 首先我们需要将概念放在这里<br>1，时间复杂度：表示代码行数的执行时间与数据规模之间（n）的增长关系<br>2，空间复杂度：表示算法的存储空间与数据规模之间(n)的增长关系<br>3，如果从代码执行开始到代码执行结束，执行的代码行次数是知道的，空间开辟储存空间的数量也是知道的。这个哪怕事一亿行，也是 O(1)<br><br>分析题目 <br>最好时间复杂度：当n=1的时候 O(1)<br>最差时间复杂度：时间复杂度：O(2n）  空间复杂度：O((n-10)*2)     加起来去掉常数 = O(n)<br>平均时间复杂服： 最差时间复杂度&#47;n + 最好时间复杂度O(1)     =  O(n)","like_count":0},{"had_liked":false,"id":203992,"user_name":"kube-krli","can_delete":false,"product_type":"c1","uid":1231125,"ip_address":"","ucode":"1CC6B66A5387D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/15/c7cfee60.jpg","comment_is_top":false,"comment_ctime":1586315988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586315988","product_id":100017301,"comment_content":"我是个野生程序员，写了四年的python，主要就是Django，然后最近才发现，我之前学的东西，都是浮于表面的，希望现在开始学算法还不晚。","like_count":0},{"had_liked":false,"id":203844,"user_name":"yoummg","can_delete":false,"product_type":"c1","uid":1067856,"ip_address":"","ucode":"1B809CFDD7A508","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/50/fdecd51a.jpg","comment_is_top":false,"comment_ctime":1586273228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586273228","product_id":100017301,"comment_content":"核心：最好，最坏，平均时间复杂度分析。任何算法针对不同的数据都会有最好，最坏的时间复杂度。<br><br>课后题<br>O(1)<br>课后题实际就是Java ArrayList,以及可变化数据结构的扩容方式。均摊分析是常数级。因此扩容平均来看是常数级。<br>","like_count":0},{"had_liked":false,"id":203390,"user_name":"Geek_ae1f59","can_delete":false,"product_type":"c1","uid":1139183,"ip_address":"","ucode":"C7773DAB17931B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/I6CEbicmiag9icicg9icJfUiajZ0zuZTiciaYhwMyfo6VMfLtqrxicOIvmmibIwRDFpGRBO0VWeMZCAUZ6Jbv22emZRCoYAQ/132","comment_is_top":false,"comment_ctime":1586183132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586183132","product_id":100017301,"comment_content":"数组的长度是指数增长的，这个不会对时间复杂度造成影响吗？","like_count":0},{"had_liked":false,"id":203239,"user_name":"🍀","can_delete":false,"product_type":"c1","uid":1905300,"ip_address":"","ucode":"E3930B6B5DDDED","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Wn1fiaKdereKzlnd2vM0gib5Aia6VIJC8t6gcacvVIWPicbRTX4NY24SrgmBlc0ibnIJuhm7Qzia6mNPBgsUicnoUfYXA/132","comment_is_top":false,"comment_ctime":1586159767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586159767","product_id":100017301,"comment_content":"最好O(1),最坏O(n),均摊O(1)","like_count":0},{"had_liked":false,"id":202895,"user_name":"Geek_67ea4f","can_delete":false,"product_type":"c1","uid":1819358,"ip_address":"","ucode":"C0B517FB0F97A1","user_header":"","comment_is_top":false,"comment_ctime":1586080947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586080947","product_id":100017301,"comment_content":"做好是O(1)，最差是O(n)，均摊是O(1)","like_count":0},{"had_liked":false,"id":202399,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1585983845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585983845","product_id":100017301,"comment_content":"平均时间复杂度，考虑每种情况出现的概率，进行加权，取平均值。<br>均摊时间复杂度，绝大部分情况是 O(1)，偶尔是 O(n)，大家一分摊，还是 O(1)，再大的困难，分担的人足够多，也就不是事😄","like_count":0},{"had_liked":false,"id":202092,"user_name":"LiziGo","can_delete":false,"product_type":"c1","uid":1926447,"ip_address":"","ucode":"6CB44DC9AB65D8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/65/2f/19766e9b.jpg","comment_is_top":false,"comment_ctime":1585901741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585901741","product_id":100017301,"comment_content":"1、最好情况：i&lt;len时，数据直接插入到数组中，时间复杂度：O(1)<br>2、最坏情况：i&gt;=len时，数组需要先扩容，然后再插入数据，时间复杂度：O(n)<br>3、平均时间复杂度：i&lt;len和i&gt;=len，每种插入情况出现得概率是1&#47;（n+1)，所以 1*1&#47;(n+1)+.....+n*1&#47;（n+1)=1,所以平均时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":201363,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1585756137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585756137","product_id":100017301,"comment_content":"最好时间复杂度为O(1),最坏O(n) 均摊O(1) ","like_count":0},{"had_liked":false,"id":201227,"user_name":"进击的小菜","can_delete":false,"product_type":"c1","uid":1943619,"ip_address":"","ucode":"DEDC4D31DA0DF1","user_header":"","comment_is_top":false,"comment_ctime":1585735654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585735654","product_id":100017301,"comment_content":"开始默默拿起数学课本的我😄","like_count":0},{"had_liked":false,"id":200427,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1585582537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585582537","product_id":100017301,"comment_content":"##### 最好情况时间复杂度（best case time complexity）<br>* 在最理想情况下（如数组查找在第一位），执行这段代码的时间复杂度<br>##### 最坏情况时间复杂度（worst case time complexity）<br>* 最糟糕情况下（如数组查找在最后一位），执行这段代码的时间复杂度<br>##### 平均情况时间复杂度（average case time complexity）<br>* 每种情况（如计算数组查找中每个下标命中概率），执行这段代码的时间复杂度<br>##### 均摊时间复杂度（amortized time complexity）<br>* 对一个数据结构的一组连续操作中，将复杂度较高的操作分摊到复杂度较低的操作，一般均摊时间复杂度=最好时间复杂度，也是一种特殊的平均时间复杂度。<br><br>* 只有同一块代码在不同的情况下，时间复杂度有量级的差距，才会使用这三种复杂度表示法来区分，否则用最坏复杂度描述就行。","like_count":0},{"had_liked":false,"id":200425,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1585582471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585582471","product_id":100017301,"comment_content":"##### 最好情况时间复杂度（best case time complexity）<br>* 在最理想情况下（如数组查找在第一位），执行这段代码的时间复杂度<br>##### 最坏情况时间复杂度（worst case time complexity）<br>* 最糟糕情况下（如数组查找在最后一位），执行这段代码的时间复杂度<br>##### 平均情况时间复杂度（average case time complexity）<br>* 每种情况（如计算数组查找中每个下标命中概率），执行这段代码的时间复杂度<br>##### 均摊时间复杂度（amortized time complexity）<br>* 对一个数据结构的一组连续操作中，将复杂度较高的操作分摊到复杂度较低的操作，一般均摊时间复杂度=最好时间复杂度，也是一种特殊的平均时间复杂度。<br><br>* 只有同一块代码在不同的情况下，时间复杂度有量级的差距，才会使用这三种复杂度表示法来区分，否则用最坏复杂度描述就行。","like_count":0},{"had_liked":false,"id":199158,"user_name":"麦克斯韦妖","can_delete":false,"product_type":"c1","uid":1938385,"ip_address":"","ucode":"ADAE586302A104","user_header":"https://static001.geekbang.org/account/avatar/00/1d/93/d1/9eb38793.jpg","comment_is_top":false,"comment_ctime":1585480798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585480798","product_id":100017301,"comment_content":"老师，这篇的代码有python版本的吗，好像只有从第五章开始的有","like_count":0},{"had_liked":false,"id":196684,"user_name":"贵贵","can_delete":false,"product_type":"c1","uid":1196359,"ip_address":"","ucode":"97D5F277B5317D","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/47/7e4bdd7b.jpg","comment_is_top":false,"comment_ctime":1585302456,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585302456","product_id":100017301,"comment_content":"感受：一定要自己手动去算一算，否则我们会觉得看懂了。<br>但是实际自己算的时候，会考虑不周到，会算错。<br><br>算法的时间复杂度分析，有常用的粗略分析方法，也有精确的加权分析方法。<br>根据不同的场合来使用。如果是出现数据规模导致的算法量级的变化，那就要使用精确的算法来算。","like_count":0},{"had_liked":false,"id":196163,"user_name":"Regis","can_delete":false,"product_type":"c1","uid":1435632,"ip_address":"","ucode":"3911E4EDE27F4E","user_header":"https://static001.geekbang.org/account/avatar/00/15/e7/f0/d0bf3a5f.jpg","comment_is_top":false,"comment_ctime":1585240387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585240387","product_id":100017301,"comment_content":"数学感觉都忘光了，这些都是练的数学思维，还得多看几遍，多写写画画才能理解透彻","like_count":0},{"had_liked":false,"id":195669,"user_name":"牛牛","can_delete":false,"product_type":"c1","uid":1194626,"ip_address":"","ucode":"CFCE68B4F92209","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","comment_is_top":false,"comment_ctime":1585210846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585210846","product_id":100017301,"comment_content":"刚才去看了Java ArrayList的实现、发现居然能看明白、对照Java编程逻辑这本书(容器篇)一起看、真的是有意想不到的收获、也没那么枯燥了、算是好的开端 ？","like_count":0},{"had_liked":false,"id":195429,"user_name":"牛牛","can_delete":false,"product_type":"c1","uid":1194626,"ip_address":"","ucode":"CFCE68B4F92209","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","comment_is_top":false,"comment_ctime":1585187508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585187508","product_id":100017301,"comment_content":"四个复杂度分析的表示:<br>最好情况时间分析、最坏情况时间分析、平均情况时间分析、均摊时间复杂度.<br><br>1. 最好: 在最理想的情况下、执行代码的时间复杂度. eg. 数据查找时、更好第一个元素就满足<br>2. 最坏: 最不理想的情况下、执行代码的时间复杂度. eg. 直到最后一个元素才满足<br>3. 平均: 要查找变量x在数组中的位置, 有n+1种情况、在0~n-1 位置中和不在数组中<br>        将每种情况下、要遍历的元素个数累加、再除以n+1, 就可得到需要遍历的元素个数的平均值  (1+2+3+....+n+n)&#47;(n+1) = n(n+3)&#47;2(n+1)<br>4. 加权平均: 若将每个元素出现的概率也考虑进去呢 ? 就变成了 <br>            1*1&#47;2n + 2*1&#47;2n + ... + n*1&#47;2n + n*1&#47;2 = (3n+1)&#47;4 <br>            这个值又叫加权平均值、也叫期望值、全称：加权平均时间复杂度.<br>5. 均摊: 其实可以理解为一种特殊的平均时间复杂度.  <br><br>第一次看懂了这几种表示法、有点儿开心呢、好的迹象、坚持下去~~~~","like_count":0},{"had_liked":false,"id":194793,"user_name":"jack","can_delete":false,"product_type":"c1","uid":1898292,"ip_address":"","ucode":"A2253AC8570C5E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jibauP3icEFic4w56L2ddVghL7h2gGKhFdW8lBfE9rpwwRgzUKkLFY9wb4w70AXz7retME96a6EBRTA0LvSLn0ib8A/132","comment_is_top":false,"comment_ctime":1585106653,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585106653","product_id":100017301,"comment_content":"老师，您好！这道题我的理解是：<br>所谓最好的时间复杂度对应的是数组当中还有空闲的位置，那么插入一个元素所需要的时间复杂度就是：O（1）；<br>最差的时间复杂度对应的就是数组满了，必须先申请一个大一倍的空间，将原来的元素复制过去，需要的时间复杂度就是O（len）；<br>均摊时间复杂度就是每进行n－1个O（1）的插入数组元素过后，要进行1个O（len）的扩展复制操作，因此所需要的均摊时间复杂度就是O（1）。","like_count":0},{"had_liked":false,"id":194331,"user_name":"Geek_055a12","can_delete":false,"product_type":"c1","uid":1916287,"ip_address":"","ucode":"851AC4411587CD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6rm3uu73Fq87HVnSzNfrjkGqxb7fWY3Ra0DnQ4850d985V9POT9d9WN3yYoUJKia7UVYMP4N4PCTQ/132","comment_is_top":false,"comment_ctime":1585051250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585051250","product_id":100017301,"comment_content":"最好情况时间复杂度：<br><br>最理想的情况下，数组中有空闲空间，我们只需要把数据插入到数组下标为i的位置就可以了，所以最好情况时间复杂度为O(1)。<br><br>最坏情况时间复杂度：<br><br>最坏情况下，数组中没有空闲空间了，我们需要重新申请一个2倍大小的数组空间，把原来数组中的数据依次copy到新的数组，所以最坏情况时间复杂度为O(n)。<br><br>平均情况时间复杂度：<br><br>对一个长度为n的数组，假设数组中有空闲空间与没有空闲空间的概率都为1&#47;2，显然，有空闲空间的情况下，有n种情况需要执行的操作次数都为1，如果没有空闲空间，需要执行的操作数为n次。平均值为(1+...+1+n) &#47; n+1 = 2n &#47; (n+1)，把每种情况发生的概率也考虑进去，那么平均时间复杂度为：<br><br>1x(1&#47;(n+1)) + 1x(1&#47;(n+1)) +... + n*(1&#47;(n+1))  = 1，这段代码的加权平均时间复杂度仍然是O(1)<br><br>均摊时间复杂度：<br><br>前n个操作复杂度都是O(1)，第n+1次操作的复杂度是O(n)，通过摊还分析，得到时间复杂度为O(1)。","like_count":0},{"had_liked":false,"id":193099,"user_name":"飞逝","can_delete":false,"product_type":"c1","uid":1244004,"ip_address":"","ucode":"A6A06F04DF4394","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/64/651dc6d7.jpg","comment_is_top":false,"comment_ctime":1584883783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584883783","product_id":100017301,"comment_content":"总结:<br>平均时间复杂度，就是将每个情况出现的概率*复杂的值相加的总和。<br>均摊时间复杂度，就是大部分情况下时间复杂度都是一个比较低的值，特别情况下会比较高，那么将这个高的复杂度均摊到每个复杂度降低的情况中得出的值","like_count":0},{"had_liked":false,"id":192855,"user_name":"单色","can_delete":false,"product_type":"c1","uid":1907486,"ip_address":"","ucode":"A1DA6E497FD74C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/1e/f5c16f7e.jpg","comment_is_top":false,"comment_ctime":1584876008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584876008","product_id":100017301,"comment_content":"因为第一遍看没有 ci透，就有些烦躁。静下心来，仔细通读，认真思考第一次没理解的点，前后串起来， ci透后感觉很好。以前看专栏，很少发评论。自从到极客后，从专栏优秀平均中学习了不少，很受鼓舞。坚持看，不懂就查，期待学完专栏的那天，也期待自己的成长","like_count":0},{"had_liked":false,"id":192851,"user_name":"单色","can_delete":false,"product_type":"c1","uid":1907486,"ip_address":"","ucode":"A1DA6E497FD74C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/1e/f5c16f7e.jpg","comment_is_top":false,"comment_ctime":1584875654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584875654","product_id":100017301,"comment_content":"习题：<br>最好O(1);<br>最坏O(n);<br>因为大多数时间复杂度为O(1)，所以计算的平均时间复杂度为O(1);<br>在利用均摊思想，将时间复杂度高的均摊到时间复杂度低的上，得到的均摊时间复杂度就为O(1);","like_count":0},{"had_liked":false,"id":192200,"user_name":"獨自去遠方","can_delete":false,"product_type":"c1","uid":1503941,"ip_address":"","ucode":"E246B33F397441","user_header":"https://static001.geekbang.org/account/avatar/00/16/f2/c5/2a441c27.jpg","comment_is_top":false,"comment_ctime":1584843004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584843004","product_id":100017301,"comment_content":"时间复杂度<br>\t最好情况时间复杂度（best case time complexity）<br>\t\t在最理想的情况下，执行这段代码的时间复杂度<br>\t最坏情况时间复杂度（worst case time complexity）<br>\t\t在最糟糕的情况下，执行这段代码的时间复杂度<br>\t平均情况时间复杂度（average case time complexity）<br>\t\t全称：加权平均时间复杂度或者期望时间复杂度<br>\t\t所有情况加权平均<br>\t均摊时间复杂度（amortized time complexity）<br>\t\t有些算法之后某次比较耗时，将其均摊到其他步骤<br>\t\t1\tO(n)<br>\t\tn-1\tO(1)<br>\t\t\t==&gt; O(1)","like_count":0},{"had_liked":false,"id":190915,"user_name":"luoyayun361","can_delete":false,"product_type":"c1","uid":1779257,"ip_address":"","ucode":"D3AD83D44EE721","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfLxAj43sGzJTnmdh8iawoNJ1VsdFvJHTHccxkX7HhtOFtTV9icG3B2Gt5EztPOicsicc3xG0XTlyUVg/132","comment_is_top":false,"comment_ctime":1584708964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584708964","product_id":100017301,"comment_content":"我感觉自己写了这么多年的程序，白写了","like_count":0},{"had_liked":false,"id":190633,"user_name":"JS","can_delete":false,"product_type":"c1","uid":1868196,"ip_address":"","ucode":"6C9F84EFED2B67","user_header":"https://static001.geekbang.org/account/avatar/00/1c/81/a4/a1906fd6.jpg","comment_is_top":false,"comment_ctime":1584674566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584674566","product_id":100017301,"comment_content":"上一章看完，我还以为我对复杂度了解的还可以了，没想到还可以分的这么细致，收获很大，不同的情况下，我们需要考虑到不同的复杂度，来更方便我们对整体复杂度的判断","like_count":0},{"had_liked":false,"id":190170,"user_name":"薯拾","can_delete":false,"product_type":"c1","uid":1698663,"ip_address":"","ucode":"38F8BD4C45CF49","user_header":"https://static001.geekbang.org/account/avatar/00/19/eb/67/840e4179.jpg","comment_is_top":false,"comment_ctime":1584610231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584610231","product_id":100017301,"comment_content":"| 扩容         | 0         | 1         | 2         | 3         |<br>| ------------ | --------- | --------- | --------- | --------- |<br>| O(1)次数     | len       | len       | 2len      | 4len      |<br>| 扩容复杂度   | O(len)    | O(2len)   | O(4len)   | O(8len)   |<br>| 均摊到前一段 | O(1)+O(1) | O(1)+O(2) | O(1)+O(2) | O(1)+O(2) |<br><br>","like_count":0},{"had_liked":false,"id":190157,"user_name":"三文鱼","can_delete":false,"product_type":"c1","uid":1698849,"ip_address":"","ucode":"2E16B6874E46C0","user_header":"https://static001.geekbang.org/account/avatar/00/19/ec/21/389214bb.jpg","comment_is_top":false,"comment_ctime":1584607858,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1584607858","product_id":100017301,"comment_content":"均摊时间复杂度就是一种特殊的平均时间复杂度","like_count":0},{"had_liked":false,"id":189805,"user_name":"SteelHuaSheng","can_delete":false,"product_type":"c1","uid":1396126,"ip_address":"","ucode":"BC8127FC5207FC","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/9e/04ec08bf.jpg","comment_is_top":false,"comment_ctime":1584555348,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584555348","product_id":100017301,"comment_content":"(1+1+1+...+1+n)&#47;(n+1) = (n+n)&#47;(n+1) = 2n&#47;(n+1) = 2&#47;(n+1) * n  然后舍掉系数2&#47;(n+1)，为什么不是O(n)???<br><br>因为2n&#47;(n+1)是个常数？","like_count":0},{"had_liked":false,"id":189603,"user_name":"BlackFlame33","can_delete":false,"product_type":"c1","uid":1354524,"ip_address":"","ucode":"8A1F1F987499F6","user_header":"https://static001.geekbang.org/account/avatar/00/14/ab/1c/f0050925.jpg","comment_is_top":false,"comment_ctime":1584533451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584533451","product_id":100017301,"comment_content":"老师好！各位同学好！<br>想问一下“均摊时间复杂度”这个部分，示例代码的平均时间复杂度为什么会是O(1)呢？我算了好几道，最后化简的结果如果没错应该是2n&#47;(n+1)吧？这个最后化简会是O(1)吗？","like_count":0},{"had_liked":false,"id":187876,"user_name":"阡陌","can_delete":false,"product_type":"c1","uid":1141254,"ip_address":"","ucode":"58634836C8E03F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6a/06/66831563.jpg","comment_is_top":false,"comment_ctime":1584264400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584264400","product_id":100017301,"comment_content":"是什么？<br>最好情况时间复杂度：在最理想的情况下执行这段代码的时间复杂度。<br>最坏情况时间复杂度：在最糟糕的情况下执行这段代码的时间复杂度。<br>平均情况时间复杂度：根据执行这段代码每种情况下的概率计算出的时间复杂度，因为最后计算出的值是加权平均值，也叫“期望值”，所以平均时间复杂度又叫做加权平均时间复杂度或期望时间复杂度。<br>均摊时间复杂度：一个数据结构进行连续操作过程中，大部分情况下时间复杂度很低，个别情况下时间复杂度很高，并且这些操作之间存在前后连贯的时序关系的时候，将高时间复杂度的耗时平摊到低时间复杂度的操作上计算出的时间复杂度就是均摊时间复杂度。（一般均摊时间复杂度就等于最好时间情况复杂度）<br><br>为什么？<br>在大多数情况下，不需要区分以上几种时间复杂度；只有在同一块代码在不同的情况下，时间复杂度优良级的差距才使用这这些复杂度来区分。 <br><br>怎么样（用）？<br>最好情况时间复杂度：<br>在最理想的情况下执行这段代码的时间复杂度。<br>（如在循环遍历查找数据时要查找的数据刚好位于数组首位）<br><br>最坏情况时间复杂度：<br>在最糟糕的情况下执行这段代码的时间复杂度。<br>（如遍历数组查找数据时，数组中不存在要查找的数据）<br><br>平均情况时间复杂度：<br>根据每种可能出现的情况的概率求加权平均值<br><br>均摊时间复杂度：<br>1.连续操作过程中，<br>2.大部分情况下时间复杂度很低，个别情况下时间复杂度很高，<br>3.操作之间存在前后连贯的时序关系<br>4.高时间复杂度的耗时平摊到低时间复杂度的操作上<br><br>课后思考：<br>最好情况时间复杂度：i &lt; len 时，直接赋值，复杂度O(1)<br>最坏情况时间复杂度：i &gt;= len 时，遍历数组并扩容，复杂度O(n)<br>平均情况时间复杂度：总计有n+1种可能，i &lt; len 时有n种情况，复杂度都是O(1)，每种概率为1&#47;n+1,<br>计算方式为：1*（1&#47;n+1）+ 1*（1&#47;n+1）+ 1*（1&#47;n+1）... + n*（1&#47;n+1）= 2n&#47;n+1,复杂度为O(1)<br>均摊时间复杂度：将第n+1次的时间完全均摊到前面n种情况下，得到每种情况复杂度都为O(1),总的复杂度即为O(1)","like_count":0},{"had_liked":false,"id":187706,"user_name":"Geek_34246a","can_delete":false,"product_type":"c1","uid":1906132,"ip_address":"","ucode":"E23E0FEBC6317F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KeWC8Vpq81QRyuXicGou3K9koILNSNqAm56NdckYfkMFysTM0jrO3FUnWDoK6xFbeBvJkOlwpKOjqHmbJb5PDDg/132","comment_is_top":false,"comment_ctime":1584195898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584195898","product_id":100017301,"comment_content":"最好是O(1)，最差是O(n), 均摊是O(1)<br><br>摊还分析法基本上明白了大概，平均时间复杂度的公式太难理解了😭","like_count":0},{"had_liked":false,"id":186868,"user_name":"wholly","can_delete":false,"product_type":"c1","uid":1089235,"ip_address":"","ucode":"3CB7D06CC6C670","user_header":"https://static001.geekbang.org/account/avatar/00/10/9e/d3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1583941384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583941384","product_id":100017301,"comment_content":"有空间就是O(1)，即最好的时间复杂度，否则就是O(N)，即最坏的时间复杂度，平均复杂度应该是O(1)","like_count":0},{"had_liked":false,"id":186839,"user_name":"Roc","can_delete":false,"product_type":"c1","uid":1802610,"ip_address":"","ucode":"0D71BD87E3DD54","user_header":"https://static001.geekbang.org/account/avatar/00/1b/81/72/e6dbf6f3.jpg","comment_is_top":false,"comment_ctime":1583936538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583936538","product_id":100017301,"comment_content":"平均与均摊的区别在于，均摊考虑连续发生的有序列的事件，适合用均摊的场景是有’周期性’的事件。","like_count":0},{"had_liked":false,"id":186058,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1583747322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583747322","product_id":100017301,"comment_content":"打卡4","like_count":0},{"had_liked":false,"id":184707,"user_name":"小小杨","can_delete":false,"product_type":"c1","uid":1105218,"ip_address":"","ucode":"7E4DC9A782FFD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/42/4a82631e.jpg","comment_is_top":false,"comment_ctime":1583387878,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583387878","product_id":100017301,"comment_content":"由于最好最坏时间复杂度有数据量级的差别。最好时间复杂度为O(1),最坏时间复杂度为O(n).由于在大多数情况时间复杂度O(1),只有个别情况为O(n),我们需要把个别最坏情况均摊。规律为1&#47;n情况下为n,n-1&#47;n情况下为最好时间复杂度。均摊后为O(1).所以平均时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":184459,"user_name":"赤云","can_delete":false,"product_type":"c1","uid":1093258,"ip_address":"","ucode":"67476D582D8B6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/ae/8a/e67def95.jpg","comment_is_top":false,"comment_ctime":1583320430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583320430","product_id":100017301,"comment_content":"要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组的 0～n-1 位置中和不在数组中。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即  不明白 这个 公式 ","like_count":0},{"had_liked":false,"id":184072,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1583218342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583218342","product_id":100017301,"comment_content":"现在面试和实际工作中考虑比较多的是最坏时间复杂度，题目中是O（n），最坏情况是O（n），平均和均摊都是O(1).","like_count":0},{"had_liked":false,"id":183908,"user_name":"JuneMare","can_delete":false,"product_type":"c1","uid":1891472,"ip_address":"","ucode":"4A3437B3CEF544","user_header":"","comment_is_top":false,"comment_ctime":1583160349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583160349","product_id":100017301,"comment_content":"老师好。这道练习题的时间复杂度我没疑问。我想问的是，这道练习题的空间复杂度是多少？对于n个输入项，如果n&lt;=10，那么其空间复杂度是O(n)。如果n=11，那么其空间复杂度是2n。所以，，空间复杂度是否也有“最好”，“最坏”，“平均”和“均摊”的说法？如果有，那么均摊以后的空间复杂度应该是O(n)，，我这么分析对不对？","like_count":0},{"had_liked":false,"id":183820,"user_name":"whiplash","can_delete":false,"product_type":"c1","uid":1177869,"ip_address":"","ucode":"885324412FE9D2","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/0d/8569f89a.jpg","comment_is_top":false,"comment_ctime":1583140848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583140848","product_id":100017301,"comment_content":"练习题：<br>最好时间复杂度i&lt;len时, O(1)<br>最差时间复杂度:<br>设此时长度为LEN，则第k次扩容时，LEN=(2^k)*len,k为固定值，最坏时间复杂度为O(n)<br>平均时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":183572,"user_name":"Yannis","can_delete":false,"product_type":"c1","uid":1256263,"ip_address":"","ucode":"FC62D676566EEE","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/47/0f998c46.jpg","comment_is_top":false,"comment_ctime":1583069515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583069515","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":183464,"user_name":"金先生","can_delete":false,"product_type":"c1","uid":1225341,"ip_address":"","ucode":"387518721F7CE6","user_header":"","comment_is_top":false,"comment_ctime":1583047189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583047189","product_id":100017301,"comment_content":"‘最好、最坏情况时间复杂度’第一段代码 ：<br>&#47;&#47; n表示数组array的长度<br>int find(int[] array, int n, int x) {<br>  int i = 0;<br>  int pos = -1;<br>  for (; i &lt; n; ++i) {<br>    if (array[i] == x) pos = i;<br>  }<br>  return pos;<br>}<br>if语句后面是否应该带个 break;","like_count":0},{"had_liked":false,"id":182640,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1721168,"ip_address":"","ucode":"80C2A6452AB9EA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/43/50/abb4ca1e.jpg","comment_is_top":false,"comment_ctime":1582821163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582821163","product_id":100017301,"comment_content":"课后题：add 方法调用x次后，数组的长度可能是 10 的倍数，也是不确定的值，可以定义成new int[n] 效果一样样的，这个n 也并未给你具体值。","like_count":0},{"had_liked":false,"id":181258,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1582528539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582528539","product_id":100017301,"comment_content":"这个感觉像是List数组实现的精简版，平均时间复杂度O(1)","like_count":0},{"had_liked":false,"id":181061,"user_name":"JustRunning","can_delete":false,"product_type":"c1","uid":1061157,"ip_address":"","ucode":"2F18DB26500AC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/25/1a55bb52.jpg","comment_is_top":false,"comment_ctime":1582468365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582468365","product_id":100017301,"comment_content":"小结：<br>&gt; 有些情况下，复杂度和测试数据量级或者条件有关，不同条件下，复杂度会有明显区别，这时就需要我们考虑其它维度来表示，故引入这四个概念。 <br>+ 最好情况时间复杂度（best case time complexity）<br>+ 最坏情况时间复杂度(worst case time complexity)<br>+ 平均情况时间复杂度(average case time complexity)：适用于每个情况下复杂度不一样场景表示，对每个复杂度情况做加权平均值计算，比如，数组中数据查找匹配。<br>+ 均摊时间复杂度(amortized time complexity)：适用于小概率性出现最坏情况复杂度的场景，将小概率最坏复杂度和全部复杂度情况均摊计算，一般情况均摊复杂度等于最好时间复杂度。如课后习题数组的操作示例，触发扩容时复杂度O(n),未触发是O(1),可见一个O(n)伴随n-1个O(1),均摊后为O(1)~","like_count":0},{"had_liked":false,"id":181034,"user_name":"熙","can_delete":false,"product_type":"c1","uid":1242915,"ip_address":"","ucode":"1CFA86C710F064","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/23/a57973ee.jpg","comment_is_top":false,"comment_ctime":1582463410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582463410","product_id":100017301,"comment_content":"最好是O(1)，最差是O(n)，均摊是O(1)","like_count":0},{"had_liked":false,"id":180321,"user_name":"Yifan","can_delete":false,"product_type":"c1","uid":1739220,"ip_address":"","ucode":"EE866C96B3A54A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI1MqK71ITCXdWAJ2W0L24hvYcv64sg1SwYFT6eB3EYnsdBhPymPXibz4ptWljlnrbao3ial5anicKZg/132","comment_is_top":false,"comment_ctime":1582256739,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582256739","product_id":100017301,"comment_content":"看了很多同学的评论，现在把我的答案和今天的笔记写上来：<br>1、问题解答：<br>最好时间复杂度：O(1)，即当 i=0，1，……，len-1 的时候，不会进入for循环，因此都是O(1)<br>最差时间复杂度：O(n)，当i &gt;= len 的时候，需要进入for循环，因此是O(n)<br>平均时间复杂度：O(1)，用期望的方式来做，0~len-1 有 n 种可能，加上进入循环的 i=len 情况，共有n+1种可能，因此在假设每种可能出现情况均等的考虑下，T(n)=O(1+1+...+1+n)&#47;(n+1) = O(1)<br>均摊时间复杂度：与平均不同，均摊时间复杂度考虑的是将多的那部分时间分到剩下的时间里面去，因此为：（1+1+...+1+n）&#47;（n+1）=2n&#47;(n+1), 分子分母数量级相同，计算结果为常数，O(1)。<br><br>2、笔记：<br>四种复杂度，两本书：《大话数据结构》、《图解算法》，都已经找到，准备同步一起看了。<br>","like_count":0},{"had_liked":false,"id":180116,"user_name":"Purson","can_delete":false,"product_type":"c1","uid":1446120,"ip_address":"","ucode":"5F0C1BB3C0C0A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","comment_is_top":false,"comment_ctime":1582191292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582191292","product_id":100017301,"comment_content":"思考题：首先，这个函数的功能是循环插入数据，直到没有位置的时候按2倍扩大数组空间，然后把前面的数据拷贝到新数组，然后在新数组后面继续插入。<br><br>最优情况： O(1)，因为一开始就有位置插入，而且前面没有影响插入位置。<br>最差情况：<br>最差情况跟每次数组长度有关：<br>第一次没有空间，执行次数为 n<br>第二次没有空间，执行次数为 2n<br>第三次…… 2 \\times 2 \\times n<br>第k次，则执行次数是 2k-1\\timesn<br><br>加权平均概率：<br>概率是：\\frac{1}{n} \\frac{1}{2n} \\frac{1}{4n}……<br><br>加权平均是：<br>1 \\times \\frac{1}{n+1} + 1 \\times \\frac{1}{n+1} + …… +n \\times \\frac{1}{n+1} + 1 \\times \\frac {1}{2n+1} + 1 \\times \\frac{1}{2n+1} ……+2n \\times \\frac{1}{2n+1} …… = O(1)<br>去掉常数、系数和低阶<br><br>n是执行的次数，一定要记住<br><br>使用均摊复杂度，每出现n次，2n次O(1)的情况，都会出现一次O(n)的情况，将最高复杂度的O(n) O(2n)均摊到前面，也不会影响整体复杂度，也是O(1)。另外一个角度，因为O(1)占大多数。","like_count":0},{"had_liked":false,"id":179176,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1581931891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581931891","product_id":100017301,"comment_content":"最好时间复杂度是O(1)，最坏时间复杂度是O(n)，平均时间复杂度是O(1),均摊时间复杂度是O(1)。 只有在需要扩容的情况下，才存在循环的情况。","like_count":0},{"had_liked":false,"id":179088,"user_name":"yan","can_delete":false,"product_type":"c1","uid":1667264,"ip_address":"","ucode":"BA33B672798AEE","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/c0/b365a317.jpg","comment_is_top":false,"comment_ctime":1581910858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581910858","product_id":100017301,"comment_content":"练习题：    <br>最好情况时间复杂度O(1)<br>最坏情况时间复杂度O(n)<br>平均情况时间复杂度O(1)","like_count":0},{"had_liked":false,"id":177488,"user_name":"坑坑","can_delete":false,"product_type":"c1","uid":1221707,"ip_address":"","ucode":"CC5A357B21393C","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/4b/a522594f.jpg","comment_is_top":false,"comment_ctime":1581403627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581403627","product_id":100017301,"comment_content":"最好情况复杂度：最好的情况下，需要执行的运算次数；<br>最坏情况复杂度：最坏的情况下，需要执行的运算次数；<br>平均情况复杂度：当最好最坏复杂度是极特殊的情况，且操作之间无关联的情况，我们需要考虑平均情况复杂度；<br>均摊情况复杂度：均摊与平均类似，本质都是考虑的加权求和（期望），只不过均摊是一种特殊的平均复杂度，它出现的条件是N-1次的A操作之后，会紧接着一次B操作；具有规律性。这种情况下，如果A操作是比B复杂度高的操作，则均摊复杂度就是A操作的复杂度；如果B操作是相对较高的复杂度，则复杂度就是B的复杂度除以N。<br>","like_count":0},{"had_liked":false,"id":177383,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1581383790,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581383790","product_id":100017301,"comment_content":"练习题的四个复杂度与最后一个例子一样 计算时难点在于平均复杂度考虑概率。考虑概率就要考虑一共有几种情况，比如对于这道题来说，数组0……n-1一共n种情况，数组满了为第n+1种情况","like_count":0},{"had_liked":false,"id":176642,"user_name":"王jojo","can_delete":false,"product_type":"c1","uid":1812840,"ip_address":"","ucode":"1ABE7FA2614F86","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/68/ec442a70.jpg","comment_is_top":false,"comment_ctime":1581126916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581126916","product_id":100017301,"comment_content":"均摊时间复杂度这个是一个新知识,之前没有遇到过","like_count":0},{"had_liked":false,"id":176177,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1805708,"ip_address":"","ucode":"32061232765E6A","user_header":"https://static001.geekbang.org/account/avatar/00/1b/8d/8c/2d1065bf.jpg","comment_is_top":false,"comment_ctime":1580979528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580979528","product_id":100017301,"comment_content":"老师您好，我有个疑问。加法法则口头上说是加法法则为什么落实到具体却是取其最大呢。我知道大O的表示法会去掉常量，低阶，系数但如果这样的话。加法法则的名字就显得不那么正确了呀。希望老师解答一下，谢谢老师","like_count":0},{"had_liked":false,"id":175259,"user_name":"Geek_2eb9a7","can_delete":false,"product_type":"c1","uid":1817695,"ip_address":"","ucode":"0E836084C538D5","user_header":"","comment_is_top":false,"comment_ctime":1580633799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580633799","product_id":100017301,"comment_content":"最后习题里的代码，大部分情况处于最小复杂度O(1)，少数情况处于最大复杂度O(n)，采用摊还分析法将少数情况均摊到多数情况上，最后得到均摊复杂度也为O(1)，即大多数情况所处的复杂度。是否可大致认为均摊复杂度决定于大多数情况所处的复杂度？","like_count":0},{"had_liked":false,"id":175047,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1580537552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580537552","product_id":100017301,"comment_content":"看到思考题的时候，无从下手，因为没有看到n。。。<br>仔细看了代码和留言以后才知道其实这段代码的时间复杂度主要看扩容部分，如果插入数据时，求组还没有满，那么时间复杂度就是O(1)；如果插入数据的时候，恰好数组满了，就需要把原来数组的数据拷贝到新的数组，这时的时间复杂度就是O(n)","like_count":0},{"had_liked":false,"id":174986,"user_name":"奥特之光","can_delete":false,"product_type":"c1","uid":1088786,"ip_address":"","ucode":"10EE0B8B839975","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/12/af03109d.jpg","comment_is_top":false,"comment_ctime":1580490179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580490179","product_id":100017301,"comment_content":"老师，1+2+3....+n+n／(n+1) = n(n+3)&#47;2(n+1) 这个推导的结果不对吧？我推出的结果是n(n+3)&#47;2,所以时间复杂度就是O(n^2)吧？？后面的加权平均确实是(3n+1)&#47;4，时间复杂度是O(n)","like_count":0},{"had_liked":false,"id":174984,"user_name":"奥特之光","can_delete":false,"product_type":"c1","uid":1088786,"ip_address":"","ucode":"10EE0B8B839975","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/12/af03109d.jpg","comment_is_top":false,"comment_ctime":1580489112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580489112","product_id":100017301,"comment_content":"老师，1+2+3....+n+n／(n+1) = n(n+3)&#47;2(n+1) 这个推导的结果不对吧？我推出的结果是n(n+3)&#47;2,所以时间复杂度就是n^2吧？？?","like_count":0},{"had_liked":false,"id":174550,"user_name":"谢真","can_delete":false,"product_type":"c1","uid":1124650,"ip_address":"","ucode":"8C3402DE107C9F","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/2a/9079f152.jpg","comment_is_top":false,"comment_ctime":1580271570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580271570","product_id":100017301,"comment_content":"原来评估算法场景也有这么多道道，学到了。<br>","like_count":0},{"had_liked":false,"id":173476,"user_name":"慕心倾寒","can_delete":false,"product_type":"c1","uid":1812400,"ip_address":"","ucode":"29834C51557DE9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a7/b0/fd96ca0e.jpg","comment_is_top":false,"comment_ctime":1579571494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579571494","product_id":100017301,"comment_content":"老师最坏的那个是O（len），但是len的大小是变化的啊","like_count":0},{"had_liked":false,"id":172648,"user_name":"马志远","can_delete":false,"product_type":"c1","uid":1480892,"ip_address":"","ucode":"AAD8875343E5FC","user_header":"https://static001.geekbang.org/account/avatar/00/16/98/bc/6d5affd3.jpg","comment_is_top":false,"comment_ctime":1579243327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579243327","product_id":100017301,"comment_content":"04 | 复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度<br>一.why-为什么会使用到最好、最坏、平均、均摊时间复杂度<br>1.同一段代码，在不同输入的情况下，复杂度量级有可能是不一样的(概率问题==即同一段代码不同情况下执行次数会不同)<br>2.在引入这几个概念之后，我们可以更加全面地表示一段代码的执行效率(将可能性及概率作为分析条件)<br>二.what-概念<br>1.最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度<br>2.最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度<br>3.平均情况时间复杂度：<br>&lt;1&gt;加权求平均<br>平均时间复杂度 = 所有可能情况需要执行的总次数和 &#47; 情况的总数<br>&lt;2&gt;概率均值<br>平均时间复杂度 = (每种可能情况需要执行的次数 X 概率 ) 求和<br>4.均摊时间复杂度<br>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度.<br>Tips:<br>1.有规律的可以分摊<br>2.大部分情况是在一种相同的情况下","like_count":0},{"had_liked":false,"id":172241,"user_name":"小白教程","can_delete":false,"product_type":"c1","uid":1516156,"ip_address":"","ucode":"286D8C34A69933","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzhOH0l6xRZJl5mWLMejQV0uDbd9TOZly3B9oDmxXb6RT4u2zQrKJyUFmS8aauicgmzicqsXtLyDQQ/132","comment_is_top":false,"comment_ctime":1579138974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579138974","product_id":100017301,"comment_content":"n + 1 种情况出现的概率为什么不一样？","like_count":0},{"had_liked":false,"id":171248,"user_name":"锋","can_delete":false,"product_type":"c1","uid":1807836,"ip_address":"","ucode":"F26BC1F14AB0D7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/95/dc/07195a63.jpg","comment_is_top":false,"comment_ctime":1578886056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578886056","product_id":100017301,"comment_content":"老师你好，我有一个疑问，前天提到只要在循环中是固定长度的，就可以认为是O(1),比如： for (i; i &lt;10; ++i) ；这里的是for (int j = 0; j &lt; len; ++j)，但是前面有定义int len = 10;那么，这里为什么不认为是O(1)，现在对这个有点模糊","like_count":0},{"had_liked":false,"id":170422,"user_name":"Geek_f93234","can_delete":false,"product_type":"c1","uid":1769504,"ip_address":"","ucode":"1E5DC903A5429E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGXndj5N66z9BL1ic9GibZzWWgoVeWaWTL2XUnCYic7iba2kAEvN9WfjmlXELD5lqt8IJ1P023N5ZWicg/132","comment_is_top":false,"comment_ctime":1578609217,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1578609217","product_id":100017301,"comment_content":"思考题：<br>最好情况时间复杂度：<br>i&lt;len情况，算法执行20，21行，2行代码，时间复杂度O(1) <br><br>最坏情况时间复杂度：<br>i&gt;=len,算法执行 if条件下for循环语句块，时间复杂度O(n)<br><br>平均时间复杂度：<br><br>第1种计算方式：(1+1+.....+1+n)&#47;(n+1)=2n&#47;(n+1),平均复杂度O(1)<br><br>第2种计算方式(加权平均法，又称期望平均法):1* (1&#47;(n+1))+1 *(1&#47;(n+1))+....+1 *(1&#47;(n+1))+1 *(1&#47;(n+1))+n *(1&#47;(n+1))=(n-1) *(1&#47;(n+1))+ n *(1&#47;(n+1))=(2n-1) * (1&#47;(n+1))= (2n-1)&#47;(n+1)=O(1)<br><br>均摊时间复杂度：<br>每次扩容的数量都是原来的2倍，都是经历之前的数组长度的次数再次扩容，所以被完全均摊了<br><br>O(1)<br><br>因为这个add方法是每次O(n)之后就会有n-1次O(1),所以可以采用摊还分析法。所以均摊下来的均摊时间复杂度为O(1)。","like_count":0},{"had_liked":false,"id":170242,"user_name":"王££","can_delete":false,"product_type":"c1","uid":1322881,"ip_address":"","ucode":"9DADA7C5218A15","user_header":"https://static001.geekbang.org/account/avatar/00/14/2f/81/131ea1e4.jpg","comment_is_top":false,"comment_ctime":1578555972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578555972","product_id":100017301,"comment_content":"平均时间复杂度比较有意义, 一般基础工具会对最坏时间复杂度比较关心","like_count":0},{"had_liked":false,"id":169496,"user_name":"🤖","can_delete":false,"product_type":"c1","uid":1711991,"ip_address":"","ucode":"E7205BC8641C29","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1f/77/3d928b0f.jpg","comment_is_top":false,"comment_ctime":1578366031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578366031","product_id":100017301,"comment_content":"第一次看没有联系，都遗忘了，第二次留下足迹..<br><br>最好时间复杂度为：<br>\t当数组空间够时：O(1)\t<br>最坏时间复杂度为：<br>\t当数组空间不够时：O(n)<br>平均时间复杂度：<br>\t若len=n,根据数据插入位置的不同，可以分为n种情况，每种情况的复杂度为O(1)，此外还有一种特殊的情况，就是当数组没有空间时要进行数组的扩容，复杂度为<br>\tO(n),这n+1种情况发生的概率是一样的。 加权求平均后得到平均时间复杂度为O（1）<br>均摊时间复杂度：每n次O(1)的操作后才会跟着一次O(n)的数组扩容操作，均摊后时间复杂度为O（1）","like_count":0},{"had_liked":false,"id":169363,"user_name":"板栗","can_delete":false,"product_type":"c1","uid":1239741,"ip_address":"","ucode":"35B8B2CB2E0214","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/bd/aba4b2c9.jpg","comment_is_top":false,"comment_ctime":1578322534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578322534","product_id":100017301,"comment_content":"只有在i&gt;=len 的时候才是最坏时间复杂度O(n) <br>  其他情况的时间复杂度都是O(n),<br>  每种情况出现的概率相同的情况下,时间复杂度是O(1)<br>  看到有人纠结 每次翻倍的数组重置吧。<br>  我觉得当n-&gt;+∞ 的时候, O(n)时间复杂度情况  应该 无限接近 0,所以复杂度应该是O(1)","like_count":0},{"had_liked":false,"id":168951,"user_name":"雪山飞狐","can_delete":false,"product_type":"c1","uid":1475485,"ip_address":"","ucode":"66FBC2AB10B77F","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/9d/fe638260.jpg","comment_is_top":false,"comment_ctime":1578224327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578224327","product_id":100017301,"comment_content":"之所以要引入最好情况时间复杂度，最坏情况时间复杂度，平均(期望)时间复杂度以及均摊时间复杂度，是因为同一段代码，在不同数据输入情况下，其复杂度量级有可能是不一样的。<br>add函数里，当i&lt;len时，最好情况时间复杂度为O(1),当i&gt;=len时，最坏情况时间复杂度为O(n)，而平均时间复杂度为(1+1+...+1+n)&#47;(n+1)=O(1)，又因为操作是连贯的极少数高复杂度操作接续多数低复杂度操作，因此均摊时间复杂度为O(1)。","like_count":0},{"had_liked":false,"id":168331,"user_name":"杰瑞的Jerry","can_delete":false,"product_type":"c1","uid":1690017,"ip_address":"","ucode":"5FBF22B528B721","user_header":"https://static001.geekbang.org/account/avatar/00/19/c9/a1/24c2e54e.jpg","comment_is_top":false,"comment_ctime":1578048777,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1578048777","product_id":100017301,"comment_content":"学完本节打卡：<br><br>本节讲述四个不同的复杂度分析方法：<br>1）最好、最坏情况时间复杂度：在最理想&#47;最糟糕的情况下，执行代码的时间复杂度。<br>2）平均情况时间复杂度：把不同情况下的复杂度乘以对应的概率相加，得到加权平均时间复杂度。一般最好、最坏和平均复杂度不做区分，除非三者数量级有区别。<br>3）均摊时间复杂度：把几次时间复杂度较高的情况平均到时间复杂度较低到情况。","like_count":0},{"had_liked":false,"id":167873,"user_name":"未来怎样","can_delete":false,"product_type":"c1","uid":1652085,"ip_address":"","ucode":"4E54EB62595B27","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKORTofsU89GYKtywquzKuEiabvZnEOonfMYKuCPlo8GDlXqZuJdBicu0XtlaeodH4BnmHV1kldSAwQ/132","comment_is_top":false,"comment_ctime":1577955508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577955508","product_id":100017301,"comment_content":"最好的情况下，数组有空位直接插入，时间复杂度为O(1),最坏的情况下，数组没空位，需要扩容，时间复杂度为O(n)，均摊时间复杂度计算：每一次扩容O(n)之后都需要n次O(1)的插入操作，将O(n)均摊到每次的插入操作中得到的时间复杂度仍是O(1)。","like_count":0},{"had_liked":false,"id":167842,"user_name":"王凯","can_delete":false,"product_type":"c1","uid":1746317,"ip_address":"","ucode":"3A8FE67E83E73F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a5/8d/839becc5.jpg","comment_is_top":false,"comment_ctime":1577948584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577948584","product_id":100017301,"comment_content":"不懂，平均和均摊搞不懂，数学一点不好啊，没有一点思维","like_count":0},{"had_liked":false,"id":167373,"user_name":"毛玉娇","can_delete":false,"product_type":"c1","uid":1249192,"ip_address":"","ucode":"BC0F0FEEEAD5DD","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/a8/5bec6811.jpg","comment_is_top":false,"comment_ctime":1577779170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577779170","product_id":100017301,"comment_content":"明白了为啥要区分时间复杂度。同一代码在不同情况下有不同数量级的时间复杂度。平均时间复杂度要通过概率来推导，均摊时间复杂度是平均的特例，一般就等于最好时间复杂度","like_count":0},{"had_liked":false,"id":167141,"user_name":"liyghting","can_delete":false,"product_type":"c1","uid":1108970,"ip_address":"","ucode":"439794ECEEFD26","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/ea/7d00f657.jpg","comment_is_top":false,"comment_ctime":1577697987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577697987","product_id":100017301,"comment_content":"本节总结：因为同一段代码，不同情况下，执行的时间可能不同，所以复杂度也不同，针对此种情况，可分为最好情况时间复杂度，最坏情况时间复杂度，平均情况时间复杂度，均摊时间复杂度。<br>平均时间复杂度全称为加权平均时间复杂度或期望时间复杂度，此种说法是对概率统计来说的，是要把每种情况出现的概率分析出来，累加起来<br>均摊时间复杂度是一种特殊情况下的平均时间复杂度，里面有种分析叫摊还分析，是一开始都是一样的复杂度，后面紧挨着特殊的时间复杂度，这样有规律的出现。这样我们就可以用摊还分析的方法分析这段代码的时间复杂度。一般情况下，此种分析出来的结果都跟最好情况时间复杂度结果一样。<br><br>思考题的代码就可用摊还分析。每一次 O(n) 的数据复制扩充操作，都会跟着 n 次 O(1) 的添加操作，所以把耗时多的那次操作均摊到接下来的 n 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1).<br>","like_count":0},{"had_liked":false,"id":167110,"user_name":"CalanceHao","can_delete":false,"product_type":"c1","uid":1401137,"ip_address":"","ucode":"068B4AC4D1D402","user_header":"https://static001.geekbang.org/account/avatar/00/15/61/31/211ac1a9.jpg","comment_is_top":false,"comment_ctime":1577693311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577693311","product_id":100017301,"comment_content":"思考题：<br>未溢出的情况下：执行插入直接放到末尾，T=O(1)<br>假如越界：重新申请一个两倍大的空间，把现有的数字挪过去，T=O(n)<br>怎么平均呢，可以把越界处理作为标志切分从第一个数插入到第n个数的操作序列。<br>那么每段序列都是类似的格式：一个O(n)接着n-1个O(1)<br>可以把这个O(n)拆开，摊到每一次插入上，所以插入操作的时间复杂度还是O(1)","like_count":0},{"had_liked":false,"id":167093,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1640973,"ip_address":"","ucode":"2C0D1D26853DB3","user_header":"https://static001.geekbang.org/account/avatar/00/19/0a/0d/7bac5bcb.jpg","comment_is_top":false,"comment_ctime":1577690470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577690470","product_id":100017301,"comment_content":"当数组中有空闲空间的时候可以直接插入，所以最好时间复杂度：O(1)<br>当数组中已经没有空余空间的时候需要进行扩容，此时设置到数组的搬移，因此最坏时间复杂度：O(n)<br>平均时间复杂度：O(1)<br>没经历一次扩容(O(n))就会有连续的n-1次插入(O(1))，所以瘫痪时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":167027,"user_name":"阿顾","can_delete":false,"product_type":"c1","uid":1605676,"ip_address":"","ucode":"6DFD19C57559EC","user_header":"","comment_is_top":false,"comment_ctime":1577672785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577672785","product_id":100017301,"comment_content":"最好是O(1)，最差是O(n)，均摊是O(1)","like_count":0},{"had_liked":false,"id":166964,"user_name":"莺时无念","can_delete":false,"product_type":"c1","uid":1748695,"ip_address":"","ucode":"036B1C25C146BE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ae/d7/71da1b4a.jpg","comment_is_top":false,"comment_ctime":1577640676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577640676","product_id":100017301,"comment_content":"为什么啊   为什么每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，","like_count":0},{"had_liked":false,"id":166161,"user_name":"杰19","can_delete":false,"product_type":"c1","uid":1477959,"ip_address":"","ucode":"392C436723B696","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKHiaoY395kRV80uy2WzNWOpIc28mFJBYnJvoWiaw62Jibf5Hz14MAiczOic6raj68icUGxy8ichQsNgTtkQ/132","comment_is_top":false,"comment_ctime":1577410033,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577410033","product_id":100017301,"comment_content":"并没有清空数组的操作，麻烦老师加上","like_count":0},{"had_liked":false,"id":165764,"user_name":"隰有荷","can_delete":false,"product_type":"c1","uid":1357944,"ip_address":"","ucode":"2BE9A32AB28963","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/78/2828195b.jpg","comment_is_top":false,"comment_ctime":1577320041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577320041","product_id":100017301,"comment_content":"老师，为什么比较耗时的O(n)可以被分摊到其他的O(1)上？如果O(n)变成O(n平方)甚至更高的时间复杂度，那么仍然可以按照文中这种方式分摊吗？","like_count":0},{"had_liked":false,"id":163363,"user_name":"俺能学个啥","can_delete":false,"product_type":"c1","uid":1026742,"ip_address":"","ucode":"30740C5B58774C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/b6/46a5bbf3.jpg","comment_is_top":false,"comment_ctime":1576713491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576713491","product_id":100017301,"comment_content":"最好的情况是i&lt;len，有len-1种可能，时间复杂度为O(1)；最坏的情况是i&gt;=len，有1种可能，需要重新开辟一个2倍内存空间，进行重新赋值操作，时间复杂度为O(n)；均摊时间复杂度的计算就是(n-1+n)&#47;n，去掉系数、常量即为1，所以均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":161979,"user_name":"bolo","can_delete":false,"product_type":"c1","uid":1357170,"ip_address":"","ucode":"7C91CEA2F1970E","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/72/bb10f3d0.jpg","comment_is_top":false,"comment_ctime":1576421976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576421976","product_id":100017301,"comment_content":"打卡 2019-12-15<br>课后练习题：<br>最好时间复杂度为：O(1)<br><br>&gt; 当数组的内元素小于10的时候，可以直接插入，此时时间复杂度为O（1）<br><br>最坏时间复杂度为：O(n)<br><br>&gt; 当插入的数据位置为n+ 1, 切n &gt; 10 的时候，需要重新申请数组空间，原数组内copy到新的数组内。当n比较大时，需要拷贝 n 次。此时的时间复杂度为O（n）<br><br>均摊时间复杂度： O()<br><br>&gt; 每一次O（n）的添加操作，都伴随着n-1次的O（1）操作。此时将耗时的O（n）操作均摊到n-1次操作上，此时的时间复杂度为：O（1） + O（1） +..... + O（1） =  O（1） <br><br>","like_count":0},{"had_liked":false,"id":161288,"user_name":"Geek_7eb910","can_delete":false,"product_type":"c1","uid":1766420,"ip_address":"","ucode":"09C29DDA765DDB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoFeJs9k8pQqHQG0Jo5s9rCH4pSWH5AsUOKySDAY5lWI0yib68G143Ej2wORPrb09yAnm9TGrIWkwA/132","comment_is_top":false,"comment_ctime":1576166520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576166520","product_id":100017301,"comment_content":"老师，我有点不太明白，文中的insert和add操作，为什么算平均时间复杂度的时候不是分为1／2的在数组内和1／2的不在数组内呢，这两段代码里都只是把插入的数据放在数组末尾，不会在数组的别的位置啊，我觉得不是1／n而是1啊？","like_count":0},{"had_liked":false,"id":161122,"user_name":"霍","can_delete":false,"product_type":"c1","uid":1123619,"ip_address":"","ucode":"A77B25C124926F","user_header":"https://static001.geekbang.org/account/avatar/00/11/25/23/b9db9e81.jpg","comment_is_top":false,"comment_ctime":1576122576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576122576","product_id":100017301,"comment_content":"作业：<br>作业：\r<br>\ti的取值两种情况：a)i&lt;len;b)i&gt;=len，当i&lt;len（i取值范围0~len-1,len个）的时候，直接插入数据到i下标上就好所以时间复杂度是O(1)；\r<br>当i&gt;=len时（不管i大于或者等于len都算一次）这是最坏的情况时间复杂度是O(n)。总共存在len + 1种可能。\r<br>\ta）平均时间复杂度\r<br>\t\tlen *1&#47;（len + 1）+ len &#47;(len + 1) = O(1)\r<br>\tb）均摊时间复杂度\r<br>\t\ti&gt;=len最坏O(n)，均摊给i&lt;len的len种情况，会执行len次，i&lt;len也有len种可能，所以最坏的len次&#47;最好情况len种可能 = 1，所以\r<br>\t算出来的时间复杂度也是O（1）\r<br>\r<br>例子 insert方法是不是有个错误，&quot;count == array.length&quot;改为“count&lt;array.length”才理解的通<br>","like_count":0},{"had_liked":false,"id":160181,"user_name":"D0 N0W","can_delete":false,"product_type":"c1","uid":1602108,"ip_address":"","ucode":"F7A82748E15BAA","user_header":"https://static001.geekbang.org/account/avatar/00/18/72/3c/b5c70806.jpg","comment_is_top":false,"comment_ctime":1575886618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575886618","product_id":100017301,"comment_content":"最好O(1)，最坏O(n)，其实可以在每次扩容的地方做切割，这样就转换为上面讲的那个例子，所以平均是O(1)，均摊是O(1)","like_count":0},{"had_liked":false,"id":160138,"user_name":"Rika","can_delete":false,"product_type":"c1","uid":1754462,"ip_address":"","ucode":"3774AC9B8F3963","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c5/5e/ea1ebcfa.jpg","comment_is_top":false,"comment_ctime":1575877974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575877974","product_id":100017301,"comment_content":"练习题最好是O(1)，最差是O(n), 均摊是O(1)。<br>这篇文章断断看了两个星期，终于整明白了，大家加油，不要放弃。","like_count":0},{"had_liked":false,"id":159166,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1575550826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575550826","product_id":100017301,"comment_content":"<br>&#47;&#47; 全局变量，大小为 10 的数组 array，长度 len，下标 i。<br>int array[] = new int[10]; <br>int len = 10;<br>int i = 0;<br><br>&#47;&#47; 往数组中添加一个元素<br>void add(int element) {<br>   if (i &gt;= len) { &#47;&#47; 数组空间不够了<br>     &#47;&#47; 重新申请一个 2 倍大小的数组空间<br>     int new_array[] = new int[len*2];<br>     &#47;&#47; 把原来 array 数组中的数据依次 copy 到 new_array<br>     for (int j = 0; j &lt; len; ++j) {<br>       new_array[j] = array[j];<br>     }<br>     &#47;&#47; new_array 复制给 array，array 现在大小就是 2 倍 len 了<br>     array = new_array;<br>     len = 2 * len;<br>   }<br>   &#47;&#47; 将 element 放到下标为 i 的位置，下标 i 加一<br>   array[i] = element;<br>   ++i;<br>}<br><br>len为10:<br>前面的10步骤都是网数组array里放值;,时间复杂度都是O(1);<br> i 为10的时候，进入了if语句内，循环了n次，时间复杂度为O(n),依次把原来数组的值赋给新的数组，新数组的值又赋值给原来数组并且len变成了2n,变成20了！所以数组长度又变长了n，又可以存放数据了！<br>len为20:<br>又是重复上面的步骤。<br><br>规律性的，最好的时间复杂度是O(1), 最差的时间复杂度是O(n),均摊复杂度还是O(1)","like_count":0},{"had_liked":false,"id":159147,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1575547972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575547972","product_id":100017301,"comment_content":"这节感觉难度很大啊，老师写的表达式在高中的求项式中见过。明天还得抽空再看看！","like_count":0},{"had_liked":false,"id":158997,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1575512388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575512388","product_id":100017301,"comment_content":"习题答案：<br>最坏情况O(n)，数组空间不够，需要申请空间并执行循环操作；<br>最好情况O(1)，数组空间够，直接进行添加操作；<br>均摊时间O(1)，前n种都是O(1)，n+1种是O(n)，均摊下来就是O(1)。","like_count":0},{"had_liked":false,"id":158739,"user_name":"芒果色的大毒瘤","can_delete":false,"product_type":"c1","uid":1100978,"ip_address":"","ucode":"99BE7371F923BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/b2/fd356a33.jpg","comment_is_top":false,"comment_ctime":1575444880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575444880","product_id":100017301,"comment_content":"可以用均摊计算平均复杂度，每n次O(1)之后，有一次O(n),均摊后为n+1&#47;n=O(1);<br>每次2倍扩容，每2n次O(1)之后，有一次O(2n),均摊后为2n+1&#47;2n=O(1);<br>假设X次扩容达到最大数K，则平均复杂度为K*O(1),根据时间复杂度计算，去掉系数，平均复杂度为O(1)","like_count":0},{"had_liked":false,"id":158519,"user_name":"爱学习的大叔","can_delete":false,"product_type":"c1","uid":1085152,"ip_address":"","ucode":"91F9ABF1EC98D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","comment_is_top":false,"comment_ctime":1575393278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575393278","product_id":100017301,"comment_content":"刚开始看还是有点吃力,不过多看几遍反而理解了。","like_count":0},{"had_liked":false,"id":157963,"user_name":"sljoai","can_delete":false,"product_type":"c1","uid":1018071,"ip_address":"","ucode":"FF88C4BA265DE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/d7/07f8bc6c.jpg","comment_is_top":false,"comment_ctime":1575290652,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575290652","product_id":100017301,"comment_content":"最好时间复杂度为O(1)，最坏时间复杂度为O(n)，平均时间复杂度为O(n)，均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":157755,"user_name":"laughter","can_delete":false,"product_type":"c1","uid":1123841,"ip_address":"","ucode":"DC57BFCE018D9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/26/01/b2d69332.jpg","comment_is_top":false,"comment_ctime":1575255714,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1575255714","product_id":100017301,"comment_content":"练习题分析：<br>1、最好情况：数组空间够用，只进行一次添加操作。时间复杂度是O（1）；<br>2、最坏情况：数组空间不够用，先扩容，进行n次copy操作，然后进行一次添加操作。时间复杂度是O（n）;<br>3、这种情况满足均摊分析的场景，均摊时间复杂度：<br>     T(n) = O((1+1+...(n个1)... + 1) * (1&#47;(n+1)) + n * (1&#47;(n+1))) = O(1).<br><br>思考：<br>1、无论均摊时间复杂度还是平均时间复杂度，都是为了分析不同情况下，时间复杂度相差量级的算法的时间复杂度。<br>2、针对不同场景，要善用不同复杂度分析方法。","like_count":0},{"had_liked":false,"id":157513,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1181486,"ip_address":"","ucode":"E82C58AF2604ED","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/2e/878d3c92.jpg","comment_is_top":false,"comment_ctime":1575182850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575182850","product_id":100017301,"comment_content":"第一次看这篇文章只看懂了最好和最外的复杂度；隔了一个月，第二次看懂了平均复杂度；隔了两个月，第三次看懂了均摊复杂度。我太难了。。。","like_count":0},{"had_liked":false,"id":157489,"user_name":"对方正在输入...","can_delete":false,"product_type":"c1","uid":1074186,"ip_address":"","ucode":"B010A161A83300","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/0a/26cb0133.jpg","comment_is_top":false,"comment_ctime":1575175418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575175418","product_id":100017301,"comment_content":"代码实现功能:在一个数组中添加元素，在数组空间不够时，将数组扩大2倍大小，并将新元素放入的第一个位置。<br>最好情况:数组未满，不用扩充，不用遍历，则时间复杂度都是O(1)；<br>最坏情况:数组空间已满，扩充2倍大小空间的数组和遍历整个数组进行搬移元素，所以时间复杂度都是O(n);<br>平均情况:一共有n+1种情况，前n种不用遍历和扩容O(1),第n+1种情况O(n+1)，根据加权平均值计算时间复杂度都是O(1)。<br>均摊情况:将O(n)耗时多的操作分摊到接下来的n-1次O(1)添加操作，均摊下来，这一组连续的操作的时间复杂度都是O(1)。","like_count":0},{"had_liked":false,"id":157391,"user_name":"小遥子","can_delete":false,"product_type":"c1","uid":1754666,"ip_address":"","ucode":"E2CCF654F4F9D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c6/2a/e6281f10.jpg","comment_is_top":false,"comment_ctime":1575129563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575129563","product_id":100017301,"comment_content":"最差是O(N),最好是O(1)，均摊是O(1)<br>学完有个疑惑：均摊可以把最大的都均分到时间少的，那分的量是直接用O(N)&#47;N吗？这样一来，那均摊的复杂度不总是O(1)吗？","like_count":0},{"had_liked":false,"id":157298,"user_name":"俗人or诗","can_delete":false,"product_type":"c1","uid":1357122,"ip_address":"","ucode":"C23CCA8B5BE8A8","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/42/21ed2f7b.jpg","comment_is_top":false,"comment_ctime":1575104884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575104884","product_id":100017301,"comment_content":"均摊时间复杂度：<br>1、可以理解为一种特殊的平均时间复杂度分析方法；<br>2、应用场景：针对某个数据结构，针对不同情况，存在连续的操作，而其中有限个高复杂度的操作可以摊分到低复杂度的操作上。","like_count":0},{"had_liked":false,"id":157165,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1575051988,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1575051988","product_id":100017301,"comment_content":"最好的时间复杂度：当 i &lt; len 时，不进入循环，只将元素element放到下标为i的位置，时间复杂度为0(1)。<br>最坏的时间复杂度：当 i &gt;= len 时，进入循环，对数组进行扩容然后依次将旧数组的数据拷贝到新的数组，时间复杂度为0(n)。<br>均摊时间复杂度：add 函数中，大部分情况下时间复杂都都是0(1)，只有在数组需要扩容时，时间复杂度才为0(n)，而且出现的频率非常规律，都是一个0(n)添加后，紧跟着 n - 1 个0(1)的添加。<br>","like_count":0},{"had_liked":false,"id":157164,"user_name":"Jun","can_delete":false,"product_type":"c1","uid":1120678,"ip_address":"","ucode":"0FAB76D99153ED","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/a6/7ae63d7e.jpg","comment_is_top":false,"comment_ctime":1575049619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575049619","product_id":100017301,"comment_content":"面试的时候大多考虑最坏复杂度。最坏复杂度是计算的上限。","like_count":0},{"had_liked":false,"id":157051,"user_name":"seven","can_delete":false,"product_type":"c1","uid":1265405,"ip_address":"","ucode":"573F2959FAEA02","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/YUuHJmCuzBTia5nP5w0Z2sETM4b5biblEacUn5NS3yTp6bkjyqScI4gxicITiaY6pqftNbCGibXwp3HpTPMibQg4lTPw/132","comment_is_top":false,"comment_ctime":1575019094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575019094","product_id":100017301,"comment_content":"add()函数，数组长度len已知，在for循环里面，也可以把时间复杂度看做常量(O(1))吧。","like_count":0},{"had_liked":false,"id":156794,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1574957540,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574957540","product_id":100017301,"comment_content":"时间复杂度分为最好、最坏、平均时间复杂度，还有个均摊时间复杂度。因此需要从四个角度来考虑，这段代码的意思是，给数组中增加一个数，如果数组满了，那么自动扩容一倍，并且将原数据中的数据copy到新数组中，新加的数据追加到新的数组中。按上节课的分析方法，这段代码时间复杂度为T(n)=O(n)<br>最好时间复杂度：不用扩容，直接加入到数组中，T(n)=O(1)；<br>最坏时间复杂度：每次需要扩容，T(n)=O(n)；<br>平均时间复杂度，也叫加权平均时间复杂度:概率为1&#47;(n+1),最后n个相加为 n&#47;(n+1) = 1即o(1)；<br>均摊时间复杂度：假设数组长度为n,每次都正常插入为O(1),但第n+1次为O(n),因此每次正常插入的概率为 1&#47;(n+1) , 最后n个相加为 n&#47;(n+1) = 1即o(1)；","like_count":0,"discussions":[{"author":{"id":1541934,"avatar":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","nickname":"风行者","note":"","ucode":"F058640CF77A35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65110,"discussion_content":"最后两个复杂度算错了，应该是(n+1)*（1/（n+1））=1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574983905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156774,"user_name":"捕风捉影","can_delete":false,"product_type":"c1","uid":1713935,"ip_address":"","ucode":"E7F75B2521C8CF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","comment_is_top":false,"comment_ctime":1574953100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574953100","product_id":100017301,"comment_content":"day02<br>1.对于程序而言，时刻都在变化，你无法预知未来的数据是什么样的，所以我们用最好复杂度和最坏复杂度来区分这种未来不确定的情况，他们又是两个极端，发生的可能性很小。所以我们用平均复杂度来区分代码的性能。<br>2.平均复杂度和均摊复杂度.<br>平均就是总次数除以所有可能的情况，算出每一中情况平均执行次数，即平均复杂度， 总次数计算有时会考虑概率，韵味每一种情况概率不同，即加权平均。<br>均摊是特殊的平均复杂度，当算法呈现某种规律，并且执行次数一多一少，我们可以多的均摊到少的上面，所以算下来，复杂度就是少的。<br><br>疑惑点：<br>1.第一个时间复杂度例子，那里的换算自己算的不太一样。<br>2.均摊复杂度还是一个大致的估算吗，只要一多一少，只要有规律，就可以均摊？这个无法确定对吗？<br><br>","like_count":0},{"had_liked":false,"id":156635,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1574927443,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574927443","product_id":100017301,"comment_content":"最好: O(1)<br>最坏: O(n)<br>平均: O(1)<br>一共有n+1种情况，其中有n种情况的时间复杂度是O(1)，1种情况的时间复杂度是O(n)，每种情况出现的概率都是相同的，因此其平均复杂度的公式为O(1)*n&#47;(n+1)+O(n)*1&#47;(n+1)=2n&#47;(n+1)，简化后为O(1)<br>均摊: O(1)<br>每次经历过O(n)操作之后，都会有n-1次的O(1)操作，因此可以将这次O(n)的时间<br>复杂度分摊给n-1次的操作中，得到的结果则是O(n&#47;(n-1))，简化后为O(1)<br>","like_count":0},{"had_liked":false,"id":156608,"user_name":"灰灰","can_delete":false,"product_type":"c1","uid":1122397,"ip_address":"","ucode":"907A2FD339E158","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/5d/69170b96.jpg","comment_is_top":false,"comment_ctime":1574922192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574922192","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":156497,"user_name":"晨风破晓","can_delete":false,"product_type":"c1","uid":1321464,"ip_address":"","ucode":"F2BC46428A97B5","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/f8/561c5be1.jpg","comment_is_top":false,"comment_ctime":1574903112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574903112","product_id":100017301,"comment_content":"总结：最好情况时间复杂度：最理想情况下代码执行的时间复杂度；最坏情况时间复杂度：最坏情况时执行的时间复杂度；平均时间复杂度：最好最坏情况都执行时加权平均值的时间复杂度。随着输入的不同可能会造成不同的量级，这时才需要分析最好，最坏和平均。均摊时间复杂度是种特殊的平均时间复杂度，大多数情况均摊时间复杂度就是最好情况时间复杂度，具体分析时可凭感觉判断。","like_count":0},{"had_liked":false,"id":156413,"user_name":"Lee Chen","can_delete":false,"product_type":"c1","uid":1220486,"ip_address":"","ucode":"F04F73B6AD656C","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/86/624fd145.jpg","comment_is_top":false,"comment_ctime":1574867766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574867766","product_id":100017301,"comment_content":"课后习题的答案，最好的O(1)，最坏是O(n)，均摊是O(1)。<br><br>个人体会：大多数时候只要预估就可以了，并不需要仔细计算时间复杂度，通常时间复杂度的差异会比较明显。<br><br>但对于少数情况，假设一个算法比另一个效率高10%，即使属于同一个量级，但在工程上还是有意义的，如果需要频繁操作的话，实际还是会节省成本。","like_count":0},{"had_liked":false,"id":156325,"user_name":"毛启圣","can_delete":false,"product_type":"c1","uid":1330056,"ip_address":"","ucode":"233DA95ED28C11","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","comment_is_top":false,"comment_ctime":1574856673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574856673","product_id":100017301,"comment_content":" i 即 n<br> <br> 最好O(1)<br> <br> 最坏O(1)<br> <br> 均摊:最大的一次n 平均到 10次中为n&#47;10 =&gt; O(n)<br> <br> 平均复杂度: 1&#47;10 *9 + 1&#47;10 *n =&gt; O(n)","like_count":0},{"had_liked":false,"id":156115,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1574820870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574820870","product_id":100017301,"comment_content":"思考题的时间复杂度：<br>最好情况时间复杂度为O(1),<br>最坏情况时间复杂度为O(n),<br>均摊时间复杂度为 O(1)。<br><br>均摊时间复杂度，其实就是 平均时间情况复杂度 的特殊情况而已。莫纠结","like_count":0},{"had_liked":false,"id":155991,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1574802778,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1574802778","product_id":100017301,"comment_content":"思维导图： https:&#47;&#47;mubu.com&#47;doc&#47;k8lMFx9V80<br><br>思考题：<br>1. 最好时间复杂度：O(1)<br>2. 最差时间复杂度：O(n)<br>3. 平均时间复杂度：O(n)<br>4. 均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":155981,"user_name":"sulatwx","can_delete":false,"product_type":"c1","uid":1348141,"ip_address":"","ucode":"366237F13DE8A7","user_header":"","comment_is_top":false,"comment_ctime":1574787132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574787132","product_id":100017301,"comment_content":"04.复杂度分析（下）思考题：<br>考虑数组长度大于初始值len的情况，假设当前数组长度为LEN，i的值从LEN&#47;2到LEN，概率相同，为2&#47;LEN，则执行总次数为：<br>LEN&#47;2×(2&#47;LEN)+LEN×(2&#47;LEN)=3，因此复杂度为O(1)","like_count":0},{"had_liked":false,"id":155968,"user_name":"杠杠饽饽","can_delete":false,"product_type":"c1","uid":1257349,"ip_address":"","ucode":"32B191C30CDC63","user_header":"","comment_is_top":false,"comment_ctime":1574785438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574785438","product_id":100017301,"comment_content":"Best-case time complexity: O(1)<br>Worst-case time complexity: O(n)<br>Average time complexity: O(1)<br>Amortized time complexity: O(1)<br><br>例子非常像Java 里面 dynamic array的实现方法。 先分配一定空间， 空间满了，再非配一个2倍长度的数组， 以此类推。 <br>","like_count":0},{"had_liked":false,"id":155932,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1574779983,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1574779983","product_id":100017301,"comment_content":"看到留言的数目，670+，吓了一跳，程序员对于算法的热爱。<br><br>讲到这里，似乎已经是硕士研究生难度的复杂度分析了。<br><br>add() 函数，最好情况时间复杂度应该是 O(1)，最坏情况时间复杂度应该是 O(n)。<br><br>按照摊还分析的思路，现实插入 10 个元素 O(1)，插入第 11 个的时候，扩充数组，并移动前面 10 个预算到新数组，然后把新数组赋值给就数组，将第 11 个元素插入，然后可以连续插入 10 个，扩充，然后插入 20 个。<br><br>平均情况时间复杂度是 O(1)。<br><br>想把这道题讲明白，还真是挺不容易的。<br><br>我可能也需要看一遍《算法图解》和《大话数据结构》。","like_count":0},{"had_liked":false,"id":155895,"user_name":"Qfxl","can_delete":false,"product_type":"c1","uid":1042753,"ip_address":"","ucode":"4554F28BB10F21","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/p6kkT7nsViayxazIrxx7p0pklPRvet933nEGBupj1phL2zArLStC3MnHFFyBYZ9fDGbPWJxS6WOICkxCCLia7nhw/132","comment_is_top":false,"comment_ctime":1574775777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574775777","product_id":100017301,"comment_content":"O(NlogN)的算法在实践上不一定比O(n^2)算法更优，有很多因素需要考虑，例如能否有效利用寄存器,缓存,和数据结构内存栈的开销等，可参考快排在n小的时候用替换成插入排序更优。还有就是代码的可读性也很重要，一个能用数组解决的小规模需求用斐波拉契堆就是杀鸡用牛刀且不好维护拓展。运行时的分析和算法复杂度分析相辅相成，缺一不可。","like_count":0},{"had_liked":false,"id":155811,"user_name":"Geek_994e46","can_delete":false,"product_type":"c1","uid":1712153,"ip_address":"","ucode":"A8BCDEF1A0939B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PprqpDpQqbJAwMSwoBzoUichqFUqhPjqNv5ogFCvIjXlpKFmPJtpdCmxrZLAic6j5kE8Nu1lp8s1IibH48EdJoicrQ/132","comment_is_top":false,"comment_ctime":1574760006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574760006","product_id":100017301,"comment_content":"还是不太懂如何计算均摊时间复杂度？是可以直接等于最好时间复杂度吗","like_count":0},{"had_liked":false,"id":155807,"user_name":"航","can_delete":false,"product_type":"c1","uid":1734699,"ip_address":"","ucode":"3117F4F78172EE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/78/2b/2b08de1b.jpg","comment_is_top":false,"comment_ctime":1574759485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574759485","product_id":100017301,"comment_content":"add答题<br>最好：直接存入数值 O(1)<br>最坏：循环  2的等比数列*n    O(n)<br>len = 2的等比数列*n<br>平均：情况一直接可以插入，情况二需要循环len次后插入，<br>可以直接插入的范围都会落在0~len-1或者len~2len-1上，<br>每种事件发生概率均相同，事件共len+1种，p=len+1<br>1*p+1*p+。。。+1*p+len*p = O(1)","like_count":0},{"had_liked":false,"id":155770,"user_name":"NaN🎃","can_delete":false,"product_type":"c1","uid":1703832,"ip_address":"","ucode":"69D6A99871A6FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/ff/98/a9a68fc6.jpg","comment_is_top":false,"comment_ctime":1574753288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574753288","product_id":100017301,"comment_content":"哪位大哥能告诉我，1+2+3...n+n为什么是n+n？","like_count":0},{"had_liked":false,"id":155757,"user_name":"big智慧","can_delete":false,"product_type":"c1","uid":1202616,"ip_address":"","ucode":"272C32E19EAE1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/b8/2a4624c3.jpg","comment_is_top":false,"comment_ctime":1574749882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574749882","product_id":100017301,"comment_content":"打卡Day2：<br>* 日期：2019年11月26日<br><br>* 是什么：<br>    * 时间复杂度的其他几个维度：最好情况、最坏情况、平均或者分摊后的情况<br><br>* 为什么：<br>    * 最好、最坏、平均和均摊复杂度：可以从4个维度分析算法，同样是时间复杂度O(n)的代码，可以从这4个维度再做一次筛选 <br><br>* 怎么做：<br>    * 最好、最坏：执行效率最好、最坏情况下的复杂度<br>    * 平均：加权平均各种出现情况，然后算复杂度<br>    * 均摊：分析各种情况出现的概率，把次数较少的高复杂度O(n)情况分摊到其他低复杂度O(1)的情况<br><br>* 与项目管理怎么结合<br>    * 任务持续时间的三点估算法： 预估最好情况下要消耗的时间to，最差情况下要消耗的时间tp，最可能要消耗的时间tm，持续时长一般选TE = (to+4tm+tp)&#47;6  ，和预估任务持续时间类似，算法选择的时候也要参考最好、最坏、平均或均摊复杂度<br><br>对应项目管理的关键点：数据会“骗人”，从多个维度的分析数据可以帮助得出更合理的结论","like_count":0},{"had_liked":false,"id":155654,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1574733161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574733161","product_id":100017301,"comment_content":"练习题复杂度分析：大部分的时候元素是不满的这时候是O(1)，当元素满了是O(n)，所以最好是O(1)，最差是O(n)，平均是O(1)，将最差均摊，所以均摊是O(1)。","like_count":0},{"had_liked":false,"id":155633,"user_name":"莫问流年","can_delete":false,"product_type":"c1","uid":1249663,"ip_address":"","ucode":"23140E031AED4B","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/7f/80d56c1c.jpg","comment_is_top":false,"comment_ctime":1574730911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574730911","product_id":100017301,"comment_content":"大部分情况下的时间复杂度为O(1)，特殊情况下时间复杂度O(n)，且符合n次O(1)与1次O(n)构成一个循环周期的特点，适合采用摊还分析发。根据摊还分析法，将O(n)的操作均摊到n次O(1)的操作上，最终得到的均摊时间复杂度为O(1)，也等于最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":155614,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1574728991,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1574728991","product_id":100017301,"comment_content":"打卡复习<br>","like_count":0},{"had_liked":false,"id":155609,"user_name":"Ethan","can_delete":false,"product_type":"c1","uid":1246139,"ip_address":"","ucode":"ED197A378EE91B","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/bb/c5f139cc.jpg","comment_is_top":false,"comment_ctime":1574728573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574728573","product_id":100017301,"comment_content":"最坏时间复杂度\r<br>最坏的情况下代码需要执行的次数。\r<br>最好时间复杂度\r<br>最好的情况下代码需要执行的次数。\r<br>平均时间复杂度\r<br>所有情况代码需要执行的次数与其对应的概率乘积的和。\r<br>均摊时间复杂度\r<br>对于固定n次O(1)时间复杂度的操作，伴随着一次O(n)时间复杂度的操作，类似这种复杂度的计算可以将这一次O(n)的复杂度均分到接下来n次时间复杂度O(1)的操作中，这样均摊的时间复杂度就是O(1)。\r<br>思考题：\r<br>最好时间复杂度是O(1),最坏时间复杂度是O(n)，均摊时间复杂度为O(1)，和老师均摊复杂度分析中的例子分析逻辑相似。\r<br>","like_count":0},{"had_liked":false,"id":155589,"user_name":"刘丶小备","can_delete":false,"product_type":"c1","uid":1102106,"ip_address":"","ucode":"F4D5EF592B7030","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/1a/3564c9da.jpg","comment_is_top":false,"comment_ctime":1574723362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574723362","product_id":100017301,"comment_content":"最好情况时间复杂度：O(1)，最坏情况时间复杂度：O(n)，平均情况时间复杂度和均摊时间复杂度都是O(1)","like_count":0},{"had_liked":false,"id":155538,"user_name":"草裡菌","can_delete":false,"product_type":"c1","uid":1241514,"ip_address":"","ucode":"E11C630ABA4370","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/aa/c29def94.jpg","comment_is_top":false,"comment_ctime":1574696208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574696208","product_id":100017301,"comment_content":"思考题：1.最好情况在绝大多数时候发生，时间复杂度为O(1)；2.最坏情况在数组扩容+迁移数据时发生，时间复杂度为O(n)；3.这种好坏case发生的概率模式适合用均摊时间复杂度描述。随着执行次数的增加，均摊到每次执行的时间复杂度仍为常量阶，即O(1)。","like_count":0},{"had_liked":false,"id":155507,"user_name":"克","can_delete":false,"product_type":"c1","uid":1069206,"ip_address":"","ucode":"6DDFBB05E0F4E9","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/96/18612c89.jpg","comment_is_top":false,"comment_ctime":1574693758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574693758","product_id":100017301,"comment_content":"练习题 最好 O(1)，最差 O(n), 均摊 O(1) 不涉及平均情况时间复杂度","like_count":0},{"had_liked":false,"id":155484,"user_name":"克","can_delete":false,"product_type":"c1","uid":1069206,"ip_address":"","ucode":"6DDFBB05E0F4E9","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/96/18612c89.jpg","comment_is_top":false,"comment_ctime":1574692184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574692184","product_id":100017301,"comment_content":"我理解考虑均摊时间复杂度，是需要在明显能够确认同一代码两个时间复杂度量级的出现比率的情况下有意义的，因此不是概率，也就不需要概率计算。","like_count":0},{"had_liked":false,"id":155449,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1143372,"ip_address":"","ucode":"335960F683C23C","user_header":"https://static001.geekbang.org/account/avatar/00/11/72/4c/4d636a23.jpg","comment_is_top":false,"comment_ctime":1574690148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574690148","product_id":100017301,"comment_content":"find的平均复杂度计算不太明白：为什么是1+2+3+...+n+n=(1+n)*(1+n)，怎么得出n*(n+3)&#47;2的？<br>课后思考：<br>add函数的复杂度，我怎么看都是o(1)，即使每次调用add函数，每次进去i=0，length=10，永远都是0&lt;10，if语句不是永远都不能执行啊？是我理解有误还是代码写得有问题？","like_count":0},{"had_liked":false,"id":155422,"user_name":"永光","can_delete":false,"product_type":"c1","uid":1102702,"ip_address":"","ucode":"0C54531ABED1B0","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/6e/281b85aa.jpg","comment_is_top":false,"comment_ctime":1574687716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574687716","product_id":100017301,"comment_content":"最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。之所以引入这几个复杂度概念，是因为，同一段代码，在不同输入的情况下，复杂度量级有可能是不一样的。","like_count":0},{"had_liked":false,"id":155415,"user_name":"刘其润","can_delete":false,"product_type":"c1","uid":1389459,"ip_address":"","ucode":"613641C3C18BCE","user_header":"https://static001.geekbang.org/account/avatar/00/15/33/93/3f221bb8.jpg","comment_is_top":false,"comment_ctime":1574686852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574686852","product_id":100017301,"comment_content":"说一下个人的看法：我觉得均摊复杂度的那个例子有点不合适，看了半天才看明白老师想说什么意思，说的不够清晰，容易误导，我觉得这个例子就清晰很多：https:&#47;&#47;blog.csdn.net&#47;weixin_38483589&#47;article&#47;details&#47;84262167","like_count":0},{"had_liked":false,"id":155395,"user_name":"李湘河","can_delete":false,"product_type":"c1","uid":1349528,"ip_address":"","ucode":"DB078B5DAAE82E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoViaN0hP07cXOl7vOIvHPu7DZ3wxHBz4iaLVEqG1TFfiagm1wUaiczbCyicwib7oDWw0vD4cXg9eZ0Okqg/132","comment_is_top":false,"comment_ctime":1574684944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574684944","product_id":100017301,"comment_content":"跟最后的均摊时间复杂度分析一样，最好O(1)，最差O(n)，均摊是O(1)","like_count":0},{"had_liked":false,"id":155183,"user_name":"testerman","can_delete":false,"product_type":"c1","uid":1473556,"ip_address":"","ucode":"8DDC62262FA5DE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoDbVIx6bXBFTCDtBUPXzIJzEiaSCfjP7wRA95dGIAGJRnOCutFcIRFkEaUqrEF2fE0HJ1WaFsKn8w/132","comment_is_top":false,"comment_ctime":1574657713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574657713","product_id":100017301,"comment_content":"评定算法优劣时，以哪种方法为主呢，还是需要结合数据的分布趋势而定？","like_count":0},{"had_liked":false,"id":155083,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1574644162,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574644162","product_id":100017301,"comment_content":"（1）概念：<br>\t\t1，最坏情况时间复杂度：代码在最理想情况下的时间复杂度。<br>\t\t2，最好情况时间复杂度：代码在复杂下执行的时间复杂度。<br>\t\t3，平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示<br>\t\t4，均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。<br>\t（2）原因：<br>\t\t1，为了表示代码在不同情况下的不同时间复杂度，需要使用到：最好情况时间复杂度，最坏情况时间复杂度和平均情况时间复杂度。<br><br>\t\t2，但最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率不大。为了更好地表示平均情况下的复杂度，我们需要引入另一个概念：平均情况时间复杂度。<br>","like_count":0},{"had_liked":false,"id":154861,"user_name":"大海","can_delete":false,"product_type":"c1","uid":1001446,"ip_address":"","ucode":"20913D0265971B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/e6/67b0b711.jpg","comment_is_top":false,"comment_ctime":1574582903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574582903","product_id":100017301,"comment_content":"练习题：<br>最好是 O(1)<br>最坏是O(N)<br>均摊是O(1)","like_count":0},{"had_liked":false,"id":154666,"user_name":"菽绣","can_delete":false,"product_type":"c1","uid":1755477,"ip_address":"","ucode":"60955E14C39C6B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c9/55/0e627a31.jpg","comment_is_top":false,"comment_ctime":1574504518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574504518","product_id":100017301,"comment_content":"均摊分析是一种只适用于特定场景的简便的求解平均时间复杂度的方法","like_count":0},{"had_liked":false,"id":154536,"user_name":"NEVER SETTLE","can_delete":false,"product_type":"c1","uid":1101894,"ip_address":"","ucode":"9C86BDAFDBF768","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","comment_is_top":false,"comment_ctime":1574476101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574476101","product_id":100017301,"comment_content":"学习总结：<br>为了表示代码在不同情况下的不同时间复杂度，需要引入三个概念：最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度。<br><br>1、最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。<br><br>2、最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。<br><br>3、平均情况时间复杂度<br>最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率其实并不大。为了更好地表示平均情况下的复杂度，需要引入另一个概念：平均情况时间复杂度，简称为平均时间复杂度。<br><br>4、均摊时间复杂度<br>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系。<br>这个时候，就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。<br>而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":154535,"user_name":"NEVER SETTLE","can_delete":false,"product_type":"c1","uid":1101894,"ip_address":"","ucode":"9C86BDAFDBF768","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","comment_is_top":false,"comment_ctime":1574476020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574476020","product_id":100017301,"comment_content":"思考题：<br>最理想的情况下，数组中有空闲空间，只需要将数据插入到数组下标为 i 的位置就可以了，所以最好情况时间复杂度为 O(1)。<br><br>最坏的情况下，数组中没有空闲空间，需要先从新申请一个2倍大小的数组空间，然后再把原来数组中的数据依次copy到新数组中，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。<br><br>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1&#47;(n+1)。所以，根据加权平均的计算方法，求得的平均时间复杂度就是：1*(1&#47;n+1) + 1*(1&#47;n+1) + ... + n*(1&#47;n+1)  = O(1)<br><br>使用摊还分析法来分析算法的均摊时间复杂度：<br>每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。","like_count":0},{"had_liked":false,"id":154417,"user_name":"Rickieslove","can_delete":false,"product_type":"c1","uid":1751095,"ip_address":"","ucode":"47A1A53F2E1FAE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/37/d22456d5.jpg","comment_is_top":false,"comment_ctime":1574425336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574425336","product_id":100017301,"comment_content":"可否这样来理解：代码中存在有关n的循环，循环块中又存在退出循环的条件，导致我们不能笼统的给出这段代码的复杂度，从而引入了最好&#47;坏&#47;平均时间复杂度；但当退出条件在一次循环时极易发生时（就像前n-1次一定发生，最后一次一定不发生，好比数组扩容），就有必要再次将问题细分，引入均摊复杂度，前n-1次都是O(1),第n次O(n)均摊一下抽象的表示为n次O(2)?同样时常数级，所以是O(1)...","like_count":0},{"had_liked":false,"id":153464,"user_name":"Eben","can_delete":false,"product_type":"c1","uid":1352280,"ip_address":"","ucode":"835124A88027F2","user_header":"https://static001.geekbang.org/account/avatar/00/14/a2/58/e9147e17.jpg","comment_is_top":false,"comment_ctime":1574239315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574239315","product_id":100017301,"comment_content":"单独说一下均摊时间复杂度，第一眼感觉就应该是O(1)，通过计算之后得出的结果也是O(1).<br>计算过程：假设函数被调用n次，这n次调用发生扩容的次数为x，那么就有10·2^x = n, x = log(n&#47;10)(2为底)，每次扩容需要的操作数实际为等比数列10·2^x，对这个等比数列求和为20·(2^x-1)，将x带入就得到O(n)(不方便写公式用O代替)，均摊到n次调用操作得出均摊时间复杂度O(1)","like_count":0},{"had_liked":false,"id":153420,"user_name":"YsnowLove","can_delete":false,"product_type":"c1","uid":1439301,"ip_address":"","ucode":"70433D98592481","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rMgAbbKiasa1qR35ht0GEfwsHXbusPZAe9JFgicDgVRy8vQET2hypuDgwtHoPVU23RUoMdK7qA7gibMlTExpYibtbw/132","comment_is_top":false,"comment_ctime":1574233531,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574233531","product_id":100017301,"comment_content":"看了几遍，可以分析练习题的复杂度。但是对于数组清空的问题，里面存的是基本类型，这样做可以的。但是如果数组中存储的是对象，这种清空会有问题。参考effctive java 第七条 消除过期的对象引用。","like_count":0},{"had_liked":false,"id":153378,"user_name":"。。。","can_delete":false,"product_type":"c1","uid":1749279,"ip_address":"","ucode":"05FDC1B2A2F2B2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b1/1f/351ac356.jpg","comment_is_top":false,"comment_ctime":1574226705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574226705","product_id":100017301,"comment_content":"最好情况是O(1) 最坏情况是O(n)，均摊的话我简单理解就是大概率情况O(1)，极少数情况是O(n) 那么均摊就是O(1) , 反之大概率情况是O(n)极少数情况是O(1) 那么均摊就是O(n)  ","like_count":0},{"had_liked":false,"id":153019,"user_name":"布朗老熊","can_delete":false,"product_type":"c1","uid":1476675,"ip_address":"","ucode":"A8AF82550AFF9C","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/43/31641bf0.jpg","comment_is_top":false,"comment_ctime":1574141429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574141429","product_id":100017301,"comment_content":"1，最好，最坏情况复杂度<br>2，平均情况时间复杂度是，加权平均时间复杂度<br>3，均摊时间复杂度，摊还分析。均摊时间复杂度就是一种特殊的平均时间复杂度。<br>4，最好O(1), 最坏O(n), 均摊O(1)","like_count":0},{"had_liked":false,"id":152972,"user_name":"hao-kuai","can_delete":false,"product_type":"c1","uid":1272354,"ip_address":"","ucode":"DFDFDDDBA4503C","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/22/527904b2.jpg","comment_is_top":false,"comment_ctime":1574131538,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574131538","product_id":100017301,"comment_content":"最好：O(1) 最坏O(n) 平均（n） 均摊O（1）<br>-----<br>最好时间复杂度：最理想的情况下执行这段代码的时间复杂度。<br><br>最坏时间复杂度：最糟糕的情况下执行这段代码的时间复杂度。<br><br>平均时间复杂度：每种情况都有自己发生的概率，平均概率值也叫加权平均值、期望值，所以平均时间复杂度全称是加权（期望）平均时间复杂度。<br><br>均摊时间复杂度：均摊时间复杂度是一种特殊的平均时间复杂度。<br><br>特点<br><br>对一个数据结构进行一组连续操作时，大部分情况下时间复杂度比较低，个别情况下比较高，这些操作存在前后连续的时序关系。这此时，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":152904,"user_name":"sunshine","can_delete":false,"product_type":"c1","uid":1013060,"ip_address":"","ucode":"9E6E85BF71588E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/44/71005991.jpg","comment_is_top":false,"comment_ctime":1574122135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574122135","product_id":100017301,"comment_content":"计算公式都忘记了，可咋整","like_count":0},{"had_liked":false,"id":152814,"user_name":"所以然","can_delete":false,"product_type":"c1","uid":1719978,"ip_address":"","ucode":"57BE96CE3AD939","user_header":"https://static001.geekbang.org/account/avatar/00/1a/3e/aa/8c7125c1.jpg","comment_is_top":false,"comment_ctime":1574082987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574082987","product_id":100017301,"comment_content":"最好是O(1)、最坏是O(n),满足使用摊还分析法的情况：均摊时间复杂度为O(1)。","like_count":0},{"had_liked":false,"id":152347,"user_name":"暝","can_delete":false,"product_type":"c1","uid":1608600,"ip_address":"","ucode":"20AE1FDFE6DD91","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/98/ddbdea57.jpg","comment_is_top":false,"comment_ctime":1573980338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573980338","product_id":100017301,"comment_content":"复杂度叠加计算，就是多项式计算。","like_count":0},{"had_liked":false,"id":151456,"user_name":"Blmyun","can_delete":false,"product_type":"c1","uid":1744376,"ip_address":"","ucode":"E9C4B814E93F28","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/f8/bb4ab0d9.jpg","comment_is_top":false,"comment_ctime":1573723068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573723068","product_id":100017301,"comment_content":"老师，我算了一天都算不出（3n+1）&#47;4,求解答一下.","like_count":0},{"had_liked":false,"id":151306,"user_name":"吕飞祥","can_delete":false,"product_type":"c1","uid":1329418,"ip_address":"","ucode":"F1BED467768E96","user_header":"https://static001.geekbang.org/account/avatar/00/14/49/0a/778f6738.jpg","comment_is_top":false,"comment_ctime":1573697943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573697943","product_id":100017301,"comment_content":"老师，均摊的第一段代码有问题吧，满了的条件是count=length -1吧","like_count":0},{"had_liked":false,"id":151168,"user_name":"Ronnyz","can_delete":false,"product_type":"c1","uid":1488280,"ip_address":"","ucode":"9F34527B1D343D","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/98/ffaf2aca.jpg","comment_is_top":false,"comment_ctime":1573660039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573660039","product_id":100017301,"comment_content":"最好情况复杂度O(1)<br>最差情况复杂度O(n)<br>均摊时间复杂度O(1)<br>","like_count":0},{"had_liked":false,"id":151134,"user_name":"Wisdomore","can_delete":false,"product_type":"c1","uid":1496344,"ip_address":"","ucode":"AAA5BC813C898E","user_header":"https://static001.geekbang.org/account/avatar/00/16/d5/18/921e8c21.jpg","comment_is_top":false,"comment_ctime":1573656774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573656774","product_id":100017301,"comment_content":"第一段代码里，应该是if(array[i] == x &amp;&amp; pos &lt; 0) pos = i;<br>否则，pos返回的是array.length - 1","like_count":0},{"had_liked":false,"id":151099,"user_name":"Crush","can_delete":false,"product_type":"c1","uid":1733203,"ip_address":"","ucode":"E96BD09A575595","user_header":"https://static001.geekbang.org/account/avatar/00/1a/72/53/2981800f.jpg","comment_is_top":false,"comment_ctime":1573653515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573653515","product_id":100017301,"comment_content":"大佬啊~有个没看明白啊。2n&#47;(n+1)怎么就O(1)了啊，不会是在这分母直接去系数，分子直接去常量出来的吧","like_count":0},{"had_liked":false,"id":150765,"user_name":"eviltion","can_delete":false,"product_type":"c1","uid":1515445,"ip_address":"","ucode":"022DE8510B825E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mWicFKgbjL299CQPEhoFdSAphVb4UpibkhF8loRxryBRt3H7ZGkibibhaKANTxvSiatic4PLCy2MsbEMH1hc76YefPUw/132","comment_is_top":false,"comment_ctime":1573608347,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573608347","product_id":100017301,"comment_content":"1， add方法的时间复杂度分析，程序第一次执行时，执行多次O（1）， 执行一次O（n），也就是大部分时间复杂度是O（1） 的，所以这个复杂度的均摊复杂度是O（1）。<br>","like_count":0},{"had_liked":false,"id":150486,"user_name":"攻城狮Ra","can_delete":false,"product_type":"c1","uid":1681051,"ip_address":"","ucode":"4D6F97A6481166","user_header":"https://static001.geekbang.org/account/avatar/00/19/a6/9b/20b9fce3.jpg","comment_is_top":false,"comment_ctime":1573544274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573544274","product_id":100017301,"comment_content":"最好是O(1)，最坏是O(n)，平均时间复杂度是O(1)<br><br><br>马上找到这个值就是O(1)，执行到n的时候就是O(n)的时间复杂度；在O(1)~O(n)之间的平均复杂度由于O(1)出现次数&gt;O(n)所以是O(1)的均摊时间复杂度","like_count":0},{"had_liked":false,"id":150409,"user_name":"seven","can_delete":false,"product_type":"c1","uid":1180307,"ip_address":"","ucode":"55CE5F60051F89","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/93/44672231.jpg","comment_is_top":false,"comment_ctime":1573529550,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573529550","product_id":100017301,"comment_content":"最好O(1),最坏O(n),均摊O(1),老师讲的好，最大的收货是看了2遍均摊的计算方法，看懂了","like_count":0},{"had_liked":false,"id":150408,"user_name":"小七","can_delete":false,"product_type":"c1","uid":1740063,"ip_address":"","ucode":"B7F4F8BD7BCB75","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8d/1f/383fbb5f.jpg","comment_is_top":false,"comment_ctime":1573529535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573529535","product_id":100017301,"comment_content":"当count == array.length的时候，好像数组下标越界？","like_count":0},{"had_liked":false,"id":150392,"user_name":"朱润杰","can_delete":false,"product_type":"c1","uid":1738957,"ip_address":"","ucode":"6436C3D58D0FC3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/88/cd/7ee7e9db.jpg","comment_is_top":false,"comment_ctime":1573526462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573526462","product_id":100017301,"comment_content":"最好是O（1）,最坏是O（n），因为len不是一个常量，平均还是O（1）","like_count":0},{"had_liked":false,"id":149287,"user_name":"星期五","can_delete":false,"product_type":"c1","uid":1676658,"ip_address":"","ucode":"A66B9E7113FB51","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/72/ce90c1c7.jpg","comment_is_top":false,"comment_ctime":1573183242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573183242","product_id":100017301,"comment_content":"平均复杂度的例子没看懂啊","like_count":0},{"had_liked":false,"id":148698,"user_name":"梨子苹果","can_delete":false,"product_type":"c1","uid":1716067,"ip_address":"","ucode":"3666813FEE31D3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","comment_is_top":false,"comment_ctime":1573050978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573050978","product_id":100017301,"comment_content":"首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()第一个区别于 find() 的地方。<br><br>有问题","like_count":0},{"had_liked":false,"id":148505,"user_name":"lanlianhua","can_delete":false,"product_type":"c1","uid":1019966,"ip_address":"","ucode":"CA07125AB5D7AF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/3e/97676631.jpg","comment_is_top":false,"comment_ctime":1573020563,"is_pvip":true,"replies":[{"id":"57639","content":"你分析的有点不对呢，这里的len就可以直接理解成n。你看下留言区里其他小伙伴们的分析吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573425117,"ip_address":"","comment_id":148505,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573020563","product_id":100017301,"comment_content":"王老师，有个问题不太明白，最坏情况分析： <br>最坏情况代码执行的次数跟每次数组的长度有关<br>第1次调用add()的执行的次数为 len ,<br>第2次调用add()的执行的次数为 2*len ,<br>第3次调用add()的执行的次数为 2^2 *len<br>第n次调用add()的执行的次数为 2^(n-1) * len<br>因为len是系数，可以去掉，所以最坏时间复杂度不应该是 O(2^n)么？<br>2. 平均&#47;均摊情况分析<br>当每次遇到最坏情况时数组会进行2倍扩容，原数组被导入新数组，虽然数组的长度变大了，但是插入操作落在的区间的长度是一样的，分别是0~len-1, len；<br>插入的情况仍是len+1种：0~len-1个O(1)和插满之后的len次循环；所以每次插入的概率是：p= 1&#47;len+1，<br>最后求出加权平均时间复杂度为 1*p + 1*p+ ▪▪▪ + 1*p + len * p = 2len*p=2len&#47;(len+1)=O(1) ; ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473514,"discussion_content":"你分析的有点不对呢，这里的len就可以直接理解成n。你看下留言区里其他小伙伴们的分析吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573425117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148126,"user_name":"罗浩","can_delete":false,"product_type":"c1","uid":1691503,"ip_address":"","ucode":"02FF0A6785EC2C","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/6f/a73fd9d7.jpg","comment_is_top":false,"comment_ctime":1572944552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572944552","product_id":100017301,"comment_content":"关于匹配第 n 个元素的平均复杂度，梳理了下：<br><br>已知情况总数是 n+1，其中需要遍历的个数可能为<br>1（一次就命中）<br>2（查了两次才命中）<br>...<br>n （查了 n 次，命中了，也就是说这个值是最后一个元素）<br>n （查了 n 次没有命中）<br><br>每种情况的概率都是一样的，都是 1&#47;(n+1)，所以总的概率和为<br>(1+2+3+ ... + n + n)&#47;(n+1) = <br>n(n+1)&#47;2 + n&#47;(n+1) = <br>n(n+3)&#47;2(n+1)","like_count":0},{"had_liked":false,"id":147766,"user_name":"JAMES","can_delete":false,"product_type":"c1","uid":1170796,"ip_address":"","ucode":"63015120144DDB","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/6c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1572884601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572884601","product_id":100017301,"comment_content":"2019&#47;11&#47;05 JAMES 打卡","like_count":0},{"had_liked":false,"id":145974,"user_name":"Monica","can_delete":false,"product_type":"c1","uid":1686257,"ip_address":"","ucode":"B09BC6EEBD81BD","user_header":"https://static001.geekbang.org/account/avatar/00/19/ba/f1/b01034e3.jpg","comment_is_top":false,"comment_ctime":1572410190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572410190","product_id":100017301,"comment_content":"文中，每一次 O(n) 的插入操作，都会跟着 n次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n次耗时少的操作上，每个n&#47;n=1, 均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)=O(n*1&#47;n*(1+1))=O(2)=O(1)。课后思考题和文中均摊部分例子相似，所以最坏为O(len)，最好为O(1)，均摊为O(1)，平均也为O(1)。","like_count":0},{"had_liked":false,"id":145851,"user_name":"houjunying","can_delete":false,"product_type":"c1","uid":1719748,"ip_address":"","ucode":"210ECDD0D6052B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/3d/c4/a8a3588c.jpg","comment_is_top":false,"comment_ctime":1572395332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572395332","product_id":100017301,"comment_content":"练习题中如果i&gt;2*len怎么办？","like_count":0},{"had_liked":false,"id":145739,"user_name":"着迷","can_delete":false,"product_type":"c1","uid":1716801,"ip_address":"","ucode":"429F1D4015A195","user_header":"https://static001.geekbang.org/account/avatar/00/1a/32/41/c1a7840b.jpg","comment_is_top":false,"comment_ctime":1572357724,"is_pvip":false,"replies":[{"id":"56456","content":"😂 ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572487384,"ip_address":"","comment_id":145739,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572357724","product_id":100017301,"comment_content":"老师建议第二个例子把等差数列的求和公式提一下，不然新手学起来比较费劲，我看了好久才想起来这个公式😂","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472554,"discussion_content":"😂 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572487384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145100,"user_name":"Mr.Fu","can_delete":false,"product_type":"c1","uid":1613254,"ip_address":"","ucode":"F1E4304C5CDE52","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/c6/a72db706.jpg","comment_is_top":false,"comment_ctime":1572190260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572190260","product_id":100017301,"comment_content":"一.Why-同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，更准确的描述代码的时间复杂度，所以引入最好、最坏、平均、均摊时间复杂度这四个个概念。<br><br>&#47;&#47; n表示数组array的长度<br>int find(int[] array, int n, int x) {<br>  int i = 0;<br>  int pos = -1;<br>  for (; i &lt; n; ++i) {<br>    if (array[i] == x) {<br>       pos = i;<br>       break;<br>    }<br>  }<br>  return pos;<br>}<br><br>二.WhatAndHow<br>最好情况时间复杂度：在最理想的情况下，执行代码的时间复杂度；如以上代码，在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，只遍历一个元素。<br>最坏情况时间复杂度：在最糟糕的情况下，执行代码的时间复杂度；如以上代码，如果数组中没有要查找的变量 x，我们需要把整个数组都遍历一遍。<br>平均情况时间复杂度(加权平均时间复杂度)：用代码在所有情况下执行的次数的加权平均值表示；以上代码，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1&#47;2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1&#47;n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1&#47;(2n)；进一步1*(1&#47;2n)+2*(1&#47;2n)+3*(1&#47;2n)+....+n*(1&#47;2n)+n*&#47;2=(3n+1)&#47;4，去掉系数和常量是O(n)<br>均摊时间复杂度：一种特殊的平均时间复杂度；使用摊还分析法；<br>代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；<br>低级别和高级别复杂度出现具有时序规律<br>均摊结果一般都等于最好情况时间复杂度<br>在大多数情况下，并不需要区分最好、最坏、平均情况时间复杂度三种情况。很多时候，使用一个复杂度就可以满足需求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距，才会使用这三种复杂度表示法来区分，而均摊时间复杂度应用的场景比它更加特殊、更加有限。","like_count":0},{"had_liked":false,"id":144895,"user_name":"yin","can_delete":false,"product_type":"c1","uid":1711450,"ip_address":"","ucode":"9F3D55A1D435A2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1d/5a/937f0d4c.jpg","comment_is_top":false,"comment_ctime":1572083266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572083266","product_id":100017301,"comment_content":"看留言，百家争鸣，条条大路通罗马<br>首先，思考题ArrayList源码，倍感亲切。<br>解题思路：<br>这是一个扩容的循环过程。<br>所以计算就以n-2n的周期计算。<br>插入n次O(n),扩容遍历一次O(2n)<br>求和平均 O((n+2n)&#47;n)<br>结果O(1)<br>\t----我思，顾我在","like_count":0},{"had_liked":false,"id":144706,"user_name":"蓝夜星辉","can_delete":false,"product_type":"c1","uid":1687442,"ip_address":"","ucode":"444633E371C3F6","user_header":"https://static001.geekbang.org/account/avatar/00/19/bf/92/d3e9eba5.jpg","comment_is_top":false,"comment_ctime":1572002353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572002353","product_id":100017301,"comment_content":"总结—<br>最好时间复杂度：最好情况下的时间复杂度<br>最坏时间复杂度：最坏情况下的时间复杂度<br>平均时间复杂度：和概率有关，其实就是算出期望值<br>均摊时间复杂度：在某种数据结构中，时间复杂度低的操作较多而时间复杂度高的操作相对较少时，可以把高时间复杂度操作的耗时均摊给低时间复杂度的操作，这样就得到均摊时间复杂度。它可以被看成一种特殊的平均时间复杂度，易和平均时间复杂度混淆但无需刻意区分。<br><br>均摊时间复杂度还不太能理解，尴尬的是练习题的代码也分析不出时间复杂度，估计是Ｃ语言没学好看不懂这代码，我得去补补Ｃ语言了。不懂的先跳过，希望通过后面的学习能慢慢搞懂......","like_count":0},{"had_liked":false,"id":144660,"user_name":"冷风","can_delete":false,"product_type":"c1","uid":1691637,"ip_address":"","ucode":"E07336BA11F733","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/f5/1c935458.jpg","comment_is_top":false,"comment_ctime":1571991370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571991370","product_id":100017301,"comment_content":"听不懂😂","like_count":0},{"had_liked":false,"id":144272,"user_name":"fengzi","can_delete":false,"product_type":"c1","uid":1712118,"ip_address":"","ucode":"D84ADD0EAAAD49","user_header":"","comment_is_top":false,"comment_ctime":1571885528,"is_pvip":false,"replies":[{"id":"56467","content":"是的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572487788,"ip_address":"","comment_id":144272,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571885528","product_id":100017301,"comment_content":"图文中说”我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1“得出 (1+2+3...+n+n)&#47;(n+1)，为什么分子上还要再加n，这个n表示不在数组中这种情况么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471869,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572487788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1080753,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/frBBsQOGN1yJZ5UsicVSRa0T7nT8V6rBGbdBmfBF4TjicabcmkyiaA4TWT2h9M0jxYZvehEUfb9q2nIqBice817sicA/0","nickname":"Ai花开千年","note":"","ucode":"1B717D4FEA9204","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50107,"discussion_content":"n表示不在数组里要遍历n次，请问分母n+1是怎么得来的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573661124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143810,"user_name":"dandy","can_delete":false,"product_type":"c1","uid":1583740,"ip_address":"","ucode":"5EE976FCBD9215","user_header":"https://static001.geekbang.org/account/avatar/00/18/2a/7c/0d6a87c4.jpg","comment_is_top":false,"comment_ctime":1571794649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571794649","product_id":100017301,"comment_content":"有内存泄漏，老师","like_count":0},{"had_liked":false,"id":143803,"user_name":"wend","can_delete":false,"product_type":"c1","uid":1014096,"ip_address":"","ucode":"45EE220931FE91","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyzUm3M4HMj0wXv8Pr34OhOiaFJjFMSjVKnaJoOWR9Uo1T4RBI4MYtguolJgOwb6eKsAUOq4MGlrw/132","comment_is_top":false,"comment_ctime":1571794208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571794208","product_id":100017301,"comment_content":"最好是O(1),<br>最坏是O(1),<br>平均是O(1)","like_count":0},{"had_liked":false,"id":143101,"user_name":"仲夏","can_delete":false,"product_type":"c1","uid":1690965,"ip_address":"","ucode":"2849869C765CDE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/55/8c1243dc.jpg","comment_is_top":false,"comment_ctime":1571630028,"is_pvip":false,"replies":[{"id":"55997","content":"是的，你网上搜下：加权平均值","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572231174,"ip_address":"","comment_id":143101,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571630028","product_id":100017301,"comment_content":"老师，概率论公式是现成用的吗，我那部没有看懂","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471385,"discussion_content":"是的，你网上搜下：加权平均值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572231174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690965,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cd/55/8c1243dc.jpg","nickname":"仲夏","note":"","ucode":"2849869C765CDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40533,"discussion_content":"好的谢谢，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572231224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142988,"user_name":"黄振宇","can_delete":false,"product_type":"c1","uid":1686397,"ip_address":"","ucode":"976BC7B46DA419","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/7d/26340713.jpg","comment_is_top":false,"comment_ctime":1571617406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571617406","product_id":100017301,"comment_content":"最好、最坏情况时间复杂度<br><br>- 最好情况时间复杂度，最理想情况下，执行这段代码的时间复杂度<br>- 最坏情况时间复杂度，最糟糕情况下，执行这段代码的时间复杂度<br>- 平均情况时间复杂度<br>  - 概率法则，考虑到每种情况的概率，加权平均时间复杂度<br>- 均摊时间复杂度<br>  - 摊还分析","like_count":0},{"had_liked":false,"id":142937,"user_name":"杨帅","can_delete":false,"product_type":"c1","uid":1684811,"ip_address":"","ucode":"0A558B1BA62E44","user_header":"","comment_is_top":false,"comment_ctime":1571590990,"is_pvip":true,"replies":[{"id":"55208","content":"len是一直在增大的，len就相当于n","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571614845,"ip_address":"","comment_id":142937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571590990","product_id":100017301,"comment_content":"我觉得，均摊在这儿应该不是O(1)，因为看计算流程，i应该可以取0到2*len-1，如果题目限定了只能到len才是O(1),否则为O(n).","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471335,"discussion_content":"len是一直在增大的，len就相当于n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571614845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141745,"user_name":"Geek_0808bc","can_delete":false,"product_type":"c1","uid":1699495,"ip_address":"","ucode":"5D05DF73DA7A99","user_header":"","comment_is_top":false,"comment_ctime":1571217269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571217269","product_id":100017301,"comment_content":"我有一个问题，思考题里的for循环对应的复杂度不是O(1)吗，所以不论最好最坏平均摊还，复杂度都是O(1)。像上节课的例子一样。<br>int cal(int n) {<br>   int sum_1 = 0;<br>   int p = 1;<br>   for (; p &lt; 100; ++p) {<br>     sum_1 = sum_1 + p;<br>   }<br><br>   int sum_2 = 0;<br>   int q = 1;<br>   for (; q &lt; n; ++q) {<br>     sum_2 = sum_2 + q;<br>   }<br> <br>   int sum_3 = 0;<br>   int i = 1;<br>   int j = 1;<br>   for (; i &lt;= n; ++i) {<br>     j = 1; <br>     for (; j &lt;= n; ++j) {<br>       sum_3 = sum_3 +  i * j;<br>     }<br>   }<br> <br>   return sum_1 + sum_2 + sum_3;<br> }<br>","like_count":0},{"had_liked":false,"id":141742,"user_name":"Geek_0808bc","can_delete":false,"product_type":"c1","uid":1699495,"ip_address":"","ucode":"5D05DF73DA7A99","user_header":"","comment_is_top":false,"comment_ctime":1571217051,"is_pvip":false,"replies":[{"id":"54887","content":"这个你得多看看，循环n次，所以是O(n)","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571359199,"ip_address":"","comment_id":141742,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571217051","product_id":100017301,"comment_content":"我有一个问题不懂，思考题里的for循环对应的复杂度是O(n)? 不是O(1)吗，像上节课的例子一样：","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470868,"discussion_content":"这个你得多看看，循环n次，所以是O(n)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571359199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141438,"user_name":"Chelsea","can_delete":false,"product_type":"c1","uid":1690388,"ip_address":"","ucode":"EB84AE30426DE9","user_header":"https://static001.geekbang.org/account/avatar/00/19/cb/14/6bbe7f0b.jpg","comment_is_top":false,"comment_ctime":1571154196,"is_pvip":false,"replies":[{"id":"54904","content":"目前主要是java的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571360172,"ip_address":"","comment_id":141438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571154196","product_id":100017301,"comment_content":"公众号的代码可以用python语言显示吗？有时候不方便开电脑看github上的代码…","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470753,"discussion_content":"目前主要是java的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571360172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141335,"user_name":"一","can_delete":false,"product_type":"c1","uid":1603640,"ip_address":"","ucode":"BCC6241C4CC6D1","user_header":"https://static001.geekbang.org/account/avatar/00/18/78/38/da3959cc.jpg","comment_is_top":false,"comment_ctime":1571140837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571140837","product_id":100017301,"comment_content":"最好o(1) 最坏o(n)平均o(1)均摊o(1)","like_count":0},{"had_liked":false,"id":140717,"user_name":"小小鸟","can_delete":false,"product_type":"c1","uid":1308787,"ip_address":"","ucode":"6AD33F6AD5881E","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/73/a1a9a598.jpg","comment_is_top":false,"comment_ctime":1571037455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571037455","product_id":100017301,"comment_content":"简单发表一下我的答案以及理解，希望老师能指正一下<br>1.最好的就是数组空间够，不走循环，复杂度是O(1)<br>2.最差的就是每次数组都空间都不够，走循环,复杂度就是O(n)<br>3.平均时间复杂度,插入n次，根据数据插入的位置，有n种情况，加上额外的一种空间不够的情况，就是n+1次，最理想的平均复杂度是1&#47;(n+1),还有一种最差的就是数组空间不够，平均复杂度是n&#47;(n+1)，所以平均时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":140420,"user_name":"DeepLearner","can_delete":false,"product_type":"c1","uid":1414777,"ip_address":"","ucode":"A47609BD1955B6","user_header":"","comment_is_top":false,"comment_ctime":1570936079,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1570936079","product_id":100017301,"comment_content":"均摊就是输入是均匀分布时的平均复杂度，输入规模n很大时，每个输入点概率测度是O(1&#47;n)","like_count":0},{"had_liked":false,"id":139729,"user_name":"技术小生","can_delete":false,"product_type":"c1","uid":1692743,"ip_address":"","ucode":"18B7751498029F","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/47/0deb44d6.jpg","comment_is_top":false,"comment_ctime":1570711979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570711979","product_id":100017301,"comment_content":"摊还分析：前n-1次时间复杂度O（1），第n次为O（n）。","like_count":0},{"had_liked":false,"id":139693,"user_name":"袁峥","can_delete":false,"product_type":"c1","uid":1179590,"ip_address":"","ucode":"6F832DD175F3AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/c6/234e6aaf.jpg","comment_is_top":false,"comment_ctime":1570706655,"is_pvip":false,"replies":[{"id":"53980","content":"思考题暂时翻评论吧，后面我考虑一下，整理下答案。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570747073,"ip_address":"","comment_id":139693,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570706655","product_id":100017301,"comment_content":"关于思考题，有哪里能看老师解析的地方吗？翻评论？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470062,"discussion_content":"思考题暂时翻评论吧，后面我考虑一下，整理下答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570747073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004375,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/57/787a0c7b.jpg","nickname":"刘少科Mico","note":"","ucode":"DD9610AB096D1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61914,"discussion_content":"看评论太多了，压力山大，有很多都是重复的评论，怎么可以快速看完评论，咋办","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574787523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139509,"user_name":"李哈哈","can_delete":false,"product_type":"c1","uid":1691748,"ip_address":"","ucode":"2A19E74F24D459","user_header":"https://static001.geekbang.org/account/avatar/00/19/d0/64/cb6c25fe.jpg","comment_is_top":false,"comment_ctime":1570670373,"is_pvip":false,"replies":[{"id":"53984","content":"https:&#47;&#47;github.com&#47;wangzheng0822&#47;algo","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570747662,"ip_address":"","comment_id":139509,"utype":1}],"discussion_count":1,"race_medal":5,"score":"1570670373","product_id":100017301,"comment_content":"还有个问题忘了问了 github的链接在哪里呀 谢谢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469974,"discussion_content":"https://github.com/wangzheng0822/algo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570747662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139508,"user_name":"李哈哈","can_delete":false,"product_type":"c1","uid":1691748,"ip_address":"","ucode":"2A19E74F24D459","user_header":"https://static001.geekbang.org/account/avatar/00/19/d0/64/cb6c25fe.jpg","comment_is_top":false,"comment_ctime":1570670335,"is_pvip":false,"replies":[{"id":"53985","content":"haha,👍，能独立思考，有批判精神已经超过很多单纯看的人了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570747718,"ip_address":"","comment_id":139508,"utype":1}],"discussion_count":1,"race_medal":5,"score":"1570670335","product_id":100017301,"comment_content":"关于第一段代码和上下文，感觉不是很严谨呐。题目的原意是找到首次索引，则代码中需要添加break，否则数组中数据有重复时，程序执行完成会找到最后一次的索引。或者限定该数组中数组元素不重复。意思是理解的，不过这次学习的flag是找茬，哈哈。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469973,"discussion_content":"haha,👍，能独立思考，有批判精神已经超过很多单纯看的人了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570747718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139481,"user_name":"Mr.Z","can_delete":false,"product_type":"c1","uid":1691496,"ip_address":"","ucode":"DCBAB7628A8992","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/68/eb862eb5.jpg","comment_is_top":false,"comment_ctime":1570666439,"is_pvip":false,"replies":[{"id":"53987","content":"len是在不停的变化的，一直增大，并不是确定的值，只是初始值是10而已","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570748219,"ip_address":"","comment_id":139481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570666439","product_id":100017301,"comment_content":"老师，为什么最后的思考题在最坏时间复杂度是O(n)呢？无论如何循环执行的次数不应该只是for中len的长度吗？len只是一个常数呀，所以不应该是O(1)咩？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469966,"discussion_content":"len是在不停的变化的，一直增大，并不是确定的值，只是初始值是10而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570748219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139082,"user_name":"Ethan牛","can_delete":false,"product_type":"c1","uid":1691804,"ip_address":"","ucode":"E9485791FC84BB","user_header":"","comment_is_top":false,"comment_ctime":1570542632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570542632","product_id":100017301,"comment_content":"课后思考类似hashmap的扩容拌匀，都是在空间不足时创建新的2倍容量的数组，然后旧的数据复制","like_count":0},{"had_liked":false,"id":138784,"user_name":"暝","can_delete":false,"product_type":"c1","uid":1608600,"ip_address":"","ucode":"20AE1FDFE6DD91","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/98/ddbdea57.jpg","comment_is_top":false,"comment_ctime":1570449155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570449155","product_id":100017301,"comment_content":"习题：一般情况直接插入，时间复杂度O(1)；i等于10＊2^n(n为整数)时执行扩容数组并复制当前元素的操作，时间复杂度O(n)；均摊下来，时间复杂度还是O(1)。","like_count":0},{"had_liked":false,"id":138734,"user_name":"為之一","can_delete":false,"product_type":"c1","uid":1674350,"ip_address":"","ucode":"20F89A8B9810D1","user_header":"https://static001.geekbang.org/account/avatar/00/19/8c/6e/8ecea194.jpg","comment_is_top":false,"comment_ctime":1570435576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570435576","product_id":100017301,"comment_content":"复杂度分析心得小体会：<br>先弄清楚代码块要解决的问题是什么，再逐行分析解读代码的时间复杂度。","like_count":0},{"had_liked":false,"id":138731,"user_name":"Geek_949cc1","can_delete":false,"product_type":"c1","uid":1690476,"ip_address":"","ucode":"F8ACDBF2FA8CC2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKFRiaFrpOTVBuKicMficasBFuF2VY7EnUnLeFcvIn0R5OiaQsOcpJHNM5TusoPHMjIvSfia46c0EWH9mQ/132","comment_is_top":false,"comment_ctime":1570435160,"is_pvip":false,"replies":[{"id":"53597","content":"为啥需要循环呢？代码就是那么写的，你得先理解代码干了件啥事情。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570580054,"ip_address":"","comment_id":138731,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570435160","product_id":100017301,"comment_content":"老师，为啥我感觉在++count那里需要一个循环呢？还是代码本身就是这么写的，加一个循环我感觉能理解时间复杂度的计算。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469631,"discussion_content":"为啥需要循环呢？代码就是那么写的，你得先理解代码干了件啥事情。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138722,"user_name":"范建海","can_delete":false,"product_type":"c1","uid":1690581,"ip_address":"","ucode":"7296B019816FE1","user_header":"https://static001.geekbang.org/account/avatar/00/19/cb/d5/f1340355.jpg","comment_is_top":false,"comment_ctime":1570433331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570433331","product_id":100017301,"comment_content":"## 2.1. 最好、最坏、平均情况时间复杂度<br>```<br>&#47;&#47; n 表示数组 array 的长度<br>int find(int[] array, int n, int x) {<br>  int i = 0;<br>  int pos = -1;<br>  for (; i &lt; n; ++i) {<br>    if (array[i] == x) {<br>       pos = i;<br>       break;<br>    }<br>  }<br>  return pos;<br>}<br><br>```<br>- 最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度<br>- 最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度<br>- 平均情况复杂度，应该吧概率考虑进去，进行加权时间复杂度<br><br>## 2.2. 均摊时间复杂度<br>```<br> &#47;&#47; array 表示一个长度为 n 的数组<br> &#47;&#47; 代码中的 array.length 就等于 n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }<br><br>```<br><br>- 分析方法<br>    - 摊还分析（平摊分析）<br>- 思路：每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)<br>","like_count":0},{"had_liked":false,"id":138665,"user_name":"Sfixy","can_delete":false,"product_type":"c1","uid":1690686,"ip_address":"","ucode":"76553F45870359","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2W9wzKElsgDLLNQPxWpGonwpL9dIeVRnCBJicKXjSksRicLukcxGDQDGOHQjnH754nicnwib7bwQSRdS8rvib1W4YCw/132","comment_is_top":false,"comment_ctime":1570414592,"is_pvip":false,"replies":[{"id":"53620","content":"你再仔细看看，求和之后只有n-1个空位置了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570582262,"ip_address":"","comment_id":138665,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570414592","product_id":100017301,"comment_content":"思考题数组扩充不影响O（n）的复杂度，比如第一次扩充O（2n）也是等于O（n）的，扩充之后也是O（1）的操作更多了而已<br>我有个不理解的地方<br>insert（）方法里面有n+1种情况。只有1种满情况，那么剩下的情况不是n种么？可是为什么写的是n-1种呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469613,"discussion_content":"你再仔细看看，求和之后只有n-1个空位置了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570582262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138650,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1689346,"ip_address":"","ucode":"50A51AE2110A7A","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/02/8346ebf6.jpg","comment_is_top":false,"comment_ctime":1570409511,"is_pvip":false,"replies":[{"id":"53594","content":"也对的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570579964,"ip_address":"","comment_id":138650,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570409511","product_id":100017301,"comment_content":"对有周期性行为的算法的一个周期进行平均时间复杂度分析就是均摊时间复杂度，这样理解对吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469607,"discussion_content":"也对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570579964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138642,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1570404404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570404404","product_id":100017301,"comment_content":"这里变量len就是n, 在n+1种情况下，最差的情况是数组满时：O（n）  平均到前n种情况，还是一个常量，所以平均和均摊是O（1）。通过这两节的学习，复杂度分析最重要的是要屏蔽细枝末节，找到最大的那只青蛙（大多数是一只，某些特殊情况会有好几只）。","like_count":0},{"had_liked":false,"id":138613,"user_name":"Geek__xyq","can_delete":false,"product_type":"c1","uid":1465668,"ip_address":"","ucode":"9935656B290D3D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHjIl0sKCy1xEHExnLWRcZoJvfTZicBbmod0k1JZ82OC9Fpy65EK1OBY2YSzX5ctBAIkdR9Smkd3g/132","comment_is_top":false,"comment_ctime":1570369024,"is_pvip":false,"replies":[{"id":"53621","content":"向前也可以，不过没有向后更好理解些","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570582353,"ip_address":"","comment_id":138613,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570369024","product_id":100017301,"comment_content":"老师，add方法是每次O(n)之后就会有n-1次O(1),所以可以采用摊还分析法，在n到2n，2n到4n，4n到8n...每一轮扩容多出来的操作都可以被后面跟着的O(1)操作均分掉，请问老师，这里向前均分和向后均分有差别吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469595,"discussion_content":"向前也可以，不过没有向后更好理解些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570582353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138043,"user_name":"Lance","can_delete":false,"product_type":"c1","uid":1686840,"ip_address":"","ucode":"CCE52F86EEBBED","user_header":"https://static001.geekbang.org/account/avatar/00/19/bd/38/6d436088.jpg","comment_is_top":false,"comment_ctime":1569993138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569993138","product_id":100017301,"comment_content":"同一段代码在不同输入情况下时间复杂度可能会出现量级差异，为了表示代码在不同情况下的不同时间复杂度，需要使用最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度进行描述。<br><br>均摊时间复杂度应用在代码大部分情况下复杂度都很低，只有个别情况下复杂度比较高，并且两者之间存在前后时序关系，这时候可以将这两种情况放在一块分析，将复杂度较高的操作耗时平摊到其他时间复杂度较低的操作上，对于能够应用均摊时间复杂度分析的场合，一般情况下均摊时间复杂度等于最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":137959,"user_name":"许智鸿","can_delete":false,"product_type":"c1","uid":1655563,"ip_address":"","ucode":"18E41503CC43C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/43/0b/25ff73e0.jpg","comment_is_top":false,"comment_ctime":1569938932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569938932","product_id":100017301,"comment_content":"最小时间复杂度O（1）<br>最坏时间复杂度O（n)<br>平均时间复杂度O（n)","like_count":0},{"had_liked":false,"id":137235,"user_name":"Rinvay","can_delete":false,"product_type":"c1","uid":1152187,"ip_address":"","ucode":"B24D4A5408D8C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/bb/9faa6678.jpg","comment_is_top":false,"comment_ctime":1569662868,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1569662868","product_id":100017301,"comment_content":"一般情况下，直接分析时间复杂度；<br>当最好和最坏情况下的复杂度出现了量级差别的时候，才使用最好，最坏，平均时间复杂度来区分；<br>当对数据结构进行一连串操作会影响时间复杂度时，才使用均摊时间复杂度。<br>一般均摊时间复杂度就等于最好时间复杂度","like_count":0},{"had_liked":false,"id":136541,"user_name":"Geek_st","can_delete":false,"product_type":"c1","uid":1650299,"ip_address":"","ucode":"00C463FA081295","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ercJMgge7xt90pZCqtJZ0Qcxo81FVz662VfAN5k9JWSM4kEFA1y6Xia7e5l6XZdiaEBYYf2aYiaPNibdw/132","comment_is_top":false,"comment_ctime":1569467887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569467887","product_id":100017301,"comment_content":"我分析复杂度的切入点是<br>1.看有没有循环 <br>2.循环里的边界条件是否是常量 <br>2.1是常量则时间复杂度为O（1） <br>2.2否者具体看边界条件是属于O(n),O(logn),O(nlog),O(n^2)中的，<br>根据练习题可知边界条件len=10，当数组满的时候，每次都是len*2，所以len的增长都是常量级，即时间复杂度是O(1)，空间复杂度O(1)","like_count":0},{"had_liked":false,"id":136289,"user_name":"kaisheng","can_delete":false,"product_type":"c1","uid":1504956,"ip_address":"","ucode":"FD9EFEBEB7BFDB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mkcNxKyJibOd8bsLpQRJ9Yjsew5yTBm2GTXUSkvwbwibMqPPMV9GbmXPzFIRC9iaX2s7HxvSryTLhGnrSogYqB7NQ/132","comment_is_top":false,"comment_ctime":1569403688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569403688","product_id":100017301,"comment_content":"学完了大数据的相关知识，再来听您的这门课程，收益匪浅","like_count":0},{"had_liked":false,"id":136259,"user_name":"薀渘の說脕鮟","can_delete":false,"product_type":"c1","uid":1257600,"ip_address":"","ucode":"6E1978D1002392","user_header":"https://static001.geekbang.org/account/avatar/00/13/30/80/4541f805.jpg","comment_is_top":false,"comment_ctime":1569399154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569399154","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":135765,"user_name":"陈 | 先 | 生 |","can_delete":false,"product_type":"c1","uid":1016647,"ip_address":"","ucode":"F2866A71A360F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/47/33648a00.jpg","comment_is_top":false,"comment_ctime":1569255515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569255515","product_id":100017301,"comment_content":"最后的均摊不是很理解。。。<br>平时用的是python，只会c的基础，看不懂c#的写法啊=。=<br>路漫漫其修远兮～～～","like_count":0},{"had_liked":false,"id":135724,"user_name":"o my love","can_delete":false,"product_type":"c1","uid":1243331,"ip_address":"","ucode":"307601ACAC5DCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/c3/1d557354.jpg","comment_is_top":false,"comment_ctime":1569247970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569247970","product_id":100017301,"comment_content":"垮掉，等差数组搞不定","like_count":0},{"had_liked":false,"id":135230,"user_name":"北顾-岛城","can_delete":false,"product_type":"c1","uid":1433568,"ip_address":"","ucode":"54ECB3E5E4073A","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/e0/ce671992.jpg","comment_is_top":false,"comment_ctime":1569072463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569072463","product_id":100017301,"comment_content":"最好复杂度为O(1)，最坏为O(n)，平均和均摊复杂度均为O(1)","like_count":0},{"had_liked":false,"id":135037,"user_name":"Alan Ding","can_delete":false,"product_type":"c1","uid":1248035,"ip_address":"","ucode":"D2B4C8FC8562F8","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/23/935e8061.jpg","comment_is_top":false,"comment_ctime":1568985520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568985520","product_id":100017301,"comment_content":"建议老师统一下编程语言，我看到有时候数组声明是<br>C语法：int array[ ] = new int[10];<br>有时候是<br>Java语法：int[ ] array = new int[n];","like_count":0},{"had_liked":false,"id":134555,"user_name":"牛味浓龙魏流","can_delete":false,"product_type":"c1","uid":1605322,"ip_address":"","ucode":"FB58F144635B2A","user_header":"https://static001.geekbang.org/account/avatar/00/18/7e/ca/0689da8f.jpg","comment_is_top":false,"comment_ctime":1568864472,"is_pvip":false,"replies":[{"id":"51689","content":"最坏或者平均","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568933599,"ip_address":"","comment_id":134555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568864472","product_id":100017301,"comment_content":"所以我们平时说的时间复杂度，是指哪一种呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467804,"discussion_content":"最坏或者平均","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568933599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134324,"user_name":"ascend","can_delete":false,"product_type":"c1","uid":1268755,"ip_address":"","ucode":"4F63892FB42590","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/13/d1a75b2e.jpg","comment_is_top":false,"comment_ctime":1568805920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568805920","product_id":100017301,"comment_content":"这才第4节就开始看不懂了，哎，高中的数学都忘记完了","like_count":0},{"had_liked":false,"id":134190,"user_name":"Geek_Bin","can_delete":false,"product_type":"c1","uid":1666251,"ip_address":"","ucode":"D8AFDBB1155299","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rIFgFBXjOuUkkMM9T0In0c6lFGb1KG18gUgaFzJAlFFrQA0KqyqLOmHUycmGgSb4z1RGK2waw3Msf21lWRI4WA/132","comment_is_top":false,"comment_ctime":1568772484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568772484","product_id":100017301,"comment_content":"最好是O(1),最差是O(n),加权平均也是O(1),均摊O(1)","like_count":0},{"had_liked":false,"id":133835,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1568681873,"is_pvip":false,"replies":[{"id":"51421","content":"要的就是这种感觉哦，👍","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568761477,"ip_address":"","comment_id":133835,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568681873","product_id":100017301,"comment_content":"通过老师的讲解，我把这个题目看完之后的第一个结果是最好时间复杂度是O(1),最坏是O(n),为什么呢，我也不知道，我就是凭借着感觉，总之你的课听完之后，当我看到一个类似的分析时间复杂度的题目的时候，我就知道答案是什么了，也许不是全部准确，但是基本是对的！<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467523,"discussion_content":"要的就是这种感觉哦，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568761477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132015,"user_name":"Hello World 工程师","can_delete":false,"product_type":"c1","uid":1643366,"ip_address":"","ucode":"E5F694B63BD0C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/13/66/bfa42cb0.jpg","comment_is_top":false,"comment_ctime":1568005361,"is_pvip":false,"replies":[{"id":"51230","content":"一般情况下会是一样的。没说一定一样哈","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568589376,"ip_address":"","comment_id":132015,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568005361","product_id":100017301,"comment_content":"为什么平均时间复杂度和最坏时间复杂度是一样的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466722,"discussion_content":"一般情况下会是一样的。没说一定一样哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568589376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129853,"user_name":"科科","can_delete":false,"product_type":"c1","uid":1647304,"ip_address":"","ucode":"7DAE6FE781172E","user_header":"https://static001.geekbang.org/account/avatar/00/19/22/c8/f2892022.jpg","comment_is_top":false,"comment_ctime":1567305625,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1567305625","product_id":100017301,"comment_content":"其实有时候做的时候总是不会算时间复杂度，其实是没弄清楚思路，如果思路都非常清洗的话还是可以算出来","like_count":0},{"had_liked":false,"id":126811,"user_name":"不动声色满心澎湃","can_delete":false,"product_type":"c1","uid":1621658,"ip_address":"","ucode":"80D8F9E49AF7C2","user_header":"https://static001.geekbang.org/account/avatar/00/18/be/9a/b0b89be3.jpg","comment_is_top":false,"comment_ctime":1566482842,"is_pvip":false,"replies":[{"id":"47241","content":"我们说一个操作的最差、最好、平均、均摊都是指：调用这个操作很多次之后，从中找出最差、最好。。。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1566773600,"ip_address":"","comment_id":126811,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566482842","product_id":100017301,"comment_content":"我有个问题。 假设第一次调用add的最差时间复杂度是O(n)  第二次是O(n^2)  第三次是... 那么最差的时间复杂度是第一次到第N次的归纳出来的最差时间复杂度  对吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464180,"discussion_content":"我们说一个操作的最差、最好、平均、均摊都是指：调用这个操作很多次之后，从中找出最差、最好。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566773600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1621658,"avatar":"https://static001.geekbang.org/account/avatar/00/18/be/9a/b0b89be3.jpg","nickname":"不动声色满心澎湃","note":"","ucode":"80D8F9E49AF7C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7000,"discussion_content":"我钻牛角尖了。谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567248524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125809,"user_name":"wrzgeek","can_delete":false,"product_type":"c1","uid":1031589,"ip_address":"","ucode":"69C4980053E388","user_header":"","comment_is_top":false,"comment_ctime":1566261912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566261912","product_id":100017301,"comment_content":"笔记：<br>最好情况时间复杂度，最坏情况时间复杂度，平均时间复杂度(平均时间复杂度有时候要考虑概率情况)，均摊时间复杂度<br>思考：<br>最好：O(1),<br>最坏：O(n),<br>平均、均摊：O(1),这个其实一开始做错了，理解的除了第一次数组扩展，其余的数组扩展的时候的复杂度都是前边要均摊的时间复杂度之和的2倍，所以误以为结果不是O（1）。然后看留言，加深了一下对均摊的理解，均摊就是某一次特殊情况下，复杂度较高的那一次的复杂度的量级，与一般情况下复杂度的量级在同一量级上，就可以被均摊掉，其实也是一种概率的概念。","like_count":0},{"had_liked":false,"id":125521,"user_name":"Henry Liao","can_delete":false,"product_type":"c1","uid":1635174,"ip_address":"","ucode":"EA8407D15E2CC6","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/66/5d7ba082.jpg","comment_is_top":false,"comment_ctime":1566198450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566198450","product_id":100017301,"comment_content":"每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1)... 完全没听懂是啥意思","like_count":0},{"had_liked":false,"id":125112,"user_name":"零启拾落","can_delete":false,"product_type":"c1","uid":1232601,"ip_address":"","ucode":"58EA1063A9F383","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/d9/e6c2e0d1.jpg","comment_is_top":false,"comment_ctime":1566091745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566091745","product_id":100017301,"comment_content":"懂了 因为0位就是逻辑就是触发了求和","like_count":0},{"had_liked":false,"id":125111,"user_name":"零启拾落","can_delete":false,"product_type":"c1","uid":1232601,"ip_address":"","ucode":"58EA1063A9F383","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/d9/e6c2e0d1.jpg","comment_is_top":false,"comment_ctime":1566091552,"is_pvip":false,"replies":[{"id":"47256","content":"是的~","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1566775429,"ip_address":"","comment_id":125111,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566091552","product_id":100017301,"comment_content":"最后摊分的例子：Count=1 清空后，0位的值赋不进去了吧？只能赋n-1个值，是这样设计的吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463437,"discussion_content":"是的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566775429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121550,"user_name":"徐有志","can_delete":false,"product_type":"c1","uid":1008543,"ip_address":"","ucode":"62BE9BFBD321C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/9f/304ab00d.jpg","comment_is_top":false,"comment_ctime":1565157718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565157718","product_id":100017301,"comment_content":"老师讲得很赞！！","like_count":0},{"had_liked":false,"id":121146,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1565063844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565063844","product_id":100017301,"comment_content":"加权平均时间复杂度，根据每种情况出现的概率不同，有可能与普通的平均时间复杂度不一致！","like_count":0},{"had_liked":false,"id":119589,"user_name":"半瓶醋","can_delete":false,"product_type":"c1","uid":1282746,"ip_address":"","ucode":"8C898E244D0417","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/ba/9833f06f.jpg","comment_is_top":false,"comment_ctime":1564631453,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564631453","product_id":100017301,"comment_content":"课后思考：最好情况就是数组容量没有满，直接插入，时间复杂度为o(1)；最坏情况：数组刚好满，再添加元素需要扩容一倍空间，并将原来数据拷贝进新数组，时间复杂度为O(n)；因为不是每次插入最后一个元素都要去扩容，是要满足一定规律，因此考虑均摊分析法。假设capacity=n，则当添加第n+1个元素时调用resize，总共执行2n+1次操作，均摊计算，每次add都会执行2个操作，与数据规模无关，因此均摊复杂度为O（1）。","like_count":0},{"had_liked":false,"id":118965,"user_name":"IDLE","can_delete":false,"product_type":"c1","uid":1618048,"ip_address":"","ucode":"F88A36E5E98366","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/80/75398595.jpg","comment_is_top":false,"comment_ctime":1564475332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564475332","product_id":100017301,"comment_content":"均摊更像是组合，两个或几个作为一组循环出现，计算组的复杂度","like_count":0},{"had_liked":false,"id":118935,"user_name":"廖汉汉","can_delete":false,"product_type":"c1","uid":1590644,"ip_address":"","ucode":"21CDC9CA86FF9E","user_header":"https://static001.geekbang.org/account/avatar/00/18/45/74/755cacb3.jpg","comment_is_top":false,"comment_ctime":1564471918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564471918","product_id":100017301,"comment_content":"java ArrayList底层也是通过这种方式通过数组去实现集合长度可变存储数据","like_count":0},{"had_liked":false,"id":117082,"user_name":"Hwan","can_delete":false,"product_type":"c1","uid":1205627,"ip_address":"","ucode":"A728C6790511BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","comment_is_top":false,"comment_ctime":1563964097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563964097","product_id":100017301,"comment_content":"最好O(1),最坏O(n),平均O(1)","like_count":0},{"had_liked":false,"id":115760,"user_name":"ffflag","can_delete":false,"product_type":"c1","uid":1610605,"ip_address":"","ucode":"CE8180ED7BDDAE","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/6d/04c4dd7b.jpg","comment_is_top":false,"comment_ctime":1563720526,"is_pvip":false,"replies":[{"id":"42287","content":"这个就不是均摊分析法了，你再看下文章里，我讲到的均摊分析是咋么分析的吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563745884,"ip_address":"","comment_id":115760,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563720526","product_id":100017301,"comment_content":"1*1&#47;（n+1）+....+1*1&#47;（n+1）+n*1&#47;(n+1)=n&#47;(n+1)+n&#47;(n+1)=2n&#47;(n+1)~ O(1)  故均摊是O(1) 可以这样理解吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459276,"discussion_content":"这个就不是均摊分析法了，你再看下文章里，我讲到的均摊分析是咋么分析的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563745884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115709,"user_name":"徐广杰","can_delete":false,"product_type":"c1","uid":1607773,"ip_address":"","ucode":"6541084E279FEA","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/5d/4ba6f1a2.jpg","comment_is_top":false,"comment_ctime":1563702560,"is_pvip":false,"replies":[{"id":"42289","content":"不啊，我自己定义的操作，想怎么玩怎么玩啊：）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563746137,"ip_address":"","comment_id":115709,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563702560","product_id":100017301,"comment_content":"这个插入不是在不改变原数组数据的情况插入吗？如果数组满了不是应该重新创建一个新的n+1长的的数组吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459244,"discussion_content":"不啊，我自己定义的操作，想怎么玩怎么玩啊：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563746137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115607,"user_name":"星辰大海","can_delete":false,"product_type":"c1","uid":1265881,"ip_address":"","ucode":"6A1134533337FA","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/d9/18acc2ee.jpg","comment_is_top":false,"comment_ctime":1563672863,"is_pvip":false,"replies":[{"id":"42295","content":"理论上是需要的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563746811,"ip_address":"","comment_id":115607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563672863","product_id":100017301,"comment_content":"老师 有个疑问 <br>关于查找变量X的平均时间复杂度 需要重复计算不在数组中和在数组的第n-1个位置这两种情况吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459188,"discussion_content":"理论上是需要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563746811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114731,"user_name":"拾柒","can_delete":false,"product_type":"c1","uid":1601018,"ip_address":"","ucode":"A9C4A076943D36","user_header":"https://static001.geekbang.org/account/avatar/00/18/6d/fa/1ada7ac2.jpg","comment_is_top":false,"comment_ctime":1563371873,"is_pvip":false,"replies":[{"id":"42201","content":"就是还可以再存东西的空间，没有被占用的空间。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563575301,"ip_address":"","comment_id":114731,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563371873","product_id":100017301,"comment_content":"有一点我不太明白，数组空闲空间什么意思？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458798,"discussion_content":"就是还可以再存东西的空间，没有被占用的空间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563575301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113884,"user_name":"志强","can_delete":false,"product_type":"c1","uid":1562256,"ip_address":"","ucode":"CE9F6E9D2F49E9","user_header":"https://static001.geekbang.org/account/avatar/00/17/d6/90/89fb561f.jpg","comment_is_top":false,"comment_ctime":1563179627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563179627","product_id":100017301,"comment_content":"感觉练习题和老师据的insert方法的复杂读是一样的，insert方法，如果数据结构满了，需要变量n累加，这里是add方法是需要扩容，然后变量n，重新赋值","like_count":0},{"had_liked":false,"id":113628,"user_name":"黄金","can_delete":false,"product_type":"c1","uid":1261700,"ip_address":"","ucode":"3CF4417C9D9264","user_header":"https://static001.geekbang.org/account/avatar/00/13/40/84/65032a15.jpg","comment_is_top":false,"comment_ctime":1563098029,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1563098029","product_id":100017301,"comment_content":"两眼一闭，心中默念: 不重要不重要，都是浮云都是浮云","like_count":0},{"had_liked":false,"id":113149,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1217896,"ip_address":"","ucode":"947C5785A7EDF1","user_header":"https://static001.geekbang.org/account/avatar/00/12/95/68/41546e8a.jpg","comment_is_top":false,"comment_ctime":1562903490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562903490","product_id":100017301,"comment_content":"打卡。<br>课后题add函数，<br>最好时间复杂度：O(1)，数组有剩余空间<br>最坏时间复杂度：O(n),  数组空间不足<br>平均时间复杂度：O(1),加权计算即可<br>均摊时间复杂度：O(1)，每次申请新的数组容量都是之前double，所以每次copy到新数组的时间复杂度，完全可以分摊到紧接着copy之后的2n次赋值，所以，可以均摊掉，故均摊时间复杂度就是O(1)","like_count":0},{"had_liked":false,"id":112407,"user_name":"逻各斯与努斯","can_delete":false,"product_type":"c1","uid":1476477,"ip_address":"","ucode":"148F124E649B0F","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/7d/5b331647.jpg","comment_is_top":false,"comment_ctime":1562729279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562729279","product_id":100017301,"comment_content":"我看到len=10是常量啊 , 所以时间复杂度一直都是O(1)才对啊  ，哪来的n ？ ","like_count":0},{"had_liked":false,"id":109840,"user_name":"itschenxiang","can_delete":false,"product_type":"c1","uid":1519547,"ip_address":"","ucode":"7D90194AC52435","user_header":"https://static001.geekbang.org/account/avatar/00/17/2f/bb/4236d712.jpg","comment_is_top":false,"comment_ctime":1562119071,"is_pvip":false,"replies":[{"id":"40135","content":"并不是的，只是初始化了一下。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562281905,"ip_address":"","comment_id":109840,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562119071","product_id":100017301,"comment_content":"课后思考题add函数中len不是一个常量吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456598,"discussion_content":"并不是的，只是初始化了一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562281905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109119,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1561966130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561966130","product_id":100017301,"comment_content":"最好复杂度，所有输入中单次复杂度最低的复杂度。<br>最坏复杂度，所有输入中单次复杂度最高的复杂度。<br>平均复杂度，所有输入按照概率加权的单次复杂度，介于最好和最坏之间。<br>均摊复杂度，不再研究单次输入，而是研究多次输入的平均值，多次输入前后有关联。<br>个人以为平均复杂度和均摊复杂度都对输入概率分布有假设，是个二选一的问题。<br>文中的例子，最好复杂度是O(1),最坏复杂度是O(n),这里平均复杂度意义不大，因为序列之间有影响，应该选用均摊复杂度，均摊复杂度为O(1),因为n个输入才会扩充n，均摊下来每个输入耗费的资源是常数级。","like_count":0},{"had_liked":false,"id":108583,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1561811623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561811623","product_id":100017301,"comment_content":"最好，最坏，平均，均摊，都是面对真实场景的分析，对代码的各种实际执行时间心中有数","like_count":0},{"had_liked":false,"id":108558,"user_name":"一直都是小孩子","can_delete":false,"product_type":"c1","uid":1521602,"ip_address":"","ucode":"832FBD7FBBE4E3","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/c2/8674db24.jpg","comment_is_top":false,"comment_ctime":1561800109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561800109","product_id":100017301,"comment_content":"len等于常数10的话，最好复杂度和最坏复杂度不都是O（1）吗？算法中没提到n，是我太钻牛角尖了嘛～评论区好像都木有人有疑问耶","like_count":0},{"had_liked":false,"id":108552,"user_name":"一直都是小孩子","can_delete":false,"product_type":"c1","uid":1521602,"ip_address":"","ucode":"832FBD7FBBE4E3","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/c2/8674db24.jpg","comment_is_top":false,"comment_ctime":1561799425,"is_pvip":false,"replies":[{"id":"39580","content":"是统计add函数被调用很多次之后的各种时间复杂度。len的长度是在变化的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562024155,"ip_address":"","comment_id":108552,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561799425","product_id":100017301,"comment_content":"len是常数10的话，最好和最坏复杂度不都是O（1）吗？程序中根本没提到数据规模n啊～～评论中大家都认为最坏是O（n），是我想多了吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456037,"discussion_content":"是统计add函数被调用很多次之后的各种时间复杂度。len的长度是在变化的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562024155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106957,"user_name":"cjxz","can_delete":false,"product_type":"c1","uid":1588610,"ip_address":"","ucode":"9735F51D4721E9","user_header":"","comment_is_top":false,"comment_ctime":1561428986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561428986","product_id":100017301,"comment_content":"时间复杂度O(1)","like_count":0},{"had_liked":false,"id":106571,"user_name":"王聪 Claire","can_delete":false,"product_type":"c1","uid":1090310,"ip_address":"","ucode":"0D9CC82C9F44D4","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/06/9fa93074.jpg","comment_is_top":false,"comment_ctime":1561346638,"is_pvip":false,"replies":[{"id":"38632","content":"1. n就等于length；<br>2. 频繁的调用insert函数，而不只是调用一次。这种情况下，我们分析insert的平均、最好、最坏时间复杂度。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1561419301,"ip_address":"","comment_id":106571,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561346638","product_id":100017301,"comment_content":"insert函数，当count！= array.length时，就执行了1次插入，然后就退出了，怎么是n次呢？谢谢<br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455142,"discussion_content":"1. n就等于length；\n2. 频繁的调用insert函数，而不只是调用一次。这种情况下，我们分析insert的平均、最好、最坏时间复杂度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561419301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105855,"user_name":"羊小看","can_delete":false,"product_type":"c1","uid":1488453,"ip_address":"","ucode":"90F58F80A75520","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJYEdMwBDUC6gYrUoI7092ocWJPyw1aP8xNOFXxOv7LEw1xj5a4icDibV7pd9vN45lXicXYjB7oYXVqg/132","comment_is_top":false,"comment_ctime":1561094822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561094822","product_id":100017301,"comment_content":"均摊O(1)","like_count":0},{"had_liked":false,"id":105251,"user_name":"Geek_bd613f","can_delete":false,"product_type":"c1","uid":1343671,"ip_address":"","ucode":"69740C1D0FC15B","user_header":"","comment_is_top":false,"comment_ctime":1560947169,"is_pvip":true,"replies":[{"id":"38120","content":"后面会讲到关于递归时间复杂度分析方法的，你可以先别急。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560987975,"ip_address":"","comment_id":105251,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560947169","product_id":100017301,"comment_content":"看完仍然对循环里有递归的这类型的时间复杂度不会分析，希望老师可以普及一下","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454609,"discussion_content":"后面会讲到关于递归时间复杂度分析方法的，你可以先别急。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560987975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104669,"user_name":"演","can_delete":false,"product_type":"c1","uid":1075072,"ip_address":"","ucode":"8685926BDA0A66","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/80/4e52c16f.jpg","comment_is_top":false,"comment_ctime":1560816863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560816863","product_id":100017301,"comment_content":"可不可以这样理解:最小O(1) 最大O(n),则平均和均摊都是O(1)?","like_count":0},{"had_liked":false,"id":103721,"user_name":"时光剪影","can_delete":false,"product_type":"c1","uid":1093159,"ip_address":"","ucode":"CC6F24C30AE3E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/ae/27/3dfcc699.jpg","comment_is_top":false,"comment_ctime":1560497389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560497389","product_id":100017301,"comment_content":"四种时间复杂度，上面的例子中最好O(1) ，最坏O(n) ,均摊是平均的特例，复杂度=最好时间复杂度<br>加权后期还需要再巩固一下<br>平摊分析法采用复杂情况+简单情况求平均值","like_count":0},{"had_liked":false,"id":102955,"user_name":"Charley Choi 🎃","can_delete":false,"product_type":"c1","uid":1235154,"ip_address":"","ucode":"E43371C6B2BBDA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/d2/8bc05ccf.jpg","comment_is_top":false,"comment_ctime":1560335136,"is_pvip":false,"replies":[{"id":"37281","content":"你假设数组存在空间的概率是1&#47;2，这个假设不成立呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560382685,"ip_address":"","comment_id":102955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560335136","product_id":100017301,"comment_content":"关于insert()均摊时间复杂度的分析，为什么 n+1 种情况发生的概率一样，都是 1&#47;(n+1)。我也可以像find()一样，假设数组是否存在空间的概率都为 1&#47;2，这样存在空间时时间复杂度就是O(1)*(1&#47;2n)+O(1)*(1&#47;2n)+...+O(1)*(1&#47;2n)，不存在空间时时间复杂度就是1&#47;2*O(n)，并不是1*(1&#47;n)+1*(1&#47;n)+...+n*(1&#47;n) ?","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453665,"discussion_content":"你假设数组存在空间的概率是1/2，这个假设不成立呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560382685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102954,"user_name":"Charley Choi 🎃","can_delete":false,"product_type":"c1","uid":1235154,"ip_address":"","ucode":"E43371C6B2BBDA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/d2/8bc05ccf.jpg","comment_is_top":false,"comment_ctime":1560334592,"is_pvip":false,"replies":[{"id":"37280","content":"这不是一个意思吗？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560382496,"ip_address":"","comment_id":102954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560334592","product_id":100017301,"comment_content":"请教一下，在摊还时间复杂度分析insert()方法过程中，为什么说”一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。” 而不是 n 个O(1)的插入操作后，紧跟着一个O(n)插入呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453664,"discussion_content":"这不是一个意思吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560382496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101664,"user_name":"上善若水","can_delete":false,"product_type":"c1","uid":1565462,"ip_address":"","ucode":"7E783812D2D164","user_header":"https://static001.geekbang.org/account/avatar/00/17/e3/16/0e476be6.jpg","comment_is_top":false,"comment_ctime":1559906032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559906032","product_id":100017301,"comment_content":"<br> i等于 0~n-1  o(1)<br> i大于等于n  o(n)<br>一共有n+1中情况<br>跟老师将的例子差不多，按照加权平均法因该是o(1)。<br>（里面的数学知识不太懂，能看懂老师讲的例子）<br>","like_count":0},{"had_liked":false,"id":101079,"user_name":"Ares","can_delete":false,"product_type":"c1","uid":1323178,"ip_address":"","ucode":"290D252FABCB1D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL2wE4k0RxhvTOFu179WngoHIOQvIyoltqZlA1MHMlv7ALDWKyx4dOOLc9zcMuzdRbIAiahvcSQ0aA/132","comment_is_top":false,"comment_ctime":1559710653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559710653","product_id":100017301,"comment_content":"2（n+3）&#47;2（n+1），（3n+1)&#47;4怎么出来的，我用数代入算算出来和加权累加不一致啊。","like_count":0},{"had_liked":false,"id":100845,"user_name":"申鹏飞","can_delete":false,"product_type":"c1","uid":1331464,"ip_address":"","ucode":"429211A63F6314","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/08/0460f6eb.jpg","comment_is_top":false,"comment_ctime":1559652177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559652177","product_id":100017301,"comment_content":"最好最坏最常用，<br>只有当平均有量级的差异时才考虑，<br>均摊时间复杂度 在特定条件下才会使用，时序规律出现时。","like_count":0},{"had_liked":false,"id":100649,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1559610626,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559610626","product_id":100017301,"comment_content":"如果说时间复杂度体现了量级差异上的取舍，告诉我们在生活或工作中应当着重西瓜而非芝麻，那么几种不同的时间复杂度就体现了事件量级在不同维度下的不同考量，需要用动态发展的观点看问题，有时需要关注全局最优解，有时当前情境下的局部最优解也是很好的选择。","like_count":0},{"had_liked":false,"id":100169,"user_name":"余温","can_delete":false,"product_type":"c1","uid":1555123,"ip_address":"","ucode":"9606ECFB6C27A4","user_header":"https://static001.geekbang.org/account/avatar/00/17/ba/b3/6fd3a9cc.jpg","comment_is_top":false,"comment_ctime":1559466531,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559466531","product_id":100017301,"comment_content":"练习题最差不应该是 O(1) 吗？len 不是常量来的吗？","like_count":0},{"had_liked":false,"id":99687,"user_name":"Monroe  He","can_delete":false,"product_type":"c1","uid":1348219,"ip_address":"","ucode":"D04ECB2EF2E0DA","user_header":"https://static001.geekbang.org/account/avatar/00/14/92/7b/8c7e3e61.jpg","comment_is_top":false,"comment_ctime":1559280113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559280113","product_id":100017301,"comment_content":"最好时间复杂度，最坏时间复杂度，平均时间复杂度，均摊时间复杂度<br>均摊时间复杂度采用均摊分析进行分析，在某些情况下一个大的操作后是连续的小操作，这样规律的进行下去。就可以将大操作与小操作综合在一起分析，将大操作的时间均分到每个小操作之上。<br>习题答案：最好时间复杂度为O(1)，最坏为O（n）,平均时间复杂度为O(1)，均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":98043,"user_name":"倚楼听风雨","can_delete":false,"product_type":"c1","uid":1469480,"ip_address":"","ucode":"2AC0E450BF36DB","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/28/e2311347.jpg","comment_is_top":false,"comment_ctime":1558881548,"is_pvip":false,"replies":[{"id":"35206","content":"不可能为0吧，0编译都通过不了吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559006320,"ip_address":"","comment_id":98043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558881548","product_id":100017301,"comment_content":"insert方法，如果n是0，是不是会报数组越界错误","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451532,"discussion_content":"不可能为0吧，0编译都通过不了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559006320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97431,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1558668481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558668481","product_id":100017301,"comment_content":"均摊时间复杂度是一种特殊的平均时间复杂度，本质上都是加权的思想。<br><br>add()函数的时间复杂度：<br>最好：i &lt; len，数组空间足够，不需要申请和拷贝，O(1)<br>最坏：i = len，数组空间不够，需要申请和拷贝，O(n)<br>均摊：随着数组元素越多，数组空间越大，每次申请的空间和拷贝次数呈倍数增长，但整体呈现一个周期性的规律，以i=len到i=2*len为一个周期，len-1次是O(1)，第len次是O(len)，而第len次的时间可以均摊到前面len-1次操作上，一个周期下来均摊时间复杂度是O(1)，每个周期都如此，所以整体均摊时间复杂度也是O(1)<br><br><br>但是代码有内存泄漏😂","like_count":0},{"had_liked":false,"id":96260,"user_name":"李坤","can_delete":false,"product_type":"c1","uid":1203140,"ip_address":"","ucode":"A9F82C6EFDDA39","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/c4/40cc1989.jpg","comment_is_top":false,"comment_ctime":1558367247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558367247","product_id":100017301,"comment_content":"最小时间复杂度：不会进入循环<br>最大时间复杂度 最大程度进入循环<br>平均时间复杂度：按照可能出现的概率计算<br>平摊：最多一次的耗时平摊到低耗时间的每一次","like_count":0},{"had_liked":false,"id":96064,"user_name":"Geek_544e36","can_delete":false,"product_type":"c1","uid":1450625,"ip_address":"","ucode":"AE7D01F2BA3D65","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/81/3115e3eb.jpg","comment_is_top":false,"comment_ctime":1558318934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558318934","product_id":100017301,"comment_content":"练习题最好是O(1) 最坏是O(n) 均摊是O(1)","like_count":0},{"had_liked":false,"id":95880,"user_name":"名曰蓝兮","can_delete":false,"product_type":"c1","uid":1461809,"ip_address":"","ucode":"90E1873682991F","user_header":"https://static001.geekbang.org/account/avatar/00/16/4e/31/3a7e74c1.jpg","comment_is_top":false,"comment_ctime":1558240330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558240330","product_id":100017301,"comment_content":"最好O(1)，最差O(n)，平均O(1)。<br>ps，我终于弄出来那两个式子怎么算出来的了，我这数学渣可以瞑目了！","like_count":0},{"had_liked":false,"id":95481,"user_name":"海贼王","can_delete":false,"product_type":"c1","uid":1239233,"ip_address":"","ucode":"9F35793FAA3F5E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/c1/e2cc1d04.jpg","comment_is_top":false,"comment_ctime":1558061694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558061694","product_id":100017301,"comment_content":"初看练习题，一直在想一个问题，不就是10的倍数次循环吗，这个值是固定的，无论i是否大于len，其时间复杂度都是O(1)才对。但是换个角度考虑，这道题对应本小节的内容，题目处在这里要求学员进行分析，肯定逃不出老师讲的内容，再者，10表示的是数据的规模，如果这里的10换成其他值，那么代码的执行效率会有变化，所以可以从最好&#47;最坏&#47;平均&#47;均摊的角度对代码的执行效率进行分析。对于最好&#47;最坏的分析，还算简单，分别是O(1)&#47;O(n)，但是对于后两者时间复杂度的分析，我比较模糊。现在针对这两个分析，我表达一下自己的看法，希望老师不要嫌弃鄙人思维愚笨，也真心的希望老师能够纠正鄙人想法种的不足之处：时间复杂度表示的是代码的执行效率与数据规模之间的关系，这里我们模糊数组长度的概念，将其视为n，那么向数组中插入数据就可以分为两个大情况：向小于（数组长度 - 1）的位置上添加数据、向大于等于（数组长度）的位置上添加数据，每个大类的概率分别为1&#47;2，在第一个大情况下又分为（n - 1）种情况，每种情况的概率为1&#47;n - 1。则引入概率概念的平均时间复杂度为：1*1&#47;(n-1)+2*1&#47;(n-1)+...+(n-1)*1&#47;(n-1)+n*1&#47;2=(1+n-1)&#47;2+n*1&#47;2= n，所以平均时间复杂度为O(n)。对于均摊时间复杂度，由于这段代码的执行是周期循环的，所以只有在极个别的情况（比如i的值大于等于数组长度）下才会出现时间复杂度为O(n)，所以均摊到其他几种时间复杂度为O(1)种，这段代码的均摊时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":94705,"user_name":"Geek_63ad86","can_delete":false,"product_type":"c1","uid":1528671,"ip_address":"","ucode":"E758532B1169D6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib3Rzem884S7icAGXsBzGKyricapL0sfax7wL7T4n1W1ZPZ0h7XNtGd5aqLlZQgZ3bZTPBmC4xa7ia8iaR0XBKMAuIQ/132","comment_is_top":false,"comment_ctime":1557883793,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1557883793","product_id":100017301,"comment_content":"最好O(1)，最坏O(n)，平均O(1)<br>insert()的例子其实就是表明一个循环往复的过程。程序运行到一个瓶颈需要花更多的时间来解决，但是解决这个困难之后，这个问题又变得简单了，反复如此。","like_count":0},{"had_liked":false,"id":94112,"user_name":"Jeason Lee","can_delete":false,"product_type":"c1","uid":1523070,"ip_address":"","ucode":"CCF0BB264EAF49","user_header":"https://static001.geekbang.org/account/avatar/00/17/3d/7e/1b92d463.jpg","comment_is_top":false,"comment_ctime":1557723302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557723302","product_id":100017301,"comment_content":"时间复杂度的分析讲的很透彻，一下就理解了，平均和均摊，如老师所讲，只是一种说法而已。练习题，最好O(1)，最坏O(n)，平均O(1)，练习题好像是arraylist的集合实现方案","like_count":0},{"had_liked":false,"id":93877,"user_name":"puhan","can_delete":false,"product_type":"c1","uid":1529235,"ip_address":"","ucode":"50746E9A4990A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/icniaGmw8xiboxib5xa1RSNvRDX1yVQTrcSqVOlJPibt0A6SM7EnFTHa6ib0YQKSUPqtx7wVksxZZXK4huUpCqrKjT1w/132","comment_is_top":false,"comment_ctime":1557648258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557648258","product_id":100017301,"comment_content":"1、对算法进行最好、最坏、平均、均摊时间复杂度分析分析的场景是：<br>     算法的时间复杂度在不同情况下呈现了量级的不同<br>     其中均摊时间复杂度的分析场景是：①算法大部分的时间复杂度都很小，只有极个别情况的时间复 <br>      杂度比较高。②而且这些操作之间有明显的时序关系<br>2、最好、最坏的时间复杂度分析很好理解<br>     对于平均时间复杂度，①把每种情况都考虑进去②把每种情况发生的概率也考虑进行，然后对N种（情况的时间复杂度*该种情况发生的概率 ）求和，再除以N种情况。<br>     对于摊还时间复杂度，把时间复杂度最高的情况摊还到大部分时间复杂度比较小的情况。<br><br>  思考题：最好：O(1)<br>                最坏：O(n)<br>               <br>               摊还： O(1)","like_count":0},{"had_liked":false,"id":93703,"user_name":"do it","can_delete":false,"product_type":"c1","uid":1309911,"ip_address":"","ucode":"E0753912E8F2AF","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/d7/b102034a.jpg","comment_is_top":false,"comment_ctime":1557563761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557563761","product_id":100017301,"comment_content":"个人小结<br>复杂度分析<br>最好情况时间复杂度(best case time complexity):在最理想的情况下，执行这段代码的时间复杂度。<br>最坏情况时间复杂度(wrost case time complexity):在最糟糕的情况下，执行这段代码的时间复杂度。<br>平均情况时间复杂度(average case time complexity):概率论中的加权平均值，也叫期望值。<br>均摊时间复杂度(amortized time complexity):通过摊还分析法进行分析，是一种特殊的平均情况时间复杂度。在满足2个条件(1、代码在大多数情况下是低级别复杂度，只有少数情况下是高级别复杂度；2、低级别复杂度和高级别复杂度的出现是具有规律性的)。一般情况均摊时间复杂度等于低级别复杂度。<br>思考题:<br>最好情况时间复杂度为O(1),最差情况时间复杂度为O(n),平均时间复杂度为O(1),均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":93468,"user_name":"Geek_cf29f0","can_delete":false,"product_type":"c1","uid":1337800,"ip_address":"","ucode":"F635968AE2656C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWpFdAQwTzBg70ib6QTQomfQV3Ak1CFQPXun20w2Kz3PCLtsV75nNrqBuDEvehtlCoTkyT3icNWnvO7nPMc1RFfg/132","comment_is_top":false,"comment_ctime":1557476198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557476198","product_id":100017301,"comment_content":"当n=0~9，复杂度为O(1)；当n=10，复杂度为O(n)；当n=11~19，复杂度为O(1)；当n=20，复杂度为O(20)。<br>最坏复杂度为O(2n)，最好复杂度为O(1)，均摊复杂度为O(1)，平均复杂度为1&#47;(n+1)+...+1&#47;(n+1)+n&#47;2n=O(1)","like_count":0},{"had_liked":false,"id":92554,"user_name":"蔡大少","can_delete":false,"product_type":"c1","uid":1014103,"ip_address":"","ucode":"46FB0BF4BFB75F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/57/59e6747a.jpg","comment_is_top":false,"comment_ctime":1557300664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557300664","product_id":100017301,"comment_content":"很多同学被具体的语句误导了，其实只需要用老师的方法，盯着一行耗时1单位来分析，其他都是无所谓的","like_count":0},{"had_liked":false,"id":92550,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1557299764,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1557299764","product_id":100017301,"comment_content":"最好O(1),最差O(n),均摊O(1)","like_count":0},{"had_liked":false,"id":91715,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1557099972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557099972","product_id":100017301,"comment_content":"第二遍，忘得真快<br><br>最坏复杂度O（10*2^n）— O（2^n）","like_count":0},{"had_liked":false,"id":91442,"user_name":"不一样的烟火","can_delete":false,"product_type":"c1","uid":1473251,"ip_address":"","ucode":"6E305F0EE90E8B","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/e3/145adba9.jpg","comment_is_top":false,"comment_ctime":1557039793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557039793","product_id":100017301,"comment_content":"最后那个问题均摊时间复杂度为logn吗<br>执行n次，发生了logn次的内存申请和复制操作，每个周期的均摊时间复杂度为O（1）","like_count":0},{"had_liked":false,"id":91437,"user_name":"不一样的烟火","can_delete":false,"product_type":"c1","uid":1473251,"ip_address":"","ucode":"6E305F0EE90E8B","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/e3/145adba9.jpg","comment_is_top":false,"comment_ctime":1557038624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557038624","product_id":100017301,"comment_content":"最后那个例子，copy到新的array之后是否要delete旧的array","like_count":0},{"had_liked":false,"id":91013,"user_name":"莫小鹏","can_delete":false,"product_type":"c1","uid":1158881,"ip_address":"","ucode":"0EE0654FD0FB85","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/e1/78701ecf.jpg","comment_is_top":false,"comment_ctime":1556787155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556787155","product_id":100017301,"comment_content":"课后思考的例子跟均摊时间复杂度提到的例子是类似的。用同样的方法得到的结论是O（1），复制的操作平摊到每一次添加的操作。","like_count":0},{"had_liked":false,"id":90787,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1556643550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556643550","product_id":100017301,"comment_content":"如果用上概率论的加权平均值，计算平均复杂度会更快。","like_count":0},{"had_liked":false,"id":90786,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1556643153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556643153","product_id":100017301,"comment_content":"学完这节课，我理解了最好，最坏，平均时间复杂度，还有特殊的评论时间复杂度：均摊时间复杂度","like_count":0},{"had_liked":false,"id":90739,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1556621274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556621274","product_id":100017301,"comment_content":"add函数第10次调用以后进入if条件中，只要超过len就会翻倍。之后复制给新数组，需要遍历一次。如果在范围内就直接添加。所以最好是O（1），最坏是O（log2），不知道分析的对不对，中间的遍历忽略了。","like_count":0},{"had_liked":false,"id":89217,"user_name":"不破楼兰终不还","can_delete":false,"product_type":"c1","uid":1145867,"ip_address":"","ucode":"F06EEF04552A90","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/0b/2b5e5da5.jpg","comment_is_top":false,"comment_ctime":1556109495,"is_pvip":false,"replies":[{"id":"31984","content":"也可以的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1556149111,"ip_address":"","comment_id":89217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556109495","product_id":100017301,"comment_content":"最好时间复杂度O(1),最坏时间复杂度O(n)，平均时间复杂度if代码块整体被执行的概率是1&#47;n,if代码块的时间复杂度是O(n),if代码块外的时间复杂度是O(1)执行概率约等于1，平均时间复杂度=1*1+1&#47;n*n=2=O(n)。不知这种粗略计算平均复杂度的方式是否可行☺","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448059,"discussion_content":"也可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556149111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88959,"user_name":"Song","can_delete":false,"product_type":"c1","uid":1001153,"ip_address":"","ucode":"7591E78D7D1311","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/c1/8dbc1cd8.jpg","comment_is_top":false,"comment_ctime":1556033191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556033191","product_id":100017301,"comment_content":"哈哈，感觉是种很玄的东西。","like_count":0},{"had_liked":false,"id":88738,"user_name":"战侠歌","can_delete":false,"product_type":"c1","uid":1036734,"ip_address":"","ucode":"F98AB71886141D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d1/be/5f74fcb2.jpg","comment_is_top":false,"comment_ctime":1555988637,"is_pvip":false,"replies":[{"id":"31848","content":"你理解错了 是n多次查询不同的值的概率","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1556062268,"ip_address":"","comment_id":88738,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555988637","product_id":100017301,"comment_content":"关于概率乘法法则运用的问题我有一个疑惑，概率乘法法则是用于独立事件的吧，而当数组第一次循环就找到对应值时，后面的第2 到 第n 次循环找到值亦或者没找到的事件不就不会再发生了嘛，这不是互斥事件嘛？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447886,"discussion_content":"你理解错了 是n多次查询不同的值的概率","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556062268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88360,"user_name":"Poppy","can_delete":false,"product_type":"c1","uid":1501505,"ip_address":"","ucode":"AF656A00521037","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/41/7cb2cf64.jpg","comment_is_top":false,"comment_ctime":1555910903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555910903","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":84468,"user_name":"Z","can_delete":false,"product_type":"c1","uid":1445977,"ip_address":"","ucode":"D4D2DEC65F9D38","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/59/17186068.jpg","comment_is_top":false,"comment_ctime":1554868115,"is_pvip":false,"replies":[{"id":"30473","content":"上下都是同阶的 所以除下来是0（1）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554939231,"ip_address":"","comment_id":84468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554868115","product_id":100017301,"comment_content":"2n&#47;(n+1) 去掉常数 不应该是 n&#47;(n+1)吗 怎么会变成1呢 大佬指点一下 为啥最后 是O(1)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446372,"discussion_content":"上下都是同阶的 所以除下来是0（1）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554939231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84466,"user_name":"Z","can_delete":false,"product_type":"c1","uid":1445977,"ip_address":"","ucode":"D4D2DEC65F9D38","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/59/17186068.jpg","comment_is_top":false,"comment_ctime":1554867935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554867935","product_id":100017301,"comment_content":"老师 (1+1+...+1+n)&#47;(n+1) = 2n&#47;(n+1) ;平均复杂度为O(1); 这里为什么n&#47;(n+1)可以化成1 而不是O(2n&#47;(n+1))","like_count":0},{"had_liked":false,"id":83891,"user_name":"yshnb!","can_delete":false,"product_type":"c1","uid":1488301,"ip_address":"","ucode":"E93A9132532492","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/ad/587a45dc.jpg","comment_is_top":false,"comment_ctime":1554730044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554730044","product_id":100017301,"comment_content":"我觉得平均时间复杂度和均摊时间复杂度是一回事，有同学说均摊是特殊的平均，可我觉得他们俩是完全可以划等号的。只不过是分析的方法不一样罢了，采用概率方法来计算，就是平均，采用摊还分析法来计算，就是均摊。","like_count":0},{"had_liked":false,"id":83888,"user_name":"yshnb!","can_delete":false,"product_type":"c1","uid":1488301,"ip_address":"","ucode":"E93A9132532492","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/ad/587a45dc.jpg","comment_is_top":false,"comment_ctime":1554729851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554729851","product_id":100017301,"comment_content":"最好O（1）最差O（n） 平均O（1）均摊O（1）","like_count":0},{"had_liked":false,"id":83029,"user_name":"hj_zack","can_delete":false,"product_type":"c1","uid":1181113,"ip_address":"","ucode":"53A11BAE0CEA2B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/NAcDfnQjZMSXE1ib2sAviaQFQHMsf7IJjTH73CaOic37R9QibdXNCNvzUGdqkIJYI05u3LnKmQRomqRRmMAhg9B1HQ/132","comment_is_top":false,"comment_ctime":1554376939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554376939","product_id":100017301,"comment_content":"1.最优时间复杂度：当i不大于等于len时，不进入判断，只执行20、21行代码，复杂度为O(1)<br>2.最坏时间复杂度，当i大于等于len时，进入判断，执行循环代码，复杂度为O(n)<br>3.平均时间复杂度计算：<br>在第1-n种情况时，i的值为0-n-1，都不进入判断，时间复杂度为O(1)，<br>当第n种情况时，时间复杂度为O(n)。<br>总共n+1种情况,1&#47;(n+1)+.......+1&#47;(n+1)+n&#47;(n+1)=2n&#47;(n+1)约等于O(1).<br>所以平均复杂度为O(1).<br>4.均摊时间复杂度，在1-n种情况时，时间复杂度为O(1),第n+1种情况时，时间复杂度为O(n),讲第n+1种情况的时间复杂度均摊到前n种情况，平均为O(1)，<br>所以均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":82337,"user_name":"fshaw","can_delete":false,"product_type":"c1","uid":1364921,"ip_address":"","ucode":"C4C6C377376AD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI1W3sPuNKJv1OEjhiblib1GEKiantwB3yxDJEVyE3FTSL8j6xvAcftxM2NWgOLY7ic7pewdkKdGMqwcQ/132","comment_is_top":false,"comment_ctime":1554187281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554187281","product_id":100017301,"comment_content":"加上概率后的平均时间复杂度:1*1&#47;2n + 2*1&#47;2n + 3*1&#47;2n 是啥意思呢","like_count":0},{"had_liked":false,"id":82252,"user_name":"上善若水","can_delete":false,"product_type":"c1","uid":1122544,"ip_address":"","ucode":"42D2C732E3E6EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/f0/84f3cbe0.jpg","comment_is_top":false,"comment_ctime":1554169096,"is_pvip":false,"replies":[{"id":"29878","content":"没直接关系","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554249426,"ip_address":"","comment_id":82252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554169096","product_id":100017301,"comment_content":"是不是因为循环引入了条件退出，才产生了最好最坏时间复杂度啊？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445524,"discussion_content":"没直接关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554249426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81784,"user_name":"六便士","can_delete":false,"product_type":"c1","uid":1237284,"ip_address":"","ucode":"E4778247F2F1CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/24/b2a680f2.jpg","comment_is_top":false,"comment_ctime":1554034746,"is_pvip":true,"replies":[{"id":"29787","content":"可以参考课程中讲解的例子 来推到下呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554162031,"ip_address":"","comment_id":81784,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554034746","product_id":100017301,"comment_content":"老师我有个地方不太懂，练习题为什么平均复杂度是O(1)，按均摊复杂度的想法我能理解，按照平均复杂度的想法我想不明白。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445341,"discussion_content":"可以参考课程中讲解的例子 来推到下呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554162031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81773,"user_name":"right-chen","can_delete":false,"product_type":"c1","uid":1435172,"ip_address":"","ucode":"E0E940E80E7A2D","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/24/30806a88.jpg","comment_is_top":false,"comment_ctime":1554031968,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554031968","product_id":100017301,"comment_content":"看评论前准备留言：add方法的时间复杂度为O(nlogn),但是概率逐渐减小，大部分执行复杂度为O(1)。均摊下来复杂度为O(1)。<br>看其他评论：add方法的复杂度不是O(nlogn)吗，n的数量越大，执行概率越小，但是执行后，复杂度是之前的2倍？<br>","like_count":0},{"had_liked":false,"id":81524,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1553935495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553935495","product_id":100017301,"comment_content":"最好时间复杂度，最坏时间复杂度，平均时间复杂度，均摊时间复杂度。<br>平均时间复杂度和均摊时间复杂度的区别：<br>平均时间复杂度，就是期望值，各个执行次数和概率相乘，然后累加得到<br>均摊时间复杂度，应用场景是，每次O(n)的执行，都会伴随着n次O(1)的执行，<br>引入了均摊分析的方法，将n次操作均摊到其他的n次操作上，时间复杂度就变成了O(1)。<br>均摊时间复杂度是一种特殊的平均时间复杂度算法。<br>","like_count":0},{"had_liked":false,"id":81263,"user_name":"takisan","can_delete":false,"product_type":"c1","uid":1263176,"ip_address":"","ucode":"E7892A8F48F875","user_header":"https://static001.geekbang.org/account/avatar/00/13/46/48/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1553844205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553844205","product_id":100017301,"comment_content":"总结<br><br>一、复杂度分析的4个概念<br>1.最坏情况时间复杂度：代码在最理想情况下执行的时间复杂度。<br>2.最好情况时间复杂度：代码在最坏情况下执行的时间复杂度。<br>3.平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。<br>4.均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。<br><br>二、为什么要引入这4个概念？<br>1.同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，更准确的描述代码的时间复杂度，所以引入这4个概念。<br>2.代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度。大多数情况下，是不需要区别分析它们的。<br><br>三、如何分析平均、均摊时间复杂度？<br>1.平均时间复杂度<br>代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。<br>2.均摊时间复杂度<br>两个条件满足时使用：1）代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；2）低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。","like_count":0},{"had_liked":false,"id":80548,"user_name":"菜头","can_delete":false,"product_type":"c1","uid":1456964,"ip_address":"","ucode":"C5E95519F9EA21","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/44/dd534c9b.jpg","comment_is_top":false,"comment_ctime":1553678873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553678873","product_id":100017301,"comment_content":"1 * 1&#47;2n + 2*（1&#47;2n）+3*（1&#47;2n）+.....n*（1&#47;2n）+n*（1&#47;2）<br>这个公式是如何得出来的？<br>如果 x 在数组的 i 位置，那么 for 循环需要遍历 i 次<br>数据出现在 0～n-1 这 n 个位置的概率也是一样的，都是 1&#47;2n<br>数据但是 0 ~n-1 需要被遍历 0~n次<br>举个例子：<br>数组在位置 1 的情况下需要遍历 1 次，每次的概率是 1&#47;2n<br>.....<br>数据在位置 n 的情况下需要遍历 n 次，每次的概率也是 1&#47;2n<br>所以可得公式<br>","like_count":0},{"had_liked":false,"id":80510,"user_name":"鱼竿","can_delete":false,"product_type":"c1","uid":1398016,"ip_address":"","ucode":"C2E851511CED05","user_header":"https://static001.geekbang.org/account/avatar/00/15/55/00/245bf3cb.jpg","comment_is_top":false,"comment_ctime":1553672610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553672610","product_id":100017301,"comment_content":"一杯茶，一包烟，一道概率算一天。","like_count":0},{"had_liked":false,"id":79397,"user_name":"CalanceHao","can_delete":false,"product_type":"c1","uid":1401137,"ip_address":"","ucode":"068B4AC4D1D402","user_header":"https://static001.geekbang.org/account/avatar/00/15/61/31/211ac1a9.jpg","comment_is_top":false,"comment_ctime":1553475592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553475592","product_id":100017301,"comment_content":"=Insert+Copy<br>=n&#47;n*O(1)+1&#47;n*O(n)<br>=O(1)","like_count":0},{"had_liked":false,"id":79155,"user_name":"tao.py","can_delete":false,"product_type":"c1","uid":1473336,"ip_address":"","ucode":"27229157D1BB38","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/38/9dfc2aad.jpg","comment_is_top":false,"comment_ctime":1553390052,"is_pvip":false,"replies":[{"id":"29097","content":"有的，但是大部分情况下概率都相等","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553562882,"ip_address":"","comment_id":79155,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553390052","product_id":100017301,"comment_content":"老师请假一下，<br>在find的例子中，我们先假设了在数组中与不在数组中的概率都为 1&#47;2... 才有了后面通过概率计算平均时间复杂度公式。<br>也就是说，必须要先弄清楚每种情况的概率，才能计算平均时间复杂度。<br>现实场景下是否会有概率不可知的情况呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444372,"discussion_content":"有的，但是大部分情况下概率都相等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553562882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78630,"user_name":"Tomcat","can_delete":false,"product_type":"c1","uid":1346364,"ip_address":"","ucode":"B270CEED693256","user_header":"https://static001.geekbang.org/account/avatar/00/14/8b/3c/0462eca7.jpg","comment_is_top":false,"comment_ctime":1553185905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553185905","product_id":100017301,"comment_content":"都是O(1)因为，len是一个常量，其他都是扯淡Σ(-`Д´-ﾉ；)ﾉ","like_count":0},{"had_liked":false,"id":78103,"user_name":"清茶薄暮","can_delete":false,"product_type":"c1","uid":1307828,"ip_address":"","ucode":"8A3980D4878074","user_header":"https://static001.geekbang.org/account/avatar/00/13/f4/b4/3ea7c168.jpg","comment_is_top":false,"comment_ctime":1553071175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553071175","product_id":100017301,"comment_content":"老师在解释均摊时间复杂度的例子中说，数组满了之后，遍历求和，并清空数组。是怎么清空的呢","like_count":0},{"had_liked":false,"id":78089,"user_name":"立冬","can_delete":false,"product_type":"c1","uid":1467313,"ip_address":"","ucode":"287FA88D933FD5","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/b1/a6103703.jpg","comment_is_top":false,"comment_ctime":1553069567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553069567","product_id":100017301,"comment_content":"最好不用扩容O(1) ，最坏时O(n)，最坏的固定出现用平摊是O(1) 平摊的理解是最坏的一次让好的平摊 平均是概率差不多 每种情况的次数相加取平均","like_count":0},{"had_liked":false,"id":77757,"user_name":"108度","can_delete":false,"product_type":"c1","uid":1015008,"ip_address":"","ucode":"085C8A8278C7D5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/e0/acbca24e.jpg","comment_is_top":false,"comment_ctime":1552994080,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1552994080","product_id":100017301,"comment_content":"均摊分析概念终于搞懂了，这是我看了三遍之后。还是王老师说得好，慢慢来，有时候沉淀一下再回过来看，就悟了😃","like_count":0},{"had_liked":false,"id":77737,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1181486,"ip_address":"","ucode":"E82C58AF2604ED","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/2e/878d3c92.jpg","comment_is_top":false,"comment_ctime":1552989325,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1552989325","product_id":100017301,"comment_content":"我会说我算那个(3n+1)&#47;4 算了半个小时吗？数学知识全丢了。不算出来不舒服。。","like_count":0,"discussions":[{"author":{"id":1690197,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/55/9e3ee1c1.jpg","nickname":"duan","note":"","ucode":"BC104D4D66C511","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24835,"discussion_content":"尴尬，还是没有算出来，求教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570281920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77541,"user_name":"莫问流年","can_delete":false,"product_type":"c1","uid":1249663,"ip_address":"","ucode":"23140E031AED4B","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/7f/80d56c1c.jpg","comment_is_top":false,"comment_ctime":1552960964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552960964","product_id":100017301,"comment_content":"课后思考题答案：<br>最好的情况下，添加元素前数组未满，不需要数据的扩容，因此最好情况时间复杂度为O(1)。最坏的情况下，添加元素前数组已满，需要进行数组的扩容，扩容时执行次数最多的数据搬移操作时间复杂度为O(n)，因此最坏时间复杂度为O(n)。平均情况下，加权时间复杂度为O(1)。由于该算法的时间复杂度随执行次数，呈现若干次低复杂度O(1)伴随一次高复杂度O(n)的变化规律，可以采用摊还分析法得到算法的论坛时间复杂度为O(1)，与最好情况时间复杂度相同。","like_count":0},{"had_liked":false,"id":77518,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1552958878,"is_pvip":false,"replies":[{"id":"28518","content":"n=2的时候，int[] array 不应该是new int[2]吗？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553133265,"ip_address":"","comment_id":77518,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552958878","product_id":100017301,"comment_content":"老师您好，老师您好，inset方法假设，n=2.则int[] array = new int[1]，这时候多次调用inset方法则会报java.lang.ArrayIndexOutOfBoundsException数组脚标越界的异常的，请老师查看！接这条，当n=1的时候，insert函数在插入大于等于2条的时候会报异常，当n&gt;2的时候，您说的清空数组，也就是覆盖之前的值才成立的","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443755,"discussion_content":"n=2的时候，int[] array 不应该是new int[2]吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553133265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77486,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1552955853,"is_pvip":false,"replies":[{"id":"28288","content":"int[1]不对吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552958368,"ip_address":"","comment_id":77486,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552955853","product_id":100017301,"comment_content":"老师您好，inset方法假设，n=2.则int[] array = new int[1]，这时候多次调用inset方法则会报java.lang.ArrayIndexOutOfBoundsException数组脚标越界的异常的，请老师查看！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443743,"discussion_content":"int[1]不对吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552958368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77306,"user_name":"gushitong","can_delete":false,"product_type":"c1","uid":1033812,"ip_address":"","ucode":"FB266646A31F4B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c6/54/fb1e84a3.jpg","comment_is_top":false,"comment_ctime":1552903804,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1552903804","product_id":100017301,"comment_content":"在这里指出一个错误，在「3. 平均情况分析」中，最后一步「 1*p + 2*p+ ▪▪▪ + len*p + len * p = O(1) 」错误，正确的是「 1*p + 1*p+ ▪▪▪ + 1*p + 1 * p = O(1) 」，我说按照原答案，怎么做都不对内～，把我顶上去吧～<br><br>下面是照抄的答案：<br>看了大家的留言总结的很好，自己把练习题的答案整理了一下与大家分享：<br>1. 最好情况时间复杂度为 O(1)<br>2.最坏情况分析： <br>最坏情况代码执行的次数跟每次数组的长度有关<br>第1次调用insert的执行的次数为 n ,<br>第2次调用insert的执行的次数为 2n ,<br>第3次调用insert的执行的次数为 2^2 * n <br>第k次调用insert的执行的次数为 2^(k-1) * n <br>最坏时间复杂度为 O(n)。<br>3. 平均情况分析<br>当每次遇到最坏情况时数组会进行2倍扩容，原数组被导入新数组，虽然数组的长度变大了，但是插入操作落在的区间的长度是一样的，分别是0~len-1, len~(2len-1),....；<br>插入的情况仍是len+1种：0~len-1和插满之后的O(len)；所以每次插入的概率是：p= 1&#47;len+1，<br>最后求出加权平均时间复杂度为 1*p + 2*p+ ▪▪▪ + len*p + len * p = O(1) ; <br>4. 均摊时间复杂度 O(1)<br>而均摊复杂度由于每次O(len)的出现都跟着len次O(1)，是前后连贯的，因而将O(len)平摊到前len次上，得出平摊复杂度是O(1)","like_count":0},{"had_liked":false,"id":77181,"user_name":"大大","can_delete":false,"product_type":"c1","uid":1375158,"ip_address":"","ucode":"FE399751AFA7E9","user_header":"https://static001.geekbang.org/account/avatar/00/14/fb/b6/2b001707.jpg","comment_is_top":false,"comment_ctime":1552877946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552877946","product_id":100017301,"comment_content":"O（1）复杂度","like_count":0},{"had_liked":false,"id":76944,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1552777460,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1552777460","product_id":100017301,"comment_content":"golang slice就是这种办法 分配内存 ","like_count":0},{"had_liked":false,"id":76290,"user_name":"云计算小菜鸟","can_delete":false,"product_type":"c1","uid":1146734,"ip_address":"","ucode":"D32CA551ACCF56","user_header":"https://static001.geekbang.org/account/avatar/00/11/7f/6e/863e4b2a.jpg","comment_is_top":false,"comment_ctime":1552568167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552568167","product_id":100017301,"comment_content":"出现O(1)的次数远大于出现O(n)出现的次数，那么平均平摊时间复杂度就是O(1)。。。。总结得超棒！谢谢啦！","like_count":0},{"had_liked":false,"id":76288,"user_name":"云计算小菜鸟","can_delete":false,"product_type":"c1","uid":1146734,"ip_address":"","ucode":"D32CA551ACCF56","user_header":"https://static001.geekbang.org/account/avatar/00/11/7f/6e/863e4b2a.jpg","comment_is_top":false,"comment_ctime":1552568086,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552568086","product_id":100017301,"comment_content":"出现O(1)的次数远大于出现O(n)出现的次数，那么平均平摊时间复杂度就是O(1)。。。。总结得超棒！谢谢！","like_count":0},{"had_liked":false,"id":75909,"user_name":"南桥畂翊","can_delete":false,"product_type":"c1","uid":1003956,"ip_address":"","ucode":"A97C49A6309A42","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/b4/0d402ae8.jpg","comment_is_top":false,"comment_ctime":1552490396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552490396","product_id":100017301,"comment_content":"均摊时间复杂度中提到的“这 n+1 种情况发生的概率一样，都是 1&#47;(n+1)。”，这句话不对吧。只有第一次扩容时有n+1种情况（count为0、1、2、3、4、...、n-1、扩容），后续的操作只有n-1种情况呀（count为2、3、4、5、...、n-1、扩容）","like_count":0},{"had_liked":false,"id":75842,"user_name":"E.L","can_delete":false,"product_type":"c1","uid":1127780,"ip_address":"","ucode":"A49725D222257A","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/64/af491f09.jpg","comment_is_top":false,"comment_ctime":1552480199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552480199","product_id":100017301,"comment_content":"练习题最好是O(1)，最差是O(n), 均摊是O(1)。","like_count":0},{"had_liked":false,"id":75471,"user_name":"ahnselina","can_delete":false,"product_type":"c1","uid":1100888,"ip_address":"","ucode":"EE3B18BB9B7C11","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/58/c593587c.jpg","comment_is_top":false,"comment_ctime":1552402105,"is_pvip":true,"replies":[{"id":"27712","content":"不加的话，就是指最坏时间复杂度。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552531851,"ip_address":"","comment_id":75471,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552402105","product_id":100017301,"comment_content":"有个疑问，平时我们说的时间复杂度，并没有加最差最好等词的限制，那通常是指哪个时间复杂度呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442905,"discussion_content":"不加的话，就是指最坏时间复杂度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552531851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75438,"user_name":"说说看","can_delete":false,"product_type":"c1","uid":1439790,"ip_address":"","ucode":"AA893FE2700785","user_header":"https://static001.geekbang.org/account/avatar/00/15/f8/2e/c5cb4a53.jpg","comment_is_top":false,"comment_ctime":1552397759,"is_pvip":false,"replies":[{"id":"27866","content":"不对。我们重点分析的是均摊时间复杂度，也就是，多次调用函数，平均下来的时间复杂度。你可以类比我文章中的均摊复杂度分析的例子，来分析。<br><br>在你的分析中，n&gt;len的时候，时间复杂度并不是log(n&#47;len)。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552615522,"ip_address":"","comment_id":75438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552397759","product_id":100017301,"comment_content":"老师，有个问题想困扰着我，最后的课后分析题，这样分析可不可以<br>数组长度为len，要插入n个数<br>当n&lt;len 时，时间复杂度为:O(1)<br>当n&gt;len 时，时间复杂度为:log(n&#47;len)<br>分析：假设最后扩容为x<br>1+1....2^0*len + 1 + .... + 2^1*len + 1 + .... 2^x*len + 1 + ... + 1 = n<br>去掉常量：len + 2^x*len = n  =&gt; len*(2^x + 1) = n =&gt; x = log(n&#47;len -1)<br>x =  log(n&#47;len)<br>即当n&gt;len时时间复杂度为：x = log(n&#47;len)<br>不知道这样分析可以吗？如果不可以为什么呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442893,"discussion_content":"不对。我们重点分析的是均摊时间复杂度，也就是，多次调用函数，平均下来的时间复杂度。你可以类比我文章中的均摊复杂度分析的例子，来分析。\n\n在你的分析中，n&amp;gt;len的时候，时间复杂度并不是log(n/len)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552615522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74327,"user_name":"Scarf","can_delete":false,"product_type":"c1","uid":1021792,"ip_address":"","ucode":"3EDD87BD6354D5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/60/873cd557.jpg","comment_is_top":false,"comment_ctime":1552190443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552190443","product_id":100017301,"comment_content":"老师，第一个平均复杂度的例子的值不应该是n*(n+2)&#47;2*(n+1)吗，为什么是(n+3)?","like_count":0},{"had_liked":false,"id":74071,"user_name":"张珂","can_delete":false,"product_type":"c1","uid":1451555,"ip_address":"","ucode":"63D5760B253A59","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/23/e99ff49f.jpg","comment_is_top":false,"comment_ctime":1552098077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552098077","product_id":100017301,"comment_content":"这个题跟insert方法感觉是一样的，最好是数组未满的情况，即O（1）。最坏是数组满了的情况，即O（n）。平均和均摊则是出现n个1之后就会出现1个n，即O（1）。","like_count":0},{"had_liked":false,"id":74069,"user_name":"张珂","can_delete":false,"product_type":"c1","uid":1451555,"ip_address":"","ucode":"63D5760B253A59","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/23/e99ff49f.jpg","comment_is_top":false,"comment_ctime":1552097783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552097783","product_id":100017301,"comment_content":"这个题跟insert方法感觉是一样的，最好是数组未满的情况，即O（1）。最坏是数组满了的情况，即O（n）。平均也是","like_count":0},{"had_liked":false,"id":73945,"user_name":"常银玲","can_delete":false,"product_type":"c1","uid":1252109,"ip_address":"","ucode":"894A34D9AD8942","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/0d/9c3e2241.jpg","comment_is_top":false,"comment_ctime":1552040080,"is_pvip":false,"replies":[{"id":"27233","content":"讲到排序的时候会分析的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552274334,"ip_address":"","comment_id":73945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552040080","product_id":100017301,"comment_content":"@老师，能分析一下快速排序的时间复杂度吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442353,"discussion_content":"讲到排序的时候会分析的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552274334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73444,"user_name":"春和景明","can_delete":false,"product_type":"c1","uid":1272482,"ip_address":"","ucode":"A27970A276ECD6","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/a2/f9efd9dc.jpg","comment_is_top":false,"comment_ctime":1551885103,"is_pvip":true,"replies":[{"id":"26784","content":"看看留言吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551923846,"ip_address":"","comment_id":73444,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551885103","product_id":100017301,"comment_content":" &#47;&#47; array 表示一个长度为 n 的数组<br> &#47;&#47; 代码中的 array.length 就等于 n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br><br>    array[count] = val;<br>    ++count;<br> }<br>没看懂数组是怎么清空的","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442090,"discussion_content":"看看留言吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551923846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73256,"user_name":"little fires","can_delete":false,"product_type":"c1","uid":1298869,"ip_address":"","ucode":"94D0A6ABEB8A01","user_header":"https://static001.geekbang.org/account/avatar/00/13/d1/b5/bafeb199.jpg","comment_is_top":false,"comment_ctime":1551845799,"is_pvip":false,"replies":[{"id":"26794","content":"空间扩大两倍之后，并没有情况的意思。就是把原来的数据搬到更大的看空间上了。概率不需要分析的，这里重点是分析均摊时间复杂度，你可以类比课程里讲的那个例子来分析。注意，add函数会被调用很多次，我们希望得到均摊情况下，add函数调用的复杂度。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551924443,"ip_address":"","comment_id":73256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551845799","product_id":100017301,"comment_content":"老师，课后题数组空间扩大两倍之后，数据是清空了从array[0]开始插入数据，还是从array[len&#47;2]开始插入数据？我理解的是后者，每个插入的概率为啥不是2&#47;n呢？我看大家都是1&#47;n+1，我到底哪儿理解错了啊😂","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441989,"discussion_content":"空间扩大两倍之后，并没有情况的意思。就是把原来的数据搬到更大的看空间上了。概率不需要分析的，这里重点是分析均摊时间复杂度，你可以类比课程里讲的那个例子来分析。注意，add函数会被调用很多次，我们希望得到均摊情况下，add函数调用的复杂度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551924443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72993,"user_name":"天空只能仰望？","can_delete":false,"product_type":"c1","uid":1102357,"ip_address":"","ucode":"D87BF6A57DAB42","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/15/4d43d05a.jpg","comment_is_top":false,"comment_ctime":1551772957,"is_pvip":false,"replies":[{"id":"26783","content":"👍，加油，有不懂的就在这里问我，最喜欢你这样的上进的小伙伴了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551923800,"ip_address":"","comment_id":72993,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551772957","product_id":100017301,"comment_content":"二刷开始喽，要边学边练了，加油💪","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441866,"discussion_content":"👍，加油，有不懂的就在这里问我，最喜欢你这样的上进的小伙伴了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551923800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72440,"user_name":"Lawrence","can_delete":false,"product_type":"c1","uid":1246473,"ip_address":"","ucode":"7C7B3AA2B0D305","user_header":"https://static001.geekbang.org/account/avatar/00/13/05/09/dd3f1ca3.jpg","comment_is_top":false,"comment_ctime":1551625927,"is_pvip":false,"replies":[{"id":"26266","content":"不用学概率论的，你只需要了解一下加权平均值这个概念就可以了。一般都不需要加权计算的，因为每个情况出现的概率都一样。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551665317,"ip_address":"","comment_id":72440,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551625927","product_id":100017301,"comment_content":"老师你好，请问平均复杂度一定要概率加权吗？复杂一点的概率学我不会，是否有再自学概率学的必要呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441589,"discussion_content":"不用学概率论的，你只需要了解一下加权平均值这个概念就可以了。一般都不需要加权计算的，因为每个情况出现的概率都一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551665317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72388,"user_name":"lpf32","can_delete":false,"product_type":"c1","uid":1039717,"ip_address":"","ucode":"E1B127FDFF74BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/65/3b4a2930.jpg","comment_is_top":false,"comment_ctime":1551605212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551605212","product_id":100017301,"comment_content":"最好，最坏，平均，均摊四种时间复杂度分析的方法。最好目的是让算法与数据情况尽量靠近的方向。最坏是你要考虑的最差情况，是否在你的容忍范围内。平均能比较精确的表示算法的时间复杂度。","like_count":0},{"had_liked":false,"id":71800,"user_name":"郭建伟","can_delete":false,"product_type":"c1","uid":1370608,"ip_address":"","ucode":"816487A84A2FDA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ4QCWqGgMN4iauCdWAcaiaowSr4u9Omgf5f6JLjTtBrxzN4JlMXaERd8sfEEmicgsxJA8f0tgFIHKGw/132","comment_is_top":false,"comment_ctime":1551437497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551437497","product_id":100017301,"comment_content":"最好时间复杂度是O(1)，因为数组空间够，只需要添加一个数据即可。<br>最坏时间复杂度是O(n)，因为数组空间不够，需要进行一遍数组复制操作，然后再添加数据。<br>均摊时间复杂度是O(1)，因为大部分情况是数组空间够的情况，数组空间不够是特殊情况，将O(n)复杂度均摊，则为O(1)。","like_count":0},{"had_liked":false,"id":71735,"user_name":"马源","can_delete":false,"product_type":"c1","uid":1183937,"ip_address":"","ucode":"9B12311D6BA5A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/c1/18b41ced.jpg","comment_is_top":false,"comment_ctime":1551423369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551423369","product_id":100017301,"comment_content":"课后题:<br>时间复杂度<br>最好情况:  O(1)<br><br>最坏情况:  O(n)<br><br>平均情况: 通过观察发现，数组每次都扩展为原来的2倍，这是一个指数增长，如果扩展次数很大时，只需要关注最后一次扩展即可，则复杂度为O(1)<br><br>均摊分析:  个别情况复杂度为O(n),且规律出现(指数规律), 从而估计复杂度为O(1)","like_count":0},{"had_liked":false,"id":71633,"user_name":"Mollmy","can_delete":false,"product_type":"c1","uid":1240282,"ip_address":"","ucode":"8FB950A8B2C804","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/da/903dc59d.jpg","comment_is_top":false,"comment_ctime":1551404286,"is_pvip":false,"replies":[{"id":"25740","content":"这个跟概率论有关系，插入的位置可以是任意的，0、1、2.。。。插入到每个位置的概率都是一样（假设一样哈，这个也很难说，要看具体场景），所以不能简单的非黑即白","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551405517,"ip_address":"","comment_id":71633,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551404286","product_id":100017301,"comment_content":"老师，为什么在分析insert的平均复杂度的时候认为插入到不同的位置属于不同的情况，为什么不能是一共有2种情况，数组未满和数组已满，各占1&#47;2？数组未满只需执行1次，数组已满执行n次。希望老师能回复一下唉，这个问题想了两天了没明白。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441244,"discussion_content":"这个跟概率论有关系，插入的位置可以是任意的，0、1、2.。。。插入到每个位置的概率都是一样（假设一样哈，这个也很难说，要看具体场景），所以不能简单的非黑即白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551405517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71318,"user_name":"peterkalven","can_delete":false,"product_type":"c1","uid":1274118,"ip_address":"","ucode":"74AF1D2A01E563","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/06/e17159a9.jpg","comment_is_top":false,"comment_ctime":1551319403,"is_pvip":false,"replies":[{"id":"25742","content":"不停的调用insert函数，往数组中添加数据，然后分析一组insert调用的平均时间复杂度","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551405726,"ip_address":"","comment_id":71318,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551319403","product_id":100017301,"comment_content":"感觉insert那个例子有问题。<br>count已经给了初始值0，所以只要array.length不等于0，if判断语句就直接跳过了。只会执行16、17行代码。<br>请老师答疑解惑。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441107,"discussion_content":"不停的调用insert函数，往数组中添加数据，然后分析一组insert调用的平均时间复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551405726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70853,"user_name":"亮","can_delete":false,"product_type":"c1","uid":1439470,"ip_address":"","ucode":"67D527AACEB8D5","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/ee/7b22a3c8.jpg","comment_is_top":false,"comment_ctime":1551194313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551194313","product_id":100017301,"comment_content":"最好时间复杂度就像大学遇到真爱，毕业就结婚，最坏时间复杂度就是打一辈子光棍。平均时间复杂度是某一具体数O（1），均摊时间复杂度是一种特殊的平均时间复杂度，就酱紫！","like_count":0},{"had_liked":false,"id":70024,"user_name":"右耳听海","can_delete":false,"product_type":"c1","uid":1022011,"ip_address":"","ucode":"E0B9F1083F4F98","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/3b/5af90c80.jpg","comment_is_top":false,"comment_ctime":1550943984,"is_pvip":false,"replies":[{"id":"25050","content":"分子最大量级是n^2，分母最大量级是n。当n趋于无穷大的时候，分子、分母相除的结果，趋近于n","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551060807,"ip_address":"","comment_id":70024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550943984","product_id":100017301,"comment_content":"想请问老师n(n+3)&#47;2(n+1)化简后的时间复杂度是O(n)是怎么化简的，我化简后是(n&#47;2)-1-(1&#47;(n+1)),分母n+1是当他趋于无穷大时≈0来简化的吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440403,"discussion_content":"分子最大量级是n^2，分母最大量级是n。当n趋于无穷大的时候，分子、分母相除的结果，趋近于n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551060807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69877,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1550894857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550894857","product_id":100017301,"comment_content":"练习题凭感觉来最好O(1)，最差O(n),平均分摊到前n-1次的话就是O(1)","like_count":0},{"had_liked":false,"id":69360,"user_name":"LEO","can_delete":false,"product_type":"c1","uid":1396809,"ip_address":"","ucode":"4268DB35C3F3E9","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/49/898cb635.jpg","comment_is_top":false,"comment_ctime":1550725135,"is_pvip":false,"replies":[{"id":"24821","content":"是的。count=1就表示隐式清空了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550832048,"ip_address":"","comment_id":69360,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550725135","product_id":100017301,"comment_content":"老师，文章里的“当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。”这句话，代码的意思不是在for循环执行完之后，就将sum值赋给array［0］的吗？清空这部分（在评论里您说的是count=1）是在赋值之后才发生的吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440081,"discussion_content":"是的。count=1就表示隐式清空了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550832048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69191,"user_name":"Mirss.zhao","can_delete":false,"product_type":"c1","uid":1330632,"ip_address":"","ucode":"4A8F20B1A9D142","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTItudDLPfbZabQLjk1NE8NSibQocdRy88rerQdxHFKx4KzUyaEnSLPbszcKAaPX8NgG3sHbZXib41aQ/132","comment_is_top":false,"comment_ctime":1550675247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550675247","product_id":100017301,"comment_content":"刚开始没有明白为什么find函数是：1*（1&#47;2n）+ 2*(1&#47;2n) + 3*(1&#47;2n) + ....+ n*(1&#47;2n) + n*(1&#47;2)；<br>而insert函数确是1*(1&#47;n+1) + 1*(1&#47;n+1) + ...+n*(n+1) 都是1来乘以概率，后来仔细看了一边是因为find函数中，假如n=1则时间复杂度为o(1),n=2 需要循环2次时间复杂度为o(2) ,n=3需要循环3次时间复杂度为 o(3)，....n=n 需要循环n次时间复杂度为o(n)，所以是1、2、3..n来乘以概率。insert中的时间复杂度都是o(1),所以都是1来乘以概率","like_count":0},{"had_liked":false,"id":68310,"user_name":"沃野伏地","can_delete":false,"product_type":"c1","uid":1256735,"ip_address":"","ucode":"E681344BBE441F","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/1f/8d53c785.jpg","comment_is_top":false,"comment_ctime":1550481244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550481244","product_id":100017301,"comment_content":"当数组没有存满时间复杂度就是 O(1)；当数据存满的时候，给数组多分配一倍的数组，时间复杂度就是 O(len)，平摊时间复杂度O(1）","like_count":0},{"had_liked":false,"id":67849,"user_name":"Σ","can_delete":false,"product_type":"c1","uid":1136774,"ip_address":"","ucode":"F1F0DB4ACAE4C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/86/8fce652a.jpg","comment_is_top":false,"comment_ctime":1550298099,"is_pvip":false,"replies":[{"id":"25066","content":"差不多的。就是把极端情况，均摊到大部分情况。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551061904,"ip_address":"","comment_id":67849,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550298099","product_id":100017301,"comment_content":"摊还复杂度分析就是排除较少数的极端情况后，对剩余情况做平均复杂度分析。这样的说法对吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439399,"discussion_content":"差不多的。就是把极端情况，均摊到大部分情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551061904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67608,"user_name":"阿信","can_delete":false,"product_type":"c1","uid":1389604,"ip_address":"","ucode":"50616ED68A5B40","user_header":"https://static001.geekbang.org/account/avatar/00/15/34/24/34ca1d23.jpg","comment_is_top":false,"comment_ctime":1550208172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550208172","product_id":100017301,"comment_content":"最好O(1)，最差O(n)，平均O(1)，均摊O(1)","like_count":0},{"had_liked":false,"id":66558,"user_name":"小胖","can_delete":false,"product_type":"c1","uid":1022958,"ip_address":"","ucode":"1B8D884D254070","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/ee/8950c240.jpg","comment_is_top":false,"comment_ctime":1549959017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549959017","product_id":100017301,"comment_content":"最好情况时间复杂度O(1)<br>最坏情况时间复杂度O(n)<br>均摊时间复杂度O(1)","like_count":0},{"had_liked":false,"id":65839,"user_name":"NO.9","can_delete":false,"product_type":"c1","uid":1336970,"ip_address":"","ucode":"B92F14B493406F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/fUDCLLob6DFS8kZcMUfxOc4qQHeQfW4rIMK5Ty2u2AqLemcdhVRw7byx85HrVicSvy5AiabE0YGMj5gVt8ibgrusA/132","comment_is_top":false,"comment_ctime":1549695757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549695757","product_id":100017301,"comment_content":"只有我说int[] array_new?","like_count":0},{"had_liked":false,"id":65242,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1549158312,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1549158312","product_id":100017301,"comment_content":"复杂度分类？<br>最好、最坏、平均、均摊时间复杂度（均摊时间复杂度就是一种特殊的平均时间复杂度）<br>均摊时间复杂度：将复杂度高的均摊在复杂度低的操作上。<br><br>为什么要提出这么多复杂度分类呢？<br>能让我们可以更加全面的表示一段代码的执行效率。<br><br>课后思考<br>最好O(1)，最坏O(N)，平均O(1)，均摊O(1)","like_count":0},{"had_liked":false,"id":65170,"user_name":"Pre-Y","can_delete":false,"product_type":"c1","uid":1396900,"ip_address":"","ucode":"A13D13A37F3ABC","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/a4/8d2e454b.jpg","comment_is_top":false,"comment_ctime":1549086242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549086242","product_id":100017301,"comment_content":"最好O（1），即数组还有空余时的操作*n<br>最坏O（n），恰好插入时数组没有空余*1<br>平均和均摊都是O（1）","like_count":0},{"had_liked":false,"id":64915,"user_name":"a檬檬檬檬奇","can_delete":false,"product_type":"c1","uid":1396692,"ip_address":"","ucode":"802160A94BE924","user_header":"https://static001.geekbang.org/account/avatar/00/15/4f/d4/6b31cfc3.jpg","comment_is_top":false,"comment_ctime":1548956430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548956430","product_id":100017301,"comment_content":"一个O(n)后跟n-1个O(1)，摊分后是O(1)，如果换成一个O(n²)后跟n-1个O(1)呢？","like_count":0},{"had_liked":false,"id":64898,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1548944987,"is_pvip":false,"replies":[{"id":"24304","content":"你们理解的都没错，理论上平均时间复杂度是都要加权计算的，只不过概率一样的情况下，加不加权，结果都一样。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550543124,"ip_address":"","comment_id":64898,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548944987","product_id":100017301,"comment_content":"我和我朋友针对一个问题争论不休：就是平均时间复杂度何时加权何时不加权。请问老师抛开均摊时间复杂度，何时加权何时不加权的依据是什么呢？比如说加权引入的时候，会发现find概率不一样，所以要加权。那是否可以反着推回去：当概率一样的时候，就可以不加权，比如insert的位置的概率都是一样的，就可以不加权。我认为概率一样的时候，不加权。我朋友认为要加权，请问老师哪种说法对呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438225,"discussion_content":"你们理解的都没错，理论上平均时间复杂度是都要加权计算的，只不过概率一样的情况下，加不加权，结果都一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550543124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64486,"user_name":"颇忒妥","can_delete":false,"product_type":"c1","uid":1026448,"ip_address":"","ucode":"AA86AD1049BC2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","comment_is_top":false,"comment_ctime":1548811307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548811307","product_id":100017301,"comment_content":"对于平均时间复杂度有一点疑问。查找变量x在n长度数组里的时候，总共有n + 1种情况，即n种在数组里的情况 + 1种不在数组里的情况，那么每种情况发生的概率不就是1 &#47; (n + 1)吗？那么用 1 &#47; (n + 1) + 2 &#47; (n + 1) + ... + n &#47; (n + 1) + n &#47; (n + 1)  这个公式（也就是文中第一个公式）为何不行呢？<br>在解释第二个公式的时候提到“假设在数组中与不在数组中的概率都是 1 &#47; 2”，是如何做出这样的假设呢？是因为考虑到x是全实数集合而数组是有限实数集合所以才做出这样的假设吗？<br>PS. 高中数学都还给老师了，问题描述可能不是很准确，希望没有影响老师理解上述问题。","like_count":0},{"had_liked":false,"id":64368,"user_name":"hello world.！","can_delete":false,"product_type":"c1","uid":1312796,"ip_address":"","ucode":"C8CC3939A62F0B","user_header":"https://static001.geekbang.org/account/avatar/00/14/08/1c/5d5d7045.jpg","comment_is_top":false,"comment_ctime":1548755196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548755196","product_id":100017301,"comment_content":"O(1) ,  只取最大规模得出。","like_count":0},{"had_liked":false,"id":64197,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1548692807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548692807","product_id":100017301,"comment_content":"平摊分析就是执行完一次O（n）后，会执行多少次O（1）操作。平摊看的是频域，频域中大部都是峰谷，少部分的峰顶，那么平摊就O（1）","like_count":0},{"had_liked":false,"id":63318,"user_name":"卡洛梅特","can_delete":false,"product_type":"c1","uid":1234998,"ip_address":"","ucode":"A9997083BF684A","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/36/badf4003.jpg","comment_is_top":false,"comment_ctime":1548321172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548321172","product_id":100017301,"comment_content":"第一个BB啥，老师都说没人会怎么写了，还在这里夜郎自大，redis源码看过没，为啥他需要两个数组实现扩增和复制啊","like_count":0},{"had_liked":false,"id":62988,"user_name":"Murphy","can_delete":false,"product_type":"c1","uid":1147233,"ip_address":"","ucode":"79DA803FD6CFCF","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/61/41ae63f7.jpg","comment_is_top":false,"comment_ctime":1548221793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548221793","product_id":100017301,"comment_content":"思考题<br>最好时间情况复杂度 O(1)<br>最坏时间情况复杂度 O(n)<br>均摊时间复杂度 O(1)<br><br>平均时间复杂度与均摊时间复杂度较容易混淆，之间的区别是 ：<br>平均时间复杂度是一个数据进行平均的计算过程产生的结果<br>均摊时间复杂度是平均时间复杂度一个较极端的情况，最好与最坏时间情况复杂度之间进行一个“平摊”，把多的那方往少的那方进行一个补足产生的结果","like_count":0},{"had_liked":false,"id":62813,"user_name":"A-Mars","can_delete":false,"product_type":"c1","uid":1058327,"ip_address":"","ucode":"C037EC9E022B97","user_header":"https://static001.geekbang.org/account/avatar/00/10/26/17/c6710e16.jpg","comment_is_top":false,"comment_ctime":1548164359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548164359","product_id":100017301,"comment_content":"1 * 1&#47;(n+1) + 1 * 1&#47;(n+1) + ... + 1* 1&#47;(n+1) + n * 1&#47;(n+1)<br><br>=(n+n)&#47;(n+1)<br><br>=2n&#47;n+1 = 2?<br><br>答案是O(1)我的答案是O(2)<br>哪里出问题了？<br>","like_count":0},{"had_liked":false,"id":62474,"user_name":"forest","can_delete":false,"product_type":"c1","uid":1032203,"ip_address":"","ucode":"DC46B4CF951EFE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/0b/e416f0f1.jpg","comment_is_top":false,"comment_ctime":1548065698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548065698","product_id":100017301,"comment_content":"看了大家的留言总结的很好，自己把练习题的答案整理了一下与大家分享：<br>1. 最好情况时间复杂度为 O(1)<br>2.最坏情况分析： <br>最坏情况代码执行的次数跟每次数组的长度有关<br>第1次调用insert的执行的次数为 n ,<br>第2次调用insert的执行的次数为 2n ,<br>第3次调用insert的执行的次数为 2^2 * n <br>第k次调用insert的执行的次数为 2^(k-1) * n <br>最坏时间复杂度为 O(n)。<br>3. 平均情况分析<br>当每次遇到最坏情况时数组会进行2倍扩容，原数组被导入新数组，虽然数组的长度变大了，但是插入操作落在的区间的长度是一样的，分别是0~len-1, len~(2len-1),....；<br>插入的情况仍是len+1种：0~len-1和插满之后的O(len)；所以每次插入的概率是：p= 1&#47;len+1，<br>最后求出加权平均时间复杂度为 1*p + 2*p+ ▪▪▪ + len*p + len * p = O(1) ; <br>4. 均摊时间复杂度 O(1)<br>而均摊复杂度由于每次O(len)的出现都跟着len次O(1)，是前后连贯的，因而将O(len)平摊到前len次上，得出平摊复杂度是O(1)<br><br><br>看了这个同学的评论，我觉得加权平均时间复杂度是不是O(n)才对呢，但是老师你再下面点个大拇指，好像是认同他的观点的意思，那是我理解错了么","like_count":0},{"had_liked":false,"id":62270,"user_name":"A-Mars","can_delete":false,"product_type":"c1","uid":1058327,"ip_address":"","ucode":"C037EC9E022B97","user_header":"https://static001.geekbang.org/account/avatar/00/10/26/17/c6710e16.jpg","comment_is_top":false,"comment_ctime":1547998895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547998895","product_id":100017301,"comment_content":"(1+2+...+n+n)&#47;(n+1)<br><br>={(1+n)n&#47;2 +n}&#47;(n+1)<br><br>=n&#47;2+n&#47;(n+1)<br><br>平均时间复杂度为O(n)?(难道不是O(n&#47;2)?，因为n&#47;n+1无限接近1，所以可以看作是常量1，结果就是n&#47;2了)<br>","like_count":0},{"had_liked":false,"id":62221,"user_name":"张晓生","can_delete":false,"product_type":"c1","uid":1228996,"ip_address":"","ucode":"42F6A91947F5E5","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/c4/dfbad982.jpg","comment_is_top":false,"comment_ctime":1547987832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547987832","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":62183,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1547971586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547971586","product_id":100017301,"comment_content":"最好情况: O(1)<br>最坏情况: O(n)<br>平均情况:  2n&#47;(n+1), O(1)<br>均摊情况: O(1)","like_count":0},{"had_liked":false,"id":61839,"user_name":"zw_learn_3","can_delete":false,"product_type":"c1","uid":1243279,"ip_address":"","ucode":"300C8B93C5C50B","user_header":"","comment_is_top":false,"comment_ctime":1547815186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547815186","product_id":100017301,"comment_content":"您好，代码中的len等于10，是事先定义好的常量，这里分析其复杂度还有何意义呢,就好比您之前讲解到的for循环中i为100的情形。","like_count":0},{"had_liked":false,"id":61731,"user_name":"一只长毛猫","can_delete":false,"product_type":"c1","uid":1014791,"ip_address":"","ucode":"9A081632311675","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/07/8653dd9c.jpg","comment_is_top":false,"comment_ctime":1547783556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547783556","product_id":100017301,"comment_content":"最坏情况分析： <br>最坏情况代码执行的次数跟每次数组的长度有关<br>第1次调用insert的执行的次数为  10 = 2^0 * 10<br>第2次调用insert的执行的次数为 20 = 2^1 * 10 <br>第3次调用insert的执行的次数为 40 = 2^2 * 10 <br>第4次调用insert的执行的次数为 80 = 2^3 * 10 <br>第k次调用insert的执行的次数为  len  = 2^(k-1) * 10<br>k无限大时，len也就无限大，循环次数是len次，所以最坏时间复杂度为 O(n)。","like_count":0},{"had_liked":false,"id":60353,"user_name":"双子座的马克思","can_delete":false,"product_type":"c1","uid":1150663,"ip_address":"","ucode":"4D43FB644E9870","user_header":"https://static001.geekbang.org/account/avatar/00/11/8e/c7/6d08d502.jpg","comment_is_top":false,"comment_ctime":1547461470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547461470","product_id":100017301,"comment_content":"练习题（均摊时间复杂度）：假设第n次进行数组扩容，那执行次数为n-1，下一个n-1次代码均执行1次，均摊下去，第n次代码执行1次，均摊时间就是O(1)。","like_count":0},{"had_liked":false,"id":58667,"user_name":"Aaaaaaaaaaayou","can_delete":false,"product_type":"c1","uid":1073601,"ip_address":"","ucode":"67BA315B87587D","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/c1/93031a2a.jpg","comment_is_top":false,"comment_ctime":1547170205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547170205","product_id":100017301,"comment_content":"最好情况：O(1)<br>最坏情况：O(n)<br>平均情况：O(1)","like_count":0},{"had_liked":false,"id":58607,"user_name":"saber","can_delete":false,"product_type":"c1","uid":1193468,"ip_address":"","ucode":"D02F8D129DB41C","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","comment_is_top":false,"comment_ctime":1547133331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547133331","product_id":100017301,"comment_content":"请问老师这个课后题如果计算平均复杂度，该怎么计算？","like_count":0},{"had_liked":false,"id":57797,"user_name":"奔跑的蜗牛","can_delete":false,"product_type":"c1","uid":1326751,"ip_address":"","ucode":"3FDC8AED8B8AC5","user_header":"https://static001.geekbang.org/account/avatar/00/14/3e/9f/bf3946bf.jpg","comment_is_top":false,"comment_ctime":1546913213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546913213","product_id":100017301,"comment_content":"您好，老师。再讲均摊复杂度那块的时候，“首先，find() 函数在极端情况下，复杂度才为 O(1)“<br>这个复杂度是不是应该是O(n) <br><br><br>","like_count":0},{"had_liked":false,"id":57612,"user_name":"idioticbear","can_delete":false,"product_type":"c1","uid":1125988,"ip_address":"","ucode":"E0ED5F497440F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/64/df1a587b.jpg","comment_is_top":false,"comment_ctime":1546850237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546850237","product_id":100017301,"comment_content":"最好O(1)，即直接添加，最坏O(n)，即需要重新给数组扩容，又因为O(1)出现的概率比O(n)大，我们可以认为均摊和平均均为O(1)。","like_count":0},{"had_liked":false,"id":57224,"user_name":"blank","can_delete":false,"product_type":"c1","uid":1237868,"ip_address":"","ucode":"4ACC74D26F66F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/6c/4cbb033e.jpg","comment_is_top":false,"comment_ctime":1546691259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546691259","product_id":100017301,"comment_content":"作业题答案: 最好是O(1)，最差是O(n)，均摊是O(1)","like_count":0},{"had_liked":false,"id":57098,"user_name":"席尔","can_delete":false,"product_type":"c1","uid":1236527,"ip_address":"","ucode":"697384FF090601","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/RRphehcOju6viaKMicXwhZATXZAT7I7zShCiaXB8icwtDk92lic7nyXK25upY3qI55Mt1jvviayQwicPFAjdeFkJxONJQ/132","comment_is_top":false,"comment_ctime":1546646102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546646102","product_id":100017301,"comment_content":"老师! insert() 不是有n次O(1)操作吗？为什么是n-1次？  假设数组长度是10。  当数组的下标是0~9的时候，每次操作的时间复杂度都是O(1)，总共不是10次吗？ 一直到数组的下标等于10的时候，时间复杂度才是O(n)。 总共执行了 10次O(1)操作，1次O(n)操作。不是吗？  请老师解惑。谢谢!","like_count":0},{"had_liked":false,"id":56859,"user_name":"Orz","can_delete":false,"product_type":"c1","uid":1183035,"ip_address":"","ucode":"133FCE3005D6CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/3b/5ba58441.jpg","comment_is_top":false,"comment_ctime":1546569556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546569556","product_id":100017301,"comment_content":"老师，因为len已经固定为10，是否任何情况下都可以认为是O(1)呢？","like_count":0},{"had_liked":false,"id":56682,"user_name":"石涛大侠。","can_delete":false,"product_type":"c1","uid":1365284,"ip_address":"","ucode":"78AAB2C03A3592","user_header":"https://static001.geekbang.org/account/avatar/00/14/d5/24/d36d2c24.jpg","comment_is_top":false,"comment_ctime":1546522082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546522082","product_id":100017301,"comment_content":"一、break<br> <br>二、关于不同时间复杂度的三个概念：<br>（1）\t最好情况的时间复杂度<br>在最理想的情况下，执行这段代码的时间复杂度。<br>（2）\t最坏情况的时间复杂度<br>在最糟糕的情况下，执行这段代码的时间复杂度。<br>（3）\t平均情况的时间复杂度<br>加权平均时间复杂度 期望时间复杂度（考虑概率）<br><br>只有同一块代码在不同的情况下，时间复杂度有量级的差距，才会使用三种复杂度的表示方法来区分。<br><br>三、均摊时间复杂度<br>分析方法：平摊分析<br>均摊时间复杂度和平摊分析的场景特殊：<br> <br><br>均摊时间复杂度是一种特殊场景下的平均时间复杂度。<br><br>小结：引入四个关于时间复杂度的概念的原因：某些情形下，同一块代码在不同的情况下，时间复杂度有量级的差距。<br>","like_count":0},{"had_liked":false,"id":55385,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1546154780,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1546154780","product_id":100017301,"comment_content":"凭直觉，最好O(1)，最坏O(n)，平均O(1)这个例子可以用均摊分析法","like_count":0},{"had_liked":false,"id":55351,"user_name":"后撤步三分","can_delete":false,"product_type":"c1","uid":1239413,"ip_address":"","ucode":"08783D1E566AFE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/75/4a39be54.jpg","comment_is_top":false,"comment_ctime":1546142283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546142283","product_id":100017301,"comment_content":"每个的概率都是 1&#47;2n，为什么后面成了 2*（1&#47;2n）+3*（1&#47;2n）+.....n*（1&#47;2n）+n*（1&#47;2）, 2到n的相乘是运行代码次数的意思吗？有点难理解","like_count":0},{"had_liked":false,"id":55168,"user_name":"想想คิดถึง","can_delete":false,"product_type":"c1","uid":1323770,"ip_address":"","ucode":"E13BD3DCEC8EB2","user_header":"https://static001.geekbang.org/account/avatar/00/14/32/fa/71c460d9.jpg","comment_is_top":false,"comment_ctime":1546055235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546055235","product_id":100017301,"comment_content":"add()还没看，","like_count":0},{"had_liked":false,"id":55167,"user_name":"想想คิดถึง","can_delete":false,"product_type":"c1","uid":1323770,"ip_address":"","ucode":"E13BD3DCEC8EB2","user_header":"https://static001.geekbang.org/account/avatar/00/14/32/fa/71c460d9.jpg","comment_is_top":false,"comment_ctime":1546055124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546055124","product_id":100017301,"comment_content":"不懂均摊时间复杂度，和insert算法<br>","like_count":0},{"had_liked":false,"id":54551,"user_name":"小兵","can_delete":false,"product_type":"c1","uid":1221871,"ip_address":"","ucode":"495F5D81E3AC9A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/ef/3d27997e.jpg","comment_is_top":false,"comment_ctime":1545898117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545898117","product_id":100017301,"comment_content":"我们知道了一个函数的时间复杂度，包括最好、最坏和平均。<br><br>然后我们要怎么做呢？将高复杂度的替换为低复杂度的？","like_count":0},{"had_liked":false,"id":54550,"user_name":"👀","can_delete":false,"product_type":"c1","uid":1253203,"ip_address":"","ucode":"DF1FD70E0574CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/53/d6fd2316.jpg","comment_is_top":false,"comment_ctime":1545898089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545898089","product_id":100017301,"comment_content":"老师，加权平均值的公式推导nx2&#47;1咋来的，可以把这个公式细化一下吗？不是很理解。<br>","like_count":0},{"had_liked":false,"id":53025,"user_name":"小顾","can_delete":false,"product_type":"c1","uid":1180951,"ip_address":"","ucode":"BE600F883A2E24","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/17/08178d9e.jpg","comment_is_top":false,"comment_ctime":1545572002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545572002","product_id":100017301,"comment_content":"&#47;&#47; 代码中的 array.length 就等于 n<br> int[] array = new int[n];<br> int count = 0;<br> <br> void insert(int val) {<br>    if (count == array.length) {<br>       int sum = 0;<br>       for (int i = 0; i &lt; array.length; ++i) {<br>          sum = sum + array[i];<br>       }<br>       array[0] = sum;<br>       count = 1;<br>    }<br> <br>    array[count] = val;<br>    ++count;<br><br><br>请问这段程序是如何实现数组清零的","like_count":0},{"had_liked":false,"id":52332,"user_name":"never_more","can_delete":false,"product_type":"c1","uid":1175646,"ip_address":"","ucode":"5A2BE28A71D046","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/5e/d1aced46.jpg","comment_is_top":false,"comment_ctime":1545363627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545363627","product_id":100017301,"comment_content":"均摊复杂度的代码是不是有点瑕疵。如果array的长度是n，外层肯定是循环n次来填充数据。而代码中的判断填满后的操作（count == array.lengh）是走不到的，除非外层在循环n次填充完数据后又执行了第n+1次插入操作","like_count":0},{"had_liked":false,"id":51703,"user_name":"俊伟","can_delete":false,"product_type":"c1","uid":1111175,"ip_address":"","ucode":"7905B4F25637F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/87/644c0c5d.jpg","comment_is_top":false,"comment_ctime":1545226022,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545226022","product_id":100017301,"comment_content":"最坏情况下是O(n),最好情况下是O(1)<br>平均情况下：因为插入的时候有n种情况，外加一中数组翻倍情况，所以有n+1种情况，每次的输入规模为1。可得公式为：1*1&#47;(n+1)+1*1&#47;(n+1)……= n*1&#47;(n+1)约等于1。所以平均情况为O(1)复杂度。<br>均摊时间复杂度：最好的情况为O(1),最坏的情况为O(n),最坏情况均摊到最好情况，复杂度为O(1)。","like_count":0},{"had_liked":false,"id":51684,"user_name":"monster","can_delete":false,"product_type":"c1","uid":1065979,"ip_address":"","ucode":"710DAA865E4324","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/fb/d26d3fa1.jpg","comment_is_top":false,"comment_ctime":1545223447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545223447","product_id":100017301,"comment_content":"最好情况时间复杂度<br>最坏情况时间复杂度<br>平均情况时间复杂度：加权平均值（期望）<br>均摊时间复杂度（特殊的平均情况时间复杂度）","like_count":0},{"had_liked":false,"id":51278,"user_name":"Harry","can_delete":false,"product_type":"c1","uid":1337061,"ip_address":"","ucode":"41C8D87EDA013F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/9CXkelFhq7x3rvSAMS3KkW3S0trXb0wVrDwHfh3iaZFaHdnY7ibhHnCPMq4D9QwZEGdNVqAU4GtaicvkmccHOqsog/132","comment_is_top":false,"comment_ctime":1545145170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545145170","product_id":100017301,"comment_content":"哦，我明白了。不明白加权平均复杂度推导过程的同学，请上维基百科，关键字，数学期望","like_count":0},{"had_liked":false,"id":51268,"user_name":"Harry","can_delete":false,"product_type":"c1","uid":1337061,"ip_address":"","ucode":"41C8D87EDA013F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/9CXkelFhq7x3rvSAMS3KkW3S0trXb0wVrDwHfh3iaZFaHdnY7ibhHnCPMq4D9QwZEGdNVqAU4GtaicvkmccHOqsog/132","comment_is_top":false,"comment_ctime":1545144012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545144012","product_id":100017301,"comment_content":"我还是不太理解加权平均复杂度的那个计算公式哇为什么是1*1&#47;2n+2*1&#47;2n……","like_count":0},{"had_liked":false,"id":51108,"user_name":"Violin","can_delete":false,"product_type":"c1","uid":1140715,"ip_address":"","ucode":"25BA978F662744","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/eb/9a041634.jpg","comment_is_top":false,"comment_ctime":1545115372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545115372","product_id":100017301,"comment_content":"均摊时间复杂度分析：就是某几种操作周期性出现，比如1次费时操作，接着N次不费时操作，然后又是1次费时，N次不费时，周而复始。那就是将偶尔出现的&quot;1次费时操作&quot;的时间，分摊到多次出现的“N次不费时操作”上，这样就去除了“1次费时操作”这个在分析过程中的捣蛋鬼。<br>对于留的作业，个人感觉和insert例子差不多，最好的情况是o(1)，最坏是o(n),均摊也是o(1)","like_count":0},{"had_liked":false,"id":51070,"user_name":"那又如何。","can_delete":false,"product_type":"c1","uid":1234404,"ip_address":"","ucode":"0966EE518AB2A3","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/e4/b8eaff27.jpg","comment_is_top":false,"comment_ctime":1545108691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545108691","product_id":100017301,"comment_content":"算平均值的时候就蒙了，唉","like_count":0},{"had_liked":false,"id":51069,"user_name":"那又如何。","can_delete":false,"product_type":"c1","uid":1234404,"ip_address":"","ucode":"0966EE518AB2A3","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/e4/b8eaff27.jpg","comment_is_top":false,"comment_ctime":1545108650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545108650","product_id":100017301,"comment_content":"算平均值的时候就看不懂了٩😩ི۶","like_count":0},{"had_liked":false,"id":50908,"user_name":"此间的少年","can_delete":false,"product_type":"c1","uid":1150546,"ip_address":"","ucode":"3D6F5371FD271F","user_header":"https://static001.geekbang.org/account/avatar/00/11/8e/52/7d211488.jpg","comment_is_top":false,"comment_ctime":1545063794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545063794","product_id":100017301,"comment_content":"请问王老师和各位同学，举例中的1*1&#47;（n+1)一直加到n*1&#47;（n+1) 前面的1和n是什么含义 ，和另外一个例子的这里为什么不是像另外一个例子用1.2.3....n，谢谢","like_count":0},{"had_liked":false,"id":50658,"user_name":"周萱萱","can_delete":false,"product_type":"c1","uid":1185181,"ip_address":"","ucode":"65499DDEB634C9","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/9d/1efd064d.jpg","comment_is_top":false,"comment_ctime":1545025152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545025152","product_id":100017301,"comment_content":"竟然第一次听说均摊时间复杂度，感谢老师分享。","like_count":0},{"had_liked":false,"id":50384,"user_name":"ck","can_delete":false,"product_type":"c1","uid":1142348,"ip_address":"","ucode":"2335A22314296A","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/4c/494b2907.jpg","comment_is_top":false,"comment_ctime":1544964923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544964923","product_id":100017301,"comment_content":"均摊平均值中count是数组中的元素个数，并且数组不能在array[0]=null。array[1]为非null值。","like_count":0},{"had_liked":false,"id":50237,"user_name":"平凡的世界","can_delete":false,"product_type":"c1","uid":1297916,"ip_address":"","ucode":"12362B7CDFE261","user_header":"","comment_is_top":false,"comment_ctime":1544930280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544930280","product_id":100017301,"comment_content":"老师  请问课后练习题最坏情况时间复杂度为什么是O(n)而不是O(1)呢？代码len是赋值10的，不是与n无关吗？请老师指点，谢谢！","like_count":0},{"had_liked":false,"id":50231,"user_name":"Gavin黄炯鹏","can_delete":false,"product_type":"c1","uid":1347154,"ip_address":"","ucode":"853CDA740D5ABD","user_header":"https://static001.geekbang.org/account/avatar/00/14/8e/52/677d9d1a.jpg","comment_is_top":false,"comment_ctime":1544928900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544928900","product_id":100017301,"comment_content":"第一段代码应该是查找x最后出现的地方吧？","like_count":0},{"had_liked":false,"id":50204,"user_name":"肖玉哲","can_delete":false,"product_type":"c1","uid":1350969,"ip_address":"","ucode":"E211AFA01EC2C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/39/20525541.jpg","comment_is_top":false,"comment_ctime":1544919484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544919484","product_id":100017301,"comment_content":"时间复杂度最简单的最优和最差不做赘述<br><br>关于平均复杂度，首先理清楚该代码有几个分支，再查看有可能进入各个分支的次数，这样就可以明确其概率大小，进而计算<br><br>关于均摊复杂度，个人理解就是在某些特殊情况下时间复杂度比一般情况高的多的时候，拿高的时间复杂度除以低时间复杂度的个数，个数不好把控的情况，因为占大部分，拿全部个数当分子也是基本可以看出其均摊时间复杂度的，比如该题，最大时间复杂度n，为1的有n次，所以为O（1）","like_count":0},{"had_liked":false,"id":50141,"user_name":"LadyForest","can_delete":false,"product_type":"c1","uid":1348673,"ip_address":"","ucode":"17D9198016DD7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/41/be0af1c4.jpg","comment_is_top":false,"comment_ctime":1544877958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544877958","product_id":100017301,"comment_content":"array length抽象为n后，1～n-1次调用add函数时间复杂度为O(1)，第n次调用变为O(n)，从第n+1次～2n-1次调用又变为O(1)，以此类推，最好是O(1)，最坏是O(n)，均摊是O(1)","like_count":0},{"had_liked":false,"id":49832,"user_name":"Hughie","can_delete":false,"product_type":"c1","uid":1261290,"ip_address":"","ucode":"D39158F0E84F24","user_header":"https://static001.geekbang.org/account/avatar/00/13/3e/ea/4cb5449e.jpg","comment_is_top":false,"comment_ctime":1544777465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544777465","product_id":100017301,"comment_content":"最好情况O(1)，最坏情况O(n)，均摊O(1)，其实和insert()例子的意思差不多","like_count":0},{"had_liked":false,"id":49467,"user_name":"NearJC","can_delete":false,"product_type":"c1","uid":1056556,"ip_address":"","ucode":"0E0CB5CEDCE77D","user_header":"https://static001.geekbang.org/account/avatar/00/10/1f/2c/3719b616.jpg","comment_is_top":false,"comment_ctime":1544692606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544692606","product_id":100017301,"comment_content":"最好情况时间复杂度：O（1）<br>最坏情况时间复杂度：O（n）<br>均摊情况时间复杂度：O（1）","like_count":0},{"had_liked":false,"id":49199,"user_name":"白云飞","can_delete":false,"product_type":"c1","uid":1306476,"ip_address":"","ucode":"26330527572733","user_header":"https://static001.geekbang.org/account/avatar/00/13/ef/6c/d4022687.jpg","comment_is_top":false,"comment_ctime":1544620786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544620786","product_id":100017301,"comment_content":"留言的第一个，练习题最好是O(1)，均摊是O(1)都可以理解，一开始最差是O(n)有点不能理解。觉得if存在i = n &gt;&gt;len的情况，扩容次数x的话，是10*2^x = i=n,x = lon2(n&#47;10)，最差应该是O(log(n))，就在提交留言的时候，想到在最差的情况下，运行最多的还是for循环，最后的复杂度为O(n),这么理解感觉还是有点问题，因为没有人提到if的负责度，想问下是自己想复杂了，还是只考虑最坏的情况，不用考虑if的复杂度。","like_count":0},{"had_liked":false,"id":49054,"user_name":"krauser","can_delete":false,"product_type":"c1","uid":1219733,"ip_address":"","ucode":"13E5CB0ECF1613","user_header":"https://static001.geekbang.org/account/avatar/00/12/9c/95/edbb01ae.jpg","comment_is_top":false,"comment_ctime":1544595654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544595654","product_id":100017301,"comment_content":"O(1)跟最后均摊时间复杂度的例子很像<br><br>最好时间复杂度<br>最坏时间复杂度<br>平均时间复杂度，期望时间复杂度<br>均摊时间复杂度<br><br>ps：之前买过好几本算法书，不是很能看懂，今天看了老师对于复杂度的分析，豁然开朗<br>","like_count":0},{"had_liked":false,"id":48684,"user_name":"晓嘿","can_delete":false,"product_type":"c1","uid":1341930,"ip_address":"","ucode":"4B52EF7B9A1394","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/ea/8fe22e74.jpg","comment_is_top":false,"comment_ctime":1544515077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544515077","product_id":100017301,"comment_content":"分析时间复杂度的时候，不要在意n是怎么增长的，就假设是无限增大就可以了吧，老看那个len是指数增长的，算的跑偏了都。","like_count":0},{"had_liked":false,"id":48628,"user_name":"晓嘿","can_delete":false,"product_type":"c1","uid":1341930,"ip_address":"","ucode":"4B52EF7B9A1394","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/ea/8fe22e74.jpg","comment_is_top":false,"comment_ctime":1544500239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544500239","product_id":100017301,"comment_content":"老师，我想问下，如果时间复杂度是 (n的2次方)*(2的n次方) 或者  (n的2次方)+(2的n次方)这种情况下在分析复杂度时，也可以忽略掉系数吗","like_count":0},{"had_liked":false,"id":48624,"user_name":"晓嘿","can_delete":false,"product_type":"c1","uid":1341930,"ip_address":"","ucode":"4B52EF7B9A1394","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/ea/8fe22e74.jpg","comment_is_top":false,"comment_ctime":1544499507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544499507","product_id":100017301,"comment_content":"老师，这四个复杂度的作用是不是用来分析具有相同量级的两个算法哪个更好一点的啊","like_count":0},{"had_liked":false,"id":47825,"user_name":"wsw","can_delete":false,"product_type":"c1","uid":1117874,"ip_address":"","ucode":"68885262052BCD","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/b2/7cf7e91c.jpg","comment_is_top":false,"comment_ctime":1544230835,"is_pvip":false,"replies":[{"id":"17184","content":"数列求和 可以自己算算","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407728,"ip_address":"","comment_id":47825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544230835","product_id":100017301,"comment_content":"老师，为什么  1+2+3...+n+n&#47;n+1 会等于 n(n+3)&#47;2(n+1)  <br>不明白","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431900,"discussion_content":"数列求和 可以自己算算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47664,"user_name":"Yeir","can_delete":false,"product_type":"c1","uid":1072999,"ip_address":"","ucode":"3A325B919C66B9","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/67/8552dab9.jpg","comment_is_top":false,"comment_ctime":1544174413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544174413","product_id":100017301,"comment_content":"思考题解答思路<br>当len = n时:<br>O(1) 有 n次, O(n)有1次;<br>当len = 2n时:<br>O(1) 有 2n次, O(n)有1次;<br>当len = 3n时:<br>O(1) 有 3n次, O(n)有1次;<br>归纳法, 假设len = N时, 则O(1)有N次, O(n)有1次. 这个时候可以发现规律其实和上面insert()方法是一样的.所以结论当然也是一样.","like_count":0},{"had_liked":false,"id":47645,"user_name":"eason","can_delete":false,"product_type":"c1","uid":1340823,"ip_address":"","ucode":"0B4D5627AAE4CF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlSe5wRWM6EnVpVOkmJ9HoBpBaqgQK7ZYlAsVl40CVs0picrma5Aq90ffiaAUBHra1Idag4KyBSCXA/132","comment_is_top":false,"comment_ctime":1544171085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544171085","product_id":100017301,"comment_content":"最好O(1)，最坏(n)，平均O(n)","like_count":0},{"had_liked":false,"id":47630,"user_name":"寻找大卫","can_delete":false,"product_type":"c1","uid":1336941,"ip_address":"","ucode":"9F80960AA9E51C","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/6d/71d98c9f.jpg","comment_is_top":false,"comment_ctime":1544168311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544168311","product_id":100017301,"comment_content":"留言里有关清空数组的问题最佳。","like_count":0},{"had_liked":false,"id":47524,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1544150517,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1544150517","product_id":100017301,"comment_content":"最好，最坏，平均时间复杂度好理解；均摊时间复杂度应用场景是一次O(n)的操作后，紧跟着n-1次O(1)的操作，可以分析是否可以将第一次的操作时间均摊到后续的操作中。这种分析方法值得学习。","like_count":0},{"had_liked":false,"id":47224,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1544080863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544080863","product_id":100017301,"comment_content":"来历：在查找的过程中，条件终止，差异化的处理耗时<br>平均：加权平均或者期望平均（算上了出现的概率）---复杂度有量级的差异时才考虑（最好，最坏，平均）<br><br>摊还分析，平摊分析，均摊分析------均摊等于最好<br><br>思考题：<br>应该跟摊还分析的例子是一样的嘛<br><br>对于清空那个地方还是有点困惑，看了第一条评论得到了答案，下标指向哪里就代表哪里开始，就等于是清空了","like_count":0},{"had_liked":false,"id":46245,"user_name":"anya","can_delete":false,"product_type":"c1","uid":1336142,"ip_address":"","ucode":"B12CAC76D61C81","user_header":"https://static001.geekbang.org/account/avatar/00/14/63/4e/c80014ea.jpg","comment_is_top":false,"comment_ctime":1543888419,"is_pvip":false,"replies":[{"id":"16676","content":"这句话本身就是推导过程呀","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543974538,"ip_address":"","comment_id":46245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543888419","product_id":100017301,"comment_content":"每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。<br>为什么均摊下来就是O(1)，可以证明的么？还是臆测的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431396,"discussion_content":"这句话本身就是推导过程呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543974538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45673,"user_name":"Nodreame","can_delete":false,"product_type":"c1","uid":1123263,"ip_address":"","ucode":"E2CF7D8B1341E9","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/bf/071dbb60.jpg","comment_is_top":false,"comment_ctime":1543743239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543743239","product_id":100017301,"comment_content":"   有时写完代码之后，对代码进行分析优化，优化之后时间复杂度依旧没有变化，这是因为上面的时间复杂度分析方法不能满足细节优化的情况，我们应该开始使用“最好”、“最坏”、“平均”来对算法的时间复杂度进行进一步分析。<br>    1、最好情况时间复杂度：最理想的情况下执行代码的时间复杂度；<br>    2、最坏情况时间复杂度：最糟糕的情况下执行代码的时间复杂度；<br>    3、平均情况时间复杂度：<br>        - 平均时间复杂度：把每种情况需要遍历的元素个数累加起来，再除以总次数，得到的结果再忽略掉系数、低阶、常量；<br>        - 加权平均时间复杂度（期望时间复杂度）：在计算时加入每种情况发生的概率；<br>    4、均摊时间复杂度：特殊的平均时间复杂度。靠感觉，例如看 O(1)还是O(n)出现的次数比较多而定；","like_count":0},{"had_liked":false,"id":45032,"user_name":"卡斯瓦德","can_delete":false,"product_type":"c1","uid":1011332,"ip_address":"","ucode":"E944E5BC507D5C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/84/45a909a6.jpg","comment_is_top":false,"comment_ctime":1543540758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543540758","product_id":100017301,"comment_content":"老师，对于时间复杂度的计算，似乎都没有考虑过n的数值可变动，例如n不是是个数值还是一个list，list在for循环执行中使用了list.remove，应该可能就是将原本O(n)转变为O(log(n))<br>for(int I=0; I &lt;list.size();I++){<br>        list.remove(I);<br>}","like_count":0},{"had_liked":false,"id":44348,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1333414,"ip_address":"","ucode":"4DB39C6CD5743B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/H8NxrljQXliccaT5fjdXJQYS3ou3Z9ykAuKw6EgicicEA9L4jQLz3h85P0odgDSaK0cA9oTyUKibbiagdNvnHuuV5mQ/132","comment_is_top":false,"comment_ctime":1543412714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543412714","product_id":100017301,"comment_content":"关于时间复杂度总结（全）<br><br>常见的时间复杂度有O(1),O(n),O(logn),O(nlogn),O(n^2)。简单的判断就是看循环体的循环次数，有限循环就是O(1)，循环n（n量级较大）次时就是O(n)，当循环体中出现随i指数增长时复杂度就是O(logn)，当复杂度O(n)和复杂度O(logn)出现嵌套时就是相乘，复杂度为O(nlogn)，复杂度相加时则取复杂度为最大的那个。<br><br>关于特殊的（不是简单的以上几种情况的）时间复杂度一共有几种分类：最好时间复杂度、最坏时间复杂度、平均时间复杂度、均摊时间复杂度。<br><br>最好时间复杂度：即找到程序最快跑完（得出结果）的一种情况所用的复杂度。（很多情况是在循环体中一次就得出结果的）通常是O(1);<br><br>最坏时间复杂度：即找到程序最慢跑完（最坏的情况）的情况下所用的复杂度。<br><br>平均时间复杂度：这种复杂度又细分两种（普通平均复杂度和加权平均复杂度）。即每种情况出现的概率和（举例：假如一段程序的最好时间复杂度为O(1),最坏时间复杂度为O(n),程序循环体循环次数为n次，那么平均复杂度就是（1+1+……+1）&#47;n 结果为1，则平均时间复杂度为O(1)。）<br><br>均摊时间复杂度：可以理解为一种特殊的平均。在分析是O(1)还是O(n)时就是凭感觉。。当出现O(1)的次数远远大于O(n)时，均摊复杂度就是O(1);举个栗子：正常情况下都是走一步，即复杂度都是O(1)，只有符合一种条件时才进入循环体，循环体复杂度是O(n)，那么均摊复杂度就是O(1)；","like_count":0},{"had_liked":false,"id":44337,"user_name":"arronK","can_delete":false,"product_type":"c1","uid":1192961,"ip_address":"","ucode":"58DC6FBF2CF0C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/01/30ca98e6.jpg","comment_is_top":false,"comment_ctime":1543410937,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1543410937","product_id":100017301,"comment_content":"4种类型时间复杂度的引入是因为对于某些代码不同情况下同一代码的时间复杂度是不同的，所以要分情况来看待。最好的时候，最坏的时候，加权平均的复杂度，还有一个特殊的均摊时间复杂度。对于不同情况下时间复杂度有量级改变的代码，就应该考虑一下这几种情况。前三种一般都可以考虑，均摊时间复杂度是在大部分运行时间都是最优，只有个别情况会最坏，而且具有一定的前后连贯顺序的时候，需要考虑用均摊的方式来得到代码的时间复杂度(有点风险共担的意味)。<br>另外，均摊时间复杂度实际和平均时间复杂度实际上是差不多的","like_count":0},{"had_liked":false,"id":44330,"user_name":"黄宇婷","can_delete":false,"product_type":"c1","uid":1160249,"ip_address":"","ucode":"8A89AC1A43FB57","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/39/d9429b27.jpg","comment_is_top":false,"comment_ctime":1543409474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543409474","product_id":100017301,"comment_content":"时间复杂度为O(1)<br>在大多数时间为O(1)，最坏情况时间复杂度为O(n)，这种情况伴随着 n-1 次的O(1)<br>所以可以应用均摊时间复杂度，把较高时间复杂度的操作耗时，平摊到较低时间复杂度的操作中","like_count":0},{"had_liked":false,"id":44206,"user_name":"陈哲","can_delete":false,"product_type":"c1","uid":1331744,"ip_address":"","ucode":"E8A9A1D693BB97","user_header":"https://static001.geekbang.org/account/avatar/00/14/52/20/08068759.jpg","comment_is_top":false,"comment_ctime":1543384523,"is_pvip":false,"replies":[{"id":"15772","content":"放到编译器里debug一下吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543403724,"ip_address":"","comment_id":44206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543384523","product_id":100017301,"comment_content":"均摊时间复杂度的第一个例子，无论n等于几，insert方法里的循环都不会执行的呀，而且我也发现那段代码是吧数组清空的，这个例子程序我看了好久，让同事看了一下也没明白","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430679,"discussion_content":"放到编译器里debug一下吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543403724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44199,"user_name":"徐贺","can_delete":false,"product_type":"c1","uid":1210612,"ip_address":"","ucode":"B06638FDD0768D","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/f4/b499d66a.jpg","comment_is_top":false,"comment_ctime":1543381763,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1543381763","product_id":100017301,"comment_content":"老师写的就是简化版的arraylist  所以触类旁通arraylist insert 为O(1)","like_count":0},{"had_liked":false,"id":44197,"user_name":"徐贺","can_delete":false,"product_type":"c1","uid":1210612,"ip_address":"","ucode":"B06638FDD0768D","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/f4/b499d66a.jpg","comment_is_top":false,"comment_ctime":1543381695,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1543381695","product_id":100017301,"comment_content":"之前说过时间复杂度取决于复杂度最高的一部分 <br><br>感觉均摊复杂度主要是帮助大家分析一种特例<br>存在 O(n)但是大部分是  O(1)总体表现 O(1)不是O(n)<br><br>比如示例<br>作者写的是可以理解为java arraylist的add<br>因而触类旁通arraylist insert的平均时间复杂度是O(1)!","like_count":0},{"had_liked":false,"id":43844,"user_name":"唐龙","can_delete":false,"product_type":"c1","uid":1142952,"ip_address":"","ucode":"CEB8774C99B6EE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eorTBFYlDL5NXMXUs5IwAo8O6c9aBdSss0b7iavJBxCUciaPrBr8wckxoawaIlJLkj1t2Uu4l8MJzTg/132","comment_is_top":false,"comment_ctime":1543308729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543308729","product_id":100017301,"comment_content":"老师，均摊时间复杂度那个例子的代码我没太看懂。<br><br>先把count初始化为0了，后边函数中写的是if (count == array.length) ……那这不就是表示“只要数组长度不为0的话就不执行”吗？这样括号里的循环也不会执行了？直接执行最后两行的array[count] = val; 和++count ?<br><br>这里我实在是没理解明白？这个往数组中插入数据的功能是如何实现的？<br>","like_count":0},{"had_liked":false,"id":43466,"user_name":"fish","can_delete":false,"product_type":"c1","uid":1228992,"ip_address":"","ucode":"7E240F5660BC4B","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/c0/62614eee.jpg","comment_is_top":false,"comment_ctime":1543230180,"is_pvip":false,"replies":[{"id":"15591","content":"在不知道m和n两个规模的量级的情况下，我们只能都写出来了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543284879,"ip_address":"","comment_id":43466,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543230180","product_id":100017301,"comment_content":"O(n)与O(m＋n)实质是不是一样的？不一样区别在呢？求解答！谢谢了  很像知道","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430392,"discussion_content":"在不知道m和n两个规模的量级的情况下，我们只能都写出来了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543284879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43446,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1543227659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543227659","product_id":100017301,"comment_content":"11.26 把该讲内容总结为几个问题, 大家复习的时候可以先尝试回答这些问题检查自己的掌握程度:<br>\t1. <br>最好&#47;最坏时间复杂度的概念是什么?<br>\t2. <br>平均时间复杂度的概念是什么?<br>\t3. <br>均摊时间复杂度的概念是什么? <br><br>","like_count":0},{"had_liked":false,"id":43445,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1543227618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543227618","product_id":100017301,"comment_content":"思考题: 最好是O(1), 最坏是O(n), 平均&#47;均摊都是O(1)","like_count":0},{"had_liked":false,"id":43249,"user_name":"AdmaBoy","can_delete":false,"product_type":"c1","uid":1192626,"ip_address":"","ucode":"7B5A1901FB082E","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/b2/e22bb496.jpg","comment_is_top":false,"comment_ctime":1543200345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543200345","product_id":100017301,"comment_content":"最好是O(1),最坏是O(n),平均是O(1),均摊是O(1).","like_count":0},{"had_liked":false,"id":43058,"user_name":"nan","can_delete":false,"product_type":"c1","uid":1326228,"ip_address":"","ucode":"B3338FDFAD2EEF","user_header":"https://static001.geekbang.org/account/avatar/00/14/3c/94/fe14d548.jpg","comment_is_top":false,"comment_ctime":1543152763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543152763","product_id":100017301,"comment_content":"最好是O(1),最坏是O(n),平均平摊是O(1)","like_count":0},{"had_liked":false,"id":42790,"user_name":"RaymondJiang","can_delete":false,"product_type":"c1","uid":1168603,"ip_address":"","ucode":"D697B95751B959","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELKupib8WEjlcZficQ06juEBytdLmsRFRXDtDZGrTnu4ZiaG91Y9TootpAjEh1KoJdm4ubOHCibomXzbw/132","comment_is_top":false,"comment_ctime":1543045991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543045991","product_id":100017301,"comment_content":"大O表示法， 一句话，就是算法在最糟糕情况下的执行次数。表明随着N规模增大的情况下，算法的执行效率。","like_count":0},{"had_liked":false,"id":42420,"user_name":"杨蔓","can_delete":false,"product_type":"c1","uid":1198539,"ip_address":"","ucode":"9132EF5507811E","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/cb/7a116fc6.jpg","comment_is_top":false,"comment_ctime":1542951094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542951094","product_id":100017301,"comment_content":"老师您好，我想知道平均时间复杂度的计算公式： 1 X 1&#47;2n + 2 X 1&#47;2n + 3 X 1&#47;2n + ... + n X 1&#47;2n + n X 1&#47;2，这其中1，2，3 代表的是有多少位数字么？<br>那均摊时间复杂度中 ： 1 X 1&#47;(n+1) + 1 X 1&#47;(n+1) + ... + 1 X 1&#47;(n+1) + n X 1&#47;(n+1)，中1代表什么呢？<br>","like_count":0},{"had_liked":false,"id":42131,"user_name":"000000","can_delete":false,"product_type":"c1","uid":1071527,"ip_address":"","ucode":"6F71BA04910D0E","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/a7/3a182a9b.jpg","comment_is_top":false,"comment_ctime":1542930772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542930772","product_id":100017301,"comment_content":"i如果大于两倍的len，程序就报错","like_count":0},{"had_liked":false,"id":41701,"user_name":"dgg","can_delete":false,"product_type":"c1","uid":1316336,"ip_address":"","ucode":"87D2E614A6884D","user_header":"","comment_is_top":false,"comment_ctime":1542844166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542844166","product_id":100017301,"comment_content":"请问老师留言区jon的回复：<br>“最坏情况代码执行的次数跟每次数组的长度有关<br>第1次调用insert的执行的次数为 n ,<br>第2次调用insert的执行的次数为 2n ,<br>第3次调用insert的执行的次数为 2^2 * n <br>第k次调用insert的执行的次数为 2^(k-1) * n <br>最坏时间复杂度为 O(n)。”<br>因为第k次调用的执行次数2^（k-1）*n，所以最坏时间复杂度就是O（n）？这个时候2^（k-1）是一个随着调用次数不断指数增长的系数，判断最坏复杂度时不考虑它的影响吗？","like_count":0},{"had_liked":false,"id":41521,"user_name":"liutj","can_delete":false,"product_type":"c1","uid":1317490,"ip_address":"","ucode":"B62849BF2BB9D1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epdP2EdxIolEWoIw9afEM9xdU9QeLOlNXe1qYzOJiaIBZvuSicyFar0DIjdUwoicHzdDkXpkK7rJhZiaA/132","comment_is_top":false,"comment_ctime":1542799545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542799545","product_id":100017301,"comment_content":"时间复杂度分析分为四种情况：最好时间复杂度，最坏时间复杂度，平均时间复杂度，均摊时间复杂度<br>最好时间复杂度，基于最好情况分析。<br>最坏时间复杂度，基于最坏情况分析。<br>平均时间复杂度，如出现n次情况，将出现n次中每次情况乘以每次情况出现的概率在相加，除以n，再去常量就可以得到平均时间复杂度。<br>均摊时间复杂度，将最长的时间均摊至最短的时间上，再去常量，就可以得到均摊时间复杂度。<br><br>思考题答：最好复杂度O(1)，最坏复杂度O(n),均摊复杂度，O(1)。","like_count":0},{"had_liked":false,"id":41116,"user_name":"李王强","can_delete":false,"product_type":"c1","uid":1022799,"ip_address":"","ucode":"E5473E2019319F","user_header":"","comment_is_top":false,"comment_ctime":1542727580,"is_pvip":false,"replies":[{"id":"14785","content":"讲均摊的时候 我们一般就不提平均了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542764949,"ip_address":"","comment_id":41116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542727580","product_id":100017301,"comment_content":"请问老师，既然有均摊时间复杂度就是一种特殊的平均时间复杂度，那是不是有均摊复杂度，一定等于平均时间复杂度？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429702,"discussion_content":"讲均摊的时候 我们一般就不提平均了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542764949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40565,"user_name":"looker","can_delete":false,"product_type":"c1","uid":1186936,"ip_address":"","ucode":"B12C9202298E27","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/78/c9450e85.jpg","comment_is_top":false,"comment_ctime":1542632631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542632631","product_id":100017301,"comment_content":"<br>  \t思考题，最好时间复杂度是O(1)。 最坏时间复杂度O(1)。 每n次O(1)后伴随一次O(n),均摊时间复杂度为O(1)\t<br> <br>   \t复杂度分析除了 O(1), O(logn), O(n), O(nlogn) 等一些常见的复杂度分析外，还有一些复杂的<br>复杂度分析：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度等。<br>   \t最好时间复杂度，在最理想的情况下，执行某段代码的时间复杂度<br> \t最坏时间复杂度，在最坏的情况下，执行某段代码的时间复杂度<br> \t在最好情况和最坏情况下的时间复杂度都是对应的极端情况，发生概率不大，因此有了平均情况时间复杂度。类似于概率论中的期望值。<br> \t如要找 一个变量 x 在一个数组中出现的情况。  x 在第一个的情况下就是最好时间复杂度。 x 不在数组里的情况下，为最坏时间复杂度。 在不在数组中的概率分别是 1&#47;2，在数组中具体位置的概率又是 1&#47;n ,不在数组里情况下要查找 n 次， 所以为 1&#47;2n + 2&#47;2n + 3&#47;2n + ... + n&#47;2n + n&#47;2(不在数组中情况),结果为 (3n+1)&#47;4 ,根据大 O 表示法，即为 O(n)<br>   \t均摊时间复杂度，是一种特殊的平均时间复杂度。一般均摊时间复杂度等于最好时间复杂度。","like_count":0},{"had_liked":false,"id":40531,"user_name":"安安","can_delete":false,"product_type":"c1","uid":1167868,"ip_address":"","ucode":"48945BB74C720D","user_header":"https://static001.geekbang.org/account/avatar/00/11/d1/fc/7805ae91.jpg","comment_is_top":false,"comment_ctime":1542630260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542630260","product_id":100017301,"comment_content":"最好O（1），最坏O（n），均摊O（1）","like_count":0},{"had_liked":false,"id":40425,"user_name":"对方正在输入","can_delete":false,"product_type":"c1","uid":1257515,"ip_address":"","ucode":"57C3A444E33832","user_header":"https://static001.geekbang.org/account/avatar/00/13/30/2b/bc5873c6.jpg","comment_is_top":false,"comment_ctime":1542618319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542618319","product_id":100017301,"comment_content":"像以前读JVM 分析的时候, 都一天读完一篇,或者几天才读完一篇,因为枯燥乏味, 但是老师专栏一口气连续看四五篇,还回味无穷","like_count":0},{"had_liked":false,"id":40280,"user_name":"江嘉伟","can_delete":false,"product_type":"c1","uid":1297071,"ip_address":"","ucode":"F7775693DAF413","user_header":"https://static001.geekbang.org/account/avatar/00/13/ca/af/06b80e3f.jpg","comment_is_top":false,"comment_ctime":1542589007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542589007","product_id":100017301,"comment_content":"老师好，可以给出其他类型的代码实现吗？只有python的小白学这个有点吃力，语法有时候看不太懂","like_count":0},{"had_liked":false,"id":40054,"user_name":"Royce Lai","can_delete":false,"product_type":"c1","uid":1207638,"ip_address":"","ucode":"31DAD4D59679B0","user_header":"https://static001.geekbang.org/account/avatar/00/12/6d/56/74cb3bf6.jpg","comment_is_top":false,"comment_ctime":1542456983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542456983","product_id":100017301,"comment_content":"老师你好，没1+2+3+...n=n(n+1)&#47;2<br><br>那么(1+...n+n)&#47;(n+1)  不应该是 n(n+2)&#47;2（n+1）吗。<br><br>公式(n^2+2n)&#47;2(n+1)，时间复杂度为什么不是O(n^2)，而是O（n），如果忽略低阶项和高阶项系数的话<br>","like_count":0},{"had_liked":false,"id":39455,"user_name":"Silence","can_delete":false,"product_type":"c1","uid":1243499,"ip_address":"","ucode":"E1AF24BDFB40B3","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/6b/bf5fa838.jpg","comment_is_top":false,"comment_ctime":1542281583,"is_pvip":false,"replies":[{"id":"14187","content":"会的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542334226,"ip_address":"","comment_id":39455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542281583","product_id":100017301,"comment_content":"对于递归算法，老师能讲解一下吗。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429074,"discussion_content":"会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542334226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39427,"user_name":"Qingmei","can_delete":false,"product_type":"c1","uid":1304575,"ip_address":"","ucode":"64834289A2650D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/ff/58c94bc7.jpg","comment_is_top":false,"comment_ctime":1542273171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542273171","product_id":100017301,"comment_content":"1+2+3....+n+n ／ n+1 = n(n+3)&#47;2(n+1) 我觉得错了，应该是1+2+3....+n+n ／ n+1 = n(n+2)&#47;2(n+1) ","like_count":0},{"had_liked":false,"id":39426,"user_name":"Qingmei","can_delete":false,"product_type":"c1","uid":1304575,"ip_address":"","ucode":"64834289A2650D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/ff/58c94bc7.jpg","comment_is_top":false,"comment_ctime":1542273064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542273064","product_id":100017301,"comment_content":"最好的时间复杂度是O(1),最差是O(N)","like_count":0},{"had_liked":false,"id":39391,"user_name":"森晨","can_delete":false,"product_type":"c1","uid":1262940,"ip_address":"","ucode":"A23BE6B9762275","user_header":"https://static001.geekbang.org/account/avatar/00/13/45/5c/fc32c3de.jpg","comment_is_top":false,"comment_ctime":1542262347,"is_pvip":false,"replies":[{"id":"14099","content":"没有区别的 习惯而已","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542279777,"ip_address":"","comment_id":39391,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1542262347","product_id":100017301,"comment_content":"      for (int i = 0; i &lt; array.length; ++i)<br>大牛您好，我有个比较小白的问题想问一下，就是++i和i++。我知道前者是先自加1再去运算，后者是先运算完再自加1。那么您这里用++i而不用i++是有什么别的深意吗？还是它俩用哪个都行。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429043,"discussion_content":"没有区别的 习惯而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542279777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004375,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/57/787a0c7b.jpg","nickname":"刘少科Mico","note":"","ucode":"DD9610AB096D1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61919,"discussion_content":"哈哈，对于没赋值的表达式， 这两者没任何区别。假如int a=++i，  int b = i++;   a 和b的值就有区别。 是先用，还是先运算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574788494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39131,"user_name":"学个球","can_delete":false,"product_type":"c1","uid":1019725,"ip_address":"","ucode":"7343F3C0CA981D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/4d/65fb45e6.jpg","comment_is_top":false,"comment_ctime":1542195070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542195070","product_id":100017301,"comment_content":"1）最好情况时间复杂度：数组空间足够，正常进行数据插入，为O(1)<br>2）最坏情况时间复杂度：数据空间不足，申请新数组，进行复制操作,复杂度为O(n) , (O(n)=O(2n))因为是一个申请2倍数组空间的情况？不知道这么写对吗？<br>3）平均情况时间复杂度：当数组没有空闲空间的情况下，申请新的数组空间，进行复制操作，时间复杂度O(n),而对于其他的正常add操作，时间复杂度都为O(1),一共有n种情况，每种的概率均为1&#47;n,故时间复杂度为O(1)。<br>","like_count":0},{"had_liked":false,"id":39125,"user_name":"公众号：程序猿成神之路","can_delete":false,"product_type":"c1","uid":1287815,"ip_address":"","ucode":"7667A923578363","user_header":"https://static001.geekbang.org/account/avatar/00/13/a6/87/74778c13.jpg","comment_is_top":false,"comment_ctime":1542194464,"is_pvip":false,"replies":[{"id":"14046","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542247350,"ip_address":"","comment_id":39125,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542194464","product_id":100017301,"comment_content":"思考题时间复杂度是O(1),按照均摊或者平均时间复杂度来分析，其实最好是均摊，因为 :1.符合均摊分析情况  2.个人感觉均摊不需要详细的计算出值，用思维进行简单的分析计算即可    分析：最好最差时间复杂度之比位n：1   ，最好时间复杂度O（1），最差为O(n),所以大致思维处理即可得   (n+n)&#47;n  为常数，所以是O(1)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428929,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542247350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38955,"user_name":"null","can_delete":false,"product_type":"c1","uid":1125963,"ip_address":"","ucode":"037CE0B26F205E","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/4b/de04a33b.jpg","comment_is_top":false,"comment_ctime":1542161996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542161996","product_id":100017301,"comment_content":"刚看写的很好，最后add扩容和前面insert循环使用数组的复杂度在时间方面是一致的。作者说的insert的清空数组是把下标指到1重复使用数组，不需要重新开辟空间，这个时候只关心下标为0和1的数据，后面数据爱啥啥，下次再插入数据直接覆盖了，理解为清空就好了。至于add和insert在哪里调用，这里只是个例子，实际情况中看你设计这个方法的场景了，有可能是你自己内部调用，也有可能你设计的API给别人用，你就想你用Arraylist的时候调用add的时候在哪调用呀。","like_count":0},{"had_liked":false,"id":37930,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1541814721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541814721","product_id":100017301,"comment_content":"len&#47;len *1 + 1&#47;len *len = 2 所以均分是O（1）最好是O（1）最差是O（N）","like_count":0},{"had_liked":false,"id":37859,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1541754361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541754361","product_id":100017301,"comment_content":"思考题<br>最好时间复杂度 O(1)<br>最坏时间复杂度 O(2n)<br>平均时间复杂度&#47;均摊时间复杂度 :O(1)<br>均摊时间复杂度分析：1*1&#47;(1+n)+1*1&#47;(1+n)+......+2n*1&#47;(1+n)=O(2) 常量级的时间复杂度所以相当于O(1)","like_count":0},{"had_liked":false,"id":37813,"user_name":"hexintong","can_delete":false,"product_type":"c1","uid":1153659,"ip_address":"","ucode":"8047A50D9B1FCE","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/7b/8a2225fa.jpg","comment_is_top":false,"comment_ctime":1541733111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541733111","product_id":100017301,"comment_content":"老师，我感觉不能在遍历之前就认为在与不在范围内的概率为1&#47;2呀。只有你遍历之完之后，才知道到底是否在范围以内。所以不在范围以内和其中每个元素的概率是相等的。我的理解不知道对不对。","like_count":0},{"had_liked":false,"id":37718,"user_name":"Kevin.zhang🌏","can_delete":false,"product_type":"c1","uid":1247039,"ip_address":"","ucode":"5C52AE51538906","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/3f/53ae01f6.jpg","comment_is_top":false,"comment_ctime":1541692360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541692360","product_id":100017301,"comment_content":"四个复杂度概念","like_count":0},{"had_liked":false,"id":37126,"user_name":"宝山吴彦祖","can_delete":false,"product_type":"c1","uid":1282869,"ip_address":"","ucode":"9074739740A259","user_header":"https://static001.geekbang.org/account/avatar/00/13/93/35/f90f4844.jpg","comment_is_top":false,"comment_ctime":1541465131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541465131","product_id":100017301,"comment_content":"虚心学习，明天重温第二遍。定有新的收获。<br>很多代码，就是在空间，时间上的选择。","like_count":0},{"had_liked":false,"id":36495,"user_name":"txsjava","can_delete":false,"product_type":"c1","uid":1182416,"ip_address":"","ucode":"B43926A31813E7","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/d0/ae2ea419.jpg","comment_is_top":false,"comment_ctime":1541128996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541128996","product_id":100017301,"comment_content":"老师，均摊复杂度代码感觉不是很完善，是不是外围少一个循环调用insert的方法","like_count":0},{"had_liked":false,"id":36409,"user_name":"wlgbsj","can_delete":false,"product_type":"c1","uid":1166826,"ip_address":"","ucode":"B42CEC848E4951","user_header":"https://static001.geekbang.org/account/avatar/00/11/cd/ea/627bb931.jpg","comment_is_top":false,"comment_ctime":1541087688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541087688","product_id":100017301,"comment_content":"平均时间复杂度：单次复杂度*对应概率  求和<br>均摊时间复杂度，这个用于针对单次复杂度规律变化，例如：n-1次O（1）一次O（n）这种情况，也可以类推，均摊出去。<br>这个题的答案应该是 时间复杂度为O（1）<br>","like_count":0},{"had_liked":false,"id":36390,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1541076367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541076367","product_id":100017301,"comment_content":"1. 最好情况时间复杂度 O(1) ，数组空间足够,不进入if。<br>2. 最坏情况时间复杂度 O(n) , 数组空间不足，进入for循环，len其实是个变量，每次空间不足都会增大为2n,忽略常数所以为 O(n)。<br>3. 平均和均摊时间复杂度都是 O(1), 大多数情况下空间都足够都是 O(1)，少数情况是O（n)，所以平均均摊是 O(1)。","like_count":0},{"had_liked":false,"id":35978,"user_name":"乘坐Tornado的线程魔法师","can_delete":false,"product_type":"c1","uid":1132661,"ip_address":"","ucode":"C4C9915866E769","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","comment_is_top":false,"comment_ctime":1540880342,"is_pvip":false,"replies":[{"id":"12826","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540950350,"ip_address":"","comment_id":35978,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540880342","product_id":100017301,"comment_content":"请问空间复杂度是O(n)吗，空间复杂度里面不存在最好、最坏、平均和均摊的说法吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427724,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540950350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35943,"user_name":"chang.xu","can_delete":false,"product_type":"c1","uid":1244613,"ip_address":"","ucode":"51C230B833A214","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/c5/1f13bed2.jpg","comment_is_top":false,"comment_ctime":1540866485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540866485","product_id":100017301,"comment_content":"不明确的地方，对于练习题。<br>变量 i 和 len 都是定义了数值的整型，如果这样的话if的条件不会触发，时间复杂度只能是 O(1).<br>如果说 i和len的值是可变的，那答案应该和置顶评论一致，但这点应该在题中明确吧？为什么要给它们赋值？请做说明","like_count":0},{"had_liked":false,"id":35885,"user_name":"ganas","can_delete":false,"product_type":"c1","uid":1275469,"ip_address":"","ucode":"E160BCAD067E00","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/4d/080da8c0.jpg","comment_is_top":false,"comment_ctime":1540833233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540833233","product_id":100017301,"comment_content":"我是不理解错了，感觉insert函数的数组长度一直是n，没有新增额外的空间。而add函数当数组空间不够就空间就扩大2倍，是不insert函数更优？","like_count":0},{"had_liked":false,"id":35691,"user_name":"夏洛克的救赎","can_delete":false,"product_type":"c1","uid":1021334,"ip_address":"","ucode":"44453DD27A3216","user_header":"https://static001.geekbang.org/account/avatar/00/0f/95/96/0020bd67.jpg","comment_is_top":false,"comment_ctime":1540753866,"is_pvip":false,"replies":[{"id":"12699","content":"那你觉得应该怎样才算清空呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540777487,"ip_address":"","comment_id":35691,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540753866","product_id":100017301,"comment_content":"我先来解释一下这段代码。这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。<br><br>清空数组？数组长度不还是n吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427628,"discussion_content":"那你觉得应该怎样才算清空呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540777487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35648,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1540729237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540729237","product_id":100017301,"comment_content":"对均摊复杂度有了更好的理解","like_count":0},{"had_liked":false,"id":35204,"user_name":"木木木","can_delete":false,"product_type":"c1","uid":1240679,"ip_address":"","ucode":"5EBC11AB704EF2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/67/d6d9499e.jpg","comment_is_top":false,"comment_ctime":1540458472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540458472","product_id":100017301,"comment_content":"基本上是各种arraylist的实现，通过resize底层数组来实现空间不足时自动增长。支持高效随机访问，add最后元素的效率均分为o1。","like_count":0},{"had_liked":false,"id":35175,"user_name":"巫木灵","can_delete":false,"product_type":"c1","uid":1252631,"ip_address":"","ucode":"891D576EC7D37D","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/17/72b69214.jpg","comment_is_top":false,"comment_ctime":1540446496,"is_pvip":false,"replies":[{"id":"12575","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540516204,"ip_address":"","comment_id":35175,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540446496","product_id":100017301,"comment_content":"最后一题 答案是O（1）吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427468,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540516204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34760,"user_name":"joey","can_delete":false,"product_type":"c1","uid":1239743,"ip_address":"","ucode":"1C8B2BE81C2A5D","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/bf/34f02502.jpg","comment_is_top":false,"comment_ctime":1540286677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540286677","product_id":100017301,"comment_content":"这个例子如何对比复杂度<br>例1 这里for嵌套 直接doA<br>for（）｛<br>     for（）｛<br>               doA<br>      ｝<br>｝<br>例2 这里 for 里面通过一个复杂的if判断然后doA<br>for（）｛<br>      if（）｛<br>             do something....<br>      ｝else if（）｛<br>             do something....<br>      ｝else｛<br>             ....<br>      ｝<br>      do something...<br>      doA<br>｝<br>do something 中没有任何循环 只是一些逻辑处理","like_count":0},{"had_liked":false,"id":34632,"user_name":"吴峰","can_delete":false,"product_type":"c1","uid":1240016,"ip_address":"","ucode":"49FC23A807F674","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/d0/56977a90.jpg","comment_is_top":false,"comment_ctime":1540224823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540224823","product_id":100017301,"comment_content":"1、最好情况复杂度：\r    当i小于len时，最好情况时间复杂度为O(1)；\r\r2、最坏情况时间复杂度：\r    当i大于等于len时，最坏情况时间复杂度为O(n);\r\r3、平均情况时间复杂度：\r由代码可知：此段代码执行全部的过程需要i从0到len，所以需要len+1次，所以概率为1&#47;(len+1)；\r因为加权平均平均值为（数1*权值1）+（数2*权值2）\r因为此次发生的次数为len+1，且概率为1&#47;(len+1)；所以加权平均值为1*概率+1*概率+1*概率+len*概率=O(1)  前面有len个1*概率\r4、均摊情况时间复杂度：\r因为存在均摊的关系，每次O(len)前都会有len次O(1)，所以均摊下来为O(1)；","like_count":0},{"had_liked":false,"id":34599,"user_name":"ForzaJuve","can_delete":false,"product_type":"c1","uid":1047302,"ip_address":"","ucode":"E090D83AE78EE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/06/0e6b6365.jpg","comment_is_top":false,"comment_ctime":1540215663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540215663","product_id":100017301,"comment_content":"今天学习了几个复杂度分析相关的概念<br>what:<br>1.最坏情况时间复杂度：代码在最理想情况下执行的时间复杂度。<br>2.最好情况时间复杂度：代码在最坏情况下执行的时间复杂度。<br>3.平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。<br>4.均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。<br><br>why:<br>之所以引入这几个复杂度概念，是因为，同一段代码，在不同输入的情况下复杂度量级可能不一样<br>在引入这几个概念之后，我们可以更加全面地表示一段代码的执行效率<br><br>how:<br>有实例讲解，并课后完成了练习题","like_count":0},{"had_liked":false,"id":34586,"user_name":"LIU","can_delete":false,"product_type":"c1","uid":1248484,"ip_address":"","ucode":"960CF6F7D3C067","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/e4/c38c5306.jpg","comment_is_top":false,"comment_ctime":1540213535,"is_pvip":false,"replies":[{"id":"12305","content":"自己算算吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540221429,"ip_address":"","comment_id":34586,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540213535","product_id":100017301,"comment_content":"1+2+3....+n+n ／ n+1 = n(n+3)&#47;2(n+1) 老师这个公式的n+3是怎么回事？谢谢老师","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427260,"discussion_content":"自己算算吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540221429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34531,"user_name":"四月雨","can_delete":false,"product_type":"c1","uid":1247389,"ip_address":"","ucode":"797B1B955932BD","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/9d/05ac8247.jpg","comment_is_top":false,"comment_ctime":1540199431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540199431","product_id":100017301,"comment_content":"课后的add()函数：<br>最好情况时间复杂度：O(1)<br>最坏情况时间复杂度：O(n)<br>平均情况时间复杂度：O(1)<br>均摊时间复杂度：O(1)","like_count":0},{"had_liked":false,"id":34510,"user_name":"皮蛋","can_delete":false,"product_type":"c1","uid":1202619,"ip_address":"","ucode":"8384CC338549EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/bb/caf2b06c.jpg","comment_is_top":false,"comment_ctime":1540195519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540195519","product_id":100017301,"comment_content":"add函数的最好时间复杂度为O(1)，最差的时间复杂度为O(n)。<br>平均复杂度为O(1)，因为：<br>当数组i &lt; len时，直接插入数据到数组即可，时间复杂度为O(1)。当i &gt;= len时，需要将原数组下标0到(len-1)的元素都复制到新数组，再插入数据，时间复杂度为O(n)。将每种情况发生的概率与其时间复杂度相乘后相加即：1*(1&#47;n+1)+1*(1&#47;n+1)+...+1*(1&#47;n+1)+n*(1&#47;(n+1))=1。<br>所以加权平均时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":34480,"user_name":"Bamboo","can_delete":false,"product_type":"c1","uid":1230934,"ip_address":"","ucode":"FD3F00BEA45C7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c8/56/3117fd48.jpg","comment_is_top":false,"comment_ctime":1540185731,"is_pvip":false,"replies":[{"id":"12310","content":"对的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540221812,"ip_address":"","comment_id":34480,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540185731","product_id":100017301,"comment_content":"抱歉，写错了，是1&#47;2，当nwei1时，存在或不存在2种情况，那平均复杂度是1&#47;2，按照您的讲解和公式推导，得到的结果是1，不知道我的理解对不对?","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427222,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540221812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34415,"user_name":"星辰","can_delete":false,"product_type":"c1","uid":1250479,"ip_address":"","ucode":"02C927973CC1B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/af/a60af13f.jpg","comment_is_top":false,"comment_ctime":1540167977,"is_pvip":false,"replies":[{"id":"12345","content":"能具体说说吗 没看懂你说的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540259036,"ip_address":"","comment_id":34415,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540167977","product_id":100017301,"comment_content":"假设数组未满，不需要知道下标就可以直接插入吗<br>count 不是0吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427202,"discussion_content":"能具体说说吗 没看懂你说的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540259036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34390,"user_name":"一魄","can_delete":false,"product_type":"c1","uid":1134574,"ip_address":"","ucode":"71541125D4AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","comment_is_top":false,"comment_ctime":1540139466,"is_pvip":false,"replies":[{"id":"12273","content":"你有点误解 我的意思是insert被调用很多次的情况下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540174716,"ip_address":"","comment_id":34390,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540139466","product_id":100017301,"comment_content":"老师好，关于均摊分析过程中，有个问题想了很久没明白，希望你能指点一下。<br>O(n)情况，调用insert方法，求和的循环体执行了n遍，之后就是顺序执行把数组头个元素重置，并清空数组后面的元素。跳出if语句之后，再顺序执行后面两句，insert方法调用就结束了吧，就算 ++count 了，也不会循环之前的代码了，这是我的理解。所以我一直想着 O(n)情况之后没有 n-1 次 O(1)。<br>希望得到老师的解答。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427194,"discussion_content":"你有点误解 我的意思是insert被调用很多次的情况下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540174716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34344,"user_name":"Bamboo","can_delete":false,"product_type":"c1","uid":1230934,"ip_address":"","ucode":"FD3F00BEA45C7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c8/56/3117fd48.jpg","comment_is_top":false,"comment_ctime":1540119922,"is_pvip":false,"replies":[{"id":"12274","content":"你先说说n=1的时候为啥是2啊 不合理啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540174842,"ip_address":"","comment_id":34344,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540119922","product_id":100017301,"comment_content":"王老师，您好，想请教一下你均衡算法里面算法公式是怎么得到的?第一个算法公式根据您提供的条件，如果按照您的公式n(n+3)&#47;2(n+1)，当n为1时，结果是1，实际结果不应该是2吗，公式推理不出来，这个算法理不清，劳烦您说一下详细的推理过程，包括后面的所有公式，谢谢!","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427180,"discussion_content":"你先说说n=1的时候为啥是2啊 不合理啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540174842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34266,"user_name":"帮主","can_delete":false,"product_type":"c1","uid":1235675,"ip_address":"","ucode":"CF35859311F3D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/db/b6129439.jpg","comment_is_top":false,"comment_ctime":1540054178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540054178","product_id":100017301,"comment_content":"最好、最坏、平均、均摊时间复杂度<br>1.最好复杂度：理想情况下，最低时间复杂度<br>2.最坏复杂度：最糟糕情况下，耗时最长时间复杂度<br>3.平均复杂度：也叫加权平均复杂度或期望时间复杂度，是每种情况概率加权后的平均值复杂度<br>4.均摊复杂度：大部分情况复杂度低，特殊情况复杂度高，且这些情况前后有连贯时序关系，可以尝试把高复杂度的操作耗时平摊到其他情况。一般均摊复杂度就等于最好情况复杂度","like_count":0},{"had_liked":false,"id":34265,"user_name":"祝枝山","can_delete":false,"product_type":"c1","uid":1233081,"ip_address":"","ucode":"BE29B20A9A411B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/b9/0323fc75.jpg","comment_is_top":false,"comment_ctime":1540053387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540053387","product_id":100017301,"comment_content":"情况出现的概率粗暴的理想化，减少了计算难度和理解难度。但是这样已经不能正确评估出定义下的复杂度了。知道了这样的衡量方法，但在算法中难以使用，更不用说用它改进算法了。这样看理解这种概念好像也没什么用，就像茴香豆的四种写法，希望老师谈一谈如何解决里面出现概率的问题，以及如何用这些衡量标准改进优化代码，要不然不知道怎么用在实践中","like_count":0},{"had_liked":false,"id":34156,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1540023990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540023990","product_id":100017301,"comment_content":"阅后留痕<br>上一篇，老师已经讲解了复杂度分析的分析方法，本节老师继续讲解有关复杂度分析的相关概念。<br><br>1：为什么要讲这几个概念呢？<br>为了表示代码在不同情况下的不同时间复杂度，上一节的时间复杂度分析的核心变量只有一个数据规模n，这一节的讲解，我觉得是因为又引入了，其他的一些变量，当然实际的编程工作中，许多的算法也是这样的，除了数据规模还有就是操作的数据本身，以及算法的需求本身会多出一些变化因素，这些因素的不同也能导致不同时间复杂度。并且同一块代码在不同情况之下，时间复杂度有量级上的差距，我们为了更加全面的描述一个算法的时间复杂度，才会对这类算法进行更加全面的评估。<br><br>2：几个新的有关时间复杂度的概念？<br>2-1）最好情况时间复杂度<br>         在最理想的情况下，执行一段代码的时间复杂度，量级最小的那个，小概率事件<br>2-2）最坏情况时间复杂度<br>          在最糟糕的情况下，执行一段代码的时间复杂度，量级最大的那个，小概率事件<br>2-3）平均时间复杂度<br>           引入概率的概念更加准确的表达了一个多变量引起时间复杂度变化的概念，将每一种情况的时间复杂求和，然后除以总情况数，获取时间复杂度的平均值，更为准去和全面的时间复杂度分析方式。<br>2-4）平摊情况时间复杂度<br>          针对大部分情况下时间复杂度不高，个别情况时间复杂度高的情况，并且他们之间有一定的先后关系，可以将复杂度高的情况平摊到复杂度低的情况之上得到一个更加均衡的时间复杂度。<br>           这个概念和平均时间复杂度非常相像，也比较容易弄混，只是他们的场景不太一样，分析思路也是有所差异，但是他们的结果往往相同。<br><br>学习复杂度分析，最核心的目的是为了衡量算法的优劣，算法的优劣关键点在于，是否够快，是否够省空间，有时候为了更快会情愿多费一些空间，毕竟在人类看来，时间比空间更加的重要，时间一去不复还，更加的稀缺和宝贵，空间尚可以付出代价加以扩展。<br><br>不学习时间复杂度凭感觉，能看出算法的优劣吗？<br>我感觉也能，可能不够准确，但是单从代码的是否易读？是否做的事情过多？是否使用了过多的变量？等等也能大概看出代码的优劣，可能和性能也是相关联的。毕竟多做事情，正是费时费空间的关键所在，性能优化的核心点也在于少做事情，实在不能就让做的快的多做一些事情。","like_count":0},{"had_liked":false,"id":33710,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1156724,"ip_address":"","ucode":"C0B627721FABF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a6/74/1c86b1f8.jpg","comment_is_top":false,"comment_ctime":1539859697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539859697","product_id":100017301,"comment_content":"棒，解释的清楚明白","like_count":0},{"had_liked":false,"id":33693,"user_name":"1024","can_delete":false,"product_type":"c1","uid":1086407,"ip_address":"","ucode":"DCC31F6EC54F43","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/c7/86352ccc.jpg","comment_is_top":false,"comment_ctime":1539854401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539854401","product_id":100017301,"comment_content":"所学：<br>同一段代码在不同的输入下，时间复杂度的量及可能不一样<br>所以引入最好、最坏时间复杂度<br>平均时间复杂度将每次执行的次数及每次的概率考虑进去，求期望值<br>均摊时间复杂度：是一种分析方法，将某次的时间复杂度分摊到其他时间复杂度上<br>思考题：利用均摊复杂度分析：只有很少的情况下会是O(n),其他n或2n（xn）次是O(1)。所以时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":33635,"user_name":"Novapath ☀","can_delete":false,"product_type":"c1","uid":1256605,"ip_address":"","ucode":"A65E5AB8B58E1C","user_header":"https://static001.geekbang.org/account/avatar/00/13/2c/9d/e5af3fd4.jpg","comment_is_top":false,"comment_ctime":1539840558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539840558","product_id":100017301,"comment_content":"04 复杂度分析（下）<br><br>一、时间复杂度分析的四个概念<br><br>最好情况时间复杂度：代码在最理想情况下执行的时间复杂度。<br><br>最坏情况时间复杂度：代码在最坏情况下执行的时间复杂度。<br><br>平均情况时间复杂度：代码在所有执行情况下的加权平均（期望）时间复杂度<br>平均复杂度 = 所有情况的时间复杂度&#47;情况次数<br><br>均摊时间复杂度：在代码执行的所有复杂度情况中，大部分是低级别的复杂度，个别情况执行的时间复杂度较高，且这些操作用时序关系，则可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。 均摊复杂度是特殊的平均情况时间复杂度。<br><br>二、四个概念的意义<br><br>为了表示代码在不同情况下的不同时间复杂度<br>代码的时间复杂度出现量级的差异时，需要区分；大多数情况下不用分析。<br><br>三、分析平均和均摊时间复杂度<br><br>平均时间复杂度：代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。<br><br>均摊时间复杂度：两个条件满足时使用：<br>1.代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；<br>2.低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。","like_count":0},{"had_liked":false,"id":33526,"user_name":"蓝色~冰*羽","can_delete":false,"product_type":"c1","uid":1205873,"ip_address":"","ucode":"E2F6424766AD7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/71/8a5d02ab.jpg","comment_is_top":false,"comment_ctime":1539822106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539822106","product_id":100017301,"comment_content":"上节专栏您说过，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度就是O(1)，但是<br>2n&#47;(n+1)公式转化后为2-(2&#47;(n+1))，那么随着n的增加，整个式子是变大的啊，按照之前您说的，这个式子的复杂度至少不是O(1)","like_count":0},{"had_liked":false,"id":33495,"user_name":"Wilson","can_delete":false,"product_type":"c1","uid":1007140,"ip_address":"","ucode":"3ADBE962C67B8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/24/040855d3.jpg","comment_is_top":false,"comment_ctime":1539794550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539794550","product_id":100017301,"comment_content":"最好复杂度和最坏复杂度比较容易理解，平均复杂度和均摊复杂度有点难理解。在多看几次在懂了","like_count":0},{"had_liked":false,"id":33492,"user_name":"蓝色~冰*羽","can_delete":false,"product_type":"c1","uid":1205873,"ip_address":"","ucode":"E2F6424766AD7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/71/8a5d02ab.jpg","comment_is_top":false,"comment_ctime":1539793715,"is_pvip":false,"replies":[{"id":"12098","content":"分子分母是同阶的 可以约分的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539856767,"ip_address":"","comment_id":33492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539793715","product_id":100017301,"comment_content":" 1*1&#47;(n+1)+.......+1*1&#47;(n+1)+n*1&#47;(n+1)复杂度怎么会是O(1)呢？n个1*1&#47;(n+1)表示数组是空闲时的复杂度，<br>n*1&#47;(n+1)表示是数组满后的复杂度，那加起来复杂度也应是2n&#47;(n+1)啊<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426974,"discussion_content":"分子分母是同阶的 可以约分的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539856767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33282,"user_name":"精霊剣舞祭","can_delete":false,"product_type":"c1","uid":1237665,"ip_address":"","ucode":"3F012FC569FB58","user_header":"","comment_is_top":false,"comment_ctime":1539770639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539770639","product_id":100017301,"comment_content":"只有第一次是n次o（1）后执行一次o（n），其余情况都是n&#47;2次o（1）执行一次o（n），不过不影响结果，均摊都是o（1）","like_count":0},{"had_liked":false,"id":33211,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1267263,"ip_address":"","ucode":"F71A41C4A92035","user_header":"","comment_is_top":false,"comment_ctime":1539759477,"is_pvip":false,"replies":[{"id":"12047","content":"java不会 c语言会","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539788088,"ip_address":"","comment_id":33211,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539759477","product_id":100017301,"comment_content":"老师您好，我想请教一下，最后的程序是否会有内存泄漏呀，可以解释一下16行，为什么不会造成泄露吗？谢谢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426948,"discussion_content":"java不会 c语言会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539788088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32854,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1539703712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539703712","product_id":100017301,"comment_content":"老师，您好！<br>关于计算平均时间复杂度的例子：要查找的变量 x 在数组中的位置，有 n+1 种情况。<br>还是想不明白，这 n+1 种情况出现的概率为啥不一样，为啥每种情况出现的概率不是 1&#47;(n+1)？<br><br>针对加权平均时间复杂度和均摊时间复杂度的区别，不知道理解是否正确：<br>1. 加权平均时间复杂度：各种情况发生的概率不一样。<br>2. 均摊时间复杂度：各种情况发生的概率一样。<br>3. 均摊时间复杂度是加权平均时间复杂度特殊的一种。<br><br>谢谢老师！！","like_count":0},{"had_liked":false,"id":32703,"user_name":"Zherlock","can_delete":false,"product_type":"c1","uid":1248208,"ip_address":"","ucode":"02D321D434E72C","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/d0/a5eacd8c.jpg","comment_is_top":false,"comment_ctime":1539672283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539672283","product_id":100017301,"comment_content":"练习题最好O(1)，最坏是O(n)。均摊下来还是O(1)~。这节课讲了利用概率论来分析平均复杂度，感觉还是平均复杂度最有用，但是最好最坏复杂度比较直观。均摊是一种很聪明的分析方法","like_count":0},{"had_liked":false,"id":32698,"user_name":"MixReality","can_delete":false,"product_type":"c1","uid":1266351,"ip_address":"","ucode":"26F0FBCEA8C883","user_header":"https://static001.geekbang.org/account/avatar/00/13/52/af/15703add.jpg","comment_is_top":false,"comment_ctime":1539671300,"is_pvip":false,"replies":[{"id":"11945","content":"还真没有😄","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539702289,"ip_address":"","comment_id":32698,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539671300","product_id":100017301,"comment_content":"你一个平均时间复杂度的计算过程的图, 最后一个算式写错了吧, n * 1&#47; 2n, 少了个 n","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426863,"discussion_content":"还真没有😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539702289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32671,"user_name":"小六子","can_delete":false,"product_type":"c1","uid":1046542,"ip_address":"","ucode":"B4E48C9AAF2030","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/0e/7a992528.jpg","comment_is_top":false,"comment_ctime":1539661051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539661051","product_id":100017301,"comment_content":"概率论部分没懂，数学基础太弱了，看来有机会还要补一下概率论的知识。","like_count":0},{"had_liked":false,"id":32439,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1539573520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539573520","product_id":100017301,"comment_content":"要的就是这种重点突出，观点鲜明，点到本质的文章，谢谢分享","like_count":0},{"had_liked":false,"id":32248,"user_name":"流玥","can_delete":false,"product_type":"c1","uid":1237934,"ip_address":"","ucode":"E565C98491FE3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/ae/6c28b7ad.jpg","comment_is_top":false,"comment_ctime":1539497494,"is_pvip":false,"replies":[{"id":"11745","content":"大兄弟，你认真读写开头，不都有嘛","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539528163,"ip_address":"","comment_id":32248,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539497494","product_id":100017301,"comment_content":"平均，均摊，的英文是怎么说的呀","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426697,"discussion_content":"大兄弟，你认真读写开头，不都有嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539528163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32222,"user_name":"展飞","can_delete":false,"product_type":"c1","uid":1265637,"ip_address":"","ucode":"8799F60131C291","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/e5/381ca282.jpg","comment_is_top":false,"comment_ctime":1539487643,"is_pvip":false,"replies":[{"id":"11747","content":"嗯嗯 不过请你给说说哪里矛盾了呢？你怎么理解的觉得茅盾的呢？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539528300,"ip_address":"","comment_id":32222,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539487643","product_id":100017301,"comment_content":"#首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()第一个区别于 find() 的地方。#<br><br>初次读这段话时让人感觉作者写的自相矛盾，当再读几遍或者读完剩下的再回头看时才理解。所以作者语言上还需要提炼<br><br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426687,"discussion_content":"嗯嗯 不过请你给说说哪里矛盾了呢？你怎么理解的觉得茅盾的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539528300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32206,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1539484095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539484095","product_id":100017301,"comment_content":"“假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。 ”         这种额外的情况不可能发生吧   毕竟 数组长度等于count的时候就清空了","like_count":0},{"had_liked":false,"id":32090,"user_name":"哈希碰撞","can_delete":false,"product_type":"c1","uid":1244496,"ip_address":"","ucode":"DF82678E60095D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM49ONuR097wB6LqR8nn5kWiaQiaPic1y8UznibDOScQergTj5qeL6zQ4bIicYEkqlMiash3CUCAYmSt9tQA/132","comment_is_top":false,"comment_ctime":1539411890,"is_pvip":false,"replies":[{"id":"11768","content":"github上搜wangzheng0822   嗯老哥嗯   关于数学的书对吧？其实感觉不用啊 你遇到不懂的公式就百度一下就好了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539529547,"ip_address":"","comment_id":32090,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539411890","product_id":100017301,"comment_content":"请问老师你的githup地址是？<br>nlogn，怎么读？ 没有数学的基础，请老师推荐几本关于数据的书。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426632,"discussion_content":"github上搜wangzheng0822   嗯老哥嗯   关于数学的书对吧？其实感觉不用啊 你遇到不懂的公式就百度一下就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539529547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32031,"user_name":"加油","can_delete":false,"product_type":"c1","uid":1248587,"ip_address":"","ucode":"53C43E017ECA09","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/4b/d5d859d8.jpg","comment_is_top":false,"comment_ctime":1539393826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539393826","product_id":100017301,"comment_content":"阅","like_count":0},{"had_liked":false,"id":32014,"user_name":"TripleU","can_delete":false,"product_type":"c1","uid":1243200,"ip_address":"","ucode":"AB5E55350730DC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/40/8d11464c.jpg","comment_is_top":false,"comment_ctime":1539362321,"is_pvip":false,"replies":[{"id":"11599","content":"这要涉及到概率分布，我的描述可能引起了你的误解。我的意思是：insert大部分情况下都很快，find大部分情况下都很慢。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539401686,"ip_address":"","comment_id":32014,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539362321","product_id":100017301,"comment_content":"为什么说insert 时间复杂度大部分为o1 而find在个别时候为o1 我觉得他们都是一样的啊  最好o1 最坏on啊 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426609,"discussion_content":"这要涉及到概率分布，我的描述可能引起了你的误解。我的意思是：insert大部分情况下都很快，find大部分情况下都很慢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539401686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31936,"user_name":"༒","can_delete":false,"product_type":"c1","uid":1205636,"ip_address":"","ucode":"30780384E963C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/84/f715dda2.jpg","comment_is_top":false,"comment_ctime":1539334410,"is_pvip":false,"replies":[{"id":"11609","content":"可以感性的这么理解","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539403465,"ip_address":"","comment_id":31936,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539334410","product_id":100017301,"comment_content":"您好，这是一个关于时间复杂度的问题 ，希望您能解答一下：<br>您说find极端情况下为时间复杂度O（1），而insert大部分情况时间复杂度为O（1）,那我可不可以理解为find的平均时间复杂度为O（n）所以它大部分的情况下，复杂度为O（n），极端状况为O（1）,insert同理；","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426571,"discussion_content":"可以感性的这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539403465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31871,"user_name":"孤岛","can_delete":false,"product_type":"c1","uid":1242777,"ip_address":"","ucode":"60AFA6A27FB0D9","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/99/114bfea1.jpg","comment_is_top":false,"comment_ctime":1539316283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539316283","product_id":100017301,"comment_content":"在我印象中，C语言数组清空的话好像必须重新置为空，java好像直接覆盖就行，大神来看看我说的对吗？","like_count":0},{"had_liked":false,"id":31870,"user_name":"Qiubh","can_delete":false,"product_type":"c1","uid":1072658,"ip_address":"","ucode":"3BC33EC44F2FDE","user_header":"https://static001.geekbang.org/account/avatar/00/10/5e/12/c0c4d6f2.jpg","comment_is_top":false,"comment_ctime":1539316271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539316271","product_id":100017301,"comment_content":"引入概率之后，前面那段代码的加权平均值为 (3n+1)&#47;4, 没引入之前需要除以(n+1),引入之后是(1+2+3+...+n)*(1&#47;2n)+n*1&#47;2，每种情况的概率加起来代表什么，为什么不用除以(n+1)了？","like_count":0},{"had_liked":false,"id":31846,"user_name":"浅唱科比","can_delete":false,"product_type":"c1","uid":1210464,"ip_address":"","ucode":"6E2154FC7225F9","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/60/9642b8e9.jpg","comment_is_top":false,"comment_ctime":1539310501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539310501","product_id":100017301,"comment_content":"王老师，请教个问题， “假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为n种情况，每种情况时间复杂度为O(1)”,,为啥是O(1)呢?","like_count":0},{"had_liked":false,"id":31753,"user_name":"Bupt_daydayup","can_delete":false,"product_type":"c1","uid":1248375,"ip_address":"","ucode":"5E2BBE695288B5","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/77/d855bfb2.jpg","comment_is_top":false,"comment_ctime":1539278344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539278344","product_id":100017301,"comment_content":"涉及量级运算才一般会用","like_count":0},{"had_liked":false,"id":31682,"user_name":"新锣肉粒多","can_delete":false,"product_type":"c1","uid":1191493,"ip_address":"","ucode":"1AB2A87277DE45","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/45/58edc87a.jpg","comment_is_top":false,"comment_ctime":1539264413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539264413","product_id":100017301,"comment_content":"看了两遍 第一遍理了花了很多时间也没咋搞懂 看了第二遍才懂 均摊：把有前后次序的大多数操作和极少数操作看作整体  把极少数操作看成当大多数操作完成后的必然 均摊复杂度也就是大多数操作的复杂度了。笔芯(ฅ&gt;ω&lt;*ฅ)","like_count":0},{"had_liked":false,"id":31679,"user_name":"jerryhitit","can_delete":false,"product_type":"c1","uid":1036630,"ip_address":"","ucode":"5D22B93122917A","user_header":"https://wx.qlogo.cn/mmopen/vi_32/8MYMIAyRyAWVUAolU5Hhfric9vITU1FktHEECrFs2HicLyLHsZrnvez8DIkcEnzqqAnyKOVpLXt2ia30GAYTD1RuA/132","comment_is_top":false,"comment_ctime":1539263661,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1539263661","product_id":100017301,"comment_content":"add()函数使用摊还分析法进行分析。函数在执行(len-1)次时间复杂度为O(1)的添加操作后会执行一次时间复杂度为O(len)数组维数扩展的操作。将维数扩展操作的时间复杂度从逻辑上摊还到总计len次操作中，整体函数时间复杂度仍可认为是O(1)。","like_count":0},{"had_liked":false,"id":31675,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1025030,"ip_address":"","ucode":"62A89FD460827A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/06/cf6b6d0f.jpg","comment_is_top":false,"comment_ctime":1539261424,"is_pvip":false,"replies":[{"id":"11406","content":"我后面会讲，先别急","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539268664,"ip_address":"","comment_id":31675,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539261424","product_id":100017301,"comment_content":"请问递归情况下时间复杂度该怎么分析呢，一团乱麻😂","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426462,"discussion_content":"我后面会讲，先别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539268664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31607,"user_name":"朱雯","can_delete":false,"product_type":"c1","uid":1035744,"ip_address":"","ucode":"064C45FBF6B51F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","comment_is_top":false,"comment_ctime":1539245072,"is_pvip":true,"replies":[{"id":"11379","content":"看看其他同学的留言吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539255959,"ip_address":"","comment_id":31607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539245072","product_id":100017301,"comment_content":"我怎么看都是O(1)啊这个程序不存在其他情况吧，并不存在任意变量，也就没其他可能存在其他复杂度吧，是不是我有什么地方理解错了啊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426428,"discussion_content":"看看其他同学的留言吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539255959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31591,"user_name":"许会元","can_delete":false,"product_type":"c1","uid":1201815,"ip_address":"","ucode":"A6A572C87B8259","user_header":"https://static001.geekbang.org/account/avatar/00/12/56/97/bca023af.jpg","comment_is_top":false,"comment_ctime":1539239873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539239873","product_id":100017301,"comment_content":"最后的题目我感觉跟 add 的调用次数有关，它的调用次数会影响规模n的值，计算平均复杂的的时候，这个不需要考虑进去么？这个题目的平局复杂度的计算公式是什么样的？<br><br>比如我稍微改下题目：<br><br>&#47;&#47; 全局变量，大小为 10 的数组 array，长度 len，下标 i。<br>int array[] = new int[10]; <br>int len = 10;<br>int i = 0;<br><br>&#47;&#47; 往数组中添加一个元素<br>void add(int element) {<br>   if (i &gt;= len) { &#47;&#47; 数组空间不够了<br>     &#47;&#47; 重新申请一个 2 倍大小的数组空间<br>     int new_array[] = new int[len*2];<br>     &#47;&#47; 把原来 array 数组中的数据依次 copy 到 new_array<br>     for (int j = 0; j &lt; len; ++j) {<br>       new_array[j] = array[j];<br>     }<br>     &#47;&#47; new_array 复制给 array，array 现在大小就是 2 倍 len 了<br>     array = new_array;<br>     len = 2 * len;<br>   }<br>   &#47;&#47; 将 element 放到下标为 i 的位置，下标 i 加一<br>   array[i] = element;<br>   ++i;<br>}<br><br>void compute(int n) {<br>   for(ini i = 0; i &lt; n; i++ ) {<br>      add(n)<br>  }<br>}<br><br>&#47;&#47; 这里compute函数的平均时间复杂度该怎么计算？","like_count":0},{"had_liked":false,"id":31552,"user_name":"nil","can_delete":false,"product_type":"c1","uid":1062007,"ip_address":"","ucode":"BD0E3A7C3DD532","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/77/3fa7554d.jpg","comment_is_top":false,"comment_ctime":1539226947,"is_pvip":false,"replies":[{"id":"11415","content":"我改天集中答疑一下吧 留言区回复太慢了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539268922,"ip_address":"","comment_id":31552,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539226947","product_id":100017301,"comment_content":"看到大部分人做习题都是最好O(1)最坏O(n)均摊O(1)。<br>我做的时候最好O(1)，最坏感觉应该是C*2^x也就是O(logn)啊，明明循环的增加不是线性的为什么大家都把2^x当成了常量？均摊的话，根据感觉应该是O(1)。不知道老师怎么看最坏的时间复杂度？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426395,"discussion_content":"我改天集中答疑一下吧 留言区回复太慢了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539268922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31481,"user_name":"hot","can_delete":false,"product_type":"c1","uid":1237803,"ip_address":"","ucode":"567921754BE860","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/2b/c6de8f27.jpg","comment_is_top":false,"comment_ctime":1539217042,"is_pvip":false,"replies":[{"id":"11425","content":"能描述清楚点吗 有点没看明白呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539269660,"ip_address":"","comment_id":31481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539217042","product_id":100017301,"comment_content":"为什么，平均是次数乘以概率相加不用除总次数，而均摊哪里计算平均是复杂度乘以概率相加","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426363,"discussion_content":"能描述清楚点吗 有点没看明白呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539269660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31365,"user_name":"冯ོ欢ོ欢ོ","can_delete":false,"product_type":"c1","uid":1198297,"ip_address":"","ucode":"CA8CF809C8C913","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/d9/894c14f7.jpg","comment_is_top":false,"comment_ctime":1539160745,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1539160745","product_id":100017301,"comment_content":"1*(1&#47;n+1)+1*(1&#47;n+1)+...+1*(1&#47;n+1)+n*(1&#47;(n+1))=O(1) 这个公式有问题吧，应该是1*(1&#47;n+1)+1*(1&#47;n+1)+...+1*(1&#47;n+1)+(n+1)*(1&#47;(n+1))=O(1)吧，应该是n+1个1*(1&#47;n+1)相加最终等于1吧。","like_count":0},{"had_liked":false,"id":31290,"user_name":"5ispy","can_delete":false,"product_type":"c1","uid":1119481,"ip_address":"","ucode":"017FD3573B899F","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/f9/5e08a350.jpg","comment_is_top":false,"comment_ctime":1539143425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539143425","product_id":100017301,"comment_content":"老师好，加权平均时间复杂度不是很理解。上面说的平均时间复杂度是“需要遍历的元素个数的平均值”，我的理解是 总的遍历次数&#47;总的情况数，但是感觉加权平均时间复杂度的计算和“需要遍历的元素个数的平均值”没什么关系。<br>是不是这样理解：<br>(1*1&#47;2n+2*1&#47;2n+...+n*1&#47;2n+n*1&#47;2)&#47;(1&#47;2n+1&#47;2n+...+1&#47;2n+1&#47;2)<br>(说明：分母中1&#47;2n的个数是n，把总的情况数也考虑出现的概率)<br>这样得出的结果虽然是一样的，但是不知道这样理解对不对。<br>请老师抽时间点评回复一下，谢谢！","like_count":0},{"had_liked":false,"id":31195,"user_name":"Brighton王","can_delete":false,"product_type":"c1","uid":1235657,"ip_address":"","ucode":"4C6DF7C0191C3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/c9/ed1ac545.jpg","comment_is_top":false,"comment_ctime":1539131337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539131337","product_id":100017301,"comment_content":"最高赞是对的✧٩(ˊωˋ*)و✧","like_count":0},{"had_liked":false,"id":31125,"user_name":"乐凡","can_delete":false,"product_type":"c1","uid":1239260,"ip_address":"","ucode":"918C9997EB6537","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/dc/32e78f02.jpg","comment_is_top":false,"comment_ctime":1539096179,"is_pvip":false,"replies":[{"id":"11237","content":"如果n很大 要查找的元素在数组中 靠近后面的位置 这个时候查找还能是O（1）吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539136770,"ip_address":"","comment_id":31125,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539096179","product_id":100017301,"comment_content":"老师，为什么find（）函数在极端情况下复杂度才为O（1），只要在数组中存在查找的x，不就是O（1）吗？比如在位置1，2，3，4....，复杂度应该都是O（1）啊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426239,"discussion_content":"如果n很大 要查找的元素在数组中 靠近后面的位置 这个时候查找还能是O（1）吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539136770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31119,"user_name":"益达式微笑","can_delete":false,"product_type":"c1","uid":1262460,"ip_address":"","ucode":"FECF1837155FE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/43/7c/9a4934c4.jpg","comment_is_top":false,"comment_ctime":1539095188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539095188","product_id":100017301,"comment_content":"那个加权平均值不用除以n+1吗?","like_count":0},{"had_liked":false,"id":31112,"user_name":"意无尽","can_delete":false,"product_type":"c1","uid":1234489,"ip_address":"","ucode":"DA179626C46B81","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/39/6b45878d.jpg","comment_is_top":false,"comment_ctime":1539092935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539092935","product_id":100017301,"comment_content":"国庆期间看到这节，现在又来看，均摊时间复杂度有点忘记。<br>笔记笔记：<br>1、四个时间复杂度的概念<br>（1）最好情况时间复杂度（best case time complexity）：在最理想的情况下，执行这段代码的时间复杂度。比如：在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，即复杂度为O(1)。<br>（2）最坏情况时间复杂度（worst case time complexity）：在最糟糕的情况下，执行这段代码的时间复杂度。如果数组中没有要查找的变量 x，我们需要把整个数组都遍历一遍才行，所以这种最糟糕情况下对应的就是最坏情况时间复杂度，即复杂度为O(n)。<br>（3）平均情况时间复杂度（average case time complexity）：用代码在所有情况下执行的次数的加权平均值表示，需要用到概率论知识，即复杂度为O(n)。<br>（4）均摊时间复杂度（amortized time complexity）：将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。如：每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次这一组连续的操作的均摊时间复杂度就是 O(1)。<br><br>2、引入这四个复杂度的原因？<br>为了表示代码在不同情况下的不同时间复杂度。而且引入这几个概念之后，我们可以更加全面地表示一段代码的执行效率。","like_count":0},{"had_liked":false,"id":31056,"user_name":"远心","can_delete":false,"product_type":"c1","uid":1206787,"ip_address":"","ucode":"1157202C315655","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/03/cb597311.jpg","comment_is_top":false,"comment_ctime":1539077394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539077394","product_id":100017301,"comment_content":"重点理解：<br>1.平均时间复杂度<br>平均时间复杂度的全称是加权平均情况时间复杂度。我觉得这个全称是理解平均时间复杂度的关键：数据中的每个点对于平均数的贡献是不相等的，有些点要比其他点更加重要（参见维基：加权平均数）。<br><br>在这里，即不同情况下的时间复杂度出现的概率不同，有些情况的时间复杂度出现的概率更大。因此，使用加权的方式来计算所有情况下时间复杂度的平均值会更加合理。<br><br>2.均摊时间复杂度<br>均摊时间复杂度是一种特殊的平均时间复杂度，即也具备“不同情况下的时间复杂度出现的概率不同，有些情况的时间复杂度出现的概率更大”的特点。<br><br>但是，均摊时间复杂度在特定的应用场景下才能进行计算：在一组操作里，时间复杂度高的操作能够被均摊到其余时间复杂度低的操作上。对于均摊时间复杂度的理解，我感觉更多的是依靠感性&#47;感觉，而非逻辑证明。<br><br>问题：<br>1.在计算 insert 的平均时间复杂度时，为什么不是 1*1&#47;2n + 1*1&#47;2n + ... + 1*1&#47;2n + n*1&#47;2 = O(n) ? 也就是说为什么数组没有或者有空闲空间的概率不是 1&#47;2 ? 为什么这跟计算 find 的平均时间复杂度不一样？<br><br>2.在计算均摊时间复杂度时，如何判断或证明时间复杂度高的操作能够被其余时间复杂度低的操作均摊？","like_count":0},{"had_liked":false,"id":31020,"user_name":"cooooder","can_delete":false,"product_type":"c1","uid":1251877,"ip_address":"","ucode":"D104F44608F728","user_header":"https://static001.geekbang.org/account/avatar/00/13/1a/25/9d1b5a19.jpg","comment_is_top":false,"comment_ctime":1539069738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539069738","product_id":100017301,"comment_content":"直接百度搜索系数 低阶 常亮这些关键字就能找到公开的文章和博客。","like_count":0},{"had_liked":false,"id":31009,"user_name":"liyghting","can_delete":false,"product_type":"c1","uid":1108970,"ip_address":"","ucode":"439794ECEEFD26","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/ea/7d00f657.jpg","comment_is_top":false,"comment_ctime":1539064841,"is_pvip":false,"replies":[{"id":"11175","content":"加油💪","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539082961,"ip_address":"","comment_id":31009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539064841","product_id":100017301,"comment_content":"还得加油看，多看几遍","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426179,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539082961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30972,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1239700,"ip_address":"","ucode":"E9E03E6B748CAA","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/94/9ef6c6d8.jpg","comment_is_top":false,"comment_ctime":1539055400,"is_pvip":false,"replies":[{"id":"11145","content":"你算错了哦 你自己举个例子计算下不就知道了吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539059257,"ip_address":"","comment_id":30972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539055400","product_id":100017301,"comment_content":"1+2+3....+n+n ／ n+1 = n(n+3)&#47;2(n+1)  这个是不是有问题啊 结果 不应该是 n(n+2)&#47;2(n+1)吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426165,"discussion_content":"你算错了哦 你自己举个例子计算下不就知道了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539059257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30970,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1539055032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539055032","product_id":100017301,"comment_content":"总结：最好,最坏时间复杂度分析，平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度，用概率论分析。我觉得，这节重点让我懂得区分均摊时间复杂度，其实它就是平均时间复杂度的特殊形式。","like_count":0},{"had_liked":false,"id":30939,"user_name":"$Jason","can_delete":false,"product_type":"c1","uid":1040403,"ip_address":"","ucode":"BB0DB558D5BBB3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e0/13/6c2a5bd2.jpg","comment_is_top":false,"comment_ctime":1539050449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539050449","product_id":100017301,"comment_content":"看了第二遍，第一遍完全摸不着头脑。<br>课后习题：<br>最好时间复杂度：O(1)<br>最坏时间复杂度：O(n)<br>平均复杂度：O(1)<br>均摊复杂度：O(1)","like_count":0},{"had_liked":false,"id":30878,"user_name":"Yafei","can_delete":false,"product_type":"c1","uid":1233728,"ip_address":"","ucode":"BEA5B162DF2364","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/40/39d41615.jpg","comment_is_top":false,"comment_ctime":1539037774,"is_pvip":false,"replies":[{"id":"11099","content":"你推倒的非常好 基本都是正确的 需要纠正的一点是：不一定平摊1  像你的推理平摊了2。那平摊平摊时间复杂度O（2）。2是常量 所有就记做O（1）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539049181,"ip_address":"","comment_id":30878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539037774","product_id":100017301,"comment_content":"这题我有点不明白，我的思路是：<br>1. 前 len 次调用 add 的时间复杂度是 O(1)<br>2. 当 i &gt;= len 时，确切地说是 i == len，因为重新分配空间后，len 变成了 2倍的 len，此时需要重新分配双倍的空间并拷贝原数组数据，所以这个点的时间复杂度是 O(len)<br>3. 继续调用 add, 当 i == 2*len时，我们此时需要拷贝2*len的数据，此时新数组大小 4*len，从2*len到4*len每add一个数的时间复杂度O(1), 这样的话，4*len 没法一一平摊到 2*len，而是以2倍方式平摊，以此类推，i==4*len 拷贝 4*len的数据，新数组8*len，同样没法一一平摊。如果一直调用add，这时间复杂度肯定不能是O(1)。<br>举例： 假设初始 len=1，i=0<br>x 1 x 2 x x 4 x x x x 8 x x x x x x x x  <br>x 代表数组里的数据，去除 1 2 4 8 就是当前数组中的数据，上面只写出了数组长为16的时候。<br>所以我的结论是：<br>x 1 的时候刚好平摊<br>x 2 的时候 1次 O(1)，1次O(2)，没法平摊<br>x x 4 的时候 2次O(1)， 1次O(4), 没法平摊<br><br>当把 1 换成 n，即 len = n, 上面就变成了<br>x n x 2n x x 4n x x x x 8n x x x x x x x x  <br>这里的 x 表示 n个数，不同于上面的1个数<br>所以，<br>x n 的时候刚好平摊<br>x 2n 的时候 n次 O(1)，1次O(2n)，没法平摊,多出n<br>x x 4n 的时候 2n次O(1)， 1次O(4n), 没法平摊,多出2n<br>.......<br>以此类推，除去平摊的，多出来的时间复杂度为n+2n+4n+... 这应该没办法认为均摊是O(1)了吧？<br>还请老师解答，谢谢！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426125,"discussion_content":"你推倒的非常好 基本都是正确的 需要纠正的一点是：不一定平摊1  像你的推理平摊了2。那平摊平摊时间复杂度O（2）。2是常量 所有就记做O（1）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539049181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30849,"user_name":"迷失的小伙伴","can_delete":false,"product_type":"c1","uid":1243836,"ip_address":"","ucode":"2C8509E73E5AEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/bc/a246831a.jpg","comment_is_top":false,"comment_ctime":1539010571,"is_pvip":false,"replies":[{"id":"11110","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539050243,"ip_address":"","comment_id":30849,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539010571","product_id":100017301,"comment_content":"思考题，凭感觉，就是数组的扩容机制吧？等我看了源码再确定。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426116,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539050243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30827,"user_name":"Triple Z 💤","can_delete":false,"product_type":"c1","uid":1233998,"ip_address":"","ucode":"A6DB7C91B903CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/4e/5813df2f.jpg","comment_is_top":false,"comment_ctime":1539006393,"is_pvip":false,"replies":[{"id":"11183","content":"分子约分母 最后大概就是一个常量 所以是o1","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539083978,"ip_address":"","comment_id":30827,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539006393","product_id":100017301,"comment_content":"对于 `insert` 插入函数，平均复杂度结果应该是 2n &#47; (n+1) ，为什么最后是等于 O(1) 呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426111,"discussion_content":"分子约分母 最后大概就是一个常量 所以是o1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539083978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30824,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1539005485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539005485","product_id":100017301,"comment_content":"理解 最好时间复杂度，最坏时间复杂度，平均时间复杂度和均摊时间复杂度的概念，其中主要是平均复杂度的计算，一般将所有可能遍历的次数相加除以总遍历次数即可，计算加权平均复杂度的话每个可能性算上概率即可。而均摊时间复杂度是特殊的平均复杂度，一般靠感觉直接看出来。<br><br>思考题: 最好O（1），最坏O（n），平均和均摊O（1）","like_count":0},{"had_liked":false,"id":30767,"user_name":"JRich","can_delete":false,"product_type":"c1","uid":1114901,"ip_address":"","ucode":"66AE9D61533960","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/15/293a185d.jpg","comment_is_top":false,"comment_ctime":1538992073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538992073","product_id":100017301,"comment_content":"所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是O(1)。为什么要均摊啊，不是应该以耗时最高的作为时间复杂度么，均摊下来还是真实的复杂度么，求个平均值也可以理解，均摊是为何啊！<br><br>","like_count":0},{"had_liked":false,"id":30765,"user_name":"汝林外史","can_delete":false,"product_type":"c1","uid":1188906,"ip_address":"","ucode":"3C66C0F0537A99","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/2a/33441e2b.jpg","comment_is_top":false,"comment_ctime":1538991622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538991622","product_id":100017301,"comment_content":"难道不是最好，最坏，平均都是O(1)吗？这里的len不是已知是10了吗，哪有什么n","like_count":0},{"had_liked":false,"id":30757,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1538989580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538989580","product_id":100017301,"comment_content":"老师说的很 Nice<br>最好的情况时间复杂度: O(1)<br>最坏的情况时间复杂度: O(n)<br>均摊时间复杂度: 每一次 O(n) 的操作之后都会跟着 n * 2 次 O(1) 的操作, 把耗时多的 O(n) 操作均摊到耗时少的 O(1) 上, 均摊之后, 这一组连续的操作的均摊时间复杂度为 O(1)","like_count":0},{"had_liked":false,"id":30750,"user_name":"别指望用UDP的程序能建立TCP连接","can_delete":false,"product_type":"c1","uid":1238697,"ip_address":"","ucode":"ACCB53D7286942","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/a9/4302316d.jpg","comment_is_top":false,"comment_ctime":1538988260,"is_pvip":false,"replies":[{"id":"11072","content":"会的 在排序那部分会结合归并排序的时间 空间复杂度讲","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539003519,"ip_address":"","comment_id":30750,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538988260","product_id":100017301,"comment_content":"希望老师有机会可以分享一下递归的时间空间复杂度如何分析","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426082,"discussion_content":"会的 在排序那部分会结合归并排序的时间 空间复杂度讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539003519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30738,"user_name":"那么好","can_delete":false,"product_type":"c1","uid":1257276,"ip_address":"","ucode":"0B08D8F9A8FC69","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/3c/7cefa18a.jpg","comment_is_top":false,"comment_ctime":1538986185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538986185","product_id":100017301,"comment_content":"没看懂均摊的例子 count 的值为0  下面的Insert 代码 count == array.length又有什么意义呢","like_count":0},{"had_liked":false,"id":30735,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1204660,"ip_address":"","ucode":"E1A97142E85EF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/61/b4/601adb4e.jpg","comment_is_top":false,"comment_ctime":1538985739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538985739","product_id":100017301,"comment_content":"第一段代码和第二段代码相比，第二段代码只多了一个break，为什么就不一样了呢？第一段代码不也存在多种情况吗？","like_count":0},{"had_liked":false,"id":30726,"user_name":"程序修行","can_delete":false,"product_type":"c1","uid":1257409,"ip_address":"","ucode":"2CCD5ACAFF0E8D","user_header":"","comment_is_top":false,"comment_ctime":1538983840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538983840","product_id":100017301,"comment_content":"那个例子的分子是不是n*(n=2)？","like_count":0},{"had_liked":false,"id":30719,"user_name":"李小草","can_delete":false,"product_type":"c1","uid":1240476,"ip_address":"","ucode":"83DAA0BFDC2068","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/9c/7afa883f.jpg","comment_is_top":false,"comment_ctime":1538982421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538982421","product_id":100017301,"comment_content":"最好情况下是O(1)，最差情况是O(n)，均摊复杂度是O(1)。","like_count":0},{"had_liked":false,"id":30712,"user_name":"哈哈","can_delete":false,"product_type":"c1","uid":1240120,"ip_address":"","ucode":"8B6D697CE6C83D","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/38/c7819759.jpg","comment_is_top":false,"comment_ctime":1538981075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538981075","product_id":100017301,"comment_content":"最坏时间复杂度O(n)，最好时间复杂度O(1)，均摊复杂度O(1)，O(1)的次数远大于O(n)的次数","like_count":0},{"had_liked":false,"id":30663,"user_name":"翌","can_delete":false,"product_type":"c1","uid":1136566,"ip_address":"","ucode":"4B535BB3E00C84","user_header":"https://static001.geekbang.org/account/avatar/00/11/57/b6/b4af6db6.jpg","comment_is_top":false,"comment_ctime":1538967352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538967352","product_id":100017301,"comment_content":"最好 O(1)，最坏 O(n)，平均 O(1)<br><br>add() 方法调用1次 i 就加1，每调用 len 次 len 就加倍。<br>情况1：当 i 小于 len 时，add() 只执行14、15行，O(1+1)，因此时间复杂度为 O(1)<br>情况2：当 i 大于等于 len 时，add() 执行6~13行，O(len)，len 取值为10、20、40、80 ··· 10*2^n，因此时间复杂度为 O(n)<br>当 i 越大，情况2 出现的概率会越小，因此平均时间复杂度为O(1)<br>","like_count":0},{"had_liked":false,"id":30641,"user_name":"行走着的宋公子","can_delete":false,"product_type":"c1","uid":1002416,"ip_address":"","ucode":"3FA47B1580A327","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/b0/2ae78627.jpg","comment_is_top":false,"comment_ctime":1538964141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538964141","product_id":100017301,"comment_content":"最好最好O(1)最坏O(n)平均O(1)均摊O(1)","like_count":0},{"had_liked":false,"id":30622,"user_name":"Geek_5009bd","can_delete":false,"product_type":"c1","uid":1255499,"ip_address":"","ucode":"39F4E6BC39E3D5","user_header":"https://static001.geekbang.org/account/avatar/00/13/28/4b/3e06b6fe.jpg","comment_is_top":false,"comment_ctime":1538961893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538961893","product_id":100017301,"comment_content":"每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。<br><br><br><br>为什么均摊之后变成了O(1)??","like_count":0},{"had_liked":false,"id":30608,"user_name":"🌟 我係冬阳 🐑","can_delete":false,"product_type":"c1","uid":1236337,"ip_address":"","ucode":"F811DB35BE4109","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/71/806bd4a8.jpg","comment_is_top":false,"comment_ctime":1538959681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538959681","product_id":100017301,"comment_content":"老师您好，我想请教一下，练习题还有n的概念吗？因为那里已经给定len等于常数10 。数组不满的情况下，插入数据是O（1）。数组满的情况下，会进行扩容并copy，执行时间分别为 10， 2 * 10， 3 * 10 ，.....， N * 10 。 前面我记得老师说过，常数级无论多大，时间复杂度都是O（1），所以我认为最差时间复杂度应该也是O（1），但是看了很多评论都是说O（N），其实我也更倾向于O（N）的答案，只不过不太能理解。如果练习题的len给定是n，而不是常数10，或许我能很快理解，不过这里给出常数我就保持以上的疑问，希望能得到解答。","like_count":0},{"had_liked":false,"id":30560,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1538924087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538924087","product_id":100017301,"comment_content":"课后分析<br>一、最好情况时间复杂度 best case time complexity<br><br>概念：在最理想的情况下，执行一段代码的时间复杂度。<br><br>当 i &lt; len，数组有空闲空间，add() 函数执行一次数据插入，将数据插入到数组下标为 i 的位置，时间复杂度为 O(1)。<br><br>二、最坏情况时间复杂度 worst case time complexity<br><br>概念：在最糟糕的情况下，执行一段代码的时间复杂度。<br><br>当 i &gt;= len，数组没有空闲空间，add() 函数进入 if 分支，申请一个 2 倍的数组空间，执行 for 循环，遍历数组进行复制，时间复杂度 O(n) 。<br><br>三、平均情况时间复杂度 average case time complexity<br><br>概念：平均情况下的复杂度<br><br>数组存在空闲空间，根据数据插入位置的不同，插入的情况有 n 种，每种情况的时间复杂度都是 O(1) ；另外一种情况，数组没有空闲空间，插入一个数据的时间复杂度是 O(n) 。<br><br>1、一共 n+1 种情况，前面 n 种情况，每种执行步数是 1，最后一种执行步数 为 n,因而：<br><br>(1+1+...+1+n)&#47;(n+1) = O(1)<br><br>2、以上 n+1 种情况，发生的概率均为 1&#47;(n+1) 。根据加权平均计算方法，平均时间复杂度为：<br><br>1*1&#47;(n+1)+1*1&#47;(n+1)+...+1*1&#47;(n+1)+n*1&#47;(n+1) = O(1)<br><br>四、均摊情况时间复杂度 amortized time complexity<br><br>概念：对一个数据结构进行一组连续的操作，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，并且这些操作前后存在连贯的时序关系。<br><br>此时可以将这一组操作放在一起分析，看是否能将较高时间复杂度的那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。<br><br>在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度等于最好情况时间复杂度。<br><br>上述数组元素的插入，每一次 O(n) 的插入操作，都会跟着 n 次的 O(1) 的插入操作；我们把耗时多的那次操作均摊到接下来的 n 次耗时少的操作上，这一组连续的操作的均摊时间的复杂度就是 O(1) 。<br><br>即前 n 个操作的时间复杂度都是 O(1)，第 n+1 次操作的时间复杂度是 O(n)，把最后一次的时间复杂度均摊到前 n 次上，则均摊下来的每次操作的时间复杂度为 O(1) 。","like_count":0},{"had_liked":false,"id":30539,"user_name":"dony","can_delete":false,"product_type":"c1","uid":1109586,"ip_address":"","ucode":"B3F1FA2D833DC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/52/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1538914508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538914508","product_id":100017301,"comment_content":"练习题是O(n)吗，看好多留言O(1)有点怀疑自己了。不知道哪里分析错了：有n种情况，0~9是O(1)，10~n是O(n)，加权计算是10&#47;n+(n-9)","like_count":0},{"had_liked":false,"id":30538,"user_name":"NoN","can_delete":false,"product_type":"c1","uid":1249529,"ip_address":"","ucode":"88EAE6A32672F0","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/f9/f8563bfb.jpg","comment_is_top":false,"comment_ctime":1538914423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538914423","product_id":100017301,"comment_content":"老师好，对于时间复杂度分析我一直有个问题，<br>for(int i=0;i&lt;n;i++) <br>  {<br>        for(int j=0;j&lt;n ;j++)<br>        {<br>      <br>        }<br>  }<br>for(int i=0;i&lt;n;i++) <br>  {<br>        for(int j=0;j&lt;n-i ;j++)<br>        {<br>      <br>        }<br>  }<br>上边那个双重for循环时间复杂度是O(n*n)=O(n^2)<br>下边那个双重for循环时间复杂度是O(n*(1+n)&#47;2)=O(n&#47;2+(n*n)&#47;2)<br>舍去系数常量和低阶就是O(n*2)<br>是这样分析的吗？<br>","like_count":0},{"had_liked":false,"id":30518,"user_name":"BK🎩","can_delete":false,"product_type":"c1","uid":1248016,"ip_address":"","ucode":"A5743A15241C0E","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/10/057e2037.jpg","comment_is_top":false,"comment_ctime":1538903479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538903479","product_id":100017301,"comment_content":"老师您好，这部分讲的 4 个复杂度分析的概念，按照个人理解同样适用于空间复杂度分析，不知理解是否正确？","like_count":0},{"had_liked":false,"id":30469,"user_name":"1902:","can_delete":false,"product_type":"c1","uid":1233928,"ip_address":"","ucode":"49A41D8F214A13","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/08/cf14981a.jpg","comment_is_top":false,"comment_ctime":1538879619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538879619","product_id":100017301,"comment_content":"最后的题目应该使用均摊分析，每新建一个数组遍历复制的时候可以将循环n次均摊到前面每一次插入元素的操作，复杂度应该是为O(1)","like_count":0},{"had_liked":false,"id":30396,"user_name":"李皮皮皮皮皮","can_delete":false,"product_type":"c1","uid":1200281,"ip_address":"","ucode":"3BF1DEE4A12359","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/99/44378317.jpg","comment_is_top":false,"comment_ctime":1538823182,"is_pvip":false,"replies":[{"id":"10952","content":"哈哈，你说的没错。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538837926,"ip_address":"","comment_id":30396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538823182","product_id":100017301,"comment_content":"insert函数那个例子，平均时间复杂度分析，开始count是从0到array.length，概率为1&#47;（n+1）没问题。但是从第二次遍历开始，每次count都是从1到array.length，不是应该1&#47;n吗。虽然不影响，我强迫症弄明白😂","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425979,"discussion_content":"哈哈，你说的没错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538837926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30384,"user_name":"Haoz","can_delete":false,"product_type":"c1","uid":1022665,"ip_address":"","ucode":"DBDBF78877A7B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/c9/08852337.jpg","comment_is_top":false,"comment_ctime":1538817987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538817987","product_id":100017301,"comment_content":"时间复杂度的区分<br><br>为了表示代码在不同情况下的不同时间复杂度，我们需要引入三个概念：最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度。<br><br>最好情况时间复杂度：在最理想的情况下，执行这段代码的时间复杂度<br><br>最坏情况时间复杂度：在最糟糕的情况下，执行这段代码的时间复杂度<br><br>平均情况时间复杂度：最好情况时间复杂度和最坏情况时间复杂度对应的是「极端情况」下的代码复杂度，发生的概率其实并不大，为了更好地表示平均情况下的复杂度，而引入平均情况时间复杂度<br><br>均摊时间复杂度：通过摊还分析得到的时间复杂度<br><br>均摊时间复杂度使用场景：对一个数据结构进行一组连续操作中，「大部分情况」下时间复杂度都很低，只有个别情况下的时间复杂度比较高，而且这些操作之间存在「前后连贯」的时序关系，如果我们能够将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上，而且，在能够应用均摊时间复杂度的场合，一般均摊时间复杂度就等于最好情况时间复杂度。<br><br>Ps：很多时候，我们使用一个复杂度就可以满足需求了。只有同一块代码在不同的情况下，时间复杂度有「量级」的差距，我们才会使用这三种复杂度表示法来区分。","like_count":0},{"had_liked":false,"id":30360,"user_name":"罗爱军","can_delete":false,"product_type":"c1","uid":1114611,"ip_address":"","ucode":"62D5529DDDA8DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/f3/233f1287.jpg","comment_is_top":false,"comment_ctime":1538808461,"is_pvip":false,"replies":[{"id":"10958","content":"不对 看看其他留言吧 有回复正确的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538838390,"ip_address":"","comment_id":30360,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538808461","product_id":100017301,"comment_content":"课后习题的时间复杂度应该是log（n）吧，数组的初始大小为10随着数组数据增加数组的长度为20、40、80、160…对应的均摊就是数组的长度，所以时间复杂度为log（n）","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425957,"discussion_content":"不对 看看其他留言吧 有回复正确的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30336,"user_name":"周平","can_delete":false,"product_type":"c1","uid":1259488,"ip_address":"","ucode":"4954DC474C4FDF","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/e0/23f288ae.jpg","comment_is_top":false,"comment_ctime":1538797814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538797814","product_id":100017301,"comment_content":"最好(1)， 最差O(n), 均摊O(1)<br><br>在计算平均时间复杂度时，使用到了概率，这才是正确的分析方法。学习了。<br><br>","like_count":0},{"had_liked":false,"id":30335,"user_name":"李杰","can_delete":false,"product_type":"c1","uid":1239493,"ip_address":"","ucode":"BE5BD7AC6B7578","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/c5/a3907a33.jpg","comment_is_top":false,"comment_ctime":1538797668,"is_pvip":false,"replies":[{"id":"10960","content":"我们现在求的是一个insert操作的时间复杂度，并不是求len-&gt;n所有的insert操作的时间复杂度","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538838545,"ip_address":"","comment_id":30335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538797668","product_id":100017301,"comment_content":"不明白为什么最坏时间复杂度是O(n)?<br>执行最多的应该是把原来 array 数组中的数据依次 copy 到 new_...那两行。<br>array数组是按照10，10*2，10*2*2，……，10*2^n来扩展的。那么最多应该被执行了10*2^n次。时间复杂度应该为O(2^n)。<br>请老师帮忙解答。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425947,"discussion_content":"我们现在求的是一个insert操作的时间复杂度，并不是求len-&amp;gt;n所有的insert操作的时间复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30327,"user_name":"吴昊","can_delete":false,"product_type":"c1","uid":1248635,"ip_address":"","ucode":"CB4F6A46930873","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/7b/e574577a.jpg","comment_is_top":false,"comment_ctime":1538794364,"is_pvip":false,"replies":[{"id":"10961","content":"java语言不用，c语言需要的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538838592,"ip_address":"","comment_id":30327,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538794364","product_id":100017301,"comment_content":"老师，请问最后的示例不需要delete array吗，旧空间没有释放可能会导致溢出吧。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425944,"discussion_content":"java语言不用，c语言需要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30234,"user_name":"慧慧","can_delete":false,"product_type":"c1","uid":1255753,"ip_address":"","ucode":"5AF51414B42BC9","user_header":"","comment_is_top":false,"comment_ctime":1538734178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538734178","product_id":100017301,"comment_content":"均摊时间复杂度中，时间时怎么均摊的，没有明白。😣😣","like_count":0},{"had_liked":false,"id":30231,"user_name":"王振华 程序员","can_delete":false,"product_type":"c1","uid":1131957,"ip_address":"","ucode":"31BB337642B882","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/b5/c3cfb198.jpg","comment_is_top":false,"comment_ctime":1538732674,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538732674","product_id":100017301,"comment_content":" 请问这是C的代码，还是C++的代码？因为这两个我都完全不懂，有些代码想自己运行一下看看结果","like_count":0},{"had_liked":false,"id":30179,"user_name":"jackeymm","can_delete":false,"product_type":"c1","uid":1103650,"ip_address":"","ucode":"A06543EA294750","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/22/a05987e7.jpg","comment_is_top":false,"comment_ctime":1538714256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538714256","product_id":100017301,"comment_content":"最好时间复杂度是O(1),最坏时间复杂度是O(n),平均时间复杂度是O(1),均摊时间复杂度是O(1)<br>评论时间复杂度计算，(1+1+1+1+...+n)&#47;n=n&#47;n=O(1)","like_count":0},{"had_liked":false,"id":30093,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":false,"comment_ctime":1538656901,"is_pvip":false,"replies":[{"id":"10889","content":"我尽量！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538749016,"ip_address":"","comment_id":30093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538656901","product_id":100017301,"comment_content":"给作者提一个建议，在各个专业术语第一次出现时 旁边备注一下对应的英文，方便读者在具体场景中去Google","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425851,"discussion_content":"我尽量！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538749016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30014,"user_name":"~记得微笑∩﹏∩","can_delete":false,"product_type":"c1","uid":1216715,"ip_address":"","ucode":"EBC383F0FB54BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/cb/72063354.jpg","comment_is_top":false,"comment_ctime":1538624170,"is_pvip":false,"replies":[{"id":"10813","content":"我们先来看分子：1+2+...+n +n = n*(n+1)&#47;2 + n = (n^2+3n)&#47;2。我们再来看分母: 是n+1。分子除以分母就是：(n^2 + 3n) &#47; (2*(n+1))。同学，你要是还有疑问，欢迎再留言。如果没有疑问了，也请留个言给我，说说你之前的问题在哪里？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538657385,"ip_address":"","comment_id":30014,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538624170","product_id":100017301,"comment_content":"老师，看了您的课，我收获了很多，讲解的很清晰，但是我在看的过程中遇到了一些疑惑<br><br>您在讲到平均时间复杂度时，推导的时候在算 (1+2+3...+n+n) &#47; (n+1) 结果应该是 n(n+2) &#47; 2(n+1)吧，我算了好几遍还是这个，希望老师有时间的时候可以帮我解惑，谢谢老师","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425816,"discussion_content":"我们先来看分子：1+2+...+n +n = n*(n+1)/2 + n = (n^2+3n)/2。我们再来看分母: 是n+1。分子除以分母就是：(n^2 + 3n) / (2*(n+1))。同学，你要是还有疑问，欢迎再留言。如果没有疑问了，也请留个言给我，说说你之前的问题在哪里？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538657385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29886,"user_name":"王伟zzz","can_delete":false,"product_type":"c1","uid":1023443,"ip_address":"","ucode":"F2BADC0EA6CD6A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/d3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1538580423,"is_pvip":false,"replies":[{"id":"10838","content":"严格的讲不是的，要看要查找的数据的范围，总之很复杂！就笼统的理解成1&#47;2吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538659707,"ip_address":"","comment_id":29886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538580423","product_id":100017301,"comment_content":"【我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1&#47;2。】难道不是二分之一吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425757,"discussion_content":"严格的讲不是的，要看要查找的数据的范围，总之很复杂！就笼统的理解成1/2吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538659707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29872,"user_name":"wean","can_delete":false,"product_type":"c1","uid":1239735,"ip_address":"","ucode":"3E069F95C25EAD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/b7/1f7316e6.jpg","comment_is_top":false,"comment_ctime":1538574681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538574681","product_id":100017301,"comment_content":"上节课讲了简单的时间、空间复杂度分析方法，这节课主要讲了复杂情况下的时间复杂度的其他表示方法：<br><br>- 最好情况时间复杂度<br>- 最坏情况时间复杂度<br>- 平均时间复杂度<br>- 均摊时间复杂度<br><br>对于前两种（最好最坏）时间复杂度分析，分别表示了当输入的数据进入算法中运行的时间最短和最长的时间量级。<br><br>而对于后两种，其实是同一个东西。把各种情况下算法需要执行的时间平均计算一下，就是时间复杂度。而均摊时间复杂是是平均时间复杂的一种特殊情况，当对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度较高，而且这些操作之间存在连续的时序关系，这时就可以将较高时间复杂度的那次操作的耗时，均摊到其他时间复杂度较低的操作上，这就是均摊时间复杂度。而且，在能应用时间复杂度分析场合，一般均摊时间复杂度就是等于最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":29866,"user_name":"菜菜","can_delete":false,"product_type":"c1","uid":1243536,"ip_address":"","ucode":"888AC33663B774","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/90/f90903e5.jpg","comment_is_top":false,"comment_ctime":1538571175,"is_pvip":false,"replies":[{"id":"10840","content":"不用考虑的，你可以把我文章里讲的均摊复杂度分析的例子搞明白，然后再来看这个思考题。如果还是不明白，也没关系。后面还会讲到，现在可以暂且放一放。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538659897,"ip_address":"","comment_id":29866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538571175","product_id":100017301,"comment_content":"老师，这个用不用考虑len是以2的幂次增长的呢？不知道为啥我老纠结这个呢。。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425747,"discussion_content":"不用考虑的，你可以把我文章里讲的均摊复杂度分析的例子搞明白，然后再来看这个思考题。如果还是不明白，也没关系。后面还会讲到，现在可以暂且放一放。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538659897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29839,"user_name":"Rugu","can_delete":false,"product_type":"c1","uid":1257876,"ip_address":"","ucode":"C80589FCCF26AF","user_header":"https://static001.geekbang.org/account/avatar/00/13/31/94/f9253dc3.jpg","comment_is_top":false,"comment_ctime":1538557660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538557660","product_id":100017301,"comment_content":"课后题答案<br>最好 : O(1) 即直接执行 array[i] = element, ++i;<br>最坏 : O(n) 即要进入循环, 执行 len 次拷贝<br>平均 : O(1) 即有n种情况为O(1), 1中情况为O(n), 概率都是 1&#47;(n+1), 加起来还是O(1)<br>均摊 : O(1) 因为O(1)出现的次数远大于O(n)<br>空间复杂度 : O(n) 因为第一次是len 第二次是 2*len ... n*len<br><br>","like_count":0},{"had_liked":false,"id":29827,"user_name":"超级励辰","can_delete":false,"product_type":"c1","uid":1017669,"ip_address":"","ucode":"94F34809B7D893","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/45/9edd38ba.jpg","comment_is_top":false,"comment_ctime":1538555085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538555085","product_id":100017301,"comment_content":"均摊时间复杂度一般情况下为什么等于最好情况时间复杂度。","like_count":0},{"had_liked":false,"id":29826,"user_name":"超级励辰","can_delete":false,"product_type":"c1","uid":1017669,"ip_address":"","ucode":"94F34809B7D893","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/45/9edd38ba.jpg","comment_is_top":false,"comment_ctime":1538554983,"is_pvip":false,"replies":[{"id":"10721","content":"可以参看我举的例子，再想想","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538581594,"ip_address":"","comment_id":29826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538554983","product_id":100017301,"comment_content":"均摊时间复杂度为什么一般情况下会等于最好情况时间复杂度？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425731,"discussion_content":"可以参看我举的例子，再想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538581594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29774,"user_name":"犇","can_delete":false,"product_type":"c1","uid":1241705,"ip_address":"","ucode":"CCA66C9BF3EBAB","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/69/a925db7a.jpg","comment_is_top":false,"comment_ctime":1538536929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538536929","product_id":100017301,"comment_content":"老师，在均摊复杂度那里的代码，sum的定义域不是在if里面吗，在if外面能直接用array[0]=sum;吗？","like_count":0},{"had_liked":false,"id":29694,"user_name":"漫漫越","can_delete":false,"product_type":"c1","uid":1249222,"ip_address":"","ucode":"F9F1E3AC4CF692","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/c6/cf344f74.jpg","comment_is_top":false,"comment_ctime":1538488963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538488963","product_id":100017301,"comment_content":"老师这篇文章用到了高斯求和定理，差点都把这些知识忘光了","like_count":0},{"had_liked":false,"id":29688,"user_name":"夜下凝月","can_delete":false,"product_type":"c1","uid":1256730,"ip_address":"","ucode":"247824573D25B5","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/1a/fcfd9872.jpg","comment_is_top":false,"comment_ctime":1538488055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538488055","product_id":100017301,"comment_content":"真的是每次多看一遍，就有更深的理解。有些公式，第一次看，感觉好像都懂，第二次看就会想怎么来的，感觉有点不对劲。后面再看几次，慢慢理解，真的令人兴奋。","like_count":0},{"had_liked":false,"id":29677,"user_name":"陈祥龙","can_delete":false,"product_type":"c1","uid":1013855,"ip_address":"","ucode":"6B0C331EE415F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/5f/32bc9975.jpg","comment_is_top":false,"comment_ctime":1538483162,"is_pvip":false,"replies":[{"id":"10703","content":"排序那一节","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538539107,"ip_address":"","comment_id":29677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538483162","product_id":100017301,"comment_content":"老师，啥时候讲算法稳定性呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425686,"discussion_content":"排序那一节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538539107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29667,"user_name":"caohuan","can_delete":false,"product_type":"c1","uid":1256428,"ip_address":"","ucode":"4B092E33F3DF1E","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","comment_is_top":false,"comment_ctime":1538476105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538476105","product_id":100017301,"comment_content":"代码中 不会执行 if 条件，所以 所有的复杂度都是 O（1），有不对之处 请老师指正","like_count":0},{"had_liked":false,"id":29656,"user_name":"huangjh","can_delete":false,"product_type":"c1","uid":1235879,"ip_address":"","ucode":"A84144E3F8B041","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/a7/eab461f0.jpg","comment_is_top":false,"comment_ctime":1538471854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538471854","product_id":100017301,"comment_content":"例子中的方法（），就调用一次，但是因为调用的时候，我们不知道具体的里面变量值是多少，所以出现了，不同情况下他的复杂度是不一样的。 因此有本课程中所讲解的 最好，最坏，平均，均摊时间复杂度的等等概念。","like_count":0},{"had_liked":false,"id":29655,"user_name":"huangjh","can_delete":false,"product_type":"c1","uid":1235879,"ip_address":"","ucode":"A84144E3F8B041","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/a7/eab461f0.jpg","comment_is_top":false,"comment_ctime":1538471721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538471721","product_id":100017301,"comment_content":"例子中的方法，我们就调用一次，但是因为不确定方法内的变量值，所以他的复杂度会根据具体不同的情况有不同的复杂度，所以才有了本课中所讲解的内容， 最好，最坏，平均，均摊复杂度等等；","like_count":0},{"had_liked":false,"id":29625,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1538461273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538461273","product_id":100017301,"comment_content":"老师，每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这个具体代码改造是怎么做的啊😊，以后遇到这样的情况好改写代码，提高效率啊","like_count":0},{"had_liked":false,"id":29622,"user_name":"liu","can_delete":false,"product_type":"c1","uid":1129567,"ip_address":"","ucode":"DA9F9FBD96A9A0","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/5f/cc30c10c.jpg","comment_is_top":false,"comment_ctime":1538456358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538456358","product_id":100017301,"comment_content":"add时间复杂度分析：<br>最好情况时间复杂度，T(n)=O(f(2))=O(1);<br>最坏情况时间复杂度，T(n)=O(f(n+2+2))=O(n);<br>平均时间复杂度，平均每个位置出现的概率为1&#47;(n+1)，所以T(n)=O(f(2*1&#47;(n+1)+ 2*1&#47;(n+1)+...+(n+2+2)*1&#47;(n+1))=O(f(3n+4)&#47;(n+1))=O(1)","like_count":0},{"had_liked":false,"id":29611,"user_name":"黑桃K","can_delete":false,"product_type":"c1","uid":1234939,"ip_address":"","ucode":"1439F7F46B4982","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/fb/384ef0a1.jpg","comment_is_top":false,"comment_ctime":1538452525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538452525","product_id":100017301,"comment_content":"练习题：最好时间复杂度显然是o（1），最坏时间复杂度当第len＋1次add时，为o（n）。均摊到前len次，均摊复杂度o（1），平均复杂度概率计算为o（1）。<br>总结：最好最坏平均均摊时间复杂度！","like_count":0},{"had_liked":false,"id":29604,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1538450945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538450945","product_id":100017301,"comment_content":"练习题，最好和均摊不必多说，我也看了小伙伴的分析，最坏的是O(n)。<br>下面是我纠结的点：<br>1. 最坏是O(1)，重新申请数组空间时，len是常量，所以循环次数是常量次数，哪怕它是1000，100,000等等。<br>2. 最坏是O(n)，权衡最坏的标准是，最糟糕的程度可以是，len * n，此时，复杂度为O(n)。<br>为什么会有这种纠结呢？太善良了嘛，还是不敢放开了想呢。<br>有没有类似考虑小伙伴呀:D","like_count":0},{"had_liked":false,"id":29597,"user_name":"天空","can_delete":false,"product_type":"c1","uid":1121823,"ip_address":"","ucode":"4760B5C8A34F30","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/1f/e3c13f29.jpg","comment_is_top":false,"comment_ctime":1538450179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538450179","product_id":100017301,"comment_content":"如果有一个函数会产生n-2次O(1)一次O(n)一次o(n^2)此时均摊怎么算呢？","like_count":0},{"had_liked":false,"id":29594,"user_name":"陈蒙","can_delete":false,"product_type":"c1","uid":1250013,"ip_address":"","ucode":"9E8303709AFAF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/dd/74fca186.jpg","comment_is_top":false,"comment_ctime":1538448937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538448937","product_id":100017301,"comment_content":"如果继续推导  <br>for( int k = 0; k &lt;  n; k ++）{<br>      add（k）;    &#47;&#47;老师的add函数<br>}<br>这个循环的时间复杂度就等于add()的最坏情况时间复杂度（即O(n)）是吗？<br>","like_count":0},{"had_liked":false,"id":29592,"user_name":"CozyThinker","can_delete":false,"product_type":"c1","uid":1041217,"ip_address":"","ucode":"996D8B8C993C5C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e3/41/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1538448681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538448681","product_id":100017301,"comment_content":"15分钟没有看完，<br>花了20分钟才学习完毕，<br>哎，我这有点笨啊","like_count":0},{"had_liked":false,"id":29583,"user_name":"PoetAndPoem","can_delete":false,"product_type":"c1","uid":1240028,"ip_address":"","ucode":"5BA46BFE497F32","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/dc/ae5485bb.jpg","comment_is_top":false,"comment_ctime":1538447607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538447607","product_id":100017301,"comment_content":"我认为是o(1)<br>1.对于每次进入if时，代码的代价分别是：n,2n,4n...<br>2.对于每两两if中间，o(1)所遍历的次数分别是：n,2n-n,4n-2n...<br>3.所以每两两if中间，平摊的每次代价增加了：1,2,2,2...<br>4.每次两两if平摊代价均为常数，可以推出，整个代码代价也为常数，即o(1)","like_count":0},{"had_liked":false,"id":29456,"user_name":"Mr.钧👻","can_delete":false,"product_type":"c1","uid":1249939,"ip_address":"","ucode":"D781E030E79245","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/93/3470fc43.jpg","comment_is_top":false,"comment_ctime":1538379463,"is_pvip":false,"replies":[{"id":"10593","content":"嗯嗯 没错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538400734,"ip_address":"","comment_id":29456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538379463","product_id":100017301,"comment_content":"最好，最坏，平均时间复杂度，是最常见的，掌握即可。均摊时间复杂度，用的很少，明白摊还分析法的思路即可。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425617,"discussion_content":"嗯嗯 没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538400734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29446,"user_name":"nuo-promise","can_delete":false,"product_type":"c1","uid":1116668,"ip_address":"","ucode":"39C48245330A35","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/fc/6f53d426.jpg","comment_is_top":false,"comment_ctime":1538375645,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1538375645","product_id":100017301,"comment_content":"最好是O(1) 最差是O(n) 均摊是O(1) 复杂度就是在每次进来一个元素 要n-1次的元素复制 其实就是10+11+...+n 复杂度 最后计算出就是O(n) 最好嘛就是小于10时候就是一个赋值 O(1) 均摊 根据老师定义 是把最多耗时的时间刚到每次n-1次的操作时间 所以就是O(1). 个人理解","like_count":0},{"had_liked":false,"id":29406,"user_name":"insist","can_delete":false,"product_type":"c1","uid":1054536,"ip_address":"","ucode":"1EE2800A900BA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/48/3ab39c86.jpg","comment_is_top":false,"comment_ctime":1538363954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538363954","product_id":100017301,"comment_content":"最好O(1），最坏O(n)，平均和均摊都是O(1)<br>因为同一段代码在不同情况下的复杂度量级可能不同，为了全面的分析代码的性能，因此引入了最好 最坏 平均 均摊时间复杂度这几个概念。平均复杂度分析用到了概率知识，也叫加权平均复杂度或期望复杂度；均摊复杂度分析所用的方法叫环均摊法。需要理解这几个概念，灵活应用。","like_count":0},{"had_liked":false,"id":29347,"user_name":"........","can_delete":false,"product_type":"c1","uid":1236198,"ip_address":"","ucode":"D54E7F428E7F49","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/e6/ea4b2c10.jpg","comment_is_top":false,"comment_ctime":1538356660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538356660","product_id":100017301,"comment_content":"最好时间复杂度为O(1), 最坏为O(n), 均摊为O(1)","like_count":0},{"had_liked":false,"id":29285,"user_name":"Nirvanaliu","can_delete":false,"product_type":"c1","uid":1255092,"ip_address":"","ucode":"A2576845D5A18E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELVTictrUd4I3icvCtoibG2WibaiaILSxj0TAXvk27evBR6nfnYuEqIfmfW6pRl42IibcZyiaoqrXqDnzymw/132","comment_is_top":false,"comment_ctime":1538324029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538324029","product_id":100017301,"comment_content":"文章结构:<br>\t由上一章内容引入其他四个复杂度分析。最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。<br>1.\t最好最坏情况复杂度分析<br>由在一个数组中查找某个数的例子展开讲解。此例复杂度为O（n）<br>针对此算法进行优化。找到就推出。所以此时有最好最坏情况复杂度<br>最好O(1) 最坏O(n)<br>2.\t平均复杂度<br>查找变量x在数组中，有0 – n-1与不在数组中的 n+1中情况，把每种情况下，查找需要遍历的元素个数累加起来，然后再除以n+1，就可以得到在一个数组中查找一个元素所需要遍历的元素平均值。<br>此时得到平均复杂度O(n)<br>但是以上分析有所缺点，因为n+1种情况出现的概率不同。<br>\t\t结合概率最后依然得出O(n)<br>3.\t均摊复杂度分析<br>作者从平均复杂度引入均摊复杂度。平均复杂度已经较为特殊，均摊时间复杂度的应用场景更加特殊、有限。<br>引入insert函数，功能描述：往数组中插数据，当数组满了后，讲arr[0]置为所有元素的和，并且讲cout置为1.<br>循环调用insert，分析其时间复杂度。<br>假设数组长度为n，有常规的n种插入，多出一种数组满了，从而进行的一些操作。所以总共有n+1种情况，这些情况出现的概率相同，所以平均复杂度为O(1)<br>讲find函数与insert函数对比，find在极端情况下才为O（1），insert大部分情况下都为O(1)，且O(n)的时间复杂度出现的频率非常规律，有一定前后关系，一个O(n)插入后，紧跟n个O（1）操作。所以出现频率可以看成特殊的阶梯函数。<br>实际上的思路就是每一次O(n)的插入操作，都会有n-1次O(1)的插入，将耗时多的均摊到耗时少的。这就是均摊的思路。再简单说就是，大部分时候此算法的时间复杂度很低，偶尔会出现很高的复杂度。<br>","like_count":0},{"had_liked":false,"id":29256,"user_name":"Feng","can_delete":false,"product_type":"c1","uid":1019678,"ip_address":"","ucode":"4328C3CE24A8E3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/1e/c7e77731.jpg","comment_is_top":false,"comment_ctime":1538309186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538309186","product_id":100017301,"comment_content":"这节在火车站候车室看完的，不够专注，等再刷，而且过一遍大家的留言讨论~打卡","like_count":0},{"had_liked":false,"id":29254,"user_name":"booker","can_delete":false,"product_type":"c1","uid":1205865,"ip_address":"","ucode":"950860DD77413D","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/69/110f35c1.jpg","comment_is_top":false,"comment_ctime":1538306831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538306831","product_id":100017301,"comment_content":"留言中高手太多了，不敢露面了！🙈🙈","like_count":0},{"had_liked":false,"id":29253,"user_name":"积分上限你会算","can_delete":false,"product_type":"c1","uid":1250512,"ip_address":"","ucode":"D5C4A6DEC928A6","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/d0/a9d1c682.jpg","comment_is_top":false,"comment_ctime":1538306095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538306095","product_id":100017301,"comment_content":"数学公式都能看懂，数学背后的逻辑思想也能看懂…可是就是不懂编程语言，好多语句看不懂意思…😂","like_count":0},{"had_liked":false,"id":29249,"user_name":"韦爷","can_delete":false,"product_type":"c1","uid":1077583,"ip_address":"","ucode":"A94354C1BDB30F","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/4f/cb764658.jpg","comment_is_top":false,"comment_ctime":1538304168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538304168","product_id":100017301,"comment_content":"作业和均摊复杂度的例子是一样的，最后均摊后复杂度是O(1)","like_count":0},{"had_liked":false,"id":29212,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1538290305,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538290305","product_id":100017301,"comment_content":"老师您好 想问一下 做算法题的时候 什么样的api可以使用 什么样的就不能使用了 比如string.toCharArray , StringBuilder这些系统实现好的方法可以直接调用么 还是所有功能都要自己实现","like_count":0},{"had_liked":false,"id":29206,"user_name":"飞羽","can_delete":false,"product_type":"c1","uid":1241451,"ip_address":"","ucode":"6779BCE78AA636","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/6b/c95dab3c.jpg","comment_is_top":false,"comment_ctime":1538289443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538289443","product_id":100017301,"comment_content":"习题：<br>当i &lt; len-1时，每次调用的复杂度是O(1)；<br>当i == len时，时间复杂度为O(n)；<br>它们的出现是以一定的时效交替出现的，因此使用摊分分析法。<br>当i == len时，时间复杂度为O(n)，均摊到最好情况中为O(1 + 1) = O(2) = O(1)，所以最好情况时间复杂度为O(1)，最差情况时间复杂度为O(n)，均摊时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":29172,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1538276884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538276884","product_id":100017301,"comment_content":"摊还分析，每一次耗时操作均摊到上一次耗时操作和此次耗时操作之间的操作，是一个常数2，因此时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":29162,"user_name":"Edward","can_delete":false,"product_type":"c1","uid":1058243,"ip_address":"","ucode":"7C8DE1047BB62E","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/c3/da248508.jpg","comment_is_top":false,"comment_ctime":1538276334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538276334","product_id":100017301,"comment_content":"最后的代码跟Java ArrayList add时自动扩容为1.5倍的思路一样","like_count":0},{"had_liked":false,"id":29152,"user_name":"CH.en","can_delete":false,"product_type":"c1","uid":1142436,"ip_address":"","ucode":"F7035EBA519E48","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/a4/e3bb31e0.jpg","comment_is_top":false,"comment_ctime":1538275769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538275769","product_id":100017301,"comment_content":"时间复杂度分析4个概念：<br>1.最好情况时间复杂度: 该段程序在最理想情况运行的时间复杂度。<br>2.最坏情况时间复杂度: 该段程序在最坏情况运行的时间复杂度。<br>3.平均时间复杂度: 代码在所有情况下运行的次数加权平均值。<br>4.均摊时间复杂度: 代码在进行一次耗时多（复杂度高）的操作后，会伴随一定次数的耗时少（复杂度低）的操作，把耗时多的均摊到后面的的操作上，这一组操作下来的时间复杂度就是均摊复杂度。最终的结果基本等于较低的复杂度。","like_count":0},{"had_liked":false,"id":29150,"user_name":"卖藥郎","can_delete":false,"product_type":"c1","uid":1231829,"ip_address":"","ucode":"0539EF1D335918","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/d5/fab32cf7.jpg","comment_is_top":false,"comment_ctime":1538275486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538275486","product_id":100017301,"comment_content":"极限法也是挺好使的，当数组长度为极限长时，我们就有无限的插入空间，所以时间复杂度就是常量级别的","like_count":0},{"had_liked":false,"id":29147,"user_name":"卖藥郎","can_delete":false,"product_type":"c1","uid":1231829,"ip_address":"","ucode":"0539EF1D335918","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/d5/fab32cf7.jpg","comment_is_top":false,"comment_ctime":1538275333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538275333","product_id":100017301,"comment_content":"我觉得，插入数据的例子中还是显示的重置比较好，因为并不影响他的复杂度。","like_count":0},{"had_liked":false,"id":29126,"user_name":"風華","can_delete":false,"product_type":"c1","uid":1164612,"ip_address":"","ucode":"B35962E0CD6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/11/c5/44/8ff59fc4.jpg","comment_is_top":false,"comment_ctime":1538272019,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538272019","product_id":100017301,"comment_content":"1. 加权平均时间复杂度：计算n的每一个数值出现的概率，然后求和，得到的即为平均时间复杂度。<br>2. 均摊时间复杂度：将某个特殊点k出现时，得到的时间复杂度，平均分配给通用的点。","like_count":0},{"had_liked":false,"id":29123,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1024140,"ip_address":"","ucode":"98C3CFB6E4EA15","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/8c/ecc1aee5.jpg","comment_is_top":false,"comment_ctime":1538271733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538271733","product_id":100017301,"comment_content":"最好O(1)，最坏O(n)，平均O(1)，但是老师，有个地方想的不是很明白，就是进入if中后，len的值是以2^n在递增的，也就是每次for循环次数是以指数形式在递增，这里该如何去理解？","like_count":0},{"had_liked":false,"id":29118,"user_name":"翰蓝云天","can_delete":false,"product_type":"c1","uid":1140127,"ip_address":"","ucode":"EED91F9D33137D","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/9f/61dfb8f1.jpg","comment_is_top":false,"comment_ctime":1538270773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538270773","product_id":100017301,"comment_content":"最好情况复杂度<br>最坏情况复杂度<br>平均情况复杂度<br>\t通常情况使用一个复杂度即可，同一代码块在不同情况下，时间复杂度有量级差距时，才采用这三种复杂度来区分<br>均摊时间复杂度<br>\t特殊的平均时间复杂度，一般为最好时间复杂度<br>\t<br>课后思考：<br>\t最好复杂度、平均复杂度、均摊时间复杂度 O(1)<br>\t最坏复杂度 O(n) （只有在add()函数执行一次的时候会出现，多次执行整体的复杂度就是O(1)） ","like_count":0},{"had_liked":false,"id":29111,"user_name":"15221031154","can_delete":false,"product_type":"c1","uid":1250537,"ip_address":"","ucode":"0EE6255716517A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epx4KyvThXw7Sm1y7p2Mt0KAwADcU0tynbK58Ik6xTibN2dId4PrLfbhpHZ0DIDhVVxJXvTzeSDEicw/132","comment_is_top":false,"comment_ctime":1538270392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538270392","product_id":100017301,"comment_content":"写一个算法的时候，不仅要考虑到时间复杂度，也要在此基础上考虑到平均时间复杂度，同样是O（n）的，可以优化成平均时间复杂度是O（1）的，类似老师代码中的break的方式","like_count":0},{"had_liked":false,"id":29104,"user_name":"Pan^yu","can_delete":false,"product_type":"c1","uid":1235771,"ip_address":"","ucode":"28F983B58A9EC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/3b/e56ff0a9.jpg","comment_is_top":false,"comment_ctime":1538269281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538269281","product_id":100017301,"comment_content":"len=n，<br>最好情况是O(1)<br>最坏情况是O(n*n)，因为他申请的是两倍大的空间，所以空间是n，2n，4n...，n*n <br>均摊情况是O(1)，出现n倍数的情况，前面都会有n次复杂度为1的情况，摊还之后就是O(1)","like_count":0},{"had_liked":false,"id":29101,"user_name":"墨家乙","can_delete":false,"product_type":"c1","uid":1243774,"ip_address":"","ucode":"CB13248D939E7B","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/7e/a9893e1c.jpg","comment_is_top":false,"comment_ctime":1538268856,"is_pvip":false,"replies":[{"id":"10462","content":"可以的 都是比较基础的 如果看不大懂 还是要补一下的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538270656,"ip_address":"","comment_id":29101,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538268856","product_id":100017301,"comment_content":"这些推导过程看着吃力，主要是数学知识忘记了，有必要重新学习一下高中数学的函数和数列吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425493,"discussion_content":"可以的 都是比较基础的 如果看不大懂 还是要补一下的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538270656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29065,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1538246341,"is_pvip":false,"replies":[{"id":"10471","content":"1.正确<br>2. 你可以理解成指针","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538271724,"ip_address":"","comment_id":29065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538246341","product_id":100017301,"comment_content":"看完课来打卡。<br>1. 课后习题：<br>最好时间复杂度就是 O(1)，最坏时间复杂度是 O(len), 平均情况时间复杂度是 O(1)，均摊时间复杂度是 O(1)。<br>平均情况也是和课程中一样进行讨论，（0~len-1) 是在数组范围中的，len 则是需要申请空间；所以总共有 len+1 种情况。然后 (0~len-1) 的时间复杂度是 O(1)，第 len 个则是需要 O(len) 的时间复杂度。所以利用期望把它们加起来，公式就和老师在课上写的差不多。最后求出来是 2n&#47;(n+1) ，然后用大 O 表示法就是 O(1) 的复杂度了～<br>其他的求解的过程和上面的讲解差不多，所以不懂的同学可以再去看一下课～<br><br>2. 自己的问题<br>老师，请问一下最后课后作业那个 add 代码那儿，array = new_array 这样写是合法的吗？这两个数组的长度都不一样，可以直接赋值过去的吗？谢谢～","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425482,"discussion_content":"1.正确\n2. 你可以理解成指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538271724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29055,"user_name":"短迪大魔王","can_delete":false,"product_type":"c1","uid":1236079,"ip_address":"","ucode":"37E8117E0495B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","comment_is_top":false,"comment_ctime":1538236963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538236963","product_id":100017301,"comment_content":"解释一下find的期望问题，首先在内和不在数组内先验概率不知道的时候按照最大熵原理各一般所以是1&#47;2很合理。之后，在内且是第一个1&#47;2*1&#47;n，在内是第二个1&#47;2*2&#47;n因为找了两次，以此类推，找了所有元素1&#47;2*n&#47;n，还有就是加上在外的1&#47;2*n，因为只有一种情况就是再外。同时发生是乘法，可以理解两个事都是概率都小于1，越同时发生越难，小于1越乘越小。","like_count":0},{"had_liked":false,"id":29047,"user_name":"Klaus","can_delete":false,"product_type":"c1","uid":1227013,"ip_address":"","ucode":"C28D47A8B1F849","user_header":"https://static001.geekbang.org/account/avatar/00/12/b9/05/ad0c0aa3.jpg","comment_is_top":false,"comment_ctime":1538235674,"is_pvip":false,"replies":[{"id":"10475","content":"你是说类似快排到partition吧 讲到排序那一节会讲 现在没代码 讲起来好费劲啊 抱歉啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538272065,"ip_address":"","comment_id":29047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538235674","product_id":100017301,"comment_content":"请教一个问题，为什么随机选择算法的时间复杂度是O(n)，这个是怎么计算的，外层是一个递归，里面是一个partition ，这样的该怎么算啊？求解","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425475,"discussion_content":"你是说类似快排到partition吧 讲到排序那一节会讲 现在没代码 讲起来好费劲啊 抱歉啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538272065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29021,"user_name":"蒋礼锐","can_delete":false,"product_type":"c1","uid":1248897,"ip_address":"","ucode":"25E042066A1427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gM1ibHKPkrs5DSIp4aIuQ9jnYtNicc2tdG244PbaSvKw5jO9DWrhWghcVM1Y5Iq2QSpzLBUeWZQLhARst51z35mA/132","comment_is_top":false,"comment_ctime":1538226755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538226755","product_id":100017301,"comment_content":"该函数表达的意思是当 i 大于等于 len 的时候, 申请一个两倍的空间, 并将之前的值按照次序放入新的 arr 中, 再进行插入.<br><br>最好复杂度为: 不进入循环 O(1)<br>最坏复杂度为: 进入循环 O(n)<br>平均复杂度为:<br>每一个 add 的概率都为: 1&#47;n, 前 n-1 次 add 的复杂度为1, 最后一个的复杂度为 n(不知道要不要算 arr[i] = val 这一行的复杂度, 如果算上应该是 n+1) 所以平均复杂度为:<br>(n-1) * 1&#47;n + n * 1&#47;n = (2*n-1) &#47;n 即 O(1)<br>均摊复杂度为:<br>每 n 次一个循环, 最后一次的复杂度可以均摊到其余 n-1 次上, 所以均摊复杂度依然为 O(1).<br><br>但是老师, 我想问如果不是 n 次一个循环呢?还能均摊吗? 比如如果是3的倍数, 我就把数组遍历一遍, 每一个加1, 其余情况还是插入这个函数, 即变成:<br><br>let arr = new Array(10) &#47;&#47; 表示 10 位数组<br>let sum = 0<br>let i = 0<br>function add(val) {<br>  if (i % 3 || i &gt; arr.length) {&#47;&#47; 当 i 为3的倍数, 或者大于长度时<br>    new_arr = new Array(2 * len)<br>    for (let j in arr) {<br>      sum += arr[i]<br>    }<br>    arr[0] = sum<br>    if (i &gt; arr.length) {<br>      i = 1<br>    } else {<br>      i ++<br>    }<br>  } else {<br>    arr[i] = val<br>    len += 2<br>    i ++ <br>  }<br>}<br><br>这个还能均摊吗?<br>我认为不能, 比如, 第1,2次是复杂度是1, 第三次是2(遍历前两个插入的), 4,5次为1, 第6次为5, 后面凡是3的倍数的复杂度会越来越高, 但是可以均摊的却没有跟着增多, 也就是负责度在一直累加着, 所以, 当n 趋于无穷大的时候是不是就可以忽略均摊的部分了, 所以均摊的复杂度为 O(n),不知道这样想正不正确","like_count":0},{"had_liked":false,"id":29006,"user_name":"lsq","can_delete":false,"product_type":"c1","uid":1235842,"ip_address":"","ucode":"31B84FF9B27731","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/82/638af76b.jpg","comment_is_top":false,"comment_ctime":1538221914,"is_pvip":false,"replies":[{"id":"10447","content":"一般最坏都要看。平均 均摊视具体情况。不同的输入对应的时间复杂度不同 那就要分析一下平均或者均摊时间复杂度了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538224903,"ip_address":"","comment_id":29006,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538221914","product_id":100017301,"comment_content":"想问一下，那么在实际分析应用的时候，我们应该什么时候看最好情况复杂度，什么时候看最差和均摊呢，还是说，主要还是看平均（均摊）时间复杂度？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425463,"discussion_content":"一般最坏都要看。平均 均摊视具体情况。不同的输入对应的时间复杂度不同 那就要分析一下平均或者均摊时间复杂度了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538224903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29005,"user_name":"黄某某","can_delete":false,"product_type":"c1","uid":1246466,"ip_address":"","ucode":"110258C1EE7C53","user_header":"","comment_is_top":false,"comment_ctime":1538221350,"is_pvip":false,"replies":[{"id":"10448","content":"len=10只是一个初始值 他可以很大 甚至无穷大。我们在平均函数复杂度的时候也是在len很大的时候。这里你可以讲len理解成n","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538225007,"ip_address":"","comment_id":29005,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538221350","product_id":100017301,"comment_content":"联系题的最坏时间复杂度的疑问：<br>数组array是固定的长度的，所以循环的次数也就是固定的，为10次。而上节课的内容，复杂度的执行效率是随着输入规模n的增长的变化趋势，<br>而这里输入规模是固定的，所以最坏时间复杂度应该O(1),这样对吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425462,"discussion_content":"len=10只是一个初始值 他可以很大 甚至无穷大。我们在平均函数复杂度的时候也是在len很大的时候。这里你可以讲len理解成n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538225007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28986,"user_name":"翔翔翔飞。","can_delete":false,"product_type":"c1","uid":1248719,"ip_address":"","ucode":"268395A2663AAE","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/cf/2e8412a8.jpg","comment_is_top":false,"comment_ctime":1538214790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538214790","product_id":100017301,"comment_content":"在纸上都画了，代码也写了，但是一遇到问题还是有点懵，看来我还得再看几遍。T。T<br>","like_count":0},{"had_liked":false,"id":28950,"user_name":"流星雨","can_delete":false,"product_type":"c1","uid":1233834,"ip_address":"","ucode":"8F55C8FE834C51","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/aa/ba6cb677.jpg","comment_is_top":false,"comment_ctime":1538205059,"is_pvip":false,"replies":[{"id":"10431","content":"对！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538217878,"ip_address":"","comment_id":28950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538205059","product_id":100017301,"comment_content":"最好是O(1),最坏是O(n)，均摊是O(1)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425441,"discussion_content":"对！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538217878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28943,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1538203743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538203743","product_id":100017301,"comment_content":"学习反馈：<br>最好时间复杂度与最坏时间复杂度这两个是比较容易理解的，也比较好分析；<br>比较难的是平均时间复杂度的分析，这里有可能需要使用概率论的相关知识。<br>平均时间复杂度的分析方法：<br>1、分析算法执行有多少种情况<br>2、每种情况分别出现的概率<br>3、使用加权平均计算期望值，这个就是平均时间复杂度<br>对于均摊时间复杂度的分析是特殊情况，一般在特定的条件下可以使用：<br>在一个数据结构中进行一组连续的操作，大部分情况下复杂度较低，个别情况复杂度高，且这些操作有一定的时序性，那么可以把复杂度高的操作平摊到复杂度低的操作中。<br>一般情况下均摊时间复杂度等于平均时间复杂度。<br>","like_count":0},{"had_liked":false,"id":28936,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538201033,"is_pvip":false,"replies":[{"id":"10438","content":"看用什么语言了，像java就不会，我现在写的代码都只是为了讲数据结构和算法 做了很多简化 而且很多都是为了讲某个知识 自己编出来的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538219134,"ip_address":"","comment_id":28936,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538201033","product_id":100017301,"comment_content":"今天再看一遍的时候发现习题中存在内存泄漏，array从初始到赋值都是new出来的，在申请新数组new_array过后，把new_array赋值给array之前未对array进行delete操作，所以存在内存泄漏把","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425434,"discussion_content":"看用什么语言了，像java就不会，我现在写的代码都只是为了讲数据结构和算法 做了很多简化 而且很多都是为了讲某个知识 自己编出来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538219134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28934,"user_name":"传世乐章","can_delete":false,"product_type":"c1","uid":1251257,"ip_address":"","ucode":"30119DA76A693F","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/b9/e8b3923c.jpg","comment_is_top":false,"comment_ctime":1538200743,"is_pvip":false,"replies":[{"id":"10439","content":"对！<br>","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538219145,"ip_address":"","comment_id":28934,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538200743","product_id":100017301,"comment_content":"课后题的答案与教程中举的均摊复杂度计算的例子完全相同<br>最好O（1）<br>最坏O（n）<br>平均&#47;均摊 O（1）","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425432,"discussion_content":"对！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538219145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28920,"user_name":"Light Lin","can_delete":false,"product_type":"c1","uid":1234625,"ip_address":"","ucode":"C0AA9AA608F395","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/c1/aa9cde77.jpg","comment_is_top":false,"comment_ctime":1538195916,"is_pvip":false,"replies":[{"id":"10440","content":"哈哈 不是","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538219169,"ip_address":"","comment_id":28920,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538195916","product_id":100017301,"comment_content":"问下上面例子中的数组是深复制吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425424,"discussion_content":"哈哈 不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538219169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28916,"user_name":"Effort","can_delete":false,"product_type":"c1","uid":1240393,"ip_address":"","ucode":"C64474AA48CE57","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/49/a7b56c99.jpg","comment_is_top":false,"comment_ctime":1538194300,"is_pvip":false,"replies":[{"id":"10412","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538208463,"ip_address":"","comment_id":28916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538194300","product_id":100017301,"comment_content":"看到有些人问清空数组，建议可以看看JAVA中arraylist的clean方法。他并不会做清空数组的操作，而是直接讲下标指向初始0位置。因为数组操作考的就是下标，而不是里面的值。<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425422,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538208463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28902,"user_name":"Durian","can_delete":false,"product_type":"c1","uid":1240859,"ip_address":"","ucode":"22C66AEF8F7E49","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/1b/b2be3e68.jpg","comment_is_top":false,"comment_ctime":1538190323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538190323","product_id":100017301,"comment_content":"(1) 最好情况下是直接可以插入数据：O(1)<br>(2) 最坏情况下是数组已经满了，开辟一个两倍的数组，并循环之前的数组赋值给新数组：第一次循环为10、第二次循环为2*10、第三次循环为4*10、....、第n次循环为10*2^n-1。去掉常数系数后。最坏时间复杂度为O(2^n)<br>(3) 平均加权时间复杂度：第一次循环前 有10个O(1)的情况、 第二次循环前 有10-1个O(1) 的情况、 第三次循环前 有 2*10-1 个 O(1) 的情况、第四次循环前 有 2^2*10-1 个O(1) 的情况 ......第n次循环前 有2^(n-1)*10-1个O(1) 的情况，加上数组已满的情况 共有2^(n-1)*10 种可能，每个可能的概率为 1&#47;2^(n-1)*10。1&#47;2^(n-1)*10 + 1&#47;2^(n-1)*10 + 1&#47;2^(n-1)*10 + .... + 1&#47;2^(n-1)*10 + 2^n*10 &#47; 2^(n-1)*10 时间复杂度为O(1)<br>(4) 因为前后有时序关系，所以可以用均摊分析来分析，最坏情况时间复杂度为O(2^n) 分给 2^(n-1)个最好情况时间复杂度O(1) 结果还是O(1).","like_count":0},{"had_liked":false,"id":28901,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1238703,"ip_address":"","ucode":"C5EB025A9D1301","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/af/e94ef6d8.jpg","comment_is_top":false,"comment_ctime":1538190199,"is_pvip":false,"replies":[{"id":"10443","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538219329,"ip_address":"","comment_id":28901,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538190199","product_id":100017301,"comment_content":"看不懂insert（）函数的小伙伴看这里，看这里，看这里......<br>请教了大牛之后终于看懂了这个insert（）函数，第1，2行包括insert（）都是在初始化定义，当你在调用insert（）时，就是在往数组里插入数据，当数组满了之后，也就是count == array.length，将数组元素进行求和放到array[0]，然后继续将数据插入到数组，当count = 1,时，也就是array[0]储存了前一个数组的元素和，重新从array[1]开始插入数据。<br>被第一行代码int[] array = new int[n]里面的n给搞蒙了，现在终于懂了，哈哈","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425412,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538219329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28889,"user_name":"fred","can_delete":false,"product_type":"c1","uid":1008139,"ip_address":"","ucode":"88F156EA29F47F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/0b/83b7f67f.jpg","comment_is_top":false,"comment_ctime":1538187051,"is_pvip":false,"replies":[{"id":"10416","content":"你说的目标元素都是靠近数组前面的，那目标元素在靠近数组的后面位置呢？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538208720,"ip_address":"","comment_id":28889,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538187051","product_id":100017301,"comment_content":"find()函数，如果目标元素在第一个，那时间复杂度就是O(1),这个可以理解，但是出现在2、3、或其他位置，不也是常数吗，时间复杂度就不是O(1)了吗，请问老师，这里该怎么理解？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425409,"discussion_content":"你说的目标元素都是靠近数组前面的，那目标元素在靠近数组的后面位置呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538208720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28863,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1538183419,"is_pvip":false,"replies":[{"id":"10418","content":"如果要查找的元素在数组的最后一位 是不是要遍历n个数组元素？如果不在数组中 是不是要遍历n个数组元素？这不就两个n了吗？至于公式 是求n+1中情况的平均遍历数组元素的个数。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538209080,"ip_address":"","comment_id":28863,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538183419","product_id":100017301,"comment_content":"我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：   老师    这个地方实在没看懂   这个公式怎么得出来的  左侧的分子为什么有两个n","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425400,"discussion_content":"如果要查找的元素在数组的最后一位 是不是要遍历n个数组元素？如果不在数组中 是不是要遍历n个数组元素？这不就两个n了吗？至于公式 是求n+1中情况的平均遍历数组元素的个数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538209080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28844,"user_name":"刘岚乔月","can_delete":false,"product_type":"c1","uid":1095289,"ip_address":"","ucode":"99A9AB4E4E1111","user_header":"https://static001.geekbang.org/account/avatar/00/10/b6/79/22e582a5.jpg","comment_is_top":false,"comment_ctime":1538179761,"is_pvip":false,"replies":[{"id":"10381","content":"是的 理解的没错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538184500,"ip_address":"","comment_id":28844,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538179761","product_id":100017301,"comment_content":"因为只有在数组长度达到上限时，才会触发O(n) 剩下的都是O(1)   大多数情况下都是不需要扩容的 所以均摊是O(1)吗？ 可以这样理解吗？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425394,"discussion_content":"是的 理解的没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538184500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28841,"user_name":"steventang","can_delete":false,"product_type":"c1","uid":1251638,"ip_address":"","ucode":"E3D89FDFC3499D","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/36/95246ba9.jpg","comment_is_top":false,"comment_ctime":1538179104,"is_pvip":false,"replies":[{"id":"10382","content":"谢谢认可！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538184533,"ip_address":"","comment_id":28841,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538179104","product_id":100017301,"comment_content":"平均和均摊都是o（1），最坏o（n）。<br>早上起来竟然全部看明白了，特别是公式的分析部分，道明了具体方法。真的是深入浅出，赞！<br><br>希望老师可以再讲下递归和动态规划里的复杂度分析，比如各种排序。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425391,"discussion_content":"谢谢认可！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538184533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28835,"user_name":"DZuo","can_delete":false,"product_type":"c1","uid":1247240,"ip_address":"","ucode":"F23882BC1E307C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKKqibDZaXxicEUNWiap3fQX81H44ia7hJuVwTiaEFFsKzq8prW9evtpUibBYnd6E6xhF0Ox9SdYGyob7vA/132","comment_is_top":false,"comment_ctime":1538174753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538174753","product_id":100017301,"comment_content":"0<br><br>评平均复杂度不应该是O(1), 不能做简单分摊。我对评论时间复杂度分析有歧义，用概率分析，非10倍数概率为9&#47;10，10倍数的概率为1&#47;10，忽略非10倍数的数因为都是一次，现提取10倍数的数：10&#47; n*1&#47;10 + 20&#47; n*1&#47;10...共n&#47;10个，提取公因式：1&#47;n*（1+2+...+ n&#47;10）计算出来的平均复杂度为O（n）。请指正！求解释。<br><br>2018-09-28<br><br> 作者回复<br><br>10&#47;n 20&#47;n是啥呀<br><br>分子是10的倍数时需for循环里的运算次数。<br>分母是每种情况出现的概率是1&#47;n.<br>(建议拉个微信群，留言区讨论起来很麻烦。)<br><br>","like_count":0},{"had_liked":false,"id":28834,"user_name":"A_阿海","can_delete":false,"product_type":"c1","uid":1239200,"ip_address":"","ucode":"5594C992D7E6E9","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/a0/c2daafdb.jpg","comment_is_top":false,"comment_ctime":1538174349,"is_pvip":false,"replies":[{"id":"10383","content":"说的很对！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538185064,"ip_address":"","comment_id":28834,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538174349","product_id":100017301,"comment_content":"针对同一个代码 算法来考量各种极端情况下的复杂度，一般可以发现瓶颈，为进一步思考🤔更好的算法提供理论指导。比如最坏是n，能不能优化成logn 或者 1。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425389,"discussion_content":"说的很对！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538185064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28821,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538151186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538151186","product_id":100017301,"comment_content":"课后练习解析:<br>最好的情况时间:复杂度为O(1)。因为数组的空间足够，每次直接插入，也就是数组下标0~9的执行都为1次，所以10(数据量)&#47;10(执行次数累加)=1,为O(1)<br><br>最坏的情况时间复杂度为O(n)。因为数组空间不够，所以需要循环数组的长度也就是n次。<br><br>均摊也就是计算下概率。在数据空间足够的情况下，0~n-1位置的插入情况为n种，因为有可能在下标0位置插入，有可能在下标1位置插入。。。有可能在下标n-1位置插入，所以插入的情况有n种；在数据空间不足够需要扩容的情况，还有一种情况。所以总的情况为n+1种。故概率为1&#47;(n+1)。所以计算公式跟最后一个例子公式一样。所以最后的执行时间复杂度O(1)。","like_count":0},{"had_liked":false,"id":28813,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538149194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538149194","product_id":100017301,"comment_content":"我们用 for 循环遍历数组求和，并清空数组。这句本来想清空数组，但是我看代码只是强制将下标为0的数据替换，并没有清空后面的数组空间！！！","like_count":0},{"had_liked":false,"id":28812,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538148830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538148830","product_id":100017301,"comment_content":"有空间的情况：<br>那么每个位置的插入次数：<br>第一个位置插入的执行次数为1，直接插入<br>第二个位置插入的执行次数为1，直接插入<br>...<br>第n个位置插入的执行次数为1,直接插入<br><br>没有空间的情况：<br>在第二个位置的插入执行的次数为n，因为要遍历一遍<br><br>这时候根据次数再乘以概率<br><br>1*1&#47;(n+1)+1*1&#47;(n+1)+....1*1&#47;(n+1)+n*1&#47;(n+1)=O(1)<br><br>因为根据去除最低项。1&#47;(n+1)永远比n&#47;(n+1)小。所以取n&#47;(n+1)。最后得出O(1)。以上理解过程，不知道对不对，还有老师麻烦看下，概率为啥是1&#47;(n+1)","like_count":0},{"had_liked":false,"id":28811,"user_name":"Alan","can_delete":false,"product_type":"c1","uid":1243563,"ip_address":"","ucode":"EF3B6A90054B34","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/ab/374fe105.jpg","comment_is_top":false,"comment_ctime":1538148802,"is_pvip":false,"replies":[{"id":"10388","content":"我举的例子都是量级差一个量级的。o（1）和o（n）。 量级差距大于1的。我还没遇到过。不过 我个人觉得不必拘泥于非得要分析均摊。你可以这么表示：在大部分情况下 时间复杂度都是 xxx 在某些特殊情况下是 xxx 这些特殊情况出现的概率是xxx。 这样子描述就够了。我们不要为了学复杂度而学复杂度。复杂度的初衷还是为了分析代码的执行效率。我们只要能讲这个执行效率表示清楚 不一定非得要用所谓的平均 均摊这些概念","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538185806,"ip_address":"","comment_id":28811,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538148802","product_id":100017301,"comment_content":"请问在均摊复杂度计算中，复杂度低的操作和复杂度高的操作的量级相差一阶，两阶…的情况下，会影响最终结果吗，如果会的话，量级差距在大于一阶的情况下该怎么均摊？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425379,"discussion_content":"我举的例子都是量级差一个量级的。o（1）和o（n）。 量级差距大于1的。我还没遇到过。不过 我个人觉得不必拘泥于非得要分析均摊。你可以这么表示：在大部分情况下 时间复杂度都是 xxx 在某些特殊情况下是 xxx 这些特殊情况出现的概率是xxx。 这样子描述就够了。我们不要为了学复杂度而学复杂度。复杂度的初衷还是为了分析代码的执行效率。我们只要能讲这个执行效率表示清楚 不一定非得要用所谓的平均 均摊这些概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538185806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28809,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538148025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538148025","product_id":100017301,"comment_content":"查找的那个例子概率分两种，存在的情况，为1&#47;n,不存在为1&#47;2。根据相乘1&#47;2n。但是插入的是分为两种:有空间的情况，插入每个位置的概率为1&#47;n。没有空间的，插入概率为多少呢？为啥最后的概率是1&#47;(n+1)???","like_count":0},{"had_liked":false,"id":28808,"user_name":"Joshua 兆甲","can_delete":false,"product_type":"c1","uid":1244179,"ip_address":"","ucode":"473223055AC083","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/13/11f8062e.jpg","comment_is_top":false,"comment_ctime":1538147932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538147932","product_id":100017301,"comment_content":"希望老师再联系实际多讲讲sql语句复杂度分析。感谢。<br>还有一个小问题，怎么理解操作次数和可能出现概率的加权平均？举例，您给的测试题中，n=len的2^t倍(t为非负整数)时，会有一次大挪移，每次精确的操作次数应该是n次，其他时候操作次数是1次。任意给定操作的数据规模为n<br>n&lt;=len时，每次操作1次。<br>n&gt;len，那么需要大挪移操作的次数为[log2(n&#47;len)]向下取整，操作的次数为固定的len,2len,...klen次。这样看下来，操作的次数与len有关。<br>如果算概率，n的数据规模中，只有可计算的几次的操作需要较多次，其他时候都是1次。那么感觉是1&#47;n的概率操作一次，然后与len有关的有限的几次操作次数是len次。好像len越大，操作的次数就越少，那么为何最后的平均时间复杂度与len的值无关呢？","like_count":0},{"had_liked":false,"id":28805,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538147395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538147395","product_id":100017301,"comment_content":"而且，这 n+1 种情况发生的概率一样，都是 1&#47;(n+1)。请问下，老师，这个概率为啥是1\\(n+1)???，这个为啥不像之前查找算概率？","like_count":0},{"had_liked":false,"id":28796,"user_name":"一颗浪星","can_delete":false,"product_type":"c1","uid":1035794,"ip_address":"","ucode":"CB184714766CC8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/12/6e7d9b56.jpg","comment_is_top":false,"comment_ctime":1538146413,"is_pvip":false,"replies":[{"id":"10390","content":"你让你身边的同事或者同学一块算算","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538185951,"ip_address":"","comment_id":28796,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538146413","product_id":100017301,"comment_content":"（1+2+3+...+n+n）&#47;（n+1） 好像等于 （n*（n+2））&#47;（2*（n+1））     分子好像错了？？？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425376,"discussion_content":"你让你身边的同事或者同学一块算算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538185951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28775,"user_name":"GradleX","can_delete":false,"product_type":"c1","uid":1252635,"ip_address":"","ucode":"B4BD3DA2F728AA","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/1b/5f26dcfd.jpg","comment_is_top":false,"comment_ctime":1538143353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538143353","product_id":100017301,"comment_content":"四大复杂度分析：最好&#47;最坏&#47;平均&#47;均摊 时间复杂度<br><br>&#47;&#47;查找数组中首个为指定值的元素<br>int find(int [] array,int n,int x){<br>\tint i=0;<br>\tint pos=-1;<br>\tfor(;i&lt;n;i++){<br>\t\tif(array[i]==x){<br>\t\t\tpos=i;<br>\t\t\tbreak;<br>\t\t}<br>\t}<br>\treturn pos;<br>}<br><br>&#47;&#47;最好时间复杂度：执行次数最少情况的复杂度<br>&#47;&#47;当数组首个元素即为指定值时<br>最好情况时间复杂度=O(1)<br><br>&#47;&#47;最坏情况复杂度：执行次数最多情况的复杂度<br>&#47;&#47;当数组没有元素为指定值时<br>最坏情况时间复杂度=O(n)<br><br>&#47;&#47;平均情况时间复杂度=对应情况x对应概率 的总和（结果忽略不影响复杂度改变趋势的参数）<br>数组中存在指定值&#47;不存在指定值的概率都为1&#47;2，数组下标0到下标n-1的元素为指定值的概率都为1&#47;2（1&#47;nx2）<br>1x1&#47;2n+2x1&#47;2n+3x1&#47;2n+...+nx1&#47;2n+nx1&#47;2=(3n+1)&#47;4<br>平均情况时间复杂度=O(n)<br><br>&#47;&#47;向数组插入数据，该轮数据将数组插满后遍历数组求和并插入数组首元素，继续插入下一轮数据 一直循环<br>int []array=new int[n];<br>int count=0;<br><br>void insert(int val){<br>\tif(count==array.length){<br>\t\tint sum=0;<br>\t\tfor(int i=0;i&lt;array.length;i++){<br>\t\t\tsum+=array[i];<br>\t\t}<br>\t\tarray[0]=sum;<br>\t\tcount=1;<br>\t}<br>\tarray[count]=val;<br>\tcount++;<br>}<br><br>&#47;&#47;当数组存在空闲<br>最好情况时间复杂度=O(1)<br><br>&#47;&#47;当数组已插满<br>最坏情况时间复杂度=O(n)<br><br>&#47;&#47;平均情况时间复杂度<br>对于非首轮数据（首轮数据不具普遍性可忽略），插入数组下标2、...、插入数组下标n-1位置、数组已插满（即同时插入下标0与下标1位置） 概率都相同为1&#47;n-1 （共n-1中情况）<br>(n-2)x(1x1&#47;(n-1))+nx1&#47;(n-1)<br>平均情况时间复杂度=O(1)<br><br>&#47;&#47;均摊复杂度：对于复杂度变化周期中大部分为低复杂度并且极少数为高复杂度，可将高复杂度均摊到低复杂度从而实现降低复杂度阶数（结果一般就为低复杂度）<br>对于非首轮数据，复杂度变化周期中将数组已插满（即同时插入下标0与下标1位置）的复杂度O(n)均摊到其他低复杂度（n-2个O(1)复杂度）<br>均摊复杂度=O(1)<br><br>int array[]=new int[10];<br>int len=10;<br>int i=0;<br><br>&#47;&#47;往数组中添加元素<br>void add(int element){<br>\tif(i&gt;=len){&#47;&#47;数组空间已满<br>\t\t&#47;&#47;扩大1倍数组空间<br>\t\tint new_arrary[]=new int[len*2];<br>\t\tfor(int j=0;j&lt;len;j++){<br>\t\t\tnew_array[j]=array[j];&#47;&#47;拷贝数据 <br>\t\t}<br>\t\tarray=new_array;<br>\t\tlen=2*len;<br>\t}<br>\tarray[i]=element;&#47;&#47;添加数据<br>\ti++;&#47;&#47;数组下个添加元素位置的下标<br>}<br>&#47;&#47;当数组未满时<br>最好时间复杂度：O(1)<br><br>&#47;&#47;当数组已满时<br>最坏时间复杂度：O(n)<br><br>&#47;&#47;对于非首轮数据（首轮数据不具普遍性可忽略），插入数组下标n+1、...、插入数组下标2n-1位置、数组已满（插入数组下标n位置）概率都相同为1&#47;n （共n中情况）<br>(n-1)x(1x1&#47;n)+nx1&#47;n<br>平均时间复杂度：O(1)<br><br>&#47;&#47;对于非首轮数据，复杂度变化周期中将数组已插满（即插入下标n位置）的复杂度O(n)均摊到其他低复杂度（n-1个O(1)复杂度）<br>均摊复杂度：O(1)<br><br>&#47;*<br>\t【最好时间复杂度：执行次数最少情况的复杂度】<br>\t【最坏情况复杂度：执行次数最多情况的复杂度】<br>\t【【平均情况时间复杂度=对应情况x对应概率 的总和（结果忽略不影响复杂度改变趋势的参数）】】<br>\t【【均摊复杂度：对于复杂度变化周期中大部分为低复杂度并且极少数为高复杂度，可将高复杂度均摊到低复杂度从而实现降低复杂度阶数（结果一般就为低复杂度）】】<br>*&#47;<br>","like_count":0},{"had_liked":false,"id":28774,"user_name":"🍞花生酱","can_delete":false,"product_type":"c1","uid":1251737,"ip_address":"","ucode":"CDEE4F4F2DF2BD","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/99/c54feced.jpg","comment_is_top":false,"comment_ctime":1538143240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538143240","product_id":100017301,"comment_content":"空间复杂度看上去应该是logn的样子🤔","like_count":0},{"had_liked":false,"id":28766,"user_name":"刘森森","can_delete":false,"product_type":"c1","uid":1206551,"ip_address":"","ucode":"1FCFCAD380D564","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/17/304264a4.jpg","comment_is_top":false,"comment_ctime":1538142280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538142280","product_id":100017301,"comment_content":"最好时间复杂度O(1)<br>最坏时间复杂度O(n)<br>平均时间复杂度O(1)<br>假设数组的初始值是x,数组扩容了n次<br>O=1&#47;n * (1&#47;x+1 + 1&#47;x+1 +....+ 1&#47;x+1 + 1&#47;2x+1 + 1&#47;2x+1 +....+ 1&#47;2x+1 +....+ 1&#47;xn+1 + 1&#47;xn+1 +....+ 1&#47;nx+1)=1&#47;n * (1+1+....+1)=1&#47;n * n=1<br>均摊平局复杂度O(1),分析过程和老师讲的一样","like_count":0},{"had_liked":false,"id":28765,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1538142199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538142199","product_id":100017301,"comment_content":"老师，对insert那个例子用加权时间复杂度分析的例子我没看懂。<br>1 * 1 &#47; (n + 1) + 1 * 1 &#47; (n + 1) + ... + 1 * 1 &#47; (n + 1) + n * 1 &#47; (n + 1) = O(1)这个公式怎么推出来等于O(1)的。<br>按照我的理解 n个 1 &#47; (n + 1)相加 再与 n &#47; (n + 1)相加应该是 2n &#47; (n + 1)才对。而这个结果也化不成O(1)呀。<br>我真的是百思不得其解。还请老师帮忙解答下，谢谢！","like_count":0},{"had_liked":false,"id":28745,"user_name":"我的心里只有工作","can_delete":false,"product_type":"c1","uid":1238185,"ip_address":"","ucode":"488DD6F9590EB8","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/a9/117fe480.jpg","comment_is_top":false,"comment_ctime":1538138884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538138884","product_id":100017301,"comment_content":"前后看了两遍，上班看了一遍，下班一遍，终于看明白了，o(1)","like_count":0},{"had_liked":false,"id":28742,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1538138333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538138333","product_id":100017301,"comment_content":"new出来的对象，用完之后应该delete下?","like_count":0},{"had_liked":false,"id":28736,"user_name":"阿鑫","can_delete":false,"product_type":"c1","uid":1230313,"ip_address":"","ucode":"97A0BE95FB7383","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/e9/4013a191.jpg","comment_is_top":false,"comment_ctime":1538136824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538136824","product_id":100017301,"comment_content":"讲的很好","like_count":0},{"had_liked":false,"id":28735,"user_name":"鲫鱼","can_delete":false,"product_type":"c1","uid":1240828,"ip_address":"","ucode":"ACB8E3317FFE99","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/fc/9b72e224.jpg","comment_is_top":false,"comment_ctime":1538136616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538136616","product_id":100017301,"comment_content":"只自学一点python，感觉代码部分有点吃力，但是也能通过讲解看懂很多！而且评论区的内容也能让我增长许多知识！！","like_count":0},{"had_liked":false,"id":28733,"user_name":"Yuki","can_delete":false,"product_type":"c1","uid":1236951,"ip_address":"","ucode":"77215655E0A584","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/d7/ee3da208.jpg","comment_is_top":false,"comment_ctime":1538136048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538136048","product_id":100017301,"comment_content":"有点基础，跟着看完第一遍，感觉老师讲的都对，自己也貌似懂了。看到评论区提出的算法有不同结果，回过头自己推导一遍，发现确实没有推导得到老师的答案。沉淀一下，再推导看看，谁对谁错？","like_count":0},{"had_liked":false,"id":28731,"user_name":"mobo","can_delete":false,"product_type":"c1","uid":1243630,"ip_address":"","ucode":"195170E57B471B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/ee/1bbc2676.jpg","comment_is_top":false,"comment_ctime":1538135160,"is_pvip":false,"replies":[{"id":"10356","content":"就是还有空间可以存储数据","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538142741,"ip_address":"","comment_id":28731,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538135160","product_id":100017301,"comment_content":"老师好，什么是数组空闲空间，搞不懂，下面的分析更加迷糊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425362,"discussion_content":"就是还有空间可以存储数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538142741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28728,"user_name":"hope","can_delete":false,"product_type":"c1","uid":1250784,"ip_address":"","ucode":"468A802184AB32","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/e0/bc9f556c.jpg","comment_is_top":false,"comment_ctime":1538134962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538134962","product_id":100017301,"comment_content":"看完了，打卡<br>练习题我认为最好是O(1)，最差是O(n)，均摊是O(1)<br>上次说做总结结果没完成，这次还是准备做总结，博客没搭建好，这两天会抓紧先注册个公众号，抓紧总结","like_count":0},{"had_liked":false,"id":28727,"user_name":"南瓜马车","can_delete":false,"product_type":"c1","uid":1037879,"ip_address":"","ucode":"1392C37930EF21","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d6/37/1eb9e981.jpg","comment_is_top":false,"comment_ctime":1538134929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538134929","product_id":100017301,"comment_content":"这个代码图框太窄了，找了半天发现可以横着拉","like_count":0},{"had_liked":false,"id":28726,"user_name":"yi_jun","can_delete":false,"product_type":"c1","uid":1132165,"ip_address":"","ucode":"0A0C244A9C0652","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/85/0a5f1b5b.jpg","comment_is_top":false,"comment_ctime":1538134806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538134806","product_id":100017301,"comment_content":"最坏时间复杂度为O(n):一进来就发现数组的空间不够,需要扩充数组,扩充数组时主要的代码为复制数组的代码. 最好时间复杂度为O(1):数组的空间足够,直接添加元素. 平均复杂度为O(1). 均摊复杂度为O(1):n+1种可能的操作里面只有1种的复杂度为O(n), 均摊到其他复杂度为O(1)的情况,最终也是O(1)","like_count":0},{"had_liked":false,"id":28724,"user_name":"长安","can_delete":false,"product_type":"c1","uid":1235228,"ip_address":"","ucode":"149EE6E7472CE7","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/1c/aa08ae6b.jpg","comment_is_top":false,"comment_ctime":1538134417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538134417","product_id":100017301,"comment_content":"总结:最好情况时间复杂度 最坏情况时间复杂度 平均情况时间复杂度也叫加权平均时间复杂度或者期望时间复杂度 均摊时间复杂度以及摊还分析法<br>课后题:当i&lt;len时即数组空间足够可直接添加 时间复杂度为O(1) 当i&gt;=len时即i=n 进行for循环时间复杂度为O(n) 利用摊还分析法 将数量级高的均摊到数量级低的 最终整段代码的时间复杂度为O(1)","like_count":0},{"had_liked":false,"id":28722,"user_name":"mobo","can_delete":false,"product_type":"c1","uid":1243630,"ip_address":"","ucode":"195170E57B471B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/ee/1bbc2676.jpg","comment_is_top":false,"comment_ctime":1538134147,"is_pvip":false,"replies":[{"id":"10357","content":"后面不是还除以了2（n+1）吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538142824,"ip_address":"","comment_id":28722,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538134147","product_id":100017301,"comment_content":"老师好，在平均时间复杂度的例子中，为什么是1+2+3+n+n&#47;n+1=n(n+3)&#47;2(n+1)呢，比如n=5，累加起来是20,而n(n+3)就是40，这2章学的有点懵","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425361,"discussion_content":"后面不是还除以了2（n+1）吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538142824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28719,"user_name":"康飞","can_delete":false,"product_type":"c1","uid":1174988,"ip_address":"","ucode":"01A9DC5D0A2A69","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/cc/89bd9323.jpg","comment_is_top":false,"comment_ctime":1538133593,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538133593","product_id":100017301,"comment_content":"递归的时间复杂度应该是 递归函数单次时间复杂度乘以调用次数","like_count":0},{"had_liked":false,"id":28718,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538133211,"is_pvip":false,"replies":[{"id":"10346","content":"是的 完全正确 👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538136874,"ip_address":"","comment_id":28718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538133211","product_id":100017301,"comment_content":"要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组...<br>（1+2+3+...+n+n）                n(n+3)<br>--------------------------- =     ----------<br>n+1                                           2(n+1)<br><br>是因为x在数组最后一个位置上的时候需要遍历n次才能找到,所以能找到的情况是(1+2+3+...+n),如果不存在该数组的话还要再遍历n次，所以发现没找到是这样理解么？所以才会是(1+2+3+...+n+n)?","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425360,"discussion_content":"是的 完全正确 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538136874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28717,"user_name":"韩","can_delete":false,"product_type":"c1","uid":1218674,"ip_address":"","ucode":"75BB3E48AE7E45","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/72/0dccb3e7.jpg","comment_is_top":false,"comment_ctime":1538133147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538133147","product_id":100017301,"comment_content":"课后题的答案是O(1)吗？<br>我的上一条留言的答案哪个运算步骤出了问题？<br>我的过程里主要考虑的就是数组每次扩容为2倍的话，每次创建新数组后，循环赋值的这块代码的时间复杂度不是在以10、20、40这样以2^k的指数形式递增的吗？<br>(k代表扩容次数)","like_count":0},{"had_liked":false,"id":28714,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538131659,"is_pvip":false,"replies":[{"id":"10361","content":"一般看最坏和平均。如果平均和最坏不一样的情况下 我们一般两个都会看。比如快排。平均时间复杂度o（nlogn）。最坏情况时间复杂度哦（n^2）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538143025,"ip_address":"","comment_id":28714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538131659","product_id":100017301,"comment_content":"那么第一个例子的优化后的代码，最好的情况时间复杂度为O(1)，平均的为O(n)，最坏的为O(n)，那么我们通常看哪个指标呢？如果看最坏，那么分析平均复杂度的意义是什么呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425358,"discussion_content":"一般看最坏和平均。如果平均和最坏不一样的情况下 我们一般两个都会看。比如快排。平均时间复杂度o（nlogn）。最坏情况时间复杂度哦（n^2）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28706,"user_name":"冷冷","can_delete":false,"product_type":"c1","uid":1048263,"ip_address":"","ucode":"79C9796D17A45A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/c7/36f4fb21.jpg","comment_is_top":false,"comment_ctime":1538129883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538129883","product_id":100017301,"comment_content":"平均情况时间复杂度<br>计算在于把所有的情况给汇总包括  在 和不在  ，所以才有 后边 n + n","like_count":0},{"had_liked":false,"id":28701,"user_name":"DADDYHINS","can_delete":false,"product_type":"c1","uid":1189131,"ip_address":"","ucode":"C5676EF53CA248","user_header":"https://static001.geekbang.org/account/avatar/00/12/25/0b/f9fc5255.jpg","comment_is_top":false,"comment_ctime":1538128753,"is_pvip":true,"replies":[{"id":"10337","content":"别急 学到后面的内容的时候就知道了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538131110,"ip_address":"","comment_id":28701,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538128753","product_id":100017301,"comment_content":"最好情况O(1) 最坏情况O(n) 均摊复杂度O(1)。这周学习的内容学校里没讲过，学校里只学了简单的分析方法，没有讲最好最坏。但是不太清楚这几个不同的复杂度和上一讲讲的复杂度分别该用在哪几种情况呀","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425356,"discussion_content":"别急 学到后面的内容的时候就知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538131110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28696,"user_name":"春阳","can_delete":false,"product_type":"c1","uid":1236231,"ip_address":"","ucode":"82C9B7D2717C01","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/07/39eaca28.jpg","comment_is_top":false,"comment_ctime":1538128262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538128262","product_id":100017301,"comment_content":"i&gt;len扩容一次还不够呢？这个好像没考虑。还有哪个清空，好像只是把第一个修改了。这里所说的清空是什么意思呢？","like_count":0},{"had_liked":false,"id":28690,"user_name":"小坤","can_delete":false,"product_type":"c1","uid":1230728,"ip_address":"","ucode":"09764B4E7F1A77","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/88/18fb4011.jpg","comment_is_top":false,"comment_ctime":1538127627,"is_pvip":false,"replies":[{"id":"10338","content":"兄弟 平均分析的不对哦","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538131179,"ip_address":"","comment_id":28690,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538127627","product_id":100017301,"comment_content":"课后题：<br>1.最好，添加元素时数组没有满，只用执行一次赋值，故复杂度为常量阶O(1)<br>2.最坏，添加元素时数组正好满了，需要新建一个长度为2*len的数组，将原数组中的len个元素一次赋值给新数组，故复杂度为线性阶O(n)<br>3.平均，在数组末尾添加元素时会有两种可能，一种是数组还有空位，另一种时数组正好满了，两种可能的概率都为1&#47;2。期望=1*1&#47;2 + n*1&#47;2 = (n+1)&#47;2，故复杂度为线性阶O(n)<br>4.均摊，题目的add函数可以看做多组连续的操作，每组连续的操作包括n次最好情况(数组没有满，复杂度O(1))和一次最坏情况(数组正好满了，复杂度O(n))。这样每组中的一次最坏情况可以分摊到n次最好情况，故分摊复杂度等于最好复杂度，为常量阶O(1)。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425352,"discussion_content":"兄弟 平均分析的不对哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538131179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28686,"user_name":"DZuo","can_delete":false,"product_type":"c1","uid":1247240,"ip_address":"","ucode":"F23882BC1E307C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKKqibDZaXxicEUNWiap3fQX81H44ia7hJuVwTiaEFFsKzq8prW9evtpUibBYnd6E6xhF0Ox9SdYGyob7vA/132","comment_is_top":false,"comment_ctime":1538127232,"is_pvip":false,"replies":[{"id":"10342","content":"10&#47;n 20&#47;n是啥呀","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538131679,"ip_address":"","comment_id":28686,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538127232","product_id":100017301,"comment_content":"评平均复杂度不应该是O(1),  不能做简单分摊。我对评论时间复杂度分析有歧义，用概率分析，非10倍数概率为9&#47;10，10倍数的概率为1&#47;10，忽略非10倍数的数因为都是一次，现提取10倍数的数：10&#47; n*1&#47;10 + 20&#47; n*1&#47;10...共n&#47;10个，提取公因式：1&#47;n*（1+2+...+ n&#47;10）计算出来的平均复杂度为O（n）。请指正！求解释。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425350,"discussion_content":"10/n 20/n是啥呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538131679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28685,"user_name":"i can","can_delete":false,"product_type":"c1","uid":1254823,"ip_address":"","ucode":"EBD43D7505DCE3","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/a7/aafe5c50.jpg","comment_is_top":false,"comment_ctime":1538126879,"is_pvip":false,"replies":[{"id":"10339","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538131289,"ip_address":"","comment_id":28685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538126879","product_id":100017301,"comment_content":"所以insert是被循环调用,代码中没有体现对吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425349,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538131289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28683,"user_name":"勿忘初心","can_delete":false,"product_type":"c1","uid":1249096,"ip_address":"","ucode":"4F8BFD86013CC2","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/48/fc4460d1.jpg","comment_is_top":false,"comment_ctime":1538126708,"is_pvip":false,"replies":[{"id":"10340","content":"已经除了啊 这是最终结果呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538131331,"ip_address":"","comment_id":28683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538126708","product_id":100017301,"comment_content":"在讲平均情况时间复杂度里面的加权平均时间复杂度的例子中，计算复杂度的时候将每种情况的概率算进去之后，得到(3n+1)&#47;4，为什么这里不除以n+1(总的情况数)？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425348,"discussion_content":"已经除了啊 这是最终结果呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538131331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28681,"user_name":"i can","can_delete":false,"product_type":"c1","uid":1254823,"ip_address":"","ucode":"EBD43D7505DCE3","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/a7/aafe5c50.jpg","comment_is_top":false,"comment_ctime":1538126544,"is_pvip":false,"replies":[{"id":"10343","content":"循环多次调用insert呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538131759,"ip_address":"","comment_id":28681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538126544","product_id":100017301,"comment_content":"insert方法第一行if语句,count=0,array.length=10根本不会进呀,然后执行最后两行,方法结束?","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425347,"discussion_content":"循环多次调用insert呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538131759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28678,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538125827,"is_pvip":false,"replies":[{"id":"10341","content":"能详细一点描述你的问题吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538131418,"ip_address":"","comment_id":28678,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538125827","product_id":100017301,"comment_content":"在平均时间复杂度中公式中为啥是(1+2+3+...+n+n)&#47;(n+1)呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425346,"discussion_content":"能详细一点描述你的问题吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538131418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28676,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1538125217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538125217","product_id":100017301,"comment_content":"最好情况时间复杂度是O(1)，最坏情况时间复杂度是O(n),平均时间复杂度是O(1)。摊还分析平均时间复杂度过程如下：<br>我们可以将20分摊到第11~20，40分摊到第21~40，80分摊到第41~80，平均每个分摊2，所以平均复杂度为O(1)。","like_count":0},{"had_liked":false,"id":28674,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1538125150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538125150","product_id":100017301,"comment_content":"最好情况时间复杂度是$O(1)$，最坏情况时间复杂度是$O(n)$,平均时间复杂度是$O(1)$。摊还分析平均复杂度的过程如下：<br>我们可以将20分摊到第11~20，40分摊到第21~40，80分摊到第41~80……平均每个分摊2，所以平均复杂度为$O(1)$。","like_count":0},{"had_liked":false,"id":28671,"user_name":"钟衍辉","can_delete":false,"product_type":"c1","uid":1030229,"ip_address":"","ucode":"EF807515E86D37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/55/3c220676.jpg","comment_is_top":false,"comment_ctime":1538124583,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1538124583","product_id":100017301,"comment_content":"课后思考：最好情况时间复杂度是O(1)，最坏情况时间复杂度是O(n)，平均情况时间复杂度和均摊时间复杂度是O(1)","like_count":0},{"had_liked":false,"id":28668,"user_name":"贤良","can_delete":false,"product_type":"c1","uid":1174982,"ip_address":"","ucode":"E674159DF27556","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/c6/86acf36a.jpg","comment_is_top":false,"comment_ctime":1538123312,"is_pvip":false,"replies":[{"id":"10330","content":"哪里没匹配？ 我咋没看出来。请指明","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538127496,"ip_address":"","comment_id":28668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538123312","product_id":100017301,"comment_content":"void insert(into val) 的那段代码 括号没有匹配！请修改。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425343,"discussion_content":"哪里没匹配？ 我咋没看出来。请指明","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538127496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28664,"user_name":"Flying","can_delete":false,"product_type":"c1","uid":1239009,"ip_address":"","ucode":"2E9D9813E329E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/e1/2e27eabf.jpg","comment_is_top":false,"comment_ctime":1538122119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538122119","product_id":100017301,"comment_content":"练习题中最好和均摊是O(1) ，<br>最坏是O(n) 可以解析如下:<br>第一次最坏是O(1*n)<br>第二次最坏是O(2*n)<br>……<br>","like_count":0},{"had_liked":false,"id":28656,"user_name":"yaya","can_delete":false,"product_type":"c1","uid":1233856,"ip_address":"","ucode":"8C7FAC8F828BA4","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/c0/d38daa2d.jpg","comment_is_top":false,"comment_ctime":1538121006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538121006","product_id":100017301,"comment_content":"最佳时间复杂度o(1),最坏时间复杂度o(n),平均时间复杂度0(1)，每次o(n)扩容之后伴随着n次的o(1),均摊时间复杂度为o(1)","like_count":0},{"had_liked":false,"id":28654,"user_name":"会功夫的白菜","can_delete":false,"product_type":"c1","uid":1240220,"ip_address":"","ucode":"1BB530D803F15D","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/9c/8893bfa6.jpg","comment_is_top":false,"comment_ctime":1538120323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538120323","product_id":100017301,"comment_content":"最好O(1)，最差O(n)，平均O(1)","like_count":0},{"had_liked":false,"id":28653,"user_name":"yanfengzhang","can_delete":false,"product_type":"c1","uid":1248949,"ip_address":"","ucode":"E0EFE8FDBD77D7","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/b5/b1969379.jpg","comment_is_top":false,"comment_ctime":1538120169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538120169","product_id":100017301,"comment_content":"讲的真不错，继续加油，争取下面的讲解更通俗易懂","like_count":0},{"had_liked":false,"id":28649,"user_name":"Marnie","can_delete":false,"product_type":"c1","uid":1001912,"ip_address":"","ucode":"ECF9B22574F868","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/b8/fb19aa6a.jpg","comment_is_top":false,"comment_ctime":1538119507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538119507","product_id":100017301,"comment_content":"我觉得不管是最坏、最好、平均、均摊时间复杂度，最主要的还是考虑清楚每种情况下每行代码的执行次数总和，之后再加入期望、均摊之类的考虑。","like_count":0},{"had_liked":false,"id":28648,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538119251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538119251","product_id":100017301,"comment_content":"我们把每种情况下，查找需要遍历的元素个数累加起来。为什么遍历次数是1+2+3+...+n????","like_count":0},{"had_liked":false,"id":28645,"user_name":"多多","can_delete":false,"product_type":"c1","uid":1252605,"ip_address":"","ucode":"C5235FD1E765D7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/fd/30ee0aac.jpg","comment_is_top":false,"comment_ctime":1538119043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538119043","product_id":100017301,"comment_content":"老师你好，我想请问一下，您在文章里说的关于insert和find函数的第二个不同的地方，为什么说O(n)插入之后会紧跟着n-1个O(1)的插入操作呢？这个insert函数是在哪里进行了循环调用了吗？如果没有的话，那不就是在判断了count＞length后，就开始计算数组总和然后清空数组进行赋值吗？","like_count":0},{"had_liked":false,"id":28641,"user_name":"JayceSun","can_delete":false,"product_type":"c1","uid":1249291,"ip_address":"","ucode":"535F68D0B14CCC","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/0b/991d5a4a.jpg","comment_is_top":false,"comment_ctime":1538117916,"is_pvip":false,"replies":[{"id":"10364","content":"是的 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538143240,"ip_address":"","comment_id":28641,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538117916","product_id":100017301,"comment_content":"insert方法是在一个循环里面被调用吗，如果是滴话那可以理解，如果不是，那就太不明白了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425336,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28639,"user_name":"Cool-City","can_delete":false,"product_type":"c1","uid":1239848,"ip_address":"","ucode":"B53D9B83AD8B46","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/28/4d09bcba.jpg","comment_is_top":false,"comment_ctime":1538117596,"is_pvip":false,"replies":[{"id":"10365","content":"就是如果循环调用insert的函数的话 如果某次插入操作时间复杂度是o（n）的话。接下来n-1次是o（1）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538143405,"ip_address":"","comment_id":28639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538117596","product_id":100017301,"comment_content":"一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1）插入操作，什么意思","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425335,"discussion_content":"就是如果循环调用insert的函数的话 如果某次插入操作时间复杂度是o（n）的话。接下来n-1次是o（1）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28636,"user_name":"崛起的小强","can_delete":false,"product_type":"c1","uid":1008717,"ip_address":"","ucode":"BCDF6F1A0FB055","user_header":"","comment_is_top":false,"comment_ctime":1538117407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538117407","product_id":100017301,"comment_content":"最好：O(1) , 最坏 : O(n) ，均摊 : O(1)。<br>这里add方法符合均摊分析的应用场景，大部分情况下时间复杂度都很低，个别情况下时间复杂度比较高，而且操作之间存在前后连贯的时序关系。这里每一次O(n)的扩容操作，都会跟着 n 次O(1)添加操作,把耗时多的扩容操作均摊到后面的添加操作，所以均摊下来时间复杂度为O(1)<br>","like_count":0},{"had_liked":false,"id":28631,"user_name":"John","can_delete":false,"product_type":"c1","uid":1108531,"ip_address":"","ucode":"5B14B449C3240C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ea/33/37f261a3.jpg","comment_is_top":false,"comment_ctime":1538116918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538116918","product_id":100017301,"comment_content":"四个复杂度分析：<br>\t\t\t\t1：最好情况时间复杂度(best case time complexity)<br>\t\t\t\t2：最坏情况时间复杂度(worst case time complexity)<br>\t\t\t\t3：平均情况时间复杂度(average case time complexity)<br>\t\t\t\t4：均摊时间复杂度（amortized time complexity）<br><br>for (; i &lt; n; ++i)<br>{<br>if (array[i] == x)<br>{<br>pos = i;<br>break;<br>}<br>}<br><br><br>分析：1：最好情况时间复杂度：O(1)<br>\t  2：最坏情况时间复杂度:O(n),因此在不同的情况下，这段代码的时间复杂度是不一样的，所以引入三个概念:最好，最坏，平均情况复杂度。<br>3：平均情况复杂度：<br>\t\tI:要查找的变数X在数组中的位置有n+1种情况：在数组的0~n-1位置中和不在数组中，我们把每种情况下，查找需要遍历的次数累加起来，然后除以n+1,就可以得到需要遍历的元素个数的平均值，即：<br>\t(1+2+3+……+n+n)&#47;(n+1)=n(n+3)&#47;2(n+1)<br>得到平均时间复杂度就是O(n)<br>II：概率分析法<br>4:均摊时间复杂度（摊换分析，平摊分析）<br>习题：<br>1：最好情况时间复杂度是当i&lt;len 时候，直接插入O(1)<br>2：最坏情况是，当i&gt;len时候，需要copy array 复杂度未O(n)<br>3：均平均时间复杂度是，一共有n+1种情况，当i&lt;len时，有n种情况每次为O(1),当n&gt;len时,为O(n),则平均时间复杂度：1*1&#47;(n+1)+1*1&#47;(n+1)+......n*1&#47;(n+1）=O（1）<br>","like_count":0},{"had_liked":false,"id":28630,"user_name":"Cool-City","can_delete":false,"product_type":"c1","uid":1239848,"ip_address":"","ucode":"B53D9B83AD8B46","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/28/4d09bcba.jpg","comment_is_top":false,"comment_ctime":1538116874,"is_pvip":false,"replies":[{"id":"10366","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538143419,"ip_address":"","comment_id":28630,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538116874","product_id":100017301,"comment_content":" 均摊时间复杂度中代码块 insert()方法，在外部，是调用n次的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425331,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28626,"user_name":"微秒","can_delete":false,"product_type":"c1","uid":1249195,"ip_address":"","ucode":"65A2E8B565B191","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","comment_is_top":false,"comment_ctime":1538115870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538115870","product_id":100017301,"comment_content":"课后题回答：<br>最好时间复杂度：o(1)<br>最坏时间复杂度：o(n),n是数组长度，执行完新旧数组复制后，数组长度会翻一倍。<br>平均时间复杂度：前面0到len-1的赋值操作都是复杂度为o(1)，第len次时的插值操作为o(len)。假设每种情况出现的概率是一样的，则平均复杂度为：(len+len)&#47;(len+1)=1,即o(1)。<br>均摊时间复杂度：把第len次时的插值操作为o(len)平摊给前面0到len-1的赋值操作，则均摊时间复杂度为o(1)。<br>对于空间复杂度来说，也类似，只要考察全局变量int array[] = new int[10]、函数里int new_array[] = new int[len*2]和常数阶的赋值操作就可以了。","like_count":0},{"had_liked":false,"id":28624,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1238703,"ip_address":"","ucode":"C5EB025A9D1301","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/af/e94ef6d8.jpg","comment_is_top":false,"comment_ctime":1538115478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538115478","product_id":100017301,"comment_content":"老师，insert（）函数没有看懂，如果 n != 0的话，而count=0，那么if (count == array.length){}不是永远都不会执行吗，实在没看懂这个函数，希望老师能够解答，谢谢！","like_count":0},{"had_liked":false,"id":28609,"user_name":"HH🐷🐠","can_delete":false,"product_type":"c1","uid":1133678,"ip_address":"","ucode":"C50172BDA604D5","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/6e/6c6114ed.jpg","comment_is_top":false,"comment_ctime":1538111163,"is_pvip":false,"replies":[{"id":"10308","content":"是你算错了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538121452,"ip_address":"","comment_id":28609,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538111163","product_id":100017301,"comment_content":"要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组... 我请求出的公式怎么是  n*(n+2) &#47; 2*(n+1) ，是我计算错误了吗？ ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425323,"discussion_content":"是你算错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538121452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28608,"user_name":"Issac","can_delete":false,"product_type":"c1","uid":1246753,"ip_address":"","ucode":"5FBB2381E3C103","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erJXT96ib7T0KPLoEW2sPOiaILKTDesHF3Gx8Wcv8rquZgufA5kuRaEmjzYJ5Tq1ibFBYHRFXbyECAJQ/132","comment_is_top":false,"comment_ctime":1538110899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538110899","product_id":100017301,"comment_content":"最好 O(1) 最坏O(n) 评论O(1)","like_count":0},{"had_liked":false,"id":28597,"user_name":"反弹c","can_delete":false,"product_type":"c1","uid":1147857,"ip_address":"","ucode":"ACF595ADE8742B","user_header":"https://static001.geekbang.org/account/avatar/00/11/83/d1/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1538106734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538106734","product_id":100017301,"comment_content":"O（1)吧，因为len一开始是确定的大小。","like_count":0},{"had_liked":false,"id":28590,"user_name":"漫漫人生路一直在迷路","can_delete":false,"product_type":"c1","uid":1250632,"ip_address":"","ucode":"8C237A0DBFA07D","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/48/3c1274d7.jpg","comment_is_top":false,"comment_ctime":1538105099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538105099","product_id":100017301,"comment_content":"课后思考 i 小于len时代码执行时间复杂度就是O(1)，当i等于len，len可以看做公比等于2首项为10的等比数列 第n次时 表达为10*（2的n-1次方）忽略系数常量O(2的n次方) ","like_count":0},{"had_liked":false,"id":28589,"user_name":"屈超","can_delete":false,"product_type":"c1","uid":1054877,"ip_address":"","ucode":"98025A827041A1","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/9d/23dd0017.jpg","comment_is_top":false,"comment_ctime":1538104874,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538104874","product_id":100017301,"comment_content":"精短的总结：<br>同一段代码，在不同的情况下，复杂度量级可能是不一样的，由此引发出4种复杂度分析：<br>1.最好时间复杂度<br>2.最坏时间复杂度<br>3.平均时间复杂度（加权平均时间复杂度、期望时间复杂度）<br>4.均摊时间复杂度（适用只有个别情况是高级别复杂度且出现具有时序规律时）<br><br>练习题的思路：<br>由题可知，数组长度为10时，会有10次O（1）+ 1次O（10），直接考虑均摊复杂度：O（2）-&gt;O（1），数组被扩容为20时，会有20次O（1）+ 1次 O（20），考虑均摊复杂度：O（2）-&gt;O（1），依次类推，可知均摊复杂度为O（1）。","like_count":0},{"had_liked":false,"id":28587,"user_name":"小白猪","can_delete":false,"product_type":"c1","uid":1180615,"ip_address":"","ucode":"BC7FC0E0585B76","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/c7/bd45f0c9.jpg","comment_is_top":false,"comment_ctime":1538104607,"is_pvip":false,"replies":[{"id":"10299","content":"对！👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538116526,"ip_address":"","comment_id":28587,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538104607","product_id":100017301,"comment_content":"作业：题目符合 均摊复杂度场景， 当数组有空间时候每次操作时间复杂度为O(1), 满了后时间复杂度是O(n)，根据摊还分析，该代码时间复杂度是O(1)，不知道对不对","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425317,"discussion_content":"对！👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538116526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28581,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1538103978,"is_pvip":false,"replies":[{"id":"10278","content":"没多哦 你再仔细看下上下文","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538110942,"ip_address":"","comment_id":28581,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538103978","product_id":100017301,"comment_content":"1+2+3+...+n+n&#47;(n+1)分子多个n吧","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425314,"discussion_content":"没多哦 你再仔细看下上下文","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538110942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28579,"user_name":"Crystal","can_delete":false,"product_type":"c1","uid":1247231,"ip_address":"","ucode":"EF548F665DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/ff/24f6f14c.jpg","comment_is_top":false,"comment_ctime":1538103813,"is_pvip":false,"replies":[{"id":"10301","content":"下面还除了n+1呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538116600,"ip_address":"","comment_id":28579,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538103813","product_id":100017301,"comment_content":"老师，请教一下，find方法中，没有把概率算进去的情况下，去进行平均时间复杂度分析，为什么没有把n(n+3)&#47;2(n+1)这个式子进行展开，展开的话，分子就是n的2次方+3n了，那这时的平均复杂度不应该是 n的2次方 的复杂度量级了吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425313,"discussion_content":"下面还除了n+1呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538116600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28577,"user_name":"知易","can_delete":false,"product_type":"c1","uid":1246882,"ip_address":"","ucode":"BD3E3F0F0A40EF","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/a2/350c4af0.jpg","comment_is_top":false,"comment_ctime":1538103734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538103734","product_id":100017301,"comment_content":"作业：<br>1.假设这个add函数会一直执行，起始变量为10，数组为空开始添加，每隔10次会倍增一次数组长度。<br>2.可以类比成一把从左至右无限延申的尺子，尺子的刻度按照10、20、40....10*2^n(n&gt;=0,正整数)以此递增。那么就可以知道相邻刻度之间含有9个O(1)，每个刻度为O(刻度值)。按照均摊分析法来看，每一个刻度都能和这个刻度前所有的时间复杂度相均摊，，所以答案为O(1)<br>请老师和其它同学看一下，这种思路是否正确。<br>","like_count":0},{"had_liked":false,"id":28576,"user_name":"冯剑","can_delete":false,"product_type":"c1","uid":1180833,"ip_address":"","ucode":"C22CAC2021A485","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/a1/99aca569.jpg","comment_is_top":false,"comment_ctime":1538103561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538103561","product_id":100017301,"comment_content":"首先我说下个人对算法复杂度的理解: 程序中代码执行次数,或者更准确的在执行一段代码中,所有代码被重复执行的次数的最大值,<br><br>针对inset函数,平均算法复杂度<br>(n-1)&#47;(n+1)+n&#47;(n+1)=(2n-1)&#47;(n+1)=(2(n+1)-1)&#47;(n+1)=2-(3&#47;(n+1))<br><br>当n-&gt;+∞<br>结果为2,所以平均复杂度:O(1)<br><br>请作者指点下 这样对不","like_count":0},{"had_liked":false,"id":28572,"user_name":"dal136","can_delete":false,"product_type":"c1","uid":1068814,"ip_address":"","ucode":"820EF448AAB49B","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/0e/00182147.jpg","comment_is_top":false,"comment_ctime":1538103330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538103330","product_id":100017301,"comment_content":"练习题最好情况时间复杂度是O(1)，最坏是O(n),平均是O(1)","like_count":0},{"had_liked":false,"id":28568,"user_name":"范柏柏","can_delete":false,"product_type":"c1","uid":1130596,"ip_address":"","ucode":"942D1784D42349","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/64/a4058693.jpg","comment_is_top":false,"comment_ctime":1538103187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538103187","product_id":100017301,"comment_content":"当len可以看做常量级时，为O(1)<br>当len大到可能看做n时，为O(n)<br>因为len是从0开始递增，所以常量级是大多数情况，所以平均为O(1)","like_count":0},{"had_liked":false,"id":28566,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1247015,"ip_address":"","ucode":"8046F4809F0C60","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/27/3045e03e.jpg","comment_is_top":false,"comment_ctime":1538103143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538103143","product_id":100017301,"comment_content":"课后思考：最好时间复杂度O(1),最坏时间复杂度O(n),均摊时间复杂度O(1).","like_count":0},{"had_liked":false,"id":28564,"user_name":"jabbawockeez","can_delete":false,"product_type":"c1","uid":1249995,"ip_address":"","ucode":"A461E7348C9C22","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/cb/3a409454.jpg","comment_is_top":false,"comment_ctime":1538102917,"is_pvip":false,"replies":[{"id":"10367","content":"可以考虑集中答疑一下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538143480,"ip_address":"","comment_id":28564,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538102917","product_id":100017301,"comment_content":"请问每节课的课后思考，后面会讲解么？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425311,"discussion_content":"可以考虑集中答疑一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28563,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538102903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538102903","product_id":100017301,"comment_content":"在平均复杂度和分摊复杂度还比较模糊，其余的理解还好，就觉得那两复杂度好模糊不知道为啥","like_count":0},{"had_liked":false,"id":28562,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538102890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538102890","product_id":100017301,"comment_content":"上篇的T(n)其实就是最坏情况下的复杂度分析吧！","like_count":0},{"had_liked":false,"id":28561,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1538102823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538102823","product_id":100017301,"comment_content":"习题答案是O(1)吧 我感觉都是固定的","like_count":0},{"had_liked":false,"id":28559,"user_name":"许山山","can_delete":false,"product_type":"c1","uid":1241643,"ip_address":"","ucode":"2A5168DEB58F19","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/2b/7d9751bb.jpg","comment_is_top":false,"comment_ctime":1538102729,"is_pvip":false,"replies":[{"id":"10303","content":"你说的没错 不过我是讲算法 为了照顾各个编程语言 各个水平的同学。我要是详细的再把内存free的代码写进去 又有很多同学看不懂 又回问了。你知道这回事就行。我的代码纯粹是为了讲算法","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538116812,"ip_address":"","comment_id":28559,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538102729","product_id":100017301,"comment_content":"老师，练习的代码是不是会造成比较严重的内存泄露？array在堆上的内存重新赋值前没有被释放，赋值后就再也追踪不到了，随着数组容量的增加，无法释放的内存就会越来越多。因为最近正好在学c++，看到了有些较真，希望老师不要介意 :)<br><br>&#47;&#47; new_array 复制给 array，array 现在大小就是 2 倍 len 了<br>&#47;&#47; 这里加一句 delete []array;<br>array = new_array;<br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425310,"discussion_content":"你说的没错 不过我是讲算法 为了照顾各个编程语言 各个水平的同学。我要是详细的再把内存free的代码写进去 又有很多同学看不懂 又回问了。你知道这回事就行。我的代码纯粹是为了讲算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538116812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28556,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1538102280,"is_pvip":false,"replies":[{"id":"10270","content":"理解正确","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538107755,"ip_address":"","comment_id":28556,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538102280","product_id":100017301,"comment_content":"我觉得最后的思考题,被有些同学算复杂了. 还单独去分析第几次扩容时的复杂度.<br>我觉得按分摊的思路去思考, 把扩容时的那一次数据拷贝[虽然第k次扩容拷贝了10^k次]分摊到每次add赋值时的那里, 实际是一一对应的关系[有有次赋值就对应了一次将来的拷贝]. 这样不用拉公式出来, 就知道复杂度还是O(1)了.<br>不对之处还请指正,谢谢!","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425308,"discussion_content":"理解正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538107755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28546,"user_name":"这个不难","can_delete":false,"product_type":"c1","uid":1127757,"ip_address":"","ucode":"14EF42BA307778","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/4d/d344e7b4.jpg","comment_is_top":false,"comment_ctime":1538101406,"is_pvip":false,"replies":[{"id":"10271","content":"你自己数数0...n-1 然后再加不在的一种情况","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538107806,"ip_address":"","comment_id":28546,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538101406","product_id":100017301,"comment_content":"要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组的 0～n-1 位置中和不在数组中。这段话为什么是n+1种情况呢，不是n种情况吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425302,"discussion_content":"你自己数数0...n-1 然后再加不在的一种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538107806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28540,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1538100805,"is_pvip":false,"replies":[{"id":"10272","content":"总结的很好👍 回答的也正确","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538107847,"ip_address":"","comment_id":28540,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538100805","product_id":100017301,"comment_content":"上一节将复杂度的概念，这一节将复杂度进行细分。分为：最坏时间复杂度、最好时间复杂度、平均情况时间复杂度、均摊复杂度度。<br><br>大多数情况下我们不需要分析前三种情况的复杂度，只有在同一块代码在不同情况下，时间复杂度有量级差距时才需要具体的区分。<br><br>均摊复杂度是平均复杂度的特殊情况。复杂度最高的情况会规律的出现，将高复杂度的 1 次均摊到 N 次低复杂度的操作上，基本上均摊结果会等于低复杂度。<br><br>利用均摊复杂度分析，add() 函数的时间复杂度是 O(1)。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425300,"discussion_content":"总结的很好👍 回答的也正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538107847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28538,"user_name":"★葚璳阗☆塍","can_delete":false,"product_type":"c1","uid":1248213,"ip_address":"","ucode":"CCEAA1AB48989D","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/d5/39c3a496.jpg","comment_is_top":false,"comment_ctime":1538100568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538100568","product_id":100017301,"comment_content":"最好时间复杂度：O（1）<br>最坏：O（n）<br>平均：O=2n&#47;（n+1）+4n&#47;（2n+1）+…+n2^k&#47;（1+n2^k-1）=O（1）（k=0，1……）<br>均摊：把那些耗时为n*2^k次的那些平摊到当前周期的那些上 我感觉计算上应该就是平均的计算方式 O（1）","like_count":0},{"had_liked":false,"id":28537,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1538100294,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538100294","product_id":100017301,"comment_content":"习题最好时间复杂度为O(1) 即i&lt;len的情况<br>最坏时间复杂度为O(n) 即i大于等于len，需要扩增数组，循环赋值。<br>平均时间复杂度为O(1)<br>均摊时间复杂度为O(1)<br>这里平均和均摊分析都是一致的：1&#47;n+...1&#47;n（共n-1个n相加）+n&#47;n","like_count":0},{"had_liked":false,"id":28534,"user_name":"Wendy","can_delete":false,"product_type":"c1","uid":1245993,"ip_address":"","ucode":"C689AA01A80240","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/29/6a48795e.jpg","comment_is_top":false,"comment_ctime":1538099949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538099949","product_id":100017301,"comment_content":"在课后作业中，因为插入位置有在数组中和超出数组两种可能，<br>在数组中的情况下需要执行插入和++i的操作，如果要真的算起来这种情况下的单次的复杂度应该是2&#47;（n+1），而不是1&#47;（n+1）<br>所以我换个方式理解这种情况下的复杂度是O（1）&#47;（n+1)，最终的平均复杂度是n*O(1)&#47;（n+1）+O(n)&#47;(n+1)，化简后相当于O(1)+O(n)&#47;(n+1)，等于O(1)+O(1)，等于O（1），这样理解可以吗？容易理解一点","like_count":0},{"had_liked":false,"id":28531,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1538099630,"is_pvip":false,"replies":[{"id":"10274","content":"嗯嗯 是o（1）。你说的很对。而且其他同学纠结于清空 我觉得跑偏了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538107981,"ip_address":"","comment_id":28531,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538099630","product_id":100017301,"comment_content":"关于count=1数组清空的问题，其实是建立在还需要调用insert语句的前提下，后加进来的值覆盖了数组原有的值，自然就相当于清空了原数组。另外今天的问题可以用老师讲到的均摊法解决，它符合均摊法的两个条件:仅有少量情况复杂度较高且不同情况之间有时序关系，均摊时间复杂度为o(1)。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425295,"discussion_content":"嗯嗯 是o（1）。你说的很对。而且其他同学纠结于清空 我觉得跑偏了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538107981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28527,"user_name":"布冬","can_delete":false,"product_type":"c1","uid":1175527,"ip_address":"","ucode":"8ECDA23C0DE888","user_header":"https://static001.geekbang.org/account/avatar/00/11/ef/e7/df5fbed0.jpg","comment_is_top":false,"comment_ctime":1538099230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538099230","product_id":100017301,"comment_content":"扩容0： n*O(1) + O(n);<br>扩容1：(n&#47;2)*O(1) + O(n);<br>扩容2：(n&#47;4)c<br>......<br>扩容m：(n&#47; 2^m)*O(1) + O(n);<br>累加一下，相当于一个 ((1&#47;2)^m 等比数列求和)  * O(1) + m *O(n)<br>==&gt;均摊一个m后，相当于O(1) + O(n)<br>结果是O(n);不知道对不对；","like_count":0},{"had_liked":false,"id":28524,"user_name":"James Scott","can_delete":false,"product_type":"c1","uid":1255048,"ip_address":"","ucode":"E673BD69503693","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/88/e8098480.jpg","comment_is_top":false,"comment_ctime":1538099123,"is_pvip":false,"replies":[{"id":"10249","content":"因为会提前退出呀 不用遍历完所有的数组元素","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538099657,"ip_address":"","comment_id":28524,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538099123","product_id":100017301,"comment_content":"王老师：为什么第二段代码相比于第一段代码加了一个break，就实现了优化的效果？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425292,"discussion_content":"因为会提前退出呀 不用遍历完所有的数组元素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538099657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28519,"user_name":"Valar Morghulis","can_delete":false,"product_type":"c1","uid":1002068,"ip_address":"","ucode":"720AAB094C618E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/54/4ec75c6b.jpg","comment_is_top":false,"comment_ctime":1538098481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538098481","product_id":100017301,"comment_content":"有了算法复杂度分析的概念后，我们会发现，再深入思考时，复杂度不仅跟输入的大小n有关。因为数据的具体情况，会使得每一个数据在算法实现的过程中，出现的概率不一样，自然最后的复杂度就不一样。","like_count":0},{"had_liked":false,"id":28518,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1210879,"ip_address":"","ucode":"60283758AECCF7","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/ff/c0e40eb4.jpg","comment_is_top":false,"comment_ctime":1538098407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538098407","product_id":100017301,"comment_content":"这四个复杂度讲得很好，特别是均摊和评论区分很明显","like_count":0},{"had_liked":false,"id":28511,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1538097611,"is_pvip":false,"replies":[{"id":"10275","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538108014,"ip_address":"","comment_id":28511,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538097611","product_id":100017301,"comment_content":"这个思考题感觉和arraylist的add方法好像……只不过那边是扩容1.5倍，这边是2倍，当然啦，时间复杂度和例子的insert的几乎一样","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425288,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538108014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28510,"user_name":"DZuo","can_delete":false,"product_type":"c1","uid":1247240,"ip_address":"","ucode":"F23882BC1E307C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKKqibDZaXxicEUNWiap3fQX81H44ia7hJuVwTiaEFFsKzq8prW9evtpUibBYnd6E6xhF0Ox9SdYGyob7vA/132","comment_is_top":false,"comment_ctime":1538097593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538097593","product_id":100017301,"comment_content":"老师，我有歧义！我对评论时间复杂度分析有歧义，用概率分析，非10倍数概率为9&#47;10，10倍数的概率为1&#47;10，忽略非10倍数的数因为都是一次，现提取10倍数的数：10&#47; n*1&#47;10 + 20&#47; n*1&#47;10...共n&#47;10个，提取公因式：1&#47;n*（1+2+...+ n&#47;10）计算出来的复杂度为O（n）。请指正！","like_count":0},{"had_liked":false,"id":28509,"user_name":"Egos","can_delete":false,"product_type":"c1","uid":1071143,"ip_address":"","ucode":"9F0055B140E935","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/27/1188e017.jpg","comment_is_top":false,"comment_ctime":1538097534,"is_pvip":false,"replies":[{"id":"10276","content":"这个能具体点吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538108035,"ip_address":"","comment_id":28509,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538097534","product_id":100017301,"comment_content":"同问递归的时间复杂度怎么算呢？那些logn 的怎么算呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425287,"discussion_content":"这个能具体点吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538108035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28508,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1538097533,"is_pvip":false,"replies":[{"id":"10277","content":"对的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538108045,"ip_address":"","comment_id":28508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538097533","product_id":100017301,"comment_content":"最好的时间复杂度是：O(1)<br>最坏的时间复杂度是：O(n)<br>平时时间复杂度是:O(1)<br>均摊的时间复杂度也是:O(1)<br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425286,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538108045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28506,"user_name":"D→_→M","can_delete":false,"product_type":"c1","uid":1184017,"ip_address":"","ucode":"5EFDE9E2ED2C8B","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/11/52a78856.jpg","comment_is_top":false,"comment_ctime":1538097502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538097502","product_id":100017301,"comment_content":"老师那个insert方法第一次运行的话应该是运行n次O(1),然后运行一次O(n)吧，之后才是n-1次O(1)，1次O(n),对吗？<br>还有作业我认为是O(1)，因为数组每一次增加空间是从10、20、40...应该一直都是常数吧，对吗？","like_count":0},{"had_liked":false,"id":28504,"user_name":"Aruen","can_delete":false,"product_type":"c1","uid":1235654,"ip_address":"","ucode":"BCEECC5684EE36","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/c6/e1b2797b.jpg","comment_is_top":false,"comment_ctime":1538097457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538097457","product_id":100017301,"comment_content":"最好、最坏、平均、均摊时间复杂度分析方法我能理解，当一段代码有最好、最坏时间复杂度时，我们最终要算这段代码的时间复杂度，是以哪一个为标准？还是说就以平均时间复杂度作为他的最终时间复杂度？add方法的时间复杂度为O(1)吧。","like_count":0},{"had_liked":false,"id":28490,"user_name":"陈振荣","can_delete":false,"product_type":"c1","uid":1235321,"ip_address":"","ucode":"9059B33A6FCD22","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/79/297275ed.jpg","comment_is_top":false,"comment_ctime":1538096759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538096759","product_id":100017301,"comment_content":"add（）的复杂度都为O(1)？add()输入的数组长度是确定的为10，insert()中输入的数组长度为n.当出现最坏情况数组满了，add（）需要对数组进行复制，循环里进行10次赋值，复杂度为O(1).而insert()为O(n)","like_count":0},{"had_liked":false,"id":28487,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1538096666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538096666","product_id":100017301,"comment_content":"学完了，听懂了，打个卡","like_count":0},{"had_liked":false,"id":28475,"user_name":"儋何","can_delete":false,"product_type":"c1","uid":1235256,"ip_address":"","ucode":"F3FAE510417F38","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/38/b04bd7e7.jpg","comment_is_top":false,"comment_ctime":1538095791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538095791","product_id":100017301,"comment_content":"课后思考题连个变量 n 都没有，都是常量操作啊，都是 O(1) 啊，是这么理解的吗?","like_count":0},{"had_liked":false,"id":28474,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1538095672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538095672","product_id":100017301,"comment_content":"arraylist的底层代码，时间复杂度O(1)","like_count":0},{"had_liked":false,"id":28467,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1060892,"ip_address":"","ucode":"B29CA98AC45F88","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/1c/e160955d.jpg","comment_is_top":false,"comment_ctime":1538095488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538095488","product_id":100017301,"comment_content":"算出来均摊复杂度是logN，N表示插入数组的次数，最好复杂度是O（1），最坏是O（N）","like_count":0},{"had_liked":false,"id":28462,"user_name":"望梦难拓","can_delete":false,"product_type":"c1","uid":1233774,"ip_address":"","ucode":"A2CF491CB09966","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/6e/8272be96.jpg","comment_is_top":false,"comment_ctime":1538095228,"is_pvip":false,"replies":[{"id":"10247","content":"1. 如果c语言的话 你就把array换成指针理解吧<br>2. 你觉得怎么才算清空呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538097942,"ip_address":"","comment_id":28462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538095228","product_id":100017301,"comment_content":"老师你好，我有两处不明白。课后思考那个代码，能直接把new_array赋值给array吗？在C语言中数组名不是指针常量嘛，不能这样赋值的吧，还有那个程序你没有用循环遍历数组，怎么清空数组呢？<br>还望老师解惑，谢谢(*°∀°)=3","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425269,"discussion_content":"1. 如果c语言的话 你就把array换成指针理解吧\n2. 你觉得怎么才算清空呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538097942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28459,"user_name":"广进","can_delete":false,"product_type":"c1","uid":1235504,"ip_address":"","ucode":"A9A3FA76024577","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/30/f636914e.jpg","comment_is_top":false,"comment_ctime":1538095170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538095170","product_id":100017301,"comment_content":"这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。<br><br><br>insert函数看不懂呀，首先当if条件满足时，开始对数组求和，然后将sum放在array[0]的位置，并将count置1，怎么就将数组清空了呀，看不懂。<br>","like_count":0},{"had_liked":false,"id":28456,"user_name":"Riordon","can_delete":false,"product_type":"c1","uid":1127497,"ip_address":"","ucode":"E2F6855B5FE5F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/34/49/6b27feb1.jpg","comment_is_top":false,"comment_ctime":1538094894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538094894","product_id":100017301,"comment_content":"1&#47;len+1&#47;2len+... 感觉都是O（1）","like_count":0},{"had_liked":false,"id":28454,"user_name":"yukong","can_delete":false,"product_type":"c1","uid":1247569,"ip_address":"","ucode":"D0BA54710A5514","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/51/0847f212.jpg","comment_is_top":false,"comment_ctime":1538094858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538094858","product_id":100017301,"comment_content":"最好时间复杂度O(1) 最坏时间复杂度(n) 平均时间复杂度O(1) 均摊时间复杂度(1)","like_count":0},{"had_liked":false,"id":28453,"user_name":"董航","can_delete":false,"product_type":"c1","uid":1231787,"ip_address":"","ucode":"9CA208FD26F849","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/ab/1aac53bf.jpg","comment_is_top":false,"comment_ctime":1538094727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538094727","product_id":100017301,"comment_content":"均摊分析，直接o（1）","like_count":0},{"had_liked":false,"id":28452,"user_name":"NearJC","can_delete":false,"product_type":"c1","uid":1056556,"ip_address":"","ucode":"0E0CB5CEDCE77D","user_header":"https://static001.geekbang.org/account/avatar/00/10/1f/2c/3719b616.jpg","comment_is_top":false,"comment_ctime":1538094724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538094724","product_id":100017301,"comment_content":"老师讲的很棒，很全面","like_count":0},{"had_liked":false,"id":28450,"user_name":"五岳寻仙","can_delete":false,"product_type":"c1","uid":1247467,"ip_address":"","ucode":"88A46A4E1832CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/eb/594e9e6c.jpg","comment_is_top":false,"comment_ctime":1538094414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538094414","product_id":100017301,"comment_content":"在做课后题的过程中我好像明白了“平均时间复杂度”和“均摊时间复杂”的区别。平均时间复杂度得通盘考虑、计算；而均摊时间复杂度只需要分好组，将最好最坏的情况合理地分在一起考虑，算好这一组的平均情况就好了。这样想对吗老师？","like_count":0},{"had_liked":false,"id":28449,"user_name":"炫焰苍龙","can_delete":false,"product_type":"c1","uid":1250947,"ip_address":"","ucode":"4975E05DCC3D30","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/83/13656ef6.jpg","comment_is_top":false,"comment_ctime":1538094387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538094387","product_id":100017301,"comment_content":"才发现老师的修饰符都是默认的default,然后那里new_array应该是赋值给array.不是复制。这些概念都听懂了。可是O(1)是常数，O(n)表示的应该是复杂度。。。继续看吧。。书读百遍，其义自见。。","like_count":0},{"had_liked":false,"id":28442,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1538094030,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538094030","product_id":100017301,"comment_content":"最好n(1),最坏n(n＋1)?","like_count":0},{"had_liked":false,"id":28440,"user_name":"e","can_delete":false,"product_type":"c1","uid":1239780,"ip_address":"","ucode":"4E22D58CC70859","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/e4/e1b3a611.jpg","comment_is_top":false,"comment_ctime":1538093964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538093964","product_id":100017301,"comment_content":"感觉最好和最坏都是0(1)呢","like_count":0},{"had_liked":false,"id":28436,"user_name":"执__生","can_delete":false,"product_type":"c1","uid":1141545,"ip_address":"","ucode":"F74B5AB30A9D8A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Gkedlmv1ibTmUcALf69BCDhg5j0CGtqxaHHtpnbWc6yF8Wld7ILmgoScJtk4QiblfqoUJl9jyNhjgib9aEBGlIh8Q/132","comment_is_top":false,"comment_ctime":1538093720,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538093720","product_id":100017301,"comment_content":"最小、最大复杂度分别是O(1)和O(n),循环和不循环两种情况。<br>平均复杂度（期望）应该是O(logn)，是用最小复杂度1，与最小复杂度的概率(n-logn)&#47;n的乘积<br>加上最大复杂度n，与最大复杂度的概率logn&#47;n的乘积，也就是(n - logn)&#47;n + nlogn&#47;n，约等于O(logn)。","like_count":0},{"had_liked":false,"id":28432,"user_name":"Nirvanaliu","can_delete":false,"product_type":"c1","uid":1255092,"ip_address":"","ucode":"A2576845D5A18E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELVTictrUd4I3icvCtoibG2WibaiaILSxj0TAXvk27evBR6nfnYuEqIfmfW6pRl42IibcZyiaoqrXqDnzymw/132","comment_is_top":false,"comment_ctime":1538093289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538093289","product_id":100017301,"comment_content":"老师，请问您那边有配套的习题吗?比如时间复杂度您讲了两次课，会提供一些习题供我们训练，巩固知识点。","like_count":0},{"had_liked":false,"id":28424,"user_name":"阿土","can_delete":false,"product_type":"c1","uid":1183019,"ip_address":"","ucode":"2DBEAD80B0CA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/2b/4814d3db.jpg","comment_is_top":false,"comment_ctime":1538092829,"is_pvip":false,"replies":[{"id":"10371","content":"不用看书 你遇到不懂的自己百度一下就好了 这样学起来更快 更有针对性","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538145927,"ip_address":"","comment_id":28424,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538092829","product_id":100017301,"comment_content":"add跟insert的各项时间复杂度一致。今天第一次接触均摊时间复杂度，果然才疏学浅。另外老师推荐一下数据结构需要的数学知识书籍吧，感觉今天的公式有点儿吃力","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425262,"discussion_content":"不用看书 你遇到不懂的自己百度一下就好了 这样学起来更快 更有针对性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538145927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28419,"user_name":"L.live","can_delete":false,"product_type":"c1","uid":1240228,"ip_address":"","ucode":"9CFBB961F7165B","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/a4/ee23b24f.jpg","comment_is_top":false,"comment_ctime":1538092314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538092314","product_id":100017301,"comment_content":"思考题：每一次扩容为2n时，复杂度是o(n)，但是之前的n&#47;2次操作都是o(1)，将n均摊到n&#47;2上，最终的均摊复杂度还是o(1)。","like_count":0},{"had_liked":false,"id":28411,"user_name":"Alice","can_delete":false,"product_type":"c1","uid":1236943,"ip_address":"","ucode":"4F490227AAB4CB","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/cf/fc9b423d.jpg","comment_is_top":false,"comment_ctime":1538091763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538091763","product_id":100017301,"comment_content":"n次O(1)后面是1次O(2n)，均摊一下是O(1)","like_count":0},{"had_liked":false,"id":28410,"user_name":"吴祥言","can_delete":false,"product_type":"c1","uid":1237910,"ip_address":"","ucode":"4F6758CC5B6EFE","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep8ZsC9ObjSdyytwRhUmbTVLXULs5EltyTficmZwFa3MzwpVxyc36yReve8xlHiaW0T46FyicC7lFQMA/132","comment_is_top":false,"comment_ctime":1538091661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538091661","product_id":100017301,"comment_content":"所以均摊时间复杂度究竟是什么，有什么作用，跟其他时间复杂度对比有什么优势啊","like_count":0},{"had_liked":false,"id":28409,"user_name":"许矛盾","can_delete":false,"product_type":"c1","uid":1173760,"ip_address":"","ucode":"D7C786D039F136","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/00/83637d9c.jpg","comment_is_top":false,"comment_ctime":1538091379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538091379","product_id":100017301,"comment_content":"讲得很好，给作者点赞，读了2遍，明白了，还需要多看，才能记住。感谢作者，各位加油。晚上总结下今天知识。","like_count":0}]}