{"id":515046,"title":"26｜DI Container（14）：如何重构对Type类型判断的逻辑？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式来实现注入依赖容器。</p><h2>回顾代码与任务列表</h2><p>到目前为止，我们的代码是这样的：</p><pre><code>enter code here\n\nInjectProvider.java:\n\npackage geektime.tdd.di;\n\nimport jakarta.inject.Inject;\nimport java.lang.reflect.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.BiFunction;\nimport java.util.stream.Stream;\nimport static java.util.Arrays.stream;\nimport static java.util.stream.Stream.concat;\n\nclass InjectionProvider&lt;T&gt; implements ContextConfig.ComponentProvider&lt;T&gt; {\n\n    private Constructor&lt;T&gt; injectConstructor;\n    private List&lt;Field&gt; injectFields;\n    private List&lt;Method&gt; injectMethods;\n    \n    public InjectionProvider(Class&lt;T&gt; component) {\n        if (Modifier.isAbstract(component.getModifiers())) throw new IllegalComponentException();\n        this.injectConstructor = getInjectConstructor(component);\n        this.injectFields = getInjectFields(component);\n        this.injectMethods = getInjectMethods(component);\n        if (injectFields.stream().anyMatch(f -&gt; Modifier.isFinal(f.getModifiers())))\n            throw new IllegalComponentException();\n        if (injectMethods.stream().anyMatch(m -&gt; m.getTypeParameters().length != 0))\n            throw new IllegalComponentException();\n    }\n    \n    @Override\n    public T get(Context context) {\n        try {\n            T instance = injectConstructor.newInstance(toDependencies(context, injectConstructor));\n            for (Field field : injectFields) field.set(instance, toDependency(context, field));\n            for (Method method : injectMethods) method.invoke(instance, toDependencies(context, method));\n            return instance;\n        } catch (InvocationTargetException | InstantiationException | IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public List&lt;Class&lt;?&gt;&gt; getDependencies() {\n        return concat(concat(stream(injectConstructor.getParameterTypes()),\n                        injectFields.stream().map(Field::getType)),\n                injectMethods.stream().flatMap(m -&gt; stream(m.getParameterTypes()))).toList();\n    }\n    \n    @Override\n    public List&lt;Type&gt; getDependencyTypes() {\n        return concat(concat(stream(injectConstructor.getParameters()).map(Parameter::getParameterizedType),\n                        injectFields.stream().map(Field::getGenericType)),\n                injectMethods.stream().flatMap(m -&gt; stream(m.getParameters()).map(Parameter::getParameterizedType))).toList();\n    }\n    \n    private static &lt;T&gt; List&lt;Method&gt; getInjectMethods(Class&lt;T&gt; component) {\n        List&lt;Method&gt; injectMethods = traverse(component, (methods, current) -&gt; injectable(current.getDeclaredMethods())\n                .filter(m -&gt; isOverrideByInjectMethod(methods, m))\n                .filter(m -&gt; isOverrideByNoInjectMethod(component, m)).toList());\n        Collections.reverse(injectMethods);\n        return injectMethods;\n    }\n    \n    private static &lt;T&gt; List&lt;Field&gt; getInjectFields(Class&lt;T&gt; component) {\n        return traverse(component, (fields, current) -&gt; injectable(current.getDeclaredFields()).toList());\n    }\n    \n    private static &lt;Type&gt; Constructor&lt;Type&gt; getInjectConstructor(Class&lt;Type&gt; implementation) {\n        List&lt;Constructor&lt;?&gt;&gt; injectConstructors = injectable(implementation.getConstructors()).toList();\n        if (injectConstructors.size() &gt; 1) throw new IllegalComponentException();\n        return (Constructor&lt;Type&gt;) injectConstructors.stream().findFirst().orElseGet(() -&gt; defaultConstructor(implementation));\n    }\n    \n    private static &lt;Type&gt; Constructor&lt;Type&gt; defaultConstructor(Class&lt;Type&gt; implementation) {\n        try {\n            return implementation.getDeclaredConstructor();\n        } catch (NoSuchMethodException e) {\n            throw new IllegalComponentException();\n        }\n    }\n    \n    private static &lt;T&gt; List&lt;T&gt; traverse(Class&lt;?&gt; component, BiFunction&lt;List&lt;T&gt;, Class&lt;?&gt;, List&lt;T&gt;&gt; finder) {\n        List&lt;T&gt; members = new ArrayList&lt;&gt;();\n        Class&lt;?&gt; current = component;\n        while (current != Object.class) {\n            members.addAll(finder.apply(members, current));\n            current = current.getSuperclass();\n        }\n        return members;\n    }\n    \n    private static &lt;T extends AnnotatedElement&gt; Stream&lt;T&gt; injectable(T[] declaredFields) {\n        return stream(declaredFields).filter(f -&gt; f.isAnnotationPresent(Inject.class));\n    }\n    \n    private static boolean isOverride(Method m, Method o) {\n        return o.getName().equals(m.getName()) &amp;&amp; Arrays.equals(o.getParameterTypes(), m.getParameterTypes());\n    }\n    \n    private static &lt;T&gt; boolean isOverrideByNoInjectMethod(Class&lt;T&gt; component, Method m) {\n        return stream(component.getDeclaredMethods()).filter(m1 -&gt; !m1.isAnnotationPresent(Inject.class)).noneMatch(o -&gt; isOverride(m, o));\n    }\n    private static boolean isOverrideByInjectMethod(List&lt;Method&gt; injectMethods, Method m) {\n        return injectMethods.stream().noneMatch(o -&gt; isOverride(m, o));\n    }\n    \n    private static Object[] toDependencies(Context context, Executable executable) {\n        return stream(executable.getParameters()).map(\n                p -&gt; {\n                    Type type = p.getParameterizedType();\n                    if (type instanceof ParameterizedType) return context.get((ParameterizedType) type).get();\n                    return context.get((Class&lt;?&gt;) type).get();\n                }).toArray(Object[]::new);\n    }\n    \n    private static Object toDependency(Context context, Field field) {\n        Type type = field.getGenericType();\n        if (type instanceof ParameterizedType) return context.get((ParameterizedType) type).get();\n        return context.get((Class&lt;?&gt;) type).get();\n    }\n}\n\nContext.java: \n\npackage geektime.tdd.di;\n\nimport java.lang.reflect.ParameterizedType;\nimport java.util.Optional;\n\npublic interface Context {\n    &lt;Type&gt; Optional&lt;Type&gt; get(Class&lt;Type&gt; type);\n    \n    Optional get(ParameterizedType type);\n}\n\nContextConfig.java:\n\npackage geektime.tdd.di;\n\nimport jakarta.inject.Provider;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.*;\nimport static java.util.List.of;\n\npublic class ContextConfig {\n    private Map&lt;Class&lt;?&gt;, ComponentProvider&lt;?&gt;&gt; providers = new HashMap&lt;&gt;();\n    \n    public &lt;Type&gt; void bind(Class&lt;Type&gt; type, Type instance) {\n        providers.put(type, (ComponentProvider&lt;Type&gt;) context -&gt; instance);\n    }\n    \n    public &lt;Type, Implementation extends Type&gt;\n    void bind(Class&lt;Type&gt; type, Class&lt;Implementation&gt; implementation) {\n        providers.put(type, new InjectionProvider&lt;&gt;(implementation));\n    }\n    \n    public Context getContext() {\n        providers.keySet().forEach(component -&gt; checkDependencies(component, new Stack&lt;&gt;()));\n        return new Context() {\n            @Override\n            public &lt;Type&gt; Optional&lt;Type&gt; get(Class&lt;Type&gt; type) {\n                return Optional.ofNullable(providers.get(type)).map(provider -&gt; (Type) provider.get(this));\n            }\n            @Override\n            public Optional get(ParameterizedType type) {\n                if (type.getRawType() != Provider.class) return Optional.empty();\n                Class&lt;?&gt; componentType = (Class&lt;?&gt;) type.getActualTypeArguments()[0];\n                return Optional.ofNullable(providers.get(componentType))\n                        .map(provider -&gt; (Provider&lt;Object&gt;) () -&gt; provider.get(this));\n            }\n        };\n    }\n    \n    private void checkDependencies(Class&lt;?&gt; component, Stack&lt;Class&lt;?&gt;&gt; visiting) {\n        for (Type dependency : providers.get(component).getDependencyTypes()) {\n            if (dependency instanceof Class)\n                checkDependency(component, visiting, (Class&lt;?&gt;) dependency);\n            if (dependency instanceof ParameterizedType) {\n                Class&lt;?&gt; type = (Class&lt;?&gt;) ((ParameterizedType)dependency).getActualTypeArguments()[0];\n                if (!providers.containsKey(type)) throw new DependencyNotFoundException(component, type);\n            }\n        }\n    }\n    \n    private void checkDependency(Class&lt;?&gt; component, Stack&lt;Class&lt;?&gt;&gt; visiting, Class&lt;?&gt; dependency) {\n        if (!providers.containsKey(dependency)) throw new DependencyNotFoundException(component, dependency);\n        if (visiting.contains(dependency)) throw new CyclicDependenciesFoundException(visiting);\n        visiting.push(dependency);\n        checkDependencies(dependency, visiting);\n        visiting.pop();\n    }\n    \n    interface ComponentProvider&lt;T&gt; {\n        T get(Context context);\n        default List&lt;Class&lt;?&gt;&gt; getDependencies() {\n            return of();\n        }\n        default List&lt;Type&gt; getDependencyTypes() {\n            return of();\n        }\n    }\n}\n</code></pre><p>任务列表的状态为：</p><ul>\n<li>\n<p><s>无需构造的组件——组件实例</s></p>\n</li>\n<li>\n<p><s>如果注册的组件不可实例化，则抛出异常</s></p>\n<ul>\n<li><s>抽象类</s></li>\n<li><s>接口</s></li>\n</ul>\n</li>\n<li>\n<p><s>构造函数注入</s></p>\n<ul>\n<li><s>无依赖的组件应该通过默认构造函数生成组件实例</s></li>\n<li><s>有依赖的组件，通过Inject标注的构造函数生成组件实例</s></li>\n<li><s>如果所依赖的组件也存在依赖，那么需要对所依赖的组件也完成依赖注入</s></li>\n<li><s>如果组件有多于一个Inject标注的构造函数，则抛出异常</s></li>\n<li><s>如果组件没有Inject标注的构造函数，也没有默认构造函数（新增任务）</s></li>\n<li><s>如果组件需要的依赖不存在，则抛出异常</s></li>\n<li><s>如果组件间存在循环依赖，则抛出异常</s></li>\n</ul>\n</li>\n<li>\n<p><s>字段注入</s></p>\n<ul>\n<li><s>通过Inject标注将字段声明为依赖组件</s></li>\n<li><s>如果字段为final则抛出异常</s></li>\n<li><s>依赖中应包含Inject Field声明的依赖</s></li>\n</ul>\n</li>\n<li>\n<p><s>方法注入</s></p>\n<ul>\n<li><s>通过Inject标注的方法，其参数为依赖组件</s></li>\n<li><s>通过Inject标注的无参数方法，会被调用</s></li>\n<li><s>按照子类中的规则，覆盖父类中的Inject方法</s></li>\n<li><s>如果方法定义类型参数，则抛出异常</s></li>\n<li><s>依赖中应包含Inject Method声明的依赖</s></li>\n</ul>\n</li>\n<li>\n<p><s>对Provider类型的依赖</s></p>\n<ul>\n<li><s>从容器中取得组件的Provider（新增任务）</s></li>\n<li><s>注入构造函数中可以声明对于Provider的依赖</s></li>\n<li><s>注入字段中可以声明对于Provider的依赖</s></li>\n<li><s>注入方法中可声明对于Provider的依赖</s></li>\n<li><s>将构造函数中的Provider加入依赖（新增任务）</s></li>\n<li><s>将字段中的Provider加入依赖（新增任务）</s></li>\n<li><s>将方法中的Provider加入依赖（新增任务）</s></li>\n</ul>\n</li>\n<li>\n<p>自定义Qualifier的依赖</p>\n<ul>\n<li>注册组件时，可额外指定Qualifier</li>\n<li>注册组件时，可从类对象上提取Qualifier</li>\n<li>寻找依赖时，需同时满足类型与自定义Qualifier标注</li>\n<li>支持默认Qualifier——Named</li>\n</ul>\n</li>\n<li>\n<p>Singleton生命周期</p>\n<ul>\n<li>注册组件时，可额外指定是否为Singleton</li>\n<li>注册组件时，可从类对象上提取Singleton标注</li>\n<li>对于包含Singleton标注的组件，在容器范围内提供唯一实例</li>\n<li>容器组件默认不是Single生命周期</li>\n</ul>\n</li>\n<li>\n<p>自定义Scope标注</p>\n<ul>\n<li>可向容器注册自定义Scope标注的回调</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><h2>视频演示</h2><p>让我们进入今天的部分：</p><p><video poster=\"https://media001.geekbang.org/f0ef0540a1a54c26a0455b17254ecff6/snapshots/c93a3730fa614f8098867fa917032da1-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/a215e40-180a43f3546-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/18c11a56b55e4349b9ef04117c898aa1/d2d8a9e87d2c42fc9babfcaf7f365aa9-9089a03b1b5ab6b9685306fbfeac9298-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>在进入下节课之前，希望你能认真思考如下两个问题，并选择最有感触的一道进行回答。</p><ol>\n<li>如何封装类型判断逻辑以替换对于Type的依赖？</li>\n<li>在最近的学习与实操过程中，有什么困难或疑惑的地方吗？</li>\n</ol><p><strong>编辑来信</strong>：</p><blockquote>\n<p>第二期“TDD·代码评点”活动启动啦！为了帮助你更平滑地过渡到第三个实战项目，徐老师发起了代码评点活动。<br>\n<strong>　</strong><br>\n你可以填写<a href=\"https://jinshuju.net/f/fnh84B\">学习问卷</a>提交项目代码，而后，徐老师会一一查看，并进行评点与答疑。关于评点的详细内容，我们也将制成加餐展示在专栏里，供其他同学学习与参考。<br>\n<strong>　</strong><br>\n请注意，此次收集时间截至5月27日晚上12点。此外，我也会从中选出1-2位同学，送出《重构与模式》一书。请抓紧上车，入股不亏哦！</p>\n</blockquote><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码的链接分享出来。相信经过你的思考与实操，学习效果会更好！</p>","neighbors":{"left":{"article_title":"25｜DI Container（13）：任务上的遗漏该怎么处理？","id":510556},"right":{"article_title":"27｜DI Container（15）：如何封装类型判断逻辑？","id":515047}},"comments":[{"had_liked":false,"id":355176,"user_name":"大碗","can_delete":false,"product_type":"c1","uid":1027207,"ip_address":"广东","ucode":"F9CDC0C5BE48AC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/87/8ed5880a.jpg","comment_is_top":false,"comment_ctime":1661153941,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"在多个类出现重复的代码，是散单式修改的坏味道","like_count":0},{"had_liked":false,"id":354961,"user_name":"davix","can_delete":false,"product_type":"c1","uid":1074465,"ip_address":"辽宁","ucode":"CBFB39BAD7938B","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","comment_is_top":false,"comment_ctime":1660912676,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"去掉if&#47;else就是引入interface，用兩個class實現分離行為","like_count":0},{"had_liked":false,"id":346392,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1521358,"ip_address":"","ucode":"1397377B31751E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rAqwExT20D9WdnlEmZpzXp9HrorvyeGOdpicPCwfAREPJuM1F5I3A8cTbCg2LwggfxdEP0qPwCuAWjrIRiaNj4MQ/132","comment_is_top":false,"comment_ctime":1653103024,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"containerTypeContext\nclassTypeContext","like_count":0},{"had_liked":false,"id":346193,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1652883991,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"原来针对不同类型的不同处理可以通过封装进行解决","like_count":0}]}