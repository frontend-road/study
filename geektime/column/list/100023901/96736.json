{"id":96736,"title":"37 | 设计模式模块热点问题答疑","content":"<p>多线程设计模式是前人解决并发问题的经验总结，当我们试图解决一个并发问题时，首选方案往往是使用匹配的设计模式，这样能避免走弯路。同时，由于大家都熟悉设计模式，所以使用设计模式还能提升方案和代码的可理解性。</p><p>在这个模块，我们总共介绍了9种常见的多线程设计模式。下面我们就对这9种设计模式做个分类和总结，同时也对前面各章的课后思考题做个答疑。</p><h2>避免共享的设计模式</h2><p><strong>Immutability模式</strong>、<strong>Copy-on-Write模式</strong>和<strong>线程本地存储模式</strong>本质上都是<strong>为了避免共享</strong>，只是实现手段不同而已。这3种设计模式的实现都很简单，但是实现过程中有些细节还是需要格外注意的。例如，<strong>使用Immutability模式需要注意对象属性的不可变性，使用Copy-on-Write模式需要注意性能问题，使用线程本地存储模式需要注意异步执行问题</strong>。所以，每篇文章最后我设置的课后思考题的目的就是提醒你注意这些细节。</p><p><a href=\"https://time.geekbang.org/column/article/92856\">《28 | Immutability模式：如何利用不变性解决并发问题？》</a>的课后思考题是讨论Account这个类是不是具备不可变性。这个类初看上去属于不可变对象的中规中矩实现，而实质上这个实现是有问题的，原因在于StringBuffer不同于String，StringBuffer不具备不可变性，通过getUser()方法获取user之后，是可以修改user的。一个简单的解决方案是让getUser()方法返回String对象。</p><!-- [[[read_end]]] --><pre><code>public final class Account{\n  private final \n    StringBuffer user;\n  public Account(String user){\n    this.user = \n      new StringBuffer(user);\n  }\n  //返回的StringBuffer并不具备不可变性\n  public StringBuffer getUser(){\n    return this.user;\n  }\n  public String toString(){\n    return &quot;user&quot;+user;\n  }\n}\n</code></pre><p><a href=\"https://time.geekbang.org/column/article/93154\">《29 | Copy-on-Write模式：不是延时策略的COW》</a>的课后思考题是讨论Java SDK中为什么没有提供 CopyOnWriteLinkedList。这是一个开放性的问题，没有标准答案，但是性能问题一定是其中一个很重要的原因，毕竟完整地复制LinkedList性能开销太大了。</p><p><a href=\"https://time.geekbang.org/column/article/93745\">《30 | 线程本地存储模式：没有共享，就没有伤害》</a>的课后思考题是在异步场景中，是否可以使用 Spring 的事务管理器。答案显然是不能的，Spring 使用 ThreadLocal 来传递事务信息，因此这个事务信息是不能跨线程共享的。实际工作中有很多类库都是用 ThreadLocal 传递上下文信息的，这种场景下如果有异步操作，一定要注意上下文信息是不能跨线程共享的。</p><h2>多线程版本IF的设计模式</h2><p><strong>Guarded Suspension模式</strong>和<strong>Balking模式</strong>都可以简单地理解为“多线程版本的if”，但它们的区别在于前者会等待if条件变为真，而后者则不需要等待。</p><p>Guarded Suspension模式的经典实现是使用<strong>管程</strong>，很多初学者会简单地用线程sleep的方式实现，比如<a href=\"https://time.geekbang.org/column/article/94097\">《31 | Guarded Suspension模式：等待唤醒机制的规范实现》</a>的思考题就是用线程sleep方式实现的。但不推荐你使用这种方式，最重要的原因是性能，如果sleep的时间太长，会影响响应时间；sleep的时间太短，会导致线程频繁地被唤醒，消耗系统资源。</p><p>同时，示例代码的实现也有问题：由于obj不是volatile变量，所以即便obj被设置了正确的值，执行 <code>while(!p.test(obj))</code> 的线程也有可能看不到，从而导致更长时间的sleep。</p><pre><code>//获取受保护对象  \nT get(Predicate&lt;T&gt; p) {\n  try {\n    //obj的可见性无法保证\n    while(!p.test(obj)){\n      TimeUnit.SECONDS\n        .sleep(timeout);\n    }\n  }catch(InterruptedException e){\n    throw new RuntimeException(e);\n  }\n  //返回非空的受保护对象\n  return obj;\n}\n//事件通知方法\nvoid onChanged(T obj) {\n  this.obj = obj;\n}\n</code></pre><p>实现Balking模式最容易忽视的就是<strong>竞态条件问题</strong>。比如，<a href=\"https://time.geekbang.org/column/article/94604\">《32 | Balking模式：再谈线程安全的单例模式》</a>的思考题就存在竞态条件问题。因此，在多线程场景中使用if语句时，一定要多问自己一遍：是否存在竞态条件。</p><pre><code>class Test{\n  volatile boolean inited = false;\n  int count = 0;\n  void init(){\n    //存在竞态条件\n    if(inited){\n      return;\n    }\n    //有可能多个线程执行到这里\n    inited = true;\n    //计算count的值\n    count = calc();\n  }\n}  \n</code></pre><h2>三种最简单的分工模式</h2><p><strong>Thread-Per-Message模式</strong>、<strong>Worker Thread模式</strong>和<strong>生产者-消费者模式</strong>是三种<strong>最简单实用的多线程分工方法</strong>。虽说简单，但也还是有许多细节需要你多加小心和注意。</p><p>Thread-Per-Message模式在实现的时候需要注意是否存在线程的频繁创建、销毁以及是否可能导致OOM。在<a href=\"https://time.geekbang.org/column/article/95098\">《33 | Thread-Per-Message模式：最简单实用的分工方法》</a>文章中，最后的思考题就是关于如何快速解决OOM问题的。在高并发场景中，最简单的办法其实是<strong>限流</strong>。当然，限流方案也并不局限于解决Thread-Per-Message模式中的OOM问题。</p><p>Worker Thread模式的实现，需要注意潜在的线程<strong>死锁问题</strong>。<a href=\"https://time.geekbang.org/column/article/95525\">《34 | Worker Thread模式：如何避免重复创建线程？》</a>思考题中的示例代码就存在线程死锁。有名叫vector的同学关于这道思考题的留言，我觉得描述得很贴切和形象：“工厂里只有一个工人，他的工作就是同步地等待工厂里其他人给他提供东西，然而并没有其他人，他将等到天荒地老，海枯石烂！”因此，共享线程池虽然能够提供线程池的使用效率，但一定要保证一个前提，那就是：<strong>任务之间没有依赖关系</strong>。</p><pre><code>ExecutorService pool = Executors\n  .newSingleThreadExecutor();\n//提交主任务\npool.submit(() -&gt; {\n  try {\n    //提交子任务并等待其完成，\n    //会导致线程死锁\n    String qq=pool.submit(()-&gt;&quot;QQ&quot;).get();\n    System.out.println(qq);\n  } catch (Exception e) {\n  }\n});\n</code></pre><p>Java线程池本身就是一种生产者-消费者模式的实现，所以大部分场景你都不需要自己实现，直接使用Java的线程池就可以了。但若能自己灵活地实现生产者-消费者模式会更好，比如可以实现批量执行和分阶段提交，不过这过程中还需要注意如何优雅地终止线程，<a href=\"https://time.geekbang.org/column/article/96168\">《36 | 生产者-消费者模式：用流水线思想提高效率》</a>的思考题就是关于此的。</p><p>如何优雅地终止线程？我们在<a href=\"https://time.geekbang.org/column/article/95847\">《35 | 两阶段终止模式：如何优雅地终止线程？》</a>有过详细介绍，两阶段终止模式是一种通用的解决方案。但其实终止生产者-消费者服务还有一种更简单的方案，叫做<strong>“毒丸”对象</strong>。<a href=\"time://mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F2758xqdzr6uuw\">《Java并发编程实战》</a>第7章的7.2.3节对“毒丸”对象有过详细的介绍。简单来讲，“毒丸”对象是生产者生产的一条特殊任务，然后当消费者线程读到“毒丸”对象时，会立即终止自身的执行。</p><p>下面是用“毒丸”对象终止写日志线程的具体实现，整体的实现过程还是很简单的：类Logger中声明了一个“毒丸”对象poisonPill ，当消费者线程从阻塞队列bq中取出一条LogMsg后，先判断是否是“毒丸”对象，如果是，则break while循环，从而终止自己的执行。</p><pre><code>class Logger {\n  //用于终止日志执行的“毒丸”\n  final LogMsg poisonPill = \n    new LogMsg(LEVEL.ERROR, &quot;&quot;);\n  //任务队列  \n  final BlockingQueue&lt;LogMsg&gt; bq\n    = new BlockingQueue&lt;&gt;();\n  //只需要一个线程写日志\n  ExecutorService es = \n    Executors.newFixedThreadPool(1);\n  //启动写日志线程\n  void start(){\n    File file=File.createTempFile(\n      &quot;foo&quot;, &quot;.log&quot;);\n    final FileWriter writer=\n      new FileWriter(file);\n    this.es.execute(()-&gt;{\n      try {\n        while (true) {\n          LogMsg log = bq.poll(\n            5, TimeUnit.SECONDS);\n          //如果是“毒丸”，终止执行  \n          if(poisonPill.equals(logMsg)){\n            break;\n          }  \n          //省略执行逻辑\n        }\n      } catch(Exception e){\n      } finally {\n        try {\n          writer.flush();\n          writer.close();\n        }catch(IOException e){}\n      }\n    });  \n  }\n  //终止写日志线程\n  public void stop() {\n    //将“毒丸”对象加入阻塞队列\n    bq.add(poisonPill);\n    es.shutdown();\n  }\n}\n</code></pre><h2>总结</h2><p>到今天为止，“并发设计模式”模块就告一段落了，多线程的设计模式当然不止我们提到的这9种，不过这里提到的这9种设计模式一定是最简单实用的。如果感兴趣，你也可以结合《图解Java多线程设计模式》这本书来深入学习这个模块，这是一本不错的并发编程入门书籍，虽然重点是讲解设计模式，但是也详细讲解了设计模式中涉及到的方方面面的基础知识，而且深入浅出，非常推荐入门的同学认真学习一下。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":122534,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1565419711,"is_pvip":false,"replies":[{"id":"51085","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568506744,"ip_address":"","comment_id":122534,"utype":1}],"discussion_count":4,"race_medal":0,"score":"194838948031","product_id":100023901,"comment_content":"并发设计模式是前人在做并发编程时已经归纳好的，在不同场景下具有可行性的设计模式，我们在设计并发程序时应当优先考虑这些设计模式（以及这些设计模式的组合）。<br>对各类并发设计模式，考量其核心思想、核心技术、trade-off、适用场景、与其他设计模式的对比等。<br>首先，应当考虑没有共享的模式，这类方式用一些技术手段来避免并发编程中需要考虑的同步、互斥等问题，有些模式的实现也被称为无锁机制，其简单且不易出错。<br>Immutability模式充分利用了面向对象的封装特性，将类的mutator的入口全部取消，自身的状态仅允许创建时设置。状态的改变通常通过新建一个对象来达成，为了避免频繁创建新对象，通常通过享元模式或对象池来解决该问题。因此，其适用于对象状态较少改变或不变的场景，需要对一定的内存overhead可容忍。<br>COW模式通过写时拷贝的方式保证读取时候的无阻塞及多线程读写时的无共享，由于其写入时的拷贝机制和加锁机制（JAVA中），因此仅适合于读多写非常少的场景。相比于Immutability模式，COW将引用指向新对象的操作封装在了内部（JAVA中）来实现一定的可变性。<br>线程本地存储模式利用线程本地存储空间（TLAB）来存储线程级别的对象以保证各线程操作对象的隔离性，一定程度上可以等同于能够携带上下文信息的局部变量。JAVA中是在用户空间实现的ThreadLocal控制的，目前的实现可以保证map的生命周期与各Thread绑定，但Value需要我们手动remove来避免内存泄漏。<br>其次，从分工、同步、互斥三个角度来看几个设计模式。<br>从分工的角度看，以下三种模式在对线程工作粒度的划分上逐渐变细。<br>Thread-per-message模式通过一消息&#47;请求一线程的方式处理消息&#47;请求，这种模式要求线程创建&#47;销毁overhead低且线程占用内存的overhead也低，因此在overhead高时需要保证线程的数量不多，或者采用更轻量级的线程（如协程）来保证。<br>Worker Thread模式相当于在Thread-per-message模式的基础上让消息&#47;请求与threads的工厂打交道，在JAVA中可以理解为线程池，通过将同类消息&#47;请求聚类到某类工厂（也有工厂模式的意思在）来为这类消息&#47;请求提供统一的服务（定量的线程数、统一的创建方法、统一的出错处理等），当然，它依然有Thread-per-message中需要控制线程占用内存的问题。<br>生产者-消费者模式在Woker Thread模式的基础上加入了对消息&#47;请求的控制（大部分使用队列来控制），并划定了生产者线程和消费者线程，其中它也包含了同步和互斥的设计，在JAVA中的线程池中也可见一斑。这类设计常见于MQ中。<br>从同步和互斥的角度看，多线程版本的if被划分为了两种模式（Guarded Suspension模式和Balking模式）。<br>Guarded Suspension模式是传统的等待-通知机制的实现，非常标准化，JAVA中则依赖管程实现了各种工具类来保证多线程版本if的正确性。<br>Balking模式依赖于互斥保证多线程版本if的正确性。<br>两阶段终止模式在线程粒度的管理中通过中断操作和置位标记来保证正常终止，JAVA中在线程池粒度的管理中可以通过SHUNDOWN方法来对线程池进行操作，源码中可以看到，其实质也是通过第一种方式来达成目的的。<br>","like_count":46,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462296,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568506744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2845977,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/6d/19/204b0900.jpg","nickname":"Black Jack","note":"","ucode":"CB16C8F44EF422","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530677,"discussion_content":"mark\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637123633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542037,"avatar":"https://static001.geekbang.org/account/avatar/00/17/87/95/cba0a896.jpg","nickname":"卢","note":"","ucode":"B6A9F41AEE348C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405617,"discussion_content":"太强了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634607796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4c/43/150c70c2.jpg","nickname":"陈松Plus","note":"","ucode":"0074BDECFA3D1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349090,"discussion_content":"插眼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612879649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96948,"user_name":"coolrandy","can_delete":false,"product_type":"c1","uid":1022910,"ip_address":"","ucode":"F31620378A0D5C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/be/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1558545491,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"126112597075","product_id":100023901,"comment_content":"老师好 能不能后面讲一讲分布式锁相关的东西，比如实现方案，原理和场景之类的","like_count":30,"discussions":[{"author":{"id":2756739,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/10/83/0facd0eb.jpg","nickname":"利威尔兵长","note":"","ucode":"FDE0BD5BFB1B4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538221,"discussion_content":"你可以看一下 redis专栏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639372394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284654,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1616404210,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"44566077170","product_id":100023901,"comment_content":"避免共享： Immutability 模式、Copy-On-Write 模式、Thread-Local-Storage 模式<br>高效协作：Guarded Suspension 模式、Balking模式<br>合理分工：Thread-Per-Message 模式、Worker Thread 模式、生产者-消费者模式<br>优雅关闭：两阶段终止模式","like_count":11},{"had_liked":false,"id":97826,"user_name":"青莲","can_delete":false,"product_type":"c1","uid":1181787,"ip_address":"","ucode":"6BA5D5D47DE38E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/5b/2a342424.jpg","comment_is_top":false,"comment_ctime":1558787908,"is_pvip":true,"replies":[{"id":"35091","content":"没有好的办法，可以通过分布式来解决，把未处理的任务先放到数据库里，处理完从数据库删除","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558919369,"ip_address":"","comment_id":97826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44508460868","product_id":100023901,"comment_content":"老师想请问下，如果jvm挂了，有没有好的办法能记录下线程池当前未处理的任务","like_count":11,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451441,"discussion_content":"没有好的办法，可以通过分布式来解决，把未处理的任务先放到数据库里，处理完从数据库删除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558919369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97061,"user_name":"PJ ◕‿◕","can_delete":false,"product_type":"c1","uid":1309333,"ip_address":"","ucode":"6C1179D2B3B7D9","user_header":"https://static001.geekbang.org/account/avatar/00/13/fa/95/44eb9517.jpg","comment_is_top":false,"comment_ctime":1558578865,"is_pvip":false,"replies":[{"id":"34746","content":"方案就是利用zk，redis，db，也可以用atomix这样的工具类自己做集群管理，网上有很多资料，最近实在太忙了😂😂😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558616393,"ip_address":"","comment_id":97061,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35918317233","product_id":100023901,"comment_content":"老师好 能不能后面讲一讲分布式锁相关的东西，比如实现方案，原理和场景之类的","like_count":9,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451119,"discussion_content":"方案就是利用zk，redis，db，也可以用atomix这样的工具类自己做集群管理，网上有很多资料，最近实在太忙了😂😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558616393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221823,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1590596609,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10180531201","product_id":100023901,"comment_content":"毒丸模式太形象了！线程吃到毒丸就死了。","like_count":3,"discussions":[{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372696,"discussion_content":"你说到吃到就死了感觉又形象了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620437511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104015,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1560589861,"is_pvip":false,"replies":[{"id":"37616","content":"下次运行时重建线程池。你关闭线程池的原因是什么？","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560591518,"ip_address":"","comment_id":104015,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10150524453","product_id":100023901,"comment_content":"老师，您好！<br>我有一个批跑任务，第一次调用 start() 方法启动任务，当任务跑完后，调用 stop() 方法，正常退出线程池。<br>当下一次再调用 start() 方法启动任务时，报：<br>java.util.concurrent.RejectedExecutionException: com.xxx.LoggerService$$Lambda$12&#47;690901601@72f8abb rejected from java.util.concurrent.ThreadPoolExecutor@9e8742e[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1] 错误位置:ThreadPoolExecutor.java:2047<br><br>请问老师，当每次任务运行完毕之后，我想正常退出线程池，也希望下一次运行时，能继续正常运行，该如何做呢？<br>谢谢老师<br><br>下面是 demo：<br>@Service<br>public class LoggerService {<br><br>  &#47;&#47; 用于终止日志执行的“毒丸”<br>  final LogMsg poisonPill = new LogMsg(LEVEL.ERROR, &quot;&quot;);<br><br>  &#47;&#47; 任务队列<br>  final BlockingQueue&lt;LogMsg&gt; bq = new LinkedBlockingQueue&lt;&gt;();<br><br>  &#47;&#47; 只需要一个线程写日志<br>  ExecutorService es = Executors.newFixedThreadPool(1);<br><br>  &#47;&#47; 启动写日志线程<br>  public void start()  {<br>    System.out.println(&quot;启动日志服务&quot;);<br><br>    this.es.execute(() -&gt; {<br>      try {<br>        while (true) {<br>          System.out.println(&quot;获取日志内容&quot;);<br>          LogMsg log = bq.poll(5, TimeUnit.SECONDS);<br>          &#47;&#47; 如果是“毒丸”，终止执行<br>          if (poisonPill.equals(log)) {<br>              break;<br>          }<br>          &#47;&#47; 省略执行逻辑<br>        }<br>      } catch (Exception e) {<br>      } finally {<br><br>      }<br>    });<br>  }<br><br>  &#47;&#47; 终止写日志线程<br>  public void stop() {<br>    System.out.println(&quot;关闭日志服务&quot;);<br>    &#47;&#47; 将“毒丸”对象加入阻塞队列<br>    bq.add(poisonPill);<br>    es.shutdown();<br>  }<br><br>  &#47;&#47; 日志级别<br>  enum LEVEL {<br>    INFO, ERROR<br>  }<br><br>  class LogMsg {<br>    LEVEL  level;<br>    String msg;<br><br>    &#47;&#47; 省略构造函数实现<br>    LogMsg(LEVEL lvl, String msg) {<br>    }<br>    &#47;&#47; 省略 toString() 实现<br>  }<br><br>}<br>","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454091,"discussion_content":"下次运行时重建线程池。你关闭线程池的原因是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560591518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269428,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1608642567,"is_pvip":false,"replies":[{"id":"98295","content":"������������","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1609397073,"ip_address":"","comment_id":269428,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608642567","product_id":100023901,"comment_content":"说实话老师的学习框架，总结归纳能力佩服佩服。每个小结都能串成串。<br><br>感觉thread-per-message，work-thread模式都是属于生产-消费者模式。<br>前者属于不限线程，不重复利用（有点勉强）。<br>后者属于单生产者，多消费者","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512270,"discussion_content":"������������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609397073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258827,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604564376,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604564376","product_id":100023901,"comment_content":"不得不感叹，太棒了","like_count":0},{"had_liked":false,"id":153047,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1574147627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574147627","product_id":100023901,"comment_content":"老师推荐的书都挺好","like_count":0},{"had_liked":false,"id":127122,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1566559835,"is_pvip":false,"replies":[{"id":"47076","content":"《Java并发编程实战》里有详细的介绍，你可以参考一下","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1566617479,"ip_address":"","comment_id":127122,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566559835","product_id":100023901,"comment_content":"老师，您好！<br>文章示例中，使用毒丸对象终止线程的场景是单线程。<br>如果是多线程的情况，如何也让其余线程优雅退出呢？<br>谢谢老师","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464329,"discussion_content":"《Java并发编程实战》里有详细的介绍，你可以参考一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566617479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022091,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/98/8b/7a691d53.jpg","nickname":"HungerW","note":"","ucode":"75689EDF0F8E7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288019,"discussion_content":"吃到“毒丸”的线程，break while循环后再把“毒丸”丢回队列","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1593613698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112147,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1562674402,"is_pvip":false,"replies":[{"id":"40782","content":"😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1562687648,"ip_address":"","comment_id":112147,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1562674402","product_id":100023901,"comment_content":"喜欢宝令老师的专栏","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457599,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562687648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360095,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c0/df/d52e7244.jpg","nickname":"聪聪不匆匆","note":"","ucode":"86CD1D2D85B8CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4707,"discussion_content":"喜欢宝令老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565679933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104024,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1560592769,"is_pvip":false,"replies":[{"id":"37655","content":"这种情况可能没必要用线程池，如果需要，可以设置合适的corepoolsize和keepalivetime，也可以重建","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560649804,"ip_address":"","comment_id":104024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560592769","product_id":100023901,"comment_content":"作者: 下次运行时重建线程池。你关闭线程池的原因是什么？<br><br>谢谢老师回复！！<br>每天凌晨跑结算数据，每天只跑一次，就想着跑完任务之后，关闭线程池，这样就不会再占用服务器资源了。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454095,"discussion_content":"这种情况可能没必要用线程池，如果需要，可以设置合适的corepoolsize和keepalivetime，也可以重建","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560649804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97251,"user_name":"缪文","can_delete":false,"product_type":"c1","uid":1042262,"ip_address":"","ucode":"59603B50EF5FC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/56/c72997f3.jpg","comment_is_top":false,"comment_ctime":1558620361,"is_pvip":false,"replies":[{"id":"35831","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559304412,"ip_address":"","comment_id":97251,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558620361","product_id":100023901,"comment_content":"毒丸对象，我也用过，就是一个可以通过外部接口或消息通知还写的bean，需要终止时设置为终止状态，不终止时是正常状态，消费线程在读到终止状态时直接跳过任务执行，线程也就完成终止了","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451193,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559304412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97036,"user_name":"强哥","can_delete":false,"product_type":"c1","uid":1206726,"ip_address":"","ucode":"3B8DC780FE4EF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/c6/513df085.jpg","comment_is_top":false,"comment_ctime":1558575190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558575190","product_id":100023901,"comment_content":"很期待接下来两个模块的深入讲解！","like_count":0},{"had_liked":false,"id":97010,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1558572527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558572527","product_id":100023901,"comment_content":"打卡！","like_count":0}]}