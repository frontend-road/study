{"id":97215,"title":"03 | 字符串性能优化不容小觑，百M内存轻松存储几十G数据","content":"<p>你好，我是刘超。</p><p>从第二个模块开始，我将带你学习Java编程的性能优化。今天我们就从最基础的String字符串优化讲起。</p><p>String对象是我们使用最频繁的一个对象类型，但它的性能问题却是最容易被忽略的。String对象作为Java语言中重要的数据类型，是内存中占据空间最大的一个对象。<span class=\"orange\">高效地使用字符串，可以提升系统的整体性能。</span></p><p>接下来我们就从String对象的实现、特性以及实际使用中的优化这三个方面入手，深入了解。</p><p>在开始之前，我想先问你一个小问题，也是我在招聘时，经常会问到面试者的一道题。虽是老生常谈了，但错误率依然很高，当然也有一些面试者答对了，但能解释清楚答案背后原理的人少之又少。问题如下：</p><p>通过三种不同的方式创建了三个对象，再依次两两匹配，每组被匹配的两个对象是否相等？代码如下：</p><pre><code>String str1= &quot;abc&quot;;\nString str2= new String(&quot;abc&quot;);\nString str3= str2.intern();\nassertSame(str1==str2);\nassertSame(str2==str3);\nassertSame(str1==str3)\n</code></pre><p>你可以先想想答案，以及这样回答的原因。希望通过今天的学习，你能拿到满分。</p><h2>String对象是如何实现的？</h2><p>在Java语言中，Sun公司的工程师们对String对象做了大量的优化，来节约内存空间，提升String对象在系统中的性能。一起来看看优化过程，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/35/6d/357f1cb1263fd0b5b3e4ccb6b971c96d.jpg?wh=1632*636\" alt=\"\"></p><p><strong>1.在Java6以及之前的版本中</strong>，String对象是对char数组进行了封装实现的对象，主要有四个成员变量：char数组、偏移量offset、字符数量count、哈希值hash。</p><!-- [[[read_end]]] --><p>String对象是通过offset和count两个属性来定位char[]数组，获取字符串。这么做可以高效、快速地共享数组对象，同时节省内存空间，但这种方式很有可能会导致内存泄漏。</p><p><strong>2.从Java7版本开始到Java8版本</strong>，Java对String类做了一些改变。String类中不再有offset和count两个变量了。这样的好处是String对象占用的内存稍微少了些，同时，String.substring方法也不再共享char[]，从而解决了使用该方法可能导致的内存泄漏问题。</p><p><strong>3.从Java9版本开始，</strong>工程师将char[]字段改为了byte[]字段，又维护了一个新的属性coder，它是一个编码格式的标识。</p><p>工程师为什么这样修改呢？</p><p>我们知道一个char字符占16位，2个字节。这个情况下，存储单字节编码内的字符（占一个字节的字符）就显得非常浪费。JDK1.9的String类为了节约内存空间，于是使用了占8位，1个字节的byte数组来存放字符串。</p><p>而新属性coder的作用是，在计算字符串长度或者使用indexOf（）函数时，我们需要根据这个字段，判断如何计算字符串长度。coder属性默认有0和1两个值，0代表Latin-1（单字节编码），1代表UTF-16。如果String判断字符串只包含了Latin-1，则coder属性值为0，反之则为1。</p><h2>String对象的不可变性</h2><p>了解了String对象的实现后，你有没有发现在实现代码中String类被final关键字修饰了，而且变量char数组也被final修饰了。</p><p>我们知道类被final修饰代表该类不可继承，而char[]被final+private修饰，代表了String对象不可被更改。Java实现的这个特性叫作String对象的不可变性，即String对象一旦创建成功，就不能再对它进行改变。</p><p><strong>Java这样做的好处在哪里呢？</strong></p><p>第一，保证String对象的安全性。假设String对象是可变的，那么String对象将可能被恶意修改。</p><p>第二，保证hash属性值不会频繁变更，确保了唯一性，使得类似HashMap容器才能实现相应的key-value缓存功能。</p><p>第三，可以实现字符串常量池。在Java中，通常有两种创建字符串对象的方式，一种是通过字符串常量的方式创建，如String str=“abc”；另一种是字符串变量通过new形式的创建，如String str = new String(“abc”)。</p><p>当代码中使用第一种方式创建字符串对象时，JVM首先会检查该对象是否在字符串常量池中，如果在，就返回该对象引用，否则新的字符串将在常量池中被创建。这种方式可以减少同一个值的字符串对象的重复创建，节约内存。</p><p>String str = new String(“abc”)这种方式，首先在编译类文件时，\"abc\"常量字符串将会放入到常量结构中，在类加载时，“abc\"将会在常量池中创建；其次，在调用new时，JVM命令将会调用String的构造函数，同时引用常量池中的\"abc” 字符串，在堆内存中创建一个String对象；最后，str将引用String对象。</p><p><strong>这里附上一个你可能会想到的经典反例。</strong></p><p>平常编程时，对一个String对象str赋值“hello”，然后又让str值为“world”，这个时候str的值变成了“world”。那么str值确实改变了，为什么我还说String对象不可变呢？</p><p>首先，我来解释下什么是对象和对象引用。Java初学者往往对此存在误区，特别是一些从PHP转Java的同学。在Java中要比较两个对象是否相等，往往是用==，而要判断两个对象的值是否相等，则需要用equals方法来判断。</p><p>这是因为str只是String对象的引用，并不是对象本身。对象在内存中是一块内存地址，str则是一个指向该内存地址的引用。所以在刚刚我们说的这个例子中，第一次赋值的时候，创建了一个“hello”对象，str引用指向“hello”地址；第二次赋值的时候，又重新创建了一个对象“world”，str引用指向了“world”，但“hello”对象依然存在于内存中。</p><p>也就是说str并不是对象，而只是一个对象引用。真正的对象依然还在内存中，没有被改变。</p><h2>String对象的优化</h2><p>了解了String对象的实现原理和特性，接下来我们就结合实际场景，看看如何优化String对象的使用，优化的过程中又有哪些需要注意的地方。</p><h3>1.如何构建超大字符串？</h3><p>编程过程中，字符串的拼接很常见。前面我讲过String对象是不可变的，如果我们使用String对象相加，拼接我们想要的字符串，是不是就会产生多个对象呢？例如以下代码：</p><pre><code>String str= &quot;ab&quot; + &quot;cd&quot; + &quot;ef&quot;;\n</code></pre><p>分析代码可知：首先会生成ab对象，再生成abcd对象，最后生成abcdef对象，从理论上来说，这段代码是低效的。</p><p>但实际运行中，我们发现只有一个对象生成，这是为什么呢？难道我们的理论判断错了？我们再来看编译后的代码，你会发现编译器自动优化了这行代码，如下：</p><pre><code>String str= &quot;abcdef&quot;;\n</code></pre><p>上面我介绍的是字符串常量的累计，我们再来看看字符串变量的累计又是怎样的呢？</p><pre><code>String str = &quot;abcdef&quot;;\n\nfor(int i=0; i&lt;1000; i++) {\n      str = str + i;\n}\n</code></pre><p>上面的代码编译后，你可以看到编译器同样对这段代码进行了优化。不难发现，Java在进行字符串的拼接时，偏向使用StringBuilder，这样可以提高程序的效率。</p><pre><code>\nString str = &quot;abcdef&quot;;\n\nfor(int i=0; i&lt;1000; i++) {\n        \t  str = (new StringBuilder(String.valueOf(str))).append(i).toString();\n}\n</code></pre><p><strong>综上已知：</strong>即使使用+号作为字符串的拼接，也一样可以被编译器优化成StringBuilder的方式。但再细致些，你会发现在编译器优化的代码中，每次循环都会生成一个新的StringBuilder实例，同样也会降低系统的性能。</p><p>所以平时做字符串拼接的时候，我建议你还是要显示地使用String Builder来提升系统性能。</p><p>如果在多线程编程中，String对象的拼接涉及到线程安全，你可以使用StringBuffer。但是要注意，由于StringBuffer是线程安全的，涉及到锁竞争，所以从性能上来说，要比StringBuilder差一些。</p><h3>2.如何使用String.intern节省内存？</h3><p>讲完了构建字符串，我们再来讨论下String对象的存储问题。先看一个案例。</p><p>Twitter每次发布消息状态的时候，都会产生一个地址信息，以当时Twitter用户的规模预估，服务器需要32G的内存来存储地址信息。</p><pre><code>public class Location {\n    private String city;\n    private String region;\n    private String countryCode;\n    private double longitude;\n    private double latitude;\n} \n</code></pre><p>考虑到其中有很多用户在地址信息上是有重合的，比如，国家、省份、城市等，这时就可以将这部分信息单独列出一个类，以减少重复，代码如下：</p><pre><code>\npublic class SharedLocation {\n\n\tprivate String city;\n\tprivate String region;\n\tprivate String countryCode;\n}\n\npublic class Location {\n\n\tprivate SharedLocation sharedLocation;\n\tdouble longitude;\n\tdouble latitude;\n}\n</code></pre><p>通过优化，数据存储大小减到了20G左右。但对于内存存储这个数据来说，依然很大，怎么办呢？</p><p>这个案例来自一位Twitter工程师在QCon全球软件开发大会上的演讲，他们想到的解决方法，就是使用String.intern来节省内存空间，从而优化String对象的存储。</p><p>具体做法就是，在每次赋值的时候使用String的intern方法，如果常量池中有相同值，就会重复使用该对象，返回对象引用，这样一开始的对象就可以被回收掉。这种方式可以使重复性非常高的地址信息存储大小从20G降到几百兆。</p><pre><code>SharedLocation sharedLocation = new SharedLocation();\n\nsharedLocation.setCity(messageInfo.getCity().intern());\t\tsharedLocation.setCountryCode(messageInfo.getRegion().intern());\nsharedLocation.setRegion(messageInfo.getCountryCode().intern());\n\nLocation location = new Location();\nlocation.set(sharedLocation);\nlocation.set(messageInfo.getLongitude());\nlocation.set(messageInfo.getLatitude());\n</code></pre><p><strong>为了更好地理解，我们再来通过一个简单的例子，回顾下其中的原理：</strong></p><pre><code>String a =new String(&quot;abc&quot;).intern();\nString b = new String(&quot;abc&quot;).intern();\n    \t  \nif(a==b) {\n    System.out.print(&quot;a==b&quot;);\n}\n</code></pre><p>输出结果：</p><pre><code>a==b\n</code></pre><p>在字符串常量中，默认会将对象放入常量池；在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，String对象中的char数组将会引用常量池中的char数组，并返回堆内存对象引用。</p><p>如果调用intern方法，会去查看字符串常量池中是否有等于该对象的字符串的引用，如果没有，在JDK1.6版本中会复制堆中的字符串到常量池中，并返回该字符串引用，堆内存中原有的字符串由于没有引用指向它，将会通过垃圾回收器回收。</p><p>在JDK1.7版本以后，由于常量池已经合并到了堆中，所以不会再复制具体字符串了，只是会把首次遇到的字符串的引用添加到常量池中；如果有，就返回常量池中的字符串引用。</p><p>了解了原理，我们再一起看下上边的例子。</p><p>在一开始字符串\"abc\"会在加载类时，在常量池中创建一个字符串对象。</p><p>创建a变量时，调用new Sting()会在堆内存中创建一个String对象，String对象中的char数组将会引用常量池中字符串。在调用intern方法之后，会去常量池中查找是否有等于该字符串对象的引用，有就返回引用。</p><p>创建b变量时，调用new Sting()会在堆内存中创建一个String对象，String对象中的char数组将会引用常量池中字符串。在调用intern方法之后，会去常量池中查找是否有等于该字符串对象的引用，有就返回引用。</p><p>而在堆内存中的两个对象，由于没有引用指向它，将会被垃圾回收。所以a和b引用的是同一个对象。</p><p>如果在运行时，创建字符串对象，将会直接在堆内存中创建，不会在常量池中创建。所以动态创建的字符串对象，调用intern方法，在JDK1.6版本中会去常量池中创建运行时常量以及返回字符串引用，在JDK1.7版本之后，会将堆中的字符串常量的引用放入到常量池中，当其它堆中的字符串对象通过intern方法获取字符串对象引用时，则会去常量池中判断是否有相同值的字符串的引用，此时有，则返回该常量池中字符串引用，跟之前的字符串指向同一地址的字符串对象。</p><p>以一张图来总结String字符串的创建分配内存地址情况：</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/50/b1995253db45cd5e5b7bc1ded7cbdd50.jpg?wh=2510*952\" alt=\"\"></p><p>使用intern方法需要注意的一点是，一定要结合实际场景。因为常量池的实现是类似于一个HashTable的实现方式，HashTable存储的数据越大，遍历的时间复杂度就会增加。如果数据过大，会增加整个字符串常量池的负担。</p><h3>3.如何使用字符串的分割方法？</h3><p>最后我想跟你聊聊字符串的分割，这种方法在编码中也很最常见。Split()方法使用了正则表达式实现了其强大的分割功能，而正则表达式的性能是非常不稳定的，使用不恰当会引起回溯问题，很可能导致CPU居高不下。</p><p>所以我们应该慎重使用Split()方法，我们可以用String.indexOf()方法代替Split()方法完成字符串的分割。如果实在无法满足需求，你就在使用Split()方法时，对回溯问题加以重视就可以了。</p><h2>总结</h2><p>这一讲中，我们认识到做好String字符串性能优化，可以提高系统的整体性能。在这个理论基础上，Java版本在迭代中通过不断地更改成员变量，节约内存空间，对String对象进行优化。</p><p>我们还特别提到了String对象的不可变性，正是这个特性实现了字符串常量池，通过减少同一个值的字符串对象的重复创建，进一步节约内存。</p><p>但也是因为这个特性，我们在做长字符串拼接时，需要显示使用StringBuilder，以提高字符串的拼接性能。最后，在优化方面，我们还可以使用intern方法，让变量字符串对象重复使用常量池中相同值的对象，进而节约内存。</p><p>最后再分享一个个人观点。那就是千里之堤，溃于蚁穴。日常编程中，我们往往可能就是对一个小小的字符串了解不够深入，使用不够恰当，从而引发线上事故。</p><p>比如，在我之前的工作经历中，就曾因为使用正则表达式对字符串进行匹配，导致并发瓶颈，这里也可以将其归纳为字符串使用的性能问题。具体实战分析，我将在04讲中为你详解。</p><h2>思考题</h2><p>通过今天的学习，你知道文章开头那道面试题的答案了吗？背后的原理是什么？</p><h2>互动时刻</h2><p>今天除了思考题，我还想和你做一个简短的交流。</p><p>上两讲中，我收到了很多留言，在此非常感谢你的支持。由于前两讲是概述内容，主要是帮你建立对性能调优的整体认识，所以相对来说重理论、偏基础。但我发现，很多同学都有这样迫切的愿望，那就是赶紧学会使用排查工具，监测分析性能，解决当下的一些问题。</p><p>我这里特别想分享一点，其实性能调优不仅仅是学会使用排查监测工具，更重要的是掌握背后的调优原理，这样你不仅能够独立解决同一类的性能问题，还能写出高性能代码，所以我希望给你的学习路径是：夯实基础-结合实战-实现进阶。</p><p>最后，欢迎你积极发言，讨论思考题或是你遇到的性能问题都可以，我会知无不尽。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。</p><p></p>","neighbors":{"left":{"article_title":"02 | 如何制定性能调优策略？","id":96908},"right":{"article_title":"04 | 慎重使用正则表达式","id":97671}},"comments":[{"had_liked":false,"id":97627,"user_name":"KL3","can_delete":false,"product_type":"c1","uid":1537889,"ip_address":"","ucode":"866F01619D295F","user_header":"https://static001.geekbang.org/account/avatar/00/17/77/61/adf1c799.jpg","comment_is_top":false,"comment_ctime":1558717014,"is_pvip":false,"replies":[{"id":"34913","content":"你好 KL3，在Java6中substring方法会调用new string构造函数，此时会复用原来的char数组，而如果我们仅仅是用substring获取一小段字符，而原本string字符串非常大的情况下，substring的对象如果一直被引用，由于substring的里面的char数组仍然指向原字符串，此时string字符串也无法回收，从而导致内存泄露。<br><br>试想下，如果有大量这种通过substring获取超大字符串中一小段字符串的操作，会因为内存泄露而导致内存溢出。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558753198,"ip_address":"","comment_id":97627,"utype":1}],"discussion_count":2,"race_medal":0,"score":"555609498198","product_id":100028001,"comment_content":"老师，能解释下，<br>“String.substring 方法也不再共享 char[]，从而解决了使用该方法可能导致的内存泄漏问题。”<br><br>共享char数组可能导致内存泄露问题？","like_count":129,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451349,"discussion_content":"你好 KL3，在Java6中substring方法会调用new string构造函数，此时会复用原来的char数组，而如果我们仅仅是用substring获取一小段字符，而原本string字符串非常大的情况下，substring的对象如果一直被引用，由于substring的里面的char数组仍然指向原字符串，此时string字符串也无法回收，从而导致内存泄露。\n\n试想下，如果有大量这种通过substring获取超大字符串中一小段字符串的操作，会因为内存泄露而导致内存溢出。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1558753198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1111176,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/88/133bc14b.jpg","nickname":"c340","note":"","ucode":"D64CC3DDD09A0F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":558175,"discussion_content":"我的理解是复用char数组造成char数组的内存泄漏，原来的string对象没有引用应该可以被回收吧，只不过char不能回收","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648117750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":451349,"ip_address":""},"score":558175,"extra":""}]}]},{"had_liked":false,"id":97687,"user_name":"扫地僧","can_delete":false,"product_type":"c1","uid":1129952,"ip_address":"","ucode":"EEDC2BA2FED1FF","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/e0/be2f1bf3.jpg","comment_is_top":false,"comment_ctime":1558749634,"is_pvip":false,"replies":[{"id":"34917","content":"答案非常正确，理解了这个题目基本理解了string的特性了。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558753595,"ip_address":"","comment_id":97687,"utype":1}],"discussion_count":11,"race_medal":0,"score":"396695740866","product_id":100028001,"comment_content":"答案是false,false,true。背后的原理是：<br>1、String str1 = &quot;abc&quot;;通过字面量的方式创建，abc存储于字符串常量池中；<br>2、String str2 = new String(&quot;abc&quot;);通过new对象的方式创建字符串对象，引用地址存放在堆内存中，abc则存放在字符串常量池中；所以str1 == str2?显然是false<br>3、String str3 = str2.intern();由于str2调用了intern()方法，会返回常量池中的数据，地址直接指向常量池，所以str1 == str3；而str2和str3地址值不等所以也是false（str2指向堆空间，str3直接指向字符串常量池）。不知道这样理解有木有问题<br>","like_count":93,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451372,"discussion_content":"答案非常正确，理解了这个题目基本理解了string的特性了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558753595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1594508,"avatar":"https://static001.geekbang.org/account/avatar/00/18/54/8c/a3b98f6c.jpg","nickname":"denofiend","note":"","ucode":"FC9A750C96E01C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31157,"discussion_content":"引用地址存放在堆内存中 这个表达的是什么意思？引用的地址？还是引用对象的地址？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570883927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1139413,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/d5/1f5c5ab6.jpg","nickname":"大大大熊myeh","note":"","ucode":"4832C2E7CEB151","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1594508,"avatar":"https://static001.geekbang.org/account/avatar/00/18/54/8c/a3b98f6c.jpg","nickname":"denofiend","note":"","ucode":"FC9A750C96E01C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298631,"discussion_content":"就是new出来对象的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597366970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":31157,"ip_address":""},"score":298631,"extra":""},{"author":{"id":2088680,"avatar":"","nickname":"淼小淼","note":"","ucode":"D5014C37AAC2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1139413,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/d5/1f5c5ab6.jpg","nickname":"大大大熊myeh","note":"","ucode":"4832C2E7CEB151","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320282,"discussion_content":"这就对了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604308591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298631,"ip_address":""},"score":320282,"extra":""}]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377400,"discussion_content":"6和7的结果是截然不同的 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622628203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2261677,"avatar":"","nickname":"Geek_68a886","note":"","ucode":"F167BE12799604","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340055,"discussion_content":"我运行的结果怎么是false，false，false JDK1.8","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609895001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2664121,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a6/b9/6bdaf8ce.jpg","nickname":"rich_li","note":"","ucode":"B82495DDC942DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2261677,"avatar":"","nickname":"Geek_68a886","note":"","ucode":"F167BE12799604","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394920,"discussion_content":"1.8也是相同的答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632128112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340055,"ip_address":""},"score":394920,"extra":""}]},{"author":{"id":1536982,"avatar":"https://static001.geekbang.org/account/avatar/00/17/73/d6/42c13267.jpg","nickname":"zh","note":"","ucode":"B021A312790C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29763,"discussion_content":"果然扫地僧才是真正得王者","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570782631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570435,"discussion_content":"补充一点str2调完intern方法后原来的堆内存对象会被回收","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651762853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438863,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8f/6b3d4370.jpg","nickname":"瑶老板的小弟","note":"","ucode":"EA6CDB3165227F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281052,"discussion_content":"字符串常量池不是存首次出现的对象引用吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591666308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100064,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","nickname":"zj","note":"","ucode":"E3329CCF694AC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266541,"discussion_content":"str3不是说指向字符串常量池，准确的描述是str3指向 字符串常量池引用的该字符串&#39;abc&#39;对应的堆中的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589529438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97630,"user_name":"快乐的五五开","can_delete":false,"product_type":"c1","uid":1546437,"ip_address":"","ucode":"1ECBBE6EF83657","user_header":"https://static001.geekbang.org/account/avatar/00/17/98/c5/cf8c3cc2.jpg","comment_is_top":false,"comment_ctime":1558719404,"is_pvip":false,"replies":[{"id":"34920","content":"非常感谢Geek的补充，我在这里也再补充一个小点，split有两种情况不会使用正则表达式：<br><br>第一种为传入的参数长度为1，且不包含“.$|()[{^?*+\\\\”regex元字符的情况下，不会使用正则表达式；<br><br>第二种为传入的参数长度为2，第一个字符是反斜杠，并且第二个字符不是ASCII数字或ASCII字母的情况下，不会使用正则表达式。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558754499,"ip_address":"","comment_id":97630,"utype":1}],"discussion_count":3,"race_medal":0,"score":"306501397420","product_id":100028001,"comment_content":"自学一年居然不知道有String.intern这个方法😓😓<br>不过从Java8开始（大概） String.split() 传入长度为1字符串的时候并不会使用正则，这种情况还是可以用","like_count":71,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451351,"discussion_content":"非常感谢Geek的补充，我在这里也再补充一个小点，split有两种情况不会使用正则表达式：\n\n第一种为传入的参数长度为1，且不包含“.$|()[{^?*+\\\\”regex元字符的情况下，不会使用正则表达式；\n\n第二种为传入的参数长度为2，第一个字符是反斜杠，并且第二个字符不是ASCII数字或ASCII字母的情况下，不会使用正则表达式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558754499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1096397,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ba/cd/1f91aa44.jpg","nickname":"KK","note":"","ucode":"14C0858C413E00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355317,"discussion_content":"第二种就是转义字符吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615421156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2060756,"avatar":"","nickname":"在下蟑螂王","note":"","ucode":"E66A65A327095A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290716,"discussion_content":"55开你怎么了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594571712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119758,"user_name":"行则将至","can_delete":false,"product_type":"c1","uid":1542987,"ip_address":"","ucode":"DB972F2DF059C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","comment_is_top":false,"comment_ctime":1564674427,"is_pvip":false,"replies":[{"id":"44110","content":"如果看不太懂，建议先熟悉下JVM这块的知识点。我们知道，JVM从逻辑分区可以分为堆、JVM栈、本地方法栈、方法区、程序计数器，方法区中，在JDK1.8之后，包含了元空间、静态常量池、运行时常量池。<br><br>对于字符串常量，在类加载时，会将字符串放入方法区中的静态常量池，包括字符串的字面量和字符引用。而在初始化或运行时，会将字符引用转为直接引用，存放在运行时常量池。<br><br>如果是运行时动态生成的字符串对象调用intern方法，如果字符串的引用在运行时常量池不存在，则会在常量池中创建一个引用。<br><br>所以第一个通过加动态生成的“11”字符串由于在运行时常量中没有该字符串的引用，所以会在调用s1.intern时，在运行时常量池中生成一个s1的引用，当s2再次引用该字符串时，发现运行时常量池中存在相同值的字符串的引用，就直接返回s1的引用。所以s1==s2是返回的true。这也仅限于JDK1.7之后的版本。<br><br>而第二种，用于&quot;11&quot;在类加载时，已经存在静态常量池中，在new string(“11”)时，会在运行时常量池中创建一个“11”字符串的直接引用。而s1指向的并不是该引用，而是new string这个对象的引用。当s2=“11”时，返回的是运行时常量池中的引用。所以s1==s2返回false。<br><br>","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564800019,"ip_address":"","comment_id":119758,"utype":1}],"discussion_count":16,"race_medal":1,"score":"164773431675","product_id":100028001,"comment_content":"老师好，诚心请教一个问题<br>string s1 = new string(“1”)+new string(“1”);<br>s1.intern;<br>string s2=“11”;<br>s1==s2为什么是true呢，我理解s1指向的对象，s2指向的常量池地址才对啊？<br>然后<br>string s1 = new string(“1”);<br>s1.intern;<br>string s2=“11”;<br>s1==s2又是false了，区别在哪？<br>老师，周董提的这个问题，我都琢磨一晚上了。您的回答看了好多遍，确实是看不懂，您能再解释一下吗？目前的回答，咋看也看不懂。。。。。。","like_count":38,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461058,"discussion_content":"如果看不太懂，建议先熟悉下JVM这块的知识点。我们知道，JVM从逻辑分区可以分为堆、JVM栈、本地方法栈、方法区、程序计数器，方法区中，在JDK1.8之后，包含了元空间、静态常量池、运行时常量池。\n\n对于字符串常量，在类加载时，会将字符串放入方法区中的静态常量池，包括字符串的字面量和字符引用。而在初始化或运行时，会将字符引用转为直接引用，存放在运行时常量池。\n\n如果是运行时动态生成的字符串对象调用intern方法，如果字符串的引用在运行时常量池不存在，则会在常量池中创建一个引用。\n\n所以第一个通过加动态生成的“11”字符串由于在运行时常量中没有该字符串的引用，所以会在调用s1.intern时，在运行时常量池中生成一个s1的引用，当s2再次引用该字符串时，发现运行时常量池中存在相同值的字符串的引用，就直接返回s1的引用。所以s1==s2是返回的true。这也仅限于JDK1.7之后的版本。\n\n而第二种，用于&amp;quot;11&amp;quot;在类加载时，已经存在静态常量池中，在new string(“11”)时，会在运行时常量池中创建一个“11”字符串的直接引用。而s1指向的并不是该引用，而是new string这个对象的引用。当s2=“11”时，返回的是运行时常量池中的引用。所以s1==s2返回false。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564800019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367839,"discussion_content":"String s1 = new String(&#34;1&#34;) + new String(&#34;1&#34;);\ns1.intern();\nString s2 = &#34;11&#34;;\n\n// false\nSystem.out.println(s1 == s2);\n\n========\n\nString s1 = new String(&#34;1&#34;) + new String(&#34;1&#34;);\ns1 = s1.intern();\nString s2 = &#34;11&#34;;\n\n// true\nSystem.out.println(s1 == s2);\n\n\n第一段代码，intern 之后赋值与否的结果\n+++++++++++++++++++++++++++++++++\n\n// 题主提的问题是 new String(&#34;1&#34;)，应该是手误，敲少了一个 1\nString s1 = new String(&#34;11&#34;);\ns1.intern();\nString s2 = &#34;11&#34;;\n\n// false\nSystem.out.println(s1 == s2);\n\n========\n\nString s1 = new String(&#34;11&#34;);\ns1 = s1.intern();\nString s2 = &#34;11&#34;;\n\n// true\nSystem.out.println(s1 == s2);\n+++++++++++++++++++++++++++++++++\n\n\n感觉问问题，还是严谨一点，该赋值还是需要赋值的，否则就有歧义了。\n\n$ java -version\nopenjdk version &#34;1.8.0_242&#34;\nOpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_242-b08)\nOpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.242-b08, mixed mode)\n\nIntelliJ IDEA 2021.1 (Community Edition)\nBuild #IC-211.6693.111, built on April 6, 2021","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1618480320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1638878,"avatar":"https://static001.geekbang.org/account/avatar/00/19/01/de/bf524817.jpg","nickname":"慌张而黑糖","note":"","ucode":"B4416885A301C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319816,"discussion_content":"如果不理解请看这篇文章，感觉应该符合你的问题 https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604128103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1628398,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d8/ee/17f220b6.jpg","nickname":"蛋炒饭加鸡蛋","note":"","ucode":"C75E27B9FB3336","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192020,"discussion_content":"第二种，按理说s1.intern()后也会在运行常量池生成s1的引用，那s1==s2不应该就是true吗，老师的第二种解释不太理解","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583055562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2301328,"avatar":"https://static001.geekbang.org/account/avatar/00/23/1d/90/3c5f1971.jpg","nickname":"E～Bovin~Q","note":"","ucode":"41EB4DCACFCEED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1628398,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d8/ee/17f220b6.jpg","nickname":"蛋炒饭加鸡蛋","note":"","ucode":"C75E27B9FB3336","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331774,"discussion_content":"但是并没有改变S1自身的引用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606974461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":192020,"ip_address":""},"score":331774,"extra":""},{"author":{"id":2850663,"avatar":"","nickname":"Geek_5e6ecf","note":"","ucode":"A1222F7D5C4D99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2301328,"avatar":"https://static001.geekbang.org/account/avatar/00/23/1d/90/3c5f1971.jpg","nickname":"E～Bovin~Q","note":"","ucode":"41EB4DCACFCEED","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573946,"discussion_content":"文章里说：在调用 intern 方法之后，会去常量池中查找是否有等于该字符串对象的引用，有就返回引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653742498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331774,"ip_address":""},"score":573946,"extra":""}]},{"author":{"id":1488312,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/b8/1178ae00.jpg","nickname":"莫邪","note":"","ucode":"F3B35D2844F520","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344606,"discussion_content":"第一种情况，运行时先生成了&#34;11&#34;的字符串，但并没有在常量池内，s1.interl的时候才把这个字符串得引用放入常量池，这时候常量池的引用指的就是s1，然后s2直接取的常量池的引用，也就是s1，所以s1==s2。第二种情况是常量池里先有了11字符串，然后new string会创建新的字符串，s1指的是新的字符串，不是常量池里的，所以s1！=s2","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611536115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2143276,"avatar":"","nickname":"Geek_5be4de","note":"","ucode":"9B1465039CFA0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305965,"discussion_content":"你这个第一个问题明显不是true而是false自己敲下代码就行了，误导了不少人","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600139092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2088680,"avatar":"","nickname":"淼小淼","note":"","ucode":"D5014C37AAC2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2143276,"avatar":"","nickname":"Geek_5be4de","note":"","ucode":"9B1465039CFA0F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320321,"discussion_content":"第一个就是true啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604319831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305965,"ip_address":""},"score":320321,"extra":""}]},{"author":{"id":1212902,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","nickname":"旅途","note":"","ucode":"5022477E8E9441","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300403,"discussion_content":"s1.intern 不是s1 = s1.intern,s1还是堆的引用吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598082247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2834804,"avatar":"","nickname":"Geek_161af7","note":"","ucode":"EF9B2C0B359855","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553233,"discussion_content":"这个画图展示会清楚地多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645777770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2372300,"avatar":"","nickname":"午夜","note":"","ucode":"D4AACAC36F781E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336154,"discussion_content":"s1.intern和s1 = s1.intern 是不一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608518264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1962148,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/f0/a4/9d8c3dc3.jpg","nickname":"半生","note":"","ucode":"8F6BA3CA1AC1B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295327,"discussion_content":"我的理解，第一个类似于str=1+1，编译器优化后就变成了str=11，优化后直接引用常量池了，第二个就是string对象和常量池的不同引用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596165331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066562,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/42/6e0f3754.jpg","nickname":"Sunny","note":"","ucode":"D2A4F0C64246CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281147,"discussion_content":"而第二种，用于&#34;11&#34;在类加载时，已经存在静态常量池中，这个没理解。难道第一种情况不放吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591678962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1746317,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a5/8d/839becc5.jpg","nickname":"王凯","note":"","ucode":"3A8FE67E83E73F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066562,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/42/6e0f3754.jpg","nickname":"Sunny","note":"","ucode":"D2A4F0C64246CD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290681,"discussion_content":"第一种放了两个1吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594564395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281147,"ip_address":""},"score":290681,"extra":""}]},{"author":{"id":1396437,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4e/d5/fc1b3d55.jpg","nickname":"袁泽川","note":"","ucode":"D6BD1B8F5DD79B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255532,"discussion_content":"我理解一下，s2肯定是在常量池中的，就是第一种情况，new string(“1”)+new string(“1”); 这个返回的难道也是常量池中的引用么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588408549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119668,"user_name":"周董","can_delete":false,"product_type":"c1","uid":1254592,"ip_address":"","ucode":"4DFEE588C6B89E","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/c0/74898059.jpg","comment_is_top":false,"comment_ctime":1564649348,"is_pvip":false,"replies":[{"id":"44006","content":"严格来说，是静态常量池和运行时常量池，静态常量池是存放字符串字面量、符号引用以及类和方法的信息，而运行时常量池存放的是运行时一些直接引用。<br><br>运行时常量池是在类加载完成之后，将静态常量池中的符号引用值转存到运行时常量池中，类在解析之后，将符号引用替换成直接引用。<br><br>这两个常量池在JDK1.7版本之后，就移到堆内存中了，这里指的是物理空间，而逻辑上还是属于方法区（方法区是逻辑分区）。<br><br>我文中说的是两个常量池，没有具体区分，在初次加载时，是字面量是加载到了静态常量池中，解析之后会将引用加载到运行时常量池。<br><br>intern方法生成的引用或对象是在运行时常量池中。<br><br>","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564714692,"ip_address":"","comment_id":119668,"utype":1}],"discussion_count":2,"race_medal":0,"score":"117528766340","product_id":100028001,"comment_content":"老师，还有一个问题网上众说纷纭，jdk1.8版本，字符串常量池和运行时常量池分别在内存哪个区？您文中的常量池是什么常量池？调用intern后字符串是在哪个常量池生成引用或者对象？麻烦老师抽空解答下，这个困扰很久了。","like_count":27,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461007,"discussion_content":"严格来说，是静态常量池和运行时常量池，静态常量池是存放字符串字面量、符号引用以及类和方法的信息，而运行时常量池存放的是运行时一些直接引用。\n\n运行时常量池是在类加载完成之后，将静态常量池中的符号引用值转存到运行时常量池中，类在解析之后，将符号引用替换成直接引用。\n\n这两个常量池在JDK1.7版本之后，就移到堆内存中了，这里指的是物理空间，而逻辑上还是属于方法区（方法区是逻辑分区）。\n\n我文中说的是两个常量池，没有具体区分，在初次加载时，是字面量是加载到了静态常量池中，解析之后会将引用加载到运行时常量池。\n\nintern方法生成的引用或对象是在运行时常量池中。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564714692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377401,"discussion_content":"字符串是运行时常量池的一部分 只不过是单独划分的 逻辑上归运行时常量池","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622628297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100193,"user_name":"Teanmy","can_delete":false,"product_type":"c1","uid":1209599,"ip_address":"","ucode":"89F466CC698583","user_header":"","comment_is_top":false,"comment_ctime":1559475403,"is_pvip":false,"replies":[{"id":"36054","content":"你好 teanmy。运行时创建的字符串对象只会在堆中创建一个对象。在这个前提下，如果有相同值的对象创建，使用intern可以减少重复字符串的创建。例如，有广东省&#47;深圳市&#47;南山区，如果有千万个人发布消息，创建了地址对象，这样导致千万个“广东省”对象在堆内存中创建，如果长时间引用，这些对象都没法释放，使用intern将“广东省”放到常量池中，其他对象引用常量池中的同一个“广东省”字符串，而堆中的千万个对象将被回收。<br><br>如果有疑问，请继续留言。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559526241,"ip_address":"","comment_id":100193,"utype":1}],"discussion_count":3,"race_medal":0,"score":"96048755915","product_id":100028001,"comment_content":"老师好，有一点始终想不明白，请老师解惑，非常感谢！<br><br>老师先帮忙看看关于这两行代码，我的分析是否正确：<br>str1 = &quot;abc&quot;;<br>str2 = new String(&quot;abc&quot;)<br><br>str1 = &quot;abc&quot;;<br>1.str1，首先是在字符串常量池中寻找&quot;abc&quot;，找到则取其地址，找不到则创建并返回其地址<br>2.将该地址赋值给栈中的str1<br><br>str2 = new String(&quot;abc&quot;)<br>1.在堆中创建String对象，我查阅了String构造方法源码，实际值取的是&quot;abc&quot;的（此时&quot;abc&quot;已经存在字符串常量池中）引用，也就是说，str2还是指向常量池，并没有创建新的&quot;abc&quot;。<br>public String(String original) {<br>        this.value = original.value;<br>        this.hash = original.hash;<br> }<br>2.堆中创建完String对象，将该对象的地址赋值给栈变量str2<br><br>疑问：<br>既然不管是以上哪种方式，最终实际引用的还是常量池中的&quot;abc&quot;，str2 = new String(&quot;abc&quot;)只是增加了一个堆中String的“空壳”对象而已（因为实际上char[]指向的还是常量池中的&quot;abc&quot;），这个空壳对象并不会占用过多内存。而.intern的实质只是减少了这个中间的String空壳对象，那何来twitter通过.intern减少大量内存？<br>","like_count":22,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452443,"discussion_content":"你好 teanmy。运行时创建的字符串对象只会在堆中创建一个对象。在这个前提下，如果有相同值的对象创建，使用intern可以减少重复字符串的创建。例如，有广东省/深圳市/南山区，如果有千万个人发布消息，创建了地址对象，这样导致千万个“广东省”对象在堆内存中创建，如果长时间引用，这些对象都没法释放，使用intern将“广东省”放到常量池中，其他对象引用常量池中的同一个“广东省”字符串，而堆中的千万个对象将被回收。\n\n如果有疑问，请继续留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559526241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028951,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/97/9a7ee7b3.jpg","nickname":"Geek4329","note":"","ucode":"D6FB8D1B2D5DAC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371415,"discussion_content":"感觉作者还是没get到问题的点","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1619764140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184778,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/hHAggykOyjScVG9qqSsdVaShDZoK6awO1uZYb3b75UA5QocVPMe3AT3AP3RDamtU7k8nekvc67DUzLRFDMTUQQ/132","nickname":"Geek_56d8e2","note":"","ucode":"D44E94FF5BFD9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555471,"discussion_content":"即使不使用 intern 方法 老师所说的  千万个“广东省”对象  持有的是 同一个  常量池中的 “广东省” 引用吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646920519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97692,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1558750186,"is_pvip":false,"replies":[{"id":"34914","content":"这里我纠正下，str3是intern返回的引用，intern而不是创建出来的。<br><br>你的答案是正确的！","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558753256,"ip_address":"","comment_id":97692,"utype":1}],"discussion_count":1,"race_medal":0,"score":"91753063402","product_id":100028001,"comment_content":"开头题目答案是false false true<br>str1是建立在常量池中的“abc”，str2是new出来，在堆内存里的，所以str1!=str2，<br>str3是通过str2..intern()出来的，str1在常量池中已经建立了&quot;abc&quot;，这个时候str3是从常量池里取出来的，和str1指向的是同一个对象，自然也就有了st1==str3，str3!=str2了","like_count":21,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451375,"discussion_content":"这里我纠正下，str3是intern返回的引用，intern而不是创建出来的。\n\n你的答案是正确的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558753256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98922,"user_name":"Only now","can_delete":false,"product_type":"c1","uid":1038574,"ip_address":"","ucode":"C617473A03AE27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/ee/6e7c2264.jpg","comment_is_top":false,"comment_ctime":1559116424,"is_pvip":false,"replies":[{"id":"35566","content":"非常感谢only now的总结，这一讲中没有详细去区分常量池，而是在强调字符串的使用，后面我们在JVM中可以再一起研究下常量池。<br><br>JVM文献中提到方法区是存在垃圾回收。我们可以通过intern方法来验证这个gc问题，通过大量请求请求某个接口，传入参数创建字符串对象，之后通过intern方法在常量池中生成字符串对象，之后失去引用，观察gc情况。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559136917,"ip_address":"","comment_id":98922,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70278593160","product_id":100028001,"comment_content":"看了本篇几乎全部留言, 感觉包括老师在内, 对于 &quot;字符串常量池&quot; 和 &quot;常量池&quot;, 这俩概念用的很混。<br><br>对于jdk7 以及之前的jvm版本不再去深究了, 它的字符串常量池存在于方法区, 但是jdk8以后, 它存在于Java堆中, 唯一, 且由java.lang.String类维护, 它和类文件常量池, 运行时常量池没有半毛钱的关系。 <br><br>最后我有个疑问问老师, 字符串常量池中的对象, 在失去了所有外部引用之后, 会被gc掉吗?","like_count":16,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451895,"discussion_content":"非常感谢only now的总结，这一讲中没有详细去区分常量池，而是在强调字符串的使用，后面我们在JVM中可以再一起研究下常量池。\n\nJVM文献中提到方法区是存在垃圾回收。我们可以通过intern方法来验证这个gc问题，通过大量请求请求某个接口，传入参数创建字符串对象，之后通过intern方法在常量池中生成字符串对象，之后失去引用，观察gc情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559136917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97881,"user_name":"Zend","can_delete":false,"product_type":"c1","uid":1053921,"ip_address":"","ucode":"80EBB0B6772E27","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","comment_is_top":false,"comment_ctime":1558820641,"is_pvip":false,"replies":[{"id":"34994","content":"你好 Zend，具体的复制过程是先将常量池中的字符串压入栈中，在使用string的构造方法时，会拿到栈中的字符串作为构造方法的参数。这里我纠正一点，今天我查看了下这个构造函数，String的构造函数是一个char数组赋值过程，不是new char[]重新创建，所以是引用了常量池中的字符串对象，存在引用关系。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558830289,"ip_address":"","comment_id":97881,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61688362785","product_id":100028001,"comment_content":"“在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，复制到堆内存对象中，并返回堆内存对象引用。”<br>比如:<br><br>是从常量池中复制到堆内存，这时常量池中字符串与堆内存字符串是完全独立的，内部也不存在引用关系？","like_count":14,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451460,"discussion_content":"你好 Zend，具体的复制过程是先将常量池中的字符串压入栈中，在使用string的构造方法时，会拿到栈中的字符串作为构造方法的参数。这里我纠正一点，今天我查看了下这个构造函数，String的构造函数是一个char数组赋值过程，不是new char[]重新创建，所以是引用了常量池中的字符串对象，存在引用关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558830289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97649,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1558742596,"is_pvip":false,"replies":[{"id":"34916","content":"如果对空间要求高于时间要求，且存在大量重复字符串时，可以考虑使用常量池存储。<br><br>如果对查询速度要求很高，且存储字符串数量很大，重复率很低的情况下，不建议存储在常量池中。<br><br>具体可以通过模拟测试自己的场景，对比两种存储方式的性能，通过数据来给自己答案。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558753494,"ip_address":"","comment_id":97649,"utype":1}],"discussion_count":3,"race_medal":0,"score":"57393317444","product_id":100028001,"comment_content":"使用 intern 方法需要注意的一点是，一定要结合实际场景。因为常量池的实现是类似于一个 HashTable 的实现方式，HashTable 存储的数据越大，遍历的时间复杂度就会增加。如果数据过大，会增加整个字符串常量池的负担。<br>像国家地区是有边界的。像其他情况，怎么把握这个度呢？","like_count":13,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451360,"discussion_content":"如果对空间要求高于时间要求，且存在大量重复字符串时，可以考虑使用常量池存储。\n\n如果对查询速度要求很高，且存储字符串数量很大，重复率很低的情况下，不建议存储在常量池中。\n\n具体可以通过模拟测试自己的场景，对比两种存储方式的性能，通过数据来给自己答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558753494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1716801,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/32/41/c1a7840b.jpg","nickname":"着迷","note":"","ucode":"429F1D4015A195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221950,"discussion_content":"老师，如果存在大量重复字符串，又要求查询速度快，咋办，只能加内存吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586086855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1043495,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/27/f708ba52.jpg","nickname":"冷夜飞雪","note":"","ucode":"CC01ADAA8DFDFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1716801,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/32/41/c1a7840b.jpg","nickname":"着迷","note":"","ucode":"429F1D4015A195","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372548,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620375127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221950,"ip_address":""},"score":372548,"extra":""}]}]},{"had_liked":false,"id":97802,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1140494,"ip_address":"","ucode":"8FFC6764ED327B","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/0e/2a51a2df.jpg","comment_is_top":false,"comment_ctime":1558780136,"is_pvip":true,"replies":[{"id":"34995","content":"你理解的分歧点是对的，这个构造是在加载类时，就已经在常量池中构造好常量。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558830427,"ip_address":"","comment_id":97802,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48803420392","product_id":100028001,"comment_content":"对于您文中 “在一开始创建 a 变量时，会在堆内存中创建一个对象，同时在常量池中创建一个字符串对象” 这句话 我认为前部分没有问题 分歧点在后面那部分 我觉得abc常量早就在运行时常量池就存在了 可以理解使用这个类之前 就已经构造好了运行时常量池 而运行时常量池中就包括“abc”常量 至于使用new String(“abc”) 我觉得它应该只会在堆中创建String对象 并将运行时常量池中已经存在的“abc”常量的引用作为构造函数的参数而已 ","like_count":11,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451428,"discussion_content":"你理解的分歧点是对的，这个构造是在加载类时，就已经在常量池中构造好常量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558830427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649536,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2b/80/fbd45462.jpg","nickname":"管仲","note":"","ucode":"F343DE3F053093","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7678,"discussion_content":"我也刚疑惑这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567608556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117653,"user_name":"周董","can_delete":false,"product_type":"c1","uid":1254592,"ip_address":"","ucode":"4DFEE588C6B89E","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/c0/74898059.jpg","comment_is_top":false,"comment_ctime":1564105701,"is_pvip":false,"replies":[{"id":"43177","content":"String s1 = new String(&quot;1&quot;) + new String(&quot;1&quot;)会在堆中组合一个新的字符串对象&quot;11&quot;，在s1.intern()之后，由于常量池中没有该字符串的引用（只有字符串常量&quot;11&quot;），所以常量池中生成一个堆中字符串&quot;11&quot;的引用，此时String s2= &quot;11&quot;返回的是堆字符串&quot;11&quot;的引用，所以s1==s2。<br><br>在JDK1.7版本以及之后的版本运行以下代码，你会发现结果为true，在JDK1.6版本运行的结果却为false：<br>String s1 = new String(&quot;1&quot;) + new String(&quot;1&quot;);<br>System.out.println( s1.intern()==s1);<br><br><br><br>而String s1 = new String(&quot;11&quot;)首先会在常量池中创建字符串&quot;11&quot;的引用，而s1则是返回的堆中的new String(&quot;11&quot;)对象的引用，此时s1.intern()返回的是常量池字符串常量&quot;11&quot;的引用，而非堆中的。而String s2=&quot;11&quot;又是返回的常量池中常量&quot;11&quot;的引用。所以s1==s2为false。<br><br>总结：常量池中同时存在字符串常量和字符串引用，在JDK1.7版本之后的intern()方法只会尝试对象的引用放入常量池，而在之前的版本中，intern()方法会复制字符串常量到常量池中，并返回字符串引用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564199781,"ip_address":"","comment_id":117653,"utype":1}],"discussion_count":4,"race_medal":0,"score":"31628876773","product_id":100028001,"comment_content":"老师好，诚心请教一个问题<br>string s1 = new string(“1”)+new string(“1”);<br>s1.intern;<br>string s2=“11”;<br>s1==s2为什么是true呢，我理解s1指向的对象，s2指向的常量池地址才对啊？<br>然后<br>string s1 = new string(“1”);<br>s1.intern;<br>string s2=“11”;<br>s1==s2又是false了，区别在哪？","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460069,"discussion_content":"String s1 = new String(&amp;quot;1&amp;quot;) + new String(&amp;quot;1&amp;quot;)会在堆中组合一个新的字符串对象&amp;quot;11&amp;quot;，在s1.intern()之后，由于常量池中没有该字符串的引用（只有字符串常量&amp;quot;11&amp;quot;），所以常量池中生成一个堆中字符串&amp;quot;11&amp;quot;的引用，此时String s2= &amp;quot;11&amp;quot;返回的是堆字符串&amp;quot;11&amp;quot;的引用，所以s1==s2。\n\n在JDK1.7版本以及之后的版本运行以下代码，你会发现结果为true，在JDK1.6版本运行的结果却为false：\nString s1 = new String(&amp;quot;1&amp;quot;) + new String(&amp;quot;1&amp;quot;);\nSystem.out.println( s1.intern()==s1);\n\n\n\n而String s1 = new String(&amp;quot;11&amp;quot;)首先会在常量池中创建字符串&amp;quot;11&amp;quot;的引用，而s1则是返回的堆中的new String(&amp;quot;11&amp;quot;)对象的引用，此时s1.intern()返回的是常量池字符串常量&amp;quot;11&amp;quot;的引用，而非堆中的。而String s2=&amp;quot;11&amp;quot;又是返回的常量池中常量&amp;quot;11&amp;quot;的引用。所以s1==s2为false。\n\n总结：常量池中同时存在字符串常量和字符串引用，在JDK1.7版本之后的intern()方法只会尝试对象的引用放入常量池，而在之前的版本中，intern()方法会复制字符串常量到常量池中，并返回字符串引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564199781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1636410,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f8/3a/e0c14cb3.jpg","nickname":"lizhibo","note":"","ucode":"FDF4FA12C699B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19140,"discussion_content":"这个问题 我也是不懂 我看到 他们第二种里面 s1和s2 char[]的引用是一个地址值啊 ，为什么比较出来的是false 了，有什么帮助理解的法子么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569142946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyyEahkmw06SxQDbpST6m5TcbBlnJMVP4zXFQjIRvyfIrT80RRiaHoBiaBq2bddUUEiaXIz8hkooCIw/132","nickname":"13524265609","note":"","ucode":"441F3A2A4D6146","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7918,"discussion_content":"上面第二种情况，我看老师说的，s1.intern返回的是常量池字符串常量11的引用，s2返回的也是常量池中常量11的引用，那不应该s1==s2是true吗？怎么又是false了呢？请老师指正，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567730417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1213128,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/c8/6924e551.jpg","nickname":"kyle","note":"","ucode":"55EF7FC99C0BF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1274220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyyEahkmw06SxQDbpST6m5TcbBlnJMVP4zXFQjIRvyfIrT80RRiaHoBiaBq2bddUUEiaXIz8hkooCIw/132","nickname":"13524265609","note":"","ucode":"441F3A2A4D6146","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14956,"discussion_content":"没问题的，s1.intern==s2是true，s1==s2是false","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568791165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7918,"ip_address":""},"score":14956,"extra":""}]}]},{"had_liked":false,"id":97966,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1558855765,"is_pvip":false,"replies":[{"id":"35033","content":"你好 W.LI，刚我debug了下，a和b的value是同一个地址，因为a在常量池中创建了&quot;abc&quot;，而new String(&quot;abc&quot;)时，发现常量池存在&quot;abc&quot;字符串对象，不会创建了。这时通过构造函数String(String original)将常量池中的&quot;abc&quot;复制给value，这里的复制是引用，不是创建新的char[]数组，所以是同一个value地址。<br><br>而c中的构造函数，是新开辟了一个char[]数组：<br> public String(char value[]) {<br>        this.value = Arrays.copyOf(value, value.length);<br> }<br><br>所以value的地址不一样。<br><br>可以再试试，有问题留言。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558869204,"ip_address":"","comment_id":97966,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31623626837","product_id":100028001,"comment_content":"老师好！第一个问题没有描述清楚。String <br>a = ”abc”, String b =new String(&quot;abc&quot;),String c=new String(new char[]{‘a’,‘b’,‘c’}）。创建的String对象。我debug时发现这三个String对象的value指向的那个char数组地址值都是一样的。他们是复用了一个char数组么?还是工具显示问题?我用的idea。","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451495,"discussion_content":"你好 W.LI，刚我debug了下，a和b的value是同一个地址，因为a在常量池中创建了&amp;quot;abc&amp;quot;，而new String(&amp;quot;abc&amp;quot;)时，发现常量池存在&amp;quot;abc&amp;quot;字符串对象，不会创建了。这时通过构造函数String(String original)将常量池中的&amp;quot;abc&amp;quot;复制给value，这里的复制是引用，不是创建新的char[]数组，所以是同一个value地址。\n\n而c中的构造函数，是新开辟了一个char[]数组：\n public String(char value[]) {\n        this.value = Arrays.copyOf(value, value.length);\n }\n\n所以value的地址不一样。\n\n可以再试试，有问题留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558869204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97743,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1140494,"ip_address":"","ucode":"8FFC6764ED327B","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/0e/2a51a2df.jpg","comment_is_top":false,"comment_ctime":1558760968,"is_pvip":true,"replies":[{"id":"34931","content":"我们可以看到0 new，即是生成了一个对象，这个对象是在堆内存用创建的，之后4 Idc则是将常量池中创建的字符串abc压入栈中，invokespecial调用构造方法复制abc字符串到对象中，invokevirtual调用intern本地方法，返回常量池中的对象引用给s1。<br><br>new String(&quot;abc&quot;)是会创建两个对象的，一个是堆对象，一个是常量池中的对象，intern会去判断常量池中是否有，这个时候是有的，所以不会创建，而是改变s1的引用。<br><br>不知道这样是否更好理解？<br><br>","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558769905,"ip_address":"","comment_id":97743,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31623532040","product_id":100028001,"comment_content":"String s1 = new String(&quot;abc&quot;).intern()<br><br>Code:<br>       0: new           #2                  &#47;&#47; class java&#47;lang&#47;String<br>       3: dup<br>       4: ldc           #3                  &#47;&#47; String abc<br>       6: invokespecial #4                  &#47;&#47; Method java&#47;lang&#47;String.&quot;&lt;init&gt;&quot;:(Ljava&#47;lang&#47;String;)V<br>       9: invokevirtual #5                  &#47;&#47; Method java&#47;lang&#47;String.intern:()Ljava&#47;lang&#47;String;<br>      12: astore_1<br>      13: return<br><br>9:invokevirtual的时候 常量池里面应该早就有了”abc“这个字符串常量了吧 为什么文中说的是先去堆中创建一个String对象 然后再去常量池创建一个字符串常量? 我理解错误了吗?<br>","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451398,"discussion_content":"我们可以看到0 new，即是生成了一个对象，这个对象是在堆内存用创建的，之后4 Idc则是将常量池中创建的字符串abc压入栈中，invokespecial调用构造方法复制abc字符串到对象中，invokevirtual调用intern本地方法，返回常量池中的对象引用给s1。\n\nnew String(&amp;quot;abc&amp;quot;)是会创建两个对象的，一个是堆对象，一个是常量池中的对象，intern会去判断常量池中是否有，这个时候是有的，所以不会创建，而是改变s1的引用。\n\n不知道这样是否更好理解？\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558769905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97706,"user_name":"建国","can_delete":false,"product_type":"c1","uid":1242847,"ip_address":"","ucode":"A077B3AFB307A0","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/df/a576bfce.jpg","comment_is_top":false,"comment_ctime":1558752316,"is_pvip":false,"replies":[{"id":"34921","content":"实际编码中，我们要结合实际场景来选择创建字符串的方式，例如，在创建局部变量以及常量时，我们一般使用A的这种方式；如果我们要区别一个字符串创建两个不同的对象来使用时，会选择B；intern一般使用的比较少，例如我们平时会创建很多一样的字符串的对象时，且对象会保存在内存中，我们可以考虑使用intern方法来减少过多重复对象占用内存空间。<br><br>","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558755149,"ip_address":"","comment_id":97706,"utype":1}],"discussion_count":3,"race_medal":0,"score":"31623523388","product_id":100028001,"comment_content":"在实际编码中我们应该使用什么方式创建字符传呢？<br>A.String str= &quot;abcdef&quot;;<br>B.String str= new String(&quot;abcdef&quot;);<br>C.String str= new String(&quot;abcdef&quot;). intern();<br>D.String str1=str.intern();<br>","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451380,"discussion_content":"实际编码中，我们要结合实际场景来选择创建字符串的方式，例如，在创建局部变量以及常量时，我们一般使用A的这种方式；如果我们要区别一个字符串创建两个不同的对象来使用时，会选择B；intern一般使用的比较少，例如我们平时会创建很多一样的字符串的对象时，且对象会保存在内存中，我们可以考虑使用intern方法来减少过多重复对象占用内存空间。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558755149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":125125,"discussion_content":"intern 的作用是返回常量池的引用，当你使用 new String() 创建的创建对象是返回的堆中的对象引用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578475536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1467234,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/BpprxVMjsB0Ok4wGunDLHOLEI9wJX5HIEVsqs2EaXpuODfM7tuiaNfjPcxKWc60TwTaJnTuSicGMicib4r4um02qicQ/132","nickname":"Geek_c33c8e","note":"","ucode":"A5B70E0A346BDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1473,"discussion_content":"String a=&#34; aa&#34;，这种方式创建，aa字符串会被回收，还是一直存在于常量池中？既然String a=&#34; aa&#34;这种方式会把aa字符串加入到常量池，那intern的作用好像没用了啊，不用这个方法，也可以达到添加到常量池的目的，这里有疑惑，还请大佬解答下呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562646302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107454,"user_name":"benben","can_delete":false,"product_type":"c1","uid":1252689,"ip_address":"","ucode":"BE4B2733FB3F54","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/51/6eb096ba.jpg","comment_is_top":false,"comment_ctime":1561538360,"is_pvip":true,"replies":[{"id":"39344","content":"是的，运行时动态创建是在堆内存中直接创建的，调用intern方法，会反倒常量池中。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1561860940,"ip_address":"","comment_id":107454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18741407544","product_id":100028001,"comment_content":"请教最后一张图第三列的意思是对象成员变量是string的话不会放到常量池是吗？","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455515,"discussion_content":"是的，运行时动态创建是在堆内存中直接创建的，调用intern方法，会反倒常量池中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561860940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112185,"user_name":"水月","can_delete":false,"product_type":"c1","uid":1358433,"ip_address":"","ucode":"4544211FE56323","user_header":"https://static001.geekbang.org/account/avatar/00/14/ba/61/99e3e2ad.jpg","comment_is_top":false,"comment_ctime":1562679912,"is_pvip":false,"replies":[{"id":"41144","content":"共享一个类，减少在不同的类中重复创建location的信息。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562895946,"ip_address":"","comment_id":112185,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14447581800","product_id":100028001,"comment_content":"老师请教一个问题，通过抽离出单独类SharedLocation，存储减到了20G，麻烦解析下原理？","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457613,"discussion_content":"共享一个类，减少在不同的类中重复创建location的信息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562895946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105898,"user_name":"Hammy","can_delete":false,"product_type":"c1","uid":1256838,"ip_address":"","ucode":"9FF68F2D9BE174","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/86/ffc4d749.jpg","comment_is_top":false,"comment_ctime":1561101781,"is_pvip":false,"replies":[{"id":"71180","content":"&quot;张三&quot;是常量，而不是一个对象，所以会有问题。我们可以使用外部传值的方式试试。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1583157642,"ip_address":"","comment_id":105898,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14446003669","product_id":100028001,"comment_content":"老师您好，我这里有一个疑问。在听您说完，对象的string属性实质上在运行中是在堆内存中创建而不是引用常量池的时候如雷贯耳一般，觉得自己之前根本没思考过这个问题，完全没想过用intern进行优化。但是我做了一个实验，public class Person {<br><br>    public String name;<br><br><br><br>    public void setName(String name) {<br>        this.name = name;<br>    }<br><br>    public String getName() {<br>        return name;<br>    }<br><br><br>    public static void main(String[] args) {<br>        Person person1 = new Person();<br>        person1.setName(&quot;张三&quot;);<br>        Person person2 = new Person();<br>        person2.setName(&quot;张三&quot;);<br>        System.out.println(person1.name==person2.name);<br><br>    }<br>这段代码中，我理解如果string是在运行过程中在堆内存生成对象，那么结果应该是false，但是返回的结果是true。这是我的一个疑惑，劳烦老师帮忙看一下我的测试代码哪里不对，还是有理解错误的地方。","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454856,"discussion_content":"&amp;quot;张三&amp;quot;是常量，而不是一个对象，所以会有问题。我们可以使用外部传值的方式试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583157642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083504,"avatar":"https://static001.geekbang.org/account/avatar/00/10/88/70/32534e2d.jpg","nickname":"David Mo","note":"","ucode":"66C30A3CD7EDA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4553,"discussion_content":"你的解释是不对的。 首先 person1 name的是传入一个常量字符串的值，person1.name 是一个引用，指向字符串的对象。  person2.setName的时候也是传入同一个常量字符串，他们的引用都是指向同一个一个字符串常量（在堆中），所以是同一个对象。\n\n如果你该 person2.setName(new String(&#34;张三&#34;)) 他们就不是同一对象，会返回false.\n\n老师都说了 == 是判断是不是同一个对象， equals才是比较","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565536633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1256838,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2d/86/ffc4d749.jpg","nickname":"Hammy","note":"","ucode":"9FF68F2D9BE174","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1083504,"avatar":"https://static001.geekbang.org/account/avatar/00/10/88/70/32534e2d.jpg","nickname":"David Mo","note":"","ucode":"66C30A3CD7EDA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102271,"discussion_content":"谢谢回复，明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577335219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4553,"ip_address":""},"score":102271,"extra":""}]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3642,"discussion_content":"你把其中一个张三换成李四试试。你这个和内存没啥关系，纯字符串的值比较。&#34;张三&#34;==&#34;张三&#34;。这肯定是true啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564652792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100836,"user_name":"西门吹水之城","can_delete":false,"product_type":"c1","uid":1113756,"ip_address":"","ucode":"DCFCA1AACDA4D9","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/9c/c29c44e9.jpg","comment_is_top":false,"comment_ctime":1559650904,"is_pvip":false,"replies":[{"id":"36384","content":"b是在类加载时，放入到常量池中。其他地方理解没问题。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559695994,"ip_address":"","comment_id":100836,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14444552792","product_id":100028001,"comment_content":"老师您好，看下面的留言，您看我这这么理解对吗？<br><br>String b=new String(“abc”);<br>for(int i=0;i&lt;10;i++)｛<br>   String c=new String(i+“”);<br>｝<br>上面的代码中，b和c是不同的，b在编译的时候会将abc放入常量池中，b引用的堆内存，堆内存引用常量池。c在编译时候没有字符串，在运行的时候，会直接存入内存中，不会将字符串放入常量池。这样解释可以吗？<br>","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452699,"discussion_content":"b是在类加载时，放入到常量池中。其他地方理解没问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559695994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99712,"user_name":"° BugMaker","can_delete":false,"product_type":"c1","uid":1243173,"ip_address":"","ucode":"35D3DA9183085D","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/25/b871832f.jpg","comment_is_top":false,"comment_ctime":1559283662,"is_pvip":false,"replies":[{"id":"35837","content":"你好，如果我们的数据对查询速度没有这么高要求，可以考虑使用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559306966,"ip_address":"","comment_id":99712,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14444185550","product_id":100028001,"comment_content":"刘老师您好!&quot;使用 intern 方法需要注意的一点是，一定要结合实际场景。因为常量池的实现是类似于一个 HashTable 的实现方式，HashTable 存储的数据越大，遍历的时间复杂度就会增加。如果数据过大，会增加整个字符串常量池的负担&quot;,那这个Twitter 工程师在 QCon 全球软件开发大会上的演讲的那个 intern 方法是如何做到遍历这么多常量池的数据，同时保证性能的呢?","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452236,"discussion_content":"你好，如果我们的数据对查询速度没有这么高要求，可以考虑使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559306966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98024,"user_name":"大海","can_delete":false,"product_type":"c1","uid":1131969,"ip_address":"","ucode":"8B34103C40D3D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/c1/d1dc5e19.jpg","comment_is_top":false,"comment_ctime":1558876449,"is_pvip":false,"replies":[{"id":"35110","content":"最终实现达到的结果是一样的，但过程不一样。我拿这个例子来说明，在程序运行期间动态创建的字符串对象，由于这类字符串是在内存中开辟的地址空间存放字符串，可以使用intern方法放在常量池中。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558921999,"ip_address":"","comment_id":98024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14443778337","product_id":100028001,"comment_content":"String s = new String(&quot;abc&quot;).intern();<br>既然使用intern也会引用到常量池,那么和 使用intern 和 直接使用 String s = &quot;abc&quot;有差别吗","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451522,"discussion_content":"最终实现达到的结果是一样的，但过程不一样。我拿这个例子来说明，在程序运行期间动态创建的字符串对象，由于这类字符串是在内存中开辟的地址空间存放字符串，可以使用intern方法放在常量池中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558921999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97799,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1140494,"ip_address":"","ucode":"8FFC6764ED327B","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/0e/2a51a2df.jpg","comment_is_top":false,"comment_ctime":1558779016,"is_pvip":true,"replies":[{"id":"34992","content":"如果是需要按照创建顺序来讲，常量“abc”，则会在加载编译时构造常量池时在常量池中创建“abc”字符串对象，而new对象的构造函数是在运行时创建并复制常量池中的“abc”。还有一个运行时常量池，也就是说，在运行时创建的字符串对象，通过intern方法会在运行时常量池中创建字符串对象。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558828990,"ip_address":"","comment_id":97799,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14443680904","product_id":100028001,"comment_content":"我在《Java虚拟机规范》里面看到一句话 这句话是当类或接口创建时，它的二进制表示中的常量池表被用来构造运行时常量池 我理解的意思是 类或接口 创建时就根据.class文件的常量池表生成了运行时常量池 执行new String(&quot;abc&quot;)这行代码应该只会生成一个String对象 并且调用它的构造函数 参数是运行时常量池里面&quot;abc&quot;字符串常量的Reference类型的数据（可以理解为指针吧）怎么会在这行代码执行的时候才会在运行时常量池生成”abc“对象呢？","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451427,"discussion_content":"如果是需要按照创建顺序来讲，常量“abc”，则会在加载编译时构造常量池时在常量池中创建“abc”字符串对象，而new对象的构造函数是在运行时创建并复制常量池中的“abc”。还有一个运行时常量池，也就是说，在运行时创建的字符串对象，通过intern方法会在运行时常量池中创建字符串对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558828990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4778,"discussion_content":"老师最后一句运行时常量池，你说的是1.6吧，1.7不是可以返回堆中的引用吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565717264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144281,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1571887350,"is_pvip":false,"replies":[{"id":"56520","content":"假设有以下代码：<br>String a1 = &quot;11&quot;;<br>String a2 = new String(&quot;11&quot;) ；<br>String a3 = a2.intern()；<br>System.out.println(a1==a2);<br>System.out.println(a2==a3);<br>System.out.println(a3==a1);<br><br>以上代码，在JDK1.7以上，运行的结果为：<br>false<br>false<br>true<br>这是为什么呢？<br><br>这是因为String a1 = &quot;11&quot;中的 &quot;11&quot; 是一个常量，类加载时，该常量的字面量会保存在静态常量池中，也就是堆中，当类初始化时，该常量的引用会加载到运行常量池中，这就是“把首次遇到的字符串的引用添加到常量池中。<br><br>而 String a2 = new String(&quot;11&quot;) 则会在运行生成一个new String(&quot;11&quot;)对象，如果调用String a3 = a2.intern()，此时a2会判断运行常量池中已经存在字面量为&quot;11&quot;的引用了，则会直接返回&quot;11&quot;的引用，所以实际上a3的引用就是a1的引用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1572520094,"ip_address":"","comment_id":144281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10161821942","product_id":100028001,"comment_content":"老师这里讲的首次遇到的引用添加到常量池中，能举个例子吗？<br><br>在 JDK1.7 版本以后，由于常量池已经合并到了堆中，所以不会再复制具体字符串了，只是会把首次遇到的字符串的引用添加到常量池中；如果有，就返回常量池中的字符串引用","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471873,"discussion_content":"假设有以下代码：\nString a1 = &amp;quot;11&amp;quot;;\nString a2 = new String(&amp;quot;11&amp;quot;) ；\nString a3 = a2.intern()；\nSystem.out.println(a1==a2);\nSystem.out.println(a2==a3);\nSystem.out.println(a3==a1);\n\n以上代码，在JDK1.7以上，运行的结果为：\nfalse\nfalse\ntrue\n这是为什么呢？\n\n这是因为String a1 = &amp;quot;11&amp;quot;中的 &amp;quot;11&amp;quot; 是一个常量，类加载时，该常量的字面量会保存在静态常量池中，也就是堆中，当类初始化时，该常量的引用会加载到运行常量池中，这就是“把首次遇到的字符串的引用添加到常量池中。\n\n而 String a2 = new String(&amp;quot;11&amp;quot;) 则会在运行生成一个new String(&amp;quot;11&amp;quot;)对象，如果调用String a3 = a2.intern()，此时a2会判断运行常量池中已经存在字面量为&amp;quot;11&amp;quot;的引用了，则会直接返回&amp;quot;11&amp;quot;的引用，所以实际上a3的引用就是a1的引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572520094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143017,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1515145,"ip_address":"","ucode":"0EF2D58B46D7C3","user_header":"https://static001.geekbang.org/account/avatar/00/17/1e/89/25b12054.jpg","comment_is_top":false,"comment_ctime":1571620252,"is_pvip":false,"replies":[{"id":"55864","content":"对的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1572082041,"ip_address":"","comment_id":143017,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10161554844","product_id":100028001,"comment_content":"String str = new String(&quot;abc&quot;);这个语句会在字符串常量池中和堆中都生成变量，但str指向堆中的变量；如果调用intern方法，则str指向字符串常量池中的变量，此时堆中的变量会被垃圾回收。  请问老师o(^o^)o我的理解对不？","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471351,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572082041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126864,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1566496627,"is_pvip":false,"replies":[{"id":"50387","content":"这里分两段来理解，前一段是&quot;abc&quot;常量在静态常量池中创建，并将引用存放在运行时常量池中，后一段则是new string对象的创建，此对象是在堆中创建的，该对象的字符串是复制的常量&quot;abc&quot;中的字符串，返回堆中对象的引用给a。所以是创建了两个对象。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567946911,"ip_address":"","comment_id":126864,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10156431219","product_id":100028001,"comment_content":"在字符串常量中，默认会将对象放入常量池；在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，复制到堆内存对象中，并返回堆内存对象引用。<br><br><br>首先将对象放进常量池，记为a1 <br>同时堆内存又创建了个对象，记为a2<br>同时也会在常量池创建一个对象，记为a3<br>同时复制到堆内存对象中(请问复制的是什么？)，这个过程创建了3个对象？","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464209,"discussion_content":"这里分两段来理解，前一段是&amp;quot;abc&amp;quot;常量在静态常量池中创建，并将引用存放在运行时常量池中，后一段则是new string对象的创建，此对象是在堆中创建的，该对象的字符串是复制的常量&amp;quot;abc&amp;quot;中的字符串，返回堆中对象的引用给a。所以是创建了两个对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567946911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110662,"user_name":"ZOU志伟","can_delete":false,"product_type":"c1","uid":1029179,"ip_address":"","ucode":"439779871CC992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b4/3b/a1f7e3a4.jpg","comment_is_top":false,"comment_ctime":1562311613,"is_pvip":false,"replies":[{"id":"40393","content":"如果是字符串常量，是在常量池中创建字符串。假如是应用服务运行期间，通过数据库查询出的字符串，则不会在常量池中创建，而是在堆内存中创建。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562465766,"ip_address":"","comment_id":110662,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10152246205","product_id":100028001,"comment_content":"老师，有点不明白，intern()方法无论调用不调用，常量池都是会创建字符串的，hashTable都是会增大，何来谨慎使用？","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456993,"discussion_content":"如果是字符串常量，是在常量池中创建字符串。假如是应用服务运行期间，通过数据库查询出的字符串，则不会在常量池中创建，而是在堆内存中创建。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562465766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102302,"user_name":"Mr.J","can_delete":false,"product_type":"c1","uid":1267172,"ip_address":"","ucode":"372D8C614F6C3D","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/e4/7061abd5.jpg","comment_is_top":false,"comment_ctime":1560183282,"is_pvip":false,"replies":[{"id":"37320","content":"这里纠正下，不是复制，而且赋值引用常量池中的字符串。常量池不会创建重复的字符串对象，所以只有一个abc字符串。所以你的第二个问题就是返回的常量池中的abc，不是属于谁的，它可以被大家引用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560390197,"ip_address":"","comment_id":102302,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10150117874","product_id":100028001,"comment_content":"老师，String str1 = “abc”；String str2 = new String(“abc”)；str1对象存放在常量池，str1对象是指向常量池的引用，str2对象是在堆内存创建了对象，指向堆内存，同时会将“abc”复制到常量池？这个时候常量池中存着几个“abc”，两个？调用String str3 = str2.intern()方法，返回的是str1的常量？还是str2的","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453349,"discussion_content":"这里纠正下，不是复制，而且赋值引用常量池中的字符串。常量池不会创建重复的字符串对象，所以只有一个abc字符串。所以你的第二个问题就是返回的常量池中的abc，不是属于谁的，它可以被大家引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560390197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99462,"user_name":"空","can_delete":false,"product_type":"c1","uid":1251020,"ip_address":"","ucode":"2EFDF0C24DFECD","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/cc/78a21848.jpg","comment_is_top":false,"comment_ctime":1559222110,"is_pvip":false,"replies":[{"id":"35725","content":"有的，java8字符串常量池是分配到堆中，并不代表字符串常量池就取消了。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559224191,"ip_address":"","comment_id":99462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10149156702","product_id":100028001,"comment_content":"老师，java8还有字符串常量池吗，都整合到堆里面去了吧","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452120,"discussion_content":"有的，java8字符串常量池是分配到堆中，并不代表字符串常量池就取消了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559224191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98019,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1558875114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148809706","product_id":100028001,"comment_content":"回答开篇的问题：<br>str1会在常量池中创建一个对象<br>str2首先会在堆内存中创建一个对象，然后在加载类的时候在常量池创建一个字符串对象，同时复制到堆内存对象中，并返回堆内存对象的引用<br>str3会先去常量池中查看存在于该字符串相等的对象，因为str1已经在常量池创建了一个相同的对象，所以str1和str3相等。<br>综上：str1和str2不相等，str1和str3相等，str2和str3不相等","like_count":2},{"had_liked":false,"id":98009,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1558871185,"is_pvip":false,"replies":[{"id":"35107","content":"char数组是存放在常量池中，常量是会在编译时生成字面量，在类加载时加载到常量池中。<br><br>这个存放位置还是重要的，这就相当于权职划分，每个位置都有自己的功能和职责。<br><br>常量池中的垃圾回收，也是垃圾回收器完成，只要没有根引用的对象，包括类信息等等，都会在回收期被回收掉。常量池中的常量一般是固定的，不像对中的对象。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558921786,"ip_address":"","comment_id":98009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148805777","product_id":100028001,"comment_content":"老师你说的对!直接把char数组做入参创建的String对象里的value数组地址是不一样的。调用intern()方法后就一样了。是我搞错了，然后回到第一个问题的后半部分，我打印输出a==b是false。之前有看到char数组的地址是一样的。这说明new虽然在堆中新建了一个String对象，但是里面的char数组是复用的。这样做的目的是为了节约char数组的内存开销，然后String本身就是不可变对象，复用char数组不会带来问题。问题一:这个char数组是存放在哪的啊?堆还是常量池，其实我不知道常量池具体是个啥，课上老师说的类似hashmap，这样的话就是接近O(1)随机读取。不知道它能不能存char[]。问题二:复用char[]我猜是这么实现的new创建String时会去常量池中查找对应的String存在拿取char[]复用，如果这样的话其实char[]到底存放在哪不太重要。问题三:常量池的内存会回收么?突然觉得自己对常量池一无所知。。。常量池的生命周期一无所知。","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451512,"discussion_content":"char数组是存放在常量池中，常量是会在编译时生成字面量，在类加载时加载到常量池中。\n\n这个存放位置还是重要的，这就相当于权职划分，每个位置都有自己的功能和职责。\n\n常量池中的垃圾回收，也是垃圾回收器完成，只要没有根引用的对象，包括类信息等等，都会在回收期被回收掉。常量池中的常量一般是固定的，不像对中的对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558921786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97967,"user_name":"胖","can_delete":false,"product_type":"c1","uid":1044068,"ip_address":"","ucode":"0EA8F5343CB4F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/64/2646f6ef.jpg","comment_is_top":false,"comment_ctime":1558855946,"is_pvip":false,"replies":[{"id":"35029","content":"再补充一种，在new String(&quot;ab&quot;)时，也会创建一份在常量池，堆内存中对象会再引用常量池对象","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558864118,"ip_address":"","comment_id":97967,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148790538","product_id":100028001,"comment_content":"会在常量池存储字符串对象的时机<br>1.  调用String的intern;<br>2. 声明字符串字面常量;<br>3. 字符串直接常量相加，例如: String c = &quot;a&quot; + &quot;b&quot;; 会在常量池保存&quot;ab&quot;","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451496,"discussion_content":"再补充一种，在new String(&amp;quot;ab&amp;quot;)时，也会创建一份在常量池，堆内存中对象会再引用常量池对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558864118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97850,"user_name":"余火","can_delete":false,"product_type":"c1","uid":1281116,"ip_address":"","ucode":"59C3CB4FDF24A6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDfO7wKibzpww2icZyfJD2YIC3icQZ0864nbpBy9OfGKAI2JWab5yibUYibPCQlexAmufJpcBIBWngia2A/132","comment_is_top":false,"comment_ctime":1558794820,"is_pvip":false,"replies":[{"id":"35035","content":"你好余火，我们在类对象中的String属性是在堆内存中开辟的地址空间，所以如果不用intern方法，新生产的对象中的String字段的属性是引用堆内存的地址，而堆内存中创建的字段即使value值一样也会开辟新地址空间。如果使用intern方法，则会引用常量池中的引用，而如果常量池中如果存在字符串对象，则复用，不会再创建了。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558869528,"ip_address":"","comment_id":97850,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148729412","product_id":100028001,"comment_content":"String s1=&quot;123&quot;;字符串&quot;123&quot;已经被放入常量池，那要定义一个和s1一样的，用String s2=s1;不就好了，为什么还要用intern方法。推特的那个优化也一样，setCity(messageInfo.getCity())就好了，为什么要用intern呢，这里有些不懂，请老师指教一下，多谢。","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451451,"discussion_content":"你好余火，我们在类对象中的String属性是在堆内存中开辟的地址空间，所以如果不用intern方法，新生产的对象中的String字段的属性是引用堆内存的地址，而堆内存中创建的字段即使value值一样也会开辟新地址空间。如果使用intern方法，则会引用常量池中的引用，而如果常量池中如果存在字符串对象，则复用，不会再创建了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558869528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97832,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1558790303,"is_pvip":false,"replies":[{"id":"35036","content":"正是因为final，字符串才实现了不可变性，String内部的value已经被final修饰，所以我们不用再在编码时用final修饰。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558869680,"ip_address":"","comment_id":97832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148724895","product_id":100028001,"comment_content":"final 标示的一般为常量，按照老师说的 new String(&quot;abc&quot;).intern() 在常量池中也存在 abc，String str1 = &quot;abc&quot;;通过字面量的方式创建，abc存储于字符串常量池中；是不是说用不用 final 都无所谓了？？请帮忙详细解答一下，谢谢！！！ ","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451443,"discussion_content":"正是因为final，字符串才实现了不可变性，String内部的value已经被final修饰，所以我们不用再在编码时用final修饰。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558869680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97739,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1558759111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148693703","product_id":100028001,"comment_content":"老师讲的挺到位的，挺容易理解，之前忘记的现在又被老师点出来了，支持老师😁","like_count":2},{"had_liked":false,"id":113703,"user_name":"格非","can_delete":false,"product_type":"c1","uid":1004569,"ip_address":"","ucode":"89FABFFC377131","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/19/95ff4cbd.jpg","comment_is_top":false,"comment_ctime":1563122162,"is_pvip":false,"replies":[{"id":"41788","content":"方法区和堆只是一种逻辑分区，是一种规范。方法区中的一部分是在物理堆内存空间的，而另外一部分则是在本地内存中。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1563329755,"ip_address":"","comment_id":113703,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858089458","product_id":100028001,"comment_content":"很想知道，字符串常量是如何进入到String Pool中的，class文件的字符串常量会放在常量池中，在类加载后，会进入运行时常量池，运行时常量池又是方法区的一部分，但是String Pool在jdk7之后是在堆上分配的，方法区和堆应该是物理上隔离的两块内存区域，那么这个字符串常量是如何进入到堆中的呢？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458351,"discussion_content":"方法区和堆只是一种逻辑分区，是一种规范。方法区中的一部分是在物理堆内存空间的，而另外一部分则是在本地内存中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563329755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111979,"user_name":"Geek_c33c8e","can_delete":false,"product_type":"c1","uid":1467234,"ip_address":"","ucode":"A5B70E0A346BDC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BpprxVMjsB0Ok4wGunDLHOLEI9wJX5HIEVsqs2EaXpuODfM7tuiaNfjPcxKWc60TwTaJnTuSicGMicib4r4um02qicQ/132","comment_is_top":false,"comment_ctime":1562646596,"is_pvip":false,"replies":[{"id":"40860","content":"这里是字符串常量，而在运行时字符串对象创建时，是不会放到常量池中的。这个时候使用intern可以将字符串在运行时常量池中创建。<br><br>如果还有疑惑，可以先看下21讲。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562723455,"ip_address":"","comment_id":111979,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5857613892","product_id":100028001,"comment_content":"String a=&quot; aa&quot;，这种方式创建，aa字符串会被回收，还是一直存在于常量池中？既然String a=&quot; aa&quot;这种方式会把aa字符串加入到常量池，那intern的作用好像没用了啊，不用这个方法，也可以达到添加到常量池的目的，这里有疑惑，还请大佬解答下呗","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457529,"discussion_content":"这里是字符串常量，而在运行时字符串对象创建时，是不会放到常量池中的。这个时候使用intern可以将字符串在运行时常量池中创建。\n\n如果还有疑惑，可以先看下21讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562723455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1467234,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/BpprxVMjsB0Ok4wGunDLHOLEI9wJX5HIEVsqs2EaXpuODfM7tuiaNfjPcxKWc60TwTaJnTuSicGMicib4r4um02qicQ/132","nickname":"Geek_c33c8e","note":"","ucode":"A5B70E0A346BDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2002,"discussion_content":"public class CommonTest {\n  private static String strss = &#34;1&#34;; //A处\n  private static String strss1 = &#34;1&#34;; //B处\n\n\n  @Test\n  public void test() {\n    String str = &#34;1&#34;; //C处\n    String str1 = &#34;1&#34;;//D处\n    String str2 = new String(&#34;1&#34;);//E处\n    System.out.println((strss == strss1) + &#34;------strss == strss1---------&#34; );\n    System.out.println((strss == str1) + &#34;-----strss == str1------&#34; );\n    System.out.println((str == str1) + &#34;---str == str1-----&#34; );\n    System.out.println((str == str2) + &#34;----str == str2----&#34; );\n  }\n}\ntrue------strss == strss1---------\ntrue-----strss == str1------\ntrue---str == str1-----\nfalse----str == str2----\n老师，ABCD四处是不是还是从常量池取，如果有，直接返回，如果没有，则创建此值加入到常量池中？你说的运行时字符串不会加入到常量池，指的是CD两处的操作吗？如果不会加入的话，应该CD处相等为false，但结果是true，是不是说明他们俩引用的是同一个字符串对象\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563175569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110696,"user_name":"纯风","can_delete":false,"product_type":"c1","uid":1598229,"ip_address":"","ucode":"CCA837A3E9BF2A","user_header":"https://static001.geekbang.org/account/avatar/00/18/63/15/cbbbdba0.jpg","comment_is_top":false,"comment_ctime":1562315974,"is_pvip":false,"replies":[{"id":"40392","content":"你好，纯风。如果不了解JVM内存模型，建议可以留意21讲，这里会详细讲解。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562465690,"ip_address":"","comment_id":110696,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857283270","product_id":100028001,"comment_content":"你好啊  我不了解堆和栈  能不能给我说下  创建的对象在堆中，栈中放的是对象的引用地址吗  还有使用intern()方法   和   创建的对象放在常量池中 这两者是什么关系","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457014,"discussion_content":"你好，纯风。如果不了解JVM内存模型，建议可以留意21讲，这里会详细讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562465690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101122,"user_name":"man1s","can_delete":false,"product_type":"c1","uid":1466953,"ip_address":"","ucode":"FFDB6B52F65A1B","user_header":"https://static001.geekbang.org/account/avatar/00/16/62/49/6332c99b.jpg","comment_is_top":false,"comment_ctime":1559721567,"is_pvip":false,"replies":[{"id":"36483","content":"对的，运行时动态创建的字符串对象只有通过intern才会进入常量池。如果还有疑问，可以复习下常量池的作用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559779810,"ip_address":"","comment_id":101122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854688863","product_id":100028001,"comment_content":"老湿，那个图上最后一种情况是说运行时创建String不使用常量池的空间吗？<br>表示怀疑<br>","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452813,"discussion_content":"对的，运行时动态创建的字符串对象只有通过intern才会进入常量池。如果还有疑问，可以复习下常量池的作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559779810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99910,"user_name":"哇","can_delete":false,"product_type":"c1","uid":1007635,"ip_address":"","ucode":"F7F7AFC99E2240","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/13/efb4ea95.jpg","comment_is_top":false,"comment_ctime":1559357000,"is_pvip":false,"replies":[{"id":"35971","content":"不需要手动设置为null，虚拟机会帮我们自动回收。除非对象占用内存大或方法的栈帧长时间不能被回收的情况，我们手动设置对象为null，能提高回收效率。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559450174,"ip_address":"","comment_id":99910,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854324296","product_id":100028001,"comment_content":"老师，现在还有需要在变量用完后，手动设置变量为null的场景吗？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452320,"discussion_content":"不需要手动设置为null，虚拟机会帮我们自动回收。除非对象占用内存大或方法的栈帧长时间不能被回收的情况，我们手动设置对象为null，能提高回收效率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559450174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99754,"user_name":"Pason","can_delete":false,"product_type":"c1","uid":1109849,"ip_address":"","ucode":"8A522810A02C6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/59/03df5f41.jpg","comment_is_top":false,"comment_ctime":1559292837,"is_pvip":false,"replies":[{"id":"35833","content":"你好 Pason，如果是new String(&quot;abc&quot;)这种方式，就会在编译加载类时在常量池中创建&quot;abc&quot;，在new时，在堆中创建String对象。但在程序运行时动态创建字符串时，只会在堆中创建字符串对象，这个时候就用到intern，就会去常量池创建对象了。<br><br>这样解释能否理解呢？","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559306179,"ip_address":"","comment_id":99754,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854260133","product_id":100028001,"comment_content":"在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，意思是只要创建了字符串变量，就会在常量池中有。那么不是和intern方法矛盾了吗，如果调用 intern 方法，会去查看字符串常量池中是否有等于该对象的字符串，既然前面已经说了创建变量会在常量池中创建，那么intern方法的时候还有必要判断吗？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452256,"discussion_content":"你好 Pason，如果是new String(&amp;quot;abc&amp;quot;)这种方式，就会在编译加载类时在常量池中创建&amp;quot;abc&amp;quot;，在new时，在堆中创建String对象。但在程序运行时动态创建字符串时，只会在堆中创建字符串对象，这个时候就用到intern，就会去常量池创建对象了。\n\n这样解释能否理解呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559306179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98882,"user_name":"张华清","can_delete":false,"product_type":"c1","uid":1212657,"ip_address":"","ucode":"AD7021EF2A0388","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/f1/19c42f40.jpg","comment_is_top":false,"comment_ctime":1559112531,"is_pvip":false,"replies":[{"id":"35569","content":"你好，你理解后半段有一点问题。new String()是在执行代码的时候在堆中创建的对象，但new String(&quot;b&quot;)中的&quot;b&quot;，是在代码编译时，生成了字面量，并且在类加载时，放到了常量池中。在new String之时，会调用String的构造函数引用常量池中的字符串。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559137260,"ip_address":"","comment_id":98882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854079827","product_id":100028001,"comment_content":"老师好，之前我的理解是对于string对象的创建：String a=&quot;a&quot; 这种编译时期创建的对象是放入常量池，然后返回常量池对象引用。对于String b =new String(&quot;b&quot;)这种运行时期创建是放入堆内存的然后返回堆内存对象的引用，不会放入常量池，只有在调用intern方法的时候才会把b放入常量池。 所以对老师的这句话有点疑惑：“在一开始创建 a 变量时，会在堆内存中创建一个对象，同时会在在加载类时，在常量池中创建一个字符串对象”<br>","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451877,"discussion_content":"你好，你理解后半段有一点问题。new String()是在执行代码的时候在堆中创建的对象，但new String(&amp;quot;b&amp;quot;)中的&amp;quot;b&amp;quot;，是在代码编译时，生成了字面量，并且在类加载时，放到了常量池中。在new String之时，会调用String的构造函数引用常量池中的字符串。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559137260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98676,"user_name":"半清醒","can_delete":false,"product_type":"c1","uid":1467843,"ip_address":"","ucode":"119F57A160DD8C","user_header":"https://static001.geekbang.org/account/avatar/00/16/65/c3/5324b326.jpg","comment_is_top":false,"comment_ctime":1559055650,"is_pvip":false,"replies":[{"id":"35333","content":"互联网教学应该是这样的，达到一对一的教学效果，大家在极客时间一起学习成长。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559087963,"ip_address":"","comment_id":98676,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5854022946","product_id":100028001,"comment_content":"这个专栏的老师是我在极客时间上看到最为负责的老师了，每个有疑惑的提问，老师都是认真回答了，不是说别的老师做的不好，而且您做的更好!!另外通过这篇文章也算更加理解String这个类了。","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451783,"discussion_content":"互联网教学应该是这样的，达到一对一的教学效果，大家在极客时间一起学习成长。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559087963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1428043,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ca/4b/c1ace3aa.jpg","nickname":"蚝不鱿鱼","note":"","ucode":"5DB98E406F1D3E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322093,"discussion_content":"没见过，互联网里这么负责的老师，佩服！我要看这个专栏三遍起，上不封顶……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604674380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98606,"user_name":"Nu11PointerEx","can_delete":false,"product_type":"c1","uid":1177802,"ip_address":"","ucode":"D5C19A98F894B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/ca/1a1e190a.jpg","comment_is_top":false,"comment_ctime":1559038934,"is_pvip":false,"replies":[{"id":"35275","content":"在没有引用时，常量池中的对象也会被回收。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559045135,"ip_address":"","comment_id":98606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854006230","product_id":100028001,"comment_content":"老师你好，堆对象在没有可达引用的时候在下一次gc就会被回收，那常量池是什么时候回收的呢？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451751,"discussion_content":"在没有引用时，常量池中的对象也会被回收。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559045135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98363,"user_name":"胖妞","can_delete":false,"product_type":"c1","uid":1543769,"ip_address":"","ucode":"AC82AF2B912575","user_header":"","comment_is_top":false,"comment_ctime":1558968109,"is_pvip":false,"replies":[{"id":"35196","content":"是的，特别用到复杂的正则表达式时，要多留意，可以在校验回溯的网站校验下表达式。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559001499,"ip_address":"","comment_id":98363,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853935405","product_id":100028001,"comment_content":"实际操作字符的时候还真没怎么注意过！因为日常的开发过程中，都是先测试一下能用就直接过去了！以后需要注意了！","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451658,"discussion_content":"是的，特别用到复杂的正则表达式时，要多留意，可以在校验回溯的网站校验下表达式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559001499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98256,"user_name":"码农 布莱恩特","can_delete":false,"product_type":"c1","uid":1475223,"ip_address":"","ucode":"3E9A969D2530D4","user_header":"https://static001.geekbang.org/account/avatar/00/16/82/97/b26628dc.jpg","comment_is_top":false,"comment_ctime":1558942886,"is_pvip":false,"replies":[{"id":"35262","content":"你好 布莱恩特，可以查看下是否有运行的sql阻塞了，可以通过在mysql中执行 show full processlist查看。<br><br>也有可能mysql配置缓存过大，检查下mysql的缓存配置。<br><br><br>","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559042200,"ip_address":"","comment_id":98256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853910182","product_id":100028001,"comment_content":"老师，有个问题请教下，数据库机器内存使用率一直超过80%，我该如何定位和优化","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451619,"discussion_content":"你好 布莱恩特，可以查看下是否有运行的sql阻塞了，可以通过在mysql中执行 show full processlist查看。\n\n也有可能mysql配置缓存过大，检查下mysql的缓存配置。\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559042200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98051,"user_name":"胜","can_delete":false,"product_type":"c1","uid":1542745,"ip_address":"","ucode":"3D813DC2EFE032","user_header":"https://static001.geekbang.org/account/avatar/00/17/8a/59/d5aec34a.jpg","comment_is_top":false,"comment_ctime":1558883685,"is_pvip":false,"replies":[{"id":"36429","content":"看了下Github上也有人遇到跟你一样类似的问题，git上给出的建议是更新到最新版本。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559704194,"ip_address":"","comment_id":98051,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853850981","product_id":100028001,"comment_content":"老师我今天遇到一个问题，请教一下使用fast json的JSONObject.parseObject(ss,parameterizedType)时产生过多IdentityHashMap.Entry导致内存泄露，请问该怎么解决？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451536,"discussion_content":"看了下Github上也有人遇到跟你一样类似的问题，git上给出的建议是更新到最新版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559704194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97862,"user_name":"some_bird","can_delete":false,"product_type":"c1","uid":1545794,"ip_address":"","ucode":"9328FB780686E2","user_header":"https://static001.geekbang.org/account/avatar/00/17/96/42/00456f92.jpg","comment_is_top":false,"comment_ctime":1558798688,"is_pvip":false,"replies":[{"id":"34996","content":"你好 some_bird，指向队中创建的内存对象，我们可以通过反编译字节码文件，可以发现在创建完对象，通过JVM返回指令返回的是在内存中创建的对象引用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558830634,"ip_address":"","comment_id":97862,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853765984","product_id":100028001,"comment_content":"关于字符串：String str2= new String(&quot;abc&quot;) 中变量str2在栈中指向了堆中一个存储了内容为”abc“的对象，还是指向了堆中存放地址（指向字符串常量池中&quot;abc”的地址）的对象","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451454,"discussion_content":"你好 some_bird，指向队中创建的内存对象，我们可以通过反编译字节码文件，可以发现在创建完对象，通过JVM返回指令返回的是在内存中创建的对象引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558830634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97808,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1558781893,"is_pvip":false,"replies":[{"id":"34999","content":"这位同学 你好 ，不好意思呀，我没有理解你的第一个问题，你在问substring在java8创建新对象的问题吗？<br><br>常量池放在堆中，是为了解决之前放在方法区时，由于常量池空间大小有限，存储对象过多导致内存溢出问题。也会存在垃圾回收，但与堆的垃圾回收不一样，这里不会进入老年代，而是直接回收。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558837649,"ip_address":"","comment_id":97808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853749189","product_id":100028001,"comment_content":"老师好!jdk8环境下，观察了下。不管是直接赋值还是new创建新对象，String对象的value对应的char数组地址都是同一个，这么做就是不论字符串多大，重复new只会多消耗string对象必须得的16字节内存是么?。jdk8以前常量池在方法区中，属于永久代，GC不会回收这一部分空间是么?jdk8对常量池做了改动，放在了堆中，在堆中会被GC回收。我想知道为啥要做这个调整。常量池也是在新生代创建，然后几次ygc以后进入老年代么?","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451431,"discussion_content":"这位同学 你好 ，不好意思呀，我没有理解你的第一个问题，你在问substring在java8创建新对象的问题吗？\n\n常量池放在堆中，是为了解决之前放在方法区时，由于常量池空间大小有限，存储对象过多导致内存溢出问题。也会存在垃圾回收，但与堆的垃圾回收不一样，这里不会进入老年代，而是直接回收。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558837649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97784,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1140494,"ip_address":"","ucode":"8FFC6764ED327B","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/0e/2a51a2df.jpg","comment_is_top":false,"comment_ctime":1558772522,"is_pvip":true,"replies":[{"id":"34935","content":"你好 Eric，从反编译文件可以看出， 字符串“abc”在编译时，已在常量池中创建，这个没问题。如果是变量，这个需要在运行时在常量池中创建。<br><br>Idc是JVM的入栈指令，在这里会将常量池中的“abc”入栈，invokespecial是JVM调用构造函数的指令，此时会调用String的构造函数，“abc”作为参数。之后通过出栈指令返回引用给s1。<br><br>大概就是这个流程，有疑问欢迎一起探讨。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558776578,"ip_address":"","comment_id":97784,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853739818","product_id":100028001,"comment_content":"当类或接口创建时 会根据. class文件里面的常量池表构造运行时常量池 可以认为在调用new String(&quot;abc&quot;)很早很早之前 运行时常量池已经有了abc这个字符串常量吗？ 这里ldc只是把对应的字符串常量的reference类型的数据压栈 作为后面的invokespecial指令来调用构造方法的第一个参数？ 理解为ldc指令时在运行时常量池创建abc字符串常量是否合适？还是我的理解存在错误？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451418,"discussion_content":"你好 Eric，从反编译文件可以看出， 字符串“abc”在编译时，已在常量池中创建，这个没问题。如果是变量，这个需要在运行时在常量池中创建。\n\nIdc是JVM的入栈指令，在这里会将常量池中的“abc”入栈，invokespecial是JVM调用构造函数的指令，此时会调用String的构造函数，“abc”作为参数。之后通过出栈指令返回引用给s1。\n\n大概就是这个流程，有疑问欢迎一起探讨。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558776578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97763,"user_name":"Stalary","can_delete":false,"product_type":"c1","uid":1101749,"ip_address":"","ucode":"F69AFF7C958D31","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/b5/d1ec6a7d.jpg","comment_is_top":false,"comment_ctime":1558768486,"is_pvip":false,"replies":[{"id":"34944","content":"你好 Stalary，对的，虽然这种方式比split方法多一些代码，但在某些情况下性能要比split方法好","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558788568,"ip_address":"","comment_id":97763,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853735782","product_id":100028001,"comment_content":"老师，请问indexOf替换Split意思是先indexOf找到切割点再用subString吗？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451405,"discussion_content":"你好 Stalary，对的，虽然这种方式比split方法多一些代码，但在某些情况下性能要比split方法好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558788568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97724,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1558755925,"is_pvip":false,"replies":[{"id":"34948","content":"你好 WL，下一讲我将会详细讲正则表达式的回溯。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558789498,"ip_address":"","comment_id":97724,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853723221","product_id":100028001,"comment_content":"请问老师啥叫正则表达式的回溯问题, 为啥会产生回溯问题, 在网上找了半天资料没太看懂","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451386,"discussion_content":"你好 WL，下一讲我将会详细讲正则表达式的回溯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558789498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97684,"user_name":"小辉辉","can_delete":false,"product_type":"c1","uid":1189661,"ip_address":"","ucode":"9FF25E25C85350","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/1d/1cb36854.jpg","comment_is_top":false,"comment_ctime":1558749342,"is_pvip":false,"replies":[{"id":"34915","content":"理解到位！","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558753284,"ip_address":"","comment_id":97684,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853716638","product_id":100028001,"comment_content":"false  false  true ，第一个和第二个为false是因为比的是堆和常量池两个不同的对象，第三个为true因为比的是常量池中同一个对象。","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451371,"discussion_content":"理解到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558753284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97626,"user_name":"和你一起搬砖的胡大爷","can_delete":false,"product_type":"c1","uid":1008587,"ip_address":"","ucode":"54607F4E17917A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/cb/7c004188.jpg","comment_is_top":false,"comment_ctime":1558716444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853683740","product_id":100028001,"comment_content":"老师把基础撸一遍再讲工具技巧是蛮好的","like_count":1},{"had_liked":false,"id":360373,"user_name":"铿然","can_delete":false,"product_type":"c1","uid":1162461,"ip_address":"江苏","ucode":"D529242EC2E2EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/dd/c9413f59.jpg","comment_is_top":false,"comment_ctime":1666518194,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666518194","product_id":100028001,"comment_content":"如果一直都式用 str = &quot;江苏&quot; + &quot;南京&quot;这种方式来赋值，那么什么场景下还会用到String.intern()方法 ?<br><br>如果都没有场景需要使用，了解intern反而增加负担，只需要总结使用 常量相加就可以了。","like_count":0},{"had_liked":false,"id":357173,"user_name":"周周周文阳          ༽","can_delete":false,"product_type":"c1","uid":2363895,"ip_address":"江苏","ucode":"2D4C90627C1351","user_header":"https://static001.geekbang.org/account/avatar/00/24/11/f7/bb8f1a19.jpg","comment_is_top":false,"comment_ctime":1663035878,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663035878","product_id":100028001,"comment_content":"关于Twitter那个案例，如果所有的字符串都是使用 String str = &quot;hello&quot; 的方式创建，那是否意味着他使用intern()并不能优化。换句话讲，Twitter那个案例，是因为他们在创建字符串时使用的是 new String()方式创建的字符串。<br>另外，字符串常量池的对象 会有gc吗？","like_count":0},{"had_liked":false,"id":349875,"user_name":"走路顺拐","can_delete":false,"product_type":"c1","uid":1987040,"ip_address":"","ucode":"82D19A53DCB14E","user_header":"","comment_is_top":false,"comment_ctime":1656400418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656400418","product_id":100028001,"comment_content":"请教一下：为什么把省市区单独拎出一个类就节省内存了","like_count":0},{"had_liked":false,"id":349561,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1656066188,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656066188","product_id":100028001,"comment_content":"String a = new String(&quot;abc&quot;);<br>String b =&quot;abc&quot;;<br>编译过程中:会将“abc”放入常量池，变量a指向的对象其实不是“abc”而是对常量池中char[]的引用。所以虽然打印ab都是“abc”，但是它们指向的不是同一块内存空间。而当a.intern();后a的引用被直接指向了常量池中“abc”。所以此时a==b，new的对象由于没有引用会被回收调;<br>运行时：动态new一个字符串对象，对象内存中存放的就是“abc”，没有去引用常量池，常量池里面也没有“abc”，当然由于a和b指向的内存空间也是不相同的，所以此时a != b。也只有别的对象用a.intern();后a==b。","like_count":0},{"had_liked":false,"id":348958,"user_name":"红色十号","can_delete":false,"product_type":"c1","uid":3018793,"ip_address":"","ucode":"CE3E02F52A09C8","user_header":"https://static001.geekbang.org/account/avatar/00/2e/10/29/6f6beaf5.jpg","comment_is_top":false,"comment_ctime":1655608685,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655608685","product_id":100028001,"comment_content":"String str1= &quot;abc&quot;;<br>String str2= new String(&quot;abc&quot;);<br>String str3= str2.intern();<br>老师 这里的str1指向的还是str2里的数组里的还是str3指向的“abc”都是常量池里的同一个吧","like_count":0},{"had_liked":false,"id":345527,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1652357376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652357376","product_id":100028001,"comment_content":"刚开始我以为对象的内存地址就是hashCode我发现我错了<br>    String a = &quot;abc&quot;;<br>    String b = new String(&quot;abc&quot;);<br>    String c = b.intern();<br>发现这三个变量打印出的hashCode是一样的，而“b==c”却是false。才想起，只有Object的hashCode才是真正的内存地址，而String的hashCode是重写了的。<br>用System.identityHashCode(a)取得的hashCode才是真正的内存地址","like_count":0},{"had_liked":false,"id":344439,"user_name":"吴亦凡","can_delete":false,"product_type":"c1","uid":2019760,"ip_address":"","ucode":"A785AD9C98D657","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d1/b0/f4e91c7b.jpg","comment_is_top":false,"comment_ctime":1651558096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651558096","product_id":100028001,"comment_content":"有个问题啊，既然string会存放在常量池中，我不明白为什么老师你在举例twitter优化的案例中，要另外声明一个对象存放属性city,region,cityCode,  我难道直接调用 对象location.setCity(location.getCity().intern()); 会有问题么？为什么需要再声明一个 特殊带三个属性的SharedLocation 对象呢？","like_count":0},{"had_liked":false,"id":341163,"user_name":"王盛东","can_delete":false,"product_type":"c1","uid":2412384,"ip_address":"","ucode":"31EA1A4ED06E54","user_header":"https://static001.geekbang.org/account/avatar/00/24/cf/60/5adef06a.jpg","comment_is_top":false,"comment_ctime":1649397851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649397851","product_id":100028001,"comment_content":"老师您好，请教个问题， 分析内存占用的时候经常发现 char 和 string 占用内存最多，这个有没有具体的分析方式， 还是用后文提到的 MAT 来分析下profile？<br><br>$ jmap -histo:live 1 | head -20<br><br> num     #instances         #bytes  class name<br>----------------------------------------------<br>   1:        117866       69696352  [I<br>   2:        637423       52429160  [C<br>   3:        635331       15247944  java.lang.String<br>   4:        128302       13684800  [Ljava.lang.Object;","like_count":0},{"had_liked":false,"id":337420,"user_name":"枫林血舞","can_delete":false,"product_type":"c1","uid":2809867,"ip_address":"","ucode":"EE7F6DA78D21EA","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e0/0b/6f667b2c.jpg","comment_is_top":false,"comment_ctime":1646815046,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646815046","product_id":100028001,"comment_content":"交作业：特意跑了一下：false false true<br>原因：<br>String str1 = &quot;abc&quot;; &#47;&#47; 作为字面量，str1是指向到字符串常量池中的&quot;abc&quot;的地址<br>String str2 = new String(&quot;abc&quot;); &#47;&#47; str2指向值为“abc”的String对象在堆区的地址<br>String str3 = str2.intern(); &#47;&#47; 调用intern()方法，如果常量池没有&quot;abc&quot;，会将堆区的&quot;abc&quot;地址拷贝到常量池并返回；如果有，直接使用值为&quot;abc&quot;的地址；所以str3指向的地址和str1是一致的","like_count":0},{"had_liked":false,"id":328240,"user_name":"于无涯","can_delete":false,"product_type":"c1","uid":1566369,"ip_address":"","ucode":"FBFC174D8B80E9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/r0fibSY02VITyVkSxD0nOLZTxFk868s8F3kxOYoZz5FyTXJB9ckRzibX7NicUuAUT2iaPk4SSHfghhdVSIYia9ayGicQ/132","comment_is_top":false,"comment_ctime":1640617310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640617310","product_id":100028001,"comment_content":"请教下老师，shardLocation在里面信息一致的情况下实现复用不就完了么，这个跟intern有啥关系？是下面这样么？<br>1. 相同SharedLocation肯定要复用<br>2. 不同SharedLocation里面String相同的，String本身也要复用","like_count":0},{"had_liked":false,"id":326129,"user_name":"Geek_f24e8e","can_delete":false,"product_type":"c1","uid":2034980,"ip_address":"","ucode":"D7891CA6847189","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/9dTx3AVia8Lbx2iaP3dibFvoic99ODDENbp5TAfQOuD4co82C1BzNjU3Uobcqc1CZ3e58qzd3bia0vibt6M0llxRWqicQ/132","comment_is_top":false,"comment_ctime":1639388117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639388117","product_id":100028001,"comment_content":"老师不知道理解的对不对，intern不会减少创建成本，只会在创建后找到常量中已经存在的对象把引用替换过来，让新创建的对象可以被回收，本质是一种享元模式","like_count":0},{"had_liked":false,"id":310374,"user_name":"hwg","can_delete":false,"product_type":"c1","uid":1448952,"ip_address":"","ucode":"67CCC9785E53A9","user_header":"","comment_is_top":false,"comment_ctime":1630634730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630634730","product_id":100028001,"comment_content":"<br>String str = &quot;abcdef&quot;;<br><br>for(int i=0; i&lt;1000; i++) {<br>      str = str + i;<br>}编译后没有改变，老师能解析一下吗","like_count":0},{"had_liked":false,"id":310361,"user_name":"大明猩","can_delete":false,"product_type":"c1","uid":1494622,"ip_address":"","ucode":"61D330B42AE3C4","user_header":"https://static001.geekbang.org/account/avatar/00/16/ce/5e/b103d538.jpg","comment_is_top":false,"comment_ctime":1630631856,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630631856","product_id":100028001,"comment_content":"String.intern节省内存这个确实牛，确实基础太重要了！","like_count":0},{"had_liked":false,"id":291585,"user_name":"冷夜飞雪","can_delete":false,"product_type":"c1","uid":1043495,"ip_address":"","ucode":"CC01ADAA8DFDFC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/27/f708ba52.jpg","comment_is_top":false,"comment_ctime":1620376016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620376016","product_id":100028001,"comment_content":"如果程序中存在大量不重复的字符串，请问该如何优化呢？有具体的方案吗？<br>","like_count":0},{"had_liked":false,"id":287077,"user_name":"黄宝玲","can_delete":false,"product_type":"c1","uid":2433053,"ip_address":"","ucode":"F873496A0AD131","user_header":"https://static001.geekbang.org/account/avatar/00/25/20/1d/162c8ad4.jpg","comment_is_top":false,"comment_ctime":1617765962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617765962","product_id":100028001,"comment_content":"老师，请教一下，上文字符串变量的累计，我用JDK8编译后是这样<br><br>String var1 = &quot;abcdef&quot;;<br><br>        for(int var2 = 0; var2 &lt; 1000; ++var2) {<br>            var1 = var1 + var2;<br>        }<br><br>，这是为什么呢","like_count":0},{"had_liked":false,"id":277740,"user_name":"孟凡赏","can_delete":false,"product_type":"c1","uid":2008783,"ip_address":"","ucode":"9047161DCADF17","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/acjcuuTycbZx6WWxOQZV99LDtLK3HpTtUxOayuSbVtEoU87bDMyn82DKxSszpz6um9UvSeZ59VFWq5NSb2oHdw/132","comment_is_top":false,"comment_ctime":1612534563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612534563","product_id":100028001,"comment_content":"老师，您好，看了不少评论，我不是很明白new String(&quot;ja&quot;) + new String(&quot;va&quot;) 这种对象是怎么构成的，<br>比如下面的代码<br>在jdk11中 ，如果创建了 s2 再 intern 则 false，不创建 则 true<br><br>String s1 = new String(&quot;ja&quot;) + new String(&quot;va&quot;);<br>&#47;&#47;String s2 = new String(&quot;java&quot;);<br>s1.intern();<br>String s3 = &quot;java&quot;;<br>System.out.println(s1 == s3);<br><br>我就不是很明白<br><br>在jdk8中无论创不创建 s2 均为  false","like_count":0},{"had_liked":false,"id":274904,"user_name":"Corey","can_delete":false,"product_type":"c1","uid":2386935,"ip_address":"","ucode":"FDE52BBF94FB6D","user_header":"https://static001.geekbang.org/account/avatar/00/24/6b/f7/b2007360.jpg","comment_is_top":false,"comment_ctime":1611215253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611215253","product_id":100028001,"comment_content":"老师，我这边遇到一个关于intern()问题。我描述一下： <br>接口做了什么事：<br>1.查询数据库实体类 大于1000条数据<br>2.用steam流进行计算此实体类（例如区域字段，以区域分组有多少条在A区多少条在B区）<br>3.存储结果存一个表大约10条左右的分析数据<br><br>问题我学习了你的String之后发现线上环境统计数据可能一次查几十万所有我就给实体类添加了intern（）方法例如区域字段<br><br>    &#47;**<br>     * 区编码<br>     *&#47;<br>    private String districtCode;<br><br>    public void setDistrictCode(String districtCode) {<br>        if (evtStatusText != null) {<br>            this.districtCode = districtCode.intern();<br>        }<br>    }<br><br>    public String getDistrictCode() {<br>        if (null == districtCode){<br>            return null;<br>        }<br>        return districtCode.intern();<br>    }<br><br>我的想法是mybatis 存储数据依赖实体类的set方法这样程序查数据存在List过程中所有的区域字段都指向常量池的引用，<br>使用get进行判断的时候直接取也能节约储存空间但是我是用ab压测工具的时候使用jconsole发现我加了intern()方法反而内存使用更多。是我的方法用错了吗。<br>求翻牌","like_count":0},{"had_liked":false,"id":259294,"user_name":"蚝不鱿鱼","can_delete":false,"product_type":"c1","uid":1428043,"ip_address":"","ucode":"5DB98E406F1D3E","user_header":"https://static001.geekbang.org/account/avatar/00/15/ca/4b/c1ace3aa.jpg","comment_is_top":false,"comment_ctime":1604674254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604674254","product_id":100028001,"comment_content":"专栏里回复率最高的老师，没有之一！感谢老师的辛勤付出！","like_count":0},{"had_liked":false,"id":249622,"user_name":"与路同飞","can_delete":false,"product_type":"c1","uid":1138821,"ip_address":"","ucode":"2985F1440A1962","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","comment_is_top":false,"comment_ctime":1600731576,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1600731576","product_id":100028001,"comment_content":"虽然已经时间这么久了，还是希望老师回答，评论区中没有相关问题。环境JDK13<br>String s1 = new String(&quot;1&quot;) + new String(&quot;1&quot;);<br>        s1.intern();<br>        String s2 = &quot;11&quot;;<br>        System.out.println(s1 == s2); 这个打印是false<br>将1改成2，11改成22.<br>String s1 = new String(&quot;2&quot;) + new String(&quot;2&quot;);<br>        s1.intern();<br>        String s2 = &quot;22&quot;;<br>        System.out.println(s1 == s2);打印又变成true了。这是咋回事。想了一晚上了","like_count":0},{"had_liked":false,"id":245621,"user_name":"。","can_delete":false,"product_type":"c1","uid":1573748,"ip_address":"","ucode":"ADAFC9D55D1AE2","user_header":"https://static001.geekbang.org/account/avatar/00/18/03/74/26d6e6e7.jpg","comment_is_top":false,"comment_ctime":1599010700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599010700","product_id":100028001,"comment_content":"老师，请教下，能理解使用intern的方式和场景，也能理解双引号的方式创建字符串。但不太理解为什么JDK要提供new String()方式，只提供双引号方式直接用常量池的值不就好了，也不用再为new String方式提供intern的优化？","like_count":0},{"had_liked":false,"id":238246,"user_name":"走路顺拐","can_delete":false,"product_type":"c1","uid":1987040,"ip_address":"","ucode":"82D19A53DCB14E","user_header":"","comment_is_top":false,"comment_ctime":1596102171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596102171","product_id":100028001,"comment_content":"java8 不是把常量池放到本地内存了吗？","like_count":0},{"had_liked":false,"id":234001,"user_name":"Jc.Chen","can_delete":false,"product_type":"c1","uid":1180676,"ip_address":"","ucode":"36886491352CD4","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/04/0af56558.jpg","comment_is_top":false,"comment_ctime":1594548838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594548838","product_id":100028001,"comment_content":"老师你好，可能我学的不够深，我想请问一个问题：<br>文中“对象在内存中是一块内存地址，str 则是一个指向该内存地址的引用”这个表述，怎么理解呢？我一直认为的是“对象是内存保存的数据；str则是一个内存地址”。","like_count":0},{"had_liked":false,"id":232706,"user_name":"欢乐马","can_delete":false,"product_type":"c1","uid":1737096,"ip_address":"","ucode":"52238C550CD03A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/81/88/72256ea4.jpg","comment_is_top":false,"comment_ctime":1594093610,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594093610","product_id":100028001,"comment_content":"老师，我觉得您在文章里还是应该强调一下使用string intern的场景。根据这篇blog，intern的性能是比较差的，java7后虽然default池设成了60000+，但还是在一些情况下很容易占满，大于这个值后如果再增加就会很快降低性能","like_count":0,"discussions":[{"author":{"id":1737096,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/81/88/72256ea4.jpg","nickname":"欢乐马","note":"","ucode":"52238C550CD03A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289415,"discussion_content":"https://shipilev.net/jvm/anatomy-quarks/10-string-intern/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594093858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227626,"user_name":"耿嘉艺","can_delete":false,"product_type":"c1","uid":2023401,"ip_address":"","ucode":"727A22BD41E8AF","user_header":"","comment_is_top":false,"comment_ctime":1592444301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592444301","product_id":100028001,"comment_content":"1）String str1 = &quot;abc&quot;；如果常量池中不存在字符串abc，则创建，否则返回引用<br>2）String str2 = new String (&quot;abc&quot;)；同时在常量池和堆上创建对象，通过构造方法将常量池中的字符串abc作为char[]数组，并返回堆上的引用给str2 ，此时str2 != str2.intern()<br>3）String str3 = new String(&quot;1&quot;) + new String(&quot;1&quot;)；str3.intern()；常量池中存在字符串1，但是不存在字符串11，因此会将str3在堆上的引用复制到常量池中，也就是str3 = str3.intern()，此时常量池中不存在字符串11，存在的是11在堆上的引用","like_count":0},{"had_liked":false,"id":225326,"user_name":"瑶老板的小弟","can_delete":false,"product_type":"c1","uid":1438863,"ip_address":"","ucode":"EA6CDB3165227F","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/8f/6b3d4370.jpg","comment_is_top":false,"comment_ctime":1591715067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591715067","product_id":100028001,"comment_content":"字符串常量池到底存的引用，还是字符串。<br>以下说明是指在常量池直接创建字符串？<br>中使用第一种方式创建字符串对象时，JVM 首先会检查该对象是否在字符串常量池中，如果在，就返回该对象引用，否则新的字符串将在常量池中被创建。<br><br>以下说明是指堆引用常量池？<br>在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，String 对象中的 char 数组将会引用常量池中的 char 数组，并返回堆内存对象引用。<br><br>《深入理解Java虚拟机》里又说的是首次出现是在堆里创建的对象，然后常量池记录String实例引用。<br><br>所以到底是谁指向谁。。<br>","like_count":0},{"had_liked":false,"id":225189,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1066562,"ip_address":"","ucode":"D2A4F0C64246CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/42/6e0f3754.jpg","comment_is_top":false,"comment_ctime":1591679134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591679134","product_id":100028001,"comment_content":"<br>string s1 = new string(“1”)+new string(“1”);<br>s1.intern;<br>string s2=“11”;<br>s1==s2为什么是true呢，我理解s1指向的对象，s2指向的常量池地址才对啊？<br>然后<br>string s1 = new string(“1”);<br>s1.intern;<br>string s2=“11”;<br>s1==s2又是false了，区别在哪？<br><br>对于这个问题，看了老师的解答<br>（而第二种，用于&quot;11&quot;在类加载时，已经存在静态常量池中）<br>这句话没理解，难道第一种情况s2 =&quot;11&quot; 不会放到常量池中吗？<br><br><br>","like_count":0},{"had_liked":false,"id":225139,"user_name":"瑶老板的小弟","can_delete":false,"product_type":"c1","uid":1438863,"ip_address":"","ucode":"EA6CDB3165227F","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/8f/6b3d4370.jpg","comment_is_top":false,"comment_ctime":1591665692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591665692","product_id":100028001,"comment_content":"String构造器new String(“abc”),这个构造器创建的是字符串的“副本”。<br>1.7以后，这个new String（“abc”）如果abc是首次出现，会创建几个对象？","like_count":0},{"had_liked":false,"id":224780,"user_name":"qpy","can_delete":false,"product_type":"c1","uid":1124777,"ip_address":"","ucode":"4D95DDF313DDCF","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/a9/4c114382.jpg","comment_is_top":false,"comment_ctime":1591537815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591537815","product_id":100028001,"comment_content":"“在 JDK1.7 版本以后，由于常量池已经合并到了堆中”，看了jvms8，字符串常量池（确切的说应该是运行时常量池）仍然是在方法区呀，为什么说合并到堆里面了呢？<br>§2.5.5<br>......<br>##运行时常量池由方法区分配<br>Each run-time constant pool is allocated from the Java Virtual Machine&#39;s method area <br>......<br>§5.1<br>......<br>##constant_pool table用来构建每一个类型的运行时常量池<br>The constant_pool table (§4.4) in the binary representation of a class or interface is used to construct the run-time constant pool upon class or interface creation (§5.3).<br>......<br>##constant_pool table中包含string literal<br>In addition, certain run-time values which are not symbolic references are derived from items found in the constant_pool table:<br>• A string literal is a reference to an instance of class String, and is derived from a CONSTANT_String_info structure (§4.4.3) in the binary representation of a class or interface. The CONSTANT_String_info structure gives the sequence of Unicode code points constituting the string literal.<br>......","like_count":0},{"had_liked":false,"id":212903,"user_name":"GaGi","can_delete":false,"product_type":"c1","uid":1099053,"ip_address":"","ucode":"CC8D22E1DD8CA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/2d/1eebfc3c.jpg","comment_is_top":false,"comment_ctime":1588236812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588236812","product_id":100028001,"comment_content":"老师请问下，<br>String a =new String(&quot;abc&quot;).intern();<br>String b = new String(&quot;abc&quot;).intern();<br>这两行代码在jdk1.7中，a引用是指向String对象的char数组，也就是说，a引用其实是指向字符串常量池的&quot;abc&quot;的引用；<br>那么b引用其实也是指向常量池中的&quot;abc&quot;引用，也就是说，当发生gc时，由于第一个String对象的char数组是被a,b引用着，因此不会被gc，但是第二个String对象由于没有引用指向，因此会被回收；<br>这样理解是正确的吗？","like_count":0},{"had_liked":false,"id":203153,"user_name":"冰飞江南","can_delete":false,"product_type":"c1","uid":1543754,"ip_address":"","ucode":"06061F9B562895","user_header":"https://static001.geekbang.org/account/avatar/00/17/8e/4a/470db251.jpg","comment_is_top":false,"comment_ctime":1586145509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586145509","product_id":100028001,"comment_content":"老师，您举的Twitter例子中，我怎么想也想不到为什么使用intern后，内存有20G减低为几百M，到底是什么内存被回收了？请指教，谢谢了。","like_count":0},{"had_liked":false,"id":203139,"user_name":"冰飞江南","can_delete":false,"product_type":"c1","uid":1543754,"ip_address":"","ucode":"06061F9B562895","user_header":"https://static001.geekbang.org/account/avatar/00/17/8e/4a/470db251.jpg","comment_is_top":false,"comment_ctime":1586143569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586143569","product_id":100028001,"comment_content":"老师，实在想不出ntern()为何能节约内存，求指点。<br>如例子中：<br>messageInfo.getCity() 返回的字符串是“广州”的对象应用地址为“gz”，那么 messageInfo.getCity().ntern()返回的地址也是&quot;gz&quot;啊。为什么能节约内存呢？","like_count":0},{"had_liked":false,"id":202258,"user_name":"Siping","can_delete":false,"product_type":"c1","uid":1487971,"ip_address":"","ucode":"48E685333C663D","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/63/21902253.jpg","comment_is_top":false,"comment_ctime":1585945363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585945363","product_id":100028001,"comment_content":"大部分人都不注意的细节","like_count":0},{"had_liked":false,"id":198358,"user_name":"白不吃","can_delete":false,"product_type":"c1","uid":1033578,"ip_address":"","ucode":"F019914D8819C2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/6a/7f858f1f.jpg","comment_is_top":false,"comment_ctime":1585447433,"is_pvip":true,"replies":[{"id":"75246","content":"在常量的这种情况下是多余的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1585741646,"ip_address":"","comment_id":198358,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1585447433","product_id":100028001,"comment_content":"老师我有个疑问，是不是每一个String str = &quot;aaa&quot;，都会被放到字符串常量池？那intern()方法不是多余的，因为就算不用intern()方法，下一个String str2 = &quot;aaa&quot;，str2也会自动去关联字符串常量池的引用，因为str==str2","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489689,"discussion_content":"在常量的这种情况下是多余的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585741646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198217,"user_name":"白不吃","can_delete":false,"product_type":"c1","uid":1033578,"ip_address":"","ucode":"F019914D8819C2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/6a/7f858f1f.jpg","comment_is_top":false,"comment_ctime":1585417198,"is_pvip":true,"replies":[{"id":"75245","content":"方法区只是一个逻辑分区，这里说的是在堆中分配的内存空间，在逻辑分区中，还是常量池还是属于方法区。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1585741601,"ip_address":"","comment_id":198217,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1585417198","product_id":100028001,"comment_content":"老是我有个疑问，运行常量池不是在方法区么，1.8之后字符串常量池不是放到元空间了么，怎么文章里面说常量池优化到堆了？是我理解的有问题么","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489663,"discussion_content":"方法区只是一个逻辑分区，这里说的是在堆中分配的内存空间，在逻辑分区中，还是常量池还是属于方法区。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585741601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185421,"user_name":"Nicko","can_delete":false,"product_type":"c1","uid":1690659,"ip_address":"","ucode":"C27CE2846C4BB1","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/23/6b17fe26.jpg","comment_is_top":false,"comment_ctime":1583580268,"is_pvip":false,"replies":[{"id":"72180","content":"目前这个常量池已经在堆中分配，所以只要不超过堆内存大小，就不会内存溢出","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1584015015,"ip_address":"","comment_id":185421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583580268","product_id":100028001,"comment_content":"请问字符串常量池会有大小限制吗，调用大量的intern会不会导致溢出啥的","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486356,"discussion_content":"目前这个常量池已经在堆中分配，所以只要不超过堆内存大小，就不会内存溢出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584015015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173495,"user_name":"赵伟","can_delete":false,"product_type":"c1","uid":1758421,"ip_address":"","ucode":"13CA2619E338C5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/x7xu4QWonYj3nSnJic7mAFlDlTQ2UWEkZHrvjIGVDEMMuKkNEEtBqEYRTodFB6QXnUbHo8mSjlzZAlUfdcuDMGw/132","comment_is_top":false,"comment_ctime":1579576091,"is_pvip":false,"replies":[{"id":"70527","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1582722625,"ip_address":"","comment_id":173495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579576091","product_id":100028001,"comment_content":"问一下，字符串String a = &quot;a&quot;; 这种方式是a被赋值为 常量池中的的引用，使用intern也使用常量池中的引用，使用中全部使用 String a = &quot;a&quot;;  这种方式，是不是intern就没用了","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482086,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582722625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172216,"user_name":"辉煌码农","can_delete":false,"product_type":"c1","uid":1332799,"ip_address":"","ucode":"09779C2E06EA52","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIy5ULaodUwsLoPuk1wd22hqXsaBbibNEqXM0kgrCTYDGKYQkZICYEyH9wMj4hyUicuQwHdDuOKRj0g/132","comment_is_top":false,"comment_ctime":1579134925,"is_pvip":false,"replies":[{"id":"67212","content":"在 JDK1.7 版本以后，由于常量池已经合并到了堆中，所以不会再复制具体字符串了，只是会把首次遇到的字符串的引用添加到常量池中；如果有，就返回常量池中的字符串引用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1579522590,"ip_address":"","comment_id":172216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579134925","product_id":100028001,"comment_content":"new String(&quot;helleo&quot;)的时候，如果hello在常量池中不存在，hello这个字符串回存到对内存还是常量池呢。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481666,"discussion_content":"在 JDK1.7 版本以后，由于常量池已经合并到了堆中，所以不会再复制具体字符串了，只是会把首次遇到的字符串的引用添加到常量池中；如果有，就返回常量池中的字符串引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579522590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161254,"user_name":"地下城勇士","can_delete":false,"product_type":"c1","uid":1739992,"ip_address":"","ucode":"91ACD73D56A9F1","user_header":"","comment_is_top":false,"comment_ctime":1576157791,"is_pvip":false,"replies":[{"id":"61978","content":"假设我们要替换将aabbcc中的bb替换为dd：<br><br>\t\t   String testStr = &quot;aabbcc&quot;;<br>\t\t   String splitStr = &quot;bb&quot;;<br>\t\t   String replaceStr = &quot;dd&quot;;<br>\t\t   int index = testStr.indexOf(splitStr);<br>\t\t   String replacedStr = testStr.substring(0, index) + replaceStr +testStr.substring(index + splitStr.length(), testStr.length());<br>\t\t   <br>\t\t   System.out.print(&quot;输出：&quot; + replacedStr);","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1576670490,"ip_address":"","comment_id":161254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576157791","product_id":100028001,"comment_content":"我们可以用 String.indexOf() 方法代替 Split() 方法完成字符串的分割。为什么indexOf方法能代替Split方法，我刚转Java，希望老师举个例子","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477662,"discussion_content":"假设我们要替换将aabbcc中的bb替换为dd：\n\n\t\t   String testStr = &amp;quot;aabbcc&amp;quot;;\n\t\t   String splitStr = &amp;quot;bb&amp;quot;;\n\t\t   String replaceStr = &amp;quot;dd&amp;quot;;\n\t\t   int index = testStr.indexOf(splitStr);\n\t\t   String replacedStr = testStr.substring(0, index) + replaceStr +testStr.substring(index + splitStr.length(), testStr.length());\n\t\t   \n\t\t   System.out.print(&amp;quot;输出：&amp;quot; + replacedStr);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576670490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153816,"user_name":"grandcool","can_delete":false,"product_type":"c1","uid":1000037,"ip_address":"","ucode":"7545E76CE3FEFC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/65/f444ea39.jpg","comment_is_top":false,"comment_ctime":1574311303,"is_pvip":false,"replies":[{"id":"59451","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1574581093,"ip_address":"","comment_id":153816,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574311303","product_id":100028001,"comment_content":"老师您好，运行时动态创建字符串只会在堆内存中新建一个对象，那new String(&quot;abc&quot;)这种不是运行时动态创建吗","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475285,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574581093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149799,"user_name":"gaga","can_delete":false,"product_type":"c1","uid":1459132,"ip_address":"","ucode":"F9E99FBE2E581F","user_header":"https://static001.geekbang.org/account/avatar/00/16/43/bc/59d0720b.jpg","comment_is_top":false,"comment_ctime":1573379792,"is_pvip":true,"replies":[{"id":"57605","content":"这里指的是字符串，字符串对象指的是String对象。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1573381238,"ip_address":"","comment_id":149799,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1573379792","product_id":100028001,"comment_content":"“在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，复制到堆内存对象中，并返回堆内存对象引用。”<br>常量池中中创建的是字符串还是字符串对象？<br>文中说的字符串对象是指String对象吗","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473983,"discussion_content":"这里指的是字符串，字符串对象指的是String对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573381238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459132,"avatar":"https://static001.geekbang.org/account/avatar/00/16/43/bc/59d0720b.jpg","nickname":"gaga","note":"","ucode":"F9E99FBE2E581F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47680,"discussion_content":"老师，string的char[]分配在哪里？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573390156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149371,"user_name":"Geek_e70286","can_delete":false,"product_type":"c1","uid":1460743,"ip_address":"","ucode":"5F1A787E2E18A8","user_header":"","comment_is_top":false,"comment_ctime":1573203153,"is_pvip":false,"replies":[{"id":"57615","content":"感谢纠正","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1573384852,"ip_address":"","comment_id":149371,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573203153","product_id":100028001,"comment_content":"&quot;在字符串常量中，默认会将对象放入常量池；在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，复制到堆内存对象中，并返回堆内存对象引用。&quot;<br>明明是赋值引用, 但是字面上给人理解是复制一个新的副本...<br>这么久了编辑稿不更新啊...<br>    public String(String original) {<br>        this.value = original.value;<br>        this.hash = original.hash;<br>    }","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473838,"discussion_content":"感谢纠正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573384852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148907,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1573107379,"is_pvip":false,"replies":[{"id":"57608","content":"再次确认下，没有哦。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1573383490,"ip_address":"","comment_id":148907,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573107379","product_id":100028001,"comment_content":"如果在多线程编程中，String 对象的拼接涉及到线程安全，你可以使用 StringBuffer。但是要注意，由于 StringBuffer 是线程安全的，涉及到锁竞争，所以从性能上来说，要比 StringBuilder 差一些。<br><br>老师，这个地方写错了，最后一句应该是要比StringBuffer差一些。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473664,"discussion_content":"再次确认下，没有哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573383490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144275,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1571886036,"is_pvip":false,"replies":[{"id":"56521","content":"这里说的是前面这个例子：<br><br>String a =new String(&quot;abc&quot;).intern();<br>String b = new String(&quot;abc&quot;).intern();<br>        <br>if(a==b) {<br>    System.out.print(&quot;a==b&quot;);<br>}<br><br>new String(&quot;abc&quot;)是一个创建对象操作，而常量“abc”本身是在常量池中，但new String对象时，需要复制该常量的字符串abc到堆内存的对象中。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1572520372,"ip_address":"","comment_id":144275,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571886036","product_id":100028001,"comment_content":"老师，这句话能否再详细讲讲，对象已经在堆内存中创建了，为何还要把常量池中的对象再复制过去？复制过去的是什么？难道是引用？<br><br>“在字符串变量中，对象是会创建在堆内存中，同时也会在常量池中创建一个字符串对象，复制到堆内存对象中，并返回堆内存对象引用”","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471872,"discussion_content":"这里说的是前面这个例子：\n\nString a =new String(&amp;quot;abc&amp;quot;).intern();\nString b = new String(&amp;quot;abc&amp;quot;).intern();\n        \nif(a==b) {\n    System.out.print(&amp;quot;a==b&amp;quot;);\n}\n\nnew String(&amp;quot;abc&amp;quot;)是一个创建对象操作，而常量“abc”本身是在常量池中，但new String对象时，需要复制该常量的字符串abc到堆内存的对象中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572520372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141165,"user_name":"mumu","can_delete":false,"product_type":"c1","uid":1371095,"ip_address":"","ucode":"E409BDA36091A3","user_header":"https://static001.geekbang.org/account/avatar/00/14/eb/d7/712912a7.jpg","comment_is_top":false,"comment_ctime":1571127355,"is_pvip":false,"replies":[{"id":"55144","content":"此处的方法区和堆不是一个概念，方法区是指逻辑分区，而堆是指物理空间，常量池在逻辑分区上是属于方法区的，但实际分配的物理空间是堆中分配的。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1571472896,"ip_address":"","comment_id":141165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571127355","product_id":100028001,"comment_content":"老师您好，文中讲1.7后常量池合并到堆中了，常量池不是在方法去吗？还是说常量池是引用，然后对象都在堆里面？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470688,"discussion_content":"此处的方法区和堆不是一个概念，方法区是指逻辑分区，而堆是指物理空间，常量池在逻辑分区上是属于方法区的，但实际分配的物理空间是堆中分配的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571472896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139288,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1570603393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570603393","product_id":100028001,"comment_content":"打卡，2019.10.09 。关键点常量池（itern方法）与new 在堆中的分配情况","like_count":0},{"had_liked":false,"id":131654,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567837190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567837190","product_id":100028001,"comment_content":"课后思考及问题<br>老师讲解的很棒，通俗易懂，同也能看出夯实基础的重要性。<br>夯实基础 - 结合实战 - 实现进阶——这个观点十亿个赞同，第一步菜和牛的基本都是以基础扎实与否为分水岭的。<br>请教几个问题<br>1：几M内存能存下几十G的数据，这个老师具体验证过没？怎么验证的？怎么知道他不是在吹牛逼？<br>2：一个字符串的极限长度有多大？使用不同的方式创建这个极限值是一样的吗？我的理解，是受限于常量池或者堆内存空间的老年代的空间大小限制的，老师能具体分析下嘛？网上看到一个字符串有四G的说法？<br>3：字符串+号拼接能优化为使用StingBuilder拼接，是有版本限制的吧？记得好像是1.5之后才有的，那之前的版本是怎么优化的，或者换个问题，所有版本的这种优化方式都一样嘛？<br>4：使用 intern 方法需要注意的一点是，一定要结合实际场景。因为常量池的实现是类似于一个 HashTable 的实现方式，HashTable 存储的数据越大，遍历的时间复杂度就会增加。<br>请问这里的时间复杂度会增加，是指类似从O(1)到O(n)嘛？这个要看冲突虑吧？存一个值和存储1亿个值没有冲突的复杂度是一样的吧？<br><br>这节太精彩了，像一场武林大会，都想当武林盟主，但最后都败在了刘栏主的剑下。","like_count":0},{"had_liked":false,"id":128321,"user_name":"林伊","can_delete":false,"product_type":"c1","uid":1068957,"ip_address":"","ucode":"09ADBE454FE6E3","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/9d/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1566870845,"is_pvip":false,"replies":[{"id":"47776","content":"也会被回收的，常量池也有GC","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566957017,"ip_address":"","comment_id":128321,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566870845","product_id":100028001,"comment_content":"老师，您好，想问下调用了intern()方法之后的字符串也是跟正常的对象一样在没有了引用之后就会回收，还是会一直存在呢？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464893,"discussion_content":"也会被回收的，常量池也有GC","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566957017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123369,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1565662516,"is_pvip":false,"replies":[{"id":"73037","content":"对的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1584536351,"ip_address":"","comment_id":123369,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565662516","product_id":100028001,"comment_content":"思考题：<br>1，false 因为s1是指向的是常量池，s2是通过new创建的，所以在对象堆内存中。<br>2，false s3调intern方法，是先从常量池寻找，如果有已有需要的对象则清楚自己本来就要创建的对象。<br>3，true 基本原理同上，s2调用intern方法时，指向了常量池的字符串。这时s1 s3指向的内存地址是一样的。所以是true<br><br>另外关于intern的使用希望能详细描述一下。什么场景使用它。是字符串大篇幅相等的时候嘛？ <br>举个例子，<br>1，如果要存给很多用户发送的消息，有三种信息，1请交话费 2您已停机 3正常使用 就适合intern，因为大篇幅是重复的。<br>2，如果信息是，您已欠费s元。s为任意字符串。这种情况是不是就不适合Intern，因为随机性太强。<br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462640,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584536351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123052,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1565597806,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565597806","product_id":100028001,"comment_content":"这个专栏真好，大家留言都很积极，说明很有这方面的诉求。我本来有疑问的，把留言都看了一遍，基本就没啥太大的问题了，跟着老师持续学习起来。","like_count":0},{"had_liked":false,"id":118994,"user_name":"Geek_ab689a","can_delete":false,"product_type":"c1","uid":1619165,"ip_address":"","ucode":"152D1AE15F0C9E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83equSjO9AVmwhkt5Grf54q4VJFPz8QaYtYvAxxQw9D28touZYcmAIsI0GZxdv0DuFvzyLZA4j57SlQ/132","comment_is_top":false,"comment_ctime":1564481604,"is_pvip":false,"replies":[{"id":"44002","content":"对的，JVM会进行逃逸分析，进行锁消除。如果出现逃逸，会重新加载有锁的编译文件。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564713258,"ip_address":"","comment_id":118994,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564481604","product_id":100028001,"comment_content":"老师文章提到的StringBuilder要比StringBuffer性能要高，据我了解如果StringBuffer没有逃逸的话JVM会对其进行锁消除，实际的性能理论上来讲应该是一致的吧。如果StringBuffer&#47;StringBuilder逃逸了的话，那StringBuilder就会出现问题，毕竟不是线程安全的类。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460702,"discussion_content":"对的，JVM会进行逃逸分析，进行锁消除。如果出现逃逸，会重新加载有锁的编译文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564713258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117311,"user_name":"内卷改变命运","can_delete":false,"product_type":"c1","uid":1282039,"ip_address":"","ucode":"928F29B8C1F60D","user_header":"https://static001.geekbang.org/account/avatar/00/13/8f/f7/9b59c019.jpg","comment_is_top":false,"comment_ctime":1564021646,"is_pvip":false,"replies":[{"id":"43105","content":"目前没有","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564108984,"ip_address":"","comment_id":117311,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1564021646","product_id":100028001,"comment_content":"有什么办法查看衣字符串常量池数据吗","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459909,"discussion_content":"目前没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564108984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115587,"user_name":"莲花","can_delete":false,"product_type":"c1","uid":1220494,"ip_address":"","ucode":"3260F7DA59332D","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/8e/45ffff8f.jpg","comment_is_top":false,"comment_ctime":1563638305,"is_pvip":false,"replies":[{"id":"43570","content":"这也是减少数据重复的一种操作，抽取出公共的一些地址信息作为单独的类，用于多个用户信息共用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564452455,"ip_address":"","comment_id":115587,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563638305","product_id":100028001,"comment_content":"老师，有个问题不明白，求解。文章中提到，考虑到其中有很多用户在地址信息上是有重合的，比如，国家、省份、城市等，这时就可以将这部分信息单独列出一个类，以减少重复。数据存储从32G减到20G。<br>为什么将其中的信息单独出一个类就可以减少存储？这个跟intern无关的","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459178,"discussion_content":"这也是减少数据重复的一种操作，抽取出公共的一些地址信息作为单独的类，用于多个用户信息共用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564452455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115582,"user_name":"莲花","can_delete":false,"product_type":"c1","uid":1220494,"ip_address":"","ucode":"3260F7DA59332D","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/8e/45ffff8f.jpg","comment_is_top":false,"comment_ctime":1563636031,"is_pvip":false,"replies":[{"id":"43565","content":"intern返回的是相同字符串的地址引用，避免在内存中再次申请内存创建相同字符串对象了。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564452340,"ip_address":"","comment_id":115582,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563636031","product_id":100028001,"comment_content":"在创建 b 字符串变量时，也会在堆中创建一个对象，此时常量池中有该字符串对象，就不再创建。既然不再创建对象了，intern还有什么用？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459173,"discussion_content":"intern返回的是相同字符串的地址引用，避免在内存中再次申请内存创建相同字符串对象了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564452340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115077,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1135159,"ip_address":"","ucode":"CD8B84A57A6A0C","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/37/13b4c8aa.jpg","comment_is_top":false,"comment_ctime":1563469892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563469892","product_id":100028001,"comment_content":"答案：false false true","like_count":0},{"had_liked":false,"id":112214,"user_name":"李斯大炮","can_delete":false,"product_type":"c1","uid":1191464,"ip_address":"","ucode":"8CB9C681634784","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/28/9c3adea2.jpg","comment_is_top":false,"comment_ctime":1562684481,"is_pvip":false,"replies":[{"id":"41146","content":"&quot;java&quot;字符串的关键字在加载执行前出现的可能性很大，类似的有例如版本号、main等。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562896863,"ip_address":"","comment_id":112214,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562684481","product_id":100028001,"comment_content":"String str = new StringBuilder(&quot;12&quot;).append(&quot;va&quot;).toString();<br>          System.out.println(str.intern() == str);<br>          System.out.println(&quot;---------------------&quot;);<br>          String str2 = new StringBuilder(&quot;ja&quot;).append(&quot;va&quot;).toString();<br>          System.out.println(str2.intern() == str2);<br>结果是true   false<br>有人能帮忙解释下为什么str2的例子就是false，把其中的字符串换成其他字符串就是true，是因为“java”字符串被内置到常量池中了么？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457623,"discussion_content":"&amp;quot;java&amp;quot;字符串的关键字在加载执行前出现的可能性很大，类似的有例如版本号、main等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562896863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112203,"user_name":"李斯大炮","can_delete":false,"product_type":"c1","uid":1191464,"ip_address":"","ucode":"8CB9C681634784","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/28/9c3adea2.jpg","comment_is_top":false,"comment_ctime":1562683776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562683776","product_id":100028001,"comment_content":"String str = new StringBuilder(&quot;12&quot;).append(&quot;va&quot;).toString();<br>          System.out.println(str.intern() == str);<br>          System.out.println(&quot;---------------------&quot;);<br>          String str2 = new StringBuilder(&quot;ja&quot;).append(&quot;va&quot;).toString();<br>          System.out.println(str2.intern() == str2);","like_count":0},{"had_liked":false,"id":111220,"user_name":"木鱼水心","can_delete":false,"product_type":"c1","uid":1471679,"ip_address":"","ucode":"D7810929AC16C4","user_header":"https://static001.geekbang.org/account/avatar/00/16/74/bf/35841a56.jpg","comment_is_top":false,"comment_ctime":1562513269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562513269","product_id":100028001,"comment_content":"老师，String并不是真的不可变的，我们可以通过反射过去char数组，通过改变里面的元素来改变对象","like_count":0},{"had_liked":false,"id":110626,"user_name":"郁陌陵","can_delete":false,"product_type":"c1","uid":1301325,"ip_address":"","ucode":"472440D7E5E2F4","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/4d/263a4508.jpg","comment_is_top":false,"comment_ctime":1562305567,"is_pvip":false,"replies":[{"id":"40394","content":"一个哦","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562465852,"ip_address":"","comment_id":110626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562305567","product_id":100028001,"comment_content":"老师，我想问一下，如开题所示代码，在常量池中字符串“abc”会有一个还是两个，如果是两个的话，怎么理解 “因为常量池的实现是类似于一个 HashTable 的实现方式”这句话呢","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456975,"discussion_content":"一个哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562465852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107070,"user_name":"李","can_delete":false,"product_type":"c1","uid":1396623,"ip_address":"","ucode":"426288EBB410C2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIfQFSpQJNKeqW5Q9PfciaLyDDFm9heqW5SHQCzlrajXO8f38RCH3BE5k8QHGPMictbbAM9IGvicj5EQ/132","comment_is_top":false,"comment_ctime":1561453150,"is_pvip":false,"replies":[{"id":"39346","content":"在运行时动态创建对象，是不会在常量池中创建。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1561861074,"ip_address":"","comment_id":107070,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561453150","product_id":100028001,"comment_content":"2. 如何使用 String.intern 节省内存？<br><br>这个小段最后一个图中的，第3个图什么意思，为什么不在常量池创建","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455354,"discussion_content":"在运行时动态创建对象，是不会在常量池中创建。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561861074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106773,"user_name":"周彬","can_delete":false,"product_type":"c1","uid":1323732,"ip_address":"","ucode":"7E437D471042DF","user_header":"","comment_is_top":false,"comment_ctime":1561385621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561385621","product_id":100028001,"comment_content":"老师，在使用字符包含比较时，有没有比字符串自带的包含方法更高效的比较方式，谢谢","like_count":0},{"had_liked":false,"id":102349,"user_name":"Geek_ebda96","can_delete":false,"product_type":"c1","uid":1134862,"ip_address":"","ucode":"02912E6D95A5A6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoRiaKX0ulEibbbwM4xhjyMeza0Pyp7KO1mqvfJceiaM6ZNtGpXJibI6P2qHGwBP9GKwOt9LgHicHflBXw/132","comment_is_top":false,"comment_ctime":1560211380,"is_pvip":false,"replies":[{"id":"37319","content":"第一个问题，如果是String里面的构造参数是常量，这个优化是好的，但是如果是一个非常量，这个new动作就在先了，需要使用intern方法将字符串被放到常量池，这个动作则是在后了。<br><br>第二个问题，b不是一个对象，而且一个引用，是放在了虚拟机栈中。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560390012,"ip_address":"","comment_id":102349,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560211380","product_id":100028001,"comment_content":"老师，你好，你在文中所说的b对象将指向在常量池中存在引用对象，而原来b对象在堆内存中的空间将被垃圾回收，有两个疑问，第一个，我理解的一个java对象创建分三步，1.new一个对象，2.分配内存空间，3.把分配的空间指向池new的对象，java有没有针对new字符串对象进行优化，new之后直接先查找常量池有没有，如果有直接指向常量池，这样不是省去了分配空间的动作么，应该更快一些，第2个问题，java里的对象也就是全局变量本身也是占用了堆内存空间吧，因为你这边描述的是，b对象之前分配的内存被回收了，但b对象本身还存在，只是指向另外一个内存地址，垃圾回收的时候是不是把这些对象本身所占内存空也要回收，对象所指向的内存空间也一起回收","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453373,"discussion_content":"第一个问题，如果是String里面的构造参数是常量，这个优化是好的，但是如果是一个非常量，这个new动作就在先了，需要使用intern方法将字符串被放到常量池，这个动作则是在后了。\n\n第二个问题，b不是一个对象，而且一个引用，是放在了虚拟机栈中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560390012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102159,"user_name":"伟","can_delete":false,"product_type":"c1","uid":1502476,"ip_address":"","ucode":"2BB63DC5206A33","user_header":"https://static001.geekbang.org/account/avatar/00/16/ed/0c/b12258d5.jpg","comment_is_top":false,"comment_ctime":1560154742,"is_pvip":false,"replies":[{"id":"36876","content":"这个具体的性能状况没能了解到，这只是一个优化思路。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560175035,"ip_address":"","comment_id":102159,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1560154742","product_id":100028001,"comment_content":"从 20G 降到几百兆，是不是意味着推特的常量池至少有几十上百兆？那这HashTable也不小吧？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453285,"discussion_content":"这个具体的性能状况没能了解到，这只是一个优化思路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560175035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665402,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/7a/76bf4c79.jpg","nickname":"大树","note":"","ucode":"B19420E1F0FF1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214799,"discussion_content":"我们正常使用过程中，intern会导致permgen逐渐增大，然后ygc时间逐渐增大https://club.perfma.com/article/216761","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585234241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101826,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1559983945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559983945","product_id":100028001,"comment_content":"请教如何对string类型的值对象加synchronized同步块？有人说synchronized(string.intern())方式不好，容易让对象GC不了，还可能造成dead lock，老师怎么看？标准做法是什么？谢谢！","like_count":0},{"had_liked":false,"id":101784,"user_name":"王盛武","can_delete":false,"product_type":"c1","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1559970978,"is_pvip":false,"replies":[{"id":"36670","content":"已修正～感谢这位细心的同学！","user_name":"编辑回复","user_name_real":"王冬青","uid":"1356014","ctime":1559973547,"ip_address":"","comment_id":101784,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1559970978","product_id":100028001,"comment_content":"Zend同学提的 复制 问题，希望修改文稿为引用赋值才正确。 <br>一开始我也纠结这点，看了Zend跟我提问内容一样","like_count":0,"discussions":[{"author":{"id":1356014,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/ee/d0871efd.jpg","nickname":"冬青","note":"","ucode":"14576781B499FB","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453114,"discussion_content":"已修正～感谢这位细心的同学！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559973547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101099,"user_name":"中年油腻男","can_delete":false,"product_type":"c1","uid":1545814,"ip_address":"","ucode":"9166867BC68633","user_header":"https://static001.geekbang.org/account/avatar/00/17/96/56/2cee7672.jpg","comment_is_top":false,"comment_ctime":1559717239,"is_pvip":true,"replies":[{"id":"36488","content":"需要结合substring方法一起用。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559780065,"ip_address":"","comment_id":101099,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559717239","product_id":100028001,"comment_content":"String.indexOf()怎么切分字符串？求解","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452804,"discussion_content":"需要结合substring方法一起用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559780065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100368,"user_name":"summer","can_delete":false,"product_type":"c1","uid":1204583,"ip_address":"","ucode":"2271AE2AFCCFEE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqEYVfkWyoGovx1wtiaF78Z1MUoT9OPH5UeLmuyOFbVxExs7dibXmQZKIWjiaQATR6sYrsD5iaaGr8O3w/132","comment_is_top":false,"comment_ctime":1559538556,"is_pvip":false,"replies":[{"id":"36386","content":"对的，如果只是常量，一般就是常量这种写法。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559696357,"ip_address":"","comment_id":100368,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559538556","product_id":100028001,"comment_content":"所以，一个字符串的值，如“abc”。不管是new 出来的也好，还是 直接 = “abc”的也罢。都会的把&quot;abc“放到常量池中，两个想了解的地方，（1）如果 stringbuffer来连接如：stringbuffer(&quot;a&quot;).append(&quot;b&quot;).append(&quot;c&quot;).toString();这种情况下，是不是会分别创建 a， b，c三个字符串到常量池中呢？（2）：如要所有的值都是放在常量池中，那new String(&quot;abc&quot;)与 =”abc“这种，在程序里，是不是 =&quot;abc&quot;的性能更好些，毕竟new String(”abc“)多了从常量池中copy的过程。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452522,"discussion_content":"对的，如果只是常量，一般就是常量这种写法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559696357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98949,"user_name":"xinnong","can_delete":false,"product_type":"c1","uid":1005415,"ip_address":"","ucode":"3C1F1EB93FBA5B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/67/01d1580f.jpg","comment_is_top":false,"comment_ctime":1559118346,"is_pvip":false,"replies":[{"id":"35573","content":"建议分开运行，这个比较应该没有很大差异。本身编译器会优化+。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559138077,"ip_address":"","comment_id":98949,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559118346","product_id":100028001,"comment_content":"<br><br>为什么直接拼接快呢？<br>\t<br>public final static String generateCommentAndTopicDailyTaskTimeskey(String userid) {<br>        StringBuilder sb = new StringBuilder();<br>        sb.append(&quot;daily_comment_or_topic_times&quot;);<br>        sb.append(&quot;_&quot;);<br>        sb.append(userid);<br>        return  sb.toString();<br>   }<br>   <br>   public final static String generateCommentAndTopicDailyTaskTimeskey1(String userid) {<br>        return  &quot;daily_comment_or_topic_times&quot; + &quot;_&quot; + userid;<br>   }<br>   <br>   public static void main(String[] args) {<br>        int len = 100000;<br>        long begin = System.currentTimeMillis();<br>        for(int i=0;i&lt;len;i++) {<br>            generateCommentAndTopicDailyTaskTimeskey(&quot;12&quot;);<br>        }<br>        long end = System.currentTimeMillis();<br>        System.out.println(end-begin);<br>        <br>        long begin1 = System.currentTimeMillis();<br>        for(int i=0;i&lt;len;i++) {<br>            generateCommentAndTopicDailyTaskTimeskey1(&quot;12&quot;);<br>        }<br>        long end1 = System.currentTimeMillis();<br>        System.out.println(end1-begin1);<br>   }<br><br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451904,"discussion_content":"建议分开运行，这个比较应该没有很大差异。本身编译器会优化+。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559138077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98801,"user_name":"星期八","can_delete":false,"product_type":"c1","uid":1185504,"ip_address":"","ucode":"34A37F73A48E7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/e0/7abad3cc.jpg","comment_is_top":false,"comment_ctime":1559097438,"is_pvip":false,"replies":[{"id":"35565","content":"你好，这个指的是运行时在堆内存中创建的对象。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559136001,"ip_address":"","comment_id":98801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559097438","product_id":100028001,"comment_content":"老师，messageInfo.getCity().intern()这个例子中，一开始的对象是指哪个对象呢？<br><br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451843,"discussion_content":"你好，这个指的是运行时在堆内存中创建的对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559136001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98274,"user_name":"safe","can_delete":false,"product_type":"c1","uid":1367617,"ip_address":"","ucode":"52CC3952108459","user_header":"https://static001.geekbang.org/account/avatar/00/14/de/41/bd311da7.jpg","comment_is_top":false,"comment_ctime":1558946124,"is_pvip":false,"replies":[{"id":"35195","content":"你好 safe，这个常量是不可变的，所以不存在锁资源的问题，不会存在竞争。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559001405,"ip_address":"","comment_id":98274,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558946124","product_id":100028001,"comment_content":"老师，我想问一下，如果intern方法是在常量池中寻找是否存在的字符串，如果在多线程的情况下，会不会有资源竞争问题","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451626,"discussion_content":"你好 safe，这个常量是不可变的，所以不存在锁资源的问题，不会存在竞争。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559001405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98232,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1195767,"ip_address":"","ucode":"284CC0FFCD511F","user_header":"https://static001.geekbang.org/account/avatar/00/12/3e/f7/84413d01.jpg","comment_is_top":false,"comment_ctime":1558937918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558937918","product_id":100028001,"comment_content":"温故知新, 特别好","like_count":0},{"had_liked":false,"id":98205,"user_name":"Janita","can_delete":false,"product_type":"c1","uid":1438946,"ip_address":"","ucode":"B51FACCE37EFBF","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/e2/73ecba29.jpg","comment_is_top":false,"comment_ctime":1558930191,"is_pvip":false,"replies":[{"id":"35144","content":"同学你好，明天更新的04讲就会讲到这个问题了。","user_name":"编辑回复","user_name_real":"王冬青","uid":"1356014","ctime":1558932045,"ip_address":"","comment_id":98205,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1558930191","product_id":100028001,"comment_content":"回溯问题是什么意思","like_count":0,"discussions":[{"author":{"id":1356014,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/ee/d0871efd.jpg","nickname":"冬青","note":"","ucode":"14576781B499FB","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451597,"discussion_content":"同学你好，明天更新的04讲就会讲到这个问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558932045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98099,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1558915709,"is_pvip":false,"replies":[{"id":"35145","content":"点赞！","user_name":"编辑回复","user_name_real":"王冬青","uid":"1356014","ctime":1558932234,"ip_address":"","comment_id":98099,"utype":2}],"discussion_count":1,"race_medal":1,"score":"1558915709","product_id":100028001,"comment_content":"false<br>false<br>true","like_count":0,"discussions":[{"author":{"id":1356014,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/ee/d0871efd.jpg","nickname":"冬青","note":"","ucode":"14576781B499FB","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451555,"discussion_content":"点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558932234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97919,"user_name":"爪哇夜未眠","can_delete":false,"product_type":"c1","uid":1006025,"ip_address":"","ucode":"BBEB80EB670770","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/c9/f44cb7f3.jpg","comment_is_top":false,"comment_ctime":1558841298,"is_pvip":false,"replies":[{"id":"35094","content":"你好，建议不超过百兆，这个可以根据具体环境和场景进行测试。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558920268,"ip_address":"","comment_id":97919,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558841298","product_id":100028001,"comment_content":"老师好，文章提到“使用 intern 方法需要注意的一点是，一定要结合实际场景...HashTable 存储的数据越大，遍历的时间复杂度就会增加...”<br>那建议多大的量可以使用呢？像Twitter那种，几十G压缩到几百兆的量，算大吗？会有问题吗？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451473,"discussion_content":"你好，建议不超过百兆，这个可以根据具体环境和场景进行测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558920268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97855,"user_name":"六六六","can_delete":false,"product_type":"c1","uid":1252230,"ip_address":"","ucode":"933BC99EC09001","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/86/22a9362f.jpg","comment_is_top":false,"comment_ctime":1558795709,"is_pvip":false,"replies":[{"id":"53052","content":"可以dump下GC日志，结合线程业务日志来排查问题，可以先排查是否是应用服务导致的飙升，还是其他外在因素。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1569978547,"ip_address":"","comment_id":97855,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558795709","product_id":100028001,"comment_content":"str1,str3d都指向的是常量池，str2指向的是堆，所以答案是false，false，true。<br>想请教老师一个关于机器load的问题，我们有个应用的线上机器load有时会忽然飙升一下，然后又很快降下来，基本可以排除是流量问题。我现在的想法是通过定时脚本来不断检查load，当load升高之后，打印jstack信息。想问下老师还有没有其他的排查方案或者工具呢！谢谢老师","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451452,"discussion_content":"可以dump下GC日志，结合线程业务日志来排查问题，可以先排查是否是应用服务导致的飙升，还是其他外在因素。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569978547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97764,"user_name":"胡小榕","can_delete":false,"product_type":"c1","uid":1300169,"ip_address":"","ucode":"351E2032C75CB6","user_header":"https://static001.geekbang.org/account/avatar/00/13/d6/c9/08a62ac7.jpg","comment_is_top":false,"comment_ctime":1558768646,"is_pvip":false,"replies":[{"id":"34945","content":"我们知道，在堆创建string对象后，如果没有intern方法，会将引用指向堆中的对象。调用intern方法之后，会将引用指向常量池中的字符串对象，此时堆中的对象则失去了引用。JVM的垃圾回收会将没有根引用的对象回收。<br><br>不知道你是否理解了，有问题保持留言。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558788862,"ip_address":"","comment_id":97764,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558768646","product_id":100028001,"comment_content":"String s = new String(&quot;abc&quot;).intern();<br><br>&quot;堆内存中原有的对象由于没有引用指向它，将会通过垃圾回收器回收。&quot;这个如何理解呢？是说s指向了&quot;abc&quot;的引用，而new String(&quot;abc&quot;)这个对象会被回收吗？ 请老师讲讲<br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451406,"discussion_content":"我们知道，在堆创建string对象后，如果没有intern方法，会将引用指向堆中的对象。调用intern方法之后，会将引用指向常量池中的字符串对象，此时堆中的对象则失去了引用。JVM的垃圾回收会将没有根引用的对象回收。\n\n不知道你是否理解了，有问题保持留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558788862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97737,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1558758886,"is_pvip":false,"replies":[{"id":"34952","content":"编译优化在Java7就实现了。常量池在JDK1.7之前是放在非堆内存区中，且空间大小有限，在1.7以后放在了堆内存中，区别就是逻辑空间隔离与其他堆内存，垃圾回收也是不同于堆中的垃圾回收。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1558789797,"ip_address":"","comment_id":97737,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1558758886","product_id":100028001,"comment_content":"即使使用 + 号作为字符串的拼接，也一样可以被编译器优化成 StringBuilder 的方式。<br>-----<br>老师好，这个是从Java8才开始支持的吧，我的问题是：常量池在内存里面的位置与堆内存有啥区别呀","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451393,"discussion_content":"编译优化在Java7就实现了。常量池在JDK1.7之前是放在非堆内存区中，且空间大小有限，在1.7以后放在了堆内存中，区别就是逻辑空间隔离与其他堆内存，垃圾回收也是不同于堆中的垃圾回收。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558789797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}