{"id":75807,"title":"09 | 动态规划（上）：如何实现基于编辑距离的查询推荐？","content":"<p>你好，我是黄申。</p><p>上一篇讲组合的时候，我最后提到了有关文本的关键字查询。今天我接着文本搜索的话题，来聊聊查询推荐（Query Suggestion）的实现过程，以及它所使用的数学思想，<strong>动态规划</strong>（Dynamic Programming）。</p><p>那什么是动态规划呢？在递归那一节，我说过，我们可以通过不断分解问题，将复杂的任务简化为最基本的小问题，比如基于递归实现的归并排序、排列和组合等。不过有时候，我们并不用处理所有可能的情况，只要找到满足条件的最优解就行了。在这种情况下，我们需要在各种可能的局部解中，找出那些可能达到最优的局部解，而放弃其他的局部解。这个寻找最优解的过程其实就是动态规划。</p><p>动态规划需要通过子问题的最优解，推导出最终问题的最优解，因此这种方法特别注重子问题之间的转移关系。我们通常把这些子问题之间的转移称为<strong>状态转移</strong>，并把用于刻画这些状态转移的表达式称为<strong>状态转移方程</strong>。很显然，找到合适的状态转移方程，是动态规划的关键。</p><p>因此，这两节我会通过实际的案例，给你详细解释如何使用动态规划法寻找最优解，包括如何分解问题、发现状态转移的规律，以及定义状态转移方程。</p><h2>编辑距离</h2><p>当你在搜索引擎的搜索框中输入单词的时候，有没有发现，搜索引擎会返回一系列相关的关键词，方便你直接点击。甚至，当你某个单词输入有误的时候，搜索引擎依旧会返回正确的搜索结果。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/1c/eb/1c337d39b48ef544ef811c926c70fbeb.png?wh=1560*824\" alt=\"\"></p><p>搜索下拉提示和关键词纠错，这两个功能其实就是<strong>查询推荐</strong>。查询推荐的核心思想其实就是，对于用户的输入，查找相似的关键词并进行返回。而测量拉丁文的文本相似度，最常用的指标是<strong>编辑距离</strong>（Edit Distance）。</p><p>我刚才说了，查询推荐的这两个功能是针对输入有缺失或者有错误的字符串，依旧返回相应的结果。那么，将错误的字符串转成正确的，以此来返回查询结果，这个过程究竟是怎么进行的呢？</p><p>由一个字符串转成另一个字符串所需的最少编辑操作次数，我们就叫作<strong>编辑距离</strong>。这个概念是俄罗斯科学家莱文斯坦提出来的，所以我们也把编辑距离称作莱文斯坦距离（Levenshtein distance）。很显然，编辑距离越小，说明这两个字符串越相似，可以互相作为查询推荐。<strong>编辑操作</strong>有这三种：把一个字符替换成另一个字符；插入一个字符；删除一个字符。</p><p>比如，我们想把mouuse转换成mouse，有很多方法可以实现，但是很显然，直接删除一个“u”是最简单的，所以这两者的编辑距离就是1。</p><h2>状态转移</h2><p>对于mouse和mouuse的例子，我们肉眼很快就能观察出来，编辑距离是1。但是我们现实的场景中，常常不会这么简单。如果给定任意两个非常复杂的字符串，如何高效地计算出它们之间的编辑距离呢？</p><p>我们之前讲过排列和组合。我们先试试用排列的思想来进行编辑操作。比如，把一个字符替换成另一个字符，我们可以想成把A中的一个字符替换成B中的一个字符。假设B中有m个不同的字符，那么替换的时候就有m种可能性。对于插入一个字符，我们可以想成在A中插入来自B的一个字符，同样假设B中有m个不同的字符，那么也有m种可能性。至于删除一个字符，我们可以想成在A中删除任何一个字符，假设A有n个不同的字符，那么有n种可能性。</p><p>可是，等到实现的时候，你会发现实际情况比想象中复杂得多。</p><p>首先，计算量非常大。我们假设字符串A的长度是n，而B字符串中不同的字符数量是m，那么A所有可能的排列大致在m^n这个数量级，这会导致非常久的处理时间。对于查询推荐等实时性的服务而言，服务器的响应时间太长，用户肯定无法接受。</p><p>其次，如果需要在字符串A中加字符，那么加几个呢，加在哪里呢？同样，删除字符也是如此。因此，可能的排列其实远不止m^n。</p><p>我们现在回到问题本身，其实编辑距离只需要求最小的操作次数，并不要求列出所有的可能。而且排列过程非常容易出错，还会浪费大量计算资源。看来，排列的方法并不可行。</p><p>好，这里再来思考一下，其实我们并不需要排列的所有可能性，而只是关心最优解，也就是最短距离。那么，我们能不能每次都选择出一个到目前为止的最优解，并且只保留这种最优解？如果是这样，我们虽然还是使用迭代或者递归编程来实现，但效率上就可以提升很多。</p><p>我们先考虑<strong>最简单的情况</strong>。假设字符串A和B都是空字符串，那么很明显这个时候编辑距离就是0。如果A增加一个字符a1，B保持不动，编辑距离就增加1。同样，如果B增加一个字符b1，A保持不动，编辑距离增加1。但是，如果A和B有一个字符，那么问题就有点复杂了，我们可以细分为以下几种情况。</p><p>我们先来看<strong>插入字符</strong>的情况。A字符串是a1的时候，B空串增加一个字符变为b1；或者B字符串为b1的时候，A空串增加一个字符变为a1。很明显，这种情况下，编辑距离都要增加1。</p><p>我们再来看<strong>替换字符</strong>的情况。当A和B都是空串的时候，同时增加一个字符。如果要加入的字符a1和b1不相等，表示A和B之间转化的时候需要替换字符，那么编辑距离就是加1；如果a1和b1相等，无需替换，那么编辑距离不变。</p><p>最后，我们取上述三种情况中编辑距离的最小值作为当前的编辑距离。注意，这里我们只需要保留这个最小的值，而舍弃其他更大的值。这是为什么呢？因为编辑距离随着字符串的增长，是单调递增的。所以，要求最终的最小值，必须要保证对于每个子串，都取得了最小值。有了这点，之后我们就可以使用迭代的方式，一步步推导下去，直到两个字符串结束比较。</p><p>刚才我说的情况中没有删除，这是因为删除就是插入的逆操作。如果我们从完整的字符串A或者B开始，而不是从空串开始，这就是删除操作了。</p><p>从上述的过程可以看出，我们确实可以把求编辑距离这个复杂的问题，划分为更多更小的子问题。而且，更为重要的一点是，我们在每一个子问题中，都只需要保留一个最优解。之后的问题求解，只依赖这个最优值。这种求编辑距离的方法就是动态规划，而这些子问题在动态规划中被称为不同的状态。</p><p>如果文字描述不是很清楚的话，我这里又画一张表，把各个状态之间的转移都标示清楚，你就一目了然了。</p><p>我还是用mouuse和mouse的例子。我把mouuse的字符数组作为表格的行，每一行表示其中一个字母，而mouse的字符数组作为列，每列表示其中一个字母，这样就得到下面这个表格。</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/cd/3f696455617c8a0da422df3cdb64d0cd.png?wh=1188*1026\" alt=\"\"></p><p>这张表格里的不同状态之间的转移，就是<strong>状态转移</strong>。其中红色部分表示字符串演变（或者说状态转移）的方式以及相应的编辑距离计算。对于表格中其他空白的部分，我暂时不给出，你可以试着自己来推导。</p><p>编辑距离是具有对称性的，也就是说从字符串A到B的编辑距离，和从字符串B到A的编辑距离，两者一定是相等的。这个应该很好理解。</p><p>你可以把刚才那个状态转移表的行和列互换一下，再推导一下，看看得出的编辑距离是否还是1。我现在从理论上解释下这一点。这其实是由编辑距离的三种操作决定的。比如说，从字符串A演变到B的每一种操作，都可以转换为从字符串B演变到A的某一种操作。</p><p><img src=\"https://static001.geekbang.org/resource/image/18/e8/1824ca86219e0f05591aa48fe7f6dee8.jpg?wh=1142*284\" alt=\"\"></p><p>所以说，从字符串A演变到B的每一种变化方式，都可以找到对应的从字符串B演变到A的某种方式，两者的操作次数一样。自然，代表最小操作次数的编辑距离也就一样了。</p><h2>小结</h2><p>我今天介绍了用于查询推荐的编辑距离。编辑距离的定义很好理解，不过，求任意两个字符串之间的编辑距离可不是一件容易的事情。我先尝试用排列来分析问题，发现这条路走不通，而后我们仍然使用了化繁为简的思路，把编辑距离的计算拆分为3种情况，并建立了子串之间的联系。</p><p>你不要觉得这样的分析过程比较繁琐，我想说的是，学数学固然是为了得到结果，但是学习的过程，是要学会解决问题的方法和思路。比如面对一个问题的时候，你可能不知道用什么方法来解决，但是你可以尝试用我们学过的这些基础思想去分析，去比对，在这个分析的过程中去总结这些方法的使用规律，久而久之，你就能摸索出自己解决问题的套路。</p><p>比如说，动态规划虽然也采用了把问题逐步简化的思想，但是它和基于递归的归并排序、排列组合等解法有所不同。能够使用动态规划解决的问题，通常只关心一个最优解，而这个最优解是单调改变的，例如最大值、最小值等等。因此，动态规划中的每种状态，通常只保留一个当前的最优解，这也是动态规划效率比较高的原因。</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/94/f37da4a1ef98494dea70016b90922594.jpg?wh=1242*1547\" alt=\"\"></p><h2>思考题</h2><p>理解了动态规划法和状态转移之后，你觉得根据编辑距离来衡量字符串之间的相似程度有什么局限性？你有什么优化方案吗？</p><p><span class=\"orange\">欢迎在留言区交作业，并写下你今天的学习笔记。你可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</span></p><p></p>","comments":[{"had_liked":false,"id":57576,"user_name":"任鹏斌","can_delete":false,"product_type":"c1","uid":1104086,"ip_address":"","ucode":"34319B05EA6E74","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/d6/47da34bf.jpg","comment_is_top":false,"comment_ctime":1546840436,"is_pvip":false,"replies":[{"id":"20799","content":"（2）基本是对的，只是明确一下，“如果相等不需要替换则编辑距离 “加” 0”<br>（1）中的情况比较绕，你可以这么来看，一开始A、B都是空串，A增加一个字符m，两者编辑距离是1，然后B增加一个字符m，即使两个m相等，编辑距离也会由1变为2，而不是维持在1，也不会降到0。因为编辑距离2表示的是A添加一个m字符，B再添加一个m字符。虽然在人看来两者相等，但对于计算机而言要遍历这种情况。至于两者相等的情况，由替换操作表示，因此可以取到最小值0","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546907966,"ip_address":"","comment_id":57576,"utype":1}],"discussion_count":3,"race_medal":0,"score":"212000237940","product_id":100021201,"comment_content":"关于编辑距离的计算看了好多遍还是不太理解<br>1、A、B都为空A转化为B或者B转化为A不需要做任何操作编辑距离为0（可以理解）<br>2、A增加一个字符a1，B保持不动，编辑距离为1。或者B增加一个字符b1，A保持不动，编辑距离为1.（初始为空的情况，可以理解）<br>3、如何A和B有一个字符那么情况就有点复杂了，具体如下：<br>（1）插入字符的情况，A字符串为a1的时候，B空串增加一个字符变为b1，或者B字符串为b1的时候，A空串增加一个字符变为a1。很明显这种情况下编辑距离都要增加1<br>问题：这时候如果b1和a1是一样的字符A或者B再插入后已经是一样的了也不需要再做转化了，这时候编辑距离是否应该就是1？下面的表格中A、B串的m与m处的插入情况与这里一样插入的编辑距离为什么是2？<br>（2）替换字符的情况，可以理解为不相等的情况下才替换所以此时编辑距离加1，如果相等不需要替换则编辑距离为0？<br>麻烦老师解答一下，谢谢！","like_count":50,"discussions":[{"author":{"id":1607786,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKxyQPXkicIdnjmwbROOLzEfUYz7iaZIp6CKKseIlwBiaof9Sl3SZp9RuK9yt8FZoXD8MOAXByetuWwQ/132","nickname":"Totoro_Sama","note":"","ucode":"2D157076F1D5B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38239,"discussion_content":"能不能理解为，比如A和B都是m字符的时候，对于添加操作来说，必须会有长度变化，那么我由A变成B就得先删除m，再添加m，就是2的距离，就相当于图中，我从横向的m变到纵向m，得先回到空串，再往下走，所以类似横纵坐标相加","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1571749715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435648,"discussion_content":"（2）基本是对的，只是明确一下，“如果相等不需要替换则编辑距离 “加” 0”\n（1）中的情况比较绕，你可以这么来看，一开始A、B都是空串，A增加一个字符m，两者编辑距离是1，然后B增加一个字符m，即使两个m相等，编辑距离也会由1变为2，而不是维持在1，也不会降到0。因为编辑距离2表示的是A添加一个m字符，B再添加一个m字符。虽然在人看来两者相等，但对于计算机而言要遍历这种情况。至于两者相等的情况，由替换操作表示，因此可以取到最小值0","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1546907966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1262615,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/fibfCoOJ9A4yLMfnnaibXhULGUzJcQoZcsINre1GSeT2RTvE48b7wwiaOxrUG9TCLHpH5v2n4Ld9tUEqWibZiaGnfiaw/132","nickname":"ufo00l","note":"","ucode":"61CAF4D26AC021","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36557,"discussion_content":"我很困扰在这里 谢谢提问和回答","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571392331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60635,"user_name":"西北偏北","can_delete":false,"product_type":"c1","uid":1043160,"ip_address":"","ucode":"64BD69C84EE6A1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erdpKbFgRLnicjsr6qkrPVKZcFrG3aS2V51HhjFP6Mh2CYcjWric9ud1Qiclo8A49ia3eZ1NhibDib0AOCg/132","comment_is_top":false,"comment_ctime":1547521195,"is_pvip":false,"replies":[{"id":"21698","content":"分析的很好，在实际项目中还可以考虑其他因素，例如用户搜索的次数、对应的搜索结果数量等等。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547574987,"ip_address":"","comment_id":60635,"utype":1}],"discussion_count":2,"race_medal":0,"score":"57382096043","product_id":100021201,"comment_content":"搜索引擎中的自动纠错和提示功能，是对用户输入字符串，计算其相似字符串。<br>比如mouse就是用户输入mouuse的相似字符串。<br>一个字符串有哪些相似字符串，无非是把该字符串进行一系列可能的变形编辑。比如把某个字母删掉，或增加一个字母，或替换该字母<br>最后看变形后的单词，是否是一个合法单词。如果是，则给用户提示。<br><br>原始单词或字符变形到一个合法字符串的步数，称为这两个单词之间的编辑距离。<br><br>但一个单词随着长度增加，其对应的合法单词，编辑距离计算将会很多。不可取。<br><br>所以需要最优解，找出用户输入词，编辑距离最小的目标词即可","like_count":14,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436567,"discussion_content":"分析的很好，在实际项目中还可以考虑其他因素，例如用户搜索的次数、对应的搜索结果数量等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547574987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","nickname":"lcqbug","note":"","ucode":"08FA17F21BCEC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278011,"discussion_content":"我输入一个错误的原始字符串，我要分析所有的合法字符串的编辑距离吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591143750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58532,"user_name":"Ricky","can_delete":false,"product_type":"c1","uid":1238256,"ip_address":"","ucode":"0B29C730CAD29C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/f0/82281239.jpg","comment_is_top":false,"comment_ctime":1547105194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27316908970","product_id":100021201,"comment_content":"#include &lt;iostream&gt;<br><br>using namespace std;<br>void levenshteinDis(const char* str1, const char* str2, int m, int n,<br>                    int i, int j, int edist, int &amp;mind) {<br>    if (i == m || j == n) {<br>        if (i &lt; m) edist += (m-i);<br>        if (j &lt; n) edist += (n-j);<br>        if (edist &lt; mind) mind = edist;<br>        return;<br>    }<br><br>    if (str1[i] == str2[j]) {<br>        levenshteinDis(str1, str2, m, n, i+1, j+1, edist, mind);<br>    } else {<br>        &#47;&#47; 删除或增加<br>        levenshteinDis(str1, str2, m, n, i+1, j, edist+1, mind);<br>        levenshteinDis(str1, str2, m, n, i, j+1, edist+1, mind);<br>        &#47;&#47; 替换操作<br>        levenshteinDis(str1, str2, m, n, i+1, j+1, edist+1, mind);<br>    }<br>}<br><br>int levenshteinDis(const char* a, const char* b, int m, int n) {<br>    int mind = 0xfffffff;<br>    levenshteinDis(a, b, m, n, 0, 0, 0, mind);<br>    return mind;<br>}<br><br>&#47;*<br> * 状态转移方程<br> * 1.当a[i] != b[j], min_edist(i,j) = min(min_edist(i-1,j)+1, min_edist(i,j-1)+1, min_edist(i-1, j-1)+1)<br> * 2.当a[i] == b[j], min_edist(i,j) = min(min_edist(i-1,j)+1, min_edist(i,j-1)+1, min_edist(i-1, j-1))<br> *&#47;<br>int levenshteinDisDP(const char* a, const char* b, int m, int n) {<br>    &#47;&#47; 初始化dp数组<br>    int dp[m][n];<br>    for (int i = 0; i &lt; m; ++i) {<br>        for (int j = 0; j &lt; n; ++j) {<br>            dp[i][j] = 0;<br>        }<br>    }<br><br>    &#47;&#47; 初始化第0列<br>    for (int i = 0; i &lt; m; ++i) {<br>        if (a[i] == b[0]) dp[i][0] = i;<br>        else if (i != 0) dp[i][0] = dp[i-1][0] + 1;<br>        else dp[i][0] = 1;<br>    }<br><br>    &#47;&#47; 初始化第0行<br>    for (int i = 0; i &lt; n; ++i) {<br>        if (a[0] == b[i]) dp[0][i] = i;<br>        else if (i &gt; 0) dp[0][i] = dp[0][i-1] + 1;<br>        else dp[0][i] = 1;<br>    }<br><br>    &#47;&#47; 填表余下部分<br>    for (int i = 1; i &lt; m; ++i) {<br>        for (int j = 1; j &lt; n; ++j) {<br>            dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1,<br>                    a[i] == b[j] ? dp[i-1][j-1]:dp[i-1][j-1]+1);<br>        }<br>    }<br>    return dp[m-1][n-1]; <br>}<br>","like_count":6},{"had_liked":false,"id":57360,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1546763408,"is_pvip":false,"replies":[{"id":"20724","content":"很好的思考，在不同的应用场景我们可以考虑不同的侧重点。比如你这里说的前缀更重要，你可以考虑一下如何修改编辑距离的定义，以及对应的状态转移方程，来体现前缀更重要。<br>除基于编辑距离的相似度，还可以考虑其他的因素，例如查询的次数（热度），查询对应的搜索结果数量、个性化等等，不过这是另一个很大的话题","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546827711,"ip_address":"","comment_id":57360,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27316567184","product_id":100021201,"comment_content":"有时候编辑距离最短的字符串并不能代表用户真正想输入的正确字符串，例如用户输出了 worder，实际上是想查 worker，但编辑距离为 1 的有很多，如 warder，wonder，我在想是不是应该按用户输入的字符串前辍最一致的字符串开始再计算编辑距离，例子中的 mouuse 和 mouse ，先直接替换掉前面一样的 mou,直接计算 use 和 se 的编辑距离，再从替换后面一样的 se，这样就是直接计算 u 和空串的编辑距离，这样就可以很快计算出距离为1，不知道这样理解优化是否正确，请老师指点。<br><br>","like_count":7,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435543,"discussion_content":"很好的思考，在不同的应用场景我们可以考虑不同的侧重点。比如你这里说的前缀更重要，你可以考虑一下如何修改编辑距离的定义，以及对应的状态转移方程，来体现前缀更重要。\n除基于编辑距离的相似度，还可以考虑其他的因素，例如查询的次数（热度），查询对应的搜索结果数量、个性化等等，不过这是另一个很大的话题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546827711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57837,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1546923636,"is_pvip":false,"replies":[{"id":"20901","content":"我会写篇加餐，给大家推荐几本书","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546961381,"ip_address":"","comment_id":57837,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23021760116","product_id":100021201,"comment_content":"老师，如果让您给计算机相关的职场人推荐一本关于数学的书，您会推荐什么？","like_count":6,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435785,"discussion_content":"我会写篇加餐，给大家推荐几本书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546961381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205924,"user_name":"胖胖程","can_delete":false,"product_type":"c1","uid":1296832,"ip_address":"","ucode":"03C4D56A114078","user_header":"https://static001.geekbang.org/account/avatar/00/13/c9/c0/730ea586.jpg","comment_is_top":false,"comment_ctime":1586757734,"is_pvip":false,"replies":[{"id":"77048","content":"不错的文章","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1586842986,"ip_address":"","comment_id":205924,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18766626918","product_id":100021201,"comment_content":"https:&#47;&#47;www.jianshu.com&#47;p&#47;4678d3f7b6f1<br>之前写过的一篇编辑距离文章，代码是用动态规划的方式实现的。","like_count":4,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491616,"discussion_content":"不错的文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586842986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2232082,"avatar":"https://static001.geekbang.org/account/avatar/00/22/0f/12/bf0bddeb.jpg","nickname":"祥","note":"","ucode":"D50195C7122355","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315282,"discussion_content":"第9和第10两证来回说了五六遍都没整明白，看了上面的博文才理解了������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603260186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95260,"user_name":"danvid","can_delete":false,"product_type":"c1","uid":1270415,"ip_address":"","ucode":"84C50611B1DEA5","user_header":"https://static001.geekbang.org/account/avatar/00/13/62/8f/c0f40d98.jpg","comment_is_top":false,"comment_ctime":1558000508,"is_pvip":false,"replies":[{"id":"34057","content":"结合表格会更容易理解","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1558025704,"ip_address":"","comment_id":95260,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18737869692","product_id":100021201,"comment_content":"编辑距离解析，其实看看下面这个结合图会好理解一点，其实就是下一个结果基于上一个结果的一种情况去进行加0还是加0，老师说的真的一头雾水，大家可以参考一下<br>解析：<br>i相当于第几行，j相当于第几列<br>1.如果i或者j=0就是edit(i,j)=j或者i；<br>2.左(i-1,j)，上(i,j-1)，左上(i-1,j-1)相当于前一个子集可能出现的三种情况的下求最小值，其中左+1，上+1，右上(如果当前i=j，则+0，不等则+1)，，求这三者的最小值例如：左=1，左上=0，上=1则 edit(左)=1+1=2，如果当前格子对应行列的数据相等则edit(左上)=0+0=0，否则edit(左上)=0+1=1，edit(上)=1+1=2,所以结果就是edit(i,j)=min{edit(左),edit(左上),edit(上)}<br>","like_count":4,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450388,"discussion_content":"结合表格会更容易理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558025704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245596,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/9c/1a750bc7.jpg","nickname":"l c","note":"","ucode":"7D43CC471595EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287837,"discussion_content":"你讲的挺好的。。。我看这表格真的一头雾水","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593566710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446437,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/25/f9cdf7e9.jpg","nickname":"耀明","note":"","ucode":"99D03E4547EB70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1934,"discussion_content":"一头雾水","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563106114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139299,"user_name":"Yang","can_delete":false,"product_type":"c1","uid":1186879,"ip_address":"","ucode":"6335082702CF34","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/3f/eabd0cb1.jpg","comment_is_top":false,"comment_ctime":1570606267,"is_pvip":false,"replies":[{"id":"53761","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1570638961,"ip_address":"","comment_id":139299,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14455508155","product_id":100021201,"comment_content":"编辑距离没办法刻画语义信息，比如同义词，否定词（编辑距离很短）。","like_count":4,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469884,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570638961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166467,"user_name":"cwtxz","can_delete":false,"product_type":"c1","uid":1778151,"ip_address":"","ucode":"4F35AEDB8F5D5D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BAuQlia9Dc07m3icOkibIqu2lhbnLD6cjgCNE8FSzG5Aj4cd26eRgspicTsWvA7WK1ftlQBD34PYRucZRXML5FA27A/132","comment_is_top":false,"comment_ctime":1577455152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167389744","product_id":100021201,"comment_content":"我所接触到的程序员，大多数的数学水平其实是比较差的，究其原因还是在于平常自己从事的工作大多用不上什么数学知识，就算要用，也只是一些简单基础的应用，甚至于有些直接找现成的工具来解决而不是依靠自己的思考，亲自动手去推敲原理。渐渐地，他们会发现，我不需要懂太多的数学知识，只需要简单的加减乘除四则运算、会开个根号、会求多元一次方程的解、做一些简单的幂运算、会一些简单的三角函数运算，其实就够了，不需要什么微积分、线性代数、数理统计这些高等数学的知识，至于更高深的泛函分析、矩阵分析、数理方程就更加不用说了。如果只是这样，注定了只能做一个平庸的开发者，甚至职业生涯的寿命也会变得很短暂。我是一个有追求的技术人，期待着能够成为大神，所以数学我是一定要坚持学的，加油!!!","like_count":3},{"had_liked":false,"id":114568,"user_name":"书木子谢明","can_delete":false,"product_type":"c1","uid":1259879,"ip_address":"","ucode":"3090C080A570BE","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/67/743128f7.jpg","comment_is_top":false,"comment_ctime":1563339571,"is_pvip":false,"replies":[{"id":"41891","content":"可以这么说，适应动态规划的要求是每一状态的最优解都可以由上一个状态的最优解推导出来，所以动态规划最核心的步骤是找出状态转移方程。如果没有办法通过上一个状态的最优解推导出当前状态的最优解，那么就不适合使用动态规划方法。<br>ES或者Solr中计算搜索结果的相似度，是使用的信息检索理论，不是简单的“编辑距离”。不过在一些query autocomplete的功能中可能会用到“编辑距离”。编辑距离更适合拉丁文，所以中文的拼音也可用到它，但是中文词就不太适合了。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1563382415,"ip_address":"","comment_id":114568,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10153274163","product_id":100021201,"comment_content":"向老师请教几个问题:<br>1.适应动态规划的要求是 sum(每一步最优解)=最终最优解，这样的理解对吗？应该有问题不适合动态规划求解，如何辨别呢？<br>2. 我理解的“编辑的最短距离”描述的是两个字符串相似性的一种方式，这种方式需要逐个迭代字符，在英文环境中该算法可以推荐到单词级别，中文环境貌似只能推荐到词级别。ES中计算搜索结果相似程度也是用的“编辑距离”么？","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458728,"discussion_content":"可以这么说，适应动态规划的要求是每一状态的最优解都可以由上一个状态的最优解推导出来，所以动态规划最核心的步骤是找出状态转移方程。如果没有办法通过上一个状态的最优解推导出当前状态的最优解，那么就不适合使用动态规划方法。\nES或者Solr中计算搜索结果的相似度，是使用的信息检索理论，不是简单的“编辑距离”。不过在一些query autocomplete的功能中可能会用到“编辑距离”。编辑距离更适合拉丁文，所以中文的拼音也可用到它，但是中文词就不太适合了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563382415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231068,"user_name":"l c","can_delete":false,"product_type":"c1","uid":1245596,"ip_address":"","ucode":"7D43CC471595EC","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/9c/1a750bc7.jpg","comment_is_top":false,"comment_ctime":1593573890,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5888541186","product_id":100021201,"comment_content":"个人认为这里对于编辑距离的讲解确实不够清晰，思考了很久分享一下我的理解：<br><br>首先初始化边界解，为什么，因为边界解是相对于空串的，我们知道空串到长度为n的字符串的最小操作数就是n，即全部添加或删除。<br><br>现在我们来思考这个问题，(mo, m)(3, 1, 2)是怎么来的呢？<br><br>1. 从mo往m添加，即表中从上往下添加。 我们知道mo已经大于了m，对于这样一个情况，我们还想做添加，唯一的方法是清空mo（2），然后添加一个m（1）。 这是3的真实由来。 编程中我们这样思考，我们知道mo变为empty最少需要2，那么mo变为empty再添加一个数，那么就是3了。<br>2. 从m往mo添加，即表中从左往右添加。 即添加o(1)。 一样的思路，我们知道m变为m需要0， 再添加一个数，就是1。<br>3. 替换，在做替换时，为什么我们要看左上？因为交换是基于左上的，我们相当于对mo, m各减少一个字符，得到（o, m）。然后思考这两个字符是否需要交换。 由于o不等于m，所以是需要的，那么交换。 我们知道m变为empty需要1，那么再交换一下把o变成m，就是2。<br><br>从上述中我们大概总结出来了一个具体实现：<br>1. 从上往下做添加操作，我们的操作数一定是，将当前行字符串先变为列字符串.substring(0, n - 1)。 再进行添加操作。 则总操作为T(i, j - 1) + 1。<br>2. 从左往右做添加操作，我们的操作一定是，将当前列字符串先变为行字符串.substring(0, m - 1)， 所需操作数为T(i - 1, j)， 再进行添加操作，则总操作为T(i - 1, j) + 1。<br>3. 做替换操作，从行字符串.substring(0, m - 1) 和 列字符串.substring(0, n-1) 开始考虑，我们已知二者转化操作为T(i - 1, j - 1)。 如果新加入的两个字母相等，说明没必要替换，总操作为T(i - 1, j - 1) + 0, 反之为T(i - 1, j - 1) + 1。 <br><br>取得所有可能的操作的最小值，就确立了当前行列字符串的转化所需最小操作数，从而解决了问题。","like_count":1,"discussions":[{"author":{"id":1526058,"avatar":"https://static001.geekbang.org/account/avatar/00/17/49/2a/e1c914c9.jpg","nickname":"梦幻的星空","note":"","ucode":"FACC1AE8994DEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385947,"discussion_content":"非常感谢，看了你的解释总算把公式和那张表格的理解统一起来了。之前单看表格误以为向下、向右是一个连续的过程，而且插入操作一直以为指的是只有插入没有删除，导致总有一些单元格没办法理解他的编辑距离是怎么得出来的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627357912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226695,"user_name":"等待","can_delete":false,"product_type":"c1","uid":1255162,"ip_address":"","ucode":"687A6BB673414E","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/fa/266bcb89.jpg","comment_is_top":false,"comment_ctime":1592186513,"is_pvip":false,"replies":[{"id":"84228","content":"你可以结合排列组合那一讲的内容来看，大意就是每个位置上有m种可能，那么n个位置就是m的n次方可能性","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1592670351,"ip_address":"","comment_id":226695,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887153809","product_id":100021201,"comment_content":"首先，计算量非常大。我们假设字符串 A 的长度是 n，而 B 字符串中不同的字符数量是 m，那么 A 所有可能的排列大致在 m^n 这个数量级。<br>这里的m^n是如何得知的呢？这个没看懂，谢谢","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498335,"discussion_content":"你可以结合排列组合那一讲的内容来看，大意就是每个位置上有m种可能，那么n个位置就是m的n次方可能性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592670351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180099,"user_name":"伊利丹怒风","can_delete":false,"product_type":"c1","uid":1042222,"ip_address":"","ucode":"D4C3DC84E7020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/2e/f317f6ad.jpg","comment_is_top":false,"comment_ctime":1582186613,"is_pvip":false,"replies":[{"id":"69984","content":"是的👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1582222515,"ip_address":"","comment_id":180099,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877153909","product_id":100021201,"comment_content":"其实例子的三种操作是对应状态转移表里面分别从：上、左、左上（斜线）变换过来的三种可能性。按这个理解会更容易一些，比如第一个A：m、B：m的理解：<br>1、从“左”过来：A：m，B：0，由于B：0-&gt;m，所以需要增加一个“插入”操作，也就是1+1=2<br>2、从“上”转移过来：A：0，B：m，由于A：0-&gt;m，所以需要增加一个“删除”操作，也就是1+1=2<br>3、从“左上”转移过来：A：0，B：0，由于A，B都增加了一个字符，所以需要增加一个“替换”操作，由于这里A、B增加的字符相等，所以无需“替换”，因此0+0 = 0","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484522,"discussion_content":"是的👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582222515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146936,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1572708374,"is_pvip":false,"replies":[{"id":"56930","content":"是个很好的想法，不过这里有个假设就是比较相似度的词它们拥有同样的前缀，对吧？例如，我们可以比较mouse和mouuse，但是可能没法处理mouse和nouse","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1572889552,"ip_address":"","comment_id":146936,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867675670","product_id":100021201,"comment_content":"      如果词库中的词条数量很大，利用编辑距离来匹配词条的相似度效率会比较低，因为编辑距离的计算是逐个字符进行匹配扫描的，做相似度匹配时需要选出编辑距离最短的那个词条，这样就需要扫描整个词库，才能获得具有最短距离的词条。<br>       我个人的优化方案：预先把每个词条的前缀全部剥离出来，某些词条的前缀可能是重复的，建立前缀与词条的一对多关系，利用哈希算法，得到每个前缀的哈希值，同时把各个前缀存贮于哈希表中，哈希表中除了存贮前缀哈希值，同时还存贮该前缀属于哪个词条，即词条的索引号，这样每次查询时，先把要查询的词条按相同的哈希算法，算出哈希值，再根据哈希值，得到该前缀所属的所有词条，这样就缩小了查询范围，然后再计算每个词条和被查询的词条的编辑距离，得到相近的词。<br>以上是我个人的一点浮浅理解，请老师指正。","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473063,"discussion_content":"是个很好的想法，不过这里有个假设就是比较相似度的词它们拥有同样的前缀，对吧？例如，我们可以比较mouse和mouuse，但是可能没法处理mouse和nouse","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572889552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76065,"user_name":"Hesher","can_delete":false,"product_type":"c1","uid":1026832,"ip_address":"","ucode":"99AB8B1704CB7E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/10/b812ff3e.jpg","comment_is_top":false,"comment_ctime":1552527447,"is_pvip":false,"replies":[{"id":"27842","content":"前面的理解是对的，对于第三种情况，如何替换的字母相同，那么就是0，否则是1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552582367,"ip_address":"","comment_id":76065,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5847494743","product_id":100021201,"comment_content":"似乎终于理解了表格里的内容：<br><br>对于前两种插入情况，都是空串插入，A和B各插入一个m，一共做了两次插入所以编辑距离为2；<br><br>对于第三种替换情况：A、B都插入m，不需要替换，所以全程替换操作一次都没有，所以编辑距离为0（插入操作不算在编辑距离的计数中吗？）。<br><br>不知道这样理解对不对？","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443160,"discussion_content":"前面的理解是对的，对于第三种情况，如何替换的字母相同，那么就是0，否则是1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552582367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645644,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/4c/edfbb57a.jpg","nickname":"Chuck.le","note":"","ucode":"04F3D28E43C671","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279680,"discussion_content":"所以针对替换操作不考虑插入操作 即不讲将A、B都插入m的操作计入总的编辑距离中 所以最后得到的结果是0吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591377613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62463,"user_name":"caohuan","can_delete":false,"product_type":"c1","uid":1256428,"ip_address":"","ucode":"4B092E33F3DF1E","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","comment_is_top":false,"comment_ctime":1548062905,"is_pvip":false,"replies":[{"id":"22153","content":"感谢你关于斐波那契数列的建议，我之前也考虑过，由于这个例子非常直观，也可以使用迭代实现，所以担心无法体现状态转移的特点。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1548122077,"ip_address":"","comment_id":62463,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5843030201","product_id":100021201,"comment_content":"本篇所得：动态规划 为寻找的最优解，它只关心 最优的一个解，其他的不会再考虑，比如求解 数组的最大 和最小值，一般只有一个（可能有重复的最值，但最值是相等的）。<br><br>工作和生活中，我们一般把大问题分解为小问题，再把小问题 分解为容易解答的问题，动态规划 就是在 容易解答的问题中选择最优解。<br><br>黄老师 在文中提到：搜索引擎输入的搜索词的查询和推荐，就是对 缺失和错误的字符串进行操作，比如我们输入错误的字符串A，和正确的字符串B，需要把字符串A改到B，需要把字符串 分解到字符 的小问题，然后进行‘增、删、改’等操作，这里运用 动态规划 寻找最优解，不需要使用排列 这么复杂的方法 因为排列计算消耗的时间会很长，运用动态规划 很节能。<br><br>今天所得：解决问题的方法 （1）不断的分解问题，把大问题分解为小问题，把小问题 再分解...直至到可以解答的问题;（2）使用动态规划 求解 小问题的 最优解。<br><br>回答老师的问题：用编辑距离对字符串状态转移资源消耗的标记，会浪费很多 内存和运算资源，可以把 字符串 再分割成字符，把 二个字符串的不同的字符 掏出来，再用编辑距离 处理，应该会更快一下、占用资源也少一些，老师是否同意，也期待 黄老师的指正。<br><br>老师 可以用 斐波那契数列 来说明 动态规划的问题，更让我们易理解。","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437224,"discussion_content":"感谢你关于斐波那契数列的建议，我之前也考虑过，由于这个例子非常直观，也可以使用迭代实现，所以担心无法体现状态转移的特点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548122077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61582,"user_name":"microsnow","can_delete":false,"product_type":"c1","uid":1121444,"ip_address":"","ucode":"3C24EE8D64E5E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/a4/3a7a0213.jpg","comment_is_top":false,"comment_ctime":1547727189,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5842694485","product_id":100021201,"comment_content":"看懵了。下一节表格下面说明，三种编辑距离分别是：替换、插入和删除字符。<br>本节：三种编辑距离 2,2,0。最后一个是替换。<br><br>替换操作理解，插入和删除不理解。老师帮忙分析下。<br>一种情况：<br>A字符为：m B字符为：mo<br><br>第二种情况：<br>A字符为：mo B字符为：mo<br>","like_count":1,"discussions":[{"author":{"id":1318890,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1f/ea/fb7276e5.jpg","nickname":"喧闹的内容","note":"","ucode":"947288C3F50FEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7265,"discussion_content":"估计他也不知道 都不知道上哪弄来的资料 然后把你绕晕 不明觉厉就是了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567440984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57358,"user_name":"菩提","can_delete":false,"product_type":"c1","uid":1309278,"ip_address":"","ucode":"19586AC50BEF1E","user_header":"","comment_is_top":false,"comment_ctime":1546761993,"is_pvip":false,"replies":[{"id":"20741","content":"你问题的第一句，具体是指表格中三种情况的第一种，是吧？这是指AB两者一开始都为空，那么A字符串增加1个m，编辑距离加1，然后B再增加一个m，所以编辑距离再加1变为2，当然这种不是最小值，最小值是0，也就是表中第三种情况","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546839491,"ip_address":"","comment_id":57358,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841729289","product_id":100021201,"comment_content":"老师，表格中插入一个字符m，编辑距离增加1。为什么说整体编辑距离是2呢？ <br>如果推导表格往下移动一格，字符串A变成mo，字符串B变成了m，这时应该如何推导啊？希望您帮忙解答一下，第一次实际接触动态规划，谢谢！<br>最近反复看这两篇动态规划，表格推导看的有点似懂非懂。望老师指导一下","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435541,"discussion_content":"你问题的第一句，具体是指表格中三种情况的第一种，是吧？这是指AB两者一开始都为空，那么A字符串增加1个m，编辑距离加1，然后B再增加一个m，所以编辑距离再加1变为2，当然这种不是最小值，最小值是0，也就是表中第三种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546839491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56230,"user_name":"ncubrian","can_delete":false,"product_type":"c1","uid":1123342,"ip_address":"","ucode":"24EF941A24D8A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/0e/c6e1f9ea.jpg","comment_is_top":false,"comment_ctime":1546409000,"is_pvip":false,"replies":[{"id":"20343","content":"我会在下一期放出sample code","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546452976,"ip_address":"","comment_id":56230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841376296","product_id":100021201,"comment_content":"黄老师，这期怎么没有sample code","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434958,"discussion_content":"我会在下一期放出sample code","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546452976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311873,"user_name":"崔晓乐","can_delete":false,"product_type":"c1","uid":2744727,"ip_address":"","ucode":"5B94010456CAD8","user_header":"https://static001.geekbang.org/account/avatar/00/29/e1/97/9387711d.jpg","comment_is_top":false,"comment_ctime":1631517794,"is_pvip":false,"replies":[{"id":"113574","content":"就是m个字符在n个位置的排列","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1632504296,"ip_address":"","comment_id":311873,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631517794","product_id":100021201,"comment_content":"状态转移那一节， “首先，，，那么A所有可能的排列在m^n这个数量级”，这句话什么意思，是A自己的字符排列的可能性吗？还是别的意思","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526779,"discussion_content":"就是m个字符在n个位置的排列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632504296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291555,"user_name":"吉茄","can_delete":false,"product_type":"c1","uid":1200207,"ip_address":"","ucode":"39056633EDAA51","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/4f/3afb7fda.jpg","comment_is_top":false,"comment_ctime":1620360128,"is_pvip":false,"replies":[{"id":"106075","content":"在下一讲会有递推的公式，之前是想先从表格开始来导出公式","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1621099670,"ip_address":"","comment_id":291555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620360128","product_id":100021201,"comment_content":"我觉得很难理解的原因是因为只有表格，而没有把公式给出来，导致每个人计算出来的跟表格给出的结果不一样。如果知道公式了就好理解了。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519505,"discussion_content":"在下一讲会有递推的公式，之前是想先从表格开始来导出公式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621099670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287597,"user_name":"何嘉伟","can_delete":false,"product_type":"c1","uid":2008250,"ip_address":"","ucode":"67EE6F637D5685","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a4/ba/9e063987.jpg","comment_is_top":false,"comment_ctime":1618043799,"is_pvip":true,"replies":[{"id":"104813","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1618683138,"ip_address":"","comment_id":287597,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618043799","product_id":100021201,"comment_content":"编辑距离 ：<br>无论如何你都要在下一步 加上一步操作 ， 除非你的两个字符是相等的状态。 两个字符相等的时候那么就要比较你当前这步操作和上一个字符的操作比较。这样的结果集就可以递推下来了。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518362,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618683138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269924,"user_name":"Rudy Ding","can_delete":false,"product_type":"c1","uid":1548979,"ip_address":"","ucode":"FA73483F36A47B","user_header":"https://static001.geekbang.org/account/avatar/00/17/a2/b3/72b81f59.jpg","comment_is_top":false,"comment_ctime":1608858103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608858103","product_id":100021201,"comment_content":"编辑距离看看这篇文章，容易理解：https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;91667128","like_count":0},{"had_liked":false,"id":266868,"user_name":"惜心（伟祺）","can_delete":false,"product_type":"c1","uid":1067846,"ip_address":"","ucode":"393DF1A9E81332","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/46/717d5cb9.jpg","comment_is_top":false,"comment_ctime":1607508724,"is_pvip":false,"replies":[{"id":"97158","content":"请问具体是那一块做不到全局最优？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1607794146,"ip_address":"","comment_id":266868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607508724","product_id":100021201,"comment_content":"局部最优 做不到全局最优","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511418,"discussion_content":"请问具体是那一块做不到全局最优？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607794146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249505,"user_name":"冉冉","can_delete":false,"product_type":"c1","uid":1441033,"ip_address":"","ucode":"51FCB3ED5A85D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/SBoicEsX0vbhwwDas5LbRGSy5Miba37hBXYYd9TJyHepUfIpr105WFPlCFkxlvKWfTgpLODkb6sswkTEpALANlPw/132","comment_is_top":false,"comment_ctime":1600676913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600676913","product_id":100021201,"comment_content":"“3 替换字符：由于&#39;m&#39;和&#39;m&#39;相同，因为从空串到各增加1个字符的编辑距离增加0，整体编辑距离为0”","like_count":0},{"had_liked":false,"id":236838,"user_name":"mtant","can_delete":false,"product_type":"c1","uid":2055287,"ip_address":"","ucode":"A7549381DFD6A7","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5c/77/bacc6b39.jpg","comment_is_top":false,"comment_ctime":1595560806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595560806","product_id":100021201,"comment_content":"关于编辑距离的图我也不太理解， 横向和纵向的就考虑一个是从空串开始算？ 而斜像就直接拿已有的比？ 我觉得应该都处在同一条线比，比如行是m，列是m， 插入的方式需要m+x -x 所以通过增加方式需要编辑距离2.为了配合下章的完整图表， 感觉当分析插入情况时候是必须先执行插入，然后根据插入后的情况进行删除，而不能提前删除。","like_count":0},{"had_liked":false,"id":231249,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1593614208,"is_pvip":false,"replies":[{"id":"86121","content":"我个人觉得理解状态转移方程是关键，如果你懂了为什么能写出这种状态转移方程，其他的细节就可以迎刃而解。<br>另外，你可以动手编个小程序，加深印象","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1594312970,"ip_address":"","comment_id":231249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593614208","product_id":100021201,"comment_content":"黄老师，动态规划这两篇我看了蛮久，但是还是不能理解，有啥好办法么。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500216,"discussion_content":"我个人觉得理解状态转移方程是关键，如果你懂了为什么能写出这种状态转移方程，其他的细节就可以迎刃而解。\n另外，你可以动手编个小程序，加深印象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594312970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229302,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1592961998,"is_pvip":false,"replies":[{"id":"85066","content":"没错，理解的到位","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1593404004,"ip_address":"","comment_id":229302,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592961998","product_id":100021201,"comment_content":"动态规划要理解状态转移方程是“动态”的。<br>通过上一次的状态来推导本次状态，而本次可以通过不同的上一次状态来推导，<br>例如某个上一次状态编辑操作数是2，而本次编辑操作次数需要1，那么从该上一次状态到本次状态的操作数就是2+1=3，主要关注状态的转移带来的变化。<br>最后根据具体问题取其中的最优解","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499431,"discussion_content":"没错，理解的到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593404004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224426,"user_name":"Chuck.le","can_delete":false,"product_type":"c1","uid":1645644,"ip_address":"","ucode":"04F3D28E43C671","user_header":"https://static001.geekbang.org/account/avatar/00/19/1c/4c/edfbb57a.jpg","comment_is_top":false,"comment_ctime":1591377867,"is_pvip":false,"replies":[{"id":"82603","content":"其实是根据编辑距离的定义，列举了所有可能的路径，然后去距离最短的路径。这都是人为的定义，如果我们认为替换操作是不合法的，或者说替换操作的代价不是1，而是2，那么又是另一种计算结果，但是过程还是一样的。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1591411374,"ip_address":"","comment_id":224426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591377867","product_id":100021201,"comment_content":"看完了所有的评论，还是有个问题没有解答，是关于编辑距离为2，2，0的问题，具体如下，麻烦老师：<br>是因为替换操作不考虑插入操作，即不将A、B都插入m的操作计入总的编辑距离中，所以最后得到的总的编辑距离结果是0吗？前述两种情况都考虑了前面得到m的插入操作，替换这一步咋么就不考虑了阿","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497471,"discussion_content":"其实是根据编辑距离的定义，列举了所有可能的路径，然后去距离最短的路径。这都是人为的定义，如果我们认为替换操作是不合法的，或者说替换操作的代价不是1，而是2，那么又是另一种计算结果，但是过程还是一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591411374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223606,"user_name":"lcqbug","can_delete":false,"product_type":"c1","uid":1268609,"ip_address":"","ucode":"08FA17F21BCEC5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","comment_is_top":false,"comment_ctime":1591143835,"is_pvip":false,"replies":[{"id":"82605","content":"有一些优化，例如可以只看编辑距离2之内的字符串，超过了就不放入考虑范围","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1591411523,"ip_address":"","comment_id":223606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591143835","product_id":100021201,"comment_content":"我输入一个错误的原始字符串，我要分析所有的合法字符串的编辑距离吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497186,"discussion_content":"有一些优化，例如可以只看编辑距离2之内的字符串，超过了就不放入考虑范围","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591411523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219140,"user_name":"夜怀澈","can_delete":false,"product_type":"c1","uid":1649739,"ip_address":"","ucode":"CB93E20CE74AA3","user_header":"https://static001.geekbang.org/account/avatar/00/19/2c/4b/87e31397.jpg","comment_is_top":false,"comment_ctime":1589954519,"is_pvip":false,"replies":[{"id":"81366","content":"这是个好问题，要看具体的应用。比如，有的错拼可能对应多种正确的词，系统无法准确的判定，需要用户的交互，这个时候就不适合直接替换。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1590280143,"ip_address":"","comment_id":219140,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589954519","product_id":100021201,"comment_content":"有个问题，纠正的前提是知道这个词的正确书写，那既然知道正确书写为什么还要去编辑改正呢？直接进行全量替换不行吗","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495696,"discussion_content":"这是个好问题，要看具体的应用。比如，有的错拼可能对应多种正确的词，系统无法准确的判定，需要用户的交互，这个时候就不适合直接替换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590280143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157211,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1575083280,"is_pvip":false,"replies":[{"id":"60335","content":"没错，这是最基本的原则，很高兴课程对你有帮助","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1575131106,"ip_address":"","comment_id":157211,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575083280","product_id":100021201,"comment_content":"原来动态规划适合解决：通常只关心一个最优解，而这个最优解是单调改变的。第一次感觉动态规划没那么恐怖了！","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476364,"discussion_content":"没错，这是最基本的原则，很高兴课程对你有帮助","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575131106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153757,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1574302798,"is_pvip":false,"replies":[{"id":"59298","content":"动态规划穷举了到当前状态的所有的可能性，然后去最优的。所以虽然都是m，有一种可能是先删除1个m，再添加1个m。从人的角度看这是多于的，不过机器需要这样一个过程，确保不会漏掉最优解","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1574444860,"ip_address":"","comment_id":153757,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1574302798","product_id":100021201,"comment_content":"老师，表格中的三种情况：<br>1.插入字符：B字符串为m的时候，A空串增加一个字符变为m，编辑距离增加1，整体编辑距离距离为2（这里A从空串插入一个字符m编辑距离不就是1么？为什么会是2）<br>2.反过来我也有一样的疑问<br>这里我不解是因为为什么要从空串算起，按照图表中的情况A和B不都是m么？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475262,"discussion_content":"动态规划穷举了到当前状态的所有的可能性，然后去最优的。所以虽然都是m，有一种可能是先删除1个m，再添加1个m。从人的角度看这是多于的，不过机器需要这样一个过程，确保不会漏掉最优解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574444860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168452,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","nickname":"Eleven","note":"","ucode":"FB4A0C8CA732BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56288,"discussion_content":"明白了，谢谢老师答疑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574469629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153073,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1574153303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574153303","product_id":100021201,"comment_content":"黄老师，<br>我们先考虑最简单的情况。假设字符串 A 和 B 都是空字符串，那么很明显这个时候编辑距离就是 0。如果 A 增加一个字符 a1，B 保持不动，编辑距离就增加 1。同样，如果 B 增加一个字符 b1，A 保持不动，编辑距离增加 1。但是，如果 A 和 B 有一个字符，那么问题就有点复杂了，我们可以细分为以下几种情况。(这个可以理解。)<br>我们先来看插入字符的情况。A 字符串是 a1 的时候，B 空串增加一个字符变为 b1；或者 B 字符串为 b1 的时候，A 空串增加一个字符变为 a1。很明显，这种情况下，编辑距离都要增加 1。(这个也可以理解。)<br>我们再来看替换字符的情况。当 A 和 B 都是空串的时候，同时增加一个字符。如果要加入的字符 a1 和 b1 不相等，表示 A 和 B 之间转化的时候需要替换字符，那么编辑距离就是加 1；如果 a1 和 b1 相等，无需替换，那么编辑距离不变。(这个有点懵啊)<br>最后，我们取上述三种情况中编辑距离的最小值作为当前的编辑距离。注意，这里我们只需要保留这个最小的值，而舍弃其他更大的值。这是为什么呢？因为编辑距离随着字符串的增长，是单调递增的。所以，要求最终的最小值，必须要保证对于每个子串，都取得了最小值。有了这点，之后我们就可以使用迭代的方式，一步步推导下去，直到两个字符串结束比较。(这里也有点懵)","like_count":0},{"had_liked":false,"id":126151,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1566338312,"is_pvip":false,"replies":[{"id":"46782","content":"过程上确实有类似，但是本质上有点不同。数学归纳法是可以归纳出结论的，而动态规划有的时候不行，我们需要把整个动态规划的过程跑完才能知道最终的结果。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1566411140,"ip_address":"","comment_id":126151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566338312","product_id":100021201,"comment_content":"我个人觉得编辑距离可以看作是一个数学归纳法的问题，不过这里的归纳是基于两个值而非一个。假设两个字符串的长度分别是m和n，编辑距离定义为d（m,n），为了让末尾匹配有三种做法，删除第一个字符串最后一个（等价为添加第一个字符串最后一个到第二个字符串），这样问题规约为d（m-1,n）+1.同样我们也可以删除第二个字符串最后一个，距离规约为d（m,n-1）+1。还有第三种就是同时删除两个字符串的末尾，这里又分为两种情况，分别对应于两个字符串最后一个是否相等（是否需要一次替换操作）d（m-1,n-1）+ (0 or 1),综合这三种，选取一种最小的，我们就可以得到一个递归式子。<br>请问老师，这种基于二维数学归纳法的方法和动态规划法是否在原理上等效，多谢！","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463851,"discussion_content":"过程上确实有类似，但是本质上有点不同。数学归纳法是可以归纳出结论的，而动态规划有的时候不行，我们需要把整个动态规划的过程跑完才能知道最终的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566411140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99204,"user_name":"风在身后","can_delete":false,"product_type":"c1","uid":1486579,"ip_address":"","ucode":"AA28C7C4FB6393","user_header":"https://static001.geekbang.org/account/avatar/00/16/ae/f3/f9b8b077.jpg","comment_is_top":false,"comment_ctime":1559177907,"is_pvip":false,"replies":[{"id":"35749","content":"是的，更详细的解释","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1559232000,"ip_address":"","comment_id":99204,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559177907","product_id":100021201,"comment_content":"编辑距离是从一个字符串变成另一个字符串的距离，那么拿suggestion来说，开始为空，然后人输入a，计算机生成a。就对应老师说的下面的情况。这个时候不应该把人输的a计算一个距离，所以应该是1，不应该是2<br><br>（1）中的情况比较绕，你可以这么来看，一开始A、B都是空串，A增加一个字符m，两者编辑距离是1，然后B增加一个字符m，即使两个m相等，编辑距离也会由1变为2，而不是维持在1，也不会降到0。因为编辑距离2表示的是A添加一个m字符，B再添加一个m字符。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452019,"discussion_content":"是的，更详细的解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559232000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78956,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1553308813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553308813","product_id":100021201,"comment_content":"感觉有点像运筹学里的最大流最小割问题的处理思路，但是现在已经忘记的差不多了，需要重新看看了","like_count":0},{"had_liked":false,"id":74208,"user_name":"徐云天","can_delete":false,"product_type":"c1","uid":1212091,"ip_address":"","ucode":"D48DBF0B3C2CA3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7e/bb/019c18fc.jpg","comment_is_top":false,"comment_ctime":1552145318,"is_pvip":false,"replies":[{"id":"27156","content":"刚开始确实不太好理解，多看几遍就能熟悉了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552160627,"ip_address":"","comment_id":74208,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552145318","product_id":100021201,"comment_content":"leetcode上面居然有edit distence的题目。对动态规划一窍不通，看看可不可以参考这篇文章写出算法来，有点难啊。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442497,"discussion_content":"刚开始确实不太好理解，多看几遍就能熟悉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552160627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69166,"user_name":"uiop","can_delete":false,"product_type":"c1","uid":1359952,"ip_address":"","ucode":"252B6214C07F04","user_header":"https://static001.geekbang.org/account/avatar/00/14/c0/50/90a8543a.jpg","comment_is_top":false,"comment_ctime":1550672324,"is_pvip":false,"replies":[{"id":"24568","content":"你第一段的理解是对的。<br><br>你说的第二段，其实是因为查询纠错的特殊性导致的，在实现的时候可以根据这个来优化，可以不需要完全遵守最基本的求编辑距离方法。我之所以还是选择讲解最基本的版本，主要是为了让大家能理解这个概念。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1550682867,"ip_address":"","comment_id":69166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550672324","product_id":100021201,"comment_content":"老师好，关于m行m列最大编辑距离是2，我的理解是:m和m我们用肉眼就很容易区别是相同的字母，所以编辑距离是0。但是计算机不是人，他必须遍历所有的方案，然后我们再从所有方案里的取最小的编辑距离。既然计算机是遍历所有的方案，那么最麻烦或者最复杂的方案也会遍历，那就是字符A和字符B都为空，同时插入m，所以最大编辑距离是2。<br><br>但是老师，也有另外一个思路感觉和上面我说的有点相悖。比如字符 mouuse 最终要匹配上 mouse，正确的单词mouse已经是存在的，我们只是拿用户输入的字符去匹配现成的合法单词，所以用户输入的m(字符A)，字符B是已经存在的了，因此不存在字符A和字符B同时为空的情况，那么就只需要字符A插入m即可，如果是这样的话，m行m列理解起来最大编辑距离也确实是1才对！","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439978,"discussion_content":"你第一段的理解是对的。\n\n你说的第二段，其实是因为查询纠错的特殊性导致的，在实现的时候可以根据这个来优化，可以不需要完全遵守最基本的求编辑距离方法。我之所以还是选择讲解最基本的版本，主要是为了让大家能理解这个概念。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550682867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66457,"user_name":"哈珀朋友","can_delete":false,"product_type":"c1","uid":1180872,"ip_address":"","ucode":"16BDDE3B75D327","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/c8/68263086.jpg","comment_is_top":false,"comment_ctime":1549941692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549941692","product_id":100021201,"comment_content":"动态规划唯一印象深的就是如何转递归为迭代","like_count":0},{"had_liked":false,"id":63995,"user_name":"猫茂懋","can_delete":false,"product_type":"c1","uid":1299692,"ip_address":"","ucode":"476821A6465BC4","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/ec/b6fa1dcf.jpg","comment_is_top":false,"comment_ctime":1548638390,"is_pvip":true,"replies":[{"id":"22714","content":"你可以先根据本讲最后的状态转移表来推，第10讲有最终推算结果供参考","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1548690371,"ip_address":"","comment_id":63995,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548638390","product_id":100021201,"comment_content":"编辑距离究竟怎么算的，怎么算都不对...","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437799,"discussion_content":"你可以先根据本讲最后的状态转移表来推，第10讲有最终推算结果供参考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548690371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61583,"user_name":"microsnow","can_delete":false,"product_type":"c1","uid":1121444,"ip_address":"","ucode":"3C24EE8D64E5E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/a4/3a7a0213.jpg","comment_is_top":false,"comment_ctime":1547727311,"is_pvip":false,"replies":[{"id":"21879","content":"这部分确实比较绕，这个推导过程不是按照我们直观的理解，它是列举了所有的可能。比从m到mo，可能的路径是删掉一个m，在分别增加m和o，那么编辑距离就是3了，不过这不是最优的，在后面min函数会取直接在m上加o的这种可能，距离为1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547753252,"ip_address":"","comment_id":61583,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547727311","product_id":100021201,"comment_content":"A字符串是m，B字符串是mo，直行替换操作，怎么是2？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436919,"discussion_content":"这部分确实比较绕，这个推导过程不是按照我们直观的理解，它是列举了所有的可能。比从m到mo，可能的路径是删掉一个m，在分别增加m和o，那么编辑距离就是3了，不过这不是最优的，在后面min函数会取直接在m上加o的这种可能，距离为1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547753252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60971,"user_name":"microsnow","can_delete":false,"product_type":"c1","uid":1121444,"ip_address":"","ucode":"3C24EE8D64E5E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/a4/3a7a0213.jpg","comment_is_top":false,"comment_ctime":1547599871,"is_pvip":false,"replies":[{"id":"21800","content":"具体是哪里不明白？我可以再详细解释一下","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547682202,"ip_address":"","comment_id":60971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547599871","product_id":100021201,"comment_content":"学习有点吃力，慌了。得补充一下相关资料。(已经网上查了，还是没看懂)黄老师，推荐下资料。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436688,"discussion_content":"具体是哪里不明白？我可以再详细解释一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547682202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59299,"user_name":"Joe","can_delete":false,"product_type":"c1","uid":1337998,"ip_address":"","ucode":"EC76699640B7BF","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/8e/7b6ea886.jpg","comment_is_top":false,"comment_ctime":1547348041,"is_pvip":false,"replies":[{"id":"21448","content":"确实编辑距离是一个很基础的指标，主要针对单个词。你说的问题可以使用取词干（stemming）来部分解决。<br>余弦相似度和欧式距离更多的是用于衡量两段文本之间的相似度，每个unique的单词都是向量的一维度，我会在第三大部分线性代数中，介绍这个例子。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547406747,"ip_address":"","comment_id":59299,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547348041","product_id":100021201,"comment_content":"编辑距离可能不能很好处理英文单词中的时态问题吧，比如has和have，have和had，对于搜索而言，其实意思差不多。<br>其它衡量字符串的相似性指标有：余弦相似性和欧式距离，之前做自然语言处理有所了解，但也不怎么清楚，麻烦老师解答下。谢谢","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436320,"discussion_content":"确实编辑距离是一个很基础的指标，主要针对单个词。你说的问题可以使用取词干（stemming）来部分解决。\n余弦相似度和欧式距离更多的是用于衡量两段文本之间的相似度，每个unique的单词都是向量的一维度，我会在第三大部分线性代数中，介绍这个例子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547406747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57301,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1546738665,"is_pvip":false,"replies":[{"id":"20730","content":"这是很好的思路👍！假设用户使用的拼音输入法","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546827979,"ip_address":"","comment_id":57301,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1546738665","product_id":100021201,"comment_content":"我觉得中文可以先转化为拼音","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435513,"discussion_content":"这是很好的思路👍！假设用户使用的拼音输入法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546827979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083952,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8a/30/567cd099.jpg","nickname":"童小牙","note":"","ucode":"8DC11073174F8F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2807,"discussion_content":"还有同音字怎么处理。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563949507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57140,"user_name":"NIXIHISI","can_delete":false,"product_type":"c1","uid":1339428,"ip_address":"","ucode":"F5101B9C2B2CE7","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/24/f6ab564c.jpg","comment_is_top":false,"comment_ctime":1546658434,"is_pvip":false,"replies":[{"id":"20649","content":"对，如果考虑位置可能性就多了，所以这个不适合排列这种暴力的穷举法","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546716647,"ip_address":"","comment_id":57140,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546658434","product_id":100021201,"comment_content":"老师，有个疑问，对文中&#39;&#39;对于插入一个字符，我们可以想成在 A 中插入来自 B 的一个字符，同样假设 B 中有 m 个不同的字符，那么也有 m 种可能性。&#39;&#39;这段话。疑问是：在A中插入字符只需要考虑B有m个不同字符（m种可能），而不用考虑插入到A的位置吗？考虑位置的话应该是m * （n+1）种可能吧？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435425,"discussion_content":"对，如果考虑位置可能性就多了，所以这个不适合排列这种暴力的穷举法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546716647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56971,"user_name":"梅坊帝卿","can_delete":false,"product_type":"c1","uid":1240270,"ip_address":"","ucode":"702F019BA3356C","user_header":"","comment_is_top":false,"comment_ctime":1546589894,"is_pvip":false,"replies":[{"id":"20588","content":"具体你是指原文的何处？能否引用一点原文，我来查看","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546649622,"ip_address":"","comment_id":56971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546589894","product_id":100021201,"comment_content":"看不太懂 为啥插入字符不讨论插入字符是否相同 替换字符时没实际的替换 而是讨论空串增加字符 增加字符不就是插入字符么 能否详细解释下 谢谢","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435340,"discussion_content":"具体你是指原文的何处？能否引用一点原文，我来查看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546649622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56260,"user_name":"李尧","can_delete":false,"product_type":"c1","uid":1119539,"ip_address":"","ucode":"4E85C9F4947B2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/33/5be2710e.jpg","comment_is_top":false,"comment_ctime":1546413156,"is_pvip":false,"replies":[{"id":"20322","content":"在下一讲我会补充完整","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546442216,"ip_address":"","comment_id":56260,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546413156","product_id":100021201,"comment_content":"表格推算到uu和us位置，多出的u不知道怎么处理了，可不可以补充下完整表格","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434967,"discussion_content":"在下一讲我会补充完整","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546442216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56158,"user_name":"StarkYanng","can_delete":false,"product_type":"c1","uid":1079296,"ip_address":"","ucode":"C95598A4F90528","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/00/31a6dd80.jpg","comment_is_top":false,"comment_ctime":1546398674,"is_pvip":false,"replies":[{"id":"20325","content":"对 m和n分别是两个字符串长度","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546442254,"ip_address":"","comment_id":56158,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546398674","product_id":100021201,"comment_content":"用dp求编辑距离的时间复杂度也是m×n是吧？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434947,"discussion_content":"对 m和n分别是两个字符串长度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546442254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56035,"user_name":"无法言喻.","can_delete":false,"product_type":"c1","uid":1322328,"ip_address":"","ucode":"7F375BE388D4FC","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/58/aa35c402.jpg","comment_is_top":false,"comment_ctime":1546388892,"is_pvip":false,"replies":[{"id":"20181","content":"编辑距离适合拉丁语系中的文本相似度，近义词确实不合适","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546393955,"ip_address":"","comment_id":56035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546388892","product_id":100021201,"comment_content":"如何得到b字符串……………近义词编辑距离不适用吧","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434919,"discussion_content":"编辑距离适合拉丁语系中的文本相似度，近义词确实不合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546393955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56010,"user_name":"seleven","can_delete":false,"product_type":"c1","uid":1338701,"ip_address":"","ucode":"B4D84E6B930448","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SsJajvXghPMDicSuOcx54mV6L9zv4KSKM2bKY0gsUdAH3oGCWzfRv9Q9HRljic2IvHzYFpRECp8SXGWhiaqGWFTKg/132","comment_is_top":false,"comment_ctime":1546384352,"is_pvip":false,"replies":[{"id":"20184","content":"在动态规划的（下）中，会提到背包问题的变种","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546394099,"ip_address":"","comment_id":56010,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546384352","product_id":100021201,"comment_content":"动态规划的问题还是“背包问题”经典啊😂😂。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434912,"discussion_content":"在动态规划的（下）中，会提到背包问题的变种","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546394099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}