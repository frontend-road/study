{"id":496883,"title":"27 | 图解挂起函数：原来你就是个状态机？","content":"<p>你好，我是朱涛。今天我们来研究Kotlin挂起函数的实现原理。</p><p>挂起函数，是整个Kotlin协程的核心，它的重要性不言而喻。几乎所有协程里的知识点，都离不开挂起函数。而且也正是因为挂起函数的原因，我们才可以使用协程简化异步任务。</p><p>今天这节课，我会从这个CPS转换开始说起，带你进一步挖掘它背后的细节。在这个过程中，我们还会接触到Kotlin库当中的协程基础元素：Continuation、CoroutineContext与挂起函数的底层联系。最后，我会带你灵活运用下这些知识点，以此进一步完善我们的KtHttp，让它可以直接支持挂起函数。</p><p>好，接下来，我们就正式开始吧！</p><h2>CPS转换背后的细节</h2><p>在<a href=\"https://time.geekbang.org/column/article/487085\">第15讲</a>当中，我们已经初步介绍过挂起函数的用法了：挂起函数，只是比普通的函数多了suspend关键字。有了这个suspend关键字以后，Kotlin编译器就会特殊对待这个函数，将其转换成一个带有Callback的函数，这里的Callback就是Continuation接口。</p><p>而这个过程，我们称之为CPS转换：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/92/3732f7a3473e82c5a5d109a18d87f992.gif?wh=720x405\" alt=\"图片\"></p><p>以上的CPS 转换过程中，函数的类型发生了变化：<code>suspend ()-&gt;String</code>  变成了  <code>(Continuation)-&gt; Any?</code>。这意味着，如果你在Java里访问一个Kotlin挂起函数getUserInfo()，会看到 getUserInfo()的类型是 <code>(Continuation)-&gt; Object</code>，也就是：接收 Continuation 为参数，返回值是Object。</p><!-- [[[read_end]]] --><p>而在这里，函数签名的变化可以分为两个部分：<strong>函数参数</strong>的变化和<strong>函数返回值</strong>的变化。</p><h3>CPS参数变化</h3><p>我们先来看函数参数的变化，suspend()变成 (Continuation)的情况，这里我们以第15讲当中的代码为例：</p><pre><code class=\"language-plain\">// 代码段1\n\nsuspend fun testCoroutine() {\n    val user = getUserInfo()\n    val friendList = getFriendList(user)\n    val feedList = getFeedList(user, friendList)\n    log(feedList)\n}\n\n//挂起函数\n// ↓\nsuspend fun getUserInfo(): String {\n    withContext(Dispatchers.IO) {\n        delay(1000L)\n    }\n    return \"BoyCoder\"\n}\n\n//挂起函数\n// ↓\nsuspend fun getFriendList(user: String): String {\n    withContext(Dispatchers.IO) {\n        delay(1000L)\n    }\n    return \"Tom, Jack\"\n}\n\n//挂起函数\n// ↓\nsuspend fun getFeedList(user: String, list: String): String {\n    withContext(Dispatchers.IO) {\n        delay(1000L)\n    }\n    return \"{FeedList..}\"\n}\n</code></pre><p>上面这段代码，testCoroutine()是一个挂起函数，它的内部依次调用了三个挂起函数。而如果我们从Java的角度来看待testCoroutine()的话，代码中所有的参数都会发生变化。如下所示：</p><pre><code class=\"language-plain\">// 代码段2\n\n//                 变化在这里\n//                     ↓\nfun testCoroutine(continuation: Continuation): Any? {\n//                          变化在这里\n//                              ↓\n    val user = getUserInfo(continuation)\n//                                        变化在这里\n//                                            ↓\n    val friendList = getFriendList(user, continuation)\n//                                          变化在这里\n//                                              ↓\n    val feedList = getFeedList(friendList, continuation)\n    log(feedList)\n}\n</code></pre><p>可见，在这里的testCoroutine()当中，每一次函数调用的时候，continuation都会作为最后一个参数传到挂起函数里。不过这一步是Kotlin编译器帮我们做的，我们开发者是无感知的。还记得第15讲我留下的思考题吗：<strong>为什么挂起函数可以调用挂起函数，普通函数则不能？</strong></p><p>其实，这个问题的答案，我们从代码段2就可以看出来。请想象一下，如果testCoroutine()只是一个普通函数，那它就不会有continuation这个参数了，这样getUserInfo()、getFriendList()、getFeedList()这几个挂起函数自然也就无法被调用了。</p><h3>CPS返回值变化</h3><p>好，接下来我们看看getUserInfo()的返回值类型的变化：</p><pre><code class=\"language-plain\">// 代码段3\n\nsuspend fun getUserInfo(): String {}\n\n//                                  变化在这里\n//                                     ↓\nfun getUserInfo(cont: Continuation): Any? {}\n</code></pre><p>从上面的代码里，可以看到getUserInfo()的返回值类型从String变成“Any?”。你肯定会好奇，函数原本的String返回值难道丢失了吗？如果原本的返回值类型丢失了，那么程序执行难道不会出问题吗？</p><p>其实并不是这样。Kotlin官方之所以要弄这一套CPS转换规则，它必然是“<strong>等价转换</strong>”。也就是说，String这个原本的返回值类型肯定不会消失，而是会换一种形式存在。只是String存在的形式，经过Kotlin<strong>反编译成Java之后会丢失</strong>。如果你直接在Java当中调用getUserInfo()的话，就会发现String这个返回值类型成为了Continuation的泛型类型。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/06/36eebc96c2dd6acf0c178068db0f4a06.png?wh=1582x426\" alt=\"图片\"></p><p>所以，对于getUserInfo()这个方法，经过CPS转换后，它完整的函数签名应该是这样的：</p><pre><code class=\"language-plain\">// 代码段4\n\nsuspend fun getUserInfo(): String {}\n\n//                                变化在这里\n//                                    ↓\nfun getUserInfo(cont: Continuation&lt;String&gt;): Any? {}\n</code></pre><p>这时候，我们就可以更新第15讲当中的那个CPS动图了：</p><p><img src=\"https://static001.geekbang.org/resource/image/78/yy/784ce5776def5255e6d300cd5890a6yy.gif?wh=1080x608\" alt=\"图片\"></p><p>好，现在我们知道了，挂起函数原本的返回值类型String只是挪了个地方，所以，Kotlin编译器的CPS转换仍然是等价的转换。也就是：<code>suspend () -&gt; String</code> 转换成 <code>(Continuation&lt;String&gt;) -&gt; Any?</code>。不过，<strong>这里的“Any?”又是干什么的呢？</strong></p><p>其实，挂起函数经过 CPS 转换后，它的返回值有一个重要作用：<strong>标志该挂起函数有没有被挂起</strong>。这听起来有点绕：挂起函数，就是可以被挂起的函数，它还能不被挂起吗？</p><p>是的，挂起函数也能不被挂起。</p><p>让我们来理清几个概念。只要有suspend修饰的函数，它就是挂起函数，比如我们前面的例子：</p><pre><code class=\"language-plain\">// 代码段5\n\nsuspend fun getUserInfo(): String {\n    withContext(Dispatchers.IO) {\n        delay(1000L)\n    }\n    return \"BoyCoder\"\n}\n</code></pre><p>当getUserInfo()执行到withContext{} 的时候，就会返回 <code>CoroutineSingletons.COROUTINE_SUSPENDED</code> 表示函数被挂起了。</p><p>现在问题来了，请问下面这个函数是挂起函数吗？</p><pre><code class=\"language-plain\">// 代码段6\n\n// suspend 修饰\n// ↓\nsuspend fun noSuspendFriendList(user: String): String{\n    // 函数体跟普通函数一样\n    return \"Tom, Jack\"\n}\n</code></pre><p>这个其实是 <strong>noSuspendFriendList()方法</strong>，它的方法体跟普通函数一样。它跟一般的挂起函数有个区别：在执行的时候，它并不会被挂起，因为它就是个普通函数。当你写出以下这样的代码后，IDE也会提示你，suspend是多余的：</p><p><img src=\"https://static001.geekbang.org/resource/image/35/d3/35de8c0f0bbabbce0ca8dee2840d33d3.png?wh=624x119\" alt=\"图片\"></p><p>也就是，当我们调用noSuspendFriendList()这个挂起函数的时候，它不会真正挂起，而是会直接返回String类型：<code>\"no suspend\"</code>。针对这样的挂起函数，你可以把它看作是<strong>伪挂起函数</strong>。</p><p>所以到这里，挂起函数经过CPS转换后，返回值变成“Any?”的原因也就清晰了：</p><p>由于suspend修饰的函数，既可能返回 <code>CoroutineSingletons.COROUTINE_SUSPENDED</code>，也可能返回实际结果 <code>\"no suspend\"</code>，甚至可能返回 null，为了适配所有的可能性，CPS 转换后的函数返回值类型就只能是 <code>Any?</code> 了。</p><p>可见我在第15讲当中给出的这个CPS动图，仅仅只是粗略模拟了协程的CPS流程，其中还有很多细节没有体现出来。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/22/03d156ec6a31d650c6634f486dc06222.gif?wh=720x405\" alt=\"图片\"></p><p>那么，为了让你对挂起函数的底层实现原理有一个更加清晰的认识，接下来，我们来看看挂起函数反编译之后会变成什么样。</p><h2>挂起函数的反编译</h2><p>我们知道，通过查看Kotlin反编译后的字节码，可以帮助我们理解Kotlin的底层原理。不过，和往常不一样的是，这次我不会直接贴反编译后的代码，因为它的逻辑比较复杂。</p><p>所以，为了方便你理解，接下来我贴出的代码是我用Kotlin翻译后<strong>大致等价</strong>的代码，改善了可读性，抹掉了不必要的细节。当你理解其中的思想后，再去看反编译后的Java代码，会更轻松一些。</p><p>好，我们进入正题，这是我们即将研究的对象，testCoroutine()反编译前的代码：</p><pre><code class=\"language-plain\">// 代码段7\n\nsuspend fun testCoroutine() {\n    log(\"start\")\n    val user = getUserInfo()\n    log(user)\n    val friendList = getFriendList(user)\n    log(friendList)\n    val feedList = getFeedList(friendList)\n    log(feedList)\n}\n</code></pre><p>接下来我们来分析testCoroutine()的函数体，它相当复杂，涉及到三个挂起函数的调用。</p><p>首先，在 testCoroutine() 函数里，会多出一个 ContinuationImpl 的子类，它是整个协程挂起函数的核心。</p><pre><code class=\"language-plain\">// 代码段8\n\nfun testCoroutine(completion: Continuation&lt;Any?&gt;): Any? {\n    // TestContinuation本质上是匿名内部类\n    class TestContinuation(completion: Continuation&lt;Any?&gt;?) : ContinuationImpl(completion) {\n        // 表示协程状态机当前的状态\n        var label: Int = 0\n        // 协程返回结果\n        var result: Any? = null\n\n        // 用于保存之前协程的计算结果\n        var mUser: Any? = null\n        var mFriendList: Any? = null\n\n        // invokeSuspend 是协程的关键\n        // 它最终会调用 testCoroutine(this) 开启协程状态机\n        // 状态机相关代码就是后面的 when 语句\n        // 协程的本质，可以说就是 CPS + 状态机\n        override fun invokeSuspend(_result: Result&lt;Any?&gt;): Any? {\n            result = _result\n            label = label or Int.Companion.MIN_VALUE\n            return testCoroutine(this)\n        }\n    }\n}\n</code></pre><p>代码中的这个TestContinuation类，是Kotlin编译器帮我们创建的匿名内部类，这里为了方便才用的TestContinuation这个名称。在这个类当中定义了几个成员变量：</p><ul>\n<li>label是用来代表协程状态机当中状态的；</li>\n<li>result是用来存储当前挂起函数执行结果的；</li>\n<li>mUser、mFriendList则是用来存储历史挂起函数执行结果的；</li>\n<li>invokeSuspend这个函数，是整个状态机的入口，它会将执行流程转交给testCoroutine()进行再次调用。</li>\n</ul><p>接下来是要判断 testCoroutine 是不是初次运行，如果是初次运行，我们就要创建一个 TestContinuation 的实例对象。</p><pre><code class=\"language-plain\">// 代码段9\n\n//                    ↓\nfun testCoroutine(completion: Continuation&lt;Any?&gt;): Any? {\n    ...\n    val continuation = if (completion is TestContinuation) {\n        completion\n    } else {\n        //                作为参数\n        //                   ↓\n        TestContinuation(completion)\n    }\n}\n</code></pre><p>也就是：</p><ul>\n<li>invokeSuspend 最终会调用 testCoroutine，然后走到这个判断语句；</li>\n<li>如果是初次运行，会创建一个 TestContinuation 对象，completion 作为参数；</li>\n<li>这相当于用一个<strong>新的</strong> Continuation 包装了<strong>旧的</strong> Continuation；</li>\n<li>如果不是初次运行，直接将 completion 赋值给 continuation；</li>\n<li>这说明 continuation 在整个运行期间，只会产生一个实例，这能极大地节省内存开销（对比CallBack）。</li>\n</ul><p>接下来是几个变量的定义：</p><pre><code class=\"language-plain\">// 代码段10\n\n// 三个变量，对应原函数的三个变量\nlateinit var user: String\nlateinit var friendList: String\nlateinit var feedList: String\n\n// result 接收协程的运行结果\nvar result = continuation.result\n\n// suspendReturn 接收挂起函数的返回值\nvar suspendReturn: Any? = null\n\n// CoroutineSingletons 是个枚举类\n// COROUTINE_SUSPENDED 代表当前函数被挂起了\nval sFlag = CoroutineSingletons.COROUTINE_SUSPENDED\n</code></pre><p>上面的代码，分别代表了函数当中的临时变量、挂起函数执行结果，以及是否挂起的标志位。接着，我们来看看协程状态机的核心逻辑：</p><pre><code class=\"language-plain\">// 代码段11\n\nwhen (continuation.label) {\n    0 -&gt; {\n        // 检测异常\n        throwOnFailure(result)\n\n        log(\"start\")\n        // 将 label 置为 1，准备进入下一次状态\n        continuation.label = 1\n\n        // 执行 getUserInfo\n        suspendReturn = getUserInfo(continuation)\n\n        // 判断是否挂起\n        if (suspendReturn == sFlag) {\n            return suspendReturn\n        } else {\n            result = suspendReturn\n            //go to next state\n        }\n    }\n\n    1 -&gt; {\n        throwOnFailure(result)\n\n        // 获取 user 值\n        user = result as String\n        log(user)\n        // 将协程结果存到 continuation 里\n        continuation.mUser = user\n        // 准备进入下一个状态\n        continuation.label = 2\n\n        // 执行 getFriendList\n        suspendReturn = getFriendList(user, continuation)\n\n        // 判断是否挂起\n        if (suspendReturn == sFlag) {\n            return suspendReturn\n        } else {\n            result = suspendReturn\n            //go to next state\n        }\n    }\n\n    2 -&gt; {\n        throwOnFailure(result)\n\n        user = continuation.mUser as String\n\n        // 获取 friendList 的值\n        friendList = result as String\n        log(friendList)\n\n        // 将协程结果存到 continuation 里\n        continuation.mUser = user\n        continuation.mFriendList = friendList\n\n        // 准备进入下一个状态\n        continuation.label = 3\n\n        // 执行 getFeedList\n        suspendReturn = getFeedList(user, friendList, continuation)\n\n        // 判断是否挂起\n        if (suspendReturn == sFlag) {\n            return suspendReturn\n        } else {\n            result = suspendReturn\n            //go to next state\n        }\n    }\n\n    3 -&gt; {\n        throwOnFailure(result)\n\n        user = continuation.mUser as String\n        friendList = continuation.mFriendList as String\n        feedList = continuation.result as String\n        log(feedList)\n        loop = false\n    }\n}\n</code></pre><p>在testCoroutine()这个方法体当中，一共调用了三个挂起函数，这三个挂起函数把整个方法体分割成了4个部分，这四个部分就是上面when表达式当中的4种情况。</p><ul>\n<li>when 表达式实现了协程状态机；</li>\n<li>continuation.label 是状态流转的关键，continuation.label 改变一次，就代表了挂起函数被调用了一次；</li>\n<li>每次挂起函数执行完后，都会检查是否发生异常；</li>\n<li>testCoroutine 里的原本的代码，被<strong>拆分</strong>到状态机里各个状态中，<strong>分开执行</strong>；</li>\n<li>getUserInfo(continuation)、getFriendList(user, continuation)、getFeedList(friendList, continuation) 三个函数调用的是同一个 continuation实例；</li>\n<li>如果一个函数被挂起了，它的返回值会是 <code>CoroutineSingletons.COROUTINE_SUSPENDED</code>；</li>\n<li>在挂起函数执行的过程中，状态机会把之前的结果以成员变量的方式保存在 continuation中。</li>\n</ul><p>上面这一大串文字和代码看着是不是有点晕？你可以再结合着来看看这个视频演示。</p><p><video poster=\"https://media001.geekbang.org/1023f2e30d344804a84cf88c172db7d3/snapshots/566ea25ac3d842afa19b84ad1cd528d6-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/53fcd64-17fa77f850f-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/748351c4bde24552a8930759afafd0e5/d2adc1d3d7214a54933c0b7873e5f261-b4083ddbe2eb4d44f622bd740429c2eb-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>那到这里是不是就结束了呢？并不，因为这个动画仅演示了每个协程正常挂起的情况。如果协程并没有真正挂起呢？协程状态机会怎么运行？</p><h3>协程未挂起的情况</h3><p>要验证也很简单，我们将其中一个挂起函数改成<strong>伪挂起函数</strong>即可。</p><pre><code class=\"language-plain\">// 代码段12\n\n// “伪”挂起函数\n// 虽然它有 suspend 修饰，但执行的时候并不会真正挂起，因为它函数体里没有其他挂起函数\n//  ↓\nsuspend fun noSuspendFriendList(user: String): String{\n    return \"Tom, Jack\"\n}\n\nsuspend fun testNoSuspend() {\n    log(\"start\")\n    val user = getUserInfo()\n    log(user)                  \n    //                  变化在这里\n    //                      ↓\n    val friendList = noSuspendFriendList(user)\n    log(friendList)\n    val feedList = getFeedList(friendList)\n    log(feedList)\n}\n</code></pre><p>testNoSuspend()这样的一个函数体，它反编译后的代码逻辑是怎么样的？</p><p>答案其实很简单，<strong>它的结构跟前面的testCoroutine()是一致的，只是函数名字变了而已，Kotlin编译器CPS转换的逻辑只认suspend关键字</strong>。就算挂起函数内部并没有挂起的逻辑，Kotlin编译器也照样会进行CPS转换。</p><pre><code class=\"language-plain\">// 代码段13\n\nwhen (continuation.label) {\n    0 -&gt; {\n        ...\n    }\n\n    1 -&gt; {\n        ...\n        //               变化在这里\n        //                   ↓\n        suspendReturn = noSuspendFriendList(user, continuation)\n\n        // 判断是否挂起\n        if (suspendReturn == sFlag) {\n            return suspendReturn\n        } else {\n            result = suspendReturn\n            //go to next state\n        }\n    }\n\n    2 -&gt; {\n        ...\n    }\n\n    3 -&gt; {\n        ...\n    }\n}\n</code></pre><p>那testNoSuspend()的协程状态机是怎么运行的呢？</p><p>其实我们也很容易能想到，continuation.label = 0, 2, 3的情况都是不变的，唯独在 label = 1 的时候，<code>suspendReturn == sFlag</code> 这里会有区别。</p><p>具体区别我们还是通过动画来看吧：</p><p><video poster=\"https://media001.geekbang.org/893cb12324fb4b5ab418ed52410dc3c1/snapshots/c5fa2b7ce0ae48bdb6de0259130ed0ae-00003.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/2160bff8-17fa77f82ae-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/cf691fc051da4603b1ce16b8c7693d48/bba41ef7bff945a1a130687db44ba2d3-67697a33645339e10e966cd9b28a2d03-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>通过动画我们很清楚地看到了，对于“<strong>伪挂起函数</strong>”，<code>suspendReturn == sFlag</code> 是会走 else 分支的，在 else 分支里，协程状态机会直接进入下一个状态。</p><p>现在只剩最后一个问题了：</p><pre><code class=\"language-plain\">// 代码段14\n\nif (suspendReturn == sFlag) {\n} else {\n    // 具体代码是如何实现的？\n    //       ↓\n    //go to next state\n}\n</code></pre><p>答案其实也很简单：如果你去看协程状态机的字节码反编译后的 Java，会看到很多 <strong>label</strong>。协程状态机底层字节码，是通过 label来实现这个 <code>go to next state</code> 的。由于 Kotlin 没有类似 goto 的语法，下面我用伪代码来表示 <code>go to next state</code> 的逻辑。</p><pre><code class=\"language-plain\">// 代码段15\n\n// 伪代码\n// Kotlin 没有这样的语法\n// ↓      ↓\nlabel: whenStart\nwhen (continuation.label) {\n    0 -&gt; {\n        ...\n    }\n\n    1 -&gt; {\n        ...\n        suspendReturn = noSuspendFriendList(user, continuation)\n        if (suspendReturn == sFlag) {\n            return suspendReturn\n        } else {\n            result = suspendReturn\n            // 让程序跳转到 label 标记的地方\n            // 从而再执行一次 when 表达式\n            goto: whenStart\n        }\n    }\n\n    2 -&gt; {\n        ...\n    }\n\n    3 -&gt; {\n        ...\n    }\n}\n</code></pre><p>需要注意的是：以上只是伪代码，它只是跟协程状态机字节码逻辑上“<strong>大致等价</strong>”。真实的字节码反编译出来的Java代码，它的可读性要差很多，也更难理解。</p><pre><code class=\"language-java\">// 代码段16\n\n// 看不懂也没关系，有个印象即可\n\n@Nullable\npublic static final Object testCoroutine(@NotNull Continuation $completion) {\n&nbsp; &nbsp; Object $continuation;\n&nbsp; &nbsp; label37: {\n&nbsp; &nbsp; &nbsp; &nbsp; if ($completion instanceof &lt;TestSuspendKt$testCoroutine$1&gt;) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $continuation = (&lt;TestSuspendKt$testCoroutine$1&gt;)$completion;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).label &amp; Integer.MIN_VALUE) != 0) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).label -= Integer.MIN_VALUE;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break label37;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; $continuation = new ContinuationImpl($completion) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // $FF: synthetic field\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Object result;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int label;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Object L$0;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Object L$1;\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @Nullable\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public final Object invokeSuspend(@NotNull Object $result) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.result = $result;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.label |= Integer.MIN_VALUE;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return TestSuspendKt.testCoroutine(this);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; };\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; Object var10000;\n&nbsp; &nbsp; label31: {\n&nbsp; &nbsp; &nbsp; &nbsp; String user;\n&nbsp; &nbsp; &nbsp; &nbsp; String friendList;\n&nbsp; &nbsp; &nbsp; &nbsp; Object var6;\n&nbsp; &nbsp; &nbsp; &nbsp; label30: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Object $result = ((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).result;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var6 = IntrinsicsKt.getCOROUTINE_SUSPENDED();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; switch(((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).label) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ResultKt.throwOnFailure($result);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; log(\"start\");\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).label = 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var10000 = getUserInfo((Continuation)$continuation);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (var10000 == var6) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return var6;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 1:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ResultKt.throwOnFailure($result);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var10000 = $result;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 2:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user = (String)((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).L$0;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ResultKt.throwOnFailure($result);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var10000 = $result;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break label30;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 3:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; friendList = (String)((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).L$1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user = (String)((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).L$0;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ResultKt.throwOnFailure($result);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var10000 = $result;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break label31;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; throw new IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\");\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user = (String)var10000;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; log(user);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).L$0 = user;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).label = 2;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var10000 = getFriendList(user, (Continuation)$continuation);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (var10000 == var6) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return var6;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; friendList = (String)var10000;\n&nbsp; &nbsp; &nbsp; &nbsp; log(friendList);\n&nbsp; &nbsp; &nbsp; &nbsp; ((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).L$0 = user;\n&nbsp; &nbsp; &nbsp; &nbsp; ((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).L$1 = friendList;\n&nbsp; &nbsp; &nbsp; &nbsp; ((&lt;TestSuspendKt$testCoroutine$1&gt;)$continuation).label = 3;\n&nbsp; &nbsp; &nbsp; &nbsp; var10000 = getFeedList(friendList, (Continuation)$continuation);\n&nbsp; &nbsp; &nbsp; &nbsp; if (var10000 == var6) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return var6;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; String feedList = (String)var10000;\n&nbsp; &nbsp; log(feedList);\n&nbsp; &nbsp; return Unit.INSTANCE;\n}\n</code></pre><p>当然，对于上面反编译出来的Java代码，即使你看不懂也没关系，你只需要理解我们前面讲解的逻辑即可。<strong>本质上来说</strong>，Kotlin协程就是通过 label 代码段嵌套，配合 switch 巧妙构造出一个状态机结构，这种逻辑比较复杂，相对难懂一些。毕竟 Java 的 label 在实际开发中用的很少。</p><blockquote>\n<p>注意：Kotlin挂起函数反编译出来的Java代码，会因为实际开发环境的不同出现细微差异。随着Kotlin编译器的发展，将来可能会对这部分逻辑进一步优化，但它的核心状态机思想是不会轻易改变的。</p>\n</blockquote><p>好，到现在，我们就已经彻底弄懂挂起函数的实现原理了。接下来，我们就结合刚刚学习的内容，来进一步思考实战一下。</p><h2>思考与实战</h2><p>在上节课我曾提到过，Kotlin协程的源代码其实分为三层，其中基础层当中的“基础概念”尤为重要。那么，Kotlin官方为我们提供了哪些与挂起函数相关的基础元素呢？</p><p>我们首先想到的，肯定就是<a href=\"https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/coroutines/Continuation.kt\">Continuation.kt</a>，在这里面，确实也可以找到一些跟挂起函数相关的基础元素。</p><pre><code class=\"language-plain\">// 代码段17\n\npublic interface Continuation&lt;in T&gt; {\n    public val context: CoroutineContext\n\n    public fun resumeWith(result: Result&lt;T&gt;)\n}\n\n@Suppress(\"WRONG_MODIFIER_TARGET\")\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n\n</code></pre><p>在上面的代码中，我们最熟悉的就是Continuation这个接口了，除此之外，还有一个顶层的变量值得我们注意：<strong>suspend inline val coroutineContext</strong>。要知道，我们从来都是用suspend修饰函数的，从未见过suspend修饰变量的情况。</p><p>如果我们依葫芦画瓢，创建一个类似的顶层变量的话，编译器甚至会报错：</p><pre><code class=\"language-plain\">// 代码段18\n\n// 报错\npublic suspend inline val test: CoroutineContext\n    get() = TODO()\n</code></pre><p>由此可见，suspend的这种用法只是一种特殊用法。结合“public suspend inline val”这几个关键字来看，我们其实可以大致推测出它的作用：它是一个只有在挂起函数作用域下，才能访问的顶层的不可变的变量。这里的inline，意味着它的具体实现会被直接复制到代码的调用处。</p><h3>17讲思考题解答</h3><p>为了验证我们前面的猜测，我们可以回过头来看看<a href=\"https://time.geekbang.org/column/article/488571\">第17讲</a>的思考题：</p><pre><code class=\"language-plain\">// 代码段19\n\n\n\nimport kotlinx.coroutines.*\nimport kotlin.coroutines.coroutineContext\n\n//                        挂起函数能可以访问协程上下文吗？\n//                                 ↓                              \nsuspend fun testContext() = coroutineContext\n</code></pre><p>如果你将上面的代码反编译成Java的话，它就会变成这样：</p><pre><code class=\"language-plain\">// 代码段20\n\npublic static final Object testContext(Continuation $completion) {\n  return $completion.getContext();\n}\n</code></pre><p>由此可见，代码段17当中的“suspend inline val coroutineContext”，本质上就是Kotlin官方提供的一种方便开发者在挂起函数当中，获取协程上下文的手段。它的具体实现，其实是Kotlin编译器来完成的。</p><pre><code class=\"language-plain\">// 代码段19\n\n\n\nimport kotlinx.coroutines.*\nimport kotlin.coroutines.coroutineContext\n\n//                  Continuation当中的coroutineContext\n//                                 ↓                              \nsuspend fun testContext() = coroutineContext\n</code></pre><p>到这里，你就会发现一个有趣的现象：<strong>我们在挂起函数当中无法直接访问Continuation对象，但可以访问到Continuation当中的coroutineContext</strong>。要知道，正常情况下，我们想要访问Continuation.coroutineContext，首先是要拿到Continuation对象的。</p><p>但是，Kotlin官方通过“suspend inline val coroutineContext”这个顶层变量，让我们开发者能直接拿到coroutineContext，却对Continuation毫无感知。</p><p>所以到这里，我们其实也就可以回答第17节课思考题的问题了。</p><blockquote>\n<p>课程里，我提到了“挂起函数”与 CoroutineContext 也有着紧密的联系，请问，你能找到具体的证据吗？</p>\n</blockquote><p>解答：挂起函数与 CoroutineContext 确实有着紧密的联系。每个挂起函数当中都会有Continuation，而每个Continuation当中都会有coroutineContext。并且，我们在挂起函数当中，就可以直接访问当前的coroutineContext。</p><h3>KtHttp支持挂起函数</h3><p>在<a href=\"https://time.geekbang.org/column/article/488985\">第18讲</a>当中，我们并没有让KtHttp直接支持挂起函数，当时我们的做法是给KtCall扩展了一个await()方法，从而实现挂起函数调用的。</p><p>那么，经过这节课的学习，我们就可以来尝试让KtHttp直接支持挂起函数了，也就是我们可以这样来写代码：</p><pre><code class=\"language-plain\">interface ApiServiceV7 {\n\n    @GET(\"/repo\")\n    // 1，挂起函数\n    suspend fun reposSuspend(\n        @Field(\"lang\") lang: String,\n        @Field(\"since\") since: String\n    ): RepoList\n}\n\n\n\nprivate fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n        // 省略\n        return when {\n        isSuspend(method) -&gt; {\n            // 2，支持挂起函数\n        }\n        isKtCallReturn(method) -&gt; {\n            // 省略\n        }\n        isFlowReturn(method) -&gt; {\n            // 省略\n        }\n        else -&gt; {\n            // 省略\n        }\n    }\n}\n\n// 3，判断是不是挂起函数\nprivate fun isSuspend(method: Method) = method.kotlinFunction?.isSuspend ?: false\n\n\n// 4，真正执行网络请求的方法\nsuspend fun &lt;T: Any&gt; realCall(call: Call, gson: Gson, type: Type): T = suspendCancellableCoroutine { continuation -&gt;\n    call.enqueue(object : Callback {\n        override fun onFailure(call: Call, e: IOException) {\n            continuation.resumeWithException(e)\n        }\n\n        override fun onResponse(call: Call, response: okhttp3.Response) {\n            try {\n                val t = gson.fromJson&lt;T&gt;(response.body?.string(), type)\n                continuation.resume(t)\n            } catch (e: Exception) {\n                continuation.resumeWithException(e)\n            }\n        }\n    })\n\n    continuation.invokeOnCancellation {\n        call.cancel()\n    }\n}\n</code></pre><p>这段代码一共有4个注释，我们一个个看：</p><ul>\n<li>注释1，这其实就是我们希望达到的效果，可以在ApiServiceV接口当中直接定义挂起函数。</li>\n<li>注释2，在KtHttp 6.0版本的基础上，我们在invoke()的when表达式里增加了一个分支：isSuspend()。</li>\n<li>注释3，isSuspend()的实现有一个细节，这里我们使用了“method.kotlinFunction”，将Java的method转换成了kotlinFunction，这样一来，它就变成了一个Kotlin反射的对象了。因此，我们就可以查询到一些Kotlin相关的信息，比如说，它是不是一个挂起函数。</li>\n<li>注释4，为了直接在挂起函数里执行网络请求，我们将KtCall当中的部分代码逻辑挪了进来。这个realCall()方法，它被定义成了一个挂起函数。</li>\n</ul><p>基于以上的分析，我们其实只需要借助反射，完成注释2处的代码逻辑，然后调用realCall()这个挂起函数就行了。</p><pre><code class=\"language-plain\">private fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n        // 省略\n    return when {\n        isSuspend(method) -&gt; {\n            // 1，反射获取类型信息\n            // 2，调用realCall()\n        }\n        isKtCallReturn(method) -&gt; {\n            // 省略\n        }\n        isFlowReturn(method) -&gt; {\n            // 省略\n        }\n        else -&gt; {\n            // 省略\n        }\n    }\n}\n</code></pre><p>所以，接下来我们要做的事情大致可以分为两个部分。</p><p>第一个部分，获取类型信息，准备请求网络，这个部分其实很简单。但在第二个部分“支持挂起函数”这里会遇到问题：</p><pre><code class=\"language-plain\">private fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n        // 省略\n    return when {\n        isSuspend(method) -&gt; {\n            // 支持挂起函数\n            val genericReturnType = method.kotlinFunction?.returnType?.javaType ?: throw IllegalStateException()\n            val call = okHttpClient!!.newCall(request)\n\n            // 报错！！\n            realCall&lt;T&gt;()\n        }\n        isKtCallReturn(method) -&gt; {\n            // 省略\n        }\n        isFlowReturn(method) -&gt; {\n            // 省略\n        }\n        else -&gt; {\n            // 省略\n        }\n    }\n}\n</code></pre><p>以上代码报错的原因也很容易理解，realCall()是一个挂起函数，它无法在普通函数里被调用！所以这里我们就面临了一个问题：<strong>如何在普通Kotlin函数当中调用挂起函数？</strong></p><p>那么，我们首先可以想到的解决办法，就是强制类型转换：</p><pre><code class=\"language-plain\">private fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n        // 省略\n    return when {\n        isSuspend(method) -&gt; {\n            // 支持挂起函数\n            val genericReturnType = method.kotlinFunction?.returnType?.javaType ?: throw IllegalStateException()\n            val call = okHttpClient!!.newCall(request)\n\n            val continuation = args.last() as? Continuation&lt;T&gt;\n            // 1，将挂起函数类型转换成，带Continuation的类型，报错\n            val func = ::realCall as (Call, Gson, Type, Continuation&lt;T&gt;?) -&gt; Any?\n            func.invoke(call, gson, genericReturnType, continuation)\n        }\n        isKtCallReturn(method) -&gt; {\n            // 省略\n        }\n        isFlowReturn(method) -&gt; {\n            // 省略\n        }\n        else -&gt; {\n            // 省略\n        }\n    }\n}\n</code></pre><p>请留意代码中的注释1，我们尝试使用“函数引用”的方式，将realCall()转换成了带有Continuation的函数类型，这样我们就可以通过传入Continuation，来调用realCall()这个挂起函数了。</p><p>不过，事与愿违，我们的方法并不能奏效，因为这行代码会报错，原因是realCall()带有泛型，而Kotlin暂时不支持“函数引用带泛型”的语法。</p><p>所以在这里，为了让这个Demo能运行起来，我们可以定义一个临时方法：</p><pre><code class=\"language-plain\">private fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n        // 省略\n    return when {\n        isSuspend(method) -&gt; {\n            // 支持挂起函数\n            val genericReturnType = method.kotlinFunction?.returnType?.javaType ?: throw IllegalStateException()\n            val call = okHttpClient!!.newCall(request)\n\n            val continuation = args.last() as? Continuation&lt;T&gt;\n            // 1，使用临时方法消除泛型\n            val func = ::temp as (Call, Gson, Type, Continuation&lt;T&gt;?) -&gt; Any?\n            func.invoke(call, gson, genericReturnType, continuation)\n        }\n        isKtCallReturn(method) -&gt; {\n            // 省略\n        }\n        isFlowReturn(method) -&gt; {\n            // 省略\n        }\n        else -&gt; {\n            // 省略\n        }\n    }\n}\n\nsuspend fun temp(call: Call, gson: Gson, type: Type) = realCall&lt;RepoList&gt;(call, gson, type)\n</code></pre><p>在上面的代码中，我们使用了一个临时方法消除了泛型T，写死了返回值类型RepoList。这样的代码，在Demo当中是可以运行的，这从侧面也能印证我们上面代码中的类型转换是成功的。</p><pre><code class=\"language-plain\">fun main() = runBlocking {\n    val data: RepoList = KtHttpV7.create(ApiServiceV7::class.java).reposSuspend(\n        lang = \"Kotlin\",\n        since = \"weekly\"\n    )\n\n    println(data)\n}\n/*\n输出结果\n正常\n*/\n</code></pre><p>不过，这种做法明显<strong>不具备普适性</strong>，为了让KtHttp支持所有类型的API请求，我们必须要想其他的办法。具体来说，我们可以这样做：</p><pre><code class=\"language-plain\">private fun &lt;T : Any&gt; invoke(path: String, method: Method, args: Array&lt;Any&gt;): Any? {\n        // 省略\n    return when {\n        isSuspend(method) -&gt; {\n            // 支持挂起函数\n            val genericReturnType = method.kotlinFunction?.returnType?.javaType ?: throw IllegalStateException()\n            val call = okHttpClient!!.newCall(request)\n\n            val continuation = args.last() as? Continuation&lt;T&gt;\n\n            val func = KtHttpV7::class.getGenericFunction(\"realCall\")\n            // 反射调用realCall()\n            func.call(this, call, gson, genericReturnType, continuation)\n        }\n        isKtCallReturn(method) -&gt; {\n            // 省略\n        }\n        isFlowReturn(method) -&gt; {\n            // 省略\n        }\n        else -&gt; {\n            // 省略\n        }\n    }\n}\n\n// 2，获取方法的反射对象\nfun KClass&lt;*&gt;.getGenericFunction(name: String): KFunction&lt;*&gt; {\n        return members.single { it.name == name } as KFunction&lt;*&gt;\n    }\n</code></pre><p>其实，这种思路跟前面的思路是类似的，我们仍然是对realCall()的类型进行了转换，只不过是通过<strong>反射</strong>来实现的而已。所以最重要的，我们还是要弄清楚Kotlin挂起函数CPS转换的细节。</p><h2>小结</h2><p>这节课，我们通过研究挂起函数的反编译代码，发现了<strong>Kotlin的挂起函数，本质上就是一个状态机</strong>。其中主要涉及到下面几个知识点，我们需要重点掌握好。</p><ul>\n<li>Kotlin挂起函数的CPS转换，它的函数签名变化主要分为两个部分，第一部分是<strong>参数的变化</strong>，挂起函数经过Kotlin编译器转换以后，它会多出一个Continuation类型的参数。第二部分是<strong>返回值类型的变化</strong>，挂起函数原本的返回值类型，会被挪到Continuation当中作为泛型参数，比如 <code>Continuation&lt;String&gt;</code>，而转换过后的函数返回值类型会变成“Any?”类型。</li>\n<li>当挂起函数经过反编译以后，它会变成<strong>由switch和label组成的状态机结构</strong>。</li>\n<li>为了便于研究，课程里提供了大致等价的协程状态机代码：其中，when 表达式实现了协程状态机，而continuation.label 则代表了当前状态机的具体状态，continuation.label 改变一次，就代表了挂起函数被调用了一次；</li>\n<li>在一个挂起函数被调用的时候，它的返回值可能是具体的结果，也可能会是 <code>CoroutineSingletons.COROUTINE_SUSPENDED</code>，这时候就代表了这个函数被挂起了。</li>\n</ul><p>另外在这节课里，我们还进行了一次反思和实战，通过研究协程基础层当中的“suspend inline val coroutineContext”这个顶层变量，我们发现了挂起函数与协程上下文之间的紧密联系。并且，我们还灵活运用了这节课学到的知识，进一步改进了KtHttp，让它可以直接支持挂起函数。</p><p>你在自己的工作场景当中，其实也可以通过这样思考与实战的方式，来进一步强化所学和所得，甚至可以把输入转化成输出，把知识真正沉淀成你自己的东西。</p><h2>思考题</h2><p>我们都知道挂起函数是Kotlin协程里才有的概念，请问，Java代码中可以调用Kotlin的挂起函数吗？比如，下面这个函数，我们可以在Java当中调用吗？</p><pre><code class=\"language-plain\">object SuspendFromJavaExample {\n    // 在Java当中如何调用这个方法？\n    suspend fun getUserInfo(id: Long):String {\n        delay(1000L)\n        return \"Kotlin\"\n    }\n}\n</code></pre>","neighbors":{"left":{"article_title":"26 | 协程源码的地图：如何读源码才不会迷失？","id":495862},"right":{"article_title":"加餐五 | 深入理解协程基础元素","id":497868}},"comments":[{"had_liked":false,"id":341567,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1649693370,"is_pvip":false,"replies":[{"id":"124968","content":"不错的总结~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649953380,"ip_address":"","comment_id":341567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14534595258","product_id":100103401,"comment_content":"我刚看了字节码，总结如下：<br><br>可以看出：<br><br>1、testCoroutine 内部会创建一个匿名内部类 wrapper 实例，继承了 ContinuationImpl 类，将参数 Continuation var0 包在的内部；并且会将该 wrapper 实例作为参数传递给内部的挂起函数 getUserInfo... ...；<br><br>​      ContinuationImpl 继承了 BaseContinuationImpl，间接实现了 Continuation 接口；<br><br>​      协程的恢复，就是通过 BaseContinuationImpl.resumeWith 实现，resumeWith 又会执行 invokeSuspend 方法，将目标结果返回；<br><br>​      invokeSuspend 是协程恢复的入口，其内部又会执行挂起函数 testCoroutine，而此时的参数是 wrapper 实例；<br><br><br><br>2、匿名内部类 wrapper 实例内部的 label 变量表示：状态机的状态，而状态的流转逻辑是由挂起函数 testCoroutine 控制；<br><br>​      匿名内部类 wrapper 实例内部的 result 变量表示：目标结果；  <br><br><br><br>3、匿名内部类 wrapper 实例只会创建一次！！<br><br>​\t  当第一次调用 testCoroutine 的时候，参数 Continuation var0 是外部的 Continuation 实例（外部协程的 Continuation&#47;外部挂起函数的 ContinuationWrapper 实例）<br><br>​      当挂起后恢复，再次调用的时候，参数 Continuation var0 是第一次创建的 匿名内部类 wrapper 实例；<br><br><br><br>4、testCoroutine 状态机结构是通过 switch 语句 + label 代码段嵌套<br><br>​      testCoroutine 里的原本的代码，被拆分到状态机里各个状态中，分开执行；<br><br>​      每次挂起函数执行完，恢复后，都会检查是否发生异常；<br><br>​      如果一个挂起函数挂起，它的返回值会是 CoroutineSingletons.COROUTINE_SUSPENDED；","like_count":4,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563249,"discussion_content":"不错的总结~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649953380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341345,"user_name":"Geek_Adr","can_delete":false,"product_type":"c1","uid":2876897,"ip_address":"","ucode":"129E17B7D3EB88","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e5/e1/a5064f88.jpg","comment_is_top":false,"comment_ctime":1649559336,"is_pvip":false,"replies":[{"id":"124975","content":"不错~<br><br>BTW：注释有意思，哈哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649954765,"ip_address":"","comment_id":341345,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14534461224","product_id":100103401,"comment_content":"    &#47;&#47; JAVA 调用 挂起函数<br>    public static void main(String[] args) throws InterruptedException {<br>        SuspendFromJavaExample.INSTANCE.getUserInfo(111, new Continuation&lt;String&gt;() {<br>            @NotNull<br>            @Override<br>            public CoroutineContext getContext() {<br>                return (CoroutineContext) Dispatchers.getDefault();<br>            }<br><br>            @Override<br>            public void resumeWith(@NotNull Object o) {<br>                System.out.printf(&quot;suspend fun getUserInfo result =&gt; %s\\n&quot;, o);<br>            }<br>        });<br>        Thread.sleep(2000); &#47;&#47; 有点挫，等结果<br>    }<br>","like_count":4,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563258,"discussion_content":"不错~\n\nBTW：注释有意思，哈哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649954765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340136,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1648622547,"is_pvip":false,"replies":[{"id":"124477","content":"总结很到位~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648814121,"ip_address":"","comment_id":340136,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10238557139","product_id":100103401,"comment_content":"思考题：后知后觉<br>1. 最终还是运行了一遍，返回的是CoroutineSingletons.COROUTINE_SUSPENDED，即惊讶，又啊哈<br>2. 协程非阻塞，体现在suspend func立即返回个CoroutineSingletons.COROUTINE_SUSPENDED，然后继续忙其他的；于是伪suspend func，则直接返回结果<br><br>*关于如何在Java中调用：之前有课程提到，在Java中的getContext()中可考虑传入EmptyCoroutineContext.INSTANCE","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559550,"discussion_content":"总结很到位~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648814121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338956,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1127306,"ip_address":"","ucode":"3F69DAC14260DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","comment_is_top":false,"comment_ctime":1647833612,"is_pvip":false,"replies":[{"id":"124008","content":"说的很好，有代码就更好了","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648030177,"ip_address":"","comment_id":338956,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10237768204","product_id":100103401,"comment_content":"关于思考题的思考：<br><br>在 Java 中是可以调用挂起函数的，当挂起函数通过 Kotlin 编译器进行 CPS 转换后，对应的挂起函数就被转换成了带 Callback 参数（Continuation 接口）的普通函数，只要传入 Continuation 接口的实现就可以了。","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557954,"discussion_content":"说的很好，有代码就更好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648030177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344634,"user_name":"白","can_delete":false,"product_type":"c1","uid":1196342,"ip_address":"","ucode":"D2265BB35AA026","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/36/6dda8ceb.jpg","comment_is_top":false,"comment_ctime":1651679253,"is_pvip":false,"replies":[{"id":"125931","content":"这里确实隐藏的比较深，需要写一个完整的例子，同时结合反编译代码+协程源码来分析。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1652024776,"ip_address":"","comment_id":344634,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1651679253","product_id":100103401,"comment_content":"我不是很明白是怎么恢复协程，也就是调用resumewith，java反编译过去也没看到调用","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571003,"discussion_content":"这里确实隐藏的比较深，需要写一个完整的例子，同时结合反编译代码+协程源码来分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652024776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1196342,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/36/6dda8ceb.jpg","nickname":"白","note":"","ucode":"D2265BB35AA026","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":571011,"discussion_content":"处理后是不是会切换状态机状态执行下一段挂起代码？我反编译也没看到 是需要研究coroutine jvm源码么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652026914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":571003,"ip_address":""},"score":571011,"extra":""}]}]},{"had_liked":false,"id":343857,"user_name":"H.ZWei","can_delete":false,"product_type":"c1","uid":1329072,"ip_address":"","ucode":"48FFADE574C327","user_header":"https://static001.geekbang.org/account/avatar/00/14/47/b0/8c301d00.jpg","comment_is_top":false,"comment_ctime":1651102145,"is_pvip":false,"replies":[{"id":"125631","content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1651245248,"ip_address":"","comment_id":343857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651102145","product_id":100103401,"comment_content":"有点类似rxjava操作符的嵌套","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568874,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651245249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341564,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1649691413,"is_pvip":false,"replies":[{"id":"124967","content":"可以这么理解。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649953337,"ip_address":"","comment_id":341564,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649691413","product_id":100103401,"comment_content":"1、invokeSuspend 不是协程的入口，是 resumeWith 的入口，<br>恢复协程是调用的 continuation.resumeWith，这个会调用 invokeSuspend","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563248,"discussion_content":"可以这么理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649953337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341549,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1649686954,"is_pvip":false,"replies":[{"id":"124966","content":"粗略上，可以这么理解。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649953277,"ip_address":"","comment_id":341549,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1649686954","product_id":100103401,"comment_content":"这样看，每个挂起函数，都会创建一个继承了 ContinuationImpl 的匿名内部类对象，把传进来的 Continuation 包起来～～～","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563247,"discussion_content":"粗略上，可以这么理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649953278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1319781,"avatar":"https://static001.geekbang.org/account/avatar/00/14/23/65/39d789a8.jpg","nickname":"zs","note":"","ucode":"238E4FC20003E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588166,"discussion_content":"如果是这样那怎么理解testCoroutine()方法里面的ContinuationImpl 实例只会创建一个。ContinuationImpl()里面包裹的不是completion（AbstractCoroutine）吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663583467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341455,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1649637587,"is_pvip":false,"replies":[{"id":"124973","content":"协程数量是否加1，其实取决于newCoroutineContext()这个方法是否调用。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649954269,"ip_address":"","comment_id":341455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649637587","product_id":100103401,"comment_content":"withContext 为啥没有创建新的协程呢？？？我看源码都有对应的 job 和 coroutome.start","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563256,"discussion_content":"协程数量是否加1，其实取决于newCoroutineContext()这个方法是否调用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649954269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339987,"user_name":"杨小妞","can_delete":false,"product_type":"c1","uid":1657434,"ip_address":"","ucode":"DF5AE317301023","user_header":"https://static001.geekbang.org/account/avatar/00/19/4a/5a/14eb7973.jpg","comment_is_top":false,"comment_ctime":1648525430,"is_pvip":false,"replies":[{"id":"124487","content":"如果我们没理解错你的问题的话，你说的可能是Continuation的回调？如果是的话，那么你的结论可能刚好就反过来了。具体原因，你也可以在加餐5当中找到答案哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648815043,"ip_address":"","comment_id":339987,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648525430","product_id":100103401,"comment_content":"以下代码： 挂起函数b中的c、d之间不存在回调关系，而挂起函数a的b，a、b之间存在回调关系？可以这么理解吗？<br>    suspend fun a() {<br>        b()<br>    }<br><br>    suspend fun b() {<br>        val c = c()<br>        val d = d()<br>    }<br><br>    suspend fun c(): String {<br>        return withContext(Dispatchers.IO) {<br>            &quot;c&quot;<br>        }<br>    }<br><br>    suspend fun d(): String {<br>        return withContext(Dispatchers.IO) {<br>            &quot;d&quot;<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559561,"discussion_content":"如果我们没理解错你的问题的话，你说的可能是Continuation的回调？如果是的话，那么你的结论可能刚好就反过来了。具体原因，你也可以在加餐5当中找到答案哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648815043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339984,"user_name":"杨小妞","can_delete":false,"product_type":"c1","uid":1657434,"ip_address":"","ucode":"DF5AE317301023","user_header":"https://static001.geekbang.org/account/avatar/00/19/4a/5a/14eb7973.jpg","comment_is_top":false,"comment_ctime":1648525297,"is_pvip":false,"replies":[{"id":"124485","content":"这个问题你可以去加餐5当中找到答案哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648814404,"ip_address":"","comment_id":339984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648525297","product_id":100103401,"comment_content":"有个疑问：TestContinuation维护一个状态机来执行挂起函数，那么运行结果什么时候回调出去呢？是在最后一个swithc分支吗？例如testCoroutine是被其他挂起函数调用","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559559,"discussion_content":"这个问题你可以去加餐5当中找到答案哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648814404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339431,"user_name":"神秘嘉Bin","can_delete":false,"product_type":"c1","uid":2879116,"ip_address":"","ucode":"6045F09320E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/8c/06f3aef0.jpg","comment_is_top":false,"comment_ctime":1648097859,"is_pvip":false,"replies":[{"id":"124297","content":"不错~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648521343,"ip_address":"","comment_id":339431,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648097859","product_id":100103401,"comment_content":"HelloSuspendTestKt.hello(new Continuation&lt;Integer&gt;() {<br>            @NotNull<br>            @Override<br>            public CoroutineContext getContext() {<br>                return EmptyCoroutineContext.INSTANCE;<br>            }<br><br>            @Override<br>            public void resumeWith(@NotNull Object o) {<br>                &#47;&#47; TODO<br>            }<br>        });","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558906,"discussion_content":"不错~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648521343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339353,"user_name":"ACE_Killer09","can_delete":false,"product_type":"c1","uid":1618019,"ip_address":"","ucode":"4ED9D2A521A237","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqQVYE1EfqibdyNsnjFibHW4jee0Q3qMMeRhqqVQUn5Ix9fFl3Zfzf0xpdrGypxHUmBCyiczfyEaPoWA/132","comment_is_top":false,"comment_ctime":1648042536,"is_pvip":false,"replies":[{"id":"124296","content":"这个我在后面的加餐5有提到，你可以去看看。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648521328,"ip_address":"","comment_id":339353,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648042536","product_id":100103401,"comment_content":"挂起函数中在线程中的执行结果是怎么返回的？比如andorid中子线程的结果怎么给到主线程呢？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558905,"discussion_content":"这个我在后面的加餐5有提到，你可以去看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648521328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339218,"user_name":"魏全运","can_delete":false,"product_type":"c1","uid":1090798,"ip_address":"","ucode":"3FED702C724E2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","comment_is_top":false,"comment_ctime":1647999064,"is_pvip":false,"replies":[{"id":"123996","content":"When每一个分支都会对label+1","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648029413,"ip_address":"","comment_id":339218,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1647999064","product_id":100103401,"comment_content":"请问kotlin是怎么执行下一个状态机逻辑的呢？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557942,"discussion_content":"When每一个分支都会对label+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648029413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1090798,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","nickname":"魏全运","note":"","ucode":"3FED702C724E2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":558054,"discussion_content":"我想问的是状态更新后，invoke 是怎么调用的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648079336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557942,"ip_address":""},"score":558054,"extra":""}]}]}]}