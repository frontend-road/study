{"id":471937,"title":"08｜操控资源：指针是如何灵活使用内存的？","content":"<p>你好，我是于航。</p><p>“指针”是 C 语言为我们提供的最为强大的武器之一。借助指针，我们可以更加灵活地使用应用程序所享有的内存。</p><p>不同于 Python、Java 等语言，C 语言为我们提供了这样一种能力：可以让程序员根据需要，主动选择使用“按值传递”或“按指针传递”这两种不同的数据引用方式。通常，按值传递会涉及原始数据的复制过程，因此在某些情况下，可能会引入额外的性能开销。而按指针传递则使程序内存中的“数据共享”成为了可能。</p><p>这一讲，就让我们来一起看下，在 C 语言中指针都有哪些使用方式，以及在语法背后，这些方式都是如何通过机器指令来实现的。</p><h2>指针的基本使用</h2><p>使用 C 语法定义变量时，通过为类型说明符添加额外的 “ * ” 符号，我们可以定义一个指向该类型数据的指针。不仅如此，通过添加额外的 <code>const</code> 关键字，我们还能够限制使用该指针变量时所能够进行的操作类型。</p><p>比如在下面这个例子中，我们便定义了这样的一个指针。通过添加 <code>const</code> 关键字，编译器限制了对指针 npA 的使用，使得它自身无法被重新赋值，并且也无法通过它来修改所指向的数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/05/3a64f116672998af96b364b616a6e405.png?wh=1920x712\" alt=\"图片\"></p><p>指针不仅在 C 语言中的使用方式很简单，它在机器指令层面的实现也十分简单。还记得我们在 <a href=\"https://time.geekbang.org/column/article/466203\">03 讲</a> 中最后介绍过的取地址 “&” 与解引用 “*” 运算符吗？通过使用这两个运算符，我们便能够完成对指针的最基本，也是最重要的两个操作，即取值与赋值。</p><!-- [[[read_end]]] --><p>观察上图中红框与蓝框内的 C 代码与汇编代码，我们来快速复习一下相关内容。取地址运算符可以用来获取内存中某个数据的所在地址，该过程一般会通过红框内的 <code>lea</code> 指令来实现，而解引用的过程正与此相反。如右侧蓝框内的第二行代码所示，直接通过 <code>mov</code> 指令，我们便可以按照所指向数据类型的固定大小（这里为 DWORD，即 32 位），来与对应内存地址上存放的数据值进行交互。</p><h2>指针与数组</h2><p>除了我们显式定义的各类指针变量外，指针与数组也有着千丝万缕的联系。数组是一块连续存放有相同类型数据的内存区域。在 C 语言中，数组有不同的使用方式，有些使用方式可能导致其被退化（dacay）为相应的指针类型。我们来看下面这个例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/64/02/6478bb495988777e77c494192c7d3f02.png?wh=1920x1007\" alt=\"图片\"></p><p>从上图左侧红框内的 C 代码中可以看到，我们在主函数内定义了一个包含有 4 个整型元素的数组 arr。在默认情况下，数组中的元素会以相邻的方式分配在连续的栈内存中。从右侧红框内的汇编代码中，我们可以验证这一点。</p><p>紧接着，通过调用名为 sum 的函数，我们可以求得数组内所有元素的累加和。该函数共接收两个参数，第一个为目标数组，第二个为该数组包含的元素个数。这里，我们直接将 arr 作为第一个参数传入。而此时，通过 <code>sizeof</code> 运算符，我们也能够在编译时得到有关数组 arr 的大小信息，并动态计算出数组中元素的个数。</p><p>但当数组 arr 作为实参被传入函数 sum 后，事情发生了变化。从上图右侧蓝框内的汇编代码中可以看出，函数被调用前，rdi 寄存器内存放的是 rbp-16，也就是数组 arr 首个元素对应地址的值。因此，传递给函数 sum 的第一个参数实际上为一个指向 <code>int</code> 类型的指针，而有关数组 arr 的大小和类型的信息在此时已经全部丢失。对于这种情况，我们一般称其为“数组的退化”，即<strong>数组类型退化为指针类型</strong>。</p><h2>指针的其他运算</h2><p>在 C 语言中，除了可以对指针进行基本的解引用、赋值，甚至再次取地址的操作外，我们还可以对它进行算数与关系运算。但需要注意的是，指针的这两种运算不同于一般的数值类型。比如，对指针进行加法运算，就并不是将加数直接累加在对应的地址值上这么简单。你也可以再回顾一下上面讲解指针和数组时的示例代码，从函数 sum 的实现中，可以看到我们对退化指针 arr 的算数运算过程。</p><h3>算数运算</h3><p>总的来看，我们可以对指针类型进行这样几种算数运算：</p><ul>\n<li>单个指针与另一个整数相加/相减；</li>\n<li>单个指针自增/自减；</li>\n<li>两个指针求差。</li>\n</ul><p>指针在进行算数运算后，不能将其指向的、以固定长度字节作为整体的数据值“拆分”。因此，当我们对指针进行加法、减法、递增、递减运算时，编译器实际上是以当前指针所指向值对应的某个固定长度为单位，对指针中存放的地址值进行相应调整的。同样，对于指针之间的求差操作，求得的也并不是两个地址值之间以字节为单位的差，而是用这个差值除以上面提到的固定长度所得到的结果。</p><p>下面，让我们通过一个例子，来看看<strong>编译器是如何在背后处理针对指针的算数运算的</strong>。这里我介绍的是“单个指针与另一个整数相加”这种场景。由于其他指针算数运算的过程与此基本类似，相信理解了这一种，另外几种你也能融会贯通。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/ba/13e25f1000d399993c79a81db8yy34ba.png?wh=1920x1229\" alt=\"图片\"></p><p>这里在 main 函数的开始，我们定义了一个名为 arr 的，具有 2 行 3 列，共 6 个元素的二维数组。从右侧对应的汇编代码中，可以看到这个数组内部的数据是以地址连续的方式被存放在栈内存中的。对于这个存储方式，你可以将其理解为<strong>编译器对 C 代码中的多维数组进行的扁平化（flatten）处理</strong>。</p><p>在接下来的 C 代码中，我们通过指针的方式获取并打印了位于数组 arr 中两个不同位置上的值。其中，蓝框内的表达式首先对 arr 进行了加一操作，然后返回了对这个经过“累加”后的地址进行两次解引用的结果值。从右侧相应的汇编代码中可以看到，对 arr 的加一操作导致 rax 寄存器中的值被增加 12。而该寄存器中原先存放有数组中第 1 行第 1 列元素对应的地址值，因此在经过计算后，我们得到了一个指向元素 4 的“二级指针”。</p><p>也就是说，对变量 arr 进行加一操作，导致指向二维数组首元素的指针，向栈中的高地址方向移动了 12 个字节。之所以会有这样的变化，是因为 arr 在这里直接指向的数据，实际上是二维数组中每一个包含有 3 个整型元素的一维数组。而每一个一维数组的大小都为固定的 12 字节。因此，当对 arr 进行算数运算时，编译器便会以它所指向的一维数组的大小为单位，来进行地址值上的调整。</p><p>同样地，对于黄框内的第二次数组元素访问，由于 <code>*arr</code> 作为一级指针（经过了一次解引用），直接指向的是二维数组内某个一维数组中的整型元素，因此，对它进行加法运算，将会以 4 字节作为单位来进行地址上的调整。</p><p>这里我给你留一个小问题：按照类似的计算方式，你能否直接推算出下面这行语句在执行后的输出结果？欢迎在评论区留下你的答案。</p><pre><code class=\"language-c++\">printf(\"%d\\n\", *(*(arr + 1) + 1));&nbsp; // ?\n</code></pre><p>最后，需要注意的是，<strong>指针的算数运算在绝大多数情况下都只适用于数组相关的指针</strong>。而在其他场景中，即使程序可以正常编译运行，但由于标准中可能并未要求编译器的具体求值规则，因此其行为是未定义的，程序的运行结果无法得到保障。</p><h3>关系运算</h3><p>除了算数运算外，同一类型的不同指针之间还可以进行关系运算。</p><p>我已经在 <a href=\"https://time.geekbang.org/column/article/466203\">03 讲</a> 中介绍了关系运算符的机器指令实现方式。在大多数情况下，编译器会配合使用 <code>cmp</code> 与 <code>setg</code> 等指令来判断关系运算符两侧操作数的大小，并根据判断结果，进行相应的置位与复位操作，最终返回 0 或 1 作为结果。而对于指针之间的关系运算来说，其实现方式也是如此。</p><p>但需要注意一点：虽然在机器指令层面，指针的关系运算实际上是对指针内部所存放的地址值进行的大小判断，但从 C 语法的角度来看，具有实际意义的指针关系运算仅有为数不多的几种情况（你可以点击<a href=\"https://en.cppreference.com/w/c/language/operator_comparison\">这个链接</a>来详细了解）。除此之外，其他使用方式均会产生未定义行为（UB）。</p><h2>堆内存指针</h2><p>在我之前介绍的例子中，指针仅引用了位于栈内存中的数据。但实际上，指针还有另一个更重要的作用，那就是给予了我们<strong>灵活操控堆内存中数据</strong>的能力。</p><p>堆同栈类似，也是位于进程 VAS 中的一段专门用于存放数据的内存空间。栈中的数据随着函数的调用与返回，会被程序自动释放，而堆则有所不同。在堆中进行数据分配，需要借助特定的操作系统调用函数，并且被分配内存中的数据不会随着程序的运行而自动清除。因此，当这些数据不再被程序使用时，便需要显式地调用相应的系统函数，来将其释放。</p><p>幸运的是，C 标准库中已经为我们封装好了这样的一些函数。借助它们，我们可以方便地申请与释放堆内存，并享受堆分配算法带来的性能保障。这里我先带你回顾一下这些函数的使用方式，而它们的具体内容，我会在 15 讲 中再为你详细介绍。</p><p>通过下面这段示例代码，我们可以快速回顾一下标准库函数 <code>malloc</code> 与 <code>free</code> 的使用方式。对于其中的关键语句，你可以参考它们上方的注释。</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#define N 5\nint main(void) {\n&nbsp; int arr[] = { 1, 2, 3, 4, 5 };&nbsp;&nbsp;\n  // 分配用于存放 N 个整数的堆内存；\n&nbsp; int* p = (int*) malloc(sizeof(int) * N);\n&nbsp; // 将数组 arr 中的元素复制到分配的堆内存中；\n  memcpy(p, arr, sizeof(int) * N);  \n&nbsp; for (int i = 0; i &lt; N; ++i) {\n    // 通过指针遍历堆空间中的数据；\n&nbsp; &nbsp; printf(\"%d\\n\", *(p + i));\n&nbsp; }\n  // 释放先前分配的堆空间，让操作系统可以回收内存；\n&nbsp; free(p);  \n&nbsp; return 0;\n}\n</code></pre><p>在 VAS 中，堆内存的位置处于栈内存的“下方”，即低地址方向。与栈内存相反的是，堆内存的占用区域将随着程序的不断使用从低地址向高地址逐渐增长，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/50/b5c30aac8babae5b3e354b8954991e50.jpg?wh=1920x1581\" alt=\"图片\"></p><p>看到这里，你可能会有这样的疑问：我平时写的 C 程序只需要临时变量就够用了，这些变量的值会被分配在栈内存中，那我们为什么还需要堆呢？</p><p>因为栈上的数据在函数返回时就会被释放，因此我们只能通过不断拷贝的方式保持其“存活”。而全局变量和静态变量的生存期虽然与整个程序保持一致，但也并没有办法在程序的运行过程中动态生成，且缺乏一定表现力。</p><p>而堆内存则可以很好地解决这些问题。存放在其内部的数据能够由程序动态地创建，而且可以保持与程序相同的最大生存期。不仅如此，和全局变量、静态变量这两种将值完全暴露给所有程序代码使用的方式相比，使用堆内存可以将数据的使用，限制在其所需要的最小范围内，这无疑加强了程序对内存资源的精细化管理程度。</p><h2>使用指针的注意事项</h2><p>借助指针，我们可以灵活地使用程序存放在堆内存与栈内存中的数据，但不当的指针使用方式也可能会导致程序出现难以调试、甚至是难以复现的 BUG。其中，你需要特别注意避免下面这些操作，因为它们会导致程序出现无法预测的未定义行为：</p><ul>\n<li>解引用未初始化的指针；</li>\n<li>函数返回指向其内部局部变量的指针；</li>\n<li>非指向同一数组内元素的两个指针之间的减法操作；</li>\n<li>……</li>\n</ul><p>除此之外，对堆指针进行有效的生命周期管理，也是我们在构建程序时需要注意的问题。由于同一个堆指针可能会在程序的不同函数中被使用，因此就要特别注意：我们应该通过 free 函数及时清理堆内存，以防止内存泄露；同时，又不应该去释放一块已经被释放过的堆内存（重复释放会产生异常）。</p><h2>总结</h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>这一讲，我主要介绍了 C 语言中有关指针的一些话题，包括指针在 C 语言中的基本使用方式、指针与数组的关系、指针的算数与关系运算，以及它们在机器指令层面的实现细节。同时，我还介绍了堆内存指针，并和你简单探讨了在使用 C 指针时需要注意的一些问题。</p><p>在 C 代码中，通过添加特定的 “ * ” 符号，我们可以声明所定义变量为一个指针类型。而与指针有关的两个常用操作符为取地址操作符 “&amp;” 与解引用操作符 “ * ”，它们一般可以通过 <code>lea</code> 指令与 <code>mov</code> 指令来实现。</p><p>指针与数组也有着密不可分的联系。在某些特定的使用方式下，编译器会将数组类型退化为指针类型，导致其丧失了有关数组的类型与大小等信息。</p><p>除此之外，指针类型还可以参与算数与关系运算。其中，算数运算主要涉及指针与整数的加/减运算、指针的自增/自减运算，以及两个同类型指针间的求差运算。而关系运算则同数值类型保持一致。但需要注意的是，标准中仅规定了上述运算类型对于指针的有限使用方式，而规定之外的使用方式则属于未定义行为。</p><p>同时，我还介绍了可以引用堆上数据的指针。堆是除栈之外的又一个重要的数据存放“容器”。相较于栈上数据，以及全局变量或静态变量中的数据，位于堆中的数据具有更加灵活的生存期，并且能够在程序运行过程中动态生成。</p><p>最后，我总结了在使用 C 指针时需要注意的问题。对指针的不当使用会使程序产生标准中未定义的行为。对于堆指针来说，除了未定义操作外，没有及时对相关资源进行清理，或重复清理，都会导致程序的运行产生异常。而这些都是我们在设计 C 程序结构时，需要特别注意的问题。毕竟，再强大的武器也是一把双刃剑。</p><h2>思考题</h2><p>下面这段代码可以正常编译吗？为什么？</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; int arr[] = { 1, 2, 3, 4 };\n&nbsp; printf(\"%d\", arr[3] == 3[arr]);&nbsp;\n&nbsp; return 0;\n}\n</code></pre><p>今天的课程到这里就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p>","neighbors":{"left":{"article_title":"07｜整合数据：枚举、结构与联合是如何实现的？","id":471133},"right":{"article_title":"09｜编译准备：预处理器是怎样处理程序代码的？","id":472592}},"comments":[{"had_liked":false,"id":327929,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1207056,"ip_address":"","ucode":"5CEF9A1806298D","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/10/22f93764.jpg","comment_is_top":false,"comment_ctime":1640394487,"is_pvip":false,"replies":[{"id":"119760","content":"这是一个好问题！实际上这是由于 SysV 规范要求在函数调用前，栈顶需要在 16 字节的边界对齐（我们曾在第 05 讲中提到过）。因此由于这里在栈中需要存放 6 个元素，需要至少 24 字节的空间。所以为了对齐到 16 字节，rsp 的值要减少至少 32 字节。","user_name":"作者回复","user_name_real":"作者","uid":"1005890","ctime":1640834629,"ip_address":"","comment_id":327929,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48885034743","product_id":100100701,"comment_content":"有个疑问，算数运算一节，右侧汇编代码样例中sub rbp 32，说明栈分配了32字节，但二维数组实际只占4*6=24字节，剩余8字节是做什么用的？","like_count":11,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542757,"discussion_content":"这是一个好问题！实际上这是由于 SysV 规范要求在函数调用前，栈顶需要在 16 字节的边界对齐（我们曾在第 05 讲中提到过）。因此由于这里在栈中需要存放 6 个元素，需要至少 24 字节的空间。所以为了对齐到 16 字节，rsp 的值要减少至少 32 字节。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640834630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1707352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","nickname":"ZR2021","note":"","ucode":"4F685C7516F057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543224,"discussion_content":"学习到了，之前也觉得这个栈大小计算比较奇怪，现在解惑了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641009580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327997,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1640442838,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18820312022","product_id":100100701,"comment_content":"因为 a[i] = *(a + i)<br>所以 x[y[i]]<br>= x[*(y + i)] = x[*(i + y)] = x[i[y]]<br>= *(x + i[y]) = *(i[y] + x] = i[y][x]<br>在用到多级间接下标时可以避免嵌套中括号<br>","like_count":4},{"had_liked":false,"id":329843,"user_name":"=","can_delete":false,"product_type":"c1","uid":2600127,"ip_address":"","ucode":"104232A8292220","user_header":"https://static001.geekbang.org/account/avatar/00/27/ac/bf/f549183e.jpg","comment_is_top":false,"comment_ctime":1641567807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14526469695","product_id":100100701,"comment_content":"printf(&quot;%d\\n&quot;, *(*(arr + 1) + 1));  &#47;&#47; 结果为5<br>arr+1后，二级指针指向arr[1]<br>*(arr+1)后，一级指针指向arr[1][0]<br>*(arr + 1) + 1后，一级指针指向arr[1][1]<br>*(*(arr + 1) + 1))后，解引用出结果5<br><br>文末的代码可以编译通过，而且arr[3]","like_count":3},{"had_liked":false,"id":345889,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":2921660,"ip_address":"","ucode":"ACDCF652C15B00","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/FgiaI9OpBvOQMklDal8gqEkRbDnZdEnfRJZFoMnDw3zhlZCFERGo4ibRNmBAoIialHjHUubMcOyl3QLosTNa8FJPg/132","comment_is_top":false,"comment_ctime":1652679343,"is_pvip":false,"replies":[{"id":"127249","content":"感谢指正！你理解的没错，两者之间确实有些差异，我来修改一下表述。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1656227849,"ip_address":"","comment_id":345889,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10242613935","product_id":100100701,"comment_content":"老师，将二维数组指针等同于二级指针是否不太准确呢？因为从本质上来说二者是有根本区别的，二维数组名对应的地址值和arr[0][0]的地址值是一样的，只不过两者对应的指针类型一个为int (*)[3],一个为int *。而二级指针为指针的指针，在此处对应的类型应该是int **。所以我认为二维数组指针本质上还是一个一级指针，不知道我这样的理解有没有问题？","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577604,"discussion_content":"感谢指正！你理解的没错，两者之间确实有些差异，我来修改一下表述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656227849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341790,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1649834149,"is_pvip":true,"replies":[{"id":"125024","content":"这里不要从 C 代码的形式上扣哈，可以直接看编译器产物的结果。你会发现 3[arr] 与 arr[3] 产生的机器代码是完全一致的。因为编译器在解析 C 代码时可以通过判断括号左侧和括号内的值是不是 Constant Value 来判断当前这个值是应该作为索引，还是数组首地址来使用。","user_name":"作者回复","user_name_real":"作者","uid":"1005890","ctime":1650015508,"ip_address":"","comment_id":341790,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5944801445","product_id":100100701,"comment_content":"老师您好 向您请教一下arr[3] == 3[arr]的问题<br>我实际运行的结果是两者是相等的<br>arr[3] 不应该是 [arr地址 + 3 * sizeof(int)]位置的数值么<br>3[arr] 是 [3 + arr地址]？[3 + arr地址 * sizeof(int)]？位置的数值<br>两者为什么会相同呢 还是我理解错了","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563525,"discussion_content":"这里不要从 C 代码的形式上扣哈，可以直接看编译器产物的结果。你会发现 3[arr] 与 arr[3] 产生的机器代码是完全一致的。因为编译器在解析 C 代码时可以通过判断括号左侧和括号内的值是不是 Constant Value 来判断当前这个值是应该作为索引，还是数组首地址来使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650015509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1605876,"avatar":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","nickname":"纳兰容若","note":"","ucode":"2E1EA2CDFDA1A9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":563751,"discussion_content":"多谢老师指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650073529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":563525,"ip_address":""},"score":563751,"extra":""},{"author":{"id":1216016,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","nickname":"Luke","note":"","ucode":"C34D4C44DBCE03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":586420,"discussion_content":"老师，这是c编译器一贯的处理机制吗？还是现代c编译器的机制？虽然可以编译通过，还是不要写这样的代码了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662195815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":563525,"ip_address":"江苏"},"score":586420,"extra":""}]}]},{"had_liked":false,"id":331878,"user_name":"zxk","can_delete":false,"product_type":"c1","uid":1221195,"ip_address":"","ucode":"4BB2BD9D2BCD04","user_header":"https://static001.geekbang.org/account/avatar/00/12/a2/4b/b72f724f.jpg","comment_is_top":false,"comment_ctime":1642847675,"is_pvip":false,"replies":[{"id":"122223","content":"好问题。我们这里讲到的“数组退化到指针”实际上是 C 语言在设计上的一种性质，并不是使用不当或者优化手段。这个性质出现的原因要追溯到 C 语言的前身 B 语言中的类似设计上。在大多数场景下，需要注意问题就是变量性质（数组大小、数组类型）的丢失。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645027016,"ip_address":"","comment_id":331878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5937814971","product_id":100100701,"comment_content":"老师，关于 ”在某些特定的使用方式下，编译器会将数组类型退化为指针类型“，那这个是属于使用不当，还是一种优化手段？不太明白这个行为会有什么后果及应用场景。","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551509,"discussion_content":"好问题。我们这里讲到的“数组退化到指针”实际上是 C 语言在设计上的一种性质，并不是使用不当或者优化手段。这个性质出现的原因要追溯到 C 语言的前身 B 语言中的类似设计上。在大多数场景下，需要注意问题就是变量性质（数组大小、数组类型）的丢失。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645027016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327858,"user_name":"无双BaOY_WHA","can_delete":false,"product_type":"c1","uid":1370125,"ip_address":"","ucode":"41F282C31D256C","user_header":"https://static001.geekbang.org/account/avatar/00/14/e8/0d/6d303d18.jpg","comment_is_top":false,"comment_ctime":1640331045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5935298341","product_id":100100701,"comment_content":"arr[3] 和 3[arr] 映射到汇编代码上是一样的。但没见过 3[arr] 这种写法…","like_count":1},{"had_liked":false,"id":327844,"user_name":"I","can_delete":false,"product_type":"c1","uid":2456502,"ip_address":"","ucode":"6828DD20BA208E","user_header":"https://static001.geekbang.org/account/avatar/00/25/7b/b6/6139258e.jpg","comment_is_top":false,"comment_ctime":1640326576,"is_pvip":true,"replies":[{"id":"119377","content":"答案正确！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1640335229,"ip_address":"","comment_id":327844,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5935293872","product_id":100100701,"comment_content":"答案是5，arr+1为arr1 0，然后再加一为1 1，所以为5","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541341,"discussion_content":"答案正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640335229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1358403,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/D2OyiciaJu0zvxTIUiat3g3w0mia7Wfia2ia5IRpYX32B2H4wGz7M1eW1gDYxf6O7sIoMZcDiavDhphThyCz6C0pyw5gw/132","nickname":"jeanchan","note":"","ucode":"6D50B10EB411D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541528,"discussion_content":"3[arr]什么解读呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640432987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359737,"user_name":"夕林语","can_delete":false,"product_type":"c1","uid":1264180,"ip_address":"江西","ucode":"B57681D0C73E1B","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/34/1faac99b.jpg","comment_is_top":false,"comment_ctime":1665825863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665825863","product_id":100100701,"comment_content":"printf(&quot;%d\\n&quot;, *(*(arr + 1) + 1));结果为5<br>","like_count":0},{"had_liked":false,"id":343426,"user_name":"杨宇","can_delete":false,"product_type":"c1","uid":1014665,"ip_address":"","ucode":"EB74DF6E269F03","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","comment_is_top":false,"comment_ctime":1650849520,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650849520","product_id":100100701,"comment_content":"中间那道题，参与运算的两个数都是1，有“蒙对答案”的可能性。","like_count":0},{"had_liked":false,"id":328084,"user_name":"Victor","can_delete":false,"product_type":"c1","uid":1867796,"ip_address":"","ucode":"0AA9F68348A4D1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/14/0bcc4dd3.jpg","comment_is_top":false,"comment_ctime":1640521389,"is_pvip":false,"replies":[{"id":"119483","content":"哈哈哈是的，所以正常项目中不要使用哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1640577736,"ip_address":"","comment_id":328084,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640521389","product_id":100100701,"comment_content":"虽然编译过了，但这个可读性太差了","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541836,"discussion_content":"哈哈哈是的，所以正常项目中不要使用哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640577736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327937,"user_name":"Geekim","can_delete":false,"product_type":"c1","uid":1486989,"ip_address":"","ucode":"688EC27E7E83DF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIvcutTVtlHDS5DAzSjU6PhA4aicPZsRdqlhkA6mlXeib0jicVdV3cbewKxTGUDCoJnUTzyHANDPAfiaA/132","comment_is_top":false,"comment_ctime":1640403364,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"1640403364","product_id":100100701,"comment_content":"原文中的<br>使用指针的注意事项<br>借助指针，我们可以灵活地使用程序存放在堆内存与栈内存中的数据，但不当的指针使用方式也可能会导致程序  <br>但不当应该是当不但 ","like_count":0,"discussions":[{"author":{"id":2562791,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MaygtS9JLKOhljn4Vaic7twtCYq0p4EJqia7BB1nCiaZKXAricom9cdeEQHtgTOEBD0WpMJ5IoGI1nzYqpDsEsjsJQ/132","nickname":"🐑 🐑 得意","note":"","ucode":"9BF26FA42C3B61","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541578,"discussion_content":"你说的我没看懂……感觉之前的句子没问题呀？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640449221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567123,"discussion_content":"“但不当的……”=“但是，不正确的/不合理的……”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650848066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2336991,"avatar":"https://static001.geekbang.org/account/avatar/00/23/a8/df/f3eaf89e.jpg","nickname":"i Love 3🍀","note":"","ucode":"3AC31D3B2BA6FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545247,"discussion_content":"中文博大精深哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641886462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327791,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1640308719,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1640308719","product_id":100100701,"comment_content":"竟然真的可以编译，从汇编上看 3[arr] 的值是从编译期就确定的，活久见，目前还未见过这种数组取值方式。","like_count":0,"discussions":[{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541406,"discussion_content":"这不难理解吧……因为arr[3]等于arr+3等于3+arr等于3[arr]","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1640356911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2613059,"avatar":"https://static001.geekbang.org/account/avatar/00/27/df/43/0773c064.jpg","nickname":"不会MATLAB","note":"","ucode":"725795EDB38F5A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544521,"discussion_content":"nb,原来如此，看来我没有理解透彻。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641544960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}