{"id":384366,"title":"16 | 划分土地（上）：如何划分与组织内存？","content":"<p>你好，我是LMOS。</p><p>内存跟操作系统的关系，就像土地和政府的关系一样。政府必须合理规划这个国家的土地，才能让人民安居乐业。为了发展，政府还要进而建立工厂、学校，发展工业和教育，规划城镇，国家才能繁荣富强。</p><p>而作为计算机的实际掌权者，操作系统必须科学合理地管理好内存，应用程序才能高效稳定地运行。</p><p>内存管理是一项复杂的工作，我会用三节课带你搞定它。</p><p>具体我是这么安排的：这节课，我们先解决内存的划分方式和内存页的表示、组织问题，设计好数据结构。下一节课，我会带你在内存中建立数据结构对应的实例变量，搞定内存页的初始化问题。最后一节课，我们会依赖前面建好的数据结构，实现内存页面管理算法。</p><p>好，今天我们先从内存的划分单位讲起，一步步为内存管理工作做好准备。</p><p>今天课程的配套代码，你可以点击<a href=\"https://gitee.com/lmos/cosmos/tree/master/lesson16~18/Cosmos\">这里</a>，自行下载。</p><h2>分段还是分页</h2><p>要划分内存，我们就要先确定划分的单位是按段还是按页，就像你划分土地要选择按亩还是按平方分割一样。</p><p>其实分段与分页的优缺点，前面MMU相关的课程已经介绍过了。这里我们从内存管理角度，理一理分段与分页的问题。</p><p><strong>第一点，从表示方式和状态确定角度考虑。</strong>段的长度大小不一，用什么数据结构表示一个段，如何确定一个段已经分配还是空闲呢？而页的大小固定，我们只需用位图就能表示页的分配与释放。</p><!-- [[[read_end]]] --><p>比方说，位图中第1位为1，表示第一个页已经分配；位图中第2位为0，表示第二个页是空闲，每个页的开始地址和大小都是固定的。</p><p><strong>第二点，从内存碎片的利用看，</strong>由于段的长度大小不一，更容易产生内存碎片，例如内存中有A段（内存地址：0～5000）、 B段（内存地址：5001～8000）、C段（内存地址：8001～9000），这时释放了B段，然后需要给D段分配内存空间，且D段长度为5000。</p><p>你立马就会发现A段和C段之间的空间（B段）不能满足，只能从C段之后的内存空间开始分配，随着程序运行，这些情况会越来越多。段与段之间存在着不大不小的空闲空间，内存总的空闲空间很多，但是放不下一个新段。</p><p>而页的大小固定，分配最小单位是页，页也会产生碎片，比如我需要请求分配4个页，但在内存中从第1～3个页是空闲的，第4个页是分配出去了，第5个页是空闲的。这种情况下，我们通过修改页表的方式，就能让连续的虚拟页面映射到非连续的物理页面。</p><p><strong>第三点，从内存和硬盘的数据交换效率考虑，</strong>当内存不足时，操作系统希望把内存中的一部分数据写回硬盘，来释放内存。这就涉及到内存和硬盘交换数据，交换单位是段还是页？</p><p>如果是段的话，其大小不一，A段有50MB，B段有1KB，A、B段写回硬盘的时间也不同，有的段需要时间长，有的段需要时间短，硬盘的空间分配也会有上面第二点同样的问题，这样会导致系统性能抖动。如果每次交换一个页，则没有这些问题。</p><p>还有最后一点，<strong>段最大的问题是使得虚拟内存地址空间，难于实施。</strong>（后面的课还会展开讲）</p><p>综上，我们自然选择分页模式来管理内存，其实现在所有的商用操作系统都使用了分页模式管理内存。我们用4KB作为页大小，这也正好对应x86 CPU长模式下MMU 4KB的分页方式。</p><h2>如何表示一个页</h2><p>我们使用分页模型来管理内存。首先是把物理内存空间分成4KB大小页，这页表示从地址x开始到x+0xFFF这一段的物理内存空间，x必须是0x1000对齐的。这一段x+0xFFF的内存空间，称为<strong>内存页</strong>。</p><p>在逻辑上的结构图如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/de/93/deb1435e59110ac9e50738c9a363db93.jpg?wh=3255*3005\" alt=\"\" title=\" 物理内存分页结构图\"></p><p>上图这是一个接近真实机器的情况，不过一定不要忘记前面的内存布局示图，真实的物理内存地址空间不是连续的，这中间可能有空洞，可能是显存，也可能是外设的寄存器。</p><p>真正的物理内存空间布局信息来源于<strong>e820map_t结构数组</strong>，之前的初始化中，我们已经将其转换成phymmarge_t结构数组了，由 kmachbsp-&gt;mb_e820expadr指向。</p><p>那问题来了，现在我们已经搞清楚了什么是页，但如何表示一个页呢？</p><p>你可能会想到位图或者整型变量数组，用其中一个位代表一个页，位值为0时表示页空闲，位值为1时表示页已分配；或者用整型数组中一个元素表示一个页，用具体数组元素的数值代表页的状态。</p><p>如果这样的话，分配、释放内存页的算法就确定了，就是扫描位图或者扫描数组。这样确实可以做出最简单的内存页管理器，但这也是最低效的。</p><p>上面的方案之所以低效，是因为我们仅仅只是保存了内存页的空闲和已分配的信息，这是不够的。我们的Cosmos当然不能这么做，我们需要页的状态、页的地址、页的分配记数、页的类型、页的链表，你自然就会想到，这些信息可以用一个<strong>C语言结构体</strong>封装起来。</p><p>让我们马上就来实现这个结构体，在cosmos/include/halinc/下建立一个msadsc_t.h文件，在其中实现这个结构体，代码如下所示。</p><pre><code>//内存空间地址描述符标志\ntypedef struct s_MSADFLGS\n{\n    u32_t mf_olkty:2;    //挂入链表的类型\n    u32_t mf_lstty:1;    //是否挂入链表\n    u32_t mf_mocty:2;    //分配类型，被谁占用了，内核还是应用或者空闲\n    u32_t mf_marty:3;    //属于哪个区\n    u32_t mf_uindx:24;   //分配计数\n}__attribute__((packed)) msadflgs_t; \n//物理地址和标志  \ntypedef struct s_PHYADRFLGS\n{\n    u64_t paf_alloc:1;     //分配位\n    u64_t paf_shared:1;    //共享位\n    u64_t paf_swap:1;      //交换位\n    u64_t paf_cache:1;     //缓存位\n    u64_t paf_kmap:1;      //映射位\n    u64_t paf_lock:1;      //锁定位\n    u64_t paf_dirty:1;     //脏位\n    u64_t paf_busy:1;      //忙位\n    u64_t paf_rv2:4;       //保留位\n    u64_t paf_padrs:52;    //页物理地址位\n}__attribute__((packed)) phyadrflgs_t;\n//内存空间地址描述符\ntypedef struct s_MSADSC\n{\n    list_h_t md_list;           //链表\n    spinlock_t md_lock;         //保护自身的自旋锁\n    msadflgs_t md_indxflgs;     //内存空间地址描述符标志\n    phyadrflgs_t md_phyadrs;    //物理地址和标志\n    void* md_odlink;            //相邻且相同大小msadsc的指针\n}__attribute__((packed)) msadsc_t;\n</code></pre><p>msadsc_t结构看似很大，实则很小，也必须要小，因为它表示一个页面，物理内存页有多少就需要有多少个msadsc_t结构。正是因为页面地址总是按4KB对齐，所以phyadrflgs_t结构的低12位才可以另作它用。</p><p>msadsc_t结构里的链表，可以方便它挂入到其他数据结构中。除了分配计数，msadflgs_t结构中的其他部分都是用来描述msadsc_t结构本身信息的。</p><h2>内存区</h2><p>就像规划城市一样，一个城市常常会划分成多个不同的小区，我们Cosmos的内存管理器不仅仅是将内存划分成页面，还会把多个页面分成几个内存区，方便我们对内存更加合理地管理，进一步做精细化的控制。</p><p>我想提醒你的是，内存区和内存页不同，内存区只是一个逻辑上的概念，并不是硬件上必需的，就是说就算没有内存区，也毫不影响硬件正常工作；但是没有内存页是绝对不行的。</p><p>那么内存区到底是什么？我们一起看一幅图就明白了，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/af/8b/af614598562750407340e6db7a9e868b.jpg?wh=3042*2805\" alt=\"\" title=\"内存区\"></p><p>根据前面的图片，我们发现把物理内存分成三个区，分别为硬件区，内核区，应用区。那它们有什么作用呢？我们分别来看看。</p><p>首先来看<strong>硬件区</strong>，它占用物理内存低端区域，地址区间为0~32MB。从名字就能看出来，这个内存区域是给硬件使用的，我们不是使用虚拟地址吗？虚拟地址不是和物理地址无关吗，一个虚拟可以映射到任一合法的物理地址。</p><p>但凡事总有例外，虚拟地址主要依赖于CPU中的MMU，但有很多外部硬件能直接和内存交换数据，常见的有DMA，并且它只能访问低于24MB的物理内存。这就导致了我们很多内存页不能随便分配给这些设备，但是我们只要规定硬件区分配内存页就好，这就是硬件区的作用。</p><p>接着是<strong>内核区</strong>，内核也要使用内存，但是内核同样也是运行在虚拟地址空间，就需要有一段物理内存空间和内核的虚拟地址空间是线性映射关系。</p><p>再者，很多时候，内核使用内存需要大的、且连续的物理内存空间，比如一个进程的内核栈要16KB连续的物理内存、显卡驱动可能需要更大的连续物理内存来存放图形图像数据。这时,我们就需要在这个内核区中分配内存了。</p><p>最后我们来看下<strong>应用区</strong>，这个区域主是给应用用户态程序使用。应用程序使用虚拟地址空间，一开始并不会为应用一次性分配完所需的所有物理内存，而是按需分配，即应用用到一页就分配一个页。</p><p>如果访问到一个没有与物理内存页建立映射关系的虚拟内存页，这时候CPU就会产生缺页异常。最终这个缺页异常由操作系统处理，操作系统会分配一个物理内存页，并建好映射关系。</p><p>这是因为这种情况往往分配的是单个页面，所以为了给单个页面提供快捷的内存请求服务，就需要<strong>把离散的单页、或者是内核自身需要建好页表才可以访问的页面，统统收归到用户区。</strong></p><p>但是我们要如何表示一个内存区呢？和先前物理内存页面一样，我们需要定义一个数据结构，来表示一个内存区的开始地址和结束地址，里面有多少个物理页面，已经分配了多少个物理页面，剩下多少等等。</p><p>我们一起来写出这个数据结构，代码如下所示。</p><pre><code>#define MA_TYPE_HWAD 1\n#define MA_TYPE_KRNL 2\n#define MA_TYPE_PROC 3\n#define MA_HWAD_LSTART 0\n#define MA_HWAD_LSZ 0x2000000\n#define MA_HWAD_LEND (MA_HWAD_LSTART+MA_HWAD_LSZ-1)\n#define MA_KRNL_LSTART 0x2000000\n#define MA_KRNL_LSZ (0x40000000-0x2000000)\n#define MA_KRNL_LEND (MA_KRNL_LSTART+MA_KRNL_LSZ-1)\n#define MA_PROC_LSTART 0x40000000\n#define MA_PROC_LSZ (0xffffffff-0x40000000)\n#define MA_PROC_LEND (MA_PROC_LSTART+MA_PROC_LSZ)\n\ntypedef struct s_MEMAREA\n{\n    list_h_t ma_list;             //内存区自身的链表\n    spinlock_t ma_lock;           //保护内存区的自旋锁\n    uint_t ma_stus;               //内存区的状态\n    uint_t ma_flgs;               //内存区的标志 \n    uint_t ma_type;               //内存区的类型\n    sem_t ma_sem;                 //内存区的信号量\n    wait_l_head_t ma_waitlst;     //内存区的等待队列\n    uint_t ma_maxpages;           //内存区总的页面数\n    uint_t ma_allocpages;         //内存区分配的页面数\n    uint_t ma_freepages;          //内存区空闲的页面数\n    uint_t ma_resvpages;          //内存区保留的页面数\n    uint_t ma_horizline;          //内存区分配时的水位线\n    adr_t ma_logicstart;          //内存区开始地址\n    adr_t ma_logicend;            //内存区结束地址\n    uint_t ma_logicsz;            //内存区大小\n    //还有一些结构我们这里不关心。后面才会用到\n}memarea_t；\n</code></pre><p>好了，关于内存区的数据结构我们就设计好了，但是这仍然不能让我们高效地分配内存，因为我们没有把内存区数据结构和内存页面数据结构关联起来，如果我们现在要分配内存页依然要遍历扫描msadsc_t结构数组，这和扫描位图没有本质的区别。</p><p>下面我们就把它们之间关联起来，也就是组织内存页。</p><h2>组织内存页</h2><p>如何组织内存页呢？按照我们之前对msadsc_t结构的定义，组织内存页就是组织msadsc_t结构，而msadsc_t结构中就有一个链表，你大概已经猜到了，我们组织msadsc_t结构正是通过另一个数据结构中的链表，将msadsc_t结构串连在其中的。</p><p>如果仅仅是这样，那我们将扫描这个链表，而这和之前扫描msadsc_t结构数组没有任何区别。</p><p>所以，我们需要更加科学合理地组织msadsc_t结构，下面我们来定义一个挂载msadsc_t结构的数据结构，它其中需要锁、状态、msadsc_t结构数量，挂载msadsc_t结构的链表、和一些统计数据。</p><pre><code>typedef struct s_BAFHLST\n{\n    spinlock_t af_lock;    //保护自身结构的自旋锁\n    u32_t af_stus;         //状态 \n    uint_t af_oder;        //页面数的位移量\n    uint_t af_oderpnr;     //oder对应的页面数比如 oder为2那就是1&lt;&lt;2=4\n    uint_t af_fobjnr;      //多少个空闲msadsc_t结构，即空闲页面\n    uint_t af_mobjnr;      //此结构的msadsc_t结构总数，即此结构总页面\n    uint_t af_alcindx;     //此结构的分配计数\n    uint_t af_freindx;     //此结构的释放计数\n    list_h_t af_frelst;    //挂载此结构的空闲msadsc_t结构\n    list_h_t af_alclst;    //挂载此结构已经分配的msadsc_t结构\n}bafhlst_t;\n</code></pre><p>有了bafhlst_t数据结构，我们只是有了挂载msadsc_t结构的地方，这并没有做到科学合理。</p><p>但是，如果我们把多个bafhlst_t数据结构组织起来，形成一个bafhlst_t结构数组，并且把这个bafhlst_t结构数组放在一个更高的数据结构中，这个数据结构就是内存分割合并数据结构——memdivmer_t，那情况就不一样了。</p><p>有何不一样呢？请往下看。</p><pre><code>#define MDIVMER_ARR_LMAX 52\ntypedef struct s_MEMDIVMER\n{\n    spinlock_t dm_lock;      //保护自身结构的自旋锁\n    u32_t dm_stus;           //状态\n    uint_t dm_divnr;         //内存分配次数\n    uint_t dm_mernr;         //内存合并次数\n    bafhlst_t dm_mdmlielst[MDIVMER_ARR_LMAX];//bafhlst_t结构数组\n    bafhlst_t dm_onemsalst;  //单个的bafhlst_t结构\n}memdivmer_t;\n\n</code></pre><p>那问题来了，内存不是只有两个标准操作吗，这里我们为什么要用分割和合并呢？这其实取意于我们的内存分配、释放算法，对这个算法而言分配内存就是分割内存，而释放内存就是合并内存。</p><p>如果memdivmer_t结构中dm_mdmlielst数组只是一个数组，那是没有意义的。我们正是要通过 dm_mdmlielst数组，来划分物理内存地址不连续的msadsc_t结构。</p><p>dm_mdmlielst数组中第0个元素挂载单个msadsc_t结构，它们的物理内存地址可能对应于0x1000，0x3000，0x5000。</p><p>dm_mdmlielst数组中第1个元素挂载两个连续的msadsc_t结构，它们的物理内存地址可能对应于0x8000～0x9FFF，0xA000～0xBFFF；dm_mdmlielst数组中第2个元素挂载4个连续的msadsc_t结构，它们的物理内存地址可能对应于0x100000～0x103FFF，0x104000～0x107FFF……</p><p>依次类推，dm_mdmlielst数组挂载连续msadsc_t结构的数量等于用1左移其数组下标，如数组下标为3，那结果就是8（1&lt;&lt;3）个连续的msadsc_t结构。</p><p>需要注意的是，<strong>我们并不在意其中第一个msadsc_t结构对应的内存物理地址从哪里开始，但是第一个msadsc_t结构与最后一个msadsc_t结构，它们之间的内存物理地址是连续的。</strong></p><p>如果还是不明白，我们来画个图就清楚了。</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/01/8af79b011589c5081815a43a2211e901.jpg?wh=5812*4832\" alt=\"\" title=\"页面组织结构示意图\"></p><p>从上图上我们可以看出，每个内存区memarea_t结构中包含一个内存分割合并memdivmer_t结构，而在memdivmer_t结构中又包含dm_mdmlielst数组。在dm_mdmlielst数组中挂载了多个msadsc_t结构。</p><p>那么为什么要这么组织呢？后面我们在分配内存的时候，你就会明白了。</p><h2>重点回顾</h2><p>今天我们从比对分段与分页的区别开始思考，确定了使用分页方式，设计了内存页、内存区等一系列数据结构，下面我们来回顾一下本课程的重点。</p><p>1.我们探讨了<strong>分段与分页的区别</strong>，发现段长度不一，容易产生内存碎片、不容易和硬盘换入换出数据，更不能实现扁平化的虚拟内存地址空间，由于这些不足我们选择了分页模式来管理内存，其实现在所有的商用操作系统都使用了分页模式管理内存。</p><p>2.为了实现分页管理，首先是解决<strong>如何表示一个物理内存页</strong>，我们想到过位图和字节数组，但是它们遍历扫描，性能太差，于是设计了更复杂的<strong>msadsc_t结构</strong>，一个msadsc_t结构对应一个可用的物理内存页面。</p><p>3.为了适应不同的物理地址空间的要求，比如有些设备需要低端的物理地址，而有的需要大而连续地址空间，我们对内存进行分区，<strong>设计了memarea_t结构</strong>。</p><p>每个memarea_t结构表示一个内存区，memarea_t结构中包含一个内存分割合并memdivmer_t结构，而在memdivmer_t结构中又包含了bafhlst_t结构类型dm_mdmlielst数组。在dm_mdmlielst数组中挂载了多个msadsc_t结构。</p><h2>思考题</h2><p>我们为什么要以2的（0～52）次方为页面数来组织页面呢？</p><p>欢迎你在留言区跟我交流互动，也欢迎你把这节课分享给你的同事、朋友。</p><p>我是LMOS，我们下节课见！</p>","comments":[{"had_liked":false,"id":297577,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":true,"comment_ctime":1623648557,"is_pvip":false,"replies":[{"id":"108057","content":"你好，总结的相当到位  ","user_name":"作者回复","comment_id":297577,"uid":"1345199","ip_address":"","utype":1,"ctime":1623722746,"user_name_real":"LMOS"}],"discussion_count":3,"race_medal":0,"score":"9.2233721973921997e+18","product_id":100078401,"comment_content":"memarea_t ，进行内存区，解决功能分区的问题<br>-&gt; memdivmer_t ，进行内存分割合并管理<br>-&gt; bafhlst_t，以2的n次方对内存页面进行分组<br>-&gt;msadsc_t，解决单一页面管理问题<br><br>用2的N次方寻址主要有几方面原有：<br>1、内存对齐，提升CPU寻址速度<br>2、内存分配时，根据需求大小快速定位至少从哪一部分开始<br>3、内存分配时，并发加锁，分组可以提升效率<br>4、内存分配回收时，很多计算也更简单","like_count":38,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521861,"discussion_content":"你好，总结的相当到位  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623722746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2103320,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/YQBwClu5f6pibYCNxoEgKkM2uvgytevWp1FBVnec3ialmFDsftEvjvRShYKn2cTicmK8M9az6ribcz65zPpGq3X3QA/132","nickname":"Geek_a68e6d","note":"","ucode":"F7AD54784E79A6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548053,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643013463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390150,"discussion_content":"mark\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629690740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299389,"user_name":"嗣树","can_delete":false,"product_type":"c1","uid":1019334,"ip_address":"","ucode":"C6196E30F867D0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c6/e648d118.jpg","comment_is_top":false,"comment_ctime":1624607879,"is_pvip":false,"replies":[{"id":"108711","content":"是的 ","user_name":"作者回复","comment_id":299389,"uid":"1345199","ip_address":"","utype":1,"ctime":1624846479,"user_name_real":"LMOS"}],"discussion_count":2,"race_medal":0,"score":"78934019207","product_id":100078401,"comment_content":"neohope 老哥学习榜样，我做点补充吧。<br>之所以是 0-52 是因为 64 - 12 = 52，64位地址，12是页大小<br><br>而选用 2 的幂次可以把算术运算都转化为位操作，位操作是要比算术运算快的。应用层可能为了可读性而不去使用位操作，但是在内核中只要是需要性能都会往这方面靠，所以往往会浪费点空间凑个整。1024凑整没毛病嗷😂<br><br>内存管理也是绝对的高频操作，这样差别还是很可观的。","like_count":19,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522430,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624846479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390151,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629690839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297557,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1623636508,"is_pvip":false,"replies":[{"id":"108061","content":"是的，这么操作 同时也是为了降低内存碎片","user_name":"作者回复","comment_id":297557,"uid":"1345199","ip_address":"","utype":1,"ctime":1623723105,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"40278342172","product_id":100078401,"comment_content":"对于思考题，原文中：<br>依次类推，dm_mdmlielst 数组挂载连续 msadsc_t 结构的数量等于用 1 左移其数组下标，如数组下标为 3，那结果就是 8（1&lt;&lt;3）个连续的 msadsc_t 结构。<br><br>因此页面数统统都是 2 的倍数，8 是 2^3，这个地方我百思不得其解，页面数为什么是 2 的倍数，在 tmalloc 中，分配的对象大小都是 2 的倍数，原因是为了减少内存碎片和对齐，虽然这与本文的问题不搭边，但是可以拿来套。<br>因此我猜测，由于页的大小是 2 的倍数，因此页的个数也要是 2 的倍数，这样就能实现页内存对齐，减少内存分配时的碎片。<br>","like_count":10,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521854,"discussion_content":"是的，这么操作 同时也是为了降低内存碎片","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623723105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308657,"user_name":"太阳","can_delete":false,"product_type":"c1","uid":2085640,"ip_address":"","ucode":"24B8E951956789","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d3/08/ffd93029.jpg","comment_is_top":false,"comment_ctime":1629721423,"is_pvip":false,"replies":[{"id":"111756","content":"你说的对，原则上我们确实只需保证虚拟地址连续，然后通过MMU映射就好了，但是很多物设备也要访问物理内存，但是它们地址并不经过MMU，这类设备有DMA，网卡，AHCI等等，所以有些情况就需要连续的物理内存空间 ","user_name":"作者回复","comment_id":308657,"uid":"1345199","ip_address":"","utype":1,"ctime":1629771105,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"10219656015","product_id":100078401,"comment_content":"文中说 “很多时候，内核使用内存需要大的、且连续的物理内存空间”  还有 “但是第一个 msadsc_t 结构与最后一个 msadsc_t 结构，它们之间的内存物理地址是连续的。”，为什么需要物理内存连续，既然可以通过MMU进行地址转换，是否可以只是虚拟内存连续，物理内存随意？内存管理的时候虚拟内存和物理内存分别怎么操作？","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525574,"discussion_content":"你说的对，原则上我们确实只需保证虚拟地址连续，然后通过MMU映射就好了，但是很多物设备也要访问物理内存，但是它们地址并不经过MMU，这类设备有DMA，网卡，AHCI等等，所以有些情况就需要连续的物理内存空间 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629771105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298627,"user_name":"thomas","can_delete":false,"product_type":"c1","uid":1016777,"ip_address":"","ucode":"9AB945308F1B50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/c9/5d03981a.jpg","comment_is_top":false,"comment_ctime":1624242725,"is_pvip":true,"replies":[{"id":"108445","content":"block alloc free head list ","user_name":"作者回复","comment_id":298627,"uid":"1345199","ip_address":"","utype":1,"ctime":1624421915,"user_name_real":"LMOS"}],"discussion_count":3,"race_medal":0,"score":"10214177317","product_id":100078401,"comment_content":"typedef struct s_BAFHLST  这个命名是什么的缩写？<br>比如msadsc_t 这个命名就有做说明 内存空间地址描述符（memory space address descriptor）","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522195,"discussion_content":"block alloc free head list ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624421915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177540,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","nickname":"小文","note":"","ucode":"974071FAA5F173","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413881,"discussion_content":"这名字太难理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636595618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380257,"discussion_content":"BAFH：block alloc free head","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624414882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298404,"user_name":"Zhendicai","can_delete":false,"product_type":"c1","uid":2536364,"ip_address":"","ucode":"6E1A8AE4C33CBE","user_header":"https://static001.geekbang.org/account/avatar/00/26/b3/ac/2c8baa5e.jpg","comment_is_top":false,"comment_ctime":1624086820,"is_pvip":false,"replies":[{"id":"108293","content":"对的，是这样的","user_name":"作者回复","comment_id":298404,"uid":"1345199","ip_address":"","utype":1,"ctime":1624181381,"user_name_real":"LMOS"}],"discussion_count":2,"race_medal":0,"score":"10214021412","product_id":100078401,"comment_content":"思考题应该是因为<br>dm_mdmlielst最后一个元素的下标是51也就是2^51,  2^51 x 2^12=2^63, 就是说这时只需要两个bafhlst_t就能够表示完整的地址空间， 再多的话就超过了64位地址空间了。如果dm_mdmlielst再加一个元素的话 那就只需要一个bafhlst_t就能表示完整地址空间 但是没啥意义了<br>应该是这样的吧","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522127,"discussion_content":"对的，是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624181381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064750,"avatar":"","nickname":"springXu","note":"","ucode":"F5DB0B963C894F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380554,"discussion_content":"回答了为什么最大数组的个数是52的原因。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624553702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323543,"user_name":"PAWCOOK","can_delete":false,"product_type":"c1","uid":2679422,"ip_address":"","ucode":"699230E475966A","user_header":"https://static001.geekbang.org/account/avatar/00/28/e2/7e/ffde572d.jpg","comment_is_top":false,"comment_ctime":1637981311,"is_pvip":false,"replies":[{"id":"117628","content":"可以啊","user_name":"作者回复","comment_id":323543,"uid":"1345199","ip_address":"","utype":1,"ctime":1638323384,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5932948607","product_id":100078401,"comment_content":"请问结构memdivmer_t有什么作用呢？我们可不可以直接将这个结构里面的内容放到memarea_t 中去","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534954,"discussion_content":"可以啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638323384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301467,"user_name":"Mike_Han","can_delete":false,"product_type":"c1","uid":2616914,"ip_address":"","ucode":"C0E41AD4247A62","user_header":"https://static001.geekbang.org/account/avatar/00/27/ee/52/cda34b19.jpg","comment_is_top":false,"comment_ctime":1625709193,"is_pvip":false,"replies":[{"id":"109189","content":"由代码控制的","user_name":"作者回复","comment_id":301467,"uid":"1345199","ip_address":"","utype":1,"ctime":1625802761,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5920676489","product_id":100078401,"comment_content":"这是原文中的内容，我想请教个问题，<br>&quot;需要注意的是，我们并不在意其中第一个 msadsc_t 结构对应的内存物理地址从哪里开始，但是第一个 msadsc_t 结构与最后一个 msadsc_t 结构，它们之间的内存物理地址是连续的。&quot;<br>怎么做到&quot;第一个 msadsc_t 结构与最后一个 msadsc_t 结构，它们之间的内存物理地址是连续的&quot; ，怎么做到连续的？","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523004,"discussion_content":"由代码控制的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625802761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299700,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1624804607,"is_pvip":false,"replies":[{"id":"108695","content":"嗯嗯  猜对了","user_name":"作者回复","comment_id":299700,"uid":"1345199","ip_address":"","utype":1,"ctime":1624844257,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5919771903","product_id":100078401,"comment_content":"思考题: 我们为什么要以 2 的（0～52）次方为页面数来组织页面呢？<br><br>应该是 内存分配时，根据需求大小快速定位至少从哪一部分开始","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522509,"discussion_content":"嗯嗯  猜对了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624844257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299429,"user_name":"！null","can_delete":false,"product_type":"c1","uid":1242483,"ip_address":"","ucode":"4E5B7922980397","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","comment_is_top":false,"comment_ctime":1624622843,"is_pvip":false,"replies":[{"id":"108710","content":"对的 ","user_name":"作者回复","comment_id":299429,"uid":"1345199","ip_address":"","utype":1,"ctime":1624846433,"user_name_real":"LMOS"}],"discussion_count":2,"race_medal":0,"score":"5919590139","product_id":100078401,"comment_content":"最后像是buddy","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522440,"discussion_content":"对的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624846433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2616914,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ee/52/cda34b19.jpg","nickname":"Mike_Han","note":"","ucode":"C0E41AD4247A62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382736,"discussion_content":"这个像是buddy，但是最大设置为2的52次方，这个太大了吧？有什么用呢？\n好像buddy最多有12 ？2的12次方已经是4K个页面了，每个页面又有4K，这个就是16G了吧？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625709576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298405,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1624087044,"is_pvip":true,"replies":[{"id":"108292","content":"不完全 是哟","user_name":"作者回复","comment_id":298405,"uid":"1345199","ip_address":"","utype":1,"ctime":1624181349,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5919054340","product_id":100078401,"comment_content":"因为计算机使用的是2进制，2的倍数可以表示任一大小，如：3 = 4 - 1 如此高效分配，使用位移运算，假如用连续的自然数管理，在大内存申请的申请下需要一系列计算","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522128,"discussion_content":"不完全 是哟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624181349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297592,"user_name":"GroverZhu","can_delete":false,"product_type":"c1","uid":1581538,"ip_address":"","ucode":"401AA530813D7F","user_header":"https://static001.geekbang.org/account/avatar/00/18/21/e2/147c9f4c.jpg","comment_is_top":false,"comment_ctime":1623658354,"is_pvip":false,"replies":[{"id":"108056","content":"这是管理 物理内存页面","user_name":"作者回复","comment_id":297592,"uid":"1345199","ip_address":"","utype":1,"ctime":1623722546,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5918625650","product_id":100078401,"comment_content":"这个内存分配很像C++ STL中早期用的allocator，一个链表将可分配的内存串起来，每个节点管理不同大小的内存块","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521870,"discussion_content":"这是管理 物理内存页面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623722546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297558,"user_name":"springXu","can_delete":false,"product_type":"c1","uid":2064750,"ip_address":"","ucode":"F5DB0B963C894F","user_header":"","comment_is_top":false,"comment_ctime":1623636534,"is_pvip":true,"replies":[{"id":"108060","content":"对的，正常的操作","user_name":"作者回复","comment_id":297558,"uid":"1345199","ip_address":"","utype":1,"ctime":1623723012,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5918603830","product_id":100078401,"comment_content":"先留下个已阅的操作，然后再分析内容。这一讲是对内存操作的规划图。要做到手中无图，心里有图。 那算是学会了。","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521855,"discussion_content":"对的，正常的操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623723012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333809,"user_name":"PAWCOOK","can_delete":false,"product_type":"c1","uid":2679422,"ip_address":"","ucode":"699230E475966A","user_header":"https://static001.geekbang.org/account/avatar/00/28/e2/7e/ffde572d.jpg","comment_is_top":false,"comment_ctime":1644546156,"is_pvip":false,"replies":[{"id":"121978","content":"后面会改掉的","user_name":"作者回复","comment_id":333809,"uid":"1345199","ip_address":"","utype":1,"ctime":1644638709,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1644546156","product_id":100078401,"comment_content":"请问在二级引导器中建立内核MMU的页表数据时使用的是长模式下的 2MB 分页方式，而本节内存管理使用的却是4KB，这样是不是冲突了呢","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550611,"discussion_content":"后面会改掉的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644638709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329387,"user_name":"六爷。","can_delete":false,"product_type":"c1","uid":1171944,"ip_address":"","ucode":"C169E50835C365","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/e8/a839f173.jpg","comment_is_top":false,"comment_ctime":1641309491,"is_pvip":false,"replies":[{"id":"120026","content":"有哪些命名不明白可以具体说一下么～<br><br>不是全部的函数名，知道名字就了解意思了，这个也是跟应用层代码很大的不同。你可以重点关注一下这些函数起到了啥作用。","user_name":"编辑回复","comment_id":329387,"uid":"1501385","ip_address":"","utype":2,"ctime":1641431227,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1641309491","product_id":100078401,"comment_content":"老师你好，关于文章中的命名，能否给一个缩写和全称的对应表，否则看起来实在很困惑，对于不熟悉的同学，比如我，这些名字给我的体感和a、b、c、i、j、k差不多","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544154,"discussion_content":"有哪些命名不明白可以具体说一下么～\n\n不是全部的函数名，知道名字就了解意思了，这个也是跟应用层代码很大的不同。你可以重点关注一下这些函数起到了啥作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641431227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690797,"avatar":"https://static001.geekbang.org/account/avatar/00/29/0e/ed/3ff5d4bc.jpg","nickname":"小牧","note":"","ucode":"7AF236994B954E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551003,"discussion_content":"确实，小白看这种代码看得真难受，单看名字根本难以和它的功能联系在一起，非常容易搞混","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644844134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321132,"user_name":"Geek_2b4f9b","can_delete":false,"product_type":"c1","uid":2629021,"ip_address":"","ucode":"E8B3085843D9B0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/z4hFFGreQKdDEJn7icpgjyFzlSSHqKB2oiadtiamrnL7LD1QZic5Fgic4KASynRP1Qwfd3nu2D9UMBf2rliabSHrf72Q/132","comment_is_top":false,"comment_ctime":1636686080,"is_pvip":false,"replies":[{"id":"116625","content":"你好，主要用了drawio，文末的导图用了mindmaster。不过画起来也没有很快，你要选择熟练顺手的工具。","user_name":"编辑回复","comment_id":321132,"uid":"1501385","ip_address":"","utype":2,"ctime":1636704590,"user_name_real":"赵宇新"}],"discussion_count":2,"race_medal":0,"score":"1636686080","product_id":100078401,"comment_content":"插一个跟主题无关的问题，作者使用的画图工具是哪一个？我在记笔记过程中也会根据自己的理解画一些图，但是使用的 Execl ，感觉画出来效果咋地，而且耗时。","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530225,"discussion_content":"你好，主要用了drawio，文末的导图用了mindmaster。不过画起来也没有很快，你要选择熟练顺手的工具。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636704590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2629021,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/z4hFFGreQKdDEJn7icpgjyFzlSSHqKB2oiadtiamrnL7LD1QZic5Fgic4KASynRP1Qwfd3nu2D9UMBf2rliabSHrf72Q/132","nickname":"Geek_2b4f9b","note":"","ucode":"E8B3085843D9B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414269,"discussion_content":"好的，感谢回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636705402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314605,"user_name":"makegcc","can_delete":false,"product_type":"c1","uid":1247811,"ip_address":"","ucode":"F8AFB78818AF74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4RIp8ImmfZTibNtuleGOAwyOCzT2cfYP4gwHjL0E0OiaL1DZtbGYYgZia1IVzFhgZ6QFjWugoXhQzBzJz28HWfJXA/132","comment_is_top":false,"comment_ctime":1633254049,"is_pvip":false,"replies":[{"id":"113960","content":"bafh：block alloc free  head","user_name":"编辑回复","comment_id":314605,"uid":"1501385","ip_address":"","utype":2,"ctime":1633271617,"user_name_real":"赵宇新"}],"discussion_count":1,"race_medal":0,"score":"1633254049","product_id":100078401,"comment_content":"命名的单词什么规则啊 bafhlist全称是什么？","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527734,"discussion_content":"bafh：block alloc free  head","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633271617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312676,"user_name":"搬铁少年ai","can_delete":false,"product_type":"c1","uid":1031045,"ip_address":"","ucode":"01D4A830A088D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/85/191eea69.jpg","comment_is_top":false,"comment_ctime":1631936955,"is_pvip":false,"replies":[{"id":"113304","content":"不是","user_name":"作者回复","comment_id":312676,"uid":"1345199","ip_address":"","utype":1,"ctime":1631945036,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"1631936955","product_id":100078401,"comment_content":"请问老师这个内存区域就是VMA吗?","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527074,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631945036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311971,"user_name":"杨军","can_delete":false,"product_type":"c1","uid":1988156,"ip_address":"","ucode":"AF881224E54C14","user_header":"https://static001.geekbang.org/account/avatar/00/1e/56/3c/f9ff3ed8.jpg","comment_is_top":false,"comment_ctime":1631580834,"is_pvip":false,"replies":[{"id":"113151","content":"C语言的位域 ","user_name":"作者回复","comment_id":311971,"uid":"1345199","ip_address":"","utype":1,"ctime":1631752444,"user_name_real":"LMOS"}],"discussion_count":2,"race_medal":0,"score":"1631580834","product_id":100078401,"comment_content":"&#47;&#47;内存空间地址描述符标志<br>typedef struct s_MSADFLGS{    <br>    u32_t mf_olkty:2;    &#47;&#47;挂入链表的类型    <br>    u32_t mf_lstty:1;    &#47;&#47;是否挂入链表    <br>    u32_t mf_mocty:2;    &#47;&#47;分配类型，被谁占用了，内核还是应用或者空闲     <br>    u32_t mf_marty:3;    &#47;&#47;属于哪个区    <br>    u32_t mf_uindx:24;   &#47;&#47;分配计数<br>}__attribute__((packed)) msadflgs_t; <br><br>这个冒号后的数字(:2)是什么意思呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526817,"discussion_content":"C语言的位域 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631752444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1988156,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/56/3c/f9ff3ed8.jpg","nickname":"杨军","note":"","ucode":"AF881224E54C14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393797,"discussion_content":":2 表示占用2个bit吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631603919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309924,"user_name":"沈畅","can_delete":false,"product_type":"c1","uid":1077953,"ip_address":"","ucode":"7404E41356B36B","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/c1/59509397.jpg","comment_is_top":false,"comment_ctime":1630396275,"is_pvip":true,"replies":[{"id":"112442","content":"后面内核对进程空间使用的是4KB","user_name":"作者回复","comment_id":309924,"uid":"1345199","ip_address":"","utype":1,"ctime":1630632169,"user_name_real":"LMOS"}],"discussion_count":2,"race_medal":0,"score":"1630396275","product_id":100078401,"comment_content":"前面13课MMU设置页表的时候使用的是2M的页，这里管理物理内存是按照4K进行管理，那么后续如果有实现页面调度等算法时，会不会比较麻烦？这里4K这个值是经验？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526065,"discussion_content":"后面内核对进程空间使用的是4KB","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630632169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077953,"avatar":"https://static001.geekbang.org/account/avatar/00/10/72/c1/59509397.jpg","nickname":"沈畅","note":"","ucode":"7404E41356B36B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391900,"discussion_content":"每个进程都有一个页表是吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630679307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309418,"user_name":"沈畅","can_delete":false,"product_type":"c1","uid":1077953,"ip_address":"","ucode":"7404E41356B36B","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/c1/59509397.jpg","comment_is_top":false,"comment_ctime":1630118348,"is_pvip":true,"replies":[{"id":"112120","content":"对的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1630286460,"ip_address":"","comment_id":309418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630118348","product_id":100078401,"comment_content":"memarea_t  内存分区，这个分区是对物理内存进行分区的。那么是不是能这么理解，当一个进程需要内存资源时，需要内核相关的内存资源就从内核区分物理内存，应用本身就从应用区分配？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525866,"discussion_content":"对的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630286460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309173,"user_name":"Geek_8b92bf","can_delete":false,"product_type":"c1","uid":2573588,"ip_address":"","ucode":"0EED09DA79D171","user_header":"","comment_is_top":false,"comment_ctime":1629967673,"is_pvip":false,"replies":[{"id":"111908","content":"单独处理单个页面的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1629974005,"ip_address":"","comment_id":309173,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629967673","product_id":100078401,"comment_content":"bafhlst_t dm_mdmlielst[MDIVMER_ARR_LMAX];&#47;&#47;bafhlst_t结构数组   <br>bafhlst_t dm_onemsalst;  &#47;&#47;单个的bafhlst_t结构<br><br>memdivmer_t结构中为什么要建立单个的bafhlst_t结构，这个不太理解","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525770,"discussion_content":"单独处理单个页面的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629974005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302735,"user_name":"吴建平","can_delete":false,"product_type":"c1","uid":2618440,"ip_address":"","ucode":"C6E578FB8627A3","user_header":"https://static001.geekbang.org/account/avatar/00/27/f4/48/2242bed9.jpg","comment_is_top":false,"comment_ctime":1626350165,"is_pvip":false,"replies":[{"id":"109567","content":"2的52次方少1 个 连续的4KB页面","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1626399016,"ip_address":"","comment_id":302735,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626350165","product_id":100078401,"comment_content":"思考题：MDIVMER_ARR_LMAX定义为52，表示从0~51页宽的bafhlst_t数组，而2的0到51次方相加，就等于2的52次方少1.  每页4k就是2的12次方。这样相当于，每个bafhlst_t单元包含一个对应页宽的连续内存刚好等于64G空间少一个页面","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523403,"discussion_content":"2的52次方少1 个 连续的4KB页面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626399016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301469,"user_name":"Mike_Han","can_delete":false,"product_type":"c1","uid":2616914,"ip_address":"","ucode":"C0E41AD4247A62","user_header":"https://static001.geekbang.org/account/avatar/00/27/ee/52/cda34b19.jpg","comment_is_top":false,"comment_ctime":1625710079,"is_pvip":false,"replies":[{"id":"109187","content":"不是buddy","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625802430,"ip_address":"","comment_id":301469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625710079","product_id":100078401,"comment_content":"请教下各位大佬。<br>这个像是buddy，但是最大设置为2的52次方，这个太大了吧？有什么用呢？<br>好像buddy最多有12 ？2的12次方已经是4K个页面了，每个页面又有4K，这个就是连续内存最大16G了吧？那2的52次方个 4K 页面的连续空间，这个更大了吧？还是我的计算有问题？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523005,"discussion_content":"不是buddy","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625802430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299693,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1624802997,"is_pvip":false,"replies":[{"id":"108696","content":"不会","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1624844295,"ip_address":"","comment_id":299693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624802997","product_id":100078401,"comment_content":"思考题 我们为什么要以 2 的（0～52）次方为页面数来组织页面呢？<br><br>思考题 还是不明白。这里以2 的（0～52）次方为页面数来组织页面，不会造成没办法组织完成整个页面吗？<br><br>","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522508,"discussion_content":"不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624844295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}