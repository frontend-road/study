{"id":409822,"title":"08 | 单元测试应该怎么写？","content":"<p>你好，我是郑晔！</p><p>经过前面的介绍，我们已经对测试的基础有了理解，已经会用自动化测试框架来写测试了。对于那些不可控的组件，我们也可以用 Mock 框架将其替换掉，让测试环境变得可控。其实，我们在前面介绍的这些东西都是为了让我们能够更好地编写单元测试。</p><p>单元测试是所有测试类型中最基础的，它的优点是运行速度快，可以尽早地发现问题。只有通过单元测试保证了每个组件的正确性，我们才拥有了构建系统的一块块稳定的基石。</p><p>按道理来说，我们应该尽可能多地编写单元测试，这可以帮助我们提高代码质量以及更准确地定位问题。但在实际的工作中，真正大面积编写单元测试的团队却并不多。前面我们已经提到了一部分原因（比如设计没有做好），也有团队虽然写了单元测试，但单元测试没有很好地起到保护网的作用，反而是在代码调整过程中成了阻碍。</p><p>这一讲，我们就把前面学到的知识串联起来，谈谈如何做好单元测试。</p><h2>单元测试什么时候写</h2><p>你是怎么编写单元测试的呢？很多人的做法是先把所有的功能代码都写完，然后，再针对写好的代码一点一点地补写测试。</p><p>在这种编写测试的做法中，单元测试扮演着非常不受人待见的角色。你的整个功能代码都写完了，再去写测试就成了一件为了应付差事不得不做的事情。更关键的一点是，你编写的这些代码可能是你几天的工作量，你已经很难记得在编写这堆代码时所有的细节了，这个时候补写的测试对提升代码质量的帮助已经不是很大了。</p><!-- [[[read_end]]] --><p>所以，想要写好单元测试，最后补测试的做法总是很糟糕的，仅仅比不写测试好一点。你要想写好单元测试的话，<strong>最好能够将代码和测试一起写</strong>。</p><p>你或许会说，我在功能写完后立即就补测试了，这不就是代码和测试一起写的吗？其中的差异在于，把所有的功能写完的这个粒度实在是太大了。为一个大任务编写测试，是一件难度非常大的事，这也是很多人觉得测试难写的重要因素。要想做好单元测试，关键就是工作的粒度要小。</p><p>如果你学过《10x 程序员工作法》，或许已经听出来了。没错，这里的关键点就是要做好任务分解，而任务分解的关键就是粒度要小。</p><blockquote>\n<p>I’m not a great programmer; I’m just a good programmer with great habits.<br>\n&nbsp;<br>\n我不是一个伟大的程序员，只是一个有着好习惯的优秀程序员。<br>\n&nbsp;<br>\n——  Kent Beck</p>\n</blockquote><p>任务分解是每个程序员都应该拥有的好习惯，即便你<strong>想写好单元测试也要从任务分解开始</strong>。所以，你需要把一个要完成的需求拆分成很多颗粒度很小的任务。粒度要小到可以在很短时间内完成，比如，半个小时就可以写完。只有能够把任务分解成微操作，我们才能够认清有足够的心力思考其中的每个细节。千万不要高估自己对于任务把控的粒度，<strong>一定要把任务分解到非常小，这是能够写好代码，写好测试的前提条件，甚至可以说是最关键的因素</strong>（如何具体分解一个需求，我曾经在《10x 程序员工作法》中专门用了<a href=\"https://time.geekbang.org/column/article/78542\">一讲的篇幅</a>进行介绍，如果你有兴趣不妨去回顾一下）。</p><p>当我们把需求拆分成颗粒度很小的任务时，我们才开始进入到编码的状态。而从这里开始，我们进入到代码和测试一起写的状态。</p><h2>编写单元测试的过程</h2><p>对于一个具体的任务，我们首先要弄清楚的是，怎么样算是完成了。一个完整的需求我们需要知道其验收标准是什么。具体到一个任务，虽然没有业务人员给我们提供验收标准，我们自己也要有一个验收标准，我们要能够去衡量怎么样才算是这个代码写合格了。</p><p>经过我们这一系列关于测试的介绍，你应该已经知道我要说什么了：<strong>一个任务的代码要通过测试才算编码阶段的完成。</strong></p><p>但测试用例从哪来呢？这就需要我们设计了。不同于业务测试的测试用例，我们现在要写的是单元测试。而我们要测的单元现在还没有写，所以，没有人会给我们提供测试用例，单元测试的用例只能我们自己来。</p><p>还记得我们在实战里怎么做的添加 Todo 项吗？接下来，我们就结合这个部分来谈谈具体怎么做。</p><p>我们首先要确定的是待测单元的行为，也就是要实现的类里的一个函数，它的行为是什么样的。或许你已经发现了，这其实就是一个软件设计的过程。这里的设计指的是微观的设计，就是具体的一个函数准备写成什么样子。通常到了动手写代码这一步，大的设计已经在前面做完了。</p><p>因为我们现在不仅仅要写代码，还要写测试。所以，我们在设计这个函数接口时，还必须增加一点考量：它要怎么测。</p><p>在添加一个 Todo 项时，我们经过设计出来的函数接口就是下面这样。</p><pre><code>TodoItem addTodoItem(final TodoParameter todoParameter);\n</code></pre><p>有了一个具体的函数接口设计，我们就可以针对它进行更具体的测试用例设计，也就是设计测试用例来描述这个接口的行为。</p><p>是的，这里我们并没有着急写代码。对很多人来说，写代码的优先级很高，但是，如果不在这里停一下的话，你可能就不会去思考是否还有要考虑的问题，而是直奔代码细节去了。而当我们专注于细节时，有限的注意力就会让你忽略掉很多东西。所以，<strong>先设计测试用例，后写代码</strong>，这是一个编码习惯的问题。</p><p>有了添加 Todo 项接口之后，我们就准备了两个测试场景：</p><ul>\n<li>添加正常的参数对象，返回一个创建好的 Todo 项；</li>\n<li>添加空的参数对象，抛出异常。</li>\n</ul><p>有了测试场景，接下来把这些场景实例化出来，这个步骤相对来说就比较简单了。比如，对于添加正常的参数对象来说，那什么样的参数对象是正常的？我们就代入一个具体的正常参数（比如  foo）。有了这个实例化过的参数，我们就可以把具体的测试用例表现出来了。</p><pre><code>@Test\npublic void should_add_todo_item() {\n    TodoItemRepository repository = mock(TodoItemRepository.class);\n    when(repository.save(any())).then(returnsFirstArg());\n    TodoItemService service = new TodoItemService(repository);\n    \n    TodoItem item = service.addTodoItem(new TodoParameter(&quot;foo&quot;));\n    \n    assertThat(item.getContent()).isEqualTo(&quot;foo&quot;);\n}\n</code></pre><p>在实际的工作中，究竟是先写测试，还是先写实现代码，这是个人工作习惯的问题。当我们有了测试用例之后，其实就是把一个具体的任务进一步拆分成更小的子任务了。<strong>只要我们完成一个子任务，我们就可以做一次代码的提交，因为我们这个时候，既有测试代码又有实现代码，而且实现代码是通过了测试的。</strong></p><h2>测接口还是测实现？</h2><p>不知道你是否注意到了，在前面我一直在说，我们要测的是函数接口的行为。我一直说，单元测试是一种白盒测试。在一些人的理解中，白盒测试的关注点应该是内部实现。那单元测试到底应该关注接口，还是应该关注实现呢？</p><p>或许你还不清楚二者之间的区别，让我们把前面添加 Todo 项的例子拿过来。如果采用更加面向实现的做法，我们应该对 addTodoItem 这个函数的内部实现有进一步的约束，就像下面这样。</p><pre><code>@Test\npublic void should_add_todo_item() {\n    TodoItemRepository repository = mock(TodoItemRepository.class);\n    when(repository.save(any())).then(returnsFirstArg());\n    TodoItemService service = new TodoItemService(repository);\n    \n    TodoItem item = service.addTodoItem(new TodoParameter(&quot;foo&quot;));\n    \n    assertThat(item.getContent()).isEqualTo(&quot;foo&quot;);\n    verify(repository).save(any());\n}\n</code></pre><p>这段代码中核心的差别就是增加了一句 verify，这也就意味着，我规定在 addTodoItem 的实现中必须要调用 repository 的 save 函数。</p><p>你或许会好奇，repository 本来就要调用 save 方法，那我在这里校验它调用了 save 方法，似乎也没什么大不了的。</p><p>单独这么看确实看不出什么问题，但是，如果你有很多测试都是这么写，当你准备重构时，你就会发现问题了。很多团队代码一调整，测试就失败，一个重要的原因就是代码实现和测试之间紧紧地绑定在了一起。因为测试约束的是实现细节，而只要调整实现细节，测试当然就失败了。这也是很多团队抱怨单元测试问题很多的重要原因。</p><p>所以，<strong>在实际的项目中，我会更倾向于测试接口，尽可能减少对于实现细节的约束。</strong>其实，这个原则不仅仅是在接口层面上，在一些测试的细节上也可以这么约定，比如下面这行代码。</p><pre><code>when(repository.save(any())).then(returnsFirstArg());\n</code></pre><p>这其实是一种宽泛的写法，所以用了 any。如果严格限制的话，应该严格限定一个非常具体的参数。</p><pre><code>when(repository.save(new TodoItem(&quot;foo&quot;))).then(returnsFirstArg());\n</code></pre><p>同样，上一讲我们讲到了 Moco，我们设置模拟服务器可以设置得非常具体，像下面这样。</p><pre><code>server\n  .request(and(by(&quot;foo&quot;), by(uri(&quot;/foo&quot;))))\n  .response(and(with(text(&quot;bar&quot;)), status(200)));\n</code></pre><p>也可以设置得非常宽泛，像这样。</p><pre><code>server.request(by(uri(&quot;/foo&quot;))).response(&quot;bar&quot;); \n</code></pre><p>除非这个测试里面有多个类似的请求，必须要做区分，否则，我倾向于使用宽泛一些的约束。这在某种程度上会降低未来重构代码时带来的影响。</p><p>不过实话说，要想完全消除对于实现细节的依赖，有时候也是很难的。比如在我们前面的 TodoItemService 的例子里面，repository 本身也是 TodoItemService 的一种实现细节，一旦进行一些重构，把 repository 的依赖从 TodoItemService 中拿掉，很多测试代码也需要调整。所以，在实际的项目中，我们只能说尽可能减少对于实现细节的依赖。</p><p>其实，关于实现细节的测试也是一种重复，等于你用测试把代码又重新写了一遍。程序员的工作中有一种重要的原则：DRY（Don’t Repeat Yourself），这不仅仅是说代码中不要有重复，而且各种信息都不要重复（我在《软件设计之美》中讲过 <a href=\"https://time.geekbang.org/column/article/265128\">DRY 原则</a>，有兴趣不妨回顾一下）。</p><p>我建议你在设计单元测试的时候不要面向实现细节。但反过来，有些时候测试确实会漏掉一些细节，尤其是一些实现代码中的分支。怎么样发现自己的代码中是否有遗漏呢？这就是我们下一讲要讲的内容：测试覆盖率。</p><h2>总结时刻</h2><p>今天我们讲了如何去写单元测试。很多团队由于多方面的原因（比如设计做得不好），导致单元测试写得少。但为了提高代码质量以及更准确地定位问题，我们应该多写单元测试。</p><p>单元测试最好是和实现代码一起写，以便减少后续补测试的痛苦。想写好测试，关键要做好任务分解，否则，面对一个巨大的需求，没有人知道如何去给它写单元测试。</p><p>编写单元测试的过程，实际上就是一个任务开发的过程。一个任务代码的完成，不仅仅是写了实现代码，还要通过相应的测试。一般而言，任务开发要先设计相应的接口，确定其行为，然后根据这个接口设计相应的测试用例，最后，把这些用例实例化成一个个具体的单元测试。</p><p>单元测试常见的一个问题是代码一重构，单元测试就崩溃。这很大程度上是由于测试对实现细节的依赖过于紧密。一般来说，单元测试最好是面向接口行为来设计，因为这是一个更宽泛的要求。其实，在测试中的很多细节也可以考虑设置得宽泛一些，比如模拟对象的设置、模拟服务器的设置等等。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>做好任务分解，写好单元测试。</strong></p><h2>思考题</h2><p>今天我们讨论了如何写好单元测试，你在实际项目中写过单元测试吗？你遇到了哪些问题，或者有哪些经验可以分享呢？欢迎在留言区分享你的观点。</p>","neighbors":{"left":{"article_title":"07 | Mock 框架：怎么让测试变得可控？","id":408762},"right":{"article_title":"09 | 测试覆盖率：如何找出没有测试到的代码？","id":410429}},"comments":[{"had_liked":false,"id":310069,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1630477824,"is_pvip":false,"replies":[{"id":"112731","content":"总结得很好","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1631063788,"ip_address":"","comment_id":310069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31695248896","product_id":100085101,"comment_content":"1、单元测试可以帮助尽早发现问题，尽量多的单元测试也有助于提升代码质量以及更准确的定位问题；<br><br>2、单元测试尽量和编码的时候一起写，如果等代码实现完了，会因为要写的测试太多，而产生畏惧，容易放弃；<br><br>3、要写好单元测试，还要善于任务分解，所谓的单元，就是任务的某个部分，好的任务拆解，是编码和测试成功的不二法门；<br><br>4、每完成一个子任务，都可以把所有测试快速的跑一遍，避免前后的逻辑影响，如果测试通过，就可以进行代码提交，这可以算一个里程碑；<br><br>5、最好是先写测试用例，再进行编码，这里的测试用例不一定是测试同学那种专业的用例，而是我们需要覆盖的逻辑场景（也可以找测试协助提供用例）；<br><br>6、优先测试接口，再根据时间情况看是否要验证实现，因为实现可能会因为逻辑变更而失效（维护成本变大）；<br><br>以上，期待后续的精彩内容。","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526117,"discussion_content":"总结得很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631063788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308585,"user_name":"X","can_delete":false,"product_type":"c1","uid":1460452,"ip_address":"","ucode":"197AD33D438298","user_header":"https://static001.geekbang.org/account/avatar/00/16/48/e4/6feec30f.jpg","comment_is_top":false,"comment_ctime":1629690864,"is_pvip":false,"replies":[{"id":"111845","content":"这取决于你要测的是什么，我在专栏里建议的是测试接口，在这种情况下，Mock 的入参就不是关键点，为啥要限制那么严格呢？如果限制严格了，就是在做细节的测试。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629895900,"ip_address":"","comment_id":308585,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23104527344","product_id":100085101,"comment_content":"请问老师，如果 接口行为Mock，入参设置宽泛一些（any），那这样入参感觉没有测试到，细节上会不会有啥问题？ 现在测试都是严格限制出入参。。","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525551,"discussion_content":"这取决于你要测的是什么，我在专栏里建议的是测试接口，在这种情况下，Mock 的入参就不是关键点，为啥要限制那么严格呢？如果限制严格了，就是在做细节的测试。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629895900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565003,"discussion_content":"细节不需要测试吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650370524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308209,"user_name":"Gojustforfun","can_delete":false,"product_type":"c1","uid":1187021,"ip_address":"","ucode":"7513A40F27344F","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","comment_is_top":false,"comment_ctime":1629451307,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18809320491","product_id":100085101,"comment_content":"有时候写完单元测试，对于关键的“单元”可能还需要看看其运行时间以及内存分配情况（基准&#47;性能测试）。请问老师，程序员是否要进行性能测试？如何进行性能测试？可否加餐一篇聊聊？谢谢","like_count":4},{"had_liked":false,"id":313419,"user_name":"大师兄","can_delete":false,"product_type":"c1","uid":1727181,"ip_address":"","ucode":"8678D4E4DE426E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/5a/cd/8710ed11.jpg","comment_is_top":false,"comment_ctime":1632414000,"is_pvip":true,"replies":[{"id":"113535","content":"给你个建议，从持续集成入手，我在《10x程序员工作法》中讲过。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1632469965,"ip_address":"","comment_id":313419,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10222348592","product_id":100085101,"comment_content":"修改代码的艺术，翻了几遍，学习到一些技巧，调整了遗留程序的设计。个人上有一些成长，想在团队内推广单元测试，发起了几次单元测试的分享与实战入门。发现没落地成覆盖率，或者强流程，小伙伴都是跳过。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527342,"discussion_content":"给你个建议，从持续集成入手，我在《10x程序员工作法》中讲过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632469965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311217,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1631109651,"is_pvip":false,"replies":[{"id":"112790","content":"确实难，需要练，练好了才和别人拉开差距的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1631150520,"ip_address":"","comment_id":311217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10221044243","product_id":100085101,"comment_content":"粒度要小到可以在很短时间内完成 &lt;- 难，学习学习！","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526524,"discussion_content":"确实难，需要练，练好了才和别人拉开差距的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631150520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308122,"user_name":"大碗","can_delete":false,"product_type":"c1","uid":1027207,"ip_address":"","ucode":"F9CDC0C5BE48AC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/87/8ed5880a.jpg","comment_is_top":false,"comment_ctime":1629421848,"is_pvip":false,"replies":[{"id":"111607","content":"不会，verify是一种断言，不会影响覆盖率。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629436921,"ip_address":"","comment_id":308122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10219356440","product_id":100085101,"comment_content":"请问老师这个addItem的verify可以去掉么，不写测试覆盖度不会下降","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525398,"discussion_content":"不会，verify是一种断言，不会影响覆盖率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629436921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348157,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1654786815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5949754111","product_id":100085101,"comment_content":"做好任务分解，写好单元测试。--记下来","like_count":1},{"had_liked":false,"id":343216,"user_name":"当初莫相识","can_delete":false,"product_type":"c1","uid":2768765,"ip_address":"","ucode":"313917BB360D48","user_header":"https://static001.geekbang.org/account/avatar/00/2a/3f/7d/f624fa69.jpg","comment_is_top":false,"comment_ctime":1650711231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5945678527","product_id":100085101,"comment_content":"老师，关于gui程序应该如何写单元测试呢，比如qt写出的程序，我通常是运行可执行程序，看ui响应以及相关逻辑是否达到预期。还请老师指点迷津！","like_count":1},{"had_liked":false,"id":358304,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"广东","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1664182772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664182772","product_id":100085101,"comment_content":"“单元测试常见的一个问题是代码一重构，单元测试就崩溃。这很大程度上是由于测试对实现细节的依赖过于紧密。” <br> 说到我的心坎里，我喜欢写很多单元测试，但是都是根据代码来写的，当代码重构时，还得重构单元测试，工作量直接多一倍（因为单元测试代码是本身就是常规代码的2倍以上）","like_count":0},{"had_liked":false,"id":354710,"user_name":"愿凌飞","can_delete":false,"product_type":"c1","uid":2357458,"ip_address":"河北","ucode":"E80CC09C7D528D","user_header":"https://static001.geekbang.org/account/avatar/00/23/f8/d2/494c182a.jpg","comment_is_top":false,"comment_ctime":1660706343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660706343","product_id":100085101,"comment_content":"想法：组合导致模型测试时实现细节的暴漏，但是增加了模型独立的可测试性---&gt;首先得能单独测试，所以暴漏实现细节的影响可忽略。","like_count":0},{"had_liked":false,"id":341494,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1649660466,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649660466","product_id":100085101,"comment_content":"老师，现在就有你说的关于verify的问题存在，您说要减少，但是又不可避免，这一块使用verify的度在哪里，有没有一个合适的度量指标，还是看主观印象处理？<br>因为有一些对象参数进入单元测试的方法以后，会有些转换处理，生成一个新对象参数传递到依赖对象的方法中，这时候需要校验对应的verify入参是否与预期一致， 并且针对自定义的入参对象，还需要实现equals与hashcode方法，","like_count":0},{"had_liked":false,"id":338112,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1647306815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647306815","product_id":100085101,"comment_content":"<br>TodoItem addTodoItem(final TodoParameter todoParameter); 请问这是什么测试框架语法？","like_count":0},{"had_liked":false,"id":337969,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1647188839,"is_pvip":false,"replies":[{"id":"123668","content":"这是一个伪命题，把代码抽出来，成为另外一个类，它就变成了公有的。在我的几个专栏里，我一直在说，代码大就是问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1647411271,"ip_address":"","comment_id":337969,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647188839","product_id":100085101,"comment_content":"私有函数如何测试呢","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556535,"discussion_content":"这是一个伪命题，把代码抽出来，成为另外一个类，它就变成了公有的。在我的几个专栏里，我一直在说，代码大就是问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647411271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332020,"user_name":"微笑","can_delete":false,"product_type":"c1","uid":1685222,"ip_address":"","ucode":"C5EE55E23D2C57","user_header":"https://static001.geekbang.org/account/avatar/00/19/b6/e6/db12908c.jpg","comment_is_top":false,"comment_ctime":1642987711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642987711","product_id":100085101,"comment_content":"代码写好以后，单元测试工作量会少很多。","like_count":0},{"had_liked":false,"id":320945,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1636593107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636593107","product_id":100085101,"comment_content":"原来写单元测试非常吃力是因为代码写完了最后才加测试代码！和函数一起写测试就简单多了，还可以从设计时就支持测试！","like_count":0}]}