{"id":191522,"title":"18丨CentOS：操作系统级监控及常用计数器解析（下）","content":"<p>在上一篇文章中，我们已经讲了监控系统层面的分析思路以及CPU分析，今天我们分析一下操作系统中其他的层面。</p><p>首先是I/O。</p><h2>I/O</h2><p>I/O其实是挺复杂的一个逻辑，但我们今天只说在做性能分析的时候，应该如何定位问题。</p><p>对性能优化比较有经验的人（或者说见过世面比较多的人）都会知道，当一个系统调到非常精致的程度时，基本上会卡在两个环节上，对计算密集型的应用来说，会卡在CPU上；对I/O密集型的应用来说，瓶颈会卡在I/O上。</p><p>我们对I/O的判断逻辑关系是什么呢？</p><p>我们先画一个I/O基本的逻辑过程。我们很多人嘴上说I/O，其实脑子里想的都是Disk I/O，但实际上一个数据要想写到磁盘当中，没那么容易，步骤并不简单。</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/0c/0b8dd1fa8ddda518e666546205d9170c.jpg?wh=1632*1729\" alt=\"\"></p><p>这个简化的图是思虑再三的结果。</p><p>I/O有很多原理细节，那我们如何能快速地做出相应的判断呢？首先要祭出的一个工具就是<code>iostat</code>。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/31/b8de645585fa5804e26929c88c579031.png?wh=720*405\" alt=\"\"></p><p>在这张图中，我们取出一条数据来做详细看下：</p><pre><code>Device:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s  avgrq-sz \nvda        0.00     0.67   18.33  114.33   540.00 54073.33   823.32\navgqu-sz   await r_await w_await  svctm  %util\n127.01  776.75    1.76  901.01   7.54 100.00 \n</code></pre><p>我解释一下其中几个关键计数器的含义。</p><p><code>svctm</code>代表I/O平均响应时间。请注意，这个计数器，有很多人还把它当个宝一样，实际上在man手册中已经明确说了：“Warning! Do not trust this field any more. This field will be removed in a future sysstat version.” 也就是说，这个数据你爱看就爱，不一定准。</p><!-- [[[read_end]]] --><p><code>w_await</code>表示写入的平均响应时间；<code>r_await</code>表示读取的平均响应时间；<code>r/s</code>表示每秒读取次数；<code>w/s</code>表示每秒写入次数。</p><p>而IO/s的关键计算是这样的：</p><pre><code>IO/s = r/s + w/s = 18.33+114.33 = 132.66\n%util = ( (IO/s * svctm) /1000) * 100% = 100.02564%\n</code></pre><p>这个<code>%util</code>是用<code>svctm</code>算来的，既然<code>svctm</code>都不一定准了，那这个值也只能参考了。还好我们还有其他工具可以接着往深了去定位，那就是<code>iotop</code>。</p><pre><code>Total DISK READ :       2.27 M/s | Total DISK WRITE :\t  574.86 M/s\nActual DISK READ:       3.86 M/s | Actual DISK WRITE:      34.13 M/s\n  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND\n  394 be/3 root        0.00 B/s  441.15 M/s  0.00 % 85.47 % [jbd2/vda1-8]\n32616 be/4 root     1984.69 K/s    3.40 K/s  0.00 % 42.89 % kube-controllers\n13787 be/4 root        0.00 B/s    0.00 B/s  0.00 % 35.41 % [kworker/u4:1]\n...............................\n</code></pre><p>从上面的<code>Total DISK WRITE/READ</code>就可以知道当前的读写到底有多少了，默认是按照<code>I/O</code>列来排序的，这里有<code>Total</code>，也有<code>Actual</code>，并且这两个并不相等，为什么呢？</p><p>因为Total的值显示的是用户态进程与内核态进程之间的速度，而Actual显示的是内核块设备子系统与硬件之间的速度。</p><p>而在<code>I/O</code>交互中，由于存在<code>cache</code>和在内核中会做<code>I/O</code>排序，因此这两个值并不会相同。那如果你要说磁盘的读写能力怎么样，我们应该看的是<code>Actual</code>。这个没啥好说的，因为<code>Total</code>再大，不能真实写到硬盘上也是没用的。</p><p>在下面的线程列表中，通过排序，就可以知道是哪个线程（注意在第一列是TID哦）占的<code>I/O</code>高了。</p><h2>Memory</h2><p>关于内存，要说操作系统的内存管理，那大概开一个新专栏也不为过。但是在性能测试的项目中，如果不做底层的测试，\b基本上在上层语言开发的系统中，比如说Java、Go、C++等，在分析过程中都直接看业务系统就好了。</p><p>在操作系统中，分析业务应用的时候，我们会关注的内存内容如下面的命令所示：</p><pre><code>[root@7dgroup ~]# free -m             \n \t     total        used        free      shared  buff/cache   available\nMem:           3791        1873         421         174        1495        1512\nSwap:             0           0           0\n[root@7dgroup ~]#\n\n</code></pre><p><code>total</code>肯定是要优先看的，其次是<code>available</code>，这个值才是系统真正可用的内存，而不是<code>free</code>。</p><p>因为Linux通常都会把用的内存给<code>cache</code>，但是不一定会用，所以<code>free</code>肯定会越来越少，但是<code>available</code>是计算了<code>buff</code>和<code>cache</code>中不用的内存的，所以只要<code>available</code>多，就表示内存够用。</p><p>当出现内存泄露或因其他原因导致物理内存不够用的时候，操作系统就会调用<code>OOM Killer</code>，这个进程会强制杀死消耗内存大的应用。这个过程是不商量的，然后你在“<code>dmesg</code>”中就会看到如下信息。</p><pre><code>[12766211.187745] Out of memory: Kill process 32188 (java) score 177 or sacrifice child\n[12766211.190964] Killed process 32188 (java) total-vm:5861784kB, anon-rss:1416044kB, file-rss:0kB, shmem-rss:0kB\n</code></pre><p>这种情况只要出现，TPS肯定会掉下来，如果你有负载均衡的话，压力工具中的事务还是可能有成功的。但如果你只有一个应用节点，或者所有应用节点都被<code>OOM Killer</code>给干掉了，那TPS就会是这样的结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/38/83/38825aee9c3d56819c3e242382bbb483.png?wh=826*208\" alt=\"\"></p><p>对内存监控，可以看到这样的趋势：</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/3a/7b2cf887b969f5684b266ee82869663a.png?wh=1412*281\" alt=\"\"></p><p>内存慢慢被耗光，但是杀掉应用进程之后，<code>free</code>内存立即就有了。你看上面这个图，就是一个机器上有两个节点，先被杀了一个，另一个接着泄露，又把内存耗光了，于是又被杀掉，最后内存全都空闲了。</p><p>在我的性能工作生涯中，这样的例子还挺常见。当然对这种情况的分析定位，只看物理内存已经没有意义了，更重要的是看应用的内存是如何被消耗光的。</p><p>对于内存的分析，你还可以用<code>nmon</code>和<code>cat/proc/meminfo</code>看到更多信息。如果你的应用是需要大页处理的，特别是大数据类的应用，需要关注下<code>HugePages</code>相关的计数器。</p><p>内存我们就说到这里，总之，要关注<code>available</code>内存的值。</p><h2>NetWork</h2><p>这里我们就来到了网络分析的部分了，在说握手之前，我们先看网络的分析决策链。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/2c/ed8a7d9ca55cc58d25db9f07bc57b42c.jpg?wh=1116*1094\" alt=\"\"></p><p>请看上图中，在判断了瓶颈在网络上之后，如果知道某个进程的网络流量大，首先肯定是要考虑减少流量，当然要在保证业务正常运行，TPS也不降低的情况下。</p><h3>Recv_Q和Send_Q</h3><p>当然我们还要干一件事，就是可能你并不知道是在哪个具体的环节上出了问题，那就要学会判断了。网络<code>I/O</code>栈也并不简单，看下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/58/0f/5837c5a68264aaf8b5a870281cf8060f.png?wh=1592*895\" alt=\"\"></p><p>数据发送过程是这样的。</p><p>应用把数据给到<code>tcp_wmem</code>就结束它的工作了，由内核接过来之后，经过传输层，再经过队列、环形缓冲区，最后通过网卡发出去。</p><p>数据接收过程则是这样的。</p><p>网卡把数据接过来，经过队列、环形缓冲区，再经过传输层，最后通过<code>tcp_rmem</code>给到应用。</p><p>你似乎懂了对不对？那么在这个过程中，我们有什么需要关注的呢？</p><p>首先肯定是看队列，通过<code>netstat</code>或其他命令可以看到<code>Recv_Q</code>和<code>Send_Q</code>，这两项至少可以告诉你瓶颈会在哪一端。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/6f/13/6f2fbd3c7299a64a8a28ace03bf84613.jpg?wh=2063*681\" alt=\"\"></p><p>我画个表清晰地判断一下瓶颈点。</p><p><img src=\"https://static001.geekbang.org/resource/image/be/d1/bef88cefe67796c856f29dc89f4510d1.png?wh=1068*383\" alt=\"\"></p><p>其实这个过程中，我还没有把防火墙加进去，甚至我都没说<code>NAT</code>的逻辑，这些基础知识你需要自己先做足功课。</p><p>在我们做性能分析的过程中，基本上，基于上面这个表格就够通过接收和发送判断瓶颈点发生在谁身上了。</p><p>但是，要是这些队列都没有值，是不是网络就算好了呢？还不是。</p><h3>三次握手和四次挥手</h3><p>我们先看握手图：</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/45/a68fb795457f127bb0c24a065bf11945.jpg?wh=1307*620\" alt=\"\"></p><p>我发现一点，很多人以为三次握手是非常容易理解的，但是没几个人能判断出和它相关的问题。</p><p>握手的过程，我就不说了，主要看这里面的两个队列：半连接队列和全连接队列。</p><p>在B只接到第一个<code>syn</code>包的时候，把这个连接放到半连接队列中，当接到<code>ack</code>的时候才放到全连接队列中。这两个队列如果有问题，都到不了发送接收数据的时候，你就看到报错了。</p><p>查看半连接全连接溢出的手段也很简单，像下面这种情况就是半连接没建立起来，半连接队列满了，<code>syn</code>包都被扔掉了。</p><pre><code>[root@7dgroup ~]# netstat -s |grep -i listen    \n8866 SYNs to LISTEN sockets dropped\n</code></pre><p>那么半连接队列和什么参数有关呢？</p><ol>\n<li>代码中的<code>backlog</code>：你是不是想起来了<code>ServerSocket(int port, int backlog)中的backlog</code>？是的，它就是半连接的队列长度，如果它不够了，就会丢掉<code>syn</code>包了。</li>\n<li>还有操作系统的内核参数<code>net.ipv4.tcp_max_syn_backlog</code>。</li>\n</ol><p>而像下面这样的情况呢，就是全连接队列已经满了，但是还有连接要进来，已经超过负荷了。</p><pre><code>[root@7dgroup2 ~]# netstat -s |grep overflow    \n154864 times the listen queue of a socket overflowed\n</code></pre><p>这是在性能分析过程中经常遇到的连接出各种错的原因之一，它和哪些参数有关呢？我列在这里。</p><ol>\n<li><code>net.core.somaxconn</code>：系统中每一个端口最大的监听队列的长度。</li>\n<li><code>net.core.netdev_max_backlog</code>：每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</li>\n<li><code>open_file</code>：文件句柄数。</li>\n</ol><p>我们再来看下四次挥手。我遇到性能测试过程中的挥手问题，有很多都是做性能分析的人在不了解的情况下就去做各种优化动作而产生的。</p><p>先看一下TCP挥手图：</p><p><img src=\"https://static001.geekbang.org/resource/image/69/88/69a6fc7664ae937d13d241a255989988.jpg?wh=1307*890\" alt=\"\"></p><p>在挥手的逻辑中，和性能相关的问题真的非常少。</p><p>但有一个点是经常会问到的，那就是<code>TIME_WAIT</code>。不知道为什么，很多人看到<code>TIME_WAIT</code>就紧张，就想去处理掉，于是搜索一圈，哦，要改<code>recycle/reuse</code>的TCP参数，要改<code>fin_time_out</code>值。</p><p>至于为什么要处理<code>TIME_WAIT</code>，却没几个人能回答得上来。</p><p>在我的性能工作经验中，只有一种情况要处理<code>TIME_WAIT</code>，那就是<strong>端口不够用</strong>的时候。</p><p><code>TCP/IPv4</code>的标准中，端口最大是65535，还有一些被用了的，所以当我们做压力测试的时候，有些应用由于响应时间非常快，端口就会不够用，这时我们去处理<code>TIME_WAIT</code>的端口，让它复用或尽快释放掉，以支持更多的压力。</p><p>所以处理<code>TIME_WAIT</code>的端口要先判断清楚，如果是其他原因导致的，即使你处理了<code>TIME_WAIT</code>，也没有提升性能的希望。</p><p>如果还有人说，还有一种情况，就是内存不够用。我必须得说，那是我没见过世面了，我至今没见过因为<code>TIME_WAIT</code>的连接数把内存耗光了的。</p><p>一个TCP连接大概占3KB，创建10万个连接，才<code>100000x3KB≈300M</code>左右，服务器有那么穷吗？</p><h2>System</h2><p>确切地说，在性能测试分析的领域里，System似乎实在是没有什么可写的地方。</p><p>我们最常见的System的计数器是<code>in(interrupts:中断)</code>和<code>cs(context switch：上下文切换)</code>。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/06/c4b16ca370a2ffa1482915cf3ad57206.png?wh=946*395\" alt=\"\"></p><p>因为这是我能找得到的最疯狂的System计数器了。</p><p>中断的逻辑在前面跟你说过了。</p><p><code>cs</code>也比较容易理解，就是CPU不得不转到另一件事情上，听这一句你就会知道，中断时肯定会有<code>cs</code>。但是不止中断会引起cs，还有多任务处理也会导致<code>cs</code>。</p><p>因为<code>cs</code>是被动的，这个值的高和低都不会是问题的原因，只会是一种表现，所以它只能用来做性能分析中的证据数据。</p><p>在我们的这个图中，显然是由于<code>in</code>引起的<code>cs</code>，CPU队列那么高也是由<code>in</code>导致的。像这样的问题，你可以去看我们在上篇文章中提到的<code>si CPU</code>高的那个分析链了。</p><h2>Swap</h2><p>Swap的逻辑是什么呢？它是在磁盘上创建的一个空间，当物理内存不够的时候，可以保存物理内存里的数据。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/18/6b/1805402973701416c23c16003af5c06b.jpg?wh=2412*820\" alt=\"\"></p><p>先看和它相关的几个参数。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/7f/e29ec84d980fb9e667e41010b209427f.png?wh=735*268\" alt=\"\"></p><p>在操作系统中，vm.swappiness是用来定义使用swap的倾向性。官方说明如下：</p><blockquote>\n<p>swappiness<br>\nThis control is used to define how aggressive the kernel will swap memory pages. Higher values will increase agressiveness, lower values decrease the amount of swap.<br>\nA value of 0 instructs the kernel not to initiate swap until the amount of free and file-backed pages is less than the high water mark in a zone.<br>\nThe default value is 60.</p>\n</blockquote><ol>\n<li>值越高，则使用swap的倾向性越大。</li>\n<li>值越低，则使用swap的倾向性越小。</li>\n</ol><p>但这个倾向性是谁跟谁比呢？简单地说，在内存中有anon内存(匿名而链表，分为：inactive/active)和file内存(映射页链表，也分为：inactive/active)，而swappiness是定义了对anon页链表扫描的倾向性。在Linux源码vmscan.c中有这样的定义：</p><pre><code> /*\n  * With swappiness at 100, anonymous and file have the same priority.\n  * This scanning priority is essentially the inverse of IO cost.\n  */\n anon_prio = swappiness;\n file_prio = 200 - anon_prio;\n</code></pre><p>也就是说如果swappiness设置为100时，则anon和file内存会同等的扫描；如果设置为0时，则file内存扫描的优先级会高。但是这并不是说设置为了0就没有swap了，在操作系统中还有其他的逻辑使用swap。</p><p><code>swapiness</code>默认是60%。注意，下面还有一个参数叫<code>vm.min_free_kbytes</code>。即使把<code>vm.swappiness</code>改为0，当内存用到小于<code>vm.min_free_kbytes</code>时照样会发生Swap。</p><p>想关掉Swap就<code>swapoff -a</code>。</p><p>和Swap相关的计数器有：<code>top</code>中的<code>Total</code>、<code>free</code>、<code>used</code>和<code>vmstat</code>里的<code>si</code>、<code>so</code>。</p><p>说到Swap，在性能测试和分析中，我的建议是直接把它关了。</p><p>为什么呢？因为当物理内存不足的时候，不管怎么交换性能都是会下降的，不管是Swap还是磁盘上的其他空间，都是从磁盘上取数据，性能肯定会刷刷往下掉。</p><h2>总结</h2><p>对操作系统的监控及常用计数器的分析会涉及到很多的内容，所以两篇文章可能也是覆盖不全的，我只把在性能测试分析工作中经常见到的计数器解析了一遍。总体来说，你需要记住以下三点：</p><ol>\n<li>监控平台再花哨，都只是提供数据来给你分析的。只要知道了数据的来源、原理、含义，用什么工具都不重要。</li>\n<li>性能分析的时候，不会只看操作系统一个模块或哪几个固定计数器的。这些动态的数据，需要有分析链把它们串起来。</li>\n<li>操作系统提供的监控数据是分析链路中不可缺少的一环，除非你能绕过操作系统，又能很确切地定位出根本原因。</li>\n</ol><h2>思考题</h2><p>我为什么说用什么监控平台并不重要呢？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流进步。</p>","comments":[{"had_liked":false,"id":202631,"user_name":"罗辑思维","can_delete":false,"product_type":"c1","uid":1318941,"ip_address":"","ucode":"D257A06EDE928E","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/1d/0c1a184c.jpg","comment_is_top":false,"comment_ctime":1586019365,"is_pvip":false,"replies":[{"id":"75759","content":"仔细检查了一下。这个直接说是内存的百分比，确实不够精确。我之前看到过一些文章应该就是直接写的内存使用率百分比。<br>多谢指正，可以联系我，拿200块钱红包。<br><br>在这里更正如下：<br><br>在操作系统中，vm.swappiness是用来定义使用swap的倾向性。官方说明如下：<br>swappiness<br>This control is used to define how aggressive the kernel will swap memory pages. Higher values will increase agressiveness, lower values decrease the amount of swap.<br>A value of 0 instructs the kernel not to initiate swap until the amount of free and file-backed pages is less than the high water mark in a zone.<br>The default value is 60.<br><br>1. 值越高，则使用swap的倾向性越大。<br>2. 值越低，则使用swap的倾向性越小。<br><br>但这个倾向性是谁跟谁比呢？简单地说，在内存中有anon内存(匿名而链表，分为：inactive&#47;active)和file内存(映射页链表，也分为：inactive&#47;active)，而swappiness是定义了对anon页链表扫描的倾向性。在linux源码vmscan.c中有这样的定义：<br> &#47;*<br>  * With swappiness at 100, anonymous and file have the same priority.<br>  * This scanning priority is essentially the inverse of IO cost.<br>  *&#47;<br> anon_prio = swappiness;<br> file_prio = 200 - anon_prio;<br>也就是说如果swappiness设置为100时，则anon和file内存会同等的扫描；如果设置为0时，则file内存扫描的优先级会高。但是这并不是说设置为了0就没有swap了，在操作系统中还有其他的逻辑使用swap。<br><br>以后我会找个时间专门写一下这个逻辑。这里面涉及到几个部分的源代码逻辑，还是有点小复杂。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1586074974,"ip_address":"","comment_id":202631,"utype":1}],"discussion_count":2,"race_medal":0,"score":"78895430693","product_id":100042501,"comment_content":"当操作系统中配置了vm.swappiness是 30%，那么当内存用到1-30%=70%的时候，就会发生 Swap。<br><br>高老师，文中对swappiness参数设置值描述跟倪鹏飞老师在专栏讲解有不一样的地方。个人还是认同swappiness不是内存的百分比。下面这段是摘自是倪鹏飞老师《Linux性能分析实战》第19讲。<br>---------------------------<br>&#47;proc&#47;sys&#47;vm&#47;swappiness 选项，用来调整使用 Swap 的积极程度。<br>swappiness 的范围是 0-100，数值越大，越积极使用 Swap，也就是更倾向于回收匿名页；数值越小，越消极使用 Swap，也就是更倾向于回收文件页。<br>虽然 swappiness 的范围是 0-100，不过要注意，这并不是内存的百分比，而是调整 Swap 积极程度的权重，即使你把它设置成 0，当剩余内存 + 文件页小于页高阈值时，还是会发生 Swap。","like_count":18,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490638,"discussion_content":"仔细检查了一下。这个直接说是内存的百分比，确实不够精确。我之前看到过一些文章应该就是直接写的内存使用率百分比。\n多谢指正，可以联系我，拿200块钱红包。\n\n在这里更正如下：\n\n在操作系统中，vm.swappiness是用来定义使用swap的倾向性。官方说明如下：\nswappiness\nThis control is used to define how aggressive the kernel will swap memory pages. Higher values will increase agressiveness, lower values decrease the amount of swap.\nA value of 0 instructs the kernel not to initiate swap until the amount of free and file-backed pages is less than the high water mark in a zone.\nThe default value is 60.\n\n1. 值越高，则使用swap的倾向性越大。\n2. 值越低，则使用swap的倾向性越小。\n\n但这个倾向性是谁跟谁比呢？简单地说，在内存中有anon内存(匿名而链表，分为：inactive/active)和file内存(映射页链表，也分为：inactive/active)，而swappiness是定义了对anon页链表扫描的倾向性。在linux源码vmscan.c中有这样的定义：\n /*\n  * With swappiness at 100, anonymous and file have the same priority.\n  * This scanning priority is essentially the inverse of IO cost.\n  */\n anon_prio = swappiness;\n file_prio = 200 - anon_prio;\n也就是说如果swappiness设置为100时，则anon和file内存会同等的扫描；如果设置为0时，则file内存扫描的优先级会高。但是这并不是说设置为了0就没有swap了，在操作系统中还有其他的逻辑使用swap。\n\n以后我会找个时间专门写一下这个逻辑。这里面涉及到几个部分的源代码逻辑，还是有点小复杂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586074974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318941,"avatar":"https://static001.geekbang.org/account/avatar/00/14/20/1d/0c1a184c.jpg","nickname":"罗辑思维","note":"","ucode":"D257A06EDE928E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230479,"discussion_content":"谢谢老师解释「倾向性是谁跟谁比呢」，解决之前对倾向性的困惑。很多文章都提了倾向性，但是没有对其进行的解释，今天又收获新知识了。\n\n还有怎么联系老师您？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586748366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309870,"user_name":"木剑温华","can_delete":false,"product_type":"c1","uid":2250987,"ip_address":"","ucode":"E9F1C421CE3298","user_header":"https://static001.geekbang.org/account/avatar/00/22/58/eb/963ea7fe.jpg","comment_is_top":false,"comment_ctime":1630377511,"is_pvip":false,"replies":[{"id":"112346","content":"这里的描述有问题。我修改一下。<br>对客户端来说，会受到65535的端口数限制，对服务端来说不受端口数限制。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1630473380,"ip_address":"","comment_id":309870,"utype":1}],"discussion_count":1,"race_medal":5,"score":"23105213991","product_id":100042501,"comment_content":"一个 TCP 连接大概占 3KB，创建 10 万个连接，才100000x3KB≈300M左右，何况最多才 65535 呢？服务器有那么穷吗？<br>这里感觉老师说的有一点问题，一个tcp链接由四元组组成：sip：sport---cip：cport，单机最多65535个端口，但是可以根据公式可以看到只影响了sport的数量，但是cip和cport的组合是无穷尽的，所以单机理论最大连接数远大于65535，我之前在iot项目和消息推送项目做过相关的压测，成功地把单机最大长连接数提高到100w以上。","like_count":5,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526046,"discussion_content":"这里的描述有问题。我修改一下。\n对客户端来说，会受到65535的端口数限制，对服务端来说不受端口数限制。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630473380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256967,"user_name":"SeaYang","can_delete":false,"product_type":"c1","uid":1393840,"ip_address":"","ucode":"F44622A44CE8B9","user_header":"https://static001.geekbang.org/account/avatar/00/15/44/b0/c196c056.jpg","comment_is_top":false,"comment_ctime":1603799780,"is_pvip":false,"replies":[{"id":"93928","content":"一看就是高手。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1604280969,"ip_address":"","comment_id":256967,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14488701668","product_id":100042501,"comment_content":"使用Linux服务器作为压力机，TPS达到比较高的时候压力机会大量报无法分配请求地址的错误，从而导致TPS直接降为0，命令看了下TIME_WAIT的数量很多，调整了一下几个内核参数，就解决了","like_count":3,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508175,"discussion_content":"一看就是高手。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604280969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196346,"user_name":"月亮和六便士","can_delete":false,"product_type":"c1","uid":1080894,"ip_address":"","ucode":"EFFCB9171D4B4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/3e/82202cc8.jpg","comment_is_top":false,"comment_ctime":1585274649,"is_pvip":false,"replies":[{"id":"74728","content":"你这个是管理和沟通的问题，和技术无关。docker里当然可以暴露监控端口。<br>即使不这样，也得有其他的监控docker的手段。<br>技术角度来说，没有收拾不了的系统。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1585469425,"ip_address":"","comment_id":196346,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14470176537","product_id":100042501,"comment_content":"高老师，看完您的课程，有一些思路了，但是我发现思路和实战之间有一道鸿沟，我已经掉到沟里了，比如 分析的起点拆分响应时间，但是不知道怎么拆分，开发更是一头雾水。应用又是部署在docker里面，好不容易配置了个Tomcat监控，结果重启了一下配置又没了，运维说docker里没法暴露监控端口，真是寸步难行啊","like_count":3,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489271,"discussion_content":"你这个是管理和沟通的问题，和技术无关。docker里当然可以暴露监控端口。\n即使不这样，也得有其他的监控docker的手段。\n技术角度来说，没有收拾不了的系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585469425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188044,"user_name":"黑脸龙猫酱","can_delete":false,"product_type":"c1","uid":1106867,"ip_address":"","ucode":"7526F114F25EB1","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/b3/d8bdddad.jpg","comment_is_top":false,"comment_ctime":1584318096,"is_pvip":false,"replies":[{"id":"72714","content":"云服务器都是虚拟机，如果你是被无良厂商超卖的话，那只能去骂街了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584362158,"ip_address":"","comment_id":188044,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174252688","product_id":100042501,"comment_content":"老师可否说下对于云服务器，io有些时间段不稳定的情况应该如何处理？","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487325,"discussion_content":"云服务器都是虚拟机，如果你是被无良厂商超卖的话，那只能去骂街了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584362158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179456,"user_name":"悦霖","can_delete":false,"product_type":"c1","uid":1786180,"ip_address":"","ucode":"6707B62806147F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/41/44/00ea2279.jpg","comment_is_top":false,"comment_ctime":1582009131,"is_pvip":false,"replies":[{"id":"69704","content":"后面文章里会写到它。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1582019972,"ip_address":"","comment_id":179456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10171943723","product_id":100042501,"comment_content":"高老师问一下，每次性能测试看io较高基本都是jbd2这个进程占用大量的IO，怎么进一步分析，而且这个jdb2是个啥？","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484266,"discussion_content":"后面文章里会写到它。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582019972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265731,"user_name":"David.cui","can_delete":false,"product_type":"c1","uid":1302228,"ip_address":"","ucode":"AB46F310403612","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/d4/b83c4185.jpg","comment_is_top":false,"comment_ctime":1606996441,"is_pvip":false,"replies":[{"id":"96675","content":"只有落地才是正道。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1607214676,"ip_address":"","comment_id":265731,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901963737","product_id":100042501,"comment_content":"高老师讲的还是很透彻的，能分析到非常细微的差别。<br>高手！","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511024,"discussion_content":"只有落地才是正道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607214676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253247,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1602662165,"is_pvip":false,"replies":[{"id":"93947","content":"性能是一个工程，从前到后。在我的思路中，不受职位限制。只看要达到的目标。哈哈。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1604281835,"ip_address":"","comment_id":253247,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5897629461","product_id":100042501,"comment_content":"老师硬核调优！测试、开发、运维后期在操作系统、网络上都这么强了！","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507020,"discussion_content":"性能是一个工程，从前到后。在我的思路中，不受职位限制。只看要达到的目标。哈哈。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604281835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179574,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1582033549,"is_pvip":false,"replies":[{"id":"69728","content":"在我的工作经验中，上下文切换的问题排不到前五名。但是前十名还是有可能的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1582033968,"ip_address":"","comment_id":179574,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877000845","product_id":100042501,"comment_content":"由于上下文切换过多引起性能降低的情形多吗？","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484312,"discussion_content":"在我的工作经验中，上下文切换的问题排不到前五名。但是前十名还是有可能的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582033968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360225,"user_name":"jy","can_delete":false,"product_type":"c1","uid":1785172,"ip_address":"江苏","ucode":"F4E179C435451B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJ6G2xZvNRmhyXBjmGbI5G8icGCCMPupr6yxZ1IcURwp7GTRHcpWGWpg9A0fLlyicmVdDwzqZqwiaOQ/132","comment_is_top":false,"comment_ctime":1666318423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666318423","product_id":100042501,"comment_content":"老师，请教一个问题，<br>文中：&quot;在我们做性能分析的过程中，基本上，基于上面这个表格就够通过接收和发送判断瓶颈点发生在谁身上了&quot;<br><br>感觉这里没说完整呢<br><br>比如发送端Send_Q有值，接收端Recv_Q也有值，说明瓶颈点在接收端，那下一步如何分析接收端呢？<br>比如发送端Send_Q有值，接收端Recv_Q没有值，说明瓶颈点在发送端或者网络设备，这种情况，那下一步又该如何分析发送端呢？<br><br>谢谢老师指导。","like_count":0},{"had_liked":false,"id":348462,"user_name":"Fzz","can_delete":false,"product_type":"c1","uid":2224130,"ip_address":"","ucode":"4CE3D65E278938","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfbvRdpx6zMkyHc6t5BdP2TN6sZic29MHmt5TwHHt1ksvPAiaSqVgRVwljBchH1lcX4iaxeXzaTP8fw/132","comment_is_top":false,"comment_ctime":1655118029,"is_pvip":false,"replies":[{"id":"127099","content":"你这个问题就比较大了。我需要看到具体的架构，跟着REASR性能分析七步法走一遍才能知道。 ","user_name":"作者回复","user_name_real":"编辑","uid":"1785562","ctime":1655821863,"ip_address":"","comment_id":348462,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1655118029","product_id":100042501,"comment_content":"老师你好，想问下系统tps到顶，系统CPU只有20%，系统相响应时间1秒以下，感觉压力发起端也没有瓶颈，想问下这个瓶颈在哪？看了资源的使用也不高，不知道是不是jvm或者应用的的问题？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576877,"discussion_content":"你这个问题就比较大了。我需要看到具体的架构，跟着REASR性能分析七步法走一遍才能知道。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655821863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2556640,"avatar":"https://static001.geekbang.org/account/avatar/00/27/02/e0/5e11188d.jpg","nickname":"BMB","note":"","ucode":"91CC67459B6FBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582732,"discussion_content":"这情况，排除压力机问题，应该是后端有阻塞发生。继续增加压力测试，把响应时间增长上去，查看日志，响应时间拆分，定位瓶颈位置，再做具体分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659608095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301796,"user_name":"学员141","can_delete":false,"product_type":"c1","uid":2559600,"ip_address":"","ucode":"8BC79DC3D7AF44","user_header":"","comment_is_top":false,"comment_ctime":1625885456,"is_pvip":false,"replies":[{"id":"109446","content":"没看懂这个问题。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1626230362,"ip_address":"","comment_id":301796,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1625885456","product_id":100042501,"comment_content":"在测试环境压测，发现服务器端口占满了，服务器的端口配置是否需要修改？网上说过大又容易被攻击（我们是docker，一个节点上部署了18个应用，节点主机16C16G，有些应用CPU和内存都分配很小，导致都到一个节点上来）","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523089,"discussion_content":"没看懂这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626230362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2559600,"avatar":"","nickname":"学员141","note":"","ucode":"8BC79DC3D7AF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386698,"discussion_content":"就是因为访问过高而导致服务器端口占满，我们是否能更改端口配置的参数（超时时间和端口数量）？生产可以随便更更改这些参数吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627734484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298688,"user_name":"0909","can_delete":false,"product_type":"c1","uid":1969097,"ip_address":"","ucode":"79C60A8D2B809A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/0b/c9/b53037df.jpg","comment_is_top":false,"comment_ctime":1624265208,"is_pvip":false,"replies":[{"id":"108476","content":"是的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1624491655,"ip_address":"","comment_id":298688,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624265208","product_id":100042501,"comment_content":"因为数据来源都是一样的，重要的还是要根据数据去找到瓶颈和优化方案","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522208,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624491655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280206,"user_name":"闲鱼超人","can_delete":false,"product_type":"c1","uid":1919774,"ip_address":"","ucode":"F517AC728D01CB","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4b/1e/107db99f.jpg","comment_is_top":false,"comment_ctime":1614133774,"is_pvip":false,"replies":[{"id":"103257","content":"是的。理解的很对。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1616422997,"ip_address":"","comment_id":280206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1614133774","product_id":100042501,"comment_content":"监控平台为什么不重要呢？<br>监控平台的主要用途是为了提供运行时状态数据给我们的，利用这些数据，我们分析性能情况。所以关键是数据、是证据链，是这些数据反馈出来的问题，这是核心。所以从这个角度来说，监控平台是不重要的，因为只要能提供这些你需要的数据，哪个平台都可以。","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516018,"discussion_content":"是的。理解的很对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616422997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233584,"user_name":"Geek_7cf52a","can_delete":false,"product_type":"c1","uid":2058904,"ip_address":"","ucode":"C7A1D1CF429503","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJlkFFx4N8ice8UcQRu3AMP0QAXdib17lyFI8G6QLje9iaumOXhsNq50PyLowAwg0umho89o1amN2UGQ/132","comment_is_top":false,"comment_ctime":1594360588,"is_pvip":true,"replies":[{"id":"87965","content":"多学习就会知道更多了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1596070463,"ip_address":"","comment_id":233584,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594360588","product_id":100042501,"comment_content":"老师我之前说的端口不够用的问题我知道了，听了音频知道老师说的客户端的端口了，不是服务端的，刚开始还以为是服务端的端口","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501096,"discussion_content":"多学习就会知道更多了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596070463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233552,"user_name":"Geek_7cf52a","can_delete":false,"product_type":"c1","uid":2058904,"ip_address":"","ucode":"C7A1D1CF429503","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJlkFFx4N8ice8UcQRu3AMP0QAXdib17lyFI8G6QLje9iaumOXhsNq50PyLowAwg0umho89o1amN2UGQ/132","comment_is_top":false,"comment_ctime":1594352687,"is_pvip":true,"replies":[{"id":"87966","content":"看另一个留言，你已经自学解决了。哈哈。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1596070511,"ip_address":"","comment_id":233552,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594352687","product_id":100042501,"comment_content":"至于为什么要处理TIME_WAIT，却没几个人能回答得上来。在我的性能工作经验中，只有一种情况要处理TIME_WAIT，那就是端口不够用的时候。TCP&#47;IPv4的标准中，端口最大是 65535，还有一些被用了的，所以当我们做压力测试的时候，有些应用由于响应时间非常快，端口就会不够用，这时我们去处理TIME_WAIT的端口，让它复用或尽快释放掉，以支持更多的压力。所以处理TIME_WAIT的端口要先判断清楚，如果是其他原因导致的，即使你处理了TIME_WAIT，也没有提升性能的希望。如果还有人说，还有一种情况，就是内存不够用。我必须得说，那是我没见过世面了，我至今没见过因为TIME_WAIT的连接数把内存耗光了的。一个 TCP 连接大概占 3KB，创建 10 万个连接，才100000x3KB≈300M左右，何况最多才 65535 呢？服务器有那么穷吗？<br>-----来自原文<br>老师你好，你上面说的端口不够用的时候处理time_wait是不是有问题？应该是连接不够用才对吧？一个应用在一开始就指定了具体的tcp端口，端口是不会变的，只有连接数才会不断的增多","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501084,"discussion_content":"看另一个留言，你已经自学解决了。哈哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596070511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205585,"user_name":"小呀么小二郎","can_delete":false,"product_type":"c1","uid":1326905,"ip_address":"","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/b1558fc9.jpg","comment_is_top":false,"comment_ctime":1586678916,"is_pvip":false,"replies":[{"id":"77268","content":"不操作确实不知道有多难。但是一步步走是必须经历的过程，实在是没有什么捷径可走。最多看着别人走过的路知道是可行的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1586959167,"ip_address":"","comment_id":205585,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586678916","product_id":100042501,"comment_content":"今日思考题<br>为什么说用什么监控平台并不重要呢？<br>监控平台再花哨，都只是提供数据来给性能测试人员分析的。作为性能测试人员，重点是要知道数据的来源、原理、含义。<br><br>知易行难，信息量好大。一节课够学一个月系列……","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491521,"discussion_content":"不操作确实不知道有多难。但是一步步走是必须经历的过程，实在是没有什么捷径可走。最多看着别人走过的路知道是可行的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586959167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203818,"user_name":"月亮和六便士","can_delete":false,"product_type":"c1","uid":1080894,"ip_address":"","ucode":"EFFCB9171D4B4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/3e/82202cc8.jpg","comment_is_top":false,"comment_ctime":1586270148,"is_pvip":false,"replies":[{"id":"76417","content":"都是netstat。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1586398755,"ip_address":"","comment_id":203818,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586270148","product_id":100042501,"comment_content":"老师，怎么查看端口够用不够用，或者说端口用了多少？Linux系统的命令是什么，window系统的命令是什么？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490967,"discussion_content":"都是netstat。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586398755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193663,"user_name":"京都念慈菴","can_delete":false,"product_type":"c1","uid":1744834,"ip_address":"","ucode":"2A310A91069A5E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9f/c2/3d1c2f88.jpg","comment_is_top":false,"comment_ctime":1584945460,"is_pvip":false,"replies":[{"id":"73774","content":"工具无所谓只要提供相应的计数器能看懂就可以了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584955325,"ip_address":"","comment_id":193663,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584945460","product_id":100042501,"comment_content":"平台就像是每个人用着不同品牌手机都用着差不多的功能。老师现在使用着云平台，平台上就会有一个监控模块，公司应用都是在云服务器上，那是否我只用在服务器提供商上的这个监控模块看就可以了？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488613,"discussion_content":"工具无所谓只要提供相应的计数器能看懂就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584955325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179572,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1582033135,"is_pvip":false,"replies":[{"id":"69729","content":"不存在。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1582034004,"ip_address":"","comment_id":179572,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582033135","product_id":100042501,"comment_content":"在固态硬盘中还存在扇区与磁道吗？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484310,"discussion_content":"不存在。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582034004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177626,"user_name":"wjh","can_delete":false,"product_type":"c1","uid":1786500,"ip_address":"","ucode":"3504E24EC6D097","user_header":"https://static001.geekbang.org/account/avatar/00/1b/42/84/e0a6fc1c.jpg","comment_is_top":false,"comment_ctime":1581436843,"is_pvip":false,"replies":[{"id":"68973","content":"你这个描述好笼统呀。😀😀<br>你能描述下什么是“场景又很正常（同一服务器）”吗？<br>你的性能问题又是什么呢？","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1581468631,"ip_address":"","comment_id":177626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581436843","product_id":100042501,"comment_content":"测试某场景的时候，发现该场景的network出入都非常少，但其他场景又都正常（同一服务器），请问高老师，这种情况的分析思路是怎么样的？明显不是带宽不够，那还有设么其他原因呢？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483490,"discussion_content":"你这个描述好笼统呀。😀😀\n你能描述下什么是“场景又很正常（同一服务器）”吗？\n你的性能问题又是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581468631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177061,"user_name":"杜艳","can_delete":false,"product_type":"c1","uid":1168516,"ip_address":"","ucode":"8D46A8CF33E9C7","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/84/7f584cb2.jpg","comment_is_top":false,"comment_ctime":1581258474,"is_pvip":false,"replies":[{"id":"68754","content":"去哪里输入？进到命令行就输入了哇。😃😃<br>这就是要学习linux基本的命令行操作了，任何一本linux基础书都可以学得到。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1581303665,"ip_address":"","comment_id":177061,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581258474","product_id":100042501,"comment_content":"对于基础差的人，这一块就看不懂了，对于这些命令需要去哪里输入都不知道，请问怎么入手补习这块知识","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483294,"discussion_content":"去哪里输入？进到命令行就输入了哇。😃😃\n这就是要学习linux基本的命令行操作了，任何一本linux基础书都可以学得到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581303665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175766,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1580825277,"is_pvip":false,"replies":[{"id":"68601","content":"收集好问题信息，可以自己先分析下。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1581165728,"ip_address":"","comment_id":175766,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1580825277","product_id":100042501,"comment_content":"我们用的是REDHAT，WAS挂过几次，IBM的人说要给他们的实验室分析以下，下次我用dmesg命令看看。","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482897,"discussion_content":"收集好问题信息，可以自己先分析下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581165728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785994,"avatar":"","nickname":"嘟嘟爱学习","note":"","ucode":"EAD8D5FDCD6261","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164249,"discussion_content":"WAS如果是内存溢出这类的异常，会自动生成线程快照和堆转储，你应该先看看有没有这两个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581165107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}