{"id":741043,"title":"第 18 章 配置Tomcat","content":"\n<p>目前有很多网站是用Java编写的，所以就必须有相关的软件来解析Java程序，Tomcat就是其中之一。Tomcat是Apache软件基金会（Apache Software Foundation）的Jakarta项目中的一个核心项目，由Apache、Sun和其他一些公司及个人共同开发而成。Tomcat技术先进、性能稳定而且免费，因而深受Java爱好者的喜爱，并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。</p>\n<p>Tomcat是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，在开发和调试Java程序时，首选Tomcat。对于初学者来说，在一台机器上配置好Apache服务器之后，可利用它响应对HTML页面的访问请求。实际上，Tomcat部分是Apache服务器的扩展，但它是独立运行的，所以当你运行Tomcat时，它是作为一个独立的进程运行的。</p>\n<h2 id=\"nav_point_357\">18.1 安装Tomcat</h2>\n<p>Tomcat的安装分为安装JDK和安装Tomcat两个步骤。JDK（Java Development Kit）是Sun Microsystems针对Java开发的产品。自从Java推出以来，JDK已经成为使用最广泛的Java SDK。JDK是整个Java的核心，包括Java运行环境、Java工具和Java基础的类库。所以要想运行Java程序必须要有JDK的支持，而Tomcat本身就是一种Java类型的程序，所以要正常运行Tomcat的前提也是先安装好JDK。</p><!-- [[[read_end]]] -->\n<h3 id=\"nav_point_358\">18.1.1 安装JDK</h3>\n<p>阿铭下载的JDK版本为1.8，你根据实际需求选择合适的版本即可。因为CentOS 8是64位的操作系统，所以要选择64位的包，阿铭选择的是jdk-8u251-linux-x64.tar.gz。浏览器下载完后，可以借助上一章已经搭建好的FTP服务，把JDK的包上传到Linux机器上。</p>\n<p>上传完JDK的包之后，把它放到/usr/local/src目录下，然后解压，命令如下：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/src\n# tar zxvf jdk-8u251-linux-x64.tar.gz\n# mv jdk1.8.0_251 /usr/local/jdk1.8</code></pre>\n<p>然后设置环境变量，操作方法如下：</p>\n<pre class=\"code-rows\"><code># vim /etc/profile // 在末尾输入以下内容\nJAVA_HOME=/usr/local/jdk1.8/\nJAVA_BIN=/usr/local/jdk1.8/bin\nJRE_HOME=/usr/local/jdk1.8/jre\nPATH=$PATH:/usr/local/jdk1.8/bin:/usr/local/jdk1.8/jre/bin\nCLASSPATH=/usr/local/jdk1.8/jre/lib:/usr/local/jdk1.8/lib:/usr/local/jdk1.8/jre/lib/charsets.jar</code></pre>\n<p>保存文件后，执行如下命令使其生效：</p>\n<pre class=\"code-rows\"><code># source /etc/profile</code></pre>\n<p>检测设置是否正确，命令如下：</p>\n<pre class=\"code-rows\"><code># java -version</code></pre>\n<p>如果显示如下内容，则说明设置正确：</p>\n<pre class=\"code-rows\"><code>java version \"1.8.0_251\"\nJava(TM) SE Runtime Environment (build 1.8.0_251-b08)\nJava HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</code></pre>\n<p>在这一步也许你的显示和阿铭的不一样，这可能是因为系统调用了<code>rpm</code>的<code>openjdk</code>，请按照如下方法检测：</p>\n<pre class=\"code-rows\"><code># which java</code></pre>\n<p>如果结果为/usr/bin/java则说明这是<code>rpm</code>的JDK，而且执行<code>java –version</code>时会有<code>openjdk</code>字样。其实我们也可以直接使用<code>openjdk</code>做后续试验，但为了和阿铭的试验结果保持一致，你需要做一个临时处理：</p>\n<pre class=\"code-rows\"><code># mv /usr/bin/java /usr/bin/java_bak\n# source /etc/profile</code></pre>\n<p>再次执行<code>java –version</code>，显示结果就正常了。</p>\n<h3 id=\"nav_point_359\">18.1.2 安装Tomcat</h3>\n<p>前面所做的工作都是在为安装Tomcat做准备，现在才是安装Tomcat。首先下载软件包，请到阿铭提供的资源库找到最新的下载地址，阿铭在本试验中下载的是Tomcat 9版本，如下所示：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/src/\n# wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz</code></pre>\n<p>如果觉得这个版本不适合，可以到官方网站下载，安装过程如下：</p>\n<pre class=\"code-rows\"><code># tar zxvf apache-tomcat-9.0.36.tar.gz\n# mv apache-tomcat-9.0.36 /usr/local/tomcat</code></pre>\n<p>因为是二进制包，所以免去了编译的过程，启动Tomcat，命令如下：</p>\n<pre class=\"code-rows\"><code># /usr/local/tomcat/bin/startup.sh\nUsing CATALINA_BASE: /usr/local/tomcat\nUsing CATALINA_HOME: /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME: /usr/local/jdk1.8\nUsing CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nTomcat started.</code></pre>\n<p>查看是否启动成功，命令如下：</p>\n<pre class=\"code-rows\"><code># ps aux |grep tomcat // 看是否有Java相关进程，也可以查看监听端口\n# netstat -lntp |grep java // 正常会有两个端口8005和8080，其中8080为\n// 提供Web服务的端口，8005为管理端口</code></pre>\n<p>若想开机启动，需要把启动命令放到/etc/rc.d/rc.local文件里。命令如下：</p>\n<pre class=\"code-rows\"><code># echo \"/usr/local/tomcat/bin/startup.sh\" &gt;&gt; /etc/rc.d/rc.local\n# chmod a+x /etc/rc.d/rc.local // 默认该文件没有x权限，所以需要加一下</code></pre>\n<p>然后在浏览器地址栏中输入http://192.168.72.128:8080/（请注意，你的Linux IP地址和阿铭的可能不一样），你会看到Tomcat的默认页面，如图18-1所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100013/image00430.jpeg\" alt=\"{%}\" /></p>\n<p><strong>图18-1 Tomcat默认页</strong></p>\n<h2 id=\"nav_point_360\">18.2 配置Tomcat</h2>\n<p>虽然Tomcat的安装过程非常简单，但我们还是需要学会如何配置Tomcat。在生产环境中关于Tomcat的配置其实并不多，接下来阿铭会介绍几个常用的配置。</p>\n<h3 id=\"nav_point_361\">18.2.1 配置Tomcat服务的访问端口</h3>\n<p>Tomcat默认的启动端口是8080，如果你想修改为80，则需要修改server.xml文件。打开server.xml文件，命令如下：</p>\n<pre class=\"code-rows\"><code># vim /usr/local/tomcat/conf/server.xml</code></pre>\n<p>找到<code>Connector port=\"8080\" protocol=\"HTTP/1.1\"</code>，修改为<code>&lt;Connector port=\"80\" protocol= \"HTTP/1.1\"</code>。保存文件后重启Tomcat，命令如下：</p>\n<pre class=\"code-rows\"><code># /usr/local/tomcat/bin/shutdown.sh\nUsing CATALINA_BASE: /usr/local/tomcat\nUsing CATALINA_HOME: /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME: /usr/local/jdk1.8\nUsing CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\n# /usr/local/tomcat/bin/startup.sh\nUsing CATALINA_BASE: /usr/local/tomcat\nUsing CATALINA_HOME: /usr/local/tomcat\nUsing CATALINA_TMPDIR: /usr/local/tomcat/temp\nUsing JRE_HOME: /usr/local/jdk1.8\nUsing CLASSPATH: /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar\nTomcat started.</code></pre>\n<p>Tomcat的关闭和启动有点特殊，需要使用它自带的脚本实现。其实在生产环境中，Tomcat会使用8080端口，而80端口是留给Nginx的。也就是说要想访问Tomcat，需要使用Nginx代理。关于如何代理，阿铭在14.4.9节已经介绍过，如果你没有印象了，就回头查一下吧。</p>\n<h3 id=\"nav_point_362\">18.2.2 Tomca的虚拟主机</h3>\n<p>在之前介绍httpd或者Nginx的时候，阿铭曾提到过虚拟主机的概念，在Tomcat中也有这一说。先来打开配置文件 /usr/local/tomcat/conf/server.xml查看一下它的结构，其中<code>&lt;!--</code>和<code>--&gt;</code>之间的内容为注释，可以不用关注。去除注释的内容后，剩下如下内容：</p>\n<pre class=\"code-rows\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Server port=\"8005\" shutdown=\"SHUTDOWN\"&gt;\n &lt;Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" /&gt;\n &lt;Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" /&gt;\n &lt;Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" /&gt;\n &lt;Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" /&gt;\n &lt;Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" /&gt;\n\n &lt;GlobalNamingResources&gt;\n &lt;Resource name=\"UserDatabase\" auth=\"Container\"\n type=\"org.apache.catalina.UserDatabase\"\n description=\"User database that can be updated and saved\"\n factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n pathname=\"conf/tomcat-users.xml\" /&gt;\n &lt;/GlobalNamingResources&gt;\n\n &lt;Service name=\"Catalina\"&gt;\n\n &lt;Connector port=\"8080\" protocol=\"HTTP/1.1\"\n connectionTimeout=\"20000\"\n redirectPort=\"8443\" /&gt;\n &lt;Engine name=\"Catalina\" defaultHost=\"localhost\"&gt;\n\n &lt;Realm className=\"org.apache.catalina.realm.LockOutRealm\"&gt;\n &lt;Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n resourceName=\"UserDatabase\"/&gt;\n &lt;/Realm&gt;\n\n &lt;Host name=\"localhost\" appBase=\"webapps\"\n unpackWARs=\"true\" autoDeploy=\"true\"&gt;\n\n &lt;Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n prefix=\"localhost_access_log\" suffix=\".txt\"\n pattern=\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\" /&gt;\n\n &lt;/Host&gt;\n &lt;/Engine&gt;\n &lt;/Service&gt;\n&lt;/Server&gt;</code></pre>\n<p>其中<code>&lt;Host&gt;</code>和<code>&lt;/Host&gt;</code>之间的配置为虚拟主机配置部分，<code>name</code>定义域名，<code>appBase</code>定义应用的目录。Java的应用通常是一个jar的压缩包，将jar的压缩包放到appBase目录下面即可。刚刚阿铭访问的Tomcat默认页其实就是在appBase目录下面，不过是在它子目录ROOT里：</p>\n<pre class=\"code-rows\"><code># ls /usr/local/tomcat/webapps/ROOT/\nasf-logo-wide.svg bg-middle.png bg-upper.png index.jsp tomcat.css tomcat.png tomcat.svg bg-button.png bg-nav.png favicon.ico RELEASE-NOTES.txt tomcat.gif tomcat-power.gif WEB-INF</code></pre>\n<p>其中index.jsp就是Tomcat的默认页面。你也可以用<code>curl</code>命令来访问一下tomcat.gif图片：</p>\n<pre class=\"code-rows\"><code># curl localhost:8080/tomcat.gif -I\nHTTP/1.1 200\nAccept-Ranges: bytes\nETag: W/\"2066-1591204289000\"\nLast-Modified: Wed, 03 Jun 2020 17:11:29 GMT\nContent-Type: image/gif\nContent-Length: 2066\nDate: Sat, 04 Jul 2020 02:09:05 GMT</code></pre>\n<p>阿铭并没有修改默认监听的8080端口为80，所以<code>curl</code>访问的时候依然是8080端口。在appBase（/usr/local/tomcat/webapps）目录下面有很多子目录，每一个子目录都可以被访问，你可以把自定义的应用放到webapps目录里（假设应用名字为aming，aming为一个目录），然后可以通过http://ip/aming/来访问这个应用。如果直接访问IP，后面不加二级目录，则默认会访问ROOT目录下面的文件，加上二级目录会访问二级目录下面的文件。</p>\n<p>下面阿铭再增加一个虚拟主机，并定义域名，编辑server.xml，在<code>&lt;/Host&gt;</code>下一行插入新的<code>&lt;Host&gt;</code>，内容如下：</p>\n<pre class=\"code-rows\"><code>&lt;Host name=\"www.123.cn\" appBase=\"/data/tomcatweb/\"\n unpackWARs=\"false\" autoDeploy=\"true\"\n xmlValidation=\"false\" xmlNamespaceAware=\"false\"&gt;\n &lt;Context path=\"\" docBase=\"/data/tomcatweb/\" debug=\"0\" reloadable=\"true\" crossContext=\"true\"/&gt;\n&lt;/Host&gt;</code></pre>\n<p>其中多了一个<code>docBase</code>，这个参数用来定义网站的文件存放路径，如果不定义，默认是在appBase/ROOT下面的。定义了<code>docBase</code>就以该目录为主了，其中<code>appBase</code>和<code>docBase</code>可以一样。在这一步操作过程中，很多同学遇到过访问404的问题，其实就是<code>docBase</code>没有定义对。创建目录和测试文件并测试，过程如下：</p>\n<pre class=\"code-rows\"><code># mkdir /data/tomcatweb\n# echo \"Tomcat test page.\" &gt; /data/tomcatweb/1.html</code></pre>\n<p>修改完配置文件后，需要重启Tomcat服务：</p>\n<pre class=\"code-rows\"><code># /usr/local/tomcat/bin/shutdown.sh\n# /usr/local/tomcat/bin/startup.sh</code></pre>\n<p>然后我们用<code>curl</code>访问一下刚才创建的1.html：</p>\n<pre class=\"code-rows\"><code># curl -x127.0.0.1:8080 www.123.cn/1.html\nTomcat test page.</code></pre>\n<h2 id=\"nav_point_363\">18.3 测试Tomcat解析JSP</h2>\n<p>以上章节阿铭所演示的操作，仅仅是把Tomcat作为一个普通的Web服务器，其实Tomcat主要用来解析JSP页面。下面阿铭创建一个JSP的测试页面，如下所示：</p>\n<pre class=\"code-rows\"><code># vim /data/tomcatweb/111.jsp // 加入如下内容\n&lt;html&gt;&lt;body&gt;&lt;center&gt;\n Now time is: &lt;%=new java.util.Date()%&gt;\n&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>\n<p>保存文件后使用<code>curl</code>测试，命令如下：</p>\n<pre class=\"code-rows\"><code># curl -x127.0.0.1:8080 www.123.cn/111.jsp</code></pre>\n<p>查看运行结果是否正确，如下所示：</p>\n<pre class=\"code-rows\"><code>&lt;html&gt;&lt;body&gt;&lt;center&gt;\n Now time is: Sat Jul 04 10:13:02 CST 2020\n&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>\n<p>可以看到，中间的那行代码被解析成当前系统的时间了。另外你也可以在你的物理机上绑定<code>hosts</code>，用浏览器来测试。</p>\n<h2 id=\"nav_point_364\">18.4 Tomcat日志</h2>\n<p>Tomcat的日志目录为/usr/local/tomcat/logs，主要有四大类日志：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/tomcat/logs\n# ls\ncatalina.2020-07-04.log catalina.out host-manager.2020-07-04.log localhost.2020-07-04.log localhost_access_log.2020-07-04.txt manager.2020-07-04.log</code></pre>\n<p>其中<code>catalina</code>开头的日志为Tomcat的综合日志，它记录Tomcat服务的相关信息，也会记录错误日志。其中，<code>catalina.2020-07-04.log</code>和<code>catalina.out</code>内容相同，前者会每天生成一个新的日志。<code>host-manager</code>和<code>manager</code>为管理相关的日志，其中<code>host-manager</code>为虚拟主机的管理日志。<code>Localhost</code>和<code>localhost_access</code>为虚拟主机相关日志，其中带<code>access</code>字样的日志为访问日志，不带<code>access</code>字样的为默认虚拟主机的错误日志。默认不会生成访问日志，需要在server.xml中配置一下。具体方法是在对应虚拟主机的<code>&lt;Host&gt;&lt;/Host&gt;</code>里面加入下面的配置（假如域名为123.cn）：</p>\n<pre class=\"code-rows\"><code>&lt;Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n prefix=\"123.cn_access_log\" suffix=\".txt\"\n pattern=\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\" /&gt;</code></pre>\n<p>其中<code>prefix</code>定义访问日志的前缀，<code>suffix</code>定义日志的后缀，<code>pattern</code>定义日志格式。新增加的虚拟主机默认并不会生成类似默认虚拟主机的那个“<code>localhost.日期.log</code>”日志，错误日志会统一记录到<code>catalina.out</code>中。关于Tomcat日志，你最需要关注<code>catalina.out</code>，出现问题时应该首先想到去查看它。</p>\n<h2 id=\"nav_point_365\">18.5 Tomcat连接MySQL</h2>\n<p>Tomcat连接MySQL是通过JDBC驱动实现的，需要下载mysql-connector-java-xxx-bin.jar（其中xxx为版本号），并放到Tomcat的lib目录下面才可以。阿铭的操作步骤如下：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/src/\n# wget https://cdn.mysql.com//archives/mysql-connector-java-5.1/mysql-connector-java-5.1.41.tar.gz // 如果此链接失效，请到官网下载\n# tar zxf mysql-connector-java-5.1.41.tar.gz\n# cd mysql-connector-java-5.1.41\n# mv mysql-connector-java-5.1.41-bin.jar /usr/local/tomcat/lib/</code></pre>\n<p>然后需要配置<code>mysql</code>，创建试验用的库、表以及用户：</p>\n<pre class=\"code-rows\"><code># mysql -uroot -p'aming123' // 你的密码也许不是这个，请使用你自己的密码\nmysql&gt; create database java_test;\nmysql&gt; use java_test\nmysql&gt; grant all on java_test.* to 'java'@'127.0.0.1' identified by 'aminglinux';\nmysql&gt; create table aminglinux (`id` int(4), `name` char(40));\nmysql&gt; insert into aminglinux values (1, 'abc');\nmysql&gt; insert into aminglinux values (2, 'aaa');\nmysql&gt; insert into aminglinux values (3, 'ccc');</code></pre>\n<p>创建完表以及用户后，退出<code>mysql</code>，并验证用户是否可用：</p>\n<pre class=\"code-rows\"><code># mysql -ujava -paminglinux -h127.0.0.1\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 9\nServer version: 5.7.29-log MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.</code></pre>\n<p>正常进入<code>mysql</code>，说明刚刚创建的Java用户没有问题。接着去配置Tomcat相关的配置文件：</p>\n<pre class=\"code-rows\"><code># vim /usr/local/tomcat/conf/context.xml // 在&lt;/Context&gt;上面增加以下内容\n &lt;Resource name=\"jdbc/mytest\"\n auth=\"Container\"\n type=\"javax.sql.DataSource\"\n maxActive=\"100\" maxIdle=\"30\" maxWait=\"10000\"\n username=\"java\" password=\"aminglinux\"\n driverClassName=\"com.mysql.jdbc.Driver\"\n url=\"jdbc:mysql://127.0.0.1:3306/java_test\"&gt;\n &lt;/Resource&gt;</code></pre>\n<p>其中有几个地方需要你关注，<code>name</code>定义为<code>jdbc/mytest</code>，这里的<code>mytest</code>可以自定义，后面还会用到它。<code>username</code>为<code>mysql</code>的用户，<code>password</code>为密码，<code>url</code>定义MySQL的IP、端口以及库名。保存该文件后，还需要更改另外一个配置文件：</p>\n<pre class=\"code-rows\"><code># vim /usr/local/tomcat/webapps/ROOT/WEB-INF/web.xml // 在&lt;/web-app&gt;上面增加\n &lt;resource-ref&gt;\n &lt;description&gt;DB Connection&lt;/description&gt;\n &lt;res-ref-name&gt;jdbc/mytest&lt;/res-ref-name&gt;\n &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;\n &lt;res-auth&gt;Container&lt;/res-auth&gt;\n &lt;/resource-ref&gt;</code></pre>\n<p>其实每一个应用（上文提到的webapps/ROOT、webapps/aming等）目录下都应该有一个WEB-INF目录，此目录里面会有对应的配置文件，比如web.xml就是用来定义JDBC相关资源的，其中的<code>res-ref-name</code>和前面定义的<code>Resource name</code>保持一致。既然选择了<code>webapps/ROOT</code>作为试验应用对象，就需要在ROOT目录下面创建测试JSP文件（用浏览器访问的文件）：</p>\n<pre class=\"code-rows\"><code># vim /usr/local/tomcat/webapps/ROOT/t.jsp // 写入如下内容\n&lt;%@page import=\"java.sql.*\"%&gt;\n&lt;%@page import=\"javax.sql.DataSource\"%&gt;\n&lt;%@page import=\"javax.naming.*\"%&gt;\n\n&lt;%\nContext ctx = new InitialContext();\nDataSource ds = (DataSource) ctx\n.lookup(\"java:comp/env/jdbc/mytest\");\nConnection conn = ds.getConnection();\nStatement state = conn.createStatement();\nString sql = \"select * from aminglinux\";\nResultSet rs = state.executeQuery(sql);\n\nwhile (rs.next()) {\n out.println(rs.getString(\"id\") +\"&lt;tr&gt;\");\n out.println(rs.getString(\"name\") +\"&lt;tr&gt;&lt;br&gt;\");\n}\n\nrs.close();\nstate.close();\nconn.close();\n%&gt;</code></pre>\n<p>这个JSP脚本对于你来说非常陌生，阿铭一样也不熟悉，因为这是Java语言写的程序代码。细节我们不用深究了，你只需要知道这个脚本会去连接MySQL，并查询一个库、表的数据即可。保存后，重启一下Tomcat：</p>\n<pre class=\"code-rows\"><code># /usr/local/tomcat/bin/shutdown.sh\n# /usr/local/tomcat/bin/startup.sh</code></pre>\n<p>然后在浏览器里访问http://192.168.72.128:8080/t.jsp，它会查询<code>java_test</code>库的<code>aminglinux</code>表，并列出具体数据来，结果如图18-2所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100013/image00431.jpeg\" alt=\"{%}\" /></p>\n<p><strong>图18-2 Tomcat连接MySQL</strong></p>\n<p>这和直接用MySQL命令行查询得到的结果是一致的：</p>\n<pre class=\"code-rows\"><code># mysql -ujava -paminglinux -h127.0.0.1 java_test -e \"select * from aminglinux\"\nWarning: Using a password on the command line interface can be insecure.\n+------+------+\n| id | name |\n+------+------+\n| 1 | abc |\n| 2 | aaa |\n| 3 | ccc |\n+------+------+</code></pre>\n\n<br style=\"page-break-after:always\" />","comments":[{"had_liked":false,"id":388291,"user_name":"无咎","can_delete":false,"product_type":"c1","uid":1479120,"ip_address":"天津","ucode":"B9759B5646F3AB","user_header":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","comment_is_top":false,"comment_ctime":1709808894,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100636611,"comment_content":"多处curl -x127.0.0.1:8080 www.123.cn&#47;111.jsp。\n需要配置&#47;etc&#47;hosts\n```\n# tail -1 &#47;etc&#47;hosts\n127.0.0.1\twww.123.cn\n```\n另外curl命令行我用的是如下参数\n```\n# curl -x127.0.0.1:80 www.123.cn&#47;111.jsp\n&lt;html&gt;&lt;body&gt;&lt;center&gt;\n Now time is: Thu Mar 07 18:54:17 CST 2024\n&lt;&#47;center&gt;&lt;&#47;body&gt;&lt;&#47;html&gt;\n```","like_count":0}]}