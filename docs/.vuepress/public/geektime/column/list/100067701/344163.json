{"id":344163,"title":"结束语 | 金融之道，与你同行，虽远尤欣","content":"<p>你好，我是任杰。</p><p>时光荏苒，转眼间就到了我们专栏的最后一讲，感谢你的一路相伴。这个专栏自夏蝉构思，于冬雪完稿。我们常说温故而知新，因此借着最后一课，我想再给你分享一下我自己学习分布式金融系统的思路。你可以把它当作一种思维方式去借鉴，也可以作为本专栏的学习指南。</p><p>作品都需要有一条主线，专栏也不例外。乍一看，你也许觉得这个专栏内容十分繁杂。开始从金融业务切入，几讲之后便过渡到软件工程，随后是平时我们很少见到的事件溯源架构和双时序数据库，最后还补充了一些看上去和金融无关的分布式系统知识。</p><p>其实每个部分深入下去都可以有精彩之处，但我每当此时便戛然而止，马上转入下一个话题，所以这个专栏难免有一种浅尝辄止的嫌疑。其实不然。金融系统强调的是正确性，这个问题我们在专栏最初就讨论过，而正确性的定义可大可小。这个专栏虽然内容繁多，但是如果<strong>顺着正确性从大到小</strong>的主线来看，一切存在便都合理了。</p><p>还记得我们在开篇词给到的<strong>分布式金融系统全景图</strong>么？这三个部分，分别对应的是<strong>业务正确</strong>、<strong>架构正确</strong>以及<strong>基础正确</strong>这三个维度。</p><p><img src=\"https://static001.geekbang.org/resource/image/be/1e/be051a5188593385c6dd3ayyc718301e.jpg?wh=3075*2332\" alt=\"\"></p><p>往小了说，金融系统的每一行代码都需完成应尽之责，恰如其分，不多不少。代码构成的组件也应该完成组件应有的功能。这些组件之间的交互在一台机器的情况下，应该具有合适的正确性。而多台机器之间的交互，也应该具有一定的正确性。那么这些基础组件的正确性如何衡量，如何实现、如何选择、如何验证，便成了一个问题。这就是基础正确。</p><!-- [[[read_end]]] --><p>进一步说，正确的基础工具也需要有正确的用法，否则就如烧琴煮鹤，对花啜茶。用的方式各有千秋，但也不外乎事前、事中与事后三个阶段。事前须认真遴选数据，仔细斟酌数据的时间。事中处理要处处留痕，步步小心。事后要勇于自我怀疑，三省吾身。<strong>组件于系统之中，犹如人于社会之中，需要往来交互彬彬有礼，应答有方。</strong>这就是架构正确。</p><p>往大了说，正确地做事不如做正确的事。金融系统赋能于金融业务，系统为辅，业务为主。良相贤臣的辅佐不能只是一味的阿谀奉承，而是要既知晓熙熙攘攘，又心怀诗和远方。金融业务虽纷繁复杂，但金钱如水，来往之中不生不灭，不垢不净，不增不减。金钱的融通抽象出来就是信息的传递，因此信息系统的规律需要和金融业务的规律相互契合。这就是业务正确。</p><p>总结来说，金融业务纷繁复杂，因此学习金融架构须庖丁解牛。先识大体，从复杂业务中抓取脉络。再将业务脉络变为架构原则，做到神形兼备。最后仔细雕塑，以匠人之艺成百年之业。</p><p>正是这样的思路主导，所以我在讲解过程中，有意避免过于深陷细节。内容过深，容易只见树木不见森林，在吹毛求疵的过程中慢慢迷失正确的方向。因此专栏尝试立于核心的金融业务之上，鸟瞰金融软件架构。此为其一。</p><p>计算机是一门实践科学，讲求知行合一。而近世互联网的发展逐速而不守格，但欲速则不达，知其然也知所以然方为正道。再则金融关系国计民生，可大可小。根基不稳，大厦必倾。因此斟酌再三，行文兼顾实践同时，亦重底层逻辑。此为其二。</p><p>一二之选决定了这个专栏的行文考量。若有语焉不详之处，还望指摘。<strong>金融之道，形单影只，与尔同行，虽远犹欣。</strong></p><p>最后，我给你准备了一份<a href=\"https://jinshuju.net/f/Zoh1Mo\">毕业问卷</a>，希望你能花两分钟填一下。非常期待你对这个专栏的评价与建议。</p>","neighbors":{"left":{"article_title":"春节策划第3期 | 如何运用架构知识解读春运买票和手游案例？","id":342693},"right":[]},"comments":[{"had_liked":false,"id":279741,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1613952807,"is_pvip":false,"replies":[{"id":102757,"content":"这位同学你好。事件溯源没有很通用的开源实现。原因是事件溯源涉及到命令、事件和状态的存储和读取。数据系统的异构性很高，难以抽象出统一的接口。事件溯源本身的思路很简单，因此一般都选择自己实现，根据自己当时的系统情况定制化开发。","user_name":"作者回复","user_name_real":"任杰","uid":2068304,"ctime":1615692028,"ip_address":"","comment_id":279741,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100067701,"comment_content":"感谢老师高屋建瓴的讲述。\n\n有些内容之前就已知晓，老师的讲述更是鞭辟入里，比如有关一致性的内容。\n\n有些内容之前若有所思，老师的讲述让我豁然开朗，比如有关金融系统业务正确性的讲述。\n\n还有些内容，之前很少思考，虽偶有遇到，但懵懵懂懂，比如有关架构正确性的讲述。\n\n课程结束了，还有一个问题请教一下。\n\n就是不知道有关架构正确性的内容，比如事件溯源的内容，在开源方面有啥不错的实现么？\n\n这个问题的背景是这样的。有一个非常老旧的对公系统，经常出问题。客户和业务方经常不按照接口的约定进行操作，前天分析数据到晚上十点多，当时就想，如果是可以“回放”的多好啊，这样一是这样压力就不会在我们这边了，而是处理起来也可以省去很多时间。","like_count":4},{"had_liked":false,"id":339355,"user_name":"IT生涯路漫漫","can_delete":false,"product_type":"c1","uid":1014146,"ip_address":"","ucode":"4954D1CBEB4E44","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/82/c3cccc38.jpg","comment_is_top":false,"comment_ctime":1648042823,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100067701,"comment_content":"总算学完了，老师讲得很好；非常期待老师开的金融知识课程","like_count":1},{"had_liked":false,"id":316597,"user_name":"LiJiao","can_delete":false,"product_type":"c1","uid":1157621,"ip_address":"","ucode":"E274D90C022D49","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/f5/4aed8129.jpg","comment_is_top":false,"comment_ctime":1634442441,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100067701,"comment_content":"读到分布式章节的几篇时，疑惑了，搞不清脉络。来回翻阅前面的文章，做了大量笔记，终于找到了可以把这些知识串起来的脉络：正确性。即单机串行、单机并发、多机串行、多机并发、多机备份情况的读写并发，这些场景的下的正确性要怎样保障，并发行为规范怎样制定。\n\n感谢任老师，这个专栏的内容让我深刻感受到了「能写代码」和「掌握计算机科学」间差距。。期待任老开设更多专栏！","like_count":1},{"had_liked":false,"id":336880,"user_name":"rcblq","can_delete":false,"product_type":"c1","uid":1220488,"ip_address":"","ucode":"4BE05CE4891109","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/88/4160f713.jpg","comment_is_top":false,"comment_ctime":1646447142,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100067701,"comment_content":"今天终于学完了，感谢老师的付出，受益良多","like_count":0,"discussions":[{"author":{"id":2068304,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8f/50/612732c9.jpg","nickname":"任杰","note":"","ucode":"CB79E0CFF8E068","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515855,"discussion_content":"这位同学你好。事件溯源没有很通用的开源实现。原因是事件溯源涉及到命令、事件和状态的存储和读取。数据系统的异构性很高，难以抽象出统一的接口。事件溯源本身的思路很简单，因此一般都选择自己实现，根据自己当时的系统情况定制化开发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615692028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058231,"avatar":"https://static001.geekbang.org/account/avatar/00/10/25/b7/c90b315b.jpg","nickname":"羊八井","note":"","ucode":"72731AC6ECCFA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351617,"discussion_content":"事件溯源的话，Akka 基于 Actor 模型的 EventSourceBehavior 可以了解下。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1614345665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279741,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1613952807,"is_pvip":false,"replies":[{"id":102757,"content":"这位同学你好。事件溯源没有很通用的开源实现。原因是事件溯源涉及到命令、事件和状态的存储和读取。数据系统的异构性很高，难以抽象出统一的接口。事件溯源本身的思路很简单，因此一般都选择自己实现，根据自己当时的系统情况定制化开发。","user_name":"作者回复","user_name_real":"任杰","uid":2068304,"ctime":1615692028,"ip_address":"","comment_id":279741,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100067701,"comment_content":"感谢老师高屋建瓴的讲述。\n\n有些内容之前就已知晓，老师的讲述更是鞭辟入里，比如有关一致性的内容。\n\n有些内容之前若有所思，老师的讲述让我豁然开朗，比如有关金融系统业务正确性的讲述。\n\n还有些内容，之前很少思考，虽偶有遇到，但懵懵懂懂，比如有关架构正确性的讲述。\n\n课程结束了，还有一个问题请教一下。\n\n就是不知道有关架构正确性的内容，比如事件溯源的内容，在开源方面有啥不错的实现么？\n\n这个问题的背景是这样的。有一个非常老旧的对公系统，经常出问题。客户和业务方经常不按照接口的约定进行操作，前天分析数据到晚上十点多，当时就想，如果是可以“回放”的多好啊，这样一是这样压力就不会在我们这边了，而是处理起来也可以省去很多时间。","like_count":4,"discussions":[{"author":{"id":2068304,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/8f/50/612732c9.jpg","nickname":"任杰","note":"","ucode":"CB79E0CFF8E068","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515855,"discussion_content":"这位同学你好。事件溯源没有很通用的开源实现。原因是事件溯源涉及到命令、事件和状态的存储和读取。数据系统的异构性很高，难以抽象出统一的接口。事件溯源本身的思路很简单，因此一般都选择自己实现，根据自己当时的系统情况定制化开发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615692028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058231,"avatar":"https://static001.geekbang.org/account/avatar/00/10/25/b7/c90b315b.jpg","nickname":"羊八井","note":"","ucode":"72731AC6ECCFA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351617,"discussion_content":"事件溯源的话，Akka 基于 Actor 模型的 EventSourceBehavior 可以了解下。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1614345665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339355,"user_name":"IT生涯路漫漫","can_delete":false,"product_type":"c1","uid":1014146,"ip_address":"","ucode":"4954D1CBEB4E44","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/82/c3cccc38.jpg","comment_is_top":false,"comment_ctime":1648042823,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100067701,"comment_content":"总算学完了，老师讲得很好；非常期待老师开的金融知识课程","like_count":1},{"had_liked":false,"id":316597,"user_name":"LiJiao","can_delete":false,"product_type":"c1","uid":1157621,"ip_address":"","ucode":"E274D90C022D49","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/f5/4aed8129.jpg","comment_is_top":false,"comment_ctime":1634442441,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100067701,"comment_content":"读到分布式章节的几篇时，疑惑了，搞不清脉络。来回翻阅前面的文章，做了大量笔记，终于找到了可以把这些知识串起来的脉络：正确性。即单机串行、单机并发、多机串行、多机并发、多机备份情况的读写并发，这些场景的下的正确性要怎样保障，并发行为规范怎样制定。\n\n感谢任老师，这个专栏的内容让我深刻感受到了「能写代码」和「掌握计算机科学」间差距。。期待任老开设更多专栏！","like_count":1},{"had_liked":false,"id":336880,"user_name":"rcblq","can_delete":false,"product_type":"c1","uid":1220488,"ip_address":"","ucode":"4BE05CE4891109","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/88/4160f713.jpg","comment_is_top":false,"comment_ctime":1646447142,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100067701,"comment_content":"今天终于学完了，感谢老师的付出，受益良多","like_count":0}]}