{"id":301491,"title":"31 | 事务机制：Redis能实现ACID属性吗？","content":"<p>你好，我是蒋德钧。</p><p>事务是数据库的一个重要功能。所谓的事务，就是指对数据进行读写的一系列操作。事务在执行时，会提供专门的属性保证，包括原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），也就是ACID属性。这些属性既包括了对事务执行结果的要求，也有对数据库在事务执行前后的数据状态变化的要求。</p><p>那么，Redis可以完全保证ACID属性吗？毕竟，如果有些属性在一些场景下不能保证的话，很可能会导致数据出错，所以，我们必须要掌握Redis对这些属性的支持情况，并且提前准备应对策略。</p><p>接下来，我们就先了解ACID属性对事务执行的具体要求，有了这个知识基础后，我们才能准确地判断Redis的事务机制能否保证ACID属性。</p><h2>事务ACID属性的要求</h2><p>首先来看原子性。原子性的要求很明确，就是一个事务中的多个操作必须都完成，或者都不完成。业务应用使用事务时，原子性也是最被看重的一个属性。</p><p>我给你举个例子。假如用户在一个订单中购买了两个商品A和B，那么，数据库就需要把这两个商品的库存都进行扣减。如果只扣减了一个商品的库存，那么，这个订单完成后，另一个商品的库存肯定就错了。</p><!-- [[[read_end]]] --><p>第二个属性是一致性。这个很容易理解，就是指数据库中的数据在事务执行前后是一致的。</p><p>第三个属性是隔离性。它要求数据库在执行一个事务时，其它操作无法存取到正在执行事务访问的数据。</p><p>我还是借助用户下单的例子给你解释下。假设商品A和B的现有库存分别是5和10，用户X对A、B下单的数量分别是3、6。如果事务不具备隔离性，在用户X下单事务执行的过程中，用户Y一下子也购买了5件B，这和X购买的6件B累加后，就超过B的总库存值了，这就不符合业务要求了。</p><p>最后一个属性是持久性。数据库执行事务后，数据的修改要被持久化保存下来。当数据库重启后，数据的值需要是被修改后的值。</p><p>了解了ACID属性的具体要求后，我们再来看下Redis是如何实现事务机制的。</p><h2>Redis如何实现事务？</h2><p>事务的执行过程包含三个步骤，Redis提供了MULTI、EXEC两个命令来完成这三个步骤。下面我们来分析下。</p><p>第一步，客户端要使用一个命令显式地表示一个事务的开启。在Redis中，这个命令就是MULTI。</p><p>第二步，客户端把事务中本身要执行的具体操作（例如增删改数据）发送给服务器端。这些操作就是Redis本身提供的数据读写命令，例如GET、SET等。不过，这些命令虽然被客户端发送到了服务器端，但Redis实例只是把这些命令暂存到一个命令队列中，并不会立即执行。</p><p>第三步，客户端向服务器端发送提交事务的命令，让数据库实际执行第二步中发送的具体操作。Redis提供的<strong>EXEC命令</strong>就是执行事务提交的。当服务器端收到EXEC命令后，才会实际执行命令队列中的所有命令。</p><p>下面的代码就显示了使用MULTI和EXEC执行一个事务的过程，你可以看下。</p><pre><code>#开启事务\n127.0.0.1:6379&gt; MULTI\nOK\n#将a:stock减1，\n127.0.0.1:6379&gt; DECR a:stock\nQUEUED\n#将b:stock减1\n127.0.0.1:6379&gt; DECR b:stock\nQUEUED\n#实际执行事务\n127.0.0.1:6379&gt; EXEC\n1) (integer) 4\n2) (integer) 9\n</code></pre><p>我们假设a:stock、b:stock两个键的初始值是5和10。在MULTI命令后执行的两个DECR命令，是把a:stock、b:stock两个键的值分别减1，它们执行后的返回结果都是QUEUED，这就表示，这些操作都被暂存到了命令队列，还没有实际执行。等到执行了EXEC命令后，可以看到返回了4、9，这就表明，两个DECR命令已经成功地执行了。</p><p>好了，通过使用MULTI和EXEC命令，我们可以实现多个操作的共同执行，但是这符合事务要求的ACID属性吗？接下来，我们就来具体分析下。</p><h2>Redis的事务机制能保证哪些属性？</h2><p>原子性是事务操作最重要的一个属性，所以，我们先来分析下Redis事务机制能否保证原子性。</p><h3>原子性</h3><p>如果事务正常执行，没有发生任何错误，那么，MULTI和EXEC配合使用，就可以保证多个操作都完成。但是，如果事务执行发生错误了，原子性还能保证吗？我们需要分三种情况来看。</p><p>第一种情况是，<strong>在执行EXEC命令前，客户端发送的操作命令本身就有错误</strong>（比如语法错误，使用了不存在的命令），在命令入队时就被Redis实例判断出来了。</p><p>对于这种情况，在命令入队时，Redis就会报错并且记录下这个错误。此时，我们还能继续提交命令操作。等到执行了EXEC命令之后，Redis就会拒绝执行所有提交的命令操作，返回事务失败的结果。这样一来，事务中的所有命令都不会再被执行了，保证了原子性。</p><p>我们来看一个因为事务操作入队时发生错误，而导致事务失败的小例子。</p><pre><code>#开启事务\n127.0.0.1:6379&gt; MULTI\nOK\n#发送事务中的第一个操作，但是Redis不支持该命令，返回报错信息\n127.0.0.1:6379&gt; PUT a:stock 5\n(error) ERR unknown command `PUT`, with args beginning with: `a:stock`, `5`, \n#发送事务中的第二个操作，这个操作是正确的命令，Redis把该命令入队\n127.0.0.1:6379&gt; DECR b:stock\nQUEUED\n#实际执行事务，但是之前命令有错误，所以Redis拒绝执行\n127.0.0.1:6379&gt; EXEC\n(error) EXECABORT Transaction discarded because of previous errors.\n</code></pre><p>在这个例子中，事务里包含了一个Redis本身就不支持的PUT命令，所以，在PUT命令入队时，Redis就报错了。虽然，事务里还有一个正确的DECR命令，但是，在最后执行EXEC命令后，整个事务被放弃执行了。</p><p>我们再来看第二种情况。</p><p>和第一种情况不同的是，<strong>事务操作入队时，命令和操作的数据类型不匹配，但Redis实例没有检查出错误</strong>。但是，在执行完EXEC命令以后，Redis实际执行这些事务操作时，就会报错。不过，需要注意的是，虽然Redis会对错误命令报错，但还是会把正确的命令执行完。在这种情况下，事务的原子性就无法得到保证了。</p><p>举个小例子。事务中的LPOP命令对String类型数据进行操作，入队时没有报错，但是，在EXEC执行时报错了。LPOP命令本身没有执行成功，但是事务中的DECR命令却成功执行了。</p><pre><code>#开启事务\n127.0.0.1:6379&gt; MULTI\nOK\n#发送事务中的第一个操作，LPOP命令操作的数据类型不匹配，此时并不报错\n127.0.0.1:6379&gt; LPOP a:stock\nQUEUED\n#发送事务中的第二个操作\n127.0.0.1:6379&gt; DECR b:stock\nQUEUED\n#实际执行事务，事务第一个操作执行报错\n127.0.0.1:6379&gt; EXEC\n1) (error) WRONGTYPE Operation against a key holding the wrong kind of value\n2) (integer) 8\n</code></pre><p>看到这里，你可能有个疑问，传统数据库（例如MySQL）在执行事务时，会提供回滚机制，当事务执行发生错误时，事务中的所有操作都会撤销，已经修改的数据也会被恢复到事务执行前的状态，那么，在刚才的例子中，如果命令实际执行时报错了，是不是可以用回滚机制恢复原来的数据呢？</p><p>其实，Redis中并没有提供回滚机制。虽然Redis提供了DISCARD命令，但是，这个命令只能用来主动放弃事务执行，把暂存的命令队列清空，起不到回滚的效果。</p><p>DISCARD命令具体怎么用呢？我们来看下下面的代码。</p><pre><code>#读取a:stock的值4\n127.0.0.1:6379&gt; GET a:stock\n&quot;4&quot;\n#开启事务\n127.0.0.1:6379&gt; MULTI \nOK\n#发送事务的第一个操作，对a:stock减1\n127.0.0.1:6379&gt; DECR a:stock\nQUEUED\n#执行DISCARD命令，主动放弃事务\n127.0.0.1:6379&gt; DISCARD\nOK\n#再次读取a:stock的值，值没有被修改\n127.0.0.1:6379&gt; GET a:stock\n&quot;4&quot;\n</code></pre><p>这个例子中，a:stock键的值一开始为4，然后，我们执行一个事务，想对a:stock的值减1。但是，在事务的最后，我们执行的是DISCARD命令，所以事务就被放弃了。我们再次查看a:stock的值，会发现仍然为4。</p><p>最后，我们再来看下第三种情况：<strong>在执行事务的EXEC命令时，Redis实例发生了故障，导致事务执行失败</strong>。</p><p>在这种情况下，如果Redis开启了AOF日志，那么，只会有部分的事务操作被记录到AOF日志中。我们需要使用redis-check-aof工具检查AOF日志文件，这个工具可以把未完成的事务操作从AOF文件中去除。这样一来，我们使用AOF恢复实例后，事务操作不会再被执行，从而保证了原子性。</p><p>当然，如果AOF日志并没有开启，那么实例重启后，数据也都没法恢复了，此时，也就谈不上原子性了。</p><p>好了，到这里，你了解了Redis对事务原子性属性的保证情况，我们来简单小结下：</p><ul>\n<li>命令入队时就报错，会放弃事务执行，保证原子性；</li>\n<li>命令入队时没报错，实际执行时报错，不保证原子性；</li>\n<li>EXEC命令执行时实例故障，如果开启了AOF日志，可以保证原子性。</li>\n</ul><p>接下来，我们再来学习下一致性属性的保证情况。</p><h3>一致性</h3><p>事务的一致性保证会受到错误命令、实例故障的影响。所以，我们按照命令出错和实例故障的发生时机，分成三种情况来看。</p><p><strong>情况一：命令入队时就报错</strong></p><p>在这种情况下，事务本身就会被放弃执行，所以可以保证数据库的一致性。</p><p><strong>情况二：命令入队时没报错，实际执行时报错</strong></p><p>在这种情况下，有错误的命令不会被执行，正确的命令可以正常执行，也不会改变数据库的一致性。</p><p><strong>情况三：EXEC命令执行时实例发生故障</strong></p><p>在这种情况下，实例故障后会进行重启，这就和数据恢复的方式有关了，我们要根据实例是否开启了RDB或AOF来分情况讨论下。</p><p>如果我们没有开启RDB或AOF，那么，实例故障重启后，数据都没有了，数据库是一致的。</p><p>如果我们使用了RDB快照，因为RDB快照不会在事务执行时执行，所以，事务命令操作的结果不会被保存到RDB快照中，使用RDB快照进行恢复时，数据库里的数据也是一致的。</p><p>如果我们使用了AOF日志，而事务操作还没有被记录到AOF日志时，实例就发生了故障，那么，使用AOF日志恢复的数据库数据是一致的。如果只有部分操作被记录到了AOF日志，我们可以使用redis-check-aof清除事务中已经完成的操作，数据库恢复后也是一致的。</p><p>所以，总结来说，在命令执行错误或Redis发生故障的情况下，Redis事务机制对一致性属性是有保证的。接下来，我们再继续分析下隔离性。</p><h3>隔离性</h3><p>事务的隔离性保证，会受到和事务一起执行的并发操作的影响。而事务执行又可以分成命令入队（EXEC命令执行前）和命令实际执行（EXEC命令执行后）两个阶段，所以，我们就针对这两个阶段，分成两种情况来分析：</p><ol>\n<li>并发操作在EXEC命令前执行，此时，隔离性的保证要使用WATCH机制来实现，否则隔离性无法保证；</li>\n<li>并发操作在EXEC命令后执行，此时，隔离性可以保证。</li>\n</ol><p>我们先来看第一种情况。一个事务的EXEC命令还没有执行时，事务的命令操作是暂存在命令队列中的。此时，如果有其它的并发操作，我们就需要看事务是否使用了WATCH机制。</p><p>WATCH机制的作用是，在事务执行前，监控一个或多个键的值变化情况，当事务调用EXEC命令执行时，WATCH机制会先检查监控的键是否被其它客户端修改了。如果修改了，就放弃事务执行，避免事务的隔离性被破坏。然后，客户端可以再次执行事务，此时，如果没有并发修改事务数据的操作了，事务就能正常执行，隔离性也得到了保证。</p><p>WATCH机制的具体实现是由WATCH命令实现的，我给你举个例子，你可以看下下面的图，进一步理解下WATCH命令的使用。</p><p><img src=\"https://static001.geekbang.org/resource/image/4f/73/4f8589410f77df16311dd29131676373.jpg?wh=3000*1921\" alt=\"\"></p><p>我来给你具体解释下图中的内容。</p><p>在t1时，客户端X向实例发送了WATCH命令。实例收到WATCH命令后，开始监测a:stock的值的变化情况。</p><p>紧接着，在t2时，客户端X把MULTI命令和DECR命令发送给实例，实例把DECR命令暂存入命令队列。</p><p>在t3时，客户端Y也给实例发送了一个DECR命令，要修改a:stock的值，实例收到命令后就直接执行了。</p><p>等到t4时，实例收到客户端X发送的EXEC命令，但是，实例的WATCH机制发现a:stock已经被修改了，就会放弃事务执行。这样一来，事务的隔离性就可以得到保证了。</p><p>当然，如果没有使用WATCH机制，在EXEC命令前执行的并发操作是会对数据进行读写的。而且，在执行EXEC命令的时候，事务要操作的数据已经改变了，在这种情况下，Redis并没有做到让事务对其它操作隔离，隔离性也就没有得到保障。下面这张图显示了没有WATCH机制时的情况，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/57/8ca37debfff91282b9c62a25fd7e9a57.jpg?wh=3000*1562\" alt=\"\"></p><p>在t2时刻，客户端X发送的EXEC命令还没有执行，但是客户端Y的DECR命令就执行了，此时，a:stock的值会被修改，这就无法保证X发起的事务的隔离性了。</p><p>刚刚说的是并发操作在EXEC命令前执行的情况，下面我再来说一说第二种情况：<strong>并发操作在EXEC命令之后被服务器端接收并执行</strong>。</p><p>因为Redis是用单线程执行命令，而且，EXEC命令执行后，Redis会保证先把命令队列中的所有命令执行完。所以，在这种情况下，并发操作不会破坏事务的隔离性，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/11/ae/11a1eff930920a0b423a6e46c23f44ae.jpg?wh=2958*1799\" alt=\"\"></p><p>最后，我们来分析一下Redis事务的持久性属性保证情况。</p><h3>持久性</h3><p>因为Redis是内存数据库，所以，数据是否持久化保存完全取决于Redis的持久化配置模式。</p><p>如果Redis没有使用RDB或AOF，那么事务的持久化属性肯定得不到保证。如果Redis使用了RDB模式，那么，在一个事务执行后，而下一次的RDB快照还未执行前，如果发生了实例宕机，这种情况下，事务修改的数据也是不能保证持久化的。</p><p>如果Redis采用了AOF模式，因为AOF模式的三种配置选项no、everysec和always都会存在数据丢失的情况，所以，事务的持久性属性也还是得不到保证。</p><p>所以，不管Redis采用什么持久化模式，事务的持久性属性是得不到保证的。</p><h2>小结</h2><p>在这节课上，我们学习了Redis中的事务实现。Redis通过MULTI、EXEC、DISCARD和WATCH四个命令来支持事务机制，这4个命令的作用，我总结在下面的表中，你可以再看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/50/9571308df0620214d7ccb2f2cc73a250.jpg?wh=2505*734\" alt=\"\"></p><p>事务的ACID属性是我们使用事务进行正确操作的基本要求。通过这节课的分析，我们了解到了，Redis的事务机制可以保证一致性和隔离性，但是无法保证持久性。不过，因为Redis本身是内存数据库，持久性并不是一个必须的属性，我们更加关注的还是原子性、一致性和隔离性这三个属性。</p><p>原子性的情况比较复杂，只有当事务中使用的命令语法有误时，原子性得不到保证，在其它情况下，事务都可以原子性执行。</p><p>所以，我给你一个小建议：<strong>严格按照Redis的命令规范进行程序开发，并且通过code review确保命令的正确性</strong>。这样一来，Redis的事务机制就能被应用在实践中，保证多操作的正确执行。</p><h2>每课一问</h2><p>按照惯例，我给你提个小问题，在执行事务时，如果Redis实例发生故障，而Redis使用了RDB机制，那么，事务的原子性还能得到保证吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你分享给你的朋友或同事。我们下节课见。</p>","neighbors":{"left":{"article_title":"30 | 如何使用Redis实现分布式锁？","id":301092},"right":{"article_title":"32 | Redis主从同步与故障切换，有哪些坑？","id":303247}},"comments":[{"had_liked":false,"id":257489,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1603987941,"is_pvip":true,"discussion_count":32,"race_medal":0,"score":"946496793061","product_id":100056701,"comment_content":"在执行事务时，如果 Redis 实例发生故障，而 Redis 使用的 RDB 机制，事务的原子性还能否得到保证？<br><br>我觉得是可以保证原子性的。<br><br>如果一个事务只执行了一半，然后 Redis 实例故障宕机了，由于 RDB 不会在事务执行时执行，所以 RDB 文件中不会记录只执行了一部分的结果数据。之后用 RDB 恢复实例数据，恢复的还是事务之前的数据。但 RDB 本身是快照持久化，所以会存在数据丢失，丢失的是距离上一次 RDB 之间的所有更改操作。<br><br>关于 Redis 事务的使用，有几个细节我觉得有必要补充下，关于 Pipeline 和 WATCH 命令的使用。<br><br>1、在使用事务时，建议配合 Pipeline 使用。<br><br>a) 如果不使用 Pipeline，客户端是先发一个 MULTI 命令到服务端，客户端收到 OK，然后客户端再发送一个个操作命令，客户端依次收到 QUEUED，最后客户端发送 EXEC 执行整个事务（文章例子就是这样演示的），这样消息每次都是一来一回，效率比较低，而且在这多次操作之间，别的客户端可能就把原本准备修改的值给修改了，所以无法保证隔离性。<br><br>b) 而使用 Pipeline 是一次性把所有命令打包好全部发送到服务端，服务端全部处理完成后返回。这么做好的好处，一是减少了来回网络 IO 次数，提高操作性能。二是一次性发送所有命令到服务端，服务端在处理过程中，是不会被别的请求打断的（Redis单线程特性，此时别的请求进不来），这本身就保证了隔离性。我们平时使用的 Redis SDK 在使用开启事务时，一般都会默认开启 Pipeline 的，可以留意观察一下。<br><br>2、关于 WATCH 命令的使用场景。<br><br>a) 在上面 1-a 场景中，也就是使用了事务命令，但没有配合 Pipeline 使用，如果想要保证隔离性，需要使用 WATCH 命令保证，也就是文章中讲 WATCH 的例子。但如果是 1-b 场景，使用了 Pipeline 一次发送所有命令到服务端，那么就不需要使用 WATCH 了，因为服务端本身就保证了隔离性。<br><br>b) 如果事务 + Pipeline 就可以保证隔离性，那 WATCH 还有没有使用的必要？答案是有的。对于一个资源操作为读取、修改、写回这种场景，如果需要保证事物的原子性，此时就需要用到 WATCH 了。例如想要修改某个资源，但需要事先读取它的值，再基于这个值进行计算后写回，如果在这期间担心这个资源被其他客户端修改了，那么可以先 WATCH 这个资源，再读取、修改、写回，如果写回成功，说明其他客户端在这期间没有修改这个资源。如果其他客户端修改了这个资源，那么这个事务操作会返回失败，不会执行，从而保证了原子性。<br><br>细节比较多，如果不太好理解，最好亲自动手试一下。","like_count":221,"discussions":[{"author":{"id":1344735,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sYNQia23F7iaBKzdnO0CkYQIsOd8jARUqAFpAD9TE7esu2LGCCMpwmRlicSW5AT6GUTHQxVqMN6wia1HpR3ldf1zzw/132","nickname":"ctang","note":"","ucode":"A0CA5B6BEEAD59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325888,"discussion_content":"pipeline redis也不保证一次性接收和执行，想要一次性得靠lua脚本","likes_number":20,"is_delete":false,"is_hidden":false,"ctime":1605452597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1041795,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e5/83/ed10136c.jpg","nickname":"Null","note":"","ucode":"3D0AC488DAC27B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1344735,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sYNQia23F7iaBKzdnO0CkYQIsOd8jARUqAFpAD9TE7esu2LGCCMpwmRlicSW5AT6GUTHQxVqMN6wia1HpR3ldf1zzw/132","nickname":"ctang","note":"","ucode":"A0CA5B6BEEAD59","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557415,"discussion_content":"关于 pipeline 的说法 ，本人表示赞同。pipeline 只是将多个命令分批次发送到 redis server。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1647790091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325888,"ip_address":""},"score":557415,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1344735,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sYNQia23F7iaBKzdnO0CkYQIsOd8jARUqAFpAD9TE7esu2LGCCMpwmRlicSW5AT6GUTHQxVqMN6wia1HpR3ldf1zzw/132","nickname":"ctang","note":"","ucode":"A0CA5B6BEEAD59","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578129,"discussion_content":"就是节省了网络io次数吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656527148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325888,"ip_address":""},"score":578129,"extra":""}]},{"author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325852,"discussion_content":"我记得multi能保证原子性，但piple不保证，这是redis文档里写着的。piple只能减少网络消耗。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1605444197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1498155,"avatar":"https://static001.geekbang.org/account/avatar/00/16/dc/2b/b16aa5b6.jpg","nickname":"intelliYY","note":"","ucode":"375B28CE130CBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360972,"discussion_content":"没有回滚机制，是不能保证原子性的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616569988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325852,"ip_address":""},"score":360972,"extra":""},{"author":{"id":1470434,"avatar":"https://static001.geekbang.org/account/avatar/00/16/6f/e2/f3b05833.jpg","nickname":"A 拽丫头","note":"","ucode":"F875D99D18DF6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582153,"discussion_content":"piple  不能保证原子性,不代表执行  piple发送的命令时会被其他客户端的命令插入吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659269155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325852,"ip_address":"上海"},"score":582153,"extra":""}]},{"author":{"id":1504167,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f3/a7/15ee1f00.jpg","nickname":"憨憨","note":"","ucode":"B0174DE63247ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321925,"discussion_content":"Pipeline可以保证中间不会插入其他命令吗？如果是hash到多个实例保证不了吧，感觉exec也保证不了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1604651140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1504167,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f3/a7/15ee1f00.jpg","nickname":"憨憨","note":"","ucode":"B0174DE63247ED","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553938,"discussion_content":"Cluster不允许跨slots，multi可以保证中间不执行其它命令的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646137472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321925,"ip_address":""},"score":553938,"extra":""}]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371750,"discussion_content":"pipeline不保证原子，lua保证","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1619952169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578130,"discussion_content":"lua也没法回滚  能保证正向原子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656527204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":371750,"ip_address":""},"score":578130,"extra":""}]},{"author":{"id":1344535,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqOn7k48KXia5rf0eXpzv2EGtqGibz3eNb8QnL8X72uia0g1rBwzXef4dV2JEdz3r4bu9GC1FLIeic4UA/132","nickname":"Lee","note":"","ucode":"6B8D59A0B1A1A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545848,"discussion_content":"“RDB 不会在事务执行时执行”，这句话是基于什么才这么保证的？不理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642065614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1409466,"avatar":"https://static001.geekbang.org/account/avatar/00/15/81/ba/b8ed949a.jpg","nickname":"纪神籽","note":"","ucode":"442F0120F98894","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1344535,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqOn7k48KXia5rf0eXpzv2EGtqGibz3eNb8QnL8X72uia0g1rBwzXef4dV2JEdz3r4bu9GC1FLIeic4UA/132","nickname":"Lee","note":"","ucode":"6B8D59A0B1A1A9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557216,"discussion_content":"会不会是rdb得由主线程fork，所以主线程执行事务时rdb是不会被启动的。如果rdb在执行事务前开始了，事务执行的命令也不会被记录rdb。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1647699492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545848,"ip_address":""},"score":557216,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1344535,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqOn7k48KXia5rf0eXpzv2EGtqGibz3eNb8QnL8X72uia0g1rBwzXef4dV2JEdz3r4bu9GC1FLIeic4UA/132","nickname":"Lee","note":"","ucode":"6B8D59A0B1A1A9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578131,"discussion_content":"主线程这一次事务还没搞完, 哪有时间去fork子线程rdb啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656527260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545848,"ip_address":""},"score":578131,"extra":""},{"author":{"id":1470434,"avatar":"https://static001.geekbang.org/account/avatar/00/16/6f/e2/f3b05833.jpg","nickname":"A 拽丫头","note":"","ucode":"F875D99D18DF6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1344535,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqOn7k48KXia5rf0eXpzv2EGtqGibz3eNb8QnL8X72uia0g1rBwzXef4dV2JEdz3r4bu9GC1FLIeic4UA/132","nickname":"Lee","note":"","ucode":"6B8D59A0B1A1A9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582155,"discussion_content":"因为 rdb的 生成过程跟事务执行没有任何关系，所以不能保证事务在执行是就一定会执行 rdb生成，反之也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659269296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":545848,"ip_address":"上海"},"score":582155,"extra":""}]},{"author":{"id":2764938,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/30/8a/41a1fd6a.jpg","nickname":"大大的沙包","note":"","ucode":"0A2CB16F90ECF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407378,"discussion_content":"看了老师的课程，再结合K神的补充，获益良多，感谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634994619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376486,"discussion_content":"watch能确保操作的时候一定收到修改消息吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622162540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1364986,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/eOb0Z9PVwFnfZthnxvYzL3uIoXZXsDZHaZQS97beFNyqVskWEeumxputYTAUGLqsuWG1f9ApV8c1BaXHkMibIRg/132","nickname":"Cydeer","note":"","ucode":"5E6DC0909D5916","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359476,"discussion_content":"那么Redis释放锁的操作是不是也可以使用WATCH+事务的方式来实现了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616206861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":2452377,"avatar":"","nickname":"朱庆龙","note":"","ucode":"9E0F5B2AA013AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364986,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/eOb0Z9PVwFnfZthnxvYzL3uIoXZXsDZHaZQS97beFNyqVskWEeumxputYTAUGLqsuWG1f9ApV8c1BaXHkMibIRg/132","nickname":"Cydeer","note":"","ucode":"5E6DC0909D5916","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365946,"discussion_content":"redis释放锁需要保证的是原子性，watch+事务保证隔离性，所以应该不可以","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1617930502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":359476,"ip_address":""},"score":365946,"extra":""},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364986,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/eOb0Z9PVwFnfZthnxvYzL3uIoXZXsDZHaZQS97beFNyqVskWEeumxputYTAUGLqsuWG1f9ApV8c1BaXHkMibIRg/132","nickname":"Cydeer","note":"","ucode":"5E6DC0909D5916","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371749,"discussion_content":"WATCH+事务 可以实现乐观锁","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1619951983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":359476,"ip_address":""},"score":371749,"extra":""},{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364986,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/eOb0Z9PVwFnfZthnxvYzL3uIoXZXsDZHaZQS97beFNyqVskWEeumxputYTAUGLqsuWG1f9ApV8c1BaXHkMibIRg/132","nickname":"Cydeer","note":"","ucode":"5E6DC0909D5916","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377467,"discussion_content":"对于一个资源操作为读取、修改、写回这种场景，如果需要保证事物的原子性，此时就需要用到 WATCH 了。\n\n例如想要修改某个资源，但需要事先读取它的值，再基于这个值进行计算后写回，如果在这期间担心这个资源被其他客户端修改了，那么可以先 WATCH 这个资源，再读取、修改、写回，如果写回成功，说明其他客户端在这期间没有修改这个资源。\n\n如果其他客户端修改了这个资源，那么这个事务操作会返回失败，不会执行，从而保证了原子性。\n\n\n\n上面是 k 神的回复，对 RMW，使用 WATCH 是能保证原子性，那释放分布式锁，应该也是能保证原子性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622679039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":359476,"ip_address":""},"score":377467,"extra":""}]},{"author":{"id":1101762,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/c2/a5b3ceaf.jpg","nickname":"helloworld","note":"","ucode":"003700A99A910B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349607,"discussion_content":"课代表, 请教下:\n执行命令队列中的命令时, 这些命令还没执行完, 此时 Redis 宕机了.如果开启了 AOF, Redis 重启后,队列中未被执行的命令还能自动被执行吗,还是说需要再次手动执行 exec?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613380090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1048367,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/2f/172b942b.jpg","nickname":"扬帆起航","note":"","ucode":"708B686F19B8DE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1101762,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/c2/a5b3ceaf.jpg","nickname":"helloworld","note":"","ucode":"003700A99A910B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539189,"discussion_content":"不能，还没执行完也就还没写AOF，Redis是先执行命令再写AOF，重启用AOF文件恢复时，aof文件是没有这些命令的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639638191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":349607,"ip_address":""},"score":539189,"extra":""}]},{"author":{"id":2107375,"avatar":"https://static001.geekbang.org/account/avatar/00/20/27/ef/a7f94eda.jpg","nickname":"Jerry You","note":"","ucode":"679A44B505482F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328614,"discussion_content":"watch主要是保证了事务的隔离性， 原子性需要单独分场景讨论的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606195058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2120877,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/ad/3934e3cc.jpg","nickname":"新年快乐啊","note":"","ucode":"50811438BFAFA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320533,"discussion_content":"课代表请教个问题，你的评论描述：\n\n“例如想要修改某个资源，但需要事先读取它的值，再基于这个值进行计算后写回，如果在这期间担心这个资源被其他客户端修改了，那么可以先 WATCH 这个资源，再读取、修改、写回，如果写回成功，说明其他客户端在这期间没有修改这个资源。如果其他客户端修改了这个资源，那么这个事务操作会返回失败，不会执行，从而保证了原子性。”\n\n这个过程不是在一个“事务 + pipeline”操作里面吗，这是一个原子操作吗？如果是的话其他客户端请求应该就不能修改到这个资源吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604392590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":7,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2120877,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/ad/3934e3cc.jpg","nickname":"新年快乐啊","note":"","ucode":"50811438BFAFA5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320536,"discussion_content":"\n读取你得拿回数据到客户端，所以读取、修改、写回没办法做成一个事务。所以才需要先Watch，后修改的时候如果发现被别人改了，自己就放弃掉此次修改。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1604393347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320533,"ip_address":""},"score":320536,"extra":""},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":324758,"discussion_content":"但watch必须要配合事务使用吧，所以你这个需求还是没法实现啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605166977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320536,"ip_address":""},"score":324758,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":324780,"discussion_content":"你测试下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605169492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":324758,"ip_address":""},"score":324780,"extra":""}]}]},{"had_liked":false,"id":258125,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1604307006,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"134748293182","product_id":100056701,"comment_content":"\t• 原子性就是一批操作，要不全部完成，要不一个也不执行。<br>\t• 原子性的结果就是中间结果对外不可见，如果中间结果对外可见，则一致性就不会得到满足（比如操作）。<br>\t• 而隔离性，指一个事务内部的操作及使用的数据对正在进行的其他事务是隔离的，并发执行的各个事务之间不能互相干扰，正是它保证了原子操作的过程中，中间结果对其它事务不可见。<br><br>本文在讨论一致性的时候，说到“ 命令入队时没报错，实际执行时报错在这种情况下，有错误的命令不会被执行，正确的命令可以正常执行，也不会改变数据库的一致性。”，我觉得这一点是存疑的，不保证原子性就保证不了一致性。比如转账操作，扣减转出账户的操作成功，增加转入账户的操作失败，则原子性和一致性都被破坏。<br>","like_count":32,"discussions":[{"author":{"id":1946227,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF1c2h1dCWAkdvs049lb3y7vzIicvv2kZOZwEFpUyhxmmehdpVicWGBaSsGv2TPkuastTW0MgxoLxg/132","nickname":"吕宁博","note":"","ucode":"A37F7351629EC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385232,"discussion_content":"显然大家对关系型数据库ACID的C没理解透彻。C是通过用户自定义的一系列“数据类型、约束、触发器”等保证的。就拿银行取钱来说，如果用户没设置check(balance>=0)，即使最终因为各种原因导致balance<0，那也没违反C。数据库是在一定的系统+用户规则下运行的，只要没违反规则，就是保证了C。\n\n数据库只是个软件，理解C的时候不要把现实世界的规则强加给它，除非你明确告诉它规则（数据类型、约束、触发器），否则它就是一个满足前后一致性状态规则的C。\n\n这样理解C比较简单：我（数据库）管你balance是不是小于0，你又没告诉我（设置check），那我小于0违法了吗？","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1626949237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1019744,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/60/be0a8805.jpg","nickname":"陈迪","note":"","ucode":"1A64122CC47337","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1946227,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF1c2h1dCWAkdvs049lb3y7vzIicvv2kZOZwEFpUyhxmmehdpVicWGBaSsGv2TPkuastTW0MgxoLxg/132","nickname":"吕宁博","note":"","ucode":"A37F7351629EC4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581871,"discussion_content":"很对。redis相比关系型数据库，使用者能加的约束很少，相应的redis一致性就容易满足。业务上的一致性编码在业务应用的逻辑，redis帮不到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659056018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":385232,"ip_address":"北京"},"score":581871,"extra":""}]},{"author":{"id":1768852,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/fd/94/8704d2b0.jpg","nickname":"spoofer","note":"","ucode":"6723F64ACC3F27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347110,"discussion_content":"不要听作者就是了，你的理解是对的","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1612153302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275690,"avatar":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","nickname":"cp★钊","note":"","ucode":"6B86D4D538BDF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334336,"discussion_content":"+1，我看文章的时候也觉得这个一致性描述有问题。aid是过程，c是结果，如果原子性和隔离性没法保证，一致性也就没法保证。中间态达不到一致性","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1607826250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324743,"discussion_content":"准确说ACID这个概念就有点问题，原子性和一致性本来就是一个东西，这个问题在《数据密集型应用》里有提到","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605164286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2277794,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c1/a2/27c74724.jpg","nickname":"醉清风","note":"","ucode":"16A91D2DDCA6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":332702,"discussion_content":"“ensuring the consistency is the responsibility of user, not DBMS&#39;也出自这本书；所谓一致性对数据库来说，从一个正确的状态迁移到另外一个正确的状态；对数据库来说，“正确的状态&#34; ：我就看你有没有违反一致性约束，没有违反约束，我就认为这个操作是正确的，返回给用户的代码也是执行成功的标识。&#34;正确的命令可以正常执行，也不会改变数据库的一致性&#34;，前提用户已经认为是正确的命令，所以这句话没毛病啊","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607318153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":324743,"ip_address":""},"score":332702,"extra":""},{"author":{"id":1016575,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/82/ff/00e7614e.jpg","nickname":"robyy","note":"","ucode":"773337C9942A7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2277794,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c1/a2/27c74724.jpg","nickname":"醉清风","note":"","ucode":"16A91D2DDCA6AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352877,"discussion_content":"https://www.zhihu.com/question/31346392 这里的解释和你的一致","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614874146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332702,"ip_address":""},"score":352877,"extra":""}]},{"author":{"id":2076283,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/7b/47200692.jpg","nickname":"贺子","note":"","ucode":"A64DC9D9CF7CCD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404026,"discussion_content":"赞同你说的，我认为无法保证原子性，就不能保证一致性，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634211788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1257945,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/d9/1a748694.jpg","nickname":"不是党员","note":"","ucode":"1C8DD42D693FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377631,"discussion_content":"过去这么久了，到底是写对了还是写错了，还是怎么思考的到现在也没有个结论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622734107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","nickname":"neohope","note":"","ucode":"C0268F6E7E2B6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350171,"discussion_content":"同存疑。比如，A转账给B100元，分2条命令执行：A减少100元，B增加100元。结果A扣钱了，B增加执行失败。从业务层面讲，哪里一致了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613731809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1303713,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","nickname":"25ma","note":"","ucode":"AB5435B9DB52C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323074,"discussion_content":"是啊，感觉这样已经失去事务原本应有的意义了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604883467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2273610,"avatar":"https://static001.geekbang.org/account/avatar/00/22/b1/4a/3ee1c957.jpg","nickname":"yuyu","note":"","ucode":"425F15F0A86B46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320818,"discussion_content":"我也有这个疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604484073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257517,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1604019669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57438594517","product_id":100056701,"comment_content":"redis开启RDB，因为RDB不会在事务执行的时候执行，所以是可以保证原子性的","like_count":13},{"had_liked":false,"id":268606,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1608271232,"is_pvip":true,"replies":[{"id":"97656","content":"官网是个非常好的学习地方 :)","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608596565,"ip_address":"","comment_id":268606,"utype":1}],"discussion_count":3,"race_medal":2,"score":"44557944192","product_id":100056701,"comment_content":"Redis 为什么不支持事务的回滚？可以参考下官网的解释：https:&#47;&#47;redis.io&#47;topics&#47;transactions ","like_count":10,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511987,"discussion_content":"官网是个非常好的学习地方 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608596565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2061045,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/72/f5/35f2f763.jpg","nickname":"路小鹿","note":"","ucode":"331F70041CE8DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574902,"discussion_content":"原文：\nWhat about rollbacks? \nRedis does not support rollbacks of transactions since supporting rollbacks would have a significant impact on the simplicity and performance of Redis.\nRedis 不支持事务回滚，因为支持回滚会对 Redis 的简单性和性能产生重大影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654426652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2104856,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","nickname":"liaomars","note":"","ucode":"4FCA97EE9FB57D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545307,"discussion_content":"作者说为了保持简单、快速 不支持rollback","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641899686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265881,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1607060754,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35966799122","product_id":100056701,"comment_content":"1、作者讲了什么？<br>作者通过本文讨论，Redis 是否可以保证 ACID 的事务功能。事务是对数据进行一系列操作。<br>2、作者是怎么把事情说明白的？<br>作者先讨论 事务ACID 属性的要求：然后作者说明了 Redis 的 API ：MULTI 和 EXEC 是如何完成事务的；完成说明后，作者开始针对事务的每个特性，讨论 Redis 是否已经完成达成。<br>2.1 原子性。原子性的保证分三种情况<br>2.1.1 队列中有命令存在错误，队列清空；（可保证原子）<br>2.1.2 队列中命令到执行的时候才被发现有错误，不会滚，执行多少算多少；（不保证原子）<br>2.1.3 EXEC 时， Redis 实例发生故障。这个涉及到日志，AOF 的 redis-check-aof 可以发现没执行完成的操作，进而清除；（可以保证原子）<br>2.2 一致性。作者分三种情况说明，并且确认都可以提供一致性。<br>2.3 隔离性。WATCH 机制提供事务隔离性。<br>2.4 持久性。Redis 任何时候都无法提供持久性保障。<br><br>3、为了讲明白，作者讲了哪些要点？哪些是亮点？<br>在 Redis 的事务上，作者通过 三种情况 ，分别说明了 Redis 是否满足 ACID 特性，这个划分方法是一个亮点；<br><br>4、对于作者所讲，我有哪些发散性思考？<br>Redis 始终坚持是一个高性能的内存数据库，并没有因为事务的重要性而放弃这一个宗旨，故在内存中实现了隔离性，一致性，有条件原子性，不实现持久性。这个也可以放映出 Redis 的定位和一般数据库 MySQL 是不一样的；<br><br>5、在未来哪些场景，我可以使用它？<br>在高并发，竞争环境下，需要保证数据正确时，可以考虑 Redis 的事务性实现。","like_count":8,"discussions":[{"author":{"id":1236156,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/bc/3c5a1634.jpg","nickname":"Loyalty","note":"","ucode":"C23EE6878580C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409802,"discussion_content":"非凡哥换了个ID回来了?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635514260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260805,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1649057,"ip_address":"","ucode":"4F42DAA5DB5C38","user_header":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","comment_is_top":false,"comment_ctime":1605110604,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"23079947084","product_id":100056701,"comment_content":"“错误的命令不会被执行，正确的命令可以正常执行，也不会改变数据库的一致性”这个怎么就没有改变数据库的一致性了呢？我是菜鸟一枚，有大神指点一二吗？","like_count":5,"discussions":[{"author":{"id":1214582,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","nickname":"youngitachi","note":"","ucode":"88717CA8B8ED64","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351143,"discussion_content":"这里的数据库不是MySQL那种数据库，要理解成AOF日志和RDB这些，只要这些磁盘文件和内存中的结果保持一致就具有一致性。很明显，“错误的命令不会被执行，正确的命令可以正常执行“这样执行完了之后，内存和日志文件的内容是一致的。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1614165333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1214582,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","nickname":"youngitachi","note":"","ucode":"88717CA8B8ED64","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":351187,"discussion_content":"谢谢大佬，终于理解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614173901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351143,"ip_address":""},"score":351187,"extra":""},{"author":{"id":1257945,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/d9/1a748694.jpg","nickname":"不是党员","note":"","ucode":"1C8DD42D693FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1214582,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","nickname":"youngitachi","note":"","ucode":"88717CA8B8ED64","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":377635,"discussion_content":"我觉得您说的不对，磁盘文件与内存文件中的内容保持一致，这并不满足 ACID 中的一致性，ACID 中 C 的原文逻辑为：Ensuring the consistency is the responsibility of user, not DBMS. DBMS assumes that consistency holds for each transaction. 也就是说一致性是由开发人员说了算的，不是数据库说了算的，A 向 B 转账 1000 元，A 的账户余额减 1000 元，B 的账户还没来得及增加 1000 元就宕机了，这满足一致性吗？不一定，开发人员觉得满足就满足，数据库可不在乎，但是作为实际产品会要求 B 的账户余额必须同时增加 1000 元才满足一致性，这样产品才能用，放到 Redis 中同理，A 的账户余额减 1000 元，B 的账户并未增加 1000 元，未满足原子性，同理系统设计的就是 A + 1000 的同时 B - 1000，Redis 没能按预期实现功能，就是不满足一致性，所以我不理解作者这里是出于什么观点考虑的，等后续吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622734451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351143,"ip_address":""},"score":377635,"extra":""},{"author":{"id":1236156,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/bc/3c5a1634.jpg","nickname":"Loyalty","note":"","ucode":"C23EE6878580C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1214582,"avatar":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","nickname":"youngitachi","note":"","ucode":"88717CA8B8ED64","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":410607,"discussion_content":"我觉得你说的是最正确的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635738239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351143,"ip_address":""},"score":410607,"extra":""}]}]},{"had_liked":false,"id":257549,"user_name":"与君共勉","can_delete":false,"product_type":"c1","uid":1763046,"ip_address":"","ucode":"1FB5EBFCF510A1","user_header":"","comment_is_top":false,"comment_ctime":1604025777,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"23078862257","product_id":100056701,"comment_content":"AOF如果开启always模式不是可以保证数据不丢失吗？为啥也保证不了持久性呢？","like_count":5,"discussions":[{"author":{"id":1928441,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cfNtHoAbHvia1O0jIopiafYbnppEPiawgicKa8vdI2FxMMEdqORB4VLzkYTuGJGA7HibustnU0hDTOD7YSDAWuxhmrg/132","nickname":"Geek_299a34","note":"","ucode":"79AECE06F08E87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319505,"discussion_content":"AOF是“写后”日志，如果刚写完还没来得及写日志就宕机了，就会丢失刚写的这一个数据。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1604040796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1763046,"avatar":"","nickname":"与君共勉","note":"","ucode":"1FB5EBFCF510A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1928441,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cfNtHoAbHvia1O0jIopiafYbnppEPiawgicKa8vdI2FxMMEdqORB4VLzkYTuGJGA7HibustnU0hDTOD7YSDAWuxhmrg/132","nickname":"Geek_299a34","note":"","ucode":"79AECE06F08E87","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319705,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604106832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319505,"ip_address":""},"score":319705,"extra":""},{"author":{"id":1977474,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","nickname":"Reborn 2.0","note":"","ucode":"BA506E7455D91C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1928441,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cfNtHoAbHvia1O0jIopiafYbnppEPiawgicKa8vdI2FxMMEdqORB4VLzkYTuGJGA7HibustnU0hDTOD7YSDAWuxhmrg/132","nickname":"Geek_299a34","note":"","ucode":"79AECE06F08E87","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327267,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605778616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319505,"ip_address":""},"score":327267,"extra":""},{"author":{"id":1578167,"avatar":"","nickname":"Shadow","note":"","ucode":"EADC6718D0E5F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1928441,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cfNtHoAbHvia1O0jIopiafYbnppEPiawgicKa8vdI2FxMMEdqORB4VLzkYTuGJGA7HibustnU0hDTOD7YSDAWuxhmrg/132","nickname":"Geek_299a34","note":"","ucode":"79AECE06F08E87","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363281,"discussion_content":"如果开启了always，没将日志刷新到磁盘之前，客户端的这个写入操作也不会返回吧。这种也不能认为是写完吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617161524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319505,"ip_address":""},"score":363281,"extra":""}]}]},{"had_liked":false,"id":258112,"user_name":"Lemon","can_delete":false,"product_type":"c1","uid":2136414,"ip_address":"","ucode":"E52BB361B69825","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/5e/33481a74.jpg","comment_is_top":false,"comment_ctime":1604302476,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18784171660","product_id":100056701,"comment_content":"老师，我对Redis能保证一致性这点表示困惑：在命令入队时没有报错，实际执行时报错的情况下，如果A给B转账，A的账户被扣钱了，此时命令出错，B账户并没有增加转账金额，这不就导致了事务前后的数据不一致了吗？","like_count":4,"discussions":[{"author":{"id":1547864,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9e/58/14f8e862.jpg","nickname":"zq","note":"","ucode":"F5F054099DE953","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352552,"discussion_content":"命令出错，入不了队","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614768190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2212143,"avatar":"https://static001.geekbang.org/account/avatar/00/21/c1/2f/5c8167aa.jpg","nickname":"油纸伞","note":"","ucode":"C2655B9F8874E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338195,"discussion_content":"是的，redis 他没有回滚机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609211284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2029485,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","nickname":"数学汤家凤","note":"","ucode":"DE84E777C384AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324363,"discussion_content":"我也有这个疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605095792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257519,"user_name":"꧁子华宝宝萌萌哒꧂","can_delete":false,"product_type":"c1","uid":1165662,"ip_address":"","ucode":"3E5BBAF15064B6","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/5e/b79e6d5d.jpg","comment_is_top":false,"comment_ctime":1604019989,"is_pvip":false,"discussion_count":6,"race_medal":1,"score":"18783889173","product_id":100056701,"comment_content":"老师，在上一节中，分布式锁重要的就是保证操作的原子性，既然事物能保证原子性，为啥上一节中没有提到用事物来做呢？","like_count":4,"discussions":[{"author":{"id":2334413,"avatar":"https://static001.geekbang.org/account/avatar/00/23/9e/cd/947f20ee.jpg","nickname":"李晨","note":"","ucode":"E5A2C06D3BC62F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339934,"discussion_content":"这其实是两个尺度问题。在上一节中的并发控制的原子性是在cpu层面叙述的，指的是这些指令在执行过程中不会被中断，即不会发生cpu切换（即此时不会被其他线程所干扰，直到它执行完毕）。这一节中事务的原子性是在命令执行层面上叙述的，指的是这些命令执行过程中要么全部成功，要么全部失败（此时cpu是可能发生线程切换的）。\n本质上是两个问题，只不过都用了原子这一名字来描述。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1609845473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1538063,"avatar":"https://static001.geekbang.org/account/avatar/00/17/78/0f/f4e012a1.jpg","nickname":"掐你小77","note":"","ucode":"6FFAB8014A6374","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2334413,"avatar":"https://static001.geekbang.org/account/avatar/00/23/9e/cd/947f20ee.jpg","nickname":"李晨","note":"","ucode":"E5A2C06D3BC62F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349417,"discussion_content":"上一节中的lua脚本或原子操作命令（INCR、DECR）执行过程中不会进行cpu切换么？cpu的切换是根据时钟来的吧，执行若干时钟后进行线程切换。我认为cpu切换和原子性是两个概念，原子性是指服务在cpu切换恢复运行后仍能继续执行刚才未执行完的命令，并且执行这些命令过程中该服务的其他线程是不能进行并发执行这些命令（互斥性），最后执行命令失败能回滚到执行前的状态，达到要么全部执行成功全部执行失败的效果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613187407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":339934,"ip_address":""},"score":349417,"extra":""}]},{"author":{"id":1855112,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIYj6Zv3ibicLebxo7lsPMEwpBynHkYp8pLc3FcltUfmOBSRxpmicEwIAgP9OvSKnGGdaxwsZ7yiciaSsQ/132","nickname":"冯磊","note":"","ucode":"4FFB8B984269FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339370,"discussion_content":"分布式锁针对的是并发访问控制问题，而事务和并发是独立的两个问题","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1609646953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370962,"discussion_content":"我看上一篇也有这个疑问，为什么不讲mulit和exec呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619594830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020629,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/d5/699384a0.jpg","nickname":"yeek","note":"","ucode":"A1C71023113CB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319662,"discussion_content":"拿到锁之后，不一定是更新redis中的数据，所以不是使用redis事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604072955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1165662,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/5e/b79e6d5d.jpg","nickname":"꧁子华宝宝萌萌哒꧂","note":"","ucode":"3E5BBAF15064B6","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1020629,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/d5/699384a0.jpg","nickname":"yeek","note":"","ucode":"A1C71023113CB9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320475,"discussion_content":"事物不一定需要更新数据啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604376642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319662,"ip_address":""},"score":320475,"extra":""}]}]},{"had_liked":false,"id":257522,"user_name":"JohnReese","can_delete":false,"product_type":"c1","uid":1559934,"ip_address":"","ucode":"70630079AB8124","user_header":"","comment_is_top":false,"comment_ctime":1604020372,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"14488922260","product_id":100056701,"comment_content":"那请问老师，Multi 命令 和 Lua脚本 的功能上有什么区别嘛？（似乎都是保证‘原子性’地执行多命令？）","like_count":3,"discussions":[{"author":{"id":1504848,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f6/50/508dab4c.jpg","nickname":"一个人的糖","note":"","ucode":"669AB8C03403C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319439,"discussion_content":"lua脚本最后使用的是multi。\nIn this replication mode, while Lua scripts are executed, Redis collects all the commands executed by the Lua scripting engine that actually modify the dataset. When the script execution finishes, the sequence of commands that the script generated are wrapped into a MULTI / EXEC transaction and are sent to replicas and AOF.\nhttps://redis.io/commands/eval","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1604030100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1504848,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f6/50/508dab4c.jpg","nickname":"一个人的糖","note":"","ucode":"669AB8C03403C5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324756,"discussion_content":"你这个说的不全哦，关于原子性，文档里是有这么一段：\nAtomicity of scripts\nRedis uses the same Lua interpreter to run all the commands. Also Redis guarantees that a script is executed in an atomic way: no other script or Redis command will be executed while a script is being executed. This semantic is similar to the one of MULTI / EXEC. From the point of view of all the other clients the effects of a script are either still not visible or already completed.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605166720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319439,"ip_address":""},"score":324756,"extra":""}]},{"author":{"id":1368768,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c0/e7a59706.jpg","nickname":"chongsheng","note":"","ucode":"859DF328FCA608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576399,"discussion_content":"MULTI/EXEC 和 Lua脚本都能实现原子操作，但使用场景不同。Lua场景多一点，对于需要加入业务逻辑判断的情况，Lua更灵活，MULTI做不到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655520171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374217,"discussion_content":"肯定有区别啊，举个分布式锁的例子，解锁操作，lua可以进行老师之前讲的解锁的三步走，get check set，这个multi就不行呀，没办法搞。其次上面几位同学拿来原文，我觉得思路很好，从源头触发寻求解答，还是建议再多结合实际case以及上下文给一些全面的解读。针对lua和multi其实从最根本上，原子性这，理念是相同的，一批命令串，不过lua是基于lua解释器进行优化处理，能够更加支持丰富的批量处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621066553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2306794,"avatar":"https://static001.geekbang.org/account/avatar/00/23/32/ea/dbfc5794.jpg","nickname":"彭方亮。","note":"","ucode":"A72E626B1BF514","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360173,"discussion_content":"在这种复制模式下，当Lua脚本执行时，Redis会收集Lua脚本引擎执行的所有修改数据集的命令。当脚本执行完成时，脚本生成的命令序列被包装到一个MULTI / EXEC事务中，并被发送到replicas和AOF。\n\n原子性的脚本\nRedis使用相同的Lua解释器来运行所有的命令。同时，Redis保证脚本以原子方式执行:在执行脚本时，不会执行其他脚本或Redis命令。这个语义类似于MULTI / EXEC的语义。从所有其他客户端的角度来看，脚本的效果要么还不可见，要么已经完成。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616381900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622696,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","nickname":"一格状语","note":"","ucode":"EBA9ED5F97416D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336267,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608542820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257494,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1604013020,"is_pvip":true,"discussion_count":3,"race_medal":5,"score":"14488914908","product_id":100056701,"comment_content":"老师，在集群模式下，ACID是个什么情况？","like_count":3,"discussions":[{"author":{"id":1258434,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/c2/e135113a.jpg","nickname":"mutexlock","note":"","ucode":"FCE8B3AD122CEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325305,"discussion_content":"集群模式如果事务两次操作的key在不同的分片是什么情况","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605267422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275507,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/73/691fda57.jpg","nickname":"Max","note":"","ucode":"D72A417585113F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368471,"discussion_content":"有多种情况，如果key都在当前执行节点的话，是可以执行的。如果key分布在不同的节点上，则会执行在此节点的key，然后对其他的key返回moved。这是17年的博客，https://blog.csdn.net/weiythi/article/details/77603145。 不过，我自己上个月在最新版本上测试还是一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618723975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284610,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/02/1c919306.jpg","nickname":"周兵","note":"","ucode":"9A9FE5EE4FD3A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338813,"discussion_content":"集群模式下事物的原子性和一致性是不是都无法保证？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609387029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309198,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1629983075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5924950371","product_id":100056701,"comment_content":"老师redis的pipline 可以保证执行命令结果集按顺序返回么：具体操作如下：<br>Pipeline pipeline = jedis.pipelined();<br>            Map&lt;Integer,PrizeConfig&gt; day2PrizeConfigMap = new HashMap&lt;&gt;();<br>            Map&lt;Integer,redis.clients.jedis.Response&lt;Set&lt;Tuple&gt;&gt;&gt; day2PrizeCache = new HashMap&lt;&gt;();<br>            for (Integer dayIndex : days) {<br>                String cacheKey = String.format(SignInConstants.PRIZE_VERSION_KEY,<br>                        dayIndex);<br>                redis.clients.jedis.Response&lt;Set&lt;Tuple&gt;&gt; prizeConfigsResponse  =<br>                        pipeline.zrevrangeByScoreWithScores(cacheKey, version, 0);<br>                day2PrizeCache.put(dayIndex, prizeConfigsResponse);<br>            }<br>            pipeline.sync();<br>&#47;&#47; 我的问题是 day2PrizeCache 这个map中的 dayIndex 和 返回值prizeConfigsResponse 可以对应关系有可能发生错位吗？","like_count":1},{"had_liked":false,"id":303735,"user_name":"吕宁博","can_delete":false,"product_type":"c1","uid":1946227,"ip_address":"","ucode":"A37F7351629EC4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF1c2h1dCWAkdvs049lb3y7vzIicvv2kZOZwEFpUyhxmmehdpVicWGBaSsGv2TPkuastTW0MgxoLxg/132","comment_is_top":false,"comment_ctime":1626949520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5921916816","product_id":100056701,"comment_content":"显然大家对关系型数据库ACID的C没理解透彻。C是通过用户自定义的一系列“数据类型、约束、触发器”等保证的。就拿银行取钱来说，如果用户没设置check(balance&gt;=0)，即使最终因为各种原因导致balance&lt;0，那也没违反C。数据库是在一定的系统+用户规则下运行的，只要没违反规则，就是保证了C。<br><br>数据库只是个软件，理解C的时候不要把现实世界的规则强加给它，除非你明确告诉它规则（数据类型、约束、触发器），否则它就是一个满足前后一致性状态规则的C。<br><br>这样理解C比较简单：我（数据库）管你balance是不是小于0，你又没告诉我（设置check），那我小于0违法了吗？","like_count":1},{"had_liked":false,"id":357794,"user_name":"小白","can_delete":false,"product_type":"c1","uid":1202143,"ip_address":"上海","ucode":"717B408EDC07FD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Z8t0JKFjnmdx4s4wuRePZXRL2L9awEpicp0rjT9rfXmZKOBIleZuOC86OzZE0tSdkfy3LWWa7YU67MicWeiaFd3jA/132","comment_is_top":false,"comment_ctime":1663644492,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663644492","product_id":100056701,"comment_content":"文中的例子 DISCARD ，这个起到的效果不是和回滚的效果是一样的嘛，为什么不能算回滚？","like_count":0},{"had_liked":false,"id":356769,"user_name":"Geek_b14c55","can_delete":false,"product_type":"c1","uid":2027632,"ip_address":"浙江","ucode":"C98EAEC045F13D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MOuCWWOnoQjOr8KjicQ84R7xu6DRcfDv3VAuHseGJ1gxXicKJboA24vOcrcJickTJPwFAU38VuwCGGkGq7f8WkTIg/132","comment_is_top":false,"comment_ctime":1662565137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662565137","product_id":100056701,"comment_content":"如果使用了rdb机制，事务的原子性没办法保证，因为已经有部分数据落盘了，所以没办法保证原子性","like_count":0},{"had_liked":false,"id":354031,"user_name":"飞龙","can_delete":false,"product_type":"c1","uid":2276763,"ip_address":"广东","ucode":"EC83FE73985491","user_header":"https://static001.geekbang.org/account/avatar/00/22/bd/9b/366bb87b.jpg","comment_is_top":false,"comment_ctime":1660032355,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660032355","product_id":100056701,"comment_content":"我测试的结果貌似和有些例子不太一样，开启multi lpop a:stock;decr b:stock  exec   因为a:stock类型对不上报错，b:stock并没有执行。","like_count":0},{"had_liked":false,"id":353710,"user_name":"Geek_323a60","can_delete":false,"product_type":"c1","uid":2797976,"ip_address":"四川","ucode":"CDC276EC255411","user_header":"","comment_is_top":false,"comment_ctime":1659690752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659690752","product_id":100056701,"comment_content":"在使用 watch 机制后，若存在并发写多个变量的情况，在 watch 到变量发生变化后，停止事务执行前，已经做的修改会回滚吗","like_count":0},{"had_liked":false,"id":352548,"user_name":"zhoufeng","can_delete":false,"product_type":"c1","uid":1447741,"ip_address":"","ucode":"6F92F7866F9EB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKq0oQVibKcmYJqmpqaNNQibVgia7EsEgW65LZJIpDZBMc7FyMcs7J1JmFCtp06pY8ibbcpW4ibRtG7Frg/132","comment_is_top":false,"comment_ctime":1658753760,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1658753760","product_id":100056701,"comment_content":"既然redis能实现事务的隔离性，为什么在应对多客户端并发访问时，还需要争抢分布式锁呢？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585360,"discussion_content":"事务中只能执行Redis命令，而分布式锁拿到后可以做一些Redis以外的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661499963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343661,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1650972575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650972575","product_id":100056701,"comment_content":"越看评论越蒙","like_count":0},{"had_liked":false,"id":334741,"user_name":"伟","can_delete":false,"product_type":"c1","uid":2369399,"ip_address":"","ucode":"72C5C8D7F2A88F","user_header":"https://static001.geekbang.org/account/avatar/00/24/27/77/8493aa4a.jpg","comment_is_top":false,"comment_ctime":1645098541,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645098541","product_id":100056701,"comment_content":"可以","like_count":0},{"had_liked":false,"id":333039,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1644021279,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644021279","product_id":100056701,"comment_content":"能保证一致性隔离性<br>不能保证原子性，持久性","like_count":0},{"had_liked":false,"id":330601,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1344535,"ip_address":"","ucode":"6B8D59A0B1A1A9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqOn7k48KXia5rf0eXpzv2EGtqGibz3eNb8QnL8X72uia0g1rBwzXef4dV2JEdz3r4bu9GC1FLIeic4UA/132","comment_is_top":false,"comment_ctime":1642065232,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1642065232","product_id":100056701,"comment_content":"watch机制也不一定能完全保证隔离性吧！例如，watch也是离散时间内的监控，执行EXEC 命令过程中最后一刻，其他写请求对队列中的值做了修改，也是有问题的","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585357,"discussion_content":"Redis是单线程的，EXEC命令执行过程是判断是否被修改，如果没有则执行，这两步是原子性的不会穿插其他命令","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661499191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309109,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1629946230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629946230","product_id":100056701,"comment_content":"只是原子性的话是可以保证的,因为Redis并不会在执行事务期间进行快照,所以RDB只会在完成事务之后进行,对于原子性可以保证,持久性不会保证<br>","like_count":0},{"had_liked":false,"id":306700,"user_name":"大脸驴","can_delete":false,"product_type":"c1","uid":2671379,"ip_address":"","ucode":"051522665A47F0","user_header":"https://static001.geekbang.org/account/avatar/00/28/c3/13/d1519146.jpg","comment_is_top":false,"comment_ctime":1628672993,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1628672993","product_id":100056701,"comment_content":"关于一致性的说明，有点没理解，“情况二，命令入队时没报错，实际执行时报错”，这种情况下，如果有部分命令失败，另外一部分命令成功了，有两个问题，1.为什么这个不影响数据库的一致性；2.此时一致性，和原子性有什么差异；我理解的是此时，数据和预期不一致了，数据库一致性应该受到影响才对","like_count":0},{"had_liked":false,"id":296866,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1623206788,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623206788","product_id":100056701,"comment_content":"请问下，本文讨论的是单机模式下的事物机制吧？","like_count":0},{"had_liked":false,"id":286340,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617261779,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1617261779","product_id":100056701,"comment_content":"还是那个问题，为什么需要用 Redis 实现事务的 ACID ？<br><br>复习了一遍事务的 ACID 属性。<br><br>原子性 Atomicity：要么都做，要么都不做<br>一致性 Consistency：事务前后的数据保持一致<br>隔离性 Isolation：You Can You UP<br>持久性 Durability：数据修改必须落盘<br><br>Redis 是没有回滚机制的，通过 WATCH、MULTI、EXEC、DISCARD 四个命令，勉强实现了原子性、一致性和隔离性，因为是内存缓存，所以持久性是没法保证的。<br><br>关于课后题，如果使用 RDB 机制，在执行事务时，Redis 发生了故障，原子性应该是没有办法保证的，假设入队的操作命令没有错误，这个和文中例子里面的第三种情况类似，如果开启了 AOF，那么有可能可以保证原子性，但是如果只有 RDB，没有 AOF，那么应该是无法保证原子性的。<br><br>看了课代表的答案，很大概率应该是我错了，可能是我缺少了：RDB 不会在事务执行的时候执行，这个知识点。<br><br>另外课代表还补充了关于 Pipeline 的用法。","like_count":0},{"had_liked":false,"id":280616,"user_name":"杯水长情","can_delete":false,"product_type":"c1","uid":1072199,"ip_address":"","ucode":"1F7458C9BD2F8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/47/ed408307.jpg","comment_is_top":false,"comment_ctime":1614267744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614267744","product_id":100056701,"comment_content":"有个问题，集群情况下，执行事务，主节点突然故障，从机切换到主机，这时候是否可以保证原子性？","like_count":0},{"had_liked":false,"id":278821,"user_name":"lzh","can_delete":false,"product_type":"c1","uid":1336951,"ip_address":"","ucode":"C3D83DF4230109","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","comment_is_top":false,"comment_ctime":1613365747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613365747","product_id":100056701,"comment_content":"只有我一个人觉得redis事务不好用吗……ACID都保证不了，感觉在redis中设计这个事务也没啥必要，搜了一圈也没看到有什么大型项目用redis事务落地的业务场景","like_count":0},{"had_liked":false,"id":278366,"user_name":"21","can_delete":false,"product_type":"c1","uid":1981263,"ip_address":"","ucode":"585E4A0B4A2C55","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqEh8oGRUIETleoMRTKGPOib0fTueqNKXbrVfLgAYwwKKdd4BxEW25zJnbcgTfc2Q2rDd0ktiaiaxnJA/132","comment_is_top":false,"comment_ctime":1612918012,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1612918012","product_id":100056701,"comment_content":"Multi、exec是不是只是针对单机来说的，集群下还支持吗？","like_count":0,"discussions":[{"author":{"id":1368768,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c0/e7a59706.jpg","nickname":"chongsheng","note":"","ucode":"859DF328FCA608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576400,"discussion_content":"可以用hash tag的方式，将需要操作的key分布到同一个节点上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655520997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316926,"avatar":"https://static001.geekbang.org/account/avatar/00/14/18/3e/f8632713.jpg","nickname":"EveryDayIsNew","note":"","ucode":"776B81EF6830FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389671,"discussion_content":"肯定不支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629372543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277182,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1612312177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612312177","product_id":100056701,"comment_content":"类比关系型数据库，watch+事务算是解决更新丢失lost update和写偏序write skew的一个便利方案","like_count":0},{"had_liked":false,"id":271864,"user_name":"李晨","can_delete":false,"product_type":"c1","uid":2334413,"ip_address":"","ucode":"E5A2C06D3BC62F","user_header":"https://static001.geekbang.org/account/avatar/00/23/9e/cd/947f20ee.jpg","comment_is_top":false,"comment_ctime":1609845055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609845055","product_id":100056701,"comment_content":"根据WATCH指令的使用推测出Redis事务隔离级别应该是可重复读。","like_count":0},{"had_liked":false,"id":269145,"user_name":"丶峻","can_delete":false,"product_type":"c1","uid":2315320,"ip_address":"","ucode":"64437B96D17E71","user_header":"https://static001.geekbang.org/account/avatar/00/23/54/38/78518539.jpg","comment_is_top":false,"comment_ctime":1608538549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608538549","product_id":100056701,"comment_content":"有一个疑问，如果事务是一条条发送到服务端然后放到队列里，如果此时有两个事务在并发执行，那么队列中的顺序不就会乱掉吗","like_count":0},{"had_liked":false,"id":267836,"user_name":"前方的灯有点弱","can_delete":false,"product_type":"c1","uid":2058455,"ip_address":"","ucode":"5CEDBCF3DDC991","user_header":"https://static001.geekbang.org/account/avatar/00/1f/68/d7/29025f1f.jpg","comment_is_top":false,"comment_ctime":1607949505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607949505","product_id":100056701,"comment_content":"最好可以提前测试一下 命令是否会报错","like_count":0},{"had_liked":false,"id":266682,"user_name":"冷血的枭隼","can_delete":false,"product_type":"c1","uid":1058892,"ip_address":"","ucode":"0FF542D85B1120","user_header":"https://static001.geekbang.org/account/avatar/00/10/28/4c/4c767528.jpg","comment_is_top":false,"comment_ctime":1607436433,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1607436433","product_id":100056701,"comment_content":"情况二：命令入队时没报错，实际执行时报错<br>在这种情况下，有错误的命令不会被执行，正确的命令可以正常执行，也不会改变数据库的一致性。<br><br>这种的情况就是部分执行，但是，事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。  老师能不能解答下","like_count":0,"discussions":[{"author":{"id":1925194,"avatar":"","nickname":"萨如拉","note":"","ucode":"2E991BC5CE5E4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346563,"discussion_content":"如果没理解错的话，不是整块一致性，是执行的单条数据，对于执行的命令而言是一致性的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611993625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265650,"user_name":"猿飞日斩","can_delete":false,"product_type":"c1","uid":1668982,"ip_address":"","ucode":"9ABF88EAD3965C","user_header":"https://static001.geekbang.org/account/avatar/00/19/77/76/56740001.jpg","comment_is_top":false,"comment_ctime":1606971153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606971153","product_id":100056701,"comment_content":"老师好：<br>文中提到redis事务原子性的时候提到三种情况：<br>1.命令入队时就报错，会放弃事务执行，保证原子性；<br>2.命令入队时没报错，实际执行时报错，不保证原子性；<br>3.EXEC 命令执行时实例故障，如果开启了 AOF 日志，可以保证原子性。<br>如果lua脚本执行命令发生上述的第2种情况的时候，脚本中部分命令执行失败了，怎么处理的呢？<br>执行脚本命令如下：<br>redis.call(&quot;set&quot;, &quot;aa&quot;,&quot;aa&quot;);<br>redis.call(&quot;incr&quot;, &quot;aa&quot;); &#47;&#47;这里会报错<br>redis.call(&quot;set&quot;, &quot;bb&quot;,&quot;bb&quot;);<br>测试的结果：<br>命令会对错误命令报错，已经成功执行的命令不会回滚，错误命令后面的正确的命令不会被执行。<br>我的问题是：我们常说的lua脚本的原子性是指什么呢？","like_count":0},{"had_liked":false,"id":265646,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1606968800,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606968800","product_id":100056701,"comment_content":"Redis的ACID是伪的。<br>在事务里原子性和一致性都无法保证。<br>由于AOF的存在，持久性也无法保证。<br><br>如果用RDB持久性可以保证，这部分是因为RDB只会在事务执行结束以后执行。当事务没有执行完毕就宕机，RDB中是没有记录事务的结果的。","like_count":0,"discussions":[{"author":{"id":3180942,"avatar":"","nickname":"月明风清","note":"","ucode":"19848E5DB2CF66","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589492,"discussion_content":"乱说","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665042856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263204,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1606045396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606045396","product_id":100056701,"comment_content":"问：在执行事务时，如果 Redis 实例发生故障，而 Redis 使用了 RDB 机制，那么，事务的原子性还能得到保证吗？<br>答：原子性 是指 事务的多个操作要么都执行，要么都不执行。由于事务执行时，文中提到无法进行RDB持久化。因此事务的修改结果尚未被持久化，此时发生重启，RDB文件中并未包括事务中的所执行的操作。相当于 事务的多个操作都不执行，从而保证了原子性","like_count":0},{"had_liked":false,"id":263201,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1606043289,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1606043289","product_id":100056701,"comment_content":"“我们需要使用 redis-check-aof 工具检查 AOF 日志文件，这个工具可以把已完成的事务操作从 AOF 文件中去除。这样一来，我们使用 AOF 恢复实例后，事务操作不会再被执行，从而保证了原子性。”<br><br>这里是不是应该是 把未完成的事务操作 从AOF文件中去除呢？","like_count":0,"discussions":[{"author":{"id":1120844,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1a/4c/952608f4.jpg","nickname":"培根","note":"","ucode":"6C506B7D68BAE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567221,"discussion_content":"我也认为应该是未完成的事务中已执行的操作从AOF去除。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650859077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1257945,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/d9/1a748694.jpg","nickname":"不是党员","note":"","ucode":"1C8DD42D693FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377630,"discussion_content":"是不是忘了 AOF 日志是写执行命令再写日志的了？那些后面错误的命令还没来得及执行，也就没写到 AOF 日志，所以从 AOF 文件去除的都是已经执行过的命令","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622733994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261613,"user_name":"Mr.蜜","can_delete":false,"product_type":"c1","uid":1035257,"ip_address":"","ucode":"C911B81198B3F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","comment_is_top":false,"comment_ctime":1605444464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605444464","product_id":100056701,"comment_content":"按照课件中的例子，2个decr命令要保证都能扣减库存，如果其中只有其中一个库存够，而另一个不够扣减库存，这时候redis也无法保证原子性，如果要保证原子性，需要做更多的逻辑判断，从而也增加了性能开销。","like_count":0},{"had_liked":false,"id":261444,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1605338857,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605338857","product_id":100056701,"comment_content":"RDB不一定保证事务原子性：<br>若RDB文件中未包括该事务操作结果，恢复时，相当于事务全部未执行，保证原子性。<br>若RDB文件包含了该事务操作结果，恢复时，就不能保证原子性。事务执行前后数据也不一致。<br>是否包含事务操作结果，与事务执行和RDB快照生成时机有关，不能依赖于RDB。","like_count":0,"discussions":[{"author":{"id":1236156,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/bc/3c5a1634.jpg","nickname":"Loyalty","note":"","ucode":"C23EE6878580C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410598,"discussion_content":"事务执行时不会生成RDB文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635737239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258166,"user_name":"徐小熊","can_delete":false,"product_type":"c1","uid":2120879,"ip_address":"","ucode":"673D3C055AE5B5","user_header":"https://static001.geekbang.org/account/avatar/00/20/5c/af/2215f3b6.jpg","comment_is_top":false,"comment_ctime":1604317403,"is_pvip":false,"replies":[{"id":"98026","content":"Redis的数据模式是key-value，没有表结构，没有关系模型。MySQL是属于SQL数据库，能支持丰富的SQL查询，例如条件查询、Join查询等，而且能提供ACID保证的事务操作，这些是Redis不具备的，所以MySQL和Redis分别是面向不同的应用场景的，无法用Redis完全替代MySQL做数据库。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609083331,"ip_address":"","comment_id":258166,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1604317403","product_id":100056701,"comment_content":"我想问一下redis能否做到替代mysql作为数据来使用呢？因为redis可以使用aof日志记录命令，开启everysecond的话最多只会让一秒钟的数据丢失。如果可以接受这一秒钟丢失的数据情况的话，是不是完全可以替代mysql作为数据库啊？<br>","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508567,"discussion_content":"Redis的数据模式是key-value，没有表结构，没有关系模型。MySQL是属于SQL数据库，能支持丰富的SQL查询，例如条件查询、Join查询等，而且能提供ACID保证的事务操作，这些是Redis不具备的，所以MySQL和Redis分别是面向不同的应用场景的，无法用Redis完全替代MySQL做数据库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609083331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095988,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b9/34/f1bdcbd0.jpg","nickname":"Alex_QY","note":"","ucode":"8535FD6D163539","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320825,"discussion_content":"redis使用的是内存空间，是稀缺资源。你确定要全部放内存么？放得下么？而且你觉得把所有数据放内存里是必要的么？如果不是必要，那就是在浪费资源。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604484951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2120879,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/af/2215f3b6.jpg","nickname":"徐小熊","note":"","ucode":"673D3C055AE5B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1095988,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b9/34/f1bdcbd0.jpg","nickname":"Alex_QY","note":"","ucode":"8535FD6D163539","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321436,"discussion_content":"明白了，谢谢提点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604580450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320825,"ip_address":""},"score":321436,"extra":""}]},{"author":{"id":1067354,"avatar":"https://static001.geekbang.org/account/avatar/00/10/49/5a/67b5f0b1.jpg","nickname":"单小灰","note":"","ucode":"59C4523FF1B5DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320642,"discussion_content":"兄弟，redis是nosql，mysql是关系型数据库，这根本就不是一回事儿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604419904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2120879,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/af/2215f3b6.jpg","nickname":"徐小熊","note":"","ucode":"673D3C055AE5B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1067354,"avatar":"https://static001.geekbang.org/account/avatar/00/10/49/5a/67b5f0b1.jpg","nickname":"单小灰","note":"","ucode":"59C4523FF1B5DB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320655,"discussion_content":"如果我们的系统虽然使用了mysql。但是并没用到关系型数据库的特点，只是单纯的key，value做存储，是不是就可以替换掉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604446184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320642,"ip_address":""},"score":320655,"extra":""},{"author":{"id":1303713,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","nickname":"25ma","note":"","ucode":"AB5435B9DB52C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2120879,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/af/2215f3b6.jpg","nickname":"徐小熊","note":"","ucode":"673D3C055AE5B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323077,"discussion_content":"我觉得 如果是单纯的kv，在使用层面是没问题的，而且redis还支持其他更多丰富的数据结构。不过从成本角度考虑是否划算，比如你的这些数据都不是热点数据，仅仅作为存储我觉得没有必要。从性能方面考虑，如果读者请求并发比较高，而且都是基于kv的形式，我觉得这时候用redis的确是一个不错的选择","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604883854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320655,"ip_address":""},"score":323077,"extra":""}]}]}]}