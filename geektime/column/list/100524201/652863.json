{"id":652863,"title":"32｜图的应用：如何通过关键路径估算完成工程需要的最短时间？","content":"<p>你好，我是王健伟。</p><p>这节课我们学习图的应用中的最后一个话题——关键路径问题。它解决的事估算完成某个工程所需要的最短时间的问题。说到“最短时间”，你应该就能反应过来，它是一个能帮助我们提高生产效率的算法。</p><p>我们还是从它涉及的基本概念开始说起。</p><h2>“关键路径”都涉及什么基本概念？</h2><p>前面介绍了AOV网，我们先回顾一下它的概念：有向图<span class=\"reference\">（无权值的）</span>中若以顶点表示活动，有向边<span class=\"reference\">（弧）</span>表示活动之间的先后关系，这样的有向图称为<strong>顶点表示活动的网</strong>，简称为AOV网。</p><p>这里引入与AOV网相对应的另一个概念：AOE网<span class=\"reference\">（Activity On Edge Network）</span>。</p><p>什么意思呢？在一个表示工程的带权有向图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销或该活动的持续时间，这样的有向图称为边表示活动的网，简称AOE网。</p><p>这里有几个你需要理解的AOE网的性质。</p><ul>\n<li>只有在某顶点所代表的事件发生后，从该顶点出发的各有向边所代表的活动才能开始。</li>\n<li>只有在进入某顶点的各有向边所代表的活动都结束时，该顶点所代表的事件才能发生。</li>\n<li>有些活动是可以并行进行的，有些活动是要分先后的。</li>\n</ul><p>单看这些性质不是很好理解，我还是以做一盘番茄炒蛋菜为例，现在要估算做一盘番茄炒蛋菜最短需要多少时间。我们假设做菜的师傅有很多位，这盘番茄炒蛋菜的制作过程由多位师傅同时进行。我们梳理一下每个步骤需要的时间。</p><!-- [[[read_end]]] --><ul>\n<li>洗番茄需要3分钟。</li>\n<li>切番茄需要2分钟。</li>\n<li>打鸡蛋需要2分钟。</li>\n<li>鸡蛋中加调料需要1分钟。</li>\n<li>炒菜需要8分钟。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/95/2b/95c9f5ba1f569766ab35c391ac17e72b.jpg?wh=1752x680\" alt=\"\" title=\"图1 做一盘番茄炒蛋菜工程所代表的AOE网（有向无环带权图）\"></p><p>在图1所示的AOE网中，对照一下AOE网的性质。这里注意两点。</p><ol>\n<li>只有“鸡蛋中加调料”和“切番茄”所代表的活动都结束时，“可以炒菜了”这个顶点所代表的事件才能发生。</li>\n<li>因为做菜过程中有很多位师傅同时进行，所以“打鸡蛋”和“洗番茄”的过程可以互不相关，也就是性质中的“并行进行”。但“洗番茄”和“切番茄”不能同时进行，这两件事是有先后顺序要分先后来做的，你可以理解成这里只有一个番茄，没洗完不能切。</li>\n</ol><p>在AOE网中只有一个入度为0的顶点，称为开始顶点<span class=\"reference\">（始点/源点）</span>，代表着整个工程的开始。也只有一个出度为0的顶点，称为结束顶点<span class=\"reference\">（终点/汇点）</span>，代表整个工程的结束。</p><p>因为AOE网中有些活动是可以并行进行的，所以完成整个工程需要的最短时间是从开始顶点到结束顶点的最长路径长度，也就是有向边权值之和最大。而这个最长路径长度就叫做<strong>关键路径</strong>，当然，关键路径可能不只一条。</p><p>在图1中，从开始顶点到结束顶点的路径有2条，分别是A,B,D,E和A,C,D,E，第一条路径需要花费的时间总长度是2+1+8=11分钟，第二条路径需要花费的时间总长度是3+2+8=13分钟，显然，第二条路径的长度更长因此是图1的关键路径。</p><p>我们把关键路径上的活动称为<strong>关键活动</strong>，关键活动的时间如果延长，那么整个工程的完成时间也会延长。</p><p>所以，AOE网可以回答这么两个问题。</p><ol>\n<li>完成整个工程需要多少时间？</li>\n<li>哪些活动是影响工程进度的关键活动？或者说，要缩短完成工程所需要的时间，应该加快哪些活动？</li>\n</ol><p>为了更好地编程实现关键路径求解问题，我们还是要引入一些与关键活动有关的概念。为了方便描述，假设AOE网中顶点用v表示，那么这里有4个关键点，分别是事件vk的最早发生时间ve[k]、事件vk的最迟发生时间vl[k]、活动ai的最早开始时间ee[i]以及活动ai的最晚开始时间el[i]。我们一个一个来说。</p><h3><strong>关键点1：</strong><strong>事件vk的最早发生时间ve[k]</strong></h3><p>这里的字母v即vertex，图的顶点，注意AOE网中图的顶点代表事件；而字母e理解为earliest occurrence time，最早发生时间。</p><p>ve[k]指从开始顶点v0到顶点vk的最大路径长度。它的长度决定了从顶点vk发出的活动能够开工的最早时间，也就是说所有以vk为尾的弧表示的是活动的最早开始时间。</p><p>那么，如何计算ve[k]呢？我来说下具体的思路。</p><ul>\n<li>将开始顶点的ve[0]值设置为0<span class=\"reference\">（初始值）</span>。</li>\n<li>思考ve[k]值是多少。</li>\n</ul><p>考察指向该顶点的所有弧。针对每条弧都计算出弧尾对应的顶点的ve值+弧长度值所得的和值。选取所有弧中这个和值最大的值作为ve[k]的值。</p><p>将图1的各个顶点和边重新编一下号方便描述，如图2所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/11/8dabe3718bec3bbc631ec4b475a93e11.jpg?wh=1752x724\" alt=\"\" title=\"图2 做一盘番茄炒蛋菜工程所代表的AOE网（有向无环带权图）\"></p><p>在图2中，ve[0]=0，ve[1]= ve[0]+2=2，ve[2]= ve[0]+3=3。</p><p>指向v3顶点的弧有两条，分别是“鸡蛋中加调料<span class=\"reference\">（1分钟）</span>”和“切番茄<span class=\"reference\">（2分钟）</span>”，这两条弧的弧尾对应的分别是V1顶点和V2顶点：</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/bc/6bb2bc58061ca602626a113a700d56bc.jpg?wh=2704x208\" alt=\"\"></p><p>再看一个更复杂的有向无环图对应的AOE网，如图3所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/6a/f222a2b852888567d41ee47a5cb4066a.jpg?wh=1568x701\" alt=\"\" title=\"图3 一张更复杂的有向图的AOE网\"></p><p>在图3中，看一看每个事件的最早发生时间：</p><p><img src=\"https://static001.geekbang.org/resource/image/95/f5/95b527089befea59c1e0c10918fbe3f5.jpg?wh=2700x962\" alt=\"\"></p><h3><strong>关键点2：</strong><strong>事件vk的最迟发生时间vl[k]</strong></h3><p>这里的字母v即vertex，图的顶点，注意AOE网中图的顶点代表事件；而字母l可以理解为latest occurrence time，最迟发生时间。</p><p>vl[k]指不推迟整个工程完成时间<span class=\"reference\">（工期）</span>的前提下，事件vk允许的最晚发生时间。</p><p>如何计算vl[k]呢？看一下具体的思路。</p><ul>\n<li>将结束顶点的vl<span class=\"reference\">（结束事件最迟发生时间）</span>值初始化为该顶点的ve<span class=\"reference\">（结束事件最早发生时间）</span>，即vl[n-1]=ve[n-1]。这里假设n代表AOE网顶点数量，顶点的下标从0开始。</li>\n<li>vl[k]是多少呢？这需要从后向前来推算每个顶点的vl值。</li>\n</ul><p>考察从该顶点发出的所有弧，这些弧的弧头所指向的顶点显然是已经计算出了vl值的。针对每条弧的弧头所指向的顶点的vl值-弧长度值所得的差值。选取所有弧中这些差值最小的作为vl[k]的值。</p><p>在图2中，因为ve[4]=13<span class=\"reference\">（前面计算过）</span>，所以vl[4]=13。<br>\n<img src=\"https://static001.geekbang.org/resource/image/d0/2b/d0018ef28b4b8181efaa4bfceb7c3b2b.jpg?wh=2698x540\" alt=\"\"></p><p>再看图3，看一看每个事件的最迟发生时间：</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/18/e0ec573d19999dc5edaaa6b735afd118.jpg?wh=2700x938\" alt=\"\"></p><h3><strong>关键点3：</strong><strong>活动ai的最早开始时间ee[i]</strong></h3><p>这里的第一个字母e即edge，图的有向边/弧，注意AOE网中图的有向边代表活动；而第二个字母e可以理解为earliest start time，最早开始时间。</p><p>活动ai的最早开始时间ee[i]等于该活动所对应的弧尾部所连接的事件<span class=\"reference\">（顶点）</span>的最早发生时间ve。以图4来说明：</p><p><img src=\"https://static001.geekbang.org/resource/image/51/5f/5105b7abff7536069872bc7224d92a5f.jpg?wh=1516x621\" alt=\"\" title=\"图4 活动最早开始时间与事件最早发生时间关系示意图\"></p><p>从图4不难看到，ee[i] = ve[k]。</p><p>以图2为例，得到的各个活动的最早开始时间为：<br>\n<img src=\"https://static001.geekbang.org/resource/image/0c/7d/0cbb82e65574b98b633f2675c75a847d.jpg?wh=2702x554\" alt=\"\"></p><p>以图3为例，得到各个活动的最早开始时间为：<br>\n<img src=\"https://static001.geekbang.org/resource/image/93/96/93a1119280aed872c8db59585fb19a96.jpg?wh=2710x1162\" alt=\"\"></p><h3><strong>关键点4：</strong><strong>活动ai的最晚开始时间el[i]</strong></h3><p>这里的第一个字母e即edge，图的有向边/弧，注意AOE网中图的有向边代表活动；而第二个字母l理解为latest start time，最晚开始时间。</p><p>参考之前的图4，活动ai的最晚开始时间必须要保证事件Vj的最迟发生时间不拖后。所以，活动ai的最晚开始时间el[i]=vl[j]-弧ai的长度值。</p><p>以图2为例，得到的各个活动的最晚开始时间为：<br>\n<img src=\"https://static001.geekbang.org/resource/image/0b/27/0bcb2112381e1e48ab31d38e3f1c9727.jpg?wh=2698x134\" alt=\"\"></p><p>怎么解释呢？因为洗番茄需要3分钟，切番茄需要2分钟。而鸡蛋中加调料需要1分钟，所以打鸡蛋这个活动只要不超过4分钟，就不会推迟整个番茄炒蛋菜的完成时间，因为打鸡蛋这个活动需要2分钟，因此4-2=2意味着打鸡蛋这个活动向后拖2分钟是不会耽误整个工程进度的。<br>\n<img src=\"https://static001.geekbang.org/resource/image/e5/e5/e55b85dff9ddc4119cea67f245d1dbe5.jpg?wh=2718x448\" alt=\"\"></p><p>以图3为例，得到各个活动的最晚开始时间为：<br>\n<img src=\"https://static001.geekbang.org/resource/image/a4/ac/a4c80656c3612b7yyda0fdbae80c09ac.jpg?wh=2726x1194\" alt=\"\"></p><p>利用求得的ee和el值就可以求得关键路径：只要将ee和el值相同的项找出来，对于图2，关键路径如图5，即a1、a3、a4：</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/6d/7c598edaf86bb3a1b96d68baf53ce36d.jpg?wh=1752x978\" alt=\"\" title=\"图5通过ee和el值相同的项找到图2所示AOE网中关键路径（粗线部分）\"></p><p>对于图3，关键路径如图6，即a0、a3、a6、a7、a9、a10，不难看到，这是两条关键路径：</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/e2/b59d7d57329e12de7b23febc391507e2.jpg?wh=1665x994\" alt=\"\" title=\"图6 通过ee和el值相同的项找到图3所示AOE网中两条关键路径（粗线部分）\"></p><p>从上面的图中可以看到，只要是活动最早开始时间和活动最晚开始时间相等的项，就属于关键路径上的活动。因为这种活动是属于没有办法推迟必须立即开始干的活动，那么这些活动所连接起来的路径一定是最长的路径，即关键路径。关键路径找到了，那么关键路径上的<span class=\"reference\">（关键）</span>活动就找到了。</p><p>这里我强调两点。</p><ul>\n<li>关键路径就是工程中需要花费时间最多的路径，如果对这些关键活动进行优化，比如增派人手，提升速度等，那么整个工程的效率就能得到进一步增强。但是要注意，只有AOE网中关键路径不发生改变的前提下，这些优化才有意义。如果因为优化导致关键路径发生了改变，比如关键活动变成了非关键活动，那么这些优化就失去了意义，所以<strong>优化是有限度的</strong>，并不是可以无限优化的。</li>\n<li>如果AOE网中存在多条关键路径<span class=\"reference\">（如图6）</span>，那么要提高工程的效率来缩短总工程时间就必须同时提高这几条关键路径上的关键活动速度才行。</li>\n</ul><h2>关键路径算法实现</h2><p>理清思路之后，我们来说算法的具体实现。这里注意两点：只有带权有向无环图才能求关键路径；通过关键路径算法可以找出关键活动——不按期完成会影响整个工程进度的活动。</p><p>关键路径算法的实现思路还是比较清晰的，利用前面讲述的拓扑排序算法确定图中是否有环。在没有环的前提下，计算出事件的最早发生时间ve、事件的最迟发生时间vl、活动的最早开始时间ee，活动的最晚开始时间el，此时，用el-ee求得差值，差值为0的就是关键活动。</p><p>el-ee的差值也叫做<strong>时间余量</strong>，表示在不增加整个工程完成工期的情况下，活动可以拖延的时间。时间余量为0就表示该活动必须按期完成，这样的活动也就是关键活动。由这些关键活动组成的路径就是关键路径。</p><p>实现关键路径算法，既可以使用邻接矩阵又可以使用邻接表来保存图，当然，采用其他存储方式也行。这里我采用的是邻接表的方式保存图。考虑到编程的方便，为代码中表示边的节点结构EdgeNode增加“权值”成员变量weight，为表示顶点的节点结构VertexNode增加“入度”成员变量indegree和“出度”成员变量outdegree。</p><p>我们参照图7实现关键路径算法的编写。注意，图中顶点进行了重新命名，[ ]中代表该顶点的下标/编号，同时绘制出了图对应的邻接表：</p><p><img src=\"https://static001.geekbang.org/resource/image/51/62/513c1f1be761824589eb67be1eec4e62.jpg?wh=1629x1218\" alt=\"\" title=\"图7 一张带权有向无环图的邻接表以及相应的AOE网展示\"></p><p>下面就是采用邻接表的方式保存图并求得关键路径的实现源码了。大致的思路就是，通过前述的拓扑排序算法得到了事件的最早发生时间ve值，然后求得事件的最迟发生时间vl值，再求得活动的最早开始时间ee和活动的最晚开始时间el并进行比较，从而确定出关键路径。</p><pre><code class=\"language-plain\">#define MaxVertices_size 10 //最大顶点数大小\n//表示边的节点结构\nstruct EdgeNode\n{\t\t\n\tint curridx; //边所对应的顶点下标值\n\tint weight; //权值\n\tEdgeNode* next; //指向下一条边\n};\n\n//表示顶点的节点结构，其后是一个链表，链表中每个节点都代表着和该顶点相连的边\ntemplate&lt;typename T&gt; //T代表顶点类型\nstruct VertexNode\n{\n\tint indegree; //入度\n\tint outdegree; //出度\n\tT data;&nbsp; &nbsp; //顶点中的数据\n\tEdgeNode* point; //指向第一个边节点的指针\n};\n</code></pre><pre><code class=\"language-plain\">//邻接表代表的图\ntemplate&lt;typename T&gt; //T代表顶点类型\nclass GraphLink\n{\npublic:\n\tGraphLink() //构造函数\n\t{\n\t\tm_numVertices = 0;\n\t\tm_numEdges = 0;\n\t\tfor (int i = 0; i &lt; MaxVertices_size; ++i)\n\t\t{\n\t\t\tm_VertexArray[i].point = nullptr; //指针可以率先指向nullptr\n\t\t\tm_VertexArray[i].outdegree = 0;&nbsp; &nbsp; //出度先给0\n\t\t\tm_VertexArray[i].indegree = 0;&nbsp; &nbsp; //入度先给0\n\t\t}\n\t}\n\t~GraphLink() //析构函数\n\t{\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\n\t\t\tEdgeNode* ptmp = m_VertexArray[i].point;\n\t\t\twhile (ptmp != nullptr)\n\t\t\t{\n\t\t\t\tm_VertexArray[i].point = ptmp-&gt;next;\n\t\t\t\tdelete ptmp;\n\t\t\t\tptmp = m_VertexArray[i].point;\n\t\t\t} //end while\n\t\t\tm_VertexArray[i].point = nullptr;\n\t\t} //end for i\n\t}\npublic:\n\t//插入顶点\n\tbool InsertVertex(const T&amp; tmpv)\n\t{\n\t\tif (m_numVertices &gt;= MaxVertices_size) //顶点空间已满\n\t\t{\n\t\t\tcout &lt;&lt;\"顶点空间已满\"&lt;&lt; endl;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (GetVertexIdx(tmpv) != -1) //该顶点已经存在\n\t\t{\n\t\t\tcout &lt;&lt;\"顶点 \"&lt;&lt; tmpv &lt;&lt;\" 已经存在!\"&lt;&lt; endl;\n\t\t\treturn false;\n\t\t}\n\t\tm_VertexArray[m_numVertices].data = tmpv;\n\t\tm_VertexArray[m_numVertices].point = nullptr;\n\t\tm_numVertices++;\n\t\treturn true;\n\t}\n\t\n\t//插入边\n\tbool InsertEdge(const T&amp; tmpv1, const T&amp; tmpv2,int weight) //在tmpv1和tmpv2两个顶点之间插入一条边\n\t{\n\t\tint idx1 = GetVertexIdx(tmpv1);\n\t\tint idx2 = GetVertexIdx(tmpv2);\n\t\tif (idx1 == -1 || idx2 == -1) //某个顶点不存在，不可以插入边\n\t\t\treturn false;\t\t\t\n\t\t//判断是否边重复\n\t\tEdgeNode* ptmp = m_VertexArray[idx1].point;\n\t\twhile (ptmp != nullptr)\n\t\t{\n\t\t\tif (ptmp-&gt;curridx == idx2)\n\t\t\t\treturn false; //边重复\n\t\t\tptmp = ptmp-&gt;next;\n\t\t}\n\t\t\n\t\t//可以正常插入\n\t\tptmp = new EdgeNode;\n\t\tptmp-&gt;curridx = idx2;\n\t\tptmp-&gt;weight = weight;&nbsp;\n\t\tptmp-&gt;next = m_VertexArray[idx1].point;&nbsp; //为简化编码和提升代码执行效率，采用头插法将边节点插入到单链表的最前面\n\t\tm_VertexArray[idx1].point = ptmp;\n\t\tm_VertexArray[idx1].outdegree++; //开始顶点出度数增加\n\t\tm_VertexArray[idx2].indegree++; //终止顶点入度数增加\n\t\tm_numEdges++; //边数量增加1\n\t\treturn true;\n\t}\n\t\t\n\tvoid DispGraph() //显示图信息\n\t{\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\n\t\t\tcout &lt;&lt; i &lt;&lt;\"&nbsp; &nbsp;入度/出度(\"&lt;&lt; m_VertexArray[i].indegree &lt;&lt;\"/\"&lt;&lt; m_VertexArray[i].outdegree &lt;&lt;\")\"&lt;&lt;\"\"&lt;&lt; m_VertexArray[i].data &lt;&lt;\"：--&gt;\";&nbsp; &nbsp;//输出顶点下标和顶点数据\n\t\t\tEdgeNode* ptmp = m_VertexArray[i].point;\n\t\t\twhile (ptmp != nullptr)\n\t\t\t{\n\t\t\t\tcout &lt;&lt; ptmp-&gt;curridx &lt;&lt;\"(权值:\"&lt;&lt; ptmp-&gt;weight &lt;&lt;\")--&gt;\";&nbsp; //输出顶点相关的边索引（编号）\n\t\t\t\tptmp = ptmp-&gt;next;\n\t\t\t}\n\t\t\tcout &lt;&lt;\"nullptr\"&lt;&lt; endl; //显示指向nullptr并换行\n\t\t} //end for\n\t\tcout &lt;&lt;\"图中有顶点\"&lt;&lt; m_numVertices &lt;&lt;\"个，边\"&lt;&lt; m_numEdges &lt;&lt;\"条!\"&lt;&lt; endl;\n\t}\n\t\t\n\t//拓扑排序算法\n\tbool TopologicalSort(int *pPopResult, int* pve)\n\t{\n\t\tint* pInVexDegree = new int[m_numVertices]; //分配空间记录顶点入度\n\t\tmemset(pInVexDegree, 0, sizeof(int) * m_numVertices); //清0\n\t\t\n\t\t//顶点的入度值先拿过来\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\n\t\t\tpInVexDegree[i] = m_VertexArray[i].indegree;\n\t\t} //end for\t\n\t\t\n\t\t//将入度为0的顶点先入栈\n\t\tstd::stack&lt;int&gt; tempstack; //#include &lt;stack&gt;\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\n\t\t\tif (pInVexDegree[i] == 0)\n\t\t\t{\n\t\t\t\ttempstack.push(i);\n\t\t\t}\n\t\t} //end for\n\t\t\n\t\tint iOutputVexcount = 0; //输出的顶点数量统计\n\t\t//栈不为空则循环\n\t\twhile (tempstack.empty() == false)\n\t\t{\n\t\t\t//出栈\n\t\t\tstatic int sign = 0;\n\t\t\tif (sign == 0)\n\t\t\t{\n\t\t\t\tsign = 1;\n\t\t\t\tcout &lt;&lt;\"拓扑排序的结果为：&nbsp; &nbsp;\";\n\t\t\t}\n\t\t\tint topidx = tempstack.top(); //获取栈顶元素\n\t\t\tcout &lt;&lt; m_VertexArray[topidx].data &lt;&lt;\"\";&nbsp; //输出没有前趋的顶点\n\t\t\t\t\n\t\t\tpPopResult[iOutputVexcount] = topidx; //记录出栈的元素顺序\n\t\t\t\n\t\t\tiOutputVexcount++;&nbsp; //输出的拓扑顶点数量统计\n\t\t\ttempstack.pop(); //删除栈顶元素\n\t\t\t\n\t\t\t//要将topidx对应顶点的各个邻接点入度减1，所以要先找到第一条边\n\t\t\tEdgeNode* pEdgenode = m_VertexArray[topidx].point;\n\t\t\twhile (pEdgenode != nullptr)\n\t\t\t{\n\t\t\t\tint tmpidx = pEdgenode-&gt;curridx;\n\t\t\t\tif (pInVexDegree[tmpidx] != 0) //入度已经为0的顶点，不理会\n\t\t\t\t{\n\t\t\t\t\tpInVexDegree[tmpidx]--; //入度值减1\n\t\t\t\t\tif (pInVexDegree[tmpidx] == 0)//入度为0的点入栈\n\t\t\t\t\t\ttempstack.push(tmpidx);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//顺带计算事件的最早发生时间ve供后续CriticalPath计算关键路径使用\n\t\t\t\tif (pve[tmpidx] &lt; (pve[topidx] + pEdgenode-&gt;weight))\n\t\t\t\t{\n\t\t\t\t\tpve[tmpidx] = pve[topidx] + pEdgenode-&gt;weight;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpEdgenode = pEdgenode-&gt;next;\n\t\t\t} //end while\t\n\t\t} //end while\n\t\tcout &lt;&lt; endl; //换行\n\t\tdelete[] pInVexDegree;\n\t\t\n\t\tif (iOutputVexcount != m_numVertices) //拓扑排序失败\n\t\t{\n\t\t\tcout &lt;&lt;\"输出顶点数量:\"&lt;&lt; iOutputVexcount &lt;&lt;\",而图中实际顶点数量:\"&lt;&lt; m_numVertices &lt;&lt;\",说明图中有环，没办法输出所有顶点序列（非AOV网，拓扑排序错误）\"&lt;&lt; endl;\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\t\n\t//求关键路径\n\tbool CriticalPath()\n\t{\n\t\t//在AOE网中只有一个入度为0的顶点，称为开始顶点，也只有一个出度为0的顶点，称为结束顶点\n\t\tint iStartVerIdx = -1;\n\t\tint iEndVerIdx = -1;\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\n\t\t\tif (m_VertexArray[i].indegree == 0)\n\t\t\t{\n\t\t\t\tif (iStartVerIdx != -1)\n\t\t\t\t{\n\t\t\t\t\tcout &lt;&lt;\"图中发现超过1个入度为0的节点，非法AOE网，不能求关键路径\"&lt;&lt; endl;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tiStartVerIdx = i;\n\t\t\t} //end if\n\t\t\t\n\t\t\tif (m_VertexArray[i].outdegree == 0)\n\t\t\t{\n\t\t\t\tif (iEndVerIdx != -1)\n\t\t\t\t{\n\t\t\t\t\tcout &lt;&lt;\"图中发现超过1个出度为0的节点，非法AOE网，不能求关键路径\"&lt;&lt; endl;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tiEndVerIdx = i;\n\t\t\t}\n\t\t} //end for i\n\t\t\t\n\t\t//(1)事件的最早发生时间ve分配内存准备开始计算：\n\t\tint* pve = new int[m_numVertices];&nbsp;\n\t\tmemset(pve, 0, sizeof(int) * m_numVertices); //清0\n\t\t\n\t\t//这个用来计算后续的vl用的\n\t\tint * pPopResult = new int[m_numVertices];\n\t\tmemset(pPopResult, 0, sizeof(int) * m_numVertices);\n\t\t\n\t\t//通过拓扑排序能够得到ve值（当然不通过拓扑排序而是单独计算ve值也可以）：\n\t\tif (TopologicalSort(pPopResult,pve) == false)\n\t\t{\n\t\t\t//内存不要忘记释放\n\t\t\tdelete[] pve;\n\t\t\tdelete[] pPopResult;&nbsp;\n\t\t\treturn false; //图中有环，直接返回\n\t\t}\n\t\t\n\t\t//拓扑排序可能的结果为： A&nbsp; &nbsp;B&nbsp; &nbsp;C&nbsp; &nbsp;E&nbsp; &nbsp;G&nbsp; &nbsp;D&nbsp; &nbsp;F&nbsp; &nbsp;H&nbsp; &nbsp;I\n\t\t//pve结果应该为：0,6,4,5,7,7,16,14,18\n\t\t//pPopResult的结果应该为：0,1,2,4,6,3,5,7,8\n\t\t\t\t\t\n\t\t//(2)事件的最迟发生时间vl计算，注意vl值是从后向前求的：\n\t\t\tint* pvl = new int[m_numVertices];\n\t\tmemset(pvl, 0, sizeof(int) * m_numVertices);\n\t\t\n\t\tint toppos = m_numVertices - 1; //栈顶位置=9-1=8\n\t\tint vexIdx = pPopResult[toppos]; //栈顶位置所代表的顶点的下标值\n\t\ttoppos--;\n\t\t\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\n\t\t\t//初始化vl值，vl值一般都比最大的ve值(pve[idxTop])小，所以把最大ve值先给vl没问题，后续要进行min判断\n\t\t\tpvl[i] = pve[vexIdx]; //18\n\t\t} //end for\n\t\t\n\t\twhile (toppos &gt;= 0) //栈里有数据\n\t\t{\n\t\t\tint fromVexIdx = pPopResult[toppos];&nbsp; //7：出栈\n\t\t\ttoppos--;\n\t\t\tEdgeNode* pTmpEdge = m_VertexArray[fromVexIdx].point; //下标7所代表的顶点为H，这里拿到H指向的第一条边\n\t\t\twhile (pTmpEdge != nullptr) //遍历顶点H指向的其他边\n\t\t\t{\n\t\t\t\tint toVexIdx = pTmpEdge-&gt;curridx; //8\n\t\t\t\tif (pvl[fromVexIdx] &gt; (pvl[toVexIdx] - pTmpEdge-&gt;weight))\n\t\t\t\t\tpvl[fromVexIdx] = pvl[toVexIdx] - pTmpEdge-&gt;weight;\n\t\t\t\t\n\t\t\t\tpTmpEdge = pTmpEdge-&gt;next;\n\t\t\t} //end while (pTmpEdge != nullptr)\n\t\t} //end while(toppos &gt;= 0)\n\t\t\n\t\t//pvl结果应该为： 0&nbsp; 6&nbsp; 6&nbsp; 8&nbsp; 7&nbsp; 10&nbsp; 16&nbsp; 14&nbsp; 18\n\t\t\n\t\t//(3)活动的最早开始时间ee计算，该值需要通过ve求得。\n\t\t//(4)活动的最晚开始时间el计算，该值需要通过vl求得。\n\t\t//这里不用分配内存并进行计算，只需要求得ee和el临时值，比较他们是否相等就可以得到关键路径了\n\t\tint tmpee, tmpel;\n\t\tcout &lt;&lt;\"关键路径如下：\"&lt;&lt; endl;\n\t\tfor (int fromVexIdx = 0; fromVexIdx &lt; m_numVertices; ++fromVexIdx) //遍历所有顶点\n\t\t{\n\t\t\tEdgeNode* pTmpEdge = m_VertexArray[fromVexIdx].point; //该顶点指向的边信息\n\t\t\twhile (pTmpEdge != nullptr)\n\t\t\t{\n\t\t\t\tint toVexIdx = pTmpEdge-&gt;curridx;&nbsp;\n\t\t\t\tint toWeight = pTmpEdge-&gt;weight;\n\t\t\t\t\n\t\t\t\ttmpee = pve[fromVexIdx];&nbsp; //活动最早开始时间\n\t\t\t\ttmpel = pvl[toVexIdx] - toWeight;&nbsp; //活动最晚开始时间\n\t\t\t\t\n\t\t\t\t//活动最早开始时间和活动最晚开始时间相等，这属于关键路径上的活动\n\t\t\t\tif (tmpee == tmpel)\n\t\t\t\t{\n\t\t\t\t\t//用“&lt;顶点1,顶点2&gt;(权值=?)”形式表示顶点之间的弧\n\t\t\t\t\t//结果形如：&lt;A,B&gt;(权值=6) &lt;B,E&gt;(权值=1) &lt;E,H&gt;(权值=7) &lt;E,G&gt;(权值=9) &lt;G,I&gt;(权值=2) &lt;H,I&gt;(权值=4)\n\t\t\t\t\tcout &lt;&lt;\"&lt;\"&lt;&lt; m_VertexArray[fromVexIdx].data &lt;&lt;\",\"&lt;&lt; m_VertexArray[toVexIdx].data &lt;&lt;\"&gt;(权值=\"&lt;&lt; toWeight &lt;&lt;\") \";\n\t\t\t\t}\n\t\t\t\tpTmpEdge = pTmpEdge-&gt;next;\n\t\t\t}//end while\n\t\t}//end for\n\t\t//释放内存\n\t\tdelete[] pve;\n\t\tdelete[] pvl;\n\t\tdelete[] pPopResult;\n\t\treturn true;\n\t}\n\t\nprivate:\n\t//获取顶点下标\n\tint GetVertexIdx(const T&amp; tmpv)\n\t{\n\t\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t\t{\n\t\t\tif (m_VertexArray[i].data == tmpv)\n\t\t\t\treturn i;\n\t\t}\n\t\treturn -1; //不存在的顶点\n\t}\nprivate:\n\tint m_numVertices;&nbsp; &nbsp; //当前顶点数量\n\tint m_numEdges;&nbsp; &nbsp; &nbsp; &nbsp;//边数量\n\tVertexNode&lt;T&gt;&nbsp; m_VertexArray[MaxVertices_size]; //顶点数组\n};\n</code></pre><p>在main主函数中加入如下代码：</p><pre><code class=\"language-plain\">GraphLink&lt;char&gt; gm;\ngm.InsertVertex('A');\ngm.InsertVertex('B');\ngm.InsertVertex('C');\ngm.InsertVertex('D');\ngm.InsertVertex('E');\ngm.InsertVertex('F');\ngm.InsertVertex('G');\ngm.InsertVertex('H');\ngm.InsertVertex('I');\n\n//向图中插入边\ngm.InsertEdge('A', 'B', 6);\ngm.InsertEdge('A', 'C', 4);\ngm.InsertEdge('A', 'D', 5);\ngm.InsertEdge('B', 'E', 1);\ngm.InsertEdge('C', 'E', 1);\ngm.InsertEdge('D', 'F', 2);\ngm.InsertEdge('E', 'G', 9);\ngm.InsertEdge('E', 'H', 7);\ngm.InsertEdge('F', 'H', 4);\ngm.InsertEdge('G', 'I', 2);\ngm.InsertEdge('H', 'I', 4);\ngm.DispGraph();\t\ngm.CriticalPath();\n</code></pre><p>执行结果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/51/da/511238f476c37de0575c7e86b171e6da.jpg?wh=2314x1078\" alt=\"\"></p><p>最终得到的AOE网关键路径如图8所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/bf/a6ce28f9ef883b7ea1cbf1472df2bdbf.jpg?wh=1588x718\" alt=\"\" title=\"图8 图3所示的AOE网对应的两条关键路径\"></p><p>从整个关键路径算法CriticalPath的实现来看，因为调用了拓扑排序算法，拓扑排序算法的时间复杂度是O(|V|+|E|)，双while嵌套计算事件的最迟发生时间vl的时间复杂度也是O(|V|+|E|)，用for嵌套while循环获取关键路径这段代码的时间复杂度还是O(|V|+|E|)。所以，上述关键路径算法的时间复杂度是O(|V|+|E|)。</p><p>一般来说，求得事件的最早发生时间ve和事件的最迟发生时间vl是需要借助拓扑排序来进行以保证各个顶点相关值的求解顺序的。在翻阅和这节课相关的资料和实现代码中，我遇到过不通过拓扑排序直接求得ve和vl值，从而再进一步求得活动的最早开始时间ee和活动的最晚开始时间el并最终求得关键路径的情况。但是经过对源码的分析和测试后，我认为实现有问题：在测试代码中，只需要把顶点A的创建顺序从最前面放到最后面，也就是在创建图中顶点时，按照下面的顺序创建各个顶点。</p><pre><code class=\"language-plain\">gm.InsertVertex('B');\ngm.InsertVertex('C');\ngm.InsertVertex('D');\t\ngm.InsertVertex('E');\ngm.InsertVertex('F');\ngm.InsertVertex('G');\ngm.InsertVertex('H');\t\ngm.InsertVertex('I');\ngm.InsertVertex('A');\n</code></pre><p>按这样的顺序创建顶点后，其实整个图并没有发生什么改变。然后我们输出并判断计算出的ve值是否依旧正确，如果不正确，则说明实现关键路径的算法代码有问题。</p><h2>小结</h2><p>这节课我们学习了通过关键路径估算完成工程需要的最短时间，从而想办法提高生产效率的问题。</p><p>我们首先引入了AOE网的概念和性质，以做一盘番茄炒蛋菜为例，估算了做一盘番茄炒蛋菜所需要的最短时间，为使估算过程顺利进行，我们也引入了关键路径和关键活动这两个重要概念。</p><p>为了更好地编程实现关键路径求解问题，我们引入了一些与关键活动有关的概念以及他们的计算，这些概念包括：</p><ul>\n<li>事件vk的最早发生时间ve[k]</li>\n<li>事件vk的最迟发生时间vl[k]</li>\n<li>活动ai的最早开始时间ee[i]</li>\n<li>活动ai的最晚开始时间el[i]</li>\n</ul><p>有了这些概念作为铺垫，我们才能去实现求AOE网中关键路径的代码编写工作。代码实现虽然相对烦琐，但整个难度并不大。这里需要提醒你的是，<strong>只有带权有向无环图才能求关键路径</strong>。最后，我们需要知道，通过关键路径算法可以找出关键活动，如果不按期完成会影响整个工程进度的活动。</p><h2>课后思考</h2><p>请你仿照本节所讲述的做一盘番茄炒蛋菜的工程来规划一个新的工程，绘制出该工程所代表的AOE网并求出该AOE网对应的关键路径信息。</p><p>欢迎你在留言区分享自己的思考。如果觉得有所收获，也可以把课程分享给更多的同学一起学习进步。我们下节课见！</p>","comments":[]}