{"id":422182,"title":"15｜数据结构：这些浓眉大眼的结构竟然都是智能指针？","content":"<p>你好，我是陈天。</p><p>到现在为止我们学了Rust的所有权与生命周期、内存管理以及类型系统，基础知识里还剩一块版图没有涉及：数据结构，数据结构里最容易让人困惑的就是智能指针，所以今天我们就来解决这个难点。</p><p>我们之前简单介绍过指针，这里还是先回顾一下：指针是一个持有内存地址的值，可以通过解引用来访问它指向的内存地址，理论上可以解引用到任意数据类型；引用是一个特殊的指针，它的解引用访问是受限的，只能解引用到它引用数据的类型，不能用作它用。</p><p>那什么是智能指针呢？</p><h2>智能指针</h2><p>在指针和引用的基础上，Rust 偷师 C++，提供了智能指针。智能指针是一个表现行为很像指针的数据结构，但除了指向数据的指针外，它还有元数据以提供额外的处理能力。</p><p>这个定义有点模糊，我们对比其他的数据结构来明确一下。</p><p>你有没有觉得很像之前讲的胖指针。智能指针一定是一个胖指针，但胖指针不一定是一个智能指针。比如 &amp;str 就只是一个胖指针，它有指向堆内存字符串的指针，同时还有关于字符串长度的元数据。</p><p>我们看智能指针 String 和 &amp;str 的区别：<img src=\"https://static001.geekbang.org/resource/image/f4/59/f4401040f7d36b9e610b6867a5d0cf59.jpg?wh=1913x1206\" alt=\"\"></p><p>从图上可以看到，String 除了多一个 capacity 字段，似乎也没有什么特殊。<strong>但 String 对堆上的值有所有权，而 &amp;str 是没有所有权的，这是 Rust 中智能指针和普通胖指针的区别</strong>。</p><!-- [[[read_end]]] --><p>那么又有一个问题了，智能指针和结构体有什么区别呢？因为我们知道，String 是用结构体定义的：</p><pre><code class=\"language-rust\">pub struct String {\n    vec: Vec&lt;u8&gt;,\n}\n</code></pre><p>和普通的结构体不同的是，String 实现了 Deref 和 DerefMut，这使得它在解引用的时候，会得到 &amp;str，看下面的<a href=\"https://doc.rust-lang.org/src/alloc/string.rs.html#2301-2316\">标准库的实现</a>：</p><pre><code class=\"language-rust\">impl ops::Deref for String {\n    type Target = str;\n\n    fn deref(&amp;self) -&gt; &amp;str {\n        unsafe { str::from_utf8_unchecked(&amp;self.vec) }\n    }\n}\n\nimpl ops::DerefMut for String {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut str {\n        unsafe { str::from_utf8_unchecked_mut(&amp;mut *self.vec) }\n    }\n}\n</code></pre><p>另外，由于在堆上分配了数据，String 还需要为其分配的资源做相应的回收。而 String 内部使用了 Vec&lt;u8&gt;，所以它可以依赖 Vec&lt;T&gt; 的能力来释放堆内存。下面是标准库中 Vec&lt;T&gt; 的 <a href=\"https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#2710-2720\">Drop trait 的实现</a>：</p><pre><code class=\"language-rust\">unsafe impl&lt;#[may_dangle] T, A: Allocator&gt; Drop for Vec&lt;T, A&gt; {\n    fn drop(&amp;mut self) {\n        unsafe {\n            // use drop for [T]\n            // use a raw slice to refer to the elements of the vector as weakest necessary type;\n            // could avoid questions of validity in certain cases\n            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))\n        }\n        // RawVec handles deallocation\n    }\n}\n</code></pre><p>所以再清晰一下定义，<strong>在 Rust 中，凡是需要做资源回收的数据结构，且实现了 Deref/DerefMut/Drop，都是智能指针</strong>。</p><p>按照这个定义，除了 String，在之前的课程中我们遇到了很多智能指针，比如用于在堆上分配内存的 Box&lt;T&gt; 和 Vec&lt;T&gt;、用于引用计数的 Rc&lt;T&gt; 和 Arc&lt;T&gt; 。很多其他数据结构，如 PathBuf、Cow&lt;'a, B&gt;、MutexGuard&lt;T&gt;、RwLockReadGuard&lt;T&gt; 和 RwLockWriteGuard 等也是智能指针。</p><p>今天我们就深入分析三个使用智能指针的数据结构：在堆上创建内存的 Box&lt;T&gt;、提供写时克隆的 Cow&lt;'a, B&gt;，以及用于数据加锁的 MutexGuard&lt;T&gt;。</p><p>而且最后我们会尝试实现自己的智能指针。希望学完后你不但能更好地理解智能指针，还能在需要的时候，构建自己的智能指针来解决问题。</p><h2>Box&lt;T&gt;</h2><p>我们先看 Box&lt;T&gt;，它是 Rust 中最基本的在堆上分配内存的方式，绝大多数其它包含堆内存分配的数据类型，内部都是通过 Box&lt;T&gt; 完成的，比如 Vec&lt;T&gt;。</p><p>为什么有Box&lt;T&gt;的设计，我们得先回忆一下在 C 语言中，堆内存是怎么分配的。</p><p>C 需要使用 malloc/calloc/realloc/free 来处理内存的分配，很多时候，被分配出来的内存在函数调用中来来回回使用，导致谁应该负责释放这件事情很难确定，给开发者造成了极大的心智负担。</p><p>C++ 在此基础上改进了一下，提供了一个智能指针 <a href=\"https://en.cppreference.com/w/cpp/memory/unique_ptr\">unique_ptr</a>，可以在指针退出作用域的时候释放堆内存，这样保证了堆内存的单一所有权。这个 unique_ptr 就是 Rust 的 Box&lt;T&gt; 的前身。</p><p>你看 Box&lt;T&gt; 的定义里，内部就是一个 <a href=\"https://doc.rust-lang.org/src/core/ptr/unique.rs.html#36-44\">Unique&lt;T&gt;</a> 用于致敬 C++，Unique&lt;T&gt; 是一个私有的数据结构，我们不能直接使用，它包裹了一个 *const T 指针，并唯一拥有这个指针。</p><pre><code class=\"language-rust\">pub struct Unique&lt;T: ?Sized&gt; {\n    pointer: *const T,\n    // NOTE: this marker has no consequences for variance, but is necessary\n    // for dropck to understand that we logically own a `T`.\n    //\n    // For details, see:\n    // https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#phantom-data\n    _marker: PhantomData&lt;T&gt;,\n}\n</code></pre><p>我们知道，在堆上分配内存，需要使用内存分配器（Allocator）。如果你上过操作系统课程，应该还记得一个简单的 <a href=\"https://en.wikipedia.org/wiki/Buddy_memory_allocation\">buddy system</a> 是如何分配和管理堆内存的。</p><p>设计内存分配器的目的除了保证正确性之外，就是为了有效地利用剩余内存，并控制内存在分配和释放过程中产生的碎片的数量。在多核环境下，它还要能够高效地处理并发请求。（如果你对通用内存分配器感兴趣，可以看参考资料）</p><p>堆上分配内存的 Box&lt;T&gt; 其实有一个缺省的泛型参数 A，就需要满足 <a href=\"https://doc.rust-lang.org/std/alloc/trait.Allocator.html\">Allocator trait</a>，并且默认是 Global：</p><pre><code class=\"language-rust\">pub struct Box&lt;T: ?Sized,A: Allocator = Global&gt;(Unique&lt;T&gt;, A)\n</code></pre><p>Allocator trait 提供很多方法：</p><ul>\n<li>allocate是主要方法，用于分配内存，对应 C 的 malloc/calloc；</li>\n<li>deallocate，用于释放内存，对应 C 的 free；</li>\n<li>还有 grow / shrink，用来扩大或缩小堆上已分配的内存，对应 C 的 realloc。</li>\n</ul><p>这里对 Allocator trait 我们就不详细介绍了，如果你想替换默认的内存分配器，可以使用 #[global_allocator] 标记宏，定义你自己的全局分配器。下面的代码展示了如何在 Rust 下使用 <a href=\"https://crates.io/crates/jemallocator\">jemalloc</a>：</p><pre><code class=\"language-rust\">use jemallocator::Jemalloc;\n\n#[global_allocator]\nstatic GLOBAL: Jemalloc = Jemalloc;\n\nfn main() {}\n</code></pre><p>这样设置之后，你使用 Box::new() 分配的内存就是 jemalloc 分配出来的了。另外，如果你想撰写自己的全局分配器，可以实现 <a href=\"https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html\">GlobalAlloc trait</a>，它和 Allocator trait 的区别，主要在于是否允许分配长度为零的内存。</p><h3>使用场景</h3><p>下面我们来实现一个自己的内存分配器。别担心，这里就是想 debug 一下，看看内存如何分配和释放，并不会实际实现某个分配算法。</p><p>首先看内存的分配。这里 MyAllocator 就用 System allocator，然后加 eprintln!()，和我们常用的 println!() 不同的是，eprintln!() 将数据打印到 stderr（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ca0ae6821e08e16609b1e10ac743e6c9\">代码</a>）：</p><pre><code class=\"language-rust\">use std::alloc::{GlobalAlloc, Layout, System};\n\nstruct MyAllocator;\n\nunsafe impl GlobalAlloc for MyAllocator {\n    unsafe fn alloc(&amp;self, layout: Layout) -&gt; *mut u8 {\n        let data = System.alloc(layout);\n        eprintln!(\"ALLOC: {:p}, size {}\", data, layout.size());\n        data\n    }\n\n    unsafe fn dealloc(&amp;self, ptr: *mut u8, layout: Layout) {\n        System.dealloc(ptr, layout);\n        eprintln!(\"FREE: {:p}, size {}\", ptr, layout.size());\n    }\n}\n\n#[global_allocator]\nstatic GLOBAL: MyAllocator = MyAllocator;\n\n#[allow(dead_code)]\nstruct Matrix {\n    // 使用不规则的数字如 505 可以让 dbg! 的打印很容易分辨出来\n    data: [u8; 505],\n}\n\nimpl Default for Matrix {\n    fn default() -&gt; Self {\n        Self { data: [0; 505] }\n    }\n}\n\nfn main() {\n    // 在这句执行之前已经有好多内存分配\n    let data = Box::new(Matrix::default());\n\n    // 输出中有一个 1024 大小的内存分配，是 println! 导致的\n    println!(\n        \"!!! allocated memory: {:p}, len: {}\",\n        &amp;*data,\n        std::mem::size_of::&lt;Matrix&gt;()\n    );\n\n    // data 在这里 drop，可以在打印中看到 FREE\n    // 之后还有很多其它内存被释放\n}\n</code></pre><p>注意这里不能使用 println!() 。因为 stdout 会打印到一个由 Mutex 互斥锁保护的共享全局 buffer 中，这个过程中会涉及内存的分配，分配的内存又会触发 println!()，最终造成程序崩溃。而 eprintln! 直接打印到 stderr，不会 buffer。</p><p>运行这段代码，你可以看到类似如下输出，其中 505 大小的内存是我们 Box::new() 出来的：</p><pre><code class=\"language-bash\">❯ cargo run --bin allocator --quiet\nALLOC: 0x7fbe0dc05c20, size 4\nALLOC: 0x7fbe0dc05c30, size 5\nFREE: 0x7fbe0dc05c20, size 4\nALLOC: 0x7fbe0dc05c40, size 64\nALLOC: 0x7fbe0dc05c80, size 48\nALLOC: 0x7fbe0dc05cb0, size 80\nALLOC: 0x7fbe0dc05da0, size 24\nALLOC: 0x7fbe0dc05dc0, size 64\nALLOC: 0x7fbe0dc05e00, size 505\nALLOC: 0x7fbe0e008800, size 1024\n!!! allocated memory: 0x7fbe0dc05e00, len: 505\nFREE: 0x7fbe0dc05e00, size 505\nFREE: 0x7fbe0e008800, size 1024\nFREE: 0x7fbe0dc05c30, size 5\nFREE: 0x7fbe0dc05c40, size 64\nFREE: 0x7fbe0dc05c80, size 48\nFREE: 0x7fbe0dc05cb0, size 80\nFREE: 0x7fbe0dc05dc0, size 64\nFREE: 0x7fbe0dc05da0, size 24\n</code></pre><p>在使用 Box 分配堆内存的时候要注意，Box::new() 是一个函数，所以传入它的数据会出现在栈上，再移动到堆上。所以，如果我们的 Matrix 结构不是 505 个字节，是一个非常大的结构，就有可能出问题。</p><p>比如下面的代码想在堆上分配 16M 内存，如果你在 playground 里运行，直接栈溢出 stack overflow（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4aa8e21e6da6b572dae2ad8d68787e1e\">代码</a>）：</p><pre><code class=\"language-rust\">fn main() {\n    // 在堆上分配 16M 内存，但它会现在栈上出现，再移动到堆上\n    let boxed = Box::new([0u8; 1 &lt;&lt; 24]);\n    println!(\"len: {}\", boxed.len());\n}\n</code></pre><p>但如果你在本地使用 “cargo run —release” 编译成 release 代码运行，会正常执行！</p><p>这是因为 “cargo run” 或者在 playground 下运行，默认是 debug build，它不会做任何 inline 的优化，而 Box::new() 的实现就一行代码，并注明了要 inline，在 release 模式下，这个函数调用会被优化掉：</p><pre><code class=\"language-rust\">#[cfg(not(no_global_oom_handling))]\n#[inline(always)]\n#[doc(alias = \"alloc\")]\n#[doc(alias = \"malloc\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn new(x: T) -&gt; Self {\n    box x\n}\n</code></pre><p>如果不 inline，整个 16M 的大数组会通过栈内存传递给 Box::new，导致栈溢出。这里我们惊喜地发现了一个新的关键字 box。然而 box 是 Rust 内部的关键字，用户代码无法调用，它只出现在 Rust 代码中，用于分配堆内存，box 关键字在编译时，会使用内存分配器分配内存。</p><p>搞明白 Box&lt;T&gt; 的内存分配，我们还很关心内存是如何释放的，来看它实现的 Drop trait：</p><pre><code class=\"language-rust\">#[stable(feature = \"rust1\", since = \"1.0.0\")]\nunsafe impl&lt;#[may_dangle] T: ?Sized, A: Allocator&gt; Drop for Box&lt;T, A&gt; {\n    fn drop(&amp;mut self) {\n        // FIXME: Do nothing, drop is currently performed by compiler.\n    }\n}\n</code></pre><p>哈，目前 drop trait 什么都没有做，编译器会自动插入 deallocate 的代码。这是 Rust 语言的一种策略：<strong>在具体实现还没有稳定下来之前，我先把接口稳定，实现随着之后的迭代慢慢稳定</strong>。</p><p>这样可以极大地避免语言在发展的过程中，引入对开发者而言的破坏性更新（breaking change）。破坏性更新会使得开发者在升级语言的版本时，不得不大幅更改原有代码。</p><p>Python 是个前车之鉴，由于引入了大量的破坏性更新，Python 2 到 3 的升级花了十多年才慢慢完成。所以 Rust 在设计接口时非常谨慎，很多重要的接口都先以库的形式存在了很久，最终才成为标准库的一部分，比如 Future trait。一旦接口稳定后，内部的实现可以慢慢稳定。</p><h2>Cow&lt;'a, B&gt;</h2><p>了解了 Box 的工作原理后，再来看 Cow&lt;'a, B&gt;的原理和使用场景，（<a href=\"https://time.geekbang.org/column/article/420021\">第12讲</a>）讲泛型数据结构的时候，我们简单讲过参数B的三个约束。</p><p>Cow 是 Rust 下用于提供写时克隆（Clone-on-Write）的一个智能指针，它跟虚拟内存管理的写时复制（Copy-on-write）有异曲同工之妙：<strong>包裹一个只读借用，但如果调用者需要所有权或者需要修改内容，那么它会 clone 借用的数据</strong>。</p><p>我们看Cow的定义：</p><pre><code class=\"language-rust\">pub enum Cow&lt;'a, B&gt; where B: 'a + ToOwned + ?Sized {\n  Borrowed(&amp;'a B),\n  Owned(&lt;B as ToOwned&gt;::Owned),\n}\n</code></pre><p>它是一个 enum，可以包含一个对类型 B 的只读引用，或者包含对类型 B 的拥有所有权的数据。</p><p>这里又引入了两个 trait，首先是 ToOwned，在 ToOwned trait 定义的时候，又引入了 Borrow trait，它们都是 <a href=\"https://doc.rust-lang.org/std/borrow/index.html\">std::borrow</a> 下的 trait：</p><pre><code class=\"language-rust\">pub trait ToOwned {\n    type Owned: Borrow&lt;Self&gt;;\n    #[must_use = \"cloning is often expensive and is not expected to have side effects\"]\n    fn to_owned(&amp;self) -&gt; Self::Owned;\n\n    fn clone_into(&amp;self, target: &amp;mut Self::Owned) { ... }\n}\n\npub trait Borrow&lt;Borrowed&gt; where Borrowed: ?Sized {\n    fn borrow(&amp;self) -&gt; &amp;Borrowed;\n}\n</code></pre><p>如果你看不懂这段代码，不要着急，想要理解 Cow trait，ToOwned trait 是一道坎，因为 type Owned: Borrow&lt;Self&gt; 不好理解，耐下心来我们拆开一点点解读。</p><p>首先，type Owned: Borrow&lt;Self&gt; 是一个带有关联类型的 trait ，如果你对这个知识点有些遗忘，可以再复习一下<a href=\"https://time.geekbang.org/column/article/420028\">第 13 讲</a>。这里 Owned 是关联类型，需要使用者定义，和我们之前介绍的关联类型不同的是，这里 Owned 不能是任意类型，它必须满足 Borrow&lt;T&gt; trait。例如我们看 <a href=\"https://doc.rust-lang.org/src/alloc/str.rs.html#215-227\">str 对 ToOwned trait 的实现</a>：</p><pre><code class=\"language-rust\">impl ToOwned for str {\n    type Owned = String;\n    #[inline]\n    fn to_owned(&amp;self) -&gt; String {\n        unsafe { String::from_utf8_unchecked(self.as_bytes().to_owned()) }\n    }\n\n    fn clone_into(&amp;self, target: &amp;mut String) {\n        let mut b = mem::take(target).into_bytes();\n        self.as_bytes().clone_into(&amp;mut b);\n        *target = unsafe { String::from_utf8_unchecked(b) }\n    }\n}\n</code></pre><p>可以看到关联类型 Owned 被定义为 String，而根据要求，String 必须定义 Borrow&lt;T&gt;，那这里 Borrow&lt;T&gt; 里的泛型变量 T 是谁呢？</p><p>ToOwned 要求是 Borrow&lt;Self&gt;，而此刻实现 ToOwned 的主体是 str，所以 Borrow&lt;Self&gt; 是 Borrow&lt;str&gt;，也就是说 String 要实现 Borrow&lt;str&gt;，我们看<a href=\"https://doc.rust-lang.org/std/string/struct.String.html#impl-Borrow%3Cstr%3E\">文档</a>，它的确<a href=\"https://doc.rust-lang.org/src/alloc/str.rs.html#198-203\">实现了这个 trait</a>：</p><pre><code class=\"language-rust\">impl Borrow&lt;str&gt; for String {\n    #[inline]\n    fn borrow(&amp;self) -&gt; &amp;str {\n        &amp;self[..]\n    }\n}\n</code></pre><p>你是不是有点晕了，我用一张图梳理了这几个 trait 之间的关系：<br>\n<img src=\"https://static001.geekbang.org/resource/image/ay/52/ayyc5f85c3d9897ddd1acd4c067a5852.jpg?wh=3248x2012\" alt=\"\"></p><p>通过这张图，我们可以更好地搞清楚 Cow 和 ToOwned / Borrow&lt;T&gt; 之间的关系。</p><p>这里，你可能会疑惑，为何 Borrow 要定义成一个泛型 trait 呢？搞这么复杂，难道一个类型还可以被借用成不同的引用么？</p><p>是的。我们看一个例子（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=36831f05a3e27690beac9fd5beb5b524\">代码</a>）：</p><pre><code class=\"language-rust\">use std::borrow::Borrow;\n\nfn main() {\n    let s = \"hello world!\".to_owned();\n\n    // 这里必须声明类型，因为 String 有多个 Borrow&lt;T&gt; 实现\n    // 借用为 &amp;String\n    let r1: &amp;String = s.borrow();\n    // 借用为 &amp;str\n    let r2: &amp;str = s.borrow();\n\n    println!(\"r1: {:p}, r2: {:p}\", r1, r2);\n}\n</code></pre><p>在这里例子里，String 可以被借用为 &amp;String，也可以被借用为 &amp;str。</p><p>好，再来继续看 Cow。我们说它是智能指针，那它自然需要<a href=\"https://doc.rust-lang.org/src/alloc/borrow.rs.html#332-341\">实现 Deref trait</a>：</p><pre><code class=\"language-rust\">impl&lt;B: ?Sized + ToOwned&gt; Deref for Cow&lt;'_, B&gt; {\n    type Target = B;\n\n    fn deref(&amp;self) -&gt; &amp;B {\n        match *self {\n            Borrowed(borrowed) =&gt; borrowed,\n            Owned(ref owned) =&gt; owned.borrow(),\n        }\n    }\n}\n</code></pre><p>实现的原理很简单，根据 self 是 Borrowed 还是 Owned，我们分别取其内容，生成引用：</p><ul>\n<li>对于 Borrowed，直接就是引用；</li>\n<li>对于 Owned，调用其 borrow() 方法，获得引用。</li>\n</ul><p>这就很厉害了。虽然 Cow 是一个 enum，但是通过 Deref 的实现，我们可以获得统一的体验，比如 Cow&lt;str&gt;，使用的感觉和 &amp;str / String 是基本一致的。注意，<strong>这种根据 enum 的不同状态来进行统一分发的方法是第三种分发手段</strong>，之前讲过可以使用泛型参数做静态分发和使用 trait object 做动态分发。</p><h3>使用场景</h3><p>那么 Cow 有什么用呢？显然，它可以在需要的时候才进行内存的分配和拷贝，在很多应用场合，它可以大大提升系统的效率。如果 Cow&lt;'a, B&gt; 中的 Owned 数据类型是一个需要在堆上分配内存的类型，如 String、Vec&lt;T&gt; 等，还能减少堆内存分配的次数。</p><p>我们说过，相对于栈内存的分配释放来说，堆内存的分配和释放效率要低很多，其内部还涉及系统调用和锁，<strong>减少不必要的堆内存分配是提升系统效率的关键手段</strong>。而 Rust 的 Cow&lt;'a, B&gt;，在帮助你达成这个效果的同时，使用体验还非常简单舒服。</p><p>光这么说没有代码佐证，我们看一个使用 Cow 的实际例子。</p><p>在解析 URL 的时候，我们经常需要将 querystring 中的参数，提取成 KV pair 来进一步使用。绝大多数语言中，提取出来的 KV 都是新的字符串，在每秒钟处理几十 k 甚至上百 k 请求的系统中，你可以想象这会带来多少次堆内存的分配。</p><p>但在 Rust 中，我们可以用 Cow 类型轻松高效处理它，在读取 URL 的过程中：</p><ul>\n<li>每解析出一个 key 或者 value，我们可以用一个 &amp;str 指向 URL 中相应的位置，然后用 Cow 封装它；</li>\n<li>而当解析出来的内容不能直接使用，需要 decode 时，比如 “hello%20world”，我们可以生成一个解析后的 String，同样用 Cow 封装它。</li>\n</ul><p>看下面的例子（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=4a7ec8125238dfefc0b8b82f262c3eaf\">代码</a>）：</p><pre><code class=\"language-rust\">use std::borrow::Cow;\n\nuse url::Url;\nfn main() {\n    let url = Url::parse(\"https://tyr.com/rust?page=1024&amp;sort=desc&amp;extra=hello%20world\").unwrap();\n    let mut pairs = url.query_pairs();\n\n    assert_eq!(pairs.count(), 3);\n\n    let (mut k, v) = pairs.next().unwrap();\n    // 因为 k, v 都是 Cow&lt;str&gt; 他们用起来感觉和 &amp;str 或者 String 一样\n    // 此刻，他们都是 Borrowed\n    println!(\"key: {}, v: {}\", k, v);\n    // 当修改发生时，k 变成 Owned\n    k.to_mut().push_str(\"_lala\");\n\n    print_pairs((k, v));\n\n    print_pairs(pairs.next().unwrap());\n    // 在处理 extra=hello%20world 时，value 被处理成 \"hello world\"\n    // 所以这里 value 是 Owned\n    print_pairs(pairs.next().unwrap());\n}\n\nfn print_pairs(pair: (Cow&lt;str&gt;, Cow&lt;str&gt;)) {\n    println!(\"key: {}, value: {}\", show_cow(pair.0), show_cow(pair.1));\n}\n\nfn show_cow(cow: Cow&lt;str&gt;) -&gt; String {\n    match cow {\n        Cow::Borrowed(v) =&gt; format!(\"Borrowed {}\", v),\n        Cow::Owned(v) =&gt; format!(\"Owned {}\", v),\n    }\n}\n</code></pre><p>是不是很简洁。</p><p>类似 URL parse 这样的处理方式，在 Rust 标准库和第三方库中非常常见。比如 Rust 下著名的 <a href=\"https://serde.rs/\">serde 库</a>，可以非常高效地对 Rust 数据结构，进行序列化/反序列化操作，它对 Cow 就有很好的支持。</p><p>我们可以通过如下代码将一个 JSON 数据反序列化成 User 类型，同时让 User 中的 name 使用 Cow 来引用 JSON 文本中的内容（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=5154f27658e3853fb894b3de993d877c\">代码</a>）：</p><pre><code class=\"language-rust\">use serde::Deserialize;\nuse std::borrow::Cow;\n\n#[derive(Debug, Deserialize)]\nstruct User&lt;'input&gt; {\n    #[serde(borrow)]\n    name: Cow&lt;'input, str&gt;,\n    age: u8,\n}\n\nfn main() {\n    let input = r#\"{ \"name\": \"Tyr\", \"age\": 18 }\"#;\n    let user: User = serde_json::from_str(input).unwrap();\n\n    match user.name {\n        Cow::Borrowed(x) =&gt; println!(\"borrowed {}\", x),\n        Cow::Owned(x) =&gt; println!(\"owned {}\", x),\n    }\n}\n</code></pre><p>未来在你用 Rust 构造系统时，也可以充分考虑在数据类型中使用 Cow。</p><h2>MutexGuard&lt;T&gt;</h2><p>如果说，上面介绍的 String、Box&lt;T&gt;、Cow&lt;'a, B&gt; 等智能指针，都是通过 Deref 来提供良好的用户体验，那么 MutexGuard&lt;T&gt; 是另外一类很有意思的智能指针：它不但通过 Deref 提供良好的用户体验，<strong>还通过 Drop trait 来确保，使用到的内存以外的资源在退出时进行释放</strong>。</p><p>MutexGuard<t> 这个结构是在调用 <a href=\"https://doc.rust-lang.org/src/std/sync/mutex.rs.html#279-284\">Mutex::lock</a> 时生成的：</t></p><pre><code class=\"language-rust\">pub fn lock(&amp;self) -&gt; LockResult&lt;MutexGuard&lt;'_, T&gt;&gt; {\n    unsafe {\n        self.inner.raw_lock();\n        MutexGuard::new(self)\n    }\n}\n</code></pre><p>首先，它会取得锁资源，如果拿不到，会在这里等待；如果拿到了，会把 Mutex 结构的引用传递给 MutexGuard。</p><p>我们看 MutexGuard 的<a href=\"https://doc.rust-lang.org/src/std/sync/mutex.rs.html#190-195\">定义</a>以及它的 Deref 和 Drop 的<a href=\"https://doc.rust-lang.org/src/std/sync/mutex.rs.html#462-487\">实现</a>，很简单：</p><pre><code class=\"language-rust\">// 这里用 must_use，当你得到了却不使用 MutexGuard 时会报警\n#[must_use = \"if unused the Mutex will immediately unlock\"]\npub struct MutexGuard&lt;'a, T: ?Sized + 'a&gt; {\n    lock: &amp;'a Mutex&lt;T&gt;,\n    poison: poison::Guard,\n}\n\nimpl&lt;T: ?Sized&gt; Deref for MutexGuard&lt;'_, T&gt; {\n    type Target = T;\n\n    fn deref(&amp;self) -&gt; &amp;T {\n        unsafe { &amp;*self.lock.data.get() }\n    }\n}\n\nimpl&lt;T: ?Sized&gt; DerefMut for MutexGuard&lt;'_, T&gt; {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut T {\n        unsafe { &amp;mut *self.lock.data.get() }\n    }\n}\n\nimpl&lt;T: ?Sized&gt; Drop for MutexGuard&lt;'_, T&gt; {\n    #[inline]\n    fn drop(&amp;mut self) {\n        unsafe {\n            self.lock.poison.done(&amp;self.poison);\n            self.lock.inner.raw_unlock();\n        }\n    }\n}\n</code></pre><p>从代码中可以看到，当 MutexGuard 结束时，Mutex 会做 unlock，这样用户在使用 Mutex 时，可以不必关心何时释放这个互斥锁。因为无论你在调用栈上怎样传递 MutexGuard ，哪怕在错误处理流程上提前退出，Rust 有所有权机制，可以确保只要 MutexGuard 离开作用域，锁就会被释放。</p><h3>使用场景</h3><p>我们来看一个使用 Mutex 和 MutexGuard 的例子（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f01427ed0a8534ade980b88791be9d5b\">代码</a>），代码很简单，我写了详尽的注释帮助你理解。</p><pre><code class=\"language-rust\">use lazy_static::lazy_static;\nuse std::borrow::Cow;\nuse std::collections::HashMap;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::time::Duration;\n\n// lazy_static 宏可以生成复杂的 static 对象\nlazy_static! {\n    // 一般情况下 Mutex 和 Arc 一起在多线程环境下提供对共享内存的使用\n    // 如果你把 Mutex 声明成 static，其生命周期是静态的，不需要 Arc\n    static ref METRICS: Mutex&lt;HashMap&lt;Cow&lt;'static, str&gt;, usize&gt;&gt; =\n        Mutex::new(HashMap::new());\n}\n\nfn main() {\n    // 用 Arc 来提供并发环境下的共享所有权（使用引用计数）\n    let metrics: Arc&lt;Mutex&lt;HashMap&lt;Cow&lt;'static, str&gt;, usize&gt;&gt;&gt; =\n        Arc::new(Mutex::new(HashMap::new()));\n    for _ in 0..32 {\n        let m = metrics.clone();\n        thread::spawn(move || {\n            let mut g = m.lock().unwrap();\n            // 此时只有拿到 MutexGuard 的线程可以访问 HashMap\n            let data = &amp;mut *g;\n            // Cow 实现了很多数据结构的 From trait，\n\t\t\t\t\t\t// 所以我们可以用 \"hello\".into() 生成 Cow\n            let entry = data.entry(\"hello\".into()).or_insert(0);\n            *entry += 1;\n\t\t\t\t\t\t// MutexGuard 被 Drop，锁被释放\n        });\n    }\n\n    thread::sleep(Duration::from_millis(100));\n\n    println!(\"metrics: {:?}\", metrics.lock().unwrap());\n}\n</code></pre><p>如果你有疑问，这样如何保证锁的线程安全呢？如果我在线程 1 拿到了锁，然后把 MutexGuard 移动给线程 2 使用，加锁和解锁在完全不同的线程下，会有很大的死锁风险。怎么办？</p><p>不要担心，MutexGuard 不允许 Send，只允许 Sync，也就是说，你可以把 MutexGuard 的引用传给另一个线程使用，但你无法把 MutexGuard 整个移动到另一个线程：</p><pre><code class=\"language-rust\">impl&lt;T: ?Sized&gt; !Send for MutexGuard&lt;'_, T&gt; {}\nunsafe impl&lt;T: ?Sized + Sync&gt; Sync for MutexGuard&lt;'_, T&gt; {}\n</code></pre><p>类似 MutexGuard 的智能指针有很多用途。比如要创建一个连接池，你可以在 Drop trait 中，回收 checkout 出来的连接，将其再放回连接池。如果你对此感兴趣，可以看看 <a href=\"https://github.com/sfackler/r2d2/blob/master/src/lib.rs#L611\">r2d2 的实现</a>，它是 Rust 下一个数据库连接池的实现。</p><h2>实现自己的智能指针</h2><p>到目前为止，三个经典的智能指针，在堆上创建内存的 Box&lt;T&gt;、提供写时克隆的 Cow&lt;'a, B&gt;，以及用于数据加锁的 MutexGuard&lt;T&gt;，它们的实现和使用方法就讲完了。</p><p>那么，如果我们想实现自己的智能指针，该怎么做？或者咱们换个问题：有什么数据结构适合实现成为智能指针？</p><p>因为很多时候，<strong>我们需要实现一些自动优化的数据结构</strong>，在某些情况下是一种优化的数据结构和相应的算法，在其他情况下使用通用的结构和通用的算法。</p><p>比如当一个 HashSet 的内容比较少的时候，可以用数组实现，但内容逐渐增多，再转换成用哈希表实现。如果我们想让使用者不用关心这些实现的细节，使用同样的接口就能享受到更好的性能，那么，就可以考虑用智能指针来统一它的行为。</p><h3>使用小练习</h3><p>我们来看一个实际的例子。之前讲过，Rust 下 String 在栈上占了 24 个字节，然后在堆上存放字符串实际的内容，对于一些比较短的字符串，这很浪费内存。有没有办法在字符串长到一定程度后，才使用标准的字符串呢？</p><p>参考 Cow，我们可以用一个 enum 来处理：当字符串小于 N 字节时，我们直接用栈上的数组，否则，使用 String。但是这个 N 不宜太大，否则当使用 String 时，会比目前的版本浪费内存。</p><p>怎么设计呢？之前在内存管理的部分讲过，当使用 enum 时，额外的 tag + 为了对齐而使用的 padding 会占用一些内存。因为 String 结构是 8 字节对齐的，我们的 enum 最小 8 + 24 = 32 个字节。</p><p>所以，可以设计一个数据结构，<strong>内部用一个字节表示字符串的长度，用 30 个字节表示字符串内容，再加上 1 个字节的 tag，正好也是 32 字节，可以和 String 放在一个 enum 里使用</strong>。我们暂且称这个 enum 叫 MyString，它的结构如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/97/f45e1f15a1448943979f93d13cdc0197.jpg?wh=2987x1677\" alt=\"\"></p><p>为了让 MyString 表现行为和 &str 一致，我们可以通过实现 Deref trait 让 MyString 可以被解引用成 &str。除此之外，还可以实现 Debug/Display 和 From&lt;T&gt; trait，让 MyString 使用起来更方便。</p><p>整个实现的代码如下（<a href=\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ce83a82cd66aa412e68eebf6b292a832\">代码</a>），代码本身不难理解，你可以试着自己实现一下，或者一行行抄下来运行，感受一下。</p><pre><code class=\"language-rust\">use std::{fmt, ops::Deref, str};\n\nconst MINI_STRING_MAX_LEN: usize = 30;\n\n// MyString 里，String 有 3 个 word，供 24 字节，所以它以 8 字节对齐\n// 所以 enum 的 tag + padding 最少 8 字节，整个结构占 32 字节。\n// MiniString 可以最多有 30 字节（再加上 1 字节长度和 1字节 tag），就是 32 字节.\nstruct MiniString {\n    len: u8,\n    data: [u8; MINI_STRING_MAX_LEN],\n}\n\nimpl MiniString {\n    // 这里 new 接口不暴露出去，保证传入的 v 的字节长度小于等于 30\n    fn new(v: impl AsRef&lt;str&gt;) -&gt; Self {\n        let bytes = v.as_ref().as_bytes();\n        // 我们在拷贝内容时一定要使用字符串的字节长度\n        let len = bytes.len();\n        let mut data = [0u8; MINI_STRING_MAX_LEN];\n        data[..len].copy_from_slice(bytes);\n        Self {\n            len: len as u8,\n            data,\n        }\n    }\n}\n\nimpl Deref for MiniString {\n    type Target = str;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        // 由于生成 MiniString 的接口是隐藏的，它只能来自字符串，所以下面这行是安全的\n        str::from_utf8(&amp;self.data[..self.len as usize]).unwrap()\n        // 也可以直接用 unsafe 版本\n        // unsafe { str::from_utf8_unchecked(&amp;self.data[..self.len as usize]) }\n    }\n}\n\nimpl fmt::Debug for MiniString {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        // 这里由于实现了 Deref trait，可以直接得到一个 &amp;str 输出\n        write!(f, \"{}\", self.deref())\n    }\n}\n\n#[derive(Debug)]\nenum MyString {\n    Inline(MiniString),\n    Standard(String),\n}\n\n// 实现 Deref 接口对两种不同的场景统一得到 &amp;str\nimpl Deref for MyString {\n    type Target = str;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        match *self {\n            MyString::Inline(ref v) =&gt; v.deref(),\n            MyString::Standard(ref v) =&gt; v.deref(),\n        }\n    }\n}\n\nimpl From&lt;&amp;str&gt; for MyString {\n    fn from(s: &amp;str) -&gt; Self {\n        match s.len() &gt; MINI_STRING_MAX_LEN {\n            true =&gt; Self::Standard(s.to_owned()),\n            _ =&gt; Self::Inline(MiniString::new(s)),\n        }\n    }\n}\n\nimpl fmt::Display for MyString {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        write!(f, \"{}\", self.deref())\n    }\n}\n\nfn main() {\n    let len1 = std::mem::size_of::&lt;MyString&gt;();\n    let len2 = std::mem::size_of::&lt;MiniString&gt;();\n    println!(\"Len: MyString {}, MiniString {}\", len1, len2);\n\n    let s1: MyString = \"hello world\".into();\n    let s2: MyString = \"这是一个超过了三十个字节的很长很长的字符串\".into();\n\n    // debug 输出\n    println!(\"s1: {:?}, s2: {:?}\", s1, s2);\n    // display 输出\n    println!(\n        \"s1: {}({} bytes, {} chars), s2: {}({} bytes, {} chars)\",\n        s1,\n        s1.len(),\n        s1.chars().count(),\n        s2,\n        s2.len(),\n        s2.chars().count()\n    );\n\n    // MyString 可以使用一切 &amp;str 接口，感谢 Rust 的自动 Deref\n    assert!(s1.ends_with(\"world\"));\n    assert!(s2.starts_with(\"这\"));\n}\n</code></pre><p>这个简单实现的 MyString，不管它内部的数据是纯栈上的 MiniString 版本，还是包含堆上内存的 String 版本，使用的体验和 &amp;str 都一致，仅仅牺牲了一点点效率和内存，就可以让小容量的字符串，可以高效地存储在栈上并且自如地使用。</p><p>事实上，Rust 有个叫 smartstring 的第三方库就实现了这个功能。我们的版本在内存上不算经济，对于 String 来说，额外多用了 8 个字节，smartstring 通过优化，只用了和 String 结构一样大小的 24 个字节，就达到了我们想要的结果。你如果感兴趣的话，欢迎去看看它的<a href=\"https://github.com/bodil/smartstring\">源代码</a>。</p><h2>小结</h2><p>今天我们介绍了三个重要的智能指针，它们有各自独特的实现方式和使用场景。</p><p>Box&lt;T&gt; 可以在堆上创建内存，是很多其他数据结构的基础。</p><p>Cow 实现了 Clone-on-write 的数据结构，让你可以在需要的时候再获得数据的所有权。Cow 结构是一种使用 enum 根据当前的状态进行分发的经典方案。甚至，你可以用类似的方案取代 trait object 做动态分发，<a href=\"https://gitlab.com/antonok/enum_dispatch\">其效率是动态分发的数十倍</a>。</p><p>如果你想合理地处理资源相关的管理，MutexGuard 是一个很好的参考，它把从 Mutex 中获得的锁包装起来，实现只要 MutexGuard 退出作用域，锁就一定会释放。如果你要做资源池，可以使用类似 MutexGuard 的方式。</p><h2>思考题</h2><ol>\n<li>目前 MyString 只能从 &amp;str 生成。如果要支持从 String 中生成一个 MyString，该怎么做？</li>\n<li>目前 MyString 只能读取，不能修改，能不能给它加上类似 String 的 <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.push_str\">push_str</a> 接口？</li>\n<li>你知道 Cow&lt;[u8]&gt; 和 Cow&lt;str&gt; 的大小么？试着打印一下看看。想想，为什么它的大小是这样呢？</li>\n</ol><p>欢迎在留言区分享你的思考。今天你已经完成Rust学习第15次打卡了，继续加油，我们下节课见～</p><h2>参考资料</h2><p>常见的通用内存分配器有 glibc 的 <a href=\"http://www.malloc.de/en/\">pthread malloc</a>、Google 开发的 <a href=\"https://github.com/google/tcmalloc\">tcmalloc</a>、FreeBSD 上默认使用的 <a href=\"https://github.com/jemalloc/jemalloc\">jemalloc</a> 等。除了通用内存分配器，对于特定类型内存的分配，我们还可以用 <a href=\"https://en.wikipedia.org/wiki/Slab_allocation\">slab</a>，slab 相当于一个预分配好的对象池，可以扩展和收缩。</p>","neighbors":{"left":{"article_title":"14｜类型系统：有哪些必须掌握的trait？","id":421324},"right":{"article_title":"16｜数据结构：Vec<T>、&[T]、Box<[T]> ，你真的了解集合容器么？","id":422975}},"comments":[{"had_liked":false,"id":313841,"user_name":"GengTeng","can_delete":false,"product_type":"c1","uid":1224623,"ip_address":"","ucode":"3F926F5EF1D075","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/af/8b03ce2c.jpg","comment_is_top":false,"comment_ctime":1632707685,"is_pvip":false,"replies":[{"id":"113740","content":"非常棒！第 1 题还可以用泛型参数进一步统一 String&#47;&amp;str，DRY：<br><br>```Rust<br>impl&lt;T&gt; From&lt;T&gt; for MyString<br>where<br>    T: AsRef&lt;str&gt; + Into&lt;String&gt;,<br>{<br>    fn from(s: T) -&gt; Self {<br>        match s.as_ref().len() &gt; MINI_STRING_MAX_LEN {<br>            true =&gt; Self::Standard(s.into()),<br>            _ =&gt; Self::Inline(MiniString::new(s)),<br>        }<br>    }<br>}<br>```","user_name":"作者回复","comment_id":313841,"uid":"1079375","ip_address":"","utype":1,"ctime":1632798664,"user_name_real":"Tyr"}],"discussion_count":2,"race_medal":0,"score":"66057217125","product_id":100085301,"comment_content":"1.<br>impl From&lt;String&gt; for MyString {<br>    fn from(s: String) -&gt; Self {<br>        if s.len() &gt; MINI_STRING_MAX_LEN {<br>            Self::Standard(s)<br>        } else {<br>            Self::Inline(MiniString::new(s))<br>        }<br>    }<br>}<br>2.<br>impl MyString {<br>    fn push_str(&amp;mut self, string: &amp;str) {<br>        match self {<br>            MyString::Inline(m) =&gt; {<br>                let l = m.len();<br>                let len = l + string.len();<br>                if len &gt; MINI_STRING_MAX_LEN {<br>                    *self = Self::Standard(m.to_string() + string);<br>                } else {<br>                    m.data[l..].copy_from_slice(string.as_bytes());<br>                    m.len = len as u8;<br>                }<br>            }<br>            MyString::Standard(s) =&gt; s.push_str(string),<br>        }<br>    }<br>}<br>3. 32 32<br>Cow&lt;&#39;a, B&gt; 要求 B 实现 ToOwned，其Owned变体的数据为 对应的 Owned 类型，即 [T] 对应的是 Vec&lt;T&gt;， str 对应的是 String，这两个的大小都是24字节，加上枚举占用的一字节以及8字节对齐，就是32字节。<br>","like_count":16,"discussions":[{"author":{"id":1078927,"avatar":"","nickname":"linuxfish","note":"","ucode":"557F21A1CC7EAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401549,"discussion_content":"第二题有点问题：\n\n m.data[l..].copy_from_slice(string.as_bytes()); 应该改成：\n\n m.data[l..len].copy_from_slice(string.as_bytes());\n\ncopy_from_slice 需要两个slice的长度一致，否则会panic","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1633690669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527488,"discussion_content":"非常棒！第 1 题还可以用泛型参数进一步统一 String/&amp;amp;str，DRY：\n\n```Rust\nimpl&amp;lt;T&amp;gt; From&amp;lt;T&amp;gt; for MyString\nwhere\n    T: AsRef&amp;lt;str&amp;gt; + Into&amp;lt;String&amp;gt;,\n{\n    fn from(s: T) -&amp;gt; Self {\n        match s.as_ref().len() &amp;gt; MINI_STRING_MAX_LEN {\n            true =&amp;gt; Self::Standard(s.into()),\n            _ =&amp;gt; Self::Inline(MiniString::new(s)),\n        }\n    }\n}\n```","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632798664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315669,"user_name":"Lucas","can_delete":false,"product_type":"c1","uid":1457955,"ip_address":"","ucode":"A81F5ECB369A7A","user_header":"https://static001.geekbang.org/account/avatar/00/16/3f/23/3ea59027.jpg","comment_is_top":false,"comment_ctime":1633940943,"is_pvip":false,"replies":[{"id":"115292","content":"加油！对暂时理解不了的地方，可以先跳过，之后再回来阅读","user_name":"作者回复","comment_id":315669,"uid":"1079375","ip_address":"","utype":1,"ctime":1635132990,"user_name_real":"Tyr"}],"discussion_count":3,"race_medal":0,"score":"27403744719","product_id":100085301,"comment_content":"跟不上了 看不懂了😭","like_count":6,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528142,"discussion_content":"加油！对暂时理解不了的地方，可以先跳过，之后再回来阅读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635132990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2101988,"avatar":"https://static001.geekbang.org/account/avatar/00/20/12/e4/57ade29a.jpg","nickname":"dva","note":"","ucode":"EE27DAFCBF198D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411447,"discussion_content":"老哥加油撒，不要停下来，我看你动态都停好久了，看不懂的多看几遍慢慢理解，我就是这样。想一想rust的过山车似的学习曲线，柳暗花明又一村。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635930877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2905523,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIDqHQQByGiaXcAk94MdDn3ftupZLXyR6bAKibxOzMxy5h3uBwZ7QiaCiaIfbCMK0cIQfGNax8iawoiaQAg/132","nickname":"nuan","note":"","ucode":"55FF98EB85404D","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550120,"discussion_content":"我也是跟不上，20分钟的课至少要学2小时！到处是新概念，新函数，新语法，😵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644390776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313921,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1401568,"ip_address":"","ucode":"FA942636EE0CC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/e0/d2ff52da.jpg","comment_is_top":false,"comment_ctime":1632741629,"is_pvip":false,"replies":[{"id":"113733","content":"as 是 Rust 的关键字，用于做类型转换，比如：<br>let i = 1; &#47;&#47; i32<br>let u = i as usize; &#47;&#47; usize<br><br>这里 B 有约束是 B: ToOwned，所以 B as ToOwned 是成立的，相当于把 B 转换成 ToOwned，然后因为 ToOwned 带有关联类型，所以强制转换成 ToOwend 后，引用它的关联类型 Owned。","user_name":"作者回复","comment_id":313921,"uid":"1079375","ip_address":"","utype":1,"ctime":1632797806,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"14517643517","product_id":100085301,"comment_content":"Owned(&lt;B as ToOwned&gt;::Owned)  泛型B转换特征名称是个什么样的语法，老师","like_count":3,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527519,"discussion_content":"as 是 Rust 的关键字，用于做类型转换，比如：\nlet i = 1; // i32\nlet u = i as usize; // usize\n\n这里 B 有约束是 B: ToOwned，所以 B as ToOwned 是成立的，相当于把 B 转换成 ToOwned，然后因为 ToOwned 带有关联类型，所以强制转换成 ToOwend 后，引用它的关联类型 Owned。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632797806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324848,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1638684513,"is_pvip":false,"replies":[{"id":"118857","content":"👍","user_name":"作者回复","comment_id":324848,"uid":"1079375","ip_address":"","utype":1,"ctime":1639848114,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10228619105","product_id":100085301,"comment_content":"关于所有权和智能指针的理解，可以看看这篇文章<br>https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;54078587<br>这些概念在c++里面都是有的，因此从c++的角度去理解一下智能指针与普通指针区别，什么是移动语义，那样返回来看rust的概念，就明白清晰很多了。","like_count":2,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539817,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639848114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316540,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1401568,"ip_address":"","ucode":"FA942636EE0CC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/e0/d2ff52da.jpg","comment_is_top":false,"comment_ctime":1634375037,"is_pvip":false,"replies":[{"id":"114688","content":"对的。","user_name":"作者回复","comment_id":316540,"uid":"1079375","ip_address":"","utype":1,"ctime":1634539963,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"10224309629","product_id":100085301,"comment_content":"String在堆上分配内存,String是栈上的一个结构体,假如Box::new(String),是不是String结构体也在堆上了","like_count":2,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528405,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634539963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328110,"user_name":"Mr_李冲","can_delete":false,"product_type":"c1","uid":1631606,"ip_address":"","ucode":"61FAF80BA5FB0B","user_header":"https://static001.geekbang.org/account/avatar/00/18/e5/76/5d0b66aa.jpg","comment_is_top":false,"comment_ctime":1640533563,"is_pvip":true,"replies":[{"id":"120783","content":"多谢指正！估计是代码粘到文档中的问题，我让编辑修改了。github 上的代码是正确的。","user_name":"作者回复","comment_id":328110,"uid":"1079375","ip_address":"","utype":1,"ctime":1642309861,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5935500859","product_id":100085301,"comment_content":"文中Cow部分示例段Url::parse有个bug，url左右两边各有个尖括号，需要去掉，否则会解析url失败，unwrap后导致程序崩溃。<br>更正后是下面这个：<br>let url = Url::parse(&quot;https:&#47;&#47;tyr.com&#47;rust?page=1024&amp;sort=desc&amp;extra=hello%20world&quot;).unwrap();","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546422,"discussion_content":"多谢指正！估计是代码粘到文档中的问题，我让编辑修改了。github 上的代码是正确的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642309861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323940,"user_name":"yg","can_delete":false,"product_type":"c1","uid":1136892,"ip_address":"","ucode":"0CFC91CA3F93EB","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/fc/c3be5d8b.jpg","comment_is_top":false,"comment_ctime":1638235300,"is_pvip":true,"replies":[{"id":"118875","content":"可以参考：https:&#47;&#47;github.com&#47;Rust-for-Linux&#47;linux&#47;tree&#47;rust&#47;Documentation&#47;rust","user_name":"作者回复","comment_id":323940,"uid":"1079375","ip_address":"","utype":1,"ctime":1639849573,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5933202596","product_id":100085301,"comment_content":"陈老师您好，用rust编写内核模块的话，哪里有资料可以参考么","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539836,"discussion_content":"可以参考：https://github.com/Rust-for-Linux/linux/tree/rust/Documentation/rust","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639849573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320335,"user_name":"Ryan","can_delete":false,"product_type":"c1","uid":1053460,"ip_address":"","ucode":"11155E0BD72A14","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/14/e5a80f4b.jpg","comment_is_top":false,"comment_ctime":1636262921,"is_pvip":false,"replies":[{"id":"116339","content":"慢慢来，别急","user_name":"作者回复","comment_id":320335,"uid":"1079375","ip_address":"","utype":1,"ctime":1636524514,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5931230217","product_id":100085301,"comment_content":"我感觉这课程得至少刷3遍才能看懂，已经跟不上了。。。","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529961,"discussion_content":"慢慢来，别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636524514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319107,"user_name":"Ryan","can_delete":false,"product_type":"c1","uid":2739803,"ip_address":"","ucode":"026C66ED684E00","user_header":"","comment_is_top":false,"comment_ctime":1635587931,"is_pvip":false,"replies":[{"id":"116574","content":"在线程间传递栈上的有所有权的数据会 move，所以不会有问题。","user_name":"作者回复","comment_id":319107,"uid":"1079375","ip_address":"","utype":1,"ctime":1636641726,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5930555227","product_id":100085301,"comment_content":"这样实现出来的MyString如果传递给另一个线程，内部栈上的内存可能被释放了。这方面与标准String的区别是如何体现并加以保证的呢？","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529502,"discussion_content":"在线程间传递栈上的有所有权的数据会 move，所以不会有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636641726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313869,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1632724489,"is_pvip":false,"replies":[{"id":"113737","content":"正确！<br><br>第二题可以使用 copy_from_slice 让代码更简洁一些：<br><br>```rust<br>impl MyString {<br>    pub fn push_str(&amp;mut self, s: &amp;str) {<br>        match *self {<br>            MyString::Inline(ref mut v) =&gt; {<br>                let len = v.len as usize;<br>                let len1 = s.len();<br>                if len + len1 &gt; MINI_STRING_MAX_LEN {<br>                    let mut owned = v.deref().to_string();<br>                    owned.push_str(s);<br>                    *self = MyString::Standard(owned);<br>                } else {<br>                    let total = len + len1;<br>                    v.data[len..len + len1].copy_from_slice(s.as_bytes());<br>                    v.len = total as u8;<br>                }<br>            }<br>            MyString::Standard(ref mut v) =&gt; v.push_str(s),<br>        }<br>    }<br>}<br>```<br><br>完整代码：https:&#47;&#47;play.rust-lang.org&#47;?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8066bd343bd142369fb327d7877db814","user_name":"作者回复","comment_id":313869,"uid":"1079375","ip_address":"","utype":1,"ctime":1632798427,"user_name_real":"Tyr"}],"discussion_count":2,"race_medal":0,"score":"5927691785","product_id":100085301,"comment_content":"Cow and ToOwned一直在我的todo list里面吃灰, 感谢老师这么清晰的讲解, 让它们出来放风之后继续回去躺灰...<br><br>1-3的代码 https:&#47;&#47;play.rust-lang.org&#47;?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4e790189feaa66f784e60aa614931a13<br><br>1. <br>    impl From&lt;String&gt; for MyString {<br>        fn from(s: String) -&gt; Self {<br>            if s.len() &gt; MINI_STRING_MAX_LEN {<br>                Self::Standard(s)<br>            } else {<br>                Self::Inline(MiniString::new(s))<br>            }<br>        }<br>    }<br><br>2.<br><br>    impl MyString {<br>        pub fn push_str(&amp;mut self, string: &amp;str) {<br>            match self {<br>                Self::Inline(s) =&gt; {<br>                    if s.len as usize + string.len() &lt;= MINI_STRING_MAX_LEN {<br>                        let bytes = string.as_bytes();<br>                        let offset = s.len as usize;<br>                        for ii in 0..bytes.len() {<br>                            s.data[offset + ii] = bytes[ii];<br>                        }<br>                        s.len += bytes.len() as u8;<br>                    } else {<br>                        let mut ss = String::with_capacity(s.len() as usize + string.len());<br>                        &#47;&#47; 使用 from_utf8_unchecked 版本的 deref<br>                        ss.push_str(s);<br>                        ss.push_str(string);<br>                        *self = MyString::from(ss);<br>                    }<br>                }<br>                Self::Standard(s) =&gt; {<br>                    s.push_str(string);<br>                }<br>            }<br>        }<br>    }<br>    <br>3. 32; str 对应的 owned是String, 24 bytes. &amp;str是fat ptr, 16 bytes; tag 1一个字节, 然而String的alignment是8, tag需要对齐, 于是加上7个padding; `[u8]` 同理","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527498,"discussion_content":"正确！\n\n第二题可以使用 copy_from_slice 让代码更简洁一些：\n\n```rust\nimpl MyString {\n    pub fn push_str(&amp;amp;mut self, s: &amp;amp;str) {\n        match *self {\n            MyString::Inline(ref mut v) =&amp;gt; {\n                let len = v.len as usize;\n                let len1 = s.len();\n                if len + len1 &amp;gt; MINI_STRING_MAX_LEN {\n                    let mut owned = v.deref().to_string();\n                    owned.push_str(s);\n                    *self = MyString::Standard(owned);\n                } else {\n                    let total = len + len1;\n                    v.data[len..len + len1].copy_from_slice(s.as_bytes());\n                    v.len = total as u8;\n                }\n            }\n            MyString::Standard(ref mut v) =&amp;gt; v.push_str(s),\n        }\n    }\n}\n```\n\n完整代码：https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=8066bd343bd142369fb327d7877db814","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632798427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111835,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","nickname":"Marvichov","note":"","ucode":"7482099415C41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398482,"discussion_content":"感谢老师,  确实!\n\n感觉还是需要先reserve capacity. 因为owned可能会allocate new memory after push_str\n\n```\n                    let mut owned = v.deref().to_string();\n                    owned.push_str(s);   // might reallocate\n                    *self = MyString::Standard(owned);\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632799267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313814,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1632696881,"is_pvip":true,"replies":[{"id":"113719","content":"对，所以它使用了 drop 接口，具体怎么实现现在是由编译器自动插入，未来可能有其它更具体的实现。不过怎么实现，只要是用了 drop 接口，对用户代码来说不受影响。","user_name":"作者回复","comment_id":313814,"uid":"1079375","ip_address":"","utype":1,"ctime":1632796171,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5927664177","product_id":100085301,"comment_content":"有个小疑问：为什么说Box&lt;T&gt;的Drop trait由编译器实现是为了稳定接口？只要接口确定了，接口的实现怎么换对于使用者来说都无所谓吧？猜测会不会是为了实现上的效率直接生成汇编，而汇编是unstable的，无法通过stable编译，所以只能先放在编译器里了？从这个角度来看的话，其实要稳定的不是Drop trait，而是代码内嵌汇编这个feature?<br><br>(其实主要是看到python被拿出来说事有点不开心，抬个杠 ;-）","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527479,"discussion_content":"对，所以它使用了 drop 接口，具体怎么实现现在是由编译器自动插入，未来可能有其它更具体的实现。不过怎么实现，只要是用了 drop 接口，对用户代码来说不受影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632796171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357423,"user_name":"风斩断晚霞","can_delete":false,"product_type":"c1","uid":2160093,"ip_address":"湖北","ucode":"74BC020047A2B4","user_header":"https://static001.geekbang.org/account/avatar/00/20/f5/dd/bb991e80.jpg","comment_is_top":false,"comment_ctime":1663236084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663236084","product_id":100085301,"comment_content":"Standard 的 MyString 对齐后是不是空了 7 个字节？","like_count":0},{"had_liked":false,"id":352073,"user_name":"沈畅","can_delete":false,"product_type":"c1","uid":1077953,"ip_address":"","ucode":"7404E41356B36B","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/c1/59509397.jpg","comment_is_top":false,"comment_ctime":1658373133,"is_pvip":true,"replies":[{"id":"128031","content":"恩简单说明一下前面的课程设计思路：<br><br>-前置篇是编程相关的最基本概念<br>-基础篇是开始接触Rust，语法介绍了1讲，然后插入了get hands dirty 项目从写代码中直观感受Rust语法特性，然后就讲几个Rust的学习重难点了：所有权、生命周期、函数式编程特性、类型系统、泛型编程、错误处理等<br><br>作为“第一课”，语法讲的不是很多确实不够友好，一是课程篇幅有限，二是Rust的官方文档做的非常好，另外也有老师个人倾向觉得语法详细讲没有太大必要，毕竟再怎么样讲，也得学习者自己敲代码上手慢慢熟悉风格。<br><br>所以可能没有给你非常好的学习体验，表示抱歉。<br><br>你可以配合官方的Rust book一起使用，另外加餐中老师和几个同学也分享了自己的学习资料，祝学习愉快～","user_name":"编辑回复","comment_id":352073,"uid":"2547771","ip_address":"","utype":2,"ctime":1658374431,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1658373133","product_id":100085301,"comment_content":"课程学到这，最大的问题感觉不成体系，每篇文章像是博客专题文章。但是章节之间没有体系，作为第一课感觉有些不妥。","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580794,"discussion_content":"恩简单说明一下前面的课程设计思路：\n\n-前置篇是编程相关的最基本概念\n-基础篇是开始接触Rust，语法介绍了1讲，然后插入了get hands dirty 项目从写代码中直观感受Rust语法特性，然后就讲几个Rust的学习重难点了：所有权、生命周期、函数式编程特性、类型系统、泛型编程、错误处理等\n\n作为“第一课”，语法讲的不是很多确实不够友好，一是课程篇幅有限，二是Rust的官方文档做的非常好，另外也有老师个人倾向觉得语法详细讲没有太大必要，毕竟再怎么样讲，也得学习者自己敲代码上手慢慢熟悉风格。\n\n所以可能没有给你非常好的学习体验，表示抱歉。\n\n你可以配合官方的Rust book一起使用，另外加餐中老师和几个同学也分享了自己的学习资料，祝学习愉快～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658374431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077953,"avatar":"https://static001.geekbang.org/account/avatar/00/10/72/c1/59509397.jpg","nickname":"沈畅","note":"","ucode":"7404E41356B36B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580827,"discussion_content":"希望今后课程体系上进行优化，知识点能够有前后衔接，确实需要辅助一些资料才能学下来。文章质量还是很高的，有独到之处。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658387285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350903,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1657328315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657328315","product_id":100085301,"comment_content":"用老师的推迟的视角，Cow其实是将数据的使用方式(借用还是所有权)推迟到了函数中。","like_count":0},{"had_liked":false,"id":344279,"user_name":"鹅帮逮","can_delete":false,"product_type":"c1","uid":2755534,"ip_address":"","ucode":"A6DB1BEFDA5D9A","user_header":"https://static001.geekbang.org/account/avatar/00/2a/0b/ce/f0c520d1.jpg","comment_is_top":false,"comment_ctime":1651417189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651417189","product_id":100085301,"comment_content":"Cow的动态分发是只限于所有者和借用吗？还有其他的例子吗","like_count":0},{"had_liked":false,"id":336378,"user_name":"2qif49lt","can_delete":false,"product_type":"c1","uid":1061853,"ip_address":"","ucode":"F9AF272776CEDA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6oiaaIrgh7A3gy0FxVx8kIhUVp9U0ibSxIBCZHK9Ivo4PY1gibmBVicKTBGjaDVCUxObDdrYVwzmmwVA/132","comment_is_top":false,"comment_ctime":1646120690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646120690","product_id":100085301,"comment_content":"impl From&lt;String&gt; for MyString {<br>  fn from(s: String) -&gt; Self {<br>    From::&lt;&amp;str&gt;::from(s.as_str())<br>  }<br>}","like_count":0},{"had_liked":false,"id":332988,"user_name":"zzLion","can_delete":false,"product_type":"c1","uid":1475330,"ip_address":"","ucode":"3376B90C230C0A","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/02/fec7a0e1.jpg","comment_is_top":false,"comment_ctime":1643942489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643942489","product_id":100085301,"comment_content":"Mutex和MutexGuard为什么在Duration时才打印出32呢","like_count":0},{"had_liked":false,"id":332501,"user_name":"腾达","can_delete":false,"product_type":"c1","uid":1079876,"ip_address":"","ucode":"72F9CFBA44FDEE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL9hlAIKQ1sGDu16oWLOHyCSicr18XibygQSMLMjuDvKk73deDlH9aMphFsj41WYJh121aniaqBLiaMNg/132","comment_is_top":false,"comment_ctime":1643277609,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1643277609","product_id":100085301,"comment_content":"Box::new() 的实现就一行代码，并注明了要 inline，在 release 模式下，这个函数调用会被优化掉 <br>为什么inline 之后就直接在堆上分配了？","like_count":0,"discussions":[{"author":{"id":1629924,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXdYJyQjatZ6upnYpAvOTFPziaRScMap4Mj45CKBLbGBmXQF1n64dJbaDFDRrlIWkzahv86C54Yww/132","nickname":"遇见","note":"","ucode":"35AB24DD34E997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552071,"discussion_content":"inline应该是直接吧函数展开，未展开前应该是多了一次函数调用参数最先经过栈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645272780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328193,"user_name":"LuYoo","can_delete":false,"product_type":"c1","uid":1202297,"ip_address":"","ucode":"7EED30CB86655D","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/79/266ca68e.jpg","comment_is_top":false,"comment_ctime":1640598468,"is_pvip":false,"replies":[{"id":"120780","content":"👍","user_name":"作者回复","comment_id":328193,"uid":"1079375","ip_address":"","utype":1,"ctime":1642309551,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1640598468","product_id":100085301,"comment_content":"跟不上+1，感觉还是要整体过一遍，然后在回头具体看不懂的。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546419,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642309551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323949,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1638237596,"is_pvip":false,"replies":[{"id":"118874","content":"👍","user_name":"作者回复","comment_id":323949,"uid":"1079375","ip_address":"","utype":1,"ctime":1639849490,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638237596","product_id":100085301,"comment_content":"https:&#47;&#47;play.rust-lang.org&#47;?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=b77895530e3fc0df461ed8c8d7d34663","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539835,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639849490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320924,"user_name":"TheLudlows","can_delete":false,"product_type":"c1","uid":1069346,"ip_address":"","ucode":"64895727505014","user_header":"https://static001.geekbang.org/account/avatar/00/10/51/22/d12f7a72.jpg","comment_is_top":false,"comment_ctime":1636560497,"is_pvip":false,"replies":[{"id":"116573","content":"对的","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636641448,"ip_address":"","comment_id":320924,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636560497","product_id":100085301,"comment_content":"不知道这样理解对不对，MiniString没有实现ToString trait但是能调用to_string方法，是因为MiniString实现了Deref，当调用to_string时，入参是&amp;self，相当于*(&amp;miniString).to_string，同时str是实现了ToString的 ","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530165,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636641448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315346,"user_name":"newzai","can_delete":false,"product_type":"c1","uid":1102367,"ip_address":"","ucode":"D5E34D427D65FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/1f/2ef2514b.jpg","comment_is_top":false,"comment_ctime":1633849849,"is_pvip":false,"replies":[{"id":"115298","content":"你可以看看：https:&#47;&#47;github.com&#47;tikv&#47;pprof-rs","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1635133431,"ip_address":"","comment_id":315346,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1633849849","product_id":100085301,"comment_content":"有什么分配器可以，有接口可以输出当前进程的内存分配记录不，类似go pprof是heap工具，内嵌到web中，可以随时定位系统内存分配，释放是否正常。<br><br>另外rust有没有类似go的pprof工具，可以内嵌web中，查看实时的所有线程stack ，所有heap分配记录。。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527940,"discussion_content":"你可以看看：https://github.com/tikv/pprof-rs","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635133431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315009,"user_name":"黄维一","can_delete":false,"product_type":"c1","uid":1283961,"ip_address":"","ucode":"C9CD241D8DA153","user_header":"https://static001.geekbang.org/account/avatar/00/13/97/79/71aba0c4.jpg","comment_is_top":false,"comment_ctime":1633657422,"is_pvip":false,"replies":[{"id":"114162","content":"你可以对比着 rust book 来看。其实智能指针没有什么特殊的，它就是实现了某些 trait，行为上类似指针的数据结构。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1633812258,"ip_address":"","comment_id":315009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633657422","product_id":100085301,"comment_content":"完全跟不上了，消化不了知识了","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527856,"discussion_content":"你可以对比着 rust book 来看。其实智能指针没有什么特殊的，它就是实现了某些 trait，行为上类似指针的数据结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633812258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313877,"user_name":"hughieyu","can_delete":false,"product_type":"c1","uid":1206690,"ip_address":"","ucode":"FC1A64B2BAB784","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/a2/c30ac459.jpg","comment_is_top":false,"comment_ctime":1632727273,"is_pvip":false,"replies":[{"id":"113735","content":"非常棒！都正确！<br><br>第 1 题还可以和原本的代码一起融合成一个更简化的版本（这样对 &amp;str, String 都适用）：<br><br>```rust<br>impl&lt;T&gt; From&lt;T&gt; for MyString<br>where<br>    T: AsRef&lt;str&gt; + Into&lt;String&gt;,<br>{<br>    fn from(s: T) -&gt; Self {<br>        match s.as_ref().len() &gt; MINI_STRING_MAX_LEN {<br>            true =&gt; Self::Standard(s.into()),<br>            _ =&gt; Self::Inline(MiniString::new(s)),<br>        }<br>    }<br>}<br>```<br><br>第 2 题我也写了个版本：https:&#47;&#47;play.rust-lang.org&#47;?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8066bd343bd142369fb327d7877db814","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1632798298,"ip_address":"","comment_id":313877,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632727273","product_id":100085301,"comment_content":"1.impl From&lt;String&gt; for MyString {<br>    fn from(s: String) -&gt; Self {<br>        match s.len() &lt;= MINI_STRING_MAX_LEN {<br>            true =&gt; MyString::Inline(MiniString::new(s)),<br>            false =&gt; MyString::Standard(s),<br>        }<br>    }<br>}<br>2.impl MyString {<br>    fn push_str(&amp;mut self, string: &amp;str){<br>        match *self {<br>            MyString::Standard(ref mut s)=&gt; s.push_str(string),<br>            MyString::Inline(ref mut mini) =&gt; {<br>                let size = mini.len as usize;<br>                match size + string.len() &lt;= MINI_STRING_MAX_LEN {<br>                    true =&gt; { <br>                        mini.data[size..size+string.len()].copy_from_slice(string.as_bytes());<br>                        mini.len = (size +string.len()) as u8;<br>                    },<br>                    false =&gt; *self =  MyString::Standard( format!(&quot;{}{}&quot;, mini.to_string(), string)),<br>                }<br>            },<br>        }<br>    }<br>}<br>3. 决定Cow&lt;&#39;a,B&gt;大小的是较大的一个值(一般是&lt;B as ToOwned&gt;::Owned)，&lt;[u8] as ToOwned&gt;::Owned=Vec&lt;u8&gt;, &lt;str as ToOwned&gt;::Owned=String, 两个的大小都为24字节，加上enum一个字节tag和7个字节对齐，共计32字节。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527503,"discussion_content":"非常棒！都正确！\n\n第 1 题还可以和原本的代码一起融合成一个更简化的版本（这样对 &amp;amp;str, String 都适用）：\n\n```rust\nimpl&amp;lt;T&amp;gt; From&amp;lt;T&amp;gt; for MyString\nwhere\n    T: AsRef&amp;lt;str&amp;gt; + Into&amp;lt;String&amp;gt;,\n{\n    fn from(s: T) -&amp;gt; Self {\n        match s.as_ref().len() &amp;gt; MINI_STRING_MAX_LEN {\n            true =&amp;gt; Self::Standard(s.into()),\n            _ =&amp;gt; Self::Inline(MiniString::new(s)),\n        }\n    }\n}\n```\n\n第 2 题我也写了个版本：https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=8066bd343bd142369fb327d7877db814","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632798298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313834,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1632704873,"is_pvip":false,"replies":[{"id":"113731","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1632797558,"ip_address":"","comment_id":313834,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632704873","product_id":100085301,"comment_content":"深度好文！很多实用的小技巧，涨知识。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527486,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632797558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313824,"user_name":"恒","can_delete":false,"product_type":"c1","uid":1004816,"ip_address":"","ucode":"0C9545E9620AE9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/10/33310cb9.jpg","comment_is_top":false,"comment_ctime":1632701295,"is_pvip":false,"replies":[{"id":"113718","content":"是的。而且 Owned 这个关联类型还带有约束，它必须是实现了 Borrow&lt;Self&gt; 的类型。文中关于这个关系又详细的介绍。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1632796076,"ip_address":"","comment_id":313824,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632701295","product_id":100085301,"comment_content":"首先，type Owned: Borrow&lt;Self&gt; 是一个带有关联类型的 trait ，如果你对这个知识点有些遗忘，可以再复习一下<br><br>这里是否实际是说ToOwned是带关联类型的trait","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527483,"discussion_content":"是的。而且 Owned 这个关联类型还带有约束，它必须是实现了 Borrow&amp;lt;Self&amp;gt; 的类型。文中关于这个关系又详细的介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632796076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}