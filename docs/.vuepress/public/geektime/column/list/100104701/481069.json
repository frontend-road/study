{"id":481069,"title":"03｜CAP 理论：分布式场景下我们真的只能三选二吗？","content":"<p>你好，我是陈现麟。</p><p>通过学习分布式场景下面临的新挑战，你已经了解了从集中式系统演进到分布式系统时，分布式系统在部分故障、异步网络、时钟同步和共识协调这四个方面的新挑战，以及它们对分布式系统设计原则的影响。了解了这些之后，当你在面对分布式系统各种实现的时候，能更深刻地思考这些系统的取舍与权衡了。</p><p>经过不断地思考，人们在实践分布式系统架构的时候，从系统可用性和数据一致性的权衡中总结出来了 CAP 理论，它是指导人们在面对架构分布式系统时，进行取舍的设计原则。同时，CAP 理论深刻影响着分布式系统的设计与发展，是我们在学习分布式系统时不能绕过的知识。</p><p>所以在这节课中，我将和你一起来讨论什么是 CAP 理论以及它产生的影响，并且我们还会讨论在当前这个时间点，业界对于 CAP 理论的重新思考与理解。</p><h2>什么是 CAP 理论</h2><p>CAP 理论是加州理工大学伯克利分校的 Eric Brewer 教授在 2000 年 7 月的 ACM PODC  会议上首次提出的，它是 Eric Brewer 在 Inktomi 期间研发搜索引擎、分布式 Web 缓存时得出的关于数据一致性（ C：Consistency ）、服务可用性（ A：Availability ）、分区容错性（ P：Partition-tolerance ）的一个著名猜想：</p><!-- [[[read_end]]] --><blockquote>\n<p>It is impossible for a web service to provide the three following guarantees : Consistency, Availability and Partition-tolerance.</p>\n</blockquote><p>在这个猜想提出的 2 年以后，来自麻省理工学院的 Seth Gilbert 和 Nancy Lynch 从理论上证明了 Eric Brewer 教授的 CAP 猜想是成立的，从此，CAP 理论在学术上正式成为了分布式领域公认的定理，并深刻影响着分布式系统的发展。</p><p>CAP 理论告诉我们，<strong>一个分布式系统不可能同时满足数据一致性、服务可用性和分区容错性这三个基本需求，最多只能同时满足其中的两个</strong>。为什么会这样呢？我们先来了解一下 CAP 理论对于数据一致性、服务可用性和分区容错性是怎么定义的。</p><h3>一致性（ C ）</h3><p>CAP 理论中的一致性是指强一致性（ Strong Consistency ），又叫线性一致性（ Linearizable Consistency ），它要求多节点组成的分布式系统，能像单节点一样运作，如果一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有的读操作都不能读到这个数据。</p><p>一致性中除了强一致性之外，还有其他的一致性级别，比如序列一致性（ Sequential Consistency ）和最终一致性（ Eventual Consistency ）等，这个在后面的课程“一致性与共识（一）”中会有详细的介绍。</p><h3>可用性（ A ）</h3><p>CAP 理论对可用性的定义，指的是要求系统提供的服务必须处于 100% 可用的状态，对于用户的每一个操作请求，系统总能够在有限的时间内返回结果。<strong>下面我们重点来讨论可用性定义中的三个关键点：“ 100% 可用”、“有限时间内”和“返回结果”</strong>。</p><p>第一点，100% 可用，既不是 99% 可用，也不是99.99% 可用，它说的是系统必须完全可用，不允许任何不可用的情况出现，这是一个非常理想的模型。</p><p>第二点，有限时间内，它指的是对于客户端的一个请求，系统必须在指定的时间内返回对应的请求结果，如果超过了这个时间，系统就被认为是不可用的。一般来说，“有限时间内”是系统在设计的时候，就设定好的系统运行指标，不同的系统之间会有非常大的差别。</p><p>例如，对于一个服务在线业务的 OLTP 数据库 MySQL ，它的“有限时间”一般不会超过 1 秒，但是对于服务离线分析的 OLAP 数据库 Hive ，它的“有限时间”可能会超过 30 秒，甚至更长。</p><p>虽然不同的系统对于“有限时间”的设定差别非常大，但是对于一个给定的系统来说，在设定了这个“有限时间”之后，只要对一个请求的响应超过了这个时间，我们就认为这个系统是不可用的。</p><p>第三点，返回结果，这是指系统在完成对客户端请求的处理后，必须返回一个正常的响应结果。客户端可以根据这个响应结果，来明确判断这个请求执行成功还是失败，而不是返回一个让用户无法判断的不正常的响应结果。</p><p>比如客户发起一个请求，从用户 A 的账户转 50 元到用户 B 的账户，“转账成功”和“余额不足”都是正常的响应结果，而“服务不可达”和“服务器内部错误”等就是不正常的响应结果。</p><h3>分区容错性（ P ）</h3><p>分区指的是在整个分布式系统中，因为各种网络原因，系统被分隔成多个单独的部分，它不仅包含我们通常说的网络分区，也包含因为网络丢包导致的网络不通的情况。并且，这里说的因为网络丢包导致网络不通的情形，还包含节点宕机的场景，由于系统的其他机器不知道某个节点宕机了，只知道与宕机节点的网络是不通的，所以当节点宕机发生时，其他节点发往宕机节点的包也将丢失。</p><p><strong>在现实的分布式系统中，我们面对的就是一个不可靠的网络和有一定概率宕机的设备</strong>，这两个因素都会导致分区出现，因此在分布式系统实现中，分区容错性 P 是一个必须项，而不是可选项。</p><p>在分布式系统中，如果我们的设计放弃分区容错性，就相当于我们认为节点之间的网络通信永远是好的，那么我们对节点之间的远程调用的结果，就不需要处理超时、网络地址不可达等网络层错误了。但是这样一来，看似是简化了系统设计，实际却忽视了超时等网络错误的情况。当它们出现后，系统的行为就是未定义的了，可能会出现崩溃，或者是脏数据的问题。</p><p>因此，对于分布式系统工程实践来说， CAP 理论更合适的描述是：在满足分区容错的前提下，没有算法能同时满足数据一致性和服务可用性。</p><h2>CAP 理论产生的影响</h2><p>关于数据一致性和可用性之间的争论由来已久，当时主要表现为 ACID 与 BASE 之间的争论。</p><p>基于 BASE 理论支撑的 NoSQL 运动坚持创造各种可用性优先、数据一致性其次的方案，而传统数据库则坚守 ACID 特性（原子性、一致性、隔离性、持久性），优先数据一致性，在必要的时候，可以放弃系统可用性。当时 BASE 理论还没有被广泛接受，人们还是不愿意放弃 ACID 的优点。</p><p>当 CAP 理论提出后，我们明白了在分布式系统中，只能在强一致性和 100% 的可用性之间二选一，不能两个都要。从此 BASE 理论也逐渐被人们所接受，在大规模存储的场景中广泛应用，并且开创了从 2000 年到 2010 年， NoSQL 运动的黄金十年。这十年里，工业界产生了大量优秀的 NoSQL 系统，比如 BigTable 、 HBase 、 MongoDB 、 Cassandra ，解决了人们当时遇到的大规模数据存储的问题。</p><h2>CAP 理论的重新思考与理解</h2><p>CAP 理论的出现是有历史使命的，让人们能够在分布式系统中，放弃以关系数据库为代表的 ACID 强一致性系统，接受以 NoSQL 为代表的 BASE 理论，并且暂时解决了人们在 2000 年前后对于分布式系统中，数据一致性和可用性之间的争论，让人们能够更加务实地解决当时由于互联网爆发式发展，产生的海量用户和数据的分布式计算与存储的问题。</p><p>一个有历史使命的事物，在使命完成后，要么就过时了，人们不再提起它，要么就会对它有新的解释，让它跟随时代一起发展下去。而 CAP 理论显然属于后者，因为直到现在，人们还在对它不断地重新思考与理解。</p><p>在 2000 年的时候，CAP 理论通过一个简单但是精确定义的模型，论证了在一个满足分区容错的分布式系统中，当我们进行系统设计时，只能在数据一致性和服务可用性之间二选一。其中，<strong>数据一致性（ C ）指的是数据的强一致性，服务的可用性（ A ）指的是服务100 % 的可用性，这才是 CAP 理论论证模型的关键点</strong>。</p><h3>对可用性的重新思考与理解</h3><p>首先，我们对服务的可用性（ A ）进行分析，你会发现在我们的日常工作中，几乎没有见过 100% 可用的服务。可用性指标是在 0 到 100% 之间连续分布的，其实一个 100% 可用性的服务和一个 99.9999% 可用性的服务之间并没有多大的差别，如果我们的服务能实现 99.9999% 的可用性，哪怕它不符合 CAP 理论的可用性，也是符合我们工作中对可用性的要求的。</p><p>所以，在我们的系统选择了 CP 模型的时候，对于可用性（ A ），我们永远无法达到 100%，但是按业务要求不断优化，是我们努力的目标。</p><p>关于具体的实践，我认为基于 Raft 算法实现的 <strong>etcd</strong> 就是一个非常好的，对可用性进行重新思考的实践。如果依据 CAP 理论来划分的话，etcd 属于 CP 模型。</p><p>而在 etcd 系统的实现中，如果网络没有出现分区，整个系统是 100% 可用的；就算网络出现分区了，也不会有整个etcd 系统都不可用的情况。在这时，超过半数 etcd 实例所在的网络分区一侧，系统是正常可用的，虽然网络分区的另一侧是不可用的，但是整个 etcd 系统的可用性依然可能超过 50% 。</p><h3>对一致性的重新思考与理解</h3><p>对于数据的一致性（ C ） ，除了 CAP 理论要求的强一致性外，还有单调一致性、会话一致性和最终一致性等。如果我们的系统设计选择了 AP 模型，<strong>在数据一致性方面，虽然我们无法实现强一致性，但是我们也不要全部放弃，可以努力去实现更高的一致性级别，为系统的服务提供更好的抽象</strong>。</p><p>这里我们通过一个例子来说明，假设我们设计一个 AP 模型的分布式系统，正常情况下，如果依据 CAP 理论，在系统设计时，我们需要放弃数据的一致性。但是，我们可以从另一个思路来设计，在系统没有出现网络分区的时候，这个分布式系统应该设计为强一致性的。</p><p>如果出现网络分区了，我们可以根据系统情况，有选择并且精心设计地降低系统的一致性级别。比如，从强一致性降低到单调一致性或会话一致性等，这样的设计，既符合 CAP 理论依据，也为系统提供了更好的一致性级别，特别是在网络分区的时候。</p><h3>对分区容错性的重新思考与理解</h3><p>最后，我们来分析一下分区容错性 P 的问题。在分布式系统中，节点之间必须通过网络来通信，可是网络可能会丢包和中断，节点也可能会宕机，这样的情况就要求我们在系统设计的时候，必须做好系统的分区容错处理。</p><p>但是，系统出现分区的情况非常少见，所以我们可以来试想一下，在网络不出现分区的时候，我们将数据强一致性和 100% 的可用性都选择，等到网络出现分区的时候，系统再选择放弃部分的可用性或者降低数据一致性的级别，这种处理方式是否可行呢？</p><p>其实这样的处理方式是可以的，在上面对可用性和一致性的重新思考与理解中，所举的例子都是按这个方式来处理的，<strong>它实际是将 CAP 理论的选择，推迟到出现网络分区的时候，而不是系统一启动就进行 CAP 的选择</strong>。这样可以大大提高系统的可用性和数据一致性，并且系统依然能容忍网络分区。</p><p>另外，关于 CAP 理论的重新思考，特别需要说明的一个例子是 Google 的 Spanner ，我们都知道 Spanner 是一个全球分布式数据库，但是 Google 却宣称 Spanner 是一个 CA 系统，这是不是和 CAP 理论的说法产生了矛盾呢？</p><p>其实并不矛盾，Spanner 虽然是一个分布式系统，但是它运行在 Google 的内部网络中，并且拥有大量冗余的网络链路、处理相关故障的架构规划、以及非常细致的运维，以此来确保系统的可用性超过了 99.999%。虽然不能达到 100%，但是对于使用者来说，和可用性 100% 几乎没有任何区别，所以Spanner 就是一个 CA 系统。</p><p>而且，在网络出现分区的时候，Spanner 会选择一致性而不是可用性，这个时候 CAP 理论依然会生效。所以对于 CAP 理论的重新思考，总而言之就是一句话：<strong>CAP 理论给我们定义了系统的设计边界，虽然想要设计出超过边界的系统是徒劳的，但是我们却可以无限逼近边界，并且把它作为我们设计系统的目标</strong>。</p><h2>总结</h2><p>到这里，我们知道了在分布式系统场景下，CAP 理论的相关知识，我们一起来总结一下这节课的主要内容：</p><p>首先，我们一起讨论了什么是 CAP 理论，它是指分布式系统中，在满足分区容错的前提下，没有算法能同时满足数据一致性和服务可用性，只能在数据一致性和服务可用性之间二选一。</p><p>然后，我们讨论了 CAP 理论产生的影响，可以说 CAP 理论的出现，让人们接受了 BASE 理论，并且推动了 NoSQL 运动的发展，开启了它的黄金十年。</p><p>最后，我们探讨了现在人们对于 CAP 理论的新理解，<strong>对于 CAP 理论，我们不会简单地三选二或者二选一</strong>。对于 AP 模型的系统，我们会努力去提升数据一致性的级别，而对于 CP 模型的系统，我们会努力去提升系统可用性的级别。</p><p>同时，由于系统分区的情况非常少见，我们可以在网络不出现分区的时候，将 A 和 C 都选择上；在网络出现分区的时候，再选择放弃部分的可用性，或者降低数据一致性的级别，通过推迟 CAP 选择来提高系统的可用性和数据一致性。</p><h2>思考题</h2><p>在分布式场景下，对于 CAP 理论，我们真的只能三选二吗？</p><p>欢迎你在留言区发表你的看法。如果这节课对你有帮助，也推荐你分享给更多的同事、朋友。</p>","neighbors":{"left":{"article_title":"02｜新的挑战：分布式系统是银弹吗？我看未必！","id":481049},"right":{"article_title":"春节加餐｜系统性思维，高效学习和工作的利器","id":483434}},"comments":[{"had_liked":false,"id":332422,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1643244184,"is_pvip":false,"replies":[{"id":"121456","content":"是的，只是经常说成 3 选 2，让大家的感觉是要放弃 1 个","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1643275200,"ip_address":"","comment_id":332422,"utype":1}],"discussion_count":1,"race_medal":0,"score":"83247622808","product_id":100104701,"comment_content":"cap从每一个定义来说并不是说牺牲了第三者吧，而是尽量保证第三者","like_count":18,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548605,"discussion_content":"是的，只是经常说成 3 选 2，让大家的感觉是要放弃 1 个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643275200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332443,"user_name":"GAC·DU","can_delete":false,"product_type":"c1","uid":1385403,"ip_address":"","ucode":"7847FBE1C13740","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/bb/a1a61f7c.jpg","comment_is_top":false,"comment_ctime":1643252549,"is_pvip":true,"replies":[{"id":"121457","content":"非常棒！","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1643275302,"ip_address":"","comment_id":332443,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44592925509","product_id":100104701,"comment_content":"分布式场景下，站在用户角度思考CAP理论，用户发送一条请求，在正确的时间响应正确的结果，可以被视为同时满足三者的系统设计。站在系统设计者的角度思考CAP理论，同时满足两者而第三者则是努力的方向，先让系统能够用起来，然后迭代优化。这也满足现在常说的“小步子快跑”的说法。","like_count":10,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548607,"discussion_content":"非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643275303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332316,"user_name":"努力努力再努力","can_delete":false,"product_type":"c1","uid":1182967,"ip_address":"","ucode":"F71E16290CB58C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/f7/d6547adb.jpg","comment_is_top":false,"comment_ctime":1643173867,"is_pvip":true,"replies":[{"id":"121459","content":"非常棒👍🏻","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1643275612,"ip_address":"","comment_id":332316,"utype":1}],"discussion_count":1,"race_medal":0,"score":"36002912235","product_id":100104701,"comment_content":"1 一致性 （C）一致性级别 是 从高到低<br>     1.1 强一致性<br>     1.2 单调一致性<br>     1.3 会话一致性<br>     1.4 序列一致性<br>     1.5 最终一致性<br>2 可用性 （A）<br>       关键字： 100%可用 有限时间内 返回结果<br>3 分区容错性 （P）<br>      3.1 网络分区<br>      3.2 网络丢包导致的网络不通 （包含节点宕机）<br>对可用性的重新思考与理解<br>基于Raft 算法实现的etcd 属于CP模型，但是也尽量保持了可用性<br><br>对一致性的重新思考与理解<br>就算选择了 AP，哪怕出现网络分区 也要尽量保证高的 一致性级别<br> 结论：<br>开发一个分布式系统的时候 系统正常情况 CAP 都要，等到 出现网络分区的时候 再选择放弃 部分A 或者C<br>尽可能互相满足<br><br>自己的思考：<br>1 上面的每一点 如果是我 有什么方案解决呢？ <br>思考题：<br>大部分时间都是 无问题的，可以保证CAP 共存<br>只是需要 添加几个方法 <br>   1. 探知 分区发生问题<br>   2. 进入显式的分区模式以限制某些操作<br>   3 启动恢复过程以 恢复数据一致性并补偿分区期间发生的错误<br>猜测： 可以 先存到本地 ，等分区恢复 ，带着 offset 进行比较 恢复数据","like_count":8,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548609,"discussion_content":"非常棒👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643275612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338646,"user_name":"独一无二","can_delete":false,"product_type":"c1","uid":1692320,"ip_address":"","ucode":"A7DE0EA2BD8FE3","user_header":"https://static001.geekbang.org/account/avatar/00/19/d2/a0/c8714628.jpg","comment_is_top":false,"comment_ctime":1647617582,"is_pvip":true,"replies":[{"id":"123796","content":"是的👍","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1647662678,"ip_address":"","comment_id":338646,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14532519470","product_id":100104701,"comment_content":"文中有一句很有概括性的句子：&quot;在满足分区容错的前提下，没有算法能同时满足数据一致性和服务可用性，只能在数据一致性和服务可用性之间二选一&quot;。也就是未发生p，则ca都可以满足，发生p后，才会选择一个。并不是软件设计之初就必需要舍弃一个。","like_count":3,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557105,"discussion_content":"是的👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647662678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337188,"user_name":"leitiannet","can_delete":false,"product_type":"c1","uid":1205197,"ip_address":"","ucode":"18BDC6A6406C59","user_header":"https://static001.geekbang.org/account/avatar/00/12/63/cd/fd2778c0.jpg","comment_is_top":false,"comment_ctime":1646667130,"is_pvip":true,"replies":[{"id":"123346","content":"主从架构，哨兵架构和集群架构是高可用和水平扩展的方案，它们都可以做成 AP 或 CP 的模型。<br><br>不过一般对于 redis 缓存的场景来说，可用性是高于一致性，所以，redis的主从架构，哨兵架构和集群架构都是 AP 模型。","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1646892847,"ip_address":"","comment_id":337188,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14531569018","product_id":100104701,"comment_content":"Redis有主从架构，哨兵架构和集群架构，分别属于什么模型（AP还是CP）？","like_count":3,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555400,"discussion_content":"主从架构，哨兵架构和集群架构是高可用和水平扩展的方案，它们都可以做成 AP 或 CP 的模型。\n\n不过一般对于 redis 缓存的场景来说，可用性是高于一致性，所以，redis的主从架构，哨兵架构和集群架构都是 AP 模型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646892847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340470,"user_name":"Hello,Tomrrow","can_delete":false,"product_type":"c1","uid":1351769,"ip_address":"","ucode":"F9407C1C91B157","user_header":"https://static001.geekbang.org/account/avatar/00/14/a0/59/86073794.jpg","comment_is_top":false,"comment_ctime":1648827699,"is_pvip":true,"replies":[{"id":"124505","content":"赞👍","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1648861367,"ip_address":"","comment_id":340470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10238762291","product_id":100104701,"comment_content":"CAP理论只是给我们提供了分布式系统设计的边界，这是好事，避免追求一些极致的尝试。系统设计不像是盖房子，主体结构确定后就不能改变了。系统设计要有灵活性，在不同的业务场景下，微调系统，以便更好的服务业务。","like_count":2,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559618,"discussion_content":"赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648861368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353313,"user_name":"XingAn","can_delete":false,"product_type":"c1","uid":1550745,"ip_address":"上海","ucode":"9175181F3B3956","user_header":"https://static001.geekbang.org/account/avatar/00/17/a9/99/0002556f.jpg","comment_is_top":false,"comment_ctime":1659346137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5954313433","product_id":100104701,"comment_content":"服务A调用服务B，由于服务B响应超时（原因可能是多样的）导致服务调用失败，可以认为此时发生了分区错误。<br>如果我们直接将明确的错误提示给用户，我理解是采用了AP设计方案，用户得到了明确但不一定正确的响应，最起码服务是可用的，我们可以采用对账的方式保证数据的最终一致性；<br>如果我们在服务B超时的情况下，不计时间代价的去不断地查询服务B的处理结果，并在得到明确的结果后选择继续往下执行或者回滚数据，并最终返回结果给用户（很大可能用户此时已经等不耐烦退出页面了），我理解采用的是CP的方案；<br>不知道这样的理解是否正确？还请陈老师帮忙解答","like_count":1},{"had_liked":false,"id":340973,"user_name":"不吃辣👾","can_delete":false,"product_type":"c1","uid":1333649,"ip_address":"","ucode":"B25E0725B5E85F","user_header":"https://static001.geekbang.org/account/avatar/00/14/59/91/fa2d8bb2.jpg","comment_is_top":false,"comment_ctime":1649250947,"is_pvip":true,"replies":[{"id":"124997","content":"哈哈，问题发生后，人工可以修复，但是不能保证不发生。","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1649988409,"ip_address":"","comment_id":340973,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5944218243","product_id":100104701,"comment_content":"老师，我发现人工可以弥补CAP中的任何一项，达到接近100%水平。😅","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563394,"discussion_content":"哈哈，问题发生后，人工可以修复，但是不能保证不发生。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649988409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336647,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1646273716,"is_pvip":true,"replies":[{"id":"123065","content":"不是的，只要是分布式系统，就存在 P 的问题，只不过对运行在多个数据中心的分布式系统，由于数据中心的网络出现问题的概率更大。","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1646390970,"ip_address":"","comment_id":336647,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5941241012","product_id":100104701,"comment_content":"作者您好，关于p，我听到最多的是数据在不同集群中复制。如果一个集群的话，是不是不存在p的问题，即使一个集群中有很多的服务而且这些服务可能会宕机","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554462,"discussion_content":"不是的，只要是分布式系统，就存在 P 的问题，只不过对运行在多个数据中心的分布式系统，由于数据中心的网络出现问题的概率更大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646390970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332983,"user_name":"三毛","can_delete":false,"product_type":"c1","uid":1027722,"ip_address":"","ucode":"F9792EA10F5044","user_header":"","comment_is_top":false,"comment_ctime":1643936545,"is_pvip":true,"replies":[{"id":"121959","content":"是的，文章中 Google 的 Spanner 就是一个比较好的例子","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1644581043,"ip_address":"","comment_id":332983,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5938903841","product_id":100104701,"comment_content":"关于P的重新理解这块，没出问题的时候先上CA，也就是确保强一致性和服务高可用，当出问题的时候再改成CP或者AP，但是架构上不能同时满足吧？除非之前的CA也是尽量CA。","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550538,"discussion_content":"是的，文章中 Google 的 Spanner 就是一个比较好的例子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644581043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332488,"user_name":"葡萄糖sugar","can_delete":false,"product_type":"c1","uid":2600726,"ip_address":"","ucode":"82559E37922976","user_header":"https://static001.geekbang.org/account/avatar/00/27/af/16/51149d2b.jpg","comment_is_top":false,"comment_ctime":1643273385,"is_pvip":false,"replies":[{"id":"121461","content":"以 CAP 的定义来说，A 是指 100% 的可用性，所以分布式系统中，CA 不可以兼得，不过可用性的范围在0%-100%之间，99.9% 或者更高的可用性都有可能实现的，比如专栏中提到的 spanner。","user_name":"作者回复","user_name_real":"作者","uid":"1047808","ctime":1643279531,"ip_address":"","comment_id":332488,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5938240681","product_id":100104701,"comment_content":"作者你好，cp 我能理解为系统在达到强一致性以及网络分区容忍性，与此同时我们还能够尽力达到可用性，并且依旧保持强一致性吗？","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548624,"discussion_content":"以 CAP 的定义来说，A 是指 100% 的可用性，所以分布式系统中，CA 不可以兼得，不过可用性的范围在0%-100%之间，99.9% 或者更高的可用性都有可能实现的，比如专栏中提到的 spanner。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643279531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550742,"discussion_content":"又去查了一下以前老师讲的内容  发现那个老师讲的是错的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644722505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550717,"discussion_content":"CAP中的C不是强一致性，只是一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644682436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356129,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"四川","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1662000995,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1662000995","product_id":100104701,"comment_content":"1 什么是分布式系统？<br>2 什么是 BASE 理论？<br>3 经过了黄金十年的 NoSQL 现在怎么样了？","like_count":0},{"had_liked":false,"id":347278,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1653895765,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653895765","product_id":100104701,"comment_content":"对于思考题，CAP正确描述的应该是，当P必定出现的时候，优先保证的是A还是C，并不是说CP的时候就没有A，AP的时候就没有C，只是相对于另一个而言，优先级更高而已，这其实也是分布式设计过程中的一个权衡之策。其实对于大部分场景来说，其实正如老是上述所说，网络分区发生的概率很低，可以近似的将系统看成是CA系统，只是现实情况是P必然存在，所以导致A与C的优先级需要在设计之初划定。","like_count":0},{"had_liked":false,"id":341786,"user_name":"quietwater","can_delete":false,"product_type":"c1","uid":1055029,"ip_address":"","ucode":"C25E2CD356D3F9","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/35/be8372be.jpg","comment_is_top":false,"comment_ctime":1649833385,"is_pvip":true,"replies":[{"id":"124872","content":"多谢😀<br><br>Q1：专栏的第30课是讲分布式数据库的发展史，里面会讲 newsql 是现在最新的方向。<br><br>Q2：mongodb 是文档数据库，mysql 是关系数据库，不好比较的。不过我觉得 newsql 可以替代 mysql。","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1649853303,"ip_address":"","comment_id":341786,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649833385","product_id":100104701,"comment_content":"必须点赞，这是我迄今为止看过的关于CAP理论讲述最透彻的文章，没有之一。问个题外话，对于分布式数据库，老师最看好哪个或哪几个？MongoDB可以替代MySQL吗？","like_count":0,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562579,"discussion_content":"多谢😀\n\nQ1：专栏的第30课是讲分布式数据库的发展史，里面会讲 newsql 是现在最新的方向。\n\nQ2：mongodb 是文档数据库，mysql 是关系数据库，不好比较的。不过我觉得 newsql 可以替代 mysql。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649853303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338645,"user_name":"独一无二","can_delete":false,"product_type":"c1","uid":1692320,"ip_address":"","ucode":"A7DE0EA2BD8FE3","user_header":"https://static001.geekbang.org/account/avatar/00/19/d2/a0/c8714628.jpg","comment_is_top":false,"comment_ctime":1647617347,"is_pvip":true,"replies":[{"id":"123795","content":"哈哈，被你发现了，会持续回复的～","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1647662624,"ip_address":"","comment_id":338645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647617347","product_id":100104701,"comment_content":"太好了，老师3月份还在回复评论呢，老师辛苦了。","like_count":0,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557103,"discussion_content":"哈哈，被你发现了，会持续回复的～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647662624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337858,"user_name":"千军万马万马@","can_delete":false,"product_type":"c1","uid":1500391,"ip_address":"","ucode":"0BDAD22123435A","user_header":"https://static001.geekbang.org/account/avatar/00/16/e4/e7/31944ee7.jpg","comment_is_top":false,"comment_ctime":1647095501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647095501","product_id":100104701,"comment_content":"对于 CAP 理论，我们真的只能三选二吗？","like_count":0},{"had_liked":false,"id":334177,"user_name":"陈阳","can_delete":false,"product_type":"c1","uid":2653715,"ip_address":"","ucode":"C8E676C967D23A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKib3vNM6TPT1umvR3TictnLurJPKuQq4iblH5upgBB3kHL9hoN3Pgh3MaR2rjz6fWgMiaDpicd8R5wsAQ/132","comment_is_top":false,"comment_ctime":1644800908,"is_pvip":true,"replies":[{"id":"122149","content":"spanner 是通过各种工程和运维手段，比如自建网络，并且机房之间的网络专线安装多条等，来避免网络分区的出现，假设永远不会出现在网络分区，那么就是CA的，而对于使用者来说，在可用性为99.999%的时候，可能业务就感知不到网络分区问题了。<br><br>当然，如果出现网络分区的时候，spanner会选择 CP。","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1644916773,"ip_address":"","comment_id":334177,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644800908","product_id":100104701,"comment_content":"老师，能举个例子吗？ google中spanner的ca是怎样程度的ca， 大概设计是啥？","like_count":0,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551175,"discussion_content":"spanner 是通过各种工程和运维手段，比如自建网络，并且机房之间的网络专线安装多条等，来避免网络分区的出现，假设永远不会出现在网络分区，那么就是CA的，而对于使用者来说，在可用性为99.999%的时候，可能业务就感知不到网络分区问题了。\n\n当然，如果出现网络分区的时候，spanner会选择 CP。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644916773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334075,"user_name":"HappyHasson","can_delete":false,"product_type":"c1","uid":2911084,"ip_address":"","ucode":"B84CC43E349CFA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","comment_is_top":false,"comment_ctime":1644729150,"is_pvip":true,"replies":[{"id":"122110","content":"不关心 C 的时候，AP 是存在的。<br>P 是网络分区容忍，比如一个系统的数据会在 a、b 两个节点复制，假设 a 和 b 之前的网络出现故障，不同通信了，那么 a 和 b 之前的数据是不能保证一致的，就是 C 不能满足了，如果我们是 AP 的系统，不关心 a、b 之间数据的一致性的话，a、b 是可以同时对外提供服务的，这个时候 A 就是 100% 的","user_name":"作者回复","user_name_real":"编辑","uid":"1047808","ctime":1644891668,"ip_address":"","comment_id":334075,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1644729150","product_id":100104701,"comment_content":"既然说CAP中的A是100%可用，100%是一个理想值，那说明A是一个不可能达到的方向，AP这个组合不应该存在，理论上只存在CP？","like_count":0,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551063,"discussion_content":"不关心 C 的时候，AP 是存在的。\nP 是网络分区容忍，比如一个系统的数据会在 a、b 两个节点复制，假设 a 和 b 之前的网络出现故障，不同通信了，那么 a 和 b 之前的数据是不能保证一致的，就是 C 不能满足了，如果我们是 AP 的系统，不关心 a、b 之间数据的一致性的话，a、b 是可以同时对外提供服务的，这个时候 A 就是 100% 的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644891668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":552620,"discussion_content":"不考虑c，如果服务器挂掉，硬件等原因，也不能保证a是100%吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645526518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":551063,"ip_address":""},"score":552620,"extra":""}]},{"author":{"id":1005290,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","nickname":"giteebravo","note":"","ucode":"C087E8D6B5A98B","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586134,"discussion_content":"100% 可用是一个理想值。\n不同系统对可用性的指标要求不尽相同，只要能达到系统预设的指标即可认为满足 100% 可用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662000707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}