{"id":97459,"title":"01 | 初探OpenResty的三大特性","content":"<p>你好，我是温铭。</p><p>开篇词里我们说过，OpenResty的优势显而易见。不过，在具体学习之前，让我们先简单回顾下 OpenResty 的发展过程，这有助于你对后面内容有更好的理解。</p><h2>OpenResty的发展</h2><p>OpenResty 并不像其他的开发语言一样从零开始搭建，而是基于成熟的开源组件——NGINX 和 LuaJIT。OpenResty 诞生于 2007 年，不过，它的第一个版本并没有选择 Lua，而是用了 Perl，这跟作者章亦春的技术偏好有很大关系。</p><p>但 Perl 的性能远远不能达到要求，于是，在第二个版本中，Perl 就被 Lua 给替换了。 不过，<strong>在 OpenResty 官方的项目中，Perl 依然占据着重要的角色，OpenResty 工程化方面都是用 Perl 来构建，比如测试框架、Linter、CLI 等</strong>，后面我们也会逐步介绍。</p><p>后来，章亦春离开了淘宝，加入了美国的 CDN 公司 Cloudflare。因为 OpenResty 高性能和动态的优势很适合 CDN 的业务需求，很快， OpenResty 就成为 CDN 的技术标准。 通过丰富的 lua-resty 库，OpenResty 开始逐渐摆脱 NGINX 的影子，形成自己的生态体系，在 API 网关、软WAF 等领域被广泛使用。</p><!-- [[[read_end]]] --><p>其实，我经常说，OpenResty 是一个被广泛使用的技术，但它并不能算得上是热门技术，这听上去有点矛盾，到底什么意思呢？</p><p>说它应用广，是因为 OpenResty 现在是全球排名第五的 Web 服务器。我们经常用到的 12306 的余票查询功能，或者是京东的商品详情页，这些高流量的背后，其实都是 OpenResty 在默默地提供服务。</p><p>说它并不热门，那是因为使用 OpenResty 来构建业务系统的比例并不高。使用者大都用OpenResty来处理入口流量，并没有深入到业务里面去，自然，对于 OpenResty 的使用也是浅尝辄止，满足当前的需求就可以了。这当然也与 OpenResty 没有像 Java、Python 那样有成熟的 Web 框架和生态有关。</p><p>说了这么多，接下来，我重点来介绍下，OpenResty 这个开源项目值得称道和学习的几个地方。</p><h2>OpenResty的三大特性</h2><h3>详尽的文档和测试用例</h3><p>没错，文档和测试是判断开源项目是否靠谱的关键指标，甚至是排在代码质量和性能之前的。</p><p>OpenResty 的文档非常详细，作者把每一个需要注意的点都写在了文档中。绝大部分时候，我们只需要仔细查看文档，就能解决遇到的问题，而不用谷歌搜索或者是跟踪到源码中。为了方便起见，OpenResty 还自带了一个命令行工具<code>restydoc</code>，专门用来帮助你通过 shell 查看文档，避免编码过程被打断。</p><p>不过，文档中只会有一两个通用的代码片段，并没有完整和复杂的示例，到哪里可以找到这样的例子呢？</p><p>对于 OpenResty 来说，自然是<code>/t</code>目录，它里面就是所有的测试案例。每一个测试案例都包含完整的 NGINX 配置和 Lua 代码，以及测试的输入数据和预期的输出数据。不过，OpenResty 使用的测试框架，与其他断言风格的测试框架完全不同，后面我会用专门章节来做介绍。</p><h3>同步非阻塞</h3><p>协程，是很多脚本语言为了提升性能，在近几年新增的特性。但它们实现得并不完美，有些是语法糖，有些还需要显式的关键字声明。</p><p>OpenResty 则没有历史包袱，在诞生之初就支持了协程，并基于此实现了<strong>同步非阻塞</strong>的编程模式。这一点是很重要的，毕竟，程序员也是人，代码应该更符合人的思维习惯。显式的回调和异步关键字会打断思路，也给调试带来了困难。</p><p>这里我解释一下，什么是同步非阻塞。先说同步，这个很简单，就是按照代码来顺序执行。比如下面这段伪码：</p><pre><code>local res, err  = query-mysql(sql)\nlocal value, err = query-redis(key)\n</code></pre><p>在同一请求连接中，如果要等 MySQL 的查询结果返回后，才能继续去查询 Redis，那就是同步；如果不用等 MySQL 的返回，就能继续往下走，去查询 Redis，那就是异步。对于 OpenResty 来说，绝大部分都是同步操作，只有 <code>ngx.timer</code> 这种后台定时器相关的 API，才是异步操作。</p><p>再来说说非阻塞，这是一个很容易和“异步”混淆的概念。这里我们说的“阻塞”，特指阻塞操作系统线程。我们继续看上面的例子，假设查询 MySQL 需要1s 的时间，如果在这1s 内，操作系统的资源（CPU）是空闲着并傻傻地等待返回，那就是阻塞；如果 CPU 趁机去处理其他连接的请求，那就是非阻塞。非阻塞也是 C10K、C100K 这些高并发能够实现的关键。</p><p>同步非阻塞这个概念很重要，建议你仔细琢磨一下。我认为，这一概念最好不要通过类比来理解，因为不恰当的类比，很可能把你搞得更糊涂。</p><p>在 OpenResty 中，上面的伪码就可以直接实现同步非阻塞，而不用任何显式的关键字。这里也再次体现了，让开发者用起来更简单，是 OpenResty 的理念之一。</p><h3>动态</h3><p>OpenResty 有一个非常大的优势，并且还没有被充分挖掘，就是它的<strong>动态</strong>。</p><p>传统的 Web 服务器，比如 NGINX，如果发生任何的变动，都需要你去修改磁盘上的配置文件，然后重新加载才能生效，这也是因为它们并没有提供 API，来控制运行时的行为。所以，在需要频繁变动的微服务领域，NGINX 虽然有多次尝试，但毫无建树。而异军突起的 Envoy， 正是凭着 xDS 这种动态控制的 API，大有对 NGINX 造成降维攻击的威胁。</p><p>和 NGINX 、 Envoy 不同的是，OpenResty 是由脚本语言 Lua 来控制逻辑的，而动态，便是 Lua 天生的优势。通过 OpenResty 中 lua-nginx-module 模块中提供的 Lua API，我们可以动态地控制路由、上游、SSL 证书、请求、响应等。甚至更进一步，你可以在不重启 OpenResty 的前提下，修改业务的处理逻辑，并不局限于 OpenResty 提供的 Lua API。</p><p>这里有一个很合适的类比，可以帮你理解上面关于动态的说明。你可以把 Web 服务器当做是一个正在高速公路上飞驰的汽车，NGINX 需要停车才能更换轮胎，更换车漆颜色；Envoy 可以一边跑一边换轮胎和颜色；而 OpenResty 除了具备前者能力外，还可以在不停车的情况下，直接把汽车从 SUV 变成跑车。</p><p>显然，掌握这种“逆天”的能力后，OpenResty 的能力圈和想象力就扩展到了其他领域，比如  Serverless 和边缘计算等。</p><h2>你学习的重点在哪里？</h2><p>讲了这么多OpenResty的重点特性，你又该怎么学呢？我认为，学习需要抓重点，围绕主线来展开，而不是眉毛胡子一把抓，这样，你才能构建出脉络清晰的知识体系。</p><p>要知道，不管多么全面的课程，都不可能覆盖所有问题，更不能直接帮你解决线上的每个 bug 和异常。</p><p>回到OpenResty的学习，在我看来，想要学好 OpenResty，你必须理解下面8个重点：</p><ul>\n<li>\n<p>同步非阻塞的编程模式；</p>\n</li>\n<li>\n<p>不同阶段的作用；</p>\n</li>\n<li>\n<p>LuaJIT 和 Lua 的不同之处；</p>\n</li>\n<li>\n<p>OpenResty API 和周边库；</p>\n</li>\n<li>\n<p>协程和 cosocket；</p>\n</li>\n<li>\n<p>单元测试框架和性能测试工具；</p>\n</li>\n<li>\n<p>火焰图和周边工具链；</p>\n</li>\n<li>\n<p>性能优化。</p>\n</li>\n</ul><p>这些内容正是我们学习的重点，在专栏的各个模块中我都会分别讲到。在学习的过程中，我希望你能举一反三，并且根据自己的兴趣点和背景，有针对性地深入阅读某些章节。</p><p>如果你是 OpenResty 的初学者，那么你可以完全跟着专栏的进度，在自己的环境中安装 OpenResty，运行并修改示例代码。要记住，你的重点在于构建 OpenResty 的全貌，而非死磕某个知识点。当然，如果你有疑问的地方，随时可以在留言区提出，我会解答你的困惑。</p><p>如果你正在项目中使用 OpenResty，那就太棒了，相信你在阅读 LuaJIT 和性能优化章节时，一定会有更多的共鸣，更能应用到实际，在你的项目中看到优化前后的性能指标变化。</p><p>另外，如果你想要给 OpenResty 以及周边库贡献代码，那么最大的门槛，并不是对 OpenResty 原理的理解，或者是如何编写 NGINX C 模块的问题，而是测试案例和代码规范。我见过太多 OpenResty 的代码贡献者（也包括我自己），在一个 PR 上反复修改测试案例和代码风格，这其中有太多鲜为人知的潜规则。所以，专栏的代码规范和单元测试部分，就是为你准备的。</p><p>而如果你是测试工程师，即使你不使用 OpenResty，OpenResty 的测试框架和性能分析工具集，也必能给你非常多的启发。毕竟，OpenResty 在测试上面的投入和积累是相当深厚的。</p><h2>写在最后</h2><p>欢迎你留言和我分享你的 OpenResty 学习之路，在这期间，你又走过哪些弯路呢？也欢迎你把这篇文章转发给你的同事、朋友。</p><p>还是那句话，在学习的过程中，你有任何疑问，都可以在专栏中留言，我会第一时间给你答复。</p><p></p>","neighbors":{"left":{"article_title":"开篇词 | OpenResty，为你打开高性能开发的大门","id":96516},"right":{"article_title":"02 | 如何写出你的“hello world”？","id":97475}},"comments":[{"had_liked":false,"id":98148,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1063734,"ip_address":"","ucode":"EA31201A7C5AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","comment_is_top":false,"comment_ctime":1558920912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"164767678160","product_id":100028301,"comment_content":"同步异步说的是代码，调用就有返回是同步，反之是异步。<br>阻塞非阻塞说的是cpu，apu要等待就是阻塞，反之非阻塞。<br><br>非阻塞并不能缩减rt时间，其最大的优点是可以服务更多的请求，达到c100k。<br><br>针对ff同学的问题，阻塞非阻塞对于代码来说是，仅仅是底层实现不同。","like_count":39},{"had_liked":false,"id":98150,"user_name":"zhang","can_delete":false,"product_type":"c1","uid":1517047,"ip_address":"","ucode":"650C292030057B","user_header":"https://static001.geekbang.org/account/avatar/00/17/25/f7/4cc60573.jpg","comment_is_top":false,"comment_ctime":1558921213,"is_pvip":false,"replies":[{"id":"35113","content":"👍 一起学习","user_name":"作者回复","comment_id":98150,"uid":"1017955","ip_address":"","utype":1,"ctime":1558922888,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"61688463357","product_id":100028301,"comment_content":"分享一篇以前学openresty 时写的笔记，当时处于一个阅读过nginx源码，但是没有实际使用或者开发nginx的情况，另外个人的描述描述能力也比较差，很多知识储备不足。<br><br>当时写这篇笔记并不是对源码进行解读，只是站在一个有什么功能，我应该如何实现它，它是如何做的，这样一个角度去分析的。<br><br>希望这篇笔记可以让大家有一定收获，也希望我们可以互相扶持，一起坚持下去，学好这门课程。<br><br><br>http:&#47;&#47;note.youdao.com&#47;noteshare?id=965c9f034a82ffb0f8b4de6ca81f3e73","like_count":15,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451579,"discussion_content":"👍 一起学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558922888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98095,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1558915369,"is_pvip":true,"replies":[{"id":"35111","content":"https:&#47;&#47;github.com&#47;openresty&#47;openresty 是用于打源码包的项目，所以测试案例不多。<br>是的，需要看这个子项目的仓库。","user_name":"作者回复","comment_id":98095,"uid":"1017955","ip_address":"","utype":1,"ctime":1558922765,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"27328719145","product_id":100028301,"comment_content":"看了下 openresty github 仓库 https:&#47;&#47;github.com&#47;openresty&#47;openresty 发现 t文件夹下没有什么测试文件，这个是需要看每个相关的模块的仓库吗？ 又看了 https:&#47;&#47;github.com&#47;openresty&#47;lua-nginx-module 这个模块发现 t文件夹下是有测试文件的","like_count":7,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451552,"discussion_content":"https://github.com/openresty/openresty 是用于打源码包的项目，所以测试案例不多。\n是的，需要看这个子项目的仓库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558922765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98113,"user_name":"FF","can_delete":false,"product_type":"c1","uid":1001615,"ip_address":"","ucode":"26349F32B406D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/8f/7ecd4eed.jpg","comment_is_top":false,"comment_ctime":1558917320,"is_pvip":false,"replies":[{"id":"35115","content":"理解 1 是对的。站在用户请求的角度，非阻塞并不会减少处理的时间，但是会减少等待的时间。OpenResty 的每个 worker 同一时间只在处理一个请求，如果阻塞了，这个 worker 上的其他请求都需要等待。<br>C10K 要解决的是高并发的问题，是服务端的整体性能。","user_name":"作者回复","comment_id":98113,"uid":"1017955","ip_address":"","utype":1,"ctime":1558923369,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"23033753800","product_id":100028301,"comment_content":"请教下温老师，关于阻塞&#47;非阻塞。<br><br>如果 CPU 趁机去处理其他连接的请求，那就是非阻塞。<br><br>但对于用户线程来讲，怎么理解这个非阻塞呢？<br><br>理解1，这个查询的用户线程是不是还得阻塞等待 1 秒钟等待返回？这样的话应用的性能还是会不理想？<br><br>理解2，用户线程也是非阻塞，操作系统线程非阻塞返回后，用户的数据不一定有，这个时候用户线程要轮询去调用查询，直到有数据。这样的话，对于应用来讲，性能不是一样不理想？<br><br>哪种理解是对的呢？但无论哪种，用户应用性能可能都提不上理想，这样的话为何非阻塞是C10K，C100K 实现的关键呢？<br><br>","like_count":5,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451561,"discussion_content":"理解 1 是对的。站在用户请求的角度，非阻塞并不会减少处理的时间，但是会减少等待的时间。OpenResty 的每个 worker 同一时间只在处理一个请求，如果阻塞了，这个 worker 上的其他请求都需要等待。\nC10K 要解决的是高并发的问题，是服务端的整体性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558923369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98920,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1559116264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18738985448","product_id":100028301,"comment_content":"总结：OpenResty 的三大特性。<br>1、详尽的文档和测试用例（这个不能算特性吧）。<br>2、同步非阻塞。<br>3、动态。","like_count":4},{"had_liked":false,"id":100838,"user_name":"Luciano李鑫","can_delete":false,"product_type":"c1","uid":1329995,"ip_address":"","ucode":"5FBE5F86FD5B2C","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/4b/97926cba.jpg","comment_is_top":false,"comment_ctime":1559651266,"is_pvip":false,"replies":[{"id":"36551","content":"是 GitHub 中 Pull Request 的缩写","user_name":"作者回复","comment_id":100838,"uid":"1017955","ip_address":"","utype":1,"ctime":1559805326,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"14444553154","product_id":100028301,"comment_content":"pr是啥意思<br>","like_count":3,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452701,"discussion_content":"是 GitHub 中 Pull Request 的缩写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559805326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100233,"user_name":"shonm","can_delete":false,"product_type":"c1","uid":1132459,"ip_address":"","ucode":"A4E2B4167D9F1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/ab/3311945c.jpg","comment_is_top":false,"comment_ctime":1559488631,"is_pvip":false,"replies":[{"id":"36153","content":"非阻塞的自然不会等待 1 秒，但这 1 秒钟的时间内，CPU 是去处理其他请求的逻辑，并且把当前请求挂起。<br>等数据库返回了结果后，才唤醒之前的请求，这样就做到了同步。","user_name":"作者回复","comment_id":100233,"uid":"1017955","ip_address":"","utype":1,"ctime":1559552279,"user_name_real":"温铭@OpenResty"}],"discussion_count":3,"race_medal":0,"score":"14444390519","product_id":100028301,"comment_content":"老师你好，上面的代码中，如果是非阻塞的，他不是立马返回吗，怎么又会等1秒，怎么做到同步呢？","like_count":4,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452467,"discussion_content":"非阻塞的自然不会等待 1 秒，但这 1 秒钟的时间内，CPU 是去处理其他请求的逻辑，并且把当前请求挂起。\n等数据库返回了结果后，才唤醒之前的请求，这样就做到了同步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559552279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053787,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzvaL724GwtzZ5mcldUnlicicSlI8BXL9icRZbUOB10qjRMlmog7UTvwxSBHXagnPGGR1BYdjWcGGSg/132","nickname":"wwj","note":"","ucode":"B98AE5F5D85A87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4569,"discussion_content":"阻塞一般说的是io 这个我觉的应该是用户线程 就是常说的绿色线程 对于i o来说他实际上还是阻塞的 不存在非阻塞  应该说是用户线程同步 这个成本比较低 操作系统的同步 成本是比较高的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565569312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1184651,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/5XxiaGg3QRVLcQNw3jfzlVtXE6MbFD4nEQkIibEuM2ekic23qN1aGOZP58NhBeibHd8XN4x626icFSlw0VI5tMiauNWA/132","nickname":"lulu","note":"","ucode":"E2F5B9C2D36A7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053787,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzvaL724GwtzZ5mcldUnlicicSlI8BXL9icRZbUOB10qjRMlmog7UTvwxSBHXagnPGGR1BYdjWcGGSg/132","nickname":"wwj","note":"","ucode":"B98AE5F5D85A87","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9903,"discussion_content":"你理解错了，是IO等外部中断因为低速导致锁定了CPU，导致CPU空等待IO的完成，其他线程无法使用CPU，这个才是阻塞的意思，也就是阻塞了其他线程使用CPU。操作系统里面有相关介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568242448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4569,"ip_address":""},"score":9903,"extra":""}]}]},{"had_liked":false,"id":98082,"user_name":"馬偉偉💫","can_delete":false,"product_type":"c1","uid":1318103,"ip_address":"","ucode":"9FE5757917DE6B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/d7/f6bcb019.jpg","comment_is_top":false,"comment_ctime":1558909077,"is_pvip":false,"replies":[{"id":"35117","content":"一起学习","user_name":"作者回复","comment_id":98082,"uid":"1017955","ip_address":"","utype":1,"ctime":1558923386,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"14443810965","product_id":100028301,"comment_content":"期待已久，第一次听说这技术就是在网易云课堂老师讲的课，买了书准备学习老师就开了极客时间的专栏，结合书集和老师的专栏希望能有所收获。","like_count":3,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451548,"discussion_content":"一起学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558923386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100499,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1318915,"ip_address":"","ucode":"4907A3750CEAD6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo2SjCeylLv0P3Glle5277kA4b8cAuxr1NrC0njPKEqzSpB8IEicHB29GicFFwG1qiaxs4hxRiaBmoibVw/132","comment_is_top":false,"comment_ctime":1559567600,"is_pvip":false,"replies":[{"id":"36554","content":"我读“路啦”","user_name":"作者回复","comment_id":100499,"uid":"1017955","ip_address":"","utype":1,"ctime":1559805414,"user_name_real":"温铭@OpenResty"}],"discussion_count":2,"race_medal":0,"score":"10149502192","product_id":100028301,"comment_content":"Lua到底怎么读？","like_count":2,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452575,"discussion_content":"我读“路啦”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559805414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325126,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/dglMUGgevn9w5w3AGtTDibGhqGjf7G3GHwlOGXQl25xD7g2EsEktgxh2v4dgriaI2yLG2j45IhZCbhVg1eDrugOQ/132","nickname":"1024","note":"","ucode":"9DFAF1F44D469F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75000,"discussion_content":"读“lu a”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575714231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98427,"user_name":"LoveDr.kang","can_delete":false,"product_type":"c1","uid":1118806,"ip_address":"","ucode":"BED888A788922C","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/56/4abadfc3.jpg","comment_is_top":false,"comment_ctime":1559003913,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10148938505","product_id":100028301,"comment_content":"不要通过类比去理解同步非阻塞，从这句话就感觉老师很务实，网上很多举例子的真的特别误导人，尤其一些没实际经验的新手，还是要从概念入手，多多体会，才能领会精髓。","like_count":3},{"had_liked":false,"id":98528,"user_name":"许多子","can_delete":false,"product_type":"c1","uid":1318326,"ip_address":"","ucode":"D2ABB4906D18ED","user_header":"","comment_is_top":false,"comment_ctime":1559018138,"is_pvip":false,"replies":[{"id":"35256","content":"当然可以，OpenResty 是基于 NGINX 的。但需要注意的是，OpenResty 的版本一般会落后于 NGINX。","user_name":"作者回复","comment_id":98528,"uid":"1017955","ip_address":"","utype":1,"ctime":1559032713,"user_name_real":"温铭@OpenResty"}],"discussion_count":1,"race_medal":0,"score":"5853985434","product_id":100028301,"comment_content":"\b请问openresty可不可以就当作nginx来使用呢？不写lua的情况下，用来搭建web服务器，这两者有没有区别呢？","like_count":1,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451721,"discussion_content":"当然可以，OpenResty 是基于 NGINX 的。但需要注意的是，OpenResty 的版本一般会落后于 NGINX。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559032713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98382,"user_name":"小刚","can_delete":false,"product_type":"c1","uid":1062230,"ip_address":"","ucode":"494DA0730F9498","user_header":"https://static001.geekbang.org/account/avatar/00/10/35/56/59ae9888.jpg","comment_is_top":false,"comment_ctime":1558972799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853940095","product_id":100028301,"comment_content":"代码实现是同步与异步，阻塞是线程调用过程","like_count":1},{"had_liked":false,"id":339351,"user_name":"舟 leo","can_delete":false,"product_type":"c1","uid":2165530,"ip_address":"","ucode":"DE2BA1E906F2FB","user_header":"https://static001.geekbang.org/account/avatar/00/21/0b/1a/b793ca36.jpg","comment_is_top":false,"comment_ctime":1648042046,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648042046","product_id":100028301,"comment_content":"老师 有没有OpenResty的微信交流群呀","like_count":0},{"had_liked":false,"id":306157,"user_name":"lzh","can_delete":false,"product_type":"c1","uid":1336951,"ip_address":"","ucode":"C3D83DF4230109","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","comment_is_top":false,"comment_ctime":1628410645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628410645","product_id":100028301,"comment_content":"阻塞和非阻塞那里，我觉得文中有点没讲清楚。结合APUE第14章和自己的理解补充一下，仅供参考。<br><br>阻塞，意味着这个进程会被挂起；非阻塞，如果IO能读，就返回数据，err=nil；不能读则返回err != nil。<br><br>这里说mysql操作要1s（这个1s内，对mysql请求都会返回err!=nil），然后CPU趁机去处理其他请求，openresty在这里可能是用了类似yeild之类的方式（协程），当mysql返回err时，yeild到其他函数中执行，进程一直都在跑，没有被挂起。<br><br>如果当前进程就只有操作mysql一个协程（简单理解就是进程只有这一个专门query mysql的函数要执行），那这1s就会反复yeild出去然后又进入这个query函数，相当于一直在query mysql，然后mysq一直返回err。这样就是非阻塞的，在mysql没有返回数据前，进程是不会query redis的，这样就是同步的。<br><br>之前乍看“cpu趁机处理其他请求”这句话，会让我以为进程被挂起，这就感觉与非阻塞矛盾，像这种协程的方式，如果能按yeild来说说，那瞬间就能理解了。<br>","like_count":0},{"had_liked":false,"id":303958,"user_name":"贺钧威","can_delete":false,"product_type":"c1","uid":1218353,"ip_address":"","ucode":"3E1FC908C28E29","user_header":"https://static001.geekbang.org/account/avatar/00/12/97/31/76485177.jpg","comment_is_top":false,"comment_ctime":1627123993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627123993","product_id":100028301,"comment_content":"老师好，想问下 nginx 是异步非阻塞的，openresty是同步非阻塞的，那他们之间的同步异步的差异具体是指什么","like_count":0},{"had_liked":false,"id":210519,"user_name":"Geek_b2b3f5","can_delete":false,"product_type":"c1","uid":1547680,"ip_address":"","ucode":"6060E995FE3E90","user_header":"","comment_is_top":false,"comment_ctime":1587783076,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587783076","product_id":100028301,"comment_content":"老师，我刚入门OR, 有个小问题请教一下，ngx.utctime()与系统时间一致，ngx.localtime()比系统时间+8小时，怎么才能设置正常呢？","like_count":0,"discussions":[{"author":{"id":1547680,"avatar":"","nickname":"Geek_b2b3f5","note":"","ucode":"6060E995FE3E90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248552,"discussion_content":"打扰了，问题已解决，硬件时间未同步成系统时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587879024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196170,"user_name":"Geek__CherryKing","can_delete":false,"product_type":"c1","uid":1453587,"ip_address":"","ucode":"C93265645BEFCF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1zZ7icsZIYadtCb5T0BCzBLOWToNgQ2C7hPU5N5zpVbUeKfvlBjLibWeibxg0HN7icprEWaWF23S9qw/132","comment_is_top":false,"comment_ctime":1585241977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585241977","product_id":100028301,"comment_content":"初学入坑打卡","like_count":0},{"had_liked":false,"id":191888,"user_name":"lcp0578","can_delete":false,"product_type":"c1","uid":1559585,"ip_address":"","ucode":"E347928F8DB98D","user_header":"https://static001.geekbang.org/account/avatar/00/17/cc/21/e3c45732.jpg","comment_is_top":false,"comment_ctime":1584802613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584802613","product_id":100028301,"comment_content":"不错👍","like_count":0},{"had_liked":false,"id":179715,"user_name":"jackstraw","can_delete":false,"product_type":"c1","uid":1137207,"ip_address":"","ucode":"C967D2D6158F99","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/37/8775d714.jpg","comment_is_top":false,"comment_ctime":1582083128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582083128","product_id":100028301,"comment_content":"老师有遇到在高并发的情况下，lua代码不执行的情况么？","like_count":0},{"had_liked":false,"id":160709,"user_name":"Geek_67aae8","can_delete":false,"product_type":"c1","uid":1180081,"ip_address":"","ucode":"B586A5D7EDC71E","user_header":"https://static001.geekbang.org/account/avatar/00/12/01/b1/658b8540.jpg","comment_is_top":false,"comment_ctime":1576024505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576024505","product_id":100028301,"comment_content":"做爬虫的话，怎么样？","like_count":0},{"had_liked":false,"id":120031,"user_name":"ZeroIce","can_delete":false,"product_type":"c1","uid":1305369,"ip_address":"","ucode":"30133BA83CE349","user_header":"https://static001.geekbang.org/account/avatar/00/13/eb/19/0d990b03.jpg","comment_is_top":false,"comment_ctime":1564759490,"is_pvip":false,"replies":[{"id":"46069","content":"js 的不太懂","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1566198559,"ip_address":"","comment_id":120031,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564759490","product_id":100028301,"comment_content":"老师，异步可否通过js 宏、微任务进行理解？即：单线程js想做多线程的事（例：settimeout），<br><br>非阻塞：通过多线程进行并发处理","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461180,"discussion_content":"js 的不太懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566198559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118318,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1564320251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564320251","product_id":100028301,"comment_content":"老师好!这个同步非阻塞和。IO模型的非阻塞一样么?同步响应成功失败，配合IO多路复用使用。主线程selector多路复用器阻塞，任务提交线程池处理(子线程)。子线程处理完以后通过调用channel的回调函数响应客户端?","like_count":0},{"had_liked":false,"id":105321,"user_name":".","can_delete":false,"product_type":"c1","uid":1214439,"ip_address":"","ucode":"62FA36529ABF0E","user_header":"https://static001.geekbang.org/account/avatar/00/12/87/e7/043f9dda.jpg","comment_is_top":false,"comment_ctime":1560968513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560968513","product_id":100028301,"comment_content":"我对同步异步，阻塞非阻塞的理解是：把它们分别类比成‘’人‘’和’‘‘事’’。同步：一个人做事；异步；多个人同时做事。阻塞：要做的多件事情串行执行，做完一件事之后才能开始做下一件事；非阻塞：要做的多件事情互相穿插执行，无严格顺序要求。","like_count":0},{"had_liked":false,"id":101474,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1559815724,"is_pvip":true,"replies":[{"id":"36604","content":"没有了解过这本书，不好评价","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1559864346,"ip_address":"","comment_id":101474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559815724","product_id":100028301,"comment_content":"学了这门课程，还用看openresty入门到实践那本书吗","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452979,"discussion_content":"没有了解过这本书，不好评价","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559864346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100498,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1318915,"ip_address":"","ucode":"4907A3750CEAD6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo2SjCeylLv0P3Glle5277kA4b8cAuxr1NrC0njPKEqzSpB8IEicHB29GicFFwG1qiaxs4hxRiaBmoibVw/132","comment_is_top":false,"comment_ctime":1559567544,"is_pvip":false,"replies":[{"id":"36556","content":"API 网关是用来统一管理服务的网关，比如支付、用户登录等都是 API 形式对外提供的服务，它们都需要一个网关来做统一的安全和身份认证。<br>API 网关是基于 web 服务器，或者在 web 服务器后面一层的。","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1559805559,"ip_address":"","comment_id":100498,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559567544","product_id":100028301,"comment_content":"不懂就问：文中一直说的API网关是指什么？和nginx，tomcat，apache这种web服务器有什么区别？","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452574,"discussion_content":"API 网关是用来统一管理服务的网关，比如支付、用户登录等都是 API 形式对外提供的服务，它们都需要一个网关来做统一的安全和身份认证。\nAPI 网关是基于 web 服务器，或者在 web 服务器后面一层的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559805559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99165,"user_name":"Panda","can_delete":false,"product_type":"c1","uid":1095740,"ip_address":"","ucode":"911A200C7B18BE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b8/3c/1a294619.jpg","comment_is_top":false,"comment_ctime":1559173840,"is_pvip":false,"replies":[{"id":"35656","content":"👍","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1559193195,"ip_address":"","comment_id":99165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559173840","product_id":100028301,"comment_content":"NGINX 对资源的“抠门” + LuaJIT的轻量 = Openresty的高性能 灵活","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451999,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559193195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98569,"user_name":"KOK","can_delete":false,"product_type":"c1","uid":1545491,"ip_address":"","ucode":"2D8BB46F187783","user_header":"","comment_is_top":false,"comment_ctime":1559032573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559032573","product_id":100028301,"comment_content":"感谢，期待下一讲","like_count":0},{"had_liked":false,"id":98312,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1558954672,"is_pvip":true,"replies":[{"id":"35379","content":"当然可以，这就是 OpenResty 的优势","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1559100378,"ip_address":"","comment_id":98312,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558954672","product_id":100028301,"comment_content":"老师，这里说的openresty的动态特性包含lua_code_cache指令带来的不用动态加载nginx 以及文中所说“通过 OpenResty 中 lua-nginx-module 模块中提供的 Lua API，我们可以动态地控制路由、上游、SSL 证书、请求、响应等。”后者是指对每个请求可以个性化的控制吗？","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451639,"discussion_content":"当然可以，这就是 OpenResty 的优势","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559100378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98167,"user_name":"段先森","can_delete":false,"product_type":"c1","uid":1310788,"ip_address":"","ucode":"90251BB8BF8DDB","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/44/d5cf762b.jpg","comment_is_top":false,"comment_ctime":1558923992,"is_pvip":false,"replies":[{"id":"35380","content":"都是协程和事件驱动，是一样的","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1559100404,"ip_address":"","comment_id":98167,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558923992","product_id":100028301,"comment_content":"这个非阻塞和nodejs的非阻塞实现原理相同吗？","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451588,"discussion_content":"都是协程和事件驱动，是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559100404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98156,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1558922202,"is_pvip":true,"replies":[{"id":"35119","content":"是指不用 reload nginx 进程。<br>lua_code_cache 是默认开启的。","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1558923612,"ip_address":"","comment_id":98156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558922202","product_id":100028301,"comment_content":"这里说的不重启是指重新加载吗？还是说开启缓存指令？感觉两个都不是~😂","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451581,"discussion_content":"是指不用 reload nginx 进程。\nlua_code_cache 是默认开启的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558923612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}