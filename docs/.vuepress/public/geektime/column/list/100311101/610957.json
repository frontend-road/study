{"id":610957,"title":"08｜如何从零搭建自研的Vue组件库？","content":"<p>你好，我是杨文坚。</p><p>回顾我们之前的几节课，讲的都是Vue.js 3.x的入门级操作。从这节课开始，我们将以Vue.js 3.x 组件库的开发为线索，展开Vue.js 3.x企业级项目的进阶学习。</p><p>作为一个前端开发者，你肯定对前端组件库并不陌生。相信你在用Vue.js或者React.js开发实际项目时，或多或少都使用过相关开源组件库，例如Vue.js的ElementUI组件库和React的Ant Design组件库。</p><p>前端组件库的出现是为了方便我们实现更多的样式和交互效果。毕竟JavaScript + HTML + CSS的原生技术能力比较有限，如果基于原生技术能力来实现网页的样式和交互效果，要付出很大的工作量。而组件库能让前端开发者省去这部分工作量，直接进入页面的功能开发。</p><p>Vue.js 3.x 有很多现成的开源组件库，例如Element Plus和Ant Design Vue等都可以直接拿来用。为什么我们还要自己学Vue.js 3.x 的组件库开发呢？</p><h2>自研开发Vue.js 3.x 组件库能带来什么？</h2><p><strong>一方面是定制化的需要。</strong>企业产品必定是根据客户或者业务的特色量身定制的，也就是说它有一定的自定义性质，而开源的组件库不一定能满足所有定制化的前端功能。</p><!-- [[[read_end]]] --><p>这个时候，作为前端工程师，你就必须掌握自研组件库的开发能力，为可能出现的定制化组件的要求做好准备。</p><p><strong>另一方面，也能锻炼和提高自己的技术能力，提升工作效率。</strong></p><p>自研组件库的过程中，我们需要考虑很多的技术问题，例如“如何让组件库能开箱即用？”“如何能让组件库能定制化主题？”“如何保证组件库里所有组件的复用性和通用性”等等。在实现组件库过程中，你还需要考虑和解决很多业务外的技术问题，这是一个非常好的锻炼技术能力的机会。</p><p>而且，组件库开发到最后要沉淀一套UI框架，让以后项目直接复用，这就大大减少了以后重复性开发的工作量。例如现在组件库开发了一个通用对话框组件，以后其它项目就不需重新开发，直接复用就行。</p><p>说了这么多自研组件库的好处，那我们要怎么学习Vue.js 3.x 自研组件库的开发呢？有哪些开发要点呢？</p><h2>Vue.js 3.x 组件库开发要点</h2><p>Vue.js 3.x 组件库的核心作用是可以给其它项目复用。既然是复用，那么标准做法就是将组件库封装成npm模块进行使用。</p><p>所以这个时候，我们就需要考虑将组件库里的Vue.js代码编译成JavaScript文件，保证能支持引入组件库npm模块的同时，还要能自动识别TypeScript类型、支持ES Module和CommonJS模块格式、组件按需加载等操作。</p><p>总体来讲，这里可以划分为三个技术要点：</p><ul>\n<li>monorepo管理组件代码；</li>\n<li>Vue.js 3.x 源文件的多种模块格式编译；</li>\n<li>基于Less开发CSS样式文件和独立编译。</li>\n</ul><p><strong>先看第一点，monorepo管理组件库代码。</strong></p><p>我们在企业中开发组件库的时候，并不会像开源组件库那样，一概而论地将组件库划分为基础功能组件（例如Button组件、Dialog组件），而是要考虑到多业务场景类型，划分成基础功能组件类型、某某业务组件类型等。</p><p>这个时候，我们就需要把组件库划分成多个npm模块进行输出管理，同时需要尽量用一个代码仓库进行维护，因为不同类型的组件可能存在互相依赖或者引用的关系，要保证能在一个代码仓库中快速调试多个npm模块的代码效果。一个仓库管理多个npm模块（多个子项目），就需要用到monorepo的项目管理形式。</p><p><strong>第二个要点，了解Vue.js 3.x 源文件的多种模块格式编译。</strong></p><p>刚刚提到，组件库是以npm模块的形式提供给其他开发者使用的。开发者在使用组件库的时候，可以有多种JavaScript模块的使用格式，常见的是ES Module和CommonJS模块格式，所以我们也要将源码编译成ES Module和CommonJS格式。</p><p>但开发者在使用组件库的时候，不可能一次性把npm模块中所有组件都打包进业务项目，这样做会导致业务项目代码编译结果的体积非常大。为了避免冗余代码结果，我们必须支持组件库能够<strong>按需加载</strong>使用。这时候就需要每个组件独立编译，输出单独的文件，也支持使用者在自己的业务项目中单独使用某个npm里的某个组件。</p><p>上节课我们提到，保证企业项目中代码质量，有一点就是用TypeScript进行开发，但编译后的npm模块是JavaScript代码，怎么能让使用者识别到组件库的代码类型呢？这时就需要在输出JavaScript的npm模块里，加上编译输出组件库的JavaScript的TypeScript类型描述文件 （*.d.ts文件）。</p><p><strong>第三点，基于Less开发CSS样式文件和独立编译。</strong></p><p>前面说过，企业级的业务项目有很多定制化的需求，特别是前端页面的主题定制化能力，甚至是同一个企业内不同业务项目的主题定制都不一样。</p><p>考虑到要支持主题配置，我们采用Less来进行“编程方式”开发CSS。因为原生CSS是静态文件，不能像JavaScript那样有丰富的动态脚本能力可以执行动态的内容，例如函数复用、循环逻辑等特性，导致开发复用度高的CSS样式需要写很多重复性的代码。所以，这时候要让CSS能“编程化”，可以使用Less这个CSS的“预处理语言”。</p><p>Less是CSS的“预处理语言”，意思是可以让CSS像写JavaScript那样支持变量、循环、继承和自定义方法等多种特性，极大提高CSS的开发效率和样式复用率，最终再通过工具编译成CSS代码。</p><p>这里，考虑到组件也是按需加载，所以不同组件的CSS样式内容也要独立拆分。</p><p>到这儿，Vue.js 3.x组件库自研的开发要点就分析得差不多了，接下来根据三个要点我们一一讲解相关的技术实现，先来看如何搭建monorepo项目。</p><h2>如何搭建monorepo项目？</h2><p>从前面的分析中，我们多少可以了解到，monorepo项目就是一个仓库管理多个子项目的概念。在前端领域中，用monorepo管理同仓库多项目的方案有很多种，例如传统的Lerna技术方案、最近一两年比较流行的pnpm管理方案。</p><p>既然有这么多方案，那要怎么选择呢？我们可以参考Vue.js官方在GitHub上的代码仓库 <a href=\"https://github.com/vuejs/core\">https://github.com/vuejs/core</a> 的monorepo方案选择，就是用pnpm来管理monorepo项目，主要利用pnpm天然支持monorepo的管理能力，同时pnpm安装node_modules也能更省体积空间。</p><p>现在我们开始进入基于pnpm的monorepo方案的实现操作：</p><ul>\n<li>初始化代码目录；</li>\n<li>基于pnpm配置monorepo项目；</li>\n<li>安装所有子项目依赖。</li>\n</ul><p><strong>先看第一步，初始化项目的代码目录，项目的代码基础目录如下所示：</strong></p><pre><code class=\"language-shell\">.\n├── package.json\n├── packages/               # 多子项目的目录\n│&nbsp; &nbsp;├── business/           # 业务组件库 - 子项目目录\n│&nbsp; &nbsp;│&nbsp; &nbsp;├── package.json    # 业务组件库 - 子项目package.json声明\n│&nbsp; &nbsp;│&nbsp; &nbsp;└── src/*           # 业务组件库 - 子项目源码目录\n│&nbsp; &nbsp;└── components/         # 基础组件库 - 子项目目录\n│&nbsp; &nbsp; &nbsp; &nbsp;├── package.json    # 基础组件库 - 子项目package.json声明\n│&nbsp; &nbsp; &nbsp; &nbsp;└── src/*           # 基础组件库 - 子项目源码目录\n├── pnpm-workspace.yaml\n├── scripts/*\n└── tsconfig.json\n</code></pre><p>我来讲解一下上述目录中各自的作用：</p><ul>\n<li>根目录的 package.json 主要是用来声明公共的操作脚本和公共的开发编译所需的npm模块；</li>\n<li>packages/* 目录用来管理多个子项目，每个子项目都有各自的package.json项目声明文件；</li>\n<li>pnpm-workspace.yaml 是pnpm管理项目的配置文件；</li>\n<li>scripts/* 目录是用来存放项目通用编译脚本的；</li>\n<li>tsconfig.json 是用来声明TypeScript的项目配置的。</li>\n</ul><p>目录初始化还有一个最重要的点，就是对主项目和子项目目录下的 package.json依赖的初始化，我们现在对两个子项目的package.json文件进行初始化。</p><p>我们先初始化“基础组件库”子项目的 packages/components/package.json文件，如下面代码所示：</p><pre><code class=\"language-json\">{\n  \"name\": \"@my/components\",\n  \"version\": \"0.0.1\",\n  \"main\": \"dist/cjs/index.cjs\",\n  \"module\": \"dist/esm/index.mjs\",\n  \"types\": \"dist/esm/index.d.ts\",\n  \"devDependencies\": {\n    \"vue\": \"^3.2.39\"\n  },\n  \"peerDependencies\": {\n    \"vue\": \"^3.2.39\"\n  }\n}\n\n</code></pre><p>上述代码中，我们给“基础组件库”子项目加上了“@my”这个私有前缀名称。这个是可以自定义的，你可以根据自己所在企业npm源站可使用的前缀名称进行定义，方便统一命名子项目，后续的其他子项目也可以加上同样的 “@xxx/”的前缀进行统一命名。</p><p>注意，这里使用 “@xxx/”这类私有命名前缀不是必要的操作，但是为了方便管理子项目npm模块名称，一般都要加上这类命名前缀。</p><p>接下来，我们来初始化“业务组件库”子项目的 packages/business/package.json文件，如下面代码所示：</p><pre><code class=\"language-json\">{\n  \"name\": \"@my/business\",\n  \"version\": \"0.0.1\",\n  \"main\": \"dist/cjs/index.cjs\",\n  \"module\": \"dist/esm/index.mjs\",\n  \"types\": \"dist/esm/index.d.ts\",\n  \"dependencies\": {\n    \"@my/components\": \"^0.0.1\"\n  },\n  \"devDependencies\": {\n    \"vue\": \"^3.2.39\"\n  },\n  \"peerDependencies\": {\n    \"vue\": \"^3.2.39\"\n  }\n}\n</code></pre><p>在“业务组件库”子项目这个npm模块依赖里，我们使用了“基础组件库”子项目模块 “@my/components”。其实npm站点上并不需要存在这个模块，后续通过pnpm进行monorepo的管理，实现项目子依赖模块@my/components 直接指向和引用 packages/components的代码。</p><p><strong>第一步完成，我们进行第二步，基于pnpm配置monorepo项目。</strong></p><p>在 pnpm-workspace.yaml 这个文件里，进行monorepo的项目配置，具体代码如下所示：</p><pre><code class=\"language-yaml\">packages:\n  - packages/*\n</code></pre><p>声明 packages/* 目录是用来管理所有子项目的。</p><p>接着是第三步，安装所有子项目依赖。这里我们要先保证本地电脑有全局的pnpm命令，可以通过以下脚本进行安装：</p><pre><code class=\"language-shell\">npm i -g pnpm\n</code></pre><p>最后再在项目的根目录下执行：</p><pre><code class=\"language-plain\">pnpm i&nbsp;\n</code></pre><p>就可以实现monorepo项目的依赖安装和管理了。</p><p>pnpm安装依赖过后，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ab/26/ab87e909fcf7083848ec07be9debac26.png?wh=1920x1007\" alt=\"图片\"></p><p>业务组件库子项目（@my/business）里依赖了基础组件库的子项目（@my/components），通过 pnpm管理的monorepo项目方式，将依赖的@my/components 子项目通过“软链接”形式指向了真正的 components/* 目录。</p><p>monorepo里有“软链接”实现子项目的npm模块依赖关系，我们就可以放心拆分不同类型组件库，以及管理不同类型组件库的嵌套依赖关系了。</p><h2>怎么对组件库做编译设置？</h2><p>实现了多种类型组件库项目聚合的monorepo项目目录，我们就要开始准备各个子项目的初始化源码和源码的编译脚本。</p><p>我们可以这样设计子项目里组件库的文件目录格式：</p><pre><code class=\"language-shell\">.\n├── README.md\n├── env.d.ts\n├── package.json\n├── packages\n│&nbsp; &nbsp;├── business/\n│&nbsp; &nbsp;│&nbsp; &nbsp;├── package.json\n│&nbsp; &nbsp;│&nbsp; &nbsp;└── src/                    # 业务组件库 - 子项目源码目录\n│&nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;├── comp-000/           # 业务组件 - 单独组件目录\n│&nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp;├── xxxx.vue\n│&nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp;├── index.ts        # 业务组件 - 组件索引文件\n│&nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp;└── style\n│&nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;└── index.less  # 业务组件 - 组件样式文件\n│   │       ├── comp-001/*  \n│   │       ├── comp-002/*  \n│&nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;├── index.less\n│&nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;└── index.ts\n│&nbsp; &nbsp;└── components/\n│&nbsp; &nbsp; &nbsp; &nbsp;├── package.json\n│&nbsp; &nbsp; &nbsp; &nbsp;└── src                     # 基础组件库 - 子项目源码目录\n│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;├── comp-000/           # 基础组件 - 单独组件目录\n│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp;├── xxxx.vue\n│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp;├── index.ts        # 基础组件 - 组件索引文件\n│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp;└── style\n│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│&nbsp; &nbsp; &nbsp; &nbsp;└── index.less  # 基础组件 - 组件样式文件\n│           ├── comp-001/*  \n│           ├── comp-002/*  \n│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;├── index.less\n│&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;└── index.ts\n├── pnpm-workspace.yaml\n├── scripts/*\n└── tsconfig.json\n</code></pre><p>从上述代码中可以看到，不同类型的组件库里的每个单独组件都有一个索引文件和样式文件作为入口进行管理。这样就能保证我们的组件格式都是统一的，而且有一一对应的功能源码文件和样式文件，最后编译结果也能通过对应路径找到对应的组件。</p><p>既然我们统一了组件的目录格式，那么接下来我们就要根据不同类型的对应组件目录，进行代码的编译。代码编译分成以下三个步骤：</p><ul>\n<li>第一步：编译TypeScript和Vue.js 3.x源码为ES Module和CommonJS模块的两种JavaScript代码文件；</li>\n<li>第二步：编译出所有JavaScript文件的TypeScript类型描述文件；</li>\n<li>第三步：把文件编译Less成CSS文件。</li>\n</ul><p>下面我们来详细解释下每一步操作。</p><p>先看第一步，也就是编译TypeScript和Vue.js 3.x源码成ES Module和CommonJS模块的两种JavaScript代码文件。我们需要在项目的 scripts/* 目录下编写以下编译脚本。</p><p>脚本文件是 scripts/build-module.ts，具体代码如下：</p><pre><code class=\"language-typescript\">import fs from 'node:fs';\nimport { rollup } from 'rollup'\nimport vue from '@vitejs/plugin-vue'\nimport vueJsx from '@vitejs/plugin-vue-jsx'\nimport VueMacros from 'unplugin-vue-macros/rollup'\nimport { nodeResolve } from '@rollup/plugin-node-resolve'\nimport commonjs from '@rollup/plugin-commonjs'\nimport esbuild from 'rollup-plugin-esbuild'\nimport glob from 'fast-glob'\nimport type { OutputOptions } from 'rollup';\nimport { resolvePackagePath } from './util';\n\nconst getExternal = async (pkgDirName: string) =&gt; {\n  const pkgPath = resolvePackagePath(pkgDirName, 'package.json');\n  const manifest = require(pkgPath) as any;\n  const { dependencies = {}, peerDependencies = {}, devDependencies = {} } = manifest;\n  const deps: string[] = [...new Set([\n    ...Object.keys(dependencies), \n    ...Object.keys(peerDependencies), \n    ...Object.keys(devDependencies)\n  ])];\n  return (id: string) =&gt; {\n    if (id.endsWith('.less')) {\n      return true;\n    }\n    return deps.some(\n      (pkg) =&gt; id === pkg || id.startsWith(`${pkg}/`)\n    )\n  }\n}\n\nconst build = async (pkgDirName: string) =&gt; {\n\n  const pkgDistPath = resolvePackagePath(pkgDirName, 'dist');\n  if (fs.existsSync(pkgDistPath) &amp;&amp; fs.statSync(pkgDistPath).isDirectory()) {\n    fs.rmSync(pkgDistPath, { recursive: true })\n  }\n\n  const input = await glob([\n    '**/*.{js,jsx,ts,tsx,vue}',\n    '!node_modules'\n  ], {\n    cwd: resolvePackagePath(pkgDirName, 'src'),\n    absolute: true,\n    onlyFiles: true,\n  })\n\n  const bundle = await rollup({\n    input,\n    plugins: [\n      VueMacros({\n        setupComponent: false,\n        setupSFC: false,\n        plugins: {\n          vue: vue({\n            isProduction: true,\n          }),\n          vueJsx: vueJsx(),\n        },\n      }),\n      nodeResolve({\n        extensions: ['.mjs', '.js', '.json', '.ts'],\n      }),\n      commonjs(),\n      esbuild({\n        sourceMap: true,\n        target: 'es2015',\n        loaders: {\n          '.vue': 'ts',\n        },\n      }),\n    ],\n    external: await getExternal(pkgDirName),\n    treeshake: false,\n  })\n\n  const options: OutputOptions[] = [\n    // CommonJS 模块格式的编译\n    {\n      format: 'cjs',\n      dir: resolvePackagePath(pkgDirName, 'dist', 'cjs'),\n      exports:'named',\n      preserveModules: true,\n      preserveModulesRoot: resolvePackagePath(pkgDirName, 'src'),\n      sourcemap: true,\n      entryFileNames: '[name].cjs',\n    },\n    // ES Module 模块格式的编译\n    {\n      format: 'esm',\n      dir: resolvePackagePath(pkgDirName, 'dist', 'esm'),\n      exports: undefined,\n      preserveModules: true,\n      preserveModulesRoot: resolvePackagePath(pkgDirName, 'src'),\n      sourcemap: true,\n      entryFileNames: '[name].mjs',\n    }\n  ]\n  return Promise.all(options.map((option) =&gt; bundle.write(option)))\n}\n\nconsole.log('[TS] 开始编译所有子模块···')\nawait build('components');\nawait build('business');\nconsole.log('[TS] 编译所有子模块成功！')\n\n</code></pre><p>以上的编译脚本，就是基于Rollup来遍历所有Vue.js 3.x源码文件和TypeScript文件，再进行一一对应的编译。</p><p>我们最后将编译出来的CommonJS模块格式文件命名成 *.cjs后缀的JavaScript文件，将ES Module模块格式文件命名成*.mjs后缀的JavaScript文件，为后续的package.json输出格式做准备。</p><p>最后生成的结果是以组件形式一一对应在每个子项目的dist目录下，如下所示：</p><pre><code class=\"language-shell\">.\n├── ...\n├── packages\n│   ├── components/\n│   │   ├── dist/\n│   │   │   ├── esm/\n│   │   │   │   ├── comp-000/*\n│   │   │   │   ├── comp-001/*  \n│   │   │   │   └── comp-002/*  \n│   │   │   └── cjs/\n│   │   │       ├── comp-000/*\n│   │   │       ├── comp-001/*  \n│   │   │       └── comp-002/*  \n│   │   └── src/              \n│   │       ├── comp-000/*\n│   │       ├── comp-001/*  \n│   │       └── comp-002/*  \n│   └── ...\n└── ...\n</code></pre><p>接下来我们进入第二步，编译出所有JavaScript文件的TypeScript类型描述文件。这就需要在项目的 scripts/* 目录下编写以下编译脚本。</p><p>脚本文件是scripts/build-dts.ts，具体代码如下：</p><pre><code class=\"language-typescript\">import process from 'node:process'\nimport path from 'node:path';\nimport fs from 'node:fs'\nimport * as vueCompiler from 'vue/compiler-sfc'\nimport glob from 'fast-glob';\nimport { Project } from 'ts-morph'\nimport type { CompilerOptions, SourceFile } from 'ts-morph'\nimport { resolveProjectPath, resolvePackagePath } from './util';\n\nconst tsWebBuildConfigPath = resolveProjectPath('tsconfig.web.build.json');\n\n// 检查项目的类型是否正确\nfunction checkPackageType(project: Project) {\n  const diagnostics = project.getPreEmitDiagnostics();\n  if (diagnostics.length &gt; 0) {\n    console.error(project.formatDiagnosticsWithColorAndContext(diagnostics))\n    const err = new Error('TypeScript类型描述文件构建失败！')\n    console.error(err)\n    throw err\n  }\n}\n\n// 将*.d.ts文件复制到指定格式模块目录里\nasync function copyDts(pkgDirName: string) {\n  const dtsPaths = await glob(['**/*.d.ts'], {\n    cwd: resolveProjectPath('dist', 'types', 'packages', pkgDirName, 'src'),\n    absolute: false,\n    onlyFiles: true,\n  });\n\n  dtsPaths.forEach((dts: string) =&gt; {\n    const dtsPath =  resolveProjectPath('dist', 'types', 'packages', pkgDirName, 'src', dts)\n    const cjsPath = resolvePackagePath(pkgDirName, 'dist', 'cjs', dts);\n    const esmPath = resolvePackagePath(pkgDirName, 'dist', 'esm', dts);\n    const content = fs.readFileSync(dtsPath, { encoding: 'utf8' });\n    fs.writeFileSync(cjsPath, content);\n    fs.writeFileSync(esmPath, content);\n  });\n}\n\n// 添加源文件到项目里\nasync function addSourceFiles(project: Project, pkgSrcDir: string) {\n  project.addSourceFileAtPath(resolveProjectPath('env.d.ts'))\n\n  const globSourceFile = '**/*.{js?(x),ts?(x),vue}'\n  const filePaths = await glob([globSourceFile], {\n    cwd: pkgSrcDir,\n    absolute: true,\n    onlyFiles: true,\n  })\n\n  const sourceFiles: SourceFile[] = []\n  await Promise.all([\n    ...filePaths.map(async (file) =&gt; {\n      if (file.endsWith('.vue')) {\n        const content = fs.readFileSync(file, { encoding: 'utf8' })\n        const hasTsNoCheck = content.includes('@ts-nocheck')\n\n        const sfc = vueCompiler.parse(content)\n        const { script, scriptSetup } = sfc.descriptor\n        if (script || scriptSetup) {\n          let content =\n            (hasTsNoCheck ? '// @ts-nocheck\\n' : '') + (script?.content ?? '')\n\n          if (scriptSetup) {\n            const compiled = vueCompiler.compileScript(sfc.descriptor, {\n              id: 'temp',\n            })\n            content += compiled.content\n          }\n\n          const lang = scriptSetup?.lang || script?.lang || 'js'\n          const sourceFile = project.createSourceFile(\n            `${path.relative(process.cwd(), file)}.${lang}`,\n            content\n          )\n          sourceFiles.push(sourceFile)\n        }\n      } else {\n        const sourceFile = project.addSourceFileAtPath(file)\n        sourceFiles.push(sourceFile)\n      }\n    }),\n  ])\n\n  return sourceFiles\n}\n\n// 生产Typescript类型描述文件\nasync function generateTypesDefinitions(\n  pkgDir: string,\n  pkgSrcDir: string,\n  outDir: string\n){\n  const compilerOptions: CompilerOptions = {\n    emitDeclarationOnly: true,\n    outDir,\n  }\n  const project = new Project({\n    compilerOptions,\n    tsConfigFilePath: tsWebBuildConfigPath\n  })\n\n  const sourceFiles = await addSourceFiles(project, pkgSrcDir)\n  checkPackageType(project);\n  await project.emit({\n    emitOnlyDtsFiles: true,\n  })\n\n  const tasks = sourceFiles.map(async (sourceFile) =&gt; {\n    const relativePath = path.relative(pkgDir, sourceFile.getFilePath())\n\n    const emitOutput = sourceFile.getEmitOutput()\n    const emitFiles = emitOutput.getOutputFiles()\n    if (emitFiles.length === 0) {\n      throw new Error(`异常文件: ${relativePath}`)\n    }\n\n    const subTasks = emitFiles.map(async (outputFile) =&gt; {\n      const filepath = outputFile.getFilePath()\n      fs.mkdirSync(path.dirname(filepath), {\n        recursive: true,\n      });\n    })\n\n    await Promise.all(subTasks)\n  })\n  await Promise.all(tasks)\n}\n\nasync function build(pkgDirName) {\n  const outDir = resolveProjectPath('dist', 'types');\n  const pkgDir = resolvePackagePath(pkgDirName);\n  const pkgSrcDir = resolvePackagePath(pkgDirName, 'src');\n  await generateTypesDefinitions(pkgDir, pkgSrcDir, outDir);\n  await copyDts(pkgDirName);\n}\n\nconsole.log('[Dts] 开始编译d.ts文件···')\nawait build('components');\nawait build('business');\nconsole.log('[Dts] 编译d.ts文件成功！')\n</code></pre><p>以上代码是基于两个环节进行操作的，第一个环节是基于 vue/compiler-sfc 的Vue.js 3.x编译器，将Vue.js源码编译成 TypeScript代码，第二环节是结合原有其它TypeScript代码文件，进行TypeScript的类型文件生成。</p><p>具体结果如下所示：</p><pre><code class=\"language-shell\">.\n├── ...\n├── packages\n│   ├── components/\n│   │   ├── dist/\n│   │   │   ├── esm/\n│   │   │   │   ├── comp-000/\n│   │   │   │   │   ├── xxx.mjs\n│   │   │   │   │   └── xxx.d.ts\n│   │   │   │   └── **  \n│   │   │   └── cjs/ \n│   │   │       ├── comp-000/\n│   │   │       │   ├── xxx.cjs\n│   │   │       │   └── xxx.d.ts\n│   │   │       └── ** \n│   │   └── src/               \n│   │       └── **\n│   └── ...\n└── ...\n</code></pre><p>每个JavaScript结果文件（mjs/cjs格式），都有一个对应的 d.ts 的TypeScript类型声明文件，这样给其他子项目使用时，就可以直接在TypeScript里使用，在VS Code编辑器里直接显示类型提示。</p><p>第三步，也就是最后一步，我们要来把Less文件编译成CSS文件。我们需要在项目的 scripts/* 目录下编写以下编译脚本。</p><p>脚本文件是 scripts/build-css.ts，具体代码如下：</p><pre><code class=\"language-typescript\">import fs from 'node:fs';\nimport path from 'node:path';\nimport glob from 'fast-glob';\nimport less from 'less';\nimport { resolvePackagePath, wirteFile } from './util';\n\nfunction compileLess(file: string): Promise&lt;string&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    const content = fs.readFileSync(file, { encoding: 'utf8' });\n    less.render(content, {\n      paths: [ path.dirname(file) ],\n      filename: file,\n      plugins: [],\n      javascriptEnabled: true\n    }).then((result) =&gt; {\n      resolve(result.css);\n    }).catch((err) =&gt; {\n      reject(err);\n    })\n  })\n}\n\nasync function build(pkgDirName: string) {\n  const pkgDir = resolvePackagePath(pkgDirName, 'src');\n  const filePaths = await glob(['**/style/index.less'], {\n    cwd: pkgDir,\n  });\n  const indexLessFilePath = resolvePackagePath(pkgDirName, 'src', 'index.less');\n  if (fs.existsSync(indexLessFilePath)) {\n    filePaths.push('index.less')\n  }\n  for (let i = 0; i &lt; filePaths.length; i ++) {\n    const file = filePaths[i];\n    const absoluteFilePath = resolvePackagePath(pkgDirName, 'src', file);\n    const cssContent = await compileLess(absoluteFilePath);\n    const cssPath = resolvePackagePath(pkgDirName, 'dist', 'css', file.replace(/.less$/, '.css'));\n    wirteFile(cssPath, cssContent);\n  }\n  \n}\nconsole.log('[CSS] 开始编译Less文件···')\nawait build('components');\nawait build('business');\nconsole.log('[CSS] 编译Less成功！')\n</code></pre><p>上述代码，主要是将Less文件以组件固定的目录格式一一对应编译到 dist目录里，具体编译结果如下所示：</p><pre><code class=\"language-shell\">.\n├── ...\n├── packages\n│   ├── components/\n│   │   ├── dist/\n│   │   │   ├── css/\n│   │   │   │   ├── comp-000/\n│   │   │   │   │   └── style\n│   │   │   │   │         └── index.css\n│   │   │   │   └── **  \n│   │   │   ├── esm/\n│   │   │   │   ├── comp-000/\n│   │   │   │   └── **  \n│   │   │   └── cjs/ \n│   │   │       ├── comp-000/\n│   │   │       └── ** \n│   │   └── src/               \n│   │       └── comp-000/\n│   │           └── style/\n│   │               └── index.less\n│   └── ...\n└── ...\n</code></pre><p>通过上述三步操作，我们可以发现最终编译结果是存在每个子项目里 dist/esm/*目录、dist/cjs/*目录和dist/css/*目录里，而且每个组件在这三个目录的位置都是可以一一对应找到的。</p><p>当我们把Vue.js组件库的源码都编译成JavaScript和CSS代码后，接下来我们就需要进入到使用组件库的环节了，也就是在其他项目中使用我们本项目里的组件库。</p><h2>在其他项目中使用组件库</h2><p>在讲解之前，我们回顾刚刚讲过的组件库开发要点，其中一个是可以支持组件的按需加载，也就是其他项目使用组件库的时候，可以按照自己需要使用个别组件，而不会把整个组件库全量打包。</p><p>所以在组件库发布到npm企业内部站点的时候，我们还需要在组件库子项目每个package.json文件里加上以下配置：</p><pre><code class=\"language-json\">{\n  \"main\": \"dist/cjs/index.cjs\",\n  \"module\": \"dist/esm/index.mjs\",\n  \"types\": \"dist/esm/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"require\": \"./dist/cjs/index.cjs\",\n      \"import\": \"./dist/esm/index.mjs\",\n      \"types\": \"./dist/esm/index.d.ts\"\n    },\n    \"./esm/*\": {\n      \"import\": \"./dist/esm/*/index.mjs\",\n      \"types\": \"./dist/esm/*/index.d.ts\"\n    },\n    \"./cjs/*\": {\n      \"require\": \"./dist/cjs/*/index.cjs\",\n      \"types\": \"./dist/cjs/*/index.d.ts\"\n    },\n    \"./css/*\": \"./dist/css/*\"\n  }\n}\n</code></pre><p>以上配置就是可以让使用者在使用组件库的时候，可以全量使用，例如 ES Module格式使用：</p><pre><code class=\"language-typescript\">import { Comp001, Comp002 } from '@my/components'\nimport '@my/components/css/index.css'\n</code></pre><p>换成 CommonJS格式使用：</p><pre><code class=\"language-typescript\">const { Comp001, Comp002 } = require('@my/components');\nrequire('@my/components/css/index.css')\n</code></pre><p>也可以按需使用组件库，避免出现构建器对代码全量打包，例如 ES Module格式使用：</p><pre><code class=\"language-typescript\">import Comp001 from '@my/components/esm/comp-001';\nimport Comp002 from '@my/components/esm/comp-002';\nimport '@my/components/css/comp-001/style/index.css';\nimport '@my/components/css/comp-002/style/index.css'\n</code></pre><p>换成 CommonJS格式使用：</p><pre><code class=\"language-typescript\">const Comp001 = require('@my/components/cjs/comp-001');\nconst Comp002 = require('@my/components/cjs/comp-002');\nrequire('@my/components/css/comp-001/style/index.css');\nrequire('@my/components/css/comp-002/style/index.css');\n</code></pre><p>至此，我们就完成Vue.js 3.x自研组件库的开发入门了。</p><h2>总结</h2><p>这节课核心是想带你学会Vue.js 3.x自研组件库的开发入门，这也是企业级Vue.js 3.x项目的进阶部分的第一课。自研组件库的重要性，简单来讲就是开源组件库满足不了企业的定制化需求，需要自研才能满足企业的特色组件库的需要。</p><p>我们总结一下组件库开发的三个要素：</p><ul>\n<li>用monorepo管理多种类型组件库，这类项目的代码管理方式，可以一个仓库同时聚合管理多个项目，让项目之间代码依赖使用更方便；</li>\n<li>源码要编译成多种模块格式（CommonJS和ES Module），主要考虑到前端代码npm模块的时候，目前主流是ES Module模块格式，但还是存在很多传统的CommonJS模块格式的使用兼容。所以在开发自研组件库的时候，尽量要考虑这两种模块格式；</li>\n<li>基于Less等预处理CSS语言来开发组件库的样式，由于CSS语言能力有限，无法像JavaScript那样可以使用各种编程逻辑和特性，所以需要借助CSS预处理语言进行开发CSS。</li>\n</ul><p>以上都是大厂内部实现组件库或者开源社区实现组件库的主流技术方案，同时本节课最后也根据主流组件库编译技术方案，通过实际的编译脚本实现，给你演示了如何进行源码编译，以及编译后组件库的结果目录的规范设计和作用。</p><p>这节课只是组件库开发入门，后续会逐步进阶增加难度，希望你能掌握本节课要点，为后续进阶学习打下扎实的技术基础。</p><h2>思考题</h2><p>组件库的按需加载实现方式，还有其它的方案吗？欢迎在留言区参与讨论，期待你的回答，我们下一讲见。</p><h3><a href=\"https://github.com/FE-star/vue3-course/tree/main/chapter/08\">完整的代码在这里</a></h3>","neighbors":{"left":{"article_title":"加餐｜基础篇思考题答疑","id":610950},"right":{"article_title":"09｜主题方案和基础组件：如何设计组件库的主题方案？","id":611229}},"comments":[{"had_liked":false,"id":364610,"user_name":"ZR-rd","can_delete":false,"product_type":"c1","uid":2076199,"ip_address":"北京","ucode":"427E69255F30D8","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ae/27/74828c37.jpg","comment_is_top":false,"comment_ctime":1671184445,"is_pvip":false,"replies":[{"id":134993,"content":"您好，具体的使用方式在本课源码案例有说明指南哈。源码地址在这里 https:&#47;&#47;github.com&#47;FE-star&#47;vue3-course&#47;tree&#47;main&#47;chapter&#47;08 ","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678624727,"ip_address":"浙江","comment_id":364610,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"提个建议：这么多文件配置完了但最后怎么用还是不太清楚。建议可以编写一个简单的组件进行示例，然后打包，发布，再在其他项目中引入使用，这样能够更清晰的了解组件库开发的整个流程","like_count":9,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608723,"discussion_content":"您好，具体的使用方式在本课源码案例有说明指南哈。源码地址在这里 https://github.com/FE-star/vue3-course/tree/main/chapter/08 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678624727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1792820,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5b/34/113c117e.jpg","nickname":"ZH 小小浩","note":"","ucode":"E2A86D054361BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":649646,"discussion_content":"仓库里没看到什么说明的东西呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723693744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":608723,"ip_address":"北京","group_id":0},"score":649646,"extra":""}]},{"author":{"id":1625271,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/b7/c9ec5b8c.jpg","nickname":"文艺理科生","note":"","ucode":"ECEBE56833156D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597550,"discussion_content":"来个视频还是清晰些","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672016647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364153,"user_name":"风太大太大","can_delete":false,"product_type":"c1","uid":1368376,"ip_address":"中国香港","ucode":"E0221487898D62","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/dCfVz7wIUT4fM7zQO3gIwXo3BGodP5FJuCdMxobZ5dXpzBeTXiaB3icoFqj22EbIGCu1xxd1FLo9xic0a2pGnunibg/132","comment_is_top":false,"comment_ctime":1670579721,"is_pvip":false,"replies":[{"id":132484,"content":"点赞","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1671036344,"ip_address":"中国香港","comment_id":364153,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"按需加载实现方式，\n1. 文中提及的方案，手动按需加载。\nimport { Comp001, Comp002 } from &#39;@my&#47;components&#39;\nimport &#39;@my&#47;components&#47;css&#47;index.css&#39;\n\n2.社区还有一种方案，利用babel的能力，（babel-plugin-import）\n代码的话就是 import { Comp001, Comp002 } from &#39;@my&#47;components&#39;，安装了这个插件，可以不写引入css的文件，但其实本质还是工具帮我们做了引入的事情的事情，将多个文件打包成一个文件。\n\n不过类似全量引入的情况，例如引用elementUi 如果一开始你就直接Vue.use(ElementUi)这样就起不到按需加载的作用了就是全量使用了，所以需要注意.\n\n3.我观察到loadsh关于按需加载的其他方案，例如loadsh.throttle，代码如下：import throttle from loadsh.throttle。看了一下代码，这块应该是开发者二次再上传loadsh.throttle到npm里了，所以这块也增加了维护负担，部署loadsh的时候需要二次部署\n\n坦白的说我，我心目中更友好的是方案3，需要我们上传npm包的时候上传写一段脚本，执行上传子包的地部署方案。最后代码如下，然后开发者使用的时候也是按需加载就可以了\n import Comp001  from &#39;@my&#47;components.Comp001&#39;\n\n\n\n\n","like_count":5,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596507,"discussion_content":"点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671036344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364359,"user_name":"海是蓝天的倒影","can_delete":false,"product_type":"c1","uid":2300783,"ip_address":"上海","ucode":"18355BB7DC364D","user_header":"https://static001.geekbang.org/account/avatar/00/23/1b/6f/ee41e363.jpg","comment_is_top":false,"comment_ctime":1670895666,"is_pvip":false,"replies":[{"id":134997,"content":"您好， `scripts&#47;build-module.ts` 这个脚本的编译步骤可以分成以下几点：\n1. 用fast-glob模块来获取组件目录，也就是所有组件路径。\n2. 把所有组件路径封装成Rollup编译入口。\n3. 配置Rollup的编译配置，区分ESM和CJS两种输出结果。\n4. 执行Rollup编译，编译出两种结果。\n","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678625242,"ip_address":"浙江","comment_id":364359,"utype":1}],"discussion_count":2,"race_medal":1,"score":2,"product_id":100311101,"comment_content":"`scripts&#47;build-module.ts`\n老师，源码打包编译成ES Module 和 CommonJS 模块两种代码的配置这块，可以详细讲下rollup执行过程吗？理解起来有点吃力","like_count":2,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608729,"discussion_content":"您好， `scripts/build-module.ts` 这个脚本的编译步骤可以分成以下几点：\n1. 用fast-glob模块来获取组件目录，也就是所有组件路径。\n2. 把所有组件路径封装成Rollup编译入口。\n3. 配置Rollup的编译配置，区分ESM和CJS两种输出结果。\n4. 执行Rollup编译，编译出两种结果。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678625242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596508,"discussion_content":"答疑篇看看能不能讲一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671036502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368666,"user_name":"沉默的话唠","can_delete":false,"product_type":"c1","uid":1231254,"ip_address":"广西","ucode":"90212EF174C6E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/96/4577c1ef.jpg","comment_is_top":false,"comment_ctime":1676537818,"is_pvip":false,"replies":[{"id":134955,"content":"您好，由于文章篇幅受限，代码太多无法全部贴出来，关于第8讲更多代码详情，可以看本课的在GitHub仓库上的源码案例  https:&#47;&#47;github.com&#47;FE-star&#47;vue3-course&#47;tree&#47;main&#47;chapter&#47;08 ","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678524434,"ip_address":"浙江","comment_id":368666,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"到第二步主package.json没贴出来，确实pnpm i 后，啥都没有，直接 Already up-to-date。 \n\n去看了下源代码的package.json 都是配好了的，第二步的时候是什么也不知道是什么。\n\n细节流程呀，任重道远~ ","like_count":1,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608572,"discussion_content":"您好，由于文章篇幅受限，代码太多无法全部贴出来，关于第8讲更多代码详情，可以看本课的在GitHub仓库上的源码案例  https://github.com/FE-star/vue3-course/tree/main/chapter/08 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678524435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365208,"user_name":"善良的老王","can_delete":false,"product_type":"c1","uid":2957469,"ip_address":"四川","ucode":"4D305C2279BCD9","user_header":"https://static001.geekbang.org/account/avatar/00/2d/20/9d/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1672243914,"is_pvip":false,"replies":[{"id":134977,"content":"您好，本课程的自研组件库设计，也是参考了部分ElementPlus开源代码的设计。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678612781,"ip_address":"浙江","comment_id":365208,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"我们公司就是按这种方式把elementPlus引入二开 看完这篇文章 再看公司的组件库 感觉豁然开朗 👍","like_count":1,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608694,"discussion_content":"您好，本课程的自研组件库设计，也是参考了部分ElementPlus开源代码的设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678612781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370580,"user_name":"落叶🍂建良","can_delete":false,"product_type":"c1","uid":1238358,"ip_address":"广东","ucode":"4015FADD0EFD61","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/56/3bee284c.jpg","comment_is_top":false,"comment_ctime":1678976946,"is_pvip":false,"replies":[{"id":135253,"content":"您好，本课程代码案例使用pnpm来管理monorepo，最简单的操作是进入子项目进行初始化package.json和安装。\n\n如果要更加便捷操作monorepo的子项目，可以使用lerna来管理monorepo子项目","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1679123044,"ip_address":"浙江","comment_id":370580,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"子项目package.json声明, 是需要自己写吗?还是有快捷命令帮忙生成?","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609693,"discussion_content":"您好，本课程代码案例使用pnpm来管理monorepo，最简单的操作是进入子项目进行初始化package.json和安装。\n\n如果要更加便捷操作monorepo的子项目，可以使用lerna来管理monorepo子项目","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679123044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238358,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/56/3bee284c.jpg","nickname":"落叶🍂建良","note":"","ucode":"4015FADD0EFD61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":610464,"discussion_content":"希望老师加餐lerna😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679572365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368679,"user_name":"浩明啦","can_delete":false,"product_type":"c1","uid":1377422,"ip_address":"广东","ucode":"120ED8FC45B992","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/8e/e75ecc5e.jpg","comment_is_top":false,"comment_ctime":1676556493,"is_pvip":false,"replies":[{"id":134954,"content":"是的，借助package.json的配置来按需加载，这个需要npm模块能提供ES Modules格式的代码文件。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678524316,"ip_address":"浙江","comment_id":368679,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"老师还有 side effect 的设置","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608571,"discussion_content":"是的，借助package.json的配置来按需加载，这个需要npm模块能提供ES Modules格式的代码文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678524316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366321,"user_name":"Nexus丶","can_delete":false,"product_type":"c1","uid":3227167,"ip_address":"浙江","ucode":"92E573829911FD","user_header":"https://static001.geekbang.org/account/avatar/00/31/3e/1f/661ac363.jpg","comment_is_top":false,"comment_ctime":1673579744,"is_pvip":false,"replies":[{"id":133492,"content":"所有课程代码的源码都在课程最后有链接哈","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1673613934,"ip_address":"江苏","comment_id":366321,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"三个脚本的import文件来源是哪里，突然冒出来一堆引用文件很迷呀。向类似import { resolvePackagePath } from &#39;.&#47;util&#39;;这个方法是哪来的具体是干嘛用的，有点看不懂","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599610,"discussion_content":"所有课程代码的源码都在课程最后有链接哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673613934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366245,"user_name":"青丘","can_delete":false,"product_type":"c1","uid":3212594,"ip_address":"广东","ucode":"DF325104EF03E7","user_header":"https://static001.geekbang.org/account/avatar/00/31/05/32/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1673505964,"is_pvip":false,"replies":[{"id":134963,"content":"您好，这个源码案例的Rollup编译脚本，出于避免treeshake遗漏代码的考虑，因为treeshake并不是绝对准确的，如官方文档所述 https:&#47;&#47;www.rollupjs.com&#47;guide&#47;big-list-of-options#treeshake 。\n\n可能你会觉得treeshake设置false会导致冗余代码，这个在本课可以不用担心，因为我源码有把每个组件进行独立编译，每个组件都是可以按需加载，间接也帮助使用者减少代码冗余。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678526927,"ip_address":"浙江","comment_id":366245,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"老师，为什么rollup打包的时候设置了 `treeshake: false`。","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608583,"discussion_content":"您好，这个源码案例的Rollup编译脚本，出于避免treeshake遗漏代码的考虑，因为treeshake并不是绝对准确的，如官方文档所述 https://www.rollupjs.com/guide/big-list-of-options#treeshake 。\n\n可能你会觉得treeshake设置false会导致冗余代码，这个在本课可以不用担心，因为我源码有把每个组件进行独立编译，每个组件都是可以按需加载，间接也帮助使用者减少代码冗余。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678526927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365027,"user_name":"ZH 小小浩","can_delete":false,"product_type":"c1","uid":1792820,"ip_address":"北京","ucode":"E2A86D054361BD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5b/34/113c117e.jpg","comment_is_top":false,"comment_ctime":1671960766,"is_pvip":false,"replies":[{"id":133517,"content":"可以对照着github的完整代码去调试，如果不懂建议在github按行写issue提问，这样好弄清是什么不太清楚，也较好去解答","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1673771199,"ip_address":"浙江","comment_id":365027,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"提个建议：本来就是冲着学习一下怎么自己从零搭建一个组件库买的这个课程，看完这篇发现写的有点太粗略了，相关的设计、配置文件都直接粘代码，也不讲解下这么多配置分别用来干嘛的...就看的挺迷的。嗯嗯嗯...也可能是自己这方面的知识储备不够","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599755,"discussion_content":"可以对照着github的完整代码去调试，如果不懂建议在github按行写issue提问，这样好弄清是什么不太清楚，也较好去解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673771199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3228034,"avatar":"https://static001.geekbang.org/account/avatar/00/31/41/82/18d12e07.jpg","nickname":"🇴","note":"","ucode":"91C2D9B5BC5346","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600629,"discussion_content":"主要对一些基础知识要求比较高，了解下npm 感觉理解起来就容易了些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674647448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364801,"user_name":"Geek_b454df","can_delete":false,"product_type":"c1","uid":1742206,"ip_address":"四川","ucode":"9596984AE4EC06","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/nJHZrATXphhzfqH1OydoOTOZTlj5Qe9fNqauQmsaPrATb5qsibM99lINaTSqicL8qm5vxlibA7jVf7qHcUk7S402A/132","comment_is_top":false,"comment_ctime":1671515114,"is_pvip":false,"replies":[{"id":134988,"content":"您好，第8讲的源码案例最外层 package.json是有内容的，具体代码链接在这里  https:&#47;&#47;github.com&#47;FE-star&#47;vue3-course&#47;blob&#47;main&#47;chapter&#47;08&#47;package.json ","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678623790,"ip_address":"浙江","comment_id":364801,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"最外层的package.json没有东西， pnpm 报错了","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608716,"discussion_content":"您好，第8讲的源码案例最外层 package.json是有内容的，具体代码链接在这里  https://github.com/FE-star/vue3-course/blob/main/chapter/08/package.json ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678623790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364176,"user_name":"withoutmeat","can_delete":false,"product_type":"c1","uid":1272550,"ip_address":"北京","ucode":"1E4599E403AD79","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/e6/7f2c3702.jpg","comment_is_top":false,"comment_ctime":1670594019,"is_pvip":false,"replies":[{"id":135000,"content":"您好！对于第一个问题，Vue.js项目中，样式代码写在Vue文件里，还是写在独立的CSS&#47;Less&#47;Scss&#47;Sass 等样式文件里，这个没有标准答案的，都是根据实际开发场景做选择的。我列举以下几种场景和样式管理方式：\n1. 业务应用项目开发，一般写在Vue文件里比较方便，因为样式跟业务逻辑走，方便维护和管理。\n2. 公共组件开发。如果是考虑统一的样式管理和主题变量（例如Less颜色变量）的复用，建议用独立的样式文件来管理比较方便，同时最后样式代码的编译和发布也比较方便。如果公共组件没有太多的主题样式管理等操作，那么就跟业务项目类似，把样式写在Vue文件里方便管理。\n\n对于第二个问题（跟本课程无关），由于我没研究过tailwindcss，暂时回答不了，不好意思。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678625420,"ip_address":"浙江","comment_id":364176,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"老师, 一般情况下写vue组件, 样式代码都是直接写在了vue文件中, 要怎么满足这个呢？ 另外有个自己的问题，我使用了postcss+tailwindcss， 但是直接使用tailwindcss的api的方式去打包组件这个文档没有找到，有点苦恼～","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608733,"discussion_content":"您好！对于第一个问题，Vue.js项目中，样式代码写在Vue文件里，还是写在独立的CSS/Less/Scss/Sass 等样式文件里，这个没有标准答案的，都是根据实际开发场景做选择的。我列举以下几种场景和样式管理方式：\n1. 业务应用项目开发，一般写在Vue文件里比较方便，因为样式跟业务逻辑走，方便维护和管理。\n2. 公共组件开发。如果是考虑统一的样式管理和主题变量（例如Less颜色变量）的复用，建议用独立的样式文件来管理比较方便，同时最后样式代码的编译和发布也比较方便。如果公共组件没有太多的主题样式管理等操作，那么就跟业务项目类似，把样式写在Vue文件里方便管理。\n\n对于第二个问题（跟本课程无关），由于我没研究过tailwindcss，暂时回答不了，不好意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678625420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364161,"user_name":"杜子","can_delete":false,"product_type":"c1","uid":1045942,"ip_address":"福建","ucode":"DC9FA67EF7B490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b6/294dafbb.jpg","comment_is_top":false,"comment_ctime":1670584360,"is_pvip":false,"replies":[{"id":135002,"content":"您好，如果看文章不理解，可以结合本课源码案例一起学习 https:&#47;&#47;github.com&#47;FE-star&#47;vue3-course&#47;tree&#47;main&#47;chapter&#47;08 ","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678625864,"ip_address":"浙江","comment_id":364161,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"看懵了，要多看几遍才行","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608735,"discussion_content":"您好，如果看文章不理解，可以结合本课源码案例一起学习 https://github.com/FE-star/vue3-course/tree/main/chapter/08 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678625864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364148,"user_name":"初烬","can_delete":false,"product_type":"c1","uid":1507277,"ip_address":"陕西","ucode":"7ED4A301A7CC11","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rUqhSN2OVg5aHw10Hxib61nGv1SXxD6zowFl27oSm9Y6g8grRpTxCxwk7qg14a1TtmpzMTM2y810MnibBhwn75Mg/132","comment_is_top":false,"comment_ctime":1670576132,"is_pvip":false,"replies":[{"id":134999,"content":"您好，感谢支持！","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678625311,"ip_address":"浙江","comment_id":364148,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"学到很多原来不理解的组件库的知识，感谢老师。","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608731,"discussion_content":"您好，感谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678625311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393998,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1725513754,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":3,"product_id":100311101,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":391634,"user_name":"早安！午安！晚安！","can_delete":false,"product_type":"c1","uid":3886649,"ip_address":"上海","ucode":"874AC97131E304","user_header":"https://static001.geekbang.org/account/avatar/00/3b/4e/39/1dda96a7.jpg","comment_is_top":false,"comment_ctime":1718697099,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"github上拉取的代码执行pnpm i会一直提示@my不是公共库 在 pnpm-workspace.yaml 这个文件里，进行 monorepo 的项目配置这里这样写无作用诶","like_count":0},{"had_liked":false,"id":387287,"user_name":"行云流水","can_delete":false,"product_type":"c1","uid":1374414,"ip_address":"广东","ucode":"3CCE8B9902005A","user_header":"https://static001.geekbang.org/account/avatar/00/14/f8/ce/495dfc91.jpg","comment_is_top":false,"comment_ctime":1706857229,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"build.dts.ts 打包生成 ts类型文件这个，使用的包比较偏僻，貌似也可以通过 rollup或vite打包vue3组件库生成ts代码？ 为啥选择这个？ ","like_count":0},{"had_liked":false,"id":385126,"user_name":"Spike Jim.Fun","can_delete":false,"product_type":"c1","uid":1300707,"ip_address":"中国香港","ucode":"C956A19146E1DA","user_header":"https://static001.geekbang.org/account/avatar/00/13/d8/e3/987c9195.jpg","comment_is_top":false,"comment_ctime":1702122943,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"&quot;build:components&quot;: &quot;vite-node .&#47;scripts&#47;build-module.ts&quot;   容易卡死， 怎么排查错误","like_count":0},{"had_liked":false,"id":381888,"user_name":"白马","can_delete":false,"product_type":"c1","uid":1103540,"ip_address":"辽宁","ucode":"FD4DA715AC5984","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/b4/0808999d.jpg","comment_is_top":false,"comment_ctime":1696113760,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"老师你好，关于自研组件这部分内容，如果用vue2的话，是不是方法也是类似的？","like_count":0},{"had_liked":false,"id":368667,"user_name":"沉默的话唠","can_delete":false,"product_type":"c1","uid":1231254,"ip_address":"广西","ucode":"90212EF174C6E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/96/4577c1ef.jpg","comment_is_top":false,"comment_ctime":1676539007,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100311101,"comment_content":"soory~ 打错目录名...","like_count":0},{"had_liked":false,"id":364559,"user_name":"WGH丶","can_delete":false,"product_type":"c1","uid":1922568,"ip_address":"陕西","ucode":"02E43256770C62","user_header":"https://static001.geekbang.org/account/avatar/00/1d/56/08/bd75f114.jpg","comment_is_top":false,"comment_ctime":1671116824,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100311101,"comment_content":"给极客时间提个建议：（网页版）把代码块中的滚动条干掉，要不然鼠标在代码块上滚动阅读时，很难受。","like_count":0},{"had_liked":false,"id":364099,"user_name":"Johnson","can_delete":false,"product_type":"c1","uid":1326108,"ip_address":"福建","ucode":"C6B6FF9EA4CC60","user_header":"https://static001.geekbang.org/account/avatar/00/14/3c/1c/47e5b7aa.jpg","comment_is_top":false,"comment_ctime":1670545201,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100311101,"comment_content":"很实用😀","like_count":0}]}