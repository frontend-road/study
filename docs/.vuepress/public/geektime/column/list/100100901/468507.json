{"id":468507,"title":"03｜双端队列：并行计算中的工作窃取算法如何实现？","content":"<p>你好，我是微扰君。</p><p>目前我们已经学习了 vector 动态数组和 list 双向链表两种STL中的序列式容器了，今天我们继续学习另一种常见的序列式数据结构，双端队列。</p><p>在并行计算中，我们常常会用多进程处理一些复杂的计算任务。为了能够通过多进程加速计算，我们除了需要对任务进行合理的切分，也需要将任务合理公平地分配到每一个进程。简单来说就是，我们希望每个进程都不至于闲着。那怎么样能做到这件事呢？</p><p>其实有一种非常常用的算法，工作窃取算法，就可以用来达成这个目标，它就需要用到我们今天的主角——双端队列。</p><h2>队列</h2><p>要介绍双端队列，我们先来聊一聊队列，queue。什么是队列呢？</p><p>从概念上来说其实非常好理解，因为它的特性和“队列”这个词在现实生活中的意思是一致的，那就是FIFO先进先出。简单来说就是排队。</p><p>比如说现在到很多餐厅就餐，服务员都会给你发一个号码让你排队，等有空位的时候，服务员叫号是按照取号的顺序来的，肯定是先来取号的人结束排队去入座；这样的约束就是先进先出。</p><p>显然这种<strong>先进先出的队列也是一种典型的序列式数据结构</strong>；和数组最大的区别就在于，它是一个有约束的序列式数据结构，因为先进先出的特性要求我们，所有的插入操作必须在队列的尾部进行，而所有的删除操作则必须在队列的头部进行。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/03/75/031f3908df1315910fab5543a50e9575.jpg?wh=1920x736\" alt=\"图片\"></p><p>上图就是一个对队列入队、出队操作的示例。我们注意到先入队的元素一定会比后入队的元素更早出队。这一特性和思想在许多业务系统或者基础软件、操作系统、计算机网络中都有应用，比如在操作系统中的CPU调度中，进程资源使用CPU的顺序就用队列来排序。</p><h2>双端队列</h2><p>队列和链表一样也会延展出更多种类的队列，比如带权重的优先队列、或者只能一边进一边出的单端队列。</p><p>我们今天要实现的double ended queue，双端队列是其中一种，相比于普通队列而言，双端队列是两端开口的，在队列的头尾两端都可以进行进队和出队操作，让我们在使用队列时有了更大的灵活性。</p><p>你肯定想问，数组也可以在两边插入数据呀，那双端队列和数组有什么区别呢？</p><p>首先，数组头部的插入操作复杂度很高，如果我们并不需要快速随机访问，这种操作的复杂度是完全可以避免的，这是双端队列和数组的一个很大区别。更本质的地方在于，<strong>双端队列仅仅是一个两端都支持FIFO插入删除操作的队列，语义上来说并不支持数组基于下标在指定位置的修改、插入和删除的操作</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/76/7a241d6d4783165e7b7d359087b61976.jpg?wh=1920x1223\" alt=\"图片\"></p><p>当然，我们是可以用数组或者链表来模拟实现双端循环队列的，只要暴露出经过剪裁的且满足FIFO的语义方法就可以了。</p><p>比如可以开一个大小为N的数组array，用两个数字 rear 和 front 代表队列的前端和尾端。在前端插入 target，只需要 <code>array[(--front+N)%N] = target</code>，这样既扩展了前端的边界，也达到了插入target的效果。%N也就是要对N取模，主要也就是为了处理越界的问题，这样当数组的前端read到达小于0的位置时，就会马上变成N-1，也就实现了一个循环队列。</p><h2>Deque实现</h2><p>虽然说，可以用数组或者链表来实现队列，但<strong>C++并没有选择依赖已有的序列式容器vector或者list来实现</strong>，原因是什么呢？你可以先想一想。</p><p>带着这个问题，我们一起来学习后面的内容，看看STL中的deque是如何实现一个高效好用的双端队列的。</p><p>我个人认为，在 STL 序列化容器的空间分配中，deque 可能是最复杂的，这也可能会对你阅读源码造成一定的障碍，但是不要害怕，如果只是为了搞清deque设计的大致思想，我们完全可以将内存分配的部分当成黑盒来看，这对搞清楚deque的原理并没有什么影响。</p><h3>Deque的内存布局</h3><p>deque的内存布局，可以说同时具备了list和vector的特点。</p><p>deque的内存布局<strong>是由一段段连续的空间、用另一个类似数组的东西将这些空间的地址信息拼接在一起组成的，真实存放数据的就是那一段段连续的空间。</strong>在首尾两端插入和删除的时间复杂度是O(1)。以插入为例，每次一段连续的空间元素被用完的时候，会直接申请一段新的空间并链接到deque的分段空间末尾。</p><p>所以deque既不像 vector 那样每次扩容都需要付出复制和拷贝的高昂代价，也不会像链表那样每次插入一个新的节点都需要申请一次内存。</p><p>当然这也导致了非常复杂的控制流程，deque的代码量也远远多于vector和list。</p><p>为了维护一段段连续的内存空间，deque需要维护一个被称为map的成员变量；这个map数据结构起到了管理真正用于存储队列元素的一段段连续线性空间的作用。那一段段连续的线性空间，我们称为缓冲区。</p><p>map的示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/7a/c8ac7fb00e8eae4637ab764aea0dc47a.jpg?wh=1920x1223\" alt=\"图片\"></p><p>可以认为map是一个数组，每个元素指向了一段缓冲区的地址。而缓冲区对应了一段指定大小的连续内存空间，默认大小为 512 bytes。</p><pre><code class=\"language-c++\">template &lt;class _Tp, class _Alloc&gt;\nclass _Deque_base {\n  ...\nprotected:\n  _Tp** _M_map;\n  size_t _M_map_size;  \n  iterator _M_start;\n  iterator _M_finish;\n  ...\n}\n</code></pre><p>因此 _M_map 在数据结构中的表现就是一个二级指针。_M_map_size指的就是 deque 中 map 的空间大小，即在map中最多能存储多少个指针。如果map的空间已经被用满了，我们也会对map进行一次重新分配迁移的操作，核心思想和vector的重分配其实是一样的，我们马上具体讲。</p><h3>Deque的迭代器</h3><p>介绍完内存布局和基本数据结构，下一个重点就是STL的通用访问模式，迭代器的实现了。</p><p>正是因为 <strong>deque 底层实质是分段连续空间</strong>，operator++ 和 operator<code>--</code> 的实现也变得更困难一些，迭代器既要能找到与当前缓冲区相邻的缓冲区在哪；也需要知道目前访问的地方是否已经到当前缓冲区的边缘，只有这样到边缘时，才能正确跳转。</p><p>为了方便达到这一目标，我们需要在迭代器的数据结构中记录一下迭代器在当前缓冲区的位置，同时记录当前缓冲区的开始位置和结束位置，以及缓冲区的map指针：</p><pre><code class=\"language-c++\">template &lt;class _Tp, class _Ref, class _Ptr&gt;\nstruct _Deque_iterator {\n  typedef _Deque_iterator&lt;_Tp, _Tp&amp;, _Tp*&gt;             iterator;\n  typedef _Deque_iterator&lt;_Tp, const _Tp&amp;, const _Tp*&gt; const_iterator;\n  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }\n  ...\n  typedef _Tp** _Map_pointer; // 缓冲区指针\n  ... \n  _Tp* _M_cur; // 当前缓冲区的位置\n  _Tp* _M_first; // 缓冲区的左边界线\n  _Tp* _M_last; // 缓冲区的右边界\n  _Map_pointer _M_node;\n  _Deque_iterator(_Tp* __x, _Map_pointer __y) \n    : _M_cur(__x), _M_first(*__y),\n      _M_last(*__y + _S_buffer_size()), _M_node(__y) {}\n}\n</code></pre><p>有了位置的记录，operator++ 可以这样实现：</p><pre><code class=\"language-c++\">_Self&amp; operator++() {\n    ++_M_cur;\n    if (_M_cur == _M_last) {\n      _M_set_node(_M_node + 1);\n      _M_cur = _M_first;\n    }\n    return *this; \n  }  \n  void _M_set_node(_Map_pointer __new_node) {\n    _M_node = __new_node;\n    _M_first = *__new_node;\n    _M_last = _M_first + difference_type(_S_buffer_size());\n  }\n</code></pre><p>核心的就是_M_set_node方法，如果我们发现M_cur已经达到了当前缓冲区的尾部，就将它移动到下一段缓冲区的头部，更新迭代器中当前map的位置。另外，也需要将_M_first和_M_last更新为新的缓冲区的左确界和右虚界。</p><p><code>--</code> 的操作类似：</p><pre><code class=\"language-c++\">_Self&amp; operator--() {\n    if (_M_cur == _M_first) {\n      _M_set_node(_M_node - 1);\n      _M_cur = _M_last;\n    }\n    --_M_cur;\n    return *this;\n  }\n</code></pre><p>我们发现M_cur达到缓冲区头部的时候，就要将它移动到当前缓冲区的前一段缓冲区了，调用set_node方法即可。</p><p>到这里就完成了迭代器的主要接口，这让我们将内存实质不连续的真相隐藏了起来，取而代之地提供了一个非常简洁好用的遍历deque的接口。</p><p>好啦，学完deque 的内存布局和迭代器如何实现，你知道它的基础操作该怎么写了吗？</p><h2>Deque的基础操作</h2><p>相比于vector和list来说，deque支持的操作要少得多，只有基本的push和pop实现，因为队列语义保证了我们不会在队列中间进行插入删除操作，也就不用支持insert和erase这样的操作了。</p><p>不过正因为内存布局复杂，deque的内存管理扩缩容的逻辑也比较复杂，我们了解大概思想就可以了。如果你感兴趣可以自行查阅deque源码。</p><h3>push操作</h3><p>Deque的第一个操作当然是push_front和push_back，因为我们实现的是双端队列，所以头部尾部都有可能插入数据。</p><p>遇到内存不足的时候，deque会按照下图的逻辑进行扩容，有几个检查点，首先判断是不是能在当前缓冲区插入元素，如果可以，直接插入就行；如果不能，就要检查缓冲区map两端是否有足够的空间；如果有的话，也很简单，直接创建一个新的缓冲区并存入map。</p><p><img src=\"https://static001.geekbang.org/resource/image/df/10/dfb62956a3766be073e91e56a6348b10.jpg?wh=2769x1394\" alt=\"\"></p><p>关键是在map空间不足的时候，也就是插入的数据已经达到map头部或者尾部缓冲区的边界时，我们可以分两种情况讨论：</p><ol>\n<li><strong>如果 map使用率已经超过一半</strong>，我们就可以重新申请更大的空间，把老的map上的数据拷贝到新的区域。这里注意，map中指向的那些缓冲区里的数据并不用变化，只是需要一个更大的map去放那些缓冲区的指针，和动态数组扩容的方式如出一辙。</li>\n<li><strong>map使用率没有超过一半</strong>，这时候我们认为申请新的空间可能是浪费的，所以只是将数据重新调整到map中间的位置，当然也要进行一次拷贝。这可能会帮我们节约大量的空间。</li>\n</ol><p>翻译成代码如下：</p><pre><code class=\"language-c++\">void push_back(const value_type&amp; __t) {\n    if (_M_finish._M_cur != _M_finish._M_last - 1) {\n      construct(_M_finish._M_cur, __t);\n      ++_M_finish._M_cur;\n    }\n    else\n      _M_push_back_aux(__t);\n  }\ntemplate &lt;class _Tp, class _Alloc&gt;\nvoid deque&lt;_Tp,_Alloc&gt;::_M_push_back_aux()\n{\n  _M_reserve_map_at_back();\n  *(_M_finish._M_node + 1) = _M_allocate_node();\n  __STL_TRY {\n    construct(_M_finish._M_cur);\n    _M_finish._M_set_node(_M_finish._M_node + 1);\n    _M_finish._M_cur = _M_finish._M_first;\n  }\n  __STL_UNWIND(_M_deallocate_node(*(_M_finish._M_node + 1)));\n}\n</code></pre><h3>pop操作</h3><p>pop操作不再需要处理插入导致的扩容拷贝问题, 相对来说就显得简单很多。以pop_back为例，我们只需要关注是否已经pop到某一段缓冲区的边界。</p><pre><code class=\"language-c++\">void pop_back() {\n    if (_M_finish._M_cur != _M_finish._M_first) {\n      --_M_finish._M_cur;\n      destroy(_M_finish._M_cur);\n    }\n    else\n      _M_pop_back_aux();\n  }\n// Called only if _M_finish._M_cur == _M_finish._M_first.\ntemplate &lt;class _Tp, class _Alloc&gt;\nvoid deque&lt;_Tp,_Alloc&gt;::_M_pop_back_aux()\n{\n  _M_deallocate_node(_M_finish._M_first);\n  _M_finish._M_set_node(_M_finish._M_node - 1);\n  _M_finish._M_cur = _M_finish._M_last - 1;\n  destroy(_M_finish._M_cur);\n}\n</code></pre><p>如果发现当前迭代器已经和缓冲区的首位置相同，除了释放掉当前的内存，还需要释放掉整段缓冲区的内存，并且将迭代器的缓冲区指针，指向当前缓冲区前一段的位置，这可以通过_M_set_node方法达成。当然，由于我们还需要pop一个节点，所以会将_M_cur指向_M_finish._M_last-1的位置。</p><h3>C++的选择</h3><p>现在掌握了deque的实现和基本操作，我们来回答一下为什么C++不选择依赖已有的序列式容器来实现deque？</p><p>其实我们已有的容器就两个，一个是vector，另外一种就是list。</p><p>显然，基于vector实现，不能真的在头部插入元素，会产生O(N)的时间开销，我们只能用一个固定大小的vector来模拟循环队列，具体实现方式前面说过。但这样就导致我们<strong>必须事先确定数组的最大容量，让它的大小是实现分配好的，这就和数组一样，也会产生内存浪费和无法动态扩容的问题</strong>。</p><p>不过在最大容量能确定的场景下，用vector也是一种非常常见的循环队列实现方式。</p><p>而基于list，看起来首尾都可以O(1)的时间插入，但对数据的随机读取性能会很差；且每次插入元素都需要申请内存，相比于deque一次申请一段内存的方式也会带来额外的性能开销。而<strong>list的最大优势，任意位置的快速插入/删除能力，我们却用不上</strong>。</p><p>所以基于deque的使用场景，C++设计了基于map分段存储的双端队列的数据结构，能同时具备list和vector的特点。</p><h2>总结</h2><p>队列的基本特性是FIFO，也就是先进先出，它能衍生出几种不同的形式，包括循环队列、双端队列，既可以通过数组实现，也可以通过链表实现。</p><p>STL的deque是一种双端队列的实现，内存布局是由一段段连续内存串联起来的，在队列两端都可以pop和push数据。因为复杂的内存分配，代码实现的难度要高很多。但更多的复杂性还是体现在内存管理中，只要我们通过迭代器等模式，将底层的逻辑封装起来，相信你也看到了，pop和push操作的思路其实是非常清晰好懂的。</p><p>现在你知道为什么说工作窃取算法需要用到双端队列了吗？</p><p>我们一起看看。为了更公平也更高效地分配每个进程负责的任务，我们可能会多开很多个队列去存储任务，每个进程就去消费一个队列中的任务，这样就可以有效避免进程间的竞争。因为任务先进先出，用一个普通的单向队列就可以完成了。</p><p>但是你可能很难保证任务划分得非常均匀，使得每个进程完成所有任务的时间都差不多。这不是一个很好解决的问题。但是如果我们<strong>换一个思路，不再费心让任务分配得均匀，只是简单地允许先完成任务的进程，去其他进程的队列盗取任务，是不是就不会有进程闲置了呢</strong>？</p><p>不过怎么盗取，可以让我们仍然尽量规避进程间的竞争问题呢？ 相信你已经想到答案了，没错，就是双端队列。我们让盗取任务的进程，从队列的另一端盗取就行了，这样只有队列长度为1的时候才会出现竞争。当然还有很多实现细节，你感兴趣的话可以去看一下Java中ForkJoinPool的实现。</p><h2>课后作业</h2><p>最后，同样给你留一个课后作业。我们讲解了如何用数组实现队列，也提到队列同样可以通过链表来实现？你可以试着实现一下吗？</p><p>欢迎你留言与我讨论交流～</p>","neighbors":{"left":{"article_title":"02｜双向链表：list如何实现高效地插入与删除？","id":467464},"right":{"article_title":"04｜栈：函数调用的秘密究竟是什么？","id":469504}},"comments":[{"had_liked":false,"id":327520,"user_name":"SevenHe","can_delete":false,"product_type":"c1","uid":1245161,"ip_address":"","ucode":"7C69539BE3E42F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/e9/276b9753.jpg","comment_is_top":false,"comment_ctime":1640160088,"is_pvip":false,"replies":[{"id":"119546","content":"这个问题非常好！看得出来你是有思考的同学～ <br>我个人的理解，也不一定正确，可能主要是因为 stl::deque 支持了 at 方法；用数组就可以比较快速的取到特定的元素； 这点我在专栏里可能没有说明，之后会调整一下。<br>至于为什么deque要支持at方法，我还不是特别清楚。<br>","user_name":"作者回复","comment_id":327520,"uid":"1107505","ip_address":"","utype":1,"ctime":1640667872,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"35999898456","product_id":100100901,"comment_content":"map如果只是用于维护block的索引，本身更新的频率比较低，似乎list比vector更适合，为何不直接使用链表呢？这样不需要考虑扩容和缩容的问题了","like_count":8,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542108,"discussion_content":"这个问题非常好！看得出来你是有思考的同学～ \n我个人的理解，也不一定正确，可能主要是因为 stl::deque 支持了 at 方法；用数组就可以比较快速的取到特定的元素； 这点我在专栏里可能没有说明，之后会调整一下。\n至于为什么deque要支持at方法，我还不是特别清楚。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640667872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326626,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1639610931,"is_pvip":false,"replies":[{"id":"119161","content":"嗯嗯 说的很对","user_name":"作者回复","comment_id":326626,"uid":"1107505","ip_address":"","utype":1,"ctime":1640141929,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"23114447411","product_id":100100901,"comment_content":"Deque的实现分了两层，第一层是不定长的循环对列管理数据块指针，第二层是定长的数据块，管理实际元素的存取。 和链表相比，这种实现因为有了定长的数据块，可以减少添加和删除内存的数目，也省去了每个节点的指针。有了第一层不定长的循环队列，对于插入和删除元素都能做到O(1)的均摊复杂度，这里使用的指针数目是使用双向链表1&#47;2m，（m是块的大小）","like_count":5,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540711,"discussion_content":"嗯嗯 说的很对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640141929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360219,"user_name":"徐晓桐","can_delete":false,"product_type":"c1","uid":1345531,"ip_address":"上海","ucode":"CB31A8E493557F","user_header":"https://static001.geekbang.org/account/avatar/00/14/87/fb/bdd3b1f4.jpg","comment_is_top":false,"comment_ctime":1666314401,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666314401","product_id":100100901,"comment_content":"你好 老师 我不太明白 STL 为啥不直接用双链表实现双端队列 ?","like_count":0},{"had_liked":false,"id":339698,"user_name":"Geek_ef214b","can_delete":false,"product_type":"c1","uid":2227380,"ip_address":"","ucode":"11CFD53C2C36DC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/V71wNP3XFiaNS7lVfluMkBibdCclcWDdjrviahoPLJASFbYlI5BkEaP0E5t8e4QMvKtIiaumq6cs5hlgS1D8bib1hyA/132","comment_is_top":false,"comment_ctime":1648299339,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648299339","product_id":100100901,"comment_content":"老师你好，我想请问多线程环境下双端队列和FIFO队列在工作窃取算法中有什么区别？线程对队列进行Push或Pop不都要上锁吗？对效率的提升有什么帮助？","like_count":0},{"had_liked":false,"id":327991,"user_name":"丶","can_delete":false,"product_type":"c1","uid":2455772,"ip_address":"","ucode":"F045BF2D3F408A","user_header":"https://static001.geekbang.org/account/avatar/00/25/78/dc/bcdb3287.jpg","comment_is_top":false,"comment_ctime":1640436284,"is_pvip":false,"replies":[{"id":"119543","content":"很认真呀；感觉问题不是很大；晚些我仔细看一下。<br>可以加我vx：constant_variation 一起讨论","user_name":"作者回复","comment_id":327991,"uid":"1107505","ip_address":"","utype":1,"ctime":1640667512,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1640436284","product_id":100100901,"comment_content":"双端队列的两种实现：链表和数组 https:&#47;&#47;github.com&#47;hzq-qqq&#47;-1。能力有限，有错误的地方，希望指正","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542103,"discussion_content":"很认真呀；感觉问题不是很大；晚些我仔细看一下。\n可以加我vx：constant_variation 一起讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640667513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326701,"user_name":"灵茶山艾府🎈","can_delete":false,"product_type":"c1","uid":2865728,"ip_address":"","ucode":"D4FE4688964E4D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ba/40/dad0e5bf.jpg","comment_is_top":false,"comment_ctime":1639636128,"is_pvip":false,"replies":[{"id":"119166","content":"哈哈哈 能稍微展开讲解一下吗 我还不是很确定具体的做法","user_name":"作者回复","comment_id":326701,"uid":"1107505","ip_address":"","utype":1,"ctime":1640142259,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"1639636128","product_id":100100901,"comment_content":"有一种双端队列的实现方法是用两个 queue，头对头，这样也可以做到类似 deque 的效果。但是为什么 STL 不采用这种实现方式呢，疑惑。","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540720,"discussion_content":"哈哈哈 能稍微展开讲解一下吗 我还不是很确定具体的做法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640142259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2865728,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ba/40/dad0e5bf.jpg","nickname":"灵茶山艾府🎈","note":"","ucode":"D4FE4688964E4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":540752,"discussion_content":"我用 Go 实现了一个简单的 Deque 可以看一下 https://github.com/EndlessCheng/codeforces-go/blob/master/copypasta/deque.go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640150629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540720,"ip_address":""},"score":540752,"extra":""}]},{"author":{"id":1618709,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b3/15/30822e33.jpg","nickname":"小麦","note":"","ucode":"2C800B598A2CDE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576376,"discussion_content":"大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655481569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326659,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1639621654,"is_pvip":false,"replies":[{"id":"119162","content":"增加一个block没法保证数据是连续存储的哈 和vector扩容的时候不原地扩容是一个道理","user_name":"作者回复","comment_id":326659,"uid":"1107505","ip_address":"","utype":1,"ctime":1640141988,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639621654","product_id":100100901,"comment_content":"请问老师，如果 map 使用率已经超过一半，我们就可以重新申请更大的空间，把老的 map 上的数据拷贝到新的区域。 请问什么这么做呢？ 如果不重新申请大的内存，而是增加一个block，如此岂不是节省了拷贝的开销？","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540713,"discussion_content":"增加一个block没法保证数据是连续存储的哈 和vector扩容的时候不原地扩容是一个道理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640141988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326658,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1639621427,"is_pvip":false,"replies":[{"id":"119163","content":"嗯嗯 GMP好像确实用了工作窃取算法 具体的细节我也不是很确定了；欢迎补充<br>可以+V: constant_variation 和我交流","user_name":"作者回复","comment_id":326658,"uid":"1107505","ip_address":"","utype":1,"ctime":1640142034,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1639621427","product_id":100100901,"comment_content":"还有一点 这个玩意我感觉和go的gmp 一样一样的","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540715,"discussion_content":"嗯嗯 GMP好像确实用了工作窃取算法 具体的细节我也不是很确定了；欢迎补充\n可以+V: constant_variation 和我交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640142034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447887,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIofiaCAziajdQnbvrfpEkpCKVFgO62y6zicamhjF1BAWZSRcCVaTBXLIerLsGeZCic7XS7KOEkTN4fRg/132","nickname":"zahi","note":"","ucode":"F64ABEB63C6D1F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542227,"discussion_content":"我的理解这里的双端队列和gmp的任务窃取还是有一些区别的， gmp协程队列是单端队列，在窃取时只是一次性获取目标队列后半部分的协程， 同时被窃取部分的协程依然保持入队顺序来执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640686064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326657,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1639621396,"is_pvip":false,"replies":[{"id":"119164","content":"说的非常正确；欢迎用golang实现；可以另外提一份PR到我的仓库 https:&#47;&#47;github.com&#47;wfnuser&#47;Algorithms 哦","user_name":"作者回复","comment_id":326657,"uid":"1107505","ip_address":"","utype":1,"ctime":1640142083,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1639621396","product_id":100100901,"comment_content":"简单的总结:<br>看了下老师的文字描述，感觉这个deque在我的理解上就是 map是一个不定长数组了 然后里面的每个元素就是一段连续的空间(也是节点数组) 这样就可以拼接起来实现双端队列。<br>然后对于扩容操作 如果发现某一个端点在map层用完了 那么判断是否超过总容量的百分之五十 如果没有超过证明某一段比较数据集中，另外一点数据较少可以移动到中间来 无需扩容，反之扩容 在map层 <br>其他的主要就是维护其他指针了 保证push pop对应的位置 主要是看不明白cpp代码 准备去用go实现一下 <br>以上是小总结如果有错误希望大家指正","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540717,"discussion_content":"说的非常正确；欢迎用golang实现；可以另外提一份PR到我的仓库 https://github.com/wfnuser/Algorithms 哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640142083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":540731,"discussion_content":"好的😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640144793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540717,"ip_address":""},"score":540731,"extra":""}]}]}]}