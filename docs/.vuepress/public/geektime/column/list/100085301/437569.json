{"id":437569,"title":"32｜实操项目：使用PyO3开发Python3模块","content":"<p>你好，我是陈天。</p><p>上一讲介绍了 FFI 的基本用法，今天我们就趁热打铁来做个实操项目，体验一下如何把 Rust 生态中优秀的库介绍到 Python/Node.js 的社区。</p><p>由于社区里已经有 PyO3 和 Neon 这样的工具，我们并不需要处理 Rust 代码兼容 C ABI 的细节，这些工具就可以直接处理。所以，今天会主要撰写 FFI shim 这一层的代码：<br>\n<img src=\"https://static001.geekbang.org/resource/image/b2/90/b2578cf89cd55d59f74e48cf6d5bbb90.jpg?wh=2364x1513\" alt=\"\"></p><p>另外，PyO3和Neon的基本操作都是一样的，你会用一个，另一个的使用也就很容易理解了。这一讲我们就以 PyO3 为例。</p><p>那么，做个什么库提供给 Python 呢？</p><p>思来想去，我觉得 <strong>Python 社区里可以内嵌在程序中的搜索引擎</strong>，目前还是一块短板。我所知道的 <a href=\"https://github.com/mchaput/whoosh\">whoosh</a> 已经好多年没有更新了，<a href=\"https://lucene.apache.org/pylucene/\">pylucene</a> 需要在 Python 里运行个 JVM，总是让人有种说不出的不舒服。虽然 Node.js 的 <a href=\"https://github.com/nextapps-de/flexsearch\">flexsearch</a> 看上去还不错（我没有用过），但整体来说，这两个社区都需要有更强大的搜索引擎。</p><p>Rust 下，嵌入式的搜索引擎有 <a href=\"https://github.com/quickwit-inc/tantivy\">tantivy</a>，我们就使用它来提供搜索引擎的功能。</p><p>不过，tanvity 的接口比较复杂，今天的主题也不是学习如何使用一个搜索引擎的接口，所以我做了基于 tanvity 的 crate <a href=\"https://github.com/tyrchen/xunmi\">xunmi</a>，提供一套非常简单的接口，<strong>今天，我们的目标就是：为这些接口提供对应的 Python 接口，并且让使用起来的感觉和 Python 一致</strong>。</p><!-- [[[read_end]]] --><p>下面是 xunmi 用 Rust 调用的例子：</p><pre><code class=\"language-rust\">use std::{str::FromStr, thread, time::Duration};\nuse xunmi::*;\n\nfn main() {\n    // 可以通过 yaml 格式的配置文件加载定义好的 schema\n    let config = IndexConfig::from_str(include_str!(\"../fixtures/config.yml\")).unwrap();\n\n    // 打开或者创建 index\n    let indexer = Indexer::open_or_create(config).unwrap();\n\n    // 要 index 的数据，可以是 xml / yaml / json\n    let content = include_str!(\"../fixtures/wiki_00.xml\");\n\n    // 我们使用的 wikipedia dump 是 xml 格式的，所以 InputType::Xml\n    // 这里，wikipedia 的数据结构 id 是字符串，但 index 的 schema 里是 u64\n    // wikipedia 里没有 content 字段，节点的内容（$value）相当于 content\n    // 所以我们需要对数据定义一些格式转换\n    let config = InputConfig::new(\n        InputType::Xml,\n        vec![(\"$value\".into(), \"content\".into())],\n        vec![(\"id\".into(), (ValueType::String, ValueType::Number))],\n    );\n\n    // 获得 index 的 updater，用于更新 index\n    let mut updater = indexer.get_updater();\n    // 你可以使用多个 updater 在不同上下文更新同一个 index\n    let mut updater1 = indexer.get_updater();\n\n    // 可以通过 add / update 来更新 index，add 直接添加，update 会删除已有的 doc\n    // 然后添加新的\n    updater.update(content, &amp;config).unwrap();\n    // 你可以添加多组数据，最后统一 commit\n    updater.commit().unwrap();\n\n    // 在其他上下文下更新 index\n    thread::spawn(move || {\n        let config = InputConfig::new(InputType::Yaml, vec![], vec![]);\n        let text = include_str!(\"../fixtures/test.yml\");\n\n        updater1.update(text, &amp;config).unwrap();\n        updater1.commit().unwrap();\n    });\n\n    // indexer 默认会自动在每次 commit 后重新加载，但这会有上百毫秒的延迟\n    // 在这个例子里我们会等一段时间再查询\n    while indexer.num_docs() == 0 {\n        thread::sleep(Duration::from_millis(100));\n    }\n\n    println!(\"total: {}\", indexer.num_docs());\n\n    // 你可以提供查询来获取搜索结果\n    let result = indexer.search(\"历史\", &amp;[\"title\", \"content\"], 5, 0).unwrap();\n    for (score, doc) in result.iter() {\n        // 因为 schema 里 content 只索引不存储，所以输出里没有 content\n        println!(\"score: {}, doc: {:?}\", score, doc);\n    }\n}\n</code></pre><p>以下是索引的配置文件的样子：</p><pre><code class=\"language-yaml\">---\npath: /tmp/searcher_index # 索引路径\nschema: # 索引的 schema，对于文本，使用 CANG_JIE 做中文分词\n  - name: id\n    type: u64\n    options:\n      indexed: true\n      fast: single\n      stored: true\n  - name: url\n    type: text\n    options:\n      indexing: ~\n      stored: true\n  - name: title\n    type: text\n    options:\n      indexing:\n        record: position\n        tokenizer: CANG_JIE\n      stored: true\n  - name: content\n    type: text\n    options:\n      indexing:\n        record: position\n        tokenizer: CANG_JIE\n      stored: false # 对于 content，我们只索引，不存储\ntext_lang:\n  chinese: true # 如果是 true，自动做繁体到简体的转换\nwriter_memory: 100000000\n</code></pre><p>目标是，使用 PyO3 让 Rust 代码可以这样在 Python 中使用：<br>\n<img src=\"https://static001.geekbang.org/resource/image/45/99/4570669c79dd9503be6920f994bb2799.png?wh=1920x923\" alt=\"\"></p><p>好，废话不多说，我们开始今天的项目挑战。</p><p>首先 <code>cargo new xunmi-py --lib</code> 创建一个新的项目，在 Cargo.toml 中添入：</p><pre><code class=\"language-bash\">[package]\nname = \"xunmi-py\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\nname = \"xunmi\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\npyo3 = {version = \"0.14\", features = [\"extension-module\"]}\nserde_json = \"1\"\nxunmi = \"0.2\"\n\n[build-dependencies]\npyo3-build-config = \"0.14\"\n</code></pre><p>要定义好 lib 的名字和类型。lib 的名字，我们就定义成 xunmi，这样在 Python 中 import 时就用这个名称；crate-type 是 cdylib，我们需要 pyo3-build-config 这个 crate 来做编译时的一些简单处理（<a href=\"https://docs.rs/pyo3-build-config/0.14.5/pyo3_build_config/fn.add_extension_module_link_args.html\">macOS 需要</a>）。</p><h2>准备工作</h2><p>接下来在写代码之前，还要做一些准备工作，主要是 build 脚本和 Makefile，让我们能方便地生成 Python 库。</p><p>创建 build.rs，并添入：</p><pre><code class=\"language-rust\">fn main() {\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    pyo3_build_config::add_extension_module_link_args();\n}\n</code></pre><p>它会在编译的时候添加一些编译选项。如果你不想用 build.rs 来额外处理，也可以创建 .cargo/config，然后添加：</p><pre><code class=\"language-rust\">[target.x86_64-apple-darwin]\nrustflags = [\n  \"-C\", \"link-arg=-undefined\",\n  \"-C\", \"link-arg=dynamic_lookup\",\n]\n</code></pre><p>二者的作用是等价的。</p><p>然后我们创建一个目录 xunmi，再创建 xunmi/_<em>init</em>_.py，添入：</p><pre><code class=\"language-python\">from .xunmi import *\n</code></pre><p>最后创建一个 Makefile，添入：</p><pre><code class=\"language-makefile\"># 如果你的 BUILD_DIR 不同，可以 make BUILD_DIR=&lt;your-dir&gt;\nBUILD_DIR := target/release\n\nSRCS := $(wildcard src/*.rs) Cargo.toml\nNAME = xunmi\nTARGET = lib$(NAME)\nBUILD_FILE = $(BUILD_DIR)/$(TARGET).dylib\nBUILD_FILE1 = $(BUILD_DIR)/$(TARGET).so\nTARGET_FILE = $(NAME)/$(NAME).so\n\nall: $(TARGET_FILE)\n\ntest: $(TARGET_FILE)\n\tpython3 -m pytest\n\n$(TARGET_FILE): $(BUILD_FILE1)\n\t@cp $(BUILD_FILE1) $(TARGET_FILE)\n\n$(BUILD_FILE1): $(SRCS)\n\t@cargo build --release\n\t@mv $(BUILD_FILE) $(BUILD_FILE1)|| true\n\nPHONY: test all\n</code></pre><p>这个 Makefile 可以帮我们自动化一些工作，基本上，就是把编译出来的 .dylib 或者 .so 拷贝到 xunmi 目录下，被 python 使用。</p><h2>撰写代码</h2><p>接下来就是如何撰写 FFI shim 代码了。PyO3 为我们提供了一系列宏，可以很方便地把 Rust 的数据结构、函数、数据结构的方法，以及错误类型，映射成 Python 的类、函数、类的方法，以及异常。我们来一个个看。</p><h3>将 Rust struct 注册为 Python class</h3><p>之前在<a href=\"https://time.geekbang.org/column/article/414478\">第 6 讲</a>，我们简单介绍了函数是如何被引入到 pymodule 中的：</p><pre><code class=\"language-rust\">use pyo3::{exceptions, prelude::*};\n\n#[pyfunction]\npub fn example_sql() -&gt; PyResult&lt;String&gt; {\n    Ok(queryer::example_sql())\n}\n\n#[pyfunction]\npub fn query(sql: &amp;str, output: Option&lt;&amp;str&gt;) -&gt; PyResult&lt;String&gt; {\n    let rt = tokio::runtime::Runtime::new().unwrap();\n    let data = rt.block_on(async { queryer::query(sql).await.unwrap() });\n    match output {\n        Some(\"csv\") | None =&gt; Ok(data.to_csv().unwrap()),\n        Some(v) =&gt; Err(exceptions::PyTypeError::new_err(format!(\n            \"Output type {} not supported\",\n            v\n        ))),\n    }\n}\n\n#[pymodule]\nfn queryer_py(_py: Python, m: &amp;PyModule) -&gt; PyResult&lt;()&gt; {\n    m.add_function(wrap_pyfunction!(query, m)?)?;\n    m.add_function(wrap_pyfunction!(example_sql, m)?)?;\n    Ok(())\n}\n</code></pre><p>使用了 #[pymodule] 宏，来提供 python module 入口函数，它负责注册这个 module 下的类和函数。通过 <code>m.add_function</code> 可以注册函数，之后，在 Python 里就可以这么调用：</p><pre><code class=\"language-python\">import queryer_py\nqueryer_py.query(\"select * from file:///test.csv\")\n</code></pre><p>但当时我们想暴露出来的接口功能很简单，让用户传入一个 SQL 字符串和输出类型的字符串，返回一个按照 SQL 查询处理过的、符合输出类型的字符串。所以为 Python 模块提供了两个接口 example_sql 和 query。</p><p>不过，我们今天要做的事情远比第 6 讲中对 PyO3 的使用复杂。比如说要在两门语言中传递数据结构，让 Python 类可以使用 Rust 方法等，所以需要注册一些类以及对应的类方法。</p><p>看上文使用截图中的一些代码（复制到这里了）：</p><pre><code class=\"language-python\">from xunmi import *\n\nindexer = Indexer(\"./fixtures/config.yml\")\nupdater = indexer.get_updater()\nf = open(\"./fixtures/wiki_00.xml\")\ndata = f.read()\nf.close()\ninput_config = InputConfig(\"xml\", [(\"$value\", \"content\")], [(\"id\", (\"string\", \"number\"))])\nupdater.update(data, input_config)\nupdater.commit()\n\nresult = indexer.search(\"历史\", [\"title\", \"content\"], 5, 0)\n</code></pre><p>你会发现，<strong>我们需要注册 Indexer、IndexUpdater 和 InputConfig 这三个类</strong>，它们都有自己的成员函数，其中，Indexer 和 InputConfig 还要有类的构造函数。</p><p>但是因为 xunmi 是 xunmi-py 外部引入的一个 crate，我们无法直接动 xunmi 的数据结构，把这几个类注册进去。怎么办？我们需要封装一下：</p><pre><code class=\"language-rust\">use pyo3::{exceptions, prelude::*};\nuse xunmi::{self as x};\n\n#[pyclass]\npub struct Indexer(x::Indexer);\n\n#[pyclass]\npub struct InputConfig(x::InputConfig);\n\n#[pyclass]\npub struct IndexUpdater(x::IndexUpdater);\n</code></pre><p>这里有个小技巧，可以把 xunmi 的命名空间临时改成 x，这样，xunmi 自己的结构用 x:: 来引用，就不会有命名的冲突了。</p><p>有了这三个定义，我们就可以通过 <code>m.add_class</code> 把它们引入到模块中：</p><pre><code class=\"language-rust\">#[pymodule]\nfn xunmi(_py: Python, m: &amp;PyModule) -&gt; PyResult&lt;()&gt; {\n    m.add_class::&lt;Indexer&gt;()?;\n    m.add_class::&lt;InputConfig&gt;()?;\n    m.add_class::&lt;IndexUpdater&gt;()?;\n    Ok(())\n}\n</code></pre><p>注意，<strong>这里的函数名要和 crate lib name 一致</strong>，如果你没有定义 lib name，默认会使用 crate name。我们为了区别，crate name 使用了 “xunmi-py”，所以前面在 Cargo.toml 里，会单独声明一下 lib name：</p><pre><code class=\"language-bash\">[lib]\nname = \"xunmi\"\ncrate-type = [\"cdylib\"]\n</code></pre><h3>把 struct 的方法暴露成 class 的方法</h3><p>注册好Python的类，继续写功能的实现，基本上是 shim 代码，也就是把 xunmi 里对应的数据结构的方法暴露给 Python。先看个简单的，IndexUpdater 的实现：</p><pre><code class=\"language-rust\">#[pymethods]\nimpl IndexUpdater {\n    pub fn add(&amp;mut self, input: &amp;str, config: &amp;InputConfig) -&gt; PyResult&lt;()&gt; {\n        Ok(self.0.add(input, &amp;config.0).map_err(to_pyerr)?)\n    }\n\n    pub fn update(&amp;mut self, input: &amp;str, config: &amp;InputConfig) -&gt; PyResult&lt;()&gt; {\n        Ok(self.0.update(input, &amp;config.0).map_err(to_pyerr)?)\n    }\n\n    pub fn commit(&amp;mut self) -&gt; PyResult&lt;()&gt; {\n        Ok(self.0.commit().map_err(to_pyerr)?)\n    }\n\n    pub fn clear(&amp;self) -&gt; PyResult&lt;()&gt; {\n        Ok(self.0.clear().map_err(to_pyerr)?)\n    }\n}\n</code></pre><p>首先，需要用 <code>#[pymethods]</code> 来包裹 <code>impl IndexUpdater {}</code>，这样，里面所有的 pub 方法都可以在 Python 侧使用。我们暴露了 add / update / commit / clear 这几个方法。方法的类型签名正常撰写即可，Rust 的基本类型都能通过 PyO3 对应到 Python，使用到的 InputConfig 之前也注册成 Python class 了。</p><p>所以，通过这些方法，一个 Python 用户就可以轻松地在 Python 侧生成字符串，生成 InputConfig 类，然后传给 update() 函数，交给 Rust 侧处理。比如这样：</p><pre><code class=\"language-python\">f = open(\"./fixtures/wiki_00.xml\")\ndata = f.read()\nf.close()\ninput_config = InputConfig(\"xml\", [(\"$value\", \"content\")], [(\"id\", (\"string\", \"number\"))])\nupdater.update(data, input_config)\n</code></pre><h3>错误处理</h3><p>还记得上一讲强调的三个要点吗，在写FFI的时候要注意Rust的错误处理。这里，所有函数如果要返回 Result&lt;T, E&gt;，需要使用 PyResult&lt;T&gt;。你原本的错误类型需要处理一下，变成 Python 错误。</p><p>我们可以用 map_err 处理，其中 to_pyerr 实现如下：</p><pre><code class=\"language-rust\">pub(crate) fn to_pyerr&lt;E: ToString&gt;(err: E) -&gt; PyErr {\n    exceptions::PyValueError::new_err(err.to_string())\n}\n</code></pre><p>通过使用 PyO3 提供的 PyValueError，在 Rust 侧生成的 err，会被 PyO3 转化成 Python 侧的异常。比如我们在创建 indexer 时提供一个不存在的 config：</p><pre><code class=\"language-python\">In [3]: indexer = Indexer(\"./fixtures/config.ymla\")\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-3-bde6b0e501ea&gt; in &lt;module&gt;\n----&gt; 1 indexer = Indexer(\"./fixtures/config.ymla\")\n\nValueError: No such file or directory (os error 2)\n</code></pre><p>即使你在 Rust 侧使用了 <code>panic!</code>，PyO3 也有很好的处理：</p><pre><code class=\"language-python\">In [3]: indexer = Indexer(\"./fixtures/config.ymla\")\n---------------------------------------------------------------------------\nPanicException                            Traceback (most recent call last)\n&lt;ipython-input-11-082d933e67e2&gt; in &lt;module&gt;\n----&gt; 1 indexer = Indexer(\"./fixtures/config.ymla\")\n      2 updater = indexer.get_updater()\n\nPanicException: called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n</code></pre><p>它也是在 Python 侧抛出一个异常。</p><h3>构造函数</h3><p>好，接着看 Indexer 怎么实现：</p><pre><code class=\"language-rust\">#[pymethods]\nimpl Indexer {\n    // 创建或载入 index\n    #[new]\n    pub fn open_or_create(filename: &amp;str) -&gt; PyResult&lt;Indexer&gt; {\n        let content = fs::read_to_string(filename).unwrap();\n        let config = x::IndexConfig::from_str(&amp;content).map_err(to_pyerr)?;\n        let indexer = x::Indexer::open_or_create(config).map_err(to_pyerr)?;\n        Ok(Indexer(indexer))\n    }\n    \n    // 获取 updater\n    pub fn get_updater(&amp;self) -&gt; IndexUpdater {\n        IndexUpdater(self.0.get_updater())\n    }\n\n    // 搜索\n    pub fn search(\n        &amp;self,\n        query: String,\n        fields: Vec&lt;String&gt;,\n        limit: usize,\n        offset: Option&lt;usize&gt;,\n    ) -&gt; PyResult&lt;Vec&lt;(f32, String)&gt;&gt; {\n        let default_fields: Vec&lt;_&gt; = fields.iter().map(|s| s.as_str()).collect();\n        let data: Vec&lt;_&gt; = self\n            .0\n            .search(&amp;query, &amp;default_fields, limit, offset.unwrap_or(0))\n            .map_err(to_pyerr)?\n            .into_iter()\n            .map(|(score, doc)| (score, serde_json::to_string(&amp;doc).unwrap()))\n            .collect();\n\n        Ok(data)\n    }\n\n    // 重新加载 index\n    pub fn reload(&amp;self) -&gt; PyResult&lt;()&gt; {\n        self.0.reload().map_err(to_pyerr)\n    }\n}\n</code></pre><p>你看，我们可以用 <code>#[new]</code> 来标记要成为构造函数的方法，所以，在 Python 侧，当你调用：</p><pre><code class=\"language-python\">indexer = Indexer(\"./fixtures/config.yml\")\n</code></pre><p>其实，它在 Rust 侧就调用了 <code>open_or_crate</code> 方法。把某个用来构建数据结构的方法，标记为一个构造函数，可以让 Python 用户感觉用起来更加自然。</p><h3>缺省参数</h3><p>好，最后来看看缺省参数的实现。Python 支持缺省参数，但 Rust 不支持缺省参数，怎么破？</p><p>别着急，PyO3 巧妙使用了 Option&lt;T&gt;，当 Python 侧使用缺省参数时，相当于传给 Rust 一个 None，Rust 侧就可以根据 None 来使用缺省值，比如下面 InputConfig 的实现：</p><pre><code class=\"language-rust\">#[pymethods]\nimpl InputConfig {\n    #[new]\n    fn new(\n        input_type: String,\n        mapping: Option&lt;Vec&lt;(String, String)&gt;&gt;,\n        conversion: Option&lt;Vec&lt;(String, (String, String))&gt;&gt;,\n    ) -&gt; PyResult&lt;Self&gt; {\n        let input_type = match input_type.as_ref() {\n            \"yaml\" | \"yml\" =&gt; x::InputType::Yaml,\n            \"json\" =&gt; x::InputType::Json,\n            \"xml\" =&gt; x::InputType::Xml,\n            _ =&gt; return Err(exceptions::PyValueError::new_err(\"Invalid input type\")),\n        };\n        let conversion = conversion\n            .unwrap_or_default()\n            .into_iter()\n            .filter_map(|(k, (t1, t2))| {\n                let t = match (t1.as_ref(), t2.as_ref()) {\n                    (\"string\", \"number\") =&gt; (x::ValueType::String, x::ValueType::Number),\n                    (\"number\", \"string\") =&gt; (x::ValueType::Number, x::ValueType::String),\n                    _ =&gt; return None,\n                };\n                Some((k, t))\n            })\n            .collect::&lt;Vec&lt;_&gt;&gt;();\n\n        Ok(Self(x::InputConfig::new(\n            input_type,\n            mapping.unwrap_or_default(),\n            conversion,\n        )))\n    }\n}\n</code></pre><p>这段代码是典型的 shim 代码，它就是把接口包装成更简单的形式提供给 Python，然后内部做转换适配原本的接口。</p><p>在 Python 侧，当 mapping 或 conversion 不需要时，可以不提供。这里我们使用 unwrap_or_default() 来得到缺省值（对 Vec&lt;T&gt; 来说就是 <code>vec![]</code>）。这样，在 Python 侧这么调用都是合法的：</p><pre><code class=\"language-python\">input_config = InputConfig(\"xml\", [(\"$value\", \"content\")], [(\"id\", (\"string\", \"number\"))])\ninput_config = InputConfig(\"xml\", [(\"$value\", \"content\")])\ninput_config = InputConfig(\"xml\")\n</code></pre><h3>完整代码</h3><p>好了，到这里今天的主要目标就基本完成啦。 xunmi-py 里 src/lib.rs 的完整代码也展示一下供你对比参考：</p><pre><code class=\"language-rust\">use pyo3::{\n    exceptions,\n    prelude::*,\n    types::{PyDict, PyTuple},\n};\nuse std::{fs, str::FromStr};\nuse xunmi::{self as x};\n\npub(crate) fn to_pyerr&lt;E: ToString&gt;(err: E) -&gt; PyErr {\n    exceptions::PyValueError::new_err(err.to_string())\n}\n\n#[pyclass]\npub struct Indexer(x::Indexer);\n\n#[pyclass]\npub struct InputConfig(x::InputConfig);\n\n#[pyclass]\npub struct IndexUpdater(x::IndexUpdater);\n\n#[pymethods]\nimpl Indexer {\n    #[new]\n    pub fn open_or_create(filename: &amp;str) -&gt; PyResult&lt;Indexer&gt; {\n        let content = fs::read_to_string(filename).map_err(to_pyerr)?;\n        let config = x::IndexConfig::from_str(&amp;content).map_err(to_pyerr)?;\n        let indexer = x::Indexer::open_or_create(config).map_err(to_pyerr)?;\n        Ok(Indexer(indexer))\n    }\n\n    pub fn get_updater(&amp;self) -&gt; IndexUpdater {\n        IndexUpdater(self.0.get_updater())\n    }\n\n    pub fn search(\n        &amp;self,\n        query: String,\n        fields: Vec&lt;String&gt;,\n        limit: usize,\n        offset: Option&lt;usize&gt;,\n    ) -&gt; PyResult&lt;Vec&lt;(f32, String)&gt;&gt; {\n        let default_fields: Vec&lt;_&gt; = fields.iter().map(|s| s.as_str()).collect();\n        let data: Vec&lt;_&gt; = self\n            .0\n            .search(&amp;query, &amp;default_fields, limit, offset.unwrap_or(0))\n            .map_err(to_pyerr)?\n            .into_iter()\n            .map(|(score, doc)| (score, serde_json::to_string(&amp;doc).unwrap()))\n            .collect();\n\n        Ok(data)\n    }\n\n    pub fn reload(&amp;self) -&gt; PyResult&lt;()&gt; {\n        self.0.reload().map_err(to_pyerr)\n    }\n}\n\n#[pymethods]\nimpl IndexUpdater {\n    pub fn add(&amp;mut self, input: &amp;str, config: &amp;InputConfig) -&gt; PyResult&lt;()&gt; {\n        self.0.add(input, &amp;config.0).map_err(to_pyerr)\n    }\n\n    pub fn update(&amp;mut self, input: &amp;str, config: &amp;InputConfig) -&gt; PyResult&lt;()&gt; {\n        self.0.update(input, &amp;config.0).map_err(to_pyerr)\n    }\n\n    pub fn commit(&amp;mut self) -&gt; PyResult&lt;()&gt; {\n        self.0.commit().map_err(to_pyerr)\n    }\n\n    pub fn clear(&amp;self) -&gt; PyResult&lt;()&gt; {\n        self.0.clear().map_err(to_pyerr)\n    }\n}\n\n#[pymethods]\nimpl InputConfig {\n    #[new]\n    fn new(\n        input_type: String,\n        mapping: Option&lt;Vec&lt;(String, String)&gt;&gt;,\n        conversion: Option&lt;Vec&lt;(String, (String, String))&gt;&gt;,\n    ) -&gt; PyResult&lt;Self&gt; {\n        let input_type = match input_type.as_ref() {\n            \"yaml\" | \"yml\" =&gt; x::InputType::Yaml,\n            \"json\" =&gt; x::InputType::Json,\n            \"xml\" =&gt; x::InputType::Xml,\n            _ =&gt; return Err(exceptions::PyValueError::new_err(\"Invalid input type\")),\n        };\n        let conversion = conversion\n            .unwrap_or_default()\n            .into_iter()\n            .filter_map(|(k, (t1, t2))| {\n                let t = match (t1.as_ref(), t2.as_ref()) {\n                    (\"string\", \"number\") =&gt; (x::ValueType::String, x::ValueType::Number),\n                    (\"number\", \"string\") =&gt; (x::ValueType::Number, x::ValueType::String),\n                    _ =&gt; return None,\n                };\n                Some((k, t))\n            })\n            .collect::&lt;Vec&lt;_&gt;&gt;();\n\n        Ok(Self(x::InputConfig::new(\n            input_type,\n            mapping.unwrap_or_default(),\n            conversion,\n        )))\n    }\n}\n\n#[pymodule]\nfn xunmi(_py: Python, m: &amp;PyModule) -&gt; PyResult&lt;()&gt; {\n    m.add_class::&lt;Indexer&gt;()?;\n    m.add_class::&lt;InputConfig&gt;()?;\n    m.add_class::&lt;IndexUpdater&gt;()?;\n    Ok(())\n}\n</code></pre><p>整体的代码除了使用了一些 PyO3 提供的宏，没有什么特别之处，就是把 xunmi crate 的接口包装了一下（Indexer / InputConfig / IndexUpdater），然后把它们呈现在 pymodule 中。</p><p>你可以去这门课的 <a href=\"https://github.com/tyrchen/geektime-rust\">GitHub repo</a> 里，下载可以用于测试的 fixtures，以及 Jupyter Notebook（index_wiki.ipynb）。</p><p>如果要测试 Python 代码，请运行 <code>make</code>，这样会编译出一个 release 版本的 .so 放在 xunmi 目录下，之后你就可以在 ipython 或者 jupyter-lab 里 <code>from xunmi import *</code> 来使用了。当然，你也可以使用第 6 讲介绍的 <a href=\"https://github.com/PyO3/maturin\">maturin</a> 来测试和发布。</p><h3>One more thing</h3><p>作为一个 Python 老手，你可能会问，如果在 Python 侧，我要传入 *args（变长参数） 或者 **kwargs（变长字典）怎么办？这可是 Python 的精髓啊！别担心，pyo3 提供了对应的 PyTuple / PyDict 类型，以及相应的宏。</p><p>我们可以这么写：</p><pre><code class=\"language-rust\">use pyo3::types::{PyDict, PyTuple};\n\n#[pyclass]\nstruct MyClass {}\n\n#[pymethods]\nimpl MyClass {\n    #[staticmethod]\n    #[args(kwargs = \"**\")]\n    fn test1(kwargs: Option&lt;&amp;PyDict&gt;) -&gt; PyResult&lt;()&gt; {\n        if let Some(kwargs) = kwargs {\n            for kwarg in kwargs {\n                println!(\"{:?}\", kwarg);\n            }\n        } else {\n            println!(\"kwargs is none\");\n        }\n        Ok(())\n    }\n\n    #[staticmethod]\n    #[args(args = \"*\")]\n    fn test2(args: &amp;PyTuple) -&gt; PyResult&lt;()&gt; {\n        for arg in args {\n            println!(\"{:?}\", arg);\n        }\n        Ok(())\n    }\n}\n</code></pre><p>感兴趣的同学可以尝试一下（记得要 m.add_class 注册一下）。下面是运行结果：</p><pre><code class=\"language-python\">In [6]: MyClass.test1()                                                                                                           \nkwargs is none\n\nIn [7]: MyClass.test1(a=1, b=2)                                                                                                   \n('a', 1)\n('b', 2)\n\nIn [8]: MyClass.test2(1,2,3)                                                                                                      \n1\n2\n3\n</code></pre><h2>小结</h2><p>PyO3 是一个非常成熟的让 Python 和 Rust 互操作的库。很多 Rust 的库都是通过 PyO3 被介绍到 Python 社区的。所以如果你是一名 Python 开发者，喜欢在 Jupyter Notebook 上开发，不妨把一些需要高性能的库用 Rust 实现。其实 tantivy 也有自己的 <a href=\"https://github.com/quickwit-inc/tantivy-py\">tantivy-py</a>，你也可以看看它的实现源码。</p><p>当然啦，这一讲我们对 PyO3 的使用也仅仅是冰山一角。PyO3 还允许你在 Rust 下调用 Python 代码。</p><p>比如你可以提供一个库给 Python，让 Python 调用这个库的能力。在需要的时候，这个库还可以接受一个来自 Python 的闭包函数，让 Python 用户享受到 Rust 库的高性能之外，还可以拥有足够的灵活性。我们之前使用过的 <a href=\"https://github.com/pola-rs/polars\">polars</a> 就有不少这样 Rust 和 Python 的深度交互。感兴趣的同学可以看看它的代码。</p><h3>思考题</h3><p>今天我们实现了 xunmi-py，按照类似的思路，你可以试着边看 neon 的文档，边实现一个 xunmi-js，让它也可以被用在 Node.js 社区。</p><p>欢迎在留言区分享讨论。感谢你的收听，今天你完成了第32次Rust打卡啦，继续坚持。我们下节课见～</p>","neighbors":{"left":{"article_title":"31｜FFI：Rust如何和你的语言架起沟通桥梁？","id":437566},"right":{"article_title":"33｜并发处理（上）：从atomics到Channel，Rust都提供了什么工具？","id":442216}},"comments":[{"had_liked":false,"id":320811,"user_name":"Marshal SHI","can_delete":false,"product_type":"c1","uid":2157117,"ip_address":"","ucode":"7420DBD8B5358D","user_header":"https://static001.geekbang.org/account/avatar/00/20/ea/3d/fe1ab9eb.jpg","comment_is_top":false,"comment_ctime":1636518203,"is_pvip":false,"replies":[{"id":"116333","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636523949,"ip_address":"","comment_id":320811,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18816387387","product_id":100085301,"comment_content":"之前我在medium上分享过比较PyO3和rust、python速度的文章，大家有兴趣可以看看。在release下PyO3可以提供和rust相似的速度<br>（不要忘记`--release`） <br>文章链接：https:&#47;&#47;link.medium.com&#47;iWSbYCrS3kb","like_count":4,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530124,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636523949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334368,"user_name":"nuan","can_delete":false,"product_type":"c1","uid":2905523,"ip_address":"","ucode":"55FF98EB85404D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIDqHQQByGiaXcAk94MdDn3ftupZLXyR6bAKibxOzMxy5h3uBwZ7QiaCiaIfbCMK0cIQfGNax8iawoiaQAg/132","comment_is_top":false,"comment_ctime":1644903843,"is_pvip":true,"replies":[{"id":"122141","content":"本地建，链接去掉了免得有误导～","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1644908803,"ip_address":"","comment_id":334368,"utype":2}],"discussion_count":1,"race_medal":5,"score":"1644903843","product_id":100085301,"comment_content":"准备工作-&gt;&quot;创建 build.rs，并添入：&quot; 中，build.rs 的链接链到哪里了？","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551141,"discussion_content":"本地建，链接去掉了免得有误导～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644908803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321520,"user_name":"Litt1eQ","can_delete":false,"product_type":"c1","uid":2083695,"ip_address":"","ucode":"D80D0B14F3B312","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cb/6f/b6693f43.jpg","comment_is_top":false,"comment_ctime":1636936385,"is_pvip":true,"replies":[{"id":"118922","content":"你可以在 github action 里编译不同系统下的 package","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639853155,"ip_address":"","comment_id":321520,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1636936385","product_id":100085301,"comment_content":"老师您好，想咨询一下，如果使用pyo3能否有什么比较方便的办法可以在mac上直接编译出来linux win mac可运行的package 现在我用的maturin 如果用借助docker官方给出了可以编译出来Linux可运行的package的方案，但是编译出win可用package我也没发现可用的方案，谢谢了。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539883,"discussion_content":"你可以在 github action 里编译不同系统下的 package","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639853155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2083695,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/cb/6f/b6693f43.jpg","nickname":"Litt1eQ","note":"","ucode":"D80D0B14F3B312","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":540661,"discussion_content":"感谢老师得解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640121521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539883,"ip_address":""},"score":540661,"extra":""}]}]},{"had_liked":false,"id":321470,"user_name":"阿海","can_delete":false,"product_type":"c1","uid":1281585,"ip_address":"","ucode":"2589431F840C42","user_header":"https://static001.geekbang.org/account/avatar/00/13/8e/31/28972804.jpg","comment_is_top":false,"comment_ctime":1636893102,"is_pvip":true,"replies":[{"id":"118923","content":"对","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639853176,"ip_address":"","comment_id":321470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636893102","product_id":100085301,"comment_content":"作者你好，看到Makefile文件中，有一句mv xxx.dylib yyy.so<br>百度了下， dylib是macos平台下的，对这个格式不是很了解，看构建脚本，是可以直接将.dylib重命名为.so 文件使用的吗","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539884,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639853176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320800,"user_name":"余泽锋","can_delete":false,"product_type":"c1","uid":1003207,"ip_address":"","ucode":"5AB1499746C003","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/c7/8c2d0a3d.jpg","comment_is_top":false,"comment_ctime":1636514578,"is_pvip":false,"replies":[{"id":"116334","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636524301,"ip_address":"","comment_id":320800,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1636514578","product_id":100085301,"comment_content":"平时工作一直用python来做数据处理，老师说的这些对我来说太有用了，使用rust提供一些高性能库给python使用。真是太棒了。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530120,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636524301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320749,"user_name":"雪无痕","can_delete":false,"product_type":"c1","uid":1235903,"ip_address":"","ucode":"261357711A568E","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/bf/d990f851.jpg","comment_is_top":false,"comment_ctime":1636503636,"is_pvip":false,"replies":[{"id":"116594","content":"你可以看看这篇：https:&#47;&#47;adventures.michaelfbryan.com&#47;posts&#47;plugins-in-rust&#47;","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636644181,"ip_address":"","comment_id":320749,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636503636","product_id":100085301,"comment_content":"老师能否讲下，在rust下如何开发一个通用的插件框架？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530100,"discussion_content":"你可以看看这篇：https://adventures.michaelfbryan.com/posts/plugins-in-rust/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636644181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}