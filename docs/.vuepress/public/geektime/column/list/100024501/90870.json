{"id":90870,"title":"17 | 远超你想象的多线程的那些坑","content":"<p>你好，我是戴铭。今天，我们一起来聊聊iOS开发中，使用多线程技术会带来的那些问题。</p><p>我们可以先来试想这么一个场景，如果没有多线程技术，那么我们要对一张照片进行滤镜处理时，就只能由主线程来完成这个处理。可想而知，这时候主线程阻塞了，其他的任何操作都无法继续。</p><p>解决这个问题的方法，就是再多创建一个线程来进行滤镜处理的操作，这样主线程就可以继续执行其他操作。这，也就是我们今天要说的多线程技术了。</p><p>目前，在iOS开发中，我们经常会用到系统提供的方法来使用多线程技术开发App，期望可以充分利用硬件资源来提高 App 的运行效率。</p><p>但是，我们不禁会想到，像UIKit这样的前端框架并没有使用多线程技术。而 AFNetworking 2.0（网络框架）、FMDB（第三方数据库框架）这些用得最多的基础库，使用多线程技术时也非常谨慎。</p><p>那么，你有没有想过为什么 UIKit 不是线程安全的，UI 都要在主线程上操作。</p><p>在 AFNetworking 2.0 中，把每个请求都封装成了单独的NSOperationQueue，再由NSOperationQueue根据当前的CPU数量和系统负载来控制并发。那么，为什么 AFNetworking 2.0 没有为每个请求创建一个线程，而只是创建了一个线程，用来接收NSOperationQueue的回调呢？</p><!-- [[[read_end]]] --><p>FMDB只通过FMDatabaseQueue开启了一个线程队列，来串行地操作数据库。这，又是为什么呢？</p><p>让我说，这就是因为多线程技术有坑。特别是 UIKit 干脆就做成了线程不安全，只能在主线程上操作。</p><p>当你学了多线程的相关知识后，一定会忍不住去使用多线程，但在使用时一定要小心多线程的那些陷阱。只有这样，我们在使用多线程技术时才能够预见到可能会出现的问题，做到心中有数。</p><p>而写 UIKit、AFNetworking、FMDB 这些库的“大神”们，并不是解决不了多线程技术可能会带来的问题，而相反正是因为他们非常清楚这些可能存在的问题，所以为避免使用者滥用多线程，亦或是出于性能考虑，而选择了使用单一线程来保证这些基础库的稳定可用。</p><p>那这么说的话，为了稳定我就不能使用多线程技术了吗？</p><p>当然不是，多线程技术还是有很多适用场景的。就比如说，在需要快速进行多个任务计算的场景里，多线程技术确实能够明显提高单位时间内的计算效率。</p><p>还是以照片处理为例，当选择一张照片后，你希望能够看到不同滤镜处理后的效果。如果这些效果图都是在一个队列里串行处理的话，那么你就得等着这些滤镜一个一个地来处理。这么做的话，不仅会影响用户体验，也没能充分利用硬件资源，可以说是把高端手机当作低端机来用了。换句话说就是，用户花大价钱升级了手机硬件，操作App的体验却没有得到提升。</p><p>所以，我们不能因为多线程技术有坑就不去用，正确的方法应该是更多地去了解多线程会有哪些问题，如果我们能够事先预见到那些问题的话，那么避免这些问题的发生也就不在话下了。</p><p>接下来，我们就一起来看看多线程技术常见的两个大坑，常驻线程和并发问题，分别是从何而来，以及如何避免吧。</p><h1>常驻线程</h1><p>我们先说说多线程技术的第一个坑：常驻线程。</p><p>常驻线程，指的就是那些不会停止，一直存在于内存中的线程。我们在文章开始部分，说到的AFNetworking 2.0 专门创建了一个线程来接收 NSOperationQueue 的回调，这个线程其实就是一个常驻线程。接下来，我们就看看常驻线程这个问题是如何引起的，以及是否有对应的解决方案。</p><p>我们先通过 AFNetworking 2.0 创建常驻线程的代码，来看一下这个线程是怎么创建的。</p><pre><code>+ (void)networkRequestThreadEntryPoint:(id)__unused object {\n    @autoreleasepool {\n        // 先用 NSThread 创建了一个线程\n        [[NSThread currentThread] setName:@&quot;AFNetworking&quot;];\n        // 使用 run 方法添加 runloop\n        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];\n        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];\n        [runLoop run];\n    }\n}\n</code></pre><p>如代码所示，AFNetworking 2.0 先用 NSThread 创建了一个线程，并使用 NSRunLoop 的 run 方法给这个新线程添加了一个 runloop。</p><p>这里我需要先和你说明白一个问题，通过NSRunLoop添加runloop的方法有三个：</p><ul>\n<li>run方法。通过 run 方法添加的 runloop ，会不断地重复调用runMode:beforeDate: 方法，来保证自己不会停止。</li>\n<li>runUntilDate: 和 runMode:beforeDate 方法。这两个方法添加的runloop，可以通过指定时间来停止 runloop。</li>\n</ul><p>看到这里，你一定在想，原来创建一个常驻线程这么容易，那么我每写一个库就创建一个常驻线程来专门处理当前库自己的事情，该多好啊。你看，大名鼎鼎的 AFNetworking 2.0 库就是这么干的。</p><p>但是，你再想想，如果你有30个库，每个库都常驻一个线程。那这样做，不但不能提高CPU的利用率，反而会降低程序的执行效率。也就是说，这样做的话，就不是充分利用而是浪费CPU 资源了。如果你的库非常多的话，按照这个思路创建的常驻线程也会更多，结果就只会带来更多的坑。</p><p>说到这里，<strong>既然常线程是个坑，那为什么 AFNetworking 2.0 库还要这么做呢？</strong></p><p>其实，这个问题的根源在于 AFNetworking 2.0 使用的是 NSURLConnection，而NSURLConnection的设计上存在些缺陷。接下来，我和你说说它的设计上有哪些缺陷，了解了这些缺陷后你也就能够理解当时 AFNetworking 2.0 为什么明知常驻线程有坑，还是使用了常驻线程。这样，你以后再碰到类似的情况时，也可以跟 AFNetworking 2.0 一样使用常线程去解决问题，只要不滥用常驻线程就可以了。</p><p>NSURLConnection 发起请求后，所在的线程需要一直存活，以等待接收 NSURLConnectionDelegate回调方法。但是，网络返回的时间不确定，所以这个线程就需要一直常驻在内存中。既然这样，AFNetworking 2.0为什么没有在主线程上完成这个工作，而一定要新创建一个线程来做呢？</p><p>这是因为主线程还要处理大量的UI 和交互工作，为了减少对主线程的影响，所以AFNetworking 2.0 就新建了一个常驻线程，用来处理所有的请求和回调。AFNetworking 2.0的线程设计如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/02/48/02c4b5f2f0a9a2d0cef55b9e5420e148.png?wh=1024*768\" alt=\"\"></p><center><span class=\"reference\">图1 AFNetworking 2.0的线程设计示意图</span></center><p>通过上面的分析我们可以知道，如果不是因为NSURLConnection 的请求必须要有一个一直存活的线程来接收回调，那么AFNetworking 2.0 就不用创建一个常驻线程出来了。虽然说，在一个 App 里网络请求这个动作的占比很高，但也有很多不需要网络的场景，所以线程一直常驻在内存中，也是不合理的。</p><p>但是，AFNetworking 在3.0版本时，使用苹果公司新推出的 NSURLSession 替换了 NSURLConnection，从而避免了常驻线程这个坑。NSURLSession 可以指定回调 NSOperationQueue，这样请求就不需要让线程一直常驻在内存里去等待回调了。实现代码如下：</p><pre><code>self.operationQueue = [[NSOperationQueue alloc] init];\nself.operationQueue.maxConcurrentOperationCount = 1;\nself.session = [NSURLSession sessionWithConfiguration:self.sessionConfiguration delegate:self delegateQueue:self.operationQueue];\n</code></pre><p>从上面的代码可以看出，NSURLSession发起的请求，可以指定回调的delegateQueue，不再需要在当前线程进行代理方法的回调。所以说，NSURLSession 解决了 NSURLConnection 的线程回调问题。</p><p>可见，AFNetworking 2.0 使用常驻线程也是无奈之举，一旦有方案能够替代常驻线程，它就会毫不犹豫地废弃常驻线程。那么，你还有什么理由要使用常驻线程呢？</p><p>如果<strong>你需要确实需要保活线程一段时间</strong>的话，可以选择使用 NSRunLoop 的另外两个方法 runUntilDate: 和 runMode:beforeDate，来指定线程的保活时长。让线程存活时间可预期，总比让线程常驻，至少在硬件资源利用率这点上要更加合理。</p><p>或者，你还可以使用 CFRunLoopRef 的 CFRunLoopRun 和 CFRunLoopStop 方法来完成 runloop 的开启和停止，达到将线程保活一段时间的目的。</p><h2>并发</h2><p>并发是多线程技术的第二个大坑。</p><p>在iOS 并发编程技术中，GCD的使用率是最高的。所以，在这篇文章中，我就以GCD为例和你说说多线程的并发问题。</p><p>GCD（Grand Central Dispatch）是由苹果公司开发的一个多核编程解决方案。它提供的一套简单易用的接口，极大地方便了并发编程。同时，它还可以完成对复杂的线程创建、释放时机的管理。但是，GCD带来这些便利的同时，也带来了资源使用上的风险。</p><p>例如，在进行数据读写操作时，总是需要一段时间来等待磁盘响应的，如果在这个时候通过 GCD 发起了一个任务，那么GCD就会本着最大化利用 CPU的原则，会在等待磁盘响应的这个空档，再创建一个新线程来保证能够充分利用 CPU。</p><p>而如果GCD发起的这些新任务，都是类似于数据存储这样需要等待磁盘响应的任务的话，那么随着任务数量的增加，GCD 创建的新线程就会越来越多，从而导致内存资源越来越紧张，等到磁盘开始响应后，再读取数据又会占用更多的内存。结果就是，失控的内存占用会引起更多的内存问题。</p><p>这种情况最典型的场景就是数据库读写操作。<a href=\"https://github.com/ccgus/fmdb\">FMDB</a>是一个开源的第三方数据库框架，通过FMDatabaseQueue 这个核心类，将与读写数据库相关的磁盘操作都放到一个串行队列里执行，从而避免了线程创建过多导致系统资源紧张的情况。</p><p>FMDatabaseQueue 使用起来也很简单，<a href=\"https://github.com/ming1016/GCDFetchFeed\">我的开源项目“已阅</a>”就是使用FMDB 进行数据存储的。但，我使用的是 FMDatabase 而不是 FMDatabaseQueue。为什么要这么做呢？因为这个项目里的并发量并不大，是可控的，所以即使不使用 FMDatabaseQueue 也可以快速完成数据的存储工作。</p><p>但，为了能够支持以后可能更大的并发量，下面我将其中“已读”功能的数据库操作改成 FMDatabaseQueue。这样，我就可以将并行队列转化为串行队列来执行，避免大并发读写磁盘操作造成内存问题，改写代码如下：</p><pre><code>// 标记文章已读\n- (RACSignal *)markFeedItemAsRead:(NSUInteger)iid fid:(NSUInteger)fid{\n    @weakify(self);\n    return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {\n        @strongify(self);\n        // 改写成 FMDatabaseQueue 串行队列进行数据库操作\n        FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:self.feedDBPath];\n        [queue inDatabase:^(FMDatabase *db) {\n            FMResultSet *rs = [FMResultSet new];\n            // 读取文章数据\n            if (fid == 0) {\n                rs = [db executeQuery:@&quot;select * from feeditem where isread = ? and iid &gt;= ? order by iid desc&quot;, @(0), @(iid)];\n            } else {\n                rs = [db executeQuery:@&quot;select * from feeditem where isread = ? and iid &gt;= ? and fid = ? order by iid desc&quot;, @(0), @(iid), @(fid)];\n            }\n            NSUInteger count = 0;\n            while ([rs next]) {\n                count++;\n            }\n            // 更新文章状态为已读\n            if (fid == 0) {\n                [db executeUpdate:@&quot;update feeditem set isread = ? where iid &gt;= ?&quot;, @(1), @(iid)];\n            } else {\n                [db executeUpdate:@&quot;update feeditem set isread = ? where iid &gt;= ? and fid = ?&quot;, @(1), @(iid), @(fid)];\n            }\n            \n            [subscriber sendNext:@(count)];\n            [subscriber sendCompleted];\n            [db close];\n        }];\n        return nil;\n    }];\n}\n</code></pre><p>如代码所示，你只需要将数据库的操作放到 FMDatabaseQueue 的 inDatabase 方法入参 block 中，就可以在 FMDatabaseQueue 维护的串行队列里排队等待执行了。原 FMDatabase 的写法，你可以直接到我的“已阅”项目里查看。</p><p>总结来讲，类似数据库这种需要频繁读写磁盘操作的任务，尽量使用串行队列来管理，避免因为多线程并发而出现内存问题。</p><h2>内存问题</h2><p>在并发这部分，我一直在和你说线程开多了会有内存问题，那到底是什么内存问题呢？为什么会有内存问题呢？</p><p>我们知道，创建线程的过程，需要用到物理内存，CPU 也会消耗时间。而且，新建一个线程，系统还需要为这个进程空间分配一定的内存作为线程堆栈。堆栈大小是 4KB 的倍数。在iOS 开发中，主线程堆栈大小是 1MB，新创建的子线程堆栈大小是 512KB。</p><p>除了内存开销外，线程创建得多了，CPU 在切换线程上下文时，还会更新寄存器，更新寄存器的时候需要寻址，而寻址的过程还会有较大的 CPU 消耗。</p><p>所以，线程过多时内存和 CPU 都会有大量的消耗，从而导致App 整体性能降低，使得用户体验变成差。CPU 和内存的使用超出系统限制时，甚至会造成系统强杀。这种情况对用户和App的伤害就更大了。</p><h2>小结</h2><p>在今天的这篇文章中，我与你分享了多线程技术会带来的一些问题。</p><p>一提到多线程技术，我们往往都会联想到死锁等锁的问题，但其实锁的问题是最容易查出来的，反而是那些藏在背后，会慢慢吃尽你系统资源的问题，才是你在使用多线程技术时需要时刻注意的。</p><p>其实，线程是个非常大的这个话题，涉及的知识也非常多，而我今天只是选取了常驻线程和并发和你详细展开。因为，这两个技术非常容易使用不当，造成不堪设想的后果。所以，我给你的建议是：常驻线程一定不要滥用，最好不用。对于多线程并发也是一样，除非是并发数量少且可控，或者必须要在短时间内快速处理数据的情况，否则我们在一般情况下为避免数量不可控的并发处理，都需要把并行队列改成串行队列来处理。</p><h2>课后小作业</h2><p>今天的课后小作业，我准备了两个，你可以选择其中一个，当然也可以全部完成。</p><p>第一个小作业是一道动手题：请你先fork 我的“<a href=\"https://github.com/ming1016/GCDFetchFeed\">已阅</a>”项目，将里面的 FMDatabase 替换成 FMDatabaseQueue；然后，再使用性能工具查看前后的内存消耗情况。</p><p>第二个小作业相对轻松些，请你在留言中说说曾经遇到过的多线程问题，你又是怎么解决的。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"16 | 性能监控：衡量 App 质量的那把尺","id":90546},"right":{"article_title":"18 | 怎么减少 App 电量消耗？","id":90874}},"comments":[{"had_liked":false,"id":88497,"user_name":"tripleCC","can_delete":false,"product_type":"c1","uid":1021444,"ip_address":"","ucode":"ADDAF6459FF156","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/04/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1555929163,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"212009326667","product_id":100024501,"comment_content":"关于NSURLConnection和URLSession那块有一个地方讲的感觉不是很清楚。NSURLConnection也可以设置执行代理的queue，通过setDelegateQueue：方法，本质上是NSURLConnection的机制需要创建此对象的线程的RunLoop去监听网络事件，然后执行注册的回调，所以在网络回来前，需要保持RunLoop的运行状态。NSURLSession应该是内部做了这个事情，所以发请求不需要所在线程“常驻”，而不是因为我们可以设置delegateQueue。从代理方法的调用栈看，NSURLSession的代理任务都是在com.apple.NSURLSession-work这个queue被塞进delegateQueue的，如果不设置delegateQueue的话，代理任务就在work队列执行，设置之后再派发到对应的队列。具体在work队列之前做了什么，还没看到比较具体的资料，不过基于底层都是CFNetworking，这个又是Source0，可能做的和常驻线程相似。","like_count":50,"discussions":[{"author":{"id":1239596,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ea/2c/5bb1f1a0.jpg","nickname":"HLHD","note":"","ucode":"87199B52A0D353","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259768,"discussion_content":"通过上面的分析我们可以知道，如果不是因为 NSURLConnection 的请求必须要有一个一直存活的线程来接收回调，那么 AFNetworking 2.0 就不用创建一个常驻线程出来了。虽然说，在一个 App 里网络请求这个动作的占比很高，但也有很多不需要网络的场景，所以线程一直常驻在内存中，也是不合理的。\n\n意思就是线程必须得活着才能收到回调方法。跟设置delegatequeue应该没关系。 \n\nurlsession应该是内部的work线程一直是活着的。所以不需要像urlconnection那样单独开一个线程保活。 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588816016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1471551,"avatar":"https://static001.geekbang.org/account/avatar/00/16/74/3f/52fa1e72.jpg","nickname":"findU","note":"","ucode":"B3F26ED4E5A29D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1239596,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ea/2c/5bb1f1a0.jpg","nickname":"HLHD","note":"","ucode":"87199B52A0D353","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297354,"discussion_content":"我的理解哈，其实线程和队列并没有必然的联系。我们打个比方，比如一个NSURLConnection在线程A发起了网络请求，可能在请求的动作结束后，线程A也随即关闭了，但是网络请求在返回的时候，对于本次的请求回调线程我们无法预知，可能还在线程A里面回调，也可能开辟了另一个线程B进行回调，这里就会导致数据的不可控。所以AF在2.0的时候为了保证回调的可控，索性让所有的请求回调都在同一个线程里面执行。我不知道这个理解对不对","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1596884280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":259768,"ip_address":""},"score":297354,"extra":""}]},{"author":{"id":1010399,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLMGCcYZHdAJg7CpoO4kF7srVDkyO2yXRMia9ck74nMbGwjzXYicVfAuYDqz6oUeOswm4Z78CWkPVQ/132","nickname":"摇摆迈克","note":"","ucode":"721F2046C8D6BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1610,"discussion_content":"戴老师也不做出回应，大家很迷惑，到底哪个说的是对的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562729458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1010399,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLMGCcYZHdAJg7CpoO4kF7srVDkyO2yXRMia9ck74nMbGwjzXYicVfAuYDqz6oUeOswm4Z78CWkPVQ/132","nickname":"摇摆迈克","note":"","ucode":"721F2046C8D6BB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407281,"discussion_content":"戴老师表示感到迷惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634967627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1610,"ip_address":""},"score":407281,"extra":""},{"author":{"id":1459863,"avatar":"https://static001.geekbang.org/account/avatar/00/16/46/97/ddd4b05f.jpg","nickname":"爱上我们的微笑","note":"","ucode":"40CDB7AB0991CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531235,"discussion_content":"😕","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637249748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":407281,"ip_address":""},"score":531235,"extra":"{\"user_type\":1}"}]},{"author":{"id":1152387,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIR1SZ3Cs9SHYA0UOzuWjY1bRcxib3icj6PnvIXZkDxicJBdS8QAkHtPoTJUc6bOG1vO9We5n9PA2VGw/132","nickname":"McSeventeen","note":"","ucode":"4435C5D7476A2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171849,"discussion_content":"感觉 看了 yy 的runloop","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581752669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91869,"user_name":"Tony","can_delete":false,"product_type":"c1","uid":1044880,"ip_address":"","ucode":"E02E4ADF5A5E53","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f1/90/61ab7b3c.jpg","comment_is_top":false,"comment_ctime":1557123784,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"96046404296","product_id":100024501,"comment_content":"多线程是有很多坑，但是多线程的好处以及如何正确使用多线程能讲讲吗？看完感觉没什么干货。","like_count":23,"discussions":[{"author":{"id":1457213,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3c/3d/126aec2c.jpg","nickname":"UIColor","note":"","ucode":"BC568797F03450","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311562,"discussion_content":"什么高手课就是花钱买个大纲，告诉你有这么个知识点，想学习知识啊，自己想办法吧。╮(╯▽╰)╭","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1602402027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87189,"user_name":"唯她命","can_delete":false,"product_type":"c1","uid":1240398,"ip_address":"","ucode":"8F687E8D306840","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/4e/ef406442.jpg","comment_is_top":false,"comment_ctime":1555546757,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40210252421","product_id":100024501,"comment_content":"老师你好，有个问题一直不理解，既然afn2.0讲所有的请求和回调 放在一个常驻线程里面，那么afn2.0的所有网络请求都在一个线程里了，那afn2.0岂不是单线程的吗？","like_count":10,"discussions":[{"author":{"id":1263832,"avatar":"https://static001.geekbang.org/account/avatar/00/13/48/d8/51ab657d.jpg","nickname":"Sun0010","note":"","ucode":"92B35625DCEB9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46581,"discussion_content":"肯定理解错误，只是接收回调是单线程，但是并发的请求是多线程的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573184242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90374,"user_name":"kidzss","can_delete":false,"product_type":"c1","uid":1197423,"ip_address":"","ucode":"8CF7F7A678139A","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/6f/e3e180b7.jpg","comment_is_top":false,"comment_ctime":1556502922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31621273994","product_id":100024501,"comment_content":"多读单写的，既保证性能，又可以保证数据安全","like_count":8},{"had_liked":false,"id":87396,"user_name":"西行客","can_delete":false,"product_type":"c1","uid":1291857,"ip_address":"","ucode":"E867341D050B4F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtZXLibdfxdazQOcLJOQ1VjuxSPaicONOq1fFk9thwR3dXAdTOlcdW9u7q1qjnq8ibJn02d0aptEpXA/132","comment_is_top":false,"comment_ctime":1555582654,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"31620353726","product_id":100024501,"comment_content":"面试中遇到一个非常坑的问题，请教一下老师。面试官问：除了加锁，还有什么其他办法能够保证数据线程安全？","like_count":8,"discussions":[{"author":{"id":1473320,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7b/28/0c6edc37.jpg","nickname":"刘靖煌","note":"","ucode":"47AF200AA46AF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128546,"discussion_content":"这是很常见的问题。答案是 串行队列","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1578648823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1457955,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3f/23/3ea59027.jpg","nickname":"Lucas","note":"","ucode":"A81F5ECB369A7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548,"discussion_content":"串行队列","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1561692313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2285624,"avatar":"","nickname":"Geek_86cd42","note":"","ucode":"41FB0C39389D01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323625,"discussion_content":"不可变量、原子操作","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604976669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459289,"avatar":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","nickname":"毛成方","note":"","ucode":"DFBF3D464D8D7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362494,"discussion_content":"https://blog.ailemon.me/2019/05/15/solving-multithreaded-thread-safety-problems-by-synchronization-and-locking/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616947204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604777,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7c/a9/addd4b3a.jpg","nickname":"宋唐不送糖","note":"","ucode":"9A7DE4F11B59CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12102,"discussion_content":"http://www.cocoachina.com/cms/wap.php?action=article&amp;id=24630  无锁保证线程安全","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568467594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1456609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Sk5OkV8YRrXibWelMMichPnM5QgIQTWiaFDjR5kLYvyk70MGuk43TiaY0jxpolQyItrckWSFJh1DssWepw6Ar3aiaVQ/132","nickname":"Eddiegooo","note":"","ucode":"22F882E8730187","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6432,"discussion_content":"barrier ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566896476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025486,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/ce/523c150f.jpg","nickname":"linqiangz","note":"","ucode":"DCB06425E0B433","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6151,"discussion_content":"信号量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566728171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1490543,"avatar":"https://static001.geekbang.org/account/avatar/00/16/be/6f/05001ccd.jpg","nickname":"Geek_c52488","note":"","ucode":"65B8D1648E54E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1025486,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/ce/523c150f.jpg","nickname":"linqiangz","note":"","ucode":"DCB06425E0B433","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306664,"discussion_content":"信号量其实也相当于锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600343381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6151,"ip_address":""},"score":306664,"extra":""}]}]},{"had_liked":false,"id":87246,"user_name":"烩面","can_delete":false,"product_type":"c1","uid":1473148,"ip_address":"","ucode":"226C99988D3A58","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/7c/7bde009a.jpg","comment_is_top":false,"comment_ctime":1555552618,"is_pvip":false,"replies":[{"id":"32673","content":"不要超过64个","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1556892441,"ip_address":"","comment_id":87246,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27325356394","product_id":100024501,"comment_content":"老师问个问题：一个 app 有线程数量的限制吗？或者说，通常情况下，线程数达到多少就被系统 kill 掉了？","like_count":6,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447365,"discussion_content":"不要超过64个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556892441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1602731,"avatar":"https://static001.geekbang.org/account/avatar/00/18/74/ab/754f48a9.jpg","nickname":"在下黑凤梨","note":"","ucode":"A91AC3F89FBC84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2107,"discussion_content":"为什么是64，这个数字怎么来的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563262672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101831,"user_name":"赫小僧","can_delete":false,"product_type":"c1","uid":1454471,"ip_address":"","ucode":"58A77BF59616F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/31/87/1a0377fa.jpg","comment_is_top":false,"comment_ctime":1559986783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14444888671","product_id":100024501,"comment_content":"看到评论中有人问线程堆栈大小，通过NSThread的stackSize属性&#47;1024就可以得到多少k。目前我查看的解说是主线程、子线程大小都是512k。","like_count":4},{"had_liked":false,"id":87894,"user_name":"Geek_0ce7bf","can_delete":false,"product_type":"c1","uid":1465997,"ip_address":"","ucode":"258C092B0FF4C8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epMJUobMDyeb9Y798y2sRRFzyHGKZticMqXTjtvibdENqjP4uw13S16FmrlIUiaIfVMz3mF9NwlyEN9w/132","comment_is_top":false,"comment_ctime":1555745497,"is_pvip":false,"replies":[{"id":"31681","content":"是的","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555859133,"ip_address":"","comment_id":87894,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14440647385","product_id":100024501,"comment_content":"在 AFNetworking 2.0 中，把每个请求都封装成了单独的 NSOperationQueue。大佬你这句话写错了吧？每个请求都封装成了单独的 NSOperation才对吧？？？？？","like_count":4,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447638,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555859133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87268,"user_name":"Cocoaleeo","can_delete":false,"product_type":"c1","uid":1241024,"ip_address":"","ucode":"C17515927FA9C5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/c0/0c690636.jpg","comment_is_top":false,"comment_ctime":1555555633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14440457521","product_id":100024501,"comment_content":"我帮老师回答一下各位的问题吧。@维他命：常驻线程和单线程不是一个概念；@kevin：AFN3.0的问题建议看一下源码；@烩面：正常来说，只要内存够，就可以一直开线程，但这样很不现实，所以可以通过第7，8，10节课的内容进行监控优化。","like_count":3},{"had_liked":false,"id":87252,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1461532,"ip_address":"","ucode":"8BF4D9E4C11EF7","user_header":"https://static001.geekbang.org/account/avatar/00/16/4d/1c/2512341d.jpg","comment_is_top":false,"comment_ctime":1555552950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14440454838","product_id":100024501,"comment_content":"大佬，AFN3.0的回调代理，“可以指定回调的 delegateQueue，不再需要在当前线程进行代理方法的回调” 具体是怎么实现的，能讲讲吗？","like_count":3},{"had_liked":false,"id":87160,"user_name":"yNot？","can_delete":false,"product_type":"c1","uid":1181908,"ip_address":"","ucode":"C87B4697586394","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/d4/f9fa5b38.jpg","comment_is_top":false,"comment_ctime":1555519449,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14440421337","product_id":100024501,"comment_content":"项目中需要每隔几秒同步一次服务器数据，对同步回来的数据需要做一系列的处理；开了个异步并行队列处理同步，引发了资源抢夺等问题，展示通过加锁解决，效果并不好，感觉失去了并发的意义","like_count":3,"discussions":[{"author":{"id":2120213,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/dhGrw9HgLURfHhoYSyqIbWfp3fBM82Hun2jfy4BBqtI1icsSiadMYbBjic4s0MR8jatGZfbkvzENvfCFY9IPk6hzQ/132","nickname":"Apple_b22154","note":"","ucode":"F39073E94E4A1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301076,"discussion_content":"请问 长链接会话(socket)处理这个场景 是不是性能受影响比较大？多谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598403066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201555,"user_name":"SuperMario","can_delete":false,"product_type":"c1","uid":1455888,"ip_address":"","ucode":"22B34DD5A1FA4D","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/10/4e03be02.jpg","comment_is_top":false,"comment_ctime":1585803119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175737711","product_id":100024501,"comment_content":"面试总是被问到如何设计一个线程池，总是不知道该怎么去说这个问题的关键点","like_count":2},{"had_liked":false,"id":88219,"user_name":"Dashing","can_delete":false,"product_type":"c1","uid":1362838,"ip_address":"","ucode":"07E3F934782BCE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZbpP8Of9zVbZnPDMnXnZH2Zft5F1Ip8ybicIY9BhSlaO37TCbYtCq89IO8iasXowia9PrPRLibdEQ1g/132","comment_is_top":false,"comment_ctime":1555895416,"is_pvip":false,"replies":[{"id":"32672","content":"常驻线程是一直存在的","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1556892236,"ip_address":"","comment_id":88219,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10145830008","product_id":100024501,"comment_content":"按照我粗浅的理解，串行队列背后也是一个线程，貌似跟常驻线程也差不多","like_count":2,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447770,"discussion_content":"常驻线程是一直存在的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556892236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2120213,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/dhGrw9HgLURfHhoYSyqIbWfp3fBM82Hun2jfy4BBqtI1icsSiadMYbBjic4s0MR8jatGZfbkvzENvfCFY9IPk6hzQ/132","nickname":"Apple_b22154","note":"","ucode":"F39073E94E4A1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301082,"discussion_content":"补充一点： 如果你在App入口 int main(int, char*){...} 这里下断点，你会发现描述里写的就是，Thread 1 Queue : com.apple.main-thread (serial)，所以主线程就是串行，它常驻的原因是，主线程上的RunLoop被开启了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598403807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87217,"user_name":"Emir","can_delete":false,"product_type":"c1","uid":1157185,"ip_address":"","ucode":"A7A346FF235C39","user_header":"https://static001.geekbang.org/account/avatar/00/11/a8/41/f20fa3ca.jpg","comment_is_top":false,"comment_ctime":1555549826,"is_pvip":false,"replies":[{"id":"31687","content":"不是说不要用而是不要滥用，比如需要短时间内快速处理数据的情况，使用多线程正好可以利用多核性能来高效完成任务。很多三方库之所以使用串行的原因就是为了避免大部分情况下多线程技术被滥用。","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555859734,"ip_address":"","comment_id":87217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10145484418","product_id":100024501,"comment_content":"多线程并发数量和可控需要怎么做到呢？老师应该讲一下方案、不能怕并发多就改成串行，多线程的意义呢？","like_count":2,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447347,"discussion_content":"不是说不要用而是不要滥用，比如需要短时间内快速处理数据的情况，使用多线程正好可以利用多核性能来高效完成任务。很多三方库之所以使用串行的原因就是为了避免大部分情况下多线程技术被滥用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555859734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89849,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1556282461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851249757","product_id":100024501,"comment_content":"用信号量semaphore, 保证多线程的数据安全","like_count":1},{"had_liked":false,"id":89185,"user_name":"Calabash_Boy","can_delete":false,"product_type":"c1","uid":1453760,"ip_address":"","ucode":"19E4D819792983","user_header":"","comment_is_top":false,"comment_ctime":1556100578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851067874","product_id":100024501,"comment_content":"当初的项目之一需要等到两个网络请求返回数据后,才能继续页面的刷新,通过GCD的队列组和信号量来解决的;","like_count":1},{"had_liked":false,"id":87990,"user_name":"SmileLong","can_delete":false,"product_type":"c1","uid":1351188,"ip_address":"","ucode":"20F67535F32664","user_header":"https://static001.geekbang.org/account/avatar/00/14/9e/14/7037d8c8.jpg","comment_is_top":false,"comment_ctime":1555782623,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5850749919","product_id":100024501,"comment_content":"使用GCD串行队列在IO操作时遇到磁盘等待一样会出现重复创建线程的问题，其实GCD并发线程反倒不会有这个问题","like_count":1,"discussions":[{"author":{"id":2107980,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2a/4c/17993652.jpg","nickname":"Jesse","note":"","ucode":"ACB308497AF747","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344673,"discussion_content":"作者只是举个例子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611555994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169500,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d8/5c/d3ac7279.jpg","nickname":"吴海峰","note":"","ucode":"4ACF2950A47707","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272683,"discussion_content":"为何GCD会在磁盘等待时间创建多个线程呢？老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590332956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87886,"user_name":"淡","can_delete":false,"product_type":"c1","uid":1456392,"ip_address":"","ucode":"6856CA319DE2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","comment_is_top":false,"comment_ctime":1555743059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5850710355","product_id":100024501,"comment_content":"感觉还可以讲的深入点。多线程有坑，除了尽量使用串行队列来避坑以外，还有哪些手段来规避？以及其他手段该注意的点也可以说说","like_count":1},{"had_liked":false,"id":87735,"user_name":"三刀流剑客","can_delete":false,"product_type":"c1","uid":1453977,"ip_address":"","ucode":"B958771DE190BB","user_header":"https://static001.geekbang.org/account/avatar/00/16/2f/99/918e9b2a.jpg","comment_is_top":false,"comment_ctime":1555674675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5850641971","product_id":100024501,"comment_content":"之前开发日志的时候多线程的坑: 公用参数获取是在异步线程中进行的, 创建了一个NSMutableDictionary, 其中有几个参数获取必须在主线程,所以就dispatch 到主线程中 setObject:forKey: 了, 然后就crash了,这里的写操作是从一个线程跳到另一个线程 : 最后的修改是这些setObject:forKey:都放到同一个线程执行, NSMutableDictionary 是类簇生成的一个对象","like_count":1},{"had_liked":false,"id":87719,"user_name":"加温后的啤酒","can_delete":false,"product_type":"c1","uid":1344488,"ip_address":"","ucode":"5F30978CDB1606","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/e8/f726c635.jpg","comment_is_top":false,"comment_ctime":1555670199,"is_pvip":false,"replies":[{"id":"31683","content":"这个方法所在的线程是新创建的","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555859243,"ip_address":"","comment_id":87719,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5850637495","product_id":100024501,"comment_content":"老师 文中的这段代码哪里有创建新线程？<br>[NSThread currentThread] 这个方法不是过去当前线程吗？为什么会创建一个新的？<br><br>+ (void)networkRequestThreadEntryPoint:(id)__unused object {<br>    @autoreleasepool {<br>        &#47;&#47; 先用 NSThread 创建了一个线程<br>        [[NSThread currentThread] setName:@&quot;AFNetworking&quot;];<br>        &#47;&#47; 使用 run 方法添加 runloop<br>        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];<br>        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];<br>        [runLoop run];<br>    }<br>}<br>","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447575,"discussion_content":"这个方法所在的线程是新创建的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555859243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007364,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5f/04/d38bd972.jpg","nickname":"219","note":"","ucode":"029C178B70A1D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4364,"discussion_content":"// 先用 NSThread 创建了一个线程\n [[NSThread currentThread] setName:@&#34;AFNetworking&#34;];\n注释容易造成误解，其实作者是想说这个方法是在一个子线程中执行","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565337750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128631,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/b7/dbdbafb1.jpg","nickname":"艾森","note":"","ucode":"588E947AE50EDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302503,"discussion_content":"源码执行这个方法时指定了用新创建的线程来执行。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598937159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87457,"user_name":"sacrifice","can_delete":false,"product_type":"c1","uid":1282844,"ip_address":"","ucode":"2DEEB2C0789837","user_header":"https://static001.geekbang.org/account/avatar/00/13/93/1c/c547b2b1.jpg","comment_is_top":false,"comment_ctime":1555598660,"is_pvip":false,"replies":[{"id":"31685","content":"子线程里做了什么？","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555859339,"ip_address":"","comment_id":87457,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5850565956","product_id":100024501,"comment_content":"老师，我for循环10000次创建子线程，内存消耗的也不明显啊","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447460,"discussion_content":"子线程里做了什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555859339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2872386,"avatar":"","nickname":"Geek_39bb4f","note":"","ucode":"D1849E9035BCAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540696,"discussion_content":"没有runloop，线程直接就消亡释放了，线程里面加个runloop run 试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640140457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1458075,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3f/9b/f626552c.jpg","nickname":"阳光黑1","note":"","ucode":"AE7C19422F565C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329081,"discussion_content":"10000次网络请求试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606308312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282479,"user_name":"刘隐林","can_delete":false,"product_type":"c1","uid":1458294,"ip_address":"","ucode":"39E2685A1CAAA1","user_header":"https://static001.geekbang.org/account/avatar/00/16/40/76/781a0d76.jpg","comment_is_top":false,"comment_ctime":1615272218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615272218","product_id":100024501,"comment_content":"常驻线程能不用尽量不用,滥用常驻线程会导致性能消耗.并发太多会开启多个线程,从而占用大量内存,影响程序性能.同时线程创建太多,CPU在调度切换时需要消耗的资源就更多,进一步降低性能.","like_count":0},{"had_liked":false,"id":134259,"user_name":"月落泉","can_delete":false,"product_type":"c1","uid":1458702,"ip_address":"","ucode":"FC03912F1EBB83","user_header":"https://static001.geekbang.org/account/avatar/00/16/42/0e/21b8025f.jpg","comment_is_top":false,"comment_ctime":1568785944,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1568785944","product_id":100024501,"comment_content":"自己创建的子线程需要添加@autoreleasepool吗？<br>","like_count":0,"discussions":[{"author":{"id":1823275,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/d2/2b/7a93d588.jpg","nickname":"低调的魅力","note":"","ucode":"AE5CA2986B5A95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332135,"discussion_content":"需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607071929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128531,"user_name":"Eddiegooo","can_delete":false,"product_type":"c1","uid":1456609,"ip_address":"","ucode":"22F882E8730187","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Sk5OkV8YRrXibWelMMichPnM5QgIQTWiaFDjR5kLYvyk70MGuk43TiaY0jxpolQyItrckWSFJh1DssWepw6Ar3aiaVQ/132","comment_is_top":false,"comment_ctime":1566896727,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566896727","product_id":100024501,"comment_content":"只有我没遇到什么多线程问题么？ 怎么感觉没怎么用多线程啊","like_count":0,"discussions":[{"author":{"id":1458075,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3f/9b/f626552c.jpg","nickname":"阳光黑1","note":"","ucode":"AE7C19422F565C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329080,"discussion_content":"一直在用，只不过是没有直接使用到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606308277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122380,"user_name":"沙亮亮","can_delete":false,"product_type":"c1","uid":1099492,"ip_address":"","ucode":"E6CF0D5B1E6691","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/e4/ec572f55.jpg","comment_is_top":false,"comment_ctime":1565353289,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565353289","product_id":100024501,"comment_content":"GCD中在主队列只能使用主线程，那对于主队列中的多个异步任务是怎么做的呢，如何避免阻塞主线程呢？","like_count":0,"discussions":[{"author":{"id":2872386,"avatar":"","nickname":"Geek_39bb4f","note":"","ucode":"D1849E9035BCAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540697,"discussion_content":"一个runloop完了之后再执行主队列的下一个异步任务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640140533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94499,"user_name":"景天儿","can_delete":false,"product_type":"c1","uid":1018983,"ip_address":"","ucode":"1A5EFE9DE2597B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/67/e91fe8d3.jpg","comment_is_top":false,"comment_ctime":1557826219,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1557826219","product_id":100024501,"comment_content":"&quot;堆栈大小是 4KB 的倍数。在 iOS 开发中，主线程堆栈大小是 1MB，新创建的子线程堆栈大小是 512KB。&quot;，请问这些数据，在哪里可以查到啊？","like_count":0,"discussions":[{"author":{"id":1070864,"avatar":"https://static001.geekbang.org/account/avatar/00/10/57/10/d33f5c39.jpg","nickname":"Nic","note":"","ucode":"F9FE8617B86B43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21538,"discussion_content":"iOS官方文档有，Threading Programming Guide","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569495656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93179,"user_name":"包罗万象","can_delete":false,"product_type":"c1","uid":1087130,"ip_address":"","ucode":"29AFA27338F0FB","user_header":"https://static001.geekbang.org/account/avatar/00/10/96/9a/78f2af55.jpg","comment_is_top":false,"comment_ctime":1557415079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557415079","product_id":100024501,"comment_content":"作业讨论：改下成FMDatabaseQueue后发现内存并没有明显变化，是否说明使用串行队列并发IO操作并没有造成内存问题？","like_count":0},{"had_liked":false,"id":89433,"user_name":"Ostholz","can_delete":false,"product_type":"c1","uid":1461439,"ip_address":"","ucode":"5233EDFD198B25","user_header":"https://static001.geekbang.org/account/avatar/00/16/4c/bf/53aa7e6f.jpg","comment_is_top":false,"comment_ctime":1556173548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556173548","product_id":100024501,"comment_content":"你异步回调就行了，为什么还要加锁。","like_count":0},{"had_liked":false,"id":87795,"user_name":"Linuse","can_delete":false,"product_type":"c1","uid":1453671,"ip_address":"","ucode":"D6EB70B574FD01","user_header":"https://static001.geekbang.org/account/avatar/00/16/2e/67/c760911f.jpg","comment_is_top":false,"comment_ctime":1555715017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555715017","product_id":100024501,"comment_content":"老师，开发中会开启多个线程，那么如何管理这些线程？","like_count":0},{"had_liked":false,"id":87778,"user_name":"drunkenMouse","can_delete":false,"product_type":"c1","uid":1454037,"ip_address":"","ucode":"AA8CEA703ECBE8","user_header":"","comment_is_top":false,"comment_ctime":1555689486,"is_pvip":false,"replies":[{"id":"31682","content":"算","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555859182,"ip_address":"","comment_id":87778,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555689486","product_id":100024501,"comment_content":"常驻线程和单线程不是一个概念，但是AFN2.0的操作不是都在一个常驻线程吗，那这个常驻线程算不算是一个一直存活的子线程？","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447597,"discussion_content":"算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555859182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87423,"user_name":"max","can_delete":false,"product_type":"c1","uid":1453593,"ip_address":"","ucode":"7F0FB84D925C76","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2T2Xv64Uo7zEXMpZiaTLcqrBDypoMB0snlhB49WBPwzXwlwFo5qKySM6YnXBY6WLM6EHKkfNspJU9jS4MWZicgCg/132","comment_is_top":false,"comment_ctime":1555591195,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555591195","product_id":100024501,"comment_content":"以xsm为例，最多可以创建多少个线程","like_count":0},{"had_liked":false,"id":87285,"user_name":"黄昏","can_delete":false,"product_type":"c1","uid":1038157,"ip_address":"","ucode":"37F8BE14148608","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d7/4d/d74ffb1f.jpg","comment_is_top":false,"comment_ctime":1555559270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555559270","product_id":100024501,"comment_content":"项目中使用了多线程产生了资源竞争问题，然后通过加锁解决的","like_count":0}]}