{"id":235334,"title":"83 | 开源实战三（下）：借Google Guava学习三大编程范式中的函数式编程","content":"<p>现在主流的编程范式主要有三种，面向过程、面向对象和函数式编程。在理论部分，我们已经详细讲过前两种了。今天，我们再借机会讲讲剩下的一种，函数式编程。</p><p>函数式编程并非一个很新的东西，早在50多年前就已经出现了。近几年，函数式编程越来越被人关注，出现了很多新的函数式编程语言，比如Clojure、Scala、Erlang等。一些非函数式编程语言也加入了很多特性、语法、类库来支持函数式编程，比如Java、Python、Ruby、JavaScript等。除此之外，Google Guava也有对函数式编程的增强功能。</p><p>函数式编程因其编程的特殊性，仅在科学计算、数据处理、统计分析等领域，才能更好地发挥它的优势，所以，我个人觉得，它并不能完全替代更加通用的面向对象编程范式。但是，作为一种补充，它也有很大存在、发展和学习的意义。所以，我觉得有必要在专栏里带你一块学习一下。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>到底什么是函数式编程?</h2><p>函数式编程的英文翻译是Functional Programming。 那到底什么是函数式编程呢？</p><p>在前面的章节中，我们讲到，面向过程、面向对象编程并没有严格的官方定义。在当时的讲解中，我也只是给出了我自己总结的定义。而且，当时给出的定义也只是对两个范式主要特性的总结，并不是很严格。实际上，函数式编程也是如此，也没有一个严格的官方定义。所以，接下来，我就从特性上来告诉你，什么是函数式编程。</p><!-- [[[read_end]]] --><p>严格上来讲，函数式编程中的“函数”，并不是指我们编程语言中的“函数”概念，而是指数学“函数”或者“表达式”（比如，y=f(x)）。不过，在编程实现的时候，对于数学“函数”或“表达式”，我们一般习惯性地将它们设计成函数。所以，如果不深究的话，函数式编程中的“函数”也可以理解为编程语言中的“函数”。</p><p>每个编程范式都有自己独特的地方，这就是它们会被抽象出来作为一种范式的原因。面向对象编程最大的特点是：以类、对象作为组织代码的单元以及它的四大特性。面向过程编程最大的特点是：以函数作为组织代码的单元，数据与方法相分离。那函数式编程最独特的地方又在哪里呢？</p><p>实际上，函数式编程最独特的地方在于它的编程思想。函数式编程认为，程序可以用一系列数学函数或表达式的组合来表示。函数式编程是程序面向数学的更底层的抽象，将计算过程描述为表达式。不过，这样说你肯定会有疑问，真的可以把任何程序都表示成一组数学表达式吗？</p><p>理论上讲是可以的。但是，并不是所有的程序都适合这么做。函数式编程有它自己适合的应用场景，比如开篇提到的科学计算、数据处理、统计分析等。在这些领域，程序往往比较容易用数学表达式来表示，比起非函数式编程，实现同样的功能，函数式编程可以用很少的代码就能搞定。但是，对于强业务相关的大型业务系统开发来说，费劲吧啦地将它抽象成数学表达式，硬要用函数式编程来实现，显然是自讨苦吃。相反，在这种应用场景下，面向对象编程更加合适，写出来的代码更加可读、可维护。</p><p>刚刚讲的是函数式编程的编程思想，如果我们再具体到编程实现，函数式编程跟面向过程编程一样，也是以函数作为组织代码的单元。不过，它跟面向过程编程的区别在于，它的函数是无状态的。何为无状态？简单点讲就是，函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样的。这实际上就是数学函数或数学表达式的基本要求。我举个例子来简单解释一下。</p><pre><code>// 有状态函数: 执行结果依赖b的值是多少，即便入参相同，多次执行函数，函数的返回值有可能不同，因为b值有可能不同。\nint b;\nint increase(int a) {\n  return a + b;\n}\n\n// 无状态函数：执行结果不依赖任何外部变量值，只要入参相同，不管执行多少次，函数的返回值就相同\nint increase(int a, int b) {\n  return a + b;\n}\n</code></pre><p>这里稍微总结一下，不同的编程范式之间并不是截然不同的，总是有一些相同的编程规则。比如，不管是面向过程、面向对象还是函数式编程，它们都有变量、函数的概念，最顶层都要有main函数执行入口，来组装编程单元（类、函数等）。只不过，面向对象的编程单元是类或对象，面向过程的编程单元是函数，函数式编程的编程单元是无状态函数。</p><h2>Java对函数式编程的支持</h2><p>我们前面讲到，实现面向对象编程不一定非得使用面向对象编程语言，同理，实现函数式编程也不一定非得使用函数式编程语言。现在，很多面向对象编程语言，也提供了相应的语法、类库来支持函数式编程。</p><p>接下来，我们就看下Java这种面向对象编程语言，对函数式编程的支持，借机加深一下你对函数式编程的理解。我们先来看下面这样一段非常典型的Java函数式编程的代码。</p><pre><code>public class FPDemo {\n  public static void main(String[] args) {\n    Optional&lt;Integer&gt; result = Stream.of(&quot;f&quot;, &quot;ba&quot;, &quot;hello&quot;)\n            .map(s -&gt; s.length())\n            .filter(l -&gt; l &lt;= 3)\n            .max((o1, o2) -&gt; o1-o2);\n    System.out.println(result.get()); // 输出2\n  }\n}\n</code></pre><p>这段代码的作用是从一组字符串数组中，过滤出长度小于等于3的字符串，并且求得这其中的最大长度。</p><p>如果你不了解Java函数式编程的语法，看了上面的代码或许会有些懵，主要的原因是，Java为函数式编程引入了三个新的语法概念：Stream类、Lambda表达式和函数接口（Functional Inteface）。Stream类用来支持通过“.”级联多个函数操作的代码编写方式；引入Lambda表达式的作用是简化代码编写；函数接口的作用是让我们可以把函数包裹成函数接口，来实现把函数当做参数一样来使用（Java不像C一样支持函数指针，可以把函数直接当参数来使用）。</p><p><strong>首先，我们来看下Stream类。</strong></p><p>假设我们要计算这样一个表达式：(3-1)*2+5。如果按照普通的函数调用的方式写出来，就是下面这个样子：</p><pre><code>add(multiply(subtract(3,1),2),5);\n</code></pre><p>不过，这样编写代码看起来会比较难理解，我们换个更易读的写法，如下所示：</p><pre><code>subtract(3,1).multiply(2).add(5);\n</code></pre><p>我们知道，在Java中，“.”表示调用某个对象的方法。为了支持上面这种级联调用方式，我们让每个函数都返回一个通用的类型：Stream类对象。在Stream类上的操作有两种：中间操作和终止操作。中间操作返回的仍然是Stream类对象，而终止操作返回的是确定的值结果。</p><p>我们再来看之前的例子。我对代码做了注释解释，如下所示。其中，map、filter是中间操作，返回Stream类对象，可以继续级联其他操作；max是终止操作，返回的不是Stream类对象，无法再继续往下级联处理了。</p><pre><code>public class FPDemo {\n  public static void main(String[] args) {\n    Optional&lt;Integer&gt; result = Stream.of(&quot;f&quot;, &quot;ba&quot;, &quot;hello&quot;) // of返回Stream&lt;String&gt;对象\n            .map(s -&gt; s.length()) // map返回Stream&lt;Integer&gt;对象\n            .filter(l -&gt; l &lt;= 3) // filter返回Stream&lt;Integer&gt;对象\n            .max((o1, o2) -&gt; o1-o2); // max终止操作：返回Optional&lt;Integer&gt;\n    System.out.println(result.get()); // 输出2\n  }\n}\n</code></pre><p><strong>其次，我们再来看下Lambda表达式。</strong></p><p>我们前面讲到，Java引入Lambda表达式的主要作用是简化代码编写。实际上，我们也可以不用Lambda表达式来书写例子中的代码。我们拿其中的map函数来举例说明一下。</p><p>下面有三段代码，第一段代码展示了map函数的定义，实际上，map函数接收的参数是一个Function接口，也就是待会儿要讲到的函数接口。第二段代码展示了map函数的使用方式。第三段代码是针对第二段代码用Lambda表达式简化之后的写法。实际上，Lambda表达式在Java中只是一个语法糖而已，底层是基于函数接口来实现的，也就是第二段代码展示的写法。</p><pre><code>// Stream中map函数的定义：\npublic interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; {\n  &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);\n  //...省略其他函数...\n}\n\n// Stream中map的使用方法：\nStream.of(&quot;fo&quot;, &quot;bar&quot;, &quot;hello&quot;).map(new Function&lt;String, Integer&gt;() {\n  @Override\n  public Integer apply(String s) {\n    return s.length();\n  }\n});\n\n// 用Lambda表达式简化后的写法：\nStream.of(&quot;fo&quot;, &quot;bar&quot;, &quot;hello&quot;).map(s -&gt; s.length());\n</code></pre><p>Lambda表达式语法不是我们学习的重点。我这里只稍微介绍一下。如果感兴趣，你可以自行深入研究。</p><p>Lambda表达式包括三部分：输入、函数体、输出。表示出来的话就是下面这个样子：</p><pre><code>(a, b) -&gt; { 语句1； 语句2；...; return 输出; } //a,b是输入参数\n</code></pre><p>实际上，Lambda表达式的写法非常灵活。我们刚刚给出的是标准写法，还有很多简化写法。比如，如果输入参数只有一个，可以省略()，直接写成a-&gt;{…}；如果没有入参，可以直接将输入和箭头都省略掉，只保留函数体；如果函数体只有一个语句，那可以将{}省略掉；如果函数没有返回值，return语句就可以不用写了。</p><p>如果我们把之前例子中的Lambda表达式，全部替换为函数接口的实现方式，就是下面这样子的。代码是不是多了很多？</p><pre><code>Optional&lt;Integer&gt; result = Stream.of(&quot;f&quot;, &quot;ba&quot;, &quot;hello&quot;)\n        .map(s -&gt; s.length())\n        .filter(l -&gt; l &lt;= 3)\n        .max((o1, o2) -&gt; o1-o2);\n        \n// 还原为函数接口的实现方式\nOptional&lt;Integer&gt; result2 = Stream.of(&quot;fo&quot;, &quot;bar&quot;, &quot;hello&quot;)\n        .map(new Function&lt;String, Integer&gt;() {\n          @Override\n          public Integer apply(String s) {\n            return s.length();\n          }\n        })\n        .filter(new Predicate&lt;Integer&gt;() {\n          @Override\n          public boolean test(Integer l) {\n            return l &lt;= 3;\n          }\n        })\n        .max(new Comparator&lt;Integer&gt;() {\n          @Override\n          public int compare(Integer o1, Integer o2) {\n            return o1 - o2;\n          }\n        });\n</code></pre><p><strong>最后，我们来看下函数接口。</strong></p><p>实际上，上面一段代码中的Function、Predicate、Comparator都是函数接口。我们知道，C语言支持函数指针，它可以把函数直接当变量来使用。但是，Java没有函数指针这样的语法。所以，它通过函数接口，将函数包裹在接口中，当作变量来使用。</p><p>实际上，函数接口就是接口。不过，它也有自己特别的地方，那就是要求只包含一个未实现的方法。因为只有这样，Lambda表达式才能明确知道匹配的是哪个接口。如果有两个未实现的方法，并且接口入参、返回值都一样，那Java在翻译Lambda表达式的时候，就不知道表达式对应哪个方法了。</p><p>我把Java提供的Function、Predicate这两个函数接口的源码，摘抄过来贴到了下面，你可以对照着它们，理解我刚刚对函数接口的讲解。</p><pre><code>@FunctionalInterface\npublic interface Function&lt;T, R&gt; {\n    R apply(T t);  // 只有这一个未实现的方法\n\n    default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) {\n        Objects.requireNonNull(before);\n        return (V v) -&gt; apply(before.apply(v));\n    }\n\n    default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) {\n        Objects.requireNonNull(after);\n        return (T t) -&gt; after.apply(apply(t));\n    }\n\n    static &lt;T&gt; Function&lt;T, T&gt; identity() {\n        return t -&gt; t;\n    }\n}\n\n@FunctionalInterface\npublic interface Predicate&lt;T&gt; {\n    boolean test(T t); // 只有这一个未实现的方法\n\n    default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) {\n        Objects.requireNonNull(other);\n        return (t) -&gt; test(t) &amp;&amp; other.test(t);\n    }\n\n    default Predicate&lt;T&gt; negate() {\n        return (t) -&gt; !test(t);\n    }\n\n    default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) {\n        Objects.requireNonNull(other);\n        return (t) -&gt; test(t) || other.test(t);\n    }\n\n    static &lt;T&gt; Predicate&lt;T&gt; isEqual(Object targetRef) {\n        return (null == targetRef)\n                ? Objects::isNull\n                : object -&gt; targetRef.equals(object);\n    }\n}\n</code></pre><p>以上讲的就是Java对函数式编程的语法支持，我想，最开始给到的那个函数式编程的例子，现在你应该能轻松看懂了吧？</p><h2>Guava对函数式编程的增强</h2><p>如果你是Google Guava的设计者，对于Java函数式编程，Google Guava还能做些什么呢？</p><p>颠覆式创新是很难的。不过我们可以进行一些补充，一方面，可以增加Stream类上的操作（类似map、filter、max这样的终止操作和中间操作），另一方面，也可以增加更多的函数接口（类似Function、Predicate这样的函数接口）。实际上，我们还可以设计一些类似Stream类的新的支持级联操作的类。这样，使用Java配合Guava进行函数式编程会更加方便。</p><p>但是，跟我们预期的相反，Google Guava并没有提供太多函数式编程的支持，仅仅封装了几个遍历集合操作的接口，代码如下所示：</p><pre><code>Iterables.transform(Iterable, Function);\nIterators.transform(Iterator, Function);\nCollections.transfrom(Collection, Function);\nLists.transform(List, Function);\nMaps.transformValues(Map, Function);\nMultimaps.transformValues(Mltimap, Function);\n...\nIterables.filter(Iterable, Predicate);\nIterators.filter(Iterator, Predicate);\nCollections2.filter(Collection, Predicate);\n...\n</code></pre><p>从Google Guava的GitHub Wiki中，我们发现，Google对于函数式编程的使用还是很谨慎的，认为过度地使用函数式编程，会导致代码可读性变差，强调不要滥用。这跟我前面对函数式编程的观点是一致的。所以，在函数式编程方面，Google Guava并没有提供太多的支持。</p><p>之所以对遍历集合操作做了优化，主要是因为函数式编程一个重要的应用场景就是遍历集合。如果不使用函数式编程，我们只能for循环，一个一个的处理集合中的数据。使用函数式编程，可以大大简化遍历集合操作的代码编写，一行代码就能搞定，而且在可读性方面也没有太大损失。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>今天，我们讲了一下三大编程范式中的最后一个，函数式编程。尽管越来越多的编程语言开始支持函数式编程，但我个人觉得，它只能是其他编程范式的补充，用在一些特殊的领域发挥它的特殊作用，没法完全替代面向对象、面向过程编程范式。</p><p>关于什么是函数式编程，实际上不是很好理解。函数式编程中的“函数”，并不是指我们编程语言中的“函数”概念，而是数学中的“函数”或者“表达式”概念。函数式编程认为，程序可以用一系列数学函数或表达式的组合来表示。</p><p>具体到编程实现，函数式编程以无状态函数作为组织代码的单元。函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样。</p><p>具体到Java语言，它提供了三个语法机制来支持函数式编程。它们分别是Stream类、Lambda表达式和函数接口。Google Guava对函数式编程的一个重要应用场景，遍历集合，做了优化，但并没有太多的支持，并且我们强调，不要为了节省代码行数，滥用函数式编程，导致代码可读性变差。</p><h2>课堂讨论</h2><p>你可以说一说函数式编程的优点和缺点，以及你对函数式编程的看法。你觉得它能否替代面向对象编程，成为最主流的编程范式？</p><p>欢迎留言和我分享你的想法，如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"82 | 开源实战三（中）：剖析Google Guava中用到的几种设计模式","id":234758},"right":{"article_title":"84 | 开源实战四（上）：剖析Spring框架中蕴含的经典设计思想或原则","id":236935}},"comments":[{"had_liked":false,"id":216651,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1589301518,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"237812502798","product_id":100039001,"comment_content":"我对函数式编程的看法有几点<br>1. 在集合操作方面非常强大，集合遍历、过滤、转换、分组等等，我现在在工作中经常用<br>2. 函数式编程的语法对于设计模式来说是一种具体的实现方式，可能代码行数会比较少，但是思路是一样的，所以最重要的还是前面一直强调的设计原则<br>3. 函数式编程最大的两个特点：函数是一等公民、函数没有副作用、强调对象的不变性，对于我们在面向对象编程时处理并发问题有指导意义","like_count":56},{"had_liked":false,"id":216743,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1589335067,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"126143386651","product_id":100039001,"comment_content":"视角不同：<br>FP：数据围绕操作<br>OOP：操作围绕数据","like_count":30,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510160,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216840,"user_name":"bboy孙晨杰","can_delete":false,"product_type":"c1","uid":1178683,"ip_address":"","ucode":"D7389FB3368749","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/3b/c6b5b64f.jpg","comment_is_top":false,"comment_ctime":1589353503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44539026463","product_id":100039001,"comment_content":"复杂的业务逻辑我一般不会用函数式编程，可读性差，也不方便debug。。。发这条评论的主要目的是庆祝自己这几个月落下的进度终于补上了，哈哈","like_count":11},{"had_liked":false,"id":216732,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1589333884,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"44539006844","product_id":100039001,"comment_content":"我觉得函数式编程并不能代替面向对象语言，并不是适合除了数学计算分析等大部分的场景，从系统设计的角度来讲，使用面向对象设计还是更亦理解的方式。<br>函数式编程的优点：<br>1. 代码量少，比如文中的例子就是最直接的展示。<br>2. 因为都是“无状态函数”，固定输入产生固定输出，那么单元测试和调试都很简单<br>3. 同样是因为无状态，所以适合并发编程，不用担心兵法安全问题。<br>缺点：<br>1. 滥用函数式编程会导致代码难以理解，比如一大型项目有大量高阶函数混着变量，开发人员随意把函数当作参数和返回值，项目会变得很难维护。<br>2.函数式编程会导致大量递归，算法效率太低。<br>","like_count":11},{"had_liked":false,"id":216728,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1589333350,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"35949071718","product_id":100039001,"comment_content":"Java8的函数式编程太香了，点点点很爽。","like_count":9,"discussions":[{"author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309571,"discussion_content":"那是你还没用scala ，Java函数式确实简化了许多操作，但跟scala函数式比起来，写起来就跟个辣鸡差不多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601350534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309639,"discussion_content":"每个语言都有优点和缺点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601373633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309571,"ip_address":""},"score":309639,"extra":""}]}]},{"had_liked":false,"id":216806,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1589347504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31654118576","product_id":100039001,"comment_content":"a.优缺点：<br>优<br>1.代码量少（可读性相对就高，开发成本相对就低）<br>2.无状态，纯函数（幂等）。（可测试性就好，对并发编程友好，对迁移serverless友好）<br><br>1.每个函数返回的都是一个新对象。（额外的资源成本）<br><br>2.设计难度高。（设计一个恰到好处的领域对象难，设计一个符合“函数编程思想”的表达式也难）。难就意味着成本，意味着不好推广普及。<br><br>缺<br>3.相较于面向对象对业务流程的抽象。函数表达式更像是对业务流程做重定义。 相对更不易于理解。<br><br>b.能取代面向对象吗？<br><br>不能。与文中相驳的点是，我认为函数式编程可读性其实更好（代码量少），可维护性也更好（可测试性）。但是函数式编程的代码和具体的业务流程间的映射关系，更难理解。这会导致要设计出一个完美满足业务流程的代码会比较难，需要有更多的转换和考量。而面向对象在构建这种业务模型上，只是对原业务流程做抽象，相对更好理解。其传承能力，以及跨部门达成共识的能力都远优于函数式编程。<br><br>我看好函数式编程，在无状态的计算领域，和一些高并发场景，它能发挥出很优益的价值。只是取代面向对象这种就有点过了。目前来看各有其应用场景，按需选择是挺好的方式，不必执着于谁替换谁。毕竟从结果来看，就连流程式编程，也不是面向对象能完美替代的。各有应用场景，关键在权衡。","like_count":8},{"had_liked":false,"id":217069,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1589416260,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23064252740","product_id":100039001,"comment_content":"最爽莫过于集合遍历。简单集合遍历 一行就可以搞定。太多for看这难受。","like_count":6},{"had_liked":false,"id":244262,"user_name":"zj坚果","can_delete":false,"product_type":"c1","uid":1070601,"ip_address":"","ucode":"D6E787FF032D7B","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/09/4a9d4a35.jpg","comment_is_top":false,"comment_ctime":1598444795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10188379387","product_id":100039001,"comment_content":"这么看来，一直使用C#的linq就是函数式编程了。感觉在一些集合业务处理中非常好用，能写出可读性和简洁度都很好的代码。","like_count":3},{"had_liked":false,"id":216935,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1589371676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10179306268","product_id":100039001,"comment_content":"Java的函数式编程有一定的学习成本，而且由于强调不可变性，导致必须要求外部参数为final，这种情况下就老老实实的for循环；另外就是语法糖真香，相比原生的Stream，Flux更香","like_count":3},{"had_liked":false,"id":216781,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1589341281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10179275873","product_id":100039001,"comment_content":"优点:降低代码编写,提高编写效率,更加抽象.如果编写的好,复用性也很不错(因为无状态)<br>缺点:入门门槛不低,对于一些业务复杂的逻辑,有心而无力","like_count":3},{"had_liked":false,"id":216745,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1589335249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10179269841","product_id":100039001,"comment_content":"函数编程在Android开发领域已经是家常便饭了. <br>无论是RxJava还是LiveData都应用了函数式编程思想.<br><br>在MVVM架构中, 应用函数编程可以做到层之间的解耦彻底, 链式调用很好的体现编程优雅性.<br><br>函数式编程缺点是学习成本较高. 从面向对象思想向面向函数思想的转变需要付出一定的学习精力.<br>如果团队开发水平参差不齐还是慎用, 可能导致你的同事无法维护你写的代码.<br><br>函数式编程另一优点是纯函数思想与不可变(Immutable)思想隔绝了恼人的局部变量, 全局变量等对流程的影响.<br><br>另最近我在codewar上刷题的时候, 发现函数编程相比传统面向对象对数据的处理确实更加简洁优雅, 相信经常刷题的同学会有相同的感受.","like_count":2},{"had_liked":false,"id":216680,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1589327596,"is_pvip":false,"replies":[{"id":"80479","content":"两个层面的东西，不怎么相关。只能说函数式编程符合幂等性。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1589525125,"ip_address":"","comment_id":216680,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10179262188","product_id":100039001,"comment_content":"函数式编程是无状态的，它和接口的幂等性设计有什么区别呢？是不是接口的幂等性设计可以用函数式编程来实现呢？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494908,"discussion_content":"两个层面的东西，不怎么相关。只能说函数式编程符合幂等性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589525125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264783,"discussion_content":"无状态的接口自然是幂等的。但幂等的接口不一定是无状态的。 函数式编程分成语法和思想。java里面的语法是无法保证无状态的，自然也就无法保证幂等性。函数式的思想要求要设计成无状态的函数，那么只要你设计成了无状态的函数，那么自然也就是幂等的了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589347880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264644,"discussion_content":"java函数式编程用到的接口都是满足幂等性的,我的理解是接口幂等性是函数式编程无状态的基石","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589340582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340425,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","comment_is_top":false,"comment_ctime":1648807523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5943774819","product_id":100039001,"comment_content":"这是迄今为止我看到过的对函数式编程解释的最好的文章，👍","like_count":1},{"had_liked":false,"id":216726,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1589333089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884300385","product_id":100039001,"comment_content":"所谓的面向过程，面向对象，函数式的编程范式，我们都是应该根据场景进行选择的。例如，如果是大量的异步编程个人觉得使用函数式编程范式相对比较合理。面向对象的话，对于一些业务非常复杂的系统来说更加合适，面向过程本人没有做过相应经验，就不胡扯了。","like_count":1},{"had_liked":false,"id":216693,"user_name":"mooneal","can_delete":false,"product_type":"c1","uid":1177114,"ip_address":"","ucode":"7E43AD3661BBFD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/1F8TyS4mNfhRib2nHvLZ1azGyYQj2fjr9G1RFkOINo2Mx1JYHLN7FEU9FGg5ibictp1QAQeNUFZlTVLdb8QgkJnow/132","comment_is_top":false,"comment_ctime":1589329331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884296627","product_id":100039001,"comment_content":"函数式编程，相对于面向对象以及面向过程，最大的优点就是无状态了，就像数学表达式，给定输入一定有一个唯一的输出映射。所以，函数式编程又可以看作是对一类数据到另一类数据的映射。","like_count":1},{"had_liked":false,"id":343916,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1651117699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651117699","product_id":100039001,"comment_content":"优点：代码简洁，编写快速<br>缺点：相对java只是语法糖，最终还是会转成对应的代码。需要运用反射，性能相对较弱","like_count":0},{"had_liked":false,"id":319443,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1635816978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635816978","product_id":100039001,"comment_content":"本人使用过scala进行过flink流式计算的开发，确实如争哥所言，很简洁。但底层还是调用大量java代码，本质都是JVM系列语言，所以也是一种语法糖。如果使用时间不长，有些语法晦涩难懂，容易出错，排查问题不容易。 正如硬币的两面，不管哪种语言，都很难兼顾各种优点，在未来很长时间，我觉得都会有多种类型的语言，只是随着社会需要，有些可能暂时称为主流，但是随着时间推移，其他的又会后来者居上，这也是一个动态变化的过程，正如争哥所言，重要的不是形式本身，而是掌握解决问题的办法，语言只是工具箱里的一个工具，不好用就换一个","like_count":0},{"had_liked":false,"id":307355,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1629040716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629040716","product_id":100039001,"comment_content":"对数据集合操作支持比较好，但是可读性比较差","like_count":0},{"had_liked":false,"id":302259,"user_name":"taku","can_delete":false,"product_type":"c1","uid":2068684,"ip_address":"","ucode":"B22DA9A4A9DC91","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotIianb3beTzsGIte6BZxlIhEwc2ryrNBGxZy8ibKbfibVJyUS8d3ZxybAdfJwHPm13ydPC4VJP7Lbw/132","comment_is_top":false,"comment_ctime":1626148510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626148510","product_id":100039001,"comment_content":"滥用stream将导致代码阅读困难，对新人极度不友好，慎用~","like_count":0},{"had_liked":false,"id":299541,"user_name":"隔壁老李","can_delete":false,"product_type":"c1","uid":1145294,"ip_address":"","ucode":"1069E913FF69D9","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/ce/89d87a1c.jpg","comment_is_top":false,"comment_ctime":1624698549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624698549","product_id":100039001,"comment_content":"还是要辩证的看待函数式编程。<br>比如在Java项目中使用Lambda表达式后，很多现存的略显臃肿的面向对象设计模式能够用更精简的方式实现了。不仅没有使代码可读性变差，反而更加清晰明了，可读性，扩展性更高。","like_count":0},{"had_liked":false,"id":297813,"user_name":"江南一笑","can_delete":false,"product_type":"c1","uid":2234620,"ip_address":"","ucode":"E38938A1178827","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","comment_is_top":false,"comment_ctime":1623783577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623783577","product_id":100039001,"comment_content":"缺点就是方法不能复用，面向对象的好处它都没有，更像是面向过程。而且对于很复杂的方法，可能用函数式编程就不容易了。","like_count":0},{"had_liked":false,"id":292827,"user_name":"yang","can_delete":false,"product_type":"c1","uid":1940562,"ip_address":"","ucode":"67C86E09BA6E4B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9c/52/dc770378.jpg","comment_is_top":false,"comment_ctime":1620996638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620996638","product_id":100039001,"comment_content":"老师，flink是java函数式编程的吗？","like_count":0},{"had_liked":false,"id":287433,"user_name":"Geek_86b838","can_delete":false,"product_type":"c1","uid":2313645,"ip_address":"","ucode":"8E55B4A01CBCC0","user_header":"","comment_is_top":false,"comment_ctime":1617949384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617949384","product_id":100039001,"comment_content":"java 1.8 之后也提供了 stream处理，请问下大家这两者有什么联系吗","like_count":0},{"had_liked":false,"id":286370,"user_name":"当你的世界里有风吹过","can_delete":false,"product_type":"c1","uid":2051946,"ip_address":"","ucode":"42712891366309","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4f/6a/0a6b437e.jpg","comment_is_top":false,"comment_ctime":1617270402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617270402","product_id":100039001,"comment_content":"函数式编程的优点：<br>1. 使代码变得简单，使用一个行代码即可表达一个复杂得逻辑<br>2. 可以延后执行，把执行得动作进行存储，最后统一触发<br>缺点：<br>1. 理解起来相对困难<br>2. 如果出现bug， 不方便调试<br><br>对于是否能替代面向对象？ 这个使不可能的，每一种编程方式都有优缺点，没有好与坏，对与错，只是工具而已，使用的时候面对不同的业务场景，应该择优选择，相互配合，取长补短，方式代码编写之道。<br>","like_count":0},{"had_liked":false,"id":283571,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1615821309,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615821309","product_id":100039001,"comment_content":"优点：<br>1.函数式编程使代码更简洁 Stream操作集合很强大 Optional判空不用写很多行<br>缺点：<br>1.函数式编程传入的参数必须是final禁止改变的<br>2.团队中不熟悉的小伙伴看很多的函数式会懵逼","like_count":0},{"had_liked":false,"id":278079,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1612752171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612752171","product_id":100039001,"comment_content":"函数式编程在集合对象的操作上确实能简化代码，且可读性也不会太差。但很多人因为这一个优点就大肆宣扬，我觉得主要还是因为懒，有些人觉得只要能（自己）省事的肯定支持，这本身就缺乏工匠精神。我觉得写代码就是是为他人、为日后阅读及维护的人服务，自己只是写一遍，显示地写个函数对象能累到哪里去，但后面读的人可能会有几十甚至上百次。","like_count":0},{"had_liked":false,"id":276467,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1611941059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611941059","product_id":100039001,"comment_content":"最近工作中一直用，斯库一。","like_count":0},{"had_liked":false,"id":271991,"user_name":"Harlan","can_delete":false,"product_type":"c1","uid":2134882,"ip_address":"","ucode":"F43595A0A00B19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","comment_is_top":false,"comment_ctime":1609903535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609903535","product_id":100039001,"comment_content":"说说我对函数式编程的理解：<br>1.首先是体验感，真的很香，会让你在任何能用的地方都想去用它<br>2.再说到编程效率，能精简代码，减少代码量，自然也提高开发效率<br>3.再说下可读性，个人感觉函数式编程，应该是比较符合人的逻辑思维（逻辑是跟人的思维是一致的），使用得当应该是能增加可读性的（例如java stream就可以明显看到分而治之的思想，各块的处理都比较内聚）<br><br>","like_count":0},{"had_liked":false,"id":237197,"user_name":"某小浩","can_delete":false,"product_type":"c1","uid":1511556,"ip_address":"","ucode":"F0A65F516B17BB","user_header":"","comment_is_top":false,"comment_ctime":1595733968,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595733968","product_id":100039001,"comment_content":"Javascript中，引入箭头函数（函数式编程）后，配合数组原型对数组操作是真的很便利，当然Javascript的箭头函数还有一个额外用途就是对于this引用上下文的改变，总之前端领域个人还是很喜欢函数式写法的","like_count":0},{"had_liked":false,"id":235820,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1595211359,"is_pvip":false,"replies":[{"id":"88030","content":"可以根据入参和返回值来区分，不过这样设计起来就比较麻烦了，万一有入参和返回值一样的两个函数咋办呢，你说是吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1596113082,"ip_address":"","comment_id":235820,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595211359","product_id":100039001,"comment_content":"<br>如果有两个未实现方法，参数返回值不一样呢，这种就可以了吧<br><br><br>实际上，函数接口就是接口。不过，它也有自己特别的地方，那就是要求只包含一个未实现的方法。因为只有这样，Lambda 表达式才能明确知道匹配的是哪个接口。如果有两个未实现的方法，并且接口入参、返回值都一样，那 Java 在翻译 Lambda 表达式的时候，就不知道表达式对应哪个方法了。","like_count":0},{"had_liked":false,"id":235566,"user_name":"melo","can_delete":false,"product_type":"c1","uid":1030449,"ip_address":"","ucode":"BF381B18E75867","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b9/31/636e9007.jpg","comment_is_top":false,"comment_ctime":1595087642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595087642","product_id":100039001,"comment_content":"stream类似管道这种概念","like_count":0},{"had_liked":false,"id":233458,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1594339279,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1594339279","product_id":100039001,"comment_content":"1.确实在某些没有业务含义只是做计算的场景下可读性要比面向对象&#47;过程要好<br>2.在涉及到复杂业务场景中使用会使代码可读性降低，调试也是个问题<br>3.毕竟是提供的伪函数式，底层也是接口来实现，相对于正常的面向对象的执行效率，函数式要低不少，尤其是对性能要求比较高的场景，尽量需要避免过度使用","like_count":0},{"had_liked":false,"id":222987,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1590977766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590977766","product_id":100039001,"comment_content":"老师讲的通俗易懂。","like_count":0},{"had_liked":false,"id":222733,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1590900807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590900807","product_id":100039001,"comment_content":"lambda 是 Java8 中的耀眼特性，具有很强的表达能力，但又因为 lambda 能做的事情太多，导致很多有技术情结的开发者滥用而大大降低了其可读性，最终函数式编程适得其反。所以，准备用 lambda 进行开发时，不妨先学习 如何正确使用 lambda 及其实现原理。<br><br>优点是直观，简洁且表达能力强<br>缺点是容易被滥用","like_count":0},{"had_liked":false,"id":222532,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1590829532,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590829532","product_id":100039001,"comment_content":"还是数学领域里面比较适合用函数式编程","like_count":0},{"had_liked":false,"id":221019,"user_name":"天空只能仰望？","can_delete":false,"product_type":"c1","uid":1102357,"ip_address":"","ucode":"D87BF6A57DAB42","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/15/4d43d05a.jpg","comment_is_top":false,"comment_ctime":1590381456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590381456","product_id":100039001,"comment_content":"个人觉得函数式编程在数据处理，集合遍历比较方便，其它没有怎么使用","like_count":0},{"had_liked":false,"id":217428,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1589504246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589504246","product_id":100039001,"comment_content":"做个笔记。<br>函数式编程在工作中基本很少用。<br>1.jdk 开发环境没用 1.8 。(硬伤)<br>2.使用后可读性较差。(同事读不懂，有学习成本)<br>后期考虑用它的点:<br>1.遍历集合，集合过滤及处理(保证可读性)<br>2.记得是stream对大批量数据处理性能会好些(好像是这样,不对请指正)","like_count":0},{"had_liked":false,"id":216775,"user_name":"，","can_delete":false,"product_type":"c1","uid":1701867,"ip_address":"","ucode":"A5543C8DFEB198","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","comment_is_top":false,"comment_ctime":1589340454,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589340454","product_id":100039001,"comment_content":"函数式编程在做数据的筛选,过滤,转换,搜索,存放上,因为流式api的原因,可以提高可读性和可维护性<br>因为在处理时不会改变输入值,因此无副作用,无状态,在做并发编程时具备一定优势<br>同时由于自身特性,做并行处理时具备一定优势<br>不过以上均是建立有良好的函数式编程规范的情况下,假设一段代码里,有stream,有foreach迭代,有方法引用,有lambda表达式,函数还特别长,那么可读性,可维护性势必受到影响<br>假设一段代码里同时有迭代和stream,那么可能会有数据的改变,有状态有副作用,影响并发操作<br>假设一段stream代码里有limit,有使用Stream,iterate等除了arraylist,hashmap的非标准容器,使容器不能被很好的分割为多个任意大小的子范围,那么并行操作也会受到影响<br>同时相当多的业务操作,不能用stream来表示,这样看来函数式编程有一定优势,但也有自己的局限性","like_count":0}]}