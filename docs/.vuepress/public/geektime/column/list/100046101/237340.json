{"id":237340,"title":"加餐 | ZAB协议（二）：如何从故障中恢复？","content":"<p>你好，我是韩健。</p><p>我们上一讲提到了ZAB的领导者选举，在我看来，它只是选举了一个适合当领导者的节点，然后把这个节点的状态设置成LEADING状态。此时，这个节点还不能作为主节点处理写请求，也不能使用领导职能（比如，它没办法阻止其他“领导者”广播提案）。也就是说，集群还没有从故障中恢复过来，而成员发现和数据同步会解决这个问题。</p><p>总的来说，成员发现和数据同步不仅让新领导者正式成为领导者，确立了它的领导关系，还解决了各副本的数据冲突，实现了数据副本的一致性。这样一来，集群就能正常处理写请求了。在这句话里：</p><ul>\n<li>确立领导关系，也就是在成员发现（DISCOVERY）阶段，领导者和大多数跟随者建立连接，并再次确认各节点对自己当选领导者没有异议，确立自己的领导关系；</li>\n<li>处理冲突数据，也就是在数据同步（SYNCHRONIZATION）阶段，领导者以自己的数据为准，解决各节点数据副本的不一致。</li>\n</ul><p>对你来说，理解这两点，可以更好地理解ZooKeeper怎么恢复故障，以及当主节点崩溃了，哪些数据会丢失，哪些不会，以及背后的原因。也就是说，你能更加深刻地理解ZooKeeper的节点故障容错能力。</p><p>那么说了这么多，集群具体是怎么从故障中恢复过来的呢？带着这个问题，我们进入今天的学习。</p><!-- [[[read_end]]] --><h2>ZAB集群怎么从故障中恢复过来？</h2><p>如果我们想把ZAB集群恢复到正常状态，那么新领导者就要确立自己的领导关系，成为唯一有效的领导者，然后作为主节点“领导”各备份节点一起处理读写请求。</p><h3>如何确立领导关系？</h3><p>那么通过开篇，你可以知道，选举出的领导者，是在成员发现阶段确立领导关系的。</p><p>在当选后，领导者会递增自己的任期编号，并基于任期编号值的大小，来和跟随者协商，最终建立领导关系。<strong>具体说的话，就是跟随者会选择任期编号值最大的节点，作为自己的领导者，而被大多数节点认同的领导者，将成为真正的领导者。</strong></p><p>我举个例子，具体帮你理解一下。</p><p>假设一个ZooKeeper集群，由节点A、B、C组成。其中，领导者A已经宕机，C是新选出来的领导者，B是新的跟随者（为了方便演示，假设B、C已提交提案的事务标识符最大值分别是&lt;1, 10&gt;和&lt;1, 11&gt;，其中1是任期编号，10、11是事务标识符中的计数器值，A宕机前的任期编号也是1）。那么B、C如何协商建立领导关系呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/34/9a31fd8f5d888abfb014b07408c4be34.jpg?wh=1142*596\" alt=\"\" title=\"图1\"></p><p>首先，B、C会把自己的ZAB状态设置为成员发现（DISCOVERY），这就表明，选举（ELECTION）阶段结束了，进入了下一个阶段：</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/8c/5c933b8033238c2f58ea19c39bf12f8c.jpg?wh=1142*564\" alt=\"\" title=\"图2\"></p><p>在这里，我想补充一下，ZAB定义了4种状态，来标识节点的运行状态。</p><ul>\n<li>ELECTION（选举状态）：表明节点在进行领导者选举；</li>\n<li>DISCOVERY（成员发现状态）：表明节点在协商沟通领导者的合法性；</li>\n<li>SYNCHRONIZATION（数据同步状态）：表明集群的各节点以领导者的数据为准，修复数据副本的一致性；</li>\n<li>BROADCAST（广播状态）：表明集群各节点在正常处理写请求。</li>\n</ul><p>关于这4种状态，你知道它们是做什么的就可以了。我就强调一点，<strong>只有当集群大多数节点处于广播状态的时候，集群才能提交提案。</strong></p><p>接下来，B会主动联系C，发送给它包含自己接收过的领导者任期编号最大值（也就是前领导者A的任期编号，1）的FOLLOWINFO消息。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/56/f5209e12171cffbe1ed4a9b4835eca56.jpg?wh=1142*556\" alt=\"\" title=\"图3\"></p><p>当C接收来自B的信息时，它会将包含自己事务标识符最大值的LEADINFO消息发给跟随者。</p><p>你要注意，领导者进入到成员发现阶段后，会对任期编号加1，创建新的任期编号，然后基于新任期编号，创建新的事务标识符（也就是&lt;2, 0&gt;）。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/15/f54d28ba395fa1fd8bfa1f95e2574815.jpg?wh=1142*565\" alt=\"\" title=\"图4\"></p><p>当接收到领导者的响应后，跟随者会判断领导者的任期编号是否最新，如果不是，就发起新的选举；如果是，跟随者返回ACKEPOCH消息给领导者。在这里，C的任期编号（也就是2）大于B接受过的其他领导任期编号（也就是旧领导者A的任期编号，1），所以B返回确认响应给C，并设置ZAB状态为数据同步。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/79/ef46c226ad137738100c9764dff96879.jpg?wh=1142*543\" alt=\"\" title=\"图5\"></p><p>最后，当领导者接收到来自大多数节点的ACKEPOCH消息时，就设置ZAB状态为数据同步。在这里，C接收到了B的消息，再加上C自己，就是大多数了，所以，在接收到来自B的消息后，C设置ZAB状态为数据同步。</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/41/0f7569a56088a5df3383b64313d55541.jpg?wh=1142*544\" alt=\"\" title=\"图6\"></p><p><strong>现在，ZAB在成员发现阶段确立了领导者的领导关系，之后领导者就可以行使领导职能了。</strong>而这时它首先要解决的就是数据冲突，实现各节点数据的一致性，那么它是怎么做的呢？</p><h3>如何处理冲突数据？</h3><p>当进入到数据同步状态后，领导者会根据跟随者的事务标识符最大值，判断以哪种方式处理不一致数据（有DIFF、TRUNC、SNAP这3种方式，后面我会具体说一说）。</p><p>因为C已提交提案的事务标识符最大值（也就是&lt;1, 11&gt;）大于B已提交提案的事务标识符最大值（也就是&lt;1, 10&gt;），所以C会用DIFF的方式修复数据副本的不一致，并返回差异数据（也就是事务标识符为&lt;1, 11&gt;的提案）和NEWLEADER消息给B。</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/7a/aa434b6ef27b7e702857d796ae53257a.jpg?wh=1142*534\" alt=\"\" title=\"图7\"></p><p><strong>在这里，我想强调一点：B已提交提案的最大值，也是它最新提案的最大值。</strong>因为在ZooKeeper实现中，节点退出跟随者状态时（也就是在进入选举前），所有未提交的提案都会被提交。这是ZooKeeper的设计，你知道有这么个事就可以了。</p><p>然后，B修复不一致数据，返回NEWLEADER消息的确认响应给领导者。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/06/87308ab8b9ba6eabc9217d0eeba03d06.jpg?wh=1142*509\" alt=\"\" title=\"图8\"></p><p>接着，当领导者接收到来自大多数节点的NEWLEADER消息的确认响应，将设置ZAB状态为广播。在这里，C接收到B的确认响应，加上C自己，就是大多数确认了。所以，在接收到来自B的确认响应后，C设置自己的ZAB状态为广播，并发送UPTODATE消息给所有跟随者，通知它们数据同步已经完成了。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/26/a53e5ea1bbc85f2d80e766bd85382d26.jpg?wh=1142*537\" alt=\"\" title=\"图9\"></p><p>最后当B接收到UPTODATE消息时，它就知道数据同步完成了，就设置ZAB状态为广播。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/65/42d2162cb833a3b50fd44ba00556ed65.jpg?wh=1142*535\" alt=\"\" title=\"图10\"></p><p>这个时候，集群就可以正常处理写请求了。</p><p>现在，我已经讲完了故障恢复的原理，那接下来，我们就来看一看ZooKeeper到底是怎么实现的吧。</p><h2>ZooKeeper如何恢复故障？</h2><h3>成员发现</h3><p>成员发现是通过跟随者和领导者交互来完成的，<strong>目标是确保大多数节点对领导者的领导关系没有异议，也就是确立领导者的领导地位。</strong></p><p>大概的实现流程，就像下面这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/90/c6/900afb50caffdee9d0fa46cc121893c6.jpg?wh=1142*865\" alt=\"\" title=\"图11\"></p><p>为帮你更好地理解这个流程，我们来走一遍核心代码的流程，加深下印象。</p><p>第一步，领导者选举结束，节点进入跟随者状态或者领导者状态后，它们会分别设置ZAB状态为成员发现。具体来说就是：</p><ul>\n<li>跟随者会进入到Follower.followLeader()函数中执行，设置ZAB状态为成员发现。</li>\n</ul><pre><code>self.setZabState(QuorumPeer.ZabState.DISCOVERY);\n</code></pre><ul>\n<li>领导者会进入到Leader.lead()函数中执行，并设置ZAB状态为成员发现。</li>\n</ul><pre><code>self.setZabState(QuorumPeer.ZabState.DISCOVERY);\n\n</code></pre><p>第二，跟随者会主动联系领导者，发送自己已接受的领导者任期编号最大值（也就是acceptedEpoch）的FOLLOWINFO消息给领导者。</p><pre><code>// 跟领导者建立网络连接\nconnectToLeader(leaderServer.addr, leaderServer.hostname);\nconnectionTime = System.currentTimeMillis();\n// 向领导者报道，并获取领导者的事务标识符最大值\nlong newEpochZxid = registerWithLeader(Leader.FOLLOWERINFO);\n</code></pre><p>第三，接收到来自跟随者的FOLLOWINFO消息后，在LearnerHandler.run()函数中，领导者将创建包含自己事务标识符最大值的LEADINFO消息，并响应给跟随者。</p><pre><code>// 创建LEADINFO消息\nQuorumPacket newEpochPacket = new \nQuorumPacket(Leader.LEADERINFO, newLeaderZxid, ver, null);\n// 发送LEADINFO消息给跟随者\noa.writeRecord(newEpochPacket, &quot;packet&quot;);\n</code></pre><p>第四，接收到来自领导者的LEADINFO消息后，跟随者会基于领导者的任期编号，判断领导者是否合法，如果领导者不合法，跟随者发起新的选举，如果领导者合法，响应ACKEPOCH消息给领导者。</p><pre><code>// 创建ACKEPOCH消息，包含已提交提案的事务标识符最大值\nQuorumPacket ackNewEpoch = new QuorumPacket(Leader.ACKEPOCH, lastLoggedZxid, epochBytes, null);\n// 响应ACKEPOCH消息给领导者\nwritePacket(ackNewEpoch, true);\n</code></pre><p>第五，跟随者设置ZAB状态为数据同步。</p><pre><code>self.setZabState(QuorumPeer.ZabState.SYNCHRONIZATION);\n</code></pre><p>第六，需要你注意的是，在LearnerHandler.run()函数中（以及Leader.lead()函数），领导者会调用waitForEpochAck()函数，来阻塞和等待来自大多数节点的ACKEPOCH消息。</p><pre><code>ss = new StateSummary(bbepoch.getInt(), ackEpochPacket.getZxid());\nlearnerMaster.waitForEpochAck(this.getSid(), ss);\n</code></pre><p>第七，当领导者接收到来自大多数节点的ACKEPOCH消息后，在Leader.lead()函数中，领导者将设置ZAB状态为数据同步。</p><pre><code>self.setZabState(QuorumPeer.ZabState.SYNCHRONIZATION);\n</code></pre><p>这样，ZooKeeper就实现了成员发现，各节点就领导者的领导关系达成了共识。</p><p>当跟随者和领导者设置ZAB状态为数据同步，它们也就是进入了数据同步阶段，那在ZooKeeper中数据同步是如何实现的呢？</p><h3>数据同步</h3><p>数据同步也是通过跟随者和领导者交互来完成的，目标是确保跟随者节点上的数据与领导者节点上数据是一致的。大概的实现流程，如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/6e/44/6ea74f1a56a9fd0f39b82b25d2814c44.jpg?wh=1142*866\" alt=\"\" title=\"图12\"></p><p>为了方便你理解，咱们一起走一遍核心代码的流程，加深下印象。</p><p>第一，在LearnerHandler.run()函数中，领导者调用syncFollower()函数，根据跟随者的事务标识符值最大值，判断用哪种方式处理不一致数据，把已经提交提案和未提交提案都同步给跟随者：</p><pre><code>peerLastZxid = ss.getLastZxid();\nboolean needSnap = syncFollower(peerLastZxid, learnerMaster);\n</code></pre><p>在这里，需要你了解领导者向跟随者同步数据的三种方式（TRUNC、DIFF、SNAP），它们是什么含义呢？要想了解这部分内容，你首先要了解一下syncFollower()中，3个关键变量的含义。</p><ul>\n<li>peerLastZxid：跟随者节点上，提案的事务标识符最大值。</li>\n<li>maxCommittedLog、minCommittedLog：领导者节点内存队列中，已提交提案的事务标识符最大值和最小值。需要你注意的是，maxCommittedLog、minCommittedLog与ZooKeeper的设计有关。在ZooKeeper中，为了更高效地复制提案到跟随者上，领导者会将一定数量（默认值为500）的已提交提案放在内存队列里，而maxCommittedLog、minCommittedLog分别标识的是内存队列中，已提交提案的事务标识符最大值和最小值。</li>\n</ul><p>说完3个变量的含义，我来说说3种同步方式。</p><ul>\n<li>\n<p>TRUNC：当peerLastZxid大于maxCommittedLog时，领导者会通知跟随者丢弃超出的那部分提案。比如，如果跟随者的peerLastZxid为11，领导者的maxCommittedLog为10，那么领导者将通知跟随者丢弃事务标识符值为11的提案。</p>\n</li>\n<li>\n<p>DIFF：当peerLastZxid小于maxCommittedLog，但peerLastZxid大于minCommittedLog时，领导者会同步给跟随者缺失的已提交的提案，比如，如果跟随者的peerLastZxid为9，领导者的maxCommittedLog为10，minCommittedLog为9，那么领导者将同步事务标识符值为10的提案，给跟随者。</p>\n</li>\n<li>\n<p>SNAP：当peerLastZxid小于minCommittedLog时，也就是说，跟随者缺失的提案比较多，那么，领导者同步快照数据给跟随者，并直接覆盖跟随者本地的数据。</p>\n</li>\n</ul><p>在这里，我想补充一下，领导者先就已提交提案和跟随者达成一致，然后调用learnerMaster.startForwarding()，将未提交提案（如果有的话）也缓存在发送队列（queuedPackets），并最终复制给跟随者节点。也就是说，<strong>领导者以自己的数据为准，实现各节点数据副本的一致的。</strong></p><p>需要你注意的是，在syncFolower()中，领导者只是将需要发送的差异数据缓存在发送队列（queuedPackets），这个时候还没有发送。</p><p>第二，在LearnerHandler.run()函数中，领导者创建NEWLEADER消息，并缓存在发送队列中。</p><pre><code>// 创建NEWLEADER消息\nQuorumPacket newLeaderQP = new QuorumPacket(Leader.NEWLEADER, newLeaderZxid, learnerMaster.getQuorumVerifierBytes(), null);\n// 缓存NEWLEADER消息到发送队列中\nqueuedPackets.add(newLeaderQP);\n</code></pre><p>第三，在LearnerHandler.run()函数中，领导者调用startSendingPackets()函数，启动一个新线程，并将缓存的数据发送给跟随者。</p><pre><code>// 发送缓存队列中的数据\nstartSendingPackets();\n</code></pre><p>第四，跟随者调用syncWithLeader()函数，处理来自领导者的数据同步。</p><pre><code>// 处理数据同步\nsyncWithLeader(newEpochZxid);\n</code></pre><p>第五，在syncWithLeader()函数，跟随者接收到来自领导者的NEWLEADER消息后，返回确认响应给领导者。</p><pre><code>writePacket(new QuorumPacket(Leader.ACK, newLeaderZxid, null, null), true);\n</code></pre><p>第六，在LearnerHandler.run()函数中（以及Leader.lead()函数），领导者等待来自大多数节点的NEWLEADER消息的响应。</p><pre><code>learnerMaster.waitForNewLeaderAck(getSid(), qp.getZxid());\n</code></pre><p>第七，当领导者接收到来自大多数节点的NEWLEADER消息的响应时，在Leader.lead()函数中，领导者设置ZAB状态为广播状态。</p><pre><code>self.setZabState(QuorumPeer.ZabState.BROADCAST);\n</code></pre><p>并在LearnerHandler.run()中发送UPTODATE消息给所有跟随者，通知它们数据同步已完成了。</p><pre><code>queuedPackets.add(new QuorumPacket(Leader.UPTODATE, -1, null, null));\n</code></pre><p>第八，当跟随者接收到UPTODATE消息时，就知道自己修复完数据不一致了，可以处理写请求了，就设置ZAB状态为广播。</p><pre><code>// 数据同步完成后，也就是可以正常处理来自领导者的广播消息了，设置ZAB状态为广播\nself.setZabState(QuorumPeer.ZabState.BROADCAST);\n</code></pre><p>你看，这样就确保各节点数据的一致了，接下来，就可以以领导者为主，向其他节点广播消息了。</p><h2>内容小结</h2><p>本节课我主要带你了解了ZAB如何恢复故障，我希望你明确这样几个重点。</p><p>1.成员发现，是为了建立跟随者和领导者之间的领导者关系，并通过任期编号来确认这个领导者是否为最合适的领导者。</p><p>2.数据同步，是通过以领导者的数据为准的方式，来实现各节点数据副本的一致，需要你注意的是，基于“大多数”的提交原则和选举原则，能确保被复制到大多数节点并提交的提案，就不再改变。</p><p>在这里，我想特别强调一下，在ZooKeeper的代码实现中，处于提交（Committed）状态的提案是可能会改变的，为什么呢？</p><p>在ZooKeeper中，一个提案进入提交（Committed）状态，有两种方式：</p><ul>\n<li>\n<p>被复制到大多数节点上，被领导者提交或接收到来自领导者的提交消息（leader.COMMIT）而被提交。在这种状态下，提交的提案是不会改变的。</p>\n</li>\n<li>\n<p>另外，在ZooKeeper的设计中，在节点退出跟随者状态时（在follower.shutdown()函数中），会将所有本地未提交的提案都提交。需要你注意的是，此时提交的提案，可能并未被复制到大多数节点上，而且这种设计，就会导致ZooKeeper中出现，处于“提交”状态的提案可能会被删除（也就是接收到领导者的TRUNC消息而删除的提案）。</p>\n</li>\n</ul><p>更准确的说，<strong>在ZooKeeper中，被复制到大多数节点上的提案，最终会被提交，并不会再改变；而只在少数节点存在的提案，可能会被提交和不再改变，也可能会被删除。</strong>为了帮助你理解，我来举个具体的例子。</p><ul>\n<li>\n<p>如果写请求对应的提案“SET X = 1”已经复制到大多数节点上，那么它是最终会被提交，之后也不会再改变。也就是说，在没有新的X赋值操作的前提下，不管节点怎么崩溃、领导者如何变更，你查询到的X的值都为1。</p>\n</li>\n<li>\n<p>如果写请求对应的提案“SET X = 1”未被复制到大多数节点上，比如在领导者广播消息过程中，领导者崩溃了，那么，提案“SET X = 1”，可能被复制到大多数节点上，并提交和之后就不再改变，也可能会被删除。这个行为是未确定的，取决于新的领导者是否包含该提案。</p>\n</li>\n</ul><p>另外，我想补充下，在ZAB中，选举出了新的领导者后，该领导者不能立即处理写请求，还需要通过成员发现、数据同步2个阶段进行故障恢复。这是ZAB协议的设计决定的，不是所有的共识算法都必须这样，比如Raft选举出新的领导者后，领导者是可以立即处理写请求的。</p><p>最后，完成数据同步后，节点将进入广播状态，那ZAB是如何处理读写请求，又是如何广播消息的呢？下节课，我会重点带你了解这部分内容。</p><h2>课堂思考</h2><p>我提到在ZAB中，提案提交的大多数原则和领导者选举的大多数原则，确保了被复制到大多数节点的提案就不再改变了。那么你不妨思考和推演一下，这是为什么呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这节课让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"加餐 | ZAB协议（一）：主节点崩溃了，怎么办？","id":232412},"right":{"article_title":"加餐 | ZAB协议（三）：如何处理读写请求？","id":237950}},"comments":[{"had_liked":false,"id":219535,"user_name":"小波菜","can_delete":false,"product_type":"c1","uid":1938076,"ip_address":"","ucode":"14A53D3F2E13C2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/92/9c/1312b3ca.jpg","comment_is_top":false,"comment_ctime":1590037591,"is_pvip":false,"replies":[{"id":"86972","content":"加一颗星:)，问题1：新领导者不是所有节点中ZXID最大的节点，而是大多数节点中ZXID最大的节点，如果“set x = 1”只复制到少数节点上，ZAB的领导者选举规则，不能保证成为领导者的节点一定是这些“少数节点”。<br>问题2：对客户端而言，需要支持操作的冥等性，如果写入超时（即在指定时间内，服务器没有成功将指令复制到大多数节点上），重试就可以了。而操作的冥等性，能保证最后的结果是预期的结果（即X的值为1）。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595042439,"ip_address":"","comment_id":219535,"utype":1}],"discussion_count":2,"race_medal":0,"score":"66014547031","product_id":100046101,"comment_content":"“如果写请求对应的提案“SET X = 1”未被复制到大多数节点上，比如在领导者广播消息过程中，领导者崩溃了，那么，提案“SET X = 1”，可能被复制到大多数节点上，并提交和之后就不再改变，也可能会被删除。这个行为是未确定的，取决于新的领导者是否包含该提案。”<br>请教韩老师：<br>这边set x=1只复制到少数节点上，那么这些少数节点的zxid应该是最大，应该回成为新的leader，也就不会丢数据了啊？<br>然后这个问题又该如何避免呢？","like_count":16,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495844,"discussion_content":"加一颗星:)，问题1：新领导者不是所有节点中ZXID最大的节点，而是大多数节点中ZXID最大的节点，如果“set x = 1”只复制到少数节点上，ZAB的领导者选举规则，不能保证成为领导者的节点一定是这些“少数节点”。\n问题2：对客户端而言，需要支持操作的冥等性，如果写入超时（即在指定时间内，服务器没有成功将指令复制到大多数节点上），重试就可以了。而操作的冥等性，能保证最后的结果是预期的结果（即X的值为1）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595042439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1076487,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIKoEicqUZTJly55qoUXRmK4wia7YbnibsMncJaO6tKgKAQNJRfpMsibvfeiaukIibsCsuaic8QjQ3gOoTGA/132","nickname":"张可夫斯基","note":"","ucode":"3B8DF6D98583F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554415,"discussion_content":"为啥老是将幂(mi)等性写成冥(ming)等性。。是口音太重了吗。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646369741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218455,"user_name":"Tim","can_delete":false,"product_type":"c1","uid":1393323,"ip_address":"","ucode":"A3ECD9832D630D","user_header":"https://static001.geekbang.org/account/avatar/00/15/42/ab/75fb1cd6.jpg","comment_is_top":false,"comment_ctime":1589804123,"is_pvip":false,"replies":[{"id":"80773","content":"加一颗星:)，不会出现这种情况，ZAB能保证提案的顺序性。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589822456,"ip_address":"","comment_id":218455,"utype":1}],"discussion_count":5,"race_medal":0,"score":"31654575195","product_id":100046101,"comment_content":"有个问题请教下韩老师，在做故障恢复数据同步时候，如果 minCommittedLog &lt; peerLastZxid &lt; maxCommittedLog, 比如leader 是 【5，6，7，8，9】，而follower是【5，7】，follower中间少了一个zxid 6的事务，这时候数据同步会恢复嘛？谢谢老师解答。","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495462,"discussion_content":"加一颗星:)，不会出现这种情况，ZAB能保证提案的顺序性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589822456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1698192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/e9/90/2932d464.jpg","nickname":"左耳朵猫","note":"","ucode":"C79FCDD9B61303","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328187,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606098220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047581,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/1d/f46a76e1.jpg","nickname":"xiangakun","note":"","ucode":"720CDB4F792695","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297342,"discussion_content":"不太明白这种情况为什么不会出现，zab能保证提案的顺序性，但是并没有要求提案的连续性吧，假如 A,B,C 三个节点，A是主节点，接收到消息6，广播给C的时候，C因为网络或其他原因导致消息6丢失，但是C很快从网络中恢复过来，根据多数节点原则6已经被A，B成功接收。接着系统收到消息7，A广播消息给C的时候，C成功接收了。难道这个过程中，C在没有完全同步A的消息时，是不会接收新的消息吗？还请老师帮忙解惑，非常感谢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596880517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1039813,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dd/c5/9ae99a7f.jpg","nickname":"¾阳光","note":"","ucode":"C67D0E18F6158D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1047581,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/1d/f46a76e1.jpg","nickname":"xiangakun","note":"","ucode":"720CDB4F792695","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334853,"discussion_content":"lead 会给每个follower都单独一个FIFO队列管理提案，如果收到follower的ACK，则会把提案出队列，否则一直放在队列中，同时也保证了follower接收到的Proposal提案是按照zxid大小顺序发出的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1608011148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297342,"ip_address":""},"score":334853,"extra":""},{"author":{"id":1106631,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e2/c7/f671bd93.jpg","nickname":"amy","note":"","ucode":"C6DAA11AFD3EC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1039813,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dd/c5/9ae99a7f.jpg","nickname":"¾阳光","note":"","ucode":"C67D0E18F6158D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374970,"discussion_content":"我之前也是一直没想明白zk是怎么保证消息的顺序性的，看到你的这个回复总算明白了，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621424535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334853,"ip_address":""},"score":374970,"extra":""}]}]},{"had_liked":false,"id":247508,"user_name":"要努力的兵长","can_delete":false,"product_type":"c1","uid":1204868,"ip_address":"","ucode":"0144DF1BB82763","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/YicovLZyvibpkfJwuAib1FEyibVDN6Oia1Wsg7jibT0uTj0UDH75KAX6vfSvstjy1IHTW7WpNbMlZZO9SnGoPj3AE2DQ/132","comment_is_top":false,"comment_ctime":1599728826,"is_pvip":false,"replies":[{"id":"96351","content":"加一颗星:），有可能这个节点也出现了网络故障，没有参与领导者选举，只有“大多数”，才不会再改变。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606820987,"ip_address":"","comment_id":247508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18779598010","product_id":100046101,"comment_content":"如果写请求对应的提案“SET X = 1”未被复制到大多数节点上，比如在领导者广播消息过程中，领导者崩溃了，那么，提案“SET X = 1”，可能被复制到大多数节点上，并提交和之后就不再改变，也可能会被删除。这个行为是未确定的，取决于新的领导者是否包含该提案  ----------像这种 提案的 事务ID明显是最大的吧。 那选举新leader 的时候， 也不可能选举出 没有接受的该提案的那种节点吧 (任期相同的情况下，选举  事务ID最大的   作为领导者)","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505420,"discussion_content":"加一颗星:），有可能这个节点也出现了网络故障，没有参与领导者选举，只有“大多数”，才不会再改变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606820987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242762,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597834773,"is_pvip":false,"replies":[{"id":"96359","content":"加一颗星:)，不满足“大多数”原则，共识算法本质上是“多数派”算法。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606826342,"ip_address":"","comment_id":242762,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10187769365","product_id":100046101,"comment_content":"少数节点为何我XID最大我不能成为领导者呢?","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504091,"discussion_content":"加一颗星:)，不满足“大多数”原则，共识算法本质上是“多数派”算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606826342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1292669,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIaaDFHiag4sFcO7JUn028Mtk1YvFpibIibLzcTE7Qak0icJklMpqh7k5dSK27dibicMuNgYMozgaibeYppA/132","nickname":"Bball","note":"","ucode":"E483CAFE50CB99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550372,"discussion_content":"应该也有可能是这个少数节点成为了领导者","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644500136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331751,"user_name":"小麦","can_delete":false,"product_type":"c1","uid":1618709,"ip_address":"","ucode":"2C800B598A2CDE","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/15/30822e33.jpg","comment_is_top":false,"comment_ctime":1642750425,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5937717721","product_id":100046101,"comment_content":"【在 ZooKeeper 中，被复制到大多数节点上的提案，最终会被提交】<br><br>如果一个提案已经被复制到大多数节点上了，但是在 Leader 向节点发送 commit 之前崩溃了，那么 follower 是没有收到 commit 请求的，那这个提案最终也会被提交吗？为什么？","like_count":2,"discussions":[{"author":{"id":1580185,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/99/5e1a2118.jpg","nickname":"mylife","note":"","ucode":"D802160BFB29FC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590256,"discussion_content":"会的，因为已经被复制到了大多数节点，而leader选举需要过半原则，则新选取的leader肯定有该最新提案，因而最终会被提交。另外如果只是复制到少数的节点，则不一定会被提交，比如刚好只复制到1个节点而该节点又刚好处在网络隔离情况下，则该提案不会被提交","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665642735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246307,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1599272611,"is_pvip":false,"replies":[{"id":"92465","content":"加一颗星:)，在任意时刻，每个节点只能处于一种状态，但集群中的各节点可能处于不同的状态。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1602597412,"ip_address":"","comment_id":246307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5894239907","product_id":100046101,"comment_content":"韩老师好，“只有当集群大多数节点处于广播状态的时候，集群才能提交提案”，是否意味着BROADCAST广播状态，是会与其它三个状态同时存在的呢？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505107,"discussion_content":"加一颗星:)，在任意时刻，每个节点只能处于一种状态，但集群中的各节点可能处于不同的状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602597412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232986,"user_name":"春风","can_delete":false,"product_type":"c1","uid":1103971,"ip_address":"","ucode":"76947E35A76C67","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/63/e4c28138.jpg","comment_is_top":false,"comment_ctime":1594182564,"is_pvip":false,"replies":[{"id":"88136","content":"加一颗星:)，问题1：暂时没想到具体例子，我再想想:)。问题2：响应它认为是领导者的节点信息给这个选举状态的节点。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596215348,"ip_address":"","comment_id":232986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889149860","product_id":100046101,"comment_content":"当接收到领导者的响应后，跟随者会判断领导者的任期编号是否最新，如果不是，就发起新的选举；<br><br>老师，什么情况下领导者的任期编号会不是最新呢？这个时候发起新的选举，其他节点的状态是不是应该是following状态，zab状态应该是discovery状态，这个时候是怎么响应选举的呢？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500838,"discussion_content":"加一颗星:)，问题1：暂时没想到具体例子，我再想想:)。问题2：响应它认为是领导者的节点信息给这个选举状态的节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596215348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230975,"user_name":"Kvicii.Y","can_delete":false,"product_type":"c1","uid":1442588,"ip_address":"","ucode":"446BFA633569EA","user_header":"https://static001.geekbang.org/account/avatar/00/16/03/1c/c9fe6738.jpg","comment_is_top":false,"comment_ctime":1593536665,"is_pvip":false,"replies":[{"id":"87636","content":"加一颗星:），现在看来，这两个阶段其实是可以省去的，比如Raft就没有这两个阶段，技术是在不断发展的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595751584,"ip_address":"","comment_id":230975,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888503961","product_id":100046101,"comment_content":"感觉成员发现应该算是选举过后的一个选举补偿，而数据同步则是数据补偿","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500099,"discussion_content":"加一颗星:），现在看来，这两个阶段其实是可以省去的，比如Raft就没有这两个阶段，技术是在不断发展的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595751584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321303,"user_name":"simple_孙","can_delete":false,"product_type":"c1","uid":1873629,"ip_address":"","ucode":"A77203E242D652","user_header":"https://static001.geekbang.org/account/avatar/00/1c/96/dd/1620a744.jpg","comment_is_top":false,"comment_ctime":1636772510,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1636772510","product_id":100046101,"comment_content":"ZAB必须有数据同步的操作是不是因为Raft在提交数据的时候，跟随者会检查上一条数据是否提交成功，没成功的话就会重新同步；而ZAB的数据同步就是一个二阶段提交，没法检查上一个位置的同步结果。","like_count":0,"discussions":[{"author":{"id":1580185,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/99/5e1a2118.jpg","nickname":"mylife","note":"","ucode":"D802160BFB29FC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590271,"discussion_content":"个人理解，因为zab是通过FIFO+TCP来保证发送顺序，另外前一个提案提前之前不会提交后一个，zxid在同一任期是连续的，部分消息可能还没同步完，这时leader崩溃，则部分follower的数据是不同步的，当新的leader选举出来后（任期+1,计数从0开始），如果不先同步的话，zxid又不是全局连续的，follower是无法知道其是否是最新的了；而raft不一样，其是通过日志的索引（连续，无空洞）来确认的，这样当一个新提案过来后，其是能通过索引来判断是否完整（另外同个索引也会校验里面任期内容）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665644021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300216,"user_name":"我可能是个假开发","can_delete":false,"product_type":"c1","uid":1424106,"ip_address":"","ucode":"B4EA4E48D6595A","user_header":"https://static001.geekbang.org/account/avatar/00/15/ba/ea/eb6ec134.jpg","comment_is_top":false,"comment_ctime":1625048995,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1625048995","product_id":100046101,"comment_content":"应该怎么样理解大多数当选领导呢？<br>即是LOOKING状态的节点会在一段时间内（多久呢）收集选票？对于epoch相同的情况，按zxid从大到小遍历选票，如果看到某一个zxid的数量满足大多数条件（count(zxid)&gt;(n&#47;2)+1)，则投票该zxid中集群id最大的节点为领导者？","like_count":0},{"had_liked":false,"id":284481,"user_name":"Geek_672f79","can_delete":false,"product_type":"c1","uid":2325033,"ip_address":"","ucode":"F4BEFC33AEC33B","user_header":"","comment_is_top":false,"comment_ctime":1616297988,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"1616297988","product_id":100046101,"comment_content":"韩老师， 你在ZAB协议（1） 有这么一句话：ZAB 的领导者选举，选举出的是大多数节点中数据最完整的节点。<br> 但在本章有这么一句话 ：如果写请求对应的提案“SET X = 1”未被复制到大多数节点上，比如在领导者广播消息过程中，领导者崩溃了，那么，提案“SET X = 1”，可能被复制到大多数节点上，并提交和之后就不再改变，也可能会被删除。这个行为是未确定的，取决于新的领导者是否包含该提案。<br><br>    我该如何去理解？","like_count":0,"discussions":[{"author":{"id":2358506,"avatar":"https://static001.geekbang.org/account/avatar/00/23/fc/ea/3fd73bb7.jpg","nickname":"🐳","note":"","ucode":"7264FC66E53D7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387281,"discussion_content":"我觉得韩老师的意思可能是，就是如果上一轮leader节点发生故障，并且只复制到了少数follower节点上，重新选举的时候，这些少数节点均因为网络原因断开无法参与选举，但是由于没有超过一般的节点发生故障，leader任然能够选举成功（新选出的leader提案未包含SET X=1），等到进入节点发现和同步的状态的时候，这些断开的节点又恢复了，此时新的leader已经选出，则以新的leader为标准进行同步，所以这些最新的提案会被删除。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628085056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113978,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLniccwC1Mootc7IQsRGUTX3ZkkCKPc7lYV0g8CAqscWtAjd8xkHYcY3UFbYvicm42FXuAO5bZP6WQ/132","nickname":"Geek_417e74","note":"","ucode":"BEA8915879274D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552209,"discussion_content":"比如有1、2、3、4、5、6个节点组成的集群，大多数为4。假设1是主节点且set x = 1只被复制到 2 这个节点。此时1节点宕机了，假设现在3-6这4个节点选择出了3为主节点（满足选举大多数，大多数并不是活着的所有节点中数据最完整的），那么节点2的set x=1 就会被丢弃，当它与节点3同步数据时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645347812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1227789,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/0d/e65ca230.jpg","nickname":"👻","note":"","ucode":"1648C82AC73C1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2113978,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLniccwC1Mootc7IQsRGUTX3ZkkCKPc7lYV0g8CAqscWtAjd8xkHYcY3UFbYvicm42FXuAO5bZP6WQ/132","nickname":"Geek_417e74","note":"","ucode":"BEA8915879274D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560407,"discussion_content":"节点2为啥不能当选😅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649317063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552209,"ip_address":""},"score":560407,"extra":""},{"author":{"id":3162149,"avatar":"","nickname":"Geek_38348a","note":"","ucode":"6184C1FA9B91D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1227789,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/0d/e65ca230.jpg","nickname":"👻","note":"","ucode":"1648C82AC73C1D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584883,"discussion_content":"他的意思应该是1和2节点都因为网络分区连不上了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661180925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":560407,"ip_address":"广东"},"score":584883,"extra":""}]}]}]}