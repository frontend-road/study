{"id":10858,"title":"04 | 一切的源头，代码分支策略的选择","content":"<p>记得大概是一年前吧，我与好友老吴喝茶聊天时，讨论到：高效的持续交付体系，必定需要一个合适的代码分支策略。</p><p>我告诉老吴：“<span class=\"orange\">采用不同的代码分支策略，意味着实施不同的代码集成与上线流程，这会影响整个研发团队每日的协作方式，因此研发团队通常会很认真地选择自己的策略。</span>”</p><p>老吴是一名有多年开发经验的资深架构师，当时正好要接手一个框架团队，从个人贡献者向团队管理者转型。他个人对代码管理工具可谓熟之又熟，甚至连“老古董”的CVS都可以跟你聊半天。但他在为团队制定代码分支管理策略时，还是慎之又慎，足见其重要性。</p><p>最后我们发现，要确定选用哪种代码分支管理策略，需要先假设几个问题，这几个问题有了答案，也就代表你找到了适合的方向。</p><p>你需要思考的几个问题如下：</p><ol>\n<li>\n<p>Google和Facebook这两个互联网大咖都在用主干开发（Trunk Based Development，简称TBD），我们是不是也参照它俩，采用主干开发分支策略？</p>\n</li>\n<li>\n<p>用Google搜索一下，会发现有个排名很靠前的分支策略，叫“A successful Git branching model”（简称 Git Flow），它真的好用吗？团队可以直接套用吗？</p>\n</li>\n<li>\n<p>GitHub 和 GitLab 这两个当下最流行的代码管理平台，各自推出了 GitHub Flow 和 GitLab Flow，它们有什么区别？适合我使用吗？</p>\n</li>\n<li>\n<p>像阿里、携程和美团点评这样国内知名的互联网公司，都在用什么样的分支策略？</p>\n</li>\n</ol><!-- [[[read_end]]] --><p>今天，我想再沿着当时的思考路径，和你一起回顾和总结一下，希望能够带你全面了解代码分支策略，帮助你做出合适的选择。</p><h2>谈谈主干开发（TBD）</h2><p><strong>主干开发是一个源代码控制的分支模型，开发者在一个称为 “trunk” 的分支（Git 称 master） 中对代码进行协作，除了发布分支外没有其他开发分支。</strong></p><p>Google和 Facebook都是采用“主干开发”的方式，代码一般直接提交到主干的头部，这样可以保证所有用户看到的都是同一份代码的最新版本。</p><p><strong>“主干开发”确实避免了合并分支时的麻烦，因此像Google这样的公司一般就不采用分支开发，分支只用来发布。</strong></p><p>大多数时候，发布分支是主干某个时点的快照。以后的改Bug和功能增强，都是提交到主干，必要时 cherry-pick （选择部分变更集合并到其他分支）到发布分支。与主干长期并行的特性分支极为少见。</p><p>由于不采用“特性分支开发”，所有提交的代码都被集成到了主干，为了保证主干上线后的有效性，一般会使用特性切换（feature toggle）。特性切换就像一个开关可以在运行期间隐藏、启用或禁用特定功能，项目团队可以借助这种方式加速开发过程。</p><p>特性切换在大型项目持续交付中变得越来越重要，因为它有助于将部署从发布中解耦出来。但据吉姆 · 伯德（Jim Bird）介绍，特性切换会导致代码更脆弱、更难测试、更难理解和维护、更难提供技术支持，而且更不安全。</p><p>他的主要论据是，将未经测试的代码引入生产环境是一个糟糕的主意，它们引发的问题可能会在无意间暴露出来。另外，越来越多的特性切换会使得逻辑越来越混乱。</p><p><strong>特性切换需要健壮的工程过程、可靠的技术设计和成熟的特性切换生命周期管理</strong>，如果不具备这三个关键的条件，使用特性切换反而会降低生产力。</p><p>根据上面的分析，主干开发的分支策略虽然有利于开展持续交付，但是它对开发团队的能力要求也更高。</p><p>主干开发的优缺点如表1所示。<br>\n<img src=\"https://static001.geekbang.org/resource/image/59/5e/59096cdc19f9e0a5fefbe99f9b57445e.png?wh=914*272\" alt=\"\"></p><center>表1 主干开发的优缺点</center><h2>谈谈特性分支开发</h2><p>和主干开发相对的是 “特性分支开发” 。在这个大类里面，我会给你分析Git Flow、GitHub Flow和 GitLab Flow这三个常用的模型。</p><p><strong>第一，Git Flow</strong></p><p>我们在Google上查关键词“branch model”（也就是“分支模型”），有一篇排名比较靠前的文章“A successful Git branching model”，它介绍了Git Flow模型。</p><p>Git刚出来的那些年，可参考的模型不多，所以Git Flow模型在2011年左右被大家当作了推荐的分支模型，至今也还有项目团队在使用。然而，Git Flow烦琐的流程也被许多研发团队吐槽，大家普遍认为hotfix和 release 分支显得多余，平时都不会去用。</p><p><img src=\"https://static001.geekbang.org/resource/image/4b/0f/4bc4c4035857479b2126fed5af4ce90f.png?wh=528*700\" alt=\"\"></p><center>图1 Git Flow示意图</center><p><strong>第二，GitHub Flow</strong></p><p>GitHub Flow 是 GitHub 所使用的一种简单流程。该流程只使用master和特性分支，并借助 GitHub 的 pull request 功能。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/14/7ae8a5fe4f5fcdae7ba9cfaf758f1a14.png?wh=380*467\" alt=\"\"></p><center>图2 GitHub Flow示意图</center><p><strong>在 GitHub Flow 中，master 分支中包含稳定的代码，它已经或即将被部署到生产环境。任何开发人员都不允许把未测试或未审查的代码直接提交到 master 分支。对代码的任何修改，包括Bug 修复、热修复、新功能开发等都在单独的分支中进行。不管是一行代码的小改动，还是需要几个星期开发的新功能，都采用同样的方式来管理。</strong></p><p>当需要修改时，从 master 分支创建一个新的分支，所有相关的代码修改都在新分支中进行。开发人员可以自由地提交代码和提交到远程仓库。</p><p>当新分支中的代码全部完成之后，通过 GitHub 提交一个新的 pull request。团队中的其他人员会对代码进行审查，提出相关的修改意见。由持续集成服务器（如 Jenkins）对新分支进行自动化测试。当代码通过自动化测试和代码审查之后，该分支的代码被合并到 master 分支。再从 master 分支部署到生产环境。</p><p>GitHub Flow 的好处在于非常简单实用，开发人员需要注意的事项非常少，很容易形成习惯。当需要修改时，只要从 master 分支创建新分支，完成之后通过 pull request 和相关的代码审查，合并回 master 分支就可以了。</p><p><strong>第三，GitLab Flow</strong></p><p>上面提到的GitHub Flow，适用于特性分支合入master后就能马上部署到线上的这类项目，但并不是所有团队都使用GitHub或使用pull request功能，而是使用开源平台GitLab，特别是对于公司级别而言，代码作为资产，不会随意维护在较公开的GitHub上（除非采用企业版）。</p><p>GitLab Flow 针对不同的发布场景，在GitHub Flow（特性分支加master分支）的基础上做了改良，额外衍生出了三个子类模型，如表2所示。<br>\n<img src=\"https://static001.geekbang.org/resource/image/0e/34/0efbe615c847aac070fdb9b8a588a434.png?wh=928*550\" alt=\"\"></p><center>表2 GitLab Flow 的三个分支</center><p><img src=\"https://static001.geekbang.org/resource/image/8e/1e/8e29bb4314de4492977e919abe91191e.jpg?wh=215*349\" alt=\"\"></p><center>图3 带生产分支的GitLab Flow  </center><p><img src=\"https://static001.geekbang.org/resource/image/bd/c8/bd6218d57b6d522844cf080d9ca9a7c8.jpg?wh=175*193\" alt=\"\"></p><center>图4 带环境分支的GitLab Flow </center><p><img src=\"https://static001.geekbang.org/resource/image/1b/58/1bf962fe8b0523fefac348529ffc0d58.jpg?wh=175*228\" alt=\"\"></p><center>图5 带发布分支的GitLab Flow</center><p>GitLab Flow的特性分支合入master用的是“Merge Request”，功能与GitHub Flow的“pull request”相同，这里不再赘述。</p><p>通过Git Flow、GitHub Flow和 GitLab Flow（3个衍生类别） 这几个具体模型的介绍，我给你总结一下特性分支开发的优缺点。如表3所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/b1/a517f2b1c48c8de54e500df3996628b1.png?wh=933*282\" alt=\"\"></p><center>表3特性分支开发的优缺点</center><h2>选出最适合的分支策略</h2><p>上面我跟你讲到的分支模型，都是IT研发领域比较流行的。虽然有些策略带上了代码平台的标识，如GitHub Flow，但并不意味着该策略仅限于GitHub代码平台使用，你完全可以在自己搭建的代码平台上使用这些策略。</p><p>接下来，我就总体归纳一下什么情况下应该选择什么样的分支策略。如表4所示。<br>\n<img src=\"https://static001.geekbang.org/resource/image/ae/d9/ae29f0b5a96306f49ce485c1823b23d9.png?wh=930*704\" alt=\"\"></p><center>表4 不同情况适用的代码分支策略</center><h2>国内互联网公司的选择</h2><p>GitLab作为最优秀的开源代码平台，被多数互联网大公司（包括阿里、携程和美团点评等）所使用，这些大厂也都采用特性分支开发策略。当然，这些大公司在长期持续交付实践中，会结合各自公司的情况做个性化的定制。</p><p>比如，携程公司在GitHub Flow的基础上，通过自行研发的集成加速器（Light Merge）和持续交付Paas平台，一起完成集成和发布。</p><p>再比如，阿里的AoneFlow，采用的是主干分支、特性分支和发布分支三种分支类型，再加上自行研发的Aone协同平台，实现持续交付。</p><h2>总结</h2><p>今天，我主要给你介绍了各种代码分支策略的特性。</p><p>你应该已经比较清晰地理解了“主干开发”和“特性分支开发”两种策略的各自特性：</p><ol>\n<li>\n<p>“主干开发”集成效率高，冲突少，但对团队个人的开发能力有较高要求；</p>\n</li>\n<li>\n<p>“特性分支开发”有利于并行开发，需要一定的流程保证，能保证主干代码质量。</p>\n</li>\n</ol><p>相信在没有绝对自信能力的情况下，面对绝大多数的场景，企业还是会选择“特性分支开发”的策略。所以，我给你介绍了几种主流的特性分支方法，并对比了各类策略的优劣，以及它们适用的场景。</p><p>接下来，你就可以根据自己所在项目的具体情况，参考今天的内容，裁剪出最适合自己团队的分支策略了。</p><h2>思考题</h2><ol>\n<li>\n<p>开源性质的项目，为什么不适合用主干开发的分支策略？</p>\n</li>\n<li>\n<p>如果你所在的团队只有5人，而且迭代周期为1周，你会采用什么样的分支策略？</p>\n</li>\n</ol><p>欢迎你给我留言。</p><p></p>","comments":[{"had_liked":false,"id":15823,"user_name":"康美之心 淇水之情","can_delete":false,"product_type":"c1","uid":1165041,"ip_address":"","ucode":"E9B871CD2058B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c6/f1/c10797f9.jpg","comment_is_top":false,"comment_ctime":1531539765,"is_pvip":false,"replies":[{"id":"5462","content":"讲的好，主干开发除了cherry pick以外，都简单直接","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531554459,"ip_address":"","comment_id":15823,"utype":1}],"discussion_count":2,"race_medal":0,"score":"121790624053","product_id":100009701,"comment_content":"微服务架构下，比较适合主干开发，一个微服务(含1-4个API)根据复杂性和规模通常由1-3的开发进行开发(含单元测试的开发)，1位测试进行API自动化测试开发，单元测试和API测试都集成到Pipeline上，一旦变动代码提交到master上后，就自动启动Pipeline上的build，在build这里会自动完成覆盖率100%的单元测试，单元测试通过，自动触发FVT deployment，部署成功后，自动触发FVT API自动化测试，FVT测试通过后；自动打出上线的tag号，并把这个tag号的部署到UAT，UAT部署成功后，自动触发UAT的API自动化测试，测试通过后，这个UAT的tag的就可以部署上线了。","like_count":28,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420567,"discussion_content":"讲的好，主干开发除了cherry pick以外，都简单直接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531554459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555355,"discussion_content":"1， 那在不同的测试环境里，是要用不同的分支吗？\n2 ， 最后一步部署上线，是不是pipeline自动完成？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646880347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15744,"user_name":"禾子先生","can_delete":false,"product_type":"c1","uid":1004799,"ip_address":"","ucode":"7F637111BDC5C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/ff/380eaec1.jpg","comment_is_top":false,"comment_ctime":1531444671,"is_pvip":false,"replies":[{"id":"5410","content":"很棒","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531447516,"ip_address":"","comment_id":15744,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35891183039","product_id":100009701,"comment_content":"对于第二个问题，我的思考是使用github flow，虽然追求效率，但必须保证线上版本是一个稳定。大家都在开发分支中进行开发，快速测试和迭代，合并到master时冲突也少。也考虑过使用主干开发，不过但从稳定角度来说，还是选择了前者","like_count":8,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420537,"discussion_content":"很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531447516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15739,"user_name":"禾子先生","can_delete":false,"product_type":"c1","uid":1004799,"ip_address":"","ucode":"7F637111BDC5C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/ff/380eaec1.jpg","comment_is_top":false,"comment_ctime":1531444124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35891182492","product_id":100009701,"comment_content":"对于开源项目不适合用主干开发。我的理解是更应该采用gitlab flow，为了保证功能稳定性，在贡献者的能力参差不齐和对整体架构和功能不一定完全了解情况下，修改的代码可能会引起其他问题。通过带版本分支的方式发布，稳定的推进和测试新代码的影响。","like_count":8},{"had_liked":false,"id":16286,"user_name":"bullboying","can_delete":false,"product_type":"c1","uid":1004962,"ip_address":"","ucode":"8DAC2384B770A3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/a2/e237925d.jpg","comment_is_top":false,"comment_ctime":1531874982,"is_pvip":false,"replies":[{"id":"5956","content":"您提到利用SIT分支来保证合并到master的都是经过测试，我们强烈建议使用 SmartMerge（本专栏第7讲） 来代替SIT，可以更及时地发现代码集成冲突的问题，其次可以更便捷地决策出用于上线的最大集合。<br><br>提到的第一个困惑，我们采用SmartMerge后，对应会有SmartMerge的分支，第一个问题演变为“怎么限制开发不要从SmartMerge的分支创建新分支，而只能从master分支创建新分支？”我认为这个演变过来的问题非常好。可以从两个方面着手来规范。<br>1）如果在gitlab UI上创建分支的话，我们可以很容易地限制只能从master创建新分支。<br>2）另一方面我们不打算限制git客户端的行为，仅当git客户端向gitlab服务端push新分支的时候做相应的检查。为了判断新分支是否从master拉取且尚未和其他分支做merge，只需查看该分支和master的merge-base的commit之间，是否存在merge的commit即可，如果有，则不允许push。<br><br>如果没有采用SmartMerge的方式，其实方法本质是相同的。如果短期内还是只能通过SIT分支的话，做法和SmartMerge的方式是一样的。<br>口诀为：在服务端直接控制新分支的创建，且拒绝客户端push不规范的新分支。<br><br>第二个困惑，假设你们尚未使用SmartMerge的方式，可以通过在你们的开发流程中额外增加一个活动来搞定。用于集成的SIT分支在编译打包前，务必和master做merge，打包测试后如果没问题的话，SIT和master分支做fast forward的检查，如果是fast forward，那么SIT merge到master分支产生的commit，内容和SIT 的HEAD是相同的，也就无需再一次进行测试了。如果你们master分支的变更只能来自SIT分支，那么这个fast forward是很容易得到保证的。<br>","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1532429004,"ip_address":"","comment_id":16286,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18711744166","product_id":100009701,"comment_content":"在自动化测试还没怎么做到位的情况下，为了控制合并到master的都是经过测试的代码，我们增加了一个SIT分支。每次有新特性需要开发时，从master分支check out一个特性分支进行开发，可能涉及到多人协同开发。自测完成后先发起merge request到SIT分支，如果有冲突则不允许merge，以实现不同特性分支间的隔离。如果没冲突且有集成测试人员空闲，则完成merge并安排测试，测试通过后由masters再发起merge request将特性分支合并到master。因为之前控制了冲突，所以第二次合并理论上是没有冲突的。现在纠结的几个问题，一是想要限制不能从SIT分支pull，否则就达不到多个特性分支隔离的效果，全靠开发人员自觉；二是因为隔离冲突是为了限制在制品，但导致master和SIT分支上的代码其实是不同的，是否需要测试两次？","like_count":4,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420743,"discussion_content":"您提到利用SIT分支来保证合并到master的都是经过测试，我们强烈建议使用 SmartMerge（本专栏第7讲） 来代替SIT，可以更及时地发现代码集成冲突的问题，其次可以更便捷地决策出用于上线的最大集合。\n\n提到的第一个困惑，我们采用SmartMerge后，对应会有SmartMerge的分支，第一个问题演变为“怎么限制开发不要从SmartMerge的分支创建新分支，而只能从master分支创建新分支？”我认为这个演变过来的问题非常好。可以从两个方面着手来规范。\n1）如果在gitlab UI上创建分支的话，我们可以很容易地限制只能从master创建新分支。\n2）另一方面我们不打算限制git客户端的行为，仅当git客户端向gitlab服务端push新分支的时候做相应的检查。为了判断新分支是否从master拉取且尚未和其他分支做merge，只需查看该分支和master的merge-base的commit之间，是否存在merge的commit即可，如果有，则不允许push。\n\n如果没有采用SmartMerge的方式，其实方法本质是相同的。如果短期内还是只能通过SIT分支的话，做法和SmartMerge的方式是一样的。\n口诀为：在服务端直接控制新分支的创建，且拒绝客户端push不规范的新分支。\n\n第二个困惑，假设你们尚未使用SmartMerge的方式，可以通过在你们的开发流程中额外增加一个活动来搞定。用于集成的SIT分支在编译打包前，务必和master做merge，打包测试后如果没问题的话，SIT和master分支做fast forward的检查，如果是fast forward，那么SIT merge到master分支产生的commit，内容和SIT 的HEAD是相同的，也就无需再一次进行测试了。如果你们master分支的变更只能来自SIT分支，那么这个fast forward是很容易得到保证的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532429004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555357,"discussion_content":"有点晕。如果把软件的模块划分好，各模块之间充分解偶，是不是就好很多？另外开发人员应该自觉在每次pull request之前，先把master上的代码pull and merge 到自己的本地分支，也就是自己管理好本地分支和master分支的同步和冲突问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646881017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54239,"user_name":"有道测试组","can_delete":false,"product_type":"c1","uid":1337013,"ip_address":"","ucode":"BD5463427B9BE9","user_header":"","comment_is_top":false,"comment_ctime":1545814160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135748752","product_id":100009701,"comment_content":"选用什么样的开发方式，也有一定是基于历史遗留原因或者大家的编程习惯~<br>开源软件不适合主干开发是说，我们会假设有若干贡献者，并且贡献者的水平参差不齐，会带来一粒老鼠屎，坏了一锅粥的问题。 但如果我们的pr 提交到master分支，会经过完善的自动化测试（包括各种配置，各种机型，我们将要做的所有测试）， 测试通过才让合入。这样其实主干开发流程简洁，能加快开发效率。  <br>如果测试没那么自动化，可能需要先合入其他分支， 再通过线下完整的各方面校验通过，方能合入。<br>目前像tf ，paddlepaddle等深度学习框架大多基于主干开发，分支发布。<br>不管是主干开发分支发布，还是分支开发主干分布，主要是期望能全面保证质量后再发布， 并且发布后的代码能较方便的集成到版本库。中间建立多少层分支，一般决定于代码库贡献者的规模。<br>","like_count":2},{"had_liked":false,"id":16073,"user_name":"董永刚","can_delete":false,"product_type":"c1","uid":1169147,"ip_address":"","ucode":"ADA792B226A6CD","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/fb/837af7bf.jpg","comment_is_top":false,"comment_ctime":1531759743,"is_pvip":false,"replies":[{"id":"5957","content":"gitlab几个flow，除了用于集成的master分支外，额外还配置了其他用于测试或上生产的分支。<br><br>拿带生产的分支来说，如果公司约定每周四才能发布到生产，而团队于周二在master上就集成好了V3.6版本，为了不影响后面的集成，master分支需要先merge到PRODUCTION分支，周四上线只需取PRODUCTION分支即可。<br><br>当然，gitlab flow也只是提供一个解决方案而已，只要能在发布窗口时正确快捷地找到用于发布的commit，同时又不影响集成即可。<br><br>至于提供带环境分支的，就是用分支模型来规约发布流程，保证用于上线的代码经过层层测试。做法就是约好了只能用PRODUCTION分支上线。比如通过PRE-PRODUCTION环境测试后，才能把该环境对应的分支合入到PRODUCTION分支。","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1532439484,"ip_address":"","comment_id":16073,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10121694335","product_id":100009701,"comment_content":"分支类型中，带生产分支，带发布分支，带产品分支的分别是什么样的场景呢？","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420654,"discussion_content":"gitlab几个flow，除了用于集成的master分支外，额外还配置了其他用于测试或上生产的分支。\n\n拿带生产的分支来说，如果公司约定每周四才能发布到生产，而团队于周二在master上就集成好了V3.6版本，为了不影响后面的集成，master分支需要先merge到PRODUCTION分支，周四上线只需取PRODUCTION分支即可。\n\n当然，gitlab flow也只是提供一个解决方案而已，只要能在发布窗口时正确快捷地找到用于发布的commit，同时又不影响集成即可。\n\n至于提供带环境分支的，就是用分支模型来规约发布流程，保证用于上线的代码经过层层测试。做法就是约好了只能用PRODUCTION分支上线。比如通过PRE-PRODUCTION环境测试后，才能把该环境对应的分支合入到PRODUCTION分支。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532439484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":555362,"discussion_content":"不同环境不同分支，那如何做到CICD呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646882238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":420654,"ip_address":""},"score":555362,"extra":""}]}]},{"had_liked":false,"id":15718,"user_name":"徐卫","can_delete":false,"product_type":"c1","uid":1021174,"ip_address":"","ucode":"E1CC8EFCB27CC3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/f6/fc60bf8a.jpg","comment_is_top":false,"comment_ctime":1531410087,"is_pvip":false,"replies":[{"id":"5409","content":"主干开发也可以有多个分支，除了master，其他是发布分支，master是用来持续集成的，也就是大家只往master push代码<br><br>特性切换不是分支，是代码或框架实现的功能，就理解为功能开关好了，也就是说有些代码即使上线了，也能通过开关保证它不工作","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531447450,"ip_address":"","comment_id":15718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10121344679","product_id":100009701,"comment_content":"你好，问下。老师帮我看下理解对不对。主干开发是否只有一个分支，开发的代码提交到这个分支，发布也是用此分支。文中讲到的特性切换怎么做的？ 我个人理解是在那个发布的版本上打标签，特性切换是从tag上拉出一份代码部署？","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420532,"discussion_content":"主干开发也可以有多个分支，除了master，其他是发布分支，master是用来持续集成的，也就是大家只往master push代码\n\n特性切换不是分支，是代码或框架实现的功能，就理解为功能开关好了，也就是说有些代码即使上线了，也能通过开关保证它不工作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531447450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15705,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1531399772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10121334364","product_id":100009701,"comment_content":"到底用哪种分支策略和团队的业务分工有关，如果修改的代码交织严重，肯定是主干，如果不严重，可以主干可以分支","like_count":2},{"had_liked":false,"id":15651,"user_name":"纳米","can_delete":false,"product_type":"c1","uid":1170003,"ip_address":"","ucode":"BFC1EF70899EA8","user_header":"https://static001.geekbang.org/account/avatar/00/11/da/53/f3238883.jpg","comment_is_top":false,"comment_ctime":1531359550,"is_pvip":false,"replies":[{"id":"5340","content":"特性分支模式下，都是从production拉取的开发分支，然后合并到master，master做持续集成，为了不影响持续集成，所以有了从master拉出来的环境分支进行部署<br><br>要考虑团队人员的能力，如果新人较多，就使用特性分支，反之使用主干开发，github flow的pull request其实也是特性分支","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531364923,"ip_address":"","comment_id":15651,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10121294142","product_id":100009701,"comment_content":"您好 我是一个非开发的人员。弱弱问下，最后表里总结的生产分支 环境分支中，开发人员自身是check out哪个分支代码出来开发 又是往哪个分支集成呢。能否在这两个分支上帮细化下。非常感谢。<br><br>思考题2 我理解 既然人很少 迭代周期也较为宽松 可能这一周大部分人都工作在一个功能或者版本上 是不主干开发反而也可以。github flow应该肯定是ok的。","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420498,"discussion_content":"特性分支模式下，都是从production拉取的开发分支，然后合并到master，master做持续集成，为了不影响持续集成，所以有了从master拉出来的环境分支进行部署\n\n要考虑团队人员的能力，如果新人较多，就使用特性分支，反之使用主干开发，github flow的pull request其实也是特性分支","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531364923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":555364,"discussion_content":"master分支只用于开发和 CI，它可能比production分支快。那为什么说“特性分支模式下，都是从production拉取的开发分支” ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646882510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":420498,"ip_address":""},"score":555364,"extra":""}]}]},{"had_liked":false,"id":15631,"user_name":"白天不懂爷的黑","can_delete":false,"product_type":"c1","uid":1056169,"ip_address":"","ucode":"A056238FE5890C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/a9/afeabc52.jpg","comment_is_top":false,"comment_ctime":1531356155,"is_pvip":false,"replies":[{"id":"5333","content":"最新版本应该给了和GitHub类似的解决方案，我们是对gitlab做了分片，每个分片是一个仓库，在集群之前增加了基于nodejs ssh2修改的proxy，仓库做简单的定时备份","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531361776,"ip_address":"","comment_id":15631,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10121290747","product_id":100009701,"comment_content":"老师，您好，最近公司想用gitlab做配置中心，请问贵公司gitlab的高可用是怎么做的呢？谢谢","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420485,"discussion_content":"最新版本应该给了和GitHub类似的解决方案，我们是对gitlab做了分片，每个分片是一个仓库，在集群之前增加了基于nodejs ssh2修改的proxy，仓库做简单的定时备份","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531361776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282153,"user_name":"Jack xia","can_delete":false,"product_type":"c1","uid":1605837,"ip_address":"","ucode":"F9D639BB2CDA81","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/cd/de3e76af.jpg","comment_is_top":false,"comment_ctime":1615108927,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5910076223","product_id":100009701,"comment_content":"项目背景是这样，我们作为整车厂集成各个供应商提供的代码，目前由于编译工具特殊性，所以需要两套系统，windows和linux, 目前代码都是c++, 我的问题是，对于代码分支策略你建议选择什么？还是可以刚开始选择1， 后面可以变更？","like_count":1},{"had_liked":false,"id":121840,"user_name":"Geek_c991f2","can_delete":false,"product_type":"c1","uid":1624538,"ip_address":"","ucode":"0FDE8CE24B8E32","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jAsPmqra89uLYer998tsdAmHIxy9iaVfLIkzkTB3ITfUZg21Yiadf73TqmcFZXTEv2wuQicDA2uvqXvicHJ9HckBWg/132","comment_is_top":false,"comment_ctime":1565231972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5860199268","product_id":100009701,"comment_content":"很早就知道你有这个文章,但是当时没太能看懂,今天回头来看.但是还是想评论下,感觉文章中说到的git flow和有点像另外3中gitlab flow的三种综合,希望老师回复下","like_count":1},{"had_liked":false,"id":57213,"user_name":"kursk.ye","can_delete":false,"product_type":"c1","uid":1015995,"ip_address":"","ucode":"9D6A3854E408F9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/bb/c0ed9d76.jpg","comment_is_top":false,"comment_ctime":1546685094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5841652390","product_id":100009701,"comment_content":"特性切换（feature toggle）翻译得不准确，叫 功能开关更合适","like_count":1},{"had_liked":false,"id":48689,"user_name":"smartzs","can_delete":false,"product_type":"c1","uid":1062867,"ip_address":"","ucode":"CE190E031818E1","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d3/9febe49d.jpg","comment_is_top":false,"comment_ctime":1544516007,"is_pvip":false,"replies":[{"id":"19015","content":"还是有一点区别的，比如可以暂时预设多个发布分支，以针对一段时间内的多版本并行需要","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1545363443,"ip_address":"","comment_id":48689,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839483303","product_id":100009701,"comment_content":"老师，主干开发 和 带发布分支模型 很像啊，带发布分支约等于主干开发了吧？","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432309,"discussion_content":"还是有一点区别的，比如可以暂时预设多个发布分支，以针对一段时间内的多版本并行需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545363443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16083,"user_name":"大M","can_delete":false,"product_type":"c1","uid":1029057,"ip_address":"","ucode":"4A0EC46D4178E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b3/c1/beca97d7.jpg","comment_is_top":false,"comment_ctime":1531784124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826751420","product_id":100009701,"comment_content":"如果有不同环境呢，比如灰度环境，这样情况下我觉得是gitflow 比较合适。","like_count":1},{"had_liked":false,"id":15748,"user_name":"小胖胖","can_delete":false,"product_type":"c1","uid":1086543,"ip_address":"","ucode":"FD4BFF4776859A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/4f/2396cce5.jpg","comment_is_top":false,"comment_ctime":1531445202,"is_pvip":false,"replies":[{"id":"5411","content":"主要还是看你能hold住哪个，比如我个人属于rubyist，所以用ruby写的gitlab肯定就是我的首选了，如果你比较偏爱或擅长go，那就gogs了。<br><br>相对来说我个人觉得gogs比较轻量化，有好处有坏处，比如你要大量二次开发，gitlab service形式就比较友好，而且最近也开源了HA方案","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531448200,"ip_address":"","comment_id":15748,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5826412498","product_id":100009701,"comment_content":"gogs被gitlab 应该选择哪个？有什么区别吗","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420541,"discussion_content":"主要还是看你能hold住哪个，比如我个人属于rubyist，所以用ruby写的gitlab肯定就是我的首选了，如果你比较偏爱或擅长go，那就gogs了。\n\n相对来说我个人觉得gogs比较轻量化，有好处有坏处，比如你要大量二次开发，gitlab service形式就比较友好，而且最近也开源了HA方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531448200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15710,"user_name":"初七之月亮","can_delete":false,"product_type":"c1","uid":1032104,"ip_address":"","ucode":"C2A32D565E71D3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/a8/fef1a437.jpg","comment_is_top":false,"comment_ctime":1531404596,"is_pvip":false,"replies":[{"id":"5408","content":"比如有些环境是独立与其他服务联调用的，为了保证master的持续集成，而又不至于污染这个联调环境，就需要一个独立分支了","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531447238,"ip_address":"","comment_id":15710,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5826371892","product_id":100009701,"comment_content":"带环境发布分支方法的多数适用场景是啥呢？是不是有多少套环境就多少套分支啊？","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420526,"discussion_content":"比如有些环境是独立与其他服务联调用的，为了保证master的持续集成，而又不至于污染这个联调环境，就需要一个独立分支了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531447238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15637,"user_name":"小胡子","can_delete":false,"product_type":"c1","uid":1018182,"ip_address":"","ucode":"79FEC6400D25DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","comment_is_top":false,"comment_ctime":1531357037,"is_pvip":false,"replies":[{"id":"5336","content":"持续交付要求至少有一条分支随时能够进行发布，只要遵循这个原则，仅2条分支并无大碍","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531361953,"ip_address":"","comment_id":15637,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5826324333","product_id":100009701,"comment_content":"我们团队主干和开发两个分支并过来并过去，我该怎么解释这是种什么不好的方式呢。。。","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420488,"discussion_content":"持续交付要求至少有一条分支随时能够进行发布，只要遵循这个原则，仅2条分支并无大碍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531361953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356430,"user_name":"愉快","can_delete":false,"product_type":"c1","uid":1492103,"ip_address":"北京","ucode":"50815DDCD50D94","user_header":"https://static001.geekbang.org/account/avatar/00/16/c4/87/f2db4b1b.jpg","comment_is_top":false,"comment_ctime":1662298866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662298866","product_id":100009701,"comment_content":"我们的策略就是主干开发，由于项目性质一般是1-2个人负责一个项目，目前还没有产品，有了产品后应该会考虑其他分支策略。","like_count":0},{"had_liked":false,"id":337022,"user_name":"Even","can_delete":false,"product_type":"c1","uid":1147948,"ip_address":"","ucode":"C3555903EE9525","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/2c/1b0926b4.jpg","comment_is_top":false,"comment_ctime":1646556413,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646556413","product_id":100009701,"comment_content":"分享下我们的，算是基于主干开发的分支模型，mastet代码是随时可发布态，平时我们功能开发，从主干拉出feature分支，开发完提mr合入，提mr触达流水线，跑代码检查，自动化测试，跑过+cr确认才算合入主干，发布的话，定时从主干拉出release分支，中途可以cp到发布分支(前提需要先合入主干）。 ","like_count":0},{"had_liked":false,"id":215208,"user_name":"卿卿","can_delete":false,"product_type":"c1","uid":1215986,"ip_address":"","ucode":"B7942549932E3B","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/f2/e1f6164a.jpg","comment_is_top":false,"comment_ctime":1588929493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588929493","product_id":100009701,"comment_content":"现在公司核心项目由于需求多，每次上线的不确定性较大，分支模式使用的功能开发分支、带环境分支和带发布窗口分支的模式，有点崩溃，讨论几次也找不到更好的解决方案。我们现在用的是gitlab，但是没有使用gitlab的merge request功能。","like_count":0},{"had_liked":false,"id":190416,"user_name":"戴斌","can_delete":false,"product_type":"c1","uid":1119385,"ip_address":"","ucode":"7DC53BEA432217","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/99/5b1ed92b.jpg","comment_is_top":false,"comment_ctime":1584642116,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584642116","product_id":100009701,"comment_content":"特性分支开发适用于按时交付，但是，合并代码的过程很是痛苦","like_count":0},{"had_liked":false,"id":173738,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1579674113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579674113","product_id":100009701,"comment_content":"主干开发分支策略“有助于将部署从发布中解耦出来”，这句话怎么理解呢？","like_count":0},{"had_liked":false,"id":117754,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1065986,"ip_address":"","ucode":"3D3D10273BED18","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/02/5c8e4b81.jpg","comment_is_top":false,"comment_ctime":1564124658,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564124658","product_id":100009701,"comment_content":"1   主要是提交质量不可控<br>2  都能用，看团队需求<br><br>分支的主要作用应该是隔离变化，带来的问题就是增加分支维护成本，对于一般团队来讲，都应该使用特性分支，只不过要注意减少维护特性分支的数量，有必要的增加分支<br><br>以前只留意了git flow ,没留意其他模式，惭愧。","like_count":0},{"had_liked":false,"id":100627,"user_name":"春之绿野","can_delete":false,"product_type":"c1","uid":1057216,"ip_address":"","ucode":"296003F7D2B086","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/c0/38816c31.jpg","comment_is_top":false,"comment_ctime":1559607774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559607774","product_id":100009701,"comment_content":"因为在开源软件上，个人开发的话每个人的质量无法保证，所以不能用主干开发。第二种情况用主干开发，因为人数少，特性分支的话迭代周期太长","like_count":0},{"had_liked":false,"id":90841,"user_name":"飞机翅膀上","can_delete":false,"product_type":"c1","uid":1515223,"ip_address":"","ucode":"D239DFFECDBF01","user_header":"https://static001.geekbang.org/account/avatar/00/17/1e/d7/7d28a531.jpg","comment_is_top":false,"comment_ctime":1556685695,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556685695","product_id":100009701,"comment_content":"老师好，我们现在一个项目具有很多功能，还没有做微服务，甚至soa还没有做，产品在迅速迭代，目前一个master分支，一个test，和十几个特性分支，特性分支需要合并到test测试通过才可以将特性分支合到master发布<br>由于特性分支太多导致合到test分支经常有冲突，甚至编译不通过。所以每天都要拉取master分支到特性分支做合并，尽管如此，还是会有冲突<br>看了老师的课程，觉得有必要给每一个特性分支做测试环境，然而没有那么多的服务器，这点使用docker可以解决，至少做测试不需要合代码了，但这会导致最后特性分支测试通过合master时也会产生大量冲突<br>在这样的一个场景下，该给哪些分支做持续集成呢？从而提高项目整体交付效率？<br>我想过引入一个预发布分支，首先从master checkout下来，特性分支测试通过合到预发布分支，给预发布分支做持续集成，及时反馈预发布分支的健康状况<br>非常希望老师能够给点建议，感激不尽！","like_count":0},{"had_liked":false,"id":78695,"user_name":"llgeek","can_delete":false,"product_type":"c1","uid":1439062,"ip_address":"","ucode":"0B0E506228424A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQ2Od7x4lwlFjBJ43o1kFfgZEvISj6SFhgRTXqg4yT61a7Olz0WiaptIau97g4wrHt2YYSQSDfIDA/132","comment_is_top":false,"comment_ctime":1553219637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553219637","product_id":100009701,"comment_content":"有两个疑问请老师帮忙解答<br>如果采用GitHub flow，一个长期的feature分支，需要如何跟master同步？<br>feature分支提交pr后，测试完成，在分支发布或者合并到master在主干发布，如何评析优劣？<br>谢谢老师","like_count":0},{"had_liked":false,"id":72013,"user_name":"木有昵称","can_delete":false,"product_type":"c1","uid":1170935,"ip_address":"","ucode":"5FC91EC88A51FF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/f7/fa8c5dfd.jpg","comment_is_top":false,"comment_ctime":1551498507,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1551498507","product_id":100009701,"comment_content":"我们公司项目多，根据项目大小程度，基本上特别小的项目一个人开发直接就一个master分支；普通的项目是一个master分支加一个develop分支，多个开发人员使用develop分支进行开发，自行提交解决冲突，测试环境随时使用develop分支发布上线，生产线需要上线时由开发负责人专人负责合并到master上进行发布。","like_count":0},{"had_liked":false,"id":60815,"user_name":"Bruce晓勇","can_delete":false,"product_type":"c1","uid":1098285,"ip_address":"","ucode":"BF989885130F97","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2d/76427140.jpg","comment_is_top":false,"comment_ctime":1547556289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547556289","product_id":100009701,"comment_content":"1如果直接在特性分支交付，如何保证项目组代码合并到master?<br>2在特性分支上做持续交付，对管理上比较难统计每个系统的持续交付数据，不知怎么考虑，因为不知道哪个分支是哪个系统的","like_count":0},{"had_liked":false,"id":37270,"user_name":"金箍棒之定海神针","can_delete":false,"product_type":"c1","uid":1063264,"ip_address":"","ucode":"99EB51318CA985","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/60/f549a781.jpg","comment_is_top":false,"comment_ctime":1541513642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541513642","product_id":100009701,"comment_content":"请问有没有什么git书籍推荐，相关知识欠缺太多","like_count":0},{"had_liked":false,"id":16674,"user_name":"周小桥","can_delete":false,"product_type":"c1","uid":1062408,"ip_address":"","ucode":"80875AE7675695","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/08/e3ed94b8.jpg","comment_is_top":false,"comment_ctime":1532091560,"is_pvip":false,"replies":[{"id":"5801","content":"其实这个问题，代码分支很难解决，因为本质上是产品或设计出现了分支。建议从架构层面考虑抽象解耦，将稳定的核心与易变的功能拆分，成为多个项目，再配合合适的集成方法","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1532142732,"ip_address":"","comment_id":16674,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532091560","product_id":100009701,"comment_content":"老师好，现在我们的一个系统是以产品的方式编写，但是是以项目的方式买给不同的客户，这中间涉及到不同客户的不同需求 ，没办法都满足，会有差异，有的是同一模块 ，有的是定制需求！现在代码都是一套， 维护代码特别麻烦，满足了这里满足不了哪里，特别是那种几个月前部署的项目出了问题，有改动或者新功能升级 很容易出现问题，功能冲突等等…现在没有找到一种特别好的管理代码的方式，希望老师指导！","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420897,"discussion_content":"其实这个问题，代码分支很难解决，因为本质上是产品或设计出现了分支。建议从架构层面考虑抽象解耦，将稳定的核心与易变的功能拆分，成为多个项目，再配合合适的集成方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532142732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16578,"user_name":"小豪","can_delete":false,"product_type":"c1","uid":1050412,"ip_address":"","ucode":"70C75B9E5BD19E","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/2c/180075e0.jpg","comment_is_top":false,"comment_ctime":1532045569,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1532045569","product_id":100009701,"comment_content":"第二个问题，我觉得这样的团队比较适合使用主干开发，原因有两个：1、团队规模小，迭代周期短，特性隐藏的需求没那么强烈，大家都在一个目标版本下开发代；2、能利用CI&#47;CD的所有好处，这个是关键","like_count":0},{"had_liked":false,"id":16077,"user_name":"王浩槟","can_delete":false,"product_type":"c1","uid":1170413,"ip_address":"","ucode":"C7571671413E01","user_header":"https://static001.geekbang.org/account/avatar/00/11/db/ed/106a8ec9.jpg","comment_is_top":false,"comment_ctime":1531762633,"is_pvip":false,"replies":[{"id":"5681","content":"关于svn是否落伍<br>其实国内诸多大型互联网改用git作为代码管理工具，应该不仅因为git的强大与灵活，还有个重要的原因是同时出现了基于git的强大的代码平台，比如gitlab和github的出现。在这些平台上面，很容易实施Code Review和持续交付相关的活动，还有就是因为开源和良好的系统结构，这些平台相对容易做优化。","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531909294,"ip_address":"","comment_id":16077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531762633","product_id":100009701,"comment_content":"我司用的还是SVN，没用过git。想问:<br>SVN是不是很落后了？转换到git上有价值吗？如果转该怎么处理更平滑更低代价？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420656,"discussion_content":"关于svn是否落伍\n其实国内诸多大型互联网改用git作为代码管理工具，应该不仅因为git的强大与灵活，还有个重要的原因是同时出现了基于git的强大的代码平台，比如gitlab和github的出现。在这些平台上面，很容易实施Code Review和持续交付相关的活动，还有就是因为开源和良好的系统结构，这些平台相对容易做优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531909294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16001,"user_name":"zhchnchn","can_delete":false,"product_type":"c1","uid":1110218,"ip_address":"","ucode":"2219E40ED134D4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/ca/4560f06b.jpg","comment_is_top":false,"comment_ctime":1531727851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531727851","product_id":100009701,"comment_content":"讲的很好，谢谢。对于Gitlab Flow的三种子模型，能否介绍一下具体实践。另外对于Github Flow和Gitlab Flow二者区别还是有些迷惑，感觉它们好像并无明显的区别。","like_count":0},{"had_liked":false,"id":15868,"user_name":"张明云","can_delete":false,"product_type":"c1","uid":1009901,"ip_address":"","ucode":"430314AC1039C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/ed/b5a41e95.jpg","comment_is_top":false,"comment_ctime":1531575010,"is_pvip":false,"replies":[{"id":"5491","content":"带版本分支的方式比较好，而每个版本其实也可以算一个主干。推荐了解一下gerrit这个工具，它特殊的流程就很适合多版本分支的方式","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531648340,"ip_address":"","comment_id":15868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531575010","product_id":100009701,"comment_content":"我们公司是平板方案商，APP开发是敏捷模式，平板大项目是IPD模式，并且平板发布时会预置这些APP，但APP在某个版本上只要满足了平板要求的特性，就可以继续迭代新版本了，但虽然APP预置到平板的版本已经发布了，只要平板还在测试，出现比较严重的问题还是要继续改动。并且有时还会配合平板的硬件特性开发预研版本，相当于APP需要同时维护几个版本。请问老师这种情况用哪种分支模式好呢？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420577,"discussion_content":"带版本分支的方式比较好，而每个版本其实也可以算一个主干。推荐了解一下gerrit这个工具，它特殊的流程就很适合多版本分支的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531648340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15762,"user_name":"图·美克尔","can_delete":false,"product_type":"c1","uid":1076720,"ip_address":"","ucode":"021FB5AE110066","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppQqDE6TNibvr3DNdxG323AruicIgWo5DpVr6U7yZVNkbF2rKluyDfhdpgAEcYEOZTAnbrMdTzFkUw/0","comment_is_top":false,"comment_ctime":1531460264,"is_pvip":false,"replies":[{"id":"5446","content":"你们是一个git repo对应多个应用吧，为什么不拆开呢，一般来说单体应用才一个repo，分布式部署的，拆开repo比较好","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531470240,"ip_address":"","comment_id":15762,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531460264","product_id":100009701,"comment_content":"我们每个环境都要持续集成和持续发布…保证每个环境都是稳定和可用。最近有个问题是，子项目上提交后会触发到总项目的然后所有子项目的服务器都会重新部署…","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420545,"discussion_content":"你们是一个git repo对应多个应用吧，为什么不拆开呢，一般来说单体应用才一个repo，分布式部署的，拆开repo比较好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531470240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15611,"user_name":"王浩槟","can_delete":false,"product_type":"c1","uid":1170413,"ip_address":"","ucode":"C7571671413E01","user_header":"https://static001.geekbang.org/account/avatar/00/11/db/ed/106a8ec9.jpg","comment_is_top":false,"comment_ctime":1531331189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531331189","product_id":100009701,"comment_content":"等到了，抢个沙发","like_count":0}]}