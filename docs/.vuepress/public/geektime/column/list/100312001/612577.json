{"id":612577,"title":"04｜如何借助GitOps实现应用秒级自动发布和回滚？","content":"<p>你好，我是王炜。</p><p>在上一节课，我为你介绍了 K8s 在自愈和自动扩容方面的强大能力，它们对提升业务稳定性有非常大的帮助。</p><p>其实，除了保障业务稳定以外，在日常软件研发的生命周期中，还有非常重要的一环：发布和回滚。发布周期是体现研发效率的一项重要指标，更早更快的发布有利于我们及时发现问题。</p><p>在我们有了关于容器化、K8s 工作负载的基础之后，这节课，我们来看看 K8s 应用发布的一般做法，此外，我还会带你从零开始构建 GitOps 工作流，体验 GitOps 在应用发布上为我们带来的全新体验。</p><p>在正式开始之前，你需要做好以下准备：</p><ul>\n<li>准备一台电脑（首选 Linux 或 macOS，Windows 系统注意操作差异）；</li>\n<li><a href=\"https://docs.docker.com/engine/install/\">安装 Docker</a>；</li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/\">安装 Kubectl</a>；</li>\n<li>按照上一节课的内容在本地 Kind 集群安装 Ingress-Nginx。</li>\n</ul><h2>传统 K8s 应用发布流程</h2><p>还记得在上节课学习的如何创建 Deployment 工作负载吗？下面这段 Deployment Manifest 可以帮助你复习一下：</p><pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: hello-world-flask\n  name: hello-world-flask\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: hello-world-flask\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: hello-world-flask\n    spec:\n      containers:\n      - image: lyzhang1999/hello-world-flask:latest\n        name: hello-world-flask\n        resources: {}\nstatus: {}\n</code></pre><!-- [[[read_end]]] --><p>当我们在部署 Deployment 工作负载的时候，Image 字段同时指定了镜像名称和版本号。在发布应用的过程中，一般会先修改 Manifest 镜像版本，再使用 kubectl apply 重新将 Manifest 应用到集群来更新应用。</p><p>你可能会问，那在升级应用的过程中，新老版本的切换会导致服务中断吗？答案当然是不会的，并且 K8s 将会自动处理，无需人工干预。</p><p><strong>接下来，我们进入实战环节。我们先尝试通过手动的方式来更新应用，这也是传统 K8s 发布应用的过程。</strong></p><p>通常，更新应用可以使用下面三种方式：</p><ul>\n<li>使用 kubectl set image 命令；</li>\n<li>修改本地的 Manifest ；</li>\n<li>修改集群内 Manifest 。</li>\n</ul><h3>通过 kubectl set image 命令更新应用</h3><p>要想更新应用，最简单的方式是通过 kubectl set image 来更新集群内已经存在工作负载的镜像版本，例如更新 hello-world-flask Deployment 工作负载：</p><pre><code class=\"language-powershell\">$ kubectl set image deployment/hello-world-flask hello-world-flask=lyzhang1999/hello-world-flask:v1\ndeployment.apps/hello-world-flask image updated\n</code></pre><p>为了方便你动手实践，我已经给你制作了 hello-world-flask:v1 版本的镜像，新镜像版本修改了 Python 的返回内容，你可以直接使用。</p><p>当 K8s 接收到镜像更新的指令时，K8s 会用新的镜像版本重新创建 Pod。你可以使用 kubectl get pods 来查看 Pod 的更新情况：</p><pre><code class=\"language-powershell\">$ kubectl get pods\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; READY&nbsp; &nbsp;STATUS&nbsp; &nbsp; RESTARTS&nbsp; &nbsp;AGE\nhello-world-flask-8f94845dc-qsm8b&nbsp; &nbsp;1/1&nbsp; &nbsp; &nbsp;Running&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3m38s\nhello-world-flask-8f94845dc-spd6j&nbsp; &nbsp;1/1&nbsp; &nbsp; &nbsp;Running&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3m21s\nhello-world-flask-64dd645c57-rfhw5&nbsp; &nbsp;0/1&nbsp; &nbsp; &nbsp;ContainerCreating&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1s\nhello-world-flask-64dd645c57-ml74f&nbsp; &nbsp;0/1&nbsp; &nbsp; &nbsp;ContainerCreating&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0s\n</code></pre><p>在更新 Pod 的过程中，K8s 会确保先创建新的 Pod ，然后再终止旧镜像版本的 Pod。Pod 的副本数始终保持在我们在 Deployment Manifest 中配置的 2 。</p><p>现在，你可以打开浏览器访问 127.0.0.1 ，查看返回内容：</p><pre><code class=\"language-powershell\">Hello, my v1 version docker images! hello-world-flask-8f94845dc-bpgnp\n</code></pre><p>通过返回内容我们可以发现，新镜像对应的 Pod 已经替换了老的 Pod，这也意味着我们的应用更新成功了。</p><p><strong>从本质上来看，kubectl set image 是修改了集群内已部署的 Deployment 工作负载的 Image 字段，继而触发了 K8s 对 Pod 的变更。</strong></p><p>有时候，我们在一次发布中希望变更的内容不仅仅是镜像版本，可能还有副本数、端口号等等。这时候，我们可以对新的 Manifest 文件再执行一次 kubectl apply ，K8s 会比对它们之间的差异，然后做出变更。</p><h3>通过修改本地的 Manifest 更新应用</h3><p>除了使用 kubectl set image 来更新应用， 我们还可以修改本地的 Manifest 文件并将其重新应用到集群来更新。</p><p>以 hello-world-flask Deployment 为例，我们重新把镜像版本修改为 latest，将下面的内容保存为 new-hello-world-flask.yaml：</p><pre><code class=\"language-powershell\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: hello-world-flask\n  name: hello-world-flask\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: hello-world-flask\n  template:\n    metadata:\n      labels:\n        app: hello-world-flask\n    spec:\n      containers:\n      - image: lyzhang1999/hello-world-flask:latest\n        name: hello-world-flask\n</code></pre><p>接下来，执行 kubectl apply -f new-hello-world-flask.yaml 来更新应用：</p><pre><code class=\"language-powershell\">$ kubectl apply -f new-hello-world-flask.yaml\ndeployment.apps/hello-world-flask configured\n</code></pre><p>也就是说，kubectl apply 命令会自动处理两种情况：</p><ol>\n<li>如果该资源不存在，那就创建资源；</li>\n<li>如果资源存在，那就更新资源。</li>\n</ol><p>到这里，我相信有一些同学可能会有疑问，如果我本地的 Manifest 找不到了，我可以直接更新集群内已经存在的 Manifest 吗？答案是肯定的。也就是说，我们还可以直接编辑集群内的 Manifest 来更新应用，这就是更新应用的第三种方式。</p><h3>通过修改集群内 Manifest 更新应用</h3><p>以 hello-world-flask Deployment 为例，要直接修改集群内已部署的 Manifest，你可以使用 kubectl edit 命令：</p><pre><code class=\"language-powershell\">$ kubectl edit deployment hello-world-flask\n</code></pre><p>执行命令后，kubectl 会自动为我们下载集群内的 Manifest 到本地，并且用 VI 编辑器自动打开。你可以进入 VI 的编辑模式修改任何字段，<strong>保存退出后修改即时生效。</strong></p><p><strong>总结来说，要更新 K8s 的工作负载，我们可以修改本地的 Manifest，再使用 kubectl apply 将它重新应用到集群内，或者通过 kubectl edit 命令直接修改集群内已存在的工作负载。</strong></p><p>在实际项目的实践中，负责更新应用的同学早期可能会在自己的电脑上操作，然后把这部分操作挪到 CI 过程，例如使用 Jenkins 来执行。</p><p>但是，随着项目的发展，我们会需要发布流程更加自动化、安全、可追溯。这时候，我们应该考虑用 GitOps 的方式来发布应用。</p><h2>从零搭建 GitOps 发布工作流</h2><p>在正式搭建 GitOps 之前，我想先让你对 GitOps 有个简单的理解。通俗来说，GitOps 就是以 Git 版本控制为理念的 DevOps 实践。</p><p>对于这节课要设计的 GitOps 发布工作流来说，我们会将 Manifest 存储在 Git 仓库中作为期望状态，一旦修改并提交了 Manifest ，那么 GitOps 工作流就会<strong>自动比对 Git 仓库和集群内工作负载的实际差异</strong>，并进行部署。</p><h3>安装 FluxCD 并创建工作流</h3><p>要实现 GitOps 工作流，首先我们需要一个能够帮助我们监听 Git 仓库变化，自动部署的工具。这节课，我以 FluxCD 为例，带你一步步构建出一个 GitOps 工作流。</p><p><strong>接下来，我们进入实战环节。</strong></p><p>首先，我们需要在集群内安装 FluxCD：</p><pre><code class=\"language-powershell\">$ kubectl apply -f https://ghproxy.com/https://raw.githubusercontent.com/lyzhang1999/resource/main/fluxcd/fluxcd.yaml\n</code></pre><p>由于安装 FluxCD 的工作负载比较多，你可以使用 kubectl wait 来等待安装完成：</p><pre><code class=\"language-powershell\">$ kubectl wait --for=condition=available --timeout=300s --all deployments -n flux-system\ndeployment.apps/helm-controller condition met\ndeployment.apps/image-automation-controller condition met\ndeployment.apps/image-reflector-controller condition met\ndeployment.apps/kustomize-controller condition met\ndeployment.apps/notification-controller condition met\ndeployment.apps/source-controller condition met\n</code></pre><p>接下来，在本地创建 fluxcd-demo 目录：</p><pre><code class=\"language-powershell\">$ mkdir fluxcd-demo &amp;&amp; cd fluxcd-demo\n</code></pre><p>然后，我们在 fluxcd-demo 目录下创建 deployment.yaml 文件，并将下面的内容保存到这个文件里：</p><pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: hello-world-flask\n  name: hello-world-flask\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: hello-world-flask\n  template:\n    metadata:\n      labels:\n        app: hello-world-flask\n    spec:\n      containers:\n      - image: lyzhang1999/hello-world-flask:latest\n        name: hello-world-flask\n</code></pre><p>最后，在 Github 或 Gitlab 中创建 fluxcd-demo 仓库。为了方便测试，我们需要将仓库设置为公开权限，主分支为 Main，并将我们创建的 Manifest 推送至远端仓库：</p><pre><code class=\"language-powershell\">$ ls\ndeployment.yaml\n$ git init\n......\nInitialized empty Git repository in /Users/wangwei/Downloads/fluxcd-demo/.git/\n$ git add -A &amp;&amp; git commit -m \"Add deployment\"\n[master (root-commit) 538f858] Add deployment\n&nbsp;1 file changed, 19 insertions(+)\n&nbsp;create mode 100644 deployment.yaml\n$ git branch -M main\n$ git remote add origin https://github.com/lyzhang1999/fluxcd-demo.git\n$ git push -u origin main\n</code></pre><p>这是我的<a href=\"https://github.com/lyzhang1999/fluxcd-demo\">仓库地址</a>，你可以参考一下。</p><p>下一步，我们为 FluxCD 创建仓库连接信息，将下面的内容保存为 fluxcd-repo.yaml：</p><pre><code class=\"language-yaml\">apiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: GitRepository\nmetadata:\n  name: hello-world-flask\nspec:\n  interval: 5s\n  ref:\n    branch: main\n  url: https://github.com/lyzhang1999/fluxcd-demo\n</code></pre><p>注意，要将 URL 字段修改为你实际仓库的地址并使用 HTTPS 协议，branch 字段设置 main 分支。这里的 interval 代表每 5 秒钟主动拉取一次仓库并把它作为制品存储。</p><p>接着，使用 kubectl apply 将其 GitRepository 对象部署到集群内：</p><pre><code class=\"language-powershell\">$ kubectl apply -f fluxcd-repo.yaml\ngitrepository.source.toolkit.fluxcd.io/hello-world-flask created\n</code></pre><p>你可以使用 kubectl get gitrepository 来检查配置是否生效：</p><pre><code class=\"language-powershell\">$ kubectl get gitrepository\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; URL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AGE&nbsp; &nbsp;READY&nbsp; &nbsp;STATUS\nhello-world-flask&nbsp; &nbsp;https://github.com/lyzhang1999/fluxcd-demo&nbsp; &nbsp;5s&nbsp; &nbsp; True&nbsp; &nbsp; stored artifact for revision 'main/8260f5a0ac1e4ccdba64e074d1ee2c154956f12d'\n</code></pre><p>接下来，我们还需要为 FluxCD 创建部署策略。将下面的内容保存为 fluxcd-kustomize.yaml：</p><pre><code class=\"language-yaml\">apiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: hello-world-flask\nspec:\n  interval: 5s\n  path: ./\n  prune: true\n  sourceRef:\n    kind: GitRepository\n    name: hello-world-flask\n  targetNamespace: default\n</code></pre><p>在上面的配置中，interval 参数表示 FluxCD 会每 5 秒钟运行一次工作负载差异对比，path 参数表示我们的 deployment.yaml 位于仓库的根目录中。FluxCD在对比期望状态和集群实际状态的时候，如果发现差异就会触发重新部署。</p><p>我们再次使用 kubectl apply 将 Kustomization 对象部署到集群内：</p><pre><code class=\"language-powershell\">$ kubectl apply -f fluxcd-kustomize.yaml\nkustomization.kustomize.toolkit.fluxcd.io/hello-world-flask created\n</code></pre><p>同样地，你可以使用 kubectl get kustomization 来检查配置是否生效：</p><pre><code class=\"language-powershell\">$ kubectl get kustomization\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AGE&nbsp; &nbsp; &nbsp;READY&nbsp; &nbsp;STATUS\nhello-world-flask&nbsp; &nbsp;8m21s&nbsp; &nbsp;True&nbsp; &nbsp; Applied revision: main/8260f5a0ac1e4ccdba64e074d1ee2c154956f12d\n</code></pre><p>配置完成后，接下来，<strong>我们就可以正式体验 GitOps 的秒级自动发布和回滚了。</strong></p><h3>自动发布</h3><p>现在，我们修改 fluxcd-demo 仓库的 deployment.yaml 文件，将 image 字段的镜像版本从 latest 修改为 v1：</p><pre><code class=\"language-powershell\">......\n    spec:\n      containers:\n      - image: lyzhang1999/hello-world-flask:v1 # 修改此处\n        name: hello-world-flask\n......\n</code></pre><p>然后，我们将修改推送到远端仓库：</p><pre><code class=\"language-powershell\">$ git add -A &amp;&amp; git commit -m \"Update image tag to v1\"\n$ git push origin main\n</code></pre><p>你可以使用 kubectl describe kustomization hello-world-flask 查看触发重新部署的事件：</p><pre><code class=\"language-powershell\">$ kubectl describe kustomization hello-world-flask\n......\nStatus:\n&nbsp; Conditions:\n&nbsp; &nbsp; Last Transition Time:&nbsp; 2022-09-10T03:46:37Z\n&nbsp; &nbsp; Message:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Applied revision: main/8260f5a0ac1e4ccdba64e074d1ee2c154956f12d\n&nbsp; &nbsp; Reason:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReconciliationSucceeded\n&nbsp; &nbsp; Status:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; True\n&nbsp; &nbsp; Type:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Ready\n&nbsp; Inventory:\n&nbsp; &nbsp; Entries:\n&nbsp; &nbsp; &nbsp; Id:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;default_hello-world-flask_apps_Deployment\n&nbsp; &nbsp; &nbsp; V:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; v1\n&nbsp; Last Applied Revision:&nbsp; &nbsp; main/8260f5a0ac1e4ccdba64e074d1ee2c154956f12d\n&nbsp; Last Attempted Revision:&nbsp; main/8260f5a0ac1e4ccdba64e074d1ee2c154956f12d\n&nbsp; Observed Generation:&nbsp; &nbsp; &nbsp; 1\n......\n</code></pre><p>从返回的结果可以看出，我们将镜像版本修改为了 v1，并且，FluxCD 最后一次部署仓库的 Commit ID 是 8260f5a0ac1e4ccdba64e074d1ee2c154956f12d，这对应了我们最后一次的提交记录，说明变更已经生效了。</p><p>现在，我们打开浏览器访问 127.0.0.1，可以看到 v1 镜像版本的输出内容：</p><pre><code class=\"language-powershell\">Hello, my v1 version docker images! hello-world-flask-6d7b779cd4-spf4q\n</code></pre><p>通过上面的配置，我们让 FluxCD 自动完成了监听修改、比较和重新部署三个过程。怎么样，GitOps 的发布流程是不是比手动发布方便多了呢？</p><p>接下来我们再感受一下 GitOps 的快速回滚能力。</p><h3>发布回滚</h3><p>既然 GitOps 工作流中，Git 仓库是描述期望状态的唯一可信源，那么我们是不是只要对 Git 仓库执行回滚，就可以实现发布回滚呢？</p><p><strong>我们通过实战来验证一下这个猜想。</strong></p><p>要回滚 fluxcd-demo 仓库，首先需要找到上一次的提交记录。我们可以使用 git log 来查看它：</p><pre><code class=\"language-powershell\">$ git log\ncommit 900357f4cfec28e3f80fde239906c1af4b807be6 (HEAD -&gt; main, origin/main)\nAuthor: wangwei &lt;434533508@qq.com&gt;\nDate:&nbsp; &nbsp;Sat Sep 10 11:24:22 2022 +0800\n  \n&nbsp; &nbsp; Update image tag to v1\n\ncommit 75f39dc58101b2406d4aaacf276e4d7b2d429fc9\nAuthor: wangwei &lt;434533508@qq.com&gt;\nDate:&nbsp; &nbsp;Sat Sep 10 10:35:41 2022 +0800\n\n&nbsp; &nbsp; first commit\n</code></pre><p>可以看到，上一次的 commit id 为 75f39dc58101b2406d4aaacf276e4d7b2d429fc9，接下来使用 git reset 来回滚到上一次提交，并强制推送到 Git 仓库：</p><pre><code class=\"language-powershell\">$ git reset --hard 75f39dc58101b2406d4aaacf276e4d7b2d429fc9\nHEAD is now at 538f858 Add deployment\n\n$ git push origin main -f\nTotal 0 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/lyzhang1999/fluxcd-demo.git\n&nbsp;+ 8260f5a...538f858 main -&gt; main (forced update)\n</code></pre><p>再次使用 kubectl describe kustomization hello-world-flask 查看触发重新部署的事件：</p><pre><code class=\"language-powershell\">......\nStatus:\n&nbsp; Conditions:\n&nbsp; &nbsp; Last Transition Time:&nbsp; 2022-09-10T03:51:28Z\n&nbsp; &nbsp; Message:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Applied revision: main/538f858909663f4be3a62760cb571529eb50a831\n&nbsp; &nbsp; Reason:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReconciliationSucceeded\n&nbsp; &nbsp; Status:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; True\n&nbsp; &nbsp; Type:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Ready\n&nbsp; Inventory:\n&nbsp; &nbsp; Entries:\n&nbsp; &nbsp; &nbsp; Id:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;default_hello-world-flask_apps_Deployment\n&nbsp; &nbsp; &nbsp; V:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; latest\n&nbsp; Last Applied Revision:&nbsp; &nbsp; main/538f858909663f4be3a62760cb571529eb50a831\n&nbsp; Last Attempted Revision:&nbsp; main/538f858909663f4be3a62760cb571529eb50a831\n&nbsp; Observed Generation:&nbsp; &nbsp; &nbsp; 1\n......\n</code></pre><p>从返回结果的 Last Applied Revision 可以看出，FluxCD 已经检查到了变更，并已经进行了同步。</p><p>再次打开浏览器访问 127.0.0.1，可以看到返回结果已回滚到了 latest 镜像对应的内容：</p><pre><code class=\"language-powershell\">Hello, my first docker images! hello-world-flask-56fbff68c8-c8dc4\n</code></pre><p>到这里，我们就成功实现了 GitOps 的发布和回滚。</p><h2>总结</h2><p>这节课，我为你归纳了 K8s 更新应用镜像的 3 种基本操作，他们分别是：</p><ol>\n<li>kubectl set image；</li>\n<li>修改本地 Manifest 并重新执行 kubectl apply -f；</li>\n<li>通过 kubectl edit 直接修改集群内的工作负载。</li>\n</ol><p>这种手动更新应用的方法效率非常低，最重要的是很难回溯，会让应用回滚变得困难。所以，我们引入了一种全新 GitOps 工作流的发布方式来解决这些问题。</p><p>在这节课的实战当中，我们只实现了 GitOps 环节中的一小部分，我希望通过这个小小的试炼，让你认识到 GitOps 的价值。</p><p>在实际项目中，构建端到端的 GitOps 工作流其实还有非常多的细节，例如如何在修改代码后自动构建并推送镜像，如何自动更新 Manifest 仓库等，这些进阶的内容我都会在后续的课程中详细介绍。</p><p>另外，能实现 GitOps 的工具其实并不止 FluxCD，在你为实际项目构建生产级的 GitOps 工作流时，我推荐你使用 ArgoCD，这也是我们这个专栏接下来会重点介绍的内容。</p><p>最后，在前面几节课里，我们引出了非常多 K8s 相关的概念，例如工作负载、Service、Ingress、HPA 等等，为了快速实战并让你感受 K8s 和 GitOps 的价值，之前我并没有详细解释这些概念。但当你要将真实的项目迁移到 K8s 的时候，这些内容是我们必须要熟练掌握的。</p><p>所以，为了让你在工作过程中对 K8s 更加得心应手，我会在接下来第二模块为你提供零基础的 K8s 极简入门教程。我会详细介绍之前出现过的 K8s 常用对象，让你真正掌握他们，扫除将公司项目迁移到 K8s 的技术障碍，<strong>迈出 GitOps 的第一步。</strong></p><h2>思考题</h2><p>最后，给你留一道思考题吧。</p><p>请你分享一下你们现在使用的发布方案是什么？相比 GitOps 的发布方式，你认为它有哪些优缺点呢？</p><p>欢迎你给我留言交流讨论，你也可以把这节课分享给更多的朋友一起阅读。我们下节课见。</p>","comments":[{"had_liked":false,"id":364350,"user_name":"includestdio.h","can_delete":false,"product_type":"c1","uid":2314854,"ip_address":"广东","ucode":"5027BACE9319CD","user_header":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","comment_is_top":false,"comment_ctime":1670861484,"is_pvip":true,"replies":[{"id":132495,"content":"欢迎你关注后续的课程，你的问题在第 17 讲中有提到。\n我建议你先使用 git commit id 作为镜像版本号，这样可以把代码版本和镜像对应起来，回滚的话只要找到 commit id 就可以了。对于生产镜像，则可以采用额外的策略，例如 prod-commit_id 把他和常规开发镜像区分开。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671093072,"ip_address":"广东","comment_id":364350,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"我们目前是通过gitlab-ci和自己搭建的CD平台实现流水线，代码变更后ci发起镜像构建，并推送到镜像仓库，CD平台通过hook监听到CI流水线完成，重建Pod并拉取最新的镜像。 缺点是#我们的镜像版本号只区分了 dev mirror prod，回滚不是很优雅，只能是通过gitlab回滚代码重新构建镜像，重新触发CD，效率低，对开发同学也不太友好。最近正在着手看怎么调整，实现通过镜像版本号回滚。","like_count":10,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596563,"discussion_content":"欢迎你关注后续的课程，你的问题在第 17 讲中有提到。\n我建议你先使用 git commit id 作为镜像版本号，这样可以把代码版本和镜像对应起来，回滚的话只要找到 commit id 就可以了。对于生产镜像，则可以采用额外的策略，例如 prod-commit_id 把他和常规开发镜像区分开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671093072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2383857,"avatar":"https://static001.geekbang.org/account/avatar/00/24/5f/f1/c66c8c51.jpg","nickname":"吃两块云","note":"","ucode":"A50874612046AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596554,"discussion_content":"对于测试和开发环境cd自动触发挺好，而且就算有问题回滚时间长一点也等得起。如果不是用gitops的话，生产环境还是不要自动触发的好。可以把cd独立出来，手动填写镜像名称发布，回滚的话就是把上次的cd流水线再跑一下。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1671085851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604645,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7c/25/70134099.jpg","nickname":"许凯","note":"","ucode":"4F11AD41CB0244","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597659,"discussion_content":"可以试试阿里云云效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672131215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259323,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","nickname":"陈斯佳","note":"","ucode":"C236F874FC767A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596329,"discussion_content":"版本号可以试试使用commit SHA（git rev-parse --short HEAD）来命名的 这样版本号就都是唯一的了 也许能够解决你的回滚的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670902730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2314854,"avatar":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","nickname":"includestdio.h","note":"","ucode":"5027BACE9319CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1259323,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","nickname":"陈斯佳","note":"","ucode":"C236F874FC767A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596424,"discussion_content":"感谢，我今天研究看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670977838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":596329,"ip_address":"陕西","group_id":0},"score":596424,"extra":""}]}]},{"had_liked":false,"id":364669,"user_name":"IF-Processing","can_delete":false,"product_type":"c1","uid":1205736,"ip_address":"广东","ucode":"8298C3C9320D94","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/e8/d1e52dbb.jpg","comment_is_top":false,"comment_ctime":1671288412,"is_pvip":true,"replies":[{"id":132804,"content":"可以考虑使用 Helm 来封装应用，利用 Helm pre-install 在部署前执行特定的变更配置的 Job，这样就可以做到和 GitOps 工作流进行结合了。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671431609,"ip_address":"广东","comment_id":364669,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"我目前使用的方案是Gitlab-ci将代码检查，编译，制作docker镜像一套走完后，自动推送到生产的镜像仓库，之后进行手工部署和回滚操作。目前有痛点，主要是目前运行的应用是SpringCloud体系的应用程序，每次发版时，需要手工维护Nacos配置，数据变更脚本等功能。请教下，如果使用GitOps体系进行操作时，是否对于运行的目标体系有要求呢？我理解如果是使用K8S的configmap之类的信息进行配置，使用Service进行负载均衡的话，应该很好实现配置与代码一起部署。但是如果是这种依赖Nacos配置注册中心的微服务体系，GitOps体系也能很好的支撑吗？","like_count":4,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597087,"discussion_content":"可以考虑使用 Helm 来封装应用，利用 Helm pre-install 在部署前执行特定的变更配置的 Job，这样就可以做到和 GitOps 工作流进行结合了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671431609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366194,"user_name":"Noel ZHANG","can_delete":false,"product_type":"c1","uid":1983237,"ip_address":"江苏","ucode":"DF4E7E1FAFB509","user_header":"https://static001.geekbang.org/account/avatar/00/1e/43/05/3fbf26cf.jpg","comment_is_top":false,"comment_ctime":1673447960,"is_pvip":false,"replies":[{"id":133431,"content":"Spinnaker 在国内确实用的比较少，不过它在国外很流行，也是老牌的持续部署工具，整体相对比较重。\n\n如果对 Spinnaker 感兴趣，可以看看我写的 《Soinnaker 实战》这本书。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1673488923,"ip_address":"广东","comment_id":366194,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"我们用的是spinnaker， 配置不难，完全可以terraform创建，里面集成了helm和customize，可以用Jenkins job，docker repository, pub&#47;sub 自动触发。用惯了觉得挺好用，但是听孟凡杰说用的人不多。。","like_count":3,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599368,"discussion_content":"Spinnaker 在国内确实用的比较少，不过它在国外很流行，也是老牌的持续部署工具，整体相对比较重。\n\n如果对 Spinnaker 感兴趣，可以看看我写的 《Soinnaker 实战》这本书。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673488923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364519,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1179432,"ip_address":"广东","ucode":"952AA9B2CD91CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/28/040f6f01.jpg","comment_is_top":false,"comment_ctime":1671074086,"is_pvip":true,"replies":[{"id":132516,"content":"加油，后续课程还有更好玩的实验。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671101359,"ip_address":"广东","comment_id":364519,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"我本地windows实验成功了，感谢大佬","like_count":3,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596594,"discussion_content":"加油，后续课程还有更好玩的实验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671101359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364421,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"广东","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1670942864,"is_pvip":false,"replies":[{"id":132502,"content":"FluxCD 在 11 月底刚通过 CNCF 的评审，进入了毕业阶段。\n\n这意味着社区已经在生产环境下大规模采用了 FluxCD，它的稳定性得到了充分的验证。\n\nGitOps 领域目前两大工具中，FluxCD 的强项在于做集成，而 ArgoCD 更适合工程实践。这两款工具都非常优秀，所以在专栏里我都有进行介绍。\n\n关于 ArgoCD，在后续第 22 讲中会深入介绍，期待我们再见面。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671094841,"ip_address":"广东","comment_id":364421,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"老师，你能介绍一下为什么flux 能成功吗？他比其他gitops 方案到底强在哪里","like_count":3,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596572,"discussion_content":"FluxCD 在 11 月底刚通过 CNCF 的评审，进入了毕业阶段。\n\n这意味着社区已经在生产环境下大规模采用了 FluxCD，它的稳定性得到了充分的验证。\n\nGitOps 领域目前两大工具中，FluxCD 的强项在于做集成，而 ArgoCD 更适合工程实践。这两款工具都非常优秀，所以在专栏里我都有进行介绍。\n\n关于 ArgoCD，在后续第 22 讲中会深入介绍，期待我们再见面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671094841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1033219,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","nickname":"JianXu","note":"","ucode":"2A61BDBB573BDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":596606,"discussion_content":"Tekton 呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671109849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":596572,"ip_address":"上海","group_id":0},"score":596606,"extra":""}]}]},{"had_liked":false,"id":364367,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"广东","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1670902426,"is_pvip":false,"replies":[{"id":132500,"content":"也是一种方案。\n\n不过在工程实践中不建议在 CI（Jenkins）里干持续部署的活，本质上持续部署需要更多的能力支持。比如在界面上应该能够很方便看出应用版本、健康状态、应用资源拓扑等，在部署能力支持上，可能还需要蓝绿部署、灰度和金丝雀发布，甚至是结合人工审核定制发布工作流。\n\n这部分的内容可以在第 22、24、25 和 26 将深入了解。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671094532,"ip_address":"广东","comment_id":364367,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"我们现在使用的是在Jenkins上通过Terraform部署Helm chart，只要修改Terraform里的镜像版本号就能部署或回滚应用。类似这个lab: https:&#47;&#47;github.com&#47;chance2021&#47;devopsdaydayup&#47;blob&#47;main&#47;004-TerraformDockerDeployment&#47;README.md","like_count":3,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596569,"discussion_content":"也是一种方案。\n\n不过在工程实践中不建议在 CI（Jenkins）里干持续部署的活，本质上持续部署需要更多的能力支持。比如在界面上应该能够很方便看出应用版本、健康状态、应用资源拓扑等，在部署能力支持上，可能还需要蓝绿部署、灰度和金丝雀发布，甚至是结合人工审核定制发布工作流。\n\n这部分的内容可以在第 22、24、25 和 26 将深入了解。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1671094532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259323,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","nickname":"陈斯佳","note":"","ucode":"C236F874FC767A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596850,"discussion_content":"感谢老师指点 期待之后的课程！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671243169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364663,"user_name":"浅浅","can_delete":false,"product_type":"c1","uid":1151125,"ip_address":"广东","ucode":"5C9ABB691048CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/90/95/86b21093.jpg","comment_is_top":false,"comment_ctime":1671278483,"is_pvip":false,"replies":[{"id":132805,"content":"今天已经更新了哦，每周一、三、五更新，期待和你再见面~","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671431652,"ip_address":"广东","comment_id":364663,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"老师好，内容太棒了！请问什么时候更新后面的内容呀","like_count":2,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597088,"discussion_content":"今天已经更新了哦，每周一、三、五更新，期待和你再见面~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671431652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364726,"user_name":"includestdio.h","can_delete":false,"product_type":"c1","uid":2314854,"ip_address":"广东","ucode":"5027BACE9319CD","user_header":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","comment_is_top":false,"comment_ctime":1671417914,"is_pvip":true,"replies":[{"id":132810,"content":"感谢指正","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671434319,"ip_address":"广东","comment_id":364726,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"“接下来，执行 kubectl apply -f new-hello-worlad-flask.yaml 来更新应用” world写错了 ，还有下面的命令","like_count":1,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597097,"discussion_content":"感谢指正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671434319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381697,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"陕西","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1695697050,"is_pvip":false,"replies":[{"id":139051,"content":"这个场景可以用 gitops 实现。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1695734114,"ip_address":"广东","comment_id":381697,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"代码使用阿里云code，jenkins pipeline，手动构建\n1. 开发提交代码到仓库，告知代码已经提交，\n2. 运维人员或者开发&#47;测试人员登陆jenkins构建对应的项目模块\n3. pipeline作业构建分多个stage阶段，拉取代码--&gt; mvn build --&gt; docker build&amp;push --&gt; kubectl set image \n\n最近领导要求改造发布模式，github action + argocd，自动触发式 发布应用到华为cce 集群","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628720,"discussion_content":"这个场景可以用 gitops 实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695734114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374934,"user_name":"Dexter","can_delete":false,"product_type":"c1","uid":2608728,"ip_address":"上海","ucode":"909CABC4AC4AC9","user_header":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","comment_is_top":false,"comment_ctime":1684671397,"is_pvip":true,"replies":[{"id":136889,"content":"无法克隆 github 仓库，看起来是网络原因。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1684902673,"ip_address":"广东","comment_id":374934,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312001,"comment_content":"ello-world-flask   https:&#47;&#47;github.com&#47;dexter-liu&#47;fluxcd-demo.git   14m   False   failed to checkout and determine revision: unable to clone &#39;https:&#47;&#47;github.com&#47;dexter-liu&#47;fluxcd-demo.git&#39;: Get &quot;https:&#47;&#47;github.com&#47;dexter-liu&#47;fluxcd-demo.git&#47;info&#47;refs?service=git-upload-pack&quot;: dial tcp: lookup github.com on 10.96.0.10:53: server misbehaving\n----这个会是什么问题？\n\n[root@master01 ~]# dig -t A github.com\n\n; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.10 &lt;&lt;&gt;&gt; -t A github.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7514\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 8, ADDITIONAL: 17\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;github.com.                    IN      A\n\n;; ANSWER SECTION:\ngithub.com.             11      IN      A       20.207.73.82\n\n","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619229,"discussion_content":"无法克隆 github 仓库，看起来是网络原因。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684902673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368656,"user_name":"大圈","can_delete":false,"product_type":"c1","uid":1803089,"ip_address":"北京","ucode":"17932DD2349C38","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/51/aa521f2a.jpg","comment_is_top":false,"comment_ctime":1676529769,"is_pvip":false,"replies":[{"id":134260,"content":"加油~","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1676542321,"ip_address":"广东","comment_id":368656,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"实践起来！很棒","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605004,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676542321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366279,"user_name":"booboo","can_delete":false,"product_type":"c1","uid":1016502,"ip_address":"上海","ucode":"A6670358603D7D","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLRibTnDs0ZjFrAtfzcwDDFnaX1DEY8qKoFczP8e8ucAdTr7C33bYFDYxpN8VRhgEVsDrBwILO8Msw/132","comment_is_top":false,"comment_ctime":1673533396,"is_pvip":false,"replies":[{"id":133467,"content":"需要把仓库权限设置为公开，私有仓库需要为 fluxcd 提供权限，参考这个链接：https:&#47;&#47;fluxcd.io&#47;flux&#47;components&#47;source&#47;gitrepositories&#47;#basic-access-authentication","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1673575349,"ip_address":"广东","comment_id":366279,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"我把fluxcd-repo.yaml里的url改成我自己的仓库地址，执行kubectl apply -f fluxcd-repo.yaml之后用kubectl get gitrepository查看状态，报这个错“failed to checkout and determine revision: unable to clone &#39;https:&#47;&#47;jihulab.com&#47;xxxx&#47;fluxcd-demo&#39;: authentication required“。本地跟jihulab的ssh连接是正常的。报这个错是什么原因？","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599514,"discussion_content":"需要把仓库权限设置为公开，私有仓库需要为 fluxcd 提供权限，参考这个链接：https://fluxcd.io/flux/components/source/gitrepositories/#basic-access-authentication","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673575349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366269,"user_name":"郑海成","can_delete":false,"product_type":"c1","uid":1192616,"ip_address":"北京","ucode":"B0363EA4B2C646","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/a8/d5bf5445.jpg","comment_is_top":false,"comment_ctime":1673524072,"is_pvip":true,"replies":[{"id":133452,"content":"没关系，很久不用了😁","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1673530652,"ip_address":"广东","comment_id":366269,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"老师的QQ号暴露了😁","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599457,"discussion_content":"没关系，很久不用了😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673530652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365165,"user_name":"Geek_2cd417","can_delete":false,"product_type":"c1","uid":2296201,"ip_address":"广东","ucode":"5057876B75310C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qftso2tiat4Y6LB5dxynrqm54aprlPGQBEuPsFLoyEr8JLKoJAmjtFePG8YzaDqlk5UVIsIUMMIH7Yg7iaWhTnmQ/132","comment_is_top":false,"comment_ctime":1672208850,"is_pvip":false,"replies":[{"id":132986,"content":"示例里是从 latest 的镜像版本修改为 v1，如果你也是按照这个例子的话看到 v1 说明已经自动更新了。\n\n如果不是这个问题，你还可以检查一下集群和 github 的连通性。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1672213769,"ip_address":"广东","comment_id":365165,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"修改代码仓库后我的页面跟着修改了，实现了自动部署。 但是kubectl describe kustomization hello-world-flask输出的版本一直是v1没有变，为什么呢？","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597765,"discussion_content":"示例里是从 latest 的镜像版本修改为 v1，如果你也是按照这个例子的话看到 v1 说明已经自动更新了。\n\n如果不是这个问题，你还可以检查一下集群和 github 的连通性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672213769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364671,"user_name":"🍓 雲","can_delete":false,"product_type":"c1","uid":2198648,"ip_address":"广东","ucode":"CBAA170DF897B3","user_header":"https://static001.geekbang.org/account/avatar/00/21/8c/78/25eeacd7.jpg","comment_is_top":false,"comment_ctime":1671290434,"is_pvip":false,"replies":[{"id":132806,"content":"一般做法是回退存储 Helm Chart 的 Git 仓库，FluxCD 会比较差异，并实现回退。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671431788,"ip_address":"广东","comment_id":364671,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"Fluxed 如果想回推退某个helm chart 版本，该怎么做比较优雅","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597089,"discussion_content":"一般做法是回退存储 Helm Chart 的 Git 仓库，FluxCD 会比较差异，并实现回退。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671431788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364670,"user_name":"IF-Processing","can_delete":false,"product_type":"c1","uid":1205736,"ip_address":"广东","ucode":"8298C3C9320D94","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/e8/d1e52dbb.jpg","comment_is_top":false,"comment_ctime":1671288561,"is_pvip":true,"replies":[{"id":132803,"content":"今天更新了，很高兴再见到你~","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671431212,"ip_address":"广东","comment_id":364670,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"大佬，在线等，催更.. ：）","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597086,"discussion_content":"今天更新了，很高兴再见到你~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671431212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364494,"user_name":"Fchen","can_delete":false,"product_type":"c1","uid":1124609,"ip_address":"广东","ucode":"AA2130C6661F30","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/01/203fcb5d.jpg","comment_is_top":false,"comment_ctime":1671029315,"is_pvip":false,"replies":[{"id":132510,"content":"是的，本章介绍的是一个最简单的例子。企业级的 GitOps 工作流在 22 讲中有介绍，期待再次看到你的回复~","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671095536,"ip_address":"广东","comment_id":364494,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"这个gitops阶段看起来并不完整，最直接的是缺少了镜像构建阶段的流程。对于企业生产使用，还是简单了点，我们是自研的，可以根据不同角色，不同业务场景，不同发布场景等做一些适配","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596580,"discussion_content":"是的，本章介绍的是一个最简单的例子。企业级的 GitOps 工作流在 22 讲中有介绍，期待再次看到你的回复~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671095536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364477,"user_name":"Promise","can_delete":false,"product_type":"c1","uid":1038646,"ip_address":"广东","ucode":"3E07E270EED2E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/36/92d8eb91.jpg","comment_is_top":false,"comment_ctime":1671005888,"is_pvip":true,"replies":[{"id":132505,"content":"这部分内容在第 18 讲中有介绍，期待你的留言。","user_name":"作者回复","user_name_real":"编辑","uid":1275456,"ctime":1671095165,"ip_address":"广东","comment_id":364477,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"我们目前使用的方案是gitlab+Tekton+Argocd的方案但是我只搞了80%还没有完成在打包完镜像以后修改Helm部分。Tekton负责CI的部分，通过git提交触发gitlab的的push事件，Tekton监听push事件，使用doud的方式打包镜像。Argocd负责CD的部分监听gitlab上Helm项目的变化，然后自动部署到k8s上。老师会讲kaniko打包镜像吗？还有CICD项目很多时使用Tekton如何管理，是一个项目创建一个pipline吗？","like_count":0,"discussions":[{"author":{"id":1275456,"avatar":"https://static001.geekbang.org/account/avatar/00/13/76/40/791d0f5e.jpg","nickname":"王炜","note":"","ucode":"B6F98A1EC06BDB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596575,"discussion_content":"这部分内容在第 18 讲中有介绍，期待你的留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671095166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388707,"user_name":"Geek__Phoenix","can_delete":false,"product_type":"c1","uid":1453358,"ip_address":"广东","ucode":"EEA694C7DBB4A3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erGficovWwKUXs0zBEb87TtibFg8CC3icvXpPPicia4fkep5540LVfUAjCPWYhrCR8xQxuU97icS9HSfkzw/132","comment_is_top":false,"comment_ctime":1710748686,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"$ kubectl apply -f https:&#47;&#47;ghproxy.com&#47;https:&#47;&#47;raw.githubusercontent.com&#47;lyzhang1999&#47;resource&#47;main&#47;fluxcd&#47;fluxcd.yaml 这条命令写错了吧，应该是$ kubectl apply -f https:&#47;&#47;raw.githubusercontent.com&#47;lyzhang1999&#47;resource&#47;main&#47;fluxcd&#47;fluxcd.yaml 吧？在浏览器上输入https:&#47;&#47;raw.githubusercontent.com&#47;lyzhang1999&#47;resource&#47;main&#47;fluxcd&#47;fluxcd.yaml 可以看到fluxcd.yaml的内容。","like_count":2},{"had_liked":false,"id":364725,"user_name":"includestdio.h","can_delete":false,"product_type":"c1","uid":2314854,"ip_address":"中国台湾","ucode":"5027BACE9319CD","user_header":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","comment_is_top":false,"comment_ctime":1671417875,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100312001,"comment_content":"接下来，执行 kubectl apply -f new-hello-worlad-flask.yaml 来更新应用","like_count":1},{"had_liked":false,"id":365164,"user_name":"Geek_2cd417","can_delete":false,"product_type":"c1","uid":2296201,"ip_address":"上海","ucode":"5057876B75310C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qftso2tiat4Y6LB5dxynrqm54aprlPGQBEuPsFLoyEr8JLKoJAmjtFePG8YzaDqlk5UVIsIUMMIH7Yg7iaWhTnmQ/132","comment_is_top":false,"comment_ctime":1672208701,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100312001,"comment_content":"修改代码仓库后我，我的页面跟着修改了，实现了自动部署。但是为什么kubectl describe kustomization hello-world-flask","like_count":0},{"had_liked":false,"id":364808,"user_name":"橙汁","can_delete":false,"product_type":"c1","uid":1332257,"ip_address":"北京","ucode":"EC3FF10D708C9D","user_header":"https://static001.geekbang.org/account/avatar/00/14/54/21/0bac2254.jpg","comment_is_top":false,"comment_ctime":1671524207,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100312001,"comment_content":"牛逼牛逼 思路清晰","like_count":0},{"had_liked":false,"id":364346,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"北京","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1670851354,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100312001,"comment_content":"good","like_count":0}]}