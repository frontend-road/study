{"id":778871,"title":"05｜用5种不同模型展示模型交互5大基本原则","content":"<p>你好，我是黄佳。欢迎你学习大模型应用开发实战课。</p><p>在之前的启程篇中，我着重给你介绍了Assistants API的使用。这节课我们进入一个短小但是重要的篇章——提示工程。</p><p>所谓提示工程，就是精心设计输入给AI模型的文本（即提示），引导模型生成我们期望的输出。这就像是和你的同事、领导、下属或者朋友对话，你需要给它明确的指令。你提供充足的背景信息，才能得到满意的回答。可以说，优秀的提示是人类智慧和机器能力的完美结合，它虽然没有改变AI的思维能力上限，但是能够<strong>把</strong> <strong>AI</strong> <strong>的表现提升到接近其上限的位置</strong>。这其实非常重要。</p><p>在这一课中，我将用5种不同模型，通过5个实用的例子，来向你展示和模型对话交互的5大基本原则。</p><h2>技巧一：编写清晰的指令，让模型“一步到位”地完成任务</h2><p>模型就像是你的得力助手，但它们并不会读心术。为了让助手高效工作，你需要提供清晰、详尽的指令，让它明白你的需求。假设我们要生成一段Python代码，如果我们详细描述了代码编写的要求，模型就能更好地完成任务。</p><p>例如，要通过Python实现对列表元素求和，我们可以尝试这样的提示。</p><pre><code>prompt = &quot;&quot;&quot;\n请编写一个Python函数实现对列表求和。要求:\n函数名为sum_list,接受一个列表作为参数\n使用内置的sum()函数实现列表求和\n添加必要的注释,说明函数的输入输出\n在函数末尾添加几个测试用例,并打印结果\n&quot;&quot;&quot;\n</code></pre><p>可以看到，这个提示明确了函数名、实现方式、注释要求、测试用例等各个方面，犹如一份详尽的“编程作业要求”。有了这样的输入，即使是能力较弱的模型（如GPT3.5）也能输出一段高质量的代码。</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\"># 创建OpenAI Client\nfrom openai import OpenAI\nclient = OpenAI()\n\n# 定义使用OpenAI的GPT-3.5-Turbo模型生成代码的函数\ndef generate_code(prompt):\n&nbsp; &nbsp; client = OpenAI()\n&nbsp; &nbsp; response = client.chat.completions.create(\n&nbsp; &nbsp; &nbsp; &nbsp; model=\"gpt-3.5-turbo\",\n&nbsp; &nbsp; &nbsp; &nbsp; messages=[\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\"role\": \"system\", \"content\": \"You are a helpful Python programming assistant.\"},\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\"role\": \"user\", \"content\": prompt}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]\n&nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; return response.choices[0].message.content\n\n# 定义提示信息,包含函数要求\nprompt = \"\"\"\n&nbsp; &nbsp; 请编写一个Python函数实现对列表求和。要求:\n\n&nbsp; &nbsp; 函数名为sum_list,接受一个列表作为参数\n&nbsp; &nbsp; 使用内置的sum()函数实现列表求和\n&nbsp; &nbsp; 添加必要的注释,说明函数的输入输出\n&nbsp; &nbsp; 在函数末尾添加几个测试用例,并打印结果 \"\"\"\n\n# 生成代码\ngenerated_code = generate_code(prompt)\nprint(generated_code)\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">```python\ndef sum_list(lst):\n&nbsp; &nbsp; \"\"\"\n&nbsp; &nbsp; 对列表中的元素进行求和\n\n&nbsp; &nbsp; Parameters:\n&nbsp; &nbsp; lst (list): 包含数字的列表\n\n&nbsp; &nbsp; Returns:\n&nbsp; &nbsp; int: 列表元素的总和\n&nbsp; &nbsp; \"\"\"\n&nbsp; &nbsp; return sum(lst)\n\n# 测试用例\ntest_list1 = [1, 2, 3, 4, 5]\nprint(sum_list(test_list1))&nbsp; # 输出: 15\n\ntest_list2 = [10, 20, 30]\nprint(sum_list(test_list2))&nbsp; # 输出: 60\n\ntest_list3 = [0, -1, 1]\nprint(sum_list(test_list3))&nbsp; # 输出: 0\n```\\\n</code></pre><p>GPT3.5当然能够依据清晰的指令完成任务。</p><h2>技巧二：提供参考资料，给模型“查字典”的机会</h2><p>其实，这个技巧就是最简版的RAG（检索增强式生成）。尽管大模型就像一位博学多才的助手，但它的知识全部被固定在了其训练完成的那一个刹那，因此很多情况下它需要查阅资料来回答问题。</p><p>你可以在提示中提供相关的背景知识，模型就能根据这些线索产生更准确、可信的回答。来看下面的例子。</p><p>下面这个例子，我们使用了Claude-3的最强模型claude-3-opus。请你先去<a href=\"https://www.anthropic.com/\">Anthropic官网</a>注册一下自己的API Key。</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/3e/cf64e0f23fcdf92405e336e478dd253e.png?wh=1769x999\" alt=\"图片\"></p><pre><code class=\"language-plain\">import os\nimport anthropic\n\n# 销售数据\nreference_data = \"\"\"\n销售数据:\n日期,产品,销量,单价,总收入\n2023-01-01,iPhone 13,100,6000,600000\n2023-01-01,iPhone 14,50,8000,400000\n2023-01-02,iPhone 13,80,6000,480000\n2023-01-02,iPhone 14,60,8000,480000\n2023-01-03,iPhone 13,120,5800,696000\n2023-01-03,iPhone 14,80,7800,624000\n\"\"\"\n\n# 创建Anthropic客户端\nclient = anthropic.Anthropic(api_key=os.environ[\"ANTHROPIC_API_KEY\"])\n\n# 生成销售报告的函数\ndef generate_sales_report(reference_data, prompt):\n&nbsp; &nbsp; response = client.messages.create(\n&nbsp; &nbsp; &nbsp; &nbsp; model=\"claude-3-opus-20240229\",\n&nbsp; &nbsp; &nbsp; &nbsp; max_tokens=1000,\n&nbsp; &nbsp; &nbsp; &nbsp; temperature=0.0,\n&nbsp; &nbsp; &nbsp; &nbsp; system=\"You are an AI assistant that generates sales reports based on the given data.\",\n&nbsp; &nbsp; &nbsp; &nbsp; messages=[\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\"role\": \"user\", \"content\": f\"Here is the sales data:\\n{reference_data}\\n\\nPlease generate a report to answer the following question:\\n{prompt}\"}\n&nbsp; &nbsp; &nbsp; &nbsp; ] &nbsp; &nbsp;)\n&nbsp; &nbsp; return response.content\n\n# 测试示例\nprompt1 = \"根据上述销售数据,计算iPhone 13和iPhone 14的总销量各是多少?\"\nreport1 = generate_sales_report(reference_data, prompt1)\nprint(\"查询1结果:\\n\", report1)\n\nprompt2 = \"根据上述销售数据,哪个产品的总收入更高?高多少?\"\nreport2 = generate_sales_report(reference_data, prompt2)\nprint(\"查询2结果:\\n\", report2)\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">查询1结果:\n&nbsp;[ContentBlock(text='根据提供的销售数据,我计算得出iPhone 13和iPhone 14在这3天的总销量如下:\\n\\niPhone 13总销量:\\n2023-01-01: 100台\\n2023-01-02: 80台 \\n2023-01-03: 120台\\niPhone 13总销量 = 100 + 80 + 120 = 300台\\n\\niPhone 14总销量:\\n2023-01-01: 50台\\n2023-01-02: 60台\\n2023-01-03: 80台&nbsp; \\niPhone 14总销量 = 50 + 60 + 80 = 190台\\n\\n综上所述,在2023年1月1日至3日这三天:\\niPhone 13的总销量为300台\\niPhone 14的总销量为190台', type='text')]\n查询2结果:\n&nbsp;[ContentBlock(text='根据给出的销售数据,我对 iPhone 13 和 iPhone 14 的销售情况进行了分析比较,得出以下结论:\\n\\niPhone 13 总销量:300 台\\niPhone 13 总收入:1,776,000 元\\n\\niPhone 14 总销量:190 台 \\niPhone 14 总收入:1,504,000 元\\n\\n通过计算可以看出,iPhone 13 的总收入比 iPhone 14 高出 272,000 元。\\n\\n虽然 iPhone 14 的单价更高,但由于 iPhone 13 的销量远超 iPhone 14,因此最终 iPhone 13 的总收入更高。\\n\\n综上所述,iPhone 13 的总收入比 iPhone 14 高 272,000 元。iPhone 13 凭借更高的性价比在销量上占据优势,使其总收入超过了 iPhone 14。', type='text')]\n</code></pre><p>不难看出，Claude API的使用方式和调用语法与OpenAI API都是非常相似的。如果你注册Claude API遇到了麻烦，你也可以试着用Open AI的GPT模型完成同样的功能。</p><h2>技巧三：分而治之，化繁为简、逐步求解</h2><p>面对复杂的大问题，大模型可能也会“望而生畏”。这时不妨将大任务拆解成多个小任务，引导模型一步步完成。正所谓“分而治之”，问题就迎刃而解了。</p><p>请看这个使用ChatGLM3（来自智谱AI的著名中文开源模型）写数据分析报告的例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/6a/a68fbca01e8d60e2e79a97926730ec6a.png?wh=2467x1858\" alt=\"图片\"></p><p>下面这个程序要从<a href=\"https://huggingface.co/\">Hugging Face Transformers库</a>中导入AutoTokenizer和AutoModel，并加载ChatGLM的tokenizer和model。因此，要确保你已经安装了Transformers库，并且有足够的GPU内存来加载模型。</p><pre><code class=\"language-plain\"># 导入Transformer库\nfrom transformers import AutoTokenizer, AutoModel\n\n# 加载ChatGLM tokenizer和model\ntokenizer = AutoTokenizer.from_pretrained(\"THUDM/chatglm3-6b\", trust_remote_code=True)\nmodel = AutoModel.from_pretrained(\"THUDM/chatglm3-6b\", trust_remote_code=True).half().cuda()\n\n# 定义任务拆解步骤\nsteps = [\n&nbsp; &nbsp; \"提出 2 个切入点\",\n&nbsp; &nbsp; \"列出每个切入点要分析的指标\",\n&nbsp; &nbsp; \"假设你发现了有价值的洞见,提出 2 条可行的建议\",\n&nbsp; &nbsp; \"综合成一份完整报告\"\n]\n\n# 将所有步骤合并成一个字符串，每个步骤用逗号和空格分隔\ncombined_steps = ', '.join(steps)\n\n# 使用f-string格式化最终的prompt\nprompt = f\"作为一位数据分析师，请根据以下步骤撰写一份数据分析报告：{combined_steps}。\"\n\n# 对prompt进行tokenize\ninputs = tokenizer(prompt, return_tensors=\"pt\")\ninputs = {k: v.cuda() for k, v in inputs.items()}\n\n# 使用model进行推理\noutput = model.generate(**inputs, max_length=2048, top_p=0.7, top_k=0)\n\n# 对输出进行解码\nresponse = tokenizer.decode(output[0])\n\n# 打印结果\nprint(\"ChatGLM生成的回复:\")\nprint(response)\n</code></pre><p>在这个例子中，我们使用tokenizer对prompt进行编码，并将编码后的输入转移到GPU上。使用model进行推理，生成输出。你可以根据需要调整max_length、top_p和top_k等参数。对生成的输出进行解码，得到最终的回复文本。</p><pre><code># 定义任务拆解步骤\nsteps = [\n    &quot;提出 2 个切入点&quot;,\n    &quot;列出每个切入点要分析的指标&quot;,\n    &quot;假设你发现了有价值的洞见,提出 2 条可行的建议&quot;,\n    &quot;综合成一份完整报告&quot;\n]\n</code></pre><p>上面这个提示的优点在于，它并不笼统，而是把一个大目标（撰写数据分析报告）拆解成了几个清晰明确的步骤，这样就让大模型的思路更加有逻辑，更加清晰。任务越具体，大模型就能做到有的放矢。</p><p>输出如下：</p><pre><code class=\"language-plain\">ChatGLM生成的回复:\n[gMASK] sop 作为一位数据分析师，请根据以下步骤撰写一份数据分析报告：提出 2 个切入点, 列出每个切入点要分析的指标, 假设你发现了有价值的洞见,提出 2 条可行的建议, 综合成一份完整报告。\n切入点一：分析用户在社交媒体上的行为。 切入点二：分析用户在电商平台上的行为。\n\n报告标题：社交媒体与电商平台用户行为分析报告\n\n一、背景介绍\n\n随着互联网的普及和社交媒体、电商平台的快速发展，越来越多的用户在线社交和购物。作为一位数据分析师，我们选取了两个切入点来分析用户的行为，分别是社交媒体和电商平台。通过分析这些数据，我们可以更好地了解用户的需求和行为模式，从而为产品优化和营销策略提供有价值的参考。\n\n二、切入点一：分析用户在社交媒体上的行为\n\n1. 分析指标\n\n(1) 用户活跃度：包括日活跃用户、周活跃用户、月活跃用户等，用于了解用户的活跃程度和用户粘性。\n\n(2) 用户互动度：包括评论、点赞、分享等，用于了解用户之间的互动情况以及用户对内容的喜好程度。\n\n(3) 用户关注度：关注的人数和关注比例，用于了解用户对某些内容或人物的兴趣程度。\n\n(4) 用户留存率：用户在一段时间内继续使用社交媒体的比例，用于了解用户的忠诚度和满意度。\n\n2. 数据收集与处理\n\n(1) 数据收集：从社交媒体平台获取用户行为数据，包括用户活跃度、互动度、关注度、留存率等。\n\n(2) 数据处理：对收集到的数据进行清洗和整理，去除异常值和重复数据，保证数据的准确性和完整性。\n\n(3) 数据分析：通过描述性统计、相关性分析、趋势分析等方法，对数据进行深入挖掘，发现有价值的洞见。\n\n三、切入点二：分析用户在电商平台上的行为\n\n1. 分析指标\n\n(1) 用户访问量：包括日访问量、周访问量、月访问量等，用于了解用户的访问频率和用户来源。\n\n(2) 用户转化率：用户在访问电商平台后完成购买的比例，用于了解用户的购物意愿和购物体验。\n\n(3) 用户留存率：用户在一段时间内继续在电商平台上的比例，用于了解用户的忠诚度和满意度。\n\n(4) 用户评价：用户的评价和反馈，用于了解用户对商品和服务的满意度。\n\n2. 数据收集与处理\n\n(1) 数据收集：从电商平台获取用户行为数据，包括用户访问量、转化率、留存率、评价等。\n\n(2) 数据处理：对收集到的数据进行清洗和整理，去除异常值和重复数据，保证数据的准确性和完整性。\n\n(3) 数据分析：通过描述性统计、相关性分析、趋势分析等方法，对数据进行深入挖掘，发现有价值的洞见。\n\n四、结论与建议\n\n通过以上分析，我们发现社交媒体和电商平台上的用户行为存在一定的关联性。例如，在社交媒体上活跃的用户在电商平台上的访问量也可能较高，且完成购买的比例也较高。同时，用户在社交媒体上的互动度和关注度较高的内容，在电商平台上也往往具有较高的用户留存率和转化率。\n\n基于以上发现，我们提出以下建议：\n\n1. 针对社交媒体平台，可以加大与用户互动的内容和话题的推广，提高用户的活跃度和留存率。同时，可以加强对用户关注度和互动度的数据分析，挖掘有价值的内容和话题，提高用户的参与度和忠诚度。\n\n2. 针对电商平台，可以优化购物体验，提高用户转化率。同时，可以通过用户评价和反馈，了解用户对商品和服务的满意度，不断优化商品和服务，提高用户留存率和转化率。\n\n总之，通过数据分析可以更好地了解用户的行为模式和需求，从而为产品优化和营销策略提供有力支持。\n</code></pre><p>从输出结果上看，ChatGLM3这个开源模型，出色地完成了一份数据分析报告。这个步步为营、分而治之的提示，起到了重要的引导作用，功不可没。</p><h2>技巧四：思考、再思考，全面审视问题，得出周全结论</h2><p>有时模型会得出草率的结论，我们可以引导它多角度思考问题，再下定论。这就像面试官常问的“你还有什么要补充的吗”，“这个方案可能会有哪些漏洞”，“还有什么其它切入点”，旨在全面审视问题，避免遗漏重要信息。</p><p>来看一个引导模型反复思考的例子。在下面这个例子中，我们使用了大小仅有2.2G的TinyLlama来尝试完成一个较复杂的推理。</p><pre><code class=\"language-plain\"># 导入Transformer库\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\n\ntokenizer = AutoTokenizer.from_pretrained(\"TinyLlama/TinyLlama-1.1B-Chat-v1.0\")\nmodel = AutoModelForCausalLM.from_pretrained(\"TinyLlama/TinyLlama-1.1B-Chat-v1.0\")\n\n# 定义初始的问题和prompt\nquestion = \"以下是一位大学生申请研究生的基本情况:\\n- GPA: 3.8, 专业: 计算机科学\\n- GRE: V 158, Q 170, AW 4.0\\n- 推荐信: 两封强推\\n- 科研经历: 一年图像处理项目,一篇相关领域发表论文\\n- 申请方向: 人工智能\\n\\n请分析该学生的申请竞争力,并给出你的录取结论。\"\nprompt = f\"{question}\\n\\n回答:\"\n\n# 第一次推理\ninputs = tokenizer(prompt, return_tensors=\"pt\").to(model.device)\noutputs = model.generate(**inputs, max_new_tokens=200, top_p=0.9, temperature=0.7)\nfirst_conclusion = tokenizer.decode(outputs[0], skip_special_tokens=True)\n\n# 第二次推理,考虑其他因素\nsecond_prompt = f\"{question}\\n\\n前面我们从学业成绩、科研经历等方面分析了这位学生的竞争力,得出了初步结论。现在请你进一步思考:\\n\\n1. 除了已经考虑的因素,还有哪些方面可能影响录取结果?\\n2. 这位学生的申请还有哪些潜在的不足之处?\\n\\n请综合这些额外的因素,给出一个更加全面的分析和结论。\\n\\n回答:\"\ninputs = tokenizer(second_prompt, return_tensors=\"pt\").to(model.device) &nbsp;\noutputs = model.generate(**inputs, max_new_tokens=300, top_p=0.9, temperature=0.7)\nsecond_conclusion = tokenizer.decode(outputs[0], skip_special_tokens=True)\n\n# 打印两次推理的结论\nprint(\"第一次推理的结论:\")\nprint(first_conclusion)\nprint(\"\\n第二次推理的结论:\")\nprint(second_conclusion)\n</code></pre><p>输出如下：</p><pre><code class=\"language-plain\">第一次推理的结论:\n以下是一位大学生申请研究生的基本情况:\n- GPA: 3.8, 专业: 计算机科学\n- GRE: V 158, Q 170, AW 4.0\n- 推荐信: 两封强推\n- 科研经历: 一年图像处理项目,一篇相关领域发表论文\n- 申请方向: 人工智能\n\n请分析该学生的申请竞争力,并给出你的录取结论。\n\n回答:\n\n该学生的申请竞争力很高,因为他们拥有一个强大的GPA和GRE分数,并且他们已经具有一年图像处理项目和相关领域发表论文的科研经历。他们的申请方向也很有趣,人工智能是一个具有很高的竞争力的领域,因为它是一个具有巨大的未来发展的领域。\n\n因此,我们将推荐该学生获得录取。\n\n第二次推理的结论:\n以下是一位大学生申请研究生的基本情况:\n- GPA: 3.8, 专业: 计算机科学\n- GRE: V 158, Q 170, AW 4.0\n- 推荐信: 两封强推\n- 科研经历: 一年图像处理项目,一篇相关领域发表论文\n- 申请方向: 人工智能\n\n请分析该学生的申请竞争力,并给出你的录取结论。\n\n前面我们从学业成绩、科研经历等方面分析了这位学生的竞争力,得出了初步结论。现在请你进一步思考:\n\n1. 除了已经考虑的因素,还有哪些方面可能影响录取结果?\n2. 这位学生的申请还有哪些潜在的不足之处?\n\n请综合这些额外的因素,给出一个更加全面的分析和结论。\n\n回答:\n\n1. 除了已经考虑的因素,还有哪些方面可能影响录取结果?\n\n- 这位学生的申请还有哪些潜在的不足之处?\n\n- 这位学生的申请竞争力还有哪些方面帮助他/她获得录取?\n\n2. 这位学生的申请竞争力还有哪些方面帮助他/她获得录取?\n\n- 这位学生的申请竞争力还有哪些方面帮助他/她获得录取?\n\n- 这位学生的申请竞争力还有哪些方面帮助他/她获得录取?\n\n- 这位学生的申请竞争力还有哪些方面帮助他/她获得录取?\n</code></pre><p>从输出的结果来看，第一次推理的结果还比较理想。然而当我们要求模型再次进行更为深入的思考，TinyLlama这个规模的模型似乎无法跟上提示词的思路，也无法进行进一步的思考。</p><p>因此，要完成更复杂的推理，如果硬件条件允许，你应该选择更大的模型，如 llama3-7b、13b或者 70b 的模型进行尝试。当然如果你没有足够的GPU算力资源，你也可以通过API调用GPT-4或者Claude-3这种强大的闭源模型进行尝试。</p><h2>技巧五：工欲善其事，必先利其器，用外部工具增强模型能力</h2><p>大模型本身固然强，但有时也需要借助外部工具来完成任务。就像工匠需要各种利器一样，模型也可以通过编写代码、调用API等方式，与外部工具协同，就相当于为大模型安装上了能够飞翔的翅膀。</p><p>先看下面的例子，这是一个查询天气信息的简单API示例。（这部分没有大模型的介入，只是想给你介绍这个API的使用方法。）</p><pre><code class=\"language-plain\">import requests\n\ndef get_weather(city):\n&nbsp; &nbsp; api_key = \"213745ddc9d6130ff1335e7b92b93294\" &nbsp;# 替换为你自己的OpenWeatherMap API密钥\n&nbsp; &nbsp; url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&amp;appid={api_key}&amp;units=metric\"\n&nbsp; &nbsp; \n&nbsp; &nbsp; response = requests.get(url)\n&nbsp; &nbsp; if response.status_code == 200:\n&nbsp; &nbsp; &nbsp; &nbsp; data = response.json()\n&nbsp; &nbsp; &nbsp; &nbsp; weather = data[\"weather\"][0][\"description\"]\n&nbsp; &nbsp; &nbsp; &nbsp; temp = data[\"main\"][\"temp\"]\n&nbsp; &nbsp; &nbsp; &nbsp; return f\"The weather in {city} is {weather} with a temperature of {temp}°C.\"\n&nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; return f\"Unable to fetch weather data for {city}.\"\n\ndef main():\n&nbsp; &nbsp; city = input(\"Enter a city name: \")\n&nbsp; &nbsp; weather_info = get_weather(city)\n&nbsp; &nbsp; print(weather_info)\n\nif __name__ == \"__main__\":\n&nbsp; &nbsp; main()\n</code></pre><p>当我们输入beijing，程序就会根据当时的天气返回类似于下面的结果。</p><pre><code class=\"language-plain\">Enter a city name: beijing\nThe weather in beijing is broken clouds with a temperature of 10.94°C.\n</code></pre><p>下面这个程序则是一个使用Anthropic的Claude模型（这里我们选择次强的Sonnet模型）来动态调用 OpenWeatherMap API 的示例，展示了如何使用外部工具增强Claude模型的能力。</p><pre><code class=\"language-plain\"># 导入所需的库\nimport re\nimport requests\nfrom anthropic import Anthropic\n\nclient = Anthropic()\nMODEL_NAME = \"claude-3-sonnet-20240229\" &nbsp;# 指定要使用的Claude模型的名称\n\n# 定义获取天气信息的函数\ndef get_weather(city):\n&nbsp; &nbsp;api_key = \"213745ddc9d6130ff1335e7b92b93294\" &nbsp;# 替换为你自己的OpenWeatherMap API密钥\n&nbsp; &nbsp;url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&amp;appid={api_key}&amp;units=metric\"\n&nbsp; &nbsp;\n&nbsp; &nbsp;response = requests.get(url)\n&nbsp; &nbsp;if response.status_code == 200:\n&nbsp; &nbsp; &nbsp; &nbsp;data = response.json()\n&nbsp; &nbsp; &nbsp; &nbsp;weather = data[\"weather\"][0][\"description\"]\n&nbsp; &nbsp; &nbsp; &nbsp;temp = data[\"main\"][\"temp\"]\n&nbsp; &nbsp; &nbsp; &nbsp;return f\"The weather in {city} is {weather} with a temperature of {temp}°C.\"\n&nbsp; &nbsp;else:\n&nbsp; &nbsp; &nbsp; &nbsp;return f\"Unable to fetch weather data for {city}.\"\n\n# 构建格式化的工具描述字符串\ndef construct_format_tool_for_claude_prompt(name, description, parameters):\n&nbsp; &nbsp;constructed_prompt = (\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;tool_description&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;f\"&lt;tool_name&gt;{name}&lt;/tool_name&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;description&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;f\"{description}\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;/description&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;parameters&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;f\"{construct_format_parameters_prompt(parameters)}\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;/parameters&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;/tool_description&gt;\"\n&nbsp; &nbsp;)\n&nbsp; &nbsp;return constructed_prompt\n\n# 构建格式化的工具参数描述字符串\ndef construct_format_parameters_prompt(parameters):\n&nbsp; &nbsp;constructed_prompt = \"\\n\".join(f\"&lt;parameter&gt;\\n&lt;name&gt;{parameter['name']}&lt;/name&gt;\\n&lt;type&gt;{parameter['type']}&lt;/type&gt;\\n&lt;description&gt;{parameter['description']}&lt;/description&gt;\\n&lt;/parameter&gt;\" for parameter in parameters)\n\n&nbsp; &nbsp;return constructed_prompt\n\n# 构建系统提示,告诉Claude如何使用可用的工具\ndef construct_tool_use_system_prompt(tools):\n&nbsp; &nbsp;tool_use_system_prompt = (\n&nbsp; &nbsp; &nbsp; &nbsp;\"In this environment you have access to a set of tools you can use to answer the user's question.\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"You may call them like this:\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;function_calls&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;invoke&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;tool_name&gt;$TOOL_NAME&lt;/tool_name&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;parameters&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;$PARAMETER_NAME&gt;$PARAMETER_VALUE&lt;/$PARAMETER_NAME&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"...\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;/parameters&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;/invoke&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;/function_calls&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"Here are the tools available:\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;tools&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;+ '\\n'.join([tool for tool in tools]) +\n&nbsp; &nbsp; &nbsp; &nbsp;\"\\n&lt;/tools&gt;\"\n&nbsp; &nbsp;)\n&nbsp; &nbsp;return tool_use_system_prompt\n\n# 从给定的字符串中提取指定标签之间的内容\ndef extract_between_tags(tag: str, string: str, strip: bool = False) -&gt; list[str]:\n&nbsp; &nbsp;ext_list = re.findall(f\"&lt;{tag}&gt;(.+?)&lt;/{tag}&gt;\", string, re.DOTALL)\n&nbsp; &nbsp;if strip:\n&nbsp; &nbsp; &nbsp; &nbsp;ext_list = [e.strip() for e in ext_list]\n&nbsp; &nbsp;return ext_list\n\n# 构建格式化的函数调用结果字符串\ndef construct_successful_function_run_injection_prompt(invoke_results):\n&nbsp; &nbsp;constructed_prompt = (\n&nbsp; &nbsp; &nbsp; &nbsp;\"&lt;function_results&gt;\\n\"\n&nbsp; &nbsp; &nbsp; &nbsp;+ '\\n'.join(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;f\"&lt;result&gt;\\n&lt;tool_name&gt;{res['tool_name']}&lt;/tool_name&gt;\\n&lt;stdout&gt;\\n{res['tool_result']}\\n&lt;/stdout&gt;\\n&lt;/result&gt;\" \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for res in invoke_results\n&nbsp; &nbsp; &nbsp; &nbsp;) + \"\\n&lt;/function_results&gt;\"\n&nbsp; &nbsp;)\n&nbsp; &nbsp;\n&nbsp; &nbsp;return constructed_prompt\n\n# 定义天气查询工具的名称、描述和参数\ntool_name = \"weather\"\ntool_description = \"A tool to get the current weather for a given city.\"\n\nparameters = [\n&nbsp; &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp;\"name\": \"city\",\n&nbsp; &nbsp; &nbsp; &nbsp;\"type\": \"str\", \n&nbsp; &nbsp; &nbsp; &nbsp;\"description\": \"The name of the city to get the weather for.\"\n&nbsp; &nbsp;}\n]\n\n# 构建天气查询工具的描述字符串和系统提示\ntool = construct_format_tool_for_claude_prompt(tool_name, tool_description, parameters)\nsystem_prompt = construct_tool_use_system_prompt([tool])\n\n# 定义用户消息,询问伦敦的天气\nweather_message = {\n&nbsp; &nbsp;\"role\": \"user\", \n&nbsp; &nbsp;\"content\": \"What's the weather like in London?\"\n}\n\n# 发送用户消息给Claude,获取Claude的部分返回,其中包含对天气查询工具的调用\nfunction_calling_message = client.messages.create(\n&nbsp; &nbsp;model=MODEL_NAME,\n&nbsp; &nbsp;max_tokens=1024,\n&nbsp; &nbsp;messages=[weather_message],\n&nbsp; &nbsp;system=system_prompt,\n&nbsp; &nbsp;stop_sequences=[\"\\n\\nHuman:\", \"\\n\\nAssistant\", \"&lt;/function_calls&gt;\"]\n).content[0].text\n\n# 从Claude的部分返回中提取城市名称,并调用get_weather函数获取天气信息\ncity = extract_between_tags(\"city\", function_calling_message)[0]\nresult = get_weather(city)\n\n# 将get_weather函数的返回值格式化为Claude期望的格式\nformatted_results = [{\n&nbsp; &nbsp;'tool_name': 'get_weather',\n&nbsp; &nbsp;'tool_result': result\n}]\nfunction_results = construct_successful_function_run_injection_prompt(formatted_results)\n\n# 将原始消息、Claude的部分返回和格式化的函数调用结果组合成最终的提示\npartial_assistant_message = function_calling_message + \"&lt;/function_calls&gt;\" + function_results\n\n# 将最终的提示发送给Claude,获取并打印出包含实际天气信息的完整回复\nfinal_message = client.messages.create(\n&nbsp; &nbsp;model=MODEL_NAME,\n&nbsp; &nbsp;max_tokens=1024,\n&nbsp; &nbsp;messages=[\n&nbsp; &nbsp; &nbsp; &nbsp;weather_message,\n&nbsp; &nbsp; &nbsp; &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"role\": \"assistant\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"content\": partial_assistant_message\n&nbsp; &nbsp; &nbsp; &nbsp;}\n&nbsp; &nbsp;],\n&nbsp; &nbsp;system=system_prompt\n).content[0].text\n\nprint(partial_assistant_message + final_message)\n</code></pre><p>这个程序的提示构造流程主要步骤如下：</p><ol>\n<li>导入所需的库（re、requests和anthropic）并创建一个Anthropic客户端。</li>\n<li>定义get_weather函数，使用OpenWeatherMap API获取指定城市的当前天气信息。</li>\n<li>定义几个辅助函数（construct_format_tool_for_claude_prompt、construct_format_parameters_prompt、construct_tool_use_system_prompt、extract_between_tags 和 construct_successful_function_run_injection_prompt），用于构建格式化的工具描述、参数描述、系统提示和函数调用结果。</li>\n<li>创建一个天气查询工具的描述，并将其插入到系统提示中。</li>\n<li>向Claude发送一个包含城市名称的消息，并获取Claude的部分返回，其中包含对天气查询工具的调用。</li>\n<li>从Claude的部分返回中提取城市名称，并将其传递给get_weather函数，获取实际的天气信息。</li>\n<li>将get_weather函数的返回值格式化为Claude期望的格式，并将其与原始消息和Claude的部分返回结合起来，形成最终的提示。</li>\n<li>将最终的提示发送给Claude，获取并打印出包含实际天气信息的完整回复。</li>\n</ol><p>输出如下：</p><pre><code class=\"language-plain\">Okay, let's get the weather for London:\n\n&lt;function_calls&gt;\n&lt;invoke&gt;\n&lt;tool_name&gt;weather&lt;/tool_name&gt;\n&lt;parameters&gt;\n&lt;city&gt;London&lt;/city&gt;\n&lt;/parameters&gt;\n&lt;/invoke&gt;\n&lt;/function_calls&gt;&lt;function_results&gt;\n&lt;result&gt;\n&lt;tool_name&gt;get_weather&lt;/tool_name&gt;\n&lt;stdout&gt;\nThe weather in London is broken clouds with a temperature of 12.81°C.\n&lt;/stdout&gt;\n&lt;/result&gt;\n&lt;/function_results&gt;\n\nThe weather report states that it is broken clouds in London at the moment, with a temperature of around 13°C.\n</code></pre><p>这个示例展示了如何构造比较复杂的提示，形成Function Call，并使用外部API增强Claude模型的能力，让它能够根据用户的请求获取实时的天气信息。你可以参考这个模式，实现其他类型的工具调用，如搜索、数据库查询或其他API调用。</p><h2>总结时刻</h2><p>以上就是5个常用的提示工程技巧及其示例。总而言之，设计提示就像通过自然语言来给模型“编程”，需要明确任务目标，提供充足的信息，同时利用恰当的技巧来优化模型的表现。通过巧妙的提示，我们可以让模型发挥出惊人的创造力，为我们解决各种现实问题。</p><p>除此之外，我们用了5种不同的模型，一种GPT模型，两种Claude模型，以及两种开源模型，一种是中文模型ChatGLM，一种是TinyLlama。</p><p>你也许感受到这些模型推理效果和使用方式的不同之处了。</p><ul>\n<li>用GPT或者Claude这种收费模型，简单而直接，功能强大，但是需要付费。</li>\n<li>用开源模型，则需要从Transformers库中下载模型到本地，而且需要强大的GPU资源。</li>\n<li>有些小型开源模型，如TinyLlama，或许可以在CPU上运行，但是推理能力受限。</li>\n</ul><p>以上，就是大语言模型现阶段的基本情况，你可以根据自己的业务场景和实际需要进行选择。</p><h2>思考题</h2><ol>\n<li>技巧四中，我们选择的模型太小，因此结果不尽如人意。你可否试着使用更强的模型来实现需求？</li>\n<li>大模型的Tool Calls或者Function Calling功能实在是神兵利器，请你用GPT的Function Calling功能来改造技巧五中的程序，看看哪家的模型和API更好用？</li>\n<li>我给出的5个提示技巧，仅仅是管中窥豹，仅仅是提示工程工作的冰山一角，请你在留言区分享你的实用提示技巧，以及通过好的提示完成了哪些好玩的事儿。</li>\n</ol><p>期待你的分享，欢迎与我交流。如果今天的内容让你有所收获，也欢迎你把这节课转发给有需要的朋友！我们下节课再见！</p>","neighbors":{"left":{"article_title":"04｜用Assistants中的File search（RAG）工具做知识检索","id":778111},"right":{"article_title":"06｜通过设置思考框架，引导模型进行更好的推理","id":779775}},"comments":[{"had_liked":false,"id":391007,"user_name":"周昱飞","can_delete":false,"product_type":"c1","uid":3679542,"ip_address":"中国台湾","ucode":"AA12FED49E1918","user_header":"https://static001.geekbang.org/account/avatar/00/38/25/36/d0de604d.jpg","comment_is_top":false,"comment_ctime":1717041245,"is_pvip":false,"replies":[{"id":142223,"content":"大模型做这么几件事：\n1.理解用户的问题；\n2.根据用户的问题调用工具（get_weather），得到结果；\n3.把查询的温度结果整合成自然语言，回答用户的问题。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1717081823,"ip_address":"新加坡","comment_id":391007,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100764201,"comment_content":"最后这个天气的例子我没理解。调用get_weather函数是在代码中，不是在大模型里，最终的结果也是温度拼接过去。那大模型做的是什么呢","like_count":0,"discussions":[{"author":{"id":1144829,"avatar":"https://static001.geekbang.org/account/avatar/00/11/77/fd/98bbabd1.jpg","nickname":"吕硕😏","note":"","ucode":"205B0DAD551A8D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646833,"discussion_content":"大模型只把需要调用的方法个参数返回，然后你的程序需要在本地根据上面返回的信息调用本地方法，然后把本地方法的结果再传给大模型或者直接结束","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1718810460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646001,"discussion_content":"大模型做这么几件事：\n1.理解用户的问题；\n2.根据用户的问题调用工具（get_weather），得到结果；\n3.把查询的温度结果整合成自然语言，回答用户的问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1717081823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":392771,"user_name":"极客酱酱","can_delete":false,"product_type":"c1","uid":2934665,"ip_address":"四川","ucode":"18CDC1DB754D58","user_header":"https://static001.geekbang.org/account/avatar/00/2c/c7/89/16437396.jpg","comment_is_top":false,"comment_ctime":1721731236,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100764201,"comment_content":"感觉Claude的function call功能没有openai的简洁呢","like_count":0}]}