{"id":632714,"title":"05｜双链表：搜索链表中节点的速度还可以更快吗？","content":"<p>你好，我是王健伟。</p><p>上节课，我们学习了单链表的相关操作，我们会用它来对数据进行顺序存储，如果需要频繁增加和删除数据，同样也可以用到单链表。而它也可以衍生出好多种链表结构，双链表<span class=\"reference\">（也称双向链表）</span>就是其中一种。</p><p>在单链表中，有一个指针域用于指向后继节点。这带来的问题是，如果要寻找单链表中某个已知节点的前趋节点，就会比较繁琐了，我们必须从链表头出发开始寻找，算法的平均情况时间复杂度为O(n)。</p><p>那要怎么解决这个问题呢？</p><p>在单链表的基础上，我们可以增加一个用于指向前趋节点的指针，也称为前趋指针，当然，第一个节点的前趋指针指向nullptr，如果是带头节点的链表，那么就是头节点的前趋指针指向nullptr。这样，当查找某个节点的前趋节点就会非常容易，查找算法的时间复杂度也会从O(n)变为O(1)。</p><p>这种增加了前趋指针的链表，被称为双链表。如果画得形象一点，双链表<span class=\"reference\">（带头节点）</span>数据存储的描述图应该如图9所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/54/6a/543baedc0b08c7e751faf4fd3241c26a.jpg?wh=1719x202\" alt=\"\" title=\"图9&nbsp; 带头节点的双链表数据存储描述图\"></p><p>双链表的很多操作和单链表相同，比如元素获取、求长度、判断是否为空、链表释放等操作，因为这些操作并不需要用到前趋指针。而有一些常用操作双链表与单链表不同，下面，我还是使用带头结点的代码实现方式，来实现双向链表。</p><!-- [[[read_end]]] --><h2>双链表的类定义、初始化操作</h2><p>我们还是先说双链表的类定义以及初始化操作。</p><pre><code class=\"language-plain\">//双链表中每个节点的定义\ntemplate &lt;typename T&gt; //T代表数据元素的类型\nstruct DblNode\n{\n\tT&nbsp; &nbsp; &nbsp; &nbsp; data;&nbsp; //数据域，存放数据元素\n\tDblNode&lt;T&gt;* prior; //前趋指针，指向前一个同类型（和本节点类型相同）节点\n\tDblNode&lt;T&gt;* next;&nbsp; //后继指针，指向下一个同类型（和本节点类型相同）节点\n};\n</code></pre><p>接着定义双链表、书写双链表构造函数的代码。</p><pre><code class=\"language-plain\">//双链表的定义\ntemplate &lt;typename T&gt;\nclass DblLinkList\n{\npublic:\n\tDblLinkList();      //构造函数\n\t~DblLinkList();     //析构函数\n\t\npublic:\n\tbool ListInsert(int i, const T&amp; e);  //在第i个位置插入指定元素e\n\tbool ListDelete(int i);              //删除第i个位置的元素\n\t\n\tbool GetElem(int i, T&amp; e);           //获得第i个位置的元素值\n\tint  LocateElem(const T&amp; e);         //按元素值查找其在双链表中第一次出现的位置\n\t\n\tvoid DispList();                     //输出双链表中的所有元素\n\tint  ListLength();                   //获取双链表的长度\n\tbool Empty();                        //判断双链表是否为空\n\t\nprivate:\n\tDblNode&lt;T&gt;* m_head; //头指针（指向链表第一个节点的指针，如果链表有头结点则指向头结点）\n\tint m_length;    //双链表当前长度（当前有几个元素），为编写程序更加方便和提高程序运行效率而引入，但不是必须引入\n};\n\t\n//通过构造函数对双链表进行初始化\ntemplate &lt;typename T&gt;\nDblLinkList&lt;T&gt;::DblLinkList()\n{\t\t\n\tm_head = new DblNode&lt;T&gt;; //先创建一个头结点\n\tm_head-&gt;next = nullptr; //该值暂时为nullptr，因为还没有后继节点\n\tm_head-&gt;prior = nullptr; //该值一直为nullptr\n\tm_length = 0;  //头结点不计入双链表的长度\n}\n</code></pre><p>之后，在main主函数中加入代码创建一个双链表对象就可以了，如果你此时编译代码，可能会遇到错误提示，只需要<a href=\"https://gitee.com/jianw_wang/geektime_cpp_dsa/blob/master/07%EF%BD%9C%E5%8F%8C%E9%93%BE%E8%A1%A8%EF%BC%9A%E6%90%9C%E7%B4%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E8%8A%82%E7%82%B9%E7%9A%84%E9%80%9F%E5%BA%A6%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%9B%B4%E5%BF%AB%E5%90%97%EF%BC%9F/MyProject.cpp\">参考课件</a>把提示缺少的代码补足即可。</p><pre><code class=\"language-plain\">DblLinkList&lt;int&gt; sdbllinkobj;\n</code></pre><h2>双链表元素插入操作</h2><p>双链表的元素插入操作实现代码与单链表大部分相同。值得注意的是，因为引入了前趋指针，所以必须正确设置原有节点与新插入节点的前趋指针指向。</p><p>设想一下，如果想要在a1和a2节点之间插入一个新节点e，那么这个节点e的指向示意图应该是什么样的呢？</p><p>如图10所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/18/e9/18f1be56f53b033fa0ffe25de06b60e9.jpg?wh=1719x369\" alt=\"\" title=\"图10&nbsp; 在双链表的a1和a2节点之间插入新节点e示意图\"></p><p>再说实现代码。和单链表的同名实现代码ListInsert相比，我们需要新增几行代码来对新插入的节点e和a2节点的前趋指针赋值。</p><p>下面的代码中，几行标有数字的代码行所实现的功能与图10中所标记的数字一致，完整的实现代码，可以<a href=\"https://gitee.com/jianw_wang/geektime_cpp_dsa/blob/master/07%EF%BD%9C%E5%8F%8C%E9%93%BE%E8%A1%A8%EF%BC%9A%E6%90%9C%E7%B4%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E8%8A%82%E7%82%B9%E7%9A%84%E9%80%9F%E5%BA%A6%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%9B%B4%E5%BF%AB%E5%90%97%EF%BC%9F/MyProject.cpp\">参考课件</a>。为了防止代码执行出现错误，代码的执行顺序也要严格遵照下面的示例。</p><pre><code class=\"language-plain\">DblNode&lt;T&gt;* node = new DblNode&lt;T&gt;;\nnode-&gt;data = e;\t\n①node-&gt;next = p_curr-&gt;next;//让新节点链上后续链表，因为pcurr-&gt;next指向后续的链表节点\n②node-&gt;prior = p_curr;\nif(p_curr-&gt;next != nullptr)\n③\tp_curr-&gt;next-&gt;prior = node;&nbsp;\n\t④p_curr-&gt;next = node;//让当前位置链上新节点，因为node指向新节点\n</code></pre><p>在我们上节课讲解的单链表中，如果我们要向某个已知节点之前插入新节点，那么需要利用头指针m_head从前向后找到该已知节点的前趋节点。不过，有了双链表之后，就可以直接利用该已知节点的前趋指针实现这个功能了。</p><p>你可以自行实现这个操作相关的算法代码，下面是算法命名和相关参数。</p><pre><code class=\"language-plain\">template&lt;class T&gt;\nbool DblLinkList &lt;T&gt;::InsertPriorNode(DblNode&lt;T&gt;* pcurr, DblNode&lt;T&gt;* pnewnode)\n{\n\t//在节点pcurr之前插入新节点pnewnode，请自行添加相关代码......\n\t}\n</code></pre><p>在main主函数中，我们继续增加代码测试元素插入操作<span class=\"reference\">（如果编译代码遇到错误提示，只需要<a href=\"https://gitee.com/jianw_wang/geektime_cpp_dsa/blob/master/07%EF%BD%9C%E5%8F%8C%E9%93%BE%E8%A1%A8%EF%BC%9A%E6%90%9C%E7%B4%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E8%8A%82%E7%82%B9%E7%9A%84%E9%80%9F%E5%BA%A6%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%9B%B4%E5%BF%AB%E5%90%97%EF%BC%9F/MyProject.cpp\">参考课件</a>把提示缺少的代码补足即可）</span>。</p><pre><code class=\"language-plain\">sdbllinkobj.ListInsert(1, 12);\nsdbllinkobj.ListInsert(1, 24);\nsdbllinkobj.ListInsert(3, 48);\nsdbllinkobj.ListInsert(2, 100);\nsdbllinkobj.DispList();\n</code></pre><p>新增代码的执行结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/55/d36a699fa4184c0537f16880a1717b55.jpg?wh=1364x274\" alt=\"图片\"></p><h2>双链表元素删除操作</h2><p>那如果是要删除双链表的第i个位置的元素呢？操作同样和单链表的相应操作类似，只是要注意前趋指针的设置。</p><p>设想一下，如果想把刚刚插入在a1和a2节点之间节点e删除，示意图应该怎么画呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/30/fe/301aaa0609b65835268b706462f19cfe.jpg?wh=1719x281\" alt=\"\" title=\"图11&nbsp; 删除a1和a2节点之间的节点e示意图\"></p><p>你会发现，我们需要做的，就是让a1节点的next指针指向a2节点，让a2节点的prior指针指向a1节点。</p><p>理解了删除操作的思路，我们再说代码。与单链表的同名实现代码ListDelete相比，我们需要新增一行代码来对被删除节点后继节点<span class=\"reference\">（a2）</span>的前趋指针赋值。</p><p>完整的实现代码可以<a href=\"https://gitee.com/jianw_wang/geektime_cpp_dsa/blob/master/07%EF%BD%9C%E5%8F%8C%E9%93%BE%E8%A1%A8%EF%BC%9A%E6%90%9C%E7%B4%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E8%8A%82%E7%82%B9%E7%9A%84%E9%80%9F%E5%BA%A6%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%9B%B4%E5%BF%AB%E5%90%97%EF%BC%9F/MyProject.cpp\">参考课件</a>，先看下核心代码。</p><pre><code class=\"language-plain\">DblNode&lt;T&gt;* p_willdel = p_curr-&gt;next; //p_willdel指向待删除的节点\nDblNode&lt;T&gt;* p_willdelNext = p_willdel-&gt;next; //p_willdelNext指向待删除节点的下一个节点\n①p_curr-&gt;next = p_willdel-&gt;next; //第i-1个节点的next指针指向第i+1个节点\nif (p_willdelNext != nullptr)\n\t②&nbsp; &nbsp;p_willdelNext-&gt;prior = p_curr; //第i+1个节点的prior指针指向第i-1个节点\n</code></pre><p>在main主函数中，我们继续增加代码测试元素删除操作。</p><pre><code class=\"language-plain\">sdbllinkobj.ListDelete(4);\nsdbllinkobj.ListDelete(2);\nsdbllinkobj.DispList();\n</code></pre><p>新增代码的执行结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/57/4d91312fb57831121012b52c4ba1ff57.jpg?wh=1356x171\" alt=\"图片\"></p><p>在单链表中，如果删除某个已知节点，那么需要利用头指针m_head从前向后找到该将被删除节点的前趋节点。有了双链表之后，我们直接就可以利用该已知节点的前趋指针实现这个功能，你可以自行实现这个操作相关的算法代码。我把算法命名和相关参数也放在了这里。</p><pre><code class=\"language-plain\">template&lt;class T&gt;\nbool DblLinkList&lt;T&gt;::DeleteNode(DblNode&lt;T&gt;* pdel)\n{\n\t//删除pdel所指向的节点，请自行添加相关代码......\n}\n</code></pre><p>双链表的翻转操作就不单独给出代码了，相信你参考单链表的翻转操作，再对比一下单链表和双链表的不同，就完全能够独立完成。这里提醒你一下，每个节点的前趋指针，是不是正确设置了呢？</p><h2>双链表的特点</h2><p>这节课的操作讲解并没有上节课多，但你一定发现了，它们都是在单链表的基础上进行了变化和改动。所以这里，我们来对照着单链表，总结一下双链表的特点，帮助你更好地理解今天的内容。</p><p>在单链表中，因为指向后继节点指针的存在，所以如果给定一个已知的节点，寻找其后继节点的时间复杂度为O(1)，但如果寻找前趋节点，则因为每次都要从链表头出发开始寻找，所以算法的最坏情况时间复杂度为O(n)。</p><p>而双向链表因为前趋指针的存在，寻找一个已知节点的前趋节点的时间复杂度变为了O(1)，大大提高了寻找效率。</p><p>双链表中的某节点p前趋节点的后继指针以及后继节点的前趋指针，代表的都是p节点本身。也就是：</p><center>\np-&gt;prior-&gt;next = p-&gt;next-&gt;prior = p\n</center><p>需要注意的是，存放前趋指针要额外消耗存储空间。</p><p>另外，我们想一想，如果在单链表或者双链表中引入一个last指针，让它始终指向链表的尾节点，因为有了这个last指针的存在，在链表的<strong>尾部</strong>插入数据，是不是就会非常简单呢？不过我们要注意，在插入和删除节点时要维护这个last指针的有效指向，此外，对于带头节点的链表，因为刚开始链表中并没有实际的数据节点，所以last指针也和head指针一样，都指向头节点。</p><p>不但如此，对于双链表，当按位置查找某个节点时，若位置不超过链表长度（m_length）的一半，还可以利用head指针从左到右查找，而如果位置超过了链表的一半，就可以利用last指针辅助prior指针从右到左查找。</p><h2><strong>小结</strong></h2><p>这节课，我们讲解了双链表的相关内容，包括带头节点双链表的类定义及初始化操作、元素插入操作、元素删除操作等。同时还给出了双链表的特点总结。</p><p>这一系列的讲解，都是为了让我们更了解双链表的工作原理。除非有特殊需要，一般不需要自己实现单链表和双链表，因为标准模板库中已经提供了。</p><p>另外，标准模板库中的list容器的内部实现就是一个<strong>双链表</strong>。通过本节的讲解，你一定也会对list容器的工作原理以及优缺点有了非常清晰的认识了。想一想，如果让你自己来实现本节中所讲述的各种代码，你做得到吗？</p><h2><strong>归纳思考</strong></h2><ol>\n<li>\n<p>想一想单链表与双链表的区别在哪里？</p>\n</li>\n<li>\n<p>你能参考单链表的翻转操作代码，写出双链表的翻转操作代码吗？</p>\n</li>\n<li>\n<p>C++标准模板库中的vector容器和list容器的区别有哪些（这可是面试中常被问到的问题）？list容器和forward_list容器的区别又是什么？你可以尝试总结一下。</p>\n</li>\n</ol><p>欢迎你在留言区和我互动。如果觉得有所收获，也欢迎你把课程分享给更多的朋友一起学习进步。我们下节课见！</p>","neighbors":{"left":{"article_title":"04｜单链表：如何通过指针提升插入、删除数据的速度？","id":631872},"right":{"article_title":"06｜循环链表：如何更方便地寻找数据？","id":633391}},"comments":[{"had_liked":false,"id":376492,"user_name":"雪无痕","can_delete":false,"product_type":"c1","uid":1235903,"ip_address":"北京","ucode":"261357711A568E","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/bf/d990f851.jpg","comment_is_top":false,"comment_ctime":1686843737,"is_pvip":false,"replies":[{"id":137273,"content":"感谢支持，麻烦编辑同学修正","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1686990070,"ip_address":"广东","comment_id":376492,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"p-&gt;prior-&gt;next = p-&gt;net-&gt;prior = p，这里p-&gt;net应为p-&gt;next","like_count":0,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621249,"discussion_content":"感谢支持，麻烦编辑同学修正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686990070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375718,"user_name":"Yj.yolo","can_delete":false,"product_type":"c1","uid":2814082,"ip_address":"广东","ucode":"0ED1B41F124061","user_header":"https://static001.geekbang.org/account/avatar/00/2a/f0/82/f235d91d.jpg","comment_is_top":false,"comment_ctime":1685905309,"is_pvip":false,"replies":[{"id":137159,"content":"挺好的呦","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1686135599,"ip_address":"广东","comment_id":375718,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"vector容器和list容器有以下区别：\n（1）vector内存连续，list内存不连续\n（2）vector会预分配内存，capacity为vector实际内存大小，list内存分配为实际数据大小\n（3）vector内存达到capacity容量时将vector数组全部拷贝到新的capacity大小的内存区域，会比list多进行内存拷贝\n（4）vector实现对应数组，因此可以直接下标访问vector[i]，而list容器内存不连续因此无法下标访问；因此数据涉及大量的随机访问（读操作）则最好使用vector\n（5）vector插入删除中间元素时数组会整体移动，而list插入删除直接修改链表指针；因此高效插入删除时还是list好些","like_count":0,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620405,"discussion_content":"挺好的呦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686135599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372270,"user_name":"Geek_7ba740","can_delete":false,"product_type":"c1","uid":3586484,"ip_address":"四川","ucode":"FA4E6159BBA1CE","user_header":"","comment_is_top":false,"comment_ctime":1680929327,"is_pvip":false,"replies":[{"id":135849,"content":"可以这么理解。👶","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1680944424,"ip_address":"广东","comment_id":372270,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"可以理解为读多写少用vector，写多读少用list，不确定的话用vector吗","like_count":0,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612791,"discussion_content":"可以这么理解。👶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680944424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":392946,"user_name":"Fang","can_delete":false,"product_type":"c1","uid":3540228,"ip_address":"上海","ucode":"6F026565387364","user_header":"https://static001.geekbang.org/account/avatar/00/36/05/04/8deca125.jpg","comment_is_top":false,"comment_ctime":1722259001,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"p-&gt;prior-&gt;next = p-&gt;next-&gt;prior = p   ","like_count":0},{"had_liked":false,"id":382233,"user_name":"铁甲依然在","can_delete":false,"product_type":"c1","uid":1437884,"ip_address":"广东","ucode":"7487E704441849","user_header":"https://static001.geekbang.org/account/avatar/00/15/f0/bc/65543e09.jpg","comment_is_top":false,"comment_ctime":1696923616,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"我写了双链表的反转代码\n&#47;&#47;双链表的链表反转\ntemplate&lt;typename T&gt;\nvoid DbLinkList&lt;T&gt;::ReverseList() {\n\tif (m_length &lt; 1) {\n\t\treturn;\n\t}\n\tDblNode&lt;T&gt;* pothersjd = m_head-&gt;next-&gt;next;    &#47;&#47;指向从第二个节点的后续节点\n\tm_head-&gt;next-&gt;next = nullptr;    &#47;&#47;第一个节点的后续指点指针值为空\n\tDblNode&lt;T&gt;* ptemp;\n\twhile (pothersjd != nullptr) {\n\t\tptemp = pothersjd;          &#47;&#47;临时节点\n\t\tpothersjd = pothersjd-&gt;next;    &#47;&#47;第二节点后移动\n\n\t\tptemp-&gt;prior = m_head;     &#47;&#47;后一段节点的前驱节点值为头节点\n\t\tptemp-&gt;next = m_head-&gt;next;    &#47;&#47;后一段节点的后驱节点为头节点的后驱节点\n\t\tm_head-&gt;next-&gt;prior = ptemp;   &#47;&#47;头节点前的前一段节点的前驱节点为新插入的节点\n\n\t\tm_head-&gt;next = ptemp;     &#47;&#47;头节点的后驱节点为新插入的节点\n\t}\n}","like_count":0}]}