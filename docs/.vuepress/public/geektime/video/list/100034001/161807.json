{"id":161807,"title":"75 | 为了协议：关联类型","content":"<p><strong>课件地址</strong></p><p><a href=\"https://gitee.com/geektime-geekbang/swift-course\">https://gitee.com/geektime-geekbang/swift-course</a></p>","comments":[{"had_liked":false,"id":392928,"user_name":"Geek_2e1912","can_delete":false,"product_type":"c3","uid":3925236,"ip_address":"美国","ucode":"CF2FF5CCDCD1FF","user_header":"","comment_is_top":false,"comment_ctime":1722189306,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100034001,"comment_content":"讲得真好。","like_count":0},{"had_liked":false,"id":391921,"user_name":"Linan","can_delete":false,"product_type":"c3","uid":1726207,"ip_address":"北京","ucode":"695BBD4A9A13F7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epeiaBa4BwckM5GKSep5pqSHYKNOS7qvZc8v7GMQyA5ao7ic7ISgeUJmdLYIiaCNFSicZLickNkdibwg7Pg/132","comment_is_top":false,"comment_ctime":1719395134,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100034001,"comment_content":"跟我一样没听懂的来报个到","like_count":0},{"had_liked":false,"id":336531,"user_name":"Null","can_delete":false,"product_type":"c3","uid":1382587,"ip_address":"","ucode":"A7D4DF2A43C7D8","user_header":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","comment_is_top":false,"comment_ctime":1646204172,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100034001,"comment_content":"在关联类型约束里使用协议讲的太草了，最后的代码也不make sence，定义了SuffixableContainer，代码执行，什么也说明不了，都没使用。。。。。","like_count":0},{"had_liked":false,"id":229761,"user_name":"杨冬武","can_delete":false,"product_type":"c3","uid":1800054,"ip_address":"","ucode":"87D414D3F90F85","user_header":"https://static001.geekbang.org/account/avatar/00/1b/77/76/739a173e.jpg","comment_is_top":false,"comment_ctime":1593139396,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100034001,"comment_content":"请老师看下，这么写有没有什么问题\n\n&#47;&#47;协议:关联类型\nprotocol Container {\n    &#47;&#47;协议中定义泛型的方法(关联类型),可以进行类型约束\n    associatedtype ItemType: Hashable\n    mutating func append(_ item: ItemType)\n    var count: Int { get }\n    subscript(i: Int) -&gt; ItemType { get }\n}\n\n&#47;&#47;在关联类型约束里面使用协议,协议可以作为它自身的要求出现\nprotocol suffixableContainer: Container {\n    associatedtype suffix: suffixableContainer where suffix.ItemType == ItemType\n    &#47;&#47;返回Container中的前面的指定size的Container,相当于截取子Container\n    func suffixFunc(_ size: Int) -&gt; suffix\n}\n\n&#47;&#47;遵循关联类型的协议,必须实现必要的方法,其他方法可以选择实现\nstruct Stack01&lt;Element: Hashable&gt;: suffixableContainer {\n    \n    &#47;&#47;可以省略typealias,Swift会自动推断\n    &#47;&#47;typealias ItemType = Element\n    \n    private var items = [Element]()\n    \n    &#47;&#47;必须实现\n    var count: Int {\n        return items.count\n    }\n    \n    mutating func append(_ item: Element) {\n        items.append(item)\n    }\n    \n    subscript(i: Int) -&gt; Element {\n        return items[i]\n    }\n    \n    &#47;&#47;这里省略会报错\n    typealias suffix = Stack01&lt;Element&gt;\n    \n    func suffixFunc(_ size: Int) -&gt; suffix {\n        var stack = Stack01&lt;Element&gt;()\n        for (index, item) in items.enumerated() {\n            if index &lt; size {\n                stack.append(item)\n            }\n        }\n        return stack\n    }\n    \n    \n    &#47;&#47;选择实现\n    var isEmpty: Bool {\n        return items.isEmpty\n    }\n    \n    mutating func push(_ item: Element) {\n        items.append(item)\n    }\n    \n    mutating func pop() -&gt; Element? {\n        &#47;&#47;return isEmpty ? nil : items.removeLast()\n        return items.popLast()\n    }\n    \n}","like_count":0},{"had_liked":false,"id":223811,"user_name":"小千","can_delete":false,"product_type":"c3","uid":1286065,"ip_address":"","ucode":"8A1274AD7B87F0","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/b1/ae61b184.jpg","comment_is_top":false,"comment_ctime":1591185604,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100034001,"comment_content":"若Container协议中，定义的关联类型有约束，如关联类型遵循Equatable协议，则用泛型实现的Stack，则会报错。\nstruct Stack&lt;Element&gt;: Container {\n...\n}\n因为Element为泛型，类型推断无法推断出Element是否遵循Equatable。","like_count":0,"discussions":[{"author":{"id":1800054,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/77/76/739a173e.jpg","nickname":"杨冬武","note":"","ucode":"87D414D3F90F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285932,"discussion_content":"你把Element 也约束下Equatable ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592991399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}