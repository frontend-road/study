{"id":685121,"title":"11｜VAE系列：如何压缩图像给GPU腾腾地方","content":"<p>你好，我是南柯。</p><p>在前几讲中，我们已经学习了Transformer、UNet、Clip三个关键模块。在Stable Diffusion的知识地图上，还差最后的一环，便是今天的主角VAE模块。</p><p>在Stable Diffusion中，所有的去噪和加噪过程并不是在图像空间直接进行的。VAE模块的作用便是将图像“压缩”到一个特殊的空间，这个空间的“分辨率”要低于图像空间，便于快速地完成加噪和去噪的任务。之后，还能便捷地将特殊空间“解压”到图像空间。</p><p>这一讲，我们将一起了解VAE的基本原理。学完VAE，我们便了解了Stable Diffusion模型的全部核心模块。之后我们训练自己的Stable Diffusion模型时，也会用上VAE这个模块。</p><h2>初识VAE</h2><p>VAE的全称是变分自动编码器（Variational Autoencoder），在2013年被提出，是自动编码器（AE，Autoencoder）的一种扩展。你可能听过很多不同的名词，比如AE、VAE、DAE、MAE、VQVAE等。其实这些带 “AE” 的名字，你都可以理解成是一个编码器和一个解码器。</p><p>提到编码器和解码器，你也许会联想到我们在<a href=\"https://time.geekbang.org/column/article/682762\">第7讲</a>中学过的Transformer结构。这里我需要提醒你注意，尽管术语一样，但是VAE和Transformer中的编码器、解码器解决的是不同类型的问题，并具有不同的结构和原理。</p><!-- [[[read_end]]] --><p>在正式学习VAE之前。我们先要了解潜在空间的概念，也就是开头我们提起的“特殊空间”。我们可以通过神经网络，在保留原始数据的关键信息的条件下，将输入的原始数据压缩到一个更低维度的空间，得到一个低维的向量表示，并且这个低维的向量表示可以通过解码恢复出原始的数据。</p><p><strong>这里的低维空间就是潜在空间（latent space</strong>，<strong>也称为隐空间），低维的向量也叫潜在表示（latent representation）</strong>。你可以这样理解，潜在空间是较低维度的空间，用于表示原始数据的结构和特征。潜在表示便是原始数据在潜在空间中对应的特征向量。</p><p>以VAE为代表的 “AE” 系列工作，都是<strong>希望编码器将原始数据编码成低维的潜在表示，并且这个潜在表示可以通过解码器近乎无损地恢复出原始数据</strong>。这里的原始数据，可以是图像、文本等多种模态。</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/7c/a23f7b84fbce851de31b6af1ce44037c.jpg?wh=4409x2480\" alt=\"\"></p><p>对于AI绘画任务而言，潜在空间的维度通常是原始图像的1/8大小。例如，原始图像的分辨率如果是512x512，潜在空间的大小就可以是64x64。我们在64x64的空间上进行加噪和去噪，自然比在原始图像分辨率上进行加噪和去噪要快得多。得到去噪后的潜在表示，只需要经过解码器便可以获得AI绘画的最终输出图像。</p><h2>VAE细节探究</h2><p>仅仅了解 “AE” 类工作的整体思路，还不足以帮助我们区分各个 “AE” 的能力，也不足以解决AI绘画实操中遇到的相关问题。我们不妨深入探究其中的关键技术点。</p><h3>AE的长处和短板</h3><p>首先是AE结构（自编码器）。AE结构使用无监督的方式进行训练，以图像任务为例，使用大量的图像数据，依次经过编码器和解码器得到重建图像，训练目标是最小化原始数据与重构数据之间的差异。实际操作中，损失函数可以是L1损失或者L2损失。</p><p>为了帮你加深理解，我在后面提供了一个AE训练过程的伪代码供你参考。</p><pre><code class=\"language-python\">for epoch in range(epochs):\n    for batch in dataset_loader.get_batches(training_data, batch_size):  \n        \n        # 清零梯度\n        optimizer.zero_grad()\n     \n        # 将本批次数据传递给自动编码器\n        encoded_data = autoencoder.encode(batch)\n        reconstructed_data = autoencoder.decode(encoded_data)\n        \n        # 计算损失，比如使用L2损失\n        loss = loss_function(reconstructed_data, batch)\n        \n        # 反向传播\n        loss.backward()\n        \n        # 更新参数\n        optimizer.step()\n</code></pre><p>之所以说AE结构是无监督学习，是因为损失函数的计算只依赖于输入数据本身，而不涉及任何标签或类别信息。</p><p>AE结构虽然可以对数据降维，也存在明显的缺点。</p><p>第一，潜在表示缺乏直接的约束，在潜在空间中一个个孤立的点。如果对于输入图像的潜在表示稍加扰动，比如加上一个标准高斯噪声，解码器便会得到无意义的输出。</p><p>第二，潜在表示难以解释和编辑。我举个例子来说明，比如我们想得到“半月图像”的潜在表示，但手里又只有满月和新月图片。</p><p>那我们很自然就会觉得，满月和新月的中间状态应该是“半月”状态，而满月和新月图片对应的潜在表示分别是潜在空间中的一个点。如果对这两个点取平均，是不是就会得到一个新的潜在表示，来代表“半月图像”的信息。接着把这个新的潜在表示给到解码器，是不是就可以输出半月图片了？</p><p>这样想，从逻辑推导似乎没问题，但我们将插值后的潜在表示给到AE的解码器，我们甚至无法得到一张有意义的图片。</p><p>针对第一个缺点，DAE（去噪自编码器）的改进方式就是故意在输入数据中加入噪声，这样得到的潜在表示更加鲁棒。训练目标仍然是最小化原始引入噪声前的数据和重构数据之间的差异。你可以参考后面的伪代码来理解。不过我想强调一下，<strong>DAE只是改善了AE的表现，并没有真正补全AE的短板。</strong></p><pre><code class=\"language-python\"># 添加噪声函数\ndef add_noise(data, factor):\n    noise = factor * np.random.normal(size=data.shape)\n    noisy_data = data + noise\n    return noisy_data.clip(0, 1)\n    \n# 开始训练循环\nfor epoch in range(epochs):\n    for batch in dataset_loader.get_batches(training_data, batch_size):\n        \n        # 给本批次数据添加噪声\n        noisy_batch = add_noise(batch, noise_factor)\n        \n        # 清零梯度\n        optimizer.zero_grad()\n        \n        # 将带噪声的本批次数据传递给降噪自动编码器\n        encoded_data = denoising_autoencoder.encode(noisy_batch)\n        reconstructed_data = denoising_autoencoder.decode(encoded_data)\n        \n        # 计算损失\n        loss = loss_function(reconstructed_data, batch)\n        \n        # 反向传播\n        loss.backward()\n        \n        # 更新参数\n        optimizer.step()\n</code></pre><h3>VAE的工作原理</h3><p>真正解决AE两大痛点的工作就是VAE。在VAE中，编码器的输出不再是潜在表示，而是某种已知概率分布的均值$\\mu$和方差$\\sigma$，比如最常用的高斯分布。根据均值、方差和一个随机噪声$\\epsilon$，我们便可以根据下面的公式计算出最终的潜在表示，给到解码器。</p><p>$$z = e^{\\sigma} \\times \\epsilon + \\mu$$</p><p>VAE中计算潜在表示的过程便是大名鼎鼎的<strong>重参数化</strong>技巧，解决了梯度不能直接通过随机采样操作进行传播的问题。关于VAE的整体过程，你可以查看下面的图片。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/0b/485f86c2dabd06574343523a83a4e50b.jpg?wh=4409x1846\" alt=\"\"></p><p>那么VAE训练的目标函数是什么呢？你可能已经想到，需要使用类似AE模型的重构损失，还需要对均值$\\mu$和方差$\\sigma$进行约束，避免方差$\\sigma$优化到负无穷。</p><p>你可以查看后面的伪代码，我们同时使用重构损失和KL散度损失来训练VAE。对于VAE损失函数，我们掌握到这个程度就足够了。至于背后更复杂的数学推理，有兴趣的话你可以课后查阅资料了解更多细节。</p><pre><code class=\"language-python\"># 定义损失函数\ndef loss_function(reconstructed_data, original_data, mean, log_variance):\n    reconstruction_loss = mean_squared_error(reconstructed_data, original_data)\n    kl_loss = -0.5 * torch.sum(1 + log_variance - mean.pow(2) - log_variance.exp())\n    total_loss = reconstruction_loss + kl_loss\n    return total_loss\n    \n# 定义优化器（如梯度下降）\noptimizer = optimizer.Adam(variational_autoencoder.parameters(), lr=learning_rate)\n\n# 开始训练循环\nfor epoch in range(epochs):\n    for batch in dataset_loader.get_batches(training_data, batch_size):\n        \n        # 清零梯度\n        optimizer.zero_grad()\n        \n        # 将本批次数据传递给变分自动编码器\n        mean, log_variance = variational_autoencoder.encode(batch)\n        \n        # 重参数化技巧\n        z = mean + torch.exp(log_variance * 0.5) * torch.randn_like(log_variance)\n        \n        # 解码\n        reconstructed_data = variational_autoencoder.decode(z)\n        \n        # 计算损失\n        loss = loss_function(reconstructed_data, batch, mean, log_variance)\n        \n        # 反向传播\n        loss.backward()\n        \n        # 更新参数\n        optimizer.step()\n\n</code></pre><h3>用VAE做图像插值</h3><p>讲了这么多原理，也是在为VAE的应用做铺垫。VAE不仅可以有效地压缩和重构图像，它得到的潜在表示还可以进行插值编辑。我们分别动手来验证这两个功能。我为你准备了一个 <a href=\"https://colab.research.google.com/github/NightWalker888/ai_painting_journey/blob/main/lesson11/VAE%E4%BD%BF%E7%94%A8update.ipynb\">Colab代码</a>，你可以点开后运行。</p><p>使用VAE做图像重建的效果怎样呢？首先我在网上找到两张月相图。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/14/8b70bc6a10765c20640526b382596c14.jpg?wh=4409x2285\" alt=\"\"></p><p>然后我们使用Stable Diffusion中使用的VAE权重进行重建验证，下面我贴出重建部分的代码。</p><pre><code class=\"language-python\">from PIL import Image\nimport numpy as np\nimport torch\nfrom diffusers import AutoencoderKL\n\ndevice = 'cuda'\n\n# 加载VAE模型\nvae = AutoencoderKL.from_pretrained(\n    'CompVis/stable-diffusion-v1-4', subfolder='vae')\nvae = vae.to(device)\n  \npths = [\"test_imgs/new.png\", \"test_imgs/full.png\"]\nfor pth in pths:\n    img = Image.open(pth).convert('RGB')\n    img = img.resize((512, 512))\n    img_latents = encode_img_latents(img) # 编码\n    dec_img = decode_img_latents(img_latents)[0] #解码\n</code></pre><p>你可以点开图片看看VAE的效果，左边是原始图像，右边是VAE重建图像。</p><p><img src=\"https://static001.geekbang.org/resource/image/a0/9c/a0d40070025a6912296a41501b1fa99c.jpg?wh=4409x2309\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/e8/cd/e89cdece51a6c7e0748b2957594fc6cd.jpg?wh=4134x2329\" alt=\"\"></p><p>看完以后，有没有发现从我们视觉来看，几乎是100%复原？在上面的代码中，潜在表示（img_latents）的“宽高”只有原始图像的1/8，可见VAE编码器对原始数据的压缩能力。</p><p>我们前面提到，VAE的潜在表示可以进行插值。这里我们也通过代码实现一下，帮助你加深理解。</p><pre><code class=\"language-python\">    num_steps = 4 # 假定插值得到中间的2张图\n    interpolation_weight = np.linspace(0, 1, num_steps)\n    for weight in interpolation_weight:\n        interval_latents = (1 - weight) * all_img_latents[0] + weight * all_img_latents[1]\n        dec_img = decode_img_latents(interval_latents)[0]\n</code></pre><p>你同样可以点开图像查看插值的结果。利用VAE的潜在表示插值这个功能，我们可以合成很多有趣味的图像。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/11/52c9d8d50c40de9a302d8179ed421311.jpg?wh=4409x1510\" alt=\"\"></p><h2>VAE的应用</h2><p>VAE技术在很多领域得到了成功应用，既包含一些经典的机器学习任务，也包含我们要学习的AI绘画模型。</p><h3>VAE与经典任务</h3><p>VAE可以用于图像生成，比如人脸、动漫等角色的创建。以动漫角色生成为例，VAE 可以用来创建具有独特外观和特征的全新动漫角色。为此，我们首先需要使用现有的动漫角色数据集训练VAE的编码器和解码器。完成后，我们在潜在空间中采样，便可以得到新的角色图像。</p><p>VAE可以用于自然语言处理，比如用于带情感的评论生成等任务。假设我们有一个餐馆评论数据集（包含正、负评论），我们可以使用<a href=\"https://time.geekbang.org/column/article/682762\">第7讲</a>提到的时序模型设计VAE的编码器，比如RNN、LSTM、Transformer等，得到潜在表示，然后再把潜在表示与特定情感信息（如正面或负面）一起传递至解码器进行训练。</p><p>训练完成后，我们便得到了一个能够控制情感倾向的餐馆评论生成模型。下面我提供了实现评论生成任务的伪代码，推荐你课后实验一下，训练一个某某餐厅的评论“机器人”。至于训练用的数据，可以考虑用GPT来生成。</p><pre><code class=\"language-python\"># 导入所需的库\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\n# 定义VAE模型\nclass SentimentVAE(nn.Module):\n&nbsp; &nbsp; def __init__(self, input_dim, hidden_dim, latent_dim, sentiment_dim):\n&nbsp; &nbsp; &nbsp; &nbsp; super(SentimentVAE, self).__init__()\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; # 编码器 - 我们可以使用RNN，LSTM，Transformer等时序模型\n&nbsp; &nbsp; &nbsp; &nbsp; self.encoder = nn.LSTM(input_dim, hidden_dim)\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; # 将编码器的输出转换为潜在空间的均值和方差\n&nbsp; &nbsp; &nbsp; &nbsp; self.fc_mu = nn.Linear(hidden_dim, latent_dim)\n&nbsp; &nbsp; &nbsp; &nbsp; self.fc_var = nn.Linear(hidden_dim, latent_dim)\n\n&nbsp; &nbsp; &nbsp; &nbsp; # 解码器\n&nbsp; &nbsp; &nbsp; &nbsp; self.decoder = nn.LSTM(latent_dim + sentiment_dim, hidden_dim)\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; # 最后的全连接层\n&nbsp; &nbsp; &nbsp; &nbsp; self.fc_output = nn.Linear(hidden_dim, input_dim)\n\n&nbsp; &nbsp; def reparameterize(self, mu, log_var):\n&nbsp; &nbsp; &nbsp; &nbsp; std = torch.exp(0.5*log_var)&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; eps = torch.randn_like(std)\n&nbsp; &nbsp; &nbsp; &nbsp; return mu + eps*std&nbsp;\n\n&nbsp; &nbsp; def forward(self, x, sentiment):\n&nbsp; &nbsp; &nbsp; &nbsp; # 编码器\n&nbsp; &nbsp; &nbsp; &nbsp; hidden, _ = self.encoder(x)\n\n&nbsp; &nbsp; &nbsp; &nbsp; # 得到潜在空间的均值和方差\n&nbsp; &nbsp; &nbsp; &nbsp; mu, log_var = self.fc_mu(hidden), self.fc_var(hidden)\n\n&nbsp; &nbsp; &nbsp; &nbsp; # 重参数化技巧\n&nbsp; &nbsp; &nbsp; &nbsp; z = self.reparameterize(mu, log_var)\n\n&nbsp; &nbsp; &nbsp; &nbsp; # 将潜在表示和情感信息拼接\n&nbsp; &nbsp; &nbsp; &nbsp; z = torch.cat((z, sentiment), dim=1)\n\n&nbsp; &nbsp; &nbsp; &nbsp; # 解码器\n&nbsp; &nbsp; &nbsp; &nbsp; out, _ = self.decoder(z)\n&nbsp; &nbsp; &nbsp; &nbsp; out = self.fc_output(out)\n\n&nbsp; &nbsp; &nbsp; &nbsp; return out, mu, log_var\n\n</code></pre><p>VAE还可以用于聚类分析和异常检测。比如，在数据的潜在空间中把具有相似结构和内容的数据聚集在一起，为后续的聚类分析提供便利，或者用于识别潜在空间中明显异常的数据。</p><h3>VAE与扩散模型</h3><p>原始的扩散模型需要在原图上进行加噪和去噪操作，过程非常耗时。</p><p>学完今天的知识，我们自然会想到，为什么不在VAE的潜在空间上进行加噪和去噪呢？没错，Stable Diffusion就是这么做的。</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/50/2e46cc49db8yy763142561173d527850.jpg?wh=4409x1176\" alt=\"\"><br>\n通常情况下，VAE模型是按照我们前面讲的VAE训练过程预先获得的。我们使用LoRA等技术训练自己的AI绘画模型时，并不会改变 VAE 模型的权重。但这并不意味着 VAE 对图像质量没有影响。其实在某种程度上，VAE代表了AI绘画生成质量的上限。</p><p>虽然我们上面新月满月的例子证明了VAE的图像重建能力几乎无损，但如果是更困难复杂的场景，VAE重建的图像会存在明显的模糊。</p><p>比如下面这个例子中，红框内人脸区域的重建效果明显变差。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/6f/c4615bayy9f8e77e3d9a244b80b5c06f.png?wh=2162x1012\" alt=\"\" title=\"图片来源：https://openaccess.thecvf.com/content_ICCV_2019/papers/Wang_CARAFE_Content-Aware_ReAssembly_of_FEatures_ICCV_2019_paper.pdf\"></p><p>如前面的图所示，即使图像没有经过UNet，仅经过编码和解码过程，我们也会发现人脸的细节信息非常模糊。</p><p>这也很容易理解，因为输入图像经过 VAE 编码器后，会降低 8 倍采样率。512x512分辨率图像的潜在表示“分辨率”只有64x64。在如此小的潜在表示上恢复人脸细节确实是一项挑战。所以，我们见到的AI绘画模型如果小脸生成效果不佳，可能是VAE解码器本身无法生成高清的小脸图像。</p><p>那么如何解决这个问题呢？最直接的方法就是<a href=\"https://github.com/cccntu/fine-tune-models/#fine-tuning-vae-decoder-of-stable-diffusion\">重新训练 VAE</a>，使用更高的VAE潜在表示的分辨率。你可以参考后面的例子，对照图片可以看出，微调后的VAE可以明显提升生成图像的质量。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/d0/b3de51fd286e2338069e80516ffbb6d0.jpg?wh=4409x2192\" alt=\"\" title=\"图片来源：https://github.com/cccntu/fine-tune-models/tree/main\"></p><h2>总结时刻</h2><p>这一讲我们深入学习了Stable Diffusion中的核心模块VAE。</p><p>各种AE的功能就是对输入数据进行编码和解码。我们探讨了AE（自编码器）、DAE（去噪自编码器）和VAE（变分自编码器）三种深度学习模型，学习了这些模型的基本原理、网络结构和损失函数，明确了AE和DAE的设计短板。</p><p>而VAE在AE的基础上加入了更复杂的概念，解决了AE的潜在表示难以解释和编辑的缺陷。我们详细解读了重参数化这个技巧，并分析了VAE训练的损失函数。之后，我们通过多个实例介绍了VAE的应用，如图像重建和插值、加速Stable Diffusion模型的训练过程等。此外，我们列举了一个VAE用作餐厅评论机器人的趣味例子。</p><p>需要关注的是，VAE对原始图像进行压缩，会出现小脸无法有效重建等问题。所以在配合SD模型进行AI绘画任务时，我们需要尽可能选择重建效果更好的VAE。</p><p>关于这一讲的知识点，你可以查看下面的知识导图进行回顾、查漏补缺。</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/57/f0cafa74bc6de3f39b36487dc43ff457.jpg?wh=3600x2678\" alt=\"\"></p><h2>思考题</h2><p>VAE和Transformer中的编码器、解码器，在结构、原理、功能上有怎样的不同？</p><p>欢迎你在留言区和我交流讨论。如果这节课对你有启发，也推荐你分享给身边更多朋友。</p>","comments":[{"had_liked":false,"id":379209,"user_name":"xingliang","can_delete":false,"product_type":"c1","uid":1146320,"ip_address":"北京","ucode":"C6E35A4BD33B78","user_header":"https://static001.geekbang.org/account/avatar/00/11/7d/d0/48c13a76.jpg","comment_is_top":false,"comment_ctime":1691551504,"is_pvip":false,"replies":[{"id":138205,"content":"主动分享认真总结是好习惯，加油","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1691716899,"ip_address":"北京","comment_id":379209,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"结构：VAE通常是简单的全连接网络或卷积神经网络；Transformer基于多头注意力机制，结构更复杂。\n原理：VAE关注于在潜在空间中建立数据的概率分布；Transformer通过自注意力机制捕获长距离的依赖关系。\n功能：VAE主要是为了生成数据和降维；而Transformer则是为了处理序列到序列的任务，捕获序列中的依赖关系。","like_count":4,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625459,"discussion_content":"主动分享认真总结是好习惯，加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691716899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379413,"user_name":"cmsgoogle","can_delete":false,"product_type":"c1","uid":1746343,"ip_address":"美国","ucode":"CD69D796709195","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhs7ykGEy46a8ljg3LPvXTRxpgMLEhvZoAYIQL6I46OEqbNV4U1mXryhJt1bE3mhf7ey6jfl3IyQ/132","comment_is_top":false,"comment_ctime":1691916975,"is_pvip":false,"replies":[{"id":138356,"content":"你好。针对Q1，感谢你的反馈，Colab中的代码我做了调整，今天会更新到文稿中：https:&#47;&#47;colab.research.google.com&#47;github&#47;NightWalker888&#47;ai_painting_journey&#47;blob&#47;main&#47;lesson11&#47;VAE%E4%BD%BF%E7%94%A8update.ipynb。针对Q2，餐厅评论机器人的项目和我们AI绘画的主线并不是很相关，所以只是贴了VAE部分的代码。如果需要处理训练和推理，则需要除了更多数据合成和纯文本的操作，比如文本编解码等等。我们可以在未来的加餐篇中用完整的篇幅来探讨。再次感谢你的反馈，希望能帮助到你。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1692584513,"ip_address":"北京","comment_id":379413,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"遇到问题：\n1. 重建和差值部分的代码，在colab上第一次运行正常，但是到了第二次就OOM了，是代码没有处理释放显存空间吗？\n2. 文本的例子，体感很不好，只给了一段训练代码，建议加上实例，包括训练+推理。","like_count":1,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626136,"discussion_content":"你好。针对Q1，感谢你的反馈，Colab中的代码我做了调整，今天会更新到文稿中：https://colab.research.google.com/github/NightWalker888/ai_painting_journey/blob/main/lesson11/VAE%E4%BD%BF%E7%94%A8update.ipynb。针对Q2，餐厅评论机器人的项目和我们AI绘画的主线并不是很相关，所以只是贴了VAE部分的代码。如果需要处理训练和推理，则需要除了更多数据合成和纯文本的操作，比如文本编解码等等。我们可以在未来的加餐篇中用完整的篇幅来探讨。再次感谢你的反馈，希望能帮助到你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692584514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379259,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1691625990,"is_pvip":false,"replies":[{"id":138305,"content":"你好。VAE是适用于各种类型的数据的，包括图像、文本、声音等，也包括电磁频谱数据。使用Pytorch的VAE实现可以看这个代码：https:&#47;&#47;github.com&#47;AntixK&#47;PyTorch-VAE&#47;blob&#47;master&#47;models&#47;vanilla_vae.py。可以针对你手中的电磁频谱数据进行针对性训练，然后用得到的VAE来处理数据。希望能帮助到你。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1692324064,"ip_address":"北京","comment_id":379259,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"请教老师几个问题：\nQ1：VAE可以用来处理音频数据吗？\nQ2：VAE可以用来处理电磁频谱数据吗？\n用电磁检测设备采集无线电信号，然后用VAE来处理。\nQ3：源码在哪里？","like_count":1,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625909,"discussion_content":"你好。VAE是适用于各种类型的数据的，包括图像、文本、声音等，也包括电磁频谱数据。使用Pytorch的VAE实现可以看这个代码：https://github.com/AntixK/PyTorch-VAE/blob/master/models/vanilla_vae.py。可以针对你手中的电磁频谱数据进行针对性训练，然后用得到的VAE来处理数据。希望能帮助到你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692324064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}