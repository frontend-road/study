{"id":258222,"title":"20 | 单一职责原则：你的模块到底为谁负责？","content":"<p>你好！我是郑晔。</p><p>经过前面的讲解，我们对各种编程范式已经有了基本的理解，也知道了自己手上有哪些可用的设计元素。但只有这些元素是不够的，我们还需要一些比编程范式更具体的内容来指导工作。从这一讲开始，我们就进入到设计原则的学习。</p><p>在众多的原则中，我们该学习哪个呢？我选择了SOLID原则，因为SOLID原则是一套比较成体系的设计原则。它不仅可以指导我们设计模块（在面向对象领域，模块主要指的就是类），还可以被当作一把尺子，来衡量我们设计的有效性。</p><p>那SOLID原则是什么呢？它实际上是五个设计原则首字母的缩写，它们分别是：</p><ul>\n<li>单一职责原则（Single responsibility principle，SRP）</li>\n<li>开放封闭原则（Open–closed principle，OCP）</li>\n<li>Liskov替换原则（Liskov substitution principle，LSP）</li>\n<li>接口隔离原则（Interface segregation principle，ISP）</li>\n<li>依赖倒置原则（Dependency inversion principle，DIP）</li>\n</ul><p>这些设计原则是由Robert Martin提出并逐步整理和完善的。他在《<a href=\"http://book.douban.com/subject/1140457/\">敏捷软件开发：原则、实践与模式</a>》和《<a href=\"http://book.douban.com/subject/30333919/\">架构整洁之道</a>》两本书中，对SOLID原则进行了两次比较完整的阐述。在这两本时隔近20年的书里，你可以看到Robert Martin对SOLID原则的理解一步步在深化，如果你想了解原作者的思考，这两本书都推荐你阅读。</p><!-- [[[read_end]]] --><p>那么，在接下来的几讲中，我就来给你讲解这五个设计原则，除了设计原则的基本内容之外，我还会把我自己的理解增补其中，把两本书中没有讲到的一些逻辑给你补充进去。</p><p>好，我们开始，率先登场的当然就是单一职责原则。</p><h2>变化的原因</h2><p>单一职责原则，这个名字非常容易让我们望文生义，我们可能会理解成，一个类只干一件事，这看起来似乎是一项再合理不过的要求了。因为，几乎所有的程序员都知道“高内聚、低耦合”，都知道该把相关的代码放到一起。</p><p>所以，如果我们随便拿一个模块去问他的作者，这个模块是不是只做了一件事，他们的答案几乎都会是一样的：是的，只做了一件事。那么，既然这个设计原则如此通用，以至于所有的人都可以做到，那我们为什么还要有这样一个设计原则呢？</p><p>原因就在于，我们一开始的理解就是错的，我们把单一职责理解成了有关如何组合的原则，但实际上，单一职责是关于如何分解的。</p><p>那到底什么是单一职责原则呢？</p><p>正如Robert Martin所说，单一职责的定义经历了一些变化。在《敏捷软件开发：原则、实践与模式》中其定义是，“一个模块应该有且仅有一个变化的原因”；而到了《架构整洁之道》中，其定义就变成了“一个模块应该对一类且仅对一类行为者（actor）负责”。</p><p>单一职责原则和一个类只干一件事之间，最大的差别就是，<strong>将变化纳入了考量</strong>。</p><p>我们先分析第一个定义：一个模块应该有且仅有一个变化的原因。我们在课程一开始就在说，软件设计是一门关注长期变化的学问。变化是我们最不愿意面对却不得不面对的事，因为变化会引发新的不确定性，可能是新增功能自身的稳定问题，也可能是旧有功能遭到破坏带来的问题。</p><p>所以，<strong>一个模块最理想的状态是不改变，其次是少改变</strong>，它可以成为一个模块设计好坏的衡量标准。</p><p>在真实项目中，一个模块之所以会频繁变化，关键点就在于能引起它改变的原因太多了。</p><p>怎么理解呢？我们来看一个例子。假设我们要开发一个项目管理的工具，自然少不了一个用户的类，我们可能设计出这样一个用户类：</p><pre><code>// 用户类\nclass User {\n  // 修改密码\n  void changePassword(String password);\n  // 加入一个项目\n  void joinProject(Project project);\n  // 接管一个项目，成为管理员\n  void takeOverProject(Project project);\n  ...\n}\n</code></pre><p>看上去，这个类设计得还挺合理，有用户信息管理、有项目管理等等。没过多久，新的需求来了，要求每个用户能够设置电话号码，所以，你给它增加了一个新的方法：</p><pre><code>  void changePhoneNumber(PhoneNumber phoneNumber):\n</code></pre><p>过了几天，又来了新需求，要查看一个用户加入了多少项目：</p><pre><code>  int countProject();\n</code></pre><p>就这样，左一个需求，右一个需求，几乎每个需求都要改到这个类。那会导致什么结果呢？一方面，这个类会不断膨胀；另一方面，内部的实现会越来越复杂。按照我们提出的衡量标准，这个类变动的频繁程度显然是不理想的，主要原因就在于它引起变动的需求太多了：</p><ul>\n<li>为什么要增加电话号码呢？因为这是用户管理的需求。用户管理的需求还会有很多，比如，用户实名认证、用户组织归属等等；</li>\n<li>为什么要查看用户加入多少项目呢？这是项目管理的需求。项目管理的需求还会有很多，比如，团队管理、项目权限等等。</li>\n</ul><p>这就是两种完全不同的需求，但它们都改到了同一个类，所以，这个User类就很难稳定下来。解决这种问题，最好的办法就是把不同的需求引起的变动拆分开来。针对这里的用户管理和项目管理两种不同需求，我们完全可以把这个User类拆成两个类。比如，像下面这样，把用户管理类的需求放到User类里，把项目管理类的需求放到Member类里：</p><pre><code>// 用户类\nclass User {\n  // 修改密码\n  void changePassword(String password);\n  ...\n}\n\n// 项目成员类\nclass Member\n  // 加入一个项目\n  void joinProject(Project project);\n  // 接管一个项目，成为管理员\n  void takeOverProject(Project project);\n  ...\n}\n</code></pre><p>如此一来，用户管理的需求只要调整User类就好，而项目管理的需求只要调整Member类即可，二者各自变动的理由就少了一些。</p><h2>变化的来源</h2><p>跟着我们课程一路学下来的同学可能发现了，上面的做法与我们之前讨论过的分离关注点很像。</p><p>确实是这样的，想要更好地理解单一职责原则，重要的就是要把不同的关注点分离出来。在上面这个例子中，分离的是不同的业务关注点。所以，<strong>理解单一职责原则本质上就是要理解分离关注点</strong>。</p><p>按照之前的说法，分离关注点，应该是发现的关注点越多越好，粒度越小越好。如果你能看到的关注点越多，就可以构建出更多的类，但每个类的规模相应地就会越小，与之相关的需求变动也会越少，它能够稳定下来的几率就会越大。我们代码库里<strong>稳定的类越多越好，这应该是我们努力的一个方向</strong>。</p><p>不过，也许你会想，如果将这种思路推演到极致，一个类应该只有一个方法，这样，它受到的影响应该是最小的。的确如此，但我们在真实项目中，一个类通常都不只有一个方法，如果我们要求所有人都做到极致，显然也是不现实的。</p><p>那应该把哪些内容组织到一起呢？这就需要我们考虑单一职责原则定义的升级版，也就是第二个定义：一个模块应该对一类且仅对一类行为者负责。</p><p><strong>如果说第一个定义将变化纳入了考量，那这个升级版的定义则将变化的来源纳入了考量</strong>。</p><p>需求为什么会改变？因为有各种提出需求的人，不同的人提出的需求，其关注点是不同的。在前面的那个关于用户的讨论中，关心用户管理和关心项目管理的可能就是两拨完全不同的人，至少他们在提需求的时候扮演的是两种不同的角色。</p><p>两种不同角色的人，两件不同的事，到了代码里却混在了一起，这是不合理的。所以，分开才是一个好选择。用户管理的人，我和他们聊User，项目管理的人，我们来讨论Member。</p><blockquote>\n<p>康威定律：一个组织设计出的系统，其结构受限于其组织的沟通结构。</p>\n</blockquote><p>Robert Martin说，单一职责原则是基于康威定律的一个推论：一个软件系统的最佳结构高度依赖于使用这个软件的组织的内部结构。如果我们的软件结构不能够与组织结构对应，就会带来一系列麻烦，前面的那个例子只是一个小例子。</p><p>实际上，当我们更新了对于单一职责原则的理解，你会发现，它的应用范围不仅仅可以放在类这样的级别，也可以放到更大的级别。</p><p>我给你举个例子。我曾经接触过一个交易平台，其中有一个关键模型：手续费率，就是交易一次按什么比例收取佣金。平台可以利用手续费率做不同的活动，比如，给一些人比较低的手续费率，鼓励他们来交易，不同的手续费率意味着对不同交易行为的鼓励。</p><p>所以，对运营人员来说，手续费率是一个可以玩出花的东西。然而，对交易系统而言，稳定高效是重点。显然，经常修改的手续费率和稳定的系统之间存在矛盾。</p><p>经过分析，我们发现，这是两类不同的行为者。所以，在设计的时候，我们把手续费率设置放到运营子系统，而交易子系统只负责读取手续费率。当运营子系统修改了手续费率，会把最新的结果更新到交易子系统中。至于各种手续费率设置的花样，交易子系统根本不需要关心。</p><p>你看，单一职责原则也可以指导我们在不同的子系统之间进行职责分配。所以，单一职责原则这个看起来最简单的原则，实际上也蕴含着很多值得挖掘的内容。要想理解好单一职责原则：</p><ul>\n<li>我们需要理解封装，知道要把什么样的内容放到一起；</li>\n<li>我们需要理解分离关注点，知道要把不同的内容拆分开来；</li>\n<li>我们需要理解变化的来源，知道把不同行为者负责的代码放到不同的地方。</li>\n</ul><p>在《<a href=\"http://time.geekbang.org/column/intro/100022301\">10x程序员工作法</a>》中，我也提到过<a href=\"http://time.geekbang.org/column/article/87845\">单一职责原则</a>，不过我是从自动化和任务分解的角度进行讲解的，其中讨论到了函数要小。结合今天的内容，你就可以更好地理解函数要小的含义了，每个函数承担的职责要单一，这样，它才能稳定下来。</p><h2>总结时刻</h2><p>今天，我们学习了单一职责原则。单一职责原则讲的并不是一个类只做一件事，它的关注点在于变化。其最初的定义是一个模块应该有且仅有一个变化的原因，后来其定义升级为一个模块应该对一类且仅对一类行为者负责。这个定义从考虑变化升级到考虑变化的来源。</p><p>单一职责原则，本质上体现的还是分离关注点，所以，它与分离关注点的思考角度是一样的，需要我们将模块拆分成更小的粒度。不过，相比于分离关注点，它会更加具体，因为它需要我们考察关注点的来源：不同的行为者。</p><p>单一职责原则可以应用于不同的层次，小到一个函数，大到一个系统，我们都可以用它来衡量我们的设计。</p><p>好，我们已经了解了SOLID的第一个原则：单一职责原则。下一讲，我们再来看下一个原则：开放封闭原则。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>应用单一职责原则衡量模块，粒度越小越好。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/a8/dc/a8586dc72f41c12d68fe69680ba8a3dc.jpg?wh=2284*926\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你反思一下，在你现有的系统设计中，有没有不符合单一职责原则的地方呢？应该如何改进呢？欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":251297,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1601452563,"is_pvip":false,"replies":[{"id":"92084","content":"这个设计的关键在于哪里是访问的入口，也就是聚合的根。在这个例子里，根就是Article。所以，所有的访问都从ArticleService进去就好了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1602054685,"ip_address":"","comment_id":251297,"utype":1}],"discussion_count":3,"race_medal":1,"score":"117565569555","product_id":100052601,"comment_content":"老师，请教一个类的循环依赖问题。<br>以文章和评论为例，并假设一篇文章的评论，一般在100~1000条之间。<br>我设计的时候，文章和评论是两个service：ArticleService和CommentService【同一个服务中的两个类，不是两个微服务中的两个类】。<br>1. 新增一篇文章：调用ArticleService；<br>2. 发表一条评论：调用CommentService，但CommentService需要先调用ArticleService校验文章是否存在，然后再保存评论【CommentService中依赖了ArticleService】；<br>3. 删除文章（要求把评论删除）：先调用ArticleService删除文章，再调用CommentService删除评论【ArticleService中依赖了CommentService】；<br>由于业务比较简单，所以就没有使用异步之类的方式来避免循环依赖。<br>老师，我的设计是否不对？还请解惑。","like_count":28,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506441,"discussion_content":"这个设计的关键在于哪里是访问的入口，也就是聚合的根。在这个例子里，根就是Article。所以，所有的访问都从ArticleService进去就好了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602054685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2357458,"avatar":"https://static001.geekbang.org/account/avatar/00/23/f8/d2/494c182a.jpg","nickname":"愿凌飞","note":"","ucode":"E80CC09C7D528D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":573915,"discussion_content":"不知道这样理解对不对？文章服务包含了对文章内容的管理和评论的管理。我们可以在文章服务下面调用这两类子模型服务分别为，文章内容服务（非评论部分），文章评论服务，两者本身相互独立，由上层文章服务进行组织，然后来实现上面的功能。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653728153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":506441,"ip_address":""},"score":573915,"extra":""}]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579936,"discussion_content":"从概念上讲Comments也是附属于Article存在，&#34;先调用ArticleService删除文章&#34;，其实应该分解出正文和评论两个部分。Article{Body, Comments[]}。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657780803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236249,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1595377663,"is_pvip":false,"replies":[{"id":"87304","content":"总结得很到位！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595382394,"ip_address":"","comment_id":236249,"utype":1}],"discussion_count":1,"race_medal":1,"score":"35955116031","product_id":100052601,"comment_content":"<br>·不能简单的把单一职责原则理解为「一个类只做一件事」<br>·在做设计时，要考虑引起变化的原因，分而治之<br>·更进一步，若能考虑到变化的来源是什么，那就 perfect 了<br>","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502004,"discussion_content":"总结得很到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595382394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235597,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1000417,"ip_address":"","ucode":"8D48F4B9045947","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","comment_is_top":false,"comment_ctime":1595121141,"is_pvip":false,"replies":[{"id":"87055","content":"这是一个现实的选择，不能完全规避的话，就尽可能限制。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595202403,"ip_address":"","comment_id":235597,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31659892213","product_id":100052601,"comment_content":"变化仍在，只是通过单一职责原则进行分别，减少变化带来更大的影响。","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501781,"discussion_content":"这是一个现实的选择，不能完全规避的话，就尽可能限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595202403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234193,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1594616908,"is_pvip":false,"replies":[{"id":"86437","content":"指望每个人铭记是不现实的，需要配合代码评审去发现问题。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594625441,"ip_address":"","comment_id":234193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27364420684","product_id":100052601,"comment_content":"单一职责原则，相信很多人都了解过，但为何还是会出现高度耦合，职责不明的代码逻辑？<br>我觉得最根本原因是没有深入理解这个职责内涵（当然我自己也是），一开始的时候我们都自信满满的希望写出漂亮的代码，但随着版本迭代过程中，需求也不断变化，不知不觉就陷入到了变化之中。我们应该把这个原则铭记于心，当我们要修改这个模块或者类的时候，都要思考一下<br>我为何要修改这个类？这部分修改可不可以放在其它地方？","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501312,"discussion_content":"指望每个人铭记是不现实的，需要配合代码评审去发现问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594625441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307176,"user_name":"邵俊达","can_delete":false,"product_type":"c1","uid":1281460,"ip_address":"","ucode":"4B7DACE6DBCF95","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","comment_is_top":false,"comment_ctime":1628923374,"is_pvip":false,"replies":[{"id":"111320","content":"难道不是直接调用“把大象装进冰箱里”这一个函数吗？对这个类的用户来说，它就是一个函数，内部怎么实现是这个类设计者的问题，不要把复杂度交给用户。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629113473,"ip_address":"","comment_id":307176,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23103759854","product_id":100052601,"comment_content":"郑老师，关于单一职责我有一个疑问，比如我要做的一件事儿是「把大象装进冰箱里」，这件事会分为 3 步：<br>1. 把冰箱门打开<br>2. 把大象放进冰箱<br>3. 把冰箱门关上<br><br>如果是用一个类&#47;函数来完成「把大象装进冰箱里」的话，这个类&#47;函数里面会分别调用 3 个方法（把冰箱门打开、把大象放进冰箱、把冰箱门关上），这样<br>这个类&#47;函数在另一个角度就不是「只做一件事」了，这是否违背了「单一职责」原则呢？","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525069,"discussion_content":"难道不是直接调用“把大象装进冰箱里”这一个函数吗？对这个类的用户来说，它就是一个函数，内部怎么实现是这个类设计者的问题，不要把复杂度交给用户。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629113473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2357458,"avatar":"https://static001.geekbang.org/account/avatar/00/23/f8/d2/494c182a.jpg","nickname":"愿凌飞","note":"","ucode":"E80CC09C7D528D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573916,"discussion_content":"不同层次有不同的角色，考虑的角色不一样的。是提供给上层程序员调用，还是提供给用户去使用，用户下又有不同角色，又有不同的职责。纵向（不同层）有不同的角色，横向（相同层）有不同的角色。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653728489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1281460,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","nickname":"邵俊达","note":"","ucode":"4B7DACE6DBCF95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389680,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629375730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316675,"user_name":"王峰","can_delete":false,"product_type":"c1","uid":1216387,"ip_address":"","ucode":"11C31B45C31B0B","user_header":"https://static001.geekbang.org/account/avatar/00/12/8f/83/3f99d078.jpg","comment_is_top":false,"comment_ctime":1634486339,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14519388227","product_id":100052601,"comment_content":"利用单一职责原则，参考用户的组织结构，分离关注点，做好封装，让代码库中的类稳定下来。稳定的类越多，这个系统就可能越少的出错。","like_count":3},{"had_liked":false,"id":234420,"user_name":"Being","can_delete":false,"product_type":"c1","uid":1152227,"ip_address":"","ucode":"80A8783927B650","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/e3/ed118550.jpg","comment_is_top":false,"comment_ctime":1594688821,"is_pvip":false,"replies":[{"id":"86525","content":"对，这个理解没有问题。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594717780,"ip_address":"","comment_id":234420,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14479590709","product_id":100052601,"comment_content":"老师提出的三个理解，是个层层递进的过程。<br>单个原子性模块固化下来的越多，可积累的就越多。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501384,"discussion_content":"对，这个理解没有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594717780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234168,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1594608955,"is_pvip":false,"replies":[{"id":"86438","content":"一点一点改动，很有 10x 程序员的味道。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594625478,"ip_address":"","comment_id":234168,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14479510843","product_id":100052601,"comment_content":"1.老项目大部分应该都没有规范吧。自然也不会有符合单一职责这一说法。<br>2.要保障类或方法单一职责，并不总是单纯分割代码。更常见的，是要通读逻辑后，通过重构一点一点分离，对原逻辑改动还是比较大的。<br>3.我经常说接口要标准化，单一职责就是这里面的一个指标。写新项目可以逼着自己遵守这个。我不接受引入设计原则会降低需求迭代的认知，我相信刻意训练熟能生巧，有序的设计实现功能不会比无厘头的翻译功能慢，更多的是因为手生。但老项目，需不需要改进比如何改进重要。","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501305,"discussion_content":"一点一点改动，很有 10x 程序员的味道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594625478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269447,"user_name":"vplus","can_delete":false,"product_type":"c1","uid":1474072,"ip_address":"","ucode":"19A014336C1E40","user_header":"https://static001.geekbang.org/account/avatar/00/16/7e/18/9b9c373b.jpg","comment_is_top":false,"comment_ctime":1608650529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10198585121","product_id":100052601,"comment_content":"升级版单一职责原则就是在“类的数量”和“需求变化对代码的影响面“这两个地方做了折衷。","like_count":2},{"had_liked":false,"id":237351,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1595804109,"is_pvip":true,"replies":[{"id":"87674","content":"那个谁，这个说法，哈哈哈！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595810299,"ip_address":"","comment_id":237351,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10185738701","product_id":100052601,"comment_content":"找到那个谁，才有后续的职责澄清。重点不在单一，而在谁，否则，单一就是对自己的限定[得意]","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502383,"discussion_content":"那个谁，这个说法，哈哈哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595810299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350194,"user_name":"Cc°°","can_delete":false,"product_type":"c1","uid":1149143,"ip_address":"","ucode":"6C88E8D2C4622D","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/d7/43cf7b60.jpg","comment_is_top":false,"comment_ctime":1656649331,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5951616627","product_id":100052601,"comment_content":"“SOLID 原则是一套比较成体系的设计原则。它不仅可以指导我们设计模块（在面向对象领域，模块主要指的就是类），还可以被当作一把尺子，来衡量我们设计的有效性。”<br><br>非常喜欢这个概括。<br><br>关键词：指导、衡量<br><br>1. 指导：在事情【开始】的时候我们就是按照【某个标准】来指导的<br>2. 衡量：在事情【结束】的时候我们还是按照【同一个标准】来的衡量的<br><br>充分的体现了【以终为始】的做事风格，标准从头到尾都没有变过，就像俗话说的“先说后不乱”。另外还有个非常实际的收益，以终为始的做事风格可以减少团队之间的扯皮、对牛弹琴。","like_count":1},{"had_liked":false,"id":255791,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603432776,"is_pvip":false,"replies":[{"id":"100541","content":"知易行难","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612255973,"ip_address":"","comment_id":255791,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5898400072","product_id":100052601,"comment_content":"看起来最简单的原则，其实做起来也挺难的，日拱一卒吧。<br><br>有意识去做关注点分离的人挺少的，大部分都是代码能 work 就行。<br>等有意识了，想去做也不容易。分离关注点、厘清职责与模块边界，哪个是容易的？只能多练多想多对比了。<br><br>有这个意识了就能抛开一部分人，能坚持下去精进的就又能抛开一部分人了，加油。<br><br>回答文章的问题：现有系统设计中很少会遵循单一原则的，很多黄金大锤般的大类，开发的时候也很少会认真花时间去思考新加的接口放在哪里合适的。<br><br>最近公司在评估和申请企业版，希望身边多些人来一起学习，有好的代码环境才更有动力持续进步。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507839,"discussion_content":"知易行难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612255973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237719,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1595935266,"is_pvip":false,"replies":[{"id":"87844","content":"有。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595977598,"ip_address":"","comment_id":237719,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890902562","product_id":100052601,"comment_content":"问一个和单一职责不那么相关的问题，service层提供接口和模型，controller层调用service层方法，controller对外并不想暴露所有数据库字段，这样就需要controller对返回的数据集做一次加工，是否有必要。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502516,"discussion_content":"有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595977598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357550,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"河南","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1663382614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663382614","product_id":100052601,"comment_content":"SRP是康威定律的一个推论，互联网公司组织架构以及沟通架构变化相对频繁，而已经写下的代码却很难快速调整适应。基于以上假设，更加顶层的架构设计，可能需要将公司未来的组织架构变动方向也纳入考虑范围。","like_count":1},{"had_liked":false,"id":354195,"user_name":"晴天了","can_delete":false,"product_type":"c1","uid":1359669,"ip_address":"北京","ucode":"5310E02F8DF1F0","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/35/0e3a92a7.jpg","comment_is_top":false,"comment_ctime":1660180620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660180620","product_id":100052601,"comment_content":"“我们一开始的理解就是错的，我们把单一职责理解成了有关如何组合的原则，但实际上，单一职责是关于如何分解的。  “  老师 这句话是否可以理解为 ：我们把不同功能内聚到一块理解为了单一， 其实怎么把耦合的功能分解开来 才算是单一职责","like_count":0},{"had_liked":false,"id":346007,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652763841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652763841","product_id":100052601,"comment_content":"应用单一职责原则衡量模块，粒度越小越好。--记下来","like_count":0},{"had_liked":false,"id":327387,"user_name":"Ethan Liu","can_delete":false,"product_type":"c1","uid":1070043,"ip_address":"","ucode":"231F944F7CD56A","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/db/858337e3.jpg","comment_is_top":false,"comment_ctime":1640093966,"is_pvip":true,"replies":[{"id":"119301","content":"并不是，组合是组合不同的维度，每个维度都是单一职责。","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1640251267,"ip_address":"","comment_id":327387,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640093966","product_id":100052601,"comment_content":"组合是不是破坏了单一职责？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541086,"discussion_content":"并不是，组合是组合不同的维度，每个维度都是单一职责。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640251267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319025,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1635516301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635516301","product_id":100052601,"comment_content":"对单一原则有了新认识，感觉边强了！","like_count":0},{"had_liked":false,"id":312293,"user_name":"！！","can_delete":false,"product_type":"c1","uid":2754555,"ip_address":"","ucode":"2D54179AA52469","user_header":"https://static001.geekbang.org/account/avatar/00/2a/07/fb/77ab318a.jpg","comment_is_top":false,"comment_ctime":1631719460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631719460","product_id":100052601,"comment_content":"老师，能不能举个例子来说明下单一职责原则和一个类只做一件事的区别","like_count":0},{"had_liked":false,"id":268019,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1608032179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608032179","product_id":100052601,"comment_content":"郑老师，看JDK的源码，比如使用AQS思想的类，内部大量使用抽象，静态内部类，如Sync或者Unsafe，这算是违反单一职责原则么？类内部膨胀了。","like_count":0},{"had_liked":false,"id":242562,"user_name":"闷骚程序员","can_delete":false,"product_type":"c1","uid":1310251,"ip_address":"","ucode":"B6AEA1B55F4D8F","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/2b/468ebdeb.jpg","comment_is_top":false,"comment_ctime":1597760281,"is_pvip":false,"replies":[{"id":"89505","content":"把对象组装的过程拿出来，在组装的过程中传入配置，参考Spring DI容器。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1597801497,"ip_address":"","comment_id":242562,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597760281","product_id":100052601,"comment_content":"老师好，我是一个c++程序员，学了专栏后，现在在重构项目中的代码。但是遇到了一个问题。就是程序启动后需要读取配置文件，把配置信息放到一个Config对象中，这个对象包含了所有的配置信息，这个时候有需要用到配置的地方就要把Cinfig对象传过去。这个对象是不是违反了单一职责原则？我要怎么改？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504037,"discussion_content":"把对象组装的过程拿出来，在组装的过程中传入配置，参考Spring DI容器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597801497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239880,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1596683450,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596683450","product_id":100052601,"comment_content":"单一职责的定义升级，从变化到变化来源。在满足业务的前提下，相对变化来说，变化来源更能体现高内聚低耦合的设计原则","like_count":0},{"had_liked":false,"id":238400,"user_name":"Messi","can_delete":false,"product_type":"c1","uid":1177931,"ip_address":"","ucode":"04302B9E7F1D75","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/4b/5532c234.jpg","comment_is_top":false,"comment_ctime":1596160031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596160031","product_id":100052601,"comment_content":"首先理解透需求，然后根据关注点进行分离，对方法、类、模块封装的足够内聚，模块间松耦合，这样的设计应该符合单一职责原则，个人理解模块间松耦合可以避免过度的拆分。","like_count":0},{"had_liked":false,"id":234649,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1594741658,"is_pvip":true,"replies":[{"id":"86555","content":"设计模式比设计原则还是要具体一些的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594772228,"ip_address":"","comment_id":234649,"utype":1}],"discussion_count":3,"race_medal":1,"score":"1594741658","product_id":100052601,"comment_content":"前面编程范式部分没有看完，先来看单一职责原则。<br><br>SOLID 原则我大概是在十几年前就听说过，深以为然，但是却不知道如何落在代码上。后来写代码的机会并不是特别多，或者所参与的项目还不够复杂，所以没有相关的实践经验。<br><br>单一职责原则，从一开始的“一个模块应该有且只有一个变化的原因”，到后来的“一个模块应该对一类且 仅对一类行为者负责”，定义上是愈发清晰了，而且确实是“分离关注点”的体现。<br><br>即使对同一个用户类来说，在不同的系统，或者是不同的应用场景下，关注点是不同的，所以不大可能用单一职责原则来定义一个通用的用户类。<br><br>我觉的 SOLID 原则和设计模式有点类似，都是程序员追求的“道”，但是最好是根据项目需要和代码重构来实现。原则和模式需要记在心里，但是又不能过于拘泥，可能理想的状况是，一段代码，写着写着就符合了设计原则和模式。<br><br>说到系统设计中不符合单一原则的地方，我觉得很有可能是一开始的任务拆分就没做好。改进的方式，估计也只能逐步的重构了。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501448,"discussion_content":"设计模式比设计原则还是要具体一些的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594772228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1510897,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0d/f1/2c24eb9c.jpg","nickname":"这个掌柜的很优秀","note":"","ucode":"85E37655BE346B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347529,"discussion_content":"设计模式就是设计原则到了场景中的实际应用","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612250585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061005,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/8d/a2a4e97e.jpg","nickname":"Atong","note":"","ucode":"7E9D4B8D108E4E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305493,"discussion_content":"感觉设计原则和设计模式，就像是人家常说的“道” “术”或是功夫“心法”和功夫“招式”之间的关系。 招式是围绕心法的，彼此是匹配的。光有招式，没有心法，功力难以发挥甚至是达到最高层阶。而光有心法没有招式，也难以击败对手，当然招式可以在实战中慢慢摸索出来。但效率不够高，所有招式就是已有的招式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599965048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}