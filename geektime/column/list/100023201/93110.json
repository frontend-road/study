{"id":93110,"title":"CSS小实验：动手做，用代码挖掘CSS属性","content":"<p>你好，我是winter。</p><p>我们的课程中已经讲解了一部分CSS属性，但是CSS属性数量繁多，我们的课程只能覆盖其中一小部分，所以我设计了这个小实验，教你用代码挖掘W3C标准中的属性。</p><h2>浏览器中已经实现的属性</h2><p>首先我们来看看浏览器中实现了哪些属性。我们用一段代码来看一下。</p><pre><code class=\"language-JavaScript\">Object.keys(document.body.style).filter(e =&gt; !e.match(/^webkit/))\n</code></pre><p>这段代码思路非常简单，就是枚举document.body.style上的所有属性，并且去掉webkit前缀的私有属性。</p><p>在我的Chrome中，得到了这样一组属性：</p><pre><code>alignContent, alignItems, alignSelf, alignmentBaseline, all, animation, animationDelay, animationDirection, animationDuration, animationFillMode, animationIterationCount, animationName, animationPlayState, animationTimingFunction, backfaceVisibility, background, backgroundAttachment, backgroundBlendMode, backgroundClip, backgroundColor, backgroundImage, backgroundOrigin, backgroundPosition, backgroundPositionX, backgroundPositionY, backgroundRepeat, backgroundRepeatX, backgroundRepeatY, backgroundSize, baselineShift, blockSize, border, borderBlockEnd, borderBlockEndColor, borderBlockEndStyle, borderBlockEndWidth, borderBlockStart, borderBlockStartColor, borderBlockStartStyle, borderBlockStartWidth, borderBottom, borderBottomColor, borderBottomLeftRadius, borderBottomRightRadius, borderBottomStyle, borderBottomWidth, borderCollapse, borderColor, borderImage, borderImageOutset, borderImageRepeat, borderImageSlice, borderImageSource, borderImageWidth, borderInlineEnd, borderInlineEndColor, borderInlineEndStyle, borderInlineEndWidth, borderInlineStart, borderInlineStartColor, borderInlineStartStyle, borderInlineStartWidth, borderLeft, borderLeftColor, borderLeftStyle, borderLeftWidth, borderRadius, borderRight, borderRightColor, borderRightStyle, borderRightWidth, borderSpacing, borderStyle, borderTop, borderTopColor, borderTopLeftRadius, borderTopRightRadius, borderTopStyle, borderTopWidth, borderWidth, bottom, boxShadow, boxSizing, breakAfter, breakBefore, breakInside, bufferedRendering, captionSide, caretColor, clear, clip, clipPath, clipRule, color, colorInterpolation, colorInterpolationFilters, colorRendering, columnCount, columnFill, columnGap, columnRule, columnRuleColor, columnRuleStyle, columnRuleWidth, columnSpan, columnWidth, columns, contain, content, counterIncrement, counterReset, cursor, cx, cy, d, direction, display, dominantBaseline, emptyCells, fill, fillOpacity, fillRule, filter, flex, flexBasis, flexDirection, flexFlow, flexGrow, flexShrink, flexWrap, float, floodColor, floodOpacity, font, fontDisplay, fontFamily, fontFeatureSettings, fontKerning, fontSize, fontStretch, fontStyle, fontVariant, fontVariantCaps, fontVariantEastAsian, fontVariantLigatures, fontVariantNumeric, fontVariationSettings, fontWeight, gap, grid, gridArea, gridAutoColumns, gridAutoFlow, gridAutoRows, gridColumn, gridColumnEnd, gridColumnGap, gridColumnStart, gridGap, gridRow, gridRowEnd, gridRowGap, gridRowStart, gridTemplate, gridTemplateAreas, gridTemplateColumns, gridTemplateRows, height, hyphens, imageRendering, inlineSize, isolation, justifyContent, justifyItems, justifySelf, left, letterSpacing, lightingColor, lineBreak, lineHeight, listStyle, listStyleImage, listStylePosition, listStyleType, margin, marginBlockEnd, marginBlockStart, marginBottom, marginInlineEnd, marginInlineStart, marginLeft, marginRight, marginTop, marker, markerEnd, markerMid, markerStart, mask, maskType, maxBlockSize, maxHeight, maxInlineSize, maxWidth, maxZoom, minBlockSize, minHeight, minInlineSize, minWidth, minZoom, mixBlendMode, objectFit, objectPosition, offset, offsetDistance, offsetPath, offsetRotate, opacity, order, orientation, orphans, outline, outlineColor, outlineOffset, outlineStyle, outlineWidth, overflow, overflowAnchor, overflowWrap, overflowX, overflowY, overscrollBehavior, overscrollBehaviorX, overscrollBehaviorY, padding, paddingBlockEnd, paddingBlockStart, paddingBottom, paddingInlineEnd, paddingInlineStart, paddingLeft, paddingRight, paddingTop, page, pageBreakAfter, pageBreakBefore, pageBreakInside, paintOrder, perspective, perspectiveOrigin, placeContent, placeItems, placeSelf, pointerEvents, position, quotes, r, resize, right, rowGap, rx, ry, scrollBehavior, scrollMargin, scrollMarginBlock, scrollMarginBlockEnd, scrollMarginBlockStart, scrollMarginBottom, scrollMarginInline, scrollMarginInlineEnd, scrollMarginInlineStart, scrollMarginLeft, scrollMarginRight, scrollMarginTop, scrollPadding, scrollPaddingBlock, scrollPaddingBlockEnd, scrollPaddingBlockStart, scrollPaddingBottom, scrollPaddingInline, scrollPaddingInlineEnd, scrollPaddingInlineStart, scrollPaddingLeft, scrollPaddingRight, scrollPaddingTop, scrollSnapAlign, scrollSnapStop, scrollSnapType, shapeImageThreshold, shapeMargin, shapeOutside, shapeRendering, size, speak, src, stopColor, stopOpacity, stroke, strokeDasharray, strokeDashoffset, strokeLinecap, strokeLinejoin, strokeMiterlimit, strokeOpacity, strokeWidth, tabSize, tableLayout, textAlign, textAlignLast, textAnchor, textCombineUpright, textDecoration, textDecorationColor, textDecorationLine, textDecorationSkipInk, textDecorationStyle, textIndent, textOrientation, textOverflow, textRendering, textShadow, textSizeAdjust, textTransform, textUnderlinePosition, top, touchAction, transform, transformBox, transformOrigin, transformStyle, transition, transitionDelay, transitionDuration, transitionProperty, transitionTimingFunction, unicodeBidi, unicodeRange, userSelect, userZoom, vectorEffect, verticalAlign, visibility, whiteSpace, widows, width, willChange, wordBreak, wordSpacing, wordWrap, writingMode, x, y, zIndex, zoom\n</code></pre><p>数了一下，这里有390个属性，这非常壮观了，要想了解它们可不是一件容易的事情。接下来我们试着找到它们背后对应的标准。</p><h2>小实验：找出W3C标准中的CSS属性</h2><p>我们知道CSS2.1是一份标准，但是CSS3分布在无数标准中，我们需要用代码把它们整理出来，这就是我们今天的小实验内容了。</p><p>为了达到我们的目的，我们需要写一个简单的爬虫，来找一找W3C标准中都覆盖了哪些属性。</p><p><strong>我们这个爬虫的思路是：用iframe来加载所有标准的网页，然后用JavaScript找出它们中间定义的属性。</strong></p><!-- [[[read_end]]] --><h3>第一步：找到CSS相关的标准。</h3><p>我们来到W3C的TR页面：</p><ul>\n<li><a href=\"https://www.w3.org/TR/?tag=css\">https://www.w3.org/TR/?tag=css</a></li>\n</ul><p>我们必须从这个页面里抓取所有的标准名称和链接，打开它的代码，我们会发现它是有规律的，这个页面由一个巨大的列表构成，我们只需要根据tag选取需要的标准即可。</p><pre><code class=\"language-JavaScript\">document.querySelectorAll(\"#container li[data-tag~=css] h2:not(.Retired):not(.GroupNote)\")\n</code></pre><p>这段代码可以找到所有CSS相关的标准，我们用代码把从HTML结构中把它们抽取出来。可以得到一个列表。<br>\n（图片较大，请等待加载。）</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/be/3bc9ec8fad753e4a7af9db27bb1e25be.png?wh=864*7796\" alt=\"\"></p><h3>第二步：分析每个标准中的CSS属性</h3><p>得到了这个标准的列表，下一步我们就是分析每个标准中的CSS属性。</p><p>我们打开第一个标准，试着找出属性定义：</p><ul>\n<li><a href=\"https://www.w3.org/TR/2019/WD-css-lists-3-20190425/\">https://www.w3.org/TR/2019/WD-css-lists-3-20190425/</a></li>\n</ul><p>经过分析，我们会发现，属性总是在一个具有propdef的容器中，有属性data-dfn-type值为property。</p><p>这里我不得不感慨，W3C的标准写得真的是十分严谨，这给我们带来了很大的方便。我们用以下代码获取属性：</p><pre><code class=\"language-JavaScript\">document.querySelectorAll(\".propdef [data-dfn-type=property]\")\n</code></pre><p>对于第一个标准 CSS  Lists  Module  Level 3 得到了这个列表：</p><pre><code>list-style-image\nlist-style-type\nlist-style-position\nlist-style\nmarker-side\ncounter-reset\ncounter-set\ncounter-increment\n</code></pre><p>好了，接下来，我们来用iframe打开这些标准，并且用我们分析好的规则，来找出里面的属性就可以了。最终成品代码如下：</p><pre><code class=\"language-JavaScript\">\nvar iframe = document.createElement(\"iframe\");\n\ndocument.body.appendChild(iframe);\n\niframe.src = \"https://www.w3.org/TR/2019/WD-css-lists-3-20190425/\"\n\nfunction happen(element, type){\n  return new Promise(resolve =&gt; {\n    element.addEventListener(type, resolve, {once: true})\n  })\n}\n\nhappen(iframe, \"load\").then(function(){\n  //Array.prototype.map.call(document.querySelectorAll(\"#container li[data-tag~=css] h2\"), e=&gt; e.children[0].href + \" |\\t\" + e.children[0].textContent).join(\"\\n\")\n  console.log(iframe.contentWindow);\n})\nasync function start(){\n  var output = []\n  for(let standard of  Array.prototype.slice.call(document.querySelectorAll(\"#container li[data-tag~=css] h2:not(.Retired):not(.GroupNote)\"))) {\n    console.log(standard.children[0].href);\n    iframe.src = standard.children[0].href;\n    await happen(iframe, \"load\");\n    var properties = Array.prototype.map.call(iframe.contentWindow.document.querySelectorAll(\".propdef [data-dfn-type=property]\"), e =&gt; e.childNodes[0].textContent);\n    if(properties.length)\n        output.push(standard.children[0].textContent + \" | \" + properties.join(\", \"));\n  }\n  console.log(output.join(\"\\n\"))\n}\nstart();\n</code></pre><p>这样，我们就得到了每个属性属于哪个标准，我们来看看最终结果。我把它整理成了一个列表。</p><p>（图片较大，请等待加载。）<br>\n<img src=\"https://static001.geekbang.org/resource/image/ab/71/ab03527b7b40b594bb55f6bfd523d271.jpg?wh=957*11317\" alt=\"\"></p><p>至此，我们已经找出了标准中讲解的所有属性。</p><h2>结语</h2><p>今天的这节课我们通过代码对标准做了分析，找出了属性和标准的对应关系。</p><p>我们的第一步是找到所有的标准列表，第二步是找到每个标准中的属性。最后得到的这个列表比较全面地覆盖了CSS属性，并根据标准划分好了分类，我觉得这可以作为你后续学习和精研的重要依据。</p><p>我在本篇内容的前面还有一份浏览器中已经实现的属性列表，理论上属性列表中的属性应该都出现在了我们的标准中。</p><p>那么，这次课后的小任务，就是找出被我们的代码遗漏的属性，和重复出现在多份标准中的属性，让我们的列表更为完善。</p><p></p>","comments":[{"had_liked":false,"id":90627,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1556590654,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"186240184382","product_id":100023201,"comment_content":"知道的越多，不知道的就越多...","like_count":44,"discussions":[{"author":{"id":2867668,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/c1/d4/83baeccc.jpg","nickname":"小姚同学","note":"","ucode":"7397AA7DBD34B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540440,"discussion_content":"阿成太牛了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640057628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1942102,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/a2/56/b81e3f11.jpg","nickname":"泉","note":"","ucode":"45759F78E41B53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375572,"discussion_content":"阿成在哪混","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621749652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1381666,"avatar":"https://static001.geekbang.org/account/avatar/00/15/15/22/a7f693c6.jpg","nickname":"Roc","note":"","ucode":"3D590697EA70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286844,"discussion_content":"越学习发现自己越无知…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593309207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1393209,"avatar":"https://static001.geekbang.org/account/avatar/00/15/42/39/aa8cd514.jpg","nickname":"旅途。👣👣","note":"","ucode":"553DE32F7901CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":769,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562047769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90809,"user_name":"fy","can_delete":false,"product_type":"c1","uid":1152186,"ip_address":"","ucode":"EDB661C3A05910","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jsMMDDzhbsTzhicsGZiaeV0PWSnAS0fBlb1r6CsuB32vr3hRwV9UubmfHQx45v7jtaXajPlQ8kQ17b3zpQzHmqVw/132","comment_is_top":false,"comment_ctime":1556671353,"is_pvip":false,"replies":[{"id":"32568","content":"因为快讲完啦 老师舍不得马上结束😋","user_name":"编辑回复","user_name_real":"马越","uid":"1003953","ctime":1556685525,"ip_address":"","comment_id":90809,"utype":2}],"discussion_count":1,"race_medal":0,"score":"27326475129","product_id":100023201,"comment_content":"老师，咋感觉你加餐了很多讲。","like_count":7,"discussions":[{"author":{"id":1003953,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/51/b1/7d6879dc.jpg","nickname":"未设置","note":"","ucode":"9DFC368CA29EDC","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448668,"discussion_content":"因为快讲完啦 老师舍不得马上结束😋","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556685525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109399,"user_name":"旅途。👣👣","can_delete":false,"product_type":"c1","uid":1393209,"ip_address":"","ucode":"553DE32F7901CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/42/39/aa8cd514.jpg","comment_is_top":false,"comment_ctime":1562029816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18741899000","product_id":100023201,"comment_content":"感觉知道的越来越少，看不懂的越来越多","like_count":5},{"had_liked":false,"id":90759,"user_name":"至尊魂","can_delete":false,"product_type":"c1","uid":1395384,"ip_address":"","ucode":"AF9E61A497056B","user_header":"https://static001.geekbang.org/account/avatar/00/15/4a/b8/64223416.jpg","comment_is_top":false,"comment_ctime":1556628491,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14441530379","product_id":100023201,"comment_content":"看完表格更迷茫了，比如，为什么transform属于level 1，transform不是css3里的属性么？level4是什么？是css4么？为什么color这种常用属性属于level4?不应该属于level1么？好迷茫哦","like_count":4,"discussions":[{"author":{"id":1806431,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/90/5f/635da69d.jpg","nickname":"哈哈","note":"","ucode":"DEB3A7D8610EFE","race_medal":3,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548979,"discussion_content":"CSS beyond level 2 is a set of modules, divided up to allow the specifications to develop incrementally, along with their implementations. This specification is one of those modules.\n\nThis module describes CSS properties which allow authors to specify the foreground color and opacity of an element. This module also describes in detail the CSS &lt;color&gt; value type.\n\nIt not only defines the color-related properties and values that already exist in CSS1 and CSS2, but also defines new properties and values.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643470241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95642,"user_name":"桂马","can_delete":false,"product_type":"c1","uid":1450689,"ip_address":"","ucode":"DC39D216449462","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/c1/a662fadf.jpg","comment_is_top":false,"comment_ctime":1558108991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148043583","product_id":100023201,"comment_content":"忘记了就去查api","like_count":3},{"had_liked":false,"id":194991,"user_name":"郭郭","can_delete":false,"product_type":"c1","uid":1388492,"ip_address":"","ucode":"71AA578CA07787","user_header":"","comment_is_top":false,"comment_ctime":1585126030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585126030","product_id":100023201,"comment_content":"又get到了除前端以外的新技能！❤","like_count":0},{"had_liked":false,"id":90845,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1556687269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556687269","product_id":100023201,"comment_content":"@至尊魂，不是说level1就是CSS1，level3就是CSS3的... ","like_count":1}]}