{"id":791511,"title":"34｜泛型工具实践（二）：转换","content":"","comments":[{"had_liked":false,"id":393752,"user_name":"Geek_aeb936","can_delete":false,"product_type":"c3","uid":3887128,"ip_address":"日本","ucode":"863338D4895F25","user_header":"","comment_is_top":false,"comment_ctime":1724786015,"is_pvip":false,"replies":[{"id":142993,"content":"不好意思这个回复得晚了。这个地方的问题与版本无关，出错的原因是IsUnion&lt;&gt;这个泛型工具写错了。\n\n1、验证，将UnionToIntersection&lt;&gt;中的IsUnion&lt;&gt;去掉就正常了。在课程中讲这个例子时，正好没在UnionToIntersection中调用IsUnion，所以演示中没有出错。\n\n2、修改。需要将IsUnion&lt;&gt;改作如下\n```\ntype IsUnion&lt;T&gt; = NotAnyNever&lt;T&gt; extends true\n    ? T[] extends (infer U)[] ? Not&lt;IsNever&lt;T extends infer t ? ([U] extends [t] ? never : true) : never&gt;&gt; : never\n    : false;\n```\n\n3、IsUnion&lt;T&gt;错在哪里呢？这个出错点其实很刁钻。因为之前版本的检查原则是“联合中，全量不可能赋值给任何一个分量”，但是`object | object | {a: &#39;abc&#39;}`这个联合里面，联合本身是可以合并的（结果是object）。因此带来了一个奇怪的反例，就是联合的全量“object|{a: &#39;abc&#39;}&quot;可以赋给他的分量object。这导致IsUnion&lt;T&gt;的检查就失败了。\n修改后的IsUnion&lt;T&gt;采用了新的逻辑，“联合中，至少存在一个不可被全量赋值的分量”。","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1725041397,"ip_address":"江苏","comment_id":393752,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"&#47;&#47; ============= Test Cases =============\nimport type { Equal, Expect } from &quot;.&#47;test-utils&quot;;\n\ntype cases = [\n  Expect&lt;Equal&lt;UnionToIntersection&lt;&quot;foo&quot; | 42 | true&gt;, &quot;foo&quot; &amp; 42 &amp; true&gt;&gt;,\n  Expect&lt;\n    Equal&lt;\n      UnionToIntersection&lt;(() =&gt; &quot;foo&quot;) | ((i: 42) =&gt; true)&gt;,\n      (() =&gt; &quot;foo&quot;) &amp; ((i: 42) =&gt; true)\n    &gt;\n  &gt;,\n  Expect&lt;\n    Equal&lt;\n      UnionToIntersection&lt;object | { a: &quot;ab&quot;; b: &quot;cd&quot; }&gt;,\n      object &amp; { a: &quot;ab&quot;; b: &quot;cd&quot; }\n    &gt;\n  &gt;\n];\n\n&#47;&#47; ============= Your Code Here =============\n&#47;&#47; type UnionToIntersection&lt;U&gt; =\n&#47;&#47;   (U extends any ? (x: U) =&gt; void : never) extends (x: infer R) =&gt; void\n&#47;&#47;     ? R\n&#47;&#47;     : never;\ntype IsAny&lt;T&gt; = 0 extends 1 &amp; T ? true : false;\n&#47;&#47; type IsNotAny&lt;T&gt; = true extends IsAny&lt;T&gt; ? false : true;\n\ntype IsNever&lt;T&gt; = [T] extends [never] ? true : false;\n&#47;&#47; type IsNotNever&lt;T&gt; = true extends IsNever&lt;T&gt; ? false : true;\n\n&#47;&#47; true, false\ntype Not&lt;T extends boolean&gt; = true extends T ? false : true;\ntype NotAnyNever&lt;T&gt; = false extends IsAny&lt;T&gt; ? Not&lt;IsNever&lt;T&gt;&gt; : false;\n\n&#47;&#47; fixed @see 33&#47;t.ts\ntype IsUnion&lt;T&gt; = NotAnyNever&lt;T&gt; extends true\n  ? T[] extends (infer U)[]\n    ? T extends infer t\n      ? [U] extends [t]\n        ? false\n        : true\n      : never\n    : never\n  : false;\n\ntype UnionToIntersection&lt;U&gt; = IsUnion&lt;U&gt; extends true\n  ? (U extends U ? (k: U) =&gt; void : never) extends (k: infer I) =&gt; void &#47;&#47; 逆变位置推断出来的类型V，是所有候选类型的交叉。@see release-notes&#47;typescript-2.8.md\n    ? I\n    : never\n  : U;\n\n&#47;&#47;object | { a: &quot;ab&quot;; b: &quot;cd&quot; }  为false  ts 版本 5.5.4\n老师可以看看","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650465,"discussion_content":"不好意思这个回复得晚了。这个地方的问题与版本无关，出错的原因是IsUnion&lt;&gt;这个泛型工具写错了。\n\n1、验证，将UnionToIntersection&lt;&gt;中的IsUnion&lt;&gt;去掉就正常了。在课程中讲这个例子时，正好没在UnionToIntersection中调用IsUnion，所以演示中没有出错。\n\n2、修改。需要将IsUnion&lt;&gt;改作如下\n```\ntype IsUnion&lt;T&gt; = NotAnyNever&lt;T&gt; extends true\n    ? T[] extends (infer U)[] ? Not&lt;IsNever&lt;T extends infer t ? ([U] extends [t] ? never : true) : never&gt;&gt; : never\n    : false;\n```\n\n3、IsUnion&lt;T&gt;错在哪里呢？这个出错点其实很刁钻。因为之前版本的检查原则是“联合中，全量不可能赋值给任何一个分量”，但是`object | object | {a: &#39;abc&#39;}`这个联合里面，联合本身是可以合并的（结果是object）。因此带来了一个奇怪的反例，就是联合的全量“object|{a: &#39;abc&#39;}&#34;可以赋给他的分量object。这导致IsUnion&lt;T&gt;的检查就失败了。\n修改后的IsUnion&lt;T&gt;采用了新的逻辑，“联合中，至少存在一个不可被全量赋值的分量”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725041397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393504,"user_name":"Jack Q","can_delete":false,"product_type":"c3","uid":1160078,"ip_address":"广东","ucode":"A7DBC311884FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","comment_is_top":false,"comment_ctime":1724060718,"is_pvip":false,"replies":[{"id":142901,"content":"1、先测试一下type XX = IsUnion&lt;Constructor | Callable&gt;;\n2、因为 IsUnion&lt;&gt;不正确，所以Gen&lt;&gt;也就写错了。","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1724179449,"ip_address":"江苏","comment_id":393504,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"type IsAny&lt;T&gt; = 0 extends 1 &amp; T ? true : false;\ntype IsNever&lt;T&gt; = [T] extends [never] ? true : false;\ntype IsVoidOrUndefined&lt;T&gt; = [T] extends [void]\n  ? NotAnyNever&lt;T&gt;\n  : false;\ntype IsUnion&lt;T&gt; = T[] extends (infer U)[] ? [U] extends [infer t] ? ([T] extends [t] ? false : true) : never : never;\ntype IsInterface&lt;T&gt; = [T] extends [object]\n  ? NotAnyNever&lt;T&gt;\n  : false; \n\ntype Not&lt;T extends boolean&gt; = true extends T ? false : true;\ntype NotAnyNever&lt;T&gt; = false extends IsAny&lt;T&gt; ? Not&lt;IsNever&lt;T&gt;&gt; : false;\ntype NotVoidUndefined&lt;T&gt; = false extends IsVoidOrUndefined&lt;T&gt; ? true : false;\n\ntype Callable = 0;\ntype Constructor = 1;\n\ntype Gen&lt;Type extends Callable|Constructor, Args extends any[], Ret = void&gt; = IsUnion&lt;Type&gt; extends (false | never) ? \n  IsInterface&lt;Ret&gt; extends true ? Table&lt;Type, Args, Ret&gt; : \n    Type extends Constructor ? never : Table&lt;Type, Args, Ret&gt;\n    : Gen&lt;Type, Args, Ret&gt;;\n      \n\ntype Table&lt;Type extends Callable|Constructor, Args extends any[], Ret = void&gt; = {\n    0: (...arg: [...Args]) =&gt; Ret;\n    1: {\n        new (...arg: [...Args]): Ret;\n        readonly prototype: Ret;\n    };\n}[Type]\n\ntype To&lt;Type extends Callable|Constructor, Args extends any[], Ret = void&gt; = NotAnyNever&lt;Type&gt; extends true ? Gen&lt;Type, Args, Ret&gt; : unknown;","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649961,"discussion_content":"1、先测试一下type XX = IsUnion&lt;Constructor | Callable&gt;;\n2、因为 IsUnion&lt;&gt;不正确，所以Gen&lt;&gt;也就写错了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724179449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160078,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","nickname":"Jack Q","note":"","ucode":"A7DBC311884FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650098,"discussion_content":"更新一下\ntype IsUnion&lt;T&gt; = T[] extends (infer U)[] ? T extends infer t ? ([U] extends [t] ? false : true) : never : never;\ntype Gen&lt;Type extends Callable|Constructor, Args extends any[], Ret = void&gt; = IsUnion&lt;Type&gt; extends (false | never) ? \n  IsInterface&lt;Ret&gt; extends true ? Table&lt;Type, Args, Ret&gt; : \n    Type extends Constructor ? never : Table&lt;Type, Args, Ret&gt;\n    : Type extends Type ? Gen&lt;Type, Args, Ret&gt; : never;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724344489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393505,"user_name":"Jack Q","can_delete":false,"product_type":"c3","uid":1160078,"ip_address":"广东","ucode":"A7DBC311884FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","comment_is_top":false,"comment_ctime":1724060747,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"&#47;&#47; 测试用例及预期\nclass MyClass {}\n&#47;&#47; any | never\ntype T0_0 = To&lt;any, [string, number, &#39;a&#39;|&#39;b&#39;], MyClass&gt;; &#47;&#47; unknown\ntype T0_1 = To&lt;never, [string, number, &#39;a&#39;|&#39;b&#39;], MyClass&gt;;&#47;&#47; unknown\n&#47;&#47; union\ntype T1_0 = To&lt;Constructor | Callable, [string, number, &#39;a&#39;|&#39;b&#39;], MyClass&gt;; &#47;&#47; Callable | Constructor\ntype T1_1 = To&lt;Constructor | Callable, [string, number, &#39;a&#39;|&#39;b&#39;], 1&gt;; &#47;&#47; Callable\ntype T1_2 = To&lt;Constructor | Callable, [string, number, &#39;a&#39;|&#39;b&#39;], Boolean&gt;; &#47;&#47; Callable | Constructor\ntype T1_3 = To&lt;Constructor | Callable, [string, number, &#39;a&#39;|&#39;b&#39;], symbol&gt;; &#47;&#47; Callable\ntype T1_4 = To&lt;Constructor | Callable, [string, number, &#39;a&#39;|&#39;b&#39;]&gt;; &#47;&#47; Callable\ntype T1_5 = To&lt;Constructor | Callable, [string, number, &#39;a&#39;|&#39;b&#39;], undefined&gt;; &#47;&#47; Callable\n&#47;&#47; Callable\ntype T2_0 = To&lt;Callable, [string, number, &#39;a&#39;|&#39;b&#39;]&gt;; &#47;&#47; Callable\ntype T2_1 = To&lt;Callable, [string, number, &#39;a&#39;|&#39;b&#39;], undefined&gt;; &#47;&#47; Callable\ntype T2_2 = To&lt;Callable, [string, number, &#39;a&#39;|&#39;b&#39;], MyClass&gt;; &#47;&#47; Callable\ntype T2_3 = To&lt;Callable, [string, number, &#39;a&#39;|&#39;b&#39;], 1&gt;; &#47;&#47; Callable\ntype T2_4 = To&lt;Callable, [string, number, &#39;a&#39;|&#39;b&#39;], Boolean&gt;; &#47;&#47; Callable\ntype T2_5 = To&lt;Callable, [string, number, &#39;a&#39;|&#39;b&#39;], symbol&gt;; &#47;&#47; Callable\n\n&#47;&#47; Constructor\ntype T3_0 = To&lt;Constructor, [string, number, &#39;a&#39;|&#39;b&#39;]&gt;; &#47;&#47; never\ntype T3_1 = To&lt;Constructor, [string, number, &#39;a&#39;|&#39;b&#39;], undefined&gt;; &#47;&#47; never\ntype T3_2 = To&lt;Constructor, [string, number, &#39;a&#39;|&#39;b&#39;], MyClass&gt;; &#47;&#47; Constructor\ntype T3_3 = To&lt;Constructor, [string, number, &#39;a&#39;|&#39;b&#39;], 1&gt;; &#47;&#47; never; literal 1 is not object\ntype T3_4 = To&lt;Constructor, [string, number, &#39;a&#39;|&#39;b&#39;], Boolean&gt;; &#47;&#47; Constructor\ntype T3_5 = To&lt;Constructor, [string, number, &#39;a&#39;|&#39;b&#39;], symbol&gt;; &#47;&#47; literal symbol is not object\ntype T3_6 = To&lt;Constructor, [string, number, &#39;a&#39;|&#39;b&#39;], Symbol&gt;; &#47;&#47; Constructor","like_count":0}]}