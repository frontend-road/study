{"id":99184,"title":"15 | 可编程的互联网世界","content":"<p>你好，我是七牛云许式伟。</p><p>前面我们讨论架构思维的时候说过，架构的第一步是做需求分析。需求分析之后呢？是概要设计。概要设计做什么？是做子系统的划分。它包括这样一些内容：</p><ul>\n<li>子系统职责范围的定义；</li>\n<li>子系统的规格（接口），子系统与子系统之间的边界；</li>\n<li>需求分解与组合的过程，系统如何满足需求、需求适用性（变化点）的应对策略。</li>\n</ul><p>对于我们理解这个精彩的互联网世界来说，理解它的子系统的划分思路是非常非常重要的。</p><h2>网络应用程序的全视图</h2><p>在上一讲 “<a href=\"https://time.geekbang.org/column/article/98406\">14 | IP 网络：连接世界的桥梁</a>” 中我们介绍了 IP 网络的工作原理。我们还画了一幅与数据传输这件事本身有关的网络协议图，如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/23/8d3d2147685359357e78c8715e5edf23.png?wh=1920*731\" alt=\"\"></p><p>那么，从一个典型的网络应用程序角度来说，它的完整视图又是什么样子的呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/27/35/272a1a5319c226fc6472bb4f5f256c35.png?wh=1920*956\" alt=\"\"></p><p>上图是我给出的答案。当然，它并不代表所有的网络应用程序，但这不影响我们借它的结构来解释网络世界是怎么划分子系统的，每个子系统都负责了些什么。</p><p><strong>第一层是物理层。</strong>你可以理解为网络设备的原生能力，它定义了硬件层次来看的基础网络协议。</p><p><strong>第二层是数据链路层。</strong>它负责解决的是局部网络世界的数据传输能力。网络数据传输技术会层出不穷，今天主流有固网、WiFi、3G/4G，明天有 5G/6G，未来也必然还会出现更快速的网络新技术。</p><!-- [[[read_end]]] --><p>这些网络技术虽然都有自己独特的链路层协议，但都可以很自然融入整个互联网世界。原因在于什么？在于 IP 网络。</p><p><strong>所以第三层是 IP 网络层，它负责的是互联网世界的一体化，彼此包容与协作。</strong>如果拿单机的应用程序的全视图来类比的话，IP 网络类似于单机体系中的操作系统。</p><p>在单机体系，操作系统是一台计算机真正可编程的开始。同样地，互联网世界的体系中，IP 网络是互联网 “操作系统” 的核心，是互联网世界可编程的开始。</p><p><strong>第四层是 TCP/UDP 传输层。</strong>它也是互联网 “操作系统” 的重要组成部分，和 IP 网络一起构成互联网 “操作系统” 的内核。IP 网络解决的是网如何通的问题，而传输层解决的是如何让互联网通讯可信赖的问题，从而大幅降低互联网应用程序开发的负担。</p><p>互联网并不是世界上的第一张网。但是只有拥有了 TCP/IP 这一层 “操作系统”，这才真正实现了网络价值的最大化：连接一切。</p><p>有了操作系统，应用软件才得以蓬勃发展。上图我们列出的应用层协议，仅仅只是沧海一粟。但是，要说当前最主流的应用层协议，无疑当属 HTTP 协议（超文本传输协议，HyperText Transfer Protocol）和 SMTP/POP3 协议了。</p><p>HTTP 协议是因为万维网（World Wide Web，简称 WWW）这个应用场景而诞生，冲着传输静态网页而去的。但是由于设计上的开放性，几经演进到今天，已经俨然成为一个通用传输协议了。</p><p>通用到什么程度？DNS 地址簿这样的基础协议，也搞出来一个新的 HTTP DNS。当然今天 HTTP DNS 还只是传统 DNS 协议的补充，使用还并不广泛。但由此可知人们对 HTTP 协议的喜爱。</p><p>除了呈现网页之外，HTTP 协议也经常被用来作为业务开放协议 RESTful API 的承载。另外，一些通用 RPC 框架也基于 HTTP 协议，比如 Google 的 gRPC 框架。</p><p>SMTP/POP3 协议是电子邮件（Email）应用所采用的，它们没有像 HTTP 协议那么被广泛借用，只是局限于电子邮件应用领域。但 SMTP/POP3 协议使用仍然极为广泛，原因是因为电子邮件是最通用的连接协议，它连接了人和人，连接了企业和企业。</p><p>我们都很佩服微信的成功，因为它连接了几乎所有的中国人。但是相比电子邮件，微信仍然只是小巫见大巫，因为电子邮件连接了世界上的每一个人和企业。</p><p>这是怎么做到的？因为开放的力量。如果说有谁能够打败微信，那么我个人一个基本的思考是：用微信的方式打败微信恐怕很难，但微信是封闭协议，开放也许是一个打败微信的机会？</p><p>还有其他很多应用层协议上图没有列出来，比如 FTP、NFS、Telnet 等等。它们大都应用范围相对小，甚至有一些渐渐有被 HTTP 协议替代的趋势。</p><p>对于一个网络应用程序来说，它往往还依赖存储和数据库（DB/Storage）。目前存储和数据库这块使用 HTTP 的还不多，除了对象存储（Object Storage），大部分还是直接基于 TCP 协议为主。</p><p>对象存储作为一种最新颖的存储类型，现在主流都是基于 HTTP 协议来提供 RESTful API，比如七牛云的对象存储服务。</p><p>所以你可以看到，网络应用程序所基于的基础平台，比单机软件要庞大得多。前面我们介绍的单机软件所依赖的 CPU + 编程语言 + 操作系统就不说了，它一样要依赖。</p><p>上图所示的网络世界所构建的庞大基础平台，从物理层 -&gt; 数据链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 应用平台层，也都是我们业务架构的依赖点。选择自定义网络协议，基于 gRPC，还是基于 HTTP 提供 RESTful API ？这是架构师需要做出的决策之一。</p><h2>应用层协议与网关</h2><p>上一讲 “<a href=\"https://time.geekbang.org/column/article/98406\">14 | IP 网络：连接世界的桥梁</a>” 中我们谈到两台主机是如何通讯时，我们介绍了让局域网主机能够上网的 NAT 技术。NAT 网关本质上是一个透明代理（中间人），工作在网络协议的第四层，即传输层，基于 TCP/UDP 协议。</p><p>如果我们限定传输的数据包一定是某种应用层协议时，就会出现所谓的应用层网关，工作在网络协议的第七层，所以有时候我们也叫七层网关。</p><p>我们熟知的 Nginx、Apache 都可以用作应用层网关。应用层协议通常我们采用的是 HTTP/HTTPS 协议。</p><p>为什么 HTTP 协议这么受欢迎，甚至获得了传输层协议才有的待遇，出现专用的网关？</p><p>这得益于 HTTP 协议的良好设计。</p><p>我们一起来看一看 HTTP 协议长什么样。先看获取资源的 GET 请求（Request）：</p><pre><code>GET /abc/example?id=123 HTTP/1.1\nHost: api.qiniu.com\nUser-Agent: curl/7.54.0\nAccept: */*\n\n</code></pre><p>HTTP 协议的请求（Request）分协议头和正文两部分，中间以空行分隔。GET 请求一般正文为空。</p><p>协议头的第一行是请求的命令行，具体分为三部分，以空格分隔。第一部分为命令，常见有 GET、HEAD、PUT、POST、DELETE 等。第二部分是请求的资源路径。第三部分为协议版本。</p><p>协议头从第二行开始，每行均为请求的上下文环境或参数，我们不妨统一叫字段（Field）。格式为：</p><pre><code>字段名: 字段值\n</code></pre><p>HTTP 服务器收到一个请求后，往往会返回这样一个回复（Response）：</p><pre><code>HTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\nContent-Length: 68\nETag: W/&quot;fb751fe2cb812eb5d466ed9e3c3cd519&quot;\n\n&lt;html&gt;&lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;qiniu.com&lt;/body&gt;&lt;/html&gt;\n</code></pre><p>HTTP 请求（Request）和回复（Response）格式上只有第一行不同。回复的第一行也分为三部分，以空格分割。</p><p>第一部分为协议版本。</p><p>第二部分是状态码（Status Code），用来表征请求的结果，200 表示成功，4xx 通常表示请求（Request）本身不合法，5xx 则通常表示 HTTP 服务器有异常。</p><p>第三部分是状态文本（Status Text），方便接收方看到回复后可以立刻判断问题，而不用去查状态码对应的文档。</p><p>当协议正文非空的时候，往往还需要用 Content-Type 字段来指示协议正文的格式。例如这里我们用 text/html 表征返回的协议正文是一个 html 文档。Content-Length 字段则用来指示协议正文的长度。</p><p>我们再来看一下修改资源的 POST 请求：</p><pre><code>POST /abc/example HTTP/1.1\nHost: api.qiniu.com\nUser-Agent: curl/7.54.0\nAuthorization: Qiniu dXNlcj14dXNoaXdlaSZwYXNzd2Q9MTIzCg\nContent-Type: application/x-www-form-urlencoded;charset=utf-8\nContent-Length: 18\n\nid=123&amp;title=Hello\n</code></pre><p>和 GET 不一样，修改资源往往需要授权，所以往往会有 Authorization 字段。另外这里我们用 Content-Type 字段表示我们协议正文用了表单（form）格式。</p><p>最后我们看下删除资源的 DELETE 请求：</p><pre><code>DELETE /abc/example HTTP/1.1\nHost: api.qiniu.com\nUser-Agent: curl/7.54.0\nAuthorization: Qiniu dXNlcj14dXNoaXdlaSZwYXNzd2Q9MTIzCg\nContent-Type: application/json\nContent-Length: 11\n\n{&quot;id&quot;: 123}\n</code></pre><p>删除和修改完全类似。除了我这里刻意换了一种 Content-Type，协议正文用 json 格式了。实际业务中当然不是这样，通常会选择一致的表达方法。</p><p>大致了解了 HTTP 协议的样子，我们一起来分析一下它到底好在哪里？</p><p>毫无疑问，最关键的是它的协议头设计。具体表现在如下这些方面。</p><ul>\n<li>极其开放的协议头设计。虽然 HTTP 定义了很多标准的协议头字段（Field），但是用户还是可以加自己的字段，惯例上以 X- 开头。例如，七牛引入了 X-Reqid 作为请求的内部调用过程的跟踪线索。关于 X-Reqid 本专栏后续我们还会继续谈到。</li>\n<li>规范了业务的表达范式。虽然业务有千千万万种可能，但是实质上不外乎有什么资源，以及对资源的 CURD（创建-修改-读取-删除）。相对应地，在HTTP 协议中以 “资源路径” 表达资源，以 PUT-POST-GET-DELETE 表达 CURD 操作（也有一些服务以 POST 而不是用 PUT 请求来创建资源）。</li>\n<li>规范了应用层的路由方式。我们知道，在传输层网络的路由基于 IP 地址，但是对于应用而言，IP 地址是一个无意义的字段，在 HTTP 协议头中，有一个字段是强制的，那就是 Host 字段，它用来表征请求的目标主机。通常，在正式生产环境下它是个域名，比如 api.qiniu.com 。以域名来表征目标主机，无疑更加能够体现业务特性。故而，对应用层而言，“域名+资源路径” 是更好的路由依据，方便进行业务的切分。</li>\n</ul><p>正因为 HTTP 协议的这些好处，逐渐地它成为了网络应用层协议的模板。无论业务具体是什么样子的，都可以基于 HTTP 协议表达自己的业务逻辑。</p><h2>TCP/IP 层编程接口</h2><p>理解清楚了我们网络应用程序的结构，也理解了我们最主流的应用层协议 HTTP 协议，那么我们就可以考虑去实现一个互联网软件了。</p><p>从编程接口来说，网络的可编程性是从网络层 IP 协议开始。这是最底层的网络 “操作系统” 的能力体现。</p><p>从基于 IP 协议的网络视角来看，数据并不是源源不断的流（stream），而是一个个大小有明确限制的 IP 数据包。IP 协议是无连接的，它可以在不连接对方的情况下向其发送数据。规格示意如下：</p><pre><code>package net\n\ntype IPAddr struct {\n    IP   IP\n    Zone string // IPv6 scoped addressing zone\n}\n\nfunc DialIP(network string, laddr, raddr *IPAddr) (*IPConn, error)\nfunc ListenIP(network string, laddr *IPAddr) (*IPConn, error)\n\nfunc (c *IPConn) Read(b []byte) (int, error)\nfunc (c *IPConn) ReadFrom(b []byte) (int, Addr, error)\nfunc (c *IPConn) ReadFromIP(b []byte) (int, *IPAddr, error)\nfunc (c *IPConn) Write(b []byte) (int, error)\nfunc (c *IPConn) WriteTo(b []byte, addr Addr) (int, error)\nfunc (c *IPConn) WriteToIP(b []byte, addr *IPAddr) (int, error)\nfunc (c *IPConn) Close() error\n</code></pre><p>IP 协议本身只定义了数据的目标 IP，那么这个 IP 地址对应的计算机收到数据后，究竟应该交给哪个软件应用程序来处理收到的数据呢？</p><p>为了解决这个问题，在 IP 协议的基础上定义了两套传输层的协议：UDP 和 TCP 协议。它们都引入了端口（port）的概念。</p><p>端口很好地解决了软件间的冲突问题。一个IP地址+端口，我们通常记为 ip:port，代表了软件层面上来说唯一定位的通讯地址。每个软件只处理自己所使用的 ip:port 的数据。</p><p>当然，既然 IP 和端口被传输层一起作为唯一地址，端口上一定程度上缓解了 IPv4 地址空间紧张的问题。</p><p>虽然从设计者的角度来说，最初端口的设计意图，更多是作为应用层协议的区分。例如 port = 80 表示 HTTP 协议，port = 25 表示 SMTP 协议。</p><p>应用协议的多样化很容易理解，这是应用的多样化决定的。尽管从架构的角度，我们并不太建议轻易去选择创造新的协议，我们会优先选择 HTTP 这样成熟的应用层协议。但是随着时间的沉淀，还是会不断诞生新的优秀的应用层协议。</p><p>但是，<strong>为什么需要有多套传输层的协议（TCP 和 UDP）呢？</strong></p><p>还是因为应用需求是多样的。底层的 IP 协议不保证数据是否到达目标，也不保证数据到达的次序。出于编程便捷性的考虑，TCP 协议就产生了。</p><p>TCP 协议包含了 IP 数据包的序号、重传次数等信息，它可以解决丢包重传，纠正乱序，确保了数据传输的可靠性。</p><p>但是 TCP 协议对传输协议的可靠性保证，对某些应用场景来说并不是一个好特性。最典型的就是音视频的传输。在网络比较差的情况下，我们往往希望丢掉一些帧，但是由于 TCP 重传机制的存在，可能会反而加剧了网络拥塞的情况。</p><p>这种情况下，UDP 协议就比较理想，它在 IP 协议基础上的额外开销非常小，基本上可以认为除了引入端口（port）外并没有额外做什么，非常适合音视频的传输需求。</p><p>编程接口来说，TCP 的编程接口看起来是这样的：</p><pre><code>package net\n\ntype TCPAddr struct {\n    IP   IP\n    Port int\n    Zone string // IPv6 scoped addressing zone\n}\n\nfunc DialTCP(network string, laddr, raddr *TCPAddr) (*TCPConn, error)\nfunc ListenTCP(network string, laddr *TCPAddr) (*TCPListener, error)\n\nfunc (c *TCPConn) Read(b []byte) (int, error)\nfunc (c *TCPConn) Write(b []byte) (int, error)\nfunc (c *TCPConn) Close() error\n\nfunc (l *TCPListener) Accept() (Conn, error)\nfunc (l *TCPListener) AcceptTCP() (*TCPConn, error)\nfunc (l *TCPListener) Close() error\n</code></pre><p>UDP 的编程接口看起来是这样的：</p><pre><code>package net\n\ntype UDPAddr struct {\n    IP   IP\n    Port int\n    Zone string // IPv6 scoped addressing zone\n}\n\nfunc DialUDP(network string, laddr, raddr *UDPAddr) (*UDPConn, error)\nfunc ListenUDP(network string, laddr *UDPAddr) (*UDPConn, error)\n\nfunc (c *UDPConn) Read(b []byte) (int, error)\nfunc (c *UDPConn) ReadFrom(b []byte) (int, Addr, error)\nfunc (c *UDPConn) ReadFromUDP(b []byte) (int, *UDPAddr, error)\nfunc (c *UDPConn) Write(b []byte) (int, error)\nfunc (c *UDPConn) WriteTo(b []byte, addr Addr) (int, error)\nfunc (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (int, error)\nfunc (c *UDPConn) Close() error\n</code></pre><p>对比看，IP 和 UDP 的区别非常小，都是无连接的协议，唯一差别就是 UDPAddr 在 IPAddr 基础上增加了一个端口。也正因为如此，我们很少有应用程序会直接基于 IP 协议来编程。</p><p>客户端来说，无论 TCP 还是 UDP，使用方式都很像，其示意代码如下：</p><pre><code>c, err := net.Dial(&quot;tcp&quot;, addrServer)\nc.Write(...)\nc.Read(...)\nc.Close()\n</code></pre><p>net.Dial 背后会根据 network 字段选择调用 DialTCP 还是 DialUDP。然后我们就像操作一个文件一样来操作就行，理解上非常简单，只是 UDP 的读写在应用层面需要考虑可能会丢包。</p><p>但是服务端不太一样。服务端并不知道谁会给自己发信息，它只能监听自己的 “邮箱”，不时看看是不是有人来信了。</p><p>对于 TCP 协议，服务端示意代码如下：</p><pre><code>l, err := net.Listen(&quot;tcp&quot;, addrServer)\nfor {\n  c, err := l.Accept()\n  if err != nil {\n    错误处理\n    continue\n  }\n  go handleConnection(c)\n}\n</code></pre><p>对于 UDP 协议，服务端示意代码如下：</p><pre><code>c, err := net.ListenUDP(&quot;udp&quot;, addrServer)\nfor {\n  n, srcAddr, err := c.ReadFromUDP(...)\n  if err != nil {\n    错误处理\n    continue\n  }\n  // 根据 srcAddr.IP+port 确定是谁发过来的包，怎么处理\n}\n</code></pre><p>由于 TCP 基于连接（connection），所以每 Accept 一个连接后，我们可以有一个独立的执行体（goroutine）去处理它。但是 UDP 是无连接的，需要我们手工根据请求的来源 IP+port 来判断如何分派。</p><h2>HTTP 层编程接口</h2><p>尽管基于 TCP/IP 层编程是一个选择，但是在当前如果没有特殊的理由，架构师做业务架构的时候，往往还是优先选择基于 HTTP 协议。</p><p>我们简单来看一下 HTTP 层的编程接口：</p><pre><code>package http\n\nfunc Get(url string) (*Response, error)\nfunc Post(url, contentType string, body io.Reader) (*Response, error)\nfunc PostForm(url string, data url.Values) (*Response, error)\n\nfunc NewRequest(method, url string, body io.Reader) (*Request, error)\n\nvar DefaultClient = new(Client)\nfunc (c *Client) Do(req *Request) (*Response, error)\n\nfunc NewServeMux() *ServeMux\nfunc (mux *ServeMux) Handle(pattern string, handler Handler)\nfunc (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))\nfunc ListenAndServe(addr string, handler Handler) error\nfunc ListenAndServeTLS(addr, certFile, keyFile string, handler Handler) error\n</code></pre><p>对于 HTTP 客户端，使用上要比 TCP/UDP 简单得多，常见情况下直接调用 Get、Post 这些函数调用就满足业务需求。</p><p>在需要在 HTTP 协议头写一些额外字段的，会略微麻烦一点，需要先 NewRequest 生成一个请求，并添加一些字段（Field），然后再调用 Client.Do 去发起请求。整体上比调用 Read/Write 这样的基础 IO 函数要简便得多。</p><p>对于 HTTP 服务端，使用上的示意代码如下：</p><pre><code>mux := http.NewServeMux()\nmux.HandleFunc(&quot;/abc/example&quot;, handleAbcExampe)\nmux.HandleFunc(&quot;/abc/hello/&quot;, handleAbcHello)\n\nhttp.ListenAndServe(addServer, mux)\n</code></pre><p>简单解释一下，一个 HTTP 服务器最基础的就是需要有根据 “资源路径” 的路由能力，这依赖 ServeMux 对象来完成。</p><p>简单对比可以看出，基于 HTTP 协议的编程接口，和基于 TCP/IP 协议裸写业务，其复杂程度完全不可同日而语。前者一个程序的架子已经呈现，基本上只需要填写业务逻辑就好。这也是采纳通用的应用层协议的威力所在。</p><h2>结语</h2><p>这一讲我们希望给大家呈现的是应用程序的全貌。当然，我们现在看到的仍然是非常高维的样子，后面在 “服务端开发” 一章，我们将进一步展开所有的细节。</p><p>在应用层协议介绍上，我们很难有全面的介绍，因而我们把侧重点放在 HTTP 协议的概要介绍上。同样，后面我们在 “服务端开发” 一章会进一步介绍 HTTP 协议。</p><p>最后，我们整理了基于 TCP/UDP 协议编程和基于 HTTP 协议编程的主体逻辑。虽然介绍非常简要，但通过对比我们仍然可以感受到业务架构基于成熟的应用层协议的优势所在。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。网络编程本章就到此结束，后面我们有专门的章节来进一步展开。下一讲，我们将探讨操作系统的最后一个子系统：安全管理。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":100910,"user_name":"lckfa李钊","can_delete":false,"product_type":"c1","uid":1356899,"ip_address":"","ucode":"AD13D205104AA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b4/63/84960032.jpg","comment_is_top":false,"comment_ctime":1559688228,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"130408707108","product_id":100025201,"comment_content":"最近对网络协议很感兴趣，也订阅了极客的其他网络专栏，所以相比而言，对上一节的内容不是很<br>满意，觉得没有讲到架构的点上，今天发现许老师把前一节内容又更新了下，还是很有心的。看了今天的内容，觉得老师还是理性的，上一节是本节的引入点，现代系统如果没有网络，谈架构可能都是多余的，所以网络基础至关重要。还记得大学时基于传统的tcp写服务器的日子，那真是刀耕火种了，现在任何一种语言都有封装的特别好的网络库直接用，但是这并不代表我们不需要理解网络协议栈的底层原理。网络协议栈的划分本就是架构设计的现成模板。期待下一节的安全方案的讲解。","like_count":31,"discussions":[{"author":{"id":1112920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/58/6c422e70.jpg","nickname":"清晨吼于林","note":"","ucode":"6ADCB9B9FB8330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30204,"discussion_content":"你理解错了老师的用意，老师不是在讲网络，而是再讲他们的架构设计。为什么他们的架构设计要进行分层设计，好处在哪？中间用到的细节层次如应用层又是怎么设计的？为什么人家可以设计的这么好？所以，我理解这个章节7层网络模型不是重点，架构是重点。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1570804726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112852,"user_name":"陶辉","can_delete":false,"product_type":"c1","uid":1283912,"ip_address":"","ucode":"F81A9087435953","user_header":"https://static001.geekbang.org/account/avatar/00/13/97/48/550271b0.jpg","comment_is_top":false,"comment_ctime":1562831437,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"104642046541","product_id":100025201,"comment_content":"”如果说有谁能够打败微信，那么我个人一个基本的思考是：用微信的的方式打败微信恐怕很难，但微信是封闭协议，开放也许是一个打败微信的方式！“，赞！","like_count":25,"discussions":[{"author":{"id":1486846,"avatar":"https://static001.geekbang.org/account/avatar/00/16/af/fe/e9127277.jpg","nickname":"木木","note":"","ucode":"2AD54B5B3F8298","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381234,"discussion_content":"抖音？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624962812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101240,"user_name":"一笔一画","can_delete":false,"product_type":"c1","uid":1495254,"ip_address":"","ucode":"2B9BC8ADF97106","user_header":"https://static001.geekbang.org/account/avatar/00/16/d0/d6/f335954b.jpg","comment_is_top":false,"comment_ctime":1559747659,"is_pvip":false,"replies":[{"id":"36469","content":"不能这么看，是做的事情越来越多。HTTP协议首先是TCP协议的，只不过干了更多的业务，如果不用HTTP，并不代表你可以节约这块的成本，只不过换成你自己写的而已","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559751766,"ip_address":"","comment_id":101240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65984257099","product_id":100025201,"comment_content":"老师，请教一下，我可否这样认为，越往上层的协议其效率越低，到HTTＰ这样高阶的协议，它的性能会不会是一个瓶颈？","like_count":16,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452863,"discussion_content":"不能这么看，是做的事情越来越多。HTTP协议首先是TCP协议的，只不过干了更多的业务，如果不用HTTP，并不代表你可以节约这块的成本，只不过换成你自己写的而已","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1559751766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101046,"user_name":"fjpcode","can_delete":false,"product_type":"c1","uid":1306092,"ip_address":"","ucode":"C32C5E3ECB9A90","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","comment_is_top":false,"comment_ctime":1559705455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35919443823","product_id":100025201,"comment_content":"老师的洞察力总能深入到事务的本质，对网络协议来龙去脉的分析，让人感觉非常顺畅。应用平台层网络协议的选择，对一个网络应用项目来说是至关重要的，这方面也踩过不少坑。感谢老师的梳理，对网络协议的认知又深入了一步。","like_count":8},{"had_liked":false,"id":101157,"user_name":"Peiel","can_delete":false,"product_type":"c1","uid":1013762,"ip_address":"","ucode":"B10301B05B8507","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/02/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1559729546,"is_pvip":false,"replies":[{"id":"36458","content":"嗯","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559738021,"ip_address":"","comment_id":101157,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23034566026","product_id":100025201,"comment_content":"Nginx 可以用作应用层网关，那么应用层网关怎么理解？可以理解成我们通常在 Nginx 中对 HTTP 请求根据不同的api做相关的反向代理、负载均衡等相关配置，也就是所谓的api网关？","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452826,"discussion_content":"嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559738021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101678,"user_name":"X","can_delete":false,"product_type":"c1","uid":1102065,"ip_address":"","ucode":"B5CA13435613D8","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/f1/432e0476.jpg","comment_is_top":false,"comment_ctime":1559911968,"is_pvip":false,"replies":[{"id":"36640","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559918699,"ip_address":"","comment_id":101678,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18739781152","product_id":100025201,"comment_content":"你好老师，网关这个词一开始是在传输层接触到的，路由器起到的就是网关的作用，本质上是一个关口，数据包通过关口之后去寻找自己的目的地。现在谈的应用层的网关，是不是就是HTTP的请求的关口，根据不同的URL映射到不同的服务端接口，可以把负载均衡器理解为应用层的网关吗？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453067,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559918699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101043,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1559704985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18739574169","product_id":100025201,"comment_content":"打卡，再次被老师的高纬思想折服","like_count":4},{"had_liked":false,"id":101007,"user_name":"1900","can_delete":false,"product_type":"c1","uid":1105774,"ip_address":"","ucode":"320D65D14817D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","comment_is_top":false,"comment_ctime":1559700088,"is_pvip":true,"replies":[{"id":"36431","content":"后面服务端开发会讨论这个问题。最大的区别其实不是协议的选择，而是编程模型的改变。传统网络存储延续了本地文件系统的习惯，基本上都是filesystem的树状元数据组织方式，对象存储是key-value这种平面结构。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559709207,"ip_address":"","comment_id":101007,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18739569272","product_id":100025201,"comment_content":"对象存储作为目前新颖的一种存储类型，它相对于传统网络存储类型的优势在哪里呢？另外它也有什么不足或者局限么？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452774,"discussion_content":"后面服务端开发会讨论这个问题。最大的区别其实不是协议的选择，而是编程模型的改变。传统网络存储延续了本地文件系统的习惯，基本上都是filesystem的树状元数据组织方式，对象存储是key-value这种平面结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559709207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126539,"user_name":"s","can_delete":false,"product_type":"c1","uid":1509114,"ip_address":"","ucode":"5FAD8408395A61","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/fa/3d15ad73.jpg","comment_is_top":false,"comment_ctime":1566403037,"is_pvip":false,"replies":[{"id":"46799","content":"是不是自己的兴趣要看自己的行动。行动不会说谎。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1566429126,"ip_address":"","comment_id":126539,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14451304925","product_id":100025201,"comment_content":"许老师，我是一个黑客情结很重的人，我对黑客的看法和大部分人都不同，多数人认为黑客就是做安全研究的，可我觉得不是这样的，我心中的黑客是创造计算机的一切。你想，假设计算机协议，编程语言，系统等等你都能驾轻就熟，安全那不就是手到擒来。看了你讲的计算机架构设计，我更是感觉这种思想正是我想要的。可周围人都说让我不要白日做梦，好好写好业务代码就行，别想其他的。我很迷茫，岁数也不小26了，可这是我的梦想，我该坚持吗？想听听您的意见","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464043,"discussion_content":"是不是自己的兴趣要看自己的行动。行动不会说谎。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566429126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1509114,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/fa/3d15ad73.jpg","nickname":"s","note":"","ucode":"5FAD8408395A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5688,"discussion_content":"好，我知道了，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566437973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101086,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1559713910,"is_pvip":false,"replies":[{"id":"36440","content":"服务器是同时服务很多客户的，不同客户的请求无关，一个客户是通过请求包的来源ip+port来区分。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559717940,"ip_address":"","comment_id":101086,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14444615798","product_id":100025201,"comment_content":"许老师好! <br>    &quot;由于TCP基于连接，所以每Accept一个连接后，我们可以有一个独立的执行体去处理它；但是UDP是无连接的，需要我们手工根据来源IP+Port来判断如何分派&quot;，是否可以理解为基于TCP的协议，服务端每接收一个数据包就处理一个，而基于UDP的协议，服务端接收到数据包之后是先分派后处理？而这个分派的条件是IP+Port，1.为啥要分派？2.为啥是根据IP+Port来分派？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452798,"discussion_content":"服务器是同时服务很多客户的，不同客户的请求无关，一个客户是通过请求包的来源ip+port来区分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559717940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193153,"avatar":"https://static001.geekbang.org/account/avatar/00/12/34/c1/255161c9.jpg","nickname":"xfly","note":"","ucode":"215CF53ECF2298","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547848,"discussion_content":"这个地方我也感觉不清楚,想了下可以这样理解:\nTCP 因为保持了连接,每次数据进来都知道是同一个客户端来的.\n而 UDP,需要每次都问一下你是谁,你从哪来,服务的才知道怎么处理.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642902565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107644,"user_name":"斯图尔特","can_delete":false,"product_type":"c1","uid":1200683,"ip_address":"","ucode":"F0F15A5CC7FBD0","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/2b/3e42686d.jpg","comment_is_top":false,"comment_ctime":1561591670,"is_pvip":false,"replies":[{"id":"38925","content":"grpc也是http啊","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1561595321,"ip_address":"","comment_id":107644,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10151526262","product_id":100025201,"comment_content":"许老师，有个问题。对外使用restful api，如果对内部使用也是这种协议，会造成内部大量的http调用，如果是内部系统，是不是使用grpc更合适？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455603,"discussion_content":"grpc也是http啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561595321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572901,"discussion_content":"FYI\nRESTful是一种架构，规范。\ngRPC是一种RPC框架。\nHTTP，RPC是一种协议。\n协议更多是用在表示通信层面。\n规范是一种约定，通常没有强制要求，更多是用在非通信方面，比如编码，架构等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653035958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101164,"user_name":"虎哥","can_delete":false,"product_type":"c1","uid":1185061,"ip_address":"","ucode":"29D604EC85D3BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/25/1d3d616f.jpg","comment_is_top":false,"comment_ctime":1559732181,"is_pvip":false,"replies":[{"id":"36465","content":"不同人用的惯例不一样，从实际我看到的api案例看，put用的比较少","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559744714,"ip_address":"","comment_id":101164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10149666773","product_id":100025201,"comment_content":"相对应地，在 HTTP 协议中以 “资源路径” 表达资源，以 PUT-POST-GET-DELETE 表达 CURD 操作（也有一些服务以 POST 而不是用 PUT 请求来创建资源）。这段写错了吧，post 是 C put 是U吧","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452830,"discussion_content":"不同人用的惯例不一样，从实际我看到的api案例看，put用的比较少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559744714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102289,"user_name":"Panda","can_delete":false,"product_type":"c1","uid":1095740,"ip_address":"","ucode":"911A200C7B18BE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b8/3c/1a294619.jpg","comment_is_top":false,"comment_ctime":1560177148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855144444","product_id":100025201,"comment_content":"大道至简","like_count":1},{"had_liked":false,"id":101953,"user_name":"Hui","can_delete":false,"product_type":"c1","uid":1356173,"ip_address":"","ucode":"05A993E4453766","user_header":"https://static001.geekbang.org/account/avatar/00/14/b1/8d/7769f96d.jpg","comment_is_top":false,"comment_ctime":1560070905,"is_pvip":false,"replies":[{"id":"36766","content":"这块会有人努力去改善，比如http3据说就已经不是http over tcp了","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560089245,"ip_address":"","comment_id":101953,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5855038201","product_id":100025201,"comment_content":"老师你好，现代软件逐渐云端化，TCP能否满足云环境更高带宽，更低的延迟的需要，是否有更好的协议?","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453188,"discussion_content":"这块会有人努力去改善，比如http3据说就已经不是http over tcp了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560089245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101930,"user_name":"立耳","can_delete":false,"product_type":"c1","uid":1497753,"ip_address":"","ucode":"99C8E4DC67ED01","user_header":"https://static001.geekbang.org/account/avatar/00/16/da/99/80222c2a.jpg","comment_is_top":false,"comment_ctime":1560059263,"is_pvip":false,"replies":[{"id":"36764","content":"Response对象里面有Body字段，调用其Close方法才会有**可能**释放socket，但是也只是可能，因为背后的socket是复用的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560089054,"ip_address":"","comment_id":101930,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5855026559","product_id":100025201,"comment_content":"请教许老师一个技术细节的问题，假如服务端向客户端回复了一个超大的包，或者通过responseWriter的write方法写一个大文件，这个文件大小可能超过网卡的连接缓存大小，实际上客户端的Client.Do返回的response对象是在TCP链接结束后产生的，还是由HTTP协议来控制呢？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453178,"discussion_content":"Response对象里面有Body字段，调用其Close方法才会有**可能**释放socket，但是也只是可能，因为背后的socket是复用的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560089054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101353,"user_name":"王克","can_delete":false,"product_type":"c1","uid":1496530,"ip_address":"","ucode":"81180606CEF995","user_header":"https://static001.geekbang.org/account/avatar/00/16/d5/d2/3e65e3dc.jpg","comment_is_top":false,"comment_ctime":1559786779,"is_pvip":false,"replies":[{"id":"36545","content":"下一讲谈https","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559799835,"ip_address":"","comment_id":101353,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854754075","product_id":100025201,"comment_content":"近几年来HTTPS协议发展的很好，老师能简单的介绍下优缺点吗？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452925,"discussion_content":"下一讲谈https","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559799835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101272,"user_name":"涵","can_delete":false,"product_type":"c1","uid":1502742,"ip_address":"","ucode":"BB8575DB13F1E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/ee/16/742956ac.jpg","comment_is_top":false,"comment_ctime":1559775389,"is_pvip":false,"replies":[{"id":"36542","content":"1、是的<br>2、看起来有这个迹象","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559795733,"ip_address":"","comment_id":101272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854742685","product_id":100025201,"comment_content":"老师好，请问使用socket编程是不是就是在TCP&#47;UDP层面的?您觉得未来Restful api会占据垄断地位，成为PaaS上的SaaS服务间的标准调用协议吗？谢谢。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452882,"discussion_content":"1、是的\n2、看起来有这个迹象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559795733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101020,"user_name":"1900","can_delete":false,"product_type":"c1","uid":1105774,"ip_address":"","ucode":"320D65D14817D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","comment_is_top":false,"comment_ctime":1559702223,"is_pvip":true,"replies":[{"id":"36430","content":"协议只是数据格式而已","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559704546,"ip_address":"","comment_id":101020,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854669519","product_id":100025201,"comment_content":"“如果我们限定传输的数据包一定是某种应用层协议时，就会出现所谓的应用层网关”，这句话很费解，为什么“传输的数据包”会是“某种应用层协议”？数据包和协议是两个东西吧？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452781,"discussion_content":"协议只是数据格式而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559704546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101003,"user_name":"觉","can_delete":false,"product_type":"c1","uid":1503600,"ip_address":"","ucode":"95E85D30E92170","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/70/bca09d2d.jpg","comment_is_top":false,"comment_ctime":1559699893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854667189","product_id":100025201,"comment_content":"感恩大佬分享 随喜大佬","like_count":1},{"had_liked":false,"id":100989,"user_name":"宋文杰","can_delete":false,"product_type":"c1","uid":1034773,"ip_address":"","ucode":"2F5425B179F471","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ca/15/e3f9fb4e.jpg","comment_is_top":false,"comment_ctime":1559698725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854666021","product_id":100025201,"comment_content":"许老师看问题的角度 高屋建瓴 满满的收获 ","like_count":1},{"had_liked":false,"id":100983,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1559698015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854665311","product_id":100025201,"comment_content":"打卡15 HTTP编程逻辑","like_count":1},{"had_liked":false,"id":310244,"user_name":"vincent","can_delete":false,"product_type":"c1","uid":2530318,"ip_address":"","ucode":"5D95F800EF9E2C","user_header":"https://static001.geekbang.org/account/avatar/00/26/9c/0e/16c4e59b.jpg","comment_is_top":false,"comment_ctime":1630567024,"is_pvip":false,"replies":[{"id":"112456","content":"如果nat不用关心协议是tcp还是udp，说明工作在网络层。如果需要关心，说明工作在传输层。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1630649227,"ip_address":"","comment_id":310244,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1630567024","product_id":100025201,"comment_content":"许老师您好，此讲“NAT 网关本质上是一个透明代理（中间人），工作在网络协议的第四层，即传输层”，按照我对前一讲的理解，NAT应该是IP地址的转换，感觉应该是工作在网络层更加合适一些，网上有说工作在传输层和网络层，还请解惑。谢谢。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526169,"discussion_content":"如果nat不用关心协议是tcp还是udp，说明工作在网络层。如果需要关心，说明工作在传输层。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630649227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572917,"discussion_content":"那就是工作在IP层[网络层]了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653040329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288348,"user_name":"呼゛吸ゞ","can_delete":false,"product_type":"c1","uid":1201367,"ip_address":"","ucode":"B5F488C69350BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/54/d7/b0d04cac.jpg","comment_is_top":false,"comment_ctime":1618416619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618416619","product_id":100025201,"comment_content":"上层协议通用的部分拆分出来了底层协议。于是上层协议的开发者、使用者可以不需关心太多底层的实现，每层协议在各自的规范及标准下优化实现，避免协议级别的“重复造轮子”","like_count":0},{"had_liked":false,"id":286405,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1617282600,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617282600","product_id":100025201,"comment_content":"可以把所有的网络协议理解成网络系统的子系统。<br><br>每个不同层级的子系统解决的问题不同，这相当于是横向拆封需求，将这个需求拆分成一节节可执行的小任务，比如链路层，网络层，传输层，应用层，这样便完成了跨空间信息传送的需求。<br><br>然而在同一个层次上，又为了更好的满足个性化的需求，于是纵向拆分，每一层都有各具特色的协议，但是在我们面对的需求中，总有一些属于大众需求一些，像TCP。属于小众需求，总有一些设计是为了满足小众需求而生的，像UDP。","like_count":0},{"had_liked":false,"id":268928,"user_name":"函数方程(弘宇)","can_delete":false,"product_type":"c1","uid":1695043,"ip_address":"","ucode":"FF32376E9B7C84","user_header":"https://static001.geekbang.org/account/avatar/00/19/dd/43/93f04f89.jpg","comment_is_top":false,"comment_ctime":1608435185,"is_pvip":false,"replies":[{"id":"97577","content":"tcp协议负责传输的可靠性，所以http应用协议层可以像读取本地文件一样操作http数据包，非常便捷。get&#47;post差别等，可以看看相关材料，比如《http权威指南》等","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1608508257,"ip_address":"","comment_id":268928,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608435185","product_id":100025201,"comment_content":"许老师，如果想了解通过封装TCP&#47;IP协议，而实现的http协议的细节(比如说一个GET或者POST请求，发生了丢包的情况，tcp协议在其中所起到的作用是？再比如GET方法与POST方法的区别是？)，有没有推荐的参考资料...","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512086,"discussion_content":"tcp协议负责传输的可靠性，所以http应用协议层可以像读取本地文件一样操作http数据包，非常便捷。get/post差别等，可以看看相关材料，比如《http权威指南》等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608508257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225101,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1591658271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591658271","product_id":100025201,"comment_content":"再次感受分层带来的巨大好处，每一层专注自己的事情，把整体的复杂度分解了。","like_count":1},{"had_liked":false,"id":191894,"user_name":"lcp0578","can_delete":false,"product_type":"c1","uid":1559585,"ip_address":"","ucode":"E347928F8DB98D","user_header":"https://static001.geekbang.org/account/avatar/00/17/cc/21/e3c45732.jpg","comment_is_top":false,"comment_ctime":1584802750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584802750","product_id":100025201,"comment_content":"许老师的见解独到","like_count":0},{"had_liked":false,"id":180626,"user_name":"幻灰龙","can_delete":false,"product_type":"c1","uid":1046202,"ip_address":"","ucode":"AFEDCC997C2FF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/ba/09ab72d2.jpg","comment_is_top":false,"comment_ctime":1582354658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582354658","product_id":100025201,"comment_content":"网络协议的分层形成的栈，在应用层的状态管理中，底层状态机，中间层状态机，上层状态机，也存在这样的栈的结构。","like_count":0},{"had_liked":false,"id":180459,"user_name":"SXPeople","can_delete":false,"product_type":"c1","uid":1313127,"ip_address":"","ucode":"C6D9E2AE5278A9","user_header":"https://static001.geekbang.org/account/avatar/00/14/09/67/b46d3045.jpg","comment_is_top":false,"comment_ctime":1582284922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582284922","product_id":100025201,"comment_content":"网络通讯就像渠道代理，级别越高价格越有优势，级别越低价格越高；通讯量成本和和你出货量、库存、物流相关","like_count":0},{"had_liked":false,"id":139371,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1570621086,"is_pvip":false,"replies":[{"id":"54162","content":"封闭协议是指自己定义应用层的网络协议，而不是用http或者protobuf之类的开放协议。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1570833269,"ip_address":"","comment_id":139371,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570621086","product_id":100025201,"comment_content":"请问老师，开放协议与封闭协议是怎么理解呢","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469912,"discussion_content":"封闭协议是指自己定义应用层的网络协议，而不是用http或者protobuf之类的开放协议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570833269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131992,"user_name":"弹弹君","can_delete":false,"product_type":"c1","uid":1189043,"ip_address":"","ucode":"BDB4B8C33CC2F5","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/b3/3dbdb243.jpg","comment_is_top":false,"comment_ctime":1568000323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568000323","product_id":100025201,"comment_content":"基于成熟应用层协议，资源和对资源的CURD都很方便去操作和维护","like_count":0},{"had_liked":false,"id":113304,"user_name":"Geek_gooy","can_delete":false,"product_type":"c1","uid":1504570,"ip_address":"","ucode":"FC168C31530040","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLluwfFjxlCmg9p2rJVicBdBo6OYpN0EAotUguias8wc78WtAEPHsWic0880CqGwyNypy2KZqVpYhGiag/132","comment_is_top":false,"comment_ctime":1562940670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562940670","product_id":100025201,"comment_content":"把收获记录一下<br>理解了面向链接的通信和不面向链接的通信。<br>写代码时不面向链接的通信需要根据客户端地址来判断处理发来的数据。<br>面向链接的软件开发用成熟简单的Http协议就可以了，因为基本不可避免有此开销。","like_count":0},{"had_liked":false,"id":103645,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1560482102,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560482102","product_id":100025201,"comment_content":"可以憧憬下“服务端开发”的章节了","like_count":0},{"had_liked":false,"id":102563,"user_name":"苟范儿","can_delete":false,"product_type":"c1","uid":1364883,"ip_address":"","ucode":"B06B86765512FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/93/bef5a186.jpg","comment_is_top":false,"comment_ctime":1560252930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560252930","product_id":100025201,"comment_content":"感谢老师对网络的讲解～","like_count":0},{"had_liked":false,"id":101169,"user_name":"jaxsong","can_delete":false,"product_type":"c1","uid":1007331,"ip_address":"","ucode":"E80610A713A2B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/e3/75a94649.jpg","comment_is_top":false,"comment_ctime":1559733462,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1559733462","product_id":100025201,"comment_content":"之前面试遇到个问题，怎么优化UDP使数据更安全，对这个一直很疑惑","like_count":0,"discussions":[{"author":{"id":1503600,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f1/70/bca09d2d.jpg","nickname":"觉","note":"","ucode":"95E85D30E92170","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38119,"discussion_content":"你跟面试官说那就用tcp啊(狗头护体)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571730873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101139,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1559725594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559725594","product_id":100025201,"comment_content":"就是讲了常用协议TCP&#47;IP协议族、邮件协议.<br>概述讲了http、tcp，没讲udp<br>HTTP可以看《http权威指南》<br>tcp&#47;ip可以看“tcp&#47;ip详解”系列，3卷，分别为:<br>《TCP&#47;IP详解 卷1：协议》<br>《TCP&#47;IP详解 卷2：实现》<br>《TCP&#47;IP详解 卷3：TCP事务协议、HTTP、NNTP和UNIX域协议》","like_count":0}]}