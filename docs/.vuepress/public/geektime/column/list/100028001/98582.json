{"id":98582,"title":"06 | Stream如何提高遍历集合效率？","content":"<p>你好，我是刘超。</p><p>上一讲中，我在讲List集合类，那我想你一定也知道集合的顶端接口Collection。在Java8中，Collection新增了两个流方法，分别是Stream()和parallelStream()。</p><p>通过英文名不难猜测，这两个方法肯定和Stream有关，那进一步猜测，是不是和我们熟悉的InputStream和OutputStream也有关系呢？集合类中新增的两个Stream方法到底有什么作用？今天，我们就来深入了解下Stream。</p><h2>什么是Stream？</h2><p>现在很多大数据量系统中都存在分表分库的情况。</p><p>例如，电商系统中的订单表，常常使用用户ID的Hash值来实现分表分库，这样是为了减少单个表的数据量，优化用户查询订单的速度。</p><p>但在后台管理员审核订单时，他们需要将各个数据源的数据查询到应用层之后进行合并操作。</p><p>例如，当我们需要查询出过滤条件下的所有订单，并按照订单的某个条件进行排序，单个数据源查询出来的数据是可以按照某个条件进行排序的，但多个数据源查询出来已经排序好的数据，并不代表合并后是正确的排序，所以我们需要在应用层对合并数据集合重新进行排序。</p><p>在Java8之前，我们通常是通过for循环或者Iterator迭代来重新排序合并数据，又或者通过重新定义Collections.sorts的Comparator方法来实现，这两种方式对于大数据量系统来说，效率并不是很理想。</p><!-- [[[read_end]]] --><p>Java8中添加了一个新的接口类Stream，他和我们之前接触的字节流概念不太一样，Java8集合中的Stream相当于高级版的Iterator，他可以通过Lambda 表达式对集合进行各种非常便利、高效的聚合操作（Aggregate Operation），或者大批量数据操作 (Bulk Data Operation)。</p><p>Stream的聚合操作与数据库SQL的聚合操作sorted、filter、map等类似。我们在应用层就可以高效地实现类似数据库SQL的聚合操作了，而在数据操作方面，Stream不仅可以通过串行的方式实现数据操作，还可以通过并行的方式处理大批量数据，提高数据的处理效率。</p><p><strong>接下来我们就用一个简单的例子来体验下Stream的简洁与强大。</strong></p><p>这个Demo的需求是过滤分组一所中学里身高在160cm以上的男女同学，我们先用传统的迭代方式来实现，代码如下：</p><pre><code>Map&lt;String, List&lt;Student&gt;&gt; stuMap = new HashMap&lt;String, List&lt;Student&gt;&gt;();\n        for (Student stu: studentsList) {\n            if (stu.getHeight() &gt; 160) { //如果身高大于160\n                if (stuMap.get(stu.getSex()) == null) { //该性别还没分类\n                    List&lt;Student&gt; list = new ArrayList&lt;Student&gt;(); //新建该性别学生的列表\n                    list.add(stu);//将学生放进去列表\n                    stuMap.put(stu.getSex(), list);//将列表放到map中\n                } else { //该性别分类已存在\n                    stuMap.get(stu.getSex()).add(stu);//该性别分类已存在，则直接放进去即可\n                }\n            }\n        }\n\n</code></pre><p>我们再使用Java8中的Stream API进行实现：</p><p>1.串行实现</p><pre><code>Map&lt;String, List&lt;Student&gt;&gt; stuMap = stuList.stream().filter((Student s) -&gt; s.getHeight() &gt; 160) .collect(Collectors.groupingBy(Student ::getSex)); \n</code></pre><p>2.并行实现</p><pre><code>Map&lt;String, List&lt;Student&gt;&gt; stuMap = stuList.parallelStream().filter((Student s) -&gt; s.getHeight() &gt; 160) .collect(Collectors.groupingBy(Student ::getSex)); \n</code></pre><p>通过上面两个简单的例子，我们可以发现，Stream结合Lambda表达式实现遍历筛选功能非常得简洁和便捷。</p><h2>Stream如何优化遍历？</h2><p>上面我们初步了解了Java8中的Stream API，那Stream是如何做到优化迭代的呢？并行又是如何实现的？下面我们就透过Stream源码剖析Stream的实现原理。</p><h3>1.Stream操作分类</h3><p>在了解Stream的实现原理之前，我们先来了解下Stream的操作分类，因为他的操作分类其实是实现高效迭代大数据集合的重要原因之一。为什么这样说，分析完你就清楚了。</p><p>官方将Stream中的操作分为两大类：中间操作（Intermediate operations）和终结操作（Terminal operations）。中间操作只对操作进行了记录，即只会返回一个流，不会进行计算操作，而终结操作是实现了计算操作。</p><p>中间操作又可以分为无状态（Stateless）与有状态（Stateful）操作，前者是指元素的处理不受之前元素的影响，后者是指该操作只有拿到所有元素之后才能继续下去。</p><p>终结操作又可以分为短路（Short-circuiting）与非短路（Unshort-circuiting）操作，前者是指遇到某些符合条件的元素就可以得到最终结果，后者是指必须处理完所有元素才能得到最终结果。操作分类详情如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/94/ea8dfeebeae8f05ae809ee61b3bf3094.jpg?wh=2036*1438\" alt=\"\"></p><p><span class=\"orange\">我们通常还会将中间操作称为懒操作，也正是由这种懒操作结合终结操作、数据源构成的处理管道（Pipeline），实现了Stream的高效。</span></p><h3>2.Stream源码实现</h3><p>在了解Stream如何工作之前，我们先来了解下Stream包是由哪些主要结构类组合而成的，各个类的职责是什么。参照下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/00/fc256f9f8f9e3224aac10b2ee8940e00.jpg?wh=698*428\" alt=\"\"></p><p>BaseStream和Stream为最顶端的接口类。BaseStream主要定义了流的基本接口方法，例如，spliterator、isParallel等；Stream则定义了一些流的常用操作方法，例如，map、filter等。</p><p>ReferencePipeline是一个结构类，他通过定义内部类组装了各种操作流。他定义了Head、StatelessOp、StatefulOp三个内部类，实现了BaseStream与Stream的接口方法。</p><p>Sink接口是定义每个Stream操作之间关系的协议，他包含begin()、end()、cancellationRequested()、accpt()四个方法。ReferencePipeline最终会将整个Stream流操作组装成一个调用链，而这条调用链上的各个Stream操作的上下关系就是通过Sink接口协议来定义实现的。</p><h3>3.Stream操作叠加</h3><p>我们知道，一个Stream的各个操作是由处理管道组装，并统一完成数据处理的。在JDK中每次的中断操作会以使用阶段（Stage）命名。</p><p>管道结构通常是由ReferencePipeline类实现的，前面讲解Stream包结构时，我提到过ReferencePipeline包含了Head、StatelessOp、StatefulOp三种内部类。</p><p>Head类主要用来定义数据源操作，在我们初次调用names.stream()方法时，会初次加载Head对象，此时为加载数据源操作；接着加载的是中间操作，分别为无状态中间操作StatelessOp对象和有状态操作StatefulOp对象，此时的Stage并没有执行，而是通过AbstractPipeline生成了一个中间操作Stage链表；当我们调用终结操作时，会生成一个最终的Stage，通过这个Stage触发之前的中间操作，从最后一个Stage开始，递归产生一个Sink链。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/19/f548ce93fef2d41b03274295aa0a0419.jpg?wh=1854*364\" alt=\"\"></p><p><strong>下面我们再通过一个例子来感受下Stream的操作分类是如何实现高效迭代大数据集合的。</strong></p><pre><code>List&lt;String&gt; names = Arrays.asList(&quot;张三&quot;, &quot;李四&quot;, &quot;王老五&quot;, &quot;李三&quot;, &quot;刘老四&quot;, &quot;王小二&quot;, &quot;张四&quot;, &quot;张五六七&quot;);\n\nString maxLenStartWithZ = names.stream()\n    \t            .filter(name -&gt; name.startsWith(&quot;张&quot;))\n    \t            .mapToInt(String::length)\n    \t            .max()\n    \t            .toString();\n</code></pre><p>这个例子的需求是查找出一个长度最长，并且以张为姓氏的名字。从代码角度来看，你可能会认为是这样的操作流程：首先遍历一次集合，得到以“张”开头的所有名字；然后遍历一次filter得到的集合，将名字转换成数字长度；最后再从长度集合中找到最长的那个名字并且返回。</p><p>这里我要很明确地告诉你，实际情况并非如此。我们来逐步分析下这个方法里所有的操作是如何执行的。</p><p>首先 ，因为names是ArrayList集合，所以names.stream()方法将会调用集合类基础接口Collection的Stream方法：</p><pre><code>    default Stream&lt;E&gt; stream() {\n        return StreamSupport.stream(spliterator(), false);\n    }\n</code></pre><p>然后，Stream方法就会调用StreamSupport类的Stream方法，方法中初始化了一个ReferencePipeline的Head内部类对象：</p><pre><code> public static &lt;T&gt; Stream&lt;T&gt; stream(Spliterator&lt;T&gt; spliterator, boolean parallel) {\n        Objects.requireNonNull(spliterator);\n        return new ReferencePipeline.Head&lt;&gt;(spliterator,\n                                            StreamOpFlag.fromCharacteristics(spliterator),\n                                            parallel);\n    }\n</code></pre><p>再调用filter和map方法，这两个方法都是无状态的中间操作，所以执行filter和map操作时，并没有进行任何的操作，而是分别创建了一个Stage来标识用户的每一次操作。</p><p>而通常情况下Stream的操作又需要一个回调函数，所以一个完整的Stage是由数据来源、操作、回调函数组成的三元组来表示。如下图所示，分别是ReferencePipeline的filter方法和map方法：</p><pre><code>  @Override\n    public final Stream&lt;P_OUT&gt; filter(Predicate&lt;? super P_OUT&gt; predicate) {\n        Objects.requireNonNull(predicate);\n        return new StatelessOp&lt;P_OUT, P_OUT&gt;(this, StreamShape.REFERENCE,\n                                     StreamOpFlag.NOT_SIZED) {\n            @Override\n            Sink&lt;P_OUT&gt; opWrapSink(int flags, Sink&lt;P_OUT&gt; sink) {\n                return new Sink.ChainedReference&lt;P_OUT, P_OUT&gt;(sink) {\n                    @Override\n                    public void begin(long size) {\n                        downstream.begin(-1);\n                    }\n\n                    @Override\n                    public void accept(P_OUT u) {\n                        if (predicate.test(u))\n                            downstream.accept(u);\n                    }\n                };\n            }\n        };\n    }\n</code></pre><pre><code>   @Override\n    @SuppressWarnings(&quot;unchecked&quot;)\n    public final &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super P_OUT, ? extends R&gt; mapper) {\n        Objects.requireNonNull(mapper);\n        return new StatelessOp&lt;P_OUT, R&gt;(this, StreamShape.REFERENCE,\n                                     StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT) {\n            @Override\n            Sink&lt;P_OUT&gt; opWrapSink(int flags, Sink&lt;R&gt; sink) {\n                return new Sink.ChainedReference&lt;P_OUT, R&gt;(sink) {\n                    @Override\n                    public void accept(P_OUT u) {\n                        downstream.accept(mapper.apply(u));\n                    }\n                };\n            }\n        };\n    }\n\n</code></pre><p>new StatelessOp将会调用父类AbstractPipeline的构造函数，这个构造函数将前后的Stage联系起来，生成一个Stage链表：</p><pre><code> AbstractPipeline(AbstractPipeline&lt;?, E_IN, ?&gt; previousStage, int opFlags) {\n        if (previousStage.linkedOrConsumed)\n            throw new IllegalStateException(MSG_STREAM_LINKED);\n        previousStage.linkedOrConsumed = true;\n        previousStage.nextStage = this;//将当前的stage的next指针指向之前的stage\n\n        this.previousStage = previousStage;//赋值当前stage当全局变量previousStage \n        this.sourceOrOpFlags = opFlags &amp; StreamOpFlag.OP_MASK;\n        this.combinedFlags = StreamOpFlag.combineOpFlags(opFlags, previousStage.combinedFlags);\n        this.sourceStage = previousStage.sourceStage;\n        if (opIsStateful())\n            sourceStage.sourceAnyStateful = true;\n        this.depth = previousStage.depth + 1;\n    }\n</code></pre><p>因为在创建每一个Stage时，都会包含一个opWrapSink()方法，该方法会把一个操作的具体实现封装在Sink类中，Sink采用（处理-&gt;转发）的模式来叠加操作。</p><p>当执行max方法时，会调用ReferencePipeline的max方法，此时由于max方法是终结操作，所以会创建一个TerminalOp操作，同时创建一个ReducingSink，并且将操作封装在Sink类中。</p><pre><code> @Override\n    public final Optional&lt;P_OUT&gt; max(Comparator&lt;? super P_OUT&gt; comparator) {\n        return reduce(BinaryOperator.maxBy(comparator));\n    }\n</code></pre><p>最后，调用AbstractPipeline的wrapSink方法，该方法会调用opWrapSink生成一个Sink链表，Sink链表中的每一个Sink都封装了一个操作的具体实现。</p><pre><code>  @Override\n    @SuppressWarnings(&quot;unchecked&quot;)\n    final &lt;P_IN&gt; Sink&lt;P_IN&gt; wrapSink(Sink&lt;E_OUT&gt; sink) {\n        Objects.requireNonNull(sink);\n\n        for ( @SuppressWarnings(&quot;rawtypes&quot;) AbstractPipeline p=AbstractPipeline.this; p.depth &gt; 0; p=p.previousStage) {\n            sink = p.opWrapSink(p.previousStage.combinedFlags, sink);\n        }\n        return (Sink&lt;P_IN&gt;) sink;\n    }\n\n</code></pre><p>当Sink链表生成完成后，Stream开始执行，通过spliterator迭代集合，执行Sink链表中的具体操作。</p><pre><code> @Override\n    final &lt;P_IN&gt; void copyInto(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator) {\n        Objects.requireNonNull(wrappedSink);\n\n        if (!StreamOpFlag.SHORT_CIRCUIT.isKnown(getStreamAndOpFlags())) {\n            wrappedSink.begin(spliterator.getExactSizeIfKnown());\n            spliterator.forEachRemaining(wrappedSink);\n            wrappedSink.end();\n        }\n        else {\n            copyIntoWithCancel(wrappedSink, spliterator);\n        }\n    }\n</code></pre><p>Java8中的Spliterator的forEachRemaining会迭代集合，每迭代一次，都会执行一次filter操作，如果filter操作通过，就会触发map操作，然后将结果放入到临时数组object中，再进行下一次的迭代。完成中间操作后，就会触发终结操作max。</p><p>这就是串行处理方式了，那么Stream的另一种处理数据的方式又是怎么操作的呢？</p><h3>4.Stream并行处理</h3><p>Stream处理数据的方式有两种，串行处理和并行处理。要实现并行处理，我们只需要在例子的代码中新增一个Parallel()方法，代码如下所示：</p><pre><code>List&lt;String&gt; names = Arrays.asList(&quot;张三&quot;, &quot;李四&quot;, &quot;王老五&quot;, &quot;李三&quot;, &quot;刘老四&quot;, &quot;王小二&quot;, &quot;张四&quot;, &quot;张五六七&quot;);\n\nString maxLenStartWithZ = names.stream()\n                    .parallel()\n    \t            .filter(name -&gt; name.startsWith(&quot;张&quot;))\n    \t            .mapToInt(String::length)\n    \t            .max()\n    \t            .toString();\n</code></pre><p>Stream的并行处理在执行终结操作之前，跟串行处理的实现是一样的。而在调用终结方法之后，实现的方式就有点不太一样，会调用TerminalOp的evaluateParallel方法进行并行处理。</p><pre><code> final &lt;R&gt; R evaluate(TerminalOp&lt;E_OUT, R&gt; terminalOp) {\n        assert getOutputShape() == terminalOp.inputShape();\n        if (linkedOrConsumed)\n            throw new IllegalStateException(MSG_STREAM_LINKED);\n        linkedOrConsumed = true;\n\n        return isParallel()\n               ? terminalOp.evaluateParallel(this, sourceSpliterator(terminalOp.getOpFlags()))\n               : terminalOp.evaluateSequential(this, sourceSpliterator(terminalOp.getOpFlags()));\n    }\n</code></pre><p>这里的并行处理指的是，Stream结合了ForkJoin框架，对Stream 处理进行了分片，Splititerator中的estimateSize方法会估算出分片的数据量。</p><p>ForkJoin框架和估算算法，在这里我就不具体讲解了，如果感兴趣，你可以深入源码分析下该算法的实现。</p><p>通过预估的数据量获取最小处理单元的阈值，如果当前分片大小大于最小处理单元的阈值，就继续切分集合。每个分片将会生成一个Sink链表，当所有的分片操作完成后，ForkJoin框架将会合并分片任何结果集。</p><h2>合理使用Stream</h2><p>看到这里，你应该对Stream API是如何优化集合遍历有个清晰的认知了。Stream API用起来简洁，还能并行处理，那是不是使用Stream API，系统性能就更好呢？通过一组测试，我们一探究竟。</p><p>我们将对常规的迭代、Stream串行迭代以及Stream并行迭代进行性能测试对比，迭代循环中，我们将对数据进行过滤、分组等操作。分别进行以下几组测试：</p><ul>\n<li>多核CPU服务器配置环境下，对比长度100的int数组的性能；</li>\n<li>多核CPU服务器配置环境下，对比长度1.00E+8的int数组的性能；</li>\n<li>多核CPU服务器配置环境下，对比长度1.00E+8对象数组过滤分组的性能；</li>\n<li>单核CPU服务器配置环境下，对比长度1.00E+8对象数组过滤分组的性能。</li>\n</ul><p>由于篇幅有限，我这里直接给出统计结果，你也可以自己去验证一下，具体的测试代码可以在<a href=\"https://github.com/nickliuchao/stream\">Github</a>上查看。通过以上测试，我统计出的测试结果如下（迭代使用时间）：</p><ul>\n<li>常规的迭代&lt;Stream并行迭代&lt;Stream串行迭代</li>\n<li>Stream并行迭代&lt;常规的迭代&lt;Stream串行迭代</li>\n<li>Stream并行迭代&lt;常规的迭代&lt;Stream串行迭代</li>\n<li>常规的迭代&lt;Stream串行迭代&lt;Stream并行迭代</li>\n</ul><p>通过以上测试结果，我们可以看到：在循环迭代次数较少的情况下，常规的迭代方式性能反而更好；在单核CPU服务器配置环境中，也是常规迭代方式更有优势；而在大数据循环迭代中，如果服务器是多核CPU的情况下，Stream的并行迭代优势明显。所以我们在平时处理大数据的集合时，应该尽量考虑将应用部署在多核CPU环境下，并且使用Stream的并行迭代方式进行处理。</p><p>用事实说话，我们看到其实使用Stream未必可以使系统性能更佳，还是要结合应用场景进行选择，也就是合理地使用Stream。</p><h2>总结</h2><p>纵观Stream的设计实现，非常值得我们学习。从大的设计方向上来说，Stream将整个操作分解为了链式结构，不仅简化了遍历操作，还为实现了并行计算打下了基础。</p><p>从小的分类方向上来说，Stream将遍历元素的操作和对元素的计算分为中间操作和终结操作，而中间操作又根据元素之间状态有无干扰分为有状态和无状态操作，实现了链结构中的不同阶段。</p><p><strong>在串行处理操作中，</strong>Stream在执行每一步中间操作时，并不会做实际的数据操作处理，而是将这些中间操作串联起来，最终由终结操作触发，生成一个数据处理链表，通过Java8中的Spliterator迭代器进行数据处理；此时，每执行一次迭代，就对所有的无状态的中间操作进行数据处理，而对有状态的中间操作，就需要迭代处理完所有的数据，再进行处理操作；最后就是进行终结操作的数据处理。</p><p><strong>在并行处理操作中，</strong>Stream对中间操作基本跟串行处理方式是一样的，但在终结操作中，Stream将结合ForkJoin框架对集合进行切片处理，ForkJoin框架将每个切片的处理结果Join合并起来。最后就是要注意Stream的使用场景。</p><h2>思考题</h2><p>这里有一个简单的并行处理案例，请你找出其中存在的问题。</p><pre><code>//使用一个容器装载100个数字，通过Stream并行处理的方式将容器中为单数的数字转移到容器parallelList\nList&lt;Integer&gt; integerList= new ArrayList&lt;Integer&gt;();\n\nfor (int i = 0; i &lt;100; i++) {\n      integerList.add(i);\n}\n\nList&lt;Integer&gt; parallelList = new ArrayList&lt;Integer&gt;() ;\nintegerList.stream()\n           .parallel()\n           .filter(i-&gt;i%2==1)\n           .forEach(i-&gt;parallelList.add(i));\n\n</code></pre><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起学习。</p><p></p>","comments":[{"had_liked":false,"id":117784,"user_name":"奔跑的猪","can_delete":false,"product_type":"c1","uid":1602593,"ip_address":"","ucode":"94375121A233F4","user_header":"https://static001.geekbang.org/account/avatar/00/18/74/21/6c64afa9.jpg","comment_is_top":false,"comment_ctime":1564130084,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"332276611876","product_id":100028001,"comment_content":"实践中大量采用stream大概有2年了吧，先是在Team内推广，后来在CodeReview中强制要求。<br>个人以为，出发点并不是出于性能考虑，而是结合lambda，在编程思维上的转变，将大家对代码的关注点放在“行为传递”上面，而不是参数传递，阅读时也能省去模板语法产生的“噪音”。","like_count":76,"discussions":[{"author":{"id":1520314,"avatar":"https://static001.geekbang.org/account/avatar/00/17/32/ba/e9c6a37e.jpg","nickname":"Minos","note":"","ucode":"C6E164A5973DF5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581672,"discussion_content":"语义比较明确，可以避免创建无效变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658913398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99868,"user_name":"陆离","can_delete":false,"product_type":"c1","uid":1483932,"ip_address":"","ucode":"2C8C206CE36A81","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/9c/b32ed9e9.jpg","comment_is_top":false,"comment_ctime":1559347920,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"164768105168","product_id":100028001,"comment_content":"思考题中这样的方式会造成null值和缺值<br>因为arraylist不是线程安全的，例如线程一在size++后准备给index为size+1的位置赋值，这个时候第二个线程又给size++，这个线程一赋值的index就变成了size+2,在线程一赋值后，线程二又在size+2的位置赋值。<br>这样的结果就是size+1的位置没有值null,size+2的位置为线程二赋的值，线程一赋的值被覆盖。<br>正确的方式应该是使用collect()","like_count":39,"discussions":[{"author":{"id":1363834,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cf/7a/51951b07.jpg","nickname":"微笑","note":"","ucode":"6E8E2964D0191F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222058,"discussion_content":"请教下  这个地方用collect该怎么写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586095723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2390479,"avatar":"https://static001.geekbang.org/account/avatar/00/24/79/cf/211f0208.jpg","nickname":"郝希军","note":"","ucode":"38CCE6B9BAF529","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1363834,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cf/7a/51951b07.jpg","nickname":"微笑","note":"","ucode":"6E8E2964D0191F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360477,"discussion_content":"Collection就是正常的for循环呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616461744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222058,"ip_address":""},"score":360477,"extra":""}]}]},{"had_liked":false,"id":99897,"user_name":"小白猪","can_delete":false,"product_type":"c1","uid":1180615,"ip_address":"","ucode":"BC7FC0E0585B76","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/c7/bd45f0c9.jpg","comment_is_top":false,"comment_ctime":1559354515,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"87458700435","product_id":100028001,"comment_content":"思考题，由于流是并行处理，parallelList会存在并发问题，应该使用collect方法聚合","like_count":20,"discussions":[{"author":{"id":2060756,"avatar":"","nickname":"在下蟑螂王","note":"","ucode":"E66A65A327095A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292211,"discussion_content":"你好 猪哥 这个collect具体怎么用 思考题的代码应该怎么修改？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595142832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2532285,"avatar":"","nickname":"Geek_926921","note":"","ucode":"51C3B0178D77E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2060756,"avatar":"","nickname":"在下蟑螂王","note":"","ucode":"E66A65A327095A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575756,"discussion_content":".collect(Collector.tolist())","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655092113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292211,"ip_address":""},"score":575756,"extra":""}]},{"author":{"id":1363834,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cf/7a/51951b07.jpg","nickname":"微笑","note":"","ucode":"6E8E2964D0191F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222057,"discussion_content":"你好  白兄 这个collect具体怎么用  作者的代码应该怎么修改？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586095660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99854,"user_name":"(´田ω田`)","can_delete":false,"product_type":"c1","uid":1210588,"ip_address":"","ucode":"CA043D3EC6FE7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/dc/0c9c9b0f.jpg","comment_is_top":false,"comment_ctime":1559326301,"is_pvip":false,"replies":[{"id":"35905","content":"思考题中的问题是在并行操作arraylist时，需要考虑线程安全问题","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559393156,"ip_address":"","comment_id":99854,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53098933853","product_id":100028001,"comment_content":"感觉这一节课已经值回了整个课程的票价，给老师点赞！<br><br>思考题：Stream并行执行，无法确认每个元素的处理顺序，最后parallelList中的数字是无序的","like_count":12,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452296,"discussion_content":"思考题中的问题是在并行操作arraylist时，需要考虑线程安全问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559393156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99999,"user_name":"一路看风景","can_delete":false,"product_type":"c1","uid":1044061,"ip_address":"","ucode":"70F4D74720A0F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/5d/c1105c12.jpg","comment_is_top":false,"comment_ctime":1559382369,"is_pvip":false,"replies":[{"id":"35908","content":"是的，但未必所有公司都有构建大数据的能力，而且一些公司有自己的中间件团队，例如文章开始说到的分表分库的查询操作，使用stream的并行操作就有优势了","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559394030,"ip_address":"","comment_id":99999,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48804022625","product_id":100028001,"comment_content":"老师您好，在容器盛行的微服务环境下，以及大数据处理流行的潮流中，我觉得stream的应用空间多少有些尴尬呢，不知是不是我的理解有误。即：单核容器运行的环境下stream没了性能优势，大数据的处理又有大数据平台去完成使命，所以是不是意味着我们可以从stream得到的最大收益变成了流式编程和函数式编程带来的代码易读和易用性了呢？","like_count":11,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452359,"discussion_content":"是的，但未必所有公司都有构建大数据的能力，而且一些公司有自己的中间件团队，例如文章开始说到的分表分库的查询操作，使用stream的并行操作就有优势了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559394030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194104,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/78/286d0842.jpg","nickname":"高亮","note":"","ucode":"2DDBB3607BA80F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24156,"discussion_content":"老师，如果分库分表用stream聚合后，如何实现分页?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570020765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100172,"user_name":"小辉辉","can_delete":false,"product_type":"c1","uid":1189661,"ip_address":"","ucode":"9FF25E25C85350","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/1d/1cb36854.jpg","comment_is_top":false,"comment_ctime":1559467572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40214173236","product_id":100028001,"comment_content":"ArrayList是线程不安全的集合，而当前又用了并行流去处理，所以会出现有异常、少数据或者正常输出结果这三种情况。","like_count":10},{"had_liked":false,"id":99893,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1559354136,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40214059800","product_id":100028001,"comment_content":"parallel Stream 的并发机制是通过ForkJoinPool实现的，它的通用线程池是一个无界队列，想问下，数据量很大的时候，比如1w个元素，它分片的依据是什么，每个分片多大；子任务比较多的时候，会不会严重消耗内存以及频繁触发GC等","like_count":10},{"had_liked":false,"id":101333,"user_name":"阿厚","can_delete":false,"product_type":"c1","uid":1480571,"ip_address":"","ucode":"F5AF6C1A202227","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6PbKL8YRE2wzqdoxcS5E88Wvot8Vv0Kuo92BUKPlWISPfGjSXCmK7vD12aBdibwY6q11gbkPxK4Weje2xCcCdEw/132","comment_is_top":false,"comment_ctime":1559783360,"is_pvip":false,"replies":[{"id":"36608","content":"之前用过sharing-jdbc以及mycat，一个明显的区别是sharing-jdbc是嵌入方式，而mycat是基于proxy，所以理论上来说 proxy方式会有性能损耗。现在我们在使用sharing-jdbc，这里不打广告，两个中间件都有自己的优势。<br><br>分页查询是基于我这篇文章说的方式，将每个分表的数据结果集查询出来，通过归并排序计算出。<br>具体的实现方式有区别，本次专栏的后面课程也会具体讲到。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559873878,"ip_address":"","comment_id":101333,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31624554432","product_id":100028001,"comment_content":"老师，请教2个问题：<br>1.有什么分表分库中间件推荐么？<br>2.分表分库以后，查询分页怎么办呢？","like_count":8,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452917,"discussion_content":"之前用过sharing-jdbc以及mycat，一个明显的区别是sharing-jdbc是嵌入方式，而mycat是基于proxy，所以理论上来说 proxy方式会有性能损耗。现在我们在使用sharing-jdbc，这里不打广告，两个中间件都有自己的优势。\n\n分页查询是基于我这篇文章说的方式，将每个分表的数据结果集查询出来，通过归并排序计算出。\n具体的实现方式有区别，本次专栏的后面课程也会具体讲到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559873878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99875,"user_name":"圣西罗","can_delete":false,"product_type":"c1","uid":1521859,"ip_address":"","ucode":"DE096B25B4DABB","user_header":"https://static001.geekbang.org/account/avatar/00/17/38/c3/f18411f9.jpg","comment_is_top":false,"comment_ctime":1559350918,"is_pvip":false,"replies":[{"id":"35970","content":"当应用程序以前没有使用lambda表达式时，会动态生成lambda目标对象，这是导致慢的实际原因。我们可以在运行加载后，也就是初次测试之后，紧接着后面加几个for循环，再测试几次，对比下性能。<br><br>虽然单独使用lambda表达式在初次运行时要比传统方式慢很多，但结合stream的并行操作，在多核环境下还有有优势的。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559449581,"ip_address":"","comment_id":99875,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27329154694","product_id":100028001,"comment_content":"老师，现在网上有些说法做测试用lambda比普通for循环速度慢五倍，因此有人拒绝用。实际情况是什么样呢？如果我自己想测，应该怎么尽可能排除外因干扰，测一下他们的实际效率对比？","like_count":6,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452303,"discussion_content":"当应用程序以前没有使用lambda表达式时，会动态生成lambda目标对象，这是导致慢的实际原因。我们可以在运行加载后，也就是初次测试之后，紧接着后面加几个for循环，再测试几次，对比下性能。\n\n虽然单独使用lambda表达式在初次运行时要比传统方式慢很多，但结合stream的并行操作，在多核环境下还有有优势的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559449581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2106663,"avatar":"https://static001.geekbang.org/account/avatar/00/20/25/27/0076d304.jpg","nickname":"帽子狗","note":"","ucode":"51596F366AF068","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329029,"discussion_content":"慢5倍不至于，大抵是用的包装类来迭代int, 单纯的IntStream比直接循环差别不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606299667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167951,"user_name":"辉煌码农","can_delete":false,"product_type":"c1","uid":1332799,"ip_address":"","ucode":"09779C2E06EA52","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIy5ULaodUwsLoPuk1wd22hqXsaBbibNEqXM0kgrCTYDGKYQkZICYEyH9wMj4hyUicuQwHdDuOKRj0g/132","comment_is_top":false,"comment_ctime":1577968382,"is_pvip":false,"replies":[{"id":"65926","content":"终结操作又可以分为短路（Short-circuiting）与非短路（Unshort-circuiting）操作，前者是指遇到某些符合条件的元素就可以得到最终结果，后者是指必须处理完所有元素才能得到最终结果。<br><br>allMatch也是属于遇到某些条件的情况下可以终结的操作，即找到一个不合法条件的，短路返回false ，无需等待其他的处理结果，所以也属于短路。<br>","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1578484116,"ip_address":"","comment_id":167951,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18757837566","product_id":100028001,"comment_content":"allMatch为什么是短路呢，短路的如何定义的呢","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480065,"discussion_content":"终结操作又可以分为短路（Short-circuiting）与非短路（Unshort-circuiting）操作，前者是指遇到某些符合条件的元素就可以得到最终结果，后者是指必须处理完所有元素才能得到最终结果。\n\nallMatch也是属于遇到某些条件的情况下可以终结的操作，即找到一个不合法条件的，短路返回false ，无需等待其他的处理结果，所以也属于短路。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578484116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100561,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1559577330,"is_pvip":false,"replies":[{"id":"36259","content":"对的，但copyOnwriteList更适合某一时间段统一新增，且新增时避免大量操作容器发生。比较适合在深夜更新黑名单类似的业务。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559611664,"ip_address":"","comment_id":100561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18739446514","product_id":100028001,"comment_content":"是不是该把思考题中的arraylist换成线程安全的copyOnwriteList就可以解决线程不安全问题?","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452600,"discussion_content":"对的，但copyOnwriteList更适合某一时间段统一新增，且新增时避免大量操作容器发生。比较适合在深夜更新黑名单类似的业务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559611664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99923,"user_name":"Loubobooo","can_delete":false,"product_type":"c1","uid":1108306,"ip_address":"","ucode":"7B2543A80EBDEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/52/aa3be800.jpg","comment_is_top":false,"comment_ctime":1559359009,"is_pvip":false,"replies":[{"id":"35978","content":"对的，可能会出现少数字、无序以及异常情况","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559452549,"ip_address":"","comment_id":99923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18739228193","product_id":100028001,"comment_content":"parallelList集合里呈现的是无序的数字，是这样吗？","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452327,"discussion_content":"对的，可能会出现少数字、无序以及异常情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559452549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143341,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1515145,"ip_address":"","ucode":"0EF2D58B46D7C3","user_header":"https://static001.geekbang.org/account/avatar/00/17/1e/89/25b12054.jpg","comment_is_top":false,"comment_ctime":1571671051,"is_pvip":false,"replies":[{"id":"55863","content":"是的，好的实现思想会被应用到各个地方","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1572081470,"ip_address":"","comment_id":143341,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14456572939","product_id":100028001,"comment_content":"感觉stream这种中间操作和终结操作 跟spark中转换操作和处理操作 思想很像，懒加载","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471496,"discussion_content":"是的，好的实现思想会被应用到各个地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572081470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113571,"user_name":"N","can_delete":false,"product_type":"c1","uid":1133657,"ip_address":"","ucode":"3791619172D64F","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/59/c75cb36d.jpg","comment_is_top":false,"comment_ctime":1563082023,"is_pvip":false,"replies":[{"id":"41368","content":"上万数量级使用并行可以提高效率。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1563090054,"ip_address":"","comment_id":113571,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14447983911","product_id":100028001,"comment_content":"老师有个问题请教一下，公司业务代码中有大量stream对集合遍历，过滤，聚合的用法，但都是串行的，因为大部分数据量不是很大，请问数据量多大的时候才有必要使用并行提高效率呢？","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458286,"discussion_content":"上万数量级使用并行可以提高效率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563090054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159882,"user_name":"Mr wind","can_delete":false,"product_type":"c1","uid":1217874,"ip_address":"","ucode":"484F02D1962239","user_header":"https://static001.geekbang.org/account/avatar/00/12/95/52/ad190682.jpg","comment_is_top":false,"comment_ctime":1575816904,"is_pvip":false,"replies":[{"id":"71190","content":"Java8 Stream的collect方法是线程安全的。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1583159354,"ip_address":"","comment_id":159882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10165751496","product_id":100028001,"comment_content":"为什么聚合操作是线程安全的呢。","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477196,"discussion_content":"Java8 Stream的collect方法是线程安全的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583159354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153014,"user_name":"开心小毛","can_delete":false,"product_type":"c1","uid":1023762,"ip_address":"","ucode":"9D57A2773759F3","user_header":"","comment_is_top":false,"comment_ctime":1574140709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164075301","product_id":100028001,"comment_content":"使用stream是否有节省内存消耗的考虑，例如当需要遍历一个含上万条目的数据库查询结果。","like_count":2},{"had_liked":false,"id":100703,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1559620746,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10149555338","product_id":100028001,"comment_content":"最终的结果无序，且可能结果都是不正确的，因为ArrayList是线程不安全的","like_count":2},{"had_liked":false,"id":99863,"user_name":"bro.","can_delete":false,"product_type":"c1","uid":1124948,"ip_address":"","ucode":"D65283CD869804","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/54/c9990105.jpg","comment_is_top":false,"comment_ctime":1559345322,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10149279914","product_id":100028001,"comment_content":"老师，这么早更新，读完感觉跟rxjava设计思想很接近，不订阅前面过滤条件都不会真正的运行！","like_count":2,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336315,"discussion_content":"👍rxjava的代码不好读啊 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608549425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207375,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1587061975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882029271","product_id":100028001,"comment_content":"老师，有个地方想不明白，串行化的stream执行filter,map的时候为何比直接使用for循环快？stream是每迭代一次就执行一次filter,map。而直接for也可以循环一次执行filter,map。它们时间复杂度是一样的。","like_count":1},{"had_liked":false,"id":205851,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1011030,"ip_address":"","ucode":"5F451F91114A74","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6d/56/65b05765.jpg","comment_is_top":false,"comment_ctime":1586747097,"is_pvip":false,"replies":[{"id":"77105","content":"是的，原理都差不多，parallel stream写起来更简便","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1586862910,"ip_address":"","comment_id":205851,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5881714393","product_id":100028001,"comment_content":"对一个集合进行并行处理 我对比下来 使用显式的线程池进行多线程处理要快于使用 parallel stream  而且使用线程池应该能保证系统线程资源不被耗尽吧 ","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491601,"discussion_content":"是的，原理都差不多，parallel stream写起来更简便","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586862910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136068,"user_name":"better","can_delete":false,"product_type":"c1","uid":1257750,"ip_address":"","ucode":"2B9BCCED753D7F","user_header":"https://static001.geekbang.org/account/avatar/00/13/31/16/f2269e73.jpg","comment_is_top":false,"comment_ctime":1569338655,"is_pvip":true,"replies":[{"id":"52250","content":"这篇源码是比较难理解，尝试多读几遍","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1569414358,"ip_address":"","comment_id":136068,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864305951","product_id":100028001,"comment_content":"目前刚毕业，读起这篇文章觉得有点吃力，特别是到了Stream的源码开始那里，后面基本都看不懂了，老师，是因为现在的实战经验还不够吗","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468441,"discussion_content":"这篇源码是比较难理解，尝试多读几遍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569414358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101216,"user_name":"迎风劲草","can_delete":false,"product_type":"c1","uid":1511787,"ip_address":"","ucode":"66EDA6C0B12A44","user_header":"https://static001.geekbang.org/account/avatar/00/17/11/6b/8034959a.jpg","comment_is_top":false,"comment_ctime":1559743149,"is_pvip":false,"replies":[{"id":"36494","content":"这里强调的是使用stream的并发处理大数据时，效率高于传统的遍历处理。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559780473,"ip_address":"","comment_id":101216,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5854710445","product_id":100028001,"comment_content":"老师，为什么stream操作，就比自己循环的效率高呢，没看懂。","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452855,"discussion_content":"这里强调的是使用stream的并发处理大数据时，效率高于传统的遍历处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559780473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101016,"user_name":"乐","can_delete":false,"product_type":"c1","uid":1107521,"ip_address":"","ucode":"E6CBC4DA23A29C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/41/83275db5.jpg","comment_is_top":false,"comment_ctime":1559701429,"is_pvip":false,"replies":[{"id":"36486","content":"两者都可以，不过这里如果要使用线程安全集合，可以使用vector。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559779990,"ip_address":"","comment_id":101016,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854668725","product_id":100028001,"comment_content":"那请问老师，思考题中如何解决这种并发时的线程安全问题？是使用 CopyOnWriteArrayList 还是使用 .collect(Collectors.toList())？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452779,"discussion_content":"两者都可以，不过这里如果要使用线程安全集合，可以使用vector。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559779990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100315,"user_name":"郑晨Cc","can_delete":false,"product_type":"c1","uid":1324942,"ip_address":"","ucode":"57146E444D6329","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/8e/cf0b4575.jpg","comment_is_top":false,"comment_ctime":1559527079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854494375","product_id":100028001,"comment_content":"课程好值啊 全是干货","like_count":1},{"had_liked":false,"id":99885,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1559352994,"is_pvip":false,"replies":[{"id":"35911","content":"对的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559396600,"ip_address":"","comment_id":99885,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854320290","product_id":100028001,"comment_content":"并发操作一个ArrayList，会有线程安全问题？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452310,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559396600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343786,"user_name":"G小调","can_delete":false,"product_type":"c1","uid":1145529,"ip_address":"","ucode":"8F3D50E2C1A559","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/b9/c3d3a92f.jpg","comment_is_top":false,"comment_ctime":1651053785,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651053785","product_id":100028001,"comment_content":"两个问题<br>1.可能parallelList数组越界<br>2.数据可能缺少","like_count":0},{"had_liked":false,"id":332868,"user_name":"六六大顺","can_delete":false,"product_type":"c1","uid":1303803,"ip_address":"","ucode":"CD78269D88BF74","user_header":"https://static001.geekbang.org/account/avatar/00/13/e4/fb/ff564de5.jpg","comment_is_top":false,"comment_ctime":1643772983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643772983","product_id":100028001,"comment_content":"i-&gt;i%2==1 这个地方推荐使用i-&gt;i%2!=0","like_count":0},{"had_liked":false,"id":292147,"user_name":"Geek_95ce9d","can_delete":false,"product_type":"c1","uid":2529457,"ip_address":"","ucode":"D6738DB70954CE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJmUb3iazHcLxaVRgpBNUDKYDsibZJ1Z9kaBziaJkbI37FknKUBa4ZTib9pj2ibhUUXe59Jn6yo4FuVC3g/132","comment_is_top":false,"comment_ctime":1620703783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620703783","product_id":100028001,"comment_content":"伐值可还行","like_count":0},{"had_liked":false,"id":291882,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1620569032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620569032","product_id":100028001,"comment_content":"stream 可以去看《Java 8 实战》这本书，里面有详细介绍stream流的演变过程，以及forkJoin的原理。","like_count":0},{"had_liked":false,"id":248468,"user_name":"Geek_d2186f","can_delete":false,"product_type":"c1","uid":2100878,"ip_address":"","ucode":"90A85FFF7A4D51","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erHVh5AkbfJMK2xQlM0vow6UlsOAUQI47tia6SnQsQAujd0yGwRnOtibrEevkzEcdatzBdnCPnd8GyA/132","comment_is_top":false,"comment_ctime":1600174180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600174180","product_id":100028001,"comment_content":"对过前几课的学习，跟老师学习最深的新的，就是学习源码，了解代码运行的本质，感受很深，在这里咨询一下老师，感觉有时候给一个大框架，看代码知其代码干什么，不知道整体框架中功能，所以咨询一下，这种东西是需要对技术文档有个全面通读，然后了解原因的方法是否更好呢？谢谢","like_count":0},{"had_liked":false,"id":242516,"user_name":"Lima1995","can_delete":false,"product_type":"c1","uid":1512878,"ip_address":"","ucode":"420FF3DD740967","user_header":"https://static001.geekbang.org/account/avatar/00/17/15/ae/b8be6a28.jpg","comment_is_top":false,"comment_ctime":1597745774,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597745774","product_id":100028001,"comment_content":"没有终结操作","like_count":1},{"had_liked":false,"id":241772,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1597417215,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597417215","product_id":100028001,"comment_content":"如果换成这样：<br>        List&lt;Integer&gt; parallelList = integerList.stream()<br>                .parallel()<br>                .filter(i-&gt;i%2==1)<br>                .collect(Collectors.toList());<br>是不是变成串行了的呢？","like_count":0,"discussions":[{"author":{"id":2531606,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/lvLKFmCZfCB7V6e2YA9kL4Fr9KaNEyGiaKBDGDRSuSKqMukJKLb8JH7BXIicdNiaHLmaQladtWJJPqZkyu5icCyrjw/132","nickname":"xxh","note":"","ucode":"289A870D9FC0FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379432,"discussion_content":"你这并没有串行还是并行，例子那个是因为并行下 list add 不安全 会存在丢失数据的情况。如果想要串行就把parallel()这个方法去了。你这里只是不会丢失数据如果做排序什么的还是不能保证顺序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623901200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214893,"user_name":"Wheat","can_delete":false,"product_type":"c1","uid":1260141,"ip_address":"","ucode":"7D99EA149B6DE8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/910b2445.jpg","comment_is_top":false,"comment_ctime":1588843724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588843724","product_id":100028001,"comment_content":"老师，在介绍AbstractPipeline构造函数的时候，previousStage.nextStage = this;这一行的注释写反了，应该是将之前stage的next指针指向当前的stage，然后下一步才是更新缓存上一个stage","like_count":0},{"had_liked":false,"id":205844,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1011030,"ip_address":"","ucode":"5F451F91114A74","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6d/56/65b05765.jpg","comment_is_top":false,"comment_ctime":1586745928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586745928","product_id":100028001,"comment_content":"parallelList 类型改成 CopyOnWriteArrayList 应该就可以了","like_count":0},{"had_liked":false,"id":203825,"user_name":"2YSP","can_delete":false,"product_type":"c1","uid":1690292,"ip_address":"","ucode":"2CCA63EC90F27D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIZtZz0LgYRdEibwdYuvoiavKqBBuTsRlldPGJnJXlyelaE4HG2qFvmChX3UEibwEBgcfsvicJxyTjEEQ/132","comment_is_top":false,"comment_ctime":1586270597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586270597","product_id":100028001,"comment_content":"这里的源码有点难理解，看了好几遍才看懂。原来小数据的情况下常规迭代更有性能优势，涨知识了。","like_count":0},{"had_liked":false,"id":203653,"user_name":"滴答丶滴","can_delete":false,"product_type":"c1","uid":1181206,"ip_address":"","ucode":"2093C2948B4327","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","comment_is_top":false,"comment_ctime":1586247572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586247572","product_id":100028001,"comment_content":"老师，请问，parallelStream()  与 parallel() 有什么区别嘛？","like_count":0},{"had_liked":false,"id":199282,"user_name":"10年以后","can_delete":false,"product_type":"c1","uid":1297421,"ip_address":"","ucode":"FE58CA7E5C2AF9","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/0d/89435926.jpg","comment_is_top":false,"comment_ctime":1585485758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585485758","product_id":100028001,"comment_content":"stream流","like_count":0},{"had_liked":false,"id":189548,"user_name":".","can_delete":false,"product_type":"c1","uid":1083502,"ip_address":"","ucode":"83F583994F4F72","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/6e/3bd860d3.jpg","comment_is_top":false,"comment_ctime":1584528325,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584528325","product_id":100028001,"comment_content":"stream使代码更加简洁优雅","like_count":0},{"had_liked":false,"id":188298,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1344281,"ip_address":"","ucode":"B877ABD0CF4661","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/19/0a3fe8c1.jpg","comment_is_top":false,"comment_ctime":1584336869,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1584336869","product_id":100028001,"comment_content":"1、在并情况，ArrayList 是线程不安全的，可能会少数据。<br>2、数据返回 collect 方法聚合","like_count":0},{"had_liked":false,"id":162545,"user_name":"遇见","can_delete":false,"product_type":"c1","uid":1624590,"ip_address":"","ucode":"FAF53CD4C28494","user_header":"https://static001.geekbang.org/account/avatar/00/18/ca/0e/5009c5ff.jpg","comment_is_top":false,"comment_ctime":1576552125,"is_pvip":false,"replies":[{"id":"61963","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1576668586,"ip_address":"","comment_id":162545,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576552125","product_id":100028001,"comment_content":"&quot;这个例子的需求是查找出一个长度最长，并且以张为姓氏的名字&quot;<br><br>文稿中的代码只能获取到名字最长的长度吧? 是获取不到名字最长的名字的, 最后的toString只能得到 &quot;OptionalInt[4]&quot; 得不到 &quot;张五六七&quot;<br><br>改成:<br><br>&quot;names.stream()<br>                .filter(name -&gt; name.startsWith(&quot;张&quot;)).max(Comparator.comparingInt(String::length))<br>                .ifPresent(System.out::println);&quot;<br><br>才可以打印出来名字","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478081,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576668586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159181,"user_name":"丽儿","can_delete":false,"product_type":"c1","uid":1386917,"ip_address":"","ucode":"3804ACF2C1D8A3","user_header":"https://static001.geekbang.org/account/avatar/00/15/29/a5/9c6e7526.jpg","comment_is_top":false,"comment_ctime":1575553723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575553723","product_id":100028001,"comment_content":"有点类似于spark中rdd操作","like_count":0},{"had_liked":false,"id":148937,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1573113228,"is_pvip":false,"replies":[{"id":"57611","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1573383743,"ip_address":"","comment_id":148937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573113228","product_id":100028001,"comment_content":"并行操作中，采用的ArrayList容器是线程不安全的，会造成共享数据错误的问题。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473676,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573383743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142444,"user_name":"warriorSL","can_delete":false,"product_type":"c1","uid":1597200,"ip_address":"","ucode":"902DA345FD2623","user_header":"https://static001.geekbang.org/account/avatar/00/18/5f/10/ed332d5a.jpg","comment_is_top":false,"comment_ctime":1571369243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571369243","product_id":100028001,"comment_content":"最后这个问题，我在实际的编程中也出现过，先声明了一个arrayList用于存放结果，后面使用parallelStream对数据进行加工，然后add进list中，最后又对arrayList进行遍历，总会出现npe的报错，直到打日志才发现，里面有个元素是null","like_count":1},{"had_liked":false,"id":140168,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1570843811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570843811","product_id":100028001,"comment_content":"2019.10.12 打卡  目前开发和生产用的是jdk7，读此篇 扩展一下视野。后续细读","like_count":0},{"had_liked":false,"id":135855,"user_name":"青莲","can_delete":false,"product_type":"c1","uid":1181787,"ip_address":"","ucode":"6BA5D5D47DE38E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/5b/2a342424.jpg","comment_is_top":false,"comment_ctime":1569289019,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1569289019","product_id":100028001,"comment_content":"并行处理，ArrayList不是安全的并发容器，全出现添加数小于等于50","like_count":0},{"had_liked":false,"id":131687,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567845689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567845689","product_id":100028001,"comment_content":"课后思考及问题<br>JDK8 目前还未使用，课后思考题中ArraryList是非线程安全的并发执行会存在多线程安全的问题。<br>目前所知Stream在多核机器上执行性能更佳，单核不能发挥并行的威力反而会因为线程的上下文切换导致性能下降。<br>感觉老师设计的思考题没有仅仅围绕性能优化的思路，另外每节感觉没有一个毕竟明显的关联关系，可能和课程定位相关吧😄像柯南一样每集的凶手都不一样!","like_count":0},{"had_liked":false,"id":121137,"user_name":"帽子丨影","can_delete":false,"product_type":"c1","uid":1225395,"ip_address":"","ucode":"2B34892A2DE83E","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/b3/798a4bb2.jpg","comment_is_top":false,"comment_ctime":1565063049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565063049","product_id":100028001,"comment_content":"两个问题请教下：1.作者结尾说道，pall在中间操作的处理上跟串行一样，是指执行中间操作也是串行的还是说生成sink时是一样的。第二个问题是，以文中取张姓最长的名字长度的例子中普通的方法仅需一次迭代，而使用Stream，中间操作需要迭代一次，终结操作又需要迭代一次是吗？","like_count":0},{"had_liked":false,"id":119793,"user_name":"博弈","can_delete":false,"product_type":"c1","uid":1433344,"ip_address":"","ucode":"B1A69837E41972","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EcYNib1bnDf5dz6JcrE8AoyZYMdqic2VNmbBtCcVZTO9EoDZZxqlQDEqQKo6klCCmklOtN9m0dTd2AOXqSneJYLw/132","comment_is_top":false,"comment_ctime":1564703665,"is_pvip":false,"replies":[{"id":"44007","content":"对的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564714706,"ip_address":"","comment_id":119793,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564703665","product_id":100028001,"comment_content":"ArrayList是非线程安全的，在多线程环境下会出现无需，数据不全，异常等情况","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461074,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564714706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116529,"user_name":"张健","can_delete":false,"product_type":"c1","uid":1093260,"ip_address":"","ucode":"8A033EF424CB4A","user_header":"https://static001.geekbang.org/account/avatar/00/10/ae/8c/5c92c95e.jpg","comment_is_top":false,"comment_ctime":1563864378,"is_pvip":false,"replies":[{"id":"42715","content":"建议多次执行，取平均值","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1563932976,"ip_address":"","comment_id":116529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563864378","product_id":100028001,"comment_content":"老师，拿你的测试代码，测试的时候，发现在1.00E+8 大小下，速度快慢和执行代码的顺序有关，调整顺序执行后，结果完全不一样，最先执行的永远最慢<br>SerialStreamTest.SerialStreamForObjectTest(studentsList);<br>ParallelStreamTest.ParallelStreamForObjectTest(studentsList);<br>IteratorTest.IteratorForObjectTest(studentsList);<br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459577,"discussion_content":"建议多次执行，取平均值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111454,"user_name":"师志强","can_delete":false,"product_type":"c1","uid":1104267,"ip_address":"","ucode":"9D30EE3BFEDB8A","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/8b/76c27279.jpg","comment_is_top":false,"comment_ctime":1562560500,"is_pvip":false,"replies":[{"id":"40611","content":"是的，stream在多核机器下并行处理大数据量优势明显。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562574290,"ip_address":"","comment_id":111454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562560500","product_id":100028001,"comment_content":"通过对比发现（在多核场景），能用stream并行就用，不能用就用常规，stream串行好像没有任何优势可言。是不是多有场景中都不建议使用stream串行呢？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457362,"discussion_content":"是的，stream在多核机器下并行处理大数据量优势明显。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562574290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111315,"user_name":"一路奔跑","can_delete":false,"product_type":"c1","uid":1562814,"ip_address":"","ucode":"F1B708E8AE1793","user_header":"https://static001.geekbang.org/account/avatar/00/17/d8/be/49d49db2.jpg","comment_is_top":false,"comment_ctime":1562544732,"is_pvip":false,"replies":[{"id":"40613","content":"过来人，印象应该深刻","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562574665,"ip_address":"","comment_id":111315,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562544732","product_id":100028001,"comment_content":"ArraryList是非线性安全的，并行流处理会出现越界或者重复或者少元素的情况！这个坑我踩过！","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457301,"discussion_content":"过来人，印象应该深刻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562574665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109366,"user_name":"ok绷","can_delete":false,"product_type":"c1","uid":1441991,"ip_address":"","ucode":"7B2303B3319C4D","user_header":"https://static001.geekbang.org/account/avatar/00/16/00/c7/59caefa7.jpg","comment_is_top":false,"comment_ctime":1562027092,"is_pvip":false,"replies":[{"id":"39927","content":"可以","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562203701,"ip_address":"","comment_id":109366,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562027092","product_id":100028001,"comment_content":"parallelList是非线程安全的，可以使用线程安全的集合类，但是不知道到使用stream的collect方法可以吗？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456380,"discussion_content":"可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562203701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109175,"user_name":"男朋友","can_delete":false,"product_type":"c1","uid":1401707,"ip_address":"","ucode":"9818176E0BBD31","user_header":"https://static001.geekbang.org/account/avatar/00/15/63/6b/34b89fae.jpg","comment_is_top":false,"comment_ctime":1561974946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561974946","product_id":100028001,"comment_content":"让我想到了REDIS,虽然是单线程的,但是redis是等数据来了才处理,而不是一连接就处理或者等待的.","like_count":0},{"had_liked":false,"id":102127,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1560143457,"is_pvip":false,"replies":[{"id":"36879","content":"对了！","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560175339,"ip_address":"","comment_id":102127,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560143457","product_id":100028001,"comment_content":"首先是测试结果，无序的问题是其一，不过也不算问题。另一个问题是，有可能会最后结果只有47~49个值的现象（实际值应该为50个）。并且多次循环的话会报下标越界。<br>自认为是ArrayList的并发问题。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453273,"discussion_content":"对了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560175339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100740,"user_name":"假装自己不胖","can_delete":false,"product_type":"c1","uid":1412994,"ip_address":"","ucode":"308F1BAA96CDA5","user_header":"https://static001.geekbang.org/account/avatar/00/15/8f/82/374f43a1.jpg","comment_is_top":false,"comment_ctime":1559629585,"is_pvip":false,"replies":[{"id":"36428","content":"结果是一样的，算出最大值。可以复制代码实践下，注意复制后的空格符问题。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559704113,"ip_address":"","comment_id":100740,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559629585","product_id":100028001,"comment_content":"例子中查询长度最长并且以张为姓氏的名字,如果有两个会怎么样","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452660,"discussion_content":"结果是一样的，算出最大值。可以复制代码实践下，注意复制后的空格符问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559704113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100415,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1559552124,"is_pvip":false,"replies":[{"id":"36211","content":"是的，但如果需要并行计算时，我们又怎么去处理这类问题呢？","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559569753,"ip_address":"","comment_id":100415,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559552124","product_id":100028001,"comment_content":"是因为并行处理并且List是非线程安全的缘故吗？那段代码执行几次后会出现null，把parallel去掉就好了","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452534,"discussion_content":"是的，但如果需要并行计算时，我们又怎么去处理这类问题呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559569753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100409,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1559550905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559550905","product_id":100028001,"comment_content":"ArrayList不是线程安全的，而parallel()又是并行流，是不是会有问题？","like_count":0},{"had_liked":false,"id":100020,"user_name":"fl","can_delete":false,"product_type":"c1","uid":1257698,"ip_address":"","ucode":"8576150D48C3CE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJYJ74BKhY0wt5qbCj91ArzdVZ6rvibyMqQZ8iaZBibwNQC0AxvHPy0AvJBI8mleicT4UlF7jChiaJFXg/132","comment_is_top":false,"comment_ctime":1559391493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559391493","product_id":100028001,"comment_content":"可以具体解释下spliterator吗","like_count":0},{"had_liked":false,"id":99996,"user_name":"a、","can_delete":false,"product_type":"c1","uid":1532404,"ip_address":"","ucode":"590FE8DB111492","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","comment_is_top":false,"comment_ctime":1559382112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559382112","product_id":100028001,"comment_content":"运行老师的那段代码,发现会提示ArrayIndexOutOfBoundsException,想到arrayslist是非线程安全的，于是就把parallelList改成了Vector，运行多次，并未发现异常。然后看到有学员说用collect方法，我就改成conllect方法，也没有出现异常。对比了两个方法，发现用verctor比用collect方法的性能要高，但是collect方法出来的list是排好序的，而Vector是乱序的，于是我把数据量调到了1千万，Vector再加上排序，发现也比collect方法要快。不是很清楚，为什么并行的处理大数据量也比加锁的要慢？","like_count":0},{"had_liked":false,"id":99985,"user_name":"我知道了嗯","can_delete":false,"product_type":"c1","uid":1138471,"ip_address":"","ucode":"9186EC1F32C490","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/27/a6873bc9.jpg","comment_is_top":false,"comment_ctime":1559378632,"is_pvip":false,"replies":[{"id":"35984","content":"ArrayList不是线程安全的，在并行操作时，会出现多线程操作问题，例如出现null值，有可能是在扩容时，复制出现问题。同时也会出现值被覆盖的情况。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559453623,"ip_address":"","comment_id":99985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559378632","product_id":100028001,"comment_content":"思考题结果是无序的并且有null值?  这是为什么","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452352,"discussion_content":"ArrayList不是线程安全的，在并行操作时，会出现多线程操作问题，例如出现null值，有可能是在扩容时，复制出现问题。同时也会出现值被覆盖的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559453623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99963,"user_name":"梁小航航","can_delete":false,"product_type":"c1","uid":1390811,"ip_address":"","ucode":"F33C2018E04E18","user_header":"https://static001.geekbang.org/account/avatar/00/15/38/db/6825519a.jpg","comment_is_top":false,"comment_ctime":1559373209,"is_pvip":false,"replies":[{"id":"35979","content":"你好皮卡丘，运行结果是OptionalInt[4]，再排查下是不是复制代码存在差异。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559452822,"ip_address":"","comment_id":99963,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1559373209","product_id":100028001,"comment_content":"老师，我有一个疑问，就是在例子中查询长度最长并且以张为姓氏的名字。代码在实际运行中maxLenStartwithZ 值为：OptionalInt.empty","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452342,"discussion_content":"你好皮卡丘，运行结果是OptionalInt[4]，再排查下是不是复制代码存在差异。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559452822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1224678,"avatar":"https://static001.geekbang.org/account/avatar/00/12/af/e6/9c77acff.jpg","nickname":"我行我素","note":"","ucode":"4C69542FAB0671","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2888,"discussion_content":"姓名前面有空格，去掉空格后是OptionalInt[4]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564021270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99925,"user_name":"Loubobooo","can_delete":false,"product_type":"c1","uid":1108306,"ip_address":"","ucode":"7B2543A80EBDEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/52/aa3be800.jpg","comment_is_top":false,"comment_ctime":1559359288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559359288","product_id":100028001,"comment_content":"嵌套循环多次，会出现数组越界的问题，推测应该是该流是并行处理，操作非安全类ArrayList存在并发问题","like_count":0},{"had_liked":false,"id":99898,"user_name":"哲","can_delete":false,"product_type":"c1","uid":1110473,"ip_address":"","ucode":"5387E831DB789F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/c9/adc1df03.jpg","comment_is_top":false,"comment_ctime":1559354701,"is_pvip":false,"replies":[{"id":"35910","content":"由于arraylist为非线程安全，所以在并行操作时，会出现异常和无序的情况。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559396521,"ip_address":"","comment_id":99898,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559354701","product_id":100028001,"comment_content":"老师，我按你这例子写了一下，执行直接抛数组下标的异常了，这是为何？而且多执行几次，并不是每次都异常，期待您解一下我的疑惑","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452314,"discussion_content":"由于arraylist为非线程安全，所以在并行操作时，会出现异常和无序的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559396521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99886,"user_name":"黄老邪","can_delete":false,"product_type":"c1","uid":1020850,"ip_address":"","ucode":"9118978511AFF2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/b2/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1559353252,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1559353252","product_id":100028001,"comment_content":"思考题：ArrayList不是线程安全的集合类，并发操作可能会造成数据不准确<br><br>之前在使用的stream的时候只觉得写代码的时候更简洁方便了，没考虑性能的问题，日后还是要根据场景进行区分","like_count":0},{"had_liked":false,"id":99878,"user_name":"陆离","can_delete":false,"product_type":"c1","uid":1483932,"ip_address":"","ucode":"2C8C206CE36A81","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/9c/b32ed9e9.jpg","comment_is_top":false,"comment_ctime":1559351320,"is_pvip":false,"replies":[{"id":"35906","content":"对的，在串行时效率没有传统方式快，但数据量比较大时，并行的效率最好。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559393582,"ip_address":"","comment_id":99878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559351320","product_id":100028001,"comment_content":"老师，我一般使用stream的原因是它这种DSL风格使代码很简洁，并且封装了map，reduce一些操作，最重要的是可并行。<br>但是stream高效这块我很疑惑，虽然它是在终止操作之前执行中间操作，但它在迭代那些filter不是也是使用的传统的方式吗，而且在数据量不是很大的情况下还会比传统方式要慢一些。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452306,"discussion_content":"对的，在串行时效率没有传统方式快，但数据量比较大时，并行的效率最好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559393582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}