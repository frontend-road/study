{"id":598587,"title":"05｜共识Raft：如何保证多机房数据的一致性？","content":"<p>你好，我是徐长龙。</p><p><a href=\"https://time.geekbang.org/column/article/598570\">上节课</a>我们讲了如何通过Otter实现同城双活机房的数据库同步，但是<strong>这种方式并不能保证双机房数据双主的事务强一致性</strong>。</p><p>如果机房A对某一条数据做了更改，B机房同时修改，Otter会用合并逻辑对冲突的数据行或字段做合并。为了避免类似问题，我们在上节课对客户端做了要求：用户客户端在一段时间内只能访问一个机房。</p><p>但如果业务对“事务+强一致”的要求极高，比如库存不允许超卖，那我们通常只有两种选择：一种是将服务做成本地服务，但这个方式并不适合所有业务；另一种是采用多机房，但需要用分布式强一致算法保证多个副本的一致性。</p><p>在行业里，最知名的分布式强一致算法要属Paxos，但它的原理过于抽象，在使用过程中经过多次修改会和原设计产生很大偏离，这让很多人不确定自己的修改是不是合理的。而且，很多人需要一到两年的实践经验才能彻底掌握这个算法。</p><p>随着我们对分布式多副本同步的需求增多，过于笼统的Paxos已经不能满足市场需要，于是，Raft算法诞生了。</p><p>相比Paxos，Raft不仅更容易理解，还能保证数据操作的顺序，因此在分布式数据服务中被广泛使用，像etcd、Kafka这些知名的基础组件都是用Raft算法实现的。</p><!-- [[[read_end]]] --><p>那今天这节课我们就来探寻一下Raft的实现原理，可以说了解了Raft，就相当于了解了分布式强一致性数据服务的半壁江山。几乎所有关于多个数据服务节点的选举、数据更新和同步都是采用类似的方式实现的，只是针对不同的场景和应用做了一些调整。</p><h2>如何选举Leader？</h2><p>为了帮你快速熟悉Raft的实现原理，下面我会基于 <a href=\"https://raft.github.io/\">Raft官方的例子</a>，对Raft进行讲解。</p><p><img src=\"https://static001.geekbang.org/resource/image/af/23/af3c573401c2c82a3fa4ffac6bff3a23.jpg?wh=1920x1234\" alt=\"图片\" title=\"Raft服务状态角色、调用关系、日志\"></p><p>如图所示，我们启动五个Raft分布式数据服务：S1、S2、S3、S4、S5，每个节点都有以下三种状态：</p><ul>\n<li>Leader：负责数据修改，主动同步修改变更给Follower；</li>\n<li>Follower：接收Leader推送的变更数据；</li>\n<li>Candidate：集群中如果没有Leader，那么进入选举模式。</li>\n</ul><p>如果集群中的Follower节点在指定时间内没有收到Leader的心跳，那就代表Leader损坏，集群无法更新数据。这时候Follower会进入选举模式，在多个Follower中选出一个Leader，保证一组服务中一直存在一个Leader，同时确保数据修改拥有唯一的决策进程。</p><p>那Leader服务是如何选举出来的呢？进入选举模式后，这5个服务会随机等待一段时间。等待时间一到，当前服务先投自己一票，并对当前的任期“term”加 1 （上图中term:4就代表第四任Leader），然后对其他服务发送RequestVote RPC（即请求投票）进行拉票。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/23/d9d670acc44806bdca7320d05c610423.jpg?wh=1920x1234\" alt=\"图片\" title=\"S1失去联系，S5最先超时发起选举\"></p><p>收到投票申请的服务，并且<strong>申请服务（即“发送投票申请的服务”）的任期和同步进度都比它超前或相同</strong>，那么它就会投申请服务一票，并把当前的任期更新成最新的任期。同时，这个收到投票申请的服务不再发起投票，会等待其他服务邀请。</p><p>注意，每个服务在同一任期内只投票一次。如果所有服务都没有获取到多数票（三分之二以上服务节点的投票），就会等当前选举超时后，对任期加1，再次进行选举。最终，获取多数票且最先结束选举倒计时的服务会被选为Leader。</p><p>被选为Leader的服务会发布广播通知其他服务，并向其他服务同步新的任期和其进度情况。同时，新任Leader会在任职期间周期性发送心跳，保证各个子服务（Follwer）不会因为超时而切换到选举模式。在选举期间，若有服务收到上一任Leader的心跳，则会拒绝（如下图S1）。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/08/7f9bf2d92f806e0007ee1e6542212308.jpg?wh=1920x1234\" alt=\"图片\" title=\"投票结果返回\"></p><p>选举结束后，所有服务都进入数据同步状态。</p><h2>如何保证多副本写一致？</h2><p>在数据同步期间，Follower会与Leader的日志完全保持一致。不难看出，Raft算法采用的也是主从方式同步，只不过Leader不是固定的服务，而是被选举出来的。</p><p>这样当个别节点出现故障时，是不会影响整体服务的。不过，这种机制也有缺点：如果Leader失联，那么整体服务会有一段时间忙于选举，而无法提供数据服务。</p><p>通常来说，客户端的数据修改请求都会发送到Leader节点（如下图S1）进行统一决策，如果客户端请求发送到了Follower，Follower就会将请求重定向到Leader。那么，Raft是怎么实现同分区数据备份副本的强一致性呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/5b/b866385e2b4ba21515302bcb1836ab5b.jpg?wh=1920x1234\" alt=\"图片\" title=\"多副本同步\"><br>\n具体来讲，Leader成功修改数据后，会产生对应的日志，然后Leader会给所有Follower发送单条日志同步信息。只要大多数Follower返回同步成功，Leader就会对预提交的日志进行commit，并向客户端返回修改成功。</p><p>接着，Leader在下一次心跳时（消息中leader commit字段），会把当前最新commit的Log index（日志进度）告知给各Follower节点，然后各Follower按照这个index进度对外提供数据，未被Leader最终commit的数据则不会落地对外展示。</p><p>如果在数据同步期间，客户端还有其他的数据修改请求发到Leader，那么这些请求会排队，因为这时候的Leader在阻塞等待其他节点回应。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/a4/140fa27a525163918956514db3d863a4.jpg?wh=1920x1234\" alt=\"图片\" title=\"通过日志同步，同时同步Follower目前Leader 的commit index\"></p><p>不过，这种阻塞等待的设计也让Raft算法对网络性能的依赖很大，因为每次修改都要并发请求多个节点，等待大部分节点成功同步的结果。</p><p>最惨的情况是，返回的RTT会按照最慢的网络服务响应耗时（“两地三中心”的一次同步时间为100ms左右），再加上主节点只有一个，一组Raft的服务性能是有上限的。对此，我们可以减少数据量并对数据做切片，提高整体集群的数据修改性能。</p><p>请你注意，当大多数Follower与Leader同步的日志进度差异过大时，数据变更请求会处于等待状态，直到一半以上的Follower与Leader的进度一致，才会返回变更成功。当然，这种情况比较少见。</p><h2>服务之间如何同步日志进度？</h2><p>讲到这我们不难看出，在Raft的数据同步机制中，日志发挥着重要的作用。在同步数据时，Raft采用的日志是一个有顺序的指令日志WAL（Write Ahead Log），类似MySQL的binlog。该日志中记录着每次修改数据的指令和修改任期，并通过Log Index标注了当前是第几条日志，以此作为同步进度的依据。</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/51/8dea5b9b5a3a62e94a43dc5632ac6e51.jpg?wh=1920x1234\" alt=\"图片\" title=\"日志格式\"></p><p>其中，Leader的日志永远不会删除，所有的Follower都会保持和Leader <strong>完全一致，如果存在差异也会被强制覆盖</strong>。同时，每个日志都有“写入”和“commit”两个阶段，在选举时，每个服务会根据还未commit的Log Index进度，优先选择同步进度最大的节点，以此保证选举出的Leader拥有最新最全的数据。</p><p>Leader在任期内向各节点发送同步请求，其实就是按顺序向各节点推送一条条日志。如果Leader同步的进度比Follower超前，Follower就会拒绝本次同步。</p><p>Leader收到拒绝后，会从后往前一条条找出日志中还未同步的部分或者有差异的部分，然后开始一个个往后覆盖实现同步。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/7b/ed2e78bb1634eda6454ea21f73bb3b7b.jpg?wh=1920x1234\" alt=\"图片\" title=\"第一阶段找到共同进度点，第二阶段覆盖+追加同步进度\"></p><p>Leader和Follower的日志同步进度是通过日志index来确认的。Leader对日志内容和顺序有绝对的决策权，当它发现自己的日志和Follower的日志有差异时，为了确保多个副本的数据是完全一致的，它会强制覆盖Follower的日志。</p><p>那么Leader是怎么识别出Follower的日志与自己的日志有没有差异呢？实际上，Leader给Follower同步日志的时候，会同时带上Leader上一条日志的任期和索引号，与Follower当前的同步进度进行对比。</p><p>对比分为两个方面：一方面是对比Leader和Follower当前日志中的index、多条操作日志和任期；另一方面是对比Leader和Follower上一条日志的index和任期。</p><p>如果有任意一个不同，那么Leader就认为Follower的日志与自己的日志不一致，这时候<strong>Leader会一条条倒序往回对比，</strong>直到找到日志内容和任期完全一致的index，然后从这个index开始正序向下覆盖。同时，在日志数据同步期间，Leader只会commit其所在任期内的数据，<strong>过往任期的数据完全靠日志同步倒序追回</strong>。</p><p>你应该已经发现了，这样一条条推送同步有些缓慢，效率不高，这导致Raft对新启动的服务不是很友好。所以Leader会定期打快照，通过快照合并之前修改日志的记录，来降低修改日志的大小。而同步进度差距过大的Follower会从Leader最新的快照中恢复数据，按快照最后的index追赶进度。</p><h2>如何保证读取数据的强一致性？</h2><p>通过前面的讲解，我们知道了Leader和Follower之间是如何做到数据同步的，那从Follower的角度来看，它又是怎么保证自己对外提供的数据是最新的呢？</p><p>这里有个小技巧，就是Follower在收到查询请求时，会顺便问一下Leader当前最新commit的log index是什么。如果这个log index大于当前Follower同步的进度，就说明Follower的本地数据不是最新的，这时候Follower就会从Leader获取最新的数据返回给客户端。可见，保证数据强一致性的代价很大。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/99/8eb7510yyb5585977746b9fcd4dbf199.jpg?wh=3330x2141\" alt=\"\" title=\"Follower保持与Leader进度一致的方式，保证读到的数据和Leader强一致\"></p><p>你可能会好奇：如何在业务使用时保证读取数据的强一致性呢？其实我们之前说的Raft同步等待Leader commit log index的机制，已经确保了这一点。我们只需要向Leader正常提交数据修改的操作，Follower读取时拿到的就一定是最新的数据。</p><h2>总结</h2><p>很多人都说Raft是一个分布式一致性算法，但实际上Raft算法是一个共识算法（多个节点达成共识），它通过任期机制、随机时间和投票选举机制，实现了服务动态扩容及服务的高可用。</p><p>通过Raft采用强制顺序的日志同步实现多副本的数据强一致同步，如果我们用Raft算法实现用户的数据存储层，那么数据的存储和增删改查，都会具有跨机房的数据强一致性。这样一来，业务层就无需关心一致性问题，对数据直接操作，即可轻松实现多机房的强一致同步。</p><p>由于这种方式的同步代价和延迟都比较大，建议你尽量在数据量和修改量都比较小的场景内使用，行业里也有很多针对不同场景设计的库可以选择，如：parallel-raft、multi-paxos、SOFAJRaft等，更多请参考Raft的<a href=\"https://raft.github.io/\">底部开源列表</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/93/65fd6d4d751c7c888468dc7623724a93.jpg?wh=1920x1234\" alt=\"图片\"></p><h2>思考题</h2><p>最后，请你思考一下，为什么Raft集群成员增减需要特殊去做？</p><p>欢迎你在留言区与我交流讨论，我们下节课见！</p>","neighbors":{"left":{"article_title":"04｜同城双活：如何实现机房之间的数据同步？","id":598570},"right":{"article_title":"06｜领域拆分：如何合理地拆分系统？","id":599857}},"comments":[{"had_liked":false,"id":365092,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"北京","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1672102098,"is_pvip":false,"replies":[{"id":132984,"content":"从某个角度来说，这和我们的需求有很大关系。用户量大的服务业务对性能要求高，不管多大的公司投入硬件都是有限的，所以基本能看到的都是最终一致是主流（常见的读多写少服务是主流）。而分布式一致性如果不考虑性能是能做到的，只是不值得，因为还要考虑高可用等事宜。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1672206848,"ip_address":"北京","comment_id":365092,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"文中的这一段，如何保证数据一致性的解释：\n“这里有个小技巧，就是 Follower 在收到查询请求时，会顺便问一下 Leader 当前最新 commit 的 log index 是什么。”\n\n这里是不是意味着每次对从节点的查询，一定会伴随对主节点的查询？这么来看的话，性能岂不是会很差？不单单是要求修改量小，查询量多了主节点是否也容易承受不住？\n\n另外一个问题是，我们有一个大佬说，现在的分布式一致性都是扯的，我们追求的只能是最终一致性。这样说有道理吗？我们是否还应该追求分布式数据的强一致性？\n","like_count":4,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597749,"discussion_content":"从某个角度来说，这和我们的需求有很大关系。用户量大的服务业务对性能要求高，不管多大的公司投入硬件都是有限的，所以基本能看到的都是最终一致是主流（常见的读多写少服务是主流）。而分布式一致性如果不考虑性能是能做到的，只是不值得，因为还要考虑高可用等事宜。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672206848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1795357,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/1d/34ac9c2b.jpg","nickname":"王东","note":"","ucode":"EF149E179D568E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597757,"discussion_content":"如果读写都从Leader读 那么可以认为是强一致性，如果读可以在任意节点开始,那么只能是最终一致性 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672211585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1795357,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/1d/34ac9c2b.jpg","nickname":"王东","note":"","ucode":"EF149E179D568E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597769,"discussion_content":"“这里有个小技巧，就是 Follower 在收到查询请求时，会顺便问一下 Leader 当前最新 commit 的 log index 是什么。”\n\n文中这个描述来看，这个是否算强一致性呢？虽然没有直接从leader读数据，但是从leader读了当前数据的版本号。\n\n另外，是不是可以理解我seata之类的分布式事务框架也是最终一致性？因为在处理事务的时候，似乎并无法保证每个节点读取数据的一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672218154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":597757,"ip_address":"广东","group_id":0},"score":597769,"extra":""},{"author":{"id":1795357,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/1d/34ac9c2b.jpg","nickname":"王东","note":"","ucode":"EF149E179D568E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597796,"discussion_content":"文中这个技巧，也是读主属于强一致性，seata有xa可以强一致性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672230057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":597769,"ip_address":"辽宁","group_id":0},"score":597796,"extra":""}]}]},{"had_liked":false,"id":361443,"user_name":"HappyHasson","can_delete":false,"product_type":"c1","uid":2911084,"ip_address":"北京","ucode":"B84CC43E349CFA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","comment_is_top":false,"comment_ctime":1667522862,"is_pvip":false,"replies":[{"id":131464,"content":"你好，HappyHasson，很高兴再次收到你的留言\n第一个问题：网络抖动引起的下线也会影响数据的同步，所以从某个角度来说他已经不是同步更新的节点了，如果是下线的是leader那么会导致更新数据卡住等待其他follower回馈，这很影响服务稳定。第二个问题，一般来说是一半，但是从以往经验来看，一半容易出现脑裂，为了减少避免这个问题的概率，所以是三分之二，当然缺点是大规模掉线会卡住服务。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667528377,"ip_address":"北京","comment_id":361443,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"有两个问题，\n一，这里没有主观下线和客观下线的区分吗，就是当一个follower检测到leader下线，但是不一定真的下线了，而且网络抖动引起的 \n\n二，我看到的理论都是说投票过半数就选举成功了，这里说是三分之二，为什么","like_count":3,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592605,"discussion_content":"你好，HappyHasson，很高兴再次收到你的留言\n第一个问题：网络抖动引起的下线也会影响数据的同步，所以从某个角度来说他已经不是同步更新的节点了，如果是下线的是leader那么会导致更新数据卡住等待其他follower回馈，这很影响服务稳定。第二个问题，一般来说是一半，但是从以往经验来看，一半容易出现脑裂，为了减少避免这个问题的概率，所以是三分之二，当然缺点是大规模掉线会卡住服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667528377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365613,"user_name":"梅子黄时雨","can_delete":false,"product_type":"c1","uid":1015938,"ip_address":"北京","ucode":"9F788D09C2E9E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/82/3c21b30c.jpg","comment_is_top":false,"comment_ctime":1672825437,"is_pvip":false,"replies":[{"id":133180,"content":"点赞","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1672886923,"ip_address":"北京","comment_id":365613,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"搜索了下，主要是存在脑裂的问题，就是在增减集群成员后，到底有哪些成员，新老节点看到的结果会不一样，从而到导致leader选举出错。","like_count":2,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598515,"discussion_content":"点赞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672886923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363559,"user_name":"Layne","can_delete":false,"product_type":"c1","uid":1479934,"ip_address":"北京","ucode":"1FEAACD900AB39","user_header":"https://static001.geekbang.org/account/avatar/00/16/94/fe/5fbf1bdc.jpg","comment_is_top":false,"comment_ctime":1669809763,"is_pvip":true,"replies":[{"id":132131,"content":"你好，Layne，一般来说主从同步，都是从主库复制变更过程到从库执行，所以看从库同步状态的错误原因就可以了。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1669814385,"ip_address":"北京","comment_id":363559,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"老师，主从之间通信不上的时候，怎么确定是主还是从出问题了呢？这种情况下主从分别会做些啥操作呀？","like_count":2,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595194,"discussion_content":"你好，Layne，一般来说主从同步，都是从主库复制变更过程到从库执行，所以看从库同步状态的错误原因就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669814385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2314165,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","nickname":"ARM","note":"","ucode":"788FD0DBD39B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":599125,"discussion_content":"redis集群中是从节点接收不到主节点的心跳，进而向其他节点发起主节点是否故障的请求，多数节点返回主节点故障则会发起选举，否则就不发起选举。这里是主从架构应该是要依赖数据库的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673344091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595194,"ip_address":"浙江","group_id":0},"score":599125,"extra":""},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2314165,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","nickname":"ARM","note":"","ucode":"788FD0DBD39B94","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599532,"discussion_content":"不一定～分布式数据服务中，数据服务基本都是主从模式的分片副本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673577018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":599125,"ip_address":"北京","group_id":0},"score":599532,"extra":""}]}]},{"had_liked":false,"id":362024,"user_name":"Geek_499240","can_delete":false,"product_type":"c1","uid":2276485,"ip_address":"北京","ucode":"77C1E75753A9D7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLFTXb42lNxJQAZOmDicxP5iaOsUTkj1vtH9P53Mo0u7jlvUwrpJ54noOGPEEgLozZCbuIavB99bJtw/132","comment_is_top":false,"comment_ctime":1668070484,"is_pvip":false,"replies":[{"id":131685,"content":"你好，很高兴收到你的提问，你问到了一个额外的知识点，这里新选举出来的leader在选举成功后会立刻写一个no-op日志，这个操作会把之前没有commit的都提交。这么做是因为不想让新leader提交前任的内容，会产生数据冲突等问题。no-op是一个知识点，可以查一查","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668074835,"ip_address":"北京","comment_id":362024,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"如果leader收到了一个请求，并把日志同步到了大部分的follower上，如果leader 还没来得及commit就奔溃了，那么新选举出来的leader会commit这条消息吗？","like_count":2,"discussions":[{"author":{"id":2276485,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLFTXb42lNxJQAZOmDicxP5iaOsUTkj1vtH9P53Mo0u7jlvUwrpJ54noOGPEEgLozZCbuIavB99bJtw/132","nickname":"Geek_499240","note":"","ucode":"77C1E75753A9D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593671,"discussion_content":"no-op会把之前没有commit的都提交，从客户端视角来看，相当于之前写失败的操作又变成功了，是不是不符合一致性的原则？比如客户端发了个请求set x = 1，然后leader在同步到大部分follower后crash了，这个时候客户端以为写失败了。但是raft重新选举的leader又把set x=1这条记录commit了，然后客户端查询x，发现x变成了1。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1668429723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2276485,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLFTXb42lNxJQAZOmDicxP5iaOsUTkj1vtH9P53Mo0u7jlvUwrpJ54noOGPEEgLozZCbuIavB99bJtw/132","nickname":"Geek_499240","note":"","ucode":"77C1E75753A9D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593945,"discussion_content":"同时这个问题牵扯到 幽灵复现 这个问题，这个在算法补丁中有修复","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1668666624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":593671,"ip_address":"北京","group_id":0},"score":593945,"extra":""}]},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593310,"discussion_content":"你好，很高兴收到你的提问，你问到了一个额外的知识点，这里新选举出来的leader在选举成功后会立刻写一个no-op日志，这个操作会把之前没有commit的都提交。这么做是因为不想让新leader提交前任的内容，会产生数据冲突等问题。no-op是一个知识点，可以查一查","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1668074836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361449,"user_name":"HappyHasson","can_delete":false,"product_type":"c1","uid":2911084,"ip_address":"北京","ucode":"B84CC43E349CFA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","comment_is_top":false,"comment_ctime":1667524985,"is_pvip":false,"replies":[{"id":131463,"content":"你好，HappyHasson，很高兴收到你的留言，是的！这个机制是为了保证，拥有最新进度的leader能够被选中，这样可以减少损失，因为leader是可以强制其他follower和他一致的，这就导致如果leader进度不如其他follower会强制覆盖丢失掉这个差异","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667528187,"ip_address":"北京","comment_id":361449,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"收到投票申请的服务，并且申请服务（即“发送投票申请的服务”）的任期和同步进度都比它超前或相同，那么它就会投申请服务一票 \n\n原文中这句话意思是，如果一个follower收到了自荐投票请求，任期比自己大但是同步进度没有自己大，这时候会拒绝投票？","like_count":2,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592604,"discussion_content":"你好，HappyHasson，很高兴收到你的留言，是的！这个机制是为了保证，拥有最新进度的leader能够被选中，这样可以减少损失，因为leader是可以强制其他follower和他一致的，这就导致如果leader进度不如其他follower会强制覆盖丢失掉这个差异","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667528187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592659,"discussion_content":"我觉得这么做会有一个问题 \n每个follower的同步log进度不一样，而且发起投票请求也是随机的，谁先发现leader挂了谁先发起，所以网络没那么好的情况下，平均下来可能是 多轮投票才能选主成功，这样不会很慢吗 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667564725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593920,"discussion_content":"实际效果确实会很慢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668657283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":592659,"ip_address":"北京","group_id":0},"score":593920,"extra":""}]}]},{"had_liked":false,"id":378806,"user_name":"贺子","can_delete":false,"product_type":"c1","uid":2076283,"ip_address":"北京","ucode":"A64DC9D9CF7CCD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ae/7b/47200692.jpg","comment_is_top":false,"comment_ctime":1690801686,"is_pvip":false,"replies":[{"id":138037,"content":"你好，贺子，这里面有几点：首先，在 Raft 算法中，为了保证数据的强一致性，Follower 在收到查询请求时会询问 Leader 当前最新的 commit 的 log index。如果这个 log index 大于 Follower 同步的进度，说明 Follower 的本地数据不是最新的。这时候 Follower 会从 Leader 获取最新的数据返回给客户端，以保证数据的一致性，这就是前面提到的如果想要最新的数据。\n\n更进一步提高性能上来讲，Raft 算法也可以采用了等待 Leader commit log index 的机制来保证数据的一致性。Follower 在处理读取请求时，会等待 Leader 提交的日志达到一定的进度后才返回数据。这样可以确保读取的数据是已经提交并被大多数节点接受的数据，从而实现强一致性。\n\n可以说Raft 算法通过两种方式来保证数据的强一致性：Follower 主动向 Leader 查询最新的 commit log index，以及等待 Leader 的 commit log index 达到一定进度后才返回数据。这些机制确保了数据的一致性，但也会带来一定的代价和延迟。\n\n另外关于 TiDB 的支持 index read，这是因为 TiDB 在 Raft 算法的基础上进行了优化和改进，以提高读取性能和并发性。这与 Raft 算法本身保证数据一致性的机制是相辅相成的。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1690881889,"ip_address":"北京","comment_id":378806,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"这里有个小技巧，就是 Follower 在收到查询请求时，会顺便问一下 Leader 当前最新 commit 的 log index 是什么。如果这个 log index 大于当前 Follower 同步的进度，就说明 Follower 的本地数据不是最新的，这时候 Follower 就会从 Leader 获取最新的数据返回给客户端。可见，保证数据强一致性的代价很大。这里和后面的感觉矛盾呀！到底raft是什么机制呀，后面说wait index！tidb就是支持indx read，类似","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624732,"discussion_content":"你好，贺子，这里面有几点：首先，在 Raft 算法中，为了保证数据的强一致性，Follower 在收到查询请求时会询问 Leader 当前最新的 commit 的 log index。如果这个 log index 大于 Follower 同步的进度，说明 Follower 的本地数据不是最新的。这时候 Follower 会从 Leader 获取最新的数据返回给客户端，以保证数据的一致性，这就是前面提到的如果想要最新的数据。\n\n更进一步提高性能上来讲，Raft 算法也可以采用了等待 Leader commit log index 的机制来保证数据的一致性。Follower 在处理读取请求时，会等待 Leader 提交的日志达到一定的进度后才返回数据。这样可以确保读取的数据是已经提交并被大多数节点接受的数据，从而实现强一致性。\n\n可以说Raft 算法通过两种方式来保证数据的强一致性：Follower 主动向 Leader 查询最新的 commit log index，以及等待 Leader 的 commit log index 达到一定进度后才返回数据。这些机制确保了数据的一致性，但也会带来一定的代价和延迟。\n\n另外关于 TiDB 的支持 index read，这是因为 TiDB 在 Raft 算法的基础上进行了优化和改进，以提高读取性能和并发性。这与 Raft 算法本身保证数据一致性的机制是相辅相成的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690881890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362448,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"北京","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1668524453,"is_pvip":false,"replies":[{"id":131884,"content":"你好，一步，Follower只会收到leader的心跳，同时一半是指leader自己统计有一半Follower消失吗？","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668758588,"ip_address":"北京","comment_id":362448,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"如果集群中的 Follower 节点在指定时间内没有收到 Leader 的心跳\n----------\n这里是不是有数量的限制，比如说至少一半的 Follow 节点？","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594067,"discussion_content":"你好，一步，Follower只会收到leader的心跳，同时一半是指leader自己统计有一半Follower消失吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668758588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":594080,"discussion_content":"一个Follower节点收不到心跳就开始选举，如果只是这个follower当时的网络有问题呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668761228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":594067,"ip_address":"广东","group_id":0},"score":594080,"extra":""},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599533,"discussion_content":"那么他得不到别人的投票～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673577121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":594080,"ip_address":"北京","group_id":0},"score":599533,"extra":""}]}]},{"had_liked":false,"id":362342,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"北京","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1668426307,"is_pvip":false,"replies":[{"id":131826,"content":"你好，很高兴收到你的留言，还有一些但是没有他复杂，比如gossip","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668557591,"ip_address":"北京","comment_id":362342,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"可以说了解了 Raft，就相当于了解了分布式强一致性数据服务的半壁江山。另一半是ZAB吗？","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593805,"discussion_content":"你好，很高兴收到你的留言，还有一些但是没有他复杂，比如gossip","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668557591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362137,"user_name":"Mr.Tree","can_delete":false,"product_type":"c1","uid":2704444,"ip_address":"北京","ucode":"84712B0436EC6F","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/3c/8bb9e8b4.jpg","comment_is_top":false,"comment_ctime":1668209200,"is_pvip":false,"replies":[{"id":131726,"content":"你好，Mr.Tree，很高兴收到你的疑问，事实上大部分交易系统为了保证数据的强一致都是用本地主库去做的，当进行交易的时候跨区域通讯到核心机房去做交易。你的开户行决定了你的数据在哪里做决策，在下一节课你会看到Raft算法，这里会对这个疑问有很大的帮助。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668223983,"ip_address":"北京","comment_id":362137,"utype":1}],"discussion_count":0,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"对于Raft保证数据读取的强一致性，follower的读取都会向leader发送一个版本确认请求，如果是高并发的情况下，leader的压力岂不是会很大，会不会把它打崩，或者客户端出现延迟，对于这种主从结构系统；出现写冲突是如何处理呢？想到一个场景：张三人在国外，银行账户里存有1w，通过手机银行APP转帐给李四8k，于此同时，张三媳妇在国内通过ATM机查询账户1w，想要取5k，这种同时发生，对于这种强一致性要求系统会怎么处理？","like_count":1},{"had_liked":false,"id":362004,"user_name":"OAuth","can_delete":false,"product_type":"c1","uid":1234664,"ip_address":"北京","ucode":"691F528EB533B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/e8/50b58ed8.jpg","comment_is_top":false,"comment_ctime":1668063376,"is_pvip":false,"replies":[{"id":131827,"content":"你好，oauth，很高兴收到你的思考，同时这个节点不能参加竞选","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668557630,"ip_address":"北京","comment_id":362004,"utype":1}],"discussion_count":1,"race_medal":1,"score":3,"product_id":100309001,"comment_content":"单节点变更，一次变更一个节点","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593806,"discussion_content":"你好，oauth，很高兴收到你的思考，同时这个节点不能参加竞选","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668557630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361664,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"北京","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1667745769,"is_pvip":true,"replies":[{"id":131885,"content":"你好，花花大脸猫，有这方面的原因，同时如果加的节点过多也会造成选举出现问题～","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668758624,"ip_address":"北京","comment_id":361664,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"思考题中增加节点因为需要同步的数据量会比较大，所以 特殊去做，以防影响集群对外提供的服务稳定性。减少节点需要特殊处理是不是怕由于脑裂导致的选举异常，直接导致服务对外不可用，不知道这么理解对不对？","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594069,"discussion_content":"你好，花花大脸猫，有这方面的原因，同时如果加的节点过多也会造成选举出现问题～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668758624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361567,"user_name":"boydenyol","can_delete":false,"product_type":"c1","uid":2019755,"ip_address":"北京","ucode":"869678C332F755","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d1/ab/6e925b26.jpg","comment_is_top":false,"comment_ctime":1667637512,"is_pvip":false,"replies":[{"id":131557,"content":"你好，boydenyol，很高兴收到你的思考，第一个问题，是所有follower都会拒绝，因为leader失联本身也是代表它不是很稳定，作为leader可能存在隐患。另外，不能继续做leader，因为无法确认别人在这个期间已经广播自己是leader了，会出现脑裂，所以简单粗暴一些","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667792519,"ip_address":"北京","comment_id":361567,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"你好，老师！请问，文中提到 “在选举期间，若有服务收到上一任 Leader 的心跳，则会拒绝” ，这代表所有的Follower都会拒绝吗？ 如果上一任Leader仅仅是因为网络阻塞导致心跳异常，同时在选举Leader完成之前正常了，是否还能再做Leader，毕竟Leader的数据是最新的，还是必须得选举其它Leader？","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592878,"discussion_content":"你好，boydenyol，很高兴收到你的思考，第一个问题，是所有follower都会拒绝，因为leader失联本身也是代表它不是很稳定，作为leader可能存在隐患。另外，不能继续做leader，因为无法确认别人在这个期间已经广播自己是leader了，会出现脑裂，所以简单粗暴一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667792519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361294,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1667388823,"is_pvip":false,"replies":[{"id":131409,"content":"你好，peter，这里是指修改数据指令，代表给a设置他的值是7","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667405829,"ip_address":"北京","comment_id":361294,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"请问：cmd:a&lt;7，这里的 a &lt; -7是什么意思？","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592442,"discussion_content":"你好，peter，这里是指修改数据指令，代表给a设置他的值是7","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667405829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388153,"user_name":"黄堃健","can_delete":false,"product_type":"c1","uid":2037522,"ip_address":"广东","ucode":"B4AD5250A41B3A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/YbUxEV3741vKZAiasOXggWucQbmicJwIjg3HDE58oyibYXbSop9QQFqZ7X6OhynDoo6rDHwzK8njSeJjN9hx3pJXg/132","comment_is_top":false,"comment_ctime":1709520486,"is_pvip":false,"replies":[{"id":141317,"content":"你好，这样可以检测其他节点健康情况和同步情况，以及防止脑裂。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1709532995,"ip_address":"北京","comment_id":388153,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"老师，你好！如果所有服务都没有获取到多数票（三分之二以上服务节点的投票）  ， 不是过半以上就可以了吗？   如果是9个副本服务，5个副本服务达成一致就可以了，不用6个服务达成一致\n                         ","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638382,"discussion_content":"你好，这样可以检测其他节点健康情况和同步情况，以及防止脑裂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709532995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386507,"user_name":"微笑的胡圆圆","can_delete":false,"product_type":"c1","uid":3583637,"ip_address":"北京","ucode":"E28FABD51FAFD0","user_header":"https://static001.geekbang.org/account/avatar/00/36/ae/95/4a0b0e97.jpg","comment_is_top":false,"comment_ctime":1704982622,"is_pvip":false,"replies":[{"id":140893,"content":"你好，感谢分享～","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1705023867,"ip_address":"北京","comment_id":386507,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"可以推荐有时间或者有精力的可以完成6.824中的raft实现 https:&#47;&#47;pdos.csail.mit.edu&#47;6.824&#47;labs&#47;lab-raft.html","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635649,"discussion_content":"你好，感谢分享～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705023867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385585,"user_name":"Geek_595be5","can_delete":false,"product_type":"c1","uid":3242942,"ip_address":"新加坡","ucode":"5C29AC709897C0","user_header":"https://static001.geekbang.org/account/avatar/00/31/7b/be/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1702952631,"is_pvip":false,"replies":[{"id":140539,"content":"你好，没错，kafka在很早之前就提供了很好的分布式扩展能力，在现在也是不可多得的高吞吐可动态扩容的核心基础服务","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1703035710,"ip_address":"北京","comment_id":385585,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"我之前看到的是kafka用的是zookeeper，zookeeper是基于zab协议的，而且zab协议早于raft","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634129,"discussion_content":"你好，没错，kafka在很早之前就提供了很好的分布式扩展能力，在现在也是不可多得的高吞吐可动态扩容的核心基础服务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703035710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378805,"user_name":"贺子","can_delete":false,"product_type":"c1","uid":2076283,"ip_address":"北京","ucode":"A64DC9D9CF7CCD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ae/7b/47200692.jpg","comment_is_top":false,"comment_ctime":1690801556,"is_pvip":false,"replies":[{"id":138038,"content":"你好，贺子，先罗列一下，对于读取数据的强一致性的保证，Raft算法确保了在数据同步期间，Follower节点会与Leader节点保持同步，以确保Follower提供的数据是最新的。当Follower收到查询请求时，它会向Leader询问当前最新commit的log index。如果这个log index大于Follower当前同步的进度，说明Follower的本地数据不是最新的，此时Follower会从Leader获取最新的数据返回给客户端。\n\n这种机制确保了在业务使用时读取数据的强一致性。只要向Leader正常提交数据修改的操作，Follower在读取时就能获取到最新的数据。通过Raft的同步等待Leader commit log index的机制，保证了数据的一致性。\n\n以上描述与之前提到的内容并不矛盾。之前的描述是关于数据同步的机制，而这里的描述是关于如何保证在业务使用时读取数据的强一致性。通过Leader的日志同步和Follower的数据查询，可以保证读取数据的一致性。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1690881983,"ip_address":"北京","comment_id":378805,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"你可能会好奇：如何在业务使用时保证读取数据的强一致性呢？其实我们之前说的 Raft 同步等待 Leader commit log index 的机制，已经确保了这一点。我们只需要向 Leader 正常提交数据修改的操作，Follower 读取时拿到的就一定是最新的数据。\n这里的描述和前面的描述不矛盾吗？","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624733,"discussion_content":"你好，贺子，先罗列一下，对于读取数据的强一致性的保证，Raft算法确保了在数据同步期间，Follower节点会与Leader节点保持同步，以确保Follower提供的数据是最新的。当Follower收到查询请求时，它会向Leader询问当前最新commit的log index。如果这个log index大于Follower当前同步的进度，说明Follower的本地数据不是最新的，此时Follower会从Leader获取最新的数据返回给客户端。\n\n这种机制确保了在业务使用时读取数据的强一致性。只要向Leader正常提交数据修改的操作，Follower在读取时就能获取到最新的数据。通过Raft的同步等待Leader commit log index的机制，保证了数据的一致性。\n\n以上描述与之前提到的内容并不矛盾。之前的描述是关于数据同步的机制，而这里的描述是关于如何保证在业务使用时读取数据的强一致性。通过Leader的日志同步和Follower的数据查询，可以保证读取数据的一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690881983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377683,"user_name":"OM","can_delete":false,"product_type":"c1","uid":1302746,"ip_address":"浙江","ucode":"E33C66A70802A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoWfXendN7czHpsyaWKLPK6Na9P5czquJ7Wdre4TibZQ5SQib88edyuib3LpCVFkp0gII2wyvvR8tEIA/132","comment_is_top":false,"comment_ctime":1689033580,"is_pvip":false,"replies":[{"id":137649,"content":"你好，我理解他的意思是他们的服务已经能够成为行业标准参考，目前主要是raft和paxos两种方式，其中都开始支持分块强一致","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1689051690,"ip_address":"北京","comment_id":377683,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"老师，现在国产数据库如市面上的oceanbase数据库采用的是paxos实现分布式，说工业标准，不太明白paxos标准区分。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623121,"discussion_content":"你好，我理解他的意思是他们的服务已经能够成为行业标准参考，目前主要是raft和paxos两种方式，其中都开始支持分块强一致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689051690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369335,"user_name":"宋毅","can_delete":false,"product_type":"c1","uid":2025872,"ip_address":"中国香港","ucode":"1A377E7C7671FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epqMYnEEVK1D6Veh3VvPjHAb1sZg8AHtWkSUJIEEMFF2hVm9LN1fuqdXaiczyctaib6XicjhyvH8ymug/132","comment_is_top":false,"comment_ctime":1677418779,"is_pvip":false,"replies":[{"id":134648,"content":"除此之外还有脑裂等问题～","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1677560914,"ip_address":"北京","comment_id":369335,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"q:为什么 Raft 集群成员增减需要特殊去做？\na: 会触发选举，触发选举的逻辑是，当前集群存在leader了那么增加节点就没关系，但是减少的时候如果刚好干掉了ledaer，就会触发选举导致服务不可用，且如果是刚好仅存2个节点，还会触发选举等待（因为都不是大多数）。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607024,"discussion_content":"除此之外还有脑裂等问题～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677560915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366088,"user_name":"若水清菡","can_delete":false,"product_type":"c1","uid":1099296,"ip_address":"北京","ucode":"175C014E3B985D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/20/124ae6d4.jpg","comment_is_top":false,"comment_ctime":1673397580,"is_pvip":false,"replies":[{"id":133446,"content":"你好，若水清菡，这个没毛病，那么他如何避免的？","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1673504975,"ip_address":"北京","comment_id":366088,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100309001,"comment_content":"为什么 Raft 集群成员增减需要特殊去做？\n主要还是为了避免集群脑裂现象，如果是三节点的集群，剩余选举的节点必须超过半数，也就是只能宕机一台，这也是集群节点数量必须是奇数的原因。Raft 集群成员增减都需要考虑集群节点数量，避免出现存活节点数量不超过集群节点数量一半的情况。\n","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599407,"discussion_content":"你好，若水清菡，这个没毛病，那么他如何避免的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673504975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}