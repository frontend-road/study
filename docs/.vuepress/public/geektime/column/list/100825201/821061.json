{"id":821061,"title":"12｜模型预测：让模型告诉我们组件的信息","content":"<p>你好，我是柳博文，欢迎和我一起学习前端工程师的AI实战课。</p><p>上一节课我们完成了模型的训练，并通过分析训练结果可以知道，模型达到了不错的收敛效果。那么，这节课我们就来一起看看如何使用训练好的模型来识别和定位。</p><p>在这个过程中，我们仍然需要使用到上节课中讲述的YOLOv5的源码，源码中实现了用于模型预测的detect.py文件，所以我们像调用tarin.py文件一样调用它即可。</p><p>在进行模型检测调用前，有一些重要文件需要提前了解，那就是模型的权重文件。</p><h2>模型权重文件</h2><p>那么，什么是模型权重文件呢？</p><p>模型权重文件是存储神经网络模型中所有可训练参数的文件。这些参数包括神经网络中的权重和偏置，决定了模型的行为和性能。权重文件通常是在模型经过训练后保存的，它们包含了模型在训练过程中学到的知识。</p><p>我们以函数为例说明一下，一个一元一次函数 f(x) = ax+b，对于这个一元一次函数来说，如果具有一个固定的a、b值，那么给定一个输入值x，我们就会得到这个输入值x对应的固定的输出值。</p><p>那么，模型也一样，权重文件中保留了这个模型完成训练后的所有参数，对于一个视觉模型，这个输入值x就是一张图像，通过结合权重文件中的保留参数等信息进行计算，输出值y就是这张图像中对应对象的预测结果了。</p><!-- [[[read_end]]] --><p>所以，通常我们会说训练模型也就是在拟合一个函数，这个函数包含的参数非常多。当函数拟合到我们想要的状态时，保留下来的参数组合也就是这个权重文件。</p><p>在widgets文件夹下的权重文件是以pt为后缀名保存的，这是因为我们使用的是PyTorch来完成这个模型的训练，在PyTorch中，.pt文件是用来存储模型的权重、架构或其他信息的文件格式，它的全称是“PyTorch”。</p><p>上节课里我们训练模型后，分析了runs/train/exp/文件夹下的训练结果图。在这个文件夹下面还有一个widgets文件夹，其中存放了两个后缀名为pt的文件，分别是 <strong>last.pt 和 best.pt</strong>。这其实就是训练完成后的模型权重文件，用于模型预测的参数组合。</p><p>通过命名其实可知，一个是模型完成所有训练批次后的权重文件，另一个则是模型在训练过程中达到最优训练结果的权重文件。</p><p>完成所有训练批次后得到的权重文件比较好理解。最优训练结果的权重文件则是在训练过程中，模型根据某个指标（如mAP，mean Average Precision）在验证集上判断模型的表现所得。best.pt文件会在模型在验证集上达到最佳表现时保存下来，因此这个文件包含了最优的模型参数，通常可以用于最终的模型部署和推理。</p><p>那么，有了最优的模型权重文件，我们就可以用来进行模型预测了。</p><h2>模型预测</h2><p>在完成 YOLOv5 模型的训练后，我们接下来要进行模型的预测操作。这一步骤需要我们对 YOLOv5 的 detect.py 文件稍加修改，以确保预测过程的顺利进行。与修改 train.py 文件时类似，我们需要调整一些超参数以适应当前的需求。</p><p>在 YOLOv5 的源码中，detect.py 文件用于执行检测任务。首先，我们需要关注第 238 行和 239 行的代码。</p><pre><code class=\"language-python\">&nbsp; &nbsp; parser.add_argument('--weights', nargs='+', type=str, default=ROOT / 'best.pt', help='model path or triton URL')\n&nbsp; &nbsp; parser.add_argument('--source', type=str, default=ROOT / 'data/images', help='file/dir/URL/glob/screen/0(webcam)')\n</code></pre><p>首先来看第一行代码，作用是设置权重文件。–weights 参数指定了要使用的模型权重文件，这里我们选择了训练过程中保存的最优模型 best.pt。这个文件保存了模型在验证集上表现最佳的权重参数，用于推理时能得到较好的预测结果。</p><p>其次是设置预测图像来源，–source 参数指定了输入数据的路径。在这个示例中，我们将需要检测的图像存放在 data/images 文件夹下。YOLOv5 支持对多个图像文件同时进行检测，只需将这些文件放在指定文件夹中即可。</p><p>接下来，我们准备两张用于检测测试的图像。图像的来源可以是数据集中用于测试的图像，也可以是与训练目标一致的新的图像。我在课程的源代码里也提供了测试图像，你可以通过<a href=\"https://github.com/IrvingBB/geektime_AIFE/tree/main/Chapter_3/lesson_12/layoutassistant/detection/data/images\">这里</a>获取。</p><p>我们把测试图像放入 data/images目录下，执行detect.py。</p><pre><code class=\"language-powershell\">python detect.py\n</code></pre><p>如果你的系统没有 GPU，或你希望使用 CPU 进行检测，可以使用以下命令指定设备为 CPU。</p><pre><code class=\"language-powershell\">python detect.py --device cpu\n</code></pre><p>YOLOv5 在进行推理时默认会使用 GPU，这是因为 GPU 在处理并行计算时具有显著的速度优势，特别是对于大规模数据和复杂场景。相比之下，CPU 虽然也能完成检测任务，但在处理速度上明显逊色于 GPU，因此检测时间会更长。</p><p>检测任务执行完成后，YOLOv5 会在 runs/detect 文件夹下生成一个新的子文件夹（例如 exp），检测结果将会放在这个文件夹中。</p><p>对于可视化图像结果，你可以直接查看这些图像，其中每个被检测到的组件都会被框选出来，并标注了类别和置信度。这使得我们可以直观地看到模型在图像中识别出的对象及其位置信息。</p><p>除了可视化图像，YOLOv5 还会生成对应的标签文件，其中记录了每个检测到的目标的类别、坐标位置和大小。通过这些数据，我们可以进一步处理，比如自动生成代码来实现界面布局。</p><p>我们一起看看后面的例子，这样更直观。首先是可视化的一个检测结果，其中左侧为原图，右侧为检测结果图。可以看到 ，我们的模型/AI组件识别助手的识别效果还不错，两张图像里的组件类型和定位都识别得比较准确，也打上了对应的矩形框和类型分类。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/af/d54b47036c3f2378a1103070f220a3af.jpg?wh=3232x2856\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/dy/9d/dyyyy9870447a5b11369fde76738339d.jpg?wh=3232x2856\" alt=\"\"></p><p>同时，在这个可视化检测结果下生成了一个labels文件夹。这个文件夹下以文本形式存放着检测结果，这就可以用于进行工程链路上的实现了。我们来看一下其中一个文本文件的内容构成。</p><pre><code class=\"language-plain\">0 636.5 259 1273 158\n1 642.5 684 1273 544\n2 638.5 1518 1277 456\n2 635.5 1982.5 1269 463\n2 643.5 2445 1255 452\n</code></pre><p>在这个label文本文件中一共有五列，从左到右分别对应了一个属性值，class_id、x_center、y_center、width、height。</p><ul>\n<li>\n<p>&lt;class_id&gt;对应着目标的类别ID。例如，0表示第一个目标的类别，1表示第二个目标的类别，2表示接下来的目标类别。</p>\n</li>\n<li>\n<p>&lt;x_center&gt;则是表示目标边界框的中心点的横坐标。例如，636.5表示第一个目标边界框中心点的横坐标。</p>\n</li>\n<li>\n<p>&lt;y_center&gt;则是目标边界框的中心点的纵坐标。例如，259表示第一个目标边界框中心点的纵坐标。</p>\n</li>\n<li>\n<p><width>代表目标边界框的宽度。例如，1273表示第一个目标的边界框的宽度。</width></p>\n</li>\n<li>\n<p><height>代表目标边界框的高度。例如，158表示第一个目标的边界框的高度。</height></p>\n</li>\n</ul><p>那么，通过这五个关键信息，我们就能够知道位于页面的什么位置，是一个什么样的组件了。再结合组件库，就能够将页面的布局进行一个简单的自动出码还原。</p><h2>总结</h2><p>今天的课程告一段落，我们来对这节课做一个总结吧。</p><p>在这节课中，我们使用训练好的模型进行了图像检测。首先，我们理解了模型训练完成后的权重文件。我们可以将模型看成一个包含大量参数的函数，而权重文件则是存储这些参数的地方。后缀为 .pt 的权重文件则是 PyTorch 格式的权重文件。</p><p>接着，我们使用最优权重文件进行了预测。结果显示，模型能够准确识别测试图像中的组件类型和位置，并生成了包含组件类型、位置和宽高信息的标签文件。这些关键信息可以用于实现自动化代码生成。建议你课后跟着这节课的思路动手练习一下，这样学习效果会更好。</p><h2>思考题</h2><p>在真实业务场景里，页面往往不止4个类别这么简单，层级结构更是复杂，那么要如何使用AI模型来完成页面布局呢？</p><p>欢迎你在留言区和我交流互动，如果这节课对你有启发，也推荐分享给身边更多朋友。</p>","neighbors":{"left":{"article_title":"11｜模型训练：如何教会模型学习","id":820341},"right":{"article_title":"13｜自动出码：如何根据预测结果生成代码","id":821447}},"comments":[{"had_liked":false,"id":395675,"user_name":"winsonye-叶","can_delete":false,"product_type":"c1","uid":1234688,"ip_address":"广东","ucode":"F2E87D7B7B4C40","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/00/e48604bd.jpg","comment_is_top":false,"comment_ctime":1731653715,"is_pvip":false,"replies":[{"id":143696,"content":"你好，同学\n感谢你的认真阅读和提问\n这里我将如何得到best.pt做一个更加细节的回复，希望能解答你的疑惑\n\n在 YOLOv5 的训练过程中，best.pt是系统自动保存的“最佳模型”权重文件，表示在验证集上表现最好的模型状态。\n\n它的生成过程如下：  \n首先是训练过程中的评估模型\n在设置超参数时候，我们设定了epoch值，一个epoch代表一个训练周期，每个训练周期（epoch）结束后，模型会在验证集上计算性能指标，比如 精确度（Precision），召回率（Recall）和 平均精度（mAP）\n\n然后选择最佳模型\nYOLOv5使用一个加权组合的指标fitness来确定模型的性能，这个指标是精确度、召回率、mAP@0.5和mAP@0.5-0.95的加权和。\nfitness计算公式为fi = 0.1*mAP@.5 + 0.9*mAP@.5-.95，这个计算的变化趋势也可以在训练结果的可视化图片上看到\n\n最后就是更新和保存最佳模型\n如果当前epoch的fitness值高于之前保存的最佳模型的fitness值，那么当前模型将被认为是新的“最佳模型”，并保存为best.pt文件。通常保存在runs&#47;train&#47;exp&#47;weights&#47;目录下，其中exp是实验的名称或编号。\n\n总结来说，best.pt是在YOLOv5训练过程中，根据验证集上的性能指标自动选择并保存的最佳模型权重文件。\n\n加油~\n","user_name":"作者回复","user_name_real":"编辑","uid":3971025,"ctime":1731721082,"ip_address":"北京","comment_id":395675,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100825201,"comment_content":"这个best.pt 是怎么得到的？","like_count":0,"discussions":[{"author":{"id":3971025,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/97/d1/52acf459.jpg","nickname":"柳博文","note":"","ucode":"1E60D52922548C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654028,"discussion_content":"你好，同学\n感谢你的认真阅读和提问\n这里我将如何得到best.pt做一个更加细节的回复，希望能解答你的疑惑\n\n在 YOLOv5 的训练过程中，best.pt是系统自动保存的“最佳模型”权重文件，表示在验证集上表现最好的模型状态。\n\n它的生成过程如下：  \n首先是训练过程中的评估模型\n在设置超参数时候，我们设定了epoch值，一个epoch代表一个训练周期，每个训练周期（epoch）结束后，模型会在验证集上计算性能指标，比如 精确度（Precision），召回率（Recall）和 平均精度（mAP）\n\n然后选择最佳模型\nYOLOv5使用一个加权组合的指标fitness来确定模型的性能，这个指标是精确度、召回率、mAP@0.5和mAP@0.5-0.95的加权和。\nfitness计算公式为fi = 0.1*mAP@.5 + 0.9*mAP@.5-.95，这个计算的变化趋势也可以在训练结果的可视化图片上看到\n\n最后就是更新和保存最佳模型\n如果当前epoch的fitness值高于之前保存的最佳模型的fitness值，那么当前模型将被认为是新的“最佳模型”，并保存为best.pt文件。通常保存在runs/train/exp/weights/目录下，其中exp是实验的名称或编号。\n\n总结来说，best.pt是在YOLOv5训练过程中，根据验证集上的性能指标自动选择并保存的最佳模型权重文件。\n\n加油~\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731721082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}