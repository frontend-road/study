{"id":336652,"title":"13 | 落后的代码风格：使用“新”的语言特性和程序库升级你的代码","content":"<p>你好，我是郑晔。</p><p>上一讲，我们讲的是因为代码不一致造成的坏味道，其中我提到的“方案不一致”，是因为随着时间的流逝，总会有一些新的方案产生，替换原有的方案。这其中，最明显的一个例子就是程序设计语言。没有哪门语言是完美的，所以，只要有一个活跃的社区，这门语言就会不断地演进。</p><p>从 C++ 11 开始，C++ 开始出现了大规模的演化，让之前学习 C++的人感觉自己就像没学过这门语言一样；Python 2 与 Python 3 甚至是不兼容的演化；Java 也是每隔一段时间就会出现一次大的语言演进。</p><p>也正是因为语言本身的演化，在不同时期接触不同版本的程序员写出来的程序，甚至不像是在用同一门语言在编程。所以，我们有机会看到在同一个代码库中，各种不同时期风格的代码并存。</p><p>通常来说，新的语言特性都是为了提高代码的表达性，减少犯错误的几率。所以，在实践中，我是非常鼓励你采用新的语言特性写代码的。</p><p>这一讲，我们就以 Java 为例，讲讲如何使用“新”语言特性让代码写得更好。其实，这里的“新”只是相对的，我准备讨论的是 Java 8 的语言特性，按照官方的标准，这是一个已经到了生命周期终点的版本，只不过，从语言特性上来说，Java 8 是最近有重大变更的一个版本，而很多程序员的编码习惯停留在更早的版本。</p><!-- [[[read_end]]] --><h2>Optional</h2><p>我们先来看一段代码：</p><pre><code>String name = book.getAuthor().getName();\n</code></pre><p>这是我们在讲“<a href=\"https://time.geekbang.org/column/article/333135\">缺乏封装</a>”时用到的一个例子，我们这里暂且不考虑缺乏封装的问题。即便如此，严格地说，这段代码依然是有问题的。因为它没有考虑对象可能为 null 的场景。</p><p>所以，这段代码更严谨的写法是这样：</p><pre><code>Author author = book.getAuthor();\nString name = (author == null) ? null : author.getName();\n</code></pre><p>然而，在很多真实的项目中，这种严格的写法却是稀有的，所以，在实际的运行过程中，我们总会惊喜地发现各种空指针异常。如果你要问程序员为什么不写对象为 null 的判断，答案很可能出乎你意料：他们忘了。</p><p>是的，忘了，就是这么简单得令人发指的理由。</p><p>不用过于责备这些程序员缺乏职业素养，因为这不是个体问题，而是行业整体的问题，IT 行业每年都会因此造成巨大的损失。空指针的发明者 Tony Hoare 将其称为“自己犯下的十亿美元错误”。</p><p>对于这个如此常见的问题，Java 8 中已经给出了一个解决方案，它就是 Optional。Optional 提供了一个对象容器，你需要从中“取出（get）”你所需要的对象，但在取出之前，你需要判断一下这个对象容器中是否真的存在一个对象。用这个思路可以这样改写这段代码：</p><pre><code>class Book {\n  public Optional&lt;Author&gt; getAuthor() {\n    return Optioanl.ofNullable(this.author);\n  }\n  ...\n}\n\n\nOptional&lt;Author&gt; author = book.getAuthor();\nString name = author.isPresent() ? author.get().getName() : null;\n\n</code></pre><p>这种做法和之前做法的最大差别在于，你不会忘掉判断对象是否存在的过程，因为你需要从 Optional 这个对象容器中取出存在里面的对象。正是这多出来的一步，减少了“忘了”的概率。</p><p>也是因为多了 Optional 这个类，这段代码其实还有更简洁的写法：</p><pre><code>Optional&lt;Author&gt; author = book.getAuthor();\nString name = author.map(Author::getName).orElse(null);\n</code></pre><p>有了 Optional，我们可以在项目中做一个约定，<strong>所有可能为 null 的返回值，都要返回 Optional，以此减少犯错的几率</strong>。关于 Optional，我在《软件设计之美》中花了<a href=\"https://time.geekbang.org/column/article/258954\">专门的篇幅</a>进行了介绍，你有兴趣的话，不妨进一步了解一下。</p><p>事实上，鉴于空对象是一个普遍存在的问题，一些程序设计语言甚至为此专门设计了语法，比如，类似的代码用 Kotlin 或 Groovy 写出来的话，应该是这下面这样：</p><pre><code>val author = book.author\nval name = author?.name\n</code></pre><h2>函数式编程</h2><p>Optional 是 Java 8 引入的新特性，它的出现改变了编写 Java 代码的习惯用法。接下来，我们来看看另外一个改变我们代码习惯用法的特性。</p><p>在讲“<a href=\"https://time.geekbang.org/column/article/332341\">滥用控制语句</a>”那一讲时，我留下了一个尾巴，说循环语句本身就是一个坏味道。接下来，我们就来说一下这个问题。我们还是先从一段代码开始：</p><pre><code>public ChapterParameters toParameters(final List&lt;Chapter&gt; chapters) {\n  List&lt;ChapterParameter&gt; parameters = new ArrayList&lt;&gt;();\n  for (Chapter chapter : chapters) {\n    if (chapter.isApproved()) {\n      parameters.add(toChapterParameter(chapter));\n    }\n  }\n  \n  return new ChapterParameters(parameters);\n}\n</code></pre><p>这是一段向翻译引擎发送章节信息前准备参数的代码，这里首先筛选出审核通过的章节，然后，再把章节转换成与翻译引擎通信的格式，最后，再把所有得到的单个参数打包成一个完整的章节参数。</p><p>如果按照 Java 8 之前的版本理解，这段代码是一段很正常的代码。当 Java 的时代进入到 8 之后，这段代码就成了有坏味道的代码。</p><p>Martin Fowler 在《<a href=\"https://book.douban.com/subject/30468597/\">重构</a>》的第二版中新增的坏味道就包括了循环语句（Loops）。之所以循环语句成了坏味道，一个重要的原因就是函数式编程的兴起。<strong>不是我们不需要遍历集合，而是我们有了更好的遍历集合的方式。</strong></p><p>我在《软件设计之美》讲<a href=\"https://time.geekbang.org/column/article/257396\">函数式编程的组合性</a>时曾经提到过，函数式编程的一个重要洞见就是，大部分操作都可以归结成列表转换，其中，最核心的列表转换就是 map、filter 和 reduce。在函数式编程日益重要的今天，列表转换已经成为了每个程序员应该必备的基本功。</p><p>了解了这些，你就知道为什么循环语句是坏味道了，因为大部分循环语句都是在对一个元素集合进行操作，而这些操作基本上都可以用列表操作进行替代。</p><p>再者，一般来说，采用列表转换写出来的代码相较于传统的循环语句写出来的代码，表达性更好，因为它们都是描述做什么，而传统的循环语句是在描述怎么做。我在这个专栏已经多次说过了，这是两种不同的抽象层次，描述做什么比怎么做的代码，在表达性上要好得多。</p><p>有了这些基础，我们再来看这段代码。这段代码中有一个循环语句，正如前面所说，这个循环语句在处理的是一个集合中的元素，所以，这个循环语句是可以用列表转换的方式代替的。</p><p>具体怎么做呢？其实，这里的行为我们在前面已经分析过了，就是先筛选出审核通过的章节，这个过程对应着 filter，然后，把筛选出来的章节转换成通信中的参数，这个过程对应着 map，最后，把转换的结果搜集起来，这个过程对应着 reduce。所以，这段代码可以改写成这样：</p><pre><code>public ChapterParameters toParameters(final List&lt;Chapter&gt; chapters) {\n  List&lt;ChapterParameter&gt; parameters = chapters.stream()\n    .filter(Chapter::isApproved)\n    .map(this::toChapterParameter)\n    .collect(Collectors.toList());\n  return new ChapterParameters(parameters);\n}\n</code></pre><p>经过这样的改造，一个循环语句就彻底被一个列表转换的操作替换掉了（这里的 collect 函数对应着 reduce 操作）。在这段代码中，我们用到了 Java 8 提供的一些基础设施，比如，Stream、lambda 和方法引用等等。</p><p>或许有人会说，这段代码看着还不如我原来的循环语句简单。不过，你要知道，两种写法根本的差别是侧重点不同，循环语句是在描述实现细节，而列表转换的写法是在描述做什么，二者的抽象层次不同。</p><p>对于理解这段代码的人来说，二者提供的信息量是完全不同的，循环语句必须要做一次“阅读理解”知晓了其中的细节才能把整个场景拼出来，而列表转换的写法则基本上和我们用语言叙述的过程一一对应。所以，理解的难度是完全不同的。</p><p>这段代码只是为了说明问题，而选择了简单的代码，但在实际工作中，需求会比这复杂得多。而且，如果要添加新的需求，循环语句里的代码会随之变得越来越复杂，原因就是循环语句里都是细节，而列表转换则是一段一段的描述，就像在阅读一篇文章。</p><p>很多人之所以更喜欢使用循环语句而不是列表转换，一个重要原因是对于列表转换的基础还不了解。只要多写几次 filter、map 和 reduce，理解它们就会像理解选择语句和循环语句一样自然。</p><p>到这里有人会说：“你说得有点道理，但为什么我的感觉和你不一样，在实践中，我也使用了这种风格，为什么写出来的代码感觉更难理解了？”对于这一点，一个常见的原因就是，你在列表转换过程中写了太多代码。</p><p>自从 Java 里引入了 lambda，因为写起来实在是太容易了，很多人就直接在列表转换过程中写 lambda。lambda 本身相当于一个匿名函数，所以，很多人在写函数中犯的错误在 lambda 里也一样出现了，最典型的当然就是长函数。</p><p>在各种程序设计语言中，lambda 都是为了写短小代码提供的便利，所以，lambda 中写出大片的代码，根本就是违反 lambda 设计初衷的。<strong>最好的 lambda 应该只有一行代码</strong>。</p><p>那如果一个转换过程中有很多操作怎么办呢？很简单，提取出一个函数，就像前面代码中的 toChapterParameter，它负责完成从 Chapter 到 ChapterParameter 的转换。这样一来，<strong>列表转换的本身就完全变成了一个声明，这样的写法才是能发挥出列表转换价值的写法</strong>。</p><p>在这一讲中，我们以 Optional 和函数式编程为例，讲解了用“新”的代码风格改进代码，其实，我们在前面的内容中也已经讲了不少“新”的代码风格，比如，使用 Java 8 的时间日期类型、try-with-resource 等等。在讲解的过程中，我也提到过不少的编码风格实际上是停留在过去，比如，变量初始化的习惯。</p><p>你可以看到，代码风格有一个逐步演化的过程，每个程序员对此的理解程度都有所差异，所以，如果我们不加注意的话，各种代码风格会并存于代码之中，加剧代码的理解难度，这就是我们上一讲讲到的坏味道：不一致。</p><p>一种编程风格会过时，本质上是因为它存在问题，新代码风格就是用更好的方案解决它，就像今天讲到的 Optional。所以，我们要不断学习新引入的语言特性，了解它们给语言带来的“新”风格，而不要停留在原地。</p><h2>总结时刻</h2><p>今天我们讲了“新”风格对于代码的改善。每一种有生命力的语言都会在自己的生命周期中不断地对语言本身进行改进，无论是引入新的语言特性，还是引入新的程序库，都会对代码的编写产生或多或少的影响。这一讲，我们用来讲解的例子是 Java 8 引入的 Optional 和函数式编程。</p><p>Optional 是一个对象容器，它的出现是为了规避空对象带来的各种问题。Optional 的引入可以减少由于程序员的忽略而引发对空对象的问题。团队内部可以约定，所有可能返回空对象的地方，都要返回 Optional，以此降低犯错的几率。</p><p>函数式编程是一个影响代码整体风格的重要编程范式，然而，对于很多 Java 程序员来说，Java 8 引入的函数式编程支持，只是引入了一些新的程序库。缺乏对于函数式编程的理解，尤其是对于列表转换思维的理解，让我们虽然有了很多很好的工具，却完全无法发挥其功效。</p><p>懂得列表转换思维，首先要懂得最基本的几个操作：map、filter 和 reduce，然后，就可以把大部分的集合操作转换成列表转换。想要使用这种思维写好代码，一方面，要懂得声明式代码的重要性，另一方面，要懂得写出短小的函数，不要在 lambda 中写过多的代码。</p><p>作为一个精进的程序员，我们要不断地学习“新”的代码风格，改善自己的代码质量，不要故步自封，让自己停留在上一个时代。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>不断学习“新”的代码风格，不断改善自己的代码</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/00/a9/00ec53d5cbe13368425f119861d3fda9.jpg?wh=2284*3156\" alt=\"\"></p><h2>思考题</h2><p>这一讲，我们讲到了不同的代码风格，你有体验过不同的代码风格对于代码库的影响吗？欢迎在留言区分享你的经验。</p><p>对于团队来说，逐步将统一将语言特性和程序库统一到新的风格上是一件很重要的事，欢迎你把这节课学到的知识，分享给你的团队。</p><p>感谢阅读，我们下一讲再见！</p><p>参考资料:</p><p><a href=\"https://time.geekbang.org/column/article/257396\">18 | 函数式编程之组合性：函数式编程为什么如此吸引人？</a></p><p><a href=\"https://time.geekbang.org/column/article/258954\">加餐 | 函数式编程拾遗</a></p>","comments":[{"had_liked":false,"id":276714,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1612086840,"is_pvip":false,"replies":[{"id":"100514","content":".parallel()和.sequential()，除非明确地知道执行结果，否则，不要使用。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612234031,"ip_address":"","comment_id":276714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27381890616","product_id":100068401,"comment_content":"我认为Stream语言设计上有疏忽。<br><br>问题： Stream的语意表示一次数据流，或者说一次循环。所以不管是map还是filter都是在这一次循环中每个元素执行的一个job。然而stream却有.parallel()和.sequential()的语意，感觉起来就像是可以随意改变当前这一次数据流的执行方式，但实际上一次数据流只能有一种执行方式。<br>结论：应该是get出并行的parallelStream()或者get出串行的sequentiaStream()，这样在语意上会更明确些。毕竟执行方式在stream中是一个排他项，他不该被变更。","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514799,"discussion_content":".parallel()和.sequential()，除非明确地知道执行结果，否则，不要使用。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612234031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276707,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1612085554,"is_pvip":false,"replies":[{"id":"100692","content":"多谢提示，已经修改。<br><br>心智模型就是要不断提升的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612491921,"ip_address":"","comment_id":276707,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18791954738","product_id":100068401,"comment_content":"1.勘误<br><br>Optional&lt;Author&gt; author = book.getAuthor();<br>String name = author.orElse(null);<br>-&gt; String name = author.map(Author::getName).orElse(null);<br><br>原理: 因为Optional内部做了判空处理<br>好处: 更语意化的表达<br>个人见解: 这里 author.map(Author::getName).orElse(null); 刚开始用时，会觉得map里面会报空指针的问题,因为在执行map时感觉就会抛出异常。个人认为这有违常规java开发的心智模型。因为java开发习惯了null的存在，因而在map中做空判断，就像是在map中偷偷多做了一件事，有点超出预期？","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514797,"discussion_content":"多谢提示，已经修改。\n\n心智模型就是要不断提升的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612491921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276234,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1611840816,"is_pvip":true,"replies":[{"id":"100407","content":"看你怎么评价什么算是累赘了，这是一种减少犯错几率的做法，另外，Optional 本身有很多方法可以简化代码的编写。Optional 也是一种需要习惯的构造块，和函数式编程的其它内容是一样的，需要适应一下，适应之后，它就是和 if、for 之类一样的东西。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612091321,"ip_address":"","comment_id":276234,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18791710000","product_id":100068401,"comment_content":"感觉多写了Optional ，代码变得更加累赘了？毕竟这是一种实现细节，如果混在业务代码里面，是不是也是一种坏味道呢？","like_count":4,"discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346872,"discussion_content":"\b为产品老哥点个赞，我来回答下。 1.不会变累赘，会变得更优雅。因为Optional的存在，逻辑代码的实现可以更面向意图而非实现。具体可以理解下Monad。 2.这看你占什么角度看，站设计的角度看，写代码包括写接口都是实现细节。Opt的存在与所谓的实现细节无关，可以认为是一种语言特性，之所以以程序库的方式出现，主要应该是考虑java语言本身的向后兼容，它应该是一种语言特性。 3.混在业务代码里面不是一种怀味道，同2，只是换了一种语言特性来表达业务，不存在混进来这种认知。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1612087751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514636,"discussion_content":"看你怎么评价什么算是累赘了，这是一种减少犯错几率的做法，另外，Optional 本身有很多方法可以简化代码的编写。Optional 也是一种需要习惯的构造块，和函数式编程的其它内容是一样的，需要适应一下，适应之后，它就是和 if、for 之类一样的东西。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612091321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328165,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1004462,"ip_address":"","ucode":"8F7DE6E7B3D74F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/53/ae/a08024b2.jpg","comment_is_top":false,"comment_ctime":1640582487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14525484375","product_id":100068401,"comment_content":"我的经验是，只有了解了新语汇解决什么问题，才能改变自己的编写习惯。<br><br>不断学习新的代码风格，不仅要知道如何做，也需要掌握新的代码风格是为了解决什么样的问题而产生的，我觉得这一点很重要，就像之前如果不了解 optional 是为了解决 null 忘记判断，或者在Java 语汇中，判断null 比较繁琐而产生的，那么 optional 对于我充其量是一个语法糖。<br><br>很多新特性，在读了郑大的解析后，我才从意识上切换了过来。<br><br>受益匪浅！","like_count":3},{"had_liked":false,"id":278131,"user_name":"Geek_344b93","can_delete":false,"product_type":"c1","uid":2406471,"ip_address":"","ucode":"648BAAC8211CC5","user_header":"https://static001.geekbang.org/account/avatar/00/24/b8/47/0fbeeadc.jpg","comment_is_top":false,"comment_ctime":1612772647,"is_pvip":false,"replies":[{"id":"101129","content":"如果有更好的 Optional 解决方案，可能是语法的改进，就像 Groovy 和 Kotlin 那样。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612927527,"ip_address":"","comment_id":278131,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14497674535","product_id":100068401,"comment_content":"我觉得应该是把Optional给封装到一个模型中，然后模型标记可能@Nullable。一来我认为隐藏了于业务无关的空判断，二来，其他调用者不用再写一个相同的判断语句","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515287,"discussion_content":"如果有更好的 Optional 解决方案，可能是语法的改进，就像 Groovy 和 Kotlin 那样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612927527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325152,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1638843998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10228778590","product_id":100068401,"comment_content":"开始使用 Java Stream + Lambda 时非常不习惯，项目中跟着《Java 8实战》的例子一起练习，慢慢就用的越来越开心了，很久没用写 for 语句了。常用的 Lambda 表达式做了笔记，掌握之后基本可以熟练使用https:&#47;&#47;www.wyyl1.com&#47;post&#47;0&#47;03&#47;","like_count":2},{"had_liked":false,"id":276205,"user_name":"NiceBen","can_delete":false,"product_type":"c1","uid":1332256,"ip_address":"","ucode":"793679E3520E84","user_header":"https://static001.geekbang.org/account/avatar/00/14/54/20/90ad5247.jpg","comment_is_top":false,"comment_ctime":1611831005,"is_pvip":false,"replies":[{"id":"100387","content":"现在的IDE可以在lambda里设置断点，也还好，不过，还是写测试更好。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612061576,"ip_address":"","comment_id":276205,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10201765597","product_id":100068401,"comment_content":"lambda表达式虽然简洁，但是在代码出现bug的时候，不好调试。也许是集合中某个参数问题，但是通过lambda的debug时，没办法精确定位到。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514629,"discussion_content":"现在的IDE可以在lambda里设置断点，也还好，不过，还是写测试更好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612061576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276087,"user_name":"adang","can_delete":false,"product_type":"c1","uid":1143712,"ip_address":"","ucode":"0F2ECF8B92D46B","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/a0/7dcc9212.jpg","comment_is_top":false,"comment_ctime":1611792022,"is_pvip":false,"replies":[{"id":"100273","content":"这是对的，统一风格很重要，这是上一讲的主题。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611843136,"ip_address":"","comment_id":276087,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10201726614","product_id":100068401,"comment_content":"对于 Optional，在 Ruby 上早期会用 try 后来版本升级改为 &amp;. 写起来很方便。<br>写 Ruby 的那会儿，有很多程序员是从其它语言转过去的，写出来的代码有很多前一种语言的&quot;烙印&quot;，团队 Leader 会要求大家时常翻看 Ruby 的代码规范，规范里有明确要求的严格按照规范来，这样尽量保持代码风格统一。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514596,"discussion_content":"这是对的，统一风格很重要，这是上一讲的主题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611843136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323114,"user_name":"kougazhang","can_delete":false,"product_type":"c1","uid":1200650,"ip_address":"","ucode":"E9AD678FCEC75D","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","comment_is_top":false,"comment_ctime":1637734199,"is_pvip":false,"replies":[{"id":"117310","content":"本质上，还是不习惯函数式的原语map、filter、reduce，我在《软件设计之美》中专门讲了，不妨去看看。","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1637850460,"ip_address":"","comment_id":323114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5932701495","product_id":100068401,"comment_content":"请教一个问题：业务实践中感觉函数式的扩展性不太好。<br><br>比如文中的例子：<br><br>public ChapterParameters toParameters(final List&lt;Chapter&gt; chapters) {<br>  List&lt;ChapterParameter&gt; parameters = chapters.stream()<br>    .filter(Chapter::isApproved)<br>    .map(this::toChapterParameter)<br>    .collect(Collectors.toList());<br>  return new ChapterParameters(parameters);<br>}<br><br>这段代码在后续的维护中，经常会出现“后续维护时需要 map 的时候需要加 if 条件，尽早打破循环”的情况。<br><br>所以，第一次实现需求时写成老师说的这个样子不难，可是后续随着项目演进还是觉得拆成 for 方便。<br><br>这种情况该怎么避免呢？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533390,"discussion_content":"本质上，还是不习惯函数式的原语map、filter、reduce，我在《软件设计之美》中专门讲了，不妨去看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637850460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276086,"user_name":"Hobo","can_delete":false,"product_type":"c1","uid":1041960,"ip_address":"","ucode":"BE991F04E66ECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/28/1d3aace3.jpg","comment_is_top":false,"comment_ctime":1611791797,"is_pvip":false,"replies":[{"id":"100274","content":"不完全是，Linq 的目标是构建一种查询的方式。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611843533,"ip_address":"","comment_id":276086,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5906759093","product_id":100068401,"comment_content":"我是写C＃的，像这个列表转换在C＃中的体现就是Linq吧，不过一些复杂查询我都写的很长😓😓","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514595,"discussion_content":"不完全是，Linq 的目标是构建一种查询的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611843533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356569,"user_name":"HappyHasson","can_delete":false,"product_type":"c1","uid":2911084,"ip_address":"广东","ucode":"B84CC43E349CFA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","comment_is_top":false,"comment_ctime":1662426364,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662426364","product_id":100068401,"comment_content":"public ChapterParameters toParameters(final List&lt;Chapter&gt; chapters) {<br>  List&lt;ChapterParameter&gt; parameters = chapters.stream()<br>    .filter(Chapter::isApproved)<br>    .map(this::toChapterParameter)<br>    .collect(Collectors.toList());<br>  return new ChapterParameters(parameters);<br>}<br><br>请教个问题，原来表现细节的循环被替换掉了，但是本质逻辑里肯定还是有一个遍历操作的，这个遍历操作是由语言特性实现的吗？<br>对java不了解","like_count":0},{"had_liked":false,"id":347466,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1654059033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654059033","product_id":100068401,"comment_content":"不断学习“新”的代码风格，不断改善自己的代码--记下来","like_count":0},{"had_liked":false,"id":347090,"user_name":"Bumblebee","can_delete":false,"product_type":"c1","uid":2051293,"ip_address":"","ucode":"B879C8A511D08D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","comment_is_top":false,"comment_ctime":1653709025,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653709025","product_id":100068401,"comment_content":"今日收获<br><br>lambda表达式本身是一个匿名函数，不要再lambda表达式内写过多的代码；","like_count":0},{"had_liked":false,"id":281977,"user_name":"crtmsvc","can_delete":false,"product_type":"c1","uid":2201323,"ip_address":"","ucode":"A00D3FB17CB614","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/CV9kk5M26pdxvFhbrkicjZa4avHTfWWPJCKCIrkhgws8WN9RJAJ5D4oGAPgAOVXmDk9gKEQ9nbrhia9Qjsqk4DyA/132","comment_is_top":false,"comment_ctime":1615000953,"is_pvip":false,"replies":[{"id":"102432","content":"可以转发分享给更多的朋友。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1615092206,"ip_address":"","comment_id":281977,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615000953","product_id":100068401,"comment_content":"非常喜欢这一讲","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516568,"discussion_content":"可以转发分享给更多的朋友。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615092206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}