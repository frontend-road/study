{"id":382733,"title":"14 | Linux初始化（上）：GRUB与vmlinuz的结构","content":"<p>你好，我是LMOS。</p><p>在前面的课程中，我们建好了二级引导器，启动了我们的Cosmos，并进行了我们Cosmos的Hal层初始化。</p><p>我会用两节课带你领会Linux怎样做初始化。虽然我们自己具体实现过了初始化，不过我们也不妨看看Linux的初始化流程，借鉴一下Linux开发者的玩法。</p><p>这节课，我会先为你梳理启动的整体流程，重点为你解读Linux上GRUB是怎样启动，以及内核里的“实权人物”——vmlinuz内核文件是如何产生和运转的。下节课，我们从setup.bin文件的_start函数入手，研究Linux初始化流程。</p><p>好，接下来我们从全局流程讲起，正式进入今天的学习。</p><h2>全局流程</h2><p>x86平台的启动流程，是非常复杂的。为了帮助你理解，我们先从全局粗略地看一看整体流程，然后一步步细化。</p><p>在机器加电后，BIOS会进行自检，然后由BIOS加载引导设备中引导扇区。在安装有Linux操作系统的情况下，在引导扇区里，通常是安装的GRUB的一小段程序（安装windows的情况则不同）。最后，GRUB会加载Linux的内核映像vmlinuz，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/b3/f3d8b95e8c1563466d31f385bb42aab3.jpg?wh=3543*2005\" alt=\"\" title=\"x86的全局启动流程示意图\"></p><p>上图中的引导设备通常是机器中的硬盘，但也可以是U盘或者光盘甚至是软盘。BIOS会自动读取保存在CMOS中的引导设备信息。</p><!-- [[[read_end]]] --><h2>从BIOS到GRUB</h2><p>从前面的课程我们已经知道，CPU被设计成只能运行内存中的程序，没有办法直接运行储存在硬盘或者U盘中的操作系统程序。</p><p>如果想要运行硬盘或者U盘中的程序，就必须要先加载到内存（RAM）中才能运行。这是因为硬盘、U盘（外部储存器）并不和CPU直接相连，它们的访问机制和寻址方式与内存截然不同。</p><p>内存在断电后就没法保存数据了，那BIOS又是如何启动的呢？硬件工程师设计CPU时，硬性地规定在加电的瞬间，强制将CS寄存器的值设置为0XF000，IP寄存器的值设置为0XFFF0。</p><p>这样一来，CS:IP就指向了0XFFFF0这个物理地址。在这个物理地址上连接了主板上的一块小的ROM芯片。这种芯片的访问机制和寻址方式和内存一样，只是它在断电时不会丢失数据，在常规下也不能往这里写入数据，它是一种<strong>只读内存</strong>，BIOS程序就被固化在该ROM芯片里。</p><p>现在，CS:IP指向了0XFFFF0这个位置，正是BIOS程序的入口地址。这意味着BIOS正式开始启动。</p><p>BIOS一开始会初始化CPU，接着检查并初始化内存，然后将自己的一部分复制到内存，最后跳转到内存中运行。BIOS的下一步就是枚举本地设备进行初始化，并进行相关的检查，检查硬件是否损坏，这期间BIOS会调用其它设备上的固件程序，如显卡、网卡等设备上的固件程序。</p><p>当设备初始化和检查步骤完成之后，<strong>BIOS会在内存中建立中断表和中断服务程序</strong>，这是启动Linux至关重要的工作，因为Linux会用到它们。</p><p>具体是怎么操作的呢？BIOS会从内存地址（0x00000）开始用1KB的内存空间（0x00000~0x003FF）构建中断表，在紧接着中断表的位置，用256KB的内存空间构建BIOS数据区（0x00400~0x004FF），并在0x0e05b的地址加载了8KB大小的与中断表对应的中断服务程序。</p><p>中断表中有256个条目，每个条目占用4个字节，其中两个字节是CS寄存器的值，两个字节是IP寄存器的值。每个条目都指向一个具体的中断服务程序。</p><p>为了启动外部储存器中的程序，BIOS会搜索可引导的设备，搜索的顺序是由CMOS中的设置信息决定的（这也是我们平时讲的，所谓的在BIOS中设置的启动设备顺序）。一个是软驱，一个是光驱，一个是硬盘上，还可以是网络上的设备甚至是一个usb 接口的U盘，都可以作为一个启动设备。</p><p>当然，Linux通常是从硬盘中启动的。硬盘上的第1个扇区（每个扇区512字节空间），被称为<strong>MBR（主启动记录）</strong>，其中包含有基本的GRUB启动程序和分区表，安装GRUB时会自动写入到这个扇区，当MBR被BIOS装载到0x7c00地址开始的内存空间中后，BIOS就会将控制权转交给了MBR。在当前的情况下，其实是交给了GRUB。</p><p>到这里，BIOS到GRUB的过程结束。</p><h2>GRUB是如何启动的</h2><p>根据前面内容可以发现，BIOS只会加载硬盘上的第1个扇区。不过这个扇区仅有512字节，这512字节中还有64字节的分区表加2字节的启动标志，很显然，剩下446字节的空间，是装不下GRUB这种大型通用引导器的。</p><p>于是，GRUB的加载分成了多个步骤，同时GRUB也分成了多个文件，其中有两个<strong>重要的文件boot.img和core.img</strong>，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/85/b92dyy0f686e730ffcb606ed17e5b785.jpg?wh=558*86\" alt=\"\" title=\"GRUB核心文件\"></p><p>其中，boot.img被GRUB的安装程序写入到硬盘的MBR中，同时在boot.img文件中的一个位置写入core.img文件占用的第一个扇区的扇区号。</p><p>而core.img文件是由GRUB安装程序根据安装时环境信息，用其它GRUB的模块文件动态生成。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/4b/cb36d637ce0a0d7c38788102e139604b.jpg?wh=3180*1105\" alt=\"\" title=\"GRUB-coreimg格式\"></p><p>如果是从硬盘启动的话，core.img中的第一个扇区的内容就是diskboot.img文件。diskboot.img文件的作用是，<strong>读取core.img中剩余的部分到内存中。</strong></p><p>由于这时diskboot.img文件还不识别文件系统，所以我们将core.img文件的全部位置，都用文件块列表的方式保存到diskboot.img文件中。这样就能确保diskboot.img文件找到core.img文件的剩余内容，最后将控制权交给kernel.img文件。</p><p>因为这时core.img文件中嵌入了足够多的功能模块，所以可以保证GRUB识别出硬盘分区上文件系统，能够访问/boot/grub目录，并且可以加载相关的配置文件和功能模块，来实现相关的功能，例如加载启动菜单、加载目标操作系统等。</p><p>正因为GRUB2大量使用了动态加载功能模块，这使得core.img文件的体积变得足够小。而GRUB的core.img文件一旦开始工作，就可以加载Linux系统的vmlinuz内核文件了。</p><h2>详解vmlinuz文件结构</h2><p>我们在/boot目录下会发现vmlinuz文件，这个文件是怎么来的呢？</p><p>其实它是由Linux编译生成的bzImage文件复制而来的，你自己可以下载最新的Linux代码.</p><p>我们一致把Linux源码解压到一个linux目录中，也就是说我们后面查找Linux源代码文件总是从linux目录开始的，切换到代码目录执行make ARCH=x86_64，再执行make install，就会产生vmlinuz文件，你可以参考后面的makefile代码。</p><pre><code>#linux/arch/x86/boot/Makefile\ninstall:    sh $(srctree)/$(src)/install.sh $(KERNELRELEASE) $(obj)/bzImage \\        System.map &quot;$(INSTALL_PATH)&quot;\n</code></pre><p>install.sh脚本文件只是完成复制的功能，所以我们只要搞懂了bzImage文件结构，就等同于理解了vmlinuz文件结构。</p><p>那么bzImage文件又是怎么来的呢？我们只要研究bzImage文件在Makefile中的生成规则，就会恍然大悟，代码如下 ：</p><pre><code>#linux/arch/x86/boot/Makefile\n$(obj)/bzImage: $(obj)/setup.bin $(obj)/vmlinux.bin $(obj)/tools/build FORCE    $(call if_changed,image)    @$(kecho) 'Kernel: $@ is ready' ' (#'`cat .version`')'\n</code></pre><p>从前面的代码可以知道，生成bzImage文件需要三个依赖文件：setup.bin、vmlinux.bin，linux/arch/x86/boot/tools目录下的build。让我们挨个来分析一下。</p><p>其实，build只是一个HOSTOS（正在使用的Linux）下的应用程序，它的作用就是将setup.bin、vmlinux.bin两个文件拼接成一个bzImage文件，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/22/30/22a83b33b4eededec109bda203133830.jpg?wh=2805*1805\" alt=\"\" title=\"bzImage文件结构示意图\"></p><p>剩下的就是搞清楚setup.bin、vmlinux.bin这两个文件的的结构，先来看看setup.bin文件，setup.bin文件是由objcopy命令根据setup.elf生成的。</p><p>setup.elf文件又怎么生成的呢？我们结合后面的代码来看看。</p><pre><code>#这些目标文件正是由/arch/x86/boot/目录下对应的程序源代码文件编译产生\nsetup-y     += a20.o bioscall.o cmdline.o copy.o cpu.o cpuflags.o cpucheck.o\nsetup-y     += early_serial_console.o edd.o header.o main.o memory.o\nsetup-y     += pm.o pmjump.o printf.o regs.o string.o tty.o video.o\nsetup-y     += video-mode.o version.o\n\n#……\nSETUP_OBJS = $(addprefix $(obj)/,$(setup-y))\n#……\nLDFLAGS_setup.elf   := -m elf_i386 -T$(obj)/setup.elf: $(src)/setup.ld $(SETUP_OBJS) FORCE    $(call if_changed,ld)\n#……\nOBJCOPYFLAGS_setup.bin  := -O binary$(obj)/setup.bin: $(obj)/setup.elf FORCE    $(call if_changed,objcopy)\n</code></pre><p>根据这段代码，不难发现setup.bin文件正是由/arch/x86/boot/目录下一系列对应的程序源代码文件编译链接产生，其中的<strong>head.S文件</strong>和<strong>main.c文件</strong>格外重要，别急，这个我之后会讲。</p><p>下面我们先看看vmlinux.bin是怎么产生的，构建vmlinux.bin的规则依然在linux/arch/x86/boot/目录下的Makefile文件中，如下所示：</p><pre><code>#linux/arch/x86/boot/Makefile\nOBJCOPYFLAGS_vmlinux.bin := -O binary -R .note -R .comment -S$(obj)/vmlinux.bin: $(obj)/compressed/vmlinux FORCE    $(call if_changed,objcopy)\n</code></pre><p>这段代码的意思是，vmlinux.bin文件依赖于linux/arch/x86/boot/compressed/目录下的vmlinux目标，下面让我们切换到linux/arch/x86/boot/compressed/目录下继续追踪。打开该目录下的Makefile，会看到如下代码。</p><pre><code>#linux/arch/x86/boot/compressed/Makefile\n#……\n#这些目标文件正是由/arch/x86/boot/compressed/目录下对应的程序源代码文件编译产生$(BITS)取值32或者64\nvmlinux-objs-y := $(obj)/vmlinux.lds $(obj)/kernel_info.o $(obj)/head_$(BITS).o \\    $(obj)/misc.o $(obj)/string.o $(obj)/cmdline.o $(obj)/error.o \\    $(obj)/piggy.o $(obj)/cpuflags.o\nvmlinux-objs-$(CONFIG_EARLY_PRINTK) += $(obj)/early_serial_console.o\nvmlinux-objs-$(CONFIG_RANDOMIZE_BASE) += $(obj)/kaslr.o\nifdef CONFIG_X86_64    \nvmlinux-objs-y += $(obj)/ident_map_64.o    \nvmlinux-objs-y += $(obj)/idt_64.o $(obj)/idt_handlers_64.o    vmlinux-objs-y += $(obj)/mem_encrypt.o    \nvmlinux-objs-y += $(obj)/pgtable_64.o    \nvmlinux-objs-$(CONFIG_AMD_MEM_ENCRYPT) += $(obj)/sev-es.o\nendif\n#……\n$(obj)/vmlinux: $(vmlinux-objs-y) $(efi-obj-y) FORCE  \n$(call if_changed,ld)\n</code></pre><p>结合这段代码我们发现，linux/arch/x86/boot/compressed目录下的vmlinux是由该目录下的head_32.o或者head_64.o、cpuflags.o、error.o、kernel.o、misc.o、string.o 、cmdline.o 、early_serial_console.o等文件以及piggy.o链接而成的。</p><p>其中，vmlinux.lds是链接脚本文件。在没做任何编译动作前，前面依赖列表中任何一个目标文件的源文件（除了piggy.o源码），我们几乎都可以在Linux内核源码里找到。</p><p>比如说，head_64.o对应源文件head_64.S、string.o对应源文件string.c、misc.o对应源文件misc.c等。</p><p>那么问题来了，为啥找不到piggy.o对应的源文件，比如piggy.c、piggy.S或其他文件呢？你需要在Makefile文件仔细观察一下，才能发现有个创建文件piggy.S的规则，代码如下所示：</p><pre><code>#linux/arch/x86/boot/compressed/Makefile\n#……\nquiet_cmd_mkpiggy = MKPIGGY $@      \ncmd_mkpiggy = $(obj)/mkpiggy $&lt; &gt; $@\n\ntargets += piggy.S\n$(obj)/piggy.S: $(obj)/vmlinux.bin.$(suffix-y) $(obj)/mkpiggy FORCE    $(call if_changed,mkpiggy)\n</code></pre><p>看到上面的规则，我们豁然开朗，原来piggy.o是由piggy.S汇编代码生成而来，而piggy.S是编译Linux内核时由mkpiggy工作（HOST OS下的应用程序）动态创建的，这就是我们找不到它的原因。</p><p>piggy.S的第一个依赖文件vmlinux.bin.$(suffix-y)中的suffix-y，它表示内核压缩方式对应的后缀。</p><pre><code>#linux/arch/x86/boot/compressed/Makefile\n#……\nvmlinux.bin.all-y := $(obj)/vmlinux.bin\nvmlinux.bin.all-$(CONFIG_X86_NEED_RELOCS) += $(obj)/vmlinux.relocs\n$(obj)/vmlinux.bin.gz: $(vmlinux.bin.all-y) FORCE    \n$(call if_changed,gzip)\n$(obj)/vmlinux.bin.bz2: $(vmlinux.bin.all-y) FORCE    \n$(call if_changed,bzip2)\n$(obj)/vmlinux.bin.lzma: $(vmlinux.bin.all-y) FORCE    \n$(call if_changed,lzma)\n$(obj)/vmlinux.bin.xz: $(vmlinux.bin.all-y) FORCE   \n$(call if_changed,xzkern)\n$(obj)/vmlinux.bin.lzo: $(vmlinux.bin.all-y) FORCE    \n$(call if_changed,lzo)\n$(obj)/vmlinux.bin.lz4: $(vmlinux.bin.all-y) FORCE    \n$(call if_changed,lz4)\n$(obj)/vmlinux.bin.zst: $(vmlinux.bin.all-y) FORCE    \n$(call if_changed,zstd22)\nsuffix-$(CONFIG_KERNEL_GZIP)    := gz\nsuffix-$(CONFIG_KERNEL_BZIP2)   := bz2\nsuffix-$(CONFIG_KERNEL_LZMA)    := lzma\nsuffix-$(CONFIG_KERNEL_XZ)  := xz\nsuffix-$(CONFIG_KERNEL_LZO)     := lzo\nsuffix-$(CONFIG_KERNEL_LZ4)     := lz4\nsuffix-$(CONFIG_KERNEL_ZSTD)    := zst\n</code></pre><p>由前面内容可以发现，Linux内核可以被压缩成多种格式。虽然现在我们依然没有搞清楚vmlinux.bin文件是怎么来的，但是我们可以发现，linux/arch/x86/boot/compressed目录下的Makefile文件中，有下面这样的代码。</p><pre><code>#linux/arch/x86/boot/compressed/Makefile\n#……\nOBJCOPYFLAGS_vmlinux.bin :=  -R .comment -S\n$(obj)/vmlinux.bin: vmlinux FORCE \n$(call if_changed,objcopy)\n</code></pre><p>也就是说，arch/x86/boot/compressed目录下的vmlinux.bin，它是由objcopy工具通过vmlinux目标生成。而vmlinux目标没有任何修饰前缀和依赖的目标，这说明它就是<strong>最顶层目录下的一个vmlinux文件</strong>。</p><p>我们继续深究一步就会发现，objcopy工具在处理过程中只是删除了vmlinux文件中“.comment”段，以及符号表和重定位表（通过参数-S指定），而vmlinux文件的格式依然是ELF格式的，如果不需要使用ELF格式的内核，这里添加“-O binary”选项就可以了。</p><p>我们现在来梳理一下，vmlinux文件是如何创建的。</p><p>其实，vmlinux文件就是编译整个Linux内核源代码文件生成的，Linux的代码分布在各个代码目录下，这些目录之下又存在目录，Linux的kbuild（内核编译）系统，会递归进入到每个目录，由该目录下的Makefile决定要编译哪些文件。</p><p>在编译完具体文件之后，就会在该目录下，把已经编译了的文件链接成一个该目录下的built-in.o文件，这个built-in.o文件也会与上层目录的built-in.o文件链接在一起。</p><p>再然后，层层目录返回到顶层目录，所有的built-in.o文件会链接生成一个vmlinux文件，这个vmlinux文件会通过前面的方法转换成vmlinux.bin文件。但是请注意，vmlinux.bin文件它依然是ELF格式的文件。</p><p>最后，工具软件会压缩成vmlinux.bin.gz文件，这里我们以gzip方式压缩。</p><p>让我们再次回到mkpiggy命令，其中mkpiggy是内核自带的一个工具程序，它把输出方式重定向到文件，从而产生piggy.S汇编文件，源码如下：</p><pre><code>int main(int argc, char *argv[]){ \n    uint32_t olen;    \n    long ilen;    \n    FILE *f = NULL;    \n    int retval = 1;\n    f = fopen(argv[1], &quot;r&quot;);    \n    if (!f) {        \n        perror(argv[1]);        \n        goto bail;    \n    }\n    //……为节约篇幅略去部分代码\n    printf(&quot;.section \\&quot;.rodata..compressed\\&quot;,\\&quot;a\\&quot;,@progbits\\n&quot;);\n    printf(&quot;.globl z_input_len\\n&quot;);    \n    printf(&quot;z_input_len = %lu\\n&quot;, ilen);    \n    printf(&quot;.globl z_output_len\\n&quot;);    \n    printf(&quot;z_output_len = %lu\\n&quot;, (unsigned long)olen);\n    printf(&quot;.globl input_data, input_data_end\\n&quot;);\n    printf(&quot;input_data:\\n&quot;);    \n    printf(&quot;.incbin \\&quot;%s\\&quot;\\n&quot;, argv[1]);    \n    printf(&quot;input_data_end:\\n&quot;);\n    printf(&quot;.section \\&quot;.rodata\\&quot;,\\&quot;a\\&quot;,@progbits\\n&quot;);\n    printf(&quot;.globl input_len\\n&quot;);    \n    printf(&quot;input_len:\\n\\t.long %lu\\n&quot;, ilen);    \n    printf(&quot;.globl output_len\\n&quot;);    \n    printf(&quot;output_len:\\n\\t.long %lu\\n&quot;, (unsigned long)olen);\n    retval = 0;\nbail:    \n    if (f)        \n        fclose(f);    \n    return retval;\n}\n//由上mkpiggy程序“写的”一个汇编程序piggy.S。\n.section &quot;.rodata..compressed&quot;,&quot;a&quot;,@progbits \n.globl z_input_len\n z_input_len = 1921557 \n.globl z_output_len \nz_output_len = 3421472 \n.globl input_data,input_data_end\n.incbin &quot;arch/x86/boot/compressed/vmlinux.bin.gz&quot; \ninput_data_end:\n.section &quot;.rodata&quot;,&quot;a&quot;,@progbits\n.globl input_len\ninput_len:4421472\n.globl output_len\noutput_len:4424772\n</code></pre><p>根据上述代码不难发现，这个piggy.S非常简单，使用汇编指令incbin将压缩的vmlinux.bin.gz毫无修改地包含进来。</p><p>除了包含了压缩的vmlinux.bin.gz内核映像文件外，piggy.S中还定义了解压vmlinux.bin.gz时需要的各种信息，包括压缩内核映像的长度、解压后的长度等信息。</p><p><strong>这些信息和vmlinux.bin.gz文件，它们一起生成了piggy.o文件，然后piggy.o文件和<span dollar=\"\">$</span>(vmlinux-objs-y)<span dollar=\"\">$</span>(efi-obj-y)中的目标文件一起链接生成，最终生成了linux/arch/x86/boot/compressed目录下的vmlinux。</strong></p><p>说到这里，你是不是感觉，这和Linux的启动流程无关呢？有这种想法就大错特错了，要想搞明白Linux的启动流程，首先得搞懂它vmlinuz的文件结构。有了这些基础，才能知其然同时知其所以然。</p><h2>重点回顾</h2><p>又到了课程尾声，这节课的学习我们就告一段落了，我来给你做个总结。</p><p>今天我们首先从全局梳理了一遍x86平台的启动流程，掌握了BIOS加载GRUB的过程，又一起学习了BIOS是如何启动的，它又是如何加载引导设备的。</p><p>接着我们研究了GRUB的启动流程，BIOS加载了GRUB的第一个部分，这一部分加载了GRUB的其余部分。</p><p>最后，我们详细了解了Linux内核的启动文件vmlinuz的结构，搞清楚了它的生成过程。</p><h2>思考题</h2><p>请问，为什么要用C代码mkpiggy程序生成piggy.S文件，并包含vmlinux.bin.gz文件呢？</p><p>欢迎你在留言区记录你的收获和疑问，也欢迎你把这节课分享给有需要的朋友，跟他一起学习进步。</p><p>好，我是LMOS，我们下节课见！</p>","neighbors":{"left":{"article_title":"13 | 第一个C函数：如何实现板级初始化？","id":381810},"right":{"article_title":"15 | Linux初始化（下）：从_start到第一个进程","id":383611}},"comments":[{"had_liked":false,"id":297160,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1623333546,"is_pvip":false,"replies":[{"id":"108082","content":"6666","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623726574,"ip_address":"","comment_id":297160,"utype":1}],"discussion_count":7,"race_medal":0,"score":"173422025386","product_id":100078401,"comment_content":"大体上整理了一下，有问题欢迎帮忙指出【上】：<br><br>操作系统的启动分为两个阶段：引导boot和启动startup，本节主要还是boot过程：<br>BIOS-&gt;GRUG1-&gt;GRUB1.5-&gt;GRUB2-&gt;Linux内核【环境硬盘引导、MBR分区】<br><br>1、按电源键，系统加电<br><br>2、主板通电<br>CPU加电时，会默认设置[CS:IP]为[0XF000:0XFFF0]，根据实模式下寻址规则，CPU指向0XFFFF0<br>这个地址正是BIOS启动程序位置，而BIOS访问方式与内存一致，所以CPU可以直接读取命令并执行<br><br>3、BIOS执行<br>3.1、BIOS首先执行POST自检，包括主板、内存、外设等，遇到问题则报警并停止引导<br><br>3.2、BIOS对设备执行简单的初始化工作<br><br>3.3、BIOS 会在内存中：<br>建立中断表（0x00000~0x003FF）<br>构建 BIOS 数据区（0x00400~0x004FF）<br>加载了中断服务程序（0x0e05b~0x1005A）<br><br>3.4、BIOS根据设备启动顺序，依次判断是否可以启动<br>比如先检查光驱能否启动<br>然后依次检查硬盘是否可以启动【硬盘分区的时候，设置为活动分区】<br><br>4、硬盘引导<br>4.1、先说下寻址方式，与扇区编号的事情<br>最传统的磁盘寻址方式为CHS，由三个参数决定读取哪个扇区：磁头（Heads）、柱面(Cylinder)、扇区(Sector)<br>磁头数【8位】，从0开始，最大255【微软DOS系统，只能用255个】，决定了读取哪个盘片的哪个面【一盘两面】<br>柱面数【10位】，从0开始，最大1023【决定了读取哪个磁道，磁道无论长短都会划分为相同扇区数】<br>扇区数【6位】，从1开始，最大数 63【CHS中扇区从1开始，而逻辑划分中扇区从0开始，经常会造成很多误解】<br>每个扇区为512字节<br><br>4.2、然后说下引导方式<br>BIOS在发现硬盘启动标志后，BIOS会引发INT 19H中断<br>这个操作，会将MBR【逻辑0扇区】，也就是磁盘CHS【磁头0，柱面0，扇区1】，读取到内存[0:7C00h]，然后执行其代码【GRUB1阶段】，至此BIOS把主动权交给了GRUB1阶段代码<br>MBR扇区为512字节，扇区最后分区表至少需要66字节【64字节DPT+2字节引导标志】，所以这段代码最多只能有446字节，grub中对应的就是引导镜像boot.img<br>boot.img的任务就是，定位，并通过BIOS INT13中断读取1.5阶段代码，并运行<br><br>5、Grub1.5阶段<br>5.1、先说一下MBR GAP<br>据说微软DOS系统原因，第一个分区的起始逻辑扇区是63扇区，在MBR【0扇区】和分布表之间【63扇区】，存在62个空白扇区，共 31KB。<br>Grub1.5阶段代码就安装在这里。<br><br>5.2、上面提到，boot.img主要功能就是找到并加载Grub1.5阶段代码，并切换执行。<br>Grub1.5阶段代码是core.img，其主要功能就是加载文件系统驱动，挂载文件系统， 位加载并运行GRUB2阶段代码。<br>core.img包括多个映像和模块：<br>diskboot.img【1.5阶段引导程序】，存在于MBR GAP第一个扇区；【这里是硬盘启动的情况，如果是cd启动就会是cdboot.img】<br>lzma_decompress.img【解压程序】<br>kernel.img【grub核心代码】，会【压缩存放】<br>biosdisk.mod【磁盘驱动】、Part_msdos.mod【MBR分区支持】、Ext2.mod【EXT文件系统】等，会【压缩存放】<br><br>其实boot.img只加载了core.img的第一个扇区【存放diskboot.img】，然后控制权就交出去了，grub阶段1代码使命结束。<br>diskboot.img知道后续每个文件的位置，会继续通过BIOS中断读取扇区，加载余下的部分并转交控制权，包括：<br>加载lzma_decompress.img，从而可以解压被压缩的模块<br>加载kernel.img，并转交控制权给kernel.img<br>kernel.img的grub_main函数会调用grub_load_modules函数加载各个mod模块<br>加载各个mod后，grub就支持文件系统了，访问磁盘不需要再依靠BIOS的中断以扇区为单位读取了，终于可以使用文件系统了","like_count":41,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521740,"discussion_content":"6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623726574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","nickname":"neohope","note":"","ucode":"C0268F6E7E2B6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378775,"discussion_content":"boot过程：UEFI->GRUB->Linux内核【硬盘引导、UEFI】\n\n1、按电源键，系统加电\n\n2、主板通电\n\n3、UEFI开始执行【UEFI功能比BIOS强大很多，支持命令行，有简单图形界面，也支持文件系统】\n3.1、UEFI会检测硬件，并对设备执行简单的初始化工作\n3.2、UEFI会判断启动模式，是UEFI还是Legacy【Legacy模式下，UEFI通过CSM模块支持MBR方式启动】\n3.3、如果是UEFI模式启动，UEFI会读取硬盘分区表，查找并挂载ESP分区【 EFI System Partition，VFAT格式】\nGPT分区下有特殊GUID：  C12A7328-F81F-11D2-BA4B-00A0C93EC93B；\nMBR分区下有 标识为 0xEF\n3.4、各操作系统引的导程序按规则存放到/boot/efi目录下【可以操作文件而不需操作扇区，文件大小限制也宽松了很多】\n比如Ubuntu，/boot/efi/ubuntu/grubx64.efi\n【可以先引导grub，然后引导Linux】\n【也可以直接启动系统内核，包括Windows和Linux，但他们也都需要一个efi文件用于引导系统】\n\n4、后续引导，和之前就比较相似了\n如果用grub，EFI boot manager会加载/EFI/ubuntu/boot/grubx64.efi，移交控制权，会进入到grub2阶段【grub.cfg也在这个目录下】\n如果用ubuntu，EFI boot manager会加载/EFI/ubuntu/boot/ubuntu.efi，移交控制权，可以直接启动linux内核【编译时打开EFI Boot Stub】\n如果用windows，EFI boot manager会加载/EFI/Mirosoft/Boot/bootmgr.efi\n如果采用默认启动，会使用/EFI/Boot/bootx64.efi","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1623398158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1674369,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","nickname":"Geek_68d3d2","note":"","ucode":"EBD6D881AA7A74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586561,"discussion_content":"请问lzma_decompress.img和kernel.img这些文件是写在文件系统中给文件系统管理了起来还是放在其他地方啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662343591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2859088,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/a0/50/390187f3.jpg","nickname":"罗均","note":"","ucode":"AA8F5D6B13D3E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547210,"discussion_content":"顶礼膜拜大神👏👏👏👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642581273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2677530,"avatar":"https://static001.geekbang.org/account/avatar/00/28/db/1a/52d1501f.jpg","nickname":"rain","note":"","ucode":"A2E81AB7C4274C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383983,"discussion_content":"neohope大总结的太好了，点赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626328905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446375,"avatar":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","nickname":"book尾汁","note":"","ucode":"AE2B8DFC643ACC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379205,"discussion_content":"你好，最后那个grub_load_module加载各个模块是加载的core.img里面的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623753314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064750,"avatar":"","nickname":"springXu","note":"","ucode":"F5DB0B963C894F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378697,"discussion_content":"有uefi的grub的流程说明么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623343479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297161,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1623333564,"is_pvip":false,"replies":[{"id":"108080","content":"大佬 很强","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623725491,"ip_address":"","comment_id":297161,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100407581372","product_id":100078401,"comment_content":"大体上整理了一下，有问题欢迎帮忙指出【下】：<br>6、GRUB2阶段<br>现在grub就能访问boot&#47;grub及其子目录了<br>kernel.img接着调用grub_load_normal_mode加载normal模块<br>normal模块读取解析文件grub.cfg，查看有哪些命令，比如发现了linux、initrd这几个命令，需要linux模块<br>normal模块会根据command.lst，定位并加载用到的linux模块【一般在&#47;boot&#47;grub2&#47;i386-pc目录】<br>当然，同时需要完成初始化显示、载入字体等工作<br>接下来Grub就会给咱们展示启动菜单了<br><br>7、选择启动菜单<br>7.1、引导协议<br>引导程序加载内核，前提是确定好数据交换方式，叫做引导协议，内核中引导协议相关部分的代码在arch&#47;x86&#47;boot&#47;header.S中，内核会在这个文件中标明自己的对齐要求、是否可以重定位以及希望的加载地址等信息。同时也会预留空位，由引导加载程序在加载内核时填充，比如initramfs的加载位置和大小等信息。<br>引导加载程序和内核均为此定义了一个结构体linux_kernel_params，称为引导参数，用于参数设定。Grub会在把控制权移交给内核之前，填充好linux_kernel_params结构体。如果用户要通过grub向内核传递启动参数，即grub.cfg中linux后面的命令行参数。Grub也会把这部分信息关联到引导参数结构体中。<br><br>7.2、开始引导<br>Linux内核的相关文件位于&#47;boot 目录下，文件名均带有前缀 vmlinuz。<br>咱们选择对应的菜单后，Grub会开始执行对应命令，定位、加载、初始化内核，并移交到内核继续执行。<br>调用linux模块中的linux命令，加载linux内核<br>调用linux模块中的initrd命令，填充initramfs信息，然后Grub会把控制权移交给内核。<br>内核此时开始执行，同时也就可以读取linux_kernel_params结构体的数据了<br>boot阶段结束，开始进入startup阶段。","like_count":24,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521741,"discussion_content":"大佬 很强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623725491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320775,"user_name":"178","can_delete":false,"product_type":"c1","uid":1090075,"ip_address":"","ucode":"3B0266F6BD06AE","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/1b/7426e629.jpg","comment_is_top":false,"comment_ctime":1636509422,"is_pvip":false,"replies":[{"id":"116446","content":"对的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1636597760,"ip_address":"","comment_id":320775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18816378606","product_id":100078401,"comment_content":"vmlinuz是可引导的、压缩的内核。“vm”代表 “Virtual Memory”，linu代表“Linux”，z代表压缩。是个有故事的缩写","like_count":5,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530108,"discussion_content":"对的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636597760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297060,"user_name":"孤星可","can_delete":false,"product_type":"c1","uid":1057440,"ip_address":"","ucode":"1DE673A8E2253B","user_header":"https://static001.geekbang.org/account/avatar/00/10/22/a0/0e8d56df.jpg","comment_is_top":false,"comment_ctime":1623295879,"is_pvip":false,"replies":[{"id":"108085","content":"6666","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623726679,"ip_address":"","comment_id":297060,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14508197767","product_id":100078401,"comment_content":"尝试实现了 lmoskrlimg 的逻辑（即 Cosmos.eki 的生成），有兴趣可以看看。<br><br>https:&#47;&#47;github.com&#47;guxingke&#47;demo&#47;blob&#47;master&#47;bytes-demo&#47;src&#47;main&#47;java&#47;com&#47;gxk&#47;demo&#47;Main.java","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521702,"discussion_content":"6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623726679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296890,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1623214725,"is_pvip":false,"replies":[{"id":"107854","content":"这就是开源作者的喜好了 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623245083,"ip_address":"","comment_id":296890,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14508116613","product_id":100078401,"comment_content":"请问，为什么要用 C 代码 mkpiggy 程序生成 piggy.S 文件，并包含 vmlinux.bin.gz 文件呢？<br><br>看了这下生成的这个piggy.S 文件<br>主要的就是这行代码<br>.incbin &quot;arch&#47;x86&#47;boot&#47;compressed&#47;vmlinux.bin.gz&quot;<br>通过C 代码的形式，可以传入不同的参数来设置不同的压缩包vmlinux.bin.xx  来生成piggy.S 。<br>","like_count":3,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521629,"discussion_content":"这就是开源作者的喜好了 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623245083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296857,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1623204657,"is_pvip":false,"replies":[{"id":"107855","content":"是的 对头","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623245093,"ip_address":"","comment_id":296857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10213139249","product_id":100078401,"comment_content":"工具生成方式灵活，支持多种配置，且能满足各种场景下的需求~","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521615,"discussion_content":"是的 对头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623245093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296826,"user_name":"springXu","can_delete":false,"product_type":"c1","uid":2064750,"ip_address":"","ucode":"F5DB0B963C894F","user_header":"","comment_is_top":false,"comment_ctime":1623170936,"is_pvip":true,"replies":[{"id":"107858","content":"我课程中有生成eki文件的方式","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623245213,"ip_address":"","comment_id":296826,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10213105528","product_id":100078401,"comment_content":"程序来生成汇编代码，这个是有多种配置让使用者根据自己的需求来生成。比如vmlinuz.bin压缩的方式的不同又或者是cpu的指令不同。  产生的汇编代码也不同。 另外Cosmos.eki的生成过程能有个说明不？ ","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521599,"discussion_content":"我课程中有生成eki文件的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623245213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2749777,"avatar":"https://static001.geekbang.org/account/avatar/00/29/f5/51/a7406456.jpg","nickname":"多多人","note":"","ucode":"32DE9F65DADE23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391387,"discussion_content":"5.2步骤里，谈到加载文件系统驱动，这个怎么理解？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630427269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378416,"discussion_content":"cpu的指令不同？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623214837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2344081,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c4/91/a017bf72.jpg","nickname":"coconut","note":"","ucode":"07B95C7A6AC2F7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378404,"discussion_content":"加一:cosmos.eki 生成过程的说明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623209255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297023,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1623286439,"is_pvip":false,"replies":[{"id":"108086","content":"哈哈 这个地址 精典","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623726714,"ip_address":"","comment_id":297023,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5918253735","product_id":100078401,"comment_content":"不管肚子多少遍启动流程，还是记不住各种地址，除了0×7c00，哈哈","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521685,"discussion_content":"哈哈 这个地址 精典","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623726714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296886,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1623209997,"is_pvip":false,"replies":[{"id":"107828","content":"来了老铁，启动流程，常看常新～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1623217849,"ip_address":"","comment_id":296886,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5918177293","product_id":100078401,"comment_content":"又学习了一遍启动流程。😂","like_count":1,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521627,"discussion_content":"来了老铁，启动流程，常看常新～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623217849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348995,"user_name":"Qfeng","can_delete":false,"product_type":"c1","uid":1466121,"ip_address":"","ucode":"1248E70012BBA2","user_header":"https://static001.geekbang.org/account/avatar/00/16/5f/09/2ec44412.jpg","comment_is_top":false,"comment_ctime":1655629828,"is_pvip":false,"replies":[{"id":"128075","content":"666666","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1658391034,"ip_address":"","comment_id":348995,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1655629828","product_id":100078401,"comment_content":"一、简单总结：<br>1. CPU上电启动BIOS（ROM）<br>CPU硬件被设计成在加电的瞬间，强制将 CS 寄存器的值设置为 0XF000，IP 寄存器的值设置为 0XFFF0。<br>CS:IP 为 0XFFFF0 的这个物理地址上连接了主板上的一块小的 ROM 芯片，BIOS 程序就被固化在该 ROM 芯片里。<br>总结：CPU上电后硬件自动将 CS:IP 指向地址 0XFFFF0，这里存放了BIOS程序的入口地址，达到启动 BIOS 的目的。<br>（注：这个ROM芯片的访问机制和寻址方式和内存一样，只是它在断电时不会丢失数据，在常规下也不能往这里写入数据，它是一种只读内存。）<br><br>2. ROM BIOS<br>初始化CPU和内存，将自己拷贝到内存，执行环境跳转到内存（DDR）<br><br>3. DDR BIOS<br>1）设备初始化<br>2）在内存中建立中断服务程序表（0x00000~0x003FF，1KB，256个条目）, BIOS 数据区（0x00400~0x004FF）和中断服务程序（0x0E05B~1005B，8KB）<br>3）搜索可引导的外部存储器，并启动其中的程序。（包括：硬盘，U盘，软驱，光驱和网络设备等）<br>4）Linux从硬盘启动时，硬盘中名为MRB的第一个扇区包含的GRUB 启动程序（安装GRUB时自动写入）和分区表被 BIOS 装载到 0x7c00 地址开始的内存空间，<br>至此BIOS使命结束，控制权交给GRUB。<br><br>4. GRUB 启动<br>1）GRUB包含 boot.img和core.img两部分，硬盘MRB空间有限只包含boot.img，boot.img中包含core.img存放的硬盘扇区号<br>2）core.img 文件是由 GRUB 安装程序根据安装时环境信息，用其它 GRUB 的模块文件动态生成，主要包含diskboot.img，kernel.img和其他功能模块。<br>GRUB 的 core.img 文件一旦开始工作，就可以加载 Linux 系统的 vmlinuz 内核文件了。<br><br>5. Linux vmlinuz的生成<br>1）由Linux 编译生成的 bzImage 文件复制而来，存放在 &#47;boot 目录下<br>2）bzImage 由 arch&#47;x86&#47;boot&#47;Makefile 编译而来，依赖 setup.bin和vmlinux.bin两个。<br>3）setup.bin 由 &#47;arch&#47;x86&#47;boot&#47; 目录下的文件编译生成<br>4）arch&#47;x86&#47;boot&#47;compressed 目录 编译生成 vmlinux.bin过程总结：Linux 的 kbuild（内核编译）系统会递归进入到每个目录，由该目录下的 Makefile 决定要编译的文件。每个目录编译生成一个 built-in.o，所有的 built-in.o最终链接生成一个 vmlinux 文件最终压缩成 vmlinux.bin.gz，最终由mkpiggy 生成 vmlinux。<br><br>二、思考题<br>为什么要用 C 代码 mkpiggy 程序生成 piggy.S 文件，并包含 vmlinux.bin.gz 文件呢？<br>==》通过main函数传入的可变参数可以根据需要灵活扩展piggy.S的内容？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580870,"discussion_content":"666666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658391034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318371,"user_name":"搬铁少年ai","can_delete":false,"product_type":"c1","uid":1031045,"ip_address":"","ucode":"01D4A830A088D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/85/191eea69.jpg","comment_is_top":false,"comment_ctime":1635260759,"is_pvip":false,"replies":[{"id":"115517","content":"只会copy 前446个字节","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1635383527,"ip_address":"","comment_id":318371,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635260759","product_id":100078401,"comment_content":"请问老师，boot.img 是 512B 大小，MBR 也是 512，难道 boot.img 安装到 MBR 的时候会把 MBR 全部覆盖掉吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529209,"discussion_content":"只会copy 前446个字节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635383527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317973,"user_name":"搬铁少年ai","can_delete":false,"product_type":"c1","uid":1031045,"ip_address":"","ucode":"01D4A830A088D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/85/191eea69.jpg","comment_is_top":false,"comment_ctime":1635081607,"is_pvip":false,"replies":[{"id":"115357","content":"那是BIOS里面相关的内容 这里是从GRUB开始的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1635211019,"ip_address":"","comment_id":317973,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635081607","product_id":100078401,"comment_content":"老师好，我看别的书里面将上电后先跳转到 reset vector(0xFFFFFFF0)，然后 reset vector 会跳转到 BIOS 的入口（0xFFFF0），您这里为什么没有这个恢复向量呢","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529049,"discussion_content":"那是BIOS里面相关的内容 这里是从GRUB开始的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635211019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1450316,"avatar":"https://static001.geekbang.org/account/avatar/00/16/21/4c/7ed159ec.jpg","nickname":"芥末八爪鱼","note":"","ucode":"8AA979FE95CBE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552643,"discussion_content":"0xFFFFFFF0这个地址是UEFI下reset vector的地址；0xFFFF0是Legacy BIOS下reset vector的地址。作者是已Legacy BIOS为例进行讲解的，不过现在基本都是UEFI了，Intel后面也不再支持Legacy模式了。UEFI下的启动流程和Legacy模式是有很大区别的，比如UEFI下BIOS支持Fat32文件系统，硬盘采用GPT分区方式，启动分区格式化成Fat32格式的，BIOS可以直接读取启动分区里面的grub文件（.efi格式的），也就没有所谓的grub分成多部加载这个过程了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1645537278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296914,"user_name":"老王","can_delete":false,"product_type":"c1","uid":2246251,"ip_address":"","ucode":"D629648D2F2FFA","user_header":"https://static001.geekbang.org/account/avatar/00/22/46/6b/e766c18d.jpg","comment_is_top":false,"comment_ctime":1623224344,"is_pvip":false,"replies":[{"id":"107852","content":"是的，linux太大了<br>","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623245000,"ip_address":"","comment_id":296914,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623224344","product_id":100078401,"comment_content":"需要多分析各个脚本的功能，才能把握住脉络","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521644,"discussion_content":"是的，linux太大了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623245000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}