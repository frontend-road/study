{"id":713462,"title":"16｜连接数据库：通过链和代理查询鲜花信息","content":"<p>你好，我是黄佳，欢迎来到 LangChain 实战课！</p><p>一直以来，在计算机编程和数据库管理领域，所有的操作都需要通过严格、专业且结构化的语法来完成。这就是结构化查询语言（SQL）。当你想从一个数据库中提取信息或进行某种操作时，你需要使用这种特定的语言明确地告诉计算机你的要求。这不仅需要我们深入了解正在使用的技术，还需要对所操作的数据有充分的了解。</p><p><img src=\"https://static001.geekbang.org/resource/image/82/0d/829798a55a330518c7c95dcac948890d.png?wh=497x454\" alt=\"\" title=\"图片来源网络\"></p><p>你需要拥有一个程序员基本的技能和知识才能有效地与计算机交互。不过，随着人工智能的兴起和大语言模型的发展，情况开始发生变化。</p><p>现在，我们正进入一个<strong>全新的编程范式</strong>，其中机器学习和自然语言处理技术使得与计算机的交互变得更加自然。这意味着，我们可以用更加接近我们日常话语的自然语言来与计算机交流。例如，不用复杂的SQL语句查询数据库，我们可以简单地问：“请告诉我去年的销售额是多少？” 计算机能够理解这个问题，并给出相应的答案。</p><p>这种转变不仅使得非技术人员更容易与计算机交互，还为开发者提供了更大的便利性。简而言之，我们从“<strong>告诉计算机每一步怎么做</strong>”，转变为“<strong>告诉计算机我们想要什么</strong>”，整个过程变得更加人性化和高效。</p><h2>新的数据库查询范式</h2><p>下面这个图，非常清晰地解释了这个以LLM为驱动引擎，从自然语言的（模糊）询问，到自然语言的查询结果输出的流程。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/60/26/60ffbcbe5a891ae74a12d3d5d24cf426.jpg?wh=1571x470\" alt=\"\"></p><p>这种范式结合了自然语言处理和传统数据库查询的功能，为用户提供了一个更为直观和高效的交互方式。下面我来解释下这个过程。</p><ol>\n<li>提出问题：用户用自然语言提出一个问题，例如“去年的总销售额是多少？”。</li>\n<li>LLM理解并转译：LLM首先会解析这个问题，理解其背后的意图和所需的信息。接着，模型会根据解析的内容，生成相应的SQL查询语句，例如 “SELECT SUM(sales) FROM sales_data WHERE year = ‘last_year’;”。</li>\n<li>执行SQL查询：生成的SQL查询语句会被发送到相应的数据库进行执行。数据库处理这个查询，并返回所需的数据结果。</li>\n<li>LLM接收并解释结果：当数据库返回查询结果后，LLM会接收到这些数据。然后，LLM会开始解析这些数据，并将其转化为更容易被人类理解的答案格式。</li>\n<li>提供答案：最后，LLM将结果转化为自然语言答案，并返回给用户。例如“去年的总销售额为1,000,000元”。</li>\n</ol><p>你看，用户不需要知道数据库的结构，也不需要具备编写SQL的技能。他们只需要用自然语言提问，然后就可以得到他们所需的答案。这大大简化了与数据库的交互过程，并为各种应用场景提供了巨大的潜力。</p><h2>实战案例背景信息</h2><p>下面我们将通过LangChain实现这个新的数据库应用开发范式。</p><p>在这个实战案例中，我们的所有业务数据都存储在数据库中，而目标则是通过自然语言来为销售的每一种鲜花数据创建各种查询。这样，无论是员工还是顾客，当他们想了解某种鲜花的价格时，都可以快速地生成适当的查询语句。</p><p><strong>这就大大简化了查询过程和难度。</strong></p><p>首先，这个应用可以被简单地用作一个查询工具，允许员工在存货或销售系统中快速查找价格。员工不再需要记住复杂的查询语句或进行手动搜索，只需选择鲜花种类，告诉系统他所想要的东西，系统就会为他们生成正确的查询。</p><p>其次，这个模板也可以被整合到一个聊天机器人或客服机器人中。顾客可以直接向机器人询问：“红玫瑰的价格是多少？” 机器人会根据输入内容来调用LangChain和LLM，生成适当的查询，然后返回确切的价格给顾客。这样，不仅提高了服务效率，还增强了用户体验。</p><p>了解完项目的背景信息，下面我们就开始行动吧！</p><h2>创建数据库表</h2><p>首先，让我们创建一系列的数据库表，存储易速鲜花的业务数据。</p><p>这里，我们使用SQLite作为我们的示例数据库。它提供了轻量级的磁盘文件数据库，并不需要单独的服务器进程或系统，应用程序可以直接与数据库文件交互。同时，它也不需要配置、安装或管理，非常适合桌面应用、嵌入式应用或初创企业的简单需求。</p><p>SQLite支持ACID（原子性、一致性、隔离性、持久性），这意味着你的数据库操作即使在系统崩溃或电源失败的情况下也是安全的。虽然SQLite被认为是轻量级的，但它支持大多数SQL的标准特性，包括事务、触发器和视图。</p><p>因此，它也特别适用于那些不需要大型数据库系统带来的全部功能，但仍然需要数据持久性的应用程序，如移动应用或小型Web应用。当然，也非常适合我们做Demo。</p><p>sqlite3库，则是Python内置的轻量级SQLite数据库。通过sqlite3库，Python为开发者提供了一个简单、直接的方式来创建、查询和管理SQLite数据库。当你安装Python时，sqlite3模块已经包含在内，无需再进行额外的安装。</p><p>基于这个sqlite3库，创建业务数据的代码如下：</p><pre><code class=\"language-plain\"># 导入sqlite3库\nimport sqlite3\n\n# 连接到数据库\nconn = sqlite3.connect('FlowerShop.db')\ncursor = conn.cursor()\n\n# 执行SQL命令来创建Flowers表\ncursor.execute('''\n&nbsp; &nbsp; &nbsp; &nbsp; CREATE TABLE Flowers (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ID INTEGER PRIMARY KEY, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name TEXT NOT NULL, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Type TEXT NOT NULL, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Source TEXT NOT NULL, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PurchasePrice REAL, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SalePrice REAL,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StockQuantity INTEGER, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SoldQuantity INTEGER, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ExpiryDate DATE, &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Description TEXT, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; EntryDate DATE DEFAULT CURRENT_DATE \n&nbsp; &nbsp; &nbsp; &nbsp; );\n&nbsp; &nbsp; ''')\n\n# 插入5种鲜花的数据\nflowers = [\n&nbsp; &nbsp; ('Rose', 'Flower', 'France', 1.2, 2.5, 100, 10, '2023-12-31', 'A beautiful red rose'),\n&nbsp; &nbsp; ('Tulip', 'Flower', 'Netherlands', 0.8, 2.0, 150, 25, '2023-12-31', 'A colorful tulip'),\n&nbsp; &nbsp; ('Lily', 'Flower', 'China', 1.5, 3.0, 80, 5, '2023-12-31', 'An elegant white lily'),\n&nbsp; &nbsp; ('Daisy', 'Flower', 'USA', 0.7, 1.8, 120, 15, '2023-12-31', 'A cheerful daisy flower'),\n&nbsp; &nbsp; ('Orchid', 'Flower', 'Brazil', 2.0, 4.0, 50, 2, '2023-12-31', 'A delicate purple orchid')\n]\n\nfor flower in flowers:\n&nbsp; &nbsp; cursor.execute('''\n&nbsp; &nbsp; &nbsp; &nbsp; INSERT INTO Flowers (Name, Type, Source, PurchasePrice, SalePrice, StockQuantity, SoldQuantity, ExpiryDate, Description) \n&nbsp; &nbsp; &nbsp; &nbsp; VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);\n&nbsp; &nbsp; ''', flower)\n\n# 提交更改\nconn.commit()\n\n# 关闭数据库连接\nconn.close()\n</code></pre><p>首先，我们连接到FlowerShop.db数据库。然后，我们创建一个名为Flowers的新表，此表将存储与每种鲜花相关的各种数据。</p><p>该表有以下字段：</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/31/d569yy552347e51ba9514a183yyef731.jpg?wh=925x882\" alt=\"\"></p><p>接着，我们创建了一个名为flowers的列表，其中包含5种鲜花的所有相关数据。使用for循环，我们遍历flowers列表，并将每种鲜花的数据插入到Flowers表中。然后提交这些更改，把它们保存到数据库中。最后，我们关闭与数据库的连接。</p><h2>用 Chain 查询数据库</h2><p>因为LangChain的数据库查询功能较新，目前还处于实验阶段，因此，需要先安装langchain-experimental包，这个包含有实验性的LangChain新功能。</p><pre><code class=\"language-plain\">pip install langchain-experimental\n</code></pre><p>下面，我们就开始通过SQLDatabaseChain来查询数据库。代码如下：</p><pre><code class=\"language-plain\"># 导入langchain的实用工具和相关的模块\nfrom langchain.utilities import SQLDatabase\nfrom langchain.llms import OpenAI\nfrom langchain_experimental.sql import SQLDatabaseChain\n\n# 连接到FlowerShop数据库（之前我们使用的是Chinook.db）\ndb = SQLDatabase.from_uri(\"sqlite:///FlowerShop.db\")\n\n# 创建OpenAI的低级语言模型（LLM）实例，这里我们设置温度为0，意味着模型输出会更加确定性\nllm = OpenAI(temperature=0, verbose=True)\n\n# 创建SQL数据库链实例，它允许我们使用LLM来查询SQL数据库\ndb_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True)\n\n# 运行与鲜花运营相关的问题\nresponse = db_chain.run(\"有多少种不同的鲜花？\")\nprint(response)\n\nresponse = db_chain.run(\"哪种鲜花的存货数量最少？\")\nprint(response)\n\nresponse = db_chain.run(\"平均销售价格是多少？\")\nprint(response)\n\nresponse = db_chain.run(\"从法国进口的鲜花有多少种？\")\nprint(response)\n\nresponse = db_chain.run(\"哪种鲜花的销售量最高？\")\nprint(response)\n</code></pre><p>这里，我们导入必要的LangChain模块，然后连接到FlowerShop数据库，初始化OpenAI的LLM实例。之后用SQLDatabaseChain来创建一个从LLM到数据库的链接。</p><p>最后，用db_chain.run()方法来查询多个与鲜花运营相关的问题，Chain的内部会把这些自然语言转换为SQL语句，并查询数据库表，得到查询结果之后，又通过LLM把这个结果转换成自然语言。</p><p>因此，Chain的输出结果是我们可以理解的，也是可以直接传递给Chatbot的人话。</p><p>输出如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/04/aa/04b4de7c9fd93a98cc58e6de2f8aaaaa.jpg?wh=1535x1488\" alt=\"\"></p><p>SQLDatabaseChain调用大语言模型，完美地完成了从自然语言（输入）到自然语言（输出）的新型SQL查询。</p><h2>用 Agent 查询数据库</h2><p>除了通过Chain完成数据库查询之外，LangChain 还可以通过SQL Agent来完成查询任务。相比SQLDatabaseChain，使用 SQL 代理有一些优点。</p><ul>\n<li>它可以根据数据库的架构以及数据库的内容回答问题（例如它会检索特定表的描述）。</li>\n<li>它具有纠错能力，当执行生成的查询遇到错误时，它能够捕获该错误，然后正确地重新生成并执行新的查询。</li>\n</ul><p>LangChain使用create_sql_agent函数来初始化代理，通过这个函数创建的SQL代理包含SQLDatabaseToolkit，这个工具箱中包含以下工具：</p><ul>\n<li>创建并执行查询</li>\n<li>检查查询语法</li>\n<li>检索数据表的描述</li>\n</ul><p>在这些工具的辅助之下，代理可以趋动LLM完成SQL查询任务。代码如下：</p><pre><code class=\"language-plain\">from langchain.utilities import SQLDatabase\nfrom langchain.llms import OpenAI\nfrom langchain.agents import create_sql_agent\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\nfrom langchain.agents.agent_types import AgentType\n\n# 连接到FlowerShop数据库\ndb = SQLDatabase.from_uri(\"sqlite:///FlowerShop.db\")\nllm = OpenAI(temperature=0, verbose=True)\n\n# 创建SQL Agent\nagent_executor = create_sql_agent(\n&nbsp; &nbsp; llm=llm,\n&nbsp; &nbsp; toolkit=SQLDatabaseToolkit(db=db, llm=llm),\n&nbsp; &nbsp; verbose=True,\n&nbsp; &nbsp; agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n)\n\n# 使用Agent执行SQL查询\n\nquestions = [\n&nbsp; &nbsp; \"哪种鲜花的存货数量最少？\",\n&nbsp; &nbsp; \"平均销售价格是多少？\",\n]\n\nfor question in questions:\n&nbsp; &nbsp; response = agent_executor.run(question)\n&nbsp; &nbsp; print(response)\n</code></pre><p>问题1的输出如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/97/18/97bd63f7bf63eb90a33eb88829a3d118.jpg?wh=2212x1375\" alt=\"\"></p><p>问题2的输出如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/74/3b/749ddf06803b961a16856494c33a163b.jpg?wh=2219x1343\" alt=\"\"></p><p>可以看到，和Chain直接生成SQL语句不同，代理会使用 ReAct 风格的提示。首先，它思考之后，将先确定第一个action是使用工具 sql_db_list_tables，然后观察该工具所返回的表格，思考后再确定下一个 action是sql_db_schema，也就是创建SQL语句，逐层前进，直到得到答案。</p><h2>总结时刻</h2><p>今天的内容很容易理解，又很开脑洞。我最想强调的，仍然是从“告诉计算机要做什么”的编程范式向“告诉计算机我们想要什么”的范式的转变。</p><p>这种转变具有深远的意义。</p><ol>\n<li>更大的可达性：不再需要深入的技术知识或特定的编程背景。这意味着非技术人员，比如业务分析师、项目经理甚至是终端用户，都可以直接与数据交互。</li>\n<li>高效率与生产力：传统的编程方法需要大量的时间和努力，尤其是在复杂的数据操作中。自然语言处理和理解能够显著减少这种负担，使得复杂的数据操作变得更加直观。</li>\n<li>错误的减少：许多编程错误源于对特定语法或结构的误解，通过使用自然语言，这些源于误解的错误将大大减少。</li>\n<li>人与机器的紧密结合：在这种新范式下，机器更像是人类的合作伙伴，而不仅仅是一个工具。它们可以理解我们的需求，并为我们提供解决方案，而无需我们明确指导每一步。</li>\n</ol><p>但这种转变也带来了挑战。</p><ol>\n<li>模糊性的问题：自然语言本身是模糊的，机器必须能够准确地解释这种模糊性，并在必要时寻求澄清。</li>\n<li>对现有系统的依赖：虽然自然语言查询看起来很有吸引力，但许多现有系统可能不支持或不兼容这种新范式。</li>\n<li>过度依赖：如果过于依赖机器为我们做决策，那么我们可能会失去对数据的深入了解和对结果的质疑。</li>\n</ol><p>我们正处于一个技术变革的时刻，自然语言与编程之间的界限正在消失。对于那些愿意接受和采纳这种新范式的人来说，未来充满了无限的可能性。</p><h2>思考题</h2><ol>\n<li>LangChain中用Chain和Agent来查询数据库，这两种方式有什么异同？</li>\n<li>你能否深入上面这两种方法的代码，看一看它们的底层实现。尤其是要看LangChain是如何做提示工程，指导模型生成 SQL 代码的。</li>\n</ol><p>期待在留言区看到你的分享，如果你觉得内容对你有帮助，也欢迎分享给有需要的朋友！最后如果你学有余力，可以进一步学习下面的延伸阅读。</p><h2>延伸阅读</h2><ol>\n<li>文档：LangChain中关于数据库接口的<a href=\"https://python.langchain.com/docs/modules/chains/popular/sqlite\">官方文档</a></li>\n<li>工具：上面的文档中提到了 <a href=\"https://docs.smith.langchain.com/\">LangSmith</a> 工具，用于调试、测试和评估LangChain开发的LLM应用程序</li>\n</ol>","neighbors":{"left":{"article_title":"15｜检索增强生成：通过RAG助力鲜花运营","id":712147},"right":{"article_title":"17｜回调函数：在AI应用中引入异步通信机制","id":713685}},"comments":[{"had_liked":false,"id":383165,"user_name":"远游","can_delete":false,"product_type":"c1","uid":2103322,"ip_address":"北京","ucode":"73792ED128D57C","user_header":"https://static001.geekbang.org/account/avatar/00/20/18/1a/5f36bb6e.jpg","comment_is_top":false,"comment_ctime":1698584084,"is_pvip":false,"replies":[{"id":139607,"content":"对，可以跑一下复杂场景试试。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1698771291,"ip_address":"瑞士","comment_id":383165,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"Chain 和 Agent 来查询数据库，这两种方式有什么异同？\n高铁上，没有环境运行查看Prompt，以下靠猜哈\n1、Chain采用一轮对话得到结果，意味着如果表多时，会发送很多表的schema到llm，一个是浪费token，一个是可能超长。\n2、Agent采用ReAct方式逐步推理执行，多轮对话得到结果，一个是准确性高，一个是只需将上轮对话推理出来的需要的表的schema发送到服务端，节省token的同时避免token超出。\n这引起了另外一个极端场景的思考，如果需要3表甚至更多表联查，且这3表都有上百个字段（在大型业务系统如ERP这并不夸张），可能还是会导致token超长。\n\n等有环境跑一下看看Prompt和对话轮次验证一下猜想~","like_count":5,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630679,"discussion_content":"对，可以跑一下复杂场景试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698771292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382613,"user_name":"even","can_delete":false,"product_type":"c1","uid":1526343,"ip_address":"广东","ucode":"2EDE76B1F80F33","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIfCY2mvbZ2Po4efYBhMJPacb9mlOicNI6Us4ph3ianrkGlUcop8ZlzN6QiaDrnvFcNeaAfwP7XAv5fw/132","comment_is_top":false,"comment_ctime":1697677463,"is_pvip":false,"replies":[{"id":139454,"content":"这个问题同学问了两次。可惜我也不是数据库方面的专家。我试着问LLM，给出的回答如下：\n1. 使用多数据库查询工具。一些ORM框架如SQLAlchemy支持跨数据库查询。或者可以使用像Ditto这样的多数据库查询工具。\n2. 将不同数据库的数据同步到一个数据库,然后在一个数据库中进行查询。可以使用工具实现数据库之间的数据同步。\n3. 使用消息队列进行异步查询。将查询任务发布到消息队列,不同数据库各自监听并查询,最后聚合结果。\n4. 查询服务化。将每个数据库封装为查询服务,在应用中调用这些服务然后聚合结果。\n因为没有相关经验，我并不知道上面的答案有多大帮助。希望有经验的同学帮助回答一下。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1698142218,"ip_address":"瑞士","comment_id":382613,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，你好。请问如何对多数据库的多表进行查询，这块的工作方便详细介绍下吗？","like_count":5,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630160,"discussion_content":"这个问题同学问了两次。可惜我也不是数据库方面的专家。我试着问LLM，给出的回答如下：\n1. 使用多数据库查询工具。一些ORM框架如SQLAlchemy支持跨数据库查询。或者可以使用像Ditto这样的多数据库查询工具。\n2. 将不同数据库的数据同步到一个数据库,然后在一个数据库中进行查询。可以使用工具实现数据库之间的数据同步。\n3. 使用消息队列进行异步查询。将查询任务发布到消息队列,不同数据库各自监听并查询,最后聚合结果。\n4. 查询服务化。将每个数据库封装为查询服务,在应用中调用这些服务然后聚合结果。\n因为没有相关经验，我并不知道上面的答案有多大帮助。希望有经验的同学帮助回答一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698142218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1383930,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1d/fa/89d625ed.jpg","nickname":"滴滴答滴滴答","note":"","ucode":"561C8765FC6C69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636737,"discussion_content":"这个他应该是要问需要多表查询的时候Agent该如何处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706854936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382465,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1464199,"ip_address":"湖南","ucode":"854500026E2187","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhuGLVRYZibOTfMumk53Wn8Q0Rkg0o6DzTicbibCq42lWQoZ8lFeQvicaXuZa7dYsr9URMrtpXMVDDww/132","comment_is_top":false,"comment_ctime":1697424150,"is_pvip":false,"replies":[{"id":139295,"content":"同学说的对哈，这个功能只是LangChain的实验性功能的一部分。说白了，是探索性的，不是部署到生产系统的功能。\nLangChain在GitHub上已经做了说明了（如下）。当然了，LangChain作为一个LLM框架，什么功能都想支持，也从风险投资公司红杉资本那里筹集了超过 2000 万美元的资金，估值至少为 2 亿美元。LangChain的野心还是很大的，不够功能做的好不好，也要先有这个功能。包括RAG，也有竞争者的。我们作为开发人员，特定的功能可以随意选择更好的框架。\n🚨 2023 年 7 月 28 日对选择链 (SQLDatabase) 进行的重大更改为了变得langchain更精简、更安全，我们正在将一些链转移到langchain_experimental. 此迁移已经开始，但我们将保持向后兼容直到 7 月 28 日。在那一天，我们将从 中删除功能langchain。请在此处阅读有关动机和进展的更多信息。在此处阅读如何迁移您的代码。\n🚨Breaking Changes for select chains (SQLDatabase) on 7&#47;28&#47;23\nIn an effort to make langchain leaner and safer, we are moving select chains to langchain_experimental. This migration has already started, but we are remaining backwards compatible until 7&#47;28. On that date, we will remove functionality from langchain. Read more about the motivation and the progress here. Read how to migrate your code here.","user_name":"作者回复","user_name_real":"作者","uid":1809833,"ctime":1697451789,"ip_address":"瑞士","comment_id":382465,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，请教一个问题，一般的基础模型都具备一定的SQL能力，感觉用SQLDatabaseChain&#47;SQL Agent并没有什么优势，老师能否帮忙解答下，为啥还会出现类SQLDatabaseChain&#47;SQL Agent等工具来解决文本转SQL的能力？","like_count":2,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629632,"discussion_content":"同学说的对哈，这个功能只是LangChain的实验性功能的一部分。说白了，是探索性的，不是部署到生产系统的功能。\nLangChain在GitHub上已经做了说明了（如下）。当然了，LangChain作为一个LLM框架，什么功能都想支持，也从风险投资公司红杉资本那里筹集了超过 2000 万美元的资金，估值至少为 2 亿美元。LangChain的野心还是很大的，不够功能做的好不好，也要先有这个功能。包括RAG，也有竞争者的。我们作为开发人员，特定的功能可以随意选择更好的框架。\n🚨 2023 年 7 月 28 日对选择链 (SQLDatabase) 进行的重大更改为了变得langchain更精简、更安全，我们正在将一些链转移到langchain_experimental. 此迁移已经开始，但我们将保持向后兼容直到 7 月 28 日。在那一天，我们将从 中删除功能langchain。请在此处阅读有关动机和进展的更多信息。在此处阅读如何迁移您的代码。\n🚨Breaking Changes for select chains (SQLDatabase) on 7/28/23\nIn an effort to make langchain leaner and safer, we are moving select chains to langchain_experimental. This migration has already started, but we are remaining backwards compatible until 7/28. On that date, we will remove functionality from langchain. Read more about the motivation and the progress here. Read how to migrate your code here.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697451789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383831,"user_name":"悟尘","can_delete":false,"product_type":"c1","uid":2189310,"ip_address":"北京","ucode":"4E7E854340D3A4","user_header":"https://static001.geekbang.org/account/avatar/00/21/67/fe/5d17661a.jpg","comment_is_top":false,"comment_ctime":1699773236,"is_pvip":false,"replies":[{"id":140054,"content":"嗯嗯，很好的问题。这些内容可以通过Prompt来输入给LLM。另一个思路是把大量的信息用向量的形式存储在Vector Store里面，需要的时候摘出来。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1699928645,"ip_address":"瑞士","comment_id":383831,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，如何使LLM理解我当前的表的字段以及表关系呢？用什么方式告诉LLM，从而使它能够理解我的业务背景？","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631727,"discussion_content":"嗯嗯，很好的问题。这些内容可以通过Prompt来输入给LLM。另一个思路是把大量的信息用向量的形式存储在Vector Store里面，需要的时候摘出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699928645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382641,"user_name":"even","can_delete":false,"product_type":"c1","uid":1526343,"ip_address":"广东","ucode":"2EDE76B1F80F33","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIfCY2mvbZ2Po4efYBhMJPacb9mlOicNI6Us4ph3ianrkGlUcop8ZlzN6QiaDrnvFcNeaAfwP7XAv5fw/132","comment_is_top":false,"comment_ctime":1697709991,"is_pvip":false,"replies":[{"id":139452,"content":"原理和步骤是完全一样的呀。如何处理单表，就一样的去问LLM在多表中查询就好了。注意，这个功能目前只是实验性质的，不能真正的取代SQL语句。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1698141999,"ip_address":"瑞士","comment_id":382641,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，请问多数据库，多表如何去做，有没有相关的最佳实践和参考资料","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630158,"discussion_content":"原理和步骤是完全一样的呀。如何处理单表，就一样的去问LLM在多表中查询就好了。注意，这个功能目前只是实验性质的，不能真正的取代SQL语句。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698142000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382455,"user_name":"陈东","can_delete":false,"product_type":"c1","uid":2213995,"ip_address":"广西","ucode":"FCDE6D237CC621","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ge7uhlEVxicQT73YuomDPrVKI8UmhqxKWrhtO5GMNlFjrHWfd3HAjgaSribR4Pzorw8yalYGYqJI4VPvUyPzicSKg/132","comment_is_top":false,"comment_ctime":1697381707,"is_pvip":true,"replies":[{"id":139285,"content":"同学好。多轮对话的实现主要是依靠总结和记忆机制，\n我们的最后一个实战会给出多轮对话的示例和部署。当然你也可以用本地缓存先前对话的方式设计出更复杂的Chatbot系统。我们这里没有过多深入研究这个部分。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1697425564,"ip_address":"瑞士","comment_id":382455,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师好。如何本地化部署langchain和agent，可以随时交互呢？课程中都是在一个回合的对话，如何展开持续的多个对话？谢谢老师的指引和解答。","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629598,"discussion_content":"同学好。多轮对话的实现主要是依靠总结和记忆机制，\n我们的最后一个实战会给出多轮对话的示例和部署。当然你也可以用本地缓存先前对话的方式设计出更复杂的Chatbot系统。我们这里没有过多深入研究这个部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697425564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383832,"user_name":"悟尘","can_delete":false,"product_type":"c1","uid":2189310,"ip_address":"北京","ucode":"4E7E854340D3A4","user_header":"https://static001.geekbang.org/account/avatar/00/21/67/fe/5d17661a.jpg","comment_is_top":false,"comment_ctime":1699773406,"is_pvip":false,"replies":[{"id":140055,"content":"我非专家，随便写写，抛砖引玉：\n（下面内容含有GPT辅助生成）\n1. 数据准备与索引建立：\n首先，确保你有一个结构化的数据集，它可以是文本、图像或其他形式的数据。使用Elasticsearch建立数据索引。这涉及到定义数据的映射（mapping）和索引（indexing）过程。\n2. 集成LangChain与ES：\nLangChain可以将语言模型的输出作为ES查询的输入。在LangChain中，配置ES的连接和相关的查询设置。 ----- 这里可能需要进一步看LangChain的文档\n3. 定义搜索、推荐和排序逻辑：\n搜索：定义如何将用户的查询转换为ES可理解的格式。这可能涉及到使用语言模型来解析查询的意图和上下文。\n推荐：基于指定的关键词，使用语言模型来生成与这些关键词相关的查询，然后将这些查询发送到ES。\n排序：定义一个排序逻辑，可能基于搜索结果的相关性、日期、用户偏好等因素。\n4. 集成语言模型进行增强处理：\n使用LangChain调用大型语言模型来增强搜索和推荐的效果。这可能包括理解复杂的查询、生成更精确的关键词等。\n\n上述步骤具体是否合适，我们可以进一步讨论。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1699929094,"ip_address":"瑞士","comment_id":383832,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，我想使用上述范式，使用LangChain框架让ES和LLM结合，然后实现搜索（根据指定条件）、推荐（根据指定关键词）、排序的功能，该分哪几个步骤实现？","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631730,"discussion_content":"我非专家，随便写写，抛砖引玉：\n（下面内容含有GPT辅助生成）\n1. 数据准备与索引建立：\n首先，确保你有一个结构化的数据集，它可以是文本、图像或其他形式的数据。使用Elasticsearch建立数据索引。这涉及到定义数据的映射（mapping）和索引（indexing）过程。\n2. 集成LangChain与ES：\nLangChain可以将语言模型的输出作为ES查询的输入。在LangChain中，配置ES的连接和相关的查询设置。 ----- 这里可能需要进一步看LangChain的文档\n3. 定义搜索、推荐和排序逻辑：\n搜索：定义如何将用户的查询转换为ES可理解的格式。这可能涉及到使用语言模型来解析查询的意图和上下文。\n推荐：基于指定的关键词，使用语言模型来生成与这些关键词相关的查询，然后将这些查询发送到ES。\n排序：定义一个排序逻辑，可能基于搜索结果的相关性、日期、用户偏好等因素。\n4. 集成语言模型进行增强处理：\n使用LangChain调用大型语言模型来增强搜索和推荐的效果。这可能包括理解复杂的查询、生成更精确的关键词等。\n\n上述步骤具体是否合适，我们可以进一步讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699929094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383720,"user_name":"Geek_7ee455","can_delete":false,"product_type":"c1","uid":1527581,"ip_address":"浙江","ucode":"76C69F26B0F653","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/270T9KAFd4oCxXXB1giaMDaJuTQVib8gPt77VkM5dbS3hW60kwTNnxMYpVibwWVdnASCrymBbwT7HI77URia0KUylw/132","comment_is_top":false,"comment_ctime":1699516906,"is_pvip":false,"replies":[{"id":140193,"content":"这就根据业务场景需要来设计你的Pipeline，同学给个需求看看？","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1700583105,"ip_address":"瑞士","comment_id":383720,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师这种sql查询的问答和文档问答怎么结合起来用呢","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632242,"discussion_content":"这就根据业务场景需要来设计你的Pipeline，同学给个需求看看？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700583105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382954,"user_name":"Monin","can_delete":false,"product_type":"c1","uid":3144503,"ip_address":"上海","ucode":"AA6C4C4F19FA14","user_header":"https://static001.geekbang.org/account/avatar/00/2f/fb/37/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1698227050,"is_pvip":false,"replies":[{"id":139529,"content":"LangChain给出的日志里面应该是把每一个LLM生成的SQL语句都输出了的。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1698381556,"ip_address":"瑞士","comment_id":382954,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师  咨询下 对于一些业务表如mysql等含有相似业务语义的表很多  在LLM执行业务SQL时有时会定位到错误的表  有什么好的解法让agent既返回最终的结果 同时也把执行的SQL语句也返回？","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630391,"discussion_content":"LangChain给出的日志里面应该是把每一个LLM生成的SQL语句都输出了的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698381556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":3144503,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/fb/37/791d0f5e.jpg","nickname":"Monin","note":"","ucode":"AA6C4C4F19FA14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":630392,"discussion_content":"是的  日志会显示出来  但我用Gradio做的客户端只返回来了结果   也想把执行日志里面的SQL语句作为答案的一部分进行返回  如何实现？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698382036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630391,"ip_address":"上海","group_id":0},"score":630392,"extra":""},{"author":{"id":1824198,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/4OnibLGuicHU7yMNJzWKt5ibg970tMLkBTSGa8eXau5spH3b8iaT0bA9VAnmB1lu4X6O3ic8G8ZlANmN3dg1JJMzX5g/132","nickname":"段星星","note":"","ucode":"8A6314B58EE047","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3144503,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/fb/37/791d0f5e.jpg","nickname":"Monin","note":"","ucode":"AA6C4C4F19FA14","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637447,"discussion_content":"你解决了这个问题吗？我也遇到相同的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708503924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630392,"ip_address":"广东","group_id":0},"score":637447,"extra":""}]},{"author":{"id":2189310,"avatar":"https://static001.geekbang.org/account/avatar/00/21/67/fe/5d17661a.jpg","nickname":"悟尘","note":"","ucode":"4E7E854340D3A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631580,"discussion_content":"如果在LLM执行业务SQL时有时会定位到错误的表，建议通过优化promt去提升LLM定位的准确度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699775275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393714,"user_name":"yanyu-xin","can_delete":false,"product_type":"c1","uid":1899757,"ip_address":"广东","ucode":"3AA389F9E4C236","user_header":"","comment_is_top":false,"comment_ctime":1724683472,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"我用通义千问模型 qwen-turbo 代替 OpenAI 。代码运行基本可以。只是在运行 response = db_chain.run(&quot;有多少种的鲜花？&quot;) 时:\n\n #1.  OpenAI 能将“多少种”解答为不同 Name 的花，是&quot; SQLQuery:SELECT COUNT(DISTINCT Name) FROM Flowers &quot;，查询是有5种不同的鲜花。\n\n#2.  而千问模型将 “多少种”解答为不同 Type  的花。导致的查询结果是 ：\n\n&gt; Entering new SQLDatabaseChain chain...\n有多少种不同的鲜花？\nSQLQuery:SELECT COUNT(DISTINCT Type) FROM Flowers;\nSQLResult: [(1,)]\nAnswer:有1种不同的鲜花。\n&gt; Finished chain.\n有1种不同的鲜花。\n\n#3.  这就是课程里老师说的“模糊性的问题：自然语言本身是模糊的，机器必须能够准确地解释这种模糊性，并在必要时寻求澄清”。用于机器只是直接使用“种”对应的英语“Type”，而没有理解语言中“种”的实际含义还包括了不同 Name 的。\n#4.  这就是老师说的“过度依赖：如果过于依赖机器为我们做决策，那么我们可能会失去对数据的深入了解和对结果的质疑”。如果我没有校对数据，简单套用了机器结果，没有深入思考就会出现错误。","like_count":1},{"had_liked":false,"id":389587,"user_name":"冬瓜","can_delete":false,"product_type":"c1","uid":1058708,"ip_address":"福建","ucode":"8685F458A33340","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/94/f620a3a9.jpg","comment_is_top":false,"comment_ctime":1712938035,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"大模型怎么生成这个sql语句的呢。具体的说，大模型怎么知道要访问数据库中的哪张表，使用哪个字段呢。","like_count":1},{"had_liked":false,"id":382390,"user_name":"黄佳","can_delete":false,"product_type":"c1","uid":1809833,"ip_address":"瑞士","ucode":"8EC41D2EAB0E3C","user_header":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","comment_is_top":false,"comment_ctime":1697169800,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"代码已经更新，https:&#47;&#47;github.com&#47;huangjia2019&#47;langchain\n祝同学们学习愉快，多多分享LangChain学习心得感悟。众人拾材火焰高！\n","like_count":1},{"had_liked":false,"id":395306,"user_name":"金色旭光","can_delete":false,"product_type":"c1","uid":1228177,"ip_address":"江苏","ucode":"4A952B2725CBB3","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/91/80398dcc.jpg","comment_is_top":false,"comment_ctime":1730171157,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"Agent 提示词 （部分截断，超长限制）：\nYou are an agent designed to interact with a SQL database.\nGiven an input question, create a syntactically correct sqlite query to run, then look at the results of the query and return the answer.\nUnless the user specifies a specific number of examples they wish to obtain, always limit your query to at most 10 results.You can order the results by a relevant column to return the most interesting examples in the database.\nNever query for all the columns from a specific table, only ask for the relevant columns given the question.\nYou have access to tools for interacting with the database.\n\n\nsql_db_query - Input to this tool is a detailed and correct SQL query, output is a result from the database. \nsql_db_schema - Input to this tool is a comma-separated list of tables, output is the schema and sample rows for those tables. \nsql_db_list_tables - Input is an empty string, output is a comma-separated list of tables in the database.\nsql_db_query_checker - Use this tool to double check if your query is correct before executing it. \n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take, should be one of [sql_db_query, sql_db_schema, sql_db_list_tables, sql_db_query_checker]\nAction Input: the input to the action\nObservation: the result of the action\n... (this Thought&#47;Action&#47;Action Input&#47;Observation can repeat N times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin!\n\nQuestion: 哪种鲜花的存货数量最少？\nThought: I should look at t the database to see what I can query.  Then I should query the schema of the most relevant tables.&quot;","like_count":0},{"had_liked":false,"id":395305,"user_name":"金色旭光","can_delete":false,"product_type":"c1","uid":1228177,"ip_address":"江苏","ucode":"4A952B2725CBB3","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/91/80398dcc.jpg","comment_is_top":false,"comment_ctime":1730171057,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"Chain 提示词：\n&quot;You are a SQLite expert. Given an input question, first create a syntactically correct SQLite query to run, then look at the results of the query and return the answer to the input question.\nUnless the user specifies in the question a specific number of examples to obtain, query for at most 5 results using the LIMIT clause as per SQLite. You can order the results to return the most informative data in the database.\nNever query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (\\&quot;) to denote them as delimited identifiers.\nPay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\nPay attention to use date(&#39;now&#39;) function to get the current date, if the question involves \\&quot;today\\&quot;.\n\nUse the following format:\n\nQuestion: Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer: Final answer here\nOnly use the following tables:\n\nCREATE TABLE \\&quot;Flowers\\&quot; (\n\\t\\&quot;ID\\&quot; INTEGER, \\t\\&quot;Name\\&quot; TEXT NOT NULL, \n\\t\\&quot;Type\\&quot; TEXT NOT NULL, \n\\t\\&quot;Source\\&quot; TEXT NOT NULL, \n\\t\\&quot;PurchasePrice\\&quot; REAL, \n\\t\\&quot;SalePrice\\&quot; REAL, \n\\t\\&quot;StockQuantity\\&quot; INTEGER, \n\\t\\&quot;SoldQuantity\\&quot; INTEGER, \n\\t\\&quot;ExpiryDate\\&quot; DATE,\n\\t\\&quot;Description\\&quot; TEXT, \n\\t\\&quot;EntryDate\\&quot; DATE DEFAULT CURRENT_DATE, \n\\tPRIMARY KEY (\\&quot;ID\\&quot;)\n)\n\n&#47;*\n3 rows from Flowers table:\nID\\tName\\tType\\tSource\\tPurchasePrice\\tSalePrice\\tStockQuantity\\tSoldQuantity\\tExpiryDate\\tDescription\\tEntryDate\n1\\tRose\\tFlower\\tFrance\\t1.2\\t2.5\\t100\\t10\\t2023-12-31\\tA beautiful red rose\\t2024-10-28\n2\\tTulip\\tFlower\\tNetherlands\\t0.8\\t2.0\\t150\\t25\\t2023-12-31\\tA colorful tulip\\t2024-10-28\n3\\tLily\\tFlower\\tChina\\t1.5\\t3.0\\t80\\t5\\t2023-12-31\\tAn elegant white lily\\t2024-10-28\n*&#47;\n\nQuestion: 有多少种不同的鲜花\n\nSQLQuery:&quot;\n","like_count":0},{"had_liked":false,"id":395304,"user_name":"金色旭光","can_delete":false,"product_type":"c1","uid":1228177,"ip_address":"江苏","ucode":"4A952B2725CBB3","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/91/80398dcc.jpg","comment_is_top":false,"comment_ctime":1730171037,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"Chain 和 Agent 提示词的主要区别在于：\n1. Chain 默认的行为就是将表结构插入提示词\n2. Agent 通过ReAct的思考过程获取表结构插入提示词\n","like_count":0},{"had_liked":false,"id":393371,"user_name":"勤小码","can_delete":false,"product_type":"c1","uid":1071860,"ip_address":"北京","ucode":"E9813F165F5EA5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKr3ZPRg8ECLpOkfpN1ny8HGV8DIkQ0fo4blKFSQgK0x76C5WiaxFXQpoIqTHWEV3bia603bBmtwZcg/132","comment_is_top":false,"comment_ctime":1723613856,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"佳哥好。使用 chain 和 agent 查询 DB 时发现LLM输出的内容不稳定或有SQL错误，会造成整个流程的异常。这种情况下通常应该如何处理？如果是生产环境中存在这样的问题，就不能稳定对外提供服务，那么此功能就失去意义了。\n\n本地环境：\nlangchain == 0.2.12\nOllama 部署 llama3.1:8b 和 qwen2:7b\n\n产生的错误如：\n# 请求平均价格时\n&gt; Entering new SQLDatabaseChain chain...\n平均销售价格是多少？\nSQLQuery:SELECT AVG(&quot;SalePrice&quot;) FROM &quot;Flowers\n\n# 求法国进口鲜花种类数时\n&gt; Entering new SQLDatabaseChain chain...\n从法国进口的鲜花有多少种？\nSQLQuery:SELECT COUNT(&quot;ID&quot;) FROM Flowers WHERE &quot;Source&quot; = &#39;France\n\n# 平均销售价格是多少？\nValueError: An output parsing error occurred. In order to pass this error back to the agent and have it try again, pass `handle_parsing_errors=True` to the AgentExecutor. This is the error: Parsing LLM output produced both a final answer and a parse-able action:: I know the final answer by looking at the schema of Flowers table and relevant columns.\n\nFinal Answer: The average sale price is calculated as follows:\n\nAverage Sale Price = Sum(SalePrice) &#47; Count(ID)\n\nTo get this value, I can query the &#39;SalePrice&#39; column in the &#39;Flowers&#39; table:\n\nAction: sql_db_query_checker\nAction Input: \n```\nSELECT AVG(SalePrice)\nFROM Flowers;\n``\n","like_count":0},{"had_liked":false,"id":392606,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1721288741,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":2,"score":3,"product_id":100617601,"comment_content":"第16讲打卡~\n特别认同老师的观点：自然语言和编程语言之间的界限正在消失，未来也许不再需要程序员这个职业，或者说每个人都可以是程序员~","like_count":0},{"had_liked":false,"id":392389,"user_name":"孙志惠","can_delete":false,"product_type":"c1","uid":1103449,"ip_address":"浙江","ucode":"04F0AAF12EA847","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/59/6b7ce4f0.jpg","comment_is_top":false,"comment_ctime":1720767757,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"老师，我看sqlDatabase目前不支持Doris，如果要使用查询Doris的话，需要自己如何操作呢","like_count":0},{"had_liked":false,"id":389590,"user_name":"Geek_db658d","can_delete":false,"product_type":"c1","uid":3875317,"ip_address":"天津","ucode":"9456D047795B6F","user_header":"","comment_is_top":false,"comment_ctime":1712977808,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"老师 我们是否可以分别用两个大模型，一个微调后专门生成sql，一个自然对话模型将sql查询结果返回。用transform链包裹SQLDatabaseChain.from_llm或者agent，再用sequencial链顺序调用后续的返回自然语言","like_count":0}]}