{"id":12772,"title":"15 | 构建检测，无规矩不成方圆","content":"<p>在这个专栏的第5篇文章《手把手教你依赖管理》中，我介绍了构建 Java 项目的一些最佳实践，同时也给你抛出了一个问题：如果用户偷懒不遵循这些规范该怎么办？</p>\n<p>所谓没有规矩不成方圆，构建是持续交付过程中非常重要的一步，而好的构建检测则可以直接提升交付产物的质量，使持续交付的流水线又快又稳。所以，也就有了 Maven 构建中的大杀器：Maven Enforcer 插件。</p>\n<h2>什么是 Maven Enforcer 插件？</h2>\n<p>Maven Enforcer 插件提供了非常多的通用检查规则，比如检查 JDK 版本、检查 Maven 版本、检查依赖版本，等等。下图所示就是一个简单的使用示例。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/cc/86/cc332605af04d20bda53d44f8d16cc86.png?wh=614*480\" alt=\"\" /></p>\n<p>上述的配置会在构建时（准确的说是在 validate 时）完成三项检查：</p>\n<ul>\n<li>requireMavenVersion检查 Maven 版本必须大于 3.3.9；</li>\n<li>requireJavaVersion检查 JDK 版本必须大于等于 1.9；</li>\n<li>requireOS检查 OS 必须是 Windows 系统。</li>\n</ul>\n<p>如果你使用 Java 1.8， Maven 3.3.3， 在 Linux 上构建， 便会出现如下的错误：</p>\n<ul>\n<li>Rule 0: org.apache.maven.plugins.enforcer.RequireMavenVersion failed with message: Detected Maven Version: 3.3.3 is not in the allowed range 3.3.9.</li>\n<li>Rule 1: org.apache.maven.plugins.enforcer.RequireJavaVersion failed with message: Detected JDK Version: 1.8.0-77 is not in the allowed range 1.9.</li>\n<li>Rule 2: org.apache.maven.plugins.enforcer.RequireOS failed with message: OS Arch: amd64 Family: unix Name: linux Version: 3.16.0-43-generic is not allowed by Family=windows</li>\n</ul><!-- [[[read_end]]] -->\n<p>从而导致构建失败。</p>\n<p>那么，是否有办法在所有应用的构建前都执行Enforcer的检查呢。</p>\n<p>我在专栏的第5篇文章《手把手教你依赖管理》中，也已经介绍了在携程内部，一般 Java 应用的继承树关系，每个项目都必须继承来自技术委员会或公司层面提供的 super-pom。携程在 super-pom 之上又定义了一层 super-rule 的 pom，这个pom 中定义了一系列的 Enforcer 规则。 这样，只要是集成了 super-pom 的项目，就会在构建时自动运行我们所定义的检查。</p>\n<p>也许你会问了， 如果用户不继承 super-pom 是不是就可以跳过这些规则检查了？是的， 继承 super-pom 是规则检查的前提。</p>\n<p>但是，我们不会给用户这样的机会， 因为上线走的都是统一的构建系统。</p>\n<p>构建系统在构建之前会先检查项目的继承树，继承树中必须包含 super-pom， 否则构建失败。并且，构建系统虽然允许用户自定义 Maven 的构建命令，但是会将 Enforcer 相关的参数过滤掉，用户填写的任何关于Enforcer的参数都被视为无效。Enforcer会被强制按照统一标准执行，这样就保证了所有应用编译时都要经过检查。</p>\n<p>因为携程的构建系统只提供几个版本的 Java 和 Maven，并且操作系统是统一的 Linux CentOS版本，所以就不需要使用之前例子中提到的三个检查，一定程度的缩小标准化范围，也是有效的质量保证手段。</p>\n<p>了解了Maven Enforcer插件，我再从Maven Enforcer内置的规则、自定义的Enforcer检查规则，以及构建依赖检查服务这三个方面，带你一起看看构建监测的“豪华套餐”，增强你对交付产物的信心。</p>\n<h2>丰富的内置的 Enforcer 规则</h2>\n<p>Maven Enforcer 提供了非常丰富的内置检查规则，在这里，我给你重点介绍一下bannedDependencies 规则、dependencyConvergence 规则，和banDuplicateClasses 规则。</p>\n<p><strong>第一，bannedDependencies 规则</strong></p>\n<p><strong>该规则表示禁止使用某些依赖，或者某些依赖的版本</strong>，使用示例：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/27/ba/27f936902309c3ee2e71a8dd007018ba.png?wh=814*211\" alt=\"\" /></p>\n<p>该代码检查的逻辑是，只允许使用版本大于等于 1.8.0 的 org.slf4j:slf4j-api 依赖，否则将会出现如下错误：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/8f/8b/8feb3a6d98ed61748525dd53dcadf48b.png?wh=781*124\" alt=\"\" /></p>\n<p>bannedDependencies 规则的常见应用场景包括：</p>\n<ol>\n<li>\n<p>当我们知道某个 jar 包的某个版本有严重漏洞时，可以用这种方法禁止用户使用，从而避免被攻击；</p>\n</li>\n<li>\n<p>某个公共组件的依赖必须要大于某个版本时，你也可以使用这个方法禁止用户直接引用不兼容的依赖版本，避免公共组件运行错误。</p>\n</li>\n</ol>\n<p><strong>第二，dependencyConvergence 规则</strong></p>\n<p>在《手把手教你依赖管理》一文中，我介绍了Maven 的依赖仲裁的两个原则：最短路径优先原则和第一声明优先原则。</p>\n<p>但是，Maven 基于这两个原则处理依赖的方式过于简单粗暴。毕竟在一个成熟的系统中，依赖的关系错综复杂，用户很难一个一个地排查所有依赖的关系和冲突，稍不留神便会掉进依赖的陷阱里，这时 dependencyConvergence 就可以粉墨登场了。</p>\n<p><strong>dependencyConvergence规则的作用是： 当项目中的 A 和 B 分别引用了不同版本的C时， Enforce 检查失败。</strong> 下面这个实例，可以帮你理解这个规则的作用。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/ef/d0/ef9194165537330d5d8e0bbc6ce1ded0.png?wh=764*254\" alt=\"\" /></p>\n<p>org.slf4j:slf4j-jdk14:1.6.1依赖了 org.slf4j:slf4j-api:1.6.1， 而 org.slf4j:slf4j-nop:1.6.0依赖了 org.slf4j:slf4j-api:1.6.0，当我们在构建项目时， 便会有如下错误：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e5/8d/e551db93e22b7e1b077025136d9b8f8d.png?wh=769*280\" alt=\"\" /></p>\n<p>这时就需要开发人员介入了，使用 dependecy 的 exclusions 元素排除掉一个不合适的版本。 虽然这会给编程带来一些麻烦， 但是非常必要。因为，我始终认为你应该清楚地知道系统依赖了哪些组件， 尤其是在某些组价发生冲突时，这就更加重要了。</p>\n<p><strong>第三，banDuplicateClasses 规则</strong></p>\n<p><strong>该规则是 Extra Enforcer Rules 提供的，主要目的是检查多个jar 包中是否存在同样命名的 class，如果存在编译便会报错。</strong> 同名 class 若内容不一致，可能会导致 java.lang.NoSuchFieldError，java.lang.NoSuchMethodException 等异常，而且排查起来非常困难，因为人的直觉思维很难定位到重复类这个非显性错误上，例如下面这种情况：</p>\n<p>org.jboss.netty包与io.netty包中都包含一个名为NettyBundleActivator的类，另外还有2个重复类：spring/NettyLoggerConfigurator 和 microcontainer/NettyLoggerConfigurator。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/f2/55/f2a50ca7bc448a6673fb6bef5a925055.png?wh=786*288\" alt=\"\" /></p>\n<p>当激活了 banDuplicateClasses 规则之后，Enforcer检查，便会有如下的报错：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/41/90/417ae44052d9cdf0a1e083910cab1990.png?wh=819*267\" alt=\"\" /></p>\n<p>通常情况下，用户需要排除一个多余的 jar 包来解决这个问题，但有些情况下两个 jar 包都不能被排除，如果只是个别类名冲突了，那么可以通过 ignoreClasses 去忽略冲突的类，类名可以使用通配符（*），如: org.jboss.netty.container.*。</p>\n<p>但是，用户不能随意更改这个配置，因为它必须得到一定的授权，否则随意忽略会产生其他不确定的问题。因此我们将这个插件做了一些改动，通过API来获取 ignoreClasses 的内容。当用户有类似的需求时，可以提交 ignoreClasses ，但必须申请，经过 Java 专家审批之后才可忽略掉。</p>\n<h2>自定义的 Enforcer 检查规则</h2>\n<p>除了上述的官方规则，实际上携程还做了若干个扩展的规则，如：</p>\n<ul>\n<li>\n<p>CheckVersion，用于检查模块的版本号必须是数字三段式，或者带有 SNAPSHOT 的数字三段式；</p>\n</li>\n<li>\n<p>CheckGroupId，用于检查 GroupId 是否符合规范，我们为每个部门都分别指定了GroupId；</p>\n</li>\n<li>\n<p>CheckDistributionManagementRepository，用于检查项目的 distributionManagement 中的 repository 节点，并为每个部门都指定了他们在 Nexus 上面的 repositroy；</p>\n</li>\n<li>\n<p>CheckSubModuleSaveVersion，用于检查子模块版本号是否与父模块版本号一致。</p>\n</li>\n</ul>\n<p>以上，便是携程基于 Maven Enforcer 在构建检查上的一些实践，你可以借鉴使用。</p>\n<p>但是，有时候 Maven Enforcer 也无法满足我们所有的需求，比如，它无法完成非 Java 项目的检查。因此，我们还有一个通用的依赖检查服务。</p>\n<h2>构建依赖检查服务</h2>\n<p>其他语言， 比如 C#，NodeJS 等，没有 Maven Enforcer 这样成熟的工具来做构建时的依赖检查。对于这类语言我们的做法是：构建后，收集该项目所有的依赖及其版本号，将这些数据发送给依赖检查服务 Talos，Talos 根据内置的规则进行依赖检查。Talos是一套携程自研的，独立的，组件依赖检查系统，其中包含的检查逻辑，完全可以自由定义。</p>\n<p>而且，Talos依赖检查的逻辑更新非常灵活，可以直接在平台内使用 Java 代码在线编写检查逻辑，提交后便可实时生效。</p>\n<p>以下是一段 .NET 项目检查逻辑的示例代码：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/3d/95/3db4fbd6d9f1118fa5fb794e972c9d95.png?wh=844*389\" alt=\"\" /></p>\n<p>该逻辑的含义是： 当项目的依赖存在 foo.dll 和 bar.dll 时，bar.dll 的版本号必须大于 1.0.0.0。看， 是不是非常方便快捷通用！</p>\n<p>这样一套组合拳下来，构建检测以及项目依赖的问题已不再那么让人望而生畏了。因此，工欲善其事必先利其器， 好的工具可以解放大量的生产力，最重要的是构建检测后的交付让你我更有信心了。有条不紊的流程与规范，就像一列高速列车下的枕木，时刻保证着整个系统稳定而可靠地推进。</p>\n<h2>总结与实践</h2>\n<p>我围绕着构建检测，和你一起学习并介绍了：</p>\n<ol>\n<li>\n<p>Maven Enforcer 插件可以帮我们更好地完成编译检测；</p>\n</li>\n<li>\n<p>可以使用内置的 Maven Enforcer 规则，覆盖常规检测；</p>\n</li>\n<li>\n<p>可以使用自定义 Maven Enforcer 检查规则的方式，增加版本号规则等的检查；</p>\n</li>\n<li>\n<p>Maven Enforcer 之外，你还可以自己丰富一些例如依赖版本检测这样的服务，以提高检测效果。</p>\n</li>\n</ol>\n<p>Maven Enforcer 提供了非常丰富的内置检查规则，感兴趣的话，你可以通过  <a href=\"https://maven.apache.org/enforcer/enforcer-rules/index.html\">https://maven.apache.org/enforcer/enforcer-rules/index.html</a> 以及 <a href=\"http://www.mojohaus.org/extra-enforcer-rules/\">http://www.mojohaus.org/extra-enforcer-rules/</a> 逐个尝试这些规则，并说说哪些规则是你工作总最最需要的。</p>\n<p>欢迎你给我留言。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":18889,"user_name":"Triton","can_delete":false,"product_type":"c1","uid":1103776,"ip_address":"","ucode":"B6C7C2AEF2B649","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/a0/15c82d8b.jpg","comment_is_top":false,"comment_ctime":1533604196,"is_pvip":false,"replies":[{"id":"6609","content":"一些基本的默认规则就可以了，很多检查是为了预防集成错误的，在多团队，细分工下意义很大","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533691728,"ip_address":"","comment_id":18889,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14418506084","product_id":100009701,"comment_content":"感谢分享，由于本身没有太多持续集成的经验，听上去比较抽象如果是创业公司应该做到那些？","like_count":4,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421673,"discussion_content":"一些基本的默认规则就可以了，很多检查是为了预防集成错误的，在多团队，细分工下意义很大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533691728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52559,"user_name":"玉军","can_delete":false,"product_type":"c1","uid":1019995,"ip_address":"","ucode":"C0719D0170AB87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/5b/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1545436867,"is_pvip":false,"replies":[{"id":"20612","content":"不仅仅是环境的检查，也可以检查依赖，配置管理等任何自定义的内容；已经持续构建的情况下，就不再关注每日构建了；ant比较难做，ant的机制与目前大多数包管理的方式不太一样，更多是文件及目录的引用","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1546669872,"ip_address":"","comment_id":52559,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840404163","product_id":100009701,"comment_content":"这种构建检查大部分都是环境的检查？有没有更深层次的检查？比如构建检查提高每日构建的成功率？同时ant有没有这方面的插件？","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433907,"discussion_content":"不仅仅是环境的检查，也可以检查依赖，配置管理等任何自定义的内容；已经持续构建的情况下，就不再关注每日构建了；ant比较难做，ant的机制与目前大多数包管理的方式不太一样，更多是文件及目录的引用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546669872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19213,"user_name":"吃饱了晒太阳","can_delete":false,"product_type":"c1","uid":1186359,"ip_address":"","ucode":"A516A0A42E2172","user_header":"https://static001.geekbang.org/account/avatar/00/12/1a/37/e171d084.jpg","comment_is_top":false,"comment_ctime":1533710202,"is_pvip":false,"replies":[{"id":"6686","content":"如果远程调用报错的话，可以看下docker的网络配置","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533780115,"ip_address":"","comment_id":19213,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5828677498","product_id":100009701,"comment_content":"遇到个问题想请教下，在服务器上搭建了一个ubuntu docker镜像，里面软件测试都已装好，CI触发脚本测试时候，一直提示redis拒绝连接，调用的脚本也是在容器里的，在容器里执行就可以，但是每次提交触发测试就会提示拒绝连接，是因为什么呢，redis也允许外部连接，是docker网络问题？还请指点","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421740,"discussion_content":"如果远程调用报错的话，可以看下docker的网络配置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533780115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167506,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1577846169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577846169","product_id":100009701,"comment_content":"请问老师，如何检查项目的继承树？","like_count":0},{"had_liked":false,"id":162859,"user_name":"飞毛兔","can_delete":false,"product_type":"c1","uid":1762320,"ip_address":"","ucode":"EC17736F933D16","user_header":"","comment_is_top":false,"comment_ctime":1576625802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576625802","product_id":100009701,"comment_content":"公司搭建了一个共享的maven库，有多个供应商使用。但个别供应商要求能自行上传依赖并且这些私有依赖不能暴露给其他供应商，请问有什么解决方案吗？","like_count":0},{"had_liked":false,"id":125632,"user_name":"Mingyan","can_delete":false,"product_type":"c1","uid":1344408,"ip_address":"","ucode":"02F222332B9045","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/98/fab9bd2a.jpg","comment_is_top":false,"comment_ctime":1566217760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566217760","product_id":100009701,"comment_content":"都是java的 有php的如何做持续集成吗？","like_count":0},{"had_liked":false,"id":109875,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1562123960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562123960","product_id":100009701,"comment_content":"这个插件可以在maven的配置文件中配置后，其他任何应用构建时进行检查吗？","like_count":0},{"had_liked":false,"id":66535,"user_name":"YoungerChina","can_delete":false,"product_type":"c1","uid":1215646,"ip_address":"","ucode":"917381759E13AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/9e/367a4197.jpg","comment_is_top":false,"comment_ctime":1549954359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549954359","product_id":100009701,"comment_content":"更像依赖版本管理检测","like_count":0}]}