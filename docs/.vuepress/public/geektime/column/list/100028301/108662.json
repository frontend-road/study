{"id":108662,"title":"25 | 答疑（二）：特权进程的权限到底是什么？","content":"<p>你好，我是温铭。</p><p>专栏更新到现在，OpenResty第二版块 OpenResty API 篇，我们就已经学完了。恭喜你没有掉队，仍然在积极学习和实践操作，并且热情地留下了你的思考。</p><p>很多留言提出的问题很有价值，大部分我都已经在App里回复过，一些手机上不方便回复的或者比较典型、有趣的问题，我专门摘了出来，作为今天的答疑内容，集中回复。另一方面，也是为了保证所有人都不漏掉任何一个重点。</p><p>下面我们来看今天的这 6 个问题。</p><h2>第一问，特权进程的权限</h2><p>Q：我想请问下，特权进程是怎么回事，如果启动 OpenResty 的本身就是普通用户，如何获取root权限呢？另外，老师可以介绍下，特权进程的使用场景有哪些吗？</p><p>A：其实，特权进程的权限和 master 进程的权限保持一样。如果你用普通用户身份启动 OpenResty，那么 master 就是普通用户的权限，这时候特权进程也就没有什么特权了。</p><p>这一点应该还是很好理解的，普通用户启动的进程，无论如何也不会有 root 权限。</p><p>至于特权进程的使用场景，我们一般用特权进程来处理的是清理日志、重启 OpenResty 自身等需要高权限的任务。你需要注意的是，不要把 worker 进程的任务交给特权进程来处理。这并非因为特权进程不能做到，而是其存在安全隐患。</p><!-- [[[read_end]]] --><p>我见到过一个开发者，他把定时器的任务都交给了特权进程来处理。他为什么这么做呢？因为特权进程只有一个，这样 timer 就不会重复启动。</p><p>是不是觉得这看上去很聪明呀，不用 worker.id 这种笨方法就做到了。但是，别忘了，如果定时器的任务和用户的输入有关，这不就等于留了一个后门吗？显然是非常危险的。</p><h2>第二问，阶段和调试</h2><p>Q：老师，是不是无论在哪个阶段运行<code>ngx.say('hello')</code>，OpenResty都会在执行完本阶段的剩余代码后，直接响应给客户端，而不会继续执行其他阶段了呢？我测试出来是这样的。</p><p>A：事实上并非如此，我们可以来看下它的执行阶段的<a href=\"https://github.com/moonbingbing/openresty-best-practices/blob/master/images/openresty_phases.png\">顺序图</a>：</p><p><img src=\"https://static001.geekbang.org/resource/image/71/bf/71b24c95f042f0bf79ac34211e2dd0bf.png?wh=1005*910\" alt=\"\"></p><p>你可以做个测试，先在 content 里面 <code>ngx.say</code>；然后，在 log 或者 body filter 阶段使用 <code>ngx.log</code> 来打印下日志试试。</p><p>在专栏中，我并没有专门提到在 OpenResty 中做代码调试的问题，这也是开发者经常困惑的地方，我正好顺着这个问题在答疑中聊一下。</p><p>其实，OpenResty 中的代码调试，并没有断点这些高级功能（相应有一些付费的插件，但我并没有使用过），只能用  <code>ngx.say</code> 和<code>ngx.log</code> 来看输出。我知道的开发者，包括 OpenResty 的作者和贡献者们，都是这样来做 debug 的。所以，你需要有强有力的测试案例和调试日志来作为保证。</p><h2>第三问，ngx.exit 和动手实验</h2><p>Q：老师，文中的这句话，“OpenResty 的 HTTP 状态码中，有一个特别的常量：<code>ngx.OK</code>。当 <code>ngx.exit(ngx.OK)</code> 时，请求会退出当前处理阶段，进入下一个阶段，而不是直接返回给客户端。”</p><p>我记得，<code>ngx.OK</code>应该不能算是HTTP状态码，它对应的值是0。我的理解是：</p><ul>\n<li><code>ngx.exit(ngx.OK)</code>、<code>ngx.exit(ngx.ERROR)</code>和<code>ngx.exit(ngx.DECLINED)</code>时，请求会退出当前处理阶段，进入下一个阶段；</li>\n<li>而当<code>ngx.exit(ngx.HTTP_*)</code>以<code>ngx.HTTP_*</code>的各种HTTP状态码作为参数时，会直接响应给客户端。</li>\n</ul><p>不知道这样想对不对呢？</p><p>A：关于你的第一个问题，<code>ngx.ok</code> 确实不是http状态码，它是 OpenResty 中的一个常量，值是0。</p><p>至于第二个问题，<code>ngx.exit</code> 的官方文档其实正好可以解答：</p><pre><code>When status &gt;= 200 (i.e., ngx.HTTP_OK and above), it will interrupt the execution of the current request and return status code to nginx.\n\nWhen status == 0 (i.e., ngx.OK), it will only quit the current phase handler (or the content handler if the content_by_lua* directive is used) and continue to run later phases (if any) for the current request.\n</code></pre><p>不过，文档里并没有提到， OpenResty对于<code>ngx.exit(ngx.ERROR)</code>和<code>ngx.exit(ngx.DECLINED)</code>是如何处理的，我们可以自己来做个测试，比如下面这样：</p><pre><code>location /lua {\n        rewrite_by_lua &quot;ngx.exit(ngx.ERROR)&quot;;\n        echo hello;\n    }\n</code></pre><p>显然，访问这个 location，你可以看到 http 响应码为空，响应体也是空，并没有进入下一个执行阶段。</p><p>其实，还是那句话，在 OpenResty 的学习过程中，随着你逐步深入，一定会在某个阶段发现，文档和测试案例都无法回答你的问题。这时候，就需要你自己构建测试案例来验证你的想法了。你可以手动测试，也可以添加在 <code>test::nginx</code> 搭建的测试案例集里面。</p><h2>第四问，变量和竞争</h2><p>Q：老师，你好，我有下面几个问题想请教一下。</p><ol>\n<li>前面讲过，<code>ngx.var</code>变量的作用域在nginx C和lua-nginx-module模块之间。这个我不太理解，从请求的角度来看，是指一个工作进程中的单个请求吗？</li>\n<li>我的理解是，在我们操作模块内的变量时，如果两个操作之间有阻塞操作，可能会出现竞争。那么，如果两个操作之间没有阻塞操作，恰好CPU时间到了后，当前进程进入就绪队列，这样可能产生竞争吗？</li>\n</ol><p>A：我们依次来看这几个问题。</p><p>第一，关于<code>ngx.var</code> 变量的问题，你的理解是正确的。实际上，<code>ngx.var</code> 的生命周期和请求一致，请求结束它也就消失了。但它的优势，是数据可以在 C 模块和 Lua 代码中传递。这是其他几种方式都无法做到的。</p><p>第二，关于变量竞争的问题，其实，只要两个操作之间有 <code>yield 操作</code>，就可能出现竞争，而不是阻塞操作；有阻塞操作时是不会出现竞争的。换句话说，只要你不把主动权交给 Nginx 的事件循环，就不会有竞争。</p><h2>第五问，共享字典操作是否需要加锁呢？</h2><p>Q：老师，如果多个worker并发存储数据，是不是需要加锁呢？比如下面这个例子：</p><pre><code>resty --shdict 'dogs 10m' -e 'local dogs = ngx.shared.dogs\nlocal lock= ngx.xxxx.lock\nlock.lock()\n dogs:set(&quot;Jim&quot;, 8)\nlock.unlock()\n local v = dogs:get(&quot;Jim&quot;)\n ngx.say(v)\n '\n</code></pre><p>A：其实这里不用你自己加锁，共享字典（shared dict）的操作都是原子性的，不管是 get 还是 set。这种类似加锁的处理，OpenResty已经帮你考虑到了。</p><h2>第六问，OpenResty 中如何更新时间？</h2><p>Q：<code>ngx.now()</code>取时间，是发生在resume函数恢复堆栈阶段吗？</p><p>A：Nginx 是以性能优先作为设计理念的，它会把时间缓存下来。这一点，我们从 <code>ngx.now</code> 的源码中就可以得到印证：</p><pre><code>static int\nngx_http_lua_ngx_now(lua_State *L)\n{\n    ngx_time_t              *tp;\n\n    tp = ngx_timeofday();\n\n    lua_pushnumber(L, (lua_Number) (tp-&gt;sec + tp-&gt;msec / 1000.0L));\n\n    return 1;\n}\n</code></pre><p>可以看出，<code>ngx.now()</code>这个获取当前时间函数的背后，隐藏的其实是 Nginx 的 <code>ngx_timeofday</code> 函数。而<code>ngx_timeofday</code> 函数，其实是一个宏定义：</p><pre><code>#define ngx_timeofday()      (ngx_time_t *) ngx_cached_time\n</code></pre><p>这里<code>ngx_cached_time</code> 的值，只在函数 <code>ngx_time_update</code> 中会更新。</p><p>所以，这个问题就简化成了，  <code>ngx_time_update</code>什么时候会被调用？如果你在 Nginx 的源码中去跟踪它的话，就会发现，  <code>ngx_time_update</code> 的调用都出现在事件循环中，这个问题也就明白了吧。</p><p>通过这个问题你应该也能发现，开源项目的好处就是，你可以根据蛛丝马迹，在源码中寻找答案，颇有一种破案的感觉。</p><p>今天主要解答这几个问题。最后，欢迎你继续在留言区写下你的疑问，我会持续不断地解答。希望可以通过交流和答疑，帮你把所学转化为所得。也欢迎你把这篇文章转发出去，我们一起交流、一起进步。</p><p></p>","comments":[{"had_liked":false,"id":115858,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1563759168,"is_pvip":true,"replies":[{"id":"43750","content":"我的理解哈，多个 worker 共享了同一个 shared dict，你这里的描述更像是数据库里面的事务，要达到这个效果有两个方法：<br>1. 如果用 incr 能够满足你的需求的话，就不要用 set；<br>2. 否则就需要你自己去手工加锁。<br>如果是 lrucache 的 get 和 set 操作就不会有这个问题，因为它只存在于一个 worker 内。","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1564544866,"ip_address":"","comment_id":115858,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858726464","product_id":100028301,"comment_content":"老师，你好，关于共享内存加锁及竞争条件有个疑问~<br>假设有这样的场景，所有的工作进程都可以执行到如下操作序列，dict.get, dict.set。进程1执行了dict.get之后，进程2这时获得了共享内存锁，这个时候执行了dict.set，然后进程1再次获得了共享内存锁，执行dict.set之前，看到的其实已经是共享内存中比较老的数据了，然后执行了dict.set操作，覆盖了进程2的操作。这里等待获得共享内存锁的操作，应该是个阻塞操作，按照文中的说法，阻塞操作应该不会产生竞争。可是这里应该是产生了竞争了是吧？难道说这里涉及到把主动权交给nginx的事件循环了吗？","like_count":1,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459316,"discussion_content":"我的理解哈，多个 worker 共享了同一个 shared dict，你这里的描述更像是数据库里面的事务，要达到这个效果有两个方法：\n1. 如果用 incr 能够满足你的需求的话，就不要用 set；\n2. 否则就需要你自己去手工加锁。\n如果是 lrucache 的 get 和 set 操作就不会有这个问题，因为它只存在于一个 worker 内。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564544866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146939,"user_name":"HelloTalk","can_delete":false,"product_type":"c1","uid":1618633,"ip_address":"","ucode":"F898E6A7C61D39","user_header":"https://static001.geekbang.org/account/avatar/00/18/b2/c9/b414a77c.jpg","comment_is_top":false,"comment_ctime":1572708798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572708798","product_id":100028301,"comment_content":"特权进程的权限和 master 进程的权限保持一样。<br><br>这句话的意思是说 特权进程 不是master进程吗？<br>如在 worker数量为4的情况 nginx<br>  nginx: worker process<br>  nginx: worker process<br>  nginx: worker process<br>  nginx: worker process<br>  nginx: cache manager process<br>  nginx: master process &#47;usr&#47;local&#47;openresty&#47;nginx&#47;sbin&#47;nginx -c  <br>总共就这6个进程，master 就是特权进程吧","like_count":0},{"had_liked":false,"id":116685,"user_name":"高远","can_delete":false,"product_type":"c1","uid":1022886,"ip_address":"","ucode":"BC84D5A3EA37A6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a6/1f485c48.jpg","comment_is_top":false,"comment_ctime":1563890688,"is_pvip":true,"replies":[{"id":"42827","content":"置顶：）","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1563973401,"ip_address":"","comment_id":116685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563890688","product_id":100028301,"comment_content":"断点调试别忘了lua-resty-repl呀～😁","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459640,"discussion_content":"置顶：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563973401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116214,"user_name":"wusiration","can_delete":false,"product_type":"c1","uid":1104438,"ip_address":"","ucode":"A9403377054F1E","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/36/ac0ff6a7.jpg","comment_is_top":false,"comment_ctime":1563802912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563802912","product_id":100028301,"comment_content":"受益良多，谢谢老师的解答","like_count":0}]}