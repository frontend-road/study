{"id":1539,"title":"15 | 每个工程师都应该了解的：系统拆分","content":"<p>四年前，我加入了风头正劲的 Square 公司。两年前，我又加入了涨势甚猛的 Airbnb 公司。在我加入的时候，这两个公司都有上百名的工程师，网站和主要产品的核心功能也已齐备。</p>\n<p>两家创业公司从 0 到 1 的创业过程我并没有亲身经历，但是两次都恰好经历了公司从 1 到 N 的扩张过程和业务拆分的过程。</p>\n<p>今天我就和你聊聊，公司从 1 到 N 发展过程中的系统拆分问题。</p>\n<h2>创业初期的代码现状</h2>\n<p>在 Square 刚刚起步的时侯，整个产品都是基于 Ruby on Rails 构建的，所有的产品和功能代码几乎都在一个代码库里。</p>\n<p>等到我进入 Square 的时候，有一些服务已经从 Ruby 代码中分离出来了，形成了单独的 Java 或者 Ruby 服务，然而大部分功能还是在一大块 Ruby 代码里。</p>\n<p>当时，几乎所有的工程师每天都在这一份基准代码（Code Base）里写程序。虽然有严格的代码审核过程和规范的开发流程，但是，不同功能的代码模块会产生交叉影响，不同工程师改动的模块会有重合或牵连，所以，系统还是会时不时出现问题。</p>\n<p>那时候， Square 的做法是：在周五对本周所有的代码进行代码审查（Code Review），通过审查之后，把修改合并到主分支，然后再发布到生产环境。</p>\n<p>这种做法虽然可以避免产生人为错误，但是非常不灵活，比如，每周只有周五有一次机会将改进的代码部署到线上。</p>\n<p>可以想象一下，一百多名工程师，就算只有三分之一的人在这个代码池子里改代码，一周累积下来，已经有不少的改动了。</p>\n<p>于是，当时 Square 有个系统管理员组（Sysops），专门负责每周五的部署。我也是工作近半年的时侯，因为表现不错才被荣幸地 “选拔” 进了这个  “特别行动小组”，承担部署的重任。</p>\n<p>那么说，每次的部署是一幅什么样的场景呢？</p>\n<p>部署开始的时候，一正一副两位工程师正襟危坐，多个显示器同时打开，进行各种指标监控。</p>\n<p>工程师先将在测试环境中测试无误的代码部署到若干生产机器上，进行灰度发布，这就意味着有一部分用户的访问量会调用新代码。如果监控没有发现异常的话，再进行全量发布，这周修改的代码就会被部署到几百台机器上。</p>\n<p>一旦出现异常，监控系统就开始各种红色告警，工程师们会立刻扔下手中的可乐或者咖啡，进入备战状态，停止系统，进行数据回滚、排查问题、修复，从头开始把流程再来一遍，直到代码安全地部署到线上并能够正常运行为止。</p>\n<p>随后的两年，我们进行了细致的业务拆分，等到我离开 Square 的时候，大部分可以独立出来的服务都已经拆分出来，很多系统可以分别部署和上线，也就再没有了那种激动人心的周五上线日。</p>\n<p>Airbnb 的情况也差不多，我刚加入的时候，代码状态甚至更原始一些。不同的是，Airbnb 没有一周只能部署一次代码的规矩，所有的工程师只要准备好了就可以做部署上线。</p>\n<p>这样做的优点是可以快速迭代，每次部署的代码改动也很小，缺点是几乎任何时候都有人在部署代码。时时的部署也就意味着，红色告警随时可能在身边响起。</p>\n<!-- [[[read_end]]] -->\n<h2>为什么系统需要进行业务拆分</h2>\n<p>为什么会出现这种情况呢？我在文稿中给大家放了一张图，图例很好地阐述了效率和复杂度的关系。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/07/46/073b59403af00ce2a3f14dfd40d29146.png?wh=937*737\" alt=\"\" /></p>\n<p>图的 X 轴代表了基本复杂度（Base Complexity），Y 轴代表了生产效率。我们可以看出，当一个公司规模很小的时候，基本复杂度相对较小，所以单一代码库（Monolith）的效率就会高。</p>\n<p>然而，随着公司业务的扩展，访问量的增加，其基本复杂度就会逐步升高，达到某一个临界点后，微服务（Microservice）的效率就远远高于单一代码库。关于微服务，这里就不做详述了，极客时间会发布专门的微服务知识产品。</p>\n<p>为了解决效率和复杂度的问题，无论是在 Square 还是 Airbnb，我都有一大部分时间花在了业务拆分上。下面，我就和你聊聊这几年做业务拆分的一些心得和踩过的坑。</p>\n<h2>业务拆分并不像看起来那么简单</h2>\n<p>我们从一个例子谈起，比如你有一个功能模块，大概可以分成四部分。其中模块 A 连接一个外部模块 D，A 输出的结果，会被模块 B 和 模块 C 分别调用。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/0d/41/0d025d3dbf4fced55f898f95c717fd41.jpeg?wh=640*257\" alt=\"\" /></p>\n<p>针对这样的模块，我们可以做一个集成测试（Integration Test），在模拟（mock）D 的情况下，测试 A、B、C 是不是可以正确运行。</p>\n<p>如果有人修改了模块 A 的返回值，但忘了修改模块 B 和 C 的接口，测试就会立刻失败，不会存在因为忘了修改接口而测试通过的可能。一旦通过了集成测试，所有的改动会在一次部署中同时展现（Rollout） 或者回滚（Rollback），非常容易控制。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/49/71/497117af9fcdf178319ed60f357e4271.jpeg?wh=640*312\" alt=\"\" /></p>\n<p>随着业务的发展，A、B、C 三个功能被拆分成三个独立的服务（Service），各自保存在不同的代码库，或者是同一个代码库不同的服务容器（Service Container）里。</p>\n<p>这样的话，测试用例就不能综合测试这三部分的功能了，只能模拟相互的请求（Request）或响应（Response），如果在开发环境下联调测试，则需要本地建立这三个服务。</p>\n<p>根据每个公司开发环境的成熟度，这一步可能很简单，也可能耗掉你几个小时，才能让不同服务在本地正常运行，并且需要通过 RPC 相互调用。</p>\n<p>RPC 就是远程过程调用的意思。有远程调用，就会用到本地桩和过程调用，这涉及了本地多服务的配置，过程繁复，不小心就会引入错误，测试成本也会随之增加。</p>\n<p>如果程序员在改动的时候并没有按照正常流程进行测试，尤其是一些 “很小的” 或者 “不相干的” 改动，一旦部署上线，系统就可能出现各种各样的问题。</p>\n<p>就算一切顺利，有一天，A 修改了自己的接口，RPC 调用中请求的一个字段（Field）从 integer 变成 string 类型。</p>\n<p>如果 A、B、C 还在一起的时候，我们在代码库里把三者的相应类型都改了就好；但是，现在 A、B、C 都是独立的服务，可以独立地部署，这事就有点麻烦了，我们很难保证 A、B、C 的部署总是完全同步。</p>\n<p>有经验的读者知道，我们为接口做个向后兼容（Backward Compatibility）就好了，只要：</p>\n<ol>\n<li>先改 A 的接口，让它接受 integer 也接受 string，如果请求是 integer，先做一下转换，然后发布这个改动；</li>\n<li>修改 B 和 C 的接口，响应从 integer 变成 string 类型，发布这个改动；</li>\n<li>等到 A、B、C 的新代码都稳定了，再修改 A 的接口，只接受 string 类型的参数，发布这个变化，我们就完成了所有接口的改动。</li>\n</ol>\n<p>这样就没问题了么？并没有这么简单。</p>\n<p>因为 A 还有其他代码，所以在上面的第二步之后，你有可能发现 A 的代码有一个问题，需要将线上的代码回滚到之前的某个版本。这时候 B 和 C 的接口已经是 string 类型了，而 A 只接受 integer，然后，线上就是频繁请求报错。</p>\n<p>当然，这里举的是一个简单的例子，我们可以通过延长第一步的兼容时间来避免出现类似问题，但是，实际工作中的改动不会是这么简单的依赖关系，或者没有约束关系，所以，服务之间无缝修改接口，是一个需要非常小心的问题。</p>\n<h2>业务拆分时的注意事项</h2>\n<p>系统拆分后的痛远远不止于此。就我自己的经历，大概有下面的这些感受。</p>\n<h3>测试会变得异常复杂</h3>\n<p>因为模块被独立出来之后，并没有办法很方便地写出集成测试用例。一个做法是模拟出所有接口的请求和响应，但实际上大部分时候根本没法测试跨服务的改动，这种做法多少有点自欺欺人的味道。</p>\n<p>另一个方法就是在本地配置好所有的服务，用真实的服务响应来测试。但是撇开本地设置多服务的复杂度，保证本地服务一直是最新代码，同样也是一件麻烦的事。</p>\n<p>尤其是同步开发的工程师变多以后，可能你正在测的服务没有问题，但是在你做测试的同时，已经有同事对你刚刚测试的服务做改动推送到了主分支上。</p>\n<p>测试的复杂度，几乎是软件工程中的万恶之源。当每个小改动都让测试变得耗时耗力时，就难保没有偷工减料的员工，大家揣着 “我的改动应该没问题” 的侥幸心理，不去做完整测试，就把自己的代码合并进主分支。</p>\n<p>尤其是大部分这么做的改动都没有问题，时间一长，侥幸心理一再滋长，人们直接合并代码的胆子也越来越大，终于有一天会把生产系统彻底搞挂。</p>\n<p>针对这个问题，我和在 Google 工作的朋友交流过。Google 或者 Facebook 这样的大公司里，整个系统做得相当成熟，测试环境做得非常完美。</p>\n<p>每个服务都对应设置了在线的测试服务，写集成测试极其方便，或者把服务做成开箱即用，工程师可以一次性地建立所有的本地服务进行联调和测试，但是，对于大部分创业公司来说，很难达到这个水准。</p>\n<h3>与接口相关的改动需要大量协调</h3>\n<p>这一点也很容易理解。比如我们要把一部分代码从一个服务迁移到另一个服务，或者修改 API 的协议，那么，所有不同服务的维护者都需要在代码里增加向前或者向后的兼容性，对代码进行保护。</p>\n<p>同时代码的上线顺序和修改顺序也息息相关，我们需要做一张检查列表（Checklist），考虑各种可能性，精确地按照顺序执行。一旦发生代码回滚，可能又要重来一遍。</p>\n<p>这个过程就会涉及方方面面的人、事和代码修改，过程十分繁复。</p>\n<h3>报错的处理</h3>\n<p>因为程序不在一起了，当异常发生的时候，我们就得不到完整的异常堆栈信息（Exception Stack），只能追踪到某个服务的接口处，于是 Debug 变得很难。你还需要去另一个服务的日志里去找，看看那个时间点从你这里发出去的请求到底发生了些什么事，然后才能进一步定位问题。</p>\n<p>好的程序员在写服务的时候知道要把异常信息封装后层层传播出去，并最终暴露到接口的 4XX 响应里，这样，调用方就可以在堆栈信息里看到具体的出错信息。</p>\n<p>如果有的程序员没有这么做，就很容易出现 “无语问苍天” 的感觉，比如你线上的服务出了问题，到日志系统 Kibana 里一看，只有下面这行错误信息，你是不是会很崩溃？</p>\n<p>Error! HTTP 400 response from<br />\n<a href=\"http://another-microservice.com/update\">http://another-microservice.com/update</a></p>\n<h3>日志的完整性</h3>\n<p>系统拆分了，日志系统也会分离，不仅系统调试变得困难，一些基于日志产生的事件流（Event Stream）机制，也会变得难以处理。这意味着，想要真正从日志里获取完整有用的信息，就需要将不同服务的日志一起取出来进行分析和处理。</p>\n<p>这种需求并不是所有的应用都需要，因为我们是做支付的，经常需要一个事务的完整审计线索（Audit trail），也就是一条告诉我们 “每个相关的变化是谁做的，什么时候做的（who did what and when for every change involved）” 的特殊日志。</p>\n<p>这件事以前处理起来非常复杂，现在倒是有了比较标准的解决方案，就是一个共享的消息总线（Message Bus），比如 Kafka，有了日志就分门别类的扔到消息总线里处理，然后再进行分析。</p>\n<h3>超时设置</h3>\n<p>为了保证用户体验，我们常常在系统里做一些超时设置（Timeout），比如一个请求从终端设备发过来，我们希望用户最多等待 5 秒，超过 5 秒就会放弃请求并返回相应的结果通知用户。系统拆分之后，我们可以做一个全局的超时设置，让所有的服务都使用这个全局变量。</p>\n<p>这一切看起来很美好，但稍不注意就会出现这样那样的问题。由于服务都是独立开发的，如果某一个服务的实现没有使用 5 秒的全局变量，我们就不知道这个服务到底超时多久才会返回结果，或者是否有超时的设置。</p>\n<p>另外，根据某些服务的性质不同，我们希望尽可能地给出最合理的延时设置。还有些请求会经历多次跨服务的调用，一旦同时出现超时，就会进行叠加，超时设置就完全不可控了。</p>\n<p>为了避免这些情况出现，就需要增加流程和规范，并且在进行系统拆分的时候进行宏观的设计和考虑。系统拆分会为我们带来灵活性，同样也会增加其他成本。</p>\n<h3>关于代码自由</h3>\n<p>记得以前看到过一句话，当每个人都有绝对自由的时候，这个世界就没有自由可言了。拆分之后每个服务的实现都可以自主选择自己的语言，自己的数据存储方式，自己的代码风格。</p>\n<p>短期来说，这种做法可以让程序员的效率极大地提高，但是在同一个公司里，当各种各样的服务变成一场技术秀的时候，不论是维护还是稳定性都会受到极大的挑战。于是，这时便会有人扮演清道夫的角色，开始搞服务的标准化。</p>\n<p>另外，独立服务的开发周期相对较短，往往一两个工程师几周时间就可以写出一个新的服务，这样系统里会出现数不清的服务，有的服务由于人员离职等原因没人维护了，有的服务被重写了，有的服务要退休了，为了管理这些服务，我们还需要一个服务编排和管理系统。</p>\n<p>系统拆分之路漫漫，吾等将上下而求索。</p>\n<h2>如何去判断系统是不是到了必须进行拆分和服务化的临界点</h2>\n<p>写到这里可能有读者会问，这篇文章中你介绍了大代码库的弊端，也写了很多系统拆分和服务化需要注意的问题，那么，你到底想告诉我什么呢？</p>\n<p>做为一个亲身经历过两种架构的工程师，我想说的是：系统拆分并不是做一道单选题，在进行系统拆分和服务化之前，我们需要综合考虑各种因素，找到平衡点。</p>\n<ol>\n<li>\n<p>你的业务量是否足够大，逻辑是否足够复杂以至于必须进行系统拆分。水平扩展是不是已经不起作用了？代码的相互影响、部署时间过长真的是系统的切肤之痛么？如果答案都是肯定的，那么你就应该进行系统拆分了。</p>\n</li>\n<li>\n<p>对于服务化的架构，你的开发人员多少经验，能否正确驾驭而不是让本文中提到的问题成为拦路虎么？</p>\n</li>\n<li>\n<p>系统拆分是一个“从一到多容易，从多到一困难”的过程，这个过程几乎是不可逆的。一旦你三分天下，想再一统江山就没那么容易了。所以在做拆分计划的时候，一定要慎之又慎。</p>\n</li>\n</ol>\n<p>系统拆分是一个实践性很强的工作，并无一定之规，只有亲自参与了这个过程，才会有更深入的体会；在这个过程中，你的架构能力也会产生一个质的跃迁。</p>\n<p>文章的最后，我来总结一下今天分享的内容。</p>\n<p>今天的文章较长，涉及的内容也比较多：</p>\n<p>第一点，我谈到了创业公司初期，代码的构建状况以及遇到的相关问题；</p>\n<p>第二点，我解释了为什么随着业务的发展，我们会进行系统拆分；</p>\n<p>第三点，我提醒了业务拆分并不像看起来那么简单，我们需要时刻去注意细节；</p>\n<p>第四点，我分析了在进行系统拆分和服务化的过程中，需要注意哪些问题；</p>\n<p>第五点，我讲解了如何去判断一个系统是不是到了必须进行拆分和服务化的临界点。</p>\n<p>希望这些内容对走在创业路上的技术人有所帮助。</p>\n<p>你有系统拆分的经验和故事么，可以在留言中告诉我，我们一起讨论，也欢迎你把这篇文章转发给你工作中的伙伴，我们一起成长。再见。</p>\n<p><br> </p>\n<p><a href=\"https://time.geekbang.org/activity/sale-poster?utm_source=app&amp;utm_medium=zhuyun-article&amp;utm_campaign=zhuyun-saleposter&amp;utm_content=zhuyun0416\">戳此获取你的专属海报</a></p>\n","comments":[{"had_liked":false,"id":1513,"user_name":"刘剑","can_delete":false,"product_type":"c1","uid":1032589,"ip_address":"","ucode":"B2115F99D63540","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/8d/17d20606.jpg","comment_is_top":false,"comment_ctime":1513316450,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"143247237218","product_id":100002401,"comment_content":"技术管理课，讲这个稍微有点过于基础哦（包括前面的数据库片）。建议多讲讲团队、激励、培训、招聘、绩效等方面呀。","like_count":34,"discussions":[{"author":{"id":1180256,"avatar":"https://static001.geekbang.org/account/avatar/00/12/02/60/8b9572ac.jpg","nickname":"小风","note":"","ucode":"A5D04FF18880C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138565,"discussion_content":"这个课程，这个评论确实是我正想要的；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579253377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1582,"user_name":"刘剑","can_delete":false,"product_type":"c1","uid":1001744,"ip_address":"","ucode":"60F2DCADC5A020","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/10/eadec2c6.jpg","comment_is_top":false,"comment_ctime":1513668292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"108887850692","product_id":100002401,"comment_content":"对于业务拆分的原则之一是：服务边界内的业务能力职责单一化，不是完成同一业务能力的模型不放在同一个上下文中。<br><br>至于拆分的手段，我们用的是<br><br>1.绞杀模式，就是在遗留系统外围，将新功能用新的方式构建为新的服务。随着时间的推移，新的服务逐渐“绞杀”完老的系统。对于那些老旧庞大难以更改的遗留系统，推荐采用绞杀者模式。<br><br>2.修缮者模式就像修房子和修路一样，将老旧待修缮的部分进行隔离，用新的方式对其进行单独修复。修复的同时，需保证与其他部分仍能协同功能。App版本兼容上也多用此模式<br><br>我们业务拆分的原则是：“旧的不变，新的创建，一步切换，旧的再见”","like_count":26},{"had_liked":false,"id":1996,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1515436904,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"22990273384","product_id":100002401,"comment_content":"开发环境的成熟度、调试难度、日志查看、接口超时、异常处理，安姐列出的都是干货，都是系统拆分随之而来绕不过去的痛点。去年经历了公司系统的微服务化和一些模块的重构，看完文章后特别有感触。特别是修改代码后，有时本地需要起好多服务才能调试，一直是个痛点。公司只有一套公共使用的环境，上面部署的都是最新的主干代码。安姐提到google和facebook的开发环境比较成熟，他们是如何做到开箱即用呢？能否针对这些痛点，写写解决的方案？谢谢！","like_count":5,"discussions":[{"author":{"id":1085152,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","nickname":"爱学习的大叔","note":"","ucode":"91F9ABF1EC98D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50864,"discussion_content":"开箱即用确实需要很强的架构能力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573780680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":4288,"user_name":"泽","can_delete":false,"product_type":"c1","uid":1055569,"ip_address":"","ucode":"C6B0806E475A3F","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/51/3625d8b0.jpg","comment_is_top":false,"comment_ctime":1521880709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18701749893","product_id":100002401,"comment_content":"系统拆分是任何到发展到中后期公司必须经历的过程，前期因为商业模式试错抢占市场等会快速上线快速迭代，前期公司也没多少牛人，各方面都是业务优先，在不知道自己能活多久前提下，谈什么服务化技术优化都是扯淡。随时公司发展一般2-3年还没死，随着业务量越来越大，系统增加新功能、系统维护成本越来越高，系统变得越来越不稳定，DB一直挑战极限，这个阶段重构服务化是必须介入了，拆分和服务化的具体问题文中大体都介绍了，至于什么原则来进行服务化，如何去确定服务边界，如果确定上下文大小，哪些功能该放在一个服务中，这些需要好好看看DDD-领域模型设计。什么阶段做什么样的事，遇到事了不怕事，事后会发现这些不过如此。","like_count":5},{"had_liked":false,"id":1509,"user_name":"顾金鑫","can_delete":false,"product_type":"c1","uid":1005215,"ip_address":"","ucode":"ABEDA10C7FDF04","user_header":"","comment_is_top":false,"comment_ctime":1513308745,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14398210633","product_id":100002401,"comment_content":"灰度发布的时候，新旧的数据库 schema 不一样，怎么数据迁移咧？新老系统同时存在，也就意味着会对库有两种写法…这可如何是好","like_count":3},{"had_liked":false,"id":1497,"user_name":"zhengfc","can_delete":false,"product_type":"c1","uid":1003097,"ip_address":"","ucode":"9DBB9F6F11D3C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/59/cdd842b2.jpg","comment_is_top":false,"comment_ctime":1513299538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14398201426","product_id":100002401,"comment_content":"拆起来容易，合起来成为一体就有挑战了","like_count":3},{"had_liked":false,"id":1501,"user_name":"张伟波","can_delete":false,"product_type":"c1","uid":1020539,"ip_address":"","ucode":"4C00C325A3FF94","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/7b/c56f3fc5.jpg","comment_is_top":false,"comment_ctime":1513300921,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10103235513","product_id":100002401,"comment_content":"系统拆分最佳时机是否是软件设计时，如果系统已经上线，因为没有拆分带来了大量的弊端，比如迭代发版总出各种各样的连带问题，是不是要考虑下架构的问题了？","like_count":2,"discussions":[{"author":{"id":1078997,"avatar":"https://static001.geekbang.org/account/avatar/00/10/76/d5/7e34ac81.jpg","nickname":"huahua035","note":"","ucode":"A3F9411D3FE812","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384541,"discussion_content":"系统是演进出来的，不是设计出来的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626656752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1495,"user_name":"产品助理","can_delete":false,"product_type":"c1","uid":1019821,"ip_address":"","ucode":"39A76D346A96E9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/ad/6e3e9e15.jpg","comment_is_top":false,"comment_ctime":1513296212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10103230804","product_id":100002401,"comment_content":"不要为了拆分而拆分，视业务实际痛点，人员实际水平综合考虑","like_count":2},{"had_liked":false,"id":1892,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1515034081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5810001377","product_id":100002401,"comment_content":"这篇文章写的非常好，从望京一路看到西二旗。解答了很多困惑。","like_count":1},{"had_liked":false,"id":315712,"user_name":"留白","can_delete":false,"product_type":"c1","uid":1328734,"ip_address":"","ucode":"5267C1F3889961","user_header":"https://static001.geekbang.org/account/avatar/00/14/46/5e/c0ea1ffb.jpg","comment_is_top":false,"comment_ctime":1633949429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633949429","product_id":100002401,"comment_content":"客户端拆库也是一样，开发层面的通信、调用是个问题，考虑输入输出的模拟测试更是个大问题","like_count":0},{"had_liked":false,"id":286768,"user_name":"超","can_delete":false,"product_type":"c1","uid":1101952,"ip_address":"","ucode":"F45F5ED7073E8A","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/80/67e3312c.jpg","comment_is_top":false,"comment_ctime":1617580931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617580931","product_id":100002401,"comment_content":"没有固定优秀的架构，只有适合场景的系统，三年前我们直接上了云原生，k8s、docker、微服务都是标配，后来发现，当不只有一套而是几百套这样的环境时，每一次新局点上线或者老局点升级都是非常痛苦的，后来，痛定思痛，整合整合，世界一下子变得美好起来","like_count":0},{"had_liked":false,"id":242018,"user_name":"何慧成","can_delete":false,"product_type":"c1","uid":2060270,"ip_address":"","ucode":"B7E076B1BEF1D5","user_header":"","comment_is_top":false,"comment_ctime":1597563635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597563635","product_id":100002401,"comment_content":"在大企业里，很多时候基本上是一刀切，不存在想不想，要不要的问题。没有完美的系统架构，只有适合的系统架构。单一架构和服务化架构各有优点和痛点，具体还得看实践。","like_count":0},{"had_liked":false,"id":151713,"user_name":"爱学习的大叔","can_delete":false,"product_type":"c1","uid":1085152,"ip_address":"","ucode":"91F9ABF1EC98D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","comment_is_top":false,"comment_ctime":1573781027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573781027","product_id":100002401,"comment_content":"比较感兴趣的是airbnb是如何做技术创新的，因为经常看见你们各种技术大会都有露面，然后经常开源各种架构。不过你们的app确实做的好棒，不像国内的某程等眼花缭乱","like_count":0},{"had_liked":false,"id":39612,"user_name":"锐","can_delete":false,"product_type":"c1","uid":1110915,"ip_address":"","ucode":"A245BA96C9471F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/83/e2612d81.jpg","comment_is_top":false,"comment_ctime":1542328442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542328442","product_id":100002401,"comment_content":"好像每次都是提出问题，然后没有答案？应该举个实际遇到过的场景让我们参考，比如多大并发，什么业务，到达什么指标需要执行什么样的操作等等，希望作者能把实际经验分享一下","like_count":0},{"had_liked":false,"id":1823,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1040236,"ip_address":"","ucode":"58064D0C9F9F5F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","comment_is_top":false,"comment_ctime":1514603045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1514603045","product_id":100002401,"comment_content":"公司刚成立，我们现在的代码库就是一个大的代码库，工程师人少，每个客户端，后台，前段也就一两个工程师，所以目前每次部署变更正式环境还是可控的，而且业务逻辑也还没复杂到说要进行拆分的时候～看了作者的观点后，还是要准备着以后可能面临的这些拆分问题～","like_count":0},{"had_liked":false,"id":1762,"user_name":"walt","can_delete":false,"product_type":"c1","uid":1039816,"ip_address":"","ucode":"F0AEA21D02B7E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/c8/3f100905.jpg","comment_is_top":false,"comment_ctime":1514388899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1514388899","product_id":100002401,"comment_content":"Airbnb是开发人员写测试用例，执行测试吗？上线前不回归测试吗？","like_count":0},{"had_liked":false,"id":1575,"user_name":"mattlin","can_delete":false,"product_type":"c1","uid":1009820,"ip_address":"","ucode":"44C2CDD42A8B9A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/9c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1513647503,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1513647503","product_id":100002401,"comment_content":"喜欢这种平易近人的文章 👍","like_count":0},{"had_liked":false,"id":1562,"user_name":"00","can_delete":false,"product_type":"c1","uid":1009170,"ip_address":"","ucode":"F86C9BF0CA1E86","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/12/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1513588177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1513588177","product_id":100002401,"comment_content":"最近浏览了后台架构，了解了下thrift、kafuka。看了安姐的分享，顿悟到thrift的无缝衔接。自己做的是桌面，了解系统的架构总觉是纸上谈兵。安姐的文章通俗易懂，因为有场景，即便是没从事过相关工作，也会理解相对深刻一些。<br>3ks","like_count":0},{"had_liked":false,"id":1554,"user_name":"碰上这样的朋友","can_delete":false,"product_type":"c1","uid":1023768,"ip_address":"","ucode":"E93CCAC151382A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/18/07d88ed7.jpg","comment_is_top":false,"comment_ctime":1513562669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1513562669","product_id":100002401,"comment_content":"团队构架对拆分也会很大影响","like_count":0},{"had_liked":false,"id":1535,"user_name":"天之炽","can_delete":false,"product_type":"c1","uid":1016888,"ip_address":"","ucode":"724584A3518969","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/38/b2c0579f.jpg","comment_is_top":false,"comment_ctime":1513423596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1513423596","product_id":100002401,"comment_content":"能不能着重讲讲招人","like_count":0},{"had_liked":false,"id":1521,"user_name":"Edward","can_delete":false,"product_type":"c1","uid":1022743,"ip_address":"","ucode":"A47548B8BD57B4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/17/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1513342687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1513342687","product_id":100002401,"comment_content":"朱老师，有开源的灰度发布工具和基于微服务的自动化测试工具推荐不","like_count":0}]}