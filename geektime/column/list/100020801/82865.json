{"id":82865,"title":"44 | 答疑文章（三）：说一说这些好问题","content":"<p>这是我们专栏的最后一篇答疑文章，今天我们来说说一些好问题。</p><p>在我看来，能够帮我们扩展一个逻辑的边界的问题，就是好问题。因为通过解决这样的问题，能够加深我们对这个逻辑的理解，或者帮我们关联到另外一个知识点，进而可以帮助我们建立起自己的知识网络。</p><p>在工作中会问好问题，是一个很重要的能力。</p><p>经过这段时间的学习，从评论区的问题我可以感觉出来，紧跟课程学习的同学，对SQL语句执行性能的感觉越来越好了，提出的问题也越来越细致和精准了。</p><p>接下来，我们就一起看看同学们在评论区提到的这些好问题。在和你一起分析这些问题的时候，我会指出它们具体是在哪篇文章出现的。同时，在回答这些问题的过程中，我会假设你已经掌握了这篇文章涉及的知识。当然，如果你印象模糊了，也可以跳回文章再复习一次。</p><h1>join的写法</h1><p>在第35篇文章<a href=\"https://time.geekbang.org/column/article/80147\">《join语句怎么优化？》</a>中，我在介绍join执行顺序的时候，用的都是straight_join。@郭健 同学在文后提出了两个问题：</p><ol>\n<li>\n<p>如果用left join的话，左边的表一定是驱动表吗？</p>\n</li>\n<li>\n<p>如果两个表的join包含多个条件的等值匹配，是都要写到on里面呢，还是只把一个条件写到on里面，其他条件写到where部分？</p>\n</li>\n</ol><p>为了同时回答这两个问题，我来构造两个表a和b：</p><!-- [[[read_end]]] --><pre><code>create table a(f1 int, f2 int, index(f1))engine=innodb;\ncreate table b(f1 int, f2 int)engine=innodb;\ninsert into a values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6);\ninsert into b values(3,3),(4,4),(5,5),(6,6),(7,7),(8,8);\n</code></pre><p>表a和b都有两个字段f1和f2，不同的是表a的字段f1上有索引。然后，我往两个表中都插入了6条记录，其中在表a和b中同时存在的数据有4行。</p><p>@郭健 同学提到的第二个问题，其实就是下面这两种写法的区别：</p><pre><code>select * from a left join b on(a.f1=b.f1) and (a.f2=b.f2); /*Q1*/\nselect * from a left join b on(a.f1=b.f1) where (a.f2=b.f2);/*Q2*/\n</code></pre><p>我把这两条语句分别记为Q1和Q2。</p><p>首先，需要说明的是，这两个left join语句的语义逻辑并不相同。我们先来看一下它们的执行结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/bd/871f890532349781fdc4a4287e9f91bd.png?wh=1636*1090\" alt=\"\"></p><center><span class=\"reference\">图1 两个join的查询结果</span></center><p>可以看到：</p><ul>\n<li>语句Q1返回的数据集是6行，表a中即使没有满足匹配条件的记录，查询结果中也会返回一行，并将表b的各个字段值填成NULL。</li>\n<li>语句Q2返回的是4行。从逻辑上可以这么理解，最后的两行，由于表b中没有匹配的字段，结果集里面b.f2的值是空，不满足where 部分的条件判断，因此不能作为结果集的一部分。</li>\n</ul><p>接下来，我们看看实际执行这两条语句时，MySQL是怎么做的。</p><p>我们先一起看看语句Q1的explain结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/17/b7f27917ceb0be90ef7b201f2794c817.png?wh=3202*298\" alt=\"\"></p><center><span class=\"reference\">图2 Q1的explain结果</span></center><p>可以看到，这个结果符合我们的预期：</p><ul>\n<li>驱动表是表a，被驱动表是表b；</li>\n<li>由于表b的f1字段上没有索引，所以使用的是Block Nested Loop Join（简称BNL） 算法。</li>\n</ul><p>看到BNL算法，你就应该知道这条语句的执行流程其实是这样的：</p><ol>\n<li>\n<p>把表a的内容读入join_buffer 中。因为是select * ，所以字段f1和f2都被放入join_buffer了。</p>\n</li>\n<li>\n<p>顺序扫描表b，对于每一行数据，判断join条件（也就是(a.f1=b.f1) and (a.f1=1)）是否满足，满足条件的记录, 作为结果集的一行返回。如果语句中有where子句，需要先判断where部分满足条件后，再返回。</p>\n</li>\n<li>\n<p>表b扫描完成后，对于没有被匹配的表a的行（在这个例子中就是(1,1)、(2,2)这两行），把剩余字段补上NULL，再放入结果集中。</p>\n</li>\n</ol><p>对应的流程图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/d7/8fd4b4b179fb84caaecece84b6406ad7.jpg?wh=1142*880\" alt=\"\"></p><center><span class=\"reference\">图3 left join -BNL算法</span></center><p>可以看到，这条语句确实是以表a为驱动表，而且从执行效果看，也和使用straight_join是一样的。</p><p>你可能会想，语句Q2的查询结果里面少了最后两行数据，是不是就是把上面流程中的步骤3去掉呢？我们还是先看一下语句Q2的expain结果吧。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/9c/f5712c56dc84d331990409a5c313ea9c.png?wh=2798*396\" alt=\"\"></p><center><span class=\"reference\">图4 Q2的explain结果</span></center><p>这里先和你说一句题外话，专栏马上就结束了，我也和你一起根据explain结果“脑补”了很多次一条语句的执行流程了，所以我希望你已经具备了这个能力。今天，我们再一起分析一次SQL语句的explain结果。</p><p>可以看到，这条语句是以表b为驱动表的。而如果一条join语句的Extra字段什么都没写的话，就表示使用的是Index Nested-Loop Join（简称NLJ）算法。</p><p>因此，语句Q2的执行流程是这样的：顺序扫描表b，每一行用b.f1到表a中去查，匹配到记录后判断a.f2=b.f2是否满足，满足条件的话就作为结果集的一部分返回。</p><p>那么，<strong>为什么语句Q1和Q2这两个查询的执行流程会差距这么大呢？</strong>其实，这是因为优化器基于Q2这个查询的语义做了优化。</p><p>为了理解这个问题，我需要再和你交代一个背景知识点：在MySQL里，NULL跟任何值执行等值判断和不等值判断的结果，都是NULL。这里包括， select NULL = NULL 的结果，也是返回NULL。</p><p>因此，语句Q2里面where a.f2=b.f2就表示，查询结果里面不会包含b.f2是NULL的行，这样这个left join的语义就是“找到这两个表里面，f1、f2对应相同的行。对于表a中存在，而表b中匹配不到的行，就放弃”。</p><p>这样，这条语句虽然用的是left join，但是语义跟join是一致的。</p><p>因此，优化器就把这条语句的left join改写成了join，然后因为表a的f1上有索引，就把表b作为驱动表，这样就可以用上NLJ 算法。在执行explain之后，你再执行show warnings，就能看到这个改写的结果，如图5所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/ab/d74878e7469edb8b713a18c6158530ab.png?wh=3290*506\" alt=\"\"></p><center><span class=\"reference\">图5 Q2的改写结果</span></center><p>这个例子说明，即使我们在SQL语句中写成left join，执行过程还是有可能不是从左到右连接的。也就是说，<strong>使用left join时，左边的表不一定是驱动表。</strong></p><p>这样看来，<strong>如果需要left join的语义，就不能把被驱动表的字段放在where条件里面做等值判断或不等值判断，必须都写在on里面。</strong>那如果是join语句呢？</p><p>这时候，我们再看看这两条语句：</p><pre><code>select * from a join b on(a.f1=b.f1) and (a.f2=b.f2); /*Q3*/\nselect * from a join b on(a.f1=b.f1) where (a.f2=b.f2);/*Q4*/\n</code></pre><p>我们再使用一次看explain 和 show warnings的方法，看看优化器是怎么做的。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/f5/d9952e4c2150bc649c7f2977e6ea80f5.png?wh=1896*963\" alt=\"\"></p><center><span class=\"reference\">图6 join语句改写</span></center><p>可以看到，这两条语句都被改写成：</p><pre><code>select * from a join b where (a.f1=b.f1) and (a.f2=b.f2);\n</code></pre><p>执行计划自然也是一模一样的。</p><p>也就是说，在这种情况下，join将判断条件是否全部放在on部分就没有区别了。</p><h1>Simple Nested Loop Join 的性能问题</h1><p>我们知道，join语句使用不同的算法，对语句的性能影响会很大。在第34篇文章<a href=\"https://time.geekbang.org/column/article/79700\">《到底可不可以使用join？》</a>的评论区中，@书策稠浊 和 @朝夕心 两位同学提了一个很不错的问题。</p><p>我们在文中说到，虽然BNL算法和Simple Nested Loop Join 算法都是要判断M*N次（M和N分别是join的两个表的行数），但是Simple Nested Loop Join 算法的每轮判断都要走全表扫描，因此性能上BNL算法执行起来会快很多。</p><p>为了便于说明，我还是先为你简单描述一下这两个算法。</p><p>BNL算法的执行逻辑是：</p><ol>\n<li>\n<p>首先，将驱动表的数据全部读入内存join_buffer中，这里join_buffer是无序数组；</p>\n</li>\n<li>\n<p>然后，顺序遍历被驱动表的所有行，每一行数据都跟join_buffer中的数据进行匹配，匹配成功则作为结果集的一部分返回。</p>\n</li>\n</ol><p>Simple Nested Loop Join算法的执行逻辑是：顺序取出驱动表中的每一行数据，到被驱动表去做全表扫描匹配，匹配成功则作为结果集的一部分返回。</p><p>这两位同学的疑问是，Simple Nested Loop Join算法，其实也是把数据读到内存里，然后按照匹配条件进行判断，为什么性能差距会这么大呢？</p><p>解释这个问题，需要用到MySQL中索引结构和Buffer Pool的相关知识点：</p><ol>\n<li>\n<p>在对被驱动表做全表扫描的时候，如果数据没有在Buffer Pool中，就需要等待这部分数据从磁盘读入；<br>\n从磁盘读入数据到内存中，会影响正常业务的Buffer Pool命中率，而且这个算法天然会对被驱动表的数据做多次访问，更容易将这些数据页放到Buffer Pool的头部（请参考<a href=\"https://time.geekbang.org/column/article/80147\">第35篇文章</a>中的相关内容)；</p>\n</li>\n<li>\n<p>即使被驱动表数据都在内存中，每次查找“下一个记录的操作”，都是类似指针操作。而join_buffer中是数组，遍历的成本更低。</p>\n</li>\n</ol><p>所以说，BNL算法的性能会更好。</p><h1>distinct 和 group by的性能</h1><p>在第37篇文章<a href=\"https://time.geekbang.org/column/article/80477\">《什么时候会使用内部临时表？》</a>中，@老杨同志 提了一个好问题：如果只需要去重，不需要执行聚合函数，distinct 和group by哪种效率高一些呢？</p><p>我来展开一下他的问题：如果表t的字段a上没有索引，那么下面这两条语句：</p><pre><code>select a from t group by a order by null;\nselect distinct a from t;\n</code></pre><p>的性能是不是相同的?</p><p>首先需要说明的是，这种group by的写法，并不是SQL标准的写法。标准的group by语句，是需要在select部分加一个聚合函数，比如：</p><pre><code>select a,count(*) from t group by a order by null;\n</code></pre><p>这条语句的逻辑是：按照字段a分组，计算每组的a出现的次数。在这个结果里，由于做的是聚合计算，相同的a只出现一次。</p><blockquote>\n<p>备注：这里你可以顺便复习一下<a href=\"https://time.geekbang.org/column/article/80477\">第37篇文章</a>中关于group by的相关内容。</p>\n</blockquote><p>没有了count(*)以后，也就是不再需要执行“计算总数”的逻辑时，第一条语句的逻辑就变成是：按照字段a做分组，相同的a的值只返回一行。而这就是distinct的语义，所以不需要执行聚合函数时，distinct 和group by这两条语句的语义和执行流程是相同的，因此执行性能也相同。</p><p>这两条语句的执行流程是下面这样的。</p><ol>\n<li>\n<p>创建一个临时表，临时表有一个字段a，并且在这个字段a上创建一个唯一索引；</p>\n</li>\n<li>\n<p>遍历表t，依次取数据插入临时表中：</p>\n<ul>\n<li>如果发现唯一键冲突，就跳过；</li>\n<li>否则插入成功；</li>\n</ul>\n</li>\n<li>\n<p>遍历完成后，将临时表作为结果集返回给客户端。</p>\n</li>\n</ol><h1>备库自增主键问题</h1><p>除了性能问题，大家对细节的追问也很到位。在第39篇文章<a href=\"https://time.geekbang.org/column/article/80531\">《自增主键为什么不是连续的？》</a>评论区，@帽子掉了 同学问到：在binlog_format=statement时，语句A先获取id=1，然后语句B获取id=2；接着语句B提交，写binlog，然后语句A再写binlog。这时候，如果binlog重放，是不是会发生语句B的id为1，而语句A的id为2的不一致情况呢？</p><p>首先，这个问题默认了“自增id的生成顺序，和binlog的写入顺序可能是不同的”，这个理解是正确的。</p><p>其次，这个问题限定在statement格式下，也是对的。因为row格式的binlog就没有这个问题了，Write row event里面直接写了每一行的所有字段的值。</p><p>而至于为什么不会发生不一致的情况，我们来看一下下面的这个例子。</p><pre><code>create table t(id int auto_increment primary key);\ninsert into t values(null);\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/b5/25/b55b2167aa301d899ccc86a00b496b25.png?wh=1309*210\" alt=\"\"></p><center><span class=\"reference\">图7 insert 语句的binlog</span></center><p>可以看到，在insert语句之前，还有一句SET INSERT_ID=1。这条命令的意思是，这个线程里下一次需要用到自增值的时候，不论当前表的自增值是多少，固定用1这个值。</p><p>这个SET INSERT_ID语句是固定跟在insert语句之前的，比如@帽子掉了同学提到的场景，主库上语句A的id是1，语句B的id是2，但是写入binlog的顺序先B后A，那么binlog就变成：</p><pre><code>SET INSERT_ID=2;\n语句B；\nSET INSERT_ID=1;\n语句A；\n</code></pre><p>你看，在备库上语句B用到的INSERT_ID依然是2，跟主库相同。</p><p>因此，即使两个INSERT语句在主备库的执行顺序不同，自增主键字段的值也不会不一致。</p><h1>小结</h1><p>今天这篇答疑文章，我选了4个好问题和你分享，并做了分析。在我看来，能够提出好问题，首先表示这些同学理解了我们文章的内容，进而又做了深入思考。有你们在认真的阅读和思考，对我来说是鼓励，也是动力。</p><p>说实话，短短的三篇答疑文章无法全部展开同学们在评论区留下的高质量问题，之后有的同学还会二刷，也会有新的同学加入，大家想到新的问题就请给我留言吧，我会继续关注评论区，和你在评论区交流。</p><p>老规矩，答疑文章也是要有课后思考题的。</p><p>在<a href=\"https://time.geekbang.org/column/article/70562\">第8篇文章</a>的评论区， @XD同学提到一个问题：他查看了一下innodb_trx，发现这个事务的trx_id是一个很大的数（281479535353408），而且似乎在同一个session中启动的会话得到的trx_id是保持不变的。当执行任何加写锁的语句后，trx_id都会变成一个很小的数字（118378）。</p><p>你可以通过实验验证一下，然后分析看看，事务id的分配规则是什么，以及MySQL为什么要这么设计呢？</p><p>你可以把你的结论和分析写在留言区，我会在下一篇文章和你讨论这个问题。感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><h1>上期问题时间</h1><p>上期的问题是，怎么给分区表t创建自增主键。由于MySQL要求主键包含所有的分区字段，所以肯定是要创建联合主键的。</p><p>这时候就有两种可选：一种是(ftime, id)，另一种是(id, ftime)。</p><p>如果从利用率上来看，应该使用(ftime, id)这种模式。因为用ftime做分区key，说明大多数语句都是包含ftime的，使用这种模式，可以利用前缀索引的规则，减少一个索引。</p><p>这时的建表语句是：</p><pre><code>CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `ftime` datetime NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  PRIMARY KEY (`ftime`,`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\nPARTITION BY RANGE (YEAR(ftime))\n(PARTITION p_2017 VALUES LESS THAN (2017) ENGINE = MyISAM,\n PARTITION p_2018 VALUES LESS THAN (2018) ENGINE = MyISAM,\n PARTITION p_2019 VALUES LESS THAN (2019) ENGINE = MyISAM,\n PARTITION p_others VALUES LESS THAN MAXVALUE ENGINE = MyISAM);\n</code></pre><p>当然，我的建议是你要尽量使用InnoDB引擎。InnoDB表要求至少有一个索引，以自增字段作为第一个字段，所以需要加一个id的单独索引。</p><pre><code>CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `ftime` datetime NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  PRIMARY KEY (`ftime`,`id`),\n  KEY `id` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\nPARTITION BY RANGE (YEAR(ftime))\n(PARTITION p_2017 VALUES LESS THAN (2017) ENGINE = InnoDB,\n PARTITION p_2018 VALUES LESS THAN (2018) ENGINE = InnoDB,\n PARTITION p_2019 VALUES LESS THAN (2019) ENGINE = InnoDB,\n PARTITION p_others VALUES LESS THAN MAXVALUE ENGINE = InnoDB);\n</code></pre><p>当然把字段反过来，创建成：</p><pre><code>  PRIMARY KEY (`id`,`ftime`),\n  KEY `id` (`ftime`)\n</code></pre><p>也是可以的。</p><p>评论区留言点赞板：</p><blockquote>\n<p>@夹心面包 、@郭江伟 同学提到了最后一种方案。</p>\n</blockquote><blockquote>\n<p>@aliang 同学提了一个好问题，关于open_files_limit和innodb_open_files的关系，我在回复中做了说明，大家可以看一下。</p>\n</blockquote><blockquote>\n<p>@万勇 提了一个好问题，实际上对于现在官方的版本，将字段加在中间还是最后，在性能上是没差别的。但是，我建议大家养成习惯（如果你是DBA就帮业务开发同学养成习惯），将字段加在最后面，因为这样还是比较方便操作的。这个问题，我也在评论的答复中做了说明，你可以看一下。</p>\n</blockquote>","comments":[{"had_liked":false,"id":70232,"user_name":"玉哥","can_delete":false,"product_type":"c1","uid":1275710,"ip_address":"","ucode":"FC88E11D3A340B","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/3e/702c8782.jpg","comment_is_top":false,"comment_ctime":1551056530,"is_pvip":false,"replies":[{"id":"25039","content":"对，驱动表现过滤，然后进join buffer<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551058128,"ip_address":"","comment_id":70232,"utype":1}],"discussion_count":1,"race_medal":0,"score":"138990010002","product_id":100020801,"comment_content":"老师，BNl算法，如果where条件中有驱动表的过滤条件，也不会在join时候全部载入内存吧？","like_count":32,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440504,"discussion_content":"对，驱动表现过滤，然后进join buffer\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551058128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69866,"user_name":"龙文","can_delete":false,"product_type":"c1","uid":1303084,"ip_address":"","ucode":"D987E8F706FB1D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e2/2c/0d04f87b.jpg","comment_is_top":false,"comment_ctime":1550892714,"is_pvip":false,"replies":[{"id":"24947","content":"1. 会<br>2. 你这里<br>  session 1 成功加锁一个record lock；<br><br>  session 2执行的是一个select 语句，而且a=1 and b=1就只锁一行（a，b上有联合唯一索引），这里就是要申请一个记录行锁(but not gap waiting)。<br>这里虽然没有加锁成功，但是已经加入了锁队列（只是这个锁是处于等待状态）<br>  ---这时候队列里面有两个锁对象了<br><br>然后session 1 再insert失败的时候，就要加next-key lock，（注意这个锁对象跟第一个锁对象不同）。<br>   然后死锁检测看到，2号锁在等1号锁；3号要等2号，而3和1又是同一个session，就认为是死锁了。","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550977236,"ip_address":"","comment_id":69866,"utype":1}],"discussion_count":8,"race_medal":0,"score":"126104944298","product_id":100020801,"comment_content":"老师你好，我在第21讲求助了一个死锁问题，当时你回复说后面会解答，不过我浏览了下后续文章没找到解答，所以再次求助下。ps:用的阿里云的rds,提了工单没效果啊<br>作者回复: 有的，你看一下第40篇 “insert 唯一键冲突”这一段<br><br>ps:我已经离开阿里云挺久的了 😆<br><br>---------------------------------------------<br>谢谢老师,我看了第40篇,还是有地方不太明白,再打扰下<br>mysql 版本5.6<br>隔离级别为rc<br>CREATE TABLE `uk_test` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT,<br>  `a` int(11) NOT NULL,<br>  `b` int(11) NOT NULL,<br>  `c` int(11) NOT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `uk_a_b` (`a`,`b`) USING BTREE<br>) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4<br>表中数据：<br>+----+---+---+---+<br>| id | a | b | c |<br>+----+---+---+---+<br>| 1 | 1 | 1 | 2 |<br>| 6 | 1 | 2 | 1 |<br>+----+---+---+---+<br>sql:执行顺序<br>session1:begin;<br>session2:begin;<br>session1:select * from uk_test where a = 1 and b = 1 for update;<br>session2:select * from uk_test where a = 1 and b = 1 for update;<br>session1:insert into uk_test (a,b,c) values(1,1,2) on duplicate key update c = 2;<br>session2:ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction<br><br>我的疑问是:<br>1.rc隔离级别下对唯一键的insert也会加next-key lock吗？<br><br>2.死锁日志显示<br>  session 1已经成功加上行锁(lock_mode X locks rec but not gap),<br><br>  session 2在等待同一个行锁(lock_mode X locks rec but not gap waiting),<br><br>  session1这时因为等待lock_mode X waiting而死锁。<br>  这里的lock_mode X waiting是指next-key lock吗？<br>  如果是的话，没想明白这里怎么形成资源循环等待了？<br>我的猜测是session1 这时持有行锁，要next-key lock 所以要去加gap锁。session 2持有gap锁在等行锁。但如果是这样为什么session2 在rc下select for update，且记录存在时会加gap锁?还有gap锁加锁不是不互斥吗？<br> ","like_count":29,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440322,"discussion_content":"1. 会\n2. 你这里\n  session 1 成功加锁一个record lock；\n\n  session 2执行的是一个select 语句，而且a=1 and b=1就只锁一行（a，b上有联合唯一索引），这里就是要申请一个记录行锁(but not gap waiting)。\n这里虽然没有加锁成功，但是已经加入了锁队列（只是这个锁是处于等待状态）\n  ---这时候队列里面有两个锁对象了\n\n然后session 1 再insert失败的时候，就要加next-key lock，（注意这个锁对象跟第一个锁对象不同）。\n   然后死锁检测看到，2号锁在等1号锁；3号要等2号，而3和1又是同一个session，就认为是死锁了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550977236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2344373,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c5/b5/25179772.jpg","nickname":"Jamey","note":"","ucode":"449E4F65339CDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380877,"discussion_content":"mysql 8.0.22 在rc 级别下未重现（ set global transaction isolation level read committed;）T1: 执行session 1 （begin;\nselect * from uk_test where a = 1 and b = 1 for update;）T2： 执行 session 2 （begin;\nselect * from uk_test where a = 1 and b = 1 for update;）此时 block 。T3：执行 session 1（insert into uk_test (a,b,c) values(1,1,2) on duplicate key update c = 2;） 成功， 但 session 2 依旧block， 并未出现 dead lock ","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1624771756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1986739,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","nickname":"LWD","note":"","ucode":"DDA444DB113C01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588573,"discussion_content":"唯一索引冲突降级读锁，导致死锁；跟40章原理一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663856752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284857,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/f9/6d55ee0b.jpg","nickname":"Tiger","note":"","ucode":"6F9CAB3C29BAD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552359,"discussion_content":"rc的隔离级别下不是只有record lock吗？next-key lock和gap lock不是因为rr下要解决幻读才引入的吗？没明白rc的隔离级别下，什么场景会加next-key lock？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645429880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1586404,"avatar":"https://static001.geekbang.org/account/avatar/00/18/34/e4/4450c053.jpg","nickname":"四味糖","note":"","ucode":"6648BACBF1CFEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362484,"discussion_content":"on duplicate key update语句执行是会先加s锁，判断记录是否已经存在，感觉这时候就阻塞了然后死锁了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616946753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275424,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/aiaO77mTsCalcia49ElevPn988pgwcL3rD5ic1DTD6E8rbAwfmguiaPsibHicsYGQID7VbmD21GUAV9bbuNMfDhDGGyg/132","nickname":"穿针土豆丝","note":"","ucode":"5DA3BDDE5162E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357816,"discussion_content":"个人觉得，这里描述有点问题，RC 级别下，加的应该都是行锁吧？1号获取锁，2号等1号的锁，3号又要等2号的锁，此时3号就是1号。相当于我发现你在等我，我也在等你，所以产生了死锁。死锁检测自然要回滚一个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615873725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1043325,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/c9xpiakQ3OC1AlfCeW03lLnnb7mj5v35Hib8YDs66zpnVib2n2qFichFmFp2Ec4QDPR0dKh38MkBBLyD3bE4NiaanZQ/132","nickname":"龙晓","note":"","ucode":"FAF34F1C65D103","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1275424,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/aiaO77mTsCalcia49ElevPn988pgwcL3rD5ic1DTD6E8rbAwfmguiaPsibHicsYGQID7VbmD21GUAV9bbuNMfDhDGGyg/132","nickname":"穿针土豆丝","note":"","ucode":"5DA3BDDE5162E4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362662,"discussion_content":"我看到的也是行锁\n*** (2) TRANSACTION:\nTRANSACTION 5544474, ACTIVE 11 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1136, 3 row lock(s), undo log entries 1\nMySQL thread id 10, OS thread handle 140338301662976, query id 104 localhost root update\ninsert into uk_test (a,b,c) values(1,1,2) on duplicate key update c = 2\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 117 page no 4 n bits 72 index uk_a_b of table `test`.`uk_test` trx id 5544474 lock_mode X locks rec but not gap","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617003464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":357816,"ip_address":""},"score":362662,"extra":""}]},{"author":{"id":1276205,"avatar":"https://static001.geekbang.org/account/avatar/00/13/79/2d/99a263f4.jpg","nickname":"tanic.xiao","note":"","ucode":"D970A2C1254CEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212207,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584946016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70731,"user_name":"还一棵树","can_delete":false,"product_type":"c1","uid":1317709,"ip_address":"","ucode":"C187F2A141D60E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eop9WylZJicLQxlvXukXUgPp39zJHyyReK5s1C9VhA6rric7GiarbfQMuWhdCCDdxdfL610Hc4cNkn9Q/132","comment_is_top":false,"comment_ctime":1551170773,"is_pvip":false,"replies":[{"id":"25754","content":"<br>“如果按照这个流程，比如a里面有2行重复的数据， 如果拿b的数据在a中判断，存在则保留，那结果集只有一条数据，”<br><br>不会呀，你看它是这样的：<br>假设join buffer中有两个行1<br><br>然后被驱动表取出一个1，<br>  跟join buffer中第一个1比较，发现满足条件，放到结果集；<br>  跟join buffer中第二个1比较，发现满足条件，放到结果集；<br> <br>  是得到两行的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551413009,"ip_address":"","comment_id":70731,"utype":1}],"discussion_count":1,"race_medal":0,"score":"91745483989","product_id":100020801,"comment_content":"看到 BNL 算法，你就应该知道这条语句的执行流程其实是这样<br>文章中的流程是写错了？还是我理解的有问题<br>1、如果是a表数据放入join buffer，根据b的每一条记录去判断是否在a中 如果在则保留记录<br>这个更像是b left join a。  而不是a  left join b<br>2、如果按照这个流程，比如a里面有2行重复的数据， 如果拿b的数据在a中判断，存在则保留，那结果集只有一条数据， 而按照a left join b 会出现2条结果的","like_count":21,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440799,"discussion_content":"\n“如果按照这个流程，比如a里面有2行重复的数据， 如果拿b的数据在a中判断，存在则保留，那结果集只有一条数据，”\n\n不会呀，你看它是这样的：\n假设join buffer中有两个行1\n\n然后被驱动表取出一个1，\n  跟join buffer中第一个1比较，发现满足条件，放到结果集；\n  跟join buffer中第二个1比较，发现满足条件，放到结果集；\n \n  是得到两行的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551413009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70257,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1551060483,"is_pvip":false,"replies":[{"id":"25095","content":"嗯 我的意思是，如果where条件里面，用到了b.f2的判断，干脆就直接写成join，不需要left join了<br><br><br>如果业务逻辑需要left join， 就要把条件都放到on里面<br><br>业务逻辑正确性还是优先的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551080945,"ip_address":"","comment_id":70257,"utype":1}],"discussion_count":1,"race_medal":0,"score":"87450406403","product_id":100020801,"comment_content":"老师，看评论包括您的回复说“ left join 后加上 where 的话， 肯定会被优化器优化成 join where 的形式， 那是否下次写 left join ..where 的时候， 不如直接写成 join .. where”，这个也是分情况的吧比如还是文章中的2张表，select * from a left join b on(a.f1=b.f1) where (a.f2=2);&#47;*Q5*&#47;和select * from a  join b on(a.f1=b.f1) where (a.f2=2);&#47;*Q6*&#47; 这个left join和join的语意和返回结果都不一样，怎么能直接写成join呢，如果是where b.f2=xx 的where条件可以直接写成join因为根据结果是不需要left的。","like_count":20,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440524,"discussion_content":"嗯 我的意思是，如果where条件里面，用到了b.f2的判断，干脆就直接写成join，不需要left join了\n\n\n如果业务逻辑需要left join， 就要把条件都放到on里面\n\n业务逻辑正确性还是优先的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551080945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70212,"user_name":"梦康","can_delete":false,"product_type":"c1","uid":1069512,"ip_address":"","ucode":"8935F3C329C58E","user_header":"https://static001.geekbang.org/account/avatar/00/10/51/c8/83852d5a.jpg","comment_is_top":false,"comment_ctime":1551053733,"is_pvip":false,"replies":[{"id":"25046","content":"不好意思，确实你的问题比较难一些<br><br>最近在做收尾的工作，后面一定会把问题都清理掉的哈。<br><br>你的问题质量高，是我喜欢回答的问题类型😆","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551059057,"ip_address":"","comment_id":70212,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70270530469","product_id":100020801,"comment_content":"😂留言的人太多，辛苦老实答疑了。虽然我的问题没能被翻牌子","like_count":16,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440494,"discussion_content":"不好意思，确实你的问题比较难一些\n\n最近在做收尾的工作，后面一定会把问题都清理掉的哈。\n\n你的问题质量高，是我喜欢回答的问题类型😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551059057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83282,"user_name":"大宝","can_delete":false,"product_type":"c1","uid":1321975,"ip_address":"","ucode":"FC1BCF0464B6D6","user_header":"https://static001.geekbang.org/account/avatar/00/14/2b/f7/f5ae026c.jpg","comment_is_top":false,"comment_ctime":1554516631,"is_pvip":false,"replies":[{"id":"30153","content":"innblock 可以了解下😆","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1554616175,"ip_address":"","comment_id":83282,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57389091479","product_id":100020801,"comment_content":"老师你好，看了你回复 @彼得.林 时说，“在线服务最好不要让索引树超过4层“；那么有没有什么好的方法或者工具可以查看当前表的层数吗？","like_count":13,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445959,"discussion_content":"innblock 可以了解下😆","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1554616175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69897,"user_name":"千木","can_delete":false,"product_type":"c1","uid":1304605,"ip_address":"","ucode":"32EBF403E9088E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/fJ5BEicRVnXAwCxkIYhJZ0woiaQ38ibUYkYH125bzL2Y2ib1YS9b7Q9S5qia2Cia9UWzUoDBGeWJibB7p9xSnib7iaU8kzw/132","comment_is_top":false,"comment_ctime":1550899009,"is_pvip":false,"replies":[{"id":"24923","content":"BNL算法拿的数据是确定的只会拿一次（遍历一遍）<br>而simple nested loop join是会遍历多次的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550943798,"ip_address":"","comment_id":69897,"utype":1}],"discussion_count":4,"race_medal":0,"score":"57385473857","product_id":100020801,"comment_content":"老师您好，join使用join_buffer和内存区别那个问题的第一点解释我还是有些纳闷，你说由于从磁盘拿数据到内存里面会导致等等的性能问题我能够理解，但是说即使使用nbl算法也会涉及到从磁盘拿数据到内存吧，所以这点导致两种算法执行差异貌似不太合理，您觉得呢？","like_count":13,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440340,"discussion_content":"BNL算法拿的数据是确定的只会拿一次（遍历一遍）\n而simple nested loop join是会遍历多次的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550943798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623487,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sPORo6cN3GSVxjHj9nqSAPn7KG4wtSTqNUommjNndpf8qd7bHKHquuldXZfxD5nF1ldy4LeoAQNwSsOgcmWG9w/132","nickname":"守望者","note":"","ucode":"DEE375A5F2D57A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347587,"discussion_content":"如果对join_buffer排序，再对join_buffer用二分法比较，性能上还可以有提升","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612262838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3007210,"avatar":"","nickname":"Geek_a1699c","note":"","ucode":"CF7DB00BE36B77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578176,"discussion_content":"BNL算法不是将数据从硬盘中加载到内存的buffer pool吗，如果不是的话，那加载到哪里呢，有点疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656555600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124075,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/eb/24e0ac9c.jpg","nickname":"嬴梦川","note":"","ucode":"104CDFD26A1711","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376182,"discussion_content":"有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622005676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69636,"user_name":"白永伟","can_delete":false,"product_type":"c1","uid":1200629,"ip_address":"","ucode":"3578587B8DCADC","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/f5/211dff03.jpg","comment_is_top":false,"comment_ctime":1550800581,"is_pvip":false,"replies":[{"id":"24926","content":"“自增id的起始值是多少，有没有可能跟已有的记录id冲突？”  <br>如果没有主备延迟就不会出现；<br><br>“尤其是备库还没有处理完同步过来的binlog就开始接受客户端请求时。” ， 对，这种情况就会。<br><br>“如果要求备库必须处理完binlog才能接受客户端请求，那么怎么保证主备切换的过程中，不影响用户使用” 一般都是有这个要求的。要尽量减少影响，就是控制主备延迟。<br><br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550969358,"ip_address":"","comment_id":69636,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44500473541","product_id":100020801,"comment_content":"老师，关于备库自增id我有一个问题。既然binlog不管是statement模式还是row模式，里面的insert语句跟着的自增id都是固定的。那假如发生主备切换，备库变成主库后，客户端往新主库里插入数据时，自增id的起始值是多少，有没有可能跟已有的记录id冲突？尤其是备库还没有处理完同步过来的binlog就开始接受客户端请求时。如果要求备库必须处理完binlog才能接受客户端请求，那么怎么保证主备切换的过程中，不影响用户使用。谢谢。","like_count":10,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440197,"discussion_content":"“自增id的起始值是多少，有没有可能跟已有的记录id冲突？”  \n如果没有主备延迟就不会出现；\n\n“尤其是备库还没有处理完同步过来的binlog就开始接受客户端请求时。” ， 对，这种情况就会。\n\n“如果要求备库必须处理完binlog才能接受客户端请求，那么怎么保证主备切换的过程中，不影响用户使用” 一般都是有这个要求的。要尽量减少影响，就是控制主备延迟。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550969358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2797976,"avatar":"","nickname":"Geek_323a60","note":"","ucode":"CDC276EC255411","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586831,"discussion_content":"经过测试，在 binlog_format=row 下，binlog 中并没有固定的自增 id。\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;\n/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;\nDELIMITER /*!*/;\n# at 4\n#220907  6:50:27 server id 2  end_log_pos 123 CRC32 0xb61f2296 \tStart: binlog v 4, server v 5.7.36-log created 220907  6:50:27 at startup\n# Warning: this binlog is either in use or was not closed properly.\nROLLBACK/*!*/;\nBINLOG &#39;\nMz8YYw8CAAAAdwAAAHsAAAABAAQANS43LjM2LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAzPxhjEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA\nAZYiH7Y=\n&#39;/*!*/;\n# at 293\n#220907  6:50:34 server id 2  end_log_pos 341 CRC32 0xc65f50fe \tTable_map: `mytest`.`t` mapped to number 156\n# at 341\n#220907  6:50:34 server id 2  end_log_pos 389 CRC32 0xf59c8ead \tWrite_rows: table id 156 flags: STMT_END_F\n\nBINLOG &#39;\nOj8YYxMCAAAAMAAAAFUBAAAAAJwAAAAAAAEABm15dGVzdAABdAADAwMDAAb+UF/G\nOj8YYx4CAAAAMAAAAIUBAAAAAJwAAAAAAAEAAgAD//gIAAAAPAAAADwAAACtjpz1\n&#39;/*!*/;\n### INSERT INTO `mytest`.`t`\n### SET\n###   @1=8 /* INT meta=0 nullable=0 is_null=0 */\n###   @2=60 /* INT meta=0 nullable=1 is_null=0 */\n###   @3=60 /* INT meta=0 nullable=1 is_null=0 */\n# at 389\n#220907  6:50:34 server id 2  end_log_pos 420 CRC32 0x7863e3bc \tXid = 3845\nCOMMIT/*!*/;\nSET @@SESSION.GTID_NEXT= &#39;AUTOMATIC&#39; /* added by mysqlbinlog */ /*!*/;\nDELIMITER ;\n# End of log file\n/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;\n/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662533628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76869,"user_name":"彼得.林","can_delete":false,"product_type":"c1","uid":1019306,"ip_address":"","ucode":"445B9751A88554","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/aa/e739c4fa.jpg","comment_is_top":false,"comment_ctime":1552732706,"is_pvip":false,"replies":[{"id":"28920","content":"你可以这么理解， N层放不下的时候，就增加一层来放。<br><br>这个行为是由页分裂触发的<br>在线服务最好不要让索引树超过4层","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1553420542,"ip_address":"","comment_id":76869,"utype":1}],"discussion_count":3,"race_medal":0,"score":"40207438370","product_id":100020801,"comment_content":"不知道老师还会不会回复问题：<br>b+树索引结构的层次和表数据量的关系是怎么样的？也就是说15万的数据量是三层结构？达到多少数据量是四层次？<br>一般在线服务中一个表的数据量一般多大合适？","like_count":9,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443480,"discussion_content":"你可以这么理解， N层放不下的时候，就增加一层来放。\n\n这个行为是由页分裂触发的\n在线服务最好不要让索引树超过4层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553420542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312918,"avatar":"https://static001.geekbang.org/account/avatar/00/14/08/96/231fdd9e.jpg","nickname":"未知","note":"","ucode":"DB389CEBEEE9E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387603,"discussion_content":"“最好不让超过4层”\n怎么让不超过4层呢？内存也不变的情况下，让索引小一点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628298082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1285652,"avatar":"","nickname":"mycat","note":"","ucode":"6878BD32D042F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1312918,"avatar":"https://static001.geekbang.org/account/avatar/00/14/08/96/231fdd9e.jpg","nickname":"未知","note":"","ucode":"DB389CEBEEE9E1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559031,"discussion_content":"可以考虑把索引字段类型和长度细化一下，使用最合适得字段类型，让每个page页中存放更多的索引，这样就可以避免页分裂的更多，进而避免索引树更深","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648568311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387603,"ip_address":""},"score":559031,"extra":""}]}]},{"had_liked":false,"id":127150,"user_name":"yhui","can_delete":false,"product_type":"c1","uid":1512714,"ip_address":"","ucode":"1AAAF47E41FFB8","user_header":"https://static001.geekbang.org/account/avatar/00/17/15/0a/c450e565.jpg","comment_is_top":false,"comment_ctime":1566569509,"is_pvip":false,"replies":[{"id":"47749","content":"你可否把表结构、插入数据语句都贴一下？<br><br>就是有没有稳定的复现方法（带上MySQL版本号）","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1566953289,"ip_address":"","comment_id":127150,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23041405989","product_id":100020801,"comment_content":"我真的很迫切需要你的帮助，我是台湾人，遇到一个很神奇的问题<br>where in a(1,2,3,5,7,8,9) and b in(3) and c in(1,2) order by id desc<br>我建了一个abc联合索引，发现这语句尽然没用上联合索引 很奇怪，in里删一两个值又能选对索引，这in有什么规律 奥秘吗？多谢指点，我邀请我同事都买了你的课程","like_count":5,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464342,"discussion_content":"你可否把表结构、插入数据语句都贴一下？\n\n就是有没有稳定的复现方法（带上MySQL版本号）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566953289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1986739,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","nickname":"LWD","note":"","ucode":"DDA444DB113C01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588581,"discussion_content":"这个语句就等价于(a=1 and b=3 and c =1) or ..... ；如果走索引要走多次数搜索且server还需要做一次排序；我怀疑是你这个表的数据量太小了所以优化器觉得不如走聚簇索引省去排序划算；in减去几个条件使得树搜索次数变少，优化器就觉得只需要少数树搜索就能得到结果牺牲一次排序应该成本会更低所以又走索引了；走不走索引跟数据量密切相关的，所以最好还是贴出表数据比较好得出结论","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663857603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122559,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1565424082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10155358674","product_id":100020801,"comment_content":"这篇答疑很实用呀!第一个问题之前也发现有这样的现象，不过解释不清楚为什么，不过按照自己想要的也算使用对了left join 。<br>感谢老师，专栏接近尾声，现在回想一下，确实增加了不少见识，不过由于记忆不太好，加之有些知识消化的不好有些已经模糊啦😄<br>第一遍结束，再来第二遍，把实验都操作操作，应该会好一些。<br>感谢😊","like_count":2},{"had_liked":false,"id":330151,"user_name":"阿甘","can_delete":false,"product_type":"c1","uid":1057843,"ip_address":"","ucode":"BC93175B70E05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/33/bcf37f50.jpg","comment_is_top":false,"comment_ctime":1641817000,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5936784296","product_id":100020801,"comment_content":"老师，请教一下对于in语句导致的SQL超长有没有比较好的解决方案？特别是多个in有and&#47;or关系的情况。","like_count":1},{"had_liked":false,"id":226223,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1592006816,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5886974112","product_id":100020801,"comment_content":"顺序扫描表b，对于每一行数据，判断join条件（也就是（a.f1=b.f1）and(a.f1=1)）是否满足...<br>这里的   条件 a.f1 = 1 是认真的吗？没有写错吗？","like_count":1,"discussions":[{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335594,"discussion_content":"我觉得写错了，应该是a.f2=b.f2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608228610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191516,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1584778538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879745834","product_id":100020801,"comment_content":"这里图2里面的join条件是a.f1 = 1，不是上面文字里的a.f2=b.f2呀，是因为编辑过了么？","like_count":1},{"had_liked":false,"id":76390,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1132777,"ip_address":"","ucode":"82056BBE2E4488","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/e9/f7dba760.jpg","comment_is_top":false,"comment_ctime":1552581896,"is_pvip":false,"replies":[{"id":"27975","content":"看看是不是有什么外部工具在工作","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1552694756,"ip_address":"","comment_id":76390,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5847549192","product_id":100020801,"comment_content":"这两天在线上遇到一个比较诡异的事情，突然有几分钟连不上MySQL，通过error日志和监控的processlist显示，MySQL把很多链接都kill掉了，但处于sleep状态和show status的语句没有kill，看监控的资源使用情况不是很高，只是innodb rows read指标特别高，现在完全是没头绪了","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443286,"discussion_content":"看看是不是有什么外部工具在工作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552694756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70059,"user_name":"龙文","can_delete":false,"product_type":"c1","uid":1303084,"ip_address":"","ucode":"D987E8F706FB1D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e2/2c/0d04f87b.jpg","comment_is_top":false,"comment_ctime":1550979376,"is_pvip":false,"replies":[{"id":"24995","content":"👍","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550998068,"ip_address":"","comment_id":70059,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845946672","product_id":100020801,"comment_content":"明白了 谢谢老师！","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440419,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550998068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69820,"user_name":"龙文","can_delete":false,"product_type":"c1","uid":1303084,"ip_address":"","ucode":"D987E8F706FB1D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e2/2c/0d04f87b.jpg","comment_is_top":false,"comment_ctime":1550853646,"is_pvip":false,"replies":[{"id":"24875","content":"有的，你看一下第40篇 “insert 唯一键冲突”这一段<br><br>ps:我已经离开阿里云挺久的了 😆","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550886375,"ip_address":"","comment_id":69820,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845820942","product_id":100020801,"comment_content":"老师你好，我在第21讲求助了一个死锁问题，当时你回复说后面会解答，不过我浏览了下后续文章没找到解答，所以再次求助下。ps:用的阿里云的rds,提了工单没效果啊","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440301,"discussion_content":"有的，你看一下第40篇 “insert 唯一键冲突”这一段\n\nps:我已经离开阿里云挺久的了 😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550886375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69727,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1550820402,"is_pvip":false,"replies":[{"id":"24817","content":"跟进得很快啊大家😆","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550829708,"ip_address":"","comment_id":69727,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845787698","product_id":100020801,"comment_content":"这么快就要结束，好快啊","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440247,"discussion_content":"跟进得很快啊大家😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550829708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69683,"user_name":"万勇","can_delete":false,"product_type":"c1","uid":1309092,"ip_address":"","ucode":"BC9E0918DF4516","user_header":"https://static001.geekbang.org/account/avatar/00/13/f9/a4/f0b92135.jpg","comment_is_top":false,"comment_ctime":1550808044,"is_pvip":false,"replies":[{"id":"24801","content":"就是我这篇末尾建议的几种建表方法,就是建立联系了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550815616,"ip_address":"","comment_id":69683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845775340","product_id":100020801,"comment_content":"感谢老师上一期的解答，还请教一个分区表的问题，分区表创建的聚集索引是分区本地维护的吧，但是主键索引要保证全局唯一性。那分区和主键索引之间是不是要建立一种关系？另外分区表如果我们创建普通索引，按道理可以分区创建的，分区维护自己的普通索引，各分区之间互不影响。","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440224,"discussion_content":"就是我这篇末尾建议的几种建表方法,就是建立联系了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550815616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360427,"user_name":"知","can_delete":false,"product_type":"c1","uid":1963248,"ip_address":"四川","ucode":"E59EE92519086B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f4/f0/0cea836f.jpg","comment_is_top":false,"comment_ctime":1666572493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666572493","product_id":100020801,"comment_content":"老师，如果是双M架构的话，使用binlog格式为statment或者row的话如果自增主键情况下，会不会导致主备数据的id不一致问题。<br><br>主库a先自增到主键为2，还没来得及发给从库b，此时b写入了新的数据，导致ab库的主键不一致。","like_count":0},{"had_liked":false,"id":359468,"user_name":"晨风破晓","can_delete":false,"product_type":"c1","uid":1321464,"ip_address":"广东","ucode":"F2BC46428A97B5","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/f8/561c5be1.jpg","comment_is_top":false,"comment_ctime":1665562139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665562139","product_id":100020801,"comment_content":"在语义相同，有索引的情况下：group by和distinct都能使用索引，效率相同。<br>在语义相同，无索引的情况下：distinct效率高于group by。原因是distinct 和 group by都会进行分组操作，但group by可能会进行排序，触发filesort，导致sql执行效率低下。","like_count":0},{"had_liked":false,"id":339650,"user_name":"sotondolphin","can_delete":false,"product_type":"c1","uid":1307088,"ip_address":"","ucode":"42198CE9B201FD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QZBHia4nXtspEaRibpmMIMVcDA2HHkNypfvVJ2IllQC3FeFCt7f9iaHW7z5yQ4lcB79ibJwia6tNtpuFroufntMhc2g/132","comment_is_top":false,"comment_ctime":1648270520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648270520","product_id":100020801,"comment_content":"写sql语句不但要考虑性能也要把语句的意思明确表达出来，如果你想去重，就直接用distcint，不需要搞一个group by来做同样的事情","like_count":0},{"had_liked":false,"id":322626,"user_name":"等风来","can_delete":false,"product_type":"c1","uid":1350677,"ip_address":"","ucode":"5B7FF74A51F534","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/15/719f1f44.jpg","comment_is_top":false,"comment_ctime":1637504724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637504724","product_id":100020801,"comment_content":"join 方面我还有一个问题， 三表以上的join语句，同时用上lefe join 和right join 如何判断这个驱动表","like_count":0},{"had_liked":false,"id":304381,"user_name":"lleft","can_delete":false,"product_type":"c1","uid":1970443,"ip_address":"","ucode":"D573EB509455AE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx1V1QAxC4NHaxYZGyuibBN8lcURJWc5nrnO4yic1kxnDemYV2FJGialf47kYX9qtDnZZOfe1SJeLicg/132","comment_is_top":false,"comment_ctime":1627377663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627377663","product_id":100020801,"comment_content":"本文中说的备库自增值的问题时binlog_format=statement时，由于binlog中会记录自增主键的值通过set INSERT_ID。那么39篇文章中的自增锁的优化环节却说“这是因为原库 session B 的 insert 语句，生成的 id 不连续。这个不连续的 id，用 statement 格式的 binlog 来串行执行，是执行不出来的。”，感觉有点矛盾呀，既然记录了自增值那从库应该顺序执行binlog自增值应该也是不连续的呀？就不会出现主从不一致了呀","like_count":0},{"had_liked":false,"id":303524,"user_name":"阿O、不拽","can_delete":false,"product_type":"c1","uid":1331034,"ip_address":"","ucode":"3F3C089F6D354A","user_header":"https://static001.geekbang.org/account/avatar/00/14/4f/5a/b38785b5.jpg","comment_is_top":false,"comment_ctime":1626845723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626845723","product_id":100020801,"comment_content":"老师请教一个问题，innodb引擎下，二级索引也会存储主键的值，那么相同的二级索引的值的情况下，索引的顺序是按照主键升序的吗？<br><br>比如有个表user，主键是id，二级索引是username，那么select id from user where username=&#39;zhangsan&#39; limit 10，一定是返回的username为zhangsan的记录里面id最小的前10个id吗？ 我验证下来，结果是这样的，但是没有看到相关文档佐证，如果可以作为依据的话，就可以用覆盖索引把所有满足条件的id拉取出来，而且可以利用索引内部的自然排序，不会出现深分页的问题","like_count":0},{"had_liked":false,"id":301197,"user_name":"陈子阳","can_delete":false,"product_type":"c1","uid":1372279,"ip_address":"","ucode":"306262779A17A2","user_header":"https://static001.geekbang.org/account/avatar/00/14/f0/77/8f0863c8.jpg","comment_is_top":false,"comment_ctime":1625572130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625572130","product_id":100020801,"comment_content":"老师您好？请教一个join的问题。<br>我有两张表，每张都有20w行的数据需要联合查询。刚开始我是a left join b。发现居然需要2s的时间，我猜测可能是因为联合的列太多了，所以改为a left join (select id from b)。发现居然还是2s，没有任何改善。而且都使用到了索引。<br>请问老师问题可能出在什么地方？","like_count":0},{"had_liked":false,"id":278425,"user_name":"小白白不白","can_delete":false,"product_type":"c1","uid":1757797,"ip_address":"","ucode":"270EC3A197A8D9","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d2/65/79d89c77.jpg","comment_is_top":false,"comment_ctime":1612939174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612939174","product_id":100020801,"comment_content":"既然 SET INSERT_ID 语句是固定跟在 insert 语句之前的，那么批量插入的自增锁在statement模式下是不是可以不用模式1,使用模式2就可以解决主从主键不一致了？","like_count":0},{"had_liked":false,"id":253853,"user_name":"Boyka Ou","can_delete":false,"product_type":"c1","uid":1068451,"ip_address":"","ucode":"87264DD6983580","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/a3/3b922cdf.jpg","comment_is_top":false,"comment_ctime":1602919536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602919536","product_id":100020801,"comment_content":"林哥，学完了你的专题，想问一个问题：我们公司MySQL分表大小限制在1000万内，同样的硬件oracle单表数据应该不止1000万吧，有人说是架构问题，但是我不知道底层原因是什么，有空的话，你可以告诉我为什么吗？","like_count":0},{"had_liked":false,"id":243261,"user_name":"生命练习生","can_delete":false,"product_type":"c1","uid":1108066,"ip_address":"","ucode":"BCDA541EE0DB54","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/62/2333d77a.jpg","comment_is_top":false,"comment_ctime":1598004219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598004219","product_id":100020801,"comment_content":"这是我所学习的所有课程，讲解最细心、耐心、到位的一位。点个赞������","like_count":0},{"had_liked":false,"id":221847,"user_name":"百里","can_delete":false,"product_type":"c1","uid":1212873,"ip_address":"","ucode":"2CE96129AA7F78","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/c9/9194612b.jpg","comment_is_top":false,"comment_ctime":1590622124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590622124","product_id":100020801,"comment_content":"老师你好，请教一个奇怪的问题，我执行一天update语句，更新4个字段，结果只更新成功一个字段。<br>语句update user set status=2, type=3,  expried=&#39;2020-06-28&#39;, pass=&#39;2020-05-28&#39; where id =5。很普通的语句，不过更新的字段包含在联合索引里。<br>但是执行多次，就可以执行成功。<br>以上是放在golang代码里执行的，mysql命令行执行没问题。","like_count":0},{"had_liked":false,"id":206970,"user_name":"HE","can_delete":false,"product_type":"c1","uid":1179059,"ip_address":"","ucode":"649DC80EB4943A","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/b3/53a7fc71.jpg","comment_is_top":false,"comment_ctime":1586965809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586965809","product_id":100020801,"comment_content":"老师你好，请问一下，关于下面“龙文”同学提到的insert失败死锁的问题，我在8.0.19版本测试上面的情况，rc和rr模式都不会造成死锁了，是mysql有做什么优化么..","like_count":0},{"had_liked":false,"id":206831,"user_name":"TheWinds","can_delete":false,"product_type":"c1","uid":1503401,"ip_address":"","ucode":"69857C2D95C9D2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIIb51lMmiapEjy5oDdXvV6dd8JqIibrtWJfRI1zjEHiawpicaFXASzceUgocIel3CUSGG1hh8xy723Hg/132","comment_is_top":false,"comment_ctime":1586942828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586942828","product_id":100020801,"comment_content":"老师，为什么MySQL的text字段不允许设置default value呢","like_count":0},{"had_liked":false,"id":196075,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1585233767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585233767","product_id":100020801,"comment_content":"Q2的执行计划里，为什么table b的rows是1啊","like_count":0},{"had_liked":false,"id":176512,"user_name":"papaw","can_delete":false,"product_type":"c1","uid":1724942,"ip_address":"","ucode":"B88E39F6B907F8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/52/0e/d875c2c5.jpg","comment_is_top":false,"comment_ctime":1581077454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581077454","product_id":100020801,"comment_content":"老师，分库分表和一主多从 该如何抉择呢？最好结合场景分析下","like_count":0},{"had_liked":false,"id":176508,"user_name":"papaw","can_delete":false,"product_type":"c1","uid":1724942,"ip_address":"","ucode":"B88E39F6B907F8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/52/0e/d875c2c5.jpg","comment_is_top":false,"comment_ctime":1581075179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581075179","product_id":100020801,"comment_content":"老师，mysql里in和or 有性能差别吗？查询原理是一样的吗？","like_count":0},{"had_liked":false,"id":154867,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1574583973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574583973","product_id":100020801,"comment_content":"老师，你讲了Innodb和Memory引擎使用场景，那MyIsam引擎呢，什么情况下会用到呢，感觉应用场景很少啊","like_count":0},{"had_liked":false,"id":141835,"user_name":"Omer","can_delete":false,"product_type":"c1","uid":1676246,"ip_address":"","ucode":"8EE3E531313265","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/d6/040e4965.jpg","comment_is_top":false,"comment_ctime":1571234320,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1571234320","product_id":100020801,"comment_content":"老师你好，我是一员开发同学，我花了一个月的时间疯狂从你这边补习Mysql的知识，收获很大，首先很感谢你花了那么多精力传授功力！！现在我有一个很疑惑的问题想要请教一下，希望你看到能回复，毕竟我算是很晚才来的学生了~~就是我看高性能mysql里面说的：在可重复读的隔离级别下, InnoBD只查找版本早于当前事务版本的数据行,这样可以确保事务读取的行,要么是在事务开始前已经存在,要么是事务自身插入或者修改过的。 但是又看到里面说，快照读是读执行select时候已经全部提交过的最新的数据，这里难道不就跟前面那句那个事务版本的互相冲突了吗？？ 而且我自己也测试了，我开启一个事务A，先sleep5秒，再执行全表查询，然后在事务A查询前执行另一个事务B，往里面插入了数据，这个时候我看到事务A查出来的数据是有事务B新插入的，这就让我对前面那句事务版本产生了很大的疑惑 - -。很晚了，不知道老师您还会不会看到，希望你看到了能帮我解答一下，再次感谢你耐心传教了那么多篇好文~~","like_count":0,"discussions":[{"author":{"id":1997293,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/79/ed/4737a49b.jpg","nickname":"雪の雫·雨の音","note":"","ucode":"0693DA3939A321","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275113,"discussion_content":"因为如果不使用start transaction with consistent开启事务的话，真正开启一致性视图是到第一个执行innodb表的语句才开始的。在你这个例子中，是在事务B执行插入数据操作之后，事务A才开启一致性视图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590665975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142044,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6d/1c/10d5c280.jpg","nickname":"哈哈","note":"","ucode":"F4673CC2238BAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164015,"discussion_content":" start transaction with consistent这么开启就可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581137900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139895,"user_name":"eden.tang","can_delete":false,"product_type":"c1","uid":1306947,"ip_address":"","ucode":"F7E09865C9D2B2","user_header":"","comment_is_top":false,"comment_ctime":1570761393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570761393","product_id":100020801,"comment_content":"老师好，有个问题想请教一下。<br>实际行排重后是13万，而count(distinct)确有38万为何<br><br>38万<br>select count(distinct(tid)) from tb_logs  where ch=&#39;a&#39;<br><br>13万<br>select count(*) from (select distinct(tid) from tb_logs where ch=&#39;a&#39;) t<br><br>ch为其它的数据都正常，几年下来也一直正常，今天突然数据异常，就ch=&#39;a&#39;这个条件的数据。","like_count":0},{"had_liked":false,"id":139891,"user_name":"eden.tang","can_delete":false,"product_type":"c1","uid":1306947,"ip_address":"","ucode":"F7E09865C9D2B2","user_header":"","comment_is_top":false,"comment_ctime":1570761239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570761239","product_id":100020801,"comment_content":"实际行排重后是13万，而count(distinct)确有38万为何<br><br>38万<br>select count(distinct(tid)) from tb_logs <br><br>13万<br>select count(*) from (select distinct(tid) from tb_logs) t","like_count":0},{"had_liked":false,"id":136739,"user_name":"王斯拉","can_delete":false,"product_type":"c1","uid":1593957,"ip_address":"","ucode":"D00DD3CE432189","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/65/320eccb3.jpg","comment_is_top":false,"comment_ctime":1569501232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569501232","product_id":100020801,"comment_content":"疑问：脏页到底怎么刷<br>1. 根据redo log上的lsn和checkpoint lsn比较刷？<br>2. 根据flush-list 把最老的脏页刷入磁盘，这样就对应的redolog就可以被覆盖掉了。<br><br>猜测：<br><br>可能1：<br>1. 在crash的时候会用1， 因为重启时内存数据不存在所以要通过redo恢复<br>2. 正常的刷脏页会用2，通过flush-list刷脏页更快。判断重做日志是否可覆盖，就找对应的页内容上的lsn对比即可。<br><br>可能2：<br>其实都是1这种方式，flush list只是为了redo更容易找脏页？","like_count":0},{"had_liked":false,"id":136738,"user_name":"王斯拉","can_delete":false,"product_type":"c1","uid":1593957,"ip_address":"","ucode":"D00DD3CE432189","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/65/320eccb3.jpg","comment_is_top":false,"comment_ctime":1569501186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569501186","product_id":100020801,"comment_content":"老师同学们好，求教个问题<br>疑问：脏页到底怎么刷<br>1. 根据redo log上的lsn和checkpoint lsn比较刷？<br>2. 根据flush-list 把最老的脏页刷入磁盘，这样就对应的redolog就可以被覆盖掉了。<br><br>猜测：<br><br>可能1：<br>1. 在crash的时候会用1， 因为重启时内存数据不存在所以要通过redo恢复<br>2. 正常的刷脏页会用2，通过flush-list刷脏页更快。判断重做日志是否可覆盖，就找对应的页内容上的lsn对比即可。<br><br>可能2：<br>其实都是1这种方式，flush list只是为了redo更容易找脏页？","like_count":0},{"had_liked":false,"id":132640,"user_name":"sunshineling","can_delete":false,"product_type":"c1","uid":1543564,"ip_address":"","ucode":"7E8E03C8568112","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/8c/ec40964b.jpg","comment_is_top":false,"comment_ctime":1568182841,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1568182841","product_id":100020801,"comment_content":"请问老师Could not commit JDBC transaction mysql这个问题一般是什么情况引发的？","like_count":0},{"had_liked":false,"id":122030,"user_name":"一袋大虾","can_delete":false,"product_type":"c1","uid":1469366,"ip_address":"","ucode":"8E4FED94405475","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wwDhoIeIqMZiaLLCLmCsuiaeEt7rEQMqdTVjjTicic0Pz9HHpgzboaia1hxu3H0IHovqEa6pJ8e1UQn1gqeUr3ibIdrA/132","comment_is_top":false,"comment_ctime":1565272308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565272308","product_id":100020801,"comment_content":"老师 为什么我使用show warnings一直没有结果呢！？","like_count":0},{"had_liked":false,"id":107031,"user_name":"陈扬鸿","can_delete":false,"product_type":"c1","uid":1284708,"ip_address":"","ucode":"DDDA8493CDC83C","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/64/eea9aa33.jpg","comment_is_top":false,"comment_ctime":1561441645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561441645","product_id":100020801,"comment_content":"老师，你好，现在mysql8已经没有frm文件，一旦数据字典丢失，没有表结构就无法恢复单个ibd文件的数据，如何通过mysql8的 sdi文件生成创建表的ddl语句。","like_count":0},{"had_liked":false,"id":95462,"user_name":"400磅","can_delete":false,"product_type":"c1","uid":1022396,"ip_address":"","ucode":"3339DC49F2431C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/bc/c1266b7e.jpg","comment_is_top":false,"comment_ctime":1558059182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558059182","product_id":100020801,"comment_content":"老师你好，我想咨询一下我今天遇到的诡异的 Table &#39;&#39; doesn&#39;t exist 问题<br><br>问题描述：<br><br>在2019年5月16日下午我在我司开发环境的数据库 (192.168.1.81:3306) 上创建了一张表 v_home.verification_code  。插入了181条数据。一直到5月16日18点30左右下班表依然可用。<br><br>5月17日早上（这期间经过一次电脑的重启）， 我再次运行昨天的测试代码， 发现报错 &quot;Table &#39;v_home.verification_code&#39; doesn&#39;t exist&quot; 。 同时使用 navicat 客户端连接数据库，发现表确实不存在了。<br><br>这时我怀疑是否是其他同事误删除了， 所以在团队中询问， 经反馈发现大部分同事那里是可以看到这张表 v_home.verification_code 的，这里面包括使用Mac以及Windows系统，有重新开机连接的，也有从昨天连接一直未关机的； 然而还有一个使用Linux操作系统的同事， 也没有这张表，我使用的是Mac；而且我们团队所有同事使用的IP端口以及账号密码都是一致的。 也就是在同一时间， 同一个数据库，在不同连接上出现了不一致的数据信息。<br><br>为了进一步确认， 我退出navicat客户端，发现问题依然存在， 然后我再次运行SQL创建了这张表，没有插入任何数据。 这时我的客户端界面上出现了这张空表， 同时出现的情况是 以前存在这张表的同事那里没有任何变化， 而使用Linux操作系统的那位同事也出现了这张空表，显示创建时间就是我刚刚操作的时间。<br><br>然后再进一步，我重新关机再启动我的电脑， 连接上数据库，发现昨晚的那张表和记录都恢复了，也就是我刚刚创建表的操作像没有发生一样。 为了确认是否是客户端软件的问题， 我让那位依然能重现的使用Linux操作系统的同事使用mysql命令行连接数据库， 连接后发现跟使用 Navicat 客户端一样，显示的还是我刚刚创建的空表。<br><br>针对此问题我没有一点头绪，虽然通过重启电脑恢复了使用， 但是它是怎么发生的， 是否有其他人遇到这个问题，我一无所知。","like_count":0},{"had_liked":false,"id":80183,"user_name":"Invictus_CD ","can_delete":false,"product_type":"c1","uid":1302400,"ip_address":"","ucode":"4B6BCCE71032D4","user_header":"https://static001.geekbang.org/account/avatar/00/13/df/80/f5d91c66.jpg","comment_is_top":false,"comment_ctime":1553614433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553614433","product_id":100020801,"comment_content":"自增id还有一个bug。就是replace into的时候，假如唯一索引有冲突，主库传过来的binlog里是update，但是在主库操作的时候是先insert，这样主从的自增id那个值就会不一样。这时候主从切换也会有冲突的问题。不过这种情况发生的概率不大，除非一直replace或者刚出现一个replace数据库就主从切换了。","like_count":0},{"had_liked":false,"id":79038,"user_name":"不惑ing","can_delete":false,"product_type":"c1","uid":1207079,"ip_address":"","ucode":"AF04E417D38027","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/27/8c964e52.jpg","comment_is_top":false,"comment_ctime":1553328809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553328809","product_id":100020801,"comment_content":"您好，我看留言区@龙文 问了个问题<br>1.rc隔离级别下对唯一键的insert也会加next-key lock吗？<br>您的回答是：会<br><br>我的问题： 我记得前面哪篇文章里提到rc隔离级别是没有gap lock的么，我也网上用百度确认了一下是没gap lock的，前面文章还提到 next-key lock =gap lock + record lock    ，所以这个回答我看的有点懵，是我哪里理解错了么？","like_count":0},{"had_liked":false,"id":71942,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1551490914,"is_pvip":false,"replies":[{"id":"26061","content":"要看索引哈<br>如果b上的索引只有f1 是的，<br>如果b上的索引是(f1,f2)，就两个一起关联了<br>【咱们文中说了，这个语句会被转成普通join哦】","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551499780,"ip_address":"","comment_id":71942,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551490914","product_id":100020801,"comment_content":"select * from a left join b on(a.f1=b.f1) where (a.f2=b.f2);<br>老师，这个语句是否可以理解为:先按照on后面的条件关联，获取结果集，然后对结果集用where条件进行二次过滤？<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441405,"discussion_content":"要看索引哈\n如果b上的索引只有f1 是的，\n如果b上的索引是(f1,f2)，就两个一起关联了\n【咱们文中说了，这个语句会被转成普通join哦】","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551499780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71877,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1551458497,"is_pvip":false,"replies":[{"id":"26051","content":"不是，如果有where,并且where里面有用到b.f1或b.f2, 那就要求结果集里面没有这些null的行。<br><br>就是说where a.f2=b.f2的意思是<br>Where (a.f2 is not null) and (b.f2 is not null) and (a.f2 =b.f2)","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1551490012,"ip_address":"","comment_id":71877,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551458497","product_id":100020801,"comment_content":"把表 a 的内容读入 join_buffer 中。因为是 select * ，所以字段 f1 和 f2 都被放入 join_buffer 了。<br><br>顺序扫描表 b，对于每一行数据，判断 join 条件（也就是 a.f1=b.f1 and a.f2=b.f2) 是否满足，满足条件的记录, 作为结果集的一行返回。如果语句中有 where 子句，需要先判断 where 部分满足条件后，再返回。<br><br>表 b 扫描完成后，对于没有被匹配的表 a 的行（在这个例子中就是 (1,1)、(2,2) 这两行），把剩余字段补上 NULL，再放入结果集中。<br><br>是否可以理解为:假如有where条件的情况下，对与满足on条件的行，再去过滤where条件，满足就返回；对于不满足on条件的行，b字段补Null后返回，不需要再过滤where条件","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441374,"discussion_content":"不是，如果有where,并且where里面有用到b.f1或b.f2, 那就要求结果集里面没有这些null的行。\n\n就是说where a.f2=b.f2的意思是\nWhere (a.f2 is not null) and (b.f2 is not null) and (a.f2 =b.f2)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551490012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70103,"user_name":"PYH","can_delete":false,"product_type":"c1","uid":1394235,"ip_address":"","ucode":"F20A402BE905D3","user_header":"https://static001.geekbang.org/account/avatar/00/15/46/3b/a9f28ff9.jpg","comment_is_top":false,"comment_ctime":1550995778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550995778","product_id":100020801,"comment_content":"你好 我想问一下mysql能实现oracle的拉链表么。如果能前提条件是什么？","like_count":0},{"had_liked":false,"id":70057,"user_name":"滔滔","can_delete":false,"product_type":"c1","uid":1303342,"ip_address":"","ucode":"6968B5771AF79D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e3/2e/77ad18f4.jpg","comment_is_top":false,"comment_ctime":1550978996,"is_pvip":false,"replies":[{"id":"24996","content":"1. 单独一个update，会启动一个事务<br>2. 单独一个select，也会启动一个事务<br>3. innodb表，增删改查都会启动一个事务","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550998270,"ip_address":"","comment_id":70057,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550978996","product_id":100020801,"comment_content":"老师您好，想请问下在innodb引擎rr隔离级别下，单独的一条update语句是不是默认就是一个事务(在执行update前不输入begin)，而单独的一条select语句是不是不会开启一个事务，哪怕是&quot;当前读&quot;也不会开启一个事务，更进一步，是不是对表的增删改操作默认都会开启一个事务？🤔","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440418,"discussion_content":"1. 单独一个update，会启动一个事务\n2. 单独一个select，也会启动一个事务\n3. innodb表，增删改查都会启动一个事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550998270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69921,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1550905954,"is_pvip":false,"replies":[{"id":"24916","content":"是的<br><br>如果原来就有where，说明原来其实也不用left join 😆<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550936819,"ip_address":"","comment_id":69921,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1550905954","product_id":100020801,"comment_content":"啧啧， 原来我写的 left join 一直都不是标准的，每次后面都会加上 where ， 还一直以为左面是驱动表 。既然实际上 left join 后加上 where 的话， 肯定会被优化器优化成 join  where 的形式， 那是否下次写 left join   ..where 的时候， 不如直接写成 join .. where ，省去优化器自己去优化，这样是不是稍稍快些","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440356,"discussion_content":"是的\n\n如果原来就有where，说明原来其实也不用left join 😆\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550936819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443773,"avatar":"https://static001.geekbang.org/account/avatar/00/16/07/bd/00a3f6aa.jpg","nickname":"Huan","note":"","ucode":"24F1657DDEC117","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":152617,"discussion_content":"我觉得这个也要分具体情况的吧。比如说有a,b表，我需要得到 a,b表关联不上的那些数据，如:\nselect  a.*  from  a  left  join  b  on  a.id = b.id\nwhere  b.id  is  null.\n\n如果改写成  inner  join，那就无法得到上述说的结果了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579966063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69763,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1550832152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550832152","product_id":100020801,"comment_content":"订阅了好几个专栏 mysql这个是最优先看的，别的专栏可以跟不上 这个必须跟上，老师计划出第二季吗？","like_count":0},{"had_liked":false,"id":69711,"user_name":"一大只😴","can_delete":false,"product_type":"c1","uid":1310960,"ip_address":"","ucode":"92F3D2B7F63568","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/f0/08409e78.jpg","comment_is_top":false,"comment_ctime":1550815988,"is_pvip":false,"replies":[{"id":"24878","content":"很好的验证<br>下一篇文章会讲到哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550889531,"ip_address":"","comment_id":69711,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550815988","product_id":100020801,"comment_content":"老师好，我做了下课后题的实验，不清楚为啥设计，下面记录了我看到的现象，不一定对哈。<br>使用start transaction with consistent snapshot;<br>同一个session的开启快照事务后的trx_id很大并且一致，如果关闭这个session，开启另一个session使用snapshot，初始值的trx_id也是与之前的session一致的。<br><br>如果再打开第二个session使用snapshot，第一次查询trx表，会发现第一个session还是很大只，第二个打开的trx_id会很小，但这个很小的trx_id是第一个打开的session的最小trx_id+1。这时，如果commit；再start snapshot，那么将会出现一个比第一个session还要大一点的trx_id，我开了几个session，第一次是+24，随后都是加12，如下图：<br>+---------------------+-----------------+<br>| trx_mysql_thread_id | trx_id          |<br>+---------------------+-----------------+<br>|               14672 | 421259275839776 |<br>|               14661 | 421259275838864 |<br>|               14645 | 421259275837952 |<br>|               14587 | 421259275837040 |<br>|               14578 | 421259275835216 |<br>+---------------------+-----------------+<br><br>只有一个session打开snapshot情况下，trx_id在commit后会增加，但在事务内不会看到trx_id增加,使用select,select lock in share mode不会导致trx_id增加。<br><br>一个ddl操作应该是  trx_id+18<br><br>不在事务内的dml操作：<br>delete 1条  trx_id+2  <br>delete 多条 trx_id+6<br>insert 1条 trx_id+1<br>insert values (),()...多条trx_id+5<br>update 1条  trx_id+2<br>update 多条 trx_id+6<br><br>snapshot事务内的dml操作：<br>事务内先select * from tb for update;再delete from tb where id=xxx;这样的delete trx_id+1<br>如果是事务内直接delete from tb where id=xxx;或delete from tb;这样的delete trx_id+6<br><br>事务内update 1条 trx_id+2，如果先select * fom tb for update;再update 1条，有时候是trx_id+2，有时候是trx_id+5<br>事务内update 多条 trx_id+6<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440238,"discussion_content":"很好的验证\n下一篇文章会讲到哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550889531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69658,"user_name":"克劳德","can_delete":false,"product_type":"c1","uid":1323851,"ip_address":"","ucode":"F94AD5C3D607AE","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/4b/71905da9.jpg","comment_is_top":false,"comment_ctime":1550803444,"is_pvip":false,"replies":[{"id":"24803","content":"1.对,就是扫描这个索引的过程中,第一个碰到的值<br>2. 可以,你用force index试试","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550815714,"ip_address":"","comment_id":69658,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550803444","product_id":100020801,"comment_content":"老师好，如果group by用作数据去重，根据文章中描述的，流程2会遍历表依次插入进临时表。<br>我理解的遍历表是通过扫描主键索引来做的，因此同一组的记录只会留下主键值最小的那个，是否正确？<br>能否通过扫描其他索引，来达到去重后的记录不按照主键值来决定？<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440211,"discussion_content":"1.对,就是扫描这个索引的过程中,第一个碰到的值\n2. 可以,你用force index试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550815714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69632,"user_name":"孟晓冬","can_delete":false,"product_type":"c1","uid":1204266,"ip_address":"","ucode":"DFFE8A3863F881","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/2a/9e0ba423.jpg","comment_is_top":false,"comment_ctime":1550799896,"is_pvip":false,"replies":[{"id":"24734","content":"看下13篇","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1550804239,"ip_address":"","comment_id":69632,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550799896","product_id":100020801,"comment_content":"老师，你好，这是表结构<br>CREATE TABLE `graph` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT,<br>  `name` varchar(20) NOT NULL COMMENT &#39;报表名称&#39;,<br>  `ip` varchar(50) DEFAULT NULL COMMENT &#39;报表来自于哪台cat-client机器ip, NULL表示合并同domain所有ip&#39;,<br>  `domain` varchar(50) NOT NULL COMMENT &#39;报表处理的Domain信息&#39;,<br>  `period` datetime NOT NULL COMMENT &#39;报表时间段&#39;,<br>  `type` tinyint(4) NOT NULL COMMENT &#39;报表数据格式, 1&#47;xml, 2&#47;json, 3&#47;csv, 默认3&#39;,<br>  `detail_content` mediumtext NOT NULL COMMENT &#39;详细绘图内容&#39;,<br>  `summary_content` mediumtext NOT NULL COMMENT &#39;概要绘图内容&#39;,<br>  `creation_date` datetime NOT NULL COMMENT &#39;报表创建时间&#39;,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `graph_period_ip_domain_name` (`period`,`ip`,`domain`,`name`)<br>) ENGINE=InnoDB AUTO_INCREMENT=5913464 DEFAULT CHARSET=utf8 COMMENT=&#39;小时图表曲线&#39;<br>差不多有600万条记录，我删除完550万条记录后，执行select min(id) from graph;比较慢<br>root@localhost:cat 09:01:06&gt; select min(id) from graph;<br>+---------+<br>| min(id) |<br>+---------+<br>| 5513664 |<br>+---------+<br>1 row in set (8.27 sec)<br>然后做了alter table graph ENGINE=InnoDB;这个操作后，就快了，<br>root@localhost:cat 09:06:20&gt; select min(id) from graph;<br>+---------+<br>| min(id) |<br>+---------+<br>| 5513664 |<br>+---------+<br>1 row in set (0.00 sec)<br>这是为什么呀？<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440196,"discussion_content":"看下13篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}