{"id":128510,"title":"27 | 如何在Dart层兼容Android/iOS平台特定实现？（二）","content":"<p>你好，我是陈航。</p><p>在上一篇文章中，我与你介绍了方法通道，这种在Flutter中实现调用原生Android、iOS代码的轻量级解决方案。使用方法通道，我们可以把原生代码所拥有的能力，以接口形式提供给Dart。</p><p>这样，当发起方法调用时，Flutter应用会以类似网络异步调用的方式，将请求数据通过一个唯一标识符指定的方法通道传输至原生代码宿主；而原生代码处理完毕后，会将响应结果通过方法通道回传至Flutter，从而实现Dart代码与原生Android、iOS代码的交互。这，与调用一个本地的Dart 异步API并无太多区别。</p><p>通过方法通道，我们可以把原生操作系统提供的底层能力，以及现有原生开发中一些相对成熟的解决方案，以接口封装的形式在Dart层快速搞定，从而解决原生代码在Flutter上的复用问题。然后，我们可以利用Flutter本身提供的丰富控件，做好UI渲染。</p><p>底层能力+应用层渲染，看似我们已经搞定了搭建一个复杂App的所有内容。但，真的是这样吗？</p><h2>构建一个复杂App都需要什么？</h2><p>别急，在下结论之前，我们先按照四象限分析法，把能力和渲染分解成四个维度，分析构建一个复杂App都需要什么。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/cc/d1826dfb3a8b688db04cbf5beb04f2cc.png?wh=1022*802\" alt=\"\"></p><center><span class=\"reference\">图1 四象限分析法</span></center><!-- [[[read_end]]] --><p>经过分析，我们终于发现，原来构建一个App需要覆盖那么多的知识点，通过Flutter和方法通道只能搞定应用层渲染、应用层能力和底层能力，对于那些涉及到底层渲染，比如浏览器、相机、地图，以及原生自定义视图的场景，自己在Flutter上重新开发一套显然不太现实。</p><p>在这种情况下，使用混合视图看起来是一个不错的选择。我们可以在Flutter的Widget树中提前预留一块空白区域，在Flutter的画板中（即FlutterView与FlutterViewController）嵌入一个与空白区域完全匹配的原生视图，就可以实现想要的视觉效果了。</p><p>但是，采用这种方案极其不优雅，因为嵌入的原生视图并不在Flutter的渲染层级中，需要同时在Flutter侧与原生侧做大量的适配工作，才能实现正常的用户交互体验。</p><p>幸运的是，Flutter提供了一个平台视图（Platform View）的概念。它提供了一种方法，允许开发者在Flutter里面嵌入原生系统（Android和iOS）的视图，并加入到Flutter的渲染树中，实现与Flutter一致的交互体验。</p><p>这样一来，通过平台视图，我们就可以将一个原生控件包装成Flutter控件，嵌入到Flutter页面中，就像使用一个普通的Widget一样。</p><p>接下来，我就与你详细讲述如何使用平台视图。</p><h2>平台视图</h2><p>如果说方法通道解决的是原生能力逻辑复用问题，那么平台视图解决的就是原生视图复用问题。Flutter提供了一种轻量级的方法，让我们可以创建原生（Android和iOS）的视图，通过一些简单的Dart层接口封装之后，就可以将它插入Widget树中，实现原生视图与Flutter视图的混用。</p><p>一次典型的平台视图使用过程与方法通道类似：</p><ul>\n<li>首先，由作为客户端的Flutter，通过向原生视图的Flutter封装类（在iOS和Android平台分别是UIKitView和AndroidView）传入视图标识符，用于发起原生视图的创建请求；</li>\n<li>然后，原生代码侧将对应原生视图的创建交给平台视图工厂（PlatformViewFactory）实现；</li>\n<li>最后，在原生代码侧将视图标识符与平台视图工厂进行关联注册，让Flutter发起的视图创建请求可以直接找到对应的视图创建工厂。</li>\n</ul><p>至此，我们就可以像使用Widget那样，使用原生视图了。整个流程，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/e8/2b3afbb05585c474e4dc2d18bf6066e8.png?wh=1108*768\" alt=\"\"></p><center><span class=\"reference\">图2 平台视图示例</span></center><p>接下来，我以一个具体的案例，也就是将一个红色的原生视图内嵌到Flutter中，与你演示如何使用平台视图。这部分内容主要包括两部分：</p><ul>\n<li>作为调用发起方的Flutter，如何实现原生视图的接口调用？</li>\n<li>如何在原生（Android和iOS）系统实现接口？</li>\n</ul><p>接下来，我将分别与你讲述这两个问题。</p><h3>Flutter如何实现原生视图的接口调用？</h3><p>在下面的代码中，我们在SampleView的内部，分别使用了原生Android、iOS视图的封装类AndroidView和UIkitView，并传入了一个唯一标识符，用于和原生视图建立关联：</p><pre><code>class SampleView extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    //使用Android平台的AndroidView，传入唯一标识符sampleView\n    if (defaultTargetPlatform == TargetPlatform.android) {\n      return AndroidView(viewType: 'sampleView');\n    } else {\n      //使用iOS平台的UIKitView，传入唯一标识符sampleView\n      return UiKitView(viewType: 'sampleView');\n    }\n  }\n}\n</code></pre><p>可以看到，平台视图在Flutter侧的使用方式比较简单，与普通Widget并无明显区别。而关于普通Widget的使用方式，你可以参考第<a href=\"https://time.geekbang.org/column/article/110292\">12</a>、<a href=\"https://time.geekbang.org/column/article/110859\">13</a>篇的相关内容进行复习。</p><p>调用方的实现搞定了。接下来，我们需要在原生代码中完成视图创建的封装，建立相关的绑定关系。同样的，由于需要同时适配Android和iOS平台，我们需要分别在两个系统上完成对应的接口实现。</p><h3>如何在原生系统实现接口？</h3><p>首先，我们来看看<strong>Android端的实现</strong>。在下面的代码中，我们分别创建了平台视图工厂和原生视图封装类，并通过视图工厂的create方法，将它们关联起来：</p><pre><code>//视图工厂类\nclass SampleViewFactory extends PlatformViewFactory {\n    private final BinaryMessenger messenger;\n    //初始化方法\n    public SampleViewFactory(BinaryMessenger msger) {\n        super(StandardMessageCodec.INSTANCE);\n        messenger = msger;\n    }\n    //创建原生视图封装类，完成关联\n    @Override\n    public PlatformView create(Context context, int id, Object obj) {\n        return new SimpleViewControl(context, id, messenger);\n    }\n}\n//原生视图封装类\nclass SimpleViewControl implements PlatformView {\n    private final View view;//缓存原生视图\n    //初始化方法，提前创建好视图\n    public SimpleViewControl(Context context, int id, BinaryMessenger messenger) {\n        view = new View(context);\n        view.setBackgroundColor(Color.rgb(255, 0, 0));\n    }\n    \n    //返回原生视图\n    @Override\n    public View getView() {\n        return view;\n    }\n    //原生视图销毁回调\n    @Override\n    public void dispose() {\n    }\n}\n</code></pre><p>将原生视图封装类与原生视图工厂完成关联后，接下来就需要将Flutter侧的调用与视图工厂绑定起来了。与上一篇文章讲述的方法通道类似，我们仍然需要在MainActivity中进行绑定操作：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {\n  ...\n  Registrar registrar =    registrarFor(&quot;samples.chenhang/native_views&quot;);//生成注册类\n  SampleViewFactory playerViewFactory = new SampleViewFactory(registrar.messenger());//生成视图工厂\n\nregistrar.platformViewRegistry().registerViewFactory(&quot;sampleView&quot;, playerViewFactory);//注册视图工厂\n}\n</code></pre><p>完成绑定之后，平台视图调用响应的Android部分就搞定了。</p><p>接下来，我们再来看看<strong>iOS端的实现</strong>。</p><p>与Android类似，我们同样需要分别创建平台视图工厂和原生视图封装类，并通过视图工厂的create方法，将它们关联起来：</p><pre><code>//平台视图工厂\n@interface SampleViewFactory : NSObject&lt;FlutterPlatformViewFactory&gt;\n- (instancetype)initWithMessenger:(NSObject&lt;FlutterBinaryMessenger&gt;*)messager;\n@end\n\n@implementation SampleViewFactory{\n  NSObject&lt;FlutterBinaryMessenger&gt;*_messenger;\n}\n\n- (instancetype)initWithMessenger:(NSObject&lt;FlutterBinaryMessenger&gt; *)messager{\n  self = [super init];\n  if (self) {\n    _messenger = messager;\n  }\n  return self;\n}\n\n-(NSObject&lt;FlutterMessageCodec&gt; *)createArgsCodec{\n  return [FlutterStandardMessageCodec sharedInstance];\n}\n\n//创建原生视图封装实例\n-(NSObject&lt;FlutterPlatformView&gt; *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id)args{\n  SampleViewControl *activity = [[SampleViewControl alloc] initWithWithFrame:frame viewIdentifier:viewId arguments:args binaryMessenger:_messenger];\n  return activity;\n}\n@end\n\n//平台视图封装类\n@interface SampleViewControl : NSObject&lt;FlutterPlatformView&gt;\n- (instancetype)initWithWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args binaryMessenger:(NSObject&lt;FlutterBinaryMessenger&gt;*)messenger;\n@end\n\n@implementation SampleViewControl{\n    UIView * _templcateView;\n}\n//创建原生视图\n- (instancetype)initWithWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id)args binaryMessenger:(NSObject&lt;FlutterBinaryMessenger&gt; *)messenger{\n  if ([super init]) {\n    _templcateView = [[UIView alloc] init];\n    _templcateView.backgroundColor = [UIColor redColor];\n  }\n  return self;\n}\n\n-(UIView *)view{\n  return _templcateView;\n}\n\n@end\n</code></pre><p>然后，我们同样需要把原生视图的创建与Flutter侧的调用关联起来，才可以在Flutter侧找到原生视图的实现：</p><pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  NSObject&lt;FlutterPluginRegistrar&gt;* registrar = [self registrarForPlugin:@&quot;samples.chenhang/native_views&quot;];//生成注册类\n  SampleViewFactory* viewFactory = [[SampleViewFactory alloc] initWithMessenger:registrar.messenger];//生成视图工厂\n    [registrar registerViewFactory:viewFactory withId:@&quot;sampleView&quot;];//注册视图工厂\n ...\n}\n</code></pre><p>需要注意的是，在iOS平台上，Flutter内嵌UIKitView目前还处于技术预览状态，因此我们还需要在Info.plist文件中增加一项配置，把内嵌原生视图的功能开关设置为true，才能打开这个隐藏功能：</p><pre><code>&lt;dict&gt;\n   ...\n  &lt;key&gt;io.flutter.embedded_views_preview&lt;/key&gt;\n  &lt;true/&gt;\n  ....\n&lt;/dict&gt;\n</code></pre><p>经过上面的封装与绑定，Android端与iOS端的平台视图功能都已经实现了。接下来，我们就可以在Flutter应用里，像使用普通Widget一样，去内嵌原生视图了：</p><pre><code> Scaffold(\n        backgroundColor: Colors.yellowAccent,\n        body:  Container(width: 200, height:200,\n            child: SampleView(controller: controller)\n        ));\n</code></pre><p>如下所示，我们分别在iOS和Android平台的Flutter应用上，内嵌了一个红色的原生视图：</p><p><img src=\"https://static001.geekbang.org/resource/image/09/3f/095093cea18f8e18b6de2c94e447d03f.png?wh=2018*1792\" alt=\"\"></p><center><span class=\"reference\">图3 内嵌原生视图示例</span></center><p>在上面的例子中，我们将原生视图封装在一个StatelessWidget中，可以有效应对静态展示的场景。如果我们需要在程序运行时动态调整原生视图的样式，又该如何处理呢？</p><h2>如何在程序运行时，动态地调整原生视图的样式？</h2><p>与基于声明式的Flutter Widget，每次变化只能以数据驱动其视图销毁重建不同，原生视图是基于命令式的，可以精确地控制视图展示样式。因此，我们可以在原生视图的封装类中，将其持有的修改视图实例相关的接口，以方法通道的方式暴露给Flutter，让Flutter也可以拥有动态调整视图视觉样式的能力。</p><p>接下来，我以一个具体的案例来演示如何在程序运行时动态调整内嵌原生视图的背景颜色。</p><p>在这个案例中，我们会用到原生视图的一个初始化属性，即onPlatformViewCreated：原生视图会在其创建完成后，以回调的形式通知视图id，因此我们可以在这个时候注册方法通道，让后续的视图修改请求通过这条通道传递给原生视图。</p><p>由于我们在底层直接持有了原生视图的实例，因此理论上可以直接在这个原生视图的Flutter封装类上提供视图修改方法，而不管它到底是StatelessWidget还是StatefulWidget。但为了遵照Flutter的Widget设计理念，我们还是决定将视图展示与视图控制分离，即：将原生视图封装为一个StatefulWidget专门用于展示，通过其controller初始化参数，在运行期修改原生视图的展示效果。如下所示：</p><pre><code>//原生视图控制器\nclass NativeViewController {\n  MethodChannel _channel;\n  //原生视图完成创建后，通过id生成唯一方法通道\n  onCreate(int id) {\n    _channel = MethodChannel('samples.chenhang/native_views_$id');\n  }\n  //调用原生视图方法，改变背景颜色\n  Future&lt;void&gt; changeBackgroundColor() async {\n    return _channel.invokeMethod('changeBackgroundColor');\n  }\n}\n\n//原生视图Flutter侧封装，继承自StatefulWidget\nclass SampleView extends StatefulWidget {\n  const SampleView({\n    Key key,\n    this.controller,\n  }) : super(key: key);\n\n  //持有视图控制器\n  final NativeViewController controller;\n  @override\n  State&lt;StatefulWidget&gt; createState() =&gt; _SampleViewState();\n}\n\nclass _SampleViewState extends State&lt;SampleView&gt; {\n  //根据平台确定返回何种平台视图\n  @override\n  Widget build(BuildContext context) {\n    if (defaultTargetPlatform == TargetPlatform.android) {\n      return AndroidView(\n        viewType: 'sampleView',\n        //原生视图创建完成后，通过onPlatformViewCreated产生回调\n        onPlatformViewCreated: _onPlatformViewCreated,\n      );\n    } else {\n      return UiKitView(viewType: 'sampleView',\n        //原生视图创建完成后，通过onPlatformViewCreated产生回调\n        onPlatformViewCreated: _onPlatformViewCreated\n      );\n    }\n  }\n  //原生视图创建完成后，调用control的onCreate方法，传入view id\n  _onPlatformViewCreated(int id) {\n    if (widget.controller == null) {\n      return;\n    }\n    widget.controller.onCreate(id);\n  }\n}\n</code></pre><p>Flutter的调用方实现搞定了，接下来我们分别看看Android和iOS端的实现。</p><p>程序的整体结构与之前并无不同，只是在进行原生视图初始化时，我们需要完成方法通道的注册和相关事件的处理；在响应方法调用消息时，我们需要判断方法名，如果完全匹配，则修改视图背景，否则返回异常。</p><p>Android端接口实现代码如下所示：</p><pre><code>class SimpleViewControl implements PlatformView, MethodCallHandler {\n    private final MethodChannel methodChannel;\n    ...\n    public SimpleViewControl(Context context, int id, BinaryMessenger messenger) {\n        ...\n        //用view id注册方法通道\n        methodChannel = new MethodChannel(messenger, &quot;samples.chenhang/native_views_&quot; + id);\n        //设置方法通道回调\n        methodChannel.setMethodCallHandler(this);\n    }\n    //处理方法调用消息\n    @Override\n    public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) {\n        //如果方法名完全匹配\n        if (methodCall.method.equals(&quot;changeBackgroundColor&quot;)) {\n            //修改视图背景，返回成功\n            view.setBackgroundColor(Color.rgb(0, 0, 255));\n            result.success(0);\n        }else {\n            //调用方发起了一个不支持的API调用\n            result.notImplemented();\n        }\n    }\n  ...\n}\n</code></pre><p>iOS端接口实现代码：</p><pre><code>@implementation SampleViewControl{\n    ...\n    FlutterMethodChannel* _channel;\n}\n\n- (instancetype)initWithWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id)args binaryMessenger:(NSObject&lt;FlutterBinaryMessenger&gt; *)messenger{\n    if ([super init]) {\n        ...\n        //使用view id完成方法通道的创建\n        _channel = [FlutterMethodChannel methodChannelWithName:[NSString stringWithFormat:@&quot;samples.chenhang/native_views_%lld&quot;, viewId] binaryMessenger:messenger];\n        //设置方法通道的处理回调\n        __weak __typeof__(self) weakSelf = self;\n        [_channel setMethodCallHandler:^(FlutterMethodCall* call, FlutterResult result) {\n            [weakSelf onMethodCall:call result:result];\n        }];\n    }\n    return self;\n}\n\n//响应方法调用消息\n- (void)onMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result {\n    //如果方法名完全匹配\n    if ([[call method] isEqualToString:@&quot;changeBackgroundColor&quot;]) {\n        //修改视图背景色，返回成功\n        _templcateView.backgroundColor = [UIColor blueColor];\n        result(@0);\n    } else {\n        //调用方发起了一个不支持的API调用\n        result(FlutterMethodNotImplemented);\n    }\n}\n ...\n@end\n</code></pre><p>通过注册方法通道，以及暴露的changeBackgroundColor接口，Android端与iOS端修改平台视图背景颜色的功能都已经实现了。接下来，我们就可以在Flutter应用运行期间，修改原生视图展示样式了：</p><pre><code>class DefaultState extends State&lt;DefaultPage&gt; {\n  NativeViewController controller;\n  @override\n  void initState() {\n    controller = NativeViewController();//初始化原生View控制器\n\tsuper.initState();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n          ...\n          //内嵌原生View\n          body:  Container(width: 200, height:200,\n              child: SampleView(controller: controller)\n          ),\n         //设置点击行为：改变视图颜色 \n         floatingActionButton: FloatingActionButton(onPressed: ()=&gt;controller.changeBackgroundColor())\n    );\n  }\n}\n</code></pre><p>运行一下，效果如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/ac/fd1f6d7280aaacb3294d7733706fc8ac.gif?wh=720*1256\" alt=\"\"></p><center><span class=\"reference\">图4 动态修改原生视图样式</span></center><h2>总结</h2><p>好了，今天的分享就到这里。我们总结一下今天的主要内容吧。</p><p>平台视图解决了原生渲染能力的复用问题，使得Flutter能够通过轻量级的代码封装，把原生视图组装成一个Flutter控件。</p><p>Flutter提供了平台视图工厂和视图标识符两个概念，因此Dart层发起的视图创建请求可以通过标识符直接找到对应的视图创建工厂，从而实现原生视图与Flutter视图的融合复用。对于需要在运行期动态调用原生视图接口的需求，我们可以在原生视图的封装类中注册方法通道，实现精确控制原生视图展示的效果。</p><p>需要注意的是，由于Flutter与原生渲染方式完全不同，因此转换不同的渲染数据会有较大的性能开销。如果在一个界面上同时实例化多个原生控件，就会对性能造成非常大的影响，所以我们要避免在使用Flutter控件也能实现的情况下去使用内嵌平台视图。</p><p>因为这样做，一方面需要分别在Android和iOS端写大量的适配桥接代码，违背了跨平台技术的本意，也增加了后续的维护成本；另一方面毕竟除去地图、WebView、相机等涉及底层方案的特殊情况外，大部分原生代码能够实现的UI效果，完全可以用Flutter实现。</p><p>我把今天分享所涉及到的知识点打包到了<a href=\"https://github.com/cyndibaby905/27_native_view\">GitHub</a>中，你可以下载下来，反复运行几次，加深理解。</p><h2>思考题</h2><p>最后，我给你留下一道思考题吧。</p><p>请你在动态调整原生视图样式的代码基础上，增加颜色参数，以实现动态变更原生视图颜色的需求。</p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":129185,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1567058478,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18746927662","product_id":100031001,"comment_content":"妙啊，通过平台视图，Flutter就可以使用原生视图了，这样，基本所有需求都可以实现了。如果社区再繁荣一点，许多组件都可以拿来即用，那开发需求的速度就是相当快了。","like_count":4,"discussions":[{"author":{"id":1459289,"avatar":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","nickname":"毛成方","note":"","ucode":"DFBF3D464D8D7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374556,"discussion_content":"为社区贡献一份力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621244034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190210,"user_name":"Verios","can_delete":false,"product_type":"c1","uid":1042365,"ip_address":"","ucode":"C26BB8B8334A0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/bd/cb2fb958.jpg","comment_is_top":false,"comment_ctime":1584615080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174549672","product_id":100031001,"comment_content":" 每次 widget 重建，都会create一个原生 view 吗？<br>","like_count":2},{"had_liked":false,"id":169852,"user_name":"jianwei","can_delete":false,"product_type":"c1","uid":1621006,"ip_address":"","ucode":"B62E46E862AF6D","user_header":"https://static001.geekbang.org/account/avatar/00/18/bc/0e/c76861eb.jpg","comment_is_top":false,"comment_ctime":1578458656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168393248","product_id":100031001,"comment_content":"floatingActionButton: FloatingActionButton(<br>\tonPressed: () =&gt; controller.changeBackground(&#39;#FFFFFF&#39;),<br>),<br><br>Future&lt;void&gt; changeBackground(String colorString) async {<br>\ttry {<br>\t  return _channel.invokeMethod(&#39;changeBackgroundColor&#39;, &lt;String, dynamic&gt; {<br>\t    &#39;color&#39;: colorString<br>\t  });<br>\t} catch (e) {<br>\t}<br>}<br><br>- (void)onMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result {<br>    if ([call.method isEqualToString:@&quot;changeBackgroundColor&quot;]) {<br>        NSString *colorString = call.arguments[@&quot;color&quot;];<br>        if (colorString.length != 0) {<br>            _templcateView.backgroundColor = [UIColor colorWithHexString:colorString];<br>            result(@0);<br>            return;<br>        }<br>    }<br>    result(FlutterMethodNotImplemented);<br>}","like_count":2},{"had_liked":false,"id":139592,"user_name":"舒大飞","can_delete":false,"product_type":"c1","uid":1313651,"ip_address":"","ucode":"5CC2E0F8C40E38","user_header":"https://static001.geekbang.org/account/avatar/00/14/0b/73/4f1c9676.jpg","comment_is_top":false,"comment_ctime":1570687084,"is_pvip":true,"replies":[{"id":"54824","content":"可以，Activity内嵌flutterView其实就是这种方式，只是这个视图大小是整个屏幕","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1571284748,"ip_address":"","comment_id":139592,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10160621676","product_id":100031001,"comment_content":"反过来，可以在原生页面中嵌入一小块Flutter视图吗","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470012,"discussion_content":"可以，Activity内嵌flutterView其实就是这种方式，只是这个视图大小是整个屏幕","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571284748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1454751,"avatar":"https://static001.geekbang.org/account/avatar/00/16/32/9f/46ac03ad.jpg","nickname":"快到碗里来","note":"","ucode":"D3EE7B9064DD7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533171,"discussion_content":"那iOS 原生页面 怎么嵌入flutter视图呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637807254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130347,"user_name":"宇","can_delete":false,"product_type":"c1","uid":1331553,"ip_address":"","ucode":"41CAD68B5474A2","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/61/9c5beba4.jpg","comment_is_top":false,"comment_ctime":1567430045,"is_pvip":false,"replies":[{"id":"49516","content":"赞👍","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1567677846,"ip_address":"","comment_id":130347,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10157364637","product_id":100031001,"comment_content":"思考题实现思路<br><br>dart层设置颜色参数的方法：<br>changeBackgroundColor(int r, int g, int b) async<br>  {<br>    _channel.invokeMethod(&#39;changeBackgroundColor&#39;, {&quot;r&quot;:r, &quot;g&quot;:g, &quot;b&quot;:b});<br>  }<br><br>dart层调用：<br>controller.changeBackgroundColor(0, 255, 255)<br><br>android native层实现：<br>if (methodCall.method.equals(&quot;changeBackgroundColor&quot;)) {<br>      int r = methodCall.argument(&quot;r&quot;);<br>      int g = methodCall.argument(&quot;g&quot;);<br>      int b = methodCall.argument(&quot;b&quot;);<br>      view.setBackgroundColor(Color.rgb(r, g, b));<br>      result.success(0);<br>    }else {<br>      result.notImplemented();<br>    }<br>","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465916,"discussion_content":"赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567677846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323728,"user_name":"五十度灰黑","can_delete":false,"product_type":"c1","uid":2132275,"ip_address":"","ucode":"A5AB673CA37856","user_header":"https://static001.geekbang.org/account/avatar/00/20/89/33/6c66ed4a.jpg","comment_is_top":false,"comment_ctime":1638144995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638144995","product_id":100031001,"comment_content":"Flutter 页面嵌入原生视图，有滚动条的情况，原生视图定位问题怎么解决？","like_count":0},{"had_liked":false,"id":291242,"user_name":"刘洪林","can_delete":false,"product_type":"c1","uid":1535242,"ip_address":"","ucode":"1FDBB425191CA8","user_header":"https://static001.geekbang.org/account/avatar/00/17/6d/0a/8e7f0f04.jpg","comment_is_top":false,"comment_ctime":1620137944,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620137944","product_id":100031001,"comment_content":"对前端来说是不是还要学安卓和iOS开发啊","like_count":0,"discussions":[{"author":{"id":1459289,"avatar":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","nickname":"毛成方","note":"","ucode":"DFBF3D464D8D7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374557,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621244081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290372,"user_name":"Geek_cc0a3b","can_delete":false,"product_type":"c1","uid":1442156,"ip_address":"","ucode":"8D6C16AC4A9ED0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6ADlY3IFt3Rs1aVDyrTO2BiaV8wiabypPwbXhbPcyqicCvnTV9lUYHULVqUab7ww4taX5QbmFyatLQ/132","comment_is_top":false,"comment_ctime":1619517589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619517589","product_id":100031001,"comment_content":"内嵌原生空间，事件响应比如onClick是直接在原生层响应了吧，flutter不需要负责处理原生事件的响应吧？","like_count":0},{"had_liked":false,"id":290071,"user_name":"小强","can_delete":false,"product_type":"c1","uid":1328832,"ip_address":"","ucode":"358B91401C1C18","user_header":"https://static001.geekbang.org/account/avatar/00/14/46/c0/cdc50180.jpg","comment_is_top":false,"comment_ctime":1619346868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619346868","product_id":100031001,"comment_content":"&#47;&#47;原生视图销毁回调    @Override    public void dispose() {    }<br>安卓上有这个回调，怎么iOS没有对应的回调，刚好项目遇到这个问题了，期待老师解惑","like_count":0},{"had_liked":false,"id":241770,"user_name":"无名","can_delete":false,"product_type":"c1","uid":1110113,"ip_address":"","ucode":"2D2E877CF97138","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","comment_is_top":false,"comment_ctime":1597416778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597416778","product_id":100031001,"comment_content":"iOS 平台视图中：-(NSObject&lt;FlutterPlatformView&gt; *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id)args{}<br>为何frame的值都是(0.0, 0.0, 0.0, 0.0)，为何没有宽高？这里不应该是显示的视图大小吗？<br>","like_count":0},{"had_liked":false,"id":241328,"user_name":"lala","can_delete":false,"product_type":"c1","uid":1215387,"ip_address":"","ucode":"61798D0911ECBA","user_header":"","comment_is_top":false,"comment_ctime":1597247877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597247877","product_id":100031001,"comment_content":"  _onPlatformViewCreated(int id) {<br>    if (widget.controller == null) {<br>      return;<br>    }<br>    widget.controller.onCreate(id);<br>  }<br>示例中id传值是多少呢？请老师解答下������������������","like_count":0},{"had_liked":false,"id":236908,"user_name":"Geek_fdd35e","can_delete":false,"product_type":"c1","uid":2052987,"ip_address":"","ucode":"68968CF01C463E","user_header":"","comment_is_top":false,"comment_ctime":1595581730,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1595581730","product_id":100031001,"comment_content":"registrarFor(&quot;com.hangchen&#47;NativeViews&quot;); <br>registrarFor这个方法找不到了,说没有声明, flutter 1.0.0","like_count":0,"discussions":[{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314625,"discussion_content":"这样写：\n //平台view的创建\n        SampleViewFactory sampleViewFactory = new SampleViewFactory(getFlutterEngine().getDartExecutor().getBinaryMessenger());\n        flutterEngine.getPlatformViewsController().getRegistry().registerViewFactory(&#34;sampleView&#34;, sampleViewFactory);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603179179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223918,"user_name":"zeqin","can_delete":false,"product_type":"c1","uid":1089026,"ip_address":"","ucode":"ACEF2967FA4419","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/akIbCt3y9ssJWI17UoalPcCICJboZoibSybpR3f6RoNYSFhLchLA0Kib0N1q15DI3DW8vF6K6wpt0TPh81Au44HQ/132","comment_is_top":false,"comment_ctime":1591232852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591232852","product_id":100031001,"comment_content":"那怎么实现原生和futter间互相传值？","like_count":0},{"had_liked":false,"id":216848,"user_name":"无名","can_delete":false,"product_type":"c1","uid":1110113,"ip_address":"","ucode":"2D2E877CF97138","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","comment_is_top":false,"comment_ctime":1589354386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589354386","product_id":100031001,"comment_content":"iOS 中FlutterPlatformViewFactory的func create(withFrame frame: CGRect, viewIdentifier viewId: Int64, arguments args: Any?)方法中的frame值都为0，那么这个参数是干什么用的呢？什么情况下会有值？","like_count":0},{"had_liked":false,"id":188518,"user_name":"星星","can_delete":false,"product_type":"c1","uid":1126460,"ip_address":"","ucode":"013714D9EF1847","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/3c/c2c72e28.jpg","comment_is_top":false,"comment_ctime":1584363771,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584363771","product_id":100031001,"comment_content":"这个在io.flutter.embedding.android.FlutterActivity中如何绑定呢，没有响应的方法啊","like_count":0,"discussions":[{"author":{"id":1369877,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e7/15/8d699a19.jpg","nickname":"只是丶很孤单","note":"","ucode":"362155C96A4509","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259974,"discussion_content":"可以这样 \n  \n flutterEngine.platformViewsController.registry.registerViewFactory(&#34;SampleView&#34;,\n                SimpleViewFactory(StandardMessageCodec(), flutterEngine.dartExecutor.binaryMessenger))","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588834333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175460,"user_name":"JW","can_delete":false,"product_type":"c1","uid":1180823,"ip_address":"","ucode":"1078B9415C1176","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/97/80740db0.jpg","comment_is_top":false,"comment_ctime":1580725493,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1580725493","product_id":100031001,"comment_content":"在flutter工程下 .android打开的java文件无法编译和提示，编写本地代码不友好，有什么办法吗？","like_count":0,"discussions":[{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334920,"discussion_content":"可以直接打开android目录，只是需要下载android依赖那些，构建完成后，就可以写Java代码了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608027629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124983,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/77/c96b5f6c.jpg","nickname":"谢鹏程","note":"","ucode":"D8DF33B3EBC4DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320462,"discussion_content":"选中工程目录鼠标右键-->Flutter --> Open Android Module in Android Studio","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604373633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169375,"user_name":"mqh","can_delete":false,"product_type":"c1","uid":1020208,"ip_address":"","ucode":"DE68D4900C9287","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/30/432a7288.jpg","comment_is_top":false,"comment_ctime":1578323821,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578323821","product_id":100031001,"comment_content":"现在注册插件的话需要用FlutterPlugin，用新接口的话如何进行注册？","like_count":0,"discussions":[{"author":{"id":2161498,"avatar":"","nickname":"七七不说话","note":"","ucode":"B62B9A517CD7FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307807,"discussion_content":"不会。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600763568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155864,"user_name":"kennen","can_delete":false,"product_type":"c1","uid":1595129,"ip_address":"","ucode":"FD89DB480C1D99","user_header":"https://static001.geekbang.org/account/avatar/00/18/56/f9/597cc541.jpg","comment_is_top":false,"comment_ctime":1574769487,"is_pvip":false,"replies":[{"id":"59962","content":"你回忆一下iOS中autolayout和autorelease中父容器的布局变化对于组件布局的影响","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1574830439,"ip_address":"","comment_id":155864,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574769487","product_id":100031001,"comment_content":"iOS中的frame参数并没有用到，flutter是怎么把宽高传给iOS来展示的呢？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475902,"discussion_content":"你回忆一下iOS中autolayout和autorelease中父容器的布局变化对于组件布局的影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574830439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143831,"user_name":"Miracle_","can_delete":false,"product_type":"c1","uid":1594671,"ip_address":"","ucode":"5B885163D73439","user_header":"","comment_is_top":false,"comment_ctime":1571797623,"is_pvip":false,"replies":[{"id":"56201","content":"看具体场景。我的建议是，如果点击交互的事件处理是能够在原生视图内搞定的，原生视图自己监听就好。否则就需要传出来让flutter处理","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1572322377,"ip_address":"","comment_id":143831,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571797623","product_id":100031001,"comment_content":"请问下，嵌入了原生视图后，如果嵌入的是较为复杂的视图，视图带走点击等交互事件，应该在哪边设置监听或者处理呢？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471714,"discussion_content":"看具体场景。我的建议是，如果点击交互的事件处理是能够在原生视图内搞定的，原生视图自己监听就好。否则就需要传出来让flutter处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572322377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140820,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1571053075,"is_pvip":false,"replies":[{"id":"56187","content":"厉害👍","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1572321038,"ip_address":"","comment_id":140820,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571053075","product_id":100031001,"comment_content":"思考题如下：<br><br>&#47;&#47;声明修改原生控件背景的方法<br>  changeBgColor() async {<br>    try {<br>      _methodChannel.invokeMethod(&quot;changeBgColor&quot;, {<br>        &quot;color1&quot;: Random().nextInt(255),<br>        &quot;color2&quot;: Random().nextInt(255),<br>        &quot;color3&quot;: Random().nextInt(255)<br>      });<br>    } catch (e) {<br>      print(e);<br>    }<br>  }<br><br>override fun onMethodCall(p0: MethodCall, p1: MethodChannel.Result) {<br>            when (p0.method) {<br>                &quot;changeBgColor&quot; -&gt; {<br>                    view.setBackgroundColor(Color.rgb(p0.argument&lt;Int&gt;(&quot;color1&quot;)!!, p0.argument&lt;Int&gt;(&quot;color2&quot;)!!, p0.argument&lt;Int&gt;(&quot;color3&quot;)!!))<br>                    p1.success(0)<br>                }<br>                &#47;&#47;如果是别的方法则返回未实现<br>                else -&gt; p1.notImplemented()<br>            }<br>        }","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470575,"discussion_content":"厉害👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572321038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}