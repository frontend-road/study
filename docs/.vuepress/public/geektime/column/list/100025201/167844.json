{"id":167844,"title":"58 | 如何判断架构设计的优劣？","content":"<p>你好，我是七牛云许式伟。</p><p>想要让自己进步，我们首先得知道什么是好的。所以我们今天的话题是，如何判断架构设计的优劣？</p><h2>架构设计的基本准则</h2><p>架构设计会有它的一些基本准则。比如：</p><ul>\n<li>KISS：简单比复杂好；</li>\n<li>Modularity：着眼于模块而不是框架；</li>\n<li>Testable：保证可测试性；</li>\n<li>Orthogonal Decomposition：正交分解。</li>\n</ul><p>KISS  全称是 Keep it Simple, Stupid，用最直白的话说，“简单就是美”。不增加无谓的复杂性。正确理解系统的需求之后才进行设计。要避免过度设计，除非有人为复杂性买单。</p><p>KISS 的“简单”，强调的是易实施性。让模块容易实现，实现的时候心智负担低，比复杂的优化更重要。</p><p>KISS 的“简单”，也是主张让你的代码，包括接口，符合惯例。接口语义要自然，最好让人一看方法名就知道怎么回事，避免惊异。</p><p>Modularity，强调的是模块化。从架构设计角度来说，模块的规格，也就是模块的接口，比模块的实现机制更重要。</p><p>我们应着眼于模块而不是框架。框架是易变的。框架是业务流，可复用性相对更低。框架都将经历不断发展演化的过程，逐步得到完善。</p><p>所以不让模块为框架买单。模块设计时应忽略框架的存在。认真审视模块的接口，发现其中“过度的（或多余的）” 约束条件，把它提高到足够通用的、普适的场景来看。</p><!-- [[[read_end]]] --><p>Testable，强调的是模块的可测试性。设计应该以可测试性为第一目标。</p><p>可测试往往意味着低耦合。一个模块可以很方便地进行测试，那么就可以说它是一个设计优良的模块。模块测试的第一步是环境模拟。模块依赖的模块列表、模块的输入输出，这些是模块测试的需要，也是模块耦合度的表征。</p><p>当然，可测试性不单单因为是耦合的需要。测试让我们能够发现模块构架调整的潜在问题。通常模块在架构调整期（代码重构）最容易引入 Bug。 只有在模块开发过程中我们就不断积累典型的测试数据，以案例的形式固化所有已知 Bug，才可能在架构调整等最容易引发问题的情形下获得最佳的效果。</p><p>Orthogonal Decomposition，中文的意思是 “正交分解”。架构就是不断地对系统进行正交分解的过程。</p><p>相信大家都听过一个设计原则：“优先考虑组合，而不是继承”。如果我们用正交分解的角度来诠释这句话，它本质上是鼓励我们做乘法而不是做加法。组合是乘法，它是让我们用相互正交、完全没有相关性的模块，组合出我们要的业务场景。而继承是加法，通过叠加能力把一个模块改造成另一个模块。</p><h2>核心系统的伤害值</h2><p>正交分解，第一件事情就是要分出哪些是核心系统，哪些是周边子系统。核心系统构成了业务的最小功能集，而后通过不断增加新的周边功能，而演变成功能强大的复杂系统。</p><p>对于核心系统的变更要额外小心。如果某新功能早期没有规划，后期却被界定为属于核心功能，我们就需要认真评估它对既有架构的破坏性。</p><p>至于周边功能，我们核心考虑的是，如何降低添加一个新的周边功能对核心系统的影响？</p><p>不论哪一种情况，如果我们不够小心，系统就会由于不断增加功能而变老化，散发出臭味。</p><p>为了减少一个功能带来的负面影响，这个功能相关代码首先要做到尽可能内聚。</p><p>代码不一定要写到独立的模块（如果代码量不算大的话），但一定要写到独立的文件里面。对于周边系统，这部分独立出来的代码算是它的功能实现代码，不隶属于核心系统。</p><p>我们的关注点是某个周边功能对核心系统的影响。为了添加这个功能，它必然要求核心系统添加相关的代码以获得执行的机会。</p><p>我们根据经验可以初步判断，核心系统为这个周边功能增加的代码量越少，那么这个功能与核心系统的耦合就越低。那么，是否有可能把一个功能的添加对核心系统的影响降低到零，也就是不改一行代码？</p><p>这当然是可能的，只不过这要求核心系统需要提供所谓 “插件机制”。后续我们会继续探讨这个话题，今天暂且按下不表。</p><p>我们先把话题收回到架构设计质量的评估。</p><p>上面我们谈了一些架构设计的基本准则，但还谈不上是质量评估的方法。质量判定的方法可以是定性的，也可以是定量的。</p><p>定性的判断方法有一定的数据支撑，虽然这种支撑有可能是模糊而感性的。比如我们通常会说，“从 XXX 的角度看，我感觉这个更好”。这里 XXX 是某种定性分析的依据。</p><p>从科学严谨性的角度，有定量的判断方法是更理想的状态。可惜的是，到目前为止，我个人并没有听到过任何定量的判断方法来确定架构设计的优劣。但今天我会给出一些个人发明的判定公式。它们都只是经验公式，并没有经过严谨的数学证明。</p><p>我们假设，某个架构设计方案将系统分成了 n 个模块，记为：[M<sub>1</sub>, M<sub> 2</sub> , ..., M<sub> n</sub>]。其中 M<sub>1</sub> 是核心系统，其他模块是周边系统。为简化，我们不妨假设周边系统与周边系统间是正交的，相互没有耦合。</p><p>那么，我们第一个最关注的问题是：</p><blockquote>\n<p>核心系统受到各周边系统的总伤害是多少？</p>\n</blockquote><p>这里有一个周边功能对核心系统总伤害的经验公式：</p><p>$$ \\sum_ {对每一处修改} log_2(修改行数+1)$$</p><p>同一个周边功能相邻的代码行算作一处修改。不同周边功能的修改哪怕相邻也算作多处。</p><p>这个公式核心想表达的含义是：修改处数越多，伤害越大。对于每一处修改，鼓励尽可能减少到只修改一行，更多代码放到周边模块自己那里去。</p><p>这个伤害值公式，当然也同样适用于度量某个周边功能对核心系统的影响面。</p><p>核心系统越干净，增加新功能越容易。由于核心系统的地位，所以这个公式实际上是最重要的测量公式。</p><h2>模块的耦合度测量</h2><p>我们第二个关注的问题，是每个模块自身的质量。模块自身的质量具体来说，又包括模块接口的质量和模块实现的质量。</p><p>我们先看模块接口的质量，这是模块级别最重要的东西。它取决于以下两个方面：</p><p>其一，接口与业务的匹配性。简单说，就是接口越自然体现业务越好。然而，从机器判定的角度来说，这一点是不可计算的，完全依赖于个人的主观判断。我们在下一讲 “少谈点框架，多谈点业务” 中将会继续探讨这个话题。</p><p>其二，接口的外部依赖，也就是模块接口对外部环境的耦合度。</p><p>下面我们要介绍的是模块的 “耦合度测量公式”。它同时适用于模块实现和模块接口的耦合度测量。</p><p>假设，我们的模块实现（或模块接口）依赖了模块 A，那么我们的模块实现（或模块接口）与所依赖的模块 A 的耦合度为：</p><p>$$ \\sum_{对每一个依赖的符号}log_2(符号的出现次数+1)$$</p><p>依赖的符号（symbol）是指：</p><ul>\n<li>被引用的类型，包括 typedef（type alias）、class 或 struct；</li>\n<li>被引用的全局变量、全局函数或成员函数。</li>\n</ul><p>单个模块清楚了，我们看模块实现（或模块接口）的所有外部依赖，也就是该模块的总耦合度公式为：</p><p>$$ \\sum_{对每一个依赖模块A} (耦合度_A * 不成熟度系数_A)$$</p><p>其中，耦合度A是该模块与依赖模块 A 的耦合程度，公式见上。不成熟度系数A 表征依赖模块 A 的不成熟度程度。如果依赖模块 A 完全成熟，不会再发生改变则为0；如果模块在发生非常剧烈变动，连规格都完全没法确定则为 1。</p><p>通过该耦合度测量公式可以看出，我们鼓励依赖外部成熟模块。理论上完全成熟的模块很可能就只有语言内置的数据类型如 int、string 等，其他模块多多少少还是会经受一些变化，所以还是尽量减少外部依赖。</p><p>另外值得一提的是，将模块接口引用的类型 A 改为 object 或 interface{} 类型并不能降低耦合度。也就是说如果某参数为 interface，那么这个 interface 的耦合度要看功能实际使用时，它存在各种可能的类型，都会计算在依赖中。</p><p>我们应该怎么看待耦合度测量公式？</p><p>需要强调的是，它是一个经验公式，仅仅是代表了某种价值主张。在实际应用中，计算得到的具体耦合度值并无物理含义，只能用来对比两个相同功能的系统（或模块）架构设计方案。对于两个功能完全不同的 A、B 系统（或模块），其计算结果并不能用于评判彼此的好坏。</p><h2>结语</h2><p>今天我们探讨的话题是如何评判架构设计的优劣。</p><p>首先我们谈的是架构设计的基本准则，它们虽然不足以明确说谁好或是不好，但是指明了方向。</p><p>然后我们开始对架构好坏做定性甚至定量的分析。考虑到核心系统的重要性，我们单独引入了一个伤害值来评估它的纯洁度。</p><p>最后，我们对模块自身的接口或实现，给出了耦合度测量公式。通过这个公式，我们明确了我们架构设计的价值主张。</p><p>但我们需要意识到的一点是，这些并不是全部。判断模块间的耦合度是复杂的。上面我们的公式某种程度上来说只考虑了静态依赖关系，而没有考虑动态依赖。</p><p>比如说，我们考虑两个网络模块 A 和 B，一个显而易见的耦合度判断是：</p><ul>\n<li>A 调用 B 的网络接口数量越多，依赖越大（静态依赖，上面我们已经考虑）；</li>\n<li>A 调用 B 的网络接口的次数越多，依赖越大（动态依赖，上面我们未考虑）。</li>\n</ul><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们的话题是 “少谈点框架，多谈点业务”。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"57 | 心性：架构师的修炼之道","id":166014},"right":{"article_title":"59 | 少谈点框架，多谈点业务","id":169113}},"comments":[{"had_liked":false,"id":154111,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c1","uid":1494491,"ip_address":"","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1574382422,"is_pvip":false,"replies":[{"id":"59188","content":"👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574394908,"ip_address":"","comment_id":154111,"utype":1}],"discussion_count":6,"race_medal":0,"score":"130423401302","product_id":100025201,"comment_content":"其实还有一种耦合度经常被人忽视，就是技术耦合度。我们相信，无论是今天多么流行的技术，未来都有失去竞争力的一天，但要开一家长达数十年甚至数百年的技术公司，不可能长期使用已经失去竞争力的技术，必然涉及到技术的多次演进。如果公司的关键性产品与某一种技术耦合度太高，则当该技术失去竞争力或彻底淘汰后，技术迁移成本过高，极易造成迁移彻底失败。所以我从不看好那种一个 Git 库里数十万甚至数百万行 xx 语言或者基于 xx 框架编写的代码，要起一个新项目还必须去引用这个库里的代码不可，这种项目不可能活很久。如果这个项目是公司的关键性产品，那么这个公司也活不了很久。","like_count":30,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475378,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574394908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","nickname":"有米","note":"","ucode":"C9A10B7A67BC12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220252,"discussion_content":"问题关键是，你能保证你的公司能活得比语言长？或者公司的业务能比语言长？除非你是国企。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1585841686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1969245,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIfianCzWMIsBxp2r6ETwicVp0icnqHVK1TGoMI0Dapzcczaft2c8RrgYwImOubGKrnfzhKQxJRRUVvQ/132","nickname":"Geek_93f973","note":"","ucode":"93FE88391A0289","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263441,"discussion_content":"但是有些公司为了快，就是用这种框架，在一开始的时候确实快 但是后面再维护确实太难了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589207222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047589,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/25/20ccf994.jpg","nickname":"而立","note":"","ucode":"E3274C04BB6E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410437,"discussion_content":"微服务就提倡保持单个项目规模在一定的范围内，比如在一周内可以重构完成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635691394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107666,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/d2/638ca831.jpg","nickname":"z","note":"","ucode":"CDB0BE8562ECB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210580,"discussion_content":"有个疑问，现在基于spring或者springmvc框架开发不好吗？重复造轮子也不好吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584754173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1107666,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/d2/638ca831.jpg","nickname":"z","note":"","ucode":"CDB0BE8562ECB6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412094,"discussion_content":"Spring框架肯定好啊，好在哪里呢？ 它虽然如层主说的，很庞大。 但是它不一样：1、它很灵活，提供了很多扩展点；2、它可插拔，你可以任意根据需要选择某些模块，而不是无脑的全部引入。但是纯粹作为IOC容器的话，又的确很笨重。推荐Guice。所以，还是看侧重点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636076494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":210580,"ip_address":""},"score":412094,"extra":""}]}]},{"had_liked":false,"id":153822,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1574312531,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23049149011","product_id":100025201,"comment_content":"笔记  <br>1 kiss  有时候，效率就是少做无意义的事。<br>2 模块化<br>缺经验，伤害值，耦合度为啥那样，理解不来。<br>模块设计时应忽略框架的存在。认真审视模块的接口，发现其中“过度的（或多余的）” 约束条件，把它提高到足够通用的、普适的场景来看。<br>3 可测试 <br>  好处  一验证和引导代码设计的是否足够解偶。martin fowlor 敏捷开发 模式 实践里有详细论述<br>其二  确保完成的代码可用。  在坚固的基础上叠加。<br>4 正交分解，  架构就是一种不断正交分解的过程(需要长时间去体验感悟)<br>让模块直接。  (推荐看吴军信息论，里面也有介绍信息正交性)<br>组合是一种正交，让互为正交模块以乘法模式去组合业务。<br>集成是一种加法，(个人觉得有时候抽象类干多了直接变减法)<br><br>最后  缺经验。如何量化，知其然，不知所以然。<br>先胡乱理解一波<br>伤害公式  ，模块耦合度  用好设计模式，重构技巧优化。<br>，总耦合公式引导了团队开发方向。","like_count":5},{"had_liked":false,"id":153261,"user_name":"Geek_03056e","can_delete":false,"product_type":"c1","uid":1509657,"ip_address":"","ucode":"6D4289AD71BC1A","user_header":"","comment_is_top":false,"comment_ctime":1574209131,"is_pvip":false,"replies":[{"id":"58849","content":"如果认为B更加基础、可以放在B。也有人会放在单独的C。anyway，如果A、B、C都隶属于核心系统，全局来说放在哪里只是个细节，对外来说没区别，只不过最好有一个总的入口级模块D把所有这些模块组装起来形成一个整体的DOM。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574210211,"ip_address":"","comment_id":153261,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23049045611","product_id":100025201,"comment_content":"两个核心模块之间由接口调用，并且是A调用B这种的单方面调用，可是两个模块有公用的结构体数据，这些结构体的定义，应该放到那个位置呢？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475100,"discussion_content":"如果认为B更加基础、可以放在B。也有人会放在单独的C。anyway，如果A、B、C都隶属于核心系统，全局来说放在哪里只是个细节，对外来说没区别，只不过最好有一个总的入口级模块D把所有这些模块组装起来形成一个整体的DOM。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574210211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1563877,"avatar":"https://static001.geekbang.org/account/avatar/00/17/dc/e5/d07c38fa.jpg","nickname":"panqing","note":"","ucode":"6A1E50905AD2E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176899,"discussion_content":"根据依赖反转原则，公用数据不是应该放在调用方吗？算是接口的一部分。调用方A定义接口,其中包括公用结构体，B实现这个接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582064443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165136,"user_name":"袁","can_delete":false,"product_type":"c1","uid":1209255,"ip_address":"","ucode":"3216B48107C917","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/a7/d4b45013.jpg","comment_is_top":false,"comment_ctime":1577170029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18757039213","product_id":100025201,"comment_content":"“优先使用对象组合，而不是继承”是面向对象设计的原则之一。其中老师说的组合是乘法，继承是加法让我困惑了下。网上查了下资料《组合也叫“对象持有”，就是在类中定义另一类型的成员，继承会破坏类的独立性，增加系统的复杂性，一般系统的继承层次不超过3层。组合拥有良好的扩展性，支持动态组合，因此优先考虑组合方法。》 更清楚了些。","like_count":4},{"had_liked":false,"id":174410,"user_name":"Tesla","can_delete":false,"product_type":"c1","uid":1500742,"ip_address":"","ucode":"98629AFD9861EE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibe7qvTu8Vic1PVs2EibxoUdx930MC7j2Q9A6s4eibMDZlcicMFY0D0icd3RrDorMChu0zw/132","comment_is_top":false,"comment_ctime":1580195938,"is_pvip":false,"replies":[{"id":"67795","content":"挺好的，我觉得基本上没有什么问题。我们在线下培训的时候会要求需求分析做足，正确的需求分析可以指导怎么做好架构。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1580230135,"ip_address":"","comment_id":174410,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14465097826","product_id":100025201,"comment_content":"我是这样想的，极客时间的核心是知识，学生是知识的订阅者，老师是知识的发布者。但是知识的形式又是多样化的，所以知识本身也需要抽象。<br>设计出来的核心数据结构是，保留知识基本信息及类型ID的类，用户类，用户发布知识的权限类，用户订阅知识的权限类，用户余额类。核心接口是用户注册接口，余额增加 减少接口，发布知识接口，订阅知识接口，判断是否有权添加 修改知识的接口，判断是否有权查阅知识的接口。<br>其他的功能是周边系统，有知识的具体内容类，各种订阅优惠券类等等。<br>不知道这样分析的思路对不对😂","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482394,"discussion_content":"挺好的，我觉得基本上没有什么问题。我们在线下培训的时候会要求需求分析做足，正确的需求分析可以指导怎么做好架构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580230135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153782,"user_name":"吴","can_delete":false,"product_type":"c1","uid":1495840,"ip_address":"","ucode":"4807FB811B2EDC","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","comment_is_top":false,"comment_ctime":1574306723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459208611","product_id":100025201,"comment_content":"精彩，用心的总结","like_count":3},{"had_liked":false,"id":210667,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1587805104,"is_pvip":false,"replies":[{"id":"78478","content":"引用的通用模块越多，越多既有成熟的老模块，代表架构越强大。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1587869909,"ip_address":"","comment_id":210667,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10177739696","product_id":100025201,"comment_content":"* 模块的规格，也就是接口，比模块的实现机制更重要。<br>    * 接口是抽象的，比较稳定的，与具体实现无关，实现可以不断优化，但接口不变。因此与外部模块的关系就是稳定的，整个系统就是稳定的。<br>* 不让模块为框架买单，框架是业务流，可复用性相对更低。<br>    * 业务是易变的，框架也是易变的。<br>    * 不同项目或产品，业务相差很大，框架也就各异。<br>    * 不同项目是不是会使用一些通用的模块呢？<br>        * 例如缓存功能，不关心缓存的是什么；<br>        * 限流，也不关心业务内容；<br>    * 模块设计时，要尽可能和业务解耦，提供抽象的接口。<br>* 老师把架构设计的质量评估表述成公式，很有意义，为我们提供了判断依据。<br>","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493079,"discussion_content":"引用的通用模块越多，越多既有成熟的老模块，代表架构越强大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587869909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247869,"user_name":"Qoo","can_delete":false,"product_type":"c1","uid":1234944,"ip_address":"","ucode":"597362C2F7562B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/00/4650b237.jpg","comment_is_top":false,"comment_ctime":1599898634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894865930","product_id":100025201,"comment_content":"为了子系统之间的解耦，通常会使用消息中间件将子系统隔开，然后通过消息异步通信，但是每个子系统需要的信息不一样，这个消息接口该怎么制定？","like_count":1},{"had_liked":false,"id":174342,"user_name":"Tesla","can_delete":false,"product_type":"c1","uid":1500742,"ip_address":"","ucode":"98629AFD9861EE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibe7qvTu8Vic1PVs2EibxoUdx930MC7j2Q9A6s4eibMDZlcicMFY0D0icd3RrDorMChu0zw/132","comment_is_top":false,"comment_ctime":1580174717,"is_pvip":false,"replies":[{"id":"67787","content":"挺好的问题。你有找到自己的答案么？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1580193875,"ip_address":"","comment_id":174342,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5875142013","product_id":100025201,"comment_content":"老师，可以简单说下 极客时间app的核心系统和周边系统大概是什么吗？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482371,"discussion_content":"挺好的问题。你有找到自己的答案么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580193875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344506,"user_name":"tomz","can_delete":false,"product_type":"c1","uid":2858029,"ip_address":"","ucode":"8857C4095842D5","user_header":"https://static001.geekbang.org/account/avatar/00/2b/9c/2d/cc205cfa.jpg","comment_is_top":false,"comment_ctime":1651592829,"is_pvip":false,"replies":[{"id":"125833","content":"log2只是代表了对数关系，logn和log2之间是常量系数关系，所以下标不重要","user_name":"作者回复","user_name_real":"编辑","uid":"1228022","ctime":1651763709,"ip_address":"","comment_id":344506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651592829","product_id":100025201,"comment_content":"老师你好，在看你的耦合度公式，收益良多。但是不清楚为什么公式是log2()？我可以理解一定不是线性正比（因为那就意味着：n个符号各依赖1次 === 一个符号依赖n次，而显然，前者耦合性更大），但是为什么是log2()？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570438,"discussion_content":"log2只是代表了对数关系，logn和log2之间是常量系数关系，所以下标不重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651763709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201826,"user_name":"有米","can_delete":false,"product_type":"c1","uid":1005042,"ip_address":"","ucode":"C9A10B7A67BC12","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","comment_is_top":false,"comment_ctime":1585841540,"is_pvip":false,"replies":[{"id":"75487","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1585882271,"ip_address":"","comment_id":201826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585841540","product_id":100025201,"comment_content":"判断依赖的程度其实就是看它们交互的次数，无论静态或者动态","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490430,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585882271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180910,"user_name":"Longerian","can_delete":false,"product_type":"c1","uid":1032464,"ip_address":"","ucode":"0B74EE70D09A2A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/10/28d5a686.jpg","comment_is_top":false,"comment_ctime":1582441196,"is_pvip":false,"replies":[{"id":"70200","content":"这里的公式只是我个人的经验公式","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1582443928,"ip_address":"","comment_id":180910,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582441196","product_id":100025201,"comment_content":"生产过程中，核心系统的伤害值、模块的耦合度测量，有公司或者团队在这么定量操作吗？感觉应该要有此类插件或者代码分析工具给出近似值才行。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484842,"discussion_content":"这里的公式只是我个人的经验公式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582443928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163027,"user_name":"@㍿社长","can_delete":false,"product_type":"c1","uid":1055919,"ip_address":"","ucode":"AE497C7251C0E7","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/af/a4ed26e9.jpg","comment_is_top":false,"comment_ctime":1576642243,"is_pvip":false,"replies":[{"id":"61925","content":"动态的耦合？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1576647050,"ip_address":"","comment_id":163027,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576642243","product_id":100025201,"comment_content":"想知道，动态的耦合会对系统的复杂性造成什么影响吗？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478219,"discussion_content":"动态的耦合？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576647050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154638,"user_name":"欧星星","can_delete":false,"product_type":"c1","uid":1014347,"ip_address":"","ucode":"56365442E231A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4b/1a7b36ab.jpg","comment_is_top":false,"comment_ctime":1574497732,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574497732","product_id":100025201,"comment_content":"还是不太明白组合为什么比继承更好，老师说组合是做乘法继承是做加法为什么会是组合好呢，本来是想着继承是强依赖如果父类发生了变化会直接影响子类的行为，但如果用组合的话不一样也会影响实现的行为吗？希望老师解惑","like_count":0,"discussions":[{"author":{"id":1031745,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/41/e3ece193.jpg","nickname":"lovelife","note":"","ucode":"AC39E599A53448","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245529,"discussion_content":"主要是继承的话，你如果需要修改某一个子类的行为，增加一个功能，却有可能导致其它的没有这个功能需求的子类也得跟着修改，但是组合就不会。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587684735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153230,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1574206080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574206080","product_id":100025201,"comment_content":"KISS：简单比复杂好；<br><br><br>封装很多次的代码    是否所谓体现抽象能力呢","like_count":0}]}