{"id":11232,"title":"83 | 程序员练级攻略：分布式架构工程设计","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>要学好分布式架构，你首先需要学习一些架构指导性的文章和方法论，即分布式架构设计原则。下面是几篇很不错的文章，值得一读。</p><ul>\n<li>\n<p><a href=\"https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf\">Designs, Lessons and Advice from Building Large Distributed Systems</a>，Google 杰夫·迪恩（Jeff Dean）2009年一次演讲的PPT。2010年，斯坦福大学请杰夫·迪恩到大学里给他们讲了一节课，你可以在YouTube上看一下，<a href=\"https://www.youtube.com/watch?v=modXC5IWTJI\">Building Software Systems At Google and Lessons Learned</a> ，其回顾了Google发展的历史。</p>\n</li>\n<li>\n<p><a href=\"https://12factor.net/\">The Twelve-Factor App</a> ，如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建SaaS应用提供了方法论，是架构师必读的文章。（<a href=\"https://12factor.net/zh_cn/\">中译版</a>）这篇文章在业内的影响力很大，必读！</p>\n</li>\n<li>\n<p><a href=\"http://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/\">Notes on Distributed Systems for Young Bloods</a> ，给准备进入分布式系统领域的人的一些忠告。</p>\n</li>\n<li>\n<p><a href=\"https://www.usenix.org/legacy/event/lisa07/tech/full_papers/hamilton/hamilton_html/index.html\">On Designing and Deploying Internet-Scale Services</a>（<a href=\"http://darktea.github.io/notes/2014/07/23/On-Designing-and-Deploying-Internet-Scale-Services.html\">中译版</a>），微软Windows Live服务平台的一些经验性的总结文章，很值得一读。</p>\n</li>\n<li>\n<p><a href=\"https://blog.box.com/blog/4-things-to-keep-in-mind-when-building-a-platform-for-the-enterprise/\">4 Things to Keep in Mind When Building a Platform for the Enterprise</a> ，Box平台VP海蒂·威廉姆斯（Heidi Williams）撰写的一篇文章，阐述了为企业构建平台时需要牢记的四件关于软件设计方面的事：1. Design Broadly, Build Narrowly； 2. Platforms Are Powerful and Flexible. Choose wisely what to expose when!；3. Build Incrementally, Get Feedback, and Iterate；4. Create a Platform-first Mentality。文章中有详细的解读，推荐看看。</p>\n</li>\n<li>\n<p><a href=\"https://www.usenix.org/conference/srecon17americas/program/presentation/rosenthal\">Principles of Chaos Engineering</a> ，我们知道，Netflix公司有一个叫Chaos Monkey的东西，这个东西会到分布式系统里“瞎搞”，以此来测试系统的健壮和稳定性。这个视频中，Netflix分享了一些软件架构的经验和原则，值得一看。</p>\n</li>\n<li>\n<p><a href=\"https://www.igvita.com/2016/05/20/building-fast-and-resilient-web-applications/\">Building Fast &amp; Resilient Web Applications</a> ，伊利亚·格里高利克（Ilya Grigorik）在Google I/O 2016上的一次关于如何通过弹力设计来实现快速和可容错的网站架构的演讲，其中有好些经验分享。</p>\n</li>\n<li>\n<p><a href=\"http://highscalability.com/blog/2012/12/31/designing-for-resiliency-will-be-so-2013.html\">Design for Resiliency</a> ，这篇文章带我们全面认识“弹力（Resiliency）”，以及弹力对于系统的重要性，并详细阐述了如何设计和实现系统的弹力。</p>\n</li>\n<li>\n<p>微软的Azure网站上有一系列的 <a href=\"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/\">Design Principle</a> 的文章，你可以看看这几篇： <a href=\"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/self-healing\">Design for Self-healing</a> 、<a href=\"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/scale-out\">Design for Scaling Out</a> 和 <a href=\"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/design-for-evolution\">Design for Evolution</a> 。</p>\n</li>\n<li>\n<p><a href=\"https://www.allthingsdistributed.com/2008/12/eventually_consistent.html\">Eventually Consistent</a> ，AWS CTO维尔纳·沃格尔斯（Werner Vogels）发布在自己Blog上的一篇关于最终一致性的好文。</p>\n</li>\n<li>\n<p><a href=\"https://www.codeproject.com/Articles/151520/Write-Scalable-Code\">Writing Code that Scales</a> ，Rackspace的一篇很不错的博文，告诉我们一些很不错的写出高扩展和高性能代码的工程原则。</p>\n</li>\n<li>\n<p><a href=\"https://architecht.io/lessons-from-facebook-on-engineering-for-scale-f5716f0afc7a\">Automate and Abstract: Lessons from Facebook on Engineering for Scale</a> ，软件自动化和软件抽象，这是软件工程中最重要的两件事了。通过这篇文章，我们可以看到Facebook的关于这方面的一些经验教训。</p>\n</li>\n</ul><!-- [[[read_end]]] --><h1>设计模式</h1><p>有了方法论后，你还需要学习一些比较细节的落地的技术。最好的方式就是学习被前人总结出来的设计模式，虽然设计模式也要分场景，但是设计模式可以让你知道一些套路，这些套路对于我们设计的分布式系统有非常大的帮助，不但可以让我们少走一些弯路，而且还能让我们更为系统和健壮地设计我们的架构。</p><p>下面是一些分布式架构设计模式的网站。</p><p>首先，需要重点推荐的是微软云平台 Azure 上的设计模式。 <a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/\">Cloud Design Patterns</a> ，这个网站上罗列了分布式设计的各种设计模式，可以说是非常全面和完整。对于每一个模式都有详细的说明，并有对其优缺点的讨论，以及适用场景和不适用场景的说明，实在是一个非常不错的学习分布式设计模式的地方。其中有如下分类。</p><ul>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/availability\">设计模式：可用性</a>；</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/data-management\">设计模式：数据管理</a>；</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/design-implementation\">设计模式：设计和实现</a>；</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/messaging\">设计模式：消息</a>；</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/management-monitoring\">设计模式：管理和监控</a>；</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/performance-scalability\">设计模式：性能和扩展</a>；</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/resiliency\">设计模式：系统弹力</a>；</li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/security\">设计模式：安全</a>。</li>\n</ul><p>除此之外，还有其它的一些关于分布式系统设计模式的网站和相关资料。</p><ul>\n<li>\n<p><a href=\"http://en.clouddesignpattern.org/index.php/Main_Page\">AWS Cloud Pattern</a> ，这里收集了AWS云平台的一些设计模式。</p>\n</li>\n<li>\n<p><a href=\"https://research.google.com/pubs/archive/45406.pdf\">Design patterns for container-based distributed systems</a> ，这是Google给的一篇论文，其中描述了容器化下的分布式架构的设计模式。</p>\n</li>\n<li>\n<p><a href=\"https://www.slideshare.net/pagsousa/patterns-fro-distributed-systems\">Patterns for distributed systems</a> ，这是一个PPT，其中讲了一些分布式系统的架构模式，你可以顺着到Google里去搜索。</p>\n</li>\n</ul><p>我个人觉得微服务也好，SOA也好，都是分布式系统的一部分，这里有两个网站罗列了各种各样的服务架构模式。</p><ul>\n<li>\n<p><a href=\"http://microservices.io/patterns/index.html\">A Pattern Language for Micro-Services</a> ；</p>\n</li>\n<li>\n<p><a href=\"http://soapatterns.org/\">SOA Patterns</a>。</p>\n</li>\n</ul><p>当然，还有我在极客时间上写的那些分布式的设计模式的总结。</p><ul>\n<li>\n<p><strong>弹力设计篇</strong>，内容包括：认识故障和弹力设计、隔离设计、异步通讯设计、幂等性设计、服务的状态、补偿事务、重试设计、熔断设计、限流设计、降级设计、弹力设计总结。</p>\n</li>\n<li>\n<p><strong>管理设计篇</strong>，内容包括：分布式锁、配置中心、边车模式、服务网格、网关模式、部署升级策略等。</p>\n</li>\n<li>\n<p><strong>性能设计篇</strong>，内容包括：缓存、异步处理、数据库扩展、秒杀、边缘计算等。</p>\n</li>\n</ul><h1>设计与工程实践</h1><h2>分布式系统的故障测试</h2><ul>\n<li>\n<p><a href=\"https://medium.com/netflix-techblog/fit-failure-injection-testing-35d8e2a9bb2\">FIT: Failure Injection Testing</a> ，Netflix公司的一篇关于做故障注入测试的文章。</p>\n</li>\n<li>\n<p><a href=\"https://medium.com/netflix-techblog/automated-failure-testing-86c1b8bc841f\">Automated Failure Testing</a> ，同样来自Netflix公司的自动化故障测试的一篇博文。</p>\n</li>\n<li>\n<p><a href=\"https://people.ucsc.edu/~palvaro/socc16.pdf\">Automating Failure Testing Research at Internet Scale</a> ，Netflix公司伙同圣克鲁斯加利福尼亚大学和Gremlin游戏公司一同撰写的一篇论文。</p>\n</li>\n</ul><h2>弹性伸缩</h2><ul>\n<li>\n<p><a href=\"http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html\">4 Architecture Issues When Scaling Web Applications: Bottlenecks, Database, CPU, IO</a> ，本文讲解了后端程序的主要性能指标，即响应时间和可伸缩性这两者如何能提高的解决方案，讨论了包括纵向和横向扩展，可伸缩架构、负载均衡、数据库的伸缩、CPU密集型和I/O密集型程序的考量等。</p>\n</li>\n<li>\n<p><a href=\"http://ithare.com/scaling-stateful-objects/\">Scaling Stateful Objects</a> ，这是一本叫《Development&amp;Deployment of Multiplayer Online Games》书中一章内容的节选，讨论了有状态和无状态的节点如何伸缩的问题。虽然还没有写完，但是可以给你一些很不错的基本概念和想法。</p>\n</li>\n<li>\n<p><a href=\"https://blog.codinghorror.com/scaling-up-vs-scaling-out-hidden-costs/\">Scale Up vs Scale Out: Hidden Costs</a> ，Coding Horror上的一篇有趣的文章，详细分析了可伸缩性架构的不同扩展方案（横向扩展或纵向扩展）所带来的成本差异，帮助你更好地选择合理的扩展方案，可以看看。</p>\n</li>\n<li>\n<p><a href=\"https://www.infoq.cn/article/hiXg6WRDjvNE0VNuwzPg\">Best Practices for Scaling Out</a> ，OpenShift的一篇讨论Scale out最佳实践的文章。</p>\n</li>\n<li>\n<p><a href=\"https://www.infoq.com/articles/scalability-worst-practices\">Scalability Worst Practices</a> ，这篇文章讨论了一些最差实践，你需要小心避免。</p>\n</li>\n<li>\n<p><a href=\"http://highscalability.com/blog/2013/8/26/reddit-lessons-learned-from-mistakes-made-scaling-to-1-billi.html\">Reddit: Lessons Learned From Mistakes Made Scaling To 1 Billion Pageviews A Month</a> ，Reddit分享的一些关于系统扩展的经验教训。</p>\n</li>\n<li>\n<p>下面是几篇关于自动化弹性伸缩的文章。</p>\n<ul>\n<li><a href=\"https://medium.com/@Pinterest_Engineering/auto-scaling-pinterest-df1d2beb4d64\">Autoscaling Pinterest</a>；</li>\n<li><a href=\"https://medium.com/square-corner-blog/autoscaling-based-on-request-queuing-c4c0f57f860f\">Square: Autoscaling Based on Request Queuing</a>；</li>\n<li><a href=\"https://medium.com/paypal-engineering/autoscaling-applications-paypal-fb5bb9fdb821\">PayPal: Autoscaling Applications</a>；</li>\n<li><a href=\"http://tech.trivago.com/2017/02/17/your-definite-guide-for-autoscaling-jenkins/\">Trivago: Your Definite Guide For Autoscaling Jenkins</a>；</li>\n<li><a href=\"https://medium.com/netflix-techblog/scryer-netflixs-predictive-auto-scaling-engine-a3f8fc922270\">Scryer: Netflix’s Predictive Auto Scaling Engine</a>。</li>\n</ul>\n</li>\n</ul><h2>一致性哈希</h2><ul>\n<li>\n<p><a href=\"http://www.tom-e-white.com/2007/11/consistent-hashing.html\">Consistent Hashing</a> ，这是一个一致性哈希的简单教程，其中还有代码示例。</p>\n</li>\n<li>\n<p><a href=\"https://medium.com/@dgryski/consistent-hashing-algorithmic-tradeoffs-ef6b8e2fcae8\">Consistent Hashing: Algorithmic Tradeoffs</a> ，这篇文章讲述了一致性哈希的一些缺陷和坑，以及各种哈希算法的性能比较，最后还给了一组代码仓库，其中有各种哈希算法的实现。</p>\n</li>\n<li>\n<p><a href=\"https://medium.com/netflix-techblog/distributing-content-to-open-connect-3e3e391d4dc9\">Distributing Content to Open Connect</a> ，Netflix的一个对一致性哈希的实践，提出了Uniform Consistent Hashing，是挺有意思的一篇文章。</p>\n</li>\n<li>\n<p><a href=\"https://blog.imaginea.com/consistent-hashing-in-cassandra/\">Consistent Hashing in Cassandra</a> ，这是Cassandra中使用到的一致性哈希的相关设计。</p>\n</li>\n</ul><h2>数据库分布式</h2><ul>\n<li>\n<p><a href=\"https://queue.acm.org/detail.cfm?id=3025012\">Life Beyond Distributed Transactions</a> ，该文是Salesforce的软件架构师帕特·赫兰德（Pat Helland）于2016年12月发表的针对其在2007年CIDR（创新数据库研究会议）上首次发表的同名文章的更新和缩写版本。业界谈到分布式事务通常指两段提交2PC事务（Spring/JEE中JTA等)或者Paxos与Raft，这些事务都有明显缺点和局限性。</p>\n<p>而赫兰德在本文讨论的是另外一种基于本地事务情况下的事务机制，它是基于实体和活动（Activity）的概念，其实类似DDD聚合根和领域事件的概念，这种工作流类型事务虽然需要程序员介入，依靠消息系统实现，但可以实现接近无限扩展的大型系统。赫兰德文中提出了重要的观点：“如果你不能使用分布式事务，那么你就只能使用工作流。”</p>\n</li>\n<li>\n<p><a href=\"https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6\">How Sharding Works</a> ，这是一篇很不错的探讨数据Sharding的文章。基本上来说，数据Sharding可能的问题都在这篇文章里谈到了。</p>\n</li>\n<li>\n<p><a href=\"https://www.percona.com/blog/2009/08/06/why-you-dont-want-to-shard/\">Why you don’t want to shard</a> ，这是Percona的一篇文章，其中表达了，不到万不得已不要做数据库分片。是的，最好还是先按业务来拆分，先把做成微服务的架构，然后把数据集变简单，然后再做Sharding会更好。</p>\n</li>\n<li>\n<p><a href=\"https://www.percona.com/sites/default/files/presentations/How%20to%20Scale%20Big%20Data%20Applications.pdf\">How to Scale Big Data Applications</a> ，这也是Percona给出的一篇关于怎样给大数据应用做架构扩展的文章。值得一读。</p>\n</li>\n<li>\n<p><a href=\"https://www.percona.com/blog/2016/08/30/mysql-sharding-with-proxysql/\">MySQL Sharding with ProxySQL</a> ，用ProxySQL来支撑MySQL数据分片的一篇实践文章。</p>\n</li>\n</ul><h2>缓存</h2><ul>\n<li>\n<p><a href=\"https://coolshell.cn/articles/17416.html\">缓存更新的套路</a>，这是我在CoolShell上写的缓存更新的几个设计模式，包括Cache Aside、Read/Write Through、Write Behind Caching。</p>\n</li>\n<li>\n<p><a href=\"http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html\">Design Of A Modern Cache</a> ，设计一个现代化的缓存系统需要注意到的东西。</p>\n</li>\n<li>\n<p><a href=\"https://medium.com/netflix-techblog/caching-for-a-global-netflix-7bcc457012f1\">Netflix: Caching for a Global Netflix</a> ，Netflix公司的全局缓存架构实践。</p>\n</li>\n<li>\n<p><a href=\"https://code.facebook.com/posts/220956754772273/an-analysis-of-facebook-photo-caching/\">Facebook: An analysis of Facebook photo caching</a> ，Facebook公司的图片缓存使用分析，这篇文章挺有意思的，用数据来调优不同的缓存大小和算法。</p>\n</li>\n<li>\n<p><a href=\"https://tech.trivago.com/2017/12/19/how-trivago-reduced-memcached-memory-usage-by-50/\">How trivago Reduced Memcached Memory Usage by 50%</a> ，Trivago公司一篇分享自己是如何把Memcached的内存使用率降了一半的实践性文章。很有意思，可以让你学到很多东西。</p>\n</li>\n<li>\n<p><a href=\"https://engineeringblog.yelp.com/2018/03/caching-internal-service-calls-at-yelp.html\">Caching Internal Service Calls at Yelp</a> ，Yelp公司的缓存系统架构。</p>\n</li>\n</ul><h2>消息队列</h2><ul>\n<li>\n<p><a href=\"https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka\">Understanding When to use RabbitMQ or Apache Kafka</a> ，什么时候使用RabbitMQ，什么时候使用Kafka，通过这篇文章可以让你明白如何做技术决策。</p>\n</li>\n<li>\n<p><a href=\"https://tech.trello.com/why-we-chose-kafka/\">Trello: Why We Chose Kafka For The Trello Socket Architecture</a> ，Trello的Kafka架构分享。</p>\n</li>\n<li>\n<p><a href=\"https://engineering.linkedin.com/kafka/running-kafka-scale\">LinkedIn: Running Kafka At Scale</a> ，LinkedIn公司的Kafka架构扩展实践。</p>\n</li>\n<li>\n<p><a href=\"https://www.confluent.io/blog/put-several-event-types-kafka-topic/\">Should You Put Several Event Types in the Same Kafka Topic?</a> ，这个问题可能经常困扰你，这篇文章可以为你找到答案。</p>\n</li>\n<li>\n<p><a href=\"https://engineeringblog.yelp.com/2016/07/billions-of-messages-a-day-yelps-real-time-data-pipeline.html\">Billions of Messages a Day - Yelp’s Real-time Data Pipeline</a> ，Yelp公司每天十亿级实时消息的架构。</p>\n</li>\n<li>\n<p><a href=\"https://eng.uber.com/reliable-reprocessing/\">Uber: Building Reliable Reprocessing and Dead Letter Queues with Kafka</a> ，Uber公司的Kafka应用。</p>\n</li>\n<li>\n<p><a href=\"https://eng.uber.com/chaperone/\">Uber: Introducing Chaperone: How Uber Engineering Audits Kafka End-to-End</a> ，Uber公司对Kafka消息的端到端审计。</p>\n</li>\n<li>\n<p><a href=\"https://open.nytimes.com/publishing-with-apache-kafka-at-the-new-york-times-7f0e3b7d2077\">Publishing with Apache Kafka at The New York Times</a> ，纽约时报的Kafka工程实践。</p>\n</li>\n<li>\n<p><a href=\"https://blog.heroku.com/kafka-streams-on-heroku\">Kafka Streams on Heroku</a> ，Heroku公司的Kafka Streams实践。</p>\n</li>\n<li>\n<p><a href=\"https://engineering.salesforce.com/how-apache-kafka-inspired-our-platform-events-architecture-2f351fe4cf63\">Salesforce: How Apache Kafka Inspired Our Platform Events Architecture</a> ，Salesforce的Kafka工程实践。</p>\n</li>\n<li>\n<p><a href=\"https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/\">Exactly-once Semantics are Possible: Here’s How Kafka Does it</a> ，怎样用Kafka让只发送一次的语义变为可能。这是业界中一个很难的工程问题。</p>\n</li>\n<li>\n<p><a href=\"https://segment.com/blog/exactly-once-delivery/\">Delivering billions of messages exactly once</a> 同上，这也是一篇挑战消息只发送一次这个技术难题的文章。</p>\n</li>\n<li>\n<p><a href=\"https://yahooeng.tumblr.com/post/135321837876/benchmarking-streaming-computation-engines-at\">Benchmarking Streaming Computation Engines at Yahoo!</a>。Yahoo!的Storm团队在为他们的流式计算做技术选型时，发现市面上缺乏针对不同计算平台的性能基准测试。于是，他们研究并设计了一种方案来做基准测试，测试了Apache Flink、Apache Storm和Apache Spark这三种平台。文中给出了结论和具体的测试方案。（如果原文链接不可用，请尝试搜索引擎对该网页的快照。）</p>\n</li>\n</ul><h2>关于日志方面</h2><ul>\n<li>\n<p><a href=\"https://www.confluent.io/blog/using-logs-to-build-a-solid-data-infrastructure-or-why-dual-writes-are-a-bad-idea/\">Using Logs to Build a Solid Data Infrastructure - Martin Kleppmann</a> ，设计基于log结构应用架构的一篇不错的文章。</p>\n</li>\n<li>\n<p><a href=\"https://blog.twitter.com/engineering/en_us/topics/infrastructure/2015/building-distributedlog-twitter-s-high-performance-replicated-log-servic.html\">Building DistributedLog: High-performance replicated log service</a> ，Distributed是Twitter 2016年5月份开源的一个分布式日志系统。在Twitter内部已经使用2年多。其主页在 <a href=\"http://distributedlog.io/\">distributedlog.io</a>。这篇文章讲述了这个高性能日志系统的一些技术细节。另外，其技术负责人是个中国人，其在微信公众号中也分享过这个系统 <a href=\"https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=403051208&idx=1&sn=1694ac05acbcb5ca53c88bfac8a68856&scene=2&srcid=1224xZuQ9QQ4sRmiPVdHTppL\">Twitter高性能分布式日志系统架构解析</a>。</p>\n</li>\n<li>\n<p><a href=\"https://code.facebook.com/posts/357056558062811/logdevice-a-distributed-data-store-for-logs/\">LogDevice: a distributed data store for logs</a> ，Facebook分布式日志系统方面的一些工程分享。</p>\n</li>\n</ul><h2>关于性能方面</h2><ul>\n<li>\n<p><a href=\"http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it\">Understand Latency</a> ，这篇文章收集并整理了一些和系统响应时间相关的文章，可以让你全面了解和Latency有关的系统架构和设计经验方面的知识。</p>\n</li>\n<li>\n<p><a href=\"http://highscalability.com/blog/2012/5/16/big-list-of-20-common-bottlenecks.html\">Common Bottlenecks</a> ，文中讲述了20个常见的系统瓶颈。</p>\n</li>\n<li>\n<p><a href=\"https://blog.codinghorror.com/performance-is-a-feature/\">Performance is a Feature</a> ，Coding Horror上的一篇让你关注性能的文章。</p>\n</li>\n<li>\n<p><a href=\"https://codeascraft.com/2014/12/11/make-performance-part-of-your-workflow/\">Make Performance Part of Your Workflow</a> ，这篇文章是图书《<a href=\"http://shop.oreilly.com/product/0636920033578.do\">Designing for Performance</a>》中的节选（国内没有卖的），其中给出来了一些和性能有关的设计上的平衡和美学。</p>\n</li>\n<li>\n<p><a href=\"https://blog.cloudflare.com/counting-things-a-lot-of-different-things/\">CloudFlare: How we built rate limiting capable of scaling to millions of domains</a>，讲述了CloudFlare公司是怎样实现他们的限流功能的。从最简单的每客户IP限流开始分析，进一步讲到anycast，在这种情况下PoP的分布式限流是怎样实现的，并详细解释了具体的算法。</p>\n</li>\n</ul><h2>关于搜索方面</h2><ul>\n<li><a href=\"https://instagram-engineering.com/search-architecture-eeb34a936d3a\">Instagram: Search Architecture</a></li>\n<li><a href=\"http://www.cs.otago.ac.nz/homepages/andrew/papers/2017-8.pdf\">eBay: The Architecture of eBay Search</a></li>\n<li><a href=\"https://www.ebayinc.com/stories/blogs/tech/making-e-commerce-search-faster/\">eBay: Improving Search Engine Efficiency by over 25%</a></li>\n<li><a href=\"https://engineering.linkedin.com/search/did-you-mean-galene\">LinkedIn: Introducing LinkedIn’s new search architecture</a></li>\n<li><a href=\"https://engineering.linkedin.com/blog/2018/03/search-federation-architecture-at-linkedin\">LinkedIn: Search Federation Architecture at LinkedIn</a></li>\n<li><a href=\"https://slack.engineering/search-at-slack-431f8c80619e\">Slack: Search at Slack</a></li>\n<li><a href=\"https://blog.doordash.com/powering-search-recommendations-at-doordash-8310c5cfd88c\">DoorDash: Search and Recommendations at DoorDash</a></li>\n<li><a href=\"https://blog.twitter.com/engineering/en_us/a/2014/building-a-complete-tweet-index.html\">Twitter: Search Service at Twitter (2014)</a></li>\n<li><a href=\"https://medium.com/@Pinterest_Engineering/manas-a-high-performing-customized-search-system-cf189f6ca40f\">Pinterest: Manas: High Performing Customized Search System</a></li>\n<li><a href=\"https://tech.flipkart.com/sherlock-near-real-time-search-indexing-95519783859d\">Sherlock: Near Real Time Search Indexing at Flipkart</a></li>\n<li><a href=\"https://medium.com/airbnb-engineering/nebula-as-a-storage-platform-to-build-airbnbs-search-backends-ecc577b05f06\">Airbnb: Nebula: Storage Platform to Build Search Backends</a></li>\n</ul><h2>各公司的架构实践</h2><p><a href=\"http://highscalability.com/\">High Scalability</a> ，这个网站会定期分享一些大规模系统架构是怎样构建的，下面是迄今为止各个公司的架构说明。</p><ul>\n<li><a href=\"http://highscalability.com/youtube-architecture\">YouTube Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html\">Scaling Pinterest</a></li>\n<li><a href=\"http://highscalability.com/google-architecture\">Google Architecture</a></li>\n<li><a href=\"http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster\">Scaling Twitter</a></li>\n<li><a href=\"http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html\">The WhatsApp Architecture</a></li>\n<li><a href=\"http://highscalability.com/flickr-architecture\">Flickr Architecture</a></li>\n<li><a href=\"http://highscalability.com/amazon-architecture\">Amazon Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html\">Stack Overflow Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html\">Pinterest Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html\">Tumblr Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">Instagram Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html\">TripAdvisor Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html\">Scaling Mailbox</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html\">Salesforce Architecture </a></li>\n<li><a href=\"http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html\">ESPN Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html\">Uber Architecture</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PE4gwstWhmc\">Dropbox Design</a></li>\n<li><a href=\"http://www.splunk.com/view/SP-CAAABF9\">Splunk Architecture</a></li>\n</ul><h1>小结</h1><p>今天我们分享的内容是高手成长篇分布式架构部分的最后一篇——分布式架构工程设计，讲述了设计原则、设计模式等方面的内容，尤其整理和推荐了国内外知名企业的设计思路和工程实践，十分具有借鉴意义。</p><p>下篇文章中，我们将分享微服务架构方面的内容。敬请期待。</p><p>下面是《程序员练级攻略》系列文章的目录。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/8136\">开篇词</a></li>\n<li>入门篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8216\">零基础启蒙</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8217\">正式入门</a></li>\n</ul>\n</li>\n<li>修养篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8700\">程序员修养</a></li>\n</ul>\n</li>\n<li>专业基础篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8701\">编程语言</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8887\">理论学科</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8888\">系统知识</a></li>\n</ul>\n</li>\n<li>软件设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/9369\">软件设计</a></li>\n</ul>\n</li>\n<li>高手成长篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/9759\">Linux系统、内存和网络（系统底层知识）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/9851\">异步I/O模型和Lock-Free编程（系统底层知识）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10216\">Java底层知识</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10301\">数据库</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10603\">分布式架构入门（分布式架构）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10604\">分布式架构经典图书和论文（分布式架构）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11232\">分布式架构工程设计(分布式架构)</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11116\">微服务</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11665\">容器化和自动化运维</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11669\">机器学习和人工智能</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12271\">前端基础和底层原理（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12389\">前端性能优化和框架（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12486\">UI/UX设计（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12561\">技术资源集散地</a></li>\n</ul>\n</li>\n</ul>","neighbors":{"left":{"article_title":"82 | 程序员练级攻略：分布式架构经典图书和论文","id":10604},"right":{"article_title":"84 | 程序员练级攻略：微服务","id":11116}},"comments":[{"had_liked":false,"id":16237,"user_name":"NonStatic","can_delete":false,"product_type":"c1","uid":1048909,"ip_address":"","ucode":"9F8BAD86389890","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6icqg5GGFVo2CkFnjSGleOuDBvTTpXywFbBKicKSNXUH1PibHEq2IgWWGJZsn4ErV6J9mlcBiczV7T5QnpiajLsOibOw/132","comment_is_top":false,"comment_ctime":1531841627,"is_pvip":false,"replies":[{"id":"5636","content":"是的，读一手信息是最好的！","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531880344,"ip_address":"","comment_id":16237,"utype":1}],"discussion_count":2,"race_medal":0,"score":"237755042907","product_id":100002201,"comment_content":"吐槽只放链接的，一般自己是做不出这个链接列表的，更别说读完这些链接了。说句实在话，我花钱就是看耗子哥这个链接列表的！这里的链接列表能让我节省出用来找到和甄别哪片文章该读的学习时间，用来读更多的文章。<br><br>文章和书，就要读原始的那个。别人给你讲的都是他&#47;她认为值得讲的，却不一定是你需要的。一个领域，入门的时候可以听听别人讲的，真到用的时候，只有自己读过原始资料才能给你你应该用到的细节。","like_count":56,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420725,"discussion_content":"是的，读一手信息是最好的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531880344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1517705,"avatar":"https://static001.geekbang.org/account/avatar/00/17/28/89/105ed607.jpg","nickname":"子非","note":"","ucode":"45B4700DB26D64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564837,"discussion_content":"耗子哥做了个精准推荐系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650338419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16245,"user_name":"C_love","can_delete":false,"product_type":"c1","uid":1043613,"ip_address":"","ucode":"F268D1867C90C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/9d/4d705f03.jpg","comment_is_top":false,"comment_ctime":1531845732,"is_pvip":false,"replies":[{"id":"5642","content":"是一个很踏实的人，坚持住✌🏻","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531881066,"ip_address":"","comment_id":16245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57366420580","product_id":100002201,"comment_content":"看到很多人吐槽只有链接，其实个人感觉这才是精华。<br><br>现在很多知识网上都能找到，但信息过滤所消耗的时间和精力是极大的。有像耗子哥这样的过来人的指引，会极大的减少这样的消耗。<br><br>技术学习往往都是自我驱动，由内而外，只看别人的总结或者嚼过的食物一般都会比较片面。从技术的源头去学习才能真正领悟其中三味。很多人追求的总结分析，大多是术，但不是道。<br><br>不过每个人需求不同，新人往往更多对术的东西感兴趣，这也很正常。如果基本的coding尚未得心应手就去学习更底层或者更难的知识会感觉眼高手低。这也是耗子哥反复强调要把前面的基础打好，虽然基础部分只有几章内容，但真正融会贯通可是需要几年。只能说专栏目前的内容并不很适合新人。<br><br>所以大家先专注于适合自己的部分去学习就好啦","like_count":14,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420727,"discussion_content":"是一个很踏实的人，坚持住✌🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531881066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215744,"user_name":"黄强","can_delete":false,"product_type":"c1","uid":1086093,"ip_address":"","ucode":"20231AC29CFD53","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/8d/ab469ad5.jpg","comment_is_top":false,"comment_ctime":1589094511,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48833734767","product_id":100002201,"comment_content":"对习惯了喂养模式的人来说这是一个极度不负责任的专栏，都是各种罗列；<br>对有自驱力的人来说，这是一个极度干货并有方向的专栏，只要专注学习，必成高手；<br>","like_count":10,"discussions":[{"author":{"id":1447283,"avatar":"https://static001.geekbang.org/account/avatar/00/16/15/73/e5e4b245.jpg","nickname":"Andy","note":"","ucode":"708042A35424DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559421,"discussion_content":"要具备后者，还是需要一定功力的，但原则有一个，就是需要结合自己实际面临的真实问题，有所取舍的学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648748379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16145,"user_name":"二胡1999","can_delete":false,"product_type":"c1","uid":1015795,"ip_address":"","ucode":"0937198C2D0A35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/f3/535f2ef0.jpg","comment_is_top":false,"comment_ctime":1531799669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48776439925","product_id":100002201,"comment_content":"回答Roger同学的问题：一直都有网页版啊。<br>所有专栏列表地址：<br>https:&#47;&#47;time.geekbang.org&#47;columns","like_count":11},{"had_liked":false,"id":16093,"user_name":"Milo","can_delete":false,"product_type":"c1","uid":1078867,"ip_address":"","ucode":"FB9A0CF2D7FF7A","user_header":"","comment_is_top":false,"comment_ctime":1531786385,"is_pvip":false,"replies":[{"id":"5593","content":"谢谢批评，不过，这可是我精挑细选的文章列表啊，我已过滤了至少7成的信息了…… 这些文章都是含金量非常高的，仔细读一下，你会发现价值所在的，当然，你要打好前面的基础，否则学习这些东西，你的挫败感会很强的……","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531813991,"ip_address":"","comment_id":16093,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35891524753","product_id":100002201,"comment_content":"越来越没意思了，就给个文章列表，花这个钱不值得了！","like_count":9,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420663,"discussion_content":"谢谢批评，不过，这可是我精挑细选的文章列表啊，我已过滤了至少7成的信息了…… 这些文章都是含金量非常高的，仔细读一下，你会发现价值所在的，当然，你要打好前面的基础，否则学习这些东西，你的挫败感会很强的……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531813991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376531,"discussion_content":"订阅这么多专栏你看完了没。。\n2021年5月28号看你的学习时长图，基本上是空的。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622177748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16116,"user_name":"Roger","can_delete":false,"product_type":"c1","uid":1010784,"ip_address":"","ucode":"1437006ECF106E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/60/470da80b.jpg","comment_is_top":false,"comment_ctime":1531789969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31596561041","product_id":100002201,"comment_content":"发了这么多链接手机上很难看啊，什么时候有pc或者web端","like_count":7},{"had_liked":false,"id":16302,"user_name":"李春霖","can_delete":false,"product_type":"c1","uid":1112672,"ip_address":"","ucode":"1DE31BA02A024E","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/60/6d24096a.jpg","comment_is_top":false,"comment_ctime":1531876205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27301679981","product_id":100002201,"comment_content":"应该会有很多人意识不到高价值信息索引意味着什么……   收录的这些文章估计够我消化几年的了，支持耗子哥坚持下去！","like_count":7},{"had_liked":false,"id":16244,"user_name":"Field Li","can_delete":false,"product_type":"c1","uid":1142326,"ip_address":"","ucode":"64B9FE5365E779","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/36/f61533d1.jpg","comment_is_top":false,"comment_ctime":1531845341,"is_pvip":false,"replies":[{"id":"5634","content":"我当然可以写我理解后的，但我还是觉得大家应该去读第一手的资料，而不是他人消化过的。这样会更好。<br><br>我给的这些文章或者是书籍，讲得都很好了，你先看几篇吧，真的不需要二手的。😜<br>","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531880286,"ip_address":"","comment_id":16244,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23006681821","product_id":100002201,"comment_content":"怎么说呢？虽然资料确实都是好的，但是可能很多人跟我一样更想看一些结合作者的理解的文章，或者纯粹作者自身加工的文章吧。而不是纯放些链接上去了，链接的内容很好，但是感觉还是有敷衍的嫌疑","like_count":6,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420726,"discussion_content":"我当然可以写我理解后的，但我还是觉得大家应该去读第一手的资料，而不是他人消化过的。这样会更好。\n\n我给的这些文章或者是书籍，讲得都很好了，你先看几篇吧，真的不需要二手的。😜\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531880286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257725,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1604103937,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"18783973121","product_id":100002201,"comment_content":"很难的这篇攻略的留言数目多了一些，皓叔也回答了一部分“质疑”。按我个人的观点，凡是质疑的，大概都没有仔细看过练级攻略的开篇，以及专栏前面的一些文章。<br><br>这又是一篇“有生之年”的文章，最近在参加极客大学的架构师训练营，其中的一些内容，比如一致性哈希、消息队列等也有所涉及，但是训练营的深度是显然不够的；而专栏中提供的链接，估计我短时间内也读不完，不期速成，日拱一卒就好。<br><br>看完了有关分布式的三篇攻略，我倒是觉得自己可能需要回到基础篇去重新打磨自己了。<br><br>留言里面有同学提到，这里是“山顶”，皓叔带着看了一眼风景，最终还是要靠自己来往上爬。<br><br>更进一步，练级攻略提供的是“山脉”，普通人可能只需要爬到半山腰，牛人可能会爬上其中一座高峰，而皓叔感觉是在这山里上上下下好多次，现在坐在一边看小朋友们爬。","like_count":5},{"had_liked":false,"id":16411,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1531929753,"is_pvip":false,"replies":[{"id":"5709","content":"我后面会新开文章说的","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531967811,"ip_address":"","comment_id":16411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18711798937","product_id":100002201,"comment_content":"老师请问这些文章您是怎么找到能教教获取这种干货的方法吗？我觉得这个方法更有价值","like_count":5,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420788,"discussion_content":"我后面会新开文章说的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531967811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16101,"user_name":"我是李香兰小朋友","can_delete":false,"product_type":"c1","uid":1155349,"ip_address":"","ucode":"84239A65A4D686","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/15/b7284d60.jpg","comment_is_top":false,"comment_ctime":1531787799,"is_pvip":false,"replies":[{"id":"5591","content":"最近几篇文章里的那些引用文章，你看了么？都是，技术的深度介绍和深度理解，同样包括技术比较。另外，作为一个两年工作经验的人，最近这几篇文章中罗列的这些技术文章对你来说太深了，你可能看不懂。<br><br>另外，在高手篇开篇的时候我说过了——<br><br>我假设你在前面已经打下了非常扎实的基础，但是要成为一个高手，基础知识只是一个地基，你还需要很多更为具体的技术。对我来说，就是看各种各样的文章、手册、论文、分享…… 其实，学习到一定程度，就是要从书本中走出去，到社区里和大家一起学习，而且还需要自己找食吃了。所以，对于这里面的文章，有很多都是在罗列各种文章和资源，只是为你梳理信息源，而不是喂你吃饭。<br><br>老实说，我已经为你梳理并过滤掉了很多的信息，这里只留下了 30% 我觉得最经济也最有价值的信息。虽然对于不同定位和不同需求的人还可以再对这些信息进行删减，但是觉得我这么一做就会对其它人不公平了。所以，这也是我觉得最小数量集的信息和资源吧。你也可以把我这里的东西当成一个索引来对待。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531813520,"ip_address":"","comment_id":16101,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14416689687","product_id":100002201,"comment_content":"耗子哥，可以提个意见吗？作为一个两年的工作经验的人，其实比较希望看到是某种技术的详细介绍或者某个知识点的详细理解，或者是一些工作上的技术选型的一些经验，你最近这几篇文章都是介绍一些书籍资料，感觉对我来说帮助不大，我可以自己去找啊，希望耗子哥理解！","like_count":3,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420667,"discussion_content":"最近几篇文章里的那些引用文章，你看了么？都是，技术的深度介绍和深度理解，同样包括技术比较。另外，作为一个两年工作经验的人，最近这几篇文章中罗列的这些技术文章对你来说太深了，你可能看不懂。\n\n另外，在高手篇开篇的时候我说过了——\n\n我假设你在前面已经打下了非常扎实的基础，但是要成为一个高手，基础知识只是一个地基，你还需要很多更为具体的技术。对我来说，就是看各种各样的文章、手册、论文、分享…… 其实，学习到一定程度，就是要从书本中走出去，到社区里和大家一起学习，而且还需要自己找食吃了。所以，对于这里面的文章，有很多都是在罗列各种文章和资源，只是为你梳理信息源，而不是喂你吃饭。\n\n老实说，我已经为你梳理并过滤掉了很多的信息，这里只留下了 30% 我觉得最经济也最有价值的信息。虽然对于不同定位和不同需求的人还可以再对这些信息进行删减，但是觉得我这么一做就会对其它人不公平了。所以，这也是我觉得最小数量集的信息和资源吧。你也可以把我这里的东西当成一个索引来对待。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531813520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93558,"user_name":"三杯酒量","can_delete":false,"product_type":"c1","uid":1083428,"ip_address":"","ucode":"7628F6ED7F8211","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epiaqzRM3iadZqJmFobP8Vb9pbs4qP3DLiaLjPU7zPyt74QIJbUbhg94BpBIAVPW6SnK7um0zZscdZGg/132","comment_is_top":false,"comment_ctime":1557496054,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10147430646","product_id":100002201,"comment_content":"为什么全是国外的，国内互联网公司现在也很厉害了，为啥不放点国内的","like_count":3,"discussions":[{"author":{"id":1047311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fb/0f/2bb7e1e8.jpg","nickname":"长芽的土豆子","note":"","ucode":"92E2C6158BD5B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327350,"discussion_content":"战狼？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1605798321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19046,"user_name":"雪花飘飘","can_delete":false,"product_type":"c1","uid":1025882,"ip_address":"","ucode":"7B986C68308E62","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/5a/2f98b96a.jpg","comment_is_top":false,"comment_ctime":1533650671,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10123585263","product_id":100002201,"comment_content":"一篇文章就够订阅的钱了，厉害","like_count":2},{"had_liked":false,"id":16417,"user_name":"木子李的李","can_delete":false,"product_type":"c1","uid":1083145,"ip_address":"","ucode":"BC6FC62DBECEBA","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/09/e8c2ebcd.jpg","comment_is_top":false,"comment_ctime":1531932672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10121867264","product_id":100002201,"comment_content":"支持！！！ 干货最多的专栏，虽然我才一年经验好多看不懂。讲的好多都是通用的方法论，懂得人自然懂","like_count":3},{"had_liked":false,"id":16255,"user_name":"kuzan","can_delete":false,"product_type":"c1","uid":1006773,"ip_address":"","ucode":"4A6CCE0629D4AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/b5/0737c1f2.jpg","comment_is_top":false,"comment_ctime":1531868453,"is_pvip":false,"replies":[{"id":"5628","content":"谢谢理解。的确花了很大力气并对比了相似文章，还做了好多筛选以让大家关注更重要的信息。<br><br>另外，我没有作更多的描述和说明，是希望大家能自己阅读，自己领悟，习惯吃第一手的食物，而不是被别人消化过的。<br><br>再次感谢理解！","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531878674,"ip_address":"","comment_id":16255,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10121803045","product_id":100002201,"comment_content":"这些文章链接让读者自己找不知道要花多大力气，支持目前这种方法，希望老师不要改变，师父领进门 修行在个人，成长要靠自己去领悟的","like_count":3,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420730,"discussion_content":"谢谢理解。的确花了很大力气并对比了相似文章，还做了好多筛选以让大家关注更重要的信息。\n\n另外，我没有作更多的描述和说明，是希望大家能自己阅读，自己领悟，习惯吃第一手的食物，而不是被别人消化过的。\n\n再次感谢理解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531878674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16223,"user_name":"小鱼儿","can_delete":false,"product_type":"c1","uid":1053492,"ip_address":"","ucode":"989EC453936B91","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/34/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1531836973,"is_pvip":false,"replies":[{"id":"5638","content":"在《程序修养篇》中说过：“必须指出，再往下走，有一个技能非常重要，那就是英文。如果对这个技能发怵的话，那么你可能无缘成为一个程序员高手了。因为我们所有的计算机技术全部来自于西方国家，所以如果你要想成为一个高手的话，那么必须到信息的源头去。英文的世界真是有价值的信息的集散地”，所以，非常建议你加强自己的英文能力！加油💪","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531880513,"ip_address":"","comment_id":16223,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10121771565","product_id":100002201,"comment_content":"大部分都是英文版的，有对应中文版就更好了！","like_count":3,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420719,"discussion_content":"在《程序修养篇》中说过：“必须指出，再往下走，有一个技能非常重要，那就是英文。如果对这个技能发怵的话，那么你可能无缘成为一个程序员高手了。因为我们所有的计算机技术全部来自于西方国家，所以如果你要想成为一个高手的话，那么必须到信息的源头去。英文的世界真是有价值的信息的集散地”，所以，非常建议你加强自己的英文能力！加油💪","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1531880513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16203,"user_name":"JasonYang","can_delete":false,"product_type":"c1","uid":1147071,"ip_address":"","ucode":"67616A3E0DA63C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/c1ruuVH7iaesLxJD9Cc4vWLZ1y3d2OZx7o5kQP8sxB12kicq3oAy0GqUZm7WfvicWwwI1QM9atLLBGzAFe6FgGyEw/132","comment_is_top":false,"comment_ctime":1531830690,"is_pvip":false,"replies":[{"id":"5640","content":"文章开篇说过，这篇文章不是人人皆宜的，而且会是很吓人的，我就是要吓退那些想要速成的人。<br><br>另外，如你所说，我有我的局限，我能保证的不是面面俱到，而是主流技术，不至于让大家学完后没几年就废弃了。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531880844,"ip_address":"","comment_id":16203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10121765282","product_id":100002201,"comment_content":"每期都有在看，突然觉得标题过大，程序员练级攻略与进阶 这个话题太大了，看到后面更像是您对自身熟悉的技术领域的老生常谈，链接确实不错，干货满满，但是标题太大了，这么多程序员，好比不同期待的食客，他们期待 你有满汉全席 ，但是你并不完美，你只能做川菜或是粤菜，所以我想由于您的标题过大，总有一部分的人是不满意的，其实酷壳老版的练级攻略之所以所欢迎，一方面是免费指导，另一方面是对未来趋势的预判，第三就是亲切，而且实用，可能是老版太好，难免期待会有落差，其实我一开始挺期待你说 大家都会遇见的瓶颈或者疑问 如何高效的使用Google  或者其他软技能，因为这些东西具有普遍性，人人皆宜，话说回来，就是由于标题过大，你忙着把主线路说完，却忘了一些重要的东西","like_count":3,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420712,"discussion_content":"文章开篇说过，这篇文章不是人人皆宜的，而且会是很吓人的，我就是要吓退那些想要速成的人。\n\n另外，如你所说，我有我的局限，我能保证的不是面面俱到，而是主流技术，不至于让大家学完后没几年就废弃了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531880844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211218,"user_name":"Geek_58e979","can_delete":false,"product_type":"c1","uid":1802167,"ip_address":"","ucode":"C9439302B5C952","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7f/b7/53912d0c.jpg","comment_is_top":false,"comment_ctime":1587916401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882883697","product_id":100002201,"comment_content":"很受益这句话：学习到一定程度，就是要从书本中走出去，到社区里和大家一起学习，而且还需要自己找食吃了","like_count":2},{"had_liked":false,"id":16186,"user_name":"Regular","can_delete":false,"product_type":"c1","uid":1025998,"ip_address":"","ucode":"80B3EA083534CA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/ce/7ee0d672.jpg","comment_is_top":false,"comment_ctime":1531821694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826788990","product_id":100002201,"comment_content":"吐槽老师只放链接的，建议一字不差地从开篇读。虽然现在的内容我已经看不懂了，但是我知道这些内容都是精华，在学好专业基础篇后会认真看的。","like_count":1},{"had_liked":false,"id":236773,"user_name":"rocedu","can_delete":false,"product_type":"c1","uid":1013097,"ip_address":"","ucode":"E46E29CBBB94A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/69/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1595541031,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595541031","product_id":100002201,"comment_content":"https:&#47;&#47;www.ituring.com.cn&#47;book&#47;1572  《Designing for Performance》 中文版 《速度与激情：以网站性能提升用户体验 》 2016年就出版了","like_count":0},{"had_liked":false,"id":218739,"user_name":"行道有德","can_delete":false,"product_type":"c1","uid":1495977,"ip_address":"","ucode":"92B2A5A6E8E7C3","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/a9/36e59707.jpg","comment_is_top":false,"comment_ctime":1589862565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589862565","product_id":100002201,"comment_content":"耗子哥愿意把自己的第一手资料给你，要珍惜这个资料列表！如果只是把自己消化过的再翻译给你，你也只是知道怎么用，只会停留在“术”的运用阶段，你甚至都不愿意再动脑思考，技术，要练，就练内功！","like_count":0},{"had_liked":false,"id":198406,"user_name":"CodeAllen","can_delete":false,"product_type":"c1","uid":1436590,"ip_address":"","ucode":"DC479F9F7845CA","user_header":"https://static001.geekbang.org/account/avatar/00/15/eb/ae/e4752b7e.jpg","comment_is_top":false,"comment_ctime":1585449922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585449922","product_id":100002201,"comment_content":"感觉很多抱怨的是因为有太多不懂了，毕竟不是每个人都能登上月球，我理解是这么多知识找到适合自己的就好，兴趣是第一驱动力，要不就是学一辈子也学不完","like_count":0},{"had_liked":false,"id":194258,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1585042856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585042856","product_id":100002201,"comment_content":"这里是大山的顶部，你们为啥都喜欢站在山脚下看风景呢？？","like_count":0},{"had_liked":false,"id":187154,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1584027231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584027231","product_id":100002201,"comment_content":"好的老师帮我们打开一扇窗，可以看到美好的风景。<br>分布式架构设计的方面很多，老师分为故障测试、弹性伸缩、一致性哈希、数据库分布式、缓存、消息队列、日志、性能、搜索以及各公司的架构实践等方面，推荐了很多优质一手资料，都是硬菜，需要好好品尝。<br>只有站在技术前沿，才可能有突破、创新，切记固步自封！<br>","like_count":0},{"had_liked":false,"id":177368,"user_name":"Max","can_delete":false,"product_type":"c1","uid":1275507,"ip_address":"","ucode":"D72A417585113F","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/73/691fda57.jpg","comment_is_top":false,"comment_ctime":1581376539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581376539","product_id":100002201,"comment_content":"https:&#47;&#47;blog.cloudflare.com&#47;counting-things-a-lot-of-different-things&#47; 这个真心太简陋了，推荐，kong的blog https:&#47;&#47;konghq.com&#47;blog&#47;how-to-design-a-scalable-rate-limiting-algorithm&#47;","like_count":0},{"had_liked":false,"id":148597,"user_name":"mason","can_delete":false,"product_type":"c1","uid":1587652,"ip_address":"","ucode":"92ED8298143047","user_header":"https://static001.geekbang.org/account/avatar/00/18/39/c4/b59a9229.jpg","comment_is_top":false,"comment_ctime":1573036072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573036072","product_id":100002201,"comment_content":"这个专栏的知识富集度相当之高，从另一种角度来讲也是帮我节省找资料和甄别资料的时间。虽然才两年的开发经验，但是并不满足常规业务迭代，平时也看了经典巨作，但是远远没这里面系统和详细，够消化好几年了。<br>对于想《xx天入门到精通》可能要失望了","like_count":0},{"had_liked":false,"id":58595,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1547130253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547130253","product_id":100002201,"comment_content":"二话不说，一睹为快。","like_count":0},{"had_liked":false,"id":32176,"user_name":"建斌郭子","can_delete":false,"product_type":"c1","uid":1088749,"ip_address":"","ucode":"9A6A2AC6C866A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/ed/1369d4b6.jpg","comment_is_top":false,"comment_ctime":1539479034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539479034","product_id":100002201,"comment_content":"补充说明，这些链接的价值在于，当你把这些链接里的内容全都看完后，你才会觉得不再需要这篇文章了。陈皓老师(没错，我认为的良师+高师)给了我们一个梯子，对我们来说，最好的做法是先沿着梯子爬过去，看看外面的世界，而不是纠结梯子好不好看 ","like_count":0},{"had_liked":false,"id":21101,"user_name":"TomnyYear","can_delete":false,"product_type":"c1","uid":1013355,"ip_address":"","ucode":"4C5309C22CA374","user_header":"","comment_is_top":false,"comment_ctime":1534914297,"is_pvip":false,"replies":[{"id":"7421","content":"没有，sorry，以后补上","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1534930762,"ip_address":"","comment_id":21101,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534914297","product_id":100002201,"comment_content":"为什么写了那么多篇，没有讨论如何测试分布式的。还有代码级别的测试？","like_count":0,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422535,"discussion_content":"没有，sorry，以后补上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534930762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18170,"user_name":"于曦程","can_delete":false,"product_type":"c1","uid":1042977,"ip_address":"","ucode":"90BB07CCE7EBCF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/21/13f7071a.jpg","comment_is_top":false,"comment_ctime":1533173706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533173706","product_id":100002201,"comment_content":"耗子哥能单独讲讲搜索引擎吗","like_count":0},{"had_liked":false,"id":17588,"user_name":"小破","can_delete":false,"product_type":"c1","uid":1049333,"ip_address":"","ucode":"E7980E15909E4D","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/f5/3aaae06f.jpg","comment_is_top":false,"comment_ctime":1532761374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532761374","product_id":100002201,"comment_content":"耗子叔的文章应该能看好些年了。😳","like_count":0},{"had_liked":false,"id":17186,"user_name":"ricktian","can_delete":false,"product_type":"c1","uid":1030928,"ip_address":"","ucode":"06F90004164C64","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/10/f01eafe4.jpg","comment_is_top":false,"comment_ctime":1532482997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532482997","product_id":100002201,"comment_content":"这些学习资料库的价值远远超过一两篇原创文！大力点赞！","like_count":0},{"had_liked":false,"id":16653,"user_name":"sipom","can_delete":false,"product_type":"c1","uid":1074197,"ip_address":"","ucode":"80411DC49CFA57","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/15/9c9ca35c.jpg","comment_is_top":false,"comment_ctime":1532074635,"is_pvip":false,"replies":[{"id":"5825","content":"前面的几个分布式系列的文章都有的","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1532177261,"ip_address":"","comment_id":16653,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532074635","product_id":100002201,"comment_content":"多谢，获益良多！耗子哥，除了资料还能再增加些您多年来工作中的实战经验体会吗？比如分布式架构设计、应用架构设计等方面的。谢谢！","like_count":0,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420889,"discussion_content":"前面的几个分布式系列的文章都有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532177261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16292,"user_name":"斯盖丸","can_delete":false,"product_type":"c1","uid":1168504,"ip_address":"","ucode":"B881D14B028F14","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","comment_is_top":false,"comment_ctime":1531875321,"is_pvip":false,"replies":[{"id":"5626","content":"不要背，要了解原理，然后自己按自己的思路实现一下。我后面会有如何学习的文章，敬请期待。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1531878344,"ip_address":"","comment_id":16292,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531875321","product_id":100002201,"comment_content":"耗子叔，您好。最近在看您推荐的经典书了。有个很古老的问题，这些书里大量的代码要背下来吗，如果不需要，那这些代码需要掌握到什么程度才算过关，谢谢。","like_count":1,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420746,"discussion_content":"不要背，要了解原理，然后自己按自己的思路实现一下。我后面会有如何学习的文章，敬请期待。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531878344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16265,"user_name":"昵称","can_delete":false,"product_type":"c1","uid":1025680,"ip_address":"","ucode":"FD6A58AB271E5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/90/5295fce8.jpg","comment_is_top":false,"comment_ctime":1531871224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531871224","product_id":100002201,"comment_content":"这才是真正的干货，这才是真正的宝藏，不会挖掘只会张嘴等喂的人永远成长不了","like_count":0}]}