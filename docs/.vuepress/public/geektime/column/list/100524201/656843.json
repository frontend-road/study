{"id":656843,"title":"39｜串的顺序和链式存储结构：定长数组与动态数组","content":"<p>你好，我是王健伟。</p><p>前面我带你一起学习了各种各样的排序算法。从这节课开始，我们就要进入到字符串的学习了。</p><p>字符串作为一种数据结构，在计算机科学领域也有着比较广泛的应用。比如在搜索引擎中搜索一个关键词、在文章或发言中过滤或屏蔽一些敏感词等。这些关键词、敏感词都属于字符串。</p><p>提到这些，估计你就对它熟悉很多了。不过别着急，我们还是从一些基本的概念和术语学起。</p><h2>串有哪些基本概念？</h2><p>字符串简称<strong>串</strong>，是由零个或者多个字符组成的有限序列。计算机上非数值处理的对象通常指的就是串数据。在C语言中，针对串的处理函数常用的有这几个：strlen()、strcat()、strcmp()、strcpy()等。</p><p>看如下两行C++风格的代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/f2/f3463985b1ab48edeb477d2057dc8cf2.jpg?wh=1660x188\" alt=\"\"></p><p>上述代码行中用双引号括起来的“Hello World！”，就是一个串，在C或者C++语言中，用双引号括起来的是串，用单引号括起来的是字符。其中mystr称为串名，串中字符的个数n称为串的长度。当n=0时的串称为空串。空串可以用希腊字母Φ表示。</p><p>这里有两个概念咱们看一下。一个是子串，也就是串中任意个连续的字符组成的子序列。当然，如果是零个字符，就叫做空串。还有一个叫主串，包含子串的串叫做主串。</p><p><strong>字符在主串中的位置</strong>，也就是字符在主串中的序号。序号（位置编号）从1开始算起。比如字符‘e’在“Hello World！”这个字符串中的位置是2。而空格字符‘ ’在“Hello World！”这个字符串中的位置是6，注意，空格符也是一个正常的字符。</p><!-- [[[read_end]]] --><p>而子串在主串中的位置，也就是子串的第一个字符在主串中的序号。</p><p>可以看到，串是一种特殊的线性表，数据元素之间呈线性关系，或者说相邻字符之间有前趋和后继关系。串中的数据对象一般都会限定为字符集，比如中文字符、英文字符、数字字符、标点符号等等。</p><p>串的基本操作比如增加、删除、修改、查询等一般都是以子串为操作对象，因为人类语言通常针对多个字符组成的字符序列才有现实意义。比如在搜索引擎中输入一个串（子串）就可以查询到包含了给定子串的各种信息。</p><p>串的基本操作包括串赋值、串拷贝（串复制）、判断空串、求长度、串连接、串比较、获取串的一部分内容（求子串）、串插入、串删除、串清空、定位（求某个串在另一个串中第一次出现的位置）等等。不过，不管对串进行什么样的操作，首先要解决的是串的存储问题，那么这节课咱们先说说串是如何存储的。</p><h2>串的顺序存储结构</h2><p>串的存储结构主要分为两种——顺序存储结构和链式存储结构。其中串的顺序存储结构是用一块地址连续的内存保存串中的字符序列。</p><h3>定长数组（静态数组）存储结构及基本操作的实现</h3><p>众所周知，在C语言中，用‘\\0’作为串结束标记。在后续的实现代码中，我还是沿用这个标记作为串结束标记。当然，如果你愿意也可以专门拿出位置空间保存串长度信息。</p><p>对于串的各种基本操作都是比较简单的，写代码时要注意细节，考虑周到。另外值得一提的是程序的写法有很多种，不必拘泥于某一种，关键是理解代码的实现意图。这里直接看实现代码。</p><pre><code class=\"language-plain\">#define MAX_LEN 250 //最大字符串长度（定长）\t\n//采用定长数组存储结构\nclass MySString\n{\npublic:\n\tMySString()//构造函数\n\t{\n\t\tch[0] = '\\0'; //字符串结束标记，其实'\\0'就是数字0，所以写成ch[0] = 0;也没问题\n\t\tlength = 0; //字符串长度\n\t}\n\t//串赋值\n\tvoid StrAssign(const char* pcontent)\n\t{\n\t\tsize_t iLen = strlen(pcontent);\n\t\tif (iLen &gt;= MAX_LEN) //内容太长，容纳不下，字符串存储中要给字符串结束标记'\\0'留出位置\n\t\t\treturn;&nbsp;\n\t\t\n\t\tfor (int i = 0; i &lt; iLen; ++i)\n\t\t{\n\t\t\tch[i] = pcontent[i];\n\t\t} //end for\n\t\tch[iLen] = '\\0'; //设置字符串结束标记，该标记不计入字符串长度中\n\t\tlength = iLen; //记录字符串长度\n\t}\n\t\t\n\t//串拷贝（串复制）\n\tvoid StrCopy(const MySString &amp;tmpstr)\n\t{\n\t\tfor (int i = 0; i &lt; tmpstr.length; ++i)\n\t\t{\n\t\t\tch[i] = tmpstr.ch[i];\n\t\t} //end for\t\n\t\tlength = tmpstr.length;\n\t\tch[length] = '\\0';\n\t}\n\t\t\n\t//判断空串\n\tbool IfStrEmpty()\n\t{\n\t\tif (ch[0] == '\\0')\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\t\t\n\t//串比较，比较其实就是逐个比较两个字符串中每个字符的ASCII码\n\t//结果大于返回1，等于返回0，小于返回-1\n\tint StrCmp(const MySString&amp; tmpstr)\n\t{\n\t\tif (length == 0 &amp;&amp; tmpstr.length ==0) //两个字符串都是空的，相等\n\t\t\treturn 0;\n\t\t\n\t\tconst char* p1 = ch;\n\t\tconst char* p2 = tmpstr.ch;\n\t\t\n\t\tint result = 0;\n\t\twhile (*p1 != '\\0' &amp;&amp; *p2 != '\\0')\n\t\t{\n\t\t\tresult = (*p1) - (*p2);\n\t\t\tif (result != 0)\n\t\t\t{\n\t\t\t\tif (result &gt; 0)\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tp1++;\n\t\t\tp2++;\n\t\t} //end while\n\t\t\n\t\tif (*p1 == '\\0' &amp;&amp; *p2 == '\\0') //长度相同且内容相等\n\t\t\treturn 0;\n\t\t\t\n\t\t//能走到下边流程的都是两个字符串一个长一个短，但长的和短的字符串的前面内容相同，比如字符串\"ab\"和\"abc\"\n\t\tif (*p1 == '\\0')&nbsp; //p1小，因为长度少\n\t\t\treturn -1;&nbsp;\n\t\t\n\t\t//else if (*p2 == '\\0')\n\t\treturn 1;\n\t}\n\t\t\n\t//串连接\n\tbool StrCat(const MySString&amp; tmpstr)\n\t{\n\t\tif (length + tmpstr.length &gt;= MAX_LEN) //空间不够保存不下，这里直接返回false以通知开发者\n\t\t\treturn false;\n\t\t\n\t\tint idx = 0;\n\t\tsize_t i;\n\t\tfor (i = length; i &lt; (length + tmpstr.length); ++i)\n\t\t{\n\t\t\tch[i] = tmpstr.ch[idx++];\n\t\t}\n\t\tch[i] = '\\0'; //字符串结束标记\n\t\tlength += tmpstr.length;\n\t\treturn true;\n\t}\n\t\t\n\t//获取串的一部分内容（求子串）\n\tvoid SubString(MySString&amp; resultstr, int pos, int len) //求得的子串给到resultstr。pos：从该位置开始[注意位置从0开始计算]，截取len个字符\n\t{\n\t\t//注意pos位置从0开始计算\n\t\tif(pos &lt; 0 || (pos + 1) &gt; length || len &lt;= 0)//pos位置要合法，len长度值要合法\n\t\t\treturn;\n\t\t\n\t\tint icount = 0;&nbsp;\n\t\twhile(true)\n\t\t{\n\t\t\tresultstr.ch[icount] = ch[pos+ icount];\n\t\t\ticount++;\n\t\t\tif (icount == len) //截取够数量了\n\t\t\t\tbreak;\n\t\t\tif (ch[pos + icount] == '\\0') //到主串末尾了，不够截取，截取多少算多少，直接跳出循环\n\t\t\t\tbreak;\n\t\t} //end while\n\t\tresultstr.length = icount;\n\t\tresultstr.ch[resultstr.length] = '\\0';\n\t\treturn;\n\t}\n\t\t\n\t//串插入\n\t//在当前串的pos位置（从0开始计算），插入子串substr\n\tvoid StrInsert(int pos, const MySString&amp; substr)\n\t{\n\t\tif (pos &lt; 0 || pos &gt; length) //插入位置不合法\n\t\t\treturn;\n\t\t\t\n\t\tif (length + substr.length &gt;= MAX_LEN) //容纳不下插入的新内容，则直接返回\n\t\t\treturn;\n\t\t\t\n\t\t//把原来的必须的内容向后挪动\n\t\tint i = (int)(length - 1); //i为int类型，这样就可以为负数，保证下面这个for循环可以正确结束\n\t\tfor (; i &gt;= pos; --i)&nbsp;\n\t\t{\n\t\t\tch[i + substr.length] = ch[i];\n\t\t}\n\t\t//把子串插入进来\n\t\tfor (size_t i = 0; i &lt; substr.length; ++i)\n\t\t{\t\t\t\n\t\t\tch[pos + i] = substr.ch[i];\n\t\t}\n\t\tlength += substr.length;\n\t\tch[length] = '\\0';\n\t\treturn;\n\t}\n\t\t\n\t//串删除\n\t//在当前串的pos位置（从0开始计算），删除len个字符\n\tvoid StrDelete(int pos, int len)\n\t{\n\t\t//注意pos位置从0开始计算\n\t\tif (pos &lt; 0 || (pos + 1) &gt; length || len &lt;= 0)//pos位置要合法，len长度值要合法\n\t\t\treturn;\n\t\t\n\t\tif (pos + len &gt; length)\n\t\t{\n\t\t\t//要删除的字符太多，串中没那么多可删的字符\n\t\t\tlen = int(length - pos);&nbsp; //只能删除这么多\n\t\t}\n\t\t\n\t\t//把剩余的字符串搬位置（向左搬）\t\t\t\n\t\tfor (int i = pos; i &lt; length; ++i)\n\t\t{\n\t\t\tch[i] = ch[i + len];\n\t\t} //end for\n\t\t\n\t\tlength = length - len;\n\t\tch[length] = '\\0';\n\t\treturn;\n\t}\n\t\t\n\t//串清空\n\tvoid StrClear()\n\t{\n\t\tch[0] = '\\0';\n\t\tlength = 0;\n\t\treturn;\n\t}\n\t\npublic:\n\t//显示字符串内容\n\tvoid DispContent()\n\t{\n\t\tcout &lt;&lt; ch &lt;&lt; endl;\n\t}\n\t\npublic:\t\t\n\tchar&nbsp; ch[MAX_LEN]; //串内容。每个位置保存一个字符\n\tsize_t&nbsp; length; //串实际长度，专门引入该变量保存，提高程序运行效率\n};\n</code></pre><p>在main主函数中，加入下面的代码。</p><pre><code class=\"language-plain\">//串赋值\nMySString mys;\nmys.StrAssign(\"我爱你中国！\");\nmys.DispContent();\n\t\n //串拷贝（串复制）、判断空串\nMySString mys2;\ncout &lt;&lt;\"mys2为空吗？\"&lt;&lt; mys2.IfStrEmpty() &lt;&lt; endl;\nmys2.StrCopy(mys);\nmys2.DispContent();\ncout &lt;&lt;\"mys2为空吗？\"&lt;&lt; mys2.IfStrEmpty() &lt;&lt; endl;\n\t\n//串比较\nMySString mys3,mys4;\nmys3.StrAssign(\"abc\");\nmys4.StrAssign(\"xyz\");\ncout &lt;&lt;\"mys3和mys4字符串的比较结果为：\"&lt;&lt; mys3.StrCmp(mys4) &lt;&lt; endl;\n\t\n//串连接\nMySString mys5;\nmys5.StrAssign(\"Hello China!\");\t\nMySString mys6;\nmys6.StrAssign(\"Hello this World!\");\nmys6.StrCat(mys5);\ncout &lt;&lt;\"mys6和mys5连接的结果为：\"&lt;&lt; mys6.ch &lt;&lt; endl;\n\t\n//获取串的一部分内容（求子串）\nMySString mys7;\nmys6.SubString(mys7, 0, 12); //子串放入mys7中\ncout &lt;&lt;\"子串mys7的内容是：\"&lt;&lt; mys7.ch &lt;&lt; endl;\n\t\n//串插入（在当前串的pos位置（从0开始计算），插入子串substr）\nMySString mys8;\nmys8.StrAssign(\"我爱北京，我爱中国！\");\nmys5.StrInsert(12, mys8);\ncout &lt;&lt;\"插入新内容后的mys5串内容是：\"&lt;&lt; mys5.ch &lt;&lt; endl;\n\t\n//串删除，在当前串的pos位置（从0开始计算），删除len个字符\nMySString mys9;\nmys9.StrAssign(\"Hello China!\");\nmys9.StrDelete(1, 10);\ncout &lt;&lt;\"删除部分内容后的mys9串内容是：\"&lt;&lt; mys9.ch &lt;&lt; endl;\n\t\n//串清空\nmys9.StrClear();\ncout &lt;&lt;\"清空内容后的mys9串内容是：\"&lt;&lt; mys9.ch &lt;&lt; endl;\n</code></pre><p>执行结果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/64/74/64a707e664aa693a24d834afcb9c2f74.jpg?wh=2266x814\" alt=\"\"></p><h3>动态数组（堆中分配内存）存储结构及基本操作的实现</h3><p>采用定长数组存储结构存储串的方式虽然编码方便，但缺乏灵活性。所以引入了在堆中分配内存来保存串，实现不复杂，但要写好需要比较细心，下面是实现代码。</p><pre><code class=\"language-plain\">//采用堆中分配内存的存储结构\nclass MyHString//H表示Heap（堆）\n{\npublic:\n\tMyHString()//构造函数\n\t{\n\t\tch = nullptr;\n\t\tlength = 0;\n\t}\n\t~MyHString()//析构函数\n\t{\n\t\tif (length &gt; 0)\n\t\t\tdelete[] ch;\n\t}\n\t\t\n\t//串赋值\n\tvoid StrAssign(const char* pcontent)\n\t{\n\t\tsize_t iLen = strlen(pcontent);\t\n\t\t\n\t\tif (length &gt; 0)\n\t\t\tdelete[] ch;\n\t\t\n\t\tch = new char[iLen];\n\t\t\t\n\t\t//拷贝字符串\n\t\tfor (int i = 0; i &lt; iLen; ++i)\n\t\t{\n\t\t\tch[i] = pcontent[i];\n\t\t} //end for\n\t\tlength = iLen;\n\t}\n\t\t\n\t//串拷贝（串复制）\n\tvoid StrCopy(const MyHString&amp; tmpstr)\n\t{\t\t\n\t\tif (length &gt; 0)\n\t\t{\n\t\t\tdelete[] ch;\n\t\t}\n\t\tch = new char[tmpstr.length];\n\t\tfor (int i = 0; i &lt; tmpstr.length; ++i)\n\t\t{\n\t\t\tch[i] = tmpstr.ch[i];\n\t\t}\n\t\tlength = tmpstr.length;\n\t\treturn;\n\t}\n\t\t\n\t//判断空串\n\tbool IfStrEmpty()\n\t{\n\t\tif (length == 0)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\t\t\n\t//串比较，比较其实就是逐个比较两个字符串中每个字符的ASCII码\n\t//结果 大于返回1，等于返回0，小于返回-1\n\tint StrCmp(const MyHString&amp; tmpstr)\n\t{\n\t\tif (length == 0 &amp;&amp; tmpstr.length == 0) //两个字符串都是空的，相等\n\t\t\treturn 0;\n\t\t\t\n\t\tconst char* p1 = ch;\n\t\tconst char* p2 = tmpstr.ch;\n\t\t\n\t\tint result = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i &lt; length &amp;&amp; j &lt; tmpstr.length)\n\t\t{\n\t\t\tresult = ch[i] - tmpstr.ch[j];\n\t\t\tif (result != 0)\n\t\t\t{\n\t\t\t\tif (result &gt; 0)\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t} //end while\n\t\t\t\n\t\tif(i &gt;= length &amp;&amp; j &gt;= tmpstr.length)//长度相同且内容相等\n\t\t\treturn 0;&nbsp;\n\t\t\n\t\t//能走到下边流程的都是两个字符串一个长一个短，但长的和短的字符串的前面内容相同，比如字符串\"ab\"和\"abc\"\n\t\tif (i &gt;= length)&nbsp; //p1小，因为长度少\n\t\t\treturn -1;\n\t\t\n\t\treturn 1;\n\t}\n\t\t\n\t//串连接\n\tvoid StrCat(const MyHString&amp; tmpstr)\n\t{\n\t\tif (tmpstr.length &lt;= 0) //目标是空串，无须连接\n\t\t\treturn;\n\t\t\t\n\t\tchar* tmp = new char [length + tmpstr.length];\n\t\tfor (int i = 0; i &lt; length; ++i)\n\t\t{\n\t\t\ttmp[i] = ch[i];\n\t\t}\n\t\tfor (int i = 0; i &lt; tmpstr.length; ++i)\n\t\t{\n\t\t\ttmp[i + length] = tmpstr.ch[i];\n\t\t}\n\t\tif (length &gt; 0) //原来内存释放掉\n\t\t\tdelete[] ch;\n\t\tch = tmp;\n\t\tlength = length + tmpstr.length;\n\t\treturn;\n\t}\n\t\t\n\t//获取串的一部分内容（求子串）\n\t//求得的子串给到resultstr。pos：从该位置开始[注意位置从0开始计算]，截取len个字符\n\tvoid SubString(MyHString&amp; resultstr, int pos, int len)&nbsp;\n\t{\n\t\t//注意pos位置从0开始计算\n\t\tif (pos &lt; 0 || (pos + 1) &gt; length || len &lt;= 0)//pos位置要合法，len长度值要合法\n\t\t\treturn;\n\t\t\t\n\t\tif (resultstr.length &gt; 0)\n\t\t\tdelete[] resultstr.ch;\n\t\t\t\n\t\tresultstr.ch = new char[len];\t\t\t\t\n\t\tint icount = 0;\n\t\twhile (true)\n\t\t{\n\t\t\tresultstr.ch[icount] = ch[pos + icount];\n\t\t\ticount++;\n\t\t\tif (icount == len) //截取够数量了\n\t\t\t\tbreak;\n\t\t\tif (pos + icount &gt;= length) //到主串末尾了，不够截取，截取多少算多少，直接跳出循环\n\t\t\t\tbreak;\n\t\t} //end while\n\t\tresultstr.length = icount;\n\t\treturn;\n\t}\n\t\t\n\t//串插入\n\t//在当前串的pos位置（从0开始计算），插入子串substr\n\tvoid StrInsert(int pos, const MyHString&amp; substr)\n\t{\n\t\tif (pos &lt; 0 || pos &gt; length) //插入位置不合法\n\t\t\treturn;\n\t\t\t\t\t\t\n\t\tchar* tmp = new char[length + substr.length];\n\t\tfor (int i = 0; i &lt; length; ++i) //把原来的数据先拷贝到新位置去\n\t\t{\n\t\t\ttmp[i] = ch[i];\n\t\t}\n\t\t\t\n\t\tif (length &gt; 0) //先把原来的内存释放了\n\t\t\tdelete[] ch;\n\t\t\t\n\t\tch = tmp;\n\t\t\t\n\t\t//把原来的必须的内容向后挪动\n\t\tint i = (int)(length - 1); //i为int类型，这样就可以为负数，保证下面这个for循环可以正确结束\n\t\tfor (; i &gt;= pos; --i)\n\t\t{\n\t\t\tch[i + substr.length] = ch[i];\n\t\t}\n\t\t//把子串插入进来\n\t\tfor (size_t i = 0; i &lt; substr.length; ++i)\n\t\t{\n\t\t\tch[pos + i] = substr.ch[i];\n\t\t}\n\t\tlength += substr.length;\n\t\treturn;\n\t}\n\t\t\n\t//串删除\n\t//在当前串的pos位置（从0开始计算），删除len个字符\n\tvoid StrDelete(int pos, int len)\n\t{\n\t\t//注意pos位置从0开始计算\n\t\tif (pos &lt; 0 || (pos + 1) &gt; length || len &lt;= 0)//pos位置要合法，len长度值要合法\n\t\t\treturn;\n\t\t\n\t\tif (pos + len &gt; length)\n\t\t{\n\t\t\t//要删除的字符太多，串中没那么多可删的字符\n\t\t\tlen = int(length - pos);&nbsp; //只能删除这么多\n\t\t}\n\t\t\t\n\t\t//把剩余的字符串搬位置（向左搬）\t\t\t\n\t\tfor (int i = pos; i &lt; length; ++i)\n\t\t{\n\t\t\tch[i] = ch[i + len];\n\t\t} //end for\n\t\t\n\t\tlength = length - len;\n\t\treturn;\n\t}\n\t\t\n\t//串清空\n\tvoid StrClear()\n\t{\n\t\tif (length &gt; 0)\n\t\t\tdelete[] ch;\n\t\tlength = 0;\n\t\treturn;\n\t}\n\t\t\npublic:\n\t//显示字符串内容\n\tvoid DispContent()\n\t{\n\t\tfor (int i = 0; i &lt; length; ++i)\n\t\t{\n\t\t\tcout &lt;&lt; ch[i];\t\t\t\t\n\t\t}\n\t\tcout &lt;&lt; endl; //这里可以换一下行\n\t}\n\t\t\npublic:\n\tchar&nbsp; *ch;&nbsp; //空间用new动态分配\n\tsize_t&nbsp; length;&nbsp; //串实际长度\n};\n</code></pre><p>在main主函数中，注释掉以往的代码，新增下面的测试代码。</p><pre><code class=\"language-plain\">//串赋值\nMyHString mys;\nmys.StrAssign(\"我爱你中国！\");\nmys.DispContent();\n\t\n//串拷贝（串复制）、判断空串\nMyHString mys2;\ncout &lt;&lt;\"mys2为空吗？\"&lt;&lt; mys2.IfStrEmpty() &lt;&lt; endl;\nmys2.StrCopy(mys);\nmys2.DispContent();\ncout &lt;&lt;\"mys2为空吗？\"&lt;&lt; mys2.IfStrEmpty() &lt;&lt; endl;\nmys.StrAssign(\"我爱你中国，我爱你中国人！\");\nmys2.StrCopy(mys);\nmys2.DispContent();\n\t\n//串比较\nMyHString mys3, mys4;\nmys3.StrAssign(\"abc\");\nmys4.StrAssign(\"xyz\");\ncout &lt;&lt;\"mys3和mys4字符串的比较结果为：\"&lt;&lt; mys3.StrCmp(mys4) &lt;&lt; endl;\n\t\n//串连接\nMyHString mys5;\nmys5.StrAssign(\"Hello China!\");\nMyHString mys6;\nmys6.StrAssign(\"Hello this World!\");\nmys6.StrCat(mys5);\ncout &lt;&lt;\"mys6和mys5连接的结果为：\";\nmys6.DispContent();\n\t\n//获取串的一部分内容（求子串）\nMyHString mys7;\nmys7.StrAssign(\"abcdefghijklmnopqrstuvwxyz!\");\nmys6.SubString(mys7, 2, 12); //子串放入mys7中\ncout &lt;&lt;\"子串mys7的内容是：\";\nmys7.DispContent();\n\t\n//串插入（在当前串的pos位置（从0开始计算），插入子串substr）\nMyHString mys8, mys82;\nmys8.StrAssign(\"我爱北京，我爱中国！\");\nmys82.StrInsert(0, mys8);\ncout &lt;&lt;\"插入新内容后的mys82串内容是：\";\nmys82.DispContent();\n\t\n//串删除，在当前串的pos位置（从0开始计算），删除len个字符\nMyHString mys9;\nmys9.StrAssign(\"Hello China!\");\nmys9.StrDelete(1, 11);\ncout &lt;&lt;\"删除部分内容后的mys9串内容是：\";\nmys9.DispContent();\n\t\n//串清空\nmys9.StrClear();\ncout &lt;&lt;\"清空内容后的mys9串内容是：\";\nmys9.DispContent();\n</code></pre><p>执行结果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/a1/db/a1f7ffae58afb072cb66fa639d62bddb.jpg?wh=2272x894\" alt=\"\"></p><p>上述代码其实是有改进空间的。比如在分配ch（串）所占内存空间时可以记录new出的内存大小，当进行字符串赋值、拷贝、连接等操作时，如果空间足够则不需要delete原有内存而是直接用这块内存实现相应功能，有兴趣可以自行改进代码。</p><h2>串的链式存储结构</h2><p>串的链式存储结构会使用到链表。比如字符串“abcde”，采用链式存储结构可能会如图1所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/35/ab/3515f568d0d89d19a192acd9238fefab.jpg?wh=1592x193\" alt=\"\" title=\"图1 串的链式存储结构示意图\"></p><p>可以看到，每个链的节点中保存着一个字符。那么节点可以像下面这样定义：</p><pre><code class=\"language-plain\">//字符节点（串的链式存储）\nstruct StringNode\n{\n\tchar ch;\n\tStringNode* next;&nbsp; //指针域，指向下一个同类型（和本节点类型相同）节点\n};\n</code></pre><p>图1的问题是每个节点保存一个字符，而一个字符只占1个字节，但一个next指针域在32位平台却占了4个字节，这种存储方式的存储密度非常低，因为实际有用的信息占的内存比例太小，造成了内存空间的巨大浪费。改进方式是让每个链的节点中保存多个字符比如保存4个字符，下面是改进后的字符节点。</p><pre><code class=\"language-plain\">//字符节点（串的链式存储）\nstruct StringNode\n{\n\tchar ch[4];\n\tStringNode* next;&nbsp; //指针域，指向下一个同类型（和本节点类型相同）节点\n};\n</code></pre><p>此时，每个节点中实际有用的信息占的内存比例会提高，从而提高了存储密度。如图2所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/57/60/574f61eb009ayy76dc95eee6582d4460.jpg?wh=1592x168\" alt=\"\" title=\"图2 串的链式存储结构示意图【改进版】\"></p><p>从图2可以看到，第二个节点只有e和f两个字符，并没有填满，可以在字符f后面用字符串结束标记‘\\0’标记字符串的结束。</p><p>串的链式存储不需要大块连续的内存空间。插入、删除等操作通过修改指针即可实现，不需要大量的移动字符数据。但串的链式存储不具备串的顺序存储中的随机存取特性，所以其基本操作实现代码可能会更加复杂，因而也不如串的顺序存储常用。</p><p>这里我就不提供串的链式存储相应代码了，如果你有兴趣可以自行实现。</p><h2>小结</h2><p>这节课我带你认识了串，给出了串、串的长度、空串的定义，也给出了串的常用处理函数。在编写代码时，注意串需要用双引号引起来。</p><p>接下来，为了引出与串相关的算法，又给出了子串、主串、字符在主串中位置概念。我希望你把串理解成一种数据元素之间呈线性关系的特殊线性表。接着我还向你介绍了串的基本操作——串赋值、串拷贝、判断空串、求长度、串连接、串比较、获取串的一部分内容、串插入、串删除、串清空、定位。</p><p>串的存储结构主要分为顺序存储结构和链式存储结构。顺序存储结构是用一块地址连续的内存保存串中的字符序列，而串的链式存储结构会使用链表来保存串中的各个字符序列。</p><p>在串的顺序存储结构介绍中，我们首先展示了用定长数组作为串的存储结构及在该结构之上实现的各种针对串的各种基本操作。然后为了进一步增加对串操作的灵活性，又展示了在堆中分配内存来保存串以及针对串的各种基本操作。</p><p>串的链式存储结构在本节中只做了简单介绍，这种存储结构有两个好处。</p><ul>\n<li>不需要大块连续的内存空间。</li>\n<li>插入、删除等操作通过修改指针即可实现，不需要大量的移动字符数据。</li>\n</ul><p>但是，我们要知道，串的链式存储不具备串的顺序存储中的随机存取特性，所以它的实用性其实是不如串的顺序存储的。</p><h2>思考题</h2><p>请你实现串的链式存储代码，并使用串的链式存储实现：输入一个字符串，将其中的大写字母转换为小写字母并输出转换后的字符串。</p><p>欢迎你在留言区和我分享成果。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习。我们下节课见！</p>","comments":[{"had_liked":false,"id":396353,"user_name":"阿阳","can_delete":false,"product_type":"c1","uid":1165817,"ip_address":"江苏","ucode":"20A35FB86B1C5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","comment_is_top":false,"comment_ctime":1734061495,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"看链式存储的定义，字符串的插入和删除，逻辑都不简单。","like_count":0},{"had_liked":false,"id":396347,"user_name":"阿阳","can_delete":false,"product_type":"c1","uid":1165817,"ip_address":"江苏","ucode":"20A35FB86B1C5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","comment_is_top":false,"comment_ctime":1734054024,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"在使用动态数组存储中，StrCat()方法，申请内存的语句为：\nchar* tmp = new char [length + tmpstr.length];\n请问老师，这里是不是还应该加个1，因为连接后的字符串，要多个字符&#39;\\0&#39;，用于表示字符串结束？","like_count":0},{"had_liked":false,"id":377926,"user_name":"鲁米","can_delete":false,"product_type":"c1","uid":1574008,"ip_address":"北京","ucode":"F8F23431723F25","user_header":"https://static001.geekbang.org/account/avatar/00/18/04/78/37b46ba6.jpg","comment_is_top":false,"comment_ctime":1689563245,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"链式存储第一次接受到","like_count":0},{"had_liked":false,"id":374734,"user_name":"Se7en","can_delete":false,"product_type":"c1","uid":1225368,"ip_address":"北京","ucode":"93EFAE37AFB12D","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/98/82b76c88.jpg","comment_is_top":false,"comment_ctime":1684373187,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"细致，重温一遍技术基础","like_count":0}]}