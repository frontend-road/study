{"id":99636,"title":"16 | 安全管理：数字世界的守护","content":"<p>你好，我是七牛云许式伟。今天我们要聊的话题是操作系统的最后一个子系统：安全管理。</p><p>数字世界是高效的，但数字世界也是脆弱的。在越来越多的日常生活被数字化的今天，安全问题也越来越凸显出了它的重要性。</p><p>有经验的安全工程师都知道，做好安全的基本逻辑是：不要开太多的门和窗，最好所有人都在同一道门进出，安全检查工作就可以非常便利地进行。</p><p>要想构建一个安全可靠的环境，从最底层就开始设计显然是最好的。所以安全管理是一个基础架构问题。现代操作系统必然会越来越关注安全性相关的问题。因为一旦安全问题严重到触及人们的心里防线，整个数字世界都有可能随之崩塌。</p><p>让我们从头回顾一下操作系统安全能力的演进。</p><h2>病毒与木马</h2><p>首先是实模式的操作系统，以微软的 DOS 系统为代表。实模式的操作系统进程都运行在物理地址空间下。</p><p>这意味着，每个软件进程都可以访问到其它软件进程（包括操作系统）的内存数据，也可以随意地修改它。所以这个时期的计算机是非常脆弱的，它选择的是信任模式：我相信你不会搞破坏。</p><p>不过，好在这个时期网络还并不发达，所以一个单机版本的恶意软件，能够干的真正恶意的事情也很有限。这一时期恶意软件以计算机病毒为主，其特征主要是繁衍自己（复制自己），对计算机系统本身做某种程度的破坏。</p><!-- [[[read_end]]] --><p>现代操作系统基本上都是保护模式的操作系统。保护模式就是让软件运行的内存地址空间隔离，进程之间相互不能访问（除非基于共享内存技术，那也是进程自己主动选择，与被动无感知的情况下被人窥视不同）。</p><p>这从安全角度来说，是很重要的进步。不管怎么说，内存数据是最为敏感的，因为它无所不包。况且，从 Windows 开始，互联网逐步进入人们的视野。计算机的联网，一下子让安全问题变得严峻起来。</p><p>恶意软件目的开始变得不单纯。它不再只是黑客的技术炫耀，而是切切实实的黑色产业链的关键依赖。</p><p>这一时期恶意软件开始以木马为主。木马和病毒一样会去繁衍自己（复制自己），但是它较少以破坏计算机的运行为目的，相反它默默隐藏起来，窃取着你的隐私。然后，它再通过互联网把窃取的信息默默地传递出去（比如通过电子邮件）。</p><p><strong>哪些信息是木马感兴趣的？有很多。比如以下这些信息：</strong></p><ul>\n<li>键盘按键；</li>\n<li>剪贴板的内容；</li>\n<li>内存数据；</li>\n<li>文件系统中关键文件的内容；</li>\n<li>……</li>\n</ul><p>你可能奇怪，前面不是说保护模式已经把内存数据隔离了么，为什么木马还是能够取到内存数据？</p><p>其实这一点不难想明白，虽然跨进程已经无法取得数据了，但是木马本来就是靠复制自己，把自己伪装成正常软件的一部分。这样，木马程序和正常的软件代码同属于一个进程内，所有信息对其仍然一览无余。</p><p>为了彻底阻止木马程序篡改正常的应用程序，聪明的操作系统创造者们想到了好方法：数字签名。</p><p>这本质上是白名单技术。所有正常发布的软件都到操作系统厂商那里登记一下。这样，一旦木马去修改软件，把自己附加上去，这个软件的签名验证就通不过，也就直接暴露了。</p><p>其实 Windows 操作系统已经引入了数字签名的概念，可以用以鉴别软件的可信度。但是考虑到从开放转向封闭有极大的历史负担，所以无论是 Windows 还是 macOS，都没有完全杜绝无签名的软件，最多当你运行无数字签名的软件时，会给个不可信的警告。</p><p><strong>第一个大规模把软件发布变成一个封闭环境的是苹果的 iOS 操作系统。</strong>苹果通过引入 App Store，要求所有应用发布都必须通过 App Store 进行。今天无论是 Android 还是 iOS 操作系统都基于应用市场这样的封闭软件发布的形态。</p><p>这样一来，软件无法被非法修改，木马基本上就无所遁形了。当然，这并不代表木马在这些平台上就消失了。虽然不容易，但是通过感染开发人员的软件开发环境，还是可以在软件编译或其它环节中把木马注入到要发布的软件中。</p><p>要发现这种异常，iOS 和 Android 系统的厂商对软件进行数字签名前，往往会对其进行安全扫描，以发现各种潜在的安全风险。一旦某个软件被鉴定为恶意软件，就无法通过数字签名，也无法发布到应用市场上。</p><p>通过这些机制，木马很难再有机会得到传播。</p><h2>软件的信息安全</h2><p>但是，这意味着我们没有安全风险了么？当然不是。在移动设备上，安全问题的大环境发生了巨大的变化。</p><p>首先，移动时代随着我们数字世界对现实生活影响的加深，我们越来越多的敏感信息更加容易被软件触及。有很多新增的敏感信息是PC时代所不具备的，例如：</p><ul>\n<li>通讯录和通话记录；</li>\n<li>短信；</li>\n<li>个人照片和视频；</li>\n<li>个人地理位置（GPS）信息；</li>\n<li>移动支付的支付密码、支付验证码；</li>\n<li>录像和录音权限；</li>\n<li>通话权限；</li>\n<li>.……</li>\n</ul><p>正因为如此，尽管操作系统正变得越来越安全，但我们面临的安全威胁却也在日趋严重。</p><p><strong>其实， iOS 操作系统在安全管理上的考虑不可谓不周全。</strong></p><p><strong>首先</strong>，在软件隔离机制上，除了基于 CPU 的保护模式，确保软件之间的内存隔离外，iOS 还引入了沙盒系统（Sandbox），确保软件之间文件系统隔离，相互之间不能访问对方保存在磁盘上的文件。</p><p><strong>其次</strong>，通过上面我们已经提及的数字签名机制，防止了软件被恶意篡改，让病毒和木马无法传播繁衍。</p><p><strong>最后</strong>，对涉及敏感信息的系统权限进行管控。各类敏感信息的授予均是在应用程序使用的过程中进行提示，提醒用户注意潜在的安全风险。</p><p>在这一点上，Android 操作系统往往则是在安装软件时索要权限。这两者看似只是时机不同，但是从安全管理角度来说， iOS 强很多。</p><p>还没有见到软件真身就让用户判断要不要给权限，用户往往只能无脑选择接受。而如果是在软件运行到特定场景时再索要权限，那么权限给不给就有合理的场景支持决策。</p><p>但是，在利益面前，软件厂商们是很难抵御住诱惑的。所以不仅仅是恶意软件会去过度索要系统权限，很多我们耳熟能详的常规软件也会索要运行该软件所不需要的权限。</p><p>移动时代，恶意软件的形态已经再一次发生变化。它既不是病毒也不是木马，而是“具备实用功能，但背地却通过获取用户的敏感信息来获利”的应用软件。</p><p>它通过诱导用户下载，然后在软件安装或者使用时索要敏感信息的获取权限。</p><p><strong>一个软件到底是正常的还是恶意的？边界已经越来越模糊了。</strong></p><p>以前病毒和木马都有复制和繁衍自己这样一个显著的特征，但如今它们的复制繁衍能力已经被操作系统的安全机制所阻止，所以恶意软件和普通软件一样，都是通过某种手段吸引用户下载安装。</p><p>怎么保护好用户的隐私信息？道高一尺，魔高一丈。攻防之间的斗争仍将继续下去。</p><h2>网络环境的信息安全</h2><p>如果我们不轻易尝试不可信的软件，就可以一切安全无虞？并不然，我们还要考虑我们的计算机所处的网络环境安全问题。</p><p>我们上网过程需要经过一系列的中间节点，有交换机，有路由器。我们的上网产生的所有数据包，都经由这些中间节点，<strong>这意味着我们有以下三个级别的安全风险。</strong></p><ul>\n<li>被窃听的风险。可能会有人在这些节点上监听你访问和提交的内容。</li>\n<li>被篡改的风险。可能会有人在这些节点上截获并修改你访问的内容。</li>\n<li>被钓鱼的风险。可能会有人冒充你要访问的服务提供方和你通讯。</li>\n</ul><p>虽然大部分的中间节点由网络运营商提供，我们刨除这些节点被黑客所黑的情形，基本上认为可信。但这并不绝对，至少在中国，运营商修改中转的数据包这样的事情是干得出来的，常见的手法有：</p><ul>\n<li>在正常的 HTML 页面插入广告；</li>\n<li>修改用户下载的 apk 文件，替换成自己想分发的 apk 文件；</li>\n<li>修改 404 类型的 HTML 页面，替换成自己的搜索引擎的搜索页；</li>\n<li>.……</li>\n</ul><p>其次是 WiFi 路由器。WiFi 路由器因为其提供方鱼龙混杂，天生是安全问题的大户。运营商能够干的事情它全都可以干，甚至可以更加肆无忌惮，以李鬼替换李逵，钓鱼的风险并不低。</p><p>比如你以为登录的是交通银行官网，它可能给你一个一模一样外观的网站，但是一旦你输入用户名和密码就会被它偷偷记录下来。</p><p>怎么解决中间人问题？</p><p>首先是怎么防篡改。应用场景是电子合同/公章、网络请求授权（例如你要用七牛的云服务，需要确认这个请求的确是你，而不是别人发出的）等。这类场景的特征是不在乎内容是否有人看到，在乎的是内容是不是真的是某个人写的。</p><p>解决方法是数字签名技术。一般来说，一个受数字签名保护的文档可示意如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/3f/c191e43d0959abf907754286ed926f3f.png?wh=1717*175\" alt=\"\"></p><blockquote>\n<p><span class=\"reference\">其中，“要防篡改的内容” 是信息原文。“密钥提示” 是在数字签名的 “密钥” 有多个的情况下，通过 “密钥提示” 找到对应的 “密钥”。如果用于保护信息的 “密钥” 只有一个，那么可以没有 “密钥提示”。“指纹” 则是对信息使用特定 “密钥” 和信息摘要算法生成的信息摘要。</span></p>\n</blockquote><p>大部分情况下，数字签名的信息摘要算法会选择 HMAC MD5 或者 HMAC SHA1。在 Go 语言中，使用上示意如下：</p><pre><code>import &quot;crypto/hmac&quot;\nimport &quot;crypto/sha1&quot;\nimport &quot;encoding/base64&quot;\n\ntextToProtected := &quot;要防篡改的内容&quot;\nkeyHint := &quot;123&quot;\nkey := findKey(keyHint) // 根据 keyHint 查找到 key []byte\n\nh := hmac.New(sha1.New, key) // 这里用sha1，也可以改成别的\nh.Write([]byte(textToProtected))\ntextDigest := base64.URLEncoding.EncodeToString(h.Sum(nil))\ntextResult := textToProtected + &quot;:&quot; + keyHint + &quot;:&quot; + textDigest\n</code></pre><p>得到的 textResult 就是我们期望的不可篡改信息。验证信息是否被篡改和以上这个过程相反。</p><p>首先根据 textResult 分解得到 textToProtected、keyHint、textDigest，然后根据 keyHint 查找到 key；再根据 textToProtected 和 key 算一次我们期望的信息摘要 textDigestExp。</p><p>如果 textDigestExp 和 textDigest 相同，表示没被篡改，否则则表示信息不可信，应丢弃。</p><p>如果我们希望更彻底的隐私保护，避免被窃听、被篡改、被钓鱼，那么数字签名就不顶用了，而需要对内容进行加密。</p><p>加密算法上，一般分为对称加密和非对称加密。对称加密是指用什么样的密钥（key）加密，就用什么样的密钥解密，这比较符合大家惯常的思维。</p><p>非对称加密非常有趣。它有一对钥匙，分私钥（private key）和公钥（public key）。私钥自己拿着，永远不要给别人知道。公钥顾名思义是可以公开的，任何人都允许拿。</p><p>那么公私钥怎么配合？首先，通过公钥加密的文本，只有私钥才能解得开。这就解决了定向发送的问题。网络中间人看到加密后的信息是没有用的，因为没有私钥解不开。</p><p>另外，私钥拥有人可以用私钥对信息进行数字签名（防止篡改），所有有公钥的人都可以验证签名，以确认信息的确来自私钥的拥有者，这就解决了请求来源验证的问题。</p><p>那么 A、B 两个人怎么才能进行安全通讯呢？首先A、B两人都要有自己的公私钥，并把公钥发给对方。这样 A 就有 A-private-key、B-public-key，B 就有 B-private-key、A-public-key。通讯过程如下所示。</p><ul>\n<li>A 向 B 发信息 R。具体来说，A 首先用 A-private-key 对 R 进行签名，得到（R，R-digest）；然后用 B-public-key 对（R，R-digest）加密，得到 encoded（R，R-digest）；然后把最终的加密信息发出去。</li>\n<li>B 收到 encoded（R，R-digest），用 B-private-key 解密得到（R，R-digest），然后再用 A-public-key 验证信息的确来自 A。</li>\n<li>B 理解了 R 后，回复信息给 A。这时两人的角色互换，其他同上。</li>\n</ul><p>非对称加密机制非常有效地解决了在不可信的网络环境下的安全通讯问题。但是它也有一个缺点，那就是慢。相比之下，它的速度比对称加密慢很多。</p><p>所以，一个改善思路是结合两者。非对称加密仅用于传输关键信息，比如对称加密所需的密码。完整的通讯过程如下所示。</p><ul>\n<li>A 生成一个临时用的随机密码 random-key。</li>\n<li>A 向 B 发送 random-key，机制用的就是上面的非对称加密，基于 B-public-key。</li>\n<li>B 收到 A 发送的 random-key，把它记录下来，并回复 A 成功。回复的信息可以基于 random-key 做对称加密。</li>\n<li>此后，A 向 B 发、B 向 A 发信息，都用 random-key 作对称加密，直到本次会话结束。</li>\n</ul><p>你可能发现，整个过程中 A 自己已经不再需要非对称的公私钥对了。只要 A 事先有 B 的公钥（B-public-key）就可以。</p><p>当然，上面我们的讨论，没有涉及 B 如何把自己的 B-public-key 交给对方的。在假设网络不可信的前提下，这似乎是个难题。</p><p>我觉得有两个可能性。一个是 A 和 B 很熟悉，平常都经常一起玩。那么他们交换 public-key 完全可以不依赖任何现代通讯设备，包括电话和互联网，而是写在一张纸上，某天聚会的时候交换给对方。</p><p>另一个是更为常见的互联网世界场景：我要访问一个网站。我怎么才能避免被窃听、被篡改、被钓鱼？</p><p><strong>通常我们用 HTTPS 协议。</strong></p><p>在 HTTPS 协议中，第一步是 A 作为客户端（Client）去获取 B 作为网站的公钥（B-public-key）。</p><p>怎么获取？如果我们认为网络不可信，那么我们就需要找一个可信的中间人，第三方权威机构 G，由它来证明，我们网站 B 返回客户端 A 的公钥（B-public-key），的确来自于 B，中间没有被其他人篡改。</p><p>这意味着网站 B 不能直接返回自己的公钥（B-public-key）给客户端 A，而是需要返回由权威机构 G 做了数字签名的公证书（简称数字证书），里面记录了网站 B 的域名（domain），和对应的公钥（B-public-key），还有证书的颁发人 G 的代号。</p><p>这张数字证书的作用是什么？最重要的并不是它怎么在网络上传递的。而是它记录了这样一个事实：域名 domain 对应的公钥是 B-public-key，它是由权威机构 G 做出的公证，因为上面有 G 的数字签名。</p><p>所以这张数字证书并不需要临时生成，而是提前在网站部署时就已经生成好了，而且也可以随意传递给任何人，因为它是完全公开的信息。</p><p>当然这里还有一个前提，我们客户端 A 已经提前拥有第三方权威机构 G 的公钥（G-public-key）了。整个过程如下：</p><ul>\n<li>客户端 A 向网站 B 请求网站的数字证书。</li>\n<li>网站 B 返回它的数字证书。</li>\n<li>客户端 A 收到数字证书，用 G-public-key 验证该数字证书的确由权威机构 G 认证，于是选择相信证书里面的 (domain, public-key) 信息。</li>\n<li>客户端 A 检查证书中的 domain，和我们要访问的网站 B 域名是否一致。如果不一致，那么说明数字证书虽然是真的，但是是别人找权威机构 G 认证的其他域名的证书，于是结束会话；如果一致，于是相信证书中的 public-key 就是网站 B 的公钥（B-public-key）。</li>\n</ul><p>有了 B-public-key，客户端 A 就可以愉快地上网，不必担心网络通讯的安全了。</p><p>但是，HTTPS 并不能完全解决钓鱼问题。它假设用户对要访问的网站域名（domain）可靠性有自己的判断力。</p><p>这当然并不全是事实。所以，高级一点的浏览器（例如 Google Chrome），它会建立不靠谱网站域名的数据库，在用户访问这些网站时进行风险提示。</p><h2>更多的信息安全话题</h2><p>上面我们更多从服务终端用户角度，操作系统和浏览器以及我们的应用程序需要考虑的是信息安全问题。有以下这些信息安全问题没有涉及：</p><ul>\n<li>服务器的安全问题（DDOS 攻击、漏洞与入侵）；</li>\n<li>企业信息安全；</li>\n<li>社会工程学的安全问题；</li>\n<li>……</li>\n</ul><h2>结语</h2><p>总结一下，我们今天聊了软件安全态势的演变过程，从最早的病毒和木马，演化到今天敏感信息如通讯录等内容的窃取，正常软件与恶意软件的判断边界越来越模糊。</p><p>我们也聊了网络环境带来的安全问题。今天主流的假设是网络链路是不可信的，在不可信的网络之上如何去做安全的通讯，可以做到防窃听、防篡改、防钓鱼。这也是苹果前几年强制要求 iOS App 必须走 HTTPS 协议的原因。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。本章关于操作系统的话题到此就结束了。下一讲我们结合前面的内容，讨论并实战架构第一步，怎么做需求分析。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"15 | 可编程的互联网世界","id":99184},"right":{"article_title":"17 | 架构：需求分析 (上)","id":100140}},"comments":[{"had_liked":false,"id":103834,"user_name":"KEN.Z","can_delete":false,"product_type":"c1","uid":1508454,"ip_address":"","ucode":"1B1CA6229DF670","user_header":"https://static001.geekbang.org/account/avatar/00/17/04/66/4452c882.jpg","comment_is_top":false,"comment_ctime":1560524774,"is_pvip":false,"replies":[{"id":"37567","content":"把自己加到一个正常程序的尾部，然后修改程序入口，让它跳转到自己，执行完自己后再跳转回正常的程序代码。这样在用户看来这个程序功能没有发生变化，但是实际上每次开始的时候都会先运行病毒&#47;木马程序再运行正常功能代码。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560556170,"ip_address":"","comment_id":103834,"utype":1}],"discussion_count":3,"race_medal":0,"score":"207718954982","product_id":100025201,"comment_content":"问一下许老师，<br>&quot;这样，木！马程序和正常的软件代码同属于一个进程内，所有信息对其仍然一览无余。&quot;<br>这个是通过何种方式实现的呢？","like_count":49,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454016,"discussion_content":"把自己加到一个正常程序的尾部，然后修改程序入口，让它跳转到自己，执行完自己后再跳转回正常的程序代码。这样在用户看来这个程序功能没有发生变化，但是实际上每次开始的时候都会先运行病毒/木马程序再运行正常功能代码。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1560556170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2394555,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/CD6rutRuSbrTic45jfvhcmJX5zzbHiblicjAO4PJkIAeaCW3UUJGwtsVtzJpJDA6OEWIhMOoNCXM1Bib8nJy8U6RQg/132","nickname":"Geek_d42412","note":"","ucode":"7DE394F5081E31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368727,"discussion_content":"一个厉害的程序员，也有可能是一个比较厉害的黑客","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618819059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209143,"discussion_content":"动态化加载恶意代码？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584614114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101565,"user_name":"pawhrmyki","can_delete":false,"product_type":"c1","uid":1480332,"ip_address":"","ucode":"CDCF44F2E43937","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ermRibwXSt1icBvH3IO1JfiaqakIcxxAP4zSkicewogKVWCFicb0NVc7tF3xSVMJwE3lBg2gH4r7u6sGtw/132","comment_is_top":false,"comment_ctime":1559872761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"87459218681","product_id":100025201,"comment_content":"看过一个讲rsa原理的文章，非常清楚，推荐给大家～～http:&#47;&#47;www.ruanyifeng.com&#47;blog&#47;2013&#47;06&#47;rsa_algorithm_part_one.html","like_count":20},{"had_liked":false,"id":101739,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1559954696,"is_pvip":false,"replies":[{"id":"36668","content":"病毒复制自己到所有的可执行程序，让自己成为其他程序的一部分，这是为了生存。被感染的程序越多，它被消灭的概率就越低。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559966636,"ip_address":"","comment_id":101739,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65984464136","product_id":100025201,"comment_content":"许老师，病毒为什么要复制自己，每个功能都一样，不是多余么？即使有必要，它在运行中又是怎么实现自我复制的呢？","like_count":15,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453095,"discussion_content":"病毒复制自己到所有的可执行程序，让自己成为其他程序的一部分，这是为了生存。被感染的程序越多，它被消灭的概率就越低。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559966636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102673,"user_name":"Chen","can_delete":false,"product_type":"c1","uid":1503113,"ip_address":"","ucode":"C1128558AB5BC4","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/89/8c73a24d.jpg","comment_is_top":false,"comment_ctime":1560295311,"is_pvip":false,"replies":[{"id":"37138","content":"感谢补充","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560297538,"ip_address":"","comment_id":102673,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61689837455","product_id":100025201,"comment_content":"Android从6.0开始在运行时向用户索要权限，版本越高越重视用户的隐私。运行时索要权限毕竟麻烦，很多开发者有意将版本降至6.0以下。现在谷歌和一些应用厂商开始采取一些措施避免这种行为。谷歌开始强制App适配更高版本，华为应用市场8月1日后禁止基于8.0以下的应用更新和上架。","like_count":14,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453526,"discussion_content":"感谢补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560297538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101641,"user_name":"hxy","can_delete":false,"product_type":"c1","uid":1248553,"ip_address":"","ucode":"431327E8CA4364","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/29/18272af9.jpg","comment_is_top":false,"comment_ctime":1559898413,"is_pvip":true,"replies":[{"id":"36620","content":"平常没怎么用android。我只知道第一个把索要权限改到运行阶段的是魅族，好多年前的事情了，当时小米手机可能还没有出来，让我大大惊讶了一番。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559901041,"ip_address":"","comment_id":101641,"utype":1}],"discussion_count":1,"race_medal":4,"score":"40214604077","product_id":100025201,"comment_content":"Android 现在也是运行时索要权限吧？很久以前确实是安装的时候","like_count":9,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453050,"discussion_content":"平常没怎么用android。我只知道第一个把索要权限改到运行阶段的是魅族，好多年前的事情了，当时小米手机可能还没有出来，让我大大惊讶了一番。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559901041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102198,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1216016,"ip_address":"","ucode":"C34D4C44DBCE03","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","comment_is_top":false,"comment_ctime":1560159568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23034996048","product_id":100025201,"comment_content":"老师此篇写的很精辟，各个场景都覆盖到了。<br>关于安全，只能说是相对安全，我们实际架构时，也只能根据实际情况制定合适的方案，在速度，安全等方面权衡。","like_count":5},{"had_liked":false,"id":101535,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1000417,"ip_address":"","ucode":"8D48F4B9045947","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","comment_is_top":false,"comment_ctime":1559862560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23034699040","product_id":100025201,"comment_content":"凌晨4点多醒来，看到许老师更新，一口气读完，大脑出奇的清醒，再读前面几篇。","like_count":5},{"had_liked":false,"id":286566,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1617377540,"is_pvip":false,"replies":[{"id":"104103","content":"很形象的比喻","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1617442453,"ip_address":"","comment_id":286566,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18797246724","product_id":100025201,"comment_content":"非对称加密就是我需要你给我传送信息的时候，我造一把钥匙一把锁，我把锁子打开给你，你把内容装进箱子，用我给你的锁锁上箱子，然后把箱子传给我，我在打开箱子之前，先看看锁有没有被撬过，如果有就说明箱子里面的内容已经不可靠。<br><br>所对应着公钥，钥匙是代表私钥。","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518030,"discussion_content":"很形象的比喻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617442453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104505,"user_name":"Cc°°","can_delete":false,"product_type":"c1","uid":1149143,"ip_address":"","ucode":"6C88E8D2C4622D","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/d7/43cf7b60.jpg","comment_is_top":false,"comment_ctime":1560769320,"is_pvip":true,"replies":[{"id":"37835","content":"1、首先random-key是A给B发的，不是反过来。<br>2、A给B发用的是B-public-key，所以只能B解得开。而B给A回复只需要用random-key对称加密回复，这个东西现在只有A和B知道。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560808601,"ip_address":"","comment_id":104505,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18740638504","product_id":100025201,"comment_content":"我在6月14号的留言，得到了老师的回复：使用对称加密！表示感谢！但是并没有解答我的疑问，对称加密的密钥也是需要在A和B之间进行传输的，如我问题中所说，如何保证对称加密的密钥的安全呢？因为使用B-private-key加密的对称加密密钥给A，中间人使用B-public-key是可以解开的！烦请老师解惑，多谢！","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454299,"discussion_content":"1、首先random-key是A给B发的，不是反过来。\n2、A给B发用的是B-public-key，所以只能B解得开。而B给A回复只需要用random-key对称加密回复，这个东西现在只有A和B知道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560808601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101897,"user_name":"魏颖琪","can_delete":false,"product_type":"c1","uid":1184964,"ip_address":"","ucode":"097544C71EBDA7","user_header":"https://static001.geekbang.org/account/avatar/00/12/14/c4/e354d8ba.jpg","comment_is_top":false,"comment_ctime":1560043130,"is_pvip":false,"replies":[{"id":"36767","content":"对的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560093577,"ip_address":"","comment_id":101897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18739912314","product_id":100025201,"comment_content":"HTTPS的证书获取流程，我的理解是B的证书是在A向B访问中获取，而不是向G获取。然后通过G的公钥（通常在操作系统或者浏览器）来验证这个证书的可信度，并通过这个证书获取B的公钥。在我们的应用中，通常将证书放在nginx中。","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453163,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560093577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218289,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1589772257,"is_pvip":false,"replies":[{"id":"80770","content":"是这样","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1589816887,"ip_address":"","comment_id":218289,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14474674145","product_id":100025201,"comment_content":"https的本质就是在一个不可靠的信道上，基于数字证书和非对称加密协议生成一个对称的加密协议，进行可靠的通信","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495421,"discussion_content":"是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589816887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144959,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572140586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457042474","product_id":100025201,"comment_content":"太客气了，运营商篡改可以直接点名的，包括移动电信联通。<br>","like_count":3},{"had_liked":false,"id":101631,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1559895090,"is_pvip":false,"replies":[{"id":"36624","content":"服务器安全很专业的一个话题，我不是这方面的专家。从入侵跟踪来说，我觉得要做好两件事情，一个是日志记录，而且要把日志做成服务性质而不要只是本地日志，因为高明的黑客会擦脚印。二是异常告警，发现可疑行为就通知人工介入。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559901574,"ip_address":"","comment_id":101631,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14444796978","product_id":100025201,"comment_content":"老师现在很多网站用的是linux（centos，ubuntu），怎么样保证安全，我这样对吗？<br>1. 禁止远程公认的大权限账号如root，sa，administrator等<br>2. 禁止不用的端口，不能禁止就修改如22端口，修改其它<br>3.开启防火墙如iptable<br><br>如果入侵怎么跟踪分析别人入侵路径的？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453044,"discussion_content":"服务器安全很专业的一个话题，我不是这方面的专家。从入侵跟踪来说，我觉得要做好两件事情，一个是日志记录，而且要把日志做成服务性质而不要只是本地日志，因为高明的黑客会擦脚印。二是异常告警，发现可疑行为就通知人工介入。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559901574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1337944,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","nickname":"王棕生","note":"","ucode":"901BD0447A871E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265461,"discussion_content":"许老师，请问什么是【服务性质】？是指只要有日志了，就把日志及时上报到另一个地方吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589389769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102886,"user_name":"觉","can_delete":false,"product_type":"c1","uid":1503600,"ip_address":"","ucode":"95E85D30E92170","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/70/bca09d2d.jpg","comment_is_top":false,"comment_ctime":1560321192,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10150255784","product_id":100025201,"comment_content":"一门深入 长时薰修 我当奉持 如法修行","like_count":2,"discussions":[{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363278,"discussion_content":"随喜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617160857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180937,"user_name":"幻灰龙","can_delete":false,"product_type":"c1","uid":1046202,"ip_address":"","ucode":"AFEDCC997C2FF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/ba/09ab72d2.jpg","comment_is_top":false,"comment_ctime":1582446890,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5877414186","product_id":100025201,"comment_content":"PKI&#47;CA机制是中心认证机制，但是中心出如果不可信，信任体系就完蛋。非中心化的方式例如基于朋友圈认证的OpenPGP或者GNUPG加密邮件的方式，或者像BlockChain这种通过智能合约的方式，把信任转嫁到不可撤销的货币合约上。更进一步，直接假设中心的不可信，使用复杂的零知识证明原理实现提供数据服务但是不暴露数据给任何中心或者第三方，可惜zero-zkSNI","like_count":1,"discussions":[{"author":{"id":1046202,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f6/ba/09ab72d2.jpg","nickname":"幻灰龙","note":"","ucode":"AFEDCC997C2FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182670,"discussion_content":"到zkSNARKs这步就太复杂了，然而，用这种方式解决的仅仅是信任问题中的一小部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582447174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119356,"user_name":"wanhex","can_delete":false,"product_type":"c1","uid":1023455,"ip_address":"","ucode":"E4B2174CB82CE3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/df/a1edc84d.jpg","comment_is_top":false,"comment_ctime":1564569385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5859536681","product_id":100025201,"comment_content":"强烈建议老师出一门网络安全的专栏，惭愧啊，做了好几年的网络安全，对于网络安全的理解还没有老师的一篇文章透彻，惭愧惭愧啊","like_count":1},{"had_liked":false,"id":115585,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1563638013,"is_pvip":false,"replies":[{"id":"42250","content":"这个问题的确存在，不过一般不是发行商的问题，而是发行渠道。红帽不敢瞎搞，但是一些发行渠道会修改发行的系统，甚至带上恶意软件。在信得过的网站下载操作系统和软件，这是一个非常重要的常识。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1563670919,"ip_address":"","comment_id":115585,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5858605309","product_id":100025201,"comment_content":"许老师好，我有一个关于操作系统的安全问题想请教一下。怎么保证操作系统(比如linux)本身的安全性呢，比如HTTPS协议生效的前提是Linux事先植入了权威机构的公钥，那如果这个公钥是有问题的呢？换句话说如果Linux的发布者“监守自盗”怎么办呢？更广义一点，怎么保证Linux本身不会窃取服务器中的信息呢，包括文件、内存还有数据库等。红帽等Linux厂商的发布镜像会有权威机构检测吗","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459176,"discussion_content":"这个问题的确存在，不过一般不是发行商的问题，而是发行渠道。红帽不敢瞎搞，但是一些发行渠道会修改发行的系统，甚至带上恶意软件。在信得过的网站下载操作系统和软件，这是一个非常重要的常识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563670919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161584,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b9/70/c454312c.jpg","nickname":"早早凡","note":"","ucode":"4AA7CAB2CAF20D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6669,"discussion_content":"1.权威官方，发行商官网下载\n2. 下载完成后文件指纹验证","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567043881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102524,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1560242651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855209947","product_id":100025201,"comment_content":"打卡16 深入了解了 ssl 不再是表面那一点","like_count":1},{"had_liked":false,"id":102045,"user_name":"yxhuang","can_delete":false,"product_type":"c1","uid":1026207,"ip_address":"","ucode":"753DF83E95A76F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/9f/febe9182.jpg","comment_is_top":false,"comment_ctime":1560126371,"is_pvip":false,"replies":[{"id":"36854","content":"多谢补充","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560168574,"ip_address":"","comment_id":102045,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5855093667","product_id":100025201,"comment_content":"许老师，Android 在 6.0 版本及其以上，也开始需要运行权限了。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453233,"discussion_content":"多谢补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560168574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101746,"user_name":"VicX","can_delete":false,"product_type":"c1","uid":1508954,"ip_address":"","ucode":"423A13B5DA100A","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/5a/ca9d8453.jpg","comment_is_top":false,"comment_ctime":1559956302,"is_pvip":false,"replies":[{"id":"36666","content":"关于实模式和保护模式请看第 07 篇","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559966470,"ip_address":"","comment_id":101746,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854923598","product_id":100025201,"comment_content":"文章开头对于实模式和保护模式的讲解是否不够精确？CPU保护模式能访问比实模式更大的地址域，内存的合理隔离完完全全是靠的虚拟内存","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453099,"discussion_content":"关于实模式和保护模式请看第 07 篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559966470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101661,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1559904374,"is_pvip":false,"replies":[{"id":"36639","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559918671,"ip_address":"","comment_id":101661,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854871670","product_id":100025201,"comment_content":"许老师，文中说软件之间的内存隔离是基于 CPU 保护模式的，具体的实现是引入虚拟内存么？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453059,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559918671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360303,"user_name":"姜慧 αβ2","can_delete":false,"product_type":"c1","uid":3186210,"ip_address":"上海","ucode":"DC1EB38C17D4C8","user_header":"https://static001.geekbang.org/account/avatar/00/30/9e/22/ae949ae1.jpg","comment_is_top":false,"comment_ctime":1666412368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666412368","product_id":100025201,"comment_content":"蜜月","like_count":0},{"had_liked":false,"id":228567,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1592737568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592737568","product_id":100025201,"comment_content":"在信得过的网站下载操作系统和软件，这是一个非常重要的常识。<br>对普通用户，老师的这个建议胜过杀毒软件😄<br>","like_count":0},{"had_liked":false,"id":205216,"user_name":"oliver","can_delete":false,"product_type":"c1","uid":1505929,"ip_address":"","ucode":"980EBABF71AFBC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOMFSAg7ZEtwgdqTZMhjvdlOcRbHWTzDCBJMqdzpIqxQIRuE2aHianHHFibv1bGfAjnzmBpSJxx9MA/132","comment_is_top":false,"comment_ctime":1586572496,"is_pvip":false,"replies":[{"id":"76698","content":"客户端A是不需要公私钥，他只需要拿到B的公钥就行。B公钥通过数字证书拿到。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1586584151,"ip_address":"","comment_id":205216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586572496","product_id":100025201,"comment_content":"许老师，谢谢上次的解答，但是问题一还是没有弄清楚。<br><br>对于A初次传递编码信息给B的过程，我的疑问在于A-public-key的传递细节和B验证（R，R-digest）信息的过程：把A首次需要传递的random-key代入R后，A在发送encoded（random-key，random-key-digest）时是怎么传递A-public-key给B的？我又仔细看了下，没看到相关描述，是B向A请求获取A-public-key？<br>R-digest是用 A-private-key 对 R签名得到的，B解码出（R，R-digest）后是如何根据A-public-key验证R和R-digest的关系的呢？<br>","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491423,"discussion_content":"客户端A是不需要公私钥，他只需要拿到B的公钥就行。B公钥通过数字证书拿到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586584151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204586,"user_name":"oliver","can_delete":false,"product_type":"c1","uid":1505929,"ip_address":"","ucode":"980EBABF71AFBC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOMFSAg7ZEtwgdqTZMhjvdlOcRbHWTzDCBJMqdzpIqxQIRuE2aHianHHFibv1bGfAjnzmBpSJxx9MA/132","comment_is_top":false,"comment_ctime":1586424909,"is_pvip":false,"replies":[{"id":"76501","content":"1）A-public-key 是公开的，任何人都可以拿，只需要防止别人冒充 A 公布 A-public-key。后文有接着描述怎么传递它，你可以细看下。另外 A-private-key 是绝对不允许出现在任何 A 设备之外的地方，所以不可能算出来。<br>2）数字证书的意义是证明 B 网站域名和 B-public-key 的对应关系。这个关系是可公开的，但是需要防止中间人伪装。A 只有有了 B-public-key，才能很好地传递 random-key。这之后通讯就不再依赖公私钥机制。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1586445866,"ip_address":"","comment_id":204586,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1586424909","product_id":100025201,"comment_content":"许老师，HTTPS和非对称加密这块有两个问题不太明白<br>1.B 收到 encoded（R，R-digest），用 B-private-key 解密得到（R，R-digest），然后再用 A-public-key 验证信息的确来自 A。<br>这里的A-public-key从哪里来？是否encoded（R，R-digest）这里应该加上A-public-key变为 encoded（R，R-digest，A-public-key）？验证信息过程是否是通过R-digest和A-public-key运算得到A-private-key，再根据R和A-private-key加密看结果是否为R-digest？<br>2.A使用随机数random-key作为后续对称加密的秘钥，意味着A都是基于该随机键值为信任依据，那么只要中间人没有B的私钥，仅仅得到encoded（R，R-digest）无论如何是解密不出里面的内容，A被窃听、篡改和钓鱼的问题也就没有了，那么防范B的公钥B-public-key泄漏给中间人的意义，也就是数字证书存在的意义是什么？何况就算有意义，中间人得到这个数字证书很容易，再反向得到B-public-key也很容易。<br>","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491223,"discussion_content":"1）A-public-key 是公开的，任何人都可以拿，只需要防止别人冒充 A 公布 A-public-key。后文有接着描述怎么传递它，你可以细看下。另外 A-private-key 是绝对不允许出现在任何 A 设备之外的地方，所以不可能算出来。\n2）数字证书的意义是证明 B 网站域名和 B-public-key 的对应关系。这个关系是可公开的，但是需要防止中间人伪装。A 只有有了 B-public-key，才能很好地传递 random-key。这之后通讯就不再依赖公私钥机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586445866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1505929,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOMFSAg7ZEtwgdqTZMhjvdlOcRbHWTzDCBJMqdzpIqxQIRuE2aHianHHFibv1bGfAjnzmBpSJxx9MA/132","nickname":"oliver","note":"","ucode":"980EBABF71AFBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227291,"discussion_content":"原来数字证书主要作用是描述域名和公钥的对应关系。这样整个逻辑严密，丝丝相扣，赞！\n第一个问题我的疑问在于A-public-key的传递细节和B验证（R，R-digest）信息的过程：把A首次需要传递的random-key代入R后，A在发送encoded（random-key，random-key-digest）时是怎么传递A-public-key给B的？我又仔细看了下，没看到相关描述，是B向A请求获取A-public-key？\nR-digest是用 A-private-key 对 R签名得到的，B解码出（R，R-digest）后是如何根据A-public-key验证R和R-digest的关系的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586482571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162281,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1205777,"ip_address":"","ucode":"EB19F80070FE23","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/11/f7408e3e.jpg","comment_is_top":false,"comment_ctime":1576491429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576491429","product_id":100025201,"comment_content":"这种从底层的实模式，保护模式安全到顶层的个人敏感信息。从防篡改到全链路加密。信息安全的演化越来越密集和分散！","like_count":0},{"had_liked":false,"id":161112,"user_name":"💢 星星💢","can_delete":false,"product_type":"c1","uid":1254392,"ip_address":"","ucode":"A402B765222C35","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","comment_is_top":false,"comment_ctime":1576120548,"is_pvip":false,"replies":[{"id":"61417","content":"这个是成本问题，用摘要的好处是需要的存储空间小，计算的成本低。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1576125966,"ip_address":"","comment_id":161112,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576120548","product_id":100025201,"comment_content":"老师，还是没看懂，为啥要用hash算法生成摘要，不能不使用hash算法生成摘要，直接用私钥加密数据么，然后对方用公钥解密数据么？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477603,"discussion_content":"这个是成本问题，用摘要的好处是需要的存储空间小，计算的成本低。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576125966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115670,"user_name":"TT","can_delete":false,"product_type":"c1","uid":1503620,"ip_address":"","ucode":"F46E4ED7E2FA9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/84/29a84026.jpg","comment_is_top":false,"comment_ctime":1563692006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563692006","product_id":100025201,"comment_content":"看到非对称与对称加密的结合，立马想起了微软对ECC加密算法的一个实现方式ECDsa，想与大家分享<br>https:&#47;&#47;docs.microsoft.com&#47;en-us&#47;dotnet&#47;api&#47;system.security.cryptography.ecdsacng?view=netframework-4.8","like_count":0},{"had_liked":false,"id":110988,"user_name":"刘冲","can_delete":false,"product_type":"c1","uid":1000439,"ip_address":"","ucode":"0C4F66921AE76C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f7/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1562411785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562411785","product_id":100025201,"comment_content":"学了这么久的https，终于在今天学懂了","like_count":0},{"had_liked":false,"id":106421,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1561295529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561295529","product_id":100025201,"comment_content":"不过最后苹果还是放款了对 HTTP 的限制。。哈哈哈","like_count":0},{"had_liked":false,"id":106042,"user_name":"舰长的水手","can_delete":false,"product_type":"c1","uid":1111568,"ip_address":"","ucode":"2D7C177D13E2EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/10/f179db4a.jpg","comment_is_top":false,"comment_ctime":1561141836,"is_pvip":false,"replies":[{"id":"38340","content":"1、可以考虑分段签；<br>2、要考虑重试逻辑","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1561157094,"ip_address":"","comment_id":106042,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561141836","product_id":100025201,"comment_content":"老师，在阻塞io 编程时A,B 双方通过HTTP 通信，为安全无论请求还是响应都 body 的签名放在header 中，。但在 响应式编程中签名无法放在 header， 因为，hrader 发送时往往无法将body完整签名后放将签名放在header 中。我觉得这导致响应式编程难以在实际中推广，请问老师有没有方法解决这个问题。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454929,"discussion_content":"1、可以考虑分段签；\n2、要考虑重试逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561157094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105460,"user_name":"K战神","can_delete":false,"product_type":"c1","uid":1139367,"ip_address":"","ucode":"527E6BB26BB766","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/a7/3e6fee86.jpg","comment_is_top":false,"comment_ctime":1561005877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561005877","product_id":100025201,"comment_content":"https有点像app store","like_count":0},{"had_liked":false,"id":103697,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1560493268,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560493268","product_id":100025201,"comment_content":"现在Android也是用了运行时权限，安全性相对来说已经提升了。但是相比较iOS，还任重道远的感觉。","like_count":0},{"had_liked":false,"id":103615,"user_name":"Cc°°","can_delete":false,"product_type":"c1","uid":1149143,"ip_address":"","ucode":"6C88E8D2C4622D","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/d7/43cf7b60.jpg","comment_is_top":false,"comment_ctime":1560477599,"is_pvip":true,"replies":[{"id":"37506","content":"文章中有讲。是通过对称加密技术返回数据。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560486368,"ip_address":"","comment_id":103615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560477599","product_id":100025201,"comment_content":"对HTTPS的一个疑问：虽然客户端A使用域名B的公钥B-public-key加密，然后传输给域名B，数据只有域名B使用私钥B-private-key解密，不存在传输过程中数据被读(窃听)写(篡改)，但是域名B返回给客户端A的数据如何保证安全(无窃听无篡改)呢？原因如下：<br>1、客户端A并没有生成自己的秘钥对，即：A-private-key和A-public-key，所以不能一对一的加密通信；<br>2、如果域名B使用自己的私钥加密数据给客户端A，但是域名B的公钥是公开的，任何劫持到该数据的中间人都可以使用域名B公开的公钥进行解密，而不是只有客户端A才能解密！","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453940,"discussion_content":"文章中有讲。是通过对称加密技术返回数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560486368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102913,"user_name":"stern","can_delete":false,"product_type":"c1","uid":1501057,"ip_address":"","ucode":"3120A647C6B6AD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKx6EdicYYuYKibnUiajL1ba1cmzXpK6RmvAoIX4mTgdzVELf6Ljzk2chQIBhk37xRuOAnAwtOjkaRMA/132","comment_is_top":false,"comment_ctime":1560327495,"is_pvip":false,"replies":[{"id":"37221","content":"密钥只是个名字，确实不是加密中的密钥","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560333929,"ip_address":"","comment_id":102913,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560327495","product_id":100025201,"comment_content":"摘要算法是不可逆算法，摘要算法是没有密钥一说的。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453645,"discussion_content":"密钥只是个名字，确实不是加密中的密钥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560333929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102565,"user_name":"苟范儿","can_delete":false,"product_type":"c1","uid":1364883,"ip_address":"","ucode":"B06B86765512FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/93/bef5a186.jpg","comment_is_top":false,"comment_ctime":1560253322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560253322","product_id":100025201,"comment_content":"感谢老师的分享，安全、隐私确实对软件的产生了十分重要的影响，架构设计时不得不考虑安全方面的影响.","like_count":0},{"had_liked":false,"id":102324,"user_name":"涵","can_delete":false,"product_type":"c1","uid":1502742,"ip_address":"","ucode":"BB8575DB13F1E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/ee/16/742956ac.jpg","comment_is_top":false,"comment_ctime":1560205045,"is_pvip":false,"replies":[{"id":"36936","content":"被发现的概率几乎是百分之百，被攻击的几率长期来说也是，所以安全还是很重要。只不过不建议自己做草根的安全方案，建议用主流的安全方案。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560220626,"ip_address":"","comment_id":102324,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560205045","product_id":100025201,"comment_content":"老师好，对于企业自己开发的系统的安全性要做到什么程度我一直有个疑问。因为自己在甲方企业工作，也会自己开发或请外包厂商做一些公司内部使用的系统，需要用到移动网络。如果把安全性做得很复杂，会大大增加成本，如果不做，又会担心互联网安全。互联网黑客发现一个企业内部应用，并对其发起攻击的可能性有多大呢?安全程度做到多高合适呢?谢谢。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453358,"discussion_content":"被发现的概率几乎是百分之百，被攻击的几率长期来说也是，所以安全还是很重要。只不过不建议自己做草根的安全方案，建议用主流的安全方案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560220626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102277,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1560174677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560174677","product_id":100025201,"comment_content":"确实如作者所言：好像感觉那个软件不把你权限要足了就、、、<br>手机自带的还好点：问题是哪儿至于是个软件就要你相册、通讯录、摄像头的权限啊。软件只要获取常规的权限就够了啊。<br>我们在操作系统上安装软件时啥时出现过除了要你安装盘权限时还要你整台电脑的权限啊：其实现在的这种是个软件就基本要你全部权限的状态，导致其实很多软件手机端不敢用-什么隐私都给软件获取了。听老师的分析：受益良多；电脑我们知道用杀毒软件或者、、、去控制<br>      可是手机端或者说Android:是个软件就要全部权限的只会、、、怪不得之前有个对阿里云吴翰清的专访他说其实互联网最后的一件事情就是安全。","like_count":0},{"had_liked":false,"id":102233,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1560165861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560165861","product_id":100025201,"comment_content":"之前只知道，https协议就是http加一个ssl协议，解释了这么一通感觉了解了些，最起码能说服自己为什么会安全。","like_count":0}]}