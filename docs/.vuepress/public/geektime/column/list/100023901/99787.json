{"id":99787,"title":"44 | 协程：更轻量级的线程","content":"<p>Java语言里解决并发问题靠的是多线程，但线程是个重量级的对象，不能频繁创建、销毁，而且线程切换的成本也很高，为了解决这些问题，Java SDK提供了线程池。然而用好线程池并不容易，Java围绕线程池提供了很多工具类，这些工具类学起来也不容易。那有没有更好的解决方案呢？Java语言里目前还没有，但是其他语言里有，这个方案就是<strong>协程</strong>（Coroutine）。</p><p>我们可以把<strong>协程</strong>简单地理解<strong>为一种轻量级的线程</strong>。从操作系统的角度来看，线程是在内核态中调度的，而协程是在用户态调度的，所以相对于线程来说，协程切换的成本更低。协程虽然也有自己的栈，但是相比线程栈要小得多，典型的线程栈大小差不多有1M，而协程栈的大小往往只有几K或者几十K。所以，无论是从时间维度还是空间维度来看，协程都比线程轻量得多。</p><p>支持协程的语言还是挺多的，例如Golang、Python、Lua、Kotlin等都支持协程。下面我们就以Golang为代表，看看协程是如何在Golang中使用的。</p><h2>Golang中的协程</h2><p>在Golang中创建协程非常简单，在下面的示例代码中，要让hello()方法在一个新的协程中执行，只需要<code>go hello(\"World\")</code> 这一行代码就搞定了。你可以对比着想想在Java里是如何“辛勤”地创建线程和线程池的吧，我的感觉一直都是：每次写完Golang的代码，就再也不想写Java代码了。</p><!-- [[[read_end]]] --><pre><code>import (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\nfunc hello(msg string) {\n\tfmt.Println(&quot;Hello &quot; + msg)\n}\nfunc main() {\n    //在新的协程中执行hello方法\n\tgo hello(&quot;World&quot;)\n    fmt.Println(&quot;Run in main&quot;)\n    //等待100毫秒让协程执行结束\n\ttime.Sleep(100 * time.Millisecond)\n}\n</code></pre><p>我们在<a href=\"https://time.geekbang.org/column/article/95098\">《33 | Thread-Per-Message模式：最简单实用的分工方法》</a>中介绍过，利用协程能够很好地实现Thread-Per-Message模式。Thread-Per-Message模式非常简单，其实越是简单的模式，功能上就越稳定，可理解性也越好。</p><p>下面的示例代码是用Golang实现的echo程序的服务端，用的是Thread-Per-Message模式，为每个成功建立连接的socket分配一个协程，相比Java线程池的实现方案，Golang中协程的方案更简单。</p><pre><code>import (\n\t&quot;log&quot;\n\t&quot;net&quot;\n)\n\nfunc main() {\n    //监听本地9090端口\n\tsocket, err := net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:9090&quot;)\n\tif err != nil {\n\t\tlog.Panicln(err)\n\t}\n\tdefer socket.Close()\n\tfor {\n        //处理连接请求  \n\t\tconn, err := socket.Accept()\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n        //处理已经成功建立连接的请求\n\t\tgo handleRequest(conn)\n\t}\n}\n//处理已经成功建立连接的请求\nfunc handleRequest(conn net.Conn) {\n\tdefer conn.Close()\n\tfor {\n\t\tbuf := make([]byte, 1024)\n        //读取请求数据\n\t\tsize, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n        //回写相应数据  \n\t\tconn.Write(buf[:size])\n\t}\n}\n</code></pre><h2>利用协程实现同步</h2><p>其实协程并不仅限于实现Thread-Per-Message模式，它还可以将异步模式转换为同步模式。异步编程虽然近几年取得了长足发展，但是异步的思维模式对于普通人来讲毕竟是有难度的，只有线性的思维模式才是适合所有人的。而线性的思维模式反映到编程世界，就是同步。</p><p>在Java里使用多线程并发地处理I/O，基本上用的都是<strong>异步非阻塞模型</strong>，这种模型的异步主要是靠注册回调函数实现的，那能否都使用同步处理呢？显然是不能的。因为同步意味着等待，而线程等待，本质上就是一种严重的浪费。不过对于协程来说，等待的成本就没有那么高了，所以基于协程实现<strong>同步非阻塞</strong>是一个可行的方案。</p><p>OpenResty里实现的cosocket就是一种同步非阻塞方案，借助cosocket我们可以用线性的思维模式来编写非阻塞的程序。下面的示例代码是用cosocket实现的socket程序的客户端，建立连接、发送请求、读取响应所有的操作都是同步的，由于cosocket本身是非阻塞的，所以这些操作虽然是同步的，但是并不会阻塞。</p><pre><code>-- 创建socket\nlocal sock = ngx.socket.tcp()\n-- 设置socket超时时间\nsock:settimeouts(connect_timeout, send_timeout, read_timeout)\n-- 连接到目标地址\nlocal ok, err = sock:connect(host, port)\nif not ok then\n-  -- 省略异常处理\nend\n-- 发送请求\nlocal bytes, err = sock:send(request_data)\nif not bytes then\n  -- 省略异常处理\nend\n-- 读取响应\nlocal line, err = sock:receive()\nif err then\n  -- 省略异常处理\nend\n-- 关闭socket\nsock:close()   \n-- 处理读取到的数据line\nhandle(line)\n</code></pre><h2>结构化并发编程</h2><p>Golang中的 go 语句让协程用起来太简单了，但是这种简单也蕴藏着风险。要深入了解这个风险是什么，就需要先了解一下 goto 语句的前世今生。</p><p>在我上学的时候，各种各样的编程语言书籍中都会谈到不建议使用 goto 语句，原因是 goto 语句会让程序变得混乱，当时对于这个问题我也没有多想，不建议用那就不用了。那为什么 goto 语句会让程序变得混乱呢？混乱具体指的又是什么呢？多年之后，我才了解到所谓的混乱指的是代码的书写顺序和执行顺序不一致。代码的书写顺序，代表的是我们的思维过程，如果思维的过程与代码执行的顺序不一致，那就会干扰我们对代码的理解。我们的思维是线性的，傻傻地一条道儿跑到黑，而goto语句太灵活，随时可以穿越时空，实在是太“混乱”了。</p><p>首先发现 goto 语句是“毒药”的人是著名的计算机科学家艾兹格·迪科斯彻（Edsger Dijkstra），同时他还提出了结构化程序设计。在结构化程序设计中，可以使用三种基本控制结构来代替goto，这三种基本的控制结构就是今天我们广泛使用的<strong>顺序结构</strong>、<strong>选择结构</strong>和<strong>循环结构</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/50/20/501db93634beff4776dd803eb4463920.png?wh=1142*453\" alt=\"\"></p><center><span class=\"reference\">顺序结构</span></center><p><img src=\"https://static001.geekbang.org/resource/image/15/bd/1528f3026981910eef7624aed9c72dbd.png?wh=1142*511\" alt=\"\"></p><center><span class=\"reference\">选择结构</span></center><p><img src=\"https://static001.geekbang.org/resource/image/0d/fd/0d5fa62f62d1e999601ed7e2d52a1dfd.png?wh=1142*508\" alt=\"\"></p><center><span class=\"reference\">循环结构（while）</span></center><p><img src=\"https://static001.geekbang.org/resource/image/c7/9d/c7814d5d1563ab38c312b75c953c4c9d.png?wh=1142*506\" alt=\"\"></p><center><span class=\"reference\">循环结构（do while）</span></center><p>这三种基本的控制结构奠定了今天高级语言的基础，如果仔细观察这三种结构，你会发现它们的入口和出口只有一个，这意味它们是可组合的，而且组合起来一定是线性的，整体来看，代码的书写顺序和执行顺序也是一致的。</p><p>我们以前写的并发程序，是否违背了结构化程序设计呢？这个问题以前并没有被关注，但是最近两年，随着并发编程的快速发展，已经开始有人关注了，而且剑指Golang中的 go 语句，指其为“毒药”，类比的是 goto 语句。详情可以参考<a href=\"https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/\">相关的文章</a>。</p><p>Golang中的 go 语句不过是快速创建协程的方法而已，这篇文章本质上并不仅仅在批判Golang中的 go 语句，而是在批判开启新的线程（或者协程）异步执行这种粗糙的做法，违背了结构化程序设计，Java语言其实也在其列。</p><p>当开启一个新的线程时，程序会并行地出现两个分支，主线程一个分支，子线程一个分支，这两个分支很多情况下都是天各一方、永不相见。而结构化的程序，可以有分支，但是最终一定要汇聚，不能有多个出口，因为只有这样它们组合起来才是线性的。</p><h2>总结</h2><p>最近几年支持协程的开发语言越来越多了，Java OpenSDK中Loom项目的目标就是支持协程，相信不久的将来，Java程序员也可以使用协程来解决并发问题了。</p><p>计算机里很多面向开发人员的技术，大多数都是在解决一个问题：<strong>易用性</strong>。协程作为一项并发编程技术，本质上也不过是解决并发工具的易用性问题而已。对于易用性，我觉得最重要的就是<strong>要适应我们的思维模式</strong>，在工作的前几年，我并没有怎么关注它，但是最近几年思维模式已成为我重点关注的对象。因为思维模式对工作的很多方面都会产生影响，例如质量。</p><p>一个软件产品是否能够活下去，从质量的角度看，最核心的就是代码写得好。那什么样的代码是好代码呢？我觉得，最根本的是可读性好。可读性好的代码，意味着大家都可以上手，而且上手后不会大动干戈。那如何让代码的可读性好呢？很简单，换位思考，用大众、普通的思维模式去写代码，而不是炫耀自己的各种设计能力。我觉得好的代码，就像人民的艺术一样，应该是为人民群众服务的，只有根植于广大群众之中，才有生命力。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":101756,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1559961458,"is_pvip":false,"replies":[{"id":"36783","content":"看你时间了，最好要实践，如果公司没这样的项目，建议参与一个质量不错的开源的项目，一定要实践","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560128492,"ip_address":"","comment_id":101756,"utype":1}],"discussion_count":5,"race_medal":0,"score":"117524078450","product_id":100023901,"comment_content":"王老师请教一下现在多数互联网公司后台都采用go语言开发了，学习go语言是不是也很有必要了，还是根据应用场景或者工作的实际情况来看啊。","like_count":28,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453103,"discussion_content":"看你时间了，最好要实践，如果公司没这样的项目，建议参与一个质量不错的开源的项目，一定要实践","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560128492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246451,"avatar":"https://static001.geekbang.org/account/avatar/00/13/04/f3/a3ff8a58.jpg","nickname":"roseduan","note":"","ucode":"5BB69BB9D329EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342665,"discussion_content":"我学习golang的时候，自己动手写了一个k-v数据库，很不错的练手项目，觉得有帮助的话点个 start 啊！\n项目地址：https://github.com/roseduan/rosedb","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1610770202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20555,"discussion_content":"不写的代码的程序员架构师都是耍流氓","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1569328909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048887,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","nickname":"高源","note":"","ucode":"751B41FD38EF7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223271,"discussion_content":"老师如何参加开源项目啊，这方面还真没有过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586209497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1441876,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2vn8hyjICTCletGs0omz28lhriaZKX2XX9icYzAEon2IEoRnlXqyOia2bEPP0j7T6xexTnr77JJic8w/132","nickname":"Geek_c22199","note":"","ucode":"1CE5B65513E360","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223089,"discussion_content":"留坐标，开源练手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586185355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101853,"user_name":"海水","can_delete":false,"product_type":"c1","uid":1191244,"ip_address":"","ucode":"68D7E454CC0819","user_header":"https://static001.geekbang.org/account/avatar/00/12/2d/4c/983ce1b9.jpg","comment_is_top":false,"comment_ctime":1559997516,"is_pvip":true,"replies":[{"id":"36779","content":"你可以试试基于netty的http客户端，再加上异步servlet试试。这俩必须一起用才有效果","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560127565,"ip_address":"","comment_id":101853,"utype":1}],"discussion_count":3,"race_medal":0,"score":"65984506956","product_id":100023901,"comment_content":"王老师好，有个问题请教下，公司支付接口调用的三方接口，这个三方接口秒级的耗时，如果想提高并发单单提高tomcat线程数或者该用异步sevlet是不是解决不了问题？我感觉这种情况应该是不是应该用协程比如go routine这样的才能解决这样的并发场景？毕竟三方接口的耗时省不了","like_count":16,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453144,"discussion_content":"你可以试试基于netty的http客户端，再加上异步servlet试试。这俩必须一起用才有效果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560127565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030082,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b7/c2/196932c7.jpg","nickname":"南琛一梦","note":"","ucode":"6338D5428DB2B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585211,"discussion_content":"单纯从技术角度上可以参考下async-http-client，底层就是基于netty实现的异步http客户端，请求后通过CompleteFuture来实现回调处理。但从业务场景来看，你提高了你这端的并发能力，但是三方接口能不能支撑得住是一个很现实的问题，是否有这个必要。这个思路例如应用到内部的入口网关上还是蛮多的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661398813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56099,"discussion_content":"需要先搞清你们的业务是CPU密集型还是IO密集型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574432002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193170,"user_name":"艾斯曼","can_delete":false,"product_type":"c1","uid":1001772,"ip_address":"","ucode":"B73FA6A2530138","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/2c/a2a948b6.jpg","comment_is_top":false,"comment_ctime":1584885576,"is_pvip":false,"replies":[{"id":"73831","content":"在操作系统层面看，你的理解是对的。语言，框架层面还会再封装，这个封装会改变同步，异步。底层都是epoll，封装后可能是异步形式，也可能是同步形式","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1585007297,"ip_address":"","comment_id":193170,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44534558536","product_id":100023901,"comment_content":"”在 Java 里使用多线程并发地处理 I&#47;O，基本上用的都是异步非阻塞模型，这种模型的异步主要是靠注册回调函数实现的，那能否都使用同步处理呢？显然是不能的。因为同步意味着等待，而线程等待，本质上就是一种严重的浪费。“<br>老师您好，Java中Netty使用的是非阻塞+IO多路复用，这个应该属于同步IO还是异步IO？我的理解是这个属于同步IO，异步IO在windows上是IOCP，在linux其实AIO相关的API对socket不支持样，所以linux都是使用epoll+非阻塞的同步IO。不知道我这样理解是否正确？谢谢","like_count":11,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488517,"discussion_content":"在操作系统层面看，你的理解是对的。语言，框架层面还会再封装，这个封装会改变同步，异步。底层都是epoll，封装后可能是异步形式，也可能是同步形式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585007297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/10/0acf7cbc.jpg","nickname":"Ryan-Hou","note":"","ucode":"5B703C1E1596A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326144,"discussion_content":"对于调用方来说，如果需要等待执行结果就是同步，如果不需要等待执行结果就可以往下继续执行就是异步。至于底层怎么实现，那是另外一个抽象层面的问题，不要混在一起就行。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605531958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102133,"user_name":"windy","can_delete":false,"product_type":"c1","uid":1134741,"ip_address":"","ucode":"33504913E9AC44","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/95/0af69cc1.jpg","comment_is_top":false,"comment_ctime":1560146696,"is_pvip":false,"replies":[{"id":"36886","content":"客气了，你觉得还有用，我心里就踏实了，我就怕讲不明白","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560182638,"ip_address":"","comment_id":102133,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35919885064","product_id":100023901,"comment_content":"关注老师专栏有一段时间了，老师讲解通俗易懂，涉猎的知识面很广。讲解某个知识点首先说明由来，背后理论，然后展开脉络进行剖析，如何应用到实践中，学以致用。在此送上感谢！","like_count":9,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453276,"discussion_content":"客气了，你觉得还有用，我心里就踏实了，我就怕讲不明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560182638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142175,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1571303710,"is_pvip":true,"replies":[{"id":"54912","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1571360962,"ip_address":"","comment_id":142175,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31636074782","product_id":100023901,"comment_content":"很赞同老师最后提到的软件产品开发，任何需要协作和迭代的事物都需要遵从基本的规范和规则，不然再牛叉的技术只能孤芳自赏，给产品带来的只有灾难。","like_count":8,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471019,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571360962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272862,"user_name":"寻码人","can_delete":false,"product_type":"c1","uid":1480750,"ip_address":"","ucode":"1CED05494AC7E2","user_header":"https://static001.geekbang.org/account/avatar/00/16/98/2e/9cd3cea8.jpg","comment_is_top":false,"comment_ctime":1610335547,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23085172027","product_id":100023901,"comment_content":"操作系统层面的进程、线程、协程这些理论知识要深入的话 有什么书或者材料推荐吗","like_count":6},{"had_liked":false,"id":101741,"user_name":"the geek","can_delete":false,"product_type":"c1","uid":1506723,"ip_address":"","ucode":"71DECBC814A539","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLz3icr3mGs5ib8FbSPQZ2ic3ib90mHkd1btQrmGacZjJxfYXrerIdaTxglKyCicFzLcEAb6deC2cWjE5Q/132","comment_is_top":false,"comment_ctime":1559955739,"is_pvip":false,"replies":[{"id":"36782","content":"早知道这么想，我就收工了😂😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560128362,"ip_address":"","comment_id":101741,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23034792219","product_id":100023901,"comment_content":"哈哈，本来是上来复习一下，结果新冒出了一章46&#47;45","like_count":6,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453096,"discussion_content":"早知道这么想，我就收工了😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560128362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101740,"user_name":"搏未来","can_delete":false,"product_type":"c1","uid":1034079,"ip_address":"","ucode":"4A339B35E3B419","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/5f/2028aae5.jpg","comment_is_top":false,"comment_ctime":1559955033,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23034791513","product_id":100023901,"comment_content":"能写出易于理解的代码也是一种能力😁","like_count":6,"discussions":[{"author":{"id":1475385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","nickname":"竹马彦四郎的好朋友影法師","note":"","ucode":"A9555AEFF90CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349935,"discussion_content":"能写出易于理解而不失本质的代码说明您已经理解透了~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613633601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291844,"user_name":"Geek_b38ae5","can_delete":false,"product_type":"c1","uid":2569256,"ip_address":"","ucode":"9D33EA90E59DE4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/2bicqibaxw5xPMnY83tgBrXb2TzDjictClibJBYv6a83WOWSLN3CpZ9FARwLwwaJcX2De5f9AU2ILjO9bicqzKy7GIQ/132","comment_is_top":false,"comment_ctime":1620548909,"is_pvip":false,"replies":[{"id":"106778","content":"阻塞本质上是操作系统将线程状态变成阻塞，剥夺线程的CPU使用权，线程只有被唤醒(状态变为可执行)后，操作系统才会重新调度执行他","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1621901295,"ip_address":"","comment_id":291844,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10210483501","product_id":100023901,"comment_content":"同步是针对几个线程，才会有协调。<br>而阻塞是针对单个线程把线程，放进线程阻塞队列里面吗？","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519583,"discussion_content":"阻塞本质上是操作系统将线程状态变成阻塞，剥夺线程的CPU使用权，线程只有被唤醒(状态变为可执行)后，操作系统才会重新调度执行他","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621901295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222963,"user_name":"Boomkeeper","can_delete":false,"product_type":"c1","uid":1437444,"ip_address":"","ucode":"129C4229D50EDD","user_header":"https://static001.geekbang.org/account/avatar/00/15/ef/04/f2942f14.jpg","comment_is_top":false,"comment_ctime":1590974466,"is_pvip":false,"replies":[{"id":"82600","content":"有","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1591406192,"ip_address":"","comment_id":222963,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10180909058","product_id":100023901,"comment_content":"老师好，请问协程也是不是有加锁的场景","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496974,"discussion_content":"有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591406192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174023,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1579883351,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10169817943","product_id":100023901,"comment_content":"文中“在 Java 里使用多线程并发地处理 I&#47;O，基本上用的都是异步非阻塞模型” 像我们熟悉的 NIO 应该是同步非阻塞吧，现在 Linux 上 AIO 都还不尽完善","like_count":2,"discussions":[{"author":{"id":1302740,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/d4/7fa07324.jpg","nickname":"王大帅","note":"","ucode":"D2C9ADF2F7EBD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288921,"discussion_content":"感觉这里也应该是同步非阻塞，按照I/O调度，Java NIO使用多线程并发处理I/O应该是同步I/O模型，以Netty封装的为例：要么是同步阻塞或者同步非阻塞I/O模型，操作系统级的异步I/O目前不成熟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593933267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101896,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1560042950,"is_pvip":false,"replies":[{"id":"36777","content":"是的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560127297,"ip_address":"","comment_id":101896,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10149977542","product_id":100023901,"comment_content":"cosocket的非阻塞体现在哪里呢，是说receive等方法是非阻塞方法吗？","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453162,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560127297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1183966,"avatar":"https://static001.geekbang.org/account/avatar/00/12/10/de/dbf2abde.jpg","nickname":"萤火之森","note":"","ucode":"26791DC3000F3B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":574645,"discussion_content":"非阻塞的 同步获取到结果的原理是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654227123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":453162,"ip_address":""},"score":574645,"extra":""}]}]},{"had_liked":false,"id":101876,"user_name":"zhangtnty","can_delete":false,"product_type":"c1","uid":1180553,"ip_address":"","ucode":"3C9A14BD7CF432","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/89/e1621a01.jpg","comment_is_top":false,"comment_ctime":1560007442,"is_pvip":false,"replies":[{"id":"36778","content":"代码结构和业务匹配太重要了👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560127390,"ip_address":"","comment_id":101876,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10149942034","product_id":100023901,"comment_content":"王老师好，很赞同总结中讲的代码质量的看法。我认为好的项目不仅功能强大, 代码结构清晰非常重要, 好的代码结构一定和业务如出一辙，而不是过多的花式代码，总给人一种练手的感觉。","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453152,"discussion_content":"代码结构和业务匹配太重要了👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560127390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272868,"user_name":"寻码人","can_delete":false,"product_type":"c1","uid":1480750,"ip_address":"","ucode":"1CED05494AC7E2","user_header":"https://static001.geekbang.org/account/avatar/00/16/98/2e/9cd3cea8.jpg","comment_is_top":false,"comment_ctime":1610337724,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5905305020","product_id":100023901,"comment_content":"进程，线程，协程在系统层面和语言层面分别有什么命令或者图形分析监控工具","like_count":1},{"had_liked":false,"id":236058,"user_name":"笨小孩","can_delete":false,"product_type":"c1","uid":2064848,"ip_address":"","ucode":"ECDC65601F89BF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/81/d0/dd15b155.jpg","comment_is_top":false,"comment_ctime":1595299674,"is_pvip":false,"replies":[{"id":"87239","content":"内核态用户态之间切换有成本，可以看看操作系统的系统调用和线程切换相关内容","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1595341254,"ip_address":"","comment_id":236058,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890266970","product_id":100023901,"comment_content":"老师您好，我想问一下就是内核他与用户态，为什么协程的用户态性能更加优越，能帮我讲解讲解吗？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501927,"discussion_content":"内核态用户态之间切换有成本，可以看看操作系统的系统调用和线程切换相关内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595341254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222907,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1590953248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885920544","product_id":100023901,"comment_content":"go语句够简单了,还批判？多线程的本质就是要并发执行,没办法汇聚啊","like_count":1},{"had_liked":false,"id":219820,"user_name":"湮汐","can_delete":false,"product_type":"c1","uid":1106268,"ip_address":"","ucode":"FB6185621891E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/5c/86606d9c.jpg","comment_is_top":false,"comment_ctime":1590107100,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5885074396","product_id":100023901,"comment_content":"Java中已经有支持协程的类库，但是为啥这个并没有广泛使用，而且也没有纳入到官方jdk源码里面呢？是因为稳定性不够好吗？","like_count":1},{"had_liked":false,"id":205735,"user_name":"RRR","can_delete":false,"product_type":"c1","uid":1014991,"ip_address":"","ucode":"F32A579D201EC5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/cf/d5382404.jpg","comment_is_top":false,"comment_ctime":1586719821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881687117","product_id":100023901,"comment_content":"看来 erlang 的 actor 才是解决并发最优雅的方式","like_count":1},{"had_liked":false,"id":177975,"user_name":"Chuan","can_delete":false,"product_type":"c1","uid":1438352,"ip_address":"","ucode":"FACEC5DAC36A7A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4akcIyIOXB2OqibTe7FF90hwsBicxkjdicUNTMorGeIictdr3OoMxhc20yznmZWwAvQVThKPFWgOyMw/132","comment_is_top":false,"comment_ctime":1581564812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876532108","product_id":100023901,"comment_content":"老师，请教下，不同协程间通信、访问共享变量时如何协调控制呢？","like_count":1},{"had_liked":false,"id":155775,"user_name":"JK-舒玉强","can_delete":false,"product_type":"c1","uid":1285689,"ip_address":"","ucode":"53C26DD1B7732F","user_header":"https://static001.geekbang.org/account/avatar/00/13/9e/39/6cd103bf.jpg","comment_is_top":false,"comment_ctime":1574754185,"is_pvip":false,"replies":[{"id":"59910","content":"我只是把它们总结出来而已，并不厉害😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1574778843,"ip_address":"","comment_id":155775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869721481","product_id":100023901,"comment_content":"很喜欢王老师的课程，怎么才能够变得跟老师一样厉害呢？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475866,"discussion_content":"我只是把它们总结出来而已，并不厉害😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574778843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143169,"user_name":"天草二十六","can_delete":false,"product_type":"c1","uid":1360712,"ip_address":"","ucode":"3165EE3007527B","user_header":"https://static001.geekbang.org/account/avatar/00/14/c3/48/3a739da6.jpg","comment_is_top":false,"comment_ctime":1571642280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866609576","product_id":100023901,"comment_content":"java也有实现协程的框架了吧","like_count":1},{"had_liked":false,"id":140051,"user_name":"timmy21","can_delete":false,"product_type":"c1","uid":1174860,"ip_address":"","ucode":"9D6DED247B1F38","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/4c/8674b6ad.jpg","comment_is_top":false,"comment_ctime":1570796892,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5865764188","product_id":100023901,"comment_content":"老师，同步非阻塞不太理解，既然同步了，那就是线程干不了其他事情了，那么是阻塞还是非阻塞，又有什么区别呢？盼老师解惑。","like_count":1,"discussions":[{"author":{"id":1358045,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","nickname":"小马哥","note":"","ucode":"B2C0FF38F8C9BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573684,"discussion_content":"同步与非同步说的是方法调用如何获取返回结果，主动获取返回就是同步，直接返回被动等待回调就是异步；\n阻塞与非阻塞说的是线程的执行状态，具体就是遇到抢占临界资源或者io未到来时候的状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653583567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302740,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/d4/7fa07324.jpg","nickname":"王大帅","note":"","ucode":"D2C9ADF2F7EBD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288922,"discussion_content":"同步和阻塞说的是两个层面的事情吧，同步异步是对消息之间的通知模式，阻塞和非阻塞说的是调用线程本身是否等待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593933378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099513,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","nickname":"大王叫我来巡山","note":"","ucode":"1B8D0C701BC95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46626,"discussion_content":"同步最核心的问题是，不需要给CPU资源却给了，如果调度在用户态，就不存在这个问题了，所以这个同步是没有问题的，你可以理解为跟异步是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573187721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133519,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1568596661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5863563957","product_id":100023901,"comment_content":"re: 典型的线程栈大小差不多有 1M，而协程栈的大小往往只有几 K 或者几十 K。<br><br>不明觉厉，假设协程只占 2K，使用线程能支持 2,000 并发，那协程就是 1,024,000，我的天！！<br>协程内部是怎么实现的，居然只占几 K。","like_count":1},{"had_liked":false,"id":118311,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1564319037,"is_pvip":false,"replies":[{"id":"43339","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1564358528,"ip_address":"","comment_id":118311,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859286333","product_id":100023901,"comment_content":"关于协程，整理了一些我个人的理解，https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;yN9z1bupZLjuK2crJKpIpg，请帮忙指正！","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460353,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564358528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112877,"user_name":"Boomkeeper","can_delete":false,"product_type":"c1","uid":1437444,"ip_address":"","ucode":"129C4229D50EDD","user_header":"https://static001.geekbang.org/account/avatar/00/15/ef/04/f2942f14.jpg","comment_is_top":false,"comment_ctime":1562836188,"is_pvip":false,"replies":[{"id":"41170","content":"这个问题太大了😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1562903570,"ip_address":"","comment_id":112877,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857803484","product_id":100023901,"comment_content":"老师，请教一个问题：关于协程来优化io的场景，具体这个咋玩？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457940,"discussion_content":"这个问题太大了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562903570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105299,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1560958378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855925674","product_id":100023901,"comment_content":"我公司的营销架构代码就异常难懂，神马注释都没有，不管是看还是排查问题都难度贼大","like_count":1},{"had_liked":false,"id":104407,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1560746422,"is_pvip":false,"replies":[{"id":"38348","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1561161228,"ip_address":"","comment_id":104407,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5855713718","product_id":100023901,"comment_content":"我也把代码可读性排在第一位。我的目的是降低他人加入开发的成本。从长远看，这会让软件更具活力和可能性。毕竟虽然暂时来看为了可读性可能会损失一些性能和时间。但从长远来看，加入的人越多，节省别人的时间就越多，总会超过我的投入。而性能，随着业务的发展，后续可能能写出更贴合业务场景的优化方案。更何况，习惯后，写高可读性的代码并不会多花我时间。","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454262,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561161228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102401,"user_name":"苏志辉","can_delete":false,"product_type":"c1","uid":1068927,"ip_address":"","ucode":"39B25CE21C04EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/7f/5dc11380.jpg","comment_is_top":false,"comment_ctime":1560216274,"is_pvip":false,"replies":[{"id":"43625","content":"全面理解得熟悉协程的原理还有操作系统的api","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1564486429,"ip_address":"","comment_id":102401,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5855183570","product_id":100023901,"comment_content":"cosocket为什么可以非阻塞，也需要等待有数据可读才行吧，没太理解","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453403,"discussion_content":"全面理解得熟悉协程的原理还有操作系统的api","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564486429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20559,"discussion_content":"我以为只有我自己有这个疑问：cosocket是同步的我能理解，加上个非阻塞，立马蒙圈了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569328984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102230,"user_name":"Sunqc","can_delete":false,"product_type":"c1","uid":1473717,"ip_address":"","ucode":"2C54659635403F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7c/b5/4a7a2bd4.jpg","comment_is_top":false,"comment_ctime":1560165528,"is_pvip":false,"replies":[{"id":"36883","content":"阻塞本质上是cpu是否把线程挂起，所以阻塞都是和操作系统api有关的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560176043,"ip_address":"","comment_id":102230,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5855132824","product_id":100023901,"comment_content":"同步和阻塞，异步和非阻塞，感觉好相似。同步不就是阻塞吗","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453301,"discussion_content":"阻塞本质上是cpu是否把线程挂起，所以阻塞都是和操作系统api有关的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560176043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20560,"discussion_content":"如果这么解释的话上面说的cosocket是同步非阻塞的就说得通过了，不过还是有点牵强，我感觉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569329056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101822,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1559983683,"is_pvip":false,"replies":[{"id":"36780","content":"我觉得可以这么认为","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560127595,"ip_address":"","comment_id":101822,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854950979","product_id":100023901,"comment_content":"Actor model中创建actor的代价也很小，可不可以认为actor model也属于协程？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453130,"discussion_content":"我觉得可以这么认为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560127595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101804,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1559978308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854945604","product_id":100023901,"comment_content":"哔，打卡","like_count":1},{"had_liked":false,"id":101776,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1559968128,"is_pvip":false,"replies":[{"id":"36781","content":"c需要借助第三方的工具包，从汇编的层面看都一样，编程语言除了让语法更适合人的思维方式外，还有就是将好的经验固化下来，找区别就用找区别的思维，c被批判的地方，go都在尝试改进，但都是从工程化的角度，不是哲学，哲学是找相通的东西","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560128244,"ip_address":"","comment_id":101776,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854935424","product_id":100023901,"comment_content":"王老师，协程利用同步非阻塞来完成了高并发的处理吧，我查了下c语言c#语言的协程都有，但是我没明白go只是比其它语言语法简单容易实现吗","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453112,"discussion_content":"c需要借助第三方的工具包，从汇编的层面看都一样，编程语言除了让语法更适合人的思维方式外，还有就是将好的经验固化下来，找区别就用找区别的思维，c被批判的地方，go都在尝试改进，但都是从工程化的角度，不是哲学，哲学是找相通的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560128244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101735,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1559952896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854920192","product_id":100023901,"comment_content":"打卡！","like_count":1},{"had_liked":false,"id":306088,"user_name":"文培","can_delete":false,"product_type":"c1","uid":1450462,"ip_address":"","ucode":"D8BC9BD6F2B261","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/de/c935d3bd.jpg","comment_is_top":false,"comment_ctime":1628337467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628337467","product_id":100023901,"comment_content":"阻塞是说线程要挂起来，是对线程来说的<br><br>同步是任务层面来说的<br>同步非阻塞，说的是任务之间要一个个的按顺序执行，但是在执行任务的这个线程不会被cpu执行阻塞，会一直循环执行得到想要的任务结果然后返回。<br>是这样的吗老师","like_count":1}]}