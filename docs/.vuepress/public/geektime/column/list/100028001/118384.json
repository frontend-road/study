{"id":118384,"title":"37 | 什么时候需要分表分库？","content":"<p>你好，我是刘超。</p><p>在当今互联网时代，海量数据基本上是每一个成熟产品的共性，特别是在移动互联网产品中，几乎每天都在产生数据，例如，商城的订单表、支付系统的交易明细以及游戏中的战报等等。</p><p>对于一个日活用户在百万数量级的商城来说，每天产生的订单数量可能在百万级，特别在一些活动促销期间，甚至上千万。</p><p>假设我们基于单表来实现，每天产生上百万的数据量，不到一个月的时间就要承受上亿的数据，这时单表的性能将会严重下降。因为MySQL在InnoDB存储引擎下创建的索引都是基于B+树实现的，所以查询时的I/O次数很大程度取决于树的高度，随着B+树的树高增高，I/O次数增加，查询性能也就越差。</p><p>当我们面对一张海量数据的表时，通常有分区、NoSQL存储、分表分库等优化方案。</p><p>分区的底层虽然也是基于分表的原理实现的，即有多个底层表实现，但分区依然是在单库下进行的，在一些需要提高并发的场景中的优化空间非常有限，且一个表最多只能支持1024个分区。面对日益增长的海量数据，优化存储能力有限。不过<span class=\"orange\">在一些非海量数据的大表中，我们可以考虑使用分区来优化表性能。</span></p><blockquote>\n<p>分区表是由多个相关的底层表实现的，这些底层表也是由句柄对象表示，所以我们也可以直接访问各个分区，存储引擎管理分区的各个底层表和管理普通表一样（所有的底层表都必须使用相同的存储引擎），分区表的索引只是在各个底层表上各自加上一个相同的索引，从存储引擎的角度来看，底层表和一个普通表没有任何不同，存储引擎也无须知道这是一个普通表，还是一个分区表的一部分。</p>\n</blockquote><!-- [[[read_end]]] --><p>而NoSQL存储是基于键值对存储，虽然查询性能非常高，但在一些方面仍然存在短板。例如，不是关系型数据库，不支持事务以及稳定性方面相对RDBMS差一些。虽然有些NoSQL数据库也实现了事务，宣传具有可靠的稳定性，但<span class=\"orange\">目前NoSQL还是主要用作辅助存储</span>。</p><h2>什么时候要分表分库？</h2><p>分析完了分区、NoSQL存储优化的应用，接下来我们就看看这讲的重头戏——分表分库。</p><p><span class=\"orange\">在我看来，能不分表分库就不要分表分库。</span>在单表的情况下，当业务正常时，我们使用单表即可，而当业务出现了性能瓶颈时，我们首先考虑用分区的方式来优化，如果分区优化之后仍然存在后遗症，此时我们再来考虑分表分库。</p><p>我们知道，如果在单表单库的情况下，当数据库表的数据量逐渐累积到一定的数量时（5000W行或100G以上），操作数据库的性能会出现明显下降，即使我们使用索引优化或读写库分离，性能依然存在瓶颈。此时，如果每日数据增长量非常大，我们就应该考虑分表，避免单表数据量过大，造成数据库操作性能下降。</p><p>面对海量数据，除了单表的性能比较差以外，我们在单表单库的情况下，数据库连接数、磁盘I/O以及网络吞吐等资源都是有限的，并发能力也是有限的。所以，在一些大数据量且高并发的业务场景中，我们就需要考虑分表分库来提升数据库的并发处理能力，从而提升应用的整体性能。</p><h2>如何分表分库？</h2><p>通常，分表分库分为垂直切分和水平切分两种。</p><p>垂直分库是指根据业务来分库，不同的业务使用不同的数据库。例如，订单和消费券在抢购业务中都存在着高并发，如果同时使用一个库，会占用一定的连接数，所以我们可以将数据库分为订单库和促销活动库。</p><p>而垂直分表则是指根据一张表中的字段，将一张表划分为两张表，其规则就是将一些不经常使用的字段拆分到另一张表中。例如，一张订单详情表有一百多个字段，显然这张表的字段太多了，一方面不方便我们开发维护，另一方面还可能引起跨页问题。这时我们就可以拆分该表字段，解决上述两个问题。</p><p>水平分表则是将表中的某一列作为切分的条件，按照某种规则（Range或Hash取模）来切分为更小的表。</p><p>水平分表只是在一个库中，如果存在连接数、I/O读写以及网络吞吐等瓶颈，我们就需要考虑将水平切换的表分布到不同机器的库中，这就是水平分库分表了。</p><p>结合以上垂直切分和水平切分，<span class=\"orange\">我们一般可以将数据库分为：单库单表-单库多表-多库多表。</span>在平时的业务开发中，我们应该优先考虑单库单表；如果数据量比较大，且热点数据比较集中、历史数据很少访问，我们可以考虑表分区；如果访问热点数据分散，基本上所有的数据都会访问到，我们可以考虑单库多表；如果并发量比较高、海量数据以及每日新增数据量巨大，我们可以考虑多库多表。</p><p>这里还需要注意一点，我刚刚强调过，能不分表分库，就不要分表分库。这是因为一旦分表，我们可能会涉及到多表的分页查询、多表的JOIN查询，从而增加业务的复杂度。而一旦分库了，除了跨库分页查询、跨库JOIN查询，还会存在跨库事务的问题。这些问题无疑会增加我们系统开发的复杂度。</p><h2>分表分库之后面临的问题</h2><p>然而，分表分库虽然存在着各种各样的问题，但在一些海量数据、高并发的业务中，分表分库仍是最常用的优化手段。所以，我们应该充分考虑分表分库操作后所面临的一些问题，接下我们就一起看看都有哪些应对之策。</p><p>为了更容易理解这些问题，我们将对一个订单表进行分库分表，通过详细的业务来分析这些问题。</p><p>假设我们有一张订单表以及一张订单详情表，每天的数据增长量在60W单，平时还会有一些促销类活动，订单增长量在千万单。为了提高系统的并发能力，我们考虑将订单表和订单详情表做分库分表。除了分表，因为用户一般查询的是最近的订单信息，所以热点数据比较集中，我们还可以考虑用表分区来优化单表查询。</p><p>通常订单的分库分表要么基于订单号Hash取模实现，要么根据用户  ID  Hash  取模实现。订单号Hash取模的好处是数据能均匀分布到各个表中，而缺陷则是一个用户查询所有订单时，需要去多个表中查询。</p><p>由于订单表用户查询比较多，此时我们应该考虑使用用户ID字段做Hash取模，对订单表进行水平分表。如果需要考虑高并发时的订单处理能力，我们可以考虑基于用户ID字段Hash取模实现分库分表。这也是大部分公司对订单表分库分表的处理方式。</p><h3>1.分布式事务问题</h3><p>在提交订单时，除了创建订单之外，我们还需要扣除相应的库存。而订单表和库存表由于垂直分库，位于不同的库中，这时我们需要通过分布式事务来保证提交订单时的事务完整性。</p><p>通常，我们解决分布式事务有两种通用的方式：两阶事务提交（2PC）以及补偿事务提交（TCC）。有关分布式事务的内容，我将在第41讲中详细介绍。</p><p>通常有一些中间件已经帮我们封装好了这两种方式的实现，例如Spring实现的JTA，目前阿里开源的分布式事务中间件Fescar，就很好地实现了与Dubbo的兼容。</p><h3>2.跨节点JOIN查询问题</h3><p>用户在查询订单时，我们往往需要通过表连接获取到商品信息，而商品信息表可能在另外一个库中，这就涉及到了跨库JOIN查询。</p><p>通常，我们会冗余表或冗余字段来优化跨库JOIN查询。对于一些基础表，例如商品信息表，我们可以在每一个订单分库中复制一张基础表，避免跨库JOIN查询。而对于一两个字段的查询，我们也可以将少量字段冗余在表中，从而避免JOIN查询，也就避免了跨库JOIN查询。</p><h3>3.跨节点分页查询问题</h3><p>我们知道，当用户在订单列表中查询所有订单时，可以通过用户ID的Hash值来快速查询到订单信息，而运营人员在后台对订单表进行查询时，则是通过订单付款时间来进行查询的，这些数据都分布在不同的库以及表中，此时就存在一个跨节点分页查询的问题了。</p><p>通常一些中间件是通过在每个表中先查询出一定的数据，然后在缓存中排序后，获取到对应的分页数据。这种方式在越往后面的查询，就越消耗性能。</p><p>通常我们建议使用两套数据来解决跨节点分页查询问题，一套是基于分库分表的用户单条或多条查询数据，一套则是基于Elasticsearch、Solr存储的订单数据，主要用于运营人员根据其它字段进行分页查询。为了不影响提交订单的业务性能，我们一般使用异步消息来实现Elasticsearch、Solr订单数据的新增和修改。</p><h3>4.全局主键ID问题</h3><p>在分库分表后，主键将无法使用自增长来实现了，在不同的表中我们需要统一全局主键ID。因此，我们需要单独设计全局主键，避免不同表和库中的主键重复问题。</p><p>使用UUID实现全局ID是最方便快捷的方式，即随机生成一个32位16进制数字，这种方式可以保证一个UUID的唯一性，水平扩展能力以及性能都比较高。但使用UUID最大的缺陷就是，它是一个比较长的字符串，连续性差，如果作为主键使用，性能相对来说会比较差。</p><p>我们也可以基于Redis分布式锁实现一个递增的主键ID，这种方式可以保证主键是一个整数且有一定的连续性，但分布式锁存在一定的性能消耗。</p><p>我们还可以基于Twitter开源的分布式ID生产算法——snowflake解决全局主键ID问题，snowflake是通过分别截取时间、机器标识、顺序计数的位数组成一个long类型的主键ID。这种算法可以满足每秒上万个全局ID生成，不仅性能好，而且低延时。</p><h3>5.扩容问题</h3><p>随着用户的订单量增加，根据用户  ID Hash 取模的分表中，数据量也在逐渐累积。此时，我们需要考虑动态增加表，一旦动态增加表了，就会涉及到数据迁移问题。</p><p>我们在最开始设计表数据量时，尽量使用2的倍数来设置表数量。当我们需要扩容时，也同样按照2的倍数来扩容，这种方式可以减少数据的迁移量。</p><h2>总结</h2><p>在业务开发之前，我们首先要根据自己的业务需求来设计表。考虑到一开始的业务发展比较平缓，且开发周期比较短，因此在开发时间比较紧的情况下，我们尽量不要考虑分表分库。但是我们可以将分表分库的业务接口预留，提前考虑后期分表分库的切分规则，把该冗余的字段提前冗余出来，避免后期分表分库的JOIN查询等。</p><p><span class=\"orange\">当业务发展比较迅速的时候，我们就要评估分表分库的必要性了。</span>一旦需要分表分库，就要结合业务提前规划切分规则，尽量避免消耗性能的跨表跨库JOIN查询、分页查询以及跨库事务等操作。</p><h2>思考题</h2><p>你使用过哪些分库分表中间件呢？欢迎分享其中的实现原理以及优缺点。</p><p>期待在留言区看到你的分享。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。</p><p></p>","comments":[{"had_liked":false,"id":128674,"user_name":"mmilan","can_delete":false,"product_type":"c1","uid":1044415,"ip_address":"","ucode":"11120222FB0B33","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ByjQiazibBiawW7X1TnuyicROLUqavhz984TuQvLdBO4Ess4FTbJhVv9EOdyq7DQMVYmYCS9nMEnmCDIp54UXTBpHQ/132","comment_is_top":false,"comment_ctime":1566949798,"is_pvip":false,"replies":[{"id":"47759","content":"我们的分表一般是根据[字段的hash值%表数量]或来进行分配的。<br><br>假设某分表字段的哈希值4、8、12，原来的表数量为4，所以这几个数据都会在一个表中。当扩容到8时，只有12会迁移到第五张表中。<br><br>如果扩容到6张表的话，此时哈希值为4的数据会迁移到第五张表，哈希值为8的需要迁移到第三张表，只有哈希值为12的不需要迁移。","user_name":"作者回复","comment_id":128674,"uid":"1228576","ip_address":"","utype":1,"ctime":1566955901,"user_name_real":"刘超"}],"discussion_count":11,"race_medal":0,"score":"134710935974","product_id":100028001,"comment_content":"老师说&quot;我们在最开始设计表数据量时，尽量使用 2 的倍数来设置表数量。当我们需要扩容时，也同样按照 2 的倍数来扩容，这种方式可以减少数据的迁移量&quot;，不是很理解为什么按2的倍数，就能减少数据的迁移量？","like_count":32,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465051,"discussion_content":"我们的分表一般是根据[字段的hash值%表数量]或来进行分配的。\n\n假设某分表字段的哈希值4、8、12，原来的表数量为4，所以这几个数据都会在一个表中。当扩容到8时，只有12会迁移到第五张表中。\n\n如果扩容到6张表的话，此时哈希值为4的数据会迁移到第五张表，哈希值为8的需要迁移到第三张表，只有哈希值为12的不需要迁移。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566955901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521181,"avatar":"https://static001.geekbang.org/account/avatar/00/17/36/1d/874dc1e3.jpg","nickname":"你的笑忘书","note":"","ucode":"9665D5E9EDBEA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390527,"discussion_content":"表数量为 4，分别为 t_0、t_1、t_2、t_3\n4 % 4 = 0，放到 t_0 表\n8 % 4 = 0，放到 t_0 表\n12 % 4 = 0，放到 t_0 表\n\n【情况一】\n表数量由 4 个扩展到 8 个时，分别为 t_0 ~ t_7\n4 % 8 = 0，无需迁移\n8 % 8 = 0，无需迁移\n12 % 8 = 4，数据需要迁移到 t_4 中，也就是第 5 张表\n\n【情况二】\n若表数量由 4 个扩容为 6 个时，分别为 t_0 ~ t_5\n4 % 6 = 4，迁移到 t_4 表，也就是第 5 张表\n8 % 6 = 2，迁移到 t_2 表，也就是第 3 张表\n12 % 6 = 0，无需迁移","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1629876552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1117852,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/9c/2413fd6f.jpg","nickname":"ETLshow","note":"","ucode":"B57C574B3343CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1521181,"avatar":"https://static001.geekbang.org/account/avatar/00/17/36/1d/874dc1e3.jpg","nickname":"你的笑忘书","note":"","ucode":"9665D5E9EDBEA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577621,"discussion_content":"4 % 8 = 0，4 % 6 = 4 这不矛盾么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656236012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":390527,"ip_address":""},"score":577621,"extra":""}]},{"author":{"id":1215066,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8a/5a/b67a82e3.jpg","nickname":"shen","note":"","ucode":"AE5737B0C7DC4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380812,"discussion_content":"比如1到12行数存储到2张表中，如果是1.5倍数扩容到3张表需要迁移1/2的数据出去，2倍数扩容到4张表只需要迁移1/2的数据出去，3倍扩容到6张表那么需要迁移2/3的数据，最后发现2倍扩容是最优的方式","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1624710315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070682,"avatar":"https://static001.geekbang.org/account/avatar/00/10/56/5a/8499fa98.jpg","nickname":"桔子","note":"","ucode":"F47981A9FDE593","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201658,"discussion_content":"哈希值4、8、12，，，当扩容到8时，只有12会迁移到第五张表中，4%8=4，hash为4的为什么不迁移？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583820859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1348830,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","nickname":"td901105","note":"","ucode":"32D42A4F36FA02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1070682,"avatar":"https://static001.geekbang.org/account/avatar/00/10/56/5a/8499fa98.jpg","nickname":"桔子","note":"","ucode":"F47981A9FDE593","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274149,"discussion_content":"其实应该是2的幂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590546528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":201658,"ip_address":""},"score":274149,"extra":""},{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1348830,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","nickname":"td901105","note":"","ucode":"32D42A4F36FA02","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338498,"discussion_content":"可以详细解释一下吗,还是不懂...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609301169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":274149,"ip_address":""},"score":338498,"extra":""}]},{"author":{"id":1120896,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1a/80/b10ffbb9.jpg","nickname":"ThinPeng","note":"","ucode":"1D00995AAA46AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570973,"discussion_content":"感觉类似 HashMap 的扩容～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652017279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181206,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","nickname":"滴答丶滴","note":"","ucode":"2093C2948B4327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375102,"discussion_content":"就是2的倍数，扩容表。每个表的数据分布匀称些，不会出现表1比表2大很多的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621482599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338496,"discussion_content":"还是看不懂 这是啥意思啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609301097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132448,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","nickname":"Sam.张朝","note":"","ucode":"FB20554D94B250","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302841,"discussion_content":"看不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599045439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126634,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1566438950,"is_pvip":false,"replies":[{"id":"47074","content":"MySQL的表分区存在一些限制，常见的有：分区字段不能为NULL，避免建立和分区列不匹配的索引。<br><br>除此之外，底层实现的表分区，对MySQL来说其实是一个性能消耗的过程，特别是范围分区，服务器需要扫描所有的分区定义的列表来确定具体的分区。<br><br>表分区在操作数据过滤之前，是需要打开并锁住所有底层表的，这个过程是在分区过滤之前发生的，所有是一个非常消耗性能的过程。<br><br>分区表的维护成本也是很高的，特别是重组分区。<br><br>总之，MySQL的表分区实现偏底层，定制不灵活且性能不是很好，维护成本高。所以很多DBA不建议使用。","user_name":"作者回复","comment_id":126634,"uid":"1228576","ip_address":"","utype":1,"ctime":1566614239,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"61695981094","product_id":100028001,"comment_content":"1.中间件应该就mycat，sharding jdbc应该属于基础框架来使用。<br>2.提个问题，公司禁用分区，不知为何，但结果就是相关知识忘光光。本章刚好也有提到，顺带麻烦老师介绍下分区，这块反而成薄弱点了。","like_count":15,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464094,"discussion_content":"MySQL的表分区存在一些限制，常见的有：分区字段不能为NULL，避免建立和分区列不匹配的索引。\n\n除此之外，底层实现的表分区，对MySQL来说其实是一个性能消耗的过程，特别是范围分区，服务器需要扫描所有的分区定义的列表来确定具体的分区。\n\n表分区在操作数据过滤之前，是需要打开并锁住所有底层表的，这个过程是在分区过滤之前发生的，所有是一个非常消耗性能的过程。\n\n分区表的维护成本也是很高的，特别是重组分区。\n\n总之，MySQL的表分区实现偏底层，定制不灵活且性能不是很好，维护成本高。所以很多DBA不建议使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566614239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124167,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1565831773,"is_pvip":false,"replies":[{"id":"45730","content":"看来成长比较迅速呀。这个开源中间件比较新，去年刚开源的时候了解下源码，顺便实践了基本功能。","user_name":"作者回复","comment_id":124167,"uid":"1228576","ip_address":"","utype":1,"ctime":1565919346,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"61695373917","product_id":100028001,"comment_content":"现在Fescar已经改名为Seata","like_count":15,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463038,"discussion_content":"看来成长比较迅速呀。这个开源中间件比较新，去年刚开源的时候了解下源码，顺便实践了基本功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565919346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124171,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1565832246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48810472502","product_id":100028001,"comment_content":"没有什么大厂经验，看了老师的分享的确对大厂数据库分库分表设计有一定的理解和提高","like_count":12},{"had_liked":false,"id":124177,"user_name":"咬尖月牙儿","can_delete":false,"product_type":"c1","uid":1325661,"ip_address":"","ucode":"A6223A6B713109","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/5d/c5dc789a.jpg","comment_is_top":false,"comment_ctime":1565832834,"is_pvip":false,"replies":[{"id":"45740","content":"可以的，TiDB是一种集中式的数据存放解决方案，可以节省开发人员很多工作量。","user_name":"作者回复","comment_id":124177,"uid":"1228576","ip_address":"","utype":1,"ctime":1565920503,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"40220538498","product_id":100028001,"comment_content":"老师，可以用tidb这种newsql取代分库分表的方案吗","like_count":10,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463043,"discussion_content":"可以的，TiDB是一种集中式的数据存放解决方案，可以节省开发人员很多工作量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565920503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191535,"user_name":".","can_delete":false,"product_type":"c1","uid":1083502,"ip_address":"","ucode":"83F583994F4F72","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/6e/3bd860d3.jpg","comment_is_top":false,"comment_ctime":1584779665,"is_pvip":true,"replies":[{"id":"74171","content":"一般冗余数据前提是不频繁被修改的，甚至更严格为不会变修改的数据才能坐数据冗余","user_name":"作者回复","comment_id":191535,"uid":"1228576","ip_address":"","utype":1,"ctime":1585136906,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"35944518033","product_id":100028001,"comment_content":"数据冗余后，如果数据修改后数据更新怎么方便点？","like_count":9,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488195,"discussion_content":"一般冗余数据前提是不频繁被修改的，甚至更严格为不会变修改的数据才能坐数据冗余","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585136906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131295,"user_name":"儿戏","can_delete":false,"product_type":"c1","uid":1133809,"ip_address":"","ucode":"02956B19F65C7A","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/f1/8dc266ee.jpg","comment_is_top":false,"comment_ctime":1567696617,"is_pvip":false,"replies":[{"id":"50187","content":"一般我们都是采用hash求余的方法来实现分库分表，如果在生产环境中出现数据倾斜比较严重，我们需要考虑使用一致性hash算法实现分库分表，也是二次分表的一种实现，只不过可以对局部倾斜数据进行二次分表，实现起来方便，且只影响部分表数据。","user_name":"作者回复","comment_id":131295,"uid":"1228576","ip_address":"","utype":1,"ctime":1567825980,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"23042533097","product_id":100028001,"comment_content":"老师，请问下 订单表用  用户ID 做hash 分库分表后，订单的item表会成倍增长，造成的数据倾斜，怎么解决？做2次分表吗？","like_count":6,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466377,"discussion_content":"一般我们都是采用hash求余的方法来实现分库分表，如果在生产环境中出现数据倾斜比较严重，我们需要考虑使用一致性hash算法实现分库分表，也是二次分表的一种实现，只不过可以对局部倾斜数据进行二次分表，实现起来方便，且只影响部分表数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567825980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187047,"user_name":"Mr.wang","can_delete":false,"product_type":"c1","uid":1224805,"ip_address":"","ucode":"86F341A5316BBC","user_header":"https://static001.geekbang.org/account/avatar/00/12/b0/65/90387745.jpg","comment_is_top":false,"comment_ctime":1583999399,"is_pvip":false,"replies":[{"id":"72174","content":"数据页的大小是有限的，如果插入行数据大于数据页大小，就会发生跨页问题了。","user_name":"作者回复","comment_id":187047,"uid":"1228576","ip_address":"","utype":1,"ctime":1584012920,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":1,"score":"18763868583","product_id":100028001,"comment_content":"刘老师，这里我不太了解一个表字段非常多的时候，新增会发生跨页问题，除了老师在上一章中讲到mysql主键id不是自增id，在新增的时候会发生跨页的原因，这里的跨页还有其他原因吗？","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486974,"discussion_content":"数据页的大小是有限的，如果插入行数据大于数据页大小，就会发生跨页问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584012920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261278,"user_name":"on the way","can_delete":false,"product_type":"c1","uid":1159084,"ip_address":"","ucode":"17AAAAF068EA68","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/ac/dd36cf29.jpg","comment_is_top":false,"comment_ctime":1605256382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10195190974","product_id":100028001,"comment_content":"用一致性hash算法的思想也可以减少数据的迁移","like_count":3},{"had_liked":false,"id":133316,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1568513802,"is_pvip":false,"replies":[{"id":"51094","content":"sharding-jdbc\\mycat在行业内使用比较多，各有优势","user_name":"作者回复","comment_id":133316,"uid":"1228576","ip_address":"","utype":1,"ctime":1568530455,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"10158448394","product_id":100028001,"comment_content":"我使用过公司基础架构部自研的数据库中间件，对于分库分表的的数据查询可以动态路由，不过也就是动态路由，对于join的支持有限，另外分布式事务保证的也一般般。不知开源产品中有哪些佼佼者，功能多性能高?","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467344,"discussion_content":"sharding-jdbc\\mycat在行业内使用比较多，各有优势","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568530455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125490,"user_name":"一眼万年","can_delete":false,"product_type":"c1","uid":1018200,"ip_address":"","ucode":"7B0823E39AE809","user_header":"","comment_is_top":false,"comment_ctime":1566192985,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10156127577","product_id":100028001,"comment_content":"老师，mysql单表最大储存性能分析能详细点，而不是简单一句性能能B+树深度有关","like_count":2,"discussions":[{"author":{"id":1048661,"avatar":"https://static001.geekbang.org/account/avatar/00/10/00/55/3f0bc345.jpg","nickname":"Ghost","note":"","ucode":"CC6FD1D460ED10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198169,"discussion_content":"你去好好看B+树 ， 你就知道老师为啥这么说 ，深度+1  意味多一次的磁盘IO，这个是很耗时的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583483585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1018200,"avatar":"","nickname":"一眼万年","note":"","ucode":"7B0823E39AE809","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048661,"avatar":"https://static001.geekbang.org/account/avatar/00/10/00/55/3f0bc345.jpg","nickname":"Ghost","note":"","ucode":"CC6FD1D460ED10","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205662,"discussion_content":"所以说你一叶障目","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584330183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":198169,"ip_address":""},"score":205662,"extra":""},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1018200,"avatar":"","nickname":"一眼万年","note":"","ucode":"7B0823E39AE809","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350555,"discussion_content":".....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613916083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":205662,"ip_address":""},"score":350555,"extra":""}]}]},{"had_liked":false,"id":124148,"user_name":"明天更美好","can_delete":false,"product_type":"c1","uid":1180696,"ip_address":"","ucode":"F036B8718938BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/18/4b02510f.jpg","comment_is_top":false,"comment_ctime":1565830720,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"10155765312","product_id":100028001,"comment_content":"个人感觉单表超过500w就要分表，不然对于性能有要求的业务来说性能太差了。单库数据超2T，就得分库。这样的话可能更合理些","like_count":2,"discussions":[{"author":{"id":1504556,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/2c/0ded8bce.jpg","nickname":"H_壮鹏","note":"","ucode":"19F469886E63B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299127,"discussion_content":"不夸张的说。。我们公司有一张表7亿数据","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597569886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184658,"avatar":"https://static001.geekbang.org/account/avatar/00/12/13/92/0b4c8e30.jpg","nickname":"飞翔","note":"","ucode":"0641211EE9DA5C","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86881,"discussion_content":"我们公司oracle数据库最大的一张业务表有一亿三千多万数据，每天的工作就是找慢查询sql，然后优化😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576630782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030960,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/30/adb27bb5.jpg","nickname":"En wei","note":"","ucode":"38B3B68F9C3A2C","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4990,"discussion_content":"嗯，看业务场景，单表500w，普通场景要是优化的好的话，还是可以继续坚持的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565863787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1511787,"avatar":"https://static001.geekbang.org/account/avatar/00/17/11/6b/8034959a.jpg","nickname":"迎风劲草","note":"","ucode":"66EDA6C0B12A44","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1030960,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/30/adb27bb5.jpg","nickname":"En wei","note":"","ucode":"38B3B68F9C3A2C","race_medal":4,"user_type":1,"is_pvip":true},"discussion":{"id":5407,"discussion_content":"单表3000W基本没问题的，根据B+树的3层高度计算的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566229892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4990,"ip_address":""},"score":5407,"extra":""},{"author":{"id":1030960,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/30/adb27bb5.jpg","nickname":"En wei","note":"","ucode":"38B3B68F9C3A2C","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":1511787,"avatar":"https://static001.geekbang.org/account/avatar/00/17/11/6b/8034959a.jpg","nickname":"迎风劲草","note":"","ucode":"66EDA6C0B12A44","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":6655,"discussion_content":"之前拿虚拟机跑了一把，4c8g,默认参数，2000w就有点遭不住了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567033052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5407,"ip_address":""},"score":6655,"extra":""}]}]},{"had_liked":false,"id":124094,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1565824428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10155759020","product_id":100028001,"comment_content":"用过阿里的DRDS，它只支持一个字段作为分库分表键，不能多个字段同时分库分表，而且不支持分布式事务，如果要修改分库键的值，就要先插入再删除，或者先删除再插入。插入，更新，查询的时候都要带上分库键。不过好像有个参数可以控制是不是一定要带分库键，大概就了解这么些。","like_count":2},{"had_liked":false,"id":301252,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1625590285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5920557581","product_id":100028001,"comment_content":"自己接触过的分布式系统中大多数还是使用了分库分表，分库主要是根据不同的业务或者服务名划分库，由于业务数据量还没那么大，仅仅做了分库，这个时候只是在报表统计这边会牵涉到多数据源查询以及不同的库进行join查询，而业务中的多数据库操作，我们是把数据操作划分到对应的服务上，可以用MQ、RPC通信、redis等操作。报表中的多数据源join实践过后是禁止这样子操作，因为不知道你join的那个库中的表是否会发生迁移，这个时候应该是把join的操作放在代码里面实现，虽然效率会比直接join要慢很多，但是可以通过多线程的方式去提升处理数据的速度，例如CompleteFutrue的异步非阻塞进行数据处理.","like_count":2},{"had_liked":false,"id":136629,"user_name":"皮卡皮卡","can_delete":false,"product_type":"c1","uid":1216284,"ip_address":"","ucode":"D440EEC7301C76","user_header":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","comment_is_top":false,"comment_ctime":1569485455,"is_pvip":true,"replies":[{"id":"52885","content":"可以自我实现一个snowflake工具类，理解雪花算法的原理即可","user_name":"作者回复","comment_id":136629,"uid":"1228576","ip_address":"","utype":1,"ctime":1569814439,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"5864452751","product_id":100028001,"comment_content":"GitHub上搜snowflake已经淘汰了","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468735,"discussion_content":"可以自我实现一个snowflake工具类，理解雪花算法的原理即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569814439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134246,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1568782320,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5863749616","product_id":100028001,"comment_content":"泪奔，之前用微服务开发产品遇到的难点全中，要是早点看到专栏就好了，人生啊~~~","like_count":1},{"had_liked":false,"id":124279,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565851336,"is_pvip":false,"replies":[{"id":"45728","content":"前期没有做好分表的准备，后面做表升级工作量就大很多，而风险更高。<br><br>例如一个表如果是自增主键ID，而主键ID又跟其他业务表做了耦合，当我们要做表升级时，需要用另外一个字段做分表字段，这时候就存在主键ID在分表后可能存在冲突的问题。 所以一开始我们就要想到这张表有可能需要做表升级，在做表关联时用另外一个非自增主键ID做关联，或者使用全局自增ID或雪花算法统一获取全局主键ID。<br><br>阿里云的数据库暂时没有用过，多了解支持的一些功能，匹配下是否更适合自己的业务。","user_name":"作者回复","comment_id":124279,"uid":"1228576","ip_address":"","utype":1,"ctime":1565919021,"user_name_real":"刘超"}],"discussion_count":1,"race_medal":0,"score":"5860818632","product_id":100028001,"comment_content":"我们的系统前期没设计好，现在想分库分表很难，大量join查询，很难处理。<br>想用阿里云的分页式rdbms，不知道可行性。","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463095,"discussion_content":"前期没有做好分表的准备，后面做表升级工作量就大很多，而风险更高。\n\n例如一个表如果是自增主键ID，而主键ID又跟其他业务表做了耦合，当我们要做表升级时，需要用另外一个字段做分表字段，这时候就存在主键ID在分表后可能存在冲突的问题。 所以一开始我们就要想到这张表有可能需要做表升级，在做表关联时用另外一个非自增主键ID做关联，或者使用全局自增ID或雪花算法统一获取全局主键ID。\n\n阿里云的数据库暂时没有用过，多了解支持的一些功能，匹配下是否更适合自己的业务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565919021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260832,"user_name":"Tree","can_delete":false,"product_type":"c1","uid":1064664,"ip_address":"","ucode":"F53C863FF9159C","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/d8/8608ec03.jpg","comment_is_top":false,"comment_ctime":1605141288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605141288","product_id":100028001,"comment_content":"老师我想问一下，雪花算法的datacenterid 和 workerId  服务器该怎么获取分配？","like_count":0},{"had_liked":false,"id":249850,"user_name":"与路同飞","can_delete":false,"product_type":"c1","uid":1138821,"ip_address":"","ucode":"2985F1440A1962","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","comment_is_top":false,"comment_ctime":1600830327,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1600830327","product_id":100028001,"comment_content":"基于 Elasticsearch、Solr 存储的订单数据，主要用于运营人员根据其它字段进行分页查询。这种给后台运营人员操作的数据，怎么保证实时性呢？例如运营人员手动关闭了订单，这个订单数据的写操作更新的是mysql，mysql同步到elasticSearch会有延迟。这种延迟老师有什么好的建议么？针对这种写后读的场景","like_count":1},{"had_liked":false,"id":241722,"user_name":"李武","can_delete":false,"product_type":"c1","uid":1859291,"ip_address":"","ucode":"CD12A69065692E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/fljYjwPxibUDOSVics11AXiauT0S2ffH6tZZXXpvTusdVowemiaoFWialemCkcs5e1OTcmB0PgRkPzDjRU3hb0NvElA/132","comment_is_top":false,"comment_ctime":1597401077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597401077","product_id":100028001,"comment_content":"shardingjdbc对mysql支持比较好，其他数据库貌似会有很多问题","like_count":0},{"had_liked":false,"id":218649,"user_name":"湮汐","can_delete":false,"product_type":"c1","uid":1106268,"ip_address":"","ucode":"FB6185621891E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/5c/86606d9c.jpg","comment_is_top":false,"comment_ctime":1589850356,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589850356","product_id":100028001,"comment_content":"我们用的是sharing jdbc。其实我们有一些表，查询维度很简单，而且字段比较少，每次查询一定会命中索引，数据量有3e，也没有做分表，每次查询的速度都挺快的，都在一秒以内。","like_count":1},{"had_liked":false,"id":218257,"user_name":"lobby","can_delete":false,"product_type":"c1","uid":1181960,"ip_address":"","ucode":"8D81722BE36AD4","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/08/f3547e77.jpg","comment_is_top":false,"comment_ctime":1589766227,"is_pvip":false,"replies":[{"id":"82344","content":"有的！一致性hash算法可以降低扩容时数据的迁移量，减少DBA的工作量。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1591101561,"ip_address":"","comment_id":218257,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1589766227","product_id":100028001,"comment_content":"老师，一致性hash算法会不会对扩容问题有帮助？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495408,"discussion_content":"有的！一致性hash算法可以降低扩容时数据的迁移量，减少DBA的工作量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591101561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068451,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/a3/3b922cdf.jpg","nickname":"Boyka Ou","note":"","ucode":"87264DD6983580","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297404,"discussion_content":"不理解，为什么？为什么一致性hash会有帮助？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596901308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1181960,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/08/f3547e77.jpg","nickname":"lobby","note":"","ucode":"8D81722BE36AD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1068451,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/a3/3b922cdf.jpg","nickname":"Boyka Ou","note":"","ucode":"87264DD6983580","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297793,"discussion_content":"可以思考一下常规hash在扩容时要怎么处理，然后了解一下一致性hash原理就会明白啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597058261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297404,"ip_address":""},"score":297793,"extra":""},{"author":{"id":1068451,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/a3/3b922cdf.jpg","nickname":"Boyka Ou","note":"","ucode":"87264DD6983580","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181960,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/08/f3547e77.jpg","nickname":"lobby","note":"","ucode":"8D81722BE36AD4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301498,"discussion_content":"不太明白，是不是跟除以1024取余一个道理？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598541179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297793,"ip_address":""},"score":301498,"extra":""}]}]},{"had_liked":false,"id":212526,"user_name":"吴世东","can_delete":false,"product_type":"c1","uid":1529568,"ip_address":"","ucode":"4CCE9A67906B9F","user_header":"https://static001.geekbang.org/account/avatar/00/17/56/e0/a2fedc30.jpg","comment_is_top":false,"comment_ctime":1588141756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588141756","product_id":100028001,"comment_content":"TDDL 分布分表的中间件，有全局唯一Sequence生成，用小表广播的方式解决跨节点的join问题","like_count":0},{"had_liked":false,"id":191718,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1344281,"ip_address":"","ucode":"B877ABD0CF4661","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/19/0a3fe8c1.jpg","comment_is_top":false,"comment_ctime":1584792133,"is_pvip":false,"replies":[{"id":"74172","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1585137034,"ip_address":"","comment_id":191718,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1584792133","product_id":100028001,"comment_content":"分库中间件：MyCat、Cobar、sharding-jdbc<br>MyCat和Cobar是属于一类<br>Sharding-jdbc属于应用端，少一个中间件，感觉维护少一个故点，会更好一些","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488239,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585137034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180793,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1582389744,"is_pvip":false,"replies":[{"id":"70509","content":"可以的，也可以根据原理自己实现。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1582719658,"ip_address":"","comment_id":180793,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582389744","product_id":100028001,"comment_content":"https:&#47;&#47;github.com&#47;souyunku&#47;SnowFlake  <br>老师这个项目的雪花算法还能使用吗？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484794,"discussion_content":"可以的，也可以根据原理自己实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582719658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129459,"user_name":"再续啸傲","can_delete":false,"product_type":"c1","uid":1360184,"ip_address":"","ucode":"912987A17DCA92","user_header":"https://static001.geekbang.org/account/avatar/00/14/c1/38/e45bbb6b.jpg","comment_is_top":false,"comment_ctime":1567132408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567132408","product_id":100028001,"comment_content":"mycat。但是低版本的mycat存在一些聚合函数无法使用的问题","like_count":0},{"had_liked":false,"id":124708,"user_name":"小橙橙","can_delete":false,"product_type":"c1","uid":1054923,"ip_address":"","ucode":"4F467210A15F66","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/cb/edb5a0a0.jpg","comment_is_top":false,"comment_ctime":1565948624,"is_pvip":false,"replies":[{"id":"46208","content":"理论上来说，不跨表垮库查询，是没有数量上限，因为路由是不会存在数量越多性能越慢的情况。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566263952,"ip_address":"","comment_id":124708,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565948624","product_id":100028001,"comment_content":"老师，您好。我没有分库分表的经验。有些实践经验向您请教一下。分库分表的数量有上限吗，比如拆分了多少个库之后，查询性能也没有办法再提高了。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463288,"discussion_content":"理论上来说，不跨表垮库查询，是没有数量上限，因为路由是不会存在数量越多性能越慢的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566263952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124572,"user_name":"梦醒时分","can_delete":false,"product_type":"c1","uid":1008228,"ip_address":"","ucode":"3C8B9E9EA487EB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/64/40e9805d.jpg","comment_is_top":false,"comment_ctime":1565922616,"is_pvip":false,"replies":[{"id":"50394","content":"mycat是一个中间代理层，存在中间相互通信的性能损耗，其他方面挺好的。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567947557,"ip_address":"","comment_id":124572,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1565922616","product_id":100028001,"comment_content":"自己调研过Mycat，个人感觉挺好用的。生产上没用过，不知道稳定性怎么样","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463229,"discussion_content":"mycat是一个中间代理层，存在中间相互通信的性能损耗，其他方面挺好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567947557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1511787,"avatar":"https://static001.geekbang.org/account/avatar/00/17/11/6b/8034959a.jpg","nickname":"迎风劲草","note":"","ucode":"66EDA6C0B12A44","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5406,"discussion_content":"不错的(*๓´╰╯`๓)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566229710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124144,"user_name":"明天更美好","can_delete":false,"product_type":"c1","uid":1180696,"ip_address":"","ucode":"F036B8718938BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/18/4b02510f.jpg","comment_is_top":false,"comment_ctime":1565830565,"is_pvip":false,"replies":[{"id":"45555","content":"正如文中提到的，可以通过数据库或缓存来实现严格的递增，但会有一定的性能消耗。鱼和熊掌两者不可兼得，目前雪花算法是一种折中解决方案。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565831896,"ip_address":"","comment_id":124144,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565830565","product_id":100028001,"comment_content":"有个问题请教下，对于分库分表来说主键需要严格递增，不然数据会发生倾斜的，造成部分库数据过多。雪花算法虽然好，但是只是趋势递增的，那怎么才能做到严格递增呢？并且对性能上有一定要求。","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463030,"discussion_content":"正如文中提到的，可以通过数据库或缓存来实现严格的递增，但会有一定的性能消耗。鱼和熊掌两者不可兼得，目前雪花算法是一种折中解决方案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565831896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1369274,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIibTOfGG73q7PH87icicZ3mFh2rt1OicNDSxTHaticNcD5D5AJte5tO7lDoBXlCl5CmfoHlicIbKPuspWQ/132","nickname":"hust_wsh","note":"","ucode":"82080596CA66B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236372,"discussion_content":"有一个解决办法是新建一张id表，专门用于产生id，分库分表中间件每次从这张表中一次性申请一批id，比如1000个，用完之后再去申请，这样可以做到后申请的id一定比先申请的id大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587089153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124103,"user_name":"门窗小二","can_delete":false,"product_type":"c1","uid":1006424,"ip_address":"","ucode":"0BF3780C247F22","user_header":"","comment_is_top":false,"comment_ctime":1565826625,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565826625","product_id":100028001,"comment_content":"用了sharding jdbc ，但实际实现的时候尽量还是考虑单库","like_count":0},{"had_liked":false,"id":124063,"user_name":"和你一起搬砖的胡大爷","can_delete":false,"product_type":"c1","uid":1008587,"ip_address":"","ucode":"54607F4E17917A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/cb/7c004188.jpg","comment_is_top":false,"comment_ctime":1565800592,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1565800592","product_id":100028001,"comment_content":"用了段时间shardingjdbc，最后还是回归了单服务单库","like_count":0,"discussions":[{"author":{"id":1598663,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcHOOqDpy7gogcjSLrQFHwic6n5VVaJ4EMpkj1gHiaETryGhW6IUK9gagUj28CJKtpngkYEFwORd8w/132","nickname":"Geek_849524","note":"","ucode":"13F8A6ADCF4B1C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28925,"discussion_content":"为什么\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570717560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1008587,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/cb/7c004188.jpg","nickname":"和你一起搬砖的胡大爷","note":"","ucode":"54607F4E17917A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1598663,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcHOOqDpy7gogcjSLrQFHwic6n5VVaJ4EMpkj1gHiaETryGhW6IUK9gagUj28CJKtpngkYEFwORd8w/132","nickname":"Geek_849524","note":"","ucode":"13F8A6ADCF4B1C","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":31942,"discussion_content":"带来的麻杆比解决的问题多，需要解决的问题也能通过优化sql来解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570970850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":28925,"ip_address":""},"score":31942,"extra":""}]}]}]}