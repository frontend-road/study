{"id":290168,"title":"08 | 语法面面观：面向表达式（三）","content":"<p><strong>课件及Demo下载链接</strong><br>\n<a href=\"https://gitee.com/geektime-geekbang/geektime-Rust\">https://gitee.com/geektime-geekbang/geektime-Rust</a></p>","comments":[{"had_liked":false,"id":296338,"user_name":"田云","can_delete":false,"product_type":"c3","uid":2002126,"ip_address":"","ucode":"5D5E7A996D516E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/8c/ce/a52560f4.jpg","comment_is_top":false,"comment_ctime":1622903789,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"感觉理论性太强了，希望多一些实际应用和例子，看到现在一直在感觉念 ppt 的感觉。","like_count":12,"discussions":[{"author":{"id":2831163,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/33/3b/0b25b622.jpg","nickname":"陆一鸣猜不动","note":"","ucode":"68E89A037F9A0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549106,"discussion_content":"2倍速食用最佳。\n\n我第一次学的时候也是感觉太理论了，但是就跟老师开篇讲的一样，需要一定的rust基础再来看才最好。第二次学的时候已经详细过了一遍文档和基本概念，就感觉讲明白了很多平常不理解的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643555729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2843586,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/c2/83d737ff.jpg","nickname":"Amesy","note":"","ucode":"84D0B7D133520A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540592,"discussion_content":"还好吧。学习本课程确实需要有Rust的一些基础，学起来会更轻松，就跟查漏补缺一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640090015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1017546,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCNH9kd9GibX0icHbdkUJAJ0ICicZNcsAcVZkUhTibMFbKtVtnjUpMtgd9ZibkWFZibgftHezDIyMRjafA/132","nickname":"个度时个度","note":"","ucode":"9AFBDD14211ABE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387099,"discussion_content":"有时还念重复了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627982730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250569,"user_name":"蓝士钦","can_delete":false,"product_type":"c3","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1601133863,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"Rust语言通过mut 实现可变引用，每次只允许有一个可变引用，相当于实现了“锁”，比其他语言的显示锁更加高效。\n这种安全机制仅限于单个进程内，如果用Rust开发Web应用，对于分布式应用的场景仅通过mut是不够的，必须使用分布式锁，关于分布式并发和其他语言没什么差别，都要自己实现数据锁。","like_count":3,"discussions":[{"author":{"id":1198100,"avatar":"https://static001.geekbang.org/account/avatar/00/12/48/14/bb345fa8.jpg","nickname":"🍵Alex","note":"","ucode":"88373FAA431D5A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309200,"discussion_content":"是啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601214435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281029,"user_name":"Marvichov","can_delete":false,"product_type":"c3","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1614538955,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"英文文档 https:&#47;&#47;doc.rust-lang.org&#47;reference&#47;expressions.html#place-expressions-and-value-expressions","like_count":1},{"had_liked":false,"id":387785,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c3","uid":1494491,"ip_address":"上海","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1708581494,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"Rust 里的 mut 严格的来说不应该被翻译为可变，因为其实也能做到不加 mut 照样能修改数据，比如 Atomic 类型之类的，具体看库的实现方式，严格来说就应该翻译为独占，这个独占是编辑器掌控的。不是库的实现方式能左右的。","like_count":0},{"had_liked":false,"id":343215,"user_name":"万正宇","can_delete":false,"product_type":"c3","uid":2985047,"ip_address":"","ucode":"B8E70029D5F131","user_header":"https://static001.geekbang.org/account/avatar/00/2d/8c/57/b7bc2b9e.jpg","comment_is_top":false,"comment_ctime":1650710866,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"--006\n#![allow(unused)]&#47;&#47;宏语句\nuse std::collections::HashMap;&#47;&#47;声明语句\n&#47;**\n1.除了声明，一切都是表达式，都是类型\n2.一致性地返回单元类型，其并无实际意义\n3.宏语句（文本替换，生成指定代码）\n*&#47;\nfn main() {&#47;&#47;块表达式\n\tlet mut res = HashMap::new();\n\tres.insert(&quot;res&quot;,555);\n\tprintln!(&quot;res={:?}&quot;, res[&quot;res&quot;]);\n    ;   &#47;&#47;连接\n    {\n    \t();     &#47;&#47;返回空元组\n    }\n    &amp;{\n    \t;       &#47;&#47;返回单元值类型 UnitType 的引用\n    }\n    ;           &#47;&#47;返回单元值类型 ; -&gt; () \n}\n\n\n--007\n&#47;**\n1.常量函数 const fn，常量泛型 const generic；在编译期计算 (编译期执行常量表达式)\n2.常量传播优化 const propagation (编译期优化替换)\n3.特性门已被删除\n*&#47;\n#[derive(Debug)]\npub struct ArrVec&lt;T, const N: usize&gt; {\n    items: [T; N],\n    length: usize,\n}\n\nimpl&lt;T, const N: usize&gt; ArrVec&lt;T, {N}&gt; {\n    pub const fn new() -&gt; ArrVec&lt;T, {N}&gt; { &#47;&#47;泛型常量函数\n        ArrVec {\n            items: [T; N],\n            length: 0,\n        }\n    }\n    \n    #[inline]\t&#47;&#47;内联优化\n    pub const fn capacity(&amp;self) -&gt; usize { N }\n}\n\n#![feature(array_chunks)]\nfn main() { \n\tarr.array_chunks().map(|&amp;[x,y,z] | x*y*z).sum::&lt;i32&gt;();  &#47;&#47;闭包??\n\tassert_eq!(...);\n}\n\n\n--008\n&#47;**\n1. let绑定 位置表达式(内存地址) = 值表达式 ;\n2. static mut LEVEL: u8 = 0; &#47;&#47;静态变量初始化\n3. struct A { name: &amp;&#39;static str, }\n4. vec![1, 2, 3].push(&amp;mut self, 4);\n5. copy语义，复制\n6. move语义，转移栈上的指针\n7. &amp;mut answer;\t&#47;&#47;内存锁 &#47;&#47;每个内存位置，只允许有唯一的绑定\t&#47;&#47;独占引用\n8. *const T &amp; *mut T\t&#47;&#47;Unsafe Rust, 操作原始指针\n*&#47;","like_count":0},{"had_liked":false,"id":334987,"user_name":"Geek_9ab0d8","can_delete":false,"product_type":"c3","uid":2915983,"ip_address":"","ucode":"081178001E6A19","user_header":"","comment_is_top":false,"comment_ctime":1645240367,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"    let mut anwser=42;\n    let r=&amp;mut anwser;\n    *r=43;\n    &#47;&#47;println!(&quot;{:?},{:?}&quot;,anwser, r);&#47;&#47; 为什么这样写会报错\n    println!(&quot;{:?}&quot;,anwser);&#47;&#47;正确\n    anwser=5;&#47;&#47;重新给anwser赋值时，r地址就无效了？\n    &#47;&#47;println!(&quot;{:?}&quot;,r);&#47;&#47;为什么访问不了r\n    println!(&quot;{:?}&quot;,anwser);&#47;&#47;正确","like_count":0,"discussions":[{"author":{"id":2953704,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/11/e8/e26cc95a.jpg","nickname":"Jzq","note":"","ucode":"58E0C231E20A0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559597,"discussion_content":"一句话,同一时间对同一块内存可以有多个不可变引用,也可以(而且只能)有且仅有一个可变引用.\n你的answer和r都是存储着42这块内存的可变引用,println!这个宏肯定不允许在同一时间使用两个可变引用.\n而且你要记住等号两边都是上下文表达式,你用answer给42这块内存重新赋值5了,然后你又想用println!打印r,这又相当于同一时间既用了answer也用了r,并不是地址无效了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648826298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334982,"user_name":"Geek_9ab0d8","can_delete":false,"product_type":"c3","uid":2915983,"ip_address":"","ucode":"081178001E6A19","user_header":"","comment_is_top":false,"comment_ctime":1645239008,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"    let mut anwser=42;\n    let r=&amp;mut anwser;\n    *r=43;\n    println!(&quot;{:?},{:?}&quot;,anwser, r);&#47;&#47; 为什么这样写会报:cannot borrow `anwser` as immutable because it is also borrowed as mutable","like_count":0},{"had_liked":false,"id":274096,"user_name":"情诗和你","can_delete":false,"product_type":"c3","uid":1607858,"ip_address":"","ucode":"2614726BA9D619","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/b2/b323a8c1.jpg","comment_is_top":false,"comment_ctime":1610851929,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"变量遮蔽后，相同的变量还是指向同一块内存区域吗？\n\nlet answer = 1;\nlet answer = “asdasdads”;\n\n如果遮蔽后的 answer 指向新的内存区域，那原来的内存块不就没有使用到了吗？ ","like_count":0,"discussions":[{"author":{"id":1097648,"avatar":"https://static001.geekbang.org/account/avatar/00/10/bf/b0/6730d757.jpg","nickname":"aaron","note":"","ucode":"7DBB9B0656BDC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399806,"discussion_content":"不是指向同一块内存，旧的内存也是释放，而是等到它的生命周期结束才释放。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633067038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1085515,"avatar":"https://static001.geekbang.org/account/avatar/00/10/90/4b/ba24dc0e.jpg","nickname":"天下第七","note":"","ucode":"62560E80452772","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350706,"discussion_content":"我的理解，旧的内存区域就释放了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613984021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250913,"user_name":"米斯特菠萝","can_delete":false,"product_type":"c3","uid":1259824,"ip_address":"","ucode":"8AFB7F59F9014A","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/30/f7df6ba7.jpg","comment_is_top":false,"comment_ctime":1601280046,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"Rust没有BigDecimal类型吗？\n\n0.1 + 0.2 = 0.30000000000000004 这样的浮点数精度问题还是和JS一样呀","like_count":0,"discussions":[{"author":{"id":1224623,"avatar":"https://static001.geekbang.org/account/avatar/00/12/af/af/8b03ce2c.jpg","nickname":"GengTeng","note":"","ucode":"3F926F5EF1D075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310667,"discussion_content":"浮点数精度本身就不是某个语言的问题，因为ieee754就是这么定义的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601982811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1198100,"avatar":"https://static001.geekbang.org/account/avatar/00/12/48/14/bb345fa8.jpg","nickname":"🍵Alex","note":"","ucode":"88373FAA431D5A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311449,"discussion_content":"有第三方库","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602340324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1498664,"avatar":"https://static001.geekbang.org/account/avatar/00/16/de/28/acb248d6.jpg","nickname":"晖","note":"","ucode":"D12C7EBDCD4236","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310176,"discussion_content":"BigDecimal 似乎复杂到用库来提供了，也许不适合做 Primitive 类型。许多语言也许都有浮点数精度问题，JS的问题倒不是这个，是它压根就没有 int.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601657231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250788,"user_name":"神 一生有你","can_delete":false,"product_type":"c3","uid":1047574,"ip_address":"","ucode":"423AD11359E265","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/16/0a3f1c15.jpg","comment_is_top":false,"comment_ctime":1601221098,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100060601,"comment_content":"aes加密，当内容长度过长，需要字节数组分段加密，最后的数组长度是按内容动态大小的，其它语言都是定义byte[] b=new byte[N]，N是动态算出来的，rust搞不了，只能vec来用","like_count":0,"discussions":[{"author":{"id":1224623,"avatar":"https://static001.geekbang.org/account/avatar/00/12/af/af/8b03ce2c.jpg","nickname":"GengTeng","note":"","ucode":"3F926F5EF1D075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310025,"discussion_content":"其他语言的byte[]在Rust里就是Vec<u8>，也更好用啊，不是什么搞不了，如果你一定要堆上一个定长数组，可以into_boxed_slice变成Box<[u8]>，就一样了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601561227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250154,"user_name":"史双龙","can_delete":false,"product_type":"c3","uid":1176417,"ip_address":"","ucode":"387D01880867AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/f3/61/8f7fca5b.jpg","comment_is_top":false,"comment_ctime":1600953197,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":3,"product_id":100060601,"comment_content":"老师您好！如果需要变化的话推荐使用哪种方式mut修饰符还是变量遮蔽，这两种方式分别适用哪种情况？","like_count":0,"discussions":[{"author":{"id":1498664,"avatar":"https://static001.geekbang.org/account/avatar/00/16/de/28/acb248d6.jpg","nickname":"晖","note":"","ucode":"D12C7EBDCD4236","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308526,"discussion_content":"分享一下我粗浅的理解。\n\n1 - 变量遮蔽一般用在同样一份数据，但是类型变化了的情况下，例如从用户那里读取一个字符串，然后再转换成一个整数类型。用变量遮蔽就不需要去想各种各样的变量名了：\nfn main() {\n    let input = &#34;42&#34;.to_string();     // 这里其他语言也许会写成inputString.\n    let input = input.parse::<i32>().unwrap();   // 这里 input 被转化了类型，但名字不变。\n    println!(&#34;{}&#34;, input)\n}\n\n2 - 其他情况则一般使用 mut，因为这些情况下多半是想要传递一个可变引用 &amp;mut 给其他方法。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1600990343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1198100,"avatar":"https://static001.geekbang.org/account/avatar/00/12/48/14/bb345fa8.jpg","nickname":"🍵Alex","note":"","ucode":"88373FAA431D5A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1498664,"avatar":"https://static001.geekbang.org/account/avatar/00/16/de/28/acb248d6.jpg","nickname":"晖","note":"","ucode":"D12C7EBDCD4236","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":308625,"discussion_content":"不错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601011421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308526,"ip_address":"","group_id":0},"score":308625,"extra":""}]},{"author":{"id":1198100,"avatar":"https://static001.geekbang.org/account/avatar/00/12/48/14/bb345fa8.jpg","nickname":"🍵Alex","note":"","ucode":"88373FAA431D5A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308624,"discussion_content":"非得寻找差异，那就是变量遮蔽一般是在需要类型变更的时候，mut一般不存在类型变更，只是数据改变。一般使用的时候具体需要啥就用啥。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601011404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}