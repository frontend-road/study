{"id":97616,"title":"34 | iOS 黑魔法 Runtime Method Swizzling 背后的原理","content":"<p>你好，我是戴铭。</p><p>提到Object-C中的Runtime，你可能一下就想到了iOS的黑魔法Method Swizzling。毕竟，这个黑魔法可以帮助我们在运行时进行方法交换，或者在原方法执行之前插入自定义方法，以保证在业务面向对象编程方式不被改变的情况下，进行切面功能的开发。但是，运行时进行方法交换同时也会带来一定的风险。所以，今天我就来和你详细聊聊Runtime Method Swizzling 的原理。</p><p>Runtime Method Swizzling 编程方式，也可以叫作AOP（Aspect-Oriented Programming，面向切面编程）。</p><p>AOP 是一种编程范式，也可以说是一种编程思想，使用 AOP 可以解决 OOP（Object Oriented Programming，面向对象编程）由于切面需求导致单一职责被破坏的问题。通过 AOP 可以不侵入 OOP 开发，非常方便地插入切面需求功能。</p><p>比如，我在专栏<a href=\"https://time.geekbang.org/column/article/87925\">第9篇文章</a>中介绍无侵入埋点方案时，就提到了通过 AOP 在不侵入原有功能代码的情况下插入收集埋点的功能。</p><p>除此之外，还有一些主业务无关的逻辑功能，也可以通过 AOP 来完成，这样主业务逻辑就能够满足 OOP 单一职责的要求。而如果没有使用 AOP，鉴于OOP的局限性，这些与主业务无关的代码就会到处都是，增大了工作量不说，还会加大维护成本。</p><!-- [[[read_end]]] --><p>但是我们也知道，iOS 在运行时进行 AOP 开发会有风险，不能简单地使用 Runtime 进行方法交换来实现 AOP 开发。因此，我今天就来跟你说下直接使用 Runtime 方法交换开发的风险有哪些，而安全的方法交换原理又是怎样的？</p><h2>直接使用 Runtime 方法交换开发的风险有哪些？</h2><p>Objective-C 是门动态语言，可以在运行时做任何它能做的事情。这其中的功劳离不开 Runtime 这个库。正因为如此，Runtime 成为了 iOS 开发中 Objective-C 和 C 的分水岭。</p><p>Runtime 不光能够进行方法交换，还能够在运行时处理 Objective-C 特性相关（比如类、成员函数、继承）的增删改操作。</p><p>苹果公司已经开源了Runtime，在 GitHub 上有<a href=\"https://github.com/0xxd0/objc4\">可编译的 Runtime 开源版本</a>。你可以通过于德志 (@halfrost)博客的三篇 Runtime 文章，即<a href=\"https://halfrost.com/objc_runtime_isa_class/\">isa和Class</a>、<a href=\"https://halfrost.com/objc_runtime_objc_msgsend/\">消息发送与转发</a>，以及<a href=\"https://halfrost.com/how_to_use_runtime/\">如何正确使用Runtime</a>，来一边学习一边调试。</p><p>直接使用 Runtime 进行方法交换非常简单，代码如下：</p><pre><code>#import &quot;SMHook.h&quot;\n#import &lt;objc/runtime.h&gt;\n\n@implementation SMHook\n\n+ (void)hookClass:(Class)classObject fromSelector:(SEL)fromSelector toSelector:(SEL)toSelector {\n    Class class = classObject;\n    // 得到被交换类的实例方法\n    Method fromMethod = class_getInstanceMethod(class, fromSelector);\n    // 得到交换类的实例方法\n    Method toMethod = class_getInstanceMethod(class, toSelector);\n    \n    // class_addMethod() 函数返回成功表示被交换的方法没实现，然后会通过 class_addMethod() 函数先实现；返回失败则表示被交换方法已存在，可以直接进行 IMP 指针交换 \n    if(class_addMethod(class, fromSelector, method_getImplementation(toMethod), method_getTypeEncoding(toMethod))) {\n        // 进行方法的交换\n        class_replaceMethod(class, toSelector, method_getImplementation(fromMethod), method_getTypeEncoding(fromMethod));\n    } else {\n        // 交换 IMP 指针\n        method_exchangeImplementations(fromMethod, toMethod);\n    }\n}\n@end\n</code></pre><p>如代码所示：通过 class_getInstanceMethod() 函数可以得到被交换类的实例方法和交换类的实例方法。使用 class_addMethod() 函数来添加方法，返回成功表示被交换的方法没被实现，然后通过 class_addMethod() 函数实现；返回失败则表示被交换方法已存在，可以通过 method_exchangeImplementations() 函数直接进行 IMP 指针交换以实现方法交换。</p><p>但是，像上面这段代码一样，直接使用 Runtime 的方法进行方法交换会有很多风险，<a href=\"https://github.com/rabovik/RSSwizzle/\">RSSwizzle</a>库里指出了<strong>四个典型的直接使用 Runtime 方法进行方法交换的风险</strong>。我稍作整理，以方便你查看，并便于你理解后续的内容。</p><p>第一个风险是，需要在 +load 方法中进行方法交换。因为如果在其他时候进行方法交换，难以保证另外一个线程中不会同时调用被交换的方法，从而导致程序不能按预期执行。</p><p>第二个风险是，被交换的方法必须是当前类的方法，不能是父类的方法，直接把父类的实现拷贝过来不会起作用。父类的方法必须在调用的时候使用，而不是方法交换时使用。</p><p>第三个风险是，交换的方法如果依赖了 cmd，那么交换后，如果 cmd 发生了变化，就会出现各种奇怪问题，而且这些问题还很难排查。特别是交换了系统方法，你无法保证系统方法内部是否依赖了 cmd。</p><p>第四个风险是，方法交换命名冲突。如果出现冲突，可能会导致方法交换失败。</p><p>更多关于运行时方法交换的风险，你可以查看 Stackoverflow 上的问题讨论“<a href=\"https://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c\">What are the Dangers of Method Swizzling in Objective C?</a>”。</p><p>可以看到，直接使用 Runtime 进行方法交换的风险非常大，那么安全的方法交换是怎样的呢？接下来，我就来跟你介绍一个更安全的运行时方法交换库 <a href=\"https://github.com/steipete/Aspects\">Aspects</a>。</p><h2>更安全的方法交换库Aspects</h2><p>Aspects 是一个通过 Runtime 消息转发机制来实现方法交换的库。它将所有的方法调用都指到 _objc_msgForward 函数调用上，按照自己的方式实现了消息转发，自己处理参数列表，处理返回值，最后通过 NSInvocation 调用来实现方法交换。同时，Aspects 还考虑了一些方法交换可能会引发的风险，并进行了处理。</p><p>通过学习Aspects 的源码，你能够从中学习到如何处理这些风险。 比如，热修复框架 <a href=\"https://github.com/bang590/JSPatch\">JSPatch</a>就是学习了 Aspects 的实现方式。因此，接下来我会展开Aspects的源码，带你一起看看它是如何解决这些问题的。这样，你再遇到类似问题时，或借鉴其中的解决思路，或经过实践、思考后形成自己的更优雅的解决方法。</p><p>虽然 Aspects 对于一些风险进行了规避，但是在使用不当的情况下依然会有风险，比如 hook 已经被 hook 过的方法，那么之前的 hook 会失效，而且新的 hook 也会出错。所以，即使是 Aspects， 在工程中也不能滥用。</p><p>现在，我们先一起看一段<strong>如何使用 Aspects 的示例代码</strong>：</p><pre><code>[UIViewController aspect_hookSelector:@selector(viewWillAppear:) withOptions:AspectPositionAfter usingBlock:^(id&lt;AspectInfo&gt; aspectInfo, BOOL animated) {\n    NSLog(@&quot;View Controller %@ will appear animated: %tu&quot;, aspectInfo.instance, animated);\n} error:NULL];\n</code></pre><p>上面这段代码是 Aspects 通过运行时方法交换，按照 AOP 方式添加埋点的实现。代码简单，可读性高，接口使用 Block 也非常易用。按照这种方式，直接使用Aspects即可。</p><p>接下来，我就跟你说下 <strong>Aspect 实现方法交换的原理</strong>。</p><p>Aspects 的整体流程是，先判断是否可进行方法交换。这一步会进行安全问题的判断处理。如果没有风险的话，再针对要交换的是类对象还是实例对象分别进行处理。</p><ul>\n<li>对于类对象的方法交换，会先修改类的 forwardInvocation ，将类的实现转成自己的。然后，重新生成一个方法用来交换。最后，交换方法的 IMP，方法调用时就会直接对交换方法进行消息转发。</li>\n<li>对于实例对象的方法交换，会先创建一个新的类，并将当前实例对象的 isa 指针指向新创建的类，然后再修改类的方法。</li>\n</ul><p>整个流程的入口是 aspect_add() 方法，这个方法里包含了 Aspects 的两个核心方法，第一个是进行安全判断的 aspect_isSelectorAllowedAndTrack 方法，第二个是执行类对象和实例对象方法交换的 aspect_prepareClassAndHookSelector 方法。</p><p>aspect_isSelectorAllowedAndTrack 方法，会对一些方法比如 retain、release、autorelease、forwardInvocation 进行过滤，并对 dealloc 方法交换做了限制，要求只能使用 AspectPositionBefore 选项。同时，它还会过滤没有响应的方法，直接返回 NO。</p><p>安全判断执行完，就开始执行方法交换的 aspect_prepareClassAndHookSelector 方法，其实现代码如下：</p><pre><code>static void aspect_prepareClassAndHookSelector(NSObject *self, SEL selector, NSError **error) {\n    NSCParameterAssert(selector);\n    Class klass = aspect_hookClass(self, error);\n    Method targetMethod = class_getInstanceMethod(klass, selector);\n    IMP targetMethodIMP = method_getImplementation(targetMethod);\n    if (!aspect_isMsgForwardIMP(targetMethodIMP)) {\n        // 创建方法别名\n        const char *typeEncoding = method_getTypeEncoding(targetMethod);\n        SEL aliasSelector = aspect_aliasForSelector(selector);\n        if (![klass instancesRespondToSelector:aliasSelector]) {\n            __unused BOOL addedAlias = class_addMethod(klass, aliasSelector, method_getImplementation(targetMethod), typeEncoding);\n            NSCAssert(addedAlias, @&quot;Original implementation for %@ is already copied to %@ on %@&quot;, NSStringFromSelector(selector), NSStringFromSelector(aliasSelector), klass);\n        }\n\n        // 使用 forwardInvocation 进行方法交换.\n        class_replaceMethod(klass, selector, aspect_getMsgForwardIMP(self, selector), typeEncoding);\n        AspectLog(@&quot;Aspects: Installed hook for -[%@ %@].&quot;, klass, NSStringFromSelector(selector));\n    }\n}\n\n</code></pre><p>可以看到，通过 aspect_hookClass()函数可以判断出 class 的 selector 是实例方法还是类方法，如果是实例方法，会通过 class_addMethod 方法生成一个交换方法，这样在 forwordInvocation 时就能够直接执行交换方法。aspect_hookClass 还会对类对象、元类、KVO 子类化的实例对象、class 和 isa 指向不同的情况进行处理，使用 aspect_swizzleClassInPlace 混写 baseClass。</p><h2>小结</h2><p>在今天这篇文章中，我和你梳理了直接使用 Runtime进行方法交换会有哪些问题，进而为了解决这些问题，我又和你分享了一个更安全的方法交换库 Aspects。</p><p>在文章最后，我想和你说的是，对于运行时进行方法交换，有的开发者在碰到了几次问题之后，就敬而远之了，但其实很多问题在你了解了原因后就不那么可怕了。就比如说，了解更多运行时原理和优秀方法交换库的实现细节，能够增强你使用运行时方法交换的信心，从而这个技术能够更好地为你提供服务，去帮助你更加高效地去解决某一类问题。</p><h2>课后作业</h2><p>你是怎么使用方法交换的？用的什么库？和 Aspects 比，这些库好在哪儿？</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"33 | iOS 系统内核 XNU：App 如何加载？","id":97200},"right":{"article_title":"35 | libffi：动态调用和定义 C 函数","id":98154}},"comments":[{"had_liked":false,"id":98489,"user_name":"Vicky","can_delete":false,"product_type":"c1","uid":1200641,"ip_address":"","ucode":"6F802C8AF8090E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/01/a8d3db35.jpg","comment_is_top":false,"comment_ctime":1559010519,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"96048291031","product_id":100024501,"comment_content":"戴老师：<br>   “第三个风险是，交换的方法如果依赖了 cmd，那么交换后，如果...”这句话有点不太理解，能做个详细的阐述吗？交换方法在什么情况会依赖cmd？不是特别理解，谢谢~","like_count":22,"discussions":[{"author":{"id":1183797,"avatar":"https://static001.geekbang.org/account/avatar/00/12/10/35/e5ecc7b5.jpg","nickname":"Franky•木下","note":"","ucode":"A720F2A18A62D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239100,"discussion_content":"看 @daniel 的评论","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587273734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110431,"user_name":"daniel","can_delete":false,"product_type":"c1","uid":1370456,"ip_address":"","ucode":"3516AF7F9A4DEA","user_header":"https://static001.geekbang.org/account/avatar/00/14/e9/58/397a4ab2.jpg","comment_is_top":false,"comment_ctime":1562257186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78871668514","product_id":100024501,"comment_content":"cmd是指每个函数中都会存在的一个隐藏参数，比如我们想要知道当前函数的名字可以通过在函数内部NSStringFromSelector(_cmd)打印当前函数名字，方法交换后显然原方法的cmd不同了，就跟评论其他人说的差不多，假如原函数有些逻辑是对_cmd进行的，这时候就会出现奇怪的错误。","like_count":18},{"had_liked":false,"id":98500,"user_name":"Trust me ҉҉҉҉҉҉҉❀","can_delete":false,"product_type":"c1","uid":1112913,"ip_address":"","ucode":"B576CBDE262A40","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/51/870a6fcb.jpg","comment_is_top":false,"comment_ctime":1559012269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40213717933","product_id":100024501,"comment_content":"aspect风险才多 bug也多","like_count":9},{"had_liked":false,"id":98805,"user_name":"吹啊吹吹","can_delete":false,"product_type":"c1","uid":1455385,"ip_address":"","ucode":"FFB7D85C26145B","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/19/4f9dc4b5.jpg","comment_is_top":false,"comment_ctime":1559098390,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31623869462","product_id":100024501,"comment_content":"问题跟Vicky 朋友一样，我不清楚这里的cmd指的是什么，谢谢","like_count":7,"discussions":[{"author":{"id":1471806,"avatar":"https://static001.geekbang.org/account/avatar/00/16/75/3e/71b16443.jpg","nickname":"Struggle","note":"","ucode":"C769D8FFD9C1B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290757,"discussion_content":"不是很多时候，在使用dispatch的时候，会用cmd作为key么\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594600482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98435,"user_name":"Usama Bin Laden","can_delete":false,"product_type":"c1","uid":1381768,"ip_address":"","ucode":"5D6CAB1FB73713","user_header":"https://static001.geekbang.org/account/avatar/00/15/15/88/e0845b51.jpg","comment_is_top":false,"comment_ctime":1559004425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27328808201","product_id":100024501,"comment_content":"方法交换，都没用过库，都是直接写的。。。","like_count":6},{"had_liked":false,"id":98707,"user_name":"Realtime","can_delete":false,"product_type":"c1","uid":1107989,"ip_address":"","ucode":"CCE761CF2CD804","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/15/c60311ab.jpg","comment_is_top":false,"comment_ctime":1559062274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23033898754","product_id":100024501,"comment_content":"老师，swift 有 相关功能么？ 没有的话，怎么做无侵入埋点呀。苹果为啥把动态功能去掉了，怎么考虑的呀？有相关的替代方法么？","like_count":5},{"had_liked":false,"id":100330,"user_name":"bart","can_delete":false,"product_type":"c1","uid":1394152,"ip_address":"","ucode":"CDB3351F85A65D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoGRhUIWgJcgLOkpH6p4EfxVGvF0daA9r91CoEcJ0lRIAiad8FJFzf4WVHgJRh0OdicX5PZ2MpWCV0Q/132","comment_is_top":false,"comment_ctime":1559529616,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18739398800","product_id":100024501,"comment_content":"@Vicky 我帮你举个栗子<br>当你在运行时替换某对象中的某函数实现时，如果需要在替换函数中调用原始函数实现，则可以使用cmd。<br><br> 1.创建新类继承老类实现相同的函数<br> 2.在老类的分类的函数中将被hook的类的isa指向新类(也就是修改了元类)<br> 此时的实例实际上就是新创建子类的实例了<br> 3.所以此时调用实例的函数就会调用子类的函数<br> 4.(可选：在子类中动态获取父类，调用父类的eat函数)就是这步，可以使用cmd。<br><br>","like_count":4,"discussions":[{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238014,"discussion_content":"你的第2条，不知道说的什么意思，能展开说下嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587205341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98517,"user_name":"席🍐🍎","can_delete":false,"product_type":"c1","uid":1454597,"ip_address":"","ucode":"EEF51E246A55FD","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/05/b662ff98.jpg","comment_is_top":false,"comment_ctime":1559015332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14443917220","product_id":100024501,"comment_content":"@Vicky 那是指方法内部对cmd做了判断，运行特殊的逻辑，进行swizz之后原方法的cmd会变，可能会导致逻辑错误","like_count":3},{"had_liked":false,"id":99094,"user_name":"Chouee","can_delete":false,"product_type":"c1","uid":1244701,"ip_address":"","ucode":"F74E58A430C470","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/1d/ed26272a.jpg","comment_is_top":false,"comment_ctime":1559141572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854108868","product_id":100024501,"comment_content":"原来纯OC开发，Aspect无埋点统计用得66的。自从混编了之后。。。🕳🕳🕳","like_count":1},{"had_liked":false,"id":98762,"user_name":"筇琼","can_delete":false,"product_type":"c1","uid":1458239,"ip_address":"","ucode":"A0DB5CC0884E64","user_header":"https://static001.geekbang.org/account/avatar/00/16/40/3f/63fc1b53.jpg","comment_is_top":false,"comment_ctime":1559091589,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5854058885","product_id":100024501,"comment_content":"戴老师你好，用 Aspects 进行方法拦截时，如何实现带有返回值方法的替换？此时的返回值由我自己定义，而调用原方法的对象可以得到这个返回值。","like_count":1,"discussions":[{"author":{"id":1147205,"avatar":"https://static001.geekbang.org/account/avatar/00/11/81/45/9aa91b75.jpg","nickname":"矮个子先生😝","note":"","ucode":"2242A457B0E10D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4063,"discussion_content":"那就只能用AspectPositionInstead了,然后在block里调用原来的方法获取返回值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565085910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1085895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/91/c7/68962a38.jpg","nickname":"Geek_2e70e0","note":"","ucode":"B0FDF6C2B96E74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2968,"discussion_content":"说的也是","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564073236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98721,"user_name":"Kai","can_delete":false,"product_type":"c1","uid":1024088,"ip_address":"","ucode":"CD3FACF1803D8F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/58/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1559081419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854048715","product_id":100024501,"comment_content":"swift怎么进行类似method swizzling的技术呢？","like_count":1},{"had_liked":false,"id":98566,"user_name":"hopestar90","can_delete":false,"product_type":"c1","uid":1457492,"ip_address":"","ucode":"99F2A5664FE1F0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epVhRFBLPOic3kUju3dkpmwEeI1aBxy7WSGtq5smkicKz4bTbicsSElekSjnBhCQvibncVOHBHeY6pnuA/132","comment_is_top":false,"comment_ctime":1559030934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853998230","product_id":100024501,"comment_content":"Aspects确实在做hook上很有想法，不仅能对类做hook，还能对单独实例做hook。但是本质上他用了消息转发流程，作者也说了 不适合于高频度调用的方法","like_count":1},{"had_liked":false,"id":357223,"user_name":"小良","can_delete":false,"product_type":"c1","uid":1057062,"ip_address":"广东","ucode":"5B5F5AAA843A79","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/26/77f1900a.jpg","comment_is_top":false,"comment_ctime":1663077448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663077448","product_id":100024501,"comment_content":"我觉得文章所说的「风险」，应该是注意事项吧：① 在 +load 方法交换（调用前完成方法的交换）；② 需要避免父类交换；③ 这个的确我之前没想到，可能我没有试过在方法里使用 _cmd 来做一些业务逻辑吧；④ 方法交换命名冲突（注意加前缀）🐶","like_count":0},{"had_liked":false,"id":251511,"user_name":"henry_shr","can_delete":false,"product_type":"c1","uid":1028936,"ip_address":"","ucode":"6C32A676D58992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b3/48/353f9e32.jpg","comment_is_top":false,"comment_ctime":1601633187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601633187","product_id":100024501,"comment_content":"类方法和实例方法可以交换么","like_count":0},{"had_liked":false,"id":240380,"user_name":"mersa","can_delete":false,"product_type":"c1","uid":1330156,"ip_address":"","ucode":"A9F0B2FF9457C9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epzwbJGbUmgEC77J6QY6A5pLPdPbw7sqk4DcsHK8qPw7OiaiaMD7pjzb8uHlkY5uLZRibWVvPDDAgM5A/132","comment_is_top":false,"comment_ctime":1596881544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596881544","product_id":100024501,"comment_content":"说的那个_cmd风险，Aspect也存在的。hook方法以后原方法打印_cmd是aliasSelector","like_count":0},{"had_liked":false,"id":187976,"user_name":"王万杰","can_delete":false,"product_type":"c1","uid":1862681,"ip_address":"","ucode":"D1C6C9439712A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/6c/19/d6814107.jpg","comment_is_top":false,"comment_ctime":1584286043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584286043","product_id":100024501,"comment_content":"Aspects性能不如Stinger，是大不如","like_count":0},{"had_liked":false,"id":182713,"user_name":"iHTC","can_delete":false,"product_type":"c1","uid":1048531,"ip_address":"","ucode":"22065449F54F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/d3/f249eefe.jpg","comment_is_top":false,"comment_ctime":1582854585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582854585","product_id":100024501,"comment_content":"【Swift能不能用hook？】<br>我们与 Runtime 进行交互的只能通过下面三种方式：<br><br>1、Objective-C Source Code： 这个最直接，我们写的 OC 代码最终都会被转换为运行时的代码，在程序运行的时候执行的就是这些运行时代码。比如发送、转发消息等等。<br><br>2、NSObject Methods： OC 中，除了 NSProxy 这个类之外，其他所有的类都继承自 NSObject。而 NSObject 中有着类似 class,isKindOfClass,respondsToSelector 这样的方法，他们都是通过 Runtime 来实现的。<br><br>3、Runtime Functions： 在 &#47;usr&#47;include&#47;objc 这个目录中可以找到 Runtime 暴露出来的一些函数和数据结构，通过这些接口我们可以使用一些更高级的操作。比如 Method Swizzle,AssociatedObject 等等。<br><br>所以，如果用Swift写的代码继承于 NSObject就可以hook，了解更多，可以看这个文章 https:&#47;&#47;juejin.im&#47;entry&#47;5e3c30cd6fb9a07cad3b8d98","like_count":0},{"had_liked":false,"id":101771,"user_name":"景天儿","can_delete":false,"product_type":"c1","uid":1018983,"ip_address":"","ucode":"1A5EFE9DE2597B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/67/e91fe8d3.jpg","comment_is_top":false,"comment_ctime":1559966772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559966772","product_id":100024501,"comment_content":"cmd就是_cmd吧，意思是swizz的方法中，使用了_cmd这个宏定义。","like_count":0},{"had_liked":false,"id":101770,"user_name":"景天儿","can_delete":false,"product_type":"c1","uid":1018983,"ip_address":"","ucode":"1A5EFE9DE2597B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/67/e91fe8d3.jpg","comment_is_top":false,"comment_ctime":1559966745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559966745","product_id":100024501,"comment_content":"这篇关于Aspect为什么更安全，也就是他填坑的原理，讲的有点儿抽象……","like_count":0}]}